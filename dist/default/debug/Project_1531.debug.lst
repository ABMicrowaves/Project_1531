

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Mar 18 16:00:59 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1,group=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1,group=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1
   105                           	psect	text86,global,reloc=2,class=CODE,delta=1
   106                           	psect	text87,global,reloc=2,class=CODE,delta=1,group=1
   107                           	psect	text88,global,reloc=2,class=CODE,delta=1,group=1
   108                           	psect	text89,global,reloc=2,class=CODE,delta=1,group=1
   109                           	psect	text90,global,reloc=2,class=CODE,delta=1,group=1
   110                           	psect	text91,global,reloc=2,class=CODE,delta=1,group=1
   111                           	psect	text92,global,reloc=2,class=CODE,delta=1,group=1
   112                           	psect	text93,global,reloc=2,class=CODE,delta=1,group=1
   113                           	psect	text94,global,reloc=2,class=CODE,delta=1,group=1
   114                           	psect	text95,global,reloc=2,class=CODE,delta=1,group=1
   115                           	psect	text96,global,reloc=2,class=CODE,delta=1,group=1
   116                           	psect	text97,global,reloc=2,class=CODE,delta=1,group=1
   117                           	psect	text98,global,reloc=2,class=CODE,delta=1,group=1
   118                           	psect	text99,global,reloc=2,class=CODE,delta=1,group=1
   119                           	psect	text100,global,reloc=2,class=CODE,delta=1,group=1
   120                           	psect	text101,global,reloc=2,class=CODE,delta=1,group=1
   121                           	psect	text102,global,reloc=2,class=CODE,delta=1,group=1
   122                           	psect	text103,global,reloc=2,class=CODE,delta=1,group=1
   123                           	psect	text104,global,reloc=2,class=CODE,delta=1,group=1
   124                           	psect	text105,global,reloc=2,class=CODE,delta=1,group=1
   125                           	psect	text106,global,reloc=2,class=CODE,delta=1,group=1
   126                           	psect	text107,global,reloc=2,class=CODE,delta=1
   127                           	psect	text108,global,reloc=2,class=CODE,delta=1
   128                           	psect	text109,global,reloc=2,class=CODE,delta=1
   129                           	psect	text110,global,reloc=2,class=CODE,delta=1
   130                           	psect	text111,global,reloc=2,class=CODE,delta=1
   131                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   132                           	psect	text113,global,reloc=2,class=CODE,delta=1
   133                           	psect	text114,global,reloc=2,class=CODE,delta=1,group=1
   134                           	psect	text115,global,reloc=2,class=CODE,delta=1
   135                           	psect	text116,global,reloc=2,class=CODE,delta=1
   136                           	psect	text117,global,reloc=2,class=CODE,delta=1
   137                           	psect	text118,global,reloc=2,class=CODE,delta=1
   138                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   139                           	psect	text119,global,reloc=2,class=CODE,delta=1
   140                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   141                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   142  0000                     
   143                           ; Version 1.45
   144                           ; Generated 16/11/2017 GMT
   145                           ; 
   146                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   147                           ; All rights reserved.
   148                           ; 
   149                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   150                           ; 
   151                           ; Redistribution and use in source and binary forms, with or without modification, are
   152                           ; permitted provided that the following conditions are met:
   153                           ; 
   154                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   155                           ;        conditions and the following disclaimer.
   156                           ; 
   157                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   158                           ;        of conditions and the following disclaimer in the documentation and/or other
   159                           ;        materials provided with the distribution.
   160                           ; 
   161                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   162                           ;        software without specific prior written permission.
   163                           ; 
   164                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   165                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   166                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   167                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   168                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   169                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   170                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   171                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   172                           ; 
   173                           ; 
   174                           ; Code-generator required, PIC18F45K22 Definitions
   175                           ; 
   176                           ; SFR Addresses
   177  0000                     
   178 ;; Function _TMR0_DefaultInterruptHandler is unused but had its address taken
   179  0000                     
   180                           	psect	idataCOMRAM
   181  003954                     __pidataCOMRAM:
   182                           	opt stack 0
   183                           
   184                           ;initializer for _writeAddress
   185  003954  4000               	dw	16384
   186  003956  0000               	dw	0
   187                           
   188                           ;initializer for _SynthRxOper
   189  003958  01                 	db	1
   190                           
   191                           ;initializer for _SynthTxOper
   192  003959  01                 	db	1
   193                           
   194                           	psect	idataBANK0
   195  003894                     __pidataBANK0:
   196                           	opt stack 0
   197                           
   198                           ;initializer for _groupsArray
   199  003894  96                 	db	low _GroupControlMcu
   200  003895  34                 	db	high _GroupControlMcu
   201  003896  A4                 	db	low _GroupStatusAndVersion
   202  003897  36                 	db	high _GroupStatusAndVersion
   203  003898  50                 	db	low _GroupAdc
   204  003899  30                 	db	high _GroupAdc
   205  00389A  F8                 	db	low _GroupSynthesizers
   206  00389B  23                 	db	high _GroupSynthesizers
   207  00389C  E0                 	db	low _GroupFlashMemory
   208  00389D  30                 	db	high _GroupFlashMemory
   209  00389E  34                 	db	low _GroupDAC
   210  00389F  37                 	db	high _GroupDAC
   211                           
   212                           ;initializer for _readAddress
   213  0038A0  4000               	dw	16384
   214  0038A2  0000               	dw	0
   215                           
   216                           	psect	smallconst
   217  000600                     __psmallconst:
   218                           	opt stack 0
   219  000600  00                 	db	0
   220  000601                     _SYNTH_REGS:
   221                           	opt stack 0
   222  000601  041C               	dw	1052
   223  000603  0001               	dw	1
   224  000605  300B               	dw	12299
   225  000607  0061               	dw	97
   226  000609  193A               	dw	6458
   227  00060B  00C0               	dw	192
   228  00060D  FCC9               	dw	64713
   229  00060F  1110               	dw	4368
   230  000611  0428               	dw	1064
   231  000613  102D               	dw	4141
   232  000615  00E7               	dw	231
   233  000617  1200               	dw	4608
   234  000619  6076               	dw	24694
   235  00061B  3500               	dw	13568
   236  00061D  0025               	dw	37
   237  00061F  0080               	dw	128
   238  000621  8384               	dw	33668
   239  000623  3000               	dw	12288
   240  000625  0003               	dw	3
   241  000627  0000               	dw	0
   242  000629  0012               	dw	18
   243  00062B  0000               	dw	0
   244  00062D  0001               	dw	1
   245  00062F  0C00               	dw	3072
   246  000631  0680               	dw	1664
   247  000633  0020               	dw	32
   248  000635                     __end_of_SYNTH_REGS:
   249                           	opt stack 0
   250  000635                     _SYNTH_ADDRES:
   251                           	opt stack 0
   252  000635  04                 	db	4
   253  000636  08                 	db	8
   254  000637  0C                 	db	12
   255  000638  00                 	db	0
   256  000639  10                 	db	16
   257  00063A  00                 	db	0
   258  00063B  14                 	db	20
   259  00063C  00                 	db	0
   260  00063D  00                 	db	0
   261  00063E  00                 	db	0
   262  00063F  18                 	db	24
   263  000640  00                 	db	0
   264  000641  00                 	db	0
   265  000642                     __end_of_SYNTH_ADDRES:
   266                           	opt stack 0
   267  000642                     _DAC_DEFAULT_INIT_VALUES:
   268                           	opt stack 0
   269  000642  2344               	dw	9028
   270  000644  6344               	dw	25412
   271  000646  A344               	dw	41796
   272  000648  E344               	dw	58180
   273  00064A                     __end_of_DAC_DEFAULT_INIT_VALUES:
   274                           	opt stack 0
   275  00064A                     _channelArr:
   276                           	opt stack 0
   277  00064A  07                 	db	7
   278  00064B  06                 	db	6
   279  00064C  05                 	db	5
   280  00064D  04                 	db	4
   281  00064E  19                 	db	25
   282  00064F  0A                 	db	10
   283  000650  0D                 	db	13
   284  000651                     __end_of_channelArr:
   285                           	opt stack 0
   286  000651                     _DAC_ADDRES:
   287                           	opt stack 0
   288  000651  02                 	db	2
   289  000652  04                 	db	4
   290  000653  06                 	db	6
   291  000654  08                 	db	8
   292  000655                     __end_of_DAC_ADDRES:
   293                           	opt stack 0
   294  000655                     exp@coeff:
   295                           	opt stack 0
   296  000655  00                 	db	0
   297  000656  80                 	db	128
   298  000657  3F                 	db	63
   299  000658  72                 	db	114
   300  000659  31                 	db	49
   301  00065A  3F                 	db	63
   302  00065B  FE                 	db	254
   303  00065C  75                 	db	117
   304  00065D  3E                 	db	62
   305  00065E  58                 	db	88
   306  00065F  63                 	db	99
   307  000660  3D                 	db	61
   308  000661  95                 	db	149
   309  000662  1D                 	db	29
   310  000663  3C                 	db	60
   311  000664  C5                 	db	197
   312  000665  AE                 	db	174
   313  000666  3A                 	db	58
   314  000667  79                 	db	121
   315  000668  21                 	db	33
   316  000669  39                 	db	57
   317  00066A  94                 	db	148
   318  00066B  80                 	db	128
   319  00066C  37                 	db	55
   320  00066D  93                 	db	147
   321  00066E  A7                 	db	167
   322  00066F  35                 	db	53
   323  000670  56                 	db	86
   324  000671  15                 	db	21
   325  000672  34                 	db	52
   326  000673                     __end_ofexp@coeff:
   327                           	opt stack 0
   328  000673                     log@coeff:
   329                           	opt stack 0
   330  000673  00                 	db	0
   331  000674  00                 	db	0
   332  000675  00                 	db	0
   333  000676  00                 	db	0
   334  000677  80                 	db	128
   335  000678  3F                 	db	63
   336  000679  F0                 	db	240
   337  00067A  FF                 	db	255
   338  00067B  BE                 	db	190
   339  00067C  E2                 	db	226
   340  00067D  A9                 	db	169
   341  00067E  3E                 	db	62
   342  00067F  83                 	db	131
   343  000680  76                 	db	118
   344  000681  BE                 	db	190
   345  000682  AE                 	db	174
   346  000683  2B                 	db	43
   347  000684  3E                 	db	62
   348  000685  3C                 	db	60
   349  000686  C3                 	db	195
   350  000687  BD                 	db	189
   351  000688  D2                 	db	210
   352  000689  13                 	db	19
   353  00068A  3D                 	db	61
   354  00068B  78                 	db	120
   355  00068C  D3                 	db	211
   356  00068D  BB                 	db	187
   357  00068E                     __end_oflog@coeff:
   358                           	opt stack 0
   359  00068E                     STR_1:
   360                           
   361                           ; BSR set to: 0
   362  00068E  4D                 	db	77	;'M'
   363  00068F  61                 	db	97	;'a'
   364  000690  72                 	db	114	;'r'
   365  000691  20                 	db	32
   366  000692  31                 	db	49	;'1'
   367  000693  38                 	db	56	;'8'
   368  000694  20                 	db	32
   369  000695  32                 	db	50	;'2'
   370  000696  30                 	db	48	;'0'
   371  000697  31                 	db	49	;'1'
   372  000698  38                 	db	56	;'8'
   373  000699  00                 	db	0
   374  00069A                     STR_2:
   375                           
   376                           ; BSR set to: 0
   377  00069A  31                 	db	49	;'1'
   378  00069B  36                 	db	54	;'6'
   379  00069C  3A                 	db	58	;':'
   380  00069D  30                 	db	48	;'0'
   381  00069E  30                 	db	48	;'0'
   382  00069F  3A                 	db	58	;':'
   383  0006A0  35                 	db	53	;'5'
   384  0006A1  34                 	db	52	;'4'
   385  0006A2  00                 	db	0
   386                           
   387                           ; #config settings
   388  0006A3  00                 	db	0	; dummy byte at the end
   389  0000                     
   390                           	psect	nvCOMRAM
   391  000046                     __pnvCOMRAM:
   392                           	opt stack 0
   393  000046                     _timer0ReloadVal:
   394                           	opt stack 0
   395  000046                     	ds	2
   396                           
   397                           	psect	nvBANK0
   398  0000FD                     __pnvBANK0:
   399                           	opt stack 0
   400  0000FD                     _TMR0_InterruptHandler:
   401                           	opt stack 0
   402  0000FD                     	ds	2
   403  0000FF                     _eusart1TxBufferRemaining:
   404                           	opt stack 0
   405  0000FF                     	ds	1
   406  0000                     _ANSELA	set	3896
   407  0000                     _ANSELE	set	3900
   408  0000                     _ANSELD	set	3899
   409  0000                     _ANSELB	set	3897
   410  0000                     _ANSELC	set	3898
   411  0000                     _ADCON0bits	set	4034
   412  0000                     _ADRESH	set	4036
   413  0000                     _ADRESL	set	4035
   414  0000                     _ADCON2	set	4032
   415  0000                     _ADCON1	set	4033
   416  0000                     _ADCON0	set	4034
   417  0000                     _T0CONbits	set	4053
   418  0000                     _T0CON	set	4053
   419  0000                     _TMR0L	set	4054
   420  0000                     _TMR0H	set	4055
   421  0000                     _EEDATA	set	4008
   422  0000                     _EEADR	set	4009
   423  0000                     _EECON2	set	4007
   424  0000                     _EECON1bits	set	4006
   425  0000                     _TABLAT	set	4085
   426  0000                     _TBLPTRL	set	4086
   427  0000                     _TBLPTRH	set	4087
   428  0000                     _TBLPTRU	set	4088
   429  0000                     _INTCON2bits	set	4081
   430  0000                     _WPUB	set	3937
   431  0000                     _TRISD	set	3989
   432  0000                     _TRISC	set	3988
   433  0000                     _TRISB	set	3987
   434  0000                     _TRISA	set	3986
   435  0000                     _TRISE	set	3990
   436  0000                     _LATC	set	3979
   437  0000                     _LATB	set	3978
   438  0000                     _LATA	set	3977
   439  0000                     _LATD	set	3980
   440  0000                     _LATE	set	3981
   441  0000                     _RCREG1	set	4014
   442  0000                     _RCSTA1bits	set	4011
   443  0000                     _TXREG1	set	4013
   444  0000                     _SPBRGH1	set	4016
   445  0000                     _SPBRG1	set	4015
   446  0000                     _TXSTA1	set	4012
   447  0000                     _RCSTA1	set	4011
   448  0000                     _BAUDCON1	set	4024
   449  0000                     _PIR1bits	set	3998
   450  0000                     _PIE1bits	set	3997
   451  0000                     _PIR2bits	set	4001
   452  0000                     _PIE2bits	set	4000
   453  0000                     _RCONbits	set	4048
   454  0000                     _OSCTUNE	set	3995
   455  0000                     _OSCCON2	set	4050
   456  0000                     _OSCCON	set	4051
   457  0000                     _LATAbits	set	3977
   458  0000                     _LATDbits	set	3980
   459  0000                     _INTCONbits	set	4082
   460  0000                     _IOCB	set	3938
   461  0000                     _LATCbits	set	3979
   462  0000                     _LATBbits	set	3978
   463                           
   464                           	psect	cinit
   465  002992                     __pcinit:
   466                           	opt stack 0
   467  002992                     start_initialization:
   468                           	opt stack 0
   469  002992                     __initialization:
   470                           	opt stack 0
   471                           
   472                           ; Initialize objects allocated to BANK0 (16 bytes)
   473                           ; load TBLPTR registers with __pidataBANK0
   474  002992  0E94               	movlw	low __pidataBANK0
   475  002994  6EF6               	movwf	tblptrl,c
   476  002996  0E38               	movlw	high __pidataBANK0
   477  002998  6EF7               	movwf	tblptrh,c
   478  00299A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   479  00299C  6EF8               	movwf	tblptru,c
   480  00299E  EE00  F0ED         	lfsr	0,__pdataBANK0
   481  0029A2  EE10 F010          	lfsr	1,16
   482  0029A6                     copy_data0:
   483  0029A6  0009               	tblrd		*+
   484  0029A8  CFF5 FFEE          	movff	tablat,postinc0
   485  0029AC  50E5               	movf	postdec1,w,c
   486  0029AE  50E1               	movf	fsr1l,w,c
   487  0029B0  E1FA               	bnz	copy_data0
   488                           
   489                           ; Initialize objects allocated to COMRAM (6 bytes)
   490                           ; load TBLPTR registers with __pidataCOMRAM
   491  0029B2  0E54               	movlw	low __pidataCOMRAM
   492  0029B4  6EF6               	movwf	tblptrl,c
   493  0029B6  0E39               	movlw	high __pidataCOMRAM
   494  0029B8  6EF7               	movwf	tblptrh,c
   495  0029BA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   496  0029BC  6EF8               	movwf	tblptru,c
   497  0029BE  EE00  F040         	lfsr	0,__pdataCOMRAM
   498  0029C2  EE10 F006          	lfsr	1,6
   499  0029C6                     copy_data1:
   500  0029C6  0009               	tblrd		*+
   501  0029C8  CFF5 FFEE          	movff	tablat,postinc0
   502  0029CC  50E5               	movf	postdec1,w,c
   503  0029CE  50E1               	movf	fsr1l,w,c
   504  0029D0  E1FA               	bnz	copy_data1
   505                           
   506                           ; Clear objects allocated to BANK1 (194 bytes)
   507  0029D2  EE01  F000         	lfsr	0,__pbssBANK1
   508  0029D6  0EC2               	movlw	194
   509  0029D8                     clear_0:
   510  0029D8  6AEE               	clrf	postinc0,c
   511  0029DA  06E8               	decf	wreg,f,c
   512  0029DC  E1FD               	bnz	clear_0
   513                           
   514                           ; Clear objects allocated to BANK0 (45 bytes)
   515  0029DE  EE00  F0C0         	lfsr	0,__pbssBANK0
   516  0029E2  0E2D               	movlw	45
   517  0029E4                     clear_1:
   518  0029E4  6AEE               	clrf	postinc0,c
   519  0029E6  06E8               	decf	wreg,f,c
   520  0029E8  E1FD               	bnz	clear_1
   521                           
   522                           ; Clear objects allocated to COMRAM (16 bytes)
   523  0029EA  EE00  F030         	lfsr	0,__pbssCOMRAM
   524  0029EE  0E10               	movlw	16
   525  0029F0                     clear_2:
   526  0029F0  6AEE               	clrf	postinc0,c
   527  0029F2  06E8               	decf	wreg,f,c
   528  0029F4  E1FD               	bnz	clear_2
   529  0029F6                     end_of_initialization:
   530                           	opt stack 0
   531  0029F6                     __end_of__initialization:
   532                           	opt stack 0
   533  0029F6  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   534  0029F8  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   535  0029FA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   536  0029FC  6EF8               	movwf	tblptru,c
   537  0029FE  0100               	movlb	0
   538  002A00  EF9F  F015         	goto	_main	;jump to C main() function
   539                           tblptru	equ	0xFF8
   540                           tblptrh	equ	0xFF7
   541                           tblptrl	equ	0xFF6
   542                           tablat	equ	0xFF5
   543                           postinc0	equ	0xFEE
   544                           wreg	equ	0xFE8
   545                           postdec1	equ	0xFE5
   546                           fsr1l	equ	0xFE1
   547                           
   548                           	psect	bssCOMRAM
   549  000030                     __pbssCOMRAM:
   550                           	opt stack 0
   551  000030                     _numOfValidateSamples:
   552                           	opt stack 0
   553  000030                     	ds	4
   554  000034                     TMR0_ISR@CountCallBack:
   555                           	opt stack 0
   556  000034                     	ds	2
   557  000036                     _eusart1RxTail:
   558                           	opt stack 0
   559  000036                     	ds	1
   560  000037                     _eusart1RxHead:
   561                           	opt stack 0
   562  000037                     	ds	1
   563  000038                     _eusart1TxTail:
   564                           	opt stack 0
   565  000038                     	ds	1
   566  000039                     _eusart1TxHead:
   567                           	opt stack 0
   568  000039                     	ds	1
   569  00003A                     _cntRegUpdate:
   570                           	opt stack 0
   571  00003A                     	ds	1
   572  00003B                     _adcSampleMode:
   573                           	opt stack 0
   574  00003B                     	ds	1
   575  00003C                     _numOfReadSamples:
   576                           	opt stack 0
   577  00003C                     	ds	4
   578                           tblptru	equ	0xFF8
   579                           tblptrh	equ	0xFF7
   580                           tblptrl	equ	0xFF6
   581                           tablat	equ	0xFF5
   582                           postinc0	equ	0xFEE
   583                           wreg	equ	0xFE8
   584                           postdec1	equ	0xFE5
   585                           fsr1l	equ	0xFE1
   586                           
   587                           	psect	dataCOMRAM
   588  000040                     __pdataCOMRAM:
   589                           	opt stack 0
   590  000040                     _writeAddress:
   591                           	opt stack 0
   592  000040                     	ds	4
   593  000044                     _SynthRxOper:
   594                           	opt stack 0
   595  000044                     	ds	1
   596  000045                     _SynthTxOper:
   597                           	opt stack 0
   598  000045                     	ds	1
   599                           tblptru	equ	0xFF8
   600                           tblptrh	equ	0xFF7
   601                           tblptrl	equ	0xFF6
   602                           tablat	equ	0xFF5
   603                           postinc0	equ	0xFEE
   604                           wreg	equ	0xFE8
   605                           postdec1	equ	0xFE5
   606                           fsr1l	equ	0xFE1
   607                           
   608                           	psect	bssBANK0
   609  0000C0                     __pbssBANK0:
   610                           	opt stack 0
   611  0000C0                     _mcuRunTimeIn5SecTicks:
   612                           	opt stack 0
   613  0000C0                     	ds	4
   614  0000C4                     _errno:
   615                           	opt stack 0
   616  0000C4                     	ds	2
   617  0000C6                     _sampleCount:
   618                           	opt stack 0
   619  0000C6                     	ds	2
   620  0000C8                     _count:
   621                           	opt stack 0
   622  0000C8                     	ds	2
   623  0000CA                     _isReWriteDone:
   624                           	opt stack 0
   625  0000CA                     	ds	1
   626  0000CB                     _msgCount:
   627                           	opt stack 0
   628  0000CB                     	ds	1
   629  0000CC                     _crcGiven:
   630                           	opt stack 0
   631  0000CC                     	ds	1
   632  0000CD                     _crcCalc:
   633                           	opt stack 0
   634  0000CD                     	ds	1
   635  0000CE                     _data:
   636                           	opt stack 0
   637  0000CE                     	ds	1
   638  0000CF                     _dataSize:
   639                           	opt stack 0
   640  0000CF                     	ds	1
   641  0000D0                     _request:
   642                           	opt stack 0
   643  0000D0                     	ds	1
   644  0000D1                     _group:
   645                           	opt stack 0
   646  0000D1                     	ds	1
   647  0000D2                     _cState:
   648                           	opt stack 0
   649  0000D2                     	ds	1
   650  0000D3                     _eusart1RxCount:
   651                           	opt stack 0
   652  0000D3                     	ds	1
   653  0000D4                     _channel:
   654                           	opt stack 0
   655  0000D4                     	ds	1
   656  0000D5                     _conversionFormat:
   657                           	opt stack 0
   658  0000D5                     	ds	1
   659  0000D6                     _TimerKeepAliveFlag:
   660                           	opt stack 0
   661  0000D6                     	ds	1
   662  0000D7                     _TimerSamplingFlag:
   663                           	opt stack 0
   664  0000D7                     	ds	1
   665  0000D8                     _TimerOneSecFlag:
   666                           	opt stack 0
   667  0000D8                     	ds	1
   668  0000D9                     _rxMsgQueue:
   669                           	opt stack 0
   670  0000D9                     	ds	20
   671                           tblptru	equ	0xFF8
   672                           tblptrh	equ	0xFF7
   673                           tblptrl	equ	0xFF6
   674                           tablat	equ	0xFF5
   675                           postinc0	equ	0xFEE
   676                           wreg	equ	0xFE8
   677                           postdec1	equ	0xFE5
   678                           fsr1l	equ	0xFE1
   679                           
   680                           	psect	dataBANK0
   681  0000ED                     __pdataBANK0:
   682                           	opt stack 0
   683  0000ED                     _groupsArray:
   684                           	opt stack 0
   685  0000ED                     	ds	12
   686  0000F9                     _readAddress:
   687                           	opt stack 0
   688  0000F9                     	ds	4
   689                           tblptru	equ	0xFF8
   690                           tblptrh	equ	0xFF7
   691                           tblptrl	equ	0xFF6
   692                           tablat	equ	0xFF5
   693                           postinc0	equ	0xFEE
   694                           wreg	equ	0xFE8
   695                           postdec1	equ	0xFE5
   696                           fsr1l	equ	0xFE1
   697                           
   698                           	psect	bssBANK1
   699  000100                     __pbssBANK1:
   700                           	opt stack 0
   701  000100                     _eusart1TxBuffer:
   702                           	opt stack 0
   703  000100                     	ds	70
   704  000146                     _eusart1RxBuffer:
   705                           	opt stack 0
   706  000146                     	ds	40
   707  00016E                     _sampleArray:
   708                           	opt stack 0
   709  00016E                     	ds	64
   710  0001AE                     _rxMsgData:
   711                           	opt stack 0
   712  0001AE                     	ds	20
   713                           tblptru	equ	0xFF8
   714                           tblptrh	equ	0xFF7
   715                           tblptrl	equ	0xFF6
   716                           tablat	equ	0xFF5
   717                           postinc0	equ	0xFEE
   718                           wreg	equ	0xFE8
   719                           postdec1	equ	0xFE5
   720                           fsr1l	equ	0xFE1
   721                           
   722                           	psect	cstackBANK1
   723  0001C2                     __pcstackBANK1:
   724                           	opt stack 0
   725  0001C2                     GroupAdc@data:
   726                           	opt stack 0
   727  0001C2                     GroupSynthesizers@data:
   728                           	opt stack 0
   729  0001C2                     GroupFlashMemory@data:
   730                           	opt stack 0
   731  0001C2                     GroupDAC@data:
   732                           	opt stack 0
   733  0001C2                     ReadIntFromEeprom@base:
   734                           	opt stack 0
   735                           
   736                           ; 4 bytes @ 0x0
   737  0001C2                     	ds	2
   738  0001C4                     GroupFlashMemory@request:
   739                           	opt stack 0
   740                           
   741                           ; 1 bytes @ 0x2
   742  0001C4                     	ds	1
   743  0001C5                     ??_readUartMessage:
   744                           
   745                           ; 1 bytes @ 0x3
   746  0001C5                     	ds	1
   747  0001C6                     _ReadIntFromEeprom$3314:
   748                           	opt stack 0
   749                           
   750                           ; 3 bytes @ 0x4
   751  0001C6                     	ds	3
   752  0001C9                     readUartMessage@idx:
   753                           	opt stack 0
   754  0001C9                     _ReadIntFromEeprom$3315:
   755                           	opt stack 0
   756                           
   757                           ; 3 bytes @ 0x7
   758  0001C9                     	ds	2
   759  0001CB                     readUartMessage@chRec:
   760                           	opt stack 0
   761                           
   762                           ; 1 bytes @ 0x9
   763  0001CB                     	ds	1
   764  0001CC                     ReadIntFromEeprom@address:
   765                           	opt stack 0
   766                           
   767                           ; 1 bytes @ 0xA
   768  0001CC                     	ds	1
   769  0001CD                     ReadIntFromEeprom@retVal:
   770                           	opt stack 0
   771                           
   772                           ; 4 bytes @ 0xB
   773  0001CD                     	ds	4
   774  0001D1                     ReadIntFromEeprom@idx:
   775                           	opt stack 0
   776                           
   777                           ; 1 bytes @ 0xF
   778  0001D1                     	ds	1
   779                           tblptru	equ	0xFF8
   780                           tblptrh	equ	0xFF7
   781                           tblptrl	equ	0xFF6
   782                           tablat	equ	0xFF5
   783                           postinc0	equ	0xFEE
   784                           wreg	equ	0xFE8
   785                           postdec1	equ	0xFE5
   786                           fsr1l	equ	0xFE1
   787                           
   788                           	psect	cstackBANK0
   789  000060                     __pcstackBANK0:
   790                           	opt stack 0
   791  000060                     ??_FlashSampleWrite:
   792  000060                     ??___ftdiv:
   793  000060                     ??_FlashReadUart:
   794  000060                     strtol@sign:
   795                           	opt stack 0
   796  000060                     FlashReadCondition@TxMsg:
   797                           	opt stack 0
   798  000060                     GetMcuFwVersion@TxMsg:
   799                           	opt stack 0
   800  000060                     GetMcuRunTime@TxMsg:
   801                           	opt stack 0
   802  000060                     SynthReadData@TxMsg:
   803                           	opt stack 0
   804  000060                     SWSPI_Synth_send_bits@bitArray:
   805                           	opt stack 0
   806                           
   807                           ; 32 bytes @ 0x0
   808  000060                     	ds	1
   809  000061                     strtol@a:
   810                           	opt stack 0
   811                           
   812                           ; 4 bytes @ 0x1
   813  000061                     	ds	1
   814  000062                     FlashSampleWrite@rotateLeft:
   815                           	opt stack 0
   816                           
   817                           ; 2 bytes @ 0x2
   818  000062                     	ds	1
   819  000063                     ___ftdiv@cntr:
   820                           	opt stack 0
   821                           
   822                           ; 1 bytes @ 0x3
   823  000063                     	ds	1
   824  000064                     ___ftdiv@f3:
   825                           	opt stack 0
   826                           
   827                           ; 3 bytes @ 0x4
   828  000064                     	ds	1
   829  000065                     strtol@c:
   830                           	opt stack 0
   831                           
   832                           ; 1 bytes @ 0x5
   833  000065                     	ds	1
   834  000066                     ?_GetIntFromUartData:
   835                           	opt stack 0
   836  000066                     GetIntFromUartData@data:
   837                           	opt stack 0
   838                           
   839                           ; 2 bytes @ 0x6
   840  000066                     	ds	1
   841  000067                     ___ftdiv@exp:
   842                           	opt stack 0
   843                           
   844                           ; 1 bytes @ 0x7
   845  000067                     	ds	1
   846  000068                     ___ftdiv@sign:
   847                           	opt stack 0
   848                           
   849                           ; 1 bytes @ 0x8
   850  000068                     	ds	1
   851  000069                     ?___ftmul:
   852                           	opt stack 0
   853  000069                     ___ftmul@f1:
   854                           	opt stack 0
   855  000069                     GetMcuFwVersion@compileData:
   856                           	opt stack 0
   857  000069                     GetMcuRunTime@tempRunTime:
   858                           	opt stack 0
   859                           
   860                           ; 4 bytes @ 0x9
   861  000069                     	ds	3
   862  00006C                     ___ftmul@f2:
   863                           	opt stack 0
   864  00006C                     FlashReadUart@TxMsg:
   865                           	opt stack 0
   866                           
   867                           ; 69 bytes @ 0xC
   868  00006C                     	ds	1
   869  00006D                     GetMcuRunTime@idx:
   870                           	opt stack 0
   871                           
   872                           ; 2 bytes @ 0xD
   873  00006D                     	ds	1
   874  00006E                     ??_GetIntFromUartData:
   875                           
   876                           ; 1 bytes @ 0xE
   877  00006E                     	ds	1
   878  00006F                     ??___ftmul:
   879                           
   880                           ; 1 bytes @ 0xF
   881  00006F                     	ds	1
   882  000070                     GetIntFromUartData@dataRegArr:
   883                           	opt stack 0
   884                           
   885                           ; 10 bytes @ 0x10
   886  000070                     	ds	2
   887  000072                     ___ftmul@exp:
   888                           	opt stack 0
   889                           
   890                           ; 1 bytes @ 0x12
   891  000072                     	ds	1
   892  000073                     ___ftmul@f3_as_product:
   893                           	opt stack 0
   894                           
   895                           ; 3 bytes @ 0x13
   896  000073                     	ds	3
   897  000076                     ___ftmul@cntr:
   898                           	opt stack 0
   899                           
   900                           ; 1 bytes @ 0x16
   901  000076                     	ds	1
   902  000077                     ___ftmul@sign:
   903                           	opt stack 0
   904                           
   905                           ; 1 bytes @ 0x17
   906  000077                     	ds	1
   907  000078                     ??_CheckFlashPrecentage:
   908  000078                     ?___ftadd:
   909                           	opt stack 0
   910  000078                     ?___fttol:
   911                           	opt stack 0
   912  000078                     ___ftadd@f1:
   913                           	opt stack 0
   914  000078                     ___fttol@f1:
   915                           	opt stack 0
   916                           
   917                           ; 3 bytes @ 0x18
   918  000078                     	ds	2
   919  00007A                     GetIntFromUartData@num:
   920                           	opt stack 0
   921                           
   922                           ; 1 bytes @ 0x1A
   923  00007A                     	ds	1
   924  00007B                     SynthReadData@indx:
   925                           	opt stack 0
   926  00007B                     GetIntFromUartData@recVal:
   927                           	opt stack 0
   928  00007B                     ___ftadd@f2:
   929                           	opt stack 0
   930                           
   931                           ; 3 bytes @ 0x1B
   932  00007B                     	ds	1
   933  00007C                     ??___fttol:
   934  00007C                     CheckFlashPrecentage@precentage:
   935                           	opt stack 0
   936  00007C                     GetIntFromUartData@retVal:
   937                           	opt stack 0
   938                           
   939                           ; 8 bytes @ 0x1C
   940  00007C                     	ds	2
   941  00007E                     ??___ftadd:
   942                           
   943                           ; 1 bytes @ 0x1E
   944  00007E                     	ds	2
   945  000080                     SWSPI_Synth_send_bits@mask:
   946                           	opt stack 0
   947                           
   948                           ; 4 bytes @ 0x20
   949  000080                     	ds	1
   950  000081                     ___ftadd@sign:
   951                           	opt stack 0
   952  000081                     ___fttol@sign1:
   953                           	opt stack 0
   954                           
   955                           ; 1 bytes @ 0x21
   956  000081                     	ds	1
   957  000082                     ___ftadd@exp2:
   958                           	opt stack 0
   959  000082                     ___fttol@lval:
   960                           	opt stack 0
   961                           
   962                           ; 4 bytes @ 0x22
   963  000082                     	ds	1
   964  000083                     ___ftadd@exp1:
   965                           	opt stack 0
   966                           
   967                           ; 1 bytes @ 0x23
   968  000083                     	ds	1
   969  000084                     ?___ftsub:
   970                           	opt stack 0
   971  000084                     ?_eval_poly:
   972                           	opt stack 0
   973  000084                     SWSPI_Synth_send_bits@count:
   974                           	opt stack 0
   975  000084                     GetIntFromUartData@idxCon:
   976                           	opt stack 0
   977  000084                     ___ftsub@f1:
   978                           	opt stack 0
   979  000084                     eval_poly@x:
   980                           	opt stack 0
   981                           
   982                           ; 3 bytes @ 0x24
   983  000084                     	ds	1
   984  000085                     SWSPI_Synth_send_bits@phrType:
   985                           	opt stack 0
   986                           
   987                           ; 1 bytes @ 0x25
   988  000085                     	ds	1
   989  000086                     GetIntFromUartData@idxData:
   990                           	opt stack 0
   991  000086                     ___fttol@exp1:
   992                           	opt stack 0
   993                           
   994                           ; 1 bytes @ 0x26
   995  000086                     	ds	1
   996  000087                     ?___altoft:
   997                           	opt stack 0
   998  000087                     UpdateTxFreq@data:
   999                           	opt stack 0
  1000  000087                     eval_poly@d:
  1001                           	opt stack 0
  1002  000087                     ___ftsub@f2:
  1003                           	opt stack 0
  1004  000087                     ___altoft@c:
  1005                           	opt stack 0
  1006                           
  1007                           ; 4 bytes @ 0x27
  1008  000087                     	ds	2
  1009  000089                     eval_poly@n:
  1010                           	opt stack 0
  1011  000089                     UpdateTxFreq@retVal:
  1012                           	opt stack 0
  1013                           
  1014                           ; 8 bytes @ 0x29
  1015  000089                     	ds	2
  1016  00008B                     ??_eval_poly:
  1017  00008B                     ??___altoft:
  1018                           
  1019                           ; 1 bytes @ 0x2B
  1020  00008B                     	ds	2
  1021  00008D                     eval_poly@res:
  1022                           	opt stack 0
  1023                           
  1024                           ; 3 bytes @ 0x2D
  1025  00008D                     	ds	2
  1026  00008F                     ___altoft@exp:
  1027                           	opt stack 0
  1028                           
  1029                           ; 1 bytes @ 0x2F
  1030  00008F                     	ds	1
  1031  000090                     ?_log:
  1032                           	opt stack 0
  1033  000090                     ?_ldexp:
  1034                           	opt stack 0
  1035  000090                     ___altoft@sign:
  1036                           	opt stack 0
  1037  000090                     ldexp@value:
  1038                           	opt stack 0
  1039  000090                     log@x:
  1040                           	opt stack 0
  1041                           
  1042                           ; 3 bytes @ 0x30
  1043  000090                     	ds	1
  1044  000091                     ?_floor:
  1045                           	opt stack 0
  1046  000091                     floor@x:
  1047                           	opt stack 0
  1048                           
  1049                           ; 3 bytes @ 0x31
  1050  000091                     	ds	2
  1051  000093                     ldexp@newexp:
  1052                           	opt stack 0
  1053  000093                     log@exponent:
  1054                           	opt stack 0
  1055                           
  1056                           ; 2 bytes @ 0x33
  1057  000093                     	ds	1
  1058  000094                     floor@i:
  1059                           	opt stack 0
  1060                           
  1061                           ; 3 bytes @ 0x34
  1062  000094                     	ds	1
  1063  000095                     ??_ldexp:
  1064                           
  1065                           ; 1 bytes @ 0x35
  1066  000095                     	ds	2
  1067  000097                     floor@expon:
  1068                           	opt stack 0
  1069                           
  1070                           ; 2 bytes @ 0x37
  1071  000097                     	ds	2
  1072  000099                     ?_exp:
  1073                           	opt stack 0
  1074  000099                     exp@x:
  1075                           	opt stack 0
  1076                           
  1077                           ; 3 bytes @ 0x39
  1078  000099                     	ds	3
  1079  00009C                     _exp$3318:
  1080                           	opt stack 0
  1081                           
  1082                           ; 3 bytes @ 0x3C
  1083  00009C                     	ds	3
  1084  00009F                     exp@exponent:
  1085                           	opt stack 0
  1086                           
  1087                           ; 2 bytes @ 0x3F
  1088  00009F                     	ds	2
  1089  0000A1                     exp@sign:
  1090                           	opt stack 0
  1091                           
  1092                           ; 1 bytes @ 0x41
  1093  0000A1                     	ds	1
  1094  0000A2                     ?_pow:
  1095                           	opt stack 0
  1096  0000A2                     pow@x:
  1097                           	opt stack 0
  1098                           
  1099                           ; 3 bytes @ 0x42
  1100  0000A2                     	ds	3
  1101  0000A5                     pow@y:
  1102                           	opt stack 0
  1103                           
  1104                           ; 3 bytes @ 0x45
  1105  0000A5                     	ds	3
  1106  0000A8                     _pow$3316:
  1107                           	opt stack 0
  1108                           
  1109                           ; 3 bytes @ 0x48
  1110  0000A8                     	ds	3
  1111  0000AB                     _pow$3317:
  1112                           	opt stack 0
  1113                           
  1114                           ; 3 bytes @ 0x4B
  1115  0000AB                     	ds	3
  1116  0000AE                     pow@sign:
  1117                           	opt stack 0
  1118                           
  1119                           ; 1 bytes @ 0x4E
  1120  0000AE                     	ds	1
  1121  0000AF                     pow@yi:
  1122                           	opt stack 0
  1123                           
  1124                           ; 4 bytes @ 0x4F
  1125  0000AF                     	ds	2
  1126  0000B1                     _FlashReadUart$581:
  1127                           	opt stack 0
  1128                           
  1129                           ; 4 bytes @ 0x51
  1130  0000B1                     	ds	2
  1131  0000B3                     ??_AdcConvert:
  1132  0000B3                     ?_ReadIntFromEeprom:
  1133                           	opt stack 0
  1134  0000B3                     ReadIntFromEeprom@numOfByes:
  1135                           	opt stack 0
  1136                           
  1137                           ; 2 bytes @ 0x53
  1138  0000B3                     	ds	2
  1139  0000B5                     AdcConvert@_adcResult:
  1140                           	opt stack 0
  1141  0000B5                     _FlashReadUart$582:
  1142                           	opt stack 0
  1143                           
  1144                           ; 4 bytes @ 0x55
  1145  0000B5                     	ds	2
  1146  0000B7                     ??_ReadIntFromEeprom:
  1147  0000B7                     AdcConvert@_adcResult_340:
  1148                           	opt stack 0
  1149                           
  1150                           ; 2 bytes @ 0x57
  1151  0000B7                     	ds	2
  1152  0000B9                     FlashReadUart@j:
  1153                           	opt stack 0
  1154  0000B9                     _AdcConvert$3313:
  1155                           	opt stack 0
  1156                           
  1157                           ; 3 bytes @ 0x59
  1158  0000B9                     	ds	1
  1159  0000BA                     ??_DacInit:
  1160                           
  1161                           ; 1 bytes @ 0x5A
  1162  0000BA                     	ds	1
  1163  0000BB                     FlashReadUart@idx:
  1164                           	opt stack 0
  1165                           
  1166                           ; 2 bytes @ 0x5B
  1167  0000BB                     	ds	1
  1168  0000BC                     AdcConvert@adcRes:
  1169                           	opt stack 0
  1170  0000BC                     DacInit@dacInput:
  1171                           	opt stack 0
  1172                           
  1173                           ; 2 bytes @ 0x5C
  1174  0000BC                     	ds	1
  1175  0000BD                     FlashReadUart@offset:
  1176                           	opt stack 0
  1177                           
  1178                           ; 2 bytes @ 0x5D
  1179  0000BD                     	ds	1
  1180  0000BE                     AdcConvert@idx:
  1181                           	opt stack 0
  1182  0000BE                     DacInit@idx:
  1183                           	opt stack 0
  1184                           
  1185                           ; 1 bytes @ 0x5E
  1186  0000BE                     	ds	1
  1187  0000BF                     ??_GroupFlashMemory:
  1188  0000BF                     GroupControlMcu@request:
  1189                           	opt stack 0
  1190  0000BF                     GroupStatusAndVersion@request:
  1191                           	opt stack 0
  1192  0000BF                     GroupAdc@request:
  1193                           	opt stack 0
  1194  0000BF                     GroupSynthesizers@request:
  1195                           	opt stack 0
  1196  0000BF                     GroupDAC@request:
  1197                           	opt stack 0
  1198                           
  1199                           ; 1 bytes @ 0x5F
  1200  0000BF                     	ds	1
  1201                           tblptru	equ	0xFF8
  1202                           tblptrh	equ	0xFF7
  1203                           tblptrl	equ	0xFF6
  1204                           tablat	equ	0xFF5
  1205                           postinc0	equ	0xFEE
  1206                           wreg	equ	0xFE8
  1207                           postdec1	equ	0xFE5
  1208                           fsr1l	equ	0xFE1
  1209                           
  1210                           	psect	cstackCOMRAM
  1211  000001                     __pcstackCOMRAM:
  1212                           	opt stack 0
  1213  000001                     ?___lwmod:
  1214                           	opt stack 0
  1215  000001                     ___lwmod@dividend:
  1216                           	opt stack 0
  1217                           
  1218                           ; 2 bytes @ 0x0
  1219  000001                     	ds	2
  1220  000003                     ___lwmod@divisor:
  1221                           	opt stack 0
  1222                           
  1223                           ; 2 bytes @ 0x2
  1224  000003                     	ds	2
  1225  000005                     ___lwmod@counter:
  1226                           	opt stack 0
  1227                           
  1228                           ; 1 bytes @ 0x4
  1229  000005                     	ds	1
  1230  000006                     ??_INTERRUPT_InterruptManager:
  1231                           
  1232                           ; 1 bytes @ 0x5
  1233  000006                     	ds	18
  1234  000018                     ??_EUSART1_Read:
  1235  000018                     ??_isspace:
  1236  000018                     ??_isdigit:
  1237  000018                     ??_isupper:
  1238  000018                     ??_BlinkErrorLeds:
  1239  000018                     ??_BlinkOkLeds:
  1240  000018                     ??_keepAliveSignalLed:
  1241  000018                     ?_ADC_GetConversion:
  1242                           	opt stack 0
  1243  000018                     ?_abs:
  1244                           	opt stack 0
  1245  000018                     ?___wmul:
  1246                           	opt stack 0
  1247  000018                     ?___ftpack:
  1248                           	opt stack 0
  1249  000018                     ?_frexp:
  1250                           	opt stack 0
  1251  000018                     ?___ftneg:
  1252                           	opt stack 0
  1253  000018                     ?___lldiv:
  1254                           	opt stack 0
  1255  000018                     ?___llmod:
  1256                           	opt stack 0
  1257  000018                     InitAdcApplicationMgr@channel:
  1258                           	opt stack 0
  1259  000018                     SwSpi_Data_Pin@cPinMode:
  1260                           	opt stack 0
  1261  000018                     SwSpi_Clk_Pin@cPinMode:
  1262                           	opt stack 0
  1263  000018                     SwSpi_Set_CE_Pin@cPinMode:
  1264                           	opt stack 0
  1265  000018                     SwSpi_Set_Synth_Le_Pin@cPinMode:
  1266                           	opt stack 0
  1267  000018                     SwSpi_Set_Dac_Sync_Pin@cPinMode:
  1268                           	opt stack 0
  1269  000018                     EUSART1_Write@txData:
  1270                           	opt stack 0
  1271  000018                     DATAEE_WriteByte@bData:
  1272                           	opt stack 0
  1273  000018                     DATAEE_ReadByte@bAdd:
  1274                           	opt stack 0
  1275  000018                     toupper@c:
  1276                           	opt stack 0
  1277  000018                     PLLUartInitialize@data:
  1278                           	opt stack 0
  1279  000018                     TMR0_SetInterruptHandler@InterruptHandler:
  1280                           	opt stack 0
  1281  000018                     crc8@dataArray:
  1282                           	opt stack 0
  1283  000018                     Make32bitsArray@array:
  1284                           	opt stack 0
  1285  000018                     ___wmul@multiplier:
  1286                           	opt stack 0
  1287  000018                     abs@a:
  1288                           	opt stack 0
  1289  000018                     memset@p1:
  1290                           	opt stack 0
  1291  000018                     ___ftpack@arg:
  1292                           	opt stack 0
  1293  000018                     ___ftge@ff1:
  1294                           	opt stack 0
  1295  000018                     ___ftneg@f1:
  1296                           	opt stack 0
  1297  000018                     frexp@value:
  1298                           	opt stack 0
  1299  000018                     FLASH_ReadByte@flashAddr:
  1300                           	opt stack 0
  1301  000018                     FLASH_EraseBlock@baseAddr:
  1302                           	opt stack 0
  1303  000018                     make8@data:
  1304                           	opt stack 0
  1305  000018                     ___lldiv@dividend:
  1306                           	opt stack 0
  1307  000018                     ___llmod@dividend:
  1308                           	opt stack 0
  1309                           
  1310                           ; 4 bytes @ 0x17
  1311  000018                     	ds	1
  1312  000019                     EepromRead@address:
  1313                           	opt stack 0
  1314  000019                     SwSpi_Data_Pin@phrType:
  1315                           	opt stack 0
  1316  000019                     SwSpi_Clk_Pin@phrType:
  1317                           	opt stack 0
  1318  000019                     SwSpi_Set_CE_Pin@phrType:
  1319                           	opt stack 0
  1320  000019                     SwSpi_Set_Synth_Le_Pin@phrType:
  1321                           	opt stack 0
  1322  000019                     DATAEE_WriteByte@bAdd:
  1323                           	opt stack 0
  1324  000019                     _isdigit$3025:
  1325                           	opt stack 0
  1326  000019                     _isspace$3028:
  1327                           	opt stack 0
  1328  000019                     _isupper$3031:
  1329                           	opt stack 0
  1330  000019                     WriteUartMessage@dataBuf:
  1331                           	opt stack 0
  1332  000019                     EUSART1_Read@readValue:
  1333                           	opt stack 0
  1334                           
  1335                           ; 2 bytes @ 0x18
  1336  000019                     	ds	1
  1337  00001A                     ??_ADC_GetConversion:
  1338  00001A                     ??_abs:
  1339  00001A                     ??_TMR0_Initialize:
  1340  00001A                     ?___lmul:
  1341                           	opt stack 0
  1342  00001A                     SWSPI_DAC_send_bits@data:
  1343                           	opt stack 0
  1344  00001A                     DATAEE_WriteByte@GIEBitValue:
  1345                           	opt stack 0
  1346  00001A                     isdigit@c:
  1347                           	opt stack 0
  1348  00001A                     isspace@c:
  1349                           	opt stack 0
  1350  00001A                     isupper@c:
  1351                           	opt stack 0
  1352  00001A                     crc8@dataSize:
  1353                           	opt stack 0
  1354  00001A                     ___wmul@multiplicand:
  1355                           	opt stack 0
  1356  00001A                     memset@c:
  1357                           	opt stack 0
  1358  00001A                     Make32bitsArray@data:
  1359                           	opt stack 0
  1360  00001A                     ___lmul@multiplier:
  1361                           	opt stack 0
  1362                           
  1363                           ; 4 bytes @ 0x19
  1364  00001A                     	ds	1
  1365  00001B                     ??_isalpha:
  1366  00001B                     BlinkErrorLeds@state:
  1367                           	opt stack 0
  1368  00001B                     BlinkOkLeds@state:
  1369                           	opt stack 0
  1370  00001B                     EepromWrite@data:
  1371                           	opt stack 0
  1372  00001B                     SWSPI_DAC_send_bits@count:
  1373                           	opt stack 0
  1374  00001B                     ___ftpack@exp:
  1375                           	opt stack 0
  1376  00001B                     WriteUartMessage@dataSize:
  1377                           	opt stack 0
  1378  00001B                     frexp@eptr:
  1379                           	opt stack 0
  1380  00001B                     ___ftge@ff2:
  1381                           	opt stack 0
  1382                           
  1383                           ; 3 bytes @ 0x1A
  1384  00001B                     	ds	1
  1385  00001C                     ??_crc8:
  1386  00001C                     EepromWrite@address:
  1387                           	opt stack 0
  1388  00001C                     SWSPI_DAC_send_bits@phrType:
  1389                           	opt stack 0
  1390  00001C                     FLASH_EraseBlock@GIEBitValue:
  1391                           	opt stack 0
  1392  00001C                     ADC_GetConversion@channel:
  1393                           	opt stack 0
  1394  00001C                     make8@dataLocation:
  1395                           	opt stack 0
  1396  00001C                     ___ftpack@sign:
  1397                           	opt stack 0
  1398  00001C                     _isalpha$3022:
  1399                           	opt stack 0
  1400  00001C                     BlinkErrorLeds@idx:
  1401                           	opt stack 0
  1402  00001C                     BlinkOkLeds@idx:
  1403                           	opt stack 0
  1404  00001C                     ___wmul@product:
  1405                           	opt stack 0
  1406  00001C                     memset@n:
  1407                           	opt stack 0
  1408  00001C                     ___lldiv@divisor:
  1409                           	opt stack 0
  1410  00001C                     ___llmod@divisor:
  1411                           	opt stack 0
  1412                           
  1413                           ; 4 bytes @ 0x1B
  1414  00001C                     	ds	1
  1415  00001D                     ??_make8:
  1416  00001D                     ??___ftpack:
  1417  00001D                     ??_frexp:
  1418  00001D                     ??_WriteUartMessage:
  1419  00001D                     isalpha@c:
  1420                           	opt stack 0
  1421  00001D                     crc8@crc:
  1422                           	opt stack 0
  1423  00001D                     FLASH_WriteBlock@writeAddr:
  1424                           	opt stack 0
  1425                           
  1426                           ; 4 bytes @ 0x1C
  1427  00001D                     	ds	1
  1428  00001E                     ??_Make32bitsArray:
  1429  00001E                     ??___ftge:
  1430  00001E                     WriteUartMessage@idx:
  1431                           	opt stack 0
  1432  00001E                     memset@p:
  1433                           	opt stack 0
  1434  00001E                     ___lmul@multiplicand:
  1435                           	opt stack 0
  1436                           
  1437                           ; 4 bytes @ 0x1D
  1438  00001E                     	ds	1
  1439  00001F                     crc8@i:
  1440                           	opt stack 0
  1441                           
  1442                           ; 2 bytes @ 0x1E
  1443  00001F                     	ds	1
  1444  000020                     ?___awtoft:
  1445                           	opt stack 0
  1446  000020                     ?___lltoft:
  1447                           	opt stack 0
  1448  000020                     ?___lwtoft:
  1449                           	opt stack 0
  1450  000020                     ___llmod@counter:
  1451                           	opt stack 0
  1452  000020                     ZeroArray@array:
  1453                           	opt stack 0
  1454  000020                     ZeroBitsArray@array:
  1455                           	opt stack 0
  1456  000020                     Make32bitsArray@idx:
  1457                           	opt stack 0
  1458  000020                     ___awtoft@c:
  1459                           	opt stack 0
  1460  000020                     ___lwtoft@c:
  1461                           	opt stack 0
  1462  000020                     ___lldiv@quotient:
  1463                           	opt stack 0
  1464  000020                     ___lltoft@c:
  1465                           	opt stack 0
  1466                           
  1467                           ; 4 bytes @ 0x1F
  1468  000020                     	ds	1
  1469  000021                     FLASH_WriteBlock@flashWrBufPtr:
  1470                           	opt stack 0
  1471  000021                     StoreIntInEeprom@data:
  1472                           	opt stack 0
  1473                           
  1474                           ; 4 bytes @ 0x20
  1475  000021                     	ds	1
  1476  000022                     ZeroArray@size:
  1477                           	opt stack 0
  1478  000022                     SWSPI_Synth_send_bits@data:
  1479                           	opt stack 0
  1480  000022                     ___lmul@product:
  1481                           	opt stack 0
  1482                           
  1483                           ; 4 bytes @ 0x21
  1484  000022                     	ds	1
  1485  000023                     ??_FLASH_WriteBlock:
  1486  000023                     ___awtoft@sign:
  1487                           	opt stack 0
  1488                           
  1489                           ; 1 bytes @ 0x22
  1490  000023                     	ds	1
  1491  000024                     ??_FlashReadCondition:
  1492  000024                     ??___lltoft:
  1493  000024                     SendAckMessage@inRequest:
  1494                           	opt stack 0
  1495  000024                     ___lldiv@counter:
  1496                           	opt stack 0
  1497  000024                     SynthReadData@data:
  1498                           	opt stack 0
  1499                           
  1500                           ; 2 bytes @ 0x23
  1501  000024                     	ds	1
  1502  000025                     ??_GetMcuRunTime:
  1503  000025                     SendAckMessage@inGroup:
  1504                           	opt stack 0
  1505  000025                     StoreIntInEeprom@address:
  1506                           	opt stack 0
  1507                           
  1508                           ; 1 bytes @ 0x24
  1509  000025                     	ds	1
  1510  000026                     ?_strtol:
  1511                           	opt stack 0
  1512  000026                     StoreIntInEeprom@numOfByes:
  1513                           	opt stack 0
  1514  000026                     strtol@s:
  1515                           	opt stack 0
  1516  000026                     SWSPI_send_word@data:
  1517                           	opt stack 0
  1518  000026                     SendAckMessage@TxMsg:
  1519                           	opt stack 0
  1520                           
  1521                           ; 6 bytes @ 0x25
  1522  000026                     	ds	1
  1523  000027                     FLASH_WriteBlock@blockStartAddr:
  1524                           	opt stack 0
  1525                           
  1526                           ; 4 bytes @ 0x26
  1527  000027                     	ds	1
  1528  000028                     StoreIntInEeprom@val:
  1529                           	opt stack 0
  1530  000028                     ___lltoft@exp:
  1531                           	opt stack 0
  1532  000028                     strtol@endptr:
  1533                           	opt stack 0
  1534                           
  1535                           ; 2 bytes @ 0x27
  1536  000028                     	ds	1
  1537  000029                     ?___ftdiv:
  1538                           	opt stack 0
  1539  000029                     StoreIntInEeprom@idx:
  1540                           	opt stack 0
  1541  000029                     ___ftdiv@f1:
  1542                           	opt stack 0
  1543                           
  1544                           ; 3 bytes @ 0x28
  1545  000029                     	ds	1
  1546  00002A                     SWSPI_send_word@dataSize:
  1547                           	opt stack 0
  1548  00002A                     strtol@base:
  1549                           	opt stack 0
  1550                           
  1551                           ; 2 bytes @ 0x29
  1552  00002A                     	ds	1
  1553  00002B                     SWSPI_send_word@datac:
  1554                           	opt stack 0
  1555  00002B                     FLASH_WriteBlock@GIEBitValue:
  1556                           	opt stack 0
  1557                           
  1558                           ; 1 bytes @ 0x2A
  1559  00002B                     	ds	1
  1560  00002C                     ??_strtol:
  1561  00002C                     ??_testLeds:
  1562  00002C                     FLASH_WriteBlock@i:
  1563                           	opt stack 0
  1564  00002C                     SetAdcOperationMode@data:
  1565                           	opt stack 0
  1566  00002C                     SetConversionResultFormat@data:
  1567                           	opt stack 0
  1568  00002C                     SetChannelMode@data:
  1569                           	opt stack 0
  1570  00002C                     FlashReadUart@numOfSampleToRead:
  1571                           	opt stack 0
  1572  00002C                     DacSetValue@data:
  1573                           	opt stack 0
  1574  00002C                     UpdateRxFreq@data:
  1575                           	opt stack 0
  1576  00002C                     SWSPI_send_word@idx:
  1577                           	opt stack 0
  1578  00002C                     ___ftdiv@f2:
  1579                           	opt stack 0
  1580                           
  1581                           ; 3 bytes @ 0x2B
  1582  00002C                     	ds	1
  1583  00002D                     testLeds@idx:
  1584                           	opt stack 0
  1585  00002D                     FlashSampleWrite@sampleData:
  1586                           	opt stack 0
  1587                           
  1588                           ; 2 bytes @ 0x2C
  1589  00002D                     	ds	1
  1590  00002E                     SWSPI_send_word@phrType:
  1591                           	opt stack 0
  1592                           
  1593                           ; 1 bytes @ 0x2D
  1594  00002E                     	ds	1
  1595  00002F                     FlashSampleWrite@channelNum:
  1596                           	opt stack 0
  1597  00002F                     InitTxSynth@idx:
  1598                           	opt stack 0
  1599  00002F                     InitRxSynth@idx:
  1600                           	opt stack 0
  1601                           
  1602                           ; 1 bytes @ 0x2E
  1603  00002F                     	ds	1
  1604  000030                     tblptru	equ	0xFF8
  1605                           tblptrh	equ	0xFF7
  1606                           tblptrl	equ	0xFF6
  1607                           tablat	equ	0xFF5
  1608                           postinc0	equ	0xFEE
  1609                           wreg	equ	0xFE8
  1610                           postdec1	equ	0xFE5
  1611                           fsr1l	equ	0xFE1
  1612                           
  1613                           ; 1 bytes @ 0x2F
  1614 ;;
  1615 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1616 ;;
  1617 ;; *************** function _main *****************
  1618 ;; Defined at:
  1619 ;;		line 13 in file "main.c"
  1620 ;; Parameters:    Size  Location     Type
  1621 ;;		None
  1622 ;; Auto vars:     Size  Location     Type
  1623 ;;		None
  1624 ;; Return value:  Size  Location     Type
  1625 ;;                  1    wreg      void 
  1626 ;; Registers used:
  1627 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  1628 ;; Tracked objects:
  1629 ;;		On entry : 0/0
  1630 ;;		On exit  : 0/0
  1631 ;;		Unchanged: 0/0
  1632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1633 ;;      Params:         0       0       0       0       0       0       0
  1634 ;;      Locals:         0       0       0       0       0       0       0
  1635 ;;      Temps:          0       0       0       0       0       0       0
  1636 ;;      Totals:         0       0       0       0       0       0       0
  1637 ;;Total ram usage:        0 bytes
  1638 ;; Hardware stack levels required when called:   11
  1639 ;; This function calls:
  1640 ;;		_AdcConvert
  1641 ;;		_BlinkErrorLeds
  1642 ;;		_BlinkOkLeds
  1643 ;;		_CheckFlashPrecentage
  1644 ;;		_InitSystemApplicationManagers
  1645 ;;		_SendSystemStartAck
  1646 ;;		_SetMcuRunTime
  1647 ;;		_SetMcuSystem
  1648 ;;		_keepAliveSignalLed
  1649 ;;		_keepAliveSignalUart
  1650 ;;		_readUartMessage
  1651 ;; This function is called by:
  1652 ;;		Startup code after reset
  1653 ;; This function uses a non-reentrant model
  1654 ;;
  1655                           
  1656                           	psect	text0
  1657  002B3E                     __ptext0:
  1658                           	opt stack 0
  1659  002B3E                     _main:
  1660                           	opt stack 20
  1661                           
  1662                           ;main.c: 16: SetMcuSystem();
  1663                           
  1664                           ;incstack = 0
  1665  002B3E  EC9B  F01C         	call	_SetMcuSystem	;wreg free
  1666                           
  1667                           ;main.c: 19: InitSystemApplicationManagers();
  1668  002B42  EC18  F01C         	call	_InitSystemApplicationManagers	;wreg free
  1669                           
  1670                           ;main.c: 22: SendSystemStartAck();
  1671  002B46  EC95  F01C         	call	_SendSystemStartAck	;wreg free
  1672                           
  1673                           ;main.c: 25: BlinkOkLeds(OK_START_SYSTEM);
  1674  002B4A  0E03               	movlw	3
  1675  002B4C  ECD0  F015         	call	_BlinkOkLeds
  1676  002B50                     
  1677                           ;main.c: 28: {
  1678                           ;main.c: 29: readUartMessage();
  1679  002B50  EC33  F005         	call	_readUartMessage	;wreg free
  1680                           
  1681                           ;main.c: 31: if (TimerOneSecFlag == 1)
  1682  002B54  0100               	movlb	0	; () banked
  1683  002B56  05D8               	decf	_TimerOneSecFlag& (0+255),w,b	;volatile
  1684  002B58  A4D8               	btfss	status,2,c
  1685  002B5A  D006               	goto	l1453
  1686                           
  1687                           ; BSR set to: 0
  1688                           ;main.c: 32: {
  1689                           ;main.c: 34: SetMcuRunTime();
  1690  002B5C  ECB4  F018         	call	_SetMcuRunTime	;wreg free
  1691                           
  1692                           ;main.c: 35: TimerOneSecFlag = 0;
  1693  002B60  0E00               	movlw	0
  1694  002B62  0100               	movlb	0	; () banked
  1695  002B64  6FD8               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
  1696                           
  1697                           ;main.c: 36: }
  1698  002B66  D7F4               	goto	l1452
  1699  002B68                     l1453:
  1700                           
  1701                           ; BSR set to: 0
  1702                           ;main.c: 37: else if (TimerSamplingFlag == 1)
  1703                           
  1704                           ; BSR set to: 0
  1705  002B68  05D7               	decf	_TimerSamplingFlag& (0+255),w,b	;volatile
  1706  002B6A  A4D8               	btfss	status,2,c
  1707  002B6C  D010               	goto	l1455
  1708                           
  1709                           ; BSR set to: 0
  1710                           ;main.c: 38: {
  1711                           ;main.c: 39: keepAliveSignalLed();
  1712  002B6E  EC01  F01C         	call	_keepAliveSignalLed	;wreg free
  1713                           
  1714                           ;main.c: 41: if(1 == CheckFlashPrecentage())
  1715  002B72  EC4E  F011         	call	_CheckFlashPrecentage	;wreg free
  1716  002B76  06E8               	decf	wreg,f,c
  1717  002B78  A4D8               	btfss	status,2,c
  1718  002B7A  D003               	goto	l1456
  1719                           
  1720                           ;main.c: 42: {
  1721                           ;main.c: 43: BlinkErrorLeds(FAIL_FLASH_MORE_THEN_HELF);
  1722  002B7C  0E04               	movlw	4
  1723  002B7E  ECFF  F015         	call	_BlinkErrorLeds
  1724  002B82                     l1456:
  1725                           
  1726                           ;main.c: 44: }
  1727                           ;main.c: 47: AdcConvert();
  1728  002B82  EC15  F008         	call	_AdcConvert	;wreg free
  1729                           
  1730                           ;main.c: 49: TimerSamplingFlag = 0;
  1731  002B86  0E00               	movlw	0
  1732  002B88  0100               	movlb	0	; () banked
  1733  002B8A  6FD7               	movwf	_TimerSamplingFlag& (0+255),b	;volatile
  1734                           
  1735                           ;main.c: 50: }
  1736  002B8C  D7E1               	goto	l1452
  1737  002B8E                     l1455:
  1738                           
  1739                           ; BSR set to: 0
  1740                           ;main.c: 51: else if (TimerKeepAliveFlag == 1)
  1741                           
  1742                           ; BSR set to: 0
  1743  002B8E  05D6               	decf	_TimerKeepAliveFlag& (0+255),w,b	;volatile
  1744  002B90  A4D8               	btfss	status,2,c
  1745  002B92  D7DE               	goto	l1452
  1746                           
  1747                           ; BSR set to: 0
  1748                           ;main.c: 52: {
  1749                           ;main.c: 53: keepAliveSignalUart();
  1750  002B94  EC8F  F01C         	call	_keepAliveSignalUart	;wreg free
  1751                           
  1752                           ;main.c: 54: TimerKeepAliveFlag = 0;
  1753  002B98  0E00               	movlw	0
  1754  002B9A  0100               	movlb	0	; () banked
  1755  002B9C  6FD6               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
  1756                           
  1757                           ; BSR set to: 0
  1758                           
  1759                           ; BSR set to: 0
  1760                           
  1761                           ; BSR set to: 0
  1762                           
  1763                           ; BSR set to: 0
  1764  002B9E  D7D8               	goto	l1452
  1765  002BA0                     __end_of_main:
  1766                           	opt stack 0
  1767                           tblptru	equ	0xFF8
  1768                           tblptrh	equ	0xFF7
  1769                           tblptrl	equ	0xFF6
  1770                           tablat	equ	0xFF5
  1771                           postinc0	equ	0xFEE
  1772                           wreg	equ	0xFE8
  1773                           postdec1	equ	0xFE5
  1774                           fsr1l	equ	0xFE1
  1775                           status	equ	0xFD8
  1776                           
  1777 ;; *************** function _readUartMessage *****************
  1778 ;; Defined at:
  1779 ;;		line 28 in file "EusartApp.c"
  1780 ;; Parameters:    Size  Location     Type
  1781 ;;		None
  1782 ;; Auto vars:     Size  Location     Type
  1783 ;;  idx             2    7[BANK1 ] int 
  1784 ;;  chRec           1    9[BANK1 ] unsigned char 
  1785 ;; Return value:  Size  Location     Type
  1786 ;;                  1    wreg      void 
  1787 ;; Registers used:
  1788 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  1789 ;; Tracked objects:
  1790 ;;		On entry : 0/0
  1791 ;;		On exit  : 0/0
  1792 ;;		Unchanged: 0/0
  1793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1794 ;;      Params:         0       0       0       0       0       0       0
  1795 ;;      Locals:         0       0       3       0       0       0       0
  1796 ;;      Temps:          0       0       4       0       0       0       0
  1797 ;;      Totals:         0       0       7       0       0       0       0
  1798 ;;Total ram usage:        7 bytes
  1799 ;; Hardware stack levels used:    1
  1800 ;; Hardware stack levels required when called:   10
  1801 ;; This function calls:
  1802 ;;		_EUSART1_Read
  1803 ;;		_GroupAdc
  1804 ;;		_GroupControlMcu
  1805 ;;		_GroupDAC
  1806 ;;		_GroupFlashMemory
  1807 ;;		_GroupStatusAndVersion
  1808 ;;		_GroupSynthesizers
  1809 ;;		_InitRxMessageParams
  1810 ;;		_ZeroArray
  1811 ;;		_crc8
  1812 ;; This function is called by:
  1813 ;;		_main
  1814 ;; This function uses a non-reentrant model
  1815 ;;
  1816                           
  1817                           	psect	text1
  1818  000A66                     __ptext1:
  1819                           	opt stack 0
  1820  000A66                     _readUartMessage:
  1821                           	opt stack 20
  1822                           
  1823                           ;EusartApp.c: 31: uint8_t chRec = (0);
  1824                           
  1825                           ; BSR set to: 0
  1826                           ;incstack = 0
  1827  000A66  0E00               	movlw	0
  1828  000A68  0101               	movlb	1	; () banked
  1829  000A6A  6FCB               	movwf	readUartMessage@chRec& (0+255),b
  1830                           
  1831                           ;EusartApp.c: 32: switch(cState)
  1832  000A6C  D0DF               	goto	l190
  1833  000A6E                     
  1834                           ;EusartApp.c: 37: if(eusart1RxCount > (4))
  1835                           
  1836                           ; BSR set to: 1
  1837  000A6E  0E04               	movlw	4
  1838  000A70  0100               	movlb	0	; () banked
  1839  000A72  65D3               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1840  000A74  0012               	return	
  1841                           
  1842                           ; BSR set to: 0
  1843                           ;EusartApp.c: 38: {
  1844                           ;EusartApp.c: 39: cState = FIND_MAGIC;
  1845  000A76  0E01               	movlw	1
  1846  000A78  6FD2               	movwf	_cState& (0+255),b
  1847                           
  1848                           ; BSR set to: 0
  1849                           ;EusartApp.c: 40: }
  1850                           ;EusartApp.c: 41: return;
  1851                           
  1852                           ; BSR set to: 0
  1853  000A7A  0012               	return	
  1854  000A7C                     
  1855                           ; BSR set to: 0
  1856                           ;EusartApp.c: 45: InitRxMessageParams();
  1857                           
  1858                           ; BSR set to: 0
  1859  000A7C  ECF0  F01A         	call	_InitRxMessageParams	;wreg free
  1860                           
  1861                           ;EusartApp.c: 46: msgCount = 0;
  1862  000A80  0E00               	movlw	0
  1863  000A82  0100               	movlb	0	; () banked
  1864  000A84  6FCB               	movwf	_msgCount& (0+255),b
  1865                           
  1866                           ; BSR set to: 0
  1867                           ;EusartApp.c: 47: if(eusart1RxCount > 1)
  1868  000A86  0E01               	movlw	1
  1869  000A88  65D3               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1870  000A8A  D00E               	goto	l195
  1871                           
  1872                           ; BSR set to: 0
  1873                           ;EusartApp.c: 48: {
  1874                           ;EusartApp.c: 49: chRec = EUSART1_Read();
  1875  000A8C  EC92  F018         	call	_EUSART1_Read	;wreg free
  1876  000A90  0101               	movlb	1	; () banked
  1877  000A92  6FCB               	movwf	readUartMessage@chRec& (0+255),b
  1878                           
  1879                           ; BSR set to: 1
  1880                           ;EusartApp.c: 50: rxMsgQueue[(0)] = chRec;
  1881  000A94  C1CB  F0D9         	movff	readUartMessage@chRec,_rxMsgQueue
  1882                           
  1883                           ; BSR set to: 1
  1884                           ;EusartApp.c: 51: if(chRec == (0x24))
  1885  000A98  0E24               	movlw	36
  1886  000A9A  19CB               	xorwf	readUartMessage@chRec& (0+255),w,b
  1887  000A9C  A4D8               	btfss	status,2,c
  1888  000A9E  0012               	return	
  1889                           
  1890                           ; BSR set to: 1
  1891                           ;EusartApp.c: 52: {
  1892                           ;EusartApp.c: 53: cState = READ_GROUP;
  1893  000AA0  0E02               	movlw	2
  1894  000AA2  0100               	movlb	0	; () banked
  1895  000AA4  6FD2               	movwf	_cState& (0+255),b
  1896                           
  1897                           ; BSR set to: 0
  1898                           ;EusartApp.c: 54: }
  1899                           ;EusartApp.c: 55: }
  1900  000AA6  0012               	return	
  1901  000AA8                     l195:
  1902                           
  1903                           ; BSR set to: 0
  1904                           ;EusartApp.c: 56: else
  1905                           ;EusartApp.c: 57: {
  1906                           ;EusartApp.c: 58: cState = START_RX_MESSAGE_READ;
  1907                           
  1908                           ; BSR set to: 0
  1909  000AA8  0E00               	movlw	0
  1910  000AAA  6FD2               	movwf	_cState& (0+255),b
  1911                           
  1912                           ; BSR set to: 0
  1913                           ;EusartApp.c: 59: }
  1914                           ;EusartApp.c: 61: break;
  1915  000AAC  0012               	return	
  1916  000AAE                     
  1917                           ; BSR set to: 0
  1918                           ;EusartApp.c: 65: if(eusart1RxCount > 1)
  1919                           
  1920                           ; BSR set to: 0
  1921  000AAE  0E01               	movlw	1
  1922  000AB0  65D3               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1923  000AB2  0012               	return	
  1924                           
  1925                           ; BSR set to: 0
  1926                           ;EusartApp.c: 66: {
  1927                           ;EusartApp.c: 67: group = EUSART1_Read();
  1928  000AB4  EC92  F018         	call	_EUSART1_Read	;wreg free
  1929  000AB8  0100               	movlb	0	; () banked
  1930  000ABA  6FD1               	movwf	_group& (0+255),b
  1931                           
  1932                           ; BSR set to: 0
  1933                           ;EusartApp.c: 68: rxMsgQueue[(1)] = group;
  1934  000ABC  C0D1  F0DA         	movff	_group,_rxMsgQueue+1
  1935                           
  1936                           ; BSR set to: 0
  1937                           ;EusartApp.c: 69: cState = READ_REQUEST;
  1938  000AC0  0E03               	movlw	3
  1939  000AC2  6FD2               	movwf	_cState& (0+255),b
  1940                           
  1941                           ; BSR set to: 0
  1942                           ;EusartApp.c: 70: }
  1943                           ;EusartApp.c: 71: break;
  1944  000AC4  0012               	return	
  1945  000AC6                     
  1946                           ; BSR set to: 0
  1947                           ;EusartApp.c: 75: if(eusart1RxCount > 1)
  1948                           
  1949                           ; BSR set to: 0
  1950  000AC6  0E01               	movlw	1
  1951  000AC8  65D3               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1952  000ACA  0012               	return	
  1953                           
  1954                           ; BSR set to: 0
  1955                           ;EusartApp.c: 76: {
  1956                           ;EusartApp.c: 77: request = EUSART1_Read();
  1957  000ACC  EC92  F018         	call	_EUSART1_Read	;wreg free
  1958  000AD0  0100               	movlb	0	; () banked
  1959  000AD2  6FD0               	movwf	_request& (0+255),b
  1960                           
  1961                           ; BSR set to: 0
  1962                           ;EusartApp.c: 78: rxMsgQueue[(2)] = request;
  1963  000AD4  C0D0  F0DB         	movff	_request,_rxMsgQueue+2
  1964                           
  1965                           ; BSR set to: 0
  1966                           ;EusartApp.c: 79: cState = READ_DATA_SIZE;
  1967  000AD8  0E04               	movlw	4
  1968  000ADA  6FD2               	movwf	_cState& (0+255),b
  1969                           
  1970                           ; BSR set to: 0
  1971                           ;EusartApp.c: 80: }
  1972                           ;EusartApp.c: 81: break;
  1973  000ADC  0012               	return	
  1974  000ADE                     
  1975                           ; BSR set to: 0
  1976                           ;EusartApp.c: 84: if(eusart1RxCount > 1)
  1977                           
  1978                           ; BSR set to: 0
  1979  000ADE  0E01               	movlw	1
  1980  000AE0  65D3               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1981  000AE2  0012               	return	
  1982                           
  1983                           ; BSR set to: 0
  1984                           ;EusartApp.c: 85: {
  1985                           ;EusartApp.c: 86: dataSize = EUSART1_Read();
  1986  000AE4  EC92  F018         	call	_EUSART1_Read	;wreg free
  1987  000AE8  0100               	movlb	0	; () banked
  1988  000AEA  6FCF               	movwf	_dataSize& (0+255),b
  1989                           
  1990                           ; BSR set to: 0
  1991                           ;EusartApp.c: 87: rxMsgQueue[(3)] = dataSize;
  1992  000AEC  C0CF  F0DC         	movff	_dataSize,_rxMsgQueue+3
  1993                           
  1994                           ; BSR set to: 0
  1995                           ;EusartApp.c: 88: if(dataSize == 0)
  1996  000AF0  51CF               	movf	_dataSize& (0+255),w,b
  1997  000AF2  A4D8               	btfss	status,2,c
  1998  000AF4  D003               	goto	l205
  1999                           
  2000                           ; BSR set to: 0
  2001                           ;EusartApp.c: 89: {
  2002                           ;EusartApp.c: 90: cState = CHECK_CRC;
  2003  000AF6  0E06               	movlw	6
  2004  000AF8  6FD2               	movwf	_cState& (0+255),b
  2005                           
  2006                           ;EusartApp.c: 91: }
  2007  000AFA  0012               	return	
  2008  000AFC                     l205:
  2009                           
  2010                           ; BSR set to: 0
  2011                           ;EusartApp.c: 92: else
  2012                           ;EusartApp.c: 93: {
  2013                           ;EusartApp.c: 94: cState = READ_DATA;
  2014                           
  2015                           ; BSR set to: 0
  2016  000AFC  0E05               	movlw	5
  2017  000AFE  6FD2               	movwf	_cState& (0+255),b
  2018                           
  2019                           ; BSR set to: 0
  2020                           ;EusartApp.c: 95: }
  2021                           ;EusartApp.c: 97: }
  2022                           ;EusartApp.c: 99: break;
  2023                           
  2024                           ; BSR set to: 0
  2025  000B00  0012               	return	
  2026  000B02                     
  2027                           ; BSR set to: 0
  2028                           ;EusartApp.c: 103: if(eusart1RxCount >= dataSize)
  2029                           
  2030                           ; BSR set to: 0
  2031  000B02  51CF               	movf	_dataSize& (0+255),w,b
  2032  000B04  5DD3               	subwf	_eusart1RxCount& (0+255),w,b	;volatile
  2033  000B06  A0D8               	btfss	status,0,c
  2034  000B08  0012               	return	
  2035                           
  2036                           ; BSR set to: 0
  2037                           ;EusartApp.c: 104: {
  2038                           ;EusartApp.c: 105: ZeroArray(rxMsgData, (0x14));
  2039  000B0A  0EAE               	movlw	low _rxMsgData
  2040  000B0C  6E20               	movwf	ZeroArray@array,c
  2041  000B0E  0E01               	movlw	high _rxMsgData
  2042  000B10  6E21               	movwf	ZeroArray@array+1,c
  2043  000B12  0E00               	movlw	0
  2044  000B14  6E23               	movwf	ZeroArray@size+1,c
  2045  000B16  0E14               	movlw	20
  2046  000B18  6E22               	movwf	ZeroArray@size,c
  2047  000B1A  ECC8  F01B         	call	_ZeroArray	;wreg free
  2048                           
  2049                           ;EusartApp.c: 107: for(int idx = 0; idx < dataSize; idx++)
  2050  000B1E  0E00               	movlw	0
  2051  000B20  0101               	movlb	1	; () banked
  2052  000B22  6FCA               	movwf	(readUartMessage@idx+1)& (0+255),b
  2053  000B24  0E00               	movlw	0
  2054  000B26  6FC9               	movwf	readUartMessage@idx& (0+255),b
  2055  000B28  D022               	goto	l209
  2056  000B2A                     
  2057                           ; BSR set to: 1
  2058                           ;EusartApp.c: 108: {
  2059                           ;EusartApp.c: 109: chRec = EUSART1_Read();
  2060                           
  2061                           ; BSR set to: 1
  2062  000B2A  EC92  F018         	call	_EUSART1_Read	;wreg free
  2063  000B2E  0101               	movlb	1	; () banked
  2064  000B30  6FCB               	movwf	readUartMessage@chRec& (0+255),b
  2065                           
  2066                           ; BSR set to: 1
  2067                           ;EusartApp.c: 110: rxMsgQueue[(0x4) + msgCount++] = chRec;
  2068  000B32  0100               	movlb	0	; () banked
  2069  000B34  51CB               	movf	_msgCount& (0+255),w,b
  2070  000B36  0101               	movlb	1	; () banked
  2071  000B38  6FC5               	movwf	??_readUartMessage& (0+255),b
  2072  000B3A  6BC6               	clrf	(??_readUartMessage+1)& (0+255),b
  2073  000B3C  0E04               	movlw	4
  2074  000B3E  27C5               	addwf	??_readUartMessage& (0+255),f,b
  2075  000B40  0E00               	movlw	0
  2076  000B42  23C6               	addwfc	(??_readUartMessage+1)& (0+255),f,b
  2077  000B44  0ED9               	movlw	low _rxMsgQueue
  2078  000B46  25C5               	addwf	??_readUartMessage& (0+255),w,b
  2079  000B48  6ED9               	movwf	fsr2l,c
  2080  000B4A  0E00               	movlw	high _rxMsgQueue
  2081  000B4C  21C6               	addwfc	(??_readUartMessage+1)& (0+255),w,b
  2082  000B4E  6EDA               	movwf	fsr2h,c
  2083  000B50  C1CB  FFDF         	movff	readUartMessage@chRec,indf2
  2084                           
  2085                           ; BSR set to: 1
  2086  000B54  0100               	movlb	0	; () banked
  2087  000B56  2BCB               	incf	_msgCount& (0+255),f,b
  2088                           
  2089                           ; BSR set to: 0
  2090                           ;EusartApp.c: 111: rxMsgData[idx] = chRec;
  2091  000B58  0EAE               	movlw	low _rxMsgData
  2092  000B5A  0101               	movlb	1	; () banked
  2093  000B5C  25C9               	addwf	readUartMessage@idx& (0+255),w,b
  2094  000B5E  6ED9               	movwf	fsr2l,c
  2095  000B60  0E01               	movlw	high _rxMsgData
  2096  000B62  21CA               	addwfc	(readUartMessage@idx+1)& (0+255),w,b
  2097  000B64  6EDA               	movwf	fsr2h,c
  2098  000B66  C1CB  FFDF         	movff	readUartMessage@chRec,indf2
  2099                           
  2100                           ; BSR set to: 1
  2101  000B6A  4BC9               	infsnz	readUartMessage@idx& (0+255),f,b
  2102  000B6C  2BCA               	incf	(readUartMessage@idx+1)& (0+255),f,b
  2103  000B6E                     l209:
  2104                           
  2105                           ; BSR set to: 1
  2106                           
  2107                           ; BSR set to: 1
  2108  000B6E  0100               	movlb	0	; () banked
  2109  000B70  51CF               	movf	_dataSize& (0+255),w,b
  2110  000B72  0101               	movlb	1	; () banked
  2111  000B74  6FC5               	movwf	??_readUartMessage& (0+255),b
  2112  000B76  6BC6               	clrf	(??_readUartMessage+1)& (0+255),b
  2113  000B78  51C5               	movf	??_readUartMessage& (0+255),w,b
  2114  000B7A  5DC9               	subwf	readUartMessage@idx& (0+255),w,b
  2115  000B7C  51CA               	movf	(readUartMessage@idx+1)& (0+255),w,b
  2116  000B7E  0A80               	xorlw	128
  2117  000B80  6FC7               	movwf	(??_readUartMessage+2)& (0+255),b
  2118  000B82  51C6               	movf	(??_readUartMessage+1)& (0+255),w,b
  2119  000B84  0A80               	xorlw	128
  2120  000B86  59C7               	subwfb	(??_readUartMessage+2)& (0+255),w,b
  2121  000B88  A0D8               	btfss	status,0,c
  2122  000B8A  D7CF               	goto	l210
  2123                           
  2124                           ; BSR set to: 1
  2125                           ;EusartApp.c: 112: }
  2126                           ;EusartApp.c: 114: cState = CHECK_CRC;
  2127                           
  2128                           ; BSR set to: 1
  2129  000B8C  0E06               	movlw	6
  2130  000B8E  0100               	movlb	0	; () banked
  2131  000B90  6FD2               	movwf	_cState& (0+255),b
  2132                           
  2133                           ; BSR set to: 0
  2134                           ;EusartApp.c: 115: }
  2135                           ;EusartApp.c: 116: break;
  2136  000B92  0012               	return	
  2137  000B94                     
  2138                           ; BSR set to: 0
  2139                           ;EusartApp.c: 119: if(eusart1RxCount >= 1)
  2140                           
  2141                           ; BSR set to: 0
  2142  000B94  51D3               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  2143  000B96  B4D8               	btfsc	status,2,c
  2144  000B98  0012               	return	
  2145                           
  2146                           ; BSR set to: 0
  2147                           ;EusartApp.c: 120: {
  2148                           ;EusartApp.c: 121: crcGiven = EUSART1_Read();
  2149  000B9A  EC92  F018         	call	_EUSART1_Read	;wreg free
  2150  000B9E  0100               	movlb	0	; () banked
  2151  000BA0  6FCC               	movwf	_crcGiven& (0+255),b
  2152                           
  2153                           ; BSR set to: 0
  2154                           ;EusartApp.c: 122: crcCalc = crc8(rxMsgQueue, (0x4) + msgCount);
  2155  000BA2  0ED9               	movlw	low _rxMsgQueue
  2156  000BA4  6E18               	movwf	crc8@dataArray,c
  2157  000BA6  0E00               	movlw	high _rxMsgQueue
  2158  000BA8  6E19               	movwf	crc8@dataArray+1,c
  2159  000BAA  0E04               	movlw	4
  2160  000BAC  25CB               	addwf	_msgCount& (0+255),w,b
  2161  000BAE  6E1A               	movwf	crc8@dataSize,c
  2162  000BB0  6A1B               	clrf	crc8@dataSize+1,c
  2163  000BB2  0E00               	movlw	0
  2164  000BB4  221B               	addwfc	crc8@dataSize+1,f,c
  2165  000BB6  ECB5  F017         	call	_crc8	;wreg free
  2166  000BBA  0100               	movlb	0	; () banked
  2167  000BBC  6FCD               	movwf	_crcCalc& (0+255),b
  2168                           
  2169                           ; BSR set to: 0
  2170                           ;EusartApp.c: 124: if(crcGiven == crcCalc)
  2171  000BBE  51CD               	movf	_crcCalc& (0+255),w,b
  2172  000BC0  19CC               	xorwf	_crcGiven& (0+255),w,b
  2173  000BC2  A4D8               	btfss	status,2,c
  2174  000BC4  D003               	goto	l214
  2175                           
  2176                           ; BSR set to: 0
  2177                           ;EusartApp.c: 125: {
  2178                           ;EusartApp.c: 126: cState = JUMP_FUNCTION;
  2179  000BC6  0E07               	movlw	7
  2180  000BC8  6FD2               	movwf	_cState& (0+255),b
  2181                           
  2182                           ;EusartApp.c: 127: }
  2183  000BCA  0012               	return	
  2184  000BCC                     l214:
  2185                           
  2186                           ; BSR set to: 0
  2187                           ;EusartApp.c: 128: else
  2188                           ;EusartApp.c: 129: {
  2189                           ;EusartApp.c: 130: cState = START_RX_MESSAGE_READ;
  2190                           
  2191                           ; BSR set to: 0
  2192  000BCC  0E00               	movlw	0
  2193  000BCE  6FD2               	movwf	_cState& (0+255),b
  2194                           
  2195                           ; BSR set to: 0
  2196                           ;EusartApp.c: 131: }
  2197                           ;EusartApp.c: 132: }
  2198                           ;EusartApp.c: 133: break;
  2199                           
  2200                           ; BSR set to: 0
  2201  000BD0  0012               	return	
  2202  000BD2                     
  2203                           ; BSR set to: 0
  2204                           ;EusartApp.c: 136: groupsArray[group - 1](request, rxMsgData);
  2205                           
  2206                           ; BSR set to: 0
  2207  000BD2  0EFE               	movlw	254
  2208  000BD4  0101               	movlb	1	; () banked
  2209  000BD6  6FC5               	movwf	??_readUartMessage& (0+255),b
  2210  000BD8  0EFF               	movlw	255
  2211  000BDA  6FC6               	movwf	(??_readUartMessage+1)& (0+255),b
  2212  000BDC  0100               	movlb	0	; () banked
  2213  000BDE  51D1               	movf	_group& (0+255),w,b
  2214  000BE0  0101               	movlb	1	; () banked
  2215  000BE2  6FC7               	movwf	(??_readUartMessage+2)& (0+255),b
  2216  000BE4  6BC8               	clrf	(??_readUartMessage+3)& (0+255),b
  2217  000BE6  90D8               	bcf	status,0,c
  2218  000BE8  37C7               	rlcf	(??_readUartMessage+2)& (0+255),f,b
  2219  000BEA  37C8               	rlcf	(??_readUartMessage+3)& (0+255),f,b
  2220  000BEC  51C5               	movf	??_readUartMessage& (0+255),w,b
  2221  000BEE  27C7               	addwf	(??_readUartMessage+2)& (0+255),f,b
  2222  000BF0  51C6               	movf	(??_readUartMessage+1)& (0+255),w,b
  2223  000BF2  23C8               	addwfc	(??_readUartMessage+3)& (0+255),f,b
  2224  000BF4  0EED               	movlw	low _groupsArray
  2225  000BF6  25C7               	addwf	(??_readUartMessage+2)& (0+255),w,b
  2226  000BF8  6ED9               	movwf	fsr2l,c
  2227  000BFA  0E00               	movlw	high _groupsArray
  2228  000BFC  21C8               	addwfc	(??_readUartMessage+3)& (0+255),w,b
  2229  000BFE  6EDA               	movwf	fsr2h,c
  2230  000C00  D801               	call	u8408
  2231  000C02  D010               	goto	u8409
  2232  000C04                     u8408:
  2233  000C04  0005               	push	
  2234  000C06  6EFA               	movwf	pclath,c
  2235  000C08  50DE               	movf	postinc2,w,c
  2236  000C0A  6EFD               	movwf	tosl,c
  2237  000C0C  50DE               	movf	postinc2,w,c
  2238  000C0E  6EFE               	movwf	tosh,c
  2239  000C10  50F8               	movf	tblptru,w,c
  2240  000C12  6EFF               	movwf	tosu,c
  2241  000C14  50FA               	movf	pclath,w,c
  2242  000C16  0EAE               	movlw	low _rxMsgData
  2243  000C18  6FC2               	movwf	GroupDAC@data& (0+255),b
  2244  000C1A  0E01               	movlw	high _rxMsgData
  2245  000C1C  6FC3               	movwf	(GroupDAC@data+1)& (0+255),b
  2246  000C1E  0100               	movlb	0	; () banked
  2247  000C20  51D0               	movf	_request& (0+255),w,b
  2248  000C22  0012               	return		;indir
  2249  000C24                     u8409:
  2250                           
  2251                           ;EusartApp.c: 137: cState = START_RX_MESSAGE_READ;
  2252  000C24  0E00               	movlw	0
  2253  000C26  0100               	movlb	0	; () banked
  2254  000C28  6FD2               	movwf	_cState& (0+255),b
  2255                           
  2256                           ; BSR set to: 0
  2257                           ;EusartApp.c: 139: }
  2258                           
  2259                           ;EusartApp.c: 138: break;
  2260  000C2A  0012               	return	
  2261  000C2C                     l190:
  2262                           
  2263                           ; BSR set to: 0
  2264  000C2C  0100               	movlb	0	; () banked
  2265  000C2E  51D2               	movf	_cState& (0+255),w,b
  2266                           
  2267                           ; Switch size 1, requested type "space"
  2268                           ; Number of cases is 8, Range of values is 0 to 7
  2269                           ; switch strategies available:
  2270                           ; Name         Instructions Cycles
  2271                           ; simple_byte           25    13 (average)
  2272                           ;	Chosen strategy is simple_byte
  2273  000C30  0A00               	xorlw	0	; case 0
  2274  000C32  B4D8               	btfsc	status,2,c
  2275  000C34  D71C               	goto	l191
  2276  000C36  0A01               	xorlw	1	; case 1
  2277  000C38  B4D8               	btfsc	status,2,c
  2278  000C3A  D720               	goto	l194
  2279  000C3C  0A03               	xorlw	3	; case 2
  2280  000C3E  B4D8               	btfsc	status,2,c
  2281  000C40  D736               	goto	l199
  2282  000C42  0A01               	xorlw	1	; case 3
  2283  000C44  B4D8               	btfsc	status,2,c
  2284  000C46  D73F               	goto	l201
  2285  000C48  0A07               	xorlw	7	; case 4
  2286  000C4A  B4D8               	btfsc	status,2,c
  2287  000C4C  D748               	goto	l203
  2288  000C4E  0A01               	xorlw	1	; case 5
  2289  000C50  B4D8               	btfsc	status,2,c
  2290  000C52  D757               	goto	l207
  2291  000C54  0A03               	xorlw	3	; case 6
  2292  000C56  B4D8               	btfsc	status,2,c
  2293  000C58  D79D               	goto	l212
  2294  000C5A  0A01               	xorlw	1	; case 7
  2295  000C5C  A4D8               	btfss	status,2,c
  2296  000C5E  0012               	return	
  2297  000C60  D7B8               	goto	l216
  2298  000C62                     __end_of_readUartMessage:
  2299                           	opt stack 0
  2300                           tosu	equ	0xFFF
  2301                           tosh	equ	0xFFE
  2302                           tosl	equ	0xFFD
  2303                           pclath	equ	0xFFA
  2304                           tblptru	equ	0xFF8
  2305                           tblptrh	equ	0xFF7
  2306                           tblptrl	equ	0xFF6
  2307                           tablat	equ	0xFF5
  2308                           postinc0	equ	0xFEE
  2309                           wreg	equ	0xFE8
  2310                           postdec1	equ	0xFE5
  2311                           fsr1l	equ	0xFE1
  2312                           indf2	equ	0xFDF
  2313                           postinc2	equ	0xFDE
  2314                           fsr2h	equ	0xFDA
  2315                           fsr2l	equ	0xFD9
  2316                           status	equ	0xFD8
  2317                           
  2318 ;; *************** function _InitRxMessageParams *****************
  2319 ;; Defined at:
  2320 ;;		line 142 in file "EusartApp.c"
  2321 ;; Parameters:    Size  Location     Type
  2322 ;;		None
  2323 ;; Auto vars:     Size  Location     Type
  2324 ;;		None
  2325 ;; Return value:  Size  Location     Type
  2326 ;;                  1    wreg      void 
  2327 ;; Registers used:
  2328 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2329 ;; Tracked objects:
  2330 ;;		On entry : 0/0
  2331 ;;		On exit  : 0/0
  2332 ;;		Unchanged: 0/0
  2333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2334 ;;      Params:         0       0       0       0       0       0       0
  2335 ;;      Locals:         0       0       0       0       0       0       0
  2336 ;;      Temps:          0       0       0       0       0       0       0
  2337 ;;      Totals:         0       0       0       0       0       0       0
  2338 ;;Total ram usage:        0 bytes
  2339 ;; Hardware stack levels used:    1
  2340 ;; Hardware stack levels required when called:    5
  2341 ;; This function calls:
  2342 ;;		_ZeroArray
  2343 ;; This function is called by:
  2344 ;;		_readUartMessage
  2345 ;; This function uses a non-reentrant model
  2346 ;;
  2347                           
  2348                           	psect	text2
  2349  0035E0                     __ptext2:
  2350                           	opt stack 0
  2351  0035E0                     _InitRxMessageParams:
  2352                           	opt stack 24
  2353                           
  2354                           ;EusartApp.c: 146: dataSize = 0;
  2355                           
  2356                           ;incstack = 0
  2357  0035E0  0E00               	movlw	0
  2358  0035E2  0100               	movlb	0	; () banked
  2359  0035E4  6FCF               	movwf	_dataSize& (0+255),b
  2360                           
  2361                           ;EusartApp.c: 147: crcCalc = 0;
  2362  0035E6  0E00               	movlw	0
  2363  0035E8  6FCD               	movwf	_crcCalc& (0+255),b
  2364                           
  2365                           ;EusartApp.c: 148: crcGiven = 0;
  2366  0035EA  0E00               	movlw	0
  2367  0035EC  6FCC               	movwf	_crcGiven& (0+255),b
  2368                           
  2369                           ;EusartApp.c: 149: msgCount = 0;
  2370  0035EE  0E00               	movlw	0
  2371  0035F0  6FCB               	movwf	_msgCount& (0+255),b
  2372                           
  2373                           ; BSR set to: 0
  2374                           ;EusartApp.c: 150: ZeroArray(rxMsgQueue, (0x14));
  2375  0035F2  0ED9               	movlw	low _rxMsgQueue
  2376  0035F4  6E20               	movwf	ZeroArray@array,c
  2377  0035F6  0E00               	movlw	high _rxMsgQueue
  2378  0035F8  6E21               	movwf	ZeroArray@array+1,c
  2379  0035FA  0E00               	movlw	0
  2380  0035FC  6E23               	movwf	ZeroArray@size+1,c
  2381  0035FE  0E14               	movlw	20
  2382  003600  6E22               	movwf	ZeroArray@size,c
  2383  003602  ECC8  F01B         	call	_ZeroArray
  2384  003606  0012               	return		;funcret
  2385  003608                     __end_of_InitRxMessageParams:
  2386                           	opt stack 0
  2387                           tosu	equ	0xFFF
  2388                           tosh	equ	0xFFE
  2389                           tosl	equ	0xFFD
  2390                           pclath	equ	0xFFA
  2391                           tblptru	equ	0xFF8
  2392                           tblptrh	equ	0xFF7
  2393                           tblptrl	equ	0xFF6
  2394                           tablat	equ	0xFF5
  2395                           postinc0	equ	0xFEE
  2396                           wreg	equ	0xFE8
  2397                           postdec1	equ	0xFE5
  2398                           fsr1l	equ	0xFE1
  2399                           indf2	equ	0xFDF
  2400                           postinc2	equ	0xFDE
  2401                           fsr2h	equ	0xFDA
  2402                           fsr2l	equ	0xFD9
  2403                           status	equ	0xFD8
  2404                           
  2405 ;; *************** function _GroupDAC *****************
  2406 ;; Defined at:
  2407 ;;		line 133 in file "MessageFunctions.c"
  2408 ;; Parameters:    Size  Location     Type
  2409 ;;  request         1    wreg     enum E12
  2410 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2411 ;;		 -> rxMsgData(20), 
  2412 ;; Auto vars:     Size  Location     Type
  2413 ;;  request         1   95[BANK0 ] enum E12
  2414 ;; Return value:  Size  Location     Type
  2415 ;;                  1    wreg      void 
  2416 ;; Registers used:
  2417 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2418 ;; Tracked objects:
  2419 ;;		On entry : 0/0
  2420 ;;		On exit  : 0/0
  2421 ;;		Unchanged: 0/0
  2422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2423 ;;      Params:         0       0       2       0       0       0       0
  2424 ;;      Locals:         0       1       0       0       0       0       0
  2425 ;;      Temps:          0       0       0       0       0       0       0
  2426 ;;      Totals:         0       1       2       0       0       0       0
  2427 ;;Total ram usage:        3 bytes
  2428 ;; Hardware stack levels used:    1
  2429 ;; Hardware stack levels required when called:    7
  2430 ;; This function calls:
  2431 ;;		_DacSetValue
  2432 ;; This function is called by:
  2433 ;;		_readUartMessage
  2434 ;; This function uses a non-reentrant model
  2435 ;;
  2436                           
  2437                           	psect	text3
  2438  003734                     __ptext3:
  2439                           	opt stack 0
  2440  003734                     _GroupDAC:
  2441                           	opt stack 22
  2442                           
  2443                           ;incstack = 0
  2444                           ;GroupDAC@request stored from wreg
  2445  003734  0100               	movlb	0	; () banked
  2446  003736  6FBF               	movwf	GroupDAC@request& (0+255),b
  2447                           
  2448                           ;MessageFunctions.c: 135: switch (request)
  2449  003738  D007               	goto	l1236
  2450  00373A                     
  2451                           ;MessageFunctions.c: 138: DacSetValue(data);
  2452  00373A  C1C2  F02C         	movff	GroupDAC@data,DacSetValue@data
  2453  00373E  C1C3  F02D         	movff	GroupDAC@data+1,DacSetValue@data+1
  2454  003742  EC7D  F01C         	call	_DacSetValue	;wreg free
  2455                           
  2456                           ;MessageFunctions.c: 143: }
  2457                           
  2458                           ;MessageFunctions.c: 142: break;
  2459                           
  2460                           ;MessageFunctions.c: 141: default:
  2461                           
  2462                           ;MessageFunctions.c: 139: break;
  2463  003746  0012               	return	
  2464  003748                     l1236:
  2465  003748  0100               	movlb	0	; () banked
  2466  00374A  51BF               	movf	GroupDAC@request& (0+255),w,b
  2467                           
  2468                           ; Switch size 1, requested type "space"
  2469                           ; Number of cases is 1, Range of values is 97 to 97
  2470                           ; switch strategies available:
  2471                           ; Name         Instructions Cycles
  2472                           ; simple_byte            4     3 (average)
  2473                           ;	Chosen strategy is simple_byte
  2474  00374C  0A61               	xorlw	97	; case 97
  2475  00374E  A4D8               	btfss	status,2,c
  2476  003750  0012               	return	
  2477  003752  D7F3               	goto	l1237
  2478  003754                     __end_of_GroupDAC:
  2479                           	opt stack 0
  2480                           tosu	equ	0xFFF
  2481                           tosh	equ	0xFFE
  2482                           tosl	equ	0xFFD
  2483                           pclath	equ	0xFFA
  2484                           tblptru	equ	0xFF8
  2485                           tblptrh	equ	0xFF7
  2486                           tblptrl	equ	0xFF6
  2487                           tablat	equ	0xFF5
  2488                           postinc0	equ	0xFEE
  2489                           wreg	equ	0xFE8
  2490                           postdec1	equ	0xFE5
  2491                           fsr1l	equ	0xFE1
  2492                           indf2	equ	0xFDF
  2493                           postinc2	equ	0xFDE
  2494                           fsr2h	equ	0xFDA
  2495                           fsr2l	equ	0xFD9
  2496                           status	equ	0xFD8
  2497                           
  2498 ;; *************** function _GroupFlashMemory *****************
  2499 ;; Defined at:
  2500 ;;		line 112 in file "MessageFunctions.c"
  2501 ;; Parameters:    Size  Location     Type
  2502 ;;  request         1    wreg     enum E12
  2503 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2504 ;; Auto vars:     Size  Location     Type
  2505 ;;  request         1    2[BANK1 ] enum E12
  2506 ;; Return value:  Size  Location     Type
  2507 ;;                  1    wreg      void 
  2508 ;; Registers used:
  2509 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2510 ;; Tracked objects:
  2511 ;;		On entry : 0/0
  2512 ;;		On exit  : 0/0
  2513 ;;		Unchanged: 0/0
  2514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2515 ;;      Params:         0       0       2       0       0       0       0
  2516 ;;      Locals:         0       0       1       0       0       0       0
  2517 ;;      Temps:          0       1       0       0       0       0       0
  2518 ;;      Totals:         0       1       3       0       0       0       0
  2519 ;;Total ram usage:        4 bytes
  2520 ;; Hardware stack levels used:    1
  2521 ;; Hardware stack levels required when called:    7
  2522 ;; This function calls:
  2523 ;;		_FlashEreaseMem
  2524 ;;		_FlashReadCondition
  2525 ;;		_FlashReadUart
  2526 ;; This function is called by:
  2527 ;;		_readUartMessage
  2528 ;; This function uses a non-reentrant model
  2529 ;;
  2530                           
  2531                           	psect	text4
  2532  0030E0                     __ptext4:
  2533                           	opt stack 0
  2534  0030E0                     _GroupFlashMemory:
  2535                           	opt stack 22
  2536                           
  2537                           ;incstack = 0
  2538                           ;GroupFlashMemory@request stored from wreg
  2539  0030E0  0101               	movlb	1	; () banked
  2540  0030E2  6FC4               	movwf	GroupFlashMemory@request& (0+255),b
  2541                           
  2542                           ;MessageFunctions.c: 114: switch (request)
  2543  0030E4  D013               	goto	l1227
  2544  0030E6                     
  2545                           ;MessageFunctions.c: 117: FlashEreaseMem();
  2546  0030E6  EC63  F017         	call	_FlashEreaseMem	;wreg free
  2547                           
  2548                           ;MessageFunctions.c: 118: break;
  2549  0030EA  0012               	return	
  2550  0030EC                     
  2551                           ;MessageFunctions.c: 121: FlashReadCondition();
  2552  0030EC  EC6C  F00C         	call	_FlashReadCondition	;wreg free
  2553                           
  2554                           ;MessageFunctions.c: 122: break;
  2555  0030F0  0012               	return	
  2556  0030F2                     
  2557                           ;MessageFunctions.c: 125: FlashReadUart((int)data[0]);
  2558  0030F2  C1C2  FFD9         	movff	GroupFlashMemory@data,fsr2l
  2559  0030F6  C1C3  FFDA         	movff	GroupFlashMemory@data+1,fsr2h
  2560  0030FA  50DF               	movf	indf2,w,c
  2561  0030FC  0100               	movlb	0	; () banked
  2562  0030FE  6FBF               	movwf	??_GroupFlashMemory& (0+255),b
  2563  003100  51BF               	movf	??_GroupFlashMemory& (0+255),w,b
  2564  003102  6E2C               	movwf	FlashReadUart@numOfSampleToRead,c
  2565  003104  6A2D               	clrf	FlashReadUart@numOfSampleToRead+1,c
  2566  003106  EC52  F003         	call	_FlashReadUart	;wreg free
  2567                           
  2568                           ;MessageFunctions.c: 130: }
  2569                           
  2570                           ;MessageFunctions.c: 129: break;
  2571                           
  2572                           ;MessageFunctions.c: 128: default:
  2573                           
  2574                           ;MessageFunctions.c: 126: break;
  2575  00310A  0012               	return	
  2576  00310C                     l1227:
  2577  00310C  0101               	movlb	1	; () banked
  2578  00310E  51C4               	movf	GroupFlashMemory@request& (0+255),w,b
  2579                           
  2580                           ; Switch size 1, requested type "space"
  2581                           ; Number of cases is 3, Range of values is 81 to 83
  2582                           ; switch strategies available:
  2583                           ; Name         Instructions Cycles
  2584                           ; simple_byte           10     6 (average)
  2585                           ;	Chosen strategy is simple_byte
  2586  003110  0A51               	xorlw	81	; case 81
  2587  003112  B4D8               	btfsc	status,2,c
  2588  003114  D7E8               	goto	l1228
  2589  003116  0A03               	xorlw	3	; case 82
  2590  003118  B4D8               	btfsc	status,2,c
  2591  00311A  D7E8               	goto	l1230
  2592  00311C  0A01               	xorlw	1	; case 83
  2593  00311E  A4D8               	btfss	status,2,c
  2594  003120  0012               	return	
  2595  003122  D7E7               	goto	l1231
  2596  003124                     __end_of_GroupFlashMemory:
  2597                           	opt stack 0
  2598                           tosu	equ	0xFFF
  2599                           tosh	equ	0xFFE
  2600                           tosl	equ	0xFFD
  2601                           pclath	equ	0xFFA
  2602                           tblptru	equ	0xFF8
  2603                           tblptrh	equ	0xFF7
  2604                           tblptrl	equ	0xFF6
  2605                           tablat	equ	0xFF5
  2606                           postinc0	equ	0xFEE
  2607                           wreg	equ	0xFE8
  2608                           postdec1	equ	0xFE5
  2609                           fsr1l	equ	0xFE1
  2610                           indf2	equ	0xFDF
  2611                           postinc2	equ	0xFDE
  2612                           fsr2h	equ	0xFDA
  2613                           fsr2l	equ	0xFD9
  2614                           status	equ	0xFD8
  2615                           
  2616 ;; *************** function _GroupAdc *****************
  2617 ;; Defined at:
  2618 ;;		line 51 in file "MessageFunctions.c"
  2619 ;; Parameters:    Size  Location     Type
  2620 ;;  request         1    wreg     enum E12
  2621 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2622 ;; Auto vars:     Size  Location     Type
  2623 ;;  request         1   95[BANK0 ] enum E12
  2624 ;; Return value:  Size  Location     Type
  2625 ;;                  1    wreg      void 
  2626 ;; Registers used:
  2627 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2628 ;; Tracked objects:
  2629 ;;		On entry : 0/0
  2630 ;;		On exit  : 0/0
  2631 ;;		Unchanged: 0/0
  2632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2633 ;;      Params:         0       0       2       0       0       0       0
  2634 ;;      Locals:         0       1       0       0       0       0       0
  2635 ;;      Temps:          0       0       0       0       0       0       0
  2636 ;;      Totals:         0       1       2       0       0       0       0
  2637 ;;Total ram usage:        3 bytes
  2638 ;; Hardware stack levels used:    1
  2639 ;; Hardware stack levels required when called:    7
  2640 ;; This function calls:
  2641 ;;		_SetAdcOperationMode
  2642 ;;		_SetChannelMode
  2643 ;;		_SetConversionResultFormat
  2644 ;; This function is called by:
  2645 ;;		_readUartMessage
  2646 ;; This function uses a non-reentrant model
  2647 ;;
  2648                           
  2649                           	psect	text5
  2650  003050                     __ptext5:
  2651                           	opt stack 0
  2652  003050                     _GroupAdc:
  2653                           	opt stack 22
  2654                           
  2655                           ;incstack = 0
  2656                           ;GroupAdc@request stored from wreg
  2657  003050  0100               	movlb	0	; () banked
  2658  003052  6FBF               	movwf	GroupAdc@request& (0+255),b
  2659                           
  2660                           ;MessageFunctions.c: 53: switch (request)
  2661  003054  D015               	goto	l1204
  2662  003056                     
  2663                           ;MessageFunctions.c: 56: SetAdcOperationMode(data);
  2664  003056  C1C2  F02C         	movff	GroupAdc@data,SetAdcOperationMode@data
  2665  00305A  C1C3  F02D         	movff	GroupAdc@data+1,SetAdcOperationMode@data+1
  2666  00305E  EC89  F01C         	call	_SetAdcOperationMode	;wreg free
  2667                           
  2668                           ;MessageFunctions.c: 57: break;
  2669  003062  0012               	return	
  2670  003064                     
  2671                           ;MessageFunctions.c: 60: SetChannelMode(data);
  2672  003064  C1C2  F02C         	movff	GroupAdc@data,SetChannelMode@data
  2673  003068  C1C3  F02D         	movff	GroupAdc@data+1,SetChannelMode@data+1
  2674  00306C  EC93  F01A         	call	_SetChannelMode	;wreg free
  2675                           
  2676                           ;MessageFunctions.c: 61: break;
  2677  003070  0012               	return	
  2678  003072                     
  2679                           ;MessageFunctions.c: 64: SetConversionResultFormat(data);
  2680  003072  C1C2  F02C         	movff	GroupAdc@data,SetConversionResultFormat@data
  2681  003076  C1C3  F02D         	movff	GroupAdc@data+1,SetConversionResultFormat@data+1
  2682  00307A  EC83  F01C         	call	_SetConversionResultFormat	;wreg free
  2683                           
  2684                           ;MessageFunctions.c: 69: }
  2685                           
  2686                           ;MessageFunctions.c: 68: break;
  2687                           
  2688                           ;MessageFunctions.c: 67: default:
  2689                           
  2690                           ;MessageFunctions.c: 65: break;
  2691  00307E  0012               	return	
  2692  003080                     l1204:
  2693  003080  0100               	movlb	0	; () banked
  2694  003082  51BF               	movf	GroupAdc@request& (0+255),w,b
  2695                           
  2696                           ; Switch size 1, requested type "space"
  2697                           ; Number of cases is 3, Range of values is 49 to 51
  2698                           ; switch strategies available:
  2699                           ; Name         Instructions Cycles
  2700                           ; simple_byte           10     6 (average)
  2701                           ;	Chosen strategy is simple_byte
  2702  003084  0A31               	xorlw	49	; case 49
  2703  003086  B4D8               	btfsc	status,2,c
  2704  003088  D7E6               	goto	l1205
  2705  00308A  0A03               	xorlw	3	; case 50
  2706  00308C  B4D8               	btfsc	status,2,c
  2707  00308E  D7EA               	goto	l1207
  2708  003090  0A01               	xorlw	1	; case 51
  2709  003092  A4D8               	btfss	status,2,c
  2710  003094  0012               	return	
  2711  003096  D7ED               	goto	l1208
  2712  003098                     __end_of_GroupAdc:
  2713                           	opt stack 0
  2714                           tosu	equ	0xFFF
  2715                           tosh	equ	0xFFE
  2716                           tosl	equ	0xFFD
  2717                           pclath	equ	0xFFA
  2718                           tblptru	equ	0xFF8
  2719                           tblptrh	equ	0xFF7
  2720                           tblptrl	equ	0xFF6
  2721                           tablat	equ	0xFF5
  2722                           postinc0	equ	0xFEE
  2723                           wreg	equ	0xFE8
  2724                           postdec1	equ	0xFE5
  2725                           fsr1l	equ	0xFE1
  2726                           indf2	equ	0xFDF
  2727                           postinc2	equ	0xFDE
  2728                           fsr2h	equ	0xFDA
  2729                           fsr2l	equ	0xFD9
  2730                           status	equ	0xFD8
  2731                           
  2732 ;; *************** function _GroupStatusAndVersion *****************
  2733 ;; Defined at:
  2734 ;;		line 34 in file "MessageFunctions.c"
  2735 ;; Parameters:    Size  Location     Type
  2736 ;;  request         1    wreg     enum E12
  2737 ;;  data            3    0[BANK1 ] PTR unsigned char 
  2738 ;; Auto vars:     Size  Location     Type
  2739 ;;  request         1   95[BANK0 ] enum E12
  2740 ;; Return value:  Size  Location     Type
  2741 ;;                  1    wreg      void 
  2742 ;; Registers used:
  2743 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2744 ;; Tracked objects:
  2745 ;;		On entry : 0/0
  2746 ;;		On exit  : 0/0
  2747 ;;		Unchanged: 0/0
  2748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2749 ;;      Params:         0       0       2       0       0       0       0
  2750 ;;      Locals:         0       1       0       0       0       0       0
  2751 ;;      Temps:          0       0       0       0       0       0       0
  2752 ;;      Totals:         0       1       2       0       0       0       0
  2753 ;;Total ram usage:        3 bytes
  2754 ;; Hardware stack levels used:    1
  2755 ;; Hardware stack levels required when called:    6
  2756 ;; This function calls:
  2757 ;;		_GetMcuFwVersion
  2758 ;;		_GetMcuRunTime
  2759 ;; This function is called by:
  2760 ;;		_readUartMessage
  2761 ;; This function uses a non-reentrant model
  2762 ;;
  2763                           
  2764                           	psect	text6
  2765  0036A4                     __ptext6:
  2766                           	opt stack 0
  2767  0036A4                     _GroupStatusAndVersion:
  2768                           	opt stack 23
  2769                           
  2770                           ;incstack = 0
  2771                           ;GroupStatusAndVersion@request stored from wreg
  2772  0036A4  0100               	movlb	0	; () banked
  2773  0036A6  6FBF               	movwf	GroupStatusAndVersion@request& (0+255),b
  2774                           
  2775                           ;MessageFunctions.c: 36: switch (request)
  2776  0036A8  D006               	goto	l1196
  2777  0036AA                     
  2778                           ;MessageFunctions.c: 39: GetMcuFwVersion();
  2779  0036AA  EC97  F012         	call	_GetMcuFwVersion	;wreg free
  2780                           
  2781                           ;MessageFunctions.c: 40: break;
  2782  0036AE  0012               	return	
  2783  0036B0                     
  2784                           ;MessageFunctions.c: 43: GetMcuRunTime();
  2785  0036B0  ECE0  F00E         	call	_GetMcuRunTime	;wreg free
  2786                           
  2787                           ;MessageFunctions.c: 48: }
  2788                           
  2789                           ;MessageFunctions.c: 47: break;
  2790                           
  2791                           ;MessageFunctions.c: 46: default:
  2792                           
  2793                           ;MessageFunctions.c: 44: break;
  2794  0036B4  0012               	return	
  2795  0036B6                     l1196:
  2796  0036B6  0100               	movlb	0	; () banked
  2797  0036B8  51BF               	movf	GroupStatusAndVersion@request& (0+255),w,b
  2798                           
  2799                           ; Switch size 1, requested type "space"
  2800                           ; Number of cases is 2, Range of values is 33 to 34
  2801                           ; switch strategies available:
  2802                           ; Name         Instructions Cycles
  2803                           ; simple_byte            7     4 (average)
  2804                           ;	Chosen strategy is simple_byte
  2805  0036BA  0A21               	xorlw	33	; case 33
  2806  0036BC  B4D8               	btfsc	status,2,c
  2807  0036BE  D7F8               	goto	l1199
  2808  0036C0  0A03               	xorlw	3	; case 34
  2809  0036C2  A4D8               	btfss	status,2,c
  2810  0036C4  0012               	return	
  2811  0036C6  D7F1               	goto	l1197
  2812  0036C8                     __end_of_GroupStatusAndVersion:
  2813                           	opt stack 0
  2814                           tosu	equ	0xFFF
  2815                           tosh	equ	0xFFE
  2816                           tosl	equ	0xFFD
  2817                           pclath	equ	0xFFA
  2818                           tblptru	equ	0xFF8
  2819                           tblptrh	equ	0xFF7
  2820                           tblptrl	equ	0xFF6
  2821                           tablat	equ	0xFF5
  2822                           postinc0	equ	0xFEE
  2823                           wreg	equ	0xFE8
  2824                           postdec1	equ	0xFE5
  2825                           fsr1l	equ	0xFE1
  2826                           indf2	equ	0xFDF
  2827                           postinc2	equ	0xFDE
  2828                           fsr2h	equ	0xFDA
  2829                           fsr2l	equ	0xFD9
  2830                           status	equ	0xFD8
  2831                           
  2832 ;; *************** function _GroupControlMcu *****************
  2833 ;; Defined at:
  2834 ;;		line 11 in file "MessageFunctions.c"
  2835 ;; Parameters:    Size  Location     Type
  2836 ;;  request         1    wreg     enum E12
  2837 ;;  data            3    0[BANK1 ] PTR unsigned char 
  2838 ;; Auto vars:     Size  Location     Type
  2839 ;;  request         1   95[BANK0 ] enum E12
  2840 ;; Return value:  Size  Location     Type
  2841 ;;                  1    wreg      void 
  2842 ;; Registers used:
  2843 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2844 ;; Tracked objects:
  2845 ;;		On entry : 0/0
  2846 ;;		On exit  : 0/0
  2847 ;;		Unchanged: 0/0
  2848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2849 ;;      Params:         0       0       2       0       0       0       0
  2850 ;;      Locals:         0       1       0       0       0       0       0
  2851 ;;      Temps:          0       0       0       0       0       0       0
  2852 ;;      Totals:         0       1       2       0       0       0       0
  2853 ;;Total ram usage:        3 bytes
  2854 ;; Hardware stack levels used:    1
  2855 ;; Hardware stack levels required when called:    7
  2856 ;; This function calls:
  2857 ;;		_ResetMcu
  2858 ;;		_testLeds
  2859 ;; This function is called by:
  2860 ;;		_readUartMessage
  2861 ;; This function uses a non-reentrant model
  2862 ;;
  2863                           
  2864                           	psect	text7
  2865  003496                     __ptext7:
  2866                           	opt stack 0
  2867  003496                     _GroupControlMcu:
  2868                           	opt stack 22
  2869                           
  2870                           ;incstack = 0
  2871                           ;GroupControlMcu@request stored from wreg
  2872  003496  0100               	movlb	0	; () banked
  2873  003498  6FBF               	movwf	GroupControlMcu@request& (0+255),b
  2874                           
  2875                           ;MessageFunctions.c: 13: switch (request)
  2876  00349A  D006               	goto	l1186
  2877  00349C                     
  2878                           ;MessageFunctions.c: 16: testLeds();
  2879  00349C  EC37  F015         	call	_testLeds	;wreg free
  2880                           
  2881                           ;MessageFunctions.c: 17: break;
  2882  0034A0  0012               	return	
  2883  0034A2                     
  2884                           ;MessageFunctions.c: 20: ResetMcu();
  2885  0034A2  EC61  F01C         	call	_ResetMcu	;wreg free
  2886                           
  2887                           ;MessageFunctions.c: 31: }
  2888                           
  2889                           ;MessageFunctions.c: 30: break;
  2890                           
  2891                           ;MessageFunctions.c: 29: default:
  2892                           
  2893                           ;MessageFunctions.c: 27: break;
  2894                           
  2895                           ;MessageFunctions.c: 26: case CONTROL_PA2_SET:
  2896                           
  2897                           ;MessageFunctions.c: 24: break;
  2898                           
  2899                           ;MessageFunctions.c: 23: case CONTROL_PA1_SET:
  2900                           
  2901                           ;MessageFunctions.c: 21: break;
  2902  0034A6  0012               	return	
  2903  0034A8                     l1186:
  2904  0034A8  0100               	movlb	0	; () banked
  2905  0034AA  51BF               	movf	GroupControlMcu@request& (0+255),w,b
  2906                           
  2907                           ; Switch size 1, requested type "space"
  2908                           ; Number of cases is 4, Range of values is 17 to 20
  2909                           ; switch strategies available:
  2910                           ; Name         Instructions Cycles
  2911                           ; simple_byte           13     7 (average)
  2912                           ;	Chosen strategy is simple_byte
  2913  0034AC  0A11               	xorlw	17	; case 17
  2914  0034AE  B4D8               	btfsc	status,2,c
  2915  0034B0  D7F8               	goto	l1189
  2916  0034B2  0A03               	xorlw	3	; case 18
  2917  0034B4  B4D8               	btfsc	status,2,c
  2918  0034B6  0012               	return	
  2919  0034B8  0A01               	xorlw	1	; case 19
  2920  0034BA  B4D8               	btfsc	status,2,c
  2921  0034BC  0012               	return	
  2922  0034BE  0A07               	xorlw	7	; case 20
  2923  0034C0  A4D8               	btfss	status,2,c
  2924  0034C2  0012               	return	
  2925  0034C4  D7EB               	goto	l1187
  2926  0034C6                     __end_of_GroupControlMcu:
  2927                           	opt stack 0
  2928                           tosu	equ	0xFFF
  2929                           tosh	equ	0xFFE
  2930                           tosl	equ	0xFFD
  2931                           pclath	equ	0xFFA
  2932                           tblptru	equ	0xFF8
  2933                           tblptrh	equ	0xFF7
  2934                           tblptrl	equ	0xFF6
  2935                           tablat	equ	0xFF5
  2936                           postinc0	equ	0xFEE
  2937                           wreg	equ	0xFE8
  2938                           postdec1	equ	0xFE5
  2939                           fsr1l	equ	0xFE1
  2940                           indf2	equ	0xFDF
  2941                           postinc2	equ	0xFDE
  2942                           fsr2h	equ	0xFDA
  2943                           fsr2l	equ	0xFD9
  2944                           status	equ	0xFD8
  2945                           
  2946 ;; *************** function _GroupSynthesizers *****************
  2947 ;; Defined at:
  2948 ;;		line 71 in file "MessageFunctions.c"
  2949 ;; Parameters:    Size  Location     Type
  2950 ;;  request         1    wreg     enum E12
  2951 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2952 ;; Auto vars:     Size  Location     Type
  2953 ;;  request         1   95[BANK0 ] enum E12
  2954 ;; Return value:  Size  Location     Type
  2955 ;;                  1    wreg      void 
  2956 ;; Registers used:
  2957 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2958 ;; Tracked objects:
  2959 ;;		On entry : 0/0
  2960 ;;		On exit  : 0/0
  2961 ;;		Unchanged: 0/0
  2962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2963 ;;      Params:         0       0       2       0       0       0       0
  2964 ;;      Locals:         0       1       0       0       0       0       0
  2965 ;;      Temps:          0       0       0       0       0       0       0
  2966 ;;      Totals:         0       1       2       0       0       0       0
  2967 ;;Total ram usage:        3 bytes
  2968 ;; Hardware stack levels used:    1
  2969 ;; Hardware stack levels required when called:    9
  2970 ;; This function calls:
  2971 ;;		_PLLUartInitialize
  2972 ;;		_SetSynthRxOper
  2973 ;;		_SetSynthTxOper
  2974 ;;		_SynthReadData
  2975 ;;		_UpdateRxFreq
  2976 ;;		_UpdateTxFreq
  2977 ;; This function is called by:
  2978 ;;		_readUartMessage
  2979 ;; This function uses a non-reentrant model
  2980 ;;
  2981                           
  2982                           	psect	text8
  2983  0023F8                     __ptext8:
  2984                           	opt stack 0
  2985  0023F8                     _GroupSynthesizers:
  2986                           	opt stack 20
  2987                           
  2988                           ;incstack = 0
  2989                           ;GroupSynthesizers@request stored from wreg
  2990  0023F8  0100               	movlb	0	; () banked
  2991  0023FA  6FBF               	movwf	GroupSynthesizers@request& (0+255),b
  2992                           
  2993                           ;MessageFunctions.c: 73: switch (request)
  2994  0023FC  D030               	goto	l1213
  2995  0023FE                     
  2996                           ;MessageFunctions.c: 76: PLLUartInitialize(data);
  2997  0023FE  C1C2  F018         	movff	GroupSynthesizers@data,PLLUartInitialize@data
  2998  002402  C1C3  F019         	movff	GroupSynthesizers@data+1,PLLUartInitialize@data+1
  2999  002406  ECB5  F01C         	call	_PLLUartInitialize	;wreg free
  3000                           
  3001                           ;MessageFunctions.c: 77: break;
  3002  00240A  0012               	return	
  3003  00240C                     
  3004                           ;MessageFunctions.c: 80: PLLUartInitialize(data);
  3005  00240C  C1C2  F018         	movff	GroupSynthesizers@data,PLLUartInitialize@data
  3006  002410  C1C3  F019         	movff	GroupSynthesizers@data+1,PLLUartInitialize@data+1
  3007  002414  ECB5  F01C         	call	_PLLUartInitialize	;wreg free
  3008                           
  3009                           ;MessageFunctions.c: 81: break;
  3010  002418  0012               	return	
  3011  00241A                     
  3012                           ;MessageFunctions.c: 84: UpdateTxFreq(data);
  3013  00241A  C1C2  F087         	movff	GroupSynthesizers@data,UpdateTxFreq@data
  3014  00241E  C1C3  F088         	movff	GroupSynthesizers@data+1,UpdateTxFreq@data+1
  3015  002422  EC06  F014         	call	_UpdateTxFreq	;wreg free
  3016                           
  3017                           ;MessageFunctions.c: 85: break;
  3018  002426  0012               	return	
  3019  002428                     
  3020                           ;MessageFunctions.c: 88: UpdateRxFreq(data);
  3021  002428  C1C2  F02C         	movff	GroupSynthesizers@data,UpdateRxFreq@data
  3022  00242C  C1C3  F02D         	movff	GroupSynthesizers@data+1,UpdateRxFreq@data+1
  3023  002430  EC64  F01B         	call	_UpdateRxFreq	;wreg free
  3024                           
  3025                           ;MessageFunctions.c: 89: break;
  3026  002434  0012               	return	
  3027  002436                     
  3028                           ;MessageFunctions.c: 92: SetSynthRxOper();
  3029  002436  EC7B  F01A         	call	_SetSynthRxOper	;wreg free
  3030                           
  3031                           ;MessageFunctions.c: 93: break;
  3032  00243A  0012               	return	
  3033  00243C                     
  3034                           ;MessageFunctions.c: 96: SetSynthTxOper();
  3035  00243C  EC63  F01A         	call	_SetSynthTxOper	;wreg free
  3036                           
  3037                           ;MessageFunctions.c: 97: break;
  3038  002440  0012               	return	
  3039  002442                     
  3040                           ;MessageFunctions.c: 100: SynthReadData(data);
  3041  002442  C1C2  F024         	movff	GroupSynthesizers@data,SynthReadData@data
  3042  002446  C1C3  F025         	movff	GroupSynthesizers@data+1,SynthReadData@data+1
  3043  00244A  EC02  F015         	call	_SynthReadData	;wreg free
  3044                           
  3045                           ;MessageFunctions.c: 101: break;
  3046  00244E  0012               	return	
  3047  002450                     
  3048                           ;MessageFunctions.c: 104: SynthReadData(data);
  3049  002450  C1C2  F024         	movff	GroupSynthesizers@data,SynthReadData@data
  3050  002454  C1C3  F025         	movff	GroupSynthesizers@data+1,SynthReadData@data+1
  3051  002458  EC02  F015         	call	_SynthReadData	;wreg free
  3052                           
  3053                           ;MessageFunctions.c: 109: }
  3054                           
  3055                           ;MessageFunctions.c: 108: break;
  3056                           
  3057                           ;MessageFunctions.c: 107: default:
  3058                           
  3059                           ;MessageFunctions.c: 105: break;
  3060  00245C  0012               	return	
  3061  00245E                     l1213:
  3062  00245E  0100               	movlb	0	; () banked
  3063  002460  51BF               	movf	GroupSynthesizers@request& (0+255),w,b
  3064                           
  3065                           ; Switch size 1, requested type "space"
  3066                           ; Number of cases is 8, Range of values is 64 to 71
  3067                           ; switch strategies available:
  3068                           ; Name         Instructions Cycles
  3069                           ; simple_byte           25    13 (average)
  3070                           ;	Chosen strategy is simple_byte
  3071  002462  0A40               	xorlw	64	; case 64
  3072  002464  B4D8               	btfsc	status,2,c
  3073  002466  D7CB               	goto	l1214
  3074  002468  0A01               	xorlw	1	; case 65
  3075  00246A  B4D8               	btfsc	status,2,c
  3076  00246C  D7CF               	goto	l1216
  3077  00246E  0A03               	xorlw	3	; case 66
  3078  002470  B4D8               	btfsc	status,2,c
  3079  002472  D7D3               	goto	l1217
  3080  002474  0A01               	xorlw	1	; case 67
  3081  002476  B4D8               	btfsc	status,2,c
  3082  002478  D7D7               	goto	l1218
  3083  00247A  0A07               	xorlw	7	; case 68
  3084  00247C  B4D8               	btfsc	status,2,c
  3085  00247E  D7DB               	goto	l1219
  3086  002480  0A01               	xorlw	1	; case 69
  3087  002482  B4D8               	btfsc	status,2,c
  3088  002484  D7DB               	goto	l1220
  3089  002486  0A03               	xorlw	3	; case 70
  3090  002488  B4D8               	btfsc	status,2,c
  3091  00248A  D7DB               	goto	l1221
  3092  00248C  0A01               	xorlw	1	; case 71
  3093  00248E  A4D8               	btfss	status,2,c
  3094  002490  0012               	return	
  3095  002492  D7DE               	goto	l1222
  3096  002494                     __end_of_GroupSynthesizers:
  3097                           	opt stack 0
  3098                           tosu	equ	0xFFF
  3099                           tosh	equ	0xFFE
  3100                           tosl	equ	0xFFD
  3101                           pclath	equ	0xFFA
  3102                           tblptru	equ	0xFF8
  3103                           tblptrh	equ	0xFF7
  3104                           tblptrl	equ	0xFF6
  3105                           tablat	equ	0xFF5
  3106                           postinc0	equ	0xFEE
  3107                           wreg	equ	0xFE8
  3108                           postdec1	equ	0xFE5
  3109                           fsr1l	equ	0xFE1
  3110                           indf2	equ	0xFDF
  3111                           postinc2	equ	0xFDE
  3112                           fsr2h	equ	0xFDA
  3113                           fsr2l	equ	0xFD9
  3114                           status	equ	0xFD8
  3115                           
  3116 ;; *************** function _UpdateTxFreq *****************
  3117 ;; Defined at:
  3118 ;;		line 64 in file "SyntApp.c"
  3119 ;; Parameters:    Size  Location     Type
  3120 ;;  data            2   39[BANK0 ] PTR unsigned char 
  3121 ;; Auto vars:     Size  Location     Type
  3122 ;;  retVal          8   41[BANK0 ] struct .
  3123 ;; Return value:  Size  Location     Type
  3124 ;;                  1    wreg      void 
  3125 ;; Registers used:
  3126 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3127 ;; Tracked objects:
  3128 ;;		On entry : 0/0
  3129 ;;		On exit  : 0/0
  3130 ;;		Unchanged: 0/0
  3131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3132 ;;      Params:         0       2       0       0       0       0       0
  3133 ;;      Locals:         0       8       0       0       0       0       0
  3134 ;;      Temps:          0       0       0       0       0       0       0
  3135 ;;      Totals:         0      10       0       0       0       0       0
  3136 ;;Total ram usage:       10 bytes
  3137 ;; Hardware stack levels used:    1
  3138 ;; Hardware stack levels required when called:    7
  3139 ;; This function calls:
  3140 ;;		_GetIntFromUartData
  3141 ;;		_SWSPI_send_word
  3142 ;;		_SendAckMessage
  3143 ;;		_StoreIntInEeprom
  3144 ;; This function is called by:
  3145 ;;		_GroupSynthesizers
  3146 ;; This function uses a non-reentrant model
  3147 ;;
  3148                           
  3149                           	psect	text9
  3150  00280C                     __ptext9:
  3151                           	opt stack 0
  3152  00280C                     _UpdateTxFreq:
  3153                           	opt stack 21
  3154                           
  3155                           ;SyntApp.c: 66: INT_VAL retVal;
  3156                           ;SyntApp.c: 67: if(cntRegUpdate < 7)
  3157                           
  3158                           ;incstack = 0
  3159  00280C  0E07               	movlw	7
  3160  00280E  603A               	cpfslt	_cntRegUpdate,c
  3161  002810  D03A               	goto	l499
  3162                           
  3163                           ;SyntApp.c: 68: {
  3164                           ;SyntApp.c: 69: retVal = GetIntFromUartData(10, data);
  3165  002812  C087  F066         	movff	UpdateTxFreq@data,GetIntFromUartData@data
  3166  002816  C088  F067         	movff	UpdateTxFreq@data+1,GetIntFromUartData@data+1
  3167  00281A  0E0A               	movlw	10
  3168  00281C  ECC7  F009         	call	_GetIntFromUartData
  3169  002820  EE20  F089         	lfsr	2,UpdateTxFreq@retVal
  3170  002824  0E07               	movlw	7
  3171  002826                     u8031:
  3172  002826  CFEB FFDB          	movff	plusw0,plusw2
  3173  00282A  06E8               	decf	wreg,f,c
  3174  00282C  E2FC               	bc	u8031
  3175                           
  3176                           ;SyntApp.c: 70: SWSPI_send_word(SYNTH_TX, retVal.num, 3);
  3177  00282E  C089  F026         	movff	UpdateTxFreq@retVal,SWSPI_send_word@data
  3178  002832  C08A  F027         	movff	UpdateTxFreq@retVal+1,SWSPI_send_word@data+1
  3179  002836  C08B  F028         	movff	UpdateTxFreq@retVal+2,SWSPI_send_word@data+2
  3180  00283A  C08C  F029         	movff	UpdateTxFreq@retVal+3,SWSPI_send_word@data+3
  3181  00283E  0E03               	movlw	3
  3182  002840  6E2A               	movwf	SWSPI_send_word@dataSize,c
  3183  002842  0E00               	movlw	0
  3184  002844  EC4A  F012         	call	_SWSPI_send_word
  3185                           
  3186                           ;SyntApp.c: 71: StoreIntInEeprom(retVal.num, (0) | SYNTH_ADDRES[retVal.con], 4);
  3187  002848  C089  F021         	movff	UpdateTxFreq@retVal,StoreIntInEeprom@data
  3188  00284C  C08A  F022         	movff	UpdateTxFreq@retVal+1,StoreIntInEeprom@data+1
  3189  002850  C08B  F023         	movff	UpdateTxFreq@retVal+2,StoreIntInEeprom@data+2
  3190  002854  C08C  F024         	movff	UpdateTxFreq@retVal+3,StoreIntInEeprom@data+3
  3191  002858  0E35               	movlw	low _SYNTH_ADDRES
  3192  00285A  0100               	movlb	0	; () banked
  3193  00285C  258D               	addwf	(UpdateTxFreq@retVal+4)& (0+255),w,b
  3194  00285E  6EF6               	movwf	tblptrl,c
  3195  002860  0E06               	movlw	high _SYNTH_ADDRES
  3196  002862  218E               	addwfc	(UpdateTxFreq@retVal+5)& (0+255),w,b
  3197  002864  6EF7               	movwf	tblptrh,c
  3198  002866                     	if	0	;There are less than 3 active tblptr bytes
  3199  002866                     	endif
  3200  002866  0008               	tblrd		*
  3201  002868  CFF5 F025          	movff	tablat,StoreIntInEeprom@address
  3202  00286C  0E00               	movlw	0
  3203  00286E  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  3204  002870  0E04               	movlw	4
  3205  002872  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  3206  002874  EC72  F019         	call	_StoreIntInEeprom	;wreg free
  3207                           
  3208                           ;SyntApp.c: 72: cntRegUpdate ++;
  3209  002878  2A3A               	incf	_cntRegUpdate,f,c
  3210                           
  3211                           ;SyntApp.c: 73: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_REQ_ANTHER_TX_R
      +                          EG);
  3212  00287A  0E48               	movlw	72
  3213  00287C  6E24               	movwf	SendAckMessage@inRequest,c
  3214  00287E  0E04               	movlw	4
  3215  002880  EC8C  F017         	call	_SendAckMessage
  3216                           
  3217                           ;SyntApp.c: 74: }
  3218  002884  0012               	return	
  3219  002886                     l499:
  3220                           
  3221                           ;SyntApp.c: 76: else
  3222                           ;SyntApp.c: 77: {
  3223                           ;SyntApp.c: 78: cntRegUpdate = 0;
  3224  002886  0E00               	movlw	0
  3225  002888  6E3A               	movwf	_cntRegUpdate,c
  3226                           
  3227                           ;SyntApp.c: 79: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_DOWN_SET);
  3228  00288A  0E42               	movlw	66
  3229  00288C  6E24               	movwf	SendAckMessage@inRequest,c
  3230  00288E  0E04               	movlw	4
  3231  002890  EC8C  F017         	call	_SendAckMessage
  3232  002894  0012               	return	
  3233  002896                     __end_of_UpdateTxFreq:
  3234                           	opt stack 0
  3235                           tosu	equ	0xFFF
  3236                           tosh	equ	0xFFE
  3237                           tosl	equ	0xFFD
  3238                           pclath	equ	0xFFA
  3239                           tblptru	equ	0xFF8
  3240                           tblptrh	equ	0xFF7
  3241                           tblptrl	equ	0xFF6
  3242                           tablat	equ	0xFF5
  3243                           postinc0	equ	0xFEE
  3244                           plusw0	equ	0xFEB
  3245                           wreg	equ	0xFE8
  3246                           postdec1	equ	0xFE5
  3247                           fsr1l	equ	0xFE1
  3248                           indf2	equ	0xFDF
  3249                           postinc2	equ	0xFDE
  3250                           plusw2	equ	0xFDB
  3251                           fsr2h	equ	0xFDA
  3252                           fsr2l	equ	0xFD9
  3253                           status	equ	0xFD8
  3254                           
  3255 ;; *************** function _StoreIntInEeprom *****************
  3256 ;; Defined at:
  3257 ;;		line 109 in file "SystemCommon.c"
  3258 ;; Parameters:    Size  Location     Type
  3259 ;;  data            4   32[COMRAM] unsigned long 
  3260 ;;  address         1   36[COMRAM] unsigned char 
  3261 ;;  numOfByes       2   37[COMRAM] int 
  3262 ;; Auto vars:     Size  Location     Type
  3263 ;;  val             1   39[COMRAM] unsigned char 
  3264 ;;  idx             1   40[COMRAM] unsigned char 
  3265 ;; Return value:  Size  Location     Type
  3266 ;;                  1    wreg      void 
  3267 ;; Registers used:
  3268 ;;		wreg, status,2, status,0, cstack
  3269 ;; Tracked objects:
  3270 ;;		On entry : 0/0
  3271 ;;		On exit  : 0/0
  3272 ;;		Unchanged: 0/0
  3273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3274 ;;      Params:         7       0       0       0       0       0       0
  3275 ;;      Locals:         2       0       0       0       0       0       0
  3276 ;;      Temps:          0       0       0       0       0       0       0
  3277 ;;      Totals:         9       0       0       0       0       0       0
  3278 ;;Total ram usage:        9 bytes
  3279 ;; Hardware stack levels used:    1
  3280 ;; Hardware stack levels required when called:    5
  3281 ;; This function calls:
  3282 ;;		_EepromWrite
  3283 ;;		_make8
  3284 ;; This function is called by:
  3285 ;;		_UpdateTxFreq
  3286 ;; This function uses a non-reentrant model
  3287 ;;
  3288                           
  3289                           	psect	text10
  3290  0032E4                     __ptext10:
  3291                           	opt stack 0
  3292  0032E4                     _StoreIntInEeprom:
  3293                           	opt stack 22
  3294                           
  3295                           ;SystemCommon.c: 111: for(uint8_t idx = numOfByes; idx; idx--)
  3296                           
  3297                           ;incstack = 0
  3298  0032E4  C026  F029         	movff	StoreIntInEeprom@numOfByes,StoreIntInEeprom@idx
  3299  0032E8  D015               	goto	l1323
  3300  0032EA                     
  3301                           ;SystemCommon.c: 112: {
  3302                           ;SystemCommon.c: 113: uint8_t val = make8(data, idx - 1);
  3303  0032EA  C021  F018         	movff	StoreIntInEeprom@data,make8@data
  3304  0032EE  C022  F019         	movff	StoreIntInEeprom@data+1,make8@data+1
  3305  0032F2  C023  F01A         	movff	StoreIntInEeprom@data+2,make8@data+2
  3306  0032F6  C024  F01B         	movff	StoreIntInEeprom@data+3,make8@data+3
  3307  0032FA  0429               	decf	StoreIntInEeprom@idx,w,c
  3308  0032FC  6E1C               	movwf	make8@dataLocation,c
  3309  0032FE  EC2E  F016         	call	_make8	;wreg free
  3310  003302  6E28               	movwf	StoreIntInEeprom@val,c
  3311                           
  3312                           ;SystemCommon.c: 114: EepromWrite(address - idx, val);
  3313  003304  C028  F01B         	movff	StoreIntInEeprom@val,EepromWrite@data
  3314  003308  5029               	movf	StoreIntInEeprom@idx,w,c
  3315  00330A  0800               	sublw	0
  3316  00330C  2425               	addwf	StoreIntInEeprom@address,w,c
  3317  00330E  EC5A  F01C         	call	_EepromWrite
  3318  003312  0629               	decf	StoreIntInEeprom@idx,f,c
  3319  003314                     l1323:
  3320  003314  5029               	movf	StoreIntInEeprom@idx,w,c
  3321  003316  B4D8               	btfsc	status,2,c
  3322  003318  0012               	return	
  3323  00331A  D7E7               	goto	l1324
  3324  00331C                     __end_of_StoreIntInEeprom:
  3325                           	opt stack 0
  3326                           tosu	equ	0xFFF
  3327                           tosh	equ	0xFFE
  3328                           tosl	equ	0xFFD
  3329                           pclath	equ	0xFFA
  3330                           tblptru	equ	0xFF8
  3331                           tblptrh	equ	0xFF7
  3332                           tblptrl	equ	0xFF6
  3333                           tablat	equ	0xFF5
  3334                           postinc0	equ	0xFEE
  3335                           plusw0	equ	0xFEB
  3336                           wreg	equ	0xFE8
  3337                           postdec1	equ	0xFE5
  3338                           fsr1l	equ	0xFE1
  3339                           indf2	equ	0xFDF
  3340                           postinc2	equ	0xFDE
  3341                           plusw2	equ	0xFDB
  3342                           fsr2h	equ	0xFDA
  3343                           fsr2l	equ	0xFD9
  3344                           status	equ	0xFD8
  3345                           
  3346 ;; *************** function _EepromWrite *****************
  3347 ;; Defined at:
  3348 ;;		line 220 in file "FlashApp.c"
  3349 ;; Parameters:    Size  Location     Type
  3350 ;;  address         1    wreg     unsigned char 
  3351 ;;  data            1   26[COMRAM] unsigned char 
  3352 ;; Auto vars:     Size  Location     Type
  3353 ;;  address         1   27[COMRAM] unsigned char 
  3354 ;; Return value:  Size  Location     Type
  3355 ;;                  1    wreg      void 
  3356 ;; Registers used:
  3357 ;;		wreg, status,2, cstack
  3358 ;; Tracked objects:
  3359 ;;		On entry : 0/0
  3360 ;;		On exit  : 0/0
  3361 ;;		Unchanged: 0/0
  3362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3363 ;;      Params:         1       0       0       0       0       0       0
  3364 ;;      Locals:         1       0       0       0       0       0       0
  3365 ;;      Temps:          0       0       0       0       0       0       0
  3366 ;;      Totals:         2       0       0       0       0       0       0
  3367 ;;Total ram usage:        2 bytes
  3368 ;; Hardware stack levels used:    1
  3369 ;; Hardware stack levels required when called:    4
  3370 ;; This function calls:
  3371 ;;		_DATAEE_WriteByte
  3372 ;; This function is called by:
  3373 ;;		_StoreIntInEeprom
  3374 ;; This function uses a non-reentrant model
  3375 ;;
  3376                           
  3377                           	psect	text11
  3378  0038B4                     __ptext11:
  3379                           	opt stack 0
  3380  0038B4                     _EepromWrite:
  3381                           	opt stack 22
  3382                           
  3383                           ;incstack = 0
  3384                           ;EepromWrite@address stored from wreg
  3385  0038B4  6E1C               	movwf	EepromWrite@address,c
  3386                           
  3387                           ;FlashApp.c: 222: DATAEE_WriteByte(address, data);
  3388  0038B6  C01B  F018         	movff	EepromWrite@data,DATAEE_WriteByte@bData
  3389  0038BA  501C               	movf	EepromWrite@address,w,c
  3390  0038BC  ECC6  F019         	call	_DATAEE_WriteByte
  3391  0038C0  0012               	return		;funcret
  3392  0038C2                     __end_of_EepromWrite:
  3393                           	opt stack 0
  3394                           tosu	equ	0xFFF
  3395                           tosh	equ	0xFFE
  3396                           tosl	equ	0xFFD
  3397                           pclath	equ	0xFFA
  3398                           tblptru	equ	0xFF8
  3399                           tblptrh	equ	0xFF7
  3400                           tblptrl	equ	0xFF6
  3401                           tablat	equ	0xFF5
  3402                           postinc0	equ	0xFEE
  3403                           plusw0	equ	0xFEB
  3404                           wreg	equ	0xFE8
  3405                           postdec1	equ	0xFE5
  3406                           fsr1l	equ	0xFE1
  3407                           indf2	equ	0xFDF
  3408                           postinc2	equ	0xFDE
  3409                           plusw2	equ	0xFDB
  3410                           fsr2h	equ	0xFDA
  3411                           fsr2l	equ	0xFD9
  3412                           status	equ	0xFD8
  3413                           
  3414 ;; *************** function _DATAEE_WriteByte *****************
  3415 ;; Defined at:
  3416 ;;		line 167 in file "mcc_generated_files/memory.c"
  3417 ;; Parameters:    Size  Location     Type
  3418 ;;  bAdd            1    wreg     unsigned char 
  3419 ;;  bData           1   23[COMRAM] unsigned char 
  3420 ;; Auto vars:     Size  Location     Type
  3421 ;;  bAdd            1   24[COMRAM] unsigned char 
  3422 ;;  GIEBitValue     1   25[COMRAM] unsigned char 
  3423 ;; Return value:  Size  Location     Type
  3424 ;;                  1    wreg      void 
  3425 ;; Registers used:
  3426 ;;		wreg, status,2
  3427 ;; Tracked objects:
  3428 ;;		On entry : 0/0
  3429 ;;		On exit  : 0/0
  3430 ;;		Unchanged: 0/0
  3431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3432 ;;      Params:         1       0       0       0       0       0       0
  3433 ;;      Locals:         2       0       0       0       0       0       0
  3434 ;;      Temps:          0       0       0       0       0       0       0
  3435 ;;      Totals:         3       0       0       0       0       0       0
  3436 ;;Total ram usage:        3 bytes
  3437 ;; Hardware stack levels used:    1
  3438 ;; Hardware stack levels required when called:    3
  3439 ;; This function calls:
  3440 ;;		Nothing
  3441 ;; This function is called by:
  3442 ;;		_EepromWrite
  3443 ;;		_EepromTest
  3444 ;; This function uses a non-reentrant model
  3445 ;;
  3446                           
  3447                           	psect	text12
  3448  00338C                     __ptext12:
  3449                           	opt stack 0
  3450  00338C                     _DATAEE_WriteByte:
  3451                           	opt stack 22
  3452                           
  3453                           ;incstack = 0
  3454                           ;DATAEE_WriteByte@bAdd stored from wreg
  3455  00338C  6E19               	movwf	DATAEE_WriteByte@bAdd,c
  3456                           
  3457                           ;memory.c: 169: uint8_t GIEBitValue = INTCONbits.GIE;
  3458  00338E  0E00               	movlw	0
  3459  003390  BEF2               	btfsc	intcon,7,c	;volatile
  3460  003392  0E01               	movlw	1
  3461  003394  6E1A               	movwf	DATAEE_WriteByte@GIEBitValue,c
  3462                           
  3463                           ;memory.c: 171: EEADR = (bAdd & 0xFF);
  3464  003396  C019  FFA9         	movff	DATAEE_WriteByte@bAdd,4009	;volatile
  3465                           
  3466                           ;memory.c: 172: EEDATA = bData;
  3467  00339A  C018  FFA8         	movff	DATAEE_WriteByte@bData,4008	;volatile
  3468                           
  3469                           ;memory.c: 173: EECON1bits.EEPGD = 0;
  3470  00339E  9EA6               	bcf	4006,7,c	;volsfr
  3471                           
  3472                           ;memory.c: 174: EECON1bits.CFGS = 0;
  3473  0033A0  9CA6               	bcf	4006,6,c	;volsfr
  3474                           
  3475                           ;memory.c: 175: EECON1bits.WREN = 1;
  3476  0033A2  84A6               	bsf	4006,2,c	;volsfr
  3477                           
  3478                           ;memory.c: 176: INTCONbits.GIE = 0;
  3479  0033A4  9EF2               	bcf	intcon,7,c	;volatile
  3480                           
  3481                           ;memory.c: 177: EECON2 = 0x55;
  3482  0033A6  0E55               	movlw	85
  3483  0033A8  6EA7               	movwf	4007,c	;volsfr
  3484                           
  3485                           ;memory.c: 178: EECON2 = 0xAA;
  3486  0033AA  0EAA               	movlw	170
  3487  0033AC  6EA7               	movwf	4007,c	;volsfr
  3488                           
  3489                           ;memory.c: 179: EECON1bits.WR = 1;
  3490  0033AE  82A6               	bsf	4006,1,c	;volsfr
  3491  0033B0                     
  3492                           ;memory.c: 182: {
  3493  0033B0  B2A6               	btfsc	4006,1,c	;volsfr
  3494  0033B2  D7FE               	goto	l965
  3495                           
  3496                           ;memory.c: 183: }
  3497                           ;memory.c: 185: EECON1bits.WREN = 0;
  3498  0033B4  94A6               	bcf	4006,2,c	;volsfr
  3499                           
  3500                           ;memory.c: 186: INTCONbits.GIE = GIEBitValue;
  3501  0033B6  B01A               	btfsc	DATAEE_WriteByte@GIEBitValue,0,c
  3502  0033B8  D002               	bra	u6655
  3503  0033BA  9EF2               	bcf	intcon,7,c	;volatile
  3504  0033BC  D001               	bra	u6656
  3505  0033BE                     u6655:
  3506  0033BE  8EF2               	bsf	intcon,7,c	;volatile
  3507  0033C0                     u6656:
  3508  0033C0  0012               	return		;funcret
  3509  0033C2                     __end_of_DATAEE_WriteByte:
  3510                           	opt stack 0
  3511                           tosu	equ	0xFFF
  3512                           tosh	equ	0xFFE
  3513                           tosl	equ	0xFFD
  3514                           pclath	equ	0xFFA
  3515                           tblptru	equ	0xFF8
  3516                           tblptrh	equ	0xFF7
  3517                           tblptrl	equ	0xFF6
  3518                           tablat	equ	0xFF5
  3519                           intcon	equ	0xFF2
  3520                           postinc0	equ	0xFEE
  3521                           plusw0	equ	0xFEB
  3522                           wreg	equ	0xFE8
  3523                           postdec1	equ	0xFE5
  3524                           fsr1l	equ	0xFE1
  3525                           indf2	equ	0xFDF
  3526                           postinc2	equ	0xFDE
  3527                           plusw2	equ	0xFDB
  3528                           fsr2h	equ	0xFDA
  3529                           fsr2l	equ	0xFD9
  3530                           status	equ	0xFD8
  3531                           
  3532 ;; *************** function _GetIntFromUartData *****************
  3533 ;; Defined at:
  3534 ;;		line 34 in file "SystemCommon.c"
  3535 ;; Parameters:    Size  Location     Type
  3536 ;;  num             1    wreg     char 
  3537 ;;  data            2    6[BANK0 ] PTR unsigned char 
  3538 ;; Auto vars:     Size  Location     Type
  3539 ;;  num             1   26[BANK0 ] char 
  3540 ;;  idxCon          2   36[BANK0 ] int 
  3541 ;;  dataRegArr     10   16[BANK0 ] unsigned char [10]
  3542 ;;  retVal          8   28[BANK0 ] struct .
  3543 ;;  idxData         1   38[BANK0 ] unsigned char 
  3544 ;;  recVal          1   27[BANK0 ] unsigned char 
  3545 ;; Return value:  Size  Location     Type
  3546 ;;                  8    6[BANK0 ] struct .
  3547 ;; Registers used:
  3548 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3549 ;; Tracked objects:
  3550 ;;		On entry : 0/0
  3551 ;;		On exit  : 0/0
  3552 ;;		Unchanged: 0/0
  3553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3554 ;;      Params:         0       8       0       0       0       0       0
  3555 ;;      Locals:         0      23       0       0       0       0       0
  3556 ;;      Temps:          0       2       0       0       0       0       0
  3557 ;;      Totals:         0      33       0       0       0       0       0
  3558 ;;Total ram usage:       33 bytes
  3559 ;; Hardware stack levels used:    1
  3560 ;; Hardware stack levels required when called:    6
  3561 ;; This function calls:
  3562 ;;		_ZeroArray
  3563 ;;		_strtol
  3564 ;; This function is called by:
  3565 ;;		_UpdateTxFreq
  3566 ;; This function uses a non-reentrant model
  3567 ;;
  3568                           
  3569                           	psect	text13
  3570  00138E                     __ptext13:
  3571                           	opt stack 0
  3572  00138E                     _GetIntFromUartData:
  3573                           	opt stack 21
  3574                           
  3575                           ;incstack = 0
  3576                           ;GetIntFromUartData@num stored from wreg
  3577  00138E  0100               	movlb	0	; () banked
  3578  001390  6F7A               	movwf	GetIntFromUartData@num& (0+255),b
  3579                           
  3580                           ;SystemCommon.c: 36: INT_VAL retVal;
  3581                           ;SystemCommon.c: 37: retVal.num = 0;
  3582  001392  0E00               	movlw	0
  3583  001394  0100               	movlb	0	; () banked
  3584  001396  6F7C               	movwf	GetIntFromUartData@retVal& (0+255),b
  3585  001398  0E00               	movlw	0
  3586  00139A  6F7D               	movwf	(GetIntFromUartData@retVal+1)& (0+255),b
  3587  00139C  0E00               	movlw	0
  3588  00139E  6F7E               	movwf	(GetIntFromUartData@retVal+2)& (0+255),b
  3589  0013A0  0E00               	movlw	0
  3590  0013A2  6F7F               	movwf	(GetIntFromUartData@retVal+3)& (0+255),b
  3591                           
  3592                           ;SystemCommon.c: 38: retVal.con = 0;
  3593  0013A4  0E00               	movlw	0
  3594  0013A6  6F80               	movwf	(GetIntFromUartData@retVal+4)& (0+255),b
  3595  0013A8  0E00               	movlw	0
  3596  0013AA  6F81               	movwf	(GetIntFromUartData@retVal+5)& (0+255),b
  3597  0013AC  0E00               	movlw	0
  3598  0013AE  6F82               	movwf	(GetIntFromUartData@retVal+6)& (0+255),b
  3599  0013B0  0E00               	movlw	0
  3600  0013B2  6F83               	movwf	(GetIntFromUartData@retVal+7)& (0+255),b
  3601                           
  3602                           ;SystemCommon.c: 39: uint8_t idxData = 0;
  3603  0013B4  0E00               	movlw	0
  3604  0013B6  6F86               	movwf	GetIntFromUartData@idxData& (0+255),b
  3605                           
  3606                           ;SystemCommon.c: 40: char recVal = (0);
  3607  0013B8  0E00               	movlw	0
  3608  0013BA  6F7B               	movwf	GetIntFromUartData@recVal& (0+255),b
  3609                           
  3610                           ; BSR set to: 0
  3611                           ;SystemCommon.c: 42: char dataRegArr[0xA];
  3612                           ;SystemCommon.c: 43: ZeroArray(dataRegArr, 0xA);
  3613  0013BC  0E70               	movlw	low GetIntFromUartData@dataRegArr
  3614  0013BE  6E20               	movwf	ZeroArray@array,c
  3615  0013C0  0E00               	movlw	high GetIntFromUartData@dataRegArr
  3616  0013C2  6E21               	movwf	ZeroArray@array+1,c
  3617  0013C4  0E00               	movlw	0
  3618  0013C6  6E23               	movwf	ZeroArray@size+1,c
  3619  0013C8  0E0A               	movlw	10
  3620  0013CA  6E22               	movwf	ZeroArray@size,c
  3621  0013CC  ECC8  F01B         	call	_ZeroArray	;wreg free
  3622                           
  3623                           ;SystemCommon.c: 45: for(idxData = 0; idxData < 0xA; idxData++)
  3624  0013D0  0E00               	movlw	0
  3625  0013D2  0100               	movlb	0	; () banked
  3626  0013D4  6F86               	movwf	GetIntFromUartData@idxData& (0+255),b
  3627  0013D6                     l7506:
  3628                           
  3629                           ; BSR set to: 0
  3630  0013D6  0E09               	movlw	9
  3631  0013D8  6586               	cpfsgt	GetIntFromUartData@idxData& (0+255),b
  3632  0013DA  D001               	goto	l1297
  3633  0013DC  D01D               	goto	u7570
  3634  0013DE                     l1297:
  3635                           
  3636                           ; BSR set to: 0
  3637                           ;SystemCommon.c: 46: {
  3638                           ;SystemCommon.c: 47: recVal = data[idxData];
  3639                           
  3640                           ; BSR set to: 0
  3641  0013DE  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  3642  0013E0  0D01               	mullw	1
  3643  0013E2  50F3               	movf	prodl,w,c
  3644  0013E4  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  3645  0013E6  6ED9               	movwf	fsr2l,c
  3646  0013E8  50F4               	movf	prodh,w,c
  3647  0013EA  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  3648  0013EC  6EDA               	movwf	fsr2h,c
  3649  0013EE  50DF               	movf	indf2,w,c
  3650  0013F0  6F7B               	movwf	GetIntFromUartData@recVal& (0+255),b
  3651                           
  3652                           ; BSR set to: 0
  3653                           ;SystemCommon.c: 48: if(recVal == 0x10)
  3654  0013F2  0E10               	movlw	16
  3655  0013F4  197B               	xorwf	GetIntFromUartData@recVal& (0+255),w,b
  3656  0013F6  A4D8               	btfss	status,2,c
  3657  0013F8  D002               	goto	l1299
  3658                           
  3659                           ; BSR set to: 0
  3660                           ;SystemCommon.c: 49: {
  3661                           ;SystemCommon.c: 50: idxData++;
  3662  0013FA  2B86               	incf	GetIntFromUartData@idxData& (0+255),f,b
  3663                           
  3664                           ;SystemCommon.c: 51: break;
  3665  0013FC  D00D               	goto	u7570
  3666  0013FE                     l1299:
  3667                           
  3668                           ; BSR set to: 0
  3669                           ;SystemCommon.c: 53: else
  3670                           ;SystemCommon.c: 54: {
  3671                           ;SystemCommon.c: 55: dataRegArr[idxData] = recVal + '0';
  3672                           
  3673                           ; BSR set to: 0
  3674  0013FE  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  3675  001400  0D01               	mullw	1
  3676  001402  0E70               	movlw	low GetIntFromUartData@dataRegArr
  3677  001404  24F3               	addwf	prodl,w,c
  3678  001406  6ED9               	movwf	fsr2l,c
  3679  001408  0E00               	movlw	high GetIntFromUartData@dataRegArr
  3680  00140A  20F4               	addwfc	prodh,w,c
  3681  00140C  6EDA               	movwf	fsr2h,c
  3682  00140E  517B               	movf	GetIntFromUartData@recVal& (0+255),w,b
  3683  001410  0F30               	addlw	48
  3684  001412  6EDF               	movwf	indf2,c
  3685                           
  3686                           ; BSR set to: 0
  3687                           
  3688                           ; BSR set to: 0
  3689  001414  2B86               	incf	GetIntFromUartData@idxData& (0+255),f,b
  3690  001416  D7DF               	goto	l7506
  3691  001418                     u7570:
  3692                           
  3693                           ; BSR set to: 0
  3694                           ;SystemCommon.c: 56: }
  3695                           ;SystemCommon.c: 57: }
  3696                           ;SystemCommon.c: 58: retVal.num = strtol(dataRegArr, (0), num);
  3697                           
  3698                           ; BSR set to: 0
  3699  001418  0E70               	movlw	low GetIntFromUartData@dataRegArr
  3700  00141A  6E26               	movwf	strtol@s,c
  3701  00141C  0E00               	movlw	high GetIntFromUartData@dataRegArr
  3702  00141E  6E27               	movwf	strtol@s+1,c
  3703  001420  0E00               	movlw	0
  3704  001422  6E28               	movwf	strtol@endptr,c
  3705  001424  0E00               	movlw	0
  3706  001426  6E29               	movwf	strtol@endptr+1,c
  3707  001428  517A               	movf	GetIntFromUartData@num& (0+255),w,b
  3708  00142A  6E2A               	movwf	strtol@base,c
  3709  00142C  6A2B               	clrf	strtol@base+1,c
  3710  00142E  BE2A               	btfsc	strtol@base,7,c
  3711  001430  062B               	decf	strtol@base+1,f,c
  3712  001432  EC2A  F007         	call	_strtol	;wreg free
  3713  001436  C026  F07C         	movff	?_strtol,GetIntFromUartData@retVal
  3714  00143A  C027  F07D         	movff	?_strtol+1,GetIntFromUartData@retVal+1
  3715  00143E  C028  F07E         	movff	?_strtol+2,GetIntFromUartData@retVal+2
  3716  001442  C029  F07F         	movff	?_strtol+3,GetIntFromUartData@retVal+3
  3717                           
  3718                           ;SystemCommon.c: 60: ZeroArray(dataRegArr, 0xA);
  3719  001446  0E70               	movlw	low GetIntFromUartData@dataRegArr
  3720  001448  6E20               	movwf	ZeroArray@array,c
  3721  00144A  0E00               	movlw	high GetIntFromUartData@dataRegArr
  3722  00144C  6E21               	movwf	ZeroArray@array+1,c
  3723  00144E  0E00               	movlw	0
  3724  001450  6E23               	movwf	ZeroArray@size+1,c
  3725  001452  0E0A               	movlw	10
  3726  001454  6E22               	movwf	ZeroArray@size,c
  3727  001456  ECC8  F01B         	call	_ZeroArray	;wreg free
  3728                           
  3729                           ;SystemCommon.c: 62: for(int idxCon = 0; idxCon < 0xA; idxCon++)
  3730  00145A  0E00               	movlw	0
  3731  00145C  0100               	movlb	0	; () banked
  3732  00145E  6F85               	movwf	(GetIntFromUartData@idxCon+1)& (0+255),b
  3733  001460  0E00               	movlw	0
  3734  001462  6F84               	movwf	GetIntFromUartData@idxCon& (0+255),b
  3735  001464                     l7528:
  3736                           
  3737                           ; BSR set to: 0
  3738  001464  BF85               	btfsc	(GetIntFromUartData@idxCon+1)& (0+255),7,b
  3739  001466  D006               	goto	l1301
  3740  001468  5185               	movf	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  3741  00146A  E12E               	bnz	l7546
  3742  00146C  0E0A               	movlw	10
  3743  00146E  5D84               	subwf	GetIntFromUartData@idxCon& (0+255),w,b
  3744  001470  B0D8               	btfsc	status,0,c
  3745  001472  D02A               	goto	u7600
  3746  001474                     l1301:
  3747                           
  3748                           ; BSR set to: 0
  3749                           ;SystemCommon.c: 63: {
  3750                           ;SystemCommon.c: 64: recVal = data[idxData + idxCon];
  3751                           
  3752                           ; BSR set to: 0
  3753  001474  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  3754  001476  2584               	addwf	GetIntFromUartData@idxCon& (0+255),w,b
  3755  001478  6F6E               	movwf	??_GetIntFromUartData& (0+255),b
  3756  00147A  0E00               	movlw	0
  3757  00147C  2185               	addwfc	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  3758  00147E  6F6F               	movwf	(??_GetIntFromUartData+1)& (0+255),b
  3759  001480  516E               	movf	??_GetIntFromUartData& (0+255),w,b
  3760  001482  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  3761  001484  6ED9               	movwf	fsr2l,c
  3762  001486  516F               	movf	(??_GetIntFromUartData+1)& (0+255),w,b
  3763  001488  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  3764  00148A  6EDA               	movwf	fsr2h,c
  3765  00148C  50DF               	movf	indf2,w,c
  3766  00148E  6F7B               	movwf	GetIntFromUartData@recVal& (0+255),b
  3767                           
  3768                           ; BSR set to: 0
  3769                           ;SystemCommon.c: 65: if(recVal == 0x23)
  3770  001490  0E23               	movlw	35
  3771  001492  197B               	xorwf	GetIntFromUartData@recVal& (0+255),w,b
  3772  001494  B4D8               	btfsc	status,2,c
  3773  001496  D018               	goto	u7600
  3774                           
  3775                           ; BSR set to: 0
  3776                           ;SystemCommon.c: 69: else
  3777                           ;SystemCommon.c: 70: {
  3778                           ;SystemCommon.c: 71: dataRegArr[idxCon] = data[idxCon + idxData] + '0';
  3779                           
  3780                           ; BSR set to: 0
  3781                           
  3782                           ; BSR set to: 0
  3783                           ;SystemCommon.c: 68: }
  3784                           
  3785                           ; BSR set to: 0
  3786                           ;SystemCommon.c: 66: {
  3787                           ;SystemCommon.c: 67: break;
  3788  001498  0E70               	movlw	low GetIntFromUartData@dataRegArr
  3789  00149A  2584               	addwf	GetIntFromUartData@idxCon& (0+255),w,b
  3790  00149C  6ED9               	movwf	fsr2l,c
  3791  00149E  0E00               	movlw	high GetIntFromUartData@dataRegArr
  3792  0014A0  2185               	addwfc	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  3793  0014A2  6EDA               	movwf	fsr2h,c
  3794  0014A4  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  3795  0014A6  2584               	addwf	GetIntFromUartData@idxCon& (0+255),w,b
  3796  0014A8  6F6E               	movwf	??_GetIntFromUartData& (0+255),b
  3797  0014AA  0E00               	movlw	0
  3798  0014AC  2185               	addwfc	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  3799  0014AE  6F6F               	movwf	(??_GetIntFromUartData+1)& (0+255),b
  3800  0014B0  516E               	movf	??_GetIntFromUartData& (0+255),w,b
  3801  0014B2  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  3802  0014B4  6EE1               	movwf	fsr1l,c
  3803  0014B6  516F               	movf	(??_GetIntFromUartData+1)& (0+255),w,b
  3804  0014B8  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  3805  0014BA  6EE2               	movwf	fsr1h,c
  3806  0014BC  50E7               	movf	indf1,w,c
  3807  0014BE  0F30               	addlw	48
  3808  0014C0  6EDF               	movwf	indf2,c
  3809                           
  3810                           ; BSR set to: 0
  3811                           
  3812                           ; BSR set to: 0
  3813  0014C2  4B84               	infsnz	GetIntFromUartData@idxCon& (0+255),f,b
  3814  0014C4  2B85               	incf	(GetIntFromUartData@idxCon+1)& (0+255),f,b
  3815  0014C6  D7CE               	goto	l7528
  3816  0014C8                     u7600:
  3817  0014C8                     l7546:
  3818                           
  3819                           ; BSR set to: 0
  3820                           ;SystemCommon.c: 72: }
  3821                           ;SystemCommon.c: 73: }
  3822                           ;SystemCommon.c: 74: retVal.con = strtol(dataRegArr, (0), num);
  3823  0014C8  0E70               	movlw	low GetIntFromUartData@dataRegArr
  3824  0014CA  6E26               	movwf	strtol@s,c
  3825  0014CC  0E00               	movlw	high GetIntFromUartData@dataRegArr
  3826  0014CE  6E27               	movwf	strtol@s+1,c
  3827  0014D0  0E00               	movlw	0
  3828  0014D2  6E28               	movwf	strtol@endptr,c
  3829  0014D4  0E00               	movlw	0
  3830  0014D6  6E29               	movwf	strtol@endptr+1,c
  3831  0014D8  517A               	movf	GetIntFromUartData@num& (0+255),w,b
  3832  0014DA  6E2A               	movwf	strtol@base,c
  3833  0014DC  6A2B               	clrf	strtol@base+1,c
  3834  0014DE  BE2A               	btfsc	strtol@base,7,c
  3835  0014E0  062B               	decf	strtol@base+1,f,c
  3836  0014E2  EC2A  F007         	call	_strtol	;wreg free
  3837  0014E6  C026  F080         	movff	?_strtol,GetIntFromUartData@retVal+4
  3838  0014EA  C027  F081         	movff	?_strtol+1,GetIntFromUartData@retVal+5
  3839  0014EE  C028  F082         	movff	?_strtol+2,GetIntFromUartData@retVal+6
  3840  0014F2  C029  F083         	movff	?_strtol+3,GetIntFromUartData@retVal+7
  3841                           
  3842                           ;SystemCommon.c: 76: return retVal;
  3843  0014F6  EE20  F07C         	lfsr	2,GetIntFromUartData@retVal
  3844  0014FA  EE00  F066         	lfsr	0,?_GetIntFromUartData
  3845  0014FE  0E07               	movlw	7
  3846  001500                     u7611:
  3847  001500  CFDB FFEB          	movff	plusw2,plusw0
  3848  001504  06E8               	decf	wreg,f,c
  3849  001506  E2FC               	bc	u7611
  3850  001508  0012               	return	
  3851  00150A                     __end_of_GetIntFromUartData:
  3852                           	opt stack 0
  3853                           tosu	equ	0xFFF
  3854                           tosh	equ	0xFFE
  3855                           tosl	equ	0xFFD
  3856                           pclath	equ	0xFFA
  3857                           tblptru	equ	0xFF8
  3858                           tblptrh	equ	0xFF7
  3859                           tblptrl	equ	0xFF6
  3860                           tablat	equ	0xFF5
  3861                           prodh	equ	0xFF4
  3862                           prodl	equ	0xFF3
  3863                           intcon	equ	0xFF2
  3864                           postinc0	equ	0xFEE
  3865                           plusw0	equ	0xFEB
  3866                           wreg	equ	0xFE8
  3867                           indf1	equ	0xFE7
  3868                           postdec1	equ	0xFE5
  3869                           fsr1h	equ	0xFE2
  3870                           fsr1l	equ	0xFE1
  3871                           indf2	equ	0xFDF
  3872                           postinc2	equ	0xFDE
  3873                           plusw2	equ	0xFDB
  3874                           fsr2h	equ	0xFDA
  3875                           fsr2l	equ	0xFD9
  3876                           status	equ	0xFD8
  3877                           
  3878 ;; *************** function _strtol *****************
  3879 ;; Defined at:
  3880 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strtol.c"
  3881 ;; Parameters:    Size  Location     Type
  3882 ;;  s               2   37[COMRAM] PTR const unsigned char 
  3883 ;;		 -> GetIntFromUartData@dataRegArr(10), 
  3884 ;;  endptr          2   39[COMRAM] PTR PTR unsigned char 
  3885 ;;		 -> NULL(0), 
  3886 ;;  base            2   41[COMRAM] int 
  3887 ;; Auto vars:     Size  Location     Type
  3888 ;;  a               4    1[BANK0 ] long 
  3889 ;;  c               1    5[BANK0 ] unsigned char 
  3890 ;;  sign            1    0[BANK0 ] unsigned char 
  3891 ;; Return value:  Size  Location     Type
  3892 ;;                  4   37[COMRAM] long 
  3893 ;; Registers used:
  3894 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3895 ;; Tracked objects:
  3896 ;;		On entry : 0/0
  3897 ;;		On exit  : 0/0
  3898 ;;		Unchanged: 0/0
  3899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3900 ;;      Params:         6       0       0       0       0       0       0
  3901 ;;      Locals:         0       6       0       0       0       0       0
  3902 ;;      Temps:          4       0       0       0       0       0       0
  3903 ;;      Totals:        10       6       0       0       0       0       0
  3904 ;;Total ram usage:       16 bytes
  3905 ;; Hardware stack levels used:    1
  3906 ;; Hardware stack levels required when called:    5
  3907 ;; This function calls:
  3908 ;;		___lmul
  3909 ;;		_isalpha
  3910 ;;		_isdigit
  3911 ;;		_isspace
  3912 ;;		_toupper
  3913 ;; This function is called by:
  3914 ;;		_GetIntFromUartData
  3915 ;; This function uses a non-reentrant model
  3916 ;;
  3917                           
  3918                           	psect	text14
  3919  000E54                     __ptext14:
  3920                           	opt stack 0
  3921  000E54                     _strtol:
  3922                           	opt stack 21
  3923                           
  3924                           ;incstack = 0
  3925  000E54  C026  FFD9         	movff	strtol@s,fsr2l
  3926  000E58  C027  FFDA         	movff	strtol@s+1,fsr2h
  3927  000E5C  50DF               	movf	indf2,w,c
  3928  000E5E  0100               	movlb	0	; () banked
  3929  000E60  6F65               	movwf	strtol@c& (0+255),b
  3930                           
  3931                           ; BSR set to: 0
  3932  000E62  4A26               	infsnz	strtol@s,f,c
  3933  000E64  2A27               	incf	strtol@s+1,f,c
  3934                           
  3935                           ; BSR set to: 0
  3936  000E66  5165               	movf	strtol@c& (0+255),w,b
  3937  000E68  EC2C  F01B         	call	_isspace
  3938  000E6C  B0D8               	btfsc	status,0,c
  3939  000E6E  D7F2               	goto	_strtol
  3940  000E70  0E00               	movlw	0
  3941  000E72  0100               	movlb	0	; () banked
  3942  000E74  6F61               	movwf	strtol@a& (0+255),b
  3943  000E76  0E00               	movlw	0
  3944  000E78  6F62               	movwf	(strtol@a+1)& (0+255),b
  3945  000E7A  0E00               	movlw	0
  3946  000E7C  6F63               	movwf	(strtol@a+2)& (0+255),b
  3947  000E7E  0E00               	movlw	0
  3948  000E80  6F64               	movwf	(strtol@a+3)& (0+255),b
  3949  000E82  0E00               	movlw	0
  3950  000E84  6F60               	movwf	strtol@sign& (0+255),b
  3951                           
  3952                           ; BSR set to: 0
  3953  000E86  0E2D               	movlw	45
  3954  000E88  1965               	xorwf	strtol@c& (0+255),w,b
  3955  000E8A  A4D8               	btfss	status,2,c
  3956  000E8C  D003               	goto	l2044
  3957                           
  3958                           ; BSR set to: 0
  3959  000E8E  0E01               	movlw	1
  3960  000E90  6F60               	movwf	strtol@sign& (0+255),b
  3961  000E92  D004               	goto	u7180
  3962  000E94                     l2044:
  3963                           
  3964                           ; BSR set to: 0
  3965                           
  3966                           ; BSR set to: 0
  3967  000E94  0E2B               	movlw	43
  3968  000E96  1965               	xorwf	strtol@c& (0+255),w,b
  3969  000E98  A4D8               	btfss	status,2,c
  3970  000E9A  D008               	goto	l2046
  3971  000E9C                     u7180:
  3972                           
  3973                           ; BSR set to: 0
  3974  000E9C  C026  FFD9         	movff	strtol@s,fsr2l
  3975  000EA0  C027  FFDA         	movff	strtol@s+1,fsr2h
  3976  000EA4  50DF               	movf	indf2,w,c
  3977  000EA6  6F65               	movwf	strtol@c& (0+255),b
  3978                           
  3979                           ; BSR set to: 0
  3980  000EA8  4A26               	infsnz	strtol@s,f,c
  3981  000EAA  2A27               	incf	strtol@s+1,f,c
  3982  000EAC                     l2046:
  3983                           
  3984                           ; BSR set to: 0
  3985                           
  3986                           ; BSR set to: 0
  3987                           
  3988                           ; BSR set to: 0
  3989  000EAC  0E30               	movlw	48
  3990  000EAE  1965               	xorwf	strtol@c& (0+255),w,b
  3991  000EB0  A4D8               	btfss	status,2,c
  3992  000EB2  D02E               	goto	l2054
  3993                           
  3994                           ; BSR set to: 0
  3995  000EB4  C026  FFD9         	movff	strtol@s,fsr2l
  3996  000EB8  C027  FFDA         	movff	strtol@s+1,fsr2h
  3997  000EBC  50DF               	movf	indf2,w,c
  3998  000EBE  6F65               	movwf	strtol@c& (0+255),b
  3999                           
  4000                           ; BSR set to: 0
  4001  000EC0  4A26               	infsnz	strtol@s,f,c
  4002  000EC2  2A27               	incf	strtol@s+1,f,c
  4003                           
  4004                           ; BSR set to: 0
  4005  000EC4  502A               	movf	strtol@base,w,c
  4006  000EC6  102B               	iorwf	strtol@base+1,w,c
  4007  000EC8  B4D8               	btfsc	status,2,c
  4008  000ECA  D005               	goto	u7210
  4009                           
  4010                           ; BSR set to: 0
  4011  000ECC  0E10               	movlw	16
  4012  000ECE  182A               	xorwf	strtol@base,w,c
  4013  000ED0  102B               	iorwf	strtol@base+1,w,c
  4014  000ED2  A4D8               	btfss	status,2,c
  4015  000ED4  D015               	goto	l2048
  4016  000ED6                     u7210:
  4017                           
  4018                           ; BSR set to: 0
  4019                           
  4020                           ; BSR set to: 0
  4021  000ED6  0E78               	movlw	120
  4022  000ED8  1965               	xorwf	strtol@c& (0+255),w,b
  4023  000EDA  B4D8               	btfsc	status,2,c
  4024  000EDC  D004               	goto	u7230
  4025                           
  4026                           ; BSR set to: 0
  4027  000EDE  0E58               	movlw	88
  4028  000EE0  1965               	xorwf	strtol@c& (0+255),w,b
  4029  000EE2  A4D8               	btfss	status,2,c
  4030  000EE4  D00D               	goto	l2048
  4031  000EE6                     u7230:
  4032                           
  4033                           ; BSR set to: 0
  4034                           
  4035                           ; BSR set to: 0
  4036  000EE6  0E00               	movlw	0
  4037  000EE8  6E2B               	movwf	strtol@base+1,c
  4038  000EEA  0E10               	movlw	16
  4039  000EEC  6E2A               	movwf	strtol@base,c
  4040                           
  4041                           ; BSR set to: 0
  4042  000EEE  C026  FFD9         	movff	strtol@s,fsr2l
  4043  000EF2  C027  FFDA         	movff	strtol@s+1,fsr2h
  4044  000EF6  50DF               	movf	indf2,w,c
  4045  000EF8  6F65               	movwf	strtol@c& (0+255),b
  4046                           
  4047                           ; BSR set to: 0
  4048  000EFA  4A26               	infsnz	strtol@s,f,c
  4049  000EFC  2A27               	incf	strtol@s+1,f,c
  4050  000EFE  D008               	goto	l2054
  4051  000F00                     l2048:
  4052                           
  4053                           ; BSR set to: 0
  4054                           
  4055                           ; BSR set to: 0
  4056  000F00  502A               	movf	strtol@base,w,c
  4057  000F02  102B               	iorwf	strtol@base+1,w,c
  4058  000F04  A4D8               	btfss	status,2,c
  4059  000F06  D004               	goto	l2054
  4060                           
  4061                           ; BSR set to: 0
  4062  000F08  0E00               	movlw	0
  4063  000F0A  6E2B               	movwf	strtol@base+1,c
  4064  000F0C  0E08               	movlw	8
  4065  000F0E  6E2A               	movwf	strtol@base,c
  4066  000F10                     l2054:
  4067                           
  4068                           ; BSR set to: 0
  4069                           
  4070                           ; BSR set to: 0
  4071                           
  4072                           ; BSR set to: 0
  4073                           
  4074                           ; BSR set to: 0
  4075  000F10  502A               	movf	strtol@base,w,c
  4076  000F12  102B               	iorwf	strtol@base+1,w,c
  4077  000F14  A4D8               	btfss	status,2,c
  4078  000F16  D004               	goto	l2055
  4079                           
  4080                           ; BSR set to: 0
  4081  000F18  0E00               	movlw	0
  4082  000F1A  6E2B               	movwf	strtol@base+1,c
  4083  000F1C  0E0A               	movlw	10
  4084  000F1E  6E2A               	movwf	strtol@base,c
  4085  000F20                     l2055:
  4086                           
  4087                           ; BSR set to: 0
  4088                           
  4089                           ; BSR set to: 0
  4090                           
  4091                           ; BSR set to: 0
  4092  000F20  5165               	movf	strtol@c& (0+255),w,b
  4093  000F22  EC04  F01B         	call	_isalpha
  4094  000F26  A0D8               	btfss	status,0,c
  4095  000F28  D008               	goto	l2057
  4096  000F2A  0100               	movlb	0	; () banked
  4097  000F2C  5165               	movf	strtol@c& (0+255),w,b
  4098  000F2E  EC23  F01C         	call	_toupper
  4099  000F32  0FC9               	addlw	201
  4100  000F34  0100               	movlb	0	; () banked
  4101  000F36  6F65               	movwf	strtol@c& (0+255),b
  4102  000F38  D009               	goto	l2060
  4103  000F3A                     l2057:
  4104                           
  4105                           ; BSR set to: 0
  4106  000F3A  0100               	movlb	0	; () banked
  4107  000F3C  5165               	movf	strtol@c& (0+255),w,b
  4108  000F3E  ECAA  F01B         	call	_isdigit
  4109  000F42  A0D8               	btfss	status,0,c
  4110  000F44  D039               	goto	l2061
  4111  000F46  0E30               	movlw	48
  4112  000F48  0100               	movlb	0	; () banked
  4113  000F4A  5F65               	subwf	strtol@c& (0+255),f,b
  4114  000F4C                     l2060:
  4115                           
  4116                           ; BSR set to: 0
  4117                           
  4118                           ; BSR set to: 0
  4119                           
  4120                           ; BSR set to: 0
  4121  000F4C  5165               	movf	strtol@c& (0+255),w,b
  4122  000F4E  6E2C               	movwf	??_strtol& (0+255),c
  4123  000F50  6A2D               	clrf	(??_strtol+1)& (0+255),c
  4124  000F52  502A               	movf	strtol@base,w,c
  4125  000F54  5C2C               	subwf	??_strtol,w,c
  4126  000F56  502D               	movf	??_strtol+1,w,c
  4127  000F58  0A80               	xorlw	128
  4128  000F5A  6E2E               	movwf	(??_strtol+2)& (0+255),c
  4129  000F5C  502B               	movf	strtol@base+1,w,c
  4130  000F5E  0A80               	xorlw	128
  4131  000F60  582E               	subwfb	(??_strtol+2)& (0+255),w,c
  4132  000F62  B0D8               	btfsc	status,0,c
  4133  000F64  D029               	goto	l2061
  4134                           
  4135                           ; BSR set to: 0
  4136                           
  4137                           ; BSR set to: 0
  4138                           
  4139                           ; BSR set to: 0
  4140  000F66  C02A  F01A         	movff	strtol@base,___lmul@multiplier
  4141  000F6A  C02B  F01B         	movff	strtol@base+1,___lmul@multiplier+1
  4142  000F6E  0E00               	movlw	0
  4143  000F70  BE1B               	btfsc	___lmul@multiplier+1,7,c
  4144  000F72  0EFF               	movlw	-1
  4145  000F74  6E1C               	movwf	___lmul@multiplier+2,c
  4146  000F76  6E1D               	movwf	___lmul@multiplier+3,c
  4147  000F78  C061  F01E         	movff	strtol@a,___lmul@multiplicand
  4148  000F7C  C062  F01F         	movff	strtol@a+1,___lmul@multiplicand+1
  4149  000F80  C063  F020         	movff	strtol@a+2,___lmul@multiplicand+2
  4150  000F84  C064  F021         	movff	strtol@a+3,___lmul@multiplicand+3
  4151  000F88  EC38  F017         	call	___lmul	;wreg free
  4152  000F8C  0100               	movlb	0	; () banked
  4153  000F8E  5165               	movf	strtol@c& (0+255),w,b
  4154  000F90  241A               	addwf	?___lmul,w,c
  4155  000F92  6F61               	movwf	strtol@a& (0+255),b
  4156  000F94  0E00               	movlw	0
  4157  000F96  201B               	addwfc	?___lmul+1,w,c
  4158  000F98  6F62               	movwf	(strtol@a+1)& (0+255),b
  4159  000F9A  0E00               	movlw	0
  4160  000F9C  201C               	addwfc	?___lmul+2,w,c
  4161  000F9E  6F63               	movwf	(strtol@a+2)& (0+255),b
  4162  000FA0  0E00               	movlw	0
  4163  000FA2  201D               	addwfc	?___lmul+3,w,c
  4164  000FA4  6F64               	movwf	(strtol@a+3)& (0+255),b
  4165                           
  4166                           ; BSR set to: 0
  4167  000FA6  C026  FFD9         	movff	strtol@s,fsr2l
  4168  000FAA  C027  FFDA         	movff	strtol@s+1,fsr2h
  4169  000FAE  50DF               	movf	indf2,w,c
  4170  000FB0  6F65               	movwf	strtol@c& (0+255),b
  4171                           
  4172                           ; BSR set to: 0
  4173  000FB2  4A26               	infsnz	strtol@s,f,c
  4174  000FB4  2A27               	incf	strtol@s+1,f,c
  4175  000FB6  D7B4               	goto	l2055
  4176  000FB8                     l2061:
  4177                           
  4178                           ; BSR set to: 0
  4179  000FB8  5028               	movf	strtol@endptr,w,c
  4180  000FBA  1029               	iorwf	strtol@endptr+1,w,c
  4181  000FBC  B4D8               	btfsc	status,2,c
  4182  000FBE  D00E               	goto	l2063
  4183  000FC0  0EFF               	movlw	255
  4184  000FC2  2426               	addwf	strtol@s,w,c
  4185  000FC4  6E2C               	movwf	??_strtol& (0+255),c
  4186  000FC6  0EFF               	movlw	255
  4187  000FC8  2027               	addwfc	strtol@s+1,w,c
  4188  000FCA  6E2D               	movwf	(??_strtol+1)& (0+255),c
  4189  000FCC  C028  FFD9         	movff	strtol@endptr,fsr2l
  4190  000FD0  C029  FFDA         	movff	strtol@endptr+1,fsr2h
  4191  000FD4  C02C  FFDE         	movff	??_strtol,postinc2
  4192  000FD8  C02D  FFDD         	movff	??_strtol+1,postdec2
  4193  000FDC                     l2063:
  4194  000FDC  0100               	movlb	0	; () banked
  4195  000FDE  5160               	movf	strtol@sign& (0+255),w,b
  4196  000FE0  B4D8               	btfsc	status,2,c
  4197  000FE2  D01A               	goto	l2064
  4198                           
  4199                           ; BSR set to: 0
  4200  000FE4  C061  F02C         	movff	strtol@a,??_strtol
  4201  000FE8  C062  F02D         	movff	strtol@a+1,??_strtol+1
  4202  000FEC  C063  F02E         	movff	strtol@a+2,??_strtol+2
  4203  000FF0  C064  F02F         	movff	strtol@a+3,??_strtol+3
  4204  000FF4  1E2C               	comf	??_strtol,f,c
  4205  000FF6  1E2D               	comf	??_strtol+1,f,c
  4206  000FF8  1E2E               	comf	??_strtol+2,f,c
  4207  000FFA  1E2F               	comf	??_strtol+3,f,c
  4208  000FFC  2A2C               	incf	??_strtol,f,c
  4209  000FFE  0E00               	movlw	0
  4210  001000  222D               	addwfc	??_strtol+1,f,c
  4211  001002  222E               	addwfc	??_strtol+2,f,c
  4212  001004  222F               	addwfc	??_strtol+3,f,c
  4213  001006  C02C  F026         	movff	??_strtol,?_strtol
  4214  00100A  C02D  F027         	movff	??_strtol+1,?_strtol+1
  4215  00100E  C02E  F028         	movff	??_strtol+2,?_strtol+2
  4216  001012  C02F  F029         	movff	??_strtol+3,?_strtol+3
  4217                           
  4218                           ; BSR set to: 0
  4219  001016  0012               	return	
  4220  001018                     l2064:
  4221                           
  4222                           ; BSR set to: 0
  4223  001018  C061  F026         	movff	strtol@a,?_strtol
  4224  00101C  C062  F027         	movff	strtol@a+1,?_strtol+1
  4225  001020  C063  F028         	movff	strtol@a+2,?_strtol+2
  4226  001024  C064  F029         	movff	strtol@a+3,?_strtol+3
  4227                           
  4228                           ; BSR set to: 0
  4229  001028  0012               	return		;funcret
  4230  00102A                     __end_of_strtol:
  4231                           	opt stack 0
  4232                           tosu	equ	0xFFF
  4233                           tosh	equ	0xFFE
  4234                           tosl	equ	0xFFD
  4235                           pclath	equ	0xFFA
  4236                           tblptru	equ	0xFF8
  4237                           tblptrh	equ	0xFF7
  4238                           tblptrl	equ	0xFF6
  4239                           tablat	equ	0xFF5
  4240                           prodh	equ	0xFF4
  4241                           prodl	equ	0xFF3
  4242                           intcon	equ	0xFF2
  4243                           postinc0	equ	0xFEE
  4244                           plusw0	equ	0xFEB
  4245                           wreg	equ	0xFE8
  4246                           indf1	equ	0xFE7
  4247                           postdec1	equ	0xFE5
  4248                           fsr1h	equ	0xFE2
  4249                           fsr1l	equ	0xFE1
  4250                           indf2	equ	0xFDF
  4251                           postinc2	equ	0xFDE
  4252                           postdec2	equ	0xFDD
  4253                           plusw2	equ	0xFDB
  4254                           fsr2h	equ	0xFDA
  4255                           fsr2l	equ	0xFD9
  4256                           status	equ	0xFD8
  4257                           
  4258 ;; *************** function _toupper *****************
  4259 ;; Defined at:
  4260 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\toupper.c"
  4261 ;; Parameters:    Size  Location     Type
  4262 ;;  c               1    wreg     unsigned char 
  4263 ;; Auto vars:     Size  Location     Type
  4264 ;;  c               1   23[COMRAM] unsigned char 
  4265 ;; Return value:  Size  Location     Type
  4266 ;;                  1    wreg      unsigned char 
  4267 ;; Registers used:
  4268 ;;		wreg, status,2, status,0
  4269 ;; Tracked objects:
  4270 ;;		On entry : 0/0
  4271 ;;		On exit  : 0/0
  4272 ;;		Unchanged: 0/0
  4273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4274 ;;      Params:         0       0       0       0       0       0       0
  4275 ;;      Locals:         1       0       0       0       0       0       0
  4276 ;;      Temps:          0       0       0       0       0       0       0
  4277 ;;      Totals:         1       0       0       0       0       0       0
  4278 ;;Total ram usage:        1 bytes
  4279 ;; Hardware stack levels used:    1
  4280 ;; Hardware stack levels required when called:    3
  4281 ;; This function calls:
  4282 ;;		Nothing
  4283 ;; This function is called by:
  4284 ;;		_strtol
  4285 ;; This function uses a non-reentrant model
  4286 ;;
  4287                           
  4288                           	psect	text15
  4289  003846                     __ptext15:
  4290                           	opt stack 0
  4291  003846                     _toupper:
  4292                           	opt stack 22
  4293                           
  4294                           ; BSR set to: 0
  4295                           ;incstack = 0
  4296                           ;toupper@c stored from wreg
  4297  003846  6E18               	movwf	toupper@c,c
  4298  003848  0E7B               	movlw	123
  4299  00384A  6018               	cpfslt	toupper@c,c
  4300  00384C  D004               	goto	l2068
  4301  00384E  0E60               	movlw	96
  4302  003850  6418               	cpfsgt	toupper@c,c
  4303  003852  D001               	goto	l2068
  4304  003854  9A18               	bcf	toupper@c,5,c
  4305  003856                     l2068:
  4306  003856  5018               	movf	toupper@c,w,c
  4307  003858  0012               	return	
  4308  00385A                     __end_of_toupper:
  4309                           	opt stack 0
  4310                           tosu	equ	0xFFF
  4311                           tosh	equ	0xFFE
  4312                           tosl	equ	0xFFD
  4313                           pclath	equ	0xFFA
  4314                           tblptru	equ	0xFF8
  4315                           tblptrh	equ	0xFF7
  4316                           tblptrl	equ	0xFF6
  4317                           tablat	equ	0xFF5
  4318                           prodh	equ	0xFF4
  4319                           prodl	equ	0xFF3
  4320                           intcon	equ	0xFF2
  4321                           postinc0	equ	0xFEE
  4322                           plusw0	equ	0xFEB
  4323                           wreg	equ	0xFE8
  4324                           indf1	equ	0xFE7
  4325                           postdec1	equ	0xFE5
  4326                           fsr1h	equ	0xFE2
  4327                           fsr1l	equ	0xFE1
  4328                           indf2	equ	0xFDF
  4329                           postinc2	equ	0xFDE
  4330                           postdec2	equ	0xFDD
  4331                           plusw2	equ	0xFDB
  4332                           fsr2h	equ	0xFDA
  4333                           fsr2l	equ	0xFD9
  4334                           status	equ	0xFD8
  4335                           
  4336 ;; *************** function _isspace *****************
  4337 ;; Defined at:
  4338 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isspace.c"
  4339 ;; Parameters:    Size  Location     Type
  4340 ;;  c               1    wreg     unsigned char 
  4341 ;; Auto vars:     Size  Location     Type
  4342 ;;  c               1   25[COMRAM] unsigned char 
  4343 ;; Return value:  Size  Location     Type
  4344 ;;		None               void
  4345 ;; Registers used:
  4346 ;;		wreg, status,2, status,0
  4347 ;; Tracked objects:
  4348 ;;		On entry : 0/0
  4349 ;;		On exit  : 0/0
  4350 ;;		Unchanged: 0/0
  4351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4352 ;;      Params:         0       0       0       0       0       0       0
  4353 ;;      Locals:         2       0       0       0       0       0       0
  4354 ;;      Temps:          1       0       0       0       0       0       0
  4355 ;;      Totals:         3       0       0       0       0       0       0
  4356 ;;Total ram usage:        3 bytes
  4357 ;; Hardware stack levels used:    1
  4358 ;; Hardware stack levels required when called:    3
  4359 ;; This function calls:
  4360 ;;		Nothing
  4361 ;; This function is called by:
  4362 ;;		_strtol
  4363 ;; This function uses a non-reentrant model
  4364 ;;
  4365                           
  4366                           	psect	text16
  4367  003658                     __ptext16:
  4368                           	opt stack 0
  4369  003658                     _isspace:
  4370                           	opt stack 22
  4371                           
  4372                           ;incstack = 0
  4373                           ;isspace@c stored from wreg
  4374  003658  6E1A               	movwf	isspace@c,c
  4375  00365A  0E01               	movlw	1
  4376  00365C  6E19               	movwf	_isspace$3028,c
  4377  00365E  0E20               	movlw	32
  4378  003660  181A               	xorwf	isspace@c,w,c
  4379  003662  B4D8               	btfsc	status,2,c
  4380  003664  D008               	goto	l2150
  4381  003666  0E0E               	movlw	14
  4382  003668  601A               	cpfslt	isspace@c,c
  4383  00366A  D003               	goto	u6870
  4384  00366C  0E09               	movlw	9
  4385  00366E  601A               	cpfslt	isspace@c,c
  4386  003670  D002               	goto	l2150
  4387  003672                     u6870:
  4388  003672  0E00               	movlw	0
  4389  003674  6E19               	movwf	_isspace$3028,c
  4390  003676                     l2150:
  4391  003676  C019  F018         	movff	_isspace$3028,??_isspace
  4392  00367A  3018               	rrcf	??_isspace,w,c
  4393  00367C  0012               	return	
  4394  00367E                     __end_of_isspace:
  4395                           	opt stack 0
  4396                           tosu	equ	0xFFF
  4397                           tosh	equ	0xFFE
  4398                           tosl	equ	0xFFD
  4399                           pclath	equ	0xFFA
  4400                           tblptru	equ	0xFF8
  4401                           tblptrh	equ	0xFF7
  4402                           tblptrl	equ	0xFF6
  4403                           tablat	equ	0xFF5
  4404                           prodh	equ	0xFF4
  4405                           prodl	equ	0xFF3
  4406                           intcon	equ	0xFF2
  4407                           postinc0	equ	0xFEE
  4408                           plusw0	equ	0xFEB
  4409                           wreg	equ	0xFE8
  4410                           indf1	equ	0xFE7
  4411                           postdec1	equ	0xFE5
  4412                           fsr1h	equ	0xFE2
  4413                           fsr1l	equ	0xFE1
  4414                           indf2	equ	0xFDF
  4415                           postinc2	equ	0xFDE
  4416                           postdec2	equ	0xFDD
  4417                           plusw2	equ	0xFDB
  4418                           fsr2h	equ	0xFDA
  4419                           fsr2l	equ	0xFD9
  4420                           status	equ	0xFD8
  4421                           
  4422 ;; *************** function _isdigit *****************
  4423 ;; Defined at:
  4424 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  4425 ;; Parameters:    Size  Location     Type
  4426 ;;  c               1    wreg     unsigned char 
  4427 ;; Auto vars:     Size  Location     Type
  4428 ;;  c               1   25[COMRAM] unsigned char 
  4429 ;; Return value:  Size  Location     Type
  4430 ;;		None               void
  4431 ;; Registers used:
  4432 ;;		wreg, status,2, status,0
  4433 ;; Tracked objects:
  4434 ;;		On entry : 0/0
  4435 ;;		On exit  : 0/0
  4436 ;;		Unchanged: 0/0
  4437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4438 ;;      Params:         0       0       0       0       0       0       0
  4439 ;;      Locals:         2       0       0       0       0       0       0
  4440 ;;      Temps:          1       0       0       0       0       0       0
  4441 ;;      Totals:         3       0       0       0       0       0       0
  4442 ;;Total ram usage:        3 bytes
  4443 ;; Hardware stack levels used:    1
  4444 ;; Hardware stack levels required when called:    3
  4445 ;; This function calls:
  4446 ;;		Nothing
  4447 ;; This function is called by:
  4448 ;;		_strtol
  4449 ;; This function uses a non-reentrant model
  4450 ;;
  4451                           
  4452                           	psect	text17
  4453  003754                     __ptext17:
  4454                           	opt stack 0
  4455  003754                     _isdigit:
  4456                           	opt stack 22
  4457                           
  4458                           ;incstack = 0
  4459                           ;isdigit@c stored from wreg
  4460  003754  6E1A               	movwf	isdigit@c,c
  4461  003756  0E00               	movlw	0
  4462  003758  6E19               	movwf	_isdigit$3025,c
  4463  00375A  0E3A               	movlw	58
  4464  00375C  601A               	cpfslt	isdigit@c,c
  4465  00375E  D005               	goto	l2145
  4466  003760  0E2F               	movlw	47
  4467  003762  641A               	cpfsgt	isdigit@c,c
  4468  003764  D002               	goto	l2145
  4469  003766  0E01               	movlw	1
  4470  003768  6E19               	movwf	_isdigit$3025,c
  4471  00376A                     l2145:
  4472  00376A  C019  F018         	movff	_isdigit$3025,??_isdigit
  4473  00376E  3018               	rrcf	??_isdigit,w,c
  4474  003770  0012               	return	
  4475  003772                     __end_of_isdigit:
  4476                           	opt stack 0
  4477                           tosu	equ	0xFFF
  4478                           tosh	equ	0xFFE
  4479                           tosl	equ	0xFFD
  4480                           pclath	equ	0xFFA
  4481                           tblptru	equ	0xFF8
  4482                           tblptrh	equ	0xFF7
  4483                           tblptrl	equ	0xFF6
  4484                           tablat	equ	0xFF5
  4485                           prodh	equ	0xFF4
  4486                           prodl	equ	0xFF3
  4487                           intcon	equ	0xFF2
  4488                           postinc0	equ	0xFEE
  4489                           plusw0	equ	0xFEB
  4490                           wreg	equ	0xFE8
  4491                           indf1	equ	0xFE7
  4492                           postdec1	equ	0xFE5
  4493                           fsr1h	equ	0xFE2
  4494                           fsr1l	equ	0xFE1
  4495                           indf2	equ	0xFDF
  4496                           postinc2	equ	0xFDE
  4497                           postdec2	equ	0xFDD
  4498                           plusw2	equ	0xFDB
  4499                           fsr2h	equ	0xFDA
  4500                           fsr2l	equ	0xFD9
  4501                           status	equ	0xFD8
  4502                           
  4503 ;; *************** function _isalpha *****************
  4504 ;; Defined at:
  4505 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isalpha.c"
  4506 ;; Parameters:    Size  Location     Type
  4507 ;;  c               1    wreg     unsigned char 
  4508 ;; Auto vars:     Size  Location     Type
  4509 ;;  c               1   28[COMRAM] unsigned char 
  4510 ;; Return value:  Size  Location     Type
  4511 ;;		None               void
  4512 ;; Registers used:
  4513 ;;		wreg, status,2, status,0, cstack
  4514 ;; Tracked objects:
  4515 ;;		On entry : 0/0
  4516 ;;		On exit  : 0/0
  4517 ;;		Unchanged: 0/0
  4518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4519 ;;      Params:         0       0       0       0       0       0       0
  4520 ;;      Locals:         2       0       0       0       0       0       0
  4521 ;;      Temps:          1       0       0       0       0       0       0
  4522 ;;      Totals:         3       0       0       0       0       0       0
  4523 ;;Total ram usage:        3 bytes
  4524 ;; Hardware stack levels used:    1
  4525 ;; Hardware stack levels required when called:    4
  4526 ;; This function calls:
  4527 ;;		_isupper
  4528 ;; This function is called by:
  4529 ;;		_strtol
  4530 ;; This function uses a non-reentrant model
  4531 ;;
  4532                           
  4533                           	psect	text18
  4534  003608                     __ptext18:
  4535                           	opt stack 0
  4536  003608                     _isalpha:
  4537                           	opt stack 21
  4538                           
  4539                           ;incstack = 0
  4540                           ;isalpha@c stored from wreg
  4541  003608  6E1D               	movwf	isalpha@c,c
  4542  00360A  0E01               	movlw	1
  4543  00360C  6E1C               	movwf	_isalpha$3022,c
  4544  00360E  0E7B               	movlw	123
  4545  003610  601D               	cpfslt	isalpha@c,c
  4546  003612  D003               	goto	u6890
  4547  003614  0E61               	movlw	97
  4548  003616  601D               	cpfslt	isalpha@c,c
  4549  003618  D007               	goto	l2140
  4550  00361A                     u6890:
  4551  00361A  501D               	movf	isalpha@c,w,c
  4552  00361C  ECB9  F01B         	call	_isupper
  4553  003620  B0D8               	btfsc	status,0,c
  4554  003622  D002               	goto	l2140
  4555  003624  0E00               	movlw	0
  4556  003626  6E1C               	movwf	_isalpha$3022,c
  4557  003628                     l2140:
  4558  003628  C01C  F01B         	movff	_isalpha$3022,??_isalpha
  4559  00362C  301B               	rrcf	??_isalpha,w,c
  4560  00362E  0012               	return	
  4561  003630                     __end_of_isalpha:
  4562                           	opt stack 0
  4563                           tosu	equ	0xFFF
  4564                           tosh	equ	0xFFE
  4565                           tosl	equ	0xFFD
  4566                           pclath	equ	0xFFA
  4567                           tblptru	equ	0xFF8
  4568                           tblptrh	equ	0xFF7
  4569                           tblptrl	equ	0xFF6
  4570                           tablat	equ	0xFF5
  4571                           prodh	equ	0xFF4
  4572                           prodl	equ	0xFF3
  4573                           intcon	equ	0xFF2
  4574                           postinc0	equ	0xFEE
  4575                           plusw0	equ	0xFEB
  4576                           wreg	equ	0xFE8
  4577                           indf1	equ	0xFE7
  4578                           postdec1	equ	0xFE5
  4579                           fsr1h	equ	0xFE2
  4580                           fsr1l	equ	0xFE1
  4581                           indf2	equ	0xFDF
  4582                           postinc2	equ	0xFDE
  4583                           postdec2	equ	0xFDD
  4584                           plusw2	equ	0xFDB
  4585                           fsr2h	equ	0xFDA
  4586                           fsr2l	equ	0xFD9
  4587                           status	equ	0xFD8
  4588                           
  4589 ;; *************** function _isupper *****************
  4590 ;; Defined at:
  4591 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isupper.c"
  4592 ;; Parameters:    Size  Location     Type
  4593 ;;  c               1    wreg     unsigned char 
  4594 ;; Auto vars:     Size  Location     Type
  4595 ;;  c               1   25[COMRAM] unsigned char 
  4596 ;; Return value:  Size  Location     Type
  4597 ;;		None               void
  4598 ;; Registers used:
  4599 ;;		wreg, status,2, status,0
  4600 ;; Tracked objects:
  4601 ;;		On entry : 0/0
  4602 ;;		On exit  : 0/0
  4603 ;;		Unchanged: 0/0
  4604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4605 ;;      Params:         0       0       0       0       0       0       0
  4606 ;;      Locals:         2       0       0       0       0       0       0
  4607 ;;      Temps:          1       0       0       0       0       0       0
  4608 ;;      Totals:         3       0       0       0       0       0       0
  4609 ;;Total ram usage:        3 bytes
  4610 ;; Hardware stack levels used:    1
  4611 ;; Hardware stack levels required when called:    3
  4612 ;; This function calls:
  4613 ;;		Nothing
  4614 ;; This function is called by:
  4615 ;;		_isalpha
  4616 ;; This function uses a non-reentrant model
  4617 ;;
  4618                           
  4619                           	psect	text19
  4620  003772                     __ptext19:
  4621                           	opt stack 0
  4622  003772                     _isupper:
  4623                           	opt stack 21
  4624                           
  4625                           ;incstack = 0
  4626                           ;isupper@c stored from wreg
  4627  003772  6E1A               	movwf	isupper@c,c
  4628  003774  0E00               	movlw	0
  4629  003776  6E19               	movwf	_isupper$3031,c
  4630  003778  0E5B               	movlw	91
  4631  00377A  601A               	cpfslt	isupper@c,c
  4632  00377C  D005               	goto	l2155
  4633  00377E  0E40               	movlw	64
  4634  003780  641A               	cpfsgt	isupper@c,c
  4635  003782  D002               	goto	l2155
  4636  003784  0E01               	movlw	1
  4637  003786  6E19               	movwf	_isupper$3031,c
  4638  003788                     l2155:
  4639  003788  C019  F018         	movff	_isupper$3031,??_isupper
  4640  00378C  3018               	rrcf	??_isupper,w,c
  4641  00378E  0012               	return	
  4642  003790                     __end_of_isupper:
  4643                           	opt stack 0
  4644                           tosu	equ	0xFFF
  4645                           tosh	equ	0xFFE
  4646                           tosl	equ	0xFFD
  4647                           pclath	equ	0xFFA
  4648                           tblptru	equ	0xFF8
  4649                           tblptrh	equ	0xFF7
  4650                           tblptrl	equ	0xFF6
  4651                           tablat	equ	0xFF5
  4652                           prodh	equ	0xFF4
  4653                           prodl	equ	0xFF3
  4654                           intcon	equ	0xFF2
  4655                           postinc0	equ	0xFEE
  4656                           plusw0	equ	0xFEB
  4657                           wreg	equ	0xFE8
  4658                           indf1	equ	0xFE7
  4659                           postdec1	equ	0xFE5
  4660                           fsr1h	equ	0xFE2
  4661                           fsr1l	equ	0xFE1
  4662                           indf2	equ	0xFDF
  4663                           postinc2	equ	0xFDE
  4664                           postdec2	equ	0xFDD
  4665                           plusw2	equ	0xFDB
  4666                           fsr2h	equ	0xFDA
  4667                           fsr2l	equ	0xFD9
  4668                           status	equ	0xFD8
  4669                           
  4670 ;; *************** function _UpdateRxFreq *****************
  4671 ;; Defined at:
  4672 ;;		line 83 in file "SyntApp.c"
  4673 ;; Parameters:    Size  Location     Type
  4674 ;;  data            2   43[COMRAM] PTR unsigned char 
  4675 ;; Auto vars:     Size  Location     Type
  4676 ;;		None
  4677 ;; Return value:  Size  Location     Type
  4678 ;;                  1    wreg      void 
  4679 ;; Registers used:
  4680 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4681 ;; Tracked objects:
  4682 ;;		On entry : 0/0
  4683 ;;		On exit  : 0/0
  4684 ;;		Unchanged: 0/0
  4685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4686 ;;      Params:         2       0       0       0       0       0       0
  4687 ;;      Locals:         0       0       0       0       0       0       0
  4688 ;;      Temps:          0       0       0       0       0       0       0
  4689 ;;      Totals:         2       0       0       0       0       0       0
  4690 ;;Total ram usage:        2 bytes
  4691 ;; Hardware stack levels used:    1
  4692 ;; Hardware stack levels required when called:    6
  4693 ;; This function calls:
  4694 ;;		_SendAckMessage
  4695 ;; This function is called by:
  4696 ;;		_GroupSynthesizers
  4697 ;; This function uses a non-reentrant model
  4698 ;;
  4699                           
  4700                           	psect	text20
  4701  0036C8                     __ptext20:
  4702                           	opt stack 0
  4703  0036C8                     _UpdateRxFreq:
  4704                           	opt stack 22
  4705                           
  4706                           ;SyntApp.c: 85: if(cntRegUpdate < 7)
  4707                           
  4708                           ;incstack = 0
  4709  0036C8  0E07               	movlw	7
  4710  0036CA  603A               	cpfslt	_cntRegUpdate,c
  4711  0036CC  D007               	goto	l504
  4712                           
  4713                           ;SyntApp.c: 86: {
  4714                           ;SyntApp.c: 90: cntRegUpdate ++;
  4715  0036CE  2A3A               	incf	_cntRegUpdate,f,c
  4716                           
  4717                           ;SyntApp.c: 92: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_REQ_ANTHER_RX_R
      +                          EG);
  4718  0036D0  0E49               	movlw	73
  4719  0036D2  6E24               	movwf	SendAckMessage@inRequest,c
  4720  0036D4  0E04               	movlw	4
  4721  0036D6  EC8C  F017         	call	_SendAckMessage
  4722                           
  4723                           ;SyntApp.c: 93: }
  4724  0036DA  0012               	return	
  4725  0036DC                     l504:
  4726                           
  4727                           ;SyntApp.c: 94: else
  4728                           ;SyntApp.c: 95: {
  4729                           ;SyntApp.c: 96: cntRegUpdate = 0;
  4730  0036DC  0E00               	movlw	0
  4731  0036DE  6E3A               	movwf	_cntRegUpdate,c
  4732                           
  4733                           ;SyntApp.c: 97: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_UP_SET);
  4734  0036E0  0E43               	movlw	67
  4735  0036E2  6E24               	movwf	SendAckMessage@inRequest,c
  4736  0036E4  0E04               	movlw	4
  4737  0036E6  EC8C  F017         	call	_SendAckMessage
  4738  0036EA  0012               	return	
  4739  0036EC                     __end_of_UpdateRxFreq:
  4740                           	opt stack 0
  4741                           tosu	equ	0xFFF
  4742                           tosh	equ	0xFFE
  4743                           tosl	equ	0xFFD
  4744                           pclath	equ	0xFFA
  4745                           tblptru	equ	0xFF8
  4746                           tblptrh	equ	0xFF7
  4747                           tblptrl	equ	0xFF6
  4748                           tablat	equ	0xFF5
  4749                           prodh	equ	0xFF4
  4750                           prodl	equ	0xFF3
  4751                           intcon	equ	0xFF2
  4752                           postinc0	equ	0xFEE
  4753                           plusw0	equ	0xFEB
  4754                           wreg	equ	0xFE8
  4755                           indf1	equ	0xFE7
  4756                           postdec1	equ	0xFE5
  4757                           fsr1h	equ	0xFE2
  4758                           fsr1l	equ	0xFE1
  4759                           indf2	equ	0xFDF
  4760                           postinc2	equ	0xFDE
  4761                           postdec2	equ	0xFDD
  4762                           plusw2	equ	0xFDB
  4763                           fsr2h	equ	0xFDA
  4764                           fsr2l	equ	0xFD9
  4765                           status	equ	0xFD8
  4766                           
  4767 ;; *************** function _SynthReadData *****************
  4768 ;; Defined at:
  4769 ;;		line 137 in file "SyntApp.c"
  4770 ;; Parameters:    Size  Location     Type
  4771 ;;  data            2   35[COMRAM] PTR unsigned char 
  4772 ;; Auto vars:     Size  Location     Type
  4773 ;;  TxMsg          27    0[BANK0 ] unsigned char [27]
  4774 ;;  indx            1   27[BANK0 ] unsigned char 
  4775 ;; Return value:  Size  Location     Type
  4776 ;;                  1    wreg      void 
  4777 ;; Registers used:
  4778 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4779 ;; Tracked objects:
  4780 ;;		On entry : 0/0
  4781 ;;		On exit  : 0/0
  4782 ;;		Unchanged: 0/0
  4783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4784 ;;      Params:         2       0       0       0       0       0       0
  4785 ;;      Locals:         0      28       0       0       0       0       0
  4786 ;;      Temps:          0       0       0       0       0       0       0
  4787 ;;      Totals:         2      28       0       0       0       0       0
  4788 ;;Total ram usage:       30 bytes
  4789 ;; Hardware stack levels used:    1
  4790 ;; Hardware stack levels required when called:    5
  4791 ;; This function calls:
  4792 ;;		_WriteUartMessage
  4793 ;;		_ZeroArray
  4794 ;;		_crc8
  4795 ;; This function is called by:
  4796 ;;		_GroupSynthesizers
  4797 ;; This function uses a non-reentrant model
  4798 ;;
  4799                           
  4800                           	psect	text21
  4801  002A04                     __ptext21:
  4802                           	opt stack 0
  4803  002A04                     _SynthReadData:
  4804                           	opt stack 23
  4805                           
  4806                           ;SyntApp.c: 140: char TxMsg[22 + (0x4) + 1];
  4807                           ;SyntApp.c: 141: ZeroArray(TxMsg, 22 + (0x4) + 1);
  4808                           
  4809                           ;incstack = 0
  4810  002A04  0E60               	movlw	low SynthReadData@TxMsg
  4811  002A06  6E20               	movwf	ZeroArray@array,c
  4812  002A08  0E00               	movlw	high SynthReadData@TxMsg
  4813  002A0A  6E21               	movwf	ZeroArray@array+1,c
  4814  002A0C  0E00               	movlw	0
  4815  002A0E  6E23               	movwf	ZeroArray@size+1,c
  4816  002A10  0E1B               	movlw	27
  4817  002A12  6E22               	movwf	ZeroArray@size,c
  4818  002A14  ECC8  F01B         	call	_ZeroArray	;wreg free
  4819                           
  4820                           ;SyntApp.c: 144: TxMsg[(0)] = (0x24);
  4821  002A18  0E24               	movlw	36
  4822  002A1A  0100               	movlb	0	; () banked
  4823  002A1C  6F60               	movwf	SynthReadData@TxMsg& (0+255),b
  4824                           
  4825                           ; BSR set to: 0
  4826                           ;SyntApp.c: 145: TxMsg[(1)] = SYNTH_MSG;
  4827  002A1E  0E04               	movlw	4
  4828  002A20  6F61               	movwf	(SynthReadData@TxMsg+1)& (0+255),b
  4829                           
  4830                           ; BSR set to: 0
  4831                           ;SyntApp.c: 146: TxMsg[(3)] = 22;
  4832  002A22  0E16               	movlw	22
  4833  002A24  6F63               	movwf	(SynthReadData@TxMsg+3)& (0+255),b
  4834                           
  4835                           ; BSR set to: 0
  4836                           ;SyntApp.c: 148: uint8_t indx = data[0];
  4837  002A26  C024  FFD9         	movff	SynthReadData@data,fsr2l
  4838  002A2A  C025  FFDA         	movff	SynthReadData@data+1,fsr2h
  4839  002A2E  50DF               	movf	indf2,w,c
  4840  002A30  6F7B               	movwf	SynthReadData@indx& (0+255),b
  4841                           
  4842                           ; BSR set to: 0
  4843                           ;SyntApp.c: 149: if(indx == 0x0)
  4844  002A32  517B               	movf	SynthReadData@indx& (0+255),w,b
  4845  002A34  A4D8               	btfss	status,2,c
  4846  002A36  D002               	goto	l519
  4847                           
  4848                           ; BSR set to: 0
  4849                           ;SyntApp.c: 150: {
  4850                           ;SyntApp.c: 151: TxMsg[(2)] = SYNTH_UP_READ_DATA;
  4851  002A38  0E46               	movlw	70
  4852  002A3A  D001               	goto	L1
  4853  002A3C                     l519:
  4854                           
  4855                           ; BSR set to: 0
  4856                           ;SyntApp.c: 154: else
  4857                           ;SyntApp.c: 155: {
  4858                           ;SyntApp.c: 156: TxMsg[(2)] = SYNTH_DOWN_READ_DATA;
  4859                           
  4860                           ; BSR set to: 0
  4861  002A3C  0E47               	movlw	71
  4862  002A3E                     L1:
  4863  002A3E  6F62               	movwf	(SynthReadData@TxMsg+2)& (0+255),b
  4864                           
  4865                           ; BSR set to: 0
  4866                           ;SyntApp.c: 158: }
  4867                           ;SyntApp.c: 160: TxMsg[22 + (0x4)] = crc8(TxMsg, 22 + (0x4));
  4868                           
  4869                           ; BSR set to: 0
  4870  002A40  0E60               	movlw	low SynthReadData@TxMsg
  4871  002A42  6E18               	movwf	crc8@dataArray,c
  4872  002A44  0E00               	movlw	high SynthReadData@TxMsg
  4873  002A46  6E19               	movwf	crc8@dataArray+1,c
  4874  002A48  0E00               	movlw	0
  4875  002A4A  6E1B               	movwf	crc8@dataSize+1,c
  4876  002A4C  0E1A               	movlw	26
  4877  002A4E  6E1A               	movwf	crc8@dataSize,c
  4878  002A50  ECB5  F017         	call	_crc8	;wreg free
  4879  002A54  0100               	movlb	0	; () banked
  4880  002A56  6F7A               	movwf	(SynthReadData@TxMsg+26)& (0+255),b
  4881                           
  4882                           ; BSR set to: 0
  4883                           ;SyntApp.c: 161: WriteUartMessage(TxMsg, 22 + (0x4) + 1);
  4884  002A58  0E60               	movlw	low SynthReadData@TxMsg
  4885  002A5A  6E19               	movwf	WriteUartMessage@dataBuf,c
  4886  002A5C  0E00               	movlw	high SynthReadData@TxMsg
  4887  002A5E  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  4888  002A60  0E00               	movlw	0
  4889  002A62  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  4890  002A64  0E1B               	movlw	27
  4891  002A66  6E1B               	movwf	WriteUartMessage@dataSize,c
  4892  002A68  ECFC  F019         	call	_WriteUartMessage	;wreg free
  4893  002A6C  0012               	return		;funcret
  4894  002A6E                     __end_of_SynthReadData:
  4895                           	opt stack 0
  4896                           tosu	equ	0xFFF
  4897                           tosh	equ	0xFFE
  4898                           tosl	equ	0xFFD
  4899                           pclath	equ	0xFFA
  4900                           tblptru	equ	0xFF8
  4901                           tblptrh	equ	0xFF7
  4902                           tblptrl	equ	0xFF6
  4903                           tablat	equ	0xFF5
  4904                           prodh	equ	0xFF4
  4905                           prodl	equ	0xFF3
  4906                           intcon	equ	0xFF2
  4907                           postinc0	equ	0xFEE
  4908                           plusw0	equ	0xFEB
  4909                           wreg	equ	0xFE8
  4910                           indf1	equ	0xFE7
  4911                           postdec1	equ	0xFE5
  4912                           fsr1h	equ	0xFE2
  4913                           fsr1l	equ	0xFE1
  4914                           indf2	equ	0xFDF
  4915                           postinc2	equ	0xFDE
  4916                           postdec2	equ	0xFDD
  4917                           plusw2	equ	0xFDB
  4918                           fsr2h	equ	0xFDA
  4919                           fsr2l	equ	0xFD9
  4920                           status	equ	0xFD8
  4921                           
  4922 ;; *************** function _SetSynthTxOper *****************
  4923 ;; Defined at:
  4924 ;;		line 109 in file "SyntApp.c"
  4925 ;; Parameters:    Size  Location     Type
  4926 ;;		None
  4927 ;; Auto vars:     Size  Location     Type
  4928 ;;		None
  4929 ;; Return value:  Size  Location     Type
  4930 ;;                  1    wreg      void 
  4931 ;; Registers used:
  4932 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4933 ;; Tracked objects:
  4934 ;;		On entry : 0/0
  4935 ;;		On exit  : 0/0
  4936 ;;		Unchanged: 0/0
  4937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4938 ;;      Params:         0       0       0       0       0       0       0
  4939 ;;      Locals:         0       0       0       0       0       0       0
  4940 ;;      Temps:          0       0       0       0       0       0       0
  4941 ;;      Totals:         0       0       0       0       0       0       0
  4942 ;;Total ram usage:        0 bytes
  4943 ;; Hardware stack levels used:    1
  4944 ;; Hardware stack levels required when called:    8
  4945 ;; This function calls:
  4946 ;;		_InitTxSynth
  4947 ;;		_SendAckMessage
  4948 ;;		_SwSpi_Set_CE_Pin
  4949 ;; This function is called by:
  4950 ;;		_GroupSynthesizers
  4951 ;; This function uses a non-reentrant model
  4952 ;;
  4953                           
  4954                           	psect	text22
  4955  0034C6                     __ptext22:
  4956                           	opt stack 0
  4957  0034C6                     _SetSynthTxOper:
  4958                           	opt stack 20
  4959                           
  4960                           ;SyntApp.c: 111: SynthTxOper = !SynthTxOper;
  4961                           
  4962                           ;incstack = 0
  4963  0034C6  5045               	movf	_SynthTxOper,w,c
  4964  0034C8  A4D8               	btfss	status,2,c
  4965  0034CA  D002               	goto	u8050
  4966  0034CC  0E01               	movlw	1
  4967  0034CE  D001               	goto	u8060
  4968  0034D0                     u8050:
  4969  0034D0  0E00               	movlw	0
  4970  0034D2                     u8060:
  4971  0034D2  6E45               	movwf	_SynthTxOper,c
  4972                           
  4973                           ;SyntApp.c: 112: if(SynthTxOper)
  4974  0034D4  5045               	movf	_SynthTxOper,w,c
  4975  0034D6  B4D8               	btfsc	status,2,c
  4976  0034D8  D003               	goto	l509
  4977                           
  4978                           ;SyntApp.c: 113: {
  4979                           ;SyntApp.c: 114: InitTxSynth();
  4980  0034DA  ECDC  F017         	call	_InitTxSynth	;wreg free
  4981                           
  4982                           ;SyntApp.c: 115: }
  4983  0034DE  D005               	goto	l510
  4984  0034E0                     l509:
  4985                           
  4986                           ;SyntApp.c: 116: else
  4987                           ;SyntApp.c: 117: {
  4988                           ;SyntApp.c: 118: SwSpi_Set_CE_Pin(SYNTH_TX, 0);
  4989  0034E0  0E00               	movlw	0
  4990  0034E2  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  4991  0034E4  0E00               	movlw	0
  4992  0034E6  EC36  F019         	call	_SwSpi_Set_CE_Pin
  4993  0034EA                     l510:
  4994                           
  4995                           ;SyntApp.c: 119: }
  4996                           ;SyntApp.c: 120: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_DOWN_OPER);
  4997  0034EA  0E45               	movlw	69
  4998  0034EC  6E24               	movwf	SendAckMessage@inRequest,c
  4999  0034EE  0E04               	movlw	4
  5000  0034F0  EC8C  F017         	call	_SendAckMessage
  5001  0034F4  0012               	return		;funcret
  5002  0034F6                     __end_of_SetSynthTxOper:
  5003                           	opt stack 0
  5004                           tosu	equ	0xFFF
  5005                           tosh	equ	0xFFE
  5006                           tosl	equ	0xFFD
  5007                           pclath	equ	0xFFA
  5008                           tblptru	equ	0xFF8
  5009                           tblptrh	equ	0xFF7
  5010                           tblptrl	equ	0xFF6
  5011                           tablat	equ	0xFF5
  5012                           prodh	equ	0xFF4
  5013                           prodl	equ	0xFF3
  5014                           intcon	equ	0xFF2
  5015                           postinc0	equ	0xFEE
  5016                           plusw0	equ	0xFEB
  5017                           wreg	equ	0xFE8
  5018                           indf1	equ	0xFE7
  5019                           postdec1	equ	0xFE5
  5020                           fsr1h	equ	0xFE2
  5021                           fsr1l	equ	0xFE1
  5022                           indf2	equ	0xFDF
  5023                           postinc2	equ	0xFDE
  5024                           postdec2	equ	0xFDD
  5025                           plusw2	equ	0xFDB
  5026                           fsr2h	equ	0xFDA
  5027                           fsr2l	equ	0xFD9
  5028                           status	equ	0xFD8
  5029                           
  5030 ;; *************** function _SetSynthRxOper *****************
  5031 ;; Defined at:
  5032 ;;		line 123 in file "SyntApp.c"
  5033 ;; Parameters:    Size  Location     Type
  5034 ;;		None
  5035 ;; Auto vars:     Size  Location     Type
  5036 ;;		None
  5037 ;; Return value:  Size  Location     Type
  5038 ;;                  1    wreg      void 
  5039 ;; Registers used:
  5040 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5041 ;; Tracked objects:
  5042 ;;		On entry : 0/0
  5043 ;;		On exit  : 0/0
  5044 ;;		Unchanged: 0/0
  5045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5046 ;;      Params:         0       0       0       0       0       0       0
  5047 ;;      Locals:         0       0       0       0       0       0       0
  5048 ;;      Temps:          0       0       0       0       0       0       0
  5049 ;;      Totals:         0       0       0       0       0       0       0
  5050 ;;Total ram usage:        0 bytes
  5051 ;; Hardware stack levels used:    1
  5052 ;; Hardware stack levels required when called:    8
  5053 ;; This function calls:
  5054 ;;		_InitRxSynth
  5055 ;;		_SendAckMessage
  5056 ;;		_SwSpi_Set_CE_Pin
  5057 ;; This function is called by:
  5058 ;;		_GroupSynthesizers
  5059 ;; This function uses a non-reentrant model
  5060 ;;
  5061                           
  5062                           	psect	text23
  5063  0034F6                     __ptext23:
  5064                           	opt stack 0
  5065  0034F6                     _SetSynthRxOper:
  5066                           	opt stack 20
  5067                           
  5068                           ;SyntApp.c: 125: SynthRxOper = !SynthRxOper;
  5069                           
  5070                           ;incstack = 0
  5071  0034F6  5044               	movf	_SynthRxOper,w,c
  5072  0034F8  A4D8               	btfss	status,2,c
  5073  0034FA  D002               	goto	u8080
  5074  0034FC  0E01               	movlw	1
  5075  0034FE  D001               	goto	u8090
  5076  003500                     u8080:
  5077  003500  0E00               	movlw	0
  5078  003502                     u8090:
  5079  003502  6E44               	movwf	_SynthRxOper,c
  5080                           
  5081                           ;SyntApp.c: 126: if(SynthRxOper)
  5082  003504  5044               	movf	_SynthRxOper,w,c
  5083  003506  B4D8               	btfsc	status,2,c
  5084  003508  D003               	goto	l514
  5085                           
  5086                           ;SyntApp.c: 127: {
  5087                           ;SyntApp.c: 128: InitRxSynth();
  5088  00350A  EC02  F018         	call	_InitRxSynth	;wreg free
  5089                           
  5090                           ;SyntApp.c: 129: }
  5091  00350E  D005               	goto	l515
  5092  003510                     l514:
  5093                           
  5094                           ;SyntApp.c: 130: else
  5095                           ;SyntApp.c: 131: {
  5096                           ;SyntApp.c: 132: SwSpi_Set_CE_Pin(SYNTH_RX, 0);
  5097  003510  0E00               	movlw	0
  5098  003512  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  5099  003514  0E01               	movlw	1
  5100  003516  EC36  F019         	call	_SwSpi_Set_CE_Pin
  5101  00351A                     l515:
  5102                           
  5103                           ;SyntApp.c: 133: }
  5104                           ;SyntApp.c: 134: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_UP_OPER);
  5105  00351A  0E44               	movlw	68
  5106  00351C  6E24               	movwf	SendAckMessage@inRequest,c
  5107  00351E  0E04               	movlw	4
  5108  003520  EC8C  F017         	call	_SendAckMessage
  5109  003524  0012               	return		;funcret
  5110  003526                     __end_of_SetSynthRxOper:
  5111                           	opt stack 0
  5112                           tosu	equ	0xFFF
  5113                           tosh	equ	0xFFE
  5114                           tosl	equ	0xFFD
  5115                           pclath	equ	0xFFA
  5116                           tblptru	equ	0xFF8
  5117                           tblptrh	equ	0xFF7
  5118                           tblptrl	equ	0xFF6
  5119                           tablat	equ	0xFF5
  5120                           prodh	equ	0xFF4
  5121                           prodl	equ	0xFF3
  5122                           intcon	equ	0xFF2
  5123                           postinc0	equ	0xFEE
  5124                           plusw0	equ	0xFEB
  5125                           wreg	equ	0xFE8
  5126                           indf1	equ	0xFE7
  5127                           postdec1	equ	0xFE5
  5128                           fsr1h	equ	0xFE2
  5129                           fsr1l	equ	0xFE1
  5130                           indf2	equ	0xFDF
  5131                           postinc2	equ	0xFDE
  5132                           postdec2	equ	0xFDD
  5133                           plusw2	equ	0xFDB
  5134                           fsr2h	equ	0xFDA
  5135                           fsr2l	equ	0xFD9
  5136                           status	equ	0xFD8
  5137                           
  5138 ;; *************** function _PLLUartInitialize *****************
  5139 ;; Defined at:
  5140 ;;		line 29 in file "SyntApp.c"
  5141 ;; Parameters:    Size  Location     Type
  5142 ;;  data            2   23[COMRAM] PTR unsigned char 
  5143 ;; Auto vars:     Size  Location     Type
  5144 ;;		None
  5145 ;; Return value:  Size  Location     Type
  5146 ;;                  1    wreg      void 
  5147 ;; Registers used:
  5148 ;;		None
  5149 ;; Tracked objects:
  5150 ;;		On entry : 0/0
  5151 ;;		On exit  : 0/0
  5152 ;;		Unchanged: 0/0
  5153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5154 ;;      Params:         2       0       0       0       0       0       0
  5155 ;;      Locals:         0       0       0       0       0       0       0
  5156 ;;      Temps:          0       0       0       0       0       0       0
  5157 ;;      Totals:         2       0       0       0       0       0       0
  5158 ;;Total ram usage:        2 bytes
  5159 ;; Hardware stack levels used:    1
  5160 ;; Hardware stack levels required when called:    3
  5161 ;; This function calls:
  5162 ;;		Nothing
  5163 ;; This function is called by:
  5164 ;;		_GroupSynthesizers
  5165 ;; This function uses a non-reentrant model
  5166 ;;
  5167                           
  5168                           	psect	text24
  5169  00396A                     __ptext24:
  5170                           	opt stack 0
  5171  00396A                     _PLLUartInitialize:
  5172                           	opt stack 25
  5173                           
  5174                           ;incstack = 0
  5175  00396A  0012               	return		;funcret
  5176  00396C                     __end_of_PLLUartInitialize:
  5177                           	opt stack 0
  5178                           tosu	equ	0xFFF
  5179                           tosh	equ	0xFFE
  5180                           tosl	equ	0xFFD
  5181                           pclath	equ	0xFFA
  5182                           tblptru	equ	0xFF8
  5183                           tblptrh	equ	0xFF7
  5184                           tblptrl	equ	0xFF6
  5185                           tablat	equ	0xFF5
  5186                           prodh	equ	0xFF4
  5187                           prodl	equ	0xFF3
  5188                           intcon	equ	0xFF2
  5189                           postinc0	equ	0xFEE
  5190                           plusw0	equ	0xFEB
  5191                           wreg	equ	0xFE8
  5192                           indf1	equ	0xFE7
  5193                           postdec1	equ	0xFE5
  5194                           fsr1h	equ	0xFE2
  5195                           fsr1l	equ	0xFE1
  5196                           indf2	equ	0xFDF
  5197                           postinc2	equ	0xFDE
  5198                           postdec2	equ	0xFDD
  5199                           plusw2	equ	0xFDB
  5200                           fsr2h	equ	0xFDA
  5201                           fsr2l	equ	0xFD9
  5202                           status	equ	0xFD8
  5203                           
  5204 ;; *************** function _GetMcuRunTime *****************
  5205 ;; Defined at:
  5206 ;;		line 54 in file "SystemStatus.c"
  5207 ;; Parameters:    Size  Location     Type
  5208 ;;		None
  5209 ;; Auto vars:     Size  Location     Type
  5210 ;;  idx             2   13[BANK0 ] int 
  5211 ;;  TxMsg           9    0[BANK0 ] unsigned char [9]
  5212 ;;  tempRunTime     4    9[BANK0 ] unsigned long 
  5213 ;; Return value:  Size  Location     Type
  5214 ;;                  1    wreg      void 
  5215 ;; Registers used:
  5216 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5217 ;; Tracked objects:
  5218 ;;		On entry : 0/0
  5219 ;;		On exit  : 0/0
  5220 ;;		Unchanged: 0/0
  5221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5222 ;;      Params:         0       0       0       0       0       0       0
  5223 ;;      Locals:         0      15       0       0       0       0       0
  5224 ;;      Temps:          2       0       0       0       0       0       0
  5225 ;;      Totals:         2      15       0       0       0       0       0
  5226 ;;Total ram usage:       17 bytes
  5227 ;; Hardware stack levels used:    1
  5228 ;; Hardware stack levels required when called:    5
  5229 ;; This function calls:
  5230 ;;		_WriteUartMessage
  5231 ;;		___lldiv
  5232 ;;		___llmod
  5233 ;;		_crc8
  5234 ;; This function is called by:
  5235 ;;		_GroupStatusAndVersion
  5236 ;; This function uses a non-reentrant model
  5237 ;;
  5238                           
  5239                           	psect	text25
  5240  001DC0                     __ptext25:
  5241                           	opt stack 0
  5242  001DC0                     _GetMcuRunTime:
  5243                           	opt stack 23
  5244                           
  5245                           ;SystemStatus.c: 57: char TxMsg[(0x4) + (0x4) + 1];
  5246                           ;SystemStatus.c: 60: TxMsg[(0)] = (0x24);
  5247                           
  5248                           ;incstack = 0
  5249  001DC0  0E24               	movlw	36
  5250  001DC2  0100               	movlb	0	; () banked
  5251  001DC4  6F60               	movwf	GetMcuRunTime@TxMsg& (0+255),b
  5252                           
  5253                           ;SystemStatus.c: 61: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  5254  001DC6  0E02               	movlw	2
  5255  001DC8  6F61               	movwf	(GetMcuRunTime@TxMsg+1)& (0+255),b
  5256                           
  5257                           ;SystemStatus.c: 62: TxMsg[(2)] = STATUS_MCU_RUN_TIME;
  5258  001DCA  0E21               	movlw	33
  5259  001DCC  6F62               	movwf	(GetMcuRunTime@TxMsg+2)& (0+255),b
  5260                           
  5261                           ;SystemStatus.c: 63: TxMsg[(3)] = (0x4);
  5262  001DCE  0E04               	movlw	4
  5263  001DD0  6F63               	movwf	(GetMcuRunTime@TxMsg+3)& (0+255),b
  5264                           
  5265                           ; BSR set to: 0
  5266                           ;SystemStatus.c: 65: uint32_t tempRunTime = mcuRunTimeIn5SecTicks;
  5267  001DD2  C0C0  F069         	movff	_mcuRunTimeIn5SecTicks,GetMcuRunTime@tempRunTime
  5268  001DD6  C0C1  F06A         	movff	_mcuRunTimeIn5SecTicks+1,GetMcuRunTime@tempRunTime+1
  5269  001DDA  C0C2  F06B         	movff	_mcuRunTimeIn5SecTicks+2,GetMcuRunTime@tempRunTime+2
  5270  001DDE  C0C3  F06C         	movff	_mcuRunTimeIn5SecTicks+3,GetMcuRunTime@tempRunTime+3
  5271                           
  5272                           ;SystemStatus.c: 68: for(int idx = 0; idx < (0x4); idx++)
  5273  001DE2  0E00               	movlw	0
  5274  001DE4  6F6E               	movwf	(GetMcuRunTime@idx+1)& (0+255),b
  5275  001DE6  0E00               	movlw	0
  5276  001DE8  6F6D               	movwf	GetMcuRunTime@idx& (0+255),b
  5277  001DEA                     l7926:
  5278                           
  5279                           ; BSR set to: 0
  5280  001DEA  BF6E               	btfsc	(GetMcuRunTime@idx+1)& (0+255),7,b
  5281  001DEC  D006               	goto	l1390
  5282  001DEE  516E               	movf	(GetMcuRunTime@idx+1)& (0+255),w,b
  5283  001DF0  E142               	bnz	l7938
  5284  001DF2  0E04               	movlw	4
  5285  001DF4  5D6D               	subwf	GetMcuRunTime@idx& (0+255),w,b
  5286  001DF6  B0D8               	btfsc	status,0,c
  5287  001DF8  D03E               	goto	u8130
  5288  001DFA                     l1390:
  5289                           
  5290                           ; BSR set to: 0
  5291                           ;SystemStatus.c: 69: {
  5292                           ;SystemStatus.c: 70: TxMsg[(0x4) + idx] = tempRunTime % 10;
  5293                           
  5294                           ; BSR set to: 0
  5295  001DFA  0E04               	movlw	4
  5296  001DFC  256D               	addwf	GetMcuRunTime@idx& (0+255),w,b
  5297  001DFE  6E25               	movwf	??_GetMcuRunTime& (0+255),c
  5298  001E00  0E00               	movlw	0
  5299  001E02  216E               	addwfc	(GetMcuRunTime@idx+1)& (0+255),w,b
  5300  001E04  6E26               	movwf	(??_GetMcuRunTime+1)& (0+255),c
  5301  001E06  0E60               	movlw	low GetMcuRunTime@TxMsg
  5302  001E08  2425               	addwf	??_GetMcuRunTime,w,c
  5303  001E0A  6ED9               	movwf	fsr2l,c
  5304  001E0C  0E00               	movlw	high GetMcuRunTime@TxMsg
  5305  001E0E  2026               	addwfc	??_GetMcuRunTime+1,w,c
  5306  001E10  6EDA               	movwf	fsr2h,c
  5307  001E12  C069  F018         	movff	GetMcuRunTime@tempRunTime,___llmod@dividend
  5308  001E16  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___llmod@dividend+1
  5309  001E1A  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___llmod@dividend+2
  5310  001E1E  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___llmod@dividend+3
  5311  001E22  0E0A               	movlw	10
  5312  001E24  6E1C               	movwf	___llmod@divisor,c
  5313  001E26  0E00               	movlw	0
  5314  001E28  6E1D               	movwf	___llmod@divisor+1,c
  5315  001E2A  0E00               	movlw	0
  5316  001E2C  6E1E               	movwf	___llmod@divisor+2,c
  5317  001E2E  0E00               	movlw	0
  5318  001E30  6E1F               	movwf	___llmod@divisor+3,c
  5319  001E32  EC6C  F015         	call	___llmod	;wreg free
  5320  001E36  5018               	movf	?___llmod,w,c
  5321  001E38  6EDF               	movwf	indf2,c
  5322                           
  5323                           ;SystemStatus.c: 71: tempRunTime /= 10;
  5324  001E3A  C069  F018         	movff	GetMcuRunTime@tempRunTime,___lldiv@dividend
  5325  001E3E  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___lldiv@dividend+1
  5326  001E42  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___lldiv@dividend+2
  5327  001E46  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___lldiv@dividend+3
  5328  001E4A  0E0A               	movlw	10
  5329  001E4C  6E1C               	movwf	___lldiv@divisor,c
  5330  001E4E  0E00               	movlw	0
  5331  001E50  6E1D               	movwf	___lldiv@divisor+1,c
  5332  001E52  0E00               	movlw	0
  5333  001E54  6E1E               	movwf	___lldiv@divisor+2,c
  5334  001E56  0E00               	movlw	0
  5335  001E58  6E1F               	movwf	___lldiv@divisor+3,c
  5336  001E5A  EC4B  F014         	call	___lldiv	;wreg free
  5337  001E5E  C018  F069         	movff	?___lldiv,GetMcuRunTime@tempRunTime
  5338  001E62  C019  F06A         	movff	?___lldiv+1,GetMcuRunTime@tempRunTime+1
  5339  001E66  C01A  F06B         	movff	?___lldiv+2,GetMcuRunTime@tempRunTime+2
  5340  001E6A  C01B  F06C         	movff	?___lldiv+3,GetMcuRunTime@tempRunTime+3
  5341  001E6E  0100               	movlb	0	; () banked
  5342  001E70  4B6D               	infsnz	GetMcuRunTime@idx& (0+255),f,b
  5343  001E72  2B6E               	incf	(GetMcuRunTime@idx+1)& (0+255),f,b
  5344  001E74  D7BA               	goto	l7926
  5345  001E76                     u8130:
  5346  001E76                     l7938:
  5347                           
  5348                           ; BSR set to: 0
  5349                           ;SystemStatus.c: 72: }
  5350                           ;SystemStatus.c: 74: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  5351  001E76  0E60               	movlw	low GetMcuRunTime@TxMsg
  5352  001E78  6E18               	movwf	crc8@dataArray,c
  5353  001E7A  0E00               	movlw	high GetMcuRunTime@TxMsg
  5354  001E7C  6E19               	movwf	crc8@dataArray+1,c
  5355  001E7E  0E00               	movlw	0
  5356  001E80  6E1B               	movwf	crc8@dataSize+1,c
  5357  001E82  0E08               	movlw	8
  5358  001E84  6E1A               	movwf	crc8@dataSize,c
  5359  001E86  ECB5  F017         	call	_crc8	;wreg free
  5360  001E8A  0100               	movlb	0	; () banked
  5361  001E8C  6F68               	movwf	(GetMcuRunTime@TxMsg+8)& (0+255),b
  5362                           
  5363                           ; BSR set to: 0
  5364                           ;SystemStatus.c: 76: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  5365  001E8E  0E60               	movlw	low GetMcuRunTime@TxMsg
  5366  001E90  6E19               	movwf	WriteUartMessage@dataBuf,c
  5367  001E92  0E00               	movlw	high GetMcuRunTime@TxMsg
  5368  001E94  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5369  001E96  0E00               	movlw	0
  5370  001E98  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5371  001E9A  0E09               	movlw	9
  5372  001E9C  6E1B               	movwf	WriteUartMessage@dataSize,c
  5373  001E9E  ECFC  F019         	call	_WriteUartMessage	;wreg free
  5374  001EA2  0012               	return		;funcret
  5375  001EA4                     __end_of_GetMcuRunTime:
  5376                           	opt stack 0
  5377                           tosu	equ	0xFFF
  5378                           tosh	equ	0xFFE
  5379                           tosl	equ	0xFFD
  5380                           pclath	equ	0xFFA
  5381                           tblptru	equ	0xFF8
  5382                           tblptrh	equ	0xFF7
  5383                           tblptrl	equ	0xFF6
  5384                           tablat	equ	0xFF5
  5385                           prodh	equ	0xFF4
  5386                           prodl	equ	0xFF3
  5387                           intcon	equ	0xFF2
  5388                           postinc0	equ	0xFEE
  5389                           plusw0	equ	0xFEB
  5390                           wreg	equ	0xFE8
  5391                           indf1	equ	0xFE7
  5392                           postdec1	equ	0xFE5
  5393                           fsr1h	equ	0xFE2
  5394                           fsr1l	equ	0xFE1
  5395                           indf2	equ	0xFDF
  5396                           postinc2	equ	0xFDE
  5397                           postdec2	equ	0xFDD
  5398                           plusw2	equ	0xFDB
  5399                           fsr2h	equ	0xFDA
  5400                           fsr2l	equ	0xFD9
  5401                           status	equ	0xFD8
  5402                           
  5403 ;; *************** function ___lldiv *****************
  5404 ;; Defined at:
  5405 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  5406 ;; Parameters:    Size  Location     Type
  5407 ;;  dividend        4   23[COMRAM] unsigned long 
  5408 ;;  divisor         4   27[COMRAM] unsigned long 
  5409 ;; Auto vars:     Size  Location     Type
  5410 ;;  quotient        4   31[COMRAM] unsigned long 
  5411 ;;  counter         1   35[COMRAM] unsigned char 
  5412 ;; Return value:  Size  Location     Type
  5413 ;;                  4   23[COMRAM] unsigned long 
  5414 ;; Registers used:
  5415 ;;		wreg, status,2, status,0
  5416 ;; Tracked objects:
  5417 ;;		On entry : 0/0
  5418 ;;		On exit  : 0/0
  5419 ;;		Unchanged: 0/0
  5420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5421 ;;      Params:         8       0       0       0       0       0       0
  5422 ;;      Locals:         5       0       0       0       0       0       0
  5423 ;;      Temps:          0       0       0       0       0       0       0
  5424 ;;      Totals:        13       0       0       0       0       0       0
  5425 ;;Total ram usage:       13 bytes
  5426 ;; Hardware stack levels used:    1
  5427 ;; Hardware stack levels required when called:    3
  5428 ;; This function calls:
  5429 ;;		Nothing
  5430 ;; This function is called by:
  5431 ;;		_GetMcuRunTime
  5432 ;; This function uses a non-reentrant model
  5433 ;;
  5434                           
  5435                           	psect	text26
  5436  002896                     __ptext26:
  5437                           	opt stack 0
  5438  002896                     ___lldiv:
  5439                           	opt stack 24
  5440                           
  5441                           ;incstack = 0
  5442  002896  0E00               	movlw	0
  5443  002898  6E20               	movwf	___lldiv@quotient,c
  5444  00289A  0E00               	movlw	0
  5445  00289C  6E21               	movwf	___lldiv@quotient+1,c
  5446  00289E  0E00               	movlw	0
  5447  0028A0  6E22               	movwf	___lldiv@quotient+2,c
  5448  0028A2  0E00               	movlw	0
  5449  0028A4  6E23               	movwf	___lldiv@quotient+3,c
  5450  0028A6  501C               	movf	___lldiv@divisor,w,c
  5451  0028A8  101D               	iorwf	___lldiv@divisor+1,w,c
  5452  0028AA  101E               	iorwf	___lldiv@divisor+2,w,c
  5453  0028AC  101F               	iorwf	___lldiv@divisor+3,w,c
  5454  0028AE  B4D8               	btfsc	status,2,c
  5455  0028B0  D02A               	goto	l1821
  5456  0028B2  0E01               	movlw	1
  5457  0028B4  6E24               	movwf	___lldiv@counter,c
  5458  0028B6  D006               	goto	l1816
  5459  0028B8  90D8               	bcf	status,0,c
  5460  0028BA  361C               	rlcf	___lldiv@divisor,f,c
  5461  0028BC  361D               	rlcf	___lldiv@divisor+1,f,c
  5462  0028BE  361E               	rlcf	___lldiv@divisor+2,f,c
  5463  0028C0  361F               	rlcf	___lldiv@divisor+3,f,c
  5464  0028C2  2A24               	incf	___lldiv@counter,f,c
  5465  0028C4                     l1816:
  5466  0028C4  AE1F               	btfss	___lldiv@divisor+3,7,c
  5467  0028C6  D7F8               	goto	l1817
  5468  0028C8                     u7650:
  5469  0028C8  90D8               	bcf	status,0,c
  5470  0028CA  3620               	rlcf	___lldiv@quotient,f,c
  5471  0028CC  3621               	rlcf	___lldiv@quotient+1,f,c
  5472  0028CE  3622               	rlcf	___lldiv@quotient+2,f,c
  5473  0028D0  3623               	rlcf	___lldiv@quotient+3,f,c
  5474  0028D2  501C               	movf	___lldiv@divisor,w,c
  5475  0028D4  5C18               	subwf	___lldiv@dividend,w,c
  5476  0028D6  501D               	movf	___lldiv@divisor+1,w,c
  5477  0028D8  5819               	subwfb	___lldiv@dividend+1,w,c
  5478  0028DA  501E               	movf	___lldiv@divisor+2,w,c
  5479  0028DC  581A               	subwfb	___lldiv@dividend+2,w,c
  5480  0028DE  501F               	movf	___lldiv@divisor+3,w,c
  5481  0028E0  581B               	subwfb	___lldiv@dividend+3,w,c
  5482  0028E2  A0D8               	btfss	status,0,c
  5483  0028E4  D009               	goto	l1820
  5484  0028E6  501C               	movf	___lldiv@divisor,w,c
  5485  0028E8  5E18               	subwf	___lldiv@dividend,f,c
  5486  0028EA  501D               	movf	___lldiv@divisor+1,w,c
  5487  0028EC  5A19               	subwfb	___lldiv@dividend+1,f,c
  5488  0028EE  501E               	movf	___lldiv@divisor+2,w,c
  5489  0028F0  5A1A               	subwfb	___lldiv@dividend+2,f,c
  5490  0028F2  501F               	movf	___lldiv@divisor+3,w,c
  5491  0028F4  5A1B               	subwfb	___lldiv@dividend+3,f,c
  5492  0028F6  8020               	bsf	___lldiv@quotient,0,c
  5493  0028F8                     l1820:
  5494  0028F8  90D8               	bcf	status,0,c
  5495  0028FA  321F               	rrcf	___lldiv@divisor+3,f,c
  5496  0028FC  321E               	rrcf	___lldiv@divisor+2,f,c
  5497  0028FE  321D               	rrcf	___lldiv@divisor+1,f,c
  5498  002900  321C               	rrcf	___lldiv@divisor,f,c
  5499  002902  2E24               	decfsz	___lldiv@counter,f,c
  5500  002904  D7E1               	goto	u7650
  5501  002906                     l1821:
  5502  002906  C020  F018         	movff	___lldiv@quotient,?___lldiv
  5503  00290A  C021  F019         	movff	___lldiv@quotient+1,?___lldiv+1
  5504  00290E  C022  F01A         	movff	___lldiv@quotient+2,?___lldiv+2
  5505  002912  C023  F01B         	movff	___lldiv@quotient+3,?___lldiv+3
  5506  002916  0012               	return		;funcret
  5507  002918                     __end_of___lldiv:
  5508                           	opt stack 0
  5509                           tosu	equ	0xFFF
  5510                           tosh	equ	0xFFE
  5511                           tosl	equ	0xFFD
  5512                           pclath	equ	0xFFA
  5513                           tblptru	equ	0xFF8
  5514                           tblptrh	equ	0xFF7
  5515                           tblptrl	equ	0xFF6
  5516                           tablat	equ	0xFF5
  5517                           prodh	equ	0xFF4
  5518                           prodl	equ	0xFF3
  5519                           intcon	equ	0xFF2
  5520                           postinc0	equ	0xFEE
  5521                           plusw0	equ	0xFEB
  5522                           wreg	equ	0xFE8
  5523                           indf1	equ	0xFE7
  5524                           postdec1	equ	0xFE5
  5525                           fsr1h	equ	0xFE2
  5526                           fsr1l	equ	0xFE1
  5527                           indf2	equ	0xFDF
  5528                           postinc2	equ	0xFDE
  5529                           postdec2	equ	0xFDD
  5530                           plusw2	equ	0xFDB
  5531                           fsr2h	equ	0xFDA
  5532                           fsr2l	equ	0xFD9
  5533                           status	equ	0xFD8
  5534                           
  5535 ;; *************** function _GetMcuFwVersion *****************
  5536 ;; Defined at:
  5537 ;;		line 14 in file "SystemStatus.c"
  5538 ;; Parameters:    Size  Location     Type
  5539 ;;		None
  5540 ;; Auto vars:     Size  Location     Type
  5541 ;;  TxMsg           9    0[BANK0 ] unsigned char [9]
  5542 ;;  compileData     4    9[BANK0 ] unsigned long 
  5543 ;; Return value:  Size  Location     Type
  5544 ;;                  1    wreg      void 
  5545 ;; Registers used:
  5546 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5547 ;; Tracked objects:
  5548 ;;		On entry : 0/0
  5549 ;;		On exit  : 0/0
  5550 ;;		Unchanged: 0/0
  5551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5552 ;;      Params:         0       0       0       0       0       0       0
  5553 ;;      Locals:         0      13       0       0       0       0       0
  5554 ;;      Temps:          0       0       0       0       0       0       0
  5555 ;;      Totals:         0      13       0       0       0       0       0
  5556 ;;Total ram usage:       13 bytes
  5557 ;; Hardware stack levels used:    1
  5558 ;; Hardware stack levels required when called:    5
  5559 ;; This function calls:
  5560 ;;		_WriteUartMessage
  5561 ;;		_ZeroArray
  5562 ;;		_crc8
  5563 ;; This function is called by:
  5564 ;;		_GroupStatusAndVersion
  5565 ;; This function uses a non-reentrant model
  5566 ;;
  5567                           
  5568                           	psect	text27
  5569  00252E                     __ptext27:
  5570                           	opt stack 0
  5571  00252E                     _GetMcuFwVersion:
  5572                           	opt stack 23
  5573                           
  5574                           ;SystemStatus.c: 16: uint32_t compileData = 0x0;
  5575                           
  5576                           ;incstack = 0
  5577  00252E  0E00               	movlw	0
  5578  002530  0100               	movlb	0	; () banked
  5579  002532  6F69               	movwf	GetMcuFwVersion@compileData& (0+255),b
  5580  002534  0E00               	movlw	0
  5581  002536  6F6A               	movwf	(GetMcuFwVersion@compileData+1)& (0+255),b
  5582  002538  0E00               	movlw	0
  5583  00253A  6F6B               	movwf	(GetMcuFwVersion@compileData+2)& (0+255),b
  5584  00253C  0E00               	movlw	0
  5585  00253E  6F6C               	movwf	(GetMcuFwVersion@compileData+3)& (0+255),b
  5586                           
  5587                           ; BSR set to: 0
  5588                           ;SystemStatus.c: 19: char TxMsg[(0x4) + (0x4) + 1];
  5589                           ;SystemStatus.c: 20: ZeroArray(TxMsg, (0x4) + (0x4) + 1);
  5590  002540  0E60               	movlw	low GetMcuFwVersion@TxMsg
  5591  002542  6E20               	movwf	ZeroArray@array,c
  5592  002544  0E00               	movlw	high GetMcuFwVersion@TxMsg
  5593  002546  6E21               	movwf	ZeroArray@array+1,c
  5594  002548  0E00               	movlw	0
  5595  00254A  6E23               	movwf	ZeroArray@size+1,c
  5596  00254C  0E09               	movlw	9
  5597  00254E  6E22               	movwf	ZeroArray@size,c
  5598  002550  ECC8  F01B         	call	_ZeroArray	;wreg free
  5599                           
  5600                           ;SystemStatus.c: 23: TxMsg[(0)] = (0x24);
  5601  002554  0E24               	movlw	36
  5602  002556  0100               	movlb	0	; () banked
  5603  002558  6F60               	movwf	GetMcuFwVersion@TxMsg& (0+255),b
  5604                           
  5605                           ; BSR set to: 0
  5606                           ;SystemStatus.c: 24: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  5607  00255A  0E02               	movlw	2
  5608  00255C  6F61               	movwf	(GetMcuFwVersion@TxMsg+1)& (0+255),b
  5609                           
  5610                           ; BSR set to: 0
  5611                           ;SystemStatus.c: 25: TxMsg[(2)] = STATUS_GET_MCU_FW_VERSION;
  5612  00255E  0E22               	movlw	34
  5613  002560  6F62               	movwf	(GetMcuFwVersion@TxMsg+2)& (0+255),b
  5614                           
  5615                           ; BSR set to: 0
  5616                           ;SystemStatus.c: 26: TxMsg[(3)] = (0x4);
  5617  002562  0E04               	movlw	4
  5618  002564  6F63               	movwf	(GetMcuFwVersion@TxMsg+3)& (0+255),b
  5619                           
  5620                           ; BSR set to: 0
  5621                           ;SystemStatus.c: 29: compileData = "Mar 18 2018";
  5622  002566  0E8E               	movlw	low STR_1
  5623  002568  6F69               	movwf	GetMcuFwVersion@compileData& (0+255),b
  5624  00256A  0E06               	movlw	high STR_1
  5625  00256C  6F6A               	movwf	(GetMcuFwVersion@compileData+1)& (0+255),b
  5626  00256E  0E00               	movlw	low (STR_1 shr (0+16))
  5627  002570  6F6B               	movwf	(GetMcuFwVersion@compileData+2)& (0+255),b
  5628  002572  0E00               	movlw	high (STR_1 shr (0+16))
  5629  002574  6F6C               	movwf	(GetMcuFwVersion@compileData+3)& (0+255),b
  5630                           
  5631                           ; BSR set to: 0
  5632                           ;SystemStatus.c: 30: TxMsg[(0x4) + 0] = (compileData & 0xFF00) >> 8;
  5633  002576  C06A  F064         	movff	GetMcuFwVersion@compileData+1,GetMcuFwVersion@TxMsg+4
  5634                           
  5635                           ; BSR set to: 0
  5636                           ;SystemStatus.c: 31: TxMsg[(0x4) + 1] = compileData & 0xFF;
  5637  00257A  C069  F065         	movff	GetMcuFwVersion@compileData,GetMcuFwVersion@TxMsg+5
  5638                           
  5639                           ; BSR set to: 0
  5640                           ;SystemStatus.c: 34: compileData = "16:00:54";
  5641  00257E  0E9A               	movlw	low STR_2
  5642  002580  6F69               	movwf	GetMcuFwVersion@compileData& (0+255),b
  5643  002582  0E06               	movlw	high STR_2
  5644  002584  6F6A               	movwf	(GetMcuFwVersion@compileData+1)& (0+255),b
  5645  002586  0E00               	movlw	low (STR_2 shr (0+16))
  5646  002588  6F6B               	movwf	(GetMcuFwVersion@compileData+2)& (0+255),b
  5647  00258A  0E00               	movlw	high (STR_2 shr (0+16))
  5648  00258C  6F6C               	movwf	(GetMcuFwVersion@compileData+3)& (0+255),b
  5649                           
  5650                           ; BSR set to: 0
  5651                           ;SystemStatus.c: 35: TxMsg[(0x4) + 2] = (compileData & 0xFF00) >> 8;
  5652  00258E  C06A  F066         	movff	GetMcuFwVersion@compileData+1,GetMcuFwVersion@TxMsg+6
  5653                           
  5654                           ; BSR set to: 0
  5655                           ;SystemStatus.c: 36: TxMsg[(0x4) + 3] = compileData & 0xFF;
  5656  002592  C069  F067         	movff	GetMcuFwVersion@compileData,GetMcuFwVersion@TxMsg+7
  5657                           
  5658                           ; BSR set to: 0
  5659                           ;SystemStatus.c: 38: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  5660  002596  0E60               	movlw	low GetMcuFwVersion@TxMsg
  5661  002598  6E18               	movwf	crc8@dataArray,c
  5662  00259A  0E00               	movlw	high GetMcuFwVersion@TxMsg
  5663  00259C  6E19               	movwf	crc8@dataArray+1,c
  5664  00259E  0E00               	movlw	0
  5665  0025A0  6E1B               	movwf	crc8@dataSize+1,c
  5666  0025A2  0E08               	movlw	8
  5667  0025A4  6E1A               	movwf	crc8@dataSize,c
  5668  0025A6  ECB5  F017         	call	_crc8	;wreg free
  5669  0025AA  0100               	movlb	0	; () banked
  5670  0025AC  6F68               	movwf	(GetMcuFwVersion@TxMsg+8)& (0+255),b
  5671                           
  5672                           ; BSR set to: 0
  5673                           ;SystemStatus.c: 40: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  5674  0025AE  0E60               	movlw	low GetMcuFwVersion@TxMsg
  5675  0025B0  6E19               	movwf	WriteUartMessage@dataBuf,c
  5676  0025B2  0E00               	movlw	high GetMcuFwVersion@TxMsg
  5677  0025B4  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5678  0025B6  0E00               	movlw	0
  5679  0025B8  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5680  0025BA  0E09               	movlw	9
  5681  0025BC  6E1B               	movwf	WriteUartMessage@dataSize,c
  5682  0025BE  ECFC  F019         	call	_WriteUartMessage	;wreg free
  5683  0025C2  0012               	return		;funcret
  5684  0025C4                     __end_of_GetMcuFwVersion:
  5685                           	opt stack 0
  5686                           tosu	equ	0xFFF
  5687                           tosh	equ	0xFFE
  5688                           tosl	equ	0xFFD
  5689                           pclath	equ	0xFFA
  5690                           tblptru	equ	0xFF8
  5691                           tblptrh	equ	0xFF7
  5692                           tblptrl	equ	0xFF6
  5693                           tablat	equ	0xFF5
  5694                           prodh	equ	0xFF4
  5695                           prodl	equ	0xFF3
  5696                           intcon	equ	0xFF2
  5697                           postinc0	equ	0xFEE
  5698                           plusw0	equ	0xFEB
  5699                           wreg	equ	0xFE8
  5700                           indf1	equ	0xFE7
  5701                           postdec1	equ	0xFE5
  5702                           fsr1h	equ	0xFE2
  5703                           fsr1l	equ	0xFE1
  5704                           indf2	equ	0xFDF
  5705                           postinc2	equ	0xFDE
  5706                           postdec2	equ	0xFDD
  5707                           plusw2	equ	0xFDB
  5708                           fsr2h	equ	0xFDA
  5709                           fsr2l	equ	0xFD9
  5710                           status	equ	0xFD8
  5711                           
  5712 ;; *************** function _FlashReadUart *****************
  5713 ;; Defined at:
  5714 ;;		line 62 in file "FlashApp.c"
  5715 ;; Parameters:    Size  Location     Type
  5716 ;;  numOfSampleT    2   43[COMRAM] int 
  5717 ;; Auto vars:     Size  Location     Type
  5718 ;;  idx             2   91[BANK0 ] int 
  5719 ;;  TxMsg          69   12[BANK0 ] unsigned char [69]
  5720 ;;  offset          2   93[BANK0 ] int 
  5721 ;;  j               2   89[BANK0 ] int 
  5722 ;; Return value:  Size  Location     Type
  5723 ;;                  1    wreg      void 
  5724 ;; Registers used:
  5725 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5726 ;; Tracked objects:
  5727 ;;		On entry : 0/0
  5728 ;;		On exit  : 0/0
  5729 ;;		Unchanged: 0/0
  5730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5731 ;;      Params:         2       0       0       0       0       0       0
  5732 ;;      Locals:         0      83       0       0       0       0       0
  5733 ;;      Temps:          0      12       0       0       0       0       0
  5734 ;;      Totals:         2      95       0       0       0       0       0
  5735 ;;Total ram usage:       97 bytes
  5736 ;; Hardware stack levels used:    1
  5737 ;; Hardware stack levels required when called:    6
  5738 ;; This function calls:
  5739 ;;		_FLASH_IsWriteDone
  5740 ;;		_FLASH_ReadByte
  5741 ;;		_SendAckMessage
  5742 ;;		_WriteUartMessage
  5743 ;;		_ZeroArray
  5744 ;;		_abs
  5745 ;;		_crc8
  5746 ;; This function is called by:
  5747 ;;		_GroupFlashMemory
  5748 ;; This function uses a non-reentrant model
  5749 ;;
  5750                           
  5751                           	psect	text28
  5752  0006A4                     __ptext28:
  5753                           	opt stack 0
  5754  0006A4                     _FlashReadUart:
  5755                           	opt stack 22
  5756                           
  5757                           ;FlashApp.c: 65: int j=0;
  5758                           
  5759                           ;incstack = 0
  5760  0006A4  0E00               	movlw	0
  5761  0006A6  0100               	movlb	0	; () banked
  5762  0006A8  6FBA               	movwf	(FlashReadUart@j+1)& (0+255),b
  5763  0006AA  0E00               	movlw	0
  5764  0006AC  6FB9               	movwf	FlashReadUart@j& (0+255),b
  5765                           
  5766                           ;FlashApp.c: 66: int offset = 0;
  5767  0006AE  0E00               	movlw	0
  5768  0006B0  6FBE               	movwf	(FlashReadUart@offset+1)& (0+255),b
  5769  0006B2  0E00               	movlw	0
  5770  0006B4  6FBD               	movwf	FlashReadUart@offset& (0+255),b
  5771                           
  5772                           ; BSR set to: 0
  5773                           ;FlashApp.c: 67: char TxMsg[(64) + (0x4) + 1];
  5774                           ;FlashApp.c: 68: ZeroArray(TxMsg, (64) + (0x4) + 1);
  5775  0006B6  0E6C               	movlw	low FlashReadUart@TxMsg
  5776  0006B8  6E20               	movwf	ZeroArray@array,c
  5777  0006BA  0E00               	movlw	high FlashReadUart@TxMsg
  5778  0006BC  6E21               	movwf	ZeroArray@array+1,c
  5779  0006BE  0E00               	movlw	0
  5780  0006C0  6E23               	movwf	ZeroArray@size+1,c
  5781  0006C2  0E45               	movlw	69
  5782  0006C4  6E22               	movwf	ZeroArray@size,c
  5783  0006C6  ECC8  F01B         	call	_ZeroArray	;wreg free
  5784                           
  5785                           ;FlashApp.c: 71: if (FLASH_IsWriteDone() == 0)
  5786  0006CA  EC76  F01C         	call	_FLASH_IsWriteDone	;wreg free
  5787  0006CE  0900               	iorlw	0
  5788  0006D0  B4D8               	btfsc	status,2,c
  5789  0006D2  0012               	return	
  5790                           
  5791                           ;FlashApp.c: 74: }
  5792                           ;FlashApp.c: 76: if (numOfReadSamples)
  5793                           
  5794                           ;FlashApp.c: 72: {
  5795                           ;FlashApp.c: 73: return;
  5796  0006D4  503C               	movf	_numOfReadSamples,w,c
  5797  0006D6  103D               	iorwf	_numOfReadSamples+1,w,c
  5798  0006D8  103E               	iorwf	_numOfReadSamples+2,w,c
  5799  0006DA  103F               	iorwf	_numOfReadSamples+3,w,c
  5800  0006DC  B4D8               	btfsc	status,2,c
  5801  0006DE  D0EE               	goto	l306
  5802                           
  5803                           ;FlashApp.c: 77: {
  5804                           ;FlashApp.c: 78: if (numOfValidateSamples)
  5805  0006E0  5030               	movf	_numOfValidateSamples,w,c
  5806  0006E2  1031               	iorwf	_numOfValidateSamples+1,w,c
  5807  0006E4  1032               	iorwf	_numOfValidateSamples+2,w,c
  5808  0006E6  1033               	iorwf	_numOfValidateSamples+3,w,c
  5809  0006E8  B4D8               	btfsc	status,2,c
  5810  0006EA  D09A               	goto	l307
  5811                           
  5812                           ;FlashApp.c: 79: {
  5813                           ;FlashApp.c: 80: offset = numOfValidateSamples - (numOfValidateSamples > numOfSampleToRe
      +                          ad)? numOfValidateSamples : numOfSampleToRead;
  5814  0006EC  C02C  F060         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  5815  0006F0  C02D  F061         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  5816  0006F4  0E00               	movlw	0
  5817  0006F6  0100               	movlb	0	; () banked
  5818  0006F8  BF61               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  5819  0006FA  0EFF               	movlw	255
  5820  0006FC  6F62               	movwf	(??_FlashReadUart+2)& (0+255),b
  5821  0006FE  6F63               	movwf	(??_FlashReadUart+3)& (0+255),b
  5822  000700  5030               	movf	_numOfValidateSamples,w,c
  5823  000702  5D60               	subwf	??_FlashReadUart& (0+255),w,b
  5824  000704  5031               	movf	_numOfValidateSamples+1,w,c
  5825  000706  5961               	subwfb	(??_FlashReadUart+1)& (0+255),w,b
  5826  000708  5032               	movf	_numOfValidateSamples+2,w,c
  5827  00070A  5962               	subwfb	(??_FlashReadUart+2)& (0+255),w,b
  5828  00070C  5033               	movf	_numOfValidateSamples+3,w,c
  5829  00070E  5963               	subwfb	(??_FlashReadUart+3)& (0+255),w,b
  5830  000710  B0D8               	btfsc	status,0,c
  5831  000712  D002               	goto	u7810
  5832  000714  0E01               	movlw	1
  5833  000716  D001               	goto	u7820
  5834  000718                     u7810:
  5835  000718  0E00               	movlw	0
  5836  00071A                     u7820:
  5837  00071A  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  5838  00071C  6B65               	clrf	(??_FlashReadUart+5)& (0+255),b
  5839  00071E  6B66               	clrf	(??_FlashReadUart+6)& (0+255),b
  5840  000720  6B67               	clrf	(??_FlashReadUart+7)& (0+255),b
  5841  000722  1F64               	comf	(??_FlashReadUart+4)& (0+255),f,b
  5842  000724  1F65               	comf	(??_FlashReadUart+5)& (0+255),f,b
  5843  000726  1F66               	comf	(??_FlashReadUart+6)& (0+255),f,b
  5844  000728  1F67               	comf	(??_FlashReadUart+7)& (0+255),f,b
  5845  00072A  2B64               	incf	(??_FlashReadUart+4)& (0+255),f,b
  5846  00072C  0E00               	movlw	0
  5847  00072E  2365               	addwfc	(??_FlashReadUart+5)& (0+255),f,b
  5848  000730  2366               	addwfc	(??_FlashReadUart+6)& (0+255),f,b
  5849  000732  2367               	addwfc	(??_FlashReadUart+7)& (0+255),f,b
  5850  000734  5030               	movf	_numOfValidateSamples,w,c
  5851  000736  2564               	addwf	(??_FlashReadUart+4)& (0+255),w,b
  5852  000738  6F68               	movwf	(??_FlashReadUart+8)& (0+255),b
  5853  00073A  5031               	movf	_numOfValidateSamples+1,w,c
  5854  00073C  2165               	addwfc	(??_FlashReadUart+5)& (0+255),w,b
  5855  00073E  6F69               	movwf	(??_FlashReadUart+9)& (0+255),b
  5856  000740  5032               	movf	_numOfValidateSamples+2,w,c
  5857  000742  2166               	addwfc	(??_FlashReadUart+6)& (0+255),w,b
  5858  000744  6F6A               	movwf	(??_FlashReadUart+10)& (0+255),b
  5859  000746  5033               	movf	_numOfValidateSamples+3,w,c
  5860  000748  2167               	addwfc	(??_FlashReadUart+7)& (0+255),w,b
  5861  00074A  6F6B               	movwf	(??_FlashReadUart+11)& (0+255),b
  5862  00074C  5168               	movf	(??_FlashReadUart+8)& (0+255),w,b
  5863  00074E  1169               	iorwf	(??_FlashReadUart+9)& (0+255),w,b
  5864  000750  116A               	iorwf	(??_FlashReadUart+10)& (0+255),w,b
  5865  000752  116B               	iorwf	(??_FlashReadUart+11)& (0+255),w,b
  5866  000754  A4D8               	btfss	status,2,c
  5867  000756  D00A               	goto	l309
  5868                           
  5869                           ; BSR set to: 0
  5870  000758  C02C  F0B1         	movff	FlashReadUart@numOfSampleToRead,_FlashReadUart$581
  5871  00075C  C02D  F0B2         	movff	FlashReadUart@numOfSampleToRead+1,_FlashReadUart$581+1
  5872  000760  0E00               	movlw	0
  5873  000762  BFB2               	btfsc	(_FlashReadUart$581+1)& (0+255),7,b
  5874  000764  0EFF               	movlw	-1
  5875  000766  6FB3               	movwf	(_FlashReadUart$581+2)& (0+255),b
  5876  000768  6FB4               	movwf	(_FlashReadUart$581+3)& (0+255),b
  5877  00076A  D008               	goto	l311
  5878  00076C                     l309:
  5879                           
  5880                           ; BSR set to: 0
  5881  00076C  C030  F0B1         	movff	_numOfValidateSamples,_FlashReadUart$581
  5882  000770  C031  F0B2         	movff	_numOfValidateSamples+1,_FlashReadUart$581+1
  5883  000774  C032  F0B3         	movff	_numOfValidateSamples+2,_FlashReadUart$581+2
  5884  000778  C033  F0B4         	movff	_numOfValidateSamples+3,_FlashReadUart$581+3
  5885  00077C                     l311:
  5886                           
  5887                           ; BSR set to: 0
  5888  00077C  C0B1  F0BD         	movff	_FlashReadUart$581,FlashReadUart@offset
  5889  000780  C0B2  F0BE         	movff	_FlashReadUart$581+1,FlashReadUart@offset+1
  5890                           
  5891                           ; BSR set to: 0
  5892                           ;FlashApp.c: 81: if(offset < 0)
  5893  000784  AFBE               	btfss	(FlashReadUart@offset+1)& (0+255),7,b
  5894  000786  D091               	goto	l314
  5895                           
  5896                           ; BSR set to: 0
  5897                           ;FlashApp.c: 82: {
  5898                           ;FlashApp.c: 83: if (abs(offset) > numOfReadSamples)
  5899  000788  C0BD  F018         	movff	FlashReadUart@offset,abs@a
  5900  00078C  C0BE  F019         	movff	FlashReadUart@offset+1,abs@a+1
  5901  000790  EC18  F01B         	call	_abs	;wreg free
  5902  000794  C018  F060         	movff	?_abs,??_FlashReadUart
  5903  000798  C019  F061         	movff	?_abs+1,??_FlashReadUart+1
  5904  00079C  0E00               	movlw	0
  5905  00079E  0100               	movlb	0	; () banked
  5906  0007A0  BF61               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  5907  0007A2  0EFF               	movlw	255
  5908  0007A4  6F62               	movwf	(??_FlashReadUart+2)& (0+255),b
  5909  0007A6  6F63               	movwf	(??_FlashReadUart+3)& (0+255),b
  5910  0007A8  5160               	movf	??_FlashReadUart& (0+255),w,b
  5911  0007AA  5C3C               	subwf	_numOfReadSamples,w,c
  5912  0007AC  5161               	movf	(??_FlashReadUart+1)& (0+255),w,b
  5913  0007AE  583D               	subwfb	_numOfReadSamples+1,w,c
  5914  0007B0  5162               	movf	(??_FlashReadUart+2)& (0+255),w,b
  5915  0007B2  583E               	subwfb	_numOfReadSamples+2,w,c
  5916  0007B4  5163               	movf	(??_FlashReadUart+3)& (0+255),w,b
  5917  0007B6  583F               	subwfb	_numOfReadSamples+3,w,c
  5918  0007B8  B0D8               	btfsc	status,0,c
  5919  0007BA  D016               	goto	l313
  5920                           
  5921                           ; BSR set to: 0
  5922                           ;FlashApp.c: 84: {
  5923                           ;FlashApp.c: 85: numOfSampleToRead += offset + numOfReadSamples;
  5924  0007BC  503C               	movf	_numOfReadSamples,w,c
  5925  0007BE  25BD               	addwf	FlashReadUart@offset& (0+255),w,b
  5926  0007C0  6F60               	movwf	??_FlashReadUart& (0+255),b
  5927  0007C2  503D               	movf	_numOfReadSamples+1,w,c
  5928  0007C4  21BE               	addwfc	(FlashReadUart@offset+1)& (0+255),w,b
  5929  0007C6  6F61               	movwf	(??_FlashReadUart+1)& (0+255),b
  5930  0007C8  5160               	movf	??_FlashReadUart& (0+255),w,b
  5931  0007CA  262C               	addwf	FlashReadUart@numOfSampleToRead,f,c
  5932  0007CC  5161               	movf	(??_FlashReadUart+1)& (0+255),w,b
  5933  0007CE  222D               	addwfc	FlashReadUart@numOfSampleToRead+1,f,c
  5934                           
  5935                           ; BSR set to: 0
  5936                           ;FlashApp.c: 86: offset = numOfReadSamples * (-1);
  5937  0007D0  C03C  F060         	movff	_numOfReadSamples,??_FlashReadUart
  5938  0007D4  C03D  F061         	movff	_numOfReadSamples+1,??_FlashReadUart+1
  5939  0007D8  1F60               	comf	??_FlashReadUart& (0+255),f,b
  5940  0007DA  1F61               	comf	(??_FlashReadUart+1)& (0+255),f,b
  5941  0007DC  4B60               	infsnz	??_FlashReadUart& (0+255),f,b
  5942  0007DE  2B61               	incf	(??_FlashReadUart+1)& (0+255),f,b
  5943  0007E0  C060  F0BD         	movff	??_FlashReadUart,FlashReadUart@offset
  5944  0007E4  C061  F0BE         	movff	??_FlashReadUart+1,FlashReadUart@offset+1
  5945  0007E8                     l313:
  5946                           
  5947                           ; BSR set to: 0
  5948                           ;FlashApp.c: 88: }
  5949                           ;FlashApp.c: 90: readAddress += offset * (64);
  5950  0007E8  C0BD  F060         	movff	FlashReadUart@offset,??_FlashReadUart
  5951  0007EC  C0BE  F061         	movff	FlashReadUart@offset+1,??_FlashReadUart+1
  5952  0007F0  0E06               	movlw	6
  5953  0007F2                     u7865:
  5954  0007F2  90D8               	bcf	status,0,c
  5955  0007F4  3760               	rlcf	??_FlashReadUart& (0+255),f,b
  5956  0007F6  3761               	rlcf	(??_FlashReadUart+1)& (0+255),f,b
  5957  0007F8  2EE8               	decfsz	wreg,f,c
  5958  0007FA  D7FB               	goto	u7865
  5959  0007FC  C060  F062         	movff	??_FlashReadUart,??_FlashReadUart+2
  5960  000800  C061  F063         	movff	??_FlashReadUart+1,??_FlashReadUart+3
  5961  000804  0E00               	movlw	0
  5962  000806  BF63               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  5963  000808  0EFF               	movlw	255
  5964  00080A  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  5965  00080C  6F65               	movwf	(??_FlashReadUart+5)& (0+255),b
  5966  00080E  5162               	movf	(??_FlashReadUart+2)& (0+255),w,b
  5967  000810  27F9               	addwf	_readAddress& (0+255),f,b
  5968  000812  5163               	movf	(??_FlashReadUart+3)& (0+255),w,b
  5969  000814  23FA               	addwfc	(_readAddress+1)& (0+255),f,b
  5970  000816  5164               	movf	(??_FlashReadUart+4)& (0+255),w,b
  5971  000818  23FB               	addwfc	(_readAddress+2)& (0+255),f,b
  5972  00081A  5165               	movf	(??_FlashReadUart+5)& (0+255),w,b
  5973  00081C  23FC               	addwfc	(_readAddress+3)& (0+255),f,b
  5974                           
  5975                           ; BSR set to: 0
  5976                           ;FlashApp.c: 91: }
  5977                           ;FlashApp.c: 92: }
  5978  00081E  D045               	goto	l314
  5979  000820                     l307:
  5980                           
  5981                           ;FlashApp.c: 93: else
  5982                           ;FlashApp.c: 94: {
  5983                           ;FlashApp.c: 95: numOfSampleToRead = (numOfReadSamples > numOfSampleToRead)? numOfSample
      +                          ToRead : numOfReadSamples;
  5984                           
  5985                           ; BSR set to: 0
  5986  000820  C02C  F060         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  5987  000824  C02D  F061         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  5988  000828  0E00               	movlw	0
  5989  00082A  0100               	movlb	0	; () banked
  5990  00082C  BF61               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  5991  00082E  0EFF               	movlw	255
  5992  000830  6F62               	movwf	(??_FlashReadUart+2)& (0+255),b
  5993  000832  6F63               	movwf	(??_FlashReadUart+3)& (0+255),b
  5994  000834  503C               	movf	_numOfReadSamples,w,c
  5995  000836  5D60               	subwf	??_FlashReadUart& (0+255),w,b
  5996  000838  503D               	movf	_numOfReadSamples+1,w,c
  5997  00083A  5961               	subwfb	(??_FlashReadUart+1)& (0+255),w,b
  5998  00083C  503E               	movf	_numOfReadSamples+2,w,c
  5999  00083E  5962               	subwfb	(??_FlashReadUart+2)& (0+255),w,b
  6000  000840  503F               	movf	_numOfReadSamples+3,w,c
  6001  000842  5963               	subwfb	(??_FlashReadUart+3)& (0+255),w,b
  6002  000844  A0D8               	btfss	status,0,c
  6003  000846  D009               	goto	l316
  6004                           
  6005                           ; BSR set to: 0
  6006  000848  C03C  F0B5         	movff	_numOfReadSamples,_FlashReadUart$582
  6007  00084C  C03D  F0B6         	movff	_numOfReadSamples+1,_FlashReadUart$582+1
  6008  000850  C03E  F0B7         	movff	_numOfReadSamples+2,_FlashReadUart$582+2
  6009  000854  C03F  F0B8         	movff	_numOfReadSamples+3,_FlashReadUart$582+3
  6010  000858  D009               	goto	l318
  6011  00085A                     l316:
  6012                           
  6013                           ; BSR set to: 0
  6014                           
  6015                           ; BSR set to: 0
  6016  00085A  C02C  F0B5         	movff	FlashReadUart@numOfSampleToRead,_FlashReadUart$582
  6017  00085E  C02D  F0B6         	movff	FlashReadUart@numOfSampleToRead+1,_FlashReadUart$582+1
  6018  000862  0E00               	movlw	0
  6019  000864  BFB6               	btfsc	(_FlashReadUart$582+1)& (0+255),7,b
  6020  000866  0EFF               	movlw	-1
  6021  000868  6FB7               	movwf	(_FlashReadUart$582+2)& (0+255),b
  6022  00086A  6FB8               	movwf	(_FlashReadUart$582+3)& (0+255),b
  6023  00086C                     l318:
  6024                           
  6025                           ; BSR set to: 0
  6026                           
  6027                           ; BSR set to: 0
  6028  00086C  C0B5  F02C         	movff	_FlashReadUart$582,FlashReadUart@numOfSampleToRead
  6029  000870  C0B6  F02D         	movff	_FlashReadUart$582+1,FlashReadUart@numOfSampleToRead+1
  6030                           
  6031                           ; BSR set to: 0
  6032                           ;FlashApp.c: 96: readAddress -= numOfSampleToRead * (64);
  6033  000874  C02C  F060         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  6034  000878  C02D  F061         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  6035  00087C  0E06               	movlw	6
  6036  00087E                     u7885:
  6037  00087E  90D8               	bcf	status,0,c
  6038  000880  3760               	rlcf	??_FlashReadUart& (0+255),f,b
  6039  000882  3761               	rlcf	(??_FlashReadUart+1)& (0+255),f,b
  6040  000884  2EE8               	decfsz	wreg,f,c
  6041  000886  D7FB               	goto	u7885
  6042  000888  C060  F062         	movff	??_FlashReadUart,??_FlashReadUart+2
  6043  00088C  C061  F063         	movff	??_FlashReadUart+1,??_FlashReadUart+3
  6044  000890  0E00               	movlw	0
  6045  000892  BF63               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  6046  000894  0EFF               	movlw	255
  6047  000896  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  6048  000898  6F65               	movwf	(??_FlashReadUart+5)& (0+255),b
  6049  00089A  5162               	movf	(??_FlashReadUart+2)& (0+255),w,b
  6050  00089C  5FF9               	subwf	_readAddress& (0+255),f,b
  6051  00089E  5163               	movf	(??_FlashReadUart+3)& (0+255),w,b
  6052  0008A0  5BFA               	subwfb	(_readAddress+1)& (0+255),f,b
  6053  0008A2  5164               	movf	(??_FlashReadUart+4)& (0+255),w,b
  6054  0008A4  5BFB               	subwfb	(_readAddress+2)& (0+255),f,b
  6055  0008A6  5165               	movf	(??_FlashReadUart+5)& (0+255),w,b
  6056  0008A8  5BFC               	subwfb	(_readAddress+3)& (0+255),f,b
  6057  0008AA                     l314:
  6058                           
  6059                           ; BSR set to: 0
  6060                           ;FlashApp.c: 97: }
  6061                           ;FlashApp.c: 99: if (readAddress <= 0x4000)
  6062                           
  6063                           ; BSR set to: 0
  6064  0008AA  51FC               	movf	(_readAddress+3)& (0+255),w,b
  6065  0008AC  11FB               	iorwf	(_readAddress+2)& (0+255),w,b
  6066  0008AE  E13E               	bnz	l7750
  6067  0008B0  05F9               	decf	_readAddress& (0+255),w,b
  6068  0008B2  0E40               	movlw	64
  6069  0008B4  59FA               	subwfb	(_readAddress+1)& (0+255),w,b
  6070  0008B6  B0D8               	btfsc	status,0,c
  6071  0008B8  D039               	goto	l324
  6072  0008BA  D023               	goto	u7920
  6073  0008BC                     l306:
  6074                           
  6075                           ;FlashApp.c: 104: else
  6076                           ;FlashApp.c: 105: {
  6077                           ;FlashApp.c: 106: if ((isReWriteDone) && (readAddress <= writeAddress))
  6078                           
  6079                           ; BSR set to: 0
  6080  0008BC  0100               	movlb	0	; () banked
  6081  0008BE  51CA               	movf	_isReWriteDone& (0+255),w,b
  6082  0008C0  B4D8               	btfsc	status,2,c
  6083  0008C2  D028               	goto	l321
  6084                           
  6085                           ; BSR set to: 0
  6086  0008C4  51F9               	movf	_readAddress& (0+255),w,b
  6087  0008C6  5C40               	subwf	_writeAddress,w,c
  6088  0008C8  51FA               	movf	(_readAddress+1)& (0+255),w,b
  6089  0008CA  5841               	subwfb	_writeAddress+1,w,c
  6090  0008CC  51FB               	movf	(_readAddress+2)& (0+255),w,b
  6091  0008CE  5842               	subwfb	_writeAddress+2,w,c
  6092  0008D0  51FC               	movf	(_readAddress+3)& (0+255),w,b
  6093  0008D2  5843               	subwfb	_writeAddress+3,w,c
  6094  0008D4  A0D8               	btfss	status,0,c
  6095  0008D6  D01E               	goto	l321
  6096                           
  6097                           ; BSR set to: 0
  6098                           ;FlashApp.c: 107: {
  6099                           ;FlashApp.c: 108: readAddress = writeAddress + (64);
  6100  0008D8  0E40               	movlw	64
  6101  0008DA  2440               	addwf	_writeAddress,w,c
  6102  0008DC  6FF9               	movwf	_readAddress& (0+255),b
  6103  0008DE  0E00               	movlw	0
  6104  0008E0  2041               	addwfc	_writeAddress+1,w,c
  6105  0008E2  6FFA               	movwf	(_readAddress+1)& (0+255),b
  6106  0008E4  0E00               	movlw	0
  6107  0008E6  2042               	addwfc	_writeAddress+2,w,c
  6108  0008E8  6FFB               	movwf	(_readAddress+2)& (0+255),b
  6109  0008EA  0E00               	movlw	0
  6110  0008EC  2043               	addwfc	_writeAddress+3,w,c
  6111  0008EE  6FFC               	movwf	(_readAddress+3)& (0+255),b
  6112                           
  6113                           ;FlashApp.c: 109: if (readAddress >= 0x7FF0)
  6114  0008F0  51FC               	movf	(_readAddress+3)& (0+255),w,b
  6115  0008F2  11FB               	iorwf	(_readAddress+2)& (0+255),w,b
  6116  0008F4  E106               	bnz	u7920
  6117  0008F6  0EF0               	movlw	240
  6118  0008F8  5DF9               	subwf	_readAddress& (0+255),w,b
  6119  0008FA  0E7F               	movlw	127
  6120  0008FC  59FA               	subwfb	(_readAddress+1)& (0+255),w,b
  6121  0008FE  A0D8               	btfss	status,0,c
  6122  000900  D015               	goto	l324
  6123  000902                     u7920:
  6124                           
  6125                           ; BSR set to: 0
  6126                           ;FlashApp.c: 110: {
  6127                           ;FlashApp.c: 111: readAddress = 0x4000;
  6128  000902  0E00               	movlw	0
  6129  000904  6FF9               	movwf	_readAddress& (0+255),b
  6130  000906  0E40               	movlw	64
  6131  000908  6FFA               	movwf	(_readAddress+1)& (0+255),b
  6132  00090A  0E00               	movlw	0
  6133  00090C  6FFB               	movwf	(_readAddress+2)& (0+255),b
  6134  00090E  0E00               	movlw	0
  6135  000910  6FFC               	movwf	(_readAddress+3)& (0+255),b
  6136                           
  6137                           ; BSR set to: 0
  6138                           ;FlashApp.c: 112: }
  6139                           ;FlashApp.c: 114: }
  6140  000912  D00C               	goto	l324
  6141  000914                     l321:
  6142                           
  6143                           ; BSR set to: 0
  6144                           ;FlashApp.c: 115: else
  6145                           ;FlashApp.c: 116: {
  6146                           ;FlashApp.c: 117: if(numOfValidateSamples == 0)
  6147                           
  6148                           ; BSR set to: 0
  6149  000914  5030               	movf	_numOfValidateSamples,w,c
  6150  000916  1031               	iorwf	_numOfValidateSamples+1,w,c
  6151  000918  1032               	iorwf	_numOfValidateSamples+2,w,c
  6152  00091A  1033               	iorwf	_numOfValidateSamples+3,w,c
  6153  00091C  A4D8               	btfss	status,2,c
  6154  00091E  D006               	goto	l324
  6155                           
  6156                           ; BSR set to: 0
  6157                           ;FlashApp.c: 118: {
  6158                           ;FlashApp.c: 119: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_NO_SAMPLE_YET
      +                          );
  6159  000920  0E55               	movlw	85
  6160  000922  6E24               	movwf	SendAckMessage@inRequest,c
  6161  000924  0E05               	movlw	5
  6162  000926  EC8C  F017         	call	_SendAckMessage
  6163                           
  6164                           ;FlashApp.c: 120: return;
  6165  00092A  0012               	return	
  6166  00092C                     l324:
  6167  00092C                     l7750:
  6168                           
  6169                           ;FlashApp.c: 121: }
  6170                           ;FlashApp.c: 123: }
  6171                           ;FlashApp.c: 124: }
  6172                           ;FlashApp.c: 127: TxMsg[(0)] = (0x24);
  6173  00092C  0E24               	movlw	36
  6174  00092E  0100               	movlb	0	; () banked
  6175  000930  6F6C               	movwf	FlashReadUart@TxMsg& (0+255),b
  6176                           
  6177                           ;FlashApp.c: 128: TxMsg[(1)] = FLASH_MSG;
  6178  000932  0E05               	movlw	5
  6179  000934  6F6D               	movwf	(FlashReadUart@TxMsg+1)& (0+255),b
  6180                           
  6181                           ;FlashApp.c: 129: TxMsg[(2)] = FLASH_SEND_RAW_DATA;
  6182  000936  0E54               	movlw	84
  6183  000938  6F6E               	movwf	(FlashReadUart@TxMsg+2)& (0+255),b
  6184                           
  6185                           ;FlashApp.c: 130: TxMsg[(3)] = (64);
  6186  00093A  0E40               	movlw	64
  6187  00093C  6F6F               	movwf	(FlashReadUart@TxMsg+3)& (0+255),b
  6188                           
  6189                           ;FlashApp.c: 132: for (j=0; j<numOfSampleToRead; j++)
  6190  00093E  0E00               	movlw	0
  6191  000940  6FBA               	movwf	(FlashReadUart@j+1)& (0+255),b
  6192  000942  0E00               	movlw	0
  6193  000944  6FB9               	movwf	FlashReadUart@j& (0+255),b
  6194  000946  D084               	goto	l325
  6195  000948                     
  6196                           ; BSR set to: 0
  6197                           ;FlashApp.c: 133: {
  6198                           ;FlashApp.c: 135: for(int idx = 0; idx < (64); idx++)
  6199                           
  6200                           ; BSR set to: 0
  6201  000948  0E00               	movlw	0
  6202  00094A  6FBC               	movwf	(FlashReadUart@idx+1)& (0+255),b
  6203  00094C  0E00               	movlw	0
  6204  00094E  6FBB               	movwf	FlashReadUart@idx& (0+255),b
  6205  000950                     l7754:
  6206                           
  6207                           ; BSR set to: 0
  6208  000950  BFBC               	btfsc	(FlashReadUart@idx+1)& (0+255),7,b
  6209  000952  D006               	goto	l327
  6210  000954  51BC               	movf	(FlashReadUart@idx+1)& (0+255),w,b
  6211  000956  E12C               	bnz	l7764
  6212  000958  0E40               	movlw	64
  6213  00095A  5DBB               	subwf	FlashReadUart@idx& (0+255),w,b
  6214  00095C  B0D8               	btfsc	status,0,c
  6215  00095E  D028               	goto	u7950
  6216  000960                     l327:
  6217                           
  6218                           ; BSR set to: 0
  6219                           ;FlashApp.c: 136: {
  6220                           ;FlashApp.c: 137: TxMsg[(0x4) + idx] = FLASH_ReadByte(readAddress + idx);
  6221                           
  6222                           ; BSR set to: 0
  6223  000960  0E04               	movlw	4
  6224  000962  25BB               	addwf	FlashReadUart@idx& (0+255),w,b
  6225  000964  6F60               	movwf	??_FlashReadUart& (0+255),b
  6226  000966  0E00               	movlw	0
  6227  000968  21BC               	addwfc	(FlashReadUart@idx+1)& (0+255),w,b
  6228  00096A  6F61               	movwf	(??_FlashReadUart+1)& (0+255),b
  6229  00096C  0E6C               	movlw	low FlashReadUart@TxMsg
  6230  00096E  2560               	addwf	??_FlashReadUart& (0+255),w,b
  6231  000970  6ED9               	movwf	fsr2l,c
  6232  000972  0E00               	movlw	high FlashReadUart@TxMsg
  6233  000974  2161               	addwfc	(??_FlashReadUart+1)& (0+255),w,b
  6234  000976  6EDA               	movwf	fsr2h,c
  6235  000978  C0BB  F062         	movff	FlashReadUart@idx,??_FlashReadUart+2
  6236  00097C  C0BC  F063         	movff	FlashReadUart@idx+1,??_FlashReadUart+3
  6237  000980  0E00               	movlw	0
  6238  000982  BF63               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  6239  000984  0EFF               	movlw	255
  6240  000986  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  6241  000988  6F65               	movwf	(??_FlashReadUart+5)& (0+255),b
  6242  00098A  51F9               	movf	_readAddress& (0+255),w,b
  6243  00098C  2562               	addwf	(??_FlashReadUart+2)& (0+255),w,b
  6244  00098E  6E18               	movwf	FLASH_ReadByte@flashAddr,c
  6245  000990  51FA               	movf	(_readAddress+1)& (0+255),w,b
  6246  000992  2163               	addwfc	(??_FlashReadUart+3)& (0+255),w,b
  6247  000994  6E19               	movwf	FLASH_ReadByte@flashAddr+1,c
  6248  000996  51FB               	movf	(_readAddress+2)& (0+255),w,b
  6249  000998  2164               	addwfc	(??_FlashReadUart+4)& (0+255),w,b
  6250  00099A  6E1A               	movwf	FLASH_ReadByte@flashAddr+2,c
  6251  00099C  51FC               	movf	(_readAddress+3)& (0+255),w,b
  6252  00099E  2165               	addwfc	(??_FlashReadUart+5)& (0+255),w,b
  6253  0009A0  6E1B               	movwf	FLASH_ReadByte@flashAddr+3,c
  6254  0009A2  EC41  F01C         	call	_FLASH_ReadByte	;wreg free
  6255  0009A6  6EDF               	movwf	indf2,c
  6256  0009A8  0100               	movlb	0	; () banked
  6257  0009AA  4BBB               	infsnz	FlashReadUart@idx& (0+255),f,b
  6258  0009AC  2BBC               	incf	(FlashReadUart@idx+1)& (0+255),f,b
  6259  0009AE  D7D0               	goto	l7754
  6260  0009B0                     u7950:
  6261  0009B0                     l7764:
  6262                           
  6263                           ; BSR set to: 0
  6264                           ;FlashApp.c: 138: }
  6265                           ;FlashApp.c: 140: readAddress += (64);
  6266  0009B0  0E40               	movlw	64
  6267  0009B2  27F9               	addwf	_readAddress& (0+255),f,b
  6268  0009B4  0E00               	movlw	0
  6269  0009B6  23FA               	addwfc	(_readAddress+1)& (0+255),f,b
  6270  0009B8  23FB               	addwfc	(_readAddress+2)& (0+255),f,b
  6271  0009BA  23FC               	addwfc	(_readAddress+3)& (0+255),f,b
  6272                           
  6273                           ;FlashApp.c: 141: if (readAddress >= 0x7FF0)
  6274  0009BC  51FC               	movf	(_readAddress+3)& (0+255),w,b
  6275  0009BE  11FB               	iorwf	(_readAddress+2)& (0+255),w,b
  6276  0009C0  E106               	bnz	u7960
  6277  0009C2  0EF0               	movlw	240
  6278  0009C4  5DF9               	subwf	_readAddress& (0+255),w,b
  6279  0009C6  0E7F               	movlw	127
  6280  0009C8  59FA               	subwfb	(_readAddress+1)& (0+255),w,b
  6281  0009CA  A0D8               	btfss	status,0,c
  6282  0009CC  D008               	goto	l329
  6283  0009CE                     u7960:
  6284                           
  6285                           ; BSR set to: 0
  6286                           ;FlashApp.c: 142: {
  6287                           ;FlashApp.c: 143: readAddress = 0x4000;
  6288  0009CE  0E00               	movlw	0
  6289  0009D0  6FF9               	movwf	_readAddress& (0+255),b
  6290  0009D2  0E40               	movlw	64
  6291  0009D4  6FFA               	movwf	(_readAddress+1)& (0+255),b
  6292  0009D6  0E00               	movlw	0
  6293  0009D8  6FFB               	movwf	(_readAddress+2)& (0+255),b
  6294  0009DA  0E00               	movlw	0
  6295  0009DC  6FFC               	movwf	(_readAddress+3)& (0+255),b
  6296  0009DE                     l329:
  6297                           
  6298                           ; BSR set to: 0
  6299                           ;FlashApp.c: 144: }
  6300                           ;FlashApp.c: 145: TxMsg[(64) + (0x4)] = crc8(TxMsg, (64) + (0x4));
  6301                           
  6302                           ; BSR set to: 0
  6303  0009DE  0E6C               	movlw	low FlashReadUart@TxMsg
  6304  0009E0  6E18               	movwf	crc8@dataArray,c
  6305  0009E2  0E00               	movlw	high FlashReadUart@TxMsg
  6306  0009E4  6E19               	movwf	crc8@dataArray+1,c
  6307  0009E6  0E00               	movlw	0
  6308  0009E8  6E1B               	movwf	crc8@dataSize+1,c
  6309  0009EA  0E44               	movlw	68
  6310  0009EC  6E1A               	movwf	crc8@dataSize,c
  6311  0009EE  ECB5  F017         	call	_crc8	;wreg free
  6312  0009F2  0100               	movlb	0	; () banked
  6313  0009F4  6FB0               	movwf	(FlashReadUart@TxMsg+68)& (0+255),b
  6314                           
  6315                           ; BSR set to: 0
  6316                           ;FlashApp.c: 147: WriteUartMessage(TxMsg, (64) + (0x4) + 1);
  6317  0009F6  0E6C               	movlw	low FlashReadUart@TxMsg
  6318  0009F8  6E19               	movwf	WriteUartMessage@dataBuf,c
  6319  0009FA  0E00               	movlw	high FlashReadUart@TxMsg
  6320  0009FC  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  6321  0009FE  0E00               	movlw	0
  6322  000A00  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  6323  000A02  0E45               	movlw	69
  6324  000A04  6E1B               	movwf	WriteUartMessage@dataSize,c
  6325  000A06  ECFC  F019         	call	_WriteUartMessage	;wreg free
  6326                           
  6327                           ;FlashApp.c: 149: if(numOfValidateSamples)
  6328  000A0A  5030               	movf	_numOfValidateSamples,w,c
  6329  000A0C  1031               	iorwf	_numOfValidateSamples+1,w,c
  6330  000A0E  1032               	iorwf	_numOfValidateSamples+2,w,c
  6331  000A10  1033               	iorwf	_numOfValidateSamples+3,w,c
  6332  000A12  B4D8               	btfsc	status,2,c
  6333  000A14  D01A               	goto	l332
  6334                           
  6335                           ;FlashApp.c: 150: {
  6336                           ;FlashApp.c: 151: if (numOfReadSamples < ((0x4000-0x7FF0)/(64)))
  6337  000A16  043C               	decf	_numOfReadSamples,w,c
  6338  000A18  0EFF               	movlw	255
  6339  000A1A  583D               	subwfb	_numOfReadSamples+1,w,c
  6340  000A1C  0EFF               	movlw	255
  6341  000A1E  583E               	subwfb	_numOfReadSamples+2,w,c
  6342  000A20  0EFF               	movlw	255
  6343  000A22  583F               	subwfb	_numOfReadSamples+3,w,c
  6344  000A24  B0D8               	btfsc	status,0,c
  6345  000A26  D006               	goto	l331
  6346                           
  6347                           ;FlashApp.c: 152: {
  6348                           ;FlashApp.c: 153: numOfReadSamples++;
  6349  000A28  0E01               	movlw	1
  6350  000A2A  263C               	addwf	_numOfReadSamples,f,c
  6351  000A2C  0E00               	movlw	0
  6352  000A2E  223D               	addwfc	_numOfReadSamples+1,f,c
  6353  000A30  223E               	addwfc	_numOfReadSamples+2,f,c
  6354  000A32  223F               	addwfc	_numOfReadSamples+3,f,c
  6355  000A34                     l331:
  6356                           
  6357                           ;FlashApp.c: 154: }
  6358                           ;FlashApp.c: 155: if (numOfValidateSamples > 0)
  6359  000A34  5030               	movf	_numOfValidateSamples,w,c
  6360  000A36  1031               	iorwf	_numOfValidateSamples+1,w,c
  6361  000A38  1032               	iorwf	_numOfValidateSamples+2,w,c
  6362  000A3A  1033               	iorwf	_numOfValidateSamples+3,w,c
  6363  000A3C  B4D8               	btfsc	status,2,c
  6364  000A3E  D005               	goto	l332
  6365                           
  6366                           ;FlashApp.c: 156: {
  6367                           ;FlashApp.c: 157: numOfValidateSamples--;
  6368  000A40  0630               	decf	_numOfValidateSamples,f,c
  6369  000A42  0E00               	movlw	0
  6370  000A44  5A31               	subwfb	_numOfValidateSamples+1,f,c
  6371  000A46  5A32               	subwfb	_numOfValidateSamples+2,f,c
  6372  000A48  5A33               	subwfb	_numOfValidateSamples+3,f,c
  6373  000A4A                     l332:
  6374  000A4A  0100               	movlb	0	; () banked
  6375  000A4C  4BB9               	infsnz	FlashReadUart@j& (0+255),f,b
  6376  000A4E  2BBA               	incf	(FlashReadUart@j+1)& (0+255),f,b
  6377  000A50                     l325:
  6378                           
  6379                           ; BSR set to: 0
  6380                           
  6381                           ; BSR set to: 0
  6382  000A50  502C               	movf	FlashReadUart@numOfSampleToRead,w,c
  6383  000A52  5DB9               	subwf	FlashReadUart@j& (0+255),w,b
  6384  000A54  51BA               	movf	(FlashReadUart@j+1)& (0+255),w,b
  6385  000A56  0A80               	xorlw	128
  6386  000A58  6F60               	movwf	??_FlashReadUart& (0+255),b
  6387  000A5A  502D               	movf	FlashReadUart@numOfSampleToRead+1,w,c
  6388  000A5C  0A80               	xorlw	128
  6389  000A5E  5960               	subwfb	??_FlashReadUart& (0+255),w,b
  6390  000A60  B0D8               	btfsc	status,0,c
  6391  000A62  0012               	return	
  6392  000A64  D771               	goto	l326
  6393  000A66                     __end_of_FlashReadUart:
  6394                           	opt stack 0
  6395                           tosu	equ	0xFFF
  6396                           tosh	equ	0xFFE
  6397                           tosl	equ	0xFFD
  6398                           pclath	equ	0xFFA
  6399                           tblptru	equ	0xFF8
  6400                           tblptrh	equ	0xFF7
  6401                           tblptrl	equ	0xFF6
  6402                           tablat	equ	0xFF5
  6403                           prodh	equ	0xFF4
  6404                           prodl	equ	0xFF3
  6405                           intcon	equ	0xFF2
  6406                           postinc0	equ	0xFEE
  6407                           plusw0	equ	0xFEB
  6408                           wreg	equ	0xFE8
  6409                           indf1	equ	0xFE7
  6410                           postdec1	equ	0xFE5
  6411                           fsr1h	equ	0xFE2
  6412                           fsr1l	equ	0xFE1
  6413                           indf2	equ	0xFDF
  6414                           postinc2	equ	0xFDE
  6415                           postdec2	equ	0xFDD
  6416                           plusw2	equ	0xFDB
  6417                           fsr2h	equ	0xFDA
  6418                           fsr2l	equ	0xFD9
  6419                           status	equ	0xFD8
  6420                           
  6421 ;; *************** function _abs *****************
  6422 ;; Defined at:
  6423 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abs.c"
  6424 ;; Parameters:    Size  Location     Type
  6425 ;;  a               2   23[COMRAM] int 
  6426 ;; Auto vars:     Size  Location     Type
  6427 ;;		None
  6428 ;; Return value:  Size  Location     Type
  6429 ;;                  2   23[COMRAM] int 
  6430 ;; Registers used:
  6431 ;;		wreg, status,2, status,0
  6432 ;; Tracked objects:
  6433 ;;		On entry : 0/0
  6434 ;;		On exit  : 0/0
  6435 ;;		Unchanged: 0/0
  6436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6437 ;;      Params:         2       0       0       0       0       0       0
  6438 ;;      Locals:         0       0       0       0       0       0       0
  6439 ;;      Temps:          2       0       0       0       0       0       0
  6440 ;;      Totals:         4       0       0       0       0       0       0
  6441 ;;Total ram usage:        4 bytes
  6442 ;; Hardware stack levels used:    1
  6443 ;; Hardware stack levels required when called:    3
  6444 ;; This function calls:
  6445 ;;		Nothing
  6446 ;; This function is called by:
  6447 ;;		_FlashReadUart
  6448 ;; This function uses a non-reentrant model
  6449 ;;
  6450                           
  6451                           	psect	text29
  6452  003630                     __ptext29:
  6453                           	opt stack 0
  6454  003630                     _abs:
  6455                           	opt stack 24
  6456                           
  6457                           ;incstack = 0
  6458  003630  AE19               	btfss	abs@a+1,7,c
  6459  003632  D00D               	goto	l1511
  6460  003634  C018  F01A         	movff	abs@a,??_abs
  6461  003638  C019  F01B         	movff	abs@a+1,??_abs+1
  6462  00363C  1E1A               	comf	??_abs,f,c
  6463  00363E  1E1B               	comf	??_abs+1,f,c
  6464  003640  4A1A               	infsnz	??_abs,f,c
  6465  003642  2A1B               	incf	??_abs+1,f,c
  6466  003644  C01A  F018         	movff	??_abs,?_abs
  6467  003648  C01B  F019         	movff	??_abs+1,?_abs+1
  6468  00364C  0012               	return	
  6469  00364E                     l1511:
  6470  00364E  C018  F018         	movff	abs@a,?_abs
  6471  003652  C019  F019         	movff	abs@a+1,?_abs+1
  6472  003656  0012               	return		;funcret
  6473  003658                     __end_of_abs:
  6474                           	opt stack 0
  6475                           tosu	equ	0xFFF
  6476                           tosh	equ	0xFFE
  6477                           tosl	equ	0xFFD
  6478                           pclath	equ	0xFFA
  6479                           tblptru	equ	0xFF8
  6480                           tblptrh	equ	0xFF7
  6481                           tblptrl	equ	0xFF6
  6482                           tablat	equ	0xFF5
  6483                           prodh	equ	0xFF4
  6484                           prodl	equ	0xFF3
  6485                           intcon	equ	0xFF2
  6486                           postinc0	equ	0xFEE
  6487                           plusw0	equ	0xFEB
  6488                           wreg	equ	0xFE8
  6489                           indf1	equ	0xFE7
  6490                           postdec1	equ	0xFE5
  6491                           fsr1h	equ	0xFE2
  6492                           fsr1l	equ	0xFE1
  6493                           indf2	equ	0xFDF
  6494                           postinc2	equ	0xFDE
  6495                           postdec2	equ	0xFDD
  6496                           plusw2	equ	0xFDB
  6497                           fsr2h	equ	0xFDA
  6498                           fsr2l	equ	0xFD9
  6499                           status	equ	0xFD8
  6500                           
  6501 ;; *************** function _FLASH_ReadByte *****************
  6502 ;; Defined at:
  6503 ;;		line 58 in file "mcc_generated_files/memory.c"
  6504 ;; Parameters:    Size  Location     Type
  6505 ;;  flashAddr       4   23[COMRAM] unsigned long 
  6506 ;; Auto vars:     Size  Location     Type
  6507 ;;		None
  6508 ;; Return value:  Size  Location     Type
  6509 ;;                  1    wreg      unsigned char 
  6510 ;; Registers used:
  6511 ;;		wreg, status,2
  6512 ;; Tracked objects:
  6513 ;;		On entry : 0/0
  6514 ;;		On exit  : 0/0
  6515 ;;		Unchanged: 0/0
  6516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6517 ;;      Params:         4       0       0       0       0       0       0
  6518 ;;      Locals:         0       0       0       0       0       0       0
  6519 ;;      Temps:          0       0       0       0       0       0       0
  6520 ;;      Totals:         4       0       0       0       0       0       0
  6521 ;;Total ram usage:        4 bytes
  6522 ;; Hardware stack levels used:    1
  6523 ;; Hardware stack levels required when called:    3
  6524 ;; This function calls:
  6525 ;;		Nothing
  6526 ;; This function is called by:
  6527 ;;		_FlashReadUart
  6528 ;;		_FlashTest
  6529 ;;		_FLASH_ReadWord
  6530 ;;		_FLASH_WriteByte
  6531 ;; This function uses a non-reentrant model
  6532 ;;
  6533                           
  6534                           	psect	text30
  6535  003882                     __ptext30:
  6536                           	opt stack 0
  6537  003882                     _FLASH_ReadByte:
  6538                           	opt stack 24
  6539                           
  6540                           ;memory.c: 60: TBLPTRU = (uint8_t)((flashAddr & 0x00FF0000) >> 16);
  6541                           
  6542                           ;incstack = 0
  6543  003882  C01A  FFF8         	movff	FLASH_ReadByte@flashAddr+2,tblptru	;volatile
  6544                           
  6545                           ;memory.c: 61: TBLPTRH = (uint8_t)((flashAddr & 0x0000FF00)>> 8);
  6546  003886  C019  FFF7         	movff	FLASH_ReadByte@flashAddr+1,tblptrh	;volatile
  6547                           
  6548                           ;memory.c: 62: TBLPTRL = (uint8_t)(flashAddr & 0x000000FF);
  6549  00388A  C018  FFF6         	movff	FLASH_ReadByte@flashAddr,tblptrl	;volatile
  6550  00388E  0008               	tblrd		*	;# 
  6551                           
  6552                           ;memory.c: 66: return (TABLAT);
  6553  003890  50F5               	movf	tablat,w,c	;volatile
  6554  003892  0012               	return	
  6555  003894                     __end_of_FLASH_ReadByte:
  6556                           	opt stack 0
  6557                           tosu	equ	0xFFF
  6558                           tosh	equ	0xFFE
  6559                           tosl	equ	0xFFD
  6560                           pclath	equ	0xFFA
  6561                           tblptru	equ	0xFF8
  6562                           tblptrh	equ	0xFF7
  6563                           tblptrl	equ	0xFF6
  6564                           tablat	equ	0xFF5
  6565                           prodh	equ	0xFF4
  6566                           prodl	equ	0xFF3
  6567                           intcon	equ	0xFF2
  6568                           postinc0	equ	0xFEE
  6569                           plusw0	equ	0xFEB
  6570                           wreg	equ	0xFE8
  6571                           indf1	equ	0xFE7
  6572                           postdec1	equ	0xFE5
  6573                           fsr1h	equ	0xFE2
  6574                           fsr1l	equ	0xFE1
  6575                           indf2	equ	0xFDF
  6576                           postinc2	equ	0xFDE
  6577                           postdec2	equ	0xFDD
  6578                           plusw2	equ	0xFDB
  6579                           fsr2h	equ	0xFDA
  6580                           fsr2l	equ	0xFD9
  6581                           status	equ	0xFD8
  6582                           
  6583 ;; *************** function _FlashReadCondition *****************
  6584 ;; Defined at:
  6585 ;;		line 178 in file "FlashApp.c"
  6586 ;; Parameters:    Size  Location     Type
  6587 ;;		None
  6588 ;; Auto vars:     Size  Location     Type
  6589 ;;  TxMsg           9    0[BANK0 ] unsigned char [9]
  6590 ;; Return value:  Size  Location     Type
  6591 ;;                  1    wreg      void 
  6592 ;; Registers used:
  6593 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6594 ;; Tracked objects:
  6595 ;;		On entry : 0/0
  6596 ;;		On exit  : 0/0
  6597 ;;		Unchanged: 0/0
  6598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6599 ;;      Params:         0       0       0       0       0       0       0
  6600 ;;      Locals:         0       9       0       0       0       0       0
  6601 ;;      Temps:          4       0       0       0       0       0       0
  6602 ;;      Totals:         4       9       0       0       0       0       0
  6603 ;;Total ram usage:       13 bytes
  6604 ;; Hardware stack levels used:    1
  6605 ;; Hardware stack levels required when called:    5
  6606 ;; This function calls:
  6607 ;;		_WriteUartMessage
  6608 ;;		_ZeroArray
  6609 ;;		_crc8
  6610 ;;		_make8
  6611 ;; This function is called by:
  6612 ;;		_GroupFlashMemory
  6613 ;; This function uses a non-reentrant model
  6614 ;;
  6615                           
  6616                           	psect	text31
  6617  0018D8                     __ptext31:
  6618                           	opt stack 0
  6619  0018D8                     _FlashReadCondition:
  6620                           	opt stack 23
  6621                           
  6622                           ;FlashApp.c: 181: char TxMsg[4 + (0x4) + 1];
  6623                           ;FlashApp.c: 182: ZeroArray(TxMsg, 4 + (0x4) + 1);
  6624                           
  6625                           ;incstack = 0
  6626  0018D8  0E60               	movlw	low FlashReadCondition@TxMsg
  6627  0018DA  6E20               	movwf	ZeroArray@array,c
  6628  0018DC  0E00               	movlw	high FlashReadCondition@TxMsg
  6629  0018DE  6E21               	movwf	ZeroArray@array+1,c
  6630  0018E0  0E00               	movlw	0
  6631  0018E2  6E23               	movwf	ZeroArray@size+1,c
  6632  0018E4  0E09               	movlw	9
  6633  0018E6  6E22               	movwf	ZeroArray@size,c
  6634  0018E8  ECC8  F01B         	call	_ZeroArray	;wreg free
  6635                           
  6636                           ;FlashApp.c: 185: TxMsg[(0)] = (0x24);
  6637  0018EC  0E24               	movlw	36
  6638  0018EE  0100               	movlb	0	; () banked
  6639  0018F0  6F60               	movwf	FlashReadCondition@TxMsg& (0+255),b
  6640                           
  6641                           ; BSR set to: 0
  6642                           ;FlashApp.c: 186: TxMsg[(1)] = FLASH_MSG;
  6643  0018F2  0E05               	movlw	5
  6644  0018F4  6F61               	movwf	(FlashReadCondition@TxMsg+1)& (0+255),b
  6645                           
  6646                           ; BSR set to: 0
  6647                           ;FlashApp.c: 187: TxMsg[(2)] = FLASH_READ_CONDITION;
  6648  0018F6  0E52               	movlw	82
  6649  0018F8  6F62               	movwf	(FlashReadCondition@TxMsg+2)& (0+255),b
  6650                           
  6651                           ; BSR set to: 0
  6652                           ;FlashApp.c: 188: TxMsg[(3)] = 4;
  6653  0018FA  0E04               	movlw	4
  6654  0018FC  6F63               	movwf	(FlashReadCondition@TxMsg+3)& (0+255),b
  6655                           
  6656                           ; BSR set to: 0
  6657                           ;FlashApp.c: 193: TxMsg[(0x4) + 0] = make8(0x7FF0 - 0x4000,1);
  6658  0018FE  0EF0               	movlw	240
  6659  001900  6E18               	movwf	make8@data,c
  6660  001902  0E3F               	movlw	63
  6661  001904  6E19               	movwf	make8@data+1,c
  6662  001906  0E00               	movlw	0
  6663  001908  6E1A               	movwf	make8@data+2,c
  6664  00190A  0E00               	movlw	0
  6665  00190C  6E1B               	movwf	make8@data+3,c
  6666  00190E  0E01               	movlw	1
  6667  001910  6E1C               	movwf	make8@dataLocation,c
  6668  001912  EC2E  F016         	call	_make8	;wreg free
  6669  001916  0100               	movlb	0	; () banked
  6670  001918  6F64               	movwf	(FlashReadCondition@TxMsg+4)& (0+255),b
  6671                           
  6672                           ; BSR set to: 0
  6673                           ;FlashApp.c: 194: TxMsg[(0x4) + 1] = make8(0x7FF0 - 0x4000,0);
  6674  00191A  0EF0               	movlw	240
  6675  00191C  6E18               	movwf	make8@data,c
  6676  00191E  0E3F               	movlw	63
  6677  001920  6E19               	movwf	make8@data+1,c
  6678  001922  0E00               	movlw	0
  6679  001924  6E1A               	movwf	make8@data+2,c
  6680  001926  0E00               	movlw	0
  6681  001928  6E1B               	movwf	make8@data+3,c
  6682  00192A  0E00               	movlw	0
  6683  00192C  6E1C               	movwf	make8@dataLocation,c
  6684  00192E  EC2E  F016         	call	_make8	;wreg free
  6685  001932  0100               	movlb	0	; () banked
  6686  001934  6F65               	movwf	(FlashReadCondition@TxMsg+5)& (0+255),b
  6687                           
  6688                           ; BSR set to: 0
  6689                           ;FlashApp.c: 197: TxMsg[(0x4) + 2] = make8(0x7FF0 - writeAddress,1);
  6690  001936  C040  F024         	movff	_writeAddress,??_FlashReadCondition
  6691  00193A  C041  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  6692  00193E  C042  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  6693  001942  C043  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  6694  001946  1E24               	comf	??_FlashReadCondition,f,c
  6695  001948  1E25               	comf	??_FlashReadCondition+1,f,c
  6696  00194A  1E26               	comf	??_FlashReadCondition+2,f,c
  6697  00194C  1E27               	comf	??_FlashReadCondition+3,f,c
  6698  00194E  2A24               	incf	??_FlashReadCondition,f,c
  6699  001950  0E00               	movlw	0
  6700  001952  2225               	addwfc	??_FlashReadCondition+1,f,c
  6701  001954  2226               	addwfc	??_FlashReadCondition+2,f,c
  6702  001956  2227               	addwfc	??_FlashReadCondition+3,f,c
  6703  001958  0EF0               	movlw	240
  6704  00195A  2424               	addwf	??_FlashReadCondition,w,c
  6705  00195C  6E18               	movwf	make8@data,c
  6706  00195E  0E7F               	movlw	127
  6707  001960  2025               	addwfc	??_FlashReadCondition+1,w,c
  6708  001962  6E19               	movwf	make8@data+1,c
  6709  001964  0E00               	movlw	0
  6710  001966  2026               	addwfc	??_FlashReadCondition+2,w,c
  6711  001968  6E1A               	movwf	make8@data+2,c
  6712  00196A  0E00               	movlw	0
  6713  00196C  2027               	addwfc	??_FlashReadCondition+3,w,c
  6714  00196E  6E1B               	movwf	make8@data+3,c
  6715  001970  0E01               	movlw	1
  6716  001972  6E1C               	movwf	make8@dataLocation,c
  6717  001974  EC2E  F016         	call	_make8	;wreg free
  6718  001978  0100               	movlb	0	; () banked
  6719  00197A  6F66               	movwf	(FlashReadCondition@TxMsg+6)& (0+255),b
  6720                           
  6721                           ; BSR set to: 0
  6722                           ;FlashApp.c: 198: TxMsg[(0x4) + 3] = make8(0x7FF0 - writeAddress,0);
  6723  00197C  C040  F024         	movff	_writeAddress,??_FlashReadCondition
  6724  001980  C041  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  6725  001984  C042  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  6726  001988  C043  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  6727  00198C  1E24               	comf	??_FlashReadCondition,f,c
  6728  00198E  1E25               	comf	??_FlashReadCondition+1,f,c
  6729  001990  1E26               	comf	??_FlashReadCondition+2,f,c
  6730  001992  1E27               	comf	??_FlashReadCondition+3,f,c
  6731  001994  2A24               	incf	??_FlashReadCondition,f,c
  6732  001996  0E00               	movlw	0
  6733  001998  2225               	addwfc	??_FlashReadCondition+1,f,c
  6734  00199A  2226               	addwfc	??_FlashReadCondition+2,f,c
  6735  00199C  2227               	addwfc	??_FlashReadCondition+3,f,c
  6736  00199E  0EF0               	movlw	240
  6737  0019A0  2424               	addwf	??_FlashReadCondition,w,c
  6738  0019A2  6E18               	movwf	make8@data,c
  6739  0019A4  0E7F               	movlw	127
  6740  0019A6  2025               	addwfc	??_FlashReadCondition+1,w,c
  6741  0019A8  6E19               	movwf	make8@data+1,c
  6742  0019AA  0E00               	movlw	0
  6743  0019AC  2026               	addwfc	??_FlashReadCondition+2,w,c
  6744  0019AE  6E1A               	movwf	make8@data+2,c
  6745  0019B0  0E00               	movlw	0
  6746  0019B2  2027               	addwfc	??_FlashReadCondition+3,w,c
  6747  0019B4  6E1B               	movwf	make8@data+3,c
  6748  0019B6  0E00               	movlw	0
  6749  0019B8  6E1C               	movwf	make8@dataLocation,c
  6750  0019BA  EC2E  F016         	call	_make8	;wreg free
  6751  0019BE  0100               	movlb	0	; () banked
  6752  0019C0  6F67               	movwf	(FlashReadCondition@TxMsg+7)& (0+255),b
  6753                           
  6754                           ;FlashApp.c: 200: TxMsg[4 + (0x4)] = crc8(TxMsg, 4 + (0x4));
  6755  0019C2  0E60               	movlw	low FlashReadCondition@TxMsg
  6756  0019C4  6E18               	movwf	crc8@dataArray,c
  6757  0019C6  0E00               	movlw	high FlashReadCondition@TxMsg
  6758  0019C8  6E19               	movwf	crc8@dataArray+1,c
  6759  0019CA  0E00               	movlw	0
  6760  0019CC  6E1B               	movwf	crc8@dataSize+1,c
  6761  0019CE  0E08               	movlw	8
  6762  0019D0  6E1A               	movwf	crc8@dataSize,c
  6763  0019D2  ECB5  F017         	call	_crc8	;wreg free
  6764  0019D6  0100               	movlb	0	; () banked
  6765  0019D8  6F68               	movwf	(FlashReadCondition@TxMsg+8)& (0+255),b
  6766                           
  6767                           ; BSR set to: 0
  6768                           ;FlashApp.c: 202: WriteUartMessage(TxMsg, 4 + (0x4) + 1);
  6769  0019DA  0E60               	movlw	low FlashReadCondition@TxMsg
  6770  0019DC  6E19               	movwf	WriteUartMessage@dataBuf,c
  6771  0019DE  0E00               	movlw	high FlashReadCondition@TxMsg
  6772  0019E0  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  6773  0019E2  0E00               	movlw	0
  6774  0019E4  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  6775  0019E6  0E09               	movlw	9
  6776  0019E8  6E1B               	movwf	WriteUartMessage@dataSize,c
  6777  0019EA  ECFC  F019         	call	_WriteUartMessage	;wreg free
  6778  0019EE  0012               	return		;funcret
  6779  0019F0                     __end_of_FlashReadCondition:
  6780                           	opt stack 0
  6781                           tosu	equ	0xFFF
  6782                           tosh	equ	0xFFE
  6783                           tosl	equ	0xFFD
  6784                           pclath	equ	0xFFA
  6785                           tblptru	equ	0xFF8
  6786                           tblptrh	equ	0xFF7
  6787                           tblptrl	equ	0xFF6
  6788                           tablat	equ	0xFF5
  6789                           prodh	equ	0xFF4
  6790                           prodl	equ	0xFF3
  6791                           intcon	equ	0xFF2
  6792                           postinc0	equ	0xFEE
  6793                           plusw0	equ	0xFEB
  6794                           wreg	equ	0xFE8
  6795                           indf1	equ	0xFE7
  6796                           postdec1	equ	0xFE5
  6797                           fsr1h	equ	0xFE2
  6798                           fsr1l	equ	0xFE1
  6799                           indf2	equ	0xFDF
  6800                           postinc2	equ	0xFDE
  6801                           postdec2	equ	0xFDD
  6802                           plusw2	equ	0xFDB
  6803                           fsr2h	equ	0xFDA
  6804                           fsr2l	equ	0xFD9
  6805                           status	equ	0xFD8
  6806                           
  6807 ;; *************** function _FlashEreaseMem *****************
  6808 ;; Defined at:
  6809 ;;		line 168 in file "FlashApp.c"
  6810 ;; Parameters:    Size  Location     Type
  6811 ;;		None
  6812 ;; Auto vars:     Size  Location     Type
  6813 ;;		None
  6814 ;; Return value:  Size  Location     Type
  6815 ;;                  1    wreg      void 
  6816 ;; Registers used:
  6817 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6818 ;; Tracked objects:
  6819 ;;		On entry : 0/0
  6820 ;;		On exit  : 0/0
  6821 ;;		Unchanged: 0/0
  6822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6823 ;;      Params:         0       0       0       0       0       0       0
  6824 ;;      Locals:         0       0       0       0       0       0       0
  6825 ;;      Temps:          0       0       0       0       0       0       0
  6826 ;;      Totals:         0       0       0       0       0       0       0
  6827 ;;Total ram usage:        0 bytes
  6828 ;; Hardware stack levels used:    1
  6829 ;; Hardware stack levels required when called:    6
  6830 ;; This function calls:
  6831 ;;		_SendAckMessage
  6832 ;;		_ZeroArray
  6833 ;; This function is called by:
  6834 ;;		_GroupFlashMemory
  6835 ;; This function uses a non-reentrant model
  6836 ;;
  6837                           
  6838                           	psect	text32
  6839  002EC6                     __ptext32:
  6840                           	opt stack 0
  6841  002EC6                     _FlashEreaseMem:
  6842                           	opt stack 22
  6843                           
  6844                           ;FlashApp.c: 170: writeAddress = 0x4000;
  6845                           
  6846                           ;incstack = 0
  6847  002EC6  0E00               	movlw	0
  6848  002EC8  6E40               	movwf	_writeAddress,c
  6849  002ECA  0E40               	movlw	64
  6850  002ECC  6E41               	movwf	_writeAddress+1,c
  6851  002ECE  0E00               	movlw	0
  6852  002ED0  6E42               	movwf	_writeAddress+2,c
  6853  002ED2  0E00               	movlw	0
  6854  002ED4  6E43               	movwf	_writeAddress+3,c
  6855                           
  6856                           ;FlashApp.c: 171: readAddress = 0x4000;
  6857  002ED6  0E00               	movlw	0
  6858  002ED8  0100               	movlb	0	; () banked
  6859  002EDA  6FF9               	movwf	_readAddress& (0+255),b
  6860  002EDC  0E40               	movlw	64
  6861  002EDE  6FFA               	movwf	(_readAddress+1)& (0+255),b
  6862  002EE0  0E00               	movlw	0
  6863  002EE2  6FFB               	movwf	(_readAddress+2)& (0+255),b
  6864  002EE4  0E00               	movlw	0
  6865  002EE6  6FFC               	movwf	(_readAddress+3)& (0+255),b
  6866                           
  6867                           ;FlashApp.c: 172: numOfValidateSamples = 0;
  6868  002EE8  0E00               	movlw	0
  6869  002EEA  6E30               	movwf	_numOfValidateSamples,c
  6870  002EEC  0E00               	movlw	0
  6871  002EEE  6E31               	movwf	_numOfValidateSamples+1,c
  6872  002EF0  0E00               	movlw	0
  6873  002EF2  6E32               	movwf	_numOfValidateSamples+2,c
  6874  002EF4  0E00               	movlw	0
  6875  002EF6  6E33               	movwf	_numOfValidateSamples+3,c
  6876                           
  6877                           ; BSR set to: 0
  6878                           ;FlashApp.c: 173: ZeroArray(sampleArray, (64)/sizeof(adc_result_t));
  6879  002EF8  0E6E               	movlw	low _sampleArray
  6880  002EFA  6E20               	movwf	ZeroArray@array,c
  6881  002EFC  0E01               	movlw	high _sampleArray
  6882  002EFE  6E21               	movwf	ZeroArray@array+1,c
  6883  002F00  0E00               	movlw	0
  6884  002F02  6E23               	movwf	ZeroArray@size+1,c
  6885  002F04  0E20               	movlw	32
  6886  002F06  6E22               	movwf	ZeroArray@size,c
  6887  002F08  ECC8  F01B         	call	_ZeroArray	;wreg free
  6888                           
  6889                           ;FlashApp.c: 174: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_EREASE_MEMORY
      +                          );
  6890  002F0C  0E51               	movlw	81
  6891  002F0E  6E24               	movwf	SendAckMessage@inRequest,c
  6892  002F10  0E05               	movlw	5
  6893  002F12  EC8C  F017         	call	_SendAckMessage
  6894  002F16  0012               	return		;funcret
  6895  002F18                     __end_of_FlashEreaseMem:
  6896                           	opt stack 0
  6897                           tosu	equ	0xFFF
  6898                           tosh	equ	0xFFE
  6899                           tosl	equ	0xFFD
  6900                           pclath	equ	0xFFA
  6901                           tblptru	equ	0xFF8
  6902                           tblptrh	equ	0xFF7
  6903                           tblptrl	equ	0xFF6
  6904                           tablat	equ	0xFF5
  6905                           prodh	equ	0xFF4
  6906                           prodl	equ	0xFF3
  6907                           intcon	equ	0xFF2
  6908                           postinc0	equ	0xFEE
  6909                           plusw0	equ	0xFEB
  6910                           wreg	equ	0xFE8
  6911                           indf1	equ	0xFE7
  6912                           postdec1	equ	0xFE5
  6913                           fsr1h	equ	0xFE2
  6914                           fsr1l	equ	0xFE1
  6915                           indf2	equ	0xFDF
  6916                           postinc2	equ	0xFDE
  6917                           postdec2	equ	0xFDD
  6918                           plusw2	equ	0xFDB
  6919                           fsr2h	equ	0xFDA
  6920                           fsr2l	equ	0xFD9
  6921                           status	equ	0xFD8
  6922                           
  6923 ;; *************** function _DacSetValue *****************
  6924 ;; Defined at:
  6925 ;;		line 42 in file "DacApp.c"
  6926 ;; Parameters:    Size  Location     Type
  6927 ;;  data            2   43[COMRAM] PTR unsigned char 
  6928 ;;		 -> rxMsgData(20), 
  6929 ;; Auto vars:     Size  Location     Type
  6930 ;;		None
  6931 ;; Return value:  Size  Location     Type
  6932 ;;                  1    wreg      void 
  6933 ;; Registers used:
  6934 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6935 ;; Tracked objects:
  6936 ;;		On entry : 0/0
  6937 ;;		On exit  : 0/0
  6938 ;;		Unchanged: 0/0
  6939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6940 ;;      Params:         2       0       0       0       0       0       0
  6941 ;;      Locals:         0       0       0       0       0       0       0
  6942 ;;      Temps:          0       0       0       0       0       0       0
  6943 ;;      Totals:         2       0       0       0       0       0       0
  6944 ;;Total ram usage:        2 bytes
  6945 ;; Hardware stack levels used:    1
  6946 ;; Hardware stack levels required when called:    6
  6947 ;; This function calls:
  6948 ;;		_SendAckMessage
  6949 ;; This function is called by:
  6950 ;;		_GroupDAC
  6951 ;; This function uses a non-reentrant model
  6952 ;;
  6953                           
  6954                           	psect	text33
  6955  0038FA                     __ptext33:
  6956                           	opt stack 0
  6957  0038FA                     _DacSetValue:
  6958                           	opt stack 22
  6959                           
  6960                           ;DacApp.c: 52: SendAckMessage((MSG_GROUPS)DAC_MSG, (MSG_REQUEST)DAC_SET_VALUE);
  6961                           
  6962                           ;incstack = 0
  6963  0038FA  0E61               	movlw	97
  6964  0038FC  6E24               	movwf	SendAckMessage@inRequest,c
  6965  0038FE  0E06               	movlw	6
  6966  003900  EC8C  F017         	call	_SendAckMessage
  6967  003904  0012               	return		;funcret
  6968  003906                     __end_of_DacSetValue:
  6969                           	opt stack 0
  6970                           tosu	equ	0xFFF
  6971                           tosh	equ	0xFFE
  6972                           tosl	equ	0xFFD
  6973                           pclath	equ	0xFFA
  6974                           tblptru	equ	0xFF8
  6975                           tblptrh	equ	0xFF7
  6976                           tblptrl	equ	0xFF6
  6977                           tablat	equ	0xFF5
  6978                           prodh	equ	0xFF4
  6979                           prodl	equ	0xFF3
  6980                           intcon	equ	0xFF2
  6981                           postinc0	equ	0xFEE
  6982                           plusw0	equ	0xFEB
  6983                           wreg	equ	0xFE8
  6984                           indf1	equ	0xFE7
  6985                           postdec1	equ	0xFE5
  6986                           fsr1h	equ	0xFE2
  6987                           fsr1l	equ	0xFE1
  6988                           indf2	equ	0xFDF
  6989                           postinc2	equ	0xFDE
  6990                           postdec2	equ	0xFDD
  6991                           plusw2	equ	0xFDB
  6992                           fsr2h	equ	0xFDA
  6993                           fsr2l	equ	0xFD9
  6994                           status	equ	0xFD8
  6995                           
  6996 ;; *************** function _testLeds *****************
  6997 ;; Defined at:
  6998 ;;		line 43 in file "LedsApp.c"
  6999 ;; Parameters:    Size  Location     Type
  7000 ;;		None
  7001 ;; Auto vars:     Size  Location     Type
  7002 ;;  idx             2   44[COMRAM] int 
  7003 ;; Return value:  Size  Location     Type
  7004 ;;                  1    wreg      void 
  7005 ;; Registers used:
  7006 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7007 ;; Tracked objects:
  7008 ;;		On entry : 0/0
  7009 ;;		On exit  : 0/0
  7010 ;;		Unchanged: 0/0
  7011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7012 ;;      Params:         0       0       0       0       0       0       0
  7013 ;;      Locals:         2       0       0       0       0       0       0
  7014 ;;      Temps:          1       0       0       0       0       0       0
  7015 ;;      Totals:         3       0       0       0       0       0       0
  7016 ;;Total ram usage:        3 bytes
  7017 ;; Hardware stack levels used:    1
  7018 ;; Hardware stack levels required when called:    6
  7019 ;; This function calls:
  7020 ;;		_SendAckMessage
  7021 ;; This function is called by:
  7022 ;;		_GroupControlMcu
  7023 ;; This function uses a non-reentrant model
  7024 ;;
  7025                           
  7026                           	psect	text34
  7027  002A6E                     __ptext34:
  7028                           	opt stack 0
  7029  002A6E                     _testLeds:
  7030                           	opt stack 22
  7031                           
  7032                           ;LedsApp.c: 46: for(int idx = 0; idx < 10; idx++)
  7033                           
  7034                           ;incstack = 0
  7035  002A6E  0E00               	movlw	0
  7036  002A70  6E2E               	movwf	testLeds@idx+1,c
  7037  002A72  0E00               	movlw	0
  7038  002A74  6E2D               	movwf	testLeds@idx,c
  7039  002A76                     l7626:
  7040  002A76  BE2E               	btfsc	testLeds@idx+1,7,c
  7041  002A78  D006               	goto	l54
  7042  002A7A  502E               	movf	testLeds@idx+1,w,c
  7043  002A7C  E127               	bnz	l7640
  7044  002A7E  0E0A               	movlw	10
  7045  002A80  5C2D               	subwf	testLeds@idx,w,c
  7046  002A82  B0D8               	btfsc	status,0,c
  7047  002A84  D023               	goto	u7710
  7048  002A86                     l54:
  7049                           
  7050                           ;LedsApp.c: 47: {
  7051                           ;LedsApp.c: 49: LATCbits.LATC0 = 1;
  7052  002A86  808B               	bsf	3979,0,c	;volatile
  7053                           
  7054                           ;LedsApp.c: 50: _delay((unsigned long)((50)*(8000000/4000.0)));
  7055  002A88  0E82               	movlw	130
  7056  002A8A  6E2C               	movwf	??_testLeds& (0+255),c
  7057  002A8C  0EDE               	movlw	222
  7058  002A8E                     u8567:
  7059  002A8E  2EE8               	decfsz	wreg,f,c
  7060  002A90  D7FE               	bra	u8567
  7061  002A92  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7062  002A94  D7FC               	bra	u8567
  7063                           
  7064                           ;LedsApp.c: 51: LATBbits.LATB4 = 1;
  7065  002A96  888A               	bsf	3978,4,c	;volatile
  7066                           
  7067                           ;LedsApp.c: 52: _delay((unsigned long)((50)*(8000000/4000.0)));
  7068  002A98  0E82               	movlw	130
  7069  002A9A  6E2C               	movwf	??_testLeds& (0+255),c
  7070  002A9C  0EDE               	movlw	222
  7071  002A9E                     u8577:
  7072  002A9E  2EE8               	decfsz	wreg,f,c
  7073  002AA0  D7FE               	bra	u8577
  7074  002AA2  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7075  002AA4  D7FC               	bra	u8577
  7076                           
  7077                           ;LedsApp.c: 53: LATCbits.LATC0 = 0;
  7078  002AA6  908B               	bcf	3979,0,c	;volatile
  7079                           
  7080                           ;LedsApp.c: 54: _delay((unsigned long)((50)*(8000000/4000.0)));
  7081  002AA8  0E82               	movlw	130
  7082  002AAA  6E2C               	movwf	??_testLeds& (0+255),c
  7083  002AAC  0EDE               	movlw	222
  7084  002AAE                     u8587:
  7085  002AAE  2EE8               	decfsz	wreg,f,c
  7086  002AB0  D7FE               	bra	u8587
  7087  002AB2  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7088  002AB4  D7FC               	bra	u8587
  7089                           
  7090                           ;LedsApp.c: 55: LATBbits.LATB4 = 0;
  7091  002AB6  988A               	bcf	3978,4,c	;volatile
  7092                           
  7093                           ;LedsApp.c: 56: _delay((unsigned long)((50)*(8000000/4000.0)));
  7094  002AB8  0E82               	movlw	130
  7095  002ABA  6E2C               	movwf	??_testLeds& (0+255),c
  7096  002ABC  0EDE               	movlw	222
  7097  002ABE                     u8597:
  7098  002ABE  2EE8               	decfsz	wreg,f,c
  7099  002AC0  D7FE               	bra	u8597
  7100  002AC2  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7101  002AC4  D7FC               	bra	u8597
  7102  002AC6  4A2D               	infsnz	testLeds@idx,f,c
  7103  002AC8  2A2E               	incf	testLeds@idx+1,f,c
  7104  002ACA  D7D5               	goto	l7626
  7105  002ACC                     u7710:
  7106  002ACC                     l7640:
  7107                           
  7108                           ;LedsApp.c: 57: }
  7109                           ;LedsApp.c: 59: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_TEST_LEDS);
  7110  002ACC  0E14               	movlw	20
  7111  002ACE  6E24               	movwf	SendAckMessage@inRequest,c
  7112  002AD0  0E01               	movlw	1
  7113  002AD2  EC8C  F017         	call	_SendAckMessage
  7114  002AD6  0012               	return	
  7115  002AD8                     __end_of_testLeds:
  7116                           	opt stack 0
  7117                           tosu	equ	0xFFF
  7118                           tosh	equ	0xFFE
  7119                           tosl	equ	0xFFD
  7120                           pclath	equ	0xFFA
  7121                           tblptru	equ	0xFF8
  7122                           tblptrh	equ	0xFF7
  7123                           tblptrl	equ	0xFF6
  7124                           tablat	equ	0xFF5
  7125                           prodh	equ	0xFF4
  7126                           prodl	equ	0xFF3
  7127                           intcon	equ	0xFF2
  7128                           postinc0	equ	0xFEE
  7129                           plusw0	equ	0xFEB
  7130                           wreg	equ	0xFE8
  7131                           indf1	equ	0xFE7
  7132                           postdec1	equ	0xFE5
  7133                           fsr1h	equ	0xFE2
  7134                           fsr1l	equ	0xFE1
  7135                           indf2	equ	0xFDF
  7136                           postinc2	equ	0xFDE
  7137                           postdec2	equ	0xFDD
  7138                           plusw2	equ	0xFDB
  7139                           fsr2h	equ	0xFDA
  7140                           fsr2l	equ	0xFD9
  7141                           status	equ	0xFD8
  7142                           
  7143 ;; *************** function _ResetMcu *****************
  7144 ;; Defined at:
  7145 ;;		line 131 in file "SystemCommon.c"
  7146 ;; Parameters:    Size  Location     Type
  7147 ;;		None
  7148 ;; Auto vars:     Size  Location     Type
  7149 ;;		None
  7150 ;; Return value:  Size  Location     Type
  7151 ;;                  1    wreg      void 
  7152 ;; Registers used:
  7153 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7154 ;; Tracked objects:
  7155 ;;		On entry : 0/0
  7156 ;;		On exit  : 0/0
  7157 ;;		Unchanged: 0/0
  7158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7159 ;;      Params:         0       0       0       0       0       0       0
  7160 ;;      Locals:         0       0       0       0       0       0       0
  7161 ;;      Temps:          0       0       0       0       0       0       0
  7162 ;;      Totals:         0       0       0       0       0       0       0
  7163 ;;Total ram usage:        0 bytes
  7164 ;; Hardware stack levels used:    1
  7165 ;; Hardware stack levels required when called:    6
  7166 ;; This function calls:
  7167 ;;		_SendAckMessage
  7168 ;; This function is called by:
  7169 ;;		_GroupControlMcu
  7170 ;; This function uses a non-reentrant model
  7171 ;;
  7172                           
  7173                           	psect	text35
  7174  0038C2                     __ptext35:
  7175                           	opt stack 0
  7176  0038C2                     _ResetMcu:
  7177                           	opt stack 22
  7178                           
  7179                           ;SystemCommon.c: 134: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_RESET
      +                          _MCU);
  7180                           
  7181                           ;incstack = 0
  7182  0038C2  0E11               	movlw	17
  7183  0038C4  6E24               	movwf	SendAckMessage@inRequest,c
  7184  0038C6  0E01               	movlw	1
  7185  0038C8  EC8C  F017         	call	_SendAckMessage
  7186  0038CC  00FF               	reset		;# 
  7187  0038CE  0012               	return		;funcret
  7188  0038D0                     __end_of_ResetMcu:
  7189                           	opt stack 0
  7190                           tosu	equ	0xFFF
  7191                           tosh	equ	0xFFE
  7192                           tosl	equ	0xFFD
  7193                           pclath	equ	0xFFA
  7194                           tblptru	equ	0xFF8
  7195                           tblptrh	equ	0xFF7
  7196                           tblptrl	equ	0xFF6
  7197                           tablat	equ	0xFF5
  7198                           prodh	equ	0xFF4
  7199                           prodl	equ	0xFF3
  7200                           intcon	equ	0xFF2
  7201                           postinc0	equ	0xFEE
  7202                           plusw0	equ	0xFEB
  7203                           wreg	equ	0xFE8
  7204                           indf1	equ	0xFE7
  7205                           postdec1	equ	0xFE5
  7206                           fsr1h	equ	0xFE2
  7207                           fsr1l	equ	0xFE1
  7208                           indf2	equ	0xFDF
  7209                           postinc2	equ	0xFDE
  7210                           postdec2	equ	0xFDD
  7211                           plusw2	equ	0xFDB
  7212                           fsr2h	equ	0xFDA
  7213                           fsr2l	equ	0xFD9
  7214                           status	equ	0xFD8
  7215                           
  7216 ;; *************** function _SetConversionResultFormat *****************
  7217 ;; Defined at:
  7218 ;;		line 38 in file "AdcApp.c"
  7219 ;; Parameters:    Size  Location     Type
  7220 ;;  data            2   43[COMRAM] PTR unsigned char 
  7221 ;; Auto vars:     Size  Location     Type
  7222 ;;		None
  7223 ;; Return value:  Size  Location     Type
  7224 ;;                  1    wreg      void 
  7225 ;; Registers used:
  7226 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7227 ;; Tracked objects:
  7228 ;;		On entry : 0/0
  7229 ;;		On exit  : 0/0
  7230 ;;		Unchanged: 0/0
  7231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7232 ;;      Params:         2       0       0       0       0       0       0
  7233 ;;      Locals:         0       0       0       0       0       0       0
  7234 ;;      Temps:          0       0       0       0       0       0       0
  7235 ;;      Totals:         2       0       0       0       0       0       0
  7236 ;;Total ram usage:        2 bytes
  7237 ;; Hardware stack levels used:    1
  7238 ;; Hardware stack levels required when called:    6
  7239 ;; This function calls:
  7240 ;;		_SendAckMessage
  7241 ;; This function is called by:
  7242 ;;		_GroupAdc
  7243 ;; This function uses a non-reentrant model
  7244 ;;
  7245                           
  7246                           	psect	text36
  7247  003906                     __ptext36:
  7248                           	opt stack 0
  7249  003906                     _SetConversionResultFormat:
  7250                           	opt stack 22
  7251                           
  7252                           ;AdcApp.c: 40: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_CONVERSION_MODE);
  7253                           
  7254                           ;incstack = 0
  7255  003906  0E33               	movlw	51
  7256  003908  6E24               	movwf	SendAckMessage@inRequest,c
  7257  00390A  0E03               	movlw	3
  7258  00390C  EC8C  F017         	call	_SendAckMessage
  7259  003910  0012               	return		;funcret
  7260  003912                     __end_of_SetConversionResultFormat:
  7261                           	opt stack 0
  7262                           tosu	equ	0xFFF
  7263                           tosh	equ	0xFFE
  7264                           tosl	equ	0xFFD
  7265                           pclath	equ	0xFFA
  7266                           tblptru	equ	0xFF8
  7267                           tblptrh	equ	0xFF7
  7268                           tblptrl	equ	0xFF6
  7269                           tablat	equ	0xFF5
  7270                           prodh	equ	0xFF4
  7271                           prodl	equ	0xFF3
  7272                           intcon	equ	0xFF2
  7273                           postinc0	equ	0xFEE
  7274                           plusw0	equ	0xFEB
  7275                           wreg	equ	0xFE8
  7276                           indf1	equ	0xFE7
  7277                           postdec1	equ	0xFE5
  7278                           fsr1h	equ	0xFE2
  7279                           fsr1l	equ	0xFE1
  7280                           indf2	equ	0xFDF
  7281                           postinc2	equ	0xFDE
  7282                           postdec2	equ	0xFDD
  7283                           plusw2	equ	0xFDB
  7284                           fsr2h	equ	0xFDA
  7285                           fsr2l	equ	0xFD9
  7286                           status	equ	0xFD8
  7287                           
  7288 ;; *************** function _SetChannelMode *****************
  7289 ;; Defined at:
  7290 ;;		line 43 in file "AdcApp.c"
  7291 ;; Parameters:    Size  Location     Type
  7292 ;;  data            2   43[COMRAM] PTR unsigned char 
  7293 ;; Auto vars:     Size  Location     Type
  7294 ;;		None
  7295 ;; Return value:  Size  Location     Type
  7296 ;;                  1    wreg      void 
  7297 ;; Registers used:
  7298 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7299 ;; Tracked objects:
  7300 ;;		On entry : 0/0
  7301 ;;		On exit  : 0/0
  7302 ;;		Unchanged: 0/0
  7303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7304 ;;      Params:         2       0       0       0       0       0       0
  7305 ;;      Locals:         0       0       0       0       0       0       0
  7306 ;;      Temps:          0       0       0       0       0       0       0
  7307 ;;      Totals:         2       0       0       0       0       0       0
  7308 ;;Total ram usage:        2 bytes
  7309 ;; Hardware stack levels used:    1
  7310 ;; Hardware stack levels required when called:    6
  7311 ;; This function calls:
  7312 ;;		_SendAckMessage
  7313 ;; This function is called by:
  7314 ;;		_GroupAdc
  7315 ;; This function uses a non-reentrant model
  7316 ;;
  7317                           
  7318                           	psect	text37
  7319  003526                     __ptext37:
  7320                           	opt stack 0
  7321  003526                     _SetChannelMode:
  7322                           	opt stack 22
  7323                           
  7324                           ;AdcApp.c: 45: adcSampleMode = data[0];
  7325                           
  7326                           ;incstack = 0
  7327  003526  C02C  FFD9         	movff	SetChannelMode@data,fsr2l
  7328  00352A  C02D  FFDA         	movff	SetChannelMode@data+1,fsr2h
  7329  00352E  50DF               	movf	indf2,w,c
  7330  003530  6E3B               	movwf	_adcSampleMode,c
  7331                           
  7332                           ;AdcApp.c: 46: if (adcSampleMode == SINGLE_CHANNEL)
  7333  003532  043B               	decf	_adcSampleMode,w,c
  7334  003534  A4D8               	btfss	status,2,c
  7335  003536  D009               	goto	l116
  7336                           
  7337                           ;AdcApp.c: 47: {
  7338                           ;AdcApp.c: 48: channel = data[1];
  7339  003538  EE20 F001          	lfsr	2,1
  7340  00353C  502C               	movf	SetChannelMode@data,w,c
  7341  00353E  26D9               	addwf	fsr2l,f,c
  7342  003540  502D               	movf	SetChannelMode@data+1,w,c
  7343  003542  22DA               	addwfc	fsr2h,f,c
  7344  003544  50DF               	movf	indf2,w,c
  7345  003546  0100               	movlb	0	; () banked
  7346  003548  6FD4               	movwf	_channel& (0+255),b
  7347  00354A                     l116:
  7348                           
  7349                           ;AdcApp.c: 49: }
  7350                           ;AdcApp.c: 50: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_CHANNEL_MODE);
  7351                           
  7352                           ; BSR set to: 0
  7353  00354A  0E32               	movlw	50
  7354  00354C  6E24               	movwf	SendAckMessage@inRequest,c
  7355  00354E  0E03               	movlw	3
  7356  003550  EC8C  F017         	call	_SendAckMessage
  7357  003554  0012               	return		;funcret
  7358  003556                     __end_of_SetChannelMode:
  7359                           	opt stack 0
  7360                           tosu	equ	0xFFF
  7361                           tosh	equ	0xFFE
  7362                           tosl	equ	0xFFD
  7363                           pclath	equ	0xFFA
  7364                           tblptru	equ	0xFF8
  7365                           tblptrh	equ	0xFF7
  7366                           tblptrl	equ	0xFF6
  7367                           tablat	equ	0xFF5
  7368                           prodh	equ	0xFF4
  7369                           prodl	equ	0xFF3
  7370                           intcon	equ	0xFF2
  7371                           postinc0	equ	0xFEE
  7372                           plusw0	equ	0xFEB
  7373                           wreg	equ	0xFE8
  7374                           indf1	equ	0xFE7
  7375                           postdec1	equ	0xFE5
  7376                           fsr1h	equ	0xFE2
  7377                           fsr1l	equ	0xFE1
  7378                           indf2	equ	0xFDF
  7379                           postinc2	equ	0xFDE
  7380                           postdec2	equ	0xFDD
  7381                           plusw2	equ	0xFDB
  7382                           fsr2h	equ	0xFDA
  7383                           fsr2l	equ	0xFD9
  7384                           status	equ	0xFD8
  7385                           
  7386 ;; *************** function _SetAdcOperationMode *****************
  7387 ;; Defined at:
  7388 ;;		line 33 in file "AdcApp.c"
  7389 ;; Parameters:    Size  Location     Type
  7390 ;;  data            2   43[COMRAM] PTR unsigned char 
  7391 ;; Auto vars:     Size  Location     Type
  7392 ;;		None
  7393 ;; Return value:  Size  Location     Type
  7394 ;;                  1    wreg      void 
  7395 ;; Registers used:
  7396 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7397 ;; Tracked objects:
  7398 ;;		On entry : 0/0
  7399 ;;		On exit  : 0/0
  7400 ;;		Unchanged: 0/0
  7401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7402 ;;      Params:         2       0       0       0       0       0       0
  7403 ;;      Locals:         0       0       0       0       0       0       0
  7404 ;;      Temps:          0       0       0       0       0       0       0
  7405 ;;      Totals:         2       0       0       0       0       0       0
  7406 ;;Total ram usage:        2 bytes
  7407 ;; Hardware stack levels used:    1
  7408 ;; Hardware stack levels required when called:    6
  7409 ;; This function calls:
  7410 ;;		_SendAckMessage
  7411 ;; This function is called by:
  7412 ;;		_GroupAdc
  7413 ;; This function uses a non-reentrant model
  7414 ;;
  7415                           
  7416                           	psect	text38
  7417  003912                     __ptext38:
  7418                           	opt stack 0
  7419  003912                     _SetAdcOperationMode:
  7420                           	opt stack 22
  7421                           
  7422                           ;AdcApp.c: 35: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_OPERATION);
  7423                           
  7424                           ;incstack = 0
  7425  003912  0E31               	movlw	49
  7426  003914  6E24               	movwf	SendAckMessage@inRequest,c
  7427  003916  0E03               	movlw	3
  7428  003918  EC8C  F017         	call	_SendAckMessage
  7429  00391C  0012               	return		;funcret
  7430  00391E                     __end_of_SetAdcOperationMode:
  7431                           	opt stack 0
  7432                           tosu	equ	0xFFF
  7433                           tosh	equ	0xFFE
  7434                           tosl	equ	0xFFD
  7435                           pclath	equ	0xFFA
  7436                           tblptru	equ	0xFF8
  7437                           tblptrh	equ	0xFF7
  7438                           tblptrl	equ	0xFF6
  7439                           tablat	equ	0xFF5
  7440                           prodh	equ	0xFF4
  7441                           prodl	equ	0xFF3
  7442                           intcon	equ	0xFF2
  7443                           postinc0	equ	0xFEE
  7444                           plusw0	equ	0xFEB
  7445                           wreg	equ	0xFE8
  7446                           indf1	equ	0xFE7
  7447                           postdec1	equ	0xFE5
  7448                           fsr1h	equ	0xFE2
  7449                           fsr1l	equ	0xFE1
  7450                           indf2	equ	0xFDF
  7451                           postinc2	equ	0xFDE
  7452                           postdec2	equ	0xFDD
  7453                           plusw2	equ	0xFDB
  7454                           fsr2h	equ	0xFDA
  7455                           fsr2l	equ	0xFD9
  7456                           status	equ	0xFD8
  7457                           
  7458 ;; *************** function _EUSART1_Read *****************
  7459 ;; Defined at:
  7460 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  7461 ;; Parameters:    Size  Location     Type
  7462 ;;		None
  7463 ;; Auto vars:     Size  Location     Type
  7464 ;;  readValue       2   24[COMRAM] unsigned int 
  7465 ;; Return value:  Size  Location     Type
  7466 ;;                  1    wreg      unsigned char 
  7467 ;; Registers used:
  7468 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7469 ;; Tracked objects:
  7470 ;;		On entry : 0/0
  7471 ;;		On exit  : 0/0
  7472 ;;		Unchanged: 0/0
  7473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7474 ;;      Params:         0       0       0       0       0       0       0
  7475 ;;      Locals:         2       0       0       0       0       0       0
  7476 ;;      Temps:          1       0       0       0       0       0       0
  7477 ;;      Totals:         3       0       0       0       0       0       0
  7478 ;;Total ram usage:        3 bytes
  7479 ;; Hardware stack levels used:    1
  7480 ;; Hardware stack levels required when called:    3
  7481 ;; This function calls:
  7482 ;;		Nothing
  7483 ;; This function is called by:
  7484 ;;		_readUartMessage
  7485 ;; This function uses a non-reentrant model
  7486 ;;
  7487                           
  7488                           	psect	text39
  7489  003124                     __ptext39:
  7490                           	opt stack 0
  7491  003124                     _EUSART1_Read:
  7492                           	opt stack 26
  7493                           
  7494                           ;eusart1.c: 112: uint16_t readValue = 0;
  7495                           
  7496                           ;incstack = 0
  7497  003124  0E00               	movlw	0
  7498  003126  6E1A               	movwf	EUSART1_Read@readValue+1,c
  7499  003128  0E00               	movlw	0
  7500  00312A  6E19               	movwf	EUSART1_Read@readValue,c
  7501                           
  7502                           ;eusart1.c: 119: if (eusart1RxCount == 0)
  7503  00312C  0100               	movlb	0	; () banked
  7504  00312E  51D3               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  7505  003130  A4D8               	btfss	status,2,c
  7506  003132  D002               	goto	l844
  7507                           
  7508                           ; BSR set to: 0
  7509                           ;eusart1.c: 120: {
  7510                           ;eusart1.c: 121: return readValue;
  7511  003134  5019               	movf	EUSART1_Read@readValue,w,c
  7512                           
  7513                           ; BSR set to: 0
  7514  003136  0012               	return	
  7515  003138                     l844:
  7516                           
  7517                           ; BSR set to: 0
  7518                           ;eusart1.c: 122: }
  7519                           ;eusart1.c: 124: readValue = eusart1RxBuffer[eusart1RxTail++];
  7520                           
  7521                           ; BSR set to: 0
  7522  003138  5036               	movf	_eusart1RxTail,w,c	;volatile
  7523  00313A  0D01               	mullw	1
  7524  00313C  0E46               	movlw	low _eusart1RxBuffer
  7525  00313E  24F3               	addwf	prodl,w,c
  7526  003140  6ED9               	movwf	fsr2l,c
  7527  003142  0E01               	movlw	high _eusart1RxBuffer
  7528  003144  20F4               	addwfc	prodh,w,c
  7529  003146  6EDA               	movwf	fsr2h,c
  7530  003148  50DF               	movf	indf2,w,c
  7531  00314A  6E18               	movwf	??_EUSART1_Read& (0+255),c
  7532  00314C  5018               	movf	??_EUSART1_Read,w,c
  7533  00314E  6E19               	movwf	EUSART1_Read@readValue,c
  7534  003150  6A1A               	clrf	EUSART1_Read@readValue+1,c
  7535                           
  7536                           ; BSR set to: 0
  7537  003152  2A36               	incf	_eusart1RxTail,f,c	;volatile
  7538                           
  7539                           ; BSR set to: 0
  7540                           ;eusart1.c: 125: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
  7541  003154  0E27               	movlw	39
  7542  003156  6436               	cpfsgt	_eusart1RxTail,c	;volatile
  7543  003158  D002               	goto	l846
  7544                           
  7545                           ; BSR set to: 0
  7546                           ;eusart1.c: 126: {
  7547                           ;eusart1.c: 127: eusart1RxTail = 0;
  7548  00315A  0E00               	movlw	0
  7549  00315C  6E36               	movwf	_eusart1RxTail,c	;volatile
  7550  00315E                     l846:
  7551                           
  7552                           ; BSR set to: 0
  7553                           ;eusart1.c: 128: }
  7554                           ;eusart1.c: 129: PIE1bits.RC1IE = 0;
  7555                           
  7556                           ; BSR set to: 0
  7557  00315E  9A9D               	bcf	3997,5,c	;volatile
  7558                           
  7559                           ; BSR set to: 0
  7560                           ;eusart1.c: 130: eusart1RxCount--;
  7561  003160  07D3               	decf	_eusart1RxCount& (0+255),f,b	;volatile
  7562                           
  7563                           ; BSR set to: 0
  7564                           ;eusart1.c: 131: PIE1bits.RC1IE = 1;
  7565  003162  8A9D               	bsf	3997,5,c	;volatile
  7566                           
  7567                           ; BSR set to: 0
  7568                           ;eusart1.c: 133: return readValue;
  7569  003164  5019               	movf	EUSART1_Read@readValue,w,c
  7570  003166  0012               	return	
  7571  003168                     __end_of_EUSART1_Read:
  7572                           	opt stack 0
  7573                           tosu	equ	0xFFF
  7574                           tosh	equ	0xFFE
  7575                           tosl	equ	0xFFD
  7576                           pclath	equ	0xFFA
  7577                           tblptru	equ	0xFF8
  7578                           tblptrh	equ	0xFF7
  7579                           tblptrl	equ	0xFF6
  7580                           tablat	equ	0xFF5
  7581                           prodh	equ	0xFF4
  7582                           prodl	equ	0xFF3
  7583                           intcon	equ	0xFF2
  7584                           postinc0	equ	0xFEE
  7585                           plusw0	equ	0xFEB
  7586                           wreg	equ	0xFE8
  7587                           indf1	equ	0xFE7
  7588                           postdec1	equ	0xFE5
  7589                           fsr1h	equ	0xFE2
  7590                           fsr1l	equ	0xFE1
  7591                           indf2	equ	0xFDF
  7592                           postinc2	equ	0xFDE
  7593                           postdec2	equ	0xFDD
  7594                           plusw2	equ	0xFDB
  7595                           fsr2h	equ	0xFDA
  7596                           fsr2l	equ	0xFD9
  7597                           status	equ	0xFD8
  7598                           
  7599 ;; *************** function _keepAliveSignalUart *****************
  7600 ;; Defined at:
  7601 ;;		line 79 in file "SystemStatus.c"
  7602 ;; Parameters:    Size  Location     Type
  7603 ;;		None
  7604 ;; Auto vars:     Size  Location     Type
  7605 ;;		None
  7606 ;; Return value:  Size  Location     Type
  7607 ;;                  1    wreg      void 
  7608 ;; Registers used:
  7609 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7610 ;; Tracked objects:
  7611 ;;		On entry : 0/0
  7612 ;;		On exit  : 0/0
  7613 ;;		Unchanged: 0/0
  7614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7615 ;;      Params:         0       0       0       0       0       0       0
  7616 ;;      Locals:         0       0       0       0       0       0       0
  7617 ;;      Temps:          0       0       0       0       0       0       0
  7618 ;;      Totals:         0       0       0       0       0       0       0
  7619 ;;Total ram usage:        0 bytes
  7620 ;; Hardware stack levels used:    1
  7621 ;; Hardware stack levels required when called:    6
  7622 ;; This function calls:
  7623 ;;		_SendAckMessage
  7624 ;; This function is called by:
  7625 ;;		_main
  7626 ;; This function uses a non-reentrant model
  7627 ;;
  7628                           
  7629                           	psect	text40
  7630  00391E                     __ptext40:
  7631                           	opt stack 0
  7632  00391E                     _keepAliveSignalUart:
  7633                           	opt stack 24
  7634                           
  7635                           ;SystemStatus.c: 81: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_KEEP_A
      +                          LIVE);
  7636                           
  7637                           ; BSR set to: 0
  7638                           ;incstack = 0
  7639  00391E  0E15               	movlw	21
  7640  003920  6E24               	movwf	SendAckMessage@inRequest,c
  7641  003922  0E01               	movlw	1
  7642  003924  EC8C  F017         	call	_SendAckMessage
  7643  003928  0012               	return		;funcret
  7644  00392A                     __end_of_keepAliveSignalUart:
  7645                           	opt stack 0
  7646                           tosu	equ	0xFFF
  7647                           tosh	equ	0xFFE
  7648                           tosl	equ	0xFFD
  7649                           pclath	equ	0xFFA
  7650                           tblptru	equ	0xFF8
  7651                           tblptrh	equ	0xFF7
  7652                           tblptrl	equ	0xFF6
  7653                           tablat	equ	0xFF5
  7654                           prodh	equ	0xFF4
  7655                           prodl	equ	0xFF3
  7656                           intcon	equ	0xFF2
  7657                           postinc0	equ	0xFEE
  7658                           plusw0	equ	0xFEB
  7659                           wreg	equ	0xFE8
  7660                           indf1	equ	0xFE7
  7661                           postdec1	equ	0xFE5
  7662                           fsr1h	equ	0xFE2
  7663                           fsr1l	equ	0xFE1
  7664                           indf2	equ	0xFDF
  7665                           postinc2	equ	0xFDE
  7666                           postdec2	equ	0xFDD
  7667                           plusw2	equ	0xFDB
  7668                           fsr2h	equ	0xFDA
  7669                           fsr2l	equ	0xFD9
  7670                           status	equ	0xFD8
  7671                           
  7672 ;; *************** function _keepAliveSignalLed *****************
  7673 ;; Defined at:
  7674 ;;		line 35 in file "LedsApp.c"
  7675 ;; Parameters:    Size  Location     Type
  7676 ;;		None
  7677 ;; Auto vars:     Size  Location     Type
  7678 ;;		None
  7679 ;; Return value:  Size  Location     Type
  7680 ;;                  1    wreg      void 
  7681 ;; Registers used:
  7682 ;;		wreg, status,2, status,0
  7683 ;; Tracked objects:
  7684 ;;		On entry : 0/0
  7685 ;;		On exit  : 0/0
  7686 ;;		Unchanged: 0/0
  7687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7688 ;;      Params:         0       0       0       0       0       0       0
  7689 ;;      Locals:         0       0       0       0       0       0       0
  7690 ;;      Temps:          1       0       0       0       0       0       0
  7691 ;;      Totals:         1       0       0       0       0       0       0
  7692 ;;Total ram usage:        1 bytes
  7693 ;; Hardware stack levels used:    1
  7694 ;; Hardware stack levels required when called:    3
  7695 ;; This function calls:
  7696 ;;		Nothing
  7697 ;; This function is called by:
  7698 ;;		_main
  7699 ;; This function uses a non-reentrant model
  7700 ;;
  7701                           
  7702                           	psect	text41
  7703  003802                     __ptext41:
  7704                           	opt stack 0
  7705  003802                     _keepAliveSignalLed:
  7706                           	opt stack 27
  7707                           
  7708                           ;LedsApp.c: 37: LATCbits.LATC0 = !LATCbits.LATC0;
  7709                           
  7710                           ;incstack = 0
  7711  003802  B08B               	btfsc	3979,0,c	;volatile
  7712  003804  D003               	goto	u5380
  7713  003806  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  7714  003808  2A18               	incf	??_keepAliveSignalLed& (0+255),f,c
  7715  00380A  D001               	goto	u5398
  7716  00380C                     u5380:
  7717  00380C  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  7718  00380E                     u5398:
  7719  00380E  508B               	movf	3979,w,c	;volatile
  7720  003810  1818               	xorwf	??_keepAliveSignalLed,w,c
  7721  003812  0BFE               	andlw	-2
  7722  003814  1818               	xorwf	??_keepAliveSignalLed,w,c
  7723  003816  6E8B               	movwf	3979,c	;volatile
  7724  003818  0012               	return		;funcret
  7725  00381A                     __end_of_keepAliveSignalLed:
  7726                           	opt stack 0
  7727                           tosu	equ	0xFFF
  7728                           tosh	equ	0xFFE
  7729                           tosl	equ	0xFFD
  7730                           pclath	equ	0xFFA
  7731                           tblptru	equ	0xFF8
  7732                           tblptrh	equ	0xFF7
  7733                           tblptrl	equ	0xFF6
  7734                           tablat	equ	0xFF5
  7735                           prodh	equ	0xFF4
  7736                           prodl	equ	0xFF3
  7737                           intcon	equ	0xFF2
  7738                           postinc0	equ	0xFEE
  7739                           plusw0	equ	0xFEB
  7740                           wreg	equ	0xFE8
  7741                           indf1	equ	0xFE7
  7742                           postdec1	equ	0xFE5
  7743                           fsr1h	equ	0xFE2
  7744                           fsr1l	equ	0xFE1
  7745                           indf2	equ	0xFDF
  7746                           postinc2	equ	0xFDE
  7747                           postdec2	equ	0xFDD
  7748                           plusw2	equ	0xFDB
  7749                           fsr2h	equ	0xFDA
  7750                           fsr2l	equ	0xFD9
  7751                           status	equ	0xFD8
  7752                           
  7753 ;; *************** function _SetMcuSystem *****************
  7754 ;; Defined at:
  7755 ;;		line 11 in file "SystemSettings.c"
  7756 ;; Parameters:    Size  Location     Type
  7757 ;;		None
  7758 ;; Auto vars:     Size  Location     Type
  7759 ;;		None
  7760 ;; Return value:  Size  Location     Type
  7761 ;;                  1    wreg      void 
  7762 ;; Registers used:
  7763 ;;		wreg, status,2, status,0, cstack
  7764 ;; Tracked objects:
  7765 ;;		On entry : 0/0
  7766 ;;		On exit  : 0/0
  7767 ;;		Unchanged: 0/0
  7768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7769 ;;      Params:         0       0       0       0       0       0       0
  7770 ;;      Locals:         0       0       0       0       0       0       0
  7771 ;;      Temps:          0       0       0       0       0       0       0
  7772 ;;      Totals:         0       0       0       0       0       0       0
  7773 ;;Total ram usage:        0 bytes
  7774 ;; Hardware stack levels used:    1
  7775 ;; Hardware stack levels required when called:    6
  7776 ;; This function calls:
  7777 ;;		_SYSTEM_Initialize
  7778 ;; This function is called by:
  7779 ;;		_main
  7780 ;; This function uses a non-reentrant model
  7781 ;;
  7782                           
  7783                           	psect	text42
  7784  003936                     __ptext42:
  7785                           	opt stack 0
  7786  003936                     _SetMcuSystem:
  7787                           	opt stack 24
  7788                           
  7789                           ;SystemSettings.c: 14: SYSTEM_Initialize();
  7790                           
  7791                           ;incstack = 0
  7792  003936  ECF4  F01B         	call	_SYSTEM_Initialize	;wreg free
  7793                           
  7794                           ;SystemSettings.c: 21: (INTCONbits.GIE = 1);
  7795  00393A  8EF2               	bsf	intcon,7,c	;volatile
  7796                           
  7797                           ;SystemSettings.c: 27: (INTCONbits.PEIE = 1);
  7798  00393C  8CF2               	bsf	intcon,6,c	;volatile
  7799  00393E  0012               	return		;funcret
  7800  003940                     __end_of_SetMcuSystem:
  7801                           	opt stack 0
  7802                           tosu	equ	0xFFF
  7803                           tosh	equ	0xFFE
  7804                           tosl	equ	0xFFD
  7805                           pclath	equ	0xFFA
  7806                           tblptru	equ	0xFF8
  7807                           tblptrh	equ	0xFF7
  7808                           tblptrl	equ	0xFF6
  7809                           tablat	equ	0xFF5
  7810                           prodh	equ	0xFF4
  7811                           prodl	equ	0xFF3
  7812                           intcon	equ	0xFF2
  7813                           postinc0	equ	0xFEE
  7814                           plusw0	equ	0xFEB
  7815                           wreg	equ	0xFE8
  7816                           indf1	equ	0xFE7
  7817                           postdec1	equ	0xFE5
  7818                           fsr1h	equ	0xFE2
  7819                           fsr1l	equ	0xFE1
  7820                           indf2	equ	0xFDF
  7821                           postinc2	equ	0xFDE
  7822                           postdec2	equ	0xFDD
  7823                           plusw2	equ	0xFDB
  7824                           fsr2h	equ	0xFDA
  7825                           fsr2l	equ	0xFD9
  7826                           status	equ	0xFD8
  7827                           
  7828 ;; *************** function _SYSTEM_Initialize *****************
  7829 ;; Defined at:
  7830 ;;		line 112 in file "mcc_generated_files/mcc.c"
  7831 ;; Parameters:    Size  Location     Type
  7832 ;;		None
  7833 ;; Auto vars:     Size  Location     Type
  7834 ;;		None
  7835 ;; Return value:  Size  Location     Type
  7836 ;;                  1    wreg      void 
  7837 ;; Registers used:
  7838 ;;		wreg, status,2, status,0, cstack
  7839 ;; Tracked objects:
  7840 ;;		On entry : 0/0
  7841 ;;		On exit  : 0/0
  7842 ;;		Unchanged: 0/0
  7843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7844 ;;      Params:         0       0       0       0       0       0       0
  7845 ;;      Locals:         0       0       0       0       0       0       0
  7846 ;;      Temps:          0       0       0       0       0       0       0
  7847 ;;      Totals:         0       0       0       0       0       0       0
  7848 ;;Total ram usage:        0 bytes
  7849 ;; Hardware stack levels used:    1
  7850 ;; Hardware stack levels required when called:    5
  7851 ;; This function calls:
  7852 ;;		_ADC_Initialize
  7853 ;;		_EUSART1_Initialize
  7854 ;;		_INTERRUPT_Initialize
  7855 ;;		_OSCILLATOR_Initialize
  7856 ;;		_PIN_MANAGER_Initialize
  7857 ;;		_TMR0_Initialize
  7858 ;; This function is called by:
  7859 ;;		_SetMcuSystem
  7860 ;; This function uses a non-reentrant model
  7861 ;;
  7862                           
  7863                           	psect	text43
  7864  0037E8                     __ptext43:
  7865                           	opt stack 0
  7866  0037E8                     _SYSTEM_Initialize:
  7867                           	opt stack 24
  7868                           
  7869                           ;mcc.c: 114: INTERRUPT_Initialize();
  7870                           
  7871                           ;incstack = 0
  7872  0037E8  ECAD  F01C         	call	_INTERRUPT_Initialize	;wreg free
  7873                           
  7874                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  7875  0037EC  EC4C  F018         	call	_PIN_MANAGER_Initialize	;wreg free
  7876                           
  7877                           ;mcc.c: 116: OSCILLATOR_Initialize();
  7878  0037F0  EC68  F01C         	call	_OSCILLATOR_Initialize	;wreg free
  7879                           
  7880                           ;mcc.c: 117: ADC_Initialize();
  7881  0037F4  EC0D  F01C         	call	_ADC_Initialize	;wreg free
  7882                           
  7883                           ;mcc.c: 118: TMR0_Initialize();
  7884  0037F8  EC17  F01A         	call	_TMR0_Initialize	;wreg free
  7885                           
  7886                           ;mcc.c: 119: EUSART1_Initialize();
  7887  0037FC  ECE1  F019         	call	_EUSART1_Initialize	;wreg free
  7888  003800  0012               	return		;funcret
  7889  003802                     __end_of_SYSTEM_Initialize:
  7890                           	opt stack 0
  7891                           tosu	equ	0xFFF
  7892                           tosh	equ	0xFFE
  7893                           tosl	equ	0xFFD
  7894                           pclath	equ	0xFFA
  7895                           tblptru	equ	0xFF8
  7896                           tblptrh	equ	0xFF7
  7897                           tblptrl	equ	0xFF6
  7898                           tablat	equ	0xFF5
  7899                           prodh	equ	0xFF4
  7900                           prodl	equ	0xFF3
  7901                           intcon	equ	0xFF2
  7902                           postinc0	equ	0xFEE
  7903                           plusw0	equ	0xFEB
  7904                           wreg	equ	0xFE8
  7905                           indf1	equ	0xFE7
  7906                           postdec1	equ	0xFE5
  7907                           fsr1h	equ	0xFE2
  7908                           fsr1l	equ	0xFE1
  7909                           indf2	equ	0xFDF
  7910                           postinc2	equ	0xFDE
  7911                           postdec2	equ	0xFDD
  7912                           plusw2	equ	0xFDB
  7913                           fsr2h	equ	0xFDA
  7914                           fsr2l	equ	0xFD9
  7915                           status	equ	0xFD8
  7916                           
  7917 ;; *************** function _TMR0_Initialize *****************
  7918 ;; Defined at:
  7919 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  7920 ;; Parameters:    Size  Location     Type
  7921 ;;		None
  7922 ;; Auto vars:     Size  Location     Type
  7923 ;;		None
  7924 ;; Return value:  Size  Location     Type
  7925 ;;                  1    wreg      void 
  7926 ;; Registers used:
  7927 ;;		wreg, status,2, status,0, cstack
  7928 ;; Tracked objects:
  7929 ;;		On entry : 0/0
  7930 ;;		On exit  : 0/0
  7931 ;;		Unchanged: 0/0
  7932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7933 ;;      Params:         0       0       0       0       0       0       0
  7934 ;;      Locals:         0       0       0       0       0       0       0
  7935 ;;      Temps:          2       0       0       0       0       0       0
  7936 ;;      Totals:         2       0       0       0       0       0       0
  7937 ;;Total ram usage:        2 bytes
  7938 ;; Hardware stack levels used:    1
  7939 ;; Hardware stack levels required when called:    4
  7940 ;; This function calls:
  7941 ;;		_TMR0_SetInterruptHandler
  7942 ;; This function is called by:
  7943 ;;		_SYSTEM_Initialize
  7944 ;; This function uses a non-reentrant model
  7945 ;;
  7946                           
  7947                           	psect	text44
  7948  00342E                     __ptext44:
  7949                           	opt stack 0
  7950  00342E                     _TMR0_Initialize:
  7951                           	opt stack 24
  7952                           
  7953                           ;tmr0.c: 71: TMR0H = 0x3C;
  7954                           
  7955                           ;incstack = 0
  7956  00342E  0E3C               	movlw	60
  7957  003430  6ED7               	movwf	4055,c	;volatile
  7958                           
  7959                           ;tmr0.c: 74: TMR0L = 0xAF;
  7960  003432  0EAF               	movlw	175
  7961  003434  6ED6               	movwf	4054,c	;volatile
  7962                           
  7963                           ;tmr0.c: 78: timer0ReloadVal = (TMR0H << 8) | TMR0L;
  7964  003436  50D6               	movf	4054,w,c	;volatile
  7965  003438  CFD7 F01A          	movff	4055,??_TMR0_Initialize	;volatile
  7966  00343C  6A1B               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  7967  00343E  C01A  F01B         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  7968  003442  6A1A               	clrf	??_TMR0_Initialize,c
  7969  003444  101A               	iorwf	??_TMR0_Initialize,w,c
  7970  003446  6E46               	movwf	_timer0ReloadVal,c	;volatile
  7971  003448  501B               	movf	??_TMR0_Initialize+1,w,c
  7972  00344A  6E47               	movwf	_timer0ReloadVal+1,c	;volatile
  7973                           
  7974                           ;tmr0.c: 81: INTCONbits.TMR0IF = 0;
  7975  00344C  94F2               	bcf	intcon,2,c	;volatile
  7976                           
  7977                           ;tmr0.c: 84: INTCONbits.TMR0IE = 1;
  7978  00344E  8AF2               	bsf	intcon,5,c	;volatile
  7979                           
  7980                           ;tmr0.c: 87: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  7981  003450  0E00               	movlw	0
  7982  003452  6E18               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  7983  003454  0E00               	movlw	0
  7984  003456  6E19               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  7985  003458  ECA0  F01C         	call	_TMR0_SetInterruptHandler	;wreg free
  7986                           
  7987                           ;tmr0.c: 90: T0CON = 0x90;
  7988  00345C  0E90               	movlw	144
  7989  00345E  6ED5               	movwf	4053,c	;volatile
  7990  003460  0012               	return		;funcret
  7991  003462                     __end_of_TMR0_Initialize:
  7992                           	opt stack 0
  7993                           tosu	equ	0xFFF
  7994                           tosh	equ	0xFFE
  7995                           tosl	equ	0xFFD
  7996                           pclath	equ	0xFFA
  7997                           tblptru	equ	0xFF8
  7998                           tblptrh	equ	0xFF7
  7999                           tblptrl	equ	0xFF6
  8000                           tablat	equ	0xFF5
  8001                           prodh	equ	0xFF4
  8002                           prodl	equ	0xFF3
  8003                           intcon	equ	0xFF2
  8004                           postinc0	equ	0xFEE
  8005                           plusw0	equ	0xFEB
  8006                           wreg	equ	0xFE8
  8007                           indf1	equ	0xFE7
  8008                           postdec1	equ	0xFE5
  8009                           fsr1h	equ	0xFE2
  8010                           fsr1l	equ	0xFE1
  8011                           indf2	equ	0xFDF
  8012                           postinc2	equ	0xFDE
  8013                           postdec2	equ	0xFDD
  8014                           plusw2	equ	0xFDB
  8015                           fsr2h	equ	0xFDA
  8016                           fsr2l	equ	0xFD9
  8017                           status	equ	0xFD8
  8018                           
  8019 ;; *************** function _TMR0_SetInterruptHandler *****************
  8020 ;; Defined at:
  8021 ;;		line 177 in file "mcc_generated_files/tmr0.c"
  8022 ;; Parameters:    Size  Location     Type
  8023 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  8024 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  8025 ;; Auto vars:     Size  Location     Type
  8026 ;;		None
  8027 ;; Return value:  Size  Location     Type
  8028 ;;                  1    wreg      void 
  8029 ;; Registers used:
  8030 ;;		wreg, status,2, status,0
  8031 ;; Tracked objects:
  8032 ;;		On entry : 0/0
  8033 ;;		On exit  : 0/0
  8034 ;;		Unchanged: 0/0
  8035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8036 ;;      Params:         2       0       0       0       0       0       0
  8037 ;;      Locals:         0       0       0       0       0       0       0
  8038 ;;      Temps:          0       0       0       0       0       0       0
  8039 ;;      Totals:         2       0       0       0       0       0       0
  8040 ;;Total ram usage:        2 bytes
  8041 ;; Hardware stack levels used:    1
  8042 ;; Hardware stack levels required when called:    3
  8043 ;; This function calls:
  8044 ;;		Nothing
  8045 ;; This function is called by:
  8046 ;;		_TMR0_Initialize
  8047 ;; This function uses a non-reentrant model
  8048 ;;
  8049                           
  8050                           	psect	text45
  8051  003940                     __ptext45:
  8052                           	opt stack 0
  8053  003940                     _TMR0_SetInterruptHandler:
  8054                           	opt stack 24
  8055                           
  8056                           ;tmr0.c: 178: TMR0_InterruptHandler = InterruptHandler;
  8057                           
  8058                           ;incstack = 0
  8059  003940  C018  F0FD         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  8060  003944  C019  F0FE         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  8061  003948  0012               	return		;funcret
  8062  00394A                     __end_of_TMR0_SetInterruptHandler:
  8063                           	opt stack 0
  8064                           tosu	equ	0xFFF
  8065                           tosh	equ	0xFFE
  8066                           tosl	equ	0xFFD
  8067                           pclath	equ	0xFFA
  8068                           tblptru	equ	0xFF8
  8069                           tblptrh	equ	0xFF7
  8070                           tblptrl	equ	0xFF6
  8071                           tablat	equ	0xFF5
  8072                           prodh	equ	0xFF4
  8073                           prodl	equ	0xFF3
  8074                           intcon	equ	0xFF2
  8075                           postinc0	equ	0xFEE
  8076                           plusw0	equ	0xFEB
  8077                           wreg	equ	0xFE8
  8078                           indf1	equ	0xFE7
  8079                           postdec1	equ	0xFE5
  8080                           fsr1h	equ	0xFE2
  8081                           fsr1l	equ	0xFE1
  8082                           indf2	equ	0xFDF
  8083                           postinc2	equ	0xFDE
  8084                           postdec2	equ	0xFDD
  8085                           plusw2	equ	0xFDB
  8086                           fsr2h	equ	0xFDA
  8087                           fsr2l	equ	0xFD9
  8088                           status	equ	0xFD8
  8089                           
  8090 ;; *************** function _PIN_MANAGER_Initialize *****************
  8091 ;; Defined at:
  8092 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  8093 ;; Parameters:    Size  Location     Type
  8094 ;;		None
  8095 ;; Auto vars:     Size  Location     Type
  8096 ;;		None
  8097 ;; Return value:  Size  Location     Type
  8098 ;;                  1    wreg      void 
  8099 ;; Registers used:
  8100 ;;		wreg, status,2
  8101 ;; Tracked objects:
  8102 ;;		On entry : 0/0
  8103 ;;		On exit  : 0/0
  8104 ;;		Unchanged: 0/0
  8105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8106 ;;      Params:         0       0       0       0       0       0       0
  8107 ;;      Locals:         0       0       0       0       0       0       0
  8108 ;;      Temps:          0       0       0       0       0       0       0
  8109 ;;      Totals:         0       0       0       0       0       0       0
  8110 ;;Total ram usage:        0 bytes
  8111 ;; Hardware stack levels used:    1
  8112 ;; Hardware stack levels required when called:    3
  8113 ;; This function calls:
  8114 ;;		Nothing
  8115 ;; This function is called by:
  8116 ;;		_SYSTEM_Initialize
  8117 ;; This function uses a non-reentrant model
  8118 ;;
  8119                           
  8120                           	psect	text46
  8121  003098                     __ptext46:
  8122                           	opt stack 0
  8123  003098                     _PIN_MANAGER_Initialize:
  8124                           	opt stack 25
  8125                           
  8126                           ;pin_manager.c: 57: LATE = 0x00;
  8127                           
  8128                           ;incstack = 0
  8129  003098  0E00               	movlw	0
  8130  00309A  6E8D               	movwf	3981,c	;volatile
  8131                           
  8132                           ;pin_manager.c: 58: LATD = 0x00;
  8133  00309C  0E00               	movlw	0
  8134  00309E  6E8C               	movwf	3980,c	;volatile
  8135                           
  8136                           ;pin_manager.c: 59: LATA = 0x06;
  8137  0030A0  0E06               	movlw	6
  8138  0030A2  6E89               	movwf	3977,c	;volatile
  8139                           
  8140                           ;pin_manager.c: 60: LATB = 0x00;
  8141  0030A4  0E00               	movlw	0
  8142  0030A6  6E8A               	movwf	3978,c	;volatile
  8143                           
  8144                           ;pin_manager.c: 61: LATC = 0x00;
  8145  0030A8  0E00               	movlw	0
  8146  0030AA  6E8B               	movwf	3979,c	;volatile
  8147                           
  8148                           ;pin_manager.c: 66: TRISE = 0x07;
  8149  0030AC  0E07               	movlw	7
  8150  0030AE  6E96               	movwf	3990,c	;volatile
  8151                           
  8152                           ;pin_manager.c: 67: TRISA = 0xE1;
  8153  0030B0  0EE1               	movlw	225
  8154  0030B2  6E92               	movwf	3986,c	;volatile
  8155                           
  8156                           ;pin_manager.c: 68: TRISB = 0xEF;
  8157  0030B4  0EEF               	movlw	239
  8158  0030B6  6E93               	movwf	3987,c	;volatile
  8159                           
  8160                           ;pin_manager.c: 69: TRISC = 0x80;
  8161  0030B8  0E80               	movlw	128
  8162  0030BA  6E94               	movwf	3988,c	;volatile
  8163                           
  8164                           ;pin_manager.c: 70: TRISD = 0xF2;
  8165  0030BC  0EF2               	movlw	242
  8166  0030BE  6E95               	movwf	3989,c	;volatile
  8167                           
  8168                           ;pin_manager.c: 75: ANSELC = 0x34;
  8169  0030C0  0E34               	movlw	52
  8170  0030C2  010F               	movlb	15	; () banked
  8171  0030C4  6F3A               	movwf	58,b	;volatile
  8172                           
  8173                           ;pin_manager.c: 76: ANSELB = 0x32;
  8174  0030C6  0E32               	movlw	50
  8175  0030C8  6F39               	movwf	57,b	;volatile
  8176                           
  8177                           ;pin_manager.c: 77: ANSELD = 0xE4;
  8178  0030CA  0EE4               	movlw	228
  8179  0030CC  6F3B               	movwf	59,b	;volatile
  8180                           
  8181                           ;pin_manager.c: 78: ANSELE = 0x07;
  8182  0030CE  0E07               	movlw	7
  8183  0030D0  6F3C               	movwf	60,b	;volatile
  8184                           
  8185                           ;pin_manager.c: 79: ANSELA = 0x2F;
  8186  0030D2  0E2F               	movlw	47
  8187  0030D4  6F38               	movwf	56,b	;volatile
  8188                           
  8189                           ;pin_manager.c: 84: WPUB = 0xC3;
  8190  0030D6  0EC3               	movlw	195
  8191  0030D8  6E61               	movwf	3937,c	;volatile
  8192                           
  8193                           ; BSR set to: 15
  8194                           ;pin_manager.c: 85: INTCON2bits.nRBPU = 0;
  8195  0030DA  9EF1               	bcf	intcon2,7,c	;volatile
  8196                           
  8197                           ; BSR set to: 15
  8198                           ;pin_manager.c: 92: INTCONbits.RBIE = 1;
  8199  0030DC  86F2               	bsf	intcon,3,c	;volatile
  8200                           
  8201                           ; BSR set to: 15
  8202  0030DE  0012               	return		;funcret
  8203  0030E0                     __end_of_PIN_MANAGER_Initialize:
  8204                           	opt stack 0
  8205                           tosu	equ	0xFFF
  8206                           tosh	equ	0xFFE
  8207                           tosl	equ	0xFFD
  8208                           pclath	equ	0xFFA
  8209                           tblptru	equ	0xFF8
  8210                           tblptrh	equ	0xFF7
  8211                           tblptrl	equ	0xFF6
  8212                           tablat	equ	0xFF5
  8213                           prodh	equ	0xFF4
  8214                           prodl	equ	0xFF3
  8215                           intcon	equ	0xFF2
  8216                           intcon2	equ	0xFF1
  8217                           postinc0	equ	0xFEE
  8218                           plusw0	equ	0xFEB
  8219                           wreg	equ	0xFE8
  8220                           indf1	equ	0xFE7
  8221                           postdec1	equ	0xFE5
  8222                           fsr1h	equ	0xFE2
  8223                           fsr1l	equ	0xFE1
  8224                           indf2	equ	0xFDF
  8225                           postinc2	equ	0xFDE
  8226                           postdec2	equ	0xFDD
  8227                           plusw2	equ	0xFDB
  8228                           fsr2h	equ	0xFDA
  8229                           fsr2l	equ	0xFD9
  8230                           status	equ	0xFD8
  8231                           
  8232 ;; *************** function _OSCILLATOR_Initialize *****************
  8233 ;; Defined at:
  8234 ;;		line 122 in file "mcc_generated_files/mcc.c"
  8235 ;; Parameters:    Size  Location     Type
  8236 ;;		None
  8237 ;; Auto vars:     Size  Location     Type
  8238 ;;		None
  8239 ;; Return value:  Size  Location     Type
  8240 ;;                  1    wreg      void 
  8241 ;; Registers used:
  8242 ;;		wreg, status,2
  8243 ;; Tracked objects:
  8244 ;;		On entry : 0/0
  8245 ;;		On exit  : 0/0
  8246 ;;		Unchanged: 0/0
  8247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8248 ;;      Params:         0       0       0       0       0       0       0
  8249 ;;      Locals:         0       0       0       0       0       0       0
  8250 ;;      Temps:          0       0       0       0       0       0       0
  8251 ;;      Totals:         0       0       0       0       0       0       0
  8252 ;;Total ram usage:        0 bytes
  8253 ;; Hardware stack levels used:    1
  8254 ;; Hardware stack levels required when called:    3
  8255 ;; This function calls:
  8256 ;;		Nothing
  8257 ;; This function is called by:
  8258 ;;		_SYSTEM_Initialize
  8259 ;; This function uses a non-reentrant model
  8260 ;;
  8261                           
  8262                           	psect	text47
  8263  0038D0                     __ptext47:
  8264                           	opt stack 0
  8265  0038D0                     _OSCILLATOR_Initialize:
  8266                           	opt stack 25
  8267                           
  8268                           ;mcc.c: 125: OSCCON = 0x60;
  8269                           
  8270                           ; BSR set to: 15
  8271                           ;incstack = 0
  8272  0038D0  0E60               	movlw	96
  8273  0038D2  6ED3               	movwf	4051,c	;volatile
  8274                           
  8275                           ;mcc.c: 127: OSCCON2 = 0x04;
  8276  0038D4  0E04               	movlw	4
  8277  0038D6  6ED2               	movwf	4050,c	;volatile
  8278                           
  8279                           ;mcc.c: 129: OSCTUNE = 0x80;
  8280  0038D8  0E80               	movlw	128
  8281  0038DA  6E9B               	movwf	3995,c	;volatile
  8282  0038DC  0012               	return		;funcret
  8283  0038DE                     __end_of_OSCILLATOR_Initialize:
  8284                           	opt stack 0
  8285                           tosu	equ	0xFFF
  8286                           tosh	equ	0xFFE
  8287                           tosl	equ	0xFFD
  8288                           pclath	equ	0xFFA
  8289                           tblptru	equ	0xFF8
  8290                           tblptrh	equ	0xFF7
  8291                           tblptrl	equ	0xFF6
  8292                           tablat	equ	0xFF5
  8293                           prodh	equ	0xFF4
  8294                           prodl	equ	0xFF3
  8295                           intcon	equ	0xFF2
  8296                           intcon2	equ	0xFF1
  8297                           postinc0	equ	0xFEE
  8298                           plusw0	equ	0xFEB
  8299                           wreg	equ	0xFE8
  8300                           indf1	equ	0xFE7
  8301                           postdec1	equ	0xFE5
  8302                           fsr1h	equ	0xFE2
  8303                           fsr1l	equ	0xFE1
  8304                           indf2	equ	0xFDF
  8305                           postinc2	equ	0xFDE
  8306                           postdec2	equ	0xFDD
  8307                           plusw2	equ	0xFDB
  8308                           fsr2h	equ	0xFDA
  8309                           fsr2l	equ	0xFD9
  8310                           status	equ	0xFD8
  8311                           
  8312 ;; *************** function _INTERRUPT_Initialize *****************
  8313 ;; Defined at:
  8314 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  8315 ;; Parameters:    Size  Location     Type
  8316 ;;		None
  8317 ;; Auto vars:     Size  Location     Type
  8318 ;;		None
  8319 ;; Return value:  Size  Location     Type
  8320 ;;                  1    wreg      void 
  8321 ;; Registers used:
  8322 ;;		None
  8323 ;; Tracked objects:
  8324 ;;		On entry : 0/0
  8325 ;;		On exit  : 0/0
  8326 ;;		Unchanged: 0/0
  8327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8328 ;;      Params:         0       0       0       0       0       0       0
  8329 ;;      Locals:         0       0       0       0       0       0       0
  8330 ;;      Temps:          0       0       0       0       0       0       0
  8331 ;;      Totals:         0       0       0       0       0       0       0
  8332 ;;Total ram usage:        0 bytes
  8333 ;; Hardware stack levels used:    1
  8334 ;; Hardware stack levels required when called:    3
  8335 ;; This function calls:
  8336 ;;		Nothing
  8337 ;; This function is called by:
  8338 ;;		_SYSTEM_Initialize
  8339 ;; This function uses a non-reentrant model
  8340 ;;
  8341                           
  8342                           	psect	text48
  8343  00395A                     __ptext48:
  8344                           	opt stack 0
  8345  00395A                     _INTERRUPT_Initialize:
  8346                           	opt stack 25
  8347                           
  8348                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  8349                           
  8350                           ;incstack = 0
  8351  00395A  9ED0               	bcf	4048,7,c	;volatile
  8352  00395C  0012               	return		;funcret
  8353  00395E                     __end_of_INTERRUPT_Initialize:
  8354                           	opt stack 0
  8355                           tosu	equ	0xFFF
  8356                           tosh	equ	0xFFE
  8357                           tosl	equ	0xFFD
  8358                           pclath	equ	0xFFA
  8359                           tblptru	equ	0xFF8
  8360                           tblptrh	equ	0xFF7
  8361                           tblptrl	equ	0xFF6
  8362                           tablat	equ	0xFF5
  8363                           prodh	equ	0xFF4
  8364                           prodl	equ	0xFF3
  8365                           intcon	equ	0xFF2
  8366                           intcon2	equ	0xFF1
  8367                           postinc0	equ	0xFEE
  8368                           plusw0	equ	0xFEB
  8369                           wreg	equ	0xFE8
  8370                           indf1	equ	0xFE7
  8371                           postdec1	equ	0xFE5
  8372                           fsr1h	equ	0xFE2
  8373                           fsr1l	equ	0xFE1
  8374                           indf2	equ	0xFDF
  8375                           postinc2	equ	0xFDE
  8376                           postdec2	equ	0xFDD
  8377                           plusw2	equ	0xFDB
  8378                           fsr2h	equ	0xFDA
  8379                           fsr2l	equ	0xFD9
  8380                           status	equ	0xFD8
  8381                           
  8382 ;; *************** function _EUSART1_Initialize *****************
  8383 ;; Defined at:
  8384 ;;		line 74 in file "mcc_generated_files/eusart1.c"
  8385 ;; Parameters:    Size  Location     Type
  8386 ;;		None
  8387 ;; Auto vars:     Size  Location     Type
  8388 ;;		None
  8389 ;; Return value:  Size  Location     Type
  8390 ;;                  1    wreg      void 
  8391 ;; Registers used:
  8392 ;;		wreg, status,2
  8393 ;; Tracked objects:
  8394 ;;		On entry : 0/0
  8395 ;;		On exit  : 0/0
  8396 ;;		Unchanged: 0/0
  8397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8398 ;;      Params:         0       0       0       0       0       0       0
  8399 ;;      Locals:         0       0       0       0       0       0       0
  8400 ;;      Temps:          0       0       0       0       0       0       0
  8401 ;;      Totals:         0       0       0       0       0       0       0
  8402 ;;Total ram usage:        0 bytes
  8403 ;; Hardware stack levels used:    1
  8404 ;; Hardware stack levels required when called:    3
  8405 ;; This function calls:
  8406 ;;		Nothing
  8407 ;; This function is called by:
  8408 ;;		_SYSTEM_Initialize
  8409 ;; This function uses a non-reentrant model
  8410 ;;
  8411                           
  8412                           	psect	text49
  8413  0033C2                     __ptext49:
  8414                           	opt stack 0
  8415  0033C2                     _EUSART1_Initialize:
  8416                           	opt stack 25
  8417                           
  8418                           ;eusart1.c: 77: PIE1bits.RC1IE = 0;
  8419                           
  8420                           ;incstack = 0
  8421  0033C2  9A9D               	bcf	3997,5,c	;volatile
  8422                           
  8423                           ;eusart1.c: 78: PIE1bits.TX1IE = 0;
  8424  0033C4  989D               	bcf	3997,4,c	;volatile
  8425                           
  8426                           ;eusart1.c: 82: BAUDCON1 = 0x08;
  8427  0033C6  0E08               	movlw	8
  8428  0033C8  6EB8               	movwf	4024,c	;volatile
  8429                           
  8430                           ;eusart1.c: 85: RCSTA1 = 0x90;
  8431  0033CA  0E90               	movlw	144
  8432  0033CC  6EAB               	movwf	4011,c	;volatile
  8433                           
  8434                           ;eusart1.c: 88: TXSTA1 = 0x24;
  8435  0033CE  0E24               	movlw	36
  8436  0033D0  6EAC               	movwf	4012,c	;volatile
  8437                           
  8438                           ;eusart1.c: 91: SPBRG1 = 0x10;
  8439  0033D2  0E10               	movlw	16
  8440  0033D4  6EAF               	movwf	4015,c	;volatile
  8441                           
  8442                           ;eusart1.c: 94: SPBRGH1 = 0x00;
  8443  0033D6  0E00               	movlw	0
  8444  0033D8  6EB0               	movwf	4016,c	;volatile
  8445                           
  8446                           ;eusart1.c: 98: eusart1TxHead = 0;
  8447  0033DA  0E00               	movlw	0
  8448  0033DC  6E39               	movwf	_eusart1TxHead,c	;volatile
  8449                           
  8450                           ;eusart1.c: 99: eusart1TxTail = 0;
  8451  0033DE  0E00               	movlw	0
  8452  0033E0  6E38               	movwf	_eusart1TxTail,c	;volatile
  8453                           
  8454                           ;eusart1.c: 100: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  8455  0033E2  0E46               	movlw	70
  8456  0033E4  0100               	movlb	0	; () banked
  8457  0033E6  6FFF               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
  8458                           
  8459                           ;eusart1.c: 102: eusart1RxHead = 0;
  8460  0033E8  0E00               	movlw	0
  8461  0033EA  6E37               	movwf	_eusart1RxHead,c	;volatile
  8462                           
  8463                           ;eusart1.c: 103: eusart1RxTail = 0;
  8464  0033EC  0E00               	movlw	0
  8465  0033EE  6E36               	movwf	_eusart1RxTail,c	;volatile
  8466                           
  8467                           ;eusart1.c: 104: eusart1RxCount = 0;
  8468  0033F0  0E00               	movlw	0
  8469  0033F2  6FD3               	movwf	_eusart1RxCount& (0+255),b	;volatile
  8470                           
  8471                           ; BSR set to: 0
  8472                           ;eusart1.c: 107: PIE1bits.RC1IE = 1;
  8473  0033F4  8A9D               	bsf	3997,5,c	;volatile
  8474                           
  8475                           ; BSR set to: 0
  8476  0033F6  0012               	return		;funcret
  8477  0033F8                     __end_of_EUSART1_Initialize:
  8478                           	opt stack 0
  8479                           tosu	equ	0xFFF
  8480                           tosh	equ	0xFFE
  8481                           tosl	equ	0xFFD
  8482                           pclath	equ	0xFFA
  8483                           tblptru	equ	0xFF8
  8484                           tblptrh	equ	0xFF7
  8485                           tblptrl	equ	0xFF6
  8486                           tablat	equ	0xFF5
  8487                           prodh	equ	0xFF4
  8488                           prodl	equ	0xFF3
  8489                           intcon	equ	0xFF2
  8490                           intcon2	equ	0xFF1
  8491                           postinc0	equ	0xFEE
  8492                           plusw0	equ	0xFEB
  8493                           wreg	equ	0xFE8
  8494                           indf1	equ	0xFE7
  8495                           postdec1	equ	0xFE5
  8496                           fsr1h	equ	0xFE2
  8497                           fsr1l	equ	0xFE1
  8498                           indf2	equ	0xFDF
  8499                           postinc2	equ	0xFDE
  8500                           postdec2	equ	0xFDD
  8501                           plusw2	equ	0xFDB
  8502                           fsr2h	equ	0xFDA
  8503                           fsr2l	equ	0xFD9
  8504                           status	equ	0xFD8
  8505                           
  8506 ;; *************** function _ADC_Initialize *****************
  8507 ;; Defined at:
  8508 ;;		line 58 in file "mcc_generated_files/adc.c"
  8509 ;; Parameters:    Size  Location     Type
  8510 ;;		None
  8511 ;; Auto vars:     Size  Location     Type
  8512 ;;		None
  8513 ;; Return value:  Size  Location     Type
  8514 ;;                  1    wreg      void 
  8515 ;; Registers used:
  8516 ;;		wreg, status,2
  8517 ;; Tracked objects:
  8518 ;;		On entry : 0/0
  8519 ;;		On exit  : 0/0
  8520 ;;		Unchanged: 0/0
  8521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8522 ;;      Params:         0       0       0       0       0       0       0
  8523 ;;      Locals:         0       0       0       0       0       0       0
  8524 ;;      Temps:          0       0       0       0       0       0       0
  8525 ;;      Totals:         0       0       0       0       0       0       0
  8526 ;;Total ram usage:        0 bytes
  8527 ;; Hardware stack levels used:    1
  8528 ;; Hardware stack levels required when called:    3
  8529 ;; This function calls:
  8530 ;;		Nothing
  8531 ;; This function is called by:
  8532 ;;		_SYSTEM_Initialize
  8533 ;; This function uses a non-reentrant model
  8534 ;;
  8535                           
  8536                           	psect	text50
  8537  00381A                     __ptext50:
  8538                           	opt stack 0
  8539  00381A                     _ADC_Initialize:
  8540                           	opt stack 25
  8541                           
  8542                           ;adc.c: 63: ADCON0 = 0x05;
  8543                           
  8544                           ; BSR set to: 0
  8545                           ;incstack = 0
  8546  00381A  0E05               	movlw	5
  8547  00381C  6EC2               	movwf	4034,c	;volatile
  8548                           
  8549                           ;adc.c: 66: ADCON1 = 0x00;
  8550  00381E  0E00               	movlw	0
  8551  003820  6EC1               	movwf	4033,c	;volatile
  8552                           
  8553                           ;adc.c: 69: ADCON2 = 0x87;
  8554  003822  0E87               	movlw	135
  8555  003824  6EC0               	movwf	4032,c	;volatile
  8556                           
  8557                           ;adc.c: 72: ADRESL = 0x00;
  8558  003826  0E00               	movlw	0
  8559  003828  6EC3               	movwf	4035,c	;volatile
  8560                           
  8561                           ;adc.c: 75: ADRESH = 0x00;
  8562  00382A  0E00               	movlw	0
  8563  00382C  6EC4               	movwf	4036,c	;volatile
  8564  00382E  0012               	return		;funcret
  8565  003830                     __end_of_ADC_Initialize:
  8566                           	opt stack 0
  8567                           tosu	equ	0xFFF
  8568                           tosh	equ	0xFFE
  8569                           tosl	equ	0xFFD
  8570                           pclath	equ	0xFFA
  8571                           tblptru	equ	0xFF8
  8572                           tblptrh	equ	0xFF7
  8573                           tblptrl	equ	0xFF6
  8574                           tablat	equ	0xFF5
  8575                           prodh	equ	0xFF4
  8576                           prodl	equ	0xFF3
  8577                           intcon	equ	0xFF2
  8578                           intcon2	equ	0xFF1
  8579                           postinc0	equ	0xFEE
  8580                           plusw0	equ	0xFEB
  8581                           wreg	equ	0xFE8
  8582                           indf1	equ	0xFE7
  8583                           postdec1	equ	0xFE5
  8584                           fsr1h	equ	0xFE2
  8585                           fsr1l	equ	0xFE1
  8586                           indf2	equ	0xFDF
  8587                           postinc2	equ	0xFDE
  8588                           postdec2	equ	0xFDD
  8589                           plusw2	equ	0xFDB
  8590                           fsr2h	equ	0xFDA
  8591                           fsr2l	equ	0xFD9
  8592                           status	equ	0xFD8
  8593                           
  8594 ;; *************** function _SetMcuRunTime *****************
  8595 ;; Defined at:
  8596 ;;		line 43 in file "SystemStatus.c"
  8597 ;; Parameters:    Size  Location     Type
  8598 ;;		None
  8599 ;; Auto vars:     Size  Location     Type
  8600 ;;		None
  8601 ;; Return value:  Size  Location     Type
  8602 ;;                  1    wreg      void 
  8603 ;; Registers used:
  8604 ;;		wreg, status,2, status,0, cstack
  8605 ;; Tracked objects:
  8606 ;;		On entry : 0/0
  8607 ;;		On exit  : 0/0
  8608 ;;		Unchanged: 0/0
  8609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8610 ;;      Params:         0       0       0       0       0       0       0
  8611 ;;      Locals:         0       0       0       0       0       0       0
  8612 ;;      Temps:          0       0       0       0       0       0       0
  8613 ;;      Totals:         0       0       0       0       0       0       0
  8614 ;;Total ram usage:        0 bytes
  8615 ;; Hardware stack levels used:    1
  8616 ;; Hardware stack levels required when called:    4
  8617 ;; This function calls:
  8618 ;;		___llmod
  8619 ;; This function is called by:
  8620 ;;		_main
  8621 ;; This function uses a non-reentrant model
  8622 ;;
  8623                           
  8624                           	psect	text51
  8625  003168                     __ptext51:
  8626                           	opt stack 0
  8627  003168                     _SetMcuRunTime:
  8628                           	opt stack 26
  8629                           
  8630                           ;SystemStatus.c: 45: mcuRunTimeIn5SecTicks++;
  8631                           
  8632                           ;incstack = 0
  8633  003168  0E01               	movlw	1
  8634  00316A  0100               	movlb	0	; () banked
  8635  00316C  27C0               	addwf	_mcuRunTimeIn5SecTicks& (0+255),f,b
  8636  00316E  0E00               	movlw	0
  8637  003170  23C1               	addwfc	(_mcuRunTimeIn5SecTicks+1)& (0+255),f,b
  8638  003172  23C2               	addwfc	(_mcuRunTimeIn5SecTicks+2)& (0+255),f,b
  8639  003174  23C3               	addwfc	(_mcuRunTimeIn5SecTicks+3)& (0+255),f,b
  8640                           
  8641                           ; BSR set to: 0
  8642                           ;SystemStatus.c: 46: mcuRunTimeIn5SecTicks %= (17280);
  8643  003176  C0C0  F018         	movff	_mcuRunTimeIn5SecTicks,___llmod@dividend
  8644  00317A  C0C1  F019         	movff	_mcuRunTimeIn5SecTicks+1,___llmod@dividend+1
  8645  00317E  C0C2  F01A         	movff	_mcuRunTimeIn5SecTicks+2,___llmod@dividend+2
  8646  003182  C0C3  F01B         	movff	_mcuRunTimeIn5SecTicks+3,___llmod@dividend+3
  8647  003186  0E80               	movlw	128
  8648  003188  6E1C               	movwf	___llmod@divisor,c
  8649  00318A  0E43               	movlw	67
  8650  00318C  6E1D               	movwf	___llmod@divisor+1,c
  8651  00318E  0E00               	movlw	0
  8652  003190  6E1E               	movwf	___llmod@divisor+2,c
  8653  003192  0E00               	movlw	0
  8654  003194  6E1F               	movwf	___llmod@divisor+3,c
  8655  003196  EC6C  F015         	call	___llmod	;wreg free
  8656  00319A  C018  F0C0         	movff	?___llmod,_mcuRunTimeIn5SecTicks
  8657  00319E  C019  F0C1         	movff	?___llmod+1,_mcuRunTimeIn5SecTicks+1
  8658  0031A2  C01A  F0C2         	movff	?___llmod+2,_mcuRunTimeIn5SecTicks+2
  8659  0031A6  C01B  F0C3         	movff	?___llmod+3,_mcuRunTimeIn5SecTicks+3
  8660  0031AA  0012               	return		;funcret
  8661  0031AC                     __end_of_SetMcuRunTime:
  8662                           	opt stack 0
  8663                           tosu	equ	0xFFF
  8664                           tosh	equ	0xFFE
  8665                           tosl	equ	0xFFD
  8666                           pclath	equ	0xFFA
  8667                           tblptru	equ	0xFF8
  8668                           tblptrh	equ	0xFF7
  8669                           tblptrl	equ	0xFF6
  8670                           tablat	equ	0xFF5
  8671                           prodh	equ	0xFF4
  8672                           prodl	equ	0xFF3
  8673                           intcon	equ	0xFF2
  8674                           intcon2	equ	0xFF1
  8675                           postinc0	equ	0xFEE
  8676                           plusw0	equ	0xFEB
  8677                           wreg	equ	0xFE8
  8678                           indf1	equ	0xFE7
  8679                           postdec1	equ	0xFE5
  8680                           fsr1h	equ	0xFE2
  8681                           fsr1l	equ	0xFE1
  8682                           indf2	equ	0xFDF
  8683                           postinc2	equ	0xFDE
  8684                           postdec2	equ	0xFDD
  8685                           plusw2	equ	0xFDB
  8686                           fsr2h	equ	0xFDA
  8687                           fsr2l	equ	0xFD9
  8688                           status	equ	0xFD8
  8689                           
  8690 ;; *************** function ___llmod *****************
  8691 ;; Defined at:
  8692 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  8693 ;; Parameters:    Size  Location     Type
  8694 ;;  dividend        4   23[COMRAM] unsigned long 
  8695 ;;  divisor         4   27[COMRAM] unsigned long 
  8696 ;; Auto vars:     Size  Location     Type
  8697 ;;  counter         1   31[COMRAM] unsigned char 
  8698 ;; Return value:  Size  Location     Type
  8699 ;;                  4   23[COMRAM] unsigned long 
  8700 ;; Registers used:
  8701 ;;		wreg, status,2, status,0
  8702 ;; Tracked objects:
  8703 ;;		On entry : 0/0
  8704 ;;		On exit  : 0/0
  8705 ;;		Unchanged: 0/0
  8706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8707 ;;      Params:         8       0       0       0       0       0       0
  8708 ;;      Locals:         1       0       0       0       0       0       0
  8709 ;;      Temps:          0       0       0       0       0       0       0
  8710 ;;      Totals:         9       0       0       0       0       0       0
  8711 ;;Total ram usage:        9 bytes
  8712 ;; Hardware stack levels used:    1
  8713 ;; Hardware stack levels required when called:    3
  8714 ;; This function calls:
  8715 ;;		Nothing
  8716 ;; This function is called by:
  8717 ;;		_SetMcuRunTime
  8718 ;;		_GetMcuRunTime
  8719 ;; This function uses a non-reentrant model
  8720 ;;
  8721                           
  8722                           	psect	text52
  8723  002AD8                     __ptext52:
  8724                           	opt stack 0
  8725  002AD8                     ___llmod:
  8726                           	opt stack 24
  8727                           
  8728                           ;incstack = 0
  8729  002AD8  501C               	movf	___llmod@divisor,w,c
  8730  002ADA  101D               	iorwf	___llmod@divisor+1,w,c
  8731  002ADC  101E               	iorwf	___llmod@divisor+2,w,c
  8732  002ADE  101F               	iorwf	___llmod@divisor+3,w,c
  8733  002AE0  B4D8               	btfsc	status,2,c
  8734  002AE2  D024               	goto	l1831
  8735  002AE4  0E01               	movlw	1
  8736  002AE6  6E20               	movwf	___llmod@counter,c
  8737  002AE8  D006               	goto	l1826
  8738  002AEA  90D8               	bcf	status,0,c
  8739  002AEC  361C               	rlcf	___llmod@divisor,f,c
  8740  002AEE  361D               	rlcf	___llmod@divisor+1,f,c
  8741  002AF0  361E               	rlcf	___llmod@divisor+2,f,c
  8742  002AF2  361F               	rlcf	___llmod@divisor+3,f,c
  8743  002AF4  2A20               	incf	___llmod@counter,f,c
  8744  002AF6                     l1826:
  8745  002AF6  AE1F               	btfss	___llmod@divisor+3,7,c
  8746  002AF8  D7F8               	goto	l1827
  8747  002AFA                     u7680:
  8748  002AFA  501C               	movf	___llmod@divisor,w,c
  8749  002AFC  5C18               	subwf	___llmod@dividend,w,c
  8750  002AFE  501D               	movf	___llmod@divisor+1,w,c
  8751  002B00  5819               	subwfb	___llmod@dividend+1,w,c
  8752  002B02  501E               	movf	___llmod@divisor+2,w,c
  8753  002B04  581A               	subwfb	___llmod@dividend+2,w,c
  8754  002B06  501F               	movf	___llmod@divisor+3,w,c
  8755  002B08  581B               	subwfb	___llmod@dividend+3,w,c
  8756  002B0A  A0D8               	btfss	status,0,c
  8757  002B0C  D008               	goto	l1830
  8758  002B0E  501C               	movf	___llmod@divisor,w,c
  8759  002B10  5E18               	subwf	___llmod@dividend,f,c
  8760  002B12  501D               	movf	___llmod@divisor+1,w,c
  8761  002B14  5A19               	subwfb	___llmod@dividend+1,f,c
  8762  002B16  501E               	movf	___llmod@divisor+2,w,c
  8763  002B18  5A1A               	subwfb	___llmod@dividend+2,f,c
  8764  002B1A  501F               	movf	___llmod@divisor+3,w,c
  8765  002B1C  5A1B               	subwfb	___llmod@dividend+3,f,c
  8766  002B1E                     l1830:
  8767  002B1E  90D8               	bcf	status,0,c
  8768  002B20  321F               	rrcf	___llmod@divisor+3,f,c
  8769  002B22  321E               	rrcf	___llmod@divisor+2,f,c
  8770  002B24  321D               	rrcf	___llmod@divisor+1,f,c
  8771  002B26  321C               	rrcf	___llmod@divisor,f,c
  8772  002B28  2E20               	decfsz	___llmod@counter,f,c
  8773  002B2A  D7E7               	goto	u7680
  8774  002B2C                     l1831:
  8775  002B2C  C018  F018         	movff	___llmod@dividend,?___llmod
  8776  002B30  C019  F019         	movff	___llmod@dividend+1,?___llmod+1
  8777  002B34  C01A  F01A         	movff	___llmod@dividend+2,?___llmod+2
  8778  002B38  C01B  F01B         	movff	___llmod@dividend+3,?___llmod+3
  8779  002B3C  0012               	return		;funcret
  8780  002B3E                     __end_of___llmod:
  8781                           	opt stack 0
  8782                           tosu	equ	0xFFF
  8783                           tosh	equ	0xFFE
  8784                           tosl	equ	0xFFD
  8785                           pclath	equ	0xFFA
  8786                           tblptru	equ	0xFF8
  8787                           tblptrh	equ	0xFF7
  8788                           tblptrl	equ	0xFF6
  8789                           tablat	equ	0xFF5
  8790                           prodh	equ	0xFF4
  8791                           prodl	equ	0xFF3
  8792                           intcon	equ	0xFF2
  8793                           intcon2	equ	0xFF1
  8794                           postinc0	equ	0xFEE
  8795                           plusw0	equ	0xFEB
  8796                           wreg	equ	0xFE8
  8797                           indf1	equ	0xFE7
  8798                           postdec1	equ	0xFE5
  8799                           fsr1h	equ	0xFE2
  8800                           fsr1l	equ	0xFE1
  8801                           indf2	equ	0xFDF
  8802                           postinc2	equ	0xFDE
  8803                           postdec2	equ	0xFDD
  8804                           plusw2	equ	0xFDB
  8805                           fsr2h	equ	0xFDA
  8806                           fsr2l	equ	0xFD9
  8807                           status	equ	0xFD8
  8808                           
  8809 ;; *************** function _SendSystemStartAck *****************
  8810 ;; Defined at:
  8811 ;;		line 140 in file "SystemCommon.c"
  8812 ;; Parameters:    Size  Location     Type
  8813 ;;		None
  8814 ;; Auto vars:     Size  Location     Type
  8815 ;;		None
  8816 ;; Return value:  Size  Location     Type
  8817 ;;                  1    wreg      void 
  8818 ;; Registers used:
  8819 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8820 ;; Tracked objects:
  8821 ;;		On entry : 0/0
  8822 ;;		On exit  : 0/0
  8823 ;;		Unchanged: 0/0
  8824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8825 ;;      Params:         0       0       0       0       0       0       0
  8826 ;;      Locals:         0       0       0       0       0       0       0
  8827 ;;      Temps:          0       0       0       0       0       0       0
  8828 ;;      Totals:         0       0       0       0       0       0       0
  8829 ;;Total ram usage:        0 bytes
  8830 ;; Hardware stack levels used:    1
  8831 ;; Hardware stack levels required when called:    6
  8832 ;; This function calls:
  8833 ;;		_SendAckMessage
  8834 ;; This function is called by:
  8835 ;;		_main
  8836 ;; This function uses a non-reentrant model
  8837 ;;
  8838                           
  8839                           	psect	text53
  8840  00392A                     __ptext53:
  8841                           	opt stack 0
  8842  00392A                     _SendSystemStartAck:
  8843                           	opt stack 24
  8844                           
  8845                           ;SystemCommon.c: 142: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_SYSTE
      +                          M_START);
  8846                           
  8847                           ;incstack = 0
  8848  00392A  0E10               	movlw	16
  8849  00392C  6E24               	movwf	SendAckMessage@inRequest,c
  8850  00392E  0E01               	movlw	1
  8851  003930  EC8C  F017         	call	_SendAckMessage
  8852  003934  0012               	return		;funcret
  8853  003936                     __end_of_SendSystemStartAck:
  8854                           	opt stack 0
  8855                           tosu	equ	0xFFF
  8856                           tosh	equ	0xFFE
  8857                           tosl	equ	0xFFD
  8858                           pclath	equ	0xFFA
  8859                           tblptru	equ	0xFF8
  8860                           tblptrh	equ	0xFF7
  8861                           tblptrl	equ	0xFF6
  8862                           tablat	equ	0xFF5
  8863                           prodh	equ	0xFF4
  8864                           prodl	equ	0xFF3
  8865                           intcon	equ	0xFF2
  8866                           intcon2	equ	0xFF1
  8867                           postinc0	equ	0xFEE
  8868                           plusw0	equ	0xFEB
  8869                           wreg	equ	0xFE8
  8870                           indf1	equ	0xFE7
  8871                           postdec1	equ	0xFE5
  8872                           fsr1h	equ	0xFE2
  8873                           fsr1l	equ	0xFE1
  8874                           indf2	equ	0xFDF
  8875                           postinc2	equ	0xFDE
  8876                           postdec2	equ	0xFDD
  8877                           plusw2	equ	0xFDB
  8878                           fsr2h	equ	0xFDA
  8879                           fsr2l	equ	0xFD9
  8880                           status	equ	0xFD8
  8881                           
  8882 ;; *************** function _SendAckMessage *****************
  8883 ;; Defined at:
  8884 ;;		line 171 in file "EusartApp.c"
  8885 ;; Parameters:    Size  Location     Type
  8886 ;;  inGroup         1    wreg     enum E7163
  8887 ;;  inRequest       1   35[COMRAM] enum E7171
  8888 ;; Auto vars:     Size  Location     Type
  8889 ;;  inGroup         1   36[COMRAM] enum E7163
  8890 ;;  TxMsg           6   37[COMRAM] unsigned char [6]
  8891 ;; Return value:  Size  Location     Type
  8892 ;;                  1    wreg      void 
  8893 ;; Registers used:
  8894 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8895 ;; Tracked objects:
  8896 ;;		On entry : 0/0
  8897 ;;		On exit  : 0/0
  8898 ;;		Unchanged: 0/0
  8899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8900 ;;      Params:         1       0       0       0       0       0       0
  8901 ;;      Locals:         7       0       0       0       0       0       0
  8902 ;;      Temps:          0       0       0       0       0       0       0
  8903 ;;      Totals:         8       0       0       0       0       0       0
  8904 ;;Total ram usage:        8 bytes
  8905 ;; Hardware stack levels used:    1
  8906 ;; Hardware stack levels required when called:    5
  8907 ;; This function calls:
  8908 ;;		_WriteUartMessage
  8909 ;;		_ZeroArray
  8910 ;;		_crc8
  8911 ;; This function is called by:
  8912 ;;		_testLeds
  8913 ;;		_SetAdcOperationMode
  8914 ;;		_SetConversionResultFormat
  8915 ;;		_SetChannelMode
  8916 ;;		_FlashReadUart
  8917 ;;		_FlashEreaseMem
  8918 ;;		_DacSetValue
  8919 ;;		_UpdateTxFreq
  8920 ;;		_UpdateRxFreq
  8921 ;;		_SetSynthTxOper
  8922 ;;		_SetSynthRxOper
  8923 ;;		_ResetMcu
  8924 ;;		_SendSystemStartAck
  8925 ;;		_keepAliveSignalUart
  8926 ;; This function uses a non-reentrant model
  8927 ;;
  8928                           
  8929                           	psect	text54
  8930  002F18                     __ptext54:
  8931                           	opt stack 0
  8932  002F18                     _SendAckMessage:
  8933                           	opt stack 22
  8934                           
  8935                           ;incstack = 0
  8936                           ;SendAckMessage@inGroup stored from wreg
  8937  002F18  6E25               	movwf	SendAckMessage@inGroup,c
  8938                           
  8939                           ;EusartApp.c: 174: char TxMsg[(0x5) + 1];
  8940                           ;EusartApp.c: 175: ZeroArray(TxMsg, (0x5) + 1);
  8941  002F1A  0E26               	movlw	low SendAckMessage@TxMsg
  8942  002F1C  6E20               	movwf	ZeroArray@array,c
  8943  002F1E  0E00               	movlw	high SendAckMessage@TxMsg
  8944  002F20  6E21               	movwf	ZeroArray@array+1,c
  8945  002F22  0E00               	movlw	0
  8946  002F24  6E23               	movwf	ZeroArray@size+1,c
  8947  002F26  0E06               	movlw	6
  8948  002F28  6E22               	movwf	ZeroArray@size,c
  8949  002F2A  ECC8  F01B         	call	_ZeroArray	;wreg free
  8950                           
  8951                           ;EusartApp.c: 178: TxMsg[(0)] = (0x24);
  8952  002F2E  0E24               	movlw	36
  8953  002F30  6E26               	movwf	SendAckMessage@TxMsg,c
  8954                           
  8955                           ;EusartApp.c: 179: TxMsg[(1)] = inGroup;
  8956  002F32  C025  F027         	movff	SendAckMessage@inGroup,SendAckMessage@TxMsg+1
  8957                           
  8958                           ;EusartApp.c: 180: TxMsg[(2)] = inRequest;
  8959  002F36  C024  F028         	movff	SendAckMessage@inRequest,SendAckMessage@TxMsg+2
  8960                           
  8961                           ;EusartApp.c: 181: TxMsg[(3)] = 0;
  8962  002F3A  0E00               	movlw	0
  8963  002F3C  6E29               	movwf	SendAckMessage@TxMsg+3,c
  8964                           
  8965                           ;EusartApp.c: 183: TxMsg[(0x5)] = crc8(TxMsg, (0x5));
  8966  002F3E  0E26               	movlw	low SendAckMessage@TxMsg
  8967  002F40  6E18               	movwf	crc8@dataArray,c
  8968  002F42  0E00               	movlw	high SendAckMessage@TxMsg
  8969  002F44  6E19               	movwf	crc8@dataArray+1,c
  8970  002F46  0E00               	movlw	0
  8971  002F48  6E1B               	movwf	crc8@dataSize+1,c
  8972  002F4A  0E05               	movlw	5
  8973  002F4C  6E1A               	movwf	crc8@dataSize,c
  8974  002F4E  ECB5  F017         	call	_crc8	;wreg free
  8975  002F52  6E2B               	movwf	SendAckMessage@TxMsg+5,c
  8976                           
  8977                           ;EusartApp.c: 185: WriteUartMessage(TxMsg, (0x5) + 1);
  8978  002F54  0E26               	movlw	low SendAckMessage@TxMsg
  8979  002F56  6E19               	movwf	WriteUartMessage@dataBuf,c
  8980  002F58  0E00               	movlw	high SendAckMessage@TxMsg
  8981  002F5A  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  8982  002F5C  0E00               	movlw	0
  8983  002F5E  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  8984  002F60  0E06               	movlw	6
  8985  002F62  6E1B               	movwf	WriteUartMessage@dataSize,c
  8986  002F64  ECFC  F019         	call	_WriteUartMessage	;wreg free
  8987  002F68  0012               	return		;funcret
  8988  002F6A                     __end_of_SendAckMessage:
  8989                           	opt stack 0
  8990                           tosu	equ	0xFFF
  8991                           tosh	equ	0xFFE
  8992                           tosl	equ	0xFFD
  8993                           pclath	equ	0xFFA
  8994                           tblptru	equ	0xFF8
  8995                           tblptrh	equ	0xFF7
  8996                           tblptrl	equ	0xFF6
  8997                           tablat	equ	0xFF5
  8998                           prodh	equ	0xFF4
  8999                           prodl	equ	0xFF3
  9000                           intcon	equ	0xFF2
  9001                           intcon2	equ	0xFF1
  9002                           postinc0	equ	0xFEE
  9003                           plusw0	equ	0xFEB
  9004                           wreg	equ	0xFE8
  9005                           indf1	equ	0xFE7
  9006                           postdec1	equ	0xFE5
  9007                           fsr1h	equ	0xFE2
  9008                           fsr1l	equ	0xFE1
  9009                           indf2	equ	0xFDF
  9010                           postinc2	equ	0xFDE
  9011                           postdec2	equ	0xFDD
  9012                           plusw2	equ	0xFDB
  9013                           fsr2h	equ	0xFDA
  9014                           fsr2l	equ	0xFD9
  9015                           status	equ	0xFD8
  9016                           
  9017 ;; *************** function _crc8 *****************
  9018 ;; Defined at:
  9019 ;;		line 13 in file "SystemCommon.c"
  9020 ;; Parameters:    Size  Location     Type
  9021 ;;  dataArray       2   23[COMRAM] PTR unsigned char 
  9022 ;;		 -> GetMcuRunTime@TxMsg(9), GetMcuFwVersion@TxMsg(9), SynthReadData@TxMsg(27), FlashReadCondition@TxMsg(9), 
  9023 ;;		 -> FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), rxMsgQueue(20), 
  9024 ;;  dataSize        2   25[COMRAM] int 
  9025 ;; Auto vars:     Size  Location     Type
  9026 ;;  i               2   30[COMRAM] int 
  9027 ;;  crc             2   28[COMRAM] int 
  9028 ;; Return value:  Size  Location     Type
  9029 ;;                  1    wreg      unsigned char 
  9030 ;; Registers used:
  9031 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9032 ;; Tracked objects:
  9033 ;;		On entry : 0/0
  9034 ;;		On exit  : 0/0
  9035 ;;		Unchanged: 0/0
  9036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9037 ;;      Params:         4       0       0       0       0       0       0
  9038 ;;      Locals:         4       0       0       0       0       0       0
  9039 ;;      Temps:          1       0       0       0       0       0       0
  9040 ;;      Totals:         9       0       0       0       0       0       0
  9041 ;;Total ram usage:        9 bytes
  9042 ;; Hardware stack levels used:    1
  9043 ;; Hardware stack levels required when called:    3
  9044 ;; This function calls:
  9045 ;;		Nothing
  9046 ;; This function is called by:
  9047 ;;		_readUartMessage
  9048 ;;		_SendAckMessage
  9049 ;;		_FlashReadUart
  9050 ;;		_FlashReadCondition
  9051 ;;		_SynthReadData
  9052 ;;		_GetMcuFwVersion
  9053 ;;		_GetMcuRunTime
  9054 ;; This function uses a non-reentrant model
  9055 ;;
  9056                           
  9057                           	psect	text55
  9058  002F6A                     __ptext55:
  9059                           	opt stack 0
  9060  002F6A                     _crc8:
  9061                           	opt stack 26
  9062                           
  9063                           ;SystemCommon.c: 15: int crc = 0;
  9064                           
  9065                           ;incstack = 0
  9066  002F6A  0E00               	movlw	0
  9067  002F6C  6E1E               	movwf	crc8@crc+1,c
  9068  002F6E  0E00               	movlw	0
  9069  002F70  6E1D               	movwf	crc8@crc,c
  9070                           
  9071                           ;SystemCommon.c: 16: for (int i = 0; i < dataSize; i++)
  9072  002F72  0E00               	movlw	0
  9073  002F74  6E20               	movwf	crc8@i+1,c
  9074  002F76  0E00               	movlw	0
  9075  002F78  6E1F               	movwf	crc8@i,c
  9076  002F7A  D00E               	goto	l1285
  9077  002F7C                     
  9078                           ;SystemCommon.c: 17: {
  9079                           ;SystemCommon.c: 18: crc += dataArray[i];
  9080  002F7C  501F               	movf	crc8@i,w,c
  9081  002F7E  2418               	addwf	crc8@dataArray,w,c
  9082  002F80  6ED9               	movwf	fsr2l,c
  9083  002F82  5020               	movf	crc8@i+1,w,c
  9084  002F84  2019               	addwfc	crc8@dataArray+1,w,c
  9085  002F86  6EDA               	movwf	fsr2h,c
  9086  002F88  50DF               	movf	indf2,w,c
  9087  002F8A  6E1C               	movwf	??_crc8& (0+255),c
  9088  002F8C  501C               	movf	??_crc8,w,c
  9089  002F8E  261D               	addwf	crc8@crc,f,c
  9090  002F90  0E00               	movlw	0
  9091  002F92  221E               	addwfc	crc8@crc+1,f,c
  9092  002F94  4A1F               	infsnz	crc8@i,f,c
  9093  002F96  2A20               	incf	crc8@i+1,f,c
  9094  002F98                     l1285:
  9095  002F98  501A               	movf	crc8@dataSize,w,c
  9096  002F9A  5C1F               	subwf	crc8@i,w,c
  9097  002F9C  5020               	movf	crc8@i+1,w,c
  9098  002F9E  0A80               	xorlw	128
  9099  002FA0  6E1C               	movwf	??_crc8& (0+255),c
  9100  002FA2  501B               	movf	crc8@dataSize+1,w,c
  9101  002FA4  0A80               	xorlw	128
  9102  002FA6  581C               	subwfb	??_crc8& (0+255),w,c
  9103  002FA8  A0D8               	btfss	status,0,c
  9104  002FAA  D7E8               	goto	l1286
  9105                           
  9106                           ;SystemCommon.c: 19: }
  9107                           ;SystemCommon.c: 20: crc &= 0xff;
  9108  002FAC  0EFF               	movlw	255
  9109  002FAE  161D               	andwf	crc8@crc,f,c
  9110  002FB0  0E00               	movlw	0
  9111  002FB2  161E               	andwf	crc8@crc+1,f,c
  9112                           
  9113                           ;SystemCommon.c: 21: return crc;
  9114  002FB4  501D               	movf	crc8@crc,w,c
  9115  002FB6  0012               	return	
  9116  002FB8                     __end_of_crc8:
  9117                           	opt stack 0
  9118                           tosu	equ	0xFFF
  9119                           tosh	equ	0xFFE
  9120                           tosl	equ	0xFFD
  9121                           pclath	equ	0xFFA
  9122                           tblptru	equ	0xFF8
  9123                           tblptrh	equ	0xFF7
  9124                           tblptrl	equ	0xFF6
  9125                           tablat	equ	0xFF5
  9126                           prodh	equ	0xFF4
  9127                           prodl	equ	0xFF3
  9128                           intcon	equ	0xFF2
  9129                           intcon2	equ	0xFF1
  9130                           postinc0	equ	0xFEE
  9131                           plusw0	equ	0xFEB
  9132                           wreg	equ	0xFE8
  9133                           indf1	equ	0xFE7
  9134                           postdec1	equ	0xFE5
  9135                           fsr1h	equ	0xFE2
  9136                           fsr1l	equ	0xFE1
  9137                           indf2	equ	0xFDF
  9138                           postinc2	equ	0xFDE
  9139                           postdec2	equ	0xFDD
  9140                           plusw2	equ	0xFDB
  9141                           fsr2h	equ	0xFDA
  9142                           fsr2l	equ	0xFD9
  9143                           status	equ	0xFD8
  9144                           
  9145 ;; *************** function _ZeroArray *****************
  9146 ;; Defined at:
  9147 ;;		line 24 in file "SystemCommon.c"
  9148 ;; Parameters:    Size  Location     Type
  9149 ;;  array           2   31[COMRAM] PTR unsigned char 
  9150 ;;		 -> GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dataRegArr(10), SynthReadData@TxMsg(27), FlashReadCondition@TxMsg(9
      +), 
  9151 ;;		 -> FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), 
  9152 ;;		 -> rxMsgQueue(20), 
  9153 ;;  size            2   33[COMRAM] int 
  9154 ;; Auto vars:     Size  Location     Type
  9155 ;;		None
  9156 ;; Return value:  Size  Location     Type
  9157 ;;                  1    wreg      void 
  9158 ;; Registers used:
  9159 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9160 ;; Tracked objects:
  9161 ;;		On entry : 0/0
  9162 ;;		On exit  : 0/0
  9163 ;;		Unchanged: 0/0
  9164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9165 ;;      Params:         4       0       0       0       0       0       0
  9166 ;;      Locals:         0       0       0       0       0       0       0
  9167 ;;      Temps:          0       0       0       0       0       0       0
  9168 ;;      Totals:         4       0       0       0       0       0       0
  9169 ;;Total ram usage:        4 bytes
  9170 ;; Hardware stack levels used:    1
  9171 ;; Hardware stack levels required when called:    4
  9172 ;; This function calls:
  9173 ;;		_memset
  9174 ;; This function is called by:
  9175 ;;		_readUartMessage
  9176 ;;		_InitRxMessageParams
  9177 ;;		_SendAckMessage
  9178 ;;		_FlashReadUart
  9179 ;;		_FlashEreaseMem
  9180 ;;		_FlashReadCondition
  9181 ;;		_SynthReadData
  9182 ;;		_GetIntFromUartData
  9183 ;;		_GetMcuFwVersion
  9184 ;; This function uses a non-reentrant model
  9185 ;;
  9186                           
  9187                           	psect	text56
  9188  003790                     __ptext56:
  9189                           	opt stack 0
  9190  003790                     _ZeroArray:
  9191                           	opt stack 25
  9192                           
  9193                           ;SystemCommon.c: 26: memset(array, 0x0, size);
  9194                           
  9195                           ;incstack = 0
  9196  003790  C020  F018         	movff	ZeroArray@array,memset@p1
  9197  003794  C021  F019         	movff	ZeroArray@array+1,memset@p1+1
  9198  003798  0E00               	movlw	0
  9199  00379A  6E1B               	movwf	memset@c+1,c
  9200  00379C  0E00               	movlw	0
  9201  00379E  6E1A               	movwf	memset@c,c
  9202  0037A0  C022  F01C         	movff	ZeroArray@size,memset@n
  9203  0037A4  C023  F01D         	movff	ZeroArray@size+1,memset@n+1
  9204  0037A8  ECDA  F01A         	call	_memset	;wreg free
  9205  0037AC  0012               	return		;funcret
  9206  0037AE                     __end_of_ZeroArray:
  9207                           	opt stack 0
  9208                           tosu	equ	0xFFF
  9209                           tosh	equ	0xFFE
  9210                           tosl	equ	0xFFD
  9211                           pclath	equ	0xFFA
  9212                           tblptru	equ	0xFF8
  9213                           tblptrh	equ	0xFF7
  9214                           tblptrl	equ	0xFF6
  9215                           tablat	equ	0xFF5
  9216                           prodh	equ	0xFF4
  9217                           prodl	equ	0xFF3
  9218                           intcon	equ	0xFF2
  9219                           intcon2	equ	0xFF1
  9220                           postinc0	equ	0xFEE
  9221                           plusw0	equ	0xFEB
  9222                           wreg	equ	0xFE8
  9223                           indf1	equ	0xFE7
  9224                           postdec1	equ	0xFE5
  9225                           fsr1h	equ	0xFE2
  9226                           fsr1l	equ	0xFE1
  9227                           indf2	equ	0xFDF
  9228                           postinc2	equ	0xFDE
  9229                           postdec2	equ	0xFDD
  9230                           plusw2	equ	0xFDB
  9231                           fsr2h	equ	0xFDA
  9232                           fsr2l	equ	0xFD9
  9233                           status	equ	0xFD8
  9234                           
  9235 ;; *************** function _WriteUartMessage *****************
  9236 ;; Defined at:
  9237 ;;		line 158 in file "EusartApp.c"
  9238 ;; Parameters:    Size  Location     Type
  9239 ;;  dataBuf         2   24[COMRAM] PTR unsigned char 
  9240 ;;		 -> GetMcuRunTime@TxMsg(9), GetMcuFwVersion@TxMsg(9), SynthReadData@TxMsg(27), FlashReadCondition@TxMsg(9), 
  9241 ;;		 -> FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), 
  9242 ;;  dataSize        2   26[COMRAM] int 
  9243 ;; Auto vars:     Size  Location     Type
  9244 ;;  idx             2   29[COMRAM] int 
  9245 ;; Return value:  Size  Location     Type
  9246 ;;                  1    wreg      void 
  9247 ;; Registers used:
  9248 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9249 ;; Tracked objects:
  9250 ;;		On entry : 0/0
  9251 ;;		On exit  : 0/0
  9252 ;;		Unchanged: 0/0
  9253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9254 ;;      Params:         4       0       0       0       0       0       0
  9255 ;;      Locals:         2       0       0       0       0       0       0
  9256 ;;      Temps:          1       0       0       0       0       0       0
  9257 ;;      Totals:         7       0       0       0       0       0       0
  9258 ;;Total ram usage:        7 bytes
  9259 ;; Hardware stack levels used:    1
  9260 ;; Hardware stack levels required when called:    4
  9261 ;; This function calls:
  9262 ;;		_EUSART1_Write
  9263 ;; This function is called by:
  9264 ;;		_SendAckMessage
  9265 ;;		_FlashReadUart
  9266 ;;		_FlashReadCondition
  9267 ;;		_SynthReadData
  9268 ;;		_GetMcuFwVersion
  9269 ;;		_GetMcuRunTime
  9270 ;; This function uses a non-reentrant model
  9271 ;;
  9272                           
  9273                           	psect	text57
  9274  0033F8                     __ptext57:
  9275                           	opt stack 0
  9276  0033F8                     _WriteUartMessage:
  9277                           	opt stack 22
  9278                           
  9279                           ;EusartApp.c: 160: for(int idx = 0; idx < dataSize; idx++)
  9280                           
  9281                           ;incstack = 0
  9282  0033F8  0E00               	movlw	0
  9283  0033FA  6E1F               	movwf	WriteUartMessage@idx+1,c
  9284  0033FC  0E00               	movlw	0
  9285  0033FE  6E1E               	movwf	WriteUartMessage@idx,c
  9286  003400  D00B               	goto	l222
  9287  003402                     
  9288                           ;EusartApp.c: 161: {
  9289                           ;EusartApp.c: 162: EUSART1_Write(dataBuf[idx]);
  9290  003402  501E               	movf	WriteUartMessage@idx,w,c
  9291  003404  2419               	addwf	WriteUartMessage@dataBuf,w,c
  9292  003406  6ED9               	movwf	fsr2l,c
  9293  003408  501F               	movf	WriteUartMessage@idx+1,w,c
  9294  00340A  201A               	addwfc	WriteUartMessage@dataBuf+1,w,c
  9295  00340C  6EDA               	movwf	fsr2h,c
  9296  00340E  50DF               	movf	indf2,w,c
  9297  003410  EC18  F019         	call	_EUSART1_Write
  9298  003414  4A1E               	infsnz	WriteUartMessage@idx,f,c
  9299  003416  2A1F               	incf	WriteUartMessage@idx+1,f,c
  9300  003418                     l222:
  9301  003418  501B               	movf	WriteUartMessage@dataSize,w,c
  9302  00341A  5C1E               	subwf	WriteUartMessage@idx,w,c
  9303  00341C  501F               	movf	WriteUartMessage@idx+1,w,c
  9304  00341E  0A80               	xorlw	128
  9305  003420  6E1D               	movwf	??_WriteUartMessage& (0+255),c
  9306  003422  501C               	movf	WriteUartMessage@dataSize+1,w,c
  9307  003424  0A80               	xorlw	128
  9308  003426  581D               	subwfb	??_WriteUartMessage& (0+255),w,c
  9309  003428  B0D8               	btfsc	status,0,c
  9310  00342A  0012               	return	
  9311  00342C  D7EA               	goto	l223
  9312  00342E                     __end_of_WriteUartMessage:
  9313                           	opt stack 0
  9314                           tosu	equ	0xFFF
  9315                           tosh	equ	0xFFE
  9316                           tosl	equ	0xFFD
  9317                           pclath	equ	0xFFA
  9318                           tblptru	equ	0xFF8
  9319                           tblptrh	equ	0xFF7
  9320                           tblptrl	equ	0xFF6
  9321                           tablat	equ	0xFF5
  9322                           prodh	equ	0xFF4
  9323                           prodl	equ	0xFF3
  9324                           intcon	equ	0xFF2
  9325                           intcon2	equ	0xFF1
  9326                           postinc0	equ	0xFEE
  9327                           plusw0	equ	0xFEB
  9328                           wreg	equ	0xFE8
  9329                           indf1	equ	0xFE7
  9330                           postdec1	equ	0xFE5
  9331                           fsr1h	equ	0xFE2
  9332                           fsr1l	equ	0xFE1
  9333                           indf2	equ	0xFDF
  9334                           postinc2	equ	0xFDE
  9335                           postdec2	equ	0xFDD
  9336                           plusw2	equ	0xFDB
  9337                           fsr2h	equ	0xFDA
  9338                           fsr2l	equ	0xFD9
  9339                           status	equ	0xFD8
  9340                           
  9341 ;; *************** function _EUSART1_Write *****************
  9342 ;; Defined at:
  9343 ;;		line 157 in file "mcc_generated_files/eusart1.c"
  9344 ;; Parameters:    Size  Location     Type
  9345 ;;  txData          1    wreg     unsigned char 
  9346 ;; Auto vars:     Size  Location     Type
  9347 ;;  txData          1   23[COMRAM] unsigned char 
  9348 ;; Return value:  Size  Location     Type
  9349 ;;                  1    wreg      void 
  9350 ;; Registers used:
  9351 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9352 ;; Tracked objects:
  9353 ;;		On entry : 0/0
  9354 ;;		On exit  : 0/0
  9355 ;;		Unchanged: 0/0
  9356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9357 ;;      Params:         0       0       0       0       0       0       0
  9358 ;;      Locals:         1       0       0       0       0       0       0
  9359 ;;      Temps:          0       0       0       0       0       0       0
  9360 ;;      Totals:         1       0       0       0       0       0       0
  9361 ;;Total ram usage:        1 bytes
  9362 ;; Hardware stack levels used:    1
  9363 ;; Hardware stack levels required when called:    3
  9364 ;; This function calls:
  9365 ;;		Nothing
  9366 ;; This function is called by:
  9367 ;;		_WriteUartMessage
  9368 ;; This function uses a non-reentrant model
  9369 ;;
  9370                           
  9371                           	psect	text58
  9372  003230                     __ptext58:
  9373                           	opt stack 0
  9374  003230                     _EUSART1_Write:
  9375                           	opt stack 22
  9376                           
  9377                           ;incstack = 0
  9378                           ;EUSART1_Write@txData stored from wreg
  9379  003230  6E18               	movwf	EUSART1_Write@txData,c
  9380  003232                     
  9381                           ;eusart1.c: 160: {
  9382                           
  9383                           ;eusart1.c: 159: while(0 == eusart1TxBufferRemaining)
  9384  003232  0100               	movlb	0	; () banked
  9385  003234  51FF               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
  9386  003236  B4D8               	btfsc	status,2,c
  9387  003238  D7FC               	goto	l6832
  9388                           
  9389                           ; BSR set to: 0
  9390                           ;eusart1.c: 161: }
  9391                           ;eusart1.c: 163: if(0 == PIE1bits.TX1IE)
  9392  00323A  B89D               	btfsc	3997,4,c	;volatile
  9393  00323C  D003               	goto	l857
  9394                           
  9395                           ; BSR set to: 0
  9396                           ;eusart1.c: 164: {
  9397                           ;eusart1.c: 165: TXREG1 = txData;
  9398  00323E  C018  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  9399                           
  9400                           ;eusart1.c: 166: }
  9401  003242  D012               	goto	l858
  9402  003244                     l857:
  9403                           
  9404                           ; BSR set to: 0
  9405                           ;eusart1.c: 167: else
  9406                           ;eusart1.c: 168: {
  9407                           ;eusart1.c: 169: PIE1bits.TX1IE = 0;
  9408  003244  989D               	bcf	3997,4,c	;volatile
  9409                           
  9410                           ; BSR set to: 0
  9411                           ;eusart1.c: 170: eusart1TxBuffer[eusart1TxHead++] = txData;
  9412  003246  5039               	movf	_eusart1TxHead,w,c	;volatile
  9413  003248  0D01               	mullw	1
  9414  00324A  0E00               	movlw	low _eusart1TxBuffer
  9415  00324C  24F3               	addwf	prodl,w,c
  9416  00324E  6ED9               	movwf	fsr2l,c
  9417  003250  0E01               	movlw	high _eusart1TxBuffer
  9418  003252  20F4               	addwfc	prodh,w,c
  9419  003254  6EDA               	movwf	fsr2h,c
  9420  003256  C018  FFDF         	movff	EUSART1_Write@txData,indf2
  9421                           
  9422                           ; BSR set to: 0
  9423  00325A  2A39               	incf	_eusart1TxHead,f,c	;volatile
  9424                           
  9425                           ; BSR set to: 0
  9426                           ;eusart1.c: 171: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  9427  00325C  0E45               	movlw	69
  9428  00325E  6439               	cpfsgt	_eusart1TxHead,c	;volatile
  9429  003260  D002               	goto	l859
  9430                           
  9431                           ; BSR set to: 0
  9432                           ;eusart1.c: 172: {
  9433                           ;eusart1.c: 173: eusart1TxHead = 0;
  9434  003262  0E00               	movlw	0
  9435  003264  6E39               	movwf	_eusart1TxHead,c	;volatile
  9436  003266                     l859:
  9437                           
  9438                           ; BSR set to: 0
  9439                           ;eusart1.c: 174: }
  9440                           ;eusart1.c: 175: eusart1TxBufferRemaining--;
  9441                           
  9442                           ; BSR set to: 0
  9443  003266  07FF               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
  9444  003268                     l858:
  9445                           
  9446                           ; BSR set to: 0
  9447                           ;eusart1.c: 176: }
  9448                           ;eusart1.c: 177: PIE1bits.TX1IE = 1;
  9449                           
  9450                           ; BSR set to: 0
  9451  003268  889D               	bsf	3997,4,c	;volatile
  9452                           
  9453                           ; BSR set to: 0
  9454  00326A  0012               	return		;funcret
  9455  00326C                     __end_of_EUSART1_Write:
  9456                           	opt stack 0
  9457                           tosu	equ	0xFFF
  9458                           tosh	equ	0xFFE
  9459                           tosl	equ	0xFFD
  9460                           pclath	equ	0xFFA
  9461                           tblptru	equ	0xFF8
  9462                           tblptrh	equ	0xFF7
  9463                           tblptrl	equ	0xFF6
  9464                           tablat	equ	0xFF5
  9465                           prodh	equ	0xFF4
  9466                           prodl	equ	0xFF3
  9467                           intcon	equ	0xFF2
  9468                           intcon2	equ	0xFF1
  9469                           postinc0	equ	0xFEE
  9470                           plusw0	equ	0xFEB
  9471                           wreg	equ	0xFE8
  9472                           indf1	equ	0xFE7
  9473                           postdec1	equ	0xFE5
  9474                           fsr1h	equ	0xFE2
  9475                           fsr1l	equ	0xFE1
  9476                           indf2	equ	0xFDF
  9477                           postinc2	equ	0xFDE
  9478                           postdec2	equ	0xFDD
  9479                           plusw2	equ	0xFDB
  9480                           fsr2h	equ	0xFDA
  9481                           fsr2l	equ	0xFD9
  9482                           status	equ	0xFD8
  9483                           
  9484 ;; *************** function _InitSystemApplicationManagers *****************
  9485 ;; Defined at:
  9486 ;;		line 33 in file "SystemSettings.c"
  9487 ;; Parameters:    Size  Location     Type
  9488 ;;		None
  9489 ;; Auto vars:     Size  Location     Type
  9490 ;;		None
  9491 ;; Return value:  Size  Location     Type
  9492 ;;                  1    wreg      void 
  9493 ;; Registers used:
  9494 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9495 ;; Tracked objects:
  9496 ;;		On entry : 0/0
  9497 ;;		On exit  : 0/0
  9498 ;;		Unchanged: 0/0
  9499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9500 ;;      Params:         0       0       0       0       0       0       0
  9501 ;;      Locals:         0       0       0       0       0       0       0
  9502 ;;      Temps:          0       0       0       0       0       0       0
  9503 ;;      Totals:         0       0       0       0       0       0       0
  9504 ;;Total ram usage:        0 bytes
  9505 ;; Hardware stack levels used:    1
  9506 ;; Hardware stack levels required when called:   10
  9507 ;; This function calls:
  9508 ;;		_ClearMcuRunTime
  9509 ;;		_DacInit
  9510 ;;		_InitAdcApplicationMgr
  9511 ;;		_PLLInitialize
  9512 ;;		_TMR0_StartTimer
  9513 ;; This function is called by:
  9514 ;;		_main
  9515 ;; This function uses a non-reentrant model
  9516 ;;
  9517                           
  9518                           	psect	text59
  9519  003830                     __ptext59:
  9520                           	opt stack 0
  9521  003830                     _InitSystemApplicationManagers:
  9522                           	opt stack 20
  9523                           
  9524                           ;SystemSettings.c: 36: InitAdcApplicationMgr();
  9525                           
  9526                           ; BSR set to: 0
  9527                           ;incstack = 0
  9528  003830  EC52  F01C         	call	_InitAdcApplicationMgr	;wreg free
  9529                           
  9530                           ;SystemSettings.c: 39: TMR0_StartTimer();
  9531  003834  ECAF  F01C         	call	_TMR0_StartTimer	;wreg free
  9532                           
  9533                           ;SystemSettings.c: 42: PLLInitialize();
  9534  003838  EC6F  F01C         	call	_PLLInitialize	;wreg free
  9535                           
  9536                           ;SystemSettings.c: 45: ClearMcuRunTime();
  9537  00383C  EC37  F01C         	call	_ClearMcuRunTime	;wreg free
  9538                           
  9539                           ;SystemSettings.c: 48: DacInit();
  9540  003840  ECE2  F012         	call	_DacInit	;wreg free
  9541  003844  0012               	return		;funcret
  9542  003846                     __end_of_InitSystemApplicationManagers:
  9543                           	opt stack 0
  9544                           tosu	equ	0xFFF
  9545                           tosh	equ	0xFFE
  9546                           tosl	equ	0xFFD
  9547                           pclath	equ	0xFFA
  9548                           tblptru	equ	0xFF8
  9549                           tblptrh	equ	0xFF7
  9550                           tblptrl	equ	0xFF6
  9551                           tablat	equ	0xFF5
  9552                           prodh	equ	0xFF4
  9553                           prodl	equ	0xFF3
  9554                           intcon	equ	0xFF2
  9555                           intcon2	equ	0xFF1
  9556                           postinc0	equ	0xFEE
  9557                           plusw0	equ	0xFEB
  9558                           wreg	equ	0xFE8
  9559                           indf1	equ	0xFE7
  9560                           postdec1	equ	0xFE5
  9561                           fsr1h	equ	0xFE2
  9562                           fsr1l	equ	0xFE1
  9563                           indf2	equ	0xFDF
  9564                           postinc2	equ	0xFDE
  9565                           postdec2	equ	0xFDD
  9566                           plusw2	equ	0xFDB
  9567                           fsr2h	equ	0xFDA
  9568                           fsr2l	equ	0xFD9
  9569                           status	equ	0xFD8
  9570                           
  9571 ;; *************** function _TMR0_StartTimer *****************
  9572 ;; Defined at:
  9573 ;;		line 93 in file "mcc_generated_files/tmr0.c"
  9574 ;; Parameters:    Size  Location     Type
  9575 ;;		None
  9576 ;; Auto vars:     Size  Location     Type
  9577 ;;		None
  9578 ;; Return value:  Size  Location     Type
  9579 ;;                  1    wreg      void 
  9580 ;; Registers used:
  9581 ;;		None
  9582 ;; Tracked objects:
  9583 ;;		On entry : 0/0
  9584 ;;		On exit  : 0/0
  9585 ;;		Unchanged: 0/0
  9586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9587 ;;      Params:         0       0       0       0       0       0       0
  9588 ;;      Locals:         0       0       0       0       0       0       0
  9589 ;;      Temps:          0       0       0       0       0       0       0
  9590 ;;      Totals:         0       0       0       0       0       0       0
  9591 ;;Total ram usage:        0 bytes
  9592 ;; Hardware stack levels used:    1
  9593 ;; Hardware stack levels required when called:    3
  9594 ;; This function calls:
  9595 ;;		Nothing
  9596 ;; This function is called by:
  9597 ;;		_InitSystemApplicationManagers
  9598 ;; This function uses a non-reentrant model
  9599 ;;
  9600                           
  9601                           	psect	text60
  9602  00395E                     __ptext60:
  9603                           	opt stack 0
  9604  00395E                     _TMR0_StartTimer:
  9605                           	opt stack 26
  9606                           
  9607                           ;tmr0.c: 96: T0CONbits.TMR0ON = 1;
  9608                           
  9609                           ;incstack = 0
  9610  00395E  8ED5               	bsf	4053,7,c	;volatile
  9611  003960  0012               	return		;funcret
  9612  003962                     __end_of_TMR0_StartTimer:
  9613                           	opt stack 0
  9614                           tosu	equ	0xFFF
  9615                           tosh	equ	0xFFE
  9616                           tosl	equ	0xFFD
  9617                           pclath	equ	0xFFA
  9618                           tblptru	equ	0xFF8
  9619                           tblptrh	equ	0xFF7
  9620                           tblptrl	equ	0xFF6
  9621                           tablat	equ	0xFF5
  9622                           prodh	equ	0xFF4
  9623                           prodl	equ	0xFF3
  9624                           intcon	equ	0xFF2
  9625                           intcon2	equ	0xFF1
  9626                           postinc0	equ	0xFEE
  9627                           plusw0	equ	0xFEB
  9628                           wreg	equ	0xFE8
  9629                           indf1	equ	0xFE7
  9630                           postdec1	equ	0xFE5
  9631                           fsr1h	equ	0xFE2
  9632                           fsr1l	equ	0xFE1
  9633                           indf2	equ	0xFDF
  9634                           postinc2	equ	0xFDE
  9635                           postdec2	equ	0xFDD
  9636                           plusw2	equ	0xFDB
  9637                           fsr2h	equ	0xFDA
  9638                           fsr2l	equ	0xFD9
  9639                           status	equ	0xFD8
  9640                           
  9641 ;; *************** function _PLLInitialize *****************
  9642 ;; Defined at:
  9643 ;;		line 19 in file "SyntApp.c"
  9644 ;; Parameters:    Size  Location     Type
  9645 ;;		None
  9646 ;; Auto vars:     Size  Location     Type
  9647 ;;		None
  9648 ;; Return value:  Size  Location     Type
  9649 ;;                  1    wreg      void 
  9650 ;; Registers used:
  9651 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9652 ;; Tracked objects:
  9653 ;;		On entry : 0/0
  9654 ;;		On exit  : 0/0
  9655 ;;		Unchanged: 0/0
  9656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9657 ;;      Params:         0       0       0       0       0       0       0
  9658 ;;      Locals:         0       0       0       0       0       0       0
  9659 ;;      Temps:          0       0       0       0       0       0       0
  9660 ;;      Totals:         0       0       0       0       0       0       0
  9661 ;;Total ram usage:        0 bytes
  9662 ;; Hardware stack levels used:    1
  9663 ;; Hardware stack levels required when called:    8
  9664 ;; This function calls:
  9665 ;;		_InitRxSynth
  9666 ;;		_InitTxSynth
  9667 ;; This function is called by:
  9668 ;;		_InitSystemApplicationManagers
  9669 ;; This function uses a non-reentrant model
  9670 ;;
  9671                           
  9672                           	psect	text61
  9673  0038DE                     __ptext61:
  9674                           	opt stack 0
  9675  0038DE                     _PLLInitialize:
  9676                           	opt stack 21
  9677                           
  9678                           ;SyntApp.c: 22: IOCB = 0b10000000;
  9679                           
  9680                           ;incstack = 0
  9681  0038DE  0E80               	movlw	128
  9682  0038E0  6E62               	movwf	3938,c	;volatile
  9683                           
  9684                           ;SyntApp.c: 25: InitTxSynth();
  9685  0038E2  ECDC  F017         	call	_InitTxSynth	;wreg free
  9686                           
  9687                           ;SyntApp.c: 26: InitRxSynth();
  9688  0038E6  EC02  F018         	call	_InitRxSynth	;wreg free
  9689  0038EA  0012               	return		;funcret
  9690  0038EC                     __end_of_PLLInitialize:
  9691                           	opt stack 0
  9692                           tosu	equ	0xFFF
  9693                           tosh	equ	0xFFE
  9694                           tosl	equ	0xFFD
  9695                           pclath	equ	0xFFA
  9696                           tblptru	equ	0xFF8
  9697                           tblptrh	equ	0xFF7
  9698                           tblptrl	equ	0xFF6
  9699                           tablat	equ	0xFF5
  9700                           prodh	equ	0xFF4
  9701                           prodl	equ	0xFF3
  9702                           intcon	equ	0xFF2
  9703                           intcon2	equ	0xFF1
  9704                           postinc0	equ	0xFEE
  9705                           plusw0	equ	0xFEB
  9706                           wreg	equ	0xFE8
  9707                           indf1	equ	0xFE7
  9708                           postdec1	equ	0xFE5
  9709                           fsr1h	equ	0xFE2
  9710                           fsr1l	equ	0xFE1
  9711                           indf2	equ	0xFDF
  9712                           postinc2	equ	0xFDE
  9713                           postdec2	equ	0xFDD
  9714                           plusw2	equ	0xFDB
  9715                           fsr2h	equ	0xFDA
  9716                           fsr2l	equ	0xFD9
  9717                           status	equ	0xFD8
  9718                           
  9719 ;; *************** function _InitTxSynth *****************
  9720 ;; Defined at:
  9721 ;;		line 35 in file "SyntApp.c"
  9722 ;; Parameters:    Size  Location     Type
  9723 ;;		None
  9724 ;; Auto vars:     Size  Location     Type
  9725 ;;  idx             1   46[COMRAM] unsigned char 
  9726 ;; Return value:  Size  Location     Type
  9727 ;;                  1    wreg      void 
  9728 ;; Registers used:
  9729 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9730 ;; Tracked objects:
  9731 ;;		On entry : 0/0
  9732 ;;		On exit  : 0/0
  9733 ;;		Unchanged: 0/0
  9734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9735 ;;      Params:         0       0       0       0       0       0       0
  9736 ;;      Locals:         1       0       0       0       0       0       0
  9737 ;;      Temps:          0       0       0       0       0       0       0
  9738 ;;      Totals:         1       0       0       0       0       0       0
  9739 ;;Total ram usage:        1 bytes
  9740 ;; Hardware stack levels used:    1
  9741 ;; Hardware stack levels required when called:    7
  9742 ;; This function calls:
  9743 ;;		_SWSPI_send_word
  9744 ;;		_SwSpi_Set_CE_Pin
  9745 ;; This function is called by:
  9746 ;;		_PLLInitialize
  9747 ;;		_SetSynthTxOper
  9748 ;; This function uses a non-reentrant model
  9749 ;;
  9750                           
  9751                           	psect	text62
  9752  002FB8                     __ptext62:
  9753                           	opt stack 0
  9754  002FB8                     _InitTxSynth:
  9755                           	opt stack 20
  9756                           
  9757                           ;SyntApp.c: 38: SwSpi_Set_CE_Pin(SYNTH_TX, 1);
  9758                           
  9759                           ;incstack = 0
  9760  002FB8  0E01               	movlw	1
  9761  002FBA  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  9762  002FBC  0E00               	movlw	0
  9763  002FBE  EC36  F019         	call	_SwSpi_Set_CE_Pin
  9764                           
  9765                           ;SyntApp.c: 42: for(uint8_t idx = 0; idx < 13; idx++)
  9766  002FC2  0E00               	movlw	0
  9767  002FC4  6E2F               	movwf	InitTxSynth@idx,c
  9768  002FC6                     l7476:
  9769  002FC6  0E0C               	movlw	12
  9770  002FC8  642F               	cpfsgt	InitTxSynth@idx,c
  9771  002FCA  D001               	goto	l489
  9772  002FCC  0012               	return	
  9773  002FCE                     l489:
  9774                           
  9775                           ;SyntApp.c: 43: {
  9776                           ;SyntApp.c: 44: SWSPI_send_word(SYNTH_TX, SYNTH_REGS[idx],3);
  9777  002FCE  502F               	movf	InitTxSynth@idx,w,c
  9778  002FD0  0D04               	mullw	4
  9779  002FD2  0E01               	movlw	low _SYNTH_REGS
  9780  002FD4  24F3               	addwf	prodl,w,c
  9781  002FD6  6EF6               	movwf	tblptrl,c
  9782  002FD8  0E06               	movlw	high _SYNTH_REGS
  9783  002FDA  20F4               	addwfc	prodh,w,c
  9784  002FDC  6EF7               	movwf	tblptrh,c
  9785  002FDE                     	if	0	;There are less than 3 active tblptr bytes
  9786  002FDE                     	endif
  9787  002FDE  0009               	tblrd		*+
  9788  002FE0  CFF5 F026          	movff	tablat,SWSPI_send_word@data
  9789  002FE4  0009               	tblrd		*+
  9790  002FE6  CFF5 F027          	movff	tablat,SWSPI_send_word@data+1
  9791  002FEA  0009               	tblrd		*+
  9792  002FEC  CFF5 F028          	movff	tablat,SWSPI_send_word@data+2
  9793  002FF0  000A               	tblrd		*-
  9794  002FF2  CFF5 F029          	movff	tablat,SWSPI_send_word@data+3
  9795  002FF6  0E03               	movlw	3
  9796  002FF8  6E2A               	movwf	SWSPI_send_word@dataSize,c
  9797  002FFA  0E00               	movlw	0
  9798  002FFC  EC4A  F012         	call	_SWSPI_send_word
  9799  003000  2A2F               	incf	InitTxSynth@idx,f,c
  9800  003002  D7E1               	goto	l7476
  9801  003004                     __end_of_InitTxSynth:
  9802                           	opt stack 0
  9803                           tosu	equ	0xFFF
  9804                           tosh	equ	0xFFE
  9805                           tosl	equ	0xFFD
  9806                           pclath	equ	0xFFA
  9807                           tblptru	equ	0xFF8
  9808                           tblptrh	equ	0xFF7
  9809                           tblptrl	equ	0xFF6
  9810                           tablat	equ	0xFF5
  9811                           prodh	equ	0xFF4
  9812                           prodl	equ	0xFF3
  9813                           intcon	equ	0xFF2
  9814                           intcon2	equ	0xFF1
  9815                           postinc0	equ	0xFEE
  9816                           plusw0	equ	0xFEB
  9817                           wreg	equ	0xFE8
  9818                           indf1	equ	0xFE7
  9819                           postdec1	equ	0xFE5
  9820                           fsr1h	equ	0xFE2
  9821                           fsr1l	equ	0xFE1
  9822                           indf2	equ	0xFDF
  9823                           postinc2	equ	0xFDE
  9824                           postdec2	equ	0xFDD
  9825                           plusw2	equ	0xFDB
  9826                           fsr2h	equ	0xFDA
  9827                           fsr2l	equ	0xFD9
  9828                           status	equ	0xFD8
  9829                           
  9830 ;; *************** function _InitRxSynth *****************
  9831 ;; Defined at:
  9832 ;;		line 48 in file "SyntApp.c"
  9833 ;; Parameters:    Size  Location     Type
  9834 ;;		None
  9835 ;; Auto vars:     Size  Location     Type
  9836 ;;  idx             1   46[COMRAM] unsigned char 
  9837 ;; Return value:  Size  Location     Type
  9838 ;;                  1    wreg      void 
  9839 ;; Registers used:
  9840 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9841 ;; Tracked objects:
  9842 ;;		On entry : 0/0
  9843 ;;		On exit  : 0/0
  9844 ;;		Unchanged: 0/0
  9845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9846 ;;      Params:         0       0       0       0       0       0       0
  9847 ;;      Locals:         1       0       0       0       0       0       0
  9848 ;;      Temps:          0       0       0       0       0       0       0
  9849 ;;      Totals:         1       0       0       0       0       0       0
  9850 ;;Total ram usage:        1 bytes
  9851 ;; Hardware stack levels used:    1
  9852 ;; Hardware stack levels required when called:    7
  9853 ;; This function calls:
  9854 ;;		_SWSPI_send_word
  9855 ;;		_SwSpi_Set_CE_Pin
  9856 ;; This function is called by:
  9857 ;;		_PLLInitialize
  9858 ;;		_SetSynthRxOper
  9859 ;; This function uses a non-reentrant model
  9860 ;;
  9861                           
  9862                           	psect	text63
  9863  003004                     __ptext63:
  9864                           	opt stack 0
  9865  003004                     _InitRxSynth:
  9866                           	opt stack 20
  9867                           
  9868                           ;SyntApp.c: 51: SwSpi_Set_CE_Pin(SYNTH_RX, 1);
  9869                           
  9870                           ;incstack = 0
  9871  003004  0E01               	movlw	1
  9872  003006  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  9873  003008  0E01               	movlw	1
  9874  00300A  EC36  F019         	call	_SwSpi_Set_CE_Pin
  9875                           
  9876                           ;SyntApp.c: 54: for(uint8_t idx = 0; idx < 13; idx++)
  9877  00300E  0E00               	movlw	0
  9878  003010  6E2F               	movwf	InitRxSynth@idx,c
  9879  003012                     l7490:
  9880  003012  0E0C               	movlw	12
  9881  003014  642F               	cpfsgt	InitRxSynth@idx,c
  9882  003016  D001               	goto	l494
  9883  003018  0012               	return	
  9884  00301A                     l494:
  9885                           
  9886                           ;SyntApp.c: 55: {
  9887                           ;SyntApp.c: 56: SWSPI_send_word(SYNTH_RX, SYNTH_REGS[idx],3);
  9888  00301A  502F               	movf	InitRxSynth@idx,w,c
  9889  00301C  0D04               	mullw	4
  9890  00301E  0E01               	movlw	low _SYNTH_REGS
  9891  003020  24F3               	addwf	prodl,w,c
  9892  003022  6EF6               	movwf	tblptrl,c
  9893  003024  0E06               	movlw	high _SYNTH_REGS
  9894  003026  20F4               	addwfc	prodh,w,c
  9895  003028  6EF7               	movwf	tblptrh,c
  9896  00302A                     	if	0	;There are less than 3 active tblptr bytes
  9897  00302A                     	endif
  9898  00302A  0009               	tblrd		*+
  9899  00302C  CFF5 F026          	movff	tablat,SWSPI_send_word@data
  9900  003030  0009               	tblrd		*+
  9901  003032  CFF5 F027          	movff	tablat,SWSPI_send_word@data+1
  9902  003036  0009               	tblrd		*+
  9903  003038  CFF5 F028          	movff	tablat,SWSPI_send_word@data+2
  9904  00303C  000A               	tblrd		*-
  9905  00303E  CFF5 F029          	movff	tablat,SWSPI_send_word@data+3
  9906  003042  0E03               	movlw	3
  9907  003044  6E2A               	movwf	SWSPI_send_word@dataSize,c
  9908  003046  0E01               	movlw	1
  9909  003048  EC4A  F012         	call	_SWSPI_send_word
  9910  00304C  2A2F               	incf	InitRxSynth@idx,f,c
  9911  00304E  D7E1               	goto	l7490
  9912  003050                     __end_of_InitRxSynth:
  9913                           	opt stack 0
  9914                           tosu	equ	0xFFF
  9915                           tosh	equ	0xFFE
  9916                           tosl	equ	0xFFD
  9917                           pclath	equ	0xFFA
  9918                           tblptru	equ	0xFF8
  9919                           tblptrh	equ	0xFF7
  9920                           tblptrl	equ	0xFF6
  9921                           tablat	equ	0xFF5
  9922                           prodh	equ	0xFF4
  9923                           prodl	equ	0xFF3
  9924                           intcon	equ	0xFF2
  9925                           intcon2	equ	0xFF1
  9926                           postinc0	equ	0xFEE
  9927                           plusw0	equ	0xFEB
  9928                           wreg	equ	0xFE8
  9929                           indf1	equ	0xFE7
  9930                           postdec1	equ	0xFE5
  9931                           fsr1h	equ	0xFE2
  9932                           fsr1l	equ	0xFE1
  9933                           indf2	equ	0xFDF
  9934                           postinc2	equ	0xFDE
  9935                           postdec2	equ	0xFDD
  9936                           plusw2	equ	0xFDB
  9937                           fsr2h	equ	0xFDA
  9938                           fsr2l	equ	0xFD9
  9939                           status	equ	0xFD8
  9940                           
  9941 ;; *************** function _SwSpi_Set_CE_Pin *****************
  9942 ;; Defined at:
  9943 ;;		line 201 in file "SwSpiApp.c"
  9944 ;; Parameters:    Size  Location     Type
  9945 ;;  phrType         1    wreg     enum E7559
  9946 ;;  cPinMode        1   23[COMRAM] unsigned char 
  9947 ;; Auto vars:     Size  Location     Type
  9948 ;;  phrType         1   24[COMRAM] enum E7559
  9949 ;; Return value:  Size  Location     Type
  9950 ;;                  1    wreg      void 
  9951 ;; Registers used:
  9952 ;;		wreg, status,2, status,0
  9953 ;; Tracked objects:
  9954 ;;		On entry : 0/0
  9955 ;;		On exit  : 0/0
  9956 ;;		Unchanged: 0/0
  9957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9958 ;;      Params:         1       0       0       0       0       0       0
  9959 ;;      Locals:         1       0       0       0       0       0       0
  9960 ;;      Temps:          0       0       0       0       0       0       0
  9961 ;;      Totals:         2       0       0       0       0       0       0
  9962 ;;Total ram usage:        2 bytes
  9963 ;; Hardware stack levels used:    1
  9964 ;; Hardware stack levels required when called:    3
  9965 ;; This function calls:
  9966 ;;		Nothing
  9967 ;; This function is called by:
  9968 ;;		_InitTxSynth
  9969 ;;		_InitRxSynth
  9970 ;;		_SetSynthTxOper
  9971 ;;		_SetSynthRxOper
  9972 ;; This function uses a non-reentrant model
  9973 ;;
  9974                           
  9975                           	psect	text64
  9976  00326C                     __ptext64:
  9977                           	opt stack 0
  9978  00326C                     _SwSpi_Set_CE_Pin:
  9979                           	opt stack 24
  9980                           
  9981                           ;incstack = 0
  9982                           ;SwSpi_Set_CE_Pin@phrType stored from wreg
  9983  00326C  6E19               	movwf	SwSpi_Set_CE_Pin@phrType,c
  9984                           
  9985                           ;SwSpiApp.c: 203: switch(phrType)
  9986  00326E  D014               	goto	l676
  9987  003270                     
  9988                           ;SwSpiApp.c: 206: if(cPinMode == 1)
  9989  003270  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
  9990  003272  A4D8               	btfss	status,2,c
  9991  003274  D002               	goto	l678
  9992                           
  9993                           ;SwSpiApp.c: 207: {
  9994                           ;SwSpiApp.c: 208: do { LATCbits.LATC1 = 1; } while(0);
  9995  003276  828B               	bsf	3979,1,c	;volatile
  9996                           
  9997                           ;SwSpiApp.c: 209: }
  9998  003278  0012               	return	
  9999  00327A                     l678:
 10000                           
 10001                           ;SwSpiApp.c: 210: else if(cPinMode == 0)
 10002  00327A  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
 10003  00327C  A4D8               	btfss	status,2,c
 10004  00327E  0012               	return	
 10005                           
 10006                           ;SwSpiApp.c: 211: {
 10007                           ;SwSpiApp.c: 212: do { LATCbits.LATC1 = 0; } while(0);
 10008  003280  928B               	bcf	3979,1,c	;volatile
 10009                           
 10010                           ;SwSpiApp.c: 213: }
 10011                           ;SwSpiApp.c: 214: break;
 10012  003282  0012               	return	
 10013  003284                     
 10014                           ;SwSpiApp.c: 217: if(cPinMode == 1)
 10015  003284  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
 10016  003286  A4D8               	btfss	status,2,c
 10017  003288  D002               	goto	l687
 10018                           
 10019                           ;SwSpiApp.c: 218: {
 10020                           ;SwSpiApp.c: 219: do { LATDbits.LATD2 = 1; } while(0);
 10021  00328A  848C               	bsf	3980,2,c	;volatile
 10022                           
 10023                           ;SwSpiApp.c: 220: }
 10024  00328C  0012               	return	
 10025  00328E                     l687:
 10026                           
 10027                           ;SwSpiApp.c: 221: else if(cPinMode == 0)
 10028  00328E  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
 10029  003290  A4D8               	btfss	status,2,c
 10030  003292  0012               	return	
 10031                           
 10032                           ;SwSpiApp.c: 222: {
 10033                           ;SwSpiApp.c: 223: do { LATCbits.LATC1 = 0; } while(0);
 10034  003294  928B               	bcf	3979,1,c	;volatile
 10035                           
 10036                           ;SwSpiApp.c: 226: }
 10037                           
 10038                           ;SwSpiApp.c: 224: }
 10039                           ;SwSpiApp.c: 225: break;
 10040  003296  0012               	return	
 10041  003298                     l676:
 10042  003298  5019               	movf	SwSpi_Set_CE_Pin@phrType,w,c
 10043                           
 10044                           ; Switch size 1, requested type "space"
 10045                           ; Number of cases is 2, Range of values is 0 to 1
 10046                           ; switch strategies available:
 10047                           ; Name         Instructions Cycles
 10048                           ; simple_byte            7     4 (average)
 10049                           ;	Chosen strategy is simple_byte
 10050  00329A  0A00               	xorlw	0	; case 0
 10051  00329C  B4D8               	btfsc	status,2,c
 10052  00329E  D7E8               	goto	l677
 10053  0032A0  0A01               	xorlw	1	; case 1
 10054  0032A2  A4D8               	btfss	status,2,c
 10055  0032A4  0012               	return	
 10056  0032A6  D7EE               	goto	l686
 10057  0032A8                     __end_of_SwSpi_Set_CE_Pin:
 10058                           	opt stack 0
 10059                           tosu	equ	0xFFF
 10060                           tosh	equ	0xFFE
 10061                           tosl	equ	0xFFD
 10062                           pclath	equ	0xFFA
 10063                           tblptru	equ	0xFF8
 10064                           tblptrh	equ	0xFF7
 10065                           tblptrl	equ	0xFF6
 10066                           tablat	equ	0xFF5
 10067                           prodh	equ	0xFF4
 10068                           prodl	equ	0xFF3
 10069                           intcon	equ	0xFF2
 10070                           intcon2	equ	0xFF1
 10071                           postinc0	equ	0xFEE
 10072                           plusw0	equ	0xFEB
 10073                           wreg	equ	0xFE8
 10074                           indf1	equ	0xFE7
 10075                           postdec1	equ	0xFE5
 10076                           fsr1h	equ	0xFE2
 10077                           fsr1l	equ	0xFE1
 10078                           indf2	equ	0xFDF
 10079                           postinc2	equ	0xFDE
 10080                           postdec2	equ	0xFDD
 10081                           plusw2	equ	0xFDB
 10082                           fsr2h	equ	0xFDA
 10083                           fsr2l	equ	0xFD9
 10084                           status	equ	0xFD8
 10085                           
 10086 ;; *************** function _InitAdcApplicationMgr *****************
 10087 ;; Defined at:
 10088 ;;		line 22 in file "AdcApp.c"
 10089 ;; Parameters:    Size  Location     Type
 10090 ;;		None
 10091 ;; Auto vars:     Size  Location     Type
 10092 ;;  channel         1   23[COMRAM] unsigned char 
 10093 ;; Return value:  Size  Location     Type
 10094 ;;                  1    wreg      void 
 10095 ;; Registers used:
 10096 ;;		wreg, status,2
 10097 ;; Tracked objects:
 10098 ;;		On entry : 0/0
 10099 ;;		On exit  : 0/0
 10100 ;;		Unchanged: 0/0
 10101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10102 ;;      Params:         0       0       0       0       0       0       0
 10103 ;;      Locals:         1       0       0       0       0       0       0
 10104 ;;      Temps:          0       0       0       0       0       0       0
 10105 ;;      Totals:         1       0       0       0       0       0       0
 10106 ;;Total ram usage:        1 bytes
 10107 ;; Hardware stack levels used:    1
 10108 ;; Hardware stack levels required when called:    3
 10109 ;; This function calls:
 10110 ;;		Nothing
 10111 ;; This function is called by:
 10112 ;;		_InitSystemApplicationManagers
 10113 ;; This function uses a non-reentrant model
 10114 ;;
 10115                           
 10116                           	psect	text65
 10117  0038A4                     __ptext65:
 10118                           	opt stack 0
 10119  0038A4                     _InitAdcApplicationMgr:
 10120                           	opt stack 26
 10121                           
 10122                           ;AdcApp.c: 24: conversionFormat = CONVERSION_LEFT_FORAMT;
 10123                           
 10124                           ;incstack = 0
 10125  0038A4  0E00               	movlw	0
 10126  0038A6  0100               	movlb	0	; () banked
 10127  0038A8  6FD5               	movwf	_conversionFormat& (0+255),b
 10128                           
 10129                           ;AdcApp.c: 25: adcSampleMode = CIRCULAR;
 10130  0038AA  0E00               	movlw	0
 10131  0038AC  6E3B               	movwf	_adcSampleMode,c
 10132                           
 10133                           ;AdcApp.c: 26: char channel = 0;
 10134  0038AE  0E00               	movlw	0
 10135  0038B0  6E18               	movwf	InitAdcApplicationMgr@channel,c
 10136                           
 10137                           ; BSR set to: 0
 10138  0038B2  0012               	return		;funcret
 10139  0038B4                     __end_of_InitAdcApplicationMgr:
 10140                           	opt stack 0
 10141                           tosu	equ	0xFFF
 10142                           tosh	equ	0xFFE
 10143                           tosl	equ	0xFFD
 10144                           pclath	equ	0xFFA
 10145                           tblptru	equ	0xFF8
 10146                           tblptrh	equ	0xFF7
 10147                           tblptrl	equ	0xFF6
 10148                           tablat	equ	0xFF5
 10149                           prodh	equ	0xFF4
 10150                           prodl	equ	0xFF3
 10151                           intcon	equ	0xFF2
 10152                           intcon2	equ	0xFF1
 10153                           postinc0	equ	0xFEE
 10154                           plusw0	equ	0xFEB
 10155                           wreg	equ	0xFE8
 10156                           indf1	equ	0xFE7
 10157                           postdec1	equ	0xFE5
 10158                           fsr1h	equ	0xFE2
 10159                           fsr1l	equ	0xFE1
 10160                           indf2	equ	0xFDF
 10161                           postinc2	equ	0xFDE
 10162                           postdec2	equ	0xFDD
 10163                           plusw2	equ	0xFDB
 10164                           fsr2h	equ	0xFDA
 10165                           fsr2l	equ	0xFD9
 10166                           status	equ	0xFD8
 10167                           
 10168 ;; *************** function _DacInit *****************
 10169 ;; Defined at:
 10170 ;;		line 24 in file "DacApp.c"
 10171 ;; Parameters:    Size  Location     Type
 10172 ;;		None
 10173 ;; Auto vars:     Size  Location     Type
 10174 ;;  dacInput        2   92[BANK0 ] unsigned int 
 10175 ;;  idx             1   94[BANK0 ] char 
 10176 ;; Return value:  Size  Location     Type
 10177 ;;                  1    wreg      void 
 10178 ;; Registers used:
 10179 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10180 ;; Tracked objects:
 10181 ;;		On entry : 0/0
 10182 ;;		On exit  : 0/0
 10183 ;;		Unchanged: 0/0
 10184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10185 ;;      Params:         0       0       0       0       0       0       0
 10186 ;;      Locals:         0       3       0       0       0       0       0
 10187 ;;      Temps:          0       2       0       0       0       0       0
 10188 ;;      Totals:         0       5       0       0       0       0       0
 10189 ;;Total ram usage:        5 bytes
 10190 ;; Hardware stack levels used:    1
 10191 ;; Hardware stack levels required when called:    9
 10192 ;; This function calls:
 10193 ;;		_ReadIntFromEeprom
 10194 ;;		_SWSPI_send_word
 10195 ;; This function is called by:
 10196 ;;		_InitSystemApplicationManagers
 10197 ;; This function uses a non-reentrant model
 10198 ;;
 10199                           
 10200                           	psect	text66
 10201  0025C4                     __ptext66:
 10202                           	opt stack 0
 10203  0025C4                     _DacInit:
 10204                           	opt stack 20
 10205                           
 10206                           ;DacApp.c: 26: for(int8_t idx = 0; idx < (4); idx++)
 10207                           
 10208                           ; BSR set to: 0
 10209                           ;incstack = 0
 10210  0025C4  0E00               	movlw	0
 10211  0025C6  0100               	movlb	0	; () banked
 10212  0025C8  6FBE               	movwf	DacInit@idx& (0+255),b
 10213  0025CA                     l7998:
 10214                           
 10215                           ; BSR set to: 0
 10216  0025CA  51BE               	movf	DacInit@idx& (0+255),w,b
 10217  0025CC  0A80               	xorlw	128
 10218  0025CE  0F7C               	addlw	-132
 10219  0025D0  B0D8               	btfsc	status,0,c
 10220  0025D2  0012               	return	
 10221                           
 10222                           ; BSR set to: 0
 10223                           ;DacApp.c: 27: {
 10224                           ;DacApp.c: 28: uint16_t dacInput = ReadIntFromEeprom((0x40) | DAC_ADDRES[idx], 2);
 10225                           
 10226                           ; BSR set to: 0
 10227                           
 10228                           ; BSR set to: 0
 10229  0025D4  0E00               	movlw	0
 10230  0025D6  6FB4               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 10231  0025D8  0E02               	movlw	2
 10232  0025DA  6FB3               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 10233  0025DC  51BE               	movf	DacInit@idx& (0+255),w,b
 10234  0025DE  0D01               	mullw	1
 10235  0025E0  0E51               	movlw	low _DAC_ADDRES
 10236  0025E2  24F3               	addwf	prodl,w,c
 10237  0025E4  6EF6               	movwf	tblptrl,c
 10238  0025E6  0E06               	movlw	high _DAC_ADDRES
 10239  0025E8  20F4               	addwfc	prodh,w,c
 10240  0025EA  6EF7               	movwf	tblptrh,c
 10241  0025EC                     	if	0	;There are less than 3 active tblptr bytes
 10242  0025EC                     	endif
 10243  0025EC  0008               	tblrd		*
 10244  0025EE  50F5               	movf	tablat,w,c
 10245  0025F0  0940               	iorlw	64
 10246  0025F2  EC43  F00B         	call	_ReadIntFromEeprom
 10247  0025F6  C0B3  F0BC         	movff	?_ReadIntFromEeprom,DacInit@dacInput
 10248  0025FA  C0B4  F0BD         	movff	?_ReadIntFromEeprom+1,DacInit@dacInput+1
 10249                           
 10250                           ;DacApp.c: 29: if(dacInput == 0xFFFF)
 10251  0025FE  0100               	movlb	0	; () banked
 10252  002600  29BC               	incf	DacInit@dacInput& (0+255),w,b
 10253  002602  E11D               	bnz	l8008
 10254  002604  29BD               	incf	(DacInit@dacInput+1)& (0+255),w,b
 10255  002606  A4D8               	btfss	status,2,c
 10256  002608  D01A               	goto	l417
 10257                           
 10258                           ; BSR set to: 0
 10259                           ;DacApp.c: 30: {
 10260                           ;DacApp.c: 31: SWSPI_send_word(EXT_DAC, DAC_DEFAULT_INIT_VALUES[idx], 1);
 10261  00260A  51BE               	movf	DacInit@idx& (0+255),w,b
 10262  00260C  0D02               	mullw	2
 10263  00260E  0E42               	movlw	low _DAC_DEFAULT_INIT_VALUES
 10264  002610  24F3               	addwf	prodl,w,c
 10265  002612  6EF6               	movwf	tblptrl,c
 10266  002614  0E06               	movlw	high _DAC_DEFAULT_INIT_VALUES
 10267  002616  20F4               	addwfc	prodh,w,c
 10268  002618  6EF7               	movwf	tblptrh,c
 10269  00261A                     	if	0	;There are less than 3 active tblptr bytes
 10270  00261A                     	endif
 10271  00261A  0009               	tblrd		*+
 10272  00261C  CFF5 F0BA          	movff	tablat,??_DacInit
 10273  002620  0009               	tblrd		*+
 10274  002622  CFF5 F0BB          	movff	tablat,??_DacInit+1
 10275  002626  C0BA  F026         	movff	??_DacInit,SWSPI_send_word@data
 10276  00262A  C0BB  F027         	movff	??_DacInit+1,SWSPI_send_word@data+1
 10277  00262E  6A28               	clrf	SWSPI_send_word@data+2,c
 10278  002630  6A29               	clrf	SWSPI_send_word@data+3,c
 10279  002632  0E01               	movlw	1
 10280  002634  6E2A               	movwf	SWSPI_send_word@dataSize,c
 10281  002636  0E02               	movlw	2
 10282  002638  EC4A  F012         	call	_SWSPI_send_word
 10283                           
 10284                           ;DacApp.c: 32: }
 10285  00263C  D00B               	goto	l418
 10286  00263E                     l417:
 10287  00263E                     l8008:
 10288                           
 10289                           ;DacApp.c: 33: else
 10290                           ;DacApp.c: 34: {
 10291                           ;DacApp.c: 35: SWSPI_send_word(EXT_DAC, dacInput, 1);
 10292  00263E  C0BC  F026         	movff	DacInit@dacInput,SWSPI_send_word@data
 10293  002642  C0BD  F027         	movff	DacInit@dacInput+1,SWSPI_send_word@data+1
 10294  002646  6A28               	clrf	SWSPI_send_word@data+2,c
 10295  002648  6A29               	clrf	SWSPI_send_word@data+3,c
 10296  00264A  0E01               	movlw	1
 10297  00264C  6E2A               	movwf	SWSPI_send_word@dataSize,c
 10298  00264E  0E02               	movlw	2
 10299  002650  EC4A  F012         	call	_SWSPI_send_word
 10300  002654                     l418:
 10301  002654  0100               	movlb	0	; () banked
 10302  002656  2BBE               	incf	DacInit@idx& (0+255),f,b
 10303  002658  D7B8               	goto	l7998
 10304  00265A                     __end_of_DacInit:
 10305                           	opt stack 0
 10306                           tosu	equ	0xFFF
 10307                           tosh	equ	0xFFE
 10308                           tosl	equ	0xFFD
 10309                           pclath	equ	0xFFA
 10310                           tblptru	equ	0xFF8
 10311                           tblptrh	equ	0xFF7
 10312                           tblptrl	equ	0xFF6
 10313                           tablat	equ	0xFF5
 10314                           prodh	equ	0xFF4
 10315                           prodl	equ	0xFF3
 10316                           intcon	equ	0xFF2
 10317                           intcon2	equ	0xFF1
 10318                           postinc0	equ	0xFEE
 10319                           plusw0	equ	0xFEB
 10320                           wreg	equ	0xFE8
 10321                           indf1	equ	0xFE7
 10322                           postdec1	equ	0xFE5
 10323                           fsr1h	equ	0xFE2
 10324                           fsr1l	equ	0xFE1
 10325                           indf2	equ	0xFDF
 10326                           postinc2	equ	0xFDE
 10327                           postdec2	equ	0xFDD
 10328                           plusw2	equ	0xFDB
 10329                           fsr2h	equ	0xFDA
 10330                           fsr2l	equ	0xFD9
 10331                           status	equ	0xFD8
 10332                           
 10333 ;; *************** function _SWSPI_send_word *****************
 10334 ;; Defined at:
 10335 ;;		line 17 in file "SwSpiApp.c"
 10336 ;; Parameters:    Size  Location     Type
 10337 ;;  phrType         1    wreg     enum E7559
 10338 ;;  data            4   37[COMRAM] unsigned long 
 10339 ;;  dataSize        1   41[COMRAM] unsigned char 
 10340 ;; Auto vars:     Size  Location     Type
 10341 ;;  phrType         1   45[COMRAM] enum E7559
 10342 ;;  datac           1   42[COMRAM] unsigned char 
 10343 ;;  idx             2   43[COMRAM] int 
 10344 ;; Return value:  Size  Location     Type
 10345 ;;                  1    wreg      void 
 10346 ;; Registers used:
 10347 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10348 ;; Tracked objects:
 10349 ;;		On entry : 0/0
 10350 ;;		On exit  : 0/0
 10351 ;;		Unchanged: 0/0
 10352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10353 ;;      Params:         5       0       0       0       0       0       0
 10354 ;;      Locals:         4       0       0       0       0       0       0
 10355 ;;      Temps:          0       0       0       0       0       0       0
 10356 ;;      Totals:         9       0       0       0       0       0       0
 10357 ;;Total ram usage:        9 bytes
 10358 ;; Hardware stack levels used:    1
 10359 ;; Hardware stack levels required when called:    6
 10360 ;; This function calls:
 10361 ;;		_SWSPI_DAC_send_bits
 10362 ;;		_SWSPI_Synth_send_bits
 10363 ;;		_SwSpi_Set_Dac_Sync_Pin
 10364 ;;		_SwSpi_Set_Synth_Le_Pin
 10365 ;;		_make8
 10366 ;; This function is called by:
 10367 ;;		_DacInit
 10368 ;;		_InitTxSynth
 10369 ;;		_InitRxSynth
 10370 ;;		_UpdateTxFreq
 10371 ;; This function uses a non-reentrant model
 10372 ;;
 10373                           
 10374                           	psect	text67
 10375  002494                     __ptext67:
 10376                           	opt stack 0
 10377  002494                     _SWSPI_send_word:
 10378                           	opt stack 21
 10379                           
 10380                           ; BSR set to: 0
 10381                           ;incstack = 0
 10382                           ;SWSPI_send_word@phrType stored from wreg
 10383  002494  6E2E               	movwf	SWSPI_send_word@phrType,c
 10384                           
 10385                           ;SwSpiApp.c: 19: (INTCONbits.GIE = 0);
 10386  002496  9EF2               	bcf	intcon,7,c	;volatile
 10387                           
 10388                           ;SwSpiApp.c: 23: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
 10389  002498  502E               	movf	SWSPI_send_word@phrType,w,c
 10390  00249A  B4D8               	btfsc	status,2,c
 10391  00249C  D003               	goto	u7080
 10392  00249E  042E               	decf	SWSPI_send_word@phrType,w,c
 10393  0024A0  A4D8               	btfss	status,2,c
 10394  0024A2  D016               	goto	l585
 10395  0024A4                     u7080:
 10396                           
 10397                           ;SwSpiApp.c: 24: {
 10398                           ;SwSpiApp.c: 25: SwSpi_Set_Synth_Le_Pin(phrType, 0);
 10399  0024A4  0E00               	movlw	0
 10400  0024A6  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 10401  0024A8  502E               	movf	SWSPI_send_word@phrType,w,c
 10402  0024AA  EC54  F019         	call	_SwSpi_Set_Synth_Le_Pin
 10403                           
 10404                           ;SwSpiApp.c: 26: SWSPI_Synth_send_bits(phrType, data);
 10405  0024AE  C026  F022         	movff	SWSPI_send_word@data,SWSPI_Synth_send_bits@data
 10406  0024B2  C027  F023         	movff	SWSPI_send_word@data+1,SWSPI_Synth_send_bits@data+1
 10407  0024B6  C028  F024         	movff	SWSPI_send_word@data+2,SWSPI_Synth_send_bits@data+2
 10408  0024BA  C029  F025         	movff	SWSPI_send_word@data+3,SWSPI_Synth_send_bits@data+3
 10409  0024BE  502E               	movf	SWSPI_send_word@phrType,w,c
 10410  0024C0  ECF1  F010         	call	_SWSPI_Synth_send_bits
 10411                           
 10412                           ;SwSpiApp.c: 27: SwSpi_Set_Synth_Le_Pin(phrType, 1);
 10413  0024C4  0E01               	movlw	1
 10414  0024C6  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 10415  0024C8  502E               	movf	SWSPI_send_word@phrType,w,c
 10416  0024CA  EC54  F019         	call	_SwSpi_Set_Synth_Le_Pin
 10417                           
 10418                           ;SwSpiApp.c: 28: }
 10419  0024CE  D02D               	goto	l589
 10420  0024D0                     l585:
 10421                           
 10422                           ;SwSpiApp.c: 29: else if(phrType == EXT_DAC)
 10423  0024D0  0E02               	movlw	2
 10424  0024D2  182E               	xorwf	SWSPI_send_word@phrType,w,c
 10425  0024D4  A4D8               	btfss	status,2,c
 10426  0024D6  D029               	goto	l589
 10427                           
 10428                           ;SwSpiApp.c: 30: {
 10429                           ;SwSpiApp.c: 31: SwSpi_Set_Dac_Sync_Pin(0);
 10430  0024D8  0E00               	movlw	0
 10431  0024DA  ECE6  F01B         	call	_SwSpi_Set_Dac_Sync_Pin
 10432                           
 10433                           ;SwSpiApp.c: 32: for(int idx = dataSize + 1; idx > 0; idx--)
 10434  0024DE  0E01               	movlw	1
 10435  0024E0  242A               	addwf	SWSPI_send_word@dataSize,w,c
 10436  0024E2  6E2C               	movwf	SWSPI_send_word@idx,c
 10437  0024E4  6A2D               	clrf	SWSPI_send_word@idx+1,c
 10438  0024E6  0E00               	movlw	0
 10439  0024E8  222D               	addwfc	SWSPI_send_word@idx+1,f,c
 10440  0024EA                     l7220:
 10441  0024EA  BE2D               	btfsc	SWSPI_send_word@idx+1,7,c
 10442  0024EC  D01B               	goto	u7110
 10443  0024EE  502D               	movf	SWSPI_send_word@idx+1,w,c
 10444  0024F0  E103               	bnz	l7224
 10445  0024F2  042C               	decf	SWSPI_send_word@idx,w,c
 10446  0024F4  A0D8               	btfss	status,0,c
 10447  0024F6  D016               	goto	u7110
 10448  0024F8                     l7224:
 10449                           
 10450                           ;SwSpiApp.c: 33: {
 10451                           ;SwSpiApp.c: 34: uint8_t datac = make8(data, idx - 1);
 10452  0024F8  C026  F018         	movff	SWSPI_send_word@data,make8@data
 10453  0024FC  C027  F019         	movff	SWSPI_send_word@data+1,make8@data+1
 10454  002500  C028  F01A         	movff	SWSPI_send_word@data+2,make8@data+2
 10455  002504  C029  F01B         	movff	SWSPI_send_word@data+3,make8@data+3
 10456  002508  042C               	decf	SWSPI_send_word@idx,w,c
 10457  00250A  6E1C               	movwf	make8@dataLocation,c
 10458  00250C  EC2E  F016         	call	_make8	;wreg free
 10459  002510  6E2B               	movwf	SWSPI_send_word@datac,c
 10460                           
 10461                           ;SwSpiApp.c: 35: SWSPI_DAC_send_bits(phrType, datac);
 10462  002512  C02B  F01A         	movff	SWSPI_send_word@datac,SWSPI_DAC_send_bits@data
 10463  002516  502E               	movf	SWSPI_send_word@phrType,w,c
 10464  002518  ECB6  F016         	call	_SWSPI_DAC_send_bits
 10465  00251C  062C               	decf	SWSPI_send_word@idx,f,c
 10466  00251E  A0D8               	btfss	status,0,c
 10467  002520  062D               	decf	SWSPI_send_word@idx+1,f,c
 10468  002522  D7E3               	goto	l7220
 10469  002524                     u7110:
 10470                           
 10471                           ;SwSpiApp.c: 36: }
 10472                           ;SwSpiApp.c: 37: SwSpi_Set_Dac_Sync_Pin(1);
 10473  002524  0E01               	movlw	1
 10474  002526  ECE6  F01B         	call	_SwSpi_Set_Dac_Sync_Pin
 10475  00252A                     l589:
 10476                           
 10477                           ;SwSpiApp.c: 38: }
 10478                           ;SwSpiApp.c: 40: (INTCONbits.GIE = 1);
 10479  00252A  8EF2               	bsf	intcon,7,c	;volatile
 10480  00252C  0012               	return		;funcret
 10481  00252E                     __end_of_SWSPI_send_word:
 10482                           	opt stack 0
 10483                           tosu	equ	0xFFF
 10484                           tosh	equ	0xFFE
 10485                           tosl	equ	0xFFD
 10486                           pclath	equ	0xFFA
 10487                           tblptru	equ	0xFF8
 10488                           tblptrh	equ	0xFF7
 10489                           tblptrl	equ	0xFF6
 10490                           tablat	equ	0xFF5
 10491                           prodh	equ	0xFF4
 10492                           prodl	equ	0xFF3
 10493                           intcon	equ	0xFF2
 10494                           intcon2	equ	0xFF1
 10495                           postinc0	equ	0xFEE
 10496                           plusw0	equ	0xFEB
 10497                           wreg	equ	0xFE8
 10498                           indf1	equ	0xFE7
 10499                           postdec1	equ	0xFE5
 10500                           fsr1h	equ	0xFE2
 10501                           fsr1l	equ	0xFE1
 10502                           indf2	equ	0xFDF
 10503                           postinc2	equ	0xFDE
 10504                           postdec2	equ	0xFDD
 10505                           plusw2	equ	0xFDB
 10506                           fsr2h	equ	0xFDA
 10507                           fsr2l	equ	0xFD9
 10508                           status	equ	0xFD8
 10509                           
 10510 ;; *************** function _make8 *****************
 10511 ;; Defined at:
 10512 ;;		line 79 in file "SystemCommon.c"
 10513 ;; Parameters:    Size  Location     Type
 10514 ;;  data            4   23[COMRAM] unsigned long 
 10515 ;;  dataLocation    1   27[COMRAM] unsigned char 
 10516 ;; Auto vars:     Size  Location     Type
 10517 ;;		None
 10518 ;; Return value:  Size  Location     Type
 10519 ;;                  1    wreg      unsigned char 
 10520 ;; Registers used:
 10521 ;;		wreg, status,2, status,0
 10522 ;; Tracked objects:
 10523 ;;		On entry : 0/0
 10524 ;;		On exit  : 0/0
 10525 ;;		Unchanged: 0/0
 10526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10527 ;;      Params:         5       0       0       0       0       0       0
 10528 ;;      Locals:         0       0       0       0       0       0       0
 10529 ;;      Temps:          4       0       0       0       0       0       0
 10530 ;;      Totals:         9       0       0       0       0       0       0
 10531 ;;Total ram usage:        9 bytes
 10532 ;; Hardware stack levels used:    1
 10533 ;; Hardware stack levels required when called:    3
 10534 ;; This function calls:
 10535 ;;		Nothing
 10536 ;; This function is called by:
 10537 ;;		_FlashReadCondition
 10538 ;;		_SWSPI_send_word
 10539 ;;		_StoreIntInEeprom
 10540 ;; This function uses a non-reentrant model
 10541 ;;
 10542                           
 10543                           	psect	text68
 10544  002C5C                     __ptext68:
 10545                           	opt stack 0
 10546  002C5C                     _make8:
 10547                           	opt stack 23
 10548                           
 10549                           ;SystemCommon.c: 81: switch(dataLocation)
 10550                           
 10551                           ;incstack = 0
 10552  002C5C  D01F               	goto	l1308
 10553  002C5E                     
 10554                           ;SystemCommon.c: 84: return (data & 0x000000ff);
 10555  002C5E  5018               	movf	make8@data,w,c
 10556  002C60  0012               	return	
 10557  002C62                     
 10558                           ;SystemCommon.c: 87: return (data & 0x0000ff00) >> 8;
 10559  002C62  5019               	movf	make8@data+1,w,c
 10560  002C64  0012               	return	
 10561  002C66                     
 10562                           ;SystemCommon.c: 90: return (data & 0x00ff0000) >> 16;
 10563  002C66  501A               	movf	make8@data+2,w,c
 10564  002C68  0012               	return	
 10565  002C6A                     
 10566                           ;SystemCommon.c: 93: return (data & 0xff000000) >> 24;
 10567  002C6A  0E00               	movlw	0
 10568  002C6C  1418               	andwf	make8@data,w,c
 10569  002C6E  6E1D               	movwf	??_make8& (0+255),c
 10570  002C70  0E00               	movlw	0
 10571  002C72  1419               	andwf	make8@data+1,w,c
 10572  002C74  6E1E               	movwf	(??_make8+1)& (0+255),c
 10573  002C76  0E00               	movlw	0
 10574  002C78  141A               	andwf	make8@data+2,w,c
 10575  002C7A  6E1F               	movwf	(??_make8+2)& (0+255),c
 10576  002C7C  0EFF               	movlw	255
 10577  002C7E  141B               	andwf	make8@data+3,w,c
 10578  002C80  6E20               	movwf	(??_make8+3)& (0+255),c
 10579  002C82  0E19               	movlw	25
 10580  002C84  D005               	goto	u6630
 10581  002C86                     u6635:
 10582  002C86  90D8               	bcf	status,0,c
 10583  002C88  3220               	rrcf	??_make8+3,f,c
 10584  002C8A  321F               	rrcf	??_make8+2,f,c
 10585  002C8C  321E               	rrcf	??_make8+1,f,c
 10586  002C8E  321D               	rrcf	??_make8,f,c
 10587  002C90                     u6630:
 10588  002C90  2EE8               	decfsz	wreg,f,c
 10589  002C92  D7F9               	goto	u6635
 10590  002C94  501D               	movf	??_make8,w,c
 10591  002C96  0012               	return	
 10592  002C98                     
 10593                           ;SystemCommon.c: 96: return (0);
 10594  002C98  0E00               	movlw	0
 10595                           
 10596                           ;SystemCommon.c: 97: }
 10597  002C9A  0012               	return	
 10598  002C9C                     l1308:
 10599  002C9C  501C               	movf	make8@dataLocation,w,c
 10600                           
 10601                           ; Switch size 1, requested type "space"
 10602                           ; Number of cases is 4, Range of values is 0 to 3
 10603                           ; switch strategies available:
 10604                           ; Name         Instructions Cycles
 10605                           ; simple_byte           13     7 (average)
 10606                           ;	Chosen strategy is simple_byte
 10607  002C9E  0A00               	xorlw	0	; case 0
 10608  002CA0  B4D8               	btfsc	status,2,c
 10609  002CA2  D7DD               	goto	l1309
 10610  002CA4  0A01               	xorlw	1	; case 1
 10611  002CA6  B4D8               	btfsc	status,2,c
 10612  002CA8  D7DC               	goto	l1311
 10613  002CAA  0A03               	xorlw	3	; case 2
 10614  002CAC  B4D8               	btfsc	status,2,c
 10615  002CAE  D7DB               	goto	l1312
 10616  002CB0  0A01               	xorlw	1	; case 3
 10617  002CB2  B4D8               	btfsc	status,2,c
 10618  002CB4  D7DA               	goto	l1313
 10619  002CB6  D7F0               	goto	l1314
 10620  002CB8                     __end_of_make8:
 10621                           	opt stack 0
 10622                           tosu	equ	0xFFF
 10623                           tosh	equ	0xFFE
 10624                           tosl	equ	0xFFD
 10625                           pclath	equ	0xFFA
 10626                           tblptru	equ	0xFF8
 10627                           tblptrh	equ	0xFF7
 10628                           tblptrl	equ	0xFF6
 10629                           tablat	equ	0xFF5
 10630                           prodh	equ	0xFF4
 10631                           prodl	equ	0xFF3
 10632                           intcon	equ	0xFF2
 10633                           intcon2	equ	0xFF1
 10634                           postinc0	equ	0xFEE
 10635                           plusw0	equ	0xFEB
 10636                           wreg	equ	0xFE8
 10637                           indf1	equ	0xFE7
 10638                           postdec1	equ	0xFE5
 10639                           fsr1h	equ	0xFE2
 10640                           fsr1l	equ	0xFE1
 10641                           indf2	equ	0xFDF
 10642                           postinc2	equ	0xFDE
 10643                           postdec2	equ	0xFDD
 10644                           plusw2	equ	0xFDB
 10645                           fsr2h	equ	0xFDA
 10646                           fsr2l	equ	0xFD9
 10647                           status	equ	0xFD8
 10648                           
 10649 ;; *************** function _SwSpi_Set_Synth_Le_Pin *****************
 10650 ;; Defined at:
 10651 ;;		line 232 in file "SwSpiApp.c"
 10652 ;; Parameters:    Size  Location     Type
 10653 ;;  phrType         1    wreg     enum E7559
 10654 ;;  cPinMode        1   23[COMRAM] unsigned char 
 10655 ;; Auto vars:     Size  Location     Type
 10656 ;;  phrType         1   24[COMRAM] enum E7559
 10657 ;; Return value:  Size  Location     Type
 10658 ;;                  1    wreg      void 
 10659 ;; Registers used:
 10660 ;;		wreg, status,2, status,0
 10661 ;; Tracked objects:
 10662 ;;		On entry : 0/0
 10663 ;;		On exit  : 0/0
 10664 ;;		Unchanged: 0/0
 10665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10666 ;;      Params:         1       0       0       0       0       0       0
 10667 ;;      Locals:         1       0       0       0       0       0       0
 10668 ;;      Temps:          0       0       0       0       0       0       0
 10669 ;;      Totals:         2       0       0       0       0       0       0
 10670 ;;Total ram usage:        2 bytes
 10671 ;; Hardware stack levels used:    1
 10672 ;; Hardware stack levels required when called:    3
 10673 ;; This function calls:
 10674 ;;		Nothing
 10675 ;; This function is called by:
 10676 ;;		_SWSPI_send_word
 10677 ;; This function uses a non-reentrant model
 10678 ;;
 10679                           
 10680                           	psect	text69
 10681  0032A8                     __ptext69:
 10682                           	opt stack 0
 10683  0032A8                     _SwSpi_Set_Synth_Le_Pin:
 10684                           	opt stack 23
 10685                           
 10686                           ;incstack = 0
 10687                           ;SwSpi_Set_Synth_Le_Pin@phrType stored from wreg
 10688  0032A8  6E19               	movwf	SwSpi_Set_Synth_Le_Pin@phrType,c
 10689                           
 10690                           ;SwSpiApp.c: 234: switch(phrType)
 10691  0032AA  D014               	goto	l697
 10692  0032AC                     
 10693                           ;SwSpiApp.c: 237: if(cPinMode == 1)
 10694  0032AC  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10695  0032AE  A4D8               	btfss	status,2,c
 10696  0032B0  D002               	goto	l699
 10697                           
 10698                           ;SwSpiApp.c: 238: {
 10699                           ;SwSpiApp.c: 239: do { LATCbits.LATC2 = 1; } while(0);
 10700  0032B2  848B               	bsf	3979,2,c	;volatile
 10701                           
 10702                           ;SwSpiApp.c: 240: }
 10703  0032B4  0012               	return	
 10704  0032B6                     l699:
 10705                           
 10706                           ;SwSpiApp.c: 241: else if(cPinMode == 0)
 10707  0032B6  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10708  0032B8  A4D8               	btfss	status,2,c
 10709  0032BA  0012               	return	
 10710                           
 10711                           ;SwSpiApp.c: 242: {
 10712                           ;SwSpiApp.c: 243: do { LATCbits.LATC2 = 0; } while(0);
 10713  0032BC  948B               	bcf	3979,2,c	;volatile
 10714                           
 10715                           ;SwSpiApp.c: 244: }
 10716                           ;SwSpiApp.c: 245: break;
 10717  0032BE  0012               	return	
 10718  0032C0                     
 10719                           ;SwSpiApp.c: 248: if(cPinMode == 1)
 10720  0032C0  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10721  0032C2  A4D8               	btfss	status,2,c
 10722  0032C4  D002               	goto	l708
 10723                           
 10724                           ;SwSpiApp.c: 249: {
 10725                           ;SwSpiApp.c: 250: do { LATDbits.LATD3 = 1; } while(0);
 10726  0032C6  868C               	bsf	3980,3,c	;volatile
 10727                           
 10728                           ;SwSpiApp.c: 251: }
 10729  0032C8  0012               	return	
 10730  0032CA                     l708:
 10731                           
 10732                           ;SwSpiApp.c: 252: else if(cPinMode == 0)
 10733  0032CA  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10734  0032CC  A4D8               	btfss	status,2,c
 10735  0032CE  0012               	return	
 10736                           
 10737                           ;SwSpiApp.c: 253: {
 10738                           ;SwSpiApp.c: 254: do { LATDbits.LATD3 = 0; } while(0);
 10739  0032D0  968C               	bcf	3980,3,c	;volatile
 10740                           
 10741                           ;SwSpiApp.c: 257: }
 10742                           
 10743                           ;SwSpiApp.c: 255: }
 10744                           ;SwSpiApp.c: 256: break;
 10745  0032D2  0012               	return	
 10746  0032D4                     l697:
 10747  0032D4  5019               	movf	SwSpi_Set_Synth_Le_Pin@phrType,w,c
 10748                           
 10749                           ; Switch size 1, requested type "space"
 10750                           ; Number of cases is 2, Range of values is 0 to 1
 10751                           ; switch strategies available:
 10752                           ; Name         Instructions Cycles
 10753                           ; simple_byte            7     4 (average)
 10754                           ;	Chosen strategy is simple_byte
 10755  0032D6  0A00               	xorlw	0	; case 0
 10756  0032D8  B4D8               	btfsc	status,2,c
 10757  0032DA  D7E8               	goto	l698
 10758  0032DC  0A01               	xorlw	1	; case 1
 10759  0032DE  A4D8               	btfss	status,2,c
 10760  0032E0  0012               	return	
 10761  0032E2  D7EE               	goto	l707
 10762  0032E4                     __end_of_SwSpi_Set_Synth_Le_Pin:
 10763                           	opt stack 0
 10764                           tosu	equ	0xFFF
 10765                           tosh	equ	0xFFE
 10766                           tosl	equ	0xFFD
 10767                           pclath	equ	0xFFA
 10768                           tblptru	equ	0xFF8
 10769                           tblptrh	equ	0xFF7
 10770                           tblptrl	equ	0xFF6
 10771                           tablat	equ	0xFF5
 10772                           prodh	equ	0xFF4
 10773                           prodl	equ	0xFF3
 10774                           intcon	equ	0xFF2
 10775                           intcon2	equ	0xFF1
 10776                           postinc0	equ	0xFEE
 10777                           plusw0	equ	0xFEB
 10778                           wreg	equ	0xFE8
 10779                           indf1	equ	0xFE7
 10780                           postdec1	equ	0xFE5
 10781                           fsr1h	equ	0xFE2
 10782                           fsr1l	equ	0xFE1
 10783                           indf2	equ	0xFDF
 10784                           postinc2	equ	0xFDE
 10785                           postdec2	equ	0xFDD
 10786                           plusw2	equ	0xFDB
 10787                           fsr2h	equ	0xFDA
 10788                           fsr2l	equ	0xFD9
 10789                           status	equ	0xFD8
 10790                           
 10791 ;; *************** function _SwSpi_Set_Dac_Sync_Pin *****************
 10792 ;; Defined at:
 10793 ;;		line 260 in file "SwSpiApp.c"
 10794 ;; Parameters:    Size  Location     Type
 10795 ;;  cPinMode        1    wreg     unsigned char 
 10796 ;; Auto vars:     Size  Location     Type
 10797 ;;  cPinMode        1   23[COMRAM] unsigned char 
 10798 ;; Return value:  Size  Location     Type
 10799 ;;                  1    wreg      void 
 10800 ;; Registers used:
 10801 ;;		wreg, status,2, status,0
 10802 ;; Tracked objects:
 10803 ;;		On entry : 0/0
 10804 ;;		On exit  : 0/0
 10805 ;;		Unchanged: 0/0
 10806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10807 ;;      Params:         0       0       0       0       0       0       0
 10808 ;;      Locals:         1       0       0       0       0       0       0
 10809 ;;      Temps:          0       0       0       0       0       0       0
 10810 ;;      Totals:         1       0       0       0       0       0       0
 10811 ;;Total ram usage:        1 bytes
 10812 ;; Hardware stack levels used:    1
 10813 ;; Hardware stack levels required when called:    3
 10814 ;; This function calls:
 10815 ;;		Nothing
 10816 ;; This function is called by:
 10817 ;;		_SWSPI_send_word
 10818 ;; This function uses a non-reentrant model
 10819 ;;
 10820                           
 10821                           	psect	text70
 10822  0037CC                     __ptext70:
 10823                           	opt stack 0
 10824  0037CC                     _SwSpi_Set_Dac_Sync_Pin:
 10825                           	opt stack 23
 10826                           
 10827                           ;incstack = 0
 10828                           ;SwSpi_Set_Dac_Sync_Pin@cPinMode stored from wreg
 10829  0037CC  6E18               	movwf	SwSpi_Set_Dac_Sync_Pin@cPinMode,c
 10830                           
 10831                           ;SwSpiApp.c: 262: switch(cPinMode)
 10832  0037CE  D004               	goto	l718
 10833  0037D0                     
 10834                           ;SwSpiApp.c: 265: do { LATAbits.LATA2 = 0; } while(0);
 10835  0037D0  9489               	bcf	3977,2,c	;volatile
 10836                           
 10837                           ;SwSpiApp.c: 266: break;
 10838  0037D2  0012               	return	
 10839  0037D4                     
 10840                           ;SwSpiApp.c: 269: do { LATAbits.LATA2 = 1; } while(0);
 10841  0037D4  8489               	bsf	3977,2,c	;volatile
 10842                           
 10843                           ;SwSpiApp.c: 271: }
 10844                           
 10845                           ;SwSpiApp.c: 270: break;
 10846  0037D6  0012               	return	
 10847  0037D8                     l718:
 10848  0037D8  5018               	movf	SwSpi_Set_Dac_Sync_Pin@cPinMode,w,c
 10849                           
 10850                           ; Switch size 1, requested type "space"
 10851                           ; Number of cases is 2, Range of values is 0 to 1
 10852                           ; switch strategies available:
 10853                           ; Name         Instructions Cycles
 10854                           ; simple_byte            7     4 (average)
 10855                           ;	Chosen strategy is simple_byte
 10856  0037DA  0A00               	xorlw	0	; case 0
 10857  0037DC  B4D8               	btfsc	status,2,c
 10858  0037DE  D7F8               	goto	l719
 10859  0037E0  0A01               	xorlw	1	; case 1
 10860  0037E2  A4D8               	btfss	status,2,c
 10861  0037E4  0012               	return	
 10862  0037E6  D7F6               	goto	l723
 10863  0037E8                     __end_of_SwSpi_Set_Dac_Sync_Pin:
 10864                           	opt stack 0
 10865                           tosu	equ	0xFFF
 10866                           tosh	equ	0xFFE
 10867                           tosl	equ	0xFFD
 10868                           pclath	equ	0xFFA
 10869                           tblptru	equ	0xFF8
 10870                           tblptrh	equ	0xFF7
 10871                           tblptrl	equ	0xFF6
 10872                           tablat	equ	0xFF5
 10873                           prodh	equ	0xFF4
 10874                           prodl	equ	0xFF3
 10875                           intcon	equ	0xFF2
 10876                           intcon2	equ	0xFF1
 10877                           postinc0	equ	0xFEE
 10878                           plusw0	equ	0xFEB
 10879                           wreg	equ	0xFE8
 10880                           indf1	equ	0xFE7
 10881                           postdec1	equ	0xFE5
 10882                           fsr1h	equ	0xFE2
 10883                           fsr1l	equ	0xFE1
 10884                           indf2	equ	0xFDF
 10885                           postinc2	equ	0xFDE
 10886                           postdec2	equ	0xFDD
 10887                           plusw2	equ	0xFDB
 10888                           fsr2h	equ	0xFDA
 10889                           fsr2l	equ	0xFD9
 10890                           status	equ	0xFD8
 10891                           
 10892 ;; *************** function _SWSPI_Synth_send_bits *****************
 10893 ;; Defined at:
 10894 ;;		line 67 in file "SwSpiApp.c"
 10895 ;; Parameters:    Size  Location     Type
 10896 ;;  phrType         1    wreg     enum E7559
 10897 ;;  data            4   33[COMRAM] unsigned long 
 10898 ;; Auto vars:     Size  Location     Type
 10899 ;;  phrType         1   37[BANK0 ] enum E7559
 10900 ;;  bitArray       32    0[BANK0 ] unsigned char [32]
 10901 ;;  mask            4   32[BANK0 ] unsigned long 
 10902 ;;  count           1   36[BANK0 ] unsigned char 
 10903 ;; Return value:  Size  Location     Type
 10904 ;;                  1    wreg      void 
 10905 ;; Registers used:
 10906 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10907 ;; Tracked objects:
 10908 ;;		On entry : 0/0
 10909 ;;		On exit  : 0/0
 10910 ;;		Unchanged: 0/0
 10911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10912 ;;      Params:         4       0       0       0       0       0       0
 10913 ;;      Locals:         0      38       0       0       0       0       0
 10914 ;;      Temps:          0       0       0       0       0       0       0
 10915 ;;      Totals:         4      38       0       0       0       0       0
 10916 ;;Total ram usage:       42 bytes
 10917 ;; Hardware stack levels used:    1
 10918 ;; Hardware stack levels required when called:    5
 10919 ;; This function calls:
 10920 ;;		_Make32bitsArray
 10921 ;;		_SwSpi_Clk_Pin
 10922 ;;		_SwSpi_Data_Pin
 10923 ;;		_ZeroBitsArray
 10924 ;; This function is called by:
 10925 ;;		_SWSPI_send_word
 10926 ;; This function uses a non-reentrant model
 10927 ;;
 10928                           
 10929                           	psect	text71
 10930  0021E2                     __ptext71:
 10931                           	opt stack 0
 10932  0021E2                     _SWSPI_Synth_send_bits:
 10933                           	opt stack 21
 10934                           
 10935                           ;incstack = 0
 10936                           ;SWSPI_Synth_send_bits@phrType stored from wreg
 10937  0021E2  0100               	movlb	0	; () banked
 10938  0021E4  6F85               	movwf	SWSPI_Synth_send_bits@phrType& (0+255),b
 10939                           
 10940                           ;SwSpiApp.c: 69: uint8_t count;
 10941                           ;SwSpiApp.c: 70: uint32_t mask = 0x1;
 10942  0021E6  0E01               	movlw	1
 10943  0021E8  0100               	movlb	0	; () banked
 10944  0021EA  6F80               	movwf	SWSPI_Synth_send_bits@mask& (0+255),b
 10945  0021EC  0E00               	movlw	0
 10946  0021EE  6F81               	movwf	(SWSPI_Synth_send_bits@mask+1)& (0+255),b
 10947  0021F0  0E00               	movlw	0
 10948  0021F2  6F82               	movwf	(SWSPI_Synth_send_bits@mask+2)& (0+255),b
 10949  0021F4  0E00               	movlw	0
 10950  0021F6  6F83               	movwf	(SWSPI_Synth_send_bits@mask+3)& (0+255),b
 10951                           
 10952                           ; BSR set to: 0
 10953                           ;SwSpiApp.c: 72: bool bitArray[32];
 10954                           ;SwSpiApp.c: 73: ZeroBitsArray(bitArray);
 10955  0021F8  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 10956  0021FA  6E20               	movwf	ZeroBitsArray@array,c
 10957  0021FC  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 10958  0021FE  6E21               	movwf	ZeroBitsArray@array+1,c
 10959  002200  ECD7  F01B         	call	_ZeroBitsArray	;wreg free
 10960                           
 10961                           ;SwSpiApp.c: 75: Make32bitsArray(bitArray, data);
 10962  002204  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 10963  002206  6E18               	movwf	Make32bitsArray@array,c
 10964  002208  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 10965  00220A  6E19               	movwf	Make32bitsArray@array+1,c
 10966  00220C  C022  F01A         	movff	SWSPI_Synth_send_bits@data,Make32bitsArray@data
 10967  002210  C023  F01B         	movff	SWSPI_Synth_send_bits@data+1,Make32bitsArray@data+1
 10968  002214  C024  F01C         	movff	SWSPI_Synth_send_bits@data+2,Make32bitsArray@data+2
 10969  002218  C025  F01D         	movff	SWSPI_Synth_send_bits@data+3,Make32bitsArray@data+3
 10970  00221C  EC8A  F016         	call	_Make32bitsArray	;wreg free
 10971                           
 10972                           ;SwSpiApp.c: 77: for (count = 0; count <= 31 ; count++)
 10973  002220  0E00               	movlw	0
 10974  002222  0100               	movlb	0	; () banked
 10975  002224  6F84               	movwf	SWSPI_Synth_send_bits@count& (0+255),b
 10976  002226                     l6918:
 10977                           
 10978                           ; BSR set to: 0
 10979  002226  0E1F               	movlw	31
 10980  002228  6584               	cpfsgt	SWSPI_Synth_send_bits@count& (0+255),b
 10981  00222A  D001               	goto	l603
 10982  00222C  D026               	goto	u6720
 10983  00222E                     l603:
 10984                           
 10985                           ; BSR set to: 0
 10986                           ;SwSpiApp.c: 78: {
 10987                           ;SwSpiApp.c: 80: SwSpi_Clk_Pin(phrType, 0);
 10988                           
 10989                           ; BSR set to: 0
 10990  00222E  0E00               	movlw	0
 10991  002230  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 10992  002232  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 10993  002234  EC0D  F017         	call	_SwSpi_Clk_Pin
 10994                           
 10995                           ;SwSpiApp.c: 82: if (bitArray[count])
 10996  002238  0100               	movlb	0	; () banked
 10997  00223A  5184               	movf	SWSPI_Synth_send_bits@count& (0+255),w,b
 10998  00223C  0D01               	mullw	1
 10999  00223E  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 11000  002240  24F3               	addwf	prodl,w,c
 11001  002242  6ED9               	movwf	fsr2l,c
 11002  002244  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 11003  002246  20F4               	addwfc	prodh,w,c
 11004  002248  6EDA               	movwf	fsr2h,c
 11005  00224A  50DF               	movf	indf2,w,c
 11006  00224C  B4D8               	btfsc	status,2,c
 11007  00224E  D006               	goto	l605
 11008                           
 11009                           ; BSR set to: 0
 11010                           ;SwSpiApp.c: 83: {
 11011                           ;SwSpiApp.c: 84: SwSpi_Data_Pin(phrType, 1);
 11012  002250  0E01               	movlw	1
 11013  002252  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 11014  002254  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 11015  002256  ECE2  F016         	call	_SwSpi_Data_Pin
 11016                           
 11017                           ;SwSpiApp.c: 85: }
 11018  00225A  D006               	goto	l606
 11019  00225C                     l605:
 11020                           
 11021                           ;SwSpiApp.c: 86: else
 11022                           ;SwSpiApp.c: 87: {
 11023                           ;SwSpiApp.c: 88: SwSpi_Data_Pin(phrType, 0);
 11024  00225C  0E00               	movlw	0
 11025  00225E  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 11026  002260  0100               	movlb	0	; () banked
 11027  002262  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 11028  002264  ECE2  F016         	call	_SwSpi_Data_Pin
 11029  002268                     l606:
 11030                           
 11031                           ;SwSpiApp.c: 89: }
 11032                           ;SwSpiApp.c: 91: SwSpi_Clk_Pin(phrType, 1);
 11033  002268  0E01               	movlw	1
 11034  00226A  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 11035  00226C  0100               	movlb	0	; () banked
 11036  00226E  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 11037  002270  EC0D  F017         	call	_SwSpi_Clk_Pin
 11038  002274  0100               	movlb	0	; () banked
 11039  002276  2B84               	incf	SWSPI_Synth_send_bits@count& (0+255),f,b
 11040  002278  D7D6               	goto	l6918
 11041  00227A                     u6720:
 11042                           
 11043                           ; BSR set to: 0
 11044                           ;SwSpiApp.c: 92: }
 11045                           ;SwSpiApp.c: 94: _delay((unsigned long)((50)*(8000000/4000000.0)));
 11046                           
 11047                           ; BSR set to: 0
 11048  00227A  0E21               	movlw	33
 11049  00227C                     u8607:
 11050  00227C  2EE8               	decfsz	wreg,f,c
 11051  00227E  D7FE               	bra	u8607
 11052  002280  F000               	nop	
 11053                           
 11054                           ;SwSpiApp.c: 95: SwSpi_Data_Pin(phrType, 0);
 11055  002282  0E00               	movlw	0
 11056  002284  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 11057  002286  0100               	movlb	0	; () banked
 11058  002288  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 11059  00228A  ECE2  F016         	call	_SwSpi_Data_Pin
 11060                           
 11061                           ;SwSpiApp.c: 96: SwSpi_Clk_Pin(phrType, 0);
 11062  00228E  0E00               	movlw	0
 11063  002290  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 11064  002292  0100               	movlb	0	; () banked
 11065  002294  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 11066  002296  EC0D  F017         	call	_SwSpi_Clk_Pin
 11067  00229A  0012               	return		;funcret
 11068  00229C                     __end_of_SWSPI_Synth_send_bits:
 11069                           	opt stack 0
 11070                           tosu	equ	0xFFF
 11071                           tosh	equ	0xFFE
 11072                           tosl	equ	0xFFD
 11073                           pclath	equ	0xFFA
 11074                           tblptru	equ	0xFF8
 11075                           tblptrh	equ	0xFF7
 11076                           tblptrl	equ	0xFF6
 11077                           tablat	equ	0xFF5
 11078                           prodh	equ	0xFF4
 11079                           prodl	equ	0xFF3
 11080                           intcon	equ	0xFF2
 11081                           intcon2	equ	0xFF1
 11082                           postinc0	equ	0xFEE
 11083                           plusw0	equ	0xFEB
 11084                           wreg	equ	0xFE8
 11085                           indf1	equ	0xFE7
 11086                           postdec1	equ	0xFE5
 11087                           fsr1h	equ	0xFE2
 11088                           fsr1l	equ	0xFE1
 11089                           indf2	equ	0xFDF
 11090                           postinc2	equ	0xFDE
 11091                           postdec2	equ	0xFDD
 11092                           plusw2	equ	0xFDB
 11093                           fsr2h	equ	0xFDA
 11094                           fsr2l	equ	0xFD9
 11095                           status	equ	0xFD8
 11096                           
 11097 ;; *************** function _ZeroBitsArray *****************
 11098 ;; Defined at:
 11099 ;;		line 29 in file "SystemCommon.c"
 11100 ;; Parameters:    Size  Location     Type
 11101 ;;  array           2   31[COMRAM] PTR unsigned char 
 11102 ;;		 -> SWSPI_Synth_send_bits@bitArray(32), 
 11103 ;; Auto vars:     Size  Location     Type
 11104 ;;		None
 11105 ;; Return value:  Size  Location     Type
 11106 ;;                  1    wreg      void 
 11107 ;; Registers used:
 11108 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11109 ;; Tracked objects:
 11110 ;;		On entry : 0/0
 11111 ;;		On exit  : 0/0
 11112 ;;		Unchanged: 0/0
 11113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11114 ;;      Params:         2       0       0       0       0       0       0
 11115 ;;      Locals:         0       0       0       0       0       0       0
 11116 ;;      Temps:          0       0       0       0       0       0       0
 11117 ;;      Totals:         2       0       0       0       0       0       0
 11118 ;;Total ram usage:        2 bytes
 11119 ;; Hardware stack levels used:    1
 11120 ;; Hardware stack levels required when called:    4
 11121 ;; This function calls:
 11122 ;;		_memset
 11123 ;; This function is called by:
 11124 ;;		_SWSPI_Synth_send_bits
 11125 ;; This function uses a non-reentrant model
 11126 ;;
 11127                           
 11128                           	psect	text72
 11129  0037AE                     __ptext72:
 11130                           	opt stack 0
 11131  0037AE                     _ZeroBitsArray:
 11132                           	opt stack 21
 11133                           
 11134                           ;SystemCommon.c: 31: memset(array, 0x0, 32);
 11135                           
 11136                           ;incstack = 0
 11137  0037AE  C020  F018         	movff	ZeroBitsArray@array,memset@p1
 11138  0037B2  C021  F019         	movff	ZeroBitsArray@array+1,memset@p1+1
 11139  0037B6  0E00               	movlw	0
 11140  0037B8  6E1B               	movwf	memset@c+1,c
 11141  0037BA  0E00               	movlw	0
 11142  0037BC  6E1A               	movwf	memset@c,c
 11143  0037BE  0E00               	movlw	0
 11144  0037C0  6E1D               	movwf	memset@n+1,c
 11145  0037C2  0E20               	movlw	32
 11146  0037C4  6E1C               	movwf	memset@n,c
 11147  0037C6  ECDA  F01A         	call	_memset	;wreg free
 11148  0037CA  0012               	return		;funcret
 11149  0037CC                     __end_of_ZeroBitsArray:
 11150                           	opt stack 0
 11151                           tosu	equ	0xFFF
 11152                           tosh	equ	0xFFE
 11153                           tosl	equ	0xFFD
 11154                           pclath	equ	0xFFA
 11155                           tblptru	equ	0xFF8
 11156                           tblptrh	equ	0xFF7
 11157                           tblptrl	equ	0xFF6
 11158                           tablat	equ	0xFF5
 11159                           prodh	equ	0xFF4
 11160                           prodl	equ	0xFF3
 11161                           intcon	equ	0xFF2
 11162                           intcon2	equ	0xFF1
 11163                           postinc0	equ	0xFEE
 11164                           plusw0	equ	0xFEB
 11165                           wreg	equ	0xFE8
 11166                           indf1	equ	0xFE7
 11167                           postdec1	equ	0xFE5
 11168                           fsr1h	equ	0xFE2
 11169                           fsr1l	equ	0xFE1
 11170                           indf2	equ	0xFDF
 11171                           postinc2	equ	0xFDE
 11172                           postdec2	equ	0xFDD
 11173                           plusw2	equ	0xFDB
 11174                           fsr2h	equ	0xFDA
 11175                           fsr2l	equ	0xFD9
 11176                           status	equ	0xFD8
 11177                           
 11178 ;; *************** function _memset *****************
 11179 ;; Defined at:
 11180 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 11181 ;; Parameters:    Size  Location     Type
 11182 ;;  p1              2   23[COMRAM] PTR void 
 11183 ;;		 -> GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dataRegArr(10), SWSPI_Synth_send_bits@bitArray(32), SynthReadData@T
      +xMsg(27), 
 11184 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), 
 11185 ;;		 -> rxMsgData(20), rxMsgQueue(20), 
 11186 ;;  c               2   25[COMRAM] int 
 11187 ;;  n               2   27[COMRAM] unsigned int 
 11188 ;; Auto vars:     Size  Location     Type
 11189 ;;  p               2   29[COMRAM] PTR unsigned char 
 11190 ;;		 -> GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dataRegArr(10), SWSPI_Synth_send_bits@bitArray(32), SynthReadData@T
      +xMsg(27), 
 11191 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), 
 11192 ;;		 -> rxMsgData(20), rxMsgQueue(20), 
 11193 ;; Return value:  Size  Location     Type
 11194 ;;                  2   23[COMRAM] PTR void 
 11195 ;; Registers used:
 11196 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11197 ;; Tracked objects:
 11198 ;;		On entry : 0/0
 11199 ;;		On exit  : 0/0
 11200 ;;		Unchanged: 0/0
 11201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11202 ;;      Params:         6       0       0       0       0       0       0
 11203 ;;      Locals:         2       0       0       0       0       0       0
 11204 ;;      Temps:          0       0       0       0       0       0       0
 11205 ;;      Totals:         8       0       0       0       0       0       0
 11206 ;;Total ram usage:        8 bytes
 11207 ;; Hardware stack levels used:    1
 11208 ;; Hardware stack levels required when called:    3
 11209 ;; This function calls:
 11210 ;;		Nothing
 11211 ;; This function is called by:
 11212 ;;		_ZeroArray
 11213 ;;		_ZeroBitsArray
 11214 ;; This function uses a non-reentrant model
 11215 ;;
 11216                           
 11217                           	psect	text73
 11218  0035B4                     __ptext73:
 11219                           	opt stack 0
 11220  0035B4                     _memset:
 11221                           	opt stack 25
 11222                           
 11223                           ;incstack = 0
 11224  0035B4  C018  F01E         	movff	memset@p1,memset@p
 11225  0035B8  C019  F01F         	movff	memset@p1+1,memset@p+1
 11226  0035BC  D008               	goto	l1893
 11227  0035BE                     l6502:
 11228  0035BE  C01E  FFD9         	movff	memset@p,fsr2l
 11229  0035C2  C01F  FFDA         	movff	memset@p+1,fsr2h
 11230  0035C6  C01A  FFDF         	movff	memset@c,indf2
 11231  0035CA  4A1E               	infsnz	memset@p,f,c
 11232  0035CC  2A1F               	incf	memset@p+1,f,c
 11233  0035CE                     l1893:
 11234  0035CE  061C               	decf	memset@n,f,c
 11235  0035D0  A0D8               	btfss	status,0,c
 11236  0035D2  061D               	decf	memset@n+1,f,c
 11237  0035D4  281C               	incf	memset@n,w,c
 11238  0035D6  E1F3               	bnz	l6502
 11239  0035D8  281D               	incf	memset@n+1,w,c
 11240  0035DA  B4D8               	btfsc	status,2,c
 11241  0035DC  0012               	return	
 11242  0035DE  D7EF               	goto	l1894
 11243  0035E0                     __end_of_memset:
 11244                           	opt stack 0
 11245                           tosu	equ	0xFFF
 11246                           tosh	equ	0xFFE
 11247                           tosl	equ	0xFFD
 11248                           pclath	equ	0xFFA
 11249                           tblptru	equ	0xFF8
 11250                           tblptrh	equ	0xFF7
 11251                           tblptrl	equ	0xFF6
 11252                           tablat	equ	0xFF5
 11253                           prodh	equ	0xFF4
 11254                           prodl	equ	0xFF3
 11255                           intcon	equ	0xFF2
 11256                           intcon2	equ	0xFF1
 11257                           postinc0	equ	0xFEE
 11258                           plusw0	equ	0xFEB
 11259                           wreg	equ	0xFE8
 11260                           indf1	equ	0xFE7
 11261                           postdec1	equ	0xFE5
 11262                           fsr1h	equ	0xFE2
 11263                           fsr1l	equ	0xFE1
 11264                           indf2	equ	0xFDF
 11265                           postinc2	equ	0xFDE
 11266                           postdec2	equ	0xFDD
 11267                           plusw2	equ	0xFDB
 11268                           fsr2h	equ	0xFDA
 11269                           fsr2l	equ	0xFD9
 11270                           status	equ	0xFD8
 11271                           
 11272 ;; *************** function _Make32bitsArray *****************
 11273 ;; Defined at:
 11274 ;;		line 100 in file "SystemCommon.c"
 11275 ;; Parameters:    Size  Location     Type
 11276 ;;  array           2   23[COMRAM] PTR unsigned char 
 11277 ;;		 -> SWSPI_Synth_send_bits@bitArray(32), 
 11278 ;;  data            4   25[COMRAM] unsigned long 
 11279 ;; Auto vars:     Size  Location     Type
 11280 ;;  idx             2   31[COMRAM] int 
 11281 ;; Return value:  Size  Location     Type
 11282 ;;                  1    wreg      void 
 11283 ;; Registers used:
 11284 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11285 ;; Tracked objects:
 11286 ;;		On entry : 0/0
 11287 ;;		On exit  : 0/0
 11288 ;;		Unchanged: 0/0
 11289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11290 ;;      Params:         6       0       0       0       0       0       0
 11291 ;;      Locals:         2       0       0       0       0       0       0
 11292 ;;      Temps:          2       0       0       0       0       0       0
 11293 ;;      Totals:        10       0       0       0       0       0       0
 11294 ;;Total ram usage:       10 bytes
 11295 ;; Hardware stack levels used:    1
 11296 ;; Hardware stack levels required when called:    3
 11297 ;; This function calls:
 11298 ;;		Nothing
 11299 ;; This function is called by:
 11300 ;;		_SWSPI_Synth_send_bits
 11301 ;; This function uses a non-reentrant model
 11302 ;;
 11303                           
 11304                           	psect	text74
 11305  002D14                     __ptext74:
 11306                           	opt stack 0
 11307  002D14                     _Make32bitsArray:
 11308                           	opt stack 22
 11309                           
 11310                           ;SystemCommon.c: 102: for(int idx = 0; idx <= 32; idx++)
 11311                           
 11312                           ;incstack = 0
 11313  002D14  0E00               	movlw	0
 11314  002D16  6E21               	movwf	Make32bitsArray@idx+1,c
 11315  002D18  0E00               	movlw	0
 11316  002D1A  6E20               	movwf	Make32bitsArray@idx,c
 11317  002D1C                     l6584:
 11318  002D1C  BE21               	btfsc	Make32bitsArray@idx+1,7,c
 11319  002D1E  D006               	goto	l1318
 11320  002D20  5021               	movf	Make32bitsArray@idx+1,w,c
 11321  002D22  E123               	bnz	l1320
 11322  002D24  0E21               	movlw	33
 11323  002D26  5C20               	subwf	Make32bitsArray@idx,w,c
 11324  002D28  B0D8               	btfsc	status,0,c
 11325  002D2A  0012               	return	
 11326  002D2C                     l1318:
 11327                           
 11328                           ;SystemCommon.c: 103: {
 11329                           ;SystemCommon.c: 104: array[32 - idx - 1] = data % 2;
 11330  002D2C  0E01               	movlw	1
 11331  002D2E  2420               	addwf	Make32bitsArray@idx,w,c
 11332  002D30  6E1E               	movwf	??_Make32bitsArray& (0+255),c
 11333  002D32  0E00               	movlw	0
 11334  002D34  2021               	addwfc	Make32bitsArray@idx+1,w,c
 11335  002D36  6E1F               	movwf	(??_Make32bitsArray+1)& (0+255),c
 11336  002D38  1E1E               	comf	??_Make32bitsArray,f,c
 11337  002D3A  1E1F               	comf	??_Make32bitsArray+1,f,c
 11338  002D3C  4A1E               	infsnz	??_Make32bitsArray,f,c
 11339  002D3E  2A1F               	incf	??_Make32bitsArray+1,f,c
 11340  002D40  0E20               	movlw	32
 11341  002D42  261E               	addwf	??_Make32bitsArray,f,c
 11342  002D44  0E00               	movlw	0
 11343  002D46  221F               	addwfc	??_Make32bitsArray+1,f,c
 11344  002D48  501E               	movf	??_Make32bitsArray,w,c
 11345  002D4A  2418               	addwf	Make32bitsArray@array,w,c
 11346  002D4C  6ED9               	movwf	fsr2l,c
 11347  002D4E  501F               	movf	??_Make32bitsArray+1,w,c
 11348  002D50  2019               	addwfc	Make32bitsArray@array+1,w,c
 11349  002D52  6EDA               	movwf	fsr2h,c
 11350  002D54  501A               	movf	Make32bitsArray@data,w,c
 11351  002D56  0B01               	andlw	1
 11352  002D58  6EDF               	movwf	indf2,c
 11353                           
 11354                           ;SystemCommon.c: 105: data /= 2;
 11355  002D5A  90D8               	bcf	status,0,c
 11356  002D5C  321D               	rrcf	Make32bitsArray@data+3,f,c
 11357  002D5E  321C               	rrcf	Make32bitsArray@data+2,f,c
 11358  002D60  321B               	rrcf	Make32bitsArray@data+1,f,c
 11359  002D62  321A               	rrcf	Make32bitsArray@data,f,c
 11360  002D64  4A20               	infsnz	Make32bitsArray@idx,f,c
 11361  002D66  2A21               	incf	Make32bitsArray@idx+1,f,c
 11362  002D68  D7D9               	goto	l6584
 11363  002D6A                     l1320:
 11364  002D6A  0012               	return		;funcret
 11365  002D6C                     __end_of_Make32bitsArray:
 11366                           	opt stack 0
 11367                           tosu	equ	0xFFF
 11368                           tosh	equ	0xFFE
 11369                           tosl	equ	0xFFD
 11370                           pclath	equ	0xFFA
 11371                           tblptru	equ	0xFF8
 11372                           tblptrh	equ	0xFF7
 11373                           tblptrl	equ	0xFF6
 11374                           tablat	equ	0xFF5
 11375                           prodh	equ	0xFF4
 11376                           prodl	equ	0xFF3
 11377                           intcon	equ	0xFF2
 11378                           intcon2	equ	0xFF1
 11379                           postinc0	equ	0xFEE
 11380                           plusw0	equ	0xFEB
 11381                           wreg	equ	0xFE8
 11382                           indf1	equ	0xFE7
 11383                           postdec1	equ	0xFE5
 11384                           fsr1h	equ	0xFE2
 11385                           fsr1l	equ	0xFE1
 11386                           indf2	equ	0xFDF
 11387                           postinc2	equ	0xFDE
 11388                           postdec2	equ	0xFDD
 11389                           plusw2	equ	0xFDB
 11390                           fsr2h	equ	0xFDA
 11391                           fsr2l	equ	0xFD9
 11392                           status	equ	0xFD8
 11393                           
 11394 ;; *************** function _SWSPI_DAC_send_bits *****************
 11395 ;; Defined at:
 11396 ;;		line 43 in file "SwSpiApp.c"
 11397 ;; Parameters:    Size  Location     Type
 11398 ;;  phrType         1    wreg     enum E7559
 11399 ;;  data            1   25[COMRAM] unsigned char 
 11400 ;; Auto vars:     Size  Location     Type
 11401 ;;  phrType         1   27[COMRAM] enum E7559
 11402 ;;  count           1   26[COMRAM] unsigned char 
 11403 ;; Return value:  Size  Location     Type
 11404 ;;                  1    wreg      void 
 11405 ;; Registers used:
 11406 ;;		wreg, status,2, status,0, cstack
 11407 ;; Tracked objects:
 11408 ;;		On entry : 0/0
 11409 ;;		On exit  : 0/0
 11410 ;;		Unchanged: 0/0
 11411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11412 ;;      Params:         1       0       0       0       0       0       0
 11413 ;;      Locals:         2       0       0       0       0       0       0
 11414 ;;      Temps:          0       0       0       0       0       0       0
 11415 ;;      Totals:         3       0       0       0       0       0       0
 11416 ;;Total ram usage:        3 bytes
 11417 ;; Hardware stack levels used:    1
 11418 ;; Hardware stack levels required when called:    4
 11419 ;; This function calls:
 11420 ;;		_SwSpi_Clk_Pin
 11421 ;;		_SwSpi_Data_Pin
 11422 ;; This function is called by:
 11423 ;;		_SWSPI_send_word
 11424 ;; This function uses a non-reentrant model
 11425 ;;
 11426                           
 11427                           	psect	text75
 11428  002D6C                     __ptext75:
 11429                           	opt stack 0
 11430  002D6C                     _SWSPI_DAC_send_bits:
 11431                           	opt stack 22
 11432                           
 11433                           ;incstack = 0
 11434                           ;SWSPI_DAC_send_bits@phrType stored from wreg
 11435  002D6C  6E1C               	movwf	SWSPI_DAC_send_bits@phrType,c
 11436                           
 11437                           ;SwSpiApp.c: 45: uint8_t count;
 11438                           ;SwSpiApp.c: 46: for (count = 8; count ; count--, data <<= 1)
 11439  002D6E  0E08               	movlw	8
 11440  002D70  6E1B               	movwf	SWSPI_DAC_send_bits@count,c
 11441  002D72  D01A               	goto	l595
 11442  002D74                     
 11443                           ;SwSpiApp.c: 47: {
 11444                           ;SwSpiApp.c: 48: SwSpi_Clk_Pin(phrType, 1);
 11445  002D74  0E01               	movlw	1
 11446  002D76  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 11447  002D78  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11448  002D7A  EC0D  F017         	call	_SwSpi_Clk_Pin
 11449                           
 11450                           ;SwSpiApp.c: 50: if (data & 0X80)
 11451  002D7E  AE1A               	btfss	SWSPI_DAC_send_bits@data,7,c
 11452  002D80  D006               	goto	l597
 11453                           
 11454                           ;SwSpiApp.c: 51: {
 11455                           ;SwSpiApp.c: 53: SwSpi_Data_Pin(phrType, 1);
 11456  002D82  0E01               	movlw	1
 11457  002D84  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 11458  002D86  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11459  002D88  ECE2  F016         	call	_SwSpi_Data_Pin
 11460                           
 11461                           ;SwSpiApp.c: 54: }
 11462  002D8C  D005               	goto	l598
 11463  002D8E                     l597:
 11464                           
 11465                           ;SwSpiApp.c: 55: else
 11466                           ;SwSpiApp.c: 56: {
 11467                           ;SwSpiApp.c: 57: SwSpi_Data_Pin(phrType, 0);
 11468  002D8E  0E00               	movlw	0
 11469  002D90  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 11470  002D92  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11471  002D94  ECE2  F016         	call	_SwSpi_Data_Pin
 11472  002D98                     l598:
 11473                           
 11474                           ;SwSpiApp.c: 58: }
 11475                           ;SwSpiApp.c: 60: SwSpi_Clk_Pin(phrType, 0);
 11476  002D98  0E00               	movlw	0
 11477  002D9A  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 11478  002D9C  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11479  002D9E  EC0D  F017         	call	_SwSpi_Clk_Pin
 11480  002DA2  061B               	decf	SWSPI_DAC_send_bits@count,f,c
 11481  002DA4  90D8               	bcf	status,0,c
 11482  002DA6  361A               	rlcf	SWSPI_DAC_send_bits@data,f,c
 11483  002DA8                     l595:
 11484  002DA8  501B               	movf	SWSPI_DAC_send_bits@count,w,c
 11485  002DAA  A4D8               	btfss	status,2,c
 11486  002DAC  D7E3               	goto	l596
 11487                           
 11488                           ;SwSpiApp.c: 61: }
 11489                           ;SwSpiApp.c: 63: SwSpi_Data_Pin(phrType, 0);
 11490  002DAE  0E00               	movlw	0
 11491  002DB0  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 11492  002DB2  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11493  002DB4  ECE2  F016         	call	_SwSpi_Data_Pin
 11494                           
 11495                           ;SwSpiApp.c: 64: SwSpi_Clk_Pin(phrType, 0);
 11496  002DB8  0E00               	movlw	0
 11497  002DBA  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 11498  002DBC  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11499  002DBE  EC0D  F017         	call	_SwSpi_Clk_Pin
 11500  002DC2  0012               	return		;funcret
 11501  002DC4                     __end_of_SWSPI_DAC_send_bits:
 11502                           	opt stack 0
 11503                           tosu	equ	0xFFF
 11504                           tosh	equ	0xFFE
 11505                           tosl	equ	0xFFD
 11506                           pclath	equ	0xFFA
 11507                           tblptru	equ	0xFF8
 11508                           tblptrh	equ	0xFF7
 11509                           tblptrl	equ	0xFF6
 11510                           tablat	equ	0xFF5
 11511                           prodh	equ	0xFF4
 11512                           prodl	equ	0xFF3
 11513                           intcon	equ	0xFF2
 11514                           intcon2	equ	0xFF1
 11515                           postinc0	equ	0xFEE
 11516                           plusw0	equ	0xFEB
 11517                           wreg	equ	0xFE8
 11518                           indf1	equ	0xFE7
 11519                           postdec1	equ	0xFE5
 11520                           fsr1h	equ	0xFE2
 11521                           fsr1l	equ	0xFE1
 11522                           indf2	equ	0xFDF
 11523                           postinc2	equ	0xFDE
 11524                           postdec2	equ	0xFDD
 11525                           plusw2	equ	0xFDB
 11526                           fsr2h	equ	0xFDA
 11527                           fsr2l	equ	0xFD9
 11528                           status	equ	0xFD8
 11529                           
 11530 ;; *************** function _SwSpi_Data_Pin *****************
 11531 ;; Defined at:
 11532 ;;		line 103 in file "SwSpiApp.c"
 11533 ;; Parameters:    Size  Location     Type
 11534 ;;  phrType         1    wreg     enum E7559
 11535 ;;  cPinMode        1   23[COMRAM] unsigned char 
 11536 ;; Auto vars:     Size  Location     Type
 11537 ;;  phrType         1   24[COMRAM] enum E7559
 11538 ;; Return value:  Size  Location     Type
 11539 ;;                  1    wreg      void 
 11540 ;; Registers used:
 11541 ;;		wreg, status,2, status,0
 11542 ;; Tracked objects:
 11543 ;;		On entry : 0/0
 11544 ;;		On exit  : 0/0
 11545 ;;		Unchanged: 0/0
 11546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11547 ;;      Params:         1       0       0       0       0       0       0
 11548 ;;      Locals:         1       0       0       0       0       0       0
 11549 ;;      Temps:          0       0       0       0       0       0       0
 11550 ;;      Totals:         2       0       0       0       0       0       0
 11551 ;;Total ram usage:        2 bytes
 11552 ;; Hardware stack levels used:    1
 11553 ;; Hardware stack levels required when called:    3
 11554 ;; This function calls:
 11555 ;;		Nothing
 11556 ;; This function is called by:
 11557 ;;		_SWSPI_DAC_send_bits
 11558 ;;		_SWSPI_Synth_send_bits
 11559 ;; This function uses a non-reentrant model
 11560 ;;
 11561                           
 11562                           	psect	text76
 11563  002DC4                     __ptext76:
 11564                           	opt stack 0
 11565  002DC4                     _SwSpi_Data_Pin:
 11566                           	opt stack 22
 11567                           
 11568                           ;incstack = 0
 11569                           ;SwSpi_Data_Pin@phrType stored from wreg
 11570  002DC4  6E19               	movwf	SwSpi_Data_Pin@phrType,c
 11571                           
 11572                           ;SwSpiApp.c: 105: switch(phrType)
 11573  002DC6  D01E               	goto	l610
 11574  002DC8                     
 11575                           ;SwSpiApp.c: 108: if(cPinMode == 1)
 11576  002DC8  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 11577  002DCA  A4D8               	btfss	status,2,c
 11578  002DCC  D002               	goto	l612
 11579                           
 11580                           ;SwSpiApp.c: 109: {
 11581                           ;SwSpiApp.c: 110: do { LATDbits.LATD0 = 1; } while(0);
 11582  002DCE  808C               	bsf	3980,0,c	;volatile
 11583                           
 11584                           ;SwSpiApp.c: 111: }
 11585  002DD0  0012               	return	
 11586  002DD2                     l612:
 11587                           
 11588                           ;SwSpiApp.c: 112: else if (cPinMode == 0)
 11589  002DD2  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 11590  002DD4  A4D8               	btfss	status,2,c
 11591  002DD6  0012               	return	
 11592                           
 11593                           ;SwSpiApp.c: 113: {
 11594                           ;SwSpiApp.c: 114: do { LATDbits.LATD0 = 0; } while(0);
 11595  002DD8  908C               	bcf	3980,0,c	;volatile
 11596                           
 11597                           ;SwSpiApp.c: 115: }
 11598                           ;SwSpiApp.c: 116: break;
 11599  002DDA  0012               	return	
 11600  002DDC                     
 11601                           ;SwSpiApp.c: 119: if(cPinMode == 1)
 11602  002DDC  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 11603  002DDE  A4D8               	btfss	status,2,c
 11604  002DE0  D002               	goto	l621
 11605                           
 11606                           ;SwSpiApp.c: 120: {
 11607                           ;SwSpiApp.c: 121: do { LATCbits.LATC5 = 1; } while(0);
 11608  002DE2  8A8B               	bsf	3979,5,c	;volatile
 11609                           
 11610                           ;SwSpiApp.c: 122: }
 11611  002DE4  0012               	return	
 11612  002DE6                     l621:
 11613                           
 11614                           ;SwSpiApp.c: 123: else if (cPinMode == 0)
 11615  002DE6  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 11616  002DE8  A4D8               	btfss	status,2,c
 11617  002DEA  0012               	return	
 11618                           
 11619                           ;SwSpiApp.c: 124: {
 11620                           ;SwSpiApp.c: 125: do { LATCbits.LATC5 = 0; } while(0);
 11621  002DEC  9A8B               	bcf	3979,5,c	;volatile
 11622                           
 11623                           ;SwSpiApp.c: 126: }
 11624                           ;SwSpiApp.c: 127: break;
 11625  002DEE  0012               	return	
 11626  002DF0                     
 11627                           ;SwSpiApp.c: 130: if(cPinMode == 1)
 11628  002DF0  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 11629  002DF2  A4D8               	btfss	status,2,c
 11630  002DF4  D002               	goto	l629
 11631                           
 11632                           ;SwSpiApp.c: 131: {
 11633                           ;SwSpiApp.c: 132: do { LATAbits.LATA4 = 1; } while(0);
 11634  002DF6  8889               	bsf	3977,4,c	;volatile
 11635                           
 11636                           ;SwSpiApp.c: 133: }
 11637  002DF8  0012               	return	
 11638  002DFA                     l629:
 11639                           
 11640                           ;SwSpiApp.c: 134: else if (cPinMode == 0)
 11641  002DFA  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 11642  002DFC  A4D8               	btfss	status,2,c
 11643  002DFE  0012               	return	
 11644                           
 11645                           ;SwSpiApp.c: 135: {
 11646                           ;SwSpiApp.c: 136: do { LATAbits.LATA4 = 0; } while(0);
 11647  002E00  9889               	bcf	3977,4,c	;volatile
 11648                           
 11649                           ;SwSpiApp.c: 139: }
 11650                           
 11651                           ;SwSpiApp.c: 137: }
 11652                           ;SwSpiApp.c: 138: break;
 11653  002E02  0012               	return	
 11654  002E04                     l610:
 11655  002E04  5019               	movf	SwSpi_Data_Pin@phrType,w,c
 11656                           
 11657                           ; Switch size 1, requested type "space"
 11658                           ; Number of cases is 3, Range of values is 0 to 2
 11659                           ; switch strategies available:
 11660                           ; Name         Instructions Cycles
 11661                           ; simple_byte           10     6 (average)
 11662                           ;	Chosen strategy is simple_byte
 11663  002E06  0A00               	xorlw	0	; case 0
 11664  002E08  B4D8               	btfsc	status,2,c
 11665  002E0A  D7DE               	goto	l611
 11666  002E0C  0A01               	xorlw	1	; case 1
 11667  002E0E  B4D8               	btfsc	status,2,c
 11668  002E10  D7E5               	goto	l620
 11669  002E12  0A03               	xorlw	3	; case 2
 11670  002E14  A4D8               	btfss	status,2,c
 11671  002E16  0012               	return	
 11672  002E18  D7EB               	goto	l628
 11673  002E1A                     __end_of_SwSpi_Data_Pin:
 11674                           	opt stack 0
 11675                           tosu	equ	0xFFF
 11676                           tosh	equ	0xFFE
 11677                           tosl	equ	0xFFD
 11678                           pclath	equ	0xFFA
 11679                           tblptru	equ	0xFF8
 11680                           tblptrh	equ	0xFF7
 11681                           tblptrl	equ	0xFF6
 11682                           tablat	equ	0xFF5
 11683                           prodh	equ	0xFF4
 11684                           prodl	equ	0xFF3
 11685                           intcon	equ	0xFF2
 11686                           intcon2	equ	0xFF1
 11687                           postinc0	equ	0xFEE
 11688                           plusw0	equ	0xFEB
 11689                           wreg	equ	0xFE8
 11690                           indf1	equ	0xFE7
 11691                           postdec1	equ	0xFE5
 11692                           fsr1h	equ	0xFE2
 11693                           fsr1l	equ	0xFE1
 11694                           indf2	equ	0xFDF
 11695                           postinc2	equ	0xFDE
 11696                           postdec2	equ	0xFDD
 11697                           plusw2	equ	0xFDB
 11698                           fsr2h	equ	0xFDA
 11699                           fsr2l	equ	0xFD9
 11700                           status	equ	0xFD8
 11701                           
 11702 ;; *************** function _SwSpi_Clk_Pin *****************
 11703 ;; Defined at:
 11704 ;;		line 142 in file "SwSpiApp.c"
 11705 ;; Parameters:    Size  Location     Type
 11706 ;;  phrType         1    wreg     enum E7559
 11707 ;;  cPinMode        1   23[COMRAM] unsigned char 
 11708 ;; Auto vars:     Size  Location     Type
 11709 ;;  phrType         1   24[COMRAM] enum E7559
 11710 ;; Return value:  Size  Location     Type
 11711 ;;                  1    wreg      void 
 11712 ;; Registers used:
 11713 ;;		wreg, status,2, status,0
 11714 ;; Tracked objects:
 11715 ;;		On entry : 0/0
 11716 ;;		On exit  : 0/0
 11717 ;;		Unchanged: 0/0
 11718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11719 ;;      Params:         1       0       0       0       0       0       0
 11720 ;;      Locals:         1       0       0       0       0       0       0
 11721 ;;      Temps:          0       0       0       0       0       0       0
 11722 ;;      Totals:         2       0       0       0       0       0       0
 11723 ;;Total ram usage:        2 bytes
 11724 ;; Hardware stack levels used:    1
 11725 ;; Hardware stack levels required when called:    3
 11726 ;; This function calls:
 11727 ;;		Nothing
 11728 ;; This function is called by:
 11729 ;;		_SWSPI_DAC_send_bits
 11730 ;;		_SWSPI_Synth_send_bits
 11731 ;;		_SwSpi_Synth_Toggle_Clock
 11732 ;; This function uses a non-reentrant model
 11733 ;;
 11734                           
 11735                           	psect	text77
 11736  002E1A                     __ptext77:
 11737                           	opt stack 0
 11738  002E1A                     _SwSpi_Clk_Pin:
 11739                           	opt stack 22
 11740                           
 11741                           ;incstack = 0
 11742                           ;SwSpi_Clk_Pin@phrType stored from wreg
 11743  002E1A  6E19               	movwf	SwSpi_Clk_Pin@phrType,c
 11744                           
 11745                           ;SwSpiApp.c: 144: switch(phrType)
 11746  002E1C  D01E               	goto	l639
 11747  002E1E                     
 11748                           ;SwSpiApp.c: 147: if(cPinMode == 1)
 11749  002E1E  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 11750  002E20  A4D8               	btfss	status,2,c
 11751  002E22  D002               	goto	l641
 11752                           
 11753                           ;SwSpiApp.c: 148: {
 11754                           ;SwSpiApp.c: 149: do { LATCbits.LATC3 = 1; } while(0);
 11755  002E24  868B               	bsf	3979,3,c	;volatile
 11756                           
 11757                           ;SwSpiApp.c: 150: }
 11758  002E26  0012               	return	
 11759  002E28                     l641:
 11760                           
 11761                           ;SwSpiApp.c: 151: else if (cPinMode == 0)
 11762  002E28  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 11763  002E2A  A4D8               	btfss	status,2,c
 11764  002E2C  0012               	return	
 11765                           
 11766                           ;SwSpiApp.c: 152: {
 11767                           ;SwSpiApp.c: 153: do { LATCbits.LATC3 = 0; } while(0);
 11768  002E2E  968B               	bcf	3979,3,c	;volatile
 11769                           
 11770                           ;SwSpiApp.c: 154: }
 11771                           ;SwSpiApp.c: 155: break;
 11772  002E30  0012               	return	
 11773  002E32                     
 11774                           ;SwSpiApp.c: 158: if(cPinMode == 1)
 11775  002E32  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 11776  002E34  A4D8               	btfss	status,2,c
 11777  002E36  D002               	goto	l650
 11778                           
 11779                           ;SwSpiApp.c: 159: {
 11780                           ;SwSpiApp.c: 160: do { LATCbits.LATC4 = 1; } while(0);
 11781  002E38  888B               	bsf	3979,4,c	;volatile
 11782                           
 11783                           ;SwSpiApp.c: 161: }
 11784  002E3A  0012               	return	
 11785  002E3C                     l650:
 11786                           
 11787                           ;SwSpiApp.c: 162: else if (cPinMode == 0)
 11788  002E3C  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 11789  002E3E  A4D8               	btfss	status,2,c
 11790  002E40  0012               	return	
 11791                           
 11792                           ;SwSpiApp.c: 163: {
 11793                           ;SwSpiApp.c: 164: do { LATCbits.LATC4 = 0; } while(0);
 11794  002E42  988B               	bcf	3979,4,c	;volatile
 11795                           
 11796                           ;SwSpiApp.c: 165: }
 11797                           ;SwSpiApp.c: 167: break;
 11798  002E44  0012               	return	
 11799  002E46                     
 11800                           ;SwSpiApp.c: 170: if(cPinMode == 1)
 11801  002E46  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 11802  002E48  A4D8               	btfss	status,2,c
 11803  002E4A  D002               	goto	l658
 11804                           
 11805                           ;SwSpiApp.c: 171: {
 11806                           ;SwSpiApp.c: 172: do { LATAbits.LATA3 = 1; } while(0);
 11807  002E4C  8689               	bsf	3977,3,c	;volatile
 11808                           
 11809                           ;SwSpiApp.c: 173: }
 11810  002E4E  0012               	return	
 11811  002E50                     l658:
 11812                           
 11813                           ;SwSpiApp.c: 174: else if (cPinMode == 0)
 11814  002E50  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 11815  002E52  A4D8               	btfss	status,2,c
 11816  002E54  0012               	return	
 11817                           
 11818                           ;SwSpiApp.c: 175: {
 11819                           ;SwSpiApp.c: 176: do { LATAbits.LATA3 = 0; } while(0);
 11820  002E56  9689               	bcf	3977,3,c	;volatile
 11821                           
 11822                           ;SwSpiApp.c: 179: }
 11823                           
 11824                           ;SwSpiApp.c: 177: }
 11825                           ;SwSpiApp.c: 178: break;
 11826  002E58  0012               	return	
 11827  002E5A                     l639:
 11828  002E5A  5019               	movf	SwSpi_Clk_Pin@phrType,w,c
 11829                           
 11830                           ; Switch size 1, requested type "space"
 11831                           ; Number of cases is 3, Range of values is 0 to 2
 11832                           ; switch strategies available:
 11833                           ; Name         Instructions Cycles
 11834                           ; simple_byte           10     6 (average)
 11835                           ;	Chosen strategy is simple_byte
 11836  002E5C  0A00               	xorlw	0	; case 0
 11837  002E5E  B4D8               	btfsc	status,2,c
 11838  002E60  D7DE               	goto	l640
 11839  002E62  0A01               	xorlw	1	; case 1
 11840  002E64  B4D8               	btfsc	status,2,c
 11841  002E66  D7E5               	goto	l649
 11842  002E68  0A03               	xorlw	3	; case 2
 11843  002E6A  A4D8               	btfss	status,2,c
 11844  002E6C  0012               	return	
 11845  002E6E  D7EB               	goto	l657
 11846  002E70                     __end_of_SwSpi_Clk_Pin:
 11847                           	opt stack 0
 11848                           tosu	equ	0xFFF
 11849                           tosh	equ	0xFFE
 11850                           tosl	equ	0xFFD
 11851                           pclath	equ	0xFFA
 11852                           tblptru	equ	0xFF8
 11853                           tblptrh	equ	0xFF7
 11854                           tblptrl	equ	0xFF6
 11855                           tablat	equ	0xFF5
 11856                           prodh	equ	0xFF4
 11857                           prodl	equ	0xFF3
 11858                           intcon	equ	0xFF2
 11859                           intcon2	equ	0xFF1
 11860                           postinc0	equ	0xFEE
 11861                           plusw0	equ	0xFEB
 11862                           wreg	equ	0xFE8
 11863                           indf1	equ	0xFE7
 11864                           postdec1	equ	0xFE5
 11865                           fsr1h	equ	0xFE2
 11866                           fsr1l	equ	0xFE1
 11867                           indf2	equ	0xFDF
 11868                           postinc2	equ	0xFDE
 11869                           postdec2	equ	0xFDD
 11870                           plusw2	equ	0xFDB
 11871                           fsr2h	equ	0xFDA
 11872                           fsr2l	equ	0xFD9
 11873                           status	equ	0xFD8
 11874                           
 11875 ;; *************** function _ReadIntFromEeprom *****************
 11876 ;; Defined at:
 11877 ;;		line 118 in file "SystemCommon.c"
 11878 ;; Parameters:    Size  Location     Type
 11879 ;;  address         1    wreg     unsigned char 
 11880 ;;  numOfByes       2   83[BANK0 ] int 
 11881 ;; Auto vars:     Size  Location     Type
 11882 ;;  address         1   10[BANK1 ] unsigned char 
 11883 ;;  base            4    0[BANK1 ] unsigned long 
 11884 ;;  idx             1   15[BANK1 ] unsigned char 
 11885 ;;  retVal          4   11[BANK1 ] unsigned long 
 11886 ;; Return value:  Size  Location     Type
 11887 ;;                  4   83[BANK0 ] unsigned long 
 11888 ;; Registers used:
 11889 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11890 ;; Tracked objects:
 11891 ;;		On entry : 0/0
 11892 ;;		On exit  : 0/0
 11893 ;;		Unchanged: 0/0
 11894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11895 ;;      Params:         0       4       0       0       0       0       0
 11896 ;;      Locals:         0       0      16       0       0       0       0
 11897 ;;      Temps:          0       3       0       0       0       0       0
 11898 ;;      Totals:         0       7      16       0       0       0       0
 11899 ;;Total ram usage:       23 bytes
 11900 ;; Hardware stack levels used:    1
 11901 ;; Hardware stack levels required when called:    8
 11902 ;; This function calls:
 11903 ;;		_EepromRead
 11904 ;;		___awtoft
 11905 ;;		___fttol
 11906 ;;		___lmul
 11907 ;;		_pow
 11908 ;; This function is called by:
 11909 ;;		_DacInit
 11910 ;; This function uses a non-reentrant model
 11911 ;;
 11912                           
 11913                           	psect	text78
 11914  001686                     __ptext78:
 11915                           	opt stack 0
 11916  001686                     _ReadIntFromEeprom:
 11917                           	opt stack 20
 11918                           
 11919                           ;incstack = 0
 11920                           ;ReadIntFromEeprom@address stored from wreg
 11921  001686  0101               	movlb	1	; () banked
 11922  001688  6FCC               	movwf	ReadIntFromEeprom@address& (0+255),b
 11923                           
 11924                           ;SystemCommon.c: 120: uint32_t retVal = 0x00;
 11925  00168A  0E00               	movlw	0
 11926  00168C  0101               	movlb	1	; () banked
 11927  00168E  6FCD               	movwf	ReadIntFromEeprom@retVal& (0+255),b
 11928  001690  0E00               	movlw	0
 11929  001692  6FCE               	movwf	(ReadIntFromEeprom@retVal+1)& (0+255),b
 11930  001694  0E00               	movlw	0
 11931  001696  6FCF               	movwf	(ReadIntFromEeprom@retVal+2)& (0+255),b
 11932  001698  0E00               	movlw	0
 11933  00169A  6FD0               	movwf	(ReadIntFromEeprom@retVal+3)& (0+255),b
 11934                           
 11935                           ; BSR set to: 1
 11936                           ;SystemCommon.c: 121: address -= numOfByes;
 11937  00169C  0100               	movlb	0	; () banked
 11938  00169E  51B3               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 11939  0016A0  0101               	movlb	1	; () banked
 11940  0016A2  5FCC               	subwf	ReadIntFromEeprom@address& (0+255),f,b
 11941                           
 11942                           ; BSR set to: 1
 11943                           ;SystemCommon.c: 123: for(uint8_t idx = 0; idx < numOfByes; idx++)
 11944  0016A4  0E00               	movlw	0
 11945  0016A6  6FD1               	movwf	ReadIntFromEeprom@idx& (0+255),b
 11946  0016A8  D06F               	goto	l1329
 11947  0016AA                     
 11948                           ;SystemCommon.c: 124: {
 11949                           ;SystemCommon.c: 125: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 11950                           
 11951                           ; BSR set to: 1
 11952  0016AA  0101               	movlb	1	; () banked
 11953  0016AC  51D1               	movf	ReadIntFromEeprom@idx& (0+255),w,b
 11954  0016AE  0100               	movlb	0	; () banked
 11955  0016B0  6FB7               	movwf	??_ReadIntFromEeprom& (0+255),b
 11956  0016B2  6BB8               	clrf	(??_ReadIntFromEeprom+1)& (0+255),b
 11957  0016B4  0E01               	movlw	1
 11958  0016B6  27B7               	addwf	??_ReadIntFromEeprom& (0+255),f,b
 11959  0016B8  0E00               	movlw	0
 11960  0016BA  23B8               	addwfc	(??_ReadIntFromEeprom+1)& (0+255),f,b
 11961  0016BC  1FB7               	comf	??_ReadIntFromEeprom& (0+255),f,b
 11962  0016BE  1FB8               	comf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 11963  0016C0  4BB7               	infsnz	??_ReadIntFromEeprom& (0+255),f,b
 11964  0016C2  2BB8               	incf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 11965  0016C4  51B3               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 11966  0016C6  27B7               	addwf	??_ReadIntFromEeprom& (0+255),f,b
 11967  0016C8  51B4               	movf	(ReadIntFromEeprom@numOfByes+1)& (0+255),w,b
 11968  0016CA  23B8               	addwfc	(??_ReadIntFromEeprom+1)& (0+255),f,b
 11969  0016CC  90D8               	bcf	status,0,c
 11970  0016CE  37B7               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 11971  0016D0  37B8               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 11972  0016D2  90D8               	bcf	status,0,c
 11973  0016D4  37B7               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 11974  0016D6  37B8               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 11975  0016D8  90D8               	bcf	status,0,c
 11976  0016DA  37B7               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 11977  0016DC  37B8               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 11978  0016DE  C0B7  F020         	movff	??_ReadIntFromEeprom,___awtoft@c
 11979  0016E2  C0B8  F021         	movff	??_ReadIntFromEeprom+1,___awtoft@c+1
 11980  0016E6  EC8E  F019         	call	___awtoft	;wreg free
 11981  0016EA  C020  F1C6         	movff	?___awtoft,_ReadIntFromEeprom$3314
 11982  0016EE  C021  F1C7         	movff	?___awtoft+1,_ReadIntFromEeprom$3314+1
 11983  0016F2  C022  F1C8         	movff	?___awtoft+2,_ReadIntFromEeprom$3314+2
 11984                           
 11985                           ;SystemCommon.c: 124: {
 11986                           ;SystemCommon.c: 125: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 11987  0016F6  C1C6  F0A5         	movff	_ReadIntFromEeprom$3314,pow@y
 11988  0016FA  C1C7  F0A6         	movff	_ReadIntFromEeprom$3314+1,pow@y+1
 11989  0016FE  C1C8  F0A7         	movff	_ReadIntFromEeprom$3314+2,pow@y+2
 11990  001702  0E00               	movlw	0
 11991  001704  0100               	movlb	0	; () banked
 11992  001706  6FA2               	movwf	pow@x& (0+255),b
 11993  001708  0E00               	movlw	0
 11994  00170A  6FA3               	movwf	(pow@x+1)& (0+255),b
 11995  00170C  0E40               	movlw	64
 11996  00170E  6FA4               	movwf	(pow@x+2)& (0+255),b
 11997  001710  EC85  F00A         	call	_pow	;wreg free
 11998  001714  C0A2  F1C9         	movff	?_pow,_ReadIntFromEeprom$3315
 11999  001718  C0A3  F1CA         	movff	?_pow+1,_ReadIntFromEeprom$3315+1
 12000  00171C  C0A4  F1CB         	movff	?_pow+2,_ReadIntFromEeprom$3315+2
 12001                           
 12002                           ;SystemCommon.c: 124: {
 12003                           ;SystemCommon.c: 125: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 12004  001720  C1C9  F078         	movff	_ReadIntFromEeprom$3315,___fttol@f1
 12005  001724  C1CA  F079         	movff	_ReadIntFromEeprom$3315+1,___fttol@f1+1
 12006  001728  C1CB  F07A         	movff	_ReadIntFromEeprom$3315+2,___fttol@f1+2
 12007  00172C  EC75  F00D         	call	___fttol	;wreg free
 12008  001730  C078  F1C2         	movff	?___fttol,ReadIntFromEeprom@base
 12009  001734  C079  F1C3         	movff	?___fttol+1,ReadIntFromEeprom@base+1
 12010  001738  C07A  F1C4         	movff	?___fttol+2,ReadIntFromEeprom@base+2
 12011  00173C  C07B  F1C5         	movff	?___fttol+3,ReadIntFromEeprom@base+3
 12012                           
 12013                           ;SystemCommon.c: 126: retVal = retVal | EepromRead(address + idx) * base;
 12014  001740  0101               	movlb	1	; () banked
 12015  001742  51CC               	movf	ReadIntFromEeprom@address& (0+255),w,b
 12016  001744  25D1               	addwf	ReadIntFromEeprom@idx& (0+255),w,b
 12017  001746  ECA5  F01C         	call	_EepromRead
 12018  00174A  0100               	movlb	0	; () banked
 12019  00174C  6FB7               	movwf	??_ReadIntFromEeprom& (0+255),b
 12020  00174E  51B7               	movf	??_ReadIntFromEeprom& (0+255),w,b
 12021  001750  6E1A               	movwf	___lmul@multiplier,c
 12022  001752  6A1B               	clrf	___lmul@multiplier+1,c
 12023  001754  6A1C               	clrf	___lmul@multiplier+2,c
 12024  001756  6A1D               	clrf	___lmul@multiplier+3,c
 12025  001758  C1C2  F01E         	movff	ReadIntFromEeprom@base,___lmul@multiplicand
 12026  00175C  C1C3  F01F         	movff	ReadIntFromEeprom@base+1,___lmul@multiplicand+1
 12027  001760  C1C4  F020         	movff	ReadIntFromEeprom@base+2,___lmul@multiplicand+2
 12028  001764  C1C5  F021         	movff	ReadIntFromEeprom@base+3,___lmul@multiplicand+3
 12029  001768  EC38  F017         	call	___lmul	;wreg free
 12030  00176C  0101               	movlb	1	; () banked
 12031  00176E  51CD               	movf	ReadIntFromEeprom@retVal& (0+255),w,b
 12032  001770  101A               	iorwf	?___lmul,w,c
 12033  001772  6FCD               	movwf	ReadIntFromEeprom@retVal& (0+255),b
 12034  001774  51CE               	movf	(ReadIntFromEeprom@retVal+1)& (0+255),w,b
 12035  001776  101B               	iorwf	?___lmul+1,w,c
 12036  001778  6FCE               	movwf	(ReadIntFromEeprom@retVal+1)& (0+255),b
 12037  00177A  51CF               	movf	(ReadIntFromEeprom@retVal+2)& (0+255),w,b
 12038  00177C  101C               	iorwf	?___lmul+2,w,c
 12039  00177E  6FCF               	movwf	(ReadIntFromEeprom@retVal+2)& (0+255),b
 12040  001780  51D0               	movf	(ReadIntFromEeprom@retVal+3)& (0+255),w,b
 12041  001782  101D               	iorwf	?___lmul+3,w,c
 12042  001784  6FD0               	movwf	(ReadIntFromEeprom@retVal+3)& (0+255),b
 12043                           
 12044                           ; BSR set to: 1
 12045  001786  2BD1               	incf	ReadIntFromEeprom@idx& (0+255),f,b
 12046  001788                     l1329:
 12047                           
 12048                           ; BSR set to: 1
 12049                           
 12050                           ; BSR set to: 1
 12051  001788  51D1               	movf	ReadIntFromEeprom@idx& (0+255),w,b
 12052  00178A  0100               	movlb	0	; () banked
 12053  00178C  6FB7               	movwf	??_ReadIntFromEeprom& (0+255),b
 12054  00178E  6BB8               	clrf	(??_ReadIntFromEeprom+1)& (0+255),b
 12055  001790  51B3               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 12056  001792  5DB7               	subwf	??_ReadIntFromEeprom& (0+255),w,b
 12057  001794  51B8               	movf	(??_ReadIntFromEeprom+1)& (0+255),w,b
 12058  001796  0A80               	xorlw	128
 12059  001798  6FB9               	movwf	(??_ReadIntFromEeprom+2)& (0+255),b
 12060  00179A  51B4               	movf	(ReadIntFromEeprom@numOfByes+1)& (0+255),w,b
 12061  00179C  0A80               	xorlw	128
 12062  00179E  59B9               	subwfb	(??_ReadIntFromEeprom+2)& (0+255),w,b
 12063  0017A0  A0D8               	btfss	status,0,c
 12064  0017A2  D783               	goto	l1330
 12065                           
 12066                           ; BSR set to: 0
 12067                           ;SystemCommon.c: 127: }
 12068                           ;SystemCommon.c: 128: return retVal;
 12069  0017A4  C1CD  F0B3         	movff	ReadIntFromEeprom@retVal,?_ReadIntFromEeprom
 12070  0017A8  C1CE  F0B4         	movff	ReadIntFromEeprom@retVal+1,?_ReadIntFromEeprom+1
 12071  0017AC  C1CF  F0B5         	movff	ReadIntFromEeprom@retVal+2,?_ReadIntFromEeprom+2
 12072  0017B0  C1D0  F0B6         	movff	ReadIntFromEeprom@retVal+3,?_ReadIntFromEeprom+3
 12073                           
 12074                           ; BSR set to: 0
 12075  0017B4  0012               	return		;funcret
 12076  0017B6                     __end_of_ReadIntFromEeprom:
 12077                           	opt stack 0
 12078                           tosu	equ	0xFFF
 12079                           tosh	equ	0xFFE
 12080                           tosl	equ	0xFFD
 12081                           pclath	equ	0xFFA
 12082                           tblptru	equ	0xFF8
 12083                           tblptrh	equ	0xFF7
 12084                           tblptrl	equ	0xFF6
 12085                           tablat	equ	0xFF5
 12086                           prodh	equ	0xFF4
 12087                           prodl	equ	0xFF3
 12088                           intcon	equ	0xFF2
 12089                           intcon2	equ	0xFF1
 12090                           postinc0	equ	0xFEE
 12091                           plusw0	equ	0xFEB
 12092                           wreg	equ	0xFE8
 12093                           indf1	equ	0xFE7
 12094                           postdec1	equ	0xFE5
 12095                           fsr1h	equ	0xFE2
 12096                           fsr1l	equ	0xFE1
 12097                           indf2	equ	0xFDF
 12098                           postinc2	equ	0xFDE
 12099                           postdec2	equ	0xFDD
 12100                           plusw2	equ	0xFDB
 12101                           fsr2h	equ	0xFDA
 12102                           fsr2l	equ	0xFD9
 12103                           status	equ	0xFD8
 12104                           
 12105 ;; *************** function ___lmul *****************
 12106 ;; Defined at:
 12107 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 12108 ;; Parameters:    Size  Location     Type
 12109 ;;  multiplier      4   25[COMRAM] unsigned long 
 12110 ;;  multiplicand    4   29[COMRAM] unsigned long 
 12111 ;; Auto vars:     Size  Location     Type
 12112 ;;  product         4   33[COMRAM] unsigned long 
 12113 ;; Return value:  Size  Location     Type
 12114 ;;                  4   25[COMRAM] unsigned long 
 12115 ;; Registers used:
 12116 ;;		wreg, status,2, status,0
 12117 ;; Tracked objects:
 12118 ;;		On entry : 0/0
 12119 ;;		On exit  : 0/0
 12120 ;;		Unchanged: 0/0
 12121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12122 ;;      Params:         8       0       0       0       0       0       0
 12123 ;;      Locals:         4       0       0       0       0       0       0
 12124 ;;      Temps:          0       0       0       0       0       0       0
 12125 ;;      Totals:        12       0       0       0       0       0       0
 12126 ;;Total ram usage:       12 bytes
 12127 ;; Hardware stack levels used:    1
 12128 ;; Hardware stack levels required when called:    3
 12129 ;; This function calls:
 12130 ;;		Nothing
 12131 ;; This function is called by:
 12132 ;;		_ReadIntFromEeprom
 12133 ;;		_strtol
 12134 ;; This function uses a non-reentrant model
 12135 ;;
 12136                           
 12137                           	psect	text79
 12138  002E70                     __ptext79:
 12139                           	opt stack 0
 12140  002E70                     ___lmul:
 12141                           	opt stack 22
 12142                           
 12143                           ; BSR set to: 0
 12144                           ;incstack = 0
 12145  002E70  0E00               	movlw	0
 12146  002E72  6E22               	movwf	___lmul@product,c
 12147  002E74  0E00               	movlw	0
 12148  002E76  6E23               	movwf	___lmul@product+1,c
 12149  002E78  0E00               	movlw	0
 12150  002E7A  6E24               	movwf	___lmul@product+2,c
 12151  002E7C  0E00               	movlw	0
 12152  002E7E  6E25               	movwf	___lmul@product+3,c
 12153  002E80  A01A               	btfss	___lmul@multiplier,0,c
 12154  002E82  D008               	goto	l1474
 12155  002E84  501E               	movf	___lmul@multiplicand,w,c
 12156  002E86  2622               	addwf	___lmul@product,f,c
 12157  002E88  501F               	movf	___lmul@multiplicand+1,w,c
 12158  002E8A  2223               	addwfc	___lmul@product+1,f,c
 12159  002E8C  5020               	movf	___lmul@multiplicand+2,w,c
 12160  002E8E  2224               	addwfc	___lmul@product+2,f,c
 12161  002E90  5021               	movf	___lmul@multiplicand+3,w,c
 12162  002E92  2225               	addwfc	___lmul@product+3,f,c
 12163  002E94                     l1474:
 12164  002E94  90D8               	bcf	status,0,c
 12165  002E96  361E               	rlcf	___lmul@multiplicand,f,c
 12166  002E98  361F               	rlcf	___lmul@multiplicand+1,f,c
 12167  002E9A  3620               	rlcf	___lmul@multiplicand+2,f,c
 12168  002E9C  3621               	rlcf	___lmul@multiplicand+3,f,c
 12169  002E9E  90D8               	bcf	status,0,c
 12170  002EA0  321D               	rrcf	___lmul@multiplier+3,f,c
 12171  002EA2  321C               	rrcf	___lmul@multiplier+2,f,c
 12172  002EA4  321B               	rrcf	___lmul@multiplier+1,f,c
 12173  002EA6  321A               	rrcf	___lmul@multiplier,f,c
 12174  002EA8  501A               	movf	___lmul@multiplier,w,c
 12175  002EAA  101B               	iorwf	___lmul@multiplier+1,w,c
 12176  002EAC  101C               	iorwf	___lmul@multiplier+2,w,c
 12177  002EAE  101D               	iorwf	___lmul@multiplier+3,w,c
 12178  002EB0  A4D8               	btfss	status,2,c
 12179  002EB2  D7E6               	goto	l1473
 12180  002EB4  C022  F01A         	movff	___lmul@product,?___lmul
 12181  002EB8  C023  F01B         	movff	___lmul@product+1,?___lmul+1
 12182  002EBC  C024  F01C         	movff	___lmul@product+2,?___lmul+2
 12183  002EC0  C025  F01D         	movff	___lmul@product+3,?___lmul+3
 12184  002EC4  0012               	return		;funcret
 12185  002EC6                     __end_of___lmul:
 12186                           	opt stack 0
 12187                           tosu	equ	0xFFF
 12188                           tosh	equ	0xFFE
 12189                           tosl	equ	0xFFD
 12190                           pclath	equ	0xFFA
 12191                           tblptru	equ	0xFF8
 12192                           tblptrh	equ	0xFF7
 12193                           tblptrl	equ	0xFF6
 12194                           tablat	equ	0xFF5
 12195                           prodh	equ	0xFF4
 12196                           prodl	equ	0xFF3
 12197                           intcon	equ	0xFF2
 12198                           intcon2	equ	0xFF1
 12199                           postinc0	equ	0xFEE
 12200                           plusw0	equ	0xFEB
 12201                           wreg	equ	0xFE8
 12202                           indf1	equ	0xFE7
 12203                           postdec1	equ	0xFE5
 12204                           fsr1h	equ	0xFE2
 12205                           fsr1l	equ	0xFE1
 12206                           indf2	equ	0xFDF
 12207                           postinc2	equ	0xFDE
 12208                           postdec2	equ	0xFDD
 12209                           plusw2	equ	0xFDB
 12210                           fsr2h	equ	0xFDA
 12211                           fsr2l	equ	0xFD9
 12212                           status	equ	0xFD8
 12213                           
 12214 ;; *************** function _EepromRead *****************
 12215 ;; Defined at:
 12216 ;;		line 215 in file "FlashApp.c"
 12217 ;; Parameters:    Size  Location     Type
 12218 ;;  address         1    wreg     unsigned char 
 12219 ;; Auto vars:     Size  Location     Type
 12220 ;;  address         1   24[COMRAM] unsigned char 
 12221 ;; Return value:  Size  Location     Type
 12222 ;;                  1    wreg      unsigned char 
 12223 ;; Registers used:
 12224 ;;		wreg, status,2, cstack
 12225 ;; Tracked objects:
 12226 ;;		On entry : 0/0
 12227 ;;		On exit  : 0/0
 12228 ;;		Unchanged: 0/0
 12229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12230 ;;      Params:         0       0       0       0       0       0       0
 12231 ;;      Locals:         1       0       0       0       0       0       0
 12232 ;;      Temps:          0       0       0       0       0       0       0
 12233 ;;      Totals:         1       0       0       0       0       0       0
 12234 ;;Total ram usage:        1 bytes
 12235 ;; Hardware stack levels used:    1
 12236 ;; Hardware stack levels required when called:    4
 12237 ;; This function calls:
 12238 ;;		_DATAEE_ReadByte
 12239 ;; This function is called by:
 12240 ;;		_ReadIntFromEeprom
 12241 ;; This function uses a non-reentrant model
 12242 ;;
 12243                           
 12244                           	psect	text80
 12245  00394A                     __ptext80:
 12246                           	opt stack 0
 12247  00394A                     _EepromRead:
 12248                           	opt stack 23
 12249                           
 12250                           ;incstack = 0
 12251                           ;EepromRead@address stored from wreg
 12252  00394A  6E19               	movwf	EepromRead@address,c
 12253                           
 12254                           ;FlashApp.c: 217: return DATAEE_ReadByte(address);
 12255  00394C  5019               	movf	EepromRead@address,w,c
 12256  00394E  EC2D  F01C         	call	_DATAEE_ReadByte
 12257  003952  0012               	return	
 12258  003954                     __end_of_EepromRead:
 12259                           	opt stack 0
 12260                           tosu	equ	0xFFF
 12261                           tosh	equ	0xFFE
 12262                           tosl	equ	0xFFD
 12263                           pclath	equ	0xFFA
 12264                           tblptru	equ	0xFF8
 12265                           tblptrh	equ	0xFF7
 12266                           tblptrl	equ	0xFF6
 12267                           tablat	equ	0xFF5
 12268                           prodh	equ	0xFF4
 12269                           prodl	equ	0xFF3
 12270                           intcon	equ	0xFF2
 12271                           intcon2	equ	0xFF1
 12272                           postinc0	equ	0xFEE
 12273                           plusw0	equ	0xFEB
 12274                           wreg	equ	0xFE8
 12275                           indf1	equ	0xFE7
 12276                           postdec1	equ	0xFE5
 12277                           fsr1h	equ	0xFE2
 12278                           fsr1l	equ	0xFE1
 12279                           indf2	equ	0xFDF
 12280                           postinc2	equ	0xFDE
 12281                           postdec2	equ	0xFDD
 12282                           plusw2	equ	0xFDB
 12283                           fsr2h	equ	0xFDA
 12284                           fsr2l	equ	0xFD9
 12285                           status	equ	0xFD8
 12286                           
 12287 ;; *************** function _DATAEE_ReadByte *****************
 12288 ;; Defined at:
 12289 ;;		line 194 in file "mcc_generated_files/memory.c"
 12290 ;; Parameters:    Size  Location     Type
 12291 ;;  bAdd            1    wreg     unsigned char 
 12292 ;; Auto vars:     Size  Location     Type
 12293 ;;  bAdd            1   23[COMRAM] unsigned char 
 12294 ;; Return value:  Size  Location     Type
 12295 ;;                  1    wreg      unsigned char 
 12296 ;; Registers used:
 12297 ;;		wreg, status,2
 12298 ;; Tracked objects:
 12299 ;;		On entry : 0/0
 12300 ;;		On exit  : 0/0
 12301 ;;		Unchanged: 0/0
 12302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12303 ;;      Params:         0       0       0       0       0       0       0
 12304 ;;      Locals:         1       0       0       0       0       0       0
 12305 ;;      Temps:          0       0       0       0       0       0       0
 12306 ;;      Totals:         1       0       0       0       0       0       0
 12307 ;;Total ram usage:        1 bytes
 12308 ;; Hardware stack levels used:    1
 12309 ;; Hardware stack levels required when called:    3
 12310 ;; This function calls:
 12311 ;;		Nothing
 12312 ;; This function is called by:
 12313 ;;		_EepromRead
 12314 ;;		_EepromTest
 12315 ;; This function uses a non-reentrant model
 12316 ;;
 12317                           
 12318                           	psect	text81
 12319  00385A                     __ptext81:
 12320                           	opt stack 0
 12321  00385A                     _DATAEE_ReadByte:
 12322                           	opt stack 23
 12323                           
 12324                           ;incstack = 0
 12325                           ;DATAEE_ReadByte@bAdd stored from wreg
 12326  00385A  6E18               	movwf	DATAEE_ReadByte@bAdd,c
 12327                           
 12328                           ;memory.c: 197: EEADR = (bAdd & 0xFF);
 12329  00385C  C018  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
 12330                           
 12331                           ;memory.c: 198: EECON1bits.CFGS = 0;
 12332  003860  9CA6               	bcf	4006,6,c	;volsfr
 12333                           
 12334                           ;memory.c: 199: EECON1bits.EEPGD = 0;
 12335  003862  9EA6               	bcf	4006,7,c	;volsfr
 12336                           
 12337                           ;memory.c: 200: EECON1bits.RD = 1;
 12338  003864  80A6               	bsf	4006,0,c	;volsfr
 12339                           
 12340                           ;memory.c: 201: __nop();
 12341  003866  F000               	nop	
 12342                           
 12343                           ;memory.c: 202: __nop();
 12344  003868  F000               	nop	
 12345                           
 12346                           ;memory.c: 204: return (EEDATA);
 12347  00386A  50A8               	movf	4008,w,c	;volatile
 12348  00386C  0012               	return	
 12349  00386E                     __end_of_DATAEE_ReadByte:
 12350                           	opt stack 0
 12351                           tosu	equ	0xFFF
 12352                           tosh	equ	0xFFE
 12353                           tosl	equ	0xFFD
 12354                           pclath	equ	0xFFA
 12355                           tblptru	equ	0xFF8
 12356                           tblptrh	equ	0xFF7
 12357                           tblptrl	equ	0xFF6
 12358                           tablat	equ	0xFF5
 12359                           prodh	equ	0xFF4
 12360                           prodl	equ	0xFF3
 12361                           intcon	equ	0xFF2
 12362                           intcon2	equ	0xFF1
 12363                           postinc0	equ	0xFEE
 12364                           plusw0	equ	0xFEB
 12365                           wreg	equ	0xFE8
 12366                           indf1	equ	0xFE7
 12367                           postdec1	equ	0xFE5
 12368                           fsr1h	equ	0xFE2
 12369                           fsr1l	equ	0xFE1
 12370                           indf2	equ	0xFDF
 12371                           postinc2	equ	0xFDE
 12372                           postdec2	equ	0xFDD
 12373                           plusw2	equ	0xFDB
 12374                           fsr2h	equ	0xFDA
 12375                           fsr2l	equ	0xFD9
 12376                           status	equ	0xFD8
 12377                           
 12378 ;; *************** function _ClearMcuRunTime *****************
 12379 ;; Defined at:
 12380 ;;		line 49 in file "SystemStatus.c"
 12381 ;; Parameters:    Size  Location     Type
 12382 ;;		None
 12383 ;; Auto vars:     Size  Location     Type
 12384 ;;		None
 12385 ;; Return value:  Size  Location     Type
 12386 ;;                  1    wreg      void 
 12387 ;; Registers used:
 12388 ;;		wreg, status,2
 12389 ;; Tracked objects:
 12390 ;;		On entry : 0/0
 12391 ;;		On exit  : 0/0
 12392 ;;		Unchanged: 0/0
 12393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12394 ;;      Params:         0       0       0       0       0       0       0
 12395 ;;      Locals:         0       0       0       0       0       0       0
 12396 ;;      Temps:          0       0       0       0       0       0       0
 12397 ;;      Totals:         0       0       0       0       0       0       0
 12398 ;;Total ram usage:        0 bytes
 12399 ;; Hardware stack levels used:    1
 12400 ;; Hardware stack levels required when called:    3
 12401 ;; This function calls:
 12402 ;;		Nothing
 12403 ;; This function is called by:
 12404 ;;		_InitSystemApplicationManagers
 12405 ;; This function uses a non-reentrant model
 12406 ;;
 12407                           
 12408                           	psect	text82
 12409  00386E                     __ptext82:
 12410                           	opt stack 0
 12411  00386E                     _ClearMcuRunTime:
 12412                           	opt stack 26
 12413                           
 12414                           ;SystemStatus.c: 51: mcuRunTimeIn5SecTicks = 0;
 12415                           
 12416                           ;incstack = 0
 12417  00386E  0E00               	movlw	0
 12418  003870  0100               	movlb	0	; () banked
 12419  003872  6FC0               	movwf	_mcuRunTimeIn5SecTicks& (0+255),b
 12420  003874  0E00               	movlw	0
 12421  003876  6FC1               	movwf	(_mcuRunTimeIn5SecTicks+1)& (0+255),b
 12422  003878  0E00               	movlw	0
 12423  00387A  6FC2               	movwf	(_mcuRunTimeIn5SecTicks+2)& (0+255),b
 12424  00387C  0E00               	movlw	0
 12425  00387E  6FC3               	movwf	(_mcuRunTimeIn5SecTicks+3)& (0+255),b
 12426                           
 12427                           ; BSR set to: 0
 12428  003880  0012               	return		;funcret
 12429  003882                     __end_of_ClearMcuRunTime:
 12430                           	opt stack 0
 12431                           tosu	equ	0xFFF
 12432                           tosh	equ	0xFFE
 12433                           tosl	equ	0xFFD
 12434                           pclath	equ	0xFFA
 12435                           tblptru	equ	0xFF8
 12436                           tblptrh	equ	0xFF7
 12437                           tblptrl	equ	0xFF6
 12438                           tablat	equ	0xFF5
 12439                           prodh	equ	0xFF4
 12440                           prodl	equ	0xFF3
 12441                           intcon	equ	0xFF2
 12442                           intcon2	equ	0xFF1
 12443                           postinc0	equ	0xFEE
 12444                           plusw0	equ	0xFEB
 12445                           wreg	equ	0xFE8
 12446                           indf1	equ	0xFE7
 12447                           postdec1	equ	0xFE5
 12448                           fsr1h	equ	0xFE2
 12449                           fsr1l	equ	0xFE1
 12450                           indf2	equ	0xFDF
 12451                           postinc2	equ	0xFDE
 12452                           postdec2	equ	0xFDD
 12453                           plusw2	equ	0xFDB
 12454                           fsr2h	equ	0xFDA
 12455                           fsr2l	equ	0xFD9
 12456                           status	equ	0xFD8
 12457                           
 12458 ;; *************** function _CheckFlashPrecentage *****************
 12459 ;; Defined at:
 12460 ;;		line 205 in file "FlashApp.c"
 12461 ;; Parameters:    Size  Location     Type
 12462 ;;		None
 12463 ;; Auto vars:     Size  Location     Type
 12464 ;;  precentage      3   28[BANK0 ] void 
 12465 ;; Return value:  Size  Location     Type
 12466 ;;                  1    wreg      unsigned char 
 12467 ;; Registers used:
 12468 ;;		wreg, status,2, status,0, cstack
 12469 ;; Tracked objects:
 12470 ;;		On entry : 0/0
 12471 ;;		On exit  : 0/0
 12472 ;;		Unchanged: 0/0
 12473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12474 ;;      Params:         0       0       0       0       0       0       0
 12475 ;;      Locals:         0       3       0       0       0       0       0
 12476 ;;      Temps:          0       4       0       0       0       0       0
 12477 ;;      Totals:         0       7       0       0       0       0       0
 12478 ;;Total ram usage:        7 bytes
 12479 ;; Hardware stack levels used:    1
 12480 ;; Hardware stack levels required when called:    5
 12481 ;; This function calls:
 12482 ;;		___ftdiv
 12483 ;;		___ftge
 12484 ;;		___ftmul
 12485 ;;		___lltoft
 12486 ;; This function is called by:
 12487 ;;		_main
 12488 ;; This function uses a non-reentrant model
 12489 ;;
 12490                           
 12491                           	psect	text83
 12492  00229C                     __ptext83:
 12493                           	opt stack 0
 12494  00229C                     _CheckFlashPrecentage:
 12495                           	opt stack 25
 12496                           
 12497                           ;FlashApp.c: 207: double precentage = ((double)(0x7FF0 - writeAddress) / 0x7FF0) * 100;
 12498                           
 12499                           ; BSR set to: 0
 12500                           ;incstack = 0
 12501  00229C  0EE0               	movlw	224
 12502  00229E  6E2C               	movwf	___ftdiv@f2,c
 12503  0022A0  0EFF               	movlw	255
 12504  0022A2  6E2D               	movwf	___ftdiv@f2+1,c
 12505  0022A4  0E46               	movlw	70
 12506  0022A6  6E2E               	movwf	___ftdiv@f2+2,c
 12507  0022A8  C040  F078         	movff	_writeAddress,??_CheckFlashPrecentage
 12508  0022AC  C041  F079         	movff	_writeAddress+1,??_CheckFlashPrecentage+1
 12509  0022B0  C042  F07A         	movff	_writeAddress+2,??_CheckFlashPrecentage+2
 12510  0022B4  C043  F07B         	movff	_writeAddress+3,??_CheckFlashPrecentage+3
 12511  0022B8  0100               	movlb	0	; () banked
 12512  0022BA  1F78               	comf	??_CheckFlashPrecentage& (0+255),f,b
 12513  0022BC  1F79               	comf	(??_CheckFlashPrecentage+1)& (0+255),f,b
 12514  0022BE  1F7A               	comf	(??_CheckFlashPrecentage+2)& (0+255),f,b
 12515  0022C0  1F7B               	comf	(??_CheckFlashPrecentage+3)& (0+255),f,b
 12516  0022C2  2B78               	incf	??_CheckFlashPrecentage& (0+255),f,b
 12517  0022C4  0E00               	movlw	0
 12518  0022C6  2379               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),f,b
 12519  0022C8  237A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),f,b
 12520  0022CA  237B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),f,b
 12521  0022CC  0EF0               	movlw	240
 12522  0022CE  2578               	addwf	??_CheckFlashPrecentage& (0+255),w,b
 12523  0022D0  6E20               	movwf	___lltoft@c,c
 12524  0022D2  0E7F               	movlw	127
 12525  0022D4  2179               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),w,b
 12526  0022D6  6E21               	movwf	___lltoft@c+1,c
 12527  0022D8  0E00               	movlw	0
 12528  0022DA  217A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),w,b
 12529  0022DC  6E22               	movwf	___lltoft@c+2,c
 12530  0022DE  0E00               	movlw	0
 12531  0022E0  217B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),w,b
 12532  0022E2  6E23               	movwf	___lltoft@c+3,c
 12533  0022E4  EC5C  F016         	call	___lltoft	;wreg free
 12534  0022E8  C020  F029         	movff	?___lltoft,___ftdiv@f1
 12535  0022EC  C021  F02A         	movff	?___lltoft+1,___ftdiv@f1+1
 12536  0022F0  C022  F02B         	movff	?___lltoft+2,___ftdiv@f1+2
 12537  0022F4  EC6C  F00E         	call	___ftdiv	;wreg free
 12538  0022F8  C029  F069         	movff	?___ftdiv,___ftmul@f1
 12539  0022FC  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 12540  002300  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 12541  002304  0E00               	movlw	0
 12542  002306  0100               	movlb	0	; () banked
 12543  002308  6F6C               	movwf	___ftmul@f2& (0+255),b
 12544  00230A  0EC8               	movlw	200
 12545  00230C  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 12546  00230E  0E42               	movlw	66
 12547  002310  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 12548  002312  ECF1  F00D         	call	___ftmul	;wreg free
 12549  002316  C069  F07C         	movff	?___ftmul,CheckFlashPrecentage@precentage
 12550  00231A  C06A  F07D         	movff	?___ftmul+1,CheckFlashPrecentage@precentage+1
 12551  00231E  C06B  F07E         	movff	?___ftmul+2,CheckFlashPrecentage@precentage+2
 12552                           
 12553                           ;FlashApp.c: 208: return (precentage > 75) ? 1 : 0;
 12554  002322  0E00               	movlw	0
 12555  002324  6E18               	movwf	___ftge@ff1,c
 12556  002326  0E96               	movlw	150
 12557  002328  6E19               	movwf	___ftge@ff1+1,c
 12558  00232A  0E42               	movlw	66
 12559  00232C  6E1A               	movwf	___ftge@ff1+2,c
 12560  00232E  C07C  F01B         	movff	CheckFlashPrecentage@precentage,___ftge@ff2
 12561  002332  C07D  F01C         	movff	CheckFlashPrecentage@precentage+1,___ftge@ff2+1
 12562  002336  C07E  F01D         	movff	CheckFlashPrecentage@precentage+2,___ftge@ff2+2
 12563  00233A  ECBE  F013         	call	___ftge	;wreg free
 12564  00233E  B0D8               	btfsc	status,0,c
 12565  002340  D002               	goto	u8410
 12566  002342  0E01               	movlw	1
 12567  002344  0012               	return	
 12568  002346                     u8410:
 12569  002346  0E00               	movlw	0
 12570  002348  0012               	return	
 12571  00234A                     __end_of_CheckFlashPrecentage:
 12572                           	opt stack 0
 12573                           tosu	equ	0xFFF
 12574                           tosh	equ	0xFFE
 12575                           tosl	equ	0xFFD
 12576                           pclath	equ	0xFFA
 12577                           tblptru	equ	0xFF8
 12578                           tblptrh	equ	0xFF7
 12579                           tblptrl	equ	0xFF6
 12580                           tablat	equ	0xFF5
 12581                           prodh	equ	0xFF4
 12582                           prodl	equ	0xFF3
 12583                           intcon	equ	0xFF2
 12584                           intcon2	equ	0xFF1
 12585                           postinc0	equ	0xFEE
 12586                           plusw0	equ	0xFEB
 12587                           wreg	equ	0xFE8
 12588                           indf1	equ	0xFE7
 12589                           postdec1	equ	0xFE5
 12590                           fsr1h	equ	0xFE2
 12591                           fsr1l	equ	0xFE1
 12592                           indf2	equ	0xFDF
 12593                           postinc2	equ	0xFDE
 12594                           postdec2	equ	0xFDD
 12595                           plusw2	equ	0xFDB
 12596                           fsr2h	equ	0xFDA
 12597                           fsr2l	equ	0xFD9
 12598                           status	equ	0xFD8
 12599                           
 12600 ;; *************** function _BlinkOkLeds *****************
 12601 ;; Defined at:
 12602 ;;		line 24 in file "LedsApp.c"
 12603 ;; Parameters:    Size  Location     Type
 12604 ;;  state           1    wreg     enum E7575
 12605 ;; Auto vars:     Size  Location     Type
 12606 ;;  state           1   26[COMRAM] enum E7575
 12607 ;;  idx             2   27[COMRAM] int 
 12608 ;; Return value:  Size  Location     Type
 12609 ;;                  1    wreg      void 
 12610 ;; Registers used:
 12611 ;;		wreg, status,2, status,0
 12612 ;; Tracked objects:
 12613 ;;		On entry : 0/0
 12614 ;;		On exit  : 0/0
 12615 ;;		Unchanged: 0/0
 12616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12617 ;;      Params:         0       0       0       0       0       0       0
 12618 ;;      Locals:         3       0       0       0       0       0       0
 12619 ;;      Temps:          3       0       0       0       0       0       0
 12620 ;;      Totals:         6       0       0       0       0       0       0
 12621 ;;Total ram usage:        6 bytes
 12622 ;; Hardware stack levels used:    1
 12623 ;; Hardware stack levels required when called:    3
 12624 ;; This function calls:
 12625 ;;		Nothing
 12626 ;; This function is called by:
 12627 ;;		_main
 12628 ;; This function uses a non-reentrant model
 12629 ;;
 12630                           
 12631                           	psect	text84
 12632  002BA0                     __ptext84:
 12633                           	opt stack 0
 12634  002BA0                     _BlinkOkLeds:
 12635                           	opt stack 27
 12636                           
 12637                           ;incstack = 0
 12638                           ;BlinkOkLeds@state stored from wreg
 12639  002BA0  6E1B               	movwf	BlinkOkLeds@state,c
 12640                           
 12641                           ;LedsApp.c: 26: for(int idx = 0; idx < state; idx++)
 12642  002BA2  0E00               	movlw	0
 12643  002BA4  6E1D               	movwf	BlinkOkLeds@idx+1,c
 12644  002BA6  0E00               	movlw	0
 12645  002BA8  6E1C               	movwf	BlinkOkLeds@idx,c
 12646  002BAA                     l6114:
 12647  002BAA  501B               	movf	BlinkOkLeds@state,w,c
 12648  002BAC  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 12649  002BAE  6A19               	clrf	(??_BlinkOkLeds+1)& (0+255),c
 12650  002BB0  5018               	movf	??_BlinkOkLeds,w,c
 12651  002BB2  5C1C               	subwf	BlinkOkLeds@idx,w,c
 12652  002BB4  501D               	movf	BlinkOkLeds@idx+1,w,c
 12653  002BB6  0A80               	xorlw	128
 12654  002BB8  6E1A               	movwf	(??_BlinkOkLeds+2)& (0+255),c
 12655  002BBA  5019               	movf	??_BlinkOkLeds+1,w,c
 12656  002BBC  0A80               	xorlw	128
 12657  002BBE  581A               	subwfb	(??_BlinkOkLeds+2)& (0+255),w,c
 12658  002BC0  B0D8               	btfsc	status,0,c
 12659  002BC2  0012               	return	
 12660                           
 12661                           ;LedsApp.c: 27: {
 12662                           ;LedsApp.c: 28: LATCbits.LATC0 = 0;
 12663  002BC4  908B               	bcf	3979,0,c	;volatile
 12664                           
 12665                           ;LedsApp.c: 29: _delay((unsigned long)((100)*(8000000/4000.0)));
 12666  002BC6  0E02               	movlw	2
 12667  002BC8  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 12668  002BCA  0E04               	movlw	4
 12669  002BCC  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 12670  002BCE  0EBA               	movlw	186
 12671  002BD0                     u8617:
 12672  002BD0  2EE8               	decfsz	wreg,f,c
 12673  002BD2  D7FE               	bra	u8617
 12674  002BD4  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 12675  002BD6  D7FC               	bra	u8617
 12676  002BD8  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 12677  002BDA  D7FA               	bra	u8617
 12678  002BDC  D000               	nop2	
 12679                           
 12680                           ;LedsApp.c: 30: LATCbits.LATC0 = 1;
 12681  002BDE  808B               	bsf	3979,0,c	;volatile
 12682                           
 12683                           ;LedsApp.c: 31: _delay((unsigned long)((100)*(8000000/4000.0)));
 12684  002BE0  0E02               	movlw	2
 12685  002BE2  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 12686  002BE4  0E04               	movlw	4
 12687  002BE6  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 12688  002BE8  0EBA               	movlw	186
 12689  002BEA                     u8627:
 12690  002BEA  2EE8               	decfsz	wreg,f,c
 12691  002BEC  D7FE               	bra	u8627
 12692  002BEE  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 12693  002BF0  D7FC               	bra	u8627
 12694  002BF2  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 12695  002BF4  D7FA               	bra	u8627
 12696  002BF6  D000               	nop2	
 12697  002BF8  4A1C               	infsnz	BlinkOkLeds@idx,f,c
 12698  002BFA  2A1D               	incf	BlinkOkLeds@idx+1,f,c
 12699  002BFC  D7D6               	goto	l6114
 12700  002BFE                     __end_of_BlinkOkLeds:
 12701                           	opt stack 0
 12702                           tosu	equ	0xFFF
 12703                           tosh	equ	0xFFE
 12704                           tosl	equ	0xFFD
 12705                           pclath	equ	0xFFA
 12706                           tblptru	equ	0xFF8
 12707                           tblptrh	equ	0xFF7
 12708                           tblptrl	equ	0xFF6
 12709                           tablat	equ	0xFF5
 12710                           prodh	equ	0xFF4
 12711                           prodl	equ	0xFF3
 12712                           intcon	equ	0xFF2
 12713                           intcon2	equ	0xFF1
 12714                           postinc0	equ	0xFEE
 12715                           plusw0	equ	0xFEB
 12716                           wreg	equ	0xFE8
 12717                           indf1	equ	0xFE7
 12718                           postdec1	equ	0xFE5
 12719                           fsr1h	equ	0xFE2
 12720                           fsr1l	equ	0xFE1
 12721                           indf2	equ	0xFDF
 12722                           postinc2	equ	0xFDE
 12723                           postdec2	equ	0xFDD
 12724                           plusw2	equ	0xFDB
 12725                           fsr2h	equ	0xFDA
 12726                           fsr2l	equ	0xFD9
 12727                           status	equ	0xFD8
 12728                           
 12729 ;; *************** function _BlinkErrorLeds *****************
 12730 ;; Defined at:
 12731 ;;		line 13 in file "LedsApp.c"
 12732 ;; Parameters:    Size  Location     Type
 12733 ;;  state           1    wreg     enum E7578
 12734 ;; Auto vars:     Size  Location     Type
 12735 ;;  state           1   26[COMRAM] enum E7578
 12736 ;;  idx             2   27[COMRAM] int 
 12737 ;; Return value:  Size  Location     Type
 12738 ;;                  1    wreg      void 
 12739 ;; Registers used:
 12740 ;;		wreg, status,2, status,0
 12741 ;; Tracked objects:
 12742 ;;		On entry : 0/0
 12743 ;;		On exit  : 0/0
 12744 ;;		Unchanged: 0/0
 12745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12746 ;;      Params:         0       0       0       0       0       0       0
 12747 ;;      Locals:         3       0       0       0       0       0       0
 12748 ;;      Temps:          3       0       0       0       0       0       0
 12749 ;;      Totals:         6       0       0       0       0       0       0
 12750 ;;Total ram usage:        6 bytes
 12751 ;; Hardware stack levels used:    1
 12752 ;; Hardware stack levels required when called:    3
 12753 ;; This function calls:
 12754 ;;		Nothing
 12755 ;; This function is called by:
 12756 ;;		_main
 12757 ;; This function uses a non-reentrant model
 12758 ;;
 12759                           
 12760                           	psect	text85
 12761  002BFE                     __ptext85:
 12762                           	opt stack 0
 12763  002BFE                     _BlinkErrorLeds:
 12764                           	opt stack 27
 12765                           
 12766                           ;incstack = 0
 12767                           ;BlinkErrorLeds@state stored from wreg
 12768  002BFE  6E1B               	movwf	BlinkErrorLeds@state,c
 12769                           
 12770                           ;LedsApp.c: 15: for(int idx = 0; idx < state; idx++)
 12771  002C00  0E00               	movlw	0
 12772  002C02  6E1D               	movwf	BlinkErrorLeds@idx+1,c
 12773  002C04  0E00               	movlw	0
 12774  002C06  6E1C               	movwf	BlinkErrorLeds@idx,c
 12775  002C08                     l6102:
 12776  002C08  501B               	movf	BlinkErrorLeds@state,w,c
 12777  002C0A  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 12778  002C0C  6A19               	clrf	(??_BlinkErrorLeds+1)& (0+255),c
 12779  002C0E  5018               	movf	??_BlinkErrorLeds,w,c
 12780  002C10  5C1C               	subwf	BlinkErrorLeds@idx,w,c
 12781  002C12  501D               	movf	BlinkErrorLeds@idx+1,w,c
 12782  002C14  0A80               	xorlw	128
 12783  002C16  6E1A               	movwf	(??_BlinkErrorLeds+2)& (0+255),c
 12784  002C18  5019               	movf	??_BlinkErrorLeds+1,w,c
 12785  002C1A  0A80               	xorlw	128
 12786  002C1C  581A               	subwfb	(??_BlinkErrorLeds+2)& (0+255),w,c
 12787  002C1E  B0D8               	btfsc	status,0,c
 12788  002C20  0012               	return	
 12789                           
 12790                           ;LedsApp.c: 16: {
 12791                           ;LedsApp.c: 17: LATBbits.LATB4 = 0;
 12792  002C22  988A               	bcf	3978,4,c	;volatile
 12793                           
 12794                           ;LedsApp.c: 18: _delay((unsigned long)((100)*(8000000/4000.0)));
 12795  002C24  0E02               	movlw	2
 12796  002C26  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
 12797  002C28  0E04               	movlw	4
 12798  002C2A  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 12799  002C2C  0EBA               	movlw	186
 12800  002C2E                     u8637:
 12801  002C2E  2EE8               	decfsz	wreg,f,c
 12802  002C30  D7FE               	bra	u8637
 12803  002C32  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
 12804  002C34  D7FC               	bra	u8637
 12805  002C36  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
 12806  002C38  D7FA               	bra	u8637
 12807  002C3A  D000               	nop2	
 12808                           
 12809                           ;LedsApp.c: 19: LATBbits.LATB4 = 1;
 12810  002C3C  888A               	bsf	3978,4,c	;volatile
 12811                           
 12812                           ;LedsApp.c: 20: _delay((unsigned long)((100)*(8000000/4000.0)));
 12813  002C3E  0E02               	movlw	2
 12814  002C40  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
 12815  002C42  0E04               	movlw	4
 12816  002C44  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 12817  002C46  0EBA               	movlw	186
 12818  002C48                     u8647:
 12819  002C48  2EE8               	decfsz	wreg,f,c
 12820  002C4A  D7FE               	bra	u8647
 12821  002C4C  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
 12822  002C4E  D7FC               	bra	u8647
 12823  002C50  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
 12824  002C52  D7FA               	bra	u8647
 12825  002C54  D000               	nop2	
 12826  002C56  4A1C               	infsnz	BlinkErrorLeds@idx,f,c
 12827  002C58  2A1D               	incf	BlinkErrorLeds@idx+1,f,c
 12828  002C5A  D7D6               	goto	l6102
 12829  002C5C                     __end_of_BlinkErrorLeds:
 12830                           	opt stack 0
 12831                           tosu	equ	0xFFF
 12832                           tosh	equ	0xFFE
 12833                           tosl	equ	0xFFD
 12834                           pclath	equ	0xFFA
 12835                           tblptru	equ	0xFF8
 12836                           tblptrh	equ	0xFF7
 12837                           tblptrl	equ	0xFF6
 12838                           tablat	equ	0xFF5
 12839                           prodh	equ	0xFF4
 12840                           prodl	equ	0xFF3
 12841                           intcon	equ	0xFF2
 12842                           intcon2	equ	0xFF1
 12843                           postinc0	equ	0xFEE
 12844                           plusw0	equ	0xFEB
 12845                           wreg	equ	0xFE8
 12846                           indf1	equ	0xFE7
 12847                           postdec1	equ	0xFE5
 12848                           fsr1h	equ	0xFE2
 12849                           fsr1l	equ	0xFE1
 12850                           indf2	equ	0xFDF
 12851                           postinc2	equ	0xFDE
 12852                           postdec2	equ	0xFDD
 12853                           plusw2	equ	0xFDB
 12854                           fsr2h	equ	0xFDA
 12855                           fsr2l	equ	0xFD9
 12856                           status	equ	0xFD8
 12857                           
 12858 ;; *************** function _AdcConvert *****************
 12859 ;; Defined at:
 12860 ;;		line 56 in file "AdcApp.c"
 12861 ;; Parameters:    Size  Location     Type
 12862 ;;		None
 12863 ;; Auto vars:     Size  Location     Type
 12864 ;;  _adcResult      2   85[BANK0 ] unsigned int 
 12865 ;;  idx             1   94[BANK0 ] unsigned char 
 12866 ;;  _adcResult      2   87[BANK0 ] unsigned int 
 12867 ;;  adcRes          2   92[BANK0 ] unsigned int 
 12868 ;; Return value:  Size  Location     Type
 12869 ;;                  1    wreg      void 
 12870 ;; Registers used:
 12871 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12872 ;; Tracked objects:
 12873 ;;		On entry : 0/0
 12874 ;;		On exit  : 0/0
 12875 ;;		Unchanged: 0/0
 12876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12877 ;;      Params:         0       0       0       0       0       0       0
 12878 ;;      Locals:         0      10       0       0       0       0       0
 12879 ;;      Temps:          0       2       0       0       0       0       0
 12880 ;;      Totals:         0      12       0       0       0       0       0
 12881 ;;Total ram usage:       12 bytes
 12882 ;; Hardware stack levels used:    1
 12883 ;; Hardware stack levels required when called:    8
 12884 ;; This function calls:
 12885 ;;		_ADC_GetConversion
 12886 ;;		_FlashSampleWrite
 12887 ;;		___ftdiv
 12888 ;;		___ftmul
 12889 ;;		___fttol
 12890 ;;		___lwtoft
 12891 ;;		_pow
 12892 ;; This function is called by:
 12893 ;;		_main
 12894 ;; This function uses a non-reentrant model
 12895 ;;
 12896                           
 12897                           	psect	text86
 12898  00102A                     __ptext86:
 12899                           	opt stack 0
 12900  00102A                     _AdcConvert:
 12901                           	opt stack 22
 12902                           
 12903                           ;AdcApp.c: 61: uint16_t adcRes = 0;
 12904                           
 12905                           ;incstack = 0
 12906  00102A  0E00               	movlw	0
 12907  00102C  0100               	movlb	0	; () banked
 12908  00102E  6FBD               	movwf	(AdcConvert@adcRes+1)& (0+255),b
 12909  001030  0E00               	movlw	0
 12910  001032  6FBC               	movwf	AdcConvert@adcRes& (0+255),b
 12911                           
 12912                           ;AdcApp.c: 63: if (adcSampleMode == CIRCULAR)
 12913  001034  503B               	movf	_adcSampleMode,w,c
 12914  001036  A4D8               	btfss	status,2,c
 12915  001038  D073               	goto	l120
 12916                           
 12917                           ; BSR set to: 0
 12918                           ;AdcApp.c: 64: {
 12919                           ;AdcApp.c: 65: for(uint8_t idx = 0; idx < (7); idx++)
 12920  00103A  0E00               	movlw	0
 12921  00103C  6FBE               	movwf	AdcConvert@idx& (0+255),b
 12922  00103E                     l8102:
 12923                           
 12924                           ; BSR set to: 0
 12925  00103E  0E06               	movlw	6
 12926  001040  65BE               	cpfsgt	AdcConvert@idx& (0+255),b
 12927  001042  D001               	goto	l121
 12928  001044  0012               	return	
 12929  001046                     l121:
 12930                           
 12931                           ; BSR set to: 0
 12932                           ;AdcApp.c: 66: {
 12933                           ;AdcApp.c: 67: adc_result_t _adcResult = ADC_GetConversion(channelArr[idx]);
 12934                           
 12935                           ; BSR set to: 0
 12936  001046  51BE               	movf	AdcConvert@idx& (0+255),w,b
 12937  001048  0D01               	mullw	1
 12938  00104A  0E4A               	movlw	low _channelArr
 12939  00104C  24F3               	addwf	prodl,w,c
 12940  00104E  6EF6               	movwf	tblptrl,c
 12941  001050  0E06               	movlw	high _channelArr
 12942  001052  20F4               	addwfc	prodh,w,c
 12943  001054  6EF7               	movwf	tblptrh,c
 12944  001056                     	if	0	;There are less than 3 active tblptr bytes
 12945  001056                     	endif
 12946  001056  0008               	tblrd		*
 12947  001058  50F5               	movf	tablat,w,c
 12948  00105A  ECAB  F01A         	call	_ADC_GetConversion
 12949  00105E  C018  F0B5         	movff	?_ADC_GetConversion,AdcConvert@_adcResult
 12950  001062  C019  F0B6         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult+1
 12951                           
 12952                           ;AdcApp.c: 68: adcRes = (_adcResult/pow(2,(10)))*(3340);
 12953  001066  0E00               	movlw	0
 12954  001068  0100               	movlb	0	; () banked
 12955  00106A  6FA5               	movwf	pow@y& (0+255),b
 12956  00106C  0E20               	movlw	32
 12957  00106E  6FA6               	movwf	(pow@y+1)& (0+255),b
 12958  001070  0E41               	movlw	65
 12959  001072  6FA7               	movwf	(pow@y+2)& (0+255),b
 12960  001074  0E00               	movlw	0
 12961  001076  6FA2               	movwf	pow@x& (0+255),b
 12962  001078  0E00               	movlw	0
 12963  00107A  6FA3               	movwf	(pow@x+1)& (0+255),b
 12964  00107C  0E40               	movlw	64
 12965  00107E  6FA4               	movwf	(pow@x+2)& (0+255),b
 12966  001080  EC85  F00A         	call	_pow	;wreg free
 12967  001084  C0A2  F0B9         	movff	?_pow,_AdcConvert$3313
 12968  001088  C0A3  F0BA         	movff	?_pow+1,_AdcConvert$3313+1
 12969  00108C  C0A4  F0BB         	movff	?_pow+2,_AdcConvert$3313+2
 12970                           
 12971                           ;AdcApp.c: 68: adcRes = (_adcResult/pow(2,(10)))*(3340);
 12972  001090  0EC0               	movlw	192
 12973  001092  0100               	movlb	0	; () banked
 12974  001094  6F6C               	movwf	___ftmul@f2& (0+255),b
 12975  001096  0E50               	movlw	80
 12976  001098  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 12977  00109A  0E45               	movlw	69
 12978  00109C  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 12979  00109E  C0B9  F02C         	movff	_AdcConvert$3313,___ftdiv@f2
 12980  0010A2  C0BA  F02D         	movff	_AdcConvert$3313+1,___ftdiv@f2+1
 12981  0010A6  C0BB  F02E         	movff	_AdcConvert$3313+2,___ftdiv@f2+2
 12982  0010AA  C0B5  F020         	movff	AdcConvert@_adcResult,___lwtoft@c
 12983  0010AE  C0B6  F021         	movff	AdcConvert@_adcResult+1,___lwtoft@c+1
 12984  0010B2  EC88  F01B         	call	___lwtoft	;wreg free
 12985  0010B6  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 12986  0010BA  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 12987  0010BE  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 12988  0010C2  EC6C  F00E         	call	___ftdiv	;wreg free
 12989  0010C6  C029  F069         	movff	?___ftdiv,___ftmul@f1
 12990  0010CA  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 12991  0010CE  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 12992  0010D2  ECF1  F00D         	call	___ftmul	;wreg free
 12993  0010D6  C069  F078         	movff	?___ftmul,___fttol@f1
 12994  0010DA  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 12995  0010DE  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 12996  0010E2  EC75  F00D         	call	___fttol	;wreg free
 12997  0010E6  C078  F0BC         	movff	?___fttol,AdcConvert@adcRes
 12998  0010EA  C079  F0BD         	movff	?___fttol+1,AdcConvert@adcRes+1
 12999                           
 13000                           ;AdcApp.c: 69: FlashSampleWrite(adcRes, idx + 1);
 13001  0010EE  C0BC  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 13002  0010F2  C0BD  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 13003  0010F6  0100               	movlb	0	; () banked
 13004  0010F8  29BE               	incf	AdcConvert@idx& (0+255),w,b
 13005  0010FA  6E2F               	movwf	FlashSampleWrite@channelNum,c
 13006  0010FC  ECF8  F00C         	call	_FlashSampleWrite	;wreg free
 13007                           
 13008                           ;AdcApp.c: 70: _delay((unsigned long)((250)*(8000000/4000.0)));
 13009  001100  0E03               	movlw	3
 13010  001102  0100               	movlb	0	; () banked
 13011  001104  6FB4               	movwf	(??_AdcConvert+1)& (0+255),b
 13012  001106  0E8A               	movlw	138
 13013  001108  6FB3               	movwf	??_AdcConvert& (0+255),b
 13014  00110A  0E55               	movlw	85
 13015  00110C                     u8657:
 13016  00110C  2EE8               	decfsz	wreg,f,c
 13017  00110E  D7FE               	bra	u8657
 13018  001110  2FB3               	decfsz	??_AdcConvert& (0+255),f,b
 13019  001112  D7FC               	bra	u8657
 13020  001114  2FB4               	decfsz	(??_AdcConvert+1)& (0+255),f,b
 13021  001116  D7FA               	bra	u8657
 13022  001118  D000               	nop2	
 13023  00111A  0100               	movlb	0	; () banked
 13024  00111C  2BBE               	incf	AdcConvert@idx& (0+255),f,b
 13025  00111E  D78F               	goto	l8102
 13026  001120                     l120:
 13027                           
 13028                           ; BSR set to: 0
 13029                           ;AdcApp.c: 73: else if (adcSampleMode == SINGLE_CHANNEL)
 13030                           
 13031                           ; BSR set to: 0
 13032  001120  043B               	decf	_adcSampleMode,w,c
 13033  001122  A4D8               	btfss	status,2,c
 13034  001124  0012               	return	
 13035                           
 13036                           ; BSR set to: 0
 13037                           ;AdcApp.c: 74: {
 13038                           ;AdcApp.c: 75: adc_result_t _adcResult = ADC_GetConversion(channelArr[channel]);
 13039  001126  51D4               	movf	_channel& (0+255),w,b
 13040  001128  0D01               	mullw	1
 13041  00112A  0E4A               	movlw	low _channelArr
 13042  00112C  24F3               	addwf	prodl,w,c
 13043  00112E  6EF6               	movwf	tblptrl,c
 13044  001130  0E06               	movlw	high _channelArr
 13045  001132  20F4               	addwfc	prodh,w,c
 13046  001134  6EF7               	movwf	tblptrh,c
 13047  001136                     	if	0	;There are less than 3 active tblptr bytes
 13048  001136                     	endif
 13049  001136  0008               	tblrd		*
 13050  001138  50F5               	movf	tablat,w,c
 13051  00113A  ECAB  F01A         	call	_ADC_GetConversion
 13052  00113E  C018  F0B7         	movff	?_ADC_GetConversion,AdcConvert@_adcResult_340
 13053  001142  C019  F0B8         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult_340+1
 13054                           
 13055                           ;AdcApp.c: 76: adcRes = (_adcResult/pow(2,(10)))*(3340);
 13056  001146  0E00               	movlw	0
 13057  001148  0100               	movlb	0	; () banked
 13058  00114A  6FA5               	movwf	pow@y& (0+255),b
 13059  00114C  0E20               	movlw	32
 13060  00114E  6FA6               	movwf	(pow@y+1)& (0+255),b
 13061  001150  0E41               	movlw	65
 13062  001152  6FA7               	movwf	(pow@y+2)& (0+255),b
 13063  001154  0E00               	movlw	0
 13064  001156  6FA2               	movwf	pow@x& (0+255),b
 13065  001158  0E00               	movlw	0
 13066  00115A  6FA3               	movwf	(pow@x+1)& (0+255),b
 13067  00115C  0E40               	movlw	64
 13068  00115E  6FA4               	movwf	(pow@x+2)& (0+255),b
 13069  001160  EC85  F00A         	call	_pow	;wreg free
 13070  001164  C0A2  F0B9         	movff	?_pow,_AdcConvert$3313
 13071  001168  C0A3  F0BA         	movff	?_pow+1,_AdcConvert$3313+1
 13072  00116C  C0A4  F0BB         	movff	?_pow+2,_AdcConvert$3313+2
 13073                           
 13074                           ;AdcApp.c: 76: adcRes = (_adcResult/pow(2,(10)))*(3340);
 13075  001170  0EC0               	movlw	192
 13076  001172  0100               	movlb	0	; () banked
 13077  001174  6F6C               	movwf	___ftmul@f2& (0+255),b
 13078  001176  0E50               	movlw	80
 13079  001178  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 13080  00117A  0E45               	movlw	69
 13081  00117C  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 13082  00117E  C0B9  F02C         	movff	_AdcConvert$3313,___ftdiv@f2
 13083  001182  C0BA  F02D         	movff	_AdcConvert$3313+1,___ftdiv@f2+1
 13084  001186  C0BB  F02E         	movff	_AdcConvert$3313+2,___ftdiv@f2+2
 13085  00118A  C0B7  F020         	movff	AdcConvert@_adcResult_340,___lwtoft@c
 13086  00118E  C0B8  F021         	movff	AdcConvert@_adcResult_340+1,___lwtoft@c+1
 13087  001192  EC88  F01B         	call	___lwtoft	;wreg free
 13088  001196  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 13089  00119A  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 13090  00119E  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 13091  0011A2  EC6C  F00E         	call	___ftdiv	;wreg free
 13092  0011A6  C029  F069         	movff	?___ftdiv,___ftmul@f1
 13093  0011AA  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 13094  0011AE  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 13095  0011B2  ECF1  F00D         	call	___ftmul	;wreg free
 13096  0011B6  C069  F078         	movff	?___ftmul,___fttol@f1
 13097  0011BA  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 13098  0011BE  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 13099  0011C2  EC75  F00D         	call	___fttol	;wreg free
 13100  0011C6  C078  F0BC         	movff	?___fttol,AdcConvert@adcRes
 13101  0011CA  C079  F0BD         	movff	?___fttol+1,AdcConvert@adcRes+1
 13102                           
 13103                           ;AdcApp.c: 77: FlashSampleWrite(adcRes, 1);
 13104  0011CE  C0BC  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 13105  0011D2  C0BD  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 13106  0011D6  0E01               	movlw	1
 13107  0011D8  6E2F               	movwf	FlashSampleWrite@channelNum,c
 13108  0011DA  ECF8  F00C         	call	_FlashSampleWrite	;wreg free
 13109  0011DE  0012               	return	
 13110  0011E0                     __end_of_AdcConvert:
 13111                           	opt stack 0
 13112                           tosu	equ	0xFFF
 13113                           tosh	equ	0xFFE
 13114                           tosl	equ	0xFFD
 13115                           pclath	equ	0xFFA
 13116                           tblptru	equ	0xFF8
 13117                           tblptrh	equ	0xFF7
 13118                           tblptrl	equ	0xFF6
 13119                           tablat	equ	0xFF5
 13120                           prodh	equ	0xFF4
 13121                           prodl	equ	0xFF3
 13122                           intcon	equ	0xFF2
 13123                           intcon2	equ	0xFF1
 13124                           postinc0	equ	0xFEE
 13125                           plusw0	equ	0xFEB
 13126                           wreg	equ	0xFE8
 13127                           indf1	equ	0xFE7
 13128                           postdec1	equ	0xFE5
 13129                           fsr1h	equ	0xFE2
 13130                           fsr1l	equ	0xFE1
 13131                           indf2	equ	0xFDF
 13132                           postinc2	equ	0xFDE
 13133                           postdec2	equ	0xFDD
 13134                           plusw2	equ	0xFDB
 13135                           fsr2h	equ	0xFDA
 13136                           fsr2l	equ	0xFD9
 13137                           status	equ	0xFD8
 13138                           
 13139 ;; *************** function _pow *****************
 13140 ;; Defined at:
 13141 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
 13142 ;; Parameters:    Size  Location     Type
 13143 ;;  x               3   66[BANK0 ] void 
 13144 ;;  y               3   69[BANK0 ] void 
 13145 ;; Auto vars:     Size  Location     Type
 13146 ;;  yi              4   79[BANK0 ] unsigned long 
 13147 ;;  sign            1   78[BANK0 ] unsigned char 
 13148 ;; Return value:  Size  Location     Type
 13149 ;;                  3   66[BANK0 ] unsigned char 
 13150 ;; Registers used:
 13151 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13152 ;; Tracked objects:
 13153 ;;		On entry : 0/0
 13154 ;;		On exit  : 0/0
 13155 ;;		Unchanged: 0/0
 13156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13157 ;;      Params:         0       6       0       0       0       0       0
 13158 ;;      Locals:         0      11       0       0       0       0       0
 13159 ;;      Temps:          0       0       0       0       0       0       0
 13160 ;;      Totals:         0      17       0       0       0       0       0
 13161 ;;Total ram usage:       17 bytes
 13162 ;; Hardware stack levels used:    1
 13163 ;; Hardware stack levels required when called:    7
 13164 ;; This function calls:
 13165 ;;		___ftge
 13166 ;;		___ftmul
 13167 ;;		___ftneg
 13168 ;;		___fttol
 13169 ;;		___lltoft
 13170 ;;		_exp
 13171 ;;		_log
 13172 ;; This function is called by:
 13173 ;;		_AdcConvert
 13174 ;;		_ReadIntFromEeprom
 13175 ;; This function uses a non-reentrant model
 13176 ;;
 13177                           
 13178                           	psect	text87
 13179  00150A                     __ptext87:
 13180                           	opt stack 0
 13181  00150A                     _pow:
 13182                           	opt stack 20
 13183                           
 13184                           ;incstack = 0
 13185  00150A  0E00               	movlw	0
 13186  00150C  0100               	movlb	0	; () banked
 13187  00150E  6FAE               	movwf	pow@sign& (0+255),b
 13188                           
 13189                           ; BSR set to: 0
 13190  001510  51A2               	movf	pow@x& (0+255),w,b
 13191  001512  11A3               	iorwf	(pow@x+1)& (0+255),w,b
 13192  001514  11A4               	iorwf	(pow@x+2)& (0+255),w,b
 13193  001516  A4D8               	btfss	status,2,c
 13194  001518  D01D               	goto	l1905
 13195                           
 13196                           ; BSR set to: 0
 13197  00151A  0E00               	movlw	0
 13198  00151C  6E18               	movwf	___ftge@ff1,c
 13199  00151E  0E00               	movlw	0
 13200  001520  6E19               	movwf	___ftge@ff1+1,c
 13201  001522  0E00               	movlw	0
 13202  001524  6E1A               	movwf	___ftge@ff1+2,c
 13203  001526  C0A5  F01B         	movff	pow@y,___ftge@ff2
 13204  00152A  C0A6  F01C         	movff	pow@y+1,___ftge@ff2+1
 13205  00152E  C0A7  F01D         	movff	pow@y+2,___ftge@ff2+2
 13206  001532  ECBE  F013         	call	___ftge	;wreg free
 13207  001536  A0D8               	btfss	status,0,c
 13208  001538  D005               	goto	l1906
 13209  00153A  0E00               	movlw	0
 13210  00153C  0100               	movlb	0	; () banked
 13211  00153E  6FC5               	movwf	(_errno+1)& (0+255),b
 13212  001540  0E21               	movlw	33
 13213  001542  6FC4               	movwf	_errno& (0+255),b
 13214  001544                     l1906:
 13215  001544  0E00               	movlw	0
 13216  001546  0100               	movlb	0	; () banked
 13217  001548  6FA2               	movwf	?_pow& (0+255),b
 13218  00154A  0E00               	movlw	0
 13219  00154C  6FA3               	movwf	(?_pow+1)& (0+255),b
 13220  00154E  0E00               	movlw	0
 13221  001550  6FA4               	movwf	(?_pow+2)& (0+255),b
 13222                           
 13223                           ; BSR set to: 0
 13224  001552  0012               	return	
 13225  001554                     l1905:
 13226                           
 13227                           ; BSR set to: 0
 13228                           
 13229                           ; BSR set to: 0
 13230  001554  51A5               	movf	pow@y& (0+255),w,b
 13231  001556  11A6               	iorwf	(pow@y+1)& (0+255),w,b
 13232  001558  11A7               	iorwf	(pow@y+2)& (0+255),w,b
 13233  00155A  A4D8               	btfss	status,2,c
 13234  00155C  D007               	goto	l1908
 13235                           
 13236                           ; BSR set to: 0
 13237  00155E  0E00               	movlw	0
 13238  001560  6FA2               	movwf	?_pow& (0+255),b
 13239  001562  0E80               	movlw	128
 13240  001564  6FA3               	movwf	(?_pow+1)& (0+255),b
 13241  001566  0E3F               	movlw	63
 13242  001568  6FA4               	movwf	(?_pow+2)& (0+255),b
 13243                           
 13244                           ; BSR set to: 0
 13245  00156A  0012               	return	
 13246  00156C                     l1908:
 13247                           
 13248                           ; BSR set to: 0
 13249                           
 13250                           ; BSR set to: 0
 13251  00156C  AFA4               	btfss	(pow@x+2)& (0+255),7,b
 13252  00156E  D041               	goto	l1909
 13253                           
 13254                           ; BSR set to: 0
 13255  001570  C0A5  F078         	movff	pow@y,___fttol@f1
 13256  001574  C0A6  F079         	movff	pow@y+1,___fttol@f1+1
 13257  001578  C0A7  F07A         	movff	pow@y+2,___fttol@f1+2
 13258  00157C  EC75  F00D         	call	___fttol	;wreg free
 13259  001580  C078  F0AF         	movff	?___fttol,pow@yi
 13260  001584  C079  F0B0         	movff	?___fttol+1,pow@yi+1
 13261  001588  C07A  F0B1         	movff	?___fttol+2,pow@yi+2
 13262  00158C  C07B  F0B2         	movff	?___fttol+3,pow@yi+3
 13263  001590  C0AF  F020         	movff	pow@yi,___lltoft@c
 13264  001594  C0B0  F021         	movff	pow@yi+1,___lltoft@c+1
 13265  001598  C0B1  F022         	movff	pow@yi+2,___lltoft@c+2
 13266  00159C  C0B2  F023         	movff	pow@yi+3,___lltoft@c+3
 13267  0015A0  EC5C  F016         	call	___lltoft	;wreg free
 13268  0015A4  0100               	movlb	0	; () banked
 13269  0015A6  51A5               	movf	pow@y& (0+255),w,b
 13270  0015A8  1820               	xorwf	?___lltoft,w,c
 13271  0015AA  E107               	bnz	u7460
 13272  0015AC  51A6               	movf	(pow@y+1)& (0+255),w,b
 13273  0015AE  1821               	xorwf	?___lltoft+1,w,c
 13274  0015B0  E104               	bnz	u7460
 13275  0015B2  51A7               	movf	(pow@y+2)& (0+255),w,b
 13276  0015B4  1822               	xorwf	?___lltoft+2,w,c
 13277  0015B6  B4D8               	btfsc	status,2,c
 13278  0015B8  D00B               	goto	l1910
 13279  0015BA                     u7460:
 13280                           
 13281                           ; BSR set to: 0
 13282  0015BA  0E00               	movlw	0
 13283  0015BC  6FC5               	movwf	(_errno+1)& (0+255),b
 13284  0015BE  0E21               	movlw	33
 13285  0015C0  6FC4               	movwf	_errno& (0+255),b
 13286  0015C2  0E00               	movlw	0
 13287  0015C4  6FA2               	movwf	?_pow& (0+255),b
 13288  0015C6  0E00               	movlw	0
 13289  0015C8  6FA3               	movwf	(?_pow+1)& (0+255),b
 13290  0015CA  0E00               	movlw	0
 13291  0015CC  6FA4               	movwf	(?_pow+2)& (0+255),b
 13292                           
 13293                           ; BSR set to: 0
 13294  0015CE  0012               	return	
 13295  0015D0                     l1910:
 13296                           
 13297                           ; BSR set to: 0
 13298                           
 13299                           ; BSR set to: 0
 13300  0015D0  51AF               	movf	pow@yi& (0+255),w,b
 13301  0015D2  0B01               	andlw	1
 13302  0015D4  6FAE               	movwf	pow@sign& (0+255),b
 13303                           
 13304                           ; BSR set to: 0
 13305  0015D6  C0A2  F018         	movff	pow@x,___ftneg@f1
 13306  0015DA  C0A3  F019         	movff	pow@x+1,___ftneg@f1+1
 13307  0015DE  C0A4  F01A         	movff	pow@x+2,___ftneg@f1+2
 13308  0015E2  EC76  F01B         	call	___ftneg	;wreg free
 13309  0015E6  C018  F0A2         	movff	?___ftneg,pow@x
 13310  0015EA  C019  F0A3         	movff	?___ftneg+1,pow@x+1
 13311  0015EE  C01A  F0A4         	movff	?___ftneg+2,pow@x+2
 13312  0015F2                     l1909:
 13313  0015F2  C0A2  F090         	movff	pow@x,log@x
 13314  0015F6  C0A3  F091         	movff	pow@x+1,log@x+1
 13315  0015FA  C0A4  F092         	movff	pow@x+2,log@x+2
 13316  0015FE  ECDB  F00B         	call	_log	;wreg free
 13317  001602  C090  F0A8         	movff	?_log,_pow$3316
 13318  001606  C091  F0A9         	movff	?_log+1,_pow$3316+1
 13319  00160A  C092  F0AA         	movff	?_log+2,_pow$3316+2
 13320  00160E  C0A8  F069         	movff	_pow$3316,___ftmul@f1
 13321  001612  C0A9  F06A         	movff	_pow$3316+1,___ftmul@f1+1
 13322  001616  C0AA  F06B         	movff	_pow$3316+2,___ftmul@f1+2
 13323  00161A  C0A5  F06C         	movff	pow@y,___ftmul@f2
 13324  00161E  C0A6  F06D         	movff	pow@y+1,___ftmul@f2+1
 13325  001622  C0A7  F06E         	movff	pow@y+2,___ftmul@f2+2
 13326  001626  ECF1  F00D         	call	___ftmul	;wreg free
 13327  00162A  C069  F0AB         	movff	?___ftmul,_pow$3317
 13328  00162E  C06A  F0AC         	movff	?___ftmul+1,_pow$3317+1
 13329  001632  C06B  F0AD         	movff	?___ftmul+2,_pow$3317+2
 13330  001636  C0AB  F099         	movff	_pow$3317,exp@x
 13331  00163A  C0AC  F09A         	movff	_pow$3317+1,exp@x+1
 13332  00163E  C0AD  F09B         	movff	_pow$3317+2,exp@x+2
 13333  001642  EC31  F006         	call	_exp	;wreg free
 13334  001646  C099  F0A2         	movff	?_exp,pow@x
 13335  00164A  C09A  F0A3         	movff	?_exp+1,pow@x+1
 13336  00164E  C09B  F0A4         	movff	?_exp+2,pow@x+2
 13337  001652  0100               	movlb	0	; () banked
 13338  001654  51AE               	movf	pow@sign& (0+255),w,b
 13339  001656  B4D8               	btfsc	status,2,c
 13340  001658  D00F               	goto	l1911
 13341                           
 13342                           ; BSR set to: 0
 13343  00165A  C0A2  F018         	movff	pow@x,___ftneg@f1
 13344  00165E  C0A3  F019         	movff	pow@x+1,___ftneg@f1+1
 13345  001662  C0A4  F01A         	movff	pow@x+2,___ftneg@f1+2
 13346  001666  EC76  F01B         	call	___ftneg	;wreg free
 13347  00166A  C018  F0A2         	movff	?___ftneg,?_pow
 13348  00166E  C019  F0A3         	movff	?___ftneg+1,?_pow+1
 13349  001672  C01A  F0A4         	movff	?___ftneg+2,?_pow+2
 13350  001676  0012               	return	
 13351  001678                     l1911:
 13352                           
 13353                           ; BSR set to: 0
 13354  001678  C0A2  F0A2         	movff	pow@x,?_pow
 13355  00167C  C0A3  F0A3         	movff	pow@x+1,?_pow+1
 13356  001680  C0A4  F0A4         	movff	pow@x+2,?_pow+2
 13357  001684  0012               	return		;funcret
 13358  001686                     __end_of_pow:
 13359                           	opt stack 0
 13360                           tosu	equ	0xFFF
 13361                           tosh	equ	0xFFE
 13362                           tosl	equ	0xFFD
 13363                           pclath	equ	0xFFA
 13364                           tblptru	equ	0xFF8
 13365                           tblptrh	equ	0xFF7
 13366                           tblptrl	equ	0xFF6
 13367                           tablat	equ	0xFF5
 13368                           prodh	equ	0xFF4
 13369                           prodl	equ	0xFF3
 13370                           intcon	equ	0xFF2
 13371                           intcon2	equ	0xFF1
 13372                           postinc0	equ	0xFEE
 13373                           plusw0	equ	0xFEB
 13374                           wreg	equ	0xFE8
 13375                           indf1	equ	0xFE7
 13376                           postdec1	equ	0xFE5
 13377                           fsr1h	equ	0xFE2
 13378                           fsr1l	equ	0xFE1
 13379                           indf2	equ	0xFDF
 13380                           postinc2	equ	0xFDE
 13381                           postdec2	equ	0xFDD
 13382                           plusw2	equ	0xFDB
 13383                           fsr2h	equ	0xFDA
 13384                           fsr2l	equ	0xFD9
 13385                           status	equ	0xFD8
 13386                           
 13387 ;; *************** function _log *****************
 13388 ;; Defined at:
 13389 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
 13390 ;; Parameters:    Size  Location     Type
 13391 ;;  x               3   48[BANK0 ] unsigned char 
 13392 ;; Auto vars:     Size  Location     Type
 13393 ;;  exponent        2   51[BANK0 ] int 
 13394 ;; Return value:  Size  Location     Type
 13395 ;;                  3   48[BANK0 ] int 
 13396 ;; Registers used:
 13397 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13398 ;; Tracked objects:
 13399 ;;		On entry : 0/0
 13400 ;;		On exit  : 0/0
 13401 ;;		Unchanged: 0/0
 13402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13403 ;;      Params:         0       3       0       0       0       0       0
 13404 ;;      Locals:         0       2       0       0       0       0       0
 13405 ;;      Temps:          0       0       0       0       0       0       0
 13406 ;;      Totals:         0       5       0       0       0       0       0
 13407 ;;Total ram usage:        5 bytes
 13408 ;; Hardware stack levels used:    1
 13409 ;; Hardware stack levels required when called:    6
 13410 ;; This function calls:
 13411 ;;		___awtoft
 13412 ;;		___ftadd
 13413 ;;		___ftmul
 13414 ;;		_eval_poly
 13415 ;;		_frexp
 13416 ;; This function is called by:
 13417 ;;		_pow
 13418 ;; This function uses a non-reentrant model
 13419 ;;
 13420                           
 13421                           	psect	text88
 13422  0017B6                     __ptext88:
 13423                           	opt stack 0
 13424  0017B6                     _log:
 13425                           	opt stack 20
 13426                           
 13427                           ;incstack = 0
 13428  0017B6  0100               	movlb	0	; () banked
 13429  0017B8  AF92               	btfss	(log@x+2)& (0+255),7,b
 13430  0017BA  D00B               	goto	l2167
 13431                           
 13432                           ; BSR set to: 0
 13433  0017BC  0E00               	movlw	0
 13434  0017BE  6FC5               	movwf	(_errno+1)& (0+255),b
 13435  0017C0  0E21               	movlw	33
 13436  0017C2  6FC4               	movwf	_errno& (0+255),b
 13437  0017C4  0E00               	movlw	0
 13438  0017C6  6F90               	movwf	?_log& (0+255),b
 13439  0017C8  0E00               	movlw	0
 13440  0017CA  6F91               	movwf	(?_log+1)& (0+255),b
 13441  0017CC  0E00               	movlw	0
 13442  0017CE  6F92               	movwf	(?_log+2)& (0+255),b
 13443                           
 13444                           ; BSR set to: 0
 13445  0017D0  0012               	return	
 13446  0017D2                     l2167:
 13447                           
 13448                           ; BSR set to: 0
 13449                           
 13450                           ; BSR set to: 0
 13451  0017D2  5190               	movf	log@x& (0+255),w,b
 13452  0017D4  1191               	iorwf	(log@x+1)& (0+255),w,b
 13453  0017D6  1192               	iorwf	(log@x+2)& (0+255),w,b
 13454  0017D8  A4D8               	btfss	status,2,c
 13455  0017DA  D00B               	goto	l2169
 13456                           
 13457                           ; BSR set to: 0
 13458  0017DC  0E00               	movlw	0
 13459  0017DE  6FC5               	movwf	(_errno+1)& (0+255),b
 13460  0017E0  0E22               	movlw	34
 13461  0017E2  6FC4               	movwf	_errno& (0+255),b
 13462  0017E4  0E00               	movlw	0
 13463  0017E6  6F90               	movwf	?_log& (0+255),b
 13464  0017E8  0E00               	movlw	0
 13465  0017EA  6F91               	movwf	(?_log+1)& (0+255),b
 13466  0017EC  0E00               	movlw	0
 13467  0017EE  6F92               	movwf	(?_log+2)& (0+255),b
 13468                           
 13469                           ; BSR set to: 0
 13470  0017F0  0012               	return	
 13471  0017F2                     l2169:
 13472                           
 13473                           ; BSR set to: 0
 13474                           
 13475                           ; BSR set to: 0
 13476  0017F2  0E00               	movlw	0
 13477  0017F4  6F6C               	movwf	___ftmul@f2& (0+255),b
 13478  0017F6  0E00               	movlw	0
 13479  0017F8  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 13480  0017FA  0E40               	movlw	64
 13481  0017FC  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 13482  0017FE  0E93               	movlw	low log@exponent
 13483  001800  6E1B               	movwf	frexp@eptr,c
 13484  001802  0E00               	movlw	high log@exponent
 13485  001804  6E1C               	movwf	frexp@eptr+1,c
 13486  001806  C090  F018         	movff	log@x,frexp@value
 13487  00180A  C091  F019         	movff	log@x+1,frexp@value+1
 13488  00180E  C092  F01A         	movff	log@x+2,frexp@value+2
 13489  001812  EC76  F013         	call	_frexp	;wreg free
 13490  001816  C018  F069         	movff	?_frexp,___ftmul@f1
 13491  00181A  C019  F06A         	movff	?_frexp+1,___ftmul@f1+1
 13492  00181E  C01A  F06B         	movff	?_frexp+2,___ftmul@f1+2
 13493  001822  ECF1  F00D         	call	___ftmul	;wreg free
 13494  001826  C069  F078         	movff	?___ftmul,___ftadd@f1
 13495  00182A  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 13496  00182E  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 13497  001832  0E00               	movlw	0
 13498  001834  0100               	movlb	0	; () banked
 13499  001836  6F7B               	movwf	___ftadd@f2& (0+255),b
 13500  001838  0E80               	movlw	128
 13501  00183A  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 13502  00183C  0EBF               	movlw	191
 13503  00183E  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 13504  001840  ECF0  F008         	call	___ftadd	;wreg free
 13505  001844  C078  F090         	movff	?___ftadd,log@x
 13506  001848  C079  F091         	movff	?___ftadd+1,log@x+1
 13507  00184C  C07A  F092         	movff	?___ftadd+2,log@x+2
 13508  001850  0100               	movlb	0	; () banked
 13509  001852  0793               	decf	log@exponent& (0+255),f,b
 13510  001854  A0D8               	btfss	status,0,c
 13511  001856  0794               	decf	(log@exponent+1)& (0+255),f,b
 13512                           
 13513                           ; BSR set to: 0
 13514  001858  C090  F084         	movff	log@x,eval_poly@x
 13515  00185C  C091  F085         	movff	log@x+1,eval_poly@x+1
 13516  001860  C092  F086         	movff	log@x+2,eval_poly@x+2
 13517  001864  0E73               	movlw	low log@coeff
 13518  001866  6F87               	movwf	eval_poly@d& (0+255),b
 13519  001868  0E06               	movlw	high log@coeff
 13520  00186A  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 13521  00186C  0E00               	movlw	0
 13522  00186E  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 13523  001870  0E08               	movlw	8
 13524  001872  6F89               	movwf	eval_poly@n& (0+255),b
 13525  001874  ECC3  F00F         	call	_eval_poly	;wreg free
 13526  001878  C084  F090         	movff	?_eval_poly,log@x
 13527  00187C  C085  F091         	movff	?_eval_poly+1,log@x+1
 13528  001880  C086  F092         	movff	?_eval_poly+2,log@x+2
 13529  001884  0E72               	movlw	114
 13530  001886  0100               	movlb	0	; () banked
 13531  001888  6F6C               	movwf	___ftmul@f2& (0+255),b
 13532  00188A  0E31               	movlw	49
 13533  00188C  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 13534  00188E  0E3F               	movlw	63
 13535  001890  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 13536  001892  C093  F020         	movff	log@exponent,___awtoft@c
 13537  001896  C094  F021         	movff	log@exponent+1,___awtoft@c+1
 13538  00189A  EC8E  F019         	call	___awtoft	;wreg free
 13539  00189E  C020  F069         	movff	?___awtoft,___ftmul@f1
 13540  0018A2  C021  F06A         	movff	?___awtoft+1,___ftmul@f1+1
 13541  0018A6  C022  F06B         	movff	?___awtoft+2,___ftmul@f1+2
 13542  0018AA  ECF1  F00D         	call	___ftmul	;wreg free
 13543  0018AE  C069  F078         	movff	?___ftmul,___ftadd@f1
 13544  0018B2  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 13545  0018B6  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 13546  0018BA  C090  F07B         	movff	log@x,___ftadd@f2
 13547  0018BE  C091  F07C         	movff	log@x+1,___ftadd@f2+1
 13548  0018C2  C092  F07D         	movff	log@x+2,___ftadd@f2+2
 13549  0018C6  ECF0  F008         	call	___ftadd	;wreg free
 13550  0018CA  C078  F090         	movff	?___ftadd,?_log
 13551  0018CE  C079  F091         	movff	?___ftadd+1,?_log+1
 13552  0018D2  C07A  F092         	movff	?___ftadd+2,?_log+2
 13553  0018D6  0012               	return	
 13554  0018D8                     __end_of_log:
 13555                           	opt stack 0
 13556                           tosu	equ	0xFFF
 13557                           tosh	equ	0xFFE
 13558                           tosl	equ	0xFFD
 13559                           pclath	equ	0xFFA
 13560                           tblptru	equ	0xFF8
 13561                           tblptrh	equ	0xFF7
 13562                           tblptrl	equ	0xFF6
 13563                           tablat	equ	0xFF5
 13564                           prodh	equ	0xFF4
 13565                           prodl	equ	0xFF3
 13566                           intcon	equ	0xFF2
 13567                           intcon2	equ	0xFF1
 13568                           postinc0	equ	0xFEE
 13569                           plusw0	equ	0xFEB
 13570                           wreg	equ	0xFE8
 13571                           indf1	equ	0xFE7
 13572                           postdec1	equ	0xFE5
 13573                           fsr1h	equ	0xFE2
 13574                           fsr1l	equ	0xFE1
 13575                           indf2	equ	0xFDF
 13576                           postinc2	equ	0xFDE
 13577                           postdec2	equ	0xFDD
 13578                           plusw2	equ	0xFDB
 13579                           fsr2h	equ	0xFDA
 13580                           fsr2l	equ	0xFD9
 13581                           status	equ	0xFD8
 13582                           
 13583 ;; *************** function _exp *****************
 13584 ;; Defined at:
 13585 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
 13586 ;; Parameters:    Size  Location     Type
 13587 ;;  x               3   57[BANK0 ] int 
 13588 ;; Auto vars:     Size  Location     Type
 13589 ;;  exponent        2   63[BANK0 ] int 
 13590 ;;  sign            1   65[BANK0 ] unsigned char 
 13591 ;; Return value:  Size  Location     Type
 13592 ;;                  3   57[BANK0 ] unsigned char 
 13593 ;; Registers used:
 13594 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13595 ;; Tracked objects:
 13596 ;;		On entry : 0/0
 13597 ;;		On exit  : 0/0
 13598 ;;		Unchanged: 0/0
 13599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13600 ;;      Params:         0       3       0       0       0       0       0
 13601 ;;      Locals:         0       6       0       0       0       0       0
 13602 ;;      Temps:          0       0       0       0       0       0       0
 13603 ;;      Totals:         0       9       0       0       0       0       0
 13604 ;;Total ram usage:        9 bytes
 13605 ;; Hardware stack levels used:    1
 13606 ;; Hardware stack levels required when called:    6
 13607 ;; This function calls:
 13608 ;;		___awtoft
 13609 ;;		___ftdiv
 13610 ;;		___ftge
 13611 ;;		___ftmul
 13612 ;;		___ftneg
 13613 ;;		___ftsub
 13614 ;;		___fttol
 13615 ;;		_eval_poly
 13616 ;;		_floor
 13617 ;;		_ldexp
 13618 ;; This function is called by:
 13619 ;;		_pow
 13620 ;; This function uses a non-reentrant model
 13621 ;;
 13622                           
 13623                           	psect	text89
 13624  000C62                     __ptext89:
 13625                           	opt stack 0
 13626  000C62                     _exp:
 13627                           	opt stack 20
 13628                           
 13629                           ;incstack = 0
 13630  000C62  0100               	movlb	0	; () banked
 13631  000C64  5199               	movf	exp@x& (0+255),w,b
 13632  000C66  119A               	iorwf	(exp@x+1)& (0+255),w,b
 13633  000C68  119B               	iorwf	(exp@x+2)& (0+255),w,b
 13634  000C6A  A4D8               	btfss	status,2,c
 13635  000C6C  D007               	goto	l2103
 13636                           
 13637                           ; BSR set to: 0
 13638  000C6E  0E00               	movlw	0
 13639  000C70  6F99               	movwf	?_exp& (0+255),b
 13640  000C72  0E80               	movlw	128
 13641  000C74  6F9A               	movwf	(?_exp+1)& (0+255),b
 13642  000C76  0E3F               	movlw	63
 13643  000C78  6F9B               	movwf	(?_exp+2)& (0+255),b
 13644                           
 13645                           ; BSR set to: 0
 13646  000C7A  0012               	return	
 13647  000C7C                     l2103:
 13648                           
 13649                           ; BSR set to: 0
 13650                           
 13651                           ; BSR set to: 0
 13652  000C7C  0E72               	movlw	114
 13653  000C7E  6E18               	movwf	___ftge@ff1,c
 13654  000C80  0E31               	movlw	49
 13655  000C82  6E19               	movwf	___ftge@ff1+1,c
 13656  000C84  0E44               	movlw	68
 13657  000C86  6E1A               	movwf	___ftge@ff1+2,c
 13658  000C88  C099  F01B         	movff	exp@x,___ftge@ff2
 13659  000C8C  C09A  F01C         	movff	exp@x+1,___ftge@ff2+1
 13660  000C90  C09B  F01D         	movff	exp@x+2,___ftge@ff2+2
 13661  000C94  ECBE  F013         	call	___ftge	;wreg free
 13662  000C98  B0D8               	btfsc	status,0,c
 13663  000C9A  D00C               	goto	l2105
 13664  000C9C  0E00               	movlw	0
 13665  000C9E  0100               	movlb	0	; () banked
 13666  000CA0  6FC5               	movwf	(_errno+1)& (0+255),b
 13667  000CA2  0E22               	movlw	34
 13668  000CA4  6FC4               	movwf	_errno& (0+255),b
 13669  000CA6  0EFF               	movlw	255
 13670  000CA8  6F99               	movwf	?_exp& (0+255),b
 13671  000CAA  0E7F               	movlw	127
 13672  000CAC  6F9A               	movwf	(?_exp+1)& (0+255),b
 13673  000CAE  0E7F               	movlw	127
 13674  000CB0  6F9B               	movwf	(?_exp+2)& (0+255),b
 13675                           
 13676                           ; BSR set to: 0
 13677  000CB2  0012               	return	
 13678  000CB4                     l2105:
 13679                           
 13680                           ; BSR set to: 0
 13681  000CB4  C099  F018         	movff	exp@x,___ftge@ff1
 13682  000CB8  C09A  F019         	movff	exp@x+1,___ftge@ff1+1
 13683  000CBC  C09B  F01A         	movff	exp@x+2,___ftge@ff1+2
 13684  000CC0  0E49               	movlw	73
 13685  000CC2  6E1B               	movwf	___ftge@ff2,c
 13686  000CC4  0E3A               	movlw	58
 13687  000CC6  6E1C               	movwf	___ftge@ff2+1,c
 13688  000CC8  0EC4               	movlw	196
 13689  000CCA  6E1D               	movwf	___ftge@ff2+2,c
 13690  000CCC  ECBE  F013         	call	___ftge	;wreg free
 13691  000CD0  B0D8               	btfsc	status,0,c
 13692  000CD2  D00C               	goto	l2106
 13693  000CD4  0E00               	movlw	0
 13694  000CD6  0100               	movlb	0	; () banked
 13695  000CD8  6FC5               	movwf	(_errno+1)& (0+255),b
 13696  000CDA  0E22               	movlw	34
 13697  000CDC  6FC4               	movwf	_errno& (0+255),b
 13698  000CDE  0E00               	movlw	0
 13699  000CE0  6F99               	movwf	?_exp& (0+255),b
 13700  000CE2  0E00               	movlw	0
 13701  000CE4  6F9A               	movwf	(?_exp+1)& (0+255),b
 13702  000CE6  0E00               	movlw	0
 13703  000CE8  6F9B               	movwf	(?_exp+2)& (0+255),b
 13704                           
 13705                           ; BSR set to: 0
 13706  000CEA  0012               	return	
 13707  000CEC                     l2106:
 13708                           
 13709                           ; BSR set to: 0
 13710  000CEC  0100               	movlb	0	; () banked
 13711  000CEE  AF9B               	btfss	(exp@x+2)& (0+255),7,b
 13712  000CF0  D002               	goto	u7370
 13713  000CF2  0E01               	movlw	1
 13714  000CF4  D001               	goto	u7380
 13715  000CF6                     u7370:
 13716  000CF6  0E00               	movlw	0
 13717  000CF8                     u7380:
 13718  000CF8  6FA1               	movwf	exp@sign& (0+255),b
 13719                           
 13720                           ; BSR set to: 0
 13721  000CFA  51A1               	movf	exp@sign& (0+255),w,b
 13722  000CFC  B4D8               	btfsc	status,2,c
 13723  000CFE  D00E               	goto	l2107
 13724                           
 13725                           ; BSR set to: 0
 13726  000D00  C099  F018         	movff	exp@x,___ftneg@f1
 13727  000D04  C09A  F019         	movff	exp@x+1,___ftneg@f1+1
 13728  000D08  C09B  F01A         	movff	exp@x+2,___ftneg@f1+2
 13729  000D0C  EC76  F01B         	call	___ftneg	;wreg free
 13730  000D10  C018  F099         	movff	?___ftneg,exp@x
 13731  000D14  C019  F09A         	movff	?___ftneg+1,exp@x+1
 13732  000D18  C01A  F09B         	movff	?___ftneg+2,exp@x+2
 13733  000D1C                     l2107:
 13734  000D1C  C099  F069         	movff	exp@x,___ftmul@f1
 13735  000D20  C09A  F06A         	movff	exp@x+1,___ftmul@f1+1
 13736  000D24  C09B  F06B         	movff	exp@x+2,___ftmul@f1+2
 13737  000D28  0EAA               	movlw	170
 13738  000D2A  0100               	movlb	0	; () banked
 13739  000D2C  6F6C               	movwf	___ftmul@f2& (0+255),b
 13740  000D2E  0EB8               	movlw	184
 13741  000D30  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 13742  000D32  0E3F               	movlw	63
 13743  000D34  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 13744  000D36  ECF1  F00D         	call	___ftmul	;wreg free
 13745  000D3A  C069  F099         	movff	?___ftmul,exp@x
 13746  000D3E  C06A  F09A         	movff	?___ftmul+1,exp@x+1
 13747  000D42  C06B  F09B         	movff	?___ftmul+2,exp@x+2
 13748  000D46  C099  F091         	movff	exp@x,floor@x
 13749  000D4A  C09A  F092         	movff	exp@x+1,floor@x+1
 13750  000D4E  C09B  F093         	movff	exp@x+2,floor@x+2
 13751  000D52  EC52  F00F         	call	_floor	;wreg free
 13752  000D56  C091  F09C         	movff	?_floor,_exp$3318
 13753  000D5A  C092  F09D         	movff	?_floor+1,_exp$3318+1
 13754  000D5E  C093  F09E         	movff	?_floor+2,_exp$3318+2
 13755  000D62  C09C  F078         	movff	_exp$3318,___fttol@f1
 13756  000D66  C09D  F079         	movff	_exp$3318+1,___fttol@f1+1
 13757  000D6A  C09E  F07A         	movff	_exp$3318+2,___fttol@f1+2
 13758  000D6E  EC75  F00D         	call	___fttol	;wreg free
 13759  000D72  C078  F09F         	movff	?___fttol,exp@exponent
 13760  000D76  C079  F0A0         	movff	?___fttol+1,exp@exponent+1
 13761  000D7A  C099  F084         	movff	exp@x,___ftsub@f1
 13762  000D7E  C09A  F085         	movff	exp@x+1,___ftsub@f1+1
 13763  000D82  C09B  F086         	movff	exp@x+2,___ftsub@f1+2
 13764  000D86  C09F  F020         	movff	exp@exponent,___awtoft@c
 13765  000D8A  C0A0  F021         	movff	exp@exponent+1,___awtoft@c+1
 13766  000D8E  EC8E  F019         	call	___awtoft	;wreg free
 13767  000D92  C020  F087         	movff	?___awtoft,___ftsub@f2
 13768  000D96  C021  F088         	movff	?___awtoft+1,___ftsub@f2+1
 13769  000D9A  C022  F089         	movff	?___awtoft+2,___ftsub@f2+2
 13770  000D9E  ECD6  F018         	call	___ftsub	;wreg free
 13771  000DA2  C084  F099         	movff	?___ftsub,exp@x
 13772  000DA6  C085  F09A         	movff	?___ftsub+1,exp@x+1
 13773  000DAA  C086  F09B         	movff	?___ftsub+2,exp@x+2
 13774  000DAE  C099  F084         	movff	exp@x,eval_poly@x
 13775  000DB2  C09A  F085         	movff	exp@x+1,eval_poly@x+1
 13776  000DB6  C09B  F086         	movff	exp@x+2,eval_poly@x+2
 13777  000DBA  0E55               	movlw	low exp@coeff
 13778  000DBC  0100               	movlb	0	; () banked
 13779  000DBE  6F87               	movwf	eval_poly@d& (0+255),b
 13780  000DC0  0E06               	movlw	high exp@coeff
 13781  000DC2  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 13782  000DC4  0E00               	movlw	0
 13783  000DC6  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 13784  000DC8  0E09               	movlw	9
 13785  000DCA  6F89               	movwf	eval_poly@n& (0+255),b
 13786  000DCC  ECC3  F00F         	call	_eval_poly	;wreg free
 13787  000DD0  C084  F090         	movff	?_eval_poly,ldexp@value
 13788  000DD4  C085  F091         	movff	?_eval_poly+1,ldexp@value+1
 13789  000DD8  C086  F092         	movff	?_eval_poly+2,ldexp@value+2
 13790  000DDC  C09F  F093         	movff	exp@exponent,ldexp@newexp
 13791  000DE0  C0A0  F094         	movff	exp@exponent+1,ldexp@newexp+1
 13792  000DE4  EC30  F010         	call	_ldexp	;wreg free
 13793  000DE8  C090  F099         	movff	?_ldexp,exp@x
 13794  000DEC  C091  F09A         	movff	?_ldexp+1,exp@x+1
 13795  000DF0  C092  F09B         	movff	?_ldexp+2,exp@x+2
 13796  000DF4  0100               	movlb	0	; () banked
 13797  000DF6  51A1               	movf	exp@sign& (0+255),w,b
 13798  000DF8  B4D8               	btfsc	status,2,c
 13799  000DFA  D025               	goto	l2108
 13800                           
 13801                           ; BSR set to: 0
 13802  000DFC  2999               	incf	exp@x& (0+255),w,b
 13803  000DFE  E10E               	bnz	l7398
 13804  000E00  0E7F               	movlw	127
 13805  000E02  199A               	xorwf	(exp@x+1)& (0+255),w,b
 13806  000E04  E10B               	bnz	l7398
 13807  000E06  0E7F               	movlw	127
 13808  000E08  199B               	xorwf	(exp@x+2)& (0+255),w,b
 13809  000E0A  A4D8               	btfss	status,2,c
 13810  000E0C  D007               	goto	l2109
 13811                           
 13812                           ; BSR set to: 0
 13813  000E0E  0E00               	movlw	0
 13814  000E10  6F99               	movwf	?_exp& (0+255),b
 13815  000E12  0E00               	movlw	0
 13816  000E14  6F9A               	movwf	(?_exp+1)& (0+255),b
 13817  000E16  0E00               	movlw	0
 13818  000E18  6F9B               	movwf	(?_exp+2)& (0+255),b
 13819                           
 13820                           ; BSR set to: 0
 13821  000E1A  0012               	return	
 13822  000E1C                     l2109:
 13823  000E1C                     l7398:
 13824                           
 13825                           ; BSR set to: 0
 13826  000E1C  0E00               	movlw	0
 13827  000E1E  6E29               	movwf	___ftdiv@f1,c
 13828  000E20  0E80               	movlw	128
 13829  000E22  6E2A               	movwf	___ftdiv@f1+1,c
 13830  000E24  0E3F               	movlw	63
 13831  000E26  6E2B               	movwf	___ftdiv@f1+2,c
 13832  000E28  C099  F02C         	movff	exp@x,___ftdiv@f2
 13833  000E2C  C09A  F02D         	movff	exp@x+1,___ftdiv@f2+1
 13834  000E30  C09B  F02E         	movff	exp@x+2,___ftdiv@f2+2
 13835  000E34  EC6C  F00E         	call	___ftdiv	;wreg free
 13836  000E38  C029  F099         	movff	?___ftdiv,?_exp
 13837  000E3C  C02A  F09A         	movff	?___ftdiv+1,?_exp+1
 13838  000E40  C02B  F09B         	movff	?___ftdiv+2,?_exp+2
 13839  000E44  0012               	return	
 13840  000E46                     l2108:
 13841                           
 13842                           ; BSR set to: 0
 13843  000E46  C099  F099         	movff	exp@x,?_exp
 13844  000E4A  C09A  F09A         	movff	exp@x+1,?_exp+1
 13845  000E4E  C09B  F09B         	movff	exp@x+2,?_exp+2
 13846  000E52  0012               	return		;funcret
 13847  000E54                     __end_of_exp:
 13848                           	opt stack 0
 13849                           tosu	equ	0xFFF
 13850                           tosh	equ	0xFFE
 13851                           tosl	equ	0xFFD
 13852                           pclath	equ	0xFFA
 13853                           tblptru	equ	0xFF8
 13854                           tblptrh	equ	0xFF7
 13855                           tblptrl	equ	0xFF6
 13856                           tablat	equ	0xFF5
 13857                           prodh	equ	0xFF4
 13858                           prodl	equ	0xFF3
 13859                           intcon	equ	0xFF2
 13860                           intcon2	equ	0xFF1
 13861                           postinc0	equ	0xFEE
 13862                           plusw0	equ	0xFEB
 13863                           wreg	equ	0xFE8
 13864                           indf1	equ	0xFE7
 13865                           postdec1	equ	0xFE5
 13866                           fsr1h	equ	0xFE2
 13867                           fsr1l	equ	0xFE1
 13868                           indf2	equ	0xFDF
 13869                           postinc2	equ	0xFDE
 13870                           postdec2	equ	0xFDD
 13871                           plusw2	equ	0xFDB
 13872                           fsr2h	equ	0xFDA
 13873                           fsr2l	equ	0xFD9
 13874                           status	equ	0xFD8
 13875                           
 13876 ;; *************** function _ldexp *****************
 13877 ;; Defined at:
 13878 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 13879 ;; Parameters:    Size  Location     Type
 13880 ;;  value           3   48[BANK0 ] unsigned char 
 13881 ;;  newexp          2   51[BANK0 ] int 
 13882 ;; Auto vars:     Size  Location     Type
 13883 ;;		None
 13884 ;; Return value:  Size  Location     Type
 13885 ;;                  3   48[BANK0 ] int 
 13886 ;; Registers used:
 13887 ;;		wreg, status,2, status,0
 13888 ;; Tracked objects:
 13889 ;;		On entry : 0/0
 13890 ;;		On exit  : 0/0
 13891 ;;		Unchanged: 0/0
 13892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13893 ;;      Params:         0       5       0       0       0       0       0
 13894 ;;      Locals:         0       0       0       0       0       0       0
 13895 ;;      Temps:          0       2       0       0       0       0       0
 13896 ;;      Totals:         0       7       0       0       0       0       0
 13897 ;;Total ram usage:        7 bytes
 13898 ;; Hardware stack levels used:    1
 13899 ;; Hardware stack levels required when called:    3
 13900 ;; This function calls:
 13901 ;;		Nothing
 13902 ;; This function is called by:
 13903 ;;		_exp
 13904 ;; This function uses a non-reentrant model
 13905 ;;
 13906                           
 13907                           	psect	text90
 13908  002060                     __ptext90:
 13909                           	opt stack 0
 13910  002060                     _ldexp:
 13911                           	opt stack 22
 13912                           
 13913                           ;incstack = 0
 13914  002060  0100               	movlb	0	; () banked
 13915  002062  5190               	movf	ldexp@value& (0+255),w,b
 13916  002064  1191               	iorwf	(ldexp@value+1)& (0+255),w,b
 13917  002066  1192               	iorwf	(ldexp@value+2)& (0+255),w,b
 13918  002068  A4D8               	btfss	status,2,c
 13919  00206A  D007               	goto	l2127
 13920                           
 13921                           ; BSR set to: 0
 13922  00206C  0E00               	movlw	0
 13923  00206E  6F90               	movwf	?_ldexp& (0+255),b
 13924  002070  0E00               	movlw	0
 13925  002072  6F91               	movwf	(?_ldexp+1)& (0+255),b
 13926  002074  0E00               	movlw	0
 13927  002076  6F92               	movwf	(?_ldexp+2)& (0+255),b
 13928                           
 13929                           ; BSR set to: 0
 13930  002078  0012               	return	
 13931  00207A                     l2127:
 13932                           
 13933                           ; BSR set to: 0
 13934                           
 13935                           ; BSR set to: 0
 13936  00207A  5192               	movf	(ldexp@value+2)& (0+255),w,b
 13937  00207C  0B7F               	andlw	127
 13938  00207E  6F95               	movwf	??_ldexp& (0+255),b
 13939  002080  6B96               	clrf	(??_ldexp+1)& (0+255),b
 13940  002082  90D8               	bcf	status,0,c
 13941  002084  3795               	rlcf	??_ldexp& (0+255),f,b
 13942  002086  3796               	rlcf	(??_ldexp+1)& (0+255),f,b
 13943  002088  5195               	movf	??_ldexp& (0+255),w,b
 13944  00208A  2793               	addwf	ldexp@newexp& (0+255),f,b
 13945  00208C  5196               	movf	(??_ldexp+1)& (0+255),w,b
 13946  00208E  2394               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 13947  002090  AF91               	btfss	(ldexp@value+1)& (0+255),7,b
 13948  002092  D003               	goto	u7010
 13949  002094  6B95               	clrf	??_ldexp& (0+255),b
 13950  002096  2B95               	incf	??_ldexp& (0+255),f,b
 13951  002098  D002               	goto	u7018
 13952  00209A                     u7010:
 13953  00209A  0100               	movlb	0	; () banked
 13954  00209C  6B95               	clrf	??_ldexp& (0+255),b
 13955  00209E                     u7018:
 13956  00209E  5195               	movf	??_ldexp& (0+255),w,b
 13957  0020A0  2793               	addwf	ldexp@newexp& (0+255),f,b
 13958  0020A2  0E00               	movlw	0
 13959  0020A4  2394               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 13960  0020A6  AF94               	btfss	(ldexp@newexp+1)& (0+255),7,b
 13961  0020A8  D00B               	goto	l2129
 13962                           
 13963                           ; BSR set to: 0
 13964  0020AA  0E00               	movlw	0
 13965  0020AC  6FC5               	movwf	(_errno+1)& (0+255),b
 13966  0020AE  0E22               	movlw	34
 13967  0020B0  6FC4               	movwf	_errno& (0+255),b
 13968  0020B2  0E00               	movlw	0
 13969  0020B4  6F90               	movwf	?_ldexp& (0+255),b
 13970  0020B6  0E00               	movlw	0
 13971  0020B8  6F91               	movwf	(?_ldexp+1)& (0+255),b
 13972  0020BA  0E00               	movlw	0
 13973  0020BC                     L2:
 13974  0020BC  6F92               	movwf	(?_ldexp+2)& (0+255),b
 13975                           
 13976                           ; BSR set to: 0
 13977  0020BE  0012               	return	
 13978  0020C0                     l2129:
 13979                           
 13980                           ; BSR set to: 0
 13981                           
 13982                           ; BSR set to: 0
 13983  0020C0  BF94               	btfsc	(ldexp@newexp+1)& (0+255),7,b
 13984  0020C2  D015               	goto	l2131
 13985  0020C4  0594               	decf	(ldexp@newexp+1)& (0+255),w,b
 13986  0020C6  A0D8               	btfss	status,0,c
 13987  0020C8  D012               	goto	l2131
 13988                           
 13989                           ; BSR set to: 0
 13990  0020CA  0E00               	movlw	0
 13991  0020CC  6FC5               	movwf	(_errno+1)& (0+255),b
 13992  0020CE  0E22               	movlw	34
 13993  0020D0  6FC4               	movwf	_errno& (0+255),b
 13994                           
 13995                           ; BSR set to: 0
 13996  0020D2  AF92               	btfss	(ldexp@value+2)& (0+255),7,b
 13997  0020D4  D006               	goto	l2132
 13998                           
 13999                           ; BSR set to: 0
 14000  0020D6  0EFF               	movlw	255
 14001  0020D8  6F90               	movwf	?_ldexp& (0+255),b
 14002  0020DA  0E7F               	movlw	127
 14003  0020DC  6F91               	movwf	(?_ldexp+1)& (0+255),b
 14004  0020DE  0EFF               	movlw	255
 14005  0020E0  D7ED               	goto	L2
 14006  0020E2                     l2132:
 14007                           
 14008                           ; BSR set to: 0
 14009                           
 14010                           ; BSR set to: 0
 14011  0020E2  0EFF               	movlw	255
 14012  0020E4  6F90               	movwf	?_ldexp& (0+255),b
 14013  0020E6  0E7F               	movlw	127
 14014  0020E8  6F91               	movwf	(?_ldexp+1)& (0+255),b
 14015  0020EA  0E7F               	movlw	127
 14016  0020EC  D7E7               	goto	L2
 14017  0020EE                     l2131:
 14018                           
 14019                           ; BSR set to: 0
 14020                           
 14021                           ; BSR set to: 0
 14022  0020EE  3594               	rlcf	(ldexp@newexp+1)& (0+255),w,b
 14023  0020F0  3194               	rrcf	(ldexp@newexp+1)& (0+255),w,b
 14024  0020F2  6F96               	movwf	(??_ldexp+1)& (0+255),b
 14025  0020F4  3193               	rrcf	ldexp@newexp& (0+255),w,b
 14026  0020F6  6F95               	movwf	??_ldexp& (0+255),b
 14027  0020F8  5192               	movf	(ldexp@value+2)& (0+255),w,b
 14028  0020FA  1995               	xorwf	??_ldexp& (0+255),w,b
 14029  0020FC  0B80               	andlw	-128
 14030  0020FE  1995               	xorwf	??_ldexp& (0+255),w,b
 14031  002100  6F92               	movwf	(ldexp@value+2)& (0+255),b
 14032  002102  C093  F095         	movff	ldexp@newexp,??_ldexp
 14033  002106  0E01               	movlw	1
 14034  002108  1795               	andwf	??_ldexp& (0+255),f,b
 14035  00210A  3395               	rrcf	??_ldexp& (0+255),f,b
 14036  00210C  3395               	rrcf	??_ldexp& (0+255),f,b
 14037  00210E  5191               	movf	(ldexp@value+1)& (0+255),w,b
 14038  002110  1995               	xorwf	??_ldexp& (0+255),w,b
 14039  002112  0B7F               	andlw	-129
 14040  002114  1995               	xorwf	??_ldexp& (0+255),w,b
 14041  002116  6F91               	movwf	(ldexp@value+1)& (0+255),b
 14042                           
 14043                           ; BSR set to: 0
 14044                           
 14045                           ; BSR set to: 0
 14046                           
 14047                           ; BSR set to: 0
 14048  002118  C090  F090         	movff	ldexp@value,?_ldexp
 14049  00211C  C091  F091         	movff	ldexp@value+1,?_ldexp+1
 14050  002120  C092  F092         	movff	ldexp@value+2,?_ldexp+2
 14051  002124  0012               	return	
 14052  002126                     __end_of_ldexp:
 14053                           	opt stack 0
 14054                           tosu	equ	0xFFF
 14055                           tosh	equ	0xFFE
 14056                           tosl	equ	0xFFD
 14057                           pclath	equ	0xFFA
 14058                           tblptru	equ	0xFF8
 14059                           tblptrh	equ	0xFF7
 14060                           tblptrl	equ	0xFF6
 14061                           tablat	equ	0xFF5
 14062                           prodh	equ	0xFF4
 14063                           prodl	equ	0xFF3
 14064                           intcon	equ	0xFF2
 14065                           intcon2	equ	0xFF1
 14066                           postinc0	equ	0xFEE
 14067                           plusw0	equ	0xFEB
 14068                           wreg	equ	0xFE8
 14069                           indf1	equ	0xFE7
 14070                           postdec1	equ	0xFE5
 14071                           fsr1h	equ	0xFE2
 14072                           fsr1l	equ	0xFE1
 14073                           indf2	equ	0xFDF
 14074                           postinc2	equ	0xFDE
 14075                           postdec2	equ	0xFDD
 14076                           plusw2	equ	0xFDB
 14077                           fsr2h	equ	0xFDA
 14078                           fsr2l	equ	0xFD9
 14079                           status	equ	0xFD8
 14080                           
 14081 ;; *************** function _floor *****************
 14082 ;; Defined at:
 14083 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
 14084 ;; Parameters:    Size  Location     Type
 14085 ;;  x               3   49[BANK0 ] int 
 14086 ;; Auto vars:     Size  Location     Type
 14087 ;;  i               3   52[BANK0 ] int 
 14088 ;;  expon           2   55[BANK0 ] int 
 14089 ;; Return value:  Size  Location     Type
 14090 ;;                  3   49[BANK0 ] int 
 14091 ;; Registers used:
 14092 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14093 ;; Tracked objects:
 14094 ;;		On entry : 0/0
 14095 ;;		On exit  : 0/0
 14096 ;;		Unchanged: 0/0
 14097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14098 ;;      Params:         0       3       0       0       0       0       0
 14099 ;;      Locals:         0       5       0       0       0       0       0
 14100 ;;      Temps:          0       0       0       0       0       0       0
 14101 ;;      Totals:         0       8       0       0       0       0       0
 14102 ;;Total ram usage:        8 bytes
 14103 ;; Hardware stack levels used:    1
 14104 ;; Hardware stack levels required when called:    5
 14105 ;; This function calls:
 14106 ;;		___altoft
 14107 ;;		___ftadd
 14108 ;;		___ftge
 14109 ;;		___fttol
 14110 ;;		_frexp
 14111 ;; This function is called by:
 14112 ;;		_exp
 14113 ;; This function uses a non-reentrant model
 14114 ;;
 14115                           
 14116                           	psect	text91
 14117  001EA4                     __ptext91:
 14118                           	opt stack 0
 14119  001EA4                     _floor:
 14120                           	opt stack 20
 14121                           
 14122                           ; BSR set to: 0
 14123                           ;incstack = 0
 14124  001EA4  C091  F018         	movff	floor@x,frexp@value
 14125  001EA8  C092  F019         	movff	floor@x+1,frexp@value+1
 14126  001EAC  C093  F01A         	movff	floor@x+2,frexp@value+2
 14127  001EB0  0E97               	movlw	low floor@expon
 14128  001EB2  6E1B               	movwf	frexp@eptr,c
 14129  001EB4  0E00               	movlw	high floor@expon
 14130  001EB6  6E1C               	movwf	frexp@eptr+1,c
 14131  001EB8  EC76  F013         	call	_frexp	;wreg free
 14132  001EBC  0100               	movlb	0	; () banked
 14133  001EBE  AF98               	btfss	(floor@expon+1)& (0+255),7,b
 14134  001EC0  D010               	goto	l2114
 14135                           
 14136                           ; BSR set to: 0
 14137  001EC2  AF93               	btfss	(floor@x+2)& (0+255),7,b
 14138  001EC4  D007               	goto	l2115
 14139                           
 14140                           ; BSR set to: 0
 14141  001EC6  0E00               	movlw	0
 14142  001EC8  6F91               	movwf	?_floor& (0+255),b
 14143  001ECA  0E80               	movlw	128
 14144  001ECC  6F92               	movwf	(?_floor+1)& (0+255),b
 14145  001ECE  0EBF               	movlw	191
 14146  001ED0  6F93               	movwf	(?_floor+2)& (0+255),b
 14147                           
 14148                           ; BSR set to: 0
 14149  001ED2  0012               	return	
 14150  001ED4                     l2115:
 14151                           
 14152                           ; BSR set to: 0
 14153                           
 14154                           ; BSR set to: 0
 14155  001ED4  0E00               	movlw	0
 14156  001ED6  6F91               	movwf	?_floor& (0+255),b
 14157  001ED8  0E00               	movlw	0
 14158  001EDA  6F92               	movwf	(?_floor+1)& (0+255),b
 14159  001EDC  0E00               	movlw	0
 14160  001EDE  6F93               	movwf	(?_floor+2)& (0+255),b
 14161                           
 14162                           ; BSR set to: 0
 14163  001EE0  0012               	return	
 14164  001EE2                     l2114:
 14165                           
 14166                           ; BSR set to: 0
 14167                           
 14168                           ; BSR set to: 0
 14169  001EE2  5198               	movf	(floor@expon+1)& (0+255),w,b
 14170  001EE4  E104               	bnz	u6970
 14171  001EE6  0E15               	movlw	21
 14172  001EE8  5D97               	subwf	floor@expon& (0+255),w,b
 14173  001EEA  A0D8               	btfss	status,0,c
 14174  001EEC  D007               	goto	l2117
 14175  001EEE                     u6970:
 14176                           
 14177                           ; BSR set to: 0
 14178  001EEE  C091  F091         	movff	floor@x,?_floor
 14179  001EF2  C092  F092         	movff	floor@x+1,?_floor+1
 14180  001EF6  C093  F093         	movff	floor@x+2,?_floor+2
 14181  001EFA  0012               	return	
 14182  001EFC                     l2117:
 14183                           
 14184                           ; BSR set to: 0
 14185                           
 14186                           ; BSR set to: 0
 14187  001EFC  C091  F078         	movff	floor@x,___fttol@f1
 14188  001F00  C092  F079         	movff	floor@x+1,___fttol@f1+1
 14189  001F04  C093  F07A         	movff	floor@x+2,___fttol@f1+2
 14190  001F08  EC75  F00D         	call	___fttol	;wreg free
 14191  001F0C  C078  F087         	movff	?___fttol,___altoft@c
 14192  001F10  C079  F088         	movff	?___fttol+1,___altoft@c+1
 14193  001F14  C07A  F089         	movff	?___fttol+2,___altoft@c+2
 14194  001F18  C07B  F08A         	movff	?___fttol+3,___altoft@c+3
 14195  001F1C  EC8C  F014         	call	___altoft	;wreg free
 14196  001F20  C087  F094         	movff	?___altoft,floor@i
 14197  001F24  C088  F095         	movff	?___altoft+1,floor@i+1
 14198  001F28  C089  F096         	movff	?___altoft+2,floor@i+2
 14199  001F2C  C091  F018         	movff	floor@x,___ftge@ff1
 14200  001F30  C092  F019         	movff	floor@x+1,___ftge@ff1+1
 14201  001F34  C093  F01A         	movff	floor@x+2,___ftge@ff1+2
 14202  001F38  C094  F01B         	movff	floor@i,___ftge@ff2
 14203  001F3C  C095  F01C         	movff	floor@i+1,___ftge@ff2+1
 14204  001F40  C096  F01D         	movff	floor@i+2,___ftge@ff2+2
 14205  001F44  ECBE  F013         	call	___ftge	;wreg free
 14206  001F48  B0D8               	btfsc	status,0,c
 14207  001F4A  D016               	goto	l2118
 14208  001F4C  C094  F078         	movff	floor@i,___ftadd@f1
 14209  001F50  C095  F079         	movff	floor@i+1,___ftadd@f1+1
 14210  001F54  C096  F07A         	movff	floor@i+2,___ftadd@f1+2
 14211  001F58  0E00               	movlw	0
 14212  001F5A  0100               	movlb	0	; () banked
 14213  001F5C  6F7B               	movwf	___ftadd@f2& (0+255),b
 14214  001F5E  0E80               	movlw	128
 14215  001F60  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 14216  001F62  0EBF               	movlw	191
 14217  001F64  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 14218  001F66  ECF0  F008         	call	___ftadd	;wreg free
 14219  001F6A  C078  F091         	movff	?___ftadd,?_floor
 14220  001F6E  C079  F092         	movff	?___ftadd+1,?_floor+1
 14221  001F72  C07A  F093         	movff	?___ftadd+2,?_floor+2
 14222  001F76  0012               	return	
 14223  001F78                     l2118:
 14224  001F78  C094  F091         	movff	floor@i,?_floor
 14225  001F7C  C095  F092         	movff	floor@i+1,?_floor+1
 14226  001F80  C096  F093         	movff	floor@i+2,?_floor+2
 14227  001F84  0012               	return		;funcret
 14228  001F86                     __end_of_floor:
 14229                           	opt stack 0
 14230                           tosu	equ	0xFFF
 14231                           tosh	equ	0xFFE
 14232                           tosl	equ	0xFFD
 14233                           pclath	equ	0xFFA
 14234                           tblptru	equ	0xFF8
 14235                           tblptrh	equ	0xFF7
 14236                           tblptrl	equ	0xFF6
 14237                           tablat	equ	0xFF5
 14238                           prodh	equ	0xFF4
 14239                           prodl	equ	0xFF3
 14240                           intcon	equ	0xFF2
 14241                           intcon2	equ	0xFF1
 14242                           postinc0	equ	0xFEE
 14243                           plusw0	equ	0xFEB
 14244                           wreg	equ	0xFE8
 14245                           indf1	equ	0xFE7
 14246                           postdec1	equ	0xFE5
 14247                           fsr1h	equ	0xFE2
 14248                           fsr1l	equ	0xFE1
 14249                           indf2	equ	0xFDF
 14250                           postinc2	equ	0xFDE
 14251                           postdec2	equ	0xFDD
 14252                           plusw2	equ	0xFDB
 14253                           fsr2h	equ	0xFDA
 14254                           fsr2l	equ	0xFD9
 14255                           status	equ	0xFD8
 14256                           
 14257 ;; *************** function _frexp *****************
 14258 ;; Defined at:
 14259 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 14260 ;; Parameters:    Size  Location     Type
 14261 ;;  value           3   23[COMRAM] int 
 14262 ;;  eptr            2   26[COMRAM] PTR int 
 14263 ;;		 -> log@exponent(2), floor@expon(2), 
 14264 ;; Auto vars:     Size  Location     Type
 14265 ;;		None
 14266 ;; Return value:  Size  Location     Type
 14267 ;;                  3   23[COMRAM] PTR int 
 14268 ;; Registers used:
 14269 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14270 ;; Tracked objects:
 14271 ;;		On entry : 0/0
 14272 ;;		On exit  : 0/0
 14273 ;;		Unchanged: 0/0
 14274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14275 ;;      Params:         5       0       0       0       0       0       0
 14276 ;;      Locals:         0       0       0       0       0       0       0
 14277 ;;      Temps:          2       0       0       0       0       0       0
 14278 ;;      Totals:         7       0       0       0       0       0       0
 14279 ;;Total ram usage:        7 bytes
 14280 ;; Hardware stack levels used:    1
 14281 ;; Hardware stack levels required when called:    3
 14282 ;; This function calls:
 14283 ;;		Nothing
 14284 ;; This function is called by:
 14285 ;;		_floor
 14286 ;;		_log
 14287 ;; This function uses a non-reentrant model
 14288 ;;
 14289                           
 14290                           	psect	text92
 14291  0026EC                     __ptext92:
 14292                           	opt stack 0
 14293  0026EC                     _frexp:
 14294                           	opt stack 22
 14295                           
 14296                           ;incstack = 0
 14297  0026EC  5018               	movf	frexp@value,w,c
 14298  0026EE  1019               	iorwf	frexp@value+1,w,c
 14299  0026F0  101A               	iorwf	frexp@value+2,w,c
 14300  0026F2  A4D8               	btfss	status,2,c
 14301  0026F4  D00F               	goto	l2123
 14302  0026F6  C01B  FFD9         	movff	frexp@eptr,fsr2l
 14303  0026FA  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 14304  0026FE  0E00               	movlw	0
 14305  002700  6EDE               	movwf	postinc2,c
 14306  002702  0E00               	movlw	0
 14307  002704  6EDD               	movwf	postdec2,c
 14308  002706  0E00               	movlw	0
 14309  002708  6E18               	movwf	?_frexp,c
 14310  00270A  0E00               	movlw	0
 14311  00270C  6E19               	movwf	?_frexp+1,c
 14312  00270E  0E00               	movlw	0
 14313  002710  6E1A               	movwf	?_frexp+2,c
 14314  002712  0012               	return	
 14315  002714                     l2123:
 14316  002714  501A               	movf	frexp@value+2,w,c
 14317  002716  0B7F               	andlw	127
 14318  002718  6E1D               	movwf	??_frexp& (0+255),c
 14319  00271A  6A1E               	clrf	(??_frexp+1)& (0+255),c
 14320  00271C  90D8               	bcf	status,0,c
 14321  00271E  361D               	rlcf	??_frexp,f,c
 14322  002720  361E               	rlcf	??_frexp+1,f,c
 14323  002722  C01B  FFD9         	movff	frexp@eptr,fsr2l
 14324  002726  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 14325  00272A  C01D  FFDE         	movff	??_frexp,postinc2
 14326  00272E  C01E  FFDD         	movff	??_frexp+1,postdec2
 14327  002732  AE19               	btfss	frexp@value+1,7,c
 14328  002734  D003               	goto	u6570
 14329  002736  6A1D               	clrf	??_frexp& (0+255),c
 14330  002738  2A1D               	incf	??_frexp& (0+255),f,c
 14331  00273A  D001               	goto	u6578
 14332  00273C                     u6570:
 14333  00273C  6A1D               	clrf	??_frexp& (0+255),c
 14334  00273E                     u6578:
 14335  00273E  501D               	movf	??_frexp,w,c
 14336  002740  C01B  FFD9         	movff	frexp@eptr,fsr2l
 14337  002744  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 14338  002748  12DE               	iorwf	postinc2,f,c
 14339  00274A  0E00               	movlw	0
 14340  00274C  12DD               	iorwf	postdec2,f,c
 14341  00274E  C01B  FFD9         	movff	frexp@eptr,fsr2l
 14342  002752  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 14343  002756  0E82               	movlw	130
 14344  002758  26DE               	addwf	postinc2,f,c
 14345  00275A  0EFF               	movlw	255
 14346  00275C  22DD               	addwfc	postdec2,f,c
 14347  00275E  801A               	bsf	frexp@value+2,0,c
 14348  002760  821A               	bsf	frexp@value+2,1,c
 14349  002762  841A               	bsf	frexp@value+2,2,c
 14350  002764  861A               	bsf	frexp@value+2,3,c
 14351  002766  881A               	bsf	frexp@value+2,4,c
 14352  002768  8A1A               	bsf	frexp@value+2,5,c
 14353  00276A  9C1A               	bcf	frexp@value+2,6,c
 14354  00276C  9E19               	bcf	frexp@value+1,7,c
 14355  00276E  C018  F018         	movff	frexp@value,?_frexp
 14356  002772  C019  F019         	movff	frexp@value+1,?_frexp+1
 14357  002776  C01A  F01A         	movff	frexp@value+2,?_frexp+2
 14358  00277A  0012               	return	
 14359  00277C                     __end_of_frexp:
 14360                           	opt stack 0
 14361                           tosu	equ	0xFFF
 14362                           tosh	equ	0xFFE
 14363                           tosl	equ	0xFFD
 14364                           pclath	equ	0xFFA
 14365                           tblptru	equ	0xFF8
 14366                           tblptrh	equ	0xFF7
 14367                           tblptrl	equ	0xFF6
 14368                           tablat	equ	0xFF5
 14369                           prodh	equ	0xFF4
 14370                           prodl	equ	0xFF3
 14371                           intcon	equ	0xFF2
 14372                           intcon2	equ	0xFF1
 14373                           postinc0	equ	0xFEE
 14374                           plusw0	equ	0xFEB
 14375                           wreg	equ	0xFE8
 14376                           indf1	equ	0xFE7
 14377                           postdec1	equ	0xFE5
 14378                           fsr1h	equ	0xFE2
 14379                           fsr1l	equ	0xFE1
 14380                           indf2	equ	0xFDF
 14381                           postinc2	equ	0xFDE
 14382                           postdec2	equ	0xFDD
 14383                           plusw2	equ	0xFDB
 14384                           fsr2h	equ	0xFDA
 14385                           fsr2l	equ	0xFD9
 14386                           status	equ	0xFD8
 14387                           
 14388 ;; *************** function ___fttol *****************
 14389 ;; Defined at:
 14390 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 14391 ;; Parameters:    Size  Location     Type
 14392 ;;  f1              3   24[BANK0 ] float 
 14393 ;; Auto vars:     Size  Location     Type
 14394 ;;  lval            4   34[BANK0 ] unsigned long 
 14395 ;;  exp1            1   38[BANK0 ] unsigned char 
 14396 ;;  sign1           1   33[BANK0 ] unsigned char 
 14397 ;; Return value:  Size  Location     Type
 14398 ;;                  4   24[BANK0 ] long 
 14399 ;; Registers used:
 14400 ;;		wreg, status,2, status,0
 14401 ;; Tracked objects:
 14402 ;;		On entry : 0/0
 14403 ;;		On exit  : 0/0
 14404 ;;		Unchanged: 0/0
 14405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14406 ;;      Params:         0       4       0       0       0       0       0
 14407 ;;      Locals:         0       6       0       0       0       0       0
 14408 ;;      Temps:          0       5       0       0       0       0       0
 14409 ;;      Totals:         0      15       0       0       0       0       0
 14410 ;;Total ram usage:       15 bytes
 14411 ;; Hardware stack levels used:    1
 14412 ;; Hardware stack levels required when called:    3
 14413 ;; This function calls:
 14414 ;;		Nothing
 14415 ;; This function is called by:
 14416 ;;		_AdcConvert
 14417 ;;		_ReadIntFromEeprom
 14418 ;;		_pow
 14419 ;;		_exp
 14420 ;;		_floor
 14421 ;; This function uses a non-reentrant model
 14422 ;;
 14423                           
 14424                           	psect	text93
 14425  001AEA                     __ptext93:
 14426                           	opt stack 0
 14427  001AEA                     ___fttol:
 14428                           	opt stack 21
 14429                           
 14430                           ;incstack = 0
 14431  001AEA  C07A  F07C         	movff	___fttol@f1+2,??___fttol
 14432  001AEE  0100               	movlb	0	; () banked
 14433  001AF0  6B7D               	clrf	(??___fttol+1)& (0+255),b
 14434  001AF2  6B7E               	clrf	(??___fttol+2)& (0+255),b
 14435  001AF4  3579               	rlcf	(___fttol@f1+1)& (0+255),w,b
 14436  001AF6  377C               	rlcf	??___fttol& (0+255),f,b
 14437  001AF8  E301               	bnc	u6481
 14438  001AFA  817D               	bsf	(??___fttol+1)& (0+255),0,b
 14439  001AFC                     u6481:
 14440  001AFC  517C               	movf	??___fttol& (0+255),w,b
 14441  001AFE  6F86               	movwf	___fttol@exp1& (0+255),b
 14442  001B00  5186               	movf	___fttol@exp1& (0+255),w,b
 14443  001B02  A4D8               	btfss	status,2,c
 14444  001B04  D009               	goto	l1780
 14445                           
 14446                           ; BSR set to: 0
 14447  001B06  0E00               	movlw	0
 14448  001B08  6F78               	movwf	?___fttol& (0+255),b
 14449  001B0A  0E00               	movlw	0
 14450  001B0C  6F79               	movwf	(?___fttol+1)& (0+255),b
 14451  001B0E  0E00               	movlw	0
 14452  001B10  6F7A               	movwf	(?___fttol+2)& (0+255),b
 14453  001B12  0E00               	movlw	0
 14454  001B14  6F7B               	movwf	(?___fttol+3)& (0+255),b
 14455                           
 14456                           ; BSR set to: 0
 14457  001B16  0012               	return	
 14458  001B18                     l1780:
 14459                           
 14460                           ; BSR set to: 0
 14461                           
 14462                           ; BSR set to: 0
 14463  001B18  0E17               	movlw	23
 14464  001B1A  6F7C               	movwf	??___fttol& (0+255),b
 14465  001B1C  C078  F07D         	movff	___fttol@f1,??___fttol+1
 14466  001B20  C079  F07E         	movff	___fttol@f1+1,??___fttol+2
 14467  001B24  C07A  F07F         	movff	___fttol@f1+2,??___fttol+3
 14468  001B28  297C               	incf	??___fttol& (0+255),w,b
 14469  001B2A  6F80               	movwf	(??___fttol+4)& (0+255),b
 14470  001B2C  D004               	goto	u6500
 14471  001B2E                     u6505:
 14472  001B2E  90D8               	bcf	status,0,c
 14473  001B30  337F               	rrcf	(??___fttol+3)& (0+255),f,b
 14474  001B32  337E               	rrcf	(??___fttol+2)& (0+255),f,b
 14475  001B34  337D               	rrcf	(??___fttol+1)& (0+255),f,b
 14476  001B36                     u6500:
 14477  001B36  2F80               	decfsz	(??___fttol+4)& (0+255),f,b
 14478  001B38  D7FA               	goto	u6505
 14479  001B3A  0100               	movlb	0	; () banked
 14480  001B3C  517D               	movf	(??___fttol+1)& (0+255),w,b
 14481  001B3E  6F81               	movwf	___fttol@sign1& (0+255),b
 14482                           
 14483                           ; BSR set to: 0
 14484  001B40  8F79               	bsf	(___fttol@f1+1)& (0+255),7,b
 14485                           
 14486                           ; BSR set to: 0
 14487  001B42  0EFF               	movlw	255
 14488  001B44  1778               	andwf	___fttol@f1& (0+255),f,b
 14489  001B46  0EFF               	movlw	255
 14490  001B48  1779               	andwf	(___fttol@f1+1)& (0+255),f,b
 14491  001B4A  0E00               	movlw	0
 14492  001B4C  177A               	andwf	(___fttol@f1+2)& (0+255),f,b
 14493                           
 14494                           ; BSR set to: 0
 14495  001B4E  5178               	movf	___fttol@f1& (0+255),w,b
 14496  001B50  6F82               	movwf	___fttol@lval& (0+255),b
 14497  001B52  5179               	movf	(___fttol@f1+1)& (0+255),w,b
 14498  001B54  6F83               	movwf	(___fttol@lval+1)& (0+255),b
 14499  001B56  517A               	movf	(___fttol@f1+2)& (0+255),w,b
 14500  001B58  6F84               	movwf	(___fttol@lval+2)& (0+255),b
 14501  001B5A  6B85               	clrf	(___fttol@lval+3)& (0+255),b
 14502                           
 14503                           ; BSR set to: 0
 14504  001B5C  0E8E               	movlw	142
 14505  001B5E  5F86               	subwf	___fttol@exp1& (0+255),f,b
 14506                           
 14507                           ; BSR set to: 0
 14508  001B60  AF86               	btfss	___fttol@exp1& (0+255),7,b
 14509  001B62  D016               	goto	l1782
 14510                           
 14511                           ; BSR set to: 0
 14512  001B64  5186               	movf	___fttol@exp1& (0+255),w,b
 14513  001B66  0A80               	xorlw	128
 14514  001B68  0F8F               	addlw	143
 14515  001B6A  B0D8               	btfsc	status,0,c
 14516  001B6C  D009               	goto	l1783
 14517                           
 14518                           ; BSR set to: 0
 14519  001B6E  0E00               	movlw	0
 14520  001B70  6F78               	movwf	?___fttol& (0+255),b
 14521  001B72  0E00               	movlw	0
 14522  001B74  6F79               	movwf	(?___fttol+1)& (0+255),b
 14523  001B76  0E00               	movlw	0
 14524  001B78  6F7A               	movwf	(?___fttol+2)& (0+255),b
 14525  001B7A  0E00               	movlw	0
 14526  001B7C  6F7B               	movwf	(?___fttol+3)& (0+255),b
 14527                           
 14528                           ; BSR set to: 0
 14529  001B7E  0012               	return	
 14530  001B80                     l1783:
 14531                           
 14532                           ; BSR set to: 0
 14533                           
 14534                           ; BSR set to: 0
 14535                           
 14536                           ; BSR set to: 0
 14537  001B80  90D8               	bcf	status,0,c
 14538  001B82  3385               	rrcf	(___fttol@lval+3)& (0+255),f,b
 14539  001B84  3384               	rrcf	(___fttol@lval+2)& (0+255),f,b
 14540  001B86  3383               	rrcf	(___fttol@lval+1)& (0+255),f,b
 14541  001B88  3382               	rrcf	___fttol@lval& (0+255),f,b
 14542                           
 14543                           ; BSR set to: 0
 14544  001B8A  3F86               	incfsz	___fttol@exp1& (0+255),f,b
 14545  001B8C  D7F9               	goto	l1783
 14546                           
 14547                           ; BSR set to: 0
 14548  001B8E  D015               	goto	u6540
 14549  001B90                     l1782:
 14550                           
 14551                           ; BSR set to: 0
 14552                           
 14553                           ; BSR set to: 0
 14554  001B90  0E17               	movlw	23
 14555  001B92  6586               	cpfsgt	___fttol@exp1& (0+255),b
 14556  001B94  D00F               	goto	l1788
 14557                           
 14558                           ; BSR set to: 0
 14559  001B96  0E00               	movlw	0
 14560  001B98  6F78               	movwf	?___fttol& (0+255),b
 14561  001B9A  0E00               	movlw	0
 14562  001B9C  6F79               	movwf	(?___fttol+1)& (0+255),b
 14563  001B9E  0E00               	movlw	0
 14564  001BA0  6F7A               	movwf	(?___fttol+2)& (0+255),b
 14565  001BA2  0E00               	movlw	0
 14566  001BA4  6F7B               	movwf	(?___fttol+3)& (0+255),b
 14567                           
 14568                           ; BSR set to: 0
 14569  001BA6  0012               	return	
 14570  001BA8                     
 14571                           ; BSR set to: 0
 14572                           
 14573                           ; BSR set to: 0
 14574  001BA8  90D8               	bcf	status,0,c
 14575  001BAA  3782               	rlcf	___fttol@lval& (0+255),f,b
 14576  001BAC  3783               	rlcf	(___fttol@lval+1)& (0+255),f,b
 14577  001BAE  3784               	rlcf	(___fttol@lval+2)& (0+255),f,b
 14578  001BB0  3785               	rlcf	(___fttol@lval+3)& (0+255),f,b
 14579  001BB2  0786               	decf	___fttol@exp1& (0+255),f,b
 14580  001BB4                     l1788:
 14581                           
 14582                           ; BSR set to: 0
 14583                           
 14584                           ; BSR set to: 0
 14585  001BB4  5186               	movf	___fttol@exp1& (0+255),w,b
 14586  001BB6  A4D8               	btfss	status,2,c
 14587  001BB8  D7F7               	goto	l1789
 14588  001BBA                     u6540:
 14589                           
 14590                           ; BSR set to: 0
 14591                           
 14592                           ; BSR set to: 0
 14593                           
 14594                           ; BSR set to: 0
 14595  001BBA  5181               	movf	___fttol@sign1& (0+255),w,b
 14596  001BBC  B4D8               	btfsc	status,2,c
 14597  001BBE  D008               	goto	l1791
 14598                           
 14599                           ; BSR set to: 0
 14600  001BC0  1F85               	comf	(___fttol@lval+3)& (0+255),f,b
 14601  001BC2  1F84               	comf	(___fttol@lval+2)& (0+255),f,b
 14602  001BC4  1F83               	comf	(___fttol@lval+1)& (0+255),f,b
 14603  001BC6  6D82               	negf	___fttol@lval& (0+255),b
 14604  001BC8  0E00               	movlw	0
 14605  001BCA  2383               	addwfc	(___fttol@lval+1)& (0+255),f,b
 14606  001BCC  2384               	addwfc	(___fttol@lval+2)& (0+255),f,b
 14607  001BCE  2385               	addwfc	(___fttol@lval+3)& (0+255),f,b
 14608  001BD0                     l1791:
 14609                           
 14610                           ; BSR set to: 0
 14611                           
 14612                           ; BSR set to: 0
 14613  001BD0  C082  F078         	movff	___fttol@lval,?___fttol
 14614  001BD4  C083  F079         	movff	___fttol@lval+1,?___fttol+1
 14615  001BD8  C084  F07A         	movff	___fttol@lval+2,?___fttol+2
 14616  001BDC  C085  F07B         	movff	___fttol@lval+3,?___fttol+3
 14617  001BE0  0012               	return	
 14618  001BE2                     __end_of___fttol:
 14619                           	opt stack 0
 14620                           tosu	equ	0xFFF
 14621                           tosh	equ	0xFFE
 14622                           tosl	equ	0xFFD
 14623                           pclath	equ	0xFFA
 14624                           tblptru	equ	0xFF8
 14625                           tblptrh	equ	0xFF7
 14626                           tblptrl	equ	0xFF6
 14627                           tablat	equ	0xFF5
 14628                           prodh	equ	0xFF4
 14629                           prodl	equ	0xFF3
 14630                           intcon	equ	0xFF2
 14631                           intcon2	equ	0xFF1
 14632                           postinc0	equ	0xFEE
 14633                           plusw0	equ	0xFEB
 14634                           wreg	equ	0xFE8
 14635                           indf1	equ	0xFE7
 14636                           postdec1	equ	0xFE5
 14637                           fsr1h	equ	0xFE2
 14638                           fsr1l	equ	0xFE1
 14639                           indf2	equ	0xFDF
 14640                           postinc2	equ	0xFDE
 14641                           postdec2	equ	0xFDD
 14642                           plusw2	equ	0xFDB
 14643                           fsr2h	equ	0xFDA
 14644                           fsr2l	equ	0xFD9
 14645                           status	equ	0xFD8
 14646                           
 14647 ;; *************** function ___ftge *****************
 14648 ;; Defined at:
 14649 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 14650 ;; Parameters:    Size  Location     Type
 14651 ;;  ff1             3   23[COMRAM] float 
 14652 ;;  ff2             3   26[COMRAM] float 
 14653 ;; Auto vars:     Size  Location     Type
 14654 ;;		None
 14655 ;; Return value:  Size  Location     Type
 14656 ;;		None               void
 14657 ;; Registers used:
 14658 ;;		wreg, status,2, status,0
 14659 ;; Tracked objects:
 14660 ;;		On entry : 0/0
 14661 ;;		On exit  : 0/0
 14662 ;;		Unchanged: 0/0
 14663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14664 ;;      Params:         6       0       0       0       0       0       0
 14665 ;;      Locals:         0       0       0       0       0       0       0
 14666 ;;      Temps:          3       0       0       0       0       0       0
 14667 ;;      Totals:         9       0       0       0       0       0       0
 14668 ;;Total ram usage:        9 bytes
 14669 ;; Hardware stack levels used:    1
 14670 ;; Hardware stack levels required when called:    3
 14671 ;; This function calls:
 14672 ;;		Nothing
 14673 ;; This function is called by:
 14674 ;;		_CheckFlashPrecentage
 14675 ;;		_pow
 14676 ;;		_exp
 14677 ;;		_floor
 14678 ;; This function uses a non-reentrant model
 14679 ;;
 14680                           
 14681                           	psect	text94
 14682  00277C                     __ptext94:
 14683                           	opt stack 0
 14684  00277C                     ___ftge:
 14685                           	opt stack 21
 14686                           
 14687                           ; BSR set to: 0
 14688                           ;incstack = 0
 14689  00277C  AE1A               	btfss	___ftge@ff1+2,7,c
 14690  00277E  D016               	goto	l1752
 14691  002780  C018  F01E         	movff	___ftge@ff1,??___ftge
 14692  002784  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
 14693  002788  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
 14694  00278C  1E1E               	comf	??___ftge,f,c
 14695  00278E  1E1F               	comf	??___ftge+1,f,c
 14696  002790  1E20               	comf	??___ftge+2,f,c
 14697  002792  2A1E               	incf	??___ftge,f,c
 14698  002794  0E00               	movlw	0
 14699  002796  221F               	addwfc	??___ftge+1,f,c
 14700  002798  2220               	addwfc	??___ftge+2,f,c
 14701  00279A  0E00               	movlw	0
 14702  00279C  241E               	addwf	??___ftge,w,c
 14703  00279E  6E18               	movwf	___ftge@ff1,c
 14704  0027A0  0E00               	movlw	0
 14705  0027A2  201F               	addwfc	??___ftge+1,w,c
 14706  0027A4  6E19               	movwf	___ftge@ff1+1,c
 14707  0027A6  0E80               	movlw	128
 14708  0027A8  2020               	addwfc	??___ftge+2,w,c
 14709  0027AA  6E1A               	movwf	___ftge@ff1+2,c
 14710  0027AC                     l1752:
 14711  0027AC  AE1D               	btfss	___ftge@ff2+2,7,c
 14712  0027AE  D016               	goto	l1753
 14713  0027B0  C01B  F01E         	movff	___ftge@ff2,??___ftge
 14714  0027B4  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
 14715  0027B8  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
 14716  0027BC  1E1E               	comf	??___ftge,f,c
 14717  0027BE  1E1F               	comf	??___ftge+1,f,c
 14718  0027C0  1E20               	comf	??___ftge+2,f,c
 14719  0027C2  2A1E               	incf	??___ftge,f,c
 14720  0027C4  0E00               	movlw	0
 14721  0027C6  221F               	addwfc	??___ftge+1,f,c
 14722  0027C8  2220               	addwfc	??___ftge+2,f,c
 14723  0027CA  0E00               	movlw	0
 14724  0027CC  241E               	addwf	??___ftge,w,c
 14725  0027CE  6E1B               	movwf	___ftge@ff2,c
 14726  0027D0  0E00               	movlw	0
 14727  0027D2  201F               	addwfc	??___ftge+1,w,c
 14728  0027D4  6E1C               	movwf	___ftge@ff2+1,c
 14729  0027D6  0E80               	movlw	128
 14730  0027D8  2020               	addwfc	??___ftge+2,w,c
 14731  0027DA  6E1D               	movwf	___ftge@ff2+2,c
 14732  0027DC                     l1753:
 14733  0027DC  0E00               	movlw	0
 14734  0027DE  1A18               	xorwf	___ftge@ff1,f,c
 14735  0027E0  0E00               	movlw	0
 14736  0027E2  1A19               	xorwf	___ftge@ff1+1,f,c
 14737  0027E4  0E80               	movlw	128
 14738  0027E6  1A1A               	xorwf	___ftge@ff1+2,f,c
 14739  0027E8  0E00               	movlw	0
 14740  0027EA  1A1B               	xorwf	___ftge@ff2,f,c
 14741  0027EC  0E00               	movlw	0
 14742  0027EE  1A1C               	xorwf	___ftge@ff2+1,f,c
 14743  0027F0  0E80               	movlw	128
 14744  0027F2  1A1D               	xorwf	___ftge@ff2+2,f,c
 14745  0027F4  501B               	movf	___ftge@ff2,w,c
 14746  0027F6  5C18               	subwf	___ftge@ff1,w,c
 14747  0027F8  501C               	movf	___ftge@ff2+1,w,c
 14748  0027FA  5819               	subwfb	___ftge@ff1+1,w,c
 14749  0027FC  501D               	movf	___ftge@ff2+2,w,c
 14750  0027FE  581A               	subwfb	___ftge@ff1+2,w,c
 14751  002800  B0D8               	btfsc	status,0,c
 14752  002802  D002               	goto	l6496
 14753  002804  90D8               	bcf	status,0,c
 14754  002806  0012               	return	
 14755  002808                     l6496:
 14756  002808  80D8               	bsf	status,0,c
 14757  00280A  0012               	return	
 14758  00280C                     __end_of___ftge:
 14759                           	opt stack 0
 14760                           tosu	equ	0xFFF
 14761                           tosh	equ	0xFFE
 14762                           tosl	equ	0xFFD
 14763                           pclath	equ	0xFFA
 14764                           tblptru	equ	0xFF8
 14765                           tblptrh	equ	0xFF7
 14766                           tblptrl	equ	0xFF6
 14767                           tablat	equ	0xFF5
 14768                           prodh	equ	0xFF4
 14769                           prodl	equ	0xFF3
 14770                           intcon	equ	0xFF2
 14771                           intcon2	equ	0xFF1
 14772                           postinc0	equ	0xFEE
 14773                           plusw0	equ	0xFEB
 14774                           wreg	equ	0xFE8
 14775                           indf1	equ	0xFE7
 14776                           postdec1	equ	0xFE5
 14777                           fsr1h	equ	0xFE2
 14778                           fsr1l	equ	0xFE1
 14779                           indf2	equ	0xFDF
 14780                           postinc2	equ	0xFDE
 14781                           postdec2	equ	0xFDD
 14782                           plusw2	equ	0xFDB
 14783                           fsr2h	equ	0xFDA
 14784                           fsr2l	equ	0xFD9
 14785                           status	equ	0xFD8
 14786                           
 14787 ;; *************** function ___altoft *****************
 14788 ;; Defined at:
 14789 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 14790 ;; Parameters:    Size  Location     Type
 14791 ;;  c               4   39[BANK0 ] long 
 14792 ;; Auto vars:     Size  Location     Type
 14793 ;;  sign            1   48[BANK0 ] unsigned char 
 14794 ;;  exp             1   47[BANK0 ] unsigned char 
 14795 ;; Return value:  Size  Location     Type
 14796 ;;                  3   39[BANK0 ] float 
 14797 ;; Registers used:
 14798 ;;		wreg, status,2, status,0, cstack
 14799 ;; Tracked objects:
 14800 ;;		On entry : 0/0
 14801 ;;		On exit  : 0/0
 14802 ;;		Unchanged: 0/0
 14803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14804 ;;      Params:         0       4       0       0       0       0       0
 14805 ;;      Locals:         0       2       0       0       0       0       0
 14806 ;;      Temps:          0       4       0       0       0       0       0
 14807 ;;      Totals:         0      10       0       0       0       0       0
 14808 ;;Total ram usage:       10 bytes
 14809 ;; Hardware stack levels used:    1
 14810 ;; Hardware stack levels required when called:    4
 14811 ;; This function calls:
 14812 ;;		___ftpack
 14813 ;; This function is called by:
 14814 ;;		_floor
 14815 ;; This function uses a non-reentrant model
 14816 ;;
 14817                           
 14818                           	psect	text95
 14819  002918                     __ptext95:
 14820                           	opt stack 0
 14821  002918                     ___altoft:
 14822                           	opt stack 20
 14823                           
 14824                           ;incstack = 0
 14825  002918  0E00               	movlw	0
 14826  00291A  0100               	movlb	0	; () banked
 14827  00291C  6F90               	movwf	___altoft@sign& (0+255),b
 14828  00291E  0E8E               	movlw	142
 14829  002920  6F8F               	movwf	___altoft@exp& (0+255),b
 14830                           
 14831                           ; BSR set to: 0
 14832  002922  AF8A               	btfss	(___altoft@c+3)& (0+255),7,b
 14833  002924  D011               	goto	l1550
 14834                           
 14835                           ; BSR set to: 0
 14836  002926  1F8A               	comf	(___altoft@c+3)& (0+255),f,b
 14837  002928  1F89               	comf	(___altoft@c+2)& (0+255),f,b
 14838  00292A  1F88               	comf	(___altoft@c+1)& (0+255),f,b
 14839  00292C  6D87               	negf	___altoft@c& (0+255),b
 14840  00292E  0E00               	movlw	0
 14841  002930  2388               	addwfc	(___altoft@c+1)& (0+255),f,b
 14842  002932  2389               	addwfc	(___altoft@c+2)& (0+255),f,b
 14843  002934  238A               	addwfc	(___altoft@c+3)& (0+255),f,b
 14844                           
 14845                           ; BSR set to: 0
 14846  002936  0E01               	movlw	1
 14847  002938  6F90               	movwf	___altoft@sign& (0+255),b
 14848                           
 14849                           ; BSR set to: 0
 14850  00293A  D006               	goto	l1550
 14851  00293C                     
 14852                           ; BSR set to: 0
 14853                           
 14854                           ; BSR set to: 0
 14855  00293C  90D8               	bcf	status,0,c
 14856  00293E  338A               	rrcf	(___altoft@c+3)& (0+255),f,b
 14857  002940  3389               	rrcf	(___altoft@c+2)& (0+255),f,b
 14858  002942  3388               	rrcf	(___altoft@c+1)& (0+255),f,b
 14859  002944  3387               	rrcf	___altoft@c& (0+255),f,b
 14860  002946  2B8F               	incf	___altoft@exp& (0+255),f,b
 14861  002948                     l1550:
 14862                           
 14863                           ; BSR set to: 0
 14864                           
 14865                           ; BSR set to: 0
 14866  002948  0E00               	movlw	0
 14867  00294A  1587               	andwf	___altoft@c& (0+255),w,b
 14868  00294C  6F8B               	movwf	??___altoft& (0+255),b
 14869  00294E  0E00               	movlw	0
 14870  002950  1588               	andwf	(___altoft@c+1)& (0+255),w,b
 14871  002952  6F8C               	movwf	(??___altoft+1)& (0+255),b
 14872  002954  0E00               	movlw	0
 14873  002956  1589               	andwf	(___altoft@c+2)& (0+255),w,b
 14874  002958  6F8D               	movwf	(??___altoft+2)& (0+255),b
 14875  00295A  0EFF               	movlw	255
 14876  00295C  158A               	andwf	(___altoft@c+3)& (0+255),w,b
 14877  00295E  6F8E               	movwf	(??___altoft+3)& (0+255),b
 14878  002960  518B               	movf	??___altoft& (0+255),w,b
 14879  002962  118C               	iorwf	(??___altoft+1)& (0+255),w,b
 14880  002964  118D               	iorwf	(??___altoft+2)& (0+255),w,b
 14881  002966  118E               	iorwf	(??___altoft+3)& (0+255),w,b
 14882  002968  A4D8               	btfss	status,2,c
 14883  00296A  D7E8               	goto	l1551
 14884                           
 14885                           ; BSR set to: 0
 14886                           
 14887                           ; BSR set to: 0
 14888  00296C  C087  F018         	movff	___altoft@c,___ftpack@arg
 14889  002970  C088  F019         	movff	___altoft@c+1,___ftpack@arg+1
 14890  002974  C089  F01A         	movff	___altoft@c+2,___ftpack@arg+2
 14891  002978  C08F  F01B         	movff	___altoft@exp,___ftpack@exp
 14892  00297C  C090  F01C         	movff	___altoft@sign,___ftpack@sign
 14893  002980  ECA5  F011         	call	___ftpack	;wreg free
 14894  002984  C018  F087         	movff	?___ftpack,?___altoft
 14895  002988  C019  F088         	movff	?___ftpack+1,?___altoft+1
 14896  00298C  C01A  F089         	movff	?___ftpack+2,?___altoft+2
 14897  002990  0012               	return	
 14898  002992                     __end_of___altoft:
 14899                           	opt stack 0
 14900                           tosu	equ	0xFFF
 14901                           tosh	equ	0xFFE
 14902                           tosl	equ	0xFFD
 14903                           pclath	equ	0xFFA
 14904                           tblptru	equ	0xFF8
 14905                           tblptrh	equ	0xFF7
 14906                           tblptrl	equ	0xFF6
 14907                           tablat	equ	0xFF5
 14908                           prodh	equ	0xFF4
 14909                           prodl	equ	0xFF3
 14910                           intcon	equ	0xFF2
 14911                           intcon2	equ	0xFF1
 14912                           postinc0	equ	0xFEE
 14913                           plusw0	equ	0xFEB
 14914                           wreg	equ	0xFE8
 14915                           indf1	equ	0xFE7
 14916                           postdec1	equ	0xFE5
 14917                           fsr1h	equ	0xFE2
 14918                           fsr1l	equ	0xFE1
 14919                           indf2	equ	0xFDF
 14920                           postinc2	equ	0xFDE
 14921                           postdec2	equ	0xFDD
 14922                           plusw2	equ	0xFDB
 14923                           fsr2h	equ	0xFDA
 14924                           fsr2l	equ	0xFD9
 14925                           status	equ	0xFD8
 14926                           
 14927 ;; *************** function _eval_poly *****************
 14928 ;; Defined at:
 14929 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
 14930 ;; Parameters:    Size  Location     Type
 14931 ;;  x               3   36[BANK0 ] float 
 14932 ;;  d               2   39[BANK0 ] PTR const 
 14933 ;;		 -> log@coeff(27), exp@coeff(30), 
 14934 ;;  n               2   41[BANK0 ] int 
 14935 ;; Auto vars:     Size  Location     Type
 14936 ;;  res             3   45[BANK0 ] int 
 14937 ;; Return value:  Size  Location     Type
 14938 ;;                  3   36[BANK0 ] int 
 14939 ;; Registers used:
 14940 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14941 ;; Tracked objects:
 14942 ;;		On entry : 0/0
 14943 ;;		On exit  : 0/0
 14944 ;;		Unchanged: 0/0
 14945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14946 ;;      Params:         0       7       0       0       0       0       0
 14947 ;;      Locals:         0       3       0       0       0       0       0
 14948 ;;      Temps:          0       2       0       0       0       0       0
 14949 ;;      Totals:         0      12       0       0       0       0       0
 14950 ;;Total ram usage:       12 bytes
 14951 ;; Hardware stack levels used:    1
 14952 ;; Hardware stack levels required when called:    5
 14953 ;; This function calls:
 14954 ;;		___ftadd
 14955 ;;		___ftmul
 14956 ;;		___wmul
 14957 ;; This function is called by:
 14958 ;;		_exp
 14959 ;;		_log
 14960 ;; This function uses a non-reentrant model
 14961 ;;
 14962                           
 14963                           	psect	text96
 14964  001F86                     __ptext96:
 14965                           	opt stack 0
 14966  001F86                     _eval_poly:
 14967                           	opt stack 20
 14968                           
 14969                           ;incstack = 0
 14970  001F86  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 14971  001F8A  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 14972  001F8E  0E00               	movlw	0
 14973  001F90  6E1B               	movwf	___wmul@multiplicand+1,c
 14974  001F92  0E03               	movlw	3
 14975  001F94  6E1A               	movwf	___wmul@multiplicand,c
 14976  001F96  EC3F  F01B         	call	___wmul	;wreg free
 14977  001F9A  C087  F08B         	movff	eval_poly@d,??_eval_poly
 14978  001F9E  C088  F08C         	movff	eval_poly@d+1,??_eval_poly+1
 14979  001FA2  5018               	movf	?___wmul,w,c
 14980  001FA4  0100               	movlb	0	; () banked
 14981  001FA6  278B               	addwf	??_eval_poly& (0+255),f,b
 14982  001FA8  5019               	movf	?___wmul+1,w,c
 14983  001FAA  238C               	addwfc	(??_eval_poly+1)& (0+255),f,b
 14984  001FAC  C08B  FFF6         	movff	??_eval_poly,tblptrl
 14985  001FB0  C08C  FFF7         	movff	??_eval_poly+1,tblptrh
 14986  001FB4                     	if	0	;tblptru may be non-zero
 14987  001FB4                     	endif
 14988  001FB4                     	if	0	;tblptru may be non-zero
 14989  001FB4                     	endif
 14990  001FB4  0009               	tblrd		*+
 14991  001FB6  CFF5 F08D          	movff	tablat,eval_poly@res
 14992  001FBA  0009               	tblrd		*+
 14993  001FBC  CFF5 F08E          	movff	tablat,eval_poly@res+1
 14994  001FC0  000A               	tblrd		*-
 14995  001FC2  CFF5 F08F          	movff	tablat,eval_poly@res+2
 14996  001FC6  D040               	goto	l2175
 14997  001FC8                     
 14998                           ; BSR set to: 0
 14999                           
 15000                           ; BSR set to: 0
 15001  001FC8  C08D  F06C         	movff	eval_poly@res,___ftmul@f2
 15002  001FCC  C08E  F06D         	movff	eval_poly@res+1,___ftmul@f2+1
 15003  001FD0  C08F  F06E         	movff	eval_poly@res+2,___ftmul@f2+2
 15004  001FD4  C084  F069         	movff	eval_poly@x,___ftmul@f1
 15005  001FD8  C085  F06A         	movff	eval_poly@x+1,___ftmul@f1+1
 15006  001FDC  C086  F06B         	movff	eval_poly@x+2,___ftmul@f1+2
 15007  001FE0  ECF1  F00D         	call	___ftmul	;wreg free
 15008  001FE4  C069  F078         	movff	?___ftmul,___ftadd@f1
 15009  001FE8  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 15010  001FEC  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 15011  001FF0  0E00               	movlw	0
 15012  001FF2  6E1B               	movwf	___wmul@multiplicand+1,c
 15013  001FF4  0E03               	movlw	3
 15014  001FF6  6E1A               	movwf	___wmul@multiplicand,c
 15015  001FF8  0100               	movlb	0	; () banked
 15016  001FFA  0789               	decf	eval_poly@n& (0+255),f,b
 15017  001FFC  A0D8               	btfss	status,0,c
 15018  001FFE  078A               	decf	(eval_poly@n+1)& (0+255),f,b
 15019  002000  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 15020  002004  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 15021  002008  EC3F  F01B         	call	___wmul	;wreg free
 15022  00200C  C087  F08B         	movff	eval_poly@d,??_eval_poly
 15023  002010  C088  F08C         	movff	eval_poly@d+1,??_eval_poly+1
 15024  002014  5018               	movf	?___wmul,w,c
 15025  002016  0100               	movlb	0	; () banked
 15026  002018  278B               	addwf	??_eval_poly& (0+255),f,b
 15027  00201A  5019               	movf	?___wmul+1,w,c
 15028  00201C  238C               	addwfc	(??_eval_poly+1)& (0+255),f,b
 15029  00201E  C08B  FFF6         	movff	??_eval_poly,tblptrl
 15030  002022  C08C  FFF7         	movff	??_eval_poly+1,tblptrh
 15031  002026                     	if	0	;tblptru may be non-zero
 15032  002026                     	endif
 15033  002026                     	if	0	;tblptru may be non-zero
 15034  002026                     	endif
 15035  002026  0009               	tblrd		*+
 15036  002028  CFF5 F07B          	movff	tablat,___ftadd@f2
 15037  00202C  0009               	tblrd		*+
 15038  00202E  CFF5 F07C          	movff	tablat,___ftadd@f2+1
 15039  002032  000A               	tblrd		*-
 15040  002034  CFF5 F07D          	movff	tablat,___ftadd@f2+2
 15041  002038  ECF0  F008         	call	___ftadd	;wreg free
 15042  00203C  C078  F08D         	movff	?___ftadd,eval_poly@res
 15043  002040  C079  F08E         	movff	?___ftadd+1,eval_poly@res+1
 15044  002044  C07A  F08F         	movff	?___ftadd+2,eval_poly@res+2
 15045  002048                     l2175:
 15046  002048  0100               	movlb	0	; () banked
 15047  00204A  5189               	movf	eval_poly@n& (0+255),w,b
 15048  00204C  118A               	iorwf	(eval_poly@n+1)& (0+255),w,b
 15049  00204E  A4D8               	btfss	status,2,c
 15050  002050  D7BB               	goto	l2176
 15051                           
 15052                           ; BSR set to: 0
 15053  002052  C08D  F084         	movff	eval_poly@res,?_eval_poly
 15054  002056  C08E  F085         	movff	eval_poly@res+1,?_eval_poly+1
 15055  00205A  C08F  F086         	movff	eval_poly@res+2,?_eval_poly+2
 15056                           
 15057                           ; BSR set to: 0
 15058  00205E  0012               	return		;funcret
 15059  002060                     __end_of_eval_poly:
 15060                           	opt stack 0
 15061                           tosu	equ	0xFFF
 15062                           tosh	equ	0xFFE
 15063                           tosl	equ	0xFFD
 15064                           pclath	equ	0xFFA
 15065                           tblptru	equ	0xFF8
 15066                           tblptrh	equ	0xFF7
 15067                           tblptrl	equ	0xFF6
 15068                           tablat	equ	0xFF5
 15069                           prodh	equ	0xFF4
 15070                           prodl	equ	0xFF3
 15071                           intcon	equ	0xFF2
 15072                           intcon2	equ	0xFF1
 15073                           postinc0	equ	0xFEE
 15074                           plusw0	equ	0xFEB
 15075                           wreg	equ	0xFE8
 15076                           indf1	equ	0xFE7
 15077                           postdec1	equ	0xFE5
 15078                           fsr1h	equ	0xFE2
 15079                           fsr1l	equ	0xFE1
 15080                           indf2	equ	0xFDF
 15081                           postinc2	equ	0xFDE
 15082                           postdec2	equ	0xFDD
 15083                           plusw2	equ	0xFDB
 15084                           fsr2h	equ	0xFDA
 15085                           fsr2l	equ	0xFD9
 15086                           status	equ	0xFD8
 15087                           
 15088 ;; *************** function ___wmul *****************
 15089 ;; Defined at:
 15090 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 15091 ;; Parameters:    Size  Location     Type
 15092 ;;  multiplier      2   23[COMRAM] unsigned int 
 15093 ;;  multiplicand    2   25[COMRAM] unsigned int 
 15094 ;; Auto vars:     Size  Location     Type
 15095 ;;  product         2   27[COMRAM] unsigned int 
 15096 ;; Return value:  Size  Location     Type
 15097 ;;                  2   23[COMRAM] unsigned int 
 15098 ;; Registers used:
 15099 ;;		wreg, status,2, status,0, prodl, prodh
 15100 ;; Tracked objects:
 15101 ;;		On entry : 0/0
 15102 ;;		On exit  : 0/0
 15103 ;;		Unchanged: 0/0
 15104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15105 ;;      Params:         4       0       0       0       0       0       0
 15106 ;;      Locals:         2       0       0       0       0       0       0
 15107 ;;      Temps:          0       0       0       0       0       0       0
 15108 ;;      Totals:         6       0       0       0       0       0       0
 15109 ;;Total ram usage:        6 bytes
 15110 ;; Hardware stack levels used:    1
 15111 ;; Hardware stack levels required when called:    3
 15112 ;; This function calls:
 15113 ;;		Nothing
 15114 ;; This function is called by:
 15115 ;;		_eval_poly
 15116 ;; This function uses a non-reentrant model
 15117 ;;
 15118                           
 15119                           	psect	text97
 15120  00367E                     __ptext97:
 15121                           	opt stack 0
 15122  00367E                     ___wmul:
 15123                           	opt stack 21
 15124                           
 15125                           ; BSR set to: 0
 15126                           ;incstack = 0
 15127  00367E  5018               	movf	___wmul@multiplier,w,c
 15128  003680  021A               	mulwf	___wmul@multiplicand,c
 15129  003682  CFF3 F01C          	movff	prodl,___wmul@product
 15130  003686  CFF4 F01D          	movff	prodh,___wmul@product+1
 15131  00368A  5018               	movf	___wmul@multiplier,w,c
 15132  00368C  021B               	mulwf	___wmul@multiplicand+1,c
 15133  00368E  50F3               	movf	prodl,w,c
 15134  003690  261D               	addwf	___wmul@product+1,f,c
 15135  003692  5019               	movf	___wmul@multiplier+1,w,c
 15136  003694  021A               	mulwf	___wmul@multiplicand,c
 15137  003696  50F3               	movf	prodl,w,c
 15138  003698  261D               	addwf	___wmul@product+1,f,c
 15139  00369A  C01C  F018         	movff	___wmul@product,?___wmul
 15140  00369E  C01D  F019         	movff	___wmul@product+1,?___wmul+1
 15141  0036A2  0012               	return	
 15142  0036A4                     __end_of___wmul:
 15143                           	opt stack 0
 15144                           tosu	equ	0xFFF
 15145                           tosh	equ	0xFFE
 15146                           tosl	equ	0xFFD
 15147                           pclath	equ	0xFFA
 15148                           tblptru	equ	0xFF8
 15149                           tblptrh	equ	0xFF7
 15150                           tblptrl	equ	0xFF6
 15151                           tablat	equ	0xFF5
 15152                           prodh	equ	0xFF4
 15153                           prodl	equ	0xFF3
 15154                           intcon	equ	0xFF2
 15155                           intcon2	equ	0xFF1
 15156                           postinc0	equ	0xFEE
 15157                           plusw0	equ	0xFEB
 15158                           wreg	equ	0xFE8
 15159                           indf1	equ	0xFE7
 15160                           postdec1	equ	0xFE5
 15161                           fsr1h	equ	0xFE2
 15162                           fsr1l	equ	0xFE1
 15163                           indf2	equ	0xFDF
 15164                           postinc2	equ	0xFDE
 15165                           postdec2	equ	0xFDD
 15166                           plusw2	equ	0xFDB
 15167                           fsr2h	equ	0xFDA
 15168                           fsr2l	equ	0xFD9
 15169                           status	equ	0xFD8
 15170                           
 15171 ;; *************** function ___ftmul *****************
 15172 ;; Defined at:
 15173 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 15174 ;; Parameters:    Size  Location     Type
 15175 ;;  f1              3    9[BANK0 ] float 
 15176 ;;  f2              3   12[BANK0 ] float 
 15177 ;; Auto vars:     Size  Location     Type
 15178 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
 15179 ;;  sign            1   23[BANK0 ] unsigned char 
 15180 ;;  cntr            1   22[BANK0 ] unsigned char 
 15181 ;;  exp             1   18[BANK0 ] unsigned char 
 15182 ;; Return value:  Size  Location     Type
 15183 ;;                  3    9[BANK0 ] float 
 15184 ;; Registers used:
 15185 ;;		wreg, status,2, status,0, cstack
 15186 ;; Tracked objects:
 15187 ;;		On entry : 0/0
 15188 ;;		On exit  : 0/0
 15189 ;;		Unchanged: 0/0
 15190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15191 ;;      Params:         0       6       0       0       0       0       0
 15192 ;;      Locals:         0       6       0       0       0       0       0
 15193 ;;      Temps:          0       3       0       0       0       0       0
 15194 ;;      Totals:         0      15       0       0       0       0       0
 15195 ;;Total ram usage:       15 bytes
 15196 ;; Hardware stack levels used:    1
 15197 ;; Hardware stack levels required when called:    4
 15198 ;; This function calls:
 15199 ;;		___ftpack
 15200 ;; This function is called by:
 15201 ;;		_AdcConvert
 15202 ;;		_CheckFlashPrecentage
 15203 ;;		_pow
 15204 ;;		_exp
 15205 ;;		_log
 15206 ;;		_eval_poly
 15207 ;; This function uses a non-reentrant model
 15208 ;;
 15209                           
 15210                           	psect	text98
 15211  001BE2                     __ptext98:
 15212                           	opt stack 0
 15213  001BE2                     ___ftmul:
 15214                           	opt stack 20
 15215                           
 15216                           ;incstack = 0
 15217  001BE2  C06B  F06F         	movff	___ftmul@f1+2,??___ftmul
 15218  001BE6  0100               	movlb	0	; () banked
 15219  001BE8  6B70               	clrf	(??___ftmul+1)& (0+255),b
 15220  001BEA  6B71               	clrf	(??___ftmul+2)& (0+255),b
 15221  001BEC  356A               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 15222  001BEE  376F               	rlcf	??___ftmul& (0+255),f,b
 15223  001BF0  E301               	bnc	u6391
 15224  001BF2  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 15225  001BF4                     u6391:
 15226  001BF4  516F               	movf	??___ftmul& (0+255),w,b
 15227  001BF6  6F72               	movwf	___ftmul@exp& (0+255),b
 15228  001BF8  5172               	movf	___ftmul@exp& (0+255),w,b
 15229  001BFA  A4D8               	btfss	status,2,c
 15230  001BFC  D007               	goto	l1759
 15231                           
 15232                           ; BSR set to: 0
 15233  001BFE  0E00               	movlw	0
 15234  001C00  6F69               	movwf	?___ftmul& (0+255),b
 15235  001C02  0E00               	movlw	0
 15236  001C04  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 15237  001C06  0E00               	movlw	0
 15238  001C08  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 15239                           
 15240                           ; BSR set to: 0
 15241  001C0A  0012               	return	
 15242  001C0C                     l1759:
 15243                           
 15244                           ; BSR set to: 0
 15245                           
 15246                           ; BSR set to: 0
 15247  001C0C  C06E  F06F         	movff	___ftmul@f2+2,??___ftmul
 15248  001C10  6B70               	clrf	(??___ftmul+1)& (0+255),b
 15249  001C12  6B71               	clrf	(??___ftmul+2)& (0+255),b
 15250  001C14  356D               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 15251  001C16  376F               	rlcf	??___ftmul& (0+255),f,b
 15252  001C18  E301               	bnc	u6411
 15253  001C1A  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 15254  001C1C                     u6411:
 15255  001C1C  516F               	movf	??___ftmul& (0+255),w,b
 15256  001C1E  6F77               	movwf	___ftmul@sign& (0+255),b
 15257  001C20  5177               	movf	___ftmul@sign& (0+255),w,b
 15258  001C22  A4D8               	btfss	status,2,c
 15259  001C24  D007               	goto	l1761
 15260                           
 15261                           ; BSR set to: 0
 15262  001C26  0E00               	movlw	0
 15263  001C28  6F69               	movwf	?___ftmul& (0+255),b
 15264  001C2A  0E00               	movlw	0
 15265  001C2C  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 15266  001C2E  0E00               	movlw	0
 15267  001C30  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 15268                           
 15269                           ; BSR set to: 0
 15270  001C32  0012               	return	
 15271  001C34                     l1761:
 15272                           
 15273                           ; BSR set to: 0
 15274                           
 15275                           ; BSR set to: 0
 15276  001C34  5177               	movf	___ftmul@sign& (0+255),w,b
 15277  001C36  0F7B               	addlw	123
 15278  001C38  2772               	addwf	___ftmul@exp& (0+255),f,b
 15279                           
 15280                           ; BSR set to: 0
 15281  001C3A  C06B  F077         	movff	___ftmul@f1+2,___ftmul@sign
 15282  001C3E  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 15283  001C40  1B77               	xorwf	___ftmul@sign& (0+255),f,b
 15284  001C42  0E80               	movlw	128
 15285  001C44  1777               	andwf	___ftmul@sign& (0+255),f,b
 15286                           
 15287                           ; BSR set to: 0
 15288  001C46  8F6A               	bsf	(___ftmul@f1+1)& (0+255),7,b
 15289                           
 15290                           ; BSR set to: 0
 15291  001C48  8F6D               	bsf	(___ftmul@f2+1)& (0+255),7,b
 15292                           
 15293                           ; BSR set to: 0
 15294  001C4A  0EFF               	movlw	255
 15295  001C4C  176C               	andwf	___ftmul@f2& (0+255),f,b
 15296  001C4E  0EFF               	movlw	255
 15297  001C50  176D               	andwf	(___ftmul@f2+1)& (0+255),f,b
 15298  001C52  0E00               	movlw	0
 15299  001C54  176E               	andwf	(___ftmul@f2+2)& (0+255),f,b
 15300                           
 15301                           ; BSR set to: 0
 15302  001C56  0E00               	movlw	0
 15303  001C58  6F73               	movwf	___ftmul@f3_as_product& (0+255),b
 15304  001C5A  0E00               	movlw	0
 15305  001C5C  6F74               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 15306  001C5E  0E00               	movlw	0
 15307  001C60  6F75               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 15308                           
 15309                           ; BSR set to: 0
 15310  001C62  0E07               	movlw	7
 15311  001C64  6F76               	movwf	___ftmul@cntr& (0+255),b
 15312  001C66                     
 15313                           ; BSR set to: 0
 15314                           
 15315                           ; BSR set to: 0
 15316  001C66  A169               	btfss	___ftmul@f1& (0+255),0,b
 15317  001C68  D006               	goto	l1763
 15318                           
 15319                           ; BSR set to: 0
 15320  001C6A  516C               	movf	___ftmul@f2& (0+255),w,b
 15321  001C6C  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 15322  001C6E  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 15323  001C70  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 15324  001C72  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 15325  001C74  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 15326  001C76                     l1763:
 15327                           
 15328                           ; BSR set to: 0
 15329                           
 15330                           ; BSR set to: 0
 15331  001C76  90D8               	bcf	status,0,c
 15332  001C78  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 15333  001C7A  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 15334  001C7C  3369               	rrcf	___ftmul@f1& (0+255),f,b
 15335  001C7E  90D8               	bcf	status,0,c
 15336  001C80  376C               	rlcf	___ftmul@f2& (0+255),f,b
 15337  001C82  376D               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 15338  001C84  376E               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 15339                           
 15340                           ; BSR set to: 0
 15341  001C86  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 15342  001C88  D7EE               	goto	l1762
 15343                           
 15344                           ; BSR set to: 0
 15345                           
 15346                           ; BSR set to: 0
 15347  001C8A  0E09               	movlw	9
 15348  001C8C  6F76               	movwf	___ftmul@cntr& (0+255),b
 15349  001C8E                     
 15350                           ; BSR set to: 0
 15351                           
 15352                           ; BSR set to: 0
 15353  001C8E  A169               	btfss	___ftmul@f1& (0+255),0,b
 15354  001C90  D006               	goto	l1766
 15355                           
 15356                           ; BSR set to: 0
 15357  001C92  516C               	movf	___ftmul@f2& (0+255),w,b
 15358  001C94  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 15359  001C96  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 15360  001C98  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 15361  001C9A  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 15362  001C9C  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 15363  001C9E                     l1766:
 15364                           
 15365                           ; BSR set to: 0
 15366                           
 15367                           ; BSR set to: 0
 15368  001C9E  90D8               	bcf	status,0,c
 15369  001CA0  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 15370  001CA2  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 15371  001CA4  3369               	rrcf	___ftmul@f1& (0+255),f,b
 15372  001CA6  90D8               	bcf	status,0,c
 15373  001CA8  3375               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 15374  001CAA  3374               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 15375  001CAC  3373               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 15376                           
 15377                           ; BSR set to: 0
 15378  001CAE  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 15379  001CB0  D7EE               	goto	l1765
 15380                           
 15381                           ; BSR set to: 0
 15382                           
 15383                           ; BSR set to: 0
 15384  001CB2  C073  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
 15385  001CB6  C074  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 15386  001CBA  C075  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 15387  001CBE  C072  F01B         	movff	___ftmul@exp,___ftpack@exp
 15388  001CC2  C077  F01C         	movff	___ftmul@sign,___ftpack@sign
 15389  001CC6  ECA5  F011         	call	___ftpack	;wreg free
 15390  001CCA  C018  F069         	movff	?___ftpack,?___ftmul
 15391  001CCE  C019  F06A         	movff	?___ftpack+1,?___ftmul+1
 15392  001CD2  C01A  F06B         	movff	?___ftpack+2,?___ftmul+2
 15393  001CD6  0012               	return	
 15394  001CD8                     __end_of___ftmul:
 15395                           	opt stack 0
 15396                           tosu	equ	0xFFF
 15397                           tosh	equ	0xFFE
 15398                           tosl	equ	0xFFD
 15399                           pclath	equ	0xFFA
 15400                           tblptru	equ	0xFF8
 15401                           tblptrh	equ	0xFF7
 15402                           tblptrl	equ	0xFF6
 15403                           tablat	equ	0xFF5
 15404                           prodh	equ	0xFF4
 15405                           prodl	equ	0xFF3
 15406                           intcon	equ	0xFF2
 15407                           intcon2	equ	0xFF1
 15408                           postinc0	equ	0xFEE
 15409                           plusw0	equ	0xFEB
 15410                           wreg	equ	0xFE8
 15411                           indf1	equ	0xFE7
 15412                           postdec1	equ	0xFE5
 15413                           fsr1h	equ	0xFE2
 15414                           fsr1l	equ	0xFE1
 15415                           indf2	equ	0xFDF
 15416                           postinc2	equ	0xFDE
 15417                           postdec2	equ	0xFDD
 15418                           plusw2	equ	0xFDB
 15419                           fsr2h	equ	0xFDA
 15420                           fsr2l	equ	0xFD9
 15421                           status	equ	0xFD8
 15422                           
 15423 ;; *************** function ___ftsub *****************
 15424 ;; Defined at:
 15425 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
 15426 ;; Parameters:    Size  Location     Type
 15427 ;;  f1              3   36[BANK0 ] float 
 15428 ;;  f2              3   39[BANK0 ] float 
 15429 ;; Auto vars:     Size  Location     Type
 15430 ;;		None
 15431 ;; Return value:  Size  Location     Type
 15432 ;;                  3   36[BANK0 ] float 
 15433 ;; Registers used:
 15434 ;;		wreg, status,2, status,0, cstack
 15435 ;; Tracked objects:
 15436 ;;		On entry : 0/0
 15437 ;;		On exit  : 0/0
 15438 ;;		Unchanged: 0/0
 15439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15440 ;;      Params:         0       6       0       0       0       0       0
 15441 ;;      Locals:         0       0       0       0       0       0       0
 15442 ;;      Temps:          0       0       0       0       0       0       0
 15443 ;;      Totals:         0       6       0       0       0       0       0
 15444 ;;Total ram usage:        6 bytes
 15445 ;; Hardware stack levels used:    1
 15446 ;; Hardware stack levels required when called:    5
 15447 ;; This function calls:
 15448 ;;		___ftadd
 15449 ;; This function is called by:
 15450 ;;		_exp
 15451 ;; This function uses a non-reentrant model
 15452 ;;
 15453                           
 15454                           	psect	text99
 15455  0031AC                     __ptext99:
 15456                           	opt stack 0
 15457  0031AC                     ___ftsub:
 15458                           	opt stack 20
 15459                           
 15460                           ;incstack = 0
 15461  0031AC  0100               	movlb	0	; () banked
 15462  0031AE  5187               	movf	___ftsub@f2& (0+255),w,b
 15463  0031B0  1188               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 15464  0031B2  1189               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 15465  0031B4  B4D8               	btfsc	status,2,c
 15466  0031B6  D006               	goto	l1776
 15467                           
 15468                           ; BSR set to: 0
 15469  0031B8  0E00               	movlw	0
 15470  0031BA  1B87               	xorwf	___ftsub@f2& (0+255),f,b
 15471  0031BC  0E00               	movlw	0
 15472  0031BE  1B88               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 15473  0031C0  0E80               	movlw	128
 15474  0031C2  1B89               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 15475  0031C4                     l1776:
 15476                           
 15477                           ; BSR set to: 0
 15478                           
 15479                           ; BSR set to: 0
 15480  0031C4  C084  F078         	movff	___ftsub@f1,___ftadd@f1
 15481  0031C8  C085  F079         	movff	___ftsub@f1+1,___ftadd@f1+1
 15482  0031CC  C086  F07A         	movff	___ftsub@f1+2,___ftadd@f1+2
 15483  0031D0  C087  F07B         	movff	___ftsub@f2,___ftadd@f2
 15484  0031D4  C088  F07C         	movff	___ftsub@f2+1,___ftadd@f2+1
 15485  0031D8  C089  F07D         	movff	___ftsub@f2+2,___ftadd@f2+2
 15486  0031DC  ECF0  F008         	call	___ftadd	;wreg free
 15487  0031E0  C078  F084         	movff	?___ftadd,?___ftsub
 15488  0031E4  C079  F085         	movff	?___ftadd+1,?___ftsub+1
 15489  0031E8  C07A  F086         	movff	?___ftadd+2,?___ftsub+2
 15490  0031EC  0012               	return	
 15491  0031EE                     __end_of___ftsub:
 15492                           	opt stack 0
 15493                           tosu	equ	0xFFF
 15494                           tosh	equ	0xFFE
 15495                           tosl	equ	0xFFD
 15496                           pclath	equ	0xFFA
 15497                           tblptru	equ	0xFF8
 15498                           tblptrh	equ	0xFF7
 15499                           tblptrl	equ	0xFF6
 15500                           tablat	equ	0xFF5
 15501                           prodh	equ	0xFF4
 15502                           prodl	equ	0xFF3
 15503                           intcon	equ	0xFF2
 15504                           intcon2	equ	0xFF1
 15505                           postinc0	equ	0xFEE
 15506                           plusw0	equ	0xFEB
 15507                           wreg	equ	0xFE8
 15508                           indf1	equ	0xFE7
 15509                           postdec1	equ	0xFE5
 15510                           fsr1h	equ	0xFE2
 15511                           fsr1l	equ	0xFE1
 15512                           indf2	equ	0xFDF
 15513                           postinc2	equ	0xFDE
 15514                           postdec2	equ	0xFDD
 15515                           plusw2	equ	0xFDB
 15516                           fsr2h	equ	0xFDA
 15517                           fsr2l	equ	0xFD9
 15518                           status	equ	0xFD8
 15519                           
 15520 ;; *************** function ___ftadd *****************
 15521 ;; Defined at:
 15522 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 15523 ;; Parameters:    Size  Location     Type
 15524 ;;  f1              3   24[BANK0 ] float 
 15525 ;;  f2              3   27[BANK0 ] float 
 15526 ;; Auto vars:     Size  Location     Type
 15527 ;;  exp1            1   35[BANK0 ] unsigned char 
 15528 ;;  exp2            1   34[BANK0 ] unsigned char 
 15529 ;;  sign            1   33[BANK0 ] unsigned char 
 15530 ;; Return value:  Size  Location     Type
 15531 ;;                  3   24[BANK0 ] float 
 15532 ;; Registers used:
 15533 ;;		wreg, status,2, status,0, cstack
 15534 ;; Tracked objects:
 15535 ;;		On entry : 0/0
 15536 ;;		On exit  : 0/0
 15537 ;;		Unchanged: 0/0
 15538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15539 ;;      Params:         0       6       0       0       0       0       0
 15540 ;;      Locals:         0       3       0       0       0       0       0
 15541 ;;      Temps:          0       3       0       0       0       0       0
 15542 ;;      Totals:         0      12       0       0       0       0       0
 15543 ;;Total ram usage:       12 bytes
 15544 ;; Hardware stack levels used:    1
 15545 ;; Hardware stack levels required when called:    4
 15546 ;; This function calls:
 15547 ;;		___ftpack
 15548 ;; This function is called by:
 15549 ;;		___ftsub
 15550 ;;		_floor
 15551 ;;		_log
 15552 ;;		_eval_poly
 15553 ;; This function uses a non-reentrant model
 15554 ;;
 15555                           
 15556                           	psect	text100
 15557  0011E0                     __ptext100:
 15558                           	opt stack 0
 15559  0011E0                     ___ftadd:
 15560                           	opt stack 20
 15561                           
 15562                           ;incstack = 0
 15563  0011E0  C07A  F07E         	movff	___ftadd@f1+2,??___ftadd
 15564  0011E4  0100               	movlb	0	; () banked
 15565  0011E6  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 15566  0011E8  6B80               	clrf	(??___ftadd+2)& (0+255),b
 15567  0011EA  3579               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 15568  0011EC  377E               	rlcf	??___ftadd& (0+255),f,b
 15569  0011EE  E301               	bnc	u6181
 15570  0011F0  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 15571  0011F2                     u6181:
 15572  0011F2  517E               	movf	??___ftadd& (0+255),w,b
 15573  0011F4  6F83               	movwf	___ftadd@exp1& (0+255),b
 15574  0011F6  C07D  F07E         	movff	___ftadd@f2+2,??___ftadd
 15575  0011FA  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 15576  0011FC  6B80               	clrf	(??___ftadd+2)& (0+255),b
 15577  0011FE  357C               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 15578  001200  377E               	rlcf	??___ftadd& (0+255),f,b
 15579  001202  E301               	bnc	u6191
 15580  001204  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 15581  001206                     u6191:
 15582  001206  517E               	movf	??___ftadd& (0+255),w,b
 15583  001208  6F82               	movwf	___ftadd@exp2& (0+255),b
 15584                           
 15585                           ; BSR set to: 0
 15586  00120A  5183               	movf	___ftadd@exp1& (0+255),w,b
 15587  00120C  B4D8               	btfsc	status,2,c
 15588  00120E  D00B               	goto	u6220
 15589                           
 15590                           ; BSR set to: 0
 15591  001210  5182               	movf	___ftadd@exp2& (0+255),w,b
 15592  001212  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 15593  001214  B0D8               	btfsc	status,0,c
 15594  001216  D00E               	goto	l1711
 15595                           
 15596                           ; BSR set to: 0
 15597  001218  5183               	movf	___ftadd@exp1& (0+255),w,b
 15598  00121A  0800               	sublw	0
 15599  00121C  2582               	addwf	___ftadd@exp2& (0+255),w,b
 15600  00121E  6F7E               	movwf	??___ftadd& (0+255),b
 15601  001220  0E18               	movlw	24
 15602  001222  657E               	cpfsgt	??___ftadd& (0+255),b
 15603  001224  D007               	goto	l1711
 15604  001226                     u6220:
 15605                           
 15606                           ; BSR set to: 0
 15607  001226  C07B  F078         	movff	___ftadd@f2,?___ftadd
 15608  00122A  C07C  F079         	movff	___ftadd@f2+1,?___ftadd+1
 15609  00122E  C07D  F07A         	movff	___ftadd@f2+2,?___ftadd+2
 15610  001232  0012               	return	
 15611  001234                     l1711:
 15612                           
 15613                           ; BSR set to: 0
 15614                           
 15615                           ; BSR set to: 0
 15616  001234  5182               	movf	___ftadd@exp2& (0+255),w,b
 15617  001236  B4D8               	btfsc	status,2,c
 15618  001238  D00B               	goto	u6250
 15619                           
 15620                           ; BSR set to: 0
 15621  00123A  5183               	movf	___ftadd@exp1& (0+255),w,b
 15622  00123C  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 15623  00123E  B0D8               	btfsc	status,0,c
 15624  001240  D00E               	goto	l1715
 15625                           
 15626                           ; BSR set to: 0
 15627  001242  5182               	movf	___ftadd@exp2& (0+255),w,b
 15628  001244  0800               	sublw	0
 15629  001246  2583               	addwf	___ftadd@exp1& (0+255),w,b
 15630  001248  6F7E               	movwf	??___ftadd& (0+255),b
 15631  00124A  0E18               	movlw	24
 15632  00124C  657E               	cpfsgt	??___ftadd& (0+255),b
 15633  00124E  D007               	goto	l1715
 15634  001250                     u6250:
 15635                           
 15636                           ; BSR set to: 0
 15637  001250  C078  F078         	movff	___ftadd@f1,?___ftadd
 15638  001254  C079  F079         	movff	___ftadd@f1+1,?___ftadd+1
 15639  001258  C07A  F07A         	movff	___ftadd@f1+2,?___ftadd+2
 15640  00125C  0012               	return	
 15641  00125E                     l1715:
 15642                           
 15643                           ; BSR set to: 0
 15644                           
 15645                           ; BSR set to: 0
 15646  00125E  0E06               	movlw	6
 15647  001260  6F81               	movwf	___ftadd@sign& (0+255),b
 15648                           
 15649                           ; BSR set to: 0
 15650  001262  BF7A               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 15651                           
 15652                           ; BSR set to: 0
 15653  001264  8F81               	bsf	___ftadd@sign& (0+255),7,b
 15654                           
 15655                           ; BSR set to: 0
 15656                           
 15657                           ; BSR set to: 0
 15658  001266  BF7D               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 15659                           
 15660                           ; BSR set to: 0
 15661  001268  8D81               	bsf	___ftadd@sign& (0+255),6,b
 15662                           
 15663                           ; BSR set to: 0
 15664  00126A  8F79               	bsf	(___ftadd@f1+1)& (0+255),7,b
 15665                           
 15666                           ; BSR set to: 0
 15667  00126C  0EFF               	movlw	255
 15668  00126E  1778               	andwf	___ftadd@f1& (0+255),f,b
 15669  001270  0EFF               	movlw	255
 15670  001272  1779               	andwf	(___ftadd@f1+1)& (0+255),f,b
 15671  001274  0E00               	movlw	0
 15672  001276  177A               	andwf	(___ftadd@f1+2)& (0+255),f,b
 15673  001278  8F7C               	bsf	(___ftadd@f2+1)& (0+255),7,b
 15674                           
 15675                           ; BSR set to: 0
 15676  00127A  0EFF               	movlw	255
 15677  00127C  177B               	andwf	___ftadd@f2& (0+255),f,b
 15678  00127E  0EFF               	movlw	255
 15679  001280  177C               	andwf	(___ftadd@f2+1)& (0+255),f,b
 15680  001282  0E00               	movlw	0
 15681  001284  177D               	andwf	(___ftadd@f2+2)& (0+255),f,b
 15682                           
 15683                           ; BSR set to: 0
 15684  001286  5182               	movf	___ftadd@exp2& (0+255),w,b
 15685  001288  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 15686  00128A  B0D8               	btfsc	status,0,c
 15687  00128C  D01B               	goto	l1720
 15688  00128E                     u6280:
 15689                           
 15690                           ; BSR set to: 0
 15691                           
 15692                           ; BSR set to: 0
 15693  00128E  90D8               	bcf	status,0,c
 15694  001290  377B               	rlcf	___ftadd@f2& (0+255),f,b
 15695  001292  377C               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 15696  001294  377D               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 15697  001296  0782               	decf	___ftadd@exp2& (0+255),f,b
 15698                           
 15699                           ; BSR set to: 0
 15700  001298  5183               	movf	___ftadd@exp1& (0+255),w,b
 15701  00129A  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 15702  00129C  B4D8               	btfsc	status,2,c
 15703  00129E  D00D               	goto	l1725
 15704                           
 15705                           ; BSR set to: 0
 15706  0012A0  0781               	decf	___ftadd@sign& (0+255),f,b
 15707  0012A2  C081  F07E         	movff	___ftadd@sign,??___ftadd
 15708  0012A6  0E07               	movlw	7
 15709  0012A8  177E               	andwf	??___ftadd& (0+255),f,b
 15710  0012AA  B4D8               	btfsc	status,2,c
 15711  0012AC  D006               	goto	l1725
 15712  0012AE  D7EF               	goto	u6280
 15713  0012B0                     
 15714                           ; BSR set to: 0
 15715                           
 15716                           ; BSR set to: 0
 15717  0012B0  90D8               	bcf	status,0,c
 15718  0012B2  337A               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 15719  0012B4  3379               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 15720  0012B6  3378               	rrcf	___ftadd@f1& (0+255),f,b
 15721  0012B8  2B83               	incf	___ftadd@exp1& (0+255),f,b
 15722  0012BA                     l1725:
 15723                           
 15724                           ; BSR set to: 0
 15725                           
 15726                           ; BSR set to: 0
 15727  0012BA  5182               	movf	___ftadd@exp2& (0+255),w,b
 15728  0012BC  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 15729  0012BE  B4D8               	btfsc	status,2,c
 15730  0012C0  D01F               	goto	u6350
 15731  0012C2  D7F6               	goto	l1726
 15732  0012C4                     l1720:
 15733                           
 15734                           ; BSR set to: 0
 15735                           
 15736                           ; BSR set to: 0
 15737  0012C4  5183               	movf	___ftadd@exp1& (0+255),w,b
 15738  0012C6  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 15739  0012C8  B0D8               	btfsc	status,0,c
 15740  0012CA  D01A               	goto	u6350
 15741  0012CC                     u6320:
 15742                           
 15743                           ; BSR set to: 0
 15744                           
 15745                           ; BSR set to: 0
 15746  0012CC  90D8               	bcf	status,0,c
 15747  0012CE  3778               	rlcf	___ftadd@f1& (0+255),f,b
 15748  0012D0  3779               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 15749  0012D2  377A               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 15750  0012D4  0783               	decf	___ftadd@exp1& (0+255),f,b
 15751                           
 15752                           ; BSR set to: 0
 15753  0012D6  5183               	movf	___ftadd@exp1& (0+255),w,b
 15754  0012D8  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 15755  0012DA  B4D8               	btfsc	status,2,c
 15756  0012DC  D00D               	goto	l1734
 15757                           
 15758                           ; BSR set to: 0
 15759  0012DE  0781               	decf	___ftadd@sign& (0+255),f,b
 15760  0012E0  C081  F07E         	movff	___ftadd@sign,??___ftadd
 15761  0012E4  0E07               	movlw	7
 15762  0012E6  177E               	andwf	??___ftadd& (0+255),f,b
 15763  0012E8  B4D8               	btfsc	status,2,c
 15764  0012EA  D006               	goto	l1734
 15765  0012EC  D7EF               	goto	u6320
 15766  0012EE                     
 15767                           ; BSR set to: 0
 15768                           
 15769                           ; BSR set to: 0
 15770  0012EE  90D8               	bcf	status,0,c
 15771  0012F0  337D               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 15772  0012F2  337C               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 15773  0012F4  337B               	rrcf	___ftadd@f2& (0+255),f,b
 15774  0012F6  2B82               	incf	___ftadd@exp2& (0+255),f,b
 15775  0012F8                     l1734:
 15776                           
 15777                           ; BSR set to: 0
 15778                           
 15779                           ; BSR set to: 0
 15780  0012F8  5182               	movf	___ftadd@exp2& (0+255),w,b
 15781  0012FA  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 15782  0012FC  A4D8               	btfss	status,2,c
 15783  0012FE  D7F7               	goto	l1735
 15784  001300                     u6350:
 15785                           
 15786                           ; BSR set to: 0
 15787                           
 15788                           ; BSR set to: 0
 15789                           
 15790                           ; BSR set to: 0
 15791  001300  AF81               	btfss	___ftadd@sign& (0+255),7,b
 15792  001302  D00C               	goto	l1737
 15793                           
 15794                           ; BSR set to: 0
 15795  001304  0EFF               	movlw	255
 15796  001306  1B78               	xorwf	___ftadd@f1& (0+255),f,b
 15797  001308  0EFF               	movlw	255
 15798  00130A  1B79               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 15799  00130C  0EFF               	movlw	255
 15800  00130E  1B7A               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 15801  001310  0E01               	movlw	1
 15802  001312  2778               	addwf	___ftadd@f1& (0+255),f,b
 15803  001314  0E00               	movlw	0
 15804  001316  2379               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 15805  001318  0E00               	movlw	0
 15806  00131A  237A               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 15807  00131C                     l1737:
 15808                           
 15809                           ; BSR set to: 0
 15810  00131C  AD81               	btfss	___ftadd@sign& (0+255),6,b
 15811  00131E  D00C               	goto	l1738
 15812                           
 15813                           ; BSR set to: 0
 15814  001320  0EFF               	movlw	255
 15815  001322  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 15816  001324  0EFF               	movlw	255
 15817  001326  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 15818  001328  0EFF               	movlw	255
 15819  00132A  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 15820  00132C  0E01               	movlw	1
 15821  00132E  277B               	addwf	___ftadd@f2& (0+255),f,b
 15822  001330  0E00               	movlw	0
 15823  001332  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 15824  001334  0E00               	movlw	0
 15825  001336  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 15826  001338                     l1738:
 15827                           
 15828                           ; BSR set to: 0
 15829                           
 15830                           ; BSR set to: 0
 15831  001338  0E00               	movlw	0
 15832  00133A  6F81               	movwf	___ftadd@sign& (0+255),b
 15833                           
 15834                           ; BSR set to: 0
 15835  00133C  5178               	movf	___ftadd@f1& (0+255),w,b
 15836  00133E  277B               	addwf	___ftadd@f2& (0+255),f,b
 15837  001340  5179               	movf	(___ftadd@f1+1)& (0+255),w,b
 15838  001342  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 15839  001344  517A               	movf	(___ftadd@f1+2)& (0+255),w,b
 15840  001346  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 15841                           
 15842                           ; BSR set to: 0
 15843  001348  AF7D               	btfss	(___ftadd@f2+2)& (0+255),7,b
 15844  00134A  D00E               	goto	l1739
 15845                           
 15846                           ; BSR set to: 0
 15847  00134C  0EFF               	movlw	255
 15848  00134E  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 15849  001350  0EFF               	movlw	255
 15850  001352  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 15851  001354  0EFF               	movlw	255
 15852  001356  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 15853  001358  0E01               	movlw	1
 15854  00135A  277B               	addwf	___ftadd@f2& (0+255),f,b
 15855  00135C  0E00               	movlw	0
 15856  00135E  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 15857  001360  0E00               	movlw	0
 15858  001362  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 15859                           
 15860                           ; BSR set to: 0
 15861  001364  0E01               	movlw	1
 15862  001366  6F81               	movwf	___ftadd@sign& (0+255),b
 15863  001368                     l1739:
 15864                           
 15865                           ; BSR set to: 0
 15866                           
 15867                           ; BSR set to: 0
 15868  001368  C07B  F018         	movff	___ftadd@f2,___ftpack@arg
 15869  00136C  C07C  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
 15870  001370  C07D  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
 15871  001374  C083  F01B         	movff	___ftadd@exp1,___ftpack@exp
 15872  001378  C081  F01C         	movff	___ftadd@sign,___ftpack@sign
 15873  00137C  ECA5  F011         	call	___ftpack	;wreg free
 15874  001380  C018  F078         	movff	?___ftpack,?___ftadd
 15875  001384  C019  F079         	movff	?___ftpack+1,?___ftadd+1
 15876  001388  C01A  F07A         	movff	?___ftpack+2,?___ftadd+2
 15877  00138C  0012               	return	
 15878  00138E                     __end_of___ftadd:
 15879                           	opt stack 0
 15880                           tosu	equ	0xFFF
 15881                           tosh	equ	0xFFE
 15882                           tosl	equ	0xFFD
 15883                           pclath	equ	0xFFA
 15884                           tblptru	equ	0xFF8
 15885                           tblptrh	equ	0xFF7
 15886                           tblptrl	equ	0xFF6
 15887                           tablat	equ	0xFF5
 15888                           prodh	equ	0xFF4
 15889                           prodl	equ	0xFF3
 15890                           intcon	equ	0xFF2
 15891                           intcon2	equ	0xFF1
 15892                           postinc0	equ	0xFEE
 15893                           plusw0	equ	0xFEB
 15894                           wreg	equ	0xFE8
 15895                           indf1	equ	0xFE7
 15896                           postdec1	equ	0xFE5
 15897                           fsr1h	equ	0xFE2
 15898                           fsr1l	equ	0xFE1
 15899                           indf2	equ	0xFDF
 15900                           postinc2	equ	0xFDE
 15901                           postdec2	equ	0xFDD
 15902                           plusw2	equ	0xFDB
 15903                           fsr2h	equ	0xFDA
 15904                           fsr2l	equ	0xFD9
 15905                           status	equ	0xFD8
 15906                           
 15907 ;; *************** function ___ftneg *****************
 15908 ;; Defined at:
 15909 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 15910 ;; Parameters:    Size  Location     Type
 15911 ;;  f1              3   23[COMRAM] float 
 15912 ;; Auto vars:     Size  Location     Type
 15913 ;;		None
 15914 ;; Return value:  Size  Location     Type
 15915 ;;                  3   23[COMRAM] float 
 15916 ;; Registers used:
 15917 ;;		wreg, status,2, status,0
 15918 ;; Tracked objects:
 15919 ;;		On entry : 0/0
 15920 ;;		On exit  : 0/0
 15921 ;;		Unchanged: 0/0
 15922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15923 ;;      Params:         3       0       0       0       0       0       0
 15924 ;;      Locals:         0       0       0       0       0       0       0
 15925 ;;      Temps:          0       0       0       0       0       0       0
 15926 ;;      Totals:         3       0       0       0       0       0       0
 15927 ;;Total ram usage:        3 bytes
 15928 ;; Hardware stack levels used:    1
 15929 ;; Hardware stack levels required when called:    3
 15930 ;; This function calls:
 15931 ;;		Nothing
 15932 ;; This function is called by:
 15933 ;;		_pow
 15934 ;;		_exp
 15935 ;; This function uses a non-reentrant model
 15936 ;;
 15937                           
 15938                           	psect	text101
 15939  0036EC                     __ptext101:
 15940                           	opt stack 0
 15941  0036EC                     ___ftneg:
 15942                           	opt stack 22
 15943                           
 15944                           ;incstack = 0
 15945  0036EC  5018               	movf	___ftneg@f1,w,c
 15946  0036EE  1019               	iorwf	___ftneg@f1+1,w,c
 15947  0036F0  101A               	iorwf	___ftneg@f1+2,w,c
 15948  0036F2  B4D8               	btfsc	status,2,c
 15949  0036F4  D006               	goto	l1770
 15950  0036F6  0E00               	movlw	0
 15951  0036F8  1A18               	xorwf	___ftneg@f1,f,c
 15952  0036FA  0E00               	movlw	0
 15953  0036FC  1A19               	xorwf	___ftneg@f1+1,f,c
 15954  0036FE  0E80               	movlw	128
 15955  003700  1A1A               	xorwf	___ftneg@f1+2,f,c
 15956  003702                     l1770:
 15957  003702  C018  F018         	movff	___ftneg@f1,?___ftneg
 15958  003706  C019  F019         	movff	___ftneg@f1+1,?___ftneg+1
 15959  00370A  C01A  F01A         	movff	___ftneg@f1+2,?___ftneg+2
 15960  00370E  0012               	return		;funcret
 15961  003710                     __end_of___ftneg:
 15962                           	opt stack 0
 15963                           tosu	equ	0xFFF
 15964                           tosh	equ	0xFFE
 15965                           tosl	equ	0xFFD
 15966                           pclath	equ	0xFFA
 15967                           tblptru	equ	0xFF8
 15968                           tblptrh	equ	0xFF7
 15969                           tblptrl	equ	0xFF6
 15970                           tablat	equ	0xFF5
 15971                           prodh	equ	0xFF4
 15972                           prodl	equ	0xFF3
 15973                           intcon	equ	0xFF2
 15974                           intcon2	equ	0xFF1
 15975                           postinc0	equ	0xFEE
 15976                           plusw0	equ	0xFEB
 15977                           wreg	equ	0xFE8
 15978                           indf1	equ	0xFE7
 15979                           postdec1	equ	0xFE5
 15980                           fsr1h	equ	0xFE2
 15981                           fsr1l	equ	0xFE1
 15982                           indf2	equ	0xFDF
 15983                           postinc2	equ	0xFDE
 15984                           postdec2	equ	0xFDD
 15985                           plusw2	equ	0xFDB
 15986                           fsr2h	equ	0xFDA
 15987                           fsr2l	equ	0xFD9
 15988                           status	equ	0xFD8
 15989                           
 15990 ;; *************** function ___ftdiv *****************
 15991 ;; Defined at:
 15992 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 15993 ;; Parameters:    Size  Location     Type
 15994 ;;  f1              3   40[COMRAM] float 
 15995 ;;  f2              3   43[COMRAM] float 
 15996 ;; Auto vars:     Size  Location     Type
 15997 ;;  f3              3    4[BANK0 ] float 
 15998 ;;  sign            1    8[BANK0 ] unsigned char 
 15999 ;;  exp             1    7[BANK0 ] unsigned char 
 16000 ;;  cntr            1    3[BANK0 ] unsigned char 
 16001 ;; Return value:  Size  Location     Type
 16002 ;;                  3   40[COMRAM] float 
 16003 ;; Registers used:
 16004 ;;		wreg, status,2, status,0, cstack
 16005 ;; Tracked objects:
 16006 ;;		On entry : 0/0
 16007 ;;		On exit  : 0/0
 16008 ;;		Unchanged: 0/0
 16009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16010 ;;      Params:         6       0       0       0       0       0       0
 16011 ;;      Locals:         0       6       0       0       0       0       0
 16012 ;;      Temps:          0       3       0       0       0       0       0
 16013 ;;      Totals:         6       9       0       0       0       0       0
 16014 ;;Total ram usage:       15 bytes
 16015 ;; Hardware stack levels used:    1
 16016 ;; Hardware stack levels required when called:    4
 16017 ;; This function calls:
 16018 ;;		___ftpack
 16019 ;; This function is called by:
 16020 ;;		_AdcConvert
 16021 ;;		_CheckFlashPrecentage
 16022 ;;		_exp
 16023 ;; This function uses a non-reentrant model
 16024 ;;
 16025                           
 16026                           	psect	text102
 16027  001CD8                     __ptext102:
 16028                           	opt stack 0
 16029  001CD8                     ___ftdiv:
 16030                           	opt stack 21
 16031                           
 16032                           ;incstack = 0
 16033  001CD8  C02B  F060         	movff	___ftdiv@f1+2,??___ftdiv
 16034  001CDC  0100               	movlb	0	; () banked
 16035  001CDE  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 16036  001CE0  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 16037  001CE2  342A               	rlcf	___ftdiv@f1+1,w,c
 16038  001CE4  3760               	rlcf	??___ftdiv& (0+255),f,b
 16039  001CE6  E301               	bnc	u6771
 16040  001CE8  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 16041  001CEA                     u6771:
 16042  001CEA  5160               	movf	??___ftdiv& (0+255),w,b
 16043  001CEC  6F67               	movwf	___ftdiv@exp& (0+255),b
 16044  001CEE  5167               	movf	___ftdiv@exp& (0+255),w,b
 16045  001CF0  A4D8               	btfss	status,2,c
 16046  001CF2  D007               	goto	l1744
 16047                           
 16048                           ; BSR set to: 0
 16049  001CF4  0E00               	movlw	0
 16050  001CF6  6E29               	movwf	?___ftdiv,c
 16051  001CF8  0E00               	movlw	0
 16052  001CFA  6E2A               	movwf	?___ftdiv+1,c
 16053  001CFC  0E00               	movlw	0
 16054  001CFE  6E2B               	movwf	?___ftdiv+2,c
 16055                           
 16056                           ; BSR set to: 0
 16057  001D00  0012               	return	
 16058  001D02                     l1744:
 16059                           
 16060                           ; BSR set to: 0
 16061                           
 16062                           ; BSR set to: 0
 16063  001D02  C02E  F060         	movff	___ftdiv@f2+2,??___ftdiv
 16064  001D06  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 16065  001D08  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 16066  001D0A  342D               	rlcf	___ftdiv@f2+1,w,c
 16067  001D0C  3760               	rlcf	??___ftdiv& (0+255),f,b
 16068  001D0E  E301               	bnc	u6791
 16069  001D10  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 16070  001D12                     u6791:
 16071  001D12  5160               	movf	??___ftdiv& (0+255),w,b
 16072  001D14  6F68               	movwf	___ftdiv@sign& (0+255),b
 16073  001D16  5168               	movf	___ftdiv@sign& (0+255),w,b
 16074  001D18  A4D8               	btfss	status,2,c
 16075  001D1A  D007               	goto	l1746
 16076                           
 16077                           ; BSR set to: 0
 16078  001D1C  0E00               	movlw	0
 16079  001D1E  6E29               	movwf	?___ftdiv,c
 16080  001D20  0E00               	movlw	0
 16081  001D22  6E2A               	movwf	?___ftdiv+1,c
 16082  001D24  0E00               	movlw	0
 16083  001D26  6E2B               	movwf	?___ftdiv+2,c
 16084                           
 16085                           ; BSR set to: 0
 16086  001D28  0012               	return	
 16087  001D2A                     l1746:
 16088                           
 16089                           ; BSR set to: 0
 16090                           
 16091                           ; BSR set to: 0
 16092  001D2A  0E00               	movlw	0
 16093  001D2C  6F64               	movwf	___ftdiv@f3& (0+255),b
 16094  001D2E  0E00               	movlw	0
 16095  001D30  6F65               	movwf	(___ftdiv@f3+1)& (0+255),b
 16096  001D32  0E00               	movlw	0
 16097  001D34  6F66               	movwf	(___ftdiv@f3+2)& (0+255),b
 16098                           
 16099                           ; BSR set to: 0
 16100  001D36  5168               	movf	___ftdiv@sign& (0+255),w,b
 16101  001D38  0F89               	addlw	137
 16102  001D3A  5F67               	subwf	___ftdiv@exp& (0+255),f,b
 16103                           
 16104                           ; BSR set to: 0
 16105  001D3C  C02B  F068         	movff	___ftdiv@f1+2,___ftdiv@sign
 16106                           
 16107                           ; BSR set to: 0
 16108  001D40  502E               	movf	___ftdiv@f2+2,w,c
 16109  001D42  1B68               	xorwf	___ftdiv@sign& (0+255),f,b
 16110                           
 16111                           ; BSR set to: 0
 16112  001D44  0E80               	movlw	128
 16113  001D46  1768               	andwf	___ftdiv@sign& (0+255),f,b
 16114                           
 16115                           ; BSR set to: 0
 16116  001D48  8E2A               	bsf	___ftdiv@f1+1,7,c
 16117                           
 16118                           ; BSR set to: 0
 16119  001D4A  0EFF               	movlw	255
 16120  001D4C  1629               	andwf	___ftdiv@f1,f,c
 16121  001D4E  0EFF               	movlw	255
 16122  001D50  162A               	andwf	___ftdiv@f1+1,f,c
 16123  001D52  0E00               	movlw	0
 16124  001D54  162B               	andwf	___ftdiv@f1+2,f,c
 16125                           
 16126                           ; BSR set to: 0
 16127  001D56  8E2D               	bsf	___ftdiv@f2+1,7,c
 16128                           
 16129                           ; BSR set to: 0
 16130  001D58  0EFF               	movlw	255
 16131  001D5A  162C               	andwf	___ftdiv@f2,f,c
 16132  001D5C  0EFF               	movlw	255
 16133  001D5E  162D               	andwf	___ftdiv@f2+1,f,c
 16134  001D60  0E00               	movlw	0
 16135  001D62  162E               	andwf	___ftdiv@f2+2,f,c
 16136                           
 16137                           ; BSR set to: 0
 16138  001D64  0E18               	movlw	24
 16139  001D66  6F63               	movwf	___ftdiv@cntr& (0+255),b
 16140  001D68                     
 16141                           ; BSR set to: 0
 16142                           
 16143                           ; BSR set to: 0
 16144  001D68  90D8               	bcf	status,0,c
 16145  001D6A  3764               	rlcf	___ftdiv@f3& (0+255),f,b
 16146  001D6C  3765               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 16147  001D6E  3766               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 16148                           
 16149                           ; BSR set to: 0
 16150  001D70  502C               	movf	___ftdiv@f2,w,c
 16151  001D72  5C29               	subwf	___ftdiv@f1,w,c
 16152  001D74  502D               	movf	___ftdiv@f2+1,w,c
 16153  001D76  582A               	subwfb	___ftdiv@f1+1,w,c
 16154  001D78  502E               	movf	___ftdiv@f2+2,w,c
 16155  001D7A  582B               	subwfb	___ftdiv@f1+2,w,c
 16156  001D7C  A0D8               	btfss	status,0,c
 16157  001D7E  D007               	goto	l1748
 16158                           
 16159                           ; BSR set to: 0
 16160  001D80  502C               	movf	___ftdiv@f2,w,c
 16161  001D82  5E29               	subwf	___ftdiv@f1,f,c
 16162  001D84  502D               	movf	___ftdiv@f2+1,w,c
 16163  001D86  5A2A               	subwfb	___ftdiv@f1+1,f,c
 16164  001D88  502E               	movf	___ftdiv@f2+2,w,c
 16165  001D8A  5A2B               	subwfb	___ftdiv@f1+2,f,c
 16166                           
 16167                           ; BSR set to: 0
 16168  001D8C  8164               	bsf	___ftdiv@f3& (0+255),0,b
 16169  001D8E                     l1748:
 16170                           
 16171                           ; BSR set to: 0
 16172  001D8E  90D8               	bcf	status,0,c
 16173  001D90  3629               	rlcf	___ftdiv@f1,f,c
 16174  001D92  362A               	rlcf	___ftdiv@f1+1,f,c
 16175  001D94  362B               	rlcf	___ftdiv@f1+2,f,c
 16176                           
 16177                           ; BSR set to: 0
 16178  001D96  2F63               	decfsz	___ftdiv@cntr& (0+255),f,b
 16179  001D98  D7E7               	goto	l1747
 16180                           
 16181                           ; BSR set to: 0
 16182                           
 16183                           ; BSR set to: 0
 16184  001D9A  C064  F018         	movff	___ftdiv@f3,___ftpack@arg
 16185  001D9E  C065  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
 16186  001DA2  C066  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
 16187  001DA6  C067  F01B         	movff	___ftdiv@exp,___ftpack@exp
 16188  001DAA  C068  F01C         	movff	___ftdiv@sign,___ftpack@sign
 16189  001DAE  ECA5  F011         	call	___ftpack	;wreg free
 16190  001DB2  C018  F029         	movff	?___ftpack,?___ftdiv
 16191  001DB6  C019  F02A         	movff	?___ftpack+1,?___ftdiv+1
 16192  001DBA  C01A  F02B         	movff	?___ftpack+2,?___ftdiv+2
 16193  001DBE  0012               	return	
 16194  001DC0                     __end_of___ftdiv:
 16195                           	opt stack 0
 16196                           tosu	equ	0xFFF
 16197                           tosh	equ	0xFFE
 16198                           tosl	equ	0xFFD
 16199                           pclath	equ	0xFFA
 16200                           tblptru	equ	0xFF8
 16201                           tblptrh	equ	0xFF7
 16202                           tblptrl	equ	0xFF6
 16203                           tablat	equ	0xFF5
 16204                           prodh	equ	0xFF4
 16205                           prodl	equ	0xFF3
 16206                           intcon	equ	0xFF2
 16207                           intcon2	equ	0xFF1
 16208                           postinc0	equ	0xFEE
 16209                           plusw0	equ	0xFEB
 16210                           wreg	equ	0xFE8
 16211                           indf1	equ	0xFE7
 16212                           postdec1	equ	0xFE5
 16213                           fsr1h	equ	0xFE2
 16214                           fsr1l	equ	0xFE1
 16215                           indf2	equ	0xFDF
 16216                           postinc2	equ	0xFDE
 16217                           postdec2	equ	0xFDD
 16218                           plusw2	equ	0xFDB
 16219                           fsr2h	equ	0xFDA
 16220                           fsr2l	equ	0xFD9
 16221                           status	equ	0xFD8
 16222                           
 16223 ;; *************** function ___awtoft *****************
 16224 ;; Defined at:
 16225 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 16226 ;; Parameters:    Size  Location     Type
 16227 ;;  c               2   31[COMRAM] int 
 16228 ;; Auto vars:     Size  Location     Type
 16229 ;;  sign            1   34[COMRAM] unsigned char 
 16230 ;; Return value:  Size  Location     Type
 16231 ;;                  3   31[COMRAM] float 
 16232 ;; Registers used:
 16233 ;;		wreg, status,2, status,0, cstack
 16234 ;; Tracked objects:
 16235 ;;		On entry : 0/0
 16236 ;;		On exit  : 0/0
 16237 ;;		Unchanged: 0/0
 16238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16239 ;;      Params:         3       0       0       0       0       0       0
 16240 ;;      Locals:         1       0       0       0       0       0       0
 16241 ;;      Temps:          0       0       0       0       0       0       0
 16242 ;;      Totals:         4       0       0       0       0       0       0
 16243 ;;Total ram usage:        4 bytes
 16244 ;; Hardware stack levels used:    1
 16245 ;; Hardware stack levels required when called:    4
 16246 ;; This function calls:
 16247 ;;		___ftpack
 16248 ;; This function is called by:
 16249 ;;		_ReadIntFromEeprom
 16250 ;;		_exp
 16251 ;;		_log
 16252 ;; This function uses a non-reentrant model
 16253 ;;
 16254                           
 16255                           	psect	text103
 16256  00331C                     __ptext103:
 16257                           	opt stack 0
 16258  00331C                     ___awtoft:
 16259                           	opt stack 21
 16260                           
 16261                           ;incstack = 0
 16262  00331C  0E00               	movlw	0
 16263  00331E  6E23               	movwf	___awtoft@sign,c
 16264  003320  AE21               	btfss	___awtoft@c+1,7,c
 16265  003322  D006               	goto	l1661
 16266  003324  6C20               	negf	___awtoft@c,c
 16267  003326  1E21               	comf	___awtoft@c+1,f,c
 16268  003328  B0D8               	btfsc	status,0,c
 16269  00332A  2A21               	incf	___awtoft@c+1,f,c
 16270  00332C  0E01               	movlw	1
 16271  00332E  6E23               	movwf	___awtoft@sign,c
 16272  003330                     l1661:
 16273  003330  C020  F018         	movff	___awtoft@c,___ftpack@arg
 16274  003334  C021  F019         	movff	___awtoft@c+1,___ftpack@arg+1
 16275  003338  6A1A               	clrf	___ftpack@arg+2,c
 16276  00333A  0E8E               	movlw	142
 16277  00333C  6E1B               	movwf	___ftpack@exp,c
 16278  00333E  C023  F01C         	movff	___awtoft@sign,___ftpack@sign
 16279  003342  ECA5  F011         	call	___ftpack	;wreg free
 16280  003346  C018  F020         	movff	?___ftpack,?___awtoft
 16281  00334A  C019  F021         	movff	?___ftpack+1,?___awtoft+1
 16282  00334E  C01A  F022         	movff	?___ftpack+2,?___awtoft+2
 16283  003352  0012               	return	
 16284  003354                     __end_of___awtoft:
 16285                           	opt stack 0
 16286                           tosu	equ	0xFFF
 16287                           tosh	equ	0xFFE
 16288                           tosl	equ	0xFFD
 16289                           pclath	equ	0xFFA
 16290                           tblptru	equ	0xFF8
 16291                           tblptrh	equ	0xFF7
 16292                           tblptrl	equ	0xFF6
 16293                           tablat	equ	0xFF5
 16294                           prodh	equ	0xFF4
 16295                           prodl	equ	0xFF3
 16296                           intcon	equ	0xFF2
 16297                           intcon2	equ	0xFF1
 16298                           postinc0	equ	0xFEE
 16299                           plusw0	equ	0xFEB
 16300                           wreg	equ	0xFE8
 16301                           indf1	equ	0xFE7
 16302                           postdec1	equ	0xFE5
 16303                           fsr1h	equ	0xFE2
 16304                           fsr1l	equ	0xFE1
 16305                           indf2	equ	0xFDF
 16306                           postinc2	equ	0xFDE
 16307                           postdec2	equ	0xFDD
 16308                           plusw2	equ	0xFDB
 16309                           fsr2h	equ	0xFDA
 16310                           fsr2l	equ	0xFD9
 16311                           status	equ	0xFD8
 16312                           
 16313 ;; *************** function ___lltoft *****************
 16314 ;; Defined at:
 16315 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
 16316 ;; Parameters:    Size  Location     Type
 16317 ;;  c               4   31[COMRAM] unsigned long 
 16318 ;; Auto vars:     Size  Location     Type
 16319 ;;  exp             1   39[COMRAM] unsigned char 
 16320 ;; Return value:  Size  Location     Type
 16321 ;;                  3   31[COMRAM] float 
 16322 ;; Registers used:
 16323 ;;		wreg, status,2, status,0, cstack
 16324 ;; Tracked objects:
 16325 ;;		On entry : 0/0
 16326 ;;		On exit  : 0/0
 16327 ;;		Unchanged: 0/0
 16328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16329 ;;      Params:         4       0       0       0       0       0       0
 16330 ;;      Locals:         1       0       0       0       0       0       0
 16331 ;;      Temps:          4       0       0       0       0       0       0
 16332 ;;      Totals:         9       0       0       0       0       0       0
 16333 ;;Total ram usage:        9 bytes
 16334 ;; Hardware stack levels used:    1
 16335 ;; Hardware stack levels required when called:    4
 16336 ;; This function calls:
 16337 ;;		___ftpack
 16338 ;; This function is called by:
 16339 ;;		_CheckFlashPrecentage
 16340 ;;		_pow
 16341 ;; This function uses a non-reentrant model
 16342 ;;
 16343                           
 16344                           	psect	text104
 16345  002CB8                     __ptext104:
 16346                           	opt stack 0
 16347  002CB8                     ___lltoft:
 16348                           	opt stack 22
 16349                           
 16350                           ;incstack = 0
 16351  002CB8  0E8E               	movlw	142
 16352  002CBA  6E28               	movwf	___lltoft@exp,c
 16353  002CBC  D006               	goto	l1837
 16354  002CBE  90D8               	bcf	status,0,c
 16355  002CC0  3223               	rrcf	___lltoft@c+3,f,c
 16356  002CC2  3222               	rrcf	___lltoft@c+2,f,c
 16357  002CC4  3221               	rrcf	___lltoft@c+1,f,c
 16358  002CC6  3220               	rrcf	___lltoft@c,f,c
 16359  002CC8  2A28               	incf	___lltoft@exp,f,c
 16360  002CCA                     l1837:
 16361  002CCA  0E00               	movlw	0
 16362  002CCC  1420               	andwf	___lltoft@c,w,c
 16363  002CCE  6E24               	movwf	??___lltoft& (0+255),c
 16364  002CD0  0E00               	movlw	0
 16365  002CD2  1421               	andwf	___lltoft@c+1,w,c
 16366  002CD4  6E25               	movwf	(??___lltoft+1)& (0+255),c
 16367  002CD6  0E00               	movlw	0
 16368  002CD8  1422               	andwf	___lltoft@c+2,w,c
 16369  002CDA  6E26               	movwf	(??___lltoft+2)& (0+255),c
 16370  002CDC  0EFF               	movlw	255
 16371  002CDE  1423               	andwf	___lltoft@c+3,w,c
 16372  002CE0  6E27               	movwf	(??___lltoft+3)& (0+255),c
 16373  002CE2  5024               	movf	??___lltoft,w,c
 16374  002CE4  1025               	iorwf	??___lltoft+1,w,c
 16375  002CE6  1026               	iorwf	??___lltoft+2,w,c
 16376  002CE8  1027               	iorwf	??___lltoft+3,w,c
 16377  002CEA  A4D8               	btfss	status,2,c
 16378  002CEC  D7E8               	goto	l1838
 16379  002CEE  C020  F018         	movff	___lltoft@c,___ftpack@arg
 16380  002CF2  C021  F019         	movff	___lltoft@c+1,___ftpack@arg+1
 16381  002CF6  C022  F01A         	movff	___lltoft@c+2,___ftpack@arg+2
 16382  002CFA  C028  F01B         	movff	___lltoft@exp,___ftpack@exp
 16383  002CFE  0E00               	movlw	0
 16384  002D00  6E1C               	movwf	___ftpack@sign,c
 16385  002D02  ECA5  F011         	call	___ftpack	;wreg free
 16386  002D06  C018  F020         	movff	?___ftpack,?___lltoft
 16387  002D0A  C019  F021         	movff	?___ftpack+1,?___lltoft+1
 16388  002D0E  C01A  F022         	movff	?___ftpack+2,?___lltoft+2
 16389  002D12  0012               	return	
 16390  002D14                     __end_of___lltoft:
 16391                           	opt stack 0
 16392                           tosu	equ	0xFFF
 16393                           tosh	equ	0xFFE
 16394                           tosl	equ	0xFFD
 16395                           pclath	equ	0xFFA
 16396                           tblptru	equ	0xFF8
 16397                           tblptrh	equ	0xFF7
 16398                           tblptrl	equ	0xFF6
 16399                           tablat	equ	0xFF5
 16400                           prodh	equ	0xFF4
 16401                           prodl	equ	0xFF3
 16402                           intcon	equ	0xFF2
 16403                           intcon2	equ	0xFF1
 16404                           postinc0	equ	0xFEE
 16405                           plusw0	equ	0xFEB
 16406                           wreg	equ	0xFE8
 16407                           indf1	equ	0xFE7
 16408                           postdec1	equ	0xFE5
 16409                           fsr1h	equ	0xFE2
 16410                           fsr1l	equ	0xFE1
 16411                           indf2	equ	0xFDF
 16412                           postinc2	equ	0xFDE
 16413                           postdec2	equ	0xFDD
 16414                           plusw2	equ	0xFDB
 16415                           fsr2h	equ	0xFDA
 16416                           fsr2l	equ	0xFD9
 16417                           status	equ	0xFD8
 16418                           
 16419 ;; *************** function ___lwtoft *****************
 16420 ;; Defined at:
 16421 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 16422 ;; Parameters:    Size  Location     Type
 16423 ;;  c               2   31[COMRAM] unsigned int 
 16424 ;; Auto vars:     Size  Location     Type
 16425 ;;		None
 16426 ;; Return value:  Size  Location     Type
 16427 ;;                  3   31[COMRAM] float 
 16428 ;; Registers used:
 16429 ;;		wreg, status,2, status,0, cstack
 16430 ;; Tracked objects:
 16431 ;;		On entry : 0/0
 16432 ;;		On exit  : 0/0
 16433 ;;		Unchanged: 0/0
 16434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16435 ;;      Params:         3       0       0       0       0       0       0
 16436 ;;      Locals:         0       0       0       0       0       0       0
 16437 ;;      Temps:          0       0       0       0       0       0       0
 16438 ;;      Totals:         3       0       0       0       0       0       0
 16439 ;;Total ram usage:        3 bytes
 16440 ;; Hardware stack levels used:    1
 16441 ;; Hardware stack levels required when called:    4
 16442 ;; This function calls:
 16443 ;;		___ftpack
 16444 ;; This function is called by:
 16445 ;;		_AdcConvert
 16446 ;; This function uses a non-reentrant model
 16447 ;;
 16448                           
 16449                           	psect	text105
 16450  003710                     __ptext105:
 16451                           	opt stack 0
 16452  003710                     ___lwtoft:
 16453                           	opt stack 25
 16454                           
 16455                           ;incstack = 0
 16456  003710  C020  F018         	movff	___lwtoft@c,___ftpack@arg
 16457  003714  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
 16458  003718  6A1A               	clrf	___ftpack@arg+2,c
 16459  00371A  0E8E               	movlw	142
 16460  00371C  6E1B               	movwf	___ftpack@exp,c
 16461  00371E  0E00               	movlw	0
 16462  003720  6E1C               	movwf	___ftpack@sign,c
 16463  003722  ECA5  F011         	call	___ftpack	;wreg free
 16464  003726  C018  F020         	movff	?___ftpack,?___lwtoft
 16465  00372A  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
 16466  00372E  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
 16467  003732  0012               	return	
 16468  003734                     __end_of___lwtoft:
 16469                           	opt stack 0
 16470                           tosu	equ	0xFFF
 16471                           tosh	equ	0xFFE
 16472                           tosl	equ	0xFFD
 16473                           pclath	equ	0xFFA
 16474                           tblptru	equ	0xFF8
 16475                           tblptrh	equ	0xFF7
 16476                           tblptrl	equ	0xFF6
 16477                           tablat	equ	0xFF5
 16478                           prodh	equ	0xFF4
 16479                           prodl	equ	0xFF3
 16480                           intcon	equ	0xFF2
 16481                           intcon2	equ	0xFF1
 16482                           postinc0	equ	0xFEE
 16483                           plusw0	equ	0xFEB
 16484                           wreg	equ	0xFE8
 16485                           indf1	equ	0xFE7
 16486                           postdec1	equ	0xFE5
 16487                           fsr1h	equ	0xFE2
 16488                           fsr1l	equ	0xFE1
 16489                           indf2	equ	0xFDF
 16490                           postinc2	equ	0xFDE
 16491                           postdec2	equ	0xFDD
 16492                           plusw2	equ	0xFDB
 16493                           fsr2h	equ	0xFDA
 16494                           fsr2l	equ	0xFD9
 16495                           status	equ	0xFD8
 16496                           
 16497 ;; *************** function ___ftpack *****************
 16498 ;; Defined at:
 16499 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 16500 ;; Parameters:    Size  Location     Type
 16501 ;;  arg             3   23[COMRAM] unsigned um
 16502 ;;  exp             1   26[COMRAM] unsigned char 
 16503 ;;  sign            1   27[COMRAM] unsigned char 
 16504 ;; Auto vars:     Size  Location     Type
 16505 ;;		None
 16506 ;; Return value:  Size  Location     Type
 16507 ;;                  3   23[COMRAM] float 
 16508 ;; Registers used:
 16509 ;;		wreg, status,2, status,0
 16510 ;; Tracked objects:
 16511 ;;		On entry : 0/0
 16512 ;;		On exit  : 0/0
 16513 ;;		Unchanged: 0/0
 16514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16515 ;;      Params:         5       0       0       0       0       0       0
 16516 ;;      Locals:         0       0       0       0       0       0       0
 16517 ;;      Temps:          3       0       0       0       0       0       0
 16518 ;;      Totals:         8       0       0       0       0       0       0
 16519 ;;Total ram usage:        8 bytes
 16520 ;; Hardware stack levels used:    1
 16521 ;; Hardware stack levels required when called:    3
 16522 ;; This function calls:
 16523 ;;		Nothing
 16524 ;; This function is called by:
 16525 ;;		___altoft
 16526 ;;		___awtoft
 16527 ;;		___ftadd
 16528 ;;		___ftdiv
 16529 ;;		___ftmul
 16530 ;;		___lltoft
 16531 ;;		___lwtoft
 16532 ;; This function uses a non-reentrant model
 16533 ;;
 16534                           
 16535                           	psect	text106
 16536  00234A                     __ptext106:
 16537                           	opt stack 0
 16538  00234A                     ___ftpack:
 16539                           	opt stack 20
 16540                           
 16541                           ;incstack = 0
 16542  00234A  501B               	movf	___ftpack@exp,w,c
 16543  00234C  B4D8               	btfsc	status,2,c
 16544  00234E  D005               	goto	u5950
 16545  002350  5018               	movf	___ftpack@arg,w,c
 16546  002352  1019               	iorwf	___ftpack@arg+1,w,c
 16547  002354  101A               	iorwf	___ftpack@arg+2,w,c
 16548  002356  A4D8               	btfss	status,2,c
 16549  002358  D00C               	goto	l1680
 16550  00235A                     u5950:
 16551  00235A  0E00               	movlw	0
 16552  00235C  6E18               	movwf	?___ftpack,c
 16553  00235E  0E00               	movlw	0
 16554  002360  6E19               	movwf	?___ftpack+1,c
 16555  002362  0E00               	movlw	0
 16556  002364  6E1A               	movwf	?___ftpack+2,c
 16557  002366  0012               	return	
 16558  002368  2A1B               	incf	___ftpack@exp,f,c
 16559  00236A  90D8               	bcf	status,0,c
 16560  00236C  321A               	rrcf	___ftpack@arg+2,f,c
 16561  00236E  3219               	rrcf	___ftpack@arg+1,f,c
 16562  002370  3218               	rrcf	___ftpack@arg,f,c
 16563  002372                     l1680:
 16564  002372  0E00               	movlw	0
 16565  002374  1418               	andwf	___ftpack@arg,w,c
 16566  002376  6E1D               	movwf	??___ftpack& (0+255),c
 16567  002378  0E00               	movlw	0
 16568  00237A  1419               	andwf	___ftpack@arg+1,w,c
 16569  00237C  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 16570  00237E  0EFE               	movlw	254
 16571  002380  141A               	andwf	___ftpack@arg+2,w,c
 16572  002382  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 16573  002384  501D               	movf	??___ftpack,w,c
 16574  002386  101E               	iorwf	??___ftpack+1,w,c
 16575  002388  101F               	iorwf	??___ftpack+2,w,c
 16576  00238A  B4D8               	btfsc	status,2,c
 16577  00238C  D00C               	goto	l1683
 16578  00238E  D7EC               	goto	l1681
 16579  002390  2A1B               	incf	___ftpack@exp,f,c
 16580  002392  0E01               	movlw	1
 16581  002394  2618               	addwf	___ftpack@arg,f,c
 16582  002396  0E00               	movlw	0
 16583  002398  2219               	addwfc	___ftpack@arg+1,f,c
 16584  00239A  0E00               	movlw	0
 16585  00239C  221A               	addwfc	___ftpack@arg+2,f,c
 16586  00239E  90D8               	bcf	status,0,c
 16587  0023A0  321A               	rrcf	___ftpack@arg+2,f,c
 16588  0023A2  3219               	rrcf	___ftpack@arg+1,f,c
 16589  0023A4  3218               	rrcf	___ftpack@arg,f,c
 16590  0023A6                     l1683:
 16591  0023A6  0E00               	movlw	0
 16592  0023A8  1418               	andwf	___ftpack@arg,w,c
 16593  0023AA  6E1D               	movwf	??___ftpack& (0+255),c
 16594  0023AC  0E00               	movlw	0
 16595  0023AE  1419               	andwf	___ftpack@arg+1,w,c
 16596  0023B0  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 16597  0023B2  0EFF               	movlw	255
 16598  0023B4  141A               	andwf	___ftpack@arg+2,w,c
 16599  0023B6  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 16600  0023B8  501D               	movf	??___ftpack,w,c
 16601  0023BA  101E               	iorwf	??___ftpack+1,w,c
 16602  0023BC  101F               	iorwf	??___ftpack+2,w,c
 16603  0023BE  B4D8               	btfsc	status,2,c
 16604  0023C0  D006               	goto	l1686
 16605  0023C2  D7E6               	goto	l1684
 16606  0023C4  061B               	decf	___ftpack@exp,f,c
 16607  0023C6  90D8               	bcf	status,0,c
 16608  0023C8  3618               	rlcf	___ftpack@arg,f,c
 16609  0023CA  3619               	rlcf	___ftpack@arg+1,f,c
 16610  0023CC  361A               	rlcf	___ftpack@arg+2,f,c
 16611  0023CE                     l1686:
 16612  0023CE  BE19               	btfsc	___ftpack@arg+1,7,c
 16613  0023D0  D003               	goto	u5990
 16614  0023D2  0E02               	movlw	2
 16615  0023D4  601B               	cpfslt	___ftpack@exp,c
 16616  0023D6  D7F6               	goto	l1687
 16617  0023D8                     u5990:
 16618  0023D8  A01B               	btfss	___ftpack@exp,0,c
 16619  0023DA  9E19               	bcf	___ftpack@arg+1,7,c
 16620  0023DC  90D8               	bcf	status,0,c
 16621  0023DE  321B               	rrcf	___ftpack@exp,f,c
 16622  0023E0  501B               	movf	___ftpack@exp,w,c
 16623  0023E2  121A               	iorwf	___ftpack@arg+2,f,c
 16624  0023E4  501C               	movf	___ftpack@sign,w,c
 16625  0023E6  A4D8               	btfss	status,2,c
 16626  0023E8  8E1A               	bsf	___ftpack@arg+2,7,c
 16627  0023EA  C018  F018         	movff	___ftpack@arg,?___ftpack
 16628  0023EE  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
 16629  0023F2  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
 16630  0023F6  0012               	return	
 16631  0023F8                     __end_of___ftpack:
 16632                           	opt stack 0
 16633                           tosu	equ	0xFFF
 16634                           tosh	equ	0xFFE
 16635                           tosl	equ	0xFFD
 16636                           pclath	equ	0xFFA
 16637                           tblptru	equ	0xFF8
 16638                           tblptrh	equ	0xFF7
 16639                           tblptrl	equ	0xFF6
 16640                           tablat	equ	0xFF5
 16641                           prodh	equ	0xFF4
 16642                           prodl	equ	0xFF3
 16643                           intcon	equ	0xFF2
 16644                           intcon2	equ	0xFF1
 16645                           postinc0	equ	0xFEE
 16646                           plusw0	equ	0xFEB
 16647                           wreg	equ	0xFE8
 16648                           indf1	equ	0xFE7
 16649                           postdec1	equ	0xFE5
 16650                           fsr1h	equ	0xFE2
 16651                           fsr1l	equ	0xFE1
 16652                           indf2	equ	0xFDF
 16653                           postinc2	equ	0xFDE
 16654                           postdec2	equ	0xFDD
 16655                           plusw2	equ	0xFDB
 16656                           fsr2h	equ	0xFDA
 16657                           fsr2l	equ	0xFD9
 16658                           status	equ	0xFD8
 16659                           
 16660 ;; *************** function _FlashSampleWrite *****************
 16661 ;; Defined at:
 16662 ;;		line 29 in file "FlashApp.c"
 16663 ;; Parameters:    Size  Location     Type
 16664 ;;  sampleData      2   44[COMRAM] unsigned int 
 16665 ;;  channelNum      1   46[COMRAM] unsigned char 
 16666 ;; Auto vars:     Size  Location     Type
 16667 ;;  rotateLeft      2    2[BANK0 ] unsigned int 
 16668 ;; Return value:  Size  Location     Type
 16669 ;;                  1    wreg      void 
 16670 ;; Registers used:
 16671 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16672 ;; Tracked objects:
 16673 ;;		On entry : 0/0
 16674 ;;		On exit  : 0/0
 16675 ;;		Unchanged: 0/0
 16676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16677 ;;      Params:         3       0       0       0       0       0       0
 16678 ;;      Locals:         0       2       0       0       0       0       0
 16679 ;;      Temps:          0       2       0       0       0       0       0
 16680 ;;      Totals:         3       4       0       0       0       0       0
 16681 ;;Total ram usage:        7 bytes
 16682 ;; Hardware stack levels used:    1
 16683 ;; Hardware stack levels required when called:    5
 16684 ;; This function calls:
 16685 ;;		_FLASH_IsWriteDone
 16686 ;;		_FLASH_WriteBlock
 16687 ;; This function is called by:
 16688 ;;		_AdcConvert
 16689 ;; This function uses a non-reentrant model
 16690 ;;
 16691                           
 16692                           	psect	text107
 16693  0019F0                     __ptext107:
 16694                           	opt stack 0
 16695  0019F0                     _FlashSampleWrite:
 16696                           	opt stack 24
 16697                           
 16698                           ;FlashApp.c: 32: uint16_t rotateLeft = (channelNum << 12);
 16699                           
 16700                           ;incstack = 0
 16701  0019F0  502F               	movf	FlashSampleWrite@channelNum,w,c
 16702  0019F2  0100               	movlb	0	; () banked
 16703  0019F4  6F60               	movwf	??_FlashSampleWrite& (0+255),b
 16704  0019F6  6B61               	clrf	(??_FlashSampleWrite+1)& (0+255),b
 16705  0019F8  0E0C               	movlw	12
 16706  0019FA                     u8145:
 16707  0019FA  90D8               	bcf	status,0,c
 16708  0019FC  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 16709  0019FE  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 16710  001A00  2EE8               	decfsz	wreg,f,c
 16711  001A02  D7FB               	goto	u8145
 16712  001A04  C060  F062         	movff	??_FlashSampleWrite,FlashSampleWrite@rotateLeft
 16713  001A08  C061  F063         	movff	??_FlashSampleWrite+1,FlashSampleWrite@rotateLeft+1
 16714                           
 16715                           ;FlashApp.c: 33: sampleData |= rotateLeft;
 16716  001A0C  5162               	movf	FlashSampleWrite@rotateLeft& (0+255),w,b
 16717  001A0E  122D               	iorwf	FlashSampleWrite@sampleData,f,c
 16718  001A10  5163               	movf	(FlashSampleWrite@rotateLeft+1)& (0+255),w,b
 16719  001A12  122E               	iorwf	FlashSampleWrite@sampleData+1,f,c
 16720                           
 16721                           ; BSR set to: 0
 16722                           ;FlashApp.c: 34: sampleArray[sampleCount] = sampleData;
 16723  001A14  90D8               	bcf	status,0,c
 16724  001A16  35C6               	rlcf	_sampleCount& (0+255),w,b
 16725  001A18  6ED9               	movwf	fsr2l,c
 16726  001A1A  35C7               	rlcf	(_sampleCount+1)& (0+255),w,b
 16727  001A1C  6EDA               	movwf	fsr2h,c
 16728  001A1E  0E6E               	movlw	low _sampleArray
 16729  001A20  26D9               	addwf	fsr2l,f,c
 16730  001A22  0E01               	movlw	high _sampleArray
 16731  001A24  22DA               	addwfc	fsr2h,f,c
 16732  001A26  C02D  FFDE         	movff	FlashSampleWrite@sampleData,postinc2
 16733  001A2A  C02E  FFDD         	movff	FlashSampleWrite@sampleData+1,postdec2
 16734                           
 16735                           ; BSR set to: 0
 16736                           ;FlashApp.c: 35: sampleCount ++;
 16737  001A2E  4BC6               	infsnz	_sampleCount& (0+255),f,b
 16738  001A30  2BC7               	incf	(_sampleCount+1)& (0+255),f,b
 16739                           
 16740                           ; BSR set to: 0
 16741                           ;FlashApp.c: 37: if(((sampleCount*sizeof(adc_result_t)) >= (64)) && FLASH_IsWriteDone())
 16742  001A32  C0C6  F060         	movff	_sampleCount,??_FlashSampleWrite
 16743  001A36  C0C7  F061         	movff	_sampleCount+1,??_FlashSampleWrite+1
 16744  001A3A  90D8               	bcf	status,0,c
 16745  001A3C  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 16746  001A3E  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 16747  001A40  5161               	movf	(??_FlashSampleWrite+1)& (0+255),w,b
 16748  001A42  E104               	bnz	u8150
 16749  001A44  0E40               	movlw	64
 16750  001A46  5D60               	subwf	??_FlashSampleWrite& (0+255),w,b
 16751  001A48  A0D8               	btfss	status,0,c
 16752  001A4A  0012               	return	
 16753  001A4C                     u8150:
 16754                           
 16755                           ; BSR set to: 0
 16756  001A4C  EC76  F01C         	call	_FLASH_IsWriteDone	;wreg free
 16757  001A50  0900               	iorlw	0
 16758  001A52  B4D8               	btfsc	status,2,c
 16759  001A54  0012               	return	
 16760                           
 16761                           ;FlashApp.c: 38: {
 16762                           ;FlashApp.c: 39: FLASH_WriteBlock(writeAddress, (uint8_t *)sampleArray);
 16763  001A56  C040  F01D         	movff	_writeAddress,FLASH_WriteBlock@writeAddr
 16764  001A5A  C041  F01E         	movff	_writeAddress+1,FLASH_WriteBlock@writeAddr+1
 16765  001A5E  C042  F01F         	movff	_writeAddress+2,FLASH_WriteBlock@writeAddr+2
 16766  001A62  C043  F020         	movff	_writeAddress+3,FLASH_WriteBlock@writeAddr+3
 16767  001A66  0E6E               	movlw	low _sampleArray
 16768  001A68  6E21               	movwf	FLASH_WriteBlock@flashWrBufPtr,c
 16769  001A6A  0E01               	movlw	high _sampleArray
 16770  001A6C  6E22               	movwf	FLASH_WriteBlock@flashWrBufPtr+1,c
 16771  001A6E  EC93  F010         	call	_FLASH_WriteBlock	;wreg free
 16772                           
 16773                           ;FlashApp.c: 40: writeAddress += (64);
 16774  001A72  0E40               	movlw	64
 16775  001A74  2640               	addwf	_writeAddress,f,c
 16776  001A76  0E00               	movlw	0
 16777  001A78  2241               	addwfc	_writeAddress+1,f,c
 16778  001A7A  2242               	addwfc	_writeAddress+2,f,c
 16779  001A7C  2243               	addwfc	_writeAddress+3,f,c
 16780                           
 16781                           ;FlashApp.c: 41: if (writeAddress >= 0x7FF0)
 16782  001A7E  5043               	movf	_writeAddress+3,w,c
 16783  001A80  1042               	iorwf	_writeAddress+2,w,c
 16784  001A82  E106               	bnz	u8170
 16785  001A84  0EF0               	movlw	240
 16786  001A86  5C40               	subwf	_writeAddress,w,c
 16787  001A88  0E7F               	movlw	127
 16788  001A8A  5841               	subwfb	_writeAddress+1,w,c
 16789  001A8C  A0D8               	btfss	status,0,c
 16790  001A8E  D018               	goto	l299
 16791  001A90                     u8170:
 16792                           
 16793                           ;FlashApp.c: 42: {
 16794                           ;FlashApp.c: 43: writeAddress = 0x4000;
 16795  001A90  0E00               	movlw	0
 16796  001A92  6E40               	movwf	_writeAddress,c
 16797  001A94  0E40               	movlw	64
 16798  001A96  6E41               	movwf	_writeAddress+1,c
 16799  001A98  0E00               	movlw	0
 16800  001A9A  6E42               	movwf	_writeAddress+2,c
 16801  001A9C  0E00               	movlw	0
 16802  001A9E  6E43               	movwf	_writeAddress+3,c
 16803                           
 16804                           ;FlashApp.c: 44: isReWriteDone = 1;
 16805  001AA0  0E01               	movlw	1
 16806  001AA2  0100               	movlb	0	; () banked
 16807  001AA4  6FCA               	movwf	_isReWriteDone& (0+255),b
 16808                           
 16809                           ; BSR set to: 0
 16810                           ;FlashApp.c: 45: if (readAddress == 0x4000)
 16811  001AA6  0E40               	movlw	64
 16812  001AA8  19FA               	xorwf	(_readAddress+1)& (0+255),w,b
 16813  001AAA  11F9               	iorwf	_readAddress& (0+255),w,b
 16814  001AAC  11FB               	iorwf	(_readAddress+2)& (0+255),w,b
 16815  001AAE  11FC               	iorwf	(_readAddress+3)& (0+255),w,b
 16816  001AB0  A4D8               	btfss	status,2,c
 16817  001AB2  D006               	goto	l299
 16818                           
 16819                           ; BSR set to: 0
 16820                           ;FlashApp.c: 46: {
 16821                           ;FlashApp.c: 47: readAddress += (64);
 16822  001AB4  0E40               	movlw	64
 16823  001AB6  27F9               	addwf	_readAddress& (0+255),f,b
 16824  001AB8  0E00               	movlw	0
 16825  001ABA  23FA               	addwfc	(_readAddress+1)& (0+255),f,b
 16826  001ABC  23FB               	addwfc	(_readAddress+2)& (0+255),f,b
 16827  001ABE  23FC               	addwfc	(_readAddress+3)& (0+255),f,b
 16828  001AC0                     l299:
 16829                           
 16830                           ;FlashApp.c: 48: }
 16831                           ;FlashApp.c: 49: }
 16832                           ;FlashApp.c: 51: if (numOfValidateSamples < ((0x4000-0x7FF0)/(64)))
 16833                           
 16834                           ; BSR set to: 0
 16835  001AC0  0430               	decf	_numOfValidateSamples,w,c
 16836  001AC2  0EFF               	movlw	255
 16837  001AC4  5831               	subwfb	_numOfValidateSamples+1,w,c
 16838  001AC6  0EFF               	movlw	255
 16839  001AC8  5832               	subwfb	_numOfValidateSamples+2,w,c
 16840  001ACA  0EFF               	movlw	255
 16841  001ACC  5833               	subwfb	_numOfValidateSamples+3,w,c
 16842  001ACE  B0D8               	btfsc	status,0,c
 16843  001AD0  D006               	goto	l300
 16844                           
 16845                           ;FlashApp.c: 52: {
 16846                           ;FlashApp.c: 53: numOfValidateSamples++;
 16847  001AD2  0E01               	movlw	1
 16848  001AD4  2630               	addwf	_numOfValidateSamples,f,c
 16849  001AD6  0E00               	movlw	0
 16850  001AD8  2231               	addwfc	_numOfValidateSamples+1,f,c
 16851  001ADA  2232               	addwfc	_numOfValidateSamples+2,f,c
 16852  001ADC  2233               	addwfc	_numOfValidateSamples+3,f,c
 16853  001ADE                     l300:
 16854                           
 16855                           ;FlashApp.c: 54: }
 16856                           ;FlashApp.c: 55: sampleCount = 0;
 16857  001ADE  0E00               	movlw	0
 16858  001AE0  0100               	movlb	0	; () banked
 16859  001AE2  6FC7               	movwf	(_sampleCount+1)& (0+255),b
 16860  001AE4  0E00               	movlw	0
 16861  001AE6  6FC6               	movwf	_sampleCount& (0+255),b
 16862  001AE8  0012               	return	
 16863  001AEA                     __end_of_FlashSampleWrite:
 16864                           	opt stack 0
 16865                           tosu	equ	0xFFF
 16866                           tosh	equ	0xFFE
 16867                           tosl	equ	0xFFD
 16868                           pclath	equ	0xFFA
 16869                           tblptru	equ	0xFF8
 16870                           tblptrh	equ	0xFF7
 16871                           tblptrl	equ	0xFF6
 16872                           tablat	equ	0xFF5
 16873                           prodh	equ	0xFF4
 16874                           prodl	equ	0xFF3
 16875                           intcon	equ	0xFF2
 16876                           intcon2	equ	0xFF1
 16877                           postinc0	equ	0xFEE
 16878                           plusw0	equ	0xFEB
 16879                           wreg	equ	0xFE8
 16880                           indf1	equ	0xFE7
 16881                           postdec1	equ	0xFE5
 16882                           fsr1h	equ	0xFE2
 16883                           fsr1l	equ	0xFE1
 16884                           indf2	equ	0xFDF
 16885                           postinc2	equ	0xFDE
 16886                           postdec2	equ	0xFDD
 16887                           plusw2	equ	0xFDB
 16888                           fsr2h	equ	0xFDA
 16889                           fsr2l	equ	0xFD9
 16890                           status	equ	0xFD8
 16891                           
 16892 ;; *************** function _FLASH_WriteBlock *****************
 16893 ;; Defined at:
 16894 ;;		line 93 in file "mcc_generated_files/memory.c"
 16895 ;; Parameters:    Size  Location     Type
 16896 ;;  writeAddr       4   28[COMRAM] unsigned long 
 16897 ;;  flashWrBufPt    2   32[COMRAM] PTR unsigned char 
 16898 ;;		 -> FlashTest@buff(128), sampleArray(64), 
 16899 ;; Auto vars:     Size  Location     Type
 16900 ;;  blockStartAd    4   38[COMRAM] unsigned long 
 16901 ;;  i               1   43[COMRAM] unsigned char 
 16902 ;;  GIEBitValue     1   42[COMRAM] unsigned char 
 16903 ;; Return value:  Size  Location     Type
 16904 ;;                  1    wreg      char 
 16905 ;; Registers used:
 16906 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16907 ;; Tracked objects:
 16908 ;;		On entry : 0/0
 16909 ;;		On exit  : 0/0
 16910 ;;		Unchanged: 0/0
 16911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16912 ;;      Params:         6       0       0       0       0       0       0
 16913 ;;      Locals:         6       0       0       0       0       0       0
 16914 ;;      Temps:          4       0       0       0       0       0       0
 16915 ;;      Totals:        16       0       0       0       0       0       0
 16916 ;;Total ram usage:       16 bytes
 16917 ;; Hardware stack levels used:    1
 16918 ;; Hardware stack levels required when called:    4
 16919 ;; This function calls:
 16920 ;;		_FLASH_EraseBlock
 16921 ;; This function is called by:
 16922 ;;		_FlashSampleWrite
 16923 ;;		_FlashTest
 16924 ;;		_FLASH_WriteByte
 16925 ;; This function uses a non-reentrant model
 16926 ;;
 16927                           
 16928                           	psect	text108
 16929  002126                     __ptext108:
 16930                           	opt stack 0
 16931  002126                     _FLASH_WriteBlock:
 16932                           	opt stack 24
 16933                           
 16934                           ;memory.c: 95: uint32_t blockStartAddr = (uint32_t )(writeAddr & ((0x8000-1) ^ ((64)-1))
      +                          );
 16935                           
 16936                           ;incstack = 0
 16937  002126  0EC0               	movlw	192
 16938  002128  6E23               	movwf	??_FLASH_WriteBlock& (0+255),c
 16939  00212A  0E7F               	movlw	127
 16940  00212C  6E24               	movwf	(??_FLASH_WriteBlock+1)& (0+255),c
 16941  00212E  C01D  F025         	movff	FLASH_WriteBlock@writeAddr,??_FLASH_WriteBlock+2
 16942  002132  C01E  F026         	movff	FLASH_WriteBlock@writeAddr+1,??_FLASH_WriteBlock+3
 16943  002136  5023               	movf	??_FLASH_WriteBlock,w,c
 16944  002138  1625               	andwf	??_FLASH_WriteBlock+2,f,c
 16945  00213A  5024               	movf	??_FLASH_WriteBlock+1,w,c
 16946  00213C  1626               	andwf	??_FLASH_WriteBlock+3,f,c
 16947  00213E  C025  F027         	movff	??_FLASH_WriteBlock+2,FLASH_WriteBlock@blockStartAddr
 16948  002142  C026  F028         	movff	??_FLASH_WriteBlock+3,FLASH_WriteBlock@blockStartAddr+1
 16949  002146  6A29               	clrf	FLASH_WriteBlock@blockStartAddr+2,c
 16950  002148  6A2A               	clrf	FLASH_WriteBlock@blockStartAddr+3,c
 16951                           
 16952                           ;memory.c: 96: uint8_t GIEBitValue = INTCONbits.GIE;
 16953  00214A  0E00               	movlw	0
 16954  00214C  BEF2               	btfsc	intcon,7,c	;volatile
 16955  00214E  0E01               	movlw	1
 16956  002150  6E2B               	movwf	FLASH_WriteBlock@GIEBitValue,c
 16957                           
 16958                           ;memory.c: 97: uint8_t i;
 16959                           ;memory.c: 100: if( writeAddr != blockStartAddr )
 16960  002152  5027               	movf	FLASH_WriteBlock@blockStartAddr,w,c
 16961  002154  181D               	xorwf	FLASH_WriteBlock@writeAddr,w,c
 16962  002156  E144               	bnz	l954
 16963  002158  5028               	movf	FLASH_WriteBlock@blockStartAddr+1,w,c
 16964  00215A  181E               	xorwf	FLASH_WriteBlock@writeAddr+1,w,c
 16965  00215C  E141               	bnz	l954
 16966  00215E  5029               	movf	FLASH_WriteBlock@blockStartAddr+2,w,c
 16967  002160  181F               	xorwf	FLASH_WriteBlock@writeAddr+2,w,c
 16968  002162  E13E               	bnz	l954
 16969  002164  502A               	movf	FLASH_WriteBlock@blockStartAddr+3,w,c
 16970  002166  1820               	xorwf	FLASH_WriteBlock@writeAddr+3,w,c
 16971  002168  A4D8               	btfss	status,2,c
 16972  00216A  0012               	return	
 16973                           
 16974                           ;memory.c: 103: }
 16975                           ;memory.c: 106: FLASH_EraseBlock(writeAddr);
 16976                           
 16977                           ;memory.c: 101: {
 16978                           ;memory.c: 102: return -1;
 16979                           ;	Return value of _FLASH_WriteBlock is never used
 16980  00216C  C01D  F018         	movff	FLASH_WriteBlock@writeAddr,FLASH_EraseBlock@baseAddr
 16981  002170  C01E  F019         	movff	FLASH_WriteBlock@writeAddr+1,FLASH_EraseBlock@baseAddr+1
 16982  002174  C01F  F01A         	movff	FLASH_WriteBlock@writeAddr+2,FLASH_EraseBlock@baseAddr+2
 16983  002178  C020  F01B         	movff	FLASH_WriteBlock@writeAddr+3,FLASH_EraseBlock@baseAddr+3
 16984  00217C  EC31  F01A         	call	_FLASH_EraseBlock	;wreg free
 16985                           
 16986                           ;memory.c: 109: TBLPTRU = (uint8_t)((writeAddr & 0x00FF0000) >> 16);
 16987  002180  C01F  FFF8         	movff	FLASH_WriteBlock@writeAddr+2,tblptru	;volatile
 16988                           
 16989                           ;memory.c: 110: TBLPTRH = (uint8_t)((writeAddr & 0x0000FF00)>> 8);
 16990  002184  C01E  FFF7         	movff	FLASH_WriteBlock@writeAddr+1,tblptrh	;volatile
 16991                           
 16992                           ;memory.c: 111: TBLPTRL = (uint8_t)(writeAddr & 0x000000FF);
 16993  002188  C01D  FFF6         	movff	FLASH_WriteBlock@writeAddr,tblptrl	;volatile
 16994                           
 16995                           ;memory.c: 114: for (i=0; i<(64); i++)
 16996  00218C  0E00               	movlw	0
 16997  00218E  6E2C               	movwf	FLASH_WriteBlock@i,c
 16998  002190                     l7674:
 16999  002190  0E3F               	movlw	63
 17000  002192  642C               	cpfsgt	FLASH_WriteBlock@i,c
 17001  002194  D001               	goto	l955
 17002  002196  D013               	goto	u7760
 17003  002198                     l955:
 17004                           
 17005                           ;memory.c: 115: {
 17006                           ;memory.c: 116: TABLAT = flashWrBufPtr[i];
 17007  002198  502C               	movf	FLASH_WriteBlock@i,w,c
 17008  00219A  0D01               	mullw	1
 17009  00219C  50F3               	movf	prodl,w,c
 17010  00219E  2421               	addwf	FLASH_WriteBlock@flashWrBufPtr,w,c
 17011  0021A0  6ED9               	movwf	fsr2l,c
 17012  0021A2  50F4               	movf	prodh,w,c
 17013  0021A4  2022               	addwfc	FLASH_WriteBlock@flashWrBufPtr+1,w,c
 17014  0021A6  6EDA               	movwf	fsr2h,c
 17015  0021A8  50DF               	movf	indf2,w,c
 17016  0021AA  6EF5               	movwf	tablat,c	;volatile
 17017                           
 17018                           ;memory.c: 118: if (i == ((64)-1))
 17019  0021AC  0E3F               	movlw	63
 17020  0021AE  182C               	xorwf	FLASH_WriteBlock@i,w,c
 17021  0021B0  A4D8               	btfss	status,2,c
 17022  0021B2  D002               	goto	l957
 17023  0021B4  000C               	tblwt		*	;# 
 17024                           
 17025                           ;memory.c: 121: }
 17026  0021B6  D001               	goto	l958
 17027  0021B8                     l957:
 17028  0021B8  000D               	tblwt		*+	;# 
 17029  0021BA                     l958:
 17030  0021BA  2A2C               	incf	FLASH_WriteBlock@i,f,c
 17031  0021BC  D7E9               	goto	l7674
 17032  0021BE                     u7760:
 17033                           
 17034                           ;memory.c: 125: }
 17035                           ;memory.c: 126: }
 17036                           ;memory.c: 128: PIR2bits.EEIF = 1;
 17037  0021BE  88A1               	bsf	4001,4,c	;volatile
 17038                           
 17039                           ;memory.c: 129: EECON1bits.EEPGD = 1;
 17040  0021C0  8EA6               	bsf	4006,7,c	;volsfr
 17041                           
 17042                           ;memory.c: 130: EECON1bits.CFGS = 0;
 17043  0021C2  9CA6               	bcf	4006,6,c	;volsfr
 17044                           
 17045                           ;memory.c: 131: EECON1bits.WREN = 1;
 17046  0021C4  84A6               	bsf	4006,2,c	;volsfr
 17047                           
 17048                           ;memory.c: 132: INTCONbits.GIE = 0;
 17049  0021C6  9EF2               	bcf	intcon,7,c	;volatile
 17050                           
 17051                           ;memory.c: 133: EECON2 = 0x55;
 17052  0021C8  0E55               	movlw	85
 17053  0021CA  6EA7               	movwf	4007,c	;volsfr
 17054                           
 17055                           ;memory.c: 134: EECON2 = 0xAA;
 17056  0021CC  0EAA               	movlw	170
 17057  0021CE  6EA7               	movwf	4007,c	;volsfr
 17058                           
 17059                           ;memory.c: 135: EECON1bits.WR = 1;
 17060  0021D0  82A6               	bsf	4006,1,c	;volsfr
 17061                           
 17062                           ;memory.c: 137: EECON1bits.WREN = 0;
 17063  0021D2  94A6               	bcf	4006,2,c	;volsfr
 17064                           
 17065                           ;memory.c: 138: INTCONbits.GIE = GIEBitValue;
 17066  0021D4  B02B               	btfsc	FLASH_WriteBlock@GIEBitValue,0,c
 17067  0021D6  D002               	bra	u7775
 17068  0021D8  9EF2               	bcf	intcon,7,c	;volatile
 17069  0021DA  D001               	bra	u7776
 17070  0021DC                     u7775:
 17071  0021DC  8EF2               	bsf	intcon,7,c	;volatile
 17072  0021DE                     u7776:
 17073  0021DE  0012               	return	
 17074  0021E0                     l954:
 17075  0021E0  0012               	return		;funcret
 17076  0021E2                     __end_of_FLASH_WriteBlock:
 17077                           	opt stack 0
 17078                           tosu	equ	0xFFF
 17079                           tosh	equ	0xFFE
 17080                           tosl	equ	0xFFD
 17081                           pclath	equ	0xFFA
 17082                           tblptru	equ	0xFF8
 17083                           tblptrh	equ	0xFF7
 17084                           tblptrl	equ	0xFF6
 17085                           tablat	equ	0xFF5
 17086                           prodh	equ	0xFF4
 17087                           prodl	equ	0xFF3
 17088                           intcon	equ	0xFF2
 17089                           intcon2	equ	0xFF1
 17090                           postinc0	equ	0xFEE
 17091                           plusw0	equ	0xFEB
 17092                           wreg	equ	0xFE8
 17093                           indf1	equ	0xFE7
 17094                           postdec1	equ	0xFE5
 17095                           fsr1h	equ	0xFE2
 17096                           fsr1l	equ	0xFE1
 17097                           indf2	equ	0xFDF
 17098                           postinc2	equ	0xFDE
 17099                           postdec2	equ	0xFDD
 17100                           plusw2	equ	0xFDB
 17101                           fsr2h	equ	0xFDA
 17102                           fsr2l	equ	0xFD9
 17103                           status	equ	0xFD8
 17104                           
 17105 ;; *************** function _FLASH_EraseBlock *****************
 17106 ;; Defined at:
 17107 ;;		line 144 in file "mcc_generated_files/memory.c"
 17108 ;; Parameters:    Size  Location     Type
 17109 ;;  baseAddr        4   23[COMRAM] unsigned long 
 17110 ;; Auto vars:     Size  Location     Type
 17111 ;;  GIEBitValue     1   27[COMRAM] unsigned char 
 17112 ;; Return value:  Size  Location     Type
 17113 ;;                  1    wreg      void 
 17114 ;; Registers used:
 17115 ;;		wreg, status,2
 17116 ;; Tracked objects:
 17117 ;;		On entry : 0/0
 17118 ;;		On exit  : 0/0
 17119 ;;		Unchanged: 0/0
 17120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17121 ;;      Params:         4       0       0       0       0       0       0
 17122 ;;      Locals:         1       0       0       0       0       0       0
 17123 ;;      Temps:          0       0       0       0       0       0       0
 17124 ;;      Totals:         5       0       0       0       0       0       0
 17125 ;;Total ram usage:        5 bytes
 17126 ;; Hardware stack levels used:    1
 17127 ;; Hardware stack levels required when called:    3
 17128 ;; This function calls:
 17129 ;;		Nothing
 17130 ;; This function is called by:
 17131 ;;		_FLASH_WriteBlock
 17132 ;; This function uses a non-reentrant model
 17133 ;;
 17134                           
 17135                           	psect	text109
 17136  003462                     __ptext109:
 17137                           	opt stack 0
 17138  003462                     _FLASH_EraseBlock:
 17139                           	opt stack 24
 17140                           
 17141                           ;memory.c: 146: uint8_t GIEBitValue = INTCONbits.GIE;
 17142                           
 17143                           ;incstack = 0
 17144  003462  0E00               	movlw	0
 17145  003464  BEF2               	btfsc	intcon,7,c	;volatile
 17146  003466  0E01               	movlw	1
 17147  003468  6E1C               	movwf	FLASH_EraseBlock@GIEBitValue,c
 17148                           
 17149                           ;memory.c: 148: TBLPTRU = (uint8_t)((baseAddr & 0x00FF0000) >> 16);
 17150  00346A  C01A  FFF8         	movff	FLASH_EraseBlock@baseAddr+2,tblptru	;volatile
 17151                           
 17152                           ;memory.c: 149: TBLPTRH = (uint8_t)((baseAddr & 0x0000FF00)>> 8);
 17153  00346E  C019  FFF7         	movff	FLASH_EraseBlock@baseAddr+1,tblptrh	;volatile
 17154                           
 17155                           ;memory.c: 150: TBLPTRL = (uint8_t)(baseAddr & 0x000000FF);
 17156  003472  C018  FFF6         	movff	FLASH_EraseBlock@baseAddr,tblptrl	;volatile
 17157                           
 17158                           ;memory.c: 152: EECON1bits.EEPGD = 1;
 17159  003476  8EA6               	bsf	4006,7,c	;volsfr
 17160                           
 17161                           ;memory.c: 153: EECON1bits.CFGS = 0;
 17162  003478  9CA6               	bcf	4006,6,c	;volsfr
 17163                           
 17164                           ;memory.c: 154: EECON1bits.WREN = 1;
 17165  00347A  84A6               	bsf	4006,2,c	;volsfr
 17166                           
 17167                           ;memory.c: 155: EECON1bits.FREE = 1;
 17168  00347C  88A6               	bsf	4006,4,c	;volsfr
 17169                           
 17170                           ;memory.c: 156: INTCONbits.GIE = 0;
 17171  00347E  9EF2               	bcf	intcon,7,c	;volatile
 17172                           
 17173                           ;memory.c: 157: EECON2 = 0x55;
 17174  003480  0E55               	movlw	85
 17175  003482  6EA7               	movwf	4007,c	;volsfr
 17176                           
 17177                           ;memory.c: 158: EECON2 = 0xAA;
 17178  003484  0EAA               	movlw	170
 17179  003486  6EA7               	movwf	4007,c	;volsfr
 17180                           
 17181                           ;memory.c: 159: EECON1bits.WR = 1;
 17182  003488  82A6               	bsf	4006,1,c	;volsfr
 17183                           
 17184                           ;memory.c: 160: INTCONbits.GIE = GIEBitValue;
 17185  00348A  B01C               	btfsc	FLASH_EraseBlock@GIEBitValue,0,c
 17186  00348C  D002               	bra	u7635
 17187  00348E  9EF2               	bcf	intcon,7,c	;volatile
 17188  003490  D001               	bra	u7636
 17189  003492                     u7635:
 17190  003492  8EF2               	bsf	intcon,7,c	;volatile
 17191  003494                     u7636:
 17192  003494  0012               	return		;funcret
 17193  003496                     __end_of_FLASH_EraseBlock:
 17194                           	opt stack 0
 17195                           tosu	equ	0xFFF
 17196                           tosh	equ	0xFFE
 17197                           tosl	equ	0xFFD
 17198                           pclath	equ	0xFFA
 17199                           tblptru	equ	0xFF8
 17200                           tblptrh	equ	0xFF7
 17201                           tblptrl	equ	0xFF6
 17202                           tablat	equ	0xFF5
 17203                           prodh	equ	0xFF4
 17204                           prodl	equ	0xFF3
 17205                           intcon	equ	0xFF2
 17206                           intcon2	equ	0xFF1
 17207                           postinc0	equ	0xFEE
 17208                           plusw0	equ	0xFEB
 17209                           wreg	equ	0xFE8
 17210                           indf1	equ	0xFE7
 17211                           postdec1	equ	0xFE5
 17212                           fsr1h	equ	0xFE2
 17213                           fsr1l	equ	0xFE1
 17214                           indf2	equ	0xFDF
 17215                           postinc2	equ	0xFDE
 17216                           postdec2	equ	0xFDD
 17217                           plusw2	equ	0xFDB
 17218                           fsr2h	equ	0xFDA
 17219                           fsr2l	equ	0xFD9
 17220                           status	equ	0xFD8
 17221                           
 17222 ;; *************** function _FLASH_IsWriteDone *****************
 17223 ;; Defined at:
 17224 ;;		line 189 in file "mcc_generated_files/memory.c"
 17225 ;; Parameters:    Size  Location     Type
 17226 ;;		None
 17227 ;; Auto vars:     Size  Location     Type
 17228 ;;		None
 17229 ;; Return value:  Size  Location     Type
 17230 ;;                  1    wreg      unsigned char 
 17231 ;; Registers used:
 17232 ;;		wreg
 17233 ;; Tracked objects:
 17234 ;;		On entry : 0/0
 17235 ;;		On exit  : 0/0
 17236 ;;		Unchanged: 0/0
 17237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17238 ;;      Params:         0       0       0       0       0       0       0
 17239 ;;      Locals:         0       0       0       0       0       0       0
 17240 ;;      Temps:          0       0       0       0       0       0       0
 17241 ;;      Totals:         0       0       0       0       0       0       0
 17242 ;;Total ram usage:        0 bytes
 17243 ;; Hardware stack levels used:    1
 17244 ;; Hardware stack levels required when called:    3
 17245 ;; This function calls:
 17246 ;;		Nothing
 17247 ;; This function is called by:
 17248 ;;		_FlashSampleWrite
 17249 ;;		_FlashReadUart
 17250 ;; This function uses a non-reentrant model
 17251 ;;
 17252                           
 17253                           	psect	text110
 17254  0038EC                     __ptext110:
 17255                           	opt stack 0
 17256  0038EC                     _FLASH_IsWriteDone:
 17257                           	opt stack 24
 17258                           
 17259                           ;memory.c: 191: return (EECON1bits.WR == 0);
 17260                           
 17261                           ;incstack = 0
 17262  0038EC  A2A6               	btfss	4006,1,c	;volsfr
 17263  0038EE  D001               	goto	u7481
 17264  0038F0  D002               	goto	u7480
 17265  0038F2                     u7481:
 17266  0038F2  0E01               	movlw	1
 17267  0038F4  0012               	return	
 17268  0038F6                     u7480:
 17269  0038F6  0E00               	movlw	0
 17270  0038F8  0012               	return	
 17271  0038FA                     __end_of_FLASH_IsWriteDone:
 17272                           	opt stack 0
 17273                           tosu	equ	0xFFF
 17274                           tosh	equ	0xFFE
 17275                           tosl	equ	0xFFD
 17276                           pclath	equ	0xFFA
 17277                           tblptru	equ	0xFF8
 17278                           tblptrh	equ	0xFF7
 17279                           tblptrl	equ	0xFF6
 17280                           tablat	equ	0xFF5
 17281                           prodh	equ	0xFF4
 17282                           prodl	equ	0xFF3
 17283                           intcon	equ	0xFF2
 17284                           intcon2	equ	0xFF1
 17285                           postinc0	equ	0xFEE
 17286                           plusw0	equ	0xFEB
 17287                           wreg	equ	0xFE8
 17288                           indf1	equ	0xFE7
 17289                           postdec1	equ	0xFE5
 17290                           fsr1h	equ	0xFE2
 17291                           fsr1l	equ	0xFE1
 17292                           indf2	equ	0xFDF
 17293                           postinc2	equ	0xFDE
 17294                           postdec2	equ	0xFDD
 17295                           plusw2	equ	0xFDB
 17296                           fsr2h	equ	0xFDA
 17297                           fsr2l	equ	0xFD9
 17298                           status	equ	0xFD8
 17299                           
 17300 ;; *************** function _ADC_GetConversion *****************
 17301 ;; Defined at:
 17302 ;;		line 106 in file "mcc_generated_files/adc.c"
 17303 ;; Parameters:    Size  Location     Type
 17304 ;;  channel         1    wreg     enum E6975
 17305 ;; Auto vars:     Size  Location     Type
 17306 ;;  channel         1   27[COMRAM] enum E6975
 17307 ;; Return value:  Size  Location     Type
 17308 ;;                  2   23[COMRAM] unsigned int 
 17309 ;; Registers used:
 17310 ;;		wreg, status,2, status,0
 17311 ;; Tracked objects:
 17312 ;;		On entry : 0/0
 17313 ;;		On exit  : 0/0
 17314 ;;		Unchanged: 0/0
 17315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17316 ;;      Params:         2       0       0       0       0       0       0
 17317 ;;      Locals:         1       0       0       0       0       0       0
 17318 ;;      Temps:          2       0       0       0       0       0       0
 17319 ;;      Totals:         5       0       0       0       0       0       0
 17320 ;;Total ram usage:        5 bytes
 17321 ;; Hardware stack levels used:    1
 17322 ;; Hardware stack levels required when called:    3
 17323 ;; This function calls:
 17324 ;;		Nothing
 17325 ;; This function is called by:
 17326 ;;		_AdcConvert
 17327 ;; This function uses a non-reentrant model
 17328 ;;
 17329                           
 17330                           	psect	text111
 17331  003556                     __ptext111:
 17332                           	opt stack 0
 17333  003556                     _ADC_GetConversion:
 17334                           	opt stack 26
 17335                           
 17336                           ;incstack = 0
 17337                           ;ADC_GetConversion@channel stored from wreg
 17338  003556  6E1C               	movwf	ADC_GetConversion@channel,c
 17339                           
 17340                           ;adc.c: 109: ADCON0bits.CHS = channel;
 17341  003558  C01C  F01A         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
 17342  00355C  461A               	rlncf	??_ADC_GetConversion,f,c
 17343  00355E  461A               	rlncf	??_ADC_GetConversion,f,c
 17344  003560  50C2               	movf	4034,w,c	;volatile
 17345  003562  181A               	xorwf	??_ADC_GetConversion,w,c
 17346  003564  0B83               	andlw	-125
 17347  003566  181A               	xorwf	??_ADC_GetConversion,w,c
 17348  003568  6EC2               	movwf	4034,c	;volatile
 17349                           
 17350                           ;adc.c: 112: ADCON0bits.ADON = 1;
 17351  00356A  80C2               	bsf	4034,0,c	;volatile
 17352                           
 17353                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
 17354  00356C  82C2               	bsf	4034,1,c	;volatile
 17355  00356E                     
 17356                           ;adc.c: 119: {
 17357  00356E  B2C2               	btfsc	4034,1,c	;volatile
 17358  003570  D7FE               	goto	l1067
 17359                           
 17360                           ;adc.c: 120: }
 17361                           ;adc.c: 122: return ((ADRESH << 8) + ADRESL);
 17362  003572  50C4               	movf	4036,w,c	;volatile
 17363  003574  6E1B               	movwf	(??_ADC_GetConversion+1)& (0+255),c
 17364  003576  6A1A               	clrf	??_ADC_GetConversion& (0+255),c
 17365  003578  50C3               	movf	4035,w,c	;volatile
 17366  00357A  241A               	addwf	??_ADC_GetConversion,w,c
 17367  00357C  6E18               	movwf	?_ADC_GetConversion,c
 17368  00357E  0E00               	movlw	0
 17369  003580  201B               	addwfc	??_ADC_GetConversion+1,w,c
 17370  003582  6E19               	movwf	?_ADC_GetConversion+1,c
 17371  003584  0012               	return	
 17372  003586                     __end_of_ADC_GetConversion:
 17373                           	opt stack 0
 17374                           tosu	equ	0xFFF
 17375                           tosh	equ	0xFFE
 17376                           tosl	equ	0xFFD
 17377                           pclath	equ	0xFFA
 17378                           tblptru	equ	0xFF8
 17379                           tblptrh	equ	0xFF7
 17380                           tblptrl	equ	0xFF6
 17381                           tablat	equ	0xFF5
 17382                           prodh	equ	0xFF4
 17383                           prodl	equ	0xFF3
 17384                           intcon	equ	0xFF2
 17385                           intcon2	equ	0xFF1
 17386                           postinc0	equ	0xFEE
 17387                           plusw0	equ	0xFEB
 17388                           wreg	equ	0xFE8
 17389                           indf1	equ	0xFE7
 17390                           postdec1	equ	0xFE5
 17391                           fsr1h	equ	0xFE2
 17392                           fsr1l	equ	0xFE1
 17393                           indf2	equ	0xFDF
 17394                           postinc2	equ	0xFDE
 17395                           postdec2	equ	0xFDD
 17396                           plusw2	equ	0xFDB
 17397                           fsr2h	equ	0xFDA
 17398                           fsr2l	equ	0xFD9
 17399                           status	equ	0xFD8
 17400                           
 17401 ;; *************** function _INTERRUPT_InterruptManager *****************
 17402 ;; Defined at:
 17403 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 17404 ;; Parameters:    Size  Location     Type
 17405 ;;		None
 17406 ;; Auto vars:     Size  Location     Type
 17407 ;;		None
 17408 ;; Return value:  Size  Location     Type
 17409 ;;                  1    wreg      void 
 17410 ;; Registers used:
 17411 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17412 ;; Tracked objects:
 17413 ;;		On entry : 0/0
 17414 ;;		On exit  : 0/0
 17415 ;;		Unchanged: 0/0
 17416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17417 ;;      Params:         0       0       0       0       0       0       0
 17418 ;;      Locals:         0       0       0       0       0       0       0
 17419 ;;      Temps:         18       0       0       0       0       0       0
 17420 ;;      Totals:        18       0       0       0       0       0       0
 17421 ;;Total ram usage:       18 bytes
 17422 ;; Hardware stack levels used:    1
 17423 ;; Hardware stack levels required when called:    2
 17424 ;; This function calls:
 17425 ;;		_EUSART1_Receive_ISR
 17426 ;;		_EUSART1_Transmit_ISR
 17427 ;;		_MEMORY_ISR
 17428 ;;		_PIN_MANAGER_IOC
 17429 ;;		_TMR0_ISR
 17430 ;; This function is called by:
 17431 ;;		Interrupt level 2
 17432 ;; This function uses a non-reentrant model
 17433 ;;
 17434                           
 17435                           	psect	intcode
 17436  000008                     __pintcode:
 17437                           	opt stack 0
 17438  000008                     _INTERRUPT_InterruptManager:
 17439                           	opt stack 20
 17440                           
 17441                           ;incstack = 0
 17442  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 17443  00000A  CFFA F006          	movff	pclath,??_INTERRUPT_InterruptManager
 17444  00000E  CFFB F007          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 17445  000012  CFE9 F008          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 17446  000016  CFEA F009          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 17447  00001A  CFE1 F00A          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 17448  00001E  CFE2 F00B          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 17449  000022  CFD9 F00C          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 17450  000026  CFDA F00D          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 17451  00002A  CFF3 F00E          	movff	prodl,??_INTERRUPT_InterruptManager+8
 17452  00002E  CFF4 F00F          	movff	prodh,??_INTERRUPT_InterruptManager+9
 17453  000032  CFF6 F010          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 17454  000036  CFF7 F011          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 17455  00003A  CFF8 F012          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 17456  00003E  CFF5 F013          	movff	tablat,??_INTERRUPT_InterruptManager+13
 17457  000042  C048  F014         	movff	btemp,??_INTERRUPT_InterruptManager+14
 17458  000046  C049  F015         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 17459  00004A  C04A  F016         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 17460  00004E  C04B  F017         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 17461                           
 17462                           ;interrupt_manager.c: 60: if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
 17463  000052  B6F2               	btfsc	intcon,3,c	;volatile
 17464  000054  A0F2               	btfss	intcon,0,c	;volatile
 17465  000056  D003               	goto	i2l792
 17466                           
 17467                           ;interrupt_manager.c: 61: {
 17468                           ;interrupt_manager.c: 62: PIN_MANAGER_IOC();
 17469  000058  ECB1  F01C         	call	_PIN_MANAGER_IOC	;wreg free
 17470                           
 17471                           ;interrupt_manager.c: 63: }
 17472  00005C  D019               	goto	i2l801
 17473  00005E                     i2l792:
 17474                           
 17475                           ;interrupt_manager.c: 64: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 17476  00005E  BAF2               	btfsc	intcon,5,c	;volatile
 17477  000060  A4F2               	btfss	intcon,2,c	;volatile
 17478  000062  D003               	goto	i2l794
 17479                           
 17480                           ;interrupt_manager.c: 65: {
 17481                           ;interrupt_manager.c: 66: TMR0_ISR();
 17482  000064  EC2D  F013         	call	_TMR0_ISR	;wreg free
 17483                           
 17484                           ;interrupt_manager.c: 67: }
 17485  000068  D013               	goto	i2l801
 17486  00006A                     i2l794:
 17487                           
 17488                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1)
 17489  00006A  ACF2               	btfss	intcon,6,c	;volatile
 17490  00006C  D011               	goto	i2l801
 17491                           
 17492                           ;interrupt_manager.c: 69: {
 17493                           ;interrupt_manager.c: 70: if(PIE2bits.EEIE == 1 && PIR2bits.EEIF == 1)
 17494  00006E  B8A0               	btfsc	4000,4,c	;volatile
 17495  000070  A8A1               	btfss	4001,4,c	;volatile
 17496  000072  D003               	goto	i2l797
 17497                           
 17498                           ;interrupt_manager.c: 71: {
 17499                           ;interrupt_manager.c: 72: MEMORY_ISR();
 17500  000074  ECB3  F01C         	call	_MEMORY_ISR	;wreg free
 17501                           
 17502                           ;interrupt_manager.c: 73: }
 17503  000078  D00B               	goto	i2l801
 17504  00007A                     i2l797:
 17505                           
 17506                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 17507  00007A  B89D               	btfsc	3997,4,c	;volatile
 17508  00007C  A89E               	btfss	3998,4,c	;volatile
 17509  00007E  D003               	goto	i2l799
 17510                           
 17511                           ;interrupt_manager.c: 75: {
 17512                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
 17513  000080  ECAA  F019         	call	_EUSART1_Transmit_ISR	;wreg free
 17514                           
 17515                           ;interrupt_manager.c: 77: }
 17516  000084  D005               	goto	i2l801
 17517  000086                     i2l799:
 17518                           
 17519                           ;interrupt_manager.c: 78: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 17520  000086  BA9D               	btfsc	3997,5,c	;volatile
 17521  000088  AA9E               	btfss	3998,5,c	;volatile
 17522  00008A  D002               	goto	i2l801
 17523                           
 17524                           ;interrupt_manager.c: 79: {
 17525                           ;interrupt_manager.c: 80: EUSART1_Receive_ISR();
 17526  00008C  ECC3  F01A         	call	_EUSART1_Receive_ISR	;wreg free
 17527  000090                     i2l801:
 17528                           
 17529                           ;interrupt_manager.c: 87: else
 17530                           ;interrupt_manager.c: 88: {
 17531                           
 17532                           ;interrupt_manager.c: 85: }
 17533                           ;interrupt_manager.c: 86: }
 17534                           
 17535                           ;interrupt_manager.c: 82: else
 17536                           ;interrupt_manager.c: 83: {
 17537  000090  C017  F04B         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 17538  000094  C016  F04A         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 17539  000098  C015  F049         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 17540  00009C  C014  F048         	movff	??_INTERRUPT_InterruptManager+14,btemp
 17541  0000A0  C013  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 17542  0000A4  C012  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 17543  0000A8  C011  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 17544  0000AC  C010  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 17545  0000B0  C00F  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 17546  0000B4  C00E  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 17547  0000B8  C00D  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 17548  0000BC  C00C  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 17549  0000C0  C00B  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 17550  0000C4  C00A  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 17551  0000C8  C009  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 17552  0000CC  C008  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 17553  0000D0  C007  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 17554  0000D4  C006  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 17555  0000D8  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 17556  0000DA  0011               	retfie		f
 17557  0000DC                     __end_of_INTERRUPT_InterruptManager:
 17558                           	opt stack 0
 17559                           tosu	equ	0xFFF
 17560                           tosh	equ	0xFFE
 17561                           tosl	equ	0xFFD
 17562                           pclatu	equ	0xFFB
 17563                           pclath	equ	0xFFA
 17564                           tblptru	equ	0xFF8
 17565                           tblptrh	equ	0xFF7
 17566                           tblptrl	equ	0xFF6
 17567                           tablat	equ	0xFF5
 17568                           prodh	equ	0xFF4
 17569                           prodl	equ	0xFF3
 17570                           intcon	equ	0xFF2
 17571                           intcon2	equ	0xFF1
 17572                           postinc0	equ	0xFEE
 17573                           plusw0	equ	0xFEB
 17574                           fsr0h	equ	0xFEA
 17575                           fsr0l	equ	0xFE9
 17576                           wreg	equ	0xFE8
 17577                           indf1	equ	0xFE7
 17578                           postdec1	equ	0xFE5
 17579                           fsr1h	equ	0xFE2
 17580                           fsr1l	equ	0xFE1
 17581                           indf2	equ	0xFDF
 17582                           postinc2	equ	0xFDE
 17583                           postdec2	equ	0xFDD
 17584                           plusw2	equ	0xFDB
 17585                           fsr2h	equ	0xFDA
 17586                           fsr2l	equ	0xFD9
 17587                           status	equ	0xFD8
 17588                           
 17589 ;; *************** function _TMR0_ISR *****************
 17590 ;; Defined at:
 17591 ;;		line 132 in file "mcc_generated_files/tmr0.c"
 17592 ;; Parameters:    Size  Location     Type
 17593 ;;		None
 17594 ;; Auto vars:     Size  Location     Type
 17595 ;;		None
 17596 ;; Return value:  Size  Location     Type
 17597 ;;                  1    wreg      void 
 17598 ;; Registers used:
 17599 ;;		wreg, status,2, status,0, cstack
 17600 ;; Tracked objects:
 17601 ;;		On entry : 0/0
 17602 ;;		On exit  : 0/0
 17603 ;;		Unchanged: 0/0
 17604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17605 ;;      Params:         0       0       0       0       0       0       0
 17606 ;;      Locals:         0       0       0       0       0       0       0
 17607 ;;      Temps:          0       0       0       0       0       0       0
 17608 ;;      Totals:         0       0       0       0       0       0       0
 17609 ;;Total ram usage:        0 bytes
 17610 ;; Hardware stack levels used:    1
 17611 ;; Hardware stack levels required when called:    1
 17612 ;; This function calls:
 17613 ;;		___lwmod
 17614 ;; This function is called by:
 17615 ;;		_INTERRUPT_InterruptManager
 17616 ;; This function uses a non-reentrant model
 17617 ;;
 17618                           
 17619                           	psect	text113
 17620  00265A                     __ptext113:
 17621                           	opt stack 0
 17622  00265A                     _TMR0_ISR:
 17623                           	opt stack 20
 17624                           
 17625                           ;tmr0.c: 134: static volatile uint16_t CountCallBack = 0;
 17626                           ;tmr0.c: 137: INTCONbits.TMR0IF = 0;
 17627                           
 17628                           ;incstack = 0
 17629  00265A  94F2               	bcf	intcon,2,c	;volatile
 17630                           
 17631                           ;tmr0.c: 141: TMR0H = timer0ReloadVal >> 8;
 17632  00265C  5047               	movf	_timer0ReloadVal+1,w,c	;volatile
 17633  00265E  6ED7               	movwf	4055,c	;volatile
 17634                           
 17635                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal;
 17636  002660  C046  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 17637                           
 17638                           ;tmr0.c: 146: CountCallBack ++;
 17639  002664  4A34               	infsnz	TMR0_ISR@CountCallBack,f,c	;volatile
 17640  002666  2A35               	incf	TMR0_ISR@CountCallBack+1,f,c	;volatile
 17641                           
 17642                           ;tmr0.c: 147: if ((CountCallBack % 20) == 0)
 17643  002668  C034  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 17644  00266C  C035  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 17645  002670  0E00               	movlw	0
 17646  002672  6E04               	movwf	___lwmod@divisor+1,c
 17647  002674  0E14               	movlw	20
 17648  002676  6E03               	movwf	___lwmod@divisor,c
 17649  002678  ECF7  F018         	call	___lwmod	;wreg free
 17650  00267C  5001               	movf	?___lwmod,w,c
 17651  00267E  1002               	iorwf	?___lwmod+1,w,c
 17652  002680  A4D8               	btfss	status,2,c
 17653  002682  D003               	goto	i2l1023
 17654                           
 17655                           ;tmr0.c: 148: {
 17656                           ;tmr0.c: 149: TimerOneSecFlag = 1;
 17657  002684  0E01               	movlw	1
 17658  002686  0100               	movlb	0	; () banked
 17659  002688  6FD8               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
 17660  00268A                     i2l1023:
 17661                           
 17662                           ;tmr0.c: 150: }
 17663                           ;tmr0.c: 152: if ((CountCallBack % 50) == 0)
 17664                           
 17665                           ; BSR set to: 0
 17666  00268A  C034  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 17667  00268E  C035  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 17668  002692  0E00               	movlw	0
 17669  002694  6E04               	movwf	___lwmod@divisor+1,c
 17670  002696  0E32               	movlw	50
 17671  002698  6E03               	movwf	___lwmod@divisor,c
 17672  00269A  ECF7  F018         	call	___lwmod	;wreg free
 17673  00269E  5001               	movf	?___lwmod,w,c
 17674  0026A0  1002               	iorwf	?___lwmod+1,w,c
 17675  0026A2  A4D8               	btfss	status,2,c
 17676  0026A4  D003               	goto	i2l1024
 17677                           
 17678                           ;tmr0.c: 153: {
 17679                           ;tmr0.c: 154: TimerSamplingFlag = 1;
 17680  0026A6  0E01               	movlw	1
 17681  0026A8  0100               	movlb	0	; () banked
 17682  0026AA  6FD7               	movwf	_TimerSamplingFlag& (0+255),b	;volatile
 17683  0026AC                     i2l1024:
 17684                           
 17685                           ;tmr0.c: 155: }
 17686                           ;tmr0.c: 156: if ((CountCallBack % 300) == 0)
 17687                           
 17688                           ; BSR set to: 0
 17689  0026AC  C034  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 17690  0026B0  C035  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 17691  0026B4  0E01               	movlw	1
 17692  0026B6  6E04               	movwf	___lwmod@divisor+1,c
 17693  0026B8  0E2C               	movlw	44
 17694  0026BA  6E03               	movwf	___lwmod@divisor,c
 17695  0026BC  ECF7  F018         	call	___lwmod	;wreg free
 17696  0026C0  5001               	movf	?___lwmod,w,c
 17697  0026C2  1002               	iorwf	?___lwmod+1,w,c
 17698  0026C4  A4D8               	btfss	status,2,c
 17699  0026C6  D003               	goto	i2l1025
 17700                           
 17701                           ;tmr0.c: 157: {
 17702                           ;tmr0.c: 158: TimerKeepAliveFlag = 1;
 17703  0026C8  0E01               	movlw	1
 17704  0026CA  0100               	movlb	0	; () banked
 17705  0026CC  6FD6               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
 17706  0026CE                     i2l1025:
 17707                           
 17708                           ;tmr0.c: 159: }
 17709                           ;tmr0.c: 161: CountCallBack %= 300;
 17710                           
 17711                           ; BSR set to: 0
 17712  0026CE  C034  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 17713  0026D2  C035  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 17714  0026D6  0E01               	movlw	1
 17715  0026D8  6E04               	movwf	___lwmod@divisor+1,c
 17716  0026DA  0E2C               	movlw	44
 17717  0026DC  6E03               	movwf	___lwmod@divisor,c
 17718  0026DE  ECF7  F018         	call	___lwmod	;wreg free
 17719  0026E2  C001  F034         	movff	?___lwmod,TMR0_ISR@CountCallBack	;volatile
 17720  0026E6  C002  F035         	movff	?___lwmod+1,TMR0_ISR@CountCallBack+1	;volatile
 17721  0026EA  0012               	return		;funcret
 17722  0026EC                     __end_of_TMR0_ISR:
 17723                           	opt stack 0
 17724                           tosu	equ	0xFFF
 17725                           tosh	equ	0xFFE
 17726                           tosl	equ	0xFFD
 17727                           pclatu	equ	0xFFB
 17728                           pclath	equ	0xFFA
 17729                           tblptru	equ	0xFF8
 17730                           tblptrh	equ	0xFF7
 17731                           tblptrl	equ	0xFF6
 17732                           tablat	equ	0xFF5
 17733                           prodh	equ	0xFF4
 17734                           prodl	equ	0xFF3
 17735                           intcon	equ	0xFF2
 17736                           intcon2	equ	0xFF1
 17737                           postinc0	equ	0xFEE
 17738                           plusw0	equ	0xFEB
 17739                           fsr0h	equ	0xFEA
 17740                           fsr0l	equ	0xFE9
 17741                           wreg	equ	0xFE8
 17742                           indf1	equ	0xFE7
 17743                           postdec1	equ	0xFE5
 17744                           fsr1h	equ	0xFE2
 17745                           fsr1l	equ	0xFE1
 17746                           indf2	equ	0xFDF
 17747                           postinc2	equ	0xFDE
 17748                           postdec2	equ	0xFDD
 17749                           plusw2	equ	0xFDB
 17750                           fsr2h	equ	0xFDA
 17751                           fsr2l	equ	0xFD9
 17752                           status	equ	0xFD8
 17753                           
 17754 ;; *************** function ___lwmod *****************
 17755 ;; Defined at:
 17756 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 17757 ;; Parameters:    Size  Location     Type
 17758 ;;  dividend        2    0[COMRAM] unsigned int 
 17759 ;;  divisor         2    2[COMRAM] unsigned int 
 17760 ;; Auto vars:     Size  Location     Type
 17761 ;;  counter         1    4[COMRAM] unsigned char 
 17762 ;; Return value:  Size  Location     Type
 17763 ;;                  2    0[COMRAM] unsigned int 
 17764 ;; Registers used:
 17765 ;;		wreg, status,2, status,0
 17766 ;; Tracked objects:
 17767 ;;		On entry : 0/0
 17768 ;;		On exit  : 0/0
 17769 ;;		Unchanged: 0/0
 17770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17771 ;;      Params:         4       0       0       0       0       0       0
 17772 ;;      Locals:         1       0       0       0       0       0       0
 17773 ;;      Temps:          0       0       0       0       0       0       0
 17774 ;;      Totals:         5       0       0       0       0       0       0
 17775 ;;Total ram usage:        5 bytes
 17776 ;; Hardware stack levels used:    1
 17777 ;; This function calls:
 17778 ;;		Nothing
 17779 ;; This function is called by:
 17780 ;;		_TMR0_ISR
 17781 ;; This function uses a non-reentrant model
 17782 ;;
 17783                           
 17784                           	psect	text114
 17785  0031EE                     __ptext114:
 17786                           	opt stack 0
 17787  0031EE                     ___lwmod:
 17788                           	opt stack 20
 17789                           
 17790                           ;incstack = 0
 17791  0031EE  5003               	movf	___lwmod@divisor,w,c
 17792  0031F0  1004               	iorwf	___lwmod@divisor+1,w,c
 17793  0031F2  B4D8               	btfsc	status,2,c
 17794  0031F4  D018               	goto	i2l1884
 17795  0031F6  0E01               	movlw	1
 17796  0031F8  6E05               	movwf	___lwmod@counter,c
 17797  0031FA  D004               	goto	i2l1879
 17798  0031FC  90D8               	bcf	status,0,c
 17799  0031FE  3603               	rlcf	___lwmod@divisor,f,c
 17800  003200  3604               	rlcf	___lwmod@divisor+1,f,c
 17801  003202  2A05               	incf	___lwmod@counter,f,c
 17802  003204                     i2l1879:
 17803  003204  AE04               	btfss	___lwmod@divisor+1,7,c
 17804  003206  D7FA               	goto	i2l1880
 17805  003208                     i2u532_40:
 17806  003208  5003               	movf	___lwmod@divisor,w,c
 17807  00320A  5C01               	subwf	___lwmod@dividend,w,c
 17808  00320C  5004               	movf	___lwmod@divisor+1,w,c
 17809  00320E  5802               	subwfb	___lwmod@dividend+1,w,c
 17810  003210  A0D8               	btfss	status,0,c
 17811  003212  D004               	goto	i2l1883
 17812  003214  5003               	movf	___lwmod@divisor,w,c
 17813  003216  5E01               	subwf	___lwmod@dividend,f,c
 17814  003218  5004               	movf	___lwmod@divisor+1,w,c
 17815  00321A  5A02               	subwfb	___lwmod@dividend+1,f,c
 17816  00321C                     i2l1883:
 17817  00321C  90D8               	bcf	status,0,c
 17818  00321E  3204               	rrcf	___lwmod@divisor+1,f,c
 17819  003220  3203               	rrcf	___lwmod@divisor,f,c
 17820  003222  2E05               	decfsz	___lwmod@counter,f,c
 17821  003224  D7F1               	goto	i2u532_40
 17822  003226                     i2l1884:
 17823  003226  C001  F001         	movff	___lwmod@dividend,?___lwmod
 17824  00322A  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
 17825  00322E  0012               	return		;funcret
 17826  003230                     __end_of___lwmod:
 17827                           	opt stack 0
 17828                           tosu	equ	0xFFF
 17829                           tosh	equ	0xFFE
 17830                           tosl	equ	0xFFD
 17831                           pclatu	equ	0xFFB
 17832                           pclath	equ	0xFFA
 17833                           tblptru	equ	0xFF8
 17834                           tblptrh	equ	0xFF7
 17835                           tblptrl	equ	0xFF6
 17836                           tablat	equ	0xFF5
 17837                           prodh	equ	0xFF4
 17838                           prodl	equ	0xFF3
 17839                           intcon	equ	0xFF2
 17840                           intcon2	equ	0xFF1
 17841                           postinc0	equ	0xFEE
 17842                           plusw0	equ	0xFEB
 17843                           fsr0h	equ	0xFEA
 17844                           fsr0l	equ	0xFE9
 17845                           wreg	equ	0xFE8
 17846                           indf1	equ	0xFE7
 17847                           postdec1	equ	0xFE5
 17848                           fsr1h	equ	0xFE2
 17849                           fsr1l	equ	0xFE1
 17850                           indf2	equ	0xFDF
 17851                           postinc2	equ	0xFDE
 17852                           postdec2	equ	0xFDD
 17853                           plusw2	equ	0xFDB
 17854                           fsr2h	equ	0xFDA
 17855                           fsr2l	equ	0xFD9
 17856                           status	equ	0xFD8
 17857                           
 17858 ;; *************** function _PIN_MANAGER_IOC *****************
 17859 ;; Defined at:
 17860 ;;		line 96 in file "mcc_generated_files/pin_manager.c"
 17861 ;; Parameters:    Size  Location     Type
 17862 ;;		None
 17863 ;; Auto vars:     Size  Location     Type
 17864 ;;		None
 17865 ;; Return value:  Size  Location     Type
 17866 ;;                  1    wreg      void 
 17867 ;; Registers used:
 17868 ;;		None
 17869 ;; Tracked objects:
 17870 ;;		On entry : 0/0
 17871 ;;		On exit  : 0/0
 17872 ;;		Unchanged: 0/0
 17873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17874 ;;      Params:         0       0       0       0       0       0       0
 17875 ;;      Locals:         0       0       0       0       0       0       0
 17876 ;;      Temps:          0       0       0       0       0       0       0
 17877 ;;      Totals:         0       0       0       0       0       0       0
 17878 ;;Total ram usage:        0 bytes
 17879 ;; Hardware stack levels used:    1
 17880 ;; This function calls:
 17881 ;;		Nothing
 17882 ;; This function is called by:
 17883 ;;		_INTERRUPT_InterruptManager
 17884 ;; This function uses a non-reentrant model
 17885 ;;
 17886                           
 17887                           	psect	text115
 17888  003962                     __ptext115:
 17889                           	opt stack 0
 17890  003962                     _PIN_MANAGER_IOC:
 17891                           	opt stack 21
 17892                           
 17893                           ;pin_manager.c: 100: INTCONbits.RBIF = 0;
 17894                           
 17895                           ;incstack = 0
 17896  003962  90F2               	bcf	intcon,0,c	;volatile
 17897  003964  0012               	return		;funcret
 17898  003966                     __end_of_PIN_MANAGER_IOC:
 17899                           	opt stack 0
 17900                           tosu	equ	0xFFF
 17901                           tosh	equ	0xFFE
 17902                           tosl	equ	0xFFD
 17903                           pclatu	equ	0xFFB
 17904                           pclath	equ	0xFFA
 17905                           tblptru	equ	0xFF8
 17906                           tblptrh	equ	0xFF7
 17907                           tblptrl	equ	0xFF6
 17908                           tablat	equ	0xFF5
 17909                           prodh	equ	0xFF4
 17910                           prodl	equ	0xFF3
 17911                           intcon	equ	0xFF2
 17912                           intcon2	equ	0xFF1
 17913                           postinc0	equ	0xFEE
 17914                           plusw0	equ	0xFEB
 17915                           fsr0h	equ	0xFEA
 17916                           fsr0l	equ	0xFE9
 17917                           wreg	equ	0xFE8
 17918                           indf1	equ	0xFE7
 17919                           postdec1	equ	0xFE5
 17920                           fsr1h	equ	0xFE2
 17921                           fsr1l	equ	0xFE1
 17922                           indf2	equ	0xFDF
 17923                           postinc2	equ	0xFDE
 17924                           postdec2	equ	0xFDD
 17925                           plusw2	equ	0xFDB
 17926                           fsr2h	equ	0xFDA
 17927                           fsr2l	equ	0xFD9
 17928                           status	equ	0xFD8
 17929                           
 17930 ;; *************** function _MEMORY_ISR *****************
 17931 ;; Defined at:
 17932 ;;		line 206 in file "mcc_generated_files/memory.c"
 17933 ;; Parameters:    Size  Location     Type
 17934 ;;		None
 17935 ;; Auto vars:     Size  Location     Type
 17936 ;;		None
 17937 ;; Return value:  Size  Location     Type
 17938 ;;                  1    wreg      void 
 17939 ;; Registers used:
 17940 ;;		None
 17941 ;; Tracked objects:
 17942 ;;		On entry : 0/0
 17943 ;;		On exit  : 0/0
 17944 ;;		Unchanged: 0/0
 17945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17946 ;;      Params:         0       0       0       0       0       0       0
 17947 ;;      Locals:         0       0       0       0       0       0       0
 17948 ;;      Temps:          0       0       0       0       0       0       0
 17949 ;;      Totals:         0       0       0       0       0       0       0
 17950 ;;Total ram usage:        0 bytes
 17951 ;; Hardware stack levels used:    1
 17952 ;; This function calls:
 17953 ;;		Nothing
 17954 ;; This function is called by:
 17955 ;;		_INTERRUPT_InterruptManager
 17956 ;; This function uses a non-reentrant model
 17957 ;;
 17958                           
 17959                           	psect	text116
 17960  003966                     __ptext116:
 17961                           	opt stack 0
 17962  003966                     _MEMORY_ISR:
 17963                           	opt stack 21
 17964                           
 17965                           ;memory.c: 209: PIR2bits.EEIF = 0;
 17966                           
 17967                           ;incstack = 0
 17968  003966  98A1               	bcf	4001,4,c	;volatile
 17969  003968  0012               	return		;funcret
 17970  00396A                     __end_of_MEMORY_ISR:
 17971                           	opt stack 0
 17972                           tosu	equ	0xFFF
 17973                           tosh	equ	0xFFE
 17974                           tosl	equ	0xFFD
 17975                           pclatu	equ	0xFFB
 17976                           pclath	equ	0xFFA
 17977                           tblptru	equ	0xFF8
 17978                           tblptrh	equ	0xFF7
 17979                           tblptrl	equ	0xFF6
 17980                           tablat	equ	0xFF5
 17981                           prodh	equ	0xFF4
 17982                           prodl	equ	0xFF3
 17983                           intcon	equ	0xFF2
 17984                           intcon2	equ	0xFF1
 17985                           postinc0	equ	0xFEE
 17986                           plusw0	equ	0xFEB
 17987                           fsr0h	equ	0xFEA
 17988                           fsr0l	equ	0xFE9
 17989                           wreg	equ	0xFE8
 17990                           indf1	equ	0xFE7
 17991                           postdec1	equ	0xFE5
 17992                           fsr1h	equ	0xFE2
 17993                           fsr1l	equ	0xFE1
 17994                           indf2	equ	0xFDF
 17995                           postinc2	equ	0xFDE
 17996                           postdec2	equ	0xFDD
 17997                           plusw2	equ	0xFDB
 17998                           fsr2h	equ	0xFDA
 17999                           fsr2l	equ	0xFD9
 18000                           status	equ	0xFD8
 18001                           
 18002 ;; *************** function _EUSART1_Transmit_ISR *****************
 18003 ;; Defined at:
 18004 ;;		line 181 in file "mcc_generated_files/eusart1.c"
 18005 ;; Parameters:    Size  Location     Type
 18006 ;;		None
 18007 ;; Auto vars:     Size  Location     Type
 18008 ;;		None
 18009 ;; Return value:  Size  Location     Type
 18010 ;;                  1    wreg      void 
 18011 ;; Registers used:
 18012 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 18013 ;; Tracked objects:
 18014 ;;		On entry : 0/0
 18015 ;;		On exit  : 0/0
 18016 ;;		Unchanged: 0/0
 18017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18018 ;;      Params:         0       0       0       0       0       0       0
 18019 ;;      Locals:         0       0       0       0       0       0       0
 18020 ;;      Temps:          0       0       0       0       0       0       0
 18021 ;;      Totals:         0       0       0       0       0       0       0
 18022 ;;Total ram usage:        0 bytes
 18023 ;; Hardware stack levels used:    1
 18024 ;; This function calls:
 18025 ;;		Nothing
 18026 ;; This function is called by:
 18027 ;;		_INTERRUPT_InterruptManager
 18028 ;; This function uses a non-reentrant model
 18029 ;;
 18030                           
 18031                           	psect	text117
 18032  003354                     __ptext117:
 18033                           	opt stack 0
 18034  003354                     _EUSART1_Transmit_ISR:
 18035                           	opt stack 21
 18036                           
 18037                           ;eusart1.c: 185: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 18038                           
 18039                           ;incstack = 0
 18040  003354  0E46               	movlw	70
 18041  003356  0100               	movlb	0	; () banked
 18042  003358  61FF               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 18043  00335A  D012               	goto	i2l863
 18044                           
 18045                           ; BSR set to: 0
 18046                           ;eusart1.c: 186: {
 18047                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 18048  00335C  5038               	movf	_eusart1TxTail,w,c	;volatile
 18049  00335E  0D01               	mullw	1
 18050  003360  0E00               	movlw	low _eusart1TxBuffer
 18051  003362  24F3               	addwf	prodl,w,c
 18052  003364  6ED9               	movwf	fsr2l,c
 18053  003366  0E01               	movlw	high _eusart1TxBuffer
 18054  003368  20F4               	addwfc	prodh,w,c
 18055  00336A  6EDA               	movwf	fsr2h,c
 18056  00336C  50DF               	movf	indf2,w,c
 18057  00336E  6EAD               	movwf	4013,c	;volatile
 18058                           
 18059                           ; BSR set to: 0
 18060  003370  2A38               	incf	_eusart1TxTail,f,c	;volatile
 18061                           
 18062                           ; BSR set to: 0
 18063                           ;eusart1.c: 188: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 18064  003372  0E45               	movlw	69
 18065  003374  6438               	cpfsgt	_eusart1TxTail,c	;volatile
 18066  003376  D002               	goto	i2l864
 18067                           
 18068                           ; BSR set to: 0
 18069                           ;eusart1.c: 189: {
 18070                           ;eusart1.c: 190: eusart1TxTail = 0;
 18071  003378  0E00               	movlw	0
 18072  00337A  6E38               	movwf	_eusart1TxTail,c	;volatile
 18073  00337C                     i2l864:
 18074                           
 18075                           ; BSR set to: 0
 18076                           ;eusart1.c: 191: }
 18077                           ;eusart1.c: 192: eusart1TxBufferRemaining++;
 18078                           
 18079                           ; BSR set to: 0
 18080  00337C  2BFF               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 18081                           
 18082                           ;eusart1.c: 193: }
 18083  00337E  0012               	return	
 18084  003380                     i2l863:
 18085                           
 18086                           ; BSR set to: 0
 18087                           ;eusart1.c: 194: else
 18088                           ;eusart1.c: 195: {
 18089                           ;eusart1.c: 196: PIE1bits.TX1IE = 0;
 18090  003380  989D               	bcf	3997,4,c	;volatile
 18091                           
 18092                           ; BSR set to: 0
 18093                           ;eusart1.c: 197: eusart1TxTail = 0;
 18094  003382  0E00               	movlw	0
 18095  003384  6E38               	movwf	_eusart1TxTail,c	;volatile
 18096                           
 18097                           ;eusart1.c: 198: eusart1TxHead = 0;
 18098  003386  0E00               	movlw	0
 18099  003388  6E39               	movwf	_eusart1TxHead,c	;volatile
 18100  00338A  0012               	return	
 18101  00338C                     __end_of_EUSART1_Transmit_ISR:
 18102                           	opt stack 0
 18103                           tosu	equ	0xFFF
 18104                           tosh	equ	0xFFE
 18105                           tosl	equ	0xFFD
 18106                           pclatu	equ	0xFFB
 18107                           pclath	equ	0xFFA
 18108                           tblptru	equ	0xFF8
 18109                           tblptrh	equ	0xFF7
 18110                           tblptrl	equ	0xFF6
 18111                           tablat	equ	0xFF5
 18112                           prodh	equ	0xFF4
 18113                           prodl	equ	0xFF3
 18114                           intcon	equ	0xFF2
 18115                           intcon2	equ	0xFF1
 18116                           postinc0	equ	0xFEE
 18117                           plusw0	equ	0xFEB
 18118                           fsr0h	equ	0xFEA
 18119                           fsr0l	equ	0xFE9
 18120                           wreg	equ	0xFE8
 18121                           indf1	equ	0xFE7
 18122                           postdec1	equ	0xFE5
 18123                           fsr1h	equ	0xFE2
 18124                           fsr1l	equ	0xFE1
 18125                           indf2	equ	0xFDF
 18126                           postinc2	equ	0xFDE
 18127                           postdec2	equ	0xFDD
 18128                           plusw2	equ	0xFDB
 18129                           fsr2h	equ	0xFDA
 18130                           fsr2l	equ	0xFD9
 18131                           status	equ	0xFD8
 18132                           
 18133 ;; *************** function _EUSART1_Receive_ISR *****************
 18134 ;; Defined at:
 18135 ;;		line 202 in file "mcc_generated_files/eusart1.c"
 18136 ;; Parameters:    Size  Location     Type
 18137 ;;		None
 18138 ;; Auto vars:     Size  Location     Type
 18139 ;;		None
 18140 ;; Return value:  Size  Location     Type
 18141 ;;                  1    wreg      void 
 18142 ;; Registers used:
 18143 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 18144 ;; Tracked objects:
 18145 ;;		On entry : 0/0
 18146 ;;		On exit  : 0/0
 18147 ;;		Unchanged: 0/0
 18148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18149 ;;      Params:         0       0       0       0       0       0       0
 18150 ;;      Locals:         0       0       0       0       0       0       0
 18151 ;;      Temps:          0       0       0       0       0       0       0
 18152 ;;      Totals:         0       0       0       0       0       0       0
 18153 ;;Total ram usage:        0 bytes
 18154 ;; Hardware stack levels used:    1
 18155 ;; This function calls:
 18156 ;;		Nothing
 18157 ;; This function is called by:
 18158 ;;		_INTERRUPT_InterruptManager
 18159 ;; This function uses a non-reentrant model
 18160 ;;
 18161                           
 18162                           	psect	text118
 18163  003586                     __ptext118:
 18164                           	opt stack 0
 18165  003586                     _EUSART1_Receive_ISR:
 18166                           	opt stack 21
 18167                           
 18168                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
 18169                           
 18170                           ; BSR set to: 0
 18171                           ;incstack = 0
 18172  003586  A2AB               	btfss	4011,1,c	;volatile
 18173  003588  D002               	goto	i2l869
 18174                           
 18175                           ;eusart1.c: 206: {
 18176                           ;eusart1.c: 208: RCSTA1bits.CREN = 0;
 18177  00358A  98AB               	bcf	4011,4,c	;volatile
 18178                           
 18179                           ;eusart1.c: 209: RCSTA1bits.CREN = 1;
 18180  00358C  88AB               	bsf	4011,4,c	;volatile
 18181  00358E                     i2l869:
 18182                           
 18183                           ;eusart1.c: 210: }
 18184                           ;eusart1.c: 215: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 18185  00358E  5037               	movf	_eusart1RxHead,w,c	;volatile
 18186  003590  0D01               	mullw	1
 18187  003592  0E46               	movlw	low _eusart1RxBuffer
 18188  003594  24F3               	addwf	prodl,w,c
 18189  003596  6ED9               	movwf	fsr2l,c
 18190  003598  0E01               	movlw	high _eusart1RxBuffer
 18191  00359A  20F4               	addwfc	prodh,w,c
 18192  00359C  6EDA               	movwf	fsr2h,c
 18193  00359E  CFAE FFDF          	movff	4014,indf2	;volatile
 18194  0035A2  2A37               	incf	_eusart1RxHead,f,c	;volatile
 18195                           
 18196                           ;eusart1.c: 216: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 18197  0035A4  0E27               	movlw	39
 18198  0035A6  6437               	cpfsgt	_eusart1RxHead,c	;volatile
 18199  0035A8  D002               	goto	i2l870
 18200                           
 18201                           ;eusart1.c: 217: {
 18202                           ;eusart1.c: 218: eusart1RxHead = 0;
 18203  0035AA  0E00               	movlw	0
 18204  0035AC  6E37               	movwf	_eusart1RxHead,c	;volatile
 18205  0035AE                     i2l870:
 18206                           
 18207                           ;eusart1.c: 219: }
 18208                           ;eusart1.c: 220: eusart1RxCount++;
 18209  0035AE  0100               	movlb	0	; () banked
 18210  0035B0  2BD3               	incf	_eusart1RxCount& (0+255),f,b	;volatile
 18211                           
 18212                           ; BSR set to: 0
 18213  0035B2  0012               	return		;funcret
 18214  0035B4                     __end_of_EUSART1_Receive_ISR:
 18215                           	opt stack 0
 18216                           tosu	equ	0xFFF
 18217                           tosh	equ	0xFFE
 18218                           tosl	equ	0xFFD
 18219                           pclatu	equ	0xFFB
 18220                           pclath	equ	0xFFA
 18221                           tblptru	equ	0xFF8
 18222                           tblptrh	equ	0xFF7
 18223                           tblptrl	equ	0xFF6
 18224                           tablat	equ	0xFF5
 18225                           prodh	equ	0xFF4
 18226                           prodl	equ	0xFF3
 18227                           intcon	equ	0xFF2
 18228                           intcon2	equ	0xFF1
 18229                           postinc0	equ	0xFEE
 18230                           plusw0	equ	0xFEB
 18231                           fsr0h	equ	0xFEA
 18232                           fsr0l	equ	0xFE9
 18233                           wreg	equ	0xFE8
 18234                           indf1	equ	0xFE7
 18235                           postdec1	equ	0xFE5
 18236                           fsr1h	equ	0xFE2
 18237                           fsr1l	equ	0xFE1
 18238                           indf2	equ	0xFDF
 18239                           postinc2	equ	0xFDE
 18240                           postdec2	equ	0xFDD
 18241                           plusw2	equ	0xFDB
 18242                           fsr2h	equ	0xFDA
 18243                           fsr2l	equ	0xFD9
 18244                           status	equ	0xFD8
 18245                           tosu	equ	0xFFF
 18246                           tosh	equ	0xFFE
 18247                           tosl	equ	0xFFD
 18248                           pclatu	equ	0xFFB
 18249                           pclath	equ	0xFFA
 18250                           tblptru	equ	0xFF8
 18251                           tblptrh	equ	0xFF7
 18252                           tblptrl	equ	0xFF6
 18253                           tablat	equ	0xFF5
 18254                           prodh	equ	0xFF4
 18255                           prodl	equ	0xFF3
 18256                           intcon	equ	0xFF2
 18257                           intcon2	equ	0xFF1
 18258                           postinc0	equ	0xFEE
 18259                           plusw0	equ	0xFEB
 18260                           fsr0h	equ	0xFEA
 18261                           fsr0l	equ	0xFE9
 18262                           wreg	equ	0xFE8
 18263                           indf1	equ	0xFE7
 18264                           postdec1	equ	0xFE5
 18265                           fsr1h	equ	0xFE2
 18266                           fsr1l	equ	0xFE1
 18267                           indf2	equ	0xFDF
 18268                           postinc2	equ	0xFDE
 18269                           postdec2	equ	0xFDD
 18270                           plusw2	equ	0xFDB
 18271                           fsr2h	equ	0xFDA
 18272                           fsr2l	equ	0xFD9
 18273                           status	equ	0xFD8
 18274                           
 18275                           	psect	text119
 18276  000000                     __ptext119:
 18277                           	opt stack 0
 18278                           tosu	equ	0xFFF
 18279                           tosh	equ	0xFFE
 18280                           tosl	equ	0xFFD
 18281                           pclatu	equ	0xFFB
 18282                           pclath	equ	0xFFA
 18283                           tblptru	equ	0xFF8
 18284                           tblptrh	equ	0xFF7
 18285                           tblptrl	equ	0xFF6
 18286                           tablat	equ	0xFF5
 18287                           prodh	equ	0xFF4
 18288                           prodl	equ	0xFF3
 18289                           intcon	equ	0xFF2
 18290                           intcon2	equ	0xFF1
 18291                           postinc0	equ	0xFEE
 18292                           plusw0	equ	0xFEB
 18293                           fsr0h	equ	0xFEA
 18294                           fsr0l	equ	0xFE9
 18295                           wreg	equ	0xFE8
 18296                           indf1	equ	0xFE7
 18297                           postdec1	equ	0xFE5
 18298                           fsr1h	equ	0xFE2
 18299                           fsr1l	equ	0xFE1
 18300                           indf2	equ	0xFDF
 18301                           postinc2	equ	0xFDE
 18302                           postdec2	equ	0xFDD
 18303                           plusw2	equ	0xFDB
 18304                           fsr2h	equ	0xFDA
 18305                           fsr2l	equ	0xFD9
 18306                           status	equ	0xFD8
 18307                           
 18308                           	psect	rparam
 18309  0000                     tosu	equ	0xFFF
 18310                           tosh	equ	0xFFE
 18311                           tosl	equ	0xFFD
 18312                           pclatu	equ	0xFFB
 18313                           pclath	equ	0xFFA
 18314                           tblptru	equ	0xFF8
 18315                           tblptrh	equ	0xFF7
 18316                           tblptrl	equ	0xFF6
 18317                           tablat	equ	0xFF5
 18318                           prodh	equ	0xFF4
 18319                           prodl	equ	0xFF3
 18320                           intcon	equ	0xFF2
 18321                           intcon2	equ	0xFF1
 18322                           postinc0	equ	0xFEE
 18323                           plusw0	equ	0xFEB
 18324                           fsr0h	equ	0xFEA
 18325                           fsr0l	equ	0xFE9
 18326                           wreg	equ	0xFE8
 18327                           indf1	equ	0xFE7
 18328                           postdec1	equ	0xFE5
 18329                           fsr1h	equ	0xFE2
 18330                           fsr1l	equ	0xFE1
 18331                           indf2	equ	0xFDF
 18332                           postinc2	equ	0xFDE
 18333                           postdec2	equ	0xFDD
 18334                           plusw2	equ	0xFDB
 18335                           fsr2h	equ	0xFDA
 18336                           fsr2l	equ	0xFD9
 18337                           status	equ	0xFD8
 18338                           
 18339                           	psect	temp
 18340  000048                     btemp:
 18341                           	opt stack 0
 18342  000048                     	ds	1
 18343  0000                     int$flags	set	btemp
 18344  0000                     wtemp6	set	btemp+1
 18345                           tosu	equ	0xFFF
 18346                           tosh	equ	0xFFE
 18347                           tosl	equ	0xFFD
 18348                           pclatu	equ	0xFFB
 18349                           pclath	equ	0xFFA
 18350                           tblptru	equ	0xFF8
 18351                           tblptrh	equ	0xFF7
 18352                           tblptrl	equ	0xFF6
 18353                           tablat	equ	0xFF5
 18354                           prodh	equ	0xFF4
 18355                           prodl	equ	0xFF3
 18356                           intcon	equ	0xFF2
 18357                           intcon2	equ	0xFF1
 18358                           postinc0	equ	0xFEE
 18359                           plusw0	equ	0xFEB
 18360                           fsr0h	equ	0xFEA
 18361                           fsr0l	equ	0xFE9
 18362                           wreg	equ	0xFE8
 18363                           indf1	equ	0xFE7
 18364                           postdec1	equ	0xFE5
 18365                           fsr1h	equ	0xFE2
 18366                           fsr1l	equ	0xFE1
 18367                           indf2	equ	0xFDF
 18368                           postinc2	equ	0xFDE
 18369                           postdec2	equ	0xFDD
 18370                           plusw2	equ	0xFDB
 18371                           fsr2h	equ	0xFDA
 18372                           fsr2l	equ	0xFD9
 18373                           status	equ	0xFD8


Data Sizes:
    Strings     21
    Constant    141
    Data        22
    BSS         255
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     47      71
    BANK0           160     96     160
    BANK1           256     16     210
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    DacSetValue@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    UpdateRxFreq@data	PTR unsigned char  size(2) Largest target is 0

    PLLUartInitialize@data	PTR unsigned char  size(2) Largest target is 0

    SetConversionResultFormat@data	PTR unsigned char  size(2) Largest target is 0

    SetAdcOperationMode@data	PTR unsigned char  size(2) Largest target is 0

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    strtol@endptr	PTR PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strtol@s	PTR const unsigned char  size(2) Largest target is 10
		 -> GetIntFromUartData@dataRegArr(BANK0[10]), 

    memset@p1	PTR void  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[9]), GetIntFromUartData@dataRegArr(BANK0[10]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK0[27]), 
		 -> FlashReadCondition@TxMsg(BANK0[9]), FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), 
		 -> rxMsgData(BANK1[20]), rxMsgQueue(BANK0[20]), 

    memset@p	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[9]), GetIntFromUartData@dataRegArr(BANK0[10]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK0[27]), 
		 -> FlashReadCondition@TxMsg(BANK0[9]), FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), 
		 -> rxMsgData(BANK1[20]), rxMsgQueue(BANK0[20]), 

    Make32bitsArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> SWSPI_Synth_send_bits@bitArray(BANK0[32]), 

    GetIntFromUartData@data	PTR unsigned char  size(2) Largest target is 0

    ZeroBitsArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> SWSPI_Synth_send_bits@bitArray(BANK0[32]), 

    sp__memset	PTR void  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[9]), GetIntFromUartData@dataRegArr(BANK0[10]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK0[27]), 
		 -> FlashReadCondition@TxMsg(BANK0[9]), FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), 
		 -> rxMsgData(BANK1[20]), rxMsgQueue(BANK0[20]), 

    ZeroArray@array	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[9]), GetIntFromUartData@dataRegArr(BANK0[10]), SynthReadData@TxMsg(BANK0[27]), FlashReadCondition@TxMsg(BANK0[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), 
		 -> rxMsgQueue(BANK0[20]), 

    crc8@dataArray	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetMcuFwVersion@TxMsg(BANK0[9]), SynthReadData@TxMsg(BANK0[27]), FlashReadCondition@TxMsg(BANK0[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgQueue(BANK0[20]), 

    GroupDAC@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    FLASH_WriteBlock@flashWrBufPtr	PTR unsigned char  size(2) Largest target is 128
		 -> FlashTest@buff(BANK0[128]), sampleArray(BANK1[64]), 

    SynthReadData@data	PTR unsigned char  size(2) Largest target is 0

    UpdateTxFreq@data	PTR unsigned char  size(2) Largest target is 0

    WriteUartMessage@dataBuf	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetMcuFwVersion@TxMsg(BANK0[9]), SynthReadData@TxMsg(BANK0[27]), FlashReadCondition@TxMsg(BANK0[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), SendAckMessage@TxMsg(COMRAM[6]), 

    SetChannelMode@data	PTR unsigned char  size(2) Largest target is 0

    groupsArray	PTR FTN()void [6] size(2) Largest target is 1
		 -> GroupDAC(), GroupFlashMemory(), GroupSynthesizers(), GroupAdc(), 
		 -> GroupStatusAndVersion(), GroupControlMcu(), 


Critical Paths under _main in COMRAM

    _InitRxMessageParams->_ZeroArray
    _StoreIntInEeprom->_make8
    _EepromWrite->_DATAEE_WriteByte
    _GetIntFromUartData->_strtol
    _strtol->___lmul
    _isalpha->_isupper
    _UpdateRxFreq->_SendAckMessage
    _SynthReadData->_ZeroArray
    _SetSynthTxOper->_InitTxSynth
    _SetSynthRxOper->_InitRxSynth
    _GetMcuRunTime->___lldiv
    _GetMcuFwVersion->_ZeroArray
    _FlashReadUart->_SendAckMessage
    _FlashReadCondition->_ZeroArray
    _FlashEreaseMem->_SendAckMessage
    _DacSetValue->_SendAckMessage
    _testLeds->_SendAckMessage
    _ResetMcu->_SendAckMessage
    _SetConversionResultFormat->_SendAckMessage
    _SetChannelMode->_SendAckMessage
    _SetAdcOperationMode->_SendAckMessage
    _keepAliveSignalUart->_SendAckMessage
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _SetMcuRunTime->___llmod
    _SendSystemStartAck->_SendAckMessage
    _SendAckMessage->_ZeroArray
    _ZeroArray->_memset
    _WriteUartMessage->_EUSART1_Write
    _PLLInitialize->_InitRxSynth
    _PLLInitialize->_InitTxSynth
    _InitTxSynth->_SWSPI_send_word
    _InitRxSynth->_SWSPI_send_word
    _DacInit->_SWSPI_send_word
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _SWSPI_Synth_send_bits->_Make32bitsArray
    _SWSPI_Synth_send_bits->_ZeroBitsArray
    _ZeroBitsArray->_memset
    _SWSPI_DAC_send_bits->_SwSpi_Clk_Pin
    _SWSPI_DAC_send_bits->_SwSpi_Data_Pin
    ___lmul->_EepromRead
    _EepromRead->_DATAEE_ReadByte
    _CheckFlashPrecentage->___ftdiv
    _AdcConvert->_FlashSampleWrite
    _exp->___ftdiv
    ___fttol->___ftdiv
    ___ftmul->___ftdiv
    ___ftdiv->___lltoft
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lwtoft->___ftpack
    _FlashSampleWrite->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_ISR->___lwmod

Critical Paths under _main in BANK0

    _readUartMessage->_GroupAdc
    _readUartMessage->_GroupControlMcu
    _readUartMessage->_GroupDAC
    _readUartMessage->_GroupFlashMemory
    _readUartMessage->_GroupStatusAndVersion
    _readUartMessage->_GroupSynthesizers
    _UpdateTxFreq->_GetIntFromUartData
    _GetIntFromUartData->_strtol
    _GroupFlashMemory->_FlashReadUart
    _InitSystemApplicationManagers->_DacInit
    _DacInit->_ReadIntFromEeprom
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _ReadIntFromEeprom->_pow
    _CheckFlashPrecentage->___ftmul
    _AdcConvert->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___ftdiv
    ___ftsub->___ftadd
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _readUartMessage->_GroupFlashMemory
    _DacInit->_ReadIntFromEeprom

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  408305
                         _AdcConvert
                     _BlinkErrorLeds
                        _BlinkOkLeds
               _CheckFlashPrecentage
      _InitSystemApplicationManagers
                 _SendSystemStartAck
                      _SetMcuRunTime
                       _SetMcuSystem
                 _keepAliveSignalLed
                _keepAliveSignalUart
                    _readUartMessage
 ---------------------------------------------------------------------------------
 (1) _readUartMessage                                      7     7      0  160102
                                              3 BANK1      7     7      0
                       _EUSART1_Read
                           _GroupAdc *
                    _GroupControlMcu *
                           _GroupDAC *
                   _GroupFlashMemory *
              _GroupStatusAndVersion *
                  _GroupSynthesizers *
                _InitRxMessageParams
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _InitRxMessageParams                                  0     0      0    2539
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupSynthesizers                                    3     1      2   70214
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                  _PLLUartInitialize
                     _SetSynthRxOper
                     _SetSynthTxOper
                      _SynthReadData
                       _UpdateRxFreq
                       _UpdateTxFreq
 ---------------------------------------------------------------------------------
 (3) _UpdateTxFreq                                        10     8      2   24017
                                             39 BANK0     10     8      2
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (4) _StoreIntInEeprom                                     9     2      7    2159
                                             32 COMRAM     9     2      7
                        _EepromWrite
                              _make8
 ---------------------------------------------------------------------------------
 (5) _EepromWrite                                          2     1      1     428
                                             26 COMRAM     2     1      1
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (6) _DATAEE_WriteByte                                     3     2      1     276
                                             23 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (4) _GetIntFromUartData                                  33    25      8    6301
                                              6 BANK0     33    25      8
                          _ZeroArray
                             _strtol
 ---------------------------------------------------------------------------------
 (5) _strtol                                              16    10      6    2723
                                             37 COMRAM    10     4      6
                                              0 BANK0      6     6      0
                             ___lmul
                            _isalpha
                            _isdigit
                            _isspace
                            _toupper
 ---------------------------------------------------------------------------------
 (6) _toupper                                              1     1      0      96
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _isspace                                              3     3      0     130
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isalpha                                              3     3      0     229
                                             26 COMRAM     3     3      0
                            _isupper
 ---------------------------------------------------------------------------------
 (7) _isupper                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _UpdateRxFreq                                         2     0      2    7089
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _SynthReadData                                       30    28      2    5779
                                             35 COMRAM     2     0      2
                                              0 BANK0     28    28      0
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (3) _SetSynthTxOper                                       0     0      0   16466
                        _InitTxSynth
                     _SendAckMessage
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (3) _SetSynthRxOper                                       0     0      0   16466
                        _InitRxSynth
                     _SendAckMessage
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (3) _PLLUartInitialize                                    2     0      2     180
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _GroupStatusAndVersion                                4     1      3    9947
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                    _GetMcuFwVersion
                      _GetMcuRunTime
 ---------------------------------------------------------------------------------
 (3) _GetMcuRunTime                                       17    17      0    4138
                                             36 COMRAM     2     2      0
                                              0 BANK0     15    15      0
                   _WriteUartMessage
                            ___lldiv
                            ___llmod
                               _crc8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     421
                                             23 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _GetMcuFwVersion                                     13    13      0    5778
                                              0 BANK0     13    13      0
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _GroupFlashMemory                                     4     2      2   30398
                                             95 BANK0      1     1      0
                                              0 BANK1      3     1      2
                     _FlashEreaseMem
                 _FlashReadCondition
                      _FlashReadUart
 ---------------------------------------------------------------------------------
 (3) _FlashReadUart                                       97    95      2   13918
                                             43 COMRAM     2     0      2
                                              0 BANK0     95    95      0
                  _FLASH_IsWriteDone
                     _FLASH_ReadByte
                     _SendAckMessage
                   _WriteUartMessage
                          _ZeroArray
                                _abs
                               _crc8
 ---------------------------------------------------------------------------------
 (4) _abs                                                  4     2      2     183
                                             23 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _FLASH_ReadByte                                       4     0      4     543
                                             23 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _FlashReadCondition                                  13    13      0    6880
                                             35 COMRAM     4     4      0
                                              0 BANK0      9     9      0
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (3) _FlashEreaseMem                                       0     0      0    9538
                     _SendAckMessage
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupDAC                                             3     1      2    7216
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                        _DacSetValue
 ---------------------------------------------------------------------------------
 (3) _DacSetValue                                          2     0      2    7089
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _GroupControlMcu                                      4     1      3   14097
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                           _ResetMcu
                           _testLeds
 ---------------------------------------------------------------------------------
 (3) _testLeds                                             3     3      0    7067
                                             43 COMRAM     3     3      0
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _ResetMcu                                             0     0      0    6999
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _GroupAdc                                             3     1      2   21453
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                _SetAdcOperationMode
                     _SetChannelMode
          _SetConversionResultFormat
 ---------------------------------------------------------------------------------
 (3) _SetConversionResultFormat                            2     0      2    7089
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _SetChannelMode                                       2     0      2    7151
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _SetAdcOperationMode                                  2     0      2    7089
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         3     3      0      68
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalUart                                  0     0      0    6999
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalLed                                   1     1      0       0
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SetMcuSystem                                         0     0      0      98
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0      98
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      2     2      0      98
                                             25 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _TMR0_SetInterruptHandler                             2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMcuRunTime                                        0     0      0     592
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     592
                                             23 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (1) _SendSystemStartAck                                   0     0      0    6999
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (4) _SendAckMessage                                       8     7      1    6999
                                             35 COMRAM     8     7      1
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _crc8                                                 9     5      4    1430
                                             23 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _ZeroArray                                            4     0      4    2539
                                             31 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (5) _WriteUartMessage                                     7     3      4    1272
                                             24 COMRAM     7     3      4
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (6) _EUSART1_Write                                        1     1      0      62
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitSystemApplicationManagers                        0     0      0  117702
                    _ClearMcuRunTime
                            _DacInit
              _InitAdcApplicationMgr
                      _PLLInitialize
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PLLInitialize                                        0     0      0   17904
                        _InitRxSynth
                        _InitTxSynth
 ---------------------------------------------------------------------------------
 (4) _InitTxSynth                                          1     1      0    8952
                                             46 COMRAM     1     1      0
                    _SWSPI_send_word
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (4) _InitRxSynth                                          1     1      0    8952
                                             46 COMRAM     1     1      0
                    _SWSPI_send_word
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (4) _SwSpi_Set_CE_Pin                                     2     1      1     515
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _InitAdcApplicationMgr                                1     1      0       1
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _DacInit                                              5     5      0   99797
                                             90 BANK0      5     5      0
                  _ReadIntFromEeprom
                    _SWSPI_send_word
 ---------------------------------------------------------------------------------
 (4) _SWSPI_send_word                                      9     4      5    8338
                                             37 COMRAM     9     4      5
                _SWSPI_DAC_send_bits
              _SWSPI_Synth_send_bits
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
                              _make8
 ---------------------------------------------------------------------------------
 (5) _make8                                                9     4      5    1235
                                             23 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Synth_Le_Pin                               2     1      1     335
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Dac_Sync_Pin                               1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _SWSPI_Synth_send_bits                               42    38      4    3353
                                             33 COMRAM     4     0      4
                                              0 BANK0     38    38      0
                    _Make32bitsArray
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
                      _ZeroBitsArray
 ---------------------------------------------------------------------------------
 (6) _ZeroBitsArray                                        2     0      2     798
                                             31 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     677
                                             23 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (6) _Make32bitsArray                                     10     4      6     344
                                             23 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (5) _SWSPI_DAC_send_bits                                  3     2      1    2041
                                             25 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Data_Pin                                       2     1      1     757
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Clk_Pin                                        2     1      1     937
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (3) _ReadIntFromEeprom                                   23    19      4   91264
                                             83 BANK0      7     3      4
                                              0 BANK1     16    16      0
                         _EepromRead
                           ___awtoft
                            ___fttol
                             ___lmul
                                _pow
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     636
                                             25 COMRAM    12     4      8
                         _EepromRead (ARG)
 ---------------------------------------------------------------------------------
 (4) _EepromRead                                           1     1      0      62
                                             24 COMRAM     1     1      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (5) _DATAEE_ReadByte                                      1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ClearMcuRunTime                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckFlashPrecentage                                 7     7      0   14121
                                             24 BANK0      7     7      0
                            ___ftdiv
                             ___ftge
                            ___ftmul
                           ___lltoft
 ---------------------------------------------------------------------------------
 (1) _BlinkOkLeds                                          6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _BlinkErrorLeds                                       6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _AdcConvert                                          12    12      0  101512
                                             83 BANK0     12    12      0
                  _ADC_GetConversion
                   _FlashSampleWrite
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _pow
 ---------------------------------------------------------------------------------
 (4) _pow                                                 17    11      6   85693
                                             66 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (5) _log                                                  5     2      3   27302
                                             48 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _exp                                                  9     6      3   46354
                                             57 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (6) _ldexp                                                7     2      5     539
                                             48 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (6) _floor                                                8     5      3   11854
                                             49 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _frexp                                                7     2      5     682
                                             23 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             15    11      4     911
                                             24 BANK0     15    11      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftge                                               9     3      6    1098
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (7) ___altoft                                            10     6      4    3367
                                             39 BANK0     10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (6) _eval_poly                                           12     5      7   12115
                                             36 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4     702
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             15     9      6    5281
                                              9 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftsub                                              6     0      6    5754
                                             36 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             12     6      6    5338
                                             24 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftneg                                              3     0      3     335
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             15     9      6    4353
                                             40 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             4     1      3    3476
                                             31 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___lltoft                                             9     5      4    3355
                                             31 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3284
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    3073
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _FlashSampleWrite                                     7     4      3    1631
                                             44 COMRAM     3     0      3
                                              0 BANK0      4     4      0
                  _FLASH_IsWriteDone
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_WriteBlock                                    16    10      6    1172
                                             28 COMRAM    16    10      6
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     5     1      4     217
                                             23 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) _FLASH_IsWriteDone                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      22
                                             23 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                          18    18      0     767
                                              5 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                         _MEMORY_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR0_ISR                                            0     0      0     767
                            ___lwmod
 ---------------------------------------------------------------------------------
 (11) ___lwmod                                             5     1      4     767
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (10) _PIN_MANAGER_IOC                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _MEMORY_ISR                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART1_Receive_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcConvert
     _ADC_GetConversion
     _FlashSampleWrite
       _FLASH_IsWriteDone
       _FLASH_WriteBlock
         _FLASH_EraseBlock
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _frexp
   _BlinkErrorLeds
   _BlinkOkLeds
   _CheckFlashPrecentage
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___lltoft
       ___ftpack
   _InitSystemApplicationManagers
     _ClearMcuRunTime
     _DacInit
       _ReadIntFromEeprom
         _EepromRead
           _DATAEE_ReadByte
         ___awtoft
           ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lmul
           _EepromRead (ARG)
             _DATAEE_ReadByte
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _Make32bitsArray
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
           _ZeroBitsArray
             _memset
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
     _InitAdcApplicationMgr
     _PLLInitialize
       _InitRxSynth
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
             _ZeroBitsArray
               _memset
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SwSpi_Set_CE_Pin
       _InitTxSynth
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
             _ZeroBitsArray
               _memset
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SwSpi_Set_CE_Pin
     _TMR0_StartTimer
   _SendSystemStartAck
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _SetMcuRunTime
     ___llmod
   _SetMcuSystem
     _SYSTEM_Initialize
       _ADC_Initialize
       _EUSART1_Initialize
       _INTERRUPT_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
   _keepAliveSignalLed
   _keepAliveSignalUart
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _readUartMessage
     _EUSART1_Read
     _GroupAdc *
       _SetAdcOperationMode
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _SetChannelMode
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _SetConversionResultFormat
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupControlMcu *
       _ResetMcu
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _testLeds
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupDAC *
       _DacSetValue
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupFlashMemory *
       _FlashEreaseMem
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _ZeroArray
           _memset
       _FlashReadCondition
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _FlashReadUart
         _FLASH_IsWriteDone
         _FLASH_ReadByte
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _abs
         _crc8
     _GroupStatusAndVersion *
       _GetMcuFwVersion
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
       _GetMcuRunTime
         _WriteUartMessage
           _EUSART1_Write
         ___lldiv
         ___llmod
         _crc8
     _GroupSynthesizers *
       _PLLUartInitialize
       _SetSynthRxOper
         _InitRxSynth
           _SWSPI_send_word
             _SWSPI_DAC_send_bits
               _SwSpi_Clk_Pin
               _SwSpi_Data_Pin
             _SWSPI_Synth_send_bits
               _Make32bitsArray
               _SwSpi_Clk_Pin
               _SwSpi_Data_Pin
               _ZeroBitsArray
                 _memset
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
             _make8
           _SwSpi_Set_CE_Pin
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _SwSpi_Set_CE_Pin
       _SetSynthTxOper
         _InitTxSynth
           _SWSPI_send_word
             _SWSPI_DAC_send_bits
               _SwSpi_Clk_Pin
               _SwSpi_Data_Pin
             _SWSPI_Synth_send_bits
               _Make32bitsArray
               _SwSpi_Clk_Pin
               _SwSpi_Data_Pin
               _ZeroBitsArray
                 _memset
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
             _make8
           _SwSpi_Set_CE_Pin
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _SwSpi_Set_CE_Pin
       _SynthReadData
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
       _UpdateRxFreq
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _UpdateTxFreq
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
             _ZeroBitsArray
               _memset
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _StoreIntInEeprom
           _EepromWrite
             _DATAEE_WriteByte
           _make8
     _InitRxMessageParams *
       _ZeroArray
         _memset
     _ZeroArray *
       _memset
     _crc8 *

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _MEMORY_ISR
   _PIN_MANAGER_IOC
   _TMR0_ISR
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100     10      D2       8       82.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0     60      A0       6      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2F      47       1       75.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1B9       3        0.0%
DATA                 0      0     1B9       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Mar 18 16:00:59 2018

             __size_of_SendSystemStartAck 000C                         ??_GetMcuFwVersion 0024  
              __end_of_keepAliveSignalLed 381A                              ___altoft@exp 008F  
                _eusart1TxBufferRemaining 00FF                        readUartMessage@idx 01C9  
                GetIntFromUartData@idxCon 0084                           _GroupControlMcu 3496  
             __end_of_keepAliveSignalUart 392A                             ___altoft@sign 0090  
              __size_of_FLASH_IsWriteDone 000E                                        l54 2A86  
                GetIntFromUartData@recVal 007B                  GetIntFromUartData@retVal 007C  
                     __end_of_BlinkOkLeds 2BFE                           _SWSPI_send_word 2494  
                     ___wmul@multiplicand 001A                           _timer0ReloadVal 0046  
                            __CFG_CP0$OFF 000000                              __CFG_CP1$OFF 000000  
                            __CFG_CP2$OFF 000000                              __CFG_CP3$OFF 000000  
                            ___ftadd@exp1 0083                              ___ftadd@exp2 0082  
                            ___ftadd@sign 0081                               ?_MEMORY_ISR 0001  
                                     l120 1120                                       l121 1046  
                                     l201 0AC6                                       l210 0B2A  
                                     l203 0ADE                                       l300 1ADE  
                                     l116 354A                                       l212 0B94  
                                     l205 0AFC                                       l222 3418  
                                     l214 0BCC                                       l223 3402  
                                     l311 077C                                       l207 0B02  
                                     l216 0BD2                                       l321 0914  
                                     l313 07E8                                       l209 0B6E  
                                     l306 08BC                                       l314 08AA  
                                     l331 0A34                                       l307 0820  
                                     l332 0A4A                                       l324 092C  
                                     l316 085A                                       l325 0A50  
                                     l309 076C                                       l326 0948  
                                     l318 086C                                       l510 34EA  
                                     l190 0C2C                                       l327 0960  
                                     l191 0A6E                                       l504 36DC  
                                     l417 263E                                       l329 09DE  
                                     l610 2E04                                       l418 2654  
                                     l514 3510                                       l194 0A7C  
                                     l611 2DC8                                       l603 222E  
                                     l515 351A                                       l195 0AA8  
                                     l620 2DDC                                       l612 2DD2  
                                     l621 2DE6                                       l605 225C  
                                     l509 34E0                                       l606 2268  
                                     l519 2A3C                                       l199 0AAE  
                                     l640 2E1E                                       l641 2E28  
                                     l650 2E3C                                       l299 1AC0  
                                     l723 37D4                                       l707 32C0  
                                     l628 2DF0                                       l708 32CA  
                                     l629 2DFA                                       l718 37D8  
                                     l494 301A                                       l639 2E5A  
                                     l719 37D0                                       l657 2E46  
                                     l649 2E32                                       l585 24D0  
                                     l489 2FCE                                       l658 2E50  
                                     l595 2DA8                                       l499 2886  
                                     l596 2D74                                       l676 3298  
                                     l844 3138                                       l597 2D8E  
                                     l589 252A                                       l677 3270  
                                     l598 2D98                                       l686 3284  
                                     l678 327A                                       l846 315E  
                                     l687 328E                                       l697 32D4  
                                     l857 3244                                       l954 21E0  
                                     l698 32AC                                       l858 3268  
                                     l955 2198                                       l699 32B6  
                                     l859 3266                                       l957 21B8  
                                     l965 33B0                                       l958 21BA  
                            __CFG_CPB$OFF 000000                              __CFG_CPD$OFF 000000  
                    readUartMessage@chRec 01CB                         ??_Make32bitsArray 001E  
                              _SYNTH_REGS 0601                                       _abs 3630  
                                     _exp 0C62                                       _log 17B6  
                                     _pow 150A                                       prod 000FF3  
                                     tosl 000FFD                                       wreg 000FE8  
                   ??_SetAdcOperationMode 002E            ?_InitSystemApplicationManagers 0001  
                            __CFG_LVP$OFF 000000                __end_of_FlashReadCondition 19F0  
                            ___ftdiv@cntr 0063                              ___ftdiv@sign 0068  
                          ?_ZeroBitsArray 0020                                      ?_abs 0018  
                                    l1220 243C                                      l1204 3080  
                                    l1301 1474                                      l1213 245E  
                                    l1221 2442                                      l1205 3056  
                                    l1222 2450                                      l1214 23FE  
                                    l1230 30EC                                      l2103 0C7C  
                                    l1311 2C62                                      l1207 3064  
                                    l1231 30F2                                      l1320 2D6A  
                                    l1312 2C66                                      l1216 240C  
                                    l1208 3072                                      l2105 0CB4  
                                    l1313 2C6A                                      l1217 241A  
                                    l2114 1EE2                                      l2106 0CEC  
                                    l1330 16AA                                      l1314 2C98  
                                    l1218 2428                                      l1067 356E  
                                    l2123 2714                                      l2115 1ED4  
                                    l2131 20EE                                      l2107 0D1C  
                                    l1323 3314                                      l1219 2436  
                                    l1227 310C                                      l2132 20E2  
                                    l2108 0E46                                      l1308 2C9C  
                                    l2140 3628                                      l2060 0F4C  
                                    l2044 0E94                                      l1324 32EA  
                                    l1228 30E6                                      l1236 3748  
                                    l2117 1EFC                                      l2109 0E1C  
                                    l1309 2C5E                                      l2061 0FB8  
                                    l1237 373A                                      l2118 1F78  
                                    l1318 2D2C                                      l2150 3676  
                                    l2054 0F10                                      l2046 0EAC  
                                    l2127 207A                                      l1511 364E  
                                    l2063 0FDC                                      l2055 0F20  
                                    l2064 1018                                      l2048 0F00  
                                    l2129 20C0                                      l1329 1788  
                                    l2145 376A                                      l2057 0F3A  
                                    l1186 34A8                                      l2155 3788  
                                    l1187 349C                                      l2068 3856  
                                    l1196 36B6                                      l1452 2B50  
                                    l1285 2F98                                      l1189 34A2  
                                    l1197 36AA                                      l1453 2B68  
                                    l1550 2948                                      l1286 2F7C  
                                    l1390 1DFA                                      l1711 1234  
                                    l2175 2048                                      l1551 293C  
                                    l2167 17D2                                      l1199 36B0  
                                    l1455 2B8E                                      l1720 12C4  
                                    l2176 1FC8                                      l1456 2B82  
                                    l2169 17F2                                      l1473 2E80  
                                    l1297 13DE                                      l1474 2E94  
                                    l1715 125E                                      l1299 13FE  
                                    l1820 28F8                                      l1661 3330  
                                    l1725 12BA                                      l1821 2906  
                                    l1734 12F8                                      l1726 12B0  
                                    l1910 15D0                                      l1830 2B1E  
                                    l1735 12EE                                      l1911 1678  
                                    l1831 2B2C                                      l1680 2372  
                                    l1744 1D02                                      l1752 27AC  
                                    l1816 28C4                                      l1681 2368  
                                    l1737 131C                                      l1761 1C34  
                                    l1753 27DC                                      l1905 1554  
                                    l1817 28B8                                      l1746 1D2A  
                                    l1770 3702                                      l1738 1338  
                                    l1762 1C66                                      l1906 1544  
                                    l1826 2AF6                                      l1683 23A6  
                                    l1747 1D68                                      l1739 1368  
                                    l1763 1C76                                      l1827 2AEA  
                                    l1684 2390                                      l1748 1D8E  
                                    l1780 1B18                                      l1908 156C  
                                    l1837 2CCA                                      l1765 1C8E  
                                    l1909 15F2                                      l1686 23CE  
                                    l1838 2CBE                                      l1766 1C9E  
                                    l1782 1B90                                      l6102 2C08  
                                    l1687 23C4                                      l1759 1C0C  
                                    l1791 1BD0                                      l1783 1B80  
                                    l1776 31C4                                      l6114 2BAA  
                                    l1788 1BB4                                      l1789 1BA8  
                                    l1893 35CE                                      l1894 35BE  
                                    l7220 24EA                                      l8102 103E  
                                    l6502 35BE                                      l7224 24F8  
                                    l8008 263E                                      ?_exp 0099  
                                    ?_log 0090                                      l7506 13D6  
                                    l6496 2808                                      l6584 2D1C  
                                    l6832 3232                                      l7640 2ACC  
                                    l7528 1464                                      l7490 3012  
                                    l7626 2A76                                      l7546 14C8  
                                    l7476 2FC6                                      l7398 0E1C  
                                    l6918 2226                                      l7750 092C  
                                    l7674 2190                                      l7754 0950  
                                    l7764 09B0                                      l7926 1DEA  
                                    l7938 1E76                                      ?_pow 00A2  
                                    l7998 25CA                                      STR_1 068E  
                                    STR_2 069A                        EepromWrite@address 001C  
                                    _IOCB 000F62                                      _LATA 000F89  
                                    _LATB 000F8A                                      _LATC 000F8B  
                                    _LATD 000F8C                                      _LATE 000F8D  
                                    u7010 209A                                      u6220 1226  
                                    u7110 2524                                      u6320 12CC  
                                    u6250 1250                                      u7018 209E  
                                    u7210 0ED6                                      u6411 1C1C  
                                    u6500 1B36                                      u5380 380C  
                                    u6181 11F2                                      u6350 1300  
                                    u7230 0EE6                                      u6191 1206  
                                    u8031 2826                                      u6280 128E  
                                    u7080 24A4                                      u6505 1B2E  
                                    u8130 1E76                                      u8050 34D0  
                                    u6540 1BBA                                      u8060 34D2  
                                    u7180 0E9C                                      u8150 1A4C  
                                    u6630 2C90                                      u5398 380E  
                                    u6391 1BF4                                      u6720 227A  
                                    u8080 3500                                      u7600 14C8  
                                    u8145 19FA                                      u6481 1AFC  
                                    u8170 1A90                                      u6570 273C  
                                    u7370 0CF6                                      u8410 2346  
                                    u8090 3502                                      u6635 2C86  
                                    u7611 1500                                      u7380 0CF8  
                                    u7460 15BA                                      u5950 235A  
                                    u7710 2ACC                                      u6655 33BE  
                                    u7480 38F6                                      u6656 33C0  
                                    u8408 0C04                                      u7481 38F2  
                                    u8409 0C24                                      u6578 273E  
                                    u7810 0718                                      u7650 28C8  
                                    u7570 1418                                      u7635 3492  
                                    u6771 1CEA                                      u7636 3494  
                                    u7820 071A                                      u5990 23D8  
                                    u6870 3672                                      u6791 1D12  
                                    u8607 227C                                      u7760 21BE  
                                    u7680 2AFA                                      u7920 0902  
                                    u8617 2BD0                                      u6970 1EEE  
                                    u6890 361A                                      u8627 2BEA  
                                    u8637 2C2E                                      u7950 09B0  
                                    u7775 21DC                                      u8647 2C48  
                                    u8567 2A8E                                      u7776 21DE  
                                    u7960 09CE                                      u8657 110C  
                                    u8577 2A9E                                      u7865 07F2  
                                    u8587 2AAE                                      u8597 2ABE  
                                    u7885 087E                  ??_SwSpi_Set_Synth_Le_Pin 0019  
                                    _WPUB 000F61                             _EUSART1_Write 3230  
                                    abs@a 0018                                      _crc8 2F6A  
                 ??_InitAdcApplicationMgr 0018                                      _data 00CE  
                                    _main 2B3E                              ___ftpack@arg 0018  
                           ?_EUSART1_Read 0001                              ___ftpack@exp 001B  
                         _TMR0_StartTimer 395E                           __end_of_DacInit 265A  
                                    fsr0h 000FEA                                      fsr1h 000FE2  
                                    fsr2h 000FDA                                      fsr0l 000FE9  
                                    indf1 000FE7                                      indf2 000FDF  
                                    fsr1l 000FE1                                      fsr2l 000FD9  
                                    btemp 0048                             __CFG_BORV$190 000000  
                                    exp@x 0099                                      log@x 0090  
                       ?_FLASH_WriteBlock 001D                          ?_ClearMcuRunTime 0001  
                                    pow@x 00A2                                      pow@y 00A5  
                                    prodh 000FF4                                      prodl 000FF3  
               GroupStatusAndVersion@data 01C2             __size_of_CheckFlashPrecentage 00AE  
                                    start 00DC                             __CFG_IESO$OFF 000000  
                     __end_of_EepromWrite 38C2                        ??_FLASH_WriteBlock 0023  
                           _adcSampleMode 003B                              ___ftmul@cntr 0076  
                            ___param_bank 000000                              ___ftmul@sign 0077  
                          _BlinkErrorLeds 2BFE                             ??_InitRxSynth 002F  
                           ??_InitTxSynth 002F                              ___fttol@exp1 0086  
                                   ??_abs 001A                 __size_of_DATAEE_WriteByte 0036  
                                   ??_exp 002F                                     ??_log 002F  
                            ___fttol@lval 0082                                     ??_pow 002F  
                 __end_of_TMR0_Initialize 3462                    _ReadIntFromEeprom$3314 01C6  
                  _ReadIntFromEeprom$3315 01C9            __size_of_OSCILLATOR_Initialize 000E  
           __end_of_OSCILLATOR_Initialize 38DE                                     ?_crc8 0018  
              SWSPI_DAC_send_bits@phrType 001C                            _SetSynthRxOper 34F6  
                                   ?_main 0001                            _SetSynthTxOper 34C6  
                                   _EEADR 000FA9                           __end_of___ftadd 138E  
         __size_of_SwSpi_Set_Dac_Sync_Pin 001C                           __end_of___ftdiv 1DC0  
                         __end_of___ftneg 3710                           __end_of___lldiv 2918  
                              _EepromRead 394A                           __end_of___ftmul 1CD8  
                                   _T0CON 000FD5                           __end_of___llmod 2B3E  
                         __end_of___ftsub 31EE                           __end_of___fttol 1BE2  
                            _SYNTH_ADDRES 0635                            __CFG_DEBUG$OFF 000000  
                         __end_of___lwmod 3230                       StoreIntInEeprom@idx 0029  
                                   i2l801 0090                                     i2l870 35AE  
                                   i2l863 3380                                     i2l864 337C  
                                   i2l792 005E                                     i2l794 006A  
                                   i2l869 358E                                     i2l797 007A  
                                   i2l799 0086                       StoreIntInEeprom@val 0028  
                                   _TMR0H 000FD7                                     _TMR0L 000FD6  
                                   _TRISA 000F92                                     _TRISB 000F93  
                                   _TRISC 000F94                                     _TRISD 000F95  
                                   _TRISE 000F96                       _SWSPI_DAC_send_bits 2D6C  
       __size_of_TMR0_SetInterruptHandler 000A                             __CFG_WRT0$OFF 000000  
                           __CFG_WRT1$OFF 000000                __end_of_GetIntFromUartData 150A  
                           __CFG_WRT2$OFF 000000                       ___lmul@multiplicand 001E  
               ?_TMR0_SetInterruptHandler 0018                             __CFG_WRT3$OFF 000000  
                            ___lltoft@exp 0028                      _EUSART1_Transmit_ISR 3354  
                          __CFG_EBTR0$OFF 000000                            __CFG_FCMEN$OFF 000000  
                          __CFG_EBTR1$OFF 000000                            __CFG_EBTR2$OFF 000000  
                          __CFG_EBTR3$OFF 000000                         ?_WriteUartMessage 0019  
                        __end_of_TMR0_ISR 26EC                             __CFG_WRTB$OFF 000000  
                           __CFG_WRTC$OFF 000000                             __CFG_WRTD$OFF 000000  
                         DacSetValue@data 002C                           _DATAEE_ReadByte 385A  
                          __CFG_EBTRB$OFF 000000                             ___awtoft@sign 0023  
                 __end_of_PIN_MANAGER_IOC 3966                                     crc8@i 001F  
                                   _make8 2C5C            __size_of_SWSPI_Synth_send_bits 00BA  
                   __end_of_GetMcuRunTime 1EA4                                     _count 00C8  
                                   _floor 1EA4                                     _ldexp 2060  
                                   _frexp 26EC                                     _errno 00C4  
           __end_of_SWSPI_Synth_send_bits 229C                           __end_of_isalpha 3630  
                         __end_of_isdigit 3772                                     _group 00D1  
                      ??_WriteUartMessage 001D                        __CFG_MCLRE$EXTMCLR 000000  
                           ___ftpack@sign 001C                   ??_GroupStatusAndVersion 0030  
                         __end_of_isspace 367E                            ?_EUSART1_Write 0001  
                             ?_AdcConvert 0001                            __CFG_BOREN$OFF 000000  
                         __end_of_isupper 3790                                     pclath 000FFA  
                                   tablat 000FF5                                     pow@yi 00AF  
                          ??_EUSART1_Read 0018                                     plusw0 000FEB  
                                   plusw2 000FDB                                     status 000FD8  
                                   wtemp6 0049                      ReadIntFromEeprom@idx 01D1  
                          __CFG_HFOFST$ON 000000                           __end_of_toupper 385A  
          SwSpi_Set_Synth_Le_Pin@cPinMode 0018                   __end_of_GroupControlMcu 34C6  
                     __size_of_MEMORY_ISR 0004                            __CFG_PBADEN$ON 000000  
      __size_of_SetConversionResultFormat 000C                               exp@exponent 009F  
          CheckFlashPrecentage@precentage 007C                      ?_SWSPI_DAC_send_bits 001A  
                  __end_of_BlinkErrorLeds 2C5C                               ldexp@newexp 0093  
                 __end_of_SWSPI_send_word 252E                               _BlinkOkLeds 2BA0  
                 WriteUartMessage@dataBuf 0019                           __initialization 2992  
                             log@exponent 0093                              __end_of_crc8 2FB8  
              __end_of_EUSART1_Initialize 33F8                              __end_of_main 2BA0  
                  __end_of_SetSynthRxOper 3526                   FLASH_ReadByte@flashAddr 0018  
                  __end_of_SetSynthTxOper 34F6               ?_INTERRUPT_InterruptManager 0001  
                        __end_of_GroupDAC 3754                    __size_of_SynthReadData 006A  
                         _readUartMessage 0A66                          __end_of_GroupAdc 3098  
                                  ??_crc8 001C                                    ??_main 0030  
                           ___fttol@sign1 0081                         ?_SwSpi_Set_CE_Pin 0018  
                      _TimerKeepAliveFlag 00D6                             __activetblptr 000002  
                 __size_of_FLASH_ReadByte 0012                          __end_of_ResetMcu 38D0  
                     __end_of_InitRxSynth 3050                       __end_of_InitTxSynth 3004  
                            _writeAddress 0040                        ??_SwSpi_Set_CE_Pin 0019  
                   ?_EUSART1_Transmit_ISR 0001                           ??_ZeroBitsArray 0022  
                 __end_of_TMR0_StartTimer 3962                                    ?_make8 0018  
                                  _ADCON0 000FC2                                    _ADCON1 000FC1  
                                  _ADCON2 000FC0                                    ?_floor 0091  
               FLASH_WriteBlock@writeAddr 001D                                    ?_ldexp 0090  
                                  ?_frexp 0018                          __end_of___altoft 2992  
                        ___llmod@dividend 0018                                    _ADRESH 000FC4  
                                  _ADRESL 000FC3                                    _EEDATA 000FA8  
                               ??_DacInit 00BA                                    _EECON2 000FA7  
                        __end_of___awtoft 3354                                    _ANSELA 000F38  
                                  _ANSELB 000F39                                    _ANSELC 000F3A  
                                  _ANSELD 000F3B                                    _ANSELE 000F3C  
                        __end_of___ftpack 23F8                          __end_of___lltoft 2D14  
                       _FlashReadUart$581 00B1                         _FlashReadUart$582 00B5  
                       ?_FlashSampleWrite 002D                                    i2l1023 268A  
                                  i2l1024 26AC                                    i2l1025 26CE  
                          __CFG_WDTEN$OFF 000000                      StoreIntInEeprom@data 0021  
                                  i2l1880 31FC                                    i2l1883 321C  
                                  i2l1884 3226                                    i2l1879 3204  
                                  _TABLAT 000FF5                               _EepromWrite 38B4  
                                  _RCREG1 000FAE                          __end_of___lwtoft 3734  
                 __size_of_FlashEreaseMem 0052                 __size_of_FLASH_EraseBlock 0034  
                                  _RCSTA1 000FAB                         SynthReadData@data 0024  
         __size_of_SwSpi_Set_Synth_Le_Pin 003C                                    _OSCCON 000FD3  
                       SynthReadData@indx 007B                                    _SPBRG1 000FAF  
                  _SwSpi_Set_Dac_Sync_Pin 37CC                   __size_of_SwSpi_Data_Pin 0056  
                GroupSynthesizers@request 00BF                        ??_FlashSampleWrite 0060  
                                  _TXREG1 000FAD                                    _TXSTA1 000FAC  
                   ??_SWSPI_DAC_send_bits 001B                  __end_of_GroupFlashMemory 3124  
                         ?_BlinkErrorLeds 0001                            __CFG_PWRTEN$ON 000000  
                          __CFG_XINST$OFF 000000                                    _cState 00D2  
                                  ___ftge 277C                                    ___lmul 2E70  
               SWSPI_Synth_send_bits@data 0022                                    ___wmul 367E  
                               ??___ftadd 007E                 SWSPI_Synth_send_bits@mask 0080  
                               ??___ftdiv 0060                                 ??___ftneg 001B  
                               ??___lldiv 0020                                 ??___ftmul 006F  
                   __end_of_PLLInitialize 38EC                                 ??___llmod 0020  
                               ??___ftsub 002F                                 ??___fttol 007C  
                               ??___lwmod 0005            SwSpi_Set_Dac_Sync_Pin@cPinMode 0018  
                         ?_SetSynthRxOper 0001                           ?_SetSynthTxOper 0001  
                        ?_TMR0_Initialize 0001                                    _memset 35B4  
                      __end_of_DAC_ADDRES 0655                                    clear_0 29D8  
                                  clear_1 29E4                                    clear_2 29F0  
                     __size_of_AdcConvert 01B6                   __end_of_DATAEE_ReadByte 386E  
                             ?_EepromRead 0001                                    _strtol 0E54  
                                  floor@i 0094                     __end_of_SwSpi_Clk_Pin 2E70  
                                  floor@x 0091                     ___ftmul@f3_as_product 0073  
                SWSPI_DAC_send_bits@count 001B                FlashSampleWrite@channelNum 002F  
                            __pdataCOMRAM 0040                                 ??_isalpha 001B  
                               ??_isdigit 0018                     __end_of_FlashReadUart 0A66  
                        __end_of_testLeds 2AD8                             ?_SetMcuSystem 0001  
                            __mediumconst 0000                                 ??_isspace 0018  
                                  tblptrh 000FF7                                 ??_isupper 0018  
                                  tblptrl 000FF6                                    tblptru 000FF8  
                ADC_GetConversion@channel 001C                           ??_EUSART1_Write 0018  
TMR0_SetInterruptHandler@InterruptHandler 0018              __size_of_InitRxMessageParams 0028  
                        ?_PIN_MANAGER_IOC 0001                     ReadIntFromEeprom@base 01C2  
                         _eusart1RxBuffer 0146                                 ??_toupper 0018  
                      __size_of_ZeroArray 001E             __size_of_INTERRUPT_Initialize 0004  
                           _SynthReadData 2A04                           _eusart1TxBuffer 0100  
                         _GetMcuFwVersion 252E                          __end_ofexp@coeff 0673  
                       _SYSTEM_Initialize 37E8                          __end_oflog@coeff 068E  
                              __accesstop 0060                   __end_of__initialization 29F6  
                              ___altoft@c 0087                             ZeroArray@size 0022  
                              ___ftadd@f1 0078                                ___ftadd@f2 007B  
                              ___ftge@ff1 0018                                ___ftge@ff2 001B  
                      ?_SYSTEM_Initialize 0001                              eval_poly@res 008D  
                           ___rparam_used 000001                                ___ftdiv@f1 0029  
                              ___ftdiv@f2 002C                                ___ftdiv@f3 0064  
                        ?_GroupControlMcu 01C2              GroupStatusAndVersion@request 00BF  
                              ___ftneg@f1 0018                                ___awtoft@c 0020  
                 __end_of_readUartMessage 0C62                  WriteUartMessage@dataSize 001B  
                              ___ftmul@f1 0069                                ___ftmul@f2 006C  
                        ?_SWSPI_send_word 0026                              ?_DacSetValue 002C  
                              ___ftsub@f1 0084                                ___ftsub@f2 0087  
                              ___fttol@f1 0078                           _Make32bitsArray 2D14  
                          __pcstackCOMRAM 0001                              __pidataBANK0 3894  
                     ??_SYSTEM_Initialize 001C                                 ?_TMR0_ISR 0001  
                              ___lltoft@c 0020                             __end_of_make8 2CB8  
                             _InitRxSynth 3004                          _DATAEE_WriteByte 338C  
                           __end_of_floor 1F86                             __end_of_ldexp 2126  
                           __end_of_frexp 277C                               _InitTxSynth 2FB8  
                  _SwSpi_Set_Synth_Le_Pin 32A8                      GroupFlashMemory@data 01C2  
                              ___lwtoft@c 0020           __end_of_DAC_DEFAULT_INIT_VALUES 064A  
                    __end_of_EUSART1_Read 3168                              ??_MEMORY_ISR 0001  
               __size_of_StoreIntInEeprom 0038                    __size_of_SetMcuRunTime 0044  
                  ??_EUSART1_Transmit_ISR 0001                            ??_SetMcuSystem 001C  
                      ZeroBitsArray@array 0020                     TMR0_ISR@CountCallBack 0034  
           SwSpi_Set_Synth_Le_Pin@phrType 0019                   GroupFlashMemory@request 01C4  
                      _keepAliveSignalLed 3802                         make8@dataLocation 001C  
             __end_of_EUSART1_Receive_ISR 35B4               FLASH_WriteBlock@GIEBitValue 002B  
                            GroupDAC@data 01C2                                   ??_make8 001D  
                                 ??_floor 002F                          ?_TMR0_StartTimer 0001  
                                 ??_ldexp 0095                                   ??_frexp 001D  
                         _AdcConvert$3313 00B9                 __end_of_SYSTEM_Initialize 3802  
                          ?_SynthReadData 0024                             _eusart1RxHead 0037  
                    GetMcuFwVersion@TxMsg 0060                             _eusart1TxHead 0039  
                           _eusart1RxTail 0036                                __pbssBANK0 00C0  
                              __pbssBANK1 0100                             _eusart1TxTail 0038  
                     ?_keepAliveSignalLed 0001                        __size_of_eval_poly 00DA  
                         __CFG_PLLCFG$OFF 000000                                _channelArr 064A  
                               ?_GroupDAC 01C2                                __pnvCOMRAM 0046  
                               ?_GroupAdc 01C2            __size_of_InitAdcApplicationMgr 0010  
              __end_of_SendSystemStartAck 3936             __end_of_InitAdcApplicationMgr 38B4  
                     __size_of_EepromRead 000A                        __end_of_MEMORY_ISR 396A  
                               ?_ResetMcu 0001                        _FlashReadCondition 18D8  
         ??_InitSystemApplicationManagers 0030                        __CFG_CCP2MX$PORTC1 000000  
                                 ?___ftge 0018                            FlashReadUart@j 00B9  
        __end_of_TMR0_SetInterruptHandler 394A                                   ?___lmul 001A  
                                 ?___wmul 0018                                ??_TMR0_ISR 0006  
                      __CFG_CCP3MX$PORTB5 000000                        SetChannelMode@data 002C  
                    ??_keepAliveSignalLed 0018                         __end_of_ZeroArray 37AE  
                               ?___altoft 0087                                   ?_memset 0018  
                       _ReadIntFromEeprom 1686                            ___lmul@product 0022  
                     ?_FlashReadCondition 0001                                 ?___awtoft 0020  
                               ?___ftpack 0018                              GroupAdc@data 01C2  
                        FlashReadUart@idx 00BB                                 ?___lltoft 0020  
               __size_of_FLASH_WriteBlock 00BC                   __size_of_ADC_Initialize 0016  
             __end_of_SetAdcOperationMode 391E                FlashSampleWrite@sampleData 002D  
                          _FLASH_ReadByte 3882                                 ?___lwtoft 0020  
            __end_of_CheckFlashPrecentage 234A                        ?_ReadIntFromEeprom 00B3  
                                 ?_strtol 0026                          ?_DATAEE_ReadByte 0001  
              GetMcuFwVersion@compileData 0069              __size_of_keepAliveSignalUart 000C  
                      SynthReadData@TxMsg 0060                   __end_of_GetMcuFwVersion 25C4  
                                 _OSCCON2 000FD2                                   _TBLPTRH 000FF7  
                                 _TBLPTRL 000FF6                                   _TBLPTRU 000FF8  
                                 _OSCTUNE 000F9B                                   _SPBRGH1 000FB0  
                     ??_ReadIntFromEeprom 00B7                                   _DacInit 25C4  
                   GetIntFromUartData@num 007A                          GetMcuRunTime@idx 006D  
                            ??_AdcConvert 00B3                      ??_FlashReadCondition 0024  
                          _FlashEreaseMem 2EC6                          _FLASH_EraseBlock 3462  
          __size_of_GroupStatusAndVersion 0024                            _SwSpi_Data_Pin 2DC4  
                    DATAEE_WriteByte@bAdd 0019             __end_of_GroupStatusAndVersion 36C8  
                 __end_of_Make32bitsArray 2D6C                                ??_GroupDAC 0030  
                              ??_GroupAdc 0030                             _SetMcuRunTime 3168  
                      _GetIntFromUartData 138E                        FlashReadUart@TxMsg 006C  
                   GroupSynthesizers@data 01C2                                   __Hparam 0000  
                              ??_ResetMcu 002C                 __size_of_WriteUartMessage 0036  
                            ?_BlinkOkLeds 0001                                   __Lparam 0000  
                            _cntRegUpdate 003A                          UpdateRxFreq@data 002C  
                   SendAckMessage@inGroup 0025                          ?_readUartMessage 0001  
                  GroupControlMcu@request 00BF                                 ?_testLeds 0001  
               __end_of_ReadIntFromEeprom 17B6                       ?_GetIntFromUartData 0066  
                         __size_of___ftge 0090                           __size_of___lmul 0056  
                                 ___ftadd 11E0                                   ___ftdiv 1CD8  
                                 ___ftneg 36EC                                   ___lldiv 2896  
                         __size_of___wmul 0026                                   ___ftmul 1BE2  
                                 ___llmod 2AD8                                   ___ftsub 31AC  
                                 ___fttol 1AEA                FlashSampleWrite@rotateLeft 0062  
                            crc8@dataSize 001A                  __size_of_ClearMcuRunTime 0014  
                                 ___lwmod 31EE                      AdcConvert@_adcResult 00B5  
                            __psmallconst 0600                                ??___altoft 008B  
                  __end_of_FLASH_ReadByte 3894                           __CFG_STVREN$OFF 000000  
              SWSPI_Synth_send_bits@count 0084                     _mcuRunTimeIn5SecTicks 00C0  
                                 _crcCalc 00CD                                   _channel 00D4  
                                 __pcinit 2992                                ??___awtoft 0023  
                              ??___ftpack 001D                         __end_of_eval_poly 2060  
                         __size_of_memset 002C                                   __ramtop 0600  
                 __size_of_SendAckMessage 0052                                ??___lltoft 0024  
                 __size_of_SetChannelMode 0030                                   __ptext0 2B3E  
                                 __ptext1 0A66                                   __ptext2 35E0  
                                 __ptext3 3734                                   __ptext4 30E0  
                                 __ptext5 3050                                   __ptext6 36A4  
                                 __ptext7 3496                                   __ptext8 23F8  
                                 __ptext9 280C                                   crc8@crc 001D  
                      __end_of_AdcConvert 11E0                                ??___lwtoft 0023  
                               _T0CONbits 000FD5                         BlinkErrorLeds@idx 001C  
                         __size_of_strtol 01D6                     _OSCILLATOR_Initialize 38D0  
                            __size_of_abs 0028                                   _isalpha 3608  
                            __size_of_exp 01F2                              __size_of_log 0122  
                                 _isdigit 3754                              __size_of_pow 017C  
                      _EUSART1_Initialize 33C2                  ??_PIN_MANAGER_Initialize 0018  
                                 _isspace 3658                 StoreIntInEeprom@numOfByes 0026  
                                 _isupper 3772                          UpdateTxFreq@data 0087  
                                 _request 00D0                           GroupDAC@request 00BF  
                         ??_SynthReadData 0026                      ??_GetIntFromUartData 006E  
                  __end_of_FlashEreaseMem 2F18                __size_of_SYSTEM_Initialize 001A  
                 ?_SwSpi_Set_Dac_Sync_Pin 0001                    __end_of_SwSpi_Data_Pin 2E1A  
                 StoreIntInEeprom@address 0025                                   _toupper 3846  
                    end_of_initialization 29F6                             ?_UpdateRxFreq 002C  
                                 exp@sign 00A1                             ?_UpdateTxFreq 0087  
                     ?_EUSART1_Initialize 0001                          ??_BlinkErrorLeds 0018  
                            ?_EepromWrite 001B                     _SWSPI_Synth_send_bits 21E2  
               __size_of_SwSpi_Set_CE_Pin 003C                            ?_SetMcuRunTime 0001  
                                 memset@c 001A                                   memset@n 001C  
                                 memset@p 001E                             __Lmediumconst 0000  
                         ___lldiv@divisor 001C                      __end_of_SetMcuSystem 3940  
                                 pow@sign 00AE                           ___lldiv@counter 0024  
                        ??_SetSynthRxOper 0030                         ?_GroupFlashMemory 01C2  
                        AdcConvert@adcRes 00BC                          ??_SetSynthTxOper 0030  
                      __end_of_SYNTH_REGS 0635                                ??_testLeds 002C  
                    SWSPI_send_word@datac 002B                                _rxMsgQueue 00D9  
                                 postdec1 000FE5                                   postdec2 000FDD  
                      ??_GroupFlashMemory 00BF                                   postinc0 000FEE  
                                 postinc2 000FDE                     __size_of_EUSART1_Read 0044  
                     _InitRxMessageParams 35E0                               testLeds@idx 002D  
                    __size_of_DacSetValue 000C                 __size_of_FlashSampleWrite 00FA  
                  __size_of_GetMcuRunTime 00E4                      ??_EUSART1_Initialize 0018  
   __end_of_InitSystemApplicationManagers 3846    __size_of_InitSystemApplicationManagers 0016  
           _InitSystemApplicationManagers 3830                           ?_FLASH_ReadByte 0018  
                                 strtol@a 0061                                   strtol@c 0065  
                                 strtol@s 0026                  _TMR0_SetInterruptHandler 3940  
                            ??_EepromRead 0019                          _StoreIntInEeprom 32E4  
                        ?_GetMcuFwVersion 0001                            ZeroArray@array 0020  
          __end_of_SwSpi_Set_Dac_Sync_Pin 37E8                              strtol@endptr 0028  
           FLASH_WriteBlock@flashWrBufPtr 0021                        GetMcuRunTime@TxMsg 0060  
                    ?_InitRxMessageParams 0001                           ?_FlashEreaseMem 0001  
                     EUSART1_Write@txData 0018                           ?_SwSpi_Data_Pin 0018  
                   __end_of_ZeroBitsArray 37CC                            ??_UpdateRxFreq 002E  
                          ??_UpdateTxFreq 0030                  __end_of_DATAEE_WriteByte 33C2  
             __end_of_SWSPI_DAC_send_bits 2DC4                  FLASH_EraseBlock@baseAddr 0018  
                        ?_Make32bitsArray 0018                               ___ftdiv@exp 0067  
                            _EUSART1_Read 3124                      _CheckFlashPrecentage 229C  
                       FLASH_WriteBlock@i 002C                        __end_of_EepromRead 3954  
                             ___ftmul@exp 0072                   ?_SwSpi_Set_Synth_Le_Pin 0018  
                   PLLUartInitialize@data 0018                __size_of_ReadIntFromEeprom 0130  
              ?_SetConversionResultFormat 002C              __end_of_INTERRUPT_Initialize 395E  
                            ?_InitRxSynth 0001                              ?_InitTxSynth 0001  
                          __end_of___ftge 280C              InitAdcApplicationMgr@channel 0018  
                          __end_of___lmul 2EC6                            __end_of___wmul 36A4  
                     GroupControlMcu@data 01C2                             __pidataCOMRAM 3954  
                       __size_of_TMR0_ISR 0092                            _ADC_Initialize 381A  
                        _FLASH_WriteBlock 2126                    ?_OSCILLATOR_Initialize 0001  
                          __end_of_memset 35E0                                floor@expon 0097  
                       ??_ClearMcuRunTime 0018                            __end_of_strtol 102A  
                     start_initialization 2992                                eval_poly@d 0087  
                              eval_poly@n 0089                                eval_poly@x 0084  
                             _SynthRxOper 0044                          BlinkOkLeds@state 001B  
                __size_of_TMR0_Initialize 0034                                ldexp@value 0090  
                             _SynthTxOper 0045           __size_of_PIN_MANAGER_Initialize 0048  
                             __end_of_abs 3658                     ??_InitRxMessageParams 0024  
                             __end_of_exp 0E54                               __end_of_log 18D8  
                             __end_of_pow 1686                  AdcConvert@_adcResult_340 00B7  
                           _GetMcuRunTime 1DC0                    ?_SWSPI_Synth_send_bits 0022  
                         ??_SetMcuRunTime 0021                     __end_of_EUSART1_Write 326C  
                  __size_of_PLLInitialize 000E                                frexp@value 0018  
                         ___llmod@divisor 001C                     ?_CheckFlashPrecentage 0001  
                         ___llmod@counter 0020                       DATAEE_ReadByte@bAdd 0018  
                __size_of_PIN_MANAGER_IOC 0004                    __size_of_SwSpi_Clk_Pin 0056  
                     SendAckMessage@TxMsg 0026            __end_of_SwSpi_Set_Synth_Le_Pin 32E4  
                     _keepAliveSignalUart 391E                         __size_of_GroupDAC 0020  
                        _WriteUartMessage 33F8                         __size_of_GroupAdc 0048  
                  __size_of_FlashReadUart 03C2                                  ??___ftge 001E  
                                ??___lmul 0022                   SendAckMessage@inRequest 0024  
                                ??___wmul 001C                 GetIntFromUartData@idxData 0086  
                       __size_of_ResetMcu 000E                      __size_of_BlinkOkLeds 005E  
                 SetAdcOperationMode@data 002C                    __end_of_ADC_Initialize 3830  
       __end_of_SetConversionResultFormat 3912                               __pdataBANK0 00ED  
                 SWSPI_DAC_send_bits@data 001A                                  ??_memset 001E  
                __size_of_GroupControlMcu 0030               FLASH_EraseBlock@GIEBitValue 001C  
                          _SendAckMessage 2F18                            _SetChannelMode 3526  
                __end_of_FLASH_EraseBlock 3496                        _SendSystemStartAck 392A  
                __size_of_SWSPI_send_word 009A                                  ??_strtol 002C  
                          _eusart1RxCount 00D3                         __size_of___altoft 007A  
                               _ZeroArray 3790                           DacInit@dacInput 00BC  
                       __size_of___awtoft 0038                         __size_of___ftpack 00AE  
                    ?_keepAliveSignalUart 0001                         __size_of___lltoft 005C  
                             __pbssCOMRAM 0030                         __size_of___lwtoft 0024  
           __size_of_EUSART1_Transmit_ISR 0038                             __pcstackBANK0 0060  
                           __pcstackBANK1 01C2                              _isalpha$3022 001C  
                     ?_SendSystemStartAck 0001                              _isdigit$3025 0019  
                          ?_GetMcuRunTime 0001                            BlinkOkLeds@idx 001C  
                                ?_DacInit 0001                     __size_of_SetMcuSystem 000A  
                        _SwSpi_Set_CE_Pin 326C              __size_of_EUSART1_Receive_ISR 002E  
           SWSPI_Synth_send_bits@bitArray 0060                   _DAC_DEFAULT_INIT_VALUES 0642  
                    __size_of_EepromWrite 000E                     _TMR0_InterruptHandler 00FD  
                               __pnvBANK0 00FD                  __size_of_TMR0_StartTimer 0004  
                  _PIN_MANAGER_Initialize 3098                      ??_SendSystemStartAck 002C  
                   _InitAdcApplicationMgr 38A4                                 __pintcode 0008  
                  __end_of_SendAckMessage 2F6A                                 __ptext100 11E0  
                               __ptext101 36EC                                 __ptext110 38EC  
                               __ptext102 1CD8                                 __ptext111 3556  
                               __ptext103 331C                                 __ptext104 2CB8  
                               __ptext113 265A                                 __ptext105 3710  
                               __ptext114 31EE                                 __ptext106 234A  
                               __ptext115 3962                                 __ptext107 19F0  
                               __ptext116 3966                                 __ptext108 2126  
                               __ptext117 3354                                 __ptext109 3462  
                                ?___ftadd 0078                                 __ptext118 3586  
                               __ptext119 0000                                  ?___ftdiv 0029  
                  __end_of_SetChannelMode 3556                                  ?___ftneg 0018  
                                ?___lldiv 0018                                  ?___ftmul 0069  
                                ?___llmod 0018                                  ?___ftsub 0084  
                                ?___fttol 0078                          _FlashSampleWrite 19F0  
                                ?___lwmod 0001                           ?_ADC_Initialize 0001  
                    __end_of_UpdateRxFreq 36EC                         __size_of_testLeds 006A  
                           _PLLInitialize 38DE             SetConversionResultFormat@data 002C  
                    __end_of_UpdateTxFreq 2896               __size_of_keepAliveSignalLed 0018  
            ??_INTERRUPT_InterruptManager 0006                          __CFG_PRICLKEN$ON 000000  
                              ?_ZeroArray 0020                               __smallconst 0600  
                   ??_keepAliveSignalUart 002C                                  _BAUDCON1 000FB8  
                           _SwSpi_Clk_Pin 2E1A                                  ?_isalpha 0001  
                                ?_isdigit 0001                                 _eval_poly 1F86  
                     BlinkErrorLeds@state 001B                           _TimerOneSecFlag 00D8  
                                ?_isspace 0001                              _SetMcuSystem 3936  
                                ?_isupper 0001                             _FlashReadUart 06A4  
                       _PLLUartInitialize 396A              __size_of_SetAdcOperationMode 000C  
                          __size_of_make8 005C                            __size_of_floor 00E2  
                          __size_of_ldexp 00C6                            __size_of_frexp 0090  
                      ?_PLLUartInitialize 0018                  __size_of_DATAEE_ReadByte 0014  
                                ?_toupper 0001                          _conversionFormat 00D5  
                    _INTERRUPT_Initialize 395A            FLASH_WriteBlock@blockStartAddr 0027  
             __size_of_FlashReadCondition 0118                         ??_TMR0_Initialize 001A  
                  ??_CheckFlashPrecentage 0078                            ___wmul@product 001C  
                                _LATAbits 000F89                                  _LATBbits 000F8A  
                                _LATCbits 000F8B                                  _LATDbits 000F8C  
                __end_of_StoreIntInEeprom 331C                       ??_PLLUartInitialize 001A  
          FlashReadUart@numOfSampleToRead 002C                                  _PIE1bits 000F9D  
                                _PIE2bits 000FA0                     _GroupStatusAndVersion 36A4  
                       _GroupSynthesizers 23F8       __size_of_INTERRUPT_InterruptManager 00D4  
              ??_TMR0_SetInterruptHandler 001A                      Make32bitsArray@array 0018  
                                _PIR1bits 000F9E                          ??_FLASH_ReadByte 001C  
                                _PIR2bits 000FA1                                 _rxMsgData 01AE  
                                i2u532_40 3208                       SWSPI_send_word@data 0026  
                      ?_GroupSynthesizers 01C2                                  _RCONbits 000FD0  
                        __CFG_WDTPS$16384 000000                                 make8@data 0018  
                                _TMR0_ISR 265A                           ?_SendAckMessage 0024  
                      UpdateTxFreq@retVal 0089                           ?_SetChannelMode 002C  
                          ?_PLLInitialize 0001                         ??_PIN_MANAGER_IOC 0001  
                    __size_of_InitRxSynth 004C                       ??_GroupSynthesizers 0030  
                  GetIntFromUartData@data 0066                   SWSPI_send_word@dataSize 002A  
                              _ADCON0bits 000FC2                      __size_of_InitTxSynth 004C  
                __size_of_readUartMessage 01FC                         ___wmul@multiplier 0018  
                          ?_SwSpi_Clk_Pin 0018                          ??_FlashEreaseMem 002C  
               __end_of_PLLUartInitialize 396C                        __end_of_channelArr 0651  
                        ??_SwSpi_Data_Pin 0019                 __size_of_GroupFlashMemory 0044  
                              ?_eval_poly 0084                            ?_FlashReadUart 002C  
                       ??_GroupControlMcu 0030                           ??_GetMcuRunTime 0025  
                   DATAEE_WriteByte@bData 0018                              _isspace$3028 0019  
                       ??_SWSPI_send_word 002B                                DacInit@idx 00BE  
                              _DAC_ADDRES 0651               __size_of_GetIntFromUartData 017C  
                       ___lmul@multiplier 001A                   FlashReadCondition@TxMsg 0060  
                             _INTCON2bits 000FF1                     __end_of_SynthReadData 2A6E  
                               copy_data0 29A6                                 copy_data1 29C6  
                   ?_INTERRUPT_Initialize 0001                          __size_of_DacInit 0096  
                       ?_DATAEE_WriteByte 0018                 __end_of_GroupSynthesizers 2494  
                   EUSART1_Read@readValue 0019                  __end_of_FLASH_WriteBlock 21E2  
                                _GroupDAC 3734                        ??_DATAEE_WriteByte 0019  
                                _GroupAdc 3050                                 frexp@eptr 001B  
                              _EECON1bits 000FA6                                  __Hrparam 0000  
                  ?_InitAdcApplicationMgr 0001                                  _ResetMcu 38C2  
                           ??_DacSetValue 002E                               _readAddress 00F9  
                                __Lrparam 0000                         _ADC_GetConversion 3556  
                     FlashReadUart@offset 00BD                           _ClearMcuRunTime 386E  
                       __CFG_P2BMX$PORTD2 000000               ??_SetConversionResultFormat 002E  
                 ??_OSCILLATOR_Initialize 0018                        ?_ADC_GetConversion 0018  
                       ??_TMR0_StartTimer 0018                          __size_of___ftadd 01AE  
                        __size_of___ftdiv 00E8                      _numOfValidateSamples 0030  
                        __size_of___ftneg 0024                          __size_of___lldiv 0082  
                                ___altoft 2918                          __size_of___ftmul 00F6  
                        __size_of___llmod 0066                          __size_of___ftsub 0042  
                        __size_of___fttol 00F8               __size_of_EUSART1_Initialize 0036  
                        __size_of___lwmod 0042                           GroupAdc@request 00BF  
                                ___awtoft 331C                             crc8@dataArray 0018  
                                ___ftpack 234A                          _numOfReadSamples 003C  
                                ___lltoft 2CB8                         _FLASH_IsWriteDone 38EC  
                     WriteUartMessage@idx 001E                                  ___lwtoft 3710  
                             ??_ZeroArray 0024                  GetMcuRunTime@tempRunTime 0069  
                     ??_ADC_GetConversion 001A                                  _exp$3318 009C  
                            _isupper$3031 0019                        ?_FLASH_IsWriteDone 0001  
                                _dataSize 00CF                     SwSpi_Clk_Pin@cPinMode 0018  
                __end_of_WriteUartMessage 342E                          __size_of_isalpha 0028  
                                _crcGiven 00CC                          __size_of_isdigit 001E  
                 ??_SWSPI_Synth_send_bits 0026                    SwSpi_Data_Pin@cPinMode 0018  
                        __size_of_isspace 0026                                  __ptext10 32E4  
                                __ptext11 38B4                                  __ptext20 36C8  
                                __ptext12 338C                                  __ptext21 2A04  
                                __ptext13 138E                                  __ptext30 3882  
                                __ptext22 34C6                                  __ptext14 0E54  
                                __ptext31 18D8                                  __ptext23 34F6  
                                __ptext15 3846                                  __ptext40 391E  
                                __ptext32 2EC6                                  __ptext24 396A  
                                __ptext16 3658                                  __ptext41 3802  
                                __ptext33 38FA                                  __ptext25 1DC0  
                                __ptext17 3754                                  __ptext50 381A  
                                __ptext42 3936                                  __ptext34 2A6E  
                                __ptext26 2896                                  __ptext18 3608  
                                __ptext51 3168                                  __ptext43 37E8  
                                __ptext35 38C2                                  __ptext27 252E  
                                __ptext19 3772                                  __ptext60 395E  
                                __ptext52 2AD8                                  __ptext44 342E  
                                __ptext36 3906                                  __ptext28 06A4  
                                __ptext61 38DE                                  __ptext53 392A  
                                __ptext45 3940                                  __ptext37 3526  
                                __ptext29 3630                                  __ptext70 37CC  
                                __ptext62 2FB8                                  __ptext54 2F18  
                                __ptext46 3098                                  __ptext38 3912  
                                __ptext71 21E2                                  __ptext63 3004  
                                __ptext55 2F6A                                  __ptext47 38D0  
                                __ptext39 3124                                  __ptext80 394A  
                                __ptext72 37AE                                  __ptext64 326C  
                                __ptext56 3790                                  __ptext48 395A  
                                __ptext81 385A                                  __ptext73 35B4  
                                __ptext65 38A4                                  __ptext57 33F8  
                                __ptext49 33C2                                  __ptext90 2060  
                                __ptext82 386E                                  __ptext74 2D14  
                                __ptext66 25C4                                  __ptext58 3230  
                                __ptext91 1EA4                                  __ptext83 229C  
                                __ptext75 2D6C                                  __ptext67 2494  
                                __ptext59 3830                                  __ptext92 26EC  
                                __ptext84 2BA0                                  __ptext76 2DC4  
                                __ptext68 2C5C                                  __ptext93 1AEA  
                                __ptext85 2BFE                                  __ptext77 2E1A  
                                __ptext69 32A8                                  __ptext94 277C  
                                __ptext86 102A                                  __ptext78 1686  
                                __ptext95 2918                                  __ptext87 150A  
                                __ptext79 2E70                                  __ptext96 1F86  
                                __ptext88 17B6                                  __ptext97 367E  
                                __ptext89 0C62                                  __ptext98 1BE2  
                                __ptext99 31AC                          __size_of_isupper 001E  
            SWSPI_Synth_send_bits@phrType 0085                  SwSpi_Set_CE_Pin@cPinMode 0018  
                                _pow$3316 00A8                                  _pow$3317 00AB  
                     ??_FLASH_IsWriteDone 0018               DATAEE_WriteByte@GIEBitValue 001A  
                        __size_of_toupper 0014                  __size_of_GetMcuFwVersion 0096  
                           __size_of_crc8 004E                             __size_of_main 0062  
                  ?_GroupStatusAndVersion 01C2                      __end_of_SYNTH_ADDRES 0642  
                                _msgCount 00CB              _TMR0_DefaultInterruptHandler 000000  
                       ??_DATAEE_ReadByte 0018                 __end_of_ADC_GetConversion 3586  
            __size_of_SWSPI_DAC_send_bits 0058                     __size_of_UpdateRxFreq 0024  
                     Make32bitsArray@data 001A                     __size_of_UpdateTxFreq 008A  
                      SWSPI_send_word@idx 002C                               _groupsArray 00ED  
                         ??_PLLInitialize 0030                                  _testLeds 2A6E  
                 __size_of_BlinkErrorLeds 005E                                  int$flags 0048  
                __size_of_Make32bitsArray 0058                                strtol@base 002A  
                              strtol@sign 0060                 __end_of_FLASH_IsWriteDone 38FA  
      __end_of_INTERRUPT_InterruptManager 00DC                _INTERRUPT_InterruptManager 0008  
                  __size_of_ZeroBitsArray 001E                           EepromWrite@data 001B  
                         ??_SwSpi_Clk_Pin 0019                       __end_of_DacSetValue 3906  
                     _EUSART1_Receive_ISR 3586                  __end_of_SwSpi_Set_CE_Pin 32A8  
                       ?_FLASH_EraseBlock 0018               __end_of_InitRxMessageParams 3608  
                                exp@coeff 0655                   __size_of_SetSynthRxOper 0030  
                              _MEMORY_ISR 3966                           ??_FlashReadUart 0060  
                                log@coeff 0673                   __size_of_SetSynthTxOper 0030  
              __size_of_PLLUartInitialize 0002                    SWSPI_send_word@phrType 002E  
                      ??_FLASH_EraseBlock 001C                                _INTCONbits 000FF2  
                             ??_eval_poly 008B                               _sampleArray 016E  
                             _sampleCount 00C6                                  isalpha@c 001D  
                                isdigit@c 001A                    ??_INTERRUPT_Initialize 0018  
                                memset@p1 0018                         ??_readUartMessage 01C5  
               _SetConversionResultFormat 3906                  __end_of_FlashSampleWrite 1AEA  
                                intlevel2 0000                              _UpdateRxFreq 36C8  
                            _UpdateTxFreq 280C                      ?_EUSART1_Receive_ISR 0001  
                   __end_of_SetMcuRunTime 31AC                          ___lwmod@dividend 0001  
              __size_of_GroupSynthesizers 009C                                  isspace@c 001A  
                        ___lldiv@dividend 0018                   ?_PIN_MANAGER_Initialize 0001  
                 __end_of_ClearMcuRunTime 3882                                _RCSTA1bits 000FAB  
                                isupper@c 001A                  ReadIntFromEeprom@address 01CC  
            __end_of_EUSART1_Transmit_ISR 338C                             ??_BlinkOkLeds 0018  
                        ??_ADC_Initialize 0018                        Make32bitsArray@idx 0020  
                       _TimerSamplingFlag 00D7                             AdcConvert@idx 00BE  
                     _SetAdcOperationMode 3912                             _isReWriteDone 00CA  
                    SwSpi_Clk_Pin@phrType 0019                            InitRxSynth@idx 002F  
                   SwSpi_Data_Pin@phrType 0019                   SwSpi_Set_CE_Pin@phrType 0019  
                  __size_of_EUSART1_Write 003C                  ??_SwSpi_Set_Dac_Sync_Pin 0018  
                       EepromRead@address 0019                          ___lldiv@quotient 0020  
                        _GroupFlashMemory 30E0                           ___lwmod@divisor 0003  
                         _TMR0_Initialize 342E                           ___lwmod@counter 0005  
                                toupper@c 0018                ReadIntFromEeprom@numOfByes 00B3  
                       __CFG_T3CMX$PORTC0 000000                      ?_SetAdcOperationMode 002C  
                 ReadIntFromEeprom@retVal 01CD                            InitTxSynth@idx 002F  
                           ??_EepromWrite 001C                             _ZeroBitsArray 37AE  
                              _AdcConvert 102A                     ??_EUSART1_Receive_ISR 0001  
          __end_of_PIN_MANAGER_Initialize 30E0              GetIntFromUartData@dataRegArr 0070  
                       __CFG_FOSC$INTIO67 000000                           _PIN_MANAGER_IOC 3962  
                       ?_StoreIntInEeprom 0021                          ??_SendAckMessage 0025  
              __size_of_ADC_GetConversion 0030                          ??_SetChannelMode 002E  
                      ??_StoreIntInEeprom 0028                               _DacSetValue 38FA  

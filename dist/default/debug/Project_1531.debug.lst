

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Mar 28 15:44:09 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1
    75                           	psect	text55,global,reloc=2,class=CODE,delta=1
    76                           	psect	text56,global,reloc=2,class=CODE,delta=1
    77                           	psect	text57,global,reloc=2,class=CODE,delta=1
    78                           	psect	text58,global,reloc=2,class=CODE,delta=1
    79                           	psect	text59,global,reloc=2,class=CODE,delta=1
    80                           	psect	text60,global,reloc=2,class=CODE,delta=1
    81                           	psect	text61,global,reloc=2,class=CODE,delta=1
    82                           	psect	text62,global,reloc=2,class=CODE,delta=1
    83                           	psect	text63,global,reloc=2,class=CODE,delta=1
    84                           	psect	text64,global,reloc=2,class=CODE,delta=1
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1
    86                           	psect	text66,global,reloc=2,class=CODE,delta=1
    87                           	psect	text67,global,reloc=2,class=CODE,delta=1
    88                           	psect	text68,global,reloc=2,class=CODE,delta=1
    89                           	psect	text69,global,reloc=2,class=CODE,delta=1
    90                           	psect	text70,global,reloc=2,class=CODE,delta=1
    91                           	psect	text71,global,reloc=2,class=CODE,delta=1
    92                           	psect	text72,global,reloc=2,class=CODE,delta=1
    93                           	psect	text73,global,reloc=2,class=CODE,delta=1,group=1
    94                           	psect	text74,global,reloc=2,class=CODE,delta=1
    95                           	psect	text75,global,reloc=2,class=CODE,delta=1
    96                           	psect	text76,global,reloc=2,class=CODE,delta=1
    97                           	psect	text77,global,reloc=2,class=CODE,delta=1
    98                           	psect	text78,global,reloc=2,class=CODE,delta=1,group=1
    99                           	psect	text79,global,reloc=2,class=CODE,delta=1
   100                           	psect	text80,global,reloc=2,class=CODE,delta=1
   101                           	psect	text81,global,reloc=2,class=CODE,delta=1
   102                           	psect	text82,global,reloc=2,class=CODE,delta=1
   103                           	psect	text83,global,reloc=2,class=CODE,delta=1
   104                           	psect	text84,global,reloc=2,class=CODE,delta=1
   105                           	psect	text85,global,reloc=2,class=CODE,delta=1,group=1
   106                           	psect	text86,global,reloc=2,class=CODE,delta=1,group=1
   107                           	psect	text87,global,reloc=2,class=CODE,delta=1,group=1
   108                           	psect	text88,global,reloc=2,class=CODE,delta=1,group=1
   109                           	psect	text89,global,reloc=2,class=CODE,delta=1,group=1
   110                           	psect	text90,global,reloc=2,class=CODE,delta=1,group=1
   111                           	psect	text91,global,reloc=2,class=CODE,delta=1,group=1
   112                           	psect	text92,global,reloc=2,class=CODE,delta=1,group=1
   113                           	psect	text93,global,reloc=2,class=CODE,delta=1,group=1
   114                           	psect	text94,global,reloc=2,class=CODE,delta=1,group=1
   115                           	psect	text95,global,reloc=2,class=CODE,delta=1,group=1
   116                           	psect	text96,global,reloc=2,class=CODE,delta=1,group=1
   117                           	psect	text97,global,reloc=2,class=CODE,delta=1,group=1
   118                           	psect	text98,global,reloc=2,class=CODE,delta=1,group=1
   119                           	psect	text99,global,reloc=2,class=CODE,delta=1,group=1
   120                           	psect	text100,global,reloc=2,class=CODE,delta=1,group=1
   121                           	psect	text101,global,reloc=2,class=CODE,delta=1,group=1
   122                           	psect	text102,global,reloc=2,class=CODE,delta=1,group=1
   123                           	psect	text103,global,reloc=2,class=CODE,delta=1,group=1
   124                           	psect	text104,global,reloc=2,class=CODE,delta=1,group=1
   125                           	psect	text105,global,reloc=2,class=CODE,delta=1
   126                           	psect	text106,global,reloc=2,class=CODE,delta=1
   127                           	psect	text107,global,reloc=2,class=CODE,delta=1
   128                           	psect	text108,global,reloc=2,class=CODE,delta=1
   129                           	psect	text109,global,reloc=2,class=CODE,delta=1
   130                           	psect	text110,global,reloc=2,class=CODE,delta=1
   131                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   132                           	psect	text112,global,reloc=2,class=CODE,delta=1
   133                           	psect	text113,global,reloc=2,class=CODE,delta=1,group=1
   134                           	psect	text114,global,reloc=2,class=CODE,delta=1
   135                           	psect	text115,global,reloc=2,class=CODE,delta=1
   136                           	psect	text116,global,reloc=2,class=CODE,delta=1
   137                           	psect	text117,global,reloc=2,class=CODE,delta=1
   138                           	psect	text118,global,reloc=2,class=CODE,delta=1
   139                           	psect	text119,global,reloc=2,class=CODE,delta=1
   140                           	psect	text120,global,reloc=2,class=CODE,delta=1
   141                           	psect	text121,global,reloc=2,class=CODE,delta=1
   142                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   143                           	psect	text122,global,reloc=2,class=CODE,delta=1
   144                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   145                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   146  0000                     
   147                           ; Version 1.45
   148                           ; Generated 16/11/2017 GMT
   149                           ; 
   150                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   151                           ; All rights reserved.
   152                           ; 
   153                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   154                           ; 
   155                           ; Redistribution and use in source and binary forms, with or without modification, are
   156                           ; permitted provided that the following conditions are met:
   157                           ; 
   158                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   159                           ;        conditions and the following disclaimer.
   160                           ; 
   161                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   162                           ;        of conditions and the following disclaimer in the documentation and/or other
   163                           ;        materials provided with the distribution.
   164                           ; 
   165                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   166                           ;        software without specific prior written permission.
   167                           ; 
   168                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   169                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   170                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   171                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   172                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   173                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   174                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   175                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   176                           ; 
   177                           ; 
   178                           ; Code-generator required, PIC18F45K22 Definitions
   179                           ; 
   180                           ; SFR Addresses
   181  0000                     
   182 ;; Function _TMR0_DefaultInterruptHandler is unused but had its address taken
   183  0000                     
   184                           	psect	idataCOMRAM
   185  004452                     __pidataCOMRAM:
   186                           	opt stack 0
   187                           
   188                           ;initializer for _writeAddress
   189  004452  4580               	dw	17792
   190  004454  0000               	dw	0
   191                           
   192                           ;initializer for _synthLdTxCnt
   193  004456  02                 	db	2
   194                           
   195                           ;initializer for _synthLdRxCnt
   196  004457  02                 	db	2
   197                           
   198                           ;initializer for _SynthRxOper
   199  004458  01                 	db	1
   200                           
   201                           ;initializer for _SynthTxOper
   202  004459  01                 	db	1
   203                           
   204                           	psect	idataBANK1
   205  0043B0                     __pidataBANK1:
   206                           	opt stack 0
   207                           
   208                           ;initializer for _groupsArray
   209  0043B0  1C                 	db	low _GroupControlMcu
   210  0043B1  40                 	db	high _GroupControlMcu
   211  0043B2  A2                 	db	low _GroupStatusAndVersion
   212  0043B3  41                 	db	high _GroupStatusAndVersion
   213  0043B4  52                 	db	low _GroupAdc
   214  0043B5  42                 	db	high _GroupAdc
   215  0043B6  E4                 	db	low _GroupSynthesizers
   216  0043B7  32                 	db	high _GroupSynthesizers
   217  0043B8  FC                 	db	low _GroupFlashMemory
   218  0043B9  3D                 	db	high _GroupFlashMemory
   219  0043BA  80                 	db	low _GroupDAC
   220  0043BB  3F                 	db	high _GroupDAC
   221                           
   222                           ;initializer for _readAddress
   223  0043BC  4580               	dw	17792
   224  0043BE  0000               	dw	0
   225                           
   226                           	psect	smallconst
   227  000600                     __psmallconst:
   228                           	opt stack 0
   229  000600  00                 	db	0
   230  000601                     _SYNTH_REGS:
   231                           	opt stack 0
   232  000601  041C               	dw	1052
   233  000603  0001               	dw	1
   234  000605  300B               	dw	12299
   235  000607  0061               	dw	97
   236  000609  193A               	dw	6458
   237  00060B  00C0               	dw	192
   238  00060D  FCC9               	dw	64713
   239  00060F  1110               	dw	4368
   240  000611  0428               	dw	1064
   241  000613  102D               	dw	4141
   242  000615  00E7               	dw	231
   243  000617  1200               	dw	4608
   244  000619  6076               	dw	24694
   245  00061B  3500               	dw	13568
   246  00061D  0025               	dw	37
   247  00061F  0080               	dw	128
   248  000621  BF84               	dw	49028
   249  000623  0800               	dw	2048
   250  000625  0003               	dw	3
   251  000627  0000               	dw	0
   252  000629  0012               	dw	18
   253  00062B  0000               	dw	0
   254  00062D  0001               	dw	1
   255  00062F  0C00               	dw	3072
   256  000631  0680               	dw	1664
   257  000633  0020               	dw	32
   258  000635                     __end_of_SYNTH_REGS:
   259                           	opt stack 0
   260  000635                     _SYNTH_ADDRES:
   261                           	opt stack 0
   262  000635  04                 	db	4
   263  000636  08                 	db	8
   264  000637  0C                 	db	12
   265  000638  00                 	db	0
   266  000639  10                 	db	16
   267  00063A  00                 	db	0
   268  00063B  14                 	db	20
   269  00063C  00                 	db	0
   270  00063D  00                 	db	0
   271  00063E  00                 	db	0
   272  00063F  18                 	db	24
   273  000640  1C                 	db	28
   274  000641  00                 	db	0
   275  000642                     __end_of_SYNTH_ADDRES:
   276                           	opt stack 0
   277  000642                     _channelArr:
   278                           	opt stack 0
   279  000642  04                 	db	4
   280  000643  05                 	db	5
   281  000644  06                 	db	6
   282  000645  07                 	db	7
   283  000646  08                 	db	8
   284  000647  09                 	db	9
   285  000648  0A                 	db	10
   286  000649  0D                 	db	13
   287  00064A  19                 	db	25
   288  00064B                     __end_of_channelArr:
   289                           	opt stack 0
   290  00064B                     _DAC_DEFAULT_INIT_VALUES:
   291                           	opt stack 0
   292  00064B  2344               	dw	9028
   293  00064D  6344               	dw	25412
   294  00064F  A344               	dw	41796
   295  000651  E344               	dw	58180
   296  000653                     __end_of_DAC_DEFAULT_INIT_VALUES:
   297                           	opt stack 0
   298  000653                     _DAC_ADDRES:
   299                           	opt stack 0
   300  000653  02                 	db	2
   301  000654  04                 	db	4
   302  000655  06                 	db	6
   303  000656  08                 	db	8
   304  000657                     __end_of_DAC_ADDRES:
   305                           	opt stack 0
   306  000657                     exp@coeff:
   307                           	opt stack 0
   308  000657  00                 	db	0
   309  000658  80                 	db	128
   310  000659  3F                 	db	63
   311  00065A  72                 	db	114
   312  00065B  31                 	db	49
   313  00065C  3F                 	db	63
   314  00065D  FE                 	db	254
   315  00065E  75                 	db	117
   316  00065F  3E                 	db	62
   317  000660  58                 	db	88
   318  000661  63                 	db	99
   319  000662  3D                 	db	61
   320  000663  95                 	db	149
   321  000664  1D                 	db	29
   322  000665  3C                 	db	60
   323  000666  C5                 	db	197
   324  000667  AE                 	db	174
   325  000668  3A                 	db	58
   326  000669  79                 	db	121
   327  00066A  21                 	db	33
   328  00066B  39                 	db	57
   329  00066C  94                 	db	148
   330  00066D  80                 	db	128
   331  00066E  37                 	db	55
   332  00066F  93                 	db	147
   333  000670  A7                 	db	167
   334  000671  35                 	db	53
   335  000672  56                 	db	86
   336  000673  15                 	db	21
   337  000674  34                 	db	52
   338  000675                     __end_ofexp@coeff:
   339                           	opt stack 0
   340  000675                     log@coeff:
   341                           	opt stack 0
   342  000675  00                 	db	0
   343  000676  00                 	db	0
   344  000677  00                 	db	0
   345  000678  00                 	db	0
   346  000679  80                 	db	128
   347  00067A  3F                 	db	63
   348  00067B  F0                 	db	240
   349  00067C  FF                 	db	255
   350  00067D  BE                 	db	190
   351  00067E  E2                 	db	226
   352  00067F  A9                 	db	169
   353  000680  3E                 	db	62
   354  000681  83                 	db	131
   355  000682  76                 	db	118
   356  000683  BE                 	db	190
   357  000684  AE                 	db	174
   358  000685  2B                 	db	43
   359  000686  3E                 	db	62
   360  000687  3C                 	db	60
   361  000688  C3                 	db	195
   362  000689  BD                 	db	189
   363  00068A  D2                 	db	210
   364  00068B  13                 	db	19
   365  00068C  3D                 	db	61
   366  00068D  78                 	db	120
   367  00068E  D3                 	db	211
   368  00068F  BB                 	db	187
   369  000690                     __end_oflog@coeff:
   370                           	opt stack 0
   371  000690                     STR_1:
   372                           
   373                           ; BSR set to: 0
   374  000690  4D                 	db	77	;'M'
   375  000691  61                 	db	97	;'a'
   376  000692  72                 	db	114	;'r'
   377  000693  20                 	db	32
   378  000694  32                 	db	50	;'2'
   379  000695  38                 	db	56	;'8'
   380  000696  20                 	db	32
   381  000697  32                 	db	50	;'2'
   382  000698  30                 	db	48	;'0'
   383  000699  31                 	db	49	;'1'
   384  00069A  38                 	db	56	;'8'
   385  00069B  00                 	db	0
   386  00069C                     STR_18:
   387                           
   388                           ; BSR set to: 0
   389  00069C  31                 	db	49	;'1'
   390  00069D  35                 	db	53	;'5'
   391  00069E  3A                 	db	58	;':'
   392  00069F  34                 	db	52	;'4'
   393  0006A0  32                 	db	50	;'2'
   394  0006A1  3A                 	db	58	;':'
   395  0006A2  30                 	db	48	;'0'
   396  0006A3  37                 	db	55	;'7'
   397  0006A4  00                 	db	0
   398  0000                     
   399                           ; #config settings
   400  0006A5  00                 	db	0	; dummy byte at the end
   401  0000                     
   402                           	psect	nvCOMRAM
   403  000046                     __pnvCOMRAM:
   404                           	opt stack 0
   405  000046                     _timer0ReloadVal:
   406                           	opt stack 0
   407  000046                     	ds	2
   408                           
   409                           	psect	nvBANK1
   410  0001CC                     __pnvBANK1:
   411                           	opt stack 0
   412  0001CC                     _TMR0_InterruptHandler:
   413                           	opt stack 0
   414  0001CC                     	ds	2
   415  0001CE                     _IOCB5_InterruptHandler:
   416                           	opt stack 0
   417  0001CE                     	ds	2
   418  0001D0                     _IOCB4_InterruptHandler:
   419                           	opt stack 0
   420  0001D0                     	ds	2
   421  0001D2                     _eusart1TxBufferRemaining:
   422                           	opt stack 0
   423  0001D2                     	ds	1
   424  0000                     _ANSELA	set	3896
   425  0000                     _ANSELE	set	3900
   426  0000                     _ANSELD	set	3899
   427  0000                     _ANSELB	set	3897
   428  0000                     _ANSELC	set	3898
   429  0000                     _ADCON0bits	set	4034
   430  0000                     _ADRESH	set	4036
   431  0000                     _ADRESL	set	4035
   432  0000                     _ADCON2	set	4032
   433  0000                     _ADCON1	set	4033
   434  0000                     _ADCON0	set	4034
   435  0000                     _T0CONbits	set	4053
   436  0000                     _T0CON	set	4053
   437  0000                     _TMR0L	set	4054
   438  0000                     _TMR0H	set	4055
   439  0000                     _EEDATA	set	4008
   440  0000                     _EEADR	set	4009
   441  0000                     _EECON2	set	4007
   442  0000                     _EECON1bits	set	4006
   443  0000                     _TABLAT	set	4085
   444  0000                     _TBLPTRL	set	4086
   445  0000                     _TBLPTRH	set	4087
   446  0000                     _TBLPTRU	set	4088
   447  0000                     _IOCBbits	set	3938
   448  0000                     _INTCON2bits	set	4081
   449  0000                     _WPUB	set	3937
   450  0000                     _TRISD	set	3989
   451  0000                     _TRISC	set	3988
   452  0000                     _TRISB	set	3987
   453  0000                     _TRISA	set	3986
   454  0000                     _TRISE	set	3990
   455  0000                     _LATC	set	3979
   456  0000                     _LATB	set	3978
   457  0000                     _LATA	set	3977
   458  0000                     _LATD	set	3980
   459  0000                     _LATE	set	3981
   460  0000                     _RCREG1	set	4014
   461  0000                     _RCSTA1bits	set	4011
   462  0000                     _TXREG1	set	4013
   463  0000                     _SPBRGH1	set	4016
   464  0000                     _SPBRG1	set	4015
   465  0000                     _TXSTA1	set	4012
   466  0000                     _RCSTA1	set	4011
   467  0000                     _BAUDCON1	set	4024
   468  0000                     _PIR1bits	set	3998
   469  0000                     _PIE1bits	set	3997
   470  0000                     _PIR2bits	set	4001
   471  0000                     _PIE2bits	set	4000
   472  0000                     _RCONbits	set	4048
   473  0000                     _OSCTUNE	set	3995
   474  0000                     _OSCCON2	set	4050
   475  0000                     _OSCCON	set	4051
   476  0000                     _LATAbits	set	3977
   477  0000                     _LATDbits	set	3980
   478  0000                     _INTCONbits	set	4082
   479  0000                     _PORTDbits	set	3971
   480  0000                     _LATCbits	set	3979
   481  0000                     _LATBbits	set	3978
   482                           
   483                           	psect	cinit
   484  0033F2                     __pcinit:
   485                           	opt stack 0
   486  0033F2                     start_initialization:
   487                           	opt stack 0
   488  0033F2                     __initialization:
   489                           	opt stack 0
   490                           
   491                           ; Initialize objects allocated to BANK1 (16 bytes)
   492                           ; load TBLPTR registers with __pidataBANK1
   493  0033F2  0EB0               	movlw	low __pidataBANK1
   494  0033F4  6EF6               	movwf	tblptrl,c
   495  0033F6  0E43               	movlw	high __pidataBANK1
   496  0033F8  6EF7               	movwf	tblptrh,c
   497  0033FA  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   498  0033FC  6EF8               	movwf	tblptru,c
   499  0033FE  EE01  F0BC         	lfsr	0,__pdataBANK1
   500  003402  EE10 F010          	lfsr	1,16
   501  003406                     copy_data0:
   502  003406  0009               	tblrd		*+
   503  003408  CFF5 FFEE          	movff	tablat,postinc0
   504  00340C  50E5               	movf	postdec1,w,c
   505  00340E  50E1               	movf	fsr1l,w,c
   506  003410  E1FA               	bnz	copy_data0
   507                           
   508                           ; Initialize objects allocated to COMRAM (8 bytes)
   509                           ; load TBLPTR registers with __pidataCOMRAM
   510  003412  0E52               	movlw	low __pidataCOMRAM
   511  003414  6EF6               	movwf	tblptrl,c
   512  003416  0E44               	movlw	high __pidataCOMRAM
   513  003418  6EF7               	movwf	tblptrh,c
   514  00341A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   515  00341C  6EF8               	movwf	tblptru,c
   516  00341E  EE00  F03E         	lfsr	0,__pdataCOMRAM
   517  003422  EE10 F008          	lfsr	1,8
   518  003426                     copy_data1:
   519  003426  0009               	tblrd		*+
   520  003428  CFF5 FFEE          	movff	tablat,postinc0
   521  00342C  50E5               	movf	postdec1,w,c
   522  00342E  50E1               	movf	fsr1l,w,c
   523  003430  E1FA               	bnz	copy_data1
   524                           
   525                           ; Clear objects allocated to BANK2 (70 bytes)
   526  003432  EE02  F000         	lfsr	0,__pbssBANK2
   527  003436  0E46               	movlw	70
   528  003438                     clear_0:
   529  003438  6AEE               	clrf	postinc0,c
   530  00343A  06E8               	decf	wreg,f,c
   531  00343C  E1FD               	bnz	clear_0
   532                           
   533                           ; Clear objects allocated to BANK1 (188 bytes)
   534  00343E  EE01  F000         	lfsr	0,__pbssBANK1
   535  003442  0EBC               	movlw	188
   536  003444                     clear_1:
   537  003444  6AEE               	clrf	postinc0,c
   538  003446  06E8               	decf	wreg,f,c
   539  003448  E1FD               	bnz	clear_1
   540                           
   541                           ; Clear objects allocated to BANK0 (11 bytes)
   542  00344A  EE00  F0F0         	lfsr	0,__pbssBANK0
   543  00344E  0E0B               	movlw	11
   544  003450                     clear_2:
   545  003450  6AEE               	clrf	postinc0,c
   546  003452  06E8               	decf	wreg,f,c
   547  003454  E1FD               	bnz	clear_2
   548                           
   549                           ; Clear objects allocated to COMRAM (13 bytes)
   550  003456  EE00  F031         	lfsr	0,__pbssCOMRAM
   551  00345A  0E0D               	movlw	13
   552  00345C                     clear_3:
   553  00345C  6AEE               	clrf	postinc0,c
   554  00345E  06E8               	decf	wreg,f,c
   555  003460  E1FD               	bnz	clear_3
   556  003462                     end_of_initialization:
   557                           	opt stack 0
   558  003462                     __end_of__initialization:
   559                           	opt stack 0
   560  003462  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   561  003464  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   562  003466  0E00               	movlw	low (__Lmediumconst shr (0+16))
   563  003468  6EF8               	movwf	tblptru,c
   564  00346A  0100               	movlb	0
   565  00346C  EFB3  F01A         	goto	_main	;jump to C main() function
   566                           tblptru	equ	0xFF8
   567                           tblptrh	equ	0xFF7
   568                           tblptrl	equ	0xFF6
   569                           tablat	equ	0xFF5
   570                           postinc0	equ	0xFEE
   571                           wreg	equ	0xFE8
   572                           postdec1	equ	0xFE5
   573                           fsr1l	equ	0xFE1
   574                           
   575                           	psect	bssCOMRAM
   576  000031                     __pbssCOMRAM:
   577                           	opt stack 0
   578  000031                     TMR0_ISR@CountCallBack:
   579                           	opt stack 0
   580  000031                     	ds	2
   581  000033                     _eusart1RxTail:
   582                           	opt stack 0
   583  000033                     	ds	1
   584  000034                     _eusart1RxHead:
   585                           	opt stack 0
   586  000034                     	ds	1
   587  000035                     _eusart1TxTail:
   588                           	opt stack 0
   589  000035                     	ds	1
   590  000036                     _eusart1TxHead:
   591                           	opt stack 0
   592  000036                     	ds	1
   593  000037                     _synthLdTxArrayCnt:
   594                           	opt stack 0
   595  000037                     	ds	1
   596  000038                     _synthLdRxArrayCnt:
   597                           	opt stack 0
   598  000038                     	ds	1
   599  000039                     _cntRegUpdateRx:
   600                           	opt stack 0
   601  000039                     	ds	1
   602  00003A                     _cntRegUpdateTx:
   603                           	opt stack 0
   604  00003A                     	ds	1
   605  00003B                     _crcGiven:
   606                           	opt stack 0
   607  00003B                     	ds	1
   608  00003C                     _crcCalc:
   609                           	opt stack 0
   610  00003C                     	ds	1
   611  00003D                     _adcSampleMode:
   612                           	opt stack 0
   613  00003D                     	ds	1
   614                           tblptru	equ	0xFF8
   615                           tblptrh	equ	0xFF7
   616                           tblptrl	equ	0xFF6
   617                           tablat	equ	0xFF5
   618                           postinc0	equ	0xFEE
   619                           wreg	equ	0xFE8
   620                           postdec1	equ	0xFE5
   621                           fsr1l	equ	0xFE1
   622                           
   623                           	psect	dataCOMRAM
   624  00003E                     __pdataCOMRAM:
   625                           	opt stack 0
   626  00003E                     _writeAddress:
   627                           	opt stack 0
   628  00003E                     	ds	4
   629  000042                     _synthLdTxCnt:
   630                           	opt stack 0
   631  000042                     	ds	1
   632  000043                     _synthLdRxCnt:
   633                           	opt stack 0
   634  000043                     	ds	1
   635  000044                     _SynthRxOper:
   636                           	opt stack 0
   637  000044                     	ds	1
   638  000045                     _SynthTxOper:
   639                           	opt stack 0
   640  000045                     	ds	1
   641                           tblptru	equ	0xFF8
   642                           tblptrh	equ	0xFF7
   643                           tblptrl	equ	0xFF6
   644                           tablat	equ	0xFF5
   645                           postinc0	equ	0xFEE
   646                           wreg	equ	0xFE8
   647                           postdec1	equ	0xFE5
   648                           fsr1l	equ	0xFE1
   649                           
   650                           	psect	bssBANK0
   651  0000F0                     __pbssBANK0:
   652                           	opt stack 0
   653  0000F0                     _msgCount:
   654                           	opt stack 0
   655  0000F0                     	ds	1
   656  0000F1                     _dataSize:
   657                           	opt stack 0
   658  0000F1                     	ds	1
   659  0000F2                     _request:
   660                           	opt stack 0
   661  0000F2                     	ds	1
   662  0000F3                     _group:
   663                           	opt stack 0
   664  0000F3                     	ds	1
   665  0000F4                     _cState:
   666                           	opt stack 0
   667  0000F4                     	ds	1
   668  0000F5                     _eusart1RxCount:
   669                           	opt stack 0
   670  0000F5                     	ds	1
   671  0000F6                     _channel:
   672                           	opt stack 0
   673  0000F6                     	ds	1
   674  0000F7                     _Timer0_OneSec:
   675                           	opt stack 0
   676  0000F7                     	ds	1
   677  0000F8                     _Timer0_KeepAlive:
   678                           	opt stack 0
   679  0000F8                     	ds	1
   680  0000F9                     _Timer0_Sampling:
   681                           	opt stack 0
   682  0000F9                     	ds	1
   683  0000FA                     _Timer0_SynthLd:
   684                           	opt stack 0
   685  0000FA                     	ds	1
   686                           tblptru	equ	0xFF8
   687                           tblptrh	equ	0xFF7
   688                           tblptrl	equ	0xFF6
   689                           tablat	equ	0xFF5
   690                           postinc0	equ	0xFEE
   691                           wreg	equ	0xFE8
   692                           postdec1	equ	0xFE5
   693                           fsr1l	equ	0xFE1
   694                           
   695                           	psect	bssBANK1
   696  000100                     __pbssBANK1:
   697                           	opt stack 0
   698  000100                     _eusart1RxBuffer:
   699                           	opt stack 0
   700  000100                     	ds	40
   701  000128                     _mcuRunTimeIn5SecTicks:
   702                           	opt stack 0
   703  000128                     	ds	4
   704  00012C                     _numOfReadSamples:
   705                           	opt stack 0
   706  00012C                     	ds	4
   707  000130                     _numOfValidateSamples:
   708                           	opt stack 0
   709  000130                     	ds	4
   710  000134                     _errno:
   711                           	opt stack 0
   712  000134                     	ds	2
   713  000136                     _sampleCount:
   714                           	opt stack 0
   715  000136                     	ds	2
   716  000138                     _count:
   717                           	opt stack 0
   718  000138                     	ds	2
   719  00013A                     _isReWriteDone:
   720                           	opt stack 0
   721  00013A                     	ds	1
   722  00013B                     _data:
   723                           	opt stack 0
   724  00013B                     	ds	1
   725  00013C                     _sampleArray:
   726                           	opt stack 0
   727  00013C                     	ds	64
   728  00017C                     _rxMsgData:
   729                           	opt stack 0
   730  00017C                     	ds	20
   731  000190                     _rxMsgQueue:
   732                           	opt stack 0
   733  000190                     	ds	20
   734  0001A4                     _synthLdTxArray:
   735                           	opt stack 0
   736  0001A4                     	ds	12
   737  0001B0                     _synthLdRxArray:
   738                           	opt stack 0
   739  0001B0                     	ds	12
   740                           tblptru	equ	0xFF8
   741                           tblptrh	equ	0xFF7
   742                           tblptrl	equ	0xFF6
   743                           tablat	equ	0xFF5
   744                           postinc0	equ	0xFEE
   745                           wreg	equ	0xFE8
   746                           postdec1	equ	0xFE5
   747                           fsr1l	equ	0xFE1
   748                           
   749                           	psect	dataBANK1
   750  0001BC                     __pdataBANK1:
   751                           	opt stack 0
   752  0001BC                     _groupsArray:
   753                           	opt stack 0
   754  0001BC                     	ds	12
   755  0001C8                     _readAddress:
   756                           	opt stack 0
   757  0001C8                     	ds	4
   758                           tblptru	equ	0xFF8
   759                           tblptrh	equ	0xFF7
   760                           tblptrl	equ	0xFF6
   761                           tablat	equ	0xFF5
   762                           postinc0	equ	0xFEE
   763                           wreg	equ	0xFE8
   764                           postdec1	equ	0xFE5
   765                           fsr1l	equ	0xFE1
   766                           
   767                           	psect	bssBANK2
   768  000200                     __pbssBANK2:
   769                           	opt stack 0
   770  000200                     _eusart1TxBuffer:
   771                           	opt stack 0
   772  000200                     	ds	70
   773                           tblptru	equ	0xFF8
   774                           tblptrh	equ	0xFF7
   775                           tblptrl	equ	0xFF6
   776                           tablat	equ	0xFF5
   777                           postinc0	equ	0xFEE
   778                           wreg	equ	0xFE8
   779                           postdec1	equ	0xFE5
   780                           fsr1l	equ	0xFE1
   781                           
   782                           	psect	cstackBANK2
   783  000246                     __pcstackBANK2:
   784                           	opt stack 0
   785  000246                     SynthReadData@TxMsg:
   786                           	opt stack 0
   787                           
   788                           ; 29 bytes @ 0x0
   789  000246                     	ds	29
   790  000263                     SynthReadData@data_987:
   791                           	opt stack 0
   792                           
   793                           ; 1 bytes @ 0x1D
   794  000263                     	ds	1
   795  000264                     _SynthReadData$988:
   796                           	opt stack 0
   797                           
   798                           ; 2 bytes @ 0x1E
   799  000264                     	ds	2
   800  000266                     SynthReadData@eepromDataArray:
   801                           	opt stack 0
   802                           
   803                           ; 20 bytes @ 0x20
   804  000266                     	ds	20
   805  00027A                     SynthReadData@cType:
   806                           	opt stack 0
   807                           
   808                           ; 1 bytes @ 0x34
   809  00027A                     	ds	1
   810  00027B                     SynthReadData@regNum:
   811                           	opt stack 0
   812                           
   813                           ; 1 bytes @ 0x35
   814  00027B                     	ds	1
   815  00027C                     SynthReadData@byteNum:
   816                           	opt stack 0
   817                           
   818                           ; 1 bytes @ 0x36
   819  00027C                     	ds	1
   820                           tblptru	equ	0xFF8
   821                           tblptrh	equ	0xFF7
   822                           tblptrl	equ	0xFF6
   823                           tablat	equ	0xFF5
   824                           postinc0	equ	0xFEE
   825                           wreg	equ	0xFE8
   826                           postdec1	equ	0xFE5
   827                           fsr1l	equ	0xFE1
   828                           
   829                           	psect	cstackBANK0
   830  000060                     __pcstackBANK0:
   831                           	opt stack 0
   832  000060                     ??_FlashSampleWrite:
   833  000060                     ??___ftdiv:
   834  000060                     strtol@sign:
   835                           	opt stack 0
   836  000060                     GetMcuFwVersion@compileData:
   837                           	opt stack 0
   838  000060                     GetMcuRunTime@TxMsg:
   839                           	opt stack 0
   840  000060                     SWSPI_Synth_send_bits@bitArray:
   841                           	opt stack 0
   842                           
   843                           ; 32 bytes @ 0x0
   844  000060                     	ds	1
   845  000061                     strtol@a:
   846                           	opt stack 0
   847                           
   848                           ; 4 bytes @ 0x1
   849  000061                     	ds	1
   850  000062                     FlashSampleWrite@rotateLeft:
   851                           	opt stack 0
   852                           
   853                           ; 2 bytes @ 0x2
   854  000062                     	ds	1
   855  000063                     ___ftdiv@cntr:
   856                           	opt stack 0
   857                           
   858                           ; 1 bytes @ 0x3
   859  000063                     	ds	1
   860  000064                     ___ftdiv@f3:
   861                           	opt stack 0
   862  000064                     GetMcuFwVersion@TxMsg:
   863                           	opt stack 0
   864                           
   865                           ; 18 bytes @ 0x4
   866  000064                     	ds	1
   867  000065                     strtol@c:
   868                           	opt stack 0
   869                           
   870                           ; 1 bytes @ 0x5
   871  000065                     	ds	1
   872  000066                     ?_GetIntFromUartData:
   873                           	opt stack 0
   874  000066                     GetIntFromUartData@data:
   875                           	opt stack 0
   876                           
   877                           ; 2 bytes @ 0x6
   878  000066                     	ds	1
   879  000067                     ___ftdiv@exp:
   880                           	opt stack 0
   881                           
   882                           ; 1 bytes @ 0x7
   883  000067                     	ds	1
   884  000068                     ___ftdiv@sign:
   885                           	opt stack 0
   886                           
   887                           ; 1 bytes @ 0x8
   888  000068                     	ds	1
   889  000069                     ?___ftmul:
   890                           	opt stack 0
   891  000069                     ___ftmul@f1:
   892                           	opt stack 0
   893  000069                     GetMcuRunTime@tempRunTime:
   894                           	opt stack 0
   895                           
   896                           ; 4 bytes @ 0x9
   897  000069                     	ds	3
   898  00006C                     ___ftmul@f2:
   899                           	opt stack 0
   900                           
   901                           ; 3 bytes @ 0xC
   902  00006C                     	ds	1
   903  00006D                     GetMcuRunTime@idx:
   904                           	opt stack 0
   905                           
   906                           ; 2 bytes @ 0xD
   907  00006D                     	ds	1
   908  00006E                     ??_GetIntFromUartData:
   909                           
   910                           ; 1 bytes @ 0xE
   911  00006E                     	ds	1
   912  00006F                     ??___ftmul:
   913                           
   914                           ; 1 bytes @ 0xF
   915  00006F                     	ds	1
   916  000070                     GetIntFromUartData@dataRegArr:
   917                           	opt stack 0
   918                           
   919                           ; 10 bytes @ 0x10
   920  000070                     	ds	2
   921  000072                     ___ftmul@exp:
   922                           	opt stack 0
   923                           
   924                           ; 1 bytes @ 0x12
   925  000072                     	ds	1
   926  000073                     ___ftmul@f3_as_product:
   927                           	opt stack 0
   928                           
   929                           ; 3 bytes @ 0x13
   930  000073                     	ds	3
   931  000076                     ___ftmul@cntr:
   932                           	opt stack 0
   933  000076                     _GetMcuFwVersion$2698:
   934                           	opt stack 0
   935                           
   936                           ; 2 bytes @ 0x16
   937  000076                     	ds	1
   938  000077                     ___ftmul@sign:
   939                           	opt stack 0
   940                           
   941                           ; 1 bytes @ 0x17
   942  000077                     	ds	1
   943  000078                     ??_CheckFlashPrecentage:
   944  000078                     ?___ftadd:
   945                           	opt stack 0
   946  000078                     ?___fttol:
   947                           	opt stack 0
   948  000078                     _GetMcuFwVersion$2702:
   949                           	opt stack 0
   950  000078                     ___ftadd@f1:
   951                           	opt stack 0
   952  000078                     ___fttol@f1:
   953                           	opt stack 0
   954                           
   955                           ; 3 bytes @ 0x18
   956  000078                     	ds	2
   957  00007A                     GetIntFromUartData@num:
   958                           	opt stack 0
   959                           
   960                           ; 1 bytes @ 0x1A
   961  00007A                     	ds	1
   962  00007B                     GetIntFromUartData@recVal:
   963                           	opt stack 0
   964  00007B                     ___ftadd@f2:
   965                           	opt stack 0
   966                           
   967                           ; 3 bytes @ 0x1B
   968  00007B                     	ds	1
   969  00007C                     ??___fttol:
   970  00007C                     CheckFlashPrecentage@precentage:
   971                           	opt stack 0
   972  00007C                     GetIntFromUartData@retVal:
   973                           	opt stack 0
   974                           
   975                           ; 8 bytes @ 0x1C
   976  00007C                     	ds	2
   977  00007E                     ??___ftadd:
   978                           
   979                           ; 1 bytes @ 0x1E
   980  00007E                     	ds	2
   981  000080                     SWSPI_Synth_send_bits@mask:
   982                           	opt stack 0
   983                           
   984                           ; 4 bytes @ 0x20
   985  000080                     	ds	1
   986  000081                     ___ftadd@sign:
   987                           	opt stack 0
   988  000081                     ___fttol@sign1:
   989                           	opt stack 0
   990                           
   991                           ; 1 bytes @ 0x21
   992  000081                     	ds	1
   993  000082                     ___ftadd@exp2:
   994                           	opt stack 0
   995  000082                     ___fttol@lval:
   996                           	opt stack 0
   997                           
   998                           ; 4 bytes @ 0x22
   999  000082                     	ds	1
  1000  000083                     ___ftadd@exp1:
  1001                           	opt stack 0
  1002                           
  1003                           ; 1 bytes @ 0x23
  1004  000083                     	ds	1
  1005  000084                     ?___ftsub:
  1006                           	opt stack 0
  1007  000084                     ?_eval_poly:
  1008                           	opt stack 0
  1009  000084                     SWSPI_Synth_send_bits@count:
  1010                           	opt stack 0
  1011  000084                     GetIntFromUartData@idxCon:
  1012                           	opt stack 0
  1013  000084                     ___ftsub@f1:
  1014                           	opt stack 0
  1015  000084                     eval_poly@x:
  1016                           	opt stack 0
  1017                           
  1018                           ; 3 bytes @ 0x24
  1019  000084                     	ds	1
  1020  000085                     SWSPI_Synth_send_bits@phrType:
  1021                           	opt stack 0
  1022                           
  1023                           ; 1 bytes @ 0x25
  1024  000085                     	ds	1
  1025  000086                     SWSPI_send_word@datac:
  1026                           	opt stack 0
  1027  000086                     GetIntFromUartData@idxData:
  1028                           	opt stack 0
  1029  000086                     ___fttol@exp1:
  1030                           	opt stack 0
  1031                           
  1032                           ; 1 bytes @ 0x26
  1033  000086                     	ds	1
  1034  000087                     ?___altoft:
  1035                           	opt stack 0
  1036  000087                     FlashReadUart@data:
  1037                           	opt stack 0
  1038  000087                     SWSPI_send_word@idx:
  1039                           	opt stack 0
  1040  000087                     eval_poly@d:
  1041                           	opt stack 0
  1042  000087                     ___ftsub@f2:
  1043                           	opt stack 0
  1044  000087                     ___altoft@c:
  1045                           	opt stack 0
  1046                           
  1047                           ; 4 bytes @ 0x27
  1048  000087                     	ds	2
  1049  000089                     ??_FlashReadUart:
  1050  000089                     SWSPI_send_word@phrType:
  1051                           	opt stack 0
  1052  000089                     eval_poly@n:
  1053                           	opt stack 0
  1054                           
  1055                           ; 2 bytes @ 0x29
  1056  000089                     	ds	1
  1057  00008A                     DacSetValue@data:
  1058                           	opt stack 0
  1059  00008A                     UpdateSynthFreq@data:
  1060                           	opt stack 0
  1061                           
  1062                           ; 2 bytes @ 0x2A
  1063  00008A                     	ds	1
  1064  00008B                     ??___altoft:
  1065  00008B                     eval_poly@res:
  1066                           	opt stack 0
  1067                           
  1068                           ; 3 bytes @ 0x2B
  1069  00008B                     	ds	1
  1070  00008C                     ??_DacSetValue:
  1071  00008C                     UpdateSynthFreq@cType:
  1072                           	opt stack 0
  1073                           
  1074                           ; 1 bytes @ 0x2C
  1075  00008C                     	ds	1
  1076  00008D                     UpdateSynthFreq@retVal:
  1077                           	opt stack 0
  1078                           
  1079                           ; 8 bytes @ 0x2D
  1080  00008D                     	ds	1
  1081  00008E                     ?_log:
  1082                           	opt stack 0
  1083  00008E                     ?_ldexp:
  1084                           	opt stack 0
  1085  00008E                     ldexp@value:
  1086                           	opt stack 0
  1087  00008E                     log@x:
  1088                           	opt stack 0
  1089                           
  1090                           ; 3 bytes @ 0x2E
  1091  00008E                     	ds	1
  1092  00008F                     ?_floor:
  1093                           	opt stack 0
  1094  00008F                     floor@x:
  1095                           	opt stack 0
  1096  00008F                     FlashReadUart@TxMsg:
  1097                           	opt stack 0
  1098                           
  1099                           ; 69 bytes @ 0x2F
  1100  00008F                     	ds	1
  1101  000090                     DacSetValue@dacIndex:
  1102                           	opt stack 0
  1103                           
  1104                           ; 1 bytes @ 0x30
  1105  000090                     	ds	1
  1106  000091                     ldexp@newexp:
  1107                           	opt stack 0
  1108  000091                     log@exponent:
  1109                           	opt stack 0
  1110  000091                     DacSetValue@retVal:
  1111                           	opt stack 0
  1112                           
  1113                           ; 8 bytes @ 0x31
  1114  000091                     	ds	1
  1115  000092                     floor@i:
  1116                           	opt stack 0
  1117                           
  1118                           ; 3 bytes @ 0x32
  1119  000092                     	ds	1
  1120  000093                     ??_ldexp:
  1121                           
  1122                           ; 1 bytes @ 0x33
  1123  000093                     	ds	2
  1124  000095                     floor@expon:
  1125                           	opt stack 0
  1126                           
  1127                           ; 2 bytes @ 0x35
  1128  000095                     	ds	2
  1129  000097                     ?_exp:
  1130                           	opt stack 0
  1131  000097                     exp@x:
  1132                           	opt stack 0
  1133                           
  1134                           ; 3 bytes @ 0x37
  1135  000097                     	ds	3
  1136  00009A                     _exp$3604:
  1137                           	opt stack 0
  1138                           
  1139                           ; 3 bytes @ 0x3A
  1140  00009A                     	ds	3
  1141  00009D                     exp@exponent:
  1142                           	opt stack 0
  1143                           
  1144                           ; 2 bytes @ 0x3D
  1145  00009D                     	ds	2
  1146  00009F                     exp@sign:
  1147                           	opt stack 0
  1148                           
  1149                           ; 1 bytes @ 0x3F
  1150  00009F                     	ds	1
  1151  0000A0                     ?_pow:
  1152                           	opt stack 0
  1153  0000A0                     pow@x:
  1154                           	opt stack 0
  1155                           
  1156                           ; 3 bytes @ 0x40
  1157  0000A0                     	ds	3
  1158  0000A3                     pow@y:
  1159                           	opt stack 0
  1160                           
  1161                           ; 3 bytes @ 0x43
  1162  0000A3                     	ds	3
  1163  0000A6                     _pow$3602:
  1164                           	opt stack 0
  1165                           
  1166                           ; 3 bytes @ 0x46
  1167  0000A6                     	ds	3
  1168  0000A9                     _pow$3603:
  1169                           	opt stack 0
  1170                           
  1171                           ; 3 bytes @ 0x49
  1172  0000A9                     	ds	3
  1173  0000AC                     pow@sign:
  1174                           	opt stack 0
  1175                           
  1176                           ; 1 bytes @ 0x4C
  1177  0000AC                     	ds	1
  1178  0000AD                     pow@yi:
  1179                           	opt stack 0
  1180                           
  1181                           ; 4 bytes @ 0x4D
  1182  0000AD                     	ds	4
  1183  0000B1                     ??_AdcConvert:
  1184  0000B1                     ?_ReadIntFromEeprom:
  1185                           	opt stack 0
  1186  0000B1                     ReadIntFromEeprom@numOfByes:
  1187                           	opt stack 0
  1188                           
  1189                           ; 2 bytes @ 0x51
  1190  0000B1                     	ds	2
  1191  0000B3                     AdcConvert@_adcResult:
  1192                           	opt stack 0
  1193                           
  1194                           ; 2 bytes @ 0x53
  1195  0000B3                     	ds	2
  1196  0000B5                     ??_ReadIntFromEeprom:
  1197  0000B5                     AdcConvert@_adcResult_350:
  1198                           	opt stack 0
  1199                           
  1200                           ; 2 bytes @ 0x55
  1201  0000B5                     	ds	2
  1202  0000B7                     AdcConvert@ldRxSate:
  1203                           	opt stack 0
  1204                           
  1205                           ; 2 bytes @ 0x57
  1206  0000B7                     	ds	1
  1207  0000B8                     ReadIntFromEeprom@base:
  1208                           	opt stack 0
  1209                           
  1210                           ; 4 bytes @ 0x58
  1211  0000B8                     	ds	1
  1212  0000B9                     AdcConvert@ldTxSate:
  1213                           	opt stack 0
  1214                           
  1215                           ; 2 bytes @ 0x59
  1216  0000B9                     	ds	2
  1217  0000BB                     AdcConvert@adcRes:
  1218                           	opt stack 0
  1219                           
  1220                           ; 2 bytes @ 0x5B
  1221  0000BB                     	ds	1
  1222  0000BC                     _ReadIntFromEeprom$3600:
  1223                           	opt stack 0
  1224                           
  1225                           ; 3 bytes @ 0x5C
  1226  0000BC                     	ds	1
  1227  0000BD                     _AdcConvert$3599:
  1228                           	opt stack 0
  1229                           
  1230                           ; 3 bytes @ 0x5D
  1231  0000BD                     	ds	2
  1232  0000BF                     _ReadIntFromEeprom$3601:
  1233                           	opt stack 0
  1234                           
  1235                           ; 3 bytes @ 0x5F
  1236  0000BF                     	ds	1
  1237  0000C0                     AdcConvert@idx:
  1238                           	opt stack 0
  1239                           
  1240                           ; 1 bytes @ 0x60
  1241  0000C0                     	ds	2
  1242  0000C2                     ReadIntFromEeprom@address:
  1243                           	opt stack 0
  1244                           
  1245                           ; 1 bytes @ 0x62
  1246  0000C2                     	ds	1
  1247  0000C3                     ReadIntFromEeprom@retVal:
  1248                           	opt stack 0
  1249                           
  1250                           ; 4 bytes @ 0x63
  1251  0000C3                     	ds	4
  1252  0000C7                     ReadIntFromEeprom@idx:
  1253                           	opt stack 0
  1254                           
  1255                           ; 1 bytes @ 0x67
  1256  0000C7                     	ds	1
  1257  0000C8                     ??_DacInit:
  1258  0000C8                     DacReadValue@data:
  1259                           	opt stack 0
  1260  0000C8                     SynthReadData@data:
  1261                           	opt stack 0
  1262  0000C8                     InitSynth@EepromVal:
  1263                           	opt stack 0
  1264                           
  1265                           ; 4 bytes @ 0x68
  1266  0000C8                     	ds	2
  1267  0000CA                     ??_DacReadValue:
  1268  0000CA                     DacInit@dacInput:
  1269                           	opt stack 0
  1270                           
  1271                           ; 2 bytes @ 0x6A
  1272  0000CA                     	ds	2
  1273  0000CC                     DacInit@idx:
  1274                           	opt stack 0
  1275  0000CC                     DacReadValue@regNum:
  1276                           	opt stack 0
  1277  0000CC                     InitSynth@cType:
  1278                           	opt stack 0
  1279                           
  1280                           ; 1 bytes @ 0x6C
  1281  0000CC                     	ds	1
  1282  0000CD                     DacReadValue@byteNum:
  1283                           	opt stack 0
  1284  0000CD                     InitSynth@idx:
  1285                           	opt stack 0
  1286                           
  1287                           ; 1 bytes @ 0x6D
  1288  0000CD                     	ds	1
  1289  0000CE                     InitSynth@regNum:
  1290                           	opt stack 0
  1291  0000CE                     DacReadValue@readVal:
  1292                           	opt stack 0
  1293                           
  1294                           ; 2 bytes @ 0x6E
  1295  0000CE                     	ds	1
  1296  0000CF                     SetSynthOper@cType:
  1297                           	opt stack 0
  1298                           
  1299                           ; 1 bytes @ 0x6F
  1300  0000CF                     	ds	1
  1301  0000D0                     DacReadValue@dacIndex:
  1302                           	opt stack 0
  1303                           
  1304                           ; 1 bytes @ 0x70
  1305  0000D0                     	ds	1
  1306  0000D1                     DacReadValue@TxMsg:
  1307                           	opt stack 0
  1308                           
  1309                           ; 7 bytes @ 0x71
  1310  0000D1                     	ds	3
  1311  0000D4                     FlashReadUart@val:
  1312                           	opt stack 0
  1313                           
  1314                           ; 8 bytes @ 0x74
  1315  0000D4                     	ds	4
  1316  0000D8                     DacReadValue@byteIdx:
  1317                           	opt stack 0
  1318                           
  1319                           ; 2 bytes @ 0x78
  1320  0000D8                     	ds	4
  1321  0000DC                     _FlashReadUart$609:
  1322                           	opt stack 0
  1323                           
  1324                           ; 4 bytes @ 0x7C
  1325  0000DC                     	ds	4
  1326  0000E0                     FlashReadUart@j:
  1327                           	opt stack 0
  1328                           
  1329                           ; 2 bytes @ 0x80
  1330  0000E0                     	ds	2
  1331  0000E2                     FlashReadUart@numOfSampleToRead:
  1332                           	opt stack 0
  1333                           
  1334                           ; 2 bytes @ 0x82
  1335  0000E2                     	ds	2
  1336  0000E4                     FlashReadUart@idx:
  1337                           	opt stack 0
  1338                           
  1339                           ; 2 bytes @ 0x84
  1340  0000E4                     	ds	2
  1341  0000E6                     GroupAdc@data:
  1342                           	opt stack 0
  1343  0000E6                     GroupSynthesizers@data:
  1344                           	opt stack 0
  1345  0000E6                     GroupFlashMemory@data:
  1346                           	opt stack 0
  1347  0000E6                     GroupDAC@data:
  1348                           	opt stack 0
  1349  0000E6                     
  1350                           ; 3 bytes @ 0x86
  1351  0000E6                     	ds	2
  1352  0000E8                     GroupAdc@request:
  1353                           	opt stack 0
  1354  0000E8                     GroupSynthesizers@request:
  1355                           	opt stack 0
  1356  0000E8                     GroupFlashMemory@request:
  1357                           	opt stack 0
  1358  0000E8                     GroupDAC@request:
  1359                           	opt stack 0
  1360                           
  1361                           ; 1 bytes @ 0x88
  1362  0000E8                     	ds	1
  1363  0000E9                     ??_readUartMessage:
  1364  0000E9                     GroupControlMcu@request:
  1365                           	opt stack 0
  1366  0000E9                     GroupStatusAndVersion@request:
  1367                           	opt stack 0
  1368                           
  1369                           ; 1 bytes @ 0x89
  1370  0000E9                     	ds	4
  1371  0000ED                     readUartMessage@idx:
  1372                           	opt stack 0
  1373                           
  1374                           ; 2 bytes @ 0x8D
  1375  0000ED                     	ds	2
  1376  0000EF                     readUartMessage@chRec:
  1377                           	opt stack 0
  1378                           
  1379                           ; 1 bytes @ 0x8F
  1380  0000EF                     	ds	1
  1381                           tblptru	equ	0xFF8
  1382                           tblptrh	equ	0xFF7
  1383                           tblptrl	equ	0xFF6
  1384                           tablat	equ	0xFF5
  1385                           postinc0	equ	0xFEE
  1386                           wreg	equ	0xFE8
  1387                           postdec1	equ	0xFE5
  1388                           fsr1l	equ	0xFE1
  1389                           
  1390                           	psect	cstackCOMRAM
  1391  000001                     __pcstackCOMRAM:
  1392                           	opt stack 0
  1393  000001                     ?___lwmod:
  1394                           	opt stack 0
  1395  000001                     ___lwmod@dividend:
  1396                           	opt stack 0
  1397                           
  1398                           ; 2 bytes @ 0x0
  1399  000001                     	ds	2
  1400  000003                     ___lwmod@divisor:
  1401                           	opt stack 0
  1402                           
  1403                           ; 2 bytes @ 0x2
  1404  000003                     	ds	2
  1405  000005                     ___lwmod@counter:
  1406                           	opt stack 0
  1407                           
  1408                           ; 1 bytes @ 0x4
  1409  000005                     	ds	1
  1410  000006                     ??_INTERRUPT_InterruptManager:
  1411                           
  1412                           ; 1 bytes @ 0x5
  1413  000006                     	ds	18
  1414  000018                     ??_EUSART1_Read:
  1415  000018                     ??_isspace:
  1416  000018                     ??_isdigit:
  1417  000018                     ??_isupper:
  1418  000018                     ??_BlinkErrorLeds:
  1419  000018                     ??_BlinkOkLeds:
  1420  000018                     ??_keepAliveSignalLed:
  1421  000018                     ?_ADC_GetConversion:
  1422                           	opt stack 0
  1423  000018                     ?_GetUint16FromBitArray:
  1424                           	opt stack 0
  1425  000018                     ?___wmul:
  1426                           	opt stack 0
  1427  000018                     ?___awmod:
  1428                           	opt stack 0
  1429  000018                     ?___ftpack:
  1430                           	opt stack 0
  1431  000018                     ?_frexp:
  1432                           	opt stack 0
  1433  000018                     ?___ftneg:
  1434                           	opt stack 0
  1435  000018                     ?___lldiv:
  1436                           	opt stack 0
  1437  000018                     ?___llmod:
  1438                           	opt stack 0
  1439  000018                     SwSpi_Data_Pin@cPinMode:
  1440                           	opt stack 0
  1441  000018                     SwSpi_Clk_Pin@cPinMode:
  1442                           	opt stack 0
  1443  000018                     SwSpi_Set_CE_Pin@cPinMode:
  1444                           	opt stack 0
  1445  000018                     SwSpi_Set_Synth_Le_Pin@cPinMode:
  1446                           	opt stack 0
  1447  000018                     SwSpi_Set_Dac_Sync_Pin@cPinMode:
  1448                           	opt stack 0
  1449  000018                     EUSART1_Write@txData:
  1450                           	opt stack 0
  1451  000018                     DATAEE_WriteByte@bData:
  1452                           	opt stack 0
  1453  000018                     DATAEE_ReadByte@bAdd:
  1454                           	opt stack 0
  1455  000018                     toupper@c:
  1456                           	opt stack 0
  1457  000018                     IOCB4_SetInterruptHandler@InterruptHandler:
  1458                           	opt stack 0
  1459  000018                     IOCB5_SetInterruptHandler@InterruptHandler:
  1460                           	opt stack 0
  1461  000018                     TMR0_SetInterruptHandler@InterruptHandler:
  1462                           	opt stack 0
  1463  000018                     crc8@dataArray:
  1464                           	opt stack 0
  1465  000018                     GetUint16FromBitArray@bitarray:
  1466                           	opt stack 0
  1467  000018                     Make32bitsArray@array:
  1468                           	opt stack 0
  1469  000018                     ___wmul@multiplier:
  1470                           	opt stack 0
  1471  000018                     ___awmod@dividend:
  1472                           	opt stack 0
  1473  000018                     memset@p1:
  1474                           	opt stack 0
  1475  000018                     ___ftpack@arg:
  1476                           	opt stack 0
  1477  000018                     ___ftge@ff1:
  1478                           	opt stack 0
  1479  000018                     ___ftneg@f1:
  1480                           	opt stack 0
  1481  000018                     frexp@value:
  1482                           	opt stack 0
  1483  000018                     FLASH_ReadByte@flashAddr:
  1484                           	opt stack 0
  1485  000018                     FLASH_EraseBlock@baseAddr:
  1486                           	opt stack 0
  1487  000018                     make8@data:
  1488                           	opt stack 0
  1489  000018                     ___lldiv@dividend:
  1490                           	opt stack 0
  1491  000018                     ___llmod@dividend:
  1492                           	opt stack 0
  1493                           
  1494                           ; 4 bytes @ 0x17
  1495  000018                     	ds	1
  1496  000019                     EepromRead@address:
  1497                           	opt stack 0
  1498  000019                     SwSpi_Data_Pin@phrType:
  1499                           	opt stack 0
  1500  000019                     SwSpi_Clk_Pin@phrType:
  1501                           	opt stack 0
  1502  000019                     SwSpi_Set_CE_Pin@phrType:
  1503                           	opt stack 0
  1504  000019                     SwSpi_Set_Synth_Le_Pin@phrType:
  1505                           	opt stack 0
  1506  000019                     DATAEE_WriteByte@bAdd:
  1507                           	opt stack 0
  1508  000019                     _isdigit$3329:
  1509                           	opt stack 0
  1510  000019                     _isspace$3332:
  1511                           	opt stack 0
  1512  000019                     _isupper$3335:
  1513                           	opt stack 0
  1514  000019                     WriteUartMessage@dataBuf:
  1515                           	opt stack 0
  1516  000019                     EUSART1_Read@readValue:
  1517                           	opt stack 0
  1518                           
  1519                           ; 2 bytes @ 0x18
  1520  000019                     	ds	1
  1521  00001A                     ??_ADC_GetConversion:
  1522  00001A                     ??_TMR0_Initialize:
  1523  00001A                     ?___lmul:
  1524                           	opt stack 0
  1525  00001A                     SWSPI_DAC_send_bits@data:
  1526                           	opt stack 0
  1527  00001A                     DATAEE_WriteByte@GIEBitValue:
  1528                           	opt stack 0
  1529  00001A                     isdigit@c:
  1530                           	opt stack 0
  1531  00001A                     isspace@c:
  1532                           	opt stack 0
  1533  00001A                     isupper@c:
  1534                           	opt stack 0
  1535  00001A                     crc8@dataSize:
  1536                           	opt stack 0
  1537  00001A                     GetUint16FromBitArray@numOfBits:
  1538                           	opt stack 0
  1539  00001A                     ___wmul@multiplicand:
  1540                           	opt stack 0
  1541  00001A                     ___awmod@divisor:
  1542                           	opt stack 0
  1543  00001A                     memset@c:
  1544                           	opt stack 0
  1545  00001A                     Make32bitsArray@data:
  1546                           	opt stack 0
  1547  00001A                     ___lmul@multiplier:
  1548                           	opt stack 0
  1549                           
  1550                           ; 4 bytes @ 0x19
  1551  00001A                     	ds	1
  1552  00001B                     ??_isalpha:
  1553  00001B                     BlinkErrorLeds@state:
  1554                           	opt stack 0
  1555  00001B                     BlinkOkLeds@state:
  1556                           	opt stack 0
  1557  00001B                     EepromWrite@data:
  1558                           	opt stack 0
  1559  00001B                     SWSPI_DAC_send_bits@count:
  1560                           	opt stack 0
  1561  00001B                     ___ftpack@exp:
  1562                           	opt stack 0
  1563  00001B                     WriteUartMessage@dataSize:
  1564                           	opt stack 0
  1565  00001B                     frexp@eptr:
  1566                           	opt stack 0
  1567  00001B                     ___ftge@ff2:
  1568                           	opt stack 0
  1569                           
  1570                           ; 3 bytes @ 0x1A
  1571  00001B                     	ds	1
  1572  00001C                     ??_GetUint16FromBitArray:
  1573  00001C                     ??_crc8:
  1574  00001C                     EepromWrite@address:
  1575                           	opt stack 0
  1576  00001C                     SWSPI_DAC_send_bits@phrType:
  1577                           	opt stack 0
  1578  00001C                     FLASH_EraseBlock@GIEBitValue:
  1579                           	opt stack 0
  1580  00001C                     ADC_GetConversion@channel:
  1581                           	opt stack 0
  1582  00001C                     make8@dataLocation:
  1583                           	opt stack 0
  1584  00001C                     ___awmod@counter:
  1585                           	opt stack 0
  1586  00001C                     ___ftpack@sign:
  1587                           	opt stack 0
  1588  00001C                     _isalpha$3326:
  1589                           	opt stack 0
  1590  00001C                     BlinkErrorLeds@idx:
  1591                           	opt stack 0
  1592  00001C                     BlinkOkLeds@idx:
  1593                           	opt stack 0
  1594  00001C                     ___wmul@product:
  1595                           	opt stack 0
  1596  00001C                     memset@n:
  1597                           	opt stack 0
  1598  00001C                     ___lldiv@divisor:
  1599                           	opt stack 0
  1600  00001C                     ___llmod@divisor:
  1601                           	opt stack 0
  1602                           
  1603                           ; 4 bytes @ 0x1B
  1604  00001C                     	ds	1
  1605  00001D                     ??_make8:
  1606  00001D                     ??___ftpack:
  1607  00001D                     ??_frexp:
  1608  00001D                     ??_WriteUartMessage:
  1609  00001D                     ___awmod@sign:
  1610                           	opt stack 0
  1611  00001D                     isalpha@c:
  1612                           	opt stack 0
  1613  00001D                     crc8@crc:
  1614                           	opt stack 0
  1615  00001D                     FLASH_WriteBlock@writeAddr:
  1616                           	opt stack 0
  1617                           
  1618                           ; 4 bytes @ 0x1C
  1619  00001D                     	ds	1
  1620  00001E                     ??_Make32bitsArray:
  1621  00001E                     ??___ftge:
  1622  00001E                     WriteUartMessage@idx:
  1623                           	opt stack 0
  1624  00001E                     memset@p:
  1625                           	opt stack 0
  1626  00001E                     ___lmul@multiplicand:
  1627                           	opt stack 0
  1628                           
  1629                           ; 4 bytes @ 0x1D
  1630  00001E                     	ds	1
  1631  00001F                     crc8@i:
  1632                           	opt stack 0
  1633  00001F                     GetUint16FromBitArray@res:
  1634                           	opt stack 0
  1635                           
  1636                           ; 2 bytes @ 0x1E
  1637  00001F                     	ds	1
  1638  000020                     ?___awtoft:
  1639                           	opt stack 0
  1640  000020                     ?___lltoft:
  1641                           	opt stack 0
  1642  000020                     ?___lwtoft:
  1643                           	opt stack 0
  1644  000020                     ___llmod@counter:
  1645                           	opt stack 0
  1646  000020                     ZeroArray@array:
  1647                           	opt stack 0
  1648  000020                     FillArray@array:
  1649                           	opt stack 0
  1650  000020                     Make32bitsArray@idx:
  1651                           	opt stack 0
  1652  000020                     ___awtoft@c:
  1653                           	opt stack 0
  1654  000020                     ___lwtoft@c:
  1655                           	opt stack 0
  1656  000020                     ___lldiv@quotient:
  1657                           	opt stack 0
  1658  000020                     ___lltoft@c:
  1659                           	opt stack 0
  1660                           
  1661                           ; 4 bytes @ 0x1F
  1662  000020                     	ds	1
  1663  000021                     FLASH_WriteBlock@flashWrBufPtr:
  1664                           	opt stack 0
  1665  000021                     GetUint16FromBitArray@i:
  1666                           	opt stack 0
  1667  000021                     StoreIntInEeprom@data:
  1668                           	opt stack 0
  1669                           
  1670                           ; 4 bytes @ 0x20
  1671  000021                     	ds	1
  1672  000022                     ZeroArray@size:
  1673                           	opt stack 0
  1674  000022                     FillArray@size:
  1675                           	opt stack 0
  1676  000022                     ___lmul@product:
  1677                           	opt stack 0
  1678                           
  1679                           ; 4 bytes @ 0x21
  1680  000022                     	ds	1
  1681  000023                     ??_FLASH_WriteBlock:
  1682  000023                     ___awtoft@sign:
  1683                           	opt stack 0
  1684                           
  1685                           ; 1 bytes @ 0x22
  1686  000023                     	ds	1
  1687  000024                     ??_GetMcuFwVersion:
  1688  000024                     ??_FlashReadCondition:
  1689  000024                     ??___lltoft:
  1690  000024                     SendAckMessage@inRequest:
  1691                           	opt stack 0
  1692  000024                     FillArray@value:
  1693                           	opt stack 0
  1694  000024                     ___lldiv@counter:
  1695                           	opt stack 0
  1696                           
  1697                           ; 1 bytes @ 0x23
  1698  000024                     	ds	1
  1699  000025                     ??_GetMcuRunTime:
  1700  000025                     SendAckMessage@inGroup:
  1701                           	opt stack 0
  1702  000025                     StoreIntInEeprom@address:
  1703                           	opt stack 0
  1704  000025                     SWSPI_Synth_send_bits@data:
  1705                           	opt stack 0
  1706                           
  1707                           ; 4 bytes @ 0x24
  1708  000025                     	ds	1
  1709  000026                     ?_strtol:
  1710                           	opt stack 0
  1711  000026                     StoreIntInEeprom@numOfByes:
  1712                           	opt stack 0
  1713  000026                     strtol@s:
  1714                           	opt stack 0
  1715  000026                     SendAckMessage@TxMsg:
  1716                           	opt stack 0
  1717                           
  1718                           ; 6 bytes @ 0x25
  1719  000026                     	ds	1
  1720  000027                     FLASH_WriteBlock@blockStartAddr:
  1721                           	opt stack 0
  1722                           
  1723                           ; 4 bytes @ 0x26
  1724  000027                     	ds	1
  1725  000028                     StoreIntInEeprom@val:
  1726                           	opt stack 0
  1727  000028                     ___lltoft@exp:
  1728                           	opt stack 0
  1729  000028                     strtol@endptr:
  1730                           	opt stack 0
  1731  000028                     FlashReadCondition@TxMsg:
  1732                           	opt stack 0
  1733                           
  1734                           ; 9 bytes @ 0x27
  1735  000028                     	ds	1
  1736  000029                     ?___ftdiv:
  1737                           	opt stack 0
  1738  000029                     StoreIntInEeprom@idx:
  1739                           	opt stack 0
  1740  000029                     ___ftdiv@f1:
  1741                           	opt stack 0
  1742  000029                     SWSPI_send_word@data:
  1743                           	opt stack 0
  1744                           
  1745                           ; 4 bytes @ 0x28
  1746  000029                     	ds	1
  1747  00002A                     strtol@base:
  1748                           	opt stack 0
  1749                           
  1750                           ; 2 bytes @ 0x29
  1751  00002A                     	ds	1
  1752  00002B                     FLASH_WriteBlock@GIEBitValue:
  1753                           	opt stack 0
  1754                           
  1755                           ; 1 bytes @ 0x2A
  1756  00002B                     	ds	1
  1757  00002C                     ??_strtol:
  1758  00002C                     ??_testLeds:
  1759  00002C                     FLASH_WriteBlock@i:
  1760                           	opt stack 0
  1761  00002C                     SetChannelMode@data:
  1762                           	opt stack 0
  1763  00002C                     ___ftdiv@f2:
  1764                           	opt stack 0
  1765                           
  1766                           ; 3 bytes @ 0x2B
  1767  00002C                     	ds	1
  1768  00002D                     SWSPI_send_word@dataSize:
  1769                           	opt stack 0
  1770  00002D                     testLeds@idx:
  1771                           	opt stack 0
  1772  00002D                     FlashSampleWrite@sampleData:
  1773                           	opt stack 0
  1774                           
  1775                           ; 2 bytes @ 0x2C
  1776  00002D                     	ds	1
  1777  00002E                     
  1778                           ; 1 bytes @ 0x2D
  1779  00002E                     	ds	1
  1780  00002F                     ??_eval_poly:
  1781  00002F                     FlashSampleWrite@channelNum:
  1782                           	opt stack 0
  1783  00002F                     ___altoft@exp:
  1784                           	opt stack 0
  1785                           
  1786                           ; 1 bytes @ 0x2E
  1787  00002F                     	ds	1
  1788  000030                     ___altoft@sign:
  1789                           	opt stack 0
  1790                           
  1791                           ; 1 bytes @ 0x2F
  1792  000030                     	ds	1
  1793  000031                     tblptru	equ	0xFF8
  1794                           tblptrh	equ	0xFF7
  1795                           tblptrl	equ	0xFF6
  1796                           tablat	equ	0xFF5
  1797                           postinc0	equ	0xFEE
  1798                           wreg	equ	0xFE8
  1799                           postdec1	equ	0xFE5
  1800                           fsr1l	equ	0xFE1
  1801                           
  1802                           ; 1 bytes @ 0x30
  1803 ;;
  1804 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1805 ;;
  1806 ;; *************** function _main *****************
  1807 ;; Defined at:
  1808 ;;		line 13 in file "main.c"
  1809 ;; Parameters:    Size  Location     Type
  1810 ;;		None
  1811 ;; Auto vars:     Size  Location     Type
  1812 ;;		None
  1813 ;; Return value:  Size  Location     Type
  1814 ;;                  1    wreg      void 
  1815 ;; Registers used:
  1816 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  1817 ;; Tracked objects:
  1818 ;;		On entry : 0/0
  1819 ;;		On exit  : 0/0
  1820 ;;		Unchanged: 0/0
  1821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1822 ;;      Params:         0       0       0       0       0       0       0
  1823 ;;      Locals:         0       0       0       0       0       0       0
  1824 ;;      Temps:          0       0       0       0       0       0       0
  1825 ;;      Totals:         0       0       0       0       0       0       0
  1826 ;;Total ram usage:        0 bytes
  1827 ;; Hardware stack levels required when called:   14
  1828 ;; This function calls:
  1829 ;;		_AdcConvert
  1830 ;;		_BlinkErrorLeds
  1831 ;;		_BlinkOkLeds
  1832 ;;		_CheckFlashPrecentage
  1833 ;;		_InitSystemApplicationManagers
  1834 ;;		_SendSystemStartAck
  1835 ;;		_SetMcuRunTime
  1836 ;;		_SetMcuSystem
  1837 ;;		_SynthLdDetect
  1838 ;;		_keepAliveSignalLed
  1839 ;;		_keepAliveSignalUart
  1840 ;;		_readUartMessage
  1841 ;; This function is called by:
  1842 ;;		Startup code after reset
  1843 ;; This function uses a non-reentrant model
  1844 ;;
  1845                           
  1846                           	psect	text0
  1847  003566                     __ptext0:
  1848                           	opt stack 0
  1849  003566                     _main:
  1850                           	opt stack 17
  1851                           
  1852                           ;main.c: 16: SetMcuSystem();
  1853                           
  1854                           ;incstack = 0
  1855  003566  EC10  F022         	call	_SetMcuSystem	;wreg free
  1856                           
  1857                           ;main.c: 19: InitSystemApplicationManagers();
  1858  00356A  ECA6  F021         	call	_InitSystemApplicationManagers	;wreg free
  1859                           
  1860                           ;main.c: 22: SendSystemStartAck();
  1861  00356E  EC0A  F022         	call	_SendSystemStartAck	;wreg free
  1862                           
  1863                           ;main.c: 25: BlinkOkLeds(OK_START_SYSTEM);
  1864  003572  0E03               	movlw	3
  1865  003574  EC22  F01C         	call	_BlinkOkLeds
  1866  003578                     
  1867                           ;main.c: 28: {
  1868                           ;main.c: 29: readUartMessage();
  1869  003578  ECE3  F00A         	call	_readUartMessage	;wreg free
  1870                           
  1871                           ;main.c: 31: if (Timer0_OneSec == 1)
  1872  00357C  0100               	movlb	0	; () banked
  1873  00357E  05F7               	decf	_Timer0_OneSec& (0+255),w,b	;volatile
  1874  003580  A4D8               	btfss	status,2,c
  1875  003582  D006               	goto	l1590
  1876                           
  1877                           ; BSR set to: 0
  1878                           ;main.c: 32: {
  1879                           ;main.c: 33: SetMcuRunTime();
  1880  003584  EC21  F01E         	call	_SetMcuRunTime	;wreg free
  1881                           
  1882                           ;main.c: 34: Timer0_OneSec = 0;
  1883  003588  0E00               	movlw	0
  1884  00358A  0100               	movlb	0	; () banked
  1885  00358C  6FF7               	movwf	_Timer0_OneSec& (0+255),b	;volatile
  1886                           
  1887                           ;main.c: 35: }
  1888  00358E  D7F4               	goto	l1589
  1889  003590                     l1590:
  1890                           
  1891                           ; BSR set to: 0
  1892                           ;main.c: 36: else if (Timer0_Sampling == 1)
  1893                           
  1894                           ; BSR set to: 0
  1895  003590  05F9               	decf	_Timer0_Sampling& (0+255),w,b	;volatile
  1896  003592  A4D8               	btfss	status,2,c
  1897  003594  D010               	goto	l1592
  1898                           
  1899                           ; BSR set to: 0
  1900                           ;main.c: 37: {
  1901                           ;main.c: 38: keepAliveSignalLed();
  1902  003596  EC8F  F021         	call	_keepAliveSignalLed	;wreg free
  1903                           
  1904                           ;main.c: 40: if(1 == CheckFlashPrecentage())
  1905  00359A  EC3A  F017         	call	_CheckFlashPrecentage	;wreg free
  1906  00359E  06E8               	decf	wreg,f,c
  1907  0035A0  A4D8               	btfss	status,2,c
  1908  0035A2  D003               	goto	l1593
  1909                           
  1910                           ;main.c: 41: {
  1911                           ;main.c: 42: BlinkErrorLeds(FAIL_FLASH_MORE_THEN_HELF);
  1912  0035A4  0E02               	movlw	2
  1913  0035A6  ECF3  F01B         	call	_BlinkErrorLeds
  1914  0035AA                     l1593:
  1915                           
  1916                           ;main.c: 43: }
  1917                           ;main.c: 46: AdcConvert();
  1918  0035AA  ECDE  F007         	call	_AdcConvert	;wreg free
  1919                           
  1920                           ;main.c: 47: Timer0_Sampling = 0;
  1921  0035AE  0E00               	movlw	0
  1922  0035B0  0100               	movlb	0	; () banked
  1923  0035B2  6FF9               	movwf	_Timer0_Sampling& (0+255),b	;volatile
  1924                           
  1925                           ;main.c: 48: }
  1926  0035B4  D7E1               	goto	l1589
  1927  0035B6                     l1592:
  1928                           
  1929                           ; BSR set to: 0
  1930                           ;main.c: 49: else if (Timer0_KeepAlive == 1)
  1931                           
  1932                           ; BSR set to: 0
  1933  0035B6  05F8               	decf	_Timer0_KeepAlive& (0+255),w,b	;volatile
  1934  0035B8  A4D8               	btfss	status,2,c
  1935  0035BA  D006               	goto	l1595
  1936                           
  1937                           ; BSR set to: 0
  1938                           ;main.c: 50: {
  1939                           ;main.c: 51: keepAliveSignalUart();
  1940  0035BC  EC04  F022         	call	_keepAliveSignalUart	;wreg free
  1941                           
  1942                           ;main.c: 52: Timer0_KeepAlive = 0;
  1943  0035C0  0E00               	movlw	0
  1944  0035C2  0100               	movlb	0	; () banked
  1945  0035C4  6FF8               	movwf	_Timer0_KeepAlive& (0+255),b	;volatile
  1946                           
  1947                           ;main.c: 53: }
  1948  0035C6  D7D8               	goto	l1589
  1949  0035C8                     l1595:
  1950                           
  1951                           ; BSR set to: 0
  1952                           ;main.c: 54: else if (Timer0_SynthLd == 1)
  1953                           
  1954                           ; BSR set to: 0
  1955  0035C8  05FA               	decf	_Timer0_SynthLd& (0+255),w,b	;volatile
  1956  0035CA  A4D8               	btfss	status,2,c
  1957  0035CC  D7D5               	goto	l1589
  1958                           
  1959                           ; BSR set to: 0
  1960                           ;main.c: 55: {
  1961                           ;main.c: 56: SynthLdDetect();
  1962  0035CE  EC3C  F015         	call	_SynthLdDetect	;wreg free
  1963                           
  1964                           ;main.c: 57: Timer0_SynthLd = 0;
  1965  0035D2  0E00               	movlw	0
  1966  0035D4  0100               	movlb	0	; () banked
  1967  0035D6  6FFA               	movwf	_Timer0_SynthLd& (0+255),b	;volatile
  1968                           
  1969                           ; BSR set to: 0
  1970                           
  1971                           ; BSR set to: 0
  1972                           
  1973                           ; BSR set to: 0
  1974                           
  1975                           ; BSR set to: 0
  1976                           
  1977                           ; BSR set to: 0
  1978  0035D8  D7CF               	goto	l1589
  1979  0035DA                     __end_of_main:
  1980                           	opt stack 0
  1981                           tblptru	equ	0xFF8
  1982                           tblptrh	equ	0xFF7
  1983                           tblptrl	equ	0xFF6
  1984                           tablat	equ	0xFF5
  1985                           postinc0	equ	0xFEE
  1986                           wreg	equ	0xFE8
  1987                           postdec1	equ	0xFE5
  1988                           fsr1l	equ	0xFE1
  1989                           status	equ	0xFD8
  1990                           
  1991 ;; *************** function _readUartMessage *****************
  1992 ;; Defined at:
  1993 ;;		line 28 in file "EusartApp.c"
  1994 ;; Parameters:    Size  Location     Type
  1995 ;;		None
  1996 ;; Auto vars:     Size  Location     Type
  1997 ;;  idx             2  141[BANK0 ] int 
  1998 ;;  chRec           1  143[BANK0 ] unsigned char 
  1999 ;; Return value:  Size  Location     Type
  2000 ;;                  1    wreg      void 
  2001 ;; Registers used:
  2002 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2003 ;; Tracked objects:
  2004 ;;		On entry : 0/0
  2005 ;;		On exit  : 0/0
  2006 ;;		Unchanged: 0/0
  2007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2008 ;;      Params:         0       0       0       0       0       0       0
  2009 ;;      Locals:         0       3       0       0       0       0       0
  2010 ;;      Temps:          0       4       0       0       0       0       0
  2011 ;;      Totals:         0       7       0       0       0       0       0
  2012 ;;Total ram usage:        7 bytes
  2013 ;; Hardware stack levels used:    1
  2014 ;; Hardware stack levels required when called:   13
  2015 ;; This function calls:
  2016 ;;		_EUSART1_Read
  2017 ;;		_GroupAdc
  2018 ;;		_GroupControlMcu
  2019 ;;		_GroupDAC
  2020 ;;		_GroupFlashMemory
  2021 ;;		_GroupStatusAndVersion
  2022 ;;		_GroupSynthesizers
  2023 ;;		_InitRxMessageParams
  2024 ;;		_ZeroArray
  2025 ;;		_crc8
  2026 ;; This function is called by:
  2027 ;;		_main
  2028 ;; This function uses a non-reentrant model
  2029 ;;
  2030                           
  2031                           	psect	text1
  2032  0015C6                     __ptext1:
  2033                           	opt stack 0
  2034  0015C6                     _readUartMessage:
  2035                           	opt stack 17
  2036                           
  2037                           ;EusartApp.c: 31: uint8_t chRec = (0);
  2038                           
  2039                           ; BSR set to: 0
  2040                           ;incstack = 0
  2041  0015C6  0E00               	movlw	0
  2042  0015C8  0100               	movlb	0	; () banked
  2043  0015CA  6FEF               	movwf	readUartMessage@chRec& (0+255),b
  2044                           
  2045                           ;EusartApp.c: 32: switch(cState)
  2046  0015CC  D0D3               	goto	l202
  2047  0015CE                     
  2048                           ; BSR set to: 0
  2049                           ;EusartApp.c: 37: if(eusart1RxCount > (4))
  2050                           
  2051                           ; BSR set to: 0
  2052  0015CE  0E04               	movlw	4
  2053  0015D0  65F5               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2054  0015D2  0012               	return	
  2055                           
  2056                           ; BSR set to: 0
  2057                           ;EusartApp.c: 38: {
  2058                           ;EusartApp.c: 39: cState = FIND_MAGIC;
  2059  0015D4  0E01               	movlw	1
  2060  0015D6  6FF4               	movwf	_cState& (0+255),b
  2061                           
  2062                           ; BSR set to: 0
  2063                           ;EusartApp.c: 40: }
  2064                           ;EusartApp.c: 41: return;
  2065                           
  2066                           ; BSR set to: 0
  2067  0015D8  0012               	return	
  2068  0015DA                     
  2069                           ; BSR set to: 0
  2070                           ;EusartApp.c: 45: InitRxMessageParams();
  2071                           
  2072                           ; BSR set to: 0
  2073  0015DA  EC83  F020         	call	_InitRxMessageParams	;wreg free
  2074                           
  2075                           ;EusartApp.c: 46: msgCount = 0;
  2076  0015DE  0E00               	movlw	0
  2077  0015E0  0100               	movlb	0	; () banked
  2078  0015E2  6FF0               	movwf	_msgCount& (0+255),b
  2079                           
  2080                           ; BSR set to: 0
  2081                           ;EusartApp.c: 47: if(eusart1RxCount > 1)
  2082  0015E4  0E01               	movlw	1
  2083  0015E6  65F5               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2084  0015E8  D00D               	goto	l207
  2085                           
  2086                           ; BSR set to: 0
  2087                           ;EusartApp.c: 48: {
  2088                           ;EusartApp.c: 49: chRec = EUSART1_Read();
  2089  0015EA  ECFF  F01D         	call	_EUSART1_Read	;wreg free
  2090  0015EE  0100               	movlb	0	; () banked
  2091  0015F0  6FEF               	movwf	readUartMessage@chRec& (0+255),b
  2092                           
  2093                           ; BSR set to: 0
  2094                           ;EusartApp.c: 50: rxMsgQueue[(0)] = chRec;
  2095  0015F2  C0EF  F190         	movff	readUartMessage@chRec,_rxMsgQueue
  2096                           
  2097                           ; BSR set to: 0
  2098                           ;EusartApp.c: 51: if(chRec == (0x24))
  2099  0015F6  0E24               	movlw	36
  2100  0015F8  19EF               	xorwf	readUartMessage@chRec& (0+255),w,b
  2101  0015FA  A4D8               	btfss	status,2,c
  2102  0015FC  0012               	return	
  2103                           
  2104                           ; BSR set to: 0
  2105                           ;EusartApp.c: 52: {
  2106                           ;EusartApp.c: 53: cState = READ_GROUP;
  2107  0015FE  0E02               	movlw	2
  2108  001600  6FF4               	movwf	_cState& (0+255),b
  2109                           
  2110                           ; BSR set to: 0
  2111                           ;EusartApp.c: 54: }
  2112                           ;EusartApp.c: 55: }
  2113  001602  0012               	return	
  2114  001604                     l207:
  2115                           
  2116                           ; BSR set to: 0
  2117                           ;EusartApp.c: 56: else
  2118                           ;EusartApp.c: 57: {
  2119                           ;EusartApp.c: 58: cState = START_RX_MESSAGE_READ;
  2120                           
  2121                           ; BSR set to: 0
  2122  001604  0E00               	movlw	0
  2123  001606  6FF4               	movwf	_cState& (0+255),b
  2124                           
  2125                           ; BSR set to: 0
  2126                           ;EusartApp.c: 59: }
  2127                           ;EusartApp.c: 61: break;
  2128  001608  0012               	return	
  2129  00160A                     
  2130                           ; BSR set to: 0
  2131                           ;EusartApp.c: 65: if(eusart1RxCount > 1)
  2132                           
  2133                           ; BSR set to: 0
  2134  00160A  0E01               	movlw	1
  2135  00160C  65F5               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2136  00160E  0012               	return	
  2137                           
  2138                           ; BSR set to: 0
  2139                           ;EusartApp.c: 66: {
  2140                           ;EusartApp.c: 67: group = EUSART1_Read();
  2141  001610  ECFF  F01D         	call	_EUSART1_Read	;wreg free
  2142  001614  0100               	movlb	0	; () banked
  2143  001616  6FF3               	movwf	_group& (0+255),b
  2144                           
  2145                           ; BSR set to: 0
  2146                           ;EusartApp.c: 68: rxMsgQueue[(1)] = group;
  2147  001618  C0F3  F191         	movff	_group,_rxMsgQueue+1
  2148                           
  2149                           ; BSR set to: 0
  2150                           ;EusartApp.c: 69: cState = READ_REQUEST;
  2151  00161C  0E03               	movlw	3
  2152  00161E  6FF4               	movwf	_cState& (0+255),b
  2153                           
  2154                           ; BSR set to: 0
  2155                           ;EusartApp.c: 70: }
  2156                           ;EusartApp.c: 71: break;
  2157  001620  0012               	return	
  2158  001622                     
  2159                           ; BSR set to: 0
  2160                           ;EusartApp.c: 75: if(eusart1RxCount > 1)
  2161                           
  2162                           ; BSR set to: 0
  2163  001622  0E01               	movlw	1
  2164  001624  65F5               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2165  001626  0012               	return	
  2166                           
  2167                           ; BSR set to: 0
  2168                           ;EusartApp.c: 76: {
  2169                           ;EusartApp.c: 77: request = EUSART1_Read();
  2170  001628  ECFF  F01D         	call	_EUSART1_Read	;wreg free
  2171  00162C  0100               	movlb	0	; () banked
  2172  00162E  6FF2               	movwf	_request& (0+255),b
  2173                           
  2174                           ; BSR set to: 0
  2175                           ;EusartApp.c: 78: rxMsgQueue[(2)] = request;
  2176  001630  C0F2  F192         	movff	_request,_rxMsgQueue+2
  2177                           
  2178                           ; BSR set to: 0
  2179                           ;EusartApp.c: 79: cState = READ_DATA_SIZE;
  2180  001634  0E04               	movlw	4
  2181  001636  6FF4               	movwf	_cState& (0+255),b
  2182                           
  2183                           ; BSR set to: 0
  2184                           ;EusartApp.c: 80: }
  2185                           ;EusartApp.c: 81: break;
  2186  001638  0012               	return	
  2187  00163A                     
  2188                           ; BSR set to: 0
  2189                           ;EusartApp.c: 84: if(eusart1RxCount > 1)
  2190                           
  2191                           ; BSR set to: 0
  2192  00163A  0E01               	movlw	1
  2193  00163C  65F5               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2194  00163E  0012               	return	
  2195                           
  2196                           ; BSR set to: 0
  2197                           ;EusartApp.c: 85: {
  2198                           ;EusartApp.c: 86: dataSize = EUSART1_Read();
  2199  001640  ECFF  F01D         	call	_EUSART1_Read	;wreg free
  2200  001644  0100               	movlb	0	; () banked
  2201  001646  6FF1               	movwf	_dataSize& (0+255),b
  2202                           
  2203                           ; BSR set to: 0
  2204                           ;EusartApp.c: 87: rxMsgQueue[(3)] = dataSize;
  2205  001648  C0F1  F193         	movff	_dataSize,_rxMsgQueue+3
  2206                           
  2207                           ; BSR set to: 0
  2208                           ;EusartApp.c: 88: if(dataSize == 0)
  2209  00164C  51F1               	movf	_dataSize& (0+255),w,b
  2210  00164E  A4D8               	btfss	status,2,c
  2211  001650  D003               	goto	l217
  2212                           
  2213                           ; BSR set to: 0
  2214                           ;EusartApp.c: 89: {
  2215                           ;EusartApp.c: 90: cState = CHECK_CRC;
  2216  001652  0E06               	movlw	6
  2217  001654  6FF4               	movwf	_cState& (0+255),b
  2218                           
  2219                           ;EusartApp.c: 91: }
  2220  001656  0012               	return	
  2221  001658                     l217:
  2222                           
  2223                           ; BSR set to: 0
  2224                           ;EusartApp.c: 92: else
  2225                           ;EusartApp.c: 93: {
  2226                           ;EusartApp.c: 94: cState = READ_DATA;
  2227                           
  2228                           ; BSR set to: 0
  2229  001658  0E05               	movlw	5
  2230  00165A  6FF4               	movwf	_cState& (0+255),b
  2231                           
  2232                           ; BSR set to: 0
  2233                           ;EusartApp.c: 95: }
  2234                           ;EusartApp.c: 97: }
  2235                           ;EusartApp.c: 99: break;
  2236                           
  2237                           ; BSR set to: 0
  2238  00165C  0012               	return	
  2239  00165E                     
  2240                           ; BSR set to: 0
  2241                           ;EusartApp.c: 103: if(eusart1RxCount >= dataSize)
  2242                           
  2243                           ; BSR set to: 0
  2244  00165E  51F1               	movf	_dataSize& (0+255),w,b
  2245  001660  5DF5               	subwf	_eusart1RxCount& (0+255),w,b	;volatile
  2246  001662  A0D8               	btfss	status,0,c
  2247  001664  0012               	return	
  2248                           
  2249                           ; BSR set to: 0
  2250                           ;EusartApp.c: 104: {
  2251                           ;EusartApp.c: 105: ZeroArray(rxMsgData, (0x14));
  2252  001666  0E7C               	movlw	low _rxMsgData
  2253  001668  6E20               	movwf	ZeroArray@array,c
  2254  00166A  0E01               	movlw	high _rxMsgData
  2255  00166C  6E21               	movwf	ZeroArray@array+1,c
  2256  00166E  0E00               	movlw	0
  2257  001670  6E23               	movwf	ZeroArray@size+1,c
  2258  001672  0E14               	movlw	20
  2259  001674  6E22               	movwf	ZeroArray@size,c
  2260  001676  EC57  F021         	call	_ZeroArray	;wreg free
  2261                           
  2262                           ;EusartApp.c: 107: for(int idx = 0; idx < dataSize; idx++)
  2263  00167A  0E00               	movlw	0
  2264  00167C  0100               	movlb	0	; () banked
  2265  00167E  6FEE               	movwf	(readUartMessage@idx+1)& (0+255),b
  2266  001680  0E00               	movlw	0
  2267  001682  6FED               	movwf	readUartMessage@idx& (0+255),b
  2268  001684  D01E               	goto	l221
  2269  001686                     
  2270                           ; BSR set to: 0
  2271                           ;EusartApp.c: 108: {
  2272                           ;EusartApp.c: 109: chRec = EUSART1_Read();
  2273                           
  2274                           ; BSR set to: 0
  2275  001686  ECFF  F01D         	call	_EUSART1_Read	;wreg free
  2276  00168A  0100               	movlb	0	; () banked
  2277  00168C  6FEF               	movwf	readUartMessage@chRec& (0+255),b
  2278                           
  2279                           ; BSR set to: 0
  2280                           ;EusartApp.c: 110: rxMsgQueue[(0x4) + msgCount++] = chRec;
  2281  00168E  51F0               	movf	_msgCount& (0+255),w,b
  2282  001690  6FE9               	movwf	??_readUartMessage& (0+255),b
  2283  001692  6BEA               	clrf	(??_readUartMessage+1)& (0+255),b
  2284  001694  0E04               	movlw	4
  2285  001696  27E9               	addwf	??_readUartMessage& (0+255),f,b
  2286  001698  0E00               	movlw	0
  2287  00169A  23EA               	addwfc	(??_readUartMessage+1)& (0+255),f,b
  2288  00169C  0E90               	movlw	low _rxMsgQueue
  2289  00169E  25E9               	addwf	??_readUartMessage& (0+255),w,b
  2290  0016A0  6ED9               	movwf	fsr2l,c
  2291  0016A2  0E01               	movlw	high _rxMsgQueue
  2292  0016A4  21EA               	addwfc	(??_readUartMessage+1)& (0+255),w,b
  2293  0016A6  6EDA               	movwf	fsr2h,c
  2294  0016A8  C0EF  FFDF         	movff	readUartMessage@chRec,indf2
  2295                           
  2296                           ; BSR set to: 0
  2297  0016AC  2BF0               	incf	_msgCount& (0+255),f,b
  2298                           
  2299                           ; BSR set to: 0
  2300                           ;EusartApp.c: 111: rxMsgData[idx] = chRec;
  2301  0016AE  0E7C               	movlw	low _rxMsgData
  2302  0016B0  25ED               	addwf	readUartMessage@idx& (0+255),w,b
  2303  0016B2  6ED9               	movwf	fsr2l,c
  2304  0016B4  0E01               	movlw	high _rxMsgData
  2305  0016B6  21EE               	addwfc	(readUartMessage@idx+1)& (0+255),w,b
  2306  0016B8  6EDA               	movwf	fsr2h,c
  2307  0016BA  C0EF  FFDF         	movff	readUartMessage@chRec,indf2
  2308                           
  2309                           ; BSR set to: 0
  2310  0016BE  4BED               	infsnz	readUartMessage@idx& (0+255),f,b
  2311  0016C0  2BEE               	incf	(readUartMessage@idx+1)& (0+255),f,b
  2312  0016C2                     l221:
  2313                           
  2314                           ; BSR set to: 0
  2315                           
  2316                           ; BSR set to: 0
  2317  0016C2  51F1               	movf	_dataSize& (0+255),w,b
  2318  0016C4  6FE9               	movwf	??_readUartMessage& (0+255),b
  2319  0016C6  6BEA               	clrf	(??_readUartMessage+1)& (0+255),b
  2320  0016C8  51E9               	movf	??_readUartMessage& (0+255),w,b
  2321  0016CA  5DED               	subwf	readUartMessage@idx& (0+255),w,b
  2322  0016CC  51EE               	movf	(readUartMessage@idx+1)& (0+255),w,b
  2323  0016CE  0A80               	xorlw	128
  2324  0016D0  6FEB               	movwf	(??_readUartMessage+2)& (0+255),b
  2325  0016D2  51EA               	movf	(??_readUartMessage+1)& (0+255),w,b
  2326  0016D4  0A80               	xorlw	128
  2327  0016D6  59EB               	subwfb	(??_readUartMessage+2)& (0+255),w,b
  2328  0016D8  A0D8               	btfss	status,0,c
  2329  0016DA  D7D5               	goto	l222
  2330                           
  2331                           ; BSR set to: 0
  2332                           ;EusartApp.c: 112: }
  2333                           ;EusartApp.c: 114: cState = CHECK_CRC;
  2334                           
  2335                           ; BSR set to: 0
  2336  0016DC  0E06               	movlw	6
  2337  0016DE  6FF4               	movwf	_cState& (0+255),b
  2338                           
  2339                           ; BSR set to: 0
  2340                           ;EusartApp.c: 115: }
  2341                           ;EusartApp.c: 116: break;
  2342  0016E0  0012               	return	
  2343  0016E2                     
  2344                           ; BSR set to: 0
  2345                           ;EusartApp.c: 119: if(eusart1RxCount >= 1)
  2346                           
  2347                           ; BSR set to: 0
  2348  0016E2  51F5               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  2349  0016E4  B4D8               	btfsc	status,2,c
  2350  0016E6  0012               	return	
  2351                           
  2352                           ; BSR set to: 0
  2353                           ;EusartApp.c: 120: {
  2354                           ;EusartApp.c: 121: crcGiven = EUSART1_Read();
  2355  0016E8  ECFF  F01D         	call	_EUSART1_Read	;wreg free
  2356  0016EC  6E3B               	movwf	_crcGiven,c
  2357                           
  2358                           ;EusartApp.c: 122: crcCalc = crc8(rxMsgQueue, (0x4) + msgCount);
  2359  0016EE  0E90               	movlw	low _rxMsgQueue
  2360  0016F0  6E18               	movwf	crc8@dataArray,c
  2361  0016F2  0E01               	movlw	high _rxMsgQueue
  2362  0016F4  6E19               	movwf	crc8@dataArray+1,c
  2363  0016F6  0E04               	movlw	4
  2364  0016F8  0100               	movlb	0	; () banked
  2365  0016FA  25F0               	addwf	_msgCount& (0+255),w,b
  2366  0016FC  6E1A               	movwf	crc8@dataSize,c
  2367  0016FE  6A1B               	clrf	crc8@dataSize+1,c
  2368  001700  0E00               	movlw	0
  2369  001702  221B               	addwfc	crc8@dataSize+1,f,c
  2370  001704  ECD8  F01D         	call	_crc8	;wreg free
  2371  001708  6E3C               	movwf	_crcCalc,c
  2372                           
  2373                           ;EusartApp.c: 124: if(crcGiven == crcCalc)
  2374  00170A  503C               	movf	_crcCalc,w,c
  2375  00170C  183B               	xorwf	_crcGiven,w,c
  2376  00170E  A4D8               	btfss	status,2,c
  2377  001710  D004               	goto	l226
  2378                           
  2379                           ;EusartApp.c: 125: {
  2380                           ;EusartApp.c: 126: cState = JUMP_FUNCTION;
  2381  001712  0E07               	movlw	7
  2382  001714  0100               	movlb	0	; () banked
  2383  001716  6FF4               	movwf	_cState& (0+255),b
  2384                           
  2385                           ;EusartApp.c: 127: }
  2386  001718  0012               	return	
  2387  00171A                     l226:
  2388                           
  2389                           ;EusartApp.c: 128: else
  2390                           ;EusartApp.c: 129: {
  2391                           ;EusartApp.c: 130: cState = START_RX_MESSAGE_READ;
  2392                           
  2393                           ; BSR set to: 0
  2394  00171A  0E00               	movlw	0
  2395  00171C  0100               	movlb	0	; () banked
  2396  00171E  6FF4               	movwf	_cState& (0+255),b
  2397                           
  2398                           ; BSR set to: 0
  2399                           ;EusartApp.c: 131: }
  2400                           ;EusartApp.c: 132: }
  2401                           ;EusartApp.c: 133: break;
  2402                           
  2403                           ; BSR set to: 0
  2404  001720  0012               	return	
  2405  001722                     
  2406                           ; BSR set to: 0
  2407                           ;EusartApp.c: 136: groupsArray[group - 1](request, rxMsgData);
  2408                           
  2409                           ; BSR set to: 0
  2410  001722  0EFE               	movlw	254
  2411  001724  6FE9               	movwf	??_readUartMessage& (0+255),b
  2412  001726  0EFF               	movlw	255
  2413  001728  6FEA               	movwf	(??_readUartMessage+1)& (0+255),b
  2414  00172A  51F3               	movf	_group& (0+255),w,b
  2415  00172C  6FEB               	movwf	(??_readUartMessage+2)& (0+255),b
  2416  00172E  6BEC               	clrf	(??_readUartMessage+3)& (0+255),b
  2417  001730  90D8               	bcf	status,0,c
  2418  001732  37EB               	rlcf	(??_readUartMessage+2)& (0+255),f,b
  2419  001734  37EC               	rlcf	(??_readUartMessage+3)& (0+255),f,b
  2420  001736  51E9               	movf	??_readUartMessage& (0+255),w,b
  2421  001738  27EB               	addwf	(??_readUartMessage+2)& (0+255),f,b
  2422  00173A  51EA               	movf	(??_readUartMessage+1)& (0+255),w,b
  2423  00173C  23EC               	addwfc	(??_readUartMessage+3)& (0+255),f,b
  2424  00173E  0EBC               	movlw	low _groupsArray
  2425  001740  25EB               	addwf	(??_readUartMessage+2)& (0+255),w,b
  2426  001742  6ED9               	movwf	fsr2l,c
  2427  001744  0E01               	movlw	high _groupsArray
  2428  001746  21EC               	addwfc	(??_readUartMessage+3)& (0+255),w,b
  2429  001748  6EDA               	movwf	fsr2h,c
  2430  00174A  D801               	call	u8998
  2431  00174C  D00F               	goto	u8999
  2432  00174E                     u8998:
  2433  00174E  0005               	push	
  2434  001750  6EFA               	movwf	pclath,c
  2435  001752  50DE               	movf	postinc2,w,c
  2436  001754  6EFD               	movwf	tosl,c
  2437  001756  50DE               	movf	postinc2,w,c
  2438  001758  6EFE               	movwf	tosh,c
  2439  00175A  50F8               	movf	tblptru,w,c
  2440  00175C  6EFF               	movwf	tosu,c
  2441  00175E  50FA               	movf	pclath,w,c
  2442  001760  0E7C               	movlw	low _rxMsgData
  2443  001762  6FE6               	movwf	GroupDAC@data& (0+255),b
  2444  001764  0E01               	movlw	high _rxMsgData
  2445  001766  6FE7               	movwf	(GroupDAC@data+1)& (0+255),b
  2446  001768  51F2               	movf	_request& (0+255),w,b
  2447  00176A  0012               	return		;indir
  2448  00176C                     u8999:
  2449                           
  2450                           ;EusartApp.c: 137: cState = START_RX_MESSAGE_READ;
  2451  00176C  0E00               	movlw	0
  2452  00176E  0100               	movlb	0	; () banked
  2453  001770  6FF4               	movwf	_cState& (0+255),b
  2454                           
  2455                           ; BSR set to: 0
  2456                           ;EusartApp.c: 139: }
  2457                           
  2458                           ;EusartApp.c: 138: break;
  2459  001772  0012               	return	
  2460  001774                     l202:
  2461                           
  2462                           ; BSR set to: 0
  2463                           
  2464                           ; BSR set to: 0
  2465  001774  51F4               	movf	_cState& (0+255),w,b
  2466                           
  2467                           ; Switch size 1, requested type "space"
  2468                           ; Number of cases is 8, Range of values is 0 to 7
  2469                           ; switch strategies available:
  2470                           ; Name         Instructions Cycles
  2471                           ; simple_byte           25    13 (average)
  2472                           ;	Chosen strategy is simple_byte
  2473  001776  0A00               	xorlw	0	; case 0
  2474  001778  B4D8               	btfsc	status,2,c
  2475  00177A  D729               	goto	l203
  2476  00177C  0A01               	xorlw	1	; case 1
  2477  00177E  B4D8               	btfsc	status,2,c
  2478  001780  D72C               	goto	l206
  2479  001782  0A03               	xorlw	3	; case 2
  2480  001784  B4D8               	btfsc	status,2,c
  2481  001786  D741               	goto	l211
  2482  001788  0A01               	xorlw	1	; case 3
  2483  00178A  B4D8               	btfsc	status,2,c
  2484  00178C  D74A               	goto	l213
  2485  00178E  0A07               	xorlw	7	; case 4
  2486  001790  B4D8               	btfsc	status,2,c
  2487  001792  D753               	goto	l215
  2488  001794  0A01               	xorlw	1	; case 5
  2489  001796  B4D8               	btfsc	status,2,c
  2490  001798  D762               	goto	l219
  2491  00179A  0A03               	xorlw	3	; case 6
  2492  00179C  B4D8               	btfsc	status,2,c
  2493  00179E  D7A1               	goto	l224
  2494  0017A0  0A01               	xorlw	1	; case 7
  2495  0017A2  A4D8               	btfss	status,2,c
  2496  0017A4  0012               	return	
  2497  0017A6  D7BD               	goto	l228
  2498  0017A8                     __end_of_readUartMessage:
  2499                           	opt stack 0
  2500                           tosu	equ	0xFFF
  2501                           tosh	equ	0xFFE
  2502                           tosl	equ	0xFFD
  2503                           pclath	equ	0xFFA
  2504                           tblptru	equ	0xFF8
  2505                           tblptrh	equ	0xFF7
  2506                           tblptrl	equ	0xFF6
  2507                           tablat	equ	0xFF5
  2508                           postinc0	equ	0xFEE
  2509                           wreg	equ	0xFE8
  2510                           postdec1	equ	0xFE5
  2511                           fsr1l	equ	0xFE1
  2512                           indf2	equ	0xFDF
  2513                           postinc2	equ	0xFDE
  2514                           fsr2h	equ	0xFDA
  2515                           fsr2l	equ	0xFD9
  2516                           status	equ	0xFD8
  2517                           
  2518 ;; *************** function _InitRxMessageParams *****************
  2519 ;; Defined at:
  2520 ;;		line 142 in file "EusartApp.c"
  2521 ;; Parameters:    Size  Location     Type
  2522 ;;		None
  2523 ;; Auto vars:     Size  Location     Type
  2524 ;;		None
  2525 ;; Return value:  Size  Location     Type
  2526 ;;                  1    wreg      void 
  2527 ;; Registers used:
  2528 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2529 ;; Tracked objects:
  2530 ;;		On entry : 0/0
  2531 ;;		On exit  : 0/0
  2532 ;;		Unchanged: 0/0
  2533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2534 ;;      Params:         0       0       0       0       0       0       0
  2535 ;;      Locals:         0       0       0       0       0       0       0
  2536 ;;      Temps:          0       0       0       0       0       0       0
  2537 ;;      Totals:         0       0       0       0       0       0       0
  2538 ;;Total ram usage:        0 bytes
  2539 ;; Hardware stack levels used:    1
  2540 ;; Hardware stack levels required when called:    6
  2541 ;; This function calls:
  2542 ;;		_ZeroArray
  2543 ;; This function is called by:
  2544 ;;		_readUartMessage
  2545 ;; This function uses a non-reentrant model
  2546 ;;
  2547                           
  2548                           	psect	text2
  2549  004106                     __ptext2:
  2550                           	opt stack 0
  2551  004106                     _InitRxMessageParams:
  2552                           	opt stack 23
  2553                           
  2554                           ;EusartApp.c: 146: dataSize = 0;
  2555                           
  2556                           ; BSR set to: 0
  2557                           ;incstack = 0
  2558  004106  0E00               	movlw	0
  2559  004108  0100               	movlb	0	; () banked
  2560  00410A  6FF1               	movwf	_dataSize& (0+255),b
  2561                           
  2562                           ;EusartApp.c: 147: crcCalc = 0;
  2563  00410C  0E00               	movlw	0
  2564  00410E  6E3C               	movwf	_crcCalc,c
  2565                           
  2566                           ;EusartApp.c: 148: crcGiven = 0;
  2567  004110  0E00               	movlw	0
  2568  004112  6E3B               	movwf	_crcGiven,c
  2569                           
  2570                           ;EusartApp.c: 149: msgCount = 0;
  2571  004114  0E00               	movlw	0
  2572  004116  6FF0               	movwf	_msgCount& (0+255),b
  2573                           
  2574                           ; BSR set to: 0
  2575                           ;EusartApp.c: 150: ZeroArray(rxMsgQueue, (0x14));
  2576  004118  0E90               	movlw	low _rxMsgQueue
  2577  00411A  6E20               	movwf	ZeroArray@array,c
  2578  00411C  0E01               	movlw	high _rxMsgQueue
  2579  00411E  6E21               	movwf	ZeroArray@array+1,c
  2580  004120  0E00               	movlw	0
  2581  004122  6E23               	movwf	ZeroArray@size+1,c
  2582  004124  0E14               	movlw	20
  2583  004126  6E22               	movwf	ZeroArray@size,c
  2584  004128  EC57  F021         	call	_ZeroArray
  2585  00412C  0012               	return		;funcret
  2586  00412E                     __end_of_InitRxMessageParams:
  2587                           	opt stack 0
  2588                           tosu	equ	0xFFF
  2589                           tosh	equ	0xFFE
  2590                           tosl	equ	0xFFD
  2591                           pclath	equ	0xFFA
  2592                           tblptru	equ	0xFF8
  2593                           tblptrh	equ	0xFF7
  2594                           tblptrl	equ	0xFF6
  2595                           tablat	equ	0xFF5
  2596                           postinc0	equ	0xFEE
  2597                           wreg	equ	0xFE8
  2598                           postdec1	equ	0xFE5
  2599                           fsr1l	equ	0xFE1
  2600                           indf2	equ	0xFDF
  2601                           postinc2	equ	0xFDE
  2602                           fsr2h	equ	0xFDA
  2603                           fsr2l	equ	0xFD9
  2604                           status	equ	0xFD8
  2605                           
  2606 ;; *************** function _GroupDAC *****************
  2607 ;; Defined at:
  2608 ;;		line 125 in file "MessageFunctions.c"
  2609 ;; Parameters:    Size  Location     Type
  2610 ;;  request         1    wreg     enum E12
  2611 ;;  data            2  134[BANK0 ] PTR unsigned char 
  2612 ;;		 -> rxMsgData(20), 
  2613 ;; Auto vars:     Size  Location     Type
  2614 ;;  request         1  136[BANK0 ] enum E12
  2615 ;; Return value:  Size  Location     Type
  2616 ;;                  1    wreg      void 
  2617 ;; Registers used:
  2618 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2619 ;; Tracked objects:
  2620 ;;		On entry : 0/0
  2621 ;;		On exit  : 0/0
  2622 ;;		Unchanged: 0/0
  2623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2624 ;;      Params:         0       2       0       0       0       0       0
  2625 ;;      Locals:         0       1       0       0       0       0       0
  2626 ;;      Temps:          0       0       0       0       0       0       0
  2627 ;;      Totals:         0       3       0       0       0       0       0
  2628 ;;Total ram usage:        3 bytes
  2629 ;; Hardware stack levels used:    1
  2630 ;; Hardware stack levels required when called:   11
  2631 ;; This function calls:
  2632 ;;		_DacReadValue
  2633 ;;		_DacSetValue
  2634 ;; This function is called by:
  2635 ;;		_readUartMessage
  2636 ;; This function uses a non-reentrant model
  2637 ;;
  2638                           
  2639                           	psect	text3
  2640  003F80                     __ptext3:
  2641                           	opt stack 0
  2642  003F80                     _GroupDAC:
  2643                           	opt stack 18
  2644                           
  2645                           ;incstack = 0
  2646                           ;GroupDAC@request stored from wreg
  2647  003F80  0100               	movlb	0	; () banked
  2648  003F82  6FE8               	movwf	GroupDAC@request& (0+255),b
  2649                           
  2650                           ;MessageFunctions.c: 127: switch (request)
  2651  003F84  D00E               	goto	l1337
  2652  003F86                     
  2653                           ;MessageFunctions.c: 130: DacSetValue(data);
  2654  003F86  C0E6  F08A         	movff	GroupDAC@data,DacSetValue@data
  2655  003F8A  C0E7  F08B         	movff	GroupDAC@data+1,DacSetValue@data+1
  2656  003F8E  EC93  F018         	call	_DacSetValue	;wreg free
  2657                           
  2658                           ;MessageFunctions.c: 131: break;
  2659  003F92  0012               	return	
  2660  003F94                     
  2661                           ;MessageFunctions.c: 134: DacReadValue(data);
  2662  003F94  C0E6  F0C8         	movff	GroupDAC@data,DacReadValue@data
  2663  003F98  C0E7  F0C9         	movff	GroupDAC@data+1,DacReadValue@data+1
  2664  003F9C  ECE7  F013         	call	_DacReadValue	;wreg free
  2665                           
  2666                           ;MessageFunctions.c: 139: }
  2667                           
  2668                           ;MessageFunctions.c: 138: break;
  2669                           
  2670                           ;MessageFunctions.c: 137: default:
  2671                           
  2672                           ;MessageFunctions.c: 135: break;
  2673  003FA0  0012               	return	
  2674  003FA2                     l1337:
  2675  003FA2  0100               	movlb	0	; () banked
  2676  003FA4  51E8               	movf	GroupDAC@request& (0+255),w,b
  2677                           
  2678                           ; Switch size 1, requested type "space"
  2679                           ; Number of cases is 2, Range of values is 97 to 98
  2680                           ; switch strategies available:
  2681                           ; Name         Instructions Cycles
  2682                           ; simple_byte            7     4 (average)
  2683                           ;	Chosen strategy is simple_byte
  2684  003FA6  0A61               	xorlw	97	; case 97
  2685  003FA8  B4D8               	btfsc	status,2,c
  2686  003FAA  D7ED               	goto	l1338
  2687  003FAC  0A03               	xorlw	3	; case 98
  2688  003FAE  A4D8               	btfss	status,2,c
  2689  003FB0  0012               	return	
  2690  003FB2  D7F0               	goto	l1340
  2691  003FB4                     __end_of_GroupDAC:
  2692                           	opt stack 0
  2693                           tosu	equ	0xFFF
  2694                           tosh	equ	0xFFE
  2695                           tosl	equ	0xFFD
  2696                           pclath	equ	0xFFA
  2697                           tblptru	equ	0xFF8
  2698                           tblptrh	equ	0xFF7
  2699                           tblptrl	equ	0xFF6
  2700                           tablat	equ	0xFF5
  2701                           postinc0	equ	0xFEE
  2702                           wreg	equ	0xFE8
  2703                           postdec1	equ	0xFE5
  2704                           fsr1l	equ	0xFE1
  2705                           indf2	equ	0xFDF
  2706                           postinc2	equ	0xFDE
  2707                           fsr2h	equ	0xFDA
  2708                           fsr2l	equ	0xFD9
  2709                           status	equ	0xFD8
  2710                           
  2711 ;; *************** function _GroupFlashMemory *****************
  2712 ;; Defined at:
  2713 ;;		line 104 in file "MessageFunctions.c"
  2714 ;; Parameters:    Size  Location     Type
  2715 ;;  request         1    wreg     enum E12
  2716 ;;  data            2  134[BANK0 ] PTR unsigned char 
  2717 ;; Auto vars:     Size  Location     Type
  2718 ;;  request         1  136[BANK0 ] enum E12
  2719 ;; Return value:  Size  Location     Type
  2720 ;;                  1    wreg      void 
  2721 ;; Registers used:
  2722 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2723 ;; Tracked objects:
  2724 ;;		On entry : 0/0
  2725 ;;		On exit  : 0/0
  2726 ;;		Unchanged: 0/0
  2727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2728 ;;      Params:         0       2       0       0       0       0       0
  2729 ;;      Locals:         0       1       0       0       0       0       0
  2730 ;;      Temps:          0       0       0       0       0       0       0
  2731 ;;      Totals:         0       3       0       0       0       0       0
  2732 ;;Total ram usage:        3 bytes
  2733 ;; Hardware stack levels used:    1
  2734 ;; Hardware stack levels required when called:    9
  2735 ;; This function calls:
  2736 ;;		_FlashEreaseMem
  2737 ;;		_FlashReadCondition
  2738 ;;		_FlashReadUart
  2739 ;; This function is called by:
  2740 ;;		_readUartMessage
  2741 ;; This function uses a non-reentrant model
  2742 ;;
  2743                           
  2744                           	psect	text4
  2745  003DFC                     __ptext4:
  2746                           	opt stack 0
  2747  003DFC                     _GroupFlashMemory:
  2748                           	opt stack 20
  2749                           
  2750                           ;incstack = 0
  2751                           ;GroupFlashMemory@request stored from wreg
  2752  003DFC  0100               	movlb	0	; () banked
  2753  003DFE  6FE8               	movwf	GroupFlashMemory@request& (0+255),b
  2754                           
  2755                           ;MessageFunctions.c: 106: switch (request)
  2756  003E00  D00D               	goto	l1328
  2757  003E02                     
  2758                           ;MessageFunctions.c: 109: FlashEreaseMem();
  2759  003E02  EC86  F01D         	call	_FlashEreaseMem	;wreg free
  2760                           
  2761                           ;MessageFunctions.c: 110: break;
  2762  003E06  0012               	return	
  2763  003E08                     
  2764                           ;MessageFunctions.c: 113: FlashReadCondition();
  2765  003E08  EC02  F011         	call	_FlashReadCondition	;wreg free
  2766                           
  2767                           ;MessageFunctions.c: 114: break;
  2768  003E0C  0012               	return	
  2769  003E0E                     
  2770                           ;MessageFunctions.c: 117: FlashReadUart(data);
  2771  003E0E  C0E6  F087         	movff	GroupFlashMemory@data,FlashReadUart@data
  2772  003E12  C0E7  F088         	movff	GroupFlashMemory@data+1,FlashReadUart@data+1
  2773  003E16  ECEC  F008         	call	_FlashReadUart	;wreg free
  2774                           
  2775                           ;MessageFunctions.c: 122: }
  2776                           
  2777                           ;MessageFunctions.c: 121: break;
  2778                           
  2779                           ;MessageFunctions.c: 120: default:
  2780                           
  2781                           ;MessageFunctions.c: 118: break;
  2782  003E1A  0012               	return	
  2783  003E1C                     l1328:
  2784  003E1C  0100               	movlb	0	; () banked
  2785  003E1E  51E8               	movf	GroupFlashMemory@request& (0+255),w,b
  2786                           
  2787                           ; Switch size 1, requested type "space"
  2788                           ; Number of cases is 3, Range of values is 81 to 83
  2789                           ; switch strategies available:
  2790                           ; Name         Instructions Cycles
  2791                           ; simple_byte           10     6 (average)
  2792                           ;	Chosen strategy is simple_byte
  2793  003E20  0A51               	xorlw	81	; case 81
  2794  003E22  B4D8               	btfsc	status,2,c
  2795  003E24  D7EE               	goto	l1329
  2796  003E26  0A03               	xorlw	3	; case 82
  2797  003E28  B4D8               	btfsc	status,2,c
  2798  003E2A  D7EE               	goto	l1331
  2799  003E2C  0A01               	xorlw	1	; case 83
  2800  003E2E  A4D8               	btfss	status,2,c
  2801  003E30  0012               	return	
  2802  003E32  D7ED               	goto	l1332
  2803  003E34                     __end_of_GroupFlashMemory:
  2804                           	opt stack 0
  2805                           tosu	equ	0xFFF
  2806                           tosh	equ	0xFFE
  2807                           tosl	equ	0xFFD
  2808                           pclath	equ	0xFFA
  2809                           tblptru	equ	0xFF8
  2810                           tblptrh	equ	0xFF7
  2811                           tblptrl	equ	0xFF6
  2812                           tablat	equ	0xFF5
  2813                           postinc0	equ	0xFEE
  2814                           wreg	equ	0xFE8
  2815                           postdec1	equ	0xFE5
  2816                           fsr1l	equ	0xFE1
  2817                           indf2	equ	0xFDF
  2818                           postinc2	equ	0xFDE
  2819                           fsr2h	equ	0xFDA
  2820                           fsr2l	equ	0xFD9
  2821                           status	equ	0xFD8
  2822                           
  2823 ;; *************** function _GroupAdc *****************
  2824 ;; Defined at:
  2825 ;;		line 51 in file "MessageFunctions.c"
  2826 ;; Parameters:    Size  Location     Type
  2827 ;;  request         1    wreg     enum E12
  2828 ;;  data            2  134[BANK0 ] PTR unsigned char 
  2829 ;; Auto vars:     Size  Location     Type
  2830 ;;  request         1  136[BANK0 ] enum E12
  2831 ;; Return value:  Size  Location     Type
  2832 ;;                  1    wreg      void 
  2833 ;; Registers used:
  2834 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2835 ;; Tracked objects:
  2836 ;;		On entry : 0/0
  2837 ;;		On exit  : 0/0
  2838 ;;		Unchanged: 0/0
  2839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2840 ;;      Params:         0       2       0       0       0       0       0
  2841 ;;      Locals:         0       1       0       0       0       0       0
  2842 ;;      Temps:          0       0       0       0       0       0       0
  2843 ;;      Totals:         0       3       0       0       0       0       0
  2844 ;;Total ram usage:        3 bytes
  2845 ;; Hardware stack levels used:    1
  2846 ;; Hardware stack levels required when called:    8
  2847 ;; This function calls:
  2848 ;;		_SetChannelMode
  2849 ;; This function is called by:
  2850 ;;		_readUartMessage
  2851 ;; This function uses a non-reentrant model
  2852 ;;
  2853                           
  2854                           	psect	text5
  2855  004252                     __ptext5:
  2856                           	opt stack 0
  2857  004252                     _GroupAdc:
  2858                           	opt stack 21
  2859                           
  2860                           ;incstack = 0
  2861                           ;GroupAdc@request stored from wreg
  2862  004252  0100               	movlb	0	; () banked
  2863  004254  6FE8               	movwf	GroupAdc@request& (0+255),b
  2864                           
  2865                           ;MessageFunctions.c: 53: switch (request)
  2866  004256  D007               	goto	l1307
  2867  004258                     
  2868                           ;MessageFunctions.c: 56: SetChannelMode(data);
  2869  004258  C0E6  F02C         	movff	GroupAdc@data,SetChannelMode@data
  2870  00425C  C0E7  F02D         	movff	GroupAdc@data+1,SetChannelMode@data+1
  2871  004260  EC26  F020         	call	_SetChannelMode	;wreg free
  2872                           
  2873                           ;MessageFunctions.c: 61: }
  2874                           
  2875                           ;MessageFunctions.c: 60: break;
  2876                           
  2877                           ;MessageFunctions.c: 59: default:
  2878                           
  2879                           ;MessageFunctions.c: 57: break;
  2880  004264  0012               	return	
  2881  004266                     l1307:
  2882  004266  0100               	movlb	0	; () banked
  2883  004268  51E8               	movf	GroupAdc@request& (0+255),w,b
  2884                           
  2885                           ; Switch size 1, requested type "space"
  2886                           ; Number of cases is 1, Range of values is 50 to 50
  2887                           ; switch strategies available:
  2888                           ; Name         Instructions Cycles
  2889                           ; simple_byte            4     3 (average)
  2890                           ;	Chosen strategy is simple_byte
  2891  00426A  0A32               	xorlw	50	; case 50
  2892  00426C  A4D8               	btfss	status,2,c
  2893  00426E  0012               	return	
  2894  004270  D7F3               	goto	l1308
  2895  004272                     __end_of_GroupAdc:
  2896                           	opt stack 0
  2897                           tosu	equ	0xFFF
  2898                           tosh	equ	0xFFE
  2899                           tosl	equ	0xFFD
  2900                           pclath	equ	0xFFA
  2901                           tblptru	equ	0xFF8
  2902                           tblptrh	equ	0xFF7
  2903                           tblptrl	equ	0xFF6
  2904                           tablat	equ	0xFF5
  2905                           postinc0	equ	0xFEE
  2906                           wreg	equ	0xFE8
  2907                           postdec1	equ	0xFE5
  2908                           fsr1l	equ	0xFE1
  2909                           indf2	equ	0xFDF
  2910                           postinc2	equ	0xFDE
  2911                           fsr2h	equ	0xFDA
  2912                           fsr2l	equ	0xFD9
  2913                           status	equ	0xFD8
  2914                           
  2915 ;; *************** function _GroupStatusAndVersion *****************
  2916 ;; Defined at:
  2917 ;;		line 34 in file "MessageFunctions.c"
  2918 ;; Parameters:    Size  Location     Type
  2919 ;;  request         1    wreg     enum E12
  2920 ;;  data            3  134[BANK0 ] PTR unsigned char 
  2921 ;; Auto vars:     Size  Location     Type
  2922 ;;  request         1  137[BANK0 ] enum E12
  2923 ;; Return value:  Size  Location     Type
  2924 ;;                  1    wreg      void 
  2925 ;; Registers used:
  2926 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2927 ;; Tracked objects:
  2928 ;;		On entry : 0/0
  2929 ;;		On exit  : 0/0
  2930 ;;		Unchanged: 0/0
  2931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2932 ;;      Params:         0       2       0       0       0       0       0
  2933 ;;      Locals:         0       1       0       0       0       0       0
  2934 ;;      Temps:          0       0       0       0       0       0       0
  2935 ;;      Totals:         0       3       0       0       0       0       0
  2936 ;;Total ram usage:        3 bytes
  2937 ;; Hardware stack levels used:    1
  2938 ;; Hardware stack levels required when called:    7
  2939 ;; This function calls:
  2940 ;;		_GetMcuFwVersion
  2941 ;;		_GetMcuRunTime
  2942 ;; This function is called by:
  2943 ;;		_readUartMessage
  2944 ;; This function uses a non-reentrant model
  2945 ;;
  2946                           
  2947                           	psect	text6
  2948  0041A2                     __ptext6:
  2949                           	opt stack 0
  2950  0041A2                     _GroupStatusAndVersion:
  2951                           	opt stack 22
  2952                           
  2953                           ;incstack = 0
  2954                           ;GroupStatusAndVersion@request stored from wreg
  2955  0041A2  0100               	movlb	0	; () banked
  2956  0041A4  6FE9               	movwf	GroupStatusAndVersion@request& (0+255),b
  2957                           
  2958                           ;MessageFunctions.c: 36: switch (request)
  2959  0041A6  D006               	goto	l1299
  2960  0041A8                     
  2961                           ;MessageFunctions.c: 39: GetMcuFwVersion();
  2962  0041A8  EC53  F003         	call	_GetMcuFwVersion	;wreg free
  2963                           
  2964                           ;MessageFunctions.c: 40: break;
  2965  0041AC  0012               	return	
  2966  0041AE                     
  2967                           ;MessageFunctions.c: 43: GetMcuRunTime();
  2968  0041AE  EC75  F013         	call	_GetMcuRunTime	;wreg free
  2969                           
  2970                           ;MessageFunctions.c: 48: }
  2971                           
  2972                           ;MessageFunctions.c: 47: break;
  2973                           
  2974                           ;MessageFunctions.c: 46: default:
  2975                           
  2976                           ;MessageFunctions.c: 44: break;
  2977  0041B2  0012               	return	
  2978  0041B4                     l1299:
  2979  0041B4  0100               	movlb	0	; () banked
  2980  0041B6  51E9               	movf	GroupStatusAndVersion@request& (0+255),w,b
  2981                           
  2982                           ; Switch size 1, requested type "space"
  2983                           ; Number of cases is 2, Range of values is 33 to 34
  2984                           ; switch strategies available:
  2985                           ; Name         Instructions Cycles
  2986                           ; simple_byte            7     4 (average)
  2987                           ;	Chosen strategy is simple_byte
  2988  0041B8  0A21               	xorlw	33	; case 33
  2989  0041BA  B4D8               	btfsc	status,2,c
  2990  0041BC  D7F8               	goto	l1302
  2991  0041BE  0A03               	xorlw	3	; case 34
  2992  0041C0  A4D8               	btfss	status,2,c
  2993  0041C2  0012               	return	
  2994  0041C4  D7F1               	goto	l1300
  2995  0041C6                     __end_of_GroupStatusAndVersion:
  2996                           	opt stack 0
  2997                           tosu	equ	0xFFF
  2998                           tosh	equ	0xFFE
  2999                           tosl	equ	0xFFD
  3000                           pclath	equ	0xFFA
  3001                           tblptru	equ	0xFF8
  3002                           tblptrh	equ	0xFF7
  3003                           tblptrl	equ	0xFF6
  3004                           tablat	equ	0xFF5
  3005                           postinc0	equ	0xFEE
  3006                           wreg	equ	0xFE8
  3007                           postdec1	equ	0xFE5
  3008                           fsr1l	equ	0xFE1
  3009                           indf2	equ	0xFDF
  3010                           postinc2	equ	0xFDE
  3011                           fsr2h	equ	0xFDA
  3012                           fsr2l	equ	0xFD9
  3013                           status	equ	0xFD8
  3014                           
  3015 ;; *************** function _GroupControlMcu *****************
  3016 ;; Defined at:
  3017 ;;		line 11 in file "MessageFunctions.c"
  3018 ;; Parameters:    Size  Location     Type
  3019 ;;  request         1    wreg     enum E12
  3020 ;;  data            3  134[BANK0 ] PTR unsigned char 
  3021 ;; Auto vars:     Size  Location     Type
  3022 ;;  request         1  137[BANK0 ] enum E12
  3023 ;; Return value:  Size  Location     Type
  3024 ;;                  1    wreg      void 
  3025 ;; Registers used:
  3026 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3027 ;; Tracked objects:
  3028 ;;		On entry : 0/0
  3029 ;;		On exit  : 0/0
  3030 ;;		Unchanged: 0/0
  3031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3032 ;;      Params:         0       2       0       0       0       0       0
  3033 ;;      Locals:         0       1       0       0       0       0       0
  3034 ;;      Temps:          0       0       0       0       0       0       0
  3035 ;;      Totals:         0       3       0       0       0       0       0
  3036 ;;Total ram usage:        3 bytes
  3037 ;; Hardware stack levels used:    1
  3038 ;; Hardware stack levels required when called:    8
  3039 ;; This function calls:
  3040 ;;		_ResetMcu
  3041 ;;		_testLeds
  3042 ;; This function is called by:
  3043 ;;		_readUartMessage
  3044 ;; This function uses a non-reentrant model
  3045 ;;
  3046                           
  3047                           	psect	text7
  3048  00401C                     __ptext7:
  3049                           	opt stack 0
  3050  00401C                     _GroupControlMcu:
  3051                           	opt stack 21
  3052                           
  3053                           ;incstack = 0
  3054                           ;GroupControlMcu@request stored from wreg
  3055  00401C  0100               	movlb	0	; () banked
  3056  00401E  6FE9               	movwf	GroupControlMcu@request& (0+255),b
  3057                           
  3058                           ;MessageFunctions.c: 13: switch (request)
  3059  004020  D006               	goto	l1289
  3060  004022                     
  3061                           ;MessageFunctions.c: 16: testLeds();
  3062  004022  EC25  F01B         	call	_testLeds	;wreg free
  3063                           
  3064                           ;MessageFunctions.c: 17: break;
  3065  004026  0012               	return	
  3066  004028                     
  3067                           ;MessageFunctions.c: 20: ResetMcu();
  3068  004028  ECE8  F021         	call	_ResetMcu	;wreg free
  3069                           
  3070                           ;MessageFunctions.c: 31: }
  3071                           
  3072                           ;MessageFunctions.c: 30: break;
  3073                           
  3074                           ;MessageFunctions.c: 29: default:
  3075                           
  3076                           ;MessageFunctions.c: 27: break;
  3077                           
  3078                           ;MessageFunctions.c: 26: case CONTROL_PA2_SET:
  3079                           
  3080                           ;MessageFunctions.c: 24: break;
  3081                           
  3082                           ;MessageFunctions.c: 23: case CONTROL_PA1_SET:
  3083                           
  3084                           ;MessageFunctions.c: 21: break;
  3085  00402C  0012               	return	
  3086  00402E                     l1289:
  3087  00402E  0100               	movlb	0	; () banked
  3088  004030  51E9               	movf	GroupControlMcu@request& (0+255),w,b
  3089                           
  3090                           ; Switch size 1, requested type "space"
  3091                           ; Number of cases is 4, Range of values is 17 to 20
  3092                           ; switch strategies available:
  3093                           ; Name         Instructions Cycles
  3094                           ; simple_byte           13     7 (average)
  3095                           ;	Chosen strategy is simple_byte
  3096  004032  0A11               	xorlw	17	; case 17
  3097  004034  B4D8               	btfsc	status,2,c
  3098  004036  D7F8               	goto	l1292
  3099  004038  0A03               	xorlw	3	; case 18
  3100  00403A  B4D8               	btfsc	status,2,c
  3101  00403C  0012               	return	
  3102  00403E  0A01               	xorlw	1	; case 19
  3103  004040  B4D8               	btfsc	status,2,c
  3104  004042  0012               	return	
  3105  004044  0A07               	xorlw	7	; case 20
  3106  004046  A4D8               	btfss	status,2,c
  3107  004048  0012               	return	
  3108  00404A  D7EB               	goto	l1290
  3109  00404C                     __end_of_GroupControlMcu:
  3110                           	opt stack 0
  3111                           tosu	equ	0xFFF
  3112                           tosh	equ	0xFFE
  3113                           tosl	equ	0xFFD
  3114                           pclath	equ	0xFFA
  3115                           tblptru	equ	0xFF8
  3116                           tblptrh	equ	0xFF7
  3117                           tblptrl	equ	0xFF6
  3118                           tablat	equ	0xFF5
  3119                           postinc0	equ	0xFEE
  3120                           wreg	equ	0xFE8
  3121                           postdec1	equ	0xFE5
  3122                           fsr1l	equ	0xFE1
  3123                           indf2	equ	0xFDF
  3124                           postinc2	equ	0xFDE
  3125                           fsr2h	equ	0xFDA
  3126                           fsr2l	equ	0xFD9
  3127                           status	equ	0xFD8
  3128                           
  3129 ;; *************** function _GroupSynthesizers *****************
  3130 ;; Defined at:
  3131 ;;		line 63 in file "MessageFunctions.c"
  3132 ;; Parameters:    Size  Location     Type
  3133 ;;  request         1    wreg     enum E12
  3134 ;;  data            2  134[BANK0 ] PTR unsigned char 
  3135 ;; Auto vars:     Size  Location     Type
  3136 ;;  request         1  136[BANK0 ] enum E12
  3137 ;; Return value:  Size  Location     Type
  3138 ;;                  1    wreg      void 
  3139 ;; Registers used:
  3140 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3141 ;; Tracked objects:
  3142 ;;		On entry : 0/0
  3143 ;;		On exit  : 0/0
  3144 ;;		Unchanged: 0/0
  3145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3146 ;;      Params:         0       2       0       0       0       0       0
  3147 ;;      Locals:         0       1       0       0       0       0       0
  3148 ;;      Temps:          0       0       0       0       0       0       0
  3149 ;;      Totals:         0       3       0       0       0       0       0
  3150 ;;Total ram usage:        3 bytes
  3151 ;; Hardware stack levels used:    1
  3152 ;; Hardware stack levels required when called:   12
  3153 ;; This function calls:
  3154 ;;		_SetSynthOper
  3155 ;;		_SynthReadData
  3156 ;;		_UpdateSynthFreq
  3157 ;; This function is called by:
  3158 ;;		_readUartMessage
  3159 ;; This function uses a non-reentrant model
  3160 ;;
  3161                           
  3162                           	psect	text8
  3163  0032E4                     __ptext8:
  3164                           	opt stack 0
  3165  0032E4                     _GroupSynthesizers:
  3166                           	opt stack 17
  3167                           
  3168                           ;incstack = 0
  3169                           ;GroupSynthesizers@request stored from wreg
  3170  0032E4  0100               	movlb	0	; () banked
  3171  0032E6  6FE8               	movwf	GroupSynthesizers@request& (0+255),b
  3172                           
  3173                           ;MessageFunctions.c: 65: switch (request)
  3174  0032E8  D028               	goto	l1314
  3175  0032EA                     
  3176                           ;MessageFunctions.c: 76: UpdateSynthFreq(SYNTH_TX, data);
  3177  0032EA  C0E6  F08A         	movff	GroupSynthesizers@data,UpdateSynthFreq@data
  3178  0032EE  C0E7  F08B         	movff	GroupSynthesizers@data+1,UpdateSynthFreq@data+1
  3179  0032F2  0E00               	movlw	0
  3180  0032F4  EC96  F00D         	call	_UpdateSynthFreq
  3181                           
  3182                           ;MessageFunctions.c: 77: break;
  3183  0032F8  0012               	return	
  3184  0032FA                     
  3185                           ;MessageFunctions.c: 80: UpdateSynthFreq(SYNTH_RX, data);
  3186  0032FA  C0E6  F08A         	movff	GroupSynthesizers@data,UpdateSynthFreq@data
  3187  0032FE  C0E7  F08B         	movff	GroupSynthesizers@data+1,UpdateSynthFreq@data+1
  3188  003302  0E01               	movlw	1
  3189  003304  EC96  F00D         	call	_UpdateSynthFreq
  3190                           
  3191                           ;MessageFunctions.c: 81: break;
  3192  003308  0012               	return	
  3193  00330A                     
  3194                           ;MessageFunctions.c: 84: SetSynthOper(SYNTH_RX);
  3195  00330A  0E01               	movlw	1
  3196  00330C  EC38  F01A         	call	_SetSynthOper
  3197                           
  3198                           ;MessageFunctions.c: 85: break;
  3199  003310  0012               	return	
  3200  003312                     
  3201                           ;MessageFunctions.c: 88: SetSynthOper(SYNTH_TX);
  3202  003312  0E00               	movlw	0
  3203  003314  EC38  F01A         	call	_SetSynthOper
  3204                           
  3205                           ;MessageFunctions.c: 89: break;
  3206  003318  0012               	return	
  3207  00331A                     
  3208                           ;MessageFunctions.c: 92: SynthReadData(SYNTH_RX, data);
  3209  00331A  C0E6  F0C8         	movff	GroupSynthesizers@data,SynthReadData@data
  3210  00331E  C0E7  F0C9         	movff	GroupSynthesizers@data+1,SynthReadData@data+1
  3211  003322  0E01               	movlw	1
  3212  003324  EC4B  F005         	call	_SynthReadData
  3213                           
  3214                           ;MessageFunctions.c: 93: break;
  3215  003328  0012               	return	
  3216  00332A                     
  3217                           ;MessageFunctions.c: 96: SynthReadData(SYNTH_TX, data);
  3218  00332A  C0E6  F0C8         	movff	GroupSynthesizers@data,SynthReadData@data
  3219  00332E  C0E7  F0C9         	movff	GroupSynthesizers@data+1,SynthReadData@data+1
  3220  003332  0E00               	movlw	0
  3221  003334  EC4B  F005         	call	_SynthReadData
  3222                           
  3223                           ;MessageFunctions.c: 101: }
  3224                           
  3225                           ;MessageFunctions.c: 100: break;
  3226                           
  3227                           ;MessageFunctions.c: 99: default:
  3228                           
  3229                           ;MessageFunctions.c: 97: break;
  3230  003338  0012               	return	
  3231  00333A                     l1314:
  3232  00333A  0100               	movlb	0	; () banked
  3233  00333C  51E8               	movf	GroupSynthesizers@request& (0+255),w,b
  3234                           
  3235                           ; Switch size 1, requested type "space"
  3236                           ; Number of cases is 8, Range of values is 64 to 71
  3237                           ; switch strategies available:
  3238                           ; Name         Instructions Cycles
  3239                           ; simple_byte           25    13 (average)
  3240                           ;	Chosen strategy is simple_byte
  3241  00333E  0A40               	xorlw	64	; case 64
  3242  003340  B4D8               	btfsc	status,2,c
  3243  003342  0012               	return	
  3244  003344  0A01               	xorlw	1	; case 65
  3245  003346  B4D8               	btfsc	status,2,c
  3246  003348  0012               	return	
  3247  00334A  0A03               	xorlw	3	; case 66
  3248  00334C  B4D8               	btfsc	status,2,c
  3249  00334E  D7CD               	goto	l1318
  3250  003350  0A01               	xorlw	1	; case 67
  3251  003352  B4D8               	btfsc	status,2,c
  3252  003354  D7D2               	goto	l1319
  3253  003356  0A07               	xorlw	7	; case 68
  3254  003358  B4D8               	btfsc	status,2,c
  3255  00335A  D7D7               	goto	l1320
  3256  00335C  0A01               	xorlw	1	; case 69
  3257  00335E  B4D8               	btfsc	status,2,c
  3258  003360  D7D8               	goto	l1321
  3259  003362  0A03               	xorlw	3	; case 70
  3260  003364  B4D8               	btfsc	status,2,c
  3261  003366  D7D9               	goto	l1322
  3262  003368  0A01               	xorlw	1	; case 71
  3263  00336A  A4D8               	btfss	status,2,c
  3264  00336C  0012               	return	
  3265  00336E  D7DD               	goto	l1323
  3266  003370                     __end_of_GroupSynthesizers:
  3267                           	opt stack 0
  3268                           tosu	equ	0xFFF
  3269                           tosh	equ	0xFFE
  3270                           tosl	equ	0xFFD
  3271                           pclath	equ	0xFFA
  3272                           tblptru	equ	0xFF8
  3273                           tblptrh	equ	0xFF7
  3274                           tblptrl	equ	0xFF6
  3275                           tablat	equ	0xFF5
  3276                           postinc0	equ	0xFEE
  3277                           wreg	equ	0xFE8
  3278                           postdec1	equ	0xFE5
  3279                           fsr1l	equ	0xFE1
  3280                           indf2	equ	0xFDF
  3281                           postinc2	equ	0xFDE
  3282                           fsr2h	equ	0xFDA
  3283                           fsr2l	equ	0xFD9
  3284                           status	equ	0xFD8
  3285                           
  3286 ;; *************** function _UpdateSynthFreq *****************
  3287 ;; Defined at:
  3288 ;;		line 89 in file "SyntApp.c"
  3289 ;; Parameters:    Size  Location     Type
  3290 ;;  cType           1    wreg     enum E1
  3291 ;;  data            2   42[BANK0 ] PTR unsigned char 
  3292 ;; Auto vars:     Size  Location     Type
  3293 ;;  cType           1   44[BANK0 ] enum E1
  3294 ;;  retVal          8   45[BANK0 ] struct .
  3295 ;; Return value:  Size  Location     Type
  3296 ;;                  1    wreg      void 
  3297 ;; Registers used:
  3298 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3299 ;; Tracked objects:
  3300 ;;		On entry : 0/0
  3301 ;;		On exit  : 0/0
  3302 ;;		Unchanged: 0/0
  3303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3304 ;;      Params:         0       2       0       0       0       0       0
  3305 ;;      Locals:         0       9       0       0       0       0       0
  3306 ;;      Temps:          0       0       0       0       0       0       0
  3307 ;;      Totals:         0      11       0       0       0       0       0
  3308 ;;Total ram usage:       11 bytes
  3309 ;; Hardware stack levels used:    1
  3310 ;; Hardware stack levels required when called:    8
  3311 ;; This function calls:
  3312 ;;		_GetIntFromUartData
  3313 ;;		_SWSPI_send_word
  3314 ;;		_SendAckMessage
  3315 ;;		_StoreIntInEeprom
  3316 ;; This function is called by:
  3317 ;;		_GroupSynthesizers
  3318 ;; This function uses a non-reentrant model
  3319 ;;
  3320                           
  3321                           	psect	text9
  3322  001B2C                     __ptext9:
  3323                           	opt stack 0
  3324  001B2C                     _UpdateSynthFreq:
  3325                           	opt stack 20
  3326                           
  3327                           ;incstack = 0
  3328                           ;UpdateSynthFreq@cType stored from wreg
  3329  001B2C  0100               	movlb	0	; () banked
  3330  001B2E  6F8C               	movwf	UpdateSynthFreq@cType& (0+255),b
  3331                           
  3332                           ;SyntApp.c: 91: INT_VAL retVal;
  3333                           ;SyntApp.c: 93: retVal = GetIntFromUartData(10, data);
  3334  001B30  C08A  F066         	movff	UpdateSynthFreq@data,GetIntFromUartData@data
  3335  001B34  C08B  F067         	movff	UpdateSynthFreq@data+1,GetIntFromUartData@data+1
  3336  001B38  0E0A               	movlw	10
  3337  001B3A  EC1C  F00F         	call	_GetIntFromUartData
  3338  001B3E  EE20  F08D         	lfsr	2,UpdateSynthFreq@retVal
  3339  001B42  0E07               	movlw	7
  3340  001B44                     u8481:
  3341  001B44  CFEB FFDB          	movff	plusw0,plusw2
  3342  001B48  06E8               	decf	wreg,f,c
  3343  001B4A  E2FC               	bc	u8481
  3344                           
  3345                           ;SyntApp.c: 95: if(retVal.con == 0xb)
  3346  001B4C  0E0B               	movlw	11
  3347  001B4E  0100               	movlb	0	; () banked
  3348  001B50  1991               	xorwf	(UpdateSynthFreq@retVal+4)& (0+255),w,b
  3349  001B52  1192               	iorwf	(UpdateSynthFreq@retVal+5)& (0+255),w,b
  3350  001B54  1193               	iorwf	(UpdateSynthFreq@retVal+6)& (0+255),w,b
  3351  001B56  1194               	iorwf	(UpdateSynthFreq@retVal+7)& (0+255),w,b
  3352  001B58  A4D8               	btfss	status,2,c
  3353  001B5A  D037               	goto	l526
  3354                           
  3355                           ; BSR set to: 0
  3356                           ;SyntApp.c: 96: {
  3357                           ;SyntApp.c: 97: if(cType == SYNTH_TX) StoreIntInEeprom(retVal.num, (0) | SYNTH_ADDRES[re
      +                          tVal.con], 4);
  3358  001B5C  518C               	movf	UpdateSynthFreq@cType& (0+255),w,b
  3359  001B5E  A4D8               	btfss	status,2,c
  3360  001B60  D018               	goto	l524
  3361                           
  3362                           ; BSR set to: 0
  3363  001B62  C08D  F021         	movff	UpdateSynthFreq@retVal,StoreIntInEeprom@data
  3364  001B66  C08E  F022         	movff	UpdateSynthFreq@retVal+1,StoreIntInEeprom@data+1
  3365  001B6A  C08F  F023         	movff	UpdateSynthFreq@retVal+2,StoreIntInEeprom@data+2
  3366  001B6E  C090  F024         	movff	UpdateSynthFreq@retVal+3,StoreIntInEeprom@data+3
  3367  001B72  0E35               	movlw	low _SYNTH_ADDRES
  3368  001B74  2591               	addwf	(UpdateSynthFreq@retVal+4)& (0+255),w,b
  3369  001B76  6EF6               	movwf	tblptrl,c
  3370  001B78  0E06               	movlw	high _SYNTH_ADDRES
  3371  001B7A  2192               	addwfc	(UpdateSynthFreq@retVal+5)& (0+255),w,b
  3372  001B7C  6EF7               	movwf	tblptrh,c
  3373  001B7E                     	if	0	;There are less than 3 active tblptr bytes
  3374  001B7E                     	endif
  3375  001B7E  0008               	tblrd		*
  3376  001B80  CFF5 F025          	movff	tablat,StoreIntInEeprom@address
  3377  001B84  0E00               	movlw	0
  3378  001B86  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  3379  001B88  0E04               	movlw	4
  3380  001B8A  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  3381  001B8C  EC36  F01F         	call	_StoreIntInEeprom	;wreg free
  3382  001B90  D01C               	goto	l526
  3383  001B92                     l524:
  3384                           
  3385                           ;SyntApp.c: 98: else if(cType == SYNTH_RX) StoreIntInEeprom(retVal.num, (0x20) | SYNTH_A
      +                          DDRES[retVal.con], 4);
  3386  001B92  0100               	movlb	0	; () banked
  3387  001B94  058C               	decf	UpdateSynthFreq@cType& (0+255),w,b
  3388  001B96  A4D8               	btfss	status,2,c
  3389  001B98  D018               	goto	l526
  3390                           
  3391                           ; BSR set to: 0
  3392  001B9A  C08D  F021         	movff	UpdateSynthFreq@retVal,StoreIntInEeprom@data
  3393  001B9E  C08E  F022         	movff	UpdateSynthFreq@retVal+1,StoreIntInEeprom@data+1
  3394  001BA2  C08F  F023         	movff	UpdateSynthFreq@retVal+2,StoreIntInEeprom@data+2
  3395  001BA6  C090  F024         	movff	UpdateSynthFreq@retVal+3,StoreIntInEeprom@data+3
  3396  001BAA  0E35               	movlw	low _SYNTH_ADDRES
  3397  001BAC  2591               	addwf	(UpdateSynthFreq@retVal+4)& (0+255),w,b
  3398  001BAE  6EF6               	movwf	tblptrl,c
  3399  001BB0  0E06               	movlw	high _SYNTH_ADDRES
  3400  001BB2  2192               	addwfc	(UpdateSynthFreq@retVal+5)& (0+255),w,b
  3401  001BB4  6EF7               	movwf	tblptrh,c
  3402  001BB6                     	if	0	;There are less than 3 active tblptr bytes
  3403  001BB6                     	endif
  3404  001BB6  0008               	tblrd		*
  3405  001BB8  50F5               	movf	tablat,w,c
  3406  001BBA  0920               	iorlw	32
  3407  001BBC  6E25               	movwf	StoreIntInEeprom@address,c
  3408  001BBE  0E00               	movlw	0
  3409  001BC0  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  3410  001BC2  0E04               	movlw	4
  3411  001BC4  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  3412  001BC6  EC36  F01F         	call	_StoreIntInEeprom	;wreg free
  3413  001BCA                     l526:
  3414                           
  3415                           ;SyntApp.c: 99: }
  3416                           ;SyntApp.c: 100: if(cType == SYNTH_TX)
  3417  001BCA  0100               	movlb	0	; () banked
  3418  001BCC  518C               	movf	UpdateSynthFreq@cType& (0+255),w,b
  3419  001BCE  A4D8               	btfss	status,2,c
  3420  001BD0  D037               	goto	l527
  3421                           
  3422                           ; BSR set to: 0
  3423                           ;SyntApp.c: 101: {
  3424                           ;SyntApp.c: 102: if(cntRegUpdateTx < 0x7)
  3425  001BD2  0E07               	movlw	7
  3426  001BD4  603A               	cpfslt	_cntRegUpdateTx,c
  3427  001BD6  D02C               	goto	l528
  3428                           
  3429                           ; BSR set to: 0
  3430                           ;SyntApp.c: 103: {
  3431                           ;SyntApp.c: 104: SWSPI_send_word(cType, retVal.num, 3);
  3432  001BD8  C08D  F029         	movff	UpdateSynthFreq@retVal,SWSPI_send_word@data
  3433  001BDC  C08E  F02A         	movff	UpdateSynthFreq@retVal+1,SWSPI_send_word@data+1
  3434  001BE0  C08F  F02B         	movff	UpdateSynthFreq@retVal+2,SWSPI_send_word@data+2
  3435  001BE4  C090  F02C         	movff	UpdateSynthFreq@retVal+3,SWSPI_send_word@data+3
  3436  001BE8  0E03               	movlw	3
  3437  001BEA  6E2D               	movwf	SWSPI_send_word@dataSize,c
  3438  001BEC  518C               	movf	UpdateSynthFreq@cType& (0+255),w,b
  3439  001BEE  EC3E  F018         	call	_SWSPI_send_word
  3440                           
  3441                           ;SyntApp.c: 105: StoreIntInEeprom(retVal.num, (0) | SYNTH_ADDRES[retVal.con], 4);
  3442  001BF2  C08D  F021         	movff	UpdateSynthFreq@retVal,StoreIntInEeprom@data
  3443  001BF6  C08E  F022         	movff	UpdateSynthFreq@retVal+1,StoreIntInEeprom@data+1
  3444  001BFA  C08F  F023         	movff	UpdateSynthFreq@retVal+2,StoreIntInEeprom@data+2
  3445  001BFE  C090  F024         	movff	UpdateSynthFreq@retVal+3,StoreIntInEeprom@data+3
  3446  001C02  0E35               	movlw	low _SYNTH_ADDRES
  3447  001C04  0100               	movlb	0	; () banked
  3448  001C06  2591               	addwf	(UpdateSynthFreq@retVal+4)& (0+255),w,b
  3449  001C08  6EF6               	movwf	tblptrl,c
  3450  001C0A  0E06               	movlw	high _SYNTH_ADDRES
  3451  001C0C  2192               	addwfc	(UpdateSynthFreq@retVal+5)& (0+255),w,b
  3452  001C0E  6EF7               	movwf	tblptrh,c
  3453  001C10                     	if	0	;There are less than 3 active tblptr bytes
  3454  001C10                     	endif
  3455  001C10  0008               	tblrd		*
  3456  001C12  CFF5 F025          	movff	tablat,StoreIntInEeprom@address
  3457  001C16  0E00               	movlw	0
  3458  001C18  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  3459  001C1A  0E04               	movlw	4
  3460  001C1C  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  3461  001C1E  EC36  F01F         	call	_StoreIntInEeprom	;wreg free
  3462                           
  3463                           ;SyntApp.c: 106: cntRegUpdateTx ++;
  3464  001C22  2A3A               	incf	_cntRegUpdateTx,f,c
  3465                           
  3466                           ;SyntApp.c: 107: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_REQ_ANTHER_TX_
      +                          REG);
  3467  001C24  0E48               	movlw	72
  3468  001C26  6E24               	movwf	SendAckMessage@inRequest,c
  3469  001C28  0E04               	movlw	4
  3470  001C2A  ECAF  F01D         	call	_SendAckMessage
  3471                           
  3472                           ;SyntApp.c: 108: }
  3473  001C2E  0012               	return	
  3474  001C30                     l528:
  3475                           
  3476                           ;SyntApp.c: 109: else
  3477                           ;SyntApp.c: 110: {
  3478                           ;SyntApp.c: 111: cntRegUpdateTx = 0;
  3479  001C30  0E00               	movlw	0
  3480  001C32  6E3A               	movwf	_cntRegUpdateTx,c
  3481                           
  3482                           ;SyntApp.c: 112: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_DOWN_SET);
  3483  001C34  0E42               	movlw	66
  3484  001C36  6E24               	movwf	SendAckMessage@inRequest,c
  3485  001C38  0E04               	movlw	4
  3486  001C3A  ECAF  F01D         	call	_SendAckMessage
  3487                           
  3488                           ;SyntApp.c: 113: }
  3489                           ;SyntApp.c: 114: }
  3490  001C3E  0012               	return	
  3491  001C40                     l527:
  3492                           
  3493                           ;SyntApp.c: 115: else if(cType == SYNTH_RX)
  3494  001C40  0100               	movlb	0	; () banked
  3495  001C42  058C               	decf	UpdateSynthFreq@cType& (0+255),w,b
  3496  001C44  A4D8               	btfss	status,2,c
  3497  001C46  0012               	return	
  3498                           
  3499                           ; BSR set to: 0
  3500                           ;SyntApp.c: 116: {
  3501                           ;SyntApp.c: 117: if(cntRegUpdateRx < 0x7)
  3502  001C48  0E07               	movlw	7
  3503  001C4A  6039               	cpfslt	_cntRegUpdateRx,c
  3504  001C4C  D02D               	goto	l532
  3505                           
  3506                           ; BSR set to: 0
  3507                           ;SyntApp.c: 118: {
  3508                           ;SyntApp.c: 119: SWSPI_send_word(cType, retVal.num, 3);
  3509  001C4E  C08D  F029         	movff	UpdateSynthFreq@retVal,SWSPI_send_word@data
  3510  001C52  C08E  F02A         	movff	UpdateSynthFreq@retVal+1,SWSPI_send_word@data+1
  3511  001C56  C08F  F02B         	movff	UpdateSynthFreq@retVal+2,SWSPI_send_word@data+2
  3512  001C5A  C090  F02C         	movff	UpdateSynthFreq@retVal+3,SWSPI_send_word@data+3
  3513  001C5E  0E03               	movlw	3
  3514  001C60  6E2D               	movwf	SWSPI_send_word@dataSize,c
  3515  001C62  518C               	movf	UpdateSynthFreq@cType& (0+255),w,b
  3516  001C64  EC3E  F018         	call	_SWSPI_send_word
  3517                           
  3518                           ;SyntApp.c: 120: StoreIntInEeprom(retVal.num, (0x20) | SYNTH_ADDRES[retVal.con], 4);
  3519  001C68  C08D  F021         	movff	UpdateSynthFreq@retVal,StoreIntInEeprom@data
  3520  001C6C  C08E  F022         	movff	UpdateSynthFreq@retVal+1,StoreIntInEeprom@data+1
  3521  001C70  C08F  F023         	movff	UpdateSynthFreq@retVal+2,StoreIntInEeprom@data+2
  3522  001C74  C090  F024         	movff	UpdateSynthFreq@retVal+3,StoreIntInEeprom@data+3
  3523  001C78  0E35               	movlw	low _SYNTH_ADDRES
  3524  001C7A  0100               	movlb	0	; () banked
  3525  001C7C  2591               	addwf	(UpdateSynthFreq@retVal+4)& (0+255),w,b
  3526  001C7E  6EF6               	movwf	tblptrl,c
  3527  001C80  0E06               	movlw	high _SYNTH_ADDRES
  3528  001C82  2192               	addwfc	(UpdateSynthFreq@retVal+5)& (0+255),w,b
  3529  001C84  6EF7               	movwf	tblptrh,c
  3530  001C86                     	if	0	;There are less than 3 active tblptr bytes
  3531  001C86                     	endif
  3532  001C86  0008               	tblrd		*
  3533  001C88  50F5               	movf	tablat,w,c
  3534  001C8A  0920               	iorlw	32
  3535  001C8C  6E25               	movwf	StoreIntInEeprom@address,c
  3536  001C8E  0E00               	movlw	0
  3537  001C90  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  3538  001C92  0E04               	movlw	4
  3539  001C94  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  3540  001C96  EC36  F01F         	call	_StoreIntInEeprom	;wreg free
  3541                           
  3542                           ;SyntApp.c: 121: cntRegUpdateRx ++;
  3543  001C9A  2A39               	incf	_cntRegUpdateRx,f,c
  3544                           
  3545                           ;SyntApp.c: 122: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_REQ_ANTHER_RX_
      +                          REG);
  3546  001C9C  0E49               	movlw	73
  3547  001C9E  6E24               	movwf	SendAckMessage@inRequest,c
  3548  001CA0  0E04               	movlw	4
  3549  001CA2  ECAF  F01D         	call	_SendAckMessage
  3550                           
  3551                           ;SyntApp.c: 123: }
  3552  001CA6  0012               	return	
  3553  001CA8                     l532:
  3554                           
  3555                           ;SyntApp.c: 124: else
  3556                           ;SyntApp.c: 125: {
  3557                           ;SyntApp.c: 126: cntRegUpdateRx = 0;
  3558  001CA8  0E00               	movlw	0
  3559  001CAA  6E39               	movwf	_cntRegUpdateRx,c
  3560                           
  3561                           ;SyntApp.c: 127: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_UP_SET);
  3562  001CAC  0E43               	movlw	67
  3563  001CAE  6E24               	movwf	SendAckMessage@inRequest,c
  3564  001CB0  0E04               	movlw	4
  3565  001CB2  ECAF  F01D         	call	_SendAckMessage
  3566  001CB6  0012               	return	
  3567  001CB8                     __end_of_UpdateSynthFreq:
  3568                           	opt stack 0
  3569                           tosu	equ	0xFFF
  3570                           tosh	equ	0xFFE
  3571                           tosl	equ	0xFFD
  3572                           pclath	equ	0xFFA
  3573                           tblptru	equ	0xFF8
  3574                           tblptrh	equ	0xFF7
  3575                           tblptrl	equ	0xFF6
  3576                           tablat	equ	0xFF5
  3577                           postinc0	equ	0xFEE
  3578                           plusw0	equ	0xFEB
  3579                           wreg	equ	0xFE8
  3580                           postdec1	equ	0xFE5
  3581                           fsr1l	equ	0xFE1
  3582                           indf2	equ	0xFDF
  3583                           postinc2	equ	0xFDE
  3584                           plusw2	equ	0xFDB
  3585                           fsr2h	equ	0xFDA
  3586                           fsr2l	equ	0xFD9
  3587                           status	equ	0xFD8
  3588                           
  3589 ;; *************** function _SynthReadData *****************
  3590 ;; Defined at:
  3591 ;;		line 166 in file "SyntApp.c"
  3592 ;; Parameters:    Size  Location     Type
  3593 ;;  cType           1    wreg     enum E1
  3594 ;;  data            2  104[BANK0 ] PTR unsigned char 
  3595 ;; Auto vars:     Size  Location     Type
  3596 ;;  cType           1   52[BANK2 ] enum E1
  3597 ;;  data            1   29[BANK2 ] unsigned char 
  3598 ;;  TxMsg          29    0[BANK2 ] unsigned char [29]
  3599 ;;  eepromDataAr   20   32[BANK2 ] unsigned long [5]
  3600 ;;  byteNum         1   54[BANK2 ] unsigned char 
  3601 ;;  regNum          1   53[BANK2 ] unsigned char 
  3602 ;; Return value:  Size  Location     Type
  3603 ;;                  1    wreg      void 
  3604 ;; Registers used:
  3605 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3606 ;; Tracked objects:
  3607 ;;		On entry : 0/0
  3608 ;;		On exit  : 0/0
  3609 ;;		Unchanged: 0/0
  3610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3611 ;;      Params:         0       2       0       0       0       0       0
  3612 ;;      Locals:         0       0       0      55       0       0       0
  3613 ;;      Temps:          0       0       0       0       0       0       0
  3614 ;;      Totals:         0       2       0      55       0       0       0
  3615 ;;Total ram usage:       57 bytes
  3616 ;; Hardware stack levels used:    1
  3617 ;; Hardware stack levels required when called:   10
  3618 ;; This function calls:
  3619 ;;		_ReadIntFromEeprom
  3620 ;;		_WriteUartMessage
  3621 ;;		_ZeroArray
  3622 ;;		_crc8
  3623 ;;		_make8
  3624 ;; This function is called by:
  3625 ;;		_GroupSynthesizers
  3626 ;; This function uses a non-reentrant model
  3627 ;;
  3628                           
  3629                           	psect	text10
  3630  000A96                     __ptext10:
  3631                           	opt stack 0
  3632  000A96                     _SynthReadData:
  3633                           	opt stack 18
  3634                           
  3635                           ;incstack = 0
  3636                           ;SynthReadData@cType stored from wreg
  3637  000A96  0102               	movlb	2	; () banked
  3638  000A98  6F7A               	movwf	SynthReadData@cType& (0+255),b
  3639                           
  3640                           ;SyntApp.c: 168: uint32_t eepromDataArray[5];
  3641                           ;SyntApp.c: 169: ZeroArray(eepromDataArray, sizeof(eepromDataArray));
  3642  000A9A  0E66               	movlw	low SynthReadData@eepromDataArray
  3643  000A9C  6E20               	movwf	ZeroArray@array,c
  3644  000A9E  0E02               	movlw	high SynthReadData@eepromDataArray
  3645  000AA0  6E21               	movwf	ZeroArray@array+1,c
  3646  000AA2  0E00               	movlw	0
  3647  000AA4  6E23               	movwf	ZeroArray@size+1,c
  3648  000AA6  0E14               	movlw	20
  3649  000AA8  6E22               	movwf	ZeroArray@size,c
  3650  000AAA  EC57  F021         	call	_ZeroArray	;wreg free
  3651                           
  3652                           ;SyntApp.c: 170: uint8_t regNum = 0, byteNum = 0;
  3653  000AAE  0E00               	movlw	0
  3654  000AB0  0102               	movlb	2	; () banked
  3655  000AB2  6F7B               	movwf	SynthReadData@regNum& (0+255),b
  3656                           
  3657                           ; BSR set to: 2
  3658  000AB4  0E00               	movlw	0
  3659  000AB6  6F7C               	movwf	SynthReadData@byteNum& (0+255),b
  3660                           
  3661                           ;SyntApp.c: 171: char TxMsg[5 * 5 + 2 + 1 + 1];
  3662                           ;SyntApp.c: 172: ZeroArray(TxMsg, 5 * 5 + 2 + 1 + 1);
  3663  000AB8  0E46               	movlw	low SynthReadData@TxMsg
  3664  000ABA  6E20               	movwf	ZeroArray@array,c
  3665  000ABC  0E02               	movlw	high SynthReadData@TxMsg
  3666  000ABE  6E21               	movwf	ZeroArray@array+1,c
  3667  000AC0  0E00               	movlw	0
  3668  000AC2  6E23               	movwf	ZeroArray@size+1,c
  3669  000AC4  0E1D               	movlw	29
  3670  000AC6  6E22               	movwf	ZeroArray@size,c
  3671  000AC8  EC57  F021         	call	_ZeroArray	;wreg free
  3672                           
  3673                           ;SyntApp.c: 175: TxMsg[(0)] = (0x24);
  3674  000ACC  0E24               	movlw	36
  3675  000ACE  0102               	movlb	2	; () banked
  3676  000AD0  6F46               	movwf	SynthReadData@TxMsg& (0+255),b
  3677                           
  3678                           ; BSR set to: 2
  3679                           ;SyntApp.c: 176: TxMsg[(1)] = SYNTH_MSG;
  3680  000AD2  0E04               	movlw	4
  3681  000AD4  6F47               	movwf	(SynthReadData@TxMsg+1)& (0+255),b
  3682                           
  3683                           ; BSR set to: 2
  3684                           ;SyntApp.c: 177: TxMsg[(3)] = 5 * 5 + 2 - (0x4);
  3685  000AD6  0E17               	movlw	23
  3686  000AD8  6F49               	movwf	(SynthReadData@TxMsg+3)& (0+255),b
  3687                           
  3688                           ; BSR set to: 2
  3689                           ;SyntApp.c: 179: if(cType == SYNTH_TX)
  3690  000ADA  517A               	movf	SynthReadData@cType& (0+255),w,b
  3691  000ADC  A4D8               	btfss	status,2,c
  3692  000ADE  D064               	goto	l547
  3693                           
  3694                           ; BSR set to: 2
  3695                           ;SyntApp.c: 180: {
  3696                           ;SyntApp.c: 181: TxMsg[(2)] = SYNTH_DOWN_READ_DATA;
  3697  000AE0  0E47               	movlw	71
  3698  000AE2  6F48               	movwf	(SynthReadData@TxMsg+2)& (0+255),b
  3699                           
  3700                           ; BSR set to: 2
  3701                           ;SyntApp.c: 182: eepromDataArray[0] = ReadIntFromEeprom((0) | SYNTH_ADDRES[0], 4);
  3702  000AE4  0E00               	movlw	0
  3703  000AE6  0100               	movlb	0	; () banked
  3704  000AE8  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3705  000AEA  0E04               	movlw	4
  3706  000AEC  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3707  000AEE  0E35               	movlw	low _SYNTH_ADDRES
  3708  000AF0  6EF6               	movwf	tblptrl,c
  3709  000AF2                     	if	1	;There is more than 1 active tblptr byte
  3710  000AF2  0E06               	movlw	high _SYNTH_ADDRES
  3711  000AF4  6EF7               	movwf	tblptrh,c
  3712  000AF6                     	endif
  3713  000AF6                     	if	0	;There are less than 3 active tblptr bytes
  3714  000AF6                     	endif
  3715  000AF6  0008               	tblrd		*
  3716  000AF8  50F5               	movf	tablat,w,c
  3717  000AFA  EC6F  F010         	call	_ReadIntFromEeprom
  3718  000AFE  C0B1  F266         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray
  3719  000B02  C0B2  F267         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+1
  3720  000B06  C0B3  F268         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+2
  3721  000B0A  C0B4  F269         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+3
  3722                           
  3723                           ;SyntApp.c: 183: eepromDataArray[1] = ReadIntFromEeprom((0) | SYNTH_ADDRES[1], 4);
  3724  000B0E  0E00               	movlw	0
  3725  000B10  0100               	movlb	0	; () banked
  3726  000B12  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3727  000B14  0E04               	movlw	4
  3728  000B16  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3729  000B18  0E36               	movlw	low (_SYNTH_ADDRES+1)
  3730  000B1A  6EF6               	movwf	tblptrl,c
  3731  000B1C  0E06               	movlw	high (_SYNTH_ADDRES+1)
  3732  000B1E  6EF7               	movwf	tblptrh,c
  3733  000B20                     	if	0	;tblptru may be non-zero
  3734  000B20                     	endif
  3735  000B20                     	if	0	;tblptru may be non-zero
  3736  000B20                     	endif
  3737  000B20  0008               	tblrd		*
  3738  000B22  50F5               	movf	tablat,w,c
  3739  000B24  EC6F  F010         	call	_ReadIntFromEeprom
  3740  000B28  C0B1  F26A         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+4
  3741  000B2C  C0B2  F26B         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+5
  3742  000B30  C0B3  F26C         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+6
  3743  000B34  C0B4  F26D         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+7
  3744                           
  3745                           ;SyntApp.c: 184: eepromDataArray[2] = ReadIntFromEeprom((0) | SYNTH_ADDRES[2], 4);
  3746  000B38  0E00               	movlw	0
  3747  000B3A  0100               	movlb	0	; () banked
  3748  000B3C  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3749  000B3E  0E04               	movlw	4
  3750  000B40  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3751  000B42  0E37               	movlw	low (_SYNTH_ADDRES+2)
  3752  000B44  6EF6               	movwf	tblptrl,c
  3753  000B46  0E06               	movlw	high (_SYNTH_ADDRES+2)
  3754  000B48  6EF7               	movwf	tblptrh,c
  3755  000B4A                     	if	0	;tblptru may be non-zero
  3756  000B4A                     	endif
  3757  000B4A                     	if	0	;tblptru may be non-zero
  3758  000B4A                     	endif
  3759  000B4A  0008               	tblrd		*
  3760  000B4C  50F5               	movf	tablat,w,c
  3761  000B4E  EC6F  F010         	call	_ReadIntFromEeprom
  3762  000B52  C0B1  F26E         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+8
  3763  000B56  C0B2  F26F         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+9
  3764  000B5A  C0B3  F270         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+10
  3765  000B5E  C0B4  F271         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+11
  3766                           
  3767                           ;SyntApp.c: 185: eepromDataArray[3] = ReadIntFromEeprom((0) | SYNTH_ADDRES[4], 4);
  3768  000B62  0E00               	movlw	0
  3769  000B64  0100               	movlb	0	; () banked
  3770  000B66  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3771  000B68  0E04               	movlw	4
  3772  000B6A  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3773  000B6C  0E39               	movlw	low (_SYNTH_ADDRES+4)
  3774  000B6E  6EF6               	movwf	tblptrl,c
  3775  000B70  0E06               	movlw	high (_SYNTH_ADDRES+4)
  3776  000B72  6EF7               	movwf	tblptrh,c
  3777  000B74                     	if	0	;tblptru may be non-zero
  3778  000B74                     	endif
  3779  000B74                     	if	0	;tblptru may be non-zero
  3780  000B74                     	endif
  3781  000B74  0008               	tblrd		*
  3782  000B76  50F5               	movf	tablat,w,c
  3783  000B78  EC6F  F010         	call	_ReadIntFromEeprom
  3784  000B7C  C0B1  F272         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+12
  3785  000B80  C0B2  F273         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+13
  3786  000B84  C0B3  F274         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+14
  3787  000B88  C0B4  F275         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+15
  3788                           
  3789                           ;SyntApp.c: 186: eepromDataArray[4] = ReadIntFromEeprom((0) | SYNTH_ADDRES[0xb], 4);
  3790  000B8C  0E00               	movlw	0
  3791  000B8E  0100               	movlb	0	; () banked
  3792  000B90  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3793  000B92  0E04               	movlw	4
  3794  000B94  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3795  000B96  0E40               	movlw	low (_SYNTH_ADDRES+11)
  3796  000B98  6EF6               	movwf	tblptrl,c
  3797  000B9A  0E06               	movlw	high (_SYNTH_ADDRES+11)
  3798  000B9C  6EF7               	movwf	tblptrh,c
  3799  000B9E                     	if	0	;tblptru may be non-zero
  3800  000B9E                     	endif
  3801  000B9E                     	if	0	;tblptru may be non-zero
  3802  000B9E                     	endif
  3803  000B9E  0008               	tblrd		*
  3804  000BA0  50F5               	movf	tablat,w,c
  3805  000BA2  EC6F  F010         	call	_ReadIntFromEeprom
  3806  000BA6  D06C               	goto	L2
  3807  000BA8                     l547:
  3808                           
  3809                           ;SyntApp.c: 188: else if (cType == SYNTH_RX)
  3810  000BA8  0102               	movlb	2	; () banked
  3811  000BAA  057A               	decf	SynthReadData@cType& (0+255),w,b
  3812  000BAC  A4D8               	btfss	status,2,c
  3813  000BAE  D070               	goto	l549
  3814                           
  3815                           ; BSR set to: 2
  3816                           ;SyntApp.c: 189: {
  3817                           ;SyntApp.c: 190: TxMsg[(2)] = SYNTH_UP_READ_DATA;
  3818  000BB0  0E46               	movlw	70
  3819  000BB2  6F48               	movwf	(SynthReadData@TxMsg+2)& (0+255),b
  3820                           
  3821                           ; BSR set to: 2
  3822                           ;SyntApp.c: 191: eepromDataArray[0] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[0], 4);
  3823  000BB4  0E00               	movlw	0
  3824  000BB6  0100               	movlb	0	; () banked
  3825  000BB8  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3826  000BBA  0E04               	movlw	4
  3827  000BBC  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3828  000BBE  0E35               	movlw	low _SYNTH_ADDRES
  3829  000BC0  6EF6               	movwf	tblptrl,c
  3830  000BC2                     	if	1	;There is more than 1 active tblptr byte
  3831  000BC2  0E06               	movlw	high _SYNTH_ADDRES
  3832  000BC4  6EF7               	movwf	tblptrh,c
  3833  000BC6                     	endif
  3834  000BC6                     	if	0	;There are less than 3 active tblptr bytes
  3835  000BC6                     	endif
  3836  000BC6  0008               	tblrd		*
  3837  000BC8  50F5               	movf	tablat,w,c
  3838  000BCA  0920               	iorlw	32
  3839  000BCC  EC6F  F010         	call	_ReadIntFromEeprom
  3840  000BD0  C0B1  F266         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray
  3841  000BD4  C0B2  F267         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+1
  3842  000BD8  C0B3  F268         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+2
  3843  000BDC  C0B4  F269         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+3
  3844                           
  3845                           ;SyntApp.c: 192: eepromDataArray[1] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[1], 4);
  3846  000BE0  0E00               	movlw	0
  3847  000BE2  0100               	movlb	0	; () banked
  3848  000BE4  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3849  000BE6  0E04               	movlw	4
  3850  000BE8  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3851  000BEA  0E36               	movlw	low (_SYNTH_ADDRES+1)
  3852  000BEC  6EF6               	movwf	tblptrl,c
  3853  000BEE  0E06               	movlw	high (_SYNTH_ADDRES+1)
  3854  000BF0  6EF7               	movwf	tblptrh,c
  3855  000BF2                     	if	0	;tblptru may be non-zero
  3856  000BF2                     	endif
  3857  000BF2                     	if	0	;tblptru may be non-zero
  3858  000BF2                     	endif
  3859  000BF2  0008               	tblrd		*
  3860  000BF4  50F5               	movf	tablat,w,c
  3861  000BF6  0920               	iorlw	32
  3862  000BF8  EC6F  F010         	call	_ReadIntFromEeprom
  3863  000BFC  C0B1  F26A         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+4
  3864  000C00  C0B2  F26B         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+5
  3865  000C04  C0B3  F26C         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+6
  3866  000C08  C0B4  F26D         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+7
  3867                           
  3868                           ;SyntApp.c: 193: eepromDataArray[2] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[2], 4);
  3869  000C0C  0E00               	movlw	0
  3870  000C0E  0100               	movlb	0	; () banked
  3871  000C10  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3872  000C12  0E04               	movlw	4
  3873  000C14  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3874  000C16  0E37               	movlw	low (_SYNTH_ADDRES+2)
  3875  000C18  6EF6               	movwf	tblptrl,c
  3876  000C1A  0E06               	movlw	high (_SYNTH_ADDRES+2)
  3877  000C1C  6EF7               	movwf	tblptrh,c
  3878  000C1E                     	if	0	;tblptru may be non-zero
  3879  000C1E                     	endif
  3880  000C1E                     	if	0	;tblptru may be non-zero
  3881  000C1E                     	endif
  3882  000C1E  0008               	tblrd		*
  3883  000C20  50F5               	movf	tablat,w,c
  3884  000C22  0920               	iorlw	32
  3885  000C24  EC6F  F010         	call	_ReadIntFromEeprom
  3886  000C28  C0B1  F26E         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+8
  3887  000C2C  C0B2  F26F         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+9
  3888  000C30  C0B3  F270         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+10
  3889  000C34  C0B4  F271         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+11
  3890                           
  3891                           ;SyntApp.c: 194: eepromDataArray[3] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[4], 4);
  3892  000C38  0E00               	movlw	0
  3893  000C3A  0100               	movlb	0	; () banked
  3894  000C3C  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3895  000C3E  0E04               	movlw	4
  3896  000C40  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3897  000C42  0E39               	movlw	low (_SYNTH_ADDRES+4)
  3898  000C44  6EF6               	movwf	tblptrl,c
  3899  000C46  0E06               	movlw	high (_SYNTH_ADDRES+4)
  3900  000C48  6EF7               	movwf	tblptrh,c
  3901  000C4A                     	if	0	;tblptru may be non-zero
  3902  000C4A                     	endif
  3903  000C4A                     	if	0	;tblptru may be non-zero
  3904  000C4A                     	endif
  3905  000C4A  0008               	tblrd		*
  3906  000C4C  50F5               	movf	tablat,w,c
  3907  000C4E  0920               	iorlw	32
  3908  000C50  EC6F  F010         	call	_ReadIntFromEeprom
  3909  000C54  C0B1  F272         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+12
  3910  000C58  C0B2  F273         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+13
  3911  000C5C  C0B3  F274         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+14
  3912  000C60  C0B4  F275         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+15
  3913                           
  3914                           ;SyntApp.c: 195: eepromDataArray[4] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[0xb], 4);
  3915  000C64  0E00               	movlw	0
  3916  000C66  0100               	movlb	0	; () banked
  3917  000C68  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3918  000C6A  0E04               	movlw	4
  3919  000C6C  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3920  000C6E  0E40               	movlw	low (_SYNTH_ADDRES+11)
  3921  000C70  6EF6               	movwf	tblptrl,c
  3922  000C72  0E06               	movlw	high (_SYNTH_ADDRES+11)
  3923  000C74  6EF7               	movwf	tblptrh,c
  3924  000C76                     	if	0	;tblptru may be non-zero
  3925  000C76                     	endif
  3926  000C76                     	if	0	;tblptru may be non-zero
  3927  000C76                     	endif
  3928  000C76  0008               	tblrd		*
  3929  000C78  50F5               	movf	tablat,w,c
  3930  000C7A  0920               	iorlw	32
  3931  000C7C  EC6F  F010         	call	_ReadIntFromEeprom
  3932  000C80                     L2:
  3933  000C80  C0B1  F276         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+16
  3934  000C84  C0B2  F277         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+17
  3935  000C88  C0B3  F278         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+18
  3936  000C8C  C0B4  F279         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+19
  3937  000C90                     l549:
  3938                           
  3939                           ;SyntApp.c: 196: }
  3940                           ;SyntApp.c: 198: for(regNum = 0; regNum < 5; regNum++)
  3941  000C90  0E00               	movlw	0
  3942  000C92  0102               	movlb	2	; () banked
  3943  000C94  6F7B               	movwf	SynthReadData@regNum& (0+255),b
  3944  000C96                     l8501:
  3945                           
  3946                           ; BSR set to: 2
  3947  000C96  0E04               	movlw	4
  3948  000C98  657B               	cpfsgt	SynthReadData@regNum& (0+255),b
  3949  000C9A  D001               	goto	l550
  3950  000C9C  D032               	goto	u8690
  3951  000C9E                     l550:
  3952                           
  3953                           ; BSR set to: 2
  3954                           ;SyntApp.c: 199: {
  3955                           ;SyntApp.c: 200: for(byteNum = 0; byteNum < (5); byteNum++)
  3956                           
  3957                           ; BSR set to: 2
  3958  000C9E  0E00               	movlw	0
  3959  000CA0  6F7C               	movwf	SynthReadData@byteNum& (0+255),b
  3960  000CA2                     l8507:
  3961                           
  3962                           ; BSR set to: 2
  3963  000CA2  0E04               	movlw	4
  3964  000CA4  657C               	cpfsgt	SynthReadData@byteNum& (0+255),b
  3965  000CA6  D001               	goto	l552
  3966  000CA8  D02A               	goto	u8680
  3967  000CAA                     l552:
  3968                           
  3969                           ; BSR set to: 2
  3970                           ;SyntApp.c: 201: {
  3971                           ;SyntApp.c: 202: uint8_t data = make8(eepromDataArray[regNum], byteNum);
  3972                           
  3973                           ; BSR set to: 2
  3974  000CAA  517B               	movf	SynthReadData@regNum& (0+255),w,b
  3975  000CAC  0D04               	mullw	4
  3976  000CAE  0E66               	movlw	low SynthReadData@eepromDataArray
  3977  000CB0  24F3               	addwf	prodl,w,c
  3978  000CB2  6ED9               	movwf	fsr2l,c
  3979  000CB4  0E02               	movlw	high SynthReadData@eepromDataArray
  3980  000CB6  20F4               	addwfc	prodh,w,c
  3981  000CB8  6EDA               	movwf	fsr2h,c
  3982  000CBA  CFDE F018          	movff	postinc2,make8@data
  3983  000CBE  CFDE F019          	movff	postinc2,make8@data+1
  3984  000CC2  CFDE F01A          	movff	postinc2,make8@data+2
  3985  000CC6  CFDE F01B          	movff	postinc2,make8@data+3
  3986  000CCA  C27C  F01C         	movff	SynthReadData@byteNum,make8@dataLocation
  3987  000CCE  EC51  F01C         	call	_make8	;wreg free
  3988  000CD2  0102               	movlb	2	; () banked
  3989  000CD4  6F63               	movwf	SynthReadData@data_987& (0+255),b
  3990                           
  3991                           ; BSR set to: 2
  3992                           ;SyntApp.c: 203: TxMsg[(0x4) + (5)*regNum + byteNum] = data;
  3993  000CD6  517B               	movf	SynthReadData@regNum& (0+255),w,b
  3994  000CD8  0D05               	mullw	5
  3995  000CDA  517C               	movf	SynthReadData@byteNum& (0+255),w,b
  3996  000CDC  26F3               	addwf	prodl,f,c
  3997  000CDE  0E00               	movlw	0
  3998  000CE0  22F4               	addwfc	prodh,f,c
  3999  000CE2  0E04               	movlw	4
  4000  000CE4  26F3               	addwf	prodl,f,c
  4001  000CE6  0E00               	movlw	0
  4002  000CE8  22F4               	addwfc	prodh,f,c
  4003  000CEA  0E46               	movlw	low SynthReadData@TxMsg
  4004  000CEC  24F3               	addwf	prodl,w,c
  4005  000CEE  6ED9               	movwf	fsr2l,c
  4006  000CF0  0E02               	movlw	high SynthReadData@TxMsg
  4007  000CF2  20F4               	addwfc	prodh,w,c
  4008  000CF4  6EDA               	movwf	fsr2h,c
  4009  000CF6  C263  FFDF         	movff	SynthReadData@data_987,indf2
  4010                           
  4011                           ; BSR set to: 2
  4012  000CFA  2B7C               	incf	SynthReadData@byteNum& (0+255),f,b
  4013  000CFC  D7D2               	goto	l8507
  4014  000CFE                     u8680:
  4015                           
  4016                           ; BSR set to: 2
  4017                           
  4018                           ; BSR set to: 2
  4019  000CFE  2B7B               	incf	SynthReadData@regNum& (0+255),f,b
  4020  000D00  D7CA               	goto	l8501
  4021  000D02                     u8690:
  4022                           
  4023                           ; BSR set to: 2
  4024                           ;SyntApp.c: 204: }
  4025                           ;SyntApp.c: 205: }
  4026                           ;SyntApp.c: 207: TxMsg[5 * 5 + 2] = cType == SYNTH_TX ? SynthTxOper : SynthRxOper;
  4027                           
  4028                           ; BSR set to: 2
  4029  000D02  517A               	movf	SynthReadData@cType& (0+255),w,b
  4030  000D04  B4D8               	btfsc	status,2,c
  4031  000D06  D003               	goto	l555
  4032                           
  4033                           ; BSR set to: 2
  4034  000D08  C044  F264         	movff	_SynthRxOper,_SynthReadData$988
  4035  000D0C  D002               	goto	L1
  4036  000D0E                     l555:
  4037                           
  4038                           ; BSR set to: 2
  4039  000D0E  C045  F264         	movff	_SynthTxOper,_SynthReadData$988
  4040  000D12                     L1:
  4041  000D12  6B65               	clrf	(_SynthReadData$988+1)& (0+255),b
  4042                           
  4043                           ; BSR set to: 2
  4044  000D14  C264  F261         	movff	_SynthReadData$988,SynthReadData@TxMsg+27
  4045                           
  4046                           ; BSR set to: 2
  4047                           ;SyntApp.c: 208: TxMsg[5 * 5 + 2 + 1] = crc8(TxMsg, 5 * 5 + 2 + 1);
  4048  000D18  0E46               	movlw	low SynthReadData@TxMsg
  4049  000D1A  6E18               	movwf	crc8@dataArray,c
  4050  000D1C  0E02               	movlw	high SynthReadData@TxMsg
  4051  000D1E  6E19               	movwf	crc8@dataArray+1,c
  4052  000D20  0E00               	movlw	0
  4053  000D22  6E1B               	movwf	crc8@dataSize+1,c
  4054  000D24  0E1C               	movlw	28
  4055  000D26  6E1A               	movwf	crc8@dataSize,c
  4056  000D28  ECD8  F01D         	call	_crc8	;wreg free
  4057  000D2C  0102               	movlb	2	; () banked
  4058  000D2E  6F62               	movwf	(SynthReadData@TxMsg+28)& (0+255),b
  4059                           
  4060                           ; BSR set to: 2
  4061                           ;SyntApp.c: 209: WriteUartMessage(TxMsg, 5 * 5 + 2 + 1 + 1);
  4062  000D30  0E46               	movlw	low SynthReadData@TxMsg
  4063  000D32  6E19               	movwf	WriteUartMessage@dataBuf,c
  4064  000D34  0E02               	movlw	high SynthReadData@TxMsg
  4065  000D36  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  4066  000D38  0E00               	movlw	0
  4067  000D3A  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  4068  000D3C  0E1D               	movlw	29
  4069  000D3E  6E1B               	movwf	WriteUartMessage@dataSize,c
  4070  000D40  EC8A  F01F         	call	_WriteUartMessage	;wreg free
  4071  000D44  0012               	return		;funcret
  4072  000D46                     __end_of_SynthReadData:
  4073                           	opt stack 0
  4074                           tosu	equ	0xFFF
  4075                           tosh	equ	0xFFE
  4076                           tosl	equ	0xFFD
  4077                           pclath	equ	0xFFA
  4078                           tblptru	equ	0xFF8
  4079                           tblptrh	equ	0xFF7
  4080                           tblptrl	equ	0xFF6
  4081                           tablat	equ	0xFF5
  4082                           prodh	equ	0xFF4
  4083                           prodl	equ	0xFF3
  4084                           postinc0	equ	0xFEE
  4085                           plusw0	equ	0xFEB
  4086                           wreg	equ	0xFE8
  4087                           postdec1	equ	0xFE5
  4088                           fsr1l	equ	0xFE1
  4089                           indf2	equ	0xFDF
  4090                           postinc2	equ	0xFDE
  4091                           plusw2	equ	0xFDB
  4092                           fsr2h	equ	0xFDA
  4093                           fsr2l	equ	0xFD9
  4094                           status	equ	0xFD8
  4095                           
  4096 ;; *************** function _SetSynthOper *****************
  4097 ;; Defined at:
  4098 ;;		line 135 in file "SyntApp.c"
  4099 ;; Parameters:    Size  Location     Type
  4100 ;;  cType           1    wreg     enum E1
  4101 ;; Auto vars:     Size  Location     Type
  4102 ;;  cType           1  111[BANK0 ] enum E1
  4103 ;; Return value:  Size  Location     Type
  4104 ;;                  1    wreg      void 
  4105 ;; Registers used:
  4106 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4107 ;; Tracked objects:
  4108 ;;		On entry : 0/0
  4109 ;;		On exit  : 0/0
  4110 ;;		Unchanged: 0/0
  4111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4112 ;;      Params:         0       0       0       0       0       0       0
  4113 ;;      Locals:         0       1       0       0       0       0       0
  4114 ;;      Temps:          0       0       0       0       0       0       0
  4115 ;;      Totals:         0       1       0       0       0       0       0
  4116 ;;Total ram usage:        1 bytes
  4117 ;; Hardware stack levels used:    1
  4118 ;; Hardware stack levels required when called:   11
  4119 ;; This function calls:
  4120 ;;		_InitSynth
  4121 ;;		_SendAckMessage
  4122 ;;		_SwSpi_Set_CE_Pin
  4123 ;; This function is called by:
  4124 ;;		_GroupSynthesizers
  4125 ;; This function uses a non-reentrant model
  4126 ;;
  4127                           
  4128                           	psect	text11
  4129  003470                     __ptext11:
  4130                           	opt stack 0
  4131  003470                     _SetSynthOper:
  4132                           	opt stack 17
  4133                           
  4134                           ;incstack = 0
  4135                           ;SetSynthOper@cType stored from wreg
  4136  003470  0100               	movlb	0	; () banked
  4137  003472  6FCF               	movwf	SetSynthOper@cType& (0+255),b
  4138                           
  4139                           ;SyntApp.c: 137: if(cType == SYNTH_TX)
  4140  003474  0100               	movlb	0	; () banked
  4141  003476  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4142  003478  A4D8               	btfss	status,2,c
  4143  00347A  D01A               	goto	l537
  4144                           
  4145                           ; BSR set to: 0
  4146                           ;SyntApp.c: 138: {
  4147                           ;SyntApp.c: 139: SynthTxOper = !SynthTxOper;
  4148  00347C  5045               	movf	_SynthTxOper,w,c
  4149  00347E  A4D8               	btfss	status,2,c
  4150  003480  D002               	goto	u8570
  4151  003482  0E01               	movlw	1
  4152  003484  D001               	goto	u8580
  4153  003486                     u8570:
  4154  003486  0E00               	movlw	0
  4155  003488                     u8580:
  4156  003488  6E45               	movwf	_SynthTxOper,c
  4157                           
  4158                           ;SyntApp.c: 140: if(SynthTxOper)
  4159  00348A  5045               	movf	_SynthTxOper,w,c
  4160  00348C  B4D8               	btfsc	status,2,c
  4161  00348E  D004               	goto	l538
  4162                           
  4163                           ; BSR set to: 0
  4164                           ;SyntApp.c: 141: {
  4165                           ;SyntApp.c: 142: InitSynth(cType);
  4166  003490  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4167  003492  ECA3  F006         	call	_InitSynth
  4168                           
  4169                           ;SyntApp.c: 143: }
  4170  003496  D006               	goto	l539
  4171  003498                     l538:
  4172                           
  4173                           ;SyntApp.c: 144: else
  4174                           ;SyntApp.c: 145: {
  4175                           ;SyntApp.c: 146: SwSpi_Set_CE_Pin(cType, 0);
  4176  003498  0E00               	movlw	0
  4177  00349A  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  4178  00349C  0100               	movlb	0	; () banked
  4179  00349E  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4180  0034A0  ECC2  F01E         	call	_SwSpi_Set_CE_Pin
  4181  0034A4                     l539:
  4182                           
  4183                           ;SyntApp.c: 147: }
  4184                           ;SyntApp.c: 148: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_DOWN_OPER);
  4185  0034A4  0E45               	movlw	69
  4186  0034A6  6E24               	movwf	SendAckMessage@inRequest,c
  4187  0034A8  0E04               	movlw	4
  4188  0034AA  ECAF  F01D         	call	_SendAckMessage
  4189                           
  4190                           ;SyntApp.c: 149: }
  4191  0034AE  0012               	return	
  4192  0034B0                     l537:
  4193                           
  4194                           ;SyntApp.c: 150: else if (cType == SYNTH_RX)
  4195  0034B0  0100               	movlb	0	; () banked
  4196  0034B2  05CF               	decf	SetSynthOper@cType& (0+255),w,b
  4197  0034B4  A4D8               	btfss	status,2,c
  4198  0034B6  0012               	return	
  4199                           
  4200                           ; BSR set to: 0
  4201                           ;SyntApp.c: 151: {
  4202                           ;SyntApp.c: 152: SynthRxOper = !SynthRxOper;
  4203  0034B8  5044               	movf	_SynthRxOper,w,c
  4204  0034BA  A4D8               	btfss	status,2,c
  4205  0034BC  D002               	goto	u8610
  4206  0034BE  0E01               	movlw	1
  4207  0034C0  D001               	goto	u8620
  4208  0034C2                     u8610:
  4209  0034C2  0E00               	movlw	0
  4210  0034C4                     u8620:
  4211  0034C4  6E44               	movwf	_SynthRxOper,c
  4212                           
  4213                           ;SyntApp.c: 153: if(SynthRxOper)
  4214  0034C6  5044               	movf	_SynthRxOper,w,c
  4215  0034C8  B4D8               	btfsc	status,2,c
  4216  0034CA  D004               	goto	l542
  4217                           
  4218                           ; BSR set to: 0
  4219                           ;SyntApp.c: 154: {
  4220                           ;SyntApp.c: 155: InitSynth(cType);
  4221  0034CC  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4222  0034CE  ECA3  F006         	call	_InitSynth
  4223                           
  4224                           ;SyntApp.c: 156: }
  4225  0034D2  D006               	goto	l543
  4226  0034D4                     l542:
  4227                           
  4228                           ;SyntApp.c: 157: else
  4229                           ;SyntApp.c: 158: {
  4230                           ;SyntApp.c: 159: SwSpi_Set_CE_Pin(cType, 0);
  4231  0034D4  0E00               	movlw	0
  4232  0034D6  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  4233  0034D8  0100               	movlb	0	; () banked
  4234  0034DA  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4235  0034DC  ECC2  F01E         	call	_SwSpi_Set_CE_Pin
  4236  0034E0                     l543:
  4237                           
  4238                           ;SyntApp.c: 160: }
  4239                           ;SyntApp.c: 161: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_UP_OPER);
  4240  0034E0  0E44               	movlw	68
  4241  0034E2  6E24               	movwf	SendAckMessage@inRequest,c
  4242  0034E4  0E04               	movlw	4
  4243  0034E6  ECAF  F01D         	call	_SendAckMessage
  4244  0034EA  0012               	return	
  4245  0034EC                     __end_of_SetSynthOper:
  4246                           	opt stack 0
  4247                           tosu	equ	0xFFF
  4248                           tosh	equ	0xFFE
  4249                           tosl	equ	0xFFD
  4250                           pclath	equ	0xFFA
  4251                           tblptru	equ	0xFF8
  4252                           tblptrh	equ	0xFF7
  4253                           tblptrl	equ	0xFF6
  4254                           tablat	equ	0xFF5
  4255                           prodh	equ	0xFF4
  4256                           prodl	equ	0xFF3
  4257                           postinc0	equ	0xFEE
  4258                           plusw0	equ	0xFEB
  4259                           wreg	equ	0xFE8
  4260                           postdec1	equ	0xFE5
  4261                           fsr1l	equ	0xFE1
  4262                           indf2	equ	0xFDF
  4263                           postinc2	equ	0xFDE
  4264                           plusw2	equ	0xFDB
  4265                           fsr2h	equ	0xFDA
  4266                           fsr2l	equ	0xFD9
  4267                           status	equ	0xFD8
  4268                           
  4269 ;; *************** function _GetMcuRunTime *****************
  4270 ;; Defined at:
  4271 ;;		line 68 in file "SystemStatus.c"
  4272 ;; Parameters:    Size  Location     Type
  4273 ;;		None
  4274 ;; Auto vars:     Size  Location     Type
  4275 ;;  idx             2   13[BANK0 ] int 
  4276 ;;  TxMsg           9    0[BANK0 ] unsigned char [9]
  4277 ;;  tempRunTime     4    9[BANK0 ] unsigned long 
  4278 ;; Return value:  Size  Location     Type
  4279 ;;                  1    wreg      void 
  4280 ;; Registers used:
  4281 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4282 ;; Tracked objects:
  4283 ;;		On entry : 0/0
  4284 ;;		On exit  : 0/0
  4285 ;;		Unchanged: 0/0
  4286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4287 ;;      Params:         0       0       0       0       0       0       0
  4288 ;;      Locals:         0      15       0       0       0       0       0
  4289 ;;      Temps:          2       0       0       0       0       0       0
  4290 ;;      Totals:         2      15       0       0       0       0       0
  4291 ;;Total ram usage:       17 bytes
  4292 ;; Hardware stack levels used:    1
  4293 ;; Hardware stack levels required when called:    6
  4294 ;; This function calls:
  4295 ;;		_WriteUartMessage
  4296 ;;		___lldiv
  4297 ;;		___llmod
  4298 ;;		_crc8
  4299 ;; This function is called by:
  4300 ;;		_GroupStatusAndVersion
  4301 ;; This function uses a non-reentrant model
  4302 ;;
  4303                           
  4304                           	psect	text12
  4305  0026EA                     __ptext12:
  4306                           	opt stack 0
  4307  0026EA                     _GetMcuRunTime:
  4308                           	opt stack 22
  4309                           
  4310                           ;SystemStatus.c: 71: char TxMsg[(0x4) + (0x4) + 1];
  4311                           ;SystemStatus.c: 74: TxMsg[(0)] = (0x24);
  4312                           
  4313                           ;incstack = 0
  4314  0026EA  0E24               	movlw	36
  4315  0026EC  0100               	movlb	0	; () banked
  4316  0026EE  6F60               	movwf	GetMcuRunTime@TxMsg& (0+255),b
  4317                           
  4318                           ;SystemStatus.c: 75: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  4319  0026F0  0E02               	movlw	2
  4320  0026F2  6F61               	movwf	(GetMcuRunTime@TxMsg+1)& (0+255),b
  4321                           
  4322                           ;SystemStatus.c: 76: TxMsg[(2)] = STATUS_MCU_RUN_TIME;
  4323  0026F4  0E21               	movlw	33
  4324  0026F6  6F62               	movwf	(GetMcuRunTime@TxMsg+2)& (0+255),b
  4325                           
  4326                           ;SystemStatus.c: 77: TxMsg[(3)] = (0x4);
  4327  0026F8  0E04               	movlw	4
  4328  0026FA  6F63               	movwf	(GetMcuRunTime@TxMsg+3)& (0+255),b
  4329                           
  4330                           ; BSR set to: 0
  4331                           ;SystemStatus.c: 79: uint32_t tempRunTime = mcuRunTimeIn5SecTicks;
  4332  0026FC  C128  F069         	movff	_mcuRunTimeIn5SecTicks,GetMcuRunTime@tempRunTime
  4333  002700  C129  F06A         	movff	_mcuRunTimeIn5SecTicks+1,GetMcuRunTime@tempRunTime+1
  4334  002704  C12A  F06B         	movff	_mcuRunTimeIn5SecTicks+2,GetMcuRunTime@tempRunTime+2
  4335  002708  C12B  F06C         	movff	_mcuRunTimeIn5SecTicks+3,GetMcuRunTime@tempRunTime+3
  4336                           
  4337                           ;SystemStatus.c: 82: for(int idx = 0; idx < (0x4); idx++)
  4338  00270C  0E00               	movlw	0
  4339  00270E  6F6E               	movwf	(GetMcuRunTime@idx+1)& (0+255),b
  4340  002710  0E00               	movlw	0
  4341  002712  6F6D               	movwf	GetMcuRunTime@idx& (0+255),b
  4342  002714                     l8589:
  4343                           
  4344                           ; BSR set to: 0
  4345  002714  BF6E               	btfsc	(GetMcuRunTime@idx+1)& (0+255),7,b
  4346  002716  D006               	goto	l1519
  4347  002718  516E               	movf	(GetMcuRunTime@idx+1)& (0+255),w,b
  4348  00271A  E142               	bnz	l8601
  4349  00271C  0E04               	movlw	4
  4350  00271E  5D6D               	subwf	GetMcuRunTime@idx& (0+255),w,b
  4351  002720  B0D8               	btfsc	status,0,c
  4352  002722  D03E               	goto	u8740
  4353  002724                     l1519:
  4354                           
  4355                           ; BSR set to: 0
  4356                           ;SystemStatus.c: 83: {
  4357                           ;SystemStatus.c: 84: TxMsg[(0x4) + idx] = tempRunTime % 10;
  4358                           
  4359                           ; BSR set to: 0
  4360  002724  0E04               	movlw	4
  4361  002726  256D               	addwf	GetMcuRunTime@idx& (0+255),w,b
  4362  002728  6E25               	movwf	??_GetMcuRunTime& (0+255),c
  4363  00272A  0E00               	movlw	0
  4364  00272C  216E               	addwfc	(GetMcuRunTime@idx+1)& (0+255),w,b
  4365  00272E  6E26               	movwf	(??_GetMcuRunTime+1)& (0+255),c
  4366  002730  0E60               	movlw	low GetMcuRunTime@TxMsg
  4367  002732  2425               	addwf	??_GetMcuRunTime,w,c
  4368  002734  6ED9               	movwf	fsr2l,c
  4369  002736  0E00               	movlw	high GetMcuRunTime@TxMsg
  4370  002738  2026               	addwfc	??_GetMcuRunTime+1,w,c
  4371  00273A  6EDA               	movwf	fsr2h,c
  4372  00273C  C069  F018         	movff	GetMcuRunTime@tempRunTime,___llmod@dividend
  4373  002740  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___llmod@dividend+1
  4374  002744  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___llmod@dividend+2
  4375  002748  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___llmod@dividend+3
  4376  00274C  0E0A               	movlw	10
  4377  00274E  6E1C               	movwf	___llmod@divisor,c
  4378  002750  0E00               	movlw	0
  4379  002752  6E1D               	movwf	___llmod@divisor+1,c
  4380  002754  0E00               	movlw	0
  4381  002756  6E1E               	movwf	___llmod@divisor+2,c
  4382  002758  0E00               	movlw	0
  4383  00275A  6E1F               	movwf	___llmod@divisor+3,c
  4384  00275C  EC8E  F01B         	call	___llmod	;wreg free
  4385  002760  5018               	movf	?___llmod,w,c
  4386  002762  6EDF               	movwf	indf2,c
  4387                           
  4388                           ;SystemStatus.c: 85: tempRunTime /= 10;
  4389  002764  C069  F018         	movff	GetMcuRunTime@tempRunTime,___lldiv@dividend
  4390  002768  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___lldiv@dividend+1
  4391  00276C  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___lldiv@dividend+2
  4392  002770  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___lldiv@dividend+3
  4393  002774  0E0A               	movlw	10
  4394  002776  6E1C               	movwf	___lldiv@divisor,c
  4395  002778  0E00               	movlw	0
  4396  00277A  6E1D               	movwf	___lldiv@divisor+1,c
  4397  00277C  0E00               	movlw	0
  4398  00277E  6E1E               	movwf	___lldiv@divisor+2,c
  4399  002780  0E00               	movlw	0
  4400  002782  6E1F               	movwf	___lldiv@divisor+3,c
  4401  002784  ECB8  F019         	call	___lldiv	;wreg free
  4402  002788  C018  F069         	movff	?___lldiv,GetMcuRunTime@tempRunTime
  4403  00278C  C019  F06A         	movff	?___lldiv+1,GetMcuRunTime@tempRunTime+1
  4404  002790  C01A  F06B         	movff	?___lldiv+2,GetMcuRunTime@tempRunTime+2
  4405  002794  C01B  F06C         	movff	?___lldiv+3,GetMcuRunTime@tempRunTime+3
  4406  002798  0100               	movlb	0	; () banked
  4407  00279A  4B6D               	infsnz	GetMcuRunTime@idx& (0+255),f,b
  4408  00279C  2B6E               	incf	(GetMcuRunTime@idx+1)& (0+255),f,b
  4409  00279E  D7BA               	goto	l8589
  4410  0027A0                     u8740:
  4411  0027A0                     l8601:
  4412                           
  4413                           ; BSR set to: 0
  4414                           ;SystemStatus.c: 86: }
  4415                           ;SystemStatus.c: 88: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  4416  0027A0  0E60               	movlw	low GetMcuRunTime@TxMsg
  4417  0027A2  6E18               	movwf	crc8@dataArray,c
  4418  0027A4  0E00               	movlw	high GetMcuRunTime@TxMsg
  4419  0027A6  6E19               	movwf	crc8@dataArray+1,c
  4420  0027A8  0E00               	movlw	0
  4421  0027AA  6E1B               	movwf	crc8@dataSize+1,c
  4422  0027AC  0E08               	movlw	8
  4423  0027AE  6E1A               	movwf	crc8@dataSize,c
  4424  0027B0  ECD8  F01D         	call	_crc8	;wreg free
  4425  0027B4  0100               	movlb	0	; () banked
  4426  0027B6  6F68               	movwf	(GetMcuRunTime@TxMsg+8)& (0+255),b
  4427                           
  4428                           ; BSR set to: 0
  4429                           ;SystemStatus.c: 90: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  4430  0027B8  0E60               	movlw	low GetMcuRunTime@TxMsg
  4431  0027BA  6E19               	movwf	WriteUartMessage@dataBuf,c
  4432  0027BC  0E00               	movlw	high GetMcuRunTime@TxMsg
  4433  0027BE  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  4434  0027C0  0E00               	movlw	0
  4435  0027C2  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  4436  0027C4  0E09               	movlw	9
  4437  0027C6  6E1B               	movwf	WriteUartMessage@dataSize,c
  4438  0027C8  EC8A  F01F         	call	_WriteUartMessage	;wreg free
  4439  0027CC  0012               	return		;funcret
  4440  0027CE                     __end_of_GetMcuRunTime:
  4441                           	opt stack 0
  4442                           tosu	equ	0xFFF
  4443                           tosh	equ	0xFFE
  4444                           tosl	equ	0xFFD
  4445                           pclath	equ	0xFFA
  4446                           tblptru	equ	0xFF8
  4447                           tblptrh	equ	0xFF7
  4448                           tblptrl	equ	0xFF6
  4449                           tablat	equ	0xFF5
  4450                           prodh	equ	0xFF4
  4451                           prodl	equ	0xFF3
  4452                           postinc0	equ	0xFEE
  4453                           plusw0	equ	0xFEB
  4454                           wreg	equ	0xFE8
  4455                           postdec1	equ	0xFE5
  4456                           fsr1l	equ	0xFE1
  4457                           indf2	equ	0xFDF
  4458                           postinc2	equ	0xFDE
  4459                           plusw2	equ	0xFDB
  4460                           fsr2h	equ	0xFDA
  4461                           fsr2l	equ	0xFD9
  4462                           status	equ	0xFD8
  4463                           
  4464 ;; *************** function ___lldiv *****************
  4465 ;; Defined at:
  4466 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4467 ;; Parameters:    Size  Location     Type
  4468 ;;  dividend        4   23[COMRAM] unsigned long 
  4469 ;;  divisor         4   27[COMRAM] unsigned long 
  4470 ;; Auto vars:     Size  Location     Type
  4471 ;;  quotient        4   31[COMRAM] unsigned long 
  4472 ;;  counter         1   35[COMRAM] unsigned char 
  4473 ;; Return value:  Size  Location     Type
  4474 ;;                  4   23[COMRAM] unsigned long 
  4475 ;; Registers used:
  4476 ;;		wreg, status,2, status,0
  4477 ;; Tracked objects:
  4478 ;;		On entry : 0/0
  4479 ;;		On exit  : 0/0
  4480 ;;		Unchanged: 0/0
  4481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4482 ;;      Params:         8       0       0       0       0       0       0
  4483 ;;      Locals:         5       0       0       0       0       0       0
  4484 ;;      Temps:          0       0       0       0       0       0       0
  4485 ;;      Totals:        13       0       0       0       0       0       0
  4486 ;;Total ram usage:       13 bytes
  4487 ;; Hardware stack levels used:    1
  4488 ;; Hardware stack levels required when called:    4
  4489 ;; This function calls:
  4490 ;;		Nothing
  4491 ;; This function is called by:
  4492 ;;		_GetMcuRunTime
  4493 ;; This function uses a non-reentrant model
  4494 ;;
  4495                           
  4496                           	psect	text13
  4497  003370                     __ptext13:
  4498                           	opt stack 0
  4499  003370                     ___lldiv:
  4500                           	opt stack 23
  4501                           
  4502                           ;incstack = 0
  4503  003370  0E00               	movlw	0
  4504  003372  6E20               	movwf	___lldiv@quotient,c
  4505  003374  0E00               	movlw	0
  4506  003376  6E21               	movwf	___lldiv@quotient+1,c
  4507  003378  0E00               	movlw	0
  4508  00337A  6E22               	movwf	___lldiv@quotient+2,c
  4509  00337C  0E00               	movlw	0
  4510  00337E  6E23               	movwf	___lldiv@quotient+3,c
  4511  003380  501C               	movf	___lldiv@divisor,w,c
  4512  003382  101D               	iorwf	___lldiv@divisor+1,w,c
  4513  003384  101E               	iorwf	___lldiv@divisor+2,w,c
  4514  003386  101F               	iorwf	___lldiv@divisor+3,w,c
  4515  003388  B4D8               	btfsc	status,2,c
  4516  00338A  D02A               	goto	l1956
  4517  00338C  0E01               	movlw	1
  4518  00338E  6E24               	movwf	___lldiv@counter,c
  4519  003390  D006               	goto	l1951
  4520  003392  90D8               	bcf	status,0,c
  4521  003394  361C               	rlcf	___lldiv@divisor,f,c
  4522  003396  361D               	rlcf	___lldiv@divisor+1,f,c
  4523  003398  361E               	rlcf	___lldiv@divisor+2,f,c
  4524  00339A  361F               	rlcf	___lldiv@divisor+3,f,c
  4525  00339C  2A24               	incf	___lldiv@counter,f,c
  4526  00339E                     l1951:
  4527  00339E  AE1F               	btfss	___lldiv@divisor+3,7,c
  4528  0033A0  D7F8               	goto	l1952
  4529  0033A2                     u8230:
  4530  0033A2  90D8               	bcf	status,0,c
  4531  0033A4  3620               	rlcf	___lldiv@quotient,f,c
  4532  0033A6  3621               	rlcf	___lldiv@quotient+1,f,c
  4533  0033A8  3622               	rlcf	___lldiv@quotient+2,f,c
  4534  0033AA  3623               	rlcf	___lldiv@quotient+3,f,c
  4535  0033AC  501C               	movf	___lldiv@divisor,w,c
  4536  0033AE  5C18               	subwf	___lldiv@dividend,w,c
  4537  0033B0  501D               	movf	___lldiv@divisor+1,w,c
  4538  0033B2  5819               	subwfb	___lldiv@dividend+1,w,c
  4539  0033B4  501E               	movf	___lldiv@divisor+2,w,c
  4540  0033B6  581A               	subwfb	___lldiv@dividend+2,w,c
  4541  0033B8  501F               	movf	___lldiv@divisor+3,w,c
  4542  0033BA  581B               	subwfb	___lldiv@dividend+3,w,c
  4543  0033BC  A0D8               	btfss	status,0,c
  4544  0033BE  D009               	goto	l1955
  4545  0033C0  501C               	movf	___lldiv@divisor,w,c
  4546  0033C2  5E18               	subwf	___lldiv@dividend,f,c
  4547  0033C4  501D               	movf	___lldiv@divisor+1,w,c
  4548  0033C6  5A19               	subwfb	___lldiv@dividend+1,f,c
  4549  0033C8  501E               	movf	___lldiv@divisor+2,w,c
  4550  0033CA  5A1A               	subwfb	___lldiv@dividend+2,f,c
  4551  0033CC  501F               	movf	___lldiv@divisor+3,w,c
  4552  0033CE  5A1B               	subwfb	___lldiv@dividend+3,f,c
  4553  0033D0  8020               	bsf	___lldiv@quotient,0,c
  4554  0033D2                     l1955:
  4555  0033D2  90D8               	bcf	status,0,c
  4556  0033D4  321F               	rrcf	___lldiv@divisor+3,f,c
  4557  0033D6  321E               	rrcf	___lldiv@divisor+2,f,c
  4558  0033D8  321D               	rrcf	___lldiv@divisor+1,f,c
  4559  0033DA  321C               	rrcf	___lldiv@divisor,f,c
  4560  0033DC  2E24               	decfsz	___lldiv@counter,f,c
  4561  0033DE  D7E1               	goto	u8230
  4562  0033E0                     l1956:
  4563  0033E0  C020  F018         	movff	___lldiv@quotient,?___lldiv
  4564  0033E4  C021  F019         	movff	___lldiv@quotient+1,?___lldiv+1
  4565  0033E8  C022  F01A         	movff	___lldiv@quotient+2,?___lldiv+2
  4566  0033EC  C023  F01B         	movff	___lldiv@quotient+3,?___lldiv+3
  4567  0033F0  0012               	return		;funcret
  4568  0033F2                     __end_of___lldiv:
  4569                           	opt stack 0
  4570                           tosu	equ	0xFFF
  4571                           tosh	equ	0xFFE
  4572                           tosl	equ	0xFFD
  4573                           pclath	equ	0xFFA
  4574                           tblptru	equ	0xFF8
  4575                           tblptrh	equ	0xFF7
  4576                           tblptrl	equ	0xFF6
  4577                           tablat	equ	0xFF5
  4578                           prodh	equ	0xFF4
  4579                           prodl	equ	0xFF3
  4580                           postinc0	equ	0xFEE
  4581                           plusw0	equ	0xFEB
  4582                           wreg	equ	0xFE8
  4583                           postdec1	equ	0xFE5
  4584                           fsr1l	equ	0xFE1
  4585                           indf2	equ	0xFDF
  4586                           postinc2	equ	0xFDE
  4587                           plusw2	equ	0xFDB
  4588                           fsr2h	equ	0xFDA
  4589                           fsr2l	equ	0xFD9
  4590                           status	equ	0xFD8
  4591                           
  4592 ;; *************** function _GetMcuFwVersion *****************
  4593 ;; Defined at:
  4594 ;;		line 14 in file "SystemStatus.c"
  4595 ;; Parameters:    Size  Location     Type
  4596 ;;		None
  4597 ;; Auto vars:     Size  Location     Type
  4598 ;;  TxMsg          18    4[BANK0 ] unsigned char [18]
  4599 ;;  compileData     4    0[BANK0 ] unsigned long 
  4600 ;; Return value:  Size  Location     Type
  4601 ;;                  1    wreg      void 
  4602 ;; Registers used:
  4603 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4604 ;; Tracked objects:
  4605 ;;		On entry : 0/0
  4606 ;;		On exit  : 0/0
  4607 ;;		Unchanged: 0/0
  4608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4609 ;;      Params:         0       0       0       0       0       0       0
  4610 ;;      Locals:         0      26       0       0       0       0       0
  4611 ;;      Temps:          7       0       0       0       0       0       0
  4612 ;;      Totals:         7      26       0       0       0       0       0
  4613 ;;Total ram usage:       33 bytes
  4614 ;; Hardware stack levels used:    1
  4615 ;; Hardware stack levels required when called:    6
  4616 ;; This function calls:
  4617 ;;		_WriteUartMessage
  4618 ;;		_ZeroArray
  4619 ;;		___wmul
  4620 ;;		_crc8
  4621 ;; This function is called by:
  4622 ;;		_GroupStatusAndVersion
  4623 ;; This function uses a non-reentrant model
  4624 ;;
  4625                           
  4626                           	psect	text14
  4627  0006A6                     __ptext14:
  4628                           	opt stack 0
  4629  0006A6                     _GetMcuFwVersion:
  4630                           	opt stack 22
  4631                           
  4632                           ;SystemStatus.c: 16: uint32_t compileData = 0x0;
  4633                           
  4634                           ;incstack = 0
  4635  0006A6  0E00               	movlw	0
  4636  0006A8  0100               	movlb	0	; () banked
  4637  0006AA  6F60               	movwf	GetMcuFwVersion@compileData& (0+255),b
  4638  0006AC  0E00               	movlw	0
  4639  0006AE  6F61               	movwf	(GetMcuFwVersion@compileData+1)& (0+255),b
  4640  0006B0  0E00               	movlw	0
  4641  0006B2  6F62               	movwf	(GetMcuFwVersion@compileData+2)& (0+255),b
  4642  0006B4  0E00               	movlw	0
  4643  0006B6  6F63               	movwf	(GetMcuFwVersion@compileData+3)& (0+255),b
  4644                           
  4645                           ; BSR set to: 0
  4646                           ;SystemStatus.c: 19: char TxMsg[(13) + (0x4) + 1];
  4647                           ;SystemStatus.c: 20: ZeroArray(TxMsg, (13) + (0x4) + 1);
  4648  0006B8  0E64               	movlw	low GetMcuFwVersion@TxMsg
  4649  0006BA  6E20               	movwf	ZeroArray@array,c
  4650  0006BC  0E00               	movlw	high GetMcuFwVersion@TxMsg
  4651  0006BE  6E21               	movwf	ZeroArray@array+1,c
  4652  0006C0  0E00               	movlw	0
  4653  0006C2  6E23               	movwf	ZeroArray@size+1,c
  4654  0006C4  0E12               	movlw	18
  4655  0006C6  6E22               	movwf	ZeroArray@size,c
  4656  0006C8  EC57  F021         	call	_ZeroArray	;wreg free
  4657                           
  4658                           ;SystemStatus.c: 23: TxMsg[(0)] = (0x24);
  4659  0006CC  0E24               	movlw	36
  4660  0006CE  0100               	movlb	0	; () banked
  4661  0006D0  6F64               	movwf	GetMcuFwVersion@TxMsg& (0+255),b
  4662                           
  4663                           ; BSR set to: 0
  4664                           ;SystemStatus.c: 24: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  4665  0006D2  0E02               	movlw	2
  4666  0006D4  6F65               	movwf	(GetMcuFwVersion@TxMsg+1)& (0+255),b
  4667                           
  4668                           ; BSR set to: 0
  4669                           ;SystemStatus.c: 25: TxMsg[(2)] = STATUS_GET_MCU_FW_VERSION;
  4670  0006D6  0E22               	movlw	34
  4671  0006D8  6F66               	movwf	(GetMcuFwVersion@TxMsg+2)& (0+255),b
  4672                           
  4673                           ; BSR set to: 0
  4674                           ;SystemStatus.c: 26: TxMsg[(3)] = (13);
  4675  0006DA  0E0D               	movlw	13
  4676  0006DC  6F67               	movwf	(GetMcuFwVersion@TxMsg+3)& (0+255),b
  4677                           
  4678                           ; BSR set to: 0
  4679                           ;SystemStatus.c: 29: TxMsg[(0x4) + 0] = (( ("Mar 28 2018"[ 7] - '0') * 1000 + ("Mar 28 2
      +                          018"[ 8] - '0') * 100 + ("Mar 28 2018"[ 9] - '0') * 10 + ("Mar 28 2018"[10] - '0') ) & 0
      +                          xFF00) >> 8;
  4680  0006DE  0ED0               	movlw	208
  4681  0006E0  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  4682  0006E2  0EFF               	movlw	255
  4683  0006E4  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  4684  0006E6  0E97               	movlw	low (STR_1+7)
  4685  0006E8  6EF6               	movwf	tblptrl,c
  4686  0006EA  0E06               	movlw	high (STR_1+7)
  4687  0006EC  6EF7               	movwf	tblptrh,c
  4688  0006EE                     	if	0	;tblptru may be non-zero
  4689  0006EE                     	endif
  4690  0006EE                     	if	0	;tblptru may be non-zero
  4691  0006EE                     	endif
  4692  0006EE  0008               	tblrd		*
  4693  0006F0  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  4694  0006F4  0ED0               	movlw	208
  4695  0006F6  2426               	addwf	??_GetMcuFwVersion+2,w,c
  4696  0006F8  6E18               	movwf	___wmul@multiplier,c
  4697  0006FA  6A19               	clrf	___wmul@multiplier+1,c
  4698  0006FC  0EFF               	movlw	255
  4699  0006FE  2219               	addwfc	___wmul@multiplier+1,f,c
  4700  000700  0E03               	movlw	3
  4701  000702  6E1B               	movwf	___wmul@multiplicand+1,c
  4702  000704  0EE8               	movlw	232
  4703  000706  6E1A               	movwf	___wmul@multiplicand,c
  4704  000708  ECBE  F020         	call	___wmul	;wreg free
  4705  00070C  0E9A               	movlw	low (STR_1+10)
  4706  00070E  6EF6               	movwf	tblptrl,c
  4707  000710  0E06               	movlw	high (STR_1+10)
  4708  000712  6EF7               	movwf	tblptrh,c
  4709  000714                     	if	0	;tblptru may be non-zero
  4710  000714                     	endif
  4711  000714                     	if	0	;tblptru may be non-zero
  4712  000714                     	endif
  4713  000714  0008               	tblrd		*
  4714  000716  50F5               	movf	tablat,w,c
  4715  000718  6E27               	movwf	(??_GetMcuFwVersion+3)& (0+255),c
  4716  00071A  6A28               	clrf	(??_GetMcuFwVersion+4)& (0+255),c
  4717  00071C  5018               	movf	?___wmul,w,c
  4718  00071E  2627               	addwf	??_GetMcuFwVersion+3,f,c
  4719  000720  5019               	movf	?___wmul+1,w,c
  4720  000722  2228               	addwfc	??_GetMcuFwVersion+4,f,c
  4721  000724  0E98               	movlw	low (STR_1+8)
  4722  000726  6EF6               	movwf	tblptrl,c
  4723  000728  0E06               	movlw	high (STR_1+8)
  4724  00072A  6EF7               	movwf	tblptrh,c
  4725  00072C                     	if	0	;tblptru may be non-zero
  4726  00072C                     	endif
  4727  00072C                     	if	0	;tblptru may be non-zero
  4728  00072C                     	endif
  4729  00072C  0008               	tblrd		*
  4730  00072E  CFF5 F029          	movff	tablat,??_GetMcuFwVersion+5
  4731  000732  0ED0               	movlw	208
  4732  000734  2429               	addwf	??_GetMcuFwVersion+5,w,c
  4733  000736  6E18               	movwf	___wmul@multiplier,c
  4734  000738  6A19               	clrf	___wmul@multiplier+1,c
  4735  00073A  0EFF               	movlw	255
  4736  00073C  2219               	addwfc	___wmul@multiplier+1,f,c
  4737  00073E  0E00               	movlw	0
  4738  000740  6E1B               	movwf	___wmul@multiplicand+1,c
  4739  000742  0E64               	movlw	100
  4740  000744  6E1A               	movwf	___wmul@multiplicand,c
  4741  000746  ECBE  F020         	call	___wmul	;wreg free
  4742  00074A  5018               	movf	?___wmul,w,c
  4743  00074C  2627               	addwf	??_GetMcuFwVersion+3,f,c
  4744  00074E  5019               	movf	?___wmul+1,w,c
  4745  000750  2228               	addwfc	??_GetMcuFwVersion+4,f,c
  4746  000752  0E99               	movlw	low (STR_1+9)
  4747  000754  6EF6               	movwf	tblptrl,c
  4748  000756  0E06               	movlw	high (STR_1+9)
  4749  000758  6EF7               	movwf	tblptrh,c
  4750  00075A                     	if	0	;tblptru may be non-zero
  4751  00075A                     	endif
  4752  00075A                     	if	0	;tblptru may be non-zero
  4753  00075A                     	endif
  4754  00075A  0008               	tblrd		*
  4755  00075C  CFF5 F02A          	movff	tablat,??_GetMcuFwVersion+6
  4756  000760  0ED0               	movlw	208
  4757  000762  242A               	addwf	??_GetMcuFwVersion+6,w,c
  4758  000764  6E18               	movwf	___wmul@multiplier,c
  4759  000766  6A19               	clrf	___wmul@multiplier+1,c
  4760  000768  0EFF               	movlw	255
  4761  00076A  2219               	addwfc	___wmul@multiplier+1,f,c
  4762  00076C  0E00               	movlw	0
  4763  00076E  6E1B               	movwf	___wmul@multiplicand+1,c
  4764  000770  0E0A               	movlw	10
  4765  000772  6E1A               	movwf	___wmul@multiplicand,c
  4766  000774  ECBE  F020         	call	___wmul	;wreg free
  4767  000778  5018               	movf	?___wmul,w,c
  4768  00077A  2627               	addwf	??_GetMcuFwVersion+3,f,c
  4769  00077C  5019               	movf	?___wmul+1,w,c
  4770  00077E  2228               	addwfc	??_GetMcuFwVersion+4,f,c
  4771  000780  5024               	movf	??_GetMcuFwVersion,w,c
  4772  000782  2627               	addwf	??_GetMcuFwVersion+3,f,c
  4773  000784  5025               	movf	??_GetMcuFwVersion+1,w,c
  4774  000786  2228               	addwfc	??_GetMcuFwVersion+4,f,c
  4775  000788  C028  F027         	movff	??_GetMcuFwVersion+4,??_GetMcuFwVersion+3
  4776  00078C  6A28               	clrf	??_GetMcuFwVersion+4,c
  4777  00078E  5027               	movf	??_GetMcuFwVersion+3,w,c
  4778  000790  0100               	movlb	0	; () banked
  4779  000792  6F68               	movwf	(GetMcuFwVersion@TxMsg+4)& (0+255),b
  4780                           
  4781                           ; BSR set to: 0
  4782                           ;SystemStatus.c: 30: TxMsg[(0x4) + 1] = ( ("Mar 28 2018"[ 7] - '0') * 1000 + ("Mar 28 20
      +                          18"[ 8] - '0') * 100 + ("Mar 28 2018"[ 9] - '0') * 10 + ("Mar 28 2018"[10] - '0') ) & 0x
      +                          FF;
  4783  000794  0E9A               	movlw	low (STR_1+10)
  4784  000796  6EF6               	movwf	tblptrl,c
  4785  000798  0E06               	movlw	high (STR_1+10)
  4786  00079A  6EF7               	movwf	tblptrh,c
  4787  00079C                     	if	0	;tblptru may be non-zero
  4788  00079C                     	endif
  4789  00079C                     	if	0	;tblptru may be non-zero
  4790  00079C                     	endif
  4791  00079C  0008               	tblrd		*
  4792  00079E  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  4793  0007A2  0E99               	movlw	low (STR_1+9)
  4794  0007A4  6EF6               	movwf	tblptrl,c
  4795  0007A6  0E06               	movlw	high (STR_1+9)
  4796  0007A8  6EF7               	movwf	tblptrh,c
  4797  0007AA                     	if	0	;tblptru may be non-zero
  4798  0007AA                     	endif
  4799  0007AA                     	if	0	;tblptru may be non-zero
  4800  0007AA                     	endif
  4801  0007AA  0008               	tblrd		*
  4802  0007AC  50F5               	movf	tablat,w,c
  4803  0007AE  0FD0               	addlw	208
  4804  0007B0  0D0A               	mullw	10
  4805  0007B2  CFF3 F025          	movff	prodl,??_GetMcuFwVersion+1
  4806  0007B6  0E98               	movlw	low (STR_1+8)
  4807  0007B8  6EF6               	movwf	tblptrl,c
  4808  0007BA  0E06               	movlw	high (STR_1+8)
  4809  0007BC  6EF7               	movwf	tblptrh,c
  4810  0007BE                     	if	0	;tblptru may be non-zero
  4811  0007BE                     	endif
  4812  0007BE                     	if	0	;tblptru may be non-zero
  4813  0007BE                     	endif
  4814  0007BE  0008               	tblrd		*
  4815  0007C0  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  4816  0007C4  0ED0               	movlw	208
  4817  0007C6  2426               	addwf	??_GetMcuFwVersion+2,w,c
  4818  0007C8  6E18               	movwf	___wmul@multiplier,c
  4819  0007CA  6A19               	clrf	___wmul@multiplier+1,c
  4820  0007CC  0EFF               	movlw	255
  4821  0007CE  2219               	addwfc	___wmul@multiplier+1,f,c
  4822  0007D0  0E00               	movlw	0
  4823  0007D2  6E1B               	movwf	___wmul@multiplicand+1,c
  4824  0007D4  0E64               	movlw	100
  4825  0007D6  6E1A               	movwf	___wmul@multiplicand,c
  4826  0007D8  ECBE  F020         	call	___wmul	;wreg free
  4827  0007DC  0E97               	movlw	low (STR_1+7)
  4828  0007DE  6EF6               	movwf	tblptrl,c
  4829  0007E0  0E06               	movlw	high (STR_1+7)
  4830  0007E2  6EF7               	movwf	tblptrh,c
  4831  0007E4                     	if	0	;tblptru may be non-zero
  4832  0007E4                     	endif
  4833  0007E4                     	if	0	;tblptru may be non-zero
  4834  0007E4                     	endif
  4835  0007E4  0008               	tblrd		*
  4836  0007E6  50F5               	movf	tablat,w,c
  4837  0007E8  0FD0               	addlw	208
  4838  0007EA  0DE8               	mullw	232
  4839  0007EC  50F3               	movf	prodl,w,c
  4840  0007EE  2418               	addwf	?___wmul,w,c
  4841  0007F0  2425               	addwf	??_GetMcuFwVersion+1,w,c
  4842  0007F2  2424               	addwf	??_GetMcuFwVersion,w,c
  4843  0007F4  0FD0               	addlw	208
  4844  0007F6  0100               	movlb	0	; () banked
  4845  0007F8  6F69               	movwf	(GetMcuFwVersion@TxMsg+5)& (0+255),b
  4846                           
  4847                           ; BSR set to: 0
  4848                           ;SystemStatus.c: 33: TxMsg[(0x4) + 2] = "Mar 28 2018"[0];
  4849  0007FA  0E90               	movlw	low STR_1
  4850  0007FC  6EF6               	movwf	tblptrl,c
  4851  0007FE                     	if	1	;There is more than 1 active tblptr byte
  4852  0007FE  0E06               	movlw	high STR_1
  4853  000800  6EF7               	movwf	tblptrh,c
  4854  000802                     	endif
  4855  000802                     	if	0	;There are less than 3 active tblptr bytes
  4856  000802                     	endif
  4857  000802  0008               	tblrd		*
  4858  000804  CFF5 F06A          	movff	tablat,GetMcuFwVersion@TxMsg+6
  4859                           
  4860                           ; BSR set to: 0
  4861                           ;SystemStatus.c: 34: TxMsg[(0x4) + 3] = "Mar 28 2018"[1];
  4862  000808  0E91               	movlw	low (STR_1+1)
  4863  00080A  6EF6               	movwf	tblptrl,c
  4864  00080C  0E06               	movlw	high (STR_1+1)
  4865  00080E  6EF7               	movwf	tblptrh,c
  4866  000810                     	if	0	;tblptru may be non-zero
  4867  000810                     	endif
  4868  000810                     	if	0	;tblptru may be non-zero
  4869  000810                     	endif
  4870  000810  0008               	tblrd		*
  4871  000812  CFF5 F06B          	movff	tablat,GetMcuFwVersion@TxMsg+7
  4872                           
  4873                           ; BSR set to: 0
  4874                           ;SystemStatus.c: 35: TxMsg[(0x4) + 4] = "Mar 28 2018"[2];
  4875  000816  0E92               	movlw	low (STR_1+2)
  4876  000818  6EF6               	movwf	tblptrl,c
  4877  00081A  0E06               	movlw	high (STR_1+2)
  4878  00081C  6EF7               	movwf	tblptrh,c
  4879  00081E                     	if	0	;tblptru may be non-zero
  4880  00081E                     	endif
  4881  00081E                     	if	0	;tblptru may be non-zero
  4882  00081E                     	endif
  4883  00081E  0008               	tblrd		*
  4884  000820  CFF5 F06C          	movff	tablat,GetMcuFwVersion@TxMsg+8
  4885                           
  4886                           ; BSR set to: 0
  4887                           ;SystemStatus.c: 38: TxMsg[(0x4) + 5] = (( (("Mar 28 2018"[4] >= '0') ? ("Mar 28 2018"[4
      +                          ] - '0') * 10 : 0) + ("Mar 28 2018"[5] - '0') ) & 0xFF00) >> 8;
  4888  000824  0E94               	movlw	low (STR_1+4)
  4889  000826  6EF6               	movwf	tblptrl,c
  4890  000828  0E06               	movlw	high (STR_1+4)
  4891  00082A  6EF7               	movwf	tblptrh,c
  4892  00082C                     	if	0	;tblptru may be non-zero
  4893  00082C                     	endif
  4894  00082C                     	if	0	;tblptru may be non-zero
  4895  00082C                     	endif
  4896  00082C  0E30               	movlw	48
  4897  00082E  0008               	tblrd		*
  4898  000830  60F5               	cpfslt	tablat,c
  4899  000832  D005               	goto	l1503
  4900                           
  4901                           ; BSR set to: 0
  4902  000834  0E00               	movlw	0
  4903  000836  6F77               	movwf	(_GetMcuFwVersion$2698+1)& (0+255),b
  4904  000838  0E00               	movlw	0
  4905  00083A  6F76               	movwf	_GetMcuFwVersion$2698& (0+255),b
  4906  00083C  D017               	goto	l1505
  4907  00083E                     l1503:
  4908                           
  4909                           ; BSR set to: 0
  4910                           
  4911                           ; BSR set to: 0
  4912  00083E  0E94               	movlw	low (STR_1+4)
  4913  000840  6EF6               	movwf	tblptrl,c
  4914  000842  0E06               	movlw	high (STR_1+4)
  4915  000844  6EF7               	movwf	tblptrh,c
  4916  000846                     	if	0	;tblptru may be non-zero
  4917  000846                     	endif
  4918  000846                     	if	0	;tblptru may be non-zero
  4919  000846                     	endif
  4920  000846  0008               	tblrd		*
  4921  000848  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  4922  00084C  0ED0               	movlw	208
  4923  00084E  2424               	addwf	??_GetMcuFwVersion,w,c
  4924  000850  6E18               	movwf	___wmul@multiplier,c
  4925  000852  6A19               	clrf	___wmul@multiplier+1,c
  4926  000854  0EFF               	movlw	255
  4927  000856  2219               	addwfc	___wmul@multiplier+1,f,c
  4928  000858  0E00               	movlw	0
  4929  00085A  6E1B               	movwf	___wmul@multiplicand+1,c
  4930  00085C  0E0A               	movlw	10
  4931  00085E  6E1A               	movwf	___wmul@multiplicand,c
  4932  000860  ECBE  F020         	call	___wmul	;wreg free
  4933  000864  C018  F076         	movff	?___wmul,_GetMcuFwVersion$2698
  4934  000868  C019  F077         	movff	?___wmul+1,_GetMcuFwVersion$2698+1
  4935  00086C                     l1505:
  4936  00086C  0ED0               	movlw	208
  4937  00086E  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  4938  000870  0EFF               	movlw	255
  4939  000872  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  4940  000874  0E95               	movlw	low (STR_1+5)
  4941  000876  6EF6               	movwf	tblptrl,c
  4942  000878  0E06               	movlw	high (STR_1+5)
  4943  00087A  6EF7               	movwf	tblptrh,c
  4944  00087C                     	if	0	;tblptru may be non-zero
  4945  00087C                     	endif
  4946  00087C                     	if	0	;tblptru may be non-zero
  4947  00087C                     	endif
  4948  00087C  0008               	tblrd		*
  4949  00087E  50F5               	movf	tablat,w,c
  4950  000880  0100               	movlb	0	; () banked
  4951  000882  2576               	addwf	_GetMcuFwVersion$2698& (0+255),w,b
  4952  000884  6E26               	movwf	(??_GetMcuFwVersion+2)& (0+255),c
  4953  000886  0E00               	movlw	0
  4954  000888  2177               	addwfc	(_GetMcuFwVersion$2698+1)& (0+255),w,b
  4955  00088A  6E27               	movwf	(??_GetMcuFwVersion+3)& (0+255),c
  4956  00088C  5024               	movf	??_GetMcuFwVersion,w,c
  4957  00088E  2626               	addwf	??_GetMcuFwVersion+2,f,c
  4958  000890  5025               	movf	??_GetMcuFwVersion+1,w,c
  4959  000892  2227               	addwfc	??_GetMcuFwVersion+3,f,c
  4960  000894  C027  F026         	movff	??_GetMcuFwVersion+3,??_GetMcuFwVersion+2
  4961  000898  6A27               	clrf	??_GetMcuFwVersion+3,c
  4962  00089A  5026               	movf	??_GetMcuFwVersion+2,w,c
  4963  00089C  6F6D               	movwf	(GetMcuFwVersion@TxMsg+9)& (0+255),b
  4964                           
  4965                           ; BSR set to: 0
  4966                           ;SystemStatus.c: 39: TxMsg[(0x4) + 6] = ( (("Mar 28 2018"[4] >= '0') ? ("Mar 28 2018"[4]
      +                           - '0') * 10 : 0) + ("Mar 28 2018"[5] - '0') ) & 0xFF;
  4967  00089E  0E94               	movlw	low (STR_1+4)
  4968  0008A0  6EF6               	movwf	tblptrl,c
  4969  0008A2  0E06               	movlw	high (STR_1+4)
  4970  0008A4  6EF7               	movwf	tblptrh,c
  4971  0008A6                     	if	0	;tblptru may be non-zero
  4972  0008A6                     	endif
  4973  0008A6                     	if	0	;tblptru may be non-zero
  4974  0008A6                     	endif
  4975  0008A6  0E30               	movlw	48
  4976  0008A8  0008               	tblrd		*
  4977  0008AA  60F5               	cpfslt	tablat,c
  4978  0008AC  D005               	goto	l1507
  4979                           
  4980                           ; BSR set to: 0
  4981  0008AE  0E00               	movlw	0
  4982  0008B0  6F79               	movwf	(_GetMcuFwVersion$2702+1)& (0+255),b
  4983  0008B2  0E00               	movlw	0
  4984  0008B4  6F78               	movwf	_GetMcuFwVersion$2702& (0+255),b
  4985  0008B6  D017               	goto	l1509
  4986  0008B8                     l1507:
  4987                           
  4988                           ; BSR set to: 0
  4989                           
  4990                           ; BSR set to: 0
  4991  0008B8  0E94               	movlw	low (STR_1+4)
  4992  0008BA  6EF6               	movwf	tblptrl,c
  4993  0008BC  0E06               	movlw	high (STR_1+4)
  4994  0008BE  6EF7               	movwf	tblptrh,c
  4995  0008C0                     	if	0	;tblptru may be non-zero
  4996  0008C0                     	endif
  4997  0008C0                     	if	0	;tblptru may be non-zero
  4998  0008C0                     	endif
  4999  0008C0  0008               	tblrd		*
  5000  0008C2  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  5001  0008C6  0ED0               	movlw	208
  5002  0008C8  2424               	addwf	??_GetMcuFwVersion,w,c
  5003  0008CA  6E18               	movwf	___wmul@multiplier,c
  5004  0008CC  6A19               	clrf	___wmul@multiplier+1,c
  5005  0008CE  0EFF               	movlw	255
  5006  0008D0  2219               	addwfc	___wmul@multiplier+1,f,c
  5007  0008D2  0E00               	movlw	0
  5008  0008D4  6E1B               	movwf	___wmul@multiplicand+1,c
  5009  0008D6  0E0A               	movlw	10
  5010  0008D8  6E1A               	movwf	___wmul@multiplicand,c
  5011  0008DA  ECBE  F020         	call	___wmul	;wreg free
  5012  0008DE  C018  F078         	movff	?___wmul,_GetMcuFwVersion$2702
  5013  0008E2  C019  F079         	movff	?___wmul+1,_GetMcuFwVersion$2702+1
  5014  0008E6                     l1509:
  5015  0008E6  0E95               	movlw	low (STR_1+5)
  5016  0008E8  6EF6               	movwf	tblptrl,c
  5017  0008EA  0E06               	movlw	high (STR_1+5)
  5018  0008EC  6EF7               	movwf	tblptrh,c
  5019  0008EE                     	if	0	;tblptru may be non-zero
  5020  0008EE                     	endif
  5021  0008EE                     	if	0	;tblptru may be non-zero
  5022  0008EE                     	endif
  5023  0008EE  0008               	tblrd		*
  5024  0008F0  50F5               	movf	tablat,w,c
  5025  0008F2  0100               	movlb	0	; () banked
  5026  0008F4  2578               	addwf	_GetMcuFwVersion$2702& (0+255),w,b
  5027  0008F6  0FD0               	addlw	208
  5028  0008F8  6F6E               	movwf	(GetMcuFwVersion@TxMsg+10)& (0+255),b
  5029                           
  5030                           ; BSR set to: 0
  5031                           ;SystemStatus.c: 42: TxMsg[(0x4) + 7] = ((("15:42:07"[0] - '0') * 10 + "15:42:07"[1] - '
      +                          0') & 0xFF00) >> 8;
  5032  0008FA  0ED0               	movlw	208
  5033  0008FC  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  5034  0008FE  0EFF               	movlw	255
  5035  000900  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  5036  000902  0E9C               	movlw	low STR_18
  5037  000904  6EF6               	movwf	tblptrl,c
  5038  000906                     	if	1	;There is more than 1 active tblptr byte
  5039  000906  0E06               	movlw	high STR_18
  5040  000908  6EF7               	movwf	tblptrh,c
  5041  00090A                     	endif
  5042  00090A                     	if	0	;There are less than 3 active tblptr bytes
  5043  00090A                     	endif
  5044  00090A  0008               	tblrd		*
  5045  00090C  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  5046  000910  0ED0               	movlw	208
  5047  000912  2426               	addwf	??_GetMcuFwVersion+2,w,c
  5048  000914  6E18               	movwf	___wmul@multiplier,c
  5049  000916  6A19               	clrf	___wmul@multiplier+1,c
  5050  000918  0EFF               	movlw	255
  5051  00091A  2219               	addwfc	___wmul@multiplier+1,f,c
  5052  00091C  0E00               	movlw	0
  5053  00091E  6E1B               	movwf	___wmul@multiplicand+1,c
  5054  000920  0E0A               	movlw	10
  5055  000922  6E1A               	movwf	___wmul@multiplicand,c
  5056  000924  ECBE  F020         	call	___wmul	;wreg free
  5057  000928  0E9D               	movlw	low (STR_18+1)
  5058  00092A  6EF6               	movwf	tblptrl,c
  5059  00092C  0E06               	movlw	high (STR_18+1)
  5060  00092E  6EF7               	movwf	tblptrh,c
  5061  000930                     	if	0	;tblptru may be non-zero
  5062  000930                     	endif
  5063  000930                     	if	0	;tblptru may be non-zero
  5064  000930                     	endif
  5065  000930  0008               	tblrd		*
  5066  000932  50F5               	movf	tablat,w,c
  5067  000934  2618               	addwf	?___wmul,f,c
  5068  000936  0E00               	movlw	0
  5069  000938  2219               	addwfc	?___wmul+1,f,c
  5070  00093A  5024               	movf	??_GetMcuFwVersion,w,c
  5071  00093C  2618               	addwf	?___wmul,f,c
  5072  00093E  5025               	movf	??_GetMcuFwVersion+1,w,c
  5073  000940  2219               	addwfc	?___wmul+1,f,c
  5074  000942  C019  F018         	movff	?___wmul+1,?___wmul
  5075  000946  6A19               	clrf	?___wmul+1,c
  5076  000948  5018               	movf	?___wmul,w,c
  5077  00094A  0100               	movlb	0	; () banked
  5078  00094C  6F6F               	movwf	(GetMcuFwVersion@TxMsg+11)& (0+255),b
  5079                           
  5080                           ; BSR set to: 0
  5081                           ;SystemStatus.c: 43: TxMsg[(0x4) + 8] = (("15:42:07"[0] - '0') * 10 + "15:42:07"[1] - '0
      +                          ') & 0xFF;
  5082  00094E  0E9D               	movlw	low (STR_18+1)
  5083  000950  6EF6               	movwf	tblptrl,c
  5084  000952  0E06               	movlw	high (STR_18+1)
  5085  000954  6EF7               	movwf	tblptrh,c
  5086  000956                     	if	0	;tblptru may be non-zero
  5087  000956                     	endif
  5088  000956                     	if	0	;tblptru may be non-zero
  5089  000956                     	endif
  5090  000956  0008               	tblrd		*
  5091  000958  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  5092  00095C  0E9C               	movlw	low STR_18
  5093  00095E  6EF6               	movwf	tblptrl,c
  5094  000960                     	if	1	;There is more than 1 active tblptr byte
  5095  000960  0E06               	movlw	high STR_18
  5096  000962  6EF7               	movwf	tblptrh,c
  5097  000964                     	endif
  5098  000964                     	if	0	;There are less than 3 active tblptr bytes
  5099  000964                     	endif
  5100  000964  0008               	tblrd		*
  5101  000966  50F5               	movf	tablat,w,c
  5102  000968  0FD0               	addlw	208
  5103  00096A  0D0A               	mullw	10
  5104  00096C  50F3               	movf	prodl,w,c
  5105  00096E  2424               	addwf	??_GetMcuFwVersion,w,c
  5106  000970  0FD0               	addlw	208
  5107  000972  6F70               	movwf	(GetMcuFwVersion@TxMsg+12)& (0+255),b
  5108                           
  5109                           ; BSR set to: 0
  5110                           ;SystemStatus.c: 46: TxMsg[(0x4) + 9] = ((("15:42:07"[3] - '0') * 10 + "15:42:07"[4] - '
      +                          0') & 0xFF00) >> 8;
  5111  000974  0ED0               	movlw	208
  5112  000976  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  5113  000978  0EFF               	movlw	255
  5114  00097A  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  5115  00097C  0E9F               	movlw	low (STR_18+3)
  5116  00097E  6EF6               	movwf	tblptrl,c
  5117  000980  0E06               	movlw	high (STR_18+3)
  5118  000982  6EF7               	movwf	tblptrh,c
  5119  000984                     	if	0	;tblptru may be non-zero
  5120  000984                     	endif
  5121  000984                     	if	0	;tblptru may be non-zero
  5122  000984                     	endif
  5123  000984  0008               	tblrd		*
  5124  000986  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  5125  00098A  0ED0               	movlw	208
  5126  00098C  2426               	addwf	??_GetMcuFwVersion+2,w,c
  5127  00098E  6E18               	movwf	___wmul@multiplier,c
  5128  000990  6A19               	clrf	___wmul@multiplier+1,c
  5129  000992  0EFF               	movlw	255
  5130  000994  2219               	addwfc	___wmul@multiplier+1,f,c
  5131  000996  0E00               	movlw	0
  5132  000998  6E1B               	movwf	___wmul@multiplicand+1,c
  5133  00099A  0E0A               	movlw	10
  5134  00099C  6E1A               	movwf	___wmul@multiplicand,c
  5135  00099E  ECBE  F020         	call	___wmul	;wreg free
  5136  0009A2  0EA0               	movlw	low (STR_18+4)
  5137  0009A4  6EF6               	movwf	tblptrl,c
  5138  0009A6  0E06               	movlw	high (STR_18+4)
  5139  0009A8  6EF7               	movwf	tblptrh,c
  5140  0009AA                     	if	0	;tblptru may be non-zero
  5141  0009AA                     	endif
  5142  0009AA                     	if	0	;tblptru may be non-zero
  5143  0009AA                     	endif
  5144  0009AA  0008               	tblrd		*
  5145  0009AC  50F5               	movf	tablat,w,c
  5146  0009AE  2618               	addwf	?___wmul,f,c
  5147  0009B0  0E00               	movlw	0
  5148  0009B2  2219               	addwfc	?___wmul+1,f,c
  5149  0009B4  5024               	movf	??_GetMcuFwVersion,w,c
  5150  0009B6  2618               	addwf	?___wmul,f,c
  5151  0009B8  5025               	movf	??_GetMcuFwVersion+1,w,c
  5152  0009BA  2219               	addwfc	?___wmul+1,f,c
  5153  0009BC  C019  F018         	movff	?___wmul+1,?___wmul
  5154  0009C0  6A19               	clrf	?___wmul+1,c
  5155  0009C2  5018               	movf	?___wmul,w,c
  5156  0009C4  0100               	movlb	0	; () banked
  5157  0009C6  6F71               	movwf	(GetMcuFwVersion@TxMsg+13)& (0+255),b
  5158                           
  5159                           ; BSR set to: 0
  5160                           ;SystemStatus.c: 47: TxMsg[(0x4) + 10] = (("15:42:07"[3] - '0') * 10 + "15:42:07"[4] - '
      +                          0') & 0xFF;
  5161  0009C8  0EA0               	movlw	low (STR_18+4)
  5162  0009CA  6EF6               	movwf	tblptrl,c
  5163  0009CC  0E06               	movlw	high (STR_18+4)
  5164  0009CE  6EF7               	movwf	tblptrh,c
  5165  0009D0                     	if	0	;tblptru may be non-zero
  5166  0009D0                     	endif
  5167  0009D0                     	if	0	;tblptru may be non-zero
  5168  0009D0                     	endif
  5169  0009D0  0008               	tblrd		*
  5170  0009D2  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  5171  0009D6  0E9F               	movlw	low (STR_18+3)
  5172  0009D8  6EF6               	movwf	tblptrl,c
  5173  0009DA  0E06               	movlw	high (STR_18+3)
  5174  0009DC  6EF7               	movwf	tblptrh,c
  5175  0009DE                     	if	0	;tblptru may be non-zero
  5176  0009DE                     	endif
  5177  0009DE                     	if	0	;tblptru may be non-zero
  5178  0009DE                     	endif
  5179  0009DE  0008               	tblrd		*
  5180  0009E0  50F5               	movf	tablat,w,c
  5181  0009E2  0FD0               	addlw	208
  5182  0009E4  0D0A               	mullw	10
  5183  0009E6  50F3               	movf	prodl,w,c
  5184  0009E8  2424               	addwf	??_GetMcuFwVersion,w,c
  5185  0009EA  0FD0               	addlw	208
  5186  0009EC  6F72               	movwf	(GetMcuFwVersion@TxMsg+14)& (0+255),b
  5187                           
  5188                           ; BSR set to: 0
  5189                           ;SystemStatus.c: 49: TxMsg[(0x4) + 11] = ((("15:42:07"[6] - '0') * 10 + "15:42:07"[7] - 
      +                          '0') & 0xFF00) >> 8;
  5190  0009EE  0ED0               	movlw	208
  5191  0009F0  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  5192  0009F2  0EFF               	movlw	255
  5193  0009F4  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  5194  0009F6  0EA2               	movlw	low (STR_18+6)
  5195  0009F8  6EF6               	movwf	tblptrl,c
  5196  0009FA  0E06               	movlw	high (STR_18+6)
  5197  0009FC  6EF7               	movwf	tblptrh,c
  5198  0009FE                     	if	0	;tblptru may be non-zero
  5199  0009FE                     	endif
  5200  0009FE                     	if	0	;tblptru may be non-zero
  5201  0009FE                     	endif
  5202  0009FE  0008               	tblrd		*
  5203  000A00  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  5204  000A04  0ED0               	movlw	208
  5205  000A06  2426               	addwf	??_GetMcuFwVersion+2,w,c
  5206  000A08  6E18               	movwf	___wmul@multiplier,c
  5207  000A0A  6A19               	clrf	___wmul@multiplier+1,c
  5208  000A0C  0EFF               	movlw	255
  5209  000A0E  2219               	addwfc	___wmul@multiplier+1,f,c
  5210  000A10  0E00               	movlw	0
  5211  000A12  6E1B               	movwf	___wmul@multiplicand+1,c
  5212  000A14  0E0A               	movlw	10
  5213  000A16  6E1A               	movwf	___wmul@multiplicand,c
  5214  000A18  ECBE  F020         	call	___wmul	;wreg free
  5215  000A1C  0EA3               	movlw	low (STR_18+7)
  5216  000A1E  6EF6               	movwf	tblptrl,c
  5217  000A20  0E06               	movlw	high (STR_18+7)
  5218  000A22  6EF7               	movwf	tblptrh,c
  5219  000A24                     	if	0	;tblptru may be non-zero
  5220  000A24                     	endif
  5221  000A24                     	if	0	;tblptru may be non-zero
  5222  000A24                     	endif
  5223  000A24  0008               	tblrd		*
  5224  000A26  50F5               	movf	tablat,w,c
  5225  000A28  2618               	addwf	?___wmul,f,c
  5226  000A2A  0E00               	movlw	0
  5227  000A2C  2219               	addwfc	?___wmul+1,f,c
  5228  000A2E  5024               	movf	??_GetMcuFwVersion,w,c
  5229  000A30  2618               	addwf	?___wmul,f,c
  5230  000A32  5025               	movf	??_GetMcuFwVersion+1,w,c
  5231  000A34  2219               	addwfc	?___wmul+1,f,c
  5232  000A36  C019  F018         	movff	?___wmul+1,?___wmul
  5233  000A3A  6A19               	clrf	?___wmul+1,c
  5234  000A3C  5018               	movf	?___wmul,w,c
  5235  000A3E  0100               	movlb	0	; () banked
  5236  000A40  6F73               	movwf	(GetMcuFwVersion@TxMsg+15)& (0+255),b
  5237                           
  5238                           ; BSR set to: 0
  5239                           ;SystemStatus.c: 50: TxMsg[(0x4) + 12] = (("15:42:07"[6] - '0') * 10 + "15:42:07"[7] - '
      +                          0') & 0xFF;
  5240  000A42  0EA3               	movlw	low (STR_18+7)
  5241  000A44  6EF6               	movwf	tblptrl,c
  5242  000A46  0E06               	movlw	high (STR_18+7)
  5243  000A48  6EF7               	movwf	tblptrh,c
  5244  000A4A                     	if	0	;tblptru may be non-zero
  5245  000A4A                     	endif
  5246  000A4A                     	if	0	;tblptru may be non-zero
  5247  000A4A                     	endif
  5248  000A4A  0008               	tblrd		*
  5249  000A4C  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  5250  000A50  0EA2               	movlw	low (STR_18+6)
  5251  000A52  6EF6               	movwf	tblptrl,c
  5252  000A54  0E06               	movlw	high (STR_18+6)
  5253  000A56  6EF7               	movwf	tblptrh,c
  5254  000A58                     	if	0	;tblptru may be non-zero
  5255  000A58                     	endif
  5256  000A58                     	if	0	;tblptru may be non-zero
  5257  000A58                     	endif
  5258  000A58  0008               	tblrd		*
  5259  000A5A  50F5               	movf	tablat,w,c
  5260  000A5C  0FD0               	addlw	208
  5261  000A5E  0D0A               	mullw	10
  5262  000A60  50F3               	movf	prodl,w,c
  5263  000A62  2424               	addwf	??_GetMcuFwVersion,w,c
  5264  000A64  0FD0               	addlw	208
  5265  000A66  6F74               	movwf	(GetMcuFwVersion@TxMsg+16)& (0+255),b
  5266                           
  5267                           ; BSR set to: 0
  5268                           ;SystemStatus.c: 52: TxMsg[(13) + (0x4)] = crc8(TxMsg, (13) + (0x4));
  5269  000A68  0E64               	movlw	low GetMcuFwVersion@TxMsg
  5270  000A6A  6E18               	movwf	crc8@dataArray,c
  5271  000A6C  0E00               	movlw	high GetMcuFwVersion@TxMsg
  5272  000A6E  6E19               	movwf	crc8@dataArray+1,c
  5273  000A70  0E00               	movlw	0
  5274  000A72  6E1B               	movwf	crc8@dataSize+1,c
  5275  000A74  0E11               	movlw	17
  5276  000A76  6E1A               	movwf	crc8@dataSize,c
  5277  000A78  ECD8  F01D         	call	_crc8	;wreg free
  5278  000A7C  0100               	movlb	0	; () banked
  5279  000A7E  6F75               	movwf	(GetMcuFwVersion@TxMsg+17)& (0+255),b
  5280                           
  5281                           ;SystemStatus.c: 54: WriteUartMessage(TxMsg, (13) + (0x4) + 1);
  5282  000A80  0E64               	movlw	low GetMcuFwVersion@TxMsg
  5283  000A82  6E19               	movwf	WriteUartMessage@dataBuf,c
  5284  000A84  0E00               	movlw	high GetMcuFwVersion@TxMsg
  5285  000A86  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5286  000A88  0E00               	movlw	0
  5287  000A8A  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5288  000A8C  0E12               	movlw	18
  5289  000A8E  6E1B               	movwf	WriteUartMessage@dataSize,c
  5290  000A90  EC8A  F01F         	call	_WriteUartMessage	;wreg free
  5291  000A94  0012               	return		;funcret
  5292  000A96                     __end_of_GetMcuFwVersion:
  5293                           	opt stack 0
  5294                           tosu	equ	0xFFF
  5295                           tosh	equ	0xFFE
  5296                           tosl	equ	0xFFD
  5297                           pclath	equ	0xFFA
  5298                           tblptru	equ	0xFF8
  5299                           tblptrh	equ	0xFF7
  5300                           tblptrl	equ	0xFF6
  5301                           tablat	equ	0xFF5
  5302                           prodh	equ	0xFF4
  5303                           prodl	equ	0xFF3
  5304                           postinc0	equ	0xFEE
  5305                           plusw0	equ	0xFEB
  5306                           wreg	equ	0xFE8
  5307                           postdec1	equ	0xFE5
  5308                           fsr1l	equ	0xFE1
  5309                           indf2	equ	0xFDF
  5310                           postinc2	equ	0xFDE
  5311                           plusw2	equ	0xFDB
  5312                           fsr2h	equ	0xFDA
  5313                           fsr2l	equ	0xFD9
  5314                           status	equ	0xFD8
  5315                           
  5316 ;; *************** function _FlashReadUart *****************
  5317 ;; Defined at:
  5318 ;;		line 63 in file "FlashApp.c"
  5319 ;; Parameters:    Size  Location     Type
  5320 ;;  data            2   39[BANK0 ] PTR unsigned char 
  5321 ;; Auto vars:     Size  Location     Type
  5322 ;;  idx             2  132[BANK0 ] int 
  5323 ;;  j               2  128[BANK0 ] int 
  5324 ;;  TxMsg          69   47[BANK0 ] unsigned char [69]
  5325 ;;  val             8  116[BANK0 ] struct .
  5326 ;;  numOfSampleT    2  130[BANK0 ] int 
  5327 ;; Return value:  Size  Location     Type
  5328 ;;                  1    wreg      void 
  5329 ;; Registers used:
  5330 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5331 ;; Tracked objects:
  5332 ;;		On entry : 0/0
  5333 ;;		On exit  : 0/0
  5334 ;;		Unchanged: 0/0
  5335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5336 ;;      Params:         0       2       0       0       0       0       0
  5337 ;;      Locals:         0      87       0       0       0       0       0
  5338 ;;      Temps:          0       6       0       0       0       0       0
  5339 ;;      Totals:         0      95       0       0       0       0       0
  5340 ;;Total ram usage:       95 bytes
  5341 ;; Hardware stack levels used:    1
  5342 ;; Hardware stack levels required when called:    8
  5343 ;; This function calls:
  5344 ;;		_FLASH_IsWriteDone
  5345 ;;		_FLASH_ReadByte
  5346 ;;		_GetIntFromUartData
  5347 ;;		_SendAckMessage
  5348 ;;		_WriteUartMessage
  5349 ;;		_ZeroArray
  5350 ;;		_crc8
  5351 ;; This function is called by:
  5352 ;;		_GroupFlashMemory
  5353 ;; This function uses a non-reentrant model
  5354 ;;
  5355                           
  5356                           	psect	text15
  5357  0011D8                     __ptext15:
  5358                           	opt stack 0
  5359  0011D8                     _FlashReadUart:
  5360                           	opt stack 20
  5361                           
  5362                           ;FlashApp.c: 69: int16_t numOfSampleToRead = 0x0;
  5363                           
  5364                           ;incstack = 0
  5365  0011D8  0E00               	movlw	0
  5366  0011DA  0100               	movlb	0	; () banked
  5367  0011DC  6FE3               	movwf	(FlashReadUart@numOfSampleToRead+1)& (0+255),b
  5368  0011DE  0E00               	movlw	0
  5369  0011E0  6FE2               	movwf	FlashReadUart@numOfSampleToRead& (0+255),b
  5370                           
  5371                           ; BSR set to: 0
  5372                           ;FlashApp.c: 70: INT_VAL val = GetIntFromUartData(10, data);
  5373  0011E2  C087  F066         	movff	FlashReadUart@data,GetIntFromUartData@data
  5374  0011E6  C088  F067         	movff	FlashReadUart@data+1,GetIntFromUartData@data+1
  5375  0011EA  0E0A               	movlw	10
  5376  0011EC  EC1C  F00F         	call	_GetIntFromUartData
  5377  0011F0  EE20  F0D4         	lfsr	2,FlashReadUart@val
  5378  0011F4  0E07               	movlw	7
  5379  0011F6                     u8361:
  5380  0011F6  CFEB FFDB          	movff	plusw0,plusw2
  5381  0011FA  06E8               	decf	wreg,f,c
  5382  0011FC  E2FC               	bc	u8361
  5383                           
  5384                           ;FlashApp.c: 72: int numOfSampleToRead = val.num;
  5385  0011FE  C0D4  F0E2         	movff	FlashReadUart@val,FlashReadUart@numOfSampleToRead
  5386  001202  C0D5  F0E3         	movff	FlashReadUart@val+1,FlashReadUart@numOfSampleToRead+1
  5387                           
  5388                           ;FlashApp.c: 74: char TxMsg[(64) + (0x4) + 1];
  5389                           ;FlashApp.c: 76: if (FLASH_IsWriteDone() == 0)
  5390  001206  ECFD  F021         	call	_FLASH_IsWriteDone	;wreg free
  5391  00120A  0900               	iorlw	0
  5392  00120C  B4D8               	btfsc	status,2,c
  5393  00120E  0012               	return	
  5394                           
  5395                           ;FlashApp.c: 80: }
  5396                           ;FlashApp.c: 82: if(numOfValidateSamples == 0)
  5397                           
  5398                           ;FlashApp.c: 78: {
  5399                           ;FlashApp.c: 79: return;
  5400  001210  0101               	movlb	1	; () banked
  5401  001212  5130               	movf	_numOfValidateSamples& (0+255),w,b
  5402  001214  1131               	iorwf	(_numOfValidateSamples+1)& (0+255),w,b
  5403  001216  1132               	iorwf	(_numOfValidateSamples+2)& (0+255),w,b
  5404  001218  1133               	iorwf	(_numOfValidateSamples+3)& (0+255),w,b
  5405  00121A  A4D8               	btfss	status,2,c
  5406  00121C  D005               	goto	l326
  5407                           
  5408                           ; BSR set to: 1
  5409                           ;FlashApp.c: 83: {
  5410                           ;FlashApp.c: 84: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_NO_SAMPLE_YET)
      +                          ;
  5411  00121E  0E55               	movlw	85
  5412  001220  6E24               	movwf	SendAckMessage@inRequest,c
  5413  001222  0E05               	movlw	5
  5414  001224  ECAF  F01D         	call	_SendAckMessage
  5415  001228                     l326:
  5416                           
  5417                           ;FlashApp.c: 85: }
  5418                           ;FlashApp.c: 88: numOfSampleToRead = numOfSampleToRead >= numOfValidateSamples ? numOfVa
      +                          lidateSamples : numOfSampleToRead;
  5419  001228  C0E2  F089         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  5420  00122C  C0E3  F08A         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  5421  001230  0E00               	movlw	0
  5422  001232  0100               	movlb	0	; () banked
  5423  001234  BF8A               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  5424  001236  0EFF               	movlw	255
  5425  001238  6F8B               	movwf	(??_FlashReadUart+2)& (0+255),b
  5426  00123A  6F8C               	movwf	(??_FlashReadUart+3)& (0+255),b
  5427  00123C  0101               	movlb	1	; () banked
  5428  00123E  5130               	movf	_numOfValidateSamples& (0+255),w,b
  5429  001240  0100               	movlb	0	; () banked
  5430  001242  5D89               	subwf	??_FlashReadUart& (0+255),w,b
  5431  001244  0101               	movlb	1	; () banked
  5432  001246  5131               	movf	(_numOfValidateSamples+1)& (0+255),w,b
  5433  001248  0100               	movlb	0	; () banked
  5434  00124A  598A               	subwfb	(??_FlashReadUart+1)& (0+255),w,b
  5435  00124C  0101               	movlb	1	; () banked
  5436  00124E  5132               	movf	(_numOfValidateSamples+2)& (0+255),w,b
  5437  001250  0100               	movlb	0	; () banked
  5438  001252  598B               	subwfb	(??_FlashReadUart+2)& (0+255),w,b
  5439  001254  0101               	movlb	1	; () banked
  5440  001256  5133               	movf	(_numOfValidateSamples+3)& (0+255),w,b
  5441  001258  0100               	movlb	0	; () banked
  5442  00125A  598C               	subwfb	(??_FlashReadUart+3)& (0+255),w,b
  5443  00125C  B0D8               	btfsc	status,0,c
  5444  00125E  D00A               	goto	l328
  5445                           
  5446                           ; BSR set to: 0
  5447  001260  C0E2  F0DC         	movff	FlashReadUart@numOfSampleToRead,_FlashReadUart$609
  5448  001264  C0E3  F0DD         	movff	FlashReadUart@numOfSampleToRead+1,_FlashReadUart$609+1
  5449  001268  0E00               	movlw	0
  5450  00126A  BFDD               	btfsc	(_FlashReadUart$609+1)& (0+255),7,b
  5451  00126C  0EFF               	movlw	-1
  5452  00126E  6FDE               	movwf	(_FlashReadUart$609+2)& (0+255),b
  5453  001270  6FDF               	movwf	(_FlashReadUart$609+3)& (0+255),b
  5454  001272  D008               	goto	l330
  5455  001274                     l328:
  5456                           
  5457                           ; BSR set to: 0
  5458  001274  C130  F0DC         	movff	_numOfValidateSamples,_FlashReadUart$609
  5459  001278  C131  F0DD         	movff	_numOfValidateSamples+1,_FlashReadUart$609+1
  5460  00127C  C132  F0DE         	movff	_numOfValidateSamples+2,_FlashReadUart$609+2
  5461  001280  C133  F0DF         	movff	_numOfValidateSamples+3,_FlashReadUart$609+3
  5462  001284                     l330:
  5463                           
  5464                           ; BSR set to: 0
  5465  001284  C0DC  F0E2         	movff	_FlashReadUart$609,FlashReadUart@numOfSampleToRead
  5466  001288  C0DD  F0E3         	movff	_FlashReadUart$609+1,FlashReadUart@numOfSampleToRead+1
  5467                           
  5468                           ;FlashApp.c: 91: readAddress = writeAddress;
  5469  00128C  C03E  F1C8         	movff	_writeAddress,_readAddress
  5470  001290  C03F  F1C9         	movff	_writeAddress+1,_readAddress+1
  5471  001294  C040  F1CA         	movff	_writeAddress+2,_readAddress+2
  5472  001298  C041  F1CB         	movff	_writeAddress+3,_readAddress+3
  5473                           
  5474                           ; BSR set to: 0
  5475                           ;FlashApp.c: 93: for (int j=0; j<numOfSampleToRead; j++)
  5476  00129C  0E00               	movlw	0
  5477  00129E  6FE1               	movwf	(FlashReadUart@j+1)& (0+255),b
  5478  0012A0  0E00               	movlw	0
  5479  0012A2  6FE0               	movwf	FlashReadUart@j& (0+255),b
  5480  0012A4  D08A               	goto	l331
  5481  0012A6                     
  5482                           ; BSR set to: 0
  5483                           ;FlashApp.c: 94: {
  5484                           ;FlashApp.c: 96: if(readAddress > 0)
  5485                           
  5486                           ; BSR set to: 0
  5487  0012A6  0101               	movlb	1	; () banked
  5488  0012A8  51C8               	movf	_readAddress& (0+255),w,b
  5489  0012AA  11C9               	iorwf	(_readAddress+1)& (0+255),w,b
  5490  0012AC  11CA               	iorwf	(_readAddress+2)& (0+255),w,b
  5491  0012AE  11CB               	iorwf	(_readAddress+3)& (0+255),w,b
  5492  0012B0  B4D8               	btfsc	status,2,c
  5493  0012B2  D007               	goto	l333
  5494                           
  5495                           ; BSR set to: 1
  5496                           ;FlashApp.c: 97: {
  5497                           ;FlashApp.c: 98: readAddress -= (64);
  5498  0012B4  0E40               	movlw	64
  5499  0012B6  5FC8               	subwf	_readAddress& (0+255),f,b
  5500  0012B8  0E00               	movlw	0
  5501  0012BA  5BC9               	subwfb	(_readAddress+1)& (0+255),f,b
  5502  0012BC  5BCA               	subwfb	(_readAddress+2)& (0+255),f,b
  5503  0012BE  5BCB               	subwfb	(_readAddress+3)& (0+255),f,b
  5504                           
  5505                           ;FlashApp.c: 99: }
  5506  0012C0  D008               	goto	l334
  5507  0012C2                     l333:
  5508                           
  5509                           ; BSR set to: 1
  5510                           ;FlashApp.c: 100: else
  5511                           ;FlashApp.c: 101: {
  5512                           ;FlashApp.c: 102: readAddress = 0x7FF0 - (64);
  5513                           
  5514                           ; BSR set to: 1
  5515  0012C2  0EB0               	movlw	176
  5516  0012C4  6FC8               	movwf	_readAddress& (0+255),b
  5517  0012C6  0E7F               	movlw	127
  5518  0012C8  6FC9               	movwf	(_readAddress+1)& (0+255),b
  5519  0012CA  0E00               	movlw	0
  5520  0012CC  6FCA               	movwf	(_readAddress+2)& (0+255),b
  5521  0012CE  0E00               	movlw	0
  5522  0012D0  6FCB               	movwf	(_readAddress+3)& (0+255),b
  5523  0012D2                     l334:
  5524                           
  5525                           ; BSR set to: 1
  5526                           ;FlashApp.c: 103: }
  5527                           ;FlashApp.c: 106: ZeroArray(TxMsg, (64) + (0x4) + 1);
  5528                           
  5529                           ; BSR set to: 1
  5530  0012D2  0E8F               	movlw	low FlashReadUart@TxMsg
  5531  0012D4  6E20               	movwf	ZeroArray@array,c
  5532  0012D6  0E00               	movlw	high FlashReadUart@TxMsg
  5533  0012D8  6E21               	movwf	ZeroArray@array+1,c
  5534  0012DA  0E00               	movlw	0
  5535  0012DC  6E23               	movwf	ZeroArray@size+1,c
  5536  0012DE  0E45               	movlw	69
  5537  0012E0  6E22               	movwf	ZeroArray@size,c
  5538  0012E2  EC57  F021         	call	_ZeroArray	;wreg free
  5539                           
  5540                           ;FlashApp.c: 107: TxMsg[(0)] = (0x24);
  5541  0012E6  0E24               	movlw	36
  5542  0012E8  0100               	movlb	0	; () banked
  5543  0012EA  6F8F               	movwf	FlashReadUart@TxMsg& (0+255),b
  5544                           
  5545                           ; BSR set to: 0
  5546                           ;FlashApp.c: 108: TxMsg[(1)] = FLASH_MSG;
  5547  0012EC  0E05               	movlw	5
  5548  0012EE  6F90               	movwf	(FlashReadUart@TxMsg+1)& (0+255),b
  5549                           
  5550                           ; BSR set to: 0
  5551                           ;FlashApp.c: 109: TxMsg[(2)] = FLASH_SEND_RAW_DATA;
  5552  0012F0  0E54               	movlw	84
  5553  0012F2  6F91               	movwf	(FlashReadUart@TxMsg+2)& (0+255),b
  5554                           
  5555                           ; BSR set to: 0
  5556                           ;FlashApp.c: 110: TxMsg[(3)] = (64);
  5557  0012F4  0E40               	movlw	64
  5558  0012F6  6F92               	movwf	(FlashReadUart@TxMsg+3)& (0+255),b
  5559                           
  5560                           ; BSR set to: 0
  5561                           ;FlashApp.c: 112: for(int idx = 0; idx < (64); idx++)
  5562  0012F8  0E00               	movlw	0
  5563  0012FA  6FE5               	movwf	(FlashReadUart@idx+1)& (0+255),b
  5564  0012FC  0E00               	movlw	0
  5565  0012FE  6FE4               	movwf	FlashReadUart@idx& (0+255),b
  5566  001300                     l8307:
  5567                           
  5568                           ; BSR set to: 0
  5569  001300  BFE5               	btfsc	(FlashReadUart@idx+1)& (0+255),7,b
  5570  001302  D006               	goto	l335
  5571  001304  51E5               	movf	(FlashReadUart@idx+1)& (0+255),w,b
  5572  001306  E134               	bnz	l8317
  5573  001308  0E40               	movlw	64
  5574  00130A  5DE4               	subwf	FlashReadUart@idx& (0+255),w,b
  5575  00130C  B0D8               	btfsc	status,0,c
  5576  00130E  D030               	goto	u8420
  5577  001310                     l335:
  5578                           
  5579                           ; BSR set to: 0
  5580                           ;FlashApp.c: 113: {
  5581                           ;FlashApp.c: 114: TxMsg[(0x4) + idx] = FLASH_ReadByte(readAddress + idx);
  5582                           
  5583                           ; BSR set to: 0
  5584  001310  0E04               	movlw	4
  5585  001312  25E4               	addwf	FlashReadUart@idx& (0+255),w,b
  5586  001314  6F89               	movwf	??_FlashReadUart& (0+255),b
  5587  001316  0E00               	movlw	0
  5588  001318  21E5               	addwfc	(FlashReadUart@idx+1)& (0+255),w,b
  5589  00131A  6F8A               	movwf	(??_FlashReadUart+1)& (0+255),b
  5590  00131C  0E8F               	movlw	low FlashReadUart@TxMsg
  5591  00131E  2589               	addwf	??_FlashReadUart& (0+255),w,b
  5592  001320  6ED9               	movwf	fsr2l,c
  5593  001322  0E00               	movlw	high FlashReadUart@TxMsg
  5594  001324  218A               	addwfc	(??_FlashReadUart+1)& (0+255),w,b
  5595  001326  6EDA               	movwf	fsr2h,c
  5596  001328  C0E4  F08B         	movff	FlashReadUart@idx,??_FlashReadUart+2
  5597  00132C  C0E5  F08C         	movff	FlashReadUart@idx+1,??_FlashReadUart+3
  5598  001330  0E00               	movlw	0
  5599  001332  BF8C               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  5600  001334  0EFF               	movlw	255
  5601  001336  6F8D               	movwf	(??_FlashReadUart+4)& (0+255),b
  5602  001338  6F8E               	movwf	(??_FlashReadUart+5)& (0+255),b
  5603  00133A  0101               	movlb	1	; () banked
  5604  00133C  51C8               	movf	_readAddress& (0+255),w,b
  5605  00133E  0100               	movlb	0	; () banked
  5606  001340  258B               	addwf	(??_FlashReadUart+2)& (0+255),w,b
  5607  001342  6E18               	movwf	FLASH_ReadByte@flashAddr,c
  5608  001344  0101               	movlb	1	; () banked
  5609  001346  51C9               	movf	(_readAddress+1)& (0+255),w,b
  5610  001348  0100               	movlb	0	; () banked
  5611  00134A  218C               	addwfc	(??_FlashReadUart+3)& (0+255),w,b
  5612  00134C  6E19               	movwf	FLASH_ReadByte@flashAddr+1,c
  5613  00134E  0101               	movlb	1	; () banked
  5614  001350  51CA               	movf	(_readAddress+2)& (0+255),w,b
  5615  001352  0100               	movlb	0	; () banked
  5616  001354  218D               	addwfc	(??_FlashReadUart+4)& (0+255),w,b
  5617  001356  6E1A               	movwf	FLASH_ReadByte@flashAddr+2,c
  5618  001358  0101               	movlb	1	; () banked
  5619  00135A  51CB               	movf	(_readAddress+3)& (0+255),w,b
  5620  00135C  0100               	movlb	0	; () banked
  5621  00135E  218E               	addwfc	(??_FlashReadUart+5)& (0+255),w,b
  5622  001360  6E1B               	movwf	FLASH_ReadByte@flashAddr+3,c
  5623  001362  ECCF  F021         	call	_FLASH_ReadByte	;wreg free
  5624  001366  6EDF               	movwf	indf2,c
  5625  001368  0100               	movlb	0	; () banked
  5626  00136A  4BE4               	infsnz	FlashReadUart@idx& (0+255),f,b
  5627  00136C  2BE5               	incf	(FlashReadUart@idx+1)& (0+255),f,b
  5628  00136E  D7C8               	goto	l8307
  5629  001370                     u8420:
  5630  001370                     l8317:
  5631                           
  5632                           ; BSR set to: 0
  5633                           ;FlashApp.c: 115: }
  5634                           ;FlashApp.c: 117: TxMsg[(64) + (0x4)] = crc8(TxMsg, (64) + (0x4));
  5635  001370  0E8F               	movlw	low FlashReadUart@TxMsg
  5636  001372  6E18               	movwf	crc8@dataArray,c
  5637  001374  0E00               	movlw	high FlashReadUart@TxMsg
  5638  001376  6E19               	movwf	crc8@dataArray+1,c
  5639  001378  0E00               	movlw	0
  5640  00137A  6E1B               	movwf	crc8@dataSize+1,c
  5641  00137C  0E44               	movlw	68
  5642  00137E  6E1A               	movwf	crc8@dataSize,c
  5643  001380  ECD8  F01D         	call	_crc8	;wreg free
  5644  001384  0100               	movlb	0	; () banked
  5645  001386  6FD3               	movwf	(FlashReadUart@TxMsg+68)& (0+255),b
  5646                           
  5647                           ; BSR set to: 0
  5648                           ;FlashApp.c: 119: WriteUartMessage(TxMsg, (64) + (0x4) + 1);
  5649  001388  0E8F               	movlw	low FlashReadUart@TxMsg
  5650  00138A  6E19               	movwf	WriteUartMessage@dataBuf,c
  5651  00138C  0E00               	movlw	high FlashReadUart@TxMsg
  5652  00138E  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5653  001390  0E00               	movlw	0
  5654  001392  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5655  001394  0E45               	movlw	69
  5656  001396  6E1B               	movwf	WriteUartMessage@dataSize,c
  5657  001398  EC8A  F01F         	call	_WriteUartMessage	;wreg free
  5658                           
  5659                           ;FlashApp.c: 120: _delay((unsigned long)((200)*(8000000/4000.0)));
  5660  00139C  0E03               	movlw	3
  5661  00139E  0100               	movlb	0	; () banked
  5662  0013A0  6F8A               	movwf	(??_FlashReadUart+1)& (0+255),b
  5663  0013A2  0E08               	movlw	8
  5664  0013A4  6F89               	movwf	??_FlashReadUart& (0+255),b
  5665  0013A6  0E77               	movlw	119
  5666  0013A8                     u9137:
  5667  0013A8  2EE8               	decfsz	wreg,f,c
  5668  0013AA  D7FE               	bra	u9137
  5669  0013AC  2F89               	decfsz	??_FlashReadUart& (0+255),f,b
  5670  0013AE  D7FC               	bra	u9137
  5671  0013B0  2F8A               	decfsz	(??_FlashReadUart+1)& (0+255),f,b
  5672  0013B2  D7FA               	bra	u9137
  5673  0013B4  0100               	movlb	0	; () banked
  5674  0013B6  4BE0               	infsnz	FlashReadUart@j& (0+255),f,b
  5675  0013B8  2BE1               	incf	(FlashReadUart@j+1)& (0+255),f,b
  5676  0013BA                     l331:
  5677                           
  5678                           ; BSR set to: 0
  5679                           
  5680                           ; BSR set to: 0
  5681  0013BA  51E2               	movf	FlashReadUart@numOfSampleToRead& (0+255),w,b
  5682  0013BC  5DE0               	subwf	FlashReadUart@j& (0+255),w,b
  5683  0013BE  51E1               	movf	(FlashReadUart@j+1)& (0+255),w,b
  5684  0013C0  0A80               	xorlw	128
  5685  0013C2  6F89               	movwf	??_FlashReadUart& (0+255),b
  5686  0013C4  51E3               	movf	(FlashReadUart@numOfSampleToRead+1)& (0+255),w,b
  5687  0013C6  0A80               	xorlw	128
  5688  0013C8  5989               	subwfb	??_FlashReadUart& (0+255),w,b
  5689  0013CA  B0D8               	btfsc	status,0,c
  5690  0013CC  0012               	return	
  5691  0013CE  D76B               	goto	l332
  5692  0013D0                     __end_of_FlashReadUart:
  5693                           	opt stack 0
  5694                           tosu	equ	0xFFF
  5695                           tosh	equ	0xFFE
  5696                           tosl	equ	0xFFD
  5697                           pclath	equ	0xFFA
  5698                           tblptru	equ	0xFF8
  5699                           tblptrh	equ	0xFF7
  5700                           tblptrl	equ	0xFF6
  5701                           tablat	equ	0xFF5
  5702                           prodh	equ	0xFF4
  5703                           prodl	equ	0xFF3
  5704                           postinc0	equ	0xFEE
  5705                           plusw0	equ	0xFEB
  5706                           wreg	equ	0xFE8
  5707                           postdec1	equ	0xFE5
  5708                           fsr1l	equ	0xFE1
  5709                           indf2	equ	0xFDF
  5710                           postinc2	equ	0xFDE
  5711                           plusw2	equ	0xFDB
  5712                           fsr2h	equ	0xFDA
  5713                           fsr2l	equ	0xFD9
  5714                           status	equ	0xFD8
  5715                           
  5716 ;; *************** function _FLASH_ReadByte *****************
  5717 ;; Defined at:
  5718 ;;		line 58 in file "mcc_generated_files/memory.c"
  5719 ;; Parameters:    Size  Location     Type
  5720 ;;  flashAddr       4   23[COMRAM] unsigned long 
  5721 ;; Auto vars:     Size  Location     Type
  5722 ;;		None
  5723 ;; Return value:  Size  Location     Type
  5724 ;;                  1    wreg      unsigned char 
  5725 ;; Registers used:
  5726 ;;		wreg, status,2
  5727 ;; Tracked objects:
  5728 ;;		On entry : 0/0
  5729 ;;		On exit  : 0/0
  5730 ;;		Unchanged: 0/0
  5731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5732 ;;      Params:         4       0       0       0       0       0       0
  5733 ;;      Locals:         0       0       0       0       0       0       0
  5734 ;;      Temps:          0       0       0       0       0       0       0
  5735 ;;      Totals:         4       0       0       0       0       0       0
  5736 ;;Total ram usage:        4 bytes
  5737 ;; Hardware stack levels used:    1
  5738 ;; Hardware stack levels required when called:    4
  5739 ;; This function calls:
  5740 ;;		Nothing
  5741 ;; This function is called by:
  5742 ;;		_FlashReadUart
  5743 ;;		_FLASH_ReadWord
  5744 ;;		_FLASH_WriteByte
  5745 ;; This function uses a non-reentrant model
  5746 ;;
  5747                           
  5748                           	psect	text16
  5749  00439E                     __ptext16:
  5750                           	opt stack 0
  5751  00439E                     _FLASH_ReadByte:
  5752                           	opt stack 23
  5753                           
  5754                           ;memory.c: 60: TBLPTRU = (uint8_t)((flashAddr & 0x00FF0000) >> 16);
  5755                           
  5756                           ;incstack = 0
  5757  00439E  C01A  FFF8         	movff	FLASH_ReadByte@flashAddr+2,tblptru	;volatile
  5758                           
  5759                           ;memory.c: 61: TBLPTRH = (uint8_t)((flashAddr & 0x0000FF00)>> 8);
  5760  0043A2  C019  FFF7         	movff	FLASH_ReadByte@flashAddr+1,tblptrh	;volatile
  5761                           
  5762                           ;memory.c: 62: TBLPTRL = (uint8_t)(flashAddr & 0x000000FF);
  5763  0043A6  C018  FFF6         	movff	FLASH_ReadByte@flashAddr,tblptrl	;volatile
  5764  0043AA  0008               	tblrd		*	;# 
  5765                           
  5766                           ;memory.c: 66: return (TABLAT);
  5767  0043AC  50F5               	movf	tablat,w,c	;volatile
  5768  0043AE  0012               	return	
  5769  0043B0                     __end_of_FLASH_ReadByte:
  5770                           	opt stack 0
  5771                           tosu	equ	0xFFF
  5772                           tosh	equ	0xFFE
  5773                           tosl	equ	0xFFD
  5774                           pclath	equ	0xFFA
  5775                           tblptru	equ	0xFF8
  5776                           tblptrh	equ	0xFF7
  5777                           tblptrl	equ	0xFF6
  5778                           tablat	equ	0xFF5
  5779                           prodh	equ	0xFF4
  5780                           prodl	equ	0xFF3
  5781                           postinc0	equ	0xFEE
  5782                           plusw0	equ	0xFEB
  5783                           wreg	equ	0xFE8
  5784                           postdec1	equ	0xFE5
  5785                           fsr1l	equ	0xFE1
  5786                           indf2	equ	0xFDF
  5787                           postinc2	equ	0xFDE
  5788                           plusw2	equ	0xFDB
  5789                           fsr2h	equ	0xFDA
  5790                           fsr2l	equ	0xFD9
  5791                           status	equ	0xFD8
  5792                           
  5793 ;; *************** function _FlashReadCondition *****************
  5794 ;; Defined at:
  5795 ;;		line 138 in file "FlashApp.c"
  5796 ;; Parameters:    Size  Location     Type
  5797 ;;		None
  5798 ;; Auto vars:     Size  Location     Type
  5799 ;;  TxMsg           9   39[COMRAM] unsigned char [9]
  5800 ;; Return value:  Size  Location     Type
  5801 ;;                  1    wreg      void 
  5802 ;; Registers used:
  5803 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5804 ;; Tracked objects:
  5805 ;;		On entry : 0/0
  5806 ;;		On exit  : 0/0
  5807 ;;		Unchanged: 0/0
  5808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5809 ;;      Params:         0       0       0       0       0       0       0
  5810 ;;      Locals:         9       0       0       0       0       0       0
  5811 ;;      Temps:          4       0       0       0       0       0       0
  5812 ;;      Totals:        13       0       0       0       0       0       0
  5813 ;;Total ram usage:       13 bytes
  5814 ;; Hardware stack levels used:    1
  5815 ;; Hardware stack levels required when called:    6
  5816 ;; This function calls:
  5817 ;;		_WriteUartMessage
  5818 ;;		_ZeroArray
  5819 ;;		_crc8
  5820 ;;		_make8
  5821 ;; This function is called by:
  5822 ;;		_GroupFlashMemory
  5823 ;; This function uses a non-reentrant model
  5824 ;;
  5825                           
  5826                           	psect	text17
  5827  002204                     __ptext17:
  5828                           	opt stack 0
  5829  002204                     _FlashReadCondition:
  5830                           	opt stack 22
  5831                           
  5832                           ;FlashApp.c: 141: char TxMsg[4 + (0x4) + 1];
  5833                           ;FlashApp.c: 142: ZeroArray(TxMsg, 4 + (0x4) + 1);
  5834                           
  5835                           ;incstack = 0
  5836  002204  0E28               	movlw	low FlashReadCondition@TxMsg
  5837  002206  6E20               	movwf	ZeroArray@array,c
  5838  002208  0E00               	movlw	high FlashReadCondition@TxMsg
  5839  00220A  6E21               	movwf	ZeroArray@array+1,c
  5840  00220C  0E00               	movlw	0
  5841  00220E  6E23               	movwf	ZeroArray@size+1,c
  5842  002210  0E09               	movlw	9
  5843  002212  6E22               	movwf	ZeroArray@size,c
  5844  002214  EC57  F021         	call	_ZeroArray	;wreg free
  5845                           
  5846                           ;FlashApp.c: 145: TxMsg[(0)] = (0x24);
  5847  002218  0E24               	movlw	36
  5848  00221A  6E28               	movwf	FlashReadCondition@TxMsg,c
  5849                           
  5850                           ;FlashApp.c: 146: TxMsg[(1)] = FLASH_MSG;
  5851  00221C  0E05               	movlw	5
  5852  00221E  6E29               	movwf	FlashReadCondition@TxMsg+1,c
  5853                           
  5854                           ;FlashApp.c: 147: TxMsg[(2)] = FLASH_READ_CONDITION;
  5855  002220  0E52               	movlw	82
  5856  002222  6E2A               	movwf	FlashReadCondition@TxMsg+2,c
  5857                           
  5858                           ;FlashApp.c: 148: TxMsg[(3)] = 4;
  5859  002224  0E04               	movlw	4
  5860  002226  6E2B               	movwf	FlashReadCondition@TxMsg+3,c
  5861                           
  5862                           ;FlashApp.c: 153: TxMsg[(0x4) + 0] = make8(0x7FF0 - 0x4580,1);
  5863  002228  0E70               	movlw	112
  5864  00222A  6E18               	movwf	make8@data,c
  5865  00222C  0E3A               	movlw	58
  5866  00222E  6E19               	movwf	make8@data+1,c
  5867  002230  0E00               	movlw	0
  5868  002232  6E1A               	movwf	make8@data+2,c
  5869  002234  0E00               	movlw	0
  5870  002236  6E1B               	movwf	make8@data+3,c
  5871  002238  0E01               	movlw	1
  5872  00223A  6E1C               	movwf	make8@dataLocation,c
  5873  00223C  EC51  F01C         	call	_make8	;wreg free
  5874  002240  6E2C               	movwf	FlashReadCondition@TxMsg+4,c
  5875                           
  5876                           ;FlashApp.c: 154: TxMsg[(0x4) + 1] = make8(0x7FF0 - 0x4580,0);
  5877  002242  0E70               	movlw	112
  5878  002244  6E18               	movwf	make8@data,c
  5879  002246  0E3A               	movlw	58
  5880  002248  6E19               	movwf	make8@data+1,c
  5881  00224A  0E00               	movlw	0
  5882  00224C  6E1A               	movwf	make8@data+2,c
  5883  00224E  0E00               	movlw	0
  5884  002250  6E1B               	movwf	make8@data+3,c
  5885  002252  0E00               	movlw	0
  5886  002254  6E1C               	movwf	make8@dataLocation,c
  5887  002256  EC51  F01C         	call	_make8	;wreg free
  5888  00225A  6E2D               	movwf	FlashReadCondition@TxMsg+5,c
  5889                           
  5890                           ;FlashApp.c: 157: TxMsg[(0x4) + 2] = make8(0x7FF0 - writeAddress,1);
  5891  00225C  C03E  F024         	movff	_writeAddress,??_FlashReadCondition
  5892  002260  C03F  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  5893  002264  C040  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  5894  002268  C041  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  5895  00226C  1E24               	comf	??_FlashReadCondition,f,c
  5896  00226E  1E25               	comf	??_FlashReadCondition+1,f,c
  5897  002270  1E26               	comf	??_FlashReadCondition+2,f,c
  5898  002272  1E27               	comf	??_FlashReadCondition+3,f,c
  5899  002274  2A24               	incf	??_FlashReadCondition,f,c
  5900  002276  0E00               	movlw	0
  5901  002278  2225               	addwfc	??_FlashReadCondition+1,f,c
  5902  00227A  2226               	addwfc	??_FlashReadCondition+2,f,c
  5903  00227C  2227               	addwfc	??_FlashReadCondition+3,f,c
  5904  00227E  0EF0               	movlw	240
  5905  002280  2424               	addwf	??_FlashReadCondition,w,c
  5906  002282  6E18               	movwf	make8@data,c
  5907  002284  0E7F               	movlw	127
  5908  002286  2025               	addwfc	??_FlashReadCondition+1,w,c
  5909  002288  6E19               	movwf	make8@data+1,c
  5910  00228A  0E00               	movlw	0
  5911  00228C  2026               	addwfc	??_FlashReadCondition+2,w,c
  5912  00228E  6E1A               	movwf	make8@data+2,c
  5913  002290  0E00               	movlw	0
  5914  002292  2027               	addwfc	??_FlashReadCondition+3,w,c
  5915  002294  6E1B               	movwf	make8@data+3,c
  5916  002296  0E01               	movlw	1
  5917  002298  6E1C               	movwf	make8@dataLocation,c
  5918  00229A  EC51  F01C         	call	_make8	;wreg free
  5919  00229E  6E2E               	movwf	FlashReadCondition@TxMsg+6,c
  5920                           
  5921                           ;FlashApp.c: 158: TxMsg[(0x4) + 3] = make8(0x7FF0 - writeAddress,0);
  5922  0022A0  C03E  F024         	movff	_writeAddress,??_FlashReadCondition
  5923  0022A4  C03F  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  5924  0022A8  C040  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  5925  0022AC  C041  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  5926  0022B0  1E24               	comf	??_FlashReadCondition,f,c
  5927  0022B2  1E25               	comf	??_FlashReadCondition+1,f,c
  5928  0022B4  1E26               	comf	??_FlashReadCondition+2,f,c
  5929  0022B6  1E27               	comf	??_FlashReadCondition+3,f,c
  5930  0022B8  2A24               	incf	??_FlashReadCondition,f,c
  5931  0022BA  0E00               	movlw	0
  5932  0022BC  2225               	addwfc	??_FlashReadCondition+1,f,c
  5933  0022BE  2226               	addwfc	??_FlashReadCondition+2,f,c
  5934  0022C0  2227               	addwfc	??_FlashReadCondition+3,f,c
  5935  0022C2  0EF0               	movlw	240
  5936  0022C4  2424               	addwf	??_FlashReadCondition,w,c
  5937  0022C6  6E18               	movwf	make8@data,c
  5938  0022C8  0E7F               	movlw	127
  5939  0022CA  2025               	addwfc	??_FlashReadCondition+1,w,c
  5940  0022CC  6E19               	movwf	make8@data+1,c
  5941  0022CE  0E00               	movlw	0
  5942  0022D0  2026               	addwfc	??_FlashReadCondition+2,w,c
  5943  0022D2  6E1A               	movwf	make8@data+2,c
  5944  0022D4  0E00               	movlw	0
  5945  0022D6  2027               	addwfc	??_FlashReadCondition+3,w,c
  5946  0022D8  6E1B               	movwf	make8@data+3,c
  5947  0022DA  0E00               	movlw	0
  5948  0022DC  6E1C               	movwf	make8@dataLocation,c
  5949  0022DE  EC51  F01C         	call	_make8	;wreg free
  5950  0022E2  6E2F               	movwf	FlashReadCondition@TxMsg+7,c
  5951                           
  5952                           ;FlashApp.c: 160: TxMsg[4 + (0x4)] = crc8(TxMsg, 4 + (0x4));
  5953  0022E4  0E28               	movlw	low FlashReadCondition@TxMsg
  5954  0022E6  6E18               	movwf	crc8@dataArray,c
  5955  0022E8  0E00               	movlw	high FlashReadCondition@TxMsg
  5956  0022EA  6E19               	movwf	crc8@dataArray+1,c
  5957  0022EC  0E00               	movlw	0
  5958  0022EE  6E1B               	movwf	crc8@dataSize+1,c
  5959  0022F0  0E08               	movlw	8
  5960  0022F2  6E1A               	movwf	crc8@dataSize,c
  5961  0022F4  ECD8  F01D         	call	_crc8	;wreg free
  5962  0022F8  6E30               	movwf	FlashReadCondition@TxMsg+8,c
  5963                           
  5964                           ;FlashApp.c: 162: WriteUartMessage(TxMsg, 4 + (0x4) + 1);
  5965  0022FA  0E28               	movlw	low FlashReadCondition@TxMsg
  5966  0022FC  6E19               	movwf	WriteUartMessage@dataBuf,c
  5967  0022FE  0E00               	movlw	high FlashReadCondition@TxMsg
  5968  002300  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5969  002302  0E00               	movlw	0
  5970  002304  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5971  002306  0E09               	movlw	9
  5972  002308  6E1B               	movwf	WriteUartMessage@dataSize,c
  5973  00230A  EC8A  F01F         	call	_WriteUartMessage	;wreg free
  5974  00230E  0012               	return		;funcret
  5975  002310                     __end_of_FlashReadCondition:
  5976                           	opt stack 0
  5977                           tosu	equ	0xFFF
  5978                           tosh	equ	0xFFE
  5979                           tosl	equ	0xFFD
  5980                           pclath	equ	0xFFA
  5981                           tblptru	equ	0xFF8
  5982                           tblptrh	equ	0xFF7
  5983                           tblptrl	equ	0xFF6
  5984                           tablat	equ	0xFF5
  5985                           prodh	equ	0xFF4
  5986                           prodl	equ	0xFF3
  5987                           postinc0	equ	0xFEE
  5988                           plusw0	equ	0xFEB
  5989                           wreg	equ	0xFE8
  5990                           postdec1	equ	0xFE5
  5991                           fsr1l	equ	0xFE1
  5992                           indf2	equ	0xFDF
  5993                           postinc2	equ	0xFDE
  5994                           plusw2	equ	0xFDB
  5995                           fsr2h	equ	0xFDA
  5996                           fsr2l	equ	0xFD9
  5997                           status	equ	0xFD8
  5998                           
  5999 ;; *************** function _FlashEreaseMem *****************
  6000 ;; Defined at:
  6001 ;;		line 129 in file "FlashApp.c"
  6002 ;; Parameters:    Size  Location     Type
  6003 ;;		None
  6004 ;; Auto vars:     Size  Location     Type
  6005 ;;		None
  6006 ;; Return value:  Size  Location     Type
  6007 ;;                  1    wreg      void 
  6008 ;; Registers used:
  6009 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6010 ;; Tracked objects:
  6011 ;;		On entry : 0/0
  6012 ;;		On exit  : 0/0
  6013 ;;		Unchanged: 0/0
  6014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6015 ;;      Params:         0       0       0       0       0       0       0
  6016 ;;      Locals:         0       0       0       0       0       0       0
  6017 ;;      Temps:          0       0       0       0       0       0       0
  6018 ;;      Totals:         0       0       0       0       0       0       0
  6019 ;;Total ram usage:        0 bytes
  6020 ;; Hardware stack levels used:    1
  6021 ;; Hardware stack levels required when called:    7
  6022 ;; This function calls:
  6023 ;;		_SendAckMessage
  6024 ;;		_ZeroArray
  6025 ;; This function is called by:
  6026 ;;		_GroupFlashMemory
  6027 ;; This function uses a non-reentrant model
  6028 ;;
  6029                           
  6030                           	psect	text18
  6031  003B0C                     __ptext18:
  6032                           	opt stack 0
  6033  003B0C                     _FlashEreaseMem:
  6034                           	opt stack 21
  6035                           
  6036                           ;FlashApp.c: 131: writeAddress = 0x4580;
  6037                           
  6038                           ;incstack = 0
  6039  003B0C  0E80               	movlw	128
  6040  003B0E  6E3E               	movwf	_writeAddress,c
  6041  003B10  0E45               	movlw	69
  6042  003B12  6E3F               	movwf	_writeAddress+1,c
  6043  003B14  0E00               	movlw	0
  6044  003B16  6E40               	movwf	_writeAddress+2,c
  6045  003B18  0E00               	movlw	0
  6046  003B1A  6E41               	movwf	_writeAddress+3,c
  6047                           
  6048                           ;FlashApp.c: 132: readAddress = 0x4580;
  6049  003B1C  0E80               	movlw	128
  6050  003B1E  0101               	movlb	1	; () banked
  6051  003B20  6FC8               	movwf	_readAddress& (0+255),b
  6052  003B22  0E45               	movlw	69
  6053  003B24  6FC9               	movwf	(_readAddress+1)& (0+255),b
  6054  003B26  0E00               	movlw	0
  6055  003B28  6FCA               	movwf	(_readAddress+2)& (0+255),b
  6056  003B2A  0E00               	movlw	0
  6057  003B2C  6FCB               	movwf	(_readAddress+3)& (0+255),b
  6058                           
  6059                           ;FlashApp.c: 133: numOfValidateSamples = 0;
  6060  003B2E  0E00               	movlw	0
  6061  003B30  6F30               	movwf	_numOfValidateSamples& (0+255),b
  6062  003B32  0E00               	movlw	0
  6063  003B34  6F31               	movwf	(_numOfValidateSamples+1)& (0+255),b
  6064  003B36  0E00               	movlw	0
  6065  003B38  6F32               	movwf	(_numOfValidateSamples+2)& (0+255),b
  6066  003B3A  0E00               	movlw	0
  6067  003B3C  6F33               	movwf	(_numOfValidateSamples+3)& (0+255),b
  6068                           
  6069                           ; BSR set to: 1
  6070                           ;FlashApp.c: 134: ZeroArray(sampleArray, (64)/sizeof(adc_result_t));
  6071  003B3E  0E3C               	movlw	low _sampleArray
  6072  003B40  6E20               	movwf	ZeroArray@array,c
  6073  003B42  0E01               	movlw	high _sampleArray
  6074  003B44  6E21               	movwf	ZeroArray@array+1,c
  6075  003B46  0E00               	movlw	0
  6076  003B48  6E23               	movwf	ZeroArray@size+1,c
  6077  003B4A  0E20               	movlw	32
  6078  003B4C  6E22               	movwf	ZeroArray@size,c
  6079  003B4E  EC57  F021         	call	_ZeroArray	;wreg free
  6080                           
  6081                           ;FlashApp.c: 135: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_EREASE_MEMORY
      +                          );
  6082  003B52  0E51               	movlw	81
  6083  003B54  6E24               	movwf	SendAckMessage@inRequest,c
  6084  003B56  0E05               	movlw	5
  6085  003B58  ECAF  F01D         	call	_SendAckMessage
  6086  003B5C  0012               	return		;funcret
  6087  003B5E                     __end_of_FlashEreaseMem:
  6088                           	opt stack 0
  6089                           tosu	equ	0xFFF
  6090                           tosh	equ	0xFFE
  6091                           tosl	equ	0xFFD
  6092                           pclath	equ	0xFFA
  6093                           tblptru	equ	0xFF8
  6094                           tblptrh	equ	0xFF7
  6095                           tblptrl	equ	0xFF6
  6096                           tablat	equ	0xFF5
  6097                           prodh	equ	0xFF4
  6098                           prodl	equ	0xFF3
  6099                           postinc0	equ	0xFEE
  6100                           plusw0	equ	0xFEB
  6101                           wreg	equ	0xFE8
  6102                           postdec1	equ	0xFE5
  6103                           fsr1l	equ	0xFE1
  6104                           indf2	equ	0xFDF
  6105                           postinc2	equ	0xFDE
  6106                           plusw2	equ	0xFDB
  6107                           fsr2h	equ	0xFDA
  6108                           fsr2l	equ	0xFD9
  6109                           status	equ	0xFD8
  6110                           
  6111 ;; *************** function _DacSetValue *****************
  6112 ;; Defined at:
  6113 ;;		line 30 in file "DacApp.c"
  6114 ;; Parameters:    Size  Location     Type
  6115 ;;  data            2   42[BANK0 ] PTR unsigned char 
  6116 ;;		 -> rxMsgData(20), 
  6117 ;; Auto vars:     Size  Location     Type
  6118 ;;  retVal          8   49[BANK0 ] struct .
  6119 ;;  dacIndex        1   48[BANK0 ] char 
  6120 ;; Return value:  Size  Location     Type
  6121 ;;                  1    wreg      void 
  6122 ;; Registers used:
  6123 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6124 ;; Tracked objects:
  6125 ;;		On entry : 0/0
  6126 ;;		On exit  : 0/0
  6127 ;;		Unchanged: 0/0
  6128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6129 ;;      Params:         0       2       0       0       0       0       0
  6130 ;;      Locals:         0       9       0       0       0       0       0
  6131 ;;      Temps:          0       4       0       0       0       0       0
  6132 ;;      Totals:         0      15       0       0       0       0       0
  6133 ;;Total ram usage:       15 bytes
  6134 ;; Hardware stack levels used:    1
  6135 ;; Hardware stack levels required when called:    8
  6136 ;; This function calls:
  6137 ;;		_GetIntFromUartData
  6138 ;;		_SWSPI_send_word
  6139 ;;		_SendAckMessage
  6140 ;;		_StoreIntInEeprom
  6141 ;; This function is called by:
  6142 ;;		_GroupDAC
  6143 ;; This function uses a non-reentrant model
  6144 ;;
  6145                           
  6146                           	psect	text19
  6147  003126                     __ptext19:
  6148                           	opt stack 0
  6149  003126                     _DacSetValue:
  6150                           	opt stack 20
  6151                           
  6152                           ;DacApp.c: 32: INT_VAL retVal;
  6153                           ;DacApp.c: 33: retVal = GetIntFromUartData(16, data);
  6154                           
  6155                           ;incstack = 0
  6156  003126  C08A  F066         	movff	DacSetValue@data,GetIntFromUartData@data
  6157  00312A  C08B  F067         	movff	DacSetValue@data+1,GetIntFromUartData@data+1
  6158  00312E  0E10               	movlw	16
  6159  003130  EC1C  F00F         	call	_GetIntFromUartData
  6160  003134  EE20  F091         	lfsr	2,DacSetValue@retVal
  6161  003138  0E07               	movlw	7
  6162  00313A                     u8441:
  6163  00313A  CFEB FFDB          	movff	plusw0,plusw2
  6164  00313E  06E8               	decf	wreg,f,c
  6165  003140  E2FC               	bc	u8441
  6166                           
  6167                           ;DacApp.c: 34: SWSPI_send_word(EXT_DAC, retVal.num, 1);
  6168  003142  C091  F029         	movff	DacSetValue@retVal,SWSPI_send_word@data
  6169  003146  C092  F02A         	movff	DacSetValue@retVal+1,SWSPI_send_word@data+1
  6170  00314A  C093  F02B         	movff	DacSetValue@retVal+2,SWSPI_send_word@data+2
  6171  00314E  C094  F02C         	movff	DacSetValue@retVal+3,SWSPI_send_word@data+3
  6172  003152  0E01               	movlw	1
  6173  003154  6E2D               	movwf	SWSPI_send_word@dataSize,c
  6174  003156  0E02               	movlw	2
  6175  003158  EC3E  F018         	call	_SWSPI_send_word
  6176                           
  6177                           ;DacApp.c: 37: int8_t dacIndex = (retVal.num >> 14);
  6178  00315C  C091  F08C         	movff	DacSetValue@retVal,??_DacSetValue
  6179  003160  C092  F08D         	movff	DacSetValue@retVal+1,??_DacSetValue+1
  6180  003164  C093  F08E         	movff	DacSetValue@retVal+2,??_DacSetValue+2
  6181  003168  C094  F08F         	movff	DacSetValue@retVal+3,??_DacSetValue+3
  6182  00316C  0E0F               	movlw	15
  6183  00316E  D006               	goto	u8450
  6184  003170                     u8455:
  6185  003170  0100               	movlb	0	; () banked
  6186  003172  90D8               	bcf	status,0,c
  6187  003174  338F               	rrcf	(??_DacSetValue+3)& (0+255),f,b
  6188  003176  338E               	rrcf	(??_DacSetValue+2)& (0+255),f,b
  6189  003178  338D               	rrcf	(??_DacSetValue+1)& (0+255),f,b
  6190  00317A  338C               	rrcf	??_DacSetValue& (0+255),f,b
  6191  00317C                     u8450:
  6192  00317C  2EE8               	decfsz	wreg,f,c
  6193  00317E  D7F8               	goto	u8455
  6194  003180  518C               	movf	??_DacSetValue& (0+255),w,b
  6195  003182  6F90               	movwf	DacSetValue@dacIndex& (0+255),b
  6196                           
  6197                           ; BSR set to: 0
  6198                           ;DacApp.c: 38: StoreIntInEeprom(retVal.num, (0x40) | DAC_ADDRES[dacIndex], 2);
  6199  003184  C091  F021         	movff	DacSetValue@retVal,StoreIntInEeprom@data
  6200  003188  C092  F022         	movff	DacSetValue@retVal+1,StoreIntInEeprom@data+1
  6201  00318C  C093  F023         	movff	DacSetValue@retVal+2,StoreIntInEeprom@data+2
  6202  003190  C094  F024         	movff	DacSetValue@retVal+3,StoreIntInEeprom@data+3
  6203  003194  5190               	movf	DacSetValue@dacIndex& (0+255),w,b
  6204  003196  0D01               	mullw	1
  6205  003198  0E53               	movlw	low _DAC_ADDRES
  6206  00319A  24F3               	addwf	prodl,w,c
  6207  00319C  6EF6               	movwf	tblptrl,c
  6208  00319E  0E06               	movlw	high _DAC_ADDRES
  6209  0031A0  20F4               	addwfc	prodh,w,c
  6210  0031A2  6EF7               	movwf	tblptrh,c
  6211  0031A4                     	if	0	;There are less than 3 active tblptr bytes
  6212  0031A4                     	endif
  6213  0031A4  0008               	tblrd		*
  6214  0031A6  50F5               	movf	tablat,w,c
  6215  0031A8  0940               	iorlw	64
  6216  0031AA  6E25               	movwf	StoreIntInEeprom@address,c
  6217  0031AC  0E00               	movlw	0
  6218  0031AE  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  6219  0031B0  0E02               	movlw	2
  6220  0031B2  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  6221  0031B4  EC36  F01F         	call	_StoreIntInEeprom	;wreg free
  6222                           
  6223                           ;DacApp.c: 41: SendAckMessage((MSG_GROUPS)DAC_MSG, (MSG_REQUEST)DAC_SET_VALUE);
  6224  0031B8  0E61               	movlw	97
  6225  0031BA  6E24               	movwf	SendAckMessage@inRequest,c
  6226  0031BC  0E06               	movlw	6
  6227  0031BE  ECAF  F01D         	call	_SendAckMessage
  6228  0031C2  0012               	return		;funcret
  6229  0031C4                     __end_of_DacSetValue:
  6230                           	opt stack 0
  6231                           tosu	equ	0xFFF
  6232                           tosh	equ	0xFFE
  6233                           tosl	equ	0xFFD
  6234                           pclath	equ	0xFFA
  6235                           tblptru	equ	0xFF8
  6236                           tblptrh	equ	0xFF7
  6237                           tblptrl	equ	0xFF6
  6238                           tablat	equ	0xFF5
  6239                           prodh	equ	0xFF4
  6240                           prodl	equ	0xFF3
  6241                           postinc0	equ	0xFEE
  6242                           plusw0	equ	0xFEB
  6243                           wreg	equ	0xFE8
  6244                           postdec1	equ	0xFE5
  6245                           fsr1l	equ	0xFE1
  6246                           indf2	equ	0xFDF
  6247                           postinc2	equ	0xFDE
  6248                           plusw2	equ	0xFDB
  6249                           fsr2h	equ	0xFDA
  6250                           fsr2l	equ	0xFD9
  6251                           status	equ	0xFD8
  6252                           
  6253 ;; *************** function _GetIntFromUartData *****************
  6254 ;; Defined at:
  6255 ;;		line 47 in file "SystemCommon.c"
  6256 ;; Parameters:    Size  Location     Type
  6257 ;;  num             1    wreg     char 
  6258 ;;  data            2    6[BANK0 ] PTR unsigned char 
  6259 ;;		 -> rxMsgData(20), 
  6260 ;; Auto vars:     Size  Location     Type
  6261 ;;  num             1   26[BANK0 ] char 
  6262 ;;  idxCon          2   36[BANK0 ] int 
  6263 ;;  dataRegArr     10   16[BANK0 ] unsigned char [10]
  6264 ;;  retVal          8   28[BANK0 ] struct .
  6265 ;;  idxData         1   38[BANK0 ] unsigned char 
  6266 ;;  recVal          1   27[BANK0 ] unsigned char 
  6267 ;; Return value:  Size  Location     Type
  6268 ;;                  8    6[BANK0 ] struct .
  6269 ;; Registers used:
  6270 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6271 ;; Tracked objects:
  6272 ;;		On entry : 0/0
  6273 ;;		On exit  : 0/0
  6274 ;;		Unchanged: 0/0
  6275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6276 ;;      Params:         0       8       0       0       0       0       0
  6277 ;;      Locals:         0      23       0       0       0       0       0
  6278 ;;      Temps:          0       2       0       0       0       0       0
  6279 ;;      Totals:         0      33       0       0       0       0       0
  6280 ;;Total ram usage:       33 bytes
  6281 ;; Hardware stack levels used:    1
  6282 ;; Hardware stack levels required when called:    7
  6283 ;; This function calls:
  6284 ;;		_ZeroArray
  6285 ;;		_strtol
  6286 ;; This function is called by:
  6287 ;;		_FlashReadUart
  6288 ;;		_DacSetValue
  6289 ;;		_UpdateSynthFreq
  6290 ;; This function uses a non-reentrant model
  6291 ;;
  6292                           
  6293                           	psect	text20
  6294  001E38                     __ptext20:
  6295                           	opt stack 0
  6296  001E38                     _GetIntFromUartData:
  6297                           	opt stack 20
  6298                           
  6299                           ;incstack = 0
  6300                           ;GetIntFromUartData@num stored from wreg
  6301  001E38  0100               	movlb	0	; () banked
  6302  001E3A  6F7A               	movwf	GetIntFromUartData@num& (0+255),b
  6303                           
  6304                           ;SystemCommon.c: 49: INT_VAL retVal;
  6305                           ;SystemCommon.c: 50: retVal.num = 0;
  6306  001E3C  0E00               	movlw	0
  6307  001E3E  0100               	movlb	0	; () banked
  6308  001E40  6F7C               	movwf	GetIntFromUartData@retVal& (0+255),b
  6309  001E42  0E00               	movlw	0
  6310  001E44  6F7D               	movwf	(GetIntFromUartData@retVal+1)& (0+255),b
  6311  001E46  0E00               	movlw	0
  6312  001E48  6F7E               	movwf	(GetIntFromUartData@retVal+2)& (0+255),b
  6313  001E4A  0E00               	movlw	0
  6314  001E4C  6F7F               	movwf	(GetIntFromUartData@retVal+3)& (0+255),b
  6315                           
  6316                           ;SystemCommon.c: 51: retVal.con = 0;
  6317  001E4E  0E00               	movlw	0
  6318  001E50  6F80               	movwf	(GetIntFromUartData@retVal+4)& (0+255),b
  6319  001E52  0E00               	movlw	0
  6320  001E54  6F81               	movwf	(GetIntFromUartData@retVal+5)& (0+255),b
  6321  001E56  0E00               	movlw	0
  6322  001E58  6F82               	movwf	(GetIntFromUartData@retVal+6)& (0+255),b
  6323  001E5A  0E00               	movlw	0
  6324  001E5C  6F83               	movwf	(GetIntFromUartData@retVal+7)& (0+255),b
  6325                           
  6326                           ;SystemCommon.c: 52: uint8_t idxData = 0;
  6327  001E5E  0E00               	movlw	0
  6328  001E60  6F86               	movwf	GetIntFromUartData@idxData& (0+255),b
  6329                           
  6330                           ;SystemCommon.c: 53: char recVal = (0);
  6331  001E62  0E00               	movlw	0
  6332  001E64  6F7B               	movwf	GetIntFromUartData@recVal& (0+255),b
  6333                           
  6334                           ; BSR set to: 0
  6335                           ;SystemCommon.c: 55: char dataRegArr[0xA];
  6336                           ;SystemCommon.c: 56: ZeroArray(dataRegArr, 0xA);
  6337  001E66  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6338  001E68  6E20               	movwf	ZeroArray@array,c
  6339  001E6A  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6340  001E6C  6E21               	movwf	ZeroArray@array+1,c
  6341  001E6E  0E00               	movlw	0
  6342  001E70  6E23               	movwf	ZeroArray@size+1,c
  6343  001E72  0E0A               	movlw	10
  6344  001E74  6E22               	movwf	ZeroArray@size,c
  6345  001E76  EC57  F021         	call	_ZeroArray	;wreg free
  6346                           
  6347                           ;SystemCommon.c: 58: for(idxData = 0; idxData < 0xA; idxData++)
  6348  001E7A  0E00               	movlw	0
  6349  001E7C  0100               	movlb	0	; () banked
  6350  001E7E  6F86               	movwf	GetIntFromUartData@idxData& (0+255),b
  6351  001E80                     l8033:
  6352                           
  6353                           ; BSR set to: 0
  6354  001E80  0E09               	movlw	9
  6355  001E82  6586               	cpfsgt	GetIntFromUartData@idxData& (0+255),b
  6356  001E84  D001               	goto	l1412
  6357  001E86  D01D               	goto	u8040
  6358  001E88                     l1412:
  6359                           
  6360                           ; BSR set to: 0
  6361                           ;SystemCommon.c: 59: {
  6362                           ;SystemCommon.c: 60: recVal = data[idxData];
  6363                           
  6364                           ; BSR set to: 0
  6365  001E88  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  6366  001E8A  0D01               	mullw	1
  6367  001E8C  50F3               	movf	prodl,w,c
  6368  001E8E  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  6369  001E90  6ED9               	movwf	fsr2l,c
  6370  001E92  50F4               	movf	prodh,w,c
  6371  001E94  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  6372  001E96  6EDA               	movwf	fsr2h,c
  6373  001E98  50DF               	movf	indf2,w,c
  6374  001E9A  6F7B               	movwf	GetIntFromUartData@recVal& (0+255),b
  6375                           
  6376                           ; BSR set to: 0
  6377                           ;SystemCommon.c: 61: if(recVal == 0x10)
  6378  001E9C  0E10               	movlw	16
  6379  001E9E  197B               	xorwf	GetIntFromUartData@recVal& (0+255),w,b
  6380  001EA0  A4D8               	btfss	status,2,c
  6381  001EA2  D002               	goto	l1414
  6382                           
  6383                           ; BSR set to: 0
  6384                           ;SystemCommon.c: 62: {
  6385                           ;SystemCommon.c: 63: idxData++;
  6386  001EA4  2B86               	incf	GetIntFromUartData@idxData& (0+255),f,b
  6387                           
  6388                           ;SystemCommon.c: 64: break;
  6389  001EA6  D00D               	goto	u8040
  6390  001EA8                     l1414:
  6391                           
  6392                           ; BSR set to: 0
  6393                           ;SystemCommon.c: 66: else
  6394                           ;SystemCommon.c: 67: {
  6395                           ;SystemCommon.c: 68: dataRegArr[idxData] = recVal + '0';
  6396                           
  6397                           ; BSR set to: 0
  6398  001EA8  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  6399  001EAA  0D01               	mullw	1
  6400  001EAC  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6401  001EAE  24F3               	addwf	prodl,w,c
  6402  001EB0  6ED9               	movwf	fsr2l,c
  6403  001EB2  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6404  001EB4  20F4               	addwfc	prodh,w,c
  6405  001EB6  6EDA               	movwf	fsr2h,c
  6406  001EB8  517B               	movf	GetIntFromUartData@recVal& (0+255),w,b
  6407  001EBA  0F30               	addlw	48
  6408  001EBC  6EDF               	movwf	indf2,c
  6409                           
  6410                           ; BSR set to: 0
  6411                           
  6412                           ; BSR set to: 0
  6413  001EBE  2B86               	incf	GetIntFromUartData@idxData& (0+255),f,b
  6414  001EC0  D7DF               	goto	l8033
  6415  001EC2                     u8040:
  6416                           
  6417                           ; BSR set to: 0
  6418                           ;SystemCommon.c: 69: }
  6419                           ;SystemCommon.c: 70: }
  6420                           ;SystemCommon.c: 71: retVal.num = strtol(dataRegArr, (0), num);
  6421                           
  6422                           ; BSR set to: 0
  6423  001EC2  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6424  001EC4  6E26               	movwf	strtol@s,c
  6425  001EC6  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6426  001EC8  6E27               	movwf	strtol@s+1,c
  6427  001ECA  0E00               	movlw	0
  6428  001ECC  6E28               	movwf	strtol@endptr,c
  6429  001ECE  0E00               	movlw	0
  6430  001ED0  6E29               	movwf	strtol@endptr+1,c
  6431  001ED2  517A               	movf	GetIntFromUartData@num& (0+255),w,b
  6432  001ED4  6E2A               	movwf	strtol@base,c
  6433  001ED6  6A2B               	clrf	strtol@base+1,c
  6434  001ED8  BE2A               	btfsc	strtol@base,7,c
  6435  001EDA  062B               	decf	strtol@base+1,f,c
  6436  001EDC  ECD4  F00B         	call	_strtol	;wreg free
  6437  001EE0  C026  F07C         	movff	?_strtol,GetIntFromUartData@retVal
  6438  001EE4  C027  F07D         	movff	?_strtol+1,GetIntFromUartData@retVal+1
  6439  001EE8  C028  F07E         	movff	?_strtol+2,GetIntFromUartData@retVal+2
  6440  001EEC  C029  F07F         	movff	?_strtol+3,GetIntFromUartData@retVal+3
  6441                           
  6442                           ;SystemCommon.c: 73: ZeroArray(dataRegArr, 0xA);
  6443  001EF0  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6444  001EF2  6E20               	movwf	ZeroArray@array,c
  6445  001EF4  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6446  001EF6  6E21               	movwf	ZeroArray@array+1,c
  6447  001EF8  0E00               	movlw	0
  6448  001EFA  6E23               	movwf	ZeroArray@size+1,c
  6449  001EFC  0E0A               	movlw	10
  6450  001EFE  6E22               	movwf	ZeroArray@size,c
  6451  001F00  EC57  F021         	call	_ZeroArray	;wreg free
  6452                           
  6453                           ;SystemCommon.c: 75: for(int idxCon = 0; idxCon < 0xA; idxCon++)
  6454  001F04  0E00               	movlw	0
  6455  001F06  0100               	movlb	0	; () banked
  6456  001F08  6F85               	movwf	(GetIntFromUartData@idxCon+1)& (0+255),b
  6457  001F0A  0E00               	movlw	0
  6458  001F0C  6F84               	movwf	GetIntFromUartData@idxCon& (0+255),b
  6459  001F0E                     l8055:
  6460                           
  6461                           ; BSR set to: 0
  6462  001F0E  BF85               	btfsc	(GetIntFromUartData@idxCon+1)& (0+255),7,b
  6463  001F10  D006               	goto	l1416
  6464  001F12  5185               	movf	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  6465  001F14  E12E               	bnz	l8073
  6466  001F16  0E0A               	movlw	10
  6467  001F18  5D84               	subwf	GetIntFromUartData@idxCon& (0+255),w,b
  6468  001F1A  B0D8               	btfsc	status,0,c
  6469  001F1C  D02A               	goto	u8070
  6470  001F1E                     l1416:
  6471                           
  6472                           ; BSR set to: 0
  6473                           ;SystemCommon.c: 76: {
  6474                           ;SystemCommon.c: 77: recVal = data[idxData + idxCon];
  6475                           
  6476                           ; BSR set to: 0
  6477  001F1E  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  6478  001F20  2584               	addwf	GetIntFromUartData@idxCon& (0+255),w,b
  6479  001F22  6F6E               	movwf	??_GetIntFromUartData& (0+255),b
  6480  001F24  0E00               	movlw	0
  6481  001F26  2185               	addwfc	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  6482  001F28  6F6F               	movwf	(??_GetIntFromUartData+1)& (0+255),b
  6483  001F2A  516E               	movf	??_GetIntFromUartData& (0+255),w,b
  6484  001F2C  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  6485  001F2E  6ED9               	movwf	fsr2l,c
  6486  001F30  516F               	movf	(??_GetIntFromUartData+1)& (0+255),w,b
  6487  001F32  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  6488  001F34  6EDA               	movwf	fsr2h,c
  6489  001F36  50DF               	movf	indf2,w,c
  6490  001F38  6F7B               	movwf	GetIntFromUartData@recVal& (0+255),b
  6491                           
  6492                           ; BSR set to: 0
  6493                           ;SystemCommon.c: 78: if(recVal == 0x23)
  6494  001F3A  0E23               	movlw	35
  6495  001F3C  197B               	xorwf	GetIntFromUartData@recVal& (0+255),w,b
  6496  001F3E  B4D8               	btfsc	status,2,c
  6497  001F40  D018               	goto	u8070
  6498                           
  6499                           ; BSR set to: 0
  6500                           ;SystemCommon.c: 82: else
  6501                           ;SystemCommon.c: 83: {
  6502                           ;SystemCommon.c: 84: dataRegArr[idxCon] = data[idxCon + idxData] + '0';
  6503                           
  6504                           ; BSR set to: 0
  6505                           
  6506                           ; BSR set to: 0
  6507                           ;SystemCommon.c: 81: }
  6508                           
  6509                           ; BSR set to: 0
  6510                           ;SystemCommon.c: 79: {
  6511                           ;SystemCommon.c: 80: break;
  6512  001F42  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6513  001F44  2584               	addwf	GetIntFromUartData@idxCon& (0+255),w,b
  6514  001F46  6ED9               	movwf	fsr2l,c
  6515  001F48  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6516  001F4A  2185               	addwfc	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  6517  001F4C  6EDA               	movwf	fsr2h,c
  6518  001F4E  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  6519  001F50  2584               	addwf	GetIntFromUartData@idxCon& (0+255),w,b
  6520  001F52  6F6E               	movwf	??_GetIntFromUartData& (0+255),b
  6521  001F54  0E00               	movlw	0
  6522  001F56  2185               	addwfc	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  6523  001F58  6F6F               	movwf	(??_GetIntFromUartData+1)& (0+255),b
  6524  001F5A  516E               	movf	??_GetIntFromUartData& (0+255),w,b
  6525  001F5C  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  6526  001F5E  6EE1               	movwf	fsr1l,c
  6527  001F60  516F               	movf	(??_GetIntFromUartData+1)& (0+255),w,b
  6528  001F62  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  6529  001F64  6EE2               	movwf	fsr1h,c
  6530  001F66  50E7               	movf	indf1,w,c
  6531  001F68  0F30               	addlw	48
  6532  001F6A  6EDF               	movwf	indf2,c
  6533                           
  6534                           ; BSR set to: 0
  6535                           
  6536                           ; BSR set to: 0
  6537  001F6C  4B84               	infsnz	GetIntFromUartData@idxCon& (0+255),f,b
  6538  001F6E  2B85               	incf	(GetIntFromUartData@idxCon+1)& (0+255),f,b
  6539  001F70  D7CE               	goto	l8055
  6540  001F72                     u8070:
  6541  001F72                     l8073:
  6542                           
  6543                           ; BSR set to: 0
  6544                           ;SystemCommon.c: 85: }
  6545                           ;SystemCommon.c: 86: }
  6546                           ;SystemCommon.c: 87: retVal.con = strtol(dataRegArr, (0), num);
  6547  001F72  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6548  001F74  6E26               	movwf	strtol@s,c
  6549  001F76  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6550  001F78  6E27               	movwf	strtol@s+1,c
  6551  001F7A  0E00               	movlw	0
  6552  001F7C  6E28               	movwf	strtol@endptr,c
  6553  001F7E  0E00               	movlw	0
  6554  001F80  6E29               	movwf	strtol@endptr+1,c
  6555  001F82  517A               	movf	GetIntFromUartData@num& (0+255),w,b
  6556  001F84  6E2A               	movwf	strtol@base,c
  6557  001F86  6A2B               	clrf	strtol@base+1,c
  6558  001F88  BE2A               	btfsc	strtol@base,7,c
  6559  001F8A  062B               	decf	strtol@base+1,f,c
  6560  001F8C  ECD4  F00B         	call	_strtol	;wreg free
  6561  001F90  C026  F080         	movff	?_strtol,GetIntFromUartData@retVal+4
  6562  001F94  C027  F081         	movff	?_strtol+1,GetIntFromUartData@retVal+5
  6563  001F98  C028  F082         	movff	?_strtol+2,GetIntFromUartData@retVal+6
  6564  001F9C  C029  F083         	movff	?_strtol+3,GetIntFromUartData@retVal+7
  6565                           
  6566                           ;SystemCommon.c: 89: return retVal;
  6567  001FA0  EE20  F07C         	lfsr	2,GetIntFromUartData@retVal
  6568  001FA4  EE00  F066         	lfsr	0,?_GetIntFromUartData
  6569  001FA8  0E07               	movlw	7
  6570  001FAA                     u8081:
  6571  001FAA  CFDB FFEB          	movff	plusw2,plusw0
  6572  001FAE  06E8               	decf	wreg,f,c
  6573  001FB0  E2FC               	bc	u8081
  6574  001FB2  0012               	return	
  6575  001FB4                     __end_of_GetIntFromUartData:
  6576                           	opt stack 0
  6577                           tosu	equ	0xFFF
  6578                           tosh	equ	0xFFE
  6579                           tosl	equ	0xFFD
  6580                           pclath	equ	0xFFA
  6581                           tblptru	equ	0xFF8
  6582                           tblptrh	equ	0xFF7
  6583                           tblptrl	equ	0xFF6
  6584                           tablat	equ	0xFF5
  6585                           prodh	equ	0xFF4
  6586                           prodl	equ	0xFF3
  6587                           postinc0	equ	0xFEE
  6588                           plusw0	equ	0xFEB
  6589                           wreg	equ	0xFE8
  6590                           indf1	equ	0xFE7
  6591                           postdec1	equ	0xFE5
  6592                           fsr1h	equ	0xFE2
  6593                           fsr1l	equ	0xFE1
  6594                           indf2	equ	0xFDF
  6595                           postinc2	equ	0xFDE
  6596                           plusw2	equ	0xFDB
  6597                           fsr2h	equ	0xFDA
  6598                           fsr2l	equ	0xFD9
  6599                           status	equ	0xFD8
  6600                           
  6601 ;; *************** function _strtol *****************
  6602 ;; Defined at:
  6603 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strtol.c"
  6604 ;; Parameters:    Size  Location     Type
  6605 ;;  s               2   37[COMRAM] PTR const unsigned char 
  6606 ;;		 -> GetIntFromUartData@dataRegArr(10), 
  6607 ;;  endptr          2   39[COMRAM] PTR PTR unsigned char 
  6608 ;;		 -> NULL(0), 
  6609 ;;  base            2   41[COMRAM] int 
  6610 ;; Auto vars:     Size  Location     Type
  6611 ;;  a               4    1[BANK0 ] long 
  6612 ;;  c               1    5[BANK0 ] unsigned char 
  6613 ;;  sign            1    0[BANK0 ] unsigned char 
  6614 ;; Return value:  Size  Location     Type
  6615 ;;                  4   37[COMRAM] long 
  6616 ;; Registers used:
  6617 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6618 ;; Tracked objects:
  6619 ;;		On entry : 0/0
  6620 ;;		On exit  : 0/0
  6621 ;;		Unchanged: 0/0
  6622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6623 ;;      Params:         6       0       0       0       0       0       0
  6624 ;;      Locals:         0       6       0       0       0       0       0
  6625 ;;      Temps:          4       0       0       0       0       0       0
  6626 ;;      Totals:        10       6       0       0       0       0       0
  6627 ;;Total ram usage:       16 bytes
  6628 ;; Hardware stack levels used:    1
  6629 ;; Hardware stack levels required when called:    6
  6630 ;; This function calls:
  6631 ;;		___lmul
  6632 ;;		_isalpha
  6633 ;;		_isdigit
  6634 ;;		_isspace
  6635 ;;		_toupper
  6636 ;; This function is called by:
  6637 ;;		_GetIntFromUartData
  6638 ;; This function uses a non-reentrant model
  6639 ;;
  6640                           
  6641                           	psect	text21
  6642  0017A8                     __ptext21:
  6643                           	opt stack 0
  6644  0017A8                     _strtol:
  6645                           	opt stack 20
  6646                           
  6647                           ;incstack = 0
  6648  0017A8  C026  FFD9         	movff	strtol@s,fsr2l
  6649  0017AC  C027  FFDA         	movff	strtol@s+1,fsr2h
  6650  0017B0  50DF               	movf	indf2,w,c
  6651  0017B2  0100               	movlb	0	; () banked
  6652  0017B4  6F65               	movwf	strtol@c& (0+255),b
  6653                           
  6654                           ; BSR set to: 0
  6655  0017B6  4A26               	infsnz	strtol@s,f,c
  6656  0017B8  2A27               	incf	strtol@s+1,f,c
  6657                           
  6658                           ; BSR set to: 0
  6659  0017BA  5165               	movf	strtol@c& (0+255),w,b
  6660  0017BC  ECAB  F020         	call	_isspace
  6661  0017C0  B0D8               	btfsc	status,0,c
  6662  0017C2  D7F2               	goto	_strtol
  6663  0017C4  0E00               	movlw	0
  6664  0017C6  0100               	movlb	0	; () banked
  6665  0017C8  6F61               	movwf	strtol@a& (0+255),b
  6666  0017CA  0E00               	movlw	0
  6667  0017CC  6F62               	movwf	(strtol@a+1)& (0+255),b
  6668  0017CE  0E00               	movlw	0
  6669  0017D0  6F63               	movwf	(strtol@a+2)& (0+255),b
  6670  0017D2  0E00               	movlw	0
  6671  0017D4  6F64               	movwf	(strtol@a+3)& (0+255),b
  6672  0017D6  0E00               	movlw	0
  6673  0017D8  6F60               	movwf	strtol@sign& (0+255),b
  6674                           
  6675                           ; BSR set to: 0
  6676  0017DA  0E2D               	movlw	45
  6677  0017DC  1965               	xorwf	strtol@c& (0+255),w,b
  6678  0017DE  A4D8               	btfss	status,2,c
  6679  0017E0  D003               	goto	l2179
  6680                           
  6681                           ; BSR set to: 0
  6682  0017E2  0E01               	movlw	1
  6683  0017E4  6F60               	movwf	strtol@sign& (0+255),b
  6684  0017E6  D004               	goto	u7870
  6685  0017E8                     l2179:
  6686                           
  6687                           ; BSR set to: 0
  6688                           
  6689                           ; BSR set to: 0
  6690  0017E8  0E2B               	movlw	43
  6691  0017EA  1965               	xorwf	strtol@c& (0+255),w,b
  6692  0017EC  A4D8               	btfss	status,2,c
  6693  0017EE  D008               	goto	l2181
  6694  0017F0                     u7870:
  6695                           
  6696                           ; BSR set to: 0
  6697  0017F0  C026  FFD9         	movff	strtol@s,fsr2l
  6698  0017F4  C027  FFDA         	movff	strtol@s+1,fsr2h
  6699  0017F8  50DF               	movf	indf2,w,c
  6700  0017FA  6F65               	movwf	strtol@c& (0+255),b
  6701                           
  6702                           ; BSR set to: 0
  6703  0017FC  4A26               	infsnz	strtol@s,f,c
  6704  0017FE  2A27               	incf	strtol@s+1,f,c
  6705  001800                     l2181:
  6706                           
  6707                           ; BSR set to: 0
  6708                           
  6709                           ; BSR set to: 0
  6710                           
  6711                           ; BSR set to: 0
  6712  001800  0E30               	movlw	48
  6713  001802  1965               	xorwf	strtol@c& (0+255),w,b
  6714  001804  A4D8               	btfss	status,2,c
  6715  001806  D02E               	goto	l2189
  6716                           
  6717                           ; BSR set to: 0
  6718  001808  C026  FFD9         	movff	strtol@s,fsr2l
  6719  00180C  C027  FFDA         	movff	strtol@s+1,fsr2h
  6720  001810  50DF               	movf	indf2,w,c
  6721  001812  6F65               	movwf	strtol@c& (0+255),b
  6722                           
  6723                           ; BSR set to: 0
  6724  001814  4A26               	infsnz	strtol@s,f,c
  6725  001816  2A27               	incf	strtol@s+1,f,c
  6726                           
  6727                           ; BSR set to: 0
  6728  001818  502A               	movf	strtol@base,w,c
  6729  00181A  102B               	iorwf	strtol@base+1,w,c
  6730  00181C  B4D8               	btfsc	status,2,c
  6731  00181E  D005               	goto	u7900
  6732                           
  6733                           ; BSR set to: 0
  6734  001820  0E10               	movlw	16
  6735  001822  182A               	xorwf	strtol@base,w,c
  6736  001824  102B               	iorwf	strtol@base+1,w,c
  6737  001826  A4D8               	btfss	status,2,c
  6738  001828  D015               	goto	l2183
  6739  00182A                     u7900:
  6740                           
  6741                           ; BSR set to: 0
  6742                           
  6743                           ; BSR set to: 0
  6744  00182A  0E78               	movlw	120
  6745  00182C  1965               	xorwf	strtol@c& (0+255),w,b
  6746  00182E  B4D8               	btfsc	status,2,c
  6747  001830  D004               	goto	u7920
  6748                           
  6749                           ; BSR set to: 0
  6750  001832  0E58               	movlw	88
  6751  001834  1965               	xorwf	strtol@c& (0+255),w,b
  6752  001836  A4D8               	btfss	status,2,c
  6753  001838  D00D               	goto	l2183
  6754  00183A                     u7920:
  6755                           
  6756                           ; BSR set to: 0
  6757                           
  6758                           ; BSR set to: 0
  6759  00183A  0E00               	movlw	0
  6760  00183C  6E2B               	movwf	strtol@base+1,c
  6761  00183E  0E10               	movlw	16
  6762  001840  6E2A               	movwf	strtol@base,c
  6763                           
  6764                           ; BSR set to: 0
  6765  001842  C026  FFD9         	movff	strtol@s,fsr2l
  6766  001846  C027  FFDA         	movff	strtol@s+1,fsr2h
  6767  00184A  50DF               	movf	indf2,w,c
  6768  00184C  6F65               	movwf	strtol@c& (0+255),b
  6769                           
  6770                           ; BSR set to: 0
  6771  00184E  4A26               	infsnz	strtol@s,f,c
  6772  001850  2A27               	incf	strtol@s+1,f,c
  6773  001852  D008               	goto	l2189
  6774  001854                     l2183:
  6775                           
  6776                           ; BSR set to: 0
  6777                           
  6778                           ; BSR set to: 0
  6779  001854  502A               	movf	strtol@base,w,c
  6780  001856  102B               	iorwf	strtol@base+1,w,c
  6781  001858  A4D8               	btfss	status,2,c
  6782  00185A  D004               	goto	l2189
  6783                           
  6784                           ; BSR set to: 0
  6785  00185C  0E00               	movlw	0
  6786  00185E  6E2B               	movwf	strtol@base+1,c
  6787  001860  0E08               	movlw	8
  6788  001862  6E2A               	movwf	strtol@base,c
  6789  001864                     l2189:
  6790                           
  6791                           ; BSR set to: 0
  6792                           
  6793                           ; BSR set to: 0
  6794                           
  6795                           ; BSR set to: 0
  6796                           
  6797                           ; BSR set to: 0
  6798  001864  502A               	movf	strtol@base,w,c
  6799  001866  102B               	iorwf	strtol@base+1,w,c
  6800  001868  A4D8               	btfss	status,2,c
  6801  00186A  D004               	goto	l2190
  6802                           
  6803                           ; BSR set to: 0
  6804  00186C  0E00               	movlw	0
  6805  00186E  6E2B               	movwf	strtol@base+1,c
  6806  001870  0E0A               	movlw	10
  6807  001872  6E2A               	movwf	strtol@base,c
  6808  001874                     l2190:
  6809                           
  6810                           ; BSR set to: 0
  6811                           
  6812                           ; BSR set to: 0
  6813                           
  6814                           ; BSR set to: 0
  6815  001874  5165               	movf	strtol@c& (0+255),w,b
  6816  001876  EC97  F020         	call	_isalpha
  6817  00187A  A0D8               	btfss	status,0,c
  6818  00187C  D008               	goto	l2192
  6819  00187E  0100               	movlb	0	; () banked
  6820  001880  5165               	movf	strtol@c& (0+255),w,b
  6821  001882  ECB1  F021         	call	_toupper
  6822  001886  0FC9               	addlw	201
  6823  001888  0100               	movlb	0	; () banked
  6824  00188A  6F65               	movwf	strtol@c& (0+255),b
  6825  00188C  D009               	goto	l2195
  6826  00188E                     l2192:
  6827                           
  6828                           ; BSR set to: 0
  6829  00188E  0100               	movlb	0	; () banked
  6830  001890  5165               	movf	strtol@c& (0+255),w,b
  6831  001892  EC39  F021         	call	_isdigit
  6832  001896  A0D8               	btfss	status,0,c
  6833  001898  D039               	goto	l2196
  6834  00189A  0E30               	movlw	48
  6835  00189C  0100               	movlb	0	; () banked
  6836  00189E  5F65               	subwf	strtol@c& (0+255),f,b
  6837  0018A0                     l2195:
  6838                           
  6839                           ; BSR set to: 0
  6840                           
  6841                           ; BSR set to: 0
  6842                           
  6843                           ; BSR set to: 0
  6844  0018A0  5165               	movf	strtol@c& (0+255),w,b
  6845  0018A2  6E2C               	movwf	??_strtol& (0+255),c
  6846  0018A4  6A2D               	clrf	(??_strtol+1)& (0+255),c
  6847  0018A6  502A               	movf	strtol@base,w,c
  6848  0018A8  5C2C               	subwf	??_strtol,w,c
  6849  0018AA  502D               	movf	??_strtol+1,w,c
  6850  0018AC  0A80               	xorlw	128
  6851  0018AE  6E2E               	movwf	(??_strtol+2)& (0+255),c
  6852  0018B0  502B               	movf	strtol@base+1,w,c
  6853  0018B2  0A80               	xorlw	128
  6854  0018B4  582E               	subwfb	(??_strtol+2)& (0+255),w,c
  6855  0018B6  B0D8               	btfsc	status,0,c
  6856  0018B8  D029               	goto	l2196
  6857                           
  6858                           ; BSR set to: 0
  6859                           
  6860                           ; BSR set to: 0
  6861                           
  6862                           ; BSR set to: 0
  6863  0018BA  C02A  F01A         	movff	strtol@base,___lmul@multiplier
  6864  0018BE  C02B  F01B         	movff	strtol@base+1,___lmul@multiplier+1
  6865  0018C2  0E00               	movlw	0
  6866  0018C4  BE1B               	btfsc	___lmul@multiplier+1,7,c
  6867  0018C6  0EFF               	movlw	-1
  6868  0018C8  6E1C               	movwf	___lmul@multiplier+2,c
  6869  0018CA  6E1D               	movwf	___lmul@multiplier+3,c
  6870  0018CC  C061  F01E         	movff	strtol@a,___lmul@multiplicand
  6871  0018D0  C062  F01F         	movff	strtol@a+1,___lmul@multiplicand+1
  6872  0018D4  C063  F020         	movff	strtol@a+2,___lmul@multiplicand+2
  6873  0018D8  C064  F021         	movff	strtol@a+3,___lmul@multiplicand+3
  6874  0018DC  EC5B  F01D         	call	___lmul	;wreg free
  6875  0018E0  0100               	movlb	0	; () banked
  6876  0018E2  5165               	movf	strtol@c& (0+255),w,b
  6877  0018E4  241A               	addwf	?___lmul,w,c
  6878  0018E6  6F61               	movwf	strtol@a& (0+255),b
  6879  0018E8  0E00               	movlw	0
  6880  0018EA  201B               	addwfc	?___lmul+1,w,c
  6881  0018EC  6F62               	movwf	(strtol@a+1)& (0+255),b
  6882  0018EE  0E00               	movlw	0
  6883  0018F0  201C               	addwfc	?___lmul+2,w,c
  6884  0018F2  6F63               	movwf	(strtol@a+2)& (0+255),b
  6885  0018F4  0E00               	movlw	0
  6886  0018F6  201D               	addwfc	?___lmul+3,w,c
  6887  0018F8  6F64               	movwf	(strtol@a+3)& (0+255),b
  6888                           
  6889                           ; BSR set to: 0
  6890  0018FA  C026  FFD9         	movff	strtol@s,fsr2l
  6891  0018FE  C027  FFDA         	movff	strtol@s+1,fsr2h
  6892  001902  50DF               	movf	indf2,w,c
  6893  001904  6F65               	movwf	strtol@c& (0+255),b
  6894                           
  6895                           ; BSR set to: 0
  6896  001906  4A26               	infsnz	strtol@s,f,c
  6897  001908  2A27               	incf	strtol@s+1,f,c
  6898  00190A  D7B4               	goto	l2190
  6899  00190C                     l2196:
  6900                           
  6901                           ; BSR set to: 0
  6902  00190C  5028               	movf	strtol@endptr,w,c
  6903  00190E  1029               	iorwf	strtol@endptr+1,w,c
  6904  001910  B4D8               	btfsc	status,2,c
  6905  001912  D00E               	goto	l2198
  6906  001914  0EFF               	movlw	255
  6907  001916  2426               	addwf	strtol@s,w,c
  6908  001918  6E2C               	movwf	??_strtol& (0+255),c
  6909  00191A  0EFF               	movlw	255
  6910  00191C  2027               	addwfc	strtol@s+1,w,c
  6911  00191E  6E2D               	movwf	(??_strtol+1)& (0+255),c
  6912  001920  C028  FFD9         	movff	strtol@endptr,fsr2l
  6913  001924  C029  FFDA         	movff	strtol@endptr+1,fsr2h
  6914  001928  C02C  FFDE         	movff	??_strtol,postinc2
  6915  00192C  C02D  FFDD         	movff	??_strtol+1,postdec2
  6916  001930                     l2198:
  6917  001930  0100               	movlb	0	; () banked
  6918  001932  5160               	movf	strtol@sign& (0+255),w,b
  6919  001934  B4D8               	btfsc	status,2,c
  6920  001936  D01A               	goto	l2199
  6921                           
  6922                           ; BSR set to: 0
  6923  001938  C061  F02C         	movff	strtol@a,??_strtol
  6924  00193C  C062  F02D         	movff	strtol@a+1,??_strtol+1
  6925  001940  C063  F02E         	movff	strtol@a+2,??_strtol+2
  6926  001944  C064  F02F         	movff	strtol@a+3,??_strtol+3
  6927  001948  1E2C               	comf	??_strtol,f,c
  6928  00194A  1E2D               	comf	??_strtol+1,f,c
  6929  00194C  1E2E               	comf	??_strtol+2,f,c
  6930  00194E  1E2F               	comf	??_strtol+3,f,c
  6931  001950  2A2C               	incf	??_strtol,f,c
  6932  001952  0E00               	movlw	0
  6933  001954  222D               	addwfc	??_strtol+1,f,c
  6934  001956  222E               	addwfc	??_strtol+2,f,c
  6935  001958  222F               	addwfc	??_strtol+3,f,c
  6936  00195A  C02C  F026         	movff	??_strtol,?_strtol
  6937  00195E  C02D  F027         	movff	??_strtol+1,?_strtol+1
  6938  001962  C02E  F028         	movff	??_strtol+2,?_strtol+2
  6939  001966  C02F  F029         	movff	??_strtol+3,?_strtol+3
  6940                           
  6941                           ; BSR set to: 0
  6942  00196A  0012               	return	
  6943  00196C                     l2199:
  6944                           
  6945                           ; BSR set to: 0
  6946  00196C  C061  F026         	movff	strtol@a,?_strtol
  6947  001970  C062  F027         	movff	strtol@a+1,?_strtol+1
  6948  001974  C063  F028         	movff	strtol@a+2,?_strtol+2
  6949  001978  C064  F029         	movff	strtol@a+3,?_strtol+3
  6950                           
  6951                           ; BSR set to: 0
  6952  00197C  0012               	return		;funcret
  6953  00197E                     __end_of_strtol:
  6954                           	opt stack 0
  6955                           tosu	equ	0xFFF
  6956                           tosh	equ	0xFFE
  6957                           tosl	equ	0xFFD
  6958                           pclath	equ	0xFFA
  6959                           tblptru	equ	0xFF8
  6960                           tblptrh	equ	0xFF7
  6961                           tblptrl	equ	0xFF6
  6962                           tablat	equ	0xFF5
  6963                           prodh	equ	0xFF4
  6964                           prodl	equ	0xFF3
  6965                           postinc0	equ	0xFEE
  6966                           plusw0	equ	0xFEB
  6967                           wreg	equ	0xFE8
  6968                           indf1	equ	0xFE7
  6969                           postdec1	equ	0xFE5
  6970                           fsr1h	equ	0xFE2
  6971                           fsr1l	equ	0xFE1
  6972                           indf2	equ	0xFDF
  6973                           postinc2	equ	0xFDE
  6974                           postdec2	equ	0xFDD
  6975                           plusw2	equ	0xFDB
  6976                           fsr2h	equ	0xFDA
  6977                           fsr2l	equ	0xFD9
  6978                           status	equ	0xFD8
  6979                           
  6980 ;; *************** function _toupper *****************
  6981 ;; Defined at:
  6982 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\toupper.c"
  6983 ;; Parameters:    Size  Location     Type
  6984 ;;  c               1    wreg     unsigned char 
  6985 ;; Auto vars:     Size  Location     Type
  6986 ;;  c               1   23[COMRAM] unsigned char 
  6987 ;; Return value:  Size  Location     Type
  6988 ;;                  1    wreg      unsigned char 
  6989 ;; Registers used:
  6990 ;;		wreg, status,2, status,0
  6991 ;; Tracked objects:
  6992 ;;		On entry : 0/0
  6993 ;;		On exit  : 0/0
  6994 ;;		Unchanged: 0/0
  6995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6996 ;;      Params:         0       0       0       0       0       0       0
  6997 ;;      Locals:         1       0       0       0       0       0       0
  6998 ;;      Temps:          0       0       0       0       0       0       0
  6999 ;;      Totals:         1       0       0       0       0       0       0
  7000 ;;Total ram usage:        1 bytes
  7001 ;; Hardware stack levels used:    1
  7002 ;; Hardware stack levels required when called:    4
  7003 ;; This function calls:
  7004 ;;		Nothing
  7005 ;; This function is called by:
  7006 ;;		_strtol
  7007 ;; This function uses a non-reentrant model
  7008 ;;
  7009                           
  7010                           	psect	text22
  7011  004362                     __ptext22:
  7012                           	opt stack 0
  7013  004362                     _toupper:
  7014                           	opt stack 21
  7015                           
  7016                           ; BSR set to: 0
  7017                           ;incstack = 0
  7018                           ;toupper@c stored from wreg
  7019  004362  6E18               	movwf	toupper@c,c
  7020  004364  0E7B               	movlw	123
  7021  004366  6018               	cpfslt	toupper@c,c
  7022  004368  D004               	goto	l2203
  7023  00436A  0E60               	movlw	96
  7024  00436C  6418               	cpfsgt	toupper@c,c
  7025  00436E  D001               	goto	l2203
  7026  004370  9A18               	bcf	toupper@c,5,c
  7027  004372                     l2203:
  7028  004372  5018               	movf	toupper@c,w,c
  7029  004374  0012               	return	
  7030  004376                     __end_of_toupper:
  7031                           	opt stack 0
  7032                           tosu	equ	0xFFF
  7033                           tosh	equ	0xFFE
  7034                           tosl	equ	0xFFD
  7035                           pclath	equ	0xFFA
  7036                           tblptru	equ	0xFF8
  7037                           tblptrh	equ	0xFF7
  7038                           tblptrl	equ	0xFF6
  7039                           tablat	equ	0xFF5
  7040                           prodh	equ	0xFF4
  7041                           prodl	equ	0xFF3
  7042                           postinc0	equ	0xFEE
  7043                           plusw0	equ	0xFEB
  7044                           wreg	equ	0xFE8
  7045                           indf1	equ	0xFE7
  7046                           postdec1	equ	0xFE5
  7047                           fsr1h	equ	0xFE2
  7048                           fsr1l	equ	0xFE1
  7049                           indf2	equ	0xFDF
  7050                           postinc2	equ	0xFDE
  7051                           postdec2	equ	0xFDD
  7052                           plusw2	equ	0xFDB
  7053                           fsr2h	equ	0xFDA
  7054                           fsr2l	equ	0xFD9
  7055                           status	equ	0xFD8
  7056                           
  7057 ;; *************** function _isspace *****************
  7058 ;; Defined at:
  7059 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isspace.c"
  7060 ;; Parameters:    Size  Location     Type
  7061 ;;  c               1    wreg     unsigned char 
  7062 ;; Auto vars:     Size  Location     Type
  7063 ;;  c               1   25[COMRAM] unsigned char 
  7064 ;; Return value:  Size  Location     Type
  7065 ;;		None               void
  7066 ;; Registers used:
  7067 ;;		wreg, status,2, status,0
  7068 ;; Tracked objects:
  7069 ;;		On entry : 0/0
  7070 ;;		On exit  : 0/0
  7071 ;;		Unchanged: 0/0
  7072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7073 ;;      Params:         0       0       0       0       0       0       0
  7074 ;;      Locals:         2       0       0       0       0       0       0
  7075 ;;      Temps:          1       0       0       0       0       0       0
  7076 ;;      Totals:         3       0       0       0       0       0       0
  7077 ;;Total ram usage:        3 bytes
  7078 ;; Hardware stack levels used:    1
  7079 ;; Hardware stack levels required when called:    4
  7080 ;; This function calls:
  7081 ;;		Nothing
  7082 ;; This function is called by:
  7083 ;;		_strtol
  7084 ;; This function uses a non-reentrant model
  7085 ;;
  7086                           
  7087                           	psect	text23
  7088  004156                     __ptext23:
  7089                           	opt stack 0
  7090  004156                     _isspace:
  7091                           	opt stack 21
  7092                           
  7093                           ;incstack = 0
  7094                           ;isspace@c stored from wreg
  7095  004156  6E1A               	movwf	isspace@c,c
  7096  004158  0E01               	movlw	1
  7097  00415A  6E19               	movwf	_isspace$3332,c
  7098  00415C  0E20               	movlw	32
  7099  00415E  181A               	xorwf	isspace@c,w,c
  7100  004160  B4D8               	btfsc	status,2,c
  7101  004162  D008               	goto	l2285
  7102  004164  0E0E               	movlw	14
  7103  004166  601A               	cpfslt	isspace@c,c
  7104  004168  D003               	goto	u7640
  7105  00416A  0E09               	movlw	9
  7106  00416C  601A               	cpfslt	isspace@c,c
  7107  00416E  D002               	goto	l2285
  7108  004170                     u7640:
  7109  004170  0E00               	movlw	0
  7110  004172  6E19               	movwf	_isspace$3332,c
  7111  004174                     l2285:
  7112  004174  C019  F018         	movff	_isspace$3332,??_isspace
  7113  004178  3018               	rrcf	??_isspace,w,c
  7114  00417A  0012               	return	
  7115  00417C                     __end_of_isspace:
  7116                           	opt stack 0
  7117                           tosu	equ	0xFFF
  7118                           tosh	equ	0xFFE
  7119                           tosl	equ	0xFFD
  7120                           pclath	equ	0xFFA
  7121                           tblptru	equ	0xFF8
  7122                           tblptrh	equ	0xFF7
  7123                           tblptrl	equ	0xFF6
  7124                           tablat	equ	0xFF5
  7125                           prodh	equ	0xFF4
  7126                           prodl	equ	0xFF3
  7127                           postinc0	equ	0xFEE
  7128                           plusw0	equ	0xFEB
  7129                           wreg	equ	0xFE8
  7130                           indf1	equ	0xFE7
  7131                           postdec1	equ	0xFE5
  7132                           fsr1h	equ	0xFE2
  7133                           fsr1l	equ	0xFE1
  7134                           indf2	equ	0xFDF
  7135                           postinc2	equ	0xFDE
  7136                           postdec2	equ	0xFDD
  7137                           plusw2	equ	0xFDB
  7138                           fsr2h	equ	0xFDA
  7139                           fsr2l	equ	0xFD9
  7140                           status	equ	0xFD8
  7141                           
  7142 ;; *************** function _isdigit *****************
  7143 ;; Defined at:
  7144 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  7145 ;; Parameters:    Size  Location     Type
  7146 ;;  c               1    wreg     unsigned char 
  7147 ;; Auto vars:     Size  Location     Type
  7148 ;;  c               1   25[COMRAM] unsigned char 
  7149 ;; Return value:  Size  Location     Type
  7150 ;;		None               void
  7151 ;; Registers used:
  7152 ;;		wreg, status,2, status,0
  7153 ;; Tracked objects:
  7154 ;;		On entry : 0/0
  7155 ;;		On exit  : 0/0
  7156 ;;		Unchanged: 0/0
  7157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7158 ;;      Params:         0       0       0       0       0       0       0
  7159 ;;      Locals:         2       0       0       0       0       0       0
  7160 ;;      Temps:          1       0       0       0       0       0       0
  7161 ;;      Totals:         3       0       0       0       0       0       0
  7162 ;;Total ram usage:        3 bytes
  7163 ;; Hardware stack levels used:    1
  7164 ;; Hardware stack levels required when called:    4
  7165 ;; This function calls:
  7166 ;;		Nothing
  7167 ;; This function is called by:
  7168 ;;		_strtol
  7169 ;; This function uses a non-reentrant model
  7170 ;;
  7171                           
  7172                           	psect	text24
  7173  004272                     __ptext24:
  7174                           	opt stack 0
  7175  004272                     _isdigit:
  7176                           	opt stack 21
  7177                           
  7178                           ;incstack = 0
  7179                           ;isdigit@c stored from wreg
  7180  004272  6E1A               	movwf	isdigit@c,c
  7181  004274  0E00               	movlw	0
  7182  004276  6E19               	movwf	_isdigit$3329,c
  7183  004278  0E3A               	movlw	58
  7184  00427A  601A               	cpfslt	isdigit@c,c
  7185  00427C  D005               	goto	l2280
  7186  00427E  0E2F               	movlw	47
  7187  004280  641A               	cpfsgt	isdigit@c,c
  7188  004282  D002               	goto	l2280
  7189  004284  0E01               	movlw	1
  7190  004286  6E19               	movwf	_isdigit$3329,c
  7191  004288                     l2280:
  7192  004288  C019  F018         	movff	_isdigit$3329,??_isdigit
  7193  00428C  3018               	rrcf	??_isdigit,w,c
  7194  00428E  0012               	return	
  7195  004290                     __end_of_isdigit:
  7196                           	opt stack 0
  7197                           tosu	equ	0xFFF
  7198                           tosh	equ	0xFFE
  7199                           tosl	equ	0xFFD
  7200                           pclath	equ	0xFFA
  7201                           tblptru	equ	0xFF8
  7202                           tblptrh	equ	0xFF7
  7203                           tblptrl	equ	0xFF6
  7204                           tablat	equ	0xFF5
  7205                           prodh	equ	0xFF4
  7206                           prodl	equ	0xFF3
  7207                           postinc0	equ	0xFEE
  7208                           plusw0	equ	0xFEB
  7209                           wreg	equ	0xFE8
  7210                           indf1	equ	0xFE7
  7211                           postdec1	equ	0xFE5
  7212                           fsr1h	equ	0xFE2
  7213                           fsr1l	equ	0xFE1
  7214                           indf2	equ	0xFDF
  7215                           postinc2	equ	0xFDE
  7216                           postdec2	equ	0xFDD
  7217                           plusw2	equ	0xFDB
  7218                           fsr2h	equ	0xFDA
  7219                           fsr2l	equ	0xFD9
  7220                           status	equ	0xFD8
  7221                           
  7222 ;; *************** function _isalpha *****************
  7223 ;; Defined at:
  7224 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isalpha.c"
  7225 ;; Parameters:    Size  Location     Type
  7226 ;;  c               1    wreg     unsigned char 
  7227 ;; Auto vars:     Size  Location     Type
  7228 ;;  c               1   28[COMRAM] unsigned char 
  7229 ;; Return value:  Size  Location     Type
  7230 ;;		None               void
  7231 ;; Registers used:
  7232 ;;		wreg, status,2, status,0, cstack
  7233 ;; Tracked objects:
  7234 ;;		On entry : 0/0
  7235 ;;		On exit  : 0/0
  7236 ;;		Unchanged: 0/0
  7237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7238 ;;      Params:         0       0       0       0       0       0       0
  7239 ;;      Locals:         2       0       0       0       0       0       0
  7240 ;;      Temps:          1       0       0       0       0       0       0
  7241 ;;      Totals:         3       0       0       0       0       0       0
  7242 ;;Total ram usage:        3 bytes
  7243 ;; Hardware stack levels used:    1
  7244 ;; Hardware stack levels required when called:    5
  7245 ;; This function calls:
  7246 ;;		_isupper
  7247 ;; This function is called by:
  7248 ;;		_strtol
  7249 ;; This function uses a non-reentrant model
  7250 ;;
  7251                           
  7252                           	psect	text25
  7253  00412E                     __ptext25:
  7254                           	opt stack 0
  7255  00412E                     _isalpha:
  7256                           	opt stack 20
  7257                           
  7258                           ;incstack = 0
  7259                           ;isalpha@c stored from wreg
  7260  00412E  6E1D               	movwf	isalpha@c,c
  7261  004130  0E01               	movlw	1
  7262  004132  6E1C               	movwf	_isalpha$3326,c
  7263  004134  0E7B               	movlw	123
  7264  004136  601D               	cpfslt	isalpha@c,c
  7265  004138  D003               	goto	u7660
  7266  00413A  0E61               	movlw	97
  7267  00413C  601D               	cpfslt	isalpha@c,c
  7268  00413E  D007               	goto	l2275
  7269  004140                     u7660:
  7270  004140  501D               	movf	isalpha@c,w,c
  7271  004142  EC48  F021         	call	_isupper
  7272  004146  B0D8               	btfsc	status,0,c
  7273  004148  D002               	goto	l2275
  7274  00414A  0E00               	movlw	0
  7275  00414C  6E1C               	movwf	_isalpha$3326,c
  7276  00414E                     l2275:
  7277  00414E  C01C  F01B         	movff	_isalpha$3326,??_isalpha
  7278  004152  301B               	rrcf	??_isalpha,w,c
  7279  004154  0012               	return	
  7280  004156                     __end_of_isalpha:
  7281                           	opt stack 0
  7282                           tosu	equ	0xFFF
  7283                           tosh	equ	0xFFE
  7284                           tosl	equ	0xFFD
  7285                           pclath	equ	0xFFA
  7286                           tblptru	equ	0xFF8
  7287                           tblptrh	equ	0xFF7
  7288                           tblptrl	equ	0xFF6
  7289                           tablat	equ	0xFF5
  7290                           prodh	equ	0xFF4
  7291                           prodl	equ	0xFF3
  7292                           postinc0	equ	0xFEE
  7293                           plusw0	equ	0xFEB
  7294                           wreg	equ	0xFE8
  7295                           indf1	equ	0xFE7
  7296                           postdec1	equ	0xFE5
  7297                           fsr1h	equ	0xFE2
  7298                           fsr1l	equ	0xFE1
  7299                           indf2	equ	0xFDF
  7300                           postinc2	equ	0xFDE
  7301                           postdec2	equ	0xFDD
  7302                           plusw2	equ	0xFDB
  7303                           fsr2h	equ	0xFDA
  7304                           fsr2l	equ	0xFD9
  7305                           status	equ	0xFD8
  7306                           
  7307 ;; *************** function _isupper *****************
  7308 ;; Defined at:
  7309 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isupper.c"
  7310 ;; Parameters:    Size  Location     Type
  7311 ;;  c               1    wreg     unsigned char 
  7312 ;; Auto vars:     Size  Location     Type
  7313 ;;  c               1   25[COMRAM] unsigned char 
  7314 ;; Return value:  Size  Location     Type
  7315 ;;		None               void
  7316 ;; Registers used:
  7317 ;;		wreg, status,2, status,0
  7318 ;; Tracked objects:
  7319 ;;		On entry : 0/0
  7320 ;;		On exit  : 0/0
  7321 ;;		Unchanged: 0/0
  7322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7323 ;;      Params:         0       0       0       0       0       0       0
  7324 ;;      Locals:         2       0       0       0       0       0       0
  7325 ;;      Temps:          1       0       0       0       0       0       0
  7326 ;;      Totals:         3       0       0       0       0       0       0
  7327 ;;Total ram usage:        3 bytes
  7328 ;; Hardware stack levels used:    1
  7329 ;; Hardware stack levels required when called:    4
  7330 ;; This function calls:
  7331 ;;		Nothing
  7332 ;; This function is called by:
  7333 ;;		_isalpha
  7334 ;; This function uses a non-reentrant model
  7335 ;;
  7336                           
  7337                           	psect	text26
  7338  004290                     __ptext26:
  7339                           	opt stack 0
  7340  004290                     _isupper:
  7341                           	opt stack 20
  7342                           
  7343                           ;incstack = 0
  7344                           ;isupper@c stored from wreg
  7345  004290  6E1A               	movwf	isupper@c,c
  7346  004292  0E00               	movlw	0
  7347  004294  6E19               	movwf	_isupper$3335,c
  7348  004296  0E5B               	movlw	91
  7349  004298  601A               	cpfslt	isupper@c,c
  7350  00429A  D005               	goto	l2290
  7351  00429C  0E40               	movlw	64
  7352  00429E  641A               	cpfsgt	isupper@c,c
  7353  0042A0  D002               	goto	l2290
  7354  0042A2  0E01               	movlw	1
  7355  0042A4  6E19               	movwf	_isupper$3335,c
  7356  0042A6                     l2290:
  7357  0042A6  C019  F018         	movff	_isupper$3335,??_isupper
  7358  0042AA  3018               	rrcf	??_isupper,w,c
  7359  0042AC  0012               	return	
  7360  0042AE                     __end_of_isupper:
  7361                           	opt stack 0
  7362                           tosu	equ	0xFFF
  7363                           tosh	equ	0xFFE
  7364                           tosl	equ	0xFFD
  7365                           pclath	equ	0xFFA
  7366                           tblptru	equ	0xFF8
  7367                           tblptrh	equ	0xFF7
  7368                           tblptrl	equ	0xFF6
  7369                           tablat	equ	0xFF5
  7370                           prodh	equ	0xFF4
  7371                           prodl	equ	0xFF3
  7372                           postinc0	equ	0xFEE
  7373                           plusw0	equ	0xFEB
  7374                           wreg	equ	0xFE8
  7375                           indf1	equ	0xFE7
  7376                           postdec1	equ	0xFE5
  7377                           fsr1h	equ	0xFE2
  7378                           fsr1l	equ	0xFE1
  7379                           indf2	equ	0xFDF
  7380                           postinc2	equ	0xFDE
  7381                           postdec2	equ	0xFDD
  7382                           plusw2	equ	0xFDB
  7383                           fsr2h	equ	0xFDA
  7384                           fsr2l	equ	0xFD9
  7385                           status	equ	0xFD8
  7386                           
  7387 ;; *************** function _DacReadValue *****************
  7388 ;; Defined at:
  7389 ;;		line 44 in file "DacApp.c"
  7390 ;; Parameters:    Size  Location     Type
  7391 ;;  data            2  104[BANK0 ] PTR unsigned char 
  7392 ;;		 -> rxMsgData(20), 
  7393 ;; Auto vars:     Size  Location     Type
  7394 ;;  byteIdx         2  120[BANK0 ] int 
  7395 ;;  TxMsg           7  113[BANK0 ] unsigned char [7]
  7396 ;;  readVal         2  110[BANK0 ] unsigned int 
  7397 ;;  dacIndex        1  112[BANK0 ] unsigned char 
  7398 ;;  byteNum         1  109[BANK0 ] unsigned char 
  7399 ;;  regNum          1  108[BANK0 ] unsigned char 
  7400 ;; Return value:  Size  Location     Type
  7401 ;;                  1    wreg      void 
  7402 ;; Registers used:
  7403 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7404 ;; Tracked objects:
  7405 ;;		On entry : 0/0
  7406 ;;		On exit  : 0/0
  7407 ;;		Unchanged: 0/0
  7408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7409 ;;      Params:         0       2       0       0       0       0       0
  7410 ;;      Locals:         0      14       0       0       0       0       0
  7411 ;;      Temps:          0       2       0       0       0       0       0
  7412 ;;      Totals:         0      18       0       0       0       0       0
  7413 ;;Total ram usage:       18 bytes
  7414 ;; Hardware stack levels used:    1
  7415 ;; Hardware stack levels required when called:   10
  7416 ;; This function calls:
  7417 ;;		_ReadIntFromEeprom
  7418 ;;		_WriteUartMessage
  7419 ;;		_ZeroArray
  7420 ;;		_crc8
  7421 ;;		_make8
  7422 ;; This function is called by:
  7423 ;;		_GroupDAC
  7424 ;; This function uses a non-reentrant model
  7425 ;;
  7426                           
  7427                           	psect	text27
  7428  0027CE                     __ptext27:
  7429                           	opt stack 0
  7430  0027CE                     _DacReadValue:
  7431                           	opt stack 18
  7432                           
  7433                           ;DacApp.c: 46: uint16_t readVal;
  7434                           ;DacApp.c: 47: uint8_t regNum = 0, byteNum = 0;
  7435                           
  7436                           ;incstack = 0
  7437  0027CE  0E00               	movlw	0
  7438  0027D0  0100               	movlb	0	; () banked
  7439  0027D2  6FCC               	movwf	DacReadValue@regNum& (0+255),b
  7440  0027D4  0E00               	movlw	0
  7441  0027D6  6FCD               	movwf	DacReadValue@byteNum& (0+255),b
  7442                           
  7443                           ; BSR set to: 0
  7444                           ;DacApp.c: 48: char TxMsg[2 + (0x4) + 1];
  7445                           ;DacApp.c: 49: ZeroArray(TxMsg, 2 + (0x4) + 1);
  7446  0027D8  0ED1               	movlw	low DacReadValue@TxMsg
  7447  0027DA  6E20               	movwf	ZeroArray@array,c
  7448  0027DC  0E00               	movlw	high DacReadValue@TxMsg
  7449  0027DE  6E21               	movwf	ZeroArray@array+1,c
  7450  0027E0  0E00               	movlw	0
  7451  0027E2  6E23               	movwf	ZeroArray@size+1,c
  7452  0027E4  0E07               	movlw	7
  7453  0027E6  6E22               	movwf	ZeroArray@size,c
  7454  0027E8  EC57  F021         	call	_ZeroArray	;wreg free
  7455                           
  7456                           ;DacApp.c: 52: TxMsg[(0)] = (0x24);
  7457  0027EC  0E24               	movlw	36
  7458  0027EE  0100               	movlb	0	; () banked
  7459  0027F0  6FD1               	movwf	DacReadValue@TxMsg& (0+255),b
  7460                           
  7461                           ; BSR set to: 0
  7462                           ;DacApp.c: 53: TxMsg[(1)] = DAC_MSG;
  7463  0027F2  0E06               	movlw	6
  7464  0027F4  6FD2               	movwf	(DacReadValue@TxMsg+1)& (0+255),b
  7465                           
  7466                           ; BSR set to: 0
  7467                           ;DacApp.c: 54: TxMsg[(2)] = DAC_READ_VALUE;
  7468  0027F6  0E62               	movlw	98
  7469  0027F8  6FD3               	movwf	(DacReadValue@TxMsg+2)& (0+255),b
  7470                           
  7471                           ; BSR set to: 0
  7472                           ;DacApp.c: 55: TxMsg[(3)] = 2;
  7473  0027FA  0E02               	movlw	2
  7474  0027FC  6FD4               	movwf	(DacReadValue@TxMsg+3)& (0+255),b
  7475                           
  7476                           ; BSR set to: 0
  7477                           ;DacApp.c: 57: uint8_t dacIndex = data[0];
  7478  0027FE  C0C8  FFD9         	movff	DacReadValue@data,fsr2l
  7479  002802  C0C9  FFDA         	movff	DacReadValue@data+1,fsr2h
  7480  002806  50DF               	movf	indf2,w,c
  7481  002808  6FD0               	movwf	DacReadValue@dacIndex& (0+255),b
  7482                           
  7483                           ; BSR set to: 0
  7484                           ;DacApp.c: 58: uint16_t readVal = ReadIntFromEeprom((0x40) | DAC_ADDRES[dacIndex], 2);
  7485  00280A  0E00               	movlw	0
  7486  00280C  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  7487  00280E  0E02               	movlw	2
  7488  002810  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  7489  002812  51D0               	movf	DacReadValue@dacIndex& (0+255),w,b
  7490  002814  0D01               	mullw	1
  7491  002816  0E53               	movlw	low _DAC_ADDRES
  7492  002818  24F3               	addwf	prodl,w,c
  7493  00281A  6EF6               	movwf	tblptrl,c
  7494  00281C  0E06               	movlw	high _DAC_ADDRES
  7495  00281E  20F4               	addwfc	prodh,w,c
  7496  002820  6EF7               	movwf	tblptrh,c
  7497  002822                     	if	0	;There are less than 3 active tblptr bytes
  7498  002822                     	endif
  7499  002822  0008               	tblrd		*
  7500  002824  50F5               	movf	tablat,w,c
  7501  002826  0940               	iorlw	64
  7502  002828  EC6F  F010         	call	_ReadIntFromEeprom
  7503  00282C  C0B1  F0CE         	movff	?_ReadIntFromEeprom,DacReadValue@readVal
  7504  002830  C0B2  F0CF         	movff	?_ReadIntFromEeprom+1,DacReadValue@readVal+1
  7505                           
  7506                           ;DacApp.c: 60: for(int byteIdx = 0; byteIdx < 2; byteIdx++)
  7507  002834  0E00               	movlw	0
  7508  002836  0100               	movlb	0	; () banked
  7509  002838  6FD9               	movwf	(DacReadValue@byteIdx+1)& (0+255),b
  7510  00283A  0E00               	movlw	0
  7511  00283C  6FD8               	movwf	DacReadValue@byteIdx& (0+255),b
  7512  00283E                     l8381:
  7513                           
  7514                           ; BSR set to: 0
  7515  00283E  BFD9               	btfsc	(DacReadValue@byteIdx+1)& (0+255),7,b
  7516  002840  D006               	goto	l419
  7517  002842  51D9               	movf	(DacReadValue@byteIdx+1)& (0+255),w,b
  7518  002844  E11F               	bnz	l8391
  7519  002846  0E02               	movlw	2
  7520  002848  5DD8               	subwf	DacReadValue@byteIdx& (0+255),w,b
  7521  00284A  B0D8               	btfsc	status,0,c
  7522  00284C  D01B               	goto	u8470
  7523  00284E                     l419:
  7524                           
  7525                           ; BSR set to: 0
  7526                           ;DacApp.c: 61: {
  7527                           ;DacApp.c: 62: TxMsg[(0x4) + byteIdx] = make8(readVal, byteIdx);
  7528                           
  7529                           ; BSR set to: 0
  7530  00284E  0E04               	movlw	4
  7531  002850  25D8               	addwf	DacReadValue@byteIdx& (0+255),w,b
  7532  002852  6FCA               	movwf	??_DacReadValue& (0+255),b
  7533  002854  0E00               	movlw	0
  7534  002856  21D9               	addwfc	(DacReadValue@byteIdx+1)& (0+255),w,b
  7535  002858  6FCB               	movwf	(??_DacReadValue+1)& (0+255),b
  7536  00285A  0ED1               	movlw	low DacReadValue@TxMsg
  7537  00285C  25CA               	addwf	??_DacReadValue& (0+255),w,b
  7538  00285E  6ED9               	movwf	fsr2l,c
  7539  002860  0E00               	movlw	high DacReadValue@TxMsg
  7540  002862  21CB               	addwfc	(??_DacReadValue+1)& (0+255),w,b
  7541  002864  6EDA               	movwf	fsr2h,c
  7542  002866  C0CE  F018         	movff	DacReadValue@readVal,make8@data
  7543  00286A  C0CF  F019         	movff	DacReadValue@readVal+1,make8@data+1
  7544  00286E  6A1A               	clrf	make8@data+2,c
  7545  002870  6A1B               	clrf	make8@data+3,c
  7546  002872  C0D8  F01C         	movff	DacReadValue@byteIdx,make8@dataLocation
  7547  002876  EC51  F01C         	call	_make8	;wreg free
  7548  00287A  6EDF               	movwf	indf2,c
  7549  00287C  0100               	movlb	0	; () banked
  7550  00287E  4BD8               	infsnz	DacReadValue@byteIdx& (0+255),f,b
  7551  002880  2BD9               	incf	(DacReadValue@byteIdx+1)& (0+255),f,b
  7552  002882  D7DD               	goto	l8381
  7553  002884                     u8470:
  7554  002884                     l8391:
  7555                           
  7556                           ; BSR set to: 0
  7557                           ;DacApp.c: 63: }
  7558                           ;DacApp.c: 64: TxMsg[2 + (0x4)] = crc8(TxMsg, 2 + (0x4));
  7559  002884  0ED1               	movlw	low DacReadValue@TxMsg
  7560  002886  6E18               	movwf	crc8@dataArray,c
  7561  002888  0E00               	movlw	high DacReadValue@TxMsg
  7562  00288A  6E19               	movwf	crc8@dataArray+1,c
  7563  00288C  0E00               	movlw	0
  7564  00288E  6E1B               	movwf	crc8@dataSize+1,c
  7565  002890  0E06               	movlw	6
  7566  002892  6E1A               	movwf	crc8@dataSize,c
  7567  002894  ECD8  F01D         	call	_crc8	;wreg free
  7568  002898  0100               	movlb	0	; () banked
  7569  00289A  6FD7               	movwf	(DacReadValue@TxMsg+6)& (0+255),b
  7570                           
  7571                           ; BSR set to: 0
  7572                           ;DacApp.c: 65: WriteUartMessage(TxMsg, 2 + (0x4) + 1);
  7573  00289C  0ED1               	movlw	low DacReadValue@TxMsg
  7574  00289E  6E19               	movwf	WriteUartMessage@dataBuf,c
  7575  0028A0  0E00               	movlw	high DacReadValue@TxMsg
  7576  0028A2  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  7577  0028A4  0E00               	movlw	0
  7578  0028A6  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  7579  0028A8  0E07               	movlw	7
  7580  0028AA  6E1B               	movwf	WriteUartMessage@dataSize,c
  7581  0028AC  EC8A  F01F         	call	_WriteUartMessage	;wreg free
  7582  0028B0  0012               	return		;funcret
  7583  0028B2                     __end_of_DacReadValue:
  7584                           	opt stack 0
  7585                           tosu	equ	0xFFF
  7586                           tosh	equ	0xFFE
  7587                           tosl	equ	0xFFD
  7588                           pclath	equ	0xFFA
  7589                           tblptru	equ	0xFF8
  7590                           tblptrh	equ	0xFF7
  7591                           tblptrl	equ	0xFF6
  7592                           tablat	equ	0xFF5
  7593                           prodh	equ	0xFF4
  7594                           prodl	equ	0xFF3
  7595                           postinc0	equ	0xFEE
  7596                           plusw0	equ	0xFEB
  7597                           wreg	equ	0xFE8
  7598                           indf1	equ	0xFE7
  7599                           postdec1	equ	0xFE5
  7600                           fsr1h	equ	0xFE2
  7601                           fsr1l	equ	0xFE1
  7602                           indf2	equ	0xFDF
  7603                           postinc2	equ	0xFDE
  7604                           postdec2	equ	0xFDD
  7605                           plusw2	equ	0xFDB
  7606                           fsr2h	equ	0xFDA
  7607                           fsr2l	equ	0xFD9
  7608                           status	equ	0xFD8
  7609                           
  7610 ;; *************** function _testLeds *****************
  7611 ;; Defined at:
  7612 ;;		line 43 in file "LedsApp.c"
  7613 ;; Parameters:    Size  Location     Type
  7614 ;;		None
  7615 ;; Auto vars:     Size  Location     Type
  7616 ;;  idx             2   44[COMRAM] int 
  7617 ;; Return value:  Size  Location     Type
  7618 ;;                  1    wreg      void 
  7619 ;; Registers used:
  7620 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7621 ;; Tracked objects:
  7622 ;;		On entry : 0/0
  7623 ;;		On exit  : 0/0
  7624 ;;		Unchanged: 0/0
  7625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7626 ;;      Params:         0       0       0       0       0       0       0
  7627 ;;      Locals:         2       0       0       0       0       0       0
  7628 ;;      Temps:          1       0       0       0       0       0       0
  7629 ;;      Totals:         3       0       0       0       0       0       0
  7630 ;;Total ram usage:        3 bytes
  7631 ;; Hardware stack levels used:    1
  7632 ;; Hardware stack levels required when called:    7
  7633 ;; This function calls:
  7634 ;;		_SendAckMessage
  7635 ;; This function is called by:
  7636 ;;		_GroupControlMcu
  7637 ;; This function uses a non-reentrant model
  7638 ;;
  7639                           
  7640                           	psect	text28
  7641  00364A                     __ptext28:
  7642                           	opt stack 0
  7643  00364A                     _testLeds:
  7644                           	opt stack 21
  7645                           
  7646                           ;LedsApp.c: 46: for(int idx = 0; idx < 10; idx++)
  7647                           
  7648                           ;incstack = 0
  7649  00364A  0E00               	movlw	0
  7650  00364C  6E2E               	movwf	testLeds@idx+1,c
  7651  00364E  0E00               	movlw	0
  7652  003650  6E2D               	movwf	testLeds@idx,c
  7653  003652                     l8201:
  7654  003652  BE2E               	btfsc	testLeds@idx+1,7,c
  7655  003654  D006               	goto	l60
  7656  003656  502E               	movf	testLeds@idx+1,w,c
  7657  003658  E127               	bnz	l8215
  7658  00365A  0E0A               	movlw	10
  7659  00365C  5C2D               	subwf	testLeds@idx,w,c
  7660  00365E  B0D8               	btfsc	status,0,c
  7661  003660  D023               	goto	u8290
  7662  003662                     l60:
  7663                           
  7664                           ;LedsApp.c: 47: {
  7665                           ;LedsApp.c: 49: LATCbits.LATC0 = 1;
  7666  003662  808B               	bsf	3979,0,c	;volatile
  7667                           
  7668                           ;LedsApp.c: 50: _delay((unsigned long)((50)*(8000000/4000.0)));
  7669  003664  0E82               	movlw	130
  7670  003666  6E2C               	movwf	??_testLeds& (0+255),c
  7671  003668  0EDE               	movlw	222
  7672  00366A                     u9147:
  7673  00366A  2EE8               	decfsz	wreg,f,c
  7674  00366C  D7FE               	bra	u9147
  7675  00366E  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7676  003670  D7FC               	bra	u9147
  7677                           
  7678                           ;LedsApp.c: 51: LATBbits.LATB4 = 1;
  7679  003672  888A               	bsf	3978,4,c	;volatile
  7680                           
  7681                           ;LedsApp.c: 52: _delay((unsigned long)((50)*(8000000/4000.0)));
  7682  003674  0E82               	movlw	130
  7683  003676  6E2C               	movwf	??_testLeds& (0+255),c
  7684  003678  0EDE               	movlw	222
  7685  00367A                     u9157:
  7686  00367A  2EE8               	decfsz	wreg,f,c
  7687  00367C  D7FE               	bra	u9157
  7688  00367E  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7689  003680  D7FC               	bra	u9157
  7690                           
  7691                           ;LedsApp.c: 53: LATCbits.LATC0 = 0;
  7692  003682  908B               	bcf	3979,0,c	;volatile
  7693                           
  7694                           ;LedsApp.c: 54: _delay((unsigned long)((50)*(8000000/4000.0)));
  7695  003684  0E82               	movlw	130
  7696  003686  6E2C               	movwf	??_testLeds& (0+255),c
  7697  003688  0EDE               	movlw	222
  7698  00368A                     u9167:
  7699  00368A  2EE8               	decfsz	wreg,f,c
  7700  00368C  D7FE               	bra	u9167
  7701  00368E  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7702  003690  D7FC               	bra	u9167
  7703                           
  7704                           ;LedsApp.c: 55: LATBbits.LATB4 = 0;
  7705  003692  988A               	bcf	3978,4,c	;volatile
  7706                           
  7707                           ;LedsApp.c: 56: _delay((unsigned long)((50)*(8000000/4000.0)));
  7708  003694  0E82               	movlw	130
  7709  003696  6E2C               	movwf	??_testLeds& (0+255),c
  7710  003698  0EDE               	movlw	222
  7711  00369A                     u9177:
  7712  00369A  2EE8               	decfsz	wreg,f,c
  7713  00369C  D7FE               	bra	u9177
  7714  00369E  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7715  0036A0  D7FC               	bra	u9177
  7716  0036A2  4A2D               	infsnz	testLeds@idx,f,c
  7717  0036A4  2A2E               	incf	testLeds@idx+1,f,c
  7718  0036A6  D7D5               	goto	l8201
  7719  0036A8                     u8290:
  7720  0036A8                     l8215:
  7721                           
  7722                           ;LedsApp.c: 57: }
  7723                           ;LedsApp.c: 59: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_TEST_LEDS);
  7724  0036A8  0E14               	movlw	20
  7725  0036AA  6E24               	movwf	SendAckMessage@inRequest,c
  7726  0036AC  0E01               	movlw	1
  7727  0036AE  ECAF  F01D         	call	_SendAckMessage
  7728  0036B2  0012               	return	
  7729  0036B4                     __end_of_testLeds:
  7730                           	opt stack 0
  7731                           tosu	equ	0xFFF
  7732                           tosh	equ	0xFFE
  7733                           tosl	equ	0xFFD
  7734                           pclath	equ	0xFFA
  7735                           tblptru	equ	0xFF8
  7736                           tblptrh	equ	0xFF7
  7737                           tblptrl	equ	0xFF6
  7738                           tablat	equ	0xFF5
  7739                           prodh	equ	0xFF4
  7740                           prodl	equ	0xFF3
  7741                           postinc0	equ	0xFEE
  7742                           plusw0	equ	0xFEB
  7743                           wreg	equ	0xFE8
  7744                           indf1	equ	0xFE7
  7745                           postdec1	equ	0xFE5
  7746                           fsr1h	equ	0xFE2
  7747                           fsr1l	equ	0xFE1
  7748                           indf2	equ	0xFDF
  7749                           postinc2	equ	0xFDE
  7750                           postdec2	equ	0xFDD
  7751                           plusw2	equ	0xFDB
  7752                           fsr2h	equ	0xFDA
  7753                           fsr2l	equ	0xFD9
  7754                           status	equ	0xFD8
  7755                           
  7756 ;; *************** function _ResetMcu *****************
  7757 ;; Defined at:
  7758 ;;		line 144 in file "SystemCommon.c"
  7759 ;; Parameters:    Size  Location     Type
  7760 ;;		None
  7761 ;; Auto vars:     Size  Location     Type
  7762 ;;		None
  7763 ;; Return value:  Size  Location     Type
  7764 ;;                  1    wreg      void 
  7765 ;; Registers used:
  7766 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7767 ;; Tracked objects:
  7768 ;;		On entry : 0/0
  7769 ;;		On exit  : 0/0
  7770 ;;		Unchanged: 0/0
  7771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7772 ;;      Params:         0       0       0       0       0       0       0
  7773 ;;      Locals:         0       0       0       0       0       0       0
  7774 ;;      Temps:          0       0       0       0       0       0       0
  7775 ;;      Totals:         0       0       0       0       0       0       0
  7776 ;;Total ram usage:        0 bytes
  7777 ;; Hardware stack levels used:    1
  7778 ;; Hardware stack levels required when called:    7
  7779 ;; This function calls:
  7780 ;;		_SendAckMessage
  7781 ;; This function is called by:
  7782 ;;		_GroupControlMcu
  7783 ;; This function uses a non-reentrant model
  7784 ;;
  7785                           
  7786                           	psect	text29
  7787  0043D0                     __ptext29:
  7788                           	opt stack 0
  7789  0043D0                     _ResetMcu:
  7790                           	opt stack 21
  7791                           
  7792                           ;SystemCommon.c: 147: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_RESET
      +                          _MCU);
  7793                           
  7794                           ;incstack = 0
  7795  0043D0  0E11               	movlw	17
  7796  0043D2  6E24               	movwf	SendAckMessage@inRequest,c
  7797  0043D4  0E01               	movlw	1
  7798  0043D6  ECAF  F01D         	call	_SendAckMessage
  7799  0043DA  00FF               	reset		;# 
  7800  0043DC  0012               	return		;funcret
  7801  0043DE                     __end_of_ResetMcu:
  7802                           	opt stack 0
  7803                           tosu	equ	0xFFF
  7804                           tosh	equ	0xFFE
  7805                           tosl	equ	0xFFD
  7806                           pclath	equ	0xFFA
  7807                           tblptru	equ	0xFF8
  7808                           tblptrh	equ	0xFF7
  7809                           tblptrl	equ	0xFF6
  7810                           tablat	equ	0xFF5
  7811                           prodh	equ	0xFF4
  7812                           prodl	equ	0xFF3
  7813                           postinc0	equ	0xFEE
  7814                           plusw0	equ	0xFEB
  7815                           wreg	equ	0xFE8
  7816                           indf1	equ	0xFE7
  7817                           postdec1	equ	0xFE5
  7818                           fsr1h	equ	0xFE2
  7819                           fsr1l	equ	0xFE1
  7820                           indf2	equ	0xFDF
  7821                           postinc2	equ	0xFDE
  7822                           postdec2	equ	0xFDD
  7823                           plusw2	equ	0xFDB
  7824                           fsr2h	equ	0xFDA
  7825                           fsr2l	equ	0xFD9
  7826                           status	equ	0xFD8
  7827                           
  7828 ;; *************** function _SetChannelMode *****************
  7829 ;; Defined at:
  7830 ;;		line 30 in file "AdcApp.c"
  7831 ;; Parameters:    Size  Location     Type
  7832 ;;  data            2   43[COMRAM] PTR unsigned char 
  7833 ;; Auto vars:     Size  Location     Type
  7834 ;;		None
  7835 ;; Return value:  Size  Location     Type
  7836 ;;                  1    wreg      void 
  7837 ;; Registers used:
  7838 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7839 ;; Tracked objects:
  7840 ;;		On entry : 0/0
  7841 ;;		On exit  : 0/0
  7842 ;;		Unchanged: 0/0
  7843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7844 ;;      Params:         2       0       0       0       0       0       0
  7845 ;;      Locals:         0       0       0       0       0       0       0
  7846 ;;      Temps:          0       0       0       0       0       0       0
  7847 ;;      Totals:         2       0       0       0       0       0       0
  7848 ;;Total ram usage:        2 bytes
  7849 ;; Hardware stack levels used:    1
  7850 ;; Hardware stack levels required when called:    7
  7851 ;; This function calls:
  7852 ;;		_SendAckMessage
  7853 ;; This function is called by:
  7854 ;;		_GroupAdc
  7855 ;; This function uses a non-reentrant model
  7856 ;;
  7857                           
  7858                           	psect	text30
  7859  00404C                     __ptext30:
  7860                           	opt stack 0
  7861  00404C                     _SetChannelMode:
  7862                           	opt stack 21
  7863                           
  7864                           ;AdcApp.c: 32: adcSampleMode = data[0];
  7865                           
  7866                           ;incstack = 0
  7867  00404C  C02C  FFD9         	movff	SetChannelMode@data,fsr2l
  7868  004050  C02D  FFDA         	movff	SetChannelMode@data+1,fsr2h
  7869  004054  50DF               	movf	indf2,w,c
  7870  004056  6E3D               	movwf	_adcSampleMode,c
  7871                           
  7872                           ;AdcApp.c: 33: if (adcSampleMode == SINGLE_CHANNEL)
  7873  004058  043D               	decf	_adcSampleMode,w,c
  7874  00405A  A4D8               	btfss	status,2,c
  7875  00405C  D009               	goto	l122
  7876                           
  7877                           ;AdcApp.c: 34: {
  7878                           ;AdcApp.c: 35: channel = data[1];
  7879  00405E  EE20 F001          	lfsr	2,1
  7880  004062  502C               	movf	SetChannelMode@data,w,c
  7881  004064  26D9               	addwf	fsr2l,f,c
  7882  004066  502D               	movf	SetChannelMode@data+1,w,c
  7883  004068  22DA               	addwfc	fsr2h,f,c
  7884  00406A  50DF               	movf	indf2,w,c
  7885  00406C  0100               	movlb	0	; () banked
  7886  00406E  6FF6               	movwf	_channel& (0+255),b
  7887  004070                     l122:
  7888                           
  7889                           ;AdcApp.c: 36: }
  7890                           ;AdcApp.c: 37: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_CHANNEL_MODE);
  7891                           
  7892                           ; BSR set to: 0
  7893  004070  0E32               	movlw	50
  7894  004072  6E24               	movwf	SendAckMessage@inRequest,c
  7895  004074  0E03               	movlw	3
  7896  004076  ECAF  F01D         	call	_SendAckMessage
  7897  00407A  0012               	return		;funcret
  7898  00407C                     __end_of_SetChannelMode:
  7899                           	opt stack 0
  7900                           tosu	equ	0xFFF
  7901                           tosh	equ	0xFFE
  7902                           tosl	equ	0xFFD
  7903                           pclath	equ	0xFFA
  7904                           tblptru	equ	0xFF8
  7905                           tblptrh	equ	0xFF7
  7906                           tblptrl	equ	0xFF6
  7907                           tablat	equ	0xFF5
  7908                           prodh	equ	0xFF4
  7909                           prodl	equ	0xFF3
  7910                           postinc0	equ	0xFEE
  7911                           plusw0	equ	0xFEB
  7912                           wreg	equ	0xFE8
  7913                           indf1	equ	0xFE7
  7914                           postdec1	equ	0xFE5
  7915                           fsr1h	equ	0xFE2
  7916                           fsr1l	equ	0xFE1
  7917                           indf2	equ	0xFDF
  7918                           postinc2	equ	0xFDE
  7919                           postdec2	equ	0xFDD
  7920                           plusw2	equ	0xFDB
  7921                           fsr2h	equ	0xFDA
  7922                           fsr2l	equ	0xFD9
  7923                           status	equ	0xFD8
  7924                           
  7925 ;; *************** function _EUSART1_Read *****************
  7926 ;; Defined at:
  7927 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  7928 ;; Parameters:    Size  Location     Type
  7929 ;;		None
  7930 ;; Auto vars:     Size  Location     Type
  7931 ;;  readValue       2   24[COMRAM] unsigned int 
  7932 ;; Return value:  Size  Location     Type
  7933 ;;                  1    wreg      unsigned char 
  7934 ;; Registers used:
  7935 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7936 ;; Tracked objects:
  7937 ;;		On entry : 0/0
  7938 ;;		On exit  : 0/0
  7939 ;;		Unchanged: 0/0
  7940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7941 ;;      Params:         0       0       0       0       0       0       0
  7942 ;;      Locals:         2       0       0       0       0       0       0
  7943 ;;      Temps:          1       0       0       0       0       0       0
  7944 ;;      Totals:         3       0       0       0       0       0       0
  7945 ;;Total ram usage:        3 bytes
  7946 ;; Hardware stack levels used:    1
  7947 ;; Hardware stack levels required when called:    4
  7948 ;; This function calls:
  7949 ;;		Nothing
  7950 ;; This function is called by:
  7951 ;;		_readUartMessage
  7952 ;; This function uses a non-reentrant model
  7953 ;;
  7954                           
  7955                           	psect	text31
  7956  003BFE                     __ptext31:
  7957                           	opt stack 0
  7958  003BFE                     _EUSART1_Read:
  7959                           	opt stack 25
  7960                           
  7961                           ;eusart1.c: 112: uint16_t readValue = 0;
  7962                           
  7963                           ;incstack = 0
  7964  003BFE  0E00               	movlw	0
  7965  003C00  6E1A               	movwf	EUSART1_Read@readValue+1,c
  7966  003C02  0E00               	movlw	0
  7967  003C04  6E19               	movwf	EUSART1_Read@readValue,c
  7968                           
  7969                           ;eusart1.c: 119: if (eusart1RxCount == 0)
  7970  003C06  0100               	movlb	0	; () banked
  7971  003C08  51F5               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  7972  003C0A  A4D8               	btfss	status,2,c
  7973  003C0C  D002               	goto	l899
  7974                           
  7975                           ; BSR set to: 0
  7976                           ;eusart1.c: 120: {
  7977                           ;eusart1.c: 121: return readValue;
  7978  003C0E  5019               	movf	EUSART1_Read@readValue,w,c
  7979                           
  7980                           ; BSR set to: 0
  7981  003C10  0012               	return	
  7982  003C12                     l899:
  7983                           
  7984                           ; BSR set to: 0
  7985                           ;eusart1.c: 122: }
  7986                           ;eusart1.c: 124: readValue = eusart1RxBuffer[eusart1RxTail++];
  7987                           
  7988                           ; BSR set to: 0
  7989  003C12  5033               	movf	_eusart1RxTail,w,c	;volatile
  7990  003C14  0D01               	mullw	1
  7991  003C16  0E00               	movlw	low _eusart1RxBuffer
  7992  003C18  24F3               	addwf	prodl,w,c
  7993  003C1A  6ED9               	movwf	fsr2l,c
  7994  003C1C  0E01               	movlw	high _eusart1RxBuffer
  7995  003C1E  20F4               	addwfc	prodh,w,c
  7996  003C20  6EDA               	movwf	fsr2h,c
  7997  003C22  50DF               	movf	indf2,w,c
  7998  003C24  6E18               	movwf	??_EUSART1_Read& (0+255),c
  7999  003C26  5018               	movf	??_EUSART1_Read,w,c
  8000  003C28  6E19               	movwf	EUSART1_Read@readValue,c
  8001  003C2A  6A1A               	clrf	EUSART1_Read@readValue+1,c
  8002                           
  8003                           ; BSR set to: 0
  8004  003C2C  2A33               	incf	_eusart1RxTail,f,c	;volatile
  8005                           
  8006                           ; BSR set to: 0
  8007                           ;eusart1.c: 125: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
  8008  003C2E  0E27               	movlw	39
  8009  003C30  6433               	cpfsgt	_eusart1RxTail,c	;volatile
  8010  003C32  D002               	goto	l901
  8011                           
  8012                           ; BSR set to: 0
  8013                           ;eusart1.c: 126: {
  8014                           ;eusart1.c: 127: eusart1RxTail = 0;
  8015  003C34  0E00               	movlw	0
  8016  003C36  6E33               	movwf	_eusart1RxTail,c	;volatile
  8017  003C38                     l901:
  8018                           
  8019                           ; BSR set to: 0
  8020                           ;eusart1.c: 128: }
  8021                           ;eusart1.c: 129: PIE1bits.RC1IE = 0;
  8022                           
  8023                           ; BSR set to: 0
  8024  003C38  9A9D               	bcf	3997,5,c	;volatile
  8025                           
  8026                           ; BSR set to: 0
  8027                           ;eusart1.c: 130: eusart1RxCount--;
  8028  003C3A  07F5               	decf	_eusart1RxCount& (0+255),f,b	;volatile
  8029                           
  8030                           ; BSR set to: 0
  8031                           ;eusart1.c: 131: PIE1bits.RC1IE = 1;
  8032  003C3C  8A9D               	bsf	3997,5,c	;volatile
  8033                           
  8034                           ; BSR set to: 0
  8035                           ;eusart1.c: 133: return readValue;
  8036  003C3E  5019               	movf	EUSART1_Read@readValue,w,c
  8037  003C40  0012               	return	
  8038  003C42                     __end_of_EUSART1_Read:
  8039                           	opt stack 0
  8040                           tosu	equ	0xFFF
  8041                           tosh	equ	0xFFE
  8042                           tosl	equ	0xFFD
  8043                           pclath	equ	0xFFA
  8044                           tblptru	equ	0xFF8
  8045                           tblptrh	equ	0xFF7
  8046                           tblptrl	equ	0xFF6
  8047                           tablat	equ	0xFF5
  8048                           prodh	equ	0xFF4
  8049                           prodl	equ	0xFF3
  8050                           postinc0	equ	0xFEE
  8051                           plusw0	equ	0xFEB
  8052                           wreg	equ	0xFE8
  8053                           indf1	equ	0xFE7
  8054                           postdec1	equ	0xFE5
  8055                           fsr1h	equ	0xFE2
  8056                           fsr1l	equ	0xFE1
  8057                           indf2	equ	0xFDF
  8058                           postinc2	equ	0xFDE
  8059                           postdec2	equ	0xFDD
  8060                           plusw2	equ	0xFDB
  8061                           fsr2h	equ	0xFDA
  8062                           fsr2l	equ	0xFD9
  8063                           status	equ	0xFD8
  8064                           
  8065 ;; *************** function _keepAliveSignalUart *****************
  8066 ;; Defined at:
  8067 ;;		line 93 in file "SystemStatus.c"
  8068 ;; Parameters:    Size  Location     Type
  8069 ;;		None
  8070 ;; Auto vars:     Size  Location     Type
  8071 ;;		None
  8072 ;; Return value:  Size  Location     Type
  8073 ;;                  1    wreg      void 
  8074 ;; Registers used:
  8075 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8076 ;; Tracked objects:
  8077 ;;		On entry : 0/0
  8078 ;;		On exit  : 0/0
  8079 ;;		Unchanged: 0/0
  8080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8081 ;;      Params:         0       0       0       0       0       0       0
  8082 ;;      Locals:         0       0       0       0       0       0       0
  8083 ;;      Temps:          0       0       0       0       0       0       0
  8084 ;;      Totals:         0       0       0       0       0       0       0
  8085 ;;Total ram usage:        0 bytes
  8086 ;; Hardware stack levels used:    1
  8087 ;; Hardware stack levels required when called:    7
  8088 ;; This function calls:
  8089 ;;		_SendAckMessage
  8090 ;; This function is called by:
  8091 ;;		_main
  8092 ;; This function uses a non-reentrant model
  8093 ;;
  8094                           
  8095                           	psect	text32
  8096  004408                     __ptext32:
  8097                           	opt stack 0
  8098  004408                     _keepAliveSignalUart:
  8099                           	opt stack 23
  8100                           
  8101                           ;SystemStatus.c: 95: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_KEEP_A
      +                          LIVE);
  8102                           
  8103                           ; BSR set to: 0
  8104                           ;incstack = 0
  8105  004408  0E15               	movlw	21
  8106  00440A  6E24               	movwf	SendAckMessage@inRequest,c
  8107  00440C  0E01               	movlw	1
  8108  00440E  ECAF  F01D         	call	_SendAckMessage
  8109  004412  0012               	return		;funcret
  8110  004414                     __end_of_keepAliveSignalUart:
  8111                           	opt stack 0
  8112                           tosu	equ	0xFFF
  8113                           tosh	equ	0xFFE
  8114                           tosl	equ	0xFFD
  8115                           pclath	equ	0xFFA
  8116                           tblptru	equ	0xFF8
  8117                           tblptrh	equ	0xFF7
  8118                           tblptrl	equ	0xFF6
  8119                           tablat	equ	0xFF5
  8120                           prodh	equ	0xFF4
  8121                           prodl	equ	0xFF3
  8122                           postinc0	equ	0xFEE
  8123                           plusw0	equ	0xFEB
  8124                           wreg	equ	0xFE8
  8125                           indf1	equ	0xFE7
  8126                           postdec1	equ	0xFE5
  8127                           fsr1h	equ	0xFE2
  8128                           fsr1l	equ	0xFE1
  8129                           indf2	equ	0xFDF
  8130                           postinc2	equ	0xFDE
  8131                           postdec2	equ	0xFDD
  8132                           plusw2	equ	0xFDB
  8133                           fsr2h	equ	0xFDA
  8134                           fsr2l	equ	0xFD9
  8135                           status	equ	0xFD8
  8136                           
  8137 ;; *************** function _keepAliveSignalLed *****************
  8138 ;; Defined at:
  8139 ;;		line 35 in file "LedsApp.c"
  8140 ;; Parameters:    Size  Location     Type
  8141 ;;		None
  8142 ;; Auto vars:     Size  Location     Type
  8143 ;;		None
  8144 ;; Return value:  Size  Location     Type
  8145 ;;                  1    wreg      void 
  8146 ;; Registers used:
  8147 ;;		wreg, status,2, status,0
  8148 ;; Tracked objects:
  8149 ;;		On entry : 0/0
  8150 ;;		On exit  : 0/0
  8151 ;;		Unchanged: 0/0
  8152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8153 ;;      Params:         0       0       0       0       0       0       0
  8154 ;;      Locals:         0       0       0       0       0       0       0
  8155 ;;      Temps:          1       0       0       0       0       0       0
  8156 ;;      Totals:         1       0       0       0       0       0       0
  8157 ;;Total ram usage:        1 bytes
  8158 ;; Hardware stack levels used:    1
  8159 ;; Hardware stack levels required when called:    4
  8160 ;; This function calls:
  8161 ;;		Nothing
  8162 ;; This function is called by:
  8163 ;;		_main
  8164 ;; This function uses a non-reentrant model
  8165 ;;
  8166                           
  8167                           	psect	text33
  8168  00431E                     __ptext33:
  8169                           	opt stack 0
  8170  00431E                     _keepAliveSignalLed:
  8171                           	opt stack 26
  8172                           
  8173                           ;LedsApp.c: 37: LATCbits.LATC0 = !LATCbits.LATC0;
  8174                           
  8175                           ;incstack = 0
  8176  00431E  B08B               	btfsc	3979,0,c	;volatile
  8177  004320  D003               	goto	u5860
  8178  004322  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  8179  004324  2A18               	incf	??_keepAliveSignalLed& (0+255),f,c
  8180  004326  D001               	goto	u5878
  8181  004328                     u5860:
  8182  004328  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  8183  00432A                     u5878:
  8184  00432A  508B               	movf	3979,w,c	;volatile
  8185  00432C  1818               	xorwf	??_keepAliveSignalLed,w,c
  8186  00432E  0BFE               	andlw	-2
  8187  004330  1818               	xorwf	??_keepAliveSignalLed,w,c
  8188  004332  6E8B               	movwf	3979,c	;volatile
  8189  004334  0012               	return		;funcret
  8190  004336                     __end_of_keepAliveSignalLed:
  8191                           	opt stack 0
  8192                           tosu	equ	0xFFF
  8193                           tosh	equ	0xFFE
  8194                           tosl	equ	0xFFD
  8195                           pclath	equ	0xFFA
  8196                           tblptru	equ	0xFF8
  8197                           tblptrh	equ	0xFF7
  8198                           tblptrl	equ	0xFF6
  8199                           tablat	equ	0xFF5
  8200                           prodh	equ	0xFF4
  8201                           prodl	equ	0xFF3
  8202                           postinc0	equ	0xFEE
  8203                           plusw0	equ	0xFEB
  8204                           wreg	equ	0xFE8
  8205                           indf1	equ	0xFE7
  8206                           postdec1	equ	0xFE5
  8207                           fsr1h	equ	0xFE2
  8208                           fsr1l	equ	0xFE1
  8209                           indf2	equ	0xFDF
  8210                           postinc2	equ	0xFDE
  8211                           postdec2	equ	0xFDD
  8212                           plusw2	equ	0xFDB
  8213                           fsr2h	equ	0xFDA
  8214                           fsr2l	equ	0xFD9
  8215                           status	equ	0xFD8
  8216                           
  8217 ;; *************** function _SynthLdDetect *****************
  8218 ;; Defined at:
  8219 ;;		line 217 in file "SyntApp.c"
  8220 ;; Parameters:    Size  Location     Type
  8221 ;;		None
  8222 ;; Auto vars:     Size  Location     Type
  8223 ;;		None
  8224 ;; Return value:  Size  Location     Type
  8225 ;;                  1    wreg      void 
  8226 ;; Registers used:
  8227 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8228 ;; Tracked objects:
  8229 ;;		On entry : 0/0
  8230 ;;		On exit  : 0/0
  8231 ;;		Unchanged: 0/0
  8232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8233 ;;      Params:         0       0       0       0       0       0       0
  8234 ;;      Locals:         0       0       0       0       0       0       0
  8235 ;;      Temps:          0       0       0       0       0       0       0
  8236 ;;      Totals:         0       0       0       0       0       0       0
  8237 ;;Total ram usage:        0 bytes
  8238 ;; Hardware stack levels used:    1
  8239 ;; Hardware stack levels required when called:   11
  8240 ;; This function calls:
  8241 ;;		_BlinkErrorLeds
  8242 ;;		_InitSynth
  8243 ;;		___awmod
  8244 ;; This function is called by:
  8245 ;;		_main
  8246 ;; This function uses a non-reentrant model
  8247 ;;
  8248                           
  8249                           	psect	text34
  8250  002A78                     __ptext34:
  8251                           	opt stack 0
  8252  002A78                     _SynthLdDetect:
  8253                           	opt stack 19
  8254                           
  8255                           ;SyntApp.c: 221: if(PORTDbits.RD4 == 0)
  8256                           
  8257                           ;incstack = 0
  8258  002A78  B883               	btfsc	3971,4,c	;volatile
  8259  002A7A  D01E               	goto	l561
  8260                           
  8261                           ;SyntApp.c: 222: {
  8262                           ;SyntApp.c: 223: if(synthLdRxCnt > 0)
  8263  002A7C  5043               	movf	_synthLdRxCnt,w,c
  8264  002A7E  0A80               	xorlw	128
  8265  002A80  0F7F               	addlw	-129
  8266  002A82  A0D8               	btfss	status,0,c
  8267  002A84  D005               	goto	l562
  8268                           
  8269                           ;SyntApp.c: 224: {
  8270                           ;SyntApp.c: 225: InitSynth(SYNTH_RX);
  8271  002A86  0E01               	movlw	1
  8272  002A88  ECA3  F006         	call	_InitSynth
  8273                           
  8274                           ;SyntApp.c: 226: synthLdRxCnt--;
  8275  002A8C  0643               	decf	_synthLdRxCnt,f,c
  8276                           
  8277                           ;SyntApp.c: 227: }
  8278  002A8E  D003               	goto	l563
  8279  002A90                     l562:
  8280                           
  8281                           ;SyntApp.c: 228: else
  8282                           ;SyntApp.c: 229: {
  8283                           ;SyntApp.c: 230: BlinkErrorLeds(FAIL_SYNTH_RX_LATCH);
  8284  002A90  0E03               	movlw	3
  8285  002A92  ECF3  F01B         	call	_BlinkErrorLeds
  8286  002A96                     l563:
  8287                           
  8288                           ;SyntApp.c: 231: }
  8289                           ;SyntApp.c: 232: synthLdRxArray[synthLdRxArrayCnt++ % 12] = UNLOCK;
  8290  002A96  C038  F018         	movff	_synthLdRxArrayCnt,___awmod@dividend
  8291  002A9A  6A19               	clrf	___awmod@dividend+1,c
  8292  002A9C  0E00               	movlw	0
  8293  002A9E  6E1B               	movwf	___awmod@divisor+1,c
  8294  002AA0  0E0C               	movlw	12
  8295  002AA2  6E1A               	movwf	___awmod@divisor,c
  8296  002AA4  ECED  F01A         	call	___awmod	;wreg free
  8297  002AA8  0EB0               	movlw	low _synthLdRxArray
  8298  002AAA  2418               	addwf	?___awmod,w,c
  8299  002AAC  6ED9               	movwf	fsr2l,c
  8300  002AAE  0E01               	movlw	high _synthLdRxArray
  8301  002AB0  2019               	addwfc	?___awmod+1,w,c
  8302  002AB2  6EDA               	movwf	fsr2h,c
  8303  002AB4  0E00               	movlw	0
  8304  002AB6  D012               	goto	L3
  8305  002AB8                     l561:
  8306                           
  8307                           ;SyntApp.c: 234: else
  8308                           ;SyntApp.c: 235: {
  8309                           ;SyntApp.c: 236: synthLdRxCnt = 2;
  8310  002AB8  0E02               	movlw	2
  8311  002ABA  6E43               	movwf	_synthLdRxCnt,c
  8312                           
  8313                           ;SyntApp.c: 237: synthLdRxArray[synthLdRxArrayCnt++ % 12] = LOCK;
  8314  002ABC  C038  F018         	movff	_synthLdRxArrayCnt,___awmod@dividend
  8315  002AC0  6A19               	clrf	___awmod@dividend+1,c
  8316  002AC2  0E00               	movlw	0
  8317  002AC4  6E1B               	movwf	___awmod@divisor+1,c
  8318  002AC6  0E0C               	movlw	12
  8319  002AC8  6E1A               	movwf	___awmod@divisor,c
  8320  002ACA  ECED  F01A         	call	___awmod	;wreg free
  8321  002ACE  0EB0               	movlw	low _synthLdRxArray
  8322  002AD0  2418               	addwf	?___awmod,w,c
  8323  002AD2  6ED9               	movwf	fsr2l,c
  8324  002AD4  0E01               	movlw	high _synthLdRxArray
  8325  002AD6  2019               	addwfc	?___awmod+1,w,c
  8326  002AD8  6EDA               	movwf	fsr2h,c
  8327  002ADA  0E01               	movlw	1
  8328  002ADC                     L3:
  8329  002ADC  6EDF               	movwf	indf2,c
  8330  002ADE  2A38               	incf	_synthLdRxArrayCnt,f,c
  8331                           
  8332                           ;SyntApp.c: 238: }
  8333                           ;SyntApp.c: 243: if(PORTDbits.RD1 == 0)
  8334  002AE0  B283               	btfsc	3971,1,c	;volatile
  8335  002AE2  D020               	goto	l565
  8336                           
  8337                           ;SyntApp.c: 244: {
  8338                           ;SyntApp.c: 245: if(synthLdTxCnt > 0)
  8339  002AE4  5042               	movf	_synthLdTxCnt,w,c
  8340  002AE6  0A80               	xorlw	128
  8341  002AE8  0F7F               	addlw	-129
  8342  002AEA  A0D8               	btfss	status,0,c
  8343  002AEC  D005               	goto	l566
  8344                           
  8345                           ;SyntApp.c: 246: {
  8346                           ;SyntApp.c: 247: InitSynth(SYNTH_TX);
  8347  002AEE  0E00               	movlw	0
  8348  002AF0  ECA3  F006         	call	_InitSynth
  8349                           
  8350                           ;SyntApp.c: 248: synthLdTxCnt--;
  8351  002AF4  0642               	decf	_synthLdTxCnt,f,c
  8352                           
  8353                           ;SyntApp.c: 249: }
  8354  002AF6  D003               	goto	l567
  8355  002AF8                     l566:
  8356                           
  8357                           ;SyntApp.c: 250: else
  8358                           ;SyntApp.c: 251: {
  8359                           ;SyntApp.c: 252: BlinkErrorLeds(FAIL_SYNTH_TX_LATCH);
  8360  002AF8  0E04               	movlw	4
  8361  002AFA  ECF3  F01B         	call	_BlinkErrorLeds
  8362  002AFE                     l567:
  8363                           
  8364                           ;SyntApp.c: 253: }
  8365                           ;SyntApp.c: 254: synthLdTxArray[synthLdTxArrayCnt++ % 12] = UNLOCK;
  8366  002AFE  C037  F018         	movff	_synthLdTxArrayCnt,___awmod@dividend
  8367  002B02  6A19               	clrf	___awmod@dividend+1,c
  8368  002B04  0E00               	movlw	0
  8369  002B06  6E1B               	movwf	___awmod@divisor+1,c
  8370  002B08  0E0C               	movlw	12
  8371  002B0A  6E1A               	movwf	___awmod@divisor,c
  8372  002B0C  ECED  F01A         	call	___awmod	;wreg free
  8373  002B10  0EA4               	movlw	low _synthLdTxArray
  8374  002B12  2418               	addwf	?___awmod,w,c
  8375  002B14  6ED9               	movwf	fsr2l,c
  8376  002B16  0E01               	movlw	high _synthLdTxArray
  8377  002B18  2019               	addwfc	?___awmod+1,w,c
  8378  002B1A  6EDA               	movwf	fsr2h,c
  8379  002B1C  0E00               	movlw	0
  8380  002B1E  6EDF               	movwf	indf2,c
  8381  002B20  2A37               	incf	_synthLdTxArrayCnt,f,c
  8382                           
  8383                           ;SyntApp.c: 255: }
  8384  002B22  0012               	return	
  8385  002B24                     l565:
  8386                           
  8387                           ;SyntApp.c: 256: else
  8388                           ;SyntApp.c: 257: {
  8389                           ;SyntApp.c: 258: synthLdTxCnt = 2;
  8390  002B24  0E02               	movlw	2
  8391  002B26  6E42               	movwf	_synthLdTxCnt,c
  8392                           
  8393                           ;SyntApp.c: 259: synthLdTxArray[synthLdTxArrayCnt++ % 12] = LOCK;
  8394  002B28  C037  F018         	movff	_synthLdTxArrayCnt,___awmod@dividend
  8395  002B2C  6A19               	clrf	___awmod@dividend+1,c
  8396  002B2E  0E00               	movlw	0
  8397  002B30  6E1B               	movwf	___awmod@divisor+1,c
  8398  002B32  0E0C               	movlw	12
  8399  002B34  6E1A               	movwf	___awmod@divisor,c
  8400  002B36  ECED  F01A         	call	___awmod	;wreg free
  8401  002B3A  0EA4               	movlw	low _synthLdTxArray
  8402  002B3C  2418               	addwf	?___awmod,w,c
  8403  002B3E  6ED9               	movwf	fsr2l,c
  8404  002B40  0E01               	movlw	high _synthLdTxArray
  8405  002B42  2019               	addwfc	?___awmod+1,w,c
  8406  002B44  6EDA               	movwf	fsr2h,c
  8407  002B46  0E01               	movlw	1
  8408  002B48  6EDF               	movwf	indf2,c
  8409  002B4A  2A37               	incf	_synthLdTxArrayCnt,f,c
  8410  002B4C  0012               	return	
  8411  002B4E                     __end_of_SynthLdDetect:
  8412                           	opt stack 0
  8413                           tosu	equ	0xFFF
  8414                           tosh	equ	0xFFE
  8415                           tosl	equ	0xFFD
  8416                           pclath	equ	0xFFA
  8417                           tblptru	equ	0xFF8
  8418                           tblptrh	equ	0xFF7
  8419                           tblptrl	equ	0xFF6
  8420                           tablat	equ	0xFF5
  8421                           prodh	equ	0xFF4
  8422                           prodl	equ	0xFF3
  8423                           postinc0	equ	0xFEE
  8424                           plusw0	equ	0xFEB
  8425                           wreg	equ	0xFE8
  8426                           indf1	equ	0xFE7
  8427                           postdec1	equ	0xFE5
  8428                           fsr1h	equ	0xFE2
  8429                           fsr1l	equ	0xFE1
  8430                           indf2	equ	0xFDF
  8431                           postinc2	equ	0xFDE
  8432                           postdec2	equ	0xFDD
  8433                           plusw2	equ	0xFDB
  8434                           fsr2h	equ	0xFDA
  8435                           fsr2l	equ	0xFD9
  8436                           status	equ	0xFD8
  8437                           
  8438 ;; *************** function ___awmod *****************
  8439 ;; Defined at:
  8440 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  8441 ;; Parameters:    Size  Location     Type
  8442 ;;  dividend        2   23[COMRAM] int 
  8443 ;;  divisor         2   25[COMRAM] int 
  8444 ;; Auto vars:     Size  Location     Type
  8445 ;;  sign            1   28[COMRAM] unsigned char 
  8446 ;;  counter         1   27[COMRAM] unsigned char 
  8447 ;; Return value:  Size  Location     Type
  8448 ;;                  2   23[COMRAM] int 
  8449 ;; Registers used:
  8450 ;;		wreg, status,2, status,0
  8451 ;; Tracked objects:
  8452 ;;		On entry : 0/0
  8453 ;;		On exit  : 0/0
  8454 ;;		Unchanged: 0/0
  8455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8456 ;;      Params:         4       0       0       0       0       0       0
  8457 ;;      Locals:         2       0       0       0       0       0       0
  8458 ;;      Temps:          0       0       0       0       0       0       0
  8459 ;;      Totals:         6       0       0       0       0       0       0
  8460 ;;Total ram usage:        6 bytes
  8461 ;; Hardware stack levels used:    1
  8462 ;; Hardware stack levels required when called:    4
  8463 ;; This function calls:
  8464 ;;		Nothing
  8465 ;; This function is called by:
  8466 ;;		_SynthLdDetect
  8467 ;; This function uses a non-reentrant model
  8468 ;;
  8469                           
  8470                           	psect	text35
  8471  0035DA                     __ptext35:
  8472                           	opt stack 0
  8473  0035DA                     ___awmod:
  8474                           	opt stack 25
  8475                           
  8476                           ;incstack = 0
  8477  0035DA  0E00               	movlw	0
  8478  0035DC  6E1D               	movwf	___awmod@sign,c
  8479  0035DE  AE19               	btfss	___awmod@dividend+1,7,c
  8480  0035E0  D006               	goto	l1781
  8481  0035E2  6C18               	negf	___awmod@dividend,c
  8482  0035E4  1E19               	comf	___awmod@dividend+1,f,c
  8483  0035E6  B0D8               	btfsc	status,0,c
  8484  0035E8  2A19               	incf	___awmod@dividend+1,f,c
  8485  0035EA  0E01               	movlw	1
  8486  0035EC  6E1D               	movwf	___awmod@sign,c
  8487  0035EE                     l1781:
  8488  0035EE  AE1B               	btfss	___awmod@divisor+1,7,c
  8489  0035F0  D004               	goto	l1782
  8490  0035F2  6C1A               	negf	___awmod@divisor,c
  8491  0035F4  1E1B               	comf	___awmod@divisor+1,f,c
  8492  0035F6  B0D8               	btfsc	status,0,c
  8493  0035F8  2A1B               	incf	___awmod@divisor+1,f,c
  8494  0035FA                     l1782:
  8495  0035FA  501A               	movf	___awmod@divisor,w,c
  8496  0035FC  101B               	iorwf	___awmod@divisor+1,w,c
  8497  0035FE  B4D8               	btfsc	status,2,c
  8498  003600  D018               	goto	l1789
  8499  003602  0E01               	movlw	1
  8500  003604  6E1C               	movwf	___awmod@counter,c
  8501  003606  D004               	goto	l1784
  8502  003608  90D8               	bcf	status,0,c
  8503  00360A  361A               	rlcf	___awmod@divisor,f,c
  8504  00360C  361B               	rlcf	___awmod@divisor+1,f,c
  8505  00360E  2A1C               	incf	___awmod@counter,f,c
  8506  003610                     l1784:
  8507  003610  AE1B               	btfss	___awmod@divisor+1,7,c
  8508  003612  D7FA               	goto	l1785
  8509  003614                     u5780:
  8510  003614  501A               	movf	___awmod@divisor,w,c
  8511  003616  5C18               	subwf	___awmod@dividend,w,c
  8512  003618  501B               	movf	___awmod@divisor+1,w,c
  8513  00361A  5819               	subwfb	___awmod@dividend+1,w,c
  8514  00361C  A0D8               	btfss	status,0,c
  8515  00361E  D004               	goto	l1788
  8516  003620  501A               	movf	___awmod@divisor,w,c
  8517  003622  5E18               	subwf	___awmod@dividend,f,c
  8518  003624  501B               	movf	___awmod@divisor+1,w,c
  8519  003626  5A19               	subwfb	___awmod@dividend+1,f,c
  8520  003628                     l1788:
  8521  003628  90D8               	bcf	status,0,c
  8522  00362A  321B               	rrcf	___awmod@divisor+1,f,c
  8523  00362C  321A               	rrcf	___awmod@divisor,f,c
  8524  00362E  2E1C               	decfsz	___awmod@counter,f,c
  8525  003630  D7F1               	goto	u5780
  8526  003632                     l1789:
  8527  003632  501D               	movf	___awmod@sign,w,c
  8528  003634  B4D8               	btfsc	status,2,c
  8529  003636  D004               	goto	l1790
  8530  003638  6C18               	negf	___awmod@dividend,c
  8531  00363A  1E19               	comf	___awmod@dividend+1,f,c
  8532  00363C  B0D8               	btfsc	status,0,c
  8533  00363E  2A19               	incf	___awmod@dividend+1,f,c
  8534  003640                     l1790:
  8535  003640  C018  F018         	movff	___awmod@dividend,?___awmod
  8536  003644  C019  F019         	movff	___awmod@dividend+1,?___awmod+1
  8537  003648  0012               	return	
  8538  00364A                     __end_of___awmod:
  8539                           	opt stack 0
  8540                           tosu	equ	0xFFF
  8541                           tosh	equ	0xFFE
  8542                           tosl	equ	0xFFD
  8543                           pclath	equ	0xFFA
  8544                           tblptru	equ	0xFF8
  8545                           tblptrh	equ	0xFF7
  8546                           tblptrl	equ	0xFF6
  8547                           tablat	equ	0xFF5
  8548                           prodh	equ	0xFF4
  8549                           prodl	equ	0xFF3
  8550                           postinc0	equ	0xFEE
  8551                           plusw0	equ	0xFEB
  8552                           wreg	equ	0xFE8
  8553                           indf1	equ	0xFE7
  8554                           postdec1	equ	0xFE5
  8555                           fsr1h	equ	0xFE2
  8556                           fsr1l	equ	0xFE1
  8557                           indf2	equ	0xFDF
  8558                           postinc2	equ	0xFDE
  8559                           postdec2	equ	0xFDD
  8560                           plusw2	equ	0xFDB
  8561                           fsr2h	equ	0xFDA
  8562                           fsr2l	equ	0xFD9
  8563                           status	equ	0xFD8
  8564                           
  8565 ;; *************** function _BlinkErrorLeds *****************
  8566 ;; Defined at:
  8567 ;;		line 13 in file "LedsApp.c"
  8568 ;; Parameters:    Size  Location     Type
  8569 ;;  state           1    wreg     enum E7598
  8570 ;; Auto vars:     Size  Location     Type
  8571 ;;  state           1   26[COMRAM] enum E7598
  8572 ;;  idx             2   27[COMRAM] int 
  8573 ;; Return value:  Size  Location     Type
  8574 ;;                  1    wreg      void 
  8575 ;; Registers used:
  8576 ;;		wreg, status,2, status,0
  8577 ;; Tracked objects:
  8578 ;;		On entry : 0/0
  8579 ;;		On exit  : 0/0
  8580 ;;		Unchanged: 0/0
  8581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8582 ;;      Params:         0       0       0       0       0       0       0
  8583 ;;      Locals:         3       0       0       0       0       0       0
  8584 ;;      Temps:          3       0       0       0       0       0       0
  8585 ;;      Totals:         6       0       0       0       0       0       0
  8586 ;;Total ram usage:        6 bytes
  8587 ;; Hardware stack levels used:    1
  8588 ;; Hardware stack levels required when called:    4
  8589 ;; This function calls:
  8590 ;;		Nothing
  8591 ;; This function is called by:
  8592 ;;		_SynthLdDetect
  8593 ;;		_main
  8594 ;; This function uses a non-reentrant model
  8595 ;;
  8596                           
  8597                           	psect	text36
  8598  0037E6                     __ptext36:
  8599                           	opt stack 0
  8600  0037E6                     _BlinkErrorLeds:
  8601                           	opt stack 25
  8602                           
  8603                           ;incstack = 0
  8604                           ;BlinkErrorLeds@state stored from wreg
  8605  0037E6  6E1B               	movwf	BlinkErrorLeds@state,c
  8606                           
  8607                           ;LedsApp.c: 15: for(int idx = 0; idx < state; idx++)
  8608  0037E8  0E00               	movlw	0
  8609  0037EA  6E1D               	movwf	BlinkErrorLeds@idx+1,c
  8610  0037EC  0E00               	movlw	0
  8611  0037EE  6E1C               	movwf	BlinkErrorLeds@idx,c
  8612  0037F0                     l6375:
  8613  0037F0  501B               	movf	BlinkErrorLeds@state,w,c
  8614  0037F2  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
  8615  0037F4  6A19               	clrf	(??_BlinkErrorLeds+1)& (0+255),c
  8616  0037F6  5018               	movf	??_BlinkErrorLeds,w,c
  8617  0037F8  5C1C               	subwf	BlinkErrorLeds@idx,w,c
  8618  0037FA  501D               	movf	BlinkErrorLeds@idx+1,w,c
  8619  0037FC  0A80               	xorlw	128
  8620  0037FE  6E1A               	movwf	(??_BlinkErrorLeds+2)& (0+255),c
  8621  003800  5019               	movf	??_BlinkErrorLeds+1,w,c
  8622  003802  0A80               	xorlw	128
  8623  003804  581A               	subwfb	(??_BlinkErrorLeds+2)& (0+255),w,c
  8624  003806  B0D8               	btfsc	status,0,c
  8625  003808  0012               	return	
  8626                           
  8627                           ;LedsApp.c: 16: {
  8628                           ;LedsApp.c: 17: LATBbits.LATB4 = 0;
  8629  00380A  988A               	bcf	3978,4,c	;volatile
  8630                           
  8631                           ;LedsApp.c: 18: _delay((unsigned long)((100)*(8000000/4000.0)));
  8632  00380C  0E02               	movlw	2
  8633  00380E  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
  8634  003810  0E04               	movlw	4
  8635  003812  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
  8636  003814  0EBA               	movlw	186
  8637  003816                     u9187:
  8638  003816  2EE8               	decfsz	wreg,f,c
  8639  003818  D7FE               	bra	u9187
  8640  00381A  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
  8641  00381C  D7FC               	bra	u9187
  8642  00381E  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
  8643  003820  D7FA               	bra	u9187
  8644  003822  D000               	nop2	
  8645                           
  8646                           ;LedsApp.c: 19: LATBbits.LATB4 = 1;
  8647  003824  888A               	bsf	3978,4,c	;volatile
  8648                           
  8649                           ;LedsApp.c: 20: _delay((unsigned long)((100)*(8000000/4000.0)));
  8650  003826  0E02               	movlw	2
  8651  003828  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
  8652  00382A  0E04               	movlw	4
  8653  00382C  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
  8654  00382E  0EBA               	movlw	186
  8655  003830                     u9197:
  8656  003830  2EE8               	decfsz	wreg,f,c
  8657  003832  D7FE               	bra	u9197
  8658  003834  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
  8659  003836  D7FC               	bra	u9197
  8660  003838  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
  8661  00383A  D7FA               	bra	u9197
  8662  00383C  D000               	nop2	
  8663  00383E  4A1C               	infsnz	BlinkErrorLeds@idx,f,c
  8664  003840  2A1D               	incf	BlinkErrorLeds@idx+1,f,c
  8665  003842  D7D6               	goto	l6375
  8666  003844                     __end_of_BlinkErrorLeds:
  8667                           	opt stack 0
  8668                           tosu	equ	0xFFF
  8669                           tosh	equ	0xFFE
  8670                           tosl	equ	0xFFD
  8671                           pclath	equ	0xFFA
  8672                           tblptru	equ	0xFF8
  8673                           tblptrh	equ	0xFF7
  8674                           tblptrl	equ	0xFF6
  8675                           tablat	equ	0xFF5
  8676                           prodh	equ	0xFF4
  8677                           prodl	equ	0xFF3
  8678                           postinc0	equ	0xFEE
  8679                           plusw0	equ	0xFEB
  8680                           wreg	equ	0xFE8
  8681                           indf1	equ	0xFE7
  8682                           postdec1	equ	0xFE5
  8683                           fsr1h	equ	0xFE2
  8684                           fsr1l	equ	0xFE1
  8685                           indf2	equ	0xFDF
  8686                           postinc2	equ	0xFDE
  8687                           postdec2	equ	0xFDD
  8688                           plusw2	equ	0xFDB
  8689                           fsr2h	equ	0xFDA
  8690                           fsr2l	equ	0xFD9
  8691                           status	equ	0xFD8
  8692                           
  8693 ;; *************** function _SetMcuSystem *****************
  8694 ;; Defined at:
  8695 ;;		line 11 in file "SystemSettings.c"
  8696 ;; Parameters:    Size  Location     Type
  8697 ;;		None
  8698 ;; Auto vars:     Size  Location     Type
  8699 ;;		None
  8700 ;; Return value:  Size  Location     Type
  8701 ;;                  1    wreg      void 
  8702 ;; Registers used:
  8703 ;;		wreg, status,2, status,0, cstack
  8704 ;; Tracked objects:
  8705 ;;		On entry : 0/0
  8706 ;;		On exit  : 0/0
  8707 ;;		Unchanged: 0/0
  8708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8709 ;;      Params:         0       0       0       0       0       0       0
  8710 ;;      Locals:         0       0       0       0       0       0       0
  8711 ;;      Temps:          0       0       0       0       0       0       0
  8712 ;;      Totals:         0       0       0       0       0       0       0
  8713 ;;Total ram usage:        0 bytes
  8714 ;; Hardware stack levels used:    1
  8715 ;; Hardware stack levels required when called:    7
  8716 ;; This function calls:
  8717 ;;		_SYSTEM_Initialize
  8718 ;; This function is called by:
  8719 ;;		_main
  8720 ;; This function uses a non-reentrant model
  8721 ;;
  8722                           
  8723                           	psect	text37
  8724  004420                     __ptext37:
  8725                           	opt stack 0
  8726  004420                     _SetMcuSystem:
  8727                           	opt stack 23
  8728                           
  8729                           ;SystemSettings.c: 14: SYSTEM_Initialize();
  8730                           
  8731                           ;incstack = 0
  8732  004420  EC82  F021         	call	_SYSTEM_Initialize	;wreg free
  8733                           
  8734                           ;SystemSettings.c: 21: (INTCONbits.GIE = 1);
  8735  004424  8EF2               	bsf	intcon,7,c	;volatile
  8736                           
  8737                           ;SystemSettings.c: 27: (INTCONbits.PEIE = 1);
  8738  004426  8CF2               	bsf	intcon,6,c	;volatile
  8739  004428  0012               	return		;funcret
  8740  00442A                     __end_of_SetMcuSystem:
  8741                           	opt stack 0
  8742                           tosu	equ	0xFFF
  8743                           tosh	equ	0xFFE
  8744                           tosl	equ	0xFFD
  8745                           pclath	equ	0xFFA
  8746                           tblptru	equ	0xFF8
  8747                           tblptrh	equ	0xFF7
  8748                           tblptrl	equ	0xFF6
  8749                           tablat	equ	0xFF5
  8750                           prodh	equ	0xFF4
  8751                           prodl	equ	0xFF3
  8752                           intcon	equ	0xFF2
  8753                           postinc0	equ	0xFEE
  8754                           plusw0	equ	0xFEB
  8755                           wreg	equ	0xFE8
  8756                           indf1	equ	0xFE7
  8757                           postdec1	equ	0xFE5
  8758                           fsr1h	equ	0xFE2
  8759                           fsr1l	equ	0xFE1
  8760                           indf2	equ	0xFDF
  8761                           postinc2	equ	0xFDE
  8762                           postdec2	equ	0xFDD
  8763                           plusw2	equ	0xFDB
  8764                           fsr2h	equ	0xFDA
  8765                           fsr2l	equ	0xFD9
  8766                           status	equ	0xFD8
  8767                           
  8768 ;; *************** function _SYSTEM_Initialize *****************
  8769 ;; Defined at:
  8770 ;;		line 112 in file "mcc_generated_files/mcc.c"
  8771 ;; Parameters:    Size  Location     Type
  8772 ;;		None
  8773 ;; Auto vars:     Size  Location     Type
  8774 ;;		None
  8775 ;; Return value:  Size  Location     Type
  8776 ;;                  1    wreg      void 
  8777 ;; Registers used:
  8778 ;;		wreg, status,2, status,0, cstack
  8779 ;; Tracked objects:
  8780 ;;		On entry : 0/0
  8781 ;;		On exit  : 0/0
  8782 ;;		Unchanged: 0/0
  8783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8784 ;;      Params:         0       0       0       0       0       0       0
  8785 ;;      Locals:         0       0       0       0       0       0       0
  8786 ;;      Temps:          0       0       0       0       0       0       0
  8787 ;;      Totals:         0       0       0       0       0       0       0
  8788 ;;Total ram usage:        0 bytes
  8789 ;; Hardware stack levels used:    1
  8790 ;; Hardware stack levels required when called:    6
  8791 ;; This function calls:
  8792 ;;		_ADC_Initialize
  8793 ;;		_EUSART1_Initialize
  8794 ;;		_INTERRUPT_Initialize
  8795 ;;		_OSCILLATOR_Initialize
  8796 ;;		_PIN_MANAGER_Initialize
  8797 ;;		_TMR0_Initialize
  8798 ;; This function is called by:
  8799 ;;		_SetMcuSystem
  8800 ;; This function uses a non-reentrant model
  8801 ;;
  8802                           
  8803                           	psect	text38
  8804  004304                     __ptext38:
  8805                           	opt stack 0
  8806  004304                     _SYSTEM_Initialize:
  8807                           	opt stack 23
  8808                           
  8809                           ;mcc.c: 114: INTERRUPT_Initialize();
  8810                           
  8811                           ;incstack = 0
  8812  004304  EC30  F022         	call	_INTERRUPT_Initialize	;wreg free
  8813                           
  8814                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  8815  004308  ECC1  F01B         	call	_PIN_MANAGER_Initialize	;wreg free
  8816                           
  8817                           ;mcc.c: 116: OSCILLATOR_Initialize();
  8818  00430C  ECEF  F021         	call	_OSCILLATOR_Initialize	;wreg free
  8819                           
  8820                           ;mcc.c: 117: TMR0_Initialize();
  8821  004310  ECDA  F01F         	call	_TMR0_Initialize	;wreg free
  8822                           
  8823                           ;mcc.c: 118: ADC_Initialize();
  8824  004314  EC9B  F021         	call	_ADC_Initialize	;wreg free
  8825                           
  8826                           ;mcc.c: 119: EUSART1_Initialize();
  8827  004318  EC1A  F01F         	call	_EUSART1_Initialize	;wreg free
  8828  00431C  0012               	return		;funcret
  8829  00431E                     __end_of_SYSTEM_Initialize:
  8830                           	opt stack 0
  8831                           tosu	equ	0xFFF
  8832                           tosh	equ	0xFFE
  8833                           tosl	equ	0xFFD
  8834                           pclath	equ	0xFFA
  8835                           tblptru	equ	0xFF8
  8836                           tblptrh	equ	0xFF7
  8837                           tblptrl	equ	0xFF6
  8838                           tablat	equ	0xFF5
  8839                           prodh	equ	0xFF4
  8840                           prodl	equ	0xFF3
  8841                           intcon	equ	0xFF2
  8842                           postinc0	equ	0xFEE
  8843                           plusw0	equ	0xFEB
  8844                           wreg	equ	0xFE8
  8845                           indf1	equ	0xFE7
  8846                           postdec1	equ	0xFE5
  8847                           fsr1h	equ	0xFE2
  8848                           fsr1l	equ	0xFE1
  8849                           indf2	equ	0xFDF
  8850                           postinc2	equ	0xFDE
  8851                           postdec2	equ	0xFDD
  8852                           plusw2	equ	0xFDB
  8853                           fsr2h	equ	0xFDA
  8854                           fsr2l	equ	0xFD9
  8855                           status	equ	0xFD8
  8856                           
  8857 ;; *************** function _TMR0_Initialize *****************
  8858 ;; Defined at:
  8859 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  8860 ;; Parameters:    Size  Location     Type
  8861 ;;		None
  8862 ;; Auto vars:     Size  Location     Type
  8863 ;;		None
  8864 ;; Return value:  Size  Location     Type
  8865 ;;                  1    wreg      void 
  8866 ;; Registers used:
  8867 ;;		wreg, status,2, status,0, cstack
  8868 ;; Tracked objects:
  8869 ;;		On entry : 0/0
  8870 ;;		On exit  : 0/0
  8871 ;;		Unchanged: 0/0
  8872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8873 ;;      Params:         0       0       0       0       0       0       0
  8874 ;;      Locals:         0       0       0       0       0       0       0
  8875 ;;      Temps:          2       0       0       0       0       0       0
  8876 ;;      Totals:         2       0       0       0       0       0       0
  8877 ;;Total ram usage:        2 bytes
  8878 ;; Hardware stack levels used:    1
  8879 ;; Hardware stack levels required when called:    5
  8880 ;; This function calls:
  8881 ;;		_TMR0_SetInterruptHandler
  8882 ;; This function is called by:
  8883 ;;		_SYSTEM_Initialize
  8884 ;; This function uses a non-reentrant model
  8885 ;;
  8886                           
  8887                           	psect	text39
  8888  003FB4                     __ptext39:
  8889                           	opt stack 0
  8890  003FB4                     _TMR0_Initialize:
  8891                           	opt stack 23
  8892                           
  8893                           ;tmr0.c: 71: TMR0H = 0xF8;
  8894                           
  8895                           ;incstack = 0
  8896  003FB4  0EF8               	movlw	248
  8897  003FB6  6ED7               	movwf	4055,c	;volatile
  8898                           
  8899                           ;tmr0.c: 74: TMR0L = 0x2F;
  8900  003FB8  0E2F               	movlw	47
  8901  003FBA  6ED6               	movwf	4054,c	;volatile
  8902                           
  8903                           ;tmr0.c: 78: timer0ReloadVal = (TMR0H << 8) | TMR0L;
  8904  003FBC  50D6               	movf	4054,w,c	;volatile
  8905  003FBE  CFD7 F01A          	movff	4055,??_TMR0_Initialize	;volatile
  8906  003FC2  6A1B               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  8907  003FC4  C01A  F01B         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  8908  003FC8  6A1A               	clrf	??_TMR0_Initialize,c
  8909  003FCA  101A               	iorwf	??_TMR0_Initialize,w,c
  8910  003FCC  6E46               	movwf	_timer0ReloadVal,c	;volatile
  8911  003FCE  501B               	movf	??_TMR0_Initialize+1,w,c
  8912  003FD0  6E47               	movwf	_timer0ReloadVal+1,c	;volatile
  8913                           
  8914                           ;tmr0.c: 81: INTCONbits.TMR0IF = 0;
  8915  003FD2  94F2               	bcf	intcon,2,c	;volatile
  8916                           
  8917                           ;tmr0.c: 84: INTCONbits.TMR0IE = 1;
  8918  003FD4  8AF2               	bsf	intcon,5,c	;volatile
  8919                           
  8920                           ;tmr0.c: 87: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  8921  003FD6  0E00               	movlw	0
  8922  003FD8  6E18               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  8923  003FDA  0E00               	movlw	0
  8924  003FDC  6E19               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  8925  003FDE  EC15  F022         	call	_TMR0_SetInterruptHandler	;wreg free
  8926                           
  8927                           ;tmr0.c: 90: T0CON = 0x90;
  8928  003FE2  0E90               	movlw	144
  8929  003FE4  6ED5               	movwf	4053,c	;volatile
  8930  003FE6  0012               	return		;funcret
  8931  003FE8                     __end_of_TMR0_Initialize:
  8932                           	opt stack 0
  8933                           tosu	equ	0xFFF
  8934                           tosh	equ	0xFFE
  8935                           tosl	equ	0xFFD
  8936                           pclath	equ	0xFFA
  8937                           tblptru	equ	0xFF8
  8938                           tblptrh	equ	0xFF7
  8939                           tblptrl	equ	0xFF6
  8940                           tablat	equ	0xFF5
  8941                           prodh	equ	0xFF4
  8942                           prodl	equ	0xFF3
  8943                           intcon	equ	0xFF2
  8944                           postinc0	equ	0xFEE
  8945                           plusw0	equ	0xFEB
  8946                           wreg	equ	0xFE8
  8947                           indf1	equ	0xFE7
  8948                           postdec1	equ	0xFE5
  8949                           fsr1h	equ	0xFE2
  8950                           fsr1l	equ	0xFE1
  8951                           indf2	equ	0xFDF
  8952                           postinc2	equ	0xFDE
  8953                           postdec2	equ	0xFDD
  8954                           plusw2	equ	0xFDB
  8955                           fsr2h	equ	0xFDA
  8956                           fsr2l	equ	0xFD9
  8957                           status	equ	0xFD8
  8958                           
  8959 ;; *************** function _TMR0_SetInterruptHandler *****************
  8960 ;; Defined at:
  8961 ;;		line 179 in file "mcc_generated_files/tmr0.c"
  8962 ;; Parameters:    Size  Location     Type
  8963 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  8964 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  8965 ;; Auto vars:     Size  Location     Type
  8966 ;;		None
  8967 ;; Return value:  Size  Location     Type
  8968 ;;                  1    wreg      void 
  8969 ;; Registers used:
  8970 ;;		wreg, status,2, status,0
  8971 ;; Tracked objects:
  8972 ;;		On entry : 0/0
  8973 ;;		On exit  : 0/0
  8974 ;;		Unchanged: 0/0
  8975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8976 ;;      Params:         2       0       0       0       0       0       0
  8977 ;;      Locals:         0       0       0       0       0       0       0
  8978 ;;      Temps:          0       0       0       0       0       0       0
  8979 ;;      Totals:         2       0       0       0       0       0       0
  8980 ;;Total ram usage:        2 bytes
  8981 ;; Hardware stack levels used:    1
  8982 ;; Hardware stack levels required when called:    4
  8983 ;; This function calls:
  8984 ;;		Nothing
  8985 ;; This function is called by:
  8986 ;;		_TMR0_Initialize
  8987 ;; This function uses a non-reentrant model
  8988 ;;
  8989                           
  8990                           	psect	text40
  8991  00442A                     __ptext40:
  8992                           	opt stack 0
  8993  00442A                     _TMR0_SetInterruptHandler:
  8994                           	opt stack 23
  8995                           
  8996                           ;tmr0.c: 180: TMR0_InterruptHandler = InterruptHandler;
  8997                           
  8998                           ;incstack = 0
  8999  00442A  C018  F1CC         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  9000  00442E  C019  F1CD         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  9001  004432  0012               	return		;funcret
  9002  004434                     __end_of_TMR0_SetInterruptHandler:
  9003                           	opt stack 0
  9004                           tosu	equ	0xFFF
  9005                           tosh	equ	0xFFE
  9006                           tosl	equ	0xFFD
  9007                           pclath	equ	0xFFA
  9008                           tblptru	equ	0xFF8
  9009                           tblptrh	equ	0xFF7
  9010                           tblptrl	equ	0xFF6
  9011                           tablat	equ	0xFF5
  9012                           prodh	equ	0xFF4
  9013                           prodl	equ	0xFF3
  9014                           intcon	equ	0xFF2
  9015                           postinc0	equ	0xFEE
  9016                           plusw0	equ	0xFEB
  9017                           wreg	equ	0xFE8
  9018                           indf1	equ	0xFE7
  9019                           postdec1	equ	0xFE5
  9020                           fsr1h	equ	0xFE2
  9021                           fsr1l	equ	0xFE1
  9022                           indf2	equ	0xFDF
  9023                           postinc2	equ	0xFDE
  9024                           postdec2	equ	0xFDD
  9025                           plusw2	equ	0xFDB
  9026                           fsr2h	equ	0xFDA
  9027                           fsr2l	equ	0xFD9
  9028                           status	equ	0xFD8
  9029                           
  9030 ;; *************** function _PIN_MANAGER_Initialize *****************
  9031 ;; Defined at:
  9032 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  9033 ;; Parameters:    Size  Location     Type
  9034 ;;		None
  9035 ;; Auto vars:     Size  Location     Type
  9036 ;;		None
  9037 ;; Return value:  Size  Location     Type
  9038 ;;                  1    wreg      void 
  9039 ;; Registers used:
  9040 ;;		wreg, status,2, status,0, cstack
  9041 ;; Tracked objects:
  9042 ;;		On entry : 0/0
  9043 ;;		On exit  : 0/0
  9044 ;;		Unchanged: 0/0
  9045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9046 ;;      Params:         0       0       0       0       0       0       0
  9047 ;;      Locals:         0       0       0       0       0       0       0
  9048 ;;      Temps:          0       0       0       0       0       0       0
  9049 ;;      Totals:         0       0       0       0       0       0       0
  9050 ;;Total ram usage:        0 bytes
  9051 ;; Hardware stack levels used:    1
  9052 ;; Hardware stack levels required when called:    5
  9053 ;; This function calls:
  9054 ;;		_IOCB4_SetInterruptHandler
  9055 ;;		_IOCB5_SetInterruptHandler
  9056 ;; This function is called by:
  9057 ;;		_SYSTEM_Initialize
  9058 ;; This function uses a non-reentrant model
  9059 ;;
  9060                           
  9061                           	psect	text41
  9062  003782                     __ptext41:
  9063                           	opt stack 0
  9064  003782                     _PIN_MANAGER_Initialize:
  9065                           	opt stack 23
  9066                           
  9067                           ;pin_manager.c: 60: LATE = 0x00;
  9068                           
  9069                           ;incstack = 0
  9070  003782  0E00               	movlw	0
  9071  003784  6E8D               	movwf	3981,c	;volatile
  9072                           
  9073                           ;pin_manager.c: 61: LATD = 0x00;
  9074  003786  0E00               	movlw	0
  9075  003788  6E8C               	movwf	3980,c	;volatile
  9076                           
  9077                           ;pin_manager.c: 62: LATA = 0x06;
  9078  00378A  0E06               	movlw	6
  9079  00378C  6E89               	movwf	3977,c	;volatile
  9080                           
  9081                           ;pin_manager.c: 63: LATB = 0x00;
  9082  00378E  0E00               	movlw	0
  9083  003790  6E8A               	movwf	3978,c	;volatile
  9084                           
  9085                           ;pin_manager.c: 64: LATC = 0x00;
  9086  003792  0E00               	movlw	0
  9087  003794  6E8B               	movwf	3979,c	;volatile
  9088                           
  9089                           ;pin_manager.c: 69: TRISE = 0x07;
  9090  003796  0E07               	movlw	7
  9091  003798  6E96               	movwf	3990,c	;volatile
  9092                           
  9093                           ;pin_manager.c: 70: TRISA = 0xE1;
  9094  00379A  0EE1               	movlw	225
  9095  00379C  6E92               	movwf	3986,c	;volatile
  9096                           
  9097                           ;pin_manager.c: 71: TRISB = 0xEF;
  9098  00379E  0EEF               	movlw	239
  9099  0037A0  6E93               	movwf	3987,c	;volatile
  9100                           
  9101                           ;pin_manager.c: 72: TRISC = 0x80;
  9102  0037A2  0E80               	movlw	128
  9103  0037A4  6E94               	movwf	3988,c	;volatile
  9104                           
  9105                           ;pin_manager.c: 73: TRISD = 0xF2;
  9106  0037A6  0EF2               	movlw	242
  9107  0037A8  6E95               	movwf	3989,c	;volatile
  9108                           
  9109                           ;pin_manager.c: 78: ANSELC = 0x34;
  9110  0037AA  0E34               	movlw	52
  9111  0037AC  010F               	movlb	15	; () banked
  9112  0037AE  6F3A               	movwf	58,b	;volatile
  9113                           
  9114                           ;pin_manager.c: 79: ANSELB = 0x3E;
  9115  0037B0  0E3E               	movlw	62
  9116  0037B2  6F39               	movwf	57,b	;volatile
  9117                           
  9118                           ;pin_manager.c: 80: ANSELD = 0xE4;
  9119  0037B4  0EE4               	movlw	228
  9120  0037B6  6F3B               	movwf	59,b	;volatile
  9121                           
  9122                           ;pin_manager.c: 81: ANSELE = 0x07;
  9123  0037B8  0E07               	movlw	7
  9124  0037BA  6F3C               	movwf	60,b	;volatile
  9125                           
  9126                           ;pin_manager.c: 82: ANSELA = 0x2F;
  9127  0037BC  0E2F               	movlw	47
  9128  0037BE  6F38               	movwf	56,b	;volatile
  9129                           
  9130                           ;pin_manager.c: 87: WPUB = 0xC3;
  9131  0037C0  0EC3               	movlw	195
  9132  0037C2  6E61               	movwf	3937,c	;volatile
  9133                           
  9134                           ; BSR set to: 15
  9135                           ;pin_manager.c: 88: INTCON2bits.nRBPU = 0;
  9136  0037C4  9EF1               	bcf	intcon2,7,c	;volatile
  9137                           
  9138                           ; BSR set to: 15
  9139                           ;pin_manager.c: 96: IOCBbits.IOCB4 = 1;
  9140  0037C6  8862               	bsf	3938,4,c	;volatile
  9141                           
  9142                           ; BSR set to: 15
  9143                           ;pin_manager.c: 97: IOCBbits.IOCB5 = 1;
  9144  0037C8  8A62               	bsf	3938,5,c	;volatile
  9145                           
  9146                           ; BSR set to: 15
  9147                           ;pin_manager.c: 100: IOCB4_SetInterruptHandler(IOCB4_DefaultInterruptHandler);
  9148  0037CA  0E6E               	movlw	low _IOCB4_DefaultInterruptHandler
  9149  0037CC  6E18               	movwf	IOCB4_SetInterruptHandler@InterruptHandler,c
  9150  0037CE  0E44               	movlw	high _IOCB4_DefaultInterruptHandler
  9151  0037D0  6E19               	movwf	IOCB4_SetInterruptHandler@InterruptHandler+1,c
  9152  0037D2  EC1F  F022         	call	_IOCB4_SetInterruptHandler	;wreg free
  9153                           
  9154                           ;pin_manager.c: 101: IOCB5_SetInterruptHandler(IOCB5_DefaultInterruptHandler);
  9155  0037D6  0E6C               	movlw	low _IOCB5_DefaultInterruptHandler
  9156  0037D8  6E18               	movwf	IOCB5_SetInterruptHandler@InterruptHandler,c
  9157  0037DA  0E44               	movlw	high _IOCB5_DefaultInterruptHandler
  9158  0037DC  6E19               	movwf	IOCB5_SetInterruptHandler@InterruptHandler+1,c
  9159  0037DE  EC1A  F022         	call	_IOCB5_SetInterruptHandler	;wreg free
  9160                           
  9161                           ;pin_manager.c: 104: INTCONbits.RBIE = 1;
  9162  0037E2  86F2               	bsf	intcon,3,c	;volatile
  9163  0037E4  0012               	return		;funcret
  9164  0037E6                     __end_of_PIN_MANAGER_Initialize:
  9165                           	opt stack 0
  9166                           tosu	equ	0xFFF
  9167                           tosh	equ	0xFFE
  9168                           tosl	equ	0xFFD
  9169                           pclath	equ	0xFFA
  9170                           tblptru	equ	0xFF8
  9171                           tblptrh	equ	0xFF7
  9172                           tblptrl	equ	0xFF6
  9173                           tablat	equ	0xFF5
  9174                           prodh	equ	0xFF4
  9175                           prodl	equ	0xFF3
  9176                           intcon	equ	0xFF2
  9177                           intcon2	equ	0xFF1
  9178                           postinc0	equ	0xFEE
  9179                           plusw0	equ	0xFEB
  9180                           wreg	equ	0xFE8
  9181                           indf1	equ	0xFE7
  9182                           postdec1	equ	0xFE5
  9183                           fsr1h	equ	0xFE2
  9184                           fsr1l	equ	0xFE1
  9185                           indf2	equ	0xFDF
  9186                           postinc2	equ	0xFDE
  9187                           postdec2	equ	0xFDD
  9188                           plusw2	equ	0xFDB
  9189                           fsr2h	equ	0xFDA
  9190                           fsr2l	equ	0xFD9
  9191                           status	equ	0xFD8
  9192                           
  9193 ;; *************** function _IOCB5_SetInterruptHandler *****************
  9194 ;; Defined at:
  9195 ;;		line 172 in file "mcc_generated_files/pin_manager.c"
  9196 ;; Parameters:    Size  Location     Type
  9197 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  9198 ;;		 -> IOCB5_DefaultInterruptHandler(1), 
  9199 ;; Auto vars:     Size  Location     Type
  9200 ;;		None
  9201 ;; Return value:  Size  Location     Type
  9202 ;;                  1    wreg      void 
  9203 ;; Registers used:
  9204 ;;		wreg, status,2, status,0
  9205 ;; Tracked objects:
  9206 ;;		On entry : 0/0
  9207 ;;		On exit  : 0/0
  9208 ;;		Unchanged: 0/0
  9209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9210 ;;      Params:         2       0       0       0       0       0       0
  9211 ;;      Locals:         0       0       0       0       0       0       0
  9212 ;;      Temps:          0       0       0       0       0       0       0
  9213 ;;      Totals:         2       0       0       0       0       0       0
  9214 ;;Total ram usage:        2 bytes
  9215 ;; Hardware stack levels used:    1
  9216 ;; Hardware stack levels required when called:    4
  9217 ;; This function calls:
  9218 ;;		Nothing
  9219 ;; This function is called by:
  9220 ;;		_PIN_MANAGER_Initialize
  9221 ;; This function uses a non-reentrant model
  9222 ;;
  9223                           
  9224                           	psect	text42
  9225  004434                     __ptext42:
  9226                           	opt stack 0
  9227  004434                     _IOCB5_SetInterruptHandler:
  9228                           	opt stack 23
  9229                           
  9230                           ;pin_manager.c: 173: IOCB5_InterruptHandler = InterruptHandler;
  9231                           
  9232                           ;incstack = 0
  9233  004434  C018  F1CE         	movff	IOCB5_SetInterruptHandler@InterruptHandler,_IOCB5_InterruptHandler
  9234  004438  C019  F1CF         	movff	IOCB5_SetInterruptHandler@InterruptHandler+1,_IOCB5_InterruptHandler+1
  9235  00443C  0012               	return		;funcret
  9236  00443E                     __end_of_IOCB5_SetInterruptHandler:
  9237                           	opt stack 0
  9238                           tosu	equ	0xFFF
  9239                           tosh	equ	0xFFE
  9240                           tosl	equ	0xFFD
  9241                           pclath	equ	0xFFA
  9242                           tblptru	equ	0xFF8
  9243                           tblptrh	equ	0xFF7
  9244                           tblptrl	equ	0xFF6
  9245                           tablat	equ	0xFF5
  9246                           prodh	equ	0xFF4
  9247                           prodl	equ	0xFF3
  9248                           intcon	equ	0xFF2
  9249                           intcon2	equ	0xFF1
  9250                           postinc0	equ	0xFEE
  9251                           plusw0	equ	0xFEB
  9252                           wreg	equ	0xFE8
  9253                           indf1	equ	0xFE7
  9254                           postdec1	equ	0xFE5
  9255                           fsr1h	equ	0xFE2
  9256                           fsr1l	equ	0xFE1
  9257                           indf2	equ	0xFDF
  9258                           postinc2	equ	0xFDE
  9259                           postdec2	equ	0xFDD
  9260                           plusw2	equ	0xFDB
  9261                           fsr2h	equ	0xFDA
  9262                           fsr2l	equ	0xFD9
  9263                           status	equ	0xFD8
  9264                           
  9265 ;; *************** function _IOCB4_SetInterruptHandler *****************
  9266 ;; Defined at:
  9267 ;;		line 143 in file "mcc_generated_files/pin_manager.c"
  9268 ;; Parameters:    Size  Location     Type
  9269 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  9270 ;;		 -> IOCB4_DefaultInterruptHandler(1), 
  9271 ;; Auto vars:     Size  Location     Type
  9272 ;;		None
  9273 ;; Return value:  Size  Location     Type
  9274 ;;                  1    wreg      void 
  9275 ;; Registers used:
  9276 ;;		wreg, status,2, status,0
  9277 ;; Tracked objects:
  9278 ;;		On entry : 0/0
  9279 ;;		On exit  : 0/0
  9280 ;;		Unchanged: 0/0
  9281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9282 ;;      Params:         2       0       0       0       0       0       0
  9283 ;;      Locals:         0       0       0       0       0       0       0
  9284 ;;      Temps:          0       0       0       0       0       0       0
  9285 ;;      Totals:         2       0       0       0       0       0       0
  9286 ;;Total ram usage:        2 bytes
  9287 ;; Hardware stack levels used:    1
  9288 ;; Hardware stack levels required when called:    4
  9289 ;; This function calls:
  9290 ;;		Nothing
  9291 ;; This function is called by:
  9292 ;;		_PIN_MANAGER_Initialize
  9293 ;; This function uses a non-reentrant model
  9294 ;;
  9295                           
  9296                           	psect	text43
  9297  00443E                     __ptext43:
  9298                           	opt stack 0
  9299  00443E                     _IOCB4_SetInterruptHandler:
  9300                           	opt stack 23
  9301                           
  9302                           ;pin_manager.c: 144: IOCB4_InterruptHandler = InterruptHandler;
  9303                           
  9304                           ;incstack = 0
  9305  00443E  C018  F1D0         	movff	IOCB4_SetInterruptHandler@InterruptHandler,_IOCB4_InterruptHandler
  9306  004442  C019  F1D1         	movff	IOCB4_SetInterruptHandler@InterruptHandler+1,_IOCB4_InterruptHandler+1
  9307  004446  0012               	return		;funcret
  9308  004448                     __end_of_IOCB4_SetInterruptHandler:
  9309                           	opt stack 0
  9310                           tosu	equ	0xFFF
  9311                           tosh	equ	0xFFE
  9312                           tosl	equ	0xFFD
  9313                           pclath	equ	0xFFA
  9314                           tblptru	equ	0xFF8
  9315                           tblptrh	equ	0xFF7
  9316                           tblptrl	equ	0xFF6
  9317                           tablat	equ	0xFF5
  9318                           prodh	equ	0xFF4
  9319                           prodl	equ	0xFF3
  9320                           intcon	equ	0xFF2
  9321                           intcon2	equ	0xFF1
  9322                           postinc0	equ	0xFEE
  9323                           plusw0	equ	0xFEB
  9324                           wreg	equ	0xFE8
  9325                           indf1	equ	0xFE7
  9326                           postdec1	equ	0xFE5
  9327                           fsr1h	equ	0xFE2
  9328                           fsr1l	equ	0xFE1
  9329                           indf2	equ	0xFDF
  9330                           postinc2	equ	0xFDE
  9331                           postdec2	equ	0xFDD
  9332                           plusw2	equ	0xFDB
  9333                           fsr2h	equ	0xFDA
  9334                           fsr2l	equ	0xFD9
  9335                           status	equ	0xFD8
  9336                           
  9337 ;; *************** function _OSCILLATOR_Initialize *****************
  9338 ;; Defined at:
  9339 ;;		line 122 in file "mcc_generated_files/mcc.c"
  9340 ;; Parameters:    Size  Location     Type
  9341 ;;		None
  9342 ;; Auto vars:     Size  Location     Type
  9343 ;;		None
  9344 ;; Return value:  Size  Location     Type
  9345 ;;                  1    wreg      void 
  9346 ;; Registers used:
  9347 ;;		wreg, status,2
  9348 ;; Tracked objects:
  9349 ;;		On entry : 0/0
  9350 ;;		On exit  : 0/0
  9351 ;;		Unchanged: 0/0
  9352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9353 ;;      Params:         0       0       0       0       0       0       0
  9354 ;;      Locals:         0       0       0       0       0       0       0
  9355 ;;      Temps:          0       0       0       0       0       0       0
  9356 ;;      Totals:         0       0       0       0       0       0       0
  9357 ;;Total ram usage:        0 bytes
  9358 ;; Hardware stack levels used:    1
  9359 ;; Hardware stack levels required when called:    4
  9360 ;; This function calls:
  9361 ;;		Nothing
  9362 ;; This function is called by:
  9363 ;;		_SYSTEM_Initialize
  9364 ;; This function uses a non-reentrant model
  9365 ;;
  9366                           
  9367                           	psect	text44
  9368  0043DE                     __ptext44:
  9369                           	opt stack 0
  9370  0043DE                     _OSCILLATOR_Initialize:
  9371                           	opt stack 24
  9372                           
  9373                           ;mcc.c: 125: OSCCON = 0x60;
  9374                           
  9375                           ;incstack = 0
  9376  0043DE  0E60               	movlw	96
  9377  0043E0  6ED3               	movwf	4051,c	;volatile
  9378                           
  9379                           ;mcc.c: 127: OSCCON2 = 0x04;
  9380  0043E2  0E04               	movlw	4
  9381  0043E4  6ED2               	movwf	4050,c	;volatile
  9382                           
  9383                           ;mcc.c: 129: OSCTUNE = 0x80;
  9384  0043E6  0E80               	movlw	128
  9385  0043E8  6E9B               	movwf	3995,c	;volatile
  9386  0043EA  0012               	return		;funcret
  9387  0043EC                     __end_of_OSCILLATOR_Initialize:
  9388                           	opt stack 0
  9389                           tosu	equ	0xFFF
  9390                           tosh	equ	0xFFE
  9391                           tosl	equ	0xFFD
  9392                           pclath	equ	0xFFA
  9393                           tblptru	equ	0xFF8
  9394                           tblptrh	equ	0xFF7
  9395                           tblptrl	equ	0xFF6
  9396                           tablat	equ	0xFF5
  9397                           prodh	equ	0xFF4
  9398                           prodl	equ	0xFF3
  9399                           intcon	equ	0xFF2
  9400                           intcon2	equ	0xFF1
  9401                           postinc0	equ	0xFEE
  9402                           plusw0	equ	0xFEB
  9403                           wreg	equ	0xFE8
  9404                           indf1	equ	0xFE7
  9405                           postdec1	equ	0xFE5
  9406                           fsr1h	equ	0xFE2
  9407                           fsr1l	equ	0xFE1
  9408                           indf2	equ	0xFDF
  9409                           postinc2	equ	0xFDE
  9410                           postdec2	equ	0xFDD
  9411                           plusw2	equ	0xFDB
  9412                           fsr2h	equ	0xFDA
  9413                           fsr2l	equ	0xFD9
  9414                           status	equ	0xFD8
  9415                           
  9416 ;; *************** function _INTERRUPT_Initialize *****************
  9417 ;; Defined at:
  9418 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  9419 ;; Parameters:    Size  Location     Type
  9420 ;;		None
  9421 ;; Auto vars:     Size  Location     Type
  9422 ;;		None
  9423 ;; Return value:  Size  Location     Type
  9424 ;;                  1    wreg      void 
  9425 ;; Registers used:
  9426 ;;		None
  9427 ;; Tracked objects:
  9428 ;;		On entry : 0/0
  9429 ;;		On exit  : 0/0
  9430 ;;		Unchanged: 0/0
  9431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9432 ;;      Params:         0       0       0       0       0       0       0
  9433 ;;      Locals:         0       0       0       0       0       0       0
  9434 ;;      Temps:          0       0       0       0       0       0       0
  9435 ;;      Totals:         0       0       0       0       0       0       0
  9436 ;;Total ram usage:        0 bytes
  9437 ;; Hardware stack levels used:    1
  9438 ;; Hardware stack levels required when called:    4
  9439 ;; This function calls:
  9440 ;;		Nothing
  9441 ;; This function is called by:
  9442 ;;		_SYSTEM_Initialize
  9443 ;; This function uses a non-reentrant model
  9444 ;;
  9445                           
  9446                           	psect	text45
  9447  004460                     __ptext45:
  9448                           	opt stack 0
  9449  004460                     _INTERRUPT_Initialize:
  9450                           	opt stack 24
  9451                           
  9452                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  9453                           
  9454                           ;incstack = 0
  9455  004460  9ED0               	bcf	4048,7,c	;volatile
  9456  004462  0012               	return		;funcret
  9457  004464                     __end_of_INTERRUPT_Initialize:
  9458                           	opt stack 0
  9459                           tosu	equ	0xFFF
  9460                           tosh	equ	0xFFE
  9461                           tosl	equ	0xFFD
  9462                           pclath	equ	0xFFA
  9463                           tblptru	equ	0xFF8
  9464                           tblptrh	equ	0xFF7
  9465                           tblptrl	equ	0xFF6
  9466                           tablat	equ	0xFF5
  9467                           prodh	equ	0xFF4
  9468                           prodl	equ	0xFF3
  9469                           intcon	equ	0xFF2
  9470                           intcon2	equ	0xFF1
  9471                           postinc0	equ	0xFEE
  9472                           plusw0	equ	0xFEB
  9473                           wreg	equ	0xFE8
  9474                           indf1	equ	0xFE7
  9475                           postdec1	equ	0xFE5
  9476                           fsr1h	equ	0xFE2
  9477                           fsr1l	equ	0xFE1
  9478                           indf2	equ	0xFDF
  9479                           postinc2	equ	0xFDE
  9480                           postdec2	equ	0xFDD
  9481                           plusw2	equ	0xFDB
  9482                           fsr2h	equ	0xFDA
  9483                           fsr2l	equ	0xFD9
  9484                           status	equ	0xFD8
  9485                           
  9486 ;; *************** function _EUSART1_Initialize *****************
  9487 ;; Defined at:
  9488 ;;		line 74 in file "mcc_generated_files/eusart1.c"
  9489 ;; Parameters:    Size  Location     Type
  9490 ;;		None
  9491 ;; Auto vars:     Size  Location     Type
  9492 ;;		None
  9493 ;; Return value:  Size  Location     Type
  9494 ;;                  1    wreg      void 
  9495 ;; Registers used:
  9496 ;;		wreg, status,2
  9497 ;; Tracked objects:
  9498 ;;		On entry : 0/0
  9499 ;;		On exit  : 0/0
  9500 ;;		Unchanged: 0/0
  9501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9502 ;;      Params:         0       0       0       0       0       0       0
  9503 ;;      Locals:         0       0       0       0       0       0       0
  9504 ;;      Temps:          0       0       0       0       0       0       0
  9505 ;;      Totals:         0       0       0       0       0       0       0
  9506 ;;Total ram usage:        0 bytes
  9507 ;; Hardware stack levels used:    1
  9508 ;; Hardware stack levels required when called:    4
  9509 ;; This function calls:
  9510 ;;		Nothing
  9511 ;; This function is called by:
  9512 ;;		_SYSTEM_Initialize
  9513 ;; This function uses a non-reentrant model
  9514 ;;
  9515                           
  9516                           	psect	text46
  9517  003E34                     __ptext46:
  9518                           	opt stack 0
  9519  003E34                     _EUSART1_Initialize:
  9520                           	opt stack 24
  9521                           
  9522                           ;eusart1.c: 77: PIE1bits.RC1IE = 0;
  9523                           
  9524                           ;incstack = 0
  9525  003E34  9A9D               	bcf	3997,5,c	;volatile
  9526                           
  9527                           ;eusart1.c: 78: PIE1bits.TX1IE = 0;
  9528  003E36  989D               	bcf	3997,4,c	;volatile
  9529                           
  9530                           ;eusart1.c: 82: BAUDCON1 = 0x08;
  9531  003E38  0E08               	movlw	8
  9532  003E3A  6EB8               	movwf	4024,c	;volatile
  9533                           
  9534                           ;eusart1.c: 85: RCSTA1 = 0x90;
  9535  003E3C  0E90               	movlw	144
  9536  003E3E  6EAB               	movwf	4011,c	;volatile
  9537                           
  9538                           ;eusart1.c: 88: TXSTA1 = 0x24;
  9539  003E40  0E24               	movlw	36
  9540  003E42  6EAC               	movwf	4012,c	;volatile
  9541                           
  9542                           ;eusart1.c: 91: SPBRG1 = 0x10;
  9543  003E44  0E10               	movlw	16
  9544  003E46  6EAF               	movwf	4015,c	;volatile
  9545                           
  9546                           ;eusart1.c: 94: SPBRGH1 = 0x00;
  9547  003E48  0E00               	movlw	0
  9548  003E4A  6EB0               	movwf	4016,c	;volatile
  9549                           
  9550                           ;eusart1.c: 98: eusart1TxHead = 0;
  9551  003E4C  0E00               	movlw	0
  9552  003E4E  6E36               	movwf	_eusart1TxHead,c	;volatile
  9553                           
  9554                           ;eusart1.c: 99: eusart1TxTail = 0;
  9555  003E50  0E00               	movlw	0
  9556  003E52  6E35               	movwf	_eusart1TxTail,c	;volatile
  9557                           
  9558                           ;eusart1.c: 100: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  9559  003E54  0E46               	movlw	70
  9560  003E56  0101               	movlb	1	; () banked
  9561  003E58  6FD2               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
  9562                           
  9563                           ;eusart1.c: 102: eusart1RxHead = 0;
  9564  003E5A  0E00               	movlw	0
  9565  003E5C  6E34               	movwf	_eusart1RxHead,c	;volatile
  9566                           
  9567                           ;eusart1.c: 103: eusart1RxTail = 0;
  9568  003E5E  0E00               	movlw	0
  9569  003E60  6E33               	movwf	_eusart1RxTail,c	;volatile
  9570                           
  9571                           ;eusart1.c: 104: eusart1RxCount = 0;
  9572  003E62  0E00               	movlw	0
  9573  003E64  0100               	movlb	0	; () banked
  9574  003E66  6FF5               	movwf	_eusart1RxCount& (0+255),b	;volatile
  9575                           
  9576                           ; BSR set to: 0
  9577                           ;eusart1.c: 107: PIE1bits.RC1IE = 1;
  9578  003E68  8A9D               	bsf	3997,5,c	;volatile
  9579                           
  9580                           ; BSR set to: 0
  9581  003E6A  0012               	return		;funcret
  9582  003E6C                     __end_of_EUSART1_Initialize:
  9583                           	opt stack 0
  9584                           tosu	equ	0xFFF
  9585                           tosh	equ	0xFFE
  9586                           tosl	equ	0xFFD
  9587                           pclath	equ	0xFFA
  9588                           tblptru	equ	0xFF8
  9589                           tblptrh	equ	0xFF7
  9590                           tblptrl	equ	0xFF6
  9591                           tablat	equ	0xFF5
  9592                           prodh	equ	0xFF4
  9593                           prodl	equ	0xFF3
  9594                           intcon	equ	0xFF2
  9595                           intcon2	equ	0xFF1
  9596                           postinc0	equ	0xFEE
  9597                           plusw0	equ	0xFEB
  9598                           wreg	equ	0xFE8
  9599                           indf1	equ	0xFE7
  9600                           postdec1	equ	0xFE5
  9601                           fsr1h	equ	0xFE2
  9602                           fsr1l	equ	0xFE1
  9603                           indf2	equ	0xFDF
  9604                           postinc2	equ	0xFDE
  9605                           postdec2	equ	0xFDD
  9606                           plusw2	equ	0xFDB
  9607                           fsr2h	equ	0xFDA
  9608                           fsr2l	equ	0xFD9
  9609                           status	equ	0xFD8
  9610                           
  9611 ;; *************** function _ADC_Initialize *****************
  9612 ;; Defined at:
  9613 ;;		line 58 in file "mcc_generated_files/adc.c"
  9614 ;; Parameters:    Size  Location     Type
  9615 ;;		None
  9616 ;; Auto vars:     Size  Location     Type
  9617 ;;		None
  9618 ;; Return value:  Size  Location     Type
  9619 ;;                  1    wreg      void 
  9620 ;; Registers used:
  9621 ;;		wreg, status,2
  9622 ;; Tracked objects:
  9623 ;;		On entry : 0/0
  9624 ;;		On exit  : 0/0
  9625 ;;		Unchanged: 0/0
  9626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9627 ;;      Params:         0       0       0       0       0       0       0
  9628 ;;      Locals:         0       0       0       0       0       0       0
  9629 ;;      Temps:          0       0       0       0       0       0       0
  9630 ;;      Totals:         0       0       0       0       0       0       0
  9631 ;;Total ram usage:        0 bytes
  9632 ;; Hardware stack levels used:    1
  9633 ;; Hardware stack levels required when called:    4
  9634 ;; This function calls:
  9635 ;;		Nothing
  9636 ;; This function is called by:
  9637 ;;		_SYSTEM_Initialize
  9638 ;; This function uses a non-reentrant model
  9639 ;;
  9640                           
  9641                           	psect	text47
  9642  004336                     __ptext47:
  9643                           	opt stack 0
  9644  004336                     _ADC_Initialize:
  9645                           	opt stack 24
  9646                           
  9647                           ;adc.c: 63: ADCON0 = 0x05;
  9648                           
  9649                           ; BSR set to: 0
  9650                           ;incstack = 0
  9651  004336  0E05               	movlw	5
  9652  004338  6EC2               	movwf	4034,c	;volatile
  9653                           
  9654                           ;adc.c: 66: ADCON1 = 0x00;
  9655  00433A  0E00               	movlw	0
  9656  00433C  6EC1               	movwf	4033,c	;volatile
  9657                           
  9658                           ;adc.c: 69: ADCON2 = 0x87;
  9659  00433E  0E87               	movlw	135
  9660  004340  6EC0               	movwf	4032,c	;volatile
  9661                           
  9662                           ;adc.c: 72: ADRESL = 0x00;
  9663  004342  0E00               	movlw	0
  9664  004344  6EC3               	movwf	4035,c	;volatile
  9665                           
  9666                           ;adc.c: 75: ADRESH = 0x00;
  9667  004346  0E00               	movlw	0
  9668  004348  6EC4               	movwf	4036,c	;volatile
  9669  00434A  0012               	return		;funcret
  9670  00434C                     __end_of_ADC_Initialize:
  9671                           	opt stack 0
  9672                           tosu	equ	0xFFF
  9673                           tosh	equ	0xFFE
  9674                           tosl	equ	0xFFD
  9675                           pclath	equ	0xFFA
  9676                           tblptru	equ	0xFF8
  9677                           tblptrh	equ	0xFF7
  9678                           tblptrl	equ	0xFF6
  9679                           tablat	equ	0xFF5
  9680                           prodh	equ	0xFF4
  9681                           prodl	equ	0xFF3
  9682                           intcon	equ	0xFF2
  9683                           intcon2	equ	0xFF1
  9684                           postinc0	equ	0xFEE
  9685                           plusw0	equ	0xFEB
  9686                           wreg	equ	0xFE8
  9687                           indf1	equ	0xFE7
  9688                           postdec1	equ	0xFE5
  9689                           fsr1h	equ	0xFE2
  9690                           fsr1l	equ	0xFE1
  9691                           indf2	equ	0xFDF
  9692                           postinc2	equ	0xFDE
  9693                           postdec2	equ	0xFDD
  9694                           plusw2	equ	0xFDB
  9695                           fsr2h	equ	0xFDA
  9696                           fsr2l	equ	0xFD9
  9697                           status	equ	0xFD8
  9698                           
  9699 ;; *************** function _SetMcuRunTime *****************
  9700 ;; Defined at:
  9701 ;;		line 57 in file "SystemStatus.c"
  9702 ;; Parameters:    Size  Location     Type
  9703 ;;		None
  9704 ;; Auto vars:     Size  Location     Type
  9705 ;;		None
  9706 ;; Return value:  Size  Location     Type
  9707 ;;                  1    wreg      void 
  9708 ;; Registers used:
  9709 ;;		wreg, status,2, status,0, cstack
  9710 ;; Tracked objects:
  9711 ;;		On entry : 0/0
  9712 ;;		On exit  : 0/0
  9713 ;;		Unchanged: 0/0
  9714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9715 ;;      Params:         0       0       0       0       0       0       0
  9716 ;;      Locals:         0       0       0       0       0       0       0
  9717 ;;      Temps:          0       0       0       0       0       0       0
  9718 ;;      Totals:         0       0       0       0       0       0       0
  9719 ;;Total ram usage:        0 bytes
  9720 ;; Hardware stack levels used:    1
  9721 ;; Hardware stack levels required when called:    5
  9722 ;; This function calls:
  9723 ;;		___llmod
  9724 ;; This function is called by:
  9725 ;;		_main
  9726 ;; This function uses a non-reentrant model
  9727 ;;
  9728                           
  9729                           	psect	text48
  9730  003C42                     __ptext48:
  9731                           	opt stack 0
  9732  003C42                     _SetMcuRunTime:
  9733                           	opt stack 25
  9734                           
  9735                           ;SystemStatus.c: 59: mcuRunTimeIn5SecTicks++;
  9736                           
  9737                           ;incstack = 0
  9738  003C42  0E01               	movlw	1
  9739  003C44  0101               	movlb	1	; () banked
  9740  003C46  2728               	addwf	_mcuRunTimeIn5SecTicks& (0+255),f,b
  9741  003C48  0E00               	movlw	0
  9742  003C4A  2329               	addwfc	(_mcuRunTimeIn5SecTicks+1)& (0+255),f,b
  9743  003C4C  232A               	addwfc	(_mcuRunTimeIn5SecTicks+2)& (0+255),f,b
  9744  003C4E  232B               	addwfc	(_mcuRunTimeIn5SecTicks+3)& (0+255),f,b
  9745                           
  9746                           ; BSR set to: 1
  9747                           ;SystemStatus.c: 60: mcuRunTimeIn5SecTicks %= (17280);
  9748  003C50  C128  F018         	movff	_mcuRunTimeIn5SecTicks,___llmod@dividend
  9749  003C54  C129  F019         	movff	_mcuRunTimeIn5SecTicks+1,___llmod@dividend+1
  9750  003C58  C12A  F01A         	movff	_mcuRunTimeIn5SecTicks+2,___llmod@dividend+2
  9751  003C5C  C12B  F01B         	movff	_mcuRunTimeIn5SecTicks+3,___llmod@dividend+3
  9752  003C60  0E80               	movlw	128
  9753  003C62  6E1C               	movwf	___llmod@divisor,c
  9754  003C64  0E43               	movlw	67
  9755  003C66  6E1D               	movwf	___llmod@divisor+1,c
  9756  003C68  0E00               	movlw	0
  9757  003C6A  6E1E               	movwf	___llmod@divisor+2,c
  9758  003C6C  0E00               	movlw	0
  9759  003C6E  6E1F               	movwf	___llmod@divisor+3,c
  9760  003C70  EC8E  F01B         	call	___llmod	;wreg free
  9761  003C74  C018  F128         	movff	?___llmod,_mcuRunTimeIn5SecTicks
  9762  003C78  C019  F129         	movff	?___llmod+1,_mcuRunTimeIn5SecTicks+1
  9763  003C7C  C01A  F12A         	movff	?___llmod+2,_mcuRunTimeIn5SecTicks+2
  9764  003C80  C01B  F12B         	movff	?___llmod+3,_mcuRunTimeIn5SecTicks+3
  9765  003C84  0012               	return		;funcret
  9766  003C86                     __end_of_SetMcuRunTime:
  9767                           	opt stack 0
  9768                           tosu	equ	0xFFF
  9769                           tosh	equ	0xFFE
  9770                           tosl	equ	0xFFD
  9771                           pclath	equ	0xFFA
  9772                           tblptru	equ	0xFF8
  9773                           tblptrh	equ	0xFF7
  9774                           tblptrl	equ	0xFF6
  9775                           tablat	equ	0xFF5
  9776                           prodh	equ	0xFF4
  9777                           prodl	equ	0xFF3
  9778                           intcon	equ	0xFF2
  9779                           intcon2	equ	0xFF1
  9780                           postinc0	equ	0xFEE
  9781                           plusw0	equ	0xFEB
  9782                           wreg	equ	0xFE8
  9783                           indf1	equ	0xFE7
  9784                           postdec1	equ	0xFE5
  9785                           fsr1h	equ	0xFE2
  9786                           fsr1l	equ	0xFE1
  9787                           indf2	equ	0xFDF
  9788                           postinc2	equ	0xFDE
  9789                           postdec2	equ	0xFDD
  9790                           plusw2	equ	0xFDB
  9791                           fsr2h	equ	0xFDA
  9792                           fsr2l	equ	0xFD9
  9793                           status	equ	0xFD8
  9794                           
  9795 ;; *************** function ___llmod *****************
  9796 ;; Defined at:
  9797 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  9798 ;; Parameters:    Size  Location     Type
  9799 ;;  dividend        4   23[COMRAM] unsigned long 
  9800 ;;  divisor         4   27[COMRAM] unsigned long 
  9801 ;; Auto vars:     Size  Location     Type
  9802 ;;  counter         1   31[COMRAM] unsigned char 
  9803 ;; Return value:  Size  Location     Type
  9804 ;;                  4   23[COMRAM] unsigned long 
  9805 ;; Registers used:
  9806 ;;		wreg, status,2, status,0
  9807 ;; Tracked objects:
  9808 ;;		On entry : 0/0
  9809 ;;		On exit  : 0/0
  9810 ;;		Unchanged: 0/0
  9811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9812 ;;      Params:         8       0       0       0       0       0       0
  9813 ;;      Locals:         1       0       0       0       0       0       0
  9814 ;;      Temps:          0       0       0       0       0       0       0
  9815 ;;      Totals:         9       0       0       0       0       0       0
  9816 ;;Total ram usage:        9 bytes
  9817 ;; Hardware stack levels used:    1
  9818 ;; Hardware stack levels required when called:    4
  9819 ;; This function calls:
  9820 ;;		Nothing
  9821 ;; This function is called by:
  9822 ;;		_SetMcuRunTime
  9823 ;;		_GetMcuRunTime
  9824 ;; This function uses a non-reentrant model
  9825 ;;
  9826                           
  9827                           	psect	text49
  9828  00371C                     __ptext49:
  9829                           	opt stack 0
  9830  00371C                     ___llmod:
  9831                           	opt stack 23
  9832                           
  9833                           ;incstack = 0
  9834  00371C  501C               	movf	___llmod@divisor,w,c
  9835  00371E  101D               	iorwf	___llmod@divisor+1,w,c
  9836  003720  101E               	iorwf	___llmod@divisor+2,w,c
  9837  003722  101F               	iorwf	___llmod@divisor+3,w,c
  9838  003724  B4D8               	btfsc	status,2,c
  9839  003726  D024               	goto	l1966
  9840  003728  0E01               	movlw	1
  9841  00372A  6E20               	movwf	___llmod@counter,c
  9842  00372C  D006               	goto	l1961
  9843  00372E  90D8               	bcf	status,0,c
  9844  003730  361C               	rlcf	___llmod@divisor,f,c
  9845  003732  361D               	rlcf	___llmod@divisor+1,f,c
  9846  003734  361E               	rlcf	___llmod@divisor+2,f,c
  9847  003736  361F               	rlcf	___llmod@divisor+3,f,c
  9848  003738  2A20               	incf	___llmod@counter,f,c
  9849  00373A                     l1961:
  9850  00373A  AE1F               	btfss	___llmod@divisor+3,7,c
  9851  00373C  D7F8               	goto	l1962
  9852  00373E                     u8260:
  9853  00373E  501C               	movf	___llmod@divisor,w,c
  9854  003740  5C18               	subwf	___llmod@dividend,w,c
  9855  003742  501D               	movf	___llmod@divisor+1,w,c
  9856  003744  5819               	subwfb	___llmod@dividend+1,w,c
  9857  003746  501E               	movf	___llmod@divisor+2,w,c
  9858  003748  581A               	subwfb	___llmod@dividend+2,w,c
  9859  00374A  501F               	movf	___llmod@divisor+3,w,c
  9860  00374C  581B               	subwfb	___llmod@dividend+3,w,c
  9861  00374E  A0D8               	btfss	status,0,c
  9862  003750  D008               	goto	l1965
  9863  003752  501C               	movf	___llmod@divisor,w,c
  9864  003754  5E18               	subwf	___llmod@dividend,f,c
  9865  003756  501D               	movf	___llmod@divisor+1,w,c
  9866  003758  5A19               	subwfb	___llmod@dividend+1,f,c
  9867  00375A  501E               	movf	___llmod@divisor+2,w,c
  9868  00375C  5A1A               	subwfb	___llmod@dividend+2,f,c
  9869  00375E  501F               	movf	___llmod@divisor+3,w,c
  9870  003760  5A1B               	subwfb	___llmod@dividend+3,f,c
  9871  003762                     l1965:
  9872  003762  90D8               	bcf	status,0,c
  9873  003764  321F               	rrcf	___llmod@divisor+3,f,c
  9874  003766  321E               	rrcf	___llmod@divisor+2,f,c
  9875  003768  321D               	rrcf	___llmod@divisor+1,f,c
  9876  00376A  321C               	rrcf	___llmod@divisor,f,c
  9877  00376C  2E20               	decfsz	___llmod@counter,f,c
  9878  00376E  D7E7               	goto	u8260
  9879  003770                     l1966:
  9880  003770  C018  F018         	movff	___llmod@dividend,?___llmod
  9881  003774  C019  F019         	movff	___llmod@dividend+1,?___llmod+1
  9882  003778  C01A  F01A         	movff	___llmod@dividend+2,?___llmod+2
  9883  00377C  C01B  F01B         	movff	___llmod@dividend+3,?___llmod+3
  9884  003780  0012               	return		;funcret
  9885  003782                     __end_of___llmod:
  9886                           	opt stack 0
  9887                           tosu	equ	0xFFF
  9888                           tosh	equ	0xFFE
  9889                           tosl	equ	0xFFD
  9890                           pclath	equ	0xFFA
  9891                           tblptru	equ	0xFF8
  9892                           tblptrh	equ	0xFF7
  9893                           tblptrl	equ	0xFF6
  9894                           tablat	equ	0xFF5
  9895                           prodh	equ	0xFF4
  9896                           prodl	equ	0xFF3
  9897                           intcon	equ	0xFF2
  9898                           intcon2	equ	0xFF1
  9899                           postinc0	equ	0xFEE
  9900                           plusw0	equ	0xFEB
  9901                           wreg	equ	0xFE8
  9902                           indf1	equ	0xFE7
  9903                           postdec1	equ	0xFE5
  9904                           fsr1h	equ	0xFE2
  9905                           fsr1l	equ	0xFE1
  9906                           indf2	equ	0xFDF
  9907                           postinc2	equ	0xFDE
  9908                           postdec2	equ	0xFDD
  9909                           plusw2	equ	0xFDB
  9910                           fsr2h	equ	0xFDA
  9911                           fsr2l	equ	0xFD9
  9912                           status	equ	0xFD8
  9913                           
  9914 ;; *************** function _SendSystemStartAck *****************
  9915 ;; Defined at:
  9916 ;;		line 153 in file "SystemCommon.c"
  9917 ;; Parameters:    Size  Location     Type
  9918 ;;		None
  9919 ;; Auto vars:     Size  Location     Type
  9920 ;;		None
  9921 ;; Return value:  Size  Location     Type
  9922 ;;                  1    wreg      void 
  9923 ;; Registers used:
  9924 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9925 ;; Tracked objects:
  9926 ;;		On entry : 0/0
  9927 ;;		On exit  : 0/0
  9928 ;;		Unchanged: 0/0
  9929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9930 ;;      Params:         0       0       0       0       0       0       0
  9931 ;;      Locals:         0       0       0       0       0       0       0
  9932 ;;      Temps:          0       0       0       0       0       0       0
  9933 ;;      Totals:         0       0       0       0       0       0       0
  9934 ;;Total ram usage:        0 bytes
  9935 ;; Hardware stack levels used:    1
  9936 ;; Hardware stack levels required when called:    7
  9937 ;; This function calls:
  9938 ;;		_SendAckMessage
  9939 ;; This function is called by:
  9940 ;;		_main
  9941 ;; This function uses a non-reentrant model
  9942 ;;
  9943                           
  9944                           	psect	text50
  9945  004414                     __ptext50:
  9946                           	opt stack 0
  9947  004414                     _SendSystemStartAck:
  9948                           	opt stack 23
  9949                           
  9950                           ;SystemCommon.c: 155: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_SYSTE
      +                          M_START);
  9951                           
  9952                           ;incstack = 0
  9953  004414  0E10               	movlw	16
  9954  004416  6E24               	movwf	SendAckMessage@inRequest,c
  9955  004418  0E01               	movlw	1
  9956  00441A  ECAF  F01D         	call	_SendAckMessage
  9957  00441E  0012               	return		;funcret
  9958  004420                     __end_of_SendSystemStartAck:
  9959                           	opt stack 0
  9960                           tosu	equ	0xFFF
  9961                           tosh	equ	0xFFE
  9962                           tosl	equ	0xFFD
  9963                           pclath	equ	0xFFA
  9964                           tblptru	equ	0xFF8
  9965                           tblptrh	equ	0xFF7
  9966                           tblptrl	equ	0xFF6
  9967                           tablat	equ	0xFF5
  9968                           prodh	equ	0xFF4
  9969                           prodl	equ	0xFF3
  9970                           intcon	equ	0xFF2
  9971                           intcon2	equ	0xFF1
  9972                           postinc0	equ	0xFEE
  9973                           plusw0	equ	0xFEB
  9974                           wreg	equ	0xFE8
  9975                           indf1	equ	0xFE7
  9976                           postdec1	equ	0xFE5
  9977                           fsr1h	equ	0xFE2
  9978                           fsr1l	equ	0xFE1
  9979                           indf2	equ	0xFDF
  9980                           postinc2	equ	0xFDE
  9981                           postdec2	equ	0xFDD
  9982                           plusw2	equ	0xFDB
  9983                           fsr2h	equ	0xFDA
  9984                           fsr2l	equ	0xFD9
  9985                           status	equ	0xFD8
  9986                           
  9987 ;; *************** function _SendAckMessage *****************
  9988 ;; Defined at:
  9989 ;;		line 171 in file "EusartApp.c"
  9990 ;; Parameters:    Size  Location     Type
  9991 ;;  inGroup         1    wreg     enum E7193
  9992 ;;  inRequest       1   35[COMRAM] enum E7201
  9993 ;; Auto vars:     Size  Location     Type
  9994 ;;  inGroup         1   36[COMRAM] enum E7193
  9995 ;;  TxMsg           6   37[COMRAM] unsigned char [6]
  9996 ;; Return value:  Size  Location     Type
  9997 ;;                  1    wreg      void 
  9998 ;; Registers used:
  9999 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10000 ;; Tracked objects:
 10001 ;;		On entry : 0/0
 10002 ;;		On exit  : 0/0
 10003 ;;		Unchanged: 0/0
 10004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10005 ;;      Params:         1       0       0       0       0       0       0
 10006 ;;      Locals:         7       0       0       0       0       0       0
 10007 ;;      Temps:          0       0       0       0       0       0       0
 10008 ;;      Totals:         8       0       0       0       0       0       0
 10009 ;;Total ram usage:        8 bytes
 10010 ;; Hardware stack levels used:    1
 10011 ;; Hardware stack levels required when called:    6
 10012 ;; This function calls:
 10013 ;;		_WriteUartMessage
 10014 ;;		_ZeroArray
 10015 ;;		_crc8
 10016 ;; This function is called by:
 10017 ;;		_testLeds
 10018 ;;		_SetChannelMode
 10019 ;;		_FlashReadUart
 10020 ;;		_FlashEreaseMem
 10021 ;;		_DacSetValue
 10022 ;;		_UpdateSynthFreq
 10023 ;;		_SetSynthOper
 10024 ;;		_ResetMcu
 10025 ;;		_SendSystemStartAck
 10026 ;;		_keepAliveSignalUart
 10027 ;; This function uses a non-reentrant model
 10028 ;;
 10029                           
 10030                           	psect	text51
 10031  003B5E                     __ptext51:
 10032                           	opt stack 0
 10033  003B5E                     _SendAckMessage:
 10034                           	opt stack 21
 10035                           
 10036                           ;incstack = 0
 10037                           ;SendAckMessage@inGroup stored from wreg
 10038  003B5E  6E25               	movwf	SendAckMessage@inGroup,c
 10039                           
 10040                           ;EusartApp.c: 174: char TxMsg[(0x5) + 1];
 10041                           ;EusartApp.c: 175: ZeroArray(TxMsg, (0x5) + 1);
 10042  003B60  0E26               	movlw	low SendAckMessage@TxMsg
 10043  003B62  6E20               	movwf	ZeroArray@array,c
 10044  003B64  0E00               	movlw	high SendAckMessage@TxMsg
 10045  003B66  6E21               	movwf	ZeroArray@array+1,c
 10046  003B68  0E00               	movlw	0
 10047  003B6A  6E23               	movwf	ZeroArray@size+1,c
 10048  003B6C  0E06               	movlw	6
 10049  003B6E  6E22               	movwf	ZeroArray@size,c
 10050  003B70  EC57  F021         	call	_ZeroArray	;wreg free
 10051                           
 10052                           ;EusartApp.c: 178: TxMsg[(0)] = (0x24);
 10053  003B74  0E24               	movlw	36
 10054  003B76  6E26               	movwf	SendAckMessage@TxMsg,c
 10055                           
 10056                           ;EusartApp.c: 179: TxMsg[(1)] = inGroup;
 10057  003B78  C025  F027         	movff	SendAckMessage@inGroup,SendAckMessage@TxMsg+1
 10058                           
 10059                           ;EusartApp.c: 180: TxMsg[(2)] = inRequest;
 10060  003B7C  C024  F028         	movff	SendAckMessage@inRequest,SendAckMessage@TxMsg+2
 10061                           
 10062                           ;EusartApp.c: 181: TxMsg[(3)] = 0;
 10063  003B80  0E00               	movlw	0
 10064  003B82  6E29               	movwf	SendAckMessage@TxMsg+3,c
 10065                           
 10066                           ;EusartApp.c: 183: TxMsg[(0x5)] = crc8(TxMsg, (0x5));
 10067  003B84  0E26               	movlw	low SendAckMessage@TxMsg
 10068  003B86  6E18               	movwf	crc8@dataArray,c
 10069  003B88  0E00               	movlw	high SendAckMessage@TxMsg
 10070  003B8A  6E19               	movwf	crc8@dataArray+1,c
 10071  003B8C  0E00               	movlw	0
 10072  003B8E  6E1B               	movwf	crc8@dataSize+1,c
 10073  003B90  0E05               	movlw	5
 10074  003B92  6E1A               	movwf	crc8@dataSize,c
 10075  003B94  ECD8  F01D         	call	_crc8	;wreg free
 10076  003B98  6E2B               	movwf	SendAckMessage@TxMsg+5,c
 10077                           
 10078                           ;EusartApp.c: 185: WriteUartMessage(TxMsg, (0x5) + 1);
 10079  003B9A  0E26               	movlw	low SendAckMessage@TxMsg
 10080  003B9C  6E19               	movwf	WriteUartMessage@dataBuf,c
 10081  003B9E  0E00               	movlw	high SendAckMessage@TxMsg
 10082  003BA0  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
 10083  003BA2  0E00               	movlw	0
 10084  003BA4  6E1C               	movwf	WriteUartMessage@dataSize+1,c
 10085  003BA6  0E06               	movlw	6
 10086  003BA8  6E1B               	movwf	WriteUartMessage@dataSize,c
 10087  003BAA  EC8A  F01F         	call	_WriteUartMessage	;wreg free
 10088  003BAE  0012               	return		;funcret
 10089  003BB0                     __end_of_SendAckMessage:
 10090                           	opt stack 0
 10091                           tosu	equ	0xFFF
 10092                           tosh	equ	0xFFE
 10093                           tosl	equ	0xFFD
 10094                           pclath	equ	0xFFA
 10095                           tblptru	equ	0xFF8
 10096                           tblptrh	equ	0xFF7
 10097                           tblptrl	equ	0xFF6
 10098                           tablat	equ	0xFF5
 10099                           prodh	equ	0xFF4
 10100                           prodl	equ	0xFF3
 10101                           intcon	equ	0xFF2
 10102                           intcon2	equ	0xFF1
 10103                           postinc0	equ	0xFEE
 10104                           plusw0	equ	0xFEB
 10105                           wreg	equ	0xFE8
 10106                           indf1	equ	0xFE7
 10107                           postdec1	equ	0xFE5
 10108                           fsr1h	equ	0xFE2
 10109                           fsr1l	equ	0xFE1
 10110                           indf2	equ	0xFDF
 10111                           postinc2	equ	0xFDE
 10112                           postdec2	equ	0xFDD
 10113                           plusw2	equ	0xFDB
 10114                           fsr2h	equ	0xFDA
 10115                           fsr2l	equ	0xFD9
 10116                           status	equ	0xFD8
 10117                           
 10118 ;; *************** function _crc8 *****************
 10119 ;; Defined at:
 10120 ;;		line 13 in file "SystemCommon.c"
 10121 ;; Parameters:    Size  Location     Type
 10122 ;;  dataArray       2   23[COMRAM] PTR unsigned char 
 10123 ;;		 -> GetMcuRunTime@TxMsg(9), GetMcuFwVersion@TxMsg(18), SynthReadData@TxMsg(29), DacReadValue@TxMsg(7), 
 10124 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), rxMsgQueue(20), 
 10125 ;;  dataSize        2   25[COMRAM] int 
 10126 ;; Auto vars:     Size  Location     Type
 10127 ;;  i               2   30[COMRAM] int 
 10128 ;;  crc             2   28[COMRAM] int 
 10129 ;; Return value:  Size  Location     Type
 10130 ;;                  1    wreg      unsigned char 
 10131 ;; Registers used:
 10132 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10133 ;; Tracked objects:
 10134 ;;		On entry : 0/0
 10135 ;;		On exit  : 0/0
 10136 ;;		Unchanged: 0/0
 10137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10138 ;;      Params:         4       0       0       0       0       0       0
 10139 ;;      Locals:         4       0       0       0       0       0       0
 10140 ;;      Temps:          1       0       0       0       0       0       0
 10141 ;;      Totals:         9       0       0       0       0       0       0
 10142 ;;Total ram usage:        9 bytes
 10143 ;; Hardware stack levels used:    1
 10144 ;; Hardware stack levels required when called:    4
 10145 ;; This function calls:
 10146 ;;		Nothing
 10147 ;; This function is called by:
 10148 ;;		_readUartMessage
 10149 ;;		_SendAckMessage
 10150 ;;		_FlashReadUart
 10151 ;;		_FlashReadCondition
 10152 ;;		_DacReadValue
 10153 ;;		_SynthReadData
 10154 ;;		_GetMcuFwVersion
 10155 ;;		_GetMcuRunTime
 10156 ;; This function uses a non-reentrant model
 10157 ;;
 10158                           
 10159                           	psect	text52
 10160  003BB0                     __ptext52:
 10161                           	opt stack 0
 10162  003BB0                     _crc8:
 10163                           	opt stack 25
 10164                           
 10165                           ;SystemCommon.c: 15: int crc = 0;
 10166                           
 10167                           ;incstack = 0
 10168  003BB0  0E00               	movlw	0
 10169  003BB2  6E1E               	movwf	crc8@crc+1,c
 10170  003BB4  0E00               	movlw	0
 10171  003BB6  6E1D               	movwf	crc8@crc,c
 10172                           
 10173                           ;SystemCommon.c: 16: for (int i = 0; i < dataSize; i++)
 10174  003BB8  0E00               	movlw	0
 10175  003BBA  6E20               	movwf	crc8@i+1,c
 10176  003BBC  0E00               	movlw	0
 10177  003BBE  6E1F               	movwf	crc8@i,c
 10178  003BC0  D00E               	goto	l1393
 10179  003BC2                     
 10180                           ;SystemCommon.c: 17: {
 10181                           ;SystemCommon.c: 18: crc += dataArray[i];
 10182  003BC2  501F               	movf	crc8@i,w,c
 10183  003BC4  2418               	addwf	crc8@dataArray,w,c
 10184  003BC6  6ED9               	movwf	fsr2l,c
 10185  003BC8  5020               	movf	crc8@i+1,w,c
 10186  003BCA  2019               	addwfc	crc8@dataArray+1,w,c
 10187  003BCC  6EDA               	movwf	fsr2h,c
 10188  003BCE  50DF               	movf	indf2,w,c
 10189  003BD0  6E1C               	movwf	??_crc8& (0+255),c
 10190  003BD2  501C               	movf	??_crc8,w,c
 10191  003BD4  261D               	addwf	crc8@crc,f,c
 10192  003BD6  0E00               	movlw	0
 10193  003BD8  221E               	addwfc	crc8@crc+1,f,c
 10194  003BDA  4A1F               	infsnz	crc8@i,f,c
 10195  003BDC  2A20               	incf	crc8@i+1,f,c
 10196  003BDE                     l1393:
 10197  003BDE  501A               	movf	crc8@dataSize,w,c
 10198  003BE0  5C1F               	subwf	crc8@i,w,c
 10199  003BE2  5020               	movf	crc8@i+1,w,c
 10200  003BE4  0A80               	xorlw	128
 10201  003BE6  6E1C               	movwf	??_crc8& (0+255),c
 10202  003BE8  501B               	movf	crc8@dataSize+1,w,c
 10203  003BEA  0A80               	xorlw	128
 10204  003BEC  581C               	subwfb	??_crc8& (0+255),w,c
 10205  003BEE  A0D8               	btfss	status,0,c
 10206  003BF0  D7E8               	goto	l1394
 10207                           
 10208                           ;SystemCommon.c: 19: }
 10209                           ;SystemCommon.c: 20: crc &= 0xff;
 10210  003BF2  0EFF               	movlw	255
 10211  003BF4  161D               	andwf	crc8@crc,f,c
 10212  003BF6  0E00               	movlw	0
 10213  003BF8  161E               	andwf	crc8@crc+1,f,c
 10214                           
 10215                           ;SystemCommon.c: 21: return crc;
 10216  003BFA  501D               	movf	crc8@crc,w,c
 10217  003BFC  0012               	return	
 10218  003BFE                     __end_of_crc8:
 10219                           	opt stack 0
 10220                           tosu	equ	0xFFF
 10221                           tosh	equ	0xFFE
 10222                           tosl	equ	0xFFD
 10223                           pclath	equ	0xFFA
 10224                           tblptru	equ	0xFF8
 10225                           tblptrh	equ	0xFF7
 10226                           tblptrl	equ	0xFF6
 10227                           tablat	equ	0xFF5
 10228                           prodh	equ	0xFF4
 10229                           prodl	equ	0xFF3
 10230                           intcon	equ	0xFF2
 10231                           intcon2	equ	0xFF1
 10232                           postinc0	equ	0xFEE
 10233                           plusw0	equ	0xFEB
 10234                           wreg	equ	0xFE8
 10235                           indf1	equ	0xFE7
 10236                           postdec1	equ	0xFE5
 10237                           fsr1h	equ	0xFE2
 10238                           fsr1l	equ	0xFE1
 10239                           indf2	equ	0xFDF
 10240                           postinc2	equ	0xFDE
 10241                           postdec2	equ	0xFDD
 10242                           plusw2	equ	0xFDB
 10243                           fsr2h	equ	0xFDA
 10244                           fsr2l	equ	0xFD9
 10245                           status	equ	0xFD8
 10246                           
 10247 ;; *************** function _ZeroArray *****************
 10248 ;; Defined at:
 10249 ;;		line 24 in file "SystemCommon.c"
 10250 ;; Parameters:    Size  Location     Type
 10251 ;;  array           2   31[COMRAM] PTR unsigned char 
 10252 ;;		 -> GetMcuFwVersion@TxMsg(18), GetIntFromUartData@dataRegArr(10), SynthReadData@TxMsg(29), SynthReadData@eepromDataA
      +rray(20), 
 10253 ;;		 -> DacReadValue@TxMsg(7), FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), sampleArray(64), 
 10254 ;;		 -> SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), 
 10255 ;;  size            2   33[COMRAM] int 
 10256 ;; Auto vars:     Size  Location     Type
 10257 ;;		None
 10258 ;; Return value:  Size  Location     Type
 10259 ;;                  1    wreg      void 
 10260 ;; Registers used:
 10261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10262 ;; Tracked objects:
 10263 ;;		On entry : 0/0
 10264 ;;		On exit  : 0/0
 10265 ;;		Unchanged: 0/0
 10266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10267 ;;      Params:         4       0       0       0       0       0       0
 10268 ;;      Locals:         0       0       0       0       0       0       0
 10269 ;;      Temps:          0       0       0       0       0       0       0
 10270 ;;      Totals:         4       0       0       0       0       0       0
 10271 ;;Total ram usage:        4 bytes
 10272 ;; Hardware stack levels used:    1
 10273 ;; Hardware stack levels required when called:    5
 10274 ;; This function calls:
 10275 ;;		_memset
 10276 ;; This function is called by:
 10277 ;;		_readUartMessage
 10278 ;;		_InitRxMessageParams
 10279 ;;		_SendAckMessage
 10280 ;;		_FlashReadUart
 10281 ;;		_FlashEreaseMem
 10282 ;;		_FlashReadCondition
 10283 ;;		_DacReadValue
 10284 ;;		_SynthReadData
 10285 ;;		_GetIntFromUartData
 10286 ;;		_GetMcuFwVersion
 10287 ;; This function uses a non-reentrant model
 10288 ;;
 10289                           
 10290                           	psect	text53
 10291  0042AE                     __ptext53:
 10292                           	opt stack 0
 10293  0042AE                     _ZeroArray:
 10294                           	opt stack 24
 10295                           
 10296                           ;SystemCommon.c: 26: memset(array, 0x0, size);
 10297                           
 10298                           ;incstack = 0
 10299  0042AE  C020  F018         	movff	ZeroArray@array,memset@p1
 10300  0042B2  C021  F019         	movff	ZeroArray@array+1,memset@p1+1
 10301  0042B6  0E00               	movlw	0
 10302  0042B8  6E1B               	movwf	memset@c+1,c
 10303  0042BA  0E00               	movlw	0
 10304  0042BC  6E1A               	movwf	memset@c,c
 10305  0042BE  C022  F01C         	movff	ZeroArray@size,memset@n
 10306  0042C2  C023  F01D         	movff	ZeroArray@size+1,memset@n+1
 10307  0042C6  EC6D  F020         	call	_memset	;wreg free
 10308  0042CA  0012               	return		;funcret
 10309  0042CC                     __end_of_ZeroArray:
 10310                           	opt stack 0
 10311                           tosu	equ	0xFFF
 10312                           tosh	equ	0xFFE
 10313                           tosl	equ	0xFFD
 10314                           pclath	equ	0xFFA
 10315                           tblptru	equ	0xFF8
 10316                           tblptrh	equ	0xFF7
 10317                           tblptrl	equ	0xFF6
 10318                           tablat	equ	0xFF5
 10319                           prodh	equ	0xFF4
 10320                           prodl	equ	0xFF3
 10321                           intcon	equ	0xFF2
 10322                           intcon2	equ	0xFF1
 10323                           postinc0	equ	0xFEE
 10324                           plusw0	equ	0xFEB
 10325                           wreg	equ	0xFE8
 10326                           indf1	equ	0xFE7
 10327                           postdec1	equ	0xFE5
 10328                           fsr1h	equ	0xFE2
 10329                           fsr1l	equ	0xFE1
 10330                           indf2	equ	0xFDF
 10331                           postinc2	equ	0xFDE
 10332                           postdec2	equ	0xFDD
 10333                           plusw2	equ	0xFDB
 10334                           fsr2h	equ	0xFDA
 10335                           fsr2l	equ	0xFD9
 10336                           status	equ	0xFD8
 10337                           
 10338 ;; *************** function _WriteUartMessage *****************
 10339 ;; Defined at:
 10340 ;;		line 158 in file "EusartApp.c"
 10341 ;; Parameters:    Size  Location     Type
 10342 ;;  dataBuf         2   24[COMRAM] PTR unsigned char 
 10343 ;;		 -> GetMcuRunTime@TxMsg(9), GetMcuFwVersion@TxMsg(18), SynthReadData@TxMsg(29), DacReadValue@TxMsg(7), 
 10344 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), 
 10345 ;;  dataSize        2   26[COMRAM] int 
 10346 ;; Auto vars:     Size  Location     Type
 10347 ;;  idx             2   29[COMRAM] int 
 10348 ;; Return value:  Size  Location     Type
 10349 ;;                  1    wreg      void 
 10350 ;; Registers used:
 10351 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10352 ;; Tracked objects:
 10353 ;;		On entry : 0/0
 10354 ;;		On exit  : 0/0
 10355 ;;		Unchanged: 0/0
 10356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10357 ;;      Params:         4       0       0       0       0       0       0
 10358 ;;      Locals:         2       0       0       0       0       0       0
 10359 ;;      Temps:          1       0       0       0       0       0       0
 10360 ;;      Totals:         7       0       0       0       0       0       0
 10361 ;;Total ram usage:        7 bytes
 10362 ;; Hardware stack levels used:    1
 10363 ;; Hardware stack levels required when called:    5
 10364 ;; This function calls:
 10365 ;;		_EUSART1_Write
 10366 ;; This function is called by:
 10367 ;;		_SendAckMessage
 10368 ;;		_FlashReadUart
 10369 ;;		_FlashReadCondition
 10370 ;;		_DacReadValue
 10371 ;;		_SynthReadData
 10372 ;;		_GetMcuFwVersion
 10373 ;;		_GetMcuRunTime
 10374 ;; This function uses a non-reentrant model
 10375 ;;
 10376                           
 10377                           	psect	text54
 10378  003F14                     __ptext54:
 10379                           	opt stack 0
 10380  003F14                     _WriteUartMessage:
 10381                           	opt stack 21
 10382                           
 10383                           ;EusartApp.c: 160: for(int idx = 0; idx < dataSize; idx++)
 10384                           
 10385                           ;incstack = 0
 10386  003F14  0E00               	movlw	0
 10387  003F16  6E1F               	movwf	WriteUartMessage@idx+1,c
 10388  003F18  0E00               	movlw	0
 10389  003F1A  6E1E               	movwf	WriteUartMessage@idx,c
 10390  003F1C  D00B               	goto	l234
 10391  003F1E                     
 10392                           ;EusartApp.c: 161: {
 10393                           ;EusartApp.c: 162: EUSART1_Write(dataBuf[idx]);
 10394  003F1E  501E               	movf	WriteUartMessage@idx,w,c
 10395  003F20  2419               	addwf	WriteUartMessage@dataBuf,w,c
 10396  003F22  6ED9               	movwf	fsr2l,c
 10397  003F24  501F               	movf	WriteUartMessage@idx+1,w,c
 10398  003F26  201A               	addwfc	WriteUartMessage@dataBuf+1,w,c
 10399  003F28  6EDA               	movwf	fsr2h,c
 10400  003F2A  50DF               	movf	indf2,w,c
 10401  003F2C  ECA4  F01E         	call	_EUSART1_Write
 10402  003F30  4A1E               	infsnz	WriteUartMessage@idx,f,c
 10403  003F32  2A1F               	incf	WriteUartMessage@idx+1,f,c
 10404  003F34                     l234:
 10405  003F34  501B               	movf	WriteUartMessage@dataSize,w,c
 10406  003F36  5C1E               	subwf	WriteUartMessage@idx,w,c
 10407  003F38  501F               	movf	WriteUartMessage@idx+1,w,c
 10408  003F3A  0A80               	xorlw	128
 10409  003F3C  6E1D               	movwf	??_WriteUartMessage& (0+255),c
 10410  003F3E  501C               	movf	WriteUartMessage@dataSize+1,w,c
 10411  003F40  0A80               	xorlw	128
 10412  003F42  581D               	subwfb	??_WriteUartMessage& (0+255),w,c
 10413  003F44  B0D8               	btfsc	status,0,c
 10414  003F46  0012               	return	
 10415  003F48  D7EA               	goto	l235
 10416  003F4A                     __end_of_WriteUartMessage:
 10417                           	opt stack 0
 10418                           tosu	equ	0xFFF
 10419                           tosh	equ	0xFFE
 10420                           tosl	equ	0xFFD
 10421                           pclath	equ	0xFFA
 10422                           tblptru	equ	0xFF8
 10423                           tblptrh	equ	0xFF7
 10424                           tblptrl	equ	0xFF6
 10425                           tablat	equ	0xFF5
 10426                           prodh	equ	0xFF4
 10427                           prodl	equ	0xFF3
 10428                           intcon	equ	0xFF2
 10429                           intcon2	equ	0xFF1
 10430                           postinc0	equ	0xFEE
 10431                           plusw0	equ	0xFEB
 10432                           wreg	equ	0xFE8
 10433                           indf1	equ	0xFE7
 10434                           postdec1	equ	0xFE5
 10435                           fsr1h	equ	0xFE2
 10436                           fsr1l	equ	0xFE1
 10437                           indf2	equ	0xFDF
 10438                           postinc2	equ	0xFDE
 10439                           postdec2	equ	0xFDD
 10440                           plusw2	equ	0xFDB
 10441                           fsr2h	equ	0xFDA
 10442                           fsr2l	equ	0xFD9
 10443                           status	equ	0xFD8
 10444                           
 10445 ;; *************** function _EUSART1_Write *****************
 10446 ;; Defined at:
 10447 ;;		line 157 in file "mcc_generated_files/eusart1.c"
 10448 ;; Parameters:    Size  Location     Type
 10449 ;;  txData          1    wreg     unsigned char 
 10450 ;; Auto vars:     Size  Location     Type
 10451 ;;  txData          1   23[COMRAM] unsigned char 
 10452 ;; Return value:  Size  Location     Type
 10453 ;;                  1    wreg      void 
 10454 ;; Registers used:
 10455 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10456 ;; Tracked objects:
 10457 ;;		On entry : 0/0
 10458 ;;		On exit  : 0/0
 10459 ;;		Unchanged: 0/0
 10460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10461 ;;      Params:         0       0       0       0       0       0       0
 10462 ;;      Locals:         1       0       0       0       0       0       0
 10463 ;;      Temps:          0       0       0       0       0       0       0
 10464 ;;      Totals:         1       0       0       0       0       0       0
 10465 ;;Total ram usage:        1 bytes
 10466 ;; Hardware stack levels used:    1
 10467 ;; Hardware stack levels required when called:    4
 10468 ;; This function calls:
 10469 ;;		Nothing
 10470 ;; This function is called by:
 10471 ;;		_WriteUartMessage
 10472 ;; This function uses a non-reentrant model
 10473 ;;
 10474                           
 10475                           	psect	text55
 10476  003D48                     __ptext55:
 10477                           	opt stack 0
 10478  003D48                     _EUSART1_Write:
 10479                           	opt stack 21
 10480                           
 10481                           ;incstack = 0
 10482                           ;EUSART1_Write@txData stored from wreg
 10483  003D48  6E18               	movwf	EUSART1_Write@txData,c
 10484  003D4A                     
 10485                           ;eusart1.c: 160: {
 10486                           
 10487                           ;eusart1.c: 159: while(0 == eusart1TxBufferRemaining)
 10488  003D4A  0101               	movlb	1	; () banked
 10489  003D4C  51D2               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
 10490  003D4E  B4D8               	btfsc	status,2,c
 10491  003D50  D7FC               	goto	l7659
 10492                           
 10493                           ; BSR set to: 1
 10494                           ;eusart1.c: 161: }
 10495                           ;eusart1.c: 163: if(0 == PIE1bits.TX1IE)
 10496  003D52  B89D               	btfsc	3997,4,c	;volatile
 10497  003D54  D003               	goto	l912
 10498                           
 10499                           ; BSR set to: 1
 10500                           ;eusart1.c: 164: {
 10501                           ;eusart1.c: 165: TXREG1 = txData;
 10502  003D56  C018  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
 10503                           
 10504                           ;eusart1.c: 166: }
 10505  003D5A  D012               	goto	l913
 10506  003D5C                     l912:
 10507                           
 10508                           ; BSR set to: 1
 10509                           ;eusart1.c: 167: else
 10510                           ;eusart1.c: 168: {
 10511                           ;eusart1.c: 169: PIE1bits.TX1IE = 0;
 10512  003D5C  989D               	bcf	3997,4,c	;volatile
 10513                           
 10514                           ; BSR set to: 1
 10515                           ;eusart1.c: 170: eusart1TxBuffer[eusart1TxHead++] = txData;
 10516  003D5E  5036               	movf	_eusart1TxHead,w,c	;volatile
 10517  003D60  0D01               	mullw	1
 10518  003D62  0E00               	movlw	low _eusart1TxBuffer
 10519  003D64  24F3               	addwf	prodl,w,c
 10520  003D66  6ED9               	movwf	fsr2l,c
 10521  003D68  0E02               	movlw	high _eusart1TxBuffer
 10522  003D6A  20F4               	addwfc	prodh,w,c
 10523  003D6C  6EDA               	movwf	fsr2h,c
 10524  003D6E  C018  FFDF         	movff	EUSART1_Write@txData,indf2
 10525                           
 10526                           ; BSR set to: 1
 10527  003D72  2A36               	incf	_eusart1TxHead,f,c	;volatile
 10528                           
 10529                           ; BSR set to: 1
 10530                           ;eusart1.c: 171: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
 10531  003D74  0E45               	movlw	69
 10532  003D76  6436               	cpfsgt	_eusart1TxHead,c	;volatile
 10533  003D78  D002               	goto	l914
 10534                           
 10535                           ; BSR set to: 1
 10536                           ;eusart1.c: 172: {
 10537                           ;eusart1.c: 173: eusart1TxHead = 0;
 10538  003D7A  0E00               	movlw	0
 10539  003D7C  6E36               	movwf	_eusart1TxHead,c	;volatile
 10540  003D7E                     l914:
 10541                           
 10542                           ; BSR set to: 1
 10543                           ;eusart1.c: 174: }
 10544                           ;eusart1.c: 175: eusart1TxBufferRemaining--;
 10545                           
 10546                           ; BSR set to: 1
 10547  003D7E  07D2               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 10548  003D80                     l913:
 10549                           
 10550                           ; BSR set to: 1
 10551                           ;eusart1.c: 176: }
 10552                           ;eusart1.c: 177: PIE1bits.TX1IE = 1;
 10553                           
 10554                           ; BSR set to: 1
 10555  003D80  889D               	bsf	3997,4,c	;volatile
 10556                           
 10557                           ; BSR set to: 1
 10558  003D82  0012               	return		;funcret
 10559  003D84                     __end_of_EUSART1_Write:
 10560                           	opt stack 0
 10561                           tosu	equ	0xFFF
 10562                           tosh	equ	0xFFE
 10563                           tosl	equ	0xFFD
 10564                           pclath	equ	0xFFA
 10565                           tblptru	equ	0xFF8
 10566                           tblptrh	equ	0xFF7
 10567                           tblptrl	equ	0xFF6
 10568                           tablat	equ	0xFF5
 10569                           prodh	equ	0xFF4
 10570                           prodl	equ	0xFF3
 10571                           intcon	equ	0xFF2
 10572                           intcon2	equ	0xFF1
 10573                           postinc0	equ	0xFEE
 10574                           plusw0	equ	0xFEB
 10575                           wreg	equ	0xFE8
 10576                           indf1	equ	0xFE7
 10577                           postdec1	equ	0xFE5
 10578                           fsr1h	equ	0xFE2
 10579                           fsr1l	equ	0xFE1
 10580                           indf2	equ	0xFDF
 10581                           postinc2	equ	0xFDE
 10582                           postdec2	equ	0xFDD
 10583                           plusw2	equ	0xFDB
 10584                           fsr2h	equ	0xFDA
 10585                           fsr2l	equ	0xFD9
 10586                           status	equ	0xFD8
 10587                           
 10588 ;; *************** function _InitSystemApplicationManagers *****************
 10589 ;; Defined at:
 10590 ;;		line 33 in file "SystemSettings.c"
 10591 ;; Parameters:    Size  Location     Type
 10592 ;;		None
 10593 ;; Auto vars:     Size  Location     Type
 10594 ;;		None
 10595 ;; Return value:  Size  Location     Type
 10596 ;;                  1    wreg      void 
 10597 ;; Registers used:
 10598 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10599 ;; Tracked objects:
 10600 ;;		On entry : 0/0
 10601 ;;		On exit  : 0/0
 10602 ;;		Unchanged: 0/0
 10603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10604 ;;      Params:         0       0       0       0       0       0       0
 10605 ;;      Locals:         0       0       0       0       0       0       0
 10606 ;;      Temps:          0       0       0       0       0       0       0
 10607 ;;      Totals:         0       0       0       0       0       0       0
 10608 ;;Total ram usage:        0 bytes
 10609 ;; Hardware stack levels used:    1
 10610 ;; Hardware stack levels required when called:   12
 10611 ;; This function calls:
 10612 ;;		_ClearMcuRunTime
 10613 ;;		_DacInit
 10614 ;;		_InitAdcApplicationMgr
 10615 ;;		_PLLInitialize
 10616 ;;		_TMR0_StartTimer
 10617 ;; This function is called by:
 10618 ;;		_main
 10619 ;; This function uses a non-reentrant model
 10620 ;;
 10621                           
 10622                           	psect	text56
 10623  00434C                     __ptext56:
 10624                           	opt stack 0
 10625  00434C                     _InitSystemApplicationManagers:
 10626                           	opt stack 18
 10627                           
 10628                           ;SystemSettings.c: 36: InitAdcApplicationMgr();
 10629                           
 10630                           ; BSR set to: 1
 10631                           ;incstack = 0
 10632  00434C  EC2D  F022         	call	_InitAdcApplicationMgr	;wreg free
 10633                           
 10634                           ;SystemSettings.c: 39: TMR0_StartTimer();
 10635  004350  EC32  F022         	call	_TMR0_StartTimer	;wreg free
 10636                           
 10637                           ;SystemSettings.c: 42: PLLInitialize();
 10638  004354  EC85  F01E         	call	_PLLInitialize	;wreg free
 10639                           
 10640                           ;SystemSettings.c: 45: ClearMcuRunTime();
 10641  004358  ECC5  F021         	call	_ClearMcuRunTime	;wreg free
 10642                           
 10643                           ;SystemSettings.c: 48: DacInit();
 10644  00435C  EC59  F014         	call	_DacInit	;wreg free
 10645  004360  0012               	return		;funcret
 10646  004362                     __end_of_InitSystemApplicationManagers:
 10647                           	opt stack 0
 10648                           tosu	equ	0xFFF
 10649                           tosh	equ	0xFFE
 10650                           tosl	equ	0xFFD
 10651                           pclath	equ	0xFFA
 10652                           tblptru	equ	0xFF8
 10653                           tblptrh	equ	0xFF7
 10654                           tblptrl	equ	0xFF6
 10655                           tablat	equ	0xFF5
 10656                           prodh	equ	0xFF4
 10657                           prodl	equ	0xFF3
 10658                           intcon	equ	0xFF2
 10659                           intcon2	equ	0xFF1
 10660                           postinc0	equ	0xFEE
 10661                           plusw0	equ	0xFEB
 10662                           wreg	equ	0xFE8
 10663                           indf1	equ	0xFE7
 10664                           postdec1	equ	0xFE5
 10665                           fsr1h	equ	0xFE2
 10666                           fsr1l	equ	0xFE1
 10667                           indf2	equ	0xFDF
 10668                           postinc2	equ	0xFDE
 10669                           postdec2	equ	0xFDD
 10670                           plusw2	equ	0xFDB
 10671                           fsr2h	equ	0xFDA
 10672                           fsr2l	equ	0xFD9
 10673                           status	equ	0xFD8
 10674                           
 10675 ;; *************** function _TMR0_StartTimer *****************
 10676 ;; Defined at:
 10677 ;;		line 93 in file "mcc_generated_files/tmr0.c"
 10678 ;; Parameters:    Size  Location     Type
 10679 ;;		None
 10680 ;; Auto vars:     Size  Location     Type
 10681 ;;		None
 10682 ;; Return value:  Size  Location     Type
 10683 ;;                  1    wreg      void 
 10684 ;; Registers used:
 10685 ;;		None
 10686 ;; Tracked objects:
 10687 ;;		On entry : 0/0
 10688 ;;		On exit  : 0/0
 10689 ;;		Unchanged: 0/0
 10690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10691 ;;      Params:         0       0       0       0       0       0       0
 10692 ;;      Locals:         0       0       0       0       0       0       0
 10693 ;;      Temps:          0       0       0       0       0       0       0
 10694 ;;      Totals:         0       0       0       0       0       0       0
 10695 ;;Total ram usage:        0 bytes
 10696 ;; Hardware stack levels used:    1
 10697 ;; Hardware stack levels required when called:    4
 10698 ;; This function calls:
 10699 ;;		Nothing
 10700 ;; This function is called by:
 10701 ;;		_InitSystemApplicationManagers
 10702 ;; This function uses a non-reentrant model
 10703 ;;
 10704                           
 10705                           	psect	text57
 10706  004464                     __ptext57:
 10707                           	opt stack 0
 10708  004464                     _TMR0_StartTimer:
 10709                           	opt stack 25
 10710                           
 10711                           ;tmr0.c: 96: T0CONbits.TMR0ON = 1;
 10712                           
 10713                           ;incstack = 0
 10714  004464  8ED5               	bsf	4053,7,c	;volatile
 10715  004466  0012               	return		;funcret
 10716  004468                     __end_of_TMR0_StartTimer:
 10717                           	opt stack 0
 10718                           tosu	equ	0xFFF
 10719                           tosh	equ	0xFFE
 10720                           tosl	equ	0xFFD
 10721                           pclath	equ	0xFFA
 10722                           tblptru	equ	0xFF8
 10723                           tblptrh	equ	0xFF7
 10724                           tblptrl	equ	0xFF6
 10725                           tablat	equ	0xFF5
 10726                           prodh	equ	0xFF4
 10727                           prodl	equ	0xFF3
 10728                           intcon	equ	0xFF2
 10729                           intcon2	equ	0xFF1
 10730                           postinc0	equ	0xFEE
 10731                           plusw0	equ	0xFEB
 10732                           wreg	equ	0xFE8
 10733                           indf1	equ	0xFE7
 10734                           postdec1	equ	0xFE5
 10735                           fsr1h	equ	0xFE2
 10736                           fsr1l	equ	0xFE1
 10737                           indf2	equ	0xFDF
 10738                           postinc2	equ	0xFDE
 10739                           postdec2	equ	0xFDD
 10740                           plusw2	equ	0xFDB
 10741                           fsr2h	equ	0xFDA
 10742                           fsr2l	equ	0xFD9
 10743                           status	equ	0xFD8
 10744                           
 10745 ;; *************** function _PLLInitialize *****************
 10746 ;; Defined at:
 10747 ;;		line 29 in file "SyntApp.c"
 10748 ;; Parameters:    Size  Location     Type
 10749 ;;		None
 10750 ;; Auto vars:     Size  Location     Type
 10751 ;;		None
 10752 ;; Return value:  Size  Location     Type
 10753 ;;                  1    wreg      void 
 10754 ;; Registers used:
 10755 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10756 ;; Tracked objects:
 10757 ;;		On entry : 0/0
 10758 ;;		On exit  : 0/0
 10759 ;;		Unchanged: 0/0
 10760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10761 ;;      Params:         0       0       0       0       0       0       0
 10762 ;;      Locals:         0       0       0       0       0       0       0
 10763 ;;      Temps:          0       0       0       0       0       0       0
 10764 ;;      Totals:         0       0       0       0       0       0       0
 10765 ;;Total ram usage:        0 bytes
 10766 ;; Hardware stack levels used:    1
 10767 ;; Hardware stack levels required when called:   11
 10768 ;; This function calls:
 10769 ;;		_FillArray
 10770 ;;		_InitSynth
 10771 ;; This function is called by:
 10772 ;;		_InitSystemApplicationManagers
 10773 ;; This function uses a non-reentrant model
 10774 ;;
 10775                           
 10776                           	psect	text58
 10777  003D0A                     __ptext58:
 10778                           	opt stack 0
 10779  003D0A                     _PLLInitialize:
 10780                           	opt stack 18
 10781                           
 10782                           ;SyntApp.c: 31: InitSynth(SYNTH_TX);
 10783                           
 10784                           ;incstack = 0
 10785  003D0A  0E00               	movlw	0
 10786  003D0C  ECA3  F006         	call	_InitSynth
 10787                           
 10788                           ;SyntApp.c: 32: InitSynth(SYNTH_RX);
 10789  003D10  0E01               	movlw	1
 10790  003D12  ECA3  F006         	call	_InitSynth
 10791                           
 10792                           ;SyntApp.c: 35: FillArray(synthLdRxArray, sizeof(synthLdRxArray), 0x0);
 10793  003D16  0EB0               	movlw	low _synthLdRxArray
 10794  003D18  6E20               	movwf	FillArray@array,c
 10795  003D1A  0E01               	movlw	high _synthLdRxArray
 10796  003D1C  6E21               	movwf	FillArray@array+1,c
 10797  003D1E  0E00               	movlw	0
 10798  003D20  6E23               	movwf	FillArray@size+1,c
 10799  003D22  0E0C               	movlw	12
 10800  003D24  6E22               	movwf	FillArray@size,c
 10801  003D26  0E00               	movlw	0
 10802  003D28  6E24               	movwf	FillArray@value,c
 10803  003D2A  EC74  F021         	call	_FillArray	;wreg free
 10804                           
 10805                           ;SyntApp.c: 36: FillArray(synthLdTxArray, sizeof(synthLdTxArray), 0x0);
 10806  003D2E  0EA4               	movlw	low _synthLdTxArray
 10807  003D30  6E20               	movwf	FillArray@array,c
 10808  003D32  0E01               	movlw	high _synthLdTxArray
 10809  003D34  6E21               	movwf	FillArray@array+1,c
 10810  003D36  0E00               	movlw	0
 10811  003D38  6E23               	movwf	FillArray@size+1,c
 10812  003D3A  0E0C               	movlw	12
 10813  003D3C  6E22               	movwf	FillArray@size,c
 10814  003D3E  0E00               	movlw	0
 10815  003D40  6E24               	movwf	FillArray@value,c
 10816  003D42  EC74  F021         	call	_FillArray	;wreg free
 10817  003D46  0012               	return		;funcret
 10818  003D48                     __end_of_PLLInitialize:
 10819                           	opt stack 0
 10820                           tosu	equ	0xFFF
 10821                           tosh	equ	0xFFE
 10822                           tosl	equ	0xFFD
 10823                           pclath	equ	0xFFA
 10824                           tblptru	equ	0xFF8
 10825                           tblptrh	equ	0xFF7
 10826                           tblptrl	equ	0xFF6
 10827                           tablat	equ	0xFF5
 10828                           prodh	equ	0xFF4
 10829                           prodl	equ	0xFF3
 10830                           intcon	equ	0xFF2
 10831                           intcon2	equ	0xFF1
 10832                           postinc0	equ	0xFEE
 10833                           plusw0	equ	0xFEB
 10834                           wreg	equ	0xFE8
 10835                           indf1	equ	0xFE7
 10836                           postdec1	equ	0xFE5
 10837                           fsr1h	equ	0xFE2
 10838                           fsr1l	equ	0xFE1
 10839                           indf2	equ	0xFDF
 10840                           postinc2	equ	0xFDE
 10841                           postdec2	equ	0xFDD
 10842                           plusw2	equ	0xFDB
 10843                           fsr2h	equ	0xFDA
 10844                           fsr2l	equ	0xFD9
 10845                           status	equ	0xFD8
 10846                           
 10847 ;; *************** function _InitSynth *****************
 10848 ;; Defined at:
 10849 ;;		line 39 in file "SyntApp.c"
 10850 ;; Parameters:    Size  Location     Type
 10851 ;;  cType           1    wreg     enum E1
 10852 ;; Auto vars:     Size  Location     Type
 10853 ;;  cType           1  108[BANK0 ] enum E1
 10854 ;;  idx             1  109[BANK0 ] unsigned char 
 10855 ;;  EepromVal       4  104[BANK0 ] unsigned long 
 10856 ;;  regNum          1  110[BANK0 ] unsigned char 
 10857 ;; Return value:  Size  Location     Type
 10858 ;;                  1    wreg      void 
 10859 ;; Registers used:
 10860 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10861 ;; Tracked objects:
 10862 ;;		On entry : 0/0
 10863 ;;		On exit  : 0/0
 10864 ;;		Unchanged: 0/0
 10865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10866 ;;      Params:         0       0       0       0       0       0       0
 10867 ;;      Locals:         0       7       0       0       0       0       0
 10868 ;;      Temps:          0       0       0       0       0       0       0
 10869 ;;      Totals:         0       7       0       0       0       0       0
 10870 ;;Total ram usage:        7 bytes
 10871 ;; Hardware stack levels used:    1
 10872 ;; Hardware stack levels required when called:   10
 10873 ;; This function calls:
 10874 ;;		_ReadIntFromEeprom
 10875 ;;		_SWSPI_send_word
 10876 ;;		_StoreIntInEeprom
 10877 ;;		_SwSpi_Set_CE_Pin
 10878 ;; This function is called by:
 10879 ;;		_PLLInitialize
 10880 ;;		_SetSynthOper
 10881 ;;		_SynthLdDetect
 10882 ;; This function uses a non-reentrant model
 10883 ;;
 10884                           
 10885                           	psect	text59
 10886  000D46                     __ptext59:
 10887                           	opt stack 0
 10888  000D46                     _InitSynth:
 10889                           	opt stack 17
 10890                           
 10891                           ;incstack = 0
 10892                           ;InitSynth@cType stored from wreg
 10893  000D46  0100               	movlb	0	; () banked
 10894  000D48  6FCC               	movwf	InitSynth@cType& (0+255),b
 10895                           
 10896                           ;SyntApp.c: 41: SwSpi_Set_CE_Pin(cType, 1);
 10897  000D4A  0E01               	movlw	1
 10898  000D4C  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
 10899  000D4E  0100               	movlb	0	; () banked
 10900  000D50  51CC               	movf	InitSynth@cType& (0+255),w,b
 10901  000D52  ECC2  F01E         	call	_SwSpi_Set_CE_Pin
 10902                           
 10903                           ;SyntApp.c: 43: uint8_t regNum = 0;
 10904  000D56  0E00               	movlw	0
 10905  000D58  0100               	movlb	0	; () banked
 10906  000D5A  6FCE               	movwf	InitSynth@regNum& (0+255),b
 10907                           
 10908                           ; BSR set to: 0
 10909                           ;SyntApp.c: 44: uint32_t EepromVal = 0x0;
 10910  000D5C  0E00               	movlw	0
 10911  000D5E  6FC8               	movwf	InitSynth@EepromVal& (0+255),b
 10912  000D60  0E00               	movlw	0
 10913  000D62  6FC9               	movwf	(InitSynth@EepromVal+1)& (0+255),b
 10914  000D64  0E00               	movlw	0
 10915  000D66  6FCA               	movwf	(InitSynth@EepromVal+2)& (0+255),b
 10916  000D68  0E00               	movlw	0
 10917  000D6A  6FCB               	movwf	(InitSynth@EepromVal+3)& (0+255),b
 10918                           
 10919                           ; BSR set to: 0
 10920                           ;SyntApp.c: 47: for(uint8_t idx = 0; idx < 13; idx++)
 10921  000D6C  0E00               	movlw	0
 10922  000D6E  6FCD               	movwf	InitSynth@idx& (0+255),b
 10923  000D70                     l8087:
 10924                           
 10925                           ; BSR set to: 0
 10926  000D70  0E0C               	movlw	12
 10927  000D72  65CD               	cpfsgt	InitSynth@idx& (0+255),b
 10928  000D74  D001               	goto	l507
 10929  000D76  0012               	return	
 10930  000D78                     l507:
 10931                           
 10932                           ; BSR set to: 0
 10933                           ;SyntApp.c: 48: {
 10934                           ;SyntApp.c: 49: regNum = 13 - idx - 1;
 10935                           
 10936                           ; BSR set to: 0
 10937  000D78  29CD               	incf	InitSynth@idx& (0+255),w,b
 10938  000D7A  0800               	sublw	0
 10939  000D7C  0F0D               	addlw	13
 10940  000D7E  6FCE               	movwf	InitSynth@regNum& (0+255),b
 10941                           
 10942                           ; BSR set to: 0
 10943                           ;SyntApp.c: 50: if(regNum == 0x0 || regNum == 0x1 || regNum == 0x2 || regNum == 0x4 || r
      +                          egNum == 0x6 || regNum == 0xA)
 10944  000D80  51CE               	movf	InitSynth@regNum& (0+255),w,b
 10945  000D82  B4D8               	btfsc	status,2,c
 10946  000D84  D013               	goto	u8150
 10947                           
 10948                           ; BSR set to: 0
 10949  000D86  05CE               	decf	InitSynth@regNum& (0+255),w,b
 10950  000D88  B4D8               	btfsc	status,2,c
 10951  000D8A  D010               	goto	u8150
 10952                           
 10953                           ; BSR set to: 0
 10954  000D8C  0E02               	movlw	2
 10955  000D8E  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 10956  000D90  B4D8               	btfsc	status,2,c
 10957  000D92  D00C               	goto	u8150
 10958                           
 10959                           ; BSR set to: 0
 10960  000D94  0E04               	movlw	4
 10961  000D96  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 10962  000D98  B4D8               	btfsc	status,2,c
 10963  000D9A  D008               	goto	u8150
 10964                           
 10965                           ; BSR set to: 0
 10966  000D9C  0E06               	movlw	6
 10967  000D9E  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 10968  000DA0  B4D8               	btfsc	status,2,c
 10969  000DA2  D004               	goto	u8150
 10970                           
 10971                           ; BSR set to: 0
 10972  000DA4  0E0A               	movlw	10
 10973  000DA6  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 10974  000DA8  A4D8               	btfss	status,2,c
 10975  000DAA  D0EB               	goto	l509
 10976  000DAC                     u8150:
 10977                           
 10978                           ; BSR set to: 0
 10979                           ;SyntApp.c: 51: {
 10980                           ;SyntApp.c: 52: if(cType == SYNTH_TX)
 10981                           
 10982                           ; BSR set to: 0
 10983  000DAC  51CC               	movf	InitSynth@cType& (0+255),w,b
 10984  000DAE  A4D8               	btfss	status,2,c
 10985  000DB0  D071               	goto	l512
 10986                           
 10987                           ; BSR set to: 0
 10988                           ;SyntApp.c: 53: {
 10989                           ;SyntApp.c: 54: EepromVal = ReadIntFromEeprom((0) | SYNTH_ADDRES[regNum], 4);
 10990  000DB2  0E00               	movlw	0
 10991  000DB4  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 10992  000DB6  0E04               	movlw	4
 10993  000DB8  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 10994  000DBA  51CE               	movf	InitSynth@regNum& (0+255),w,b
 10995  000DBC  0D01               	mullw	1
 10996  000DBE  0E35               	movlw	low _SYNTH_ADDRES
 10997  000DC0  24F3               	addwf	prodl,w,c
 10998  000DC2  6EF6               	movwf	tblptrl,c
 10999  000DC4  0E06               	movlw	high _SYNTH_ADDRES
 11000  000DC6  20F4               	addwfc	prodh,w,c
 11001  000DC8  6EF7               	movwf	tblptrh,c
 11002  000DCA                     	if	0	;There are less than 3 active tblptr bytes
 11003  000DCA                     	endif
 11004  000DCA  0008               	tblrd		*
 11005  000DCC  50F5               	movf	tablat,w,c
 11006  000DCE  EC6F  F010         	call	_ReadIntFromEeprom
 11007  000DD2  C0B1  F0C8         	movff	?_ReadIntFromEeprom,InitSynth@EepromVal
 11008  000DD6  C0B2  F0C9         	movff	?_ReadIntFromEeprom+1,InitSynth@EepromVal+1
 11009  000DDA  C0B3  F0CA         	movff	?_ReadIntFromEeprom+2,InitSynth@EepromVal+2
 11010  000DDE  C0B4  F0CB         	movff	?_ReadIntFromEeprom+3,InitSynth@EepromVal+3
 11011                           
 11012                           ;SyntApp.c: 55: if(EepromVal == 0xFFFFFFFF)
 11013  000DE2  0100               	movlb	0	; () banked
 11014  000DE4  29C8               	incf	InitSynth@EepromVal& (0+255),w,b
 11015  000DE6  E147               	bnz	l8115
 11016  000DE8  29C9               	incf	(InitSynth@EepromVal+1)& (0+255),w,b
 11017  000DEA  E145               	bnz	l8115
 11018  000DEC  29CA               	incf	(InitSynth@EepromVal+2)& (0+255),w,b
 11019  000DEE  E143               	bnz	l8115
 11020  000DF0  29CB               	incf	(InitSynth@EepromVal+3)& (0+255),w,b
 11021  000DF2  A4D8               	btfss	status,2,c
 11022  000DF4  D040               	goto	l513
 11023                           
 11024                           ; BSR set to: 0
 11025                           ;SyntApp.c: 56: {
 11026                           ;SyntApp.c: 57: SWSPI_send_word(cType, SYNTH_REGS[idx],3);
 11027  000DF6  51CD               	movf	InitSynth@idx& (0+255),w,b
 11028  000DF8  0D04               	mullw	4
 11029  000DFA  0E01               	movlw	low _SYNTH_REGS
 11030  000DFC  24F3               	addwf	prodl,w,c
 11031  000DFE  6EF6               	movwf	tblptrl,c
 11032  000E00  0E06               	movlw	high _SYNTH_REGS
 11033  000E02  20F4               	addwfc	prodh,w,c
 11034  000E04  6EF7               	movwf	tblptrh,c
 11035  000E06                     	if	0	;There are less than 3 active tblptr bytes
 11036  000E06                     	endif
 11037  000E06  0009               	tblrd		*+
 11038  000E08  CFF5 F029          	movff	tablat,SWSPI_send_word@data
 11039  000E0C  0009               	tblrd		*+
 11040  000E0E  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+1
 11041  000E12  0009               	tblrd		*+
 11042  000E14  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+2
 11043  000E18  000A               	tblrd		*-
 11044  000E1A  CFF5 F02C          	movff	tablat,SWSPI_send_word@data+3
 11045  000E1E  0E03               	movlw	3
 11046  000E20  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11047  000E22  51CC               	movf	InitSynth@cType& (0+255),w,b
 11048  000E24  EC3E  F018         	call	_SWSPI_send_word
 11049                           
 11050                           ;SyntApp.c: 58: StoreIntInEeprom(SYNTH_REGS[idx], (0) | SYNTH_ADDRES[regNum], 4);
 11051  000E28  0100               	movlb	0	; () banked
 11052  000E2A  51CD               	movf	InitSynth@idx& (0+255),w,b
 11053  000E2C  0D04               	mullw	4
 11054  000E2E  0E01               	movlw	low _SYNTH_REGS
 11055  000E30  24F3               	addwf	prodl,w,c
 11056  000E32  6EF6               	movwf	tblptrl,c
 11057  000E34  0E06               	movlw	high _SYNTH_REGS
 11058  000E36  20F4               	addwfc	prodh,w,c
 11059  000E38  6EF7               	movwf	tblptrh,c
 11060  000E3A                     	if	0	;There are less than 3 active tblptr bytes
 11061  000E3A                     	endif
 11062  000E3A  0009               	tblrd		*+
 11063  000E3C  CFF5 F021          	movff	tablat,StoreIntInEeprom@data
 11064  000E40  0009               	tblrd		*+
 11065  000E42  CFF5 F022          	movff	tablat,StoreIntInEeprom@data+1
 11066  000E46  0009               	tblrd		*+
 11067  000E48  CFF5 F023          	movff	tablat,StoreIntInEeprom@data+2
 11068  000E4C  000A               	tblrd		*-
 11069  000E4E  CFF5 F024          	movff	tablat,StoreIntInEeprom@data+3
 11070  000E52  51CE               	movf	InitSynth@regNum& (0+255),w,b
 11071  000E54  0D01               	mullw	1
 11072  000E56  0E35               	movlw	low _SYNTH_ADDRES
 11073  000E58  24F3               	addwf	prodl,w,c
 11074  000E5A  6EF6               	movwf	tblptrl,c
 11075  000E5C  0E06               	movlw	high _SYNTH_ADDRES
 11076  000E5E  20F4               	addwfc	prodh,w,c
 11077  000E60  6EF7               	movwf	tblptrh,c
 11078  000E62                     	if	0	;There are less than 3 active tblptr bytes
 11079  000E62                     	endif
 11080  000E62  0008               	tblrd		*
 11081  000E64  CFF5 F025          	movff	tablat,StoreIntInEeprom@address
 11082  000E68  0E00               	movlw	0
 11083  000E6A  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
 11084  000E6C  0E04               	movlw	4
 11085  000E6E  6E26               	movwf	StoreIntInEeprom@numOfByes,c
 11086  000E70  EC36  F01F         	call	_StoreIntInEeprom	;wreg free
 11087                           
 11088                           ;SyntApp.c: 59: }
 11089  000E74  D0A0               	goto	l519
 11090  000E76                     l513:
 11091  000E76                     l8115:
 11092                           
 11093                           ;SyntApp.c: 60: else
 11094                           ;SyntApp.c: 61: {
 11095                           ;SyntApp.c: 62: SWSPI_send_word(cType, EepromVal,3);
 11096  000E76  C0C8  F029         	movff	InitSynth@EepromVal,SWSPI_send_word@data
 11097  000E7A  C0C9  F02A         	movff	InitSynth@EepromVal+1,SWSPI_send_word@data+1
 11098  000E7E  C0CA  F02B         	movff	InitSynth@EepromVal+2,SWSPI_send_word@data+2
 11099  000E82  C0CB  F02C         	movff	InitSynth@EepromVal+3,SWSPI_send_word@data+3
 11100  000E86  0E03               	movlw	3
 11101  000E88  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11102  000E8A  0100               	movlb	0	; () banked
 11103  000E8C  51CC               	movf	InitSynth@cType& (0+255),w,b
 11104  000E8E  EC3E  F018         	call	_SWSPI_send_word
 11105                           
 11106                           ;SyntApp.c: 63: }
 11107                           ;SyntApp.c: 64: }
 11108  000E92  D091               	goto	l519
 11109  000E94                     l512:
 11110                           
 11111                           ;SyntApp.c: 65: else if (cType == SYNTH_RX)
 11112  000E94  0100               	movlb	0	; () banked
 11113  000E96  05CC               	decf	InitSynth@cType& (0+255),w,b
 11114  000E98  A4D8               	btfss	status,2,c
 11115  000E9A  D08D               	goto	l519
 11116                           
 11117                           ; BSR set to: 0
 11118                           ;SyntApp.c: 66: {
 11119                           ;SyntApp.c: 67: EepromVal = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[regNum], 4);
 11120  000E9C  0E00               	movlw	0
 11121  000E9E  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 11122  000EA0  0E04               	movlw	4
 11123  000EA2  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 11124  000EA4  51CE               	movf	InitSynth@regNum& (0+255),w,b
 11125  000EA6  0D01               	mullw	1
 11126  000EA8  0E35               	movlw	low _SYNTH_ADDRES
 11127  000EAA  24F3               	addwf	prodl,w,c
 11128  000EAC  6EF6               	movwf	tblptrl,c
 11129  000EAE  0E06               	movlw	high _SYNTH_ADDRES
 11130  000EB0  20F4               	addwfc	prodh,w,c
 11131  000EB2  6EF7               	movwf	tblptrh,c
 11132  000EB4                     	if	0	;There are less than 3 active tblptr bytes
 11133  000EB4                     	endif
 11134  000EB4  0008               	tblrd		*
 11135  000EB6  50F5               	movf	tablat,w,c
 11136  000EB8  0920               	iorlw	32
 11137  000EBA  EC6F  F010         	call	_ReadIntFromEeprom
 11138  000EBE  C0B1  F0C8         	movff	?_ReadIntFromEeprom,InitSynth@EepromVal
 11139  000EC2  C0B2  F0C9         	movff	?_ReadIntFromEeprom+1,InitSynth@EepromVal+1
 11140  000EC6  C0B3  F0CA         	movff	?_ReadIntFromEeprom+2,InitSynth@EepromVal+2
 11141  000ECA  C0B4  F0CB         	movff	?_ReadIntFromEeprom+3,InitSynth@EepromVal+3
 11142                           
 11143                           ;SyntApp.c: 68: if(EepromVal == 0xFFFFFFFF)
 11144  000ECE  0100               	movlb	0	; () banked
 11145  000ED0  29C8               	incf	InitSynth@EepromVal& (0+255),w,b
 11146  000ED2  E148               	bnz	l8127
 11147  000ED4  29C9               	incf	(InitSynth@EepromVal+1)& (0+255),w,b
 11148  000ED6  E146               	bnz	l8127
 11149  000ED8  29CA               	incf	(InitSynth@EepromVal+2)& (0+255),w,b
 11150  000EDA  E144               	bnz	l8127
 11151  000EDC  29CB               	incf	(InitSynth@EepromVal+3)& (0+255),w,b
 11152  000EDE  A4D8               	btfss	status,2,c
 11153  000EE0  D041               	goto	l517
 11154                           
 11155                           ; BSR set to: 0
 11156                           ;SyntApp.c: 69: {
 11157                           ;SyntApp.c: 70: SWSPI_send_word(cType, SYNTH_REGS[idx],3);
 11158  000EE2  51CD               	movf	InitSynth@idx& (0+255),w,b
 11159  000EE4  0D04               	mullw	4
 11160  000EE6  0E01               	movlw	low _SYNTH_REGS
 11161  000EE8  24F3               	addwf	prodl,w,c
 11162  000EEA  6EF6               	movwf	tblptrl,c
 11163  000EEC  0E06               	movlw	high _SYNTH_REGS
 11164  000EEE  20F4               	addwfc	prodh,w,c
 11165  000EF0  6EF7               	movwf	tblptrh,c
 11166  000EF2                     	if	0	;There are less than 3 active tblptr bytes
 11167  000EF2                     	endif
 11168  000EF2  0009               	tblrd		*+
 11169  000EF4  CFF5 F029          	movff	tablat,SWSPI_send_word@data
 11170  000EF8  0009               	tblrd		*+
 11171  000EFA  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+1
 11172  000EFE  0009               	tblrd		*+
 11173  000F00  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+2
 11174  000F04  000A               	tblrd		*-
 11175  000F06  CFF5 F02C          	movff	tablat,SWSPI_send_word@data+3
 11176  000F0A  0E03               	movlw	3
 11177  000F0C  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11178  000F0E  51CC               	movf	InitSynth@cType& (0+255),w,b
 11179  000F10  EC3E  F018         	call	_SWSPI_send_word
 11180                           
 11181                           ;SyntApp.c: 71: StoreIntInEeprom(SYNTH_REGS[idx], (0x20) | SYNTH_ADDRES[regNum], 4);
 11182  000F14  0100               	movlb	0	; () banked
 11183  000F16  51CD               	movf	InitSynth@idx& (0+255),w,b
 11184  000F18  0D04               	mullw	4
 11185  000F1A  0E01               	movlw	low _SYNTH_REGS
 11186  000F1C  24F3               	addwf	prodl,w,c
 11187  000F1E  6EF6               	movwf	tblptrl,c
 11188  000F20  0E06               	movlw	high _SYNTH_REGS
 11189  000F22  20F4               	addwfc	prodh,w,c
 11190  000F24  6EF7               	movwf	tblptrh,c
 11191  000F26                     	if	0	;There are less than 3 active tblptr bytes
 11192  000F26                     	endif
 11193  000F26  0009               	tblrd		*+
 11194  000F28  CFF5 F021          	movff	tablat,StoreIntInEeprom@data
 11195  000F2C  0009               	tblrd		*+
 11196  000F2E  CFF5 F022          	movff	tablat,StoreIntInEeprom@data+1
 11197  000F32  0009               	tblrd		*+
 11198  000F34  CFF5 F023          	movff	tablat,StoreIntInEeprom@data+2
 11199  000F38  000A               	tblrd		*-
 11200  000F3A  CFF5 F024          	movff	tablat,StoreIntInEeprom@data+3
 11201  000F3E  51CE               	movf	InitSynth@regNum& (0+255),w,b
 11202  000F40  0D01               	mullw	1
 11203  000F42  0E35               	movlw	low _SYNTH_ADDRES
 11204  000F44  24F3               	addwf	prodl,w,c
 11205  000F46  6EF6               	movwf	tblptrl,c
 11206  000F48  0E06               	movlw	high _SYNTH_ADDRES
 11207  000F4A  20F4               	addwfc	prodh,w,c
 11208  000F4C  6EF7               	movwf	tblptrh,c
 11209  000F4E                     	if	0	;There are less than 3 active tblptr bytes
 11210  000F4E                     	endif
 11211  000F4E  0008               	tblrd		*
 11212  000F50  50F5               	movf	tablat,w,c
 11213  000F52  0920               	iorlw	32
 11214  000F54  6E25               	movwf	StoreIntInEeprom@address,c
 11215  000F56  0E00               	movlw	0
 11216  000F58  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
 11217  000F5A  0E04               	movlw	4
 11218  000F5C  6E26               	movwf	StoreIntInEeprom@numOfByes,c
 11219  000F5E  EC36  F01F         	call	_StoreIntInEeprom	;wreg free
 11220                           
 11221                           ;SyntApp.c: 72: }
 11222  000F62  D029               	goto	l519
 11223  000F64                     l517:
 11224  000F64                     l8127:
 11225                           
 11226                           ;SyntApp.c: 73: else
 11227                           ;SyntApp.c: 74: {
 11228                           ;SyntApp.c: 75: SWSPI_send_word(cType, EepromVal,3);
 11229  000F64  C0C8  F029         	movff	InitSynth@EepromVal,SWSPI_send_word@data
 11230  000F68  C0C9  F02A         	movff	InitSynth@EepromVal+1,SWSPI_send_word@data+1
 11231  000F6C  C0CA  F02B         	movff	InitSynth@EepromVal+2,SWSPI_send_word@data+2
 11232  000F70  C0CB  F02C         	movff	InitSynth@EepromVal+3,SWSPI_send_word@data+3
 11233  000F74  0E03               	movlw	3
 11234  000F76  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11235  000F78  0100               	movlb	0	; () banked
 11236  000F7A  51CC               	movf	InitSynth@cType& (0+255),w,b
 11237  000F7C  EC3E  F018         	call	_SWSPI_send_word
 11238                           
 11239                           ;SyntApp.c: 76: }
 11240                           ;SyntApp.c: 77: }
 11241                           ;SyntApp.c: 78: }
 11242  000F80  D01A               	goto	l519
 11243  000F82                     l509:
 11244                           
 11245                           ;SyntApp.c: 79: else
 11246                           ;SyntApp.c: 80: {
 11247                           ;SyntApp.c: 81: SWSPI_send_word(cType, SYNTH_REGS[idx],3);
 11248  000F82  0100               	movlb	0	; () banked
 11249  000F84  51CD               	movf	InitSynth@idx& (0+255),w,b
 11250  000F86  0D04               	mullw	4
 11251  000F88  0E01               	movlw	low _SYNTH_REGS
 11252  000F8A  24F3               	addwf	prodl,w,c
 11253  000F8C  6EF6               	movwf	tblptrl,c
 11254  000F8E  0E06               	movlw	high _SYNTH_REGS
 11255  000F90  20F4               	addwfc	prodh,w,c
 11256  000F92  6EF7               	movwf	tblptrh,c
 11257  000F94                     	if	0	;There are less than 3 active tblptr bytes
 11258  000F94                     	endif
 11259  000F94  0009               	tblrd		*+
 11260  000F96  CFF5 F029          	movff	tablat,SWSPI_send_word@data
 11261  000F9A  0009               	tblrd		*+
 11262  000F9C  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+1
 11263  000FA0  0009               	tblrd		*+
 11264  000FA2  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+2
 11265  000FA6  000A               	tblrd		*-
 11266  000FA8  CFF5 F02C          	movff	tablat,SWSPI_send_word@data+3
 11267  000FAC  0E03               	movlw	3
 11268  000FAE  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11269  000FB0  51CC               	movf	InitSynth@cType& (0+255),w,b
 11270  000FB2  EC3E  F018         	call	_SWSPI_send_word
 11271  000FB6                     l519:
 11272  000FB6  0100               	movlb	0	; () banked
 11273  000FB8  2BCD               	incf	InitSynth@idx& (0+255),f,b
 11274  000FBA  D6DA               	goto	l8087
 11275  000FBC                     __end_of_InitSynth:
 11276                           	opt stack 0
 11277                           tosu	equ	0xFFF
 11278                           tosh	equ	0xFFE
 11279                           tosl	equ	0xFFD
 11280                           pclath	equ	0xFFA
 11281                           tblptru	equ	0xFF8
 11282                           tblptrh	equ	0xFF7
 11283                           tblptrl	equ	0xFF6
 11284                           tablat	equ	0xFF5
 11285                           prodh	equ	0xFF4
 11286                           prodl	equ	0xFF3
 11287                           intcon	equ	0xFF2
 11288                           intcon2	equ	0xFF1
 11289                           postinc0	equ	0xFEE
 11290                           plusw0	equ	0xFEB
 11291                           wreg	equ	0xFE8
 11292                           indf1	equ	0xFE7
 11293                           postdec1	equ	0xFE5
 11294                           fsr1h	equ	0xFE2
 11295                           fsr1l	equ	0xFE1
 11296                           indf2	equ	0xFDF
 11297                           postinc2	equ	0xFDE
 11298                           postdec2	equ	0xFDD
 11299                           plusw2	equ	0xFDB
 11300                           fsr2h	equ	0xFDA
 11301                           fsr2l	equ	0xFD9
 11302                           status	equ	0xFD8
 11303                           
 11304 ;; *************** function _SwSpi_Set_CE_Pin *****************
 11305 ;; Defined at:
 11306 ;;		line 201 in file "SwSpiApp.c"
 11307 ;; Parameters:    Size  Location     Type
 11308 ;;  phrType         1    wreg     enum E1
 11309 ;;  cPinMode        1   23[COMRAM] unsigned char 
 11310 ;; Auto vars:     Size  Location     Type
 11311 ;;  phrType         1   24[COMRAM] enum E1
 11312 ;; Return value:  Size  Location     Type
 11313 ;;                  1    wreg      void 
 11314 ;; Registers used:
 11315 ;;		wreg, status,2, status,0
 11316 ;; Tracked objects:
 11317 ;;		On entry : 0/0
 11318 ;;		On exit  : 0/0
 11319 ;;		Unchanged: 0/0
 11320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11321 ;;      Params:         1       0       0       0       0       0       0
 11322 ;;      Locals:         1       0       0       0       0       0       0
 11323 ;;      Temps:          0       0       0       0       0       0       0
 11324 ;;      Totals:         2       0       0       0       0       0       0
 11325 ;;Total ram usage:        2 bytes
 11326 ;; Hardware stack levels used:    1
 11327 ;; Hardware stack levels required when called:    4
 11328 ;; This function calls:
 11329 ;;		Nothing
 11330 ;; This function is called by:
 11331 ;;		_InitSynth
 11332 ;;		_SetSynthOper
 11333 ;; This function uses a non-reentrant model
 11334 ;;
 11335                           
 11336                           	psect	text60
 11337  003D84                     __ptext60:
 11338                           	opt stack 0
 11339  003D84                     _SwSpi_Set_CE_Pin:
 11340                           	opt stack 23
 11341                           
 11342                           ; BSR set to: 0
 11343                           ;incstack = 0
 11344                           ;SwSpi_Set_CE_Pin@phrType stored from wreg
 11345  003D84  6E19               	movwf	SwSpi_Set_CE_Pin@phrType,c
 11346                           
 11347                           ;SwSpiApp.c: 203: switch(phrType)
 11348  003D86  D014               	goto	l727
 11349  003D88                     
 11350                           ;SwSpiApp.c: 206: if(cPinMode == 1)
 11351  003D88  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
 11352  003D8A  A4D8               	btfss	status,2,c
 11353  003D8C  D002               	goto	l729
 11354                           
 11355                           ;SwSpiApp.c: 207: {
 11356                           ;SwSpiApp.c: 208: do { LATCbits.LATC1 = 1; } while(0);
 11357  003D8E  828B               	bsf	3979,1,c	;volatile
 11358                           
 11359                           ;SwSpiApp.c: 209: }
 11360  003D90  0012               	return	
 11361  003D92                     l729:
 11362                           
 11363                           ;SwSpiApp.c: 210: else if(cPinMode == 0)
 11364  003D92  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
 11365  003D94  A4D8               	btfss	status,2,c
 11366  003D96  0012               	return	
 11367                           
 11368                           ;SwSpiApp.c: 211: {
 11369                           ;SwSpiApp.c: 212: do { LATCbits.LATC1 = 0; } while(0);
 11370  003D98  928B               	bcf	3979,1,c	;volatile
 11371                           
 11372                           ;SwSpiApp.c: 213: }
 11373                           ;SwSpiApp.c: 214: break;
 11374  003D9A  0012               	return	
 11375  003D9C                     
 11376                           ;SwSpiApp.c: 217: if(cPinMode == 1)
 11377  003D9C  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
 11378  003D9E  A4D8               	btfss	status,2,c
 11379  003DA0  D002               	goto	l738
 11380                           
 11381                           ;SwSpiApp.c: 218: {
 11382                           ;SwSpiApp.c: 219: do { LATDbits.LATD2 = 1; } while(0);
 11383  003DA2  848C               	bsf	3980,2,c	;volatile
 11384                           
 11385                           ;SwSpiApp.c: 220: }
 11386  003DA4  0012               	return	
 11387  003DA6                     l738:
 11388                           
 11389                           ;SwSpiApp.c: 221: else if(cPinMode == 0)
 11390  003DA6  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
 11391  003DA8  A4D8               	btfss	status,2,c
 11392  003DAA  0012               	return	
 11393                           
 11394                           ;SwSpiApp.c: 222: {
 11395                           ;SwSpiApp.c: 223: do { LATDbits.LATD2 = 0; } while(0);
 11396  003DAC  948C               	bcf	3980,2,c	;volatile
 11397                           
 11398                           ;SwSpiApp.c: 226: }
 11399                           
 11400                           ;SwSpiApp.c: 224: }
 11401                           ;SwSpiApp.c: 225: break;
 11402  003DAE  0012               	return	
 11403  003DB0                     l727:
 11404  003DB0  5019               	movf	SwSpi_Set_CE_Pin@phrType,w,c
 11405                           
 11406                           ; Switch size 1, requested type "space"
 11407                           ; Number of cases is 2, Range of values is 0 to 1
 11408                           ; switch strategies available:
 11409                           ; Name         Instructions Cycles
 11410                           ; simple_byte            7     4 (average)
 11411                           ;	Chosen strategy is simple_byte
 11412  003DB2  0A00               	xorlw	0	; case 0
 11413  003DB4  B4D8               	btfsc	status,2,c
 11414  003DB6  D7E8               	goto	l728
 11415  003DB8  0A01               	xorlw	1	; case 1
 11416  003DBA  A4D8               	btfss	status,2,c
 11417  003DBC  0012               	return	
 11418  003DBE  D7EE               	goto	l737
 11419  003DC0                     __end_of_SwSpi_Set_CE_Pin:
 11420                           	opt stack 0
 11421                           tosu	equ	0xFFF
 11422                           tosh	equ	0xFFE
 11423                           tosl	equ	0xFFD
 11424                           pclath	equ	0xFFA
 11425                           tblptru	equ	0xFF8
 11426                           tblptrh	equ	0xFF7
 11427                           tblptrl	equ	0xFF6
 11428                           tablat	equ	0xFF5
 11429                           prodh	equ	0xFF4
 11430                           prodl	equ	0xFF3
 11431                           intcon	equ	0xFF2
 11432                           intcon2	equ	0xFF1
 11433                           postinc0	equ	0xFEE
 11434                           plusw0	equ	0xFEB
 11435                           wreg	equ	0xFE8
 11436                           indf1	equ	0xFE7
 11437                           postdec1	equ	0xFE5
 11438                           fsr1h	equ	0xFE2
 11439                           fsr1l	equ	0xFE1
 11440                           indf2	equ	0xFDF
 11441                           postinc2	equ	0xFDE
 11442                           postdec2	equ	0xFDD
 11443                           plusw2	equ	0xFDB
 11444                           fsr2h	equ	0xFDA
 11445                           fsr2l	equ	0xFD9
 11446                           status	equ	0xFD8
 11447                           
 11448 ;; *************** function _InitAdcApplicationMgr *****************
 11449 ;; Defined at:
 11450 ;;		line 20 in file "AdcApp.c"
 11451 ;; Parameters:    Size  Location     Type
 11452 ;;		None
 11453 ;; Auto vars:     Size  Location     Type
 11454 ;;		None
 11455 ;; Return value:  Size  Location     Type
 11456 ;;                  1    wreg      void 
 11457 ;; Registers used:
 11458 ;;		wreg, status,2
 11459 ;; Tracked objects:
 11460 ;;		On entry : 0/0
 11461 ;;		On exit  : 0/0
 11462 ;;		Unchanged: 0/0
 11463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11464 ;;      Params:         0       0       0       0       0       0       0
 11465 ;;      Locals:         0       0       0       0       0       0       0
 11466 ;;      Temps:          0       0       0       0       0       0       0
 11467 ;;      Totals:         0       0       0       0       0       0       0
 11468 ;;Total ram usage:        0 bytes
 11469 ;; Hardware stack levels used:    1
 11470 ;; Hardware stack levels required when called:    4
 11471 ;; This function calls:
 11472 ;;		Nothing
 11473 ;; This function is called by:
 11474 ;;		_InitSystemApplicationManagers
 11475 ;; This function uses a non-reentrant model
 11476 ;;
 11477                           
 11478                           	psect	text61
 11479  00445A                     __ptext61:
 11480                           	opt stack 0
 11481  00445A                     _InitAdcApplicationMgr:
 11482                           	opt stack 25
 11483                           
 11484                           ;AdcApp.c: 22: adcSampleMode = CIRCULAR;
 11485                           
 11486                           ;incstack = 0
 11487  00445A  0E00               	movlw	0
 11488  00445C  6E3D               	movwf	_adcSampleMode,c
 11489  00445E  0012               	return		;funcret
 11490  004460                     __end_of_InitAdcApplicationMgr:
 11491                           	opt stack 0
 11492                           tosu	equ	0xFFF
 11493                           tosh	equ	0xFFE
 11494                           tosl	equ	0xFFD
 11495                           pclath	equ	0xFFA
 11496                           tblptru	equ	0xFF8
 11497                           tblptrh	equ	0xFF7
 11498                           tblptrl	equ	0xFF6
 11499                           tablat	equ	0xFF5
 11500                           prodh	equ	0xFF4
 11501                           prodl	equ	0xFF3
 11502                           intcon	equ	0xFF2
 11503                           intcon2	equ	0xFF1
 11504                           postinc0	equ	0xFEE
 11505                           plusw0	equ	0xFEB
 11506                           wreg	equ	0xFE8
 11507                           indf1	equ	0xFE7
 11508                           postdec1	equ	0xFE5
 11509                           fsr1h	equ	0xFE2
 11510                           fsr1l	equ	0xFE1
 11511                           indf2	equ	0xFDF
 11512                           postinc2	equ	0xFDE
 11513                           postdec2	equ	0xFDD
 11514                           plusw2	equ	0xFDB
 11515                           fsr2h	equ	0xFDA
 11516                           fsr2l	equ	0xFD9
 11517                           status	equ	0xFD8
 11518                           
 11519 ;; *************** function _DacInit *****************
 11520 ;; Defined at:
 11521 ;;		line 11 in file "DacApp.c"
 11522 ;; Parameters:    Size  Location     Type
 11523 ;;		None
 11524 ;; Auto vars:     Size  Location     Type
 11525 ;;  dacInput        2  106[BANK0 ] unsigned int 
 11526 ;;  idx             1  108[BANK0 ] char 
 11527 ;; Return value:  Size  Location     Type
 11528 ;;                  1    wreg      void 
 11529 ;; Registers used:
 11530 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11531 ;; Tracked objects:
 11532 ;;		On entry : 0/0
 11533 ;;		On exit  : 0/0
 11534 ;;		Unchanged: 0/0
 11535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11536 ;;      Params:         0       0       0       0       0       0       0
 11537 ;;      Locals:         0       3       0       0       0       0       0
 11538 ;;      Temps:          0       2       0       0       0       0       0
 11539 ;;      Totals:         0       5       0       0       0       0       0
 11540 ;;Total ram usage:        5 bytes
 11541 ;; Hardware stack levels used:    1
 11542 ;; Hardware stack levels required when called:   10
 11543 ;; This function calls:
 11544 ;;		_ReadIntFromEeprom
 11545 ;;		_SWSPI_send_word
 11546 ;;		_StoreIntInEeprom
 11547 ;; This function is called by:
 11548 ;;		_InitSystemApplicationManagers
 11549 ;; This function uses a non-reentrant model
 11550 ;;
 11551                           
 11552                           	psect	text62
 11553  0028B2                     __ptext62:
 11554                           	opt stack 0
 11555  0028B2                     _DacInit:
 11556                           	opt stack 19
 11557                           
 11558                           ;DacApp.c: 13: for(int8_t idx = 0; idx < (4); idx++)
 11559                           
 11560                           ;incstack = 0
 11561  0028B2  0E00               	movlw	0
 11562  0028B4  0100               	movlb	0	; () banked
 11563  0028B6  6FCC               	movwf	DacInit@idx& (0+255),b
 11564  0028B8                     l8637:
 11565                           
 11566                           ; BSR set to: 0
 11567  0028B8  51CC               	movf	DacInit@idx& (0+255),w,b
 11568  0028BA  0A80               	xorlw	128
 11569  0028BC  0F7C               	addlw	-132
 11570  0028BE  B0D8               	btfsc	status,0,c
 11571  0028C0  0012               	return	
 11572                           
 11573                           ; BSR set to: 0
 11574                           ;DacApp.c: 14: {
 11575                           ;DacApp.c: 15: uint16_t dacInput = ReadIntFromEeprom((0x40) | DAC_ADDRES[idx], 2);
 11576                           
 11577                           ; BSR set to: 0
 11578                           
 11579                           ; BSR set to: 0
 11580  0028C2  0E00               	movlw	0
 11581  0028C4  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 11582  0028C6  0E02               	movlw	2
 11583  0028C8  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 11584  0028CA  51CC               	movf	DacInit@idx& (0+255),w,b
 11585  0028CC  0D01               	mullw	1
 11586  0028CE  0E53               	movlw	low _DAC_ADDRES
 11587  0028D0  24F3               	addwf	prodl,w,c
 11588  0028D2  6EF6               	movwf	tblptrl,c
 11589  0028D4  0E06               	movlw	high _DAC_ADDRES
 11590  0028D6  20F4               	addwfc	prodh,w,c
 11591  0028D8  6EF7               	movwf	tblptrh,c
 11592  0028DA                     	if	0	;There are less than 3 active tblptr bytes
 11593  0028DA                     	endif
 11594  0028DA  0008               	tblrd		*
 11595  0028DC  50F5               	movf	tablat,w,c
 11596  0028DE  0940               	iorlw	64
 11597  0028E0  EC6F  F010         	call	_ReadIntFromEeprom
 11598  0028E4  C0B1  F0CA         	movff	?_ReadIntFromEeprom,DacInit@dacInput
 11599  0028E8  C0B2  F0CB         	movff	?_ReadIntFromEeprom+1,DacInit@dacInput+1
 11600                           
 11601                           ;DacApp.c: 16: if(dacInput == 0xFFFF)
 11602  0028EC  0100               	movlb	0	; () banked
 11603  0028EE  29CA               	incf	DacInit@dacInput& (0+255),w,b
 11604  0028F0  E144               	bnz	l8649
 11605  0028F2  29CB               	incf	(DacInit@dacInput+1)& (0+255),w,b
 11606  0028F4  A4D8               	btfss	status,2,c
 11607  0028F6  D041               	goto	l411
 11608                           
 11609                           ; BSR set to: 0
 11610                           ;DacApp.c: 17: {
 11611                           ;DacApp.c: 18: SWSPI_send_word(EXT_DAC, DAC_DEFAULT_INIT_VALUES[idx], 1);
 11612  0028F8  51CC               	movf	DacInit@idx& (0+255),w,b
 11613  0028FA  0D02               	mullw	2
 11614  0028FC  0E4B               	movlw	low _DAC_DEFAULT_INIT_VALUES
 11615  0028FE  24F3               	addwf	prodl,w,c
 11616  002900  6EF6               	movwf	tblptrl,c
 11617  002902  0E06               	movlw	high _DAC_DEFAULT_INIT_VALUES
 11618  002904  20F4               	addwfc	prodh,w,c
 11619  002906  6EF7               	movwf	tblptrh,c
 11620  002908                     	if	0	;There are less than 3 active tblptr bytes
 11621  002908                     	endif
 11622  002908  0009               	tblrd		*+
 11623  00290A  CFF5 F0C8          	movff	tablat,??_DacInit
 11624  00290E  0009               	tblrd		*+
 11625  002910  CFF5 F0C9          	movff	tablat,??_DacInit+1
 11626  002914  C0C8  F029         	movff	??_DacInit,SWSPI_send_word@data
 11627  002918  C0C9  F02A         	movff	??_DacInit+1,SWSPI_send_word@data+1
 11628  00291C  6A2B               	clrf	SWSPI_send_word@data+2,c
 11629  00291E  6A2C               	clrf	SWSPI_send_word@data+3,c
 11630  002920  0E01               	movlw	1
 11631  002922  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11632  002924  0E02               	movlw	2
 11633  002926  EC3E  F018         	call	_SWSPI_send_word
 11634                           
 11635                           ;DacApp.c: 19: StoreIntInEeprom(DAC_DEFAULT_INIT_VALUES[idx], (0x40) | DAC_ADDRES[idx], 
      +                          2);
 11636  00292A  0100               	movlb	0	; () banked
 11637  00292C  51CC               	movf	DacInit@idx& (0+255),w,b
 11638  00292E  0D02               	mullw	2
 11639  002930  0E4B               	movlw	low _DAC_DEFAULT_INIT_VALUES
 11640  002932  24F3               	addwf	prodl,w,c
 11641  002934  6EF6               	movwf	tblptrl,c
 11642  002936  0E06               	movlw	high _DAC_DEFAULT_INIT_VALUES
 11643  002938  20F4               	addwfc	prodh,w,c
 11644  00293A  6EF7               	movwf	tblptrh,c
 11645  00293C                     	if	0	;There are less than 3 active tblptr bytes
 11646  00293C                     	endif
 11647  00293C  0009               	tblrd		*+
 11648  00293E  CFF5 F0C8          	movff	tablat,??_DacInit
 11649  002942  0009               	tblrd		*+
 11650  002944  CFF5 F0C9          	movff	tablat,??_DacInit+1
 11651  002948  C0C8  F021         	movff	??_DacInit,StoreIntInEeprom@data
 11652  00294C  C0C9  F022         	movff	??_DacInit+1,StoreIntInEeprom@data+1
 11653  002950  6A23               	clrf	StoreIntInEeprom@data+2,c
 11654  002952  6A24               	clrf	StoreIntInEeprom@data+3,c
 11655  002954  51CC               	movf	DacInit@idx& (0+255),w,b
 11656  002956  0D01               	mullw	1
 11657  002958  0E53               	movlw	low _DAC_ADDRES
 11658  00295A  24F3               	addwf	prodl,w,c
 11659  00295C  6EF6               	movwf	tblptrl,c
 11660  00295E  0E06               	movlw	high _DAC_ADDRES
 11661  002960  20F4               	addwfc	prodh,w,c
 11662  002962  6EF7               	movwf	tblptrh,c
 11663  002964                     	if	0	;There are less than 3 active tblptr bytes
 11664  002964                     	endif
 11665  002964  0008               	tblrd		*
 11666  002966  50F5               	movf	tablat,w,c
 11667  002968  0940               	iorlw	64
 11668  00296A  6E25               	movwf	StoreIntInEeprom@address,c
 11669  00296C  0E00               	movlw	0
 11670  00296E  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
 11671  002970  0E02               	movlw	2
 11672  002972  6E26               	movwf	StoreIntInEeprom@numOfByes,c
 11673  002974  EC36  F01F         	call	_StoreIntInEeprom	;wreg free
 11674                           
 11675                           ;DacApp.c: 20: }
 11676  002978  D00B               	goto	l412
 11677  00297A                     l411:
 11678  00297A                     l8649:
 11679                           
 11680                           ;DacApp.c: 21: else
 11681                           ;DacApp.c: 22: {
 11682                           ;DacApp.c: 23: SWSPI_send_word(EXT_DAC, dacInput, 1);
 11683  00297A  C0CA  F029         	movff	DacInit@dacInput,SWSPI_send_word@data
 11684  00297E  C0CB  F02A         	movff	DacInit@dacInput+1,SWSPI_send_word@data+1
 11685  002982  6A2B               	clrf	SWSPI_send_word@data+2,c
 11686  002984  6A2C               	clrf	SWSPI_send_word@data+3,c
 11687  002986  0E01               	movlw	1
 11688  002988  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11689  00298A  0E02               	movlw	2
 11690  00298C  EC3E  F018         	call	_SWSPI_send_word
 11691  002990                     l412:
 11692  002990  0100               	movlb	0	; () banked
 11693  002992  2BCC               	incf	DacInit@idx& (0+255),f,b
 11694  002994  D791               	goto	l8637
 11695  002996                     __end_of_DacInit:
 11696                           	opt stack 0
 11697                           tosu	equ	0xFFF
 11698                           tosh	equ	0xFFE
 11699                           tosl	equ	0xFFD
 11700                           pclath	equ	0xFFA
 11701                           tblptru	equ	0xFF8
 11702                           tblptrh	equ	0xFF7
 11703                           tblptrl	equ	0xFF6
 11704                           tablat	equ	0xFF5
 11705                           prodh	equ	0xFF4
 11706                           prodl	equ	0xFF3
 11707                           intcon	equ	0xFF2
 11708                           intcon2	equ	0xFF1
 11709                           postinc0	equ	0xFEE
 11710                           plusw0	equ	0xFEB
 11711                           wreg	equ	0xFE8
 11712                           indf1	equ	0xFE7
 11713                           postdec1	equ	0xFE5
 11714                           fsr1h	equ	0xFE2
 11715                           fsr1l	equ	0xFE1
 11716                           indf2	equ	0xFDF
 11717                           postinc2	equ	0xFDE
 11718                           postdec2	equ	0xFDD
 11719                           plusw2	equ	0xFDB
 11720                           fsr2h	equ	0xFDA
 11721                           fsr2l	equ	0xFD9
 11722                           status	equ	0xFD8
 11723                           
 11724 ;; *************** function _StoreIntInEeprom *****************
 11725 ;; Defined at:
 11726 ;;		line 122 in file "SystemCommon.c"
 11727 ;; Parameters:    Size  Location     Type
 11728 ;;  data            4   32[COMRAM] unsigned long 
 11729 ;;  address         1   36[COMRAM] unsigned char 
 11730 ;;  numOfByes       2   37[COMRAM] int 
 11731 ;; Auto vars:     Size  Location     Type
 11732 ;;  val             1   39[COMRAM] unsigned char 
 11733 ;;  idx             1   40[COMRAM] unsigned char 
 11734 ;; Return value:  Size  Location     Type
 11735 ;;                  1    wreg      void 
 11736 ;; Registers used:
 11737 ;;		wreg, status,2, status,0, cstack
 11738 ;; Tracked objects:
 11739 ;;		On entry : 0/0
 11740 ;;		On exit  : 0/0
 11741 ;;		Unchanged: 0/0
 11742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11743 ;;      Params:         7       0       0       0       0       0       0
 11744 ;;      Locals:         2       0       0       0       0       0       0
 11745 ;;      Temps:          0       0       0       0       0       0       0
 11746 ;;      Totals:         9       0       0       0       0       0       0
 11747 ;;Total ram usage:        9 bytes
 11748 ;; Hardware stack levels used:    1
 11749 ;; Hardware stack levels required when called:    6
 11750 ;; This function calls:
 11751 ;;		_EepromWrite
 11752 ;;		_make8
 11753 ;; This function is called by:
 11754 ;;		_DacInit
 11755 ;;		_DacSetValue
 11756 ;;		_InitSynth
 11757 ;;		_UpdateSynthFreq
 11758 ;; This function uses a non-reentrant model
 11759 ;;
 11760                           
 11761                           	psect	text63
 11762  003E6C                     __ptext63:
 11763                           	opt stack 0
 11764  003E6C                     _StoreIntInEeprom:
 11765                           	opt stack 21
 11766                           
 11767                           ;SystemCommon.c: 124: for(uint8_t idx = numOfByes; idx; idx--)
 11768                           
 11769                           ; BSR set to: 0
 11770                           ;incstack = 0
 11771  003E6C  C026  F029         	movff	StoreIntInEeprom@numOfByes,StoreIntInEeprom@idx
 11772  003E70  D015               	goto	l1438
 11773  003E72                     
 11774                           ;SystemCommon.c: 125: {
 11775                           ;SystemCommon.c: 126: uint8_t val = make8(data, idx - 1);
 11776  003E72  C021  F018         	movff	StoreIntInEeprom@data,make8@data
 11777  003E76  C022  F019         	movff	StoreIntInEeprom@data+1,make8@data+1
 11778  003E7A  C023  F01A         	movff	StoreIntInEeprom@data+2,make8@data+2
 11779  003E7E  C024  F01B         	movff	StoreIntInEeprom@data+3,make8@data+3
 11780  003E82  0429               	decf	StoreIntInEeprom@idx,w,c
 11781  003E84  6E1C               	movwf	make8@dataLocation,c
 11782  003E86  EC51  F01C         	call	_make8	;wreg free
 11783  003E8A  6E28               	movwf	StoreIntInEeprom@val,c
 11784                           
 11785                           ;SystemCommon.c: 127: EepromWrite(address - idx, val);
 11786  003E8C  C028  F01B         	movff	StoreIntInEeprom@val,EepromWrite@data
 11787  003E90  5029               	movf	StoreIntInEeprom@idx,w,c
 11788  003E92  0800               	sublw	0
 11789  003E94  2425               	addwf	StoreIntInEeprom@address,w,c
 11790  003E96  ECF6  F021         	call	_EepromWrite
 11791  003E9A  0629               	decf	StoreIntInEeprom@idx,f,c
 11792  003E9C                     l1438:
 11793  003E9C  5029               	movf	StoreIntInEeprom@idx,w,c
 11794  003E9E  B4D8               	btfsc	status,2,c
 11795  003EA0  0012               	return	
 11796  003EA2  D7E7               	goto	l1439
 11797  003EA4                     __end_of_StoreIntInEeprom:
 11798                           	opt stack 0
 11799                           tosu	equ	0xFFF
 11800                           tosh	equ	0xFFE
 11801                           tosl	equ	0xFFD
 11802                           pclath	equ	0xFFA
 11803                           tblptru	equ	0xFF8
 11804                           tblptrh	equ	0xFF7
 11805                           tblptrl	equ	0xFF6
 11806                           tablat	equ	0xFF5
 11807                           prodh	equ	0xFF4
 11808                           prodl	equ	0xFF3
 11809                           intcon	equ	0xFF2
 11810                           intcon2	equ	0xFF1
 11811                           postinc0	equ	0xFEE
 11812                           plusw0	equ	0xFEB
 11813                           wreg	equ	0xFE8
 11814                           indf1	equ	0xFE7
 11815                           postdec1	equ	0xFE5
 11816                           fsr1h	equ	0xFE2
 11817                           fsr1l	equ	0xFE1
 11818                           indf2	equ	0xFDF
 11819                           postinc2	equ	0xFDE
 11820                           postdec2	equ	0xFDD
 11821                           plusw2	equ	0xFDB
 11822                           fsr2h	equ	0xFDA
 11823                           fsr2l	equ	0xFD9
 11824                           status	equ	0xFD8
 11825                           
 11826 ;; *************** function _EepromWrite *****************
 11827 ;; Defined at:
 11828 ;;		line 180 in file "FlashApp.c"
 11829 ;; Parameters:    Size  Location     Type
 11830 ;;  address         1    wreg     unsigned char 
 11831 ;;  data            1   26[COMRAM] unsigned char 
 11832 ;; Auto vars:     Size  Location     Type
 11833 ;;  address         1   27[COMRAM] unsigned char 
 11834 ;; Return value:  Size  Location     Type
 11835 ;;                  1    wreg      void 
 11836 ;; Registers used:
 11837 ;;		wreg, status,2, cstack
 11838 ;; Tracked objects:
 11839 ;;		On entry : 0/0
 11840 ;;		On exit  : 0/0
 11841 ;;		Unchanged: 0/0
 11842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11843 ;;      Params:         1       0       0       0       0       0       0
 11844 ;;      Locals:         1       0       0       0       0       0       0
 11845 ;;      Temps:          0       0       0       0       0       0       0
 11846 ;;      Totals:         2       0       0       0       0       0       0
 11847 ;;Total ram usage:        2 bytes
 11848 ;; Hardware stack levels used:    1
 11849 ;; Hardware stack levels required when called:    5
 11850 ;; This function calls:
 11851 ;;		_DATAEE_WriteByte
 11852 ;; This function is called by:
 11853 ;;		_StoreIntInEeprom
 11854 ;; This function uses a non-reentrant model
 11855 ;;
 11856                           
 11857                           	psect	text64
 11858  0043EC                     __ptext64:
 11859                           	opt stack 0
 11860  0043EC                     _EepromWrite:
 11861                           	opt stack 21
 11862                           
 11863                           ;incstack = 0
 11864                           ;EepromWrite@address stored from wreg
 11865  0043EC  6E1C               	movwf	EepromWrite@address,c
 11866                           
 11867                           ;FlashApp.c: 182: DATAEE_WriteByte(address, data);
 11868  0043EE  C01B  F018         	movff	EepromWrite@data,DATAEE_WriteByte@bData
 11869  0043F2  501C               	movf	EepromWrite@address,w,c
 11870  0043F4  ECA5  F01F         	call	_DATAEE_WriteByte
 11871  0043F8  0012               	return		;funcret
 11872  0043FA                     __end_of_EepromWrite:
 11873                           	opt stack 0
 11874                           tosu	equ	0xFFF
 11875                           tosh	equ	0xFFE
 11876                           tosl	equ	0xFFD
 11877                           pclath	equ	0xFFA
 11878                           tblptru	equ	0xFF8
 11879                           tblptrh	equ	0xFF7
 11880                           tblptrl	equ	0xFF6
 11881                           tablat	equ	0xFF5
 11882                           prodh	equ	0xFF4
 11883                           prodl	equ	0xFF3
 11884                           intcon	equ	0xFF2
 11885                           intcon2	equ	0xFF1
 11886                           postinc0	equ	0xFEE
 11887                           plusw0	equ	0xFEB
 11888                           wreg	equ	0xFE8
 11889                           indf1	equ	0xFE7
 11890                           postdec1	equ	0xFE5
 11891                           fsr1h	equ	0xFE2
 11892                           fsr1l	equ	0xFE1
 11893                           indf2	equ	0xFDF
 11894                           postinc2	equ	0xFDE
 11895                           postdec2	equ	0xFDD
 11896                           plusw2	equ	0xFDB
 11897                           fsr2h	equ	0xFDA
 11898                           fsr2l	equ	0xFD9
 11899                           status	equ	0xFD8
 11900                           
 11901 ;; *************** function _DATAEE_WriteByte *****************
 11902 ;; Defined at:
 11903 ;;		line 167 in file "mcc_generated_files/memory.c"
 11904 ;; Parameters:    Size  Location     Type
 11905 ;;  bAdd            1    wreg     unsigned char 
 11906 ;;  bData           1   23[COMRAM] unsigned char 
 11907 ;; Auto vars:     Size  Location     Type
 11908 ;;  bAdd            1   24[COMRAM] unsigned char 
 11909 ;;  GIEBitValue     1   25[COMRAM] unsigned char 
 11910 ;; Return value:  Size  Location     Type
 11911 ;;                  1    wreg      void 
 11912 ;; Registers used:
 11913 ;;		wreg, status,2
 11914 ;; Tracked objects:
 11915 ;;		On entry : 0/0
 11916 ;;		On exit  : 0/0
 11917 ;;		Unchanged: 0/0
 11918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11919 ;;      Params:         1       0       0       0       0       0       0
 11920 ;;      Locals:         2       0       0       0       0       0       0
 11921 ;;      Temps:          0       0       0       0       0       0       0
 11922 ;;      Totals:         3       0       0       0       0       0       0
 11923 ;;Total ram usage:        3 bytes
 11924 ;; Hardware stack levels used:    1
 11925 ;; Hardware stack levels required when called:    4
 11926 ;; This function calls:
 11927 ;;		Nothing
 11928 ;; This function is called by:
 11929 ;;		_EepromWrite
 11930 ;; This function uses a non-reentrant model
 11931 ;;
 11932                           
 11933                           	psect	text65
 11934  003F4A                     __ptext65:
 11935                           	opt stack 0
 11936  003F4A                     _DATAEE_WriteByte:
 11937                           	opt stack 21
 11938                           
 11939                           ;incstack = 0
 11940                           ;DATAEE_WriteByte@bAdd stored from wreg
 11941  003F4A  6E19               	movwf	DATAEE_WriteByte@bAdd,c
 11942                           
 11943                           ;memory.c: 169: uint8_t GIEBitValue = INTCONbits.GIE;
 11944  003F4C  0E00               	movlw	0
 11945  003F4E  BEF2               	btfsc	intcon,7,c	;volatile
 11946  003F50  0E01               	movlw	1
 11947  003F52  6E1A               	movwf	DATAEE_WriteByte@GIEBitValue,c
 11948                           
 11949                           ;memory.c: 171: EEADR = (bAdd & 0xFF);
 11950  003F54  C019  FFA9         	movff	DATAEE_WriteByte@bAdd,4009	;volatile
 11951                           
 11952                           ;memory.c: 172: EEDATA = bData;
 11953  003F58  C018  FFA8         	movff	DATAEE_WriteByte@bData,4008	;volatile
 11954                           
 11955                           ;memory.c: 173: EECON1bits.EEPGD = 0;
 11956  003F5C  9EA6               	bcf	4006,7,c	;volsfr
 11957                           
 11958                           ;memory.c: 174: EECON1bits.CFGS = 0;
 11959  003F5E  9CA6               	bcf	4006,6,c	;volsfr
 11960                           
 11961                           ;memory.c: 175: EECON1bits.WREN = 1;
 11962  003F60  84A6               	bsf	4006,2,c	;volsfr
 11963                           
 11964                           ;memory.c: 176: INTCONbits.GIE = 0;
 11965  003F62  9EF2               	bcf	intcon,7,c	;volatile
 11966                           
 11967                           ;memory.c: 177: EECON2 = 0x55;
 11968  003F64  0E55               	movlw	85
 11969  003F66  6EA7               	movwf	4007,c	;volsfr
 11970                           
 11971                           ;memory.c: 178: EECON2 = 0xAA;
 11972  003F68  0EAA               	movlw	170
 11973  003F6A  6EA7               	movwf	4007,c	;volsfr
 11974                           
 11975                           ;memory.c: 179: EECON1bits.WR = 1;
 11976  003F6C  82A6               	bsf	4006,1,c	;volsfr
 11977  003F6E                     
 11978                           ;memory.c: 182: {
 11979  003F6E  B2A6               	btfsc	4006,1,c	;volsfr
 11980  003F70  D7FE               	goto	l1060
 11981                           
 11982                           ;memory.c: 183: }
 11983                           ;memory.c: 185: EECON1bits.WREN = 0;
 11984  003F72  94A6               	bcf	4006,2,c	;volsfr
 11985                           
 11986                           ;memory.c: 186: INTCONbits.GIE = GIEBitValue;
 11987  003F74  B01A               	btfsc	DATAEE_WriteByte@GIEBitValue,0,c
 11988  003F76  D002               	bra	u7135
 11989  003F78  9EF2               	bcf	intcon,7,c	;volatile
 11990  003F7A  D001               	bra	u7136
 11991  003F7C                     u7135:
 11992  003F7C  8EF2               	bsf	intcon,7,c	;volatile
 11993  003F7E                     u7136:
 11994  003F7E  0012               	return		;funcret
 11995  003F80                     __end_of_DATAEE_WriteByte:
 11996                           	opt stack 0
 11997                           tosu	equ	0xFFF
 11998                           tosh	equ	0xFFE
 11999                           tosl	equ	0xFFD
 12000                           pclath	equ	0xFFA
 12001                           tblptru	equ	0xFF8
 12002                           tblptrh	equ	0xFF7
 12003                           tblptrl	equ	0xFF6
 12004                           tablat	equ	0xFF5
 12005                           prodh	equ	0xFF4
 12006                           prodl	equ	0xFF3
 12007                           intcon	equ	0xFF2
 12008                           intcon2	equ	0xFF1
 12009                           postinc0	equ	0xFEE
 12010                           plusw0	equ	0xFEB
 12011                           wreg	equ	0xFE8
 12012                           indf1	equ	0xFE7
 12013                           postdec1	equ	0xFE5
 12014                           fsr1h	equ	0xFE2
 12015                           fsr1l	equ	0xFE1
 12016                           indf2	equ	0xFDF
 12017                           postinc2	equ	0xFDE
 12018                           postdec2	equ	0xFDD
 12019                           plusw2	equ	0xFDB
 12020                           fsr2h	equ	0xFDA
 12021                           fsr2l	equ	0xFD9
 12022                           status	equ	0xFD8
 12023                           
 12024 ;; *************** function _SWSPI_send_word *****************
 12025 ;; Defined at:
 12026 ;;		line 17 in file "SwSpiApp.c"
 12027 ;; Parameters:    Size  Location     Type
 12028 ;;  phrType         1    wreg     enum E1
 12029 ;;  data            4   40[COMRAM] unsigned long 
 12030 ;;  dataSize        1   44[COMRAM] unsigned char 
 12031 ;; Auto vars:     Size  Location     Type
 12032 ;;  phrType         1   41[BANK0 ] enum E1
 12033 ;;  datac           1   38[BANK0 ] unsigned char 
 12034 ;;  idx             2   39[BANK0 ] int 
 12035 ;; Return value:  Size  Location     Type
 12036 ;;                  1    wreg      void 
 12037 ;; Registers used:
 12038 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12039 ;; Tracked objects:
 12040 ;;		On entry : 0/0
 12041 ;;		On exit  : 0/0
 12042 ;;		Unchanged: 0/0
 12043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12044 ;;      Params:         5       0       0       0       0       0       0
 12045 ;;      Locals:         0       4       0       0       0       0       0
 12046 ;;      Temps:          0       0       0       0       0       0       0
 12047 ;;      Totals:         5       4       0       0       0       0       0
 12048 ;;Total ram usage:        9 bytes
 12049 ;; Hardware stack levels used:    1
 12050 ;; Hardware stack levels required when called:    7
 12051 ;; This function calls:
 12052 ;;		_SWSPI_DAC_send_bits
 12053 ;;		_SWSPI_Synth_send_bits
 12054 ;;		_SwSpi_Set_Dac_Sync_Pin
 12055 ;;		_SwSpi_Set_Synth_Le_Pin
 12056 ;;		_make8
 12057 ;; This function is called by:
 12058 ;;		_DacInit
 12059 ;;		_DacSetValue
 12060 ;;		_InitSynth
 12061 ;;		_UpdateSynthFreq
 12062 ;; This function uses a non-reentrant model
 12063 ;;
 12064                           
 12065                           	psect	text66
 12066  00307C                     __ptext66:
 12067                           	opt stack 0
 12068  00307C                     _SWSPI_send_word:
 12069                           	opt stack 20
 12070                           
 12071                           ;incstack = 0
 12072                           ;SWSPI_send_word@phrType stored from wreg
 12073  00307C  0100               	movlb	0	; () banked
 12074  00307E  6F89               	movwf	SWSPI_send_word@phrType& (0+255),b
 12075                           
 12076                           ;SwSpiApp.c: 19: (INTCONbits.GIE = 0);
 12077  003080  9EF2               	bcf	intcon,7,c	;volatile
 12078                           
 12079                           ;SwSpiApp.c: 23: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
 12080  003082  0100               	movlb	0	; () banked
 12081  003084  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 12082  003086  B4D8               	btfsc	status,2,c
 12083  003088  D003               	goto	u7760
 12084                           
 12085                           ; BSR set to: 0
 12086  00308A  0589               	decf	SWSPI_send_word@phrType& (0+255),w,b
 12087  00308C  A4D8               	btfss	status,2,c
 12088  00308E  D018               	goto	l636
 12089  003090                     u7760:
 12090                           
 12091                           ; BSR set to: 0
 12092                           ;SwSpiApp.c: 24: {
 12093                           ;SwSpiApp.c: 25: SwSpi_Set_Synth_Le_Pin(phrType, 0);
 12094                           
 12095                           ; BSR set to: 0
 12096  003090  0E00               	movlw	0
 12097  003092  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 12098  003094  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 12099  003096  ECE0  F01E         	call	_SwSpi_Set_Synth_Le_Pin
 12100                           
 12101                           ;SwSpiApp.c: 26: SWSPI_Synth_send_bits(phrType, data);
 12102  00309A  C029  F025         	movff	SWSPI_send_word@data,SWSPI_Synth_send_bits@data
 12103  00309E  C02A  F026         	movff	SWSPI_send_word@data+1,SWSPI_Synth_send_bits@data+1
 12104  0030A2  C02B  F027         	movff	SWSPI_send_word@data+2,SWSPI_Synth_send_bits@data+2
 12105  0030A6  C02C  F028         	movff	SWSPI_send_word@data+3,SWSPI_Synth_send_bits@data+3
 12106  0030AA  0100               	movlb	0	; () banked
 12107  0030AC  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 12108  0030AE  EC79  F016         	call	_SWSPI_Synth_send_bits
 12109                           
 12110                           ;SwSpiApp.c: 27: SwSpi_Set_Synth_Le_Pin(phrType, 1);
 12111  0030B2  0E01               	movlw	1
 12112  0030B4  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 12113  0030B6  0100               	movlb	0	; () banked
 12114  0030B8  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 12115  0030BA  ECE0  F01E         	call	_SwSpi_Set_Synth_Le_Pin
 12116                           
 12117                           ;SwSpiApp.c: 28: }
 12118  0030BE  D031               	goto	l640
 12119  0030C0                     l636:
 12120                           
 12121                           ;SwSpiApp.c: 29: else if(phrType == EXT_DAC)
 12122  0030C0  0E02               	movlw	2
 12123  0030C2  0100               	movlb	0	; () banked
 12124  0030C4  1989               	xorwf	SWSPI_send_word@phrType& (0+255),w,b
 12125  0030C6  A4D8               	btfss	status,2,c
 12126  0030C8  D02C               	goto	l640
 12127                           
 12128                           ; BSR set to: 0
 12129                           ;SwSpiApp.c: 30: {
 12130                           ;SwSpiApp.c: 31: SwSpi_Set_Dac_Sync_Pin(0);
 12131  0030CA  0E00               	movlw	0
 12132  0030CC  EC66  F021         	call	_SwSpi_Set_Dac_Sync_Pin
 12133                           
 12134                           ;SwSpiApp.c: 32: for(int idx = dataSize + 1; idx > 0; idx--)
 12135  0030D0  0E01               	movlw	1
 12136  0030D2  242D               	addwf	SWSPI_send_word@dataSize,w,c
 12137  0030D4  0100               	movlb	0	; () banked
 12138  0030D6  6F87               	movwf	SWSPI_send_word@idx& (0+255),b
 12139  0030D8  6B88               	clrf	(SWSPI_send_word@idx+1)& (0+255),b
 12140  0030DA  0E00               	movlw	0
 12141  0030DC  2388               	addwfc	(SWSPI_send_word@idx+1)& (0+255),f,b
 12142  0030DE                     l7897:
 12143                           
 12144                           ; BSR set to: 0
 12145  0030DE  BF88               	btfsc	(SWSPI_send_word@idx+1)& (0+255),7,b
 12146  0030E0  D01D               	goto	u7790
 12147  0030E2  5188               	movf	(SWSPI_send_word@idx+1)& (0+255),w,b
 12148  0030E4  E103               	bnz	l7901
 12149  0030E6  0587               	decf	SWSPI_send_word@idx& (0+255),w,b
 12150  0030E8  A0D8               	btfss	status,0,c
 12151  0030EA  D018               	goto	u7790
 12152  0030EC                     l7901:
 12153                           
 12154                           ; BSR set to: 0
 12155                           ;SwSpiApp.c: 33: {
 12156                           ;SwSpiApp.c: 34: uint8_t datac = make8(data, idx - 1);
 12157  0030EC  C029  F018         	movff	SWSPI_send_word@data,make8@data
 12158  0030F0  C02A  F019         	movff	SWSPI_send_word@data+1,make8@data+1
 12159  0030F4  C02B  F01A         	movff	SWSPI_send_word@data+2,make8@data+2
 12160  0030F8  C02C  F01B         	movff	SWSPI_send_word@data+3,make8@data+3
 12161  0030FC  0587               	decf	SWSPI_send_word@idx& (0+255),w,b
 12162  0030FE  6E1C               	movwf	make8@dataLocation,c
 12163  003100  EC51  F01C         	call	_make8	;wreg free
 12164  003104  0100               	movlb	0	; () banked
 12165  003106  6F86               	movwf	SWSPI_send_word@datac& (0+255),b
 12166                           
 12167                           ;SwSpiApp.c: 35: SWSPI_DAC_send_bits(phrType, datac);
 12168  003108  C086  F01A         	movff	SWSPI_send_word@datac,SWSPI_DAC_send_bits@data
 12169  00310C  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 12170  00310E  ECD9  F01C         	call	_SWSPI_DAC_send_bits
 12171  003112  0100               	movlb	0	; () banked
 12172  003114  0787               	decf	SWSPI_send_word@idx& (0+255),f,b
 12173  003116  A0D8               	btfss	status,0,c
 12174  003118  0788               	decf	(SWSPI_send_word@idx+1)& (0+255),f,b
 12175  00311A  D7E1               	goto	l7897
 12176  00311C                     u7790:
 12177                           
 12178                           ; BSR set to: 0
 12179                           ;SwSpiApp.c: 36: }
 12180                           ;SwSpiApp.c: 37: SwSpi_Set_Dac_Sync_Pin(1);
 12181                           
 12182                           ; BSR set to: 0
 12183  00311C  0E01               	movlw	1
 12184  00311E  EC66  F021         	call	_SwSpi_Set_Dac_Sync_Pin
 12185  003122                     l640:
 12186                           
 12187                           ;SwSpiApp.c: 38: }
 12188                           ;SwSpiApp.c: 40: (INTCONbits.GIE = 1);
 12189  003122  8EF2               	bsf	intcon,7,c	;volatile
 12190  003124  0012               	return		;funcret
 12191  003126                     __end_of_SWSPI_send_word:
 12192                           	opt stack 0
 12193                           tosu	equ	0xFFF
 12194                           tosh	equ	0xFFE
 12195                           tosl	equ	0xFFD
 12196                           pclath	equ	0xFFA
 12197                           tblptru	equ	0xFF8
 12198                           tblptrh	equ	0xFF7
 12199                           tblptrl	equ	0xFF6
 12200                           tablat	equ	0xFF5
 12201                           prodh	equ	0xFF4
 12202                           prodl	equ	0xFF3
 12203                           intcon	equ	0xFF2
 12204                           intcon2	equ	0xFF1
 12205                           postinc0	equ	0xFEE
 12206                           plusw0	equ	0xFEB
 12207                           wreg	equ	0xFE8
 12208                           indf1	equ	0xFE7
 12209                           postdec1	equ	0xFE5
 12210                           fsr1h	equ	0xFE2
 12211                           fsr1l	equ	0xFE1
 12212                           indf2	equ	0xFDF
 12213                           postinc2	equ	0xFDE
 12214                           postdec2	equ	0xFDD
 12215                           plusw2	equ	0xFDB
 12216                           fsr2h	equ	0xFDA
 12217                           fsr2l	equ	0xFD9
 12218                           status	equ	0xFD8
 12219                           
 12220 ;; *************** function _make8 *****************
 12221 ;; Defined at:
 12222 ;;		line 92 in file "SystemCommon.c"
 12223 ;; Parameters:    Size  Location     Type
 12224 ;;  data            4   23[COMRAM] unsigned long 
 12225 ;;  dataLocation    1   27[COMRAM] unsigned char 
 12226 ;; Auto vars:     Size  Location     Type
 12227 ;;		None
 12228 ;; Return value:  Size  Location     Type
 12229 ;;                  1    wreg      unsigned char 
 12230 ;; Registers used:
 12231 ;;		wreg, status,2, status,0
 12232 ;; Tracked objects:
 12233 ;;		On entry : 0/0
 12234 ;;		On exit  : 0/0
 12235 ;;		Unchanged: 0/0
 12236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12237 ;;      Params:         5       0       0       0       0       0       0
 12238 ;;      Locals:         0       0       0       0       0       0       0
 12239 ;;      Temps:          4       0       0       0       0       0       0
 12240 ;;      Totals:         9       0       0       0       0       0       0
 12241 ;;Total ram usage:        9 bytes
 12242 ;; Hardware stack levels used:    1
 12243 ;; Hardware stack levels required when called:    4
 12244 ;; This function calls:
 12245 ;;		Nothing
 12246 ;; This function is called by:
 12247 ;;		_FlashReadCondition
 12248 ;;		_DacReadValue
 12249 ;;		_SynthReadData
 12250 ;;		_SWSPI_send_word
 12251 ;;		_StoreIntInEeprom
 12252 ;; This function uses a non-reentrant model
 12253 ;;
 12254                           
 12255                           	psect	text67
 12256  0038A2                     __ptext67:
 12257                           	opt stack 0
 12258  0038A2                     _make8:
 12259                           	opt stack 22
 12260                           
 12261                           ;SystemCommon.c: 94: switch(dataLocation)
 12262                           
 12263                           ;incstack = 0
 12264  0038A2  D01F               	goto	l1423
 12265  0038A4                     
 12266                           ;SystemCommon.c: 97: return (data & 0x000000ff);
 12267  0038A4  5018               	movf	make8@data,w,c
 12268  0038A6  0012               	return	
 12269  0038A8                     
 12270                           ;SystemCommon.c: 100: return (data & 0x0000ff00) >> 8;
 12271  0038A8  5019               	movf	make8@data+1,w,c
 12272  0038AA  0012               	return	
 12273  0038AC                     
 12274                           ;SystemCommon.c: 103: return (data & 0x00ff0000) >> 16;
 12275  0038AC  501A               	movf	make8@data+2,w,c
 12276  0038AE  0012               	return	
 12277  0038B0                     
 12278                           ;SystemCommon.c: 106: return (data & 0xff000000) >> 24;
 12279  0038B0  0E00               	movlw	0
 12280  0038B2  1418               	andwf	make8@data,w,c
 12281  0038B4  6E1D               	movwf	??_make8& (0+255),c
 12282  0038B6  0E00               	movlw	0
 12283  0038B8  1419               	andwf	make8@data+1,w,c
 12284  0038BA  6E1E               	movwf	(??_make8+1)& (0+255),c
 12285  0038BC  0E00               	movlw	0
 12286  0038BE  141A               	andwf	make8@data+2,w,c
 12287  0038C0  6E1F               	movwf	(??_make8+2)& (0+255),c
 12288  0038C2  0EFF               	movlw	255
 12289  0038C4  141B               	andwf	make8@data+3,w,c
 12290  0038C6  6E20               	movwf	(??_make8+3)& (0+255),c
 12291  0038C8  0E19               	movlw	25
 12292  0038CA  D005               	goto	u7500
 12293  0038CC                     u7505:
 12294  0038CC  90D8               	bcf	status,0,c
 12295  0038CE  3220               	rrcf	??_make8+3,f,c
 12296  0038D0  321F               	rrcf	??_make8+2,f,c
 12297  0038D2  321E               	rrcf	??_make8+1,f,c
 12298  0038D4  321D               	rrcf	??_make8,f,c
 12299  0038D6                     u7500:
 12300  0038D6  2EE8               	decfsz	wreg,f,c
 12301  0038D8  D7F9               	goto	u7505
 12302  0038DA  501D               	movf	??_make8,w,c
 12303  0038DC  0012               	return	
 12304  0038DE                     
 12305                           ;SystemCommon.c: 109: return (0);
 12306  0038DE  0E00               	movlw	0
 12307                           
 12308                           ;SystemCommon.c: 110: }
 12309  0038E0  0012               	return	
 12310  0038E2                     l1423:
 12311  0038E2  501C               	movf	make8@dataLocation,w,c
 12312                           
 12313                           ; Switch size 1, requested type "space"
 12314                           ; Number of cases is 4, Range of values is 0 to 3
 12315                           ; switch strategies available:
 12316                           ; Name         Instructions Cycles
 12317                           ; simple_byte           13     7 (average)
 12318                           ;	Chosen strategy is simple_byte
 12319  0038E4  0A00               	xorlw	0	; case 0
 12320  0038E6  B4D8               	btfsc	status,2,c
 12321  0038E8  D7DD               	goto	l1424
 12322  0038EA  0A01               	xorlw	1	; case 1
 12323  0038EC  B4D8               	btfsc	status,2,c
 12324  0038EE  D7DC               	goto	l1426
 12325  0038F0  0A03               	xorlw	3	; case 2
 12326  0038F2  B4D8               	btfsc	status,2,c
 12327  0038F4  D7DB               	goto	l1427
 12328  0038F6  0A01               	xorlw	1	; case 3
 12329  0038F8  B4D8               	btfsc	status,2,c
 12330  0038FA  D7DA               	goto	l1428
 12331  0038FC  D7F0               	goto	l1429
 12332  0038FE                     __end_of_make8:
 12333                           	opt stack 0
 12334                           tosu	equ	0xFFF
 12335                           tosh	equ	0xFFE
 12336                           tosl	equ	0xFFD
 12337                           pclath	equ	0xFFA
 12338                           tblptru	equ	0xFF8
 12339                           tblptrh	equ	0xFF7
 12340                           tblptrl	equ	0xFF6
 12341                           tablat	equ	0xFF5
 12342                           prodh	equ	0xFF4
 12343                           prodl	equ	0xFF3
 12344                           intcon	equ	0xFF2
 12345                           intcon2	equ	0xFF1
 12346                           postinc0	equ	0xFEE
 12347                           plusw0	equ	0xFEB
 12348                           wreg	equ	0xFE8
 12349                           indf1	equ	0xFE7
 12350                           postdec1	equ	0xFE5
 12351                           fsr1h	equ	0xFE2
 12352                           fsr1l	equ	0xFE1
 12353                           indf2	equ	0xFDF
 12354                           postinc2	equ	0xFDE
 12355                           postdec2	equ	0xFDD
 12356                           plusw2	equ	0xFDB
 12357                           fsr2h	equ	0xFDA
 12358                           fsr2l	equ	0xFD9
 12359                           status	equ	0xFD8
 12360                           
 12361 ;; *************** function _SwSpi_Set_Synth_Le_Pin *****************
 12362 ;; Defined at:
 12363 ;;		line 232 in file "SwSpiApp.c"
 12364 ;; Parameters:    Size  Location     Type
 12365 ;;  phrType         1    wreg     enum E1
 12366 ;;  cPinMode        1   23[COMRAM] unsigned char 
 12367 ;; Auto vars:     Size  Location     Type
 12368 ;;  phrType         1   24[COMRAM] enum E1
 12369 ;; Return value:  Size  Location     Type
 12370 ;;                  1    wreg      void 
 12371 ;; Registers used:
 12372 ;;		wreg, status,2, status,0
 12373 ;; Tracked objects:
 12374 ;;		On entry : 0/0
 12375 ;;		On exit  : 0/0
 12376 ;;		Unchanged: 0/0
 12377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12378 ;;      Params:         1       0       0       0       0       0       0
 12379 ;;      Locals:         1       0       0       0       0       0       0
 12380 ;;      Temps:          0       0       0       0       0       0       0
 12381 ;;      Totals:         2       0       0       0       0       0       0
 12382 ;;Total ram usage:        2 bytes
 12383 ;; Hardware stack levels used:    1
 12384 ;; Hardware stack levels required when called:    4
 12385 ;; This function calls:
 12386 ;;		Nothing
 12387 ;; This function is called by:
 12388 ;;		_SWSPI_send_word
 12389 ;; This function uses a non-reentrant model
 12390 ;;
 12391                           
 12392                           	psect	text68
 12393  003DC0                     __ptext68:
 12394                           	opt stack 0
 12395  003DC0                     _SwSpi_Set_Synth_Le_Pin:
 12396                           	opt stack 22
 12397                           
 12398                           ;incstack = 0
 12399                           ;SwSpi_Set_Synth_Le_Pin@phrType stored from wreg
 12400  003DC0  6E19               	movwf	SwSpi_Set_Synth_Le_Pin@phrType,c
 12401                           
 12402                           ;SwSpiApp.c: 234: switch(phrType)
 12403  003DC2  D014               	goto	l748
 12404  003DC4                     
 12405                           ;SwSpiApp.c: 237: if(cPinMode == 1)
 12406  003DC4  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 12407  003DC6  A4D8               	btfss	status,2,c
 12408  003DC8  D002               	goto	l750
 12409                           
 12410                           ;SwSpiApp.c: 238: {
 12411                           ;SwSpiApp.c: 239: do { LATCbits.LATC2 = 1; } while(0);
 12412  003DCA  848B               	bsf	3979,2,c	;volatile
 12413                           
 12414                           ;SwSpiApp.c: 240: }
 12415  003DCC  0012               	return	
 12416  003DCE                     l750:
 12417                           
 12418                           ;SwSpiApp.c: 241: else if(cPinMode == 0)
 12419  003DCE  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 12420  003DD0  A4D8               	btfss	status,2,c
 12421  003DD2  0012               	return	
 12422                           
 12423                           ;SwSpiApp.c: 242: {
 12424                           ;SwSpiApp.c: 243: do { LATCbits.LATC2 = 0; } while(0);
 12425  003DD4  948B               	bcf	3979,2,c	;volatile
 12426                           
 12427                           ;SwSpiApp.c: 244: }
 12428                           ;SwSpiApp.c: 245: break;
 12429  003DD6  0012               	return	
 12430  003DD8                     
 12431                           ;SwSpiApp.c: 248: if(cPinMode == 1)
 12432  003DD8  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 12433  003DDA  A4D8               	btfss	status,2,c
 12434  003DDC  D002               	goto	l759
 12435                           
 12436                           ;SwSpiApp.c: 249: {
 12437                           ;SwSpiApp.c: 250: do { LATDbits.LATD3 = 1; } while(0);
 12438  003DDE  868C               	bsf	3980,3,c	;volatile
 12439                           
 12440                           ;SwSpiApp.c: 251: }
 12441  003DE0  0012               	return	
 12442  003DE2                     l759:
 12443                           
 12444                           ;SwSpiApp.c: 252: else if(cPinMode == 0)
 12445  003DE2  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 12446  003DE4  A4D8               	btfss	status,2,c
 12447  003DE6  0012               	return	
 12448                           
 12449                           ;SwSpiApp.c: 253: {
 12450                           ;SwSpiApp.c: 254: do { LATDbits.LATD3 = 0; } while(0);
 12451  003DE8  968C               	bcf	3980,3,c	;volatile
 12452                           
 12453                           ;SwSpiApp.c: 257: }
 12454                           
 12455                           ;SwSpiApp.c: 255: }
 12456                           ;SwSpiApp.c: 256: break;
 12457  003DEA  0012               	return	
 12458  003DEC                     l748:
 12459  003DEC  5019               	movf	SwSpi_Set_Synth_Le_Pin@phrType,w,c
 12460                           
 12461                           ; Switch size 1, requested type "space"
 12462                           ; Number of cases is 2, Range of values is 0 to 1
 12463                           ; switch strategies available:
 12464                           ; Name         Instructions Cycles
 12465                           ; simple_byte            7     4 (average)
 12466                           ;	Chosen strategy is simple_byte
 12467  003DEE  0A00               	xorlw	0	; case 0
 12468  003DF0  B4D8               	btfsc	status,2,c
 12469  003DF2  D7E8               	goto	l749
 12470  003DF4  0A01               	xorlw	1	; case 1
 12471  003DF6  A4D8               	btfss	status,2,c
 12472  003DF8  0012               	return	
 12473  003DFA  D7EE               	goto	l758
 12474  003DFC                     __end_of_SwSpi_Set_Synth_Le_Pin:
 12475                           	opt stack 0
 12476                           tosu	equ	0xFFF
 12477                           tosh	equ	0xFFE
 12478                           tosl	equ	0xFFD
 12479                           pclath	equ	0xFFA
 12480                           tblptru	equ	0xFF8
 12481                           tblptrh	equ	0xFF7
 12482                           tblptrl	equ	0xFF6
 12483                           tablat	equ	0xFF5
 12484                           prodh	equ	0xFF4
 12485                           prodl	equ	0xFF3
 12486                           intcon	equ	0xFF2
 12487                           intcon2	equ	0xFF1
 12488                           postinc0	equ	0xFEE
 12489                           plusw0	equ	0xFEB
 12490                           wreg	equ	0xFE8
 12491                           indf1	equ	0xFE7
 12492                           postdec1	equ	0xFE5
 12493                           fsr1h	equ	0xFE2
 12494                           fsr1l	equ	0xFE1
 12495                           indf2	equ	0xFDF
 12496                           postinc2	equ	0xFDE
 12497                           postdec2	equ	0xFDD
 12498                           plusw2	equ	0xFDB
 12499                           fsr2h	equ	0xFDA
 12500                           fsr2l	equ	0xFD9
 12501                           status	equ	0xFD8
 12502                           
 12503 ;; *************** function _SwSpi_Set_Dac_Sync_Pin *****************
 12504 ;; Defined at:
 12505 ;;		line 260 in file "SwSpiApp.c"
 12506 ;; Parameters:    Size  Location     Type
 12507 ;;  cPinMode        1    wreg     unsigned char 
 12508 ;; Auto vars:     Size  Location     Type
 12509 ;;  cPinMode        1   23[COMRAM] unsigned char 
 12510 ;; Return value:  Size  Location     Type
 12511 ;;                  1    wreg      void 
 12512 ;; Registers used:
 12513 ;;		wreg, status,2, status,0
 12514 ;; Tracked objects:
 12515 ;;		On entry : 0/0
 12516 ;;		On exit  : 0/0
 12517 ;;		Unchanged: 0/0
 12518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12519 ;;      Params:         0       0       0       0       0       0       0
 12520 ;;      Locals:         1       0       0       0       0       0       0
 12521 ;;      Temps:          0       0       0       0       0       0       0
 12522 ;;      Totals:         1       0       0       0       0       0       0
 12523 ;;Total ram usage:        1 bytes
 12524 ;; Hardware stack levels used:    1
 12525 ;; Hardware stack levels required when called:    4
 12526 ;; This function calls:
 12527 ;;		Nothing
 12528 ;; This function is called by:
 12529 ;;		_SWSPI_send_word
 12530 ;; This function uses a non-reentrant model
 12531 ;;
 12532                           
 12533                           	psect	text69
 12534  0042CC                     __ptext69:
 12535                           	opt stack 0
 12536  0042CC                     _SwSpi_Set_Dac_Sync_Pin:
 12537                           	opt stack 22
 12538                           
 12539                           ;incstack = 0
 12540                           ;SwSpi_Set_Dac_Sync_Pin@cPinMode stored from wreg
 12541  0042CC  6E18               	movwf	SwSpi_Set_Dac_Sync_Pin@cPinMode,c
 12542                           
 12543                           ;SwSpiApp.c: 262: switch(cPinMode)
 12544  0042CE  D004               	goto	l769
 12545  0042D0                     
 12546                           ;SwSpiApp.c: 265: do { LATAbits.LATA2 = 0; } while(0);
 12547  0042D0  9489               	bcf	3977,2,c	;volatile
 12548                           
 12549                           ;SwSpiApp.c: 266: break;
 12550  0042D2  0012               	return	
 12551  0042D4                     
 12552                           ;SwSpiApp.c: 269: do { LATAbits.LATA2 = 1; } while(0);
 12553  0042D4  8489               	bsf	3977,2,c	;volatile
 12554                           
 12555                           ;SwSpiApp.c: 271: }
 12556                           
 12557                           ;SwSpiApp.c: 270: break;
 12558  0042D6  0012               	return	
 12559  0042D8                     l769:
 12560  0042D8  5018               	movf	SwSpi_Set_Dac_Sync_Pin@cPinMode,w,c
 12561                           
 12562                           ; Switch size 1, requested type "space"
 12563                           ; Number of cases is 2, Range of values is 0 to 1
 12564                           ; switch strategies available:
 12565                           ; Name         Instructions Cycles
 12566                           ; simple_byte            7     4 (average)
 12567                           ;	Chosen strategy is simple_byte
 12568  0042DA  0A00               	xorlw	0	; case 0
 12569  0042DC  B4D8               	btfsc	status,2,c
 12570  0042DE  D7F8               	goto	l770
 12571  0042E0  0A01               	xorlw	1	; case 1
 12572  0042E2  A4D8               	btfss	status,2,c
 12573  0042E4  0012               	return	
 12574  0042E6  D7F6               	goto	l774
 12575  0042E8                     __end_of_SwSpi_Set_Dac_Sync_Pin:
 12576                           	opt stack 0
 12577                           tosu	equ	0xFFF
 12578                           tosh	equ	0xFFE
 12579                           tosl	equ	0xFFD
 12580                           pclath	equ	0xFFA
 12581                           tblptru	equ	0xFF8
 12582                           tblptrh	equ	0xFF7
 12583                           tblptrl	equ	0xFF6
 12584                           tablat	equ	0xFF5
 12585                           prodh	equ	0xFF4
 12586                           prodl	equ	0xFF3
 12587                           intcon	equ	0xFF2
 12588                           intcon2	equ	0xFF1
 12589                           postinc0	equ	0xFEE
 12590                           plusw0	equ	0xFEB
 12591                           wreg	equ	0xFE8
 12592                           indf1	equ	0xFE7
 12593                           postdec1	equ	0xFE5
 12594                           fsr1h	equ	0xFE2
 12595                           fsr1l	equ	0xFE1
 12596                           indf2	equ	0xFDF
 12597                           postinc2	equ	0xFDE
 12598                           postdec2	equ	0xFDD
 12599                           plusw2	equ	0xFDB
 12600                           fsr2h	equ	0xFDA
 12601                           fsr2l	equ	0xFD9
 12602                           status	equ	0xFD8
 12603                           
 12604 ;; *************** function _SWSPI_Synth_send_bits *****************
 12605 ;; Defined at:
 12606 ;;		line 67 in file "SwSpiApp.c"
 12607 ;; Parameters:    Size  Location     Type
 12608 ;;  phrType         1    wreg     enum E1
 12609 ;;  data            4   36[COMRAM] unsigned long 
 12610 ;; Auto vars:     Size  Location     Type
 12611 ;;  phrType         1   37[BANK0 ] enum E1
 12612 ;;  bitArray       32    0[BANK0 ] unsigned char [32]
 12613 ;;  mask            4   32[BANK0 ] unsigned long 
 12614 ;;  count           1   36[BANK0 ] unsigned char 
 12615 ;; Return value:  Size  Location     Type
 12616 ;;                  1    wreg      void 
 12617 ;; Registers used:
 12618 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12619 ;; Tracked objects:
 12620 ;;		On entry : 0/0
 12621 ;;		On exit  : 0/0
 12622 ;;		Unchanged: 0/0
 12623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12624 ;;      Params:         4       0       0       0       0       0       0
 12625 ;;      Locals:         0      38       0       0       0       0       0
 12626 ;;      Temps:          0       0       0       0       0       0       0
 12627 ;;      Totals:         4      38       0       0       0       0       0
 12628 ;;Total ram usage:       42 bytes
 12629 ;; Hardware stack levels used:    1
 12630 ;; Hardware stack levels required when called:    6
 12631 ;; This function calls:
 12632 ;;		_FillArray
 12633 ;;		_Make32bitsArray
 12634 ;;		_SwSpi_Clk_Pin
 12635 ;;		_SwSpi_Data_Pin
 12636 ;; This function is called by:
 12637 ;;		_SWSPI_send_word
 12638 ;; This function uses a non-reentrant model
 12639 ;;
 12640                           
 12641                           	psect	text70
 12642  002CF2                     __ptext70:
 12643                           	opt stack 0
 12644  002CF2                     _SWSPI_Synth_send_bits:
 12645                           	opt stack 20
 12646                           
 12647                           ;incstack = 0
 12648                           ;SWSPI_Synth_send_bits@phrType stored from wreg
 12649  002CF2  0100               	movlb	0	; () banked
 12650  002CF4  6F85               	movwf	SWSPI_Synth_send_bits@phrType& (0+255),b
 12651                           
 12652                           ;SwSpiApp.c: 69: uint8_t count;
 12653                           ;SwSpiApp.c: 70: uint32_t mask = 0x1;
 12654  002CF6  0E01               	movlw	1
 12655  002CF8  0100               	movlb	0	; () banked
 12656  002CFA  6F80               	movwf	SWSPI_Synth_send_bits@mask& (0+255),b
 12657  002CFC  0E00               	movlw	0
 12658  002CFE  6F81               	movwf	(SWSPI_Synth_send_bits@mask+1)& (0+255),b
 12659  002D00  0E00               	movlw	0
 12660  002D02  6F82               	movwf	(SWSPI_Synth_send_bits@mask+2)& (0+255),b
 12661  002D04  0E00               	movlw	0
 12662  002D06  6F83               	movwf	(SWSPI_Synth_send_bits@mask+3)& (0+255),b
 12663                           
 12664                           ; BSR set to: 0
 12665                           ;SwSpiApp.c: 72: bool bitArray[32];
 12666                           ;SwSpiApp.c: 73: FillArray(bitArray, sizeof(bitArray), 0x0);
 12667  002D08  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 12668  002D0A  6E20               	movwf	FillArray@array,c
 12669  002D0C  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 12670  002D0E  6E21               	movwf	FillArray@array+1,c
 12671  002D10  0E00               	movlw	0
 12672  002D12  6E23               	movwf	FillArray@size+1,c
 12673  002D14  0E20               	movlw	32
 12674  002D16  6E22               	movwf	FillArray@size,c
 12675  002D18  0E00               	movlw	0
 12676  002D1A  6E24               	movwf	FillArray@value,c
 12677  002D1C  EC74  F021         	call	_FillArray	;wreg free
 12678                           
 12679                           ;SwSpiApp.c: 75: Make32bitsArray(bitArray, data);
 12680  002D20  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 12681  002D22  6E18               	movwf	Make32bitsArray@array,c
 12682  002D24  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 12683  002D26  6E19               	movwf	Make32bitsArray@array+1,c
 12684  002D28  C025  F01A         	movff	SWSPI_Synth_send_bits@data,Make32bitsArray@data
 12685  002D2C  C026  F01B         	movff	SWSPI_Synth_send_bits@data+1,Make32bitsArray@data+1
 12686  002D30  C027  F01C         	movff	SWSPI_Synth_send_bits@data+2,Make32bitsArray@data+2
 12687  002D34  C028  F01D         	movff	SWSPI_Synth_send_bits@data+3,Make32bitsArray@data+3
 12688  002D38  ECAD  F01C         	call	_Make32bitsArray	;wreg free
 12689                           
 12690                           ;SwSpiApp.c: 77: for (count = 0; count <= 31 ; count++)
 12691  002D3C  0E00               	movlw	0
 12692  002D3E  0100               	movlb	0	; () banked
 12693  002D40  6F84               	movwf	SWSPI_Synth_send_bits@count& (0+255),b
 12694  002D42                     l7731:
 12695                           
 12696                           ; BSR set to: 0
 12697  002D42  0E1F               	movlw	31
 12698  002D44  6584               	cpfsgt	SWSPI_Synth_send_bits@count& (0+255),b
 12699  002D46  D001               	goto	l654
 12700  002D48  D026               	goto	u7570
 12701  002D4A                     l654:
 12702                           
 12703                           ; BSR set to: 0
 12704                           ;SwSpiApp.c: 78: {
 12705                           ;SwSpiApp.c: 80: SwSpi_Clk_Pin(phrType, 0);
 12706                           
 12707                           ; BSR set to: 0
 12708  002D4A  0E00               	movlw	0
 12709  002D4C  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 12710  002D4E  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12711  002D50  EC30  F01D         	call	_SwSpi_Clk_Pin
 12712                           
 12713                           ;SwSpiApp.c: 82: if (bitArray[count])
 12714  002D54  0100               	movlb	0	; () banked
 12715  002D56  5184               	movf	SWSPI_Synth_send_bits@count& (0+255),w,b
 12716  002D58  0D01               	mullw	1
 12717  002D5A  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 12718  002D5C  24F3               	addwf	prodl,w,c
 12719  002D5E  6ED9               	movwf	fsr2l,c
 12720  002D60  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 12721  002D62  20F4               	addwfc	prodh,w,c
 12722  002D64  6EDA               	movwf	fsr2h,c
 12723  002D66  50DF               	movf	indf2,w,c
 12724  002D68  B4D8               	btfsc	status,2,c
 12725  002D6A  D006               	goto	l656
 12726                           
 12727                           ; BSR set to: 0
 12728                           ;SwSpiApp.c: 83: {
 12729                           ;SwSpiApp.c: 84: SwSpi_Data_Pin(phrType, 1);
 12730  002D6C  0E01               	movlw	1
 12731  002D6E  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 12732  002D70  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12733  002D72  EC05  F01D         	call	_SwSpi_Data_Pin
 12734                           
 12735                           ;SwSpiApp.c: 85: }
 12736  002D76  D006               	goto	l657
 12737  002D78                     l656:
 12738                           
 12739                           ;SwSpiApp.c: 86: else
 12740                           ;SwSpiApp.c: 87: {
 12741                           ;SwSpiApp.c: 88: SwSpi_Data_Pin(phrType, 0);
 12742  002D78  0E00               	movlw	0
 12743  002D7A  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 12744  002D7C  0100               	movlb	0	; () banked
 12745  002D7E  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12746  002D80  EC05  F01D         	call	_SwSpi_Data_Pin
 12747  002D84                     l657:
 12748                           
 12749                           ;SwSpiApp.c: 89: }
 12750                           ;SwSpiApp.c: 91: SwSpi_Clk_Pin(phrType, 1);
 12751  002D84  0E01               	movlw	1
 12752  002D86  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 12753  002D88  0100               	movlb	0	; () banked
 12754  002D8A  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12755  002D8C  EC30  F01D         	call	_SwSpi_Clk_Pin
 12756  002D90  0100               	movlb	0	; () banked
 12757  002D92  2B84               	incf	SWSPI_Synth_send_bits@count& (0+255),f,b
 12758  002D94  D7D6               	goto	l7731
 12759  002D96                     u7570:
 12760                           
 12761                           ; BSR set to: 0
 12762                           ;SwSpiApp.c: 92: }
 12763                           ;SwSpiApp.c: 94: _delay((unsigned long)((50)*(8000000/4000000.0)));
 12764                           
 12765                           ; BSR set to: 0
 12766  002D96  0E21               	movlw	33
 12767  002D98                     u9207:
 12768  002D98  2EE8               	decfsz	wreg,f,c
 12769  002D9A  D7FE               	bra	u9207
 12770  002D9C  F000               	nop	
 12771                           
 12772                           ;SwSpiApp.c: 95: SwSpi_Data_Pin(phrType, 0);
 12773  002D9E  0E00               	movlw	0
 12774  002DA0  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 12775  002DA2  0100               	movlb	0	; () banked
 12776  002DA4  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12777  002DA6  EC05  F01D         	call	_SwSpi_Data_Pin
 12778                           
 12779                           ;SwSpiApp.c: 96: SwSpi_Clk_Pin(phrType, 0);
 12780  002DAA  0E00               	movlw	0
 12781  002DAC  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 12782  002DAE  0100               	movlb	0	; () banked
 12783  002DB0  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12784  002DB2  EC30  F01D         	call	_SwSpi_Clk_Pin
 12785  002DB6  0012               	return		;funcret
 12786  002DB8                     __end_of_SWSPI_Synth_send_bits:
 12787                           	opt stack 0
 12788                           tosu	equ	0xFFF
 12789                           tosh	equ	0xFFE
 12790                           tosl	equ	0xFFD
 12791                           pclath	equ	0xFFA
 12792                           tblptru	equ	0xFF8
 12793                           tblptrh	equ	0xFF7
 12794                           tblptrl	equ	0xFF6
 12795                           tablat	equ	0xFF5
 12796                           prodh	equ	0xFF4
 12797                           prodl	equ	0xFF3
 12798                           intcon	equ	0xFF2
 12799                           intcon2	equ	0xFF1
 12800                           postinc0	equ	0xFEE
 12801                           plusw0	equ	0xFEB
 12802                           wreg	equ	0xFE8
 12803                           indf1	equ	0xFE7
 12804                           postdec1	equ	0xFE5
 12805                           fsr1h	equ	0xFE2
 12806                           fsr1l	equ	0xFE1
 12807                           indf2	equ	0xFDF
 12808                           postinc2	equ	0xFDE
 12809                           postdec2	equ	0xFDD
 12810                           plusw2	equ	0xFDB
 12811                           fsr2h	equ	0xFDA
 12812                           fsr2l	equ	0xFD9
 12813                           status	equ	0xFD8
 12814                           
 12815 ;; *************** function _Make32bitsArray *****************
 12816 ;; Defined at:
 12817 ;;		line 113 in file "SystemCommon.c"
 12818 ;; Parameters:    Size  Location     Type
 12819 ;;  array           2   23[COMRAM] PTR unsigned char 
 12820 ;;		 -> SWSPI_Synth_send_bits@bitArray(32), 
 12821 ;;  data            4   25[COMRAM] unsigned long 
 12822 ;; Auto vars:     Size  Location     Type
 12823 ;;  idx             2   31[COMRAM] int 
 12824 ;; Return value:  Size  Location     Type
 12825 ;;                  1    wreg      void 
 12826 ;; Registers used:
 12827 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12828 ;; Tracked objects:
 12829 ;;		On entry : 0/0
 12830 ;;		On exit  : 0/0
 12831 ;;		Unchanged: 0/0
 12832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12833 ;;      Params:         6       0       0       0       0       0       0
 12834 ;;      Locals:         2       0       0       0       0       0       0
 12835 ;;      Temps:          2       0       0       0       0       0       0
 12836 ;;      Totals:        10       0       0       0       0       0       0
 12837 ;;Total ram usage:       10 bytes
 12838 ;; Hardware stack levels used:    1
 12839 ;; Hardware stack levels required when called:    4
 12840 ;; This function calls:
 12841 ;;		Nothing
 12842 ;; This function is called by:
 12843 ;;		_SWSPI_Synth_send_bits
 12844 ;; This function uses a non-reentrant model
 12845 ;;
 12846                           
 12847                           	psect	text71
 12848  00395A                     __ptext71:
 12849                           	opt stack 0
 12850  00395A                     _Make32bitsArray:
 12851                           	opt stack 21
 12852                           
 12853                           ;SystemCommon.c: 115: for(int idx = 0; idx <= 32; idx++)
 12854                           
 12855                           ;incstack = 0
 12856  00395A  0E00               	movlw	0
 12857  00395C  6E21               	movwf	Make32bitsArray@idx+1,c
 12858  00395E  0E00               	movlw	0
 12859  003960  6E20               	movwf	Make32bitsArray@idx,c
 12860  003962                     l7519:
 12861  003962  BE21               	btfsc	Make32bitsArray@idx+1,7,c
 12862  003964  D006               	goto	l1433
 12863  003966  5021               	movf	Make32bitsArray@idx+1,w,c
 12864  003968  E123               	bnz	l1435
 12865  00396A  0E21               	movlw	33
 12866  00396C  5C20               	subwf	Make32bitsArray@idx,w,c
 12867  00396E  B0D8               	btfsc	status,0,c
 12868  003970  0012               	return	
 12869  003972                     l1433:
 12870                           
 12871                           ;SystemCommon.c: 116: {
 12872                           ;SystemCommon.c: 117: array[32 - idx - 1] = data % 2;
 12873  003972  0E01               	movlw	1
 12874  003974  2420               	addwf	Make32bitsArray@idx,w,c
 12875  003976  6E1E               	movwf	??_Make32bitsArray& (0+255),c
 12876  003978  0E00               	movlw	0
 12877  00397A  2021               	addwfc	Make32bitsArray@idx+1,w,c
 12878  00397C  6E1F               	movwf	(??_Make32bitsArray+1)& (0+255),c
 12879  00397E  1E1E               	comf	??_Make32bitsArray,f,c
 12880  003980  1E1F               	comf	??_Make32bitsArray+1,f,c
 12881  003982  4A1E               	infsnz	??_Make32bitsArray,f,c
 12882  003984  2A1F               	incf	??_Make32bitsArray+1,f,c
 12883  003986  0E20               	movlw	32
 12884  003988  261E               	addwf	??_Make32bitsArray,f,c
 12885  00398A  0E00               	movlw	0
 12886  00398C  221F               	addwfc	??_Make32bitsArray+1,f,c
 12887  00398E  501E               	movf	??_Make32bitsArray,w,c
 12888  003990  2418               	addwf	Make32bitsArray@array,w,c
 12889  003992  6ED9               	movwf	fsr2l,c
 12890  003994  501F               	movf	??_Make32bitsArray+1,w,c
 12891  003996  2019               	addwfc	Make32bitsArray@array+1,w,c
 12892  003998  6EDA               	movwf	fsr2h,c
 12893  00399A  501A               	movf	Make32bitsArray@data,w,c
 12894  00399C  0B01               	andlw	1
 12895  00399E  6EDF               	movwf	indf2,c
 12896                           
 12897                           ;SystemCommon.c: 118: data /= 2;
 12898  0039A0  90D8               	bcf	status,0,c
 12899  0039A2  321D               	rrcf	Make32bitsArray@data+3,f,c
 12900  0039A4  321C               	rrcf	Make32bitsArray@data+2,f,c
 12901  0039A6  321B               	rrcf	Make32bitsArray@data+1,f,c
 12902  0039A8  321A               	rrcf	Make32bitsArray@data,f,c
 12903  0039AA  4A20               	infsnz	Make32bitsArray@idx,f,c
 12904  0039AC  2A21               	incf	Make32bitsArray@idx+1,f,c
 12905  0039AE  D7D9               	goto	l7519
 12906  0039B0                     l1435:
 12907  0039B0  0012               	return		;funcret
 12908  0039B2                     __end_of_Make32bitsArray:
 12909                           	opt stack 0
 12910                           tosu	equ	0xFFF
 12911                           tosh	equ	0xFFE
 12912                           tosl	equ	0xFFD
 12913                           pclath	equ	0xFFA
 12914                           tblptru	equ	0xFF8
 12915                           tblptrh	equ	0xFF7
 12916                           tblptrl	equ	0xFF6
 12917                           tablat	equ	0xFF5
 12918                           prodh	equ	0xFF4
 12919                           prodl	equ	0xFF3
 12920                           intcon	equ	0xFF2
 12921                           intcon2	equ	0xFF1
 12922                           postinc0	equ	0xFEE
 12923                           plusw0	equ	0xFEB
 12924                           wreg	equ	0xFE8
 12925                           indf1	equ	0xFE7
 12926                           postdec1	equ	0xFE5
 12927                           fsr1h	equ	0xFE2
 12928                           fsr1l	equ	0xFE1
 12929                           indf2	equ	0xFDF
 12930                           postinc2	equ	0xFDE
 12931                           postdec2	equ	0xFDD
 12932                           plusw2	equ	0xFDB
 12933                           fsr2h	equ	0xFDA
 12934                           fsr2l	equ	0xFD9
 12935                           status	equ	0xFD8
 12936                           
 12937 ;; *************** function _FillArray *****************
 12938 ;; Defined at:
 12939 ;;		line 29 in file "SystemCommon.c"
 12940 ;; Parameters:    Size  Location     Type
 12941 ;;  array           2   31[COMRAM] PTR unsigned char 
 12942 ;;		 -> SWSPI_Synth_send_bits@bitArray(32), synthLdTxArray(12), synthLdRxArray(12), 
 12943 ;;  size            2   33[COMRAM] int 
 12944 ;;  value           1   35[COMRAM] unsigned char 
 12945 ;; Auto vars:     Size  Location     Type
 12946 ;;		None
 12947 ;; Return value:  Size  Location     Type
 12948 ;;                  1    wreg      void 
 12949 ;; Registers used:
 12950 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12951 ;; Tracked objects:
 12952 ;;		On entry : 0/0
 12953 ;;		On exit  : 0/0
 12954 ;;		Unchanged: 0/0
 12955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12956 ;;      Params:         5       0       0       0       0       0       0
 12957 ;;      Locals:         0       0       0       0       0       0       0
 12958 ;;      Temps:          0       0       0       0       0       0       0
 12959 ;;      Totals:         5       0       0       0       0       0       0
 12960 ;;Total ram usage:        5 bytes
 12961 ;; Hardware stack levels used:    1
 12962 ;; Hardware stack levels required when called:    5
 12963 ;; This function calls:
 12964 ;;		_memset
 12965 ;; This function is called by:
 12966 ;;		_PLLInitialize
 12967 ;;		_SWSPI_Synth_send_bits
 12968 ;; This function uses a non-reentrant model
 12969 ;;
 12970                           
 12971                           	psect	text72
 12972  0042E8                     __ptext72:
 12973                           	opt stack 0
 12974  0042E8                     _FillArray:
 12975                           	opt stack 20
 12976                           
 12977                           ;SystemCommon.c: 31: memset(array, value, size);
 12978                           
 12979                           ;incstack = 0
 12980  0042E8  C020  F018         	movff	FillArray@array,memset@p1
 12981  0042EC  C021  F019         	movff	FillArray@array+1,memset@p1+1
 12982  0042F0  C024  F01A         	movff	FillArray@value,memset@c
 12983  0042F4  6A1B               	clrf	memset@c+1,c
 12984  0042F6  C022  F01C         	movff	FillArray@size,memset@n
 12985  0042FA  C023  F01D         	movff	FillArray@size+1,memset@n+1
 12986  0042FE  EC6D  F020         	call	_memset	;wreg free
 12987  004302  0012               	return		;funcret
 12988  004304                     __end_of_FillArray:
 12989                           	opt stack 0
 12990                           tosu	equ	0xFFF
 12991                           tosh	equ	0xFFE
 12992                           tosl	equ	0xFFD
 12993                           pclath	equ	0xFFA
 12994                           tblptru	equ	0xFF8
 12995                           tblptrh	equ	0xFF7
 12996                           tblptrl	equ	0xFF6
 12997                           tablat	equ	0xFF5
 12998                           prodh	equ	0xFF4
 12999                           prodl	equ	0xFF3
 13000                           intcon	equ	0xFF2
 13001                           intcon2	equ	0xFF1
 13002                           postinc0	equ	0xFEE
 13003                           plusw0	equ	0xFEB
 13004                           wreg	equ	0xFE8
 13005                           indf1	equ	0xFE7
 13006                           postdec1	equ	0xFE5
 13007                           fsr1h	equ	0xFE2
 13008                           fsr1l	equ	0xFE1
 13009                           indf2	equ	0xFDF
 13010                           postinc2	equ	0xFDE
 13011                           postdec2	equ	0xFDD
 13012                           plusw2	equ	0xFDB
 13013                           fsr2h	equ	0xFDA
 13014                           fsr2l	equ	0xFD9
 13015                           status	equ	0xFD8
 13016                           
 13017 ;; *************** function _memset *****************
 13018 ;; Defined at:
 13019 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 13020 ;; Parameters:    Size  Location     Type
 13021 ;;  p1              2   23[COMRAM] PTR void 
 13022 ;;		 -> GetMcuFwVersion@TxMsg(18), GetIntFromUartData@dataRegArr(10), SWSPI_Synth_send_bits@bitArray(32), SynthReadData@
      +TxMsg(29), 
 13023 ;;		 -> SynthReadData@eepromDataArray(20), DacReadValue@TxMsg(7), FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), 
 13024 ;;		 -> sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), 
 13025 ;;		 -> synthLdTxArray(12), synthLdRxArray(12), 
 13026 ;;  c               2   25[COMRAM] int 
 13027 ;;  n               2   27[COMRAM] unsigned int 
 13028 ;; Auto vars:     Size  Location     Type
 13029 ;;  p               2   29[COMRAM] PTR unsigned char 
 13030 ;;		 -> GetMcuFwVersion@TxMsg(18), GetIntFromUartData@dataRegArr(10), SWSPI_Synth_send_bits@bitArray(32), SynthReadData@
      +TxMsg(29), 
 13031 ;;		 -> SynthReadData@eepromDataArray(20), DacReadValue@TxMsg(7), FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), 
 13032 ;;		 -> sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), 
 13033 ;;		 -> synthLdTxArray(12), synthLdRxArray(12), 
 13034 ;; Return value:  Size  Location     Type
 13035 ;;                  2   23[COMRAM] PTR void 
 13036 ;; Registers used:
 13037 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13038 ;; Tracked objects:
 13039 ;;		On entry : 0/0
 13040 ;;		On exit  : 0/0
 13041 ;;		Unchanged: 0/0
 13042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13043 ;;      Params:         6       0       0       0       0       0       0
 13044 ;;      Locals:         2       0       0       0       0       0       0
 13045 ;;      Temps:          0       0       0       0       0       0       0
 13046 ;;      Totals:         8       0       0       0       0       0       0
 13047 ;;Total ram usage:        8 bytes
 13048 ;; Hardware stack levels used:    1
 13049 ;; Hardware stack levels required when called:    4
 13050 ;; This function calls:
 13051 ;;		Nothing
 13052 ;; This function is called by:
 13053 ;;		_ZeroArray
 13054 ;;		_FillArray
 13055 ;; This function uses a non-reentrant model
 13056 ;;
 13057                           
 13058                           	psect	text73
 13059  0040DA                     __ptext73:
 13060                           	opt stack 0
 13061  0040DA                     _memset:
 13062                           	opt stack 24
 13063                           
 13064                           ;incstack = 0
 13065  0040DA  C018  F01E         	movff	memset@p1,memset@p
 13066  0040DE  C019  F01F         	movff	memset@p1+1,memset@p+1
 13067  0040E2  D008               	goto	l2028
 13068  0040E4                     l7301:
 13069  0040E4  C01E  FFD9         	movff	memset@p,fsr2l
 13070  0040E8  C01F  FFDA         	movff	memset@p+1,fsr2h
 13071  0040EC  C01A  FFDF         	movff	memset@c,indf2
 13072  0040F0  4A1E               	infsnz	memset@p,f,c
 13073  0040F2  2A1F               	incf	memset@p+1,f,c
 13074  0040F4                     l2028:
 13075  0040F4  061C               	decf	memset@n,f,c
 13076  0040F6  A0D8               	btfss	status,0,c
 13077  0040F8  061D               	decf	memset@n+1,f,c
 13078  0040FA  281C               	incf	memset@n,w,c
 13079  0040FC  E1F3               	bnz	l7301
 13080  0040FE  281D               	incf	memset@n+1,w,c
 13081  004100  B4D8               	btfsc	status,2,c
 13082  004102  0012               	return	
 13083  004104  D7EF               	goto	l2029
 13084  004106                     __end_of_memset:
 13085                           	opt stack 0
 13086                           tosu	equ	0xFFF
 13087                           tosh	equ	0xFFE
 13088                           tosl	equ	0xFFD
 13089                           pclath	equ	0xFFA
 13090                           tblptru	equ	0xFF8
 13091                           tblptrh	equ	0xFF7
 13092                           tblptrl	equ	0xFF6
 13093                           tablat	equ	0xFF5
 13094                           prodh	equ	0xFF4
 13095                           prodl	equ	0xFF3
 13096                           intcon	equ	0xFF2
 13097                           intcon2	equ	0xFF1
 13098                           postinc0	equ	0xFEE
 13099                           plusw0	equ	0xFEB
 13100                           wreg	equ	0xFE8
 13101                           indf1	equ	0xFE7
 13102                           postdec1	equ	0xFE5
 13103                           fsr1h	equ	0xFE2
 13104                           fsr1l	equ	0xFE1
 13105                           indf2	equ	0xFDF
 13106                           postinc2	equ	0xFDE
 13107                           postdec2	equ	0xFDD
 13108                           plusw2	equ	0xFDB
 13109                           fsr2h	equ	0xFDA
 13110                           fsr2l	equ	0xFD9
 13111                           status	equ	0xFD8
 13112                           
 13113 ;; *************** function _SWSPI_DAC_send_bits *****************
 13114 ;; Defined at:
 13115 ;;		line 43 in file "SwSpiApp.c"
 13116 ;; Parameters:    Size  Location     Type
 13117 ;;  phrType         1    wreg     enum E1
 13118 ;;  data            1   25[COMRAM] unsigned char 
 13119 ;; Auto vars:     Size  Location     Type
 13120 ;;  phrType         1   27[COMRAM] enum E1
 13121 ;;  count           1   26[COMRAM] unsigned char 
 13122 ;; Return value:  Size  Location     Type
 13123 ;;                  1    wreg      void 
 13124 ;; Registers used:
 13125 ;;		wreg, status,2, status,0, cstack
 13126 ;; Tracked objects:
 13127 ;;		On entry : 0/0
 13128 ;;		On exit  : 0/0
 13129 ;;		Unchanged: 0/0
 13130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13131 ;;      Params:         1       0       0       0       0       0       0
 13132 ;;      Locals:         2       0       0       0       0       0       0
 13133 ;;      Temps:          0       0       0       0       0       0       0
 13134 ;;      Totals:         3       0       0       0       0       0       0
 13135 ;;Total ram usage:        3 bytes
 13136 ;; Hardware stack levels used:    1
 13137 ;; Hardware stack levels required when called:    5
 13138 ;; This function calls:
 13139 ;;		_SwSpi_Clk_Pin
 13140 ;;		_SwSpi_Data_Pin
 13141 ;; This function is called by:
 13142 ;;		_SWSPI_send_word
 13143 ;; This function uses a non-reentrant model
 13144 ;;
 13145                           
 13146                           	psect	text74
 13147  0039B2                     __ptext74:
 13148                           	opt stack 0
 13149  0039B2                     _SWSPI_DAC_send_bits:
 13150                           	opt stack 21
 13151                           
 13152                           ;incstack = 0
 13153                           ;SWSPI_DAC_send_bits@phrType stored from wreg
 13154  0039B2  6E1C               	movwf	SWSPI_DAC_send_bits@phrType,c
 13155                           
 13156                           ;SwSpiApp.c: 45: uint8_t count;
 13157                           ;SwSpiApp.c: 46: for (count = 8; count ; count--, data <<= 1)
 13158  0039B4  0E08               	movlw	8
 13159  0039B6  6E1B               	movwf	SWSPI_DAC_send_bits@count,c
 13160  0039B8  D01A               	goto	l646
 13161  0039BA                     
 13162                           ;SwSpiApp.c: 47: {
 13163                           ;SwSpiApp.c: 48: SwSpi_Clk_Pin(phrType, 1);
 13164  0039BA  0E01               	movlw	1
 13165  0039BC  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 13166  0039BE  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13167  0039C0  EC30  F01D         	call	_SwSpi_Clk_Pin
 13168                           
 13169                           ;SwSpiApp.c: 50: if (data & 0X80)
 13170  0039C4  AE1A               	btfss	SWSPI_DAC_send_bits@data,7,c
 13171  0039C6  D006               	goto	l648
 13172                           
 13173                           ;SwSpiApp.c: 51: {
 13174                           ;SwSpiApp.c: 53: SwSpi_Data_Pin(phrType, 1);
 13175  0039C8  0E01               	movlw	1
 13176  0039CA  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 13177  0039CC  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13178  0039CE  EC05  F01D         	call	_SwSpi_Data_Pin
 13179                           
 13180                           ;SwSpiApp.c: 54: }
 13181  0039D2  D005               	goto	l649
 13182  0039D4                     l648:
 13183                           
 13184                           ;SwSpiApp.c: 55: else
 13185                           ;SwSpiApp.c: 56: {
 13186                           ;SwSpiApp.c: 57: SwSpi_Data_Pin(phrType, 0);
 13187  0039D4  0E00               	movlw	0
 13188  0039D6  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 13189  0039D8  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13190  0039DA  EC05  F01D         	call	_SwSpi_Data_Pin
 13191  0039DE                     l649:
 13192                           
 13193                           ;SwSpiApp.c: 58: }
 13194                           ;SwSpiApp.c: 60: SwSpi_Clk_Pin(phrType, 0);
 13195  0039DE  0E00               	movlw	0
 13196  0039E0  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 13197  0039E2  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13198  0039E4  EC30  F01D         	call	_SwSpi_Clk_Pin
 13199  0039E8  061B               	decf	SWSPI_DAC_send_bits@count,f,c
 13200  0039EA  90D8               	bcf	status,0,c
 13201  0039EC  361A               	rlcf	SWSPI_DAC_send_bits@data,f,c
 13202  0039EE                     l646:
 13203  0039EE  501B               	movf	SWSPI_DAC_send_bits@count,w,c
 13204  0039F0  A4D8               	btfss	status,2,c
 13205  0039F2  D7E3               	goto	l647
 13206                           
 13207                           ;SwSpiApp.c: 61: }
 13208                           ;SwSpiApp.c: 63: SwSpi_Data_Pin(phrType, 0);
 13209  0039F4  0E00               	movlw	0
 13210  0039F6  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 13211  0039F8  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13212  0039FA  EC05  F01D         	call	_SwSpi_Data_Pin
 13213                           
 13214                           ;SwSpiApp.c: 64: SwSpi_Clk_Pin(phrType, 0);
 13215  0039FE  0E00               	movlw	0
 13216  003A00  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 13217  003A02  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13218  003A04  EC30  F01D         	call	_SwSpi_Clk_Pin
 13219  003A08  0012               	return		;funcret
 13220  003A0A                     __end_of_SWSPI_DAC_send_bits:
 13221                           	opt stack 0
 13222                           tosu	equ	0xFFF
 13223                           tosh	equ	0xFFE
 13224                           tosl	equ	0xFFD
 13225                           pclath	equ	0xFFA
 13226                           tblptru	equ	0xFF8
 13227                           tblptrh	equ	0xFF7
 13228                           tblptrl	equ	0xFF6
 13229                           tablat	equ	0xFF5
 13230                           prodh	equ	0xFF4
 13231                           prodl	equ	0xFF3
 13232                           intcon	equ	0xFF2
 13233                           intcon2	equ	0xFF1
 13234                           postinc0	equ	0xFEE
 13235                           plusw0	equ	0xFEB
 13236                           wreg	equ	0xFE8
 13237                           indf1	equ	0xFE7
 13238                           postdec1	equ	0xFE5
 13239                           fsr1h	equ	0xFE2
 13240                           fsr1l	equ	0xFE1
 13241                           indf2	equ	0xFDF
 13242                           postinc2	equ	0xFDE
 13243                           postdec2	equ	0xFDD
 13244                           plusw2	equ	0xFDB
 13245                           fsr2h	equ	0xFDA
 13246                           fsr2l	equ	0xFD9
 13247                           status	equ	0xFD8
 13248                           
 13249 ;; *************** function _SwSpi_Data_Pin *****************
 13250 ;; Defined at:
 13251 ;;		line 103 in file "SwSpiApp.c"
 13252 ;; Parameters:    Size  Location     Type
 13253 ;;  phrType         1    wreg     enum E1
 13254 ;;  cPinMode        1   23[COMRAM] unsigned char 
 13255 ;; Auto vars:     Size  Location     Type
 13256 ;;  phrType         1   24[COMRAM] enum E1
 13257 ;; Return value:  Size  Location     Type
 13258 ;;                  1    wreg      void 
 13259 ;; Registers used:
 13260 ;;		wreg, status,2, status,0
 13261 ;; Tracked objects:
 13262 ;;		On entry : 0/0
 13263 ;;		On exit  : 0/0
 13264 ;;		Unchanged: 0/0
 13265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13266 ;;      Params:         1       0       0       0       0       0       0
 13267 ;;      Locals:         1       0       0       0       0       0       0
 13268 ;;      Temps:          0       0       0       0       0       0       0
 13269 ;;      Totals:         2       0       0       0       0       0       0
 13270 ;;Total ram usage:        2 bytes
 13271 ;; Hardware stack levels used:    1
 13272 ;; Hardware stack levels required when called:    4
 13273 ;; This function calls:
 13274 ;;		Nothing
 13275 ;; This function is called by:
 13276 ;;		_SWSPI_DAC_send_bits
 13277 ;;		_SWSPI_Synth_send_bits
 13278 ;; This function uses a non-reentrant model
 13279 ;;
 13280                           
 13281                           	psect	text75
 13282  003A0A                     __ptext75:
 13283                           	opt stack 0
 13284  003A0A                     _SwSpi_Data_Pin:
 13285                           	opt stack 21
 13286                           
 13287                           ;incstack = 0
 13288                           ;SwSpi_Data_Pin@phrType stored from wreg
 13289  003A0A  6E19               	movwf	SwSpi_Data_Pin@phrType,c
 13290                           
 13291                           ;SwSpiApp.c: 105: switch(phrType)
 13292  003A0C  D01E               	goto	l661
 13293  003A0E                     
 13294                           ;SwSpiApp.c: 108: if(cPinMode == 1)
 13295  003A0E  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 13296  003A10  A4D8               	btfss	status,2,c
 13297  003A12  D002               	goto	l663
 13298                           
 13299                           ;SwSpiApp.c: 109: {
 13300                           ;SwSpiApp.c: 110: do { LATDbits.LATD0 = 1; } while(0);
 13301  003A14  808C               	bsf	3980,0,c	;volatile
 13302                           
 13303                           ;SwSpiApp.c: 111: }
 13304  003A16  0012               	return	
 13305  003A18                     l663:
 13306                           
 13307                           ;SwSpiApp.c: 112: else if (cPinMode == 0)
 13308  003A18  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 13309  003A1A  A4D8               	btfss	status,2,c
 13310  003A1C  0012               	return	
 13311                           
 13312                           ;SwSpiApp.c: 113: {
 13313                           ;SwSpiApp.c: 114: do { LATDbits.LATD0 = 0; } while(0);
 13314  003A1E  908C               	bcf	3980,0,c	;volatile
 13315                           
 13316                           ;SwSpiApp.c: 115: }
 13317                           ;SwSpiApp.c: 116: break;
 13318  003A20  0012               	return	
 13319  003A22                     
 13320                           ;SwSpiApp.c: 119: if(cPinMode == 1)
 13321  003A22  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 13322  003A24  A4D8               	btfss	status,2,c
 13323  003A26  D002               	goto	l672
 13324                           
 13325                           ;SwSpiApp.c: 120: {
 13326                           ;SwSpiApp.c: 121: do { LATCbits.LATC5 = 1; } while(0);
 13327  003A28  8A8B               	bsf	3979,5,c	;volatile
 13328                           
 13329                           ;SwSpiApp.c: 122: }
 13330  003A2A  0012               	return	
 13331  003A2C                     l672:
 13332                           
 13333                           ;SwSpiApp.c: 123: else if (cPinMode == 0)
 13334  003A2C  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 13335  003A2E  A4D8               	btfss	status,2,c
 13336  003A30  0012               	return	
 13337                           
 13338                           ;SwSpiApp.c: 124: {
 13339                           ;SwSpiApp.c: 125: do { LATCbits.LATC5 = 0; } while(0);
 13340  003A32  9A8B               	bcf	3979,5,c	;volatile
 13341                           
 13342                           ;SwSpiApp.c: 126: }
 13343                           ;SwSpiApp.c: 127: break;
 13344  003A34  0012               	return	
 13345  003A36                     
 13346                           ;SwSpiApp.c: 130: if(cPinMode == 1)
 13347  003A36  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 13348  003A38  A4D8               	btfss	status,2,c
 13349  003A3A  D002               	goto	l680
 13350                           
 13351                           ;SwSpiApp.c: 131: {
 13352                           ;SwSpiApp.c: 132: do { LATAbits.LATA4 = 1; } while(0);
 13353  003A3C  8889               	bsf	3977,4,c	;volatile
 13354                           
 13355                           ;SwSpiApp.c: 133: }
 13356  003A3E  0012               	return	
 13357  003A40                     l680:
 13358                           
 13359                           ;SwSpiApp.c: 134: else if (cPinMode == 0)
 13360  003A40  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 13361  003A42  A4D8               	btfss	status,2,c
 13362  003A44  0012               	return	
 13363                           
 13364                           ;SwSpiApp.c: 135: {
 13365                           ;SwSpiApp.c: 136: do { LATAbits.LATA4 = 0; } while(0);
 13366  003A46  9889               	bcf	3977,4,c	;volatile
 13367                           
 13368                           ;SwSpiApp.c: 139: }
 13369                           
 13370                           ;SwSpiApp.c: 137: }
 13371                           ;SwSpiApp.c: 138: break;
 13372  003A48  0012               	return	
 13373  003A4A                     l661:
 13374  003A4A  5019               	movf	SwSpi_Data_Pin@phrType,w,c
 13375                           
 13376                           ; Switch size 1, requested type "space"
 13377                           ; Number of cases is 3, Range of values is 0 to 2
 13378                           ; switch strategies available:
 13379                           ; Name         Instructions Cycles
 13380                           ; simple_byte           10     6 (average)
 13381                           ;	Chosen strategy is simple_byte
 13382  003A4C  0A00               	xorlw	0	; case 0
 13383  003A4E  B4D8               	btfsc	status,2,c
 13384  003A50  D7DE               	goto	l662
 13385  003A52  0A01               	xorlw	1	; case 1
 13386  003A54  B4D8               	btfsc	status,2,c
 13387  003A56  D7E5               	goto	l671
 13388  003A58  0A03               	xorlw	3	; case 2
 13389  003A5A  A4D8               	btfss	status,2,c
 13390  003A5C  0012               	return	
 13391  003A5E  D7EB               	goto	l679
 13392  003A60                     __end_of_SwSpi_Data_Pin:
 13393                           	opt stack 0
 13394                           tosu	equ	0xFFF
 13395                           tosh	equ	0xFFE
 13396                           tosl	equ	0xFFD
 13397                           pclath	equ	0xFFA
 13398                           tblptru	equ	0xFF8
 13399                           tblptrh	equ	0xFF7
 13400                           tblptrl	equ	0xFF6
 13401                           tablat	equ	0xFF5
 13402                           prodh	equ	0xFF4
 13403                           prodl	equ	0xFF3
 13404                           intcon	equ	0xFF2
 13405                           intcon2	equ	0xFF1
 13406                           postinc0	equ	0xFEE
 13407                           plusw0	equ	0xFEB
 13408                           wreg	equ	0xFE8
 13409                           indf1	equ	0xFE7
 13410                           postdec1	equ	0xFE5
 13411                           fsr1h	equ	0xFE2
 13412                           fsr1l	equ	0xFE1
 13413                           indf2	equ	0xFDF
 13414                           postinc2	equ	0xFDE
 13415                           postdec2	equ	0xFDD
 13416                           plusw2	equ	0xFDB
 13417                           fsr2h	equ	0xFDA
 13418                           fsr2l	equ	0xFD9
 13419                           status	equ	0xFD8
 13420                           
 13421 ;; *************** function _SwSpi_Clk_Pin *****************
 13422 ;; Defined at:
 13423 ;;		line 142 in file "SwSpiApp.c"
 13424 ;; Parameters:    Size  Location     Type
 13425 ;;  phrType         1    wreg     enum E1
 13426 ;;  cPinMode        1   23[COMRAM] unsigned char 
 13427 ;; Auto vars:     Size  Location     Type
 13428 ;;  phrType         1   24[COMRAM] enum E1
 13429 ;; Return value:  Size  Location     Type
 13430 ;;                  1    wreg      void 
 13431 ;; Registers used:
 13432 ;;		wreg, status,2, status,0
 13433 ;; Tracked objects:
 13434 ;;		On entry : 0/0
 13435 ;;		On exit  : 0/0
 13436 ;;		Unchanged: 0/0
 13437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13438 ;;      Params:         1       0       0       0       0       0       0
 13439 ;;      Locals:         1       0       0       0       0       0       0
 13440 ;;      Temps:          0       0       0       0       0       0       0
 13441 ;;      Totals:         2       0       0       0       0       0       0
 13442 ;;Total ram usage:        2 bytes
 13443 ;; Hardware stack levels used:    1
 13444 ;; Hardware stack levels required when called:    4
 13445 ;; This function calls:
 13446 ;;		Nothing
 13447 ;; This function is called by:
 13448 ;;		_SWSPI_DAC_send_bits
 13449 ;;		_SWSPI_Synth_send_bits
 13450 ;;		_SwSpi_Synth_Toggle_Clock
 13451 ;; This function uses a non-reentrant model
 13452 ;;
 13453                           
 13454                           	psect	text76
 13455  003A60                     __ptext76:
 13456                           	opt stack 0
 13457  003A60                     _SwSpi_Clk_Pin:
 13458                           	opt stack 21
 13459                           
 13460                           ;incstack = 0
 13461                           ;SwSpi_Clk_Pin@phrType stored from wreg
 13462  003A60  6E19               	movwf	SwSpi_Clk_Pin@phrType,c
 13463                           
 13464                           ;SwSpiApp.c: 144: switch(phrType)
 13465  003A62  D01E               	goto	l690
 13466  003A64                     
 13467                           ;SwSpiApp.c: 147: if(cPinMode == 1)
 13468  003A64  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 13469  003A66  A4D8               	btfss	status,2,c
 13470  003A68  D002               	goto	l692
 13471                           
 13472                           ;SwSpiApp.c: 148: {
 13473                           ;SwSpiApp.c: 149: do { LATCbits.LATC3 = 1; } while(0);
 13474  003A6A  868B               	bsf	3979,3,c	;volatile
 13475                           
 13476                           ;SwSpiApp.c: 150: }
 13477  003A6C  0012               	return	
 13478  003A6E                     l692:
 13479                           
 13480                           ;SwSpiApp.c: 151: else if (cPinMode == 0)
 13481  003A6E  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 13482  003A70  A4D8               	btfss	status,2,c
 13483  003A72  0012               	return	
 13484                           
 13485                           ;SwSpiApp.c: 152: {
 13486                           ;SwSpiApp.c: 153: do { LATCbits.LATC3 = 0; } while(0);
 13487  003A74  968B               	bcf	3979,3,c	;volatile
 13488                           
 13489                           ;SwSpiApp.c: 154: }
 13490                           ;SwSpiApp.c: 155: break;
 13491  003A76  0012               	return	
 13492  003A78                     
 13493                           ;SwSpiApp.c: 158: if(cPinMode == 1)
 13494  003A78  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 13495  003A7A  A4D8               	btfss	status,2,c
 13496  003A7C  D002               	goto	l701
 13497                           
 13498                           ;SwSpiApp.c: 159: {
 13499                           ;SwSpiApp.c: 160: do { LATCbits.LATC4 = 1; } while(0);
 13500  003A7E  888B               	bsf	3979,4,c	;volatile
 13501                           
 13502                           ;SwSpiApp.c: 161: }
 13503  003A80  0012               	return	
 13504  003A82                     l701:
 13505                           
 13506                           ;SwSpiApp.c: 162: else if (cPinMode == 0)
 13507  003A82  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 13508  003A84  A4D8               	btfss	status,2,c
 13509  003A86  0012               	return	
 13510                           
 13511                           ;SwSpiApp.c: 163: {
 13512                           ;SwSpiApp.c: 164: do { LATCbits.LATC4 = 0; } while(0);
 13513  003A88  988B               	bcf	3979,4,c	;volatile
 13514                           
 13515                           ;SwSpiApp.c: 165: }
 13516                           ;SwSpiApp.c: 167: break;
 13517  003A8A  0012               	return	
 13518  003A8C                     
 13519                           ;SwSpiApp.c: 170: if(cPinMode == 1)
 13520  003A8C  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 13521  003A8E  A4D8               	btfss	status,2,c
 13522  003A90  D002               	goto	l709
 13523                           
 13524                           ;SwSpiApp.c: 171: {
 13525                           ;SwSpiApp.c: 172: do { LATAbits.LATA3 = 1; } while(0);
 13526  003A92  8689               	bsf	3977,3,c	;volatile
 13527                           
 13528                           ;SwSpiApp.c: 173: }
 13529  003A94  0012               	return	
 13530  003A96                     l709:
 13531                           
 13532                           ;SwSpiApp.c: 174: else if (cPinMode == 0)
 13533  003A96  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 13534  003A98  A4D8               	btfss	status,2,c
 13535  003A9A  0012               	return	
 13536                           
 13537                           ;SwSpiApp.c: 175: {
 13538                           ;SwSpiApp.c: 176: do { LATAbits.LATA3 = 0; } while(0);
 13539  003A9C  9689               	bcf	3977,3,c	;volatile
 13540                           
 13541                           ;SwSpiApp.c: 179: }
 13542                           
 13543                           ;SwSpiApp.c: 177: }
 13544                           ;SwSpiApp.c: 178: break;
 13545  003A9E  0012               	return	
 13546  003AA0                     l690:
 13547  003AA0  5019               	movf	SwSpi_Clk_Pin@phrType,w,c
 13548                           
 13549                           ; Switch size 1, requested type "space"
 13550                           ; Number of cases is 3, Range of values is 0 to 2
 13551                           ; switch strategies available:
 13552                           ; Name         Instructions Cycles
 13553                           ; simple_byte           10     6 (average)
 13554                           ;	Chosen strategy is simple_byte
 13555  003AA2  0A00               	xorlw	0	; case 0
 13556  003AA4  B4D8               	btfsc	status,2,c
 13557  003AA6  D7DE               	goto	l691
 13558  003AA8  0A01               	xorlw	1	; case 1
 13559  003AAA  B4D8               	btfsc	status,2,c
 13560  003AAC  D7E5               	goto	l700
 13561  003AAE  0A03               	xorlw	3	; case 2
 13562  003AB0  A4D8               	btfss	status,2,c
 13563  003AB2  0012               	return	
 13564  003AB4  D7EB               	goto	l708
 13565  003AB6                     __end_of_SwSpi_Clk_Pin:
 13566                           	opt stack 0
 13567                           tosu	equ	0xFFF
 13568                           tosh	equ	0xFFE
 13569                           tosl	equ	0xFFD
 13570                           pclath	equ	0xFFA
 13571                           tblptru	equ	0xFF8
 13572                           tblptrh	equ	0xFF7
 13573                           tblptrl	equ	0xFF6
 13574                           tablat	equ	0xFF5
 13575                           prodh	equ	0xFF4
 13576                           prodl	equ	0xFF3
 13577                           intcon	equ	0xFF2
 13578                           intcon2	equ	0xFF1
 13579                           postinc0	equ	0xFEE
 13580                           plusw0	equ	0xFEB
 13581                           wreg	equ	0xFE8
 13582                           indf1	equ	0xFE7
 13583                           postdec1	equ	0xFE5
 13584                           fsr1h	equ	0xFE2
 13585                           fsr1l	equ	0xFE1
 13586                           indf2	equ	0xFDF
 13587                           postinc2	equ	0xFDE
 13588                           postdec2	equ	0xFDD
 13589                           plusw2	equ	0xFDB
 13590                           fsr2h	equ	0xFDA
 13591                           fsr2l	equ	0xFD9
 13592                           status	equ	0xFD8
 13593                           
 13594 ;; *************** function _ReadIntFromEeprom *****************
 13595 ;; Defined at:
 13596 ;;		line 131 in file "SystemCommon.c"
 13597 ;; Parameters:    Size  Location     Type
 13598 ;;  address         1    wreg     unsigned char 
 13599 ;;  numOfByes       2   81[BANK0 ] int 
 13600 ;; Auto vars:     Size  Location     Type
 13601 ;;  address         1   98[BANK0 ] unsigned char 
 13602 ;;  base            4   88[BANK0 ] unsigned long 
 13603 ;;  idx             1  103[BANK0 ] unsigned char 
 13604 ;;  retVal          4   99[BANK0 ] unsigned long 
 13605 ;; Return value:  Size  Location     Type
 13606 ;;                  4   81[BANK0 ] unsigned long 
 13607 ;; Registers used:
 13608 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13609 ;; Tracked objects:
 13610 ;;		On entry : 0/0
 13611 ;;		On exit  : 0/0
 13612 ;;		Unchanged: 0/0
 13613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13614 ;;      Params:         0       4       0       0       0       0       0
 13615 ;;      Locals:         0      16       0       0       0       0       0
 13616 ;;      Temps:          0       3       0       0       0       0       0
 13617 ;;      Totals:         0      23       0       0       0       0       0
 13618 ;;Total ram usage:       23 bytes
 13619 ;; Hardware stack levels used:    1
 13620 ;; Hardware stack levels required when called:    9
 13621 ;; This function calls:
 13622 ;;		_EepromRead
 13623 ;;		___awtoft
 13624 ;;		___fttol
 13625 ;;		___lmul
 13626 ;;		_pow
 13627 ;; This function is called by:
 13628 ;;		_DacInit
 13629 ;;		_DacReadValue
 13630 ;;		_InitSynth
 13631 ;;		_SynthReadData
 13632 ;; This function uses a non-reentrant model
 13633 ;;
 13634                           
 13635                           	psect	text77
 13636  0020DE                     __ptext77:
 13637                           	opt stack 0
 13638  0020DE                     _ReadIntFromEeprom:
 13639                           	opt stack 18
 13640                           
 13641                           ;incstack = 0
 13642                           ;ReadIntFromEeprom@address stored from wreg
 13643  0020DE  0100               	movlb	0	; () banked
 13644  0020E0  6FC2               	movwf	ReadIntFromEeprom@address& (0+255),b
 13645                           
 13646                           ;SystemCommon.c: 133: uint32_t retVal = 0x00;
 13647  0020E2  0E00               	movlw	0
 13648  0020E4  0100               	movlb	0	; () banked
 13649  0020E6  6FC3               	movwf	ReadIntFromEeprom@retVal& (0+255),b
 13650  0020E8  0E00               	movlw	0
 13651  0020EA  6FC4               	movwf	(ReadIntFromEeprom@retVal+1)& (0+255),b
 13652  0020EC  0E00               	movlw	0
 13653  0020EE  6FC5               	movwf	(ReadIntFromEeprom@retVal+2)& (0+255),b
 13654  0020F0  0E00               	movlw	0
 13655  0020F2  6FC6               	movwf	(ReadIntFromEeprom@retVal+3)& (0+255),b
 13656                           
 13657                           ; BSR set to: 0
 13658                           ;SystemCommon.c: 134: address -= numOfByes;
 13659  0020F4  51B1               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 13660  0020F6  5FC2               	subwf	ReadIntFromEeprom@address& (0+255),f,b
 13661                           
 13662                           ; BSR set to: 0
 13663                           ;SystemCommon.c: 136: for(uint8_t idx = 0; idx < numOfByes; idx++)
 13664  0020F8  0E00               	movlw	0
 13665  0020FA  6FC7               	movwf	ReadIntFromEeprom@idx& (0+255),b
 13666  0020FC  D06D               	goto	l1444
 13667  0020FE                     
 13668                           ; BSR set to: 0
 13669                           ;SystemCommon.c: 137: {
 13670                           ;SystemCommon.c: 138: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 13671                           
 13672                           ; BSR set to: 0
 13673  0020FE  51C7               	movf	ReadIntFromEeprom@idx& (0+255),w,b
 13674  002100  6FB5               	movwf	??_ReadIntFromEeprom& (0+255),b
 13675  002102  6BB6               	clrf	(??_ReadIntFromEeprom+1)& (0+255),b
 13676  002104  0E01               	movlw	1
 13677  002106  27B5               	addwf	??_ReadIntFromEeprom& (0+255),f,b
 13678  002108  0E00               	movlw	0
 13679  00210A  23B6               	addwfc	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13680  00210C  1FB5               	comf	??_ReadIntFromEeprom& (0+255),f,b
 13681  00210E  1FB6               	comf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13682  002110  4BB5               	infsnz	??_ReadIntFromEeprom& (0+255),f,b
 13683  002112  2BB6               	incf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13684  002114  51B1               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 13685  002116  27B5               	addwf	??_ReadIntFromEeprom& (0+255),f,b
 13686  002118  51B2               	movf	(ReadIntFromEeprom@numOfByes+1)& (0+255),w,b
 13687  00211A  23B6               	addwfc	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13688  00211C  90D8               	bcf	status,0,c
 13689  00211E  37B5               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 13690  002120  37B6               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13691  002122  90D8               	bcf	status,0,c
 13692  002124  37B5               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 13693  002126  37B6               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13694  002128  90D8               	bcf	status,0,c
 13695  00212A  37B5               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 13696  00212C  37B6               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13697  00212E  C0B5  F020         	movff	??_ReadIntFromEeprom,___awtoft@c
 13698  002132  C0B6  F021         	movff	??_ReadIntFromEeprom+1,___awtoft@c+1
 13699  002136  EC52  F01F         	call	___awtoft	;wreg free
 13700  00213A  C020  F0BC         	movff	?___awtoft,_ReadIntFromEeprom$3600
 13701  00213E  C021  F0BD         	movff	?___awtoft+1,_ReadIntFromEeprom$3600+1
 13702  002142  C022  F0BE         	movff	?___awtoft+2,_ReadIntFromEeprom$3600+2
 13703                           
 13704                           ;SystemCommon.c: 137: {
 13705                           ;SystemCommon.c: 138: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 13706  002146  C0BC  F0A3         	movff	_ReadIntFromEeprom$3600,pow@y
 13707  00214A  C0BD  F0A4         	movff	_ReadIntFromEeprom$3600+1,pow@y+1
 13708  00214E  C0BE  F0A5         	movff	_ReadIntFromEeprom$3600+2,pow@y+2
 13709  002152  0E00               	movlw	0
 13710  002154  0100               	movlb	0	; () banked
 13711  002156  6FA0               	movwf	pow@x& (0+255),b
 13712  002158  0E00               	movlw	0
 13713  00215A  6FA1               	movwf	(pow@x+1)& (0+255),b
 13714  00215C  0E40               	movlw	64
 13715  00215E  6FA2               	movwf	(pow@x+2)& (0+255),b
 13716  002160  EC5C  F00E         	call	_pow	;wreg free
 13717  002164  C0A0  F0BF         	movff	?_pow,_ReadIntFromEeprom$3601
 13718  002168  C0A1  F0C0         	movff	?_pow+1,_ReadIntFromEeprom$3601+1
 13719  00216C  C0A2  F0C1         	movff	?_pow+2,_ReadIntFromEeprom$3601+2
 13720                           
 13721                           ;SystemCommon.c: 137: {
 13722                           ;SystemCommon.c: 138: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 13723  002170  C0BF  F078         	movff	_ReadIntFromEeprom$3601,___fttol@f1
 13724  002174  C0C0  F079         	movff	_ReadIntFromEeprom$3601+1,___fttol@f1+1
 13725  002178  C0C1  F07A         	movff	_ReadIntFromEeprom$3601+2,___fttol@f1+2
 13726  00217C  EC0A  F012         	call	___fttol	;wreg free
 13727  002180  C078  F0B8         	movff	?___fttol,ReadIntFromEeprom@base
 13728  002184  C079  F0B9         	movff	?___fttol+1,ReadIntFromEeprom@base+1
 13729  002188  C07A  F0BA         	movff	?___fttol+2,ReadIntFromEeprom@base+2
 13730  00218C  C07B  F0BB         	movff	?___fttol+3,ReadIntFromEeprom@base+3
 13731                           
 13732                           ;SystemCommon.c: 139: retVal = retVal | EepromRead(address + idx) * base;
 13733  002190  0100               	movlb	0	; () banked
 13734  002192  51C2               	movf	ReadIntFromEeprom@address& (0+255),w,b
 13735  002194  25C7               	addwf	ReadIntFromEeprom@idx& (0+255),w,b
 13736  002196  EC24  F022         	call	_EepromRead
 13737  00219A  0100               	movlb	0	; () banked
 13738  00219C  6FB5               	movwf	??_ReadIntFromEeprom& (0+255),b
 13739  00219E  51B5               	movf	??_ReadIntFromEeprom& (0+255),w,b
 13740  0021A0  6E1A               	movwf	___lmul@multiplier,c
 13741  0021A2  6A1B               	clrf	___lmul@multiplier+1,c
 13742  0021A4  6A1C               	clrf	___lmul@multiplier+2,c
 13743  0021A6  6A1D               	clrf	___lmul@multiplier+3,c
 13744  0021A8  C0B8  F01E         	movff	ReadIntFromEeprom@base,___lmul@multiplicand
 13745  0021AC  C0B9  F01F         	movff	ReadIntFromEeprom@base+1,___lmul@multiplicand+1
 13746  0021B0  C0BA  F020         	movff	ReadIntFromEeprom@base+2,___lmul@multiplicand+2
 13747  0021B4  C0BB  F021         	movff	ReadIntFromEeprom@base+3,___lmul@multiplicand+3
 13748  0021B8  EC5B  F01D         	call	___lmul	;wreg free
 13749  0021BC  0100               	movlb	0	; () banked
 13750  0021BE  51C3               	movf	ReadIntFromEeprom@retVal& (0+255),w,b
 13751  0021C0  101A               	iorwf	?___lmul,w,c
 13752  0021C2  6FC3               	movwf	ReadIntFromEeprom@retVal& (0+255),b
 13753  0021C4  51C4               	movf	(ReadIntFromEeprom@retVal+1)& (0+255),w,b
 13754  0021C6  101B               	iorwf	?___lmul+1,w,c
 13755  0021C8  6FC4               	movwf	(ReadIntFromEeprom@retVal+1)& (0+255),b
 13756  0021CA  51C5               	movf	(ReadIntFromEeprom@retVal+2)& (0+255),w,b
 13757  0021CC  101C               	iorwf	?___lmul+2,w,c
 13758  0021CE  6FC5               	movwf	(ReadIntFromEeprom@retVal+2)& (0+255),b
 13759  0021D0  51C6               	movf	(ReadIntFromEeprom@retVal+3)& (0+255),w,b
 13760  0021D2  101D               	iorwf	?___lmul+3,w,c
 13761  0021D4  6FC6               	movwf	(ReadIntFromEeprom@retVal+3)& (0+255),b
 13762                           
 13763                           ; BSR set to: 0
 13764  0021D6  2BC7               	incf	ReadIntFromEeprom@idx& (0+255),f,b
 13765  0021D8                     l1444:
 13766                           
 13767                           ; BSR set to: 0
 13768                           
 13769                           ; BSR set to: 0
 13770  0021D8  51C7               	movf	ReadIntFromEeprom@idx& (0+255),w,b
 13771  0021DA  6FB5               	movwf	??_ReadIntFromEeprom& (0+255),b
 13772  0021DC  6BB6               	clrf	(??_ReadIntFromEeprom+1)& (0+255),b
 13773  0021DE  51B1               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 13774  0021E0  5DB5               	subwf	??_ReadIntFromEeprom& (0+255),w,b
 13775  0021E2  51B6               	movf	(??_ReadIntFromEeprom+1)& (0+255),w,b
 13776  0021E4  0A80               	xorlw	128
 13777  0021E6  6FB7               	movwf	(??_ReadIntFromEeprom+2)& (0+255),b
 13778  0021E8  51B2               	movf	(ReadIntFromEeprom@numOfByes+1)& (0+255),w,b
 13779  0021EA  0A80               	xorlw	128
 13780  0021EC  59B7               	subwfb	(??_ReadIntFromEeprom+2)& (0+255),w,b
 13781  0021EE  A0D8               	btfss	status,0,c
 13782  0021F0  D786               	goto	l1445
 13783                           
 13784                           ; BSR set to: 0
 13785                           ;SystemCommon.c: 140: }
 13786                           ;SystemCommon.c: 141: return retVal;
 13787  0021F2  C0C3  F0B1         	movff	ReadIntFromEeprom@retVal,?_ReadIntFromEeprom
 13788  0021F6  C0C4  F0B2         	movff	ReadIntFromEeprom@retVal+1,?_ReadIntFromEeprom+1
 13789  0021FA  C0C5  F0B3         	movff	ReadIntFromEeprom@retVal+2,?_ReadIntFromEeprom+2
 13790  0021FE  C0C6  F0B4         	movff	ReadIntFromEeprom@retVal+3,?_ReadIntFromEeprom+3
 13791                           
 13792                           ; BSR set to: 0
 13793  002202  0012               	return		;funcret
 13794  002204                     __end_of_ReadIntFromEeprom:
 13795                           	opt stack 0
 13796                           tosu	equ	0xFFF
 13797                           tosh	equ	0xFFE
 13798                           tosl	equ	0xFFD
 13799                           pclath	equ	0xFFA
 13800                           tblptru	equ	0xFF8
 13801                           tblptrh	equ	0xFF7
 13802                           tblptrl	equ	0xFF6
 13803                           tablat	equ	0xFF5
 13804                           prodh	equ	0xFF4
 13805                           prodl	equ	0xFF3
 13806                           intcon	equ	0xFF2
 13807                           intcon2	equ	0xFF1
 13808                           postinc0	equ	0xFEE
 13809                           plusw0	equ	0xFEB
 13810                           wreg	equ	0xFE8
 13811                           indf1	equ	0xFE7
 13812                           postdec1	equ	0xFE5
 13813                           fsr1h	equ	0xFE2
 13814                           fsr1l	equ	0xFE1
 13815                           indf2	equ	0xFDF
 13816                           postinc2	equ	0xFDE
 13817                           postdec2	equ	0xFDD
 13818                           plusw2	equ	0xFDB
 13819                           fsr2h	equ	0xFDA
 13820                           fsr2l	equ	0xFD9
 13821                           status	equ	0xFD8
 13822                           
 13823 ;; *************** function ___lmul *****************
 13824 ;; Defined at:
 13825 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 13826 ;; Parameters:    Size  Location     Type
 13827 ;;  multiplier      4   25[COMRAM] unsigned long 
 13828 ;;  multiplicand    4   29[COMRAM] unsigned long 
 13829 ;; Auto vars:     Size  Location     Type
 13830 ;;  product         4   33[COMRAM] unsigned long 
 13831 ;; Return value:  Size  Location     Type
 13832 ;;                  4   25[COMRAM] unsigned long 
 13833 ;; Registers used:
 13834 ;;		wreg, status,2, status,0
 13835 ;; Tracked objects:
 13836 ;;		On entry : 0/0
 13837 ;;		On exit  : 0/0
 13838 ;;		Unchanged: 0/0
 13839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13840 ;;      Params:         8       0       0       0       0       0       0
 13841 ;;      Locals:         4       0       0       0       0       0       0
 13842 ;;      Temps:          0       0       0       0       0       0       0
 13843 ;;      Totals:        12       0       0       0       0       0       0
 13844 ;;Total ram usage:       12 bytes
 13845 ;; Hardware stack levels used:    1
 13846 ;; Hardware stack levels required when called:    4
 13847 ;; This function calls:
 13848 ;;		Nothing
 13849 ;; This function is called by:
 13850 ;;		_ReadIntFromEeprom
 13851 ;;		_strtol
 13852 ;; This function uses a non-reentrant model
 13853 ;;
 13854                           
 13855                           	psect	text78
 13856  003AB6                     __ptext78:
 13857                           	opt stack 0
 13858  003AB6                     ___lmul:
 13859                           	opt stack 21
 13860                           
 13861                           ; BSR set to: 0
 13862                           ;incstack = 0
 13863  003AB6  0E00               	movlw	0
 13864  003AB8  6E22               	movwf	___lmul@product,c
 13865  003ABA  0E00               	movlw	0
 13866  003ABC  6E23               	movwf	___lmul@product+1,c
 13867  003ABE  0E00               	movlw	0
 13868  003AC0  6E24               	movwf	___lmul@product+2,c
 13869  003AC2  0E00               	movlw	0
 13870  003AC4  6E25               	movwf	___lmul@product+3,c
 13871  003AC6  A01A               	btfss	___lmul@multiplier,0,c
 13872  003AC8  D008               	goto	l1613
 13873  003ACA  501E               	movf	___lmul@multiplicand,w,c
 13874  003ACC  2622               	addwf	___lmul@product,f,c
 13875  003ACE  501F               	movf	___lmul@multiplicand+1,w,c
 13876  003AD0  2223               	addwfc	___lmul@product+1,f,c
 13877  003AD2  5020               	movf	___lmul@multiplicand+2,w,c
 13878  003AD4  2224               	addwfc	___lmul@product+2,f,c
 13879  003AD6  5021               	movf	___lmul@multiplicand+3,w,c
 13880  003AD8  2225               	addwfc	___lmul@product+3,f,c
 13881  003ADA                     l1613:
 13882  003ADA  90D8               	bcf	status,0,c
 13883  003ADC  361E               	rlcf	___lmul@multiplicand,f,c
 13884  003ADE  361F               	rlcf	___lmul@multiplicand+1,f,c
 13885  003AE0  3620               	rlcf	___lmul@multiplicand+2,f,c
 13886  003AE2  3621               	rlcf	___lmul@multiplicand+3,f,c
 13887  003AE4  90D8               	bcf	status,0,c
 13888  003AE6  321D               	rrcf	___lmul@multiplier+3,f,c
 13889  003AE8  321C               	rrcf	___lmul@multiplier+2,f,c
 13890  003AEA  321B               	rrcf	___lmul@multiplier+1,f,c
 13891  003AEC  321A               	rrcf	___lmul@multiplier,f,c
 13892  003AEE  501A               	movf	___lmul@multiplier,w,c
 13893  003AF0  101B               	iorwf	___lmul@multiplier+1,w,c
 13894  003AF2  101C               	iorwf	___lmul@multiplier+2,w,c
 13895  003AF4  101D               	iorwf	___lmul@multiplier+3,w,c
 13896  003AF6  A4D8               	btfss	status,2,c
 13897  003AF8  D7E6               	goto	l1612
 13898  003AFA  C022  F01A         	movff	___lmul@product,?___lmul
 13899  003AFE  C023  F01B         	movff	___lmul@product+1,?___lmul+1
 13900  003B02  C024  F01C         	movff	___lmul@product+2,?___lmul+2
 13901  003B06  C025  F01D         	movff	___lmul@product+3,?___lmul+3
 13902  003B0A  0012               	return		;funcret
 13903  003B0C                     __end_of___lmul:
 13904                           	opt stack 0
 13905                           tosu	equ	0xFFF
 13906                           tosh	equ	0xFFE
 13907                           tosl	equ	0xFFD
 13908                           pclath	equ	0xFFA
 13909                           tblptru	equ	0xFF8
 13910                           tblptrh	equ	0xFF7
 13911                           tblptrl	equ	0xFF6
 13912                           tablat	equ	0xFF5
 13913                           prodh	equ	0xFF4
 13914                           prodl	equ	0xFF3
 13915                           intcon	equ	0xFF2
 13916                           intcon2	equ	0xFF1
 13917                           postinc0	equ	0xFEE
 13918                           plusw0	equ	0xFEB
 13919                           wreg	equ	0xFE8
 13920                           indf1	equ	0xFE7
 13921                           postdec1	equ	0xFE5
 13922                           fsr1h	equ	0xFE2
 13923                           fsr1l	equ	0xFE1
 13924                           indf2	equ	0xFDF
 13925                           postinc2	equ	0xFDE
 13926                           postdec2	equ	0xFDD
 13927                           plusw2	equ	0xFDB
 13928                           fsr2h	equ	0xFDA
 13929                           fsr2l	equ	0xFD9
 13930                           status	equ	0xFD8
 13931                           
 13932 ;; *************** function _EepromRead *****************
 13933 ;; Defined at:
 13934 ;;		line 175 in file "FlashApp.c"
 13935 ;; Parameters:    Size  Location     Type
 13936 ;;  address         1    wreg     unsigned char 
 13937 ;; Auto vars:     Size  Location     Type
 13938 ;;  address         1   24[COMRAM] unsigned char 
 13939 ;; Return value:  Size  Location     Type
 13940 ;;                  1    wreg      unsigned char 
 13941 ;; Registers used:
 13942 ;;		wreg, status,2, cstack
 13943 ;; Tracked objects:
 13944 ;;		On entry : 0/0
 13945 ;;		On exit  : 0/0
 13946 ;;		Unchanged: 0/0
 13947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13948 ;;      Params:         0       0       0       0       0       0       0
 13949 ;;      Locals:         1       0       0       0       0       0       0
 13950 ;;      Temps:          0       0       0       0       0       0       0
 13951 ;;      Totals:         1       0       0       0       0       0       0
 13952 ;;Total ram usage:        1 bytes
 13953 ;; Hardware stack levels used:    1
 13954 ;; Hardware stack levels required when called:    5
 13955 ;; This function calls:
 13956 ;;		_DATAEE_ReadByte
 13957 ;; This function is called by:
 13958 ;;		_ReadIntFromEeprom
 13959 ;; This function uses a non-reentrant model
 13960 ;;
 13961                           
 13962                           	psect	text79
 13963  004448                     __ptext79:
 13964                           	opt stack 0
 13965  004448                     _EepromRead:
 13966                           	opt stack 21
 13967                           
 13968                           ;incstack = 0
 13969                           ;EepromRead@address stored from wreg
 13970  004448  6E19               	movwf	EepromRead@address,c
 13971                           
 13972                           ;FlashApp.c: 177: return DATAEE_ReadByte(address);
 13973  00444A  5019               	movf	EepromRead@address,w,c
 13974  00444C  ECBB  F021         	call	_DATAEE_ReadByte
 13975  004450  0012               	return	
 13976  004452                     __end_of_EepromRead:
 13977                           	opt stack 0
 13978                           tosu	equ	0xFFF
 13979                           tosh	equ	0xFFE
 13980                           tosl	equ	0xFFD
 13981                           pclath	equ	0xFFA
 13982                           tblptru	equ	0xFF8
 13983                           tblptrh	equ	0xFF7
 13984                           tblptrl	equ	0xFF6
 13985                           tablat	equ	0xFF5
 13986                           prodh	equ	0xFF4
 13987                           prodl	equ	0xFF3
 13988                           intcon	equ	0xFF2
 13989                           intcon2	equ	0xFF1
 13990                           postinc0	equ	0xFEE
 13991                           plusw0	equ	0xFEB
 13992                           wreg	equ	0xFE8
 13993                           indf1	equ	0xFE7
 13994                           postdec1	equ	0xFE5
 13995                           fsr1h	equ	0xFE2
 13996                           fsr1l	equ	0xFE1
 13997                           indf2	equ	0xFDF
 13998                           postinc2	equ	0xFDE
 13999                           postdec2	equ	0xFDD
 14000                           plusw2	equ	0xFDB
 14001                           fsr2h	equ	0xFDA
 14002                           fsr2l	equ	0xFD9
 14003                           status	equ	0xFD8
 14004                           
 14005 ;; *************** function _DATAEE_ReadByte *****************
 14006 ;; Defined at:
 14007 ;;		line 194 in file "mcc_generated_files/memory.c"
 14008 ;; Parameters:    Size  Location     Type
 14009 ;;  bAdd            1    wreg     unsigned char 
 14010 ;; Auto vars:     Size  Location     Type
 14011 ;;  bAdd            1   23[COMRAM] unsigned char 
 14012 ;; Return value:  Size  Location     Type
 14013 ;;                  1    wreg      unsigned char 
 14014 ;; Registers used:
 14015 ;;		wreg, status,2
 14016 ;; Tracked objects:
 14017 ;;		On entry : 0/0
 14018 ;;		On exit  : 0/0
 14019 ;;		Unchanged: 0/0
 14020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14021 ;;      Params:         0       0       0       0       0       0       0
 14022 ;;      Locals:         1       0       0       0       0       0       0
 14023 ;;      Temps:          0       0       0       0       0       0       0
 14024 ;;      Totals:         1       0       0       0       0       0       0
 14025 ;;Total ram usage:        1 bytes
 14026 ;; Hardware stack levels used:    1
 14027 ;; Hardware stack levels required when called:    4
 14028 ;; This function calls:
 14029 ;;		Nothing
 14030 ;; This function is called by:
 14031 ;;		_EepromRead
 14032 ;; This function uses a non-reentrant model
 14033 ;;
 14034                           
 14035                           	psect	text80
 14036  004376                     __ptext80:
 14037                           	opt stack 0
 14038  004376                     _DATAEE_ReadByte:
 14039                           	opt stack 21
 14040                           
 14041                           ;incstack = 0
 14042                           ;DATAEE_ReadByte@bAdd stored from wreg
 14043  004376  6E18               	movwf	DATAEE_ReadByte@bAdd,c
 14044                           
 14045                           ;memory.c: 197: EEADR = (bAdd & 0xFF);
 14046  004378  C018  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
 14047                           
 14048                           ;memory.c: 198: EECON1bits.CFGS = 0;
 14049  00437C  9CA6               	bcf	4006,6,c	;volsfr
 14050                           
 14051                           ;memory.c: 199: EECON1bits.EEPGD = 0;
 14052  00437E  9EA6               	bcf	4006,7,c	;volsfr
 14053                           
 14054                           ;memory.c: 200: EECON1bits.RD = 1;
 14055  004380  80A6               	bsf	4006,0,c	;volsfr
 14056                           
 14057                           ;memory.c: 201: __nop();
 14058  004382  F000               	nop	
 14059                           
 14060                           ;memory.c: 202: __nop();
 14061  004384  F000               	nop	
 14062                           
 14063                           ;memory.c: 204: return (EEDATA);
 14064  004386  50A8               	movf	4008,w,c	;volatile
 14065  004388  0012               	return	
 14066  00438A                     __end_of_DATAEE_ReadByte:
 14067                           	opt stack 0
 14068                           tosu	equ	0xFFF
 14069                           tosh	equ	0xFFE
 14070                           tosl	equ	0xFFD
 14071                           pclath	equ	0xFFA
 14072                           tblptru	equ	0xFF8
 14073                           tblptrh	equ	0xFF7
 14074                           tblptrl	equ	0xFF6
 14075                           tablat	equ	0xFF5
 14076                           prodh	equ	0xFF4
 14077                           prodl	equ	0xFF3
 14078                           intcon	equ	0xFF2
 14079                           intcon2	equ	0xFF1
 14080                           postinc0	equ	0xFEE
 14081                           plusw0	equ	0xFEB
 14082                           wreg	equ	0xFE8
 14083                           indf1	equ	0xFE7
 14084                           postdec1	equ	0xFE5
 14085                           fsr1h	equ	0xFE2
 14086                           fsr1l	equ	0xFE1
 14087                           indf2	equ	0xFDF
 14088                           postinc2	equ	0xFDE
 14089                           postdec2	equ	0xFDD
 14090                           plusw2	equ	0xFDB
 14091                           fsr2h	equ	0xFDA
 14092                           fsr2l	equ	0xFD9
 14093                           status	equ	0xFD8
 14094                           
 14095 ;; *************** function _ClearMcuRunTime *****************
 14096 ;; Defined at:
 14097 ;;		line 63 in file "SystemStatus.c"
 14098 ;; Parameters:    Size  Location     Type
 14099 ;;		None
 14100 ;; Auto vars:     Size  Location     Type
 14101 ;;		None
 14102 ;; Return value:  Size  Location     Type
 14103 ;;                  1    wreg      void 
 14104 ;; Registers used:
 14105 ;;		wreg, status,2
 14106 ;; Tracked objects:
 14107 ;;		On entry : 0/0
 14108 ;;		On exit  : 0/0
 14109 ;;		Unchanged: 0/0
 14110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14111 ;;      Params:         0       0       0       0       0       0       0
 14112 ;;      Locals:         0       0       0       0       0       0       0
 14113 ;;      Temps:          0       0       0       0       0       0       0
 14114 ;;      Totals:         0       0       0       0       0       0       0
 14115 ;;Total ram usage:        0 bytes
 14116 ;; Hardware stack levels used:    1
 14117 ;; Hardware stack levels required when called:    4
 14118 ;; This function calls:
 14119 ;;		Nothing
 14120 ;; This function is called by:
 14121 ;;		_InitSystemApplicationManagers
 14122 ;; This function uses a non-reentrant model
 14123 ;;
 14124                           
 14125                           	psect	text81
 14126  00438A                     __ptext81:
 14127                           	opt stack 0
 14128  00438A                     _ClearMcuRunTime:
 14129                           	opt stack 25
 14130                           
 14131                           ;SystemStatus.c: 65: mcuRunTimeIn5SecTicks = 0;
 14132                           
 14133                           ;incstack = 0
 14134  00438A  0E00               	movlw	0
 14135  00438C  0101               	movlb	1	; () banked
 14136  00438E  6F28               	movwf	_mcuRunTimeIn5SecTicks& (0+255),b
 14137  004390  0E00               	movlw	0
 14138  004392  6F29               	movwf	(_mcuRunTimeIn5SecTicks+1)& (0+255),b
 14139  004394  0E00               	movlw	0
 14140  004396  6F2A               	movwf	(_mcuRunTimeIn5SecTicks+2)& (0+255),b
 14141  004398  0E00               	movlw	0
 14142  00439A  6F2B               	movwf	(_mcuRunTimeIn5SecTicks+3)& (0+255),b
 14143                           
 14144                           ; BSR set to: 1
 14145  00439C  0012               	return		;funcret
 14146  00439E                     __end_of_ClearMcuRunTime:
 14147                           	opt stack 0
 14148                           tosu	equ	0xFFF
 14149                           tosh	equ	0xFFE
 14150                           tosl	equ	0xFFD
 14151                           pclath	equ	0xFFA
 14152                           tblptru	equ	0xFF8
 14153                           tblptrh	equ	0xFF7
 14154                           tblptrl	equ	0xFF6
 14155                           tablat	equ	0xFF5
 14156                           prodh	equ	0xFF4
 14157                           prodl	equ	0xFF3
 14158                           intcon	equ	0xFF2
 14159                           intcon2	equ	0xFF1
 14160                           postinc0	equ	0xFEE
 14161                           plusw0	equ	0xFEB
 14162                           wreg	equ	0xFE8
 14163                           indf1	equ	0xFE7
 14164                           postdec1	equ	0xFE5
 14165                           fsr1h	equ	0xFE2
 14166                           fsr1l	equ	0xFE1
 14167                           indf2	equ	0xFDF
 14168                           postinc2	equ	0xFDE
 14169                           postdec2	equ	0xFDD
 14170                           plusw2	equ	0xFDB
 14171                           fsr2h	equ	0xFDA
 14172                           fsr2l	equ	0xFD9
 14173                           status	equ	0xFD8
 14174                           
 14175 ;; *************** function _CheckFlashPrecentage *****************
 14176 ;; Defined at:
 14177 ;;		line 165 in file "FlashApp.c"
 14178 ;; Parameters:    Size  Location     Type
 14179 ;;		None
 14180 ;; Auto vars:     Size  Location     Type
 14181 ;;  precentage      3   28[BANK0 ] void 
 14182 ;; Return value:  Size  Location     Type
 14183 ;;                  1    wreg      unsigned char 
 14184 ;; Registers used:
 14185 ;;		wreg, status,2, status,0, cstack
 14186 ;; Tracked objects:
 14187 ;;		On entry : 0/0
 14188 ;;		On exit  : 0/0
 14189 ;;		Unchanged: 0/0
 14190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14191 ;;      Params:         0       0       0       0       0       0       0
 14192 ;;      Locals:         0       3       0       0       0       0       0
 14193 ;;      Temps:          0       4       0       0       0       0       0
 14194 ;;      Totals:         0       7       0       0       0       0       0
 14195 ;;Total ram usage:        7 bytes
 14196 ;; Hardware stack levels used:    1
 14197 ;; Hardware stack levels required when called:    6
 14198 ;; This function calls:
 14199 ;;		___ftdiv
 14200 ;;		___ftge
 14201 ;;		___ftmul
 14202 ;;		___lltoft
 14203 ;; This function is called by:
 14204 ;;		_main
 14205 ;; This function uses a non-reentrant model
 14206 ;;
 14207                           
 14208                           	psect	text82
 14209  002E74                     __ptext82:
 14210                           	opt stack 0
 14211  002E74                     _CheckFlashPrecentage:
 14212                           	opt stack 24
 14213                           
 14214                           ;FlashApp.c: 167: double precentage = ((double)(0x7FF0 - writeAddress) / 0x7FF0) * 100;
 14215                           
 14216                           ; BSR set to: 1
 14217                           ;incstack = 0
 14218  002E74  0EE0               	movlw	224
 14219  002E76  6E2C               	movwf	___ftdiv@f2,c
 14220  002E78  0EFF               	movlw	255
 14221  002E7A  6E2D               	movwf	___ftdiv@f2+1,c
 14222  002E7C  0E46               	movlw	70
 14223  002E7E  6E2E               	movwf	___ftdiv@f2+2,c
 14224  002E80  C03E  F078         	movff	_writeAddress,??_CheckFlashPrecentage
 14225  002E84  C03F  F079         	movff	_writeAddress+1,??_CheckFlashPrecentage+1
 14226  002E88  C040  F07A         	movff	_writeAddress+2,??_CheckFlashPrecentage+2
 14227  002E8C  C041  F07B         	movff	_writeAddress+3,??_CheckFlashPrecentage+3
 14228  002E90  0100               	movlb	0	; () banked
 14229  002E92  1F78               	comf	??_CheckFlashPrecentage& (0+255),f,b
 14230  002E94  1F79               	comf	(??_CheckFlashPrecentage+1)& (0+255),f,b
 14231  002E96  1F7A               	comf	(??_CheckFlashPrecentage+2)& (0+255),f,b
 14232  002E98  1F7B               	comf	(??_CheckFlashPrecentage+3)& (0+255),f,b
 14233  002E9A  2B78               	incf	??_CheckFlashPrecentage& (0+255),f,b
 14234  002E9C  0E00               	movlw	0
 14235  002E9E  2379               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),f,b
 14236  002EA0  237A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),f,b
 14237  002EA2  237B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),f,b
 14238  002EA4  0EF0               	movlw	240
 14239  002EA6  2578               	addwf	??_CheckFlashPrecentage& (0+255),w,b
 14240  002EA8  6E20               	movwf	___lltoft@c,c
 14241  002EAA  0E7F               	movlw	127
 14242  002EAC  2179               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),w,b
 14243  002EAE  6E21               	movwf	___lltoft@c+1,c
 14244  002EB0  0E00               	movlw	0
 14245  002EB2  217A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),w,b
 14246  002EB4  6E22               	movwf	___lltoft@c+2,c
 14247  002EB6  0E00               	movlw	0
 14248  002EB8  217B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),w,b
 14249  002EBA  6E23               	movwf	___lltoft@c+3,c
 14250  002EBC  EC7F  F01C         	call	___lltoft	;wreg free
 14251  002EC0  C020  F029         	movff	?___lltoft,___ftdiv@f1
 14252  002EC4  C021  F02A         	movff	?___lltoft+1,___ftdiv@f1+1
 14253  002EC8  C022  F02B         	movff	?___lltoft+2,___ftdiv@f1+2
 14254  002ECC  EC01  F013         	call	___ftdiv	;wreg free
 14255  002ED0  C029  F069         	movff	?___ftdiv,___ftmul@f1
 14256  002ED4  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 14257  002ED8  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 14258  002EDC  0E00               	movlw	0
 14259  002EDE  0100               	movlb	0	; () banked
 14260  002EE0  6F6C               	movwf	___ftmul@f2& (0+255),b
 14261  002EE2  0EC8               	movlw	200
 14262  002EE4  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 14263  002EE6  0E42               	movlw	66
 14264  002EE8  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 14265  002EEA  EC86  F012         	call	___ftmul	;wreg free
 14266  002EEE  C069  F07C         	movff	?___ftmul,CheckFlashPrecentage@precentage
 14267  002EF2  C06A  F07D         	movff	?___ftmul+1,CheckFlashPrecentage@precentage+1
 14268  002EF6  C06B  F07E         	movff	?___ftmul+2,CheckFlashPrecentage@precentage+2
 14269                           
 14270                           ;FlashApp.c: 168: return (precentage > 75) ? 1 : 0;
 14271  002EFA  0E00               	movlw	0
 14272  002EFC  6E18               	movwf	___ftge@ff1,c
 14273  002EFE  0E96               	movlw	150
 14274  002F00  6E19               	movwf	___ftge@ff1+1,c
 14275  002F02  0E42               	movlw	66
 14276  002F04  6E1A               	movwf	___ftge@ff1+2,c
 14277  002F06  C07C  F01B         	movff	CheckFlashPrecentage@precentage,___ftge@ff2
 14278  002F0A  C07D  F01C         	movff	CheckFlashPrecentage@precentage+1,___ftge@ff2+1
 14279  002F0E  C07E  F01D         	movff	CheckFlashPrecentage@precentage+2,___ftge@ff2+2
 14280  002F12  EC2A  F019         	call	___ftge	;wreg free
 14281  002F16  B0D8               	btfsc	status,0,c
 14282  002F18  D002               	goto	u9000
 14283  002F1A  0E01               	movlw	1
 14284  002F1C  0012               	return	
 14285  002F1E                     u9000:
 14286  002F1E  0E00               	movlw	0
 14287  002F20  0012               	return	
 14288  002F22                     __end_of_CheckFlashPrecentage:
 14289                           	opt stack 0
 14290                           tosu	equ	0xFFF
 14291                           tosh	equ	0xFFE
 14292                           tosl	equ	0xFFD
 14293                           pclath	equ	0xFFA
 14294                           tblptru	equ	0xFF8
 14295                           tblptrh	equ	0xFF7
 14296                           tblptrl	equ	0xFF6
 14297                           tablat	equ	0xFF5
 14298                           prodh	equ	0xFF4
 14299                           prodl	equ	0xFF3
 14300                           intcon	equ	0xFF2
 14301                           intcon2	equ	0xFF1
 14302                           postinc0	equ	0xFEE
 14303                           plusw0	equ	0xFEB
 14304                           wreg	equ	0xFE8
 14305                           indf1	equ	0xFE7
 14306                           postdec1	equ	0xFE5
 14307                           fsr1h	equ	0xFE2
 14308                           fsr1l	equ	0xFE1
 14309                           indf2	equ	0xFDF
 14310                           postinc2	equ	0xFDE
 14311                           postdec2	equ	0xFDD
 14312                           plusw2	equ	0xFDB
 14313                           fsr2h	equ	0xFDA
 14314                           fsr2l	equ	0xFD9
 14315                           status	equ	0xFD8
 14316                           
 14317 ;; *************** function _BlinkOkLeds *****************
 14318 ;; Defined at:
 14319 ;;		line 24 in file "LedsApp.c"
 14320 ;; Parameters:    Size  Location     Type
 14321 ;;  state           1    wreg     enum E7595
 14322 ;; Auto vars:     Size  Location     Type
 14323 ;;  state           1   26[COMRAM] enum E7595
 14324 ;;  idx             2   27[COMRAM] int 
 14325 ;; Return value:  Size  Location     Type
 14326 ;;                  1    wreg      void 
 14327 ;; Registers used:
 14328 ;;		wreg, status,2, status,0
 14329 ;; Tracked objects:
 14330 ;;		On entry : 0/0
 14331 ;;		On exit  : 0/0
 14332 ;;		Unchanged: 0/0
 14333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14334 ;;      Params:         0       0       0       0       0       0       0
 14335 ;;      Locals:         3       0       0       0       0       0       0
 14336 ;;      Temps:          3       0       0       0       0       0       0
 14337 ;;      Totals:         6       0       0       0       0       0       0
 14338 ;;Total ram usage:        6 bytes
 14339 ;; Hardware stack levels used:    1
 14340 ;; Hardware stack levels required when called:    4
 14341 ;; This function calls:
 14342 ;;		Nothing
 14343 ;; This function is called by:
 14344 ;;		_main
 14345 ;; This function uses a non-reentrant model
 14346 ;;
 14347                           
 14348                           	psect	text83
 14349  003844                     __ptext83:
 14350                           	opt stack 0
 14351  003844                     _BlinkOkLeds:
 14352                           	opt stack 26
 14353                           
 14354                           ;incstack = 0
 14355                           ;BlinkOkLeds@state stored from wreg
 14356  003844  6E1B               	movwf	BlinkOkLeds@state,c
 14357                           
 14358                           ;LedsApp.c: 26: for(int idx = 0; idx < state; idx++)
 14359  003846  0E00               	movlw	0
 14360  003848  6E1D               	movwf	BlinkOkLeds@idx+1,c
 14361  00384A  0E00               	movlw	0
 14362  00384C  6E1C               	movwf	BlinkOkLeds@idx,c
 14363  00384E                     l6637:
 14364  00384E  501B               	movf	BlinkOkLeds@state,w,c
 14365  003850  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 14366  003852  6A19               	clrf	(??_BlinkOkLeds+1)& (0+255),c
 14367  003854  5018               	movf	??_BlinkOkLeds,w,c
 14368  003856  5C1C               	subwf	BlinkOkLeds@idx,w,c
 14369  003858  501D               	movf	BlinkOkLeds@idx+1,w,c
 14370  00385A  0A80               	xorlw	128
 14371  00385C  6E1A               	movwf	(??_BlinkOkLeds+2)& (0+255),c
 14372  00385E  5019               	movf	??_BlinkOkLeds+1,w,c
 14373  003860  0A80               	xorlw	128
 14374  003862  581A               	subwfb	(??_BlinkOkLeds+2)& (0+255),w,c
 14375  003864  B0D8               	btfsc	status,0,c
 14376  003866  0012               	return	
 14377                           
 14378                           ;LedsApp.c: 27: {
 14379                           ;LedsApp.c: 28: LATCbits.LATC0 = 0;
 14380  003868  908B               	bcf	3979,0,c	;volatile
 14381                           
 14382                           ;LedsApp.c: 29: _delay((unsigned long)((100)*(8000000/4000.0)));
 14383  00386A  0E02               	movlw	2
 14384  00386C  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 14385  00386E  0E04               	movlw	4
 14386  003870  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 14387  003872  0EBA               	movlw	186
 14388  003874                     u9217:
 14389  003874  2EE8               	decfsz	wreg,f,c
 14390  003876  D7FE               	bra	u9217
 14391  003878  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 14392  00387A  D7FC               	bra	u9217
 14393  00387C  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 14394  00387E  D7FA               	bra	u9217
 14395  003880  D000               	nop2	
 14396                           
 14397                           ;LedsApp.c: 30: LATCbits.LATC0 = 1;
 14398  003882  808B               	bsf	3979,0,c	;volatile
 14399                           
 14400                           ;LedsApp.c: 31: _delay((unsigned long)((100)*(8000000/4000.0)));
 14401  003884  0E02               	movlw	2
 14402  003886  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 14403  003888  0E04               	movlw	4
 14404  00388A  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 14405  00388C  0EBA               	movlw	186
 14406  00388E                     u9227:
 14407  00388E  2EE8               	decfsz	wreg,f,c
 14408  003890  D7FE               	bra	u9227
 14409  003892  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 14410  003894  D7FC               	bra	u9227
 14411  003896  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 14412  003898  D7FA               	bra	u9227
 14413  00389A  D000               	nop2	
 14414  00389C  4A1C               	infsnz	BlinkOkLeds@idx,f,c
 14415  00389E  2A1D               	incf	BlinkOkLeds@idx+1,f,c
 14416  0038A0  D7D6               	goto	l6637
 14417  0038A2                     __end_of_BlinkOkLeds:
 14418                           	opt stack 0
 14419                           tosu	equ	0xFFF
 14420                           tosh	equ	0xFFE
 14421                           tosl	equ	0xFFD
 14422                           pclath	equ	0xFFA
 14423                           tblptru	equ	0xFF8
 14424                           tblptrh	equ	0xFF7
 14425                           tblptrl	equ	0xFF6
 14426                           tablat	equ	0xFF5
 14427                           prodh	equ	0xFF4
 14428                           prodl	equ	0xFF3
 14429                           intcon	equ	0xFF2
 14430                           intcon2	equ	0xFF1
 14431                           postinc0	equ	0xFEE
 14432                           plusw0	equ	0xFEB
 14433                           wreg	equ	0xFE8
 14434                           indf1	equ	0xFE7
 14435                           postdec1	equ	0xFE5
 14436                           fsr1h	equ	0xFE2
 14437                           fsr1l	equ	0xFE1
 14438                           indf2	equ	0xFDF
 14439                           postinc2	equ	0xFDE
 14440                           postdec2	equ	0xFDD
 14441                           plusw2	equ	0xFDB
 14442                           fsr2h	equ	0xFDA
 14443                           fsr2l	equ	0xFD9
 14444                           status	equ	0xFD8
 14445                           
 14446 ;; *************** function _AdcConvert *****************
 14447 ;; Defined at:
 14448 ;;		line 43 in file "AdcApp.c"
 14449 ;; Parameters:    Size  Location     Type
 14450 ;;		None
 14451 ;; Auto vars:     Size  Location     Type
 14452 ;;  _adcResult      2   83[BANK0 ] unsigned int 
 14453 ;;  _adcResult      2   85[BANK0 ] unsigned int 
 14454 ;;  adcRes          2   91[BANK0 ] unsigned int 
 14455 ;;  ldTxSate        2   89[BANK0 ] unsigned int 
 14456 ;;  ldRxSate        2   87[BANK0 ] unsigned int 
 14457 ;;  idx             1   96[BANK0 ] unsigned char 
 14458 ;; Return value:  Size  Location     Type
 14459 ;;                  1    wreg      void 
 14460 ;; Registers used:
 14461 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14462 ;; Tracked objects:
 14463 ;;		On entry : 0/0
 14464 ;;		On exit  : 0/0
 14465 ;;		Unchanged: 0/0
 14466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14467 ;;      Params:         0       0       0       0       0       0       0
 14468 ;;      Locals:         0      14       0       0       0       0       0
 14469 ;;      Temps:          0       2       0       0       0       0       0
 14470 ;;      Totals:         0      16       0       0       0       0       0
 14471 ;;Total ram usage:       16 bytes
 14472 ;; Hardware stack levels used:    1
 14473 ;; Hardware stack levels required when called:    9
 14474 ;; This function calls:
 14475 ;;		_ADC_GetConversion
 14476 ;;		_FlashSampleWrite
 14477 ;;		_GetUint16FromBitArray
 14478 ;;		___ftdiv
 14479 ;;		___ftmul
 14480 ;;		___fttol
 14481 ;;		___lwtoft
 14482 ;;		_pow
 14483 ;; This function is called by:
 14484 ;;		_main
 14485 ;; This function uses a non-reentrant model
 14486 ;;
 14487                           
 14488                           	psect	text84
 14489  000FBC                     __ptext84:
 14490                           	opt stack 0
 14491  000FBC                     _AdcConvert:
 14492                           	opt stack 21
 14493                           
 14494                           ;AdcApp.c: 48: uint16_t adcRes = 0;
 14495                           
 14496                           ;incstack = 0
 14497  000FBC  0E00               	movlw	0
 14498  000FBE  0100               	movlb	0	; () banked
 14499  000FC0  6FBC               	movwf	(AdcConvert@adcRes+1)& (0+255),b
 14500  000FC2  0E00               	movlw	0
 14501  000FC4  6FBB               	movwf	AdcConvert@adcRes& (0+255),b
 14502                           
 14503                           ;AdcApp.c: 49: uint8_t idx = 0;
 14504  000FC6  0E00               	movlw	0
 14505  000FC8  6FC0               	movwf	AdcConvert@idx& (0+255),b
 14506                           
 14507                           ;AdcApp.c: 50: uint16_t ldRxSate = 0, ldTxSate = 0;
 14508  000FCA  0E00               	movlw	0
 14509  000FCC  6FB8               	movwf	(AdcConvert@ldRxSate+1)& (0+255),b
 14510  000FCE  0E00               	movlw	0
 14511  000FD0  6FB7               	movwf	AdcConvert@ldRxSate& (0+255),b
 14512  000FD2  0E00               	movlw	0
 14513  000FD4  6FBA               	movwf	(AdcConvert@ldTxSate+1)& (0+255),b
 14514  000FD6  0E00               	movlw	0
 14515  000FD8  6FB9               	movwf	AdcConvert@ldTxSate& (0+255),b
 14516                           
 14517                           ;AdcApp.c: 51: if (adcSampleMode == CIRCULAR)
 14518  000FDA  503D               	movf	_adcSampleMode,w,c
 14519  000FDC  A4D8               	btfss	status,2,c
 14520  000FDE  D0A3               	goto	l126
 14521                           
 14522                           ; BSR set to: 0
 14523                           ;AdcApp.c: 52: {
 14524                           ;AdcApp.c: 53: for(idx = 0; idx < (9); idx++)
 14525  000FE0  0E00               	movlw	0
 14526  000FE2  6FC0               	movwf	AdcConvert@idx& (0+255),b
 14527  000FE4                     l8737:
 14528                           
 14529                           ; BSR set to: 0
 14530  000FE4  0E08               	movlw	8
 14531  000FE6  65C0               	cpfsgt	AdcConvert@idx& (0+255),b
 14532  000FE8  D001               	goto	l127
 14533  000FEA  D06D               	goto	u8860
 14534  000FEC                     l127:
 14535                           
 14536                           ; BSR set to: 0
 14537                           ;AdcApp.c: 54: {
 14538                           ;AdcApp.c: 55: adc_result_t _adcResult = ADC_GetConversion(channelArr[idx]);
 14539                           
 14540                           ; BSR set to: 0
 14541  000FEC  51C0               	movf	AdcConvert@idx& (0+255),w,b
 14542  000FEE  0D01               	mullw	1
 14543  000FF0  0E42               	movlw	low _channelArr
 14544  000FF2  24F3               	addwf	prodl,w,c
 14545  000FF4  6EF6               	movwf	tblptrl,c
 14546  000FF6  0E06               	movlw	high _channelArr
 14547  000FF8  20F4               	addwfc	prodh,w,c
 14548  000FFA  6EF7               	movwf	tblptrh,c
 14549  000FFC                     	if	0	;There are less than 3 active tblptr bytes
 14550  000FFC                     	endif
 14551  000FFC  0008               	tblrd		*
 14552  000FFE  50F5               	movf	tablat,w,c
 14553  001000  EC3E  F020         	call	_ADC_GetConversion
 14554  001004  C018  F0B3         	movff	?_ADC_GetConversion,AdcConvert@_adcResult
 14555  001008  C019  F0B4         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult+1
 14556                           
 14557                           ;AdcApp.c: 56: adcRes = (_adcResult/pow(2,(10)))*(3340);
 14558  00100C  0E00               	movlw	0
 14559  00100E  0100               	movlb	0	; () banked
 14560  001010  6FA3               	movwf	pow@y& (0+255),b
 14561  001012  0E20               	movlw	32
 14562  001014  6FA4               	movwf	(pow@y+1)& (0+255),b
 14563  001016  0E41               	movlw	65
 14564  001018  6FA5               	movwf	(pow@y+2)& (0+255),b
 14565  00101A  0E00               	movlw	0
 14566  00101C  6FA0               	movwf	pow@x& (0+255),b
 14567  00101E  0E00               	movlw	0
 14568  001020  6FA1               	movwf	(pow@x+1)& (0+255),b
 14569  001022  0E40               	movlw	64
 14570  001024  6FA2               	movwf	(pow@x+2)& (0+255),b
 14571  001026  EC5C  F00E         	call	_pow	;wreg free
 14572  00102A  C0A0  F0BD         	movff	?_pow,_AdcConvert$3599
 14573  00102E  C0A1  F0BE         	movff	?_pow+1,_AdcConvert$3599+1
 14574  001032  C0A2  F0BF         	movff	?_pow+2,_AdcConvert$3599+2
 14575                           
 14576                           ;AdcApp.c: 56: adcRes = (_adcResult/pow(2,(10)))*(3340);
 14577  001036  0EC0               	movlw	192
 14578  001038  0100               	movlb	0	; () banked
 14579  00103A  6F6C               	movwf	___ftmul@f2& (0+255),b
 14580  00103C  0E50               	movlw	80
 14581  00103E  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 14582  001040  0E45               	movlw	69
 14583  001042  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 14584  001044  C0BD  F02C         	movff	_AdcConvert$3599,___ftdiv@f2
 14585  001048  C0BE  F02D         	movff	_AdcConvert$3599+1,___ftdiv@f2+1
 14586  00104C  C0BF  F02E         	movff	_AdcConvert$3599+2,___ftdiv@f2+2
 14587  001050  C0B3  F020         	movff	AdcConvert@_adcResult,___lwtoft@c
 14588  001054  C0B4  F021         	movff	AdcConvert@_adcResult+1,___lwtoft@c+1
 14589  001058  ECF5  F020         	call	___lwtoft	;wreg free
 14590  00105C  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 14591  001060  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 14592  001064  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 14593  001068  EC01  F013         	call	___ftdiv	;wreg free
 14594  00106C  C029  F069         	movff	?___ftdiv,___ftmul@f1
 14595  001070  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 14596  001074  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 14597  001078  EC86  F012         	call	___ftmul	;wreg free
 14598  00107C  C069  F078         	movff	?___ftmul,___fttol@f1
 14599  001080  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 14600  001084  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 14601  001088  EC0A  F012         	call	___fttol	;wreg free
 14602  00108C  C078  F0BB         	movff	?___fttol,AdcConvert@adcRes
 14603  001090  C079  F0BC         	movff	?___fttol+1,AdcConvert@adcRes+1
 14604                           
 14605                           ;AdcApp.c: 57: FlashSampleWrite(adcRes, idx + 1);
 14606  001094  C0BB  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 14607  001098  C0BC  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 14608  00109C  0100               	movlb	0	; () banked
 14609  00109E  29C0               	incf	AdcConvert@idx& (0+255),w,b
 14610  0010A0  6E2F               	movwf	FlashSampleWrite@channelNum,c
 14611  0010A2  EC88  F011         	call	_FlashSampleWrite	;wreg free
 14612                           
 14613                           ;AdcApp.c: 58: _delay((unsigned long)((250)*(8000000/4000.0)));
 14614  0010A6  0E03               	movlw	3
 14615  0010A8  0100               	movlb	0	; () banked
 14616  0010AA  6FB2               	movwf	(??_AdcConvert+1)& (0+255),b
 14617  0010AC  0E8A               	movlw	138
 14618  0010AE  6FB1               	movwf	??_AdcConvert& (0+255),b
 14619  0010B0  0E55               	movlw	85
 14620  0010B2                     u9237:
 14621  0010B2  2EE8               	decfsz	wreg,f,c
 14622  0010B4  D7FE               	bra	u9237
 14623  0010B6  2FB1               	decfsz	??_AdcConvert& (0+255),f,b
 14624  0010B8  D7FC               	bra	u9237
 14625  0010BA  2FB2               	decfsz	(??_AdcConvert+1)& (0+255),f,b
 14626  0010BC  D7FA               	bra	u9237
 14627  0010BE  D000               	nop2	
 14628  0010C0  0100               	movlb	0	; () banked
 14629  0010C2  2BC0               	incf	AdcConvert@idx& (0+255),f,b
 14630  0010C4  D78F               	goto	l8737
 14631  0010C6                     u8860:
 14632                           
 14633                           ; BSR set to: 0
 14634                           ;AdcApp.c: 59: }
 14635                           ;AdcApp.c: 62: ldRxSate = GetUint16FromBitArray(synthLdRxArray, 12);
 14636                           
 14637                           ; BSR set to: 0
 14638  0010C6  0EB0               	movlw	low _synthLdRxArray
 14639  0010C8  6E18               	movwf	GetUint16FromBitArray@bitarray,c
 14640  0010CA  0E01               	movlw	high _synthLdRxArray
 14641  0010CC  6E19               	movwf	GetUint16FromBitArray@bitarray+1,c
 14642  0010CE  0E00               	movlw	0
 14643  0010D0  6E1B               	movwf	GetUint16FromBitArray@numOfBits+1,c
 14644  0010D2  0E0C               	movlw	12
 14645  0010D4  6E1A               	movwf	GetUint16FromBitArray@numOfBits,c
 14646  0010D6  EC5A  F01B         	call	_GetUint16FromBitArray	;wreg free
 14647  0010DA  C018  F0B7         	movff	?_GetUint16FromBitArray,AdcConvert@ldRxSate
 14648  0010DE  C019  F0B8         	movff	?_GetUint16FromBitArray+1,AdcConvert@ldRxSate+1
 14649                           
 14650                           ;AdcApp.c: 63: FlashSampleWrite(ldRxSate, idx + 1);
 14651  0010E2  C0B7  F02D         	movff	AdcConvert@ldRxSate,FlashSampleWrite@sampleData
 14652  0010E6  C0B8  F02E         	movff	AdcConvert@ldRxSate+1,FlashSampleWrite@sampleData+1
 14653  0010EA  0100               	movlb	0	; () banked
 14654  0010EC  29C0               	incf	AdcConvert@idx& (0+255),w,b
 14655  0010EE  6E2F               	movwf	FlashSampleWrite@channelNum,c
 14656  0010F0  EC88  F011         	call	_FlashSampleWrite	;wreg free
 14657                           
 14658                           ;AdcApp.c: 64: ldTxSate = GetUint16FromBitArray(synthLdTxArray, 12);
 14659  0010F4  0EA4               	movlw	low _synthLdTxArray
 14660  0010F6  6E18               	movwf	GetUint16FromBitArray@bitarray,c
 14661  0010F8  0E01               	movlw	high _synthLdTxArray
 14662  0010FA  6E19               	movwf	GetUint16FromBitArray@bitarray+1,c
 14663  0010FC  0E00               	movlw	0
 14664  0010FE  6E1B               	movwf	GetUint16FromBitArray@numOfBits+1,c
 14665  001100  0E0C               	movlw	12
 14666  001102  6E1A               	movwf	GetUint16FromBitArray@numOfBits,c
 14667  001104  EC5A  F01B         	call	_GetUint16FromBitArray	;wreg free
 14668  001108  C018  F0B9         	movff	?_GetUint16FromBitArray,AdcConvert@ldTxSate
 14669  00110C  C019  F0BA         	movff	?_GetUint16FromBitArray+1,AdcConvert@ldTxSate+1
 14670                           
 14671                           ;AdcApp.c: 65: FlashSampleWrite(ldTxSate, idx + 2);
 14672  001110  C0B9  F02D         	movff	AdcConvert@ldTxSate,FlashSampleWrite@sampleData
 14673  001114  C0BA  F02E         	movff	AdcConvert@ldTxSate+1,FlashSampleWrite@sampleData+1
 14674  001118  0100               	movlb	0	; () banked
 14675  00111A  51C0               	movf	AdcConvert@idx& (0+255),w,b
 14676  00111C  0F02               	addlw	2
 14677  00111E  6E2F               	movwf	FlashSampleWrite@channelNum,c
 14678  001120  EC88  F011         	call	_FlashSampleWrite	;wreg free
 14679                           
 14680                           ;AdcApp.c: 67: }
 14681  001124  0012               	return	
 14682  001126                     l126:
 14683                           
 14684                           ;AdcApp.c: 68: else if (adcSampleMode == SINGLE_CHANNEL)
 14685  001126  043D               	decf	_adcSampleMode,w,c
 14686  001128  A4D8               	btfss	status,2,c
 14687  00112A  0012               	return	
 14688                           
 14689                           ;AdcApp.c: 69: {
 14690                           ;AdcApp.c: 70: adc_result_t _adcResult = ADC_GetConversion(channelArr[channel]);
 14691  00112C  0100               	movlb	0	; () banked
 14692  00112E  51F6               	movf	_channel& (0+255),w,b
 14693  001130  0D01               	mullw	1
 14694  001132  0E42               	movlw	low _channelArr
 14695  001134  24F3               	addwf	prodl,w,c
 14696  001136  6EF6               	movwf	tblptrl,c
 14697  001138  0E06               	movlw	high _channelArr
 14698  00113A  20F4               	addwfc	prodh,w,c
 14699  00113C  6EF7               	movwf	tblptrh,c
 14700  00113E                     	if	0	;There are less than 3 active tblptr bytes
 14701  00113E                     	endif
 14702  00113E  0008               	tblrd		*
 14703  001140  50F5               	movf	tablat,w,c
 14704  001142  EC3E  F020         	call	_ADC_GetConversion
 14705  001146  C018  F0B5         	movff	?_ADC_GetConversion,AdcConvert@_adcResult_350
 14706  00114A  C019  F0B6         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult_350+1
 14707                           
 14708                           ;AdcApp.c: 71: adcRes = (_adcResult/pow(2,(10)))*(3340);
 14709  00114E  0E00               	movlw	0
 14710  001150  0100               	movlb	0	; () banked
 14711  001152  6FA3               	movwf	pow@y& (0+255),b
 14712  001154  0E20               	movlw	32
 14713  001156  6FA4               	movwf	(pow@y+1)& (0+255),b
 14714  001158  0E41               	movlw	65
 14715  00115A  6FA5               	movwf	(pow@y+2)& (0+255),b
 14716  00115C  0E00               	movlw	0
 14717  00115E  6FA0               	movwf	pow@x& (0+255),b
 14718  001160  0E00               	movlw	0
 14719  001162  6FA1               	movwf	(pow@x+1)& (0+255),b
 14720  001164  0E40               	movlw	64
 14721  001166  6FA2               	movwf	(pow@x+2)& (0+255),b
 14722  001168  EC5C  F00E         	call	_pow	;wreg free
 14723  00116C  C0A0  F0BD         	movff	?_pow,_AdcConvert$3599
 14724  001170  C0A1  F0BE         	movff	?_pow+1,_AdcConvert$3599+1
 14725  001174  C0A2  F0BF         	movff	?_pow+2,_AdcConvert$3599+2
 14726                           
 14727                           ;AdcApp.c: 71: adcRes = (_adcResult/pow(2,(10)))*(3340);
 14728  001178  0EC0               	movlw	192
 14729  00117A  0100               	movlb	0	; () banked
 14730  00117C  6F6C               	movwf	___ftmul@f2& (0+255),b
 14731  00117E  0E50               	movlw	80
 14732  001180  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 14733  001182  0E45               	movlw	69
 14734  001184  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 14735  001186  C0BD  F02C         	movff	_AdcConvert$3599,___ftdiv@f2
 14736  00118A  C0BE  F02D         	movff	_AdcConvert$3599+1,___ftdiv@f2+1
 14737  00118E  C0BF  F02E         	movff	_AdcConvert$3599+2,___ftdiv@f2+2
 14738  001192  C0B5  F020         	movff	AdcConvert@_adcResult_350,___lwtoft@c
 14739  001196  C0B6  F021         	movff	AdcConvert@_adcResult_350+1,___lwtoft@c+1
 14740  00119A  ECF5  F020         	call	___lwtoft	;wreg free
 14741  00119E  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 14742  0011A2  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 14743  0011A6  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 14744  0011AA  EC01  F013         	call	___ftdiv	;wreg free
 14745  0011AE  C029  F069         	movff	?___ftdiv,___ftmul@f1
 14746  0011B2  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 14747  0011B6  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 14748  0011BA  EC86  F012         	call	___ftmul	;wreg free
 14749  0011BE  C069  F078         	movff	?___ftmul,___fttol@f1
 14750  0011C2  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 14751  0011C6  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 14752  0011CA  EC0A  F012         	call	___fttol	;wreg free
 14753  0011CE  C078  F0BB         	movff	?___fttol,AdcConvert@adcRes
 14754  0011D2  C079  F0BC         	movff	?___fttol+1,AdcConvert@adcRes+1
 14755  0011D6  0012               	return	
 14756  0011D8                     __end_of_AdcConvert:
 14757                           	opt stack 0
 14758                           tosu	equ	0xFFF
 14759                           tosh	equ	0xFFE
 14760                           tosl	equ	0xFFD
 14761                           pclath	equ	0xFFA
 14762                           tblptru	equ	0xFF8
 14763                           tblptrh	equ	0xFF7
 14764                           tblptrl	equ	0xFF6
 14765                           tablat	equ	0xFF5
 14766                           prodh	equ	0xFF4
 14767                           prodl	equ	0xFF3
 14768                           intcon	equ	0xFF2
 14769                           intcon2	equ	0xFF1
 14770                           postinc0	equ	0xFEE
 14771                           plusw0	equ	0xFEB
 14772                           wreg	equ	0xFE8
 14773                           indf1	equ	0xFE7
 14774                           postdec1	equ	0xFE5
 14775                           fsr1h	equ	0xFE2
 14776                           fsr1l	equ	0xFE1
 14777                           indf2	equ	0xFDF
 14778                           postinc2	equ	0xFDE
 14779                           postdec2	equ	0xFDD
 14780                           plusw2	equ	0xFDB
 14781                           fsr2h	equ	0xFDA
 14782                           fsr2l	equ	0xFD9
 14783                           status	equ	0xFD8
 14784                           
 14785 ;; *************** function _pow *****************
 14786 ;; Defined at:
 14787 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
 14788 ;; Parameters:    Size  Location     Type
 14789 ;;  x               3   64[BANK0 ] void 
 14790 ;;  y               3   67[BANK0 ] void 
 14791 ;; Auto vars:     Size  Location     Type
 14792 ;;  yi              4   77[BANK0 ] unsigned long 
 14793 ;;  sign            1   76[BANK0 ] unsigned char 
 14794 ;; Return value:  Size  Location     Type
 14795 ;;                  3   64[BANK0 ] unsigned char 
 14796 ;; Registers used:
 14797 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14798 ;; Tracked objects:
 14799 ;;		On entry : 0/0
 14800 ;;		On exit  : 0/0
 14801 ;;		Unchanged: 0/0
 14802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14803 ;;      Params:         0       6       0       0       0       0       0
 14804 ;;      Locals:         0      11       0       0       0       0       0
 14805 ;;      Temps:          0       0       0       0       0       0       0
 14806 ;;      Totals:         0      17       0       0       0       0       0
 14807 ;;Total ram usage:       17 bytes
 14808 ;; Hardware stack levels used:    1
 14809 ;; Hardware stack levels required when called:    8
 14810 ;; This function calls:
 14811 ;;		___ftge
 14812 ;;		___ftmul
 14813 ;;		___ftneg
 14814 ;;		___fttol
 14815 ;;		___lltoft
 14816 ;;		_exp
 14817 ;;		_log
 14818 ;; This function is called by:
 14819 ;;		_AdcConvert
 14820 ;;		_ReadIntFromEeprom
 14821 ;; This function uses a non-reentrant model
 14822 ;;
 14823                           
 14824                           	psect	text85
 14825  001CB8                     __ptext85:
 14826                           	opt stack 0
 14827  001CB8                     _pow:
 14828                           	opt stack 18
 14829                           
 14830                           ;incstack = 0
 14831  001CB8  0E00               	movlw	0
 14832  001CBA  0100               	movlb	0	; () banked
 14833  001CBC  6FAC               	movwf	pow@sign& (0+255),b
 14834                           
 14835                           ; BSR set to: 0
 14836  001CBE  51A0               	movf	pow@x& (0+255),w,b
 14837  001CC0  11A1               	iorwf	(pow@x+1)& (0+255),w,b
 14838  001CC2  11A2               	iorwf	(pow@x+2)& (0+255),w,b
 14839  001CC4  A4D8               	btfss	status,2,c
 14840  001CC6  D01D               	goto	l2040
 14841                           
 14842                           ; BSR set to: 0
 14843  001CC8  0E00               	movlw	0
 14844  001CCA  6E18               	movwf	___ftge@ff1,c
 14845  001CCC  0E00               	movlw	0
 14846  001CCE  6E19               	movwf	___ftge@ff1+1,c
 14847  001CD0  0E00               	movlw	0
 14848  001CD2  6E1A               	movwf	___ftge@ff1+2,c
 14849  001CD4  C0A3  F01B         	movff	pow@y,___ftge@ff2
 14850  001CD8  C0A4  F01C         	movff	pow@y+1,___ftge@ff2+1
 14851  001CDC  C0A5  F01D         	movff	pow@y+2,___ftge@ff2+2
 14852  001CE0  EC2A  F019         	call	___ftge	;wreg free
 14853  001CE4  A0D8               	btfss	status,0,c
 14854  001CE6  D005               	goto	l2041
 14855  001CE8  0E00               	movlw	0
 14856  001CEA  0101               	movlb	1	; () banked
 14857  001CEC  6F35               	movwf	(_errno+1)& (0+255),b
 14858  001CEE  0E21               	movlw	33
 14859  001CF0  6F34               	movwf	_errno& (0+255),b
 14860  001CF2                     l2041:
 14861  001CF2  0E00               	movlw	0
 14862  001CF4  0100               	movlb	0	; () banked
 14863  001CF6  6FA0               	movwf	?_pow& (0+255),b
 14864  001CF8  0E00               	movlw	0
 14865  001CFA  6FA1               	movwf	(?_pow+1)& (0+255),b
 14866  001CFC  0E00               	movlw	0
 14867  001CFE  6FA2               	movwf	(?_pow+2)& (0+255),b
 14868                           
 14869                           ; BSR set to: 0
 14870  001D00  0012               	return	
 14871  001D02                     l2040:
 14872                           
 14873                           ; BSR set to: 0
 14874                           
 14875                           ; BSR set to: 0
 14876  001D02  51A3               	movf	pow@y& (0+255),w,b
 14877  001D04  11A4               	iorwf	(pow@y+1)& (0+255),w,b
 14878  001D06  11A5               	iorwf	(pow@y+2)& (0+255),w,b
 14879  001D08  A4D8               	btfss	status,2,c
 14880  001D0A  D007               	goto	l2043
 14881                           
 14882                           ; BSR set to: 0
 14883  001D0C  0E00               	movlw	0
 14884  001D0E  6FA0               	movwf	?_pow& (0+255),b
 14885  001D10  0E80               	movlw	128
 14886  001D12  6FA1               	movwf	(?_pow+1)& (0+255),b
 14887  001D14  0E3F               	movlw	63
 14888  001D16  6FA2               	movwf	(?_pow+2)& (0+255),b
 14889                           
 14890                           ; BSR set to: 0
 14891  001D18  0012               	return	
 14892  001D1A                     l2043:
 14893                           
 14894                           ; BSR set to: 0
 14895                           
 14896                           ; BSR set to: 0
 14897  001D1A  AFA2               	btfss	(pow@x+2)& (0+255),7,b
 14898  001D1C  D043               	goto	l2044
 14899                           
 14900                           ; BSR set to: 0
 14901  001D1E  C0A3  F078         	movff	pow@y,___fttol@f1
 14902  001D22  C0A4  F079         	movff	pow@y+1,___fttol@f1+1
 14903  001D26  C0A5  F07A         	movff	pow@y+2,___fttol@f1+2
 14904  001D2A  EC0A  F012         	call	___fttol	;wreg free
 14905  001D2E  C078  F0AD         	movff	?___fttol,pow@yi
 14906  001D32  C079  F0AE         	movff	?___fttol+1,pow@yi+1
 14907  001D36  C07A  F0AF         	movff	?___fttol+2,pow@yi+2
 14908  001D3A  C07B  F0B0         	movff	?___fttol+3,pow@yi+3
 14909  001D3E  C0AD  F020         	movff	pow@yi,___lltoft@c
 14910  001D42  C0AE  F021         	movff	pow@yi+1,___lltoft@c+1
 14911  001D46  C0AF  F022         	movff	pow@yi+2,___lltoft@c+2
 14912  001D4A  C0B0  F023         	movff	pow@yi+3,___lltoft@c+3
 14913  001D4E  EC7F  F01C         	call	___lltoft	;wreg free
 14914  001D52  0100               	movlb	0	; () banked
 14915  001D54  51A3               	movf	pow@y& (0+255),w,b
 14916  001D56  1820               	xorwf	?___lltoft,w,c
 14917  001D58  E107               	bnz	u7450
 14918  001D5A  51A4               	movf	(pow@y+1)& (0+255),w,b
 14919  001D5C  1821               	xorwf	?___lltoft+1,w,c
 14920  001D5E  E104               	bnz	u7450
 14921  001D60  51A5               	movf	(pow@y+2)& (0+255),w,b
 14922  001D62  1822               	xorwf	?___lltoft+2,w,c
 14923  001D64  B4D8               	btfsc	status,2,c
 14924  001D66  D00D               	goto	l2045
 14925  001D68                     u7450:
 14926                           
 14927                           ; BSR set to: 0
 14928  001D68  0E00               	movlw	0
 14929  001D6A  0101               	movlb	1	; () banked
 14930  001D6C  6F35               	movwf	(_errno+1)& (0+255),b
 14931  001D6E  0E21               	movlw	33
 14932  001D70  6F34               	movwf	_errno& (0+255),b
 14933  001D72  0E00               	movlw	0
 14934  001D74  0100               	movlb	0	; () banked
 14935  001D76  6FA0               	movwf	?_pow& (0+255),b
 14936  001D78  0E00               	movlw	0
 14937  001D7A  6FA1               	movwf	(?_pow+1)& (0+255),b
 14938  001D7C  0E00               	movlw	0
 14939  001D7E  6FA2               	movwf	(?_pow+2)& (0+255),b
 14940                           
 14941                           ; BSR set to: 0
 14942  001D80  0012               	return	
 14943  001D82                     l2045:
 14944                           
 14945                           ; BSR set to: 0
 14946                           
 14947                           ; BSR set to: 0
 14948  001D82  51AD               	movf	pow@yi& (0+255),w,b
 14949  001D84  0B01               	andlw	1
 14950  001D86  6FAC               	movwf	pow@sign& (0+255),b
 14951                           
 14952                           ; BSR set to: 0
 14953  001D88  C0A0  F018         	movff	pow@x,___ftneg@f1
 14954  001D8C  C0A1  F019         	movff	pow@x+1,___ftneg@f1+1
 14955  001D90  C0A2  F01A         	movff	pow@x+2,___ftneg@f1+2
 14956  001D94  ECE3  F020         	call	___ftneg	;wreg free
 14957  001D98  C018  F0A0         	movff	?___ftneg,pow@x
 14958  001D9C  C019  F0A1         	movff	?___ftneg+1,pow@x+1
 14959  001DA0  C01A  F0A2         	movff	?___ftneg+2,pow@x+2
 14960  001DA4                     l2044:
 14961  001DA4  C0A0  F08E         	movff	pow@x,log@x
 14962  001DA8  C0A1  F08F         	movff	pow@x+1,log@x+1
 14963  001DAC  C0A2  F090         	movff	pow@x+2,log@x+2
 14964  001DB0  ECDA  F00F         	call	_log	;wreg free
 14965  001DB4  C08E  F0A6         	movff	?_log,_pow$3602
 14966  001DB8  C08F  F0A7         	movff	?_log+1,_pow$3602+1
 14967  001DBC  C090  F0A8         	movff	?_log+2,_pow$3602+2
 14968  001DC0  C0A6  F069         	movff	_pow$3602,___ftmul@f1
 14969  001DC4  C0A7  F06A         	movff	_pow$3602+1,___ftmul@f1+1
 14970  001DC8  C0A8  F06B         	movff	_pow$3602+2,___ftmul@f1+2
 14971  001DCC  C0A3  F06C         	movff	pow@y,___ftmul@f2
 14972  001DD0  C0A4  F06D         	movff	pow@y+1,___ftmul@f2+1
 14973  001DD4  C0A5  F06E         	movff	pow@y+2,___ftmul@f2+2
 14974  001DD8  EC86  F012         	call	___ftmul	;wreg free
 14975  001DDC  C069  F0A9         	movff	?___ftmul,_pow$3603
 14976  001DE0  C06A  F0AA         	movff	?___ftmul+1,_pow$3603+1
 14977  001DE4  C06B  F0AB         	movff	?___ftmul+2,_pow$3603+2
 14978  001DE8  C0A9  F097         	movff	_pow$3603,exp@x
 14979  001DEC  C0AA  F098         	movff	_pow$3603+1,exp@x+1
 14980  001DF0  C0AB  F099         	movff	_pow$3603+2,exp@x+2
 14981  001DF4  ECE8  F009         	call	_exp	;wreg free
 14982  001DF8  C097  F0A0         	movff	?_exp,pow@x
 14983  001DFC  C098  F0A1         	movff	?_exp+1,pow@x+1
 14984  001E00  C099  F0A2         	movff	?_exp+2,pow@x+2
 14985  001E04  0100               	movlb	0	; () banked
 14986  001E06  51AC               	movf	pow@sign& (0+255),w,b
 14987  001E08  B4D8               	btfsc	status,2,c
 14988  001E0A  D00F               	goto	l2046
 14989                           
 14990                           ; BSR set to: 0
 14991  001E0C  C0A0  F018         	movff	pow@x,___ftneg@f1
 14992  001E10  C0A1  F019         	movff	pow@x+1,___ftneg@f1+1
 14993  001E14  C0A2  F01A         	movff	pow@x+2,___ftneg@f1+2
 14994  001E18  ECE3  F020         	call	___ftneg	;wreg free
 14995  001E1C  C018  F0A0         	movff	?___ftneg,?_pow
 14996  001E20  C019  F0A1         	movff	?___ftneg+1,?_pow+1
 14997  001E24  C01A  F0A2         	movff	?___ftneg+2,?_pow+2
 14998  001E28  0012               	return	
 14999  001E2A                     l2046:
 15000                           
 15001                           ; BSR set to: 0
 15002  001E2A  C0A0  F0A0         	movff	pow@x,?_pow
 15003  001E2E  C0A1  F0A1         	movff	pow@x+1,?_pow+1
 15004  001E32  C0A2  F0A2         	movff	pow@x+2,?_pow+2
 15005  001E36  0012               	return		;funcret
 15006  001E38                     __end_of_pow:
 15007                           	opt stack 0
 15008                           tosu	equ	0xFFF
 15009                           tosh	equ	0xFFE
 15010                           tosl	equ	0xFFD
 15011                           pclath	equ	0xFFA
 15012                           tblptru	equ	0xFF8
 15013                           tblptrh	equ	0xFF7
 15014                           tblptrl	equ	0xFF6
 15015                           tablat	equ	0xFF5
 15016                           prodh	equ	0xFF4
 15017                           prodl	equ	0xFF3
 15018                           intcon	equ	0xFF2
 15019                           intcon2	equ	0xFF1
 15020                           postinc0	equ	0xFEE
 15021                           plusw0	equ	0xFEB
 15022                           wreg	equ	0xFE8
 15023                           indf1	equ	0xFE7
 15024                           postdec1	equ	0xFE5
 15025                           fsr1h	equ	0xFE2
 15026                           fsr1l	equ	0xFE1
 15027                           indf2	equ	0xFDF
 15028                           postinc2	equ	0xFDE
 15029                           postdec2	equ	0xFDD
 15030                           plusw2	equ	0xFDB
 15031                           fsr2h	equ	0xFDA
 15032                           fsr2l	equ	0xFD9
 15033                           status	equ	0xFD8
 15034                           
 15035 ;; *************** function _log *****************
 15036 ;; Defined at:
 15037 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
 15038 ;; Parameters:    Size  Location     Type
 15039 ;;  x               3   46[BANK0 ] unsigned char 
 15040 ;; Auto vars:     Size  Location     Type
 15041 ;;  exponent        2   49[BANK0 ] int 
 15042 ;; Return value:  Size  Location     Type
 15043 ;;                  3   46[BANK0 ] int 
 15044 ;; Registers used:
 15045 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15046 ;; Tracked objects:
 15047 ;;		On entry : 0/0
 15048 ;;		On exit  : 0/0
 15049 ;;		Unchanged: 0/0
 15050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15051 ;;      Params:         0       3       0       0       0       0       0
 15052 ;;      Locals:         0       2       0       0       0       0       0
 15053 ;;      Temps:          0       0       0       0       0       0       0
 15054 ;;      Totals:         0       5       0       0       0       0       0
 15055 ;;Total ram usage:        5 bytes
 15056 ;; Hardware stack levels used:    1
 15057 ;; Hardware stack levels required when called:    7
 15058 ;; This function calls:
 15059 ;;		___awtoft
 15060 ;;		___ftadd
 15061 ;;		___ftmul
 15062 ;;		_eval_poly
 15063 ;;		_frexp
 15064 ;; This function is called by:
 15065 ;;		_pow
 15066 ;; This function uses a non-reentrant model
 15067 ;;
 15068                           
 15069                           	psect	text86
 15070  001FB4                     __ptext86:
 15071                           	opt stack 0
 15072  001FB4                     _log:
 15073                           	opt stack 18
 15074                           
 15075                           ;incstack = 0
 15076  001FB4  0100               	movlb	0	; () banked
 15077  001FB6  AF90               	btfss	(log@x+2)& (0+255),7,b
 15078  001FB8  D00D               	goto	l2302
 15079                           
 15080                           ; BSR set to: 0
 15081  001FBA  0E00               	movlw	0
 15082  001FBC  0101               	movlb	1	; () banked
 15083  001FBE  6F35               	movwf	(_errno+1)& (0+255),b
 15084  001FC0  0E21               	movlw	33
 15085  001FC2  6F34               	movwf	_errno& (0+255),b
 15086  001FC4  0E00               	movlw	0
 15087  001FC6  0100               	movlb	0	; () banked
 15088  001FC8  6F8E               	movwf	?_log& (0+255),b
 15089  001FCA  0E00               	movlw	0
 15090  001FCC  6F8F               	movwf	(?_log+1)& (0+255),b
 15091  001FCE  0E00               	movlw	0
 15092  001FD0  6F90               	movwf	(?_log+2)& (0+255),b
 15093                           
 15094                           ; BSR set to: 0
 15095  001FD2  0012               	return	
 15096  001FD4                     l2302:
 15097                           
 15098                           ; BSR set to: 0
 15099                           
 15100                           ; BSR set to: 0
 15101  001FD4  518E               	movf	log@x& (0+255),w,b
 15102  001FD6  118F               	iorwf	(log@x+1)& (0+255),w,b
 15103  001FD8  1190               	iorwf	(log@x+2)& (0+255),w,b
 15104  001FDA  A4D8               	btfss	status,2,c
 15105  001FDC  D00D               	goto	l2304
 15106                           
 15107                           ; BSR set to: 0
 15108  001FDE  0E00               	movlw	0
 15109  001FE0  0101               	movlb	1	; () banked
 15110  001FE2  6F35               	movwf	(_errno+1)& (0+255),b
 15111  001FE4  0E22               	movlw	34
 15112  001FE6  6F34               	movwf	_errno& (0+255),b
 15113  001FE8  0E00               	movlw	0
 15114  001FEA  0100               	movlb	0	; () banked
 15115  001FEC  6F8E               	movwf	?_log& (0+255),b
 15116  001FEE  0E00               	movlw	0
 15117  001FF0  6F8F               	movwf	(?_log+1)& (0+255),b
 15118  001FF2  0E00               	movlw	0
 15119  001FF4  6F90               	movwf	(?_log+2)& (0+255),b
 15120                           
 15121                           ; BSR set to: 0
 15122  001FF6  0012               	return	
 15123  001FF8                     l2304:
 15124                           
 15125                           ; BSR set to: 0
 15126                           
 15127                           ; BSR set to: 0
 15128  001FF8  0E00               	movlw	0
 15129  001FFA  6F6C               	movwf	___ftmul@f2& (0+255),b
 15130  001FFC  0E00               	movlw	0
 15131  001FFE  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 15132  002000  0E40               	movlw	64
 15133  002002  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 15134  002004  0E91               	movlw	low log@exponent
 15135  002006  6E1B               	movwf	frexp@eptr,c
 15136  002008  0E00               	movlw	high log@exponent
 15137  00200A  6E1C               	movwf	frexp@eptr+1,c
 15138  00200C  C08E  F018         	movff	log@x,frexp@value
 15139  002010  C08F  F019         	movff	log@x+1,frexp@value+1
 15140  002014  C090  F01A         	movff	log@x+2,frexp@value+2
 15141  002018  ECE2  F018         	call	_frexp	;wreg free
 15142  00201C  C018  F069         	movff	?_frexp,___ftmul@f1
 15143  002020  C019  F06A         	movff	?_frexp+1,___ftmul@f1+1
 15144  002024  C01A  F06B         	movff	?_frexp+2,___ftmul@f1+2
 15145  002028  EC86  F012         	call	___ftmul	;wreg free
 15146  00202C  C069  F078         	movff	?___ftmul,___ftadd@f1
 15147  002030  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 15148  002034  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 15149  002038  0E00               	movlw	0
 15150  00203A  0100               	movlb	0	; () banked
 15151  00203C  6F7B               	movwf	___ftadd@f2& (0+255),b
 15152  00203E  0E80               	movlw	128
 15153  002040  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 15154  002042  0EBF               	movlw	191
 15155  002044  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 15156  002046  ECBF  F00C         	call	___ftadd	;wreg free
 15157  00204A  C078  F08E         	movff	?___ftadd,log@x
 15158  00204E  C079  F08F         	movff	?___ftadd+1,log@x+1
 15159  002052  C07A  F090         	movff	?___ftadd+2,log@x+2
 15160  002056  0100               	movlb	0	; () banked
 15161  002058  0791               	decf	log@exponent& (0+255),f,b
 15162  00205A  A0D8               	btfss	status,0,c
 15163  00205C  0792               	decf	(log@exponent+1)& (0+255),f,b
 15164                           
 15165                           ; BSR set to: 0
 15166  00205E  C08E  F084         	movff	log@x,eval_poly@x
 15167  002062  C08F  F085         	movff	log@x+1,eval_poly@x+1
 15168  002066  C090  F086         	movff	log@x+2,eval_poly@x+2
 15169  00206A  0E75               	movlw	low log@coeff
 15170  00206C  6F87               	movwf	eval_poly@d& (0+255),b
 15171  00206E  0E06               	movlw	high log@coeff
 15172  002070  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 15173  002072  0E00               	movlw	0
 15174  002074  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 15175  002076  0E08               	movlw	8
 15176  002078  6F89               	movwf	eval_poly@n& (0+255),b
 15177  00207A  ECA7  F015         	call	_eval_poly	;wreg free
 15178  00207E  C084  F08E         	movff	?_eval_poly,log@x
 15179  002082  C085  F08F         	movff	?_eval_poly+1,log@x+1
 15180  002086  C086  F090         	movff	?_eval_poly+2,log@x+2
 15181  00208A  0E72               	movlw	114
 15182  00208C  0100               	movlb	0	; () banked
 15183  00208E  6F6C               	movwf	___ftmul@f2& (0+255),b
 15184  002090  0E31               	movlw	49
 15185  002092  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 15186  002094  0E3F               	movlw	63
 15187  002096  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 15188  002098  C091  F020         	movff	log@exponent,___awtoft@c
 15189  00209C  C092  F021         	movff	log@exponent+1,___awtoft@c+1
 15190  0020A0  EC52  F01F         	call	___awtoft	;wreg free
 15191  0020A4  C020  F069         	movff	?___awtoft,___ftmul@f1
 15192  0020A8  C021  F06A         	movff	?___awtoft+1,___ftmul@f1+1
 15193  0020AC  C022  F06B         	movff	?___awtoft+2,___ftmul@f1+2
 15194  0020B0  EC86  F012         	call	___ftmul	;wreg free
 15195  0020B4  C069  F078         	movff	?___ftmul,___ftadd@f1
 15196  0020B8  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 15197  0020BC  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 15198  0020C0  C08E  F07B         	movff	log@x,___ftadd@f2
 15199  0020C4  C08F  F07C         	movff	log@x+1,___ftadd@f2+1
 15200  0020C8  C090  F07D         	movff	log@x+2,___ftadd@f2+2
 15201  0020CC  ECBF  F00C         	call	___ftadd	;wreg free
 15202  0020D0  C078  F08E         	movff	?___ftadd,?_log
 15203  0020D4  C079  F08F         	movff	?___ftadd+1,?_log+1
 15204  0020D8  C07A  F090         	movff	?___ftadd+2,?_log+2
 15205  0020DC  0012               	return	
 15206  0020DE                     __end_of_log:
 15207                           	opt stack 0
 15208                           tosu	equ	0xFFF
 15209                           tosh	equ	0xFFE
 15210                           tosl	equ	0xFFD
 15211                           pclath	equ	0xFFA
 15212                           tblptru	equ	0xFF8
 15213                           tblptrh	equ	0xFF7
 15214                           tblptrl	equ	0xFF6
 15215                           tablat	equ	0xFF5
 15216                           prodh	equ	0xFF4
 15217                           prodl	equ	0xFF3
 15218                           intcon	equ	0xFF2
 15219                           intcon2	equ	0xFF1
 15220                           postinc0	equ	0xFEE
 15221                           plusw0	equ	0xFEB
 15222                           wreg	equ	0xFE8
 15223                           indf1	equ	0xFE7
 15224                           postdec1	equ	0xFE5
 15225                           fsr1h	equ	0xFE2
 15226                           fsr1l	equ	0xFE1
 15227                           indf2	equ	0xFDF
 15228                           postinc2	equ	0xFDE
 15229                           postdec2	equ	0xFDD
 15230                           plusw2	equ	0xFDB
 15231                           fsr2h	equ	0xFDA
 15232                           fsr2l	equ	0xFD9
 15233                           status	equ	0xFD8
 15234                           
 15235 ;; *************** function _exp *****************
 15236 ;; Defined at:
 15237 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
 15238 ;; Parameters:    Size  Location     Type
 15239 ;;  x               3   55[BANK0 ] int 
 15240 ;; Auto vars:     Size  Location     Type
 15241 ;;  exponent        2   61[BANK0 ] int 
 15242 ;;  sign            1   63[BANK0 ] unsigned char 
 15243 ;; Return value:  Size  Location     Type
 15244 ;;                  3   55[BANK0 ] unsigned char 
 15245 ;; Registers used:
 15246 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15247 ;; Tracked objects:
 15248 ;;		On entry : 0/0
 15249 ;;		On exit  : 0/0
 15250 ;;		Unchanged: 0/0
 15251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15252 ;;      Params:         0       3       0       0       0       0       0
 15253 ;;      Locals:         0       6       0       0       0       0       0
 15254 ;;      Temps:          0       0       0       0       0       0       0
 15255 ;;      Totals:         0       9       0       0       0       0       0
 15256 ;;Total ram usage:        9 bytes
 15257 ;; Hardware stack levels used:    1
 15258 ;; Hardware stack levels required when called:    7
 15259 ;; This function calls:
 15260 ;;		___awtoft
 15261 ;;		___ftdiv
 15262 ;;		___ftge
 15263 ;;		___ftmul
 15264 ;;		___ftneg
 15265 ;;		___ftsub
 15266 ;;		___fttol
 15267 ;;		_eval_poly
 15268 ;;		_floor
 15269 ;;		_ldexp
 15270 ;; This function is called by:
 15271 ;;		_pow
 15272 ;; This function uses a non-reentrant model
 15273 ;;
 15274                           
 15275                           	psect	text87
 15276  0013D0                     __ptext87:
 15277                           	opt stack 0
 15278  0013D0                     _exp:
 15279                           	opt stack 18
 15280                           
 15281                           ;incstack = 0
 15282  0013D0  0100               	movlb	0	; () banked
 15283  0013D2  5197               	movf	exp@x& (0+255),w,b
 15284  0013D4  1198               	iorwf	(exp@x+1)& (0+255),w,b
 15285  0013D6  1199               	iorwf	(exp@x+2)& (0+255),w,b
 15286  0013D8  A4D8               	btfss	status,2,c
 15287  0013DA  D007               	goto	l2238
 15288                           
 15289                           ; BSR set to: 0
 15290  0013DC  0E00               	movlw	0
 15291  0013DE  6F97               	movwf	?_exp& (0+255),b
 15292  0013E0  0E80               	movlw	128
 15293  0013E2  6F98               	movwf	(?_exp+1)& (0+255),b
 15294  0013E4  0E3F               	movlw	63
 15295  0013E6  6F99               	movwf	(?_exp+2)& (0+255),b
 15296                           
 15297                           ; BSR set to: 0
 15298  0013E8  0012               	return	
 15299  0013EA                     l2238:
 15300                           
 15301                           ; BSR set to: 0
 15302                           
 15303                           ; BSR set to: 0
 15304  0013EA  0E72               	movlw	114
 15305  0013EC  6E18               	movwf	___ftge@ff1,c
 15306  0013EE  0E31               	movlw	49
 15307  0013F0  6E19               	movwf	___ftge@ff1+1,c
 15308  0013F2  0E44               	movlw	68
 15309  0013F4  6E1A               	movwf	___ftge@ff1+2,c
 15310  0013F6  C097  F01B         	movff	exp@x,___ftge@ff2
 15311  0013FA  C098  F01C         	movff	exp@x+1,___ftge@ff2+1
 15312  0013FE  C099  F01D         	movff	exp@x+2,___ftge@ff2+2
 15313  001402  EC2A  F019         	call	___ftge	;wreg free
 15314  001406  B0D8               	btfsc	status,0,c
 15315  001408  D00D               	goto	l2240
 15316  00140A  0E00               	movlw	0
 15317  00140C  0101               	movlb	1	; () banked
 15318  00140E  6F35               	movwf	(_errno+1)& (0+255),b
 15319  001410  0E22               	movlw	34
 15320  001412  6F34               	movwf	_errno& (0+255),b
 15321  001414  0EFF               	movlw	255
 15322  001416  0100               	movlb	0	; () banked
 15323  001418  6F97               	movwf	?_exp& (0+255),b
 15324  00141A  0E7F               	movlw	127
 15325  00141C  6F98               	movwf	(?_exp+1)& (0+255),b
 15326  00141E  0E7F               	movlw	127
 15327  001420  6F99               	movwf	(?_exp+2)& (0+255),b
 15328                           
 15329                           ; BSR set to: 0
 15330  001422  0012               	return	
 15331  001424                     l2240:
 15332                           
 15333                           ; BSR set to: 0
 15334  001424  C097  F018         	movff	exp@x,___ftge@ff1
 15335  001428  C098  F019         	movff	exp@x+1,___ftge@ff1+1
 15336  00142C  C099  F01A         	movff	exp@x+2,___ftge@ff1+2
 15337  001430  0E49               	movlw	73
 15338  001432  6E1B               	movwf	___ftge@ff2,c
 15339  001434  0E3A               	movlw	58
 15340  001436  6E1C               	movwf	___ftge@ff2+1,c
 15341  001438  0EC4               	movlw	196
 15342  00143A  6E1D               	movwf	___ftge@ff2+2,c
 15343  00143C  EC2A  F019         	call	___ftge	;wreg free
 15344  001440  B0D8               	btfsc	status,0,c
 15345  001442  D00D               	goto	l2241
 15346  001444  0E00               	movlw	0
 15347  001446  0101               	movlb	1	; () banked
 15348  001448  6F35               	movwf	(_errno+1)& (0+255),b
 15349  00144A  0E22               	movlw	34
 15350  00144C  6F34               	movwf	_errno& (0+255),b
 15351  00144E  0E00               	movlw	0
 15352  001450  0100               	movlb	0	; () banked
 15353  001452  6F97               	movwf	?_exp& (0+255),b
 15354  001454  0E00               	movlw	0
 15355  001456  6F98               	movwf	(?_exp+1)& (0+255),b
 15356  001458  0E00               	movlw	0
 15357  00145A  6F99               	movwf	(?_exp+2)& (0+255),b
 15358                           
 15359                           ; BSR set to: 0
 15360  00145C  0012               	return	
 15361  00145E                     l2241:
 15362                           
 15363                           ; BSR set to: 0
 15364  00145E  0100               	movlb	0	; () banked
 15365  001460  AF99               	btfss	(exp@x+2)& (0+255),7,b
 15366  001462  D002               	goto	u7340
 15367  001464  0E01               	movlw	1
 15368  001466  D001               	goto	u7350
 15369  001468                     u7340:
 15370  001468  0E00               	movlw	0
 15371  00146A                     u7350:
 15372  00146A  6F9F               	movwf	exp@sign& (0+255),b
 15373                           
 15374                           ; BSR set to: 0
 15375  00146C  519F               	movf	exp@sign& (0+255),w,b
 15376  00146E  B4D8               	btfsc	status,2,c
 15377  001470  D00E               	goto	l2242
 15378                           
 15379                           ; BSR set to: 0
 15380  001472  C097  F018         	movff	exp@x,___ftneg@f1
 15381  001476  C098  F019         	movff	exp@x+1,___ftneg@f1+1
 15382  00147A  C099  F01A         	movff	exp@x+2,___ftneg@f1+2
 15383  00147E  ECE3  F020         	call	___ftneg	;wreg free
 15384  001482  C018  F097         	movff	?___ftneg,exp@x
 15385  001486  C019  F098         	movff	?___ftneg+1,exp@x+1
 15386  00148A  C01A  F099         	movff	?___ftneg+2,exp@x+2
 15387  00148E                     l2242:
 15388  00148E  C097  F069         	movff	exp@x,___ftmul@f1
 15389  001492  C098  F06A         	movff	exp@x+1,___ftmul@f1+1
 15390  001496  C099  F06B         	movff	exp@x+2,___ftmul@f1+2
 15391  00149A  0EAA               	movlw	170
 15392  00149C  0100               	movlb	0	; () banked
 15393  00149E  6F6C               	movwf	___ftmul@f2& (0+255),b
 15394  0014A0  0EB8               	movlw	184
 15395  0014A2  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 15396  0014A4  0E3F               	movlw	63
 15397  0014A6  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 15398  0014A8  EC86  F012         	call	___ftmul	;wreg free
 15399  0014AC  C069  F097         	movff	?___ftmul,exp@x
 15400  0014B0  C06A  F098         	movff	?___ftmul+1,exp@x+1
 15401  0014B4  C06B  F099         	movff	?___ftmul+2,exp@x+2
 15402  0014B8  C097  F08F         	movff	exp@x,floor@x
 15403  0014BC  C098  F090         	movff	exp@x+1,floor@x+1
 15404  0014C0  C099  F091         	movff	exp@x+2,floor@x+2
 15405  0014C4  ECCB  F014         	call	_floor	;wreg free
 15406  0014C8  C08F  F09A         	movff	?_floor,_exp$3604
 15407  0014CC  C090  F09B         	movff	?_floor+1,_exp$3604+1
 15408  0014D0  C091  F09C         	movff	?_floor+2,_exp$3604+2
 15409  0014D4  C09A  F078         	movff	_exp$3604,___fttol@f1
 15410  0014D8  C09B  F079         	movff	_exp$3604+1,___fttol@f1+1
 15411  0014DC  C09C  F07A         	movff	_exp$3604+2,___fttol@f1+2
 15412  0014E0  EC0A  F012         	call	___fttol	;wreg free
 15413  0014E4  C078  F09D         	movff	?___fttol,exp@exponent
 15414  0014E8  C079  F09E         	movff	?___fttol+1,exp@exponent+1
 15415  0014EC  C097  F084         	movff	exp@x,___ftsub@f1
 15416  0014F0  C098  F085         	movff	exp@x+1,___ftsub@f1+1
 15417  0014F4  C099  F086         	movff	exp@x+2,___ftsub@f1+2
 15418  0014F8  C09D  F020         	movff	exp@exponent,___awtoft@c
 15419  0014FC  C09E  F021         	movff	exp@exponent+1,___awtoft@c+1
 15420  001500  EC52  F01F         	call	___awtoft	;wreg free
 15421  001504  C020  F087         	movff	?___awtoft,___ftsub@f2
 15422  001508  C021  F088         	movff	?___awtoft+1,___ftsub@f2+1
 15423  00150C  C022  F089         	movff	?___awtoft+2,___ftsub@f2+2
 15424  001510  EC43  F01E         	call	___ftsub	;wreg free
 15425  001514  C084  F097         	movff	?___ftsub,exp@x
 15426  001518  C085  F098         	movff	?___ftsub+1,exp@x+1
 15427  00151C  C086  F099         	movff	?___ftsub+2,exp@x+2
 15428  001520  C097  F084         	movff	exp@x,eval_poly@x
 15429  001524  C098  F085         	movff	exp@x+1,eval_poly@x+1
 15430  001528  C099  F086         	movff	exp@x+2,eval_poly@x+2
 15431  00152C  0E57               	movlw	low exp@coeff
 15432  00152E  0100               	movlb	0	; () banked
 15433  001530  6F87               	movwf	eval_poly@d& (0+255),b
 15434  001532  0E06               	movlw	high exp@coeff
 15435  001534  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 15436  001536  0E00               	movlw	0
 15437  001538  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 15438  00153A  0E09               	movlw	9
 15439  00153C  6F89               	movwf	eval_poly@n& (0+255),b
 15440  00153E  ECA7  F015         	call	_eval_poly	;wreg free
 15441  001542  C084  F08E         	movff	?_eval_poly,ldexp@value
 15442  001546  C085  F08F         	movff	?_eval_poly+1,ldexp@value+1
 15443  00154A  C086  F090         	movff	?_eval_poly+2,ldexp@value+2
 15444  00154E  C09D  F091         	movff	exp@exponent,ldexp@newexp
 15445  001552  C09E  F092         	movff	exp@exponent+1,ldexp@newexp+1
 15446  001556  EC12  F016         	call	_ldexp	;wreg free
 15447  00155A  C08E  F097         	movff	?_ldexp,exp@x
 15448  00155E  C08F  F098         	movff	?_ldexp+1,exp@x+1
 15449  001562  C090  F099         	movff	?_ldexp+2,exp@x+2
 15450  001566  0100               	movlb	0	; () banked
 15451  001568  519F               	movf	exp@sign& (0+255),w,b
 15452  00156A  B4D8               	btfsc	status,2,c
 15453  00156C  D025               	goto	l2243
 15454                           
 15455                           ; BSR set to: 0
 15456  00156E  2997               	incf	exp@x& (0+255),w,b
 15457  001570  E10E               	bnz	l7603
 15458  001572  0E7F               	movlw	127
 15459  001574  1998               	xorwf	(exp@x+1)& (0+255),w,b
 15460  001576  E10B               	bnz	l7603
 15461  001578  0E7F               	movlw	127
 15462  00157A  1999               	xorwf	(exp@x+2)& (0+255),w,b
 15463  00157C  A4D8               	btfss	status,2,c
 15464  00157E  D007               	goto	l2244
 15465                           
 15466                           ; BSR set to: 0
 15467  001580  0E00               	movlw	0
 15468  001582  6F97               	movwf	?_exp& (0+255),b
 15469  001584  0E00               	movlw	0
 15470  001586  6F98               	movwf	(?_exp+1)& (0+255),b
 15471  001588  0E00               	movlw	0
 15472  00158A  6F99               	movwf	(?_exp+2)& (0+255),b
 15473                           
 15474                           ; BSR set to: 0
 15475  00158C  0012               	return	
 15476  00158E                     l2244:
 15477  00158E                     l7603:
 15478                           
 15479                           ; BSR set to: 0
 15480  00158E  0E00               	movlw	0
 15481  001590  6E29               	movwf	___ftdiv@f1,c
 15482  001592  0E80               	movlw	128
 15483  001594  6E2A               	movwf	___ftdiv@f1+1,c
 15484  001596  0E3F               	movlw	63
 15485  001598  6E2B               	movwf	___ftdiv@f1+2,c
 15486  00159A  C097  F02C         	movff	exp@x,___ftdiv@f2
 15487  00159E  C098  F02D         	movff	exp@x+1,___ftdiv@f2+1
 15488  0015A2  C099  F02E         	movff	exp@x+2,___ftdiv@f2+2
 15489  0015A6  EC01  F013         	call	___ftdiv	;wreg free
 15490  0015AA  C029  F097         	movff	?___ftdiv,?_exp
 15491  0015AE  C02A  F098         	movff	?___ftdiv+1,?_exp+1
 15492  0015B2  C02B  F099         	movff	?___ftdiv+2,?_exp+2
 15493  0015B6  0012               	return	
 15494  0015B8                     l2243:
 15495                           
 15496                           ; BSR set to: 0
 15497  0015B8  C097  F097         	movff	exp@x,?_exp
 15498  0015BC  C098  F098         	movff	exp@x+1,?_exp+1
 15499  0015C0  C099  F099         	movff	exp@x+2,?_exp+2
 15500  0015C4  0012               	return		;funcret
 15501  0015C6                     __end_of_exp:
 15502                           	opt stack 0
 15503                           tosu	equ	0xFFF
 15504                           tosh	equ	0xFFE
 15505                           tosl	equ	0xFFD
 15506                           pclath	equ	0xFFA
 15507                           tblptru	equ	0xFF8
 15508                           tblptrh	equ	0xFF7
 15509                           tblptrl	equ	0xFF6
 15510                           tablat	equ	0xFF5
 15511                           prodh	equ	0xFF4
 15512                           prodl	equ	0xFF3
 15513                           intcon	equ	0xFF2
 15514                           intcon2	equ	0xFF1
 15515                           postinc0	equ	0xFEE
 15516                           plusw0	equ	0xFEB
 15517                           wreg	equ	0xFE8
 15518                           indf1	equ	0xFE7
 15519                           postdec1	equ	0xFE5
 15520                           fsr1h	equ	0xFE2
 15521                           fsr1l	equ	0xFE1
 15522                           indf2	equ	0xFDF
 15523                           postinc2	equ	0xFDE
 15524                           postdec2	equ	0xFDD
 15525                           plusw2	equ	0xFDB
 15526                           fsr2h	equ	0xFDA
 15527                           fsr2l	equ	0xFD9
 15528                           status	equ	0xFD8
 15529                           
 15530 ;; *************** function _ldexp *****************
 15531 ;; Defined at:
 15532 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 15533 ;; Parameters:    Size  Location     Type
 15534 ;;  value           3   46[BANK0 ] unsigned char 
 15535 ;;  newexp          2   49[BANK0 ] int 
 15536 ;; Auto vars:     Size  Location     Type
 15537 ;;		None
 15538 ;; Return value:  Size  Location     Type
 15539 ;;                  3   46[BANK0 ] int 
 15540 ;; Registers used:
 15541 ;;		wreg, status,2, status,0
 15542 ;; Tracked objects:
 15543 ;;		On entry : 0/0
 15544 ;;		On exit  : 0/0
 15545 ;;		Unchanged: 0/0
 15546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15547 ;;      Params:         0       5       0       0       0       0       0
 15548 ;;      Locals:         0       0       0       0       0       0       0
 15549 ;;      Temps:          0       2       0       0       0       0       0
 15550 ;;      Totals:         0       7       0       0       0       0       0
 15551 ;;Total ram usage:        7 bytes
 15552 ;; Hardware stack levels used:    1
 15553 ;; Hardware stack levels required when called:    4
 15554 ;; This function calls:
 15555 ;;		Nothing
 15556 ;; This function is called by:
 15557 ;;		_exp
 15558 ;; This function uses a non-reentrant model
 15559 ;;
 15560                           
 15561                           	psect	text88
 15562  002C24                     __ptext88:
 15563                           	opt stack 0
 15564  002C24                     _ldexp:
 15565                           	opt stack 20
 15566                           
 15567                           ;incstack = 0
 15568  002C24  0100               	movlb	0	; () banked
 15569  002C26  518E               	movf	ldexp@value& (0+255),w,b
 15570  002C28  118F               	iorwf	(ldexp@value+1)& (0+255),w,b
 15571  002C2A  1190               	iorwf	(ldexp@value+2)& (0+255),w,b
 15572  002C2C  A4D8               	btfss	status,2,c
 15573  002C2E  D007               	goto	l2262
 15574                           
 15575                           ; BSR set to: 0
 15576  002C30  0E00               	movlw	0
 15577  002C32  6F8E               	movwf	?_ldexp& (0+255),b
 15578  002C34  0E00               	movlw	0
 15579  002C36  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 15580  002C38  0E00               	movlw	0
 15581  002C3A  6F90               	movwf	(?_ldexp+2)& (0+255),b
 15582                           
 15583                           ; BSR set to: 0
 15584  002C3C  0012               	return	
 15585  002C3E                     l2262:
 15586                           
 15587                           ; BSR set to: 0
 15588                           
 15589                           ; BSR set to: 0
 15590  002C3E  5190               	movf	(ldexp@value+2)& (0+255),w,b
 15591  002C40  0B7F               	andlw	127
 15592  002C42  6F93               	movwf	??_ldexp& (0+255),b
 15593  002C44  6B94               	clrf	(??_ldexp+1)& (0+255),b
 15594  002C46  90D8               	bcf	status,0,c
 15595  002C48  3793               	rlcf	??_ldexp& (0+255),f,b
 15596  002C4A  3794               	rlcf	(??_ldexp+1)& (0+255),f,b
 15597  002C4C  5193               	movf	??_ldexp& (0+255),w,b
 15598  002C4E  2791               	addwf	ldexp@newexp& (0+255),f,b
 15599  002C50  5194               	movf	(??_ldexp+1)& (0+255),w,b
 15600  002C52  2392               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 15601  002C54  AF8F               	btfss	(ldexp@value+1)& (0+255),7,b
 15602  002C56  D003               	goto	u7080
 15603  002C58  6B93               	clrf	??_ldexp& (0+255),b
 15604  002C5A  2B93               	incf	??_ldexp& (0+255),f,b
 15605  002C5C  D002               	goto	u7088
 15606  002C5E                     u7080:
 15607  002C5E  0100               	movlb	0	; () banked
 15608  002C60  6B93               	clrf	??_ldexp& (0+255),b
 15609  002C62                     u7088:
 15610  002C62  5193               	movf	??_ldexp& (0+255),w,b
 15611  002C64  2791               	addwf	ldexp@newexp& (0+255),f,b
 15612  002C66  0E00               	movlw	0
 15613  002C68  2392               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 15614  002C6A  AF92               	btfss	(ldexp@newexp+1)& (0+255),7,b
 15615  002C6C  D00D               	goto	l2264
 15616                           
 15617                           ; BSR set to: 0
 15618  002C6E  0E00               	movlw	0
 15619  002C70  0101               	movlb	1	; () banked
 15620  002C72  6F35               	movwf	(_errno+1)& (0+255),b
 15621  002C74  0E22               	movlw	34
 15622  002C76  6F34               	movwf	_errno& (0+255),b
 15623  002C78  0E00               	movlw	0
 15624  002C7A  0100               	movlb	0	; () banked
 15625  002C7C  6F8E               	movwf	?_ldexp& (0+255),b
 15626  002C7E  0E00               	movlw	0
 15627  002C80  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 15628  002C82  0E00               	movlw	0
 15629  002C84                     L4:
 15630  002C84  6F90               	movwf	(?_ldexp+2)& (0+255),b
 15631                           
 15632                           ; BSR set to: 0
 15633  002C86  0012               	return	
 15634  002C88                     l2264:
 15635                           
 15636                           ; BSR set to: 0
 15637                           
 15638                           ; BSR set to: 0
 15639  002C88  BF92               	btfsc	(ldexp@newexp+1)& (0+255),7,b
 15640  002C8A  D017               	goto	l2266
 15641  002C8C  0592               	decf	(ldexp@newexp+1)& (0+255),w,b
 15642  002C8E  A0D8               	btfss	status,0,c
 15643  002C90  D014               	goto	l2266
 15644                           
 15645                           ; BSR set to: 0
 15646  002C92  0E00               	movlw	0
 15647  002C94  0101               	movlb	1	; () banked
 15648  002C96  6F35               	movwf	(_errno+1)& (0+255),b
 15649  002C98  0E22               	movlw	34
 15650  002C9A  6F34               	movwf	_errno& (0+255),b
 15651                           
 15652                           ; BSR set to: 1
 15653  002C9C  0100               	movlb	0	; () banked
 15654  002C9E  AF90               	btfss	(ldexp@value+2)& (0+255),7,b
 15655  002CA0  D006               	goto	l2267
 15656                           
 15657                           ; BSR set to: 0
 15658  002CA2  0EFF               	movlw	255
 15659  002CA4  6F8E               	movwf	?_ldexp& (0+255),b
 15660  002CA6  0E7F               	movlw	127
 15661  002CA8  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 15662  002CAA  0EFF               	movlw	255
 15663  002CAC  D7EB               	goto	L4
 15664  002CAE                     l2267:
 15665                           
 15666                           ; BSR set to: 0
 15667                           
 15668                           ; BSR set to: 0
 15669  002CAE  0EFF               	movlw	255
 15670  002CB0  6F8E               	movwf	?_ldexp& (0+255),b
 15671  002CB2  0E7F               	movlw	127
 15672  002CB4  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 15673  002CB6  0E7F               	movlw	127
 15674  002CB8  D7E5               	goto	L4
 15675  002CBA                     l2266:
 15676                           
 15677                           ; BSR set to: 0
 15678                           
 15679                           ; BSR set to: 0
 15680  002CBA  3592               	rlcf	(ldexp@newexp+1)& (0+255),w,b
 15681  002CBC  3192               	rrcf	(ldexp@newexp+1)& (0+255),w,b
 15682  002CBE  6F94               	movwf	(??_ldexp+1)& (0+255),b
 15683  002CC0  3191               	rrcf	ldexp@newexp& (0+255),w,b
 15684  002CC2  6F93               	movwf	??_ldexp& (0+255),b
 15685  002CC4  5190               	movf	(ldexp@value+2)& (0+255),w,b
 15686  002CC6  1993               	xorwf	??_ldexp& (0+255),w,b
 15687  002CC8  0B80               	andlw	-128
 15688  002CCA  1993               	xorwf	??_ldexp& (0+255),w,b
 15689  002CCC  6F90               	movwf	(ldexp@value+2)& (0+255),b
 15690  002CCE  C091  F093         	movff	ldexp@newexp,??_ldexp
 15691  002CD2  0E01               	movlw	1
 15692  002CD4  1793               	andwf	??_ldexp& (0+255),f,b
 15693  002CD6  3393               	rrcf	??_ldexp& (0+255),f,b
 15694  002CD8  3393               	rrcf	??_ldexp& (0+255),f,b
 15695  002CDA  518F               	movf	(ldexp@value+1)& (0+255),w,b
 15696  002CDC  1993               	xorwf	??_ldexp& (0+255),w,b
 15697  002CDE  0B7F               	andlw	-129
 15698  002CE0  1993               	xorwf	??_ldexp& (0+255),w,b
 15699  002CE2  6F8F               	movwf	(ldexp@value+1)& (0+255),b
 15700                           
 15701                           ; BSR set to: 0
 15702                           
 15703                           ; BSR set to: 0
 15704                           
 15705                           ; BSR set to: 0
 15706  002CE4  C08E  F08E         	movff	ldexp@value,?_ldexp
 15707  002CE8  C08F  F08F         	movff	ldexp@value+1,?_ldexp+1
 15708  002CEC  C090  F090         	movff	ldexp@value+2,?_ldexp+2
 15709  002CF0  0012               	return	
 15710  002CF2                     __end_of_ldexp:
 15711                           	opt stack 0
 15712                           tosu	equ	0xFFF
 15713                           tosh	equ	0xFFE
 15714                           tosl	equ	0xFFD
 15715                           pclath	equ	0xFFA
 15716                           tblptru	equ	0xFF8
 15717                           tblptrh	equ	0xFF7
 15718                           tblptrl	equ	0xFF6
 15719                           tablat	equ	0xFF5
 15720                           prodh	equ	0xFF4
 15721                           prodl	equ	0xFF3
 15722                           intcon	equ	0xFF2
 15723                           intcon2	equ	0xFF1
 15724                           postinc0	equ	0xFEE
 15725                           plusw0	equ	0xFEB
 15726                           wreg	equ	0xFE8
 15727                           indf1	equ	0xFE7
 15728                           postdec1	equ	0xFE5
 15729                           fsr1h	equ	0xFE2
 15730                           fsr1l	equ	0xFE1
 15731                           indf2	equ	0xFDF
 15732                           postinc2	equ	0xFDE
 15733                           postdec2	equ	0xFDD
 15734                           plusw2	equ	0xFDB
 15735                           fsr2h	equ	0xFDA
 15736                           fsr2l	equ	0xFD9
 15737                           status	equ	0xFD8
 15738                           
 15739 ;; *************** function _floor *****************
 15740 ;; Defined at:
 15741 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
 15742 ;; Parameters:    Size  Location     Type
 15743 ;;  x               3   47[BANK0 ] int 
 15744 ;; Auto vars:     Size  Location     Type
 15745 ;;  i               3   50[BANK0 ] int 
 15746 ;;  expon           2   53[BANK0 ] int 
 15747 ;; Return value:  Size  Location     Type
 15748 ;;                  3   47[BANK0 ] int 
 15749 ;; Registers used:
 15750 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15751 ;; Tracked objects:
 15752 ;;		On entry : 0/0
 15753 ;;		On exit  : 0/0
 15754 ;;		Unchanged: 0/0
 15755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15756 ;;      Params:         0       3       0       0       0       0       0
 15757 ;;      Locals:         0       5       0       0       0       0       0
 15758 ;;      Temps:          0       0       0       0       0       0       0
 15759 ;;      Totals:         0       8       0       0       0       0       0
 15760 ;;Total ram usage:        8 bytes
 15761 ;; Hardware stack levels used:    1
 15762 ;; Hardware stack levels required when called:    6
 15763 ;; This function calls:
 15764 ;;		___altoft
 15765 ;;		___ftadd
 15766 ;;		___ftge
 15767 ;;		___fttol
 15768 ;;		_frexp
 15769 ;; This function is called by:
 15770 ;;		_exp
 15771 ;; This function uses a non-reentrant model
 15772 ;;
 15773                           
 15774                           	psect	text89
 15775  002996                     __ptext89:
 15776                           	opt stack 0
 15777  002996                     _floor:
 15778                           	opt stack 18
 15779                           
 15780                           ; BSR set to: 0
 15781                           ;incstack = 0
 15782  002996  C08F  F018         	movff	floor@x,frexp@value
 15783  00299A  C090  F019         	movff	floor@x+1,frexp@value+1
 15784  00299E  C091  F01A         	movff	floor@x+2,frexp@value+2
 15785  0029A2  0E95               	movlw	low floor@expon
 15786  0029A4  6E1B               	movwf	frexp@eptr,c
 15787  0029A6  0E00               	movlw	high floor@expon
 15788  0029A8  6E1C               	movwf	frexp@eptr+1,c
 15789  0029AA  ECE2  F018         	call	_frexp	;wreg free
 15790  0029AE  0100               	movlb	0	; () banked
 15791  0029B0  AF96               	btfss	(floor@expon+1)& (0+255),7,b
 15792  0029B2  D010               	goto	l2249
 15793                           
 15794                           ; BSR set to: 0
 15795  0029B4  AF91               	btfss	(floor@x+2)& (0+255),7,b
 15796  0029B6  D007               	goto	l2250
 15797                           
 15798                           ; BSR set to: 0
 15799  0029B8  0E00               	movlw	0
 15800  0029BA  6F8F               	movwf	?_floor& (0+255),b
 15801  0029BC  0E80               	movlw	128
 15802  0029BE  6F90               	movwf	(?_floor+1)& (0+255),b
 15803  0029C0  0EBF               	movlw	191
 15804  0029C2  6F91               	movwf	(?_floor+2)& (0+255),b
 15805                           
 15806                           ; BSR set to: 0
 15807  0029C4  0012               	return	
 15808  0029C6                     l2250:
 15809                           
 15810                           ; BSR set to: 0
 15811                           
 15812                           ; BSR set to: 0
 15813  0029C6  0E00               	movlw	0
 15814  0029C8  6F8F               	movwf	?_floor& (0+255),b
 15815  0029CA  0E00               	movlw	0
 15816  0029CC  6F90               	movwf	(?_floor+1)& (0+255),b
 15817  0029CE  0E00               	movlw	0
 15818  0029D0  6F91               	movwf	(?_floor+2)& (0+255),b
 15819                           
 15820                           ; BSR set to: 0
 15821  0029D2  0012               	return	
 15822  0029D4                     l2249:
 15823                           
 15824                           ; BSR set to: 0
 15825                           
 15826                           ; BSR set to: 0
 15827  0029D4  5196               	movf	(floor@expon+1)& (0+255),w,b
 15828  0029D6  E104               	bnz	u7040
 15829  0029D8  0E15               	movlw	21
 15830  0029DA  5D95               	subwf	floor@expon& (0+255),w,b
 15831  0029DC  A0D8               	btfss	status,0,c
 15832  0029DE  D007               	goto	l2252
 15833  0029E0                     u7040:
 15834                           
 15835                           ; BSR set to: 0
 15836  0029E0  C08F  F08F         	movff	floor@x,?_floor
 15837  0029E4  C090  F090         	movff	floor@x+1,?_floor+1
 15838  0029E8  C091  F091         	movff	floor@x+2,?_floor+2
 15839  0029EC  0012               	return	
 15840  0029EE                     l2252:
 15841                           
 15842                           ; BSR set to: 0
 15843                           
 15844                           ; BSR set to: 0
 15845  0029EE  C08F  F078         	movff	floor@x,___fttol@f1
 15846  0029F2  C090  F079         	movff	floor@x+1,___fttol@f1+1
 15847  0029F6  C091  F07A         	movff	floor@x+2,___fttol@f1+2
 15848  0029FA  EC0A  F012         	call	___fttol	;wreg free
 15849  0029FE  C078  F087         	movff	?___fttol,___altoft@c
 15850  002A02  C079  F088         	movff	?___fttol+1,___altoft@c+1
 15851  002A06  C07A  F089         	movff	?___fttol+2,___altoft@c+2
 15852  002A0A  C07B  F08A         	movff	?___fttol+3,___altoft@c+3
 15853  002A0E  EC76  F01A         	call	___altoft	;wreg free
 15854  002A12  C087  F092         	movff	?___altoft,floor@i
 15855  002A16  C088  F093         	movff	?___altoft+1,floor@i+1
 15856  002A1A  C089  F094         	movff	?___altoft+2,floor@i+2
 15857  002A1E  C08F  F018         	movff	floor@x,___ftge@ff1
 15858  002A22  C090  F019         	movff	floor@x+1,___ftge@ff1+1
 15859  002A26  C091  F01A         	movff	floor@x+2,___ftge@ff1+2
 15860  002A2A  C092  F01B         	movff	floor@i,___ftge@ff2
 15861  002A2E  C093  F01C         	movff	floor@i+1,___ftge@ff2+1
 15862  002A32  C094  F01D         	movff	floor@i+2,___ftge@ff2+2
 15863  002A36  EC2A  F019         	call	___ftge	;wreg free
 15864  002A3A  B0D8               	btfsc	status,0,c
 15865  002A3C  D016               	goto	l2253
 15866  002A3E  C092  F078         	movff	floor@i,___ftadd@f1
 15867  002A42  C093  F079         	movff	floor@i+1,___ftadd@f1+1
 15868  002A46  C094  F07A         	movff	floor@i+2,___ftadd@f1+2
 15869  002A4A  0E00               	movlw	0
 15870  002A4C  0100               	movlb	0	; () banked
 15871  002A4E  6F7B               	movwf	___ftadd@f2& (0+255),b
 15872  002A50  0E80               	movlw	128
 15873  002A52  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 15874  002A54  0EBF               	movlw	191
 15875  002A56  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 15876  002A58  ECBF  F00C         	call	___ftadd	;wreg free
 15877  002A5C  C078  F08F         	movff	?___ftadd,?_floor
 15878  002A60  C079  F090         	movff	?___ftadd+1,?_floor+1
 15879  002A64  C07A  F091         	movff	?___ftadd+2,?_floor+2
 15880  002A68  0012               	return	
 15881  002A6A                     l2253:
 15882  002A6A  C092  F08F         	movff	floor@i,?_floor
 15883  002A6E  C093  F090         	movff	floor@i+1,?_floor+1
 15884  002A72  C094  F091         	movff	floor@i+2,?_floor+2
 15885  002A76  0012               	return		;funcret
 15886  002A78                     __end_of_floor:
 15887                           	opt stack 0
 15888                           tosu	equ	0xFFF
 15889                           tosh	equ	0xFFE
 15890                           tosl	equ	0xFFD
 15891                           pclath	equ	0xFFA
 15892                           tblptru	equ	0xFF8
 15893                           tblptrh	equ	0xFF7
 15894                           tblptrl	equ	0xFF6
 15895                           tablat	equ	0xFF5
 15896                           prodh	equ	0xFF4
 15897                           prodl	equ	0xFF3
 15898                           intcon	equ	0xFF2
 15899                           intcon2	equ	0xFF1
 15900                           postinc0	equ	0xFEE
 15901                           plusw0	equ	0xFEB
 15902                           wreg	equ	0xFE8
 15903                           indf1	equ	0xFE7
 15904                           postdec1	equ	0xFE5
 15905                           fsr1h	equ	0xFE2
 15906                           fsr1l	equ	0xFE1
 15907                           indf2	equ	0xFDF
 15908                           postinc2	equ	0xFDE
 15909                           postdec2	equ	0xFDD
 15910                           plusw2	equ	0xFDB
 15911                           fsr2h	equ	0xFDA
 15912                           fsr2l	equ	0xFD9
 15913                           status	equ	0xFD8
 15914                           
 15915 ;; *************** function _frexp *****************
 15916 ;; Defined at:
 15917 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 15918 ;; Parameters:    Size  Location     Type
 15919 ;;  value           3   23[COMRAM] int 
 15920 ;;  eptr            2   26[COMRAM] PTR int 
 15921 ;;		 -> log@exponent(2), floor@expon(2), 
 15922 ;; Auto vars:     Size  Location     Type
 15923 ;;		None
 15924 ;; Return value:  Size  Location     Type
 15925 ;;                  3   23[COMRAM] PTR int 
 15926 ;; Registers used:
 15927 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15928 ;; Tracked objects:
 15929 ;;		On entry : 0/0
 15930 ;;		On exit  : 0/0
 15931 ;;		Unchanged: 0/0
 15932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15933 ;;      Params:         5       0       0       0       0       0       0
 15934 ;;      Locals:         0       0       0       0       0       0       0
 15935 ;;      Temps:          2       0       0       0       0       0       0
 15936 ;;      Totals:         7       0       0       0       0       0       0
 15937 ;;Total ram usage:        7 bytes
 15938 ;; Hardware stack levels used:    1
 15939 ;; Hardware stack levels required when called:    4
 15940 ;; This function calls:
 15941 ;;		Nothing
 15942 ;; This function is called by:
 15943 ;;		_floor
 15944 ;;		_log
 15945 ;; This function uses a non-reentrant model
 15946 ;;
 15947                           
 15948                           	psect	text90
 15949  0031C4                     __ptext90:
 15950                           	opt stack 0
 15951  0031C4                     _frexp:
 15952                           	opt stack 20
 15953                           
 15954                           ;incstack = 0
 15955  0031C4  5018               	movf	frexp@value,w,c
 15956  0031C6  1019               	iorwf	frexp@value+1,w,c
 15957  0031C8  101A               	iorwf	frexp@value+2,w,c
 15958  0031CA  A4D8               	btfss	status,2,c
 15959  0031CC  D00F               	goto	l2258
 15960  0031CE  C01B  FFD9         	movff	frexp@eptr,fsr2l
 15961  0031D2  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 15962  0031D6  0E00               	movlw	0
 15963  0031D8  6EDE               	movwf	postinc2,c
 15964  0031DA  0E00               	movlw	0
 15965  0031DC  6EDD               	movwf	postdec2,c
 15966  0031DE  0E00               	movlw	0
 15967  0031E0  6E18               	movwf	?_frexp,c
 15968  0031E2  0E00               	movlw	0
 15969  0031E4  6E19               	movwf	?_frexp+1,c
 15970  0031E6  0E00               	movlw	0
 15971  0031E8  6E1A               	movwf	?_frexp+2,c
 15972  0031EA  0012               	return	
 15973  0031EC                     l2258:
 15974  0031EC  501A               	movf	frexp@value+2,w,c
 15975  0031EE  0B7F               	andlw	127
 15976  0031F0  6E1D               	movwf	??_frexp& (0+255),c
 15977  0031F2  6A1E               	clrf	(??_frexp+1)& (0+255),c
 15978  0031F4  90D8               	bcf	status,0,c
 15979  0031F6  361D               	rlcf	??_frexp,f,c
 15980  0031F8  361E               	rlcf	??_frexp+1,f,c
 15981  0031FA  C01B  FFD9         	movff	frexp@eptr,fsr2l
 15982  0031FE  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 15983  003202  C01D  FFDE         	movff	??_frexp,postinc2
 15984  003206  C01E  FFDD         	movff	??_frexp+1,postdec2
 15985  00320A  AE19               	btfss	frexp@value+1,7,c
 15986  00320C  D003               	goto	u6920
 15987  00320E  6A1D               	clrf	??_frexp& (0+255),c
 15988  003210  2A1D               	incf	??_frexp& (0+255),f,c
 15989  003212  D001               	goto	u6928
 15990  003214                     u6920:
 15991  003214  6A1D               	clrf	??_frexp& (0+255),c
 15992  003216                     u6928:
 15993  003216  501D               	movf	??_frexp,w,c
 15994  003218  C01B  FFD9         	movff	frexp@eptr,fsr2l
 15995  00321C  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 15996  003220  12DE               	iorwf	postinc2,f,c
 15997  003222  0E00               	movlw	0
 15998  003224  12DD               	iorwf	postdec2,f,c
 15999  003226  C01B  FFD9         	movff	frexp@eptr,fsr2l
 16000  00322A  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 16001  00322E  0E82               	movlw	130
 16002  003230  26DE               	addwf	postinc2,f,c
 16003  003232  0EFF               	movlw	255
 16004  003234  22DD               	addwfc	postdec2,f,c
 16005  003236  801A               	bsf	frexp@value+2,0,c
 16006  003238  821A               	bsf	frexp@value+2,1,c
 16007  00323A  841A               	bsf	frexp@value+2,2,c
 16008  00323C  861A               	bsf	frexp@value+2,3,c
 16009  00323E  881A               	bsf	frexp@value+2,4,c
 16010  003240  8A1A               	bsf	frexp@value+2,5,c
 16011  003242  9C1A               	bcf	frexp@value+2,6,c
 16012  003244  9E19               	bcf	frexp@value+1,7,c
 16013  003246  C018  F018         	movff	frexp@value,?_frexp
 16014  00324A  C019  F019         	movff	frexp@value+1,?_frexp+1
 16015  00324E  C01A  F01A         	movff	frexp@value+2,?_frexp+2
 16016  003252  0012               	return	
 16017  003254                     __end_of_frexp:
 16018                           	opt stack 0
 16019                           tosu	equ	0xFFF
 16020                           tosh	equ	0xFFE
 16021                           tosl	equ	0xFFD
 16022                           pclath	equ	0xFFA
 16023                           tblptru	equ	0xFF8
 16024                           tblptrh	equ	0xFF7
 16025                           tblptrl	equ	0xFF6
 16026                           tablat	equ	0xFF5
 16027                           prodh	equ	0xFF4
 16028                           prodl	equ	0xFF3
 16029                           intcon	equ	0xFF2
 16030                           intcon2	equ	0xFF1
 16031                           postinc0	equ	0xFEE
 16032                           plusw0	equ	0xFEB
 16033                           wreg	equ	0xFE8
 16034                           indf1	equ	0xFE7
 16035                           postdec1	equ	0xFE5
 16036                           fsr1h	equ	0xFE2
 16037                           fsr1l	equ	0xFE1
 16038                           indf2	equ	0xFDF
 16039                           postinc2	equ	0xFDE
 16040                           postdec2	equ	0xFDD
 16041                           plusw2	equ	0xFDB
 16042                           fsr2h	equ	0xFDA
 16043                           fsr2l	equ	0xFD9
 16044                           status	equ	0xFD8
 16045                           
 16046 ;; *************** function ___fttol *****************
 16047 ;; Defined at:
 16048 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 16049 ;; Parameters:    Size  Location     Type
 16050 ;;  f1              3   24[BANK0 ] float 
 16051 ;; Auto vars:     Size  Location     Type
 16052 ;;  lval            4   34[BANK0 ] unsigned long 
 16053 ;;  exp1            1   38[BANK0 ] unsigned char 
 16054 ;;  sign1           1   33[BANK0 ] unsigned char 
 16055 ;; Return value:  Size  Location     Type
 16056 ;;                  4   24[BANK0 ] long 
 16057 ;; Registers used:
 16058 ;;		wreg, status,2, status,0
 16059 ;; Tracked objects:
 16060 ;;		On entry : 0/0
 16061 ;;		On exit  : 0/0
 16062 ;;		Unchanged: 0/0
 16063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16064 ;;      Params:         0       4       0       0       0       0       0
 16065 ;;      Locals:         0       6       0       0       0       0       0
 16066 ;;      Temps:          0       5       0       0       0       0       0
 16067 ;;      Totals:         0      15       0       0       0       0       0
 16068 ;;Total ram usage:       15 bytes
 16069 ;; Hardware stack levels used:    1
 16070 ;; Hardware stack levels required when called:    4
 16071 ;; This function calls:
 16072 ;;		Nothing
 16073 ;; This function is called by:
 16074 ;;		_AdcConvert
 16075 ;;		_ReadIntFromEeprom
 16076 ;;		_pow
 16077 ;;		_exp
 16078 ;;		_floor
 16079 ;; This function uses a non-reentrant model
 16080 ;;
 16081                           
 16082                           	psect	text91
 16083  002414                     __ptext91:
 16084                           	opt stack 0
 16085  002414                     ___fttol:
 16086                           	opt stack 19
 16087                           
 16088                           ;incstack = 0
 16089  002414  C07A  F07C         	movff	___fttol@f1+2,??___fttol
 16090  002418  0100               	movlb	0	; () banked
 16091  00241A  6B7D               	clrf	(??___fttol+1)& (0+255),b
 16092  00241C  6B7E               	clrf	(??___fttol+2)& (0+255),b
 16093  00241E  3579               	rlcf	(___fttol@f1+1)& (0+255),w,b
 16094  002420  377C               	rlcf	??___fttol& (0+255),f,b
 16095  002422  E301               	bnc	u6831
 16096  002424  817D               	bsf	(??___fttol+1)& (0+255),0,b
 16097  002426                     u6831:
 16098  002426  517C               	movf	??___fttol& (0+255),w,b
 16099  002428  6F86               	movwf	___fttol@exp1& (0+255),b
 16100  00242A  5186               	movf	___fttol@exp1& (0+255),w,b
 16101  00242C  A4D8               	btfss	status,2,c
 16102  00242E  D009               	goto	l1915
 16103                           
 16104                           ; BSR set to: 0
 16105  002430  0E00               	movlw	0
 16106  002432  6F78               	movwf	?___fttol& (0+255),b
 16107  002434  0E00               	movlw	0
 16108  002436  6F79               	movwf	(?___fttol+1)& (0+255),b
 16109  002438  0E00               	movlw	0
 16110  00243A  6F7A               	movwf	(?___fttol+2)& (0+255),b
 16111  00243C  0E00               	movlw	0
 16112  00243E  6F7B               	movwf	(?___fttol+3)& (0+255),b
 16113                           
 16114                           ; BSR set to: 0
 16115  002440  0012               	return	
 16116  002442                     l1915:
 16117                           
 16118                           ; BSR set to: 0
 16119                           
 16120                           ; BSR set to: 0
 16121  002442  0E17               	movlw	23
 16122  002444  6F7C               	movwf	??___fttol& (0+255),b
 16123  002446  C078  F07D         	movff	___fttol@f1,??___fttol+1
 16124  00244A  C079  F07E         	movff	___fttol@f1+1,??___fttol+2
 16125  00244E  C07A  F07F         	movff	___fttol@f1+2,??___fttol+3
 16126  002452  297C               	incf	??___fttol& (0+255),w,b
 16127  002454  6F80               	movwf	(??___fttol+4)& (0+255),b
 16128  002456  D004               	goto	u6850
 16129  002458                     u6855:
 16130  002458  90D8               	bcf	status,0,c
 16131  00245A  337F               	rrcf	(??___fttol+3)& (0+255),f,b
 16132  00245C  337E               	rrcf	(??___fttol+2)& (0+255),f,b
 16133  00245E  337D               	rrcf	(??___fttol+1)& (0+255),f,b
 16134  002460                     u6850:
 16135  002460  2F80               	decfsz	(??___fttol+4)& (0+255),f,b
 16136  002462  D7FA               	goto	u6855
 16137  002464  0100               	movlb	0	; () banked
 16138  002466  517D               	movf	(??___fttol+1)& (0+255),w,b
 16139  002468  6F81               	movwf	___fttol@sign1& (0+255),b
 16140                           
 16141                           ; BSR set to: 0
 16142  00246A  8F79               	bsf	(___fttol@f1+1)& (0+255),7,b
 16143                           
 16144                           ; BSR set to: 0
 16145  00246C  0EFF               	movlw	255
 16146  00246E  1778               	andwf	___fttol@f1& (0+255),f,b
 16147  002470  0EFF               	movlw	255
 16148  002472  1779               	andwf	(___fttol@f1+1)& (0+255),f,b
 16149  002474  0E00               	movlw	0
 16150  002476  177A               	andwf	(___fttol@f1+2)& (0+255),f,b
 16151                           
 16152                           ; BSR set to: 0
 16153  002478  5178               	movf	___fttol@f1& (0+255),w,b
 16154  00247A  6F82               	movwf	___fttol@lval& (0+255),b
 16155  00247C  5179               	movf	(___fttol@f1+1)& (0+255),w,b
 16156  00247E  6F83               	movwf	(___fttol@lval+1)& (0+255),b
 16157  002480  517A               	movf	(___fttol@f1+2)& (0+255),w,b
 16158  002482  6F84               	movwf	(___fttol@lval+2)& (0+255),b
 16159  002484  6B85               	clrf	(___fttol@lval+3)& (0+255),b
 16160                           
 16161                           ; BSR set to: 0
 16162  002486  0E8E               	movlw	142
 16163  002488  5F86               	subwf	___fttol@exp1& (0+255),f,b
 16164                           
 16165                           ; BSR set to: 0
 16166  00248A  AF86               	btfss	___fttol@exp1& (0+255),7,b
 16167  00248C  D016               	goto	l1917
 16168                           
 16169                           ; BSR set to: 0
 16170  00248E  5186               	movf	___fttol@exp1& (0+255),w,b
 16171  002490  0A80               	xorlw	128
 16172  002492  0F8F               	addlw	143
 16173  002494  B0D8               	btfsc	status,0,c
 16174  002496  D009               	goto	l1918
 16175                           
 16176                           ; BSR set to: 0
 16177  002498  0E00               	movlw	0
 16178  00249A  6F78               	movwf	?___fttol& (0+255),b
 16179  00249C  0E00               	movlw	0
 16180  00249E  6F79               	movwf	(?___fttol+1)& (0+255),b
 16181  0024A0  0E00               	movlw	0
 16182  0024A2  6F7A               	movwf	(?___fttol+2)& (0+255),b
 16183  0024A4  0E00               	movlw	0
 16184  0024A6  6F7B               	movwf	(?___fttol+3)& (0+255),b
 16185                           
 16186                           ; BSR set to: 0
 16187  0024A8  0012               	return	
 16188  0024AA                     l1918:
 16189                           
 16190                           ; BSR set to: 0
 16191                           
 16192                           ; BSR set to: 0
 16193                           
 16194                           ; BSR set to: 0
 16195  0024AA  90D8               	bcf	status,0,c
 16196  0024AC  3385               	rrcf	(___fttol@lval+3)& (0+255),f,b
 16197  0024AE  3384               	rrcf	(___fttol@lval+2)& (0+255),f,b
 16198  0024B0  3383               	rrcf	(___fttol@lval+1)& (0+255),f,b
 16199  0024B2  3382               	rrcf	___fttol@lval& (0+255),f,b
 16200                           
 16201                           ; BSR set to: 0
 16202  0024B4  3F86               	incfsz	___fttol@exp1& (0+255),f,b
 16203  0024B6  D7F9               	goto	l1918
 16204                           
 16205                           ; BSR set to: 0
 16206  0024B8  D015               	goto	u6890
 16207  0024BA                     l1917:
 16208                           
 16209                           ; BSR set to: 0
 16210                           
 16211                           ; BSR set to: 0
 16212  0024BA  0E17               	movlw	23
 16213  0024BC  6586               	cpfsgt	___fttol@exp1& (0+255),b
 16214  0024BE  D00F               	goto	l1923
 16215                           
 16216                           ; BSR set to: 0
 16217  0024C0  0E00               	movlw	0
 16218  0024C2  6F78               	movwf	?___fttol& (0+255),b
 16219  0024C4  0E00               	movlw	0
 16220  0024C6  6F79               	movwf	(?___fttol+1)& (0+255),b
 16221  0024C8  0E00               	movlw	0
 16222  0024CA  6F7A               	movwf	(?___fttol+2)& (0+255),b
 16223  0024CC  0E00               	movlw	0
 16224  0024CE  6F7B               	movwf	(?___fttol+3)& (0+255),b
 16225                           
 16226                           ; BSR set to: 0
 16227  0024D0  0012               	return	
 16228  0024D2                     
 16229                           ; BSR set to: 0
 16230                           
 16231                           ; BSR set to: 0
 16232  0024D2  90D8               	bcf	status,0,c
 16233  0024D4  3782               	rlcf	___fttol@lval& (0+255),f,b
 16234  0024D6  3783               	rlcf	(___fttol@lval+1)& (0+255),f,b
 16235  0024D8  3784               	rlcf	(___fttol@lval+2)& (0+255),f,b
 16236  0024DA  3785               	rlcf	(___fttol@lval+3)& (0+255),f,b
 16237  0024DC  0786               	decf	___fttol@exp1& (0+255),f,b
 16238  0024DE                     l1923:
 16239                           
 16240                           ; BSR set to: 0
 16241                           
 16242                           ; BSR set to: 0
 16243  0024DE  5186               	movf	___fttol@exp1& (0+255),w,b
 16244  0024E0  A4D8               	btfss	status,2,c
 16245  0024E2  D7F7               	goto	l1924
 16246  0024E4                     u6890:
 16247                           
 16248                           ; BSR set to: 0
 16249                           
 16250                           ; BSR set to: 0
 16251                           
 16252                           ; BSR set to: 0
 16253  0024E4  5181               	movf	___fttol@sign1& (0+255),w,b
 16254  0024E6  B4D8               	btfsc	status,2,c
 16255  0024E8  D008               	goto	l1926
 16256                           
 16257                           ; BSR set to: 0
 16258  0024EA  1F85               	comf	(___fttol@lval+3)& (0+255),f,b
 16259  0024EC  1F84               	comf	(___fttol@lval+2)& (0+255),f,b
 16260  0024EE  1F83               	comf	(___fttol@lval+1)& (0+255),f,b
 16261  0024F0  6D82               	negf	___fttol@lval& (0+255),b
 16262  0024F2  0E00               	movlw	0
 16263  0024F4  2383               	addwfc	(___fttol@lval+1)& (0+255),f,b
 16264  0024F6  2384               	addwfc	(___fttol@lval+2)& (0+255),f,b
 16265  0024F8  2385               	addwfc	(___fttol@lval+3)& (0+255),f,b
 16266  0024FA                     l1926:
 16267                           
 16268                           ; BSR set to: 0
 16269                           
 16270                           ; BSR set to: 0
 16271  0024FA  C082  F078         	movff	___fttol@lval,?___fttol
 16272  0024FE  C083  F079         	movff	___fttol@lval+1,?___fttol+1
 16273  002502  C084  F07A         	movff	___fttol@lval+2,?___fttol+2
 16274  002506  C085  F07B         	movff	___fttol@lval+3,?___fttol+3
 16275  00250A  0012               	return	
 16276  00250C                     __end_of___fttol:
 16277                           	opt stack 0
 16278                           tosu	equ	0xFFF
 16279                           tosh	equ	0xFFE
 16280                           tosl	equ	0xFFD
 16281                           pclath	equ	0xFFA
 16282                           tblptru	equ	0xFF8
 16283                           tblptrh	equ	0xFF7
 16284                           tblptrl	equ	0xFF6
 16285                           tablat	equ	0xFF5
 16286                           prodh	equ	0xFF4
 16287                           prodl	equ	0xFF3
 16288                           intcon	equ	0xFF2
 16289                           intcon2	equ	0xFF1
 16290                           postinc0	equ	0xFEE
 16291                           plusw0	equ	0xFEB
 16292                           wreg	equ	0xFE8
 16293                           indf1	equ	0xFE7
 16294                           postdec1	equ	0xFE5
 16295                           fsr1h	equ	0xFE2
 16296                           fsr1l	equ	0xFE1
 16297                           indf2	equ	0xFDF
 16298                           postinc2	equ	0xFDE
 16299                           postdec2	equ	0xFDD
 16300                           plusw2	equ	0xFDB
 16301                           fsr2h	equ	0xFDA
 16302                           fsr2l	equ	0xFD9
 16303                           status	equ	0xFD8
 16304                           
 16305 ;; *************** function ___ftge *****************
 16306 ;; Defined at:
 16307 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 16308 ;; Parameters:    Size  Location     Type
 16309 ;;  ff1             3   23[COMRAM] float 
 16310 ;;  ff2             3   26[COMRAM] float 
 16311 ;; Auto vars:     Size  Location     Type
 16312 ;;		None
 16313 ;; Return value:  Size  Location     Type
 16314 ;;		None               void
 16315 ;; Registers used:
 16316 ;;		wreg, status,2, status,0
 16317 ;; Tracked objects:
 16318 ;;		On entry : 0/0
 16319 ;;		On exit  : 0/0
 16320 ;;		Unchanged: 0/0
 16321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16322 ;;      Params:         6       0       0       0       0       0       0
 16323 ;;      Locals:         0       0       0       0       0       0       0
 16324 ;;      Temps:          3       0       0       0       0       0       0
 16325 ;;      Totals:         9       0       0       0       0       0       0
 16326 ;;Total ram usage:        9 bytes
 16327 ;; Hardware stack levels used:    1
 16328 ;; Hardware stack levels required when called:    4
 16329 ;; This function calls:
 16330 ;;		Nothing
 16331 ;; This function is called by:
 16332 ;;		_CheckFlashPrecentage
 16333 ;;		_pow
 16334 ;;		_exp
 16335 ;;		_floor
 16336 ;; This function uses a non-reentrant model
 16337 ;;
 16338                           
 16339                           	psect	text92
 16340  003254                     __ptext92:
 16341                           	opt stack 0
 16342  003254                     ___ftge:
 16343                           	opt stack 19
 16344                           
 16345                           ; BSR set to: 0
 16346                           ;incstack = 0
 16347  003254  AE1A               	btfss	___ftge@ff1+2,7,c
 16348  003256  D016               	goto	l1887
 16349  003258  C018  F01E         	movff	___ftge@ff1,??___ftge
 16350  00325C  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
 16351  003260  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
 16352  003264  1E1E               	comf	??___ftge,f,c
 16353  003266  1E1F               	comf	??___ftge+1,f,c
 16354  003268  1E20               	comf	??___ftge+2,f,c
 16355  00326A  2A1E               	incf	??___ftge,f,c
 16356  00326C  0E00               	movlw	0
 16357  00326E  221F               	addwfc	??___ftge+1,f,c
 16358  003270  2220               	addwfc	??___ftge+2,f,c
 16359  003272  0E00               	movlw	0
 16360  003274  241E               	addwf	??___ftge,w,c
 16361  003276  6E18               	movwf	___ftge@ff1,c
 16362  003278  0E00               	movlw	0
 16363  00327A  201F               	addwfc	??___ftge+1,w,c
 16364  00327C  6E19               	movwf	___ftge@ff1+1,c
 16365  00327E  0E80               	movlw	128
 16366  003280  2020               	addwfc	??___ftge+2,w,c
 16367  003282  6E1A               	movwf	___ftge@ff1+2,c
 16368  003284                     l1887:
 16369  003284  AE1D               	btfss	___ftge@ff2+2,7,c
 16370  003286  D016               	goto	l1888
 16371  003288  C01B  F01E         	movff	___ftge@ff2,??___ftge
 16372  00328C  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
 16373  003290  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
 16374  003294  1E1E               	comf	??___ftge,f,c
 16375  003296  1E1F               	comf	??___ftge+1,f,c
 16376  003298  1E20               	comf	??___ftge+2,f,c
 16377  00329A  2A1E               	incf	??___ftge,f,c
 16378  00329C  0E00               	movlw	0
 16379  00329E  221F               	addwfc	??___ftge+1,f,c
 16380  0032A0  2220               	addwfc	??___ftge+2,f,c
 16381  0032A2  0E00               	movlw	0
 16382  0032A4  241E               	addwf	??___ftge,w,c
 16383  0032A6  6E1B               	movwf	___ftge@ff2,c
 16384  0032A8  0E00               	movlw	0
 16385  0032AA  201F               	addwfc	??___ftge+1,w,c
 16386  0032AC  6E1C               	movwf	___ftge@ff2+1,c
 16387  0032AE  0E80               	movlw	128
 16388  0032B0  2020               	addwfc	??___ftge+2,w,c
 16389  0032B2  6E1D               	movwf	___ftge@ff2+2,c
 16390  0032B4                     l1888:
 16391  0032B4  0E00               	movlw	0
 16392  0032B6  1A18               	xorwf	___ftge@ff1,f,c
 16393  0032B8  0E00               	movlw	0
 16394  0032BA  1A19               	xorwf	___ftge@ff1+1,f,c
 16395  0032BC  0E80               	movlw	128
 16396  0032BE  1A1A               	xorwf	___ftge@ff1+2,f,c
 16397  0032C0  0E00               	movlw	0
 16398  0032C2  1A1B               	xorwf	___ftge@ff2,f,c
 16399  0032C4  0E00               	movlw	0
 16400  0032C6  1A1C               	xorwf	___ftge@ff2+1,f,c
 16401  0032C8  0E80               	movlw	128
 16402  0032CA  1A1D               	xorwf	___ftge@ff2+2,f,c
 16403  0032CC  501B               	movf	___ftge@ff2,w,c
 16404  0032CE  5C18               	subwf	___ftge@ff1,w,c
 16405  0032D0  501C               	movf	___ftge@ff2+1,w,c
 16406  0032D2  5819               	subwfb	___ftge@ff1+1,w,c
 16407  0032D4  501D               	movf	___ftge@ff2+2,w,c
 16408  0032D6  581A               	subwfb	___ftge@ff1+2,w,c
 16409  0032D8  B0D8               	btfsc	status,0,c
 16410  0032DA  D002               	goto	l7035
 16411  0032DC  90D8               	bcf	status,0,c
 16412  0032DE  0012               	return	
 16413  0032E0                     l7035:
 16414  0032E0  80D8               	bsf	status,0,c
 16415  0032E2  0012               	return	
 16416  0032E4                     __end_of___ftge:
 16417                           	opt stack 0
 16418                           tosu	equ	0xFFF
 16419                           tosh	equ	0xFFE
 16420                           tosl	equ	0xFFD
 16421                           pclath	equ	0xFFA
 16422                           tblptru	equ	0xFF8
 16423                           tblptrh	equ	0xFF7
 16424                           tblptrl	equ	0xFF6
 16425                           tablat	equ	0xFF5
 16426                           prodh	equ	0xFF4
 16427                           prodl	equ	0xFF3
 16428                           intcon	equ	0xFF2
 16429                           intcon2	equ	0xFF1
 16430                           postinc0	equ	0xFEE
 16431                           plusw0	equ	0xFEB
 16432                           wreg	equ	0xFE8
 16433                           indf1	equ	0xFE7
 16434                           postdec1	equ	0xFE5
 16435                           fsr1h	equ	0xFE2
 16436                           fsr1l	equ	0xFE1
 16437                           indf2	equ	0xFDF
 16438                           postinc2	equ	0xFDE
 16439                           postdec2	equ	0xFDD
 16440                           plusw2	equ	0xFDB
 16441                           fsr2h	equ	0xFDA
 16442                           fsr2l	equ	0xFD9
 16443                           status	equ	0xFD8
 16444                           
 16445 ;; *************** function ___altoft *****************
 16446 ;; Defined at:
 16447 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 16448 ;; Parameters:    Size  Location     Type
 16449 ;;  c               4   39[BANK0 ] long 
 16450 ;; Auto vars:     Size  Location     Type
 16451 ;;  sign            1   47[COMRAM] unsigned char 
 16452 ;;  exp             1   46[COMRAM] unsigned char 
 16453 ;; Return value:  Size  Location     Type
 16454 ;;                  3   39[BANK0 ] float 
 16455 ;; Registers used:
 16456 ;;		wreg, status,2, status,0, cstack
 16457 ;; Tracked objects:
 16458 ;;		On entry : 0/0
 16459 ;;		On exit  : 0/0
 16460 ;;		Unchanged: 0/0
 16461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16462 ;;      Params:         0       4       0       0       0       0       0
 16463 ;;      Locals:         2       0       0       0       0       0       0
 16464 ;;      Temps:          0       4       0       0       0       0       0
 16465 ;;      Totals:         2       8       0       0       0       0       0
 16466 ;;Total ram usage:       10 bytes
 16467 ;; Hardware stack levels used:    1
 16468 ;; Hardware stack levels required when called:    5
 16469 ;; This function calls:
 16470 ;;		___ftpack
 16471 ;; This function is called by:
 16472 ;;		_floor
 16473 ;; This function uses a non-reentrant model
 16474 ;;
 16475                           
 16476                           	psect	text93
 16477  0034EC                     __ptext93:
 16478                           	opt stack 0
 16479  0034EC                     ___altoft:
 16480                           	opt stack 18
 16481                           
 16482                           ;incstack = 0
 16483  0034EC  0E00               	movlw	0
 16484  0034EE  6E30               	movwf	___altoft@sign,c
 16485  0034F0  0E8E               	movlw	142
 16486  0034F2  6E2F               	movwf	___altoft@exp,c
 16487  0034F4  0100               	movlb	0	; () banked
 16488  0034F6  AF8A               	btfss	(___altoft@c+3)& (0+255),7,b
 16489  0034F8  D011               	goto	l1685
 16490                           
 16491                           ; BSR set to: 0
 16492  0034FA  1F8A               	comf	(___altoft@c+3)& (0+255),f,b
 16493  0034FC  1F89               	comf	(___altoft@c+2)& (0+255),f,b
 16494  0034FE  1F88               	comf	(___altoft@c+1)& (0+255),f,b
 16495  003500  6D87               	negf	___altoft@c& (0+255),b
 16496  003502  0E00               	movlw	0
 16497  003504  2388               	addwfc	(___altoft@c+1)& (0+255),f,b
 16498  003506  2389               	addwfc	(___altoft@c+2)& (0+255),f,b
 16499  003508  238A               	addwfc	(___altoft@c+3)& (0+255),f,b
 16500                           
 16501                           ; BSR set to: 0
 16502  00350A  0E01               	movlw	1
 16503  00350C  6E30               	movwf	___altoft@sign,c
 16504                           
 16505                           ; BSR set to: 0
 16506  00350E  D006               	goto	l1685
 16507  003510                     
 16508                           ; BSR set to: 0
 16509                           
 16510                           ; BSR set to: 0
 16511  003510  90D8               	bcf	status,0,c
 16512  003512  338A               	rrcf	(___altoft@c+3)& (0+255),f,b
 16513  003514  3389               	rrcf	(___altoft@c+2)& (0+255),f,b
 16514  003516  3388               	rrcf	(___altoft@c+1)& (0+255),f,b
 16515  003518  3387               	rrcf	___altoft@c& (0+255),f,b
 16516  00351A  2A2F               	incf	___altoft@exp,f,c
 16517  00351C                     l1685:
 16518                           
 16519                           ; BSR set to: 0
 16520                           
 16521                           ; BSR set to: 0
 16522  00351C  0E00               	movlw	0
 16523  00351E  1587               	andwf	___altoft@c& (0+255),w,b
 16524  003520  6F8B               	movwf	??___altoft& (0+255),b
 16525  003522  0E00               	movlw	0
 16526  003524  1588               	andwf	(___altoft@c+1)& (0+255),w,b
 16527  003526  6F8C               	movwf	(??___altoft+1)& (0+255),b
 16528  003528  0E00               	movlw	0
 16529  00352A  1589               	andwf	(___altoft@c+2)& (0+255),w,b
 16530  00352C  6F8D               	movwf	(??___altoft+2)& (0+255),b
 16531  00352E  0EFF               	movlw	255
 16532  003530  158A               	andwf	(___altoft@c+3)& (0+255),w,b
 16533  003532  6F8E               	movwf	(??___altoft+3)& (0+255),b
 16534  003534  518B               	movf	??___altoft& (0+255),w,b
 16535  003536  118C               	iorwf	(??___altoft+1)& (0+255),w,b
 16536  003538  118D               	iorwf	(??___altoft+2)& (0+255),w,b
 16537  00353A  118E               	iorwf	(??___altoft+3)& (0+255),w,b
 16538  00353C  A4D8               	btfss	status,2,c
 16539  00353E  D7E8               	goto	l1686
 16540                           
 16541                           ; BSR set to: 0
 16542                           
 16543                           ; BSR set to: 0
 16544  003540  C087  F018         	movff	___altoft@c,___ftpack@arg
 16545  003544  C088  F019         	movff	___altoft@c+1,___ftpack@arg+1
 16546  003548  C089  F01A         	movff	___altoft@c+2,___ftpack@arg+2
 16547  00354C  C02F  F01B         	movff	___altoft@exp,___ftpack@exp
 16548  003550  C030  F01C         	movff	___altoft@sign,___ftpack@sign
 16549  003554  EC91  F017         	call	___ftpack	;wreg free
 16550  003558  C018  F087         	movff	?___ftpack,?___altoft
 16551  00355C  C019  F088         	movff	?___ftpack+1,?___altoft+1
 16552  003560  C01A  F089         	movff	?___ftpack+2,?___altoft+2
 16553  003564  0012               	return	
 16554  003566                     __end_of___altoft:
 16555                           	opt stack 0
 16556                           tosu	equ	0xFFF
 16557                           tosh	equ	0xFFE
 16558                           tosl	equ	0xFFD
 16559                           pclath	equ	0xFFA
 16560                           tblptru	equ	0xFF8
 16561                           tblptrh	equ	0xFF7
 16562                           tblptrl	equ	0xFF6
 16563                           tablat	equ	0xFF5
 16564                           prodh	equ	0xFF4
 16565                           prodl	equ	0xFF3
 16566                           intcon	equ	0xFF2
 16567                           intcon2	equ	0xFF1
 16568                           postinc0	equ	0xFEE
 16569                           plusw0	equ	0xFEB
 16570                           wreg	equ	0xFE8
 16571                           indf1	equ	0xFE7
 16572                           postdec1	equ	0xFE5
 16573                           fsr1h	equ	0xFE2
 16574                           fsr1l	equ	0xFE1
 16575                           indf2	equ	0xFDF
 16576                           postinc2	equ	0xFDE
 16577                           postdec2	equ	0xFDD
 16578                           plusw2	equ	0xFDB
 16579                           fsr2h	equ	0xFDA
 16580                           fsr2l	equ	0xFD9
 16581                           status	equ	0xFD8
 16582                           
 16583 ;; *************** function _eval_poly *****************
 16584 ;; Defined at:
 16585 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
 16586 ;; Parameters:    Size  Location     Type
 16587 ;;  x               3   36[BANK0 ] float 
 16588 ;;  d               2   39[BANK0 ] PTR const 
 16589 ;;		 -> log@coeff(27), exp@coeff(30), 
 16590 ;;  n               2   41[BANK0 ] int 
 16591 ;; Auto vars:     Size  Location     Type
 16592 ;;  res             3   43[BANK0 ] int 
 16593 ;; Return value:  Size  Location     Type
 16594 ;;                  3   36[BANK0 ] int 
 16595 ;; Registers used:
 16596 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16597 ;; Tracked objects:
 16598 ;;		On entry : 0/0
 16599 ;;		On exit  : 0/0
 16600 ;;		Unchanged: 0/0
 16601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16602 ;;      Params:         0       7       0       0       0       0       0
 16603 ;;      Locals:         0       3       0       0       0       0       0
 16604 ;;      Temps:          2       0       0       0       0       0       0
 16605 ;;      Totals:         2      10       0       0       0       0       0
 16606 ;;Total ram usage:       12 bytes
 16607 ;; Hardware stack levels used:    1
 16608 ;; Hardware stack levels required when called:    6
 16609 ;; This function calls:
 16610 ;;		___ftadd
 16611 ;;		___ftmul
 16612 ;;		___wmul
 16613 ;; This function is called by:
 16614 ;;		_exp
 16615 ;;		_log
 16616 ;; This function uses a non-reentrant model
 16617 ;;
 16618                           
 16619                           	psect	text94
 16620  002B4E                     __ptext94:
 16621                           	opt stack 0
 16622  002B4E                     _eval_poly:
 16623                           	opt stack 18
 16624                           
 16625                           ;incstack = 0
 16626  002B4E  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 16627  002B52  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 16628  002B56  0E00               	movlw	0
 16629  002B58  6E1B               	movwf	___wmul@multiplicand+1,c
 16630  002B5A  0E03               	movlw	3
 16631  002B5C  6E1A               	movwf	___wmul@multiplicand,c
 16632  002B5E  ECBE  F020         	call	___wmul	;wreg free
 16633  002B62  C087  F02F         	movff	eval_poly@d,??_eval_poly
 16634  002B66  C088  F030         	movff	eval_poly@d+1,??_eval_poly+1
 16635  002B6A  5018               	movf	?___wmul,w,c
 16636  002B6C  262F               	addwf	??_eval_poly,f,c
 16637  002B6E  5019               	movf	?___wmul+1,w,c
 16638  002B70  2230               	addwfc	??_eval_poly+1,f,c
 16639  002B72  C02F  FFF6         	movff	??_eval_poly,tblptrl
 16640  002B76  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 16641  002B7A                     	if	0	;tblptru may be non-zero
 16642  002B7A                     	endif
 16643  002B7A                     	if	0	;tblptru may be non-zero
 16644  002B7A                     	endif
 16645  002B7A  0009               	tblrd		*+
 16646  002B7C  CFF5 F08B          	movff	tablat,eval_poly@res
 16647  002B80  0009               	tblrd		*+
 16648  002B82  CFF5 F08C          	movff	tablat,eval_poly@res+1
 16649  002B86  000A               	tblrd		*-
 16650  002B88  CFF5 F08D          	movff	tablat,eval_poly@res+2
 16651  002B8C  D03F               	goto	l2310
 16652  002B8E  C08B  F06C         	movff	eval_poly@res,___ftmul@f2
 16653  002B92  C08C  F06D         	movff	eval_poly@res+1,___ftmul@f2+1
 16654  002B96  C08D  F06E         	movff	eval_poly@res+2,___ftmul@f2+2
 16655  002B9A  C084  F069         	movff	eval_poly@x,___ftmul@f1
 16656  002B9E  C085  F06A         	movff	eval_poly@x+1,___ftmul@f1+1
 16657  002BA2  C086  F06B         	movff	eval_poly@x+2,___ftmul@f1+2
 16658  002BA6  EC86  F012         	call	___ftmul	;wreg free
 16659  002BAA  C069  F078         	movff	?___ftmul,___ftadd@f1
 16660  002BAE  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 16661  002BB2  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 16662  002BB6  0E00               	movlw	0
 16663  002BB8  6E1B               	movwf	___wmul@multiplicand+1,c
 16664  002BBA  0E03               	movlw	3
 16665  002BBC  6E1A               	movwf	___wmul@multiplicand,c
 16666  002BBE  0100               	movlb	0	; () banked
 16667  002BC0  0789               	decf	eval_poly@n& (0+255),f,b
 16668  002BC2  A0D8               	btfss	status,0,c
 16669  002BC4  078A               	decf	(eval_poly@n+1)& (0+255),f,b
 16670  002BC6  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 16671  002BCA  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 16672  002BCE  ECBE  F020         	call	___wmul	;wreg free
 16673  002BD2  C087  F02F         	movff	eval_poly@d,??_eval_poly
 16674  002BD6  C088  F030         	movff	eval_poly@d+1,??_eval_poly+1
 16675  002BDA  5018               	movf	?___wmul,w,c
 16676  002BDC  262F               	addwf	??_eval_poly,f,c
 16677  002BDE  5019               	movf	?___wmul+1,w,c
 16678  002BE0  2230               	addwfc	??_eval_poly+1,f,c
 16679  002BE2  C02F  FFF6         	movff	??_eval_poly,tblptrl
 16680  002BE6  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 16681  002BEA                     	if	0	;tblptru may be non-zero
 16682  002BEA                     	endif
 16683  002BEA                     	if	0	;tblptru may be non-zero
 16684  002BEA                     	endif
 16685  002BEA  0009               	tblrd		*+
 16686  002BEC  CFF5 F07B          	movff	tablat,___ftadd@f2
 16687  002BF0  0009               	tblrd		*+
 16688  002BF2  CFF5 F07C          	movff	tablat,___ftadd@f2+1
 16689  002BF6  000A               	tblrd		*-
 16690  002BF8  CFF5 F07D          	movff	tablat,___ftadd@f2+2
 16691  002BFC  ECBF  F00C         	call	___ftadd	;wreg free
 16692  002C00  C078  F08B         	movff	?___ftadd,eval_poly@res
 16693  002C04  C079  F08C         	movff	?___ftadd+1,eval_poly@res+1
 16694  002C08  C07A  F08D         	movff	?___ftadd+2,eval_poly@res+2
 16695  002C0C                     l2310:
 16696  002C0C  0100               	movlb	0	; () banked
 16697  002C0E  5189               	movf	eval_poly@n& (0+255),w,b
 16698  002C10  118A               	iorwf	(eval_poly@n+1)& (0+255),w,b
 16699  002C12  A4D8               	btfss	status,2,c
 16700  002C14  D7BC               	goto	l2311
 16701                           
 16702                           ; BSR set to: 0
 16703  002C16  C08B  F084         	movff	eval_poly@res,?_eval_poly
 16704  002C1A  C08C  F085         	movff	eval_poly@res+1,?_eval_poly+1
 16705  002C1E  C08D  F086         	movff	eval_poly@res+2,?_eval_poly+2
 16706                           
 16707                           ; BSR set to: 0
 16708  002C22  0012               	return		;funcret
 16709  002C24                     __end_of_eval_poly:
 16710                           	opt stack 0
 16711                           tosu	equ	0xFFF
 16712                           tosh	equ	0xFFE
 16713                           tosl	equ	0xFFD
 16714                           pclath	equ	0xFFA
 16715                           tblptru	equ	0xFF8
 16716                           tblptrh	equ	0xFF7
 16717                           tblptrl	equ	0xFF6
 16718                           tablat	equ	0xFF5
 16719                           prodh	equ	0xFF4
 16720                           prodl	equ	0xFF3
 16721                           intcon	equ	0xFF2
 16722                           intcon2	equ	0xFF1
 16723                           postinc0	equ	0xFEE
 16724                           plusw0	equ	0xFEB
 16725                           wreg	equ	0xFE8
 16726                           indf1	equ	0xFE7
 16727                           postdec1	equ	0xFE5
 16728                           fsr1h	equ	0xFE2
 16729                           fsr1l	equ	0xFE1
 16730                           indf2	equ	0xFDF
 16731                           postinc2	equ	0xFDE
 16732                           postdec2	equ	0xFDD
 16733                           plusw2	equ	0xFDB
 16734                           fsr2h	equ	0xFDA
 16735                           fsr2l	equ	0xFD9
 16736                           status	equ	0xFD8
 16737                           
 16738 ;; *************** function ___wmul *****************
 16739 ;; Defined at:
 16740 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 16741 ;; Parameters:    Size  Location     Type
 16742 ;;  multiplier      2   23[COMRAM] unsigned int 
 16743 ;;  multiplicand    2   25[COMRAM] unsigned int 
 16744 ;; Auto vars:     Size  Location     Type
 16745 ;;  product         2   27[COMRAM] unsigned int 
 16746 ;; Return value:  Size  Location     Type
 16747 ;;                  2   23[COMRAM] unsigned int 
 16748 ;; Registers used:
 16749 ;;		wreg, status,2, status,0, prodl, prodh
 16750 ;; Tracked objects:
 16751 ;;		On entry : 0/0
 16752 ;;		On exit  : 0/0
 16753 ;;		Unchanged: 0/0
 16754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16755 ;;      Params:         4       0       0       0       0       0       0
 16756 ;;      Locals:         2       0       0       0       0       0       0
 16757 ;;      Temps:          0       0       0       0       0       0       0
 16758 ;;      Totals:         6       0       0       0       0       0       0
 16759 ;;Total ram usage:        6 bytes
 16760 ;; Hardware stack levels used:    1
 16761 ;; Hardware stack levels required when called:    4
 16762 ;; This function calls:
 16763 ;;		Nothing
 16764 ;; This function is called by:
 16765 ;;		_GetMcuFwVersion
 16766 ;;		_eval_poly
 16767 ;; This function uses a non-reentrant model
 16768 ;;
 16769                           
 16770                           	psect	text95
 16771  00417C                     __ptext95:
 16772                           	opt stack 0
 16773  00417C                     ___wmul:
 16774                           	opt stack 19
 16775                           
 16776                           ; BSR set to: 0
 16777                           ;incstack = 0
 16778  00417C  5018               	movf	___wmul@multiplier,w,c
 16779  00417E  021A               	mulwf	___wmul@multiplicand,c
 16780  004180  CFF3 F01C          	movff	prodl,___wmul@product
 16781  004184  CFF4 F01D          	movff	prodh,___wmul@product+1
 16782  004188  5018               	movf	___wmul@multiplier,w,c
 16783  00418A  021B               	mulwf	___wmul@multiplicand+1,c
 16784  00418C  50F3               	movf	prodl,w,c
 16785  00418E  261D               	addwf	___wmul@product+1,f,c
 16786  004190  5019               	movf	___wmul@multiplier+1,w,c
 16787  004192  021A               	mulwf	___wmul@multiplicand,c
 16788  004194  50F3               	movf	prodl,w,c
 16789  004196  261D               	addwf	___wmul@product+1,f,c
 16790  004198  C01C  F018         	movff	___wmul@product,?___wmul
 16791  00419C  C01D  F019         	movff	___wmul@product+1,?___wmul+1
 16792  0041A0  0012               	return	
 16793  0041A2                     __end_of___wmul:
 16794                           	opt stack 0
 16795                           tosu	equ	0xFFF
 16796                           tosh	equ	0xFFE
 16797                           tosl	equ	0xFFD
 16798                           pclath	equ	0xFFA
 16799                           tblptru	equ	0xFF8
 16800                           tblptrh	equ	0xFF7
 16801                           tblptrl	equ	0xFF6
 16802                           tablat	equ	0xFF5
 16803                           prodh	equ	0xFF4
 16804                           prodl	equ	0xFF3
 16805                           intcon	equ	0xFF2
 16806                           intcon2	equ	0xFF1
 16807                           postinc0	equ	0xFEE
 16808                           plusw0	equ	0xFEB
 16809                           wreg	equ	0xFE8
 16810                           indf1	equ	0xFE7
 16811                           postdec1	equ	0xFE5
 16812                           fsr1h	equ	0xFE2
 16813                           fsr1l	equ	0xFE1
 16814                           indf2	equ	0xFDF
 16815                           postinc2	equ	0xFDE
 16816                           postdec2	equ	0xFDD
 16817                           plusw2	equ	0xFDB
 16818                           fsr2h	equ	0xFDA
 16819                           fsr2l	equ	0xFD9
 16820                           status	equ	0xFD8
 16821                           
 16822 ;; *************** function ___ftmul *****************
 16823 ;; Defined at:
 16824 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 16825 ;; Parameters:    Size  Location     Type
 16826 ;;  f1              3    9[BANK0 ] float 
 16827 ;;  f2              3   12[BANK0 ] float 
 16828 ;; Auto vars:     Size  Location     Type
 16829 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
 16830 ;;  sign            1   23[BANK0 ] unsigned char 
 16831 ;;  cntr            1   22[BANK0 ] unsigned char 
 16832 ;;  exp             1   18[BANK0 ] unsigned char 
 16833 ;; Return value:  Size  Location     Type
 16834 ;;                  3    9[BANK0 ] float 
 16835 ;; Registers used:
 16836 ;;		wreg, status,2, status,0, cstack
 16837 ;; Tracked objects:
 16838 ;;		On entry : 0/0
 16839 ;;		On exit  : 0/0
 16840 ;;		Unchanged: 0/0
 16841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16842 ;;      Params:         0       6       0       0       0       0       0
 16843 ;;      Locals:         0       6       0       0       0       0       0
 16844 ;;      Temps:          0       3       0       0       0       0       0
 16845 ;;      Totals:         0      15       0       0       0       0       0
 16846 ;;Total ram usage:       15 bytes
 16847 ;; Hardware stack levels used:    1
 16848 ;; Hardware stack levels required when called:    5
 16849 ;; This function calls:
 16850 ;;		___ftpack
 16851 ;; This function is called by:
 16852 ;;		_AdcConvert
 16853 ;;		_CheckFlashPrecentage
 16854 ;;		_pow
 16855 ;;		_exp
 16856 ;;		_log
 16857 ;;		_eval_poly
 16858 ;; This function uses a non-reentrant model
 16859 ;;
 16860                           
 16861                           	psect	text96
 16862  00250C                     __ptext96:
 16863                           	opt stack 0
 16864  00250C                     ___ftmul:
 16865                           	opt stack 18
 16866                           
 16867                           ;incstack = 0
 16868  00250C  C06B  F06F         	movff	___ftmul@f1+2,??___ftmul
 16869  002510  0100               	movlb	0	; () banked
 16870  002512  6B70               	clrf	(??___ftmul+1)& (0+255),b
 16871  002514  6B71               	clrf	(??___ftmul+2)& (0+255),b
 16872  002516  356A               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 16873  002518  376F               	rlcf	??___ftmul& (0+255),f,b
 16874  00251A  E301               	bnc	u6741
 16875  00251C  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 16876  00251E                     u6741:
 16877  00251E  516F               	movf	??___ftmul& (0+255),w,b
 16878  002520  6F72               	movwf	___ftmul@exp& (0+255),b
 16879  002522  5172               	movf	___ftmul@exp& (0+255),w,b
 16880  002524  A4D8               	btfss	status,2,c
 16881  002526  D007               	goto	l1894
 16882                           
 16883                           ; BSR set to: 0
 16884  002528  0E00               	movlw	0
 16885  00252A  6F69               	movwf	?___ftmul& (0+255),b
 16886  00252C  0E00               	movlw	0
 16887  00252E  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 16888  002530  0E00               	movlw	0
 16889  002532  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 16890                           
 16891                           ; BSR set to: 0
 16892  002534  0012               	return	
 16893  002536                     l1894:
 16894                           
 16895                           ; BSR set to: 0
 16896                           
 16897                           ; BSR set to: 0
 16898  002536  C06E  F06F         	movff	___ftmul@f2+2,??___ftmul
 16899  00253A  6B70               	clrf	(??___ftmul+1)& (0+255),b
 16900  00253C  6B71               	clrf	(??___ftmul+2)& (0+255),b
 16901  00253E  356D               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 16902  002540  376F               	rlcf	??___ftmul& (0+255),f,b
 16903  002542  E301               	bnc	u6761
 16904  002544  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 16905  002546                     u6761:
 16906  002546  516F               	movf	??___ftmul& (0+255),w,b
 16907  002548  6F77               	movwf	___ftmul@sign& (0+255),b
 16908  00254A  5177               	movf	___ftmul@sign& (0+255),w,b
 16909  00254C  A4D8               	btfss	status,2,c
 16910  00254E  D007               	goto	l1896
 16911                           
 16912                           ; BSR set to: 0
 16913  002550  0E00               	movlw	0
 16914  002552  6F69               	movwf	?___ftmul& (0+255),b
 16915  002554  0E00               	movlw	0
 16916  002556  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 16917  002558  0E00               	movlw	0
 16918  00255A  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 16919                           
 16920                           ; BSR set to: 0
 16921  00255C  0012               	return	
 16922  00255E                     l1896:
 16923                           
 16924                           ; BSR set to: 0
 16925                           
 16926                           ; BSR set to: 0
 16927  00255E  5177               	movf	___ftmul@sign& (0+255),w,b
 16928  002560  0F7B               	addlw	123
 16929  002562  2772               	addwf	___ftmul@exp& (0+255),f,b
 16930                           
 16931                           ; BSR set to: 0
 16932  002564  C06B  F077         	movff	___ftmul@f1+2,___ftmul@sign
 16933  002568  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 16934  00256A  1B77               	xorwf	___ftmul@sign& (0+255),f,b
 16935  00256C  0E80               	movlw	128
 16936  00256E  1777               	andwf	___ftmul@sign& (0+255),f,b
 16937                           
 16938                           ; BSR set to: 0
 16939  002570  8F6A               	bsf	(___ftmul@f1+1)& (0+255),7,b
 16940                           
 16941                           ; BSR set to: 0
 16942  002572  8F6D               	bsf	(___ftmul@f2+1)& (0+255),7,b
 16943                           
 16944                           ; BSR set to: 0
 16945  002574  0EFF               	movlw	255
 16946  002576  176C               	andwf	___ftmul@f2& (0+255),f,b
 16947  002578  0EFF               	movlw	255
 16948  00257A  176D               	andwf	(___ftmul@f2+1)& (0+255),f,b
 16949  00257C  0E00               	movlw	0
 16950  00257E  176E               	andwf	(___ftmul@f2+2)& (0+255),f,b
 16951                           
 16952                           ; BSR set to: 0
 16953  002580  0E00               	movlw	0
 16954  002582  6F73               	movwf	___ftmul@f3_as_product& (0+255),b
 16955  002584  0E00               	movlw	0
 16956  002586  6F74               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 16957  002588  0E00               	movlw	0
 16958  00258A  6F75               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 16959                           
 16960                           ; BSR set to: 0
 16961  00258C  0E07               	movlw	7
 16962  00258E  6F76               	movwf	___ftmul@cntr& (0+255),b
 16963  002590                     
 16964                           ; BSR set to: 0
 16965                           
 16966                           ; BSR set to: 0
 16967  002590  A169               	btfss	___ftmul@f1& (0+255),0,b
 16968  002592  D006               	goto	l1898
 16969                           
 16970                           ; BSR set to: 0
 16971  002594  516C               	movf	___ftmul@f2& (0+255),w,b
 16972  002596  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 16973  002598  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 16974  00259A  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 16975  00259C  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 16976  00259E  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 16977  0025A0                     l1898:
 16978                           
 16979                           ; BSR set to: 0
 16980                           
 16981                           ; BSR set to: 0
 16982  0025A0  90D8               	bcf	status,0,c
 16983  0025A2  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 16984  0025A4  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 16985  0025A6  3369               	rrcf	___ftmul@f1& (0+255),f,b
 16986  0025A8  90D8               	bcf	status,0,c
 16987  0025AA  376C               	rlcf	___ftmul@f2& (0+255),f,b
 16988  0025AC  376D               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 16989  0025AE  376E               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 16990                           
 16991                           ; BSR set to: 0
 16992  0025B0  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 16993  0025B2  D7EE               	goto	l1897
 16994                           
 16995                           ; BSR set to: 0
 16996                           
 16997                           ; BSR set to: 0
 16998  0025B4  0E09               	movlw	9
 16999  0025B6  6F76               	movwf	___ftmul@cntr& (0+255),b
 17000  0025B8                     
 17001                           ; BSR set to: 0
 17002                           
 17003                           ; BSR set to: 0
 17004  0025B8  A169               	btfss	___ftmul@f1& (0+255),0,b
 17005  0025BA  D006               	goto	l1901
 17006                           
 17007                           ; BSR set to: 0
 17008  0025BC  516C               	movf	___ftmul@f2& (0+255),w,b
 17009  0025BE  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 17010  0025C0  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 17011  0025C2  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 17012  0025C4  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 17013  0025C6  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 17014  0025C8                     l1901:
 17015                           
 17016                           ; BSR set to: 0
 17017                           
 17018                           ; BSR set to: 0
 17019  0025C8  90D8               	bcf	status,0,c
 17020  0025CA  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 17021  0025CC  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 17022  0025CE  3369               	rrcf	___ftmul@f1& (0+255),f,b
 17023  0025D0  90D8               	bcf	status,0,c
 17024  0025D2  3375               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 17025  0025D4  3374               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 17026  0025D6  3373               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 17027                           
 17028                           ; BSR set to: 0
 17029  0025D8  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 17030  0025DA  D7EE               	goto	l1900
 17031                           
 17032                           ; BSR set to: 0
 17033                           
 17034                           ; BSR set to: 0
 17035  0025DC  C073  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
 17036  0025E0  C074  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 17037  0025E4  C075  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 17038  0025E8  C072  F01B         	movff	___ftmul@exp,___ftpack@exp
 17039  0025EC  C077  F01C         	movff	___ftmul@sign,___ftpack@sign
 17040  0025F0  EC91  F017         	call	___ftpack	;wreg free
 17041  0025F4  C018  F069         	movff	?___ftpack,?___ftmul
 17042  0025F8  C019  F06A         	movff	?___ftpack+1,?___ftmul+1
 17043  0025FC  C01A  F06B         	movff	?___ftpack+2,?___ftmul+2
 17044  002600  0012               	return	
 17045  002602                     __end_of___ftmul:
 17046                           	opt stack 0
 17047                           tosu	equ	0xFFF
 17048                           tosh	equ	0xFFE
 17049                           tosl	equ	0xFFD
 17050                           pclath	equ	0xFFA
 17051                           tblptru	equ	0xFF8
 17052                           tblptrh	equ	0xFF7
 17053                           tblptrl	equ	0xFF6
 17054                           tablat	equ	0xFF5
 17055                           prodh	equ	0xFF4
 17056                           prodl	equ	0xFF3
 17057                           intcon	equ	0xFF2
 17058                           intcon2	equ	0xFF1
 17059                           postinc0	equ	0xFEE
 17060                           plusw0	equ	0xFEB
 17061                           wreg	equ	0xFE8
 17062                           indf1	equ	0xFE7
 17063                           postdec1	equ	0xFE5
 17064                           fsr1h	equ	0xFE2
 17065                           fsr1l	equ	0xFE1
 17066                           indf2	equ	0xFDF
 17067                           postinc2	equ	0xFDE
 17068                           postdec2	equ	0xFDD
 17069                           plusw2	equ	0xFDB
 17070                           fsr2h	equ	0xFDA
 17071                           fsr2l	equ	0xFD9
 17072                           status	equ	0xFD8
 17073                           
 17074 ;; *************** function ___ftsub *****************
 17075 ;; Defined at:
 17076 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
 17077 ;; Parameters:    Size  Location     Type
 17078 ;;  f1              3   36[BANK0 ] float 
 17079 ;;  f2              3   39[BANK0 ] float 
 17080 ;; Auto vars:     Size  Location     Type
 17081 ;;		None
 17082 ;; Return value:  Size  Location     Type
 17083 ;;                  3   36[BANK0 ] float 
 17084 ;; Registers used:
 17085 ;;		wreg, status,2, status,0, cstack
 17086 ;; Tracked objects:
 17087 ;;		On entry : 0/0
 17088 ;;		On exit  : 0/0
 17089 ;;		Unchanged: 0/0
 17090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17091 ;;      Params:         0       6       0       0       0       0       0
 17092 ;;      Locals:         0       0       0       0       0       0       0
 17093 ;;      Temps:          0       0       0       0       0       0       0
 17094 ;;      Totals:         0       6       0       0       0       0       0
 17095 ;;Total ram usage:        6 bytes
 17096 ;; Hardware stack levels used:    1
 17097 ;; Hardware stack levels required when called:    6
 17098 ;; This function calls:
 17099 ;;		___ftadd
 17100 ;; This function is called by:
 17101 ;;		_exp
 17102 ;; This function uses a non-reentrant model
 17103 ;;
 17104                           
 17105                           	psect	text97
 17106  003C86                     __ptext97:
 17107                           	opt stack 0
 17108  003C86                     ___ftsub:
 17109                           	opt stack 18
 17110                           
 17111                           ;incstack = 0
 17112  003C86  0100               	movlb	0	; () banked
 17113  003C88  5187               	movf	___ftsub@f2& (0+255),w,b
 17114  003C8A  1188               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 17115  003C8C  1189               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 17116  003C8E  B4D8               	btfsc	status,2,c
 17117  003C90  D006               	goto	l1911
 17118                           
 17119                           ; BSR set to: 0
 17120  003C92  0E00               	movlw	0
 17121  003C94  1B87               	xorwf	___ftsub@f2& (0+255),f,b
 17122  003C96  0E00               	movlw	0
 17123  003C98  1B88               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 17124  003C9A  0E80               	movlw	128
 17125  003C9C  1B89               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 17126  003C9E                     l1911:
 17127                           
 17128                           ; BSR set to: 0
 17129                           
 17130                           ; BSR set to: 0
 17131  003C9E  C084  F078         	movff	___ftsub@f1,___ftadd@f1
 17132  003CA2  C085  F079         	movff	___ftsub@f1+1,___ftadd@f1+1
 17133  003CA6  C086  F07A         	movff	___ftsub@f1+2,___ftadd@f1+2
 17134  003CAA  C087  F07B         	movff	___ftsub@f2,___ftadd@f2
 17135  003CAE  C088  F07C         	movff	___ftsub@f2+1,___ftadd@f2+1
 17136  003CB2  C089  F07D         	movff	___ftsub@f2+2,___ftadd@f2+2
 17137  003CB6  ECBF  F00C         	call	___ftadd	;wreg free
 17138  003CBA  C078  F084         	movff	?___ftadd,?___ftsub
 17139  003CBE  C079  F085         	movff	?___ftadd+1,?___ftsub+1
 17140  003CC2  C07A  F086         	movff	?___ftadd+2,?___ftsub+2
 17141  003CC6  0012               	return	
 17142  003CC8                     __end_of___ftsub:
 17143                           	opt stack 0
 17144                           tosu	equ	0xFFF
 17145                           tosh	equ	0xFFE
 17146                           tosl	equ	0xFFD
 17147                           pclath	equ	0xFFA
 17148                           tblptru	equ	0xFF8
 17149                           tblptrh	equ	0xFF7
 17150                           tblptrl	equ	0xFF6
 17151                           tablat	equ	0xFF5
 17152                           prodh	equ	0xFF4
 17153                           prodl	equ	0xFF3
 17154                           intcon	equ	0xFF2
 17155                           intcon2	equ	0xFF1
 17156                           postinc0	equ	0xFEE
 17157                           plusw0	equ	0xFEB
 17158                           wreg	equ	0xFE8
 17159                           indf1	equ	0xFE7
 17160                           postdec1	equ	0xFE5
 17161                           fsr1h	equ	0xFE2
 17162                           fsr1l	equ	0xFE1
 17163                           indf2	equ	0xFDF
 17164                           postinc2	equ	0xFDE
 17165                           postdec2	equ	0xFDD
 17166                           plusw2	equ	0xFDB
 17167                           fsr2h	equ	0xFDA
 17168                           fsr2l	equ	0xFD9
 17169                           status	equ	0xFD8
 17170                           
 17171 ;; *************** function ___ftadd *****************
 17172 ;; Defined at:
 17173 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 17174 ;; Parameters:    Size  Location     Type
 17175 ;;  f1              3   24[BANK0 ] float 
 17176 ;;  f2              3   27[BANK0 ] float 
 17177 ;; Auto vars:     Size  Location     Type
 17178 ;;  exp1            1   35[BANK0 ] unsigned char 
 17179 ;;  exp2            1   34[BANK0 ] unsigned char 
 17180 ;;  sign            1   33[BANK0 ] unsigned char 
 17181 ;; Return value:  Size  Location     Type
 17182 ;;                  3   24[BANK0 ] float 
 17183 ;; Registers used:
 17184 ;;		wreg, status,2, status,0, cstack
 17185 ;; Tracked objects:
 17186 ;;		On entry : 0/0
 17187 ;;		On exit  : 0/0
 17188 ;;		Unchanged: 0/0
 17189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17190 ;;      Params:         0       6       0       0       0       0       0
 17191 ;;      Locals:         0       3       0       0       0       0       0
 17192 ;;      Temps:          0       3       0       0       0       0       0
 17193 ;;      Totals:         0      12       0       0       0       0       0
 17194 ;;Total ram usage:       12 bytes
 17195 ;; Hardware stack levels used:    1
 17196 ;; Hardware stack levels required when called:    5
 17197 ;; This function calls:
 17198 ;;		___ftpack
 17199 ;; This function is called by:
 17200 ;;		___ftsub
 17201 ;;		_floor
 17202 ;;		_log
 17203 ;;		_eval_poly
 17204 ;; This function uses a non-reentrant model
 17205 ;;
 17206                           
 17207                           	psect	text98
 17208  00197E                     __ptext98:
 17209                           	opt stack 0
 17210  00197E                     ___ftadd:
 17211                           	opt stack 18
 17212                           
 17213                           ;incstack = 0
 17214  00197E  C07A  F07E         	movff	___ftadd@f1+2,??___ftadd
 17215  001982  0100               	movlb	0	; () banked
 17216  001984  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 17217  001986  6B80               	clrf	(??___ftadd+2)& (0+255),b
 17218  001988  3579               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 17219  00198A  377E               	rlcf	??___ftadd& (0+255),f,b
 17220  00198C  E301               	bnc	u6531
 17221  00198E  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 17222  001990                     u6531:
 17223  001990  517E               	movf	??___ftadd& (0+255),w,b
 17224  001992  6F83               	movwf	___ftadd@exp1& (0+255),b
 17225  001994  C07D  F07E         	movff	___ftadd@f2+2,??___ftadd
 17226  001998  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 17227  00199A  6B80               	clrf	(??___ftadd+2)& (0+255),b
 17228  00199C  357C               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 17229  00199E  377E               	rlcf	??___ftadd& (0+255),f,b
 17230  0019A0  E301               	bnc	u6541
 17231  0019A2  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 17232  0019A4                     u6541:
 17233  0019A4  517E               	movf	??___ftadd& (0+255),w,b
 17234  0019A6  6F82               	movwf	___ftadd@exp2& (0+255),b
 17235                           
 17236                           ; BSR set to: 0
 17237  0019A8  5183               	movf	___ftadd@exp1& (0+255),w,b
 17238  0019AA  B4D8               	btfsc	status,2,c
 17239  0019AC  D00B               	goto	u6570
 17240                           
 17241                           ; BSR set to: 0
 17242  0019AE  5182               	movf	___ftadd@exp2& (0+255),w,b
 17243  0019B0  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 17244  0019B2  B0D8               	btfsc	status,0,c
 17245  0019B4  D00E               	goto	l1846
 17246                           
 17247                           ; BSR set to: 0
 17248  0019B6  5183               	movf	___ftadd@exp1& (0+255),w,b
 17249  0019B8  0800               	sublw	0
 17250  0019BA  2582               	addwf	___ftadd@exp2& (0+255),w,b
 17251  0019BC  6F7E               	movwf	??___ftadd& (0+255),b
 17252  0019BE  0E18               	movlw	24
 17253  0019C0  657E               	cpfsgt	??___ftadd& (0+255),b
 17254  0019C2  D007               	goto	l1846
 17255  0019C4                     u6570:
 17256                           
 17257                           ; BSR set to: 0
 17258  0019C4  C07B  F078         	movff	___ftadd@f2,?___ftadd
 17259  0019C8  C07C  F079         	movff	___ftadd@f2+1,?___ftadd+1
 17260  0019CC  C07D  F07A         	movff	___ftadd@f2+2,?___ftadd+2
 17261  0019D0  0012               	return	
 17262  0019D2                     l1846:
 17263                           
 17264                           ; BSR set to: 0
 17265                           
 17266                           ; BSR set to: 0
 17267  0019D2  5182               	movf	___ftadd@exp2& (0+255),w,b
 17268  0019D4  B4D8               	btfsc	status,2,c
 17269  0019D6  D00B               	goto	u6600
 17270                           
 17271                           ; BSR set to: 0
 17272  0019D8  5183               	movf	___ftadd@exp1& (0+255),w,b
 17273  0019DA  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 17274  0019DC  B0D8               	btfsc	status,0,c
 17275  0019DE  D00E               	goto	l1850
 17276                           
 17277                           ; BSR set to: 0
 17278  0019E0  5182               	movf	___ftadd@exp2& (0+255),w,b
 17279  0019E2  0800               	sublw	0
 17280  0019E4  2583               	addwf	___ftadd@exp1& (0+255),w,b
 17281  0019E6  6F7E               	movwf	??___ftadd& (0+255),b
 17282  0019E8  0E18               	movlw	24
 17283  0019EA  657E               	cpfsgt	??___ftadd& (0+255),b
 17284  0019EC  D007               	goto	l1850
 17285  0019EE                     u6600:
 17286                           
 17287                           ; BSR set to: 0
 17288  0019EE  C078  F078         	movff	___ftadd@f1,?___ftadd
 17289  0019F2  C079  F079         	movff	___ftadd@f1+1,?___ftadd+1
 17290  0019F6  C07A  F07A         	movff	___ftadd@f1+2,?___ftadd+2
 17291  0019FA  0012               	return	
 17292  0019FC                     l1850:
 17293                           
 17294                           ; BSR set to: 0
 17295                           
 17296                           ; BSR set to: 0
 17297  0019FC  0E06               	movlw	6
 17298  0019FE  6F81               	movwf	___ftadd@sign& (0+255),b
 17299                           
 17300                           ; BSR set to: 0
 17301  001A00  BF7A               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 17302                           
 17303                           ; BSR set to: 0
 17304  001A02  8F81               	bsf	___ftadd@sign& (0+255),7,b
 17305                           
 17306                           ; BSR set to: 0
 17307                           
 17308                           ; BSR set to: 0
 17309  001A04  BF7D               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 17310                           
 17311                           ; BSR set to: 0
 17312  001A06  8D81               	bsf	___ftadd@sign& (0+255),6,b
 17313                           
 17314                           ; BSR set to: 0
 17315  001A08  8F79               	bsf	(___ftadd@f1+1)& (0+255),7,b
 17316                           
 17317                           ; BSR set to: 0
 17318  001A0A  0EFF               	movlw	255
 17319  001A0C  1778               	andwf	___ftadd@f1& (0+255),f,b
 17320  001A0E  0EFF               	movlw	255
 17321  001A10  1779               	andwf	(___ftadd@f1+1)& (0+255),f,b
 17322  001A12  0E00               	movlw	0
 17323  001A14  177A               	andwf	(___ftadd@f1+2)& (0+255),f,b
 17324  001A16  8F7C               	bsf	(___ftadd@f2+1)& (0+255),7,b
 17325                           
 17326                           ; BSR set to: 0
 17327  001A18  0EFF               	movlw	255
 17328  001A1A  177B               	andwf	___ftadd@f2& (0+255),f,b
 17329  001A1C  0EFF               	movlw	255
 17330  001A1E  177C               	andwf	(___ftadd@f2+1)& (0+255),f,b
 17331  001A20  0E00               	movlw	0
 17332  001A22  177D               	andwf	(___ftadd@f2+2)& (0+255),f,b
 17333                           
 17334                           ; BSR set to: 0
 17335  001A24  5182               	movf	___ftadd@exp2& (0+255),w,b
 17336  001A26  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 17337  001A28  B0D8               	btfsc	status,0,c
 17338  001A2A  D01B               	goto	l1855
 17339  001A2C                     u6630:
 17340                           
 17341                           ; BSR set to: 0
 17342                           
 17343                           ; BSR set to: 0
 17344  001A2C  90D8               	bcf	status,0,c
 17345  001A2E  377B               	rlcf	___ftadd@f2& (0+255),f,b
 17346  001A30  377C               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 17347  001A32  377D               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 17348  001A34  0782               	decf	___ftadd@exp2& (0+255),f,b
 17349                           
 17350                           ; BSR set to: 0
 17351  001A36  5183               	movf	___ftadd@exp1& (0+255),w,b
 17352  001A38  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 17353  001A3A  B4D8               	btfsc	status,2,c
 17354  001A3C  D00D               	goto	l1860
 17355                           
 17356                           ; BSR set to: 0
 17357  001A3E  0781               	decf	___ftadd@sign& (0+255),f,b
 17358  001A40  C081  F07E         	movff	___ftadd@sign,??___ftadd
 17359  001A44  0E07               	movlw	7
 17360  001A46  177E               	andwf	??___ftadd& (0+255),f,b
 17361  001A48  B4D8               	btfsc	status,2,c
 17362  001A4A  D006               	goto	l1860
 17363  001A4C  D7EF               	goto	u6630
 17364  001A4E                     
 17365                           ; BSR set to: 0
 17366                           
 17367                           ; BSR set to: 0
 17368  001A4E  90D8               	bcf	status,0,c
 17369  001A50  337A               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 17370  001A52  3379               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 17371  001A54  3378               	rrcf	___ftadd@f1& (0+255),f,b
 17372  001A56  2B83               	incf	___ftadd@exp1& (0+255),f,b
 17373  001A58                     l1860:
 17374                           
 17375                           ; BSR set to: 0
 17376                           
 17377                           ; BSR set to: 0
 17378  001A58  5182               	movf	___ftadd@exp2& (0+255),w,b
 17379  001A5A  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 17380  001A5C  B4D8               	btfsc	status,2,c
 17381  001A5E  D01F               	goto	u6700
 17382  001A60  D7F6               	goto	l1861
 17383  001A62                     l1855:
 17384                           
 17385                           ; BSR set to: 0
 17386                           
 17387                           ; BSR set to: 0
 17388  001A62  5183               	movf	___ftadd@exp1& (0+255),w,b
 17389  001A64  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 17390  001A66  B0D8               	btfsc	status,0,c
 17391  001A68  D01A               	goto	u6700
 17392  001A6A                     u6670:
 17393                           
 17394                           ; BSR set to: 0
 17395                           
 17396                           ; BSR set to: 0
 17397  001A6A  90D8               	bcf	status,0,c
 17398  001A6C  3778               	rlcf	___ftadd@f1& (0+255),f,b
 17399  001A6E  3779               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 17400  001A70  377A               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 17401  001A72  0783               	decf	___ftadd@exp1& (0+255),f,b
 17402                           
 17403                           ; BSR set to: 0
 17404  001A74  5183               	movf	___ftadd@exp1& (0+255),w,b
 17405  001A76  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 17406  001A78  B4D8               	btfsc	status,2,c
 17407  001A7A  D00D               	goto	l1869
 17408                           
 17409                           ; BSR set to: 0
 17410  001A7C  0781               	decf	___ftadd@sign& (0+255),f,b
 17411  001A7E  C081  F07E         	movff	___ftadd@sign,??___ftadd
 17412  001A82  0E07               	movlw	7
 17413  001A84  177E               	andwf	??___ftadd& (0+255),f,b
 17414  001A86  B4D8               	btfsc	status,2,c
 17415  001A88  D006               	goto	l1869
 17416  001A8A  D7EF               	goto	u6670
 17417  001A8C                     
 17418                           ; BSR set to: 0
 17419                           
 17420                           ; BSR set to: 0
 17421  001A8C  90D8               	bcf	status,0,c
 17422  001A8E  337D               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 17423  001A90  337C               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 17424  001A92  337B               	rrcf	___ftadd@f2& (0+255),f,b
 17425  001A94  2B82               	incf	___ftadd@exp2& (0+255),f,b
 17426  001A96                     l1869:
 17427                           
 17428                           ; BSR set to: 0
 17429                           
 17430                           ; BSR set to: 0
 17431  001A96  5182               	movf	___ftadd@exp2& (0+255),w,b
 17432  001A98  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 17433  001A9A  A4D8               	btfss	status,2,c
 17434  001A9C  D7F7               	goto	l1870
 17435  001A9E                     u6700:
 17436                           
 17437                           ; BSR set to: 0
 17438                           
 17439                           ; BSR set to: 0
 17440                           
 17441                           ; BSR set to: 0
 17442  001A9E  AF81               	btfss	___ftadd@sign& (0+255),7,b
 17443  001AA0  D00C               	goto	l1872
 17444                           
 17445                           ; BSR set to: 0
 17446  001AA2  0EFF               	movlw	255
 17447  001AA4  1B78               	xorwf	___ftadd@f1& (0+255),f,b
 17448  001AA6  0EFF               	movlw	255
 17449  001AA8  1B79               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 17450  001AAA  0EFF               	movlw	255
 17451  001AAC  1B7A               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 17452  001AAE  0E01               	movlw	1
 17453  001AB0  2778               	addwf	___ftadd@f1& (0+255),f,b
 17454  001AB2  0E00               	movlw	0
 17455  001AB4  2379               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 17456  001AB6  0E00               	movlw	0
 17457  001AB8  237A               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 17458  001ABA                     l1872:
 17459                           
 17460                           ; BSR set to: 0
 17461  001ABA  AD81               	btfss	___ftadd@sign& (0+255),6,b
 17462  001ABC  D00C               	goto	l1873
 17463                           
 17464                           ; BSR set to: 0
 17465  001ABE  0EFF               	movlw	255
 17466  001AC0  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 17467  001AC2  0EFF               	movlw	255
 17468  001AC4  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 17469  001AC6  0EFF               	movlw	255
 17470  001AC8  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 17471  001ACA  0E01               	movlw	1
 17472  001ACC  277B               	addwf	___ftadd@f2& (0+255),f,b
 17473  001ACE  0E00               	movlw	0
 17474  001AD0  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 17475  001AD2  0E00               	movlw	0
 17476  001AD4  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 17477  001AD6                     l1873:
 17478                           
 17479                           ; BSR set to: 0
 17480                           
 17481                           ; BSR set to: 0
 17482  001AD6  0E00               	movlw	0
 17483  001AD8  6F81               	movwf	___ftadd@sign& (0+255),b
 17484                           
 17485                           ; BSR set to: 0
 17486  001ADA  5178               	movf	___ftadd@f1& (0+255),w,b
 17487  001ADC  277B               	addwf	___ftadd@f2& (0+255),f,b
 17488  001ADE  5179               	movf	(___ftadd@f1+1)& (0+255),w,b
 17489  001AE0  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 17490  001AE2  517A               	movf	(___ftadd@f1+2)& (0+255),w,b
 17491  001AE4  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 17492                           
 17493                           ; BSR set to: 0
 17494  001AE6  AF7D               	btfss	(___ftadd@f2+2)& (0+255),7,b
 17495  001AE8  D00E               	goto	l1874
 17496                           
 17497                           ; BSR set to: 0
 17498  001AEA  0EFF               	movlw	255
 17499  001AEC  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 17500  001AEE  0EFF               	movlw	255
 17501  001AF0  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 17502  001AF2  0EFF               	movlw	255
 17503  001AF4  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 17504  001AF6  0E01               	movlw	1
 17505  001AF8  277B               	addwf	___ftadd@f2& (0+255),f,b
 17506  001AFA  0E00               	movlw	0
 17507  001AFC  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 17508  001AFE  0E00               	movlw	0
 17509  001B00  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 17510                           
 17511                           ; BSR set to: 0
 17512  001B02  0E01               	movlw	1
 17513  001B04  6F81               	movwf	___ftadd@sign& (0+255),b
 17514  001B06                     l1874:
 17515                           
 17516                           ; BSR set to: 0
 17517                           
 17518                           ; BSR set to: 0
 17519  001B06  C07B  F018         	movff	___ftadd@f2,___ftpack@arg
 17520  001B0A  C07C  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
 17521  001B0E  C07D  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
 17522  001B12  C083  F01B         	movff	___ftadd@exp1,___ftpack@exp
 17523  001B16  C081  F01C         	movff	___ftadd@sign,___ftpack@sign
 17524  001B1A  EC91  F017         	call	___ftpack	;wreg free
 17525  001B1E  C018  F078         	movff	?___ftpack,?___ftadd
 17526  001B22  C019  F079         	movff	?___ftpack+1,?___ftadd+1
 17527  001B26  C01A  F07A         	movff	?___ftpack+2,?___ftadd+2
 17528  001B2A  0012               	return	
 17529  001B2C                     __end_of___ftadd:
 17530                           	opt stack 0
 17531                           tosu	equ	0xFFF
 17532                           tosh	equ	0xFFE
 17533                           tosl	equ	0xFFD
 17534                           pclath	equ	0xFFA
 17535                           tblptru	equ	0xFF8
 17536                           tblptrh	equ	0xFF7
 17537                           tblptrl	equ	0xFF6
 17538                           tablat	equ	0xFF5
 17539                           prodh	equ	0xFF4
 17540                           prodl	equ	0xFF3
 17541                           intcon	equ	0xFF2
 17542                           intcon2	equ	0xFF1
 17543                           postinc0	equ	0xFEE
 17544                           plusw0	equ	0xFEB
 17545                           wreg	equ	0xFE8
 17546                           indf1	equ	0xFE7
 17547                           postdec1	equ	0xFE5
 17548                           fsr1h	equ	0xFE2
 17549                           fsr1l	equ	0xFE1
 17550                           indf2	equ	0xFDF
 17551                           postinc2	equ	0xFDE
 17552                           postdec2	equ	0xFDD
 17553                           plusw2	equ	0xFDB
 17554                           fsr2h	equ	0xFDA
 17555                           fsr2l	equ	0xFD9
 17556                           status	equ	0xFD8
 17557                           
 17558 ;; *************** function ___ftneg *****************
 17559 ;; Defined at:
 17560 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 17561 ;; Parameters:    Size  Location     Type
 17562 ;;  f1              3   23[COMRAM] float 
 17563 ;; Auto vars:     Size  Location     Type
 17564 ;;		None
 17565 ;; Return value:  Size  Location     Type
 17566 ;;                  3   23[COMRAM] float 
 17567 ;; Registers used:
 17568 ;;		wreg, status,2, status,0
 17569 ;; Tracked objects:
 17570 ;;		On entry : 0/0
 17571 ;;		On exit  : 0/0
 17572 ;;		Unchanged: 0/0
 17573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17574 ;;      Params:         3       0       0       0       0       0       0
 17575 ;;      Locals:         0       0       0       0       0       0       0
 17576 ;;      Temps:          0       0       0       0       0       0       0
 17577 ;;      Totals:         3       0       0       0       0       0       0
 17578 ;;Total ram usage:        3 bytes
 17579 ;; Hardware stack levels used:    1
 17580 ;; Hardware stack levels required when called:    4
 17581 ;; This function calls:
 17582 ;;		Nothing
 17583 ;; This function is called by:
 17584 ;;		_pow
 17585 ;;		_exp
 17586 ;; This function uses a non-reentrant model
 17587 ;;
 17588                           
 17589                           	psect	text99
 17590  0041C6                     __ptext99:
 17591                           	opt stack 0
 17592  0041C6                     ___ftneg:
 17593                           	opt stack 20
 17594                           
 17595                           ;incstack = 0
 17596  0041C6  5018               	movf	___ftneg@f1,w,c
 17597  0041C8  1019               	iorwf	___ftneg@f1+1,w,c
 17598  0041CA  101A               	iorwf	___ftneg@f1+2,w,c
 17599  0041CC  B4D8               	btfsc	status,2,c
 17600  0041CE  D006               	goto	l1905
 17601  0041D0  0E00               	movlw	0
 17602  0041D2  1A18               	xorwf	___ftneg@f1,f,c
 17603  0041D4  0E00               	movlw	0
 17604  0041D6  1A19               	xorwf	___ftneg@f1+1,f,c
 17605  0041D8  0E80               	movlw	128
 17606  0041DA  1A1A               	xorwf	___ftneg@f1+2,f,c
 17607  0041DC                     l1905:
 17608  0041DC  C018  F018         	movff	___ftneg@f1,?___ftneg
 17609  0041E0  C019  F019         	movff	___ftneg@f1+1,?___ftneg+1
 17610  0041E4  C01A  F01A         	movff	___ftneg@f1+2,?___ftneg+2
 17611  0041E8  0012               	return		;funcret
 17612  0041EA                     __end_of___ftneg:
 17613                           	opt stack 0
 17614                           tosu	equ	0xFFF
 17615                           tosh	equ	0xFFE
 17616                           tosl	equ	0xFFD
 17617                           pclath	equ	0xFFA
 17618                           tblptru	equ	0xFF8
 17619                           tblptrh	equ	0xFF7
 17620                           tblptrl	equ	0xFF6
 17621                           tablat	equ	0xFF5
 17622                           prodh	equ	0xFF4
 17623                           prodl	equ	0xFF3
 17624                           intcon	equ	0xFF2
 17625                           intcon2	equ	0xFF1
 17626                           postinc0	equ	0xFEE
 17627                           plusw0	equ	0xFEB
 17628                           wreg	equ	0xFE8
 17629                           indf1	equ	0xFE7
 17630                           postdec1	equ	0xFE5
 17631                           fsr1h	equ	0xFE2
 17632                           fsr1l	equ	0xFE1
 17633                           indf2	equ	0xFDF
 17634                           postinc2	equ	0xFDE
 17635                           postdec2	equ	0xFDD
 17636                           plusw2	equ	0xFDB
 17637                           fsr2h	equ	0xFDA
 17638                           fsr2l	equ	0xFD9
 17639                           status	equ	0xFD8
 17640                           
 17641 ;; *************** function ___ftdiv *****************
 17642 ;; Defined at:
 17643 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 17644 ;; Parameters:    Size  Location     Type
 17645 ;;  f1              3   40[COMRAM] float 
 17646 ;;  f2              3   43[COMRAM] float 
 17647 ;; Auto vars:     Size  Location     Type
 17648 ;;  f3              3    4[BANK0 ] float 
 17649 ;;  sign            1    8[BANK0 ] unsigned char 
 17650 ;;  exp             1    7[BANK0 ] unsigned char 
 17651 ;;  cntr            1    3[BANK0 ] unsigned char 
 17652 ;; Return value:  Size  Location     Type
 17653 ;;                  3   40[COMRAM] float 
 17654 ;; Registers used:
 17655 ;;		wreg, status,2, status,0, cstack
 17656 ;; Tracked objects:
 17657 ;;		On entry : 0/0
 17658 ;;		On exit  : 0/0
 17659 ;;		Unchanged: 0/0
 17660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17661 ;;      Params:         6       0       0       0       0       0       0
 17662 ;;      Locals:         0       6       0       0       0       0       0
 17663 ;;      Temps:          0       3       0       0       0       0       0
 17664 ;;      Totals:         6       9       0       0       0       0       0
 17665 ;;Total ram usage:       15 bytes
 17666 ;; Hardware stack levels used:    1
 17667 ;; Hardware stack levels required when called:    5
 17668 ;; This function calls:
 17669 ;;		___ftpack
 17670 ;; This function is called by:
 17671 ;;		_AdcConvert
 17672 ;;		_CheckFlashPrecentage
 17673 ;;		_exp
 17674 ;; This function uses a non-reentrant model
 17675 ;;
 17676                           
 17677                           	psect	text100
 17678  002602                     __ptext100:
 17679                           	opt stack 0
 17680  002602                     ___ftdiv:
 17681                           	opt stack 19
 17682                           
 17683                           ;incstack = 0
 17684  002602  C02B  F060         	movff	___ftdiv@f1+2,??___ftdiv
 17685  002606  0100               	movlb	0	; () banked
 17686  002608  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 17687  00260A  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 17688  00260C  342A               	rlcf	___ftdiv@f1+1,w,c
 17689  00260E  3760               	rlcf	??___ftdiv& (0+255),f,b
 17690  002610  E301               	bnc	u6941
 17691  002612  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 17692  002614                     u6941:
 17693  002614  5160               	movf	??___ftdiv& (0+255),w,b
 17694  002616  6F67               	movwf	___ftdiv@exp& (0+255),b
 17695  002618  5167               	movf	___ftdiv@exp& (0+255),w,b
 17696  00261A  A4D8               	btfss	status,2,c
 17697  00261C  D007               	goto	l1879
 17698                           
 17699                           ; BSR set to: 0
 17700  00261E  0E00               	movlw	0
 17701  002620  6E29               	movwf	?___ftdiv,c
 17702  002622  0E00               	movlw	0
 17703  002624  6E2A               	movwf	?___ftdiv+1,c
 17704  002626  0E00               	movlw	0
 17705  002628  6E2B               	movwf	?___ftdiv+2,c
 17706                           
 17707                           ; BSR set to: 0
 17708  00262A  0012               	return	
 17709  00262C                     l1879:
 17710                           
 17711                           ; BSR set to: 0
 17712                           
 17713                           ; BSR set to: 0
 17714  00262C  C02E  F060         	movff	___ftdiv@f2+2,??___ftdiv
 17715  002630  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 17716  002632  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 17717  002634  342D               	rlcf	___ftdiv@f2+1,w,c
 17718  002636  3760               	rlcf	??___ftdiv& (0+255),f,b
 17719  002638  E301               	bnc	u6961
 17720  00263A  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 17721  00263C                     u6961:
 17722  00263C  5160               	movf	??___ftdiv& (0+255),w,b
 17723  00263E  6F68               	movwf	___ftdiv@sign& (0+255),b
 17724  002640  5168               	movf	___ftdiv@sign& (0+255),w,b
 17725  002642  A4D8               	btfss	status,2,c
 17726  002644  D007               	goto	l1881
 17727                           
 17728                           ; BSR set to: 0
 17729  002646  0E00               	movlw	0
 17730  002648  6E29               	movwf	?___ftdiv,c
 17731  00264A  0E00               	movlw	0
 17732  00264C  6E2A               	movwf	?___ftdiv+1,c
 17733  00264E  0E00               	movlw	0
 17734  002650  6E2B               	movwf	?___ftdiv+2,c
 17735                           
 17736                           ; BSR set to: 0
 17737  002652  0012               	return	
 17738  002654                     l1881:
 17739                           
 17740                           ; BSR set to: 0
 17741                           
 17742                           ; BSR set to: 0
 17743  002654  0E00               	movlw	0
 17744  002656  6F64               	movwf	___ftdiv@f3& (0+255),b
 17745  002658  0E00               	movlw	0
 17746  00265A  6F65               	movwf	(___ftdiv@f3+1)& (0+255),b
 17747  00265C  0E00               	movlw	0
 17748  00265E  6F66               	movwf	(___ftdiv@f3+2)& (0+255),b
 17749                           
 17750                           ; BSR set to: 0
 17751  002660  5168               	movf	___ftdiv@sign& (0+255),w,b
 17752  002662  0F89               	addlw	137
 17753  002664  5F67               	subwf	___ftdiv@exp& (0+255),f,b
 17754                           
 17755                           ; BSR set to: 0
 17756  002666  C02B  F068         	movff	___ftdiv@f1+2,___ftdiv@sign
 17757                           
 17758                           ; BSR set to: 0
 17759  00266A  502E               	movf	___ftdiv@f2+2,w,c
 17760  00266C  1B68               	xorwf	___ftdiv@sign& (0+255),f,b
 17761                           
 17762                           ; BSR set to: 0
 17763  00266E  0E80               	movlw	128
 17764  002670  1768               	andwf	___ftdiv@sign& (0+255),f,b
 17765                           
 17766                           ; BSR set to: 0
 17767  002672  8E2A               	bsf	___ftdiv@f1+1,7,c
 17768                           
 17769                           ; BSR set to: 0
 17770  002674  0EFF               	movlw	255
 17771  002676  1629               	andwf	___ftdiv@f1,f,c
 17772  002678  0EFF               	movlw	255
 17773  00267A  162A               	andwf	___ftdiv@f1+1,f,c
 17774  00267C  0E00               	movlw	0
 17775  00267E  162B               	andwf	___ftdiv@f1+2,f,c
 17776                           
 17777                           ; BSR set to: 0
 17778  002680  8E2D               	bsf	___ftdiv@f2+1,7,c
 17779                           
 17780                           ; BSR set to: 0
 17781  002682  0EFF               	movlw	255
 17782  002684  162C               	andwf	___ftdiv@f2,f,c
 17783  002686  0EFF               	movlw	255
 17784  002688  162D               	andwf	___ftdiv@f2+1,f,c
 17785  00268A  0E00               	movlw	0
 17786  00268C  162E               	andwf	___ftdiv@f2+2,f,c
 17787                           
 17788                           ; BSR set to: 0
 17789  00268E  0E18               	movlw	24
 17790  002690  6F63               	movwf	___ftdiv@cntr& (0+255),b
 17791  002692                     
 17792                           ; BSR set to: 0
 17793                           
 17794                           ; BSR set to: 0
 17795  002692  90D8               	bcf	status,0,c
 17796  002694  3764               	rlcf	___ftdiv@f3& (0+255),f,b
 17797  002696  3765               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 17798  002698  3766               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 17799                           
 17800                           ; BSR set to: 0
 17801  00269A  502C               	movf	___ftdiv@f2,w,c
 17802  00269C  5C29               	subwf	___ftdiv@f1,w,c
 17803  00269E  502D               	movf	___ftdiv@f2+1,w,c
 17804  0026A0  582A               	subwfb	___ftdiv@f1+1,w,c
 17805  0026A2  502E               	movf	___ftdiv@f2+2,w,c
 17806  0026A4  582B               	subwfb	___ftdiv@f1+2,w,c
 17807  0026A6  A0D8               	btfss	status,0,c
 17808  0026A8  D007               	goto	l1883
 17809                           
 17810                           ; BSR set to: 0
 17811  0026AA  502C               	movf	___ftdiv@f2,w,c
 17812  0026AC  5E29               	subwf	___ftdiv@f1,f,c
 17813  0026AE  502D               	movf	___ftdiv@f2+1,w,c
 17814  0026B0  5A2A               	subwfb	___ftdiv@f1+1,f,c
 17815  0026B2  502E               	movf	___ftdiv@f2+2,w,c
 17816  0026B4  5A2B               	subwfb	___ftdiv@f1+2,f,c
 17817                           
 17818                           ; BSR set to: 0
 17819  0026B6  8164               	bsf	___ftdiv@f3& (0+255),0,b
 17820  0026B8                     l1883:
 17821                           
 17822                           ; BSR set to: 0
 17823  0026B8  90D8               	bcf	status,0,c
 17824  0026BA  3629               	rlcf	___ftdiv@f1,f,c
 17825  0026BC  362A               	rlcf	___ftdiv@f1+1,f,c
 17826  0026BE  362B               	rlcf	___ftdiv@f1+2,f,c
 17827                           
 17828                           ; BSR set to: 0
 17829  0026C0  2F63               	decfsz	___ftdiv@cntr& (0+255),f,b
 17830  0026C2  D7E7               	goto	l1882
 17831                           
 17832                           ; BSR set to: 0
 17833                           
 17834                           ; BSR set to: 0
 17835  0026C4  C064  F018         	movff	___ftdiv@f3,___ftpack@arg
 17836  0026C8  C065  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
 17837  0026CC  C066  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
 17838  0026D0  C067  F01B         	movff	___ftdiv@exp,___ftpack@exp
 17839  0026D4  C068  F01C         	movff	___ftdiv@sign,___ftpack@sign
 17840  0026D8  EC91  F017         	call	___ftpack	;wreg free
 17841  0026DC  C018  F029         	movff	?___ftpack,?___ftdiv
 17842  0026E0  C019  F02A         	movff	?___ftpack+1,?___ftdiv+1
 17843  0026E4  C01A  F02B         	movff	?___ftpack+2,?___ftdiv+2
 17844  0026E8  0012               	return	
 17845  0026EA                     __end_of___ftdiv:
 17846                           	opt stack 0
 17847                           tosu	equ	0xFFF
 17848                           tosh	equ	0xFFE
 17849                           tosl	equ	0xFFD
 17850                           pclath	equ	0xFFA
 17851                           tblptru	equ	0xFF8
 17852                           tblptrh	equ	0xFF7
 17853                           tblptrl	equ	0xFF6
 17854                           tablat	equ	0xFF5
 17855                           prodh	equ	0xFF4
 17856                           prodl	equ	0xFF3
 17857                           intcon	equ	0xFF2
 17858                           intcon2	equ	0xFF1
 17859                           postinc0	equ	0xFEE
 17860                           plusw0	equ	0xFEB
 17861                           wreg	equ	0xFE8
 17862                           indf1	equ	0xFE7
 17863                           postdec1	equ	0xFE5
 17864                           fsr1h	equ	0xFE2
 17865                           fsr1l	equ	0xFE1
 17866                           indf2	equ	0xFDF
 17867                           postinc2	equ	0xFDE
 17868                           postdec2	equ	0xFDD
 17869                           plusw2	equ	0xFDB
 17870                           fsr2h	equ	0xFDA
 17871                           fsr2l	equ	0xFD9
 17872                           status	equ	0xFD8
 17873                           
 17874 ;; *************** function ___awtoft *****************
 17875 ;; Defined at:
 17876 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 17877 ;; Parameters:    Size  Location     Type
 17878 ;;  c               2   31[COMRAM] int 
 17879 ;; Auto vars:     Size  Location     Type
 17880 ;;  sign            1   34[COMRAM] unsigned char 
 17881 ;; Return value:  Size  Location     Type
 17882 ;;                  3   31[COMRAM] float 
 17883 ;; Registers used:
 17884 ;;		wreg, status,2, status,0, cstack
 17885 ;; Tracked objects:
 17886 ;;		On entry : 0/0
 17887 ;;		On exit  : 0/0
 17888 ;;		Unchanged: 0/0
 17889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17890 ;;      Params:         3       0       0       0       0       0       0
 17891 ;;      Locals:         1       0       0       0       0       0       0
 17892 ;;      Temps:          0       0       0       0       0       0       0
 17893 ;;      Totals:         4       0       0       0       0       0       0
 17894 ;;Total ram usage:        4 bytes
 17895 ;; Hardware stack levels used:    1
 17896 ;; Hardware stack levels required when called:    5
 17897 ;; This function calls:
 17898 ;;		___ftpack
 17899 ;; This function is called by:
 17900 ;;		_ReadIntFromEeprom
 17901 ;;		_exp
 17902 ;;		_log
 17903 ;; This function uses a non-reentrant model
 17904 ;;
 17905                           
 17906                           	psect	text101
 17907  003EA4                     __ptext101:
 17908                           	opt stack 0
 17909  003EA4                     ___awtoft:
 17910                           	opt stack 19
 17911                           
 17912                           ;incstack = 0
 17913  003EA4  0E00               	movlw	0
 17914  003EA6  6E23               	movwf	___awtoft@sign,c
 17915  003EA8  AE21               	btfss	___awtoft@c+1,7,c
 17916  003EAA  D006               	goto	l1796
 17917  003EAC  6C20               	negf	___awtoft@c,c
 17918  003EAE  1E21               	comf	___awtoft@c+1,f,c
 17919  003EB0  B0D8               	btfsc	status,0,c
 17920  003EB2  2A21               	incf	___awtoft@c+1,f,c
 17921  003EB4  0E01               	movlw	1
 17922  003EB6  6E23               	movwf	___awtoft@sign,c
 17923  003EB8                     l1796:
 17924  003EB8  C020  F018         	movff	___awtoft@c,___ftpack@arg
 17925  003EBC  C021  F019         	movff	___awtoft@c+1,___ftpack@arg+1
 17926  003EC0  6A1A               	clrf	___ftpack@arg+2,c
 17927  003EC2  0E8E               	movlw	142
 17928  003EC4  6E1B               	movwf	___ftpack@exp,c
 17929  003EC6  C023  F01C         	movff	___awtoft@sign,___ftpack@sign
 17930  003ECA  EC91  F017         	call	___ftpack	;wreg free
 17931  003ECE  C018  F020         	movff	?___ftpack,?___awtoft
 17932  003ED2  C019  F021         	movff	?___ftpack+1,?___awtoft+1
 17933  003ED6  C01A  F022         	movff	?___ftpack+2,?___awtoft+2
 17934  003EDA  0012               	return	
 17935  003EDC                     __end_of___awtoft:
 17936                           	opt stack 0
 17937                           tosu	equ	0xFFF
 17938                           tosh	equ	0xFFE
 17939                           tosl	equ	0xFFD
 17940                           pclath	equ	0xFFA
 17941                           tblptru	equ	0xFF8
 17942                           tblptrh	equ	0xFF7
 17943                           tblptrl	equ	0xFF6
 17944                           tablat	equ	0xFF5
 17945                           prodh	equ	0xFF4
 17946                           prodl	equ	0xFF3
 17947                           intcon	equ	0xFF2
 17948                           intcon2	equ	0xFF1
 17949                           postinc0	equ	0xFEE
 17950                           plusw0	equ	0xFEB
 17951                           wreg	equ	0xFE8
 17952                           indf1	equ	0xFE7
 17953                           postdec1	equ	0xFE5
 17954                           fsr1h	equ	0xFE2
 17955                           fsr1l	equ	0xFE1
 17956                           indf2	equ	0xFDF
 17957                           postinc2	equ	0xFDE
 17958                           postdec2	equ	0xFDD
 17959                           plusw2	equ	0xFDB
 17960                           fsr2h	equ	0xFDA
 17961                           fsr2l	equ	0xFD9
 17962                           status	equ	0xFD8
 17963                           
 17964 ;; *************** function ___lltoft *****************
 17965 ;; Defined at:
 17966 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
 17967 ;; Parameters:    Size  Location     Type
 17968 ;;  c               4   31[COMRAM] unsigned long 
 17969 ;; Auto vars:     Size  Location     Type
 17970 ;;  exp             1   39[COMRAM] unsigned char 
 17971 ;; Return value:  Size  Location     Type
 17972 ;;                  3   31[COMRAM] float 
 17973 ;; Registers used:
 17974 ;;		wreg, status,2, status,0, cstack
 17975 ;; Tracked objects:
 17976 ;;		On entry : 0/0
 17977 ;;		On exit  : 0/0
 17978 ;;		Unchanged: 0/0
 17979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17980 ;;      Params:         4       0       0       0       0       0       0
 17981 ;;      Locals:         1       0       0       0       0       0       0
 17982 ;;      Temps:          4       0       0       0       0       0       0
 17983 ;;      Totals:         9       0       0       0       0       0       0
 17984 ;;Total ram usage:        9 bytes
 17985 ;; Hardware stack levels used:    1
 17986 ;; Hardware stack levels required when called:    5
 17987 ;; This function calls:
 17988 ;;		___ftpack
 17989 ;; This function is called by:
 17990 ;;		_CheckFlashPrecentage
 17991 ;;		_pow
 17992 ;; This function uses a non-reentrant model
 17993 ;;
 17994                           
 17995                           	psect	text102
 17996  0038FE                     __ptext102:
 17997                           	opt stack 0
 17998  0038FE                     ___lltoft:
 17999                           	opt stack 20
 18000                           
 18001                           ;incstack = 0
 18002  0038FE  0E8E               	movlw	142
 18003  003900  6E28               	movwf	___lltoft@exp,c
 18004  003902  D006               	goto	l1972
 18005  003904  90D8               	bcf	status,0,c
 18006  003906  3223               	rrcf	___lltoft@c+3,f,c
 18007  003908  3222               	rrcf	___lltoft@c+2,f,c
 18008  00390A  3221               	rrcf	___lltoft@c+1,f,c
 18009  00390C  3220               	rrcf	___lltoft@c,f,c
 18010  00390E  2A28               	incf	___lltoft@exp,f,c
 18011  003910                     l1972:
 18012  003910  0E00               	movlw	0
 18013  003912  1420               	andwf	___lltoft@c,w,c
 18014  003914  6E24               	movwf	??___lltoft& (0+255),c
 18015  003916  0E00               	movlw	0
 18016  003918  1421               	andwf	___lltoft@c+1,w,c
 18017  00391A  6E25               	movwf	(??___lltoft+1)& (0+255),c
 18018  00391C  0E00               	movlw	0
 18019  00391E  1422               	andwf	___lltoft@c+2,w,c
 18020  003920  6E26               	movwf	(??___lltoft+2)& (0+255),c
 18021  003922  0EFF               	movlw	255
 18022  003924  1423               	andwf	___lltoft@c+3,w,c
 18023  003926  6E27               	movwf	(??___lltoft+3)& (0+255),c
 18024  003928  5024               	movf	??___lltoft,w,c
 18025  00392A  1025               	iorwf	??___lltoft+1,w,c
 18026  00392C  1026               	iorwf	??___lltoft+2,w,c
 18027  00392E  1027               	iorwf	??___lltoft+3,w,c
 18028  003930  A4D8               	btfss	status,2,c
 18029  003932  D7E8               	goto	l1973
 18030  003934  C020  F018         	movff	___lltoft@c,___ftpack@arg
 18031  003938  C021  F019         	movff	___lltoft@c+1,___ftpack@arg+1
 18032  00393C  C022  F01A         	movff	___lltoft@c+2,___ftpack@arg+2
 18033  003940  C028  F01B         	movff	___lltoft@exp,___ftpack@exp
 18034  003944  0E00               	movlw	0
 18035  003946  6E1C               	movwf	___ftpack@sign,c
 18036  003948  EC91  F017         	call	___ftpack	;wreg free
 18037  00394C  C018  F020         	movff	?___ftpack,?___lltoft
 18038  003950  C019  F021         	movff	?___ftpack+1,?___lltoft+1
 18039  003954  C01A  F022         	movff	?___ftpack+2,?___lltoft+2
 18040  003958  0012               	return	
 18041  00395A                     __end_of___lltoft:
 18042                           	opt stack 0
 18043                           tosu	equ	0xFFF
 18044                           tosh	equ	0xFFE
 18045                           tosl	equ	0xFFD
 18046                           pclath	equ	0xFFA
 18047                           tblptru	equ	0xFF8
 18048                           tblptrh	equ	0xFF7
 18049                           tblptrl	equ	0xFF6
 18050                           tablat	equ	0xFF5
 18051                           prodh	equ	0xFF4
 18052                           prodl	equ	0xFF3
 18053                           intcon	equ	0xFF2
 18054                           intcon2	equ	0xFF1
 18055                           postinc0	equ	0xFEE
 18056                           plusw0	equ	0xFEB
 18057                           wreg	equ	0xFE8
 18058                           indf1	equ	0xFE7
 18059                           postdec1	equ	0xFE5
 18060                           fsr1h	equ	0xFE2
 18061                           fsr1l	equ	0xFE1
 18062                           indf2	equ	0xFDF
 18063                           postinc2	equ	0xFDE
 18064                           postdec2	equ	0xFDD
 18065                           plusw2	equ	0xFDB
 18066                           fsr2h	equ	0xFDA
 18067                           fsr2l	equ	0xFD9
 18068                           status	equ	0xFD8
 18069                           
 18070 ;; *************** function ___lwtoft *****************
 18071 ;; Defined at:
 18072 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 18073 ;; Parameters:    Size  Location     Type
 18074 ;;  c               2   31[COMRAM] unsigned int 
 18075 ;; Auto vars:     Size  Location     Type
 18076 ;;		None
 18077 ;; Return value:  Size  Location     Type
 18078 ;;                  3   31[COMRAM] float 
 18079 ;; Registers used:
 18080 ;;		wreg, status,2, status,0, cstack
 18081 ;; Tracked objects:
 18082 ;;		On entry : 0/0
 18083 ;;		On exit  : 0/0
 18084 ;;		Unchanged: 0/0
 18085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18086 ;;      Params:         3       0       0       0       0       0       0
 18087 ;;      Locals:         0       0       0       0       0       0       0
 18088 ;;      Temps:          0       0       0       0       0       0       0
 18089 ;;      Totals:         3       0       0       0       0       0       0
 18090 ;;Total ram usage:        3 bytes
 18091 ;; Hardware stack levels used:    1
 18092 ;; Hardware stack levels required when called:    5
 18093 ;; This function calls:
 18094 ;;		___ftpack
 18095 ;; This function is called by:
 18096 ;;		_AdcConvert
 18097 ;; This function uses a non-reentrant model
 18098 ;;
 18099                           
 18100                           	psect	text103
 18101  0041EA                     __ptext103:
 18102                           	opt stack 0
 18103  0041EA                     ___lwtoft:
 18104                           	opt stack 24
 18105                           
 18106                           ;incstack = 0
 18107  0041EA  C020  F018         	movff	___lwtoft@c,___ftpack@arg
 18108  0041EE  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
 18109  0041F2  6A1A               	clrf	___ftpack@arg+2,c
 18110  0041F4  0E8E               	movlw	142
 18111  0041F6  6E1B               	movwf	___ftpack@exp,c
 18112  0041F8  0E00               	movlw	0
 18113  0041FA  6E1C               	movwf	___ftpack@sign,c
 18114  0041FC  EC91  F017         	call	___ftpack	;wreg free
 18115  004200  C018  F020         	movff	?___ftpack,?___lwtoft
 18116  004204  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
 18117  004208  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
 18118  00420C  0012               	return	
 18119  00420E                     __end_of___lwtoft:
 18120                           	opt stack 0
 18121                           tosu	equ	0xFFF
 18122                           tosh	equ	0xFFE
 18123                           tosl	equ	0xFFD
 18124                           pclath	equ	0xFFA
 18125                           tblptru	equ	0xFF8
 18126                           tblptrh	equ	0xFF7
 18127                           tblptrl	equ	0xFF6
 18128                           tablat	equ	0xFF5
 18129                           prodh	equ	0xFF4
 18130                           prodl	equ	0xFF3
 18131                           intcon	equ	0xFF2
 18132                           intcon2	equ	0xFF1
 18133                           postinc0	equ	0xFEE
 18134                           plusw0	equ	0xFEB
 18135                           wreg	equ	0xFE8
 18136                           indf1	equ	0xFE7
 18137                           postdec1	equ	0xFE5
 18138                           fsr1h	equ	0xFE2
 18139                           fsr1l	equ	0xFE1
 18140                           indf2	equ	0xFDF
 18141                           postinc2	equ	0xFDE
 18142                           postdec2	equ	0xFDD
 18143                           plusw2	equ	0xFDB
 18144                           fsr2h	equ	0xFDA
 18145                           fsr2l	equ	0xFD9
 18146                           status	equ	0xFD8
 18147                           
 18148 ;; *************** function ___ftpack *****************
 18149 ;; Defined at:
 18150 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 18151 ;; Parameters:    Size  Location     Type
 18152 ;;  arg             3   23[COMRAM] unsigned um
 18153 ;;  exp             1   26[COMRAM] unsigned char 
 18154 ;;  sign            1   27[COMRAM] unsigned char 
 18155 ;; Auto vars:     Size  Location     Type
 18156 ;;		None
 18157 ;; Return value:  Size  Location     Type
 18158 ;;                  3   23[COMRAM] float 
 18159 ;; Registers used:
 18160 ;;		wreg, status,2, status,0
 18161 ;; Tracked objects:
 18162 ;;		On entry : 0/0
 18163 ;;		On exit  : 0/0
 18164 ;;		Unchanged: 0/0
 18165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18166 ;;      Params:         5       0       0       0       0       0       0
 18167 ;;      Locals:         0       0       0       0       0       0       0
 18168 ;;      Temps:          3       0       0       0       0       0       0
 18169 ;;      Totals:         8       0       0       0       0       0       0
 18170 ;;Total ram usage:        8 bytes
 18171 ;; Hardware stack levels used:    1
 18172 ;; Hardware stack levels required when called:    4
 18173 ;; This function calls:
 18174 ;;		Nothing
 18175 ;; This function is called by:
 18176 ;;		___altoft
 18177 ;;		___awtoft
 18178 ;;		___ftadd
 18179 ;;		___ftdiv
 18180 ;;		___ftmul
 18181 ;;		___lltoft
 18182 ;;		___lwtoft
 18183 ;; This function uses a non-reentrant model
 18184 ;;
 18185                           
 18186                           	psect	text104
 18187  002F22                     __ptext104:
 18188                           	opt stack 0
 18189  002F22                     ___ftpack:
 18190                           	opt stack 18
 18191                           
 18192                           ;incstack = 0
 18193  002F22  501B               	movf	___ftpack@exp,w,c
 18194  002F24  B4D8               	btfsc	status,2,c
 18195  002F26  D005               	goto	u6440
 18196  002F28  5018               	movf	___ftpack@arg,w,c
 18197  002F2A  1019               	iorwf	___ftpack@arg+1,w,c
 18198  002F2C  101A               	iorwf	___ftpack@arg+2,w,c
 18199  002F2E  A4D8               	btfss	status,2,c
 18200  002F30  D00C               	goto	l1815
 18201  002F32                     u6440:
 18202  002F32  0E00               	movlw	0
 18203  002F34  6E18               	movwf	?___ftpack,c
 18204  002F36  0E00               	movlw	0
 18205  002F38  6E19               	movwf	?___ftpack+1,c
 18206  002F3A  0E00               	movlw	0
 18207  002F3C  6E1A               	movwf	?___ftpack+2,c
 18208  002F3E  0012               	return	
 18209  002F40  2A1B               	incf	___ftpack@exp,f,c
 18210  002F42  90D8               	bcf	status,0,c
 18211  002F44  321A               	rrcf	___ftpack@arg+2,f,c
 18212  002F46  3219               	rrcf	___ftpack@arg+1,f,c
 18213  002F48  3218               	rrcf	___ftpack@arg,f,c
 18214  002F4A                     l1815:
 18215  002F4A  0E00               	movlw	0
 18216  002F4C  1418               	andwf	___ftpack@arg,w,c
 18217  002F4E  6E1D               	movwf	??___ftpack& (0+255),c
 18218  002F50  0E00               	movlw	0
 18219  002F52  1419               	andwf	___ftpack@arg+1,w,c
 18220  002F54  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 18221  002F56  0EFE               	movlw	254
 18222  002F58  141A               	andwf	___ftpack@arg+2,w,c
 18223  002F5A  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 18224  002F5C  501D               	movf	??___ftpack,w,c
 18225  002F5E  101E               	iorwf	??___ftpack+1,w,c
 18226  002F60  101F               	iorwf	??___ftpack+2,w,c
 18227  002F62  B4D8               	btfsc	status,2,c
 18228  002F64  D00C               	goto	l1818
 18229  002F66  D7EC               	goto	l1816
 18230  002F68  2A1B               	incf	___ftpack@exp,f,c
 18231  002F6A  0E01               	movlw	1
 18232  002F6C  2618               	addwf	___ftpack@arg,f,c
 18233  002F6E  0E00               	movlw	0
 18234  002F70  2219               	addwfc	___ftpack@arg+1,f,c
 18235  002F72  0E00               	movlw	0
 18236  002F74  221A               	addwfc	___ftpack@arg+2,f,c
 18237  002F76  90D8               	bcf	status,0,c
 18238  002F78  321A               	rrcf	___ftpack@arg+2,f,c
 18239  002F7A  3219               	rrcf	___ftpack@arg+1,f,c
 18240  002F7C  3218               	rrcf	___ftpack@arg,f,c
 18241  002F7E                     l1818:
 18242  002F7E  0E00               	movlw	0
 18243  002F80  1418               	andwf	___ftpack@arg,w,c
 18244  002F82  6E1D               	movwf	??___ftpack& (0+255),c
 18245  002F84  0E00               	movlw	0
 18246  002F86  1419               	andwf	___ftpack@arg+1,w,c
 18247  002F88  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 18248  002F8A  0EFF               	movlw	255
 18249  002F8C  141A               	andwf	___ftpack@arg+2,w,c
 18250  002F8E  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 18251  002F90  501D               	movf	??___ftpack,w,c
 18252  002F92  101E               	iorwf	??___ftpack+1,w,c
 18253  002F94  101F               	iorwf	??___ftpack+2,w,c
 18254  002F96  B4D8               	btfsc	status,2,c
 18255  002F98  D006               	goto	l1821
 18256  002F9A  D7E6               	goto	l1819
 18257  002F9C  061B               	decf	___ftpack@exp,f,c
 18258  002F9E  90D8               	bcf	status,0,c
 18259  002FA0  3618               	rlcf	___ftpack@arg,f,c
 18260  002FA2  3619               	rlcf	___ftpack@arg+1,f,c
 18261  002FA4  361A               	rlcf	___ftpack@arg+2,f,c
 18262  002FA6                     l1821:
 18263  002FA6  BE19               	btfsc	___ftpack@arg+1,7,c
 18264  002FA8  D003               	goto	u6480
 18265  002FAA  0E02               	movlw	2
 18266  002FAC  601B               	cpfslt	___ftpack@exp,c
 18267  002FAE  D7F6               	goto	l1822
 18268  002FB0                     u6480:
 18269  002FB0  A01B               	btfss	___ftpack@exp,0,c
 18270  002FB2  9E19               	bcf	___ftpack@arg+1,7,c
 18271  002FB4  90D8               	bcf	status,0,c
 18272  002FB6  321B               	rrcf	___ftpack@exp,f,c
 18273  002FB8  501B               	movf	___ftpack@exp,w,c
 18274  002FBA  121A               	iorwf	___ftpack@arg+2,f,c
 18275  002FBC  501C               	movf	___ftpack@sign,w,c
 18276  002FBE  A4D8               	btfss	status,2,c
 18277  002FC0  8E1A               	bsf	___ftpack@arg+2,7,c
 18278  002FC2  C018  F018         	movff	___ftpack@arg,?___ftpack
 18279  002FC6  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
 18280  002FCA  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
 18281  002FCE  0012               	return	
 18282  002FD0                     __end_of___ftpack:
 18283                           	opt stack 0
 18284                           tosu	equ	0xFFF
 18285                           tosh	equ	0xFFE
 18286                           tosl	equ	0xFFD
 18287                           pclath	equ	0xFFA
 18288                           tblptru	equ	0xFF8
 18289                           tblptrh	equ	0xFF7
 18290                           tblptrl	equ	0xFF6
 18291                           tablat	equ	0xFF5
 18292                           prodh	equ	0xFF4
 18293                           prodl	equ	0xFF3
 18294                           intcon	equ	0xFF2
 18295                           intcon2	equ	0xFF1
 18296                           postinc0	equ	0xFEE
 18297                           plusw0	equ	0xFEB
 18298                           wreg	equ	0xFE8
 18299                           indf1	equ	0xFE7
 18300                           postdec1	equ	0xFE5
 18301                           fsr1h	equ	0xFE2
 18302                           fsr1l	equ	0xFE1
 18303                           indf2	equ	0xFDF
 18304                           postinc2	equ	0xFDE
 18305                           postdec2	equ	0xFDD
 18306                           plusw2	equ	0xFDB
 18307                           fsr2h	equ	0xFDA
 18308                           fsr2l	equ	0xFD9
 18309                           status	equ	0xFD8
 18310                           
 18311 ;; *************** function _GetUint16FromBitArray *****************
 18312 ;; Defined at:
 18313 ;;		line 34 in file "SystemCommon.c"
 18314 ;; Parameters:    Size  Location     Type
 18315 ;;  bitarray        2   23[COMRAM] PTR unsigned char 
 18316 ;;		 -> synthLdTxArray(12), synthLdRxArray(12), 
 18317 ;;  numOfBits       2   25[COMRAM] int 
 18318 ;; Auto vars:     Size  Location     Type
 18319 ;;  i               2   32[COMRAM] int 
 18320 ;;  res             2   30[COMRAM] unsigned int 
 18321 ;; Return value:  Size  Location     Type
 18322 ;;                  2   23[COMRAM] unsigned int 
 18323 ;; Registers used:
 18324 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18325 ;; Tracked objects:
 18326 ;;		On entry : 0/0
 18327 ;;		On exit  : 0/0
 18328 ;;		Unchanged: 0/0
 18329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18330 ;;      Params:         4       0       0       0       0       0       0
 18331 ;;      Locals:         4       0       0       0       0       0       0
 18332 ;;      Temps:          3       0       0       0       0       0       0
 18333 ;;      Totals:        11       0       0       0       0       0       0
 18334 ;;Total ram usage:       11 bytes
 18335 ;; Hardware stack levels used:    1
 18336 ;; Hardware stack levels required when called:    4
 18337 ;; This function calls:
 18338 ;;		Nothing
 18339 ;; This function is called by:
 18340 ;;		_AdcConvert
 18341 ;; This function uses a non-reentrant model
 18342 ;;
 18343                           
 18344                           	psect	text105
 18345  0036B4                     __ptext105:
 18346                           	opt stack 0
 18347  0036B4                     _GetUint16FromBitArray:
 18348                           	opt stack 25
 18349                           
 18350                           ;SystemCommon.c: 36: uint16_t res = 0;
 18351                           
 18352                           ;incstack = 0
 18353  0036B4  0E00               	movlw	0
 18354  0036B6  6E20               	movwf	GetUint16FromBitArray@res+1,c
 18355  0036B8  0E00               	movlw	0
 18356  0036BA  6E1F               	movwf	GetUint16FromBitArray@res,c
 18357                           
 18358                           ;SystemCommon.c: 37: for (int i = 0 ; i < numOfBits ; i++)
 18359  0036BC  0E00               	movlw	0
 18360  0036BE  6E22               	movwf	GetUint16FromBitArray@i+1,c
 18361  0036C0  0E00               	movlw	0
 18362  0036C2  6E21               	movwf	GetUint16FromBitArray@i,c
 18363  0036C4  D01C               	goto	l1405
 18364  0036C6                     
 18365                           ;SystemCommon.c: 38: {
 18366                           ;SystemCommon.c: 39: if (bitarray[i])
 18367  0036C6  5021               	movf	GetUint16FromBitArray@i,w,c
 18368  0036C8  2418               	addwf	GetUint16FromBitArray@bitarray,w,c
 18369  0036CA  6ED9               	movwf	fsr2l,c
 18370  0036CC  5022               	movf	GetUint16FromBitArray@i+1,w,c
 18371  0036CE  2019               	addwfc	GetUint16FromBitArray@bitarray+1,w,c
 18372  0036D0  6EDA               	movwf	fsr2h,c
 18373  0036D2  50DF               	movf	indf2,w,c
 18374  0036D4  B4D8               	btfsc	status,2,c
 18375  0036D6  D011               	goto	l1407
 18376                           
 18377                           ;SystemCommon.c: 40: {
 18378                           ;SystemCommon.c: 41: res |= (uint16_t)(1 << i);
 18379  0036D8  C021  F01C         	movff	GetUint16FromBitArray@i,??_GetUint16FromBitArray
 18380  0036DC  0E01               	movlw	1
 18381  0036DE  6E1D               	movwf	(??_GetUint16FromBitArray+1)& (0+255),c
 18382  0036E0  0E00               	movlw	0
 18383  0036E2  6E1E               	movwf	(??_GetUint16FromBitArray+2)& (0+255),c
 18384  0036E4  2A1C               	incf	??_GetUint16FromBitArray,f,c
 18385  0036E6  D003               	goto	u5644
 18386  0036E8                     u5645:
 18387  0036E8  90D8               	bcf	status,0,c
 18388  0036EA  361D               	rlcf	??_GetUint16FromBitArray+1,f,c
 18389  0036EC  361E               	rlcf	??_GetUint16FromBitArray+2,f,c
 18390  0036EE                     u5644:
 18391  0036EE  2E1C               	decfsz	??_GetUint16FromBitArray,f,c
 18392  0036F0  D7FB               	goto	u5645
 18393  0036F2  501D               	movf	??_GetUint16FromBitArray+1,w,c
 18394  0036F4  121F               	iorwf	GetUint16FromBitArray@res,f,c
 18395  0036F6  501E               	movf	??_GetUint16FromBitArray+2,w,c
 18396  0036F8  1220               	iorwf	GetUint16FromBitArray@res+1,f,c
 18397  0036FA                     l1407:
 18398  0036FA  4A21               	infsnz	GetUint16FromBitArray@i,f,c
 18399  0036FC  2A22               	incf	GetUint16FromBitArray@i+1,f,c
 18400  0036FE                     l1405:
 18401  0036FE  501A               	movf	GetUint16FromBitArray@numOfBits,w,c
 18402  003700  5C21               	subwf	GetUint16FromBitArray@i,w,c
 18403  003702  5022               	movf	GetUint16FromBitArray@i+1,w,c
 18404  003704  0A80               	xorlw	128
 18405  003706  6E1C               	movwf	??_GetUint16FromBitArray& (0+255),c
 18406  003708  501B               	movf	GetUint16FromBitArray@numOfBits+1,w,c
 18407  00370A  0A80               	xorlw	128
 18408  00370C  581C               	subwfb	??_GetUint16FromBitArray& (0+255),w,c
 18409  00370E  A0D8               	btfss	status,0,c
 18410  003710  D7DA               	goto	l1406
 18411                           
 18412                           ;SystemCommon.c: 42: }
 18413                           ;SystemCommon.c: 43: }
 18414                           ;SystemCommon.c: 44: return res;
 18415  003712  C01F  F018         	movff	GetUint16FromBitArray@res,?_GetUint16FromBitArray
 18416  003716  C020  F019         	movff	GetUint16FromBitArray@res+1,?_GetUint16FromBitArray+1
 18417  00371A  0012               	return		;funcret
 18418  00371C                     __end_of_GetUint16FromBitArray:
 18419                           	opt stack 0
 18420                           tosu	equ	0xFFF
 18421                           tosh	equ	0xFFE
 18422                           tosl	equ	0xFFD
 18423                           pclath	equ	0xFFA
 18424                           tblptru	equ	0xFF8
 18425                           tblptrh	equ	0xFF7
 18426                           tblptrl	equ	0xFF6
 18427                           tablat	equ	0xFF5
 18428                           prodh	equ	0xFF4
 18429                           prodl	equ	0xFF3
 18430                           intcon	equ	0xFF2
 18431                           intcon2	equ	0xFF1
 18432                           postinc0	equ	0xFEE
 18433                           plusw0	equ	0xFEB
 18434                           wreg	equ	0xFE8
 18435                           indf1	equ	0xFE7
 18436                           postdec1	equ	0xFE5
 18437                           fsr1h	equ	0xFE2
 18438                           fsr1l	equ	0xFE1
 18439                           indf2	equ	0xFDF
 18440                           postinc2	equ	0xFDE
 18441                           postdec2	equ	0xFDD
 18442                           plusw2	equ	0xFDB
 18443                           fsr2h	equ	0xFDA
 18444                           fsr2l	equ	0xFD9
 18445                           status	equ	0xFD8
 18446                           
 18447 ;; *************** function _FlashSampleWrite *****************
 18448 ;; Defined at:
 18449 ;;		line 29 in file "FlashApp.c"
 18450 ;; Parameters:    Size  Location     Type
 18451 ;;  sampleData      2   44[COMRAM] unsigned int 
 18452 ;;  channelNum      1   46[COMRAM] unsigned char 
 18453 ;; Auto vars:     Size  Location     Type
 18454 ;;  rotateLeft      2    2[BANK0 ] unsigned int 
 18455 ;; Return value:  Size  Location     Type
 18456 ;;                  1    wreg      void 
 18457 ;; Registers used:
 18458 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18459 ;; Tracked objects:
 18460 ;;		On entry : 0/0
 18461 ;;		On exit  : 0/0
 18462 ;;		Unchanged: 0/0
 18463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18464 ;;      Params:         3       0       0       0       0       0       0
 18465 ;;      Locals:         0       2       0       0       0       0       0
 18466 ;;      Temps:          0       2       0       0       0       0       0
 18467 ;;      Totals:         3       4       0       0       0       0       0
 18468 ;;Total ram usage:        7 bytes
 18469 ;; Hardware stack levels used:    1
 18470 ;; Hardware stack levels required when called:    6
 18471 ;; This function calls:
 18472 ;;		_FLASH_IsWriteDone
 18473 ;;		_FLASH_WriteBlock
 18474 ;; This function is called by:
 18475 ;;		_AdcConvert
 18476 ;; This function uses a non-reentrant model
 18477 ;;
 18478                           
 18479                           	psect	text106
 18480  002310                     __ptext106:
 18481                           	opt stack 0
 18482  002310                     _FlashSampleWrite:
 18483                           	opt stack 23
 18484                           
 18485                           ;FlashApp.c: 32: uint16_t rotateLeft = (channelNum << 12);
 18486                           
 18487                           ;incstack = 0
 18488  002310  502F               	movf	FlashSampleWrite@channelNum,w,c
 18489  002312  0100               	movlb	0	; () banked
 18490  002314  6F60               	movwf	??_FlashSampleWrite& (0+255),b
 18491  002316  6B61               	clrf	(??_FlashSampleWrite+1)& (0+255),b
 18492  002318  0E0C               	movlw	12
 18493  00231A                     u8755:
 18494  00231A  90D8               	bcf	status,0,c
 18495  00231C  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 18496  00231E  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 18497  002320  2EE8               	decfsz	wreg,f,c
 18498  002322  D7FB               	goto	u8755
 18499  002324  C060  F062         	movff	??_FlashSampleWrite,FlashSampleWrite@rotateLeft
 18500  002328  C061  F063         	movff	??_FlashSampleWrite+1,FlashSampleWrite@rotateLeft+1
 18501                           
 18502                           ;FlashApp.c: 33: sampleData |= rotateLeft;
 18503  00232C  5162               	movf	FlashSampleWrite@rotateLeft& (0+255),w,b
 18504  00232E  122D               	iorwf	FlashSampleWrite@sampleData,f,c
 18505  002330  5163               	movf	(FlashSampleWrite@rotateLeft+1)& (0+255),w,b
 18506  002332  122E               	iorwf	FlashSampleWrite@sampleData+1,f,c
 18507                           
 18508                           ; BSR set to: 0
 18509                           ;FlashApp.c: 34: sampleArray[sampleCount] = sampleData;
 18510  002334  90D8               	bcf	status,0,c
 18511  002336  0101               	movlb	1	; () banked
 18512  002338  3536               	rlcf	_sampleCount& (0+255),w,b
 18513  00233A  6ED9               	movwf	fsr2l,c
 18514  00233C  3537               	rlcf	(_sampleCount+1)& (0+255),w,b
 18515  00233E  6EDA               	movwf	fsr2h,c
 18516  002340  0E3C               	movlw	low _sampleArray
 18517  002342  26D9               	addwf	fsr2l,f,c
 18518  002344  0E01               	movlw	high _sampleArray
 18519  002346  22DA               	addwfc	fsr2h,f,c
 18520  002348  C02D  FFDE         	movff	FlashSampleWrite@sampleData,postinc2
 18521  00234C  C02E  FFDD         	movff	FlashSampleWrite@sampleData+1,postdec2
 18522                           
 18523                           ; BSR set to: 1
 18524                           ;FlashApp.c: 35: sampleCount ++;
 18525  002350  4B36               	infsnz	_sampleCount& (0+255),f,b
 18526  002352  2B37               	incf	(_sampleCount+1)& (0+255),f,b
 18527                           
 18528                           ; BSR set to: 1
 18529                           ;FlashApp.c: 37: if(((sampleCount*sizeof(adc_result_t)) >= (64)) && FLASH_IsWriteDone())
 18530  002354  C136  F060         	movff	_sampleCount,??_FlashSampleWrite
 18531  002358  C137  F061         	movff	_sampleCount+1,??_FlashSampleWrite+1
 18532  00235C  90D8               	bcf	status,0,c
 18533  00235E  0100               	movlb	0	; () banked
 18534  002360  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 18535  002362  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 18536  002364  5161               	movf	(??_FlashSampleWrite+1)& (0+255),w,b
 18537  002366  E104               	bnz	u8760
 18538  002368  0E40               	movlw	64
 18539  00236A  5D60               	subwf	??_FlashSampleWrite& (0+255),w,b
 18540  00236C  A0D8               	btfss	status,0,c
 18541  00236E  0012               	return	
 18542  002370                     u8760:
 18543                           
 18544                           ; BSR set to: 0
 18545  002370  ECFD  F021         	call	_FLASH_IsWriteDone	;wreg free
 18546  002374  0900               	iorlw	0
 18547  002376  B4D8               	btfsc	status,2,c
 18548  002378  0012               	return	
 18549                           
 18550                           ;FlashApp.c: 38: {
 18551                           ;FlashApp.c: 39: FLASH_WriteBlock(writeAddress, (uint8_t *)sampleArray);
 18552  00237A  C03E  F01D         	movff	_writeAddress,FLASH_WriteBlock@writeAddr
 18553  00237E  C03F  F01E         	movff	_writeAddress+1,FLASH_WriteBlock@writeAddr+1
 18554  002382  C040  F01F         	movff	_writeAddress+2,FLASH_WriteBlock@writeAddr+2
 18555  002386  C041  F020         	movff	_writeAddress+3,FLASH_WriteBlock@writeAddr+3
 18556  00238A  0E3C               	movlw	low _sampleArray
 18557  00238C  6E21               	movwf	FLASH_WriteBlock@flashWrBufPtr,c
 18558  00238E  0E01               	movlw	high _sampleArray
 18559  002390  6E22               	movwf	FLASH_WriteBlock@flashWrBufPtr+1,c
 18560  002392  ECDC  F016         	call	_FLASH_WriteBlock	;wreg free
 18561                           
 18562                           ;FlashApp.c: 40: writeAddress += (64);
 18563  002396  0E40               	movlw	64
 18564  002398  263E               	addwf	_writeAddress,f,c
 18565  00239A  0E00               	movlw	0
 18566  00239C  223F               	addwfc	_writeAddress+1,f,c
 18567  00239E  2240               	addwfc	_writeAddress+2,f,c
 18568  0023A0  2241               	addwfc	_writeAddress+3,f,c
 18569                           
 18570                           ;FlashApp.c: 41: if (writeAddress >= 0x7FF0)
 18571  0023A2  5041               	movf	_writeAddress+3,w,c
 18572  0023A4  1040               	iorwf	_writeAddress+2,w,c
 18573  0023A6  E106               	bnz	u8780
 18574  0023A8  0EF0               	movlw	240
 18575  0023AA  5C3E               	subwf	_writeAddress,w,c
 18576  0023AC  0E7F               	movlw	127
 18577  0023AE  583F               	subwfb	_writeAddress+1,w,c
 18578  0023B0  A0D8               	btfss	status,0,c
 18579  0023B2  D01A               	goto	l319
 18580  0023B4                     u8780:
 18581                           
 18582                           ;FlashApp.c: 42: {
 18583                           ;FlashApp.c: 43: writeAddress = 0x4580;
 18584  0023B4  0E80               	movlw	128
 18585  0023B6  6E3E               	movwf	_writeAddress,c
 18586  0023B8  0E45               	movlw	69
 18587  0023BA  6E3F               	movwf	_writeAddress+1,c
 18588  0023BC  0E00               	movlw	0
 18589  0023BE  6E40               	movwf	_writeAddress+2,c
 18590  0023C0  0E00               	movlw	0
 18591  0023C2  6E41               	movwf	_writeAddress+3,c
 18592                           
 18593                           ;FlashApp.c: 44: isReWriteDone = 1;
 18594  0023C4  0E01               	movlw	1
 18595  0023C6  0101               	movlb	1	; () banked
 18596  0023C8  6F3A               	movwf	_isReWriteDone& (0+255),b
 18597                           
 18598                           ; BSR set to: 1
 18599                           ;FlashApp.c: 45: if (readAddress == 0x4580)
 18600  0023CA  0E80               	movlw	128
 18601  0023CC  19C8               	xorwf	_readAddress& (0+255),w,b
 18602  0023CE  E10C               	bnz	l318
 18603  0023D0  0E45               	movlw	69
 18604  0023D2  19C9               	xorwf	(_readAddress+1)& (0+255),w,b
 18605  0023D4  11CA               	iorwf	(_readAddress+2)& (0+255),w,b
 18606  0023D6  11CB               	iorwf	(_readAddress+3)& (0+255),w,b
 18607  0023D8  A4D8               	btfss	status,2,c
 18608  0023DA  D006               	goto	l319
 18609                           
 18610                           ; BSR set to: 1
 18611                           ;FlashApp.c: 46: {
 18612                           ;FlashApp.c: 47: readAddress += (64);
 18613  0023DC  0E40               	movlw	64
 18614  0023DE  27C8               	addwf	_readAddress& (0+255),f,b
 18615  0023E0  0E00               	movlw	0
 18616  0023E2  23C9               	addwfc	(_readAddress+1)& (0+255),f,b
 18617  0023E4  23CA               	addwfc	(_readAddress+2)& (0+255),f,b
 18618  0023E6  23CB               	addwfc	(_readAddress+3)& (0+255),f,b
 18619  0023E8                     l319:
 18620  0023E8                     l318:
 18621                           
 18622                           ;FlashApp.c: 48: }
 18623                           ;FlashApp.c: 49: }
 18624                           ;FlashApp.c: 52: if (numOfValidateSamples < ((0x4580-0x7FF0)/(64)))
 18625  0023E8  0E17               	movlw	23
 18626  0023EA  0101               	movlb	1	; () banked
 18627  0023EC  5D30               	subwf	_numOfValidateSamples& (0+255),w,b
 18628  0023EE  0EFF               	movlw	255
 18629  0023F0  5931               	subwfb	(_numOfValidateSamples+1)& (0+255),w,b
 18630  0023F2  0EFF               	movlw	255
 18631  0023F4  5932               	subwfb	(_numOfValidateSamples+2)& (0+255),w,b
 18632  0023F6  0EFF               	movlw	255
 18633  0023F8  5933               	subwfb	(_numOfValidateSamples+3)& (0+255),w,b
 18634  0023FA  B0D8               	btfsc	status,0,c
 18635  0023FC  D006               	goto	l320
 18636                           
 18637                           ; BSR set to: 1
 18638                           ;FlashApp.c: 53: {
 18639                           ;FlashApp.c: 54: numOfValidateSamples++;
 18640  0023FE  0E01               	movlw	1
 18641  002400  2730               	addwf	_numOfValidateSamples& (0+255),f,b
 18642  002402  0E00               	movlw	0
 18643  002404  2331               	addwfc	(_numOfValidateSamples+1)& (0+255),f,b
 18644  002406  2332               	addwfc	(_numOfValidateSamples+2)& (0+255),f,b
 18645  002408  2333               	addwfc	(_numOfValidateSamples+3)& (0+255),f,b
 18646  00240A                     l320:
 18647                           
 18648                           ; BSR set to: 1
 18649                           ;FlashApp.c: 55: }
 18650                           ;FlashApp.c: 56: sampleCount = 0;
 18651                           
 18652                           ; BSR set to: 1
 18653  00240A  0E00               	movlw	0
 18654  00240C  6F37               	movwf	(_sampleCount+1)& (0+255),b
 18655  00240E  0E00               	movlw	0
 18656  002410  6F36               	movwf	_sampleCount& (0+255),b
 18657  002412  0012               	return	
 18658  002414                     __end_of_FlashSampleWrite:
 18659                           	opt stack 0
 18660                           tosu	equ	0xFFF
 18661                           tosh	equ	0xFFE
 18662                           tosl	equ	0xFFD
 18663                           pclath	equ	0xFFA
 18664                           tblptru	equ	0xFF8
 18665                           tblptrh	equ	0xFF7
 18666                           tblptrl	equ	0xFF6
 18667                           tablat	equ	0xFF5
 18668                           prodh	equ	0xFF4
 18669                           prodl	equ	0xFF3
 18670                           intcon	equ	0xFF2
 18671                           intcon2	equ	0xFF1
 18672                           postinc0	equ	0xFEE
 18673                           plusw0	equ	0xFEB
 18674                           wreg	equ	0xFE8
 18675                           indf1	equ	0xFE7
 18676                           postdec1	equ	0xFE5
 18677                           fsr1h	equ	0xFE2
 18678                           fsr1l	equ	0xFE1
 18679                           indf2	equ	0xFDF
 18680                           postinc2	equ	0xFDE
 18681                           postdec2	equ	0xFDD
 18682                           plusw2	equ	0xFDB
 18683                           fsr2h	equ	0xFDA
 18684                           fsr2l	equ	0xFD9
 18685                           status	equ	0xFD8
 18686                           
 18687 ;; *************** function _FLASH_WriteBlock *****************
 18688 ;; Defined at:
 18689 ;;		line 93 in file "mcc_generated_files/memory.c"
 18690 ;; Parameters:    Size  Location     Type
 18691 ;;  writeAddr       4   28[COMRAM] unsigned long 
 18692 ;;  flashWrBufPt    2   32[COMRAM] PTR unsigned char 
 18693 ;;		 -> sampleArray(64), 
 18694 ;; Auto vars:     Size  Location     Type
 18695 ;;  blockStartAd    4   38[COMRAM] unsigned long 
 18696 ;;  i               1   43[COMRAM] unsigned char 
 18697 ;;  GIEBitValue     1   42[COMRAM] unsigned char 
 18698 ;; Return value:  Size  Location     Type
 18699 ;;                  1    wreg      char 
 18700 ;; Registers used:
 18701 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18702 ;; Tracked objects:
 18703 ;;		On entry : 0/0
 18704 ;;		On exit  : 0/0
 18705 ;;		Unchanged: 0/0
 18706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18707 ;;      Params:         6       0       0       0       0       0       0
 18708 ;;      Locals:         6       0       0       0       0       0       0
 18709 ;;      Temps:          4       0       0       0       0       0       0
 18710 ;;      Totals:        16       0       0       0       0       0       0
 18711 ;;Total ram usage:       16 bytes
 18712 ;; Hardware stack levels used:    1
 18713 ;; Hardware stack levels required when called:    5
 18714 ;; This function calls:
 18715 ;;		_FLASH_EraseBlock
 18716 ;; This function is called by:
 18717 ;;		_FlashSampleWrite
 18718 ;;		_FLASH_WriteByte
 18719 ;; This function uses a non-reentrant model
 18720 ;;
 18721                           
 18722                           	psect	text107
 18723  002DB8                     __ptext107:
 18724                           	opt stack 0
 18725  002DB8                     _FLASH_WriteBlock:
 18726                           	opt stack 23
 18727                           
 18728                           ;memory.c: 95: uint32_t blockStartAddr = (uint32_t )(writeAddr & ((0x8000-1) ^ ((64)-1))
      +                          );
 18729                           
 18730                           ;incstack = 0
 18731  002DB8  0EC0               	movlw	192
 18732  002DBA  6E23               	movwf	??_FLASH_WriteBlock& (0+255),c
 18733  002DBC  0E7F               	movlw	127
 18734  002DBE  6E24               	movwf	(??_FLASH_WriteBlock+1)& (0+255),c
 18735  002DC0  C01D  F025         	movff	FLASH_WriteBlock@writeAddr,??_FLASH_WriteBlock+2
 18736  002DC4  C01E  F026         	movff	FLASH_WriteBlock@writeAddr+1,??_FLASH_WriteBlock+3
 18737  002DC8  5023               	movf	??_FLASH_WriteBlock,w,c
 18738  002DCA  1625               	andwf	??_FLASH_WriteBlock+2,f,c
 18739  002DCC  5024               	movf	??_FLASH_WriteBlock+1,w,c
 18740  002DCE  1626               	andwf	??_FLASH_WriteBlock+3,f,c
 18741  002DD0  C025  F027         	movff	??_FLASH_WriteBlock+2,FLASH_WriteBlock@blockStartAddr
 18742  002DD4  C026  F028         	movff	??_FLASH_WriteBlock+3,FLASH_WriteBlock@blockStartAddr+1
 18743  002DD8  6A29               	clrf	FLASH_WriteBlock@blockStartAddr+2,c
 18744  002DDA  6A2A               	clrf	FLASH_WriteBlock@blockStartAddr+3,c
 18745                           
 18746                           ;memory.c: 96: uint8_t GIEBitValue = INTCONbits.GIE;
 18747  002DDC  0E00               	movlw	0
 18748  002DDE  BEF2               	btfsc	intcon,7,c	;volatile
 18749  002DE0  0E01               	movlw	1
 18750  002DE2  6E2B               	movwf	FLASH_WriteBlock@GIEBitValue,c
 18751                           
 18752                           ;memory.c: 97: uint8_t i;
 18753                           ;memory.c: 100: if( writeAddr != blockStartAddr )
 18754  002DE4  5027               	movf	FLASH_WriteBlock@blockStartAddr,w,c
 18755  002DE6  181D               	xorwf	FLASH_WriteBlock@writeAddr,w,c
 18756  002DE8  E144               	bnz	l1049
 18757  002DEA  5028               	movf	FLASH_WriteBlock@blockStartAddr+1,w,c
 18758  002DEC  181E               	xorwf	FLASH_WriteBlock@writeAddr+1,w,c
 18759  002DEE  E141               	bnz	l1049
 18760  002DF0  5029               	movf	FLASH_WriteBlock@blockStartAddr+2,w,c
 18761  002DF2  181F               	xorwf	FLASH_WriteBlock@writeAddr+2,w,c
 18762  002DF4  E13E               	bnz	l1049
 18763  002DF6  502A               	movf	FLASH_WriteBlock@blockStartAddr+3,w,c
 18764  002DF8  1820               	xorwf	FLASH_WriteBlock@writeAddr+3,w,c
 18765  002DFA  A4D8               	btfss	status,2,c
 18766  002DFC  0012               	return	
 18767                           
 18768                           ;memory.c: 103: }
 18769                           ;memory.c: 106: FLASH_EraseBlock(writeAddr);
 18770                           
 18771                           ;memory.c: 101: {
 18772                           ;memory.c: 102: return -1;
 18773                           ;	Return value of _FLASH_WriteBlock is never used
 18774  002DFE  C01D  F018         	movff	FLASH_WriteBlock@writeAddr,FLASH_EraseBlock@baseAddr
 18775  002E02  C01E  F019         	movff	FLASH_WriteBlock@writeAddr+1,FLASH_EraseBlock@baseAddr+1
 18776  002E06  C01F  F01A         	movff	FLASH_WriteBlock@writeAddr+2,FLASH_EraseBlock@baseAddr+2
 18777  002E0A  C020  F01B         	movff	FLASH_WriteBlock@writeAddr+3,FLASH_EraseBlock@baseAddr+3
 18778  002E0E  ECF4  F01F         	call	_FLASH_EraseBlock	;wreg free
 18779                           
 18780                           ;memory.c: 109: TBLPTRU = (uint8_t)((writeAddr & 0x00FF0000) >> 16);
 18781  002E12  C01F  FFF8         	movff	FLASH_WriteBlock@writeAddr+2,tblptru	;volatile
 18782                           
 18783                           ;memory.c: 110: TBLPTRH = (uint8_t)((writeAddr & 0x0000FF00)>> 8);
 18784  002E16  C01E  FFF7         	movff	FLASH_WriteBlock@writeAddr+1,tblptrh	;volatile
 18785                           
 18786                           ;memory.c: 111: TBLPTRL = (uint8_t)(writeAddr & 0x000000FF);
 18787  002E1A  C01D  FFF6         	movff	FLASH_WriteBlock@writeAddr,tblptrl	;volatile
 18788                           
 18789                           ;memory.c: 114: for (i=0; i<(64); i++)
 18790  002E1E  0E00               	movlw	0
 18791  002E20  6E2C               	movwf	FLASH_WriteBlock@i,c
 18792  002E22                     l8245:
 18793  002E22  0E3F               	movlw	63
 18794  002E24  642C               	cpfsgt	FLASH_WriteBlock@i,c
 18795  002E26  D001               	goto	l1050
 18796  002E28  D013               	goto	u8340
 18797  002E2A                     l1050:
 18798                           
 18799                           ;memory.c: 115: {
 18800                           ;memory.c: 116: TABLAT = flashWrBufPtr[i];
 18801  002E2A  502C               	movf	FLASH_WriteBlock@i,w,c
 18802  002E2C  0D01               	mullw	1
 18803  002E2E  50F3               	movf	prodl,w,c
 18804  002E30  2421               	addwf	FLASH_WriteBlock@flashWrBufPtr,w,c
 18805  002E32  6ED9               	movwf	fsr2l,c
 18806  002E34  50F4               	movf	prodh,w,c
 18807  002E36  2022               	addwfc	FLASH_WriteBlock@flashWrBufPtr+1,w,c
 18808  002E38  6EDA               	movwf	fsr2h,c
 18809  002E3A  50DF               	movf	indf2,w,c
 18810  002E3C  6EF5               	movwf	tablat,c	;volatile
 18811                           
 18812                           ;memory.c: 118: if (i == ((64)-1))
 18813  002E3E  0E3F               	movlw	63
 18814  002E40  182C               	xorwf	FLASH_WriteBlock@i,w,c
 18815  002E42  A4D8               	btfss	status,2,c
 18816  002E44  D002               	goto	l1052
 18817  002E46  000C               	tblwt		*	;# 
 18818                           
 18819                           ;memory.c: 121: }
 18820  002E48  D001               	goto	l1053
 18821  002E4A                     l1052:
 18822  002E4A  000D               	tblwt		*+	;# 
 18823  002E4C                     l1053:
 18824  002E4C  2A2C               	incf	FLASH_WriteBlock@i,f,c
 18825  002E4E  D7E9               	goto	l8245
 18826  002E50                     u8340:
 18827                           
 18828                           ;memory.c: 125: }
 18829                           ;memory.c: 126: }
 18830                           ;memory.c: 128: PIR2bits.EEIF = 1;
 18831  002E50  88A1               	bsf	4001,4,c	;volatile
 18832                           
 18833                           ;memory.c: 129: EECON1bits.EEPGD = 1;
 18834  002E52  8EA6               	bsf	4006,7,c	;volsfr
 18835                           
 18836                           ;memory.c: 130: EECON1bits.CFGS = 0;
 18837  002E54  9CA6               	bcf	4006,6,c	;volsfr
 18838                           
 18839                           ;memory.c: 131: EECON1bits.WREN = 1;
 18840  002E56  84A6               	bsf	4006,2,c	;volsfr
 18841                           
 18842                           ;memory.c: 132: INTCONbits.GIE = 0;
 18843  002E58  9EF2               	bcf	intcon,7,c	;volatile
 18844                           
 18845                           ;memory.c: 133: EECON2 = 0x55;
 18846  002E5A  0E55               	movlw	85
 18847  002E5C  6EA7               	movwf	4007,c	;volsfr
 18848                           
 18849                           ;memory.c: 134: EECON2 = 0xAA;
 18850  002E5E  0EAA               	movlw	170
 18851  002E60  6EA7               	movwf	4007,c	;volsfr
 18852                           
 18853                           ;memory.c: 135: EECON1bits.WR = 1;
 18854  002E62  82A6               	bsf	4006,1,c	;volsfr
 18855                           
 18856                           ;memory.c: 137: EECON1bits.WREN = 0;
 18857  002E64  94A6               	bcf	4006,2,c	;volsfr
 18858                           
 18859                           ;memory.c: 138: INTCONbits.GIE = GIEBitValue;
 18860  002E66  B02B               	btfsc	FLASH_WriteBlock@GIEBitValue,0,c
 18861  002E68  D002               	bra	u8355
 18862  002E6A  9EF2               	bcf	intcon,7,c	;volatile
 18863  002E6C  D001               	bra	u8356
 18864  002E6E                     u8355:
 18865  002E6E  8EF2               	bsf	intcon,7,c	;volatile
 18866  002E70                     u8356:
 18867  002E70  0012               	return	
 18868  002E72                     l1049:
 18869  002E72  0012               	return		;funcret
 18870  002E74                     __end_of_FLASH_WriteBlock:
 18871                           	opt stack 0
 18872                           tosu	equ	0xFFF
 18873                           tosh	equ	0xFFE
 18874                           tosl	equ	0xFFD
 18875                           pclath	equ	0xFFA
 18876                           tblptru	equ	0xFF8
 18877                           tblptrh	equ	0xFF7
 18878                           tblptrl	equ	0xFF6
 18879                           tablat	equ	0xFF5
 18880                           prodh	equ	0xFF4
 18881                           prodl	equ	0xFF3
 18882                           intcon	equ	0xFF2
 18883                           intcon2	equ	0xFF1
 18884                           postinc0	equ	0xFEE
 18885                           plusw0	equ	0xFEB
 18886                           wreg	equ	0xFE8
 18887                           indf1	equ	0xFE7
 18888                           postdec1	equ	0xFE5
 18889                           fsr1h	equ	0xFE2
 18890                           fsr1l	equ	0xFE1
 18891                           indf2	equ	0xFDF
 18892                           postinc2	equ	0xFDE
 18893                           postdec2	equ	0xFDD
 18894                           plusw2	equ	0xFDB
 18895                           fsr2h	equ	0xFDA
 18896                           fsr2l	equ	0xFD9
 18897                           status	equ	0xFD8
 18898                           
 18899 ;; *************** function _FLASH_EraseBlock *****************
 18900 ;; Defined at:
 18901 ;;		line 144 in file "mcc_generated_files/memory.c"
 18902 ;; Parameters:    Size  Location     Type
 18903 ;;  baseAddr        4   23[COMRAM] unsigned long 
 18904 ;; Auto vars:     Size  Location     Type
 18905 ;;  GIEBitValue     1   27[COMRAM] unsigned char 
 18906 ;; Return value:  Size  Location     Type
 18907 ;;                  1    wreg      void 
 18908 ;; Registers used:
 18909 ;;		wreg, status,2
 18910 ;; Tracked objects:
 18911 ;;		On entry : 0/0
 18912 ;;		On exit  : 0/0
 18913 ;;		Unchanged: 0/0
 18914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18915 ;;      Params:         4       0       0       0       0       0       0
 18916 ;;      Locals:         1       0       0       0       0       0       0
 18917 ;;      Temps:          0       0       0       0       0       0       0
 18918 ;;      Totals:         5       0       0       0       0       0       0
 18919 ;;Total ram usage:        5 bytes
 18920 ;; Hardware stack levels used:    1
 18921 ;; Hardware stack levels required when called:    4
 18922 ;; This function calls:
 18923 ;;		Nothing
 18924 ;; This function is called by:
 18925 ;;		_FLASH_WriteBlock
 18926 ;; This function uses a non-reentrant model
 18927 ;;
 18928                           
 18929                           	psect	text108
 18930  003FE8                     __ptext108:
 18931                           	opt stack 0
 18932  003FE8                     _FLASH_EraseBlock:
 18933                           	opt stack 23
 18934                           
 18935                           ;memory.c: 146: uint8_t GIEBitValue = INTCONbits.GIE;
 18936                           
 18937                           ;incstack = 0
 18938  003FE8  0E00               	movlw	0
 18939  003FEA  BEF2               	btfsc	intcon,7,c	;volatile
 18940  003FEC  0E01               	movlw	1
 18941  003FEE  6E1C               	movwf	FLASH_EraseBlock@GIEBitValue,c
 18942                           
 18943                           ;memory.c: 148: TBLPTRU = (uint8_t)((baseAddr & 0x00FF0000) >> 16);
 18944  003FF0  C01A  FFF8         	movff	FLASH_EraseBlock@baseAddr+2,tblptru	;volatile
 18945                           
 18946                           ;memory.c: 149: TBLPTRH = (uint8_t)((baseAddr & 0x0000FF00)>> 8);
 18947  003FF4  C019  FFF7         	movff	FLASH_EraseBlock@baseAddr+1,tblptrh	;volatile
 18948                           
 18949                           ;memory.c: 150: TBLPTRL = (uint8_t)(baseAddr & 0x000000FF);
 18950  003FF8  C018  FFF6         	movff	FLASH_EraseBlock@baseAddr,tblptrl	;volatile
 18951                           
 18952                           ;memory.c: 152: EECON1bits.EEPGD = 1;
 18953  003FFC  8EA6               	bsf	4006,7,c	;volsfr
 18954                           
 18955                           ;memory.c: 153: EECON1bits.CFGS = 0;
 18956  003FFE  9CA6               	bcf	4006,6,c	;volsfr
 18957                           
 18958                           ;memory.c: 154: EECON1bits.WREN = 1;
 18959  004000  84A6               	bsf	4006,2,c	;volsfr
 18960                           
 18961                           ;memory.c: 155: EECON1bits.FREE = 1;
 18962  004002  88A6               	bsf	4006,4,c	;volsfr
 18963                           
 18964                           ;memory.c: 156: INTCONbits.GIE = 0;
 18965  004004  9EF2               	bcf	intcon,7,c	;volatile
 18966                           
 18967                           ;memory.c: 157: EECON2 = 0x55;
 18968  004006  0E55               	movlw	85
 18969  004008  6EA7               	movwf	4007,c	;volsfr
 18970                           
 18971                           ;memory.c: 158: EECON2 = 0xAA;
 18972  00400A  0EAA               	movlw	170
 18973  00400C  6EA7               	movwf	4007,c	;volsfr
 18974                           
 18975                           ;memory.c: 159: EECON1bits.WR = 1;
 18976  00400E  82A6               	bsf	4006,1,c	;volsfr
 18977                           
 18978                           ;memory.c: 160: INTCONbits.GIE = GIEBitValue;
 18979  004010  B01C               	btfsc	FLASH_EraseBlock@GIEBitValue,0,c
 18980  004012  D002               	bra	u8215
 18981  004014  9EF2               	bcf	intcon,7,c	;volatile
 18982  004016  D001               	bra	u8216
 18983  004018                     u8215:
 18984  004018  8EF2               	bsf	intcon,7,c	;volatile
 18985  00401A                     u8216:
 18986  00401A  0012               	return		;funcret
 18987  00401C                     __end_of_FLASH_EraseBlock:
 18988                           	opt stack 0
 18989                           tosu	equ	0xFFF
 18990                           tosh	equ	0xFFE
 18991                           tosl	equ	0xFFD
 18992                           pclath	equ	0xFFA
 18993                           tblptru	equ	0xFF8
 18994                           tblptrh	equ	0xFF7
 18995                           tblptrl	equ	0xFF6
 18996                           tablat	equ	0xFF5
 18997                           prodh	equ	0xFF4
 18998                           prodl	equ	0xFF3
 18999                           intcon	equ	0xFF2
 19000                           intcon2	equ	0xFF1
 19001                           postinc0	equ	0xFEE
 19002                           plusw0	equ	0xFEB
 19003                           wreg	equ	0xFE8
 19004                           indf1	equ	0xFE7
 19005                           postdec1	equ	0xFE5
 19006                           fsr1h	equ	0xFE2
 19007                           fsr1l	equ	0xFE1
 19008                           indf2	equ	0xFDF
 19009                           postinc2	equ	0xFDE
 19010                           postdec2	equ	0xFDD
 19011                           plusw2	equ	0xFDB
 19012                           fsr2h	equ	0xFDA
 19013                           fsr2l	equ	0xFD9
 19014                           status	equ	0xFD8
 19015                           
 19016 ;; *************** function _FLASH_IsWriteDone *****************
 19017 ;; Defined at:
 19018 ;;		line 189 in file "mcc_generated_files/memory.c"
 19019 ;; Parameters:    Size  Location     Type
 19020 ;;		None
 19021 ;; Auto vars:     Size  Location     Type
 19022 ;;		None
 19023 ;; Return value:  Size  Location     Type
 19024 ;;                  1    wreg      unsigned char 
 19025 ;; Registers used:
 19026 ;;		wreg
 19027 ;; Tracked objects:
 19028 ;;		On entry : 0/0
 19029 ;;		On exit  : 0/0
 19030 ;;		Unchanged: 0/0
 19031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19032 ;;      Params:         0       0       0       0       0       0       0
 19033 ;;      Locals:         0       0       0       0       0       0       0
 19034 ;;      Temps:          0       0       0       0       0       0       0
 19035 ;;      Totals:         0       0       0       0       0       0       0
 19036 ;;Total ram usage:        0 bytes
 19037 ;; Hardware stack levels used:    1
 19038 ;; Hardware stack levels required when called:    4
 19039 ;; This function calls:
 19040 ;;		Nothing
 19041 ;; This function is called by:
 19042 ;;		_FlashSampleWrite
 19043 ;;		_FlashReadUart
 19044 ;; This function uses a non-reentrant model
 19045 ;;
 19046                           
 19047                           	psect	text109
 19048  0043FA                     __ptext109:
 19049                           	opt stack 0
 19050  0043FA                     _FLASH_IsWriteDone:
 19051                           	opt stack 23
 19052                           
 19053                           ;memory.c: 191: return (EECON1bits.WR == 0);
 19054                           
 19055                           ;incstack = 0
 19056  0043FA  A2A6               	btfss	4006,1,c	;volsfr
 19057  0043FC  D001               	goto	u8001
 19058  0043FE  D002               	goto	u8000
 19059  004400                     u8001:
 19060  004400  0E01               	movlw	1
 19061  004402  0012               	return	
 19062  004404                     u8000:
 19063  004404  0E00               	movlw	0
 19064  004406  0012               	return	
 19065  004408                     __end_of_FLASH_IsWriteDone:
 19066                           	opt stack 0
 19067                           tosu	equ	0xFFF
 19068                           tosh	equ	0xFFE
 19069                           tosl	equ	0xFFD
 19070                           pclath	equ	0xFFA
 19071                           tblptru	equ	0xFF8
 19072                           tblptrh	equ	0xFF7
 19073                           tblptrl	equ	0xFF6
 19074                           tablat	equ	0xFF5
 19075                           prodh	equ	0xFF4
 19076                           prodl	equ	0xFF3
 19077                           intcon	equ	0xFF2
 19078                           intcon2	equ	0xFF1
 19079                           postinc0	equ	0xFEE
 19080                           plusw0	equ	0xFEB
 19081                           wreg	equ	0xFE8
 19082                           indf1	equ	0xFE7
 19083                           postdec1	equ	0xFE5
 19084                           fsr1h	equ	0xFE2
 19085                           fsr1l	equ	0xFE1
 19086                           indf2	equ	0xFDF
 19087                           postinc2	equ	0xFDE
 19088                           postdec2	equ	0xFDD
 19089                           plusw2	equ	0xFDB
 19090                           fsr2h	equ	0xFDA
 19091                           fsr2l	equ	0xFD9
 19092                           status	equ	0xFD8
 19093                           
 19094 ;; *************** function _ADC_GetConversion *****************
 19095 ;; Defined at:
 19096 ;;		line 106 in file "mcc_generated_files/adc.c"
 19097 ;; Parameters:    Size  Location     Type
 19098 ;;  channel         1    wreg     enum E6975
 19099 ;; Auto vars:     Size  Location     Type
 19100 ;;  channel         1   27[COMRAM] enum E6975
 19101 ;; Return value:  Size  Location     Type
 19102 ;;                  2   23[COMRAM] unsigned int 
 19103 ;; Registers used:
 19104 ;;		wreg, status,2, status,0
 19105 ;; Tracked objects:
 19106 ;;		On entry : 0/0
 19107 ;;		On exit  : 0/0
 19108 ;;		Unchanged: 0/0
 19109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19110 ;;      Params:         2       0       0       0       0       0       0
 19111 ;;      Locals:         1       0       0       0       0       0       0
 19112 ;;      Temps:          2       0       0       0       0       0       0
 19113 ;;      Totals:         5       0       0       0       0       0       0
 19114 ;;Total ram usage:        5 bytes
 19115 ;; Hardware stack levels used:    1
 19116 ;; Hardware stack levels required when called:    4
 19117 ;; This function calls:
 19118 ;;		Nothing
 19119 ;; This function is called by:
 19120 ;;		_AdcConvert
 19121 ;; This function uses a non-reentrant model
 19122 ;;
 19123                           
 19124                           	psect	text110
 19125  00407C                     __ptext110:
 19126                           	opt stack 0
 19127  00407C                     _ADC_GetConversion:
 19128                           	opt stack 25
 19129                           
 19130                           ;incstack = 0
 19131                           ;ADC_GetConversion@channel stored from wreg
 19132  00407C  6E1C               	movwf	ADC_GetConversion@channel,c
 19133                           
 19134                           ;adc.c: 109: ADCON0bits.CHS = channel;
 19135  00407E  C01C  F01A         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
 19136  004082  461A               	rlncf	??_ADC_GetConversion,f,c
 19137  004084  461A               	rlncf	??_ADC_GetConversion,f,c
 19138  004086  50C2               	movf	4034,w,c	;volatile
 19139  004088  181A               	xorwf	??_ADC_GetConversion,w,c
 19140  00408A  0B83               	andlw	-125
 19141  00408C  181A               	xorwf	??_ADC_GetConversion,w,c
 19142  00408E  6EC2               	movwf	4034,c	;volatile
 19143                           
 19144                           ;adc.c: 112: ADCON0bits.ADON = 1;
 19145  004090  80C2               	bsf	4034,0,c	;volatile
 19146                           
 19147                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
 19148  004092  82C2               	bsf	4034,1,c	;volatile
 19149  004094                     
 19150                           ;adc.c: 119: {
 19151  004094  B2C2               	btfsc	4034,1,c	;volatile
 19152  004096  D7FE               	goto	l1166
 19153                           
 19154                           ;adc.c: 120: }
 19155                           ;adc.c: 122: return ((ADRESH << 8) + ADRESL);
 19156  004098  50C4               	movf	4036,w,c	;volatile
 19157  00409A  6E1B               	movwf	(??_ADC_GetConversion+1)& (0+255),c
 19158  00409C  6A1A               	clrf	??_ADC_GetConversion& (0+255),c
 19159  00409E  50C3               	movf	4035,w,c	;volatile
 19160  0040A0  241A               	addwf	??_ADC_GetConversion,w,c
 19161  0040A2  6E18               	movwf	?_ADC_GetConversion,c
 19162  0040A4  0E00               	movlw	0
 19163  0040A6  201B               	addwfc	??_ADC_GetConversion+1,w,c
 19164  0040A8  6E19               	movwf	?_ADC_GetConversion+1,c
 19165  0040AA  0012               	return	
 19166  0040AC                     __end_of_ADC_GetConversion:
 19167                           	opt stack 0
 19168                           tosu	equ	0xFFF
 19169                           tosh	equ	0xFFE
 19170                           tosl	equ	0xFFD
 19171                           pclath	equ	0xFFA
 19172                           tblptru	equ	0xFF8
 19173                           tblptrh	equ	0xFF7
 19174                           tblptrl	equ	0xFF6
 19175                           tablat	equ	0xFF5
 19176                           prodh	equ	0xFF4
 19177                           prodl	equ	0xFF3
 19178                           intcon	equ	0xFF2
 19179                           intcon2	equ	0xFF1
 19180                           postinc0	equ	0xFEE
 19181                           plusw0	equ	0xFEB
 19182                           wreg	equ	0xFE8
 19183                           indf1	equ	0xFE7
 19184                           postdec1	equ	0xFE5
 19185                           fsr1h	equ	0xFE2
 19186                           fsr1l	equ	0xFE1
 19187                           indf2	equ	0xFDF
 19188                           postinc2	equ	0xFDE
 19189                           postdec2	equ	0xFDD
 19190                           plusw2	equ	0xFDB
 19191                           fsr2h	equ	0xFDA
 19192                           fsr2l	equ	0xFD9
 19193                           status	equ	0xFD8
 19194                           
 19195 ;; *************** function _INTERRUPT_InterruptManager *****************
 19196 ;; Defined at:
 19197 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 19198 ;; Parameters:    Size  Location     Type
 19199 ;;		None
 19200 ;; Auto vars:     Size  Location     Type
 19201 ;;		None
 19202 ;; Return value:  Size  Location     Type
 19203 ;;                  1    wreg      void 
 19204 ;; Registers used:
 19205 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 19206 ;; Tracked objects:
 19207 ;;		On entry : 0/0
 19208 ;;		On exit  : 0/0
 19209 ;;		Unchanged: 0/0
 19210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19211 ;;      Params:         0       0       0       0       0       0       0
 19212 ;;      Locals:         0       0       0       0       0       0       0
 19213 ;;      Temps:         18       0       0       0       0       0       0
 19214 ;;      Totals:        18       0       0       0       0       0       0
 19215 ;;Total ram usage:       18 bytes
 19216 ;; Hardware stack levels used:    1
 19217 ;; Hardware stack levels required when called:    3
 19218 ;; This function calls:
 19219 ;;		_EUSART1_Receive_ISR
 19220 ;;		_EUSART1_Transmit_ISR
 19221 ;;		_MEMORY_ISR
 19222 ;;		_PIN_MANAGER_IOC
 19223 ;;		_TMR0_ISR
 19224 ;; This function is called by:
 19225 ;;		Interrupt level 2
 19226 ;; This function uses a non-reentrant model
 19227 ;;
 19228                           
 19229                           	psect	intcode
 19230  000008                     __pintcode:
 19231                           	opt stack 0
 19232  000008                     _INTERRUPT_InterruptManager:
 19233                           	opt stack 17
 19234                           
 19235                           ;incstack = 0
 19236  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19237  00000A  CFFA F006          	movff	pclath,??_INTERRUPT_InterruptManager
 19238  00000E  CFFB F007          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 19239  000012  CFE9 F008          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 19240  000016  CFEA F009          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 19241  00001A  CFE1 F00A          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 19242  00001E  CFE2 F00B          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 19243  000022  CFD9 F00C          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 19244  000026  CFDA F00D          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 19245  00002A  CFF3 F00E          	movff	prodl,??_INTERRUPT_InterruptManager+8
 19246  00002E  CFF4 F00F          	movff	prodh,??_INTERRUPT_InterruptManager+9
 19247  000032  CFF6 F010          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 19248  000036  CFF7 F011          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 19249  00003A  CFF8 F012          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 19250  00003E  CFF5 F013          	movff	tablat,??_INTERRUPT_InterruptManager+13
 19251  000042  C048  F014         	movff	btemp,??_INTERRUPT_InterruptManager+14
 19252  000046  C049  F015         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 19253  00004A  C04A  F016         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 19254  00004E  C04B  F017         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 19255                           
 19256                           ;interrupt_manager.c: 60: if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
 19257  000052  B6F2               	btfsc	intcon,3,c	;volatile
 19258  000054  A0F2               	btfss	intcon,0,c	;volatile
 19259  000056  D003               	goto	i2l847
 19260                           
 19261                           ;interrupt_manager.c: 61: {
 19262                           ;interrupt_manager.c: 62: PIN_MANAGER_IOC();
 19263  000058  ECE0  F021         	call	_PIN_MANAGER_IOC	;wreg free
 19264                           
 19265                           ;interrupt_manager.c: 63: }
 19266  00005C  D019               	goto	i2l856
 19267  00005E                     i2l847:
 19268                           
 19269                           ;interrupt_manager.c: 64: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 19270  00005E  BAF2               	btfsc	intcon,5,c	;volatile
 19271  000060  A4F2               	btfss	intcon,2,c	;volatile
 19272  000062  D003               	goto	i2l849
 19273                           
 19274                           ;interrupt_manager.c: 65: {
 19275                           ;interrupt_manager.c: 66: TMR0_ISR();
 19276  000064  ECE8  F017         	call	_TMR0_ISR	;wreg free
 19277                           
 19278                           ;interrupt_manager.c: 67: }
 19279  000068  D013               	goto	i2l856
 19280  00006A                     i2l849:
 19281                           
 19282                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1)
 19283  00006A  ACF2               	btfss	intcon,6,c	;volatile
 19284  00006C  D011               	goto	i2l856
 19285                           
 19286                           ;interrupt_manager.c: 69: {
 19287                           ;interrupt_manager.c: 70: if(PIE2bits.EEIE == 1 && PIR2bits.EEIF == 1)
 19288  00006E  B8A0               	btfsc	4000,4,c	;volatile
 19289  000070  A8A1               	btfss	4001,4,c	;volatile
 19290  000072  D003               	goto	i2l852
 19291                           
 19292                           ;interrupt_manager.c: 71: {
 19293                           ;interrupt_manager.c: 72: MEMORY_ISR();
 19294  000074  EC34  F022         	call	_MEMORY_ISR	;wreg free
 19295                           
 19296                           ;interrupt_manager.c: 73: }
 19297  000078  D00B               	goto	i2l856
 19298  00007A                     i2l852:
 19299                           
 19300                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 19301  00007A  B89D               	btfsc	3997,4,c	;volatile
 19302  00007C  A89E               	btfss	3998,4,c	;volatile
 19303  00007E  D003               	goto	i2l854
 19304                           
 19305                           ;interrupt_manager.c: 75: {
 19306                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
 19307  000080  EC6E  F01F         	call	_EUSART1_Transmit_ISR	;wreg free
 19308                           
 19309                           ;interrupt_manager.c: 77: }
 19310  000084  D005               	goto	i2l856
 19311  000086                     i2l854:
 19312                           
 19313                           ;interrupt_manager.c: 78: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 19314  000086  BA9D               	btfsc	3997,5,c	;volatile
 19315  000088  AA9E               	btfss	3998,5,c	;volatile
 19316  00008A  D002               	goto	i2l856
 19317                           
 19318                           ;interrupt_manager.c: 79: {
 19319                           ;interrupt_manager.c: 80: EUSART1_Receive_ISR();
 19320  00008C  EC56  F020         	call	_EUSART1_Receive_ISR	;wreg free
 19321  000090                     i2l856:
 19322                           
 19323                           ;interrupt_manager.c: 87: else
 19324                           ;interrupt_manager.c: 88: {
 19325                           
 19326                           ;interrupt_manager.c: 85: }
 19327                           ;interrupt_manager.c: 86: }
 19328                           
 19329                           ;interrupt_manager.c: 82: else
 19330                           ;interrupt_manager.c: 83: {
 19331  000090  C017  F04B         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 19332  000094  C016  F04A         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 19333  000098  C015  F049         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 19334  00009C  C014  F048         	movff	??_INTERRUPT_InterruptManager+14,btemp
 19335  0000A0  C013  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 19336  0000A4  C012  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 19337  0000A8  C011  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 19338  0000AC  C010  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 19339  0000B0  C00F  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 19340  0000B4  C00E  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 19341  0000B8  C00D  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 19342  0000BC  C00C  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 19343  0000C0  C00B  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 19344  0000C4  C00A  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 19345  0000C8  C009  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 19346  0000CC  C008  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 19347  0000D0  C007  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 19348  0000D4  C006  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 19349  0000D8  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 19350  0000DA  0011               	retfie		f
 19351  0000DC                     __end_of_INTERRUPT_InterruptManager:
 19352                           	opt stack 0
 19353                           tosu	equ	0xFFF
 19354                           tosh	equ	0xFFE
 19355                           tosl	equ	0xFFD
 19356                           pclatu	equ	0xFFB
 19357                           pclath	equ	0xFFA
 19358                           tblptru	equ	0xFF8
 19359                           tblptrh	equ	0xFF7
 19360                           tblptrl	equ	0xFF6
 19361                           tablat	equ	0xFF5
 19362                           prodh	equ	0xFF4
 19363                           prodl	equ	0xFF3
 19364                           intcon	equ	0xFF2
 19365                           intcon2	equ	0xFF1
 19366                           postinc0	equ	0xFEE
 19367                           plusw0	equ	0xFEB
 19368                           fsr0h	equ	0xFEA
 19369                           fsr0l	equ	0xFE9
 19370                           wreg	equ	0xFE8
 19371                           indf1	equ	0xFE7
 19372                           postdec1	equ	0xFE5
 19373                           fsr1h	equ	0xFE2
 19374                           fsr1l	equ	0xFE1
 19375                           indf2	equ	0xFDF
 19376                           postinc2	equ	0xFDE
 19377                           postdec2	equ	0xFDD
 19378                           plusw2	equ	0xFDB
 19379                           fsr2h	equ	0xFDA
 19380                           fsr2l	equ	0xFD9
 19381                           status	equ	0xFD8
 19382                           
 19383 ;; *************** function _TMR0_ISR *****************
 19384 ;; Defined at:
 19385 ;;		line 132 in file "mcc_generated_files/tmr0.c"
 19386 ;; Parameters:    Size  Location     Type
 19387 ;;		None
 19388 ;; Auto vars:     Size  Location     Type
 19389 ;;		None
 19390 ;; Return value:  Size  Location     Type
 19391 ;;                  1    wreg      void 
 19392 ;; Registers used:
 19393 ;;		wreg, status,2, status,0, cstack
 19394 ;; Tracked objects:
 19395 ;;		On entry : 0/0
 19396 ;;		On exit  : 0/0
 19397 ;;		Unchanged: 0/0
 19398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19399 ;;      Params:         0       0       0       0       0       0       0
 19400 ;;      Locals:         0       0       0       0       0       0       0
 19401 ;;      Temps:          0       0       0       0       0       0       0
 19402 ;;      Totals:         0       0       0       0       0       0       0
 19403 ;;Total ram usage:        0 bytes
 19404 ;; Hardware stack levels used:    1
 19405 ;; Hardware stack levels required when called:    1
 19406 ;; This function calls:
 19407 ;;		___lwmod
 19408 ;; This function is called by:
 19409 ;;		_INTERRUPT_InterruptManager
 19410 ;; This function uses a non-reentrant model
 19411 ;;
 19412                           
 19413                           	psect	text112
 19414  002FD0                     __ptext112:
 19415                           	opt stack 0
 19416  002FD0                     _TMR0_ISR:
 19417                           	opt stack 18
 19418                           
 19419                           ;tmr0.c: 134: static volatile uint16_t CountCallBack = 0;
 19420                           ;tmr0.c: 137: INTCONbits.TMR0IF = 0;
 19421                           
 19422                           ;incstack = 0
 19423  002FD0  94F2               	bcf	intcon,2,c	;volatile
 19424                           
 19425                           ;tmr0.c: 141: TMR0H = timer0ReloadVal >> 8;
 19426  002FD2  5047               	movf	_timer0ReloadVal+1,w,c	;volatile
 19427  002FD4  6ED7               	movwf	4055,c	;volatile
 19428                           
 19429                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal;
 19430  002FD6  C046  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 19431                           
 19432                           ;tmr0.c: 144: CountCallBack++;
 19433  002FDA  4A31               	infsnz	TMR0_ISR@CountCallBack,f,c	;volatile
 19434  002FDC  2A32               	incf	TMR0_ISR@CountCallBack+1,f,c	;volatile
 19435                           
 19436                           ;tmr0.c: 145: if ((CountCallBack % 250) == 0)
 19437  002FDE  C031  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 19438  002FE2  C032  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 19439  002FE6  0E00               	movlw	0
 19440  002FE8  6E04               	movwf	___lwmod@divisor+1,c
 19441  002FEA  0EFA               	movlw	250
 19442  002FEC  6E03               	movwf	___lwmod@divisor,c
 19443  002FEE  EC64  F01E         	call	___lwmod	;wreg free
 19444  002FF2  5001               	movf	?___lwmod,w,c
 19445  002FF4  1002               	iorwf	?___lwmod+1,w,c
 19446  002FF6  A4D8               	btfss	status,2,c
 19447  002FF8  D003               	goto	i2l1120
 19448                           
 19449                           ;tmr0.c: 146: {
 19450                           ;tmr0.c: 147: Timer0_SynthLd = 1;
 19451  002FFA  0E01               	movlw	1
 19452  002FFC  0100               	movlb	0	; () banked
 19453  002FFE  6FFA               	movwf	_Timer0_SynthLd& (0+255),b	;volatile
 19454  003000                     i2l1120:
 19455                           
 19456                           ;tmr0.c: 148: }
 19457                           ;tmr0.c: 149: if ((CountCallBack % 800) == 0)
 19458                           
 19459                           ; BSR set to: 0
 19460  003000  C031  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 19461  003004  C032  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 19462  003008  0E03               	movlw	3
 19463  00300A  6E04               	movwf	___lwmod@divisor+1,c
 19464  00300C  0E20               	movlw	32
 19465  00300E  6E03               	movwf	___lwmod@divisor,c
 19466  003010  EC64  F01E         	call	___lwmod	;wreg free
 19467  003014  5001               	movf	?___lwmod,w,c
 19468  003016  1002               	iorwf	?___lwmod+1,w,c
 19469  003018  A4D8               	btfss	status,2,c
 19470  00301A  D003               	goto	i2l1121
 19471                           
 19472                           ;tmr0.c: 150: {
 19473                           ;tmr0.c: 151: Timer0_Sampling = 1;
 19474  00301C  0E01               	movlw	1
 19475  00301E  0100               	movlb	0	; () banked
 19476  003020  6FF9               	movwf	_Timer0_Sampling& (0+255),b	;volatile
 19477  003022                     i2l1121:
 19478                           
 19479                           ;tmr0.c: 152: }
 19480                           ;tmr0.c: 153: if ((CountCallBack % 350) == 0)
 19481                           
 19482                           ; BSR set to: 0
 19483  003022  C031  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 19484  003026  C032  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 19485  00302A  0E01               	movlw	1
 19486  00302C  6E04               	movwf	___lwmod@divisor+1,c
 19487  00302E  0E5E               	movlw	94
 19488  003030  6E03               	movwf	___lwmod@divisor,c
 19489  003032  EC64  F01E         	call	___lwmod	;wreg free
 19490  003036  5001               	movf	?___lwmod,w,c
 19491  003038  1002               	iorwf	?___lwmod+1,w,c
 19492  00303A  A4D8               	btfss	status,2,c
 19493  00303C  D003               	goto	i2l1122
 19494                           
 19495                           ;tmr0.c: 154: {
 19496                           ;tmr0.c: 155: Timer0_KeepAlive = 1;
 19497  00303E  0E01               	movlw	1
 19498  003040  0100               	movlb	0	; () banked
 19499  003042  6FF8               	movwf	_Timer0_KeepAlive& (0+255),b	;volatile
 19500  003044                     i2l1122:
 19501                           
 19502                           ;tmr0.c: 156: }
 19503                           ;tmr0.c: 157: if ((CountCallBack % 10) == 0)
 19504                           
 19505                           ; BSR set to: 0
 19506  003044  C031  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 19507  003048  C032  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 19508  00304C  0E00               	movlw	0
 19509  00304E  6E04               	movwf	___lwmod@divisor+1,c
 19510  003050  0E0A               	movlw	10
 19511  003052  6E03               	movwf	___lwmod@divisor,c
 19512  003054  EC64  F01E         	call	___lwmod	;wreg free
 19513  003058  5001               	movf	?___lwmod,w,c
 19514  00305A  1002               	iorwf	?___lwmod+1,w,c
 19515  00305C  A4D8               	btfss	status,2,c
 19516  00305E  D003               	goto	i2l1123
 19517                           
 19518                           ;tmr0.c: 158: {
 19519                           ;tmr0.c: 159: Timer0_OneSec = 1;
 19520  003060  0E01               	movlw	1
 19521  003062  0100               	movlb	0	; () banked
 19522  003064  6FF7               	movwf	_Timer0_OneSec& (0+255),b	;volatile
 19523  003066                     i2l1123:
 19524                           
 19525                           ;tmr0.c: 160: }
 19526                           ;tmr0.c: 161: if(CountCallBack >= 35000)
 19527                           
 19528                           ; BSR set to: 0
 19529  003066  0EB8               	movlw	184
 19530  003068  5C31               	subwf	TMR0_ISR@CountCallBack,w,c	;volatile
 19531  00306A  0E88               	movlw	136
 19532  00306C  5832               	subwfb	TMR0_ISR@CountCallBack+1,w,c	;volatile
 19533  00306E  A0D8               	btfss	status,0,c
 19534  003070  0012               	return	
 19535                           
 19536                           ;tmr0.c: 163: {
 19537                           ;tmr0.c: 165: CountCallBack = 0;
 19538  003072  0E00               	movlw	0
 19539  003074  6E32               	movwf	TMR0_ISR@CountCallBack+1,c	;volatile
 19540  003076  0E00               	movlw	0
 19541  003078  6E31               	movwf	TMR0_ISR@CountCallBack,c	;volatile
 19542  00307A  0012               	return	
 19543  00307C                     __end_of_TMR0_ISR:
 19544                           	opt stack 0
 19545                           tosu	equ	0xFFF
 19546                           tosh	equ	0xFFE
 19547                           tosl	equ	0xFFD
 19548                           pclatu	equ	0xFFB
 19549                           pclath	equ	0xFFA
 19550                           tblptru	equ	0xFF8
 19551                           tblptrh	equ	0xFF7
 19552                           tblptrl	equ	0xFF6
 19553                           tablat	equ	0xFF5
 19554                           prodh	equ	0xFF4
 19555                           prodl	equ	0xFF3
 19556                           intcon	equ	0xFF2
 19557                           intcon2	equ	0xFF1
 19558                           postinc0	equ	0xFEE
 19559                           plusw0	equ	0xFEB
 19560                           fsr0h	equ	0xFEA
 19561                           fsr0l	equ	0xFE9
 19562                           wreg	equ	0xFE8
 19563                           indf1	equ	0xFE7
 19564                           postdec1	equ	0xFE5
 19565                           fsr1h	equ	0xFE2
 19566                           fsr1l	equ	0xFE1
 19567                           indf2	equ	0xFDF
 19568                           postinc2	equ	0xFDE
 19569                           postdec2	equ	0xFDD
 19570                           plusw2	equ	0xFDB
 19571                           fsr2h	equ	0xFDA
 19572                           fsr2l	equ	0xFD9
 19573                           status	equ	0xFD8
 19574                           
 19575 ;; *************** function ___lwmod *****************
 19576 ;; Defined at:
 19577 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 19578 ;; Parameters:    Size  Location     Type
 19579 ;;  dividend        2    0[COMRAM] unsigned int 
 19580 ;;  divisor         2    2[COMRAM] unsigned int 
 19581 ;; Auto vars:     Size  Location     Type
 19582 ;;  counter         1    4[COMRAM] unsigned char 
 19583 ;; Return value:  Size  Location     Type
 19584 ;;                  2    0[COMRAM] unsigned int 
 19585 ;; Registers used:
 19586 ;;		wreg, status,2, status,0
 19587 ;; Tracked objects:
 19588 ;;		On entry : 0/0
 19589 ;;		On exit  : 0/0
 19590 ;;		Unchanged: 0/0
 19591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19592 ;;      Params:         4       0       0       0       0       0       0
 19593 ;;      Locals:         1       0       0       0       0       0       0
 19594 ;;      Temps:          0       0       0       0       0       0       0
 19595 ;;      Totals:         5       0       0       0       0       0       0
 19596 ;;Total ram usage:        5 bytes
 19597 ;; Hardware stack levels used:    1
 19598 ;; This function calls:
 19599 ;;		Nothing
 19600 ;; This function is called by:
 19601 ;;		_TMR0_ISR
 19602 ;; This function uses a non-reentrant model
 19603 ;;
 19604                           
 19605                           	psect	text113
 19606  003CC8                     __ptext113:
 19607                           	opt stack 0
 19608  003CC8                     ___lwmod:
 19609                           	opt stack 18
 19610                           
 19611                           ;incstack = 0
 19612  003CC8  5003               	movf	___lwmod@divisor,w,c
 19613  003CCA  1004               	iorwf	___lwmod@divisor+1,w,c
 19614  003CCC  B4D8               	btfsc	status,2,c
 19615  003CCE  D018               	goto	i2l2019
 19616  003CD0  0E01               	movlw	1
 19617  003CD2  6E05               	movwf	___lwmod@counter,c
 19618  003CD4  D004               	goto	i2l2014
 19619  003CD6  90D8               	bcf	status,0,c
 19620  003CD8  3603               	rlcf	___lwmod@divisor,f,c
 19621  003CDA  3604               	rlcf	___lwmod@divisor+1,f,c
 19622  003CDC  2A05               	incf	___lwmod@counter,f,c
 19623  003CDE                     i2l2014:
 19624  003CDE  AE04               	btfss	___lwmod@divisor+1,7,c
 19625  003CE0  D7FA               	goto	i2l2015
 19626  003CE2                     i2u582_40:
 19627  003CE2  5003               	movf	___lwmod@divisor,w,c
 19628  003CE4  5C01               	subwf	___lwmod@dividend,w,c
 19629  003CE6  5004               	movf	___lwmod@divisor+1,w,c
 19630  003CE8  5802               	subwfb	___lwmod@dividend+1,w,c
 19631  003CEA  A0D8               	btfss	status,0,c
 19632  003CEC  D004               	goto	i2l2018
 19633  003CEE  5003               	movf	___lwmod@divisor,w,c
 19634  003CF0  5E01               	subwf	___lwmod@dividend,f,c
 19635  003CF2  5004               	movf	___lwmod@divisor+1,w,c
 19636  003CF4  5A02               	subwfb	___lwmod@dividend+1,f,c
 19637  003CF6                     i2l2018:
 19638  003CF6  90D8               	bcf	status,0,c
 19639  003CF8  3204               	rrcf	___lwmod@divisor+1,f,c
 19640  003CFA  3203               	rrcf	___lwmod@divisor,f,c
 19641  003CFC  2E05               	decfsz	___lwmod@counter,f,c
 19642  003CFE  D7F1               	goto	i2u582_40
 19643  003D00                     i2l2019:
 19644  003D00  C001  F001         	movff	___lwmod@dividend,?___lwmod
 19645  003D04  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
 19646  003D08  0012               	return		;funcret
 19647  003D0A                     __end_of___lwmod:
 19648                           	opt stack 0
 19649                           tosu	equ	0xFFF
 19650                           tosh	equ	0xFFE
 19651                           tosl	equ	0xFFD
 19652                           pclatu	equ	0xFFB
 19653                           pclath	equ	0xFFA
 19654                           tblptru	equ	0xFF8
 19655                           tblptrh	equ	0xFF7
 19656                           tblptrl	equ	0xFF6
 19657                           tablat	equ	0xFF5
 19658                           prodh	equ	0xFF4
 19659                           prodl	equ	0xFF3
 19660                           intcon	equ	0xFF2
 19661                           intcon2	equ	0xFF1
 19662                           postinc0	equ	0xFEE
 19663                           plusw0	equ	0xFEB
 19664                           fsr0h	equ	0xFEA
 19665                           fsr0l	equ	0xFE9
 19666                           wreg	equ	0xFE8
 19667                           indf1	equ	0xFE7
 19668                           postdec1	equ	0xFE5
 19669                           fsr1h	equ	0xFE2
 19670                           fsr1l	equ	0xFE1
 19671                           indf2	equ	0xFDF
 19672                           postinc2	equ	0xFDE
 19673                           postdec2	equ	0xFDD
 19674                           plusw2	equ	0xFDB
 19675                           fsr2h	equ	0xFDA
 19676                           fsr2l	equ	0xFD9
 19677                           status	equ	0xFD8
 19678                           
 19679 ;; *************** function _PIN_MANAGER_IOC *****************
 19680 ;; Defined at:
 19681 ;;		line 108 in file "mcc_generated_files/pin_manager.c"
 19682 ;; Parameters:    Size  Location     Type
 19683 ;;		None
 19684 ;; Auto vars:     Size  Location     Type
 19685 ;;		None
 19686 ;; Return value:  Size  Location     Type
 19687 ;;                  1    wreg      void 
 19688 ;; Registers used:
 19689 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 19690 ;; Tracked objects:
 19691 ;;		On entry : 0/0
 19692 ;;		On exit  : 0/0
 19693 ;;		Unchanged: 0/0
 19694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19695 ;;      Params:         0       0       0       0       0       0       0
 19696 ;;      Locals:         0       0       0       0       0       0       0
 19697 ;;      Temps:          0       0       0       0       0       0       0
 19698 ;;      Totals:         0       0       0       0       0       0       0
 19699 ;;Total ram usage:        0 bytes
 19700 ;; Hardware stack levels used:    1
 19701 ;; Hardware stack levels required when called:    2
 19702 ;; This function calls:
 19703 ;;		_IOCB4_ISR
 19704 ;;		_IOCB5_ISR
 19705 ;; This function is called by:
 19706 ;;		_INTERRUPT_InterruptManager
 19707 ;; This function uses a non-reentrant model
 19708 ;;
 19709                           
 19710                           	psect	text114
 19711  0043C0                     __ptext114:
 19712                           	opt stack 0
 19713  0043C0                     _PIN_MANAGER_IOC:
 19714                           	opt stack 17
 19715                           
 19716                           ;pin_manager.c: 111: if(IOCBbits.IOCB4 == 1)
 19717                           
 19718                           ;incstack = 0
 19719  0043C0  B862               	btfsc	3938,4,c	;volatile
 19720                           
 19721                           ;pin_manager.c: 112: {
 19722                           ;pin_manager.c: 113: IOCB4_ISR();
 19723  0043C2  EC18  F021         	call	_IOCB4_ISR	;wreg free
 19724                           
 19725                           ;pin_manager.c: 114: }
 19726                           ;pin_manager.c: 116: if(IOCBbits.IOCB5 == 1)
 19727  0043C6  BA62               	btfsc	3938,5,c	;volatile
 19728                           
 19729                           ;pin_manager.c: 117: {
 19730                           ;pin_manager.c: 118: IOCB5_ISR();
 19731  0043C8  EC07  F021         	call	_IOCB5_ISR	;wreg free
 19732                           
 19733                           ;pin_manager.c: 119: }
 19734                           ;pin_manager.c: 122: INTCONbits.RBIF = 0;
 19735  0043CC  90F2               	bcf	intcon,0,c	;volatile
 19736  0043CE  0012               	return		;funcret
 19737  0043D0                     __end_of_PIN_MANAGER_IOC:
 19738                           	opt stack 0
 19739                           tosu	equ	0xFFF
 19740                           tosh	equ	0xFFE
 19741                           tosl	equ	0xFFD
 19742                           pclatu	equ	0xFFB
 19743                           pclath	equ	0xFFA
 19744                           tblptru	equ	0xFF8
 19745                           tblptrh	equ	0xFF7
 19746                           tblptrl	equ	0xFF6
 19747                           tablat	equ	0xFF5
 19748                           prodh	equ	0xFF4
 19749                           prodl	equ	0xFF3
 19750                           intcon	equ	0xFF2
 19751                           intcon2	equ	0xFF1
 19752                           postinc0	equ	0xFEE
 19753                           plusw0	equ	0xFEB
 19754                           fsr0h	equ	0xFEA
 19755                           fsr0l	equ	0xFE9
 19756                           wreg	equ	0xFE8
 19757                           indf1	equ	0xFE7
 19758                           postdec1	equ	0xFE5
 19759                           fsr1h	equ	0xFE2
 19760                           fsr1l	equ	0xFE1
 19761                           indf2	equ	0xFDF
 19762                           postinc2	equ	0xFDE
 19763                           postdec2	equ	0xFDD
 19764                           plusw2	equ	0xFDB
 19765                           fsr2h	equ	0xFDA
 19766                           fsr2l	equ	0xFD9
 19767                           status	equ	0xFD8
 19768                           
 19769 ;; *************** function _IOCB5_ISR *****************
 19770 ;; Defined at:
 19771 ;;		line 158 in file "mcc_generated_files/pin_manager.c"
 19772 ;; Parameters:    Size  Location     Type
 19773 ;;		None
 19774 ;; Auto vars:     Size  Location     Type
 19775 ;;		None
 19776 ;; Return value:  Size  Location     Type
 19777 ;;                  1    wreg      void 
 19778 ;; Registers used:
 19779 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 19780 ;; Tracked objects:
 19781 ;;		On entry : 0/0
 19782 ;;		On exit  : 0/0
 19783 ;;		Unchanged: 0/0
 19784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19785 ;;      Params:         0       0       0       0       0       0       0
 19786 ;;      Locals:         0       0       0       0       0       0       0
 19787 ;;      Temps:          0       0       0       0       0       0       0
 19788 ;;      Totals:         0       0       0       0       0       0       0
 19789 ;;Total ram usage:        0 bytes
 19790 ;; Hardware stack levels used:    1
 19791 ;; Hardware stack levels required when called:    1
 19792 ;; This function calls:
 19793 ;;		Absolute function
 19794 ;;		_IOCB5_DefaultInterruptHandler
 19795 ;; This function is called by:
 19796 ;;		_PIN_MANAGER_IOC
 19797 ;; This function uses a non-reentrant model
 19798 ;;
 19799                           
 19800                           	psect	text115
 19801  00420E                     __ptext115:
 19802                           	opt stack 0
 19803  00420E                     _IOCB5_ISR:
 19804                           	opt stack 17
 19805                           
 19806                           ;pin_manager.c: 163: if(IOCB5_InterruptHandler)
 19807                           
 19808                           ;incstack = 0
 19809  00420E  0101               	movlb	1	; () banked
 19810  004210  51CE               	movf	_IOCB5_InterruptHandler& (0+255),w,b
 19811  004212  11CF               	iorwf	(_IOCB5_InterruptHandler+1)& (0+255),w,b
 19812  004214  B4D8               	btfsc	status,2,c
 19813  004216  0012               	return	
 19814                           
 19815                           ; BSR set to: 1
 19816                           ;pin_manager.c: 164: {
 19817                           ;pin_manager.c: 165: IOCB5_InterruptHandler();
 19818  004218  D801               	call	i2u574_48
 19819  00421A  0012               	return	
 19820  00421C                     i2u574_48:
 19821  00421C  0005               	push	
 19822  00421E  6EFA               	movwf	pclath,c
 19823  004220  51CE               	movf	_IOCB5_InterruptHandler& (0+255),w,b
 19824  004222  6EFD               	movwf	tosl,c
 19825  004224  51CF               	movf	(_IOCB5_InterruptHandler+1)& (0+255),w,b
 19826  004226  6EFE               	movwf	tosh,c
 19827  004228  50F8               	movf	tblptru,w,c
 19828  00422A  6EFF               	movwf	tosu,c
 19829  00422C  50FA               	movf	pclath,w,c
 19830  00422E  0012               	return		;indir
 19831  004230                     __end_of_IOCB5_ISR:
 19832                           	opt stack 0
 19833                           tosu	equ	0xFFF
 19834                           tosh	equ	0xFFE
 19835                           tosl	equ	0xFFD
 19836                           pclatu	equ	0xFFB
 19837                           pclath	equ	0xFFA
 19838                           tblptru	equ	0xFF8
 19839                           tblptrh	equ	0xFF7
 19840                           tblptrl	equ	0xFF6
 19841                           tablat	equ	0xFF5
 19842                           prodh	equ	0xFF4
 19843                           prodl	equ	0xFF3
 19844                           intcon	equ	0xFF2
 19845                           intcon2	equ	0xFF1
 19846                           postinc0	equ	0xFEE
 19847                           plusw0	equ	0xFEB
 19848                           fsr0h	equ	0xFEA
 19849                           fsr0l	equ	0xFE9
 19850                           wreg	equ	0xFE8
 19851                           indf1	equ	0xFE7
 19852                           postdec1	equ	0xFE5
 19853                           fsr1h	equ	0xFE2
 19854                           fsr1l	equ	0xFE1
 19855                           indf2	equ	0xFDF
 19856                           postinc2	equ	0xFDE
 19857                           postdec2	equ	0xFDD
 19858                           plusw2	equ	0xFDB
 19859                           fsr2h	equ	0xFDA
 19860                           fsr2l	equ	0xFD9
 19861                           status	equ	0xFD8
 19862                           
 19863 ;; *************** function _IOCB5_DefaultInterruptHandler *****************
 19864 ;; Defined at:
 19865 ;;		line 179 in file "mcc_generated_files/pin_manager.c"
 19866 ;; Parameters:    Size  Location     Type
 19867 ;;		None
 19868 ;; Auto vars:     Size  Location     Type
 19869 ;;		None
 19870 ;; Return value:  Size  Location     Type
 19871 ;;                  1    wreg      void 
 19872 ;; Registers used:
 19873 ;;		None
 19874 ;; Tracked objects:
 19875 ;;		On entry : 0/0
 19876 ;;		On exit  : 0/0
 19877 ;;		Unchanged: 0/0
 19878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19879 ;;      Params:         0       0       0       0       0       0       0
 19880 ;;      Locals:         0       0       0       0       0       0       0
 19881 ;;      Temps:          0       0       0       0       0       0       0
 19882 ;;      Totals:         0       0       0       0       0       0       0
 19883 ;;Total ram usage:        0 bytes
 19884 ;; Hardware stack levels used:    1
 19885 ;; This function calls:
 19886 ;;		Nothing
 19887 ;; This function is called by:
 19888 ;;		_PIN_MANAGER_Initialize
 19889 ;;		_IOCB5_ISR
 19890 ;; This function uses a non-reentrant model
 19891 ;;
 19892                           
 19893                           	psect	text116
 19894  00446C                     __ptext116:
 19895                           	opt stack 0
 19896  00446C                     _IOCB5_DefaultInterruptHandler:
 19897                           	opt stack 17
 19898                           
 19899                           ;incstack = 0
 19900  00446C  0012               	return		;funcret
 19901  00446E                     __end_of_IOCB5_DefaultInterruptHandler:
 19902                           	opt stack 0
 19903                           tosu	equ	0xFFF
 19904                           tosh	equ	0xFFE
 19905                           tosl	equ	0xFFD
 19906                           pclatu	equ	0xFFB
 19907                           pclath	equ	0xFFA
 19908                           tblptru	equ	0xFF8
 19909                           tblptrh	equ	0xFF7
 19910                           tblptrl	equ	0xFF6
 19911                           tablat	equ	0xFF5
 19912                           prodh	equ	0xFF4
 19913                           prodl	equ	0xFF3
 19914                           intcon	equ	0xFF2
 19915                           intcon2	equ	0xFF1
 19916                           postinc0	equ	0xFEE
 19917                           plusw0	equ	0xFEB
 19918                           fsr0h	equ	0xFEA
 19919                           fsr0l	equ	0xFE9
 19920                           wreg	equ	0xFE8
 19921                           indf1	equ	0xFE7
 19922                           postdec1	equ	0xFE5
 19923                           fsr1h	equ	0xFE2
 19924                           fsr1l	equ	0xFE1
 19925                           indf2	equ	0xFDF
 19926                           postinc2	equ	0xFDE
 19927                           postdec2	equ	0xFDD
 19928                           plusw2	equ	0xFDB
 19929                           fsr2h	equ	0xFDA
 19930                           fsr2l	equ	0xFD9
 19931                           status	equ	0xFD8
 19932                           
 19933 ;; *************** function _IOCB4_ISR *****************
 19934 ;; Defined at:
 19935 ;;		line 129 in file "mcc_generated_files/pin_manager.c"
 19936 ;; Parameters:    Size  Location     Type
 19937 ;;		None
 19938 ;; Auto vars:     Size  Location     Type
 19939 ;;		None
 19940 ;; Return value:  Size  Location     Type
 19941 ;;                  1    wreg      void 
 19942 ;; Registers used:
 19943 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 19944 ;; Tracked objects:
 19945 ;;		On entry : 0/0
 19946 ;;		On exit  : 0/0
 19947 ;;		Unchanged: 0/0
 19948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19949 ;;      Params:         0       0       0       0       0       0       0
 19950 ;;      Locals:         0       0       0       0       0       0       0
 19951 ;;      Temps:          0       0       0       0       0       0       0
 19952 ;;      Totals:         0       0       0       0       0       0       0
 19953 ;;Total ram usage:        0 bytes
 19954 ;; Hardware stack levels used:    1
 19955 ;; Hardware stack levels required when called:    1
 19956 ;; This function calls:
 19957 ;;		Absolute function
 19958 ;;		_IOCB4_DefaultInterruptHandler
 19959 ;; This function is called by:
 19960 ;;		_PIN_MANAGER_IOC
 19961 ;; This function uses a non-reentrant model
 19962 ;;
 19963                           
 19964                           	psect	text117
 19965  004230                     __ptext117:
 19966                           	opt stack 0
 19967  004230                     _IOCB4_ISR:
 19968                           	opt stack 17
 19969                           
 19970                           ;pin_manager.c: 134: if(IOCB4_InterruptHandler)
 19971                           
 19972                           ;incstack = 0
 19973  004230  0101               	movlb	1	; () banked
 19974  004232  51D0               	movf	_IOCB4_InterruptHandler& (0+255),w,b
 19975  004234  11D1               	iorwf	(_IOCB4_InterruptHandler+1)& (0+255),w,b
 19976  004236  B4D8               	btfsc	status,2,c
 19977  004238  0012               	return	
 19978                           
 19979                           ; BSR set to: 1
 19980                           ;pin_manager.c: 135: {
 19981                           ;pin_manager.c: 136: IOCB4_InterruptHandler();
 19982  00423A  D801               	call	i2u572_48
 19983  00423C  0012               	return	
 19984  00423E                     i2u572_48:
 19985  00423E  0005               	push	
 19986  004240  6EFA               	movwf	pclath,c
 19987  004242  51D0               	movf	_IOCB4_InterruptHandler& (0+255),w,b
 19988  004244  6EFD               	movwf	tosl,c
 19989  004246  51D1               	movf	(_IOCB4_InterruptHandler+1)& (0+255),w,b
 19990  004248  6EFE               	movwf	tosh,c
 19991  00424A  50F8               	movf	tblptru,w,c
 19992  00424C  6EFF               	movwf	tosu,c
 19993  00424E  50FA               	movf	pclath,w,c
 19994  004250  0012               	return		;indir
 19995  004252                     __end_of_IOCB4_ISR:
 19996                           	opt stack 0
 19997                           tosu	equ	0xFFF
 19998                           tosh	equ	0xFFE
 19999                           tosl	equ	0xFFD
 20000                           pclatu	equ	0xFFB
 20001                           pclath	equ	0xFFA
 20002                           tblptru	equ	0xFF8
 20003                           tblptrh	equ	0xFF7
 20004                           tblptrl	equ	0xFF6
 20005                           tablat	equ	0xFF5
 20006                           prodh	equ	0xFF4
 20007                           prodl	equ	0xFF3
 20008                           intcon	equ	0xFF2
 20009                           intcon2	equ	0xFF1
 20010                           postinc0	equ	0xFEE
 20011                           plusw0	equ	0xFEB
 20012                           fsr0h	equ	0xFEA
 20013                           fsr0l	equ	0xFE9
 20014                           wreg	equ	0xFE8
 20015                           indf1	equ	0xFE7
 20016                           postdec1	equ	0xFE5
 20017                           fsr1h	equ	0xFE2
 20018                           fsr1l	equ	0xFE1
 20019                           indf2	equ	0xFDF
 20020                           postinc2	equ	0xFDE
 20021                           postdec2	equ	0xFDD
 20022                           plusw2	equ	0xFDB
 20023                           fsr2h	equ	0xFDA
 20024                           fsr2l	equ	0xFD9
 20025                           status	equ	0xFD8
 20026                           
 20027 ;; *************** function _IOCB4_DefaultInterruptHandler *****************
 20028 ;; Defined at:
 20029 ;;		line 150 in file "mcc_generated_files/pin_manager.c"
 20030 ;; Parameters:    Size  Location     Type
 20031 ;;		None
 20032 ;; Auto vars:     Size  Location     Type
 20033 ;;		None
 20034 ;; Return value:  Size  Location     Type
 20035 ;;                  1    wreg      void 
 20036 ;; Registers used:
 20037 ;;		None
 20038 ;; Tracked objects:
 20039 ;;		On entry : 0/0
 20040 ;;		On exit  : 0/0
 20041 ;;		Unchanged: 0/0
 20042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20043 ;;      Params:         0       0       0       0       0       0       0
 20044 ;;      Locals:         0       0       0       0       0       0       0
 20045 ;;      Temps:          0       0       0       0       0       0       0
 20046 ;;      Totals:         0       0       0       0       0       0       0
 20047 ;;Total ram usage:        0 bytes
 20048 ;; Hardware stack levels used:    1
 20049 ;; This function calls:
 20050 ;;		Nothing
 20051 ;; This function is called by:
 20052 ;;		_PIN_MANAGER_Initialize
 20053 ;;		_IOCB4_ISR
 20054 ;; This function uses a non-reentrant model
 20055 ;;
 20056                           
 20057                           	psect	text118
 20058  00446E                     __ptext118:
 20059                           	opt stack 0
 20060  00446E                     _IOCB4_DefaultInterruptHandler:
 20061                           	opt stack 17
 20062                           
 20063                           ;incstack = 0
 20064  00446E  0012               	return		;funcret
 20065  004470                     __end_of_IOCB4_DefaultInterruptHandler:
 20066                           	opt stack 0
 20067                           tosu	equ	0xFFF
 20068                           tosh	equ	0xFFE
 20069                           tosl	equ	0xFFD
 20070                           pclatu	equ	0xFFB
 20071                           pclath	equ	0xFFA
 20072                           tblptru	equ	0xFF8
 20073                           tblptrh	equ	0xFF7
 20074                           tblptrl	equ	0xFF6
 20075                           tablat	equ	0xFF5
 20076                           prodh	equ	0xFF4
 20077                           prodl	equ	0xFF3
 20078                           intcon	equ	0xFF2
 20079                           intcon2	equ	0xFF1
 20080                           postinc0	equ	0xFEE
 20081                           plusw0	equ	0xFEB
 20082                           fsr0h	equ	0xFEA
 20083                           fsr0l	equ	0xFE9
 20084                           wreg	equ	0xFE8
 20085                           indf1	equ	0xFE7
 20086                           postdec1	equ	0xFE5
 20087                           fsr1h	equ	0xFE2
 20088                           fsr1l	equ	0xFE1
 20089                           indf2	equ	0xFDF
 20090                           postinc2	equ	0xFDE
 20091                           postdec2	equ	0xFDD
 20092                           plusw2	equ	0xFDB
 20093                           fsr2h	equ	0xFDA
 20094                           fsr2l	equ	0xFD9
 20095                           status	equ	0xFD8
 20096                           
 20097 ;; *************** function _MEMORY_ISR *****************
 20098 ;; Defined at:
 20099 ;;		line 206 in file "mcc_generated_files/memory.c"
 20100 ;; Parameters:    Size  Location     Type
 20101 ;;		None
 20102 ;; Auto vars:     Size  Location     Type
 20103 ;;		None
 20104 ;; Return value:  Size  Location     Type
 20105 ;;                  1    wreg      void 
 20106 ;; Registers used:
 20107 ;;		None
 20108 ;; Tracked objects:
 20109 ;;		On entry : 0/0
 20110 ;;		On exit  : 0/0
 20111 ;;		Unchanged: 0/0
 20112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20113 ;;      Params:         0       0       0       0       0       0       0
 20114 ;;      Locals:         0       0       0       0       0       0       0
 20115 ;;      Temps:          0       0       0       0       0       0       0
 20116 ;;      Totals:         0       0       0       0       0       0       0
 20117 ;;Total ram usage:        0 bytes
 20118 ;; Hardware stack levels used:    1
 20119 ;; This function calls:
 20120 ;;		Nothing
 20121 ;; This function is called by:
 20122 ;;		_INTERRUPT_InterruptManager
 20123 ;; This function uses a non-reentrant model
 20124 ;;
 20125                           
 20126                           	psect	text119
 20127  004468                     __ptext119:
 20128                           	opt stack 0
 20129  004468                     _MEMORY_ISR:
 20130                           	opt stack 19
 20131                           
 20132                           ;memory.c: 209: PIR2bits.EEIF = 0;
 20133                           
 20134                           ;incstack = 0
 20135  004468  98A1               	bcf	4001,4,c	;volatile
 20136  00446A  0012               	return		;funcret
 20137  00446C                     __end_of_MEMORY_ISR:
 20138                           	opt stack 0
 20139                           tosu	equ	0xFFF
 20140                           tosh	equ	0xFFE
 20141                           tosl	equ	0xFFD
 20142                           pclatu	equ	0xFFB
 20143                           pclath	equ	0xFFA
 20144                           tblptru	equ	0xFF8
 20145                           tblptrh	equ	0xFF7
 20146                           tblptrl	equ	0xFF6
 20147                           tablat	equ	0xFF5
 20148                           prodh	equ	0xFF4
 20149                           prodl	equ	0xFF3
 20150                           intcon	equ	0xFF2
 20151                           intcon2	equ	0xFF1
 20152                           postinc0	equ	0xFEE
 20153                           plusw0	equ	0xFEB
 20154                           fsr0h	equ	0xFEA
 20155                           fsr0l	equ	0xFE9
 20156                           wreg	equ	0xFE8
 20157                           indf1	equ	0xFE7
 20158                           postdec1	equ	0xFE5
 20159                           fsr1h	equ	0xFE2
 20160                           fsr1l	equ	0xFE1
 20161                           indf2	equ	0xFDF
 20162                           postinc2	equ	0xFDE
 20163                           postdec2	equ	0xFDD
 20164                           plusw2	equ	0xFDB
 20165                           fsr2h	equ	0xFDA
 20166                           fsr2l	equ	0xFD9
 20167                           status	equ	0xFD8
 20168                           
 20169 ;; *************** function _EUSART1_Transmit_ISR *****************
 20170 ;; Defined at:
 20171 ;;		line 181 in file "mcc_generated_files/eusart1.c"
 20172 ;; Parameters:    Size  Location     Type
 20173 ;;		None
 20174 ;; Auto vars:     Size  Location     Type
 20175 ;;		None
 20176 ;; Return value:  Size  Location     Type
 20177 ;;                  1    wreg      void 
 20178 ;; Registers used:
 20179 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20180 ;; Tracked objects:
 20181 ;;		On entry : 0/0
 20182 ;;		On exit  : 0/0
 20183 ;;		Unchanged: 0/0
 20184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20185 ;;      Params:         0       0       0       0       0       0       0
 20186 ;;      Locals:         0       0       0       0       0       0       0
 20187 ;;      Temps:          0       0       0       0       0       0       0
 20188 ;;      Totals:         0       0       0       0       0       0       0
 20189 ;;Total ram usage:        0 bytes
 20190 ;; Hardware stack levels used:    1
 20191 ;; This function calls:
 20192 ;;		Nothing
 20193 ;; This function is called by:
 20194 ;;		_INTERRUPT_InterruptManager
 20195 ;; This function uses a non-reentrant model
 20196 ;;
 20197                           
 20198                           	psect	text120
 20199  003EDC                     __ptext120:
 20200                           	opt stack 0
 20201  003EDC                     _EUSART1_Transmit_ISR:
 20202                           	opt stack 19
 20203                           
 20204                           ;eusart1.c: 185: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 20205                           
 20206                           ;incstack = 0
 20207  003EDC  0E46               	movlw	70
 20208  003EDE  0101               	movlb	1	; () banked
 20209  003EE0  61D2               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 20210  003EE2  D012               	goto	i2l918
 20211                           
 20212                           ; BSR set to: 1
 20213                           ;eusart1.c: 186: {
 20214                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 20215  003EE4  5035               	movf	_eusart1TxTail,w,c	;volatile
 20216  003EE6  0D01               	mullw	1
 20217  003EE8  0E00               	movlw	low _eusart1TxBuffer
 20218  003EEA  24F3               	addwf	prodl,w,c
 20219  003EEC  6ED9               	movwf	fsr2l,c
 20220  003EEE  0E02               	movlw	high _eusart1TxBuffer
 20221  003EF0  20F4               	addwfc	prodh,w,c
 20222  003EF2  6EDA               	movwf	fsr2h,c
 20223  003EF4  50DF               	movf	indf2,w,c
 20224  003EF6  6EAD               	movwf	4013,c	;volatile
 20225                           
 20226                           ; BSR set to: 1
 20227  003EF8  2A35               	incf	_eusart1TxTail,f,c	;volatile
 20228                           
 20229                           ; BSR set to: 1
 20230                           ;eusart1.c: 188: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 20231  003EFA  0E45               	movlw	69
 20232  003EFC  6435               	cpfsgt	_eusart1TxTail,c	;volatile
 20233  003EFE  D002               	goto	i2l919
 20234                           
 20235                           ; BSR set to: 1
 20236                           ;eusart1.c: 189: {
 20237                           ;eusart1.c: 190: eusart1TxTail = 0;
 20238  003F00  0E00               	movlw	0
 20239  003F02  6E35               	movwf	_eusart1TxTail,c	;volatile
 20240  003F04                     i2l919:
 20241                           
 20242                           ; BSR set to: 1
 20243                           ;eusart1.c: 191: }
 20244                           ;eusart1.c: 192: eusart1TxBufferRemaining++;
 20245                           
 20246                           ; BSR set to: 1
 20247  003F04  2BD2               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 20248                           
 20249                           ;eusart1.c: 193: }
 20250  003F06  0012               	return	
 20251  003F08                     i2l918:
 20252                           
 20253                           ; BSR set to: 1
 20254                           ;eusart1.c: 194: else
 20255                           ;eusart1.c: 195: {
 20256                           ;eusart1.c: 196: PIE1bits.TX1IE = 0;
 20257  003F08  989D               	bcf	3997,4,c	;volatile
 20258                           
 20259                           ; BSR set to: 1
 20260                           ;eusart1.c: 197: eusart1TxTail = 0;
 20261  003F0A  0E00               	movlw	0
 20262  003F0C  6E35               	movwf	_eusart1TxTail,c	;volatile
 20263                           
 20264                           ;eusart1.c: 198: eusart1TxHead = 0;
 20265  003F0E  0E00               	movlw	0
 20266  003F10  6E36               	movwf	_eusart1TxHead,c	;volatile
 20267  003F12  0012               	return	
 20268  003F14                     __end_of_EUSART1_Transmit_ISR:
 20269                           	opt stack 0
 20270                           tosu	equ	0xFFF
 20271                           tosh	equ	0xFFE
 20272                           tosl	equ	0xFFD
 20273                           pclatu	equ	0xFFB
 20274                           pclath	equ	0xFFA
 20275                           tblptru	equ	0xFF8
 20276                           tblptrh	equ	0xFF7
 20277                           tblptrl	equ	0xFF6
 20278                           tablat	equ	0xFF5
 20279                           prodh	equ	0xFF4
 20280                           prodl	equ	0xFF3
 20281                           intcon	equ	0xFF2
 20282                           intcon2	equ	0xFF1
 20283                           postinc0	equ	0xFEE
 20284                           plusw0	equ	0xFEB
 20285                           fsr0h	equ	0xFEA
 20286                           fsr0l	equ	0xFE9
 20287                           wreg	equ	0xFE8
 20288                           indf1	equ	0xFE7
 20289                           postdec1	equ	0xFE5
 20290                           fsr1h	equ	0xFE2
 20291                           fsr1l	equ	0xFE1
 20292                           indf2	equ	0xFDF
 20293                           postinc2	equ	0xFDE
 20294                           postdec2	equ	0xFDD
 20295                           plusw2	equ	0xFDB
 20296                           fsr2h	equ	0xFDA
 20297                           fsr2l	equ	0xFD9
 20298                           status	equ	0xFD8
 20299                           
 20300 ;; *************** function _EUSART1_Receive_ISR *****************
 20301 ;; Defined at:
 20302 ;;		line 202 in file "mcc_generated_files/eusart1.c"
 20303 ;; Parameters:    Size  Location     Type
 20304 ;;		None
 20305 ;; Auto vars:     Size  Location     Type
 20306 ;;		None
 20307 ;; Return value:  Size  Location     Type
 20308 ;;                  1    wreg      void 
 20309 ;; Registers used:
 20310 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20311 ;; Tracked objects:
 20312 ;;		On entry : 0/0
 20313 ;;		On exit  : 0/0
 20314 ;;		Unchanged: 0/0
 20315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20316 ;;      Params:         0       0       0       0       0       0       0
 20317 ;;      Locals:         0       0       0       0       0       0       0
 20318 ;;      Temps:          0       0       0       0       0       0       0
 20319 ;;      Totals:         0       0       0       0       0       0       0
 20320 ;;Total ram usage:        0 bytes
 20321 ;; Hardware stack levels used:    1
 20322 ;; This function calls:
 20323 ;;		Nothing
 20324 ;; This function is called by:
 20325 ;;		_INTERRUPT_InterruptManager
 20326 ;; This function uses a non-reentrant model
 20327 ;;
 20328                           
 20329                           	psect	text121
 20330  0040AC                     __ptext121:
 20331                           	opt stack 0
 20332  0040AC                     _EUSART1_Receive_ISR:
 20333                           	opt stack 19
 20334                           
 20335                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
 20336                           
 20337                           ; BSR set to: 1
 20338                           ;incstack = 0
 20339  0040AC  A2AB               	btfss	4011,1,c	;volatile
 20340  0040AE  D002               	goto	i2l924
 20341                           
 20342                           ;eusart1.c: 206: {
 20343                           ;eusart1.c: 208: RCSTA1bits.CREN = 0;
 20344  0040B0  98AB               	bcf	4011,4,c	;volatile
 20345                           
 20346                           ;eusart1.c: 209: RCSTA1bits.CREN = 1;
 20347  0040B2  88AB               	bsf	4011,4,c	;volatile
 20348  0040B4                     i2l924:
 20349                           
 20350                           ;eusart1.c: 210: }
 20351                           ;eusart1.c: 215: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 20352  0040B4  5034               	movf	_eusart1RxHead,w,c	;volatile
 20353  0040B6  0D01               	mullw	1
 20354  0040B8  0E00               	movlw	low _eusart1RxBuffer
 20355  0040BA  24F3               	addwf	prodl,w,c
 20356  0040BC  6ED9               	movwf	fsr2l,c
 20357  0040BE  0E01               	movlw	high _eusart1RxBuffer
 20358  0040C0  20F4               	addwfc	prodh,w,c
 20359  0040C2  6EDA               	movwf	fsr2h,c
 20360  0040C4  CFAE FFDF          	movff	4014,indf2	;volatile
 20361  0040C8  2A34               	incf	_eusart1RxHead,f,c	;volatile
 20362                           
 20363                           ;eusart1.c: 216: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 20364  0040CA  0E27               	movlw	39
 20365  0040CC  6434               	cpfsgt	_eusart1RxHead,c	;volatile
 20366  0040CE  D002               	goto	i2l925
 20367                           
 20368                           ;eusart1.c: 217: {
 20369                           ;eusart1.c: 218: eusart1RxHead = 0;
 20370  0040D0  0E00               	movlw	0
 20371  0040D2  6E34               	movwf	_eusart1RxHead,c	;volatile
 20372  0040D4                     i2l925:
 20373                           
 20374                           ;eusart1.c: 219: }
 20375                           ;eusart1.c: 220: eusart1RxCount++;
 20376  0040D4  0100               	movlb	0	; () banked
 20377  0040D6  2BF5               	incf	_eusart1RxCount& (0+255),f,b	;volatile
 20378                           
 20379                           ; BSR set to: 0
 20380  0040D8  0012               	return		;funcret
 20381  0040DA                     __end_of_EUSART1_Receive_ISR:
 20382                           	opt stack 0
 20383                           tosu	equ	0xFFF
 20384                           tosh	equ	0xFFE
 20385                           tosl	equ	0xFFD
 20386                           pclatu	equ	0xFFB
 20387                           pclath	equ	0xFFA
 20388                           tblptru	equ	0xFF8
 20389                           tblptrh	equ	0xFF7
 20390                           tblptrl	equ	0xFF6
 20391                           tablat	equ	0xFF5
 20392                           prodh	equ	0xFF4
 20393                           prodl	equ	0xFF3
 20394                           intcon	equ	0xFF2
 20395                           intcon2	equ	0xFF1
 20396                           postinc0	equ	0xFEE
 20397                           plusw0	equ	0xFEB
 20398                           fsr0h	equ	0xFEA
 20399                           fsr0l	equ	0xFE9
 20400                           wreg	equ	0xFE8
 20401                           indf1	equ	0xFE7
 20402                           postdec1	equ	0xFE5
 20403                           fsr1h	equ	0xFE2
 20404                           fsr1l	equ	0xFE1
 20405                           indf2	equ	0xFDF
 20406                           postinc2	equ	0xFDE
 20407                           postdec2	equ	0xFDD
 20408                           plusw2	equ	0xFDB
 20409                           fsr2h	equ	0xFDA
 20410                           fsr2l	equ	0xFD9
 20411                           status	equ	0xFD8
 20412                           tosu	equ	0xFFF
 20413                           tosh	equ	0xFFE
 20414                           tosl	equ	0xFFD
 20415                           pclatu	equ	0xFFB
 20416                           pclath	equ	0xFFA
 20417                           tblptru	equ	0xFF8
 20418                           tblptrh	equ	0xFF7
 20419                           tblptrl	equ	0xFF6
 20420                           tablat	equ	0xFF5
 20421                           prodh	equ	0xFF4
 20422                           prodl	equ	0xFF3
 20423                           intcon	equ	0xFF2
 20424                           intcon2	equ	0xFF1
 20425                           postinc0	equ	0xFEE
 20426                           plusw0	equ	0xFEB
 20427                           fsr0h	equ	0xFEA
 20428                           fsr0l	equ	0xFE9
 20429                           wreg	equ	0xFE8
 20430                           indf1	equ	0xFE7
 20431                           postdec1	equ	0xFE5
 20432                           fsr1h	equ	0xFE2
 20433                           fsr1l	equ	0xFE1
 20434                           indf2	equ	0xFDF
 20435                           postinc2	equ	0xFDE
 20436                           postdec2	equ	0xFDD
 20437                           plusw2	equ	0xFDB
 20438                           fsr2h	equ	0xFDA
 20439                           fsr2l	equ	0xFD9
 20440                           status	equ	0xFD8
 20441                           
 20442                           	psect	text122
 20443  000000                     __ptext122:
 20444                           	opt stack 0
 20445                           tosu	equ	0xFFF
 20446                           tosh	equ	0xFFE
 20447                           tosl	equ	0xFFD
 20448                           pclatu	equ	0xFFB
 20449                           pclath	equ	0xFFA
 20450                           tblptru	equ	0xFF8
 20451                           tblptrh	equ	0xFF7
 20452                           tblptrl	equ	0xFF6
 20453                           tablat	equ	0xFF5
 20454                           prodh	equ	0xFF4
 20455                           prodl	equ	0xFF3
 20456                           intcon	equ	0xFF2
 20457                           intcon2	equ	0xFF1
 20458                           postinc0	equ	0xFEE
 20459                           plusw0	equ	0xFEB
 20460                           fsr0h	equ	0xFEA
 20461                           fsr0l	equ	0xFE9
 20462                           wreg	equ	0xFE8
 20463                           indf1	equ	0xFE7
 20464                           postdec1	equ	0xFE5
 20465                           fsr1h	equ	0xFE2
 20466                           fsr1l	equ	0xFE1
 20467                           indf2	equ	0xFDF
 20468                           postinc2	equ	0xFDE
 20469                           postdec2	equ	0xFDD
 20470                           plusw2	equ	0xFDB
 20471                           fsr2h	equ	0xFDA
 20472                           fsr2l	equ	0xFD9
 20473                           status	equ	0xFD8
 20474                           
 20475                           	psect	rparam
 20476  0000                     tosu	equ	0xFFF
 20477                           tosh	equ	0xFFE
 20478                           tosl	equ	0xFFD
 20479                           pclatu	equ	0xFFB
 20480                           pclath	equ	0xFFA
 20481                           tblptru	equ	0xFF8
 20482                           tblptrh	equ	0xFF7
 20483                           tblptrl	equ	0xFF6
 20484                           tablat	equ	0xFF5
 20485                           prodh	equ	0xFF4
 20486                           prodl	equ	0xFF3
 20487                           intcon	equ	0xFF2
 20488                           intcon2	equ	0xFF1
 20489                           postinc0	equ	0xFEE
 20490                           plusw0	equ	0xFEB
 20491                           fsr0h	equ	0xFEA
 20492                           fsr0l	equ	0xFE9
 20493                           wreg	equ	0xFE8
 20494                           indf1	equ	0xFE7
 20495                           postdec1	equ	0xFE5
 20496                           fsr1h	equ	0xFE2
 20497                           fsr1l	equ	0xFE1
 20498                           indf2	equ	0xFDF
 20499                           postinc2	equ	0xFDE
 20500                           postdec2	equ	0xFDD
 20501                           plusw2	equ	0xFDB
 20502                           fsr2h	equ	0xFDA
 20503                           fsr2l	equ	0xFD9
 20504                           status	equ	0xFD8
 20505                           
 20506                           	psect	temp
 20507  000048                     btemp:
 20508                           	opt stack 0
 20509  000048                     	ds	1
 20510  0000                     int$flags	set	btemp
 20511  0000                     wtemp6	set	btemp+1
 20512                           tosu	equ	0xFFF
 20513                           tosh	equ	0xFFE
 20514                           tosl	equ	0xFFD
 20515                           pclatu	equ	0xFFB
 20516                           pclath	equ	0xFFA
 20517                           tblptru	equ	0xFF8
 20518                           tblptrh	equ	0xFF7
 20519                           tblptrl	equ	0xFF6
 20520                           tablat	equ	0xFF5
 20521                           prodh	equ	0xFF4
 20522                           prodl	equ	0xFF3
 20523                           intcon	equ	0xFF2
 20524                           intcon2	equ	0xFF1
 20525                           postinc0	equ	0xFEE
 20526                           plusw0	equ	0xFEB
 20527                           fsr0h	equ	0xFEA
 20528                           fsr0l	equ	0xFE9
 20529                           wreg	equ	0xFE8
 20530                           indf1	equ	0xFE7
 20531                           postdec1	equ	0xFE5
 20532                           fsr1h	equ	0xFE2
 20533                           fsr1l	equ	0xFE1
 20534                           indf2	equ	0xFDF
 20535                           postinc2	equ	0xFDE
 20536                           postdec2	equ	0xFDD
 20537                           plusw2	equ	0xFDB
 20538                           fsr2h	equ	0xFDA
 20539                           fsr2l	equ	0xFD9
 20540                           status	equ	0xFD8


Data Sizes:
    Strings     21
    Constant    143
    Data        24
    BSS         282
    Persistent  9
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     48      71
    BANK0           160    144     155
    BANK1           256      0     211
    BANK2           256     55     125
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    readUartMessage$3606	PTR FTN()void  size(2) Largest target is 1
		 -> GroupDAC(), GroupFlashMemory(), GroupSynthesizers(), GroupAdc(), 
		 -> GroupStatusAndVersion(), GroupControlMcu(), 

    SynthReadData@data	PTR unsigned char  size(2) Largest target is 0

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    strtol@endptr	PTR PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strtol@s	PTR const unsigned char  size(2) Largest target is 10
		 -> GetIntFromUartData@dataRegArr(BANK0[10]), 

    memset@p1	PTR void  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[18]), GetIntFromUartData@dataRegArr(BANK0[10]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK2[29]), 
		 -> SynthReadData@eepromDataArray(BANK2[20]), DacReadValue@TxMsg(BANK0[7]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), 
		 -> sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 
		 -> synthLdTxArray(BANK1[12]), synthLdRxArray(BANK1[12]), 

    memset@p	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[18]), GetIntFromUartData@dataRegArr(BANK0[10]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK2[29]), 
		 -> SynthReadData@eepromDataArray(BANK2[20]), DacReadValue@TxMsg(BANK0[7]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), 
		 -> sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 
		 -> synthLdTxArray(BANK1[12]), synthLdRxArray(BANK1[12]), 

    Make32bitsArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> SWSPI_Synth_send_bits@bitArray(BANK0[32]), 

    GetIntFromUartData@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    GetUint16FromBitArray@bitarray	PTR unsigned char  size(2) Largest target is 12
		 -> synthLdTxArray(BANK1[12]), synthLdRxArray(BANK1[12]), 

    FillArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> SWSPI_Synth_send_bits@bitArray(BANK0[32]), synthLdTxArray(BANK1[12]), synthLdRxArray(BANK1[12]), 

    sp__memset	PTR void  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[18]), GetIntFromUartData@dataRegArr(BANK0[10]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK2[29]), 
		 -> SynthReadData@eepromDataArray(BANK2[20]), DacReadValue@TxMsg(BANK0[7]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), 
		 -> sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 
		 -> synthLdTxArray(BANK1[12]), synthLdRxArray(BANK1[12]), 

    ZeroArray@array	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[18]), GetIntFromUartData@dataRegArr(BANK0[10]), SynthReadData@TxMsg(BANK2[29]), SynthReadData@eepromDataArray(BANK2[20]), 
		 -> DacReadValue@TxMsg(BANK0[7]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), 
		 -> SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 

    crc8@dataArray	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetMcuFwVersion@TxMsg(BANK0[18]), SynthReadData@TxMsg(BANK2[29]), DacReadValue@TxMsg(BANK0[7]), 
		 -> FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgQueue(BANK1[20]), 

    GroupDAC@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), Absolute function(), 

    FLASH_WriteBlock@flashWrBufPtr	PTR unsigned char  size(2) Largest target is 64
		 -> sampleArray(BANK1[64]), 

    IOCB5_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCB5_DefaultInterruptHandler(), 

    IOCB5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCB5_DefaultInterruptHandler(), 

    IOCB4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCB4_DefaultInterruptHandler(), 

    IOCB4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCB4_DefaultInterruptHandler(), 

    UpdateSynthFreq@data	PTR unsigned char  size(2) Largest target is 0

    DacReadValue@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    DacSetValue@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    FlashReadUart@data	PTR unsigned char  size(2) Largest target is 0

    WriteUartMessage@dataBuf	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetMcuFwVersion@TxMsg(BANK0[18]), SynthReadData@TxMsg(BANK2[29]), DacReadValue@TxMsg(BANK0[7]), 
		 -> FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), SendAckMessage@TxMsg(COMRAM[6]), 

    SetChannelMode@data	PTR unsigned char  size(2) Largest target is 0

    groupsArray	PTR FTN()void [6] size(2) Largest target is 1
		 -> GroupDAC(), GroupFlashMemory(), GroupSynthesizers(), GroupAdc(), 
		 -> GroupStatusAndVersion(), GroupControlMcu(), 


Critical Paths under _main in COMRAM

    _InitRxMessageParams->_ZeroArray
    _GetMcuRunTime->___lldiv
    _GetMcuFwVersion->_ZeroArray
    _GroupFlashMemory->_FlashReadCondition
    _FlashReadCondition->_ZeroArray
    _FlashEreaseMem->_SendAckMessage
    _GetIntFromUartData->_strtol
    _strtol->___lmul
    _isalpha->_isupper
    _testLeds->_SendAckMessage
    _ResetMcu->_SendAckMessage
    _SetChannelMode->_SendAckMessage
    _keepAliveSignalUart->_SendAckMessage
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCB4_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCB5_SetInterruptHandler
    _SetMcuRunTime->___llmod
    _SendSystemStartAck->_SendAckMessage
    _SendAckMessage->_ZeroArray
    _ZeroArray->_memset
    _WriteUartMessage->_EUSART1_Write
    _StoreIntInEeprom->_make8
    _EepromWrite->_DATAEE_WriteByte
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _SWSPI_Synth_send_bits->_FillArray
    _FillArray->_memset
    _SWSPI_DAC_send_bits->_SwSpi_Clk_Pin
    _SWSPI_DAC_send_bits->_SwSpi_Data_Pin
    ___lmul->_EepromRead
    _EepromRead->_DATAEE_ReadByte
    _CheckFlashPrecentage->___ftdiv
    _log->_eval_poly
    _exp->_eval_poly
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftdiv
    ___ftmul->___ftdiv
    ___ftdiv->___lltoft
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lwtoft->___ftpack
    _FlashSampleWrite->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_ISR->___lwmod

Critical Paths under _main in BANK0

    _main->_readUartMessage
    _readUartMessage->_GroupAdc
    _readUartMessage->_GroupControlMcu
    _readUartMessage->_GroupDAC
    _readUartMessage->_GroupFlashMemory
    _readUartMessage->_GroupStatusAndVersion
    _readUartMessage->_GroupSynthesizers
    _UpdateSynthFreq->_SWSPI_send_word
    _SynthReadData->_ReadIntFromEeprom
    _SetSynthOper->_InitSynth
    _GroupFlashMemory->_FlashReadUart
    _FlashReadUart->_GetIntFromUartData
    _DacSetValue->_SWSPI_send_word
    _GetIntFromUartData->_strtol
    _DacReadValue->_ReadIntFromEeprom
    _SynthLdDetect->_InitSynth
    _PLLInitialize->_InitSynth
    _InitSynth->_ReadIntFromEeprom
    _DacInit->_ReadIntFromEeprom
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _ReadIntFromEeprom->_pow
    _CheckFlashPrecentage->___ftmul
    _AdcConvert->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___ftdiv
    ___ftsub->___ftadd
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _GroupSynthesizers->_SynthReadData

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  944208
                         _AdcConvert
                     _BlinkErrorLeds
                        _BlinkOkLeds
               _CheckFlashPrecentage
      _InitSystemApplicationManagers
                 _SendSystemStartAck
                      _SetMcuRunTime
                       _SetMcuSystem
                      _SynthLdDetect
                 _keepAliveSignalLed
                _keepAliveSignalUart
                    _readUartMessage
 ---------------------------------------------------------------------------------
 (1) _readUartMessage                                      7     7      0  471941
                                            137 BANK0      7     7      0
                       _EUSART1_Read
                           _GroupAdc *
                    _GroupControlMcu *
                           _GroupDAC *
                   _GroupFlashMemory *
              _GroupStatusAndVersion *
                  _GroupSynthesizers *
                _InitRxMessageParams
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _InitRxMessageParams                                  0     0      0    2899
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupSynthesizers                                    3     1      2  254469
                                            134 BANK0      3     1      2
                       _SetSynthOper
                      _SynthReadData
                    _UpdateSynthFreq
 ---------------------------------------------------------------------------------
 (3) _UpdateSynthFreq                                     11     9      2   29835
                                             42 BANK0     11     9      2
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (3) _SynthReadData                                       57    55      2  104580
                                            104 BANK0      2     0      2
                                              0 BANK2     55    55      0
                  _ReadIntFromEeprom
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (3) _SetSynthOper                                         1     1      0  119899
                                            111 BANK0      1     1      0
                          _InitSynth
                     _SendAckMessage
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (2) _GroupStatusAndVersion                                4     1      3   13626
                                            134 BANK0      3     1      2
                    _GetMcuFwVersion
                      _GetMcuRunTime
 ---------------------------------------------------------------------------------
 (3) _GetMcuRunTime                                       17    17      0    4498
                                             36 COMRAM     2     2      0
                                              0 BANK0     15    15      0
                   _WriteUartMessage
                            ___lldiv
                            ___llmod
                               _crc8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     421
                                             23 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _GetMcuFwVersion                                     33    33      0    9097
                                             35 COMRAM     7     7      0
                                              0 BANK0     26    26      0
                   _WriteUartMessage
                          _ZeroArray
                             ___wmul
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _GroupFlashMemory                                     3     1      2   39925
                                            134 BANK0      3     1      2
                     _FlashEreaseMem
                 _FlashReadCondition
                      _FlashReadUart
 ---------------------------------------------------------------------------------
 (3) _FlashReadUart                                       95    93      2   21465
                                             39 BANK0     95    93      2
                  _FLASH_IsWriteDone
                     _FLASH_ReadByte
                 _GetIntFromUartData
                     _SendAckMessage
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (4) _FLASH_ReadByte                                       4     0      4     370
                                             23 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _FlashReadCondition                                  13    13      0    7960
                                             35 COMRAM    13    13      0
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (3) _FlashEreaseMem                                       0     0      0   10438
                     _SendAckMessage
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupDAC                                             3     1      2  133336
                                            134 BANK0      3     1      2
                       _DacReadValue
                        _DacSetValue
 ---------------------------------------------------------------------------------
 (3) _DacSetValue                                         15    13      2   29330
                                             42 BANK0     15    13      2
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (4) _GetIntFromUartData                                  33    25      8    6841
                                              6 BANK0     33    25      8
                          _ZeroArray
                             _strtol
 ---------------------------------------------------------------------------------
 (5) _strtol                                              16    10      6    2723
                                             37 COMRAM    10     4      6
                                              0 BANK0      6     6      0
                             ___lmul
                            _isalpha
                            _isdigit
                            _isspace
                            _toupper
 ---------------------------------------------------------------------------------
 (6) _toupper                                              1     1      0      96
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _isspace                                              3     3      0     130
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isalpha                                              3     3      0     229
                                             26 COMRAM     3     3      0
                            _isupper
 ---------------------------------------------------------------------------------
 (7) _isupper                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _DacReadValue                                        18    16      2  103848
                                            104 BANK0     18    16      2
                  _ReadIntFromEeprom
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (2) _GroupControlMcu                                      4     1      3   15177
                                            134 BANK0      3     1      2
                           _ResetMcu
                           _testLeds
 ---------------------------------------------------------------------------------
 (3) _testLeds                                             3     3      0    7607
                                             43 COMRAM     3     3      0
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _ResetMcu                                             0     0      0    7539
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _GroupAdc                                             3     1      2    7753
                                            134 BANK0      3     1      2
                     _SetChannelMode
 ---------------------------------------------------------------------------------
 (3) _SetChannelMode                                       2     0      2    7691
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         3     3      0      46
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalUart                                  0     0      0    7539
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalLed                                   1     1      0       0
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SynthLdDetect                                        0     0      0  112743
                     _BlinkErrorLeds
                          _InitSynth
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     904
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _BlinkErrorLeds                                       6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _SetMcuSystem                                         0     0      0     294
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0     294
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      2     2      0      98
                                             25 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _TMR0_SetInterruptHandler                             2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0     196
          _IOCB4_SetInterruptHandler
          _IOCB5_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _IOCB5_SetInterruptHandler                            2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _IOCB4_SetInterruptHandler                            2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMcuRunTime                                        0     0      0     592
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     592
                                             23 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (1) _SendSystemStartAck                                   0     0      0    7539
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (4) _SendAckMessage                                       8     7      1    7539
                                             35 COMRAM     8     7      1
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _crc8                                                 9     5      4    1610
                                             23 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _ZeroArray                                            4     0      4    2899
                                             31 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (5) _WriteUartMessage                                     7     3      4    1452
                                             24 COMRAM     7     3      4
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (6) _EUSART1_Write                                        1     1      0      62
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitSystemApplicationManagers                        0     0      0  223959
                    _ClearMcuRunTime
                            _DacInit
              _InitAdcApplicationMgr
                      _PLLInitialize
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PLLInitialize                                        0     0      0  113329
                          _FillArray
                          _InitSynth
 ---------------------------------------------------------------------------------
 (4) _InitSynth                                            7     7      0  111749
                                            104 BANK0      7     7      0
                  _ReadIntFromEeprom
                    _SWSPI_send_word
                   _StoreIntInEeprom
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (4) _SwSpi_Set_CE_Pin                                     2     1      1     425
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _InitAdcApplicationMgr                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DacInit                                              5     5      0  110630
                                            104 BANK0      5     5      0
                  _ReadIntFromEeprom
                    _SWSPI_send_word
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (4) _StoreIntInEeprom                                     9     2      7    4319
                                             32 COMRAM     9     2      7
                        _EepromWrite
                              _make8
 ---------------------------------------------------------------------------------
 (5) _EepromWrite                                          2     1      1     338
                                             26 COMRAM     2     1      1
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (6) _DATAEE_WriteByte                                     3     2      1     186
                                             23 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (4) _SWSPI_send_word                                      9     4      5   10380
                                             40 COMRAM     5     0      5
                                             38 BANK0      4     4      0
                _SWSPI_DAC_send_bits
              _SWSPI_Synth_send_bits
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
                              _make8
 ---------------------------------------------------------------------------------
 (5) _make8                                                9     4      5    1595
                                             23 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Synth_Le_Pin                               2     1      1     335
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Dac_Sync_Pin                               1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _SWSPI_Synth_send_bits                               42    38      4    4135
                                             36 COMRAM     4     0      4
                                              0 BANK0     38    38      0
                          _FillArray
                    _Make32bitsArray
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (6) _Make32bitsArray                                     10     4      6     344
                                             23 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (6) _FillArray                                            5     0      5    1580
                                             31 COMRAM     5     0      5
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     677
                                             23 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (5) _SWSPI_DAC_send_bits                                  3     2      1    2041
                                             25 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Data_Pin                                       2     1      1     757
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Clk_Pin                                        2     1      1     937
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _ReadIntFromEeprom                                   23    19      4   95674
                                             81 BANK0     23    19      4
                         _EepromRead
                           ___awtoft
                            ___fttol
                             ___lmul
                                _pow
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     636
                                             25 COMRAM    12     4      8
                         _EepromRead (ARG)
 ---------------------------------------------------------------------------------
 (5) _EepromRead                                           1     1      0      62
                                             24 COMRAM     1     1      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (6) _DATAEE_ReadByte                                      1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ClearMcuRunTime                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckFlashPrecentage                                 7     7      0   14121
                                             24 BANK0      7     7      0
                            ___ftdiv
                             ___ftge
                            ___ftmul
                           ___lltoft
 ---------------------------------------------------------------------------------
 (1) _BlinkOkLeds                                          6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _AdcConvert                                          16    16      0  105300
                                             81 BANK0     16    16      0
                  _ADC_GetConversion
                   _FlashSampleWrite
              _GetUint16FromBitArray
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _pow
 ---------------------------------------------------------------------------------
 (5) _pow                                                 17    11      6   88933
                                             64 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (6) _log                                                  5     2      3   28922
                                             46 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _exp                                                  9     6      3   47974
                                             55 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (7) _ldexp                                                7     2      5     539
                                             46 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (7) _floor                                                8     5      3   11854
                                             47 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (7) _frexp                                                7     2      5     682
                                             23 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (8) ___fttol                                             15    11      4     911
                                             24 BANK0     15    11      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftge                                               9     3      6    1098
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (8) ___altoft                                            10     6      4    3367
                                             46 COMRAM     2     2      0
                                             39 BANK0      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (7) _eval_poly                                           12     5      7   13735
                                             46 COMRAM     2     2      0
                                             36 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (8) ___wmul                                               6     2      4    2322
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) ___ftmul                                             15     9      6    5281
                                              9 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftsub                                              6     0      6    5754
                                             36 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (8) ___ftadd                                             12     6      6    5338
                                             24 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     335
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             15     9      6    4353
                                             40 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             4     1      3    3476
                                             31 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___lltoft                                             9     5      4    3355
                                             31 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3284
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftpack                                             8     3      5    3073
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _GetUint16FromBitArray                               11     7      4     440
                                             23 COMRAM    11     7      4
 ---------------------------------------------------------------------------------
 (2) _FlashSampleWrite                                     7     4      3    1631
                                             44 COMRAM     3     0      3
                                              0 BANK0      4     4      0
                  _FLASH_IsWriteDone
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_WriteBlock                                    16    10      6     992
                                             28 COMRAM    16    10      6
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     5     1      4     217
                                             23 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) _FLASH_IsWriteDone                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      22
                                             23 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                         18    18      0     767
                                              5 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                         _MEMORY_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     767
                            ___lwmod
 ---------------------------------------------------------------------------------
 (13) ___lwmod                                             5     1      4     767
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (12) _PIN_MANAGER_IOC                                     0     0      0       0
                          _IOCB4_ISR
                          _IOCB5_ISR
 ---------------------------------------------------------------------------------
 (13) _IOCB5_ISR                                           0     0      0       0
                   Absolute function *
      _IOCB5_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (14) _IOCB5_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _IOCB4_ISR                                           0     0      0       0
                   Absolute function *
      _IOCB4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (14) _IOCB4_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _MEMORY_ISR                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Receive_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcConvert
     _ADC_GetConversion
     _FlashSampleWrite
       _FLASH_IsWriteDone
       _FLASH_WriteBlock
         _FLASH_EraseBlock
     _GetUint16FromBitArray
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _frexp
   _BlinkErrorLeds
   _BlinkOkLeds
   _CheckFlashPrecentage
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___lltoft
       ___ftpack
   _InitSystemApplicationManagers
     _ClearMcuRunTime
     _DacInit
       _ReadIntFromEeprom
         _EepromRead
           _DATAEE_ReadByte
         ___awtoft
           ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lmul
           _EepromRead (ARG)
             _DATAEE_ReadByte
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _FillArray
             _memset
           _Make32bitsArray
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
       _StoreIntInEeprom
         _EepromWrite
           _DATAEE_WriteByte
         _make8
     _InitAdcApplicationMgr
     _PLLInitialize
       _FillArray
         _memset
       _InitSynth
         _ReadIntFromEeprom
           _EepromRead
             _DATAEE_ReadByte
           ___awtoft
             ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lmul
             _EepromRead (ARG)
               _DATAEE_ReadByte
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _FillArray
               _memset
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _StoreIntInEeprom
           _EepromWrite
             _DATAEE_WriteByte
           _make8
         _SwSpi_Set_CE_Pin
     _TMR0_StartTimer
   _SendSystemStartAck
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _SetMcuRunTime
     ___llmod
   _SetMcuSystem
     _SYSTEM_Initialize
       _ADC_Initialize
       _EUSART1_Initialize
       _INTERRUPT_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
         _IOCB4_SetInterruptHandler
         _IOCB5_SetInterruptHandler
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
   _SynthLdDetect
     _BlinkErrorLeds
     _InitSynth
       _ReadIntFromEeprom
         _EepromRead
           _DATAEE_ReadByte
         ___awtoft
           ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lmul
           _EepromRead (ARG)
             _DATAEE_ReadByte
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _FillArray
             _memset
           _Make32bitsArray
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
       _StoreIntInEeprom
         _EepromWrite
           _DATAEE_WriteByte
         _make8
       _SwSpi_Set_CE_Pin
     ___awmod
   _keepAliveSignalLed
   _keepAliveSignalUart
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _readUartMessage
     _EUSART1_Read
     _GroupAdc *
       _SetChannelMode
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupControlMcu *
       _ResetMcu
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _testLeds
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupDAC *
       _DacReadValue
         _ReadIntFromEeprom
           _EepromRead
             _DATAEE_ReadByte
           ___awtoft
             ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lmul
             _EepromRead (ARG)
               _DATAEE_ReadByte
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _DacSetValue
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _FillArray
               _memset
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _StoreIntInEeprom
           _EepromWrite
             _DATAEE_WriteByte
           _make8
     _GroupFlashMemory *
       _FlashEreaseMem
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _ZeroArray
           _memset
       _FlashReadCondition
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _FlashReadUart
         _FLASH_IsWriteDone
         _FLASH_ReadByte
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
     _GroupStatusAndVersion *
       _GetMcuFwVersion
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         ___wmul
         _crc8
       _GetMcuRunTime
         _WriteUartMessage
           _EUSART1_Write
         ___lldiv
         ___llmod
         _crc8
     _GroupSynthesizers *
       _SetSynthOper
         _InitSynth
           _ReadIntFromEeprom
             _EepromRead
               _DATAEE_ReadByte
             ___awtoft
               ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _pow
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lltoft
                 ___ftpack
               _exp
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftge
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg
                 ___ftsub
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _floor
                   ___altoft
                     ___ftpack
                     ___fttol (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftge
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   _frexp
                 _ldexp
                   _eval_poly (ARG)
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___wmul
                 _log (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   _eval_poly
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___wmul
                   _frexp
               _log
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
           _SWSPI_send_word
             _SWSPI_DAC_send_bits
               _SwSpi_Clk_Pin
               _SwSpi_Data_Pin
             _SWSPI_Synth_send_bits
               _FillArray
                 _memset
               _Make32bitsArray
               _SwSpi_Clk_Pin
               _SwSpi_Data_Pin
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
             _make8
           _StoreIntInEeprom
             _EepromWrite
               _DATAEE_WriteByte
             _make8
           _SwSpi_Set_CE_Pin
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _SwSpi_Set_CE_Pin
       _SynthReadData
         _ReadIntFromEeprom
           _EepromRead
             _DATAEE_ReadByte
           ___awtoft
             ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lmul
             _EepromRead (ARG)
               _DATAEE_ReadByte
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _UpdateSynthFreq
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _FillArray
               _memset
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _StoreIntInEeprom
           _EepromWrite
             _DATAEE_WriteByte
           _make8
     _InitRxMessageParams *
       _ZeroArray
         _memset
     _ZeroArray *
       _memset
     _crc8 *

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _MEMORY_ISR
   _PIN_MANAGER_IOC
     _IOCB4_ISR
       Absolute function(Fake) *
       _IOCB4_DefaultInterruptHandler *
     _IOCB5_ISR
       Absolute function(Fake) *
       _IOCB5_DefaultInterruptHandler *
   _TMR0_ISR
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100     37      7D      10       48.8%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      D3       8       82.4%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0     90      9B       6       96.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     30      47       1       75.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     232       3        0.0%
DATA                 0      0     232       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Mar 28 15:44:09 2018

              __size_of_SendSystemStartAck 000C                          ??_GetMcuFwVersion 0024  
               __end_of_keepAliveSignalLed 4336                               ___altoft@exp 002F  
                 _eusart1TxBufferRemaining 01D2                         readUartMessage@idx 00ED  
                 GetIntFromUartData@idxCon 0084                            _GroupControlMcu 401C  
              __end_of_keepAliveSignalUart 4414                              ___altoft@sign 0030  
               __size_of_FLASH_IsWriteDone 000E                                         l60 3662  
                 GetIntFromUartData@recVal 007B                   GetIntFromUartData@retVal 007C  
                      __end_of_BlinkOkLeds 38A2                            _SWSPI_send_word 307C  
                      ___wmul@multiplicand 001A         __size_of_IOCB4_SetInterruptHandler 000A  
                          _timer0ReloadVal 0046                 ?_IOCB4_SetInterruptHandler 0018  
                             __CFG_CP0$OFF 000000                               __CFG_CP1$OFF 000000  
                             __CFG_CP2$OFF 000000                               __CFG_CP3$OFF 000000  
                             ___ftadd@exp1 0083                               ___ftadd@exp2 0082  
                             ___ftadd@sign 0081                                ?_MEMORY_ISR 0001  
                                      l122 4070                                        l202 1774  
                                      l211 160A                                        l203 15CE  
                                      l221 16C2                                        l213 1622  
                                      l126 1126                                        l222 1686  
                                      l206 15DA                                        l127 0FEC  
                                      l215 163A                                        l207 1604  
                                      l320 240A                                        l224 16E2  
                                      l217 1658                                        l234 3F34  
                                      l330 1284                                        l226 171A  
                                      l411 297A                                        l235 3F1E  
                                      l331 13BA                                        l219 165E  
                                      l412 2990                                        l332 12A6  
                                      l228 1722                                        l333 12C2  
                                      l318 23E8                                        l334 12D2  
                                      l326 1228                                        l319 23E8  
                                      l335 1310                                        l512 0E94  
                                      l328 1274                                        l513 0E76  
                                      l507 0D78                                        l419 284E  
                                      l700 3A78                                        l532 1CA8  
                                      l524 1B92                                        l701 3A82  
                                      l509 0F82                                        l517 0F64  
                                      l542 34D4                                        l550 0C9E  
                                      l526 1BCA                                        l519 0FB6  
                                      l543 34E0                                        l527 1C40  
                                      l640 3122                                        l552 0CAA  
                                      l528 1C30                                        l561 2AB8  
                                      l537 34B0                                        l562 2A90  
                                      l538 3498                                        l563 2A96  
                                      l539 34A4                                        l555 0D0E  
                                      l547 0BA8                                        l708 3A8C  
                                      l636 30C0                                        l709 3A96  
                                      l661 3A4A                                        l565 2B24  
                                      l901 3C38                                        l549 0C90  
                                      l662 3A0E                                        l646 39EE  
                                      l654 2D4A                                        l750 3DCE  
                                      l566 2AF8                                        l671 3A22  
                                      l663 3A18                                        l647 39BA  
                                      l727 3DB0                                        l567 2AFE  
                                      l680 3A40                                        l672 3A2C  
                                      l648 39D4                                        l656 2D78  
                                      l728 3D88                                        l912 3D5C  
                                      l649 39DE                                        l657 2D84  
                                      l737 3D9C                                        l729 3D92  
                                      l913 3D80                                        l690 3AA0  
                                      l770 42D0                                        l738 3DA6  
                                      l914 3D7E                                        l691 3A64  
                                      l692 3A6E                                        l748 3DEC  
                                      l749 3DC4                                        l774 42D4  
                                      l758 3DD8                                        l679 3A36  
                                      l759 3DE2                                        l769 42D8  
                                      l899 3C12                               __CFG_CPB$OFF 000000  
                             __CFG_CPD$OFF 000000                       readUartMessage@chRec 00EF  
                        ??_Make32bitsArray 001E                                 _SYNTH_REGS 0601  
                                      _exp 13D0                                        _log 1FB4  
                                      _pow 1CB8                               ___awmod@sign 001D  
                                      prod 000FF3                                        tosl 000FFD  
                                      wreg 000FE8             ?_InitSystemApplicationManagers 0001  
                             __CFG_LVP$OFF 000000                 __end_of_FlashReadCondition 2310  
                           InitSynth@cType 00CC                               ___ftdiv@cntr 0063  
                       __size_of_IOCB4_ISR 0022                         __size_of_IOCB5_ISR 0022  
                             ___ftdiv@sign 0068                                       l1050 2E2A  
                                     l1052 2E4A                                       l1060 3F6E  
                                     l1300 41A8                                       l1053 2E4C  
                                     l1302 41AE                                       l2040 1D02  
                                     l1320 330A                                       l1049 2E72  
                                     l2041 1CF2                                       l1321 3312  
                                     l1314 333A                                       l1322 331A  
                                     l2043 1D1A                                       l2203 4372  
                                     l1323 332A                                       l1307 4266  
                                     l1331 3E08                                       l2044 1DA4  
                                     l2028 40F4                                       l1412 1E88  
                                     l1308 4258                                       l1332 3E0E  
                                     l1340 3F94                                       l1405 36FE  
                                     l2045 1D82                                       l2029 40E4  
                                     l1166 4094                                       l1406 36C6  
                                     l2310 2C0C                                       l2302 1FD4  
                                     l2046 1E2A                                       l1414 1EA8  
                                     l1318 32EA                                       l1407 36FA  
                                     l2311 2B8E                                       l1423 38E2  
                                     l1503 083E                                       l1319 32FA  
                                     l2240 1424                                       l2304 1FF8  
                                     l1424 38A4                                       l1416 1F1E  
                                     l1328 3E1C                                       l2241 145E  
                                     l1433 3972                                       l1505 086C  
                                     l1329 3E02                                       l1337 3FA2  
                                     l2250 29C6                                       l2242 148E  
                                     l1426 38A8                                       l1290 4022  
                                     l1338 3F86                                       l2243 15B8  
                                     l1435 39B0                                       l1427 38AC  
                                     l1507 08B8                                       l2252 29EE  
                                     l2244 158E                                       l1612 3AC6  
                                     l1444 21D8                                       l1428 38B0  
                                     l1292 4028                                       l2253 2A6A  
                                     l1613 3ADA                                       l1445 20FE  
                                     l1429 38DE                                       l2181 1800  
                                     l1509 08E6                                       l2262 2C3E  
                                     l2238 13EA                                       l1438 3E9C  
                                     l2190 1874                                       l1439 3E72  
                                     l2183 1854                                       l1519 2724  
                                     l2264 2C88                                       l2280 4288  
                                     l2192 188E                                       l2249 29D4  
                                     l1393 3BDE                                       l1289 402E  
                                     l2258 31EC                                       l2266 2CBA  
                                     l1394 3BC2                                       l2290 42A6  
                                     l2267 2CAE                                       l2275 414E  
                                     l2195 18A0                                       l2179 17E8  
                                     l1299 41B4                                       l1900 25B8  
                                     l2196 190C                                       l1821 2FA6  
                                     l1901 25C8                                       l2285 4174  
                                     l2189 1864                                       l1822 2F9C  
                                     l2198 1930                                       l1590 3590  
                                     l1815 2F4A                                       l1911 3C9E  
                                     l2199 196C                                       l1816 2F40  
                                     l1592 35B6                                       l1905 41DC  
                                     l1593 35AA                                       l1818 2F7E  
                                     l1850 19FC                                       l1819 2F68  
                                     l1923 24DE                                       l1915 2442  
                                     l1595 35C8                                       l1860 1A58  
                                     l1924 24D2                                       l1861 1A4E  
                                     l1685 351C                                       l1917 24BA  
                                     l1781 35EE                                       l1589 3578  
                                     l1870 1A8C                                       l1846 19D2  
                                     l1686 3510                                       l1926 24FA  
                                     l1918 24AA                                       l1790 3640  
                                     l1782 35FA                                       l1855 1A62  
                                     l1951 339E                                       l1872 1ABA  
                                     l1784 3610                                       l1952 3392  
                                     l1881 2654                                       l1873 1AD6  
                                     l1961 373A                                       l1785 3608  
                                     l1882 2692                                       l1874 1B06  
                                     l1962 372E                                       l1883 26B8  
                                     l1955 33D2                                       l1972 3910  
                                     l1796 3EB8                                       l1788 3628  
                                     l1956 33E0                                       l1973 3904  
                                     l1869 1A96                                       l1965 3762  
                                     l1789 3632                                       l1894 2536  
                                     l1966 3770                                       l1879 262C  
                                     l1887 3284                                       l1896 255E  
                                     l1888 32B4                                       l1897 2590  
                                     l1898 25A0                                       l7035 32E0  
                                     l7301 40E4                                       l8201 3652  
                                     l8033 1E80                                       l8115 0E76  
                                     ?_exp 0097                                       ?_log 008E  
                                     l8127 0F64                                       l6375 37F0  
                                     l8215 36A8                                       l8055 1F0E  
                                     l8073 1F72                                       l7603 158E  
                                     l8307 1300                                       l8245 2E22  
                                     l6637 384E                                       l8317 1370  
                                     l8501 0C96                                       l7519 3962  
                                     l8087 0D70                                       l8601 27A0  
                                     l7731 2D42                                       l8507 0CA2  
                                     l7901 30EC                                       l8381 283E  
                                     l8391 2884                                       l7659 3D4A  
                                     l8637 28B8                                       l8737 0FE4  
                                     l8649 297A                                       l8589 2714  
                                     ?_pow 00A0                                       l7897 30DE  
                                     STR_1 0690                                       STR_2 0690  
                                     STR_3 0690                                       STR_4 0690  
                                     STR_5 0690                                       STR_6 0690  
                                     STR_7 0690                                       STR_8 0690  
                                     STR_9 0690                         EepromWrite@address 001C  
                                     _LATA 000F89                                       _LATB 000F8A  
                                     _LATC 000F8B                                       _LATD 000F8C  
                                     _LATE 000F8D                                       u8000 4404  
                                     u7040 29E0                                       u8001 4400  
                                     u7135 3F7C                                       u6440 2F32  
                                     u6600 19EE                                       u7080 2C5E  
                                     u9000 2F1E                                       u7136 3F7E  
                                     u8040 1EC2                                       u6531 1990  
                                     u5644 36EE                                       u6700 1A9E  
                                     u7340 1468                                       u7500 38D6  
                                     u5645 36E8                                       u6541 19A4  
                                     u6630 1A2C                                       u7350 146A  
                                     u8150 0DAC                                       u8070 1F72  
                                     u8230 33A2                                       u8215 4018  
                                     u8216 401A                                       u6480 2FB0  
                                     u7088 2C62                                       u7505 38CC  
                                     u8081 1FAA                                       u6570 19C4  
                                     u7450 1D68                                       u8340 2E50  
                                     u8260 373E                                       u5780 3614  
                                     u5860 4328                                       u8420 1370  
                                     u6741 251E                                       u6670 1A6A  
                                     u6831 2426                                       u9207 2D98  
                                     u6920 3214                                       u7640 4170  
                                     u6761 2546                                       u9217 3874  
                                     u8441 313A                                       u9137 13A8  
                                     u8361 11F6                                       u6850 2460  
                                     u7570 2D96                                       u8290 36A8  
                                     u8450 317C                                       u8610 34C2  
                                     u8355 2E6E                                       u9227 388E  
                                     u9147 366A                                       u8356 2E70  
                                     u7660 4140                                       u7900 182A  
                                     u8620 34C4                                       u6941 2614  
                                     u9237 10B2                                       u9157 367A  
                                     u5878 432A                                       u8470 2884  
                                     u6855 2458                                       u9167 368A  
                                     u8455 3170                                       u6928 3216  
                                     u7760 3090                                       u7920 183A  
                                     u6961 263C                                       u9177 369A  
                                     u8481 1B44                                       u6890 24E4  
                                     u8570 3486                                       u9187 3816  
                                     u8740 27A0                                       u8580 3488  
                                     u9197 3830                                       u7790 311C  
                                     u7870 17F0                                       u8760 2370  
                                     u8680 0CFE                                       u8690 0D02  
                                     u8755 231A                                       u8780 23B4  
                                     u8860 10C6                                       u8998 174E  
                                     u8999 176C                   ??_SwSpi_Set_Synth_Le_Pin 0019  
                                     _WPUB 000F61                              _EUSART1_Write 3D48  
                                     _crc8 3BB0                    ??_InitAdcApplicationMgr 0018  
                                     _data 013B                                       _main 3566  
                             ___ftpack@arg 0018                              ?_EUSART1_Read 0001  
                             ___ftpack@exp 001B                            _TMR0_StartTimer 4464  
                          __end_of_DacInit 2996                                       fsr0h 000FEA  
                                     fsr1h 000FE2                                       fsr2h 000FDA  
                                     fsr0l 000FE9                                       indf1 000FE7  
                                     indf2 000FDF                                       fsr1l 000FE1  
                                     fsr2l 000FD9                                       btemp 0048  
                            __CFG_BORV$190 000000                                       exp@x 0097  
                                     log@x 008E                          ?_FLASH_WriteBlock 001D  
                         ?_ClearMcuRunTime 0001                                       pow@x 00A0  
                                     pow@y 00A3                                       prodh 000FF4  
                                     prodl 000FF3                  GroupStatusAndVersion@data 00E6  
            __size_of_CheckFlashPrecentage 00AE                                       start 00DC  
                            __CFG_IESO$OFF 000000                          DacReadValue@TxMsg 00D1  
                      __end_of_EepromWrite 43FA                         ??_FLASH_WriteBlock 0023  
                            _adcSampleMode 003D                               ___ftmul@cntr 0076  
                             ___param_bank 000000                               ___ftmul@sign 0077  
                           _BlinkErrorLeds 37E6                               ___fttol@exp1 0086  
                __size_of_DATAEE_WriteByte 0036                                      ??_exp 0031  
                                    ??_log 0031                               ___fttol@lval 0082  
                                    ??_pow 0031                    __end_of_TMR0_Initialize 3FE8  
                   _ReadIntFromEeprom$3600 00BC                     _ReadIntFromEeprom$3601 00BF  
           __size_of_OSCILLATOR_Initialize 000E              __end_of_OSCILLATOR_Initialize 43EC  
                                    ?_crc8 0018                 SWSPI_DAC_send_bits@phrType 001C  
                                    ?_main 0001                                      _EEADR 000FA9  
                          __end_of___ftadd 1B2C                     GetUint16FromBitArray@i 0021  
                                    STR_10 0690                                      STR_11 0690  
                                    STR_20 069C                                      STR_12 0690  
                                    STR_21 069C                                      STR_13 0690  
                                    STR_22 069C                                      STR_14 0690  
                                    STR_23 069C                                      STR_15 0690  
                                    STR_24 069C                                      STR_16 0690  
                                    STR_25 069C                                      STR_17 0690  
          __size_of_SwSpi_Set_Dac_Sync_Pin 001C                                      STR_26 069C  
                                    STR_18 069C                                      STR_27 069C  
                                    STR_19 069C                                      STR_28 069C  
                          __end_of___awmod 364A                                      STR_29 069C  
                          __end_of___ftdiv 26EA          __end_of_IOCB4_SetInterruptHandler 4448  
                          __end_of___ftneg 41EA                            __end_of___lldiv 33F2  
                               _EepromRead 4448                            __end_of___ftmul 2602  
                                    _T0CON 000FD5                            __end_of___llmod 3782  
                          __end_of___ftsub 3CC8                            __end_of___fttol 250C  
                             _SYNTH_ADDRES 0635                             __CFG_DEBUG$OFF 000000  
                          InitSynth@regNum 00CE                            __end_of___lwmod 3D0A  
                      StoreIntInEeprom@idx 0029                                      i2l924 40B4  
                                    i2l852 007A                                      i2l925 40D4  
                                    i2l918 3F08                                      i2l854 0086  
                                    i2l919 3F04                                      i2l847 005E  
                                    i2l856 0090                                      i2l849 006A  
                      StoreIntInEeprom@val 0028                                      _TMR0H 000FD7  
                                    _TMR0L 000FD6                                      _TRISA 000F92  
                                    _TRISB 000F93                                      _TRISC 000F94  
                                    _TRISD 000F95                                      _TRISE 000F96  
                      _SWSPI_DAC_send_bits 39B2          __size_of_TMR0_SetInterruptHandler 000A  
                            __CFG_WRT0$OFF 000000                              __CFG_WRT1$OFF 000000  
               __end_of_GetIntFromUartData 1FB4                              __CFG_WRT2$OFF 000000  
                      ___lmul@multiplicand 001E                  ?_TMR0_SetInterruptHandler 0018  
                            __CFG_WRT3$OFF 000000                               ___lltoft@exp 0028  
                     _EUSART1_Transmit_ISR 3EDC                             __CFG_EBTR0$OFF 000000  
                           __CFG_FCMEN$OFF 000000                             __CFG_EBTR1$OFF 000000  
                           __CFG_EBTR2$OFF 000000                             __CFG_EBTR3$OFF 000000  
                        ?_WriteUartMessage 0019                           __end_of_TMR0_ISR 307C  
                            __CFG_WRTB$OFF 000000                              __CFG_WRTC$OFF 000000  
                            __CFG_WRTD$OFF 000000                            DacSetValue@data 008A  
                          _DATAEE_ReadByte 4376                             __CFG_EBTRB$OFF 000000  
                            ___awtoft@sign 0023                    __end_of_PIN_MANAGER_IOC 43D0  
                                    crc8@i 001F                                      _make8 38A2  
           __size_of_SWSPI_Synth_send_bits 00C6                      __end_of_GetMcuRunTime 27CE  
                                    _count 0138                                      _floor 2996  
                                    _ldexp 2C24                                      _frexp 31C4  
                                    _errno 0134              __end_of_SWSPI_Synth_send_bits 2DB8  
                          __end_of_isalpha 4156                            __end_of_isdigit 4290  
                                    _group 00F3             __size_of_GetUint16FromBitArray 0068  
                       ??_WriteUartMessage 001D                         __CFG_MCLRE$EXTMCLR 000000  
                            ___ftpack@sign 001C                    ??_GroupStatusAndVersion 0031  
            __end_of_GetUint16FromBitArray 371C                            __end_of_isspace 417C  
                           ?_EUSART1_Write 0001                                ?_AdcConvert 0001  
                           __CFG_BOREN$OFF 000000                            __end_of_isupper 42AE  
                                    pclath 000FFA                                      tablat 000FF5  
                        ??_UpdateSynthFreq 0030                                      pow@yi 00AD  
                           ??_EUSART1_Read 0018                             FillArray@array 0020  
                                    plusw0 000FEB                                      plusw2 000FDB  
                                    status 000FD8                             FillArray@value 0024  
                                    wtemp6 0049                       ReadIntFromEeprom@idx 00C7  
                           __CFG_HFOFST$ON 000000                            __end_of_toupper 4376  
           SwSpi_Set_Synth_Le_Pin@cPinMode 0018                     __size_of_SynthLdDetect 00D6  
                  __end_of_GroupControlMcu 404C                        __size_of_MEMORY_ISR 0004  
                           __CFG_PBADEN$ON 000000                                exp@exponent 009D  
           CheckFlashPrecentage@precentage 007C                       ?_SWSPI_DAC_send_bits 001A  
                   __end_of_BlinkErrorLeds 3844            ??_IOCB4_DefaultInterruptHandler 0001  
                              ldexp@newexp 0091                    __end_of_SWSPI_send_word 3126  
                              _BlinkOkLeds 3844                    WriteUartMessage@dataBuf 0019  
                          __initialization 33F2                                log@exponent 0091  
                             __end_of_crc8 3BFE                 __end_of_EUSART1_Initialize 3E6C  
                             __end_of_main 35DA                         DacReadValue@regNum 00CC  
                        __end_of_IOCB4_ISR 4252                          __end_of_IOCB5_ISR 4230  
                  FLASH_ReadByte@flashAddr 0018                ?_INTERRUPT_InterruptManager 0001  
                         __end_of_GroupDAC 3FB4                     __size_of_SynthReadData 02B0  
                          _readUartMessage 15C6                           __end_of_GroupAdc 4272  
                                   ??_crc8 001C                                     ??_main 0031  
                            ___fttol@sign1 0081                          ?_SwSpi_Set_CE_Pin 0018  
                            __activetblptr 000002                    __size_of_FLASH_ReadByte 0012  
                         __end_of_ResetMcu 43DE                         __size_of_FillArray 001C  
                             _writeAddress 003E                         ??_SwSpi_Set_CE_Pin 0019  
                    ?_EUSART1_Transmit_ISR 0001                    __end_of_TMR0_StartTimer 4468  
                                   ?_make8 0018                                     _ADCON0 000FC2  
                                   _ADCON1 000FC1                                     _ADCON2 000FC0  
                                   ?_floor 008F                  FLASH_WriteBlock@writeAddr 001D  
                                   ?_ldexp 008E                                     ?_frexp 0018  
                         __end_of___altoft 3566                           ___llmod@dividend 0018  
                                   _ADRESH 000FC4                                     _ADRESL 000FC3  
                                   _EEDATA 000FA8                                  ??_DacInit 00C8  
                                   _EECON2 000FA7                           __end_of___awtoft 3EDC  
                                   _ANSELA 000F38                                     _ANSELB 000F39  
                                   _ANSELC 000F3A                                     _ANSELD 000F3B  
                                   _ANSELE 000F3C                           __end_of___ftpack 2FD0  
           ?_IOCB5_DefaultInterruptHandler 0001                           __end_of___lltoft 395A  
                        _FlashReadUart$609 00DC                          ?_FlashSampleWrite 002D  
                                   i2l1120 3000                                     i2l1121 3022  
                                   i2l1122 3044                                     i2l1123 3066  
                                   i2l2014 3CDE                                     i2l2015 3CD6  
                                   i2l2018 3CF6                                     i2l2019 3D00  
                           __CFG_WDTEN$OFF 000000                       StoreIntInEeprom@data 0021  
                                   _TABLAT 000FF5                                _EepromWrite 43EC  
                                   _RCREG1 000FAE                           __end_of___lwtoft 420E  
                  __size_of_FlashEreaseMem 0052                  __size_of_FLASH_EraseBlock 0034  
                                   _RCSTA1 000FAB                          SynthReadData@data 00C8  
          __size_of_SwSpi_Set_Synth_Le_Pin 003C                                     _OSCCON 000FD3  
                                   _SPBRG1 000FAF                     _SwSpi_Set_Dac_Sync_Pin 42CC  
                  __size_of_SwSpi_Data_Pin 0056                   GroupSynthesizers@request 00E8  
                       ??_FlashSampleWrite 0060                                     _TXREG1 000FAD  
                                   _TXSTA1 000FAC                         __size_of_InitSynth 0276  
                    ??_SWSPI_DAC_send_bits 001B                             _Timer0_SynthLd 00FA  
                 __end_of_GroupFlashMemory 3E34                            ?_BlinkErrorLeds 0001  
                           __CFG_PWRTEN$ON 000000                             __CFG_XINST$OFF 000000  
                             _synthLdRxCnt 0043                               _synthLdTxCnt 0042  
                                   _cState 00F4                                     ___ftge 3254  
                                   ___lmul 3AB6                  SWSPI_Synth_send_bits@data 0025  
                                   ___wmul 417C                                  ??___ftadd 007E  
                SWSPI_Synth_send_bits@mask 0080                                  ??___awmod 001C  
                                ??___ftdiv 0060                                  ??___ftneg 001B  
                                ??___lldiv 0020                                  ??___ftmul 006F  
                    __end_of_PLLInitialize 3D48                                  ??___llmod 0020  
                                ??___ftsub 002F                                  ??___fttol 007C  
                                ??___lwmod 0005             SwSpi_Set_Dac_Sync_Pin@cPinMode 0018  
                         ?_TMR0_Initialize 0001                                     _memset 40DA  
                       __end_of_DAC_ADDRES 0657                                     clear_0 3438  
                                   clear_1 3444                                     clear_2 3450  
                                   clear_3 345C                            ___awmod@divisor 001A  
                      __size_of_AdcConvert 021C                            ___awmod@counter 001C  
                  __end_of_DATAEE_ReadByte 438A                                ?_EepromRead 0001  
                                   _strtol 17A8                                     floor@i 0092  
                    __end_of_SwSpi_Clk_Pin 3AB6                                     floor@x 008F  
                    ___ftmul@f3_as_product 0073                              _SynthLdDetect 2A78  
                 SWSPI_DAC_send_bits@count 001B                 FlashSampleWrite@channelNum 002F  
                             __pdataCOMRAM 003E                                  ??_isalpha 001B  
                                ??_isdigit 0018                      __end_of_FlashReadUart 13D0  
                         __end_of_testLeds 36B4                              ?_SetMcuSystem 0001  
                             __mediumconst 0000                                  ??_isspace 0018  
                                   tblptrh 000FF7                                  ??_isupper 0018  
                                   tblptrl 000FF6                                     tblptru 000FF8  
                 ADC_GetConversion@channel 001C                            ??_EUSART1_Write 0018  
 TMR0_SetInterruptHandler@InterruptHandler 0018  IOCB5_SetInterruptHandler@InterruptHandler 0018  
IOCB4_SetInterruptHandler@InterruptHandler 0018               __size_of_InitRxMessageParams 0028  
                         ?_PIN_MANAGER_IOC 0001                      ReadIntFromEeprom@base 00B8  
                          _eusart1RxBuffer 0100                                  ??_toupper 0018  
                       __size_of_ZeroArray 001E              __size_of_INTERRUPT_Initialize 0004  
                            _SynthReadData 0A96                            _eusart1TxBuffer 0200  
                          _GetMcuFwVersion 06A6                           __end_ofexp@coeff 0675  
                        _SYSTEM_Initialize 4304                           __end_oflog@coeff 0690  
                               __accesstop 0060                    __end_of__initialization 3462  
                               ___altoft@c 0087                              ZeroArray@size 0022  
                               ___ftadd@f1 0078                                 ___ftadd@f2 007B  
                               ___ftge@ff1 0018                                 ___ftge@ff2 001B  
                       ?_SYSTEM_Initialize 0001                               eval_poly@res 008B  
                            ___rparam_used 000001                                 ___ftdiv@f1 0029  
                               ___ftdiv@f2 002C                                 ___ftdiv@f3 0064  
                         ?_GroupControlMcu 00E6               GroupStatusAndVersion@request 00E9  
                             InitSynth@idx 00CD                          __end_of_FillArray 4304  
                               ___ftneg@f1 0018                                 ___awtoft@c 0020  
                  __end_of_readUartMessage 17A8                   WriteUartMessage@dataSize 001B  
                               ___ftmul@f1 0069                                 ___ftmul@f2 006C  
                         ?_SWSPI_send_word 0029                               ?_DacSetValue 008A  
                               ___ftsub@f1 0084                                 ___ftsub@f2 0087  
                               ___fttol@f1 0078                            _Make32bitsArray 395A  
                           __pcstackCOMRAM 0001                               __pidataBANK1 43B0  
                      ??_SYSTEM_Initialize 001C                                  ?_TMR0_ISR 0001  
                      DacReadValue@byteIdx 00D8                                 ___lltoft@c 0020  
                      DacReadValue@byteNum 00CD                              __end_of_make8 38FE  
                      DacReadValue@readVal 00CE                           _DATAEE_WriteByte 3F4A  
                            __end_of_floor 2A78                              __end_of_ldexp 2CF2  
                            __end_of_frexp 3254      __end_of_IOCB4_DefaultInterruptHandler 4470  
   __size_of_IOCB4_DefaultInterruptHandler 0002              _IOCB4_DefaultInterruptHandler 446E  
                   _SwSpi_Set_Synth_Le_Pin 3DC0                       GroupFlashMemory@data 00E6  
                               ___lwtoft@c 0020                ??_IOCB4_SetInterruptHandler 001A  
                           ?_SynthLdDetect 0001            __end_of_DAC_DEFAULT_INIT_VALUES 0653  
                     __end_of_EUSART1_Read 3C42                               ??_MEMORY_ISR 0001  
                __size_of_StoreIntInEeprom 0038                     __size_of_SetMcuRunTime 0044  
                   ??_EUSART1_Transmit_ISR 0001                          __end_of_InitSynth 0FBC  
                           ??_SetMcuSystem 001C                      TMR0_ISR@CountCallBack 0031  
            SwSpi_Set_Synth_Le_Pin@phrType 0019                    GroupFlashMemory@request 00E8  
                       _keepAliveSignalLed 431E                          make8@dataLocation 001C  
              __end_of_EUSART1_Receive_ISR 40DA                FLASH_WriteBlock@GIEBitValue 002B  
                             GroupDAC@data 00E6                              ?_SetSynthOper 0001  
                                  ??_make8 001D                                    ??_floor 0031  
                         ?_TMR0_StartTimer 0001                                    ??_ldexp 0093  
                                  ??_frexp 001D                  __end_of_SYSTEM_Initialize 431E  
                          _AdcConvert$3599 00BD                             ?_SynthReadData 00C8  
                            _eusart1RxHead 0034                       GetMcuFwVersion@TxMsg 0064  
                            _eusart1TxHead 0036                              _eusart1RxTail 0033  
                               __pbssBANK0 00F0                                 __pbssBANK1 0100  
                               __pbssBANK2 0200                              _eusart1TxTail 0035  
                      ?_keepAliveSignalLed 0001                         __size_of_eval_poly 00D6  
                          __CFG_PLLCFG$OFF 000000                                 _channelArr 0642  
                                ?_GroupDAC 00E6                                 __pnvCOMRAM 0046  
                                ?_GroupAdc 00E6             __size_of_InitAdcApplicationMgr 0006  
               __end_of_SendSystemStartAck 4420              __end_of_InitAdcApplicationMgr 4460  
                      __size_of_EepromRead 000A                         __end_of_MEMORY_ISR 446C  
                                ?_ResetMcu 0001                         _FlashReadCondition 2204  
          ??_InitSystemApplicationManagers 0031                         __CFG_CCP2MX$PORTC1 000000  
                                  ?___ftge 0018                             FlashReadUart@j 00E0  
         __end_of_TMR0_SetInterruptHandler 4434                                    ?___lmul 001A  
                                  ?___wmul 0018                                 ??_TMR0_ISR 0006  
                       __CFG_CCP3MX$PORTB5 000000                         SetChannelMode@data 002C  
                     ??_keepAliveSignalLed 0018                          __end_of_ZeroArray 42CC  
                                ?___altoft 0087                                    ?_memset 0018  
                        _ReadIntFromEeprom 20DE                             ___lmul@product 0022  
                      ?_FlashReadCondition 0001         __size_of_IOCB5_SetInterruptHandler 000A  
                                ?___awtoft 0020                                  ?___ftpack 0018  
                             GroupAdc@data 00E6                           FlashReadUart@idx 00E4  
                 GetUint16FromBitArray@res 001F                           FlashReadUart@val 00D4  
               ?_IOCB5_SetInterruptHandler 0018                                  ?___lltoft 0020  
                        _synthLdRxArrayCnt 0038                  __size_of_FLASH_WriteBlock 00BC  
                  __size_of_ADC_Initialize 0016                 FlashSampleWrite@sampleData 002D  
                           _FLASH_ReadByte 439E                                  ?___lwtoft 0020  
             __end_of_CheckFlashPrecentage 2F22                         ?_ReadIntFromEeprom 00B1  
                                  ?_strtol 0026                           ?_DATAEE_ReadByte 0001  
               GetMcuFwVersion@compileData 0060                            _UpdateSynthFreq 1B2C  
                          _Timer0_Sampling 00F9               __size_of_keepAliveSignalUart 000C  
                       SynthReadData@TxMsg 0246                    __end_of_GetMcuFwVersion 0A96  
                       SynthReadData@cType 027A                                    _OSCCON2 000FD2  
                           ??_SetSynthOper 0031                                    _TBLPTRH 000FF7  
                                  _TBLPTRL 000FF6                                    _TBLPTRU 000FF8  
                                  _OSCTUNE 000F9B                                    _SPBRGH1 000FB0  
                        _synthLdTxArrayCnt 0037                        ??_ReadIntFromEeprom 00B5  
                                  _DacInit 28B2                      GetIntFromUartData@num 007A  
                         GetMcuRunTime@idx 006D                               ??_AdcConvert 00B1  
                     ??_FlashReadCondition 0024                             _FlashEreaseMem 3B0C  
                         _FLASH_EraseBlock 3FE8             __size_of_GroupStatusAndVersion 0024  
                           _SwSpi_Data_Pin 3A0A                  _IOCB4_SetInterruptHandler 443E  
                     DATAEE_WriteByte@bAdd 0019              __end_of_GroupStatusAndVersion 41C6  
                  __end_of_Make32bitsArray 39B2                                 ??_GroupDAC 0031  
                               ??_GroupAdc 0031                              _SetMcuRunTime 3C42  
                       _GetIntFromUartData 1E38                         FlashReadUart@TxMsg 008F  
                    GroupSynthesizers@data 00E6                                    __Hparam 0000  
                               ??_ResetMcu 002C                  __size_of_WriteUartMessage 0036  
                             ?_BlinkOkLeds 0001                                    __Lparam 0000  
                    SendAckMessage@inGroup 0025                           ?_readUartMessage 0001  
                   GroupControlMcu@request 00E9                                  ?_testLeds 0001  
                __end_of_ReadIntFromEeprom 2204                        ?_GetIntFromUartData 0066  
                          __size_of___ftge 0090                            __size_of___lmul 0056  
                                  ___ftadd 197E                                    ___awmod 35DA  
                                  ___ftdiv 2602                                    ___ftneg 41C6  
                                  ___lldiv 3370                            __size_of___wmul 0026  
                                  ___ftmul 250C                                    ___llmod 371C  
                                  ___ftsub 3C86                                    ___fttol 2414  
               FlashSampleWrite@rotateLeft 0062                               crc8@dataSize 001A  
                 __size_of_ClearMcuRunTime 0014                                    ___lwmod 3CC8  
                     AdcConvert@_adcResult 00B3                               __psmallconst 0600  
                          ??_SynthLdDetect 0031                                 ??___altoft 008B  
                   __end_of_FLASH_ReadByte 43B0                            __CFG_STVREN$OFF 000000  
               SWSPI_Synth_send_bits@count 0084                      _mcuRunTimeIn5SecTicks 0128  
                                  _crcCalc 003C                                    _channel 00F6  
                                  __pcinit 33F2                                 ??___awtoft 0023  
                               ??___ftpack 001D                          __end_of_eval_poly 2C24  
                          __size_of_memset 002C                                    __ramtop 0600  
                  __size_of_SendAckMessage 0052                                 ??___lltoft 0024  
                  __size_of_SetChannelMode 0030                                    __ptext0 3566  
                                  __ptext1 15C6                                    __ptext2 4106  
                                  __ptext3 3F80                                    __ptext4 3DFC  
                                  __ptext5 4252                                    __ptext6 41A2  
                                  __ptext7 401C                                    __ptext8 32E4  
                                  __ptext9 1B2C                                    crc8@crc 001D  
                       __end_of_AdcConvert 11D8                          DacSetValue@retVal 0091  
                               ??___lwtoft 0023                                  _T0CONbits 000FD5  
        __end_of_IOCB5_SetInterruptHandler 443E                                  _IOCB4_ISR 4230  
                                _IOCB5_ISR 420E                          BlinkErrorLeds@idx 001C  
                          __size_of_strtol 01D6                      _OSCILLATOR_Initialize 43DE  
                                  _isalpha 412E                               __size_of_exp 01F6  
                             __size_of_log 012A                                    _isdigit 4272  
                             __size_of_pow 0180                           ___awmod@dividend 0018  
                       _EUSART1_Initialize 3E34                   ??_PIN_MANAGER_Initialize 001A  
                                  _isspace 4156                  StoreIntInEeprom@numOfByes 0026  
                                  _isupper 4290                                    _request 00F2  
                          GroupDAC@request 00E8                            ??_SynthReadData 0031  
                     ??_GetIntFromUartData 006E                     __end_of_FlashEreaseMem 3B5E  
               __size_of_SYSTEM_Initialize 001A                    ?_SwSpi_Set_Dac_Sync_Pin 0001  
                   __end_of_SwSpi_Data_Pin 3A60                    StoreIntInEeprom@address 0025  
                                  _toupper 4362                       end_of_initialization 3462  
                                  exp@sign 009F                        ?_EUSART1_Initialize 0001  
                         ??_BlinkErrorLeds 0018                               ?_EepromWrite 001B  
                    _SWSPI_Synth_send_bits 2CF2                  __size_of_SwSpi_Set_CE_Pin 003C  
                    _GetUint16FromBitArray 36B4                             ?_SetMcuRunTime 0001  
                                  memset@c 001A                                    memset@n 001C  
                                  memset@p 001E                              __Lmediumconst 0000  
                          ___lldiv@divisor 001C                       __end_of_SetMcuSystem 442A  
                                  pow@sign 00AC                            ___lldiv@counter 0024  
                        ?_GroupFlashMemory 00E6                           AdcConvert@adcRes 00BB  
                       __end_of_SYNTH_REGS 0635                       UpdateSynthFreq@cType 008C  
                               ??_testLeds 002C                       SWSPI_send_word@datac 0086  
                               _rxMsgQueue 0190                                    postdec1 000FE5  
                                  postdec2 000FDD            ??_IOCB5_DefaultInterruptHandler 0001  
                       ??_GroupFlashMemory 0031                                    postinc0 000FEE  
                                  postinc2 000FDE                      __size_of_EUSART1_Read 0044  
                     SynthReadData@byteNum 027C                        _InitRxMessageParams 4106  
                              testLeds@idx 002D                    __end_of_UpdateSynthFreq 1CB8  
                     __size_of_DacSetValue 009E                  __size_of_FlashSampleWrite 0104  
                   __size_of_GetMcuRunTime 00E4                       ??_EUSART1_Initialize 0018  
    __end_of_InitSystemApplicationManagers 4362     __size_of_InitSystemApplicationManagers 0016  
            _InitSystemApplicationManagers 434C                            ?_FLASH_ReadByte 0018  
                                  strtol@a 0061                                    strtol@c 0065  
                                  strtol@s 0026                   _TMR0_SetInterruptHandler 442A  
                                _PORTDbits 000F83                               ??_EepromRead 0019  
                         _StoreIntInEeprom 3E6C                                 ?_IOCB4_ISR 0001  
                               ?_IOCB5_ISR 0001                           ?_GetMcuFwVersion 0001  
                           ZeroArray@array 0020             __end_of_SwSpi_Set_Dac_Sync_Pin 42E8  
                             strtol@endptr 0028              FLASH_WriteBlock@flashWrBufPtr 0021  
                       GetMcuRunTime@TxMsg 0060                       ?_InitRxMessageParams 0001  
                          ?_FlashEreaseMem 0001                        EUSART1_Write@txData 0018  
                          ?_SwSpi_Data_Pin 0018                   __end_of_DATAEE_WriteByte 3F80  
              __end_of_SWSPI_DAC_send_bits 3A0A                              ?_DacReadValue 00C8  
                     DacReadValue@dacIndex 00D0                   FLASH_EraseBlock@baseAddr 0018  
                         ?_Make32bitsArray 0018                                ___ftdiv@exp 0067  
                             _EUSART1_Read 3BFE                       _CheckFlashPrecentage 2E74  
                        FLASH_WriteBlock@i 002C                         __end_of_EepromRead 4452  
                         DacReadValue@data 00C8                                ___ftmul@exp 0072  
                  ?_SwSpi_Set_Synth_Le_Pin 0018                       __end_of_SetSynthOper 34EC  
               __size_of_ReadIntFromEeprom 0126                                  _FillArray 42E8  
             __end_of_INTERRUPT_Initialize 4464                             __end_of___ftge 32E4  
                           __end_of___lmul 3B0C                             __end_of___wmul 41A2  
                      GroupControlMcu@data 00E6                              __pidataCOMRAM 4452  
                        __size_of_TMR0_ISR 00AC                             _ADC_Initialize 4336  
                         _FLASH_WriteBlock 2DB8                     ?_OSCILLATOR_Initialize 0001  
                           __end_of_memset 4106                         InitSynth@EepromVal 00C8  
                               floor@expon 0095                              FillArray@size 0022  
                        ??_ClearMcuRunTime 0018                             __end_of_strtol 197E  
                      start_initialization 33F2                                 eval_poly@d 0087  
                               eval_poly@n 0089                                 eval_poly@x 0084  
                              _SynthRxOper 0044                           BlinkOkLeds@state 001B  
                 __size_of_TMR0_Initialize 0034                                 ldexp@value 008E  
                              _SynthTxOper 0045            __size_of_PIN_MANAGER_Initialize 0064  
                    ??_InitRxMessageParams 0024                                __end_of_exp 15C6  
                              __end_of_log 20DE                                __end_of_pow 1E38  
            GetUint16FromBitArray@bitarray 0018                   AdcConvert@_adcResult_350 00B5  
                                _InitSynth 0D46                             ??_DacReadValue 00CA  
                            _GetMcuRunTime 26EA                     ?_SWSPI_Synth_send_bits 0025  
                          ??_SetMcuRunTime 0021                      __end_of_EUSART1_Write 3D84  
                   ?_GetUint16FromBitArray 0018                     __size_of_PLLInitialize 003E  
                               frexp@value 0018                            ___llmod@divisor 001C  
                            _Timer0_OneSec 00F7                      ?_CheckFlashPrecentage 0001  
                          ___llmod@counter 0020                        DATAEE_ReadByte@bAdd 0018  
                 __size_of_PIN_MANAGER_IOC 0010                     __size_of_SwSpi_Clk_Pin 0056  
                      SendAckMessage@TxMsg 0026             __end_of_SwSpi_Set_Synth_Le_Pin 3DFC  
                           _cntRegUpdateRx 0039                        _keepAliveSignalUart 4408  
                           _cntRegUpdateTx 003A                          __size_of_GroupDAC 0034  
                         _WriteUartMessage 3F14                          __size_of_GroupAdc 0020  
                   __size_of_FlashReadUart 01F8                                   ??___ftge 001E  
                                 ??___lmul 0022                    SendAckMessage@inRequest 0024  
                                 ??___wmul 001C                  GetIntFromUartData@idxData 0086  
                        __size_of_ResetMcu 000E                       __size_of_BlinkOkLeds 005E  
                               ?_FillArray 0020                     __end_of_ADC_Initialize 434C  
                         ?_UpdateSynthFreq 008A                                __pdataBANK1 01BC  
                  SWSPI_DAC_send_bits@data 001A                                   ??_memset 001E  
                 __size_of_GroupControlMcu 0030                FLASH_EraseBlock@GIEBitValue 001C  
                           _SendAckMessage 3B5E                             _SetChannelMode 404C  
                 __end_of_FLASH_EraseBlock 401C                         _SendSystemStartAck 4414  
                 __size_of_SWSPI_send_word 00AA      __end_of_IOCB5_DefaultInterruptHandler 446E  
   __size_of_IOCB5_DefaultInterruptHandler 0002              _IOCB5_DefaultInterruptHandler 446C  
              ??_IOCB5_SetInterruptHandler 001A                                   ??_strtol 002C  
                           _eusart1RxCount 00F5                                ??_IOCB4_ISR 0001  
                              ??_IOCB5_ISR 0001                          __size_of___altoft 007A  
                                _ZeroArray 42AE                            DacInit@dacInput 00CA  
                        __size_of___awtoft 0038                          __size_of___ftpack 00AE  
                     ?_keepAliveSignalUart 0001                          __size_of___lltoft 005C  
                              __pbssCOMRAM 0031                          __size_of___lwtoft 0024  
            __size_of_EUSART1_Transmit_ISR 0038                              __pcstackBANK0 0060  
                            __pcstackBANK2 0246                               _isalpha$3326 001C  
                      ?_SendSystemStartAck 0001                                 ?_InitSynth 0001  
                             _isdigit$3329 0019                             ?_GetMcuRunTime 0001  
                      DacSetValue@dacIndex 0090                             BlinkOkLeds@idx 001C  
                                 ?_DacInit 0001                      __size_of_SetMcuSystem 000A  
                         _SwSpi_Set_CE_Pin 3D84               __size_of_EUSART1_Receive_ISR 002E  
            SWSPI_Synth_send_bits@bitArray 0060                    _DAC_DEFAULT_INIT_VALUES 064B  
                     __size_of_EepromWrite 000E                      _TMR0_InterruptHandler 01CC  
                                __pnvBANK1 01CC                          SetSynthOper@cType 00CF  
                 __size_of_TMR0_StartTimer 0004                     _PIN_MANAGER_Initialize 3782  
                     ??_SendSystemStartAck 002C                      _InitAdcApplicationMgr 445A  
                                __pintcode 0008                     __end_of_SendAckMessage 3BB0  
                                __ptext100 2602                                  __ptext101 3EA4  
                                __ptext110 407C                                  __ptext102 38FE  
                                __ptext103 41EA                                  __ptext120 3EDC  
                                __ptext112 2FD0                                  __ptext104 2F22  
                                __ptext121 40AC                                  __ptext113 3CC8  
                                __ptext105 36B4                                  __ptext122 0000  
                                __ptext114 43C0                                  __ptext106 2310  
                                __ptext115 420E                                  __ptext107 2DB8  
                                __ptext116 446C                                  __ptext108 3FE8  
                                __ptext117 4230                                  __ptext109 43FA  
                                 ?___ftadd 0078                                  __ptext118 446E  
                                __ptext119 4468                                   ?___awmod 0018  
                                 ?___ftdiv 0029                     __end_of_SetChannelMode 407C  
                                 ?___ftneg 0018                                   ?___lldiv 0018  
                                 ?___ftmul 0069                                   ?___llmod 0018  
                                 ?___ftsub 0084                                   ?___fttol 0078  
                         _FlashSampleWrite 2310                                   ?___lwmod 0001  
                          ?_ADC_Initialize 0001                           _Timer0_KeepAlive 00F8  
                        __size_of_testLeds 006A                              _PLLInitialize 3D0A  
              __size_of_keepAliveSignalLed 0018               ??_INTERRUPT_InterruptManager 0006  
                         __CFG_PRICLKEN$ON 000000                                 ?_ZeroArray 0020  
                              __smallconst 0600                      ??_keepAliveSignalUart 002C  
                                 _BAUDCON1 000FB8                              _SwSpi_Clk_Pin 3A60  
                                 ?_isalpha 0001                                   ?_isdigit 0001  
                                _eval_poly 2B4E                        BlinkErrorLeds@state 001B  
                                 ?_isspace 0001                               _SetMcuSystem 4420  
                        FlashReadUart@data 0087                                   ?_isupper 0001  
                            _FlashReadUart 11D8                             __size_of_make8 005C  
                           __size_of_floor 00E2                             __size_of_ldexp 00CE  
                           __size_of_frexp 0090                   __size_of_DATAEE_ReadByte 0014  
                                 ?_toupper 0001                       _INTERRUPT_Initialize 4460  
           FLASH_WriteBlock@blockStartAddr 0027                __size_of_FlashReadCondition 010C  
                _IOCB5_SetInterruptHandler 4434                          ??_TMR0_Initialize 001A  
                   ??_CheckFlashPrecentage 0078                             ___wmul@product 001C  
                                 _IOCBbits 000F62                                   _LATAbits 000F89  
                                 _LATBbits 000F8A                                   _LATCbits 000F8B  
                                 _LATDbits 000F8C                      __size_of_SetSynthOper 007C  
                 __end_of_StoreIntInEeprom 3EA4             FlashReadUart@numOfSampleToRead 00E2  
                                 _PIE1bits 000F9D                                   _PIE2bits 000FA0  
                    _GroupStatusAndVersion 41A2                          _GroupSynthesizers 32E4  
      __size_of_INTERRUPT_InterruptManager 00D4                 ??_TMR0_SetInterruptHandler 001A  
                     Make32bitsArray@array 0018                                   _PIR1bits 000F9E  
                         ??_FLASH_ReadByte 001C                                   _PIR2bits 000FA1  
                                _rxMsgData 017C                                   i2u572_48 423E  
                      UpdateSynthFreq@data 008A                                   i2u582_40 3CE2  
                                 i2u574_48 421C                        SWSPI_send_word@data 0029  
                       ?_GroupSynthesizers 00E6                                   _RCONbits 000FD0  
                         __CFG_WDTPS$16384 000000                        SynthReadData@regNum 027B  
                                make8@data 0018                                ??_FillArray 0025  
                                 _TMR0_ISR 2FD0                            ?_SendAckMessage 0024  
                          ?_SetChannelMode 002C                             ?_PLLInitialize 0001  
                        ??_PIN_MANAGER_IOC 0001                       __end_of_DacReadValue 28B2  
                      ??_GroupSynthesizers 0031                     GetIntFromUartData@data 0066  
                  SWSPI_send_word@dataSize 002D                                 _ADCON0bits 000FC2  
                    __end_of_SynthLdDetect 2B4E                   __size_of_readUartMessage 01E2  
                        ___wmul@multiplier 0018                             ?_SwSpi_Clk_Pin 0018  
                         ??_FlashEreaseMem 002C                         __end_of_channelArr 064B  
                         ??_SwSpi_Data_Pin 0019                  __size_of_GroupFlashMemory 0038  
                               ?_eval_poly 0084                             ?_FlashReadUart 0087  
                        ??_GroupControlMcu 0031                            ??_GetMcuRunTime 0025  
                    DATAEE_WriteByte@bData 0018                               _isspace$3332 0019  
                              ??_InitSynth 0031                          ??_SWSPI_send_word 002E  
                               DacInit@idx 00CC                               _SetSynthOper 3470  
                               _DAC_ADDRES 0653                __size_of_GetIntFromUartData 017C  
                        ___lmul@multiplier 001A                    FlashReadCondition@TxMsg 0028  
                              _INTCON2bits 000FF1                      __end_of_SynthReadData 0D46  
                                copy_data0 3406                                  copy_data1 3426  
                    ?_INTERRUPT_Initialize 0001                           __size_of_DacInit 00E4  
                        ?_DATAEE_WriteByte 0018             GetUint16FromBitArray@numOfBits 001A  
                __end_of_GroupSynthesizers 3370                      EUSART1_Read@readValue 0019  
                 __end_of_FLASH_WriteBlock 2E74                                   _GroupDAC 3F80  
                       ??_DATAEE_WriteByte 0019                                   _GroupAdc 4252  
                                frexp@eptr 001B                                 _EECON1bits 000FA6  
                           _synthLdRxArray 01B0                                   __Hrparam 0000  
                   ?_InitAdcApplicationMgr 0001                             _synthLdTxArray 01A4  
                                 _ResetMcu 43D0                              ??_DacSetValue 008C  
                              _readAddress 01C8                                   __Lrparam 0000  
             SynthReadData@eepromDataArray 0266                          _ADC_GetConversion 407C  
                          _ClearMcuRunTime 438A                          __CFG_P2BMX$PORTD2 000000  
                  ??_OSCILLATOR_Initialize 0018                         ?_ADC_GetConversion 0018  
                        ??_TMR0_StartTimer 0018                           __size_of___ftadd 01AE  
                         __size_of___awmod 0070                           __size_of___ftdiv 00E8  
                     _numOfValidateSamples 0130                           __size_of___ftneg 0024  
                         __size_of___lldiv 0082                                   ___altoft 34EC  
                         __size_of___ftmul 00F6                           __size_of___llmod 0066  
                         __size_of___ftsub 0042                           __size_of___fttol 00F8  
              __size_of_EUSART1_Initialize 0038                           __size_of___lwmod 0042  
                          GroupAdc@request 00E8                                   ___awtoft 3EA4  
                            crc8@dataArray 0018                                   ___ftpack 2F22  
                         _numOfReadSamples 012C                                   ___lltoft 38FE  
                        _FLASH_IsWriteDone 43FA                     _IOCB4_InterruptHandler 01D0  
                      WriteUartMessage@idx 001E                                   ___lwtoft 41EA  
                              ??_ZeroArray 0024                   GetMcuRunTime@tempRunTime 0069  
                      ??_ADC_GetConversion 001A                                   _exp$3604 009A  
                             _isupper$3335 0019                         ?_FLASH_IsWriteDone 0001  
                                 _dataSize 00F1                      SwSpi_Clk_Pin@cPinMode 0018  
                 __end_of_WriteUartMessage 3F4A                           __size_of_isalpha 0028  
                                 _crcGiven 003B                           __size_of_isdigit 001E  
                  ??_SWSPI_Synth_send_bits 0029                     SwSpi_Data_Pin@cPinMode 0018  
                  ??_GetUint16FromBitArray 001C             ?_IOCB4_DefaultInterruptHandler 0001  
                         __size_of_isspace 0026                                   __ptext10 0A96  
                                 __ptext11 3470                                   __ptext20 1E38  
                                 __ptext12 26EA                                   __ptext21 17A8  
                                 __ptext13 3370                                   __ptext30 404C  
                                 __ptext22 4362                                   __ptext14 06A6  
                                 __ptext31 3BFE                                   __ptext23 4156  
                                 __ptext15 11D8                                   __ptext40 442A  
                                 __ptext32 4408                                   __ptext24 4272  
                                 __ptext16 439E                                   __ptext41 3782  
                                 __ptext33 431E                                   __ptext25 412E  
                                 __ptext17 2204                                   __ptext50 4414  
                                 __ptext42 4434                                   __ptext34 2A78  
                                 __ptext26 4290                                   __ptext18 3B0C  
                                 __ptext51 3B5E                                   __ptext43 443E  
                                 __ptext35 35DA                                   __ptext27 27CE  
                                 __ptext19 3126                                   __ptext60 3D84  
                                 __ptext52 3BB0                                   __ptext44 43DE  
                                 __ptext36 37E6                                   __ptext28 364A  
                                 __ptext61 445A                                   __ptext53 42AE  
                                 __ptext45 4460                                   __ptext37 4420  
                                 __ptext29 43D0                                   __ptext70 2CF2  
                                 __ptext62 28B2                                   __ptext54 3F14  
                                 __ptext46 3E34                                   __ptext38 4304  
                                 __ptext71 395A                                   __ptext63 3E6C  
                                 __ptext55 3D48                                   __ptext47 4336  
                                 __ptext39 3FB4                                   __ptext80 4376  
                                 __ptext72 42E8                                   __ptext64 43EC  
                                 __ptext56 434C                                   __ptext48 3C42  
                                 __ptext81 438A                                   __ptext73 40DA  
                                 __ptext65 3F4A                                   __ptext57 4464  
                                 __ptext49 371C                                   __ptext90 31C4  
                                 __ptext82 2E74                                   __ptext74 39B2  
                                 __ptext66 307C                                   __ptext58 3D0A  
                                 __ptext91 2414                                   __ptext83 3844  
                                 __ptext75 3A0A                                   __ptext67 38A2  
                                 __ptext59 0D46                                   __ptext92 3254  
                                 __ptext84 0FBC                                   __ptext76 3A60  
                                 __ptext68 3DC0                                   __ptext93 34EC  
                                 __ptext85 1CB8                                   __ptext77 20DE  
                                 __ptext69 42CC                                   __ptext94 2B4E  
                                 __ptext86 1FB4                                   __ptext78 3AB6  
                                 __ptext95 417C                                   __ptext87 13D0  
                                 __ptext79 4448                                   __ptext96 250C  
                                 __ptext88 2C24                                   __ptext97 3C86  
                                 __ptext89 2996                                   __ptext98 197E  
                                 __ptext99 41C6                           __size_of_isupper 001E  
             SWSPI_Synth_send_bits@phrType 0085                   SwSpi_Set_CE_Pin@cPinMode 0018  
                                 _pow$3602 00A6                                   _pow$3603 00A9  
                      ??_FLASH_IsWriteDone 0018                DATAEE_WriteByte@GIEBitValue 001A  
                         __size_of_toupper 0014                   __size_of_GetMcuFwVersion 03F0  
                     _GetMcuFwVersion$2702 0078                       _GetMcuFwVersion$2698 0076  
                            __size_of_crc8 004E                              __size_of_main 0074  
                   ?_GroupStatusAndVersion 00E6                       __end_of_SYNTH_ADDRES 0642  
                                 _msgCount 00F0               _TMR0_DefaultInterruptHandler 000000  
                        ??_DATAEE_ReadByte 0018                  __end_of_ADC_GetConversion 40AC  
             __size_of_SWSPI_DAC_send_bits 0058                        Make32bitsArray@data 001A  
                       SWSPI_send_word@idx 0087                                _groupsArray 01BC  
                          ??_PLLInitialize 0031                                   _testLeds 364A  
                  __size_of_BlinkErrorLeds 005E                                   int$flags 0048  
                 __size_of_Make32bitsArray 0058                                 strtol@base 002A  
                               strtol@sign 0060                  __end_of_FLASH_IsWriteDone 4408  
       __end_of_INTERRUPT_InterruptManager 00DC                 _INTERRUPT_InterruptManager 0008  
                       AdcConvert@ldRxSate 00B7                         AdcConvert@ldTxSate 00B9  
                          EepromWrite@data 001B                            ??_SwSpi_Clk_Pin 0019  
                      __end_of_DacSetValue 31C4                        _EUSART1_Receive_ISR 40AC  
                 __end_of_SwSpi_Set_CE_Pin 3DC0                          ?_FLASH_EraseBlock 0018  
              __end_of_InitRxMessageParams 412E                                   exp@coeff 0657  
                               _MEMORY_ISR 4468                            ??_FlashReadUart 0089  
                                 log@coeff 0675                     SWSPI_send_word@phrType 0089  
                       ??_FLASH_EraseBlock 001C                                 _INTCONbits 000FF2  
                              ??_eval_poly 002F                                _sampleArray 013C  
                              _sampleCount 0136                                   isalpha@c 001D  
                                 isdigit@c 001A                     ??_INTERRUPT_Initialize 0018  
                                 memset@p1 0018                          ??_readUartMessage 00E9  
                 __end_of_FlashSampleWrite 2414                                   intlevel2 0000  
                     ?_EUSART1_Receive_ISR 0001                      __end_of_SetMcuRunTime 3C86  
                         ___lwmod@dividend 0001                 __size_of_GroupSynthesizers 008C  
                                 isspace@c 001A                           ___lldiv@dividend 0018  
                    SynthReadData@data_987 0263                    ?_PIN_MANAGER_Initialize 0001  
                        _SynthReadData$988 0264                    __end_of_ClearMcuRunTime 439E  
                               _RCSTA1bits 000FAB                                   isupper@c 001A  
                 ReadIntFromEeprom@address 00C2               __end_of_EUSART1_Transmit_ISR 3F14  
                            ??_BlinkOkLeds 0018                           ??_ADC_Initialize 0018  
                    __size_of_DacReadValue 00E4                         Make32bitsArray@idx 0020  
                            AdcConvert@idx 00C0                              _isReWriteDone 013A  
                    UpdateSynthFreq@retVal 008D                       SwSpi_Clk_Pin@phrType 0019  
                    SwSpi_Data_Pin@phrType 0019                    SwSpi_Set_CE_Pin@phrType 0019  
                   __size_of_EUSART1_Write 003C                   ??_SwSpi_Set_Dac_Sync_Pin 0018  
                        EepromRead@address 0019                           ___lldiv@quotient 0020  
                         _GroupFlashMemory 3DFC                            ___lwmod@divisor 0003  
                          _TMR0_Initialize 3FB4                            ___lwmod@counter 0005  
                 __size_of_UpdateSynthFreq 018C                                   toupper@c 0018  
               ReadIntFromEeprom@numOfByes 00B1                          __CFG_T3CMX$PORTC0 000000  
                  ReadIntFromEeprom@retVal 00C3                              ??_EepromWrite 001C  
                               _AdcConvert 0FBC                      ??_EUSART1_Receive_ISR 0001  
           __end_of_PIN_MANAGER_Initialize 37E6                               _DacReadValue 27CE  
             GetIntFromUartData@dataRegArr 0070                          __CFG_FOSC$INTIO67 000000  
                   _IOCB5_InterruptHandler 01CE                            _PIN_MANAGER_IOC 43C0  
                        ?_StoreIntInEeprom 0021                           ??_SendAckMessage 0025  
               __size_of_ADC_GetConversion 0030                           ??_SetChannelMode 002E  
                       ??_StoreIntInEeprom 0028                                _DacSetValue 3126  

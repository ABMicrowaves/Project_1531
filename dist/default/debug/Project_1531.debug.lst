

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Mar 12 18:10:54 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1,group=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1
   105                           	psect	text86,global,reloc=2,class=CODE,delta=1,group=1
   106                           	psect	text87,global,reloc=2,class=CODE,delta=1,group=1
   107                           	psect	text88,global,reloc=2,class=CODE,delta=1,group=1
   108                           	psect	text89,global,reloc=2,class=CODE,delta=1,group=1
   109                           	psect	text90,global,reloc=2,class=CODE,delta=1,group=1
   110                           	psect	text91,global,reloc=2,class=CODE,delta=1,group=1
   111                           	psect	text92,global,reloc=2,class=CODE,delta=1,group=1
   112                           	psect	text93,global,reloc=2,class=CODE,delta=1,group=1
   113                           	psect	text94,global,reloc=2,class=CODE,delta=1,group=1
   114                           	psect	text95,global,reloc=2,class=CODE,delta=1,group=1
   115                           	psect	text96,global,reloc=2,class=CODE,delta=1,group=1
   116                           	psect	text97,global,reloc=2,class=CODE,delta=1,group=1
   117                           	psect	text98,global,reloc=2,class=CODE,delta=1,group=1
   118                           	psect	text99,global,reloc=2,class=CODE,delta=1,group=1
   119                           	psect	text100,global,reloc=2,class=CODE,delta=1,group=1
   120                           	psect	text101,global,reloc=2,class=CODE,delta=1,group=1
   121                           	psect	text102,global,reloc=2,class=CODE,delta=1,group=1
   122                           	psect	text103,global,reloc=2,class=CODE,delta=1,group=1
   123                           	psect	text104,global,reloc=2,class=CODE,delta=1,group=1
   124                           	psect	text105,global,reloc=2,class=CODE,delta=1,group=1
   125                           	psect	text106,global,reloc=2,class=CODE,delta=1
   126                           	psect	text107,global,reloc=2,class=CODE,delta=1
   127                           	psect	text108,global,reloc=2,class=CODE,delta=1
   128                           	psect	text109,global,reloc=2,class=CODE,delta=1
   129                           	psect	text110,global,reloc=2,class=CODE,delta=1
   130                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   131                           	psect	text112,global,reloc=2,class=CODE,delta=1
   132                           	psect	text113,global,reloc=2,class=CODE,delta=1,group=1
   133                           	psect	text114,global,reloc=2,class=CODE,delta=1
   134                           	psect	text115,global,reloc=2,class=CODE,delta=1
   135                           	psect	text116,global,reloc=2,class=CODE,delta=1
   136                           	psect	text117,global,reloc=2,class=CODE,delta=1
   137                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   138                           	psect	text118,global,reloc=2,class=CODE,delta=1
   139                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   140                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   141  0000                     
   142                           ; Version 1.45
   143                           ; Generated 16/11/2017 GMT
   144                           ; 
   145                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   146                           ; All rights reserved.
   147                           ; 
   148                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   149                           ; 
   150                           ; Redistribution and use in source and binary forms, with or without modification, are
   151                           ; permitted provided that the following conditions are met:
   152                           ; 
   153                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   154                           ;        conditions and the following disclaimer.
   155                           ; 
   156                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   157                           ;        of conditions and the following disclaimer in the documentation and/or other
   158                           ;        materials provided with the distribution.
   159                           ; 
   160                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   161                           ;        software without specific prior written permission.
   162                           ; 
   163                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   164                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   165                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   166                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   167                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   168                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   169                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   170                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   171                           ; 
   172                           ; 
   173                           ; Code-generator required, PIC18F45K22 Definitions
   174                           ; 
   175                           ; SFR Addresses
   176  0000                     
   177 ;; Function _TMR0_DefaultInterruptHandler is unused but had its address taken
   178  0000                     
   179                           	psect	idataCOMRAM
   180  0037B0                     __pidataCOMRAM:
   181                           	opt stack 0
   182                           
   183                           ;initializer for _writeAddress
   184  0037B0  4000               	dw	16384
   185  0037B2  0000               	dw	0
   186                           
   187                           	psect	idataBANK0
   188  0036FE                     __pidataBANK0:
   189                           	opt stack 0
   190                           
   191                           ;initializer for _groupsArray
   192  0036FE  00                 	db	low _GroupControlMcu
   193  0036FF  31                 	db	high _GroupControlMcu
   194  003700  EE                 	db	low _GroupStatusAndVersion
   195  003701  2A                 	db	high _GroupStatusAndVersion
   196  003702  DE                 	db	low _GroupAdc
   197  003703  2E                 	db	high _GroupAdc
   198  003704  DA                 	db	low _GroupSynthesizers
   199  003705  29                 	db	high _GroupSynthesizers
   200  003706  6E                 	db	low _GroupFlashMemory
   201  003707  2F                 	db	high _GroupFlashMemory
   202  003708  9E                 	db	low _GroupDAC
   203  003709  35                 	db	high _GroupDAC
   204                           
   205                           ;initializer for _readAddress
   206  00370A  4000               	dw	16384
   207  00370C  0000               	dw	0
   208                           
   209                           	psect	smallconst
   210  000600                     __psmallconst:
   211                           	opt stack 0
   212  000600  00                 	db	0
   213  000601                     _SYNTH_REGS:
   214                           	opt stack 0
   215  000601  041C               	dw	1052
   216  000603  0001               	dw	1
   217  000605  300B               	dw	12299
   218  000607  0061               	dw	97
   219  000609  193A               	dw	6458
   220  00060B  00C0               	dw	192
   221  00060D  FCC9               	dw	64713
   222  00060F  1110               	dw	4368
   223  000611  0428               	dw	1064
   224  000613  102D               	dw	4141
   225  000615  00E7               	dw	231
   226  000617  1200               	dw	4608
   227  000619  6076               	dw	24694
   228  00061B  3500               	dw	13568
   229  00061D  0025               	dw	37
   230  00061F  0080               	dw	128
   231  000621  8384               	dw	33668
   232  000623  3000               	dw	12288
   233  000625  0003               	dw	3
   234  000627  0000               	dw	0
   235  000629  0012               	dw	18
   236  00062B  0000               	dw	0
   237  00062D  0001               	dw	1
   238  00062F  0000               	dw	0
   239  000631  0640               	dw	1600
   240  000633  0020               	dw	32
   241  000635                     __end_of_SYNTH_REGS:
   242                           	opt stack 0
   243  000635                     _channelArr:
   244                           	opt stack 0
   245  000635  07                 	db	7
   246  000636  06                 	db	6
   247  000637  05                 	db	5
   248  000638  04                 	db	4
   249  000639  19                 	db	25
   250  00063A  0A                 	db	10
   251  00063B  0D                 	db	13
   252  00063C                     __end_of_channelArr:
   253                           	opt stack 0
   254  00063C                     exp@coeff:
   255                           	opt stack 0
   256  00063C  00                 	db	0
   257  00063D  80                 	db	128
   258  00063E  3F                 	db	63
   259  00063F  72                 	db	114
   260  000640  31                 	db	49
   261  000641  3F                 	db	63
   262  000642  FE                 	db	254
   263  000643  75                 	db	117
   264  000644  3E                 	db	62
   265  000645  58                 	db	88
   266  000646  63                 	db	99
   267  000647  3D                 	db	61
   268  000648  95                 	db	149
   269  000649  1D                 	db	29
   270  00064A  3C                 	db	60
   271  00064B  C5                 	db	197
   272  00064C  AE                 	db	174
   273  00064D  3A                 	db	58
   274  00064E  79                 	db	121
   275  00064F  21                 	db	33
   276  000650  39                 	db	57
   277  000651  94                 	db	148
   278  000652  80                 	db	128
   279  000653  37                 	db	55
   280  000654  93                 	db	147
   281  000655  A7                 	db	167
   282  000656  35                 	db	53
   283  000657  56                 	db	86
   284  000658  15                 	db	21
   285  000659  34                 	db	52
   286  00065A                     __end_ofexp@coeff:
   287                           	opt stack 0
   288  00065A                     log@coeff:
   289                           	opt stack 0
   290  00065A  00                 	db	0
   291  00065B  00                 	db	0
   292  00065C  00                 	db	0
   293  00065D  00                 	db	0
   294  00065E  80                 	db	128
   295  00065F  3F                 	db	63
   296  000660  F0                 	db	240
   297  000661  FF                 	db	255
   298  000662  BE                 	db	190
   299  000663  E2                 	db	226
   300  000664  A9                 	db	169
   301  000665  3E                 	db	62
   302  000666  83                 	db	131
   303  000667  76                 	db	118
   304  000668  BE                 	db	190
   305  000669  AE                 	db	174
   306  00066A  2B                 	db	43
   307  00066B  3E                 	db	62
   308  00066C  3C                 	db	60
   309  00066D  C3                 	db	195
   310  00066E  BD                 	db	189
   311  00066F  D2                 	db	210
   312  000670  13                 	db	19
   313  000671  3D                 	db	61
   314  000672  78                 	db	120
   315  000673  D3                 	db	211
   316  000674  BB                 	db	187
   317  000675                     __end_oflog@coeff:
   318                           	opt stack 0
   319  000675  00                 	db	0	; dummy byte at the end
   320  0000                     
   321                           	psect	nvCOMRAM
   322  000046                     __pnvCOMRAM:
   323                           	opt stack 0
   324  000046                     _timer0ReloadVal:
   325                           	opt stack 0
   326  000046                     	ds	2
   327                           
   328                           	psect	nvBANK0
   329  0000FD                     __pnvBANK0:
   330                           	opt stack 0
   331  0000FD                     _TMR0_InterruptHandler:
   332                           	opt stack 0
   333  0000FD                     	ds	2
   334  0000FF                     _eusart1TxBufferRemaining:
   335                           	opt stack 0
   336  0000FF                     	ds	1
   337  0000                     _ANSELA	set	3896
   338  0000                     _ANSELE	set	3900
   339  0000                     _ANSELD	set	3899
   340  0000                     _ANSELB	set	3897
   341  0000                     _ANSELC	set	3898
   342  0000                     _ADCON0bits	set	4034
   343  0000                     _ADRESH	set	4036
   344  0000                     _ADRESL	set	4035
   345  0000                     _ADCON2	set	4032
   346  0000                     _ADCON1	set	4033
   347  0000                     _ADCON0	set	4034
   348  0000                     _T0CONbits	set	4053
   349  0000                     _T0CON	set	4053
   350  0000                     _TMR0L	set	4054
   351  0000                     _TMR0H	set	4055
   352  0000                     _EEDATA	set	4008
   353  0000                     _EEADR	set	4009
   354  0000                     _EECON2	set	4007
   355  0000                     _EECON1bits	set	4006
   356  0000                     _TABLAT	set	4085
   357  0000                     _TBLPTRL	set	4086
   358  0000                     _TBLPTRH	set	4087
   359  0000                     _TBLPTRU	set	4088
   360  0000                     _INTCON2bits	set	4081
   361  0000                     _WPUB	set	3937
   362  0000                     _TRISD	set	3989
   363  0000                     _TRISC	set	3988
   364  0000                     _TRISB	set	3987
   365  0000                     _TRISA	set	3986
   366  0000                     _TRISE	set	3990
   367  0000                     _LATC	set	3979
   368  0000                     _LATB	set	3978
   369  0000                     _LATA	set	3977
   370  0000                     _LATD	set	3980
   371  0000                     _LATE	set	3981
   372  0000                     _RCREG1	set	4014
   373  0000                     _RCSTA1bits	set	4011
   374  0000                     _TXREG1	set	4013
   375  0000                     _SPBRGH1	set	4016
   376  0000                     _SPBRG1	set	4015
   377  0000                     _TXSTA1	set	4012
   378  0000                     _RCSTA1	set	4011
   379  0000                     _BAUDCON1	set	4024
   380  0000                     _PIR1bits	set	3998
   381  0000                     _PIE1bits	set	3997
   382  0000                     _PIR2bits	set	4001
   383  0000                     _PIE2bits	set	4000
   384  0000                     _RCONbits	set	4048
   385  0000                     _OSCTUNE	set	3995
   386  0000                     _OSCCON2	set	4050
   387  0000                     _OSCCON	set	4051
   388  0000                     _LATAbits	set	3977
   389  0000                     _LATDbits	set	3980
   390  0000                     _INTCONbits	set	4082
   391  0000                     _IOCB	set	3938
   392  0000                     _LATCbits	set	3979
   393  0000                     _LATBbits	set	3978
   394                           
   395                           ; #config settings
   396  0000                     
   397                           	psect	cinit
   398  00271C                     __pcinit:
   399                           	opt stack 0
   400  00271C                     start_initialization:
   401                           	opt stack 0
   402  00271C                     __initialization:
   403                           	opt stack 0
   404                           
   405                           ; Initialize objects allocated to BANK0 (16 bytes)
   406                           ; load TBLPTR registers with __pidataBANK0
   407  00271C  0EFE               	movlw	low __pidataBANK0
   408  00271E  6EF6               	movwf	tblptrl,c
   409  002720  0E36               	movlw	high __pidataBANK0
   410  002722  6EF7               	movwf	tblptrh,c
   411  002724  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   412  002726  6EF8               	movwf	tblptru,c
   413  002728  EE00  F0ED         	lfsr	0,__pdataBANK0
   414  00272C  EE10 F010          	lfsr	1,16
   415  002730                     copy_data0:
   416  002730  0009               	tblrd		*+
   417  002732  CFF5 FFEE          	movff	tablat,postinc0
   418  002736  50E5               	movf	postdec1,w,c
   419  002738  50E1               	movf	fsr1l,w,c
   420  00273A  E1FA               	bnz	copy_data0
   421                           
   422                           ; Initialize objects allocated to COMRAM (4 bytes)
   423                           ; load TBLPTR registers with __pidataCOMRAM
   424  00273C  0EB0               	movlw	low __pidataCOMRAM
   425  00273E  6EF6               	movwf	tblptrl,c
   426  002740  0E37               	movlw	high __pidataCOMRAM
   427  002742  6EF7               	movwf	tblptrh,c
   428  002744  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   429  002746  6EF8               	movwf	tblptru,c
   430  002748  EE00  F042         	lfsr	0,__pdataCOMRAM
   431  00274C  EE10 F004          	lfsr	1,4
   432  002750                     copy_data1:
   433  002750  0009               	tblrd		*+
   434  002752  CFF5 FFEE          	movff	tablat,postinc0
   435  002756  50E5               	movf	postdec1,w,c
   436  002758  50E1               	movf	fsr1l,w,c
   437  00275A  E1FA               	bnz	copy_data1
   438                           
   439                           ; Clear objects allocated to BANK1 (194 bytes)
   440  00275C  EE01  F000         	lfsr	0,__pbssBANK1
   441  002760  0EC2               	movlw	194
   442  002762                     clear_0:
   443  002762  6AEE               	clrf	postinc0,c
   444  002764  06E8               	decf	wreg,f,c
   445  002766  E1FD               	bnz	clear_0
   446                           
   447                           ; Clear objects allocated to BANK0 (44 bytes)
   448  002768  EE00  F0C1         	lfsr	0,__pbssBANK0
   449  00276C  0E2C               	movlw	44
   450  00276E                     clear_1:
   451  00276E  6AEE               	clrf	postinc0,c
   452  002770  06E8               	decf	wreg,f,c
   453  002772  E1FD               	bnz	clear_1
   454                           
   455                           ; Clear objects allocated to COMRAM (17 bytes)
   456  002774  EE00  F031         	lfsr	0,__pbssCOMRAM
   457  002778  0E11               	movlw	17
   458  00277A                     clear_2:
   459  00277A  6AEE               	clrf	postinc0,c
   460  00277C  06E8               	decf	wreg,f,c
   461  00277E  E1FD               	bnz	clear_2
   462  002780                     end_of_initialization:
   463                           	opt stack 0
   464  002780                     __end_of__initialization:
   465                           	opt stack 0
   466  002780  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   467  002782  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   468  002784  0E00               	movlw	low (__Lmediumconst shr (0+16))
   469  002786  6EF8               	movwf	tblptru,c
   470  002788  0100               	movlb	0
   471  00278A  EF2F  F014         	goto	_main	;jump to C main() function
   472                           tblptru	equ	0xFF8
   473                           tblptrh	equ	0xFF7
   474                           tblptrl	equ	0xFF6
   475                           tablat	equ	0xFF5
   476                           postinc0	equ	0xFEE
   477                           wreg	equ	0xFE8
   478                           postdec1	equ	0xFE5
   479                           fsr1l	equ	0xFE1
   480                           
   481                           	psect	bssCOMRAM
   482  000031                     __pbssCOMRAM:
   483                           	opt stack 0
   484  000031                     _numOfValidateSamples:
   485                           	opt stack 0
   486  000031                     	ds	4
   487  000035                     TMR0_ISR@CountCallBack:
   488                           	opt stack 0
   489  000035                     	ds	2
   490  000037                     _eusart1RxTail:
   491                           	opt stack 0
   492  000037                     	ds	1
   493  000038                     _eusart1RxHead:
   494                           	opt stack 0
   495  000038                     	ds	1
   496  000039                     _eusart1TxTail:
   497                           	opt stack 0
   498  000039                     	ds	1
   499  00003A                     _eusart1TxHead:
   500                           	opt stack 0
   501  00003A                     	ds	1
   502  00003B                     _cntRegUpdate:
   503                           	opt stack 0
   504  00003B                     	ds	1
   505  00003C                     _isReWriteDone:
   506                           	opt stack 0
   507  00003C                     	ds	1
   508  00003D                     _adcSampleMode:
   509                           	opt stack 0
   510  00003D                     	ds	1
   511  00003E                     _numOfReadSamples:
   512                           	opt stack 0
   513  00003E                     	ds	4
   514                           tblptru	equ	0xFF8
   515                           tblptrh	equ	0xFF7
   516                           tblptrl	equ	0xFF6
   517                           tablat	equ	0xFF5
   518                           postinc0	equ	0xFEE
   519                           wreg	equ	0xFE8
   520                           postdec1	equ	0xFE5
   521                           fsr1l	equ	0xFE1
   522                           
   523                           	psect	dataCOMRAM
   524  000042                     __pdataCOMRAM:
   525                           	opt stack 0
   526  000042                     _writeAddress:
   527                           	opt stack 0
   528  000042                     	ds	4
   529                           tblptru	equ	0xFF8
   530                           tblptrh	equ	0xFF7
   531                           tblptrl	equ	0xFF6
   532                           tablat	equ	0xFF5
   533                           postinc0	equ	0xFEE
   534                           wreg	equ	0xFE8
   535                           postdec1	equ	0xFE5
   536                           fsr1l	equ	0xFE1
   537                           
   538                           	psect	bssBANK0
   539  0000C1                     __pbssBANK0:
   540                           	opt stack 0
   541  0000C1                     _mcuRunTimeIn5SecTicks:
   542                           	opt stack 0
   543  0000C1                     	ds	4
   544  0000C5                     _errno:
   545                           	opt stack 0
   546  0000C5                     	ds	2
   547  0000C7                     _sampleCount:
   548                           	opt stack 0
   549  0000C7                     	ds	2
   550  0000C9                     _count:
   551                           	opt stack 0
   552  0000C9                     	ds	2
   553  0000CB                     _msgCount:
   554                           	opt stack 0
   555  0000CB                     	ds	1
   556  0000CC                     _crcGiven:
   557                           	opt stack 0
   558  0000CC                     	ds	1
   559  0000CD                     _crcCalc:
   560                           	opt stack 0
   561  0000CD                     	ds	1
   562  0000CE                     _data:
   563                           	opt stack 0
   564  0000CE                     	ds	1
   565  0000CF                     _dataSize:
   566                           	opt stack 0
   567  0000CF                     	ds	1
   568  0000D0                     _request:
   569                           	opt stack 0
   570  0000D0                     	ds	1
   571  0000D1                     _group:
   572                           	opt stack 0
   573  0000D1                     	ds	1
   574  0000D2                     _cState:
   575                           	opt stack 0
   576  0000D2                     	ds	1
   577  0000D3                     _eusart1RxCount:
   578                           	opt stack 0
   579  0000D3                     	ds	1
   580  0000D4                     _channel:
   581                           	opt stack 0
   582  0000D4                     	ds	1
   583  0000D5                     _conversionFormat:
   584                           	opt stack 0
   585  0000D5                     	ds	1
   586  0000D6                     _TimerKeepAliveFlag:
   587                           	opt stack 0
   588  0000D6                     	ds	1
   589  0000D7                     _TimerSamplingFlag:
   590                           	opt stack 0
   591  0000D7                     	ds	1
   592  0000D8                     _TimerOneSecFlag:
   593                           	opt stack 0
   594  0000D8                     	ds	1
   595  0000D9                     _rxMsgQueue:
   596                           	opt stack 0
   597  0000D9                     	ds	20
   598                           tblptru	equ	0xFF8
   599                           tblptrh	equ	0xFF7
   600                           tblptrl	equ	0xFF6
   601                           tablat	equ	0xFF5
   602                           postinc0	equ	0xFEE
   603                           wreg	equ	0xFE8
   604                           postdec1	equ	0xFE5
   605                           fsr1l	equ	0xFE1
   606                           
   607                           	psect	dataBANK0
   608  0000ED                     __pdataBANK0:
   609                           	opt stack 0
   610  0000ED                     _groupsArray:
   611                           	opt stack 0
   612  0000ED                     	ds	12
   613  0000F9                     _readAddress:
   614                           	opt stack 0
   615  0000F9                     	ds	4
   616                           tblptru	equ	0xFF8
   617                           tblptrh	equ	0xFF7
   618                           tblptrl	equ	0xFF6
   619                           tablat	equ	0xFF5
   620                           postinc0	equ	0xFEE
   621                           wreg	equ	0xFE8
   622                           postdec1	equ	0xFE5
   623                           fsr1l	equ	0xFE1
   624                           
   625                           	psect	bssBANK1
   626  000100                     __pbssBANK1:
   627                           	opt stack 0
   628  000100                     _eusart1TxBuffer:
   629                           	opt stack 0
   630  000100                     	ds	70
   631  000146                     _eusart1RxBuffer:
   632                           	opt stack 0
   633  000146                     	ds	40
   634  00016E                     _sampleArray:
   635                           	opt stack 0
   636  00016E                     	ds	64
   637  0001AE                     _rxMsgData:
   638                           	opt stack 0
   639  0001AE                     	ds	20
   640                           tblptru	equ	0xFF8
   641                           tblptrh	equ	0xFF7
   642                           tblptrl	equ	0xFF6
   643                           tablat	equ	0xFF5
   644                           postinc0	equ	0xFEE
   645                           wreg	equ	0xFE8
   646                           postdec1	equ	0xFE5
   647                           fsr1l	equ	0xFE1
   648                           
   649                           	psect	cstackBANK1
   650  0001C2                     __pcstackBANK1:
   651                           	opt stack 0
   652  0001C2                     GroupStatusAndVersion@data:
   653                           	opt stack 0
   654  0001C2                     GroupAdc@data:
   655                           	opt stack 0
   656  0001C2                     GroupSynthesizers@data:
   657                           	opt stack 0
   658  0001C2                     GroupFlashMemory@data:
   659                           	opt stack 0
   660  0001C2                     GroupDAC@data:
   661                           	opt stack 0
   662  0001C2                     
   663                           ; 3 bytes @ 0x0
   664  0001C2                     	ds	2
   665  0001C4                     ??_readUartMessage:
   666                           
   667                           ; 1 bytes @ 0x2
   668  0001C4                     	ds	4
   669  0001C8                     readUartMessage@idx:
   670                           	opt stack 0
   671                           
   672                           ; 2 bytes @ 0x6
   673  0001C8                     	ds	2
   674  0001CA                     readUartMessage@chRec:
   675                           	opt stack 0
   676                           
   677                           ; 1 bytes @ 0x8
   678  0001CA                     	ds	1
   679                           tblptru	equ	0xFF8
   680                           tblptrh	equ	0xFF7
   681                           tblptrl	equ	0xFF6
   682                           tablat	equ	0xFF5
   683                           postinc0	equ	0xFEE
   684                           wreg	equ	0xFE8
   685                           postdec1	equ	0xFE5
   686                           fsr1l	equ	0xFE1
   687                           
   688                           	psect	cstackBANK0
   689  000060                     __pcstackBANK0:
   690                           	opt stack 0
   691  000060                     ??_FlashSampleWrite:
   692  000060                     ??___ftdiv:
   693  000060                     ??_FlashReadUart:
   694  000060                     strtol@sign:
   695                           	opt stack 0
   696  000060                     GetMcuRunTime@TxMsg:
   697                           	opt stack 0
   698  000060                     SWSPI_Synth_send_bits@bitArray:
   699                           	opt stack 0
   700                           
   701                           ; 32 bytes @ 0x0
   702  000060                     	ds	1
   703  000061                     strtol@a:
   704                           	opt stack 0
   705                           
   706                           ; 4 bytes @ 0x1
   707  000061                     	ds	1
   708  000062                     FlashSampleWrite@rotateLeft:
   709                           	opt stack 0
   710                           
   711                           ; 2 bytes @ 0x2
   712  000062                     	ds	1
   713  000063                     ___ftdiv@cntr:
   714                           	opt stack 0
   715                           
   716                           ; 1 bytes @ 0x3
   717  000063                     	ds	1
   718  000064                     ___ftdiv@f3:
   719                           	opt stack 0
   720                           
   721                           ; 3 bytes @ 0x4
   722  000064                     	ds	1
   723  000065                     strtol@c:
   724                           	opt stack 0
   725                           
   726                           ; 1 bytes @ 0x5
   727  000065                     	ds	1
   728  000066                     ?_GetIntFromUartData:
   729                           	opt stack 0
   730  000066                     GetIntFromUartData@data:
   731                           	opt stack 0
   732                           
   733                           ; 2 bytes @ 0x6
   734  000066                     	ds	1
   735  000067                     ___ftdiv@exp:
   736                           	opt stack 0
   737                           
   738                           ; 1 bytes @ 0x7
   739  000067                     	ds	1
   740  000068                     ___ftdiv@sign:
   741                           	opt stack 0
   742                           
   743                           ; 1 bytes @ 0x8
   744  000068                     	ds	1
   745  000069                     ?___ftmul:
   746                           	opt stack 0
   747  000069                     ___ftmul@f1:
   748                           	opt stack 0
   749  000069                     GetMcuRunTime@tempRunTime:
   750                           	opt stack 0
   751                           
   752                           ; 4 bytes @ 0x9
   753  000069                     	ds	1
   754  00006A                     GetIntFromUartData@dataRegArr:
   755                           	opt stack 0
   756                           
   757                           ; 9 bytes @ 0xA
   758  00006A                     	ds	2
   759  00006C                     ___ftmul@f2:
   760                           	opt stack 0
   761  00006C                     FlashReadUart@TxMsg:
   762                           	opt stack 0
   763                           
   764                           ; 69 bytes @ 0xC
   765  00006C                     	ds	1
   766  00006D                     GetMcuRunTime@idx:
   767                           	opt stack 0
   768                           
   769                           ; 2 bytes @ 0xD
   770  00006D                     	ds	2
   771  00006F                     ??___ftmul:
   772                           
   773                           ; 1 bytes @ 0xF
   774  00006F                     	ds	3
   775  000072                     ___ftmul@exp:
   776                           	opt stack 0
   777                           
   778                           ; 1 bytes @ 0x12
   779  000072                     	ds	1
   780  000073                     GetIntFromUartData@num:
   781                           	opt stack 0
   782  000073                     ___ftmul@f3_as_product:
   783                           	opt stack 0
   784                           
   785                           ; 3 bytes @ 0x13
   786  000073                     	ds	1
   787  000074                     GetIntFromUartData@retVal:
   788                           	opt stack 0
   789                           
   790                           ; 4 bytes @ 0x14
   791  000074                     	ds	2
   792  000076                     ___ftmul@cntr:
   793                           	opt stack 0
   794                           
   795                           ; 1 bytes @ 0x16
   796  000076                     	ds	1
   797  000077                     ___ftmul@sign:
   798                           	opt stack 0
   799                           
   800                           ; 1 bytes @ 0x17
   801  000077                     	ds	1
   802  000078                     ??_CheckFlashPrecentage:
   803  000078                     ?___ftadd:
   804                           	opt stack 0
   805  000078                     ?___fttol:
   806                           	opt stack 0
   807  000078                     GetIntFromUartData@c:
   808                           	opt stack 0
   809  000078                     ___ftadd@f1:
   810                           	opt stack 0
   811  000078                     ___fttol@f1:
   812                           	opt stack 0
   813                           
   814                           ; 3 bytes @ 0x18
   815  000078                     	ds	1
   816  000079                     GetIntFromUartData@idx:
   817                           	opt stack 0
   818                           
   819                           ; 2 bytes @ 0x19
   820  000079                     	ds	2
   821  00007B                     ___ftadd@f2:
   822                           	opt stack 0
   823                           
   824                           ; 3 bytes @ 0x1B
   825  00007B                     	ds	1
   826  00007C                     ??___fttol:
   827  00007C                     CheckFlashPrecentage@precentage:
   828                           	opt stack 0
   829                           
   830                           ; 3 bytes @ 0x1C
   831  00007C                     	ds	2
   832  00007E                     ??___ftadd:
   833                           
   834                           ; 1 bytes @ 0x1E
   835  00007E                     	ds	2
   836  000080                     SWSPI_Synth_send_bits@mask:
   837                           	opt stack 0
   838                           
   839                           ; 4 bytes @ 0x20
   840  000080                     	ds	1
   841  000081                     ___ftadd@sign:
   842                           	opt stack 0
   843  000081                     ___fttol@sign1:
   844                           	opt stack 0
   845                           
   846                           ; 1 bytes @ 0x21
   847  000081                     	ds	1
   848  000082                     ___ftadd@exp2:
   849                           	opt stack 0
   850  000082                     ___fttol@lval:
   851                           	opt stack 0
   852                           
   853                           ; 4 bytes @ 0x22
   854  000082                     	ds	1
   855  000083                     ___ftadd@exp1:
   856                           	opt stack 0
   857                           
   858                           ; 1 bytes @ 0x23
   859  000083                     	ds	1
   860  000084                     ?___ftsub:
   861                           	opt stack 0
   862  000084                     ?_eval_poly:
   863                           	opt stack 0
   864  000084                     SWSPI_Synth_send_bits@count:
   865                           	opt stack 0
   866  000084                     ___ftsub@f1:
   867                           	opt stack 0
   868  000084                     eval_poly@x:
   869                           	opt stack 0
   870                           
   871                           ; 3 bytes @ 0x24
   872  000084                     	ds	1
   873  000085                     SWSPI_Synth_send_bits@phrType:
   874                           	opt stack 0
   875                           
   876                           ; 1 bytes @ 0x25
   877  000085                     	ds	1
   878  000086                     ??_DacSetValue:
   879  000086                     ___fttol@exp1:
   880                           	opt stack 0
   881  000086                     UpdateTxFreq@regData:
   882                           	opt stack 0
   883  000086                     UpdateRxFreq@regData:
   884                           	opt stack 0
   885                           
   886                           ; 4 bytes @ 0x26
   887  000086                     	ds	1
   888  000087                     ?___altoft:
   889                           	opt stack 0
   890  000087                     eval_poly@d:
   891                           	opt stack 0
   892  000087                     ___ftsub@f2:
   893                           	opt stack 0
   894  000087                     ___altoft@c:
   895                           	opt stack 0
   896                           
   897                           ; 4 bytes @ 0x27
   898  000087                     	ds	2
   899  000089                     DacSetValue@dacIndex:
   900                           	opt stack 0
   901  000089                     eval_poly@n:
   902                           	opt stack 0
   903                           
   904                           ; 2 bytes @ 0x29
   905  000089                     	ds	1
   906  00008A                     DacSetValue@regData:
   907                           	opt stack 0
   908                           
   909                           ; 2 bytes @ 0x2A
   910  00008A                     	ds	1
   911  00008B                     ??___altoft:
   912  00008B                     eval_poly@res:
   913                           	opt stack 0
   914                           
   915                           ; 3 bytes @ 0x2B
   916  00008B                     	ds	3
   917  00008E                     ?_log:
   918                           	opt stack 0
   919  00008E                     ?_ldexp:
   920                           	opt stack 0
   921  00008E                     ldexp@value:
   922                           	opt stack 0
   923  00008E                     log@x:
   924                           	opt stack 0
   925                           
   926                           ; 3 bytes @ 0x2E
   927  00008E                     	ds	1
   928  00008F                     ?_floor:
   929                           	opt stack 0
   930  00008F                     floor@x:
   931                           	opt stack 0
   932                           
   933                           ; 3 bytes @ 0x2F
   934  00008F                     	ds	2
   935  000091                     ldexp@newexp:
   936                           	opt stack 0
   937  000091                     log@exponent:
   938                           	opt stack 0
   939                           
   940                           ; 2 bytes @ 0x31
   941  000091                     	ds	1
   942  000092                     floor@i:
   943                           	opt stack 0
   944                           
   945                           ; 3 bytes @ 0x32
   946  000092                     	ds	1
   947  000093                     ??_ldexp:
   948                           
   949                           ; 1 bytes @ 0x33
   950  000093                     	ds	2
   951  000095                     floor@expon:
   952                           	opt stack 0
   953                           
   954                           ; 2 bytes @ 0x35
   955  000095                     	ds	2
   956  000097                     ?_exp:
   957                           	opt stack 0
   958  000097                     exp@x:
   959                           	opt stack 0
   960                           
   961                           ; 3 bytes @ 0x37
   962  000097                     	ds	3
   963  00009A                     _exp$3237:
   964                           	opt stack 0
   965                           
   966                           ; 3 bytes @ 0x3A
   967  00009A                     	ds	3
   968  00009D                     exp@exponent:
   969                           	opt stack 0
   970                           
   971                           ; 2 bytes @ 0x3D
   972  00009D                     	ds	2
   973  00009F                     exp@sign:
   974                           	opt stack 0
   975                           
   976                           ; 1 bytes @ 0x3F
   977  00009F                     	ds	1
   978  0000A0                     ?_pow:
   979                           	opt stack 0
   980  0000A0                     pow@x:
   981                           	opt stack 0
   982                           
   983                           ; 3 bytes @ 0x40
   984  0000A0                     	ds	3
   985  0000A3                     pow@y:
   986                           	opt stack 0
   987                           
   988                           ; 3 bytes @ 0x43
   989  0000A3                     	ds	3
   990  0000A6                     _pow$3235:
   991                           	opt stack 0
   992                           
   993                           ; 3 bytes @ 0x46
   994  0000A6                     	ds	3
   995  0000A9                     _pow$3236:
   996                           	opt stack 0
   997                           
   998                           ; 3 bytes @ 0x49
   999  0000A9                     	ds	3
  1000  0000AC                     pow@sign:
  1001                           	opt stack 0
  1002                           
  1003                           ; 1 bytes @ 0x4C
  1004  0000AC                     	ds	1
  1005  0000AD                     pow@yi:
  1006                           	opt stack 0
  1007                           
  1008                           ; 4 bytes @ 0x4D
  1009  0000AD                     	ds	4
  1010  0000B1                     ??_AdcConvert:
  1011  0000B1                     _FlashReadUart$561:
  1012                           	opt stack 0
  1013                           
  1014                           ; 4 bytes @ 0x51
  1015  0000B1                     	ds	2
  1016  0000B3                     AdcConvert@_adcResult:
  1017                           	opt stack 0
  1018                           
  1019                           ; 2 bytes @ 0x53
  1020  0000B3                     	ds	2
  1021  0000B5                     AdcConvert@_adcResult_330:
  1022                           	opt stack 0
  1023  0000B5                     _FlashReadUart$562:
  1024                           	opt stack 0
  1025                           
  1026                           ; 4 bytes @ 0x55
  1027  0000B5                     	ds	2
  1028  0000B7                     _AdcConvert$3234:
  1029                           	opt stack 0
  1030                           
  1031                           ; 3 bytes @ 0x57
  1032  0000B7                     	ds	2
  1033  0000B9                     FlashReadUart@j:
  1034                           	opt stack 0
  1035                           
  1036                           ; 2 bytes @ 0x59
  1037  0000B9                     	ds	1
  1038  0000BA                     AdcConvert@adcRes:
  1039                           	opt stack 0
  1040                           
  1041                           ; 2 bytes @ 0x5A
  1042  0000BA                     	ds	1
  1043  0000BB                     FlashReadUart@idx:
  1044                           	opt stack 0
  1045                           
  1046                           ; 2 bytes @ 0x5B
  1047  0000BB                     	ds	1
  1048  0000BC                     AdcConvert@idx:
  1049                           	opt stack 0
  1050                           
  1051                           ; 1 bytes @ 0x5C
  1052  0000BC                     	ds	1
  1053  0000BD                     FlashReadUart@offset:
  1054                           	opt stack 0
  1055                           
  1056                           ; 2 bytes @ 0x5D
  1057  0000BD                     	ds	2
  1058  0000BF                     ??_GroupFlashMemory:
  1059  0000BF                     GroupControlMcu@request:
  1060                           	opt stack 0
  1061  0000BF                     GroupStatusAndVersion@request:
  1062                           	opt stack 0
  1063  0000BF                     GroupAdc@request:
  1064                           	opt stack 0
  1065  0000BF                     GroupSynthesizers@request:
  1066                           	opt stack 0
  1067  0000BF                     GroupDAC@request:
  1068                           	opt stack 0
  1069                           
  1070                           ; 1 bytes @ 0x5F
  1071  0000BF                     	ds	1
  1072  0000C0                     GroupFlashMemory@request:
  1073                           	opt stack 0
  1074                           
  1075                           ; 1 bytes @ 0x60
  1076  0000C0                     	ds	1
  1077                           tblptru	equ	0xFF8
  1078                           tblptrh	equ	0xFF7
  1079                           tblptrl	equ	0xFF6
  1080                           tablat	equ	0xFF5
  1081                           postinc0	equ	0xFEE
  1082                           wreg	equ	0xFE8
  1083                           postdec1	equ	0xFE5
  1084                           fsr1l	equ	0xFE1
  1085                           
  1086                           	psect	cstackCOMRAM
  1087  000001                     __pcstackCOMRAM:
  1088                           	opt stack 0
  1089  000001                     ?___lwmod:
  1090                           	opt stack 0
  1091  000001                     ___lwmod@dividend:
  1092                           	opt stack 0
  1093                           
  1094                           ; 2 bytes @ 0x0
  1095  000001                     	ds	2
  1096  000003                     ___lwmod@divisor:
  1097                           	opt stack 0
  1098                           
  1099                           ; 2 bytes @ 0x2
  1100  000003                     	ds	2
  1101  000005                     ___lwmod@counter:
  1102                           	opt stack 0
  1103                           
  1104                           ; 1 bytes @ 0x4
  1105  000005                     	ds	1
  1106  000006                     ??_INTERRUPT_InterruptManager:
  1107                           
  1108                           ; 1 bytes @ 0x5
  1109  000006                     	ds	18
  1110  000018                     ??_EUSART1_Read:
  1111  000018                     ??_isspace:
  1112  000018                     ??_isdigit:
  1113  000018                     ??_isupper:
  1114  000018                     ??_BlinkErrorLeds:
  1115  000018                     ??_BlinkOkLeds:
  1116  000018                     ??_keepAliveSignalLed:
  1117  000018                     ?_ADC_GetConversion:
  1118                           	opt stack 0
  1119  000018                     ?_abs:
  1120                           	opt stack 0
  1121  000018                     ?___wmul:
  1122                           	opt stack 0
  1123  000018                     ?___ftpack:
  1124                           	opt stack 0
  1125  000018                     ?_frexp:
  1126                           	opt stack 0
  1127  000018                     ?___ftneg:
  1128                           	opt stack 0
  1129  000018                     ?___lmul:
  1130                           	opt stack 0
  1131  000018                     ?___lldiv:
  1132                           	opt stack 0
  1133  000018                     ?___llmod:
  1134                           	opt stack 0
  1135  000018                     InitAdcApplicationMgr@channel:
  1136                           	opt stack 0
  1137  000018                     SwSpi_Data_Pin@cPinMode:
  1138                           	opt stack 0
  1139  000018                     SwSpi_Clk_Pin@cPinMode:
  1140                           	opt stack 0
  1141  000018                     SwSpi_Set_CE_Pin@cPinMode:
  1142                           	opt stack 0
  1143  000018                     SwSpi_Set_Synth_Le_Pin@cPinMode:
  1144                           	opt stack 0
  1145  000018                     SwSpi_Set_Dac_Sync_Pin@cPinMode:
  1146                           	opt stack 0
  1147  000018                     EUSART1_Write@txData:
  1148                           	opt stack 0
  1149  000018                     DATAEE_WriteByte@bData:
  1150                           	opt stack 0
  1151  000018                     DATAEE_ReadByte@bAdd:
  1152                           	opt stack 0
  1153  000018                     toupper@c:
  1154                           	opt stack 0
  1155  000018                     PLLUartInitialize@data:
  1156                           	opt stack 0
  1157  000018                     TMR0_SetInterruptHandler@InterruptHandler:
  1158                           	opt stack 0
  1159  000018                     crc8@dataArray:
  1160                           	opt stack 0
  1161  000018                     Make32bitsArray@array:
  1162                           	opt stack 0
  1163  000018                     ___wmul@multiplier:
  1164                           	opt stack 0
  1165  000018                     abs@a:
  1166                           	opt stack 0
  1167  000018                     memset@p1:
  1168                           	opt stack 0
  1169  000018                     ___ftpack@arg:
  1170                           	opt stack 0
  1171  000018                     ___ftge@ff1:
  1172                           	opt stack 0
  1173  000018                     ___ftneg@f1:
  1174                           	opt stack 0
  1175  000018                     frexp@value:
  1176                           	opt stack 0
  1177  000018                     FLASH_ReadByte@flashAddr:
  1178                           	opt stack 0
  1179  000018                     FLASH_EraseBlock@baseAddr:
  1180                           	opt stack 0
  1181  000018                     make8@data:
  1182                           	opt stack 0
  1183  000018                     ___lmul@multiplier:
  1184                           	opt stack 0
  1185  000018                     ___lldiv@dividend:
  1186                           	opt stack 0
  1187  000018                     ___llmod@dividend:
  1188                           	opt stack 0
  1189                           
  1190                           ; 4 bytes @ 0x17
  1191  000018                     	ds	1
  1192  000019                     EepromRead@address:
  1193                           	opt stack 0
  1194  000019                     SwSpi_Data_Pin@phrType:
  1195                           	opt stack 0
  1196  000019                     SwSpi_Clk_Pin@phrType:
  1197                           	opt stack 0
  1198  000019                     SwSpi_Set_CE_Pin@phrType:
  1199                           	opt stack 0
  1200  000019                     SwSpi_Set_Synth_Le_Pin@phrType:
  1201                           	opt stack 0
  1202  000019                     DATAEE_WriteByte@bAdd:
  1203                           	opt stack 0
  1204  000019                     _isdigit$2954:
  1205                           	opt stack 0
  1206  000019                     _isspace$2957:
  1207                           	opt stack 0
  1208  000019                     _isupper$2960:
  1209                           	opt stack 0
  1210  000019                     WriteUartMessage@dataBuf:
  1211                           	opt stack 0
  1212  000019                     EUSART1_Read@readValue:
  1213                           	opt stack 0
  1214                           
  1215                           ; 2 bytes @ 0x18
  1216  000019                     	ds	1
  1217  00001A                     ??_ADC_GetConversion:
  1218  00001A                     ??_abs:
  1219  00001A                     ??_TMR0_Initialize:
  1220  00001A                     ?_ReadIntFromEeprom:
  1221                           	opt stack 0
  1222  00001A                     SWSPI_DAC_send_bits@data:
  1223                           	opt stack 0
  1224  00001A                     DATAEE_WriteByte@GIEBitValue:
  1225                           	opt stack 0
  1226  00001A                     isdigit@c:
  1227                           	opt stack 0
  1228  00001A                     isspace@c:
  1229                           	opt stack 0
  1230  00001A                     isupper@c:
  1231                           	opt stack 0
  1232  00001A                     crc8@dataSize:
  1233                           	opt stack 0
  1234  00001A                     ReadIntFromEeprom@numOfByes:
  1235                           	opt stack 0
  1236  00001A                     ___wmul@multiplicand:
  1237                           	opt stack 0
  1238  00001A                     memset@c:
  1239                           	opt stack 0
  1240  00001A                     Make32bitsArray@data:
  1241                           	opt stack 0
  1242                           
  1243                           ; 4 bytes @ 0x19
  1244  00001A                     	ds	1
  1245  00001B                     ??_isalpha:
  1246  00001B                     BlinkErrorLeds@state:
  1247                           	opt stack 0
  1248  00001B                     BlinkOkLeds@state:
  1249                           	opt stack 0
  1250  00001B                     EepromWrite@data:
  1251                           	opt stack 0
  1252  00001B                     SWSPI_DAC_send_bits@count:
  1253                           	opt stack 0
  1254  00001B                     ___ftpack@exp:
  1255                           	opt stack 0
  1256  00001B                     WriteUartMessage@dataSize:
  1257                           	opt stack 0
  1258  00001B                     frexp@eptr:
  1259                           	opt stack 0
  1260  00001B                     ___ftge@ff2:
  1261                           	opt stack 0
  1262                           
  1263                           ; 3 bytes @ 0x1A
  1264  00001B                     	ds	1
  1265  00001C                     ??_crc8:
  1266  00001C                     EepromWrite@address:
  1267                           	opt stack 0
  1268  00001C                     SWSPI_DAC_send_bits@phrType:
  1269                           	opt stack 0
  1270  00001C                     FLASH_EraseBlock@GIEBitValue:
  1271                           	opt stack 0
  1272  00001C                     ADC_GetConversion@channel:
  1273                           	opt stack 0
  1274  00001C                     make8@dataLocation:
  1275                           	opt stack 0
  1276  00001C                     ___ftpack@sign:
  1277                           	opt stack 0
  1278  00001C                     _isalpha$2951:
  1279                           	opt stack 0
  1280  00001C                     BlinkErrorLeds@idx:
  1281                           	opt stack 0
  1282  00001C                     BlinkOkLeds@idx:
  1283                           	opt stack 0
  1284  00001C                     ___wmul@product:
  1285                           	opt stack 0
  1286  00001C                     memset@n:
  1287                           	opt stack 0
  1288  00001C                     ___lmul@multiplicand:
  1289                           	opt stack 0
  1290  00001C                     ___lldiv@divisor:
  1291                           	opt stack 0
  1292  00001C                     ___llmod@divisor:
  1293                           	opt stack 0
  1294                           
  1295                           ; 4 bytes @ 0x1B
  1296  00001C                     	ds	1
  1297  00001D                     ??_make8:
  1298  00001D                     ??___ftpack:
  1299  00001D                     ??_frexp:
  1300  00001D                     ??_WriteUartMessage:
  1301  00001D                     isalpha@c:
  1302                           	opt stack 0
  1303  00001D                     crc8@crc:
  1304                           	opt stack 0
  1305  00001D                     FLASH_WriteBlock@writeAddr:
  1306                           	opt stack 0
  1307                           
  1308                           ; 4 bytes @ 0x1C
  1309  00001D                     	ds	1
  1310  00001E                     ??_ReadIntFromEeprom:
  1311  00001E                     ??_Make32bitsArray:
  1312  00001E                     ??___ftge:
  1313  00001E                     WriteUartMessage@idx:
  1314                           	opt stack 0
  1315  00001E                     memset@p:
  1316                           	opt stack 0
  1317                           
  1318                           ; 2 bytes @ 0x1D
  1319  00001E                     	ds	1
  1320  00001F                     crc8@i:
  1321                           	opt stack 0
  1322                           
  1323                           ; 2 bytes @ 0x1E
  1324  00001F                     	ds	1
  1325  000020                     ?___awtoft:
  1326                           	opt stack 0
  1327  000020                     ?___lltoft:
  1328                           	opt stack 0
  1329  000020                     ?___lwtoft:
  1330                           	opt stack 0
  1331  000020                     ___llmod@counter:
  1332                           	opt stack 0
  1333  000020                     ZeroArray@array:
  1334                           	opt stack 0
  1335  000020                     ZeroBitsArray@array:
  1336                           	opt stack 0
  1337  000020                     Make32bitsArray@idx:
  1338                           	opt stack 0
  1339  000020                     ___awtoft@c:
  1340                           	opt stack 0
  1341  000020                     ___lwtoft@c:
  1342                           	opt stack 0
  1343  000020                     ___lmul@product:
  1344                           	opt stack 0
  1345  000020                     ___lldiv@quotient:
  1346                           	opt stack 0
  1347  000020                     ___lltoft@c:
  1348                           	opt stack 0
  1349                           
  1350                           ; 4 bytes @ 0x1F
  1351  000020                     	ds	1
  1352  000021                     FLASH_WriteBlock@flashWrBufPtr:
  1353                           	opt stack 0
  1354  000021                     StoreIntInEeprom@data:
  1355                           	opt stack 0
  1356                           
  1357                           ; 4 bytes @ 0x20
  1358  000021                     	ds	1
  1359  000022                     ZeroArray@size:
  1360                           	opt stack 0
  1361  000022                     SWSPI_Synth_send_bits@data:
  1362                           	opt stack 0
  1363  000022                     ReadIntFromEeprom@retVal:
  1364                           	opt stack 0
  1365                           
  1366                           ; 4 bytes @ 0x21
  1367  000022                     	ds	1
  1368  000023                     ??_FLASH_WriteBlock:
  1369  000023                     ___awtoft@sign:
  1370                           	opt stack 0
  1371                           
  1372                           ; 1 bytes @ 0x22
  1373  000023                     	ds	1
  1374  000024                     ??_GetMcuFwVersion:
  1375  000024                     ??_GetCpldFwVersion:
  1376  000024                     ??_FlashReadCondition:
  1377  000024                     ??___lltoft:
  1378  000024                     ?_strtol:
  1379                           	opt stack 0
  1380  000024                     SendAckMessage@inRequest:
  1381                           	opt stack 0
  1382  000024                     ___lldiv@counter:
  1383                           	opt stack 0
  1384  000024                     strtol@s:
  1385                           	opt stack 0
  1386                           
  1387                           ; 2 bytes @ 0x23
  1388  000024                     	ds	1
  1389  000025                     ??_GetMcuRunTime:
  1390  000025                     SendAckMessage@inGroup:
  1391                           	opt stack 0
  1392  000025                     StoreIntInEeprom@address:
  1393                           	opt stack 0
  1394                           
  1395                           ; 1 bytes @ 0x24
  1396  000025                     	ds	1
  1397  000026                     ReadIntFromEeprom@address:
  1398                           	opt stack 0
  1399  000026                     StoreIntInEeprom@numOfByes:
  1400                           	opt stack 0
  1401  000026                     strtol@endptr:
  1402                           	opt stack 0
  1403  000026                     SWSPI_send_word@data:
  1404                           	opt stack 0
  1405  000026                     SendAckMessage@TxMsg:
  1406                           	opt stack 0
  1407  000026                     GetMcuFwVersion@TxMsg:
  1408                           	opt stack 0
  1409  000026                     GetCpldFwVersion@TxMsg:
  1410                           	opt stack 0
  1411                           
  1412                           ; 9 bytes @ 0x25
  1413  000026                     	ds	1
  1414  000027                     FLASH_WriteBlock@blockStartAddr:
  1415                           	opt stack 0
  1416                           
  1417                           ; 4 bytes @ 0x26
  1418  000027                     	ds	1
  1419  000028                     StoreIntInEeprom@val:
  1420                           	opt stack 0
  1421  000028                     ___lltoft@exp:
  1422                           	opt stack 0
  1423  000028                     strtol@base:
  1424                           	opt stack 0
  1425  000028                     FlashReadCondition@TxMsg:
  1426                           	opt stack 0
  1427                           
  1428                           ; 9 bytes @ 0x27
  1429  000028                     	ds	1
  1430  000029                     ?___ftdiv:
  1431                           	opt stack 0
  1432  000029                     StoreIntInEeprom@idx:
  1433                           	opt stack 0
  1434  000029                     ___ftdiv@f1:
  1435                           	opt stack 0
  1436                           
  1437                           ; 3 bytes @ 0x28
  1438  000029                     	ds	1
  1439  00002A                     ??_strtol:
  1440  00002A                     SWSPI_send_word@dataSize:
  1441                           	opt stack 0
  1442                           
  1443                           ; 1 bytes @ 0x29
  1444  00002A                     	ds	1
  1445  00002B                     SWSPI_send_word@datac:
  1446                           	opt stack 0
  1447  00002B                     FLASH_WriteBlock@GIEBitValue:
  1448                           	opt stack 0
  1449                           
  1450                           ; 1 bytes @ 0x2A
  1451  00002B                     	ds	1
  1452  00002C                     ??_testLeds:
  1453  00002C                     FLASH_WriteBlock@i:
  1454                           	opt stack 0
  1455  00002C                     SetAdcOperationMode@data:
  1456                           	opt stack 0
  1457  00002C                     SetConversionResultFormat@data:
  1458                           	opt stack 0
  1459  00002C                     SetChannelMode@data:
  1460                           	opt stack 0
  1461  00002C                     FlashReadUart@numOfSampleToRead:
  1462                           	opt stack 0
  1463  00002C                     SWSPI_send_word@idx:
  1464                           	opt stack 0
  1465  00002C                     SetMcuFwVersion@data:
  1466                           	opt stack 0
  1467  00002C                     SetCpldFwVersion@data:
  1468                           	opt stack 0
  1469  00002C                     ___ftdiv@f2:
  1470                           	opt stack 0
  1471                           
  1472                           ; 3 bytes @ 0x2B
  1473  00002C                     	ds	1
  1474  00002D                     testLeds@idx:
  1475                           	opt stack 0
  1476  00002D                     FlashSampleWrite@sampleData:
  1477                           	opt stack 0
  1478                           
  1479                           ; 2 bytes @ 0x2C
  1480  00002D                     	ds	1
  1481  00002E                     SWSPI_send_word@phrType:
  1482                           	opt stack 0
  1483  00002E                     SetMcuFwVersion@idx:
  1484                           	opt stack 0
  1485  00002E                     SetCpldFwVersion@idx:
  1486                           	opt stack 0
  1487                           
  1488                           ; 2 bytes @ 0x2D
  1489  00002E                     	ds	1
  1490  00002F                     ??_eval_poly:
  1491  00002F                     FlashSampleWrite@channelNum:
  1492                           	opt stack 0
  1493  00002F                     PLLInitialize@idx:
  1494                           	opt stack 0
  1495  00002F                     GetMcuFwVersion@idx:
  1496                           	opt stack 0
  1497  00002F                     ___altoft@exp:
  1498                           	opt stack 0
  1499  00002F                     DacInit@test:
  1500                           	opt stack 0
  1501  00002F                     DacSetValue@data:
  1502                           	opt stack 0
  1503  00002F                     UpdateTxFreq@data:
  1504                           	opt stack 0
  1505  00002F                     UpdateRxFreq@data:
  1506                           	opt stack 0
  1507  00002F                     GetCpldFwVersion@idx:
  1508                           	opt stack 0
  1509                           
  1510                           ; 2 bytes @ 0x2E
  1511  00002F                     	ds	1
  1512  000030                     ___altoft@sign:
  1513                           	opt stack 0
  1514                           
  1515                           ; 1 bytes @ 0x2F
  1516  000030                     	ds	1
  1517  000031                     tblptru	equ	0xFF8
  1518                           tblptrh	equ	0xFF7
  1519                           tblptrl	equ	0xFF6
  1520                           tablat	equ	0xFF5
  1521                           postinc0	equ	0xFEE
  1522                           wreg	equ	0xFE8
  1523                           postdec1	equ	0xFE5
  1524                           fsr1l	equ	0xFE1
  1525                           
  1526                           ; 1 bytes @ 0x30
  1527 ;;
  1528 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1529 ;;
  1530 ;; *************** function _main *****************
  1531 ;; Defined at:
  1532 ;;		line 13 in file "main.c"
  1533 ;; Parameters:    Size  Location     Type
  1534 ;;		None
  1535 ;; Auto vars:     Size  Location     Type
  1536 ;;		None
  1537 ;; Return value:  Size  Location     Type
  1538 ;;                  1    wreg      void 
  1539 ;; Registers used:
  1540 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1541 ;; Tracked objects:
  1542 ;;		On entry : 0/0
  1543 ;;		On exit  : 0/0
  1544 ;;		Unchanged: 0/0
  1545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1546 ;;      Params:         0       0       0       0       0       0       0
  1547 ;;      Locals:         0       0       0       0       0       0       0
  1548 ;;      Temps:          0       0       0       0       0       0       0
  1549 ;;      Totals:         0       0       0       0       0       0       0
  1550 ;;Total ram usage:        0 bytes
  1551 ;; Hardware stack levels required when called:   10
  1552 ;; This function calls:
  1553 ;;		_AdcConvert
  1554 ;;		_BlinkErrorLeds
  1555 ;;		_BlinkOkLeds
  1556 ;;		_CheckFlashPrecentage
  1557 ;;		_InitSystemApplicationManagers
  1558 ;;		_SendSystemStartAck
  1559 ;;		_SetMcuRunTime
  1560 ;;		_SetMcuSystem
  1561 ;;		_keepAliveSignalLed
  1562 ;;		_keepAliveSignalUart
  1563 ;;		_readUartMessage
  1564 ;; This function is called by:
  1565 ;;		Startup code after reset
  1566 ;; This function uses a non-reentrant model
  1567 ;;
  1568                           
  1569                           	psect	text0
  1570  00285E                     __ptext0:
  1571                           	opt stack 0
  1572  00285E                     _main:
  1573                           	opt stack 21
  1574                           
  1575                           ;main.c: 16: SetMcuSystem();
  1576                           
  1577                           ;incstack = 0
  1578  00285E  ECC9  F01B         	call	_SetMcuSystem	;wreg free
  1579                           
  1580                           ;main.c: 19: InitSystemApplicationManagers();
  1581  002862  EC4D  F01B         	call	_InitSystemApplicationManagers	;wreg free
  1582                           
  1583                           ;main.c: 22: SendSystemStartAck();
  1584  002866  ECC3  F01B         	call	_SendSystemStartAck	;wreg free
  1585                           
  1586                           ;main.c: 25: BlinkOkLeds(OK_START_SYSTEM);
  1587  00286A  0E03               	movlw	3
  1588  00286C  EC8F  F014         	call	_BlinkOkLeds
  1589  002870                     
  1590                           ;main.c: 28: {
  1591                           ;main.c: 29: readUartMessage();
  1592  002870  EC1C  F005         	call	_readUartMessage	;wreg free
  1593                           
  1594                           ;main.c: 31: if (TimerOneSecFlag == 1)
  1595  002874  0100               	movlb	0	; () banked
  1596  002876  05D8               	decf	_TimerOneSecFlag& (0+255),w,b	;volatile
  1597  002878  A4D8               	btfss	status,2,c
  1598  00287A  D006               	goto	l1362
  1599                           
  1600                           ; BSR set to: 0
  1601                           ;main.c: 32: {
  1602                           ;main.c: 34: SetMcuRunTime();
  1603  00287C  ECFB  F017         	call	_SetMcuRunTime	;wreg free
  1604                           
  1605                           ;main.c: 35: TimerOneSecFlag = 0;
  1606  002880  0E00               	movlw	0
  1607  002882  0100               	movlb	0	; () banked
  1608  002884  6FD8               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
  1609                           
  1610                           ;main.c: 36: }
  1611  002886  D7F4               	goto	l1361
  1612  002888                     l1362:
  1613                           
  1614                           ; BSR set to: 0
  1615                           ;main.c: 37: else if (TimerSamplingFlag == 1)
  1616                           
  1617                           ; BSR set to: 0
  1618  002888  05D7               	decf	_TimerSamplingFlag& (0+255),w,b	;volatile
  1619  00288A  A4D8               	btfss	status,2,c
  1620  00288C  D010               	goto	l1364
  1621                           
  1622                           ; BSR set to: 0
  1623                           ;main.c: 38: {
  1624                           ;main.c: 39: keepAliveSignalLed();
  1625  00288E  EC36  F01B         	call	_keepAliveSignalLed	;wreg free
  1626                           
  1627                           ;main.c: 41: if(1 == CheckFlashPrecentage())
  1628  002892  EC39  F010         	call	_CheckFlashPrecentage	;wreg free
  1629  002896  06E8               	decf	wreg,f,c
  1630  002898  A4D8               	btfss	status,2,c
  1631  00289A  D003               	goto	l1365
  1632                           
  1633                           ;main.c: 42: {
  1634                           ;main.c: 43: BlinkErrorLeds(FAIL_FLASH_MORE_THEN_HELF);
  1635  00289C  0E04               	movlw	4
  1636  00289E  ECBE  F014         	call	_BlinkErrorLeds
  1637  0028A2                     l1365:
  1638                           
  1639                           ;main.c: 44: }
  1640                           ;main.c: 47: AdcConvert();
  1641  0028A2  ECFE  F007         	call	_AdcConvert	;wreg free
  1642                           
  1643                           ;main.c: 49: TimerSamplingFlag = 0;
  1644  0028A6  0E00               	movlw	0
  1645  0028A8  0100               	movlb	0	; () banked
  1646  0028AA  6FD7               	movwf	_TimerSamplingFlag& (0+255),b	;volatile
  1647                           
  1648                           ;main.c: 50: }
  1649  0028AC  D7E1               	goto	l1361
  1650  0028AE                     l1364:
  1651                           
  1652                           ; BSR set to: 0
  1653                           ;main.c: 51: else if (TimerKeepAliveFlag == 1)
  1654                           
  1655                           ; BSR set to: 0
  1656  0028AE  05D6               	decf	_TimerKeepAliveFlag& (0+255),w,b	;volatile
  1657  0028B0  A4D8               	btfss	status,2,c
  1658  0028B2  D7DE               	goto	l1361
  1659                           
  1660                           ; BSR set to: 0
  1661                           ;main.c: 52: {
  1662                           ;main.c: 53: keepAliveSignalUart();
  1663  0028B4  ECBD  F01B         	call	_keepAliveSignalUart	;wreg free
  1664                           
  1665                           ;main.c: 54: TimerKeepAliveFlag = 0;
  1666  0028B8  0E00               	movlw	0
  1667  0028BA  0100               	movlb	0	; () banked
  1668  0028BC  6FD6               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
  1669                           
  1670                           ; BSR set to: 0
  1671                           
  1672                           ; BSR set to: 0
  1673                           
  1674                           ; BSR set to: 0
  1675                           
  1676                           ; BSR set to: 0
  1677  0028BE  D7D8               	goto	l1361
  1678  0028C0                     __end_of_main:
  1679                           	opt stack 0
  1680                           tblptru	equ	0xFF8
  1681                           tblptrh	equ	0xFF7
  1682                           tblptrl	equ	0xFF6
  1683                           tablat	equ	0xFF5
  1684                           postinc0	equ	0xFEE
  1685                           wreg	equ	0xFE8
  1686                           postdec1	equ	0xFE5
  1687                           fsr1l	equ	0xFE1
  1688                           status	equ	0xFD8
  1689                           
  1690 ;; *************** function _readUartMessage *****************
  1691 ;; Defined at:
  1692 ;;		line 28 in file "EusartApp.c"
  1693 ;; Parameters:    Size  Location     Type
  1694 ;;		None
  1695 ;; Auto vars:     Size  Location     Type
  1696 ;;  idx             2    6[BANK1 ] int 
  1697 ;;  chRec           1    8[BANK1 ] unsigned char 
  1698 ;; Return value:  Size  Location     Type
  1699 ;;                  1    wreg      void 
  1700 ;; Registers used:
  1701 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  1702 ;; Tracked objects:
  1703 ;;		On entry : 0/0
  1704 ;;		On exit  : 0/0
  1705 ;;		Unchanged: 0/0
  1706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1707 ;;      Params:         0       0       0       0       0       0       0
  1708 ;;      Locals:         0       0       3       0       0       0       0
  1709 ;;      Temps:          0       0       4       0       0       0       0
  1710 ;;      Totals:         0       0       7       0       0       0       0
  1711 ;;Total ram usage:        7 bytes
  1712 ;; Hardware stack levels used:    1
  1713 ;; Hardware stack levels required when called:    9
  1714 ;; This function calls:
  1715 ;;		_EUSART1_Read
  1716 ;;		_GroupAdc
  1717 ;;		_GroupControlMcu
  1718 ;;		_GroupDAC
  1719 ;;		_GroupFlashMemory
  1720 ;;		_GroupStatusAndVersion
  1721 ;;		_GroupSynthesizers
  1722 ;;		_InitRxMessageParams
  1723 ;;		_ZeroArray
  1724 ;;		_crc8
  1725 ;; This function is called by:
  1726 ;;		_main
  1727 ;; This function uses a non-reentrant model
  1728 ;;
  1729                           
  1730                           	psect	text1
  1731  000A38                     __ptext1:
  1732                           	opt stack 0
  1733  000A38                     _readUartMessage:
  1734                           	opt stack 21
  1735                           
  1736                           ;EusartApp.c: 31: uint8_t chRec = (0);
  1737                           
  1738                           ; BSR set to: 0
  1739                           ;incstack = 0
  1740  000A38  0E00               	movlw	0
  1741  000A3A  0101               	movlb	1	; () banked
  1742  000A3C  6FCA               	movwf	readUartMessage@chRec& (0+255),b
  1743                           
  1744                           ;EusartApp.c: 32: switch(cState)
  1745  000A3E  D0DF               	goto	l172
  1746  000A40                     
  1747                           ;EusartApp.c: 37: if(eusart1RxCount > (4))
  1748                           
  1749                           ; BSR set to: 1
  1750  000A40  0E04               	movlw	4
  1751  000A42  0100               	movlb	0	; () banked
  1752  000A44  65D3               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1753  000A46  0012               	return	
  1754                           
  1755                           ; BSR set to: 0
  1756                           ;EusartApp.c: 38: {
  1757                           ;EusartApp.c: 39: cState = FIND_MAGIC;
  1758  000A48  0E01               	movlw	1
  1759  000A4A  6FD2               	movwf	_cState& (0+255),b
  1760                           
  1761                           ; BSR set to: 0
  1762                           ;EusartApp.c: 40: }
  1763                           ;EusartApp.c: 41: return;
  1764                           
  1765                           ; BSR set to: 0
  1766  000A4C  0012               	return	
  1767  000A4E                     
  1768                           ; BSR set to: 0
  1769                           ;EusartApp.c: 45: InitRxMessageParams();
  1770                           
  1771                           ; BSR set to: 0
  1772  000A4E  EC49  F01A         	call	_InitRxMessageParams	;wreg free
  1773                           
  1774                           ;EusartApp.c: 46: msgCount = 0;
  1775  000A52  0E00               	movlw	0
  1776  000A54  0100               	movlb	0	; () banked
  1777  000A56  6FCB               	movwf	_msgCount& (0+255),b
  1778                           
  1779                           ; BSR set to: 0
  1780                           ;EusartApp.c: 47: if(eusart1RxCount > 1)
  1781  000A58  0E01               	movlw	1
  1782  000A5A  65D3               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1783  000A5C  D00E               	goto	l177
  1784                           
  1785                           ; BSR set to: 0
  1786                           ;EusartApp.c: 48: {
  1787                           ;EusartApp.c: 49: chRec = EUSART1_Read();
  1788  000A5E  ECD9  F017         	call	_EUSART1_Read	;wreg free
  1789  000A62  0101               	movlb	1	; () banked
  1790  000A64  6FCA               	movwf	readUartMessage@chRec& (0+255),b
  1791                           
  1792                           ; BSR set to: 1
  1793                           ;EusartApp.c: 50: rxMsgQueue[(0)] = chRec;
  1794  000A66  C1CA  F0D9         	movff	readUartMessage@chRec,_rxMsgQueue
  1795                           
  1796                           ; BSR set to: 1
  1797                           ;EusartApp.c: 51: if(chRec == (0x24))
  1798  000A6A  0E24               	movlw	36
  1799  000A6C  19CA               	xorwf	readUartMessage@chRec& (0+255),w,b
  1800  000A6E  A4D8               	btfss	status,2,c
  1801  000A70  0012               	return	
  1802                           
  1803                           ; BSR set to: 1
  1804                           ;EusartApp.c: 52: {
  1805                           ;EusartApp.c: 53: cState = READ_GROUP;
  1806  000A72  0E02               	movlw	2
  1807  000A74  0100               	movlb	0	; () banked
  1808  000A76  6FD2               	movwf	_cState& (0+255),b
  1809                           
  1810                           ; BSR set to: 0
  1811                           ;EusartApp.c: 54: }
  1812                           ;EusartApp.c: 55: }
  1813  000A78  0012               	return	
  1814  000A7A                     l177:
  1815                           
  1816                           ; BSR set to: 0
  1817                           ;EusartApp.c: 56: else
  1818                           ;EusartApp.c: 57: {
  1819                           ;EusartApp.c: 58: cState = START_RX_MESSAGE_READ;
  1820                           
  1821                           ; BSR set to: 0
  1822  000A7A  0E00               	movlw	0
  1823  000A7C  6FD2               	movwf	_cState& (0+255),b
  1824                           
  1825                           ; BSR set to: 0
  1826                           ;EusartApp.c: 59: }
  1827                           ;EusartApp.c: 61: break;
  1828  000A7E  0012               	return	
  1829  000A80                     
  1830                           ; BSR set to: 0
  1831                           ;EusartApp.c: 65: if(eusart1RxCount > 1)
  1832                           
  1833                           ; BSR set to: 0
  1834  000A80  0E01               	movlw	1
  1835  000A82  65D3               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1836  000A84  0012               	return	
  1837                           
  1838                           ; BSR set to: 0
  1839                           ;EusartApp.c: 66: {
  1840                           ;EusartApp.c: 67: group = EUSART1_Read();
  1841  000A86  ECD9  F017         	call	_EUSART1_Read	;wreg free
  1842  000A8A  0100               	movlb	0	; () banked
  1843  000A8C  6FD1               	movwf	_group& (0+255),b
  1844                           
  1845                           ; BSR set to: 0
  1846                           ;EusartApp.c: 68: rxMsgQueue[(1)] = group;
  1847  000A8E  C0D1  F0DA         	movff	_group,_rxMsgQueue+1
  1848                           
  1849                           ; BSR set to: 0
  1850                           ;EusartApp.c: 69: cState = READ_REQUEST;
  1851  000A92  0E03               	movlw	3
  1852  000A94  6FD2               	movwf	_cState& (0+255),b
  1853                           
  1854                           ; BSR set to: 0
  1855                           ;EusartApp.c: 70: }
  1856                           ;EusartApp.c: 71: break;
  1857  000A96  0012               	return	
  1858  000A98                     
  1859                           ; BSR set to: 0
  1860                           ;EusartApp.c: 75: if(eusart1RxCount > 1)
  1861                           
  1862                           ; BSR set to: 0
  1863  000A98  0E01               	movlw	1
  1864  000A9A  65D3               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1865  000A9C  0012               	return	
  1866                           
  1867                           ; BSR set to: 0
  1868                           ;EusartApp.c: 76: {
  1869                           ;EusartApp.c: 77: request = EUSART1_Read();
  1870  000A9E  ECD9  F017         	call	_EUSART1_Read	;wreg free
  1871  000AA2  0100               	movlb	0	; () banked
  1872  000AA4  6FD0               	movwf	_request& (0+255),b
  1873                           
  1874                           ; BSR set to: 0
  1875                           ;EusartApp.c: 78: rxMsgQueue[(2)] = request;
  1876  000AA6  C0D0  F0DB         	movff	_request,_rxMsgQueue+2
  1877                           
  1878                           ; BSR set to: 0
  1879                           ;EusartApp.c: 79: cState = READ_DATA_SIZE;
  1880  000AAA  0E04               	movlw	4
  1881  000AAC  6FD2               	movwf	_cState& (0+255),b
  1882                           
  1883                           ; BSR set to: 0
  1884                           ;EusartApp.c: 80: }
  1885                           ;EusartApp.c: 81: break;
  1886  000AAE  0012               	return	
  1887  000AB0                     
  1888                           ; BSR set to: 0
  1889                           ;EusartApp.c: 84: if(eusart1RxCount > 1)
  1890                           
  1891                           ; BSR set to: 0
  1892  000AB0  0E01               	movlw	1
  1893  000AB2  65D3               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1894  000AB4  0012               	return	
  1895                           
  1896                           ; BSR set to: 0
  1897                           ;EusartApp.c: 85: {
  1898                           ;EusartApp.c: 86: dataSize = EUSART1_Read();
  1899  000AB6  ECD9  F017         	call	_EUSART1_Read	;wreg free
  1900  000ABA  0100               	movlb	0	; () banked
  1901  000ABC  6FCF               	movwf	_dataSize& (0+255),b
  1902                           
  1903                           ; BSR set to: 0
  1904                           ;EusartApp.c: 87: rxMsgQueue[(3)] = dataSize;
  1905  000ABE  C0CF  F0DC         	movff	_dataSize,_rxMsgQueue+3
  1906                           
  1907                           ; BSR set to: 0
  1908                           ;EusartApp.c: 88: if(dataSize == 0)
  1909  000AC2  51CF               	movf	_dataSize& (0+255),w,b
  1910  000AC4  A4D8               	btfss	status,2,c
  1911  000AC6  D003               	goto	l187
  1912                           
  1913                           ; BSR set to: 0
  1914                           ;EusartApp.c: 89: {
  1915                           ;EusartApp.c: 90: cState = CHECK_CRC;
  1916  000AC8  0E06               	movlw	6
  1917  000ACA  6FD2               	movwf	_cState& (0+255),b
  1918                           
  1919                           ;EusartApp.c: 91: }
  1920  000ACC  0012               	return	
  1921  000ACE                     l187:
  1922                           
  1923                           ; BSR set to: 0
  1924                           ;EusartApp.c: 92: else
  1925                           ;EusartApp.c: 93: {
  1926                           ;EusartApp.c: 94: cState = READ_DATA;
  1927                           
  1928                           ; BSR set to: 0
  1929  000ACE  0E05               	movlw	5
  1930  000AD0  6FD2               	movwf	_cState& (0+255),b
  1931                           
  1932                           ; BSR set to: 0
  1933                           ;EusartApp.c: 95: }
  1934                           ;EusartApp.c: 97: }
  1935                           ;EusartApp.c: 99: break;
  1936                           
  1937                           ; BSR set to: 0
  1938  000AD2  0012               	return	
  1939  000AD4                     
  1940                           ; BSR set to: 0
  1941                           ;EusartApp.c: 103: if(eusart1RxCount >= dataSize)
  1942                           
  1943                           ; BSR set to: 0
  1944  000AD4  51CF               	movf	_dataSize& (0+255),w,b
  1945  000AD6  5DD3               	subwf	_eusart1RxCount& (0+255),w,b	;volatile
  1946  000AD8  A0D8               	btfss	status,0,c
  1947  000ADA  0012               	return	
  1948                           
  1949                           ; BSR set to: 0
  1950                           ;EusartApp.c: 104: {
  1951                           ;EusartApp.c: 105: ZeroArray(rxMsgData, (0x14));
  1952  000ADC  0EAE               	movlw	low _rxMsgData
  1953  000ADE  6E20               	movwf	ZeroArray@array,c
  1954  000AE0  0E01               	movlw	high _rxMsgData
  1955  000AE2  6E21               	movwf	ZeroArray@array+1,c
  1956  000AE4  0E00               	movlw	0
  1957  000AE6  6E23               	movwf	ZeroArray@size+1,c
  1958  000AE8  0E14               	movlw	20
  1959  000AEA  6E22               	movwf	ZeroArray@size,c
  1960  000AEC  ECFD  F01A         	call	_ZeroArray	;wreg free
  1961                           
  1962                           ;EusartApp.c: 107: for(int idx = 0; idx < dataSize; idx++)
  1963  000AF0  0E00               	movlw	0
  1964  000AF2  0101               	movlb	1	; () banked
  1965  000AF4  6FC9               	movwf	(readUartMessage@idx+1)& (0+255),b
  1966  000AF6  0E00               	movlw	0
  1967  000AF8  6FC8               	movwf	readUartMessage@idx& (0+255),b
  1968  000AFA  D022               	goto	l191
  1969  000AFC                     
  1970                           ; BSR set to: 1
  1971                           ;EusartApp.c: 108: {
  1972                           ;EusartApp.c: 109: chRec = EUSART1_Read();
  1973                           
  1974                           ; BSR set to: 1
  1975  000AFC  ECD9  F017         	call	_EUSART1_Read	;wreg free
  1976  000B00  0101               	movlb	1	; () banked
  1977  000B02  6FCA               	movwf	readUartMessage@chRec& (0+255),b
  1978                           
  1979                           ; BSR set to: 1
  1980                           ;EusartApp.c: 110: rxMsgQueue[(0x4) + msgCount++] = chRec;
  1981  000B04  0100               	movlb	0	; () banked
  1982  000B06  51CB               	movf	_msgCount& (0+255),w,b
  1983  000B08  0101               	movlb	1	; () banked
  1984  000B0A  6FC4               	movwf	??_readUartMessage& (0+255),b
  1985  000B0C  6BC5               	clrf	(??_readUartMessage+1)& (0+255),b
  1986  000B0E  0E04               	movlw	4
  1987  000B10  27C4               	addwf	??_readUartMessage& (0+255),f,b
  1988  000B12  0E00               	movlw	0
  1989  000B14  23C5               	addwfc	(??_readUartMessage+1)& (0+255),f,b
  1990  000B16  0ED9               	movlw	low _rxMsgQueue
  1991  000B18  25C4               	addwf	??_readUartMessage& (0+255),w,b
  1992  000B1A  6ED9               	movwf	fsr2l,c
  1993  000B1C  0E00               	movlw	high _rxMsgQueue
  1994  000B1E  21C5               	addwfc	(??_readUartMessage+1)& (0+255),w,b
  1995  000B20  6EDA               	movwf	fsr2h,c
  1996  000B22  C1CA  FFDF         	movff	readUartMessage@chRec,indf2
  1997                           
  1998                           ; BSR set to: 1
  1999  000B26  0100               	movlb	0	; () banked
  2000  000B28  2BCB               	incf	_msgCount& (0+255),f,b
  2001                           
  2002                           ; BSR set to: 0
  2003                           ;EusartApp.c: 111: rxMsgData[idx] = chRec;
  2004  000B2A  0EAE               	movlw	low _rxMsgData
  2005  000B2C  0101               	movlb	1	; () banked
  2006  000B2E  25C8               	addwf	readUartMessage@idx& (0+255),w,b
  2007  000B30  6ED9               	movwf	fsr2l,c
  2008  000B32  0E01               	movlw	high _rxMsgData
  2009  000B34  21C9               	addwfc	(readUartMessage@idx+1)& (0+255),w,b
  2010  000B36  6EDA               	movwf	fsr2h,c
  2011  000B38  C1CA  FFDF         	movff	readUartMessage@chRec,indf2
  2012                           
  2013                           ; BSR set to: 1
  2014  000B3C  4BC8               	infsnz	readUartMessage@idx& (0+255),f,b
  2015  000B3E  2BC9               	incf	(readUartMessage@idx+1)& (0+255),f,b
  2016  000B40                     l191:
  2017                           
  2018                           ; BSR set to: 1
  2019                           
  2020                           ; BSR set to: 1
  2021  000B40  0100               	movlb	0	; () banked
  2022  000B42  51CF               	movf	_dataSize& (0+255),w,b
  2023  000B44  0101               	movlb	1	; () banked
  2024  000B46  6FC4               	movwf	??_readUartMessage& (0+255),b
  2025  000B48  6BC5               	clrf	(??_readUartMessage+1)& (0+255),b
  2026  000B4A  51C4               	movf	??_readUartMessage& (0+255),w,b
  2027  000B4C  5DC8               	subwf	readUartMessage@idx& (0+255),w,b
  2028  000B4E  51C9               	movf	(readUartMessage@idx+1)& (0+255),w,b
  2029  000B50  0A80               	xorlw	128
  2030  000B52  6FC6               	movwf	(??_readUartMessage+2)& (0+255),b
  2031  000B54  51C5               	movf	(??_readUartMessage+1)& (0+255),w,b
  2032  000B56  0A80               	xorlw	128
  2033  000B58  59C6               	subwfb	(??_readUartMessage+2)& (0+255),w,b
  2034  000B5A  A0D8               	btfss	status,0,c
  2035  000B5C  D7CF               	goto	l192
  2036                           
  2037                           ; BSR set to: 1
  2038                           ;EusartApp.c: 112: }
  2039                           ;EusartApp.c: 114: cState = CHECK_CRC;
  2040                           
  2041                           ; BSR set to: 1
  2042  000B5E  0E06               	movlw	6
  2043  000B60  0100               	movlb	0	; () banked
  2044  000B62  6FD2               	movwf	_cState& (0+255),b
  2045                           
  2046                           ; BSR set to: 0
  2047                           ;EusartApp.c: 115: }
  2048                           ;EusartApp.c: 116: break;
  2049  000B64  0012               	return	
  2050  000B66                     
  2051                           ; BSR set to: 0
  2052                           ;EusartApp.c: 119: if(eusart1RxCount >= 1)
  2053                           
  2054                           ; BSR set to: 0
  2055  000B66  51D3               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  2056  000B68  B4D8               	btfsc	status,2,c
  2057  000B6A  0012               	return	
  2058                           
  2059                           ; BSR set to: 0
  2060                           ;EusartApp.c: 120: {
  2061                           ;EusartApp.c: 121: crcGiven = EUSART1_Read();
  2062  000B6C  ECD9  F017         	call	_EUSART1_Read	;wreg free
  2063  000B70  0100               	movlb	0	; () banked
  2064  000B72  6FCC               	movwf	_crcGiven& (0+255),b
  2065                           
  2066                           ; BSR set to: 0
  2067                           ;EusartApp.c: 122: crcCalc = crc8(rxMsgQueue, (0x4) + msgCount);
  2068  000B74  0ED9               	movlw	low _rxMsgQueue
  2069  000B76  6E18               	movwf	crc8@dataArray,c
  2070  000B78  0E00               	movlw	high _rxMsgQueue
  2071  000B7A  6E19               	movwf	crc8@dataArray+1,c
  2072  000B7C  0E04               	movlw	4
  2073  000B7E  25CB               	addwf	_msgCount& (0+255),w,b
  2074  000B80  6E1A               	movwf	crc8@dataSize,c
  2075  000B82  6A1B               	clrf	crc8@dataSize+1,c
  2076  000B84  0E00               	movlw	0
  2077  000B86  221B               	addwfc	crc8@dataSize+1,f,c
  2078  000B88  EC48  F017         	call	_crc8	;wreg free
  2079  000B8C  0100               	movlb	0	; () banked
  2080  000B8E  6FCD               	movwf	_crcCalc& (0+255),b
  2081                           
  2082                           ; BSR set to: 0
  2083                           ;EusartApp.c: 124: if(crcGiven == crcCalc)
  2084  000B90  51CD               	movf	_crcCalc& (0+255),w,b
  2085  000B92  19CC               	xorwf	_crcGiven& (0+255),w,b
  2086  000B94  A4D8               	btfss	status,2,c
  2087  000B96  D003               	goto	l196
  2088                           
  2089                           ; BSR set to: 0
  2090                           ;EusartApp.c: 125: {
  2091                           ;EusartApp.c: 126: cState = JUMP_FUNCTION;
  2092  000B98  0E07               	movlw	7
  2093  000B9A  6FD2               	movwf	_cState& (0+255),b
  2094                           
  2095                           ;EusartApp.c: 127: }
  2096  000B9C  0012               	return	
  2097  000B9E                     l196:
  2098                           
  2099                           ; BSR set to: 0
  2100                           ;EusartApp.c: 128: else
  2101                           ;EusartApp.c: 129: {
  2102                           ;EusartApp.c: 130: cState = START_RX_MESSAGE_READ;
  2103                           
  2104                           ; BSR set to: 0
  2105  000B9E  0E00               	movlw	0
  2106  000BA0  6FD2               	movwf	_cState& (0+255),b
  2107                           
  2108                           ; BSR set to: 0
  2109                           ;EusartApp.c: 131: }
  2110                           ;EusartApp.c: 132: }
  2111                           ;EusartApp.c: 133: break;
  2112                           
  2113                           ; BSR set to: 0
  2114  000BA2  0012               	return	
  2115  000BA4                     
  2116                           ; BSR set to: 0
  2117                           ;EusartApp.c: 136: groupsArray[group - 1](request, rxMsgData);
  2118                           
  2119                           ; BSR set to: 0
  2120  000BA4  0EFE               	movlw	254
  2121  000BA6  0101               	movlb	1	; () banked
  2122  000BA8  6FC4               	movwf	??_readUartMessage& (0+255),b
  2123  000BAA  0EFF               	movlw	255
  2124  000BAC  6FC5               	movwf	(??_readUartMessage+1)& (0+255),b
  2125  000BAE  0100               	movlb	0	; () banked
  2126  000BB0  51D1               	movf	_group& (0+255),w,b
  2127  000BB2  0101               	movlb	1	; () banked
  2128  000BB4  6FC6               	movwf	(??_readUartMessage+2)& (0+255),b
  2129  000BB6  6BC7               	clrf	(??_readUartMessage+3)& (0+255),b
  2130  000BB8  90D8               	bcf	status,0,c
  2131  000BBA  37C6               	rlcf	(??_readUartMessage+2)& (0+255),f,b
  2132  000BBC  37C7               	rlcf	(??_readUartMessage+3)& (0+255),f,b
  2133  000BBE  51C4               	movf	??_readUartMessage& (0+255),w,b
  2134  000BC0  27C6               	addwf	(??_readUartMessage+2)& (0+255),f,b
  2135  000BC2  51C5               	movf	(??_readUartMessage+1)& (0+255),w,b
  2136  000BC4  23C7               	addwfc	(??_readUartMessage+3)& (0+255),f,b
  2137  000BC6  0EED               	movlw	low _groupsArray
  2138  000BC8  25C6               	addwf	(??_readUartMessage+2)& (0+255),w,b
  2139  000BCA  6ED9               	movwf	fsr2l,c
  2140  000BCC  0E00               	movlw	high _groupsArray
  2141  000BCE  21C7               	addwfc	(??_readUartMessage+3)& (0+255),w,b
  2142  000BD0  6EDA               	movwf	fsr2h,c
  2143  000BD2  D801               	call	u7938
  2144  000BD4  D010               	goto	u7939
  2145  000BD6                     u7938:
  2146  000BD6  0005               	push	
  2147  000BD8  6EFA               	movwf	pclath,c
  2148  000BDA  50DE               	movf	postinc2,w,c
  2149  000BDC  6EFD               	movwf	tosl,c
  2150  000BDE  50DE               	movf	postinc2,w,c
  2151  000BE0  6EFE               	movwf	tosh,c
  2152  000BE2  50F8               	movf	tblptru,w,c
  2153  000BE4  6EFF               	movwf	tosu,c
  2154  000BE6  50FA               	movf	pclath,w,c
  2155  000BE8  0EAE               	movlw	low _rxMsgData
  2156  000BEA  6FC2               	movwf	GroupDAC@data& (0+255),b
  2157  000BEC  0E01               	movlw	high _rxMsgData
  2158  000BEE  6FC3               	movwf	(GroupDAC@data+1)& (0+255),b
  2159  000BF0  0100               	movlb	0	; () banked
  2160  000BF2  51D0               	movf	_request& (0+255),w,b
  2161  000BF4  0012               	return		;indir
  2162  000BF6                     u7939:
  2163                           
  2164                           ;EusartApp.c: 137: cState = START_RX_MESSAGE_READ;
  2165  000BF6  0E00               	movlw	0
  2166  000BF8  0100               	movlb	0	; () banked
  2167  000BFA  6FD2               	movwf	_cState& (0+255),b
  2168                           
  2169                           ; BSR set to: 0
  2170                           ;EusartApp.c: 139: }
  2171                           
  2172                           ;EusartApp.c: 138: break;
  2173  000BFC  0012               	return	
  2174  000BFE                     l172:
  2175                           
  2176                           ; BSR set to: 0
  2177  000BFE  0100               	movlb	0	; () banked
  2178  000C00  51D2               	movf	_cState& (0+255),w,b
  2179                           
  2180                           ; Switch size 1, requested type "space"
  2181                           ; Number of cases is 8, Range of values is 0 to 7
  2182                           ; switch strategies available:
  2183                           ; Name         Instructions Cycles
  2184                           ; simple_byte           25    13 (average)
  2185                           ;	Chosen strategy is simple_byte
  2186  000C02  0A00               	xorlw	0	; case 0
  2187  000C04  B4D8               	btfsc	status,2,c
  2188  000C06  D71C               	goto	l173
  2189  000C08  0A01               	xorlw	1	; case 1
  2190  000C0A  B4D8               	btfsc	status,2,c
  2191  000C0C  D720               	goto	l176
  2192  000C0E  0A03               	xorlw	3	; case 2
  2193  000C10  B4D8               	btfsc	status,2,c
  2194  000C12  D736               	goto	l181
  2195  000C14  0A01               	xorlw	1	; case 3
  2196  000C16  B4D8               	btfsc	status,2,c
  2197  000C18  D73F               	goto	l183
  2198  000C1A  0A07               	xorlw	7	; case 4
  2199  000C1C  B4D8               	btfsc	status,2,c
  2200  000C1E  D748               	goto	l185
  2201  000C20  0A01               	xorlw	1	; case 5
  2202  000C22  B4D8               	btfsc	status,2,c
  2203  000C24  D757               	goto	l189
  2204  000C26  0A03               	xorlw	3	; case 6
  2205  000C28  B4D8               	btfsc	status,2,c
  2206  000C2A  D79D               	goto	l194
  2207  000C2C  0A01               	xorlw	1	; case 7
  2208  000C2E  A4D8               	btfss	status,2,c
  2209  000C30  0012               	return	
  2210  000C32  D7B8               	goto	l198
  2211  000C34                     __end_of_readUartMessage:
  2212                           	opt stack 0
  2213                           tosu	equ	0xFFF
  2214                           tosh	equ	0xFFE
  2215                           tosl	equ	0xFFD
  2216                           pclath	equ	0xFFA
  2217                           tblptru	equ	0xFF8
  2218                           tblptrh	equ	0xFF7
  2219                           tblptrl	equ	0xFF6
  2220                           tablat	equ	0xFF5
  2221                           postinc0	equ	0xFEE
  2222                           wreg	equ	0xFE8
  2223                           postdec1	equ	0xFE5
  2224                           fsr1l	equ	0xFE1
  2225                           indf2	equ	0xFDF
  2226                           postinc2	equ	0xFDE
  2227                           fsr2h	equ	0xFDA
  2228                           fsr2l	equ	0xFD9
  2229                           status	equ	0xFD8
  2230                           
  2231 ;; *************** function _InitRxMessageParams *****************
  2232 ;; Defined at:
  2233 ;;		line 142 in file "EusartApp.c"
  2234 ;; Parameters:    Size  Location     Type
  2235 ;;		None
  2236 ;; Auto vars:     Size  Location     Type
  2237 ;;		None
  2238 ;; Return value:  Size  Location     Type
  2239 ;;                  1    wreg      void 
  2240 ;; Registers used:
  2241 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2242 ;; Tracked objects:
  2243 ;;		On entry : 0/0
  2244 ;;		On exit  : 0/0
  2245 ;;		Unchanged: 0/0
  2246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2247 ;;      Params:         0       0       0       0       0       0       0
  2248 ;;      Locals:         0       0       0       0       0       0       0
  2249 ;;      Temps:          0       0       0       0       0       0       0
  2250 ;;      Totals:         0       0       0       0       0       0       0
  2251 ;;Total ram usage:        0 bytes
  2252 ;; Hardware stack levels used:    1
  2253 ;; Hardware stack levels required when called:    5
  2254 ;; This function calls:
  2255 ;;		_ZeroArray
  2256 ;; This function is called by:
  2257 ;;		_readUartMessage
  2258 ;; This function uses a non-reentrant model
  2259 ;;
  2260                           
  2261                           	psect	text2
  2262  003492                     __ptext2:
  2263                           	opt stack 0
  2264  003492                     _InitRxMessageParams:
  2265                           	opt stack 24
  2266                           
  2267                           ;EusartApp.c: 146: dataSize = 0;
  2268                           
  2269                           ;incstack = 0
  2270  003492  0E00               	movlw	0
  2271  003494  0100               	movlb	0	; () banked
  2272  003496  6FCF               	movwf	_dataSize& (0+255),b
  2273                           
  2274                           ;EusartApp.c: 147: crcCalc = 0;
  2275  003498  0E00               	movlw	0
  2276  00349A  6FCD               	movwf	_crcCalc& (0+255),b
  2277                           
  2278                           ;EusartApp.c: 148: crcGiven = 0;
  2279  00349C  0E00               	movlw	0
  2280  00349E  6FCC               	movwf	_crcGiven& (0+255),b
  2281                           
  2282                           ;EusartApp.c: 149: msgCount = 0;
  2283  0034A0  0E00               	movlw	0
  2284  0034A2  6FCB               	movwf	_msgCount& (0+255),b
  2285                           
  2286                           ; BSR set to: 0
  2287                           ;EusartApp.c: 150: ZeroArray(rxMsgQueue, (0x14));
  2288  0034A4  0ED9               	movlw	low _rxMsgQueue
  2289  0034A6  6E20               	movwf	ZeroArray@array,c
  2290  0034A8  0E00               	movlw	high _rxMsgQueue
  2291  0034AA  6E21               	movwf	ZeroArray@array+1,c
  2292  0034AC  0E00               	movlw	0
  2293  0034AE  6E23               	movwf	ZeroArray@size+1,c
  2294  0034B0  0E14               	movlw	20
  2295  0034B2  6E22               	movwf	ZeroArray@size,c
  2296  0034B4  ECFD  F01A         	call	_ZeroArray
  2297  0034B8  0012               	return		;funcret
  2298  0034BA                     __end_of_InitRxMessageParams:
  2299                           	opt stack 0
  2300                           tosu	equ	0xFFF
  2301                           tosh	equ	0xFFE
  2302                           tosl	equ	0xFFD
  2303                           pclath	equ	0xFFA
  2304                           tblptru	equ	0xFF8
  2305                           tblptrh	equ	0xFF7
  2306                           tblptrl	equ	0xFF6
  2307                           tablat	equ	0xFF5
  2308                           postinc0	equ	0xFEE
  2309                           wreg	equ	0xFE8
  2310                           postdec1	equ	0xFE5
  2311                           fsr1l	equ	0xFE1
  2312                           indf2	equ	0xFDF
  2313                           postinc2	equ	0xFDE
  2314                           fsr2h	equ	0xFDA
  2315                           fsr2l	equ	0xFD9
  2316                           status	equ	0xFD8
  2317                           
  2318 ;; *************** function _GroupDAC *****************
  2319 ;; Defined at:
  2320 ;;		line 133 in file "MessageFunctions.c"
  2321 ;; Parameters:    Size  Location     Type
  2322 ;;  request         1    wreg     enum E12
  2323 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2324 ;;		 -> rxMsgData(20), 
  2325 ;; Auto vars:     Size  Location     Type
  2326 ;;  request         1   95[BANK0 ] enum E12
  2327 ;; Return value:  Size  Location     Type
  2328 ;;                  1    wreg      void 
  2329 ;; Registers used:
  2330 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2331 ;; Tracked objects:
  2332 ;;		On entry : 0/0
  2333 ;;		On exit  : 0/0
  2334 ;;		Unchanged: 0/0
  2335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2336 ;;      Params:         0       0       2       0       0       0       0
  2337 ;;      Locals:         0       1       0       0       0       0       0
  2338 ;;      Temps:          0       0       0       0       0       0       0
  2339 ;;      Totals:         0       1       2       0       0       0       0
  2340 ;;Total ram usage:        3 bytes
  2341 ;; Hardware stack levels used:    1
  2342 ;; Hardware stack levels required when called:    8
  2343 ;; This function calls:
  2344 ;;		_DacSetValue
  2345 ;; This function is called by:
  2346 ;;		_readUartMessage
  2347 ;; This function uses a non-reentrant model
  2348 ;;
  2349                           
  2350                           	psect	text3
  2351  00359E                     __ptext3:
  2352                           	opt stack 0
  2353  00359E                     _GroupDAC:
  2354                           	opt stack 21
  2355                           
  2356                           ;incstack = 0
  2357                           ;GroupDAC@request stored from wreg
  2358  00359E  0100               	movlb	0	; () banked
  2359  0035A0  6FBF               	movwf	GroupDAC@request& (0+255),b
  2360                           
  2361                           ;MessageFunctions.c: 135: switch (request)
  2362  0035A2  D007               	goto	l1145
  2363  0035A4                     
  2364                           ;MessageFunctions.c: 138: DacSetValue(data);
  2365  0035A4  C1C2  F02F         	movff	GroupDAC@data,DacSetValue@data
  2366  0035A8  C1C3  F030         	movff	GroupDAC@data+1,DacSetValue@data+1
  2367  0035AC  EC54  F013         	call	_DacSetValue	;wreg free
  2368                           
  2369                           ;MessageFunctions.c: 143: }
  2370                           
  2371                           ;MessageFunctions.c: 142: break;
  2372                           
  2373                           ;MessageFunctions.c: 141: default:
  2374                           
  2375                           ;MessageFunctions.c: 139: break;
  2376  0035B0  0012               	return	
  2377  0035B2                     l1145:
  2378  0035B2  0100               	movlb	0	; () banked
  2379  0035B4  51BF               	movf	GroupDAC@request& (0+255),w,b
  2380                           
  2381                           ; Switch size 1, requested type "space"
  2382                           ; Number of cases is 1, Range of values is 97 to 97
  2383                           ; switch strategies available:
  2384                           ; Name         Instructions Cycles
  2385                           ; simple_byte            4     3 (average)
  2386                           ;	Chosen strategy is simple_byte
  2387  0035B6  0A61               	xorlw	97	; case 97
  2388  0035B8  A4D8               	btfss	status,2,c
  2389  0035BA  0012               	return	
  2390  0035BC  D7F3               	goto	l1146
  2391  0035BE                     __end_of_GroupDAC:
  2392                           	opt stack 0
  2393                           tosu	equ	0xFFF
  2394                           tosh	equ	0xFFE
  2395                           tosl	equ	0xFFD
  2396                           pclath	equ	0xFFA
  2397                           tblptru	equ	0xFF8
  2398                           tblptrh	equ	0xFF7
  2399                           tblptrl	equ	0xFF6
  2400                           tablat	equ	0xFF5
  2401                           postinc0	equ	0xFEE
  2402                           wreg	equ	0xFE8
  2403                           postdec1	equ	0xFE5
  2404                           fsr1l	equ	0xFE1
  2405                           indf2	equ	0xFDF
  2406                           postinc2	equ	0xFDE
  2407                           fsr2h	equ	0xFDA
  2408                           fsr2l	equ	0xFD9
  2409                           status	equ	0xFD8
  2410                           
  2411 ;; *************** function _GroupFlashMemory *****************
  2412 ;; Defined at:
  2413 ;;		line 112 in file "MessageFunctions.c"
  2414 ;; Parameters:    Size  Location     Type
  2415 ;;  request         1    wreg     enum E12
  2416 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2417 ;; Auto vars:     Size  Location     Type
  2418 ;;  request         1   96[BANK0 ] enum E12
  2419 ;; Return value:  Size  Location     Type
  2420 ;;                  1    wreg      void 
  2421 ;; Registers used:
  2422 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2423 ;; Tracked objects:
  2424 ;;		On entry : 0/0
  2425 ;;		On exit  : 0/0
  2426 ;;		Unchanged: 0/0
  2427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2428 ;;      Params:         0       0       2       0       0       0       0
  2429 ;;      Locals:         0       1       0       0       0       0       0
  2430 ;;      Temps:          0       1       0       0       0       0       0
  2431 ;;      Totals:         0       2       2       0       0       0       0
  2432 ;;Total ram usage:        4 bytes
  2433 ;; Hardware stack levels used:    1
  2434 ;; Hardware stack levels required when called:    7
  2435 ;; This function calls:
  2436 ;;		_FlashEreaseMem
  2437 ;;		_FlashReadCondition
  2438 ;;		_FlashReadUart
  2439 ;; This function is called by:
  2440 ;;		_readUartMessage
  2441 ;; This function uses a non-reentrant model
  2442 ;;
  2443                           
  2444                           	psect	text4
  2445  002F6E                     __ptext4:
  2446                           	opt stack 0
  2447  002F6E                     _GroupFlashMemory:
  2448                           	opt stack 22
  2449                           
  2450                           ;incstack = 0
  2451                           ;GroupFlashMemory@request stored from wreg
  2452  002F6E  0100               	movlb	0	; () banked
  2453  002F70  6FC0               	movwf	GroupFlashMemory@request& (0+255),b
  2454                           
  2455                           ;MessageFunctions.c: 114: switch (request)
  2456  002F72  D013               	goto	l1136
  2457  002F74                     
  2458                           ;MessageFunctions.c: 117: FlashEreaseMem();
  2459  002F74  ECCE  F016         	call	_FlashEreaseMem	;wreg free
  2460                           
  2461                           ;MessageFunctions.c: 118: break;
  2462  002F78  0012               	return	
  2463  002F7A                     
  2464                           ;MessageFunctions.c: 121: FlashReadCondition();
  2465  002F7A  ECFF  F00A         	call	_FlashReadCondition	;wreg free
  2466                           
  2467                           ;MessageFunctions.c: 122: break;
  2468  002F7E  0012               	return	
  2469  002F80                     
  2470                           ;MessageFunctions.c: 125: FlashReadUart((int)data[0]);
  2471  002F80  C1C2  FFD9         	movff	GroupFlashMemory@data,fsr2l
  2472  002F84  C1C3  FFDA         	movff	GroupFlashMemory@data+1,fsr2h
  2473  002F88  50DF               	movf	indf2,w,c
  2474  002F8A  0100               	movlb	0	; () banked
  2475  002F8C  6FBF               	movwf	??_GroupFlashMemory& (0+255),b
  2476  002F8E  51BF               	movf	??_GroupFlashMemory& (0+255),w,b
  2477  002F90  6E2C               	movwf	FlashReadUart@numOfSampleToRead,c
  2478  002F92  6A2D               	clrf	FlashReadUart@numOfSampleToRead+1,c
  2479  002F94  EC3B  F003         	call	_FlashReadUart	;wreg free
  2480                           
  2481                           ;MessageFunctions.c: 130: }
  2482                           
  2483                           ;MessageFunctions.c: 129: break;
  2484                           
  2485                           ;MessageFunctions.c: 128: default:
  2486                           
  2487                           ;MessageFunctions.c: 126: break;
  2488  002F98  0012               	return	
  2489  002F9A                     l1136:
  2490  002F9A  0100               	movlb	0	; () banked
  2491  002F9C  51C0               	movf	GroupFlashMemory@request& (0+255),w,b
  2492                           
  2493                           ; Switch size 1, requested type "space"
  2494                           ; Number of cases is 3, Range of values is 81 to 83
  2495                           ; switch strategies available:
  2496                           ; Name         Instructions Cycles
  2497                           ; simple_byte           10     6 (average)
  2498                           ;	Chosen strategy is simple_byte
  2499  002F9E  0A51               	xorlw	81	; case 81
  2500  002FA0  B4D8               	btfsc	status,2,c
  2501  002FA2  D7E8               	goto	l1137
  2502  002FA4  0A03               	xorlw	3	; case 82
  2503  002FA6  B4D8               	btfsc	status,2,c
  2504  002FA8  D7E8               	goto	l1139
  2505  002FAA  0A01               	xorlw	1	; case 83
  2506  002FAC  A4D8               	btfss	status,2,c
  2507  002FAE  0012               	return	
  2508  002FB0  D7E7               	goto	l1140
  2509  002FB2                     __end_of_GroupFlashMemory:
  2510                           	opt stack 0
  2511                           tosu	equ	0xFFF
  2512                           tosh	equ	0xFFE
  2513                           tosl	equ	0xFFD
  2514                           pclath	equ	0xFFA
  2515                           tblptru	equ	0xFF8
  2516                           tblptrh	equ	0xFF7
  2517                           tblptrl	equ	0xFF6
  2518                           tablat	equ	0xFF5
  2519                           postinc0	equ	0xFEE
  2520                           wreg	equ	0xFE8
  2521                           postdec1	equ	0xFE5
  2522                           fsr1l	equ	0xFE1
  2523                           indf2	equ	0xFDF
  2524                           postinc2	equ	0xFDE
  2525                           fsr2h	equ	0xFDA
  2526                           fsr2l	equ	0xFD9
  2527                           status	equ	0xFD8
  2528                           
  2529 ;; *************** function _GroupAdc *****************
  2530 ;; Defined at:
  2531 ;;		line 67 in file "MessageFunctions.c"
  2532 ;; Parameters:    Size  Location     Type
  2533 ;;  request         1    wreg     enum E12
  2534 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2535 ;; Auto vars:     Size  Location     Type
  2536 ;;  request         1   95[BANK0 ] enum E12
  2537 ;; Return value:  Size  Location     Type
  2538 ;;                  1    wreg      void 
  2539 ;; Registers used:
  2540 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2541 ;; Tracked objects:
  2542 ;;		On entry : 0/0
  2543 ;;		On exit  : 0/0
  2544 ;;		Unchanged: 0/0
  2545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2546 ;;      Params:         0       0       2       0       0       0       0
  2547 ;;      Locals:         0       1       0       0       0       0       0
  2548 ;;      Temps:          0       0       0       0       0       0       0
  2549 ;;      Totals:         0       1       2       0       0       0       0
  2550 ;;Total ram usage:        3 bytes
  2551 ;; Hardware stack levels used:    1
  2552 ;; Hardware stack levels required when called:    7
  2553 ;; This function calls:
  2554 ;;		_SetAdcOperationMode
  2555 ;;		_SetChannelMode
  2556 ;;		_SetConversionResultFormat
  2557 ;; This function is called by:
  2558 ;;		_readUartMessage
  2559 ;; This function uses a non-reentrant model
  2560 ;;
  2561                           
  2562                           	psect	text5
  2563  002EDE                     __ptext5:
  2564                           	opt stack 0
  2565  002EDE                     _GroupAdc:
  2566                           	opt stack 22
  2567                           
  2568                           ;incstack = 0
  2569                           ;GroupAdc@request stored from wreg
  2570  002EDE  0100               	movlb	0	; () banked
  2571  002EE0  6FBF               	movwf	GroupAdc@request& (0+255),b
  2572                           
  2573                           ;MessageFunctions.c: 69: switch (request)
  2574  002EE2  D015               	goto	l1117
  2575  002EE4                     
  2576                           ;MessageFunctions.c: 72: SetAdcOperationMode(data);
  2577  002EE4  C1C2  F02C         	movff	GroupAdc@data,SetAdcOperationMode@data
  2578  002EE8  C1C3  F02D         	movff	GroupAdc@data+1,SetAdcOperationMode@data+1
  2579  002EEC  ECB7  F01B         	call	_SetAdcOperationMode	;wreg free
  2580                           
  2581                           ;MessageFunctions.c: 73: break;
  2582  002EF0  0012               	return	
  2583  002EF2                     
  2584                           ;MessageFunctions.c: 76: SetChannelMode(data);
  2585  002EF2  C1C2  F02C         	movff	GroupAdc@data,SetChannelMode@data
  2586  002EF6  C1C3  F02D         	movff	GroupAdc@data+1,SetChannelMode@data+1
  2587  002EFA  ECEC  F019         	call	_SetChannelMode	;wreg free
  2588                           
  2589                           ;MessageFunctions.c: 77: break;
  2590  002EFE  0012               	return	
  2591  002F00                     
  2592                           ;MessageFunctions.c: 80: SetConversionResultFormat(data);
  2593  002F00  C1C2  F02C         	movff	GroupAdc@data,SetConversionResultFormat@data
  2594  002F04  C1C3  F02D         	movff	GroupAdc@data+1,SetConversionResultFormat@data+1
  2595  002F08  ECB1  F01B         	call	_SetConversionResultFormat	;wreg free
  2596                           
  2597                           ;MessageFunctions.c: 85: }
  2598                           
  2599                           ;MessageFunctions.c: 84: break;
  2600                           
  2601                           ;MessageFunctions.c: 83: default:
  2602                           
  2603                           ;MessageFunctions.c: 81: break;
  2604  002F0C  0012               	return	
  2605  002F0E                     l1117:
  2606  002F0E  0100               	movlb	0	; () banked
  2607  002F10  51BF               	movf	GroupAdc@request& (0+255),w,b
  2608                           
  2609                           ; Switch size 1, requested type "space"
  2610                           ; Number of cases is 3, Range of values is 49 to 51
  2611                           ; switch strategies available:
  2612                           ; Name         Instructions Cycles
  2613                           ; simple_byte           10     6 (average)
  2614                           ;	Chosen strategy is simple_byte
  2615  002F12  0A31               	xorlw	49	; case 49
  2616  002F14  B4D8               	btfsc	status,2,c
  2617  002F16  D7E6               	goto	l1118
  2618  002F18  0A03               	xorlw	3	; case 50
  2619  002F1A  B4D8               	btfsc	status,2,c
  2620  002F1C  D7EA               	goto	l1120
  2621  002F1E  0A01               	xorlw	1	; case 51
  2622  002F20  A4D8               	btfss	status,2,c
  2623  002F22  0012               	return	
  2624  002F24  D7ED               	goto	l1121
  2625  002F26                     __end_of_GroupAdc:
  2626                           	opt stack 0
  2627                           tosu	equ	0xFFF
  2628                           tosh	equ	0xFFE
  2629                           tosl	equ	0xFFD
  2630                           pclath	equ	0xFFA
  2631                           tblptru	equ	0xFF8
  2632                           tblptrh	equ	0xFF7
  2633                           tblptrl	equ	0xFF6
  2634                           tablat	equ	0xFF5
  2635                           postinc0	equ	0xFEE
  2636                           wreg	equ	0xFE8
  2637                           postdec1	equ	0xFE5
  2638                           fsr1l	equ	0xFE1
  2639                           indf2	equ	0xFDF
  2640                           postinc2	equ	0xFDE
  2641                           fsr2h	equ	0xFDA
  2642                           fsr2l	equ	0xFD9
  2643                           status	equ	0xFD8
  2644                           
  2645 ;; *************** function _GroupStatusAndVersion *****************
  2646 ;; Defined at:
  2647 ;;		line 38 in file "MessageFunctions.c"
  2648 ;; Parameters:    Size  Location     Type
  2649 ;;  request         1    wreg     enum E12
  2650 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2651 ;; Auto vars:     Size  Location     Type
  2652 ;;  request         1   95[BANK0 ] enum E12
  2653 ;; Return value:  Size  Location     Type
  2654 ;;                  1    wreg      void 
  2655 ;; Registers used:
  2656 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2657 ;; Tracked objects:
  2658 ;;		On entry : 0/0
  2659 ;;		On exit  : 0/0
  2660 ;;		Unchanged: 0/0
  2661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2662 ;;      Params:         0       0       2       0       0       0       0
  2663 ;;      Locals:         0       1       0       0       0       0       0
  2664 ;;      Temps:          0       0       0       0       0       0       0
  2665 ;;      Totals:         0       1       2       0       0       0       0
  2666 ;;Total ram usage:        3 bytes
  2667 ;; Hardware stack levels used:    1
  2668 ;; Hardware stack levels required when called:    7
  2669 ;; This function calls:
  2670 ;;		_GetCpldFwVersion
  2671 ;;		_GetMcuFwVersion
  2672 ;;		_GetMcuRunTime
  2673 ;;		_SetCpldFwVersion
  2674 ;;		_SetMcuFwVersion
  2675 ;; This function is called by:
  2676 ;;		_readUartMessage
  2677 ;; This function uses a non-reentrant model
  2678 ;;
  2679                           
  2680                           	psect	text6
  2681  002AEE                     __ptext6:
  2682                           	opt stack 0
  2683  002AEE                     _GroupStatusAndVersion:
  2684                           	opt stack 22
  2685                           
  2686                           ;incstack = 0
  2687                           ;GroupStatusAndVersion@request stored from wreg
  2688  002AEE  0100               	movlb	0	; () banked
  2689  002AF0  6FBF               	movwf	GroupStatusAndVersion@request& (0+255),b
  2690                           
  2691                           ;MessageFunctions.c: 40: switch (request)
  2692  002AF2  D017               	goto	l1106
  2693  002AF4                     
  2694                           ;MessageFunctions.c: 43: GetMcuFwVersion();
  2695  002AF4  EC96  F012         	call	_GetMcuFwVersion	;wreg free
  2696                           
  2697                           ;MessageFunctions.c: 44: break;
  2698  002AF8  0012               	return	
  2699  002AFA                     
  2700                           ;MessageFunctions.c: 47: SetMcuFwVersion(data);
  2701  002AFA  C1C2  F02C         	movff	GroupStatusAndVersion@data,SetMcuFwVersion@data
  2702  002AFE  C1C3  F02D         	movff	GroupStatusAndVersion@data+1,SetMcuFwVersion@data+1
  2703  002B02  EC4C  F019         	call	_SetMcuFwVersion	;wreg free
  2704                           
  2705                           ;MessageFunctions.c: 48: break;
  2706  002B06  0012               	return	
  2707  002B08                     
  2708                           ;MessageFunctions.c: 51: GetCpldFwVersion();
  2709  002B08  EC7D  F011         	call	_GetCpldFwVersion	;wreg free
  2710                           
  2711                           ;MessageFunctions.c: 52: break;
  2712  002B0C  0012               	return	
  2713  002B0E                     
  2714                           ;MessageFunctions.c: 55: SetCpldFwVersion(data);
  2715  002B0E  C1C2  F02C         	movff	GroupStatusAndVersion@data,SetCpldFwVersion@data
  2716  002B12  C1C3  F02D         	movff	GroupStatusAndVersion@data+1,SetCpldFwVersion@data+1
  2717  002B16  EC1D  F018         	call	_SetCpldFwVersion	;wreg free
  2718                           
  2719                           ;MessageFunctions.c: 56: break;
  2720  002B1A  0012               	return	
  2721  002B1C                     
  2722                           ;MessageFunctions.c: 59: GetMcuRunTime();
  2723  002B1C  EC6D  F00D         	call	_GetMcuRunTime	;wreg free
  2724                           
  2725                           ;MessageFunctions.c: 64: }
  2726                           
  2727                           ;MessageFunctions.c: 63: break;
  2728                           
  2729                           ;MessageFunctions.c: 62: default:
  2730                           
  2731                           ;MessageFunctions.c: 60: break;
  2732  002B20  0012               	return	
  2733  002B22                     l1106:
  2734  002B22  0100               	movlb	0	; () banked
  2735  002B24  51BF               	movf	GroupStatusAndVersion@request& (0+255),w,b
  2736                           
  2737                           ; Switch size 1, requested type "space"
  2738                           ; Number of cases is 5, Range of values is 33 to 37
  2739                           ; switch strategies available:
  2740                           ; Name         Instructions Cycles
  2741                           ; simple_byte           16     9 (average)
  2742                           ;	Chosen strategy is simple_byte
  2743  002B26  0A21               	xorlw	33	; case 33
  2744  002B28  B4D8               	btfsc	status,2,c
  2745  002B2A  D7F8               	goto	l1112
  2746  002B2C  0A03               	xorlw	3	; case 34
  2747  002B2E  B4D8               	btfsc	status,2,c
  2748  002B30  D7E1               	goto	l1107
  2749  002B32  0A01               	xorlw	1	; case 35
  2750  002B34  B4D8               	btfsc	status,2,c
  2751  002B36  D7E8               	goto	l1110
  2752  002B38  0A07               	xorlw	7	; case 36
  2753  002B3A  B4D8               	btfsc	status,2,c
  2754  002B3C  D7DE               	goto	l1109
  2755  002B3E  0A01               	xorlw	1	; case 37
  2756  002B40  A4D8               	btfss	status,2,c
  2757  002B42  0012               	return	
  2758  002B44  D7E4               	goto	l1111
  2759  002B46                     __end_of_GroupStatusAndVersion:
  2760                           	opt stack 0
  2761                           tosu	equ	0xFFF
  2762                           tosh	equ	0xFFE
  2763                           tosl	equ	0xFFD
  2764                           pclath	equ	0xFFA
  2765                           tblptru	equ	0xFF8
  2766                           tblptrh	equ	0xFF7
  2767                           tblptrl	equ	0xFF6
  2768                           tablat	equ	0xFF5
  2769                           postinc0	equ	0xFEE
  2770                           wreg	equ	0xFE8
  2771                           postdec1	equ	0xFE5
  2772                           fsr1l	equ	0xFE1
  2773                           indf2	equ	0xFDF
  2774                           postinc2	equ	0xFDE
  2775                           fsr2h	equ	0xFDA
  2776                           fsr2l	equ	0xFD9
  2777                           status	equ	0xFD8
  2778                           
  2779 ;; *************** function _GroupControlMcu *****************
  2780 ;; Defined at:
  2781 ;;		line 11 in file "MessageFunctions.c"
  2782 ;; Parameters:    Size  Location     Type
  2783 ;;  request         1    wreg     enum E12
  2784 ;;  data            3    0[BANK1 ] PTR unsigned char 
  2785 ;; Auto vars:     Size  Location     Type
  2786 ;;  request         1   95[BANK0 ] enum E12
  2787 ;; Return value:  Size  Location     Type
  2788 ;;                  1    wreg      void 
  2789 ;; Registers used:
  2790 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2791 ;; Tracked objects:
  2792 ;;		On entry : 0/0
  2793 ;;		On exit  : 0/0
  2794 ;;		Unchanged: 0/0
  2795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2796 ;;      Params:         0       0       2       0       0       0       0
  2797 ;;      Locals:         0       1       0       0       0       0       0
  2798 ;;      Temps:          0       0       0       0       0       0       0
  2799 ;;      Totals:         0       1       2       0       0       0       0
  2800 ;;Total ram usage:        3 bytes
  2801 ;; Hardware stack levels used:    1
  2802 ;; Hardware stack levels required when called:    7
  2803 ;; This function calls:
  2804 ;;		_ResetCpld
  2805 ;;		_ResetMcu
  2806 ;;		_testLeds
  2807 ;; This function is called by:
  2808 ;;		_readUartMessage
  2809 ;; This function uses a non-reentrant model
  2810 ;;
  2811                           
  2812                           	psect	text7
  2813  003100                     __ptext7:
  2814                           	opt stack 0
  2815  003100                     _GroupControlMcu:
  2816                           	opt stack 22
  2817                           
  2818                           ;incstack = 0
  2819                           ;GroupControlMcu@request stored from wreg
  2820  003100  0100               	movlb	0	; () banked
  2821  003102  6FBF               	movwf	GroupControlMcu@request& (0+255),b
  2822                           
  2823                           ;MessageFunctions.c: 13: switch (request)
  2824  003104  D009               	goto	l1095
  2825  003106                     
  2826                           ;MessageFunctions.c: 16: testLeds();
  2827  003106  ECC7  F013         	call	_testLeds	;wreg free
  2828                           
  2829                           ;MessageFunctions.c: 17: break;
  2830  00310A  0012               	return	
  2831  00310C                     
  2832                           ;MessageFunctions.c: 20: ResetMcu();
  2833  00310C  EC96  F01B         	call	_ResetMcu	;wreg free
  2834                           
  2835                           ;MessageFunctions.c: 21: break;
  2836  003110  0012               	return	
  2837  003112                     
  2838                           ;MessageFunctions.c: 24: ResetCpld();
  2839  003112  ECAB  F01B         	call	_ResetCpld	;wreg free
  2840                           
  2841                           ;MessageFunctions.c: 35: }
  2842                           
  2843                           ;MessageFunctions.c: 34: break;
  2844                           
  2845                           ;MessageFunctions.c: 33: default:
  2846                           
  2847                           ;MessageFunctions.c: 31: break;
  2848                           
  2849                           ;MessageFunctions.c: 30: case CONTROL_PA2_SET:
  2850                           
  2851                           ;MessageFunctions.c: 28: break;
  2852                           
  2853                           ;MessageFunctions.c: 27: case CONTROL_PA1_SET:
  2854                           
  2855                           ;MessageFunctions.c: 25: break;
  2856  003116  0012               	return	
  2857  003118                     l1095:
  2858  003118  0100               	movlb	0	; () banked
  2859  00311A  51BF               	movf	GroupControlMcu@request& (0+255),w,b
  2860                           
  2861                           ; Switch size 1, requested type "space"
  2862                           ; Number of cases is 5, Range of values is 17 to 21
  2863                           ; switch strategies available:
  2864                           ; Name         Instructions Cycles
  2865                           ; simple_byte           16     9 (average)
  2866                           ;	Chosen strategy is simple_byte
  2867  00311C  0A11               	xorlw	17	; case 17
  2868  00311E  B4D8               	btfsc	status,2,c
  2869  003120  D7F5               	goto	l1098
  2870  003122  0A03               	xorlw	3	; case 18
  2871  003124  B4D8               	btfsc	status,2,c
  2872  003126  D7F5               	goto	l1099
  2873  003128  0A01               	xorlw	1	; case 19
  2874  00312A  B4D8               	btfsc	status,2,c
  2875  00312C  0012               	return	
  2876  00312E  0A07               	xorlw	7	; case 20
  2877  003130  B4D8               	btfsc	status,2,c
  2878  003132  0012               	return	
  2879  003134  0A01               	xorlw	1	; case 21
  2880  003136  A4D8               	btfss	status,2,c
  2881  003138  0012               	return	
  2882  00313A  D7E5               	goto	l1096
  2883  00313C                     __end_of_GroupControlMcu:
  2884                           	opt stack 0
  2885                           tosu	equ	0xFFF
  2886                           tosh	equ	0xFFE
  2887                           tosl	equ	0xFFD
  2888                           pclath	equ	0xFFA
  2889                           tblptru	equ	0xFF8
  2890                           tblptrh	equ	0xFF7
  2891                           tblptrl	equ	0xFF6
  2892                           tablat	equ	0xFF5
  2893                           postinc0	equ	0xFEE
  2894                           wreg	equ	0xFE8
  2895                           postdec1	equ	0xFE5
  2896                           fsr1l	equ	0xFE1
  2897                           indf2	equ	0xFDF
  2898                           postinc2	equ	0xFDE
  2899                           fsr2h	equ	0xFDA
  2900                           fsr2l	equ	0xFD9
  2901                           status	equ	0xFD8
  2902                           
  2903 ;; *************** function _GroupSynthesizers *****************
  2904 ;; Defined at:
  2905 ;;		line 87 in file "MessageFunctions.c"
  2906 ;; Parameters:    Size  Location     Type
  2907 ;;  request         1    wreg     enum E12
  2908 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2909 ;; Auto vars:     Size  Location     Type
  2910 ;;  request         1   95[BANK0 ] enum E12
  2911 ;; Return value:  Size  Location     Type
  2912 ;;                  1    wreg      void 
  2913 ;; Registers used:
  2914 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2915 ;; Tracked objects:
  2916 ;;		On entry : 0/0
  2917 ;;		On exit  : 0/0
  2918 ;;		Unchanged: 0/0
  2919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2920 ;;      Params:         0       0       2       0       0       0       0
  2921 ;;      Locals:         0       1       0       0       0       0       0
  2922 ;;      Temps:          0       0       0       0       0       0       0
  2923 ;;      Totals:         0       1       2       0       0       0       0
  2924 ;;Total ram usage:        3 bytes
  2925 ;; Hardware stack levels used:    1
  2926 ;; Hardware stack levels required when called:    8
  2927 ;; This function calls:
  2928 ;;		_PLLUartInitialize
  2929 ;;		_UpdateRxFreq
  2930 ;;		_UpdateTxFreq
  2931 ;; This function is called by:
  2932 ;;		_readUartMessage
  2933 ;; This function uses a non-reentrant model
  2934 ;;
  2935                           
  2936                           	psect	text8
  2937  0029DA                     __ptext8:
  2938                           	opt stack 0
  2939  0029DA                     _GroupSynthesizers:
  2940                           	opt stack 21
  2941                           
  2942                           ;incstack = 0
  2943                           ;GroupSynthesizers@request stored from wreg
  2944  0029DA  0100               	movlb	0	; () banked
  2945  0029DC  6FBF               	movwf	GroupSynthesizers@request& (0+255),b
  2946                           
  2947                           ;MessageFunctions.c: 89: switch (request)
  2948  0029DE  D01C               	goto	l1126
  2949  0029E0                     
  2950                           ;MessageFunctions.c: 92: PLLUartInitialize(data);
  2951  0029E0  C1C2  F018         	movff	GroupSynthesizers@data,PLLUartInitialize@data
  2952  0029E4  C1C3  F019         	movff	GroupSynthesizers@data+1,PLLUartInitialize@data+1
  2953  0029E8  ECE2  F01B         	call	_PLLUartInitialize	;wreg free
  2954                           
  2955                           ;MessageFunctions.c: 93: break;
  2956  0029EC  0012               	return	
  2957  0029EE                     
  2958                           ;MessageFunctions.c: 96: PLLUartInitialize(data);
  2959  0029EE  C1C2  F018         	movff	GroupSynthesizers@data,PLLUartInitialize@data
  2960  0029F2  C1C3  F019         	movff	GroupSynthesizers@data+1,PLLUartInitialize@data+1
  2961  0029F6  ECE2  F01B         	call	_PLLUartInitialize	;wreg free
  2962                           
  2963                           ;MessageFunctions.c: 97: break;
  2964  0029FA  0012               	return	
  2965  0029FC                     
  2966                           ;MessageFunctions.c: 100: UpdateTxFreq(data);
  2967  0029FC  C1C2  F02F         	movff	GroupSynthesizers@data,UpdateTxFreq@data
  2968  002A00  C1C3  F030         	movff	GroupSynthesizers@data+1,UpdateTxFreq@data+1
  2969  002A04  EC7C  F016         	call	_UpdateTxFreq	;wreg free
  2970                           
  2971                           ;MessageFunctions.c: 101: break;
  2972  002A08  0012               	return	
  2973  002A0A                     
  2974                           ;MessageFunctions.c: 104: UpdateRxFreq(data);
  2975  002A0A  C1C2  F02F         	movff	GroupSynthesizers@data,UpdateRxFreq@data
  2976  002A0E  C1C3  F030         	movff	GroupSynthesizers@data+1,UpdateRxFreq@data+1
  2977  002A12  ECA5  F016         	call	_UpdateRxFreq	;wreg free
  2978                           
  2979                           ;MessageFunctions.c: 109: }
  2980                           
  2981                           ;MessageFunctions.c: 108: break;
  2982                           
  2983                           ;MessageFunctions.c: 107: default:
  2984                           
  2985                           ;MessageFunctions.c: 105: break;
  2986  002A16  0012               	return	
  2987  002A18                     l1126:
  2988  002A18  0100               	movlb	0	; () banked
  2989  002A1A  51BF               	movf	GroupSynthesizers@request& (0+255),w,b
  2990                           
  2991                           ; Switch size 1, requested type "space"
  2992                           ; Number of cases is 4, Range of values is 64 to 67
  2993                           ; switch strategies available:
  2994                           ; Name         Instructions Cycles
  2995                           ; simple_byte           13     7 (average)
  2996                           ;	Chosen strategy is simple_byte
  2997  002A1C  0A40               	xorlw	64	; case 64
  2998  002A1E  B4D8               	btfsc	status,2,c
  2999  002A20  D7DF               	goto	l1127
  3000  002A22  0A01               	xorlw	1	; case 65
  3001  002A24  B4D8               	btfsc	status,2,c
  3002  002A26  D7E3               	goto	l1129
  3003  002A28  0A03               	xorlw	3	; case 66
  3004  002A2A  B4D8               	btfsc	status,2,c
  3005  002A2C  D7E7               	goto	l1130
  3006  002A2E  0A01               	xorlw	1	; case 67
  3007  002A30  A4D8               	btfss	status,2,c
  3008  002A32  0012               	return	
  3009  002A34  D7EA               	goto	l1131
  3010  002A36                     __end_of_GroupSynthesizers:
  3011                           	opt stack 0
  3012                           tosu	equ	0xFFF
  3013                           tosh	equ	0xFFE
  3014                           tosl	equ	0xFFD
  3015                           pclath	equ	0xFFA
  3016                           tblptru	equ	0xFF8
  3017                           tblptrh	equ	0xFF7
  3018                           tblptrl	equ	0xFF6
  3019                           tablat	equ	0xFF5
  3020                           postinc0	equ	0xFEE
  3021                           wreg	equ	0xFE8
  3022                           postdec1	equ	0xFE5
  3023                           fsr1l	equ	0xFE1
  3024                           indf2	equ	0xFDF
  3025                           postinc2	equ	0xFDE
  3026                           fsr2h	equ	0xFDA
  3027                           fsr2l	equ	0xFD9
  3028                           status	equ	0xFD8
  3029                           
  3030 ;; *************** function _UpdateTxFreq *****************
  3031 ;; Defined at:
  3032 ;;		line 51 in file "SyntApp.c"
  3033 ;; Parameters:    Size  Location     Type
  3034 ;;  data            2   46[COMRAM] PTR unsigned char 
  3035 ;; Auto vars:     Size  Location     Type
  3036 ;;  regData         4   38[BANK0 ] unsigned long 
  3037 ;; Return value:  Size  Location     Type
  3038 ;;                  1    wreg      void 
  3039 ;; Registers used:
  3040 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3041 ;; Tracked objects:
  3042 ;;		On entry : 0/0
  3043 ;;		On exit  : 0/0
  3044 ;;		Unchanged: 0/0
  3045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3046 ;;      Params:         2       0       0       0       0       0       0
  3047 ;;      Locals:         0       4       0       0       0       0       0
  3048 ;;      Temps:          0       0       0       0       0       0       0
  3049 ;;      Totals:         2       4       0       0       0       0       0
  3050 ;;Total ram usage:        6 bytes
  3051 ;; Hardware stack levels used:    1
  3052 ;; Hardware stack levels required when called:    7
  3053 ;; This function calls:
  3054 ;;		_GetIntFromUartData
  3055 ;;		_SWSPI_send_word
  3056 ;;		_SendAckMessage
  3057 ;; This function is called by:
  3058 ;;		_GroupSynthesizers
  3059 ;; This function uses a non-reentrant model
  3060 ;;
  3061                           
  3062                           	psect	text9
  3063  002CF8                     __ptext9:
  3064                           	opt stack 0
  3065  002CF8                     _UpdateTxFreq:
  3066                           	opt stack 21
  3067                           
  3068                           ;SyntApp.c: 53: if(cntRegUpdate < 7)
  3069                           
  3070                           ;incstack = 0
  3071  002CF8  0E07               	movlw	7
  3072  002CFA  603B               	cpfslt	_cntRegUpdate,c
  3073  002CFC  D01E               	goto	l439
  3074                           
  3075                           ;SyntApp.c: 54: {
  3076                           ;SyntApp.c: 55: uint32_t regData = GetIntFromUartData(10, data);
  3077  002CFE  C02F  F066         	movff	UpdateTxFreq@data,GetIntFromUartData@data
  3078  002D02  C030  F067         	movff	UpdateTxFreq@data+1,GetIntFromUartData@data+1
  3079  002D06  0E0A               	movlw	10
  3080  002D08  EC1E  F00F         	call	_GetIntFromUartData
  3081  002D0C  C066  F086         	movff	?_GetIntFromUartData,UpdateTxFreq@regData
  3082  002D10  C067  F087         	movff	?_GetIntFromUartData+1,UpdateTxFreq@regData+1
  3083  002D14  C068  F088         	movff	?_GetIntFromUartData+2,UpdateTxFreq@regData+2
  3084  002D18  C069  F089         	movff	?_GetIntFromUartData+3,UpdateTxFreq@regData+3
  3085                           
  3086                           ;SyntApp.c: 56: SWSPI_send_word(SYNTH_TX, regData, 3);
  3087  002D1C  C086  F026         	movff	UpdateTxFreq@regData,SWSPI_send_word@data
  3088  002D20  C087  F027         	movff	UpdateTxFreq@regData+1,SWSPI_send_word@data+1
  3089  002D24  C088  F028         	movff	UpdateTxFreq@regData+2,SWSPI_send_word@data+2
  3090  002D28  C089  F029         	movff	UpdateTxFreq@regData+3,SWSPI_send_word@data+3
  3091  002D2C  0E03               	movlw	3
  3092  002D2E  6E2A               	movwf	SWSPI_send_word@dataSize,c
  3093  002D30  0E00               	movlw	0
  3094  002D32  ECE7  F010         	call	_SWSPI_send_word
  3095                           
  3096                           ;SyntApp.c: 57: cntRegUpdate ++;
  3097  002D36  2A3B               	incf	_cntRegUpdate,f,c
  3098                           
  3099                           ;SyntApp.c: 58: }
  3100  002D38  0012               	return	
  3101  002D3A                     l439:
  3102                           
  3103                           ;SyntApp.c: 60: else
  3104                           ;SyntApp.c: 61: {
  3105                           ;SyntApp.c: 62: cntRegUpdate = 0;
  3106  002D3A  0E00               	movlw	0
  3107  002D3C  6E3B               	movwf	_cntRegUpdate,c
  3108                           
  3109                           ;SyntApp.c: 63: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_DOWN_SET);
  3110  002D3E  0E42               	movlw	66
  3111  002D40  6E24               	movwf	SendAckMessage@inRequest,c
  3112  002D42  0E04               	movlw	4
  3113  002D44  ECF7  F016         	call	_SendAckMessage
  3114  002D48  0012               	return	
  3115  002D4A                     __end_of_UpdateTxFreq:
  3116                           	opt stack 0
  3117                           tosu	equ	0xFFF
  3118                           tosh	equ	0xFFE
  3119                           tosl	equ	0xFFD
  3120                           pclath	equ	0xFFA
  3121                           tblptru	equ	0xFF8
  3122                           tblptrh	equ	0xFF7
  3123                           tblptrl	equ	0xFF6
  3124                           tablat	equ	0xFF5
  3125                           postinc0	equ	0xFEE
  3126                           wreg	equ	0xFE8
  3127                           postdec1	equ	0xFE5
  3128                           fsr1l	equ	0xFE1
  3129                           indf2	equ	0xFDF
  3130                           postinc2	equ	0xFDE
  3131                           fsr2h	equ	0xFDA
  3132                           fsr2l	equ	0xFD9
  3133                           status	equ	0xFD8
  3134                           
  3135 ;; *************** function _UpdateRxFreq *****************
  3136 ;; Defined at:
  3137 ;;		line 68 in file "SyntApp.c"
  3138 ;; Parameters:    Size  Location     Type
  3139 ;;  data            2   46[COMRAM] PTR unsigned char 
  3140 ;; Auto vars:     Size  Location     Type
  3141 ;;  regData         4   38[BANK0 ] unsigned long 
  3142 ;; Return value:  Size  Location     Type
  3143 ;;                  1    wreg      void 
  3144 ;; Registers used:
  3145 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3146 ;; Tracked objects:
  3147 ;;		On entry : 0/0
  3148 ;;		On exit  : 0/0
  3149 ;;		Unchanged: 0/0
  3150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3151 ;;      Params:         2       0       0       0       0       0       0
  3152 ;;      Locals:         0       4       0       0       0       0       0
  3153 ;;      Temps:          0       0       0       0       0       0       0
  3154 ;;      Totals:         2       4       0       0       0       0       0
  3155 ;;Total ram usage:        6 bytes
  3156 ;; Hardware stack levels used:    1
  3157 ;; Hardware stack levels required when called:    7
  3158 ;; This function calls:
  3159 ;;		_GetIntFromUartData
  3160 ;;		_SWSPI_send_word
  3161 ;;		_SendAckMessage
  3162 ;; This function is called by:
  3163 ;;		_GroupSynthesizers
  3164 ;; This function uses a non-reentrant model
  3165 ;;
  3166                           
  3167                           	psect	text10
  3168  002D4A                     __ptext10:
  3169                           	opt stack 0
  3170  002D4A                     _UpdateRxFreq:
  3171                           	opt stack 21
  3172                           
  3173                           ;SyntApp.c: 70: if(cntRegUpdate < 7)
  3174                           
  3175                           ;incstack = 0
  3176  002D4A  0E07               	movlw	7
  3177  002D4C  603B               	cpfslt	_cntRegUpdate,c
  3178  002D4E  D01E               	goto	l444
  3179                           
  3180                           ;SyntApp.c: 71: {
  3181                           ;SyntApp.c: 72: uint32_t regData = GetIntFromUartData(10, data);
  3182  002D50  C02F  F066         	movff	UpdateRxFreq@data,GetIntFromUartData@data
  3183  002D54  C030  F067         	movff	UpdateRxFreq@data+1,GetIntFromUartData@data+1
  3184  002D58  0E0A               	movlw	10
  3185  002D5A  EC1E  F00F         	call	_GetIntFromUartData
  3186  002D5E  C066  F086         	movff	?_GetIntFromUartData,UpdateRxFreq@regData
  3187  002D62  C067  F087         	movff	?_GetIntFromUartData+1,UpdateRxFreq@regData+1
  3188  002D66  C068  F088         	movff	?_GetIntFromUartData+2,UpdateRxFreq@regData+2
  3189  002D6A  C069  F089         	movff	?_GetIntFromUartData+3,UpdateRxFreq@regData+3
  3190                           
  3191                           ;SyntApp.c: 73: SWSPI_send_word(SYNTH_RX, regData, 3);
  3192  002D6E  C086  F026         	movff	UpdateRxFreq@regData,SWSPI_send_word@data
  3193  002D72  C087  F027         	movff	UpdateRxFreq@regData+1,SWSPI_send_word@data+1
  3194  002D76  C088  F028         	movff	UpdateRxFreq@regData+2,SWSPI_send_word@data+2
  3195  002D7A  C089  F029         	movff	UpdateRxFreq@regData+3,SWSPI_send_word@data+3
  3196  002D7E  0E03               	movlw	3
  3197  002D80  6E2A               	movwf	SWSPI_send_word@dataSize,c
  3198  002D82  0E01               	movlw	1
  3199  002D84  ECE7  F010         	call	_SWSPI_send_word
  3200                           
  3201                           ;SyntApp.c: 74: cntRegUpdate ++;
  3202  002D88  2A3B               	incf	_cntRegUpdate,f,c
  3203                           
  3204                           ;SyntApp.c: 75: }
  3205  002D8A  0012               	return	
  3206  002D8C                     l444:
  3207                           
  3208                           ;SyntApp.c: 77: else
  3209                           ;SyntApp.c: 78: {
  3210                           ;SyntApp.c: 79: cntRegUpdate = 0;
  3211  002D8C  0E00               	movlw	0
  3212  002D8E  6E3B               	movwf	_cntRegUpdate,c
  3213                           
  3214                           ;SyntApp.c: 80: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_UP_SET);
  3215  002D90  0E43               	movlw	67
  3216  002D92  6E24               	movwf	SendAckMessage@inRequest,c
  3217  002D94  0E04               	movlw	4
  3218  002D96  ECF7  F016         	call	_SendAckMessage
  3219  002D9A  0012               	return	
  3220  002D9C                     __end_of_UpdateRxFreq:
  3221                           	opt stack 0
  3222                           tosu	equ	0xFFF
  3223                           tosh	equ	0xFFE
  3224                           tosl	equ	0xFFD
  3225                           pclath	equ	0xFFA
  3226                           tblptru	equ	0xFF8
  3227                           tblptrh	equ	0xFF7
  3228                           tblptrl	equ	0xFF6
  3229                           tablat	equ	0xFF5
  3230                           postinc0	equ	0xFEE
  3231                           wreg	equ	0xFE8
  3232                           postdec1	equ	0xFE5
  3233                           fsr1l	equ	0xFE1
  3234                           indf2	equ	0xFDF
  3235                           postinc2	equ	0xFDE
  3236                           fsr2h	equ	0xFDA
  3237                           fsr2l	equ	0xFD9
  3238                           status	equ	0xFD8
  3239                           
  3240 ;; *************** function _PLLUartInitialize *****************
  3241 ;; Defined at:
  3242 ;;		line 42 in file "SyntApp.c"
  3243 ;; Parameters:    Size  Location     Type
  3244 ;;  data            2   23[COMRAM] PTR unsigned char 
  3245 ;; Auto vars:     Size  Location     Type
  3246 ;;		None
  3247 ;; Return value:  Size  Location     Type
  3248 ;;                  1    wreg      void 
  3249 ;; Registers used:
  3250 ;;		None
  3251 ;; Tracked objects:
  3252 ;;		On entry : 0/0
  3253 ;;		On exit  : 0/0
  3254 ;;		Unchanged: 0/0
  3255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3256 ;;      Params:         2       0       0       0       0       0       0
  3257 ;;      Locals:         0       0       0       0       0       0       0
  3258 ;;      Temps:          0       0       0       0       0       0       0
  3259 ;;      Totals:         2       0       0       0       0       0       0
  3260 ;;Total ram usage:        2 bytes
  3261 ;; Hardware stack levels used:    1
  3262 ;; Hardware stack levels required when called:    3
  3263 ;; This function calls:
  3264 ;;		Nothing
  3265 ;; This function is called by:
  3266 ;;		_GroupSynthesizers
  3267 ;; This function uses a non-reentrant model
  3268 ;;
  3269                           
  3270                           	psect	text11
  3271  0037C4                     __ptext11:
  3272                           	opt stack 0
  3273  0037C4                     _PLLUartInitialize:
  3274                           	opt stack 25
  3275                           
  3276                           ;incstack = 0
  3277  0037C4  0012               	return		;funcret
  3278  0037C6                     __end_of_PLLUartInitialize:
  3279                           	opt stack 0
  3280                           tosu	equ	0xFFF
  3281                           tosh	equ	0xFFE
  3282                           tosl	equ	0xFFD
  3283                           pclath	equ	0xFFA
  3284                           tblptru	equ	0xFF8
  3285                           tblptrh	equ	0xFF7
  3286                           tblptrl	equ	0xFF6
  3287                           tablat	equ	0xFF5
  3288                           postinc0	equ	0xFEE
  3289                           wreg	equ	0xFE8
  3290                           postdec1	equ	0xFE5
  3291                           fsr1l	equ	0xFE1
  3292                           indf2	equ	0xFDF
  3293                           postinc2	equ	0xFDE
  3294                           fsr2h	equ	0xFDA
  3295                           fsr2l	equ	0xFD9
  3296                           status	equ	0xFD8
  3297                           
  3298 ;; *************** function _SetMcuFwVersion *****************
  3299 ;; Defined at:
  3300 ;;		line 15 in file "SystemStatus.c"
  3301 ;; Parameters:    Size  Location     Type
  3302 ;;  data            2   43[COMRAM] PTR unsigned char 
  3303 ;; Auto vars:     Size  Location     Type
  3304 ;;  idx             1   45[COMRAM] unsigned char 
  3305 ;; Return value:  Size  Location     Type
  3306 ;;                  1    wreg      void 
  3307 ;; Registers used:
  3308 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3309 ;; Tracked objects:
  3310 ;;		On entry : 0/0
  3311 ;;		On exit  : 0/0
  3312 ;;		Unchanged: 0/0
  3313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3314 ;;      Params:         2       0       0       0       0       0       0
  3315 ;;      Locals:         1       0       0       0       0       0       0
  3316 ;;      Temps:          0       0       0       0       0       0       0
  3317 ;;      Totals:         3       0       0       0       0       0       0
  3318 ;;Total ram usage:        3 bytes
  3319 ;; Hardware stack levels used:    1
  3320 ;; Hardware stack levels required when called:    6
  3321 ;; This function calls:
  3322 ;;		_EepromWrite
  3323 ;;		_SendAckMessage
  3324 ;; This function is called by:
  3325 ;;		_GroupStatusAndVersion
  3326 ;; This function uses a non-reentrant model
  3327 ;;
  3328                           
  3329                           	psect	text12
  3330  003298                     __ptext12:
  3331                           	opt stack 0
  3332  003298                     _SetMcuFwVersion:
  3333                           	opt stack 22
  3334                           
  3335                           ;SystemStatus.c: 17: for(uint8_t idx = 0; idx < (0x4); idx++)
  3336                           
  3337                           ;incstack = 0
  3338  003298  0E00               	movlw	0
  3339  00329A  6E2E               	movwf	SetMcuFwVersion@idx,c
  3340  00329C                     l7411:
  3341  00329C  0E03               	movlw	3
  3342  00329E  642E               	cpfsgt	SetMcuFwVersion@idx,c
  3343  0032A0  D001               	goto	l1279
  3344  0032A2  D00F               	goto	u7440
  3345  0032A4                     l1279:
  3346                           
  3347                           ;SystemStatus.c: 18: {
  3348                           ;SystemStatus.c: 19: EepromWrite(idx, data[idx]);
  3349  0032A4  502E               	movf	SetMcuFwVersion@idx,w,c
  3350  0032A6  0D01               	mullw	1
  3351  0032A8  50F3               	movf	prodl,w,c
  3352  0032AA  242C               	addwf	SetMcuFwVersion@data,w,c
  3353  0032AC  6ED9               	movwf	fsr2l,c
  3354  0032AE  50F4               	movf	prodh,w,c
  3355  0032B0  202D               	addwfc	SetMcuFwVersion@data+1,w,c
  3356  0032B2  6EDA               	movwf	fsr2h,c
  3357  0032B4  50DF               	movf	indf2,w,c
  3358  0032B6  6E1B               	movwf	EepromWrite@data,c
  3359  0032B8  502E               	movf	SetMcuFwVersion@idx,w,c
  3360  0032BA  EC8F  F01B         	call	_EepromWrite
  3361  0032BE  2A2E               	incf	SetMcuFwVersion@idx,f,c
  3362  0032C0  D7ED               	goto	l7411
  3363  0032C2                     u7440:
  3364                           
  3365                           ;SystemStatus.c: 20: }
  3366                           ;SystemStatus.c: 23: SendAckMessage((MSG_GROUPS)MCU_STATUS_VERSION_MSG, (MSG_REQUEST)STA
      +                          TUS_SET_MCU_FW_VERSION);
  3367  0032C2  0E24               	movlw	36
  3368  0032C4  6E24               	movwf	SendAckMessage@inRequest,c
  3369  0032C6  0E02               	movlw	2
  3370  0032C8  ECF7  F016         	call	_SendAckMessage
  3371  0032CC  0012               	return		;funcret
  3372  0032CE                     __end_of_SetMcuFwVersion:
  3373                           	opt stack 0
  3374                           tosu	equ	0xFFF
  3375                           tosh	equ	0xFFE
  3376                           tosl	equ	0xFFD
  3377                           pclath	equ	0xFFA
  3378                           tblptru	equ	0xFF8
  3379                           tblptrh	equ	0xFF7
  3380                           tblptrl	equ	0xFF6
  3381                           tablat	equ	0xFF5
  3382                           prodh	equ	0xFF4
  3383                           prodl	equ	0xFF3
  3384                           postinc0	equ	0xFEE
  3385                           wreg	equ	0xFE8
  3386                           postdec1	equ	0xFE5
  3387                           fsr1l	equ	0xFE1
  3388                           indf2	equ	0xFDF
  3389                           postinc2	equ	0xFDE
  3390                           fsr2h	equ	0xFDA
  3391                           fsr2l	equ	0xFD9
  3392                           status	equ	0xFD8
  3393                           
  3394 ;; *************** function _SetCpldFwVersion *****************
  3395 ;; Defined at:
  3396 ;;		line 49 in file "SystemStatus.c"
  3397 ;; Parameters:    Size  Location     Type
  3398 ;;  data            2   43[COMRAM] PTR unsigned char 
  3399 ;; Auto vars:     Size  Location     Type
  3400 ;;  idx             2   45[COMRAM] int 
  3401 ;; Return value:  Size  Location     Type
  3402 ;;                  1    wreg      void 
  3403 ;; Registers used:
  3404 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3405 ;; Tracked objects:
  3406 ;;		On entry : 0/0
  3407 ;;		On exit  : 0/0
  3408 ;;		Unchanged: 0/0
  3409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3410 ;;      Params:         2       0       0       0       0       0       0
  3411 ;;      Locals:         2       0       0       0       0       0       0
  3412 ;;      Temps:          0       0       0       0       0       0       0
  3413 ;;      Totals:         4       0       0       0       0       0       0
  3414 ;;Total ram usage:        4 bytes
  3415 ;; Hardware stack levels used:    1
  3416 ;; Hardware stack levels required when called:    6
  3417 ;; This function calls:
  3418 ;;		_EepromWrite
  3419 ;;		_SendAckMessage
  3420 ;; This function is called by:
  3421 ;;		_GroupStatusAndVersion
  3422 ;; This function uses a non-reentrant model
  3423 ;;
  3424                           
  3425                           	psect	text13
  3426  00303A                     __ptext13:
  3427                           	opt stack 0
  3428  00303A                     _SetCpldFwVersion:
  3429                           	opt stack 22
  3430                           
  3431                           ;SystemStatus.c: 51: for(int idx = 0; idx < (0x4); idx++)
  3432                           
  3433                           ;incstack = 0
  3434  00303A  0E00               	movlw	0
  3435  00303C  6E2F               	movwf	SetCpldFwVersion@idx+1,c
  3436  00303E  0E00               	movlw	0
  3437  003040  6E2E               	movwf	SetCpldFwVersion@idx,c
  3438  003042                     l7451:
  3439  003042  BE2F               	btfsc	SetCpldFwVersion@idx+1,7,c
  3440  003044  D006               	goto	l1289
  3441  003046  502F               	movf	SetCpldFwVersion@idx+1,w,c
  3442  003048  E113               	bnz	l7461
  3443  00304A  0E04               	movlw	4
  3444  00304C  5C2E               	subwf	SetCpldFwVersion@idx,w,c
  3445  00304E  B0D8               	btfsc	status,0,c
  3446  003050  D00F               	goto	u7480
  3447  003052                     l1289:
  3448                           
  3449                           ;SystemStatus.c: 52: {
  3450                           ;SystemStatus.c: 53: EepromWrite((0x4) + idx, data[idx]);
  3451  003052  502E               	movf	SetCpldFwVersion@idx,w,c
  3452  003054  242C               	addwf	SetCpldFwVersion@data,w,c
  3453  003056  6ED9               	movwf	fsr2l,c
  3454  003058  502F               	movf	SetCpldFwVersion@idx+1,w,c
  3455  00305A  202D               	addwfc	SetCpldFwVersion@data+1,w,c
  3456  00305C  6EDA               	movwf	fsr2h,c
  3457  00305E  50DF               	movf	indf2,w,c
  3458  003060  6E1B               	movwf	EepromWrite@data,c
  3459  003062  502E               	movf	SetCpldFwVersion@idx,w,c
  3460  003064  0F04               	addlw	4
  3461  003066  EC8F  F01B         	call	_EepromWrite
  3462  00306A  4A2E               	infsnz	SetCpldFwVersion@idx,f,c
  3463  00306C  2A2F               	incf	SetCpldFwVersion@idx+1,f,c
  3464  00306E  D7E9               	goto	l7451
  3465  003070                     u7480:
  3466  003070                     l7461:
  3467                           
  3468                           ;SystemStatus.c: 54: }
  3469                           ;SystemStatus.c: 55: SendAckMessage((MSG_GROUPS)MCU_STATUS_VERSION_MSG, (MSG_REQUEST)STA
      +                          TUS_SET_CPLD_FW_VERSION);
  3470  003070  0E25               	movlw	37
  3471  003072  6E24               	movwf	SendAckMessage@inRequest,c
  3472  003074  0E02               	movlw	2
  3473  003076  ECF7  F016         	call	_SendAckMessage
  3474  00307A  0012               	return		;funcret
  3475  00307C                     __end_of_SetCpldFwVersion:
  3476                           	opt stack 0
  3477                           tosu	equ	0xFFF
  3478                           tosh	equ	0xFFE
  3479                           tosl	equ	0xFFD
  3480                           pclath	equ	0xFFA
  3481                           tblptru	equ	0xFF8
  3482                           tblptrh	equ	0xFF7
  3483                           tblptrl	equ	0xFF6
  3484                           tablat	equ	0xFF5
  3485                           prodh	equ	0xFF4
  3486                           prodl	equ	0xFF3
  3487                           postinc0	equ	0xFEE
  3488                           wreg	equ	0xFE8
  3489                           postdec1	equ	0xFE5
  3490                           fsr1l	equ	0xFE1
  3491                           indf2	equ	0xFDF
  3492                           postinc2	equ	0xFDE
  3493                           fsr2h	equ	0xFDA
  3494                           fsr2l	equ	0xFD9
  3495                           status	equ	0xFD8
  3496                           
  3497 ;; *************** function _GetMcuRunTime *****************
  3498 ;; Defined at:
  3499 ;;		line 92 in file "SystemStatus.c"
  3500 ;; Parameters:    Size  Location     Type
  3501 ;;		None
  3502 ;; Auto vars:     Size  Location     Type
  3503 ;;  idx             2   13[BANK0 ] int 
  3504 ;;  TxMsg           9    0[BANK0 ] unsigned char [9]
  3505 ;;  tempRunTime     4    9[BANK0 ] unsigned long 
  3506 ;; Return value:  Size  Location     Type
  3507 ;;                  1    wreg      void 
  3508 ;; Registers used:
  3509 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3510 ;; Tracked objects:
  3511 ;;		On entry : 0/0
  3512 ;;		On exit  : 0/0
  3513 ;;		Unchanged: 0/0
  3514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3515 ;;      Params:         0       0       0       0       0       0       0
  3516 ;;      Locals:         0      15       0       0       0       0       0
  3517 ;;      Temps:          2       0       0       0       0       0       0
  3518 ;;      Totals:         2      15       0       0       0       0       0
  3519 ;;Total ram usage:       17 bytes
  3520 ;; Hardware stack levels used:    1
  3521 ;; Hardware stack levels required when called:    5
  3522 ;; This function calls:
  3523 ;;		_WriteUartMessage
  3524 ;;		___lldiv
  3525 ;;		___llmod
  3526 ;;		_crc8
  3527 ;; This function is called by:
  3528 ;;		_GroupStatusAndVersion
  3529 ;; This function uses a non-reentrant model
  3530 ;;
  3531                           
  3532                           	psect	text14
  3533  001ADA                     __ptext14:
  3534                           	opt stack 0
  3535  001ADA                     _GetMcuRunTime:
  3536                           	opt stack 23
  3537                           
  3538                           ;SystemStatus.c: 95: char TxMsg[(0x4) + (0x4) + 1];
  3539                           ;SystemStatus.c: 98: TxMsg[(0)] = (0x24);
  3540                           
  3541                           ;incstack = 0
  3542  001ADA  0E24               	movlw	36
  3543  001ADC  0100               	movlb	0	; () banked
  3544  001ADE  6F60               	movwf	GetMcuRunTime@TxMsg& (0+255),b
  3545                           
  3546                           ;SystemStatus.c: 99: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  3547  001AE0  0E02               	movlw	2
  3548  001AE2  6F61               	movwf	(GetMcuRunTime@TxMsg+1)& (0+255),b
  3549                           
  3550                           ;SystemStatus.c: 100: TxMsg[(2)] = STATUS_MCU_RUN_TIME;
  3551  001AE4  0E21               	movlw	33
  3552  001AE6  6F62               	movwf	(GetMcuRunTime@TxMsg+2)& (0+255),b
  3553                           
  3554                           ;SystemStatus.c: 101: TxMsg[(3)] = (0x4);
  3555  001AE8  0E04               	movlw	4
  3556  001AEA  6F63               	movwf	(GetMcuRunTime@TxMsg+3)& (0+255),b
  3557                           
  3558                           ; BSR set to: 0
  3559                           ;SystemStatus.c: 103: uint32_t tempRunTime = mcuRunTimeIn5SecTicks;
  3560  001AEC  C0C1  F069         	movff	_mcuRunTimeIn5SecTicks,GetMcuRunTime@tempRunTime
  3561  001AF0  C0C2  F06A         	movff	_mcuRunTimeIn5SecTicks+1,GetMcuRunTime@tempRunTime+1
  3562  001AF4  C0C3  F06B         	movff	_mcuRunTimeIn5SecTicks+2,GetMcuRunTime@tempRunTime+2
  3563  001AF8  C0C4  F06C         	movff	_mcuRunTimeIn5SecTicks+3,GetMcuRunTime@tempRunTime+3
  3564                           
  3565                           ;SystemStatus.c: 106: for(int idx = 0; idx < (0x4); idx++)
  3566  001AFC  0E00               	movlw	0
  3567  001AFE  6F6E               	movwf	(GetMcuRunTime@idx+1)& (0+255),b
  3568  001B00  0E00               	movlw	0
  3569  001B02  6F6D               	movwf	GetMcuRunTime@idx& (0+255),b
  3570  001B04                     l7467:
  3571                           
  3572                           ; BSR set to: 0
  3573  001B04  BF6E               	btfsc	(GetMcuRunTime@idx+1)& (0+255),7,b
  3574  001B06  D006               	goto	l1305
  3575  001B08  516E               	movf	(GetMcuRunTime@idx+1)& (0+255),w,b
  3576  001B0A  E142               	bnz	l7479
  3577  001B0C  0E04               	movlw	4
  3578  001B0E  5D6D               	subwf	GetMcuRunTime@idx& (0+255),w,b
  3579  001B10  B0D8               	btfsc	status,0,c
  3580  001B12  D03E               	goto	u7500
  3581  001B14                     l1305:
  3582                           
  3583                           ; BSR set to: 0
  3584                           ;SystemStatus.c: 107: {
  3585                           ;SystemStatus.c: 108: TxMsg[(0x4) + idx] = tempRunTime % 10;
  3586                           
  3587                           ; BSR set to: 0
  3588  001B14  0E04               	movlw	4
  3589  001B16  256D               	addwf	GetMcuRunTime@idx& (0+255),w,b
  3590  001B18  6E25               	movwf	??_GetMcuRunTime& (0+255),c
  3591  001B1A  0E00               	movlw	0
  3592  001B1C  216E               	addwfc	(GetMcuRunTime@idx+1)& (0+255),w,b
  3593  001B1E  6E26               	movwf	(??_GetMcuRunTime+1)& (0+255),c
  3594  001B20  0E60               	movlw	low GetMcuRunTime@TxMsg
  3595  001B22  2425               	addwf	??_GetMcuRunTime,w,c
  3596  001B24  6ED9               	movwf	fsr2l,c
  3597  001B26  0E00               	movlw	high GetMcuRunTime@TxMsg
  3598  001B28  2026               	addwfc	??_GetMcuRunTime+1,w,c
  3599  001B2A  6EDA               	movwf	fsr2h,c
  3600  001B2C  C069  F018         	movff	GetMcuRunTime@tempRunTime,___llmod@dividend
  3601  001B30  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___llmod@dividend+1
  3602  001B34  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___llmod@dividend+2
  3603  001B38  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___llmod@dividend+3
  3604  001B3C  0E0A               	movlw	10
  3605  001B3E  6E1C               	movwf	___llmod@divisor,c
  3606  001B40  0E00               	movlw	0
  3607  001B42  6E1D               	movwf	___llmod@divisor+1,c
  3608  001B44  0E00               	movlw	0
  3609  001B46  6E1E               	movwf	___llmod@divisor+2,c
  3610  001B48  0E00               	movlw	0
  3611  001B4A  6E1F               	movwf	___llmod@divisor+3,c
  3612  001B4C  ECFC  F013         	call	___llmod	;wreg free
  3613  001B50  5018               	movf	?___llmod,w,c
  3614  001B52  6EDF               	movwf	indf2,c
  3615                           
  3616                           ;SystemStatus.c: 109: tempRunTime /= 10;
  3617  001B54  C069  F018         	movff	GetMcuRunTime@tempRunTime,___lldiv@dividend
  3618  001B58  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___lldiv@dividend+1
  3619  001B5C  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___lldiv@dividend+2
  3620  001B60  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___lldiv@dividend+3
  3621  001B64  0E0A               	movlw	10
  3622  001B66  6E1C               	movwf	___lldiv@divisor,c
  3623  001B68  0E00               	movlw	0
  3624  001B6A  6E1D               	movwf	___lldiv@divisor+1,c
  3625  001B6C  0E00               	movlw	0
  3626  001B6E  6E1E               	movwf	___lldiv@divisor+2,c
  3627  001B70  0E00               	movlw	0
  3628  001B72  6E1F               	movwf	___lldiv@divisor+3,c
  3629  001B74  EC55  F012         	call	___lldiv	;wreg free
  3630  001B78  C018  F069         	movff	?___lldiv,GetMcuRunTime@tempRunTime
  3631  001B7C  C019  F06A         	movff	?___lldiv+1,GetMcuRunTime@tempRunTime+1
  3632  001B80  C01A  F06B         	movff	?___lldiv+2,GetMcuRunTime@tempRunTime+2
  3633  001B84  C01B  F06C         	movff	?___lldiv+3,GetMcuRunTime@tempRunTime+3
  3634  001B88  0100               	movlb	0	; () banked
  3635  001B8A  4B6D               	infsnz	GetMcuRunTime@idx& (0+255),f,b
  3636  001B8C  2B6E               	incf	(GetMcuRunTime@idx+1)& (0+255),f,b
  3637  001B8E  D7BA               	goto	l7467
  3638  001B90                     u7500:
  3639  001B90                     l7479:
  3640                           
  3641                           ; BSR set to: 0
  3642                           ;SystemStatus.c: 110: }
  3643                           ;SystemStatus.c: 112: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  3644  001B90  0E60               	movlw	low GetMcuRunTime@TxMsg
  3645  001B92  6E18               	movwf	crc8@dataArray,c
  3646  001B94  0E00               	movlw	high GetMcuRunTime@TxMsg
  3647  001B96  6E19               	movwf	crc8@dataArray+1,c
  3648  001B98  0E00               	movlw	0
  3649  001B9A  6E1B               	movwf	crc8@dataSize+1,c
  3650  001B9C  0E08               	movlw	8
  3651  001B9E  6E1A               	movwf	crc8@dataSize,c
  3652  001BA0  EC48  F017         	call	_crc8	;wreg free
  3653  001BA4  0100               	movlb	0	; () banked
  3654  001BA6  6F68               	movwf	(GetMcuRunTime@TxMsg+8)& (0+255),b
  3655                           
  3656                           ; BSR set to: 0
  3657                           ;SystemStatus.c: 114: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  3658  001BA8  0E60               	movlw	low GetMcuRunTime@TxMsg
  3659  001BAA  6E19               	movwf	WriteUartMessage@dataBuf,c
  3660  001BAC  0E00               	movlw	high GetMcuRunTime@TxMsg
  3661  001BAE  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  3662  001BB0  0E00               	movlw	0
  3663  001BB2  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  3664  001BB4  0E09               	movlw	9
  3665  001BB6  6E1B               	movwf	WriteUartMessage@dataSize,c
  3666  001BB8  EC9D  F019         	call	_WriteUartMessage	;wreg free
  3667  001BBC  0012               	return		;funcret
  3668  001BBE                     __end_of_GetMcuRunTime:
  3669                           	opt stack 0
  3670                           tosu	equ	0xFFF
  3671                           tosh	equ	0xFFE
  3672                           tosl	equ	0xFFD
  3673                           pclath	equ	0xFFA
  3674                           tblptru	equ	0xFF8
  3675                           tblptrh	equ	0xFF7
  3676                           tblptrl	equ	0xFF6
  3677                           tablat	equ	0xFF5
  3678                           prodh	equ	0xFF4
  3679                           prodl	equ	0xFF3
  3680                           postinc0	equ	0xFEE
  3681                           wreg	equ	0xFE8
  3682                           postdec1	equ	0xFE5
  3683                           fsr1l	equ	0xFE1
  3684                           indf2	equ	0xFDF
  3685                           postinc2	equ	0xFDE
  3686                           fsr2h	equ	0xFDA
  3687                           fsr2l	equ	0xFD9
  3688                           status	equ	0xFD8
  3689                           
  3690 ;; *************** function ___lldiv *****************
  3691 ;; Defined at:
  3692 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  3693 ;; Parameters:    Size  Location     Type
  3694 ;;  dividend        4   23[COMRAM] unsigned long 
  3695 ;;  divisor         4   27[COMRAM] unsigned long 
  3696 ;; Auto vars:     Size  Location     Type
  3697 ;;  quotient        4   31[COMRAM] unsigned long 
  3698 ;;  counter         1   35[COMRAM] unsigned char 
  3699 ;; Return value:  Size  Location     Type
  3700 ;;                  4   23[COMRAM] unsigned long 
  3701 ;; Registers used:
  3702 ;;		wreg, status,2, status,0
  3703 ;; Tracked objects:
  3704 ;;		On entry : 0/0
  3705 ;;		On exit  : 0/0
  3706 ;;		Unchanged: 0/0
  3707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3708 ;;      Params:         8       0       0       0       0       0       0
  3709 ;;      Locals:         5       0       0       0       0       0       0
  3710 ;;      Temps:          0       0       0       0       0       0       0
  3711 ;;      Totals:        13       0       0       0       0       0       0
  3712 ;;Total ram usage:       13 bytes
  3713 ;; Hardware stack levels used:    1
  3714 ;; Hardware stack levels required when called:    3
  3715 ;; This function calls:
  3716 ;;		Nothing
  3717 ;; This function is called by:
  3718 ;;		_GetMcuRunTime
  3719 ;; This function uses a non-reentrant model
  3720 ;;
  3721                           
  3722                           	psect	text15
  3723  0024AA                     __ptext15:
  3724                           	opt stack 0
  3725  0024AA                     ___lldiv:
  3726                           	opt stack 24
  3727                           
  3728                           ;incstack = 0
  3729  0024AA  0E00               	movlw	0
  3730  0024AC  6E20               	movwf	___lldiv@quotient,c
  3731  0024AE  0E00               	movlw	0
  3732  0024B0  6E21               	movwf	___lldiv@quotient+1,c
  3733  0024B2  0E00               	movlw	0
  3734  0024B4  6E22               	movwf	___lldiv@quotient+2,c
  3735  0024B6  0E00               	movlw	0
  3736  0024B8  6E23               	movwf	___lldiv@quotient+3,c
  3737  0024BA  501C               	movf	___lldiv@divisor,w,c
  3738  0024BC  101D               	iorwf	___lldiv@divisor+1,w,c
  3739  0024BE  101E               	iorwf	___lldiv@divisor+2,w,c
  3740  0024C0  101F               	iorwf	___lldiv@divisor+3,w,c
  3741  0024C2  B4D8               	btfsc	status,2,c
  3742  0024C4  D02A               	goto	l1730
  3743  0024C6  0E01               	movlw	1
  3744  0024C8  6E24               	movwf	___lldiv@counter,c
  3745  0024CA  D006               	goto	l1725
  3746  0024CC  90D8               	bcf	status,0,c
  3747  0024CE  361C               	rlcf	___lldiv@divisor,f,c
  3748  0024D0  361D               	rlcf	___lldiv@divisor+1,f,c
  3749  0024D2  361E               	rlcf	___lldiv@divisor+2,f,c
  3750  0024D4  361F               	rlcf	___lldiv@divisor+3,f,c
  3751  0024D6  2A24               	incf	___lldiv@counter,f,c
  3752  0024D8                     l1725:
  3753  0024D8  AE1F               	btfss	___lldiv@divisor+3,7,c
  3754  0024DA  D7F8               	goto	l1726
  3755  0024DC                     u6960:
  3756  0024DC  90D8               	bcf	status,0,c
  3757  0024DE  3620               	rlcf	___lldiv@quotient,f,c
  3758  0024E0  3621               	rlcf	___lldiv@quotient+1,f,c
  3759  0024E2  3622               	rlcf	___lldiv@quotient+2,f,c
  3760  0024E4  3623               	rlcf	___lldiv@quotient+3,f,c
  3761  0024E6  501C               	movf	___lldiv@divisor,w,c
  3762  0024E8  5C18               	subwf	___lldiv@dividend,w,c
  3763  0024EA  501D               	movf	___lldiv@divisor+1,w,c
  3764  0024EC  5819               	subwfb	___lldiv@dividend+1,w,c
  3765  0024EE  501E               	movf	___lldiv@divisor+2,w,c
  3766  0024F0  581A               	subwfb	___lldiv@dividend+2,w,c
  3767  0024F2  501F               	movf	___lldiv@divisor+3,w,c
  3768  0024F4  581B               	subwfb	___lldiv@dividend+3,w,c
  3769  0024F6  A0D8               	btfss	status,0,c
  3770  0024F8  D009               	goto	l1729
  3771  0024FA  501C               	movf	___lldiv@divisor,w,c
  3772  0024FC  5E18               	subwf	___lldiv@dividend,f,c
  3773  0024FE  501D               	movf	___lldiv@divisor+1,w,c
  3774  002500  5A19               	subwfb	___lldiv@dividend+1,f,c
  3775  002502  501E               	movf	___lldiv@divisor+2,w,c
  3776  002504  5A1A               	subwfb	___lldiv@dividend+2,f,c
  3777  002506  501F               	movf	___lldiv@divisor+3,w,c
  3778  002508  5A1B               	subwfb	___lldiv@dividend+3,f,c
  3779  00250A  8020               	bsf	___lldiv@quotient,0,c
  3780  00250C                     l1729:
  3781  00250C  90D8               	bcf	status,0,c
  3782  00250E  321F               	rrcf	___lldiv@divisor+3,f,c
  3783  002510  321E               	rrcf	___lldiv@divisor+2,f,c
  3784  002512  321D               	rrcf	___lldiv@divisor+1,f,c
  3785  002514  321C               	rrcf	___lldiv@divisor,f,c
  3786  002516  2E24               	decfsz	___lldiv@counter,f,c
  3787  002518  D7E1               	goto	u6960
  3788  00251A                     l1730:
  3789  00251A  C020  F018         	movff	___lldiv@quotient,?___lldiv
  3790  00251E  C021  F019         	movff	___lldiv@quotient+1,?___lldiv+1
  3791  002522  C022  F01A         	movff	___lldiv@quotient+2,?___lldiv+2
  3792  002526  C023  F01B         	movff	___lldiv@quotient+3,?___lldiv+3
  3793  00252A  0012               	return		;funcret
  3794  00252C                     __end_of___lldiv:
  3795                           	opt stack 0
  3796                           tosu	equ	0xFFF
  3797                           tosh	equ	0xFFE
  3798                           tosl	equ	0xFFD
  3799                           pclath	equ	0xFFA
  3800                           tblptru	equ	0xFF8
  3801                           tblptrh	equ	0xFF7
  3802                           tblptrl	equ	0xFF6
  3803                           tablat	equ	0xFF5
  3804                           prodh	equ	0xFF4
  3805                           prodl	equ	0xFF3
  3806                           postinc0	equ	0xFEE
  3807                           wreg	equ	0xFE8
  3808                           postdec1	equ	0xFE5
  3809                           fsr1l	equ	0xFE1
  3810                           indf2	equ	0xFDF
  3811                           postinc2	equ	0xFDE
  3812                           fsr2h	equ	0xFDA
  3813                           fsr2l	equ	0xFD9
  3814                           status	equ	0xFD8
  3815                           
  3816 ;; *************** function _GetMcuFwVersion *****************
  3817 ;; Defined at:
  3818 ;;		line 26 in file "SystemStatus.c"
  3819 ;; Parameters:    Size  Location     Type
  3820 ;;		None
  3821 ;; Auto vars:     Size  Location     Type
  3822 ;;  idx             1   46[COMRAM] unsigned char 
  3823 ;;  TxMsg           9   37[COMRAM] unsigned char [9]
  3824 ;; Return value:  Size  Location     Type
  3825 ;;                  1    wreg      void 
  3826 ;; Registers used:
  3827 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3828 ;; Tracked objects:
  3829 ;;		On entry : 0/0
  3830 ;;		On exit  : 0/0
  3831 ;;		Unchanged: 0/0
  3832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3833 ;;      Params:         0       0       0       0       0       0       0
  3834 ;;      Locals:        10       0       0       0       0       0       0
  3835 ;;      Temps:          2       0       0       0       0       0       0
  3836 ;;      Totals:        12       0       0       0       0       0       0
  3837 ;;Total ram usage:       12 bytes
  3838 ;; Hardware stack levels used:    1
  3839 ;; Hardware stack levels required when called:    5
  3840 ;; This function calls:
  3841 ;;		_EepromRead
  3842 ;;		_WriteUartMessage
  3843 ;;		_ZeroArray
  3844 ;;		_crc8
  3845 ;; This function is called by:
  3846 ;;		_GroupStatusAndVersion
  3847 ;; This function uses a non-reentrant model
  3848 ;;
  3849                           
  3850                           	psect	text16
  3851  00252C                     __ptext16:
  3852                           	opt stack 0
  3853  00252C                     _GetMcuFwVersion:
  3854                           	opt stack 23
  3855                           
  3856                           ;SystemStatus.c: 29: char TxMsg[(0x4) + (0x4) + 1];
  3857                           ;SystemStatus.c: 30: ZeroArray(TxMsg, (0x4) + (0x4) + 1);
  3858                           
  3859                           ;incstack = 0
  3860  00252C  0E26               	movlw	low GetMcuFwVersion@TxMsg
  3861  00252E  6E20               	movwf	ZeroArray@array,c
  3862  002530  0E00               	movlw	high GetMcuFwVersion@TxMsg
  3863  002532  6E21               	movwf	ZeroArray@array+1,c
  3864  002534  0E00               	movlw	0
  3865  002536  6E23               	movwf	ZeroArray@size+1,c
  3866  002538  0E09               	movlw	9
  3867  00253A  6E22               	movwf	ZeroArray@size,c
  3868  00253C  ECFD  F01A         	call	_ZeroArray	;wreg free
  3869                           
  3870                           ;SystemStatus.c: 33: TxMsg[(0)] = (0x24);
  3871  002540  0E24               	movlw	36
  3872  002542  6E26               	movwf	GetMcuFwVersion@TxMsg,c
  3873                           
  3874                           ;SystemStatus.c: 34: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  3875  002544  0E02               	movlw	2
  3876  002546  6E27               	movwf	GetMcuFwVersion@TxMsg+1,c
  3877                           
  3878                           ;SystemStatus.c: 35: TxMsg[(2)] = STATUS_GET_MCU_FW_VERSION;
  3879  002548  0E22               	movlw	34
  3880  00254A  6E28               	movwf	GetMcuFwVersion@TxMsg+2,c
  3881                           
  3882                           ;SystemStatus.c: 36: TxMsg[(3)] = (0x4);
  3883  00254C  0E04               	movlw	4
  3884  00254E  6E29               	movwf	GetMcuFwVersion@TxMsg+3,c
  3885                           
  3886                           ;SystemStatus.c: 39: for(uint8_t idx = 0; idx < (0x4); idx++)
  3887  002550  0E00               	movlw	0
  3888  002552  6E2F               	movwf	GetMcuFwVersion@idx,c
  3889  002554                     l7395:
  3890  002554  0E03               	movlw	3
  3891  002556  642F               	cpfsgt	GetMcuFwVersion@idx,c
  3892  002558  D001               	goto	l1284
  3893  00255A  D013               	goto	u7420
  3894  00255C                     l1284:
  3895                           
  3896                           ;SystemStatus.c: 40: {
  3897                           ;SystemStatus.c: 41: TxMsg[(0x4) + idx] = EepromRead(idx);
  3898  00255C  502F               	movf	GetMcuFwVersion@idx,w,c
  3899  00255E  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  3900  002560  6A25               	clrf	(??_GetMcuFwVersion+1)& (0+255),c
  3901  002562  0E04               	movlw	4
  3902  002564  2624               	addwf	??_GetMcuFwVersion,f,c
  3903  002566  0E00               	movlw	0
  3904  002568  2225               	addwfc	??_GetMcuFwVersion+1,f,c
  3905  00256A  0E26               	movlw	low GetMcuFwVersion@TxMsg
  3906  00256C  2424               	addwf	??_GetMcuFwVersion,w,c
  3907  00256E  6ED9               	movwf	fsr2l,c
  3908  002570  0E00               	movlw	high GetMcuFwVersion@TxMsg
  3909  002572  2025               	addwfc	??_GetMcuFwVersion+1,w,c
  3910  002574  6EDA               	movwf	fsr2h,c
  3911  002576  502F               	movf	GetMcuFwVersion@idx,w,c
  3912  002578  ECD3  F01B         	call	_EepromRead
  3913  00257C  6EDF               	movwf	indf2,c
  3914  00257E  2A2F               	incf	GetMcuFwVersion@idx,f,c
  3915  002580  D7E9               	goto	l7395
  3916  002582                     u7420:
  3917                           
  3918                           ;SystemStatus.c: 42: }
  3919                           ;SystemStatus.c: 44: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  3920  002582  0E26               	movlw	low GetMcuFwVersion@TxMsg
  3921  002584  6E18               	movwf	crc8@dataArray,c
  3922  002586  0E00               	movlw	high GetMcuFwVersion@TxMsg
  3923  002588  6E19               	movwf	crc8@dataArray+1,c
  3924  00258A  0E00               	movlw	0
  3925  00258C  6E1B               	movwf	crc8@dataSize+1,c
  3926  00258E  0E08               	movlw	8
  3927  002590  6E1A               	movwf	crc8@dataSize,c
  3928  002592  EC48  F017         	call	_crc8	;wreg free
  3929  002596  6E2E               	movwf	GetMcuFwVersion@TxMsg+8,c
  3930                           
  3931                           ;SystemStatus.c: 46: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  3932  002598  0E26               	movlw	low GetMcuFwVersion@TxMsg
  3933  00259A  6E19               	movwf	WriteUartMessage@dataBuf,c
  3934  00259C  0E00               	movlw	high GetMcuFwVersion@TxMsg
  3935  00259E  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  3936  0025A0  0E00               	movlw	0
  3937  0025A2  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  3938  0025A4  0E09               	movlw	9
  3939  0025A6  6E1B               	movwf	WriteUartMessage@dataSize,c
  3940  0025A8  EC9D  F019         	call	_WriteUartMessage	;wreg free
  3941  0025AC  0012               	return		;funcret
  3942  0025AE                     __end_of_GetMcuFwVersion:
  3943                           	opt stack 0
  3944                           tosu	equ	0xFFF
  3945                           tosh	equ	0xFFE
  3946                           tosl	equ	0xFFD
  3947                           pclath	equ	0xFFA
  3948                           tblptru	equ	0xFF8
  3949                           tblptrh	equ	0xFF7
  3950                           tblptrl	equ	0xFF6
  3951                           tablat	equ	0xFF5
  3952                           prodh	equ	0xFF4
  3953                           prodl	equ	0xFF3
  3954                           postinc0	equ	0xFEE
  3955                           wreg	equ	0xFE8
  3956                           postdec1	equ	0xFE5
  3957                           fsr1l	equ	0xFE1
  3958                           indf2	equ	0xFDF
  3959                           postinc2	equ	0xFDE
  3960                           fsr2h	equ	0xFDA
  3961                           fsr2l	equ	0xFD9
  3962                           status	equ	0xFD8
  3963                           
  3964 ;; *************** function _GetCpldFwVersion *****************
  3965 ;; Defined at:
  3966 ;;		line 58 in file "SystemStatus.c"
  3967 ;; Parameters:    Size  Location     Type
  3968 ;;		None
  3969 ;; Auto vars:     Size  Location     Type
  3970 ;;  idx             2   46[COMRAM] int 
  3971 ;;  TxMsg           9   37[COMRAM] unsigned char [9]
  3972 ;; Return value:  Size  Location     Type
  3973 ;;                  1    wreg      void 
  3974 ;; Registers used:
  3975 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3976 ;; Tracked objects:
  3977 ;;		On entry : 0/0
  3978 ;;		On exit  : 0/0
  3979 ;;		Unchanged: 0/0
  3980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3981 ;;      Params:         0       0       0       0       0       0       0
  3982 ;;      Locals:        11       0       0       0       0       0       0
  3983 ;;      Temps:          2       0       0       0       0       0       0
  3984 ;;      Totals:        13       0       0       0       0       0       0
  3985 ;;Total ram usage:       13 bytes
  3986 ;; Hardware stack levels used:    1
  3987 ;; Hardware stack levels required when called:    5
  3988 ;; This function calls:
  3989 ;;		_EepromRead
  3990 ;;		_WriteUartMessage
  3991 ;;		_ZeroArray
  3992 ;;		_crc8
  3993 ;; This function is called by:
  3994 ;;		_GroupStatusAndVersion
  3995 ;; This function uses a non-reentrant model
  3996 ;;
  3997                           
  3998                           	psect	text17
  3999  0022FA                     __ptext17:
  4000                           	opt stack 0
  4001  0022FA                     _GetCpldFwVersion:
  4002                           	opt stack 23
  4003                           
  4004                           ;SystemStatus.c: 61: char TxMsg[(0x4) + (0x4) + 1];
  4005                           ;SystemStatus.c: 62: ZeroArray(TxMsg, (0x4) + (0x4) + 1);
  4006                           
  4007                           ;incstack = 0
  4008  0022FA  0E26               	movlw	low GetCpldFwVersion@TxMsg
  4009  0022FC  6E20               	movwf	ZeroArray@array,c
  4010  0022FE  0E00               	movlw	high GetCpldFwVersion@TxMsg
  4011  002300  6E21               	movwf	ZeroArray@array+1,c
  4012  002302  0E00               	movlw	0
  4013  002304  6E23               	movwf	ZeroArray@size+1,c
  4014  002306  0E09               	movlw	9
  4015  002308  6E22               	movwf	ZeroArray@size,c
  4016  00230A  ECFD  F01A         	call	_ZeroArray	;wreg free
  4017                           
  4018                           ;SystemStatus.c: 65: TxMsg[(0)] = (0x24);
  4019  00230E  0E24               	movlw	36
  4020  002310  6E26               	movwf	GetCpldFwVersion@TxMsg,c
  4021                           
  4022                           ;SystemStatus.c: 66: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  4023  002312  0E02               	movlw	2
  4024  002314  6E27               	movwf	GetCpldFwVersion@TxMsg+1,c
  4025                           
  4026                           ;SystemStatus.c: 67: TxMsg[(2)] = STATUS_GET_CPLD_FW_VERSION;
  4027  002316  0E23               	movlw	35
  4028  002318  6E28               	movwf	GetCpldFwVersion@TxMsg+2,c
  4029                           
  4030                           ;SystemStatus.c: 68: TxMsg[(3)] = (0x4);
  4031  00231A  0E04               	movlw	4
  4032  00231C  6E29               	movwf	GetCpldFwVersion@TxMsg+3,c
  4033                           
  4034                           ;SystemStatus.c: 71: for(int idx = 0; idx < (0x4); idx++)
  4035  00231E  0E00               	movlw	0
  4036  002320  6E30               	movwf	GetCpldFwVersion@idx+1,c
  4037  002322  0E00               	movlw	0
  4038  002324  6E2F               	movwf	GetCpldFwVersion@idx,c
  4039  002326                     l7435:
  4040  002326  BE30               	btfsc	GetCpldFwVersion@idx+1,7,c
  4041  002328  D006               	goto	l1294
  4042  00232A  5030               	movf	GetCpldFwVersion@idx+1,w,c
  4043  00232C  E118               	bnz	l7445
  4044  00232E  0E04               	movlw	4
  4045  002330  5C2F               	subwf	GetCpldFwVersion@idx,w,c
  4046  002332  B0D8               	btfsc	status,0,c
  4047  002334  D014               	goto	u7460
  4048  002336                     l1294:
  4049                           
  4050                           ;SystemStatus.c: 72: {
  4051                           ;SystemStatus.c: 73: TxMsg[(0x4) + idx] = EepromRead((0x4) + idx);
  4052  002336  0E04               	movlw	4
  4053  002338  242F               	addwf	GetCpldFwVersion@idx,w,c
  4054  00233A  6E24               	movwf	??_GetCpldFwVersion& (0+255),c
  4055  00233C  0E00               	movlw	0
  4056  00233E  2030               	addwfc	GetCpldFwVersion@idx+1,w,c
  4057  002340  6E25               	movwf	(??_GetCpldFwVersion+1)& (0+255),c
  4058  002342  0E26               	movlw	low GetCpldFwVersion@TxMsg
  4059  002344  2424               	addwf	??_GetCpldFwVersion,w,c
  4060  002346  6ED9               	movwf	fsr2l,c
  4061  002348  0E00               	movlw	high GetCpldFwVersion@TxMsg
  4062  00234A  2025               	addwfc	??_GetCpldFwVersion+1,w,c
  4063  00234C  6EDA               	movwf	fsr2h,c
  4064  00234E  502F               	movf	GetCpldFwVersion@idx,w,c
  4065  002350  0F04               	addlw	4
  4066  002352  ECD3  F01B         	call	_EepromRead
  4067  002356  6EDF               	movwf	indf2,c
  4068  002358  4A2F               	infsnz	GetCpldFwVersion@idx,f,c
  4069  00235A  2A30               	incf	GetCpldFwVersion@idx+1,f,c
  4070  00235C  D7E4               	goto	l7435
  4071  00235E                     u7460:
  4072  00235E                     l7445:
  4073                           
  4074                           ;SystemStatus.c: 74: }
  4075                           ;SystemStatus.c: 76: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  4076  00235E  0E26               	movlw	low GetCpldFwVersion@TxMsg
  4077  002360  6E18               	movwf	crc8@dataArray,c
  4078  002362  0E00               	movlw	high GetCpldFwVersion@TxMsg
  4079  002364  6E19               	movwf	crc8@dataArray+1,c
  4080  002366  0E00               	movlw	0
  4081  002368  6E1B               	movwf	crc8@dataSize+1,c
  4082  00236A  0E08               	movlw	8
  4083  00236C  6E1A               	movwf	crc8@dataSize,c
  4084  00236E  EC48  F017         	call	_crc8	;wreg free
  4085  002372  6E2E               	movwf	GetCpldFwVersion@TxMsg+8,c
  4086                           
  4087                           ;SystemStatus.c: 78: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  4088  002374  0E26               	movlw	low GetCpldFwVersion@TxMsg
  4089  002376  6E19               	movwf	WriteUartMessage@dataBuf,c
  4090  002378  0E00               	movlw	high GetCpldFwVersion@TxMsg
  4091  00237A  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  4092  00237C  0E00               	movlw	0
  4093  00237E  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  4094  002380  0E09               	movlw	9
  4095  002382  6E1B               	movwf	WriteUartMessage@dataSize,c
  4096  002384  EC9D  F019         	call	_WriteUartMessage	;wreg free
  4097  002388  0012               	return		;funcret
  4098  00238A                     __end_of_GetCpldFwVersion:
  4099                           	opt stack 0
  4100                           tosu	equ	0xFFF
  4101                           tosh	equ	0xFFE
  4102                           tosl	equ	0xFFD
  4103                           pclath	equ	0xFFA
  4104                           tblptru	equ	0xFF8
  4105                           tblptrh	equ	0xFF7
  4106                           tblptrl	equ	0xFF6
  4107                           tablat	equ	0xFF5
  4108                           prodh	equ	0xFF4
  4109                           prodl	equ	0xFF3
  4110                           postinc0	equ	0xFEE
  4111                           wreg	equ	0xFE8
  4112                           postdec1	equ	0xFE5
  4113                           fsr1l	equ	0xFE1
  4114                           indf2	equ	0xFDF
  4115                           postinc2	equ	0xFDE
  4116                           fsr2h	equ	0xFDA
  4117                           fsr2l	equ	0xFD9
  4118                           status	equ	0xFD8
  4119                           
  4120 ;; *************** function _FlashReadUart *****************
  4121 ;; Defined at:
  4122 ;;		line 62 in file "FlashApp.c"
  4123 ;; Parameters:    Size  Location     Type
  4124 ;;  numOfSampleT    2   43[COMRAM] int 
  4125 ;; Auto vars:     Size  Location     Type
  4126 ;;  idx             2   91[BANK0 ] int 
  4127 ;;  TxMsg          69   12[BANK0 ] unsigned char [69]
  4128 ;;  offset          2   93[BANK0 ] int 
  4129 ;;  j               2   89[BANK0 ] int 
  4130 ;; Return value:  Size  Location     Type
  4131 ;;                  1    wreg      void 
  4132 ;; Registers used:
  4133 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4134 ;; Tracked objects:
  4135 ;;		On entry : 0/0
  4136 ;;		On exit  : 0/0
  4137 ;;		Unchanged: 0/0
  4138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4139 ;;      Params:         2       0       0       0       0       0       0
  4140 ;;      Locals:         0      83       0       0       0       0       0
  4141 ;;      Temps:          0      12       0       0       0       0       0
  4142 ;;      Totals:         2      95       0       0       0       0       0
  4143 ;;Total ram usage:       97 bytes
  4144 ;; Hardware stack levels used:    1
  4145 ;; Hardware stack levels required when called:    6
  4146 ;; This function calls:
  4147 ;;		_FLASH_IsWriteDone
  4148 ;;		_FLASH_ReadByte
  4149 ;;		_SendAckMessage
  4150 ;;		_WriteUartMessage
  4151 ;;		_ZeroArray
  4152 ;;		_abs
  4153 ;;		_crc8
  4154 ;; This function is called by:
  4155 ;;		_GroupFlashMemory
  4156 ;; This function uses a non-reentrant model
  4157 ;;
  4158                           
  4159                           	psect	text18
  4160  000676                     __ptext18:
  4161                           	opt stack 0
  4162  000676                     _FlashReadUart:
  4163                           	opt stack 22
  4164                           
  4165                           ;FlashApp.c: 65: int j=0;
  4166                           
  4167                           ;incstack = 0
  4168  000676  0E00               	movlw	0
  4169  000678  0100               	movlb	0	; () banked
  4170  00067A  6FBA               	movwf	(FlashReadUart@j+1)& (0+255),b
  4171  00067C  0E00               	movlw	0
  4172  00067E  6FB9               	movwf	FlashReadUart@j& (0+255),b
  4173                           
  4174                           ;FlashApp.c: 66: int offset = 0;
  4175  000680  0E00               	movlw	0
  4176  000682  6FBE               	movwf	(FlashReadUart@offset+1)& (0+255),b
  4177  000684  0E00               	movlw	0
  4178  000686  6FBD               	movwf	FlashReadUart@offset& (0+255),b
  4179                           
  4180                           ; BSR set to: 0
  4181                           ;FlashApp.c: 67: char TxMsg[(64) + (0x4) + 1];
  4182                           ;FlashApp.c: 68: ZeroArray(TxMsg, (64) + (0x4) + 1);
  4183  000688  0E6C               	movlw	low FlashReadUart@TxMsg
  4184  00068A  6E20               	movwf	ZeroArray@array,c
  4185  00068C  0E00               	movlw	high FlashReadUart@TxMsg
  4186  00068E  6E21               	movwf	ZeroArray@array+1,c
  4187  000690  0E00               	movlw	0
  4188  000692  6E23               	movwf	ZeroArray@size+1,c
  4189  000694  0E45               	movlw	69
  4190  000696  6E22               	movwf	ZeroArray@size,c
  4191  000698  ECFD  F01A         	call	_ZeroArray	;wreg free
  4192                           
  4193                           ;FlashApp.c: 71: if (FLASH_IsWriteDone() == 0)
  4194  00069C  ECA4  F01B         	call	_FLASH_IsWriteDone	;wreg free
  4195  0006A0  0900               	iorlw	0
  4196  0006A2  B4D8               	btfsc	status,2,c
  4197  0006A4  0012               	return	
  4198                           
  4199                           ;FlashApp.c: 74: }
  4200                           ;FlashApp.c: 76: if (numOfReadSamples)
  4201                           
  4202                           ;FlashApp.c: 72: {
  4203                           ;FlashApp.c: 73: return;
  4204  0006A6  503E               	movf	_numOfReadSamples,w,c
  4205  0006A8  103F               	iorwf	_numOfReadSamples+1,w,c
  4206  0006AA  1040               	iorwf	_numOfReadSamples+2,w,c
  4207  0006AC  1041               	iorwf	_numOfReadSamples+3,w,c
  4208  0006AE  B4D8               	btfsc	status,2,c
  4209  0006B0  D0EE               	goto	l282
  4210                           
  4211                           ;FlashApp.c: 77: {
  4212                           ;FlashApp.c: 78: if (numOfValidateSamples)
  4213  0006B2  5031               	movf	_numOfValidateSamples,w,c
  4214  0006B4  1032               	iorwf	_numOfValidateSamples+1,w,c
  4215  0006B6  1033               	iorwf	_numOfValidateSamples+2,w,c
  4216  0006B8  1034               	iorwf	_numOfValidateSamples+3,w,c
  4217  0006BA  B4D8               	btfsc	status,2,c
  4218  0006BC  D09A               	goto	l283
  4219                           
  4220                           ;FlashApp.c: 79: {
  4221                           ;FlashApp.c: 80: offset = numOfValidateSamples - (numOfValidateSamples > numOfSampleToRe
      +                          ad)? numOfValidateSamples : numOfSampleToRead;
  4222  0006BE  C02C  F060         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  4223  0006C2  C02D  F061         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  4224  0006C6  0E00               	movlw	0
  4225  0006C8  0100               	movlb	0	; () banked
  4226  0006CA  BF61               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  4227  0006CC  0EFF               	movlw	255
  4228  0006CE  6F62               	movwf	(??_FlashReadUart+2)& (0+255),b
  4229  0006D0  6F63               	movwf	(??_FlashReadUart+3)& (0+255),b
  4230  0006D2  5031               	movf	_numOfValidateSamples,w,c
  4231  0006D4  5D60               	subwf	??_FlashReadUart& (0+255),w,b
  4232  0006D6  5032               	movf	_numOfValidateSamples+1,w,c
  4233  0006D8  5961               	subwfb	(??_FlashReadUart+1)& (0+255),w,b
  4234  0006DA  5033               	movf	_numOfValidateSamples+2,w,c
  4235  0006DC  5962               	subwfb	(??_FlashReadUart+2)& (0+255),w,b
  4236  0006DE  5034               	movf	_numOfValidateSamples+3,w,c
  4237  0006E0  5963               	subwfb	(??_FlashReadUart+3)& (0+255),w,b
  4238  0006E2  B0D8               	btfsc	status,0,c
  4239  0006E4  D002               	goto	u7170
  4240  0006E6  0E01               	movlw	1
  4241  0006E8  D001               	goto	u7180
  4242  0006EA                     u7170:
  4243  0006EA  0E00               	movlw	0
  4244  0006EC                     u7180:
  4245  0006EC  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  4246  0006EE  6B65               	clrf	(??_FlashReadUart+5)& (0+255),b
  4247  0006F0  6B66               	clrf	(??_FlashReadUart+6)& (0+255),b
  4248  0006F2  6B67               	clrf	(??_FlashReadUart+7)& (0+255),b
  4249  0006F4  1F64               	comf	(??_FlashReadUart+4)& (0+255),f,b
  4250  0006F6  1F65               	comf	(??_FlashReadUart+5)& (0+255),f,b
  4251  0006F8  1F66               	comf	(??_FlashReadUart+6)& (0+255),f,b
  4252  0006FA  1F67               	comf	(??_FlashReadUart+7)& (0+255),f,b
  4253  0006FC  2B64               	incf	(??_FlashReadUart+4)& (0+255),f,b
  4254  0006FE  0E00               	movlw	0
  4255  000700  2365               	addwfc	(??_FlashReadUart+5)& (0+255),f,b
  4256  000702  2366               	addwfc	(??_FlashReadUart+6)& (0+255),f,b
  4257  000704  2367               	addwfc	(??_FlashReadUart+7)& (0+255),f,b
  4258  000706  5031               	movf	_numOfValidateSamples,w,c
  4259  000708  2564               	addwf	(??_FlashReadUart+4)& (0+255),w,b
  4260  00070A  6F68               	movwf	(??_FlashReadUart+8)& (0+255),b
  4261  00070C  5032               	movf	_numOfValidateSamples+1,w,c
  4262  00070E  2165               	addwfc	(??_FlashReadUart+5)& (0+255),w,b
  4263  000710  6F69               	movwf	(??_FlashReadUart+9)& (0+255),b
  4264  000712  5033               	movf	_numOfValidateSamples+2,w,c
  4265  000714  2166               	addwfc	(??_FlashReadUart+6)& (0+255),w,b
  4266  000716  6F6A               	movwf	(??_FlashReadUart+10)& (0+255),b
  4267  000718  5034               	movf	_numOfValidateSamples+3,w,c
  4268  00071A  2167               	addwfc	(??_FlashReadUart+7)& (0+255),w,b
  4269  00071C  6F6B               	movwf	(??_FlashReadUart+11)& (0+255),b
  4270  00071E  5168               	movf	(??_FlashReadUart+8)& (0+255),w,b
  4271  000720  1169               	iorwf	(??_FlashReadUart+9)& (0+255),w,b
  4272  000722  116A               	iorwf	(??_FlashReadUart+10)& (0+255),w,b
  4273  000724  116B               	iorwf	(??_FlashReadUart+11)& (0+255),w,b
  4274  000726  A4D8               	btfss	status,2,c
  4275  000728  D00A               	goto	l285
  4276                           
  4277                           ; BSR set to: 0
  4278  00072A  C02C  F0B1         	movff	FlashReadUart@numOfSampleToRead,_FlashReadUart$561
  4279  00072E  C02D  F0B2         	movff	FlashReadUart@numOfSampleToRead+1,_FlashReadUart$561+1
  4280  000732  0E00               	movlw	0
  4281  000734  BFB2               	btfsc	(_FlashReadUart$561+1)& (0+255),7,b
  4282  000736  0EFF               	movlw	-1
  4283  000738  6FB3               	movwf	(_FlashReadUart$561+2)& (0+255),b
  4284  00073A  6FB4               	movwf	(_FlashReadUart$561+3)& (0+255),b
  4285  00073C  D008               	goto	l287
  4286  00073E                     l285:
  4287                           
  4288                           ; BSR set to: 0
  4289  00073E  C031  F0B1         	movff	_numOfValidateSamples,_FlashReadUart$561
  4290  000742  C032  F0B2         	movff	_numOfValidateSamples+1,_FlashReadUart$561+1
  4291  000746  C033  F0B3         	movff	_numOfValidateSamples+2,_FlashReadUart$561+2
  4292  00074A  C034  F0B4         	movff	_numOfValidateSamples+3,_FlashReadUart$561+3
  4293  00074E                     l287:
  4294                           
  4295                           ; BSR set to: 0
  4296  00074E  C0B1  F0BD         	movff	_FlashReadUart$561,FlashReadUart@offset
  4297  000752  C0B2  F0BE         	movff	_FlashReadUart$561+1,FlashReadUart@offset+1
  4298                           
  4299                           ; BSR set to: 0
  4300                           ;FlashApp.c: 81: if(offset < 0)
  4301  000756  AFBE               	btfss	(FlashReadUart@offset+1)& (0+255),7,b
  4302  000758  D091               	goto	l290
  4303                           
  4304                           ; BSR set to: 0
  4305                           ;FlashApp.c: 82: {
  4306                           ;FlashApp.c: 83: if (abs(offset) > numOfReadSamples)
  4307  00075A  C0BD  F018         	movff	FlashReadUart@offset,abs@a
  4308  00075E  C0BE  F019         	movff	FlashReadUart@offset+1,abs@a+1
  4309  000762  EC5D  F01A         	call	_abs	;wreg free
  4310  000766  C018  F060         	movff	?_abs,??_FlashReadUart
  4311  00076A  C019  F061         	movff	?_abs+1,??_FlashReadUart+1
  4312  00076E  0E00               	movlw	0
  4313  000770  0100               	movlb	0	; () banked
  4314  000772  BF61               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  4315  000774  0EFF               	movlw	255
  4316  000776  6F62               	movwf	(??_FlashReadUart+2)& (0+255),b
  4317  000778  6F63               	movwf	(??_FlashReadUart+3)& (0+255),b
  4318  00077A  5160               	movf	??_FlashReadUart& (0+255),w,b
  4319  00077C  5C3E               	subwf	_numOfReadSamples,w,c
  4320  00077E  5161               	movf	(??_FlashReadUart+1)& (0+255),w,b
  4321  000780  583F               	subwfb	_numOfReadSamples+1,w,c
  4322  000782  5162               	movf	(??_FlashReadUart+2)& (0+255),w,b
  4323  000784  5840               	subwfb	_numOfReadSamples+2,w,c
  4324  000786  5163               	movf	(??_FlashReadUart+3)& (0+255),w,b
  4325  000788  5841               	subwfb	_numOfReadSamples+3,w,c
  4326  00078A  B0D8               	btfsc	status,0,c
  4327  00078C  D016               	goto	l289
  4328                           
  4329                           ; BSR set to: 0
  4330                           ;FlashApp.c: 84: {
  4331                           ;FlashApp.c: 85: numOfSampleToRead += offset + numOfReadSamples;
  4332  00078E  503E               	movf	_numOfReadSamples,w,c
  4333  000790  25BD               	addwf	FlashReadUart@offset& (0+255),w,b
  4334  000792  6F60               	movwf	??_FlashReadUart& (0+255),b
  4335  000794  503F               	movf	_numOfReadSamples+1,w,c
  4336  000796  21BE               	addwfc	(FlashReadUart@offset+1)& (0+255),w,b
  4337  000798  6F61               	movwf	(??_FlashReadUart+1)& (0+255),b
  4338  00079A  5160               	movf	??_FlashReadUart& (0+255),w,b
  4339  00079C  262C               	addwf	FlashReadUart@numOfSampleToRead,f,c
  4340  00079E  5161               	movf	(??_FlashReadUart+1)& (0+255),w,b
  4341  0007A0  222D               	addwfc	FlashReadUart@numOfSampleToRead+1,f,c
  4342                           
  4343                           ; BSR set to: 0
  4344                           ;FlashApp.c: 86: offset = numOfReadSamples * (-1);
  4345  0007A2  C03E  F060         	movff	_numOfReadSamples,??_FlashReadUart
  4346  0007A6  C03F  F061         	movff	_numOfReadSamples+1,??_FlashReadUart+1
  4347  0007AA  1F60               	comf	??_FlashReadUart& (0+255),f,b
  4348  0007AC  1F61               	comf	(??_FlashReadUart+1)& (0+255),f,b
  4349  0007AE  4B60               	infsnz	??_FlashReadUart& (0+255),f,b
  4350  0007B0  2B61               	incf	(??_FlashReadUart+1)& (0+255),f,b
  4351  0007B2  C060  F0BD         	movff	??_FlashReadUart,FlashReadUart@offset
  4352  0007B6  C061  F0BE         	movff	??_FlashReadUart+1,FlashReadUart@offset+1
  4353  0007BA                     l289:
  4354                           
  4355                           ; BSR set to: 0
  4356                           ;FlashApp.c: 88: }
  4357                           ;FlashApp.c: 90: readAddress += offset * (64);
  4358  0007BA  C0BD  F060         	movff	FlashReadUart@offset,??_FlashReadUart
  4359  0007BE  C0BE  F061         	movff	FlashReadUart@offset+1,??_FlashReadUart+1
  4360  0007C2  0E06               	movlw	6
  4361  0007C4                     u7225:
  4362  0007C4  90D8               	bcf	status,0,c
  4363  0007C6  3760               	rlcf	??_FlashReadUart& (0+255),f,b
  4364  0007C8  3761               	rlcf	(??_FlashReadUart+1)& (0+255),f,b
  4365  0007CA  2EE8               	decfsz	wreg,f,c
  4366  0007CC  D7FB               	goto	u7225
  4367  0007CE  C060  F062         	movff	??_FlashReadUart,??_FlashReadUart+2
  4368  0007D2  C061  F063         	movff	??_FlashReadUart+1,??_FlashReadUart+3
  4369  0007D6  0E00               	movlw	0
  4370  0007D8  BF63               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  4371  0007DA  0EFF               	movlw	255
  4372  0007DC  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  4373  0007DE  6F65               	movwf	(??_FlashReadUart+5)& (0+255),b
  4374  0007E0  5162               	movf	(??_FlashReadUart+2)& (0+255),w,b
  4375  0007E2  27F9               	addwf	_readAddress& (0+255),f,b
  4376  0007E4  5163               	movf	(??_FlashReadUart+3)& (0+255),w,b
  4377  0007E6  23FA               	addwfc	(_readAddress+1)& (0+255),f,b
  4378  0007E8  5164               	movf	(??_FlashReadUart+4)& (0+255),w,b
  4379  0007EA  23FB               	addwfc	(_readAddress+2)& (0+255),f,b
  4380  0007EC  5165               	movf	(??_FlashReadUart+5)& (0+255),w,b
  4381  0007EE  23FC               	addwfc	(_readAddress+3)& (0+255),f,b
  4382                           
  4383                           ; BSR set to: 0
  4384                           ;FlashApp.c: 91: }
  4385                           ;FlashApp.c: 92: }
  4386  0007F0  D045               	goto	l290
  4387  0007F2                     l283:
  4388                           
  4389                           ;FlashApp.c: 93: else
  4390                           ;FlashApp.c: 94: {
  4391                           ;FlashApp.c: 95: numOfSampleToRead = (numOfReadSamples > numOfSampleToRead)? numOfSample
      +                          ToRead : numOfReadSamples;
  4392                           
  4393                           ; BSR set to: 0
  4394  0007F2  C02C  F060         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  4395  0007F6  C02D  F061         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  4396  0007FA  0E00               	movlw	0
  4397  0007FC  0100               	movlb	0	; () banked
  4398  0007FE  BF61               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  4399  000800  0EFF               	movlw	255
  4400  000802  6F62               	movwf	(??_FlashReadUart+2)& (0+255),b
  4401  000804  6F63               	movwf	(??_FlashReadUart+3)& (0+255),b
  4402  000806  503E               	movf	_numOfReadSamples,w,c
  4403  000808  5D60               	subwf	??_FlashReadUart& (0+255),w,b
  4404  00080A  503F               	movf	_numOfReadSamples+1,w,c
  4405  00080C  5961               	subwfb	(??_FlashReadUart+1)& (0+255),w,b
  4406  00080E  5040               	movf	_numOfReadSamples+2,w,c
  4407  000810  5962               	subwfb	(??_FlashReadUart+2)& (0+255),w,b
  4408  000812  5041               	movf	_numOfReadSamples+3,w,c
  4409  000814  5963               	subwfb	(??_FlashReadUart+3)& (0+255),w,b
  4410  000816  A0D8               	btfss	status,0,c
  4411  000818  D009               	goto	l292
  4412                           
  4413                           ; BSR set to: 0
  4414  00081A  C03E  F0B5         	movff	_numOfReadSamples,_FlashReadUart$562
  4415  00081E  C03F  F0B6         	movff	_numOfReadSamples+1,_FlashReadUart$562+1
  4416  000822  C040  F0B7         	movff	_numOfReadSamples+2,_FlashReadUart$562+2
  4417  000826  C041  F0B8         	movff	_numOfReadSamples+3,_FlashReadUart$562+3
  4418  00082A  D009               	goto	l294
  4419  00082C                     l292:
  4420                           
  4421                           ; BSR set to: 0
  4422                           
  4423                           ; BSR set to: 0
  4424  00082C  C02C  F0B5         	movff	FlashReadUart@numOfSampleToRead,_FlashReadUart$562
  4425  000830  C02D  F0B6         	movff	FlashReadUart@numOfSampleToRead+1,_FlashReadUart$562+1
  4426  000834  0E00               	movlw	0
  4427  000836  BFB6               	btfsc	(_FlashReadUart$562+1)& (0+255),7,b
  4428  000838  0EFF               	movlw	-1
  4429  00083A  6FB7               	movwf	(_FlashReadUart$562+2)& (0+255),b
  4430  00083C  6FB8               	movwf	(_FlashReadUart$562+3)& (0+255),b
  4431  00083E                     l294:
  4432                           
  4433                           ; BSR set to: 0
  4434                           
  4435                           ; BSR set to: 0
  4436  00083E  C0B5  F02C         	movff	_FlashReadUart$562,FlashReadUart@numOfSampleToRead
  4437  000842  C0B6  F02D         	movff	_FlashReadUart$562+1,FlashReadUart@numOfSampleToRead+1
  4438                           
  4439                           ; BSR set to: 0
  4440                           ;FlashApp.c: 96: readAddress -= numOfSampleToRead * (64);
  4441  000846  C02C  F060         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  4442  00084A  C02D  F061         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  4443  00084E  0E06               	movlw	6
  4444  000850                     u7245:
  4445  000850  90D8               	bcf	status,0,c
  4446  000852  3760               	rlcf	??_FlashReadUart& (0+255),f,b
  4447  000854  3761               	rlcf	(??_FlashReadUart+1)& (0+255),f,b
  4448  000856  2EE8               	decfsz	wreg,f,c
  4449  000858  D7FB               	goto	u7245
  4450  00085A  C060  F062         	movff	??_FlashReadUart,??_FlashReadUart+2
  4451  00085E  C061  F063         	movff	??_FlashReadUart+1,??_FlashReadUart+3
  4452  000862  0E00               	movlw	0
  4453  000864  BF63               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  4454  000866  0EFF               	movlw	255
  4455  000868  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  4456  00086A  6F65               	movwf	(??_FlashReadUart+5)& (0+255),b
  4457  00086C  5162               	movf	(??_FlashReadUart+2)& (0+255),w,b
  4458  00086E  5FF9               	subwf	_readAddress& (0+255),f,b
  4459  000870  5163               	movf	(??_FlashReadUart+3)& (0+255),w,b
  4460  000872  5BFA               	subwfb	(_readAddress+1)& (0+255),f,b
  4461  000874  5164               	movf	(??_FlashReadUart+4)& (0+255),w,b
  4462  000876  5BFB               	subwfb	(_readAddress+2)& (0+255),f,b
  4463  000878  5165               	movf	(??_FlashReadUart+5)& (0+255),w,b
  4464  00087A  5BFC               	subwfb	(_readAddress+3)& (0+255),f,b
  4465  00087C                     l290:
  4466                           
  4467                           ; BSR set to: 0
  4468                           ;FlashApp.c: 97: }
  4469                           ;FlashApp.c: 99: if (readAddress <= 0x4000)
  4470                           
  4471                           ; BSR set to: 0
  4472  00087C  51FC               	movf	(_readAddress+3)& (0+255),w,b
  4473  00087E  11FB               	iorwf	(_readAddress+2)& (0+255),w,b
  4474  000880  E13E               	bnz	l7277
  4475  000882  05F9               	decf	_readAddress& (0+255),w,b
  4476  000884  0E40               	movlw	64
  4477  000886  59FA               	subwfb	(_readAddress+1)& (0+255),w,b
  4478  000888  B0D8               	btfsc	status,0,c
  4479  00088A  D039               	goto	l300
  4480  00088C  D023               	goto	u7280
  4481  00088E                     l282:
  4482                           
  4483                           ;FlashApp.c: 104: else
  4484                           ;FlashApp.c: 105: {
  4485                           ;FlashApp.c: 106: if ((isReWriteDone) && (readAddress <= writeAddress))
  4486                           
  4487                           ; BSR set to: 0
  4488  00088E  503C               	movf	_isReWriteDone,w,c
  4489  000890  B4D8               	btfsc	status,2,c
  4490  000892  D029               	goto	l297
  4491  000894  0100               	movlb	0	; () banked
  4492  000896  51F9               	movf	_readAddress& (0+255),w,b
  4493  000898  5C42               	subwf	_writeAddress,w,c
  4494  00089A  51FA               	movf	(_readAddress+1)& (0+255),w,b
  4495  00089C  5843               	subwfb	_writeAddress+1,w,c
  4496  00089E  51FB               	movf	(_readAddress+2)& (0+255),w,b
  4497  0008A0  5844               	subwfb	_writeAddress+2,w,c
  4498  0008A2  51FC               	movf	(_readAddress+3)& (0+255),w,b
  4499  0008A4  5845               	subwfb	_writeAddress+3,w,c
  4500  0008A6  A0D8               	btfss	status,0,c
  4501  0008A8  D01E               	goto	l297
  4502                           
  4503                           ; BSR set to: 0
  4504                           ;FlashApp.c: 107: {
  4505                           ;FlashApp.c: 108: readAddress = writeAddress + (64);
  4506  0008AA  0E40               	movlw	64
  4507  0008AC  2442               	addwf	_writeAddress,w,c
  4508  0008AE  6FF9               	movwf	_readAddress& (0+255),b
  4509  0008B0  0E00               	movlw	0
  4510  0008B2  2043               	addwfc	_writeAddress+1,w,c
  4511  0008B4  6FFA               	movwf	(_readAddress+1)& (0+255),b
  4512  0008B6  0E00               	movlw	0
  4513  0008B8  2044               	addwfc	_writeAddress+2,w,c
  4514  0008BA  6FFB               	movwf	(_readAddress+2)& (0+255),b
  4515  0008BC  0E00               	movlw	0
  4516  0008BE  2045               	addwfc	_writeAddress+3,w,c
  4517  0008C0  6FFC               	movwf	(_readAddress+3)& (0+255),b
  4518                           
  4519                           ;FlashApp.c: 109: if (readAddress >= 0x7FF0)
  4520  0008C2  51FC               	movf	(_readAddress+3)& (0+255),w,b
  4521  0008C4  11FB               	iorwf	(_readAddress+2)& (0+255),w,b
  4522  0008C6  E106               	bnz	u7280
  4523  0008C8  0EF0               	movlw	240
  4524  0008CA  5DF9               	subwf	_readAddress& (0+255),w,b
  4525  0008CC  0E7F               	movlw	127
  4526  0008CE  59FA               	subwfb	(_readAddress+1)& (0+255),w,b
  4527  0008D0  A0D8               	btfss	status,0,c
  4528  0008D2  D015               	goto	l300
  4529  0008D4                     u7280:
  4530                           
  4531                           ; BSR set to: 0
  4532                           ;FlashApp.c: 110: {
  4533                           ;FlashApp.c: 111: readAddress = 0x4000;
  4534  0008D4  0E00               	movlw	0
  4535  0008D6  6FF9               	movwf	_readAddress& (0+255),b
  4536  0008D8  0E40               	movlw	64
  4537  0008DA  6FFA               	movwf	(_readAddress+1)& (0+255),b
  4538  0008DC  0E00               	movlw	0
  4539  0008DE  6FFB               	movwf	(_readAddress+2)& (0+255),b
  4540  0008E0  0E00               	movlw	0
  4541  0008E2  6FFC               	movwf	(_readAddress+3)& (0+255),b
  4542                           
  4543                           ; BSR set to: 0
  4544                           ;FlashApp.c: 112: }
  4545                           ;FlashApp.c: 114: }
  4546  0008E4  D00C               	goto	l300
  4547  0008E6                     l297:
  4548                           
  4549                           ;FlashApp.c: 115: else
  4550                           ;FlashApp.c: 116: {
  4551                           ;FlashApp.c: 117: if(numOfValidateSamples == 0)
  4552                           
  4553                           ; BSR set to: 0
  4554  0008E6  5031               	movf	_numOfValidateSamples,w,c
  4555  0008E8  1032               	iorwf	_numOfValidateSamples+1,w,c
  4556  0008EA  1033               	iorwf	_numOfValidateSamples+2,w,c
  4557  0008EC  1034               	iorwf	_numOfValidateSamples+3,w,c
  4558  0008EE  A4D8               	btfss	status,2,c
  4559  0008F0  D006               	goto	l300
  4560                           
  4561                           ;FlashApp.c: 118: {
  4562                           ;FlashApp.c: 119: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_NO_SAMPLE_YET
      +                          );
  4563  0008F2  0E55               	movlw	85
  4564  0008F4  6E24               	movwf	SendAckMessage@inRequest,c
  4565  0008F6  0E05               	movlw	5
  4566  0008F8  ECF7  F016         	call	_SendAckMessage
  4567                           
  4568                           ;FlashApp.c: 120: return;
  4569  0008FC  0012               	return	
  4570  0008FE                     l300:
  4571  0008FE                     l7277:
  4572                           
  4573                           ;FlashApp.c: 121: }
  4574                           ;FlashApp.c: 123: }
  4575                           ;FlashApp.c: 124: }
  4576                           ;FlashApp.c: 127: TxMsg[(0)] = (0x24);
  4577  0008FE  0E24               	movlw	36
  4578  000900  0100               	movlb	0	; () banked
  4579  000902  6F6C               	movwf	FlashReadUart@TxMsg& (0+255),b
  4580                           
  4581                           ;FlashApp.c: 128: TxMsg[(1)] = FLASH_MSG;
  4582  000904  0E05               	movlw	5
  4583  000906  6F6D               	movwf	(FlashReadUart@TxMsg+1)& (0+255),b
  4584                           
  4585                           ;FlashApp.c: 129: TxMsg[(2)] = FLASH_SEND_RAW_DATA;
  4586  000908  0E54               	movlw	84
  4587  00090A  6F6E               	movwf	(FlashReadUart@TxMsg+2)& (0+255),b
  4588                           
  4589                           ;FlashApp.c: 130: TxMsg[(3)] = (64);
  4590  00090C  0E40               	movlw	64
  4591  00090E  6F6F               	movwf	(FlashReadUart@TxMsg+3)& (0+255),b
  4592                           
  4593                           ;FlashApp.c: 132: for (j=0; j<numOfSampleToRead; j++)
  4594  000910  0E00               	movlw	0
  4595  000912  6FBA               	movwf	(FlashReadUart@j+1)& (0+255),b
  4596  000914  0E00               	movlw	0
  4597  000916  6FB9               	movwf	FlashReadUart@j& (0+255),b
  4598  000918  D084               	goto	l301
  4599  00091A                     
  4600                           ; BSR set to: 0
  4601                           ;FlashApp.c: 133: {
  4602                           ;FlashApp.c: 135: for(int idx = 0; idx < (64); idx++)
  4603                           
  4604                           ; BSR set to: 0
  4605  00091A  0E00               	movlw	0
  4606  00091C  6FBC               	movwf	(FlashReadUart@idx+1)& (0+255),b
  4607  00091E  0E00               	movlw	0
  4608  000920  6FBB               	movwf	FlashReadUart@idx& (0+255),b
  4609  000922                     l7281:
  4610                           
  4611                           ; BSR set to: 0
  4612  000922  BFBC               	btfsc	(FlashReadUart@idx+1)& (0+255),7,b
  4613  000924  D006               	goto	l303
  4614  000926  51BC               	movf	(FlashReadUart@idx+1)& (0+255),w,b
  4615  000928  E12C               	bnz	l7291
  4616  00092A  0E40               	movlw	64
  4617  00092C  5DBB               	subwf	FlashReadUart@idx& (0+255),w,b
  4618  00092E  B0D8               	btfsc	status,0,c
  4619  000930  D028               	goto	u7310
  4620  000932                     l303:
  4621                           
  4622                           ; BSR set to: 0
  4623                           ;FlashApp.c: 136: {
  4624                           ;FlashApp.c: 137: TxMsg[(0x4) + idx] = FLASH_ReadByte(readAddress + idx);
  4625                           
  4626                           ; BSR set to: 0
  4627  000932  0E04               	movlw	4
  4628  000934  25BB               	addwf	FlashReadUart@idx& (0+255),w,b
  4629  000936  6F60               	movwf	??_FlashReadUart& (0+255),b
  4630  000938  0E00               	movlw	0
  4631  00093A  21BC               	addwfc	(FlashReadUart@idx+1)& (0+255),w,b
  4632  00093C  6F61               	movwf	(??_FlashReadUart+1)& (0+255),b
  4633  00093E  0E6C               	movlw	low FlashReadUart@TxMsg
  4634  000940  2560               	addwf	??_FlashReadUart& (0+255),w,b
  4635  000942  6ED9               	movwf	fsr2l,c
  4636  000944  0E00               	movlw	high FlashReadUart@TxMsg
  4637  000946  2161               	addwfc	(??_FlashReadUart+1)& (0+255),w,b
  4638  000948  6EDA               	movwf	fsr2h,c
  4639  00094A  C0BB  F062         	movff	FlashReadUart@idx,??_FlashReadUart+2
  4640  00094E  C0BC  F063         	movff	FlashReadUart@idx+1,??_FlashReadUart+3
  4641  000952  0E00               	movlw	0
  4642  000954  BF63               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  4643  000956  0EFF               	movlw	255
  4644  000958  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  4645  00095A  6F65               	movwf	(??_FlashReadUart+5)& (0+255),b
  4646  00095C  51F9               	movf	_readAddress& (0+255),w,b
  4647  00095E  2562               	addwf	(??_FlashReadUart+2)& (0+255),w,b
  4648  000960  6E18               	movwf	FLASH_ReadByte@flashAddr,c
  4649  000962  51FA               	movf	(_readAddress+1)& (0+255),w,b
  4650  000964  2163               	addwfc	(??_FlashReadUart+3)& (0+255),w,b
  4651  000966  6E19               	movwf	FLASH_ReadByte@flashAddr+1,c
  4652  000968  51FB               	movf	(_readAddress+2)& (0+255),w,b
  4653  00096A  2164               	addwfc	(??_FlashReadUart+4)& (0+255),w,b
  4654  00096C  6E1A               	movwf	FLASH_ReadByte@flashAddr+2,c
  4655  00096E  51FC               	movf	(_readAddress+3)& (0+255),w,b
  4656  000970  2165               	addwfc	(??_FlashReadUart+5)& (0+255),w,b
  4657  000972  6E1B               	movwf	FLASH_ReadByte@flashAddr+3,c
  4658  000974  EC76  F01B         	call	_FLASH_ReadByte	;wreg free
  4659  000978  6EDF               	movwf	indf2,c
  4660  00097A  0100               	movlb	0	; () banked
  4661  00097C  4BBB               	infsnz	FlashReadUart@idx& (0+255),f,b
  4662  00097E  2BBC               	incf	(FlashReadUart@idx+1)& (0+255),f,b
  4663  000980  D7D0               	goto	l7281
  4664  000982                     u7310:
  4665  000982                     l7291:
  4666                           
  4667                           ; BSR set to: 0
  4668                           ;FlashApp.c: 138: }
  4669                           ;FlashApp.c: 140: readAddress += (64);
  4670  000982  0E40               	movlw	64
  4671  000984  27F9               	addwf	_readAddress& (0+255),f,b
  4672  000986  0E00               	movlw	0
  4673  000988  23FA               	addwfc	(_readAddress+1)& (0+255),f,b
  4674  00098A  23FB               	addwfc	(_readAddress+2)& (0+255),f,b
  4675  00098C  23FC               	addwfc	(_readAddress+3)& (0+255),f,b
  4676                           
  4677                           ;FlashApp.c: 141: if (readAddress >= 0x7FF0)
  4678  00098E  51FC               	movf	(_readAddress+3)& (0+255),w,b
  4679  000990  11FB               	iorwf	(_readAddress+2)& (0+255),w,b
  4680  000992  E106               	bnz	u7320
  4681  000994  0EF0               	movlw	240
  4682  000996  5DF9               	subwf	_readAddress& (0+255),w,b
  4683  000998  0E7F               	movlw	127
  4684  00099A  59FA               	subwfb	(_readAddress+1)& (0+255),w,b
  4685  00099C  A0D8               	btfss	status,0,c
  4686  00099E  D008               	goto	l305
  4687  0009A0                     u7320:
  4688                           
  4689                           ; BSR set to: 0
  4690                           ;FlashApp.c: 142: {
  4691                           ;FlashApp.c: 143: readAddress = 0x4000;
  4692  0009A0  0E00               	movlw	0
  4693  0009A2  6FF9               	movwf	_readAddress& (0+255),b
  4694  0009A4  0E40               	movlw	64
  4695  0009A6  6FFA               	movwf	(_readAddress+1)& (0+255),b
  4696  0009A8  0E00               	movlw	0
  4697  0009AA  6FFB               	movwf	(_readAddress+2)& (0+255),b
  4698  0009AC  0E00               	movlw	0
  4699  0009AE  6FFC               	movwf	(_readAddress+3)& (0+255),b
  4700  0009B0                     l305:
  4701                           
  4702                           ; BSR set to: 0
  4703                           ;FlashApp.c: 144: }
  4704                           ;FlashApp.c: 145: TxMsg[(64) + (0x4)] = crc8(TxMsg, (64) + (0x4));
  4705                           
  4706                           ; BSR set to: 0
  4707  0009B0  0E6C               	movlw	low FlashReadUart@TxMsg
  4708  0009B2  6E18               	movwf	crc8@dataArray,c
  4709  0009B4  0E00               	movlw	high FlashReadUart@TxMsg
  4710  0009B6  6E19               	movwf	crc8@dataArray+1,c
  4711  0009B8  0E00               	movlw	0
  4712  0009BA  6E1B               	movwf	crc8@dataSize+1,c
  4713  0009BC  0E44               	movlw	68
  4714  0009BE  6E1A               	movwf	crc8@dataSize,c
  4715  0009C0  EC48  F017         	call	_crc8	;wreg free
  4716  0009C4  0100               	movlb	0	; () banked
  4717  0009C6  6FB0               	movwf	(FlashReadUart@TxMsg+68)& (0+255),b
  4718                           
  4719                           ; BSR set to: 0
  4720                           ;FlashApp.c: 147: WriteUartMessage(TxMsg, (64) + (0x4) + 1);
  4721  0009C8  0E6C               	movlw	low FlashReadUart@TxMsg
  4722  0009CA  6E19               	movwf	WriteUartMessage@dataBuf,c
  4723  0009CC  0E00               	movlw	high FlashReadUart@TxMsg
  4724  0009CE  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  4725  0009D0  0E00               	movlw	0
  4726  0009D2  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  4727  0009D4  0E45               	movlw	69
  4728  0009D6  6E1B               	movwf	WriteUartMessage@dataSize,c
  4729  0009D8  EC9D  F019         	call	_WriteUartMessage	;wreg free
  4730                           
  4731                           ;FlashApp.c: 149: if(numOfValidateSamples)
  4732  0009DC  5031               	movf	_numOfValidateSamples,w,c
  4733  0009DE  1032               	iorwf	_numOfValidateSamples+1,w,c
  4734  0009E0  1033               	iorwf	_numOfValidateSamples+2,w,c
  4735  0009E2  1034               	iorwf	_numOfValidateSamples+3,w,c
  4736  0009E4  B4D8               	btfsc	status,2,c
  4737  0009E6  D01A               	goto	l308
  4738                           
  4739                           ;FlashApp.c: 150: {
  4740                           ;FlashApp.c: 151: if (numOfReadSamples < ((0x4000-0x7FF0)/(64)))
  4741  0009E8  043E               	decf	_numOfReadSamples,w,c
  4742  0009EA  0EFF               	movlw	255
  4743  0009EC  583F               	subwfb	_numOfReadSamples+1,w,c
  4744  0009EE  0EFF               	movlw	255
  4745  0009F0  5840               	subwfb	_numOfReadSamples+2,w,c
  4746  0009F2  0EFF               	movlw	255
  4747  0009F4  5841               	subwfb	_numOfReadSamples+3,w,c
  4748  0009F6  B0D8               	btfsc	status,0,c
  4749  0009F8  D006               	goto	l307
  4750                           
  4751                           ;FlashApp.c: 152: {
  4752                           ;FlashApp.c: 153: numOfReadSamples++;
  4753  0009FA  0E01               	movlw	1
  4754  0009FC  263E               	addwf	_numOfReadSamples,f,c
  4755  0009FE  0E00               	movlw	0
  4756  000A00  223F               	addwfc	_numOfReadSamples+1,f,c
  4757  000A02  2240               	addwfc	_numOfReadSamples+2,f,c
  4758  000A04  2241               	addwfc	_numOfReadSamples+3,f,c
  4759  000A06                     l307:
  4760                           
  4761                           ;FlashApp.c: 154: }
  4762                           ;FlashApp.c: 155: if (numOfValidateSamples > 0)
  4763  000A06  5031               	movf	_numOfValidateSamples,w,c
  4764  000A08  1032               	iorwf	_numOfValidateSamples+1,w,c
  4765  000A0A  1033               	iorwf	_numOfValidateSamples+2,w,c
  4766  000A0C  1034               	iorwf	_numOfValidateSamples+3,w,c
  4767  000A0E  B4D8               	btfsc	status,2,c
  4768  000A10  D005               	goto	l308
  4769                           
  4770                           ;FlashApp.c: 156: {
  4771                           ;FlashApp.c: 157: numOfValidateSamples--;
  4772  000A12  0631               	decf	_numOfValidateSamples,f,c
  4773  000A14  0E00               	movlw	0
  4774  000A16  5A32               	subwfb	_numOfValidateSamples+1,f,c
  4775  000A18  5A33               	subwfb	_numOfValidateSamples+2,f,c
  4776  000A1A  5A34               	subwfb	_numOfValidateSamples+3,f,c
  4777  000A1C                     l308:
  4778  000A1C  0100               	movlb	0	; () banked
  4779  000A1E  4BB9               	infsnz	FlashReadUart@j& (0+255),f,b
  4780  000A20  2BBA               	incf	(FlashReadUart@j+1)& (0+255),f,b
  4781  000A22                     l301:
  4782                           
  4783                           ; BSR set to: 0
  4784                           
  4785                           ; BSR set to: 0
  4786  000A22  502C               	movf	FlashReadUart@numOfSampleToRead,w,c
  4787  000A24  5DB9               	subwf	FlashReadUart@j& (0+255),w,b
  4788  000A26  51BA               	movf	(FlashReadUart@j+1)& (0+255),w,b
  4789  000A28  0A80               	xorlw	128
  4790  000A2A  6F60               	movwf	??_FlashReadUart& (0+255),b
  4791  000A2C  502D               	movf	FlashReadUart@numOfSampleToRead+1,w,c
  4792  000A2E  0A80               	xorlw	128
  4793  000A30  5960               	subwfb	??_FlashReadUart& (0+255),w,b
  4794  000A32  B0D8               	btfsc	status,0,c
  4795  000A34  0012               	return	
  4796  000A36  D771               	goto	l302
  4797  000A38                     __end_of_FlashReadUart:
  4798                           	opt stack 0
  4799                           tosu	equ	0xFFF
  4800                           tosh	equ	0xFFE
  4801                           tosl	equ	0xFFD
  4802                           pclath	equ	0xFFA
  4803                           tblptru	equ	0xFF8
  4804                           tblptrh	equ	0xFF7
  4805                           tblptrl	equ	0xFF6
  4806                           tablat	equ	0xFF5
  4807                           prodh	equ	0xFF4
  4808                           prodl	equ	0xFF3
  4809                           postinc0	equ	0xFEE
  4810                           wreg	equ	0xFE8
  4811                           postdec1	equ	0xFE5
  4812                           fsr1l	equ	0xFE1
  4813                           indf2	equ	0xFDF
  4814                           postinc2	equ	0xFDE
  4815                           fsr2h	equ	0xFDA
  4816                           fsr2l	equ	0xFD9
  4817                           status	equ	0xFD8
  4818                           
  4819 ;; *************** function _abs *****************
  4820 ;; Defined at:
  4821 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abs.c"
  4822 ;; Parameters:    Size  Location     Type
  4823 ;;  a               2   23[COMRAM] int 
  4824 ;; Auto vars:     Size  Location     Type
  4825 ;;		None
  4826 ;; Return value:  Size  Location     Type
  4827 ;;                  2   23[COMRAM] int 
  4828 ;; Registers used:
  4829 ;;		wreg, status,2, status,0
  4830 ;; Tracked objects:
  4831 ;;		On entry : 0/0
  4832 ;;		On exit  : 0/0
  4833 ;;		Unchanged: 0/0
  4834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4835 ;;      Params:         2       0       0       0       0       0       0
  4836 ;;      Locals:         0       0       0       0       0       0       0
  4837 ;;      Temps:          2       0       0       0       0       0       0
  4838 ;;      Totals:         4       0       0       0       0       0       0
  4839 ;;Total ram usage:        4 bytes
  4840 ;; Hardware stack levels used:    1
  4841 ;; Hardware stack levels required when called:    3
  4842 ;; This function calls:
  4843 ;;		Nothing
  4844 ;; This function is called by:
  4845 ;;		_FlashReadUart
  4846 ;; This function uses a non-reentrant model
  4847 ;;
  4848                           
  4849                           	psect	text19
  4850  0034BA                     __ptext19:
  4851                           	opt stack 0
  4852  0034BA                     _abs:
  4853                           	opt stack 24
  4854                           
  4855                           ;incstack = 0
  4856  0034BA  AE19               	btfss	abs@a+1,7,c
  4857  0034BC  D00D               	goto	l1420
  4858  0034BE  C018  F01A         	movff	abs@a,??_abs
  4859  0034C2  C019  F01B         	movff	abs@a+1,??_abs+1
  4860  0034C6  1E1A               	comf	??_abs,f,c
  4861  0034C8  1E1B               	comf	??_abs+1,f,c
  4862  0034CA  4A1A               	infsnz	??_abs,f,c
  4863  0034CC  2A1B               	incf	??_abs+1,f,c
  4864  0034CE  C01A  F018         	movff	??_abs,?_abs
  4865  0034D2  C01B  F019         	movff	??_abs+1,?_abs+1
  4866  0034D6  0012               	return	
  4867  0034D8                     l1420:
  4868  0034D8  C018  F018         	movff	abs@a,?_abs
  4869  0034DC  C019  F019         	movff	abs@a+1,?_abs+1
  4870  0034E0  0012               	return		;funcret
  4871  0034E2                     __end_of_abs:
  4872                           	opt stack 0
  4873                           tosu	equ	0xFFF
  4874                           tosh	equ	0xFFE
  4875                           tosl	equ	0xFFD
  4876                           pclath	equ	0xFFA
  4877                           tblptru	equ	0xFF8
  4878                           tblptrh	equ	0xFF7
  4879                           tblptrl	equ	0xFF6
  4880                           tablat	equ	0xFF5
  4881                           prodh	equ	0xFF4
  4882                           prodl	equ	0xFF3
  4883                           postinc0	equ	0xFEE
  4884                           wreg	equ	0xFE8
  4885                           postdec1	equ	0xFE5
  4886                           fsr1l	equ	0xFE1
  4887                           indf2	equ	0xFDF
  4888                           postinc2	equ	0xFDE
  4889                           fsr2h	equ	0xFDA
  4890                           fsr2l	equ	0xFD9
  4891                           status	equ	0xFD8
  4892                           
  4893 ;; *************** function _FLASH_ReadByte *****************
  4894 ;; Defined at:
  4895 ;;		line 58 in file "mcc_generated_files/memory.c"
  4896 ;; Parameters:    Size  Location     Type
  4897 ;;  flashAddr       4   23[COMRAM] unsigned long 
  4898 ;; Auto vars:     Size  Location     Type
  4899 ;;		None
  4900 ;; Return value:  Size  Location     Type
  4901 ;;                  1    wreg      unsigned char 
  4902 ;; Registers used:
  4903 ;;		wreg, status,2
  4904 ;; Tracked objects:
  4905 ;;		On entry : 0/0
  4906 ;;		On exit  : 0/0
  4907 ;;		Unchanged: 0/0
  4908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4909 ;;      Params:         4       0       0       0       0       0       0
  4910 ;;      Locals:         0       0       0       0       0       0       0
  4911 ;;      Temps:          0       0       0       0       0       0       0
  4912 ;;      Totals:         4       0       0       0       0       0       0
  4913 ;;Total ram usage:        4 bytes
  4914 ;; Hardware stack levels used:    1
  4915 ;; Hardware stack levels required when called:    3
  4916 ;; This function calls:
  4917 ;;		Nothing
  4918 ;; This function is called by:
  4919 ;;		_FlashReadUart
  4920 ;;		_FlashTest
  4921 ;;		_FLASH_ReadWord
  4922 ;;		_FLASH_WriteByte
  4923 ;; This function uses a non-reentrant model
  4924 ;;
  4925                           
  4926                           	psect	text20
  4927  0036EC                     __ptext20:
  4928                           	opt stack 0
  4929  0036EC                     _FLASH_ReadByte:
  4930                           	opt stack 24
  4931                           
  4932                           ;memory.c: 60: TBLPTRU = (uint8_t)((flashAddr & 0x00FF0000) >> 16);
  4933                           
  4934                           ;incstack = 0
  4935  0036EC  C01A  FFF8         	movff	FLASH_ReadByte@flashAddr+2,tblptru	;volatile
  4936                           
  4937                           ;memory.c: 61: TBLPTRH = (uint8_t)((flashAddr & 0x0000FF00)>> 8);
  4938  0036F0  C019  FFF7         	movff	FLASH_ReadByte@flashAddr+1,tblptrh	;volatile
  4939                           
  4940                           ;memory.c: 62: TBLPTRL = (uint8_t)(flashAddr & 0x000000FF);
  4941  0036F4  C018  FFF6         	movff	FLASH_ReadByte@flashAddr,tblptrl	;volatile
  4942  0036F8  0008               	tblrd		*	;# 
  4943                           
  4944                           ;memory.c: 66: return (TABLAT);
  4945  0036FA  50F5               	movf	tablat,w,c	;volatile
  4946  0036FC  0012               	return	
  4947  0036FE                     __end_of_FLASH_ReadByte:
  4948                           	opt stack 0
  4949                           tosu	equ	0xFFF
  4950                           tosh	equ	0xFFE
  4951                           tosl	equ	0xFFD
  4952                           pclath	equ	0xFFA
  4953                           tblptru	equ	0xFF8
  4954                           tblptrh	equ	0xFF7
  4955                           tblptrl	equ	0xFF6
  4956                           tablat	equ	0xFF5
  4957                           prodh	equ	0xFF4
  4958                           prodl	equ	0xFF3
  4959                           postinc0	equ	0xFEE
  4960                           wreg	equ	0xFE8
  4961                           postdec1	equ	0xFE5
  4962                           fsr1l	equ	0xFE1
  4963                           indf2	equ	0xFDF
  4964                           postinc2	equ	0xFDE
  4965                           fsr2h	equ	0xFDA
  4966                           fsr2l	equ	0xFD9
  4967                           status	equ	0xFD8
  4968                           
  4969 ;; *************** function _FlashReadCondition *****************
  4970 ;; Defined at:
  4971 ;;		line 178 in file "FlashApp.c"
  4972 ;; Parameters:    Size  Location     Type
  4973 ;;		None
  4974 ;; Auto vars:     Size  Location     Type
  4975 ;;  TxMsg           9   39[COMRAM] unsigned char [9]
  4976 ;; Return value:  Size  Location     Type
  4977 ;;                  1    wreg      void 
  4978 ;; Registers used:
  4979 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4980 ;; Tracked objects:
  4981 ;;		On entry : 0/0
  4982 ;;		On exit  : 0/0
  4983 ;;		Unchanged: 0/0
  4984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4985 ;;      Params:         0       0       0       0       0       0       0
  4986 ;;      Locals:         9       0       0       0       0       0       0
  4987 ;;      Temps:          4       0       0       0       0       0       0
  4988 ;;      Totals:        13       0       0       0       0       0       0
  4989 ;;Total ram usage:       13 bytes
  4990 ;; Hardware stack levels used:    1
  4991 ;; Hardware stack levels required when called:    5
  4992 ;; This function calls:
  4993 ;;		_WriteUartMessage
  4994 ;;		_ZeroArray
  4995 ;;		_crc8
  4996 ;;		_make8
  4997 ;; This function is called by:
  4998 ;;		_GroupFlashMemory
  4999 ;; This function uses a non-reentrant model
  5000 ;;
  5001                           
  5002                           	psect	text21
  5003  0015FE                     __ptext21:
  5004                           	opt stack 0
  5005  0015FE                     _FlashReadCondition:
  5006                           	opt stack 23
  5007                           
  5008                           ;FlashApp.c: 181: char TxMsg[4 + (0x4) + 1];
  5009                           ;FlashApp.c: 182: ZeroArray(TxMsg, 4 + (0x4) + 1);
  5010                           
  5011                           ;incstack = 0
  5012  0015FE  0E28               	movlw	low FlashReadCondition@TxMsg
  5013  001600  6E20               	movwf	ZeroArray@array,c
  5014  001602  0E00               	movlw	high FlashReadCondition@TxMsg
  5015  001604  6E21               	movwf	ZeroArray@array+1,c
  5016  001606  0E00               	movlw	0
  5017  001608  6E23               	movwf	ZeroArray@size+1,c
  5018  00160A  0E09               	movlw	9
  5019  00160C  6E22               	movwf	ZeroArray@size,c
  5020  00160E  ECFD  F01A         	call	_ZeroArray	;wreg free
  5021                           
  5022                           ;FlashApp.c: 185: TxMsg[(0)] = (0x24);
  5023  001612  0E24               	movlw	36
  5024  001614  6E28               	movwf	FlashReadCondition@TxMsg,c
  5025                           
  5026                           ;FlashApp.c: 186: TxMsg[(1)] = FLASH_MSG;
  5027  001616  0E05               	movlw	5
  5028  001618  6E29               	movwf	FlashReadCondition@TxMsg+1,c
  5029                           
  5030                           ;FlashApp.c: 187: TxMsg[(2)] = FLASH_READ_CONDITION;
  5031  00161A  0E52               	movlw	82
  5032  00161C  6E2A               	movwf	FlashReadCondition@TxMsg+2,c
  5033                           
  5034                           ;FlashApp.c: 188: TxMsg[(3)] = 4;
  5035  00161E  0E04               	movlw	4
  5036  001620  6E2B               	movwf	FlashReadCondition@TxMsg+3,c
  5037                           
  5038                           ;FlashApp.c: 193: TxMsg[(0x4) + 0] = make8(0x7FF0 - 0x4000,1);
  5039  001622  0EF0               	movlw	240
  5040  001624  6E18               	movwf	make8@data,c
  5041  001626  0E3F               	movlw	63
  5042  001628  6E19               	movwf	make8@data+1,c
  5043  00162A  0E00               	movlw	0
  5044  00162C  6E1A               	movwf	make8@data+2,c
  5045  00162E  0E00               	movlw	0
  5046  001630  6E1B               	movwf	make8@data+3,c
  5047  001632  0E01               	movlw	1
  5048  001634  6E1C               	movwf	make8@dataLocation,c
  5049  001636  EC1B  F015         	call	_make8	;wreg free
  5050  00163A  6E2C               	movwf	FlashReadCondition@TxMsg+4,c
  5051                           
  5052                           ;FlashApp.c: 194: TxMsg[(0x4) + 1] = make8(0x7FF0 - 0x4000,0);
  5053  00163C  0EF0               	movlw	240
  5054  00163E  6E18               	movwf	make8@data,c
  5055  001640  0E3F               	movlw	63
  5056  001642  6E19               	movwf	make8@data+1,c
  5057  001644  0E00               	movlw	0
  5058  001646  6E1A               	movwf	make8@data+2,c
  5059  001648  0E00               	movlw	0
  5060  00164A  6E1B               	movwf	make8@data+3,c
  5061  00164C  0E00               	movlw	0
  5062  00164E  6E1C               	movwf	make8@dataLocation,c
  5063  001650  EC1B  F015         	call	_make8	;wreg free
  5064  001654  6E2D               	movwf	FlashReadCondition@TxMsg+5,c
  5065                           
  5066                           ;FlashApp.c: 197: TxMsg[(0x4) + 2] = make8(0x7FF0 - writeAddress,1);
  5067  001656  C042  F024         	movff	_writeAddress,??_FlashReadCondition
  5068  00165A  C043  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  5069  00165E  C044  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  5070  001662  C045  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  5071  001666  1E24               	comf	??_FlashReadCondition,f,c
  5072  001668  1E25               	comf	??_FlashReadCondition+1,f,c
  5073  00166A  1E26               	comf	??_FlashReadCondition+2,f,c
  5074  00166C  1E27               	comf	??_FlashReadCondition+3,f,c
  5075  00166E  2A24               	incf	??_FlashReadCondition,f,c
  5076  001670  0E00               	movlw	0
  5077  001672  2225               	addwfc	??_FlashReadCondition+1,f,c
  5078  001674  2226               	addwfc	??_FlashReadCondition+2,f,c
  5079  001676  2227               	addwfc	??_FlashReadCondition+3,f,c
  5080  001678  0EF0               	movlw	240
  5081  00167A  2424               	addwf	??_FlashReadCondition,w,c
  5082  00167C  6E18               	movwf	make8@data,c
  5083  00167E  0E7F               	movlw	127
  5084  001680  2025               	addwfc	??_FlashReadCondition+1,w,c
  5085  001682  6E19               	movwf	make8@data+1,c
  5086  001684  0E00               	movlw	0
  5087  001686  2026               	addwfc	??_FlashReadCondition+2,w,c
  5088  001688  6E1A               	movwf	make8@data+2,c
  5089  00168A  0E00               	movlw	0
  5090  00168C  2027               	addwfc	??_FlashReadCondition+3,w,c
  5091  00168E  6E1B               	movwf	make8@data+3,c
  5092  001690  0E01               	movlw	1
  5093  001692  6E1C               	movwf	make8@dataLocation,c
  5094  001694  EC1B  F015         	call	_make8	;wreg free
  5095  001698  6E2E               	movwf	FlashReadCondition@TxMsg+6,c
  5096                           
  5097                           ;FlashApp.c: 198: TxMsg[(0x4) + 3] = make8(0x7FF0 - writeAddress,0);
  5098  00169A  C042  F024         	movff	_writeAddress,??_FlashReadCondition
  5099  00169E  C043  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  5100  0016A2  C044  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  5101  0016A6  C045  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  5102  0016AA  1E24               	comf	??_FlashReadCondition,f,c
  5103  0016AC  1E25               	comf	??_FlashReadCondition+1,f,c
  5104  0016AE  1E26               	comf	??_FlashReadCondition+2,f,c
  5105  0016B0  1E27               	comf	??_FlashReadCondition+3,f,c
  5106  0016B2  2A24               	incf	??_FlashReadCondition,f,c
  5107  0016B4  0E00               	movlw	0
  5108  0016B6  2225               	addwfc	??_FlashReadCondition+1,f,c
  5109  0016B8  2226               	addwfc	??_FlashReadCondition+2,f,c
  5110  0016BA  2227               	addwfc	??_FlashReadCondition+3,f,c
  5111  0016BC  0EF0               	movlw	240
  5112  0016BE  2424               	addwf	??_FlashReadCondition,w,c
  5113  0016C0  6E18               	movwf	make8@data,c
  5114  0016C2  0E7F               	movlw	127
  5115  0016C4  2025               	addwfc	??_FlashReadCondition+1,w,c
  5116  0016C6  6E19               	movwf	make8@data+1,c
  5117  0016C8  0E00               	movlw	0
  5118  0016CA  2026               	addwfc	??_FlashReadCondition+2,w,c
  5119  0016CC  6E1A               	movwf	make8@data+2,c
  5120  0016CE  0E00               	movlw	0
  5121  0016D0  2027               	addwfc	??_FlashReadCondition+3,w,c
  5122  0016D2  6E1B               	movwf	make8@data+3,c
  5123  0016D4  0E00               	movlw	0
  5124  0016D6  6E1C               	movwf	make8@dataLocation,c
  5125  0016D8  EC1B  F015         	call	_make8	;wreg free
  5126  0016DC  6E2F               	movwf	FlashReadCondition@TxMsg+7,c
  5127                           
  5128                           ;FlashApp.c: 200: TxMsg[4 + (0x4)] = crc8(TxMsg, 4 + (0x4));
  5129  0016DE  0E28               	movlw	low FlashReadCondition@TxMsg
  5130  0016E0  6E18               	movwf	crc8@dataArray,c
  5131  0016E2  0E00               	movlw	high FlashReadCondition@TxMsg
  5132  0016E4  6E19               	movwf	crc8@dataArray+1,c
  5133  0016E6  0E00               	movlw	0
  5134  0016E8  6E1B               	movwf	crc8@dataSize+1,c
  5135  0016EA  0E08               	movlw	8
  5136  0016EC  6E1A               	movwf	crc8@dataSize,c
  5137  0016EE  EC48  F017         	call	_crc8	;wreg free
  5138  0016F2  6E30               	movwf	FlashReadCondition@TxMsg+8,c
  5139                           
  5140                           ;FlashApp.c: 202: WriteUartMessage(TxMsg, 4 + (0x4) + 1);
  5141  0016F4  0E28               	movlw	low FlashReadCondition@TxMsg
  5142  0016F6  6E19               	movwf	WriteUartMessage@dataBuf,c
  5143  0016F8  0E00               	movlw	high FlashReadCondition@TxMsg
  5144  0016FA  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5145  0016FC  0E00               	movlw	0
  5146  0016FE  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5147  001700  0E09               	movlw	9
  5148  001702  6E1B               	movwf	WriteUartMessage@dataSize,c
  5149  001704  EC9D  F019         	call	_WriteUartMessage	;wreg free
  5150  001708  0012               	return		;funcret
  5151  00170A                     __end_of_FlashReadCondition:
  5152                           	opt stack 0
  5153                           tosu	equ	0xFFF
  5154                           tosh	equ	0xFFE
  5155                           tosl	equ	0xFFD
  5156                           pclath	equ	0xFFA
  5157                           tblptru	equ	0xFF8
  5158                           tblptrh	equ	0xFF7
  5159                           tblptrl	equ	0xFF6
  5160                           tablat	equ	0xFF5
  5161                           prodh	equ	0xFF4
  5162                           prodl	equ	0xFF3
  5163                           postinc0	equ	0xFEE
  5164                           wreg	equ	0xFE8
  5165                           postdec1	equ	0xFE5
  5166                           fsr1l	equ	0xFE1
  5167                           indf2	equ	0xFDF
  5168                           postinc2	equ	0xFDE
  5169                           fsr2h	equ	0xFDA
  5170                           fsr2l	equ	0xFD9
  5171                           status	equ	0xFD8
  5172                           
  5173 ;; *************** function _FlashEreaseMem *****************
  5174 ;; Defined at:
  5175 ;;		line 168 in file "FlashApp.c"
  5176 ;; Parameters:    Size  Location     Type
  5177 ;;		None
  5178 ;; Auto vars:     Size  Location     Type
  5179 ;;		None
  5180 ;; Return value:  Size  Location     Type
  5181 ;;                  1    wreg      void 
  5182 ;; Registers used:
  5183 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5184 ;; Tracked objects:
  5185 ;;		On entry : 0/0
  5186 ;;		On exit  : 0/0
  5187 ;;		Unchanged: 0/0
  5188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5189 ;;      Params:         0       0       0       0       0       0       0
  5190 ;;      Locals:         0       0       0       0       0       0       0
  5191 ;;      Temps:          0       0       0       0       0       0       0
  5192 ;;      Totals:         0       0       0       0       0       0       0
  5193 ;;Total ram usage:        0 bytes
  5194 ;; Hardware stack levels used:    1
  5195 ;; Hardware stack levels required when called:    6
  5196 ;; This function calls:
  5197 ;;		_SendAckMessage
  5198 ;;		_ZeroArray
  5199 ;; This function is called by:
  5200 ;;		_GroupFlashMemory
  5201 ;; This function uses a non-reentrant model
  5202 ;;
  5203                           
  5204                           	psect	text22
  5205  002D9C                     __ptext22:
  5206                           	opt stack 0
  5207  002D9C                     _FlashEreaseMem:
  5208                           	opt stack 22
  5209                           
  5210                           ;FlashApp.c: 170: writeAddress = 0x4000;
  5211                           
  5212                           ;incstack = 0
  5213  002D9C  0E00               	movlw	0
  5214  002D9E  6E42               	movwf	_writeAddress,c
  5215  002DA0  0E40               	movlw	64
  5216  002DA2  6E43               	movwf	_writeAddress+1,c
  5217  002DA4  0E00               	movlw	0
  5218  002DA6  6E44               	movwf	_writeAddress+2,c
  5219  002DA8  0E00               	movlw	0
  5220  002DAA  6E45               	movwf	_writeAddress+3,c
  5221                           
  5222                           ;FlashApp.c: 171: readAddress = 0x4000;
  5223  002DAC  0E00               	movlw	0
  5224  002DAE  0100               	movlb	0	; () banked
  5225  002DB0  6FF9               	movwf	_readAddress& (0+255),b
  5226  002DB2  0E40               	movlw	64
  5227  002DB4  6FFA               	movwf	(_readAddress+1)& (0+255),b
  5228  002DB6  0E00               	movlw	0
  5229  002DB8  6FFB               	movwf	(_readAddress+2)& (0+255),b
  5230  002DBA  0E00               	movlw	0
  5231  002DBC  6FFC               	movwf	(_readAddress+3)& (0+255),b
  5232                           
  5233                           ;FlashApp.c: 172: numOfValidateSamples = 0;
  5234  002DBE  0E00               	movlw	0
  5235  002DC0  6E31               	movwf	_numOfValidateSamples,c
  5236  002DC2  0E00               	movlw	0
  5237  002DC4  6E32               	movwf	_numOfValidateSamples+1,c
  5238  002DC6  0E00               	movlw	0
  5239  002DC8  6E33               	movwf	_numOfValidateSamples+2,c
  5240  002DCA  0E00               	movlw	0
  5241  002DCC  6E34               	movwf	_numOfValidateSamples+3,c
  5242                           
  5243                           ; BSR set to: 0
  5244                           ;FlashApp.c: 173: ZeroArray(sampleArray, (64)/sizeof(adc_result_t));
  5245  002DCE  0E6E               	movlw	low _sampleArray
  5246  002DD0  6E20               	movwf	ZeroArray@array,c
  5247  002DD2  0E01               	movlw	high _sampleArray
  5248  002DD4  6E21               	movwf	ZeroArray@array+1,c
  5249  002DD6  0E00               	movlw	0
  5250  002DD8  6E23               	movwf	ZeroArray@size+1,c
  5251  002DDA  0E20               	movlw	32
  5252  002DDC  6E22               	movwf	ZeroArray@size,c
  5253  002DDE  ECFD  F01A         	call	_ZeroArray	;wreg free
  5254                           
  5255                           ;FlashApp.c: 174: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_EREASE_MEMORY
      +                          );
  5256  002DE2  0E51               	movlw	81
  5257  002DE4  6E24               	movwf	SendAckMessage@inRequest,c
  5258  002DE6  0E05               	movlw	5
  5259  002DE8  ECF7  F016         	call	_SendAckMessage
  5260  002DEC  0012               	return		;funcret
  5261  002DEE                     __end_of_FlashEreaseMem:
  5262                           	opt stack 0
  5263                           tosu	equ	0xFFF
  5264                           tosh	equ	0xFFE
  5265                           tosl	equ	0xFFD
  5266                           pclath	equ	0xFFA
  5267                           tblptru	equ	0xFF8
  5268                           tblptrh	equ	0xFF7
  5269                           tblptrl	equ	0xFF6
  5270                           tablat	equ	0xFF5
  5271                           prodh	equ	0xFF4
  5272                           prodl	equ	0xFF3
  5273                           postinc0	equ	0xFEE
  5274                           wreg	equ	0xFE8
  5275                           postdec1	equ	0xFE5
  5276                           fsr1l	equ	0xFE1
  5277                           indf2	equ	0xFDF
  5278                           postinc2	equ	0xFDE
  5279                           fsr2h	equ	0xFDA
  5280                           fsr2l	equ	0xFD9
  5281                           status	equ	0xFD8
  5282                           
  5283 ;; *************** function _DacSetValue *****************
  5284 ;; Defined at:
  5285 ;;		line 37 in file "DacApp.c"
  5286 ;; Parameters:    Size  Location     Type
  5287 ;;  data            2   46[COMRAM] PTR unsigned char 
  5288 ;;		 -> rxMsgData(20), 
  5289 ;; Auto vars:     Size  Location     Type
  5290 ;;  regData         2   42[BANK0 ] unsigned int 
  5291 ;;  dacIndex        1   41[BANK0 ] char 
  5292 ;; Return value:  Size  Location     Type
  5293 ;;                  1    wreg      void 
  5294 ;; Registers used:
  5295 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5296 ;; Tracked objects:
  5297 ;;		On entry : 0/0
  5298 ;;		On exit  : 0/0
  5299 ;;		Unchanged: 0/0
  5300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5301 ;;      Params:         2       0       0       0       0       0       0
  5302 ;;      Locals:         0       3       0       0       0       0       0
  5303 ;;      Temps:          0       3       0       0       0       0       0
  5304 ;;      Totals:         2       6       0       0       0       0       0
  5305 ;;Total ram usage:        8 bytes
  5306 ;; Hardware stack levels used:    1
  5307 ;; Hardware stack levels required when called:    7
  5308 ;; This function calls:
  5309 ;;		_GetIntFromUartData
  5310 ;;		_SWSPI_send_word
  5311 ;;		_SendAckMessage
  5312 ;;		_StoreIntInEeprom
  5313 ;; This function is called by:
  5314 ;;		_GroupDAC
  5315 ;; This function uses a non-reentrant model
  5316 ;;
  5317                           
  5318                           	psect	text23
  5319  0026A8                     __ptext23:
  5320                           	opt stack 0
  5321  0026A8                     _DacSetValue:
  5322                           	opt stack 21
  5323                           
  5324                           ;DacApp.c: 39: uint16_t regData = GetIntFromUartData(16, data);
  5325                           
  5326                           ;incstack = 0
  5327  0026A8  C02F  F066         	movff	DacSetValue@data,GetIntFromUartData@data
  5328  0026AC  C030  F067         	movff	DacSetValue@data+1,GetIntFromUartData@data+1
  5329  0026B0  0E10               	movlw	16
  5330  0026B2  EC1E  F00F         	call	_GetIntFromUartData
  5331  0026B6  C066  F08A         	movff	?_GetIntFromUartData,DacSetValue@regData
  5332  0026BA  C067  F08B         	movff	?_GetIntFromUartData+1,DacSetValue@regData+1
  5333                           
  5334                           ;DacApp.c: 40: SWSPI_send_word(EXT_DAC, regData, 1);
  5335  0026BE  C08A  F026         	movff	DacSetValue@regData,SWSPI_send_word@data
  5336  0026C2  C08B  F027         	movff	DacSetValue@regData+1,SWSPI_send_word@data+1
  5337  0026C6  6A28               	clrf	SWSPI_send_word@data+2,c
  5338  0026C8  6A29               	clrf	SWSPI_send_word@data+3,c
  5339  0026CA  0E01               	movlw	1
  5340  0026CC  6E2A               	movwf	SWSPI_send_word@dataSize,c
  5341  0026CE  0E02               	movlw	2
  5342  0026D0  ECE7  F010         	call	_SWSPI_send_word
  5343                           
  5344                           ;DacApp.c: 43: int8_t dacIndex = (regData >> 14) + 2;
  5345  0026D4  C08A  F086         	movff	DacSetValue@regData,??_DacSetValue
  5346  0026D8  C08B  F087         	movff	DacSetValue@regData+1,??_DacSetValue+1
  5347  0026DC  0E0E               	movlw	14
  5348  0026DE  0100               	movlb	0	; () banked
  5349  0026E0  6F88               	movwf	(??_DacSetValue+2)& (0+255),b
  5350  0026E2                     u7385:
  5351  0026E2  90D8               	bcf	status,0,c
  5352  0026E4  3387               	rrcf	(??_DacSetValue+1)& (0+255),f,b
  5353  0026E6  3386               	rrcf	??_DacSetValue& (0+255),f,b
  5354  0026E8  2F88               	decfsz	(??_DacSetValue+2)& (0+255),f,b
  5355  0026EA  D7FB               	goto	u7385
  5356  0026EC  5186               	movf	??_DacSetValue& (0+255),w,b
  5357  0026EE  0F02               	addlw	2
  5358  0026F0  6F89               	movwf	DacSetValue@dacIndex& (0+255),b
  5359                           
  5360                           ; BSR set to: 0
  5361                           ;DacApp.c: 44: StoreIntInEeprom(regData, (0x10) + dacIndex, 2);
  5362  0026F2  C08A  F021         	movff	DacSetValue@regData,StoreIntInEeprom@data
  5363  0026F6  C08B  F022         	movff	DacSetValue@regData+1,StoreIntInEeprom@data+1
  5364  0026FA  6A23               	clrf	StoreIntInEeprom@data+2,c
  5365  0026FC  6A24               	clrf	StoreIntInEeprom@data+3,c
  5366  0026FE  5189               	movf	DacSetValue@dacIndex& (0+255),w,b
  5367  002700  0F10               	addlw	16
  5368  002702  6E25               	movwf	StoreIntInEeprom@address,c
  5369  002704  0E00               	movlw	0
  5370  002706  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  5371  002708  0E02               	movlw	2
  5372  00270A  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  5373  00270C  ECF8  F018         	call	_StoreIntInEeprom	;wreg free
  5374                           
  5375                           ;DacApp.c: 47: SendAckMessage((MSG_GROUPS)DAC_MSG, (MSG_REQUEST)DAC_SET_VALUE);
  5376  002710  0E61               	movlw	97
  5377  002712  6E24               	movwf	SendAckMessage@inRequest,c
  5378  002714  0E06               	movlw	6
  5379  002716  ECF7  F016         	call	_SendAckMessage
  5380  00271A  0012               	return		;funcret
  5381  00271C                     __end_of_DacSetValue:
  5382                           	opt stack 0
  5383                           tosu	equ	0xFFF
  5384                           tosh	equ	0xFFE
  5385                           tosl	equ	0xFFD
  5386                           pclath	equ	0xFFA
  5387                           tblptru	equ	0xFF8
  5388                           tblptrh	equ	0xFF7
  5389                           tblptrl	equ	0xFF6
  5390                           tablat	equ	0xFF5
  5391                           prodh	equ	0xFF4
  5392                           prodl	equ	0xFF3
  5393                           postinc0	equ	0xFEE
  5394                           wreg	equ	0xFE8
  5395                           postdec1	equ	0xFE5
  5396                           fsr1l	equ	0xFE1
  5397                           indf2	equ	0xFDF
  5398                           postinc2	equ	0xFDE
  5399                           fsr2h	equ	0xFDA
  5400                           fsr2l	equ	0xFD9
  5401                           status	equ	0xFD8
  5402                           
  5403 ;; *************** function _StoreIntInEeprom *****************
  5404 ;; Defined at:
  5405 ;;		line 88 in file "SystemCommon.c"
  5406 ;; Parameters:    Size  Location     Type
  5407 ;;  data            4   32[COMRAM] unsigned long 
  5408 ;;  address         1   36[COMRAM] unsigned char 
  5409 ;;  numOfByes       2   37[COMRAM] int 
  5410 ;; Auto vars:     Size  Location     Type
  5411 ;;  val             1   39[COMRAM] unsigned char 
  5412 ;;  idx             1   40[COMRAM] unsigned char 
  5413 ;; Return value:  Size  Location     Type
  5414 ;;                  1    wreg      void 
  5415 ;; Registers used:
  5416 ;;		wreg, status,2, status,0, cstack
  5417 ;; Tracked objects:
  5418 ;;		On entry : 0/0
  5419 ;;		On exit  : 0/0
  5420 ;;		Unchanged: 0/0
  5421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5422 ;;      Params:         7       0       0       0       0       0       0
  5423 ;;      Locals:         2       0       0       0       0       0       0
  5424 ;;      Temps:          0       0       0       0       0       0       0
  5425 ;;      Totals:         9       0       0       0       0       0       0
  5426 ;;Total ram usage:        9 bytes
  5427 ;; Hardware stack levels used:    1
  5428 ;; Hardware stack levels required when called:    5
  5429 ;; This function calls:
  5430 ;;		_EepromWrite
  5431 ;;		_make8
  5432 ;; This function is called by:
  5433 ;;		_DacSetValue
  5434 ;; This function uses a non-reentrant model
  5435 ;;
  5436                           
  5437                           	psect	text24
  5438  0031F0                     __ptext24:
  5439                           	opt stack 0
  5440  0031F0                     _StoreIntInEeprom:
  5441                           	opt stack 22
  5442                           
  5443                           ;SystemCommon.c: 90: for(uint8_t idx = numOfByes; idx; idx--)
  5444                           
  5445                           ;incstack = 0
  5446  0031F0  C026  F029         	movff	StoreIntInEeprom@numOfByes,StoreIntInEeprom@idx
  5447  0031F4  D015               	goto	l1220
  5448  0031F6                     
  5449                           ;SystemCommon.c: 91: {
  5450                           ;SystemCommon.c: 92: uint8_t val = make8(data, idx - 1);
  5451  0031F6  C021  F018         	movff	StoreIntInEeprom@data,make8@data
  5452  0031FA  C022  F019         	movff	StoreIntInEeprom@data+1,make8@data+1
  5453  0031FE  C023  F01A         	movff	StoreIntInEeprom@data+2,make8@data+2
  5454  003202  C024  F01B         	movff	StoreIntInEeprom@data+3,make8@data+3
  5455  003206  0429               	decf	StoreIntInEeprom@idx,w,c
  5456  003208  6E1C               	movwf	make8@dataLocation,c
  5457  00320A  EC1B  F015         	call	_make8	;wreg free
  5458  00320E  6E28               	movwf	StoreIntInEeprom@val,c
  5459                           
  5460                           ;SystemCommon.c: 93: EepromWrite(address - idx, val);
  5461  003210  C028  F01B         	movff	StoreIntInEeprom@val,EepromWrite@data
  5462  003214  5029               	movf	StoreIntInEeprom@idx,w,c
  5463  003216  0800               	sublw	0
  5464  003218  2425               	addwf	StoreIntInEeprom@address,w,c
  5465  00321A  EC8F  F01B         	call	_EepromWrite
  5466  00321E  0629               	decf	StoreIntInEeprom@idx,f,c
  5467  003220                     l1220:
  5468  003220  5029               	movf	StoreIntInEeprom@idx,w,c
  5469  003222  B4D8               	btfsc	status,2,c
  5470  003224  0012               	return	
  5471  003226  D7E7               	goto	l1221
  5472  003228                     __end_of_StoreIntInEeprom:
  5473                           	opt stack 0
  5474                           tosu	equ	0xFFF
  5475                           tosh	equ	0xFFE
  5476                           tosl	equ	0xFFD
  5477                           pclath	equ	0xFFA
  5478                           tblptru	equ	0xFF8
  5479                           tblptrh	equ	0xFF7
  5480                           tblptrl	equ	0xFF6
  5481                           tablat	equ	0xFF5
  5482                           prodh	equ	0xFF4
  5483                           prodl	equ	0xFF3
  5484                           postinc0	equ	0xFEE
  5485                           wreg	equ	0xFE8
  5486                           postdec1	equ	0xFE5
  5487                           fsr1l	equ	0xFE1
  5488                           indf2	equ	0xFDF
  5489                           postinc2	equ	0xFDE
  5490                           fsr2h	equ	0xFDA
  5491                           fsr2l	equ	0xFD9
  5492                           status	equ	0xFD8
  5493                           
  5494 ;; *************** function _EepromWrite *****************
  5495 ;; Defined at:
  5496 ;;		line 220 in file "FlashApp.c"
  5497 ;; Parameters:    Size  Location     Type
  5498 ;;  address         1    wreg     unsigned char 
  5499 ;;  data            1   26[COMRAM] unsigned char 
  5500 ;; Auto vars:     Size  Location     Type
  5501 ;;  address         1   27[COMRAM] unsigned char 
  5502 ;; Return value:  Size  Location     Type
  5503 ;;                  1    wreg      void 
  5504 ;; Registers used:
  5505 ;;		wreg, status,2, cstack
  5506 ;; Tracked objects:
  5507 ;;		On entry : 0/0
  5508 ;;		On exit  : 0/0
  5509 ;;		Unchanged: 0/0
  5510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5511 ;;      Params:         1       0       0       0       0       0       0
  5512 ;;      Locals:         1       0       0       0       0       0       0
  5513 ;;      Temps:          0       0       0       0       0       0       0
  5514 ;;      Totals:         2       0       0       0       0       0       0
  5515 ;;Total ram usage:        2 bytes
  5516 ;; Hardware stack levels used:    1
  5517 ;; Hardware stack levels required when called:    4
  5518 ;; This function calls:
  5519 ;;		_DATAEE_WriteByte
  5520 ;; This function is called by:
  5521 ;;		_StoreIntInEeprom
  5522 ;;		_SetMcuFwVersion
  5523 ;;		_SetCpldFwVersion
  5524 ;; This function uses a non-reentrant model
  5525 ;;
  5526                           
  5527                           	psect	text25
  5528  00371E                     __ptext25:
  5529                           	opt stack 0
  5530  00371E                     _EepromWrite:
  5531                           	opt stack 23
  5532                           
  5533                           ;incstack = 0
  5534                           ;EepromWrite@address stored from wreg
  5535  00371E  6E1C               	movwf	EepromWrite@address,c
  5536                           
  5537                           ;FlashApp.c: 222: DATAEE_WriteByte(address, data);
  5538  003720  C01B  F018         	movff	EepromWrite@data,DATAEE_WriteByte@bData
  5539  003724  501C               	movf	EepromWrite@address,w,c
  5540  003726  EC67  F019         	call	_DATAEE_WriteByte
  5541  00372A  0012               	return		;funcret
  5542  00372C                     __end_of_EepromWrite:
  5543                           	opt stack 0
  5544                           tosu	equ	0xFFF
  5545                           tosh	equ	0xFFE
  5546                           tosl	equ	0xFFD
  5547                           pclath	equ	0xFFA
  5548                           tblptru	equ	0xFF8
  5549                           tblptrh	equ	0xFF7
  5550                           tblptrl	equ	0xFF6
  5551                           tablat	equ	0xFF5
  5552                           prodh	equ	0xFF4
  5553                           prodl	equ	0xFF3
  5554                           postinc0	equ	0xFEE
  5555                           wreg	equ	0xFE8
  5556                           postdec1	equ	0xFE5
  5557                           fsr1l	equ	0xFE1
  5558                           indf2	equ	0xFDF
  5559                           postinc2	equ	0xFDE
  5560                           fsr2h	equ	0xFDA
  5561                           fsr2l	equ	0xFD9
  5562                           status	equ	0xFD8
  5563                           
  5564 ;; *************** function _DATAEE_WriteByte *****************
  5565 ;; Defined at:
  5566 ;;		line 167 in file "mcc_generated_files/memory.c"
  5567 ;; Parameters:    Size  Location     Type
  5568 ;;  bAdd            1    wreg     unsigned char 
  5569 ;;  bData           1   23[COMRAM] unsigned char 
  5570 ;; Auto vars:     Size  Location     Type
  5571 ;;  bAdd            1   24[COMRAM] unsigned char 
  5572 ;;  GIEBitValue     1   25[COMRAM] unsigned char 
  5573 ;; Return value:  Size  Location     Type
  5574 ;;                  1    wreg      void 
  5575 ;; Registers used:
  5576 ;;		wreg, status,2
  5577 ;; Tracked objects:
  5578 ;;		On entry : 0/0
  5579 ;;		On exit  : 0/0
  5580 ;;		Unchanged: 0/0
  5581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5582 ;;      Params:         1       0       0       0       0       0       0
  5583 ;;      Locals:         2       0       0       0       0       0       0
  5584 ;;      Temps:          0       0       0       0       0       0       0
  5585 ;;      Totals:         3       0       0       0       0       0       0
  5586 ;;Total ram usage:        3 bytes
  5587 ;; Hardware stack levels used:    1
  5588 ;; Hardware stack levels required when called:    3
  5589 ;; This function calls:
  5590 ;;		Nothing
  5591 ;; This function is called by:
  5592 ;;		_EepromWrite
  5593 ;;		_EepromTest
  5594 ;; This function uses a non-reentrant model
  5595 ;;
  5596                           
  5597                           	psect	text26
  5598  0032CE                     __ptext26:
  5599                           	opt stack 0
  5600  0032CE                     _DATAEE_WriteByte:
  5601                           	opt stack 23
  5602                           
  5603                           ;incstack = 0
  5604                           ;DATAEE_WriteByte@bAdd stored from wreg
  5605  0032CE  6E19               	movwf	DATAEE_WriteByte@bAdd,c
  5606                           
  5607                           ;memory.c: 169: uint8_t GIEBitValue = INTCONbits.GIE;
  5608  0032D0  0E00               	movlw	0
  5609  0032D2  BEF2               	btfsc	intcon,7,c	;volatile
  5610  0032D4  0E01               	movlw	1
  5611  0032D6  6E1A               	movwf	DATAEE_WriteByte@GIEBitValue,c
  5612                           
  5613                           ;memory.c: 171: EEADR = (bAdd & 0xFF);
  5614  0032D8  C019  FFA9         	movff	DATAEE_WriteByte@bAdd,4009	;volatile
  5615                           
  5616                           ;memory.c: 172: EEDATA = bData;
  5617  0032DC  C018  FFA8         	movff	DATAEE_WriteByte@bData,4008	;volatile
  5618                           
  5619                           ;memory.c: 173: EECON1bits.EEPGD = 0;
  5620  0032E0  9EA6               	bcf	4006,7,c	;volsfr
  5621                           
  5622                           ;memory.c: 174: EECON1bits.CFGS = 0;
  5623  0032E2  9CA6               	bcf	4006,6,c	;volsfr
  5624                           
  5625                           ;memory.c: 175: EECON1bits.WREN = 1;
  5626  0032E4  84A6               	bsf	4006,2,c	;volsfr
  5627                           
  5628                           ;memory.c: 176: INTCONbits.GIE = 0;
  5629  0032E6  9EF2               	bcf	intcon,7,c	;volatile
  5630                           
  5631                           ;memory.c: 177: EECON2 = 0x55;
  5632  0032E8  0E55               	movlw	85
  5633  0032EA  6EA7               	movwf	4007,c	;volsfr
  5634                           
  5635                           ;memory.c: 178: EECON2 = 0xAA;
  5636  0032EC  0EAA               	movlw	170
  5637  0032EE  6EA7               	movwf	4007,c	;volsfr
  5638                           
  5639                           ;memory.c: 179: EECON1bits.WR = 1;
  5640  0032F0  82A6               	bsf	4006,1,c	;volsfr
  5641  0032F2                     
  5642                           ;memory.c: 182: {
  5643  0032F2  B2A6               	btfsc	4006,1,c	;volsfr
  5644  0032F4  D7FE               	goto	l884
  5645                           
  5646                           ;memory.c: 183: }
  5647                           ;memory.c: 185: EECON1bits.WREN = 0;
  5648  0032F6  94A6               	bcf	4006,2,c	;volsfr
  5649                           
  5650                           ;memory.c: 186: INTCONbits.GIE = GIEBitValue;
  5651  0032F8  B01A               	btfsc	DATAEE_WriteByte@GIEBitValue,0,c
  5652  0032FA  D002               	bra	u5845
  5653  0032FC  9EF2               	bcf	intcon,7,c	;volatile
  5654  0032FE  D001               	bra	u5846
  5655  003300                     u5845:
  5656  003300  8EF2               	bsf	intcon,7,c	;volatile
  5657  003302                     u5846:
  5658  003302  0012               	return		;funcret
  5659  003304                     __end_of_DATAEE_WriteByte:
  5660                           	opt stack 0
  5661                           tosu	equ	0xFFF
  5662                           tosh	equ	0xFFE
  5663                           tosl	equ	0xFFD
  5664                           pclath	equ	0xFFA
  5665                           tblptru	equ	0xFF8
  5666                           tblptrh	equ	0xFF7
  5667                           tblptrl	equ	0xFF6
  5668                           tablat	equ	0xFF5
  5669                           prodh	equ	0xFF4
  5670                           prodl	equ	0xFF3
  5671                           intcon	equ	0xFF2
  5672                           postinc0	equ	0xFEE
  5673                           wreg	equ	0xFE8
  5674                           postdec1	equ	0xFE5
  5675                           fsr1l	equ	0xFE1
  5676                           indf2	equ	0xFDF
  5677                           postinc2	equ	0xFDE
  5678                           fsr2h	equ	0xFDA
  5679                           fsr2l	equ	0xFD9
  5680                           status	equ	0xFD8
  5681                           
  5682 ;; *************** function _GetIntFromUartData *****************
  5683 ;; Defined at:
  5684 ;;		line 34 in file "SystemCommon.c"
  5685 ;; Parameters:    Size  Location     Type
  5686 ;;  num             1    wreg     char 
  5687 ;;  data            2    6[BANK0 ] PTR unsigned char 
  5688 ;;		 -> rxMsgData(20), 
  5689 ;; Auto vars:     Size  Location     Type
  5690 ;;  num             1   19[BANK0 ] char 
  5691 ;;  c               1   24[BANK0 ] unsigned char 
  5692 ;;  idx             2   25[BANK0 ] int 
  5693 ;;  dataRegArr      9   10[BANK0 ] unsigned char [9]
  5694 ;;  retVal          4   20[BANK0 ] unsigned long 
  5695 ;; Return value:  Size  Location     Type
  5696 ;;                  4    6[BANK0 ] unsigned long 
  5697 ;; Registers used:
  5698 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5699 ;; Tracked objects:
  5700 ;;		On entry : 0/0
  5701 ;;		On exit  : 0/0
  5702 ;;		Unchanged: 0/0
  5703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5704 ;;      Params:         0       4       0       0       0       0       0
  5705 ;;      Locals:         0      17       0       0       0       0       0
  5706 ;;      Temps:          0       0       0       0       0       0       0
  5707 ;;      Totals:         0      21       0       0       0       0       0
  5708 ;;Total ram usage:       21 bytes
  5709 ;; Hardware stack levels used:    1
  5710 ;; Hardware stack levels required when called:    6
  5711 ;; This function calls:
  5712 ;;		_ZeroArray
  5713 ;;		_strtol
  5714 ;; This function is called by:
  5715 ;;		_DacSetValue
  5716 ;;		_UpdateTxFreq
  5717 ;;		_UpdateRxFreq
  5718 ;; This function uses a non-reentrant model
  5719 ;;
  5720                           
  5721                           	psect	text27
  5722  001E3C                     __ptext27:
  5723                           	opt stack 0
  5724  001E3C                     _GetIntFromUartData:
  5725                           	opt stack 21
  5726                           
  5727                           ;incstack = 0
  5728                           ;GetIntFromUartData@num stored from wreg
  5729  001E3C  0100               	movlb	0	; () banked
  5730  001E3E  6F73               	movwf	GetIntFromUartData@num& (0+255),b
  5731                           
  5732                           ;SystemCommon.c: 36: uint32_t retVal = 0;
  5733  001E40  0E00               	movlw	0
  5734  001E42  0100               	movlb	0	; () banked
  5735  001E44  6F74               	movwf	GetIntFromUartData@retVal& (0+255),b
  5736  001E46  0E00               	movlw	0
  5737  001E48  6F75               	movwf	(GetIntFromUartData@retVal+1)& (0+255),b
  5738  001E4A  0E00               	movlw	0
  5739  001E4C  6F76               	movwf	(GetIntFromUartData@retVal+2)& (0+255),b
  5740  001E4E  0E00               	movlw	0
  5741  001E50  6F77               	movwf	(GetIntFromUartData@retVal+3)& (0+255),b
  5742                           
  5743                           ; BSR set to: 0
  5744                           ;SystemCommon.c: 37: char dataRegArr[9];
  5745                           ;SystemCommon.c: 38: ZeroArray(dataRegArr, 9);
  5746  001E52  0E6A               	movlw	low GetIntFromUartData@dataRegArr
  5747  001E54  6E20               	movwf	ZeroArray@array,c
  5748  001E56  0E00               	movlw	high GetIntFromUartData@dataRegArr
  5749  001E58  6E21               	movwf	ZeroArray@array+1,c
  5750  001E5A  0E00               	movlw	0
  5751  001E5C  6E23               	movwf	ZeroArray@size+1,c
  5752  001E5E  0E09               	movlw	9
  5753  001E60  6E22               	movwf	ZeroArray@size,c
  5754  001E62  ECFD  F01A         	call	_ZeroArray	;wreg free
  5755                           
  5756                           ;SystemCommon.c: 40: for(int idx = 0; idx < 9; idx++)
  5757  001E66  0E00               	movlw	0
  5758  001E68  0100               	movlb	0	; () banked
  5759  001E6A  6F7A               	movwf	(GetIntFromUartData@idx+1)& (0+255),b
  5760  001E6C  0E00               	movlw	0
  5761  001E6E  6F79               	movwf	GetIntFromUartData@idx& (0+255),b
  5762  001E70                     l6959:
  5763                           
  5764                           ; BSR set to: 0
  5765  001E70  BF7A               	btfsc	(GetIntFromUartData@idx+1)& (0+255),7,b
  5766  001E72  D006               	goto	l1198
  5767  001E74  517A               	movf	(GetIntFromUartData@idx+1)& (0+255),w,b
  5768  001E76  E122               	bnz	l6977
  5769  001E78  0E09               	movlw	9
  5770  001E7A  5D79               	subwf	GetIntFromUartData@idx& (0+255),w,b
  5771  001E7C  B0D8               	btfsc	status,0,c
  5772  001E7E  D01E               	goto	u6850
  5773  001E80                     l1198:
  5774                           
  5775                           ; BSR set to: 0
  5776                           ;SystemCommon.c: 41: {
  5777                           ;SystemCommon.c: 42: char c = data[idx];
  5778                           
  5779                           ; BSR set to: 0
  5780  001E80  5179               	movf	GetIntFromUartData@idx& (0+255),w,b
  5781  001E82  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  5782  001E84  6ED9               	movwf	fsr2l,c
  5783  001E86  517A               	movf	(GetIntFromUartData@idx+1)& (0+255),w,b
  5784  001E88  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  5785  001E8A  6EDA               	movwf	fsr2h,c
  5786  001E8C  50DF               	movf	indf2,w,c
  5787  001E8E  6F78               	movwf	GetIntFromUartData@c& (0+255),b
  5788                           
  5789                           ; BSR set to: 0
  5790                           ;SystemCommon.c: 43: if(c == 0x10)
  5791  001E90  0E10               	movlw	16
  5792  001E92  1978               	xorwf	GetIntFromUartData@c& (0+255),w,b
  5793  001E94  B4D8               	btfsc	status,2,c
  5794  001E96  D012               	goto	u6850
  5795                           
  5796                           ; BSR set to: 0
  5797                           ;SystemCommon.c: 47: else
  5798                           ;SystemCommon.c: 48: {
  5799                           ;SystemCommon.c: 49: dataRegArr[idx] = data[idx] + '0';
  5800                           
  5801                           ; BSR set to: 0
  5802                           
  5803                           ; BSR set to: 0
  5804                           ;SystemCommon.c: 46: }
  5805                           
  5806                           ; BSR set to: 0
  5807                           ;SystemCommon.c: 44: {
  5808                           ;SystemCommon.c: 45: break;
  5809  001E98  0E6A               	movlw	low GetIntFromUartData@dataRegArr
  5810  001E9A  2579               	addwf	GetIntFromUartData@idx& (0+255),w,b
  5811  001E9C  6ED9               	movwf	fsr2l,c
  5812  001E9E  0E00               	movlw	high GetIntFromUartData@dataRegArr
  5813  001EA0  217A               	addwfc	(GetIntFromUartData@idx+1)& (0+255),w,b
  5814  001EA2  6EDA               	movwf	fsr2h,c
  5815  001EA4  5179               	movf	GetIntFromUartData@idx& (0+255),w,b
  5816  001EA6  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  5817  001EA8  6EE1               	movwf	fsr1l,c
  5818  001EAA  517A               	movf	(GetIntFromUartData@idx+1)& (0+255),w,b
  5819  001EAC  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  5820  001EAE  6EE2               	movwf	fsr1h,c
  5821  001EB0  50E7               	movf	indf1,w,c
  5822  001EB2  0F30               	addlw	48
  5823  001EB4  6EDF               	movwf	indf2,c
  5824                           
  5825                           ; BSR set to: 0
  5826                           
  5827                           ; BSR set to: 0
  5828  001EB6  4B79               	infsnz	GetIntFromUartData@idx& (0+255),f,b
  5829  001EB8  2B7A               	incf	(GetIntFromUartData@idx+1)& (0+255),f,b
  5830  001EBA  D7DA               	goto	l6959
  5831  001EBC                     u6850:
  5832  001EBC                     l6977:
  5833                           
  5834                           ; BSR set to: 0
  5835                           ;SystemCommon.c: 50: }
  5836                           ;SystemCommon.c: 52: }
  5837                           ;SystemCommon.c: 53: retVal = strtol(dataRegArr, (0), num);
  5838  001EBC  0E6A               	movlw	low GetIntFromUartData@dataRegArr
  5839  001EBE  6E24               	movwf	strtol@s,c
  5840  001EC0  0E00               	movlw	high GetIntFromUartData@dataRegArr
  5841  001EC2  6E25               	movwf	strtol@s+1,c
  5842  001EC4  0E00               	movlw	0
  5843  001EC6  6E26               	movwf	strtol@endptr,c
  5844  001EC8  0E00               	movlw	0
  5845  001ECA  6E27               	movwf	strtol@endptr+1,c
  5846  001ECC  5173               	movf	GetIntFromUartData@num& (0+255),w,b
  5847  001ECE  6E28               	movwf	strtol@base,c
  5848  001ED0  6A29               	clrf	strtol@base+1,c
  5849  001ED2  BE28               	btfsc	strtol@base,7,c
  5850  001ED4  0629               	decf	strtol@base+1,f,c
  5851  001ED6  EC13  F007         	call	_strtol	;wreg free
  5852  001EDA  C024  F074         	movff	?_strtol,GetIntFromUartData@retVal
  5853  001EDE  C025  F075         	movff	?_strtol+1,GetIntFromUartData@retVal+1
  5854  001EE2  C026  F076         	movff	?_strtol+2,GetIntFromUartData@retVal+2
  5855  001EE6  C027  F077         	movff	?_strtol+3,GetIntFromUartData@retVal+3
  5856                           
  5857                           ;SystemCommon.c: 55: return retVal;
  5858  001EEA  C074  F066         	movff	GetIntFromUartData@retVal,?_GetIntFromUartData
  5859  001EEE  C075  F067         	movff	GetIntFromUartData@retVal+1,?_GetIntFromUartData+1
  5860  001EF2  C076  F068         	movff	GetIntFromUartData@retVal+2,?_GetIntFromUartData+2
  5861  001EF6  C077  F069         	movff	GetIntFromUartData@retVal+3,?_GetIntFromUartData+3
  5862  001EFA  0012               	return	
  5863  001EFC                     __end_of_GetIntFromUartData:
  5864                           	opt stack 0
  5865                           tosu	equ	0xFFF
  5866                           tosh	equ	0xFFE
  5867                           tosl	equ	0xFFD
  5868                           pclath	equ	0xFFA
  5869                           tblptru	equ	0xFF8
  5870                           tblptrh	equ	0xFF7
  5871                           tblptrl	equ	0xFF6
  5872                           tablat	equ	0xFF5
  5873                           prodh	equ	0xFF4
  5874                           prodl	equ	0xFF3
  5875                           intcon	equ	0xFF2
  5876                           postinc0	equ	0xFEE
  5877                           wreg	equ	0xFE8
  5878                           indf1	equ	0xFE7
  5879                           postdec1	equ	0xFE5
  5880                           fsr1h	equ	0xFE2
  5881                           fsr1l	equ	0xFE1
  5882                           indf2	equ	0xFDF
  5883                           postinc2	equ	0xFDE
  5884                           fsr2h	equ	0xFDA
  5885                           fsr2l	equ	0xFD9
  5886                           status	equ	0xFD8
  5887                           
  5888 ;; *************** function _strtol *****************
  5889 ;; Defined at:
  5890 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strtol.c"
  5891 ;; Parameters:    Size  Location     Type
  5892 ;;  s               2   35[COMRAM] PTR const unsigned char 
  5893 ;;		 -> GetIntFromUartData@dataRegArr(9), 
  5894 ;;  endptr          2   37[COMRAM] PTR PTR unsigned char 
  5895 ;;		 -> NULL(0), 
  5896 ;;  base            2   39[COMRAM] int 
  5897 ;; Auto vars:     Size  Location     Type
  5898 ;;  a               4    1[BANK0 ] long 
  5899 ;;  c               1    5[BANK0 ] unsigned char 
  5900 ;;  sign            1    0[BANK0 ] unsigned char 
  5901 ;; Return value:  Size  Location     Type
  5902 ;;                  4   35[COMRAM] long 
  5903 ;; Registers used:
  5904 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5905 ;; Tracked objects:
  5906 ;;		On entry : 0/0
  5907 ;;		On exit  : 0/0
  5908 ;;		Unchanged: 0/0
  5909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5910 ;;      Params:         6       0       0       0       0       0       0
  5911 ;;      Locals:         0       6       0       0       0       0       0
  5912 ;;      Temps:          4       0       0       0       0       0       0
  5913 ;;      Totals:        10       6       0       0       0       0       0
  5914 ;;Total ram usage:       16 bytes
  5915 ;; Hardware stack levels used:    1
  5916 ;; Hardware stack levels required when called:    5
  5917 ;; This function calls:
  5918 ;;		___lmul
  5919 ;;		_isalpha
  5920 ;;		_isdigit
  5921 ;;		_isspace
  5922 ;;		_toupper
  5923 ;; This function is called by:
  5924 ;;		_GetIntFromUartData
  5925 ;; This function uses a non-reentrant model
  5926 ;;
  5927                           
  5928                           	psect	text28
  5929  000E26                     __ptext28:
  5930                           	opt stack 0
  5931  000E26                     _strtol:
  5932                           	opt stack 21
  5933                           
  5934                           ;incstack = 0
  5935  000E26  C024  FFD9         	movff	strtol@s,fsr2l
  5936  000E2A  C025  FFDA         	movff	strtol@s+1,fsr2h
  5937  000E2E  50DF               	movf	indf2,w,c
  5938  000E30  0100               	movlb	0	; () banked
  5939  000E32  6F65               	movwf	strtol@c& (0+255),b
  5940                           
  5941                           ; BSR set to: 0
  5942  000E34  4A24               	infsnz	strtol@s,f,c
  5943  000E36  2A25               	incf	strtol@s+1,f,c
  5944                           
  5945                           ; BSR set to: 0
  5946  000E38  5165               	movf	strtol@c& (0+255),w,b
  5947  000E3A  EC85  F01A         	call	_isspace
  5948  000E3E  B0D8               	btfsc	status,0,c
  5949  000E40  D7F2               	goto	_strtol
  5950  000E42  0E00               	movlw	0
  5951  000E44  0100               	movlb	0	; () banked
  5952  000E46  6F61               	movwf	strtol@a& (0+255),b
  5953  000E48  0E00               	movlw	0
  5954  000E4A  6F62               	movwf	(strtol@a+1)& (0+255),b
  5955  000E4C  0E00               	movlw	0
  5956  000E4E  6F63               	movwf	(strtol@a+2)& (0+255),b
  5957  000E50  0E00               	movlw	0
  5958  000E52  6F64               	movwf	(strtol@a+3)& (0+255),b
  5959  000E54  0E00               	movlw	0
  5960  000E56  6F60               	movwf	strtol@sign& (0+255),b
  5961                           
  5962                           ; BSR set to: 0
  5963  000E58  0E2D               	movlw	45
  5964  000E5A  1965               	xorwf	strtol@c& (0+255),w,b
  5965  000E5C  A4D8               	btfss	status,2,c
  5966  000E5E  D003               	goto	l1953
  5967                           
  5968                           ; BSR set to: 0
  5969  000E60  0E01               	movlw	1
  5970  000E62  6F60               	movwf	strtol@sign& (0+255),b
  5971  000E64  D004               	goto	u6330
  5972  000E66                     l1953:
  5973                           
  5974                           ; BSR set to: 0
  5975                           
  5976                           ; BSR set to: 0
  5977  000E66  0E2B               	movlw	43
  5978  000E68  1965               	xorwf	strtol@c& (0+255),w,b
  5979  000E6A  A4D8               	btfss	status,2,c
  5980  000E6C  D008               	goto	l1955
  5981  000E6E                     u6330:
  5982                           
  5983                           ; BSR set to: 0
  5984  000E6E  C024  FFD9         	movff	strtol@s,fsr2l
  5985  000E72  C025  FFDA         	movff	strtol@s+1,fsr2h
  5986  000E76  50DF               	movf	indf2,w,c
  5987  000E78  6F65               	movwf	strtol@c& (0+255),b
  5988                           
  5989                           ; BSR set to: 0
  5990  000E7A  4A24               	infsnz	strtol@s,f,c
  5991  000E7C  2A25               	incf	strtol@s+1,f,c
  5992  000E7E                     l1955:
  5993                           
  5994                           ; BSR set to: 0
  5995                           
  5996                           ; BSR set to: 0
  5997                           
  5998                           ; BSR set to: 0
  5999  000E7E  0E30               	movlw	48
  6000  000E80  1965               	xorwf	strtol@c& (0+255),w,b
  6001  000E82  A4D8               	btfss	status,2,c
  6002  000E84  D02E               	goto	l1963
  6003                           
  6004                           ; BSR set to: 0
  6005  000E86  C024  FFD9         	movff	strtol@s,fsr2l
  6006  000E8A  C025  FFDA         	movff	strtol@s+1,fsr2h
  6007  000E8E  50DF               	movf	indf2,w,c
  6008  000E90  6F65               	movwf	strtol@c& (0+255),b
  6009                           
  6010                           ; BSR set to: 0
  6011  000E92  4A24               	infsnz	strtol@s,f,c
  6012  000E94  2A25               	incf	strtol@s+1,f,c
  6013                           
  6014                           ; BSR set to: 0
  6015  000E96  5028               	movf	strtol@base,w,c
  6016  000E98  1029               	iorwf	strtol@base+1,w,c
  6017  000E9A  B4D8               	btfsc	status,2,c
  6018  000E9C  D005               	goto	u6360
  6019                           
  6020                           ; BSR set to: 0
  6021  000E9E  0E10               	movlw	16
  6022  000EA0  1828               	xorwf	strtol@base,w,c
  6023  000EA2  1029               	iorwf	strtol@base+1,w,c
  6024  000EA4  A4D8               	btfss	status,2,c
  6025  000EA6  D015               	goto	l1957
  6026  000EA8                     u6360:
  6027                           
  6028                           ; BSR set to: 0
  6029                           
  6030                           ; BSR set to: 0
  6031  000EA8  0E78               	movlw	120
  6032  000EAA  1965               	xorwf	strtol@c& (0+255),w,b
  6033  000EAC  B4D8               	btfsc	status,2,c
  6034  000EAE  D004               	goto	u6380
  6035                           
  6036                           ; BSR set to: 0
  6037  000EB0  0E58               	movlw	88
  6038  000EB2  1965               	xorwf	strtol@c& (0+255),w,b
  6039  000EB4  A4D8               	btfss	status,2,c
  6040  000EB6  D00D               	goto	l1957
  6041  000EB8                     u6380:
  6042                           
  6043                           ; BSR set to: 0
  6044                           
  6045                           ; BSR set to: 0
  6046  000EB8  0E00               	movlw	0
  6047  000EBA  6E29               	movwf	strtol@base+1,c
  6048  000EBC  0E10               	movlw	16
  6049  000EBE  6E28               	movwf	strtol@base,c
  6050                           
  6051                           ; BSR set to: 0
  6052  000EC0  C024  FFD9         	movff	strtol@s,fsr2l
  6053  000EC4  C025  FFDA         	movff	strtol@s+1,fsr2h
  6054  000EC8  50DF               	movf	indf2,w,c
  6055  000ECA  6F65               	movwf	strtol@c& (0+255),b
  6056                           
  6057                           ; BSR set to: 0
  6058  000ECC  4A24               	infsnz	strtol@s,f,c
  6059  000ECE  2A25               	incf	strtol@s+1,f,c
  6060  000ED0  D008               	goto	l1963
  6061  000ED2                     l1957:
  6062                           
  6063                           ; BSR set to: 0
  6064                           
  6065                           ; BSR set to: 0
  6066  000ED2  5028               	movf	strtol@base,w,c
  6067  000ED4  1029               	iorwf	strtol@base+1,w,c
  6068  000ED6  A4D8               	btfss	status,2,c
  6069  000ED8  D004               	goto	l1963
  6070                           
  6071                           ; BSR set to: 0
  6072  000EDA  0E00               	movlw	0
  6073  000EDC  6E29               	movwf	strtol@base+1,c
  6074  000EDE  0E08               	movlw	8
  6075  000EE0  6E28               	movwf	strtol@base,c
  6076  000EE2                     l1963:
  6077                           
  6078                           ; BSR set to: 0
  6079                           
  6080                           ; BSR set to: 0
  6081                           
  6082                           ; BSR set to: 0
  6083                           
  6084                           ; BSR set to: 0
  6085  000EE2  5028               	movf	strtol@base,w,c
  6086  000EE4  1029               	iorwf	strtol@base+1,w,c
  6087  000EE6  A4D8               	btfss	status,2,c
  6088  000EE8  D004               	goto	l1964
  6089                           
  6090                           ; BSR set to: 0
  6091  000EEA  0E00               	movlw	0
  6092  000EEC  6E29               	movwf	strtol@base+1,c
  6093  000EEE  0E0A               	movlw	10
  6094  000EF0  6E28               	movwf	strtol@base,c
  6095  000EF2                     l1964:
  6096                           
  6097                           ; BSR set to: 0
  6098                           
  6099                           ; BSR set to: 0
  6100                           
  6101                           ; BSR set to: 0
  6102  000EF2  5165               	movf	strtol@c& (0+255),w,b
  6103  000EF4  EC71  F01A         	call	_isalpha
  6104  000EF8  A0D8               	btfss	status,0,c
  6105  000EFA  D008               	goto	l1966
  6106  000EFC  0100               	movlb	0	; () banked
  6107  000EFE  5165               	movf	strtol@c& (0+255),w,b
  6108  000F00  EC58  F01B         	call	_toupper
  6109  000F04  0FC9               	addlw	201
  6110  000F06  0100               	movlb	0	; () banked
  6111  000F08  6F65               	movwf	strtol@c& (0+255),b
  6112  000F0A  D009               	goto	l1969
  6113  000F0C                     l1966:
  6114                           
  6115                           ; BSR set to: 0
  6116  000F0C  0100               	movlb	0	; () banked
  6117  000F0E  5165               	movf	strtol@c& (0+255),w,b
  6118  000F10  ECDF  F01A         	call	_isdigit
  6119  000F14  A0D8               	btfss	status,0,c
  6120  000F16  D039               	goto	l1970
  6121  000F18  0E30               	movlw	48
  6122  000F1A  0100               	movlb	0	; () banked
  6123  000F1C  5F65               	subwf	strtol@c& (0+255),f,b
  6124  000F1E                     l1969:
  6125                           
  6126                           ; BSR set to: 0
  6127                           
  6128                           ; BSR set to: 0
  6129                           
  6130                           ; BSR set to: 0
  6131  000F1E  5165               	movf	strtol@c& (0+255),w,b
  6132  000F20  6E2A               	movwf	??_strtol& (0+255),c
  6133  000F22  6A2B               	clrf	(??_strtol+1)& (0+255),c
  6134  000F24  5028               	movf	strtol@base,w,c
  6135  000F26  5C2A               	subwf	??_strtol,w,c
  6136  000F28  502B               	movf	??_strtol+1,w,c
  6137  000F2A  0A80               	xorlw	128
  6138  000F2C  6E2C               	movwf	(??_strtol+2)& (0+255),c
  6139  000F2E  5029               	movf	strtol@base+1,w,c
  6140  000F30  0A80               	xorlw	128
  6141  000F32  582C               	subwfb	(??_strtol+2)& (0+255),w,c
  6142  000F34  B0D8               	btfsc	status,0,c
  6143  000F36  D029               	goto	l1970
  6144                           
  6145                           ; BSR set to: 0
  6146                           
  6147                           ; BSR set to: 0
  6148                           
  6149                           ; BSR set to: 0
  6150  000F38  C028  F018         	movff	strtol@base,___lmul@multiplier
  6151  000F3C  C029  F019         	movff	strtol@base+1,___lmul@multiplier+1
  6152  000F40  0E00               	movlw	0
  6153  000F42  BE19               	btfsc	___lmul@multiplier+1,7,c
  6154  000F44  0EFF               	movlw	-1
  6155  000F46  6E1A               	movwf	___lmul@multiplier+2,c
  6156  000F48  6E1B               	movwf	___lmul@multiplier+3,c
  6157  000F4A  C061  F01C         	movff	strtol@a,___lmul@multiplicand
  6158  000F4E  C062  F01D         	movff	strtol@a+1,___lmul@multiplicand+1
  6159  000F52  C063  F01E         	movff	strtol@a+2,___lmul@multiplicand+2
  6160  000F56  C064  F01F         	movff	strtol@a+3,___lmul@multiplicand+3
  6161  000F5A  ECFB  F015         	call	___lmul	;wreg free
  6162  000F5E  0100               	movlb	0	; () banked
  6163  000F60  5165               	movf	strtol@c& (0+255),w,b
  6164  000F62  2418               	addwf	?___lmul,w,c
  6165  000F64  6F61               	movwf	strtol@a& (0+255),b
  6166  000F66  0E00               	movlw	0
  6167  000F68  2019               	addwfc	?___lmul+1,w,c
  6168  000F6A  6F62               	movwf	(strtol@a+1)& (0+255),b
  6169  000F6C  0E00               	movlw	0
  6170  000F6E  201A               	addwfc	?___lmul+2,w,c
  6171  000F70  6F63               	movwf	(strtol@a+2)& (0+255),b
  6172  000F72  0E00               	movlw	0
  6173  000F74  201B               	addwfc	?___lmul+3,w,c
  6174  000F76  6F64               	movwf	(strtol@a+3)& (0+255),b
  6175                           
  6176                           ; BSR set to: 0
  6177  000F78  C024  FFD9         	movff	strtol@s,fsr2l
  6178  000F7C  C025  FFDA         	movff	strtol@s+1,fsr2h
  6179  000F80  50DF               	movf	indf2,w,c
  6180  000F82  6F65               	movwf	strtol@c& (0+255),b
  6181                           
  6182                           ; BSR set to: 0
  6183  000F84  4A24               	infsnz	strtol@s,f,c
  6184  000F86  2A25               	incf	strtol@s+1,f,c
  6185  000F88  D7B4               	goto	l1964
  6186  000F8A                     l1970:
  6187                           
  6188                           ; BSR set to: 0
  6189  000F8A  5026               	movf	strtol@endptr,w,c
  6190  000F8C  1027               	iorwf	strtol@endptr+1,w,c
  6191  000F8E  B4D8               	btfsc	status,2,c
  6192  000F90  D00E               	goto	l1972
  6193  000F92  0EFF               	movlw	255
  6194  000F94  2424               	addwf	strtol@s,w,c
  6195  000F96  6E2A               	movwf	??_strtol& (0+255),c
  6196  000F98  0EFF               	movlw	255
  6197  000F9A  2025               	addwfc	strtol@s+1,w,c
  6198  000F9C  6E2B               	movwf	(??_strtol+1)& (0+255),c
  6199  000F9E  C026  FFD9         	movff	strtol@endptr,fsr2l
  6200  000FA2  C027  FFDA         	movff	strtol@endptr+1,fsr2h
  6201  000FA6  C02A  FFDE         	movff	??_strtol,postinc2
  6202  000FAA  C02B  FFDD         	movff	??_strtol+1,postdec2
  6203  000FAE                     l1972:
  6204  000FAE  0100               	movlb	0	; () banked
  6205  000FB0  5160               	movf	strtol@sign& (0+255),w,b
  6206  000FB2  B4D8               	btfsc	status,2,c
  6207  000FB4  D01A               	goto	l1973
  6208                           
  6209                           ; BSR set to: 0
  6210  000FB6  C061  F02A         	movff	strtol@a,??_strtol
  6211  000FBA  C062  F02B         	movff	strtol@a+1,??_strtol+1
  6212  000FBE  C063  F02C         	movff	strtol@a+2,??_strtol+2
  6213  000FC2  C064  F02D         	movff	strtol@a+3,??_strtol+3
  6214  000FC6  1E2A               	comf	??_strtol,f,c
  6215  000FC8  1E2B               	comf	??_strtol+1,f,c
  6216  000FCA  1E2C               	comf	??_strtol+2,f,c
  6217  000FCC  1E2D               	comf	??_strtol+3,f,c
  6218  000FCE  2A2A               	incf	??_strtol,f,c
  6219  000FD0  0E00               	movlw	0
  6220  000FD2  222B               	addwfc	??_strtol+1,f,c
  6221  000FD4  222C               	addwfc	??_strtol+2,f,c
  6222  000FD6  222D               	addwfc	??_strtol+3,f,c
  6223  000FD8  C02A  F024         	movff	??_strtol,?_strtol
  6224  000FDC  C02B  F025         	movff	??_strtol+1,?_strtol+1
  6225  000FE0  C02C  F026         	movff	??_strtol+2,?_strtol+2
  6226  000FE4  C02D  F027         	movff	??_strtol+3,?_strtol+3
  6227                           
  6228                           ; BSR set to: 0
  6229  000FE8  0012               	return	
  6230  000FEA                     l1973:
  6231                           
  6232                           ; BSR set to: 0
  6233  000FEA  C061  F024         	movff	strtol@a,?_strtol
  6234  000FEE  C062  F025         	movff	strtol@a+1,?_strtol+1
  6235  000FF2  C063  F026         	movff	strtol@a+2,?_strtol+2
  6236  000FF6  C064  F027         	movff	strtol@a+3,?_strtol+3
  6237                           
  6238                           ; BSR set to: 0
  6239  000FFA  0012               	return		;funcret
  6240  000FFC                     __end_of_strtol:
  6241                           	opt stack 0
  6242                           tosu	equ	0xFFF
  6243                           tosh	equ	0xFFE
  6244                           tosl	equ	0xFFD
  6245                           pclath	equ	0xFFA
  6246                           tblptru	equ	0xFF8
  6247                           tblptrh	equ	0xFF7
  6248                           tblptrl	equ	0xFF6
  6249                           tablat	equ	0xFF5
  6250                           prodh	equ	0xFF4
  6251                           prodl	equ	0xFF3
  6252                           intcon	equ	0xFF2
  6253                           postinc0	equ	0xFEE
  6254                           wreg	equ	0xFE8
  6255                           indf1	equ	0xFE7
  6256                           postdec1	equ	0xFE5
  6257                           fsr1h	equ	0xFE2
  6258                           fsr1l	equ	0xFE1
  6259                           indf2	equ	0xFDF
  6260                           postinc2	equ	0xFDE
  6261                           postdec2	equ	0xFDD
  6262                           fsr2h	equ	0xFDA
  6263                           fsr2l	equ	0xFD9
  6264                           status	equ	0xFD8
  6265                           
  6266 ;; *************** function _toupper *****************
  6267 ;; Defined at:
  6268 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\toupper.c"
  6269 ;; Parameters:    Size  Location     Type
  6270 ;;  c               1    wreg     unsigned char 
  6271 ;; Auto vars:     Size  Location     Type
  6272 ;;  c               1   23[COMRAM] unsigned char 
  6273 ;; Return value:  Size  Location     Type
  6274 ;;                  1    wreg      unsigned char 
  6275 ;; Registers used:
  6276 ;;		wreg, status,2, status,0
  6277 ;; Tracked objects:
  6278 ;;		On entry : 0/0
  6279 ;;		On exit  : 0/0
  6280 ;;		Unchanged: 0/0
  6281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6282 ;;      Params:         0       0       0       0       0       0       0
  6283 ;;      Locals:         1       0       0       0       0       0       0
  6284 ;;      Temps:          0       0       0       0       0       0       0
  6285 ;;      Totals:         1       0       0       0       0       0       0
  6286 ;;Total ram usage:        1 bytes
  6287 ;; Hardware stack levels used:    1
  6288 ;; Hardware stack levels required when called:    3
  6289 ;; This function calls:
  6290 ;;		Nothing
  6291 ;; This function is called by:
  6292 ;;		_strtol
  6293 ;; This function uses a non-reentrant model
  6294 ;;
  6295                           
  6296                           	psect	text29
  6297  0036B0                     __ptext29:
  6298                           	opt stack 0
  6299  0036B0                     _toupper:
  6300                           	opt stack 22
  6301                           
  6302                           ; BSR set to: 0
  6303                           ;incstack = 0
  6304                           ;toupper@c stored from wreg
  6305  0036B0  6E18               	movwf	toupper@c,c
  6306  0036B2  0E7B               	movlw	123
  6307  0036B4  6018               	cpfslt	toupper@c,c
  6308  0036B6  D004               	goto	l1977
  6309  0036B8  0E60               	movlw	96
  6310  0036BA  6418               	cpfsgt	toupper@c,c
  6311  0036BC  D001               	goto	l1977
  6312  0036BE  9A18               	bcf	toupper@c,5,c
  6313  0036C0                     l1977:
  6314  0036C0  5018               	movf	toupper@c,w,c
  6315  0036C2  0012               	return	
  6316  0036C4                     __end_of_toupper:
  6317                           	opt stack 0
  6318                           tosu	equ	0xFFF
  6319                           tosh	equ	0xFFE
  6320                           tosl	equ	0xFFD
  6321                           pclath	equ	0xFFA
  6322                           tblptru	equ	0xFF8
  6323                           tblptrh	equ	0xFF7
  6324                           tblptrl	equ	0xFF6
  6325                           tablat	equ	0xFF5
  6326                           prodh	equ	0xFF4
  6327                           prodl	equ	0xFF3
  6328                           intcon	equ	0xFF2
  6329                           postinc0	equ	0xFEE
  6330                           wreg	equ	0xFE8
  6331                           indf1	equ	0xFE7
  6332                           postdec1	equ	0xFE5
  6333                           fsr1h	equ	0xFE2
  6334                           fsr1l	equ	0xFE1
  6335                           indf2	equ	0xFDF
  6336                           postinc2	equ	0xFDE
  6337                           postdec2	equ	0xFDD
  6338                           fsr2h	equ	0xFDA
  6339                           fsr2l	equ	0xFD9
  6340                           status	equ	0xFD8
  6341                           
  6342 ;; *************** function _isspace *****************
  6343 ;; Defined at:
  6344 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isspace.c"
  6345 ;; Parameters:    Size  Location     Type
  6346 ;;  c               1    wreg     unsigned char 
  6347 ;; Auto vars:     Size  Location     Type
  6348 ;;  c               1   25[COMRAM] unsigned char 
  6349 ;; Return value:  Size  Location     Type
  6350 ;;		None               void
  6351 ;; Registers used:
  6352 ;;		wreg, status,2, status,0
  6353 ;; Tracked objects:
  6354 ;;		On entry : 0/0
  6355 ;;		On exit  : 0/0
  6356 ;;		Unchanged: 0/0
  6357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6358 ;;      Params:         0       0       0       0       0       0       0
  6359 ;;      Locals:         2       0       0       0       0       0       0
  6360 ;;      Temps:          1       0       0       0       0       0       0
  6361 ;;      Totals:         3       0       0       0       0       0       0
  6362 ;;Total ram usage:        3 bytes
  6363 ;; Hardware stack levels used:    1
  6364 ;; Hardware stack levels required when called:    3
  6365 ;; This function calls:
  6366 ;;		Nothing
  6367 ;; This function is called by:
  6368 ;;		_strtol
  6369 ;; This function uses a non-reentrant model
  6370 ;;
  6371                           
  6372                           	psect	text30
  6373  00350A                     __ptext30:
  6374                           	opt stack 0
  6375  00350A                     _isspace:
  6376                           	opt stack 22
  6377                           
  6378                           ;incstack = 0
  6379                           ;isspace@c stored from wreg
  6380  00350A  6E1A               	movwf	isspace@c,c
  6381  00350C  0E01               	movlw	1
  6382  00350E  6E19               	movwf	_isspace$2957,c
  6383  003510  0E20               	movlw	32
  6384  003512  181A               	xorwf	isspace@c,w,c
  6385  003514  B4D8               	btfsc	status,2,c
  6386  003516  D008               	goto	l2059
  6387  003518  0E0E               	movlw	14
  6388  00351A  601A               	cpfslt	isspace@c,c
  6389  00351C  D003               	goto	u6110
  6390  00351E  0E09               	movlw	9
  6391  003520  601A               	cpfslt	isspace@c,c
  6392  003522  D002               	goto	l2059
  6393  003524                     u6110:
  6394  003524  0E00               	movlw	0
  6395  003526  6E19               	movwf	_isspace$2957,c
  6396  003528                     l2059:
  6397  003528  C019  F018         	movff	_isspace$2957,??_isspace
  6398  00352C  3018               	rrcf	??_isspace,w,c
  6399  00352E  0012               	return	
  6400  003530                     __end_of_isspace:
  6401                           	opt stack 0
  6402                           tosu	equ	0xFFF
  6403                           tosh	equ	0xFFE
  6404                           tosl	equ	0xFFD
  6405                           pclath	equ	0xFFA
  6406                           tblptru	equ	0xFF8
  6407                           tblptrh	equ	0xFF7
  6408                           tblptrl	equ	0xFF6
  6409                           tablat	equ	0xFF5
  6410                           prodh	equ	0xFF4
  6411                           prodl	equ	0xFF3
  6412                           intcon	equ	0xFF2
  6413                           postinc0	equ	0xFEE
  6414                           wreg	equ	0xFE8
  6415                           indf1	equ	0xFE7
  6416                           postdec1	equ	0xFE5
  6417                           fsr1h	equ	0xFE2
  6418                           fsr1l	equ	0xFE1
  6419                           indf2	equ	0xFDF
  6420                           postinc2	equ	0xFDE
  6421                           postdec2	equ	0xFDD
  6422                           fsr2h	equ	0xFDA
  6423                           fsr2l	equ	0xFD9
  6424                           status	equ	0xFD8
  6425                           
  6426 ;; *************** function _isdigit *****************
  6427 ;; Defined at:
  6428 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  6429 ;; Parameters:    Size  Location     Type
  6430 ;;  c               1    wreg     unsigned char 
  6431 ;; Auto vars:     Size  Location     Type
  6432 ;;  c               1   25[COMRAM] unsigned char 
  6433 ;; Return value:  Size  Location     Type
  6434 ;;		None               void
  6435 ;; Registers used:
  6436 ;;		wreg, status,2, status,0
  6437 ;; Tracked objects:
  6438 ;;		On entry : 0/0
  6439 ;;		On exit  : 0/0
  6440 ;;		Unchanged: 0/0
  6441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6442 ;;      Params:         0       0       0       0       0       0       0
  6443 ;;      Locals:         2       0       0       0       0       0       0
  6444 ;;      Temps:          1       0       0       0       0       0       0
  6445 ;;      Totals:         3       0       0       0       0       0       0
  6446 ;;Total ram usage:        3 bytes
  6447 ;; Hardware stack levels used:    1
  6448 ;; Hardware stack levels required when called:    3
  6449 ;; This function calls:
  6450 ;;		Nothing
  6451 ;; This function is called by:
  6452 ;;		_strtol
  6453 ;; This function uses a non-reentrant model
  6454 ;;
  6455                           
  6456                           	psect	text31
  6457  0035BE                     __ptext31:
  6458                           	opt stack 0
  6459  0035BE                     _isdigit:
  6460                           	opt stack 22
  6461                           
  6462                           ;incstack = 0
  6463                           ;isdigit@c stored from wreg
  6464  0035BE  6E1A               	movwf	isdigit@c,c
  6465  0035C0  0E00               	movlw	0
  6466  0035C2  6E19               	movwf	_isdigit$2954,c
  6467  0035C4  0E3A               	movlw	58
  6468  0035C6  601A               	cpfslt	isdigit@c,c
  6469  0035C8  D005               	goto	l2054
  6470  0035CA  0E2F               	movlw	47
  6471  0035CC  641A               	cpfsgt	isdigit@c,c
  6472  0035CE  D002               	goto	l2054
  6473  0035D0  0E01               	movlw	1
  6474  0035D2  6E19               	movwf	_isdigit$2954,c
  6475  0035D4                     l2054:
  6476  0035D4  C019  F018         	movff	_isdigit$2954,??_isdigit
  6477  0035D8  3018               	rrcf	??_isdigit,w,c
  6478  0035DA  0012               	return	
  6479  0035DC                     __end_of_isdigit:
  6480                           	opt stack 0
  6481                           tosu	equ	0xFFF
  6482                           tosh	equ	0xFFE
  6483                           tosl	equ	0xFFD
  6484                           pclath	equ	0xFFA
  6485                           tblptru	equ	0xFF8
  6486                           tblptrh	equ	0xFF7
  6487                           tblptrl	equ	0xFF6
  6488                           tablat	equ	0xFF5
  6489                           prodh	equ	0xFF4
  6490                           prodl	equ	0xFF3
  6491                           intcon	equ	0xFF2
  6492                           postinc0	equ	0xFEE
  6493                           wreg	equ	0xFE8
  6494                           indf1	equ	0xFE7
  6495                           postdec1	equ	0xFE5
  6496                           fsr1h	equ	0xFE2
  6497                           fsr1l	equ	0xFE1
  6498                           indf2	equ	0xFDF
  6499                           postinc2	equ	0xFDE
  6500                           postdec2	equ	0xFDD
  6501                           fsr2h	equ	0xFDA
  6502                           fsr2l	equ	0xFD9
  6503                           status	equ	0xFD8
  6504                           
  6505 ;; *************** function _isalpha *****************
  6506 ;; Defined at:
  6507 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isalpha.c"
  6508 ;; Parameters:    Size  Location     Type
  6509 ;;  c               1    wreg     unsigned char 
  6510 ;; Auto vars:     Size  Location     Type
  6511 ;;  c               1   28[COMRAM] unsigned char 
  6512 ;; Return value:  Size  Location     Type
  6513 ;;		None               void
  6514 ;; Registers used:
  6515 ;;		wreg, status,2, status,0, cstack
  6516 ;; Tracked objects:
  6517 ;;		On entry : 0/0
  6518 ;;		On exit  : 0/0
  6519 ;;		Unchanged: 0/0
  6520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6521 ;;      Params:         0       0       0       0       0       0       0
  6522 ;;      Locals:         2       0       0       0       0       0       0
  6523 ;;      Temps:          1       0       0       0       0       0       0
  6524 ;;      Totals:         3       0       0       0       0       0       0
  6525 ;;Total ram usage:        3 bytes
  6526 ;; Hardware stack levels used:    1
  6527 ;; Hardware stack levels required when called:    4
  6528 ;; This function calls:
  6529 ;;		_isupper
  6530 ;; This function is called by:
  6531 ;;		_strtol
  6532 ;; This function uses a non-reentrant model
  6533 ;;
  6534                           
  6535                           	psect	text32
  6536  0034E2                     __ptext32:
  6537                           	opt stack 0
  6538  0034E2                     _isalpha:
  6539                           	opt stack 21
  6540                           
  6541                           ;incstack = 0
  6542                           ;isalpha@c stored from wreg
  6543  0034E2  6E1D               	movwf	isalpha@c,c
  6544  0034E4  0E01               	movlw	1
  6545  0034E6  6E1C               	movwf	_isalpha$2951,c
  6546  0034E8  0E7B               	movlw	123
  6547  0034EA  601D               	cpfslt	isalpha@c,c
  6548  0034EC  D003               	goto	u6130
  6549  0034EE  0E61               	movlw	97
  6550  0034F0  601D               	cpfslt	isalpha@c,c
  6551  0034F2  D007               	goto	l2049
  6552  0034F4                     u6130:
  6553  0034F4  501D               	movf	isalpha@c,w,c
  6554  0034F6  ECEE  F01A         	call	_isupper
  6555  0034FA  B0D8               	btfsc	status,0,c
  6556  0034FC  D002               	goto	l2049
  6557  0034FE  0E00               	movlw	0
  6558  003500  6E1C               	movwf	_isalpha$2951,c
  6559  003502                     l2049:
  6560  003502  C01C  F01B         	movff	_isalpha$2951,??_isalpha
  6561  003506  301B               	rrcf	??_isalpha,w,c
  6562  003508  0012               	return	
  6563  00350A                     __end_of_isalpha:
  6564                           	opt stack 0
  6565                           tosu	equ	0xFFF
  6566                           tosh	equ	0xFFE
  6567                           tosl	equ	0xFFD
  6568                           pclath	equ	0xFFA
  6569                           tblptru	equ	0xFF8
  6570                           tblptrh	equ	0xFF7
  6571                           tblptrl	equ	0xFF6
  6572                           tablat	equ	0xFF5
  6573                           prodh	equ	0xFF4
  6574                           prodl	equ	0xFF3
  6575                           intcon	equ	0xFF2
  6576                           postinc0	equ	0xFEE
  6577                           wreg	equ	0xFE8
  6578                           indf1	equ	0xFE7
  6579                           postdec1	equ	0xFE5
  6580                           fsr1h	equ	0xFE2
  6581                           fsr1l	equ	0xFE1
  6582                           indf2	equ	0xFDF
  6583                           postinc2	equ	0xFDE
  6584                           postdec2	equ	0xFDD
  6585                           fsr2h	equ	0xFDA
  6586                           fsr2l	equ	0xFD9
  6587                           status	equ	0xFD8
  6588                           
  6589 ;; *************** function _isupper *****************
  6590 ;; Defined at:
  6591 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isupper.c"
  6592 ;; Parameters:    Size  Location     Type
  6593 ;;  c               1    wreg     unsigned char 
  6594 ;; Auto vars:     Size  Location     Type
  6595 ;;  c               1   25[COMRAM] unsigned char 
  6596 ;; Return value:  Size  Location     Type
  6597 ;;		None               void
  6598 ;; Registers used:
  6599 ;;		wreg, status,2, status,0
  6600 ;; Tracked objects:
  6601 ;;		On entry : 0/0
  6602 ;;		On exit  : 0/0
  6603 ;;		Unchanged: 0/0
  6604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6605 ;;      Params:         0       0       0       0       0       0       0
  6606 ;;      Locals:         2       0       0       0       0       0       0
  6607 ;;      Temps:          1       0       0       0       0       0       0
  6608 ;;      Totals:         3       0       0       0       0       0       0
  6609 ;;Total ram usage:        3 bytes
  6610 ;; Hardware stack levels used:    1
  6611 ;; Hardware stack levels required when called:    3
  6612 ;; This function calls:
  6613 ;;		Nothing
  6614 ;; This function is called by:
  6615 ;;		_isalpha
  6616 ;; This function uses a non-reentrant model
  6617 ;;
  6618                           
  6619                           	psect	text33
  6620  0035DC                     __ptext33:
  6621                           	opt stack 0
  6622  0035DC                     _isupper:
  6623                           	opt stack 21
  6624                           
  6625                           ;incstack = 0
  6626                           ;isupper@c stored from wreg
  6627  0035DC  6E1A               	movwf	isupper@c,c
  6628  0035DE  0E00               	movlw	0
  6629  0035E0  6E19               	movwf	_isupper$2960,c
  6630  0035E2  0E5B               	movlw	91
  6631  0035E4  601A               	cpfslt	isupper@c,c
  6632  0035E6  D005               	goto	l2064
  6633  0035E8  0E40               	movlw	64
  6634  0035EA  641A               	cpfsgt	isupper@c,c
  6635  0035EC  D002               	goto	l2064
  6636  0035EE  0E01               	movlw	1
  6637  0035F0  6E19               	movwf	_isupper$2960,c
  6638  0035F2                     l2064:
  6639  0035F2  C019  F018         	movff	_isupper$2960,??_isupper
  6640  0035F6  3018               	rrcf	??_isupper,w,c
  6641  0035F8  0012               	return	
  6642  0035FA                     __end_of_isupper:
  6643                           	opt stack 0
  6644                           tosu	equ	0xFFF
  6645                           tosh	equ	0xFFE
  6646                           tosl	equ	0xFFD
  6647                           pclath	equ	0xFFA
  6648                           tblptru	equ	0xFF8
  6649                           tblptrh	equ	0xFF7
  6650                           tblptrl	equ	0xFF6
  6651                           tablat	equ	0xFF5
  6652                           prodh	equ	0xFF4
  6653                           prodl	equ	0xFF3
  6654                           intcon	equ	0xFF2
  6655                           postinc0	equ	0xFEE
  6656                           wreg	equ	0xFE8
  6657                           indf1	equ	0xFE7
  6658                           postdec1	equ	0xFE5
  6659                           fsr1h	equ	0xFE2
  6660                           fsr1l	equ	0xFE1
  6661                           indf2	equ	0xFDF
  6662                           postinc2	equ	0xFDE
  6663                           postdec2	equ	0xFDD
  6664                           fsr2h	equ	0xFDA
  6665                           fsr2l	equ	0xFD9
  6666                           status	equ	0xFD8
  6667                           
  6668 ;; *************** function ___lmul *****************
  6669 ;; Defined at:
  6670 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  6671 ;; Parameters:    Size  Location     Type
  6672 ;;  multiplier      4   23[COMRAM] unsigned long 
  6673 ;;  multiplicand    4   27[COMRAM] unsigned long 
  6674 ;; Auto vars:     Size  Location     Type
  6675 ;;  product         4   31[COMRAM] unsigned long 
  6676 ;; Return value:  Size  Location     Type
  6677 ;;                  4   23[COMRAM] unsigned long 
  6678 ;; Registers used:
  6679 ;;		wreg, status,2, status,0
  6680 ;; Tracked objects:
  6681 ;;		On entry : 0/0
  6682 ;;		On exit  : 0/0
  6683 ;;		Unchanged: 0/0
  6684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6685 ;;      Params:         8       0       0       0       0       0       0
  6686 ;;      Locals:         4       0       0       0       0       0       0
  6687 ;;      Temps:          0       0       0       0       0       0       0
  6688 ;;      Totals:        12       0       0       0       0       0       0
  6689 ;;Total ram usage:       12 bytes
  6690 ;; Hardware stack levels used:    1
  6691 ;; Hardware stack levels required when called:    3
  6692 ;; This function calls:
  6693 ;;		Nothing
  6694 ;; This function is called by:
  6695 ;;		_strtol
  6696 ;; This function uses a non-reentrant model
  6697 ;;
  6698                           
  6699                           	psect	text34
  6700  002BF6                     __ptext34:
  6701                           	opt stack 0
  6702  002BF6                     ___lmul:
  6703                           	opt stack 22
  6704                           
  6705                           ;incstack = 0
  6706  002BF6  0E00               	movlw	0
  6707  002BF8  6E20               	movwf	___lmul@product,c
  6708  002BFA  0E00               	movlw	0
  6709  002BFC  6E21               	movwf	___lmul@product+1,c
  6710  002BFE  0E00               	movlw	0
  6711  002C00  6E22               	movwf	___lmul@product+2,c
  6712  002C02  0E00               	movlw	0
  6713  002C04  6E23               	movwf	___lmul@product+3,c
  6714  002C06  A018               	btfss	___lmul@multiplier,0,c
  6715  002C08  D008               	goto	l1383
  6716  002C0A  501C               	movf	___lmul@multiplicand,w,c
  6717  002C0C  2620               	addwf	___lmul@product,f,c
  6718  002C0E  501D               	movf	___lmul@multiplicand+1,w,c
  6719  002C10  2221               	addwfc	___lmul@product+1,f,c
  6720  002C12  501E               	movf	___lmul@multiplicand+2,w,c
  6721  002C14  2222               	addwfc	___lmul@product+2,f,c
  6722  002C16  501F               	movf	___lmul@multiplicand+3,w,c
  6723  002C18  2223               	addwfc	___lmul@product+3,f,c
  6724  002C1A                     l1383:
  6725  002C1A  90D8               	bcf	status,0,c
  6726  002C1C  361C               	rlcf	___lmul@multiplicand,f,c
  6727  002C1E  361D               	rlcf	___lmul@multiplicand+1,f,c
  6728  002C20  361E               	rlcf	___lmul@multiplicand+2,f,c
  6729  002C22  361F               	rlcf	___lmul@multiplicand+3,f,c
  6730  002C24  90D8               	bcf	status,0,c
  6731  002C26  321B               	rrcf	___lmul@multiplier+3,f,c
  6732  002C28  321A               	rrcf	___lmul@multiplier+2,f,c
  6733  002C2A  3219               	rrcf	___lmul@multiplier+1,f,c
  6734  002C2C  3218               	rrcf	___lmul@multiplier,f,c
  6735  002C2E  5018               	movf	___lmul@multiplier,w,c
  6736  002C30  1019               	iorwf	___lmul@multiplier+1,w,c
  6737  002C32  101A               	iorwf	___lmul@multiplier+2,w,c
  6738  002C34  101B               	iorwf	___lmul@multiplier+3,w,c
  6739  002C36  A4D8               	btfss	status,2,c
  6740  002C38  D7E6               	goto	l1382
  6741  002C3A  C020  F018         	movff	___lmul@product,?___lmul
  6742  002C3E  C021  F019         	movff	___lmul@product+1,?___lmul+1
  6743  002C42  C022  F01A         	movff	___lmul@product+2,?___lmul+2
  6744  002C46  C023  F01B         	movff	___lmul@product+3,?___lmul+3
  6745  002C4A  0012               	return		;funcret
  6746  002C4C                     __end_of___lmul:
  6747                           	opt stack 0
  6748                           tosu	equ	0xFFF
  6749                           tosh	equ	0xFFE
  6750                           tosl	equ	0xFFD
  6751                           pclath	equ	0xFFA
  6752                           tblptru	equ	0xFF8
  6753                           tblptrh	equ	0xFF7
  6754                           tblptrl	equ	0xFF6
  6755                           tablat	equ	0xFF5
  6756                           prodh	equ	0xFF4
  6757                           prodl	equ	0xFF3
  6758                           intcon	equ	0xFF2
  6759                           postinc0	equ	0xFEE
  6760                           wreg	equ	0xFE8
  6761                           indf1	equ	0xFE7
  6762                           postdec1	equ	0xFE5
  6763                           fsr1h	equ	0xFE2
  6764                           fsr1l	equ	0xFE1
  6765                           indf2	equ	0xFDF
  6766                           postinc2	equ	0xFDE
  6767                           postdec2	equ	0xFDD
  6768                           fsr2h	equ	0xFDA
  6769                           fsr2l	equ	0xFD9
  6770                           status	equ	0xFD8
  6771                           
  6772 ;; *************** function _testLeds *****************
  6773 ;; Defined at:
  6774 ;;		line 43 in file "LedsApp.c"
  6775 ;; Parameters:    Size  Location     Type
  6776 ;;		None
  6777 ;; Auto vars:     Size  Location     Type
  6778 ;;  idx             2   44[COMRAM] int 
  6779 ;; Return value:  Size  Location     Type
  6780 ;;                  1    wreg      void 
  6781 ;; Registers used:
  6782 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6783 ;; Tracked objects:
  6784 ;;		On entry : 0/0
  6785 ;;		On exit  : 0/0
  6786 ;;		Unchanged: 0/0
  6787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6788 ;;      Params:         0       0       0       0       0       0       0
  6789 ;;      Locals:         2       0       0       0       0       0       0
  6790 ;;      Temps:          1       0       0       0       0       0       0
  6791 ;;      Totals:         3       0       0       0       0       0       0
  6792 ;;Total ram usage:        3 bytes
  6793 ;; Hardware stack levels used:    1
  6794 ;; Hardware stack levels required when called:    6
  6795 ;; This function calls:
  6796 ;;		_SendAckMessage
  6797 ;; This function is called by:
  6798 ;;		_GroupControlMcu
  6799 ;; This function uses a non-reentrant model
  6800 ;;
  6801                           
  6802                           	psect	text35
  6803  00278E                     __ptext35:
  6804                           	opt stack 0
  6805  00278E                     _testLeds:
  6806                           	opt stack 22
  6807                           
  6808                           ;LedsApp.c: 46: for(int idx = 0; idx < 10; idx++)
  6809                           
  6810                           ;incstack = 0
  6811  00278E  0E00               	movlw	0
  6812  002790  6E2E               	movwf	testLeds@idx+1,c
  6813  002792  0E00               	movlw	0
  6814  002794  6E2D               	movwf	testLeds@idx,c
  6815  002796                     l7153:
  6816  002796  BE2E               	btfsc	testLeds@idx+1,7,c
  6817  002798  D006               	goto	l48
  6818  00279A  502E               	movf	testLeds@idx+1,w,c
  6819  00279C  E127               	bnz	l7167
  6820  00279E  0E0A               	movlw	10
  6821  0027A0  5C2D               	subwf	testLeds@idx,w,c
  6822  0027A2  B0D8               	btfsc	status,0,c
  6823  0027A4  D023               	goto	u7070
  6824  0027A6                     l48:
  6825                           
  6826                           ;LedsApp.c: 47: {
  6827                           ;LedsApp.c: 49: LATCbits.LATC0 = 1;
  6828  0027A6  808B               	bsf	3979,0,c	;volatile
  6829                           
  6830                           ;LedsApp.c: 50: _delay((unsigned long)((50)*(8000000/4000.0)));
  6831  0027A8  0E82               	movlw	130
  6832  0027AA  6E2C               	movwf	??_testLeds& (0+255),c
  6833  0027AC  0EDE               	movlw	222
  6834  0027AE                     u8097:
  6835  0027AE  2EE8               	decfsz	wreg,f,c
  6836  0027B0  D7FE               	bra	u8097
  6837  0027B2  2E2C               	decfsz	??_testLeds& (0+255),f,c
  6838  0027B4  D7FC               	bra	u8097
  6839                           
  6840                           ;LedsApp.c: 51: LATBbits.LATB4 = 1;
  6841  0027B6  888A               	bsf	3978,4,c	;volatile
  6842                           
  6843                           ;LedsApp.c: 52: _delay((unsigned long)((50)*(8000000/4000.0)));
  6844  0027B8  0E82               	movlw	130
  6845  0027BA  6E2C               	movwf	??_testLeds& (0+255),c
  6846  0027BC  0EDE               	movlw	222
  6847  0027BE                     u8107:
  6848  0027BE  2EE8               	decfsz	wreg,f,c
  6849  0027C0  D7FE               	bra	u8107
  6850  0027C2  2E2C               	decfsz	??_testLeds& (0+255),f,c
  6851  0027C4  D7FC               	bra	u8107
  6852                           
  6853                           ;LedsApp.c: 53: LATCbits.LATC0 = 0;
  6854  0027C6  908B               	bcf	3979,0,c	;volatile
  6855                           
  6856                           ;LedsApp.c: 54: _delay((unsigned long)((50)*(8000000/4000.0)));
  6857  0027C8  0E82               	movlw	130
  6858  0027CA  6E2C               	movwf	??_testLeds& (0+255),c
  6859  0027CC  0EDE               	movlw	222
  6860  0027CE                     u8117:
  6861  0027CE  2EE8               	decfsz	wreg,f,c
  6862  0027D0  D7FE               	bra	u8117
  6863  0027D2  2E2C               	decfsz	??_testLeds& (0+255),f,c
  6864  0027D4  D7FC               	bra	u8117
  6865                           
  6866                           ;LedsApp.c: 55: LATBbits.LATB4 = 0;
  6867  0027D6  988A               	bcf	3978,4,c	;volatile
  6868                           
  6869                           ;LedsApp.c: 56: _delay((unsigned long)((50)*(8000000/4000.0)));
  6870  0027D8  0E82               	movlw	130
  6871  0027DA  6E2C               	movwf	??_testLeds& (0+255),c
  6872  0027DC  0EDE               	movlw	222
  6873  0027DE                     u8127:
  6874  0027DE  2EE8               	decfsz	wreg,f,c
  6875  0027E0  D7FE               	bra	u8127
  6876  0027E2  2E2C               	decfsz	??_testLeds& (0+255),f,c
  6877  0027E4  D7FC               	bra	u8127
  6878  0027E6  4A2D               	infsnz	testLeds@idx,f,c
  6879  0027E8  2A2E               	incf	testLeds@idx+1,f,c
  6880  0027EA  D7D5               	goto	l7153
  6881  0027EC                     u7070:
  6882  0027EC                     l7167:
  6883                           
  6884                           ;LedsApp.c: 57: }
  6885                           ;LedsApp.c: 59: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_TEST_LEDS);
  6886  0027EC  0E15               	movlw	21
  6887  0027EE  6E24               	movwf	SendAckMessage@inRequest,c
  6888  0027F0  0E01               	movlw	1
  6889  0027F2  ECF7  F016         	call	_SendAckMessage
  6890  0027F6  0012               	return	
  6891  0027F8                     __end_of_testLeds:
  6892                           	opt stack 0
  6893                           tosu	equ	0xFFF
  6894                           tosh	equ	0xFFE
  6895                           tosl	equ	0xFFD
  6896                           pclath	equ	0xFFA
  6897                           tblptru	equ	0xFF8
  6898                           tblptrh	equ	0xFF7
  6899                           tblptrl	equ	0xFF6
  6900                           tablat	equ	0xFF5
  6901                           prodh	equ	0xFF4
  6902                           prodl	equ	0xFF3
  6903                           intcon	equ	0xFF2
  6904                           postinc0	equ	0xFEE
  6905                           wreg	equ	0xFE8
  6906                           indf1	equ	0xFE7
  6907                           postdec1	equ	0xFE5
  6908                           fsr1h	equ	0xFE2
  6909                           fsr1l	equ	0xFE1
  6910                           indf2	equ	0xFDF
  6911                           postinc2	equ	0xFDE
  6912                           postdec2	equ	0xFDD
  6913                           fsr2h	equ	0xFDA
  6914                           fsr2l	equ	0xFD9
  6915                           status	equ	0xFD8
  6916                           
  6917 ;; *************** function _ResetMcu *****************
  6918 ;; Defined at:
  6919 ;;		line 114 in file "SystemCommon.c"
  6920 ;; Parameters:    Size  Location     Type
  6921 ;;		None
  6922 ;; Auto vars:     Size  Location     Type
  6923 ;;		None
  6924 ;; Return value:  Size  Location     Type
  6925 ;;                  1    wreg      void 
  6926 ;; Registers used:
  6927 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6928 ;; Tracked objects:
  6929 ;;		On entry : 0/0
  6930 ;;		On exit  : 0/0
  6931 ;;		Unchanged: 0/0
  6932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6933 ;;      Params:         0       0       0       0       0       0       0
  6934 ;;      Locals:         0       0       0       0       0       0       0
  6935 ;;      Temps:          0       0       0       0       0       0       0
  6936 ;;      Totals:         0       0       0       0       0       0       0
  6937 ;;Total ram usage:        0 bytes
  6938 ;; Hardware stack levels used:    1
  6939 ;; Hardware stack levels required when called:    6
  6940 ;; This function calls:
  6941 ;;		_SendAckMessage
  6942 ;; This function is called by:
  6943 ;;		_GroupControlMcu
  6944 ;; This function uses a non-reentrant model
  6945 ;;
  6946                           
  6947                           	psect	text36
  6948  00372C                     __ptext36:
  6949                           	opt stack 0
  6950  00372C                     _ResetMcu:
  6951                           	opt stack 22
  6952                           
  6953                           ;SystemCommon.c: 117: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_RESET
      +                          _MCU);
  6954                           
  6955                           ;incstack = 0
  6956  00372C  0E11               	movlw	17
  6957  00372E  6E24               	movwf	SendAckMessage@inRequest,c
  6958  003730  0E01               	movlw	1
  6959  003732  ECF7  F016         	call	_SendAckMessage
  6960  003736  00FF               	reset		;# 
  6961  003738  0012               	return		;funcret
  6962  00373A                     __end_of_ResetMcu:
  6963                           	opt stack 0
  6964                           tosu	equ	0xFFF
  6965                           tosh	equ	0xFFE
  6966                           tosl	equ	0xFFD
  6967                           pclath	equ	0xFFA
  6968                           tblptru	equ	0xFF8
  6969                           tblptrh	equ	0xFF7
  6970                           tblptrl	equ	0xFF6
  6971                           tablat	equ	0xFF5
  6972                           prodh	equ	0xFF4
  6973                           prodl	equ	0xFF3
  6974                           intcon	equ	0xFF2
  6975                           postinc0	equ	0xFEE
  6976                           wreg	equ	0xFE8
  6977                           indf1	equ	0xFE7
  6978                           postdec1	equ	0xFE5
  6979                           fsr1h	equ	0xFE2
  6980                           fsr1l	equ	0xFE1
  6981                           indf2	equ	0xFDF
  6982                           postinc2	equ	0xFDE
  6983                           postdec2	equ	0xFDD
  6984                           fsr2h	equ	0xFDA
  6985                           fsr2l	equ	0xFD9
  6986                           status	equ	0xFD8
  6987                           
  6988 ;; *************** function _ResetCpld *****************
  6989 ;; Defined at:
  6990 ;;		line 123 in file "SystemCommon.c"
  6991 ;; Parameters:    Size  Location     Type
  6992 ;;		None
  6993 ;; Auto vars:     Size  Location     Type
  6994 ;;		None
  6995 ;; Return value:  Size  Location     Type
  6996 ;;                  1    wreg      void 
  6997 ;; Registers used:
  6998 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6999 ;; Tracked objects:
  7000 ;;		On entry : 0/0
  7001 ;;		On exit  : 0/0
  7002 ;;		Unchanged: 0/0
  7003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7004 ;;      Params:         0       0       0       0       0       0       0
  7005 ;;      Locals:         0       0       0       0       0       0       0
  7006 ;;      Temps:          0       0       0       0       0       0       0
  7007 ;;      Totals:         0       0       0       0       0       0       0
  7008 ;;Total ram usage:        0 bytes
  7009 ;; Hardware stack levels used:    1
  7010 ;; Hardware stack levels required when called:    6
  7011 ;; This function calls:
  7012 ;;		_SendAckMessage
  7013 ;; This function is called by:
  7014 ;;		_GroupControlMcu
  7015 ;; This function uses a non-reentrant model
  7016 ;;
  7017                           
  7018                           	psect	text37
  7019  003756                     __ptext37:
  7020                           	opt stack 0
  7021  003756                     _ResetCpld:
  7022                           	opt stack 22
  7023                           
  7024                           ;SystemCommon.c: 126: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_RESET
      +                          _CPLD);
  7025                           
  7026                           ;incstack = 0
  7027  003756  0E12               	movlw	18
  7028  003758  6E24               	movwf	SendAckMessage@inRequest,c
  7029  00375A  0E01               	movlw	1
  7030  00375C  ECF7  F016         	call	_SendAckMessage
  7031  003760  0012               	return		;funcret
  7032  003762                     __end_of_ResetCpld:
  7033                           	opt stack 0
  7034                           tosu	equ	0xFFF
  7035                           tosh	equ	0xFFE
  7036                           tosl	equ	0xFFD
  7037                           pclath	equ	0xFFA
  7038                           tblptru	equ	0xFF8
  7039                           tblptrh	equ	0xFF7
  7040                           tblptrl	equ	0xFF6
  7041                           tablat	equ	0xFF5
  7042                           prodh	equ	0xFF4
  7043                           prodl	equ	0xFF3
  7044                           intcon	equ	0xFF2
  7045                           postinc0	equ	0xFEE
  7046                           wreg	equ	0xFE8
  7047                           indf1	equ	0xFE7
  7048                           postdec1	equ	0xFE5
  7049                           fsr1h	equ	0xFE2
  7050                           fsr1l	equ	0xFE1
  7051                           indf2	equ	0xFDF
  7052                           postinc2	equ	0xFDE
  7053                           postdec2	equ	0xFDD
  7054                           fsr2h	equ	0xFDA
  7055                           fsr2l	equ	0xFD9
  7056                           status	equ	0xFD8
  7057                           
  7058 ;; *************** function _SetConversionResultFormat *****************
  7059 ;; Defined at:
  7060 ;;		line 38 in file "AdcApp.c"
  7061 ;; Parameters:    Size  Location     Type
  7062 ;;  data            2   43[COMRAM] PTR unsigned char 
  7063 ;; Auto vars:     Size  Location     Type
  7064 ;;		None
  7065 ;; Return value:  Size  Location     Type
  7066 ;;                  1    wreg      void 
  7067 ;; Registers used:
  7068 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7069 ;; Tracked objects:
  7070 ;;		On entry : 0/0
  7071 ;;		On exit  : 0/0
  7072 ;;		Unchanged: 0/0
  7073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7074 ;;      Params:         2       0       0       0       0       0       0
  7075 ;;      Locals:         0       0       0       0       0       0       0
  7076 ;;      Temps:          0       0       0       0       0       0       0
  7077 ;;      Totals:         2       0       0       0       0       0       0
  7078 ;;Total ram usage:        2 bytes
  7079 ;; Hardware stack levels used:    1
  7080 ;; Hardware stack levels required when called:    6
  7081 ;; This function calls:
  7082 ;;		_SendAckMessage
  7083 ;; This function is called by:
  7084 ;;		_GroupAdc
  7085 ;; This function uses a non-reentrant model
  7086 ;;
  7087                           
  7088                           	psect	text38
  7089  003762                     __ptext38:
  7090                           	opt stack 0
  7091  003762                     _SetConversionResultFormat:
  7092                           	opt stack 22
  7093                           
  7094                           ;AdcApp.c: 40: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_CONVERSION_MODE);
  7095                           
  7096                           ;incstack = 0
  7097  003762  0E33               	movlw	51
  7098  003764  6E24               	movwf	SendAckMessage@inRequest,c
  7099  003766  0E03               	movlw	3
  7100  003768  ECF7  F016         	call	_SendAckMessage
  7101  00376C  0012               	return		;funcret
  7102  00376E                     __end_of_SetConversionResultFormat:
  7103                           	opt stack 0
  7104                           tosu	equ	0xFFF
  7105                           tosh	equ	0xFFE
  7106                           tosl	equ	0xFFD
  7107                           pclath	equ	0xFFA
  7108                           tblptru	equ	0xFF8
  7109                           tblptrh	equ	0xFF7
  7110                           tblptrl	equ	0xFF6
  7111                           tablat	equ	0xFF5
  7112                           prodh	equ	0xFF4
  7113                           prodl	equ	0xFF3
  7114                           intcon	equ	0xFF2
  7115                           postinc0	equ	0xFEE
  7116                           wreg	equ	0xFE8
  7117                           indf1	equ	0xFE7
  7118                           postdec1	equ	0xFE5
  7119                           fsr1h	equ	0xFE2
  7120                           fsr1l	equ	0xFE1
  7121                           indf2	equ	0xFDF
  7122                           postinc2	equ	0xFDE
  7123                           postdec2	equ	0xFDD
  7124                           fsr2h	equ	0xFDA
  7125                           fsr2l	equ	0xFD9
  7126                           status	equ	0xFD8
  7127                           
  7128 ;; *************** function _SetChannelMode *****************
  7129 ;; Defined at:
  7130 ;;		line 43 in file "AdcApp.c"
  7131 ;; Parameters:    Size  Location     Type
  7132 ;;  data            2   43[COMRAM] PTR unsigned char 
  7133 ;; Auto vars:     Size  Location     Type
  7134 ;;		None
  7135 ;; Return value:  Size  Location     Type
  7136 ;;                  1    wreg      void 
  7137 ;; Registers used:
  7138 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7139 ;; Tracked objects:
  7140 ;;		On entry : 0/0
  7141 ;;		On exit  : 0/0
  7142 ;;		Unchanged: 0/0
  7143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7144 ;;      Params:         2       0       0       0       0       0       0
  7145 ;;      Locals:         0       0       0       0       0       0       0
  7146 ;;      Temps:          0       0       0       0       0       0       0
  7147 ;;      Totals:         2       0       0       0       0       0       0
  7148 ;;Total ram usage:        2 bytes
  7149 ;; Hardware stack levels used:    1
  7150 ;; Hardware stack levels required when called:    6
  7151 ;; This function calls:
  7152 ;;		_SendAckMessage
  7153 ;; This function is called by:
  7154 ;;		_GroupAdc
  7155 ;; This function uses a non-reentrant model
  7156 ;;
  7157                           
  7158                           	psect	text39
  7159  0033D8                     __ptext39:
  7160                           	opt stack 0
  7161  0033D8                     _SetChannelMode:
  7162                           	opt stack 22
  7163                           
  7164                           ;AdcApp.c: 45: adcSampleMode = data[0];
  7165                           
  7166                           ;incstack = 0
  7167  0033D8  C02C  FFD9         	movff	SetChannelMode@data,fsr2l
  7168  0033DC  C02D  FFDA         	movff	SetChannelMode@data+1,fsr2h
  7169  0033E0  50DF               	movf	indf2,w,c
  7170  0033E2  6E3D               	movwf	_adcSampleMode,c
  7171                           
  7172                           ;AdcApp.c: 46: if (adcSampleMode == SINGLE_CHANNEL)
  7173  0033E4  043D               	decf	_adcSampleMode,w,c
  7174  0033E6  A4D8               	btfss	status,2,c
  7175  0033E8  D009               	goto	l104
  7176                           
  7177                           ;AdcApp.c: 47: {
  7178                           ;AdcApp.c: 48: channel = data[1];
  7179  0033EA  EE20 F001          	lfsr	2,1
  7180  0033EE  502C               	movf	SetChannelMode@data,w,c
  7181  0033F0  26D9               	addwf	fsr2l,f,c
  7182  0033F2  502D               	movf	SetChannelMode@data+1,w,c
  7183  0033F4  22DA               	addwfc	fsr2h,f,c
  7184  0033F6  50DF               	movf	indf2,w,c
  7185  0033F8  0100               	movlb	0	; () banked
  7186  0033FA  6FD4               	movwf	_channel& (0+255),b
  7187  0033FC                     l104:
  7188                           
  7189                           ;AdcApp.c: 49: }
  7190                           ;AdcApp.c: 50: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_CHANNEL_MODE);
  7191                           
  7192                           ; BSR set to: 0
  7193  0033FC  0E32               	movlw	50
  7194  0033FE  6E24               	movwf	SendAckMessage@inRequest,c
  7195  003400  0E03               	movlw	3
  7196  003402  ECF7  F016         	call	_SendAckMessage
  7197  003406  0012               	return		;funcret
  7198  003408                     __end_of_SetChannelMode:
  7199                           	opt stack 0
  7200                           tosu	equ	0xFFF
  7201                           tosh	equ	0xFFE
  7202                           tosl	equ	0xFFD
  7203                           pclath	equ	0xFFA
  7204                           tblptru	equ	0xFF8
  7205                           tblptrh	equ	0xFF7
  7206                           tblptrl	equ	0xFF6
  7207                           tablat	equ	0xFF5
  7208                           prodh	equ	0xFF4
  7209                           prodl	equ	0xFF3
  7210                           intcon	equ	0xFF2
  7211                           postinc0	equ	0xFEE
  7212                           wreg	equ	0xFE8
  7213                           indf1	equ	0xFE7
  7214                           postdec1	equ	0xFE5
  7215                           fsr1h	equ	0xFE2
  7216                           fsr1l	equ	0xFE1
  7217                           indf2	equ	0xFDF
  7218                           postinc2	equ	0xFDE
  7219                           postdec2	equ	0xFDD
  7220                           fsr2h	equ	0xFDA
  7221                           fsr2l	equ	0xFD9
  7222                           status	equ	0xFD8
  7223                           
  7224 ;; *************** function _SetAdcOperationMode *****************
  7225 ;; Defined at:
  7226 ;;		line 33 in file "AdcApp.c"
  7227 ;; Parameters:    Size  Location     Type
  7228 ;;  data            2   43[COMRAM] PTR unsigned char 
  7229 ;; Auto vars:     Size  Location     Type
  7230 ;;		None
  7231 ;; Return value:  Size  Location     Type
  7232 ;;                  1    wreg      void 
  7233 ;; Registers used:
  7234 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7235 ;; Tracked objects:
  7236 ;;		On entry : 0/0
  7237 ;;		On exit  : 0/0
  7238 ;;		Unchanged: 0/0
  7239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7240 ;;      Params:         2       0       0       0       0       0       0
  7241 ;;      Locals:         0       0       0       0       0       0       0
  7242 ;;      Temps:          0       0       0       0       0       0       0
  7243 ;;      Totals:         2       0       0       0       0       0       0
  7244 ;;Total ram usage:        2 bytes
  7245 ;; Hardware stack levels used:    1
  7246 ;; Hardware stack levels required when called:    6
  7247 ;; This function calls:
  7248 ;;		_SendAckMessage
  7249 ;; This function is called by:
  7250 ;;		_GroupAdc
  7251 ;; This function uses a non-reentrant model
  7252 ;;
  7253                           
  7254                           	psect	text40
  7255  00376E                     __ptext40:
  7256                           	opt stack 0
  7257  00376E                     _SetAdcOperationMode:
  7258                           	opt stack 22
  7259                           
  7260                           ;AdcApp.c: 35: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_OPERATION);
  7261                           
  7262                           ;incstack = 0
  7263  00376E  0E31               	movlw	49
  7264  003770  6E24               	movwf	SendAckMessage@inRequest,c
  7265  003772  0E03               	movlw	3
  7266  003774  ECF7  F016         	call	_SendAckMessage
  7267  003778  0012               	return		;funcret
  7268  00377A                     __end_of_SetAdcOperationMode:
  7269                           	opt stack 0
  7270                           tosu	equ	0xFFF
  7271                           tosh	equ	0xFFE
  7272                           tosl	equ	0xFFD
  7273                           pclath	equ	0xFFA
  7274                           tblptru	equ	0xFF8
  7275                           tblptrh	equ	0xFF7
  7276                           tblptrl	equ	0xFF6
  7277                           tablat	equ	0xFF5
  7278                           prodh	equ	0xFF4
  7279                           prodl	equ	0xFF3
  7280                           intcon	equ	0xFF2
  7281                           postinc0	equ	0xFEE
  7282                           wreg	equ	0xFE8
  7283                           indf1	equ	0xFE7
  7284                           postdec1	equ	0xFE5
  7285                           fsr1h	equ	0xFE2
  7286                           fsr1l	equ	0xFE1
  7287                           indf2	equ	0xFDF
  7288                           postinc2	equ	0xFDE
  7289                           postdec2	equ	0xFDD
  7290                           fsr2h	equ	0xFDA
  7291                           fsr2l	equ	0xFD9
  7292                           status	equ	0xFD8
  7293                           
  7294 ;; *************** function _EUSART1_Read *****************
  7295 ;; Defined at:
  7296 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  7297 ;; Parameters:    Size  Location     Type
  7298 ;;		None
  7299 ;; Auto vars:     Size  Location     Type
  7300 ;;  readValue       2   24[COMRAM] unsigned int 
  7301 ;; Return value:  Size  Location     Type
  7302 ;;                  1    wreg      unsigned char 
  7303 ;; Registers used:
  7304 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7305 ;; Tracked objects:
  7306 ;;		On entry : 0/0
  7307 ;;		On exit  : 0/0
  7308 ;;		Unchanged: 0/0
  7309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7310 ;;      Params:         0       0       0       0       0       0       0
  7311 ;;      Locals:         2       0       0       0       0       0       0
  7312 ;;      Temps:          1       0       0       0       0       0       0
  7313 ;;      Totals:         3       0       0       0       0       0       0
  7314 ;;Total ram usage:        3 bytes
  7315 ;; Hardware stack levels used:    1
  7316 ;; Hardware stack levels required when called:    3
  7317 ;; This function calls:
  7318 ;;		Nothing
  7319 ;; This function is called by:
  7320 ;;		_readUartMessage
  7321 ;; This function uses a non-reentrant model
  7322 ;;
  7323                           
  7324                           	psect	text41
  7325  002FB2                     __ptext41:
  7326                           	opt stack 0
  7327  002FB2                     _EUSART1_Read:
  7328                           	opt stack 26
  7329                           
  7330                           ;eusart1.c: 112: uint16_t readValue = 0;
  7331                           
  7332                           ;incstack = 0
  7333  002FB2  0E00               	movlw	0
  7334  002FB4  6E1A               	movwf	EUSART1_Read@readValue+1,c
  7335  002FB6  0E00               	movlw	0
  7336  002FB8  6E19               	movwf	EUSART1_Read@readValue,c
  7337                           
  7338                           ;eusart1.c: 119: if (eusart1RxCount == 0)
  7339  002FBA  0100               	movlb	0	; () banked
  7340  002FBC  51D3               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  7341  002FBE  A4D8               	btfss	status,2,c
  7342  002FC0  D002               	goto	l763
  7343                           
  7344                           ; BSR set to: 0
  7345                           ;eusart1.c: 120: {
  7346                           ;eusart1.c: 121: return readValue;
  7347  002FC2  5019               	movf	EUSART1_Read@readValue,w,c
  7348                           
  7349                           ; BSR set to: 0
  7350  002FC4  0012               	return	
  7351  002FC6                     l763:
  7352                           
  7353                           ; BSR set to: 0
  7354                           ;eusart1.c: 122: }
  7355                           ;eusart1.c: 124: readValue = eusart1RxBuffer[eusart1RxTail++];
  7356                           
  7357                           ; BSR set to: 0
  7358  002FC6  5037               	movf	_eusart1RxTail,w,c	;volatile
  7359  002FC8  0D01               	mullw	1
  7360  002FCA  0E46               	movlw	low _eusart1RxBuffer
  7361  002FCC  24F3               	addwf	prodl,w,c
  7362  002FCE  6ED9               	movwf	fsr2l,c
  7363  002FD0  0E01               	movlw	high _eusart1RxBuffer
  7364  002FD2  20F4               	addwfc	prodh,w,c
  7365  002FD4  6EDA               	movwf	fsr2h,c
  7366  002FD6  50DF               	movf	indf2,w,c
  7367  002FD8  6E18               	movwf	??_EUSART1_Read& (0+255),c
  7368  002FDA  5018               	movf	??_EUSART1_Read,w,c
  7369  002FDC  6E19               	movwf	EUSART1_Read@readValue,c
  7370  002FDE  6A1A               	clrf	EUSART1_Read@readValue+1,c
  7371                           
  7372                           ; BSR set to: 0
  7373  002FE0  2A37               	incf	_eusart1RxTail,f,c	;volatile
  7374                           
  7375                           ; BSR set to: 0
  7376                           ;eusart1.c: 125: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
  7377  002FE2  0E27               	movlw	39
  7378  002FE4  6437               	cpfsgt	_eusart1RxTail,c	;volatile
  7379  002FE6  D002               	goto	l765
  7380                           
  7381                           ; BSR set to: 0
  7382                           ;eusart1.c: 126: {
  7383                           ;eusart1.c: 127: eusart1RxTail = 0;
  7384  002FE8  0E00               	movlw	0
  7385  002FEA  6E37               	movwf	_eusart1RxTail,c	;volatile
  7386  002FEC                     l765:
  7387                           
  7388                           ; BSR set to: 0
  7389                           ;eusart1.c: 128: }
  7390                           ;eusart1.c: 129: PIE1bits.RC1IE = 0;
  7391                           
  7392                           ; BSR set to: 0
  7393  002FEC  9A9D               	bcf	3997,5,c	;volatile
  7394                           
  7395                           ; BSR set to: 0
  7396                           ;eusart1.c: 130: eusart1RxCount--;
  7397  002FEE  07D3               	decf	_eusart1RxCount& (0+255),f,b	;volatile
  7398                           
  7399                           ; BSR set to: 0
  7400                           ;eusart1.c: 131: PIE1bits.RC1IE = 1;
  7401  002FF0  8A9D               	bsf	3997,5,c	;volatile
  7402                           
  7403                           ; BSR set to: 0
  7404                           ;eusart1.c: 133: return readValue;
  7405  002FF2  5019               	movf	EUSART1_Read@readValue,w,c
  7406  002FF4  0012               	return	
  7407  002FF6                     __end_of_EUSART1_Read:
  7408                           	opt stack 0
  7409                           tosu	equ	0xFFF
  7410                           tosh	equ	0xFFE
  7411                           tosl	equ	0xFFD
  7412                           pclath	equ	0xFFA
  7413                           tblptru	equ	0xFF8
  7414                           tblptrh	equ	0xFF7
  7415                           tblptrl	equ	0xFF6
  7416                           tablat	equ	0xFF5
  7417                           prodh	equ	0xFF4
  7418                           prodl	equ	0xFF3
  7419                           intcon	equ	0xFF2
  7420                           postinc0	equ	0xFEE
  7421                           wreg	equ	0xFE8
  7422                           indf1	equ	0xFE7
  7423                           postdec1	equ	0xFE5
  7424                           fsr1h	equ	0xFE2
  7425                           fsr1l	equ	0xFE1
  7426                           indf2	equ	0xFDF
  7427                           postinc2	equ	0xFDE
  7428                           postdec2	equ	0xFDD
  7429                           fsr2h	equ	0xFDA
  7430                           fsr2l	equ	0xFD9
  7431                           status	equ	0xFD8
  7432                           
  7433 ;; *************** function _keepAliveSignalUart *****************
  7434 ;; Defined at:
  7435 ;;		line 117 in file "SystemStatus.c"
  7436 ;; Parameters:    Size  Location     Type
  7437 ;;		None
  7438 ;; Auto vars:     Size  Location     Type
  7439 ;;		None
  7440 ;; Return value:  Size  Location     Type
  7441 ;;                  1    wreg      void 
  7442 ;; Registers used:
  7443 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7444 ;; Tracked objects:
  7445 ;;		On entry : 0/0
  7446 ;;		On exit  : 0/0
  7447 ;;		Unchanged: 0/0
  7448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7449 ;;      Params:         0       0       0       0       0       0       0
  7450 ;;      Locals:         0       0       0       0       0       0       0
  7451 ;;      Temps:          0       0       0       0       0       0       0
  7452 ;;      Totals:         0       0       0       0       0       0       0
  7453 ;;Total ram usage:        0 bytes
  7454 ;; Hardware stack levels used:    1
  7455 ;; Hardware stack levels required when called:    6
  7456 ;; This function calls:
  7457 ;;		_SendAckMessage
  7458 ;; This function is called by:
  7459 ;;		_main
  7460 ;; This function uses a non-reentrant model
  7461 ;;
  7462                           
  7463                           	psect	text42
  7464  00377A                     __ptext42:
  7465                           	opt stack 0
  7466  00377A                     _keepAliveSignalUart:
  7467                           	opt stack 24
  7468                           
  7469                           ;SystemStatus.c: 119: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_KEEP_
      +                          ALIVE);
  7470                           
  7471                           ; BSR set to: 0
  7472                           ;incstack = 0
  7473  00377A  0E16               	movlw	22
  7474  00377C  6E24               	movwf	SendAckMessage@inRequest,c
  7475  00377E  0E01               	movlw	1
  7476  003780  ECF7  F016         	call	_SendAckMessage
  7477  003784  0012               	return		;funcret
  7478  003786                     __end_of_keepAliveSignalUart:
  7479                           	opt stack 0
  7480                           tosu	equ	0xFFF
  7481                           tosh	equ	0xFFE
  7482                           tosl	equ	0xFFD
  7483                           pclath	equ	0xFFA
  7484                           tblptru	equ	0xFF8
  7485                           tblptrh	equ	0xFF7
  7486                           tblptrl	equ	0xFF6
  7487                           tablat	equ	0xFF5
  7488                           prodh	equ	0xFF4
  7489                           prodl	equ	0xFF3
  7490                           intcon	equ	0xFF2
  7491                           postinc0	equ	0xFEE
  7492                           wreg	equ	0xFE8
  7493                           indf1	equ	0xFE7
  7494                           postdec1	equ	0xFE5
  7495                           fsr1h	equ	0xFE2
  7496                           fsr1l	equ	0xFE1
  7497                           indf2	equ	0xFDF
  7498                           postinc2	equ	0xFDE
  7499                           postdec2	equ	0xFDD
  7500                           fsr2h	equ	0xFDA
  7501                           fsr2l	equ	0xFD9
  7502                           status	equ	0xFD8
  7503                           
  7504 ;; *************** function _keepAliveSignalLed *****************
  7505 ;; Defined at:
  7506 ;;		line 35 in file "LedsApp.c"
  7507 ;; Parameters:    Size  Location     Type
  7508 ;;		None
  7509 ;; Auto vars:     Size  Location     Type
  7510 ;;		None
  7511 ;; Return value:  Size  Location     Type
  7512 ;;                  1    wreg      void 
  7513 ;; Registers used:
  7514 ;;		wreg, status,2, status,0
  7515 ;; Tracked objects:
  7516 ;;		On entry : 0/0
  7517 ;;		On exit  : 0/0
  7518 ;;		Unchanged: 0/0
  7519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7520 ;;      Params:         0       0       0       0       0       0       0
  7521 ;;      Locals:         0       0       0       0       0       0       0
  7522 ;;      Temps:          1       0       0       0       0       0       0
  7523 ;;      Totals:         1       0       0       0       0       0       0
  7524 ;;Total ram usage:        1 bytes
  7525 ;; Hardware stack levels used:    1
  7526 ;; Hardware stack levels required when called:    3
  7527 ;; This function calls:
  7528 ;;		Nothing
  7529 ;; This function is called by:
  7530 ;;		_main
  7531 ;; This function uses a non-reentrant model
  7532 ;;
  7533                           
  7534                           	psect	text43
  7535  00366C                     __ptext43:
  7536                           	opt stack 0
  7537  00366C                     _keepAliveSignalLed:
  7538                           	opt stack 27
  7539                           
  7540                           ;LedsApp.c: 37: LATCbits.LATC0 = !LATCbits.LATC0;
  7541                           
  7542                           ;incstack = 0
  7543  00366C  B08B               	btfsc	3979,0,c	;volatile
  7544  00366E  D003               	goto	u5220
  7545  003670  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  7546  003672  2A18               	incf	??_keepAliveSignalLed& (0+255),f,c
  7547  003674  D001               	goto	u5238
  7548  003676                     u5220:
  7549  003676  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  7550  003678                     u5238:
  7551  003678  508B               	movf	3979,w,c	;volatile
  7552  00367A  1818               	xorwf	??_keepAliveSignalLed,w,c
  7553  00367C  0BFE               	andlw	-2
  7554  00367E  1818               	xorwf	??_keepAliveSignalLed,w,c
  7555  003680  6E8B               	movwf	3979,c	;volatile
  7556  003682  0012               	return		;funcret
  7557  003684                     __end_of_keepAliveSignalLed:
  7558                           	opt stack 0
  7559                           tosu	equ	0xFFF
  7560                           tosh	equ	0xFFE
  7561                           tosl	equ	0xFFD
  7562                           pclath	equ	0xFFA
  7563                           tblptru	equ	0xFF8
  7564                           tblptrh	equ	0xFF7
  7565                           tblptrl	equ	0xFF6
  7566                           tablat	equ	0xFF5
  7567                           prodh	equ	0xFF4
  7568                           prodl	equ	0xFF3
  7569                           intcon	equ	0xFF2
  7570                           postinc0	equ	0xFEE
  7571                           wreg	equ	0xFE8
  7572                           indf1	equ	0xFE7
  7573                           postdec1	equ	0xFE5
  7574                           fsr1h	equ	0xFE2
  7575                           fsr1l	equ	0xFE1
  7576                           indf2	equ	0xFDF
  7577                           postinc2	equ	0xFDE
  7578                           postdec2	equ	0xFDD
  7579                           fsr2h	equ	0xFDA
  7580                           fsr2l	equ	0xFD9
  7581                           status	equ	0xFD8
  7582                           
  7583 ;; *************** function _SetMcuSystem *****************
  7584 ;; Defined at:
  7585 ;;		line 11 in file "SystemSettings.c"
  7586 ;; Parameters:    Size  Location     Type
  7587 ;;		None
  7588 ;; Auto vars:     Size  Location     Type
  7589 ;;		None
  7590 ;; Return value:  Size  Location     Type
  7591 ;;                  1    wreg      void 
  7592 ;; Registers used:
  7593 ;;		wreg, status,2, status,0, cstack
  7594 ;; Tracked objects:
  7595 ;;		On entry : 0/0
  7596 ;;		On exit  : 0/0
  7597 ;;		Unchanged: 0/0
  7598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7599 ;;      Params:         0       0       0       0       0       0       0
  7600 ;;      Locals:         0       0       0       0       0       0       0
  7601 ;;      Temps:          0       0       0       0       0       0       0
  7602 ;;      Totals:         0       0       0       0       0       0       0
  7603 ;;Total ram usage:        0 bytes
  7604 ;; Hardware stack levels used:    1
  7605 ;; Hardware stack levels required when called:    6
  7606 ;; This function calls:
  7607 ;;		_SYSTEM_Initialize
  7608 ;; This function is called by:
  7609 ;;		_main
  7610 ;; This function uses a non-reentrant model
  7611 ;;
  7612                           
  7613                           	psect	text44
  7614  003792                     __ptext44:
  7615                           	opt stack 0
  7616  003792                     _SetMcuSystem:
  7617                           	opt stack 24
  7618                           
  7619                           ;SystemSettings.c: 14: SYSTEM_Initialize();
  7620                           
  7621                           ;incstack = 0
  7622  003792  EC29  F01B         	call	_SYSTEM_Initialize	;wreg free
  7623                           
  7624                           ;SystemSettings.c: 21: (INTCONbits.GIE = 1);
  7625  003796  8EF2               	bsf	intcon,7,c	;volatile
  7626                           
  7627                           ;SystemSettings.c: 27: (INTCONbits.PEIE = 1);
  7628  003798  8CF2               	bsf	intcon,6,c	;volatile
  7629  00379A  0012               	return		;funcret
  7630  00379C                     __end_of_SetMcuSystem:
  7631                           	opt stack 0
  7632                           tosu	equ	0xFFF
  7633                           tosh	equ	0xFFE
  7634                           tosl	equ	0xFFD
  7635                           pclath	equ	0xFFA
  7636                           tblptru	equ	0xFF8
  7637                           tblptrh	equ	0xFF7
  7638                           tblptrl	equ	0xFF6
  7639                           tablat	equ	0xFF5
  7640                           prodh	equ	0xFF4
  7641                           prodl	equ	0xFF3
  7642                           intcon	equ	0xFF2
  7643                           postinc0	equ	0xFEE
  7644                           wreg	equ	0xFE8
  7645                           indf1	equ	0xFE7
  7646                           postdec1	equ	0xFE5
  7647                           fsr1h	equ	0xFE2
  7648                           fsr1l	equ	0xFE1
  7649                           indf2	equ	0xFDF
  7650                           postinc2	equ	0xFDE
  7651                           postdec2	equ	0xFDD
  7652                           fsr2h	equ	0xFDA
  7653                           fsr2l	equ	0xFD9
  7654                           status	equ	0xFD8
  7655                           
  7656 ;; *************** function _SYSTEM_Initialize *****************
  7657 ;; Defined at:
  7658 ;;		line 112 in file "mcc_generated_files/mcc.c"
  7659 ;; Parameters:    Size  Location     Type
  7660 ;;		None
  7661 ;; Auto vars:     Size  Location     Type
  7662 ;;		None
  7663 ;; Return value:  Size  Location     Type
  7664 ;;                  1    wreg      void 
  7665 ;; Registers used:
  7666 ;;		wreg, status,2, status,0, cstack
  7667 ;; Tracked objects:
  7668 ;;		On entry : 0/0
  7669 ;;		On exit  : 0/0
  7670 ;;		Unchanged: 0/0
  7671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7672 ;;      Params:         0       0       0       0       0       0       0
  7673 ;;      Locals:         0       0       0       0       0       0       0
  7674 ;;      Temps:          0       0       0       0       0       0       0
  7675 ;;      Totals:         0       0       0       0       0       0       0
  7676 ;;Total ram usage:        0 bytes
  7677 ;; Hardware stack levels used:    1
  7678 ;; Hardware stack levels required when called:    5
  7679 ;; This function calls:
  7680 ;;		_ADC_Initialize
  7681 ;;		_EUSART1_Initialize
  7682 ;;		_INTERRUPT_Initialize
  7683 ;;		_OSCILLATOR_Initialize
  7684 ;;		_PIN_MANAGER_Initialize
  7685 ;;		_TMR0_Initialize
  7686 ;; This function is called by:
  7687 ;;		_SetMcuSystem
  7688 ;; This function uses a non-reentrant model
  7689 ;;
  7690                           
  7691                           	psect	text45
  7692  003652                     __ptext45:
  7693                           	opt stack 0
  7694  003652                     _SYSTEM_Initialize:
  7695                           	opt stack 24
  7696                           
  7697                           ;mcc.c: 114: INTERRUPT_Initialize();
  7698                           
  7699                           ;incstack = 0
  7700  003652  ECDA  F01B         	call	_INTERRUPT_Initialize	;wreg free
  7701                           
  7702                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  7703  003656  EC93  F017         	call	_PIN_MANAGER_Initialize	;wreg free
  7704                           
  7705                           ;mcc.c: 116: OSCILLATOR_Initialize();
  7706  00365A  EC9D  F01B         	call	_OSCILLATOR_Initialize	;wreg free
  7707                           
  7708                           ;mcc.c: 117: ADC_Initialize();
  7709  00365E  EC42  F01B         	call	_ADC_Initialize	;wreg free
  7710                           
  7711                           ;mcc.c: 118: TMR0_Initialize();
  7712  003662  ECB8  F019         	call	_TMR0_Initialize	;wreg free
  7713                           
  7714                           ;mcc.c: 119: EUSART1_Initialize();
  7715  003666  EC82  F019         	call	_EUSART1_Initialize	;wreg free
  7716  00366A  0012               	return		;funcret
  7717  00366C                     __end_of_SYSTEM_Initialize:
  7718                           	opt stack 0
  7719                           tosu	equ	0xFFF
  7720                           tosh	equ	0xFFE
  7721                           tosl	equ	0xFFD
  7722                           pclath	equ	0xFFA
  7723                           tblptru	equ	0xFF8
  7724                           tblptrh	equ	0xFF7
  7725                           tblptrl	equ	0xFF6
  7726                           tablat	equ	0xFF5
  7727                           prodh	equ	0xFF4
  7728                           prodl	equ	0xFF3
  7729                           intcon	equ	0xFF2
  7730                           postinc0	equ	0xFEE
  7731                           wreg	equ	0xFE8
  7732                           indf1	equ	0xFE7
  7733                           postdec1	equ	0xFE5
  7734                           fsr1h	equ	0xFE2
  7735                           fsr1l	equ	0xFE1
  7736                           indf2	equ	0xFDF
  7737                           postinc2	equ	0xFDE
  7738                           postdec2	equ	0xFDD
  7739                           fsr2h	equ	0xFDA
  7740                           fsr2l	equ	0xFD9
  7741                           status	equ	0xFD8
  7742                           
  7743 ;; *************** function _TMR0_Initialize *****************
  7744 ;; Defined at:
  7745 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  7746 ;; Parameters:    Size  Location     Type
  7747 ;;		None
  7748 ;; Auto vars:     Size  Location     Type
  7749 ;;		None
  7750 ;; Return value:  Size  Location     Type
  7751 ;;                  1    wreg      void 
  7752 ;; Registers used:
  7753 ;;		wreg, status,2, status,0, cstack
  7754 ;; Tracked objects:
  7755 ;;		On entry : 0/0
  7756 ;;		On exit  : 0/0
  7757 ;;		Unchanged: 0/0
  7758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7759 ;;      Params:         0       0       0       0       0       0       0
  7760 ;;      Locals:         0       0       0       0       0       0       0
  7761 ;;      Temps:          2       0       0       0       0       0       0
  7762 ;;      Totals:         2       0       0       0       0       0       0
  7763 ;;Total ram usage:        2 bytes
  7764 ;; Hardware stack levels used:    1
  7765 ;; Hardware stack levels required when called:    4
  7766 ;; This function calls:
  7767 ;;		_TMR0_SetInterruptHandler
  7768 ;; This function is called by:
  7769 ;;		_SYSTEM_Initialize
  7770 ;; This function uses a non-reentrant model
  7771 ;;
  7772                           
  7773                           	psect	text46
  7774  003370                     __ptext46:
  7775                           	opt stack 0
  7776  003370                     _TMR0_Initialize:
  7777                           	opt stack 24
  7778                           
  7779                           ;tmr0.c: 71: TMR0H = 0x3C;
  7780                           
  7781                           ;incstack = 0
  7782  003370  0E3C               	movlw	60
  7783  003372  6ED7               	movwf	4055,c	;volatile
  7784                           
  7785                           ;tmr0.c: 74: TMR0L = 0xAF;
  7786  003374  0EAF               	movlw	175
  7787  003376  6ED6               	movwf	4054,c	;volatile
  7788                           
  7789                           ;tmr0.c: 78: timer0ReloadVal = (TMR0H << 8) | TMR0L;
  7790  003378  50D6               	movf	4054,w,c	;volatile
  7791  00337A  CFD7 F01A          	movff	4055,??_TMR0_Initialize	;volatile
  7792  00337E  6A1B               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  7793  003380  C01A  F01B         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  7794  003384  6A1A               	clrf	??_TMR0_Initialize,c
  7795  003386  101A               	iorwf	??_TMR0_Initialize,w,c
  7796  003388  6E46               	movwf	_timer0ReloadVal,c	;volatile
  7797  00338A  501B               	movf	??_TMR0_Initialize+1,w,c
  7798  00338C  6E47               	movwf	_timer0ReloadVal+1,c	;volatile
  7799                           
  7800                           ;tmr0.c: 81: INTCONbits.TMR0IF = 0;
  7801  00338E  94F2               	bcf	intcon,2,c	;volatile
  7802                           
  7803                           ;tmr0.c: 84: INTCONbits.TMR0IE = 1;
  7804  003390  8AF2               	bsf	intcon,5,c	;volatile
  7805                           
  7806                           ;tmr0.c: 87: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  7807  003392  0E00               	movlw	0
  7808  003394  6E18               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  7809  003396  0E00               	movlw	0
  7810  003398  6E19               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  7811  00339A  ECCE  F01B         	call	_TMR0_SetInterruptHandler	;wreg free
  7812                           
  7813                           ;tmr0.c: 90: T0CON = 0x90;
  7814  00339E  0E90               	movlw	144
  7815  0033A0  6ED5               	movwf	4053,c	;volatile
  7816  0033A2  0012               	return		;funcret
  7817  0033A4                     __end_of_TMR0_Initialize:
  7818                           	opt stack 0
  7819                           tosu	equ	0xFFF
  7820                           tosh	equ	0xFFE
  7821                           tosl	equ	0xFFD
  7822                           pclath	equ	0xFFA
  7823                           tblptru	equ	0xFF8
  7824                           tblptrh	equ	0xFF7
  7825                           tblptrl	equ	0xFF6
  7826                           tablat	equ	0xFF5
  7827                           prodh	equ	0xFF4
  7828                           prodl	equ	0xFF3
  7829                           intcon	equ	0xFF2
  7830                           postinc0	equ	0xFEE
  7831                           wreg	equ	0xFE8
  7832                           indf1	equ	0xFE7
  7833                           postdec1	equ	0xFE5
  7834                           fsr1h	equ	0xFE2
  7835                           fsr1l	equ	0xFE1
  7836                           indf2	equ	0xFDF
  7837                           postinc2	equ	0xFDE
  7838                           postdec2	equ	0xFDD
  7839                           fsr2h	equ	0xFDA
  7840                           fsr2l	equ	0xFD9
  7841                           status	equ	0xFD8
  7842                           
  7843 ;; *************** function _TMR0_SetInterruptHandler *****************
  7844 ;; Defined at:
  7845 ;;		line 177 in file "mcc_generated_files/tmr0.c"
  7846 ;; Parameters:    Size  Location     Type
  7847 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  7848 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  7849 ;; Auto vars:     Size  Location     Type
  7850 ;;		None
  7851 ;; Return value:  Size  Location     Type
  7852 ;;                  1    wreg      void 
  7853 ;; Registers used:
  7854 ;;		wreg, status,2, status,0
  7855 ;; Tracked objects:
  7856 ;;		On entry : 0/0
  7857 ;;		On exit  : 0/0
  7858 ;;		Unchanged: 0/0
  7859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7860 ;;      Params:         2       0       0       0       0       0       0
  7861 ;;      Locals:         0       0       0       0       0       0       0
  7862 ;;      Temps:          0       0       0       0       0       0       0
  7863 ;;      Totals:         2       0       0       0       0       0       0
  7864 ;;Total ram usage:        2 bytes
  7865 ;; Hardware stack levels used:    1
  7866 ;; Hardware stack levels required when called:    3
  7867 ;; This function calls:
  7868 ;;		Nothing
  7869 ;; This function is called by:
  7870 ;;		_TMR0_Initialize
  7871 ;; This function uses a non-reentrant model
  7872 ;;
  7873                           
  7874                           	psect	text47
  7875  00379C                     __ptext47:
  7876                           	opt stack 0
  7877  00379C                     _TMR0_SetInterruptHandler:
  7878                           	opt stack 24
  7879                           
  7880                           ;tmr0.c: 178: TMR0_InterruptHandler = InterruptHandler;
  7881                           
  7882                           ;incstack = 0
  7883  00379C  C018  F0FD         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  7884  0037A0  C019  F0FE         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  7885  0037A4  0012               	return		;funcret
  7886  0037A6                     __end_of_TMR0_SetInterruptHandler:
  7887                           	opt stack 0
  7888                           tosu	equ	0xFFF
  7889                           tosh	equ	0xFFE
  7890                           tosl	equ	0xFFD
  7891                           pclath	equ	0xFFA
  7892                           tblptru	equ	0xFF8
  7893                           tblptrh	equ	0xFF7
  7894                           tblptrl	equ	0xFF6
  7895                           tablat	equ	0xFF5
  7896                           prodh	equ	0xFF4
  7897                           prodl	equ	0xFF3
  7898                           intcon	equ	0xFF2
  7899                           postinc0	equ	0xFEE
  7900                           wreg	equ	0xFE8
  7901                           indf1	equ	0xFE7
  7902                           postdec1	equ	0xFE5
  7903                           fsr1h	equ	0xFE2
  7904                           fsr1l	equ	0xFE1
  7905                           indf2	equ	0xFDF
  7906                           postinc2	equ	0xFDE
  7907                           postdec2	equ	0xFDD
  7908                           fsr2h	equ	0xFDA
  7909                           fsr2l	equ	0xFD9
  7910                           status	equ	0xFD8
  7911                           
  7912 ;; *************** function _PIN_MANAGER_Initialize *****************
  7913 ;; Defined at:
  7914 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  7915 ;; Parameters:    Size  Location     Type
  7916 ;;		None
  7917 ;; Auto vars:     Size  Location     Type
  7918 ;;		None
  7919 ;; Return value:  Size  Location     Type
  7920 ;;                  1    wreg      void 
  7921 ;; Registers used:
  7922 ;;		wreg, status,2
  7923 ;; Tracked objects:
  7924 ;;		On entry : 0/0
  7925 ;;		On exit  : 0/0
  7926 ;;		Unchanged: 0/0
  7927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7928 ;;      Params:         0       0       0       0       0       0       0
  7929 ;;      Locals:         0       0       0       0       0       0       0
  7930 ;;      Temps:          0       0       0       0       0       0       0
  7931 ;;      Totals:         0       0       0       0       0       0       0
  7932 ;;Total ram usage:        0 bytes
  7933 ;; Hardware stack levels used:    1
  7934 ;; Hardware stack levels required when called:    3
  7935 ;; This function calls:
  7936 ;;		Nothing
  7937 ;; This function is called by:
  7938 ;;		_SYSTEM_Initialize
  7939 ;; This function uses a non-reentrant model
  7940 ;;
  7941                           
  7942                           	psect	text48
  7943  002F26                     __ptext48:
  7944                           	opt stack 0
  7945  002F26                     _PIN_MANAGER_Initialize:
  7946                           	opt stack 25
  7947                           
  7948                           ;pin_manager.c: 57: LATE = 0x00;
  7949                           
  7950                           ;incstack = 0
  7951  002F26  0E00               	movlw	0
  7952  002F28  6E8D               	movwf	3981,c	;volatile
  7953                           
  7954                           ;pin_manager.c: 58: LATD = 0x00;
  7955  002F2A  0E00               	movlw	0
  7956  002F2C  6E8C               	movwf	3980,c	;volatile
  7957                           
  7958                           ;pin_manager.c: 59: LATA = 0x06;
  7959  002F2E  0E06               	movlw	6
  7960  002F30  6E89               	movwf	3977,c	;volatile
  7961                           
  7962                           ;pin_manager.c: 60: LATB = 0x00;
  7963  002F32  0E00               	movlw	0
  7964  002F34  6E8A               	movwf	3978,c	;volatile
  7965                           
  7966                           ;pin_manager.c: 61: LATC = 0x00;
  7967  002F36  0E00               	movlw	0
  7968  002F38  6E8B               	movwf	3979,c	;volatile
  7969                           
  7970                           ;pin_manager.c: 66: TRISE = 0x07;
  7971  002F3A  0E07               	movlw	7
  7972  002F3C  6E96               	movwf	3990,c	;volatile
  7973                           
  7974                           ;pin_manager.c: 67: TRISA = 0xE1;
  7975  002F3E  0EE1               	movlw	225
  7976  002F40  6E92               	movwf	3986,c	;volatile
  7977                           
  7978                           ;pin_manager.c: 68: TRISB = 0xEF;
  7979  002F42  0EEF               	movlw	239
  7980  002F44  6E93               	movwf	3987,c	;volatile
  7981                           
  7982                           ;pin_manager.c: 69: TRISC = 0x80;
  7983  002F46  0E80               	movlw	128
  7984  002F48  6E94               	movwf	3988,c	;volatile
  7985                           
  7986                           ;pin_manager.c: 70: TRISD = 0xF2;
  7987  002F4A  0EF2               	movlw	242
  7988  002F4C  6E95               	movwf	3989,c	;volatile
  7989                           
  7990                           ;pin_manager.c: 75: ANSELC = 0x34;
  7991  002F4E  0E34               	movlw	52
  7992  002F50  010F               	movlb	15	; () banked
  7993  002F52  6F3A               	movwf	58,b	;volatile
  7994                           
  7995                           ;pin_manager.c: 76: ANSELB = 0x32;
  7996  002F54  0E32               	movlw	50
  7997  002F56  6F39               	movwf	57,b	;volatile
  7998                           
  7999                           ;pin_manager.c: 77: ANSELD = 0xE4;
  8000  002F58  0EE4               	movlw	228
  8001  002F5A  6F3B               	movwf	59,b	;volatile
  8002                           
  8003                           ;pin_manager.c: 78: ANSELE = 0x07;
  8004  002F5C  0E07               	movlw	7
  8005  002F5E  6F3C               	movwf	60,b	;volatile
  8006                           
  8007                           ;pin_manager.c: 79: ANSELA = 0x2F;
  8008  002F60  0E2F               	movlw	47
  8009  002F62  6F38               	movwf	56,b	;volatile
  8010                           
  8011                           ;pin_manager.c: 84: WPUB = 0xC3;
  8012  002F64  0EC3               	movlw	195
  8013  002F66  6E61               	movwf	3937,c	;volatile
  8014                           
  8015                           ; BSR set to: 15
  8016                           ;pin_manager.c: 85: INTCON2bits.nRBPU = 0;
  8017  002F68  9EF1               	bcf	intcon2,7,c	;volatile
  8018                           
  8019                           ; BSR set to: 15
  8020                           ;pin_manager.c: 92: INTCONbits.RBIE = 1;
  8021  002F6A  86F2               	bsf	intcon,3,c	;volatile
  8022                           
  8023                           ; BSR set to: 15
  8024  002F6C  0012               	return		;funcret
  8025  002F6E                     __end_of_PIN_MANAGER_Initialize:
  8026                           	opt stack 0
  8027                           tosu	equ	0xFFF
  8028                           tosh	equ	0xFFE
  8029                           tosl	equ	0xFFD
  8030                           pclath	equ	0xFFA
  8031                           tblptru	equ	0xFF8
  8032                           tblptrh	equ	0xFF7
  8033                           tblptrl	equ	0xFF6
  8034                           tablat	equ	0xFF5
  8035                           prodh	equ	0xFF4
  8036                           prodl	equ	0xFF3
  8037                           intcon	equ	0xFF2
  8038                           intcon2	equ	0xFF1
  8039                           postinc0	equ	0xFEE
  8040                           wreg	equ	0xFE8
  8041                           indf1	equ	0xFE7
  8042                           postdec1	equ	0xFE5
  8043                           fsr1h	equ	0xFE2
  8044                           fsr1l	equ	0xFE1
  8045                           indf2	equ	0xFDF
  8046                           postinc2	equ	0xFDE
  8047                           postdec2	equ	0xFDD
  8048                           fsr2h	equ	0xFDA
  8049                           fsr2l	equ	0xFD9
  8050                           status	equ	0xFD8
  8051                           
  8052 ;; *************** function _OSCILLATOR_Initialize *****************
  8053 ;; Defined at:
  8054 ;;		line 122 in file "mcc_generated_files/mcc.c"
  8055 ;; Parameters:    Size  Location     Type
  8056 ;;		None
  8057 ;; Auto vars:     Size  Location     Type
  8058 ;;		None
  8059 ;; Return value:  Size  Location     Type
  8060 ;;                  1    wreg      void 
  8061 ;; Registers used:
  8062 ;;		wreg, status,2
  8063 ;; Tracked objects:
  8064 ;;		On entry : 0/0
  8065 ;;		On exit  : 0/0
  8066 ;;		Unchanged: 0/0
  8067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8068 ;;      Params:         0       0       0       0       0       0       0
  8069 ;;      Locals:         0       0       0       0       0       0       0
  8070 ;;      Temps:          0       0       0       0       0       0       0
  8071 ;;      Totals:         0       0       0       0       0       0       0
  8072 ;;Total ram usage:        0 bytes
  8073 ;; Hardware stack levels used:    1
  8074 ;; Hardware stack levels required when called:    3
  8075 ;; This function calls:
  8076 ;;		Nothing
  8077 ;; This function is called by:
  8078 ;;		_SYSTEM_Initialize
  8079 ;; This function uses a non-reentrant model
  8080 ;;
  8081                           
  8082                           	psect	text49
  8083  00373A                     __ptext49:
  8084                           	opt stack 0
  8085  00373A                     _OSCILLATOR_Initialize:
  8086                           	opt stack 25
  8087                           
  8088                           ;mcc.c: 125: OSCCON = 0x60;
  8089                           
  8090                           ; BSR set to: 15
  8091                           ;incstack = 0
  8092  00373A  0E60               	movlw	96
  8093  00373C  6ED3               	movwf	4051,c	;volatile
  8094                           
  8095                           ;mcc.c: 127: OSCCON2 = 0x04;
  8096  00373E  0E04               	movlw	4
  8097  003740  6ED2               	movwf	4050,c	;volatile
  8098                           
  8099                           ;mcc.c: 129: OSCTUNE = 0x80;
  8100  003742  0E80               	movlw	128
  8101  003744  6E9B               	movwf	3995,c	;volatile
  8102  003746  0012               	return		;funcret
  8103  003748                     __end_of_OSCILLATOR_Initialize:
  8104                           	opt stack 0
  8105                           tosu	equ	0xFFF
  8106                           tosh	equ	0xFFE
  8107                           tosl	equ	0xFFD
  8108                           pclath	equ	0xFFA
  8109                           tblptru	equ	0xFF8
  8110                           tblptrh	equ	0xFF7
  8111                           tblptrl	equ	0xFF6
  8112                           tablat	equ	0xFF5
  8113                           prodh	equ	0xFF4
  8114                           prodl	equ	0xFF3
  8115                           intcon	equ	0xFF2
  8116                           intcon2	equ	0xFF1
  8117                           postinc0	equ	0xFEE
  8118                           wreg	equ	0xFE8
  8119                           indf1	equ	0xFE7
  8120                           postdec1	equ	0xFE5
  8121                           fsr1h	equ	0xFE2
  8122                           fsr1l	equ	0xFE1
  8123                           indf2	equ	0xFDF
  8124                           postinc2	equ	0xFDE
  8125                           postdec2	equ	0xFDD
  8126                           fsr2h	equ	0xFDA
  8127                           fsr2l	equ	0xFD9
  8128                           status	equ	0xFD8
  8129                           
  8130 ;; *************** function _INTERRUPT_Initialize *****************
  8131 ;; Defined at:
  8132 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  8133 ;; Parameters:    Size  Location     Type
  8134 ;;		None
  8135 ;; Auto vars:     Size  Location     Type
  8136 ;;		None
  8137 ;; Return value:  Size  Location     Type
  8138 ;;                  1    wreg      void 
  8139 ;; Registers used:
  8140 ;;		None
  8141 ;; Tracked objects:
  8142 ;;		On entry : 0/0
  8143 ;;		On exit  : 0/0
  8144 ;;		Unchanged: 0/0
  8145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8146 ;;      Params:         0       0       0       0       0       0       0
  8147 ;;      Locals:         0       0       0       0       0       0       0
  8148 ;;      Temps:          0       0       0       0       0       0       0
  8149 ;;      Totals:         0       0       0       0       0       0       0
  8150 ;;Total ram usage:        0 bytes
  8151 ;; Hardware stack levels used:    1
  8152 ;; Hardware stack levels required when called:    3
  8153 ;; This function calls:
  8154 ;;		Nothing
  8155 ;; This function is called by:
  8156 ;;		_SYSTEM_Initialize
  8157 ;; This function uses a non-reentrant model
  8158 ;;
  8159                           
  8160                           	psect	text50
  8161  0037B4                     __ptext50:
  8162                           	opt stack 0
  8163  0037B4                     _INTERRUPT_Initialize:
  8164                           	opt stack 25
  8165                           
  8166                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  8167                           
  8168                           ;incstack = 0
  8169  0037B4  9ED0               	bcf	4048,7,c	;volatile
  8170  0037B6  0012               	return		;funcret
  8171  0037B8                     __end_of_INTERRUPT_Initialize:
  8172                           	opt stack 0
  8173                           tosu	equ	0xFFF
  8174                           tosh	equ	0xFFE
  8175                           tosl	equ	0xFFD
  8176                           pclath	equ	0xFFA
  8177                           tblptru	equ	0xFF8
  8178                           tblptrh	equ	0xFF7
  8179                           tblptrl	equ	0xFF6
  8180                           tablat	equ	0xFF5
  8181                           prodh	equ	0xFF4
  8182                           prodl	equ	0xFF3
  8183                           intcon	equ	0xFF2
  8184                           intcon2	equ	0xFF1
  8185                           postinc0	equ	0xFEE
  8186                           wreg	equ	0xFE8
  8187                           indf1	equ	0xFE7
  8188                           postdec1	equ	0xFE5
  8189                           fsr1h	equ	0xFE2
  8190                           fsr1l	equ	0xFE1
  8191                           indf2	equ	0xFDF
  8192                           postinc2	equ	0xFDE
  8193                           postdec2	equ	0xFDD
  8194                           fsr2h	equ	0xFDA
  8195                           fsr2l	equ	0xFD9
  8196                           status	equ	0xFD8
  8197                           
  8198 ;; *************** function _EUSART1_Initialize *****************
  8199 ;; Defined at:
  8200 ;;		line 74 in file "mcc_generated_files/eusart1.c"
  8201 ;; Parameters:    Size  Location     Type
  8202 ;;		None
  8203 ;; Auto vars:     Size  Location     Type
  8204 ;;		None
  8205 ;; Return value:  Size  Location     Type
  8206 ;;                  1    wreg      void 
  8207 ;; Registers used:
  8208 ;;		wreg, status,2
  8209 ;; Tracked objects:
  8210 ;;		On entry : 0/0
  8211 ;;		On exit  : 0/0
  8212 ;;		Unchanged: 0/0
  8213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8214 ;;      Params:         0       0       0       0       0       0       0
  8215 ;;      Locals:         0       0       0       0       0       0       0
  8216 ;;      Temps:          0       0       0       0       0       0       0
  8217 ;;      Totals:         0       0       0       0       0       0       0
  8218 ;;Total ram usage:        0 bytes
  8219 ;; Hardware stack levels used:    1
  8220 ;; Hardware stack levels required when called:    3
  8221 ;; This function calls:
  8222 ;;		Nothing
  8223 ;; This function is called by:
  8224 ;;		_SYSTEM_Initialize
  8225 ;; This function uses a non-reentrant model
  8226 ;;
  8227                           
  8228                           	psect	text51
  8229  003304                     __ptext51:
  8230                           	opt stack 0
  8231  003304                     _EUSART1_Initialize:
  8232                           	opt stack 25
  8233                           
  8234                           ;eusart1.c: 77: PIE1bits.RC1IE = 0;
  8235                           
  8236                           ;incstack = 0
  8237  003304  9A9D               	bcf	3997,5,c	;volatile
  8238                           
  8239                           ;eusart1.c: 78: PIE1bits.TX1IE = 0;
  8240  003306  989D               	bcf	3997,4,c	;volatile
  8241                           
  8242                           ;eusart1.c: 82: BAUDCON1 = 0x08;
  8243  003308  0E08               	movlw	8
  8244  00330A  6EB8               	movwf	4024,c	;volatile
  8245                           
  8246                           ;eusart1.c: 85: RCSTA1 = 0x90;
  8247  00330C  0E90               	movlw	144
  8248  00330E  6EAB               	movwf	4011,c	;volatile
  8249                           
  8250                           ;eusart1.c: 88: TXSTA1 = 0x24;
  8251  003310  0E24               	movlw	36
  8252  003312  6EAC               	movwf	4012,c	;volatile
  8253                           
  8254                           ;eusart1.c: 91: SPBRG1 = 0x10;
  8255  003314  0E10               	movlw	16
  8256  003316  6EAF               	movwf	4015,c	;volatile
  8257                           
  8258                           ;eusart1.c: 94: SPBRGH1 = 0x00;
  8259  003318  0E00               	movlw	0
  8260  00331A  6EB0               	movwf	4016,c	;volatile
  8261                           
  8262                           ;eusart1.c: 98: eusart1TxHead = 0;
  8263  00331C  0E00               	movlw	0
  8264  00331E  6E3A               	movwf	_eusart1TxHead,c	;volatile
  8265                           
  8266                           ;eusart1.c: 99: eusart1TxTail = 0;
  8267  003320  0E00               	movlw	0
  8268  003322  6E39               	movwf	_eusart1TxTail,c	;volatile
  8269                           
  8270                           ;eusart1.c: 100: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  8271  003324  0E46               	movlw	70
  8272  003326  0100               	movlb	0	; () banked
  8273  003328  6FFF               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
  8274                           
  8275                           ;eusart1.c: 102: eusart1RxHead = 0;
  8276  00332A  0E00               	movlw	0
  8277  00332C  6E38               	movwf	_eusart1RxHead,c	;volatile
  8278                           
  8279                           ;eusart1.c: 103: eusart1RxTail = 0;
  8280  00332E  0E00               	movlw	0
  8281  003330  6E37               	movwf	_eusart1RxTail,c	;volatile
  8282                           
  8283                           ;eusart1.c: 104: eusart1RxCount = 0;
  8284  003332  0E00               	movlw	0
  8285  003334  6FD3               	movwf	_eusart1RxCount& (0+255),b	;volatile
  8286                           
  8287                           ; BSR set to: 0
  8288                           ;eusart1.c: 107: PIE1bits.RC1IE = 1;
  8289  003336  8A9D               	bsf	3997,5,c	;volatile
  8290                           
  8291                           ; BSR set to: 0
  8292  003338  0012               	return		;funcret
  8293  00333A                     __end_of_EUSART1_Initialize:
  8294                           	opt stack 0
  8295                           tosu	equ	0xFFF
  8296                           tosh	equ	0xFFE
  8297                           tosl	equ	0xFFD
  8298                           pclath	equ	0xFFA
  8299                           tblptru	equ	0xFF8
  8300                           tblptrh	equ	0xFF7
  8301                           tblptrl	equ	0xFF6
  8302                           tablat	equ	0xFF5
  8303                           prodh	equ	0xFF4
  8304                           prodl	equ	0xFF3
  8305                           intcon	equ	0xFF2
  8306                           intcon2	equ	0xFF1
  8307                           postinc0	equ	0xFEE
  8308                           wreg	equ	0xFE8
  8309                           indf1	equ	0xFE7
  8310                           postdec1	equ	0xFE5
  8311                           fsr1h	equ	0xFE2
  8312                           fsr1l	equ	0xFE1
  8313                           indf2	equ	0xFDF
  8314                           postinc2	equ	0xFDE
  8315                           postdec2	equ	0xFDD
  8316                           fsr2h	equ	0xFDA
  8317                           fsr2l	equ	0xFD9
  8318                           status	equ	0xFD8
  8319                           
  8320 ;; *************** function _ADC_Initialize *****************
  8321 ;; Defined at:
  8322 ;;		line 58 in file "mcc_generated_files/adc.c"
  8323 ;; Parameters:    Size  Location     Type
  8324 ;;		None
  8325 ;; Auto vars:     Size  Location     Type
  8326 ;;		None
  8327 ;; Return value:  Size  Location     Type
  8328 ;;                  1    wreg      void 
  8329 ;; Registers used:
  8330 ;;		wreg, status,2
  8331 ;; Tracked objects:
  8332 ;;		On entry : 0/0
  8333 ;;		On exit  : 0/0
  8334 ;;		Unchanged: 0/0
  8335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8336 ;;      Params:         0       0       0       0       0       0       0
  8337 ;;      Locals:         0       0       0       0       0       0       0
  8338 ;;      Temps:          0       0       0       0       0       0       0
  8339 ;;      Totals:         0       0       0       0       0       0       0
  8340 ;;Total ram usage:        0 bytes
  8341 ;; Hardware stack levels used:    1
  8342 ;; Hardware stack levels required when called:    3
  8343 ;; This function calls:
  8344 ;;		Nothing
  8345 ;; This function is called by:
  8346 ;;		_SYSTEM_Initialize
  8347 ;; This function uses a non-reentrant model
  8348 ;;
  8349                           
  8350                           	psect	text52
  8351  003684                     __ptext52:
  8352                           	opt stack 0
  8353  003684                     _ADC_Initialize:
  8354                           	opt stack 25
  8355                           
  8356                           ;adc.c: 63: ADCON0 = 0x05;
  8357                           
  8358                           ; BSR set to: 0
  8359                           ;incstack = 0
  8360  003684  0E05               	movlw	5
  8361  003686  6EC2               	movwf	4034,c	;volatile
  8362                           
  8363                           ;adc.c: 66: ADCON1 = 0x00;
  8364  003688  0E00               	movlw	0
  8365  00368A  6EC1               	movwf	4033,c	;volatile
  8366                           
  8367                           ;adc.c: 69: ADCON2 = 0x87;
  8368  00368C  0E87               	movlw	135
  8369  00368E  6EC0               	movwf	4032,c	;volatile
  8370                           
  8371                           ;adc.c: 72: ADRESL = 0x00;
  8372  003690  0E00               	movlw	0
  8373  003692  6EC3               	movwf	4035,c	;volatile
  8374                           
  8375                           ;adc.c: 75: ADRESH = 0x00;
  8376  003694  0E00               	movlw	0
  8377  003696  6EC4               	movwf	4036,c	;volatile
  8378  003698  0012               	return		;funcret
  8379  00369A                     __end_of_ADC_Initialize:
  8380                           	opt stack 0
  8381                           tosu	equ	0xFFF
  8382                           tosh	equ	0xFFE
  8383                           tosl	equ	0xFFD
  8384                           pclath	equ	0xFFA
  8385                           tblptru	equ	0xFF8
  8386                           tblptrh	equ	0xFF7
  8387                           tblptrl	equ	0xFF6
  8388                           tablat	equ	0xFF5
  8389                           prodh	equ	0xFF4
  8390                           prodl	equ	0xFF3
  8391                           intcon	equ	0xFF2
  8392                           intcon2	equ	0xFF1
  8393                           postinc0	equ	0xFEE
  8394                           wreg	equ	0xFE8
  8395                           indf1	equ	0xFE7
  8396                           postdec1	equ	0xFE5
  8397                           fsr1h	equ	0xFE2
  8398                           fsr1l	equ	0xFE1
  8399                           indf2	equ	0xFDF
  8400                           postinc2	equ	0xFDE
  8401                           postdec2	equ	0xFDD
  8402                           fsr2h	equ	0xFDA
  8403                           fsr2l	equ	0xFD9
  8404                           status	equ	0xFD8
  8405                           
  8406 ;; *************** function _SetMcuRunTime *****************
  8407 ;; Defined at:
  8408 ;;		line 81 in file "SystemStatus.c"
  8409 ;; Parameters:    Size  Location     Type
  8410 ;;		None
  8411 ;; Auto vars:     Size  Location     Type
  8412 ;;		None
  8413 ;; Return value:  Size  Location     Type
  8414 ;;                  1    wreg      void 
  8415 ;; Registers used:
  8416 ;;		wreg, status,2, status,0, cstack
  8417 ;; Tracked objects:
  8418 ;;		On entry : 0/0
  8419 ;;		On exit  : 0/0
  8420 ;;		Unchanged: 0/0
  8421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8422 ;;      Params:         0       0       0       0       0       0       0
  8423 ;;      Locals:         0       0       0       0       0       0       0
  8424 ;;      Temps:          0       0       0       0       0       0       0
  8425 ;;      Totals:         0       0       0       0       0       0       0
  8426 ;;Total ram usage:        0 bytes
  8427 ;; Hardware stack levels used:    1
  8428 ;; Hardware stack levels required when called:    4
  8429 ;; This function calls:
  8430 ;;		___llmod
  8431 ;; This function is called by:
  8432 ;;		_main
  8433 ;; This function uses a non-reentrant model
  8434 ;;
  8435                           
  8436                           	psect	text53
  8437  002FF6                     __ptext53:
  8438                           	opt stack 0
  8439  002FF6                     _SetMcuRunTime:
  8440                           	opt stack 26
  8441                           
  8442                           ;SystemStatus.c: 83: mcuRunTimeIn5SecTicks++;
  8443                           
  8444                           ;incstack = 0
  8445  002FF6  0E01               	movlw	1
  8446  002FF8  0100               	movlb	0	; () banked
  8447  002FFA  27C1               	addwf	_mcuRunTimeIn5SecTicks& (0+255),f,b
  8448  002FFC  0E00               	movlw	0
  8449  002FFE  23C2               	addwfc	(_mcuRunTimeIn5SecTicks+1)& (0+255),f,b
  8450  003000  23C3               	addwfc	(_mcuRunTimeIn5SecTicks+2)& (0+255),f,b
  8451  003002  23C4               	addwfc	(_mcuRunTimeIn5SecTicks+3)& (0+255),f,b
  8452                           
  8453                           ; BSR set to: 0
  8454                           ;SystemStatus.c: 84: mcuRunTimeIn5SecTicks %= (17280);
  8455  003004  C0C1  F018         	movff	_mcuRunTimeIn5SecTicks,___llmod@dividend
  8456  003008  C0C2  F019         	movff	_mcuRunTimeIn5SecTicks+1,___llmod@dividend+1
  8457  00300C  C0C3  F01A         	movff	_mcuRunTimeIn5SecTicks+2,___llmod@dividend+2
  8458  003010  C0C4  F01B         	movff	_mcuRunTimeIn5SecTicks+3,___llmod@dividend+3
  8459  003014  0E80               	movlw	128
  8460  003016  6E1C               	movwf	___llmod@divisor,c
  8461  003018  0E43               	movlw	67
  8462  00301A  6E1D               	movwf	___llmod@divisor+1,c
  8463  00301C  0E00               	movlw	0
  8464  00301E  6E1E               	movwf	___llmod@divisor+2,c
  8465  003020  0E00               	movlw	0
  8466  003022  6E1F               	movwf	___llmod@divisor+3,c
  8467  003024  ECFC  F013         	call	___llmod	;wreg free
  8468  003028  C018  F0C1         	movff	?___llmod,_mcuRunTimeIn5SecTicks
  8469  00302C  C019  F0C2         	movff	?___llmod+1,_mcuRunTimeIn5SecTicks+1
  8470  003030  C01A  F0C3         	movff	?___llmod+2,_mcuRunTimeIn5SecTicks+2
  8471  003034  C01B  F0C4         	movff	?___llmod+3,_mcuRunTimeIn5SecTicks+3
  8472  003038  0012               	return		;funcret
  8473  00303A                     __end_of_SetMcuRunTime:
  8474                           	opt stack 0
  8475                           tosu	equ	0xFFF
  8476                           tosh	equ	0xFFE
  8477                           tosl	equ	0xFFD
  8478                           pclath	equ	0xFFA
  8479                           tblptru	equ	0xFF8
  8480                           tblptrh	equ	0xFF7
  8481                           tblptrl	equ	0xFF6
  8482                           tablat	equ	0xFF5
  8483                           prodh	equ	0xFF4
  8484                           prodl	equ	0xFF3
  8485                           intcon	equ	0xFF2
  8486                           intcon2	equ	0xFF1
  8487                           postinc0	equ	0xFEE
  8488                           wreg	equ	0xFE8
  8489                           indf1	equ	0xFE7
  8490                           postdec1	equ	0xFE5
  8491                           fsr1h	equ	0xFE2
  8492                           fsr1l	equ	0xFE1
  8493                           indf2	equ	0xFDF
  8494                           postinc2	equ	0xFDE
  8495                           postdec2	equ	0xFDD
  8496                           fsr2h	equ	0xFDA
  8497                           fsr2l	equ	0xFD9
  8498                           status	equ	0xFD8
  8499                           
  8500 ;; *************** function ___llmod *****************
  8501 ;; Defined at:
  8502 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  8503 ;; Parameters:    Size  Location     Type
  8504 ;;  dividend        4   23[COMRAM] unsigned long 
  8505 ;;  divisor         4   27[COMRAM] unsigned long 
  8506 ;; Auto vars:     Size  Location     Type
  8507 ;;  counter         1   31[COMRAM] unsigned char 
  8508 ;; Return value:  Size  Location     Type
  8509 ;;                  4   23[COMRAM] unsigned long 
  8510 ;; Registers used:
  8511 ;;		wreg, status,2, status,0
  8512 ;; Tracked objects:
  8513 ;;		On entry : 0/0
  8514 ;;		On exit  : 0/0
  8515 ;;		Unchanged: 0/0
  8516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8517 ;;      Params:         8       0       0       0       0       0       0
  8518 ;;      Locals:         1       0       0       0       0       0       0
  8519 ;;      Temps:          0       0       0       0       0       0       0
  8520 ;;      Totals:         9       0       0       0       0       0       0
  8521 ;;Total ram usage:        9 bytes
  8522 ;; Hardware stack levels used:    1
  8523 ;; Hardware stack levels required when called:    3
  8524 ;; This function calls:
  8525 ;;		Nothing
  8526 ;; This function is called by:
  8527 ;;		_SetMcuRunTime
  8528 ;;		_GetMcuRunTime
  8529 ;; This function uses a non-reentrant model
  8530 ;;
  8531                           
  8532                           	psect	text54
  8533  0027F8                     __ptext54:
  8534                           	opt stack 0
  8535  0027F8                     ___llmod:
  8536                           	opt stack 24
  8537                           
  8538                           ;incstack = 0
  8539  0027F8  501C               	movf	___llmod@divisor,w,c
  8540  0027FA  101D               	iorwf	___llmod@divisor+1,w,c
  8541  0027FC  101E               	iorwf	___llmod@divisor+2,w,c
  8542  0027FE  101F               	iorwf	___llmod@divisor+3,w,c
  8543  002800  B4D8               	btfsc	status,2,c
  8544  002802  D024               	goto	l1740
  8545  002804  0E01               	movlw	1
  8546  002806  6E20               	movwf	___llmod@counter,c
  8547  002808  D006               	goto	l1735
  8548  00280A  90D8               	bcf	status,0,c
  8549  00280C  361C               	rlcf	___llmod@divisor,f,c
  8550  00280E  361D               	rlcf	___llmod@divisor+1,f,c
  8551  002810  361E               	rlcf	___llmod@divisor+2,f,c
  8552  002812  361F               	rlcf	___llmod@divisor+3,f,c
  8553  002814  2A20               	incf	___llmod@counter,f,c
  8554  002816                     l1735:
  8555  002816  AE1F               	btfss	___llmod@divisor+3,7,c
  8556  002818  D7F8               	goto	l1736
  8557  00281A                     u6990:
  8558  00281A  501C               	movf	___llmod@divisor,w,c
  8559  00281C  5C18               	subwf	___llmod@dividend,w,c
  8560  00281E  501D               	movf	___llmod@divisor+1,w,c
  8561  002820  5819               	subwfb	___llmod@dividend+1,w,c
  8562  002822  501E               	movf	___llmod@divisor+2,w,c
  8563  002824  581A               	subwfb	___llmod@dividend+2,w,c
  8564  002826  501F               	movf	___llmod@divisor+3,w,c
  8565  002828  581B               	subwfb	___llmod@dividend+3,w,c
  8566  00282A  A0D8               	btfss	status,0,c
  8567  00282C  D008               	goto	l1739
  8568  00282E  501C               	movf	___llmod@divisor,w,c
  8569  002830  5E18               	subwf	___llmod@dividend,f,c
  8570  002832  501D               	movf	___llmod@divisor+1,w,c
  8571  002834  5A19               	subwfb	___llmod@dividend+1,f,c
  8572  002836  501E               	movf	___llmod@divisor+2,w,c
  8573  002838  5A1A               	subwfb	___llmod@dividend+2,f,c
  8574  00283A  501F               	movf	___llmod@divisor+3,w,c
  8575  00283C  5A1B               	subwfb	___llmod@dividend+3,f,c
  8576  00283E                     l1739:
  8577  00283E  90D8               	bcf	status,0,c
  8578  002840  321F               	rrcf	___llmod@divisor+3,f,c
  8579  002842  321E               	rrcf	___llmod@divisor+2,f,c
  8580  002844  321D               	rrcf	___llmod@divisor+1,f,c
  8581  002846  321C               	rrcf	___llmod@divisor,f,c
  8582  002848  2E20               	decfsz	___llmod@counter,f,c
  8583  00284A  D7E7               	goto	u6990
  8584  00284C                     l1740:
  8585  00284C  C018  F018         	movff	___llmod@dividend,?___llmod
  8586  002850  C019  F019         	movff	___llmod@dividend+1,?___llmod+1
  8587  002854  C01A  F01A         	movff	___llmod@dividend+2,?___llmod+2
  8588  002858  C01B  F01B         	movff	___llmod@dividend+3,?___llmod+3
  8589  00285C  0012               	return		;funcret
  8590  00285E                     __end_of___llmod:
  8591                           	opt stack 0
  8592                           tosu	equ	0xFFF
  8593                           tosh	equ	0xFFE
  8594                           tosl	equ	0xFFD
  8595                           pclath	equ	0xFFA
  8596                           tblptru	equ	0xFF8
  8597                           tblptrh	equ	0xFF7
  8598                           tblptrl	equ	0xFF6
  8599                           tablat	equ	0xFF5
  8600                           prodh	equ	0xFF4
  8601                           prodl	equ	0xFF3
  8602                           intcon	equ	0xFF2
  8603                           intcon2	equ	0xFF1
  8604                           postinc0	equ	0xFEE
  8605                           wreg	equ	0xFE8
  8606                           indf1	equ	0xFE7
  8607                           postdec1	equ	0xFE5
  8608                           fsr1h	equ	0xFE2
  8609                           fsr1l	equ	0xFE1
  8610                           indf2	equ	0xFDF
  8611                           postinc2	equ	0xFDE
  8612                           postdec2	equ	0xFDD
  8613                           fsr2h	equ	0xFDA
  8614                           fsr2l	equ	0xFD9
  8615                           status	equ	0xFD8
  8616                           
  8617 ;; *************** function _SendSystemStartAck *****************
  8618 ;; Defined at:
  8619 ;;		line 132 in file "SystemCommon.c"
  8620 ;; Parameters:    Size  Location     Type
  8621 ;;		None
  8622 ;; Auto vars:     Size  Location     Type
  8623 ;;		None
  8624 ;; Return value:  Size  Location     Type
  8625 ;;                  1    wreg      void 
  8626 ;; Registers used:
  8627 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8628 ;; Tracked objects:
  8629 ;;		On entry : 0/0
  8630 ;;		On exit  : 0/0
  8631 ;;		Unchanged: 0/0
  8632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8633 ;;      Params:         0       0       0       0       0       0       0
  8634 ;;      Locals:         0       0       0       0       0       0       0
  8635 ;;      Temps:          0       0       0       0       0       0       0
  8636 ;;      Totals:         0       0       0       0       0       0       0
  8637 ;;Total ram usage:        0 bytes
  8638 ;; Hardware stack levels used:    1
  8639 ;; Hardware stack levels required when called:    6
  8640 ;; This function calls:
  8641 ;;		_SendAckMessage
  8642 ;; This function is called by:
  8643 ;;		_main
  8644 ;; This function uses a non-reentrant model
  8645 ;;
  8646                           
  8647                           	psect	text55
  8648  003786                     __ptext55:
  8649                           	opt stack 0
  8650  003786                     _SendSystemStartAck:
  8651                           	opt stack 24
  8652                           
  8653                           ;SystemCommon.c: 134: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_SYSTE
      +                          M_START);
  8654                           
  8655                           ;incstack = 0
  8656  003786  0E10               	movlw	16
  8657  003788  6E24               	movwf	SendAckMessage@inRequest,c
  8658  00378A  0E01               	movlw	1
  8659  00378C  ECF7  F016         	call	_SendAckMessage
  8660  003790  0012               	return		;funcret
  8661  003792                     __end_of_SendSystemStartAck:
  8662                           	opt stack 0
  8663                           tosu	equ	0xFFF
  8664                           tosh	equ	0xFFE
  8665                           tosl	equ	0xFFD
  8666                           pclath	equ	0xFFA
  8667                           tblptru	equ	0xFF8
  8668                           tblptrh	equ	0xFF7
  8669                           tblptrl	equ	0xFF6
  8670                           tablat	equ	0xFF5
  8671                           prodh	equ	0xFF4
  8672                           prodl	equ	0xFF3
  8673                           intcon	equ	0xFF2
  8674                           intcon2	equ	0xFF1
  8675                           postinc0	equ	0xFEE
  8676                           wreg	equ	0xFE8
  8677                           indf1	equ	0xFE7
  8678                           postdec1	equ	0xFE5
  8679                           fsr1h	equ	0xFE2
  8680                           fsr1l	equ	0xFE1
  8681                           indf2	equ	0xFDF
  8682                           postinc2	equ	0xFDE
  8683                           postdec2	equ	0xFDD
  8684                           fsr2h	equ	0xFDA
  8685                           fsr2l	equ	0xFD9
  8686                           status	equ	0xFD8
  8687                           
  8688 ;; *************** function _SendAckMessage *****************
  8689 ;; Defined at:
  8690 ;;		line 171 in file "EusartApp.c"
  8691 ;; Parameters:    Size  Location     Type
  8692 ;;  inGroup         1    wreg     enum E7163
  8693 ;;  inRequest       1   35[COMRAM] enum E7171
  8694 ;; Auto vars:     Size  Location     Type
  8695 ;;  inGroup         1   36[COMRAM] enum E7163
  8696 ;;  TxMsg           6   37[COMRAM] unsigned char [6]
  8697 ;; Return value:  Size  Location     Type
  8698 ;;                  1    wreg      void 
  8699 ;; Registers used:
  8700 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8701 ;; Tracked objects:
  8702 ;;		On entry : 0/0
  8703 ;;		On exit  : 0/0
  8704 ;;		Unchanged: 0/0
  8705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8706 ;;      Params:         1       0       0       0       0       0       0
  8707 ;;      Locals:         7       0       0       0       0       0       0
  8708 ;;      Temps:          0       0       0       0       0       0       0
  8709 ;;      Totals:         8       0       0       0       0       0       0
  8710 ;;Total ram usage:        8 bytes
  8711 ;; Hardware stack levels used:    1
  8712 ;; Hardware stack levels required when called:    5
  8713 ;; This function calls:
  8714 ;;		_WriteUartMessage
  8715 ;;		_ZeroArray
  8716 ;;		_crc8
  8717 ;; This function is called by:
  8718 ;;		_testLeds
  8719 ;;		_SetAdcOperationMode
  8720 ;;		_SetConversionResultFormat
  8721 ;;		_SetChannelMode
  8722 ;;		_FlashReadUart
  8723 ;;		_FlashEreaseMem
  8724 ;;		_DacSetValue
  8725 ;;		_UpdateTxFreq
  8726 ;;		_UpdateRxFreq
  8727 ;;		_ResetMcu
  8728 ;;		_ResetCpld
  8729 ;;		_SendSystemStartAck
  8730 ;;		_SetMcuFwVersion
  8731 ;;		_SetCpldFwVersion
  8732 ;;		_keepAliveSignalUart
  8733 ;; This function uses a non-reentrant model
  8734 ;;
  8735                           
  8736                           	psect	text56
  8737  002DEE                     __ptext56:
  8738                           	opt stack 0
  8739  002DEE                     _SendAckMessage:
  8740                           	opt stack 22
  8741                           
  8742                           ;incstack = 0
  8743                           ;SendAckMessage@inGroup stored from wreg
  8744  002DEE  6E25               	movwf	SendAckMessage@inGroup,c
  8745                           
  8746                           ;EusartApp.c: 174: char TxMsg[(0x5) + 1];
  8747                           ;EusartApp.c: 175: ZeroArray(TxMsg, (0x5) + 1);
  8748  002DF0  0E26               	movlw	low SendAckMessage@TxMsg
  8749  002DF2  6E20               	movwf	ZeroArray@array,c
  8750  002DF4  0E00               	movlw	high SendAckMessage@TxMsg
  8751  002DF6  6E21               	movwf	ZeroArray@array+1,c
  8752  002DF8  0E00               	movlw	0
  8753  002DFA  6E23               	movwf	ZeroArray@size+1,c
  8754  002DFC  0E06               	movlw	6
  8755  002DFE  6E22               	movwf	ZeroArray@size,c
  8756  002E00  ECFD  F01A         	call	_ZeroArray	;wreg free
  8757                           
  8758                           ;EusartApp.c: 178: TxMsg[(0)] = (0x24);
  8759  002E04  0E24               	movlw	36
  8760  002E06  6E26               	movwf	SendAckMessage@TxMsg,c
  8761                           
  8762                           ;EusartApp.c: 179: TxMsg[(1)] = inGroup;
  8763  002E08  C025  F027         	movff	SendAckMessage@inGroup,SendAckMessage@TxMsg+1
  8764                           
  8765                           ;EusartApp.c: 180: TxMsg[(2)] = inRequest;
  8766  002E0C  C024  F028         	movff	SendAckMessage@inRequest,SendAckMessage@TxMsg+2
  8767                           
  8768                           ;EusartApp.c: 181: TxMsg[(3)] = 0;
  8769  002E10  0E00               	movlw	0
  8770  002E12  6E29               	movwf	SendAckMessage@TxMsg+3,c
  8771                           
  8772                           ;EusartApp.c: 183: TxMsg[(0x5)] = crc8(TxMsg, (0x5));
  8773  002E14  0E26               	movlw	low SendAckMessage@TxMsg
  8774  002E16  6E18               	movwf	crc8@dataArray,c
  8775  002E18  0E00               	movlw	high SendAckMessage@TxMsg
  8776  002E1A  6E19               	movwf	crc8@dataArray+1,c
  8777  002E1C  0E00               	movlw	0
  8778  002E1E  6E1B               	movwf	crc8@dataSize+1,c
  8779  002E20  0E05               	movlw	5
  8780  002E22  6E1A               	movwf	crc8@dataSize,c
  8781  002E24  EC48  F017         	call	_crc8	;wreg free
  8782  002E28  6E2B               	movwf	SendAckMessage@TxMsg+5,c
  8783                           
  8784                           ;EusartApp.c: 185: WriteUartMessage(TxMsg, (0x5) + 1);
  8785  002E2A  0E26               	movlw	low SendAckMessage@TxMsg
  8786  002E2C  6E19               	movwf	WriteUartMessage@dataBuf,c
  8787  002E2E  0E00               	movlw	high SendAckMessage@TxMsg
  8788  002E30  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  8789  002E32  0E00               	movlw	0
  8790  002E34  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  8791  002E36  0E06               	movlw	6
  8792  002E38  6E1B               	movwf	WriteUartMessage@dataSize,c
  8793  002E3A  EC9D  F019         	call	_WriteUartMessage	;wreg free
  8794  002E3E  0012               	return		;funcret
  8795  002E40                     __end_of_SendAckMessage:
  8796                           	opt stack 0
  8797                           tosu	equ	0xFFF
  8798                           tosh	equ	0xFFE
  8799                           tosl	equ	0xFFD
  8800                           pclath	equ	0xFFA
  8801                           tblptru	equ	0xFF8
  8802                           tblptrh	equ	0xFF7
  8803                           tblptrl	equ	0xFF6
  8804                           tablat	equ	0xFF5
  8805                           prodh	equ	0xFF4
  8806                           prodl	equ	0xFF3
  8807                           intcon	equ	0xFF2
  8808                           intcon2	equ	0xFF1
  8809                           postinc0	equ	0xFEE
  8810                           wreg	equ	0xFE8
  8811                           indf1	equ	0xFE7
  8812                           postdec1	equ	0xFE5
  8813                           fsr1h	equ	0xFE2
  8814                           fsr1l	equ	0xFE1
  8815                           indf2	equ	0xFDF
  8816                           postinc2	equ	0xFDE
  8817                           postdec2	equ	0xFDD
  8818                           fsr2h	equ	0xFDA
  8819                           fsr2l	equ	0xFD9
  8820                           status	equ	0xFD8
  8821                           
  8822 ;; *************** function _crc8 *****************
  8823 ;; Defined at:
  8824 ;;		line 13 in file "SystemCommon.c"
  8825 ;; Parameters:    Size  Location     Type
  8826 ;;  dataArray       2   23[COMRAM] PTR unsigned char 
  8827 ;;		 -> GetMcuRunTime@TxMsg(9), GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), FlashReadCondition@TxMsg(9), 
  8828 ;;		 -> FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), rxMsgQueue(20), 
  8829 ;;  dataSize        2   25[COMRAM] int 
  8830 ;; Auto vars:     Size  Location     Type
  8831 ;;  i               2   30[COMRAM] int 
  8832 ;;  crc             2   28[COMRAM] int 
  8833 ;; Return value:  Size  Location     Type
  8834 ;;                  1    wreg      unsigned char 
  8835 ;; Registers used:
  8836 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8837 ;; Tracked objects:
  8838 ;;		On entry : 0/0
  8839 ;;		On exit  : 0/0
  8840 ;;		Unchanged: 0/0
  8841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8842 ;;      Params:         4       0       0       0       0       0       0
  8843 ;;      Locals:         4       0       0       0       0       0       0
  8844 ;;      Temps:          1       0       0       0       0       0       0
  8845 ;;      Totals:         9       0       0       0       0       0       0
  8846 ;;Total ram usage:        9 bytes
  8847 ;; Hardware stack levels used:    1
  8848 ;; Hardware stack levels required when called:    3
  8849 ;; This function calls:
  8850 ;;		Nothing
  8851 ;; This function is called by:
  8852 ;;		_readUartMessage
  8853 ;;		_SendAckMessage
  8854 ;;		_FlashReadUart
  8855 ;;		_FlashReadCondition
  8856 ;;		_GetMcuFwVersion
  8857 ;;		_GetCpldFwVersion
  8858 ;;		_GetMcuRunTime
  8859 ;; This function uses a non-reentrant model
  8860 ;;
  8861                           
  8862                           	psect	text57
  8863  002E90                     __ptext57:
  8864                           	opt stack 0
  8865  002E90                     _crc8:
  8866                           	opt stack 26
  8867                           
  8868                           ;SystemCommon.c: 15: int crc = 0;
  8869                           
  8870                           ;incstack = 0
  8871  002E90  0E00               	movlw	0
  8872  002E92  6E1E               	movwf	crc8@crc+1,c
  8873  002E94  0E00               	movlw	0
  8874  002E96  6E1D               	movwf	crc8@crc,c
  8875                           
  8876                           ;SystemCommon.c: 16: for (int i = 0; i < dataSize; i++)
  8877  002E98  0E00               	movlw	0
  8878  002E9A  6E20               	movwf	crc8@i+1,c
  8879  002E9C  0E00               	movlw	0
  8880  002E9E  6E1F               	movwf	crc8@i,c
  8881  002EA0  D00E               	goto	l1186
  8882  002EA2                     
  8883                           ;SystemCommon.c: 17: {
  8884                           ;SystemCommon.c: 18: crc += dataArray[i];
  8885  002EA2  501F               	movf	crc8@i,w,c
  8886  002EA4  2418               	addwf	crc8@dataArray,w,c
  8887  002EA6  6ED9               	movwf	fsr2l,c
  8888  002EA8  5020               	movf	crc8@i+1,w,c
  8889  002EAA  2019               	addwfc	crc8@dataArray+1,w,c
  8890  002EAC  6EDA               	movwf	fsr2h,c
  8891  002EAE  50DF               	movf	indf2,w,c
  8892  002EB0  6E1C               	movwf	??_crc8& (0+255),c
  8893  002EB2  501C               	movf	??_crc8,w,c
  8894  002EB4  261D               	addwf	crc8@crc,f,c
  8895  002EB6  0E00               	movlw	0
  8896  002EB8  221E               	addwfc	crc8@crc+1,f,c
  8897  002EBA  4A1F               	infsnz	crc8@i,f,c
  8898  002EBC  2A20               	incf	crc8@i+1,f,c
  8899  002EBE                     l1186:
  8900  002EBE  501A               	movf	crc8@dataSize,w,c
  8901  002EC0  5C1F               	subwf	crc8@i,w,c
  8902  002EC2  5020               	movf	crc8@i+1,w,c
  8903  002EC4  0A80               	xorlw	128
  8904  002EC6  6E1C               	movwf	??_crc8& (0+255),c
  8905  002EC8  501B               	movf	crc8@dataSize+1,w,c
  8906  002ECA  0A80               	xorlw	128
  8907  002ECC  581C               	subwfb	??_crc8& (0+255),w,c
  8908  002ECE  A0D8               	btfss	status,0,c
  8909  002ED0  D7E8               	goto	l1187
  8910                           
  8911                           ;SystemCommon.c: 19: }
  8912                           ;SystemCommon.c: 20: crc &= 0xff;
  8913  002ED2  0EFF               	movlw	255
  8914  002ED4  161D               	andwf	crc8@crc,f,c
  8915  002ED6  0E00               	movlw	0
  8916  002ED8  161E               	andwf	crc8@crc+1,f,c
  8917                           
  8918                           ;SystemCommon.c: 21: return crc;
  8919  002EDA  501D               	movf	crc8@crc,w,c
  8920  002EDC  0012               	return	
  8921  002EDE                     __end_of_crc8:
  8922                           	opt stack 0
  8923                           tosu	equ	0xFFF
  8924                           tosh	equ	0xFFE
  8925                           tosl	equ	0xFFD
  8926                           pclath	equ	0xFFA
  8927                           tblptru	equ	0xFF8
  8928                           tblptrh	equ	0xFF7
  8929                           tblptrl	equ	0xFF6
  8930                           tablat	equ	0xFF5
  8931                           prodh	equ	0xFF4
  8932                           prodl	equ	0xFF3
  8933                           intcon	equ	0xFF2
  8934                           intcon2	equ	0xFF1
  8935                           postinc0	equ	0xFEE
  8936                           wreg	equ	0xFE8
  8937                           indf1	equ	0xFE7
  8938                           postdec1	equ	0xFE5
  8939                           fsr1h	equ	0xFE2
  8940                           fsr1l	equ	0xFE1
  8941                           indf2	equ	0xFDF
  8942                           postinc2	equ	0xFDE
  8943                           postdec2	equ	0xFDD
  8944                           fsr2h	equ	0xFDA
  8945                           fsr2l	equ	0xFD9
  8946                           status	equ	0xFD8
  8947                           
  8948 ;; *************** function _ZeroArray *****************
  8949 ;; Defined at:
  8950 ;;		line 24 in file "SystemCommon.c"
  8951 ;; Parameters:    Size  Location     Type
  8952 ;;  array           2   31[COMRAM] PTR unsigned char 
  8953 ;;		 -> GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dataRegArr(9), FlashReadCondition@TxMsg(
      +9), 
  8954 ;;		 -> FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), 
  8955 ;;		 -> rxMsgQueue(20), 
  8956 ;;  size            2   33[COMRAM] int 
  8957 ;; Auto vars:     Size  Location     Type
  8958 ;;		None
  8959 ;; Return value:  Size  Location     Type
  8960 ;;                  1    wreg      void 
  8961 ;; Registers used:
  8962 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8963 ;; Tracked objects:
  8964 ;;		On entry : 0/0
  8965 ;;		On exit  : 0/0
  8966 ;;		Unchanged: 0/0
  8967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8968 ;;      Params:         4       0       0       0       0       0       0
  8969 ;;      Locals:         0       0       0       0       0       0       0
  8970 ;;      Temps:          0       0       0       0       0       0       0
  8971 ;;      Totals:         4       0       0       0       0       0       0
  8972 ;;Total ram usage:        4 bytes
  8973 ;; Hardware stack levels used:    1
  8974 ;; Hardware stack levels required when called:    4
  8975 ;; This function calls:
  8976 ;;		_memset
  8977 ;; This function is called by:
  8978 ;;		_readUartMessage
  8979 ;;		_InitRxMessageParams
  8980 ;;		_SendAckMessage
  8981 ;;		_FlashReadUart
  8982 ;;		_FlashEreaseMem
  8983 ;;		_FlashReadCondition
  8984 ;;		_GetIntFromUartData
  8985 ;;		_GetMcuFwVersion
  8986 ;;		_GetCpldFwVersion
  8987 ;; This function uses a non-reentrant model
  8988 ;;
  8989                           
  8990                           	psect	text58
  8991  0035FA                     __ptext58:
  8992                           	opt stack 0
  8993  0035FA                     _ZeroArray:
  8994                           	opt stack 25
  8995                           
  8996                           ;SystemCommon.c: 26: memset(array, 0x0, size);
  8997                           
  8998                           ;incstack = 0
  8999  0035FA  C020  F018         	movff	ZeroArray@array,memset@p1
  9000  0035FE  C021  F019         	movff	ZeroArray@array+1,memset@p1+1
  9001  003602  0E00               	movlw	0
  9002  003604  6E1B               	movwf	memset@c+1,c
  9003  003606  0E00               	movlw	0
  9004  003608  6E1A               	movwf	memset@c,c
  9005  00360A  C022  F01C         	movff	ZeroArray@size,memset@n
  9006  00360E  C023  F01D         	movff	ZeroArray@size+1,memset@n+1
  9007  003612  EC33  F01A         	call	_memset	;wreg free
  9008  003616  0012               	return		;funcret
  9009  003618                     __end_of_ZeroArray:
  9010                           	opt stack 0
  9011                           tosu	equ	0xFFF
  9012                           tosh	equ	0xFFE
  9013                           tosl	equ	0xFFD
  9014                           pclath	equ	0xFFA
  9015                           tblptru	equ	0xFF8
  9016                           tblptrh	equ	0xFF7
  9017                           tblptrl	equ	0xFF6
  9018                           tablat	equ	0xFF5
  9019                           prodh	equ	0xFF4
  9020                           prodl	equ	0xFF3
  9021                           intcon	equ	0xFF2
  9022                           intcon2	equ	0xFF1
  9023                           postinc0	equ	0xFEE
  9024                           wreg	equ	0xFE8
  9025                           indf1	equ	0xFE7
  9026                           postdec1	equ	0xFE5
  9027                           fsr1h	equ	0xFE2
  9028                           fsr1l	equ	0xFE1
  9029                           indf2	equ	0xFDF
  9030                           postinc2	equ	0xFDE
  9031                           postdec2	equ	0xFDD
  9032                           fsr2h	equ	0xFDA
  9033                           fsr2l	equ	0xFD9
  9034                           status	equ	0xFD8
  9035                           
  9036 ;; *************** function _WriteUartMessage *****************
  9037 ;; Defined at:
  9038 ;;		line 158 in file "EusartApp.c"
  9039 ;; Parameters:    Size  Location     Type
  9040 ;;  dataBuf         2   24[COMRAM] PTR unsigned char 
  9041 ;;		 -> GetMcuRunTime@TxMsg(9), GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), FlashReadCondition@TxMsg(9), 
  9042 ;;		 -> FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), 
  9043 ;;  dataSize        2   26[COMRAM] int 
  9044 ;; Auto vars:     Size  Location     Type
  9045 ;;  idx             2   29[COMRAM] int 
  9046 ;; Return value:  Size  Location     Type
  9047 ;;                  1    wreg      void 
  9048 ;; Registers used:
  9049 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9050 ;; Tracked objects:
  9051 ;;		On entry : 0/0
  9052 ;;		On exit  : 0/0
  9053 ;;		Unchanged: 0/0
  9054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9055 ;;      Params:         4       0       0       0       0       0       0
  9056 ;;      Locals:         2       0       0       0       0       0       0
  9057 ;;      Temps:          1       0       0       0       0       0       0
  9058 ;;      Totals:         7       0       0       0       0       0       0
  9059 ;;Total ram usage:        7 bytes
  9060 ;; Hardware stack levels used:    1
  9061 ;; Hardware stack levels required when called:    4
  9062 ;; This function calls:
  9063 ;;		_EUSART1_Write
  9064 ;; This function is called by:
  9065 ;;		_SendAckMessage
  9066 ;;		_FlashReadUart
  9067 ;;		_FlashReadCondition
  9068 ;;		_GetMcuFwVersion
  9069 ;;		_GetCpldFwVersion
  9070 ;;		_GetMcuRunTime
  9071 ;; This function uses a non-reentrant model
  9072 ;;
  9073                           
  9074                           	psect	text59
  9075  00333A                     __ptext59:
  9076                           	opt stack 0
  9077  00333A                     _WriteUartMessage:
  9078                           	opt stack 22
  9079                           
  9080                           ;EusartApp.c: 160: for(int idx = 0; idx < dataSize; idx++)
  9081                           
  9082                           ;incstack = 0
  9083  00333A  0E00               	movlw	0
  9084  00333C  6E1F               	movwf	WriteUartMessage@idx+1,c
  9085  00333E  0E00               	movlw	0
  9086  003340  6E1E               	movwf	WriteUartMessage@idx,c
  9087  003342  D00B               	goto	l204
  9088  003344                     
  9089                           ;EusartApp.c: 161: {
  9090                           ;EusartApp.c: 162: EUSART1_Write(dataBuf[idx]);
  9091  003344  501E               	movf	WriteUartMessage@idx,w,c
  9092  003346  2419               	addwf	WriteUartMessage@dataBuf,w,c
  9093  003348  6ED9               	movwf	fsr2l,c
  9094  00334A  501F               	movf	WriteUartMessage@idx+1,w,c
  9095  00334C  201A               	addwfc	WriteUartMessage@dataBuf+1,w,c
  9096  00334E  6EDA               	movwf	fsr2h,c
  9097  003350  50DF               	movf	indf2,w,c
  9098  003352  EC9E  F018         	call	_EUSART1_Write
  9099  003356  4A1E               	infsnz	WriteUartMessage@idx,f,c
  9100  003358  2A1F               	incf	WriteUartMessage@idx+1,f,c
  9101  00335A                     l204:
  9102  00335A  501B               	movf	WriteUartMessage@dataSize,w,c
  9103  00335C  5C1E               	subwf	WriteUartMessage@idx,w,c
  9104  00335E  501F               	movf	WriteUartMessage@idx+1,w,c
  9105  003360  0A80               	xorlw	128
  9106  003362  6E1D               	movwf	??_WriteUartMessage& (0+255),c
  9107  003364  501C               	movf	WriteUartMessage@dataSize+1,w,c
  9108  003366  0A80               	xorlw	128
  9109  003368  581D               	subwfb	??_WriteUartMessage& (0+255),w,c
  9110  00336A  B0D8               	btfsc	status,0,c
  9111  00336C  0012               	return	
  9112  00336E  D7EA               	goto	l205
  9113  003370                     __end_of_WriteUartMessage:
  9114                           	opt stack 0
  9115                           tosu	equ	0xFFF
  9116                           tosh	equ	0xFFE
  9117                           tosl	equ	0xFFD
  9118                           pclath	equ	0xFFA
  9119                           tblptru	equ	0xFF8
  9120                           tblptrh	equ	0xFF7
  9121                           tblptrl	equ	0xFF6
  9122                           tablat	equ	0xFF5
  9123                           prodh	equ	0xFF4
  9124                           prodl	equ	0xFF3
  9125                           intcon	equ	0xFF2
  9126                           intcon2	equ	0xFF1
  9127                           postinc0	equ	0xFEE
  9128                           wreg	equ	0xFE8
  9129                           indf1	equ	0xFE7
  9130                           postdec1	equ	0xFE5
  9131                           fsr1h	equ	0xFE2
  9132                           fsr1l	equ	0xFE1
  9133                           indf2	equ	0xFDF
  9134                           postinc2	equ	0xFDE
  9135                           postdec2	equ	0xFDD
  9136                           fsr2h	equ	0xFDA
  9137                           fsr2l	equ	0xFD9
  9138                           status	equ	0xFD8
  9139                           
  9140 ;; *************** function _EUSART1_Write *****************
  9141 ;; Defined at:
  9142 ;;		line 157 in file "mcc_generated_files/eusart1.c"
  9143 ;; Parameters:    Size  Location     Type
  9144 ;;  txData          1    wreg     unsigned char 
  9145 ;; Auto vars:     Size  Location     Type
  9146 ;;  txData          1   23[COMRAM] unsigned char 
  9147 ;; Return value:  Size  Location     Type
  9148 ;;                  1    wreg      void 
  9149 ;; Registers used:
  9150 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9151 ;; Tracked objects:
  9152 ;;		On entry : 0/0
  9153 ;;		On exit  : 0/0
  9154 ;;		Unchanged: 0/0
  9155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9156 ;;      Params:         0       0       0       0       0       0       0
  9157 ;;      Locals:         1       0       0       0       0       0       0
  9158 ;;      Temps:          0       0       0       0       0       0       0
  9159 ;;      Totals:         1       0       0       0       0       0       0
  9160 ;;Total ram usage:        1 bytes
  9161 ;; Hardware stack levels used:    1
  9162 ;; Hardware stack levels required when called:    3
  9163 ;; This function calls:
  9164 ;;		Nothing
  9165 ;; This function is called by:
  9166 ;;		_WriteUartMessage
  9167 ;; This function uses a non-reentrant model
  9168 ;;
  9169                           
  9170                           	psect	text60
  9171  00313C                     __ptext60:
  9172                           	opt stack 0
  9173  00313C                     _EUSART1_Write:
  9174                           	opt stack 22
  9175                           
  9176                           ;incstack = 0
  9177                           ;EUSART1_Write@txData stored from wreg
  9178  00313C  6E18               	movwf	EUSART1_Write@txData,c
  9179  00313E                     
  9180                           ;eusart1.c: 160: {
  9181                           
  9182                           ;eusart1.c: 159: while(0 == eusart1TxBufferRemaining)
  9183  00313E  0100               	movlb	0	; () banked
  9184  003140  51FF               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
  9185  003142  B4D8               	btfsc	status,2,c
  9186  003144  D7FC               	goto	l6357
  9187                           
  9188                           ; BSR set to: 0
  9189                           ;eusart1.c: 161: }
  9190                           ;eusart1.c: 163: if(0 == PIE1bits.TX1IE)
  9191  003146  B89D               	btfsc	3997,4,c	;volatile
  9192  003148  D003               	goto	l776
  9193                           
  9194                           ; BSR set to: 0
  9195                           ;eusart1.c: 164: {
  9196                           ;eusart1.c: 165: TXREG1 = txData;
  9197  00314A  C018  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  9198                           
  9199                           ;eusart1.c: 166: }
  9200  00314E  D012               	goto	l777
  9201  003150                     l776:
  9202                           
  9203                           ; BSR set to: 0
  9204                           ;eusart1.c: 167: else
  9205                           ;eusart1.c: 168: {
  9206                           ;eusart1.c: 169: PIE1bits.TX1IE = 0;
  9207  003150  989D               	bcf	3997,4,c	;volatile
  9208                           
  9209                           ; BSR set to: 0
  9210                           ;eusart1.c: 170: eusart1TxBuffer[eusart1TxHead++] = txData;
  9211  003152  503A               	movf	_eusart1TxHead,w,c	;volatile
  9212  003154  0D01               	mullw	1
  9213  003156  0E00               	movlw	low _eusart1TxBuffer
  9214  003158  24F3               	addwf	prodl,w,c
  9215  00315A  6ED9               	movwf	fsr2l,c
  9216  00315C  0E01               	movlw	high _eusart1TxBuffer
  9217  00315E  20F4               	addwfc	prodh,w,c
  9218  003160  6EDA               	movwf	fsr2h,c
  9219  003162  C018  FFDF         	movff	EUSART1_Write@txData,indf2
  9220                           
  9221                           ; BSR set to: 0
  9222  003166  2A3A               	incf	_eusart1TxHead,f,c	;volatile
  9223                           
  9224                           ; BSR set to: 0
  9225                           ;eusart1.c: 171: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  9226  003168  0E45               	movlw	69
  9227  00316A  643A               	cpfsgt	_eusart1TxHead,c	;volatile
  9228  00316C  D002               	goto	l778
  9229                           
  9230                           ; BSR set to: 0
  9231                           ;eusart1.c: 172: {
  9232                           ;eusart1.c: 173: eusart1TxHead = 0;
  9233  00316E  0E00               	movlw	0
  9234  003170  6E3A               	movwf	_eusart1TxHead,c	;volatile
  9235  003172                     l778:
  9236                           
  9237                           ; BSR set to: 0
  9238                           ;eusart1.c: 174: }
  9239                           ;eusart1.c: 175: eusart1TxBufferRemaining--;
  9240                           
  9241                           ; BSR set to: 0
  9242  003172  07FF               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
  9243  003174                     l777:
  9244                           
  9245                           ; BSR set to: 0
  9246                           ;eusart1.c: 176: }
  9247                           ;eusart1.c: 177: PIE1bits.TX1IE = 1;
  9248                           
  9249                           ; BSR set to: 0
  9250  003174  889D               	bsf	3997,4,c	;volatile
  9251                           
  9252                           ; BSR set to: 0
  9253  003176  0012               	return		;funcret
  9254  003178                     __end_of_EUSART1_Write:
  9255                           	opt stack 0
  9256                           tosu	equ	0xFFF
  9257                           tosh	equ	0xFFE
  9258                           tosl	equ	0xFFD
  9259                           pclath	equ	0xFFA
  9260                           tblptru	equ	0xFF8
  9261                           tblptrh	equ	0xFF7
  9262                           tblptrl	equ	0xFF6
  9263                           tablat	equ	0xFF5
  9264                           prodh	equ	0xFF4
  9265                           prodl	equ	0xFF3
  9266                           intcon	equ	0xFF2
  9267                           intcon2	equ	0xFF1
  9268                           postinc0	equ	0xFEE
  9269                           wreg	equ	0xFE8
  9270                           indf1	equ	0xFE7
  9271                           postdec1	equ	0xFE5
  9272                           fsr1h	equ	0xFE2
  9273                           fsr1l	equ	0xFE1
  9274                           indf2	equ	0xFDF
  9275                           postinc2	equ	0xFDE
  9276                           postdec2	equ	0xFDD
  9277                           fsr2h	equ	0xFDA
  9278                           fsr2l	equ	0xFD9
  9279                           status	equ	0xFD8
  9280                           
  9281 ;; *************** function _InitSystemApplicationManagers *****************
  9282 ;; Defined at:
  9283 ;;		line 33 in file "SystemSettings.c"
  9284 ;; Parameters:    Size  Location     Type
  9285 ;;		None
  9286 ;; Auto vars:     Size  Location     Type
  9287 ;;		None
  9288 ;; Return value:  Size  Location     Type
  9289 ;;                  1    wreg      void 
  9290 ;; Registers used:
  9291 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9292 ;; Tracked objects:
  9293 ;;		On entry : 0/0
  9294 ;;		On exit  : 0/0
  9295 ;;		Unchanged: 0/0
  9296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9297 ;;      Params:         0       0       0       0       0       0       0
  9298 ;;      Locals:         0       0       0       0       0       0       0
  9299 ;;      Temps:          0       0       0       0       0       0       0
  9300 ;;      Totals:         0       0       0       0       0       0       0
  9301 ;;Total ram usage:        0 bytes
  9302 ;; Hardware stack levels used:    1
  9303 ;; Hardware stack levels required when called:    8
  9304 ;; This function calls:
  9305 ;;		_ClearMcuRunTime
  9306 ;;		_DacInit
  9307 ;;		_InitAdcApplicationMgr
  9308 ;;		_PLLInitialize
  9309 ;;		_TMR0_StartTimer
  9310 ;; This function is called by:
  9311 ;;		_main
  9312 ;; This function uses a non-reentrant model
  9313 ;;
  9314                           
  9315                           	psect	text61
  9316  00369A                     __ptext61:
  9317                           	opt stack 0
  9318  00369A                     _InitSystemApplicationManagers:
  9319                           	opt stack 22
  9320                           
  9321                           ;SystemSettings.c: 36: InitAdcApplicationMgr();
  9322                           
  9323                           ; BSR set to: 0
  9324                           ;incstack = 0
  9325  00369A  EC87  F01B         	call	_InitAdcApplicationMgr	;wreg free
  9326                           
  9327                           ;SystemSettings.c: 39: TMR0_StartTimer();
  9328  00369E  ECDC  F01B         	call	_TMR0_StartTimer	;wreg free
  9329                           
  9330                           ;SystemSettings.c: 42: PLLInitialize();
  9331  0036A2  EC20  F017         	call	_PLLInitialize	;wreg free
  9332                           
  9333                           ;SystemSettings.c: 45: ClearMcuRunTime();
  9334  0036A6  EC6C  F01B         	call	_ClearMcuRunTime	;wreg free
  9335                           
  9336                           ;SystemSettings.c: 48: DacInit();
  9337  0036AA  ECD7  F012         	call	_DacInit	;wreg free
  9338  0036AE  0012               	return		;funcret
  9339  0036B0                     __end_of_InitSystemApplicationManagers:
  9340                           	opt stack 0
  9341                           tosu	equ	0xFFF
  9342                           tosh	equ	0xFFE
  9343                           tosl	equ	0xFFD
  9344                           pclath	equ	0xFFA
  9345                           tblptru	equ	0xFF8
  9346                           tblptrh	equ	0xFF7
  9347                           tblptrl	equ	0xFF6
  9348                           tablat	equ	0xFF5
  9349                           prodh	equ	0xFF4
  9350                           prodl	equ	0xFF3
  9351                           intcon	equ	0xFF2
  9352                           intcon2	equ	0xFF1
  9353                           postinc0	equ	0xFEE
  9354                           wreg	equ	0xFE8
  9355                           indf1	equ	0xFE7
  9356                           postdec1	equ	0xFE5
  9357                           fsr1h	equ	0xFE2
  9358                           fsr1l	equ	0xFE1
  9359                           indf2	equ	0xFDF
  9360                           postinc2	equ	0xFDE
  9361                           postdec2	equ	0xFDD
  9362                           fsr2h	equ	0xFDA
  9363                           fsr2l	equ	0xFD9
  9364                           status	equ	0xFD8
  9365                           
  9366 ;; *************** function _TMR0_StartTimer *****************
  9367 ;; Defined at:
  9368 ;;		line 93 in file "mcc_generated_files/tmr0.c"
  9369 ;; Parameters:    Size  Location     Type
  9370 ;;		None
  9371 ;; Auto vars:     Size  Location     Type
  9372 ;;		None
  9373 ;; Return value:  Size  Location     Type
  9374 ;;                  1    wreg      void 
  9375 ;; Registers used:
  9376 ;;		None
  9377 ;; Tracked objects:
  9378 ;;		On entry : 0/0
  9379 ;;		On exit  : 0/0
  9380 ;;		Unchanged: 0/0
  9381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9382 ;;      Params:         0       0       0       0       0       0       0
  9383 ;;      Locals:         0       0       0       0       0       0       0
  9384 ;;      Temps:          0       0       0       0       0       0       0
  9385 ;;      Totals:         0       0       0       0       0       0       0
  9386 ;;Total ram usage:        0 bytes
  9387 ;; Hardware stack levels used:    1
  9388 ;; Hardware stack levels required when called:    3
  9389 ;; This function calls:
  9390 ;;		Nothing
  9391 ;; This function is called by:
  9392 ;;		_InitSystemApplicationManagers
  9393 ;; This function uses a non-reentrant model
  9394 ;;
  9395                           
  9396                           	psect	text62
  9397  0037B8                     __ptext62:
  9398                           	opt stack 0
  9399  0037B8                     _TMR0_StartTimer:
  9400                           	opt stack 26
  9401                           
  9402                           ;tmr0.c: 96: T0CONbits.TMR0ON = 1;
  9403                           
  9404                           ;incstack = 0
  9405  0037B8  8ED5               	bsf	4053,7,c	;volatile
  9406  0037BA  0012               	return		;funcret
  9407  0037BC                     __end_of_TMR0_StartTimer:
  9408                           	opt stack 0
  9409                           tosu	equ	0xFFF
  9410                           tosh	equ	0xFFE
  9411                           tosl	equ	0xFFD
  9412                           pclath	equ	0xFFA
  9413                           tblptru	equ	0xFF8
  9414                           tblptrh	equ	0xFF7
  9415                           tblptrl	equ	0xFF6
  9416                           tablat	equ	0xFF5
  9417                           prodh	equ	0xFF4
  9418                           prodl	equ	0xFF3
  9419                           intcon	equ	0xFF2
  9420                           intcon2	equ	0xFF1
  9421                           postinc0	equ	0xFEE
  9422                           wreg	equ	0xFE8
  9423                           indf1	equ	0xFE7
  9424                           postdec1	equ	0xFE5
  9425                           fsr1h	equ	0xFE2
  9426                           fsr1l	equ	0xFE1
  9427                           indf2	equ	0xFDF
  9428                           postinc2	equ	0xFDE
  9429                           postdec2	equ	0xFDD
  9430                           fsr2h	equ	0xFDA
  9431                           fsr2l	equ	0xFD9
  9432                           status	equ	0xFD8
  9433                           
  9434 ;; *************** function _PLLInitialize *****************
  9435 ;; Defined at:
  9436 ;;		line 18 in file "SyntApp.c"
  9437 ;; Parameters:    Size  Location     Type
  9438 ;;		None
  9439 ;; Auto vars:     Size  Location     Type
  9440 ;;  idx             1   46[COMRAM] unsigned char 
  9441 ;; Return value:  Size  Location     Type
  9442 ;;                  1    wreg      void 
  9443 ;; Registers used:
  9444 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9445 ;; Tracked objects:
  9446 ;;		On entry : 0/0
  9447 ;;		On exit  : 0/0
  9448 ;;		Unchanged: 0/0
  9449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9450 ;;      Params:         0       0       0       0       0       0       0
  9451 ;;      Locals:         1       0       0       0       0       0       0
  9452 ;;      Temps:          0       0       0       0       0       0       0
  9453 ;;      Totals:         1       0       0       0       0       0       0
  9454 ;;Total ram usage:        1 bytes
  9455 ;; Hardware stack levels used:    1
  9456 ;; Hardware stack levels required when called:    7
  9457 ;; This function calls:
  9458 ;;		_SWSPI_send_word
  9459 ;;		_SwSpi_Set_CE_Pin
  9460 ;; This function is called by:
  9461 ;;		_InitSystemApplicationManagers
  9462 ;; This function uses a non-reentrant model
  9463 ;;
  9464                           
  9465                           	psect	text63
  9466  002E40                     __ptext63:
  9467                           	opt stack 0
  9468  002E40                     _PLLInitialize:
  9469                           	opt stack 22
  9470                           
  9471                           ;SyntApp.c: 25: IOCB = 0b10000000;
  9472                           
  9473                           ;incstack = 0
  9474  002E40  0E80               	movlw	128
  9475  002E42  6E62               	movwf	3938,c	;volatile
  9476                           
  9477                           ;SyntApp.c: 28: SwSpi_Set_CE_Pin(SYNTH_TX, 1);
  9478  002E44  0E01               	movlw	1
  9479  002E46  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  9480  002E48  0E00               	movlw	0
  9481  002E4A  ECBC  F018         	call	_SwSpi_Set_CE_Pin
  9482                           
  9483                           ;SyntApp.c: 31: for(uint8_t idx = 0; idx < 13; idx++)
  9484  002E4E  0E00               	movlw	0
  9485  002E50  6E2F               	movwf	PLLInitialize@idx,c
  9486  002E52                     l7669:
  9487  002E52  0E0C               	movlw	12
  9488  002E54  642F               	cpfsgt	PLLInitialize@idx,c
  9489  002E56  D001               	goto	l431
  9490  002E58  0012               	return	
  9491  002E5A                     l431:
  9492                           
  9493                           ;SyntApp.c: 32: {
  9494                           ;SyntApp.c: 33: SWSPI_send_word(SYNTH_TX, SYNTH_REGS[idx],3);
  9495  002E5A  502F               	movf	PLLInitialize@idx,w,c
  9496  002E5C  0D04               	mullw	4
  9497  002E5E  0E01               	movlw	low _SYNTH_REGS
  9498  002E60  24F3               	addwf	prodl,w,c
  9499  002E62  6EF6               	movwf	tblptrl,c
  9500  002E64  0E06               	movlw	high _SYNTH_REGS
  9501  002E66  20F4               	addwfc	prodh,w,c
  9502  002E68  6EF7               	movwf	tblptrh,c
  9503  002E6A                     	if	0	;There are less than 3 active tblptr bytes
  9504  002E6A                     	endif
  9505  002E6A  0009               	tblrd		*+
  9506  002E6C  CFF5 F026          	movff	tablat,SWSPI_send_word@data
  9507  002E70  0009               	tblrd		*+
  9508  002E72  CFF5 F027          	movff	tablat,SWSPI_send_word@data+1
  9509  002E76  0009               	tblrd		*+
  9510  002E78  CFF5 F028          	movff	tablat,SWSPI_send_word@data+2
  9511  002E7C  000A               	tblrd		*-
  9512  002E7E  CFF5 F029          	movff	tablat,SWSPI_send_word@data+3
  9513  002E82  0E03               	movlw	3
  9514  002E84  6E2A               	movwf	SWSPI_send_word@dataSize,c
  9515  002E86  0E00               	movlw	0
  9516  002E88  ECE7  F010         	call	_SWSPI_send_word
  9517  002E8C  2A2F               	incf	PLLInitialize@idx,f,c
  9518  002E8E  D7E1               	goto	l7669
  9519  002E90                     __end_of_PLLInitialize:
  9520                           	opt stack 0
  9521                           tosu	equ	0xFFF
  9522                           tosh	equ	0xFFE
  9523                           tosl	equ	0xFFD
  9524                           pclath	equ	0xFFA
  9525                           tblptru	equ	0xFF8
  9526                           tblptrh	equ	0xFF7
  9527                           tblptrl	equ	0xFF6
  9528                           tablat	equ	0xFF5
  9529                           prodh	equ	0xFF4
  9530                           prodl	equ	0xFF3
  9531                           intcon	equ	0xFF2
  9532                           intcon2	equ	0xFF1
  9533                           postinc0	equ	0xFEE
  9534                           wreg	equ	0xFE8
  9535                           indf1	equ	0xFE7
  9536                           postdec1	equ	0xFE5
  9537                           fsr1h	equ	0xFE2
  9538                           fsr1l	equ	0xFE1
  9539                           indf2	equ	0xFDF
  9540                           postinc2	equ	0xFDE
  9541                           postdec2	equ	0xFDD
  9542                           fsr2h	equ	0xFDA
  9543                           fsr2l	equ	0xFD9
  9544                           status	equ	0xFD8
  9545                           
  9546 ;; *************** function _SwSpi_Set_CE_Pin *****************
  9547 ;; Defined at:
  9548 ;;		line 201 in file "SwSpiApp.c"
  9549 ;; Parameters:    Size  Location     Type
  9550 ;;  phrType         1    wreg     enum E7547
  9551 ;;  cPinMode        1   23[COMRAM] unsigned char 
  9552 ;; Auto vars:     Size  Location     Type
  9553 ;;  phrType         1   24[COMRAM] enum E7547
  9554 ;; Return value:  Size  Location     Type
  9555 ;;                  1    wreg      void 
  9556 ;; Registers used:
  9557 ;;		wreg, status,2, status,0
  9558 ;; Tracked objects:
  9559 ;;		On entry : 0/0
  9560 ;;		On exit  : 0/0
  9561 ;;		Unchanged: 0/0
  9562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9563 ;;      Params:         1       0       0       0       0       0       0
  9564 ;;      Locals:         1       0       0       0       0       0       0
  9565 ;;      Temps:          0       0       0       0       0       0       0
  9566 ;;      Totals:         2       0       0       0       0       0       0
  9567 ;;Total ram usage:        2 bytes
  9568 ;; Hardware stack levels used:    1
  9569 ;; Hardware stack levels required when called:    3
  9570 ;; This function calls:
  9571 ;;		Nothing
  9572 ;; This function is called by:
  9573 ;;		_PLLInitialize
  9574 ;; This function uses a non-reentrant model
  9575 ;;
  9576                           
  9577                           	psect	text64
  9578  003178                     __ptext64:
  9579                           	opt stack 0
  9580  003178                     _SwSpi_Set_CE_Pin:
  9581                           	opt stack 25
  9582                           
  9583                           ;incstack = 0
  9584                           ;SwSpi_Set_CE_Pin@phrType stored from wreg
  9585  003178  6E19               	movwf	SwSpi_Set_CE_Pin@phrType,c
  9586                           
  9587                           ;SwSpiApp.c: 203: switch(phrType)
  9588  00317A  D014               	goto	l595
  9589  00317C                     
  9590                           ;SwSpiApp.c: 206: if(cPinMode == 1)
  9591  00317C  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
  9592  00317E  A4D8               	btfss	status,2,c
  9593  003180  D002               	goto	l597
  9594                           
  9595                           ;SwSpiApp.c: 207: {
  9596                           ;SwSpiApp.c: 208: do { LATCbits.LATC1 = 1; } while(0);
  9597  003182  828B               	bsf	3979,1,c	;volatile
  9598                           
  9599                           ;SwSpiApp.c: 209: }
  9600  003184  0012               	return	
  9601  003186                     l597:
  9602                           
  9603                           ;SwSpiApp.c: 210: else if(cPinMode == 0)
  9604  003186  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
  9605  003188  A4D8               	btfss	status,2,c
  9606  00318A  0012               	return	
  9607                           
  9608                           ;SwSpiApp.c: 211: {
  9609                           ;SwSpiApp.c: 212: do { LATCbits.LATC1 = 0; } while(0);
  9610  00318C  928B               	bcf	3979,1,c	;volatile
  9611                           
  9612                           ;SwSpiApp.c: 213: }
  9613                           ;SwSpiApp.c: 214: break;
  9614  00318E  0012               	return	
  9615  003190                     
  9616                           ;SwSpiApp.c: 217: if(cPinMode == 1)
  9617  003190  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
  9618  003192  A4D8               	btfss	status,2,c
  9619  003194  D002               	goto	l606
  9620                           
  9621                           ;SwSpiApp.c: 218: {
  9622                           ;SwSpiApp.c: 219: do { LATDbits.LATD2 = 1; } while(0);
  9623  003196  848C               	bsf	3980,2,c	;volatile
  9624                           
  9625                           ;SwSpiApp.c: 220: }
  9626  003198  0012               	return	
  9627  00319A                     l606:
  9628                           
  9629                           ;SwSpiApp.c: 221: else if(cPinMode == 0)
  9630  00319A  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
  9631  00319C  A4D8               	btfss	status,2,c
  9632  00319E  0012               	return	
  9633                           
  9634                           ;SwSpiApp.c: 222: {
  9635                           ;SwSpiApp.c: 223: do { LATCbits.LATC1 = 0; } while(0);
  9636  0031A0  928B               	bcf	3979,1,c	;volatile
  9637                           
  9638                           ;SwSpiApp.c: 226: }
  9639                           
  9640                           ;SwSpiApp.c: 224: }
  9641                           ;SwSpiApp.c: 225: break;
  9642  0031A2  0012               	return	
  9643  0031A4                     l595:
  9644  0031A4  5019               	movf	SwSpi_Set_CE_Pin@phrType,w,c
  9645                           
  9646                           ; Switch size 1, requested type "space"
  9647                           ; Number of cases is 2, Range of values is 0 to 1
  9648                           ; switch strategies available:
  9649                           ; Name         Instructions Cycles
  9650                           ; simple_byte            7     4 (average)
  9651                           ;	Chosen strategy is simple_byte
  9652  0031A6  0A00               	xorlw	0	; case 0
  9653  0031A8  B4D8               	btfsc	status,2,c
  9654  0031AA  D7E8               	goto	l596
  9655  0031AC  0A01               	xorlw	1	; case 1
  9656  0031AE  A4D8               	btfss	status,2,c
  9657  0031B0  0012               	return	
  9658  0031B2  D7EE               	goto	l605
  9659  0031B4                     __end_of_SwSpi_Set_CE_Pin:
  9660                           	opt stack 0
  9661                           tosu	equ	0xFFF
  9662                           tosh	equ	0xFFE
  9663                           tosl	equ	0xFFD
  9664                           pclath	equ	0xFFA
  9665                           tblptru	equ	0xFF8
  9666                           tblptrh	equ	0xFF7
  9667                           tblptrl	equ	0xFF6
  9668                           tablat	equ	0xFF5
  9669                           prodh	equ	0xFF4
  9670                           prodl	equ	0xFF3
  9671                           intcon	equ	0xFF2
  9672                           intcon2	equ	0xFF1
  9673                           postinc0	equ	0xFEE
  9674                           wreg	equ	0xFE8
  9675                           indf1	equ	0xFE7
  9676                           postdec1	equ	0xFE5
  9677                           fsr1h	equ	0xFE2
  9678                           fsr1l	equ	0xFE1
  9679                           indf2	equ	0xFDF
  9680                           postinc2	equ	0xFDE
  9681                           postdec2	equ	0xFDD
  9682                           fsr2h	equ	0xFDA
  9683                           fsr2l	equ	0xFD9
  9684                           status	equ	0xFD8
  9685                           
  9686 ;; *************** function _InitAdcApplicationMgr *****************
  9687 ;; Defined at:
  9688 ;;		line 22 in file "AdcApp.c"
  9689 ;; Parameters:    Size  Location     Type
  9690 ;;		None
  9691 ;; Auto vars:     Size  Location     Type
  9692 ;;  channel         1   23[COMRAM] unsigned char 
  9693 ;; Return value:  Size  Location     Type
  9694 ;;                  1    wreg      void 
  9695 ;; Registers used:
  9696 ;;		wreg, status,2
  9697 ;; Tracked objects:
  9698 ;;		On entry : 0/0
  9699 ;;		On exit  : 0/0
  9700 ;;		Unchanged: 0/0
  9701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9702 ;;      Params:         0       0       0       0       0       0       0
  9703 ;;      Locals:         1       0       0       0       0       0       0
  9704 ;;      Temps:          0       0       0       0       0       0       0
  9705 ;;      Totals:         1       0       0       0       0       0       0
  9706 ;;Total ram usage:        1 bytes
  9707 ;; Hardware stack levels used:    1
  9708 ;; Hardware stack levels required when called:    3
  9709 ;; This function calls:
  9710 ;;		Nothing
  9711 ;; This function is called by:
  9712 ;;		_InitSystemApplicationManagers
  9713 ;; This function uses a non-reentrant model
  9714 ;;
  9715                           
  9716                           	psect	text65
  9717  00370E                     __ptext65:
  9718                           	opt stack 0
  9719  00370E                     _InitAdcApplicationMgr:
  9720                           	opt stack 26
  9721                           
  9722                           ;AdcApp.c: 24: conversionFormat = CONVERSION_LEFT_FORAMT;
  9723                           
  9724                           ;incstack = 0
  9725  00370E  0E00               	movlw	0
  9726  003710  0100               	movlb	0	; () banked
  9727  003712  6FD5               	movwf	_conversionFormat& (0+255),b
  9728                           
  9729                           ;AdcApp.c: 25: adcSampleMode = CIRCULAR;
  9730  003714  0E00               	movlw	0
  9731  003716  6E3D               	movwf	_adcSampleMode,c
  9732                           
  9733                           ;AdcApp.c: 26: char channel = 0;
  9734  003718  0E00               	movlw	0
  9735  00371A  6E18               	movwf	InitAdcApplicationMgr@channel,c
  9736                           
  9737                           ; BSR set to: 0
  9738  00371C  0012               	return		;funcret
  9739  00371E                     __end_of_InitAdcApplicationMgr:
  9740                           	opt stack 0
  9741                           tosu	equ	0xFFF
  9742                           tosh	equ	0xFFE
  9743                           tosl	equ	0xFFD
  9744                           pclath	equ	0xFFA
  9745                           tblptru	equ	0xFF8
  9746                           tblptrh	equ	0xFF7
  9747                           tblptrl	equ	0xFF6
  9748                           tablat	equ	0xFF5
  9749                           prodh	equ	0xFF4
  9750                           prodl	equ	0xFF3
  9751                           intcon	equ	0xFF2
  9752                           intcon2	equ	0xFF1
  9753                           postinc0	equ	0xFEE
  9754                           wreg	equ	0xFE8
  9755                           indf1	equ	0xFE7
  9756                           postdec1	equ	0xFE5
  9757                           fsr1h	equ	0xFE2
  9758                           fsr1l	equ	0xFE1
  9759                           indf2	equ	0xFDF
  9760                           postinc2	equ	0xFDE
  9761                           postdec2	equ	0xFDD
  9762                           fsr2h	equ	0xFDA
  9763                           fsr2l	equ	0xFD9
  9764                           status	equ	0xFD8
  9765                           
  9766 ;; *************** function _DacInit *****************
  9767 ;; Defined at:
  9768 ;;		line 24 in file "DacApp.c"
  9769 ;; Parameters:    Size  Location     Type
  9770 ;;		None
  9771 ;; Auto vars:     Size  Location     Type
  9772 ;;  test            2   46[COMRAM] unsigned int 
  9773 ;; Return value:  Size  Location     Type
  9774 ;;                  1    wreg      void 
  9775 ;; Registers used:
  9776 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9777 ;; Tracked objects:
  9778 ;;		On entry : 0/0
  9779 ;;		On exit  : 0/0
  9780 ;;		Unchanged: 0/0
  9781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9782 ;;      Params:         0       0       0       0       0       0       0
  9783 ;;      Locals:         2       0       0       0       0       0       0
  9784 ;;      Temps:          0       0       0       0       0       0       0
  9785 ;;      Totals:         2       0       0       0       0       0       0
  9786 ;;Total ram usage:        2 bytes
  9787 ;; Hardware stack levels used:    1
  9788 ;; Hardware stack levels required when called:    7
  9789 ;; This function calls:
  9790 ;;		_ReadIntFromEeprom
  9791 ;;		_SWSPI_send_word
  9792 ;; This function is called by:
  9793 ;;		_InitSystemApplicationManagers
  9794 ;; This function uses a non-reentrant model
  9795 ;;
  9796                           
  9797                           	psect	text66
  9798  0025AE                     __ptext66:
  9799                           	opt stack 0
  9800  0025AE                     _DacInit:
  9801                           	opt stack 22
  9802                           
  9803                           ;DacApp.c: 27: uint16_t test = ReadIntFromEeprom((0), 2);
  9804                           
  9805                           ; BSR set to: 0
  9806                           ;incstack = 0
  9807  0025AE  0E00               	movlw	0
  9808  0025B0  6E1B               	movwf	ReadIntFromEeprom@numOfByes+1,c
  9809  0025B2  0E02               	movlw	2
  9810  0025B4  6E1A               	movwf	ReadIntFromEeprom@numOfByes,c
  9811  0025B6  0E00               	movlw	0
  9812  0025B8  EC60  F014         	call	_ReadIntFromEeprom
  9813  0025BC  C01A  F02F         	movff	?_ReadIntFromEeprom,DacInit@test
  9814  0025C0  C01B  F030         	movff	?_ReadIntFromEeprom+1,DacInit@test+1
  9815                           
  9816                           ;DacApp.c: 29: SWSPI_send_word(EXT_DAC, (0x2344), 1);
  9817  0025C4  0E44               	movlw	68
  9818  0025C6  6E26               	movwf	SWSPI_send_word@data,c
  9819  0025C8  0E23               	movlw	35
  9820  0025CA  6E27               	movwf	SWSPI_send_word@data+1,c
  9821  0025CC  0E00               	movlw	0
  9822  0025CE  6E28               	movwf	SWSPI_send_word@data+2,c
  9823  0025D0  0E00               	movlw	0
  9824  0025D2  6E29               	movwf	SWSPI_send_word@data+3,c
  9825  0025D4  0E01               	movlw	1
  9826  0025D6  6E2A               	movwf	SWSPI_send_word@dataSize,c
  9827  0025D8  0E02               	movlw	2
  9828  0025DA  ECE7  F010         	call	_SWSPI_send_word
  9829                           
  9830                           ;DacApp.c: 30: SWSPI_send_word(EXT_DAC, (0x6344), 1);
  9831  0025DE  0E44               	movlw	68
  9832  0025E0  6E26               	movwf	SWSPI_send_word@data,c
  9833  0025E2  0E63               	movlw	99
  9834  0025E4  6E27               	movwf	SWSPI_send_word@data+1,c
  9835  0025E6  0E00               	movlw	0
  9836  0025E8  6E28               	movwf	SWSPI_send_word@data+2,c
  9837  0025EA  0E00               	movlw	0
  9838  0025EC  6E29               	movwf	SWSPI_send_word@data+3,c
  9839  0025EE  0E01               	movlw	1
  9840  0025F0  6E2A               	movwf	SWSPI_send_word@dataSize,c
  9841  0025F2  0E02               	movlw	2
  9842  0025F4  ECE7  F010         	call	_SWSPI_send_word
  9843                           
  9844                           ;DacApp.c: 31: SWSPI_send_word(EXT_DAC, (0xA344), 1);
  9845  0025F8  0E44               	movlw	68
  9846  0025FA  6E26               	movwf	SWSPI_send_word@data,c
  9847  0025FC  0EA3               	movlw	163
  9848  0025FE  6E27               	movwf	SWSPI_send_word@data+1,c
  9849  002600  0E00               	movlw	0
  9850  002602  6E28               	movwf	SWSPI_send_word@data+2,c
  9851  002604  0E00               	movlw	0
  9852  002606  6E29               	movwf	SWSPI_send_word@data+3,c
  9853  002608  0E01               	movlw	1
  9854  00260A  6E2A               	movwf	SWSPI_send_word@dataSize,c
  9855  00260C  0E02               	movlw	2
  9856  00260E  ECE7  F010         	call	_SWSPI_send_word
  9857                           
  9858                           ;DacApp.c: 32: SWSPI_send_word(EXT_DAC, (0xE344), 1);
  9859  002612  0E44               	movlw	68
  9860  002614  6E26               	movwf	SWSPI_send_word@data,c
  9861  002616  0EE3               	movlw	227
  9862  002618  6E27               	movwf	SWSPI_send_word@data+1,c
  9863  00261A  0E00               	movlw	0
  9864  00261C  6E28               	movwf	SWSPI_send_word@data+2,c
  9865  00261E  0E00               	movlw	0
  9866  002620  6E29               	movwf	SWSPI_send_word@data+3,c
  9867  002622  0E01               	movlw	1
  9868  002624  6E2A               	movwf	SWSPI_send_word@dataSize,c
  9869  002626  0E02               	movlw	2
  9870  002628  ECE7  F010         	call	_SWSPI_send_word
  9871  00262C  0012               	return		;funcret
  9872  00262E                     __end_of_DacInit:
  9873                           	opt stack 0
  9874                           tosu	equ	0xFFF
  9875                           tosh	equ	0xFFE
  9876                           tosl	equ	0xFFD
  9877                           pclath	equ	0xFFA
  9878                           tblptru	equ	0xFF8
  9879                           tblptrh	equ	0xFF7
  9880                           tblptrl	equ	0xFF6
  9881                           tablat	equ	0xFF5
  9882                           prodh	equ	0xFF4
  9883                           prodl	equ	0xFF3
  9884                           intcon	equ	0xFF2
  9885                           intcon2	equ	0xFF1
  9886                           postinc0	equ	0xFEE
  9887                           wreg	equ	0xFE8
  9888                           indf1	equ	0xFE7
  9889                           postdec1	equ	0xFE5
  9890                           fsr1h	equ	0xFE2
  9891                           fsr1l	equ	0xFE1
  9892                           indf2	equ	0xFDF
  9893                           postinc2	equ	0xFDE
  9894                           postdec2	equ	0xFDD
  9895                           fsr2h	equ	0xFDA
  9896                           fsr2l	equ	0xFD9
  9897                           status	equ	0xFD8
  9898                           
  9899 ;; *************** function _SWSPI_send_word *****************
  9900 ;; Defined at:
  9901 ;;		line 17 in file "SwSpiApp.c"
  9902 ;; Parameters:    Size  Location     Type
  9903 ;;  phrType         1    wreg     enum E7547
  9904 ;;  data            4   37[COMRAM] unsigned long 
  9905 ;;  dataSize        1   41[COMRAM] unsigned char 
  9906 ;; Auto vars:     Size  Location     Type
  9907 ;;  phrType         1   45[COMRAM] enum E7547
  9908 ;;  datac           1   42[COMRAM] unsigned char 
  9909 ;;  idx             2   43[COMRAM] int 
  9910 ;; Return value:  Size  Location     Type
  9911 ;;                  1    wreg      void 
  9912 ;; Registers used:
  9913 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9914 ;; Tracked objects:
  9915 ;;		On entry : 0/0
  9916 ;;		On exit  : 0/0
  9917 ;;		Unchanged: 0/0
  9918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9919 ;;      Params:         5       0       0       0       0       0       0
  9920 ;;      Locals:         4       0       0       0       0       0       0
  9921 ;;      Temps:          0       0       0       0       0       0       0
  9922 ;;      Totals:         9       0       0       0       0       0       0
  9923 ;;Total ram usage:        9 bytes
  9924 ;; Hardware stack levels used:    1
  9925 ;; Hardware stack levels required when called:    6
  9926 ;; This function calls:
  9927 ;;		_SWSPI_DAC_send_bits
  9928 ;;		_SWSPI_Synth_send_bits
  9929 ;;		_SwSpi_Set_Dac_Sync_Pin
  9930 ;;		_SwSpi_Set_Synth_Le_Pin
  9931 ;;		_make8
  9932 ;; This function is called by:
  9933 ;;		_DacInit
  9934 ;;		_DacSetValue
  9935 ;;		_PLLInitialize
  9936 ;;		_UpdateTxFreq
  9937 ;;		_UpdateRxFreq
  9938 ;; This function uses a non-reentrant model
  9939 ;;
  9940                           
  9941                           	psect	text67
  9942  0021CE                     __ptext67:
  9943                           	opt stack 0
  9944  0021CE                     _SWSPI_send_word:
  9945                           	opt stack 21
  9946                           
  9947                           ;incstack = 0
  9948                           ;SWSPI_send_word@phrType stored from wreg
  9949  0021CE  6E2E               	movwf	SWSPI_send_word@phrType,c
  9950                           
  9951                           ;SwSpiApp.c: 19: (INTCONbits.GIE = 0);
  9952  0021D0  9EF2               	bcf	intcon,7,c	;volatile
  9953                           
  9954                           ;SwSpiApp.c: 23: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
  9955  0021D2  502E               	movf	SWSPI_send_word@phrType,w,c
  9956  0021D4  B4D8               	btfsc	status,2,c
  9957  0021D6  D003               	goto	u6790
  9958  0021D8  042E               	decf	SWSPI_send_word@phrType,w,c
  9959  0021DA  A4D8               	btfss	status,2,c
  9960  0021DC  D016               	goto	l504
  9961  0021DE                     u6790:
  9962                           
  9963                           ;SwSpiApp.c: 24: {
  9964                           ;SwSpiApp.c: 25: SwSpi_Set_Synth_Le_Pin(phrType, 0);
  9965  0021DE  0E00               	movlw	0
  9966  0021E0  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
  9967  0021E2  502E               	movf	SWSPI_send_word@phrType,w,c
  9968  0021E4  ECDA  F018         	call	_SwSpi_Set_Synth_Le_Pin
  9969                           
  9970                           ;SwSpiApp.c: 26: SWSPI_Synth_send_bits(phrType, data);
  9971  0021E8  C026  F022         	movff	SWSPI_send_word@data,SWSPI_Synth_send_bits@data
  9972  0021EC  C027  F023         	movff	SWSPI_send_word@data+1,SWSPI_Synth_send_bits@data+1
  9973  0021F0  C028  F024         	movff	SWSPI_send_word@data+2,SWSPI_Synth_send_bits@data+2
  9974  0021F4  C029  F025         	movff	SWSPI_send_word@data+3,SWSPI_Synth_send_bits@data+3
  9975  0021F8  502E               	movf	SWSPI_send_word@phrType,w,c
  9976  0021FA  ECDC  F00F         	call	_SWSPI_Synth_send_bits
  9977                           
  9978                           ;SwSpiApp.c: 27: SwSpi_Set_Synth_Le_Pin(phrType, 1);
  9979  0021FE  0E01               	movlw	1
  9980  002200  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
  9981  002202  502E               	movf	SWSPI_send_word@phrType,w,c
  9982  002204  ECDA  F018         	call	_SwSpi_Set_Synth_Le_Pin
  9983                           
  9984                           ;SwSpiApp.c: 28: }
  9985  002208  D02D               	goto	l508
  9986  00220A                     l504:
  9987                           
  9988                           ;SwSpiApp.c: 29: else if(phrType == EXT_DAC)
  9989  00220A  0E02               	movlw	2
  9990  00220C  182E               	xorwf	SWSPI_send_word@phrType,w,c
  9991  00220E  A4D8               	btfss	status,2,c
  9992  002210  D029               	goto	l508
  9993                           
  9994                           ;SwSpiApp.c: 30: {
  9995                           ;SwSpiApp.c: 31: SwSpi_Set_Dac_Sync_Pin(0);
  9996  002212  0E00               	movlw	0
  9997  002214  EC1B  F01B         	call	_SwSpi_Set_Dac_Sync_Pin
  9998                           
  9999                           ;SwSpiApp.c: 32: for(int idx = dataSize + 1; idx > 0; idx--)
 10000  002218  0E01               	movlw	1
 10001  00221A  242A               	addwf	SWSPI_send_word@dataSize,w,c
 10002  00221C  6E2C               	movwf	SWSPI_send_word@idx,c
 10003  00221E  6A2D               	clrf	SWSPI_send_word@idx+1,c
 10004  002220  0E00               	movlw	0
 10005  002222  222D               	addwfc	SWSPI_send_word@idx+1,f,c
 10006  002224                     l6939:
 10007  002224  BE2D               	btfsc	SWSPI_send_word@idx+1,7,c
 10008  002226  D01B               	goto	u6820
 10009  002228  502D               	movf	SWSPI_send_word@idx+1,w,c
 10010  00222A  E103               	bnz	l6943
 10011  00222C  042C               	decf	SWSPI_send_word@idx,w,c
 10012  00222E  A0D8               	btfss	status,0,c
 10013  002230  D016               	goto	u6820
 10014  002232                     l6943:
 10015                           
 10016                           ;SwSpiApp.c: 33: {
 10017                           ;SwSpiApp.c: 34: uint8_t datac = make8(data, idx - 1);
 10018  002232  C026  F018         	movff	SWSPI_send_word@data,make8@data
 10019  002236  C027  F019         	movff	SWSPI_send_word@data+1,make8@data+1
 10020  00223A  C028  F01A         	movff	SWSPI_send_word@data+2,make8@data+2
 10021  00223E  C029  F01B         	movff	SWSPI_send_word@data+3,make8@data+3
 10022  002242  042C               	decf	SWSPI_send_word@idx,w,c
 10023  002244  6E1C               	movwf	make8@dataLocation,c
 10024  002246  EC1B  F015         	call	_make8	;wreg free
 10025  00224A  6E2B               	movwf	SWSPI_send_word@datac,c
 10026                           
 10027                           ;SwSpiApp.c: 35: SWSPI_DAC_send_bits(phrType, datac);
 10028  00224C  C02B  F01A         	movff	SWSPI_send_word@datac,SWSPI_DAC_send_bits@data
 10029  002250  502E               	movf	SWSPI_send_word@phrType,w,c
 10030  002252  ECCF  F015         	call	_SWSPI_DAC_send_bits
 10031  002256  062C               	decf	SWSPI_send_word@idx,f,c
 10032  002258  A0D8               	btfss	status,0,c
 10033  00225A  062D               	decf	SWSPI_send_word@idx+1,f,c
 10034  00225C  D7E3               	goto	l6939
 10035  00225E                     u6820:
 10036                           
 10037                           ;SwSpiApp.c: 36: }
 10038                           ;SwSpiApp.c: 37: SwSpi_Set_Dac_Sync_Pin(1);
 10039  00225E  0E01               	movlw	1
 10040  002260  EC1B  F01B         	call	_SwSpi_Set_Dac_Sync_Pin
 10041  002264                     l508:
 10042                           
 10043                           ;SwSpiApp.c: 38: }
 10044                           ;SwSpiApp.c: 40: (INTCONbits.GIE = 1);
 10045  002264  8EF2               	bsf	intcon,7,c	;volatile
 10046  002266  0012               	return		;funcret
 10047  002268                     __end_of_SWSPI_send_word:
 10048                           	opt stack 0
 10049                           tosu	equ	0xFFF
 10050                           tosh	equ	0xFFE
 10051                           tosl	equ	0xFFD
 10052                           pclath	equ	0xFFA
 10053                           tblptru	equ	0xFF8
 10054                           tblptrh	equ	0xFF7
 10055                           tblptrl	equ	0xFF6
 10056                           tablat	equ	0xFF5
 10057                           prodh	equ	0xFF4
 10058                           prodl	equ	0xFF3
 10059                           intcon	equ	0xFF2
 10060                           intcon2	equ	0xFF1
 10061                           postinc0	equ	0xFEE
 10062                           wreg	equ	0xFE8
 10063                           indf1	equ	0xFE7
 10064                           postdec1	equ	0xFE5
 10065                           fsr1h	equ	0xFE2
 10066                           fsr1l	equ	0xFE1
 10067                           indf2	equ	0xFDF
 10068                           postinc2	equ	0xFDE
 10069                           postdec2	equ	0xFDD
 10070                           fsr2h	equ	0xFDA
 10071                           fsr2l	equ	0xFD9
 10072                           status	equ	0xFD8
 10073                           
 10074 ;; *************** function _make8 *****************
 10075 ;; Defined at:
 10076 ;;		line 58 in file "SystemCommon.c"
 10077 ;; Parameters:    Size  Location     Type
 10078 ;;  data            4   23[COMRAM] unsigned long 
 10079 ;;  dataLocation    1   27[COMRAM] unsigned char 
 10080 ;; Auto vars:     Size  Location     Type
 10081 ;;		None
 10082 ;; Return value:  Size  Location     Type
 10083 ;;                  1    wreg      unsigned char 
 10084 ;; Registers used:
 10085 ;;		wreg, status,2, status,0
 10086 ;; Tracked objects:
 10087 ;;		On entry : 0/0
 10088 ;;		On exit  : 0/0
 10089 ;;		Unchanged: 0/0
 10090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10091 ;;      Params:         5       0       0       0       0       0       0
 10092 ;;      Locals:         0       0       0       0       0       0       0
 10093 ;;      Temps:          4       0       0       0       0       0       0
 10094 ;;      Totals:         9       0       0       0       0       0       0
 10095 ;;Total ram usage:        9 bytes
 10096 ;; Hardware stack levels used:    1
 10097 ;; Hardware stack levels required when called:    3
 10098 ;; This function calls:
 10099 ;;		Nothing
 10100 ;; This function is called by:
 10101 ;;		_FlashReadCondition
 10102 ;;		_SWSPI_send_word
 10103 ;;		_StoreIntInEeprom
 10104 ;; This function uses a non-reentrant model
 10105 ;;
 10106                           
 10107                           	psect	text68
 10108  002A36                     __ptext68:
 10109                           	opt stack 0
 10110  002A36                     _make8:
 10111                           	opt stack 23
 10112                           
 10113                           ;SystemCommon.c: 60: switch(dataLocation)
 10114                           
 10115                           ;incstack = 0
 10116  002A36  D01F               	goto	l1205
 10117  002A38                     
 10118                           ;SystemCommon.c: 63: return (data & 0x000000ff);
 10119  002A38  5018               	movf	make8@data,w,c
 10120  002A3A  0012               	return	
 10121  002A3C                     
 10122                           ;SystemCommon.c: 66: return (data & 0x0000ff00) >> 8;
 10123  002A3C  5019               	movf	make8@data+1,w,c
 10124  002A3E  0012               	return	
 10125  002A40                     
 10126                           ;SystemCommon.c: 69: return (data & 0x00ff0000) >> 16;
 10127  002A40  501A               	movf	make8@data+2,w,c
 10128  002A42  0012               	return	
 10129  002A44                     
 10130                           ;SystemCommon.c: 72: return (data & 0xff000000) >> 24;
 10131  002A44  0E00               	movlw	0
 10132  002A46  1418               	andwf	make8@data,w,c
 10133  002A48  6E1D               	movwf	??_make8& (0+255),c
 10134  002A4A  0E00               	movlw	0
 10135  002A4C  1419               	andwf	make8@data+1,w,c
 10136  002A4E  6E1E               	movwf	(??_make8+1)& (0+255),c
 10137  002A50  0E00               	movlw	0
 10138  002A52  141A               	andwf	make8@data+2,w,c
 10139  002A54  6E1F               	movwf	(??_make8+2)& (0+255),c
 10140  002A56  0EFF               	movlw	255
 10141  002A58  141B               	andwf	make8@data+3,w,c
 10142  002A5A  6E20               	movwf	(??_make8+3)& (0+255),c
 10143  002A5C  0E19               	movlw	25
 10144  002A5E  D005               	goto	u6210
 10145  002A60                     u6215:
 10146  002A60  90D8               	bcf	status,0,c
 10147  002A62  3220               	rrcf	??_make8+3,f,c
 10148  002A64  321F               	rrcf	??_make8+2,f,c
 10149  002A66  321E               	rrcf	??_make8+1,f,c
 10150  002A68  321D               	rrcf	??_make8,f,c
 10151  002A6A                     u6210:
 10152  002A6A  2EE8               	decfsz	wreg,f,c
 10153  002A6C  D7F9               	goto	u6215
 10154  002A6E  501D               	movf	??_make8,w,c
 10155  002A70  0012               	return	
 10156  002A72                     
 10157                           ;SystemCommon.c: 75: return (0);
 10158  002A72  0E00               	movlw	0
 10159                           
 10160                           ;SystemCommon.c: 76: }
 10161  002A74  0012               	return	
 10162  002A76                     l1205:
 10163  002A76  501C               	movf	make8@dataLocation,w,c
 10164                           
 10165                           ; Switch size 1, requested type "space"
 10166                           ; Number of cases is 4, Range of values is 0 to 3
 10167                           ; switch strategies available:
 10168                           ; Name         Instructions Cycles
 10169                           ; simple_byte           13     7 (average)
 10170                           ;	Chosen strategy is simple_byte
 10171  002A78  0A00               	xorlw	0	; case 0
 10172  002A7A  B4D8               	btfsc	status,2,c
 10173  002A7C  D7DD               	goto	l1206
 10174  002A7E  0A01               	xorlw	1	; case 1
 10175  002A80  B4D8               	btfsc	status,2,c
 10176  002A82  D7DC               	goto	l1208
 10177  002A84  0A03               	xorlw	3	; case 2
 10178  002A86  B4D8               	btfsc	status,2,c
 10179  002A88  D7DB               	goto	l1209
 10180  002A8A  0A01               	xorlw	1	; case 3
 10181  002A8C  B4D8               	btfsc	status,2,c
 10182  002A8E  D7DA               	goto	l1210
 10183  002A90  D7F0               	goto	l1211
 10184  002A92                     __end_of_make8:
 10185                           	opt stack 0
 10186                           tosu	equ	0xFFF
 10187                           tosh	equ	0xFFE
 10188                           tosl	equ	0xFFD
 10189                           pclath	equ	0xFFA
 10190                           tblptru	equ	0xFF8
 10191                           tblptrh	equ	0xFF7
 10192                           tblptrl	equ	0xFF6
 10193                           tablat	equ	0xFF5
 10194                           prodh	equ	0xFF4
 10195                           prodl	equ	0xFF3
 10196                           intcon	equ	0xFF2
 10197                           intcon2	equ	0xFF1
 10198                           postinc0	equ	0xFEE
 10199                           wreg	equ	0xFE8
 10200                           indf1	equ	0xFE7
 10201                           postdec1	equ	0xFE5
 10202                           fsr1h	equ	0xFE2
 10203                           fsr1l	equ	0xFE1
 10204                           indf2	equ	0xFDF
 10205                           postinc2	equ	0xFDE
 10206                           postdec2	equ	0xFDD
 10207                           fsr2h	equ	0xFDA
 10208                           fsr2l	equ	0xFD9
 10209                           status	equ	0xFD8
 10210                           
 10211 ;; *************** function _SwSpi_Set_Synth_Le_Pin *****************
 10212 ;; Defined at:
 10213 ;;		line 232 in file "SwSpiApp.c"
 10214 ;; Parameters:    Size  Location     Type
 10215 ;;  phrType         1    wreg     enum E7547
 10216 ;;  cPinMode        1   23[COMRAM] unsigned char 
 10217 ;; Auto vars:     Size  Location     Type
 10218 ;;  phrType         1   24[COMRAM] enum E7547
 10219 ;; Return value:  Size  Location     Type
 10220 ;;                  1    wreg      void 
 10221 ;; Registers used:
 10222 ;;		wreg, status,2, status,0
 10223 ;; Tracked objects:
 10224 ;;		On entry : 0/0
 10225 ;;		On exit  : 0/0
 10226 ;;		Unchanged: 0/0
 10227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10228 ;;      Params:         1       0       0       0       0       0       0
 10229 ;;      Locals:         1       0       0       0       0       0       0
 10230 ;;      Temps:          0       0       0       0       0       0       0
 10231 ;;      Totals:         2       0       0       0       0       0       0
 10232 ;;Total ram usage:        2 bytes
 10233 ;; Hardware stack levels used:    1
 10234 ;; Hardware stack levels required when called:    3
 10235 ;; This function calls:
 10236 ;;		Nothing
 10237 ;; This function is called by:
 10238 ;;		_SWSPI_send_word
 10239 ;; This function uses a non-reentrant model
 10240 ;;
 10241                           
 10242                           	psect	text69
 10243  0031B4                     __ptext69:
 10244                           	opt stack 0
 10245  0031B4                     _SwSpi_Set_Synth_Le_Pin:
 10246                           	opt stack 23
 10247                           
 10248                           ;incstack = 0
 10249                           ;SwSpi_Set_Synth_Le_Pin@phrType stored from wreg
 10250  0031B4  6E19               	movwf	SwSpi_Set_Synth_Le_Pin@phrType,c
 10251                           
 10252                           ;SwSpiApp.c: 234: switch(phrType)
 10253  0031B6  D014               	goto	l616
 10254  0031B8                     
 10255                           ;SwSpiApp.c: 237: if(cPinMode == 1)
 10256  0031B8  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10257  0031BA  A4D8               	btfss	status,2,c
 10258  0031BC  D002               	goto	l618
 10259                           
 10260                           ;SwSpiApp.c: 238: {
 10261                           ;SwSpiApp.c: 239: do { LATCbits.LATC2 = 1; } while(0);
 10262  0031BE  848B               	bsf	3979,2,c	;volatile
 10263                           
 10264                           ;SwSpiApp.c: 240: }
 10265  0031C0  0012               	return	
 10266  0031C2                     l618:
 10267                           
 10268                           ;SwSpiApp.c: 241: else if(cPinMode == 0)
 10269  0031C2  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10270  0031C4  A4D8               	btfss	status,2,c
 10271  0031C6  0012               	return	
 10272                           
 10273                           ;SwSpiApp.c: 242: {
 10274                           ;SwSpiApp.c: 243: do { LATCbits.LATC2 = 0; } while(0);
 10275  0031C8  948B               	bcf	3979,2,c	;volatile
 10276                           
 10277                           ;SwSpiApp.c: 244: }
 10278                           ;SwSpiApp.c: 245: break;
 10279  0031CA  0012               	return	
 10280  0031CC                     
 10281                           ;SwSpiApp.c: 248: if(cPinMode == 1)
 10282  0031CC  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10283  0031CE  A4D8               	btfss	status,2,c
 10284  0031D0  D002               	goto	l627
 10285                           
 10286                           ;SwSpiApp.c: 249: {
 10287                           ;SwSpiApp.c: 250: do { LATDbits.LATD3 = 1; } while(0);
 10288  0031D2  868C               	bsf	3980,3,c	;volatile
 10289                           
 10290                           ;SwSpiApp.c: 251: }
 10291  0031D4  0012               	return	
 10292  0031D6                     l627:
 10293                           
 10294                           ;SwSpiApp.c: 252: else if(cPinMode == 0)
 10295  0031D6  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10296  0031D8  A4D8               	btfss	status,2,c
 10297  0031DA  0012               	return	
 10298                           
 10299                           ;SwSpiApp.c: 253: {
 10300                           ;SwSpiApp.c: 254: do { LATDbits.LATD3 = 0; } while(0);
 10301  0031DC  968C               	bcf	3980,3,c	;volatile
 10302                           
 10303                           ;SwSpiApp.c: 257: }
 10304                           
 10305                           ;SwSpiApp.c: 255: }
 10306                           ;SwSpiApp.c: 256: break;
 10307  0031DE  0012               	return	
 10308  0031E0                     l616:
 10309  0031E0  5019               	movf	SwSpi_Set_Synth_Le_Pin@phrType,w,c
 10310                           
 10311                           ; Switch size 1, requested type "space"
 10312                           ; Number of cases is 2, Range of values is 0 to 1
 10313                           ; switch strategies available:
 10314                           ; Name         Instructions Cycles
 10315                           ; simple_byte            7     4 (average)
 10316                           ;	Chosen strategy is simple_byte
 10317  0031E2  0A00               	xorlw	0	; case 0
 10318  0031E4  B4D8               	btfsc	status,2,c
 10319  0031E6  D7E8               	goto	l617
 10320  0031E8  0A01               	xorlw	1	; case 1
 10321  0031EA  A4D8               	btfss	status,2,c
 10322  0031EC  0012               	return	
 10323  0031EE  D7EE               	goto	l626
 10324  0031F0                     __end_of_SwSpi_Set_Synth_Le_Pin:
 10325                           	opt stack 0
 10326                           tosu	equ	0xFFF
 10327                           tosh	equ	0xFFE
 10328                           tosl	equ	0xFFD
 10329                           pclath	equ	0xFFA
 10330                           tblptru	equ	0xFF8
 10331                           tblptrh	equ	0xFF7
 10332                           tblptrl	equ	0xFF6
 10333                           tablat	equ	0xFF5
 10334                           prodh	equ	0xFF4
 10335                           prodl	equ	0xFF3
 10336                           intcon	equ	0xFF2
 10337                           intcon2	equ	0xFF1
 10338                           postinc0	equ	0xFEE
 10339                           wreg	equ	0xFE8
 10340                           indf1	equ	0xFE7
 10341                           postdec1	equ	0xFE5
 10342                           fsr1h	equ	0xFE2
 10343                           fsr1l	equ	0xFE1
 10344                           indf2	equ	0xFDF
 10345                           postinc2	equ	0xFDE
 10346                           postdec2	equ	0xFDD
 10347                           fsr2h	equ	0xFDA
 10348                           fsr2l	equ	0xFD9
 10349                           status	equ	0xFD8
 10350                           
 10351 ;; *************** function _SwSpi_Set_Dac_Sync_Pin *****************
 10352 ;; Defined at:
 10353 ;;		line 260 in file "SwSpiApp.c"
 10354 ;; Parameters:    Size  Location     Type
 10355 ;;  cPinMode        1    wreg     unsigned char 
 10356 ;; Auto vars:     Size  Location     Type
 10357 ;;  cPinMode        1   23[COMRAM] unsigned char 
 10358 ;; Return value:  Size  Location     Type
 10359 ;;                  1    wreg      void 
 10360 ;; Registers used:
 10361 ;;		wreg, status,2, status,0
 10362 ;; Tracked objects:
 10363 ;;		On entry : 0/0
 10364 ;;		On exit  : 0/0
 10365 ;;		Unchanged: 0/0
 10366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10367 ;;      Params:         0       0       0       0       0       0       0
 10368 ;;      Locals:         1       0       0       0       0       0       0
 10369 ;;      Temps:          0       0       0       0       0       0       0
 10370 ;;      Totals:         1       0       0       0       0       0       0
 10371 ;;Total ram usage:        1 bytes
 10372 ;; Hardware stack levels used:    1
 10373 ;; Hardware stack levels required when called:    3
 10374 ;; This function calls:
 10375 ;;		Nothing
 10376 ;; This function is called by:
 10377 ;;		_SWSPI_send_word
 10378 ;; This function uses a non-reentrant model
 10379 ;;
 10380                           
 10381                           	psect	text70
 10382  003636                     __ptext70:
 10383                           	opt stack 0
 10384  003636                     _SwSpi_Set_Dac_Sync_Pin:
 10385                           	opt stack 23
 10386                           
 10387                           ;incstack = 0
 10388                           ;SwSpi_Set_Dac_Sync_Pin@cPinMode stored from wreg
 10389  003636  6E18               	movwf	SwSpi_Set_Dac_Sync_Pin@cPinMode,c
 10390                           
 10391                           ;SwSpiApp.c: 262: switch(cPinMode)
 10392  003638  D004               	goto	l637
 10393  00363A                     
 10394                           ;SwSpiApp.c: 265: do { LATAbits.LATA2 = 0; } while(0);
 10395  00363A  9489               	bcf	3977,2,c	;volatile
 10396                           
 10397                           ;SwSpiApp.c: 266: break;
 10398  00363C  0012               	return	
 10399  00363E                     
 10400                           ;SwSpiApp.c: 269: do { LATAbits.LATA2 = 1; } while(0);
 10401  00363E  8489               	bsf	3977,2,c	;volatile
 10402                           
 10403                           ;SwSpiApp.c: 271: }
 10404                           
 10405                           ;SwSpiApp.c: 270: break;
 10406  003640  0012               	return	
 10407  003642                     l637:
 10408  003642  5018               	movf	SwSpi_Set_Dac_Sync_Pin@cPinMode,w,c
 10409                           
 10410                           ; Switch size 1, requested type "space"
 10411                           ; Number of cases is 2, Range of values is 0 to 1
 10412                           ; switch strategies available:
 10413                           ; Name         Instructions Cycles
 10414                           ; simple_byte            7     4 (average)
 10415                           ;	Chosen strategy is simple_byte
 10416  003644  0A00               	xorlw	0	; case 0
 10417  003646  B4D8               	btfsc	status,2,c
 10418  003648  D7F8               	goto	l638
 10419  00364A  0A01               	xorlw	1	; case 1
 10420  00364C  A4D8               	btfss	status,2,c
 10421  00364E  0012               	return	
 10422  003650  D7F6               	goto	l642
 10423  003652                     __end_of_SwSpi_Set_Dac_Sync_Pin:
 10424                           	opt stack 0
 10425                           tosu	equ	0xFFF
 10426                           tosh	equ	0xFFE
 10427                           tosl	equ	0xFFD
 10428                           pclath	equ	0xFFA
 10429                           tblptru	equ	0xFF8
 10430                           tblptrh	equ	0xFF7
 10431                           tblptrl	equ	0xFF6
 10432                           tablat	equ	0xFF5
 10433                           prodh	equ	0xFF4
 10434                           prodl	equ	0xFF3
 10435                           intcon	equ	0xFF2
 10436                           intcon2	equ	0xFF1
 10437                           postinc0	equ	0xFEE
 10438                           wreg	equ	0xFE8
 10439                           indf1	equ	0xFE7
 10440                           postdec1	equ	0xFE5
 10441                           fsr1h	equ	0xFE2
 10442                           fsr1l	equ	0xFE1
 10443                           indf2	equ	0xFDF
 10444                           postinc2	equ	0xFDE
 10445                           postdec2	equ	0xFDD
 10446                           fsr2h	equ	0xFDA
 10447                           fsr2l	equ	0xFD9
 10448                           status	equ	0xFD8
 10449                           
 10450 ;; *************** function _SWSPI_Synth_send_bits *****************
 10451 ;; Defined at:
 10452 ;;		line 67 in file "SwSpiApp.c"
 10453 ;; Parameters:    Size  Location     Type
 10454 ;;  phrType         1    wreg     enum E7547
 10455 ;;  data            4   33[COMRAM] unsigned long 
 10456 ;; Auto vars:     Size  Location     Type
 10457 ;;  phrType         1   37[BANK0 ] enum E7547
 10458 ;;  bitArray       32    0[BANK0 ] unsigned char [32]
 10459 ;;  mask            4   32[BANK0 ] unsigned long 
 10460 ;;  count           1   36[BANK0 ] unsigned char 
 10461 ;; Return value:  Size  Location     Type
 10462 ;;                  1    wreg      void 
 10463 ;; Registers used:
 10464 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10465 ;; Tracked objects:
 10466 ;;		On entry : 0/0
 10467 ;;		On exit  : 0/0
 10468 ;;		Unchanged: 0/0
 10469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10470 ;;      Params:         4       0       0       0       0       0       0
 10471 ;;      Locals:         0      38       0       0       0       0       0
 10472 ;;      Temps:          0       0       0       0       0       0       0
 10473 ;;      Totals:         4      38       0       0       0       0       0
 10474 ;;Total ram usage:       42 bytes
 10475 ;; Hardware stack levels used:    1
 10476 ;; Hardware stack levels required when called:    5
 10477 ;; This function calls:
 10478 ;;		_Make32bitsArray
 10479 ;;		_SwSpi_Clk_Pin
 10480 ;;		_SwSpi_Data_Pin
 10481 ;;		_ZeroBitsArray
 10482 ;; This function is called by:
 10483 ;;		_SWSPI_send_word
 10484 ;; This function uses a non-reentrant model
 10485 ;;
 10486                           
 10487                           	psect	text71
 10488  001FB8                     __ptext71:
 10489                           	opt stack 0
 10490  001FB8                     _SWSPI_Synth_send_bits:
 10491                           	opt stack 21
 10492                           
 10493                           ;incstack = 0
 10494                           ;SWSPI_Synth_send_bits@phrType stored from wreg
 10495  001FB8  0100               	movlb	0	; () banked
 10496  001FBA  6F85               	movwf	SWSPI_Synth_send_bits@phrType& (0+255),b
 10497                           
 10498                           ;SwSpiApp.c: 69: uint8_t count;
 10499                           ;SwSpiApp.c: 70: uint32_t mask = 0x1;
 10500  001FBC  0E01               	movlw	1
 10501  001FBE  0100               	movlb	0	; () banked
 10502  001FC0  6F80               	movwf	SWSPI_Synth_send_bits@mask& (0+255),b
 10503  001FC2  0E00               	movlw	0
 10504  001FC4  6F81               	movwf	(SWSPI_Synth_send_bits@mask+1)& (0+255),b
 10505  001FC6  0E00               	movlw	0
 10506  001FC8  6F82               	movwf	(SWSPI_Synth_send_bits@mask+2)& (0+255),b
 10507  001FCA  0E00               	movlw	0
 10508  001FCC  6F83               	movwf	(SWSPI_Synth_send_bits@mask+3)& (0+255),b
 10509                           
 10510                           ; BSR set to: 0
 10511                           ;SwSpiApp.c: 72: bool bitArray[32];
 10512                           ;SwSpiApp.c: 73: ZeroBitsArray(bitArray);
 10513  001FCE  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 10514  001FD0  6E20               	movwf	ZeroBitsArray@array,c
 10515  001FD2  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 10516  001FD4  6E21               	movwf	ZeroBitsArray@array+1,c
 10517  001FD6  EC0C  F01B         	call	_ZeroBitsArray	;wreg free
 10518                           
 10519                           ;SwSpiApp.c: 75: Make32bitsArray(bitArray, data);
 10520  001FDA  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 10521  001FDC  6E18               	movwf	Make32bitsArray@array,c
 10522  001FDE  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 10523  001FE0  6E19               	movwf	Make32bitsArray@array+1,c
 10524  001FE2  C022  F01A         	movff	SWSPI_Synth_send_bits@data,Make32bitsArray@data
 10525  001FE6  C023  F01B         	movff	SWSPI_Synth_send_bits@data+1,Make32bitsArray@data+1
 10526  001FEA  C024  F01C         	movff	SWSPI_Synth_send_bits@data+2,Make32bitsArray@data+2
 10527  001FEE  C025  F01D         	movff	SWSPI_Synth_send_bits@data+3,Make32bitsArray@data+3
 10528  001FF2  ECA3  F015         	call	_Make32bitsArray	;wreg free
 10529                           
 10530                           ;SwSpiApp.c: 77: for (count = 0; count <= 31 ; count++)
 10531  001FF6  0E00               	movlw	0
 10532  001FF8  0100               	movlb	0	; () banked
 10533  001FFA  6F84               	movwf	SWSPI_Synth_send_bits@count& (0+255),b
 10534  001FFC                     l6633:
 10535                           
 10536                           ; BSR set to: 0
 10537  001FFC  0E1F               	movlw	31
 10538  001FFE  6584               	cpfsgt	SWSPI_Synth_send_bits@count& (0+255),b
 10539  002000  D001               	goto	l522
 10540  002002  D026               	goto	u6280
 10541  002004                     l522:
 10542                           
 10543                           ; BSR set to: 0
 10544                           ;SwSpiApp.c: 78: {
 10545                           ;SwSpiApp.c: 80: SwSpi_Clk_Pin(phrType, 0);
 10546                           
 10547                           ; BSR set to: 0
 10548  002004  0E00               	movlw	0
 10549  002006  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 10550  002008  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 10551  00200A  EC51  F016         	call	_SwSpi_Clk_Pin
 10552                           
 10553                           ;SwSpiApp.c: 82: if (bitArray[count])
 10554  00200E  0100               	movlb	0	; () banked
 10555  002010  5184               	movf	SWSPI_Synth_send_bits@count& (0+255),w,b
 10556  002012  0D01               	mullw	1
 10557  002014  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 10558  002016  24F3               	addwf	prodl,w,c
 10559  002018  6ED9               	movwf	fsr2l,c
 10560  00201A  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 10561  00201C  20F4               	addwfc	prodh,w,c
 10562  00201E  6EDA               	movwf	fsr2h,c
 10563  002020  50DF               	movf	indf2,w,c
 10564  002022  B4D8               	btfsc	status,2,c
 10565  002024  D006               	goto	l524
 10566                           
 10567                           ; BSR set to: 0
 10568                           ;SwSpiApp.c: 83: {
 10569                           ;SwSpiApp.c: 84: SwSpi_Data_Pin(phrType, 1);
 10570  002026  0E01               	movlw	1
 10571  002028  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 10572  00202A  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 10573  00202C  EC26  F016         	call	_SwSpi_Data_Pin
 10574                           
 10575                           ;SwSpiApp.c: 85: }
 10576  002030  D006               	goto	l525
 10577  002032                     l524:
 10578                           
 10579                           ;SwSpiApp.c: 86: else
 10580                           ;SwSpiApp.c: 87: {
 10581                           ;SwSpiApp.c: 88: SwSpi_Data_Pin(phrType, 0);
 10582  002032  0E00               	movlw	0
 10583  002034  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 10584  002036  0100               	movlb	0	; () banked
 10585  002038  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 10586  00203A  EC26  F016         	call	_SwSpi_Data_Pin
 10587  00203E                     l525:
 10588                           
 10589                           ;SwSpiApp.c: 89: }
 10590                           ;SwSpiApp.c: 91: SwSpi_Clk_Pin(phrType, 1);
 10591  00203E  0E01               	movlw	1
 10592  002040  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 10593  002042  0100               	movlb	0	; () banked
 10594  002044  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 10595  002046  EC51  F016         	call	_SwSpi_Clk_Pin
 10596  00204A  0100               	movlb	0	; () banked
 10597  00204C  2B84               	incf	SWSPI_Synth_send_bits@count& (0+255),f,b
 10598  00204E  D7D6               	goto	l6633
 10599  002050                     u6280:
 10600                           
 10601                           ; BSR set to: 0
 10602                           ;SwSpiApp.c: 92: }
 10603                           ;SwSpiApp.c: 94: _delay((unsigned long)((50)*(8000000/4000000.0)));
 10604                           
 10605                           ; BSR set to: 0
 10606  002050  0E21               	movlw	33
 10607  002052                     u8137:
 10608  002052  2EE8               	decfsz	wreg,f,c
 10609  002054  D7FE               	bra	u8137
 10610  002056  F000               	nop	
 10611                           
 10612                           ;SwSpiApp.c: 95: SwSpi_Data_Pin(phrType, 0);
 10613  002058  0E00               	movlw	0
 10614  00205A  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 10615  00205C  0100               	movlb	0	; () banked
 10616  00205E  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 10617  002060  EC26  F016         	call	_SwSpi_Data_Pin
 10618                           
 10619                           ;SwSpiApp.c: 96: SwSpi_Clk_Pin(phrType, 0);
 10620  002064  0E00               	movlw	0
 10621  002066  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 10622  002068  0100               	movlb	0	; () banked
 10623  00206A  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 10624  00206C  EC51  F016         	call	_SwSpi_Clk_Pin
 10625  002070  0012               	return		;funcret
 10626  002072                     __end_of_SWSPI_Synth_send_bits:
 10627                           	opt stack 0
 10628                           tosu	equ	0xFFF
 10629                           tosh	equ	0xFFE
 10630                           tosl	equ	0xFFD
 10631                           pclath	equ	0xFFA
 10632                           tblptru	equ	0xFF8
 10633                           tblptrh	equ	0xFF7
 10634                           tblptrl	equ	0xFF6
 10635                           tablat	equ	0xFF5
 10636                           prodh	equ	0xFF4
 10637                           prodl	equ	0xFF3
 10638                           intcon	equ	0xFF2
 10639                           intcon2	equ	0xFF1
 10640                           postinc0	equ	0xFEE
 10641                           wreg	equ	0xFE8
 10642                           indf1	equ	0xFE7
 10643                           postdec1	equ	0xFE5
 10644                           fsr1h	equ	0xFE2
 10645                           fsr1l	equ	0xFE1
 10646                           indf2	equ	0xFDF
 10647                           postinc2	equ	0xFDE
 10648                           postdec2	equ	0xFDD
 10649                           fsr2h	equ	0xFDA
 10650                           fsr2l	equ	0xFD9
 10651                           status	equ	0xFD8
 10652                           
 10653 ;; *************** function _ZeroBitsArray *****************
 10654 ;; Defined at:
 10655 ;;		line 29 in file "SystemCommon.c"
 10656 ;; Parameters:    Size  Location     Type
 10657 ;;  array           2   31[COMRAM] PTR unsigned char 
 10658 ;;		 -> SWSPI_Synth_send_bits@bitArray(32), 
 10659 ;; Auto vars:     Size  Location     Type
 10660 ;;		None
 10661 ;; Return value:  Size  Location     Type
 10662 ;;                  1    wreg      void 
 10663 ;; Registers used:
 10664 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10665 ;; Tracked objects:
 10666 ;;		On entry : 0/0
 10667 ;;		On exit  : 0/0
 10668 ;;		Unchanged: 0/0
 10669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10670 ;;      Params:         2       0       0       0       0       0       0
 10671 ;;      Locals:         0       0       0       0       0       0       0
 10672 ;;      Temps:          0       0       0       0       0       0       0
 10673 ;;      Totals:         2       0       0       0       0       0       0
 10674 ;;Total ram usage:        2 bytes
 10675 ;; Hardware stack levels used:    1
 10676 ;; Hardware stack levels required when called:    4
 10677 ;; This function calls:
 10678 ;;		_memset
 10679 ;; This function is called by:
 10680 ;;		_SWSPI_Synth_send_bits
 10681 ;; This function uses a non-reentrant model
 10682 ;;
 10683                           
 10684                           	psect	text72
 10685  003618                     __ptext72:
 10686                           	opt stack 0
 10687  003618                     _ZeroBitsArray:
 10688                           	opt stack 21
 10689                           
 10690                           ;SystemCommon.c: 31: memset(array, 0x0, 32);
 10691                           
 10692                           ;incstack = 0
 10693  003618  C020  F018         	movff	ZeroBitsArray@array,memset@p1
 10694  00361C  C021  F019         	movff	ZeroBitsArray@array+1,memset@p1+1
 10695  003620  0E00               	movlw	0
 10696  003622  6E1B               	movwf	memset@c+1,c
 10697  003624  0E00               	movlw	0
 10698  003626  6E1A               	movwf	memset@c,c
 10699  003628  0E00               	movlw	0
 10700  00362A  6E1D               	movwf	memset@n+1,c
 10701  00362C  0E20               	movlw	32
 10702  00362E  6E1C               	movwf	memset@n,c
 10703  003630  EC33  F01A         	call	_memset	;wreg free
 10704  003634  0012               	return		;funcret
 10705  003636                     __end_of_ZeroBitsArray:
 10706                           	opt stack 0
 10707                           tosu	equ	0xFFF
 10708                           tosh	equ	0xFFE
 10709                           tosl	equ	0xFFD
 10710                           pclath	equ	0xFFA
 10711                           tblptru	equ	0xFF8
 10712                           tblptrh	equ	0xFF7
 10713                           tblptrl	equ	0xFF6
 10714                           tablat	equ	0xFF5
 10715                           prodh	equ	0xFF4
 10716                           prodl	equ	0xFF3
 10717                           intcon	equ	0xFF2
 10718                           intcon2	equ	0xFF1
 10719                           postinc0	equ	0xFEE
 10720                           wreg	equ	0xFE8
 10721                           indf1	equ	0xFE7
 10722                           postdec1	equ	0xFE5
 10723                           fsr1h	equ	0xFE2
 10724                           fsr1l	equ	0xFE1
 10725                           indf2	equ	0xFDF
 10726                           postinc2	equ	0xFDE
 10727                           postdec2	equ	0xFDD
 10728                           fsr2h	equ	0xFDA
 10729                           fsr2l	equ	0xFD9
 10730                           status	equ	0xFD8
 10731                           
 10732 ;; *************** function _memset *****************
 10733 ;; Defined at:
 10734 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 10735 ;; Parameters:    Size  Location     Type
 10736 ;;  p1              2   23[COMRAM] PTR void 
 10737 ;;		 -> GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dataRegArr(9), SWSPI_Synth_send_bits@bit
      +Array(32), 
 10738 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), 
 10739 ;;		 -> rxMsgData(20), rxMsgQueue(20), 
 10740 ;;  c               2   25[COMRAM] int 
 10741 ;;  n               2   27[COMRAM] unsigned int 
 10742 ;; Auto vars:     Size  Location     Type
 10743 ;;  p               2   29[COMRAM] PTR unsigned char 
 10744 ;;		 -> GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dataRegArr(9), SWSPI_Synth_send_bits@bit
      +Array(32), 
 10745 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), 
 10746 ;;		 -> rxMsgData(20), rxMsgQueue(20), 
 10747 ;; Return value:  Size  Location     Type
 10748 ;;                  2   23[COMRAM] PTR void 
 10749 ;; Registers used:
 10750 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10751 ;; Tracked objects:
 10752 ;;		On entry : 0/0
 10753 ;;		On exit  : 0/0
 10754 ;;		Unchanged: 0/0
 10755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10756 ;;      Params:         6       0       0       0       0       0       0
 10757 ;;      Locals:         2       0       0       0       0       0       0
 10758 ;;      Temps:          0       0       0       0       0       0       0
 10759 ;;      Totals:         8       0       0       0       0       0       0
 10760 ;;Total ram usage:        8 bytes
 10761 ;; Hardware stack levels used:    1
 10762 ;; Hardware stack levels required when called:    3
 10763 ;; This function calls:
 10764 ;;		Nothing
 10765 ;; This function is called by:
 10766 ;;		_ZeroArray
 10767 ;;		_ZeroBitsArray
 10768 ;; This function uses a non-reentrant model
 10769 ;;
 10770                           
 10771                           	psect	text73
 10772  003466                     __ptext73:
 10773                           	opt stack 0
 10774  003466                     _memset:
 10775                           	opt stack 25
 10776                           
 10777                           ;incstack = 0
 10778  003466  C018  F01E         	movff	memset@p1,memset@p
 10779  00346A  C019  F01F         	movff	memset@p1+1,memset@p+1
 10780  00346E  D008               	goto	l1802
 10781  003470                     l6339:
 10782  003470  C01E  FFD9         	movff	memset@p,fsr2l
 10783  003474  C01F  FFDA         	movff	memset@p+1,fsr2h
 10784  003478  C01A  FFDF         	movff	memset@c,indf2
 10785  00347C  4A1E               	infsnz	memset@p,f,c
 10786  00347E  2A1F               	incf	memset@p+1,f,c
 10787  003480                     l1802:
 10788  003480  061C               	decf	memset@n,f,c
 10789  003482  A0D8               	btfss	status,0,c
 10790  003484  061D               	decf	memset@n+1,f,c
 10791  003486  281C               	incf	memset@n,w,c
 10792  003488  E1F3               	bnz	l6339
 10793  00348A  281D               	incf	memset@n+1,w,c
 10794  00348C  B4D8               	btfsc	status,2,c
 10795  00348E  0012               	return	
 10796  003490  D7EF               	goto	l1803
 10797  003492                     __end_of_memset:
 10798                           	opt stack 0
 10799                           tosu	equ	0xFFF
 10800                           tosh	equ	0xFFE
 10801                           tosl	equ	0xFFD
 10802                           pclath	equ	0xFFA
 10803                           tblptru	equ	0xFF8
 10804                           tblptrh	equ	0xFF7
 10805                           tblptrl	equ	0xFF6
 10806                           tablat	equ	0xFF5
 10807                           prodh	equ	0xFF4
 10808                           prodl	equ	0xFF3
 10809                           intcon	equ	0xFF2
 10810                           intcon2	equ	0xFF1
 10811                           postinc0	equ	0xFEE
 10812                           wreg	equ	0xFE8
 10813                           indf1	equ	0xFE7
 10814                           postdec1	equ	0xFE5
 10815                           fsr1h	equ	0xFE2
 10816                           fsr1l	equ	0xFE1
 10817                           indf2	equ	0xFDF
 10818                           postinc2	equ	0xFDE
 10819                           postdec2	equ	0xFDD
 10820                           fsr2h	equ	0xFDA
 10821                           fsr2l	equ	0xFD9
 10822                           status	equ	0xFD8
 10823                           
 10824 ;; *************** function _Make32bitsArray *****************
 10825 ;; Defined at:
 10826 ;;		line 79 in file "SystemCommon.c"
 10827 ;; Parameters:    Size  Location     Type
 10828 ;;  array           2   23[COMRAM] PTR unsigned char 
 10829 ;;		 -> SWSPI_Synth_send_bits@bitArray(32), 
 10830 ;;  data            4   25[COMRAM] unsigned long 
 10831 ;; Auto vars:     Size  Location     Type
 10832 ;;  idx             2   31[COMRAM] int 
 10833 ;; Return value:  Size  Location     Type
 10834 ;;                  1    wreg      void 
 10835 ;; Registers used:
 10836 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10837 ;; Tracked objects:
 10838 ;;		On entry : 0/0
 10839 ;;		On exit  : 0/0
 10840 ;;		Unchanged: 0/0
 10841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10842 ;;      Params:         6       0       0       0       0       0       0
 10843 ;;      Locals:         2       0       0       0       0       0       0
 10844 ;;      Temps:          2       0       0       0       0       0       0
 10845 ;;      Totals:        10       0       0       0       0       0       0
 10846 ;;Total ram usage:       10 bytes
 10847 ;; Hardware stack levels used:    1
 10848 ;; Hardware stack levels required when called:    3
 10849 ;; This function calls:
 10850 ;;		Nothing
 10851 ;; This function is called by:
 10852 ;;		_SWSPI_Synth_send_bits
 10853 ;; This function uses a non-reentrant model
 10854 ;;
 10855                           
 10856                           	psect	text74
 10857  002B46                     __ptext74:
 10858                           	opt stack 0
 10859  002B46                     _Make32bitsArray:
 10860                           	opt stack 22
 10861                           
 10862                           ;SystemCommon.c: 81: for(int idx = 0; idx <= 32; idx++)
 10863                           
 10864                           ;incstack = 0
 10865  002B46  0E00               	movlw	0
 10866  002B48  6E21               	movwf	Make32bitsArray@idx+1,c
 10867  002B4A  0E00               	movlw	0
 10868  002B4C  6E20               	movwf	Make32bitsArray@idx,c
 10869  002B4E                     l6435:
 10870  002B4E  BE21               	btfsc	Make32bitsArray@idx+1,7,c
 10871  002B50  D006               	goto	l1215
 10872  002B52  5021               	movf	Make32bitsArray@idx+1,w,c
 10873  002B54  E123               	bnz	l1217
 10874  002B56  0E21               	movlw	33
 10875  002B58  5C20               	subwf	Make32bitsArray@idx,w,c
 10876  002B5A  B0D8               	btfsc	status,0,c
 10877  002B5C  0012               	return	
 10878  002B5E                     l1215:
 10879                           
 10880                           ;SystemCommon.c: 82: {
 10881                           ;SystemCommon.c: 83: array[32 - idx - 1] = data % 2;
 10882  002B5E  0E01               	movlw	1
 10883  002B60  2420               	addwf	Make32bitsArray@idx,w,c
 10884  002B62  6E1E               	movwf	??_Make32bitsArray& (0+255),c
 10885  002B64  0E00               	movlw	0
 10886  002B66  2021               	addwfc	Make32bitsArray@idx+1,w,c
 10887  002B68  6E1F               	movwf	(??_Make32bitsArray+1)& (0+255),c
 10888  002B6A  1E1E               	comf	??_Make32bitsArray,f,c
 10889  002B6C  1E1F               	comf	??_Make32bitsArray+1,f,c
 10890  002B6E  4A1E               	infsnz	??_Make32bitsArray,f,c
 10891  002B70  2A1F               	incf	??_Make32bitsArray+1,f,c
 10892  002B72  0E20               	movlw	32
 10893  002B74  261E               	addwf	??_Make32bitsArray,f,c
 10894  002B76  0E00               	movlw	0
 10895  002B78  221F               	addwfc	??_Make32bitsArray+1,f,c
 10896  002B7A  501E               	movf	??_Make32bitsArray,w,c
 10897  002B7C  2418               	addwf	Make32bitsArray@array,w,c
 10898  002B7E  6ED9               	movwf	fsr2l,c
 10899  002B80  501F               	movf	??_Make32bitsArray+1,w,c
 10900  002B82  2019               	addwfc	Make32bitsArray@array+1,w,c
 10901  002B84  6EDA               	movwf	fsr2h,c
 10902  002B86  501A               	movf	Make32bitsArray@data,w,c
 10903  002B88  0B01               	andlw	1
 10904  002B8A  6EDF               	movwf	indf2,c
 10905                           
 10906                           ;SystemCommon.c: 84: data /= 2;
 10907  002B8C  90D8               	bcf	status,0,c
 10908  002B8E  321D               	rrcf	Make32bitsArray@data+3,f,c
 10909  002B90  321C               	rrcf	Make32bitsArray@data+2,f,c
 10910  002B92  321B               	rrcf	Make32bitsArray@data+1,f,c
 10911  002B94  321A               	rrcf	Make32bitsArray@data,f,c
 10912  002B96  4A20               	infsnz	Make32bitsArray@idx,f,c
 10913  002B98  2A21               	incf	Make32bitsArray@idx+1,f,c
 10914  002B9A  D7D9               	goto	l6435
 10915  002B9C                     l1217:
 10916  002B9C  0012               	return		;funcret
 10917  002B9E                     __end_of_Make32bitsArray:
 10918                           	opt stack 0
 10919                           tosu	equ	0xFFF
 10920                           tosh	equ	0xFFE
 10921                           tosl	equ	0xFFD
 10922                           pclath	equ	0xFFA
 10923                           tblptru	equ	0xFF8
 10924                           tblptrh	equ	0xFF7
 10925                           tblptrl	equ	0xFF6
 10926                           tablat	equ	0xFF5
 10927                           prodh	equ	0xFF4
 10928                           prodl	equ	0xFF3
 10929                           intcon	equ	0xFF2
 10930                           intcon2	equ	0xFF1
 10931                           postinc0	equ	0xFEE
 10932                           wreg	equ	0xFE8
 10933                           indf1	equ	0xFE7
 10934                           postdec1	equ	0xFE5
 10935                           fsr1h	equ	0xFE2
 10936                           fsr1l	equ	0xFE1
 10937                           indf2	equ	0xFDF
 10938                           postinc2	equ	0xFDE
 10939                           postdec2	equ	0xFDD
 10940                           fsr2h	equ	0xFDA
 10941                           fsr2l	equ	0xFD9
 10942                           status	equ	0xFD8
 10943                           
 10944 ;; *************** function _SWSPI_DAC_send_bits *****************
 10945 ;; Defined at:
 10946 ;;		line 43 in file "SwSpiApp.c"
 10947 ;; Parameters:    Size  Location     Type
 10948 ;;  phrType         1    wreg     enum E7547
 10949 ;;  data            1   25[COMRAM] unsigned char 
 10950 ;; Auto vars:     Size  Location     Type
 10951 ;;  phrType         1   27[COMRAM] enum E7547
 10952 ;;  count           1   26[COMRAM] unsigned char 
 10953 ;; Return value:  Size  Location     Type
 10954 ;;                  1    wreg      void 
 10955 ;; Registers used:
 10956 ;;		wreg, status,2, status,0, cstack
 10957 ;; Tracked objects:
 10958 ;;		On entry : 0/0
 10959 ;;		On exit  : 0/0
 10960 ;;		Unchanged: 0/0
 10961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10962 ;;      Params:         1       0       0       0       0       0       0
 10963 ;;      Locals:         2       0       0       0       0       0       0
 10964 ;;      Temps:          0       0       0       0       0       0       0
 10965 ;;      Totals:         3       0       0       0       0       0       0
 10966 ;;Total ram usage:        3 bytes
 10967 ;; Hardware stack levels used:    1
 10968 ;; Hardware stack levels required when called:    4
 10969 ;; This function calls:
 10970 ;;		_SwSpi_Clk_Pin
 10971 ;;		_SwSpi_Data_Pin
 10972 ;; This function is called by:
 10973 ;;		_SWSPI_send_word
 10974 ;; This function uses a non-reentrant model
 10975 ;;
 10976                           
 10977                           	psect	text75
 10978  002B9E                     __ptext75:
 10979                           	opt stack 0
 10980  002B9E                     _SWSPI_DAC_send_bits:
 10981                           	opt stack 22
 10982                           
 10983                           ;incstack = 0
 10984                           ;SWSPI_DAC_send_bits@phrType stored from wreg
 10985  002B9E  6E1C               	movwf	SWSPI_DAC_send_bits@phrType,c
 10986                           
 10987                           ;SwSpiApp.c: 45: uint8_t count;
 10988                           ;SwSpiApp.c: 46: for (count = 8; count ; count--, data <<= 1)
 10989  002BA0  0E08               	movlw	8
 10990  002BA2  6E1B               	movwf	SWSPI_DAC_send_bits@count,c
 10991  002BA4  D01A               	goto	l514
 10992  002BA6                     
 10993                           ;SwSpiApp.c: 47: {
 10994                           ;SwSpiApp.c: 48: SwSpi_Clk_Pin(phrType, 1);
 10995  002BA6  0E01               	movlw	1
 10996  002BA8  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 10997  002BAA  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 10998  002BAC  EC51  F016         	call	_SwSpi_Clk_Pin
 10999                           
 11000                           ;SwSpiApp.c: 50: if (data & 0X80)
 11001  002BB0  AE1A               	btfss	SWSPI_DAC_send_bits@data,7,c
 11002  002BB2  D006               	goto	l516
 11003                           
 11004                           ;SwSpiApp.c: 51: {
 11005                           ;SwSpiApp.c: 53: SwSpi_Data_Pin(phrType, 1);
 11006  002BB4  0E01               	movlw	1
 11007  002BB6  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 11008  002BB8  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11009  002BBA  EC26  F016         	call	_SwSpi_Data_Pin
 11010                           
 11011                           ;SwSpiApp.c: 54: }
 11012  002BBE  D005               	goto	l517
 11013  002BC0                     l516:
 11014                           
 11015                           ;SwSpiApp.c: 55: else
 11016                           ;SwSpiApp.c: 56: {
 11017                           ;SwSpiApp.c: 57: SwSpi_Data_Pin(phrType, 0);
 11018  002BC0  0E00               	movlw	0
 11019  002BC2  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 11020  002BC4  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11021  002BC6  EC26  F016         	call	_SwSpi_Data_Pin
 11022  002BCA                     l517:
 11023                           
 11024                           ;SwSpiApp.c: 58: }
 11025                           ;SwSpiApp.c: 60: SwSpi_Clk_Pin(phrType, 0);
 11026  002BCA  0E00               	movlw	0
 11027  002BCC  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 11028  002BCE  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11029  002BD0  EC51  F016         	call	_SwSpi_Clk_Pin
 11030  002BD4  061B               	decf	SWSPI_DAC_send_bits@count,f,c
 11031  002BD6  90D8               	bcf	status,0,c
 11032  002BD8  361A               	rlcf	SWSPI_DAC_send_bits@data,f,c
 11033  002BDA                     l514:
 11034  002BDA  501B               	movf	SWSPI_DAC_send_bits@count,w,c
 11035  002BDC  A4D8               	btfss	status,2,c
 11036  002BDE  D7E3               	goto	l515
 11037                           
 11038                           ;SwSpiApp.c: 61: }
 11039                           ;SwSpiApp.c: 63: SwSpi_Data_Pin(phrType, 0);
 11040  002BE0  0E00               	movlw	0
 11041  002BE2  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 11042  002BE4  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11043  002BE6  EC26  F016         	call	_SwSpi_Data_Pin
 11044                           
 11045                           ;SwSpiApp.c: 64: SwSpi_Clk_Pin(phrType, 0);
 11046  002BEA  0E00               	movlw	0
 11047  002BEC  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 11048  002BEE  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11049  002BF0  EC51  F016         	call	_SwSpi_Clk_Pin
 11050  002BF4  0012               	return		;funcret
 11051  002BF6                     __end_of_SWSPI_DAC_send_bits:
 11052                           	opt stack 0
 11053                           tosu	equ	0xFFF
 11054                           tosh	equ	0xFFE
 11055                           tosl	equ	0xFFD
 11056                           pclath	equ	0xFFA
 11057                           tblptru	equ	0xFF8
 11058                           tblptrh	equ	0xFF7
 11059                           tblptrl	equ	0xFF6
 11060                           tablat	equ	0xFF5
 11061                           prodh	equ	0xFF4
 11062                           prodl	equ	0xFF3
 11063                           intcon	equ	0xFF2
 11064                           intcon2	equ	0xFF1
 11065                           postinc0	equ	0xFEE
 11066                           wreg	equ	0xFE8
 11067                           indf1	equ	0xFE7
 11068                           postdec1	equ	0xFE5
 11069                           fsr1h	equ	0xFE2
 11070                           fsr1l	equ	0xFE1
 11071                           indf2	equ	0xFDF
 11072                           postinc2	equ	0xFDE
 11073                           postdec2	equ	0xFDD
 11074                           fsr2h	equ	0xFDA
 11075                           fsr2l	equ	0xFD9
 11076                           status	equ	0xFD8
 11077                           
 11078 ;; *************** function _SwSpi_Data_Pin *****************
 11079 ;; Defined at:
 11080 ;;		line 103 in file "SwSpiApp.c"
 11081 ;; Parameters:    Size  Location     Type
 11082 ;;  phrType         1    wreg     enum E7547
 11083 ;;  cPinMode        1   23[COMRAM] unsigned char 
 11084 ;; Auto vars:     Size  Location     Type
 11085 ;;  phrType         1   24[COMRAM] enum E7547
 11086 ;; Return value:  Size  Location     Type
 11087 ;;                  1    wreg      void 
 11088 ;; Registers used:
 11089 ;;		wreg, status,2, status,0
 11090 ;; Tracked objects:
 11091 ;;		On entry : 0/0
 11092 ;;		On exit  : 0/0
 11093 ;;		Unchanged: 0/0
 11094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11095 ;;      Params:         1       0       0       0       0       0       0
 11096 ;;      Locals:         1       0       0       0       0       0       0
 11097 ;;      Temps:          0       0       0       0       0       0       0
 11098 ;;      Totals:         2       0       0       0       0       0       0
 11099 ;;Total ram usage:        2 bytes
 11100 ;; Hardware stack levels used:    1
 11101 ;; Hardware stack levels required when called:    3
 11102 ;; This function calls:
 11103 ;;		Nothing
 11104 ;; This function is called by:
 11105 ;;		_SWSPI_DAC_send_bits
 11106 ;;		_SWSPI_Synth_send_bits
 11107 ;; This function uses a non-reentrant model
 11108 ;;
 11109                           
 11110                           	psect	text76
 11111  002C4C                     __ptext76:
 11112                           	opt stack 0
 11113  002C4C                     _SwSpi_Data_Pin:
 11114                           	opt stack 22
 11115                           
 11116                           ;incstack = 0
 11117                           ;SwSpi_Data_Pin@phrType stored from wreg
 11118  002C4C  6E19               	movwf	SwSpi_Data_Pin@phrType,c
 11119                           
 11120                           ;SwSpiApp.c: 105: switch(phrType)
 11121  002C4E  D01E               	goto	l529
 11122  002C50                     
 11123                           ;SwSpiApp.c: 108: if(cPinMode == 1)
 11124  002C50  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 11125  002C52  A4D8               	btfss	status,2,c
 11126  002C54  D002               	goto	l531
 11127                           
 11128                           ;SwSpiApp.c: 109: {
 11129                           ;SwSpiApp.c: 110: do { LATDbits.LATD0 = 1; } while(0);
 11130  002C56  808C               	bsf	3980,0,c	;volatile
 11131                           
 11132                           ;SwSpiApp.c: 111: }
 11133  002C58  0012               	return	
 11134  002C5A                     l531:
 11135                           
 11136                           ;SwSpiApp.c: 112: else if (cPinMode == 0)
 11137  002C5A  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 11138  002C5C  A4D8               	btfss	status,2,c
 11139  002C5E  0012               	return	
 11140                           
 11141                           ;SwSpiApp.c: 113: {
 11142                           ;SwSpiApp.c: 114: do { LATDbits.LATD0 = 0; } while(0);
 11143  002C60  908C               	bcf	3980,0,c	;volatile
 11144                           
 11145                           ;SwSpiApp.c: 115: }
 11146                           ;SwSpiApp.c: 116: break;
 11147  002C62  0012               	return	
 11148  002C64                     
 11149                           ;SwSpiApp.c: 119: if(cPinMode == 1)
 11150  002C64  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 11151  002C66  A4D8               	btfss	status,2,c
 11152  002C68  D002               	goto	l540
 11153                           
 11154                           ;SwSpiApp.c: 120: {
 11155                           ;SwSpiApp.c: 121: do { LATCbits.LATC5 = 1; } while(0);
 11156  002C6A  8A8B               	bsf	3979,5,c	;volatile
 11157                           
 11158                           ;SwSpiApp.c: 122: }
 11159  002C6C  0012               	return	
 11160  002C6E                     l540:
 11161                           
 11162                           ;SwSpiApp.c: 123: else if (cPinMode == 0)
 11163  002C6E  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 11164  002C70  A4D8               	btfss	status,2,c
 11165  002C72  0012               	return	
 11166                           
 11167                           ;SwSpiApp.c: 124: {
 11168                           ;SwSpiApp.c: 125: do { LATCbits.LATC5 = 0; } while(0);
 11169  002C74  9A8B               	bcf	3979,5,c	;volatile
 11170                           
 11171                           ;SwSpiApp.c: 126: }
 11172                           ;SwSpiApp.c: 127: break;
 11173  002C76  0012               	return	
 11174  002C78                     
 11175                           ;SwSpiApp.c: 130: if(cPinMode == 1)
 11176  002C78  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 11177  002C7A  A4D8               	btfss	status,2,c
 11178  002C7C  D002               	goto	l548
 11179                           
 11180                           ;SwSpiApp.c: 131: {
 11181                           ;SwSpiApp.c: 132: do { LATAbits.LATA4 = 1; } while(0);
 11182  002C7E  8889               	bsf	3977,4,c	;volatile
 11183                           
 11184                           ;SwSpiApp.c: 133: }
 11185  002C80  0012               	return	
 11186  002C82                     l548:
 11187                           
 11188                           ;SwSpiApp.c: 134: else if (cPinMode == 0)
 11189  002C82  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 11190  002C84  A4D8               	btfss	status,2,c
 11191  002C86  0012               	return	
 11192                           
 11193                           ;SwSpiApp.c: 135: {
 11194                           ;SwSpiApp.c: 136: do { LATAbits.LATA4 = 0; } while(0);
 11195  002C88  9889               	bcf	3977,4,c	;volatile
 11196                           
 11197                           ;SwSpiApp.c: 139: }
 11198                           
 11199                           ;SwSpiApp.c: 137: }
 11200                           ;SwSpiApp.c: 138: break;
 11201  002C8A  0012               	return	
 11202  002C8C                     l529:
 11203  002C8C  5019               	movf	SwSpi_Data_Pin@phrType,w,c
 11204                           
 11205                           ; Switch size 1, requested type "space"
 11206                           ; Number of cases is 3, Range of values is 0 to 2
 11207                           ; switch strategies available:
 11208                           ; Name         Instructions Cycles
 11209                           ; simple_byte           10     6 (average)
 11210                           ;	Chosen strategy is simple_byte
 11211  002C8E  0A00               	xorlw	0	; case 0
 11212  002C90  B4D8               	btfsc	status,2,c
 11213  002C92  D7DE               	goto	l530
 11214  002C94  0A01               	xorlw	1	; case 1
 11215  002C96  B4D8               	btfsc	status,2,c
 11216  002C98  D7E5               	goto	l539
 11217  002C9A  0A03               	xorlw	3	; case 2
 11218  002C9C  A4D8               	btfss	status,2,c
 11219  002C9E  0012               	return	
 11220  002CA0  D7EB               	goto	l547
 11221  002CA2                     __end_of_SwSpi_Data_Pin:
 11222                           	opt stack 0
 11223                           tosu	equ	0xFFF
 11224                           tosh	equ	0xFFE
 11225                           tosl	equ	0xFFD
 11226                           pclath	equ	0xFFA
 11227                           tblptru	equ	0xFF8
 11228                           tblptrh	equ	0xFF7
 11229                           tblptrl	equ	0xFF6
 11230                           tablat	equ	0xFF5
 11231                           prodh	equ	0xFF4
 11232                           prodl	equ	0xFF3
 11233                           intcon	equ	0xFF2
 11234                           intcon2	equ	0xFF1
 11235                           postinc0	equ	0xFEE
 11236                           wreg	equ	0xFE8
 11237                           indf1	equ	0xFE7
 11238                           postdec1	equ	0xFE5
 11239                           fsr1h	equ	0xFE2
 11240                           fsr1l	equ	0xFE1
 11241                           indf2	equ	0xFDF
 11242                           postinc2	equ	0xFDE
 11243                           postdec2	equ	0xFDD
 11244                           fsr2h	equ	0xFDA
 11245                           fsr2l	equ	0xFD9
 11246                           status	equ	0xFD8
 11247                           
 11248 ;; *************** function _SwSpi_Clk_Pin *****************
 11249 ;; Defined at:
 11250 ;;		line 142 in file "SwSpiApp.c"
 11251 ;; Parameters:    Size  Location     Type
 11252 ;;  phrType         1    wreg     enum E7547
 11253 ;;  cPinMode        1   23[COMRAM] unsigned char 
 11254 ;; Auto vars:     Size  Location     Type
 11255 ;;  phrType         1   24[COMRAM] enum E7547
 11256 ;; Return value:  Size  Location     Type
 11257 ;;                  1    wreg      void 
 11258 ;; Registers used:
 11259 ;;		wreg, status,2, status,0
 11260 ;; Tracked objects:
 11261 ;;		On entry : 0/0
 11262 ;;		On exit  : 0/0
 11263 ;;		Unchanged: 0/0
 11264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11265 ;;      Params:         1       0       0       0       0       0       0
 11266 ;;      Locals:         1       0       0       0       0       0       0
 11267 ;;      Temps:          0       0       0       0       0       0       0
 11268 ;;      Totals:         2       0       0       0       0       0       0
 11269 ;;Total ram usage:        2 bytes
 11270 ;; Hardware stack levels used:    1
 11271 ;; Hardware stack levels required when called:    3
 11272 ;; This function calls:
 11273 ;;		Nothing
 11274 ;; This function is called by:
 11275 ;;		_SWSPI_DAC_send_bits
 11276 ;;		_SWSPI_Synth_send_bits
 11277 ;;		_SwSpi_Synth_Toggle_Clock
 11278 ;; This function uses a non-reentrant model
 11279 ;;
 11280                           
 11281                           	psect	text77
 11282  002CA2                     __ptext77:
 11283                           	opt stack 0
 11284  002CA2                     _SwSpi_Clk_Pin:
 11285                           	opt stack 22
 11286                           
 11287                           ;incstack = 0
 11288                           ;SwSpi_Clk_Pin@phrType stored from wreg
 11289  002CA2  6E19               	movwf	SwSpi_Clk_Pin@phrType,c
 11290                           
 11291                           ;SwSpiApp.c: 144: switch(phrType)
 11292  002CA4  D01E               	goto	l558
 11293  002CA6                     
 11294                           ;SwSpiApp.c: 147: if(cPinMode == 1)
 11295  002CA6  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 11296  002CA8  A4D8               	btfss	status,2,c
 11297  002CAA  D002               	goto	l560
 11298                           
 11299                           ;SwSpiApp.c: 148: {
 11300                           ;SwSpiApp.c: 149: do { LATCbits.LATC3 = 1; } while(0);
 11301  002CAC  868B               	bsf	3979,3,c	;volatile
 11302                           
 11303                           ;SwSpiApp.c: 150: }
 11304  002CAE  0012               	return	
 11305  002CB0                     l560:
 11306                           
 11307                           ;SwSpiApp.c: 151: else if (cPinMode == 0)
 11308  002CB0  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 11309  002CB2  A4D8               	btfss	status,2,c
 11310  002CB4  0012               	return	
 11311                           
 11312                           ;SwSpiApp.c: 152: {
 11313                           ;SwSpiApp.c: 153: do { LATCbits.LATC3 = 0; } while(0);
 11314  002CB6  968B               	bcf	3979,3,c	;volatile
 11315                           
 11316                           ;SwSpiApp.c: 154: }
 11317                           ;SwSpiApp.c: 155: break;
 11318  002CB8  0012               	return	
 11319  002CBA                     
 11320                           ;SwSpiApp.c: 158: if(cPinMode == 1)
 11321  002CBA  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 11322  002CBC  A4D8               	btfss	status,2,c
 11323  002CBE  D002               	goto	l569
 11324                           
 11325                           ;SwSpiApp.c: 159: {
 11326                           ;SwSpiApp.c: 160: do { LATCbits.LATC4 = 1; } while(0);
 11327  002CC0  888B               	bsf	3979,4,c	;volatile
 11328                           
 11329                           ;SwSpiApp.c: 161: }
 11330  002CC2  0012               	return	
 11331  002CC4                     l569:
 11332                           
 11333                           ;SwSpiApp.c: 162: else if (cPinMode == 0)
 11334  002CC4  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 11335  002CC6  A4D8               	btfss	status,2,c
 11336  002CC8  0012               	return	
 11337                           
 11338                           ;SwSpiApp.c: 163: {
 11339                           ;SwSpiApp.c: 164: do { LATCbits.LATC4 = 0; } while(0);
 11340  002CCA  988B               	bcf	3979,4,c	;volatile
 11341                           
 11342                           ;SwSpiApp.c: 165: }
 11343                           ;SwSpiApp.c: 167: break;
 11344  002CCC  0012               	return	
 11345  002CCE                     
 11346                           ;SwSpiApp.c: 170: if(cPinMode == 1)
 11347  002CCE  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 11348  002CD0  A4D8               	btfss	status,2,c
 11349  002CD2  D002               	goto	l577
 11350                           
 11351                           ;SwSpiApp.c: 171: {
 11352                           ;SwSpiApp.c: 172: do { LATAbits.LATA3 = 1; } while(0);
 11353  002CD4  8689               	bsf	3977,3,c	;volatile
 11354                           
 11355                           ;SwSpiApp.c: 173: }
 11356  002CD6  0012               	return	
 11357  002CD8                     l577:
 11358                           
 11359                           ;SwSpiApp.c: 174: else if (cPinMode == 0)
 11360  002CD8  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 11361  002CDA  A4D8               	btfss	status,2,c
 11362  002CDC  0012               	return	
 11363                           
 11364                           ;SwSpiApp.c: 175: {
 11365                           ;SwSpiApp.c: 176: do { LATAbits.LATA3 = 0; } while(0);
 11366  002CDE  9689               	bcf	3977,3,c	;volatile
 11367                           
 11368                           ;SwSpiApp.c: 179: }
 11369                           
 11370                           ;SwSpiApp.c: 177: }
 11371                           ;SwSpiApp.c: 178: break;
 11372  002CE0  0012               	return	
 11373  002CE2                     l558:
 11374  002CE2  5019               	movf	SwSpi_Clk_Pin@phrType,w,c
 11375                           
 11376                           ; Switch size 1, requested type "space"
 11377                           ; Number of cases is 3, Range of values is 0 to 2
 11378                           ; switch strategies available:
 11379                           ; Name         Instructions Cycles
 11380                           ; simple_byte           10     6 (average)
 11381                           ;	Chosen strategy is simple_byte
 11382  002CE4  0A00               	xorlw	0	; case 0
 11383  002CE6  B4D8               	btfsc	status,2,c
 11384  002CE8  D7DE               	goto	l559
 11385  002CEA  0A01               	xorlw	1	; case 1
 11386  002CEC  B4D8               	btfsc	status,2,c
 11387  002CEE  D7E5               	goto	l568
 11388  002CF0  0A03               	xorlw	3	; case 2
 11389  002CF2  A4D8               	btfss	status,2,c
 11390  002CF4  0012               	return	
 11391  002CF6  D7EB               	goto	l576
 11392  002CF8                     __end_of_SwSpi_Clk_Pin:
 11393                           	opt stack 0
 11394                           tosu	equ	0xFFF
 11395                           tosh	equ	0xFFE
 11396                           tosl	equ	0xFFD
 11397                           pclath	equ	0xFFA
 11398                           tblptru	equ	0xFF8
 11399                           tblptrh	equ	0xFF7
 11400                           tblptrl	equ	0xFF6
 11401                           tablat	equ	0xFF5
 11402                           prodh	equ	0xFF4
 11403                           prodl	equ	0xFF3
 11404                           intcon	equ	0xFF2
 11405                           intcon2	equ	0xFF1
 11406                           postinc0	equ	0xFEE
 11407                           wreg	equ	0xFE8
 11408                           indf1	equ	0xFE7
 11409                           postdec1	equ	0xFE5
 11410                           fsr1h	equ	0xFE2
 11411                           fsr1l	equ	0xFE1
 11412                           indf2	equ	0xFDF
 11413                           postinc2	equ	0xFDE
 11414                           postdec2	equ	0xFDD
 11415                           fsr2h	equ	0xFDA
 11416                           fsr2l	equ	0xFD9
 11417                           status	equ	0xFD8
 11418                           
 11419 ;; *************** function _ReadIntFromEeprom *****************
 11420 ;; Defined at:
 11421 ;;		line 97 in file "SystemCommon.c"
 11422 ;; Parameters:    Size  Location     Type
 11423 ;;  address         1    wreg     unsigned char 
 11424 ;;  numOfByes       2   25[COMRAM] int 
 11425 ;; Auto vars:     Size  Location     Type
 11426 ;;  address         1   37[COMRAM] unsigned char 
 11427 ;;  retVal          4   33[COMRAM] unsigned long 
 11428 ;; Return value:  Size  Location     Type
 11429 ;;                  4   25[COMRAM] unsigned long 
 11430 ;; Registers used:
 11431 ;;		wreg, status,2, status,0, cstack
 11432 ;; Tracked objects:
 11433 ;;		On entry : 0/0
 11434 ;;		On exit  : 0/0
 11435 ;;		Unchanged: 0/0
 11436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11437 ;;      Params:         4       0       0       0       0       0       0
 11438 ;;      Locals:         5       0       0       0       0       0       0
 11439 ;;      Temps:          4       0       0       0       0       0       0
 11440 ;;      Totals:        13       0       0       0       0       0       0
 11441 ;;Total ram usage:       13 bytes
 11442 ;; Hardware stack levels used:    1
 11443 ;; Hardware stack levels required when called:    5
 11444 ;; This function calls:
 11445 ;;		_EepromRead
 11446 ;; This function is called by:
 11447 ;;		_DacInit
 11448 ;; This function uses a non-reentrant model
 11449 ;;
 11450                           
 11451                           	psect	text78
 11452  0028C0                     __ptext78:
 11453                           	opt stack 0
 11454  0028C0                     _ReadIntFromEeprom:
 11455                           	opt stack 23
 11456                           
 11457                           ;incstack = 0
 11458                           ;ReadIntFromEeprom@address stored from wreg
 11459  0028C0  6E26               	movwf	ReadIntFromEeprom@address,c
 11460                           
 11461                           ;SystemCommon.c: 99: uint32_t retVal = 0x00;
 11462  0028C2  0E00               	movlw	0
 11463  0028C4  6E22               	movwf	ReadIntFromEeprom@retVal,c
 11464  0028C6  0E00               	movlw	0
 11465  0028C8  6E23               	movwf	ReadIntFromEeprom@retVal+1,c
 11466  0028CA  0E00               	movlw	0
 11467  0028CC  6E24               	movwf	ReadIntFromEeprom@retVal+2,c
 11468  0028CE  0E00               	movlw	0
 11469  0028D0  6E25               	movwf	ReadIntFromEeprom@retVal+3,c
 11470                           
 11471                           ;SystemCommon.c: 101: if(numOfByes == 2)
 11472  0028D2  0E02               	movlw	2
 11473  0028D4  181A               	xorwf	ReadIntFromEeprom@numOfByes,w,c
 11474  0028D6  101B               	iorwf	ReadIntFromEeprom@numOfByes+1,w,c
 11475  0028D8  A4D8               	btfss	status,2,c
 11476  0028DA  D018               	goto	l1226
 11477                           
 11478                           ;SystemCommon.c: 102: {
 11479                           ;SystemCommon.c: 103: retVal = (EepromRead(address + 0) << 8) | (EepromRead(address + 1)
      +                          );
 11480  0028DC  5026               	movf	ReadIntFromEeprom@address,w,c
 11481  0028DE  ECD3  F01B         	call	_EepromRead
 11482  0028E2  6E1E               	movwf	??_ReadIntFromEeprom& (0+255),c
 11483  0028E4  501E               	movf	??_ReadIntFromEeprom,w,c
 11484  0028E6  6E20               	movwf	(??_ReadIntFromEeprom+2)& (0+255),c
 11485  0028E8  6A1F               	clrf	(??_ReadIntFromEeprom+1)& (0+255),c
 11486  0028EA  2826               	incf	ReadIntFromEeprom@address,w,c
 11487  0028EC  ECD3  F01B         	call	_EepromRead
 11488  0028F0  6E21               	movwf	(??_ReadIntFromEeprom+3)& (0+255),c
 11489  0028F2  5021               	movf	??_ReadIntFromEeprom+3,w,c
 11490  0028F4  121F               	iorwf	??_ReadIntFromEeprom+1,f,c
 11491  0028F6  0E00               	movlw	0
 11492  0028F8  1220               	iorwf	??_ReadIntFromEeprom+2,f,c
 11493  0028FA  C01F  F022         	movff	??_ReadIntFromEeprom+1,ReadIntFromEeprom@retVal
 11494  0028FE  C020  F023         	movff	??_ReadIntFromEeprom+2,ReadIntFromEeprom@retVal+1
 11495  002902  0E00               	movlw	0
 11496  002904  BE23               	btfsc	ReadIntFromEeprom@retVal+1,7,c
 11497  002906  0EFF               	movlw	-1
 11498  002908  6E24               	movwf	ReadIntFromEeprom@retVal+2,c
 11499  00290A  6E25               	movwf	ReadIntFromEeprom@retVal+3,c
 11500  00290C                     l1226:
 11501                           
 11502                           ;SystemCommon.c: 108: }
 11503                           ;SystemCommon.c: 111: return retVal;
 11504                           
 11505                           ;SystemCommon.c: 106: {
 11506  00290C  C022  F01A         	movff	ReadIntFromEeprom@retVal,?_ReadIntFromEeprom
 11507  002910  C023  F01B         	movff	ReadIntFromEeprom@retVal+1,?_ReadIntFromEeprom+1
 11508  002914  C024  F01C         	movff	ReadIntFromEeprom@retVal+2,?_ReadIntFromEeprom+2
 11509  002918  C025  F01D         	movff	ReadIntFromEeprom@retVal+3,?_ReadIntFromEeprom+3
 11510  00291C  0012               	return		;funcret
 11511  00291E                     __end_of_ReadIntFromEeprom:
 11512                           	opt stack 0
 11513                           tosu	equ	0xFFF
 11514                           tosh	equ	0xFFE
 11515                           tosl	equ	0xFFD
 11516                           pclath	equ	0xFFA
 11517                           tblptru	equ	0xFF8
 11518                           tblptrh	equ	0xFF7
 11519                           tblptrl	equ	0xFF6
 11520                           tablat	equ	0xFF5
 11521                           prodh	equ	0xFF4
 11522                           prodl	equ	0xFF3
 11523                           intcon	equ	0xFF2
 11524                           intcon2	equ	0xFF1
 11525                           postinc0	equ	0xFEE
 11526                           wreg	equ	0xFE8
 11527                           indf1	equ	0xFE7
 11528                           postdec1	equ	0xFE5
 11529                           fsr1h	equ	0xFE2
 11530                           fsr1l	equ	0xFE1
 11531                           indf2	equ	0xFDF
 11532                           postinc2	equ	0xFDE
 11533                           postdec2	equ	0xFDD
 11534                           fsr2h	equ	0xFDA
 11535                           fsr2l	equ	0xFD9
 11536                           status	equ	0xFD8
 11537                           
 11538 ;; *************** function _EepromRead *****************
 11539 ;; Defined at:
 11540 ;;		line 215 in file "FlashApp.c"
 11541 ;; Parameters:    Size  Location     Type
 11542 ;;  address         1    wreg     unsigned char 
 11543 ;; Auto vars:     Size  Location     Type
 11544 ;;  address         1   24[COMRAM] unsigned char 
 11545 ;; Return value:  Size  Location     Type
 11546 ;;                  1    wreg      unsigned char 
 11547 ;; Registers used:
 11548 ;;		wreg, status,2, cstack
 11549 ;; Tracked objects:
 11550 ;;		On entry : 0/0
 11551 ;;		On exit  : 0/0
 11552 ;;		Unchanged: 0/0
 11553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11554 ;;      Params:         0       0       0       0       0       0       0
 11555 ;;      Locals:         1       0       0       0       0       0       0
 11556 ;;      Temps:          0       0       0       0       0       0       0
 11557 ;;      Totals:         1       0       0       0       0       0       0
 11558 ;;Total ram usage:        1 bytes
 11559 ;; Hardware stack levels used:    1
 11560 ;; Hardware stack levels required when called:    4
 11561 ;; This function calls:
 11562 ;;		_DATAEE_ReadByte
 11563 ;; This function is called by:
 11564 ;;		_ReadIntFromEeprom
 11565 ;;		_GetMcuFwVersion
 11566 ;;		_GetCpldFwVersion
 11567 ;; This function uses a non-reentrant model
 11568 ;;
 11569                           
 11570                           	psect	text79
 11571  0037A6                     __ptext79:
 11572                           	opt stack 0
 11573  0037A6                     _EepromRead:
 11574                           	opt stack 23
 11575                           
 11576                           ;incstack = 0
 11577                           ;EepromRead@address stored from wreg
 11578  0037A6  6E19               	movwf	EepromRead@address,c
 11579                           
 11580                           ;FlashApp.c: 217: return DATAEE_ReadByte(address);
 11581  0037A8  5019               	movf	EepromRead@address,w,c
 11582  0037AA  EC62  F01B         	call	_DATAEE_ReadByte
 11583  0037AE  0012               	return	
 11584  0037B0                     __end_of_EepromRead:
 11585                           	opt stack 0
 11586                           tosu	equ	0xFFF
 11587                           tosh	equ	0xFFE
 11588                           tosl	equ	0xFFD
 11589                           pclath	equ	0xFFA
 11590                           tblptru	equ	0xFF8
 11591                           tblptrh	equ	0xFF7
 11592                           tblptrl	equ	0xFF6
 11593                           tablat	equ	0xFF5
 11594                           prodh	equ	0xFF4
 11595                           prodl	equ	0xFF3
 11596                           intcon	equ	0xFF2
 11597                           intcon2	equ	0xFF1
 11598                           postinc0	equ	0xFEE
 11599                           wreg	equ	0xFE8
 11600                           indf1	equ	0xFE7
 11601                           postdec1	equ	0xFE5
 11602                           fsr1h	equ	0xFE2
 11603                           fsr1l	equ	0xFE1
 11604                           indf2	equ	0xFDF
 11605                           postinc2	equ	0xFDE
 11606                           postdec2	equ	0xFDD
 11607                           fsr2h	equ	0xFDA
 11608                           fsr2l	equ	0xFD9
 11609                           status	equ	0xFD8
 11610                           
 11611 ;; *************** function _DATAEE_ReadByte *****************
 11612 ;; Defined at:
 11613 ;;		line 194 in file "mcc_generated_files/memory.c"
 11614 ;; Parameters:    Size  Location     Type
 11615 ;;  bAdd            1    wreg     unsigned char 
 11616 ;; Auto vars:     Size  Location     Type
 11617 ;;  bAdd            1   23[COMRAM] unsigned char 
 11618 ;; Return value:  Size  Location     Type
 11619 ;;                  1    wreg      unsigned char 
 11620 ;; Registers used:
 11621 ;;		wreg, status,2
 11622 ;; Tracked objects:
 11623 ;;		On entry : 0/0
 11624 ;;		On exit  : 0/0
 11625 ;;		Unchanged: 0/0
 11626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11627 ;;      Params:         0       0       0       0       0       0       0
 11628 ;;      Locals:         1       0       0       0       0       0       0
 11629 ;;      Temps:          0       0       0       0       0       0       0
 11630 ;;      Totals:         1       0       0       0       0       0       0
 11631 ;;Total ram usage:        1 bytes
 11632 ;; Hardware stack levels used:    1
 11633 ;; Hardware stack levels required when called:    3
 11634 ;; This function calls:
 11635 ;;		Nothing
 11636 ;; This function is called by:
 11637 ;;		_EepromRead
 11638 ;;		_EepromTest
 11639 ;; This function uses a non-reentrant model
 11640 ;;
 11641                           
 11642                           	psect	text80
 11643  0036C4                     __ptext80:
 11644                           	opt stack 0
 11645  0036C4                     _DATAEE_ReadByte:
 11646                           	opt stack 23
 11647                           
 11648                           ;incstack = 0
 11649                           ;DATAEE_ReadByte@bAdd stored from wreg
 11650  0036C4  6E18               	movwf	DATAEE_ReadByte@bAdd,c
 11651                           
 11652                           ;memory.c: 197: EEADR = (bAdd & 0xFF);
 11653  0036C6  C018  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
 11654                           
 11655                           ;memory.c: 198: EECON1bits.CFGS = 0;
 11656  0036CA  9CA6               	bcf	4006,6,c	;volsfr
 11657                           
 11658                           ;memory.c: 199: EECON1bits.EEPGD = 0;
 11659  0036CC  9EA6               	bcf	4006,7,c	;volsfr
 11660                           
 11661                           ;memory.c: 200: EECON1bits.RD = 1;
 11662  0036CE  80A6               	bsf	4006,0,c	;volsfr
 11663                           
 11664                           ;memory.c: 201: __nop();
 11665  0036D0  F000               	nop	
 11666                           
 11667                           ;memory.c: 202: __nop();
 11668  0036D2  F000               	nop	
 11669                           
 11670                           ;memory.c: 204: return (EEDATA);
 11671  0036D4  50A8               	movf	4008,w,c	;volatile
 11672  0036D6  0012               	return	
 11673  0036D8                     __end_of_DATAEE_ReadByte:
 11674                           	opt stack 0
 11675                           tosu	equ	0xFFF
 11676                           tosh	equ	0xFFE
 11677                           tosl	equ	0xFFD
 11678                           pclath	equ	0xFFA
 11679                           tblptru	equ	0xFF8
 11680                           tblptrh	equ	0xFF7
 11681                           tblptrl	equ	0xFF6
 11682                           tablat	equ	0xFF5
 11683                           prodh	equ	0xFF4
 11684                           prodl	equ	0xFF3
 11685                           intcon	equ	0xFF2
 11686                           intcon2	equ	0xFF1
 11687                           postinc0	equ	0xFEE
 11688                           wreg	equ	0xFE8
 11689                           indf1	equ	0xFE7
 11690                           postdec1	equ	0xFE5
 11691                           fsr1h	equ	0xFE2
 11692                           fsr1l	equ	0xFE1
 11693                           indf2	equ	0xFDF
 11694                           postinc2	equ	0xFDE
 11695                           postdec2	equ	0xFDD
 11696                           fsr2h	equ	0xFDA
 11697                           fsr2l	equ	0xFD9
 11698                           status	equ	0xFD8
 11699                           
 11700 ;; *************** function _ClearMcuRunTime *****************
 11701 ;; Defined at:
 11702 ;;		line 87 in file "SystemStatus.c"
 11703 ;; Parameters:    Size  Location     Type
 11704 ;;		None
 11705 ;; Auto vars:     Size  Location     Type
 11706 ;;		None
 11707 ;; Return value:  Size  Location     Type
 11708 ;;                  1    wreg      void 
 11709 ;; Registers used:
 11710 ;;		wreg, status,2
 11711 ;; Tracked objects:
 11712 ;;		On entry : 0/0
 11713 ;;		On exit  : 0/0
 11714 ;;		Unchanged: 0/0
 11715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11716 ;;      Params:         0       0       0       0       0       0       0
 11717 ;;      Locals:         0       0       0       0       0       0       0
 11718 ;;      Temps:          0       0       0       0       0       0       0
 11719 ;;      Totals:         0       0       0       0       0       0       0
 11720 ;;Total ram usage:        0 bytes
 11721 ;; Hardware stack levels used:    1
 11722 ;; Hardware stack levels required when called:    3
 11723 ;; This function calls:
 11724 ;;		Nothing
 11725 ;; This function is called by:
 11726 ;;		_InitSystemApplicationManagers
 11727 ;; This function uses a non-reentrant model
 11728 ;;
 11729                           
 11730                           	psect	text81
 11731  0036D8                     __ptext81:
 11732                           	opt stack 0
 11733  0036D8                     _ClearMcuRunTime:
 11734                           	opt stack 26
 11735                           
 11736                           ;SystemStatus.c: 89: mcuRunTimeIn5SecTicks = 0;
 11737                           
 11738                           ;incstack = 0
 11739  0036D8  0E00               	movlw	0
 11740  0036DA  0100               	movlb	0	; () banked
 11741  0036DC  6FC1               	movwf	_mcuRunTimeIn5SecTicks& (0+255),b
 11742  0036DE  0E00               	movlw	0
 11743  0036E0  6FC2               	movwf	(_mcuRunTimeIn5SecTicks+1)& (0+255),b
 11744  0036E2  0E00               	movlw	0
 11745  0036E4  6FC3               	movwf	(_mcuRunTimeIn5SecTicks+2)& (0+255),b
 11746  0036E6  0E00               	movlw	0
 11747  0036E8  6FC4               	movwf	(_mcuRunTimeIn5SecTicks+3)& (0+255),b
 11748                           
 11749                           ; BSR set to: 0
 11750  0036EA  0012               	return		;funcret
 11751  0036EC                     __end_of_ClearMcuRunTime:
 11752                           	opt stack 0
 11753                           tosu	equ	0xFFF
 11754                           tosh	equ	0xFFE
 11755                           tosl	equ	0xFFD
 11756                           pclath	equ	0xFFA
 11757                           tblptru	equ	0xFF8
 11758                           tblptrh	equ	0xFF7
 11759                           tblptrl	equ	0xFF6
 11760                           tablat	equ	0xFF5
 11761                           prodh	equ	0xFF4
 11762                           prodl	equ	0xFF3
 11763                           intcon	equ	0xFF2
 11764                           intcon2	equ	0xFF1
 11765                           postinc0	equ	0xFEE
 11766                           wreg	equ	0xFE8
 11767                           indf1	equ	0xFE7
 11768                           postdec1	equ	0xFE5
 11769                           fsr1h	equ	0xFE2
 11770                           fsr1l	equ	0xFE1
 11771                           indf2	equ	0xFDF
 11772                           postinc2	equ	0xFDE
 11773                           postdec2	equ	0xFDD
 11774                           fsr2h	equ	0xFDA
 11775                           fsr2l	equ	0xFD9
 11776                           status	equ	0xFD8
 11777                           
 11778 ;; *************** function _CheckFlashPrecentage *****************
 11779 ;; Defined at:
 11780 ;;		line 205 in file "FlashApp.c"
 11781 ;; Parameters:    Size  Location     Type
 11782 ;;		None
 11783 ;; Auto vars:     Size  Location     Type
 11784 ;;  precentage      3   28[BANK0 ] void 
 11785 ;; Return value:  Size  Location     Type
 11786 ;;                  1    wreg      unsigned char 
 11787 ;; Registers used:
 11788 ;;		wreg, status,2, status,0, cstack
 11789 ;; Tracked objects:
 11790 ;;		On entry : 0/0
 11791 ;;		On exit  : 0/0
 11792 ;;		Unchanged: 0/0
 11793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11794 ;;      Params:         0       0       0       0       0       0       0
 11795 ;;      Locals:         0       3       0       0       0       0       0
 11796 ;;      Temps:          0       4       0       0       0       0       0
 11797 ;;      Totals:         0       7       0       0       0       0       0
 11798 ;;Total ram usage:        7 bytes
 11799 ;; Hardware stack levels used:    1
 11800 ;; Hardware stack levels required when called:    5
 11801 ;; This function calls:
 11802 ;;		___ftdiv
 11803 ;;		___ftge
 11804 ;;		___ftmul
 11805 ;;		___lltoft
 11806 ;; This function is called by:
 11807 ;;		_main
 11808 ;; This function uses a non-reentrant model
 11809 ;;
 11810                           
 11811                           	psect	text82
 11812  002072                     __ptext82:
 11813                           	opt stack 0
 11814  002072                     _CheckFlashPrecentage:
 11815                           	opt stack 25
 11816                           
 11817                           ;FlashApp.c: 207: double precentage = ((double)(0x7FF0 - writeAddress) / 0x7FF0) * 100;
 11818                           
 11819                           ; BSR set to: 0
 11820                           ;incstack = 0
 11821  002072  0EE0               	movlw	224
 11822  002074  6E2C               	movwf	___ftdiv@f2,c
 11823  002076  0EFF               	movlw	255
 11824  002078  6E2D               	movwf	___ftdiv@f2+1,c
 11825  00207A  0E46               	movlw	70
 11826  00207C  6E2E               	movwf	___ftdiv@f2+2,c
 11827  00207E  C042  F078         	movff	_writeAddress,??_CheckFlashPrecentage
 11828  002082  C043  F079         	movff	_writeAddress+1,??_CheckFlashPrecentage+1
 11829  002086  C044  F07A         	movff	_writeAddress+2,??_CheckFlashPrecentage+2
 11830  00208A  C045  F07B         	movff	_writeAddress+3,??_CheckFlashPrecentage+3
 11831  00208E  0100               	movlb	0	; () banked
 11832  002090  1F78               	comf	??_CheckFlashPrecentage& (0+255),f,b
 11833  002092  1F79               	comf	(??_CheckFlashPrecentage+1)& (0+255),f,b
 11834  002094  1F7A               	comf	(??_CheckFlashPrecentage+2)& (0+255),f,b
 11835  002096  1F7B               	comf	(??_CheckFlashPrecentage+3)& (0+255),f,b
 11836  002098  2B78               	incf	??_CheckFlashPrecentage& (0+255),f,b
 11837  00209A  0E00               	movlw	0
 11838  00209C  2379               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),f,b
 11839  00209E  237A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),f,b
 11840  0020A0  237B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),f,b
 11841  0020A2  0EF0               	movlw	240
 11842  0020A4  2578               	addwf	??_CheckFlashPrecentage& (0+255),w,b
 11843  0020A6  6E20               	movwf	___lltoft@c,c
 11844  0020A8  0E7F               	movlw	127
 11845  0020AA  2179               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),w,b
 11846  0020AC  6E21               	movwf	___lltoft@c+1,c
 11847  0020AE  0E00               	movlw	0
 11848  0020B0  217A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),w,b
 11849  0020B2  6E22               	movwf	___lltoft@c+2,c
 11850  0020B4  0E00               	movlw	0
 11851  0020B6  217B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),w,b
 11852  0020B8  6E23               	movwf	___lltoft@c+3,c
 11853  0020BA  EC49  F015         	call	___lltoft	;wreg free
 11854  0020BE  C020  F029         	movff	?___lltoft,___ftdiv@f1
 11855  0020C2  C021  F02A         	movff	?___lltoft+1,___ftdiv@f1+1
 11856  0020C6  C022  F02B         	movff	?___lltoft+2,___ftdiv@f1+2
 11857  0020CA  ECF9  F00C         	call	___ftdiv	;wreg free
 11858  0020CE  C029  F069         	movff	?___ftdiv,___ftmul@f1
 11859  0020D2  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 11860  0020D6  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 11861  0020DA  0E00               	movlw	0
 11862  0020DC  0100               	movlb	0	; () banked
 11863  0020DE  6F6C               	movwf	___ftmul@f2& (0+255),b
 11864  0020E0  0EC8               	movlw	200
 11865  0020E2  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 11866  0020E4  0E42               	movlw	66
 11867  0020E6  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 11868  0020E8  EC7E  F00C         	call	___ftmul	;wreg free
 11869  0020EC  C069  F07C         	movff	?___ftmul,CheckFlashPrecentage@precentage
 11870  0020F0  C06A  F07D         	movff	?___ftmul+1,CheckFlashPrecentage@precentage+1
 11871  0020F4  C06B  F07E         	movff	?___ftmul+2,CheckFlashPrecentage@precentage+2
 11872                           
 11873                           ;FlashApp.c: 208: return (precentage > 75) ? 1 : 0;
 11874  0020F8  0E00               	movlw	0
 11875  0020FA  6E18               	movwf	___ftge@ff1,c
 11876  0020FC  0E96               	movlw	150
 11877  0020FE  6E19               	movwf	___ftge@ff1+1,c
 11878  002100  0E42               	movlw	66
 11879  002102  6E1A               	movwf	___ftge@ff1+2,c
 11880  002104  C07C  F01B         	movff	CheckFlashPrecentage@precentage,___ftge@ff2
 11881  002108  C07D  F01C         	movff	CheckFlashPrecentage@precentage+1,___ftge@ff2+1
 11882  00210C  C07E  F01D         	movff	CheckFlashPrecentage@precentage+2,___ftge@ff2+2
 11883  002110  EC0D  F012         	call	___ftge	;wreg free
 11884  002114  B0D8               	btfsc	status,0,c
 11885  002116  D002               	goto	u7940
 11886  002118  0E01               	movlw	1
 11887  00211A  0012               	return	
 11888  00211C                     u7940:
 11889  00211C  0E00               	movlw	0
 11890  00211E  0012               	return	
 11891  002120                     __end_of_CheckFlashPrecentage:
 11892                           	opt stack 0
 11893                           tosu	equ	0xFFF
 11894                           tosh	equ	0xFFE
 11895                           tosl	equ	0xFFD
 11896                           pclath	equ	0xFFA
 11897                           tblptru	equ	0xFF8
 11898                           tblptrh	equ	0xFF7
 11899                           tblptrl	equ	0xFF6
 11900                           tablat	equ	0xFF5
 11901                           prodh	equ	0xFF4
 11902                           prodl	equ	0xFF3
 11903                           intcon	equ	0xFF2
 11904                           intcon2	equ	0xFF1
 11905                           postinc0	equ	0xFEE
 11906                           wreg	equ	0xFE8
 11907                           indf1	equ	0xFE7
 11908                           postdec1	equ	0xFE5
 11909                           fsr1h	equ	0xFE2
 11910                           fsr1l	equ	0xFE1
 11911                           indf2	equ	0xFDF
 11912                           postinc2	equ	0xFDE
 11913                           postdec2	equ	0xFDD
 11914                           fsr2h	equ	0xFDA
 11915                           fsr2l	equ	0xFD9
 11916                           status	equ	0xFD8
 11917                           
 11918 ;; *************** function _BlinkOkLeds *****************
 11919 ;; Defined at:
 11920 ;;		line 24 in file "LedsApp.c"
 11921 ;; Parameters:    Size  Location     Type
 11922 ;;  state           1    wreg     enum E7563
 11923 ;; Auto vars:     Size  Location     Type
 11924 ;;  state           1   26[COMRAM] enum E7563
 11925 ;;  idx             2   27[COMRAM] int 
 11926 ;; Return value:  Size  Location     Type
 11927 ;;                  1    wreg      void 
 11928 ;; Registers used:
 11929 ;;		wreg, status,2, status,0
 11930 ;; Tracked objects:
 11931 ;;		On entry : 0/0
 11932 ;;		On exit  : 0/0
 11933 ;;		Unchanged: 0/0
 11934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11935 ;;      Params:         0       0       0       0       0       0       0
 11936 ;;      Locals:         3       0       0       0       0       0       0
 11937 ;;      Temps:          3       0       0       0       0       0       0
 11938 ;;      Totals:         6       0       0       0       0       0       0
 11939 ;;Total ram usage:        6 bytes
 11940 ;; Hardware stack levels used:    1
 11941 ;; Hardware stack levels required when called:    3
 11942 ;; This function calls:
 11943 ;;		Nothing
 11944 ;; This function is called by:
 11945 ;;		_main
 11946 ;; This function uses a non-reentrant model
 11947 ;;
 11948                           
 11949                           	psect	text83
 11950  00291E                     __ptext83:
 11951                           	opt stack 0
 11952  00291E                     _BlinkOkLeds:
 11953                           	opt stack 27
 11954                           
 11955                           ;incstack = 0
 11956                           ;BlinkOkLeds@state stored from wreg
 11957  00291E  6E1B               	movwf	BlinkOkLeds@state,c
 11958                           
 11959                           ;LedsApp.c: 26: for(int idx = 0; idx < state; idx++)
 11960  002920  0E00               	movlw	0
 11961  002922  6E1D               	movwf	BlinkOkLeds@idx+1,c
 11962  002924  0E00               	movlw	0
 11963  002926  6E1C               	movwf	BlinkOkLeds@idx,c
 11964  002928                     l5955:
 11965  002928  501B               	movf	BlinkOkLeds@state,w,c
 11966  00292A  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 11967  00292C  6A19               	clrf	(??_BlinkOkLeds+1)& (0+255),c
 11968  00292E  5018               	movf	??_BlinkOkLeds,w,c
 11969  002930  5C1C               	subwf	BlinkOkLeds@idx,w,c
 11970  002932  501D               	movf	BlinkOkLeds@idx+1,w,c
 11971  002934  0A80               	xorlw	128
 11972  002936  6E1A               	movwf	(??_BlinkOkLeds+2)& (0+255),c
 11973  002938  5019               	movf	??_BlinkOkLeds+1,w,c
 11974  00293A  0A80               	xorlw	128
 11975  00293C  581A               	subwfb	(??_BlinkOkLeds+2)& (0+255),w,c
 11976  00293E  B0D8               	btfsc	status,0,c
 11977  002940  0012               	return	
 11978                           
 11979                           ;LedsApp.c: 27: {
 11980                           ;LedsApp.c: 28: LATCbits.LATC0 = 0;
 11981  002942  908B               	bcf	3979,0,c	;volatile
 11982                           
 11983                           ;LedsApp.c: 29: _delay((unsigned long)((100)*(8000000/4000.0)));
 11984  002944  0E02               	movlw	2
 11985  002946  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 11986  002948  0E04               	movlw	4
 11987  00294A  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 11988  00294C  0EBA               	movlw	186
 11989  00294E                     u8147:
 11990  00294E  2EE8               	decfsz	wreg,f,c
 11991  002950  D7FE               	bra	u8147
 11992  002952  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 11993  002954  D7FC               	bra	u8147
 11994  002956  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 11995  002958  D7FA               	bra	u8147
 11996  00295A  D000               	nop2	
 11997                           
 11998                           ;LedsApp.c: 30: LATCbits.LATC0 = 1;
 11999  00295C  808B               	bsf	3979,0,c	;volatile
 12000                           
 12001                           ;LedsApp.c: 31: _delay((unsigned long)((100)*(8000000/4000.0)));
 12002  00295E  0E02               	movlw	2
 12003  002960  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 12004  002962  0E04               	movlw	4
 12005  002964  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 12006  002966  0EBA               	movlw	186
 12007  002968                     u8157:
 12008  002968  2EE8               	decfsz	wreg,f,c
 12009  00296A  D7FE               	bra	u8157
 12010  00296C  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 12011  00296E  D7FC               	bra	u8157
 12012  002970  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 12013  002972  D7FA               	bra	u8157
 12014  002974  D000               	nop2	
 12015  002976  4A1C               	infsnz	BlinkOkLeds@idx,f,c
 12016  002978  2A1D               	incf	BlinkOkLeds@idx+1,f,c
 12017  00297A  D7D6               	goto	l5955
 12018  00297C                     __end_of_BlinkOkLeds:
 12019                           	opt stack 0
 12020                           tosu	equ	0xFFF
 12021                           tosh	equ	0xFFE
 12022                           tosl	equ	0xFFD
 12023                           pclath	equ	0xFFA
 12024                           tblptru	equ	0xFF8
 12025                           tblptrh	equ	0xFF7
 12026                           tblptrl	equ	0xFF6
 12027                           tablat	equ	0xFF5
 12028                           prodh	equ	0xFF4
 12029                           prodl	equ	0xFF3
 12030                           intcon	equ	0xFF2
 12031                           intcon2	equ	0xFF1
 12032                           postinc0	equ	0xFEE
 12033                           wreg	equ	0xFE8
 12034                           indf1	equ	0xFE7
 12035                           postdec1	equ	0xFE5
 12036                           fsr1h	equ	0xFE2
 12037                           fsr1l	equ	0xFE1
 12038                           indf2	equ	0xFDF
 12039                           postinc2	equ	0xFDE
 12040                           postdec2	equ	0xFDD
 12041                           fsr2h	equ	0xFDA
 12042                           fsr2l	equ	0xFD9
 12043                           status	equ	0xFD8
 12044                           
 12045 ;; *************** function _BlinkErrorLeds *****************
 12046 ;; Defined at:
 12047 ;;		line 13 in file "LedsApp.c"
 12048 ;; Parameters:    Size  Location     Type
 12049 ;;  state           1    wreg     enum E7566
 12050 ;; Auto vars:     Size  Location     Type
 12051 ;;  state           1   26[COMRAM] enum E7566
 12052 ;;  idx             2   27[COMRAM] int 
 12053 ;; Return value:  Size  Location     Type
 12054 ;;                  1    wreg      void 
 12055 ;; Registers used:
 12056 ;;		wreg, status,2, status,0
 12057 ;; Tracked objects:
 12058 ;;		On entry : 0/0
 12059 ;;		On exit  : 0/0
 12060 ;;		Unchanged: 0/0
 12061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12062 ;;      Params:         0       0       0       0       0       0       0
 12063 ;;      Locals:         3       0       0       0       0       0       0
 12064 ;;      Temps:          3       0       0       0       0       0       0
 12065 ;;      Totals:         6       0       0       0       0       0       0
 12066 ;;Total ram usage:        6 bytes
 12067 ;; Hardware stack levels used:    1
 12068 ;; Hardware stack levels required when called:    3
 12069 ;; This function calls:
 12070 ;;		Nothing
 12071 ;; This function is called by:
 12072 ;;		_main
 12073 ;; This function uses a non-reentrant model
 12074 ;;
 12075                           
 12076                           	psect	text84
 12077  00297C                     __ptext84:
 12078                           	opt stack 0
 12079  00297C                     _BlinkErrorLeds:
 12080                           	opt stack 27
 12081                           
 12082                           ;incstack = 0
 12083                           ;BlinkErrorLeds@state stored from wreg
 12084  00297C  6E1B               	movwf	BlinkErrorLeds@state,c
 12085                           
 12086                           ;LedsApp.c: 15: for(int idx = 0; idx < state; idx++)
 12087  00297E  0E00               	movlw	0
 12088  002980  6E1D               	movwf	BlinkErrorLeds@idx+1,c
 12089  002982  0E00               	movlw	0
 12090  002984  6E1C               	movwf	BlinkErrorLeds@idx,c
 12091  002986                     l5943:
 12092  002986  501B               	movf	BlinkErrorLeds@state,w,c
 12093  002988  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 12094  00298A  6A19               	clrf	(??_BlinkErrorLeds+1)& (0+255),c
 12095  00298C  5018               	movf	??_BlinkErrorLeds,w,c
 12096  00298E  5C1C               	subwf	BlinkErrorLeds@idx,w,c
 12097  002990  501D               	movf	BlinkErrorLeds@idx+1,w,c
 12098  002992  0A80               	xorlw	128
 12099  002994  6E1A               	movwf	(??_BlinkErrorLeds+2)& (0+255),c
 12100  002996  5019               	movf	??_BlinkErrorLeds+1,w,c
 12101  002998  0A80               	xorlw	128
 12102  00299A  581A               	subwfb	(??_BlinkErrorLeds+2)& (0+255),w,c
 12103  00299C  B0D8               	btfsc	status,0,c
 12104  00299E  0012               	return	
 12105                           
 12106                           ;LedsApp.c: 16: {
 12107                           ;LedsApp.c: 17: LATBbits.LATB4 = 0;
 12108  0029A0  988A               	bcf	3978,4,c	;volatile
 12109                           
 12110                           ;LedsApp.c: 18: _delay((unsigned long)((100)*(8000000/4000.0)));
 12111  0029A2  0E02               	movlw	2
 12112  0029A4  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
 12113  0029A6  0E04               	movlw	4
 12114  0029A8  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 12115  0029AA  0EBA               	movlw	186
 12116  0029AC                     u8167:
 12117  0029AC  2EE8               	decfsz	wreg,f,c
 12118  0029AE  D7FE               	bra	u8167
 12119  0029B0  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
 12120  0029B2  D7FC               	bra	u8167
 12121  0029B4  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
 12122  0029B6  D7FA               	bra	u8167
 12123  0029B8  D000               	nop2	
 12124                           
 12125                           ;LedsApp.c: 19: LATBbits.LATB4 = 1;
 12126  0029BA  888A               	bsf	3978,4,c	;volatile
 12127                           
 12128                           ;LedsApp.c: 20: _delay((unsigned long)((100)*(8000000/4000.0)));
 12129  0029BC  0E02               	movlw	2
 12130  0029BE  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
 12131  0029C0  0E04               	movlw	4
 12132  0029C2  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 12133  0029C4  0EBA               	movlw	186
 12134  0029C6                     u8177:
 12135  0029C6  2EE8               	decfsz	wreg,f,c
 12136  0029C8  D7FE               	bra	u8177
 12137  0029CA  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
 12138  0029CC  D7FC               	bra	u8177
 12139  0029CE  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
 12140  0029D0  D7FA               	bra	u8177
 12141  0029D2  D000               	nop2	
 12142  0029D4  4A1C               	infsnz	BlinkErrorLeds@idx,f,c
 12143  0029D6  2A1D               	incf	BlinkErrorLeds@idx+1,f,c
 12144  0029D8  D7D6               	goto	l5943
 12145  0029DA                     __end_of_BlinkErrorLeds:
 12146                           	opt stack 0
 12147                           tosu	equ	0xFFF
 12148                           tosh	equ	0xFFE
 12149                           tosl	equ	0xFFD
 12150                           pclath	equ	0xFFA
 12151                           tblptru	equ	0xFF8
 12152                           tblptrh	equ	0xFF7
 12153                           tblptrl	equ	0xFF6
 12154                           tablat	equ	0xFF5
 12155                           prodh	equ	0xFF4
 12156                           prodl	equ	0xFF3
 12157                           intcon	equ	0xFF2
 12158                           intcon2	equ	0xFF1
 12159                           postinc0	equ	0xFEE
 12160                           wreg	equ	0xFE8
 12161                           indf1	equ	0xFE7
 12162                           postdec1	equ	0xFE5
 12163                           fsr1h	equ	0xFE2
 12164                           fsr1l	equ	0xFE1
 12165                           indf2	equ	0xFDF
 12166                           postinc2	equ	0xFDE
 12167                           postdec2	equ	0xFDD
 12168                           fsr2h	equ	0xFDA
 12169                           fsr2l	equ	0xFD9
 12170                           status	equ	0xFD8
 12171                           
 12172 ;; *************** function _AdcConvert *****************
 12173 ;; Defined at:
 12174 ;;		line 56 in file "AdcApp.c"
 12175 ;; Parameters:    Size  Location     Type
 12176 ;;		None
 12177 ;; Auto vars:     Size  Location     Type
 12178 ;;  _adcResult      2   83[BANK0 ] unsigned int 
 12179 ;;  idx             1   92[BANK0 ] unsigned char 
 12180 ;;  _adcResult      2   85[BANK0 ] unsigned int 
 12181 ;;  adcRes          2   90[BANK0 ] unsigned int 
 12182 ;; Return value:  Size  Location     Type
 12183 ;;                  1    wreg      void 
 12184 ;; Registers used:
 12185 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12186 ;; Tracked objects:
 12187 ;;		On entry : 0/0
 12188 ;;		On exit  : 0/0
 12189 ;;		Unchanged: 0/0
 12190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12191 ;;      Params:         0       0       0       0       0       0       0
 12192 ;;      Locals:         0      10       0       0       0       0       0
 12193 ;;      Temps:          0       2       0       0       0       0       0
 12194 ;;      Totals:         0      12       0       0       0       0       0
 12195 ;;Total ram usage:       12 bytes
 12196 ;; Hardware stack levels used:    1
 12197 ;; Hardware stack levels required when called:    8
 12198 ;; This function calls:
 12199 ;;		_ADC_GetConversion
 12200 ;;		_FlashSampleWrite
 12201 ;;		___ftdiv
 12202 ;;		___ftmul
 12203 ;;		___fttol
 12204 ;;		___lwtoft
 12205 ;;		_pow
 12206 ;; This function is called by:
 12207 ;;		_main
 12208 ;; This function uses a non-reentrant model
 12209 ;;
 12210                           
 12211                           	psect	text85
 12212  000FFC                     __ptext85:
 12213                           	opt stack 0
 12214  000FFC                     _AdcConvert:
 12215                           	opt stack 22
 12216                           
 12217                           ;AdcApp.c: 61: uint16_t adcRes = 0;
 12218                           
 12219                           ;incstack = 0
 12220  000FFC  0E00               	movlw	0
 12221  000FFE  0100               	movlb	0	; () banked
 12222  001000  6FBB               	movwf	(AdcConvert@adcRes+1)& (0+255),b
 12223  001002  0E00               	movlw	0
 12224  001004  6FBA               	movwf	AdcConvert@adcRes& (0+255),b
 12225                           
 12226                           ;AdcApp.c: 63: if (adcSampleMode == CIRCULAR)
 12227  001006  503D               	movf	_adcSampleMode,w,c
 12228  001008  A4D8               	btfss	status,2,c
 12229  00100A  D073               	goto	l108
 12230                           
 12231                           ; BSR set to: 0
 12232                           ;AdcApp.c: 64: {
 12233                           ;AdcApp.c: 65: for(uint8_t idx = 0; idx < (7); idx++)
 12234  00100C  0E00               	movlw	0
 12235  00100E  6FBC               	movwf	AdcConvert@idx& (0+255),b
 12236  001010                     l7761:
 12237                           
 12238                           ; BSR set to: 0
 12239  001010  0E06               	movlw	6
 12240  001012  65BC               	cpfsgt	AdcConvert@idx& (0+255),b
 12241  001014  D001               	goto	l109
 12242  001016  0012               	return	
 12243  001018                     l109:
 12244                           
 12245                           ; BSR set to: 0
 12246                           ;AdcApp.c: 66: {
 12247                           ;AdcApp.c: 67: adc_result_t _adcResult = ADC_GetConversion(channelArr[idx]);
 12248                           
 12249                           ; BSR set to: 0
 12250  001018  51BC               	movf	AdcConvert@idx& (0+255),w,b
 12251  00101A  0D01               	mullw	1
 12252  00101C  0E35               	movlw	low _channelArr
 12253  00101E  24F3               	addwf	prodl,w,c
 12254  001020  6EF6               	movwf	tblptrl,c
 12255  001022  0E06               	movlw	high _channelArr
 12256  001024  20F4               	addwfc	prodh,w,c
 12257  001026  6EF7               	movwf	tblptrh,c
 12258  001028                     	if	0	;There are less than 3 active tblptr bytes
 12259  001028                     	endif
 12260  001028  0008               	tblrd		*
 12261  00102A  50F5               	movf	tablat,w,c
 12262  00102C  EC04  F01A         	call	_ADC_GetConversion
 12263  001030  C018  F0B3         	movff	?_ADC_GetConversion,AdcConvert@_adcResult
 12264  001034  C019  F0B4         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult+1
 12265                           
 12266                           ;AdcApp.c: 68: adcRes = (_adcResult/pow(2,(10)))*(3340);
 12267  001038  0E00               	movlw	0
 12268  00103A  0100               	movlb	0	; () banked
 12269  00103C  6FA3               	movwf	pow@y& (0+255),b
 12270  00103E  0E20               	movlw	32
 12271  001040  6FA4               	movwf	(pow@y+1)& (0+255),b
 12272  001042  0E41               	movlw	65
 12273  001044  6FA5               	movwf	(pow@y+2)& (0+255),b
 12274  001046  0E00               	movlw	0
 12275  001048  6FA0               	movwf	pow@x& (0+255),b
 12276  00104A  0E00               	movlw	0
 12277  00104C  6FA1               	movwf	(pow@x+1)& (0+255),b
 12278  00104E  0E40               	movlw	64
 12279  001050  6FA2               	movwf	(pow@x+2)& (0+255),b
 12280  001052  ECB0  F009         	call	_pow	;wreg free
 12281  001056  C0A0  F0B7         	movff	?_pow,_AdcConvert$3234
 12282  00105A  C0A1  F0B8         	movff	?_pow+1,_AdcConvert$3234+1
 12283  00105E  C0A2  F0B9         	movff	?_pow+2,_AdcConvert$3234+2
 12284                           
 12285                           ;AdcApp.c: 68: adcRes = (_adcResult/pow(2,(10)))*(3340);
 12286  001062  0EC0               	movlw	192
 12287  001064  0100               	movlb	0	; () banked
 12288  001066  6F6C               	movwf	___ftmul@f2& (0+255),b
 12289  001068  0E50               	movlw	80
 12290  00106A  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 12291  00106C  0E45               	movlw	69
 12292  00106E  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 12293  001070  C0B7  F02C         	movff	_AdcConvert$3234,___ftdiv@f2
 12294  001074  C0B8  F02D         	movff	_AdcConvert$3234+1,___ftdiv@f2+1
 12295  001078  C0B9  F02E         	movff	_AdcConvert$3234+2,___ftdiv@f2+2
 12296  00107C  C0B3  F020         	movff	AdcConvert@_adcResult,___lwtoft@c
 12297  001080  C0B4  F021         	movff	AdcConvert@_adcResult+1,___lwtoft@c+1
 12298  001084  ECBD  F01A         	call	___lwtoft	;wreg free
 12299  001088  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 12300  00108C  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 12301  001090  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 12302  001094  ECF9  F00C         	call	___ftdiv	;wreg free
 12303  001098  C029  F069         	movff	?___ftdiv,___ftmul@f1
 12304  00109C  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 12305  0010A0  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 12306  0010A4  EC7E  F00C         	call	___ftmul	;wreg free
 12307  0010A8  C069  F078         	movff	?___ftmul,___fttol@f1
 12308  0010AC  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 12309  0010B0  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 12310  0010B4  EC02  F00C         	call	___fttol	;wreg free
 12311  0010B8  C078  F0BA         	movff	?___fttol,AdcConvert@adcRes
 12312  0010BC  C079  F0BB         	movff	?___fttol+1,AdcConvert@adcRes+1
 12313                           
 12314                           ;AdcApp.c: 69: FlashSampleWrite(adcRes, idx + 1);
 12315  0010C0  C0BA  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 12316  0010C4  C0BB  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 12317  0010C8  0100               	movlb	0	; () banked
 12318  0010CA  29BC               	incf	AdcConvert@idx& (0+255),w,b
 12319  0010CC  6E2F               	movwf	FlashSampleWrite@channelNum,c
 12320  0010CE  EC85  F00B         	call	_FlashSampleWrite	;wreg free
 12321                           
 12322                           ;AdcApp.c: 70: _delay((unsigned long)((250)*(8000000/4000.0)));
 12323  0010D2  0E03               	movlw	3
 12324  0010D4  0100               	movlb	0	; () banked
 12325  0010D6  6FB2               	movwf	(??_AdcConvert+1)& (0+255),b
 12326  0010D8  0E8A               	movlw	138
 12327  0010DA  6FB1               	movwf	??_AdcConvert& (0+255),b
 12328  0010DC  0E55               	movlw	85
 12329  0010DE                     u8187:
 12330  0010DE  2EE8               	decfsz	wreg,f,c
 12331  0010E0  D7FE               	bra	u8187
 12332  0010E2  2FB1               	decfsz	??_AdcConvert& (0+255),f,b
 12333  0010E4  D7FC               	bra	u8187
 12334  0010E6  2FB2               	decfsz	(??_AdcConvert+1)& (0+255),f,b
 12335  0010E8  D7FA               	bra	u8187
 12336  0010EA  D000               	nop2	
 12337  0010EC  0100               	movlb	0	; () banked
 12338  0010EE  2BBC               	incf	AdcConvert@idx& (0+255),f,b
 12339  0010F0  D78F               	goto	l7761
 12340  0010F2                     l108:
 12341                           
 12342                           ; BSR set to: 0
 12343                           ;AdcApp.c: 73: else if (adcSampleMode == SINGLE_CHANNEL)
 12344                           
 12345                           ; BSR set to: 0
 12346  0010F2  043D               	decf	_adcSampleMode,w,c
 12347  0010F4  A4D8               	btfss	status,2,c
 12348  0010F6  0012               	return	
 12349                           
 12350                           ; BSR set to: 0
 12351                           ;AdcApp.c: 74: {
 12352                           ;AdcApp.c: 75: adc_result_t _adcResult = ADC_GetConversion(channelArr[channel]);
 12353  0010F8  51D4               	movf	_channel& (0+255),w,b
 12354  0010FA  0D01               	mullw	1
 12355  0010FC  0E35               	movlw	low _channelArr
 12356  0010FE  24F3               	addwf	prodl,w,c
 12357  001100  6EF6               	movwf	tblptrl,c
 12358  001102  0E06               	movlw	high _channelArr
 12359  001104  20F4               	addwfc	prodh,w,c
 12360  001106  6EF7               	movwf	tblptrh,c
 12361  001108                     	if	0	;There are less than 3 active tblptr bytes
 12362  001108                     	endif
 12363  001108  0008               	tblrd		*
 12364  00110A  50F5               	movf	tablat,w,c
 12365  00110C  EC04  F01A         	call	_ADC_GetConversion
 12366  001110  C018  F0B5         	movff	?_ADC_GetConversion,AdcConvert@_adcResult_330
 12367  001114  C019  F0B6         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult_330+1
 12368                           
 12369                           ;AdcApp.c: 76: adcRes = (_adcResult/pow(2,(10)))*(3340);
 12370  001118  0E00               	movlw	0
 12371  00111A  0100               	movlb	0	; () banked
 12372  00111C  6FA3               	movwf	pow@y& (0+255),b
 12373  00111E  0E20               	movlw	32
 12374  001120  6FA4               	movwf	(pow@y+1)& (0+255),b
 12375  001122  0E41               	movlw	65
 12376  001124  6FA5               	movwf	(pow@y+2)& (0+255),b
 12377  001126  0E00               	movlw	0
 12378  001128  6FA0               	movwf	pow@x& (0+255),b
 12379  00112A  0E00               	movlw	0
 12380  00112C  6FA1               	movwf	(pow@x+1)& (0+255),b
 12381  00112E  0E40               	movlw	64
 12382  001130  6FA2               	movwf	(pow@x+2)& (0+255),b
 12383  001132  ECB0  F009         	call	_pow	;wreg free
 12384  001136  C0A0  F0B7         	movff	?_pow,_AdcConvert$3234
 12385  00113A  C0A1  F0B8         	movff	?_pow+1,_AdcConvert$3234+1
 12386  00113E  C0A2  F0B9         	movff	?_pow+2,_AdcConvert$3234+2
 12387                           
 12388                           ;AdcApp.c: 76: adcRes = (_adcResult/pow(2,(10)))*(3340);
 12389  001142  0EC0               	movlw	192
 12390  001144  0100               	movlb	0	; () banked
 12391  001146  6F6C               	movwf	___ftmul@f2& (0+255),b
 12392  001148  0E50               	movlw	80
 12393  00114A  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 12394  00114C  0E45               	movlw	69
 12395  00114E  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 12396  001150  C0B7  F02C         	movff	_AdcConvert$3234,___ftdiv@f2
 12397  001154  C0B8  F02D         	movff	_AdcConvert$3234+1,___ftdiv@f2+1
 12398  001158  C0B9  F02E         	movff	_AdcConvert$3234+2,___ftdiv@f2+2
 12399  00115C  C0B5  F020         	movff	AdcConvert@_adcResult_330,___lwtoft@c
 12400  001160  C0B6  F021         	movff	AdcConvert@_adcResult_330+1,___lwtoft@c+1
 12401  001164  ECBD  F01A         	call	___lwtoft	;wreg free
 12402  001168  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 12403  00116C  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 12404  001170  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 12405  001174  ECF9  F00C         	call	___ftdiv	;wreg free
 12406  001178  C029  F069         	movff	?___ftdiv,___ftmul@f1
 12407  00117C  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 12408  001180  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 12409  001184  EC7E  F00C         	call	___ftmul	;wreg free
 12410  001188  C069  F078         	movff	?___ftmul,___fttol@f1
 12411  00118C  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 12412  001190  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 12413  001194  EC02  F00C         	call	___fttol	;wreg free
 12414  001198  C078  F0BA         	movff	?___fttol,AdcConvert@adcRes
 12415  00119C  C079  F0BB         	movff	?___fttol+1,AdcConvert@adcRes+1
 12416                           
 12417                           ;AdcApp.c: 77: FlashSampleWrite(adcRes, 1);
 12418  0011A0  C0BA  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 12419  0011A4  C0BB  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 12420  0011A8  0E01               	movlw	1
 12421  0011AA  6E2F               	movwf	FlashSampleWrite@channelNum,c
 12422  0011AC  EC85  F00B         	call	_FlashSampleWrite	;wreg free
 12423  0011B0  0012               	return	
 12424  0011B2                     __end_of_AdcConvert:
 12425                           	opt stack 0
 12426                           tosu	equ	0xFFF
 12427                           tosh	equ	0xFFE
 12428                           tosl	equ	0xFFD
 12429                           pclath	equ	0xFFA
 12430                           tblptru	equ	0xFF8
 12431                           tblptrh	equ	0xFF7
 12432                           tblptrl	equ	0xFF6
 12433                           tablat	equ	0xFF5
 12434                           prodh	equ	0xFF4
 12435                           prodl	equ	0xFF3
 12436                           intcon	equ	0xFF2
 12437                           intcon2	equ	0xFF1
 12438                           postinc0	equ	0xFEE
 12439                           wreg	equ	0xFE8
 12440                           indf1	equ	0xFE7
 12441                           postdec1	equ	0xFE5
 12442                           fsr1h	equ	0xFE2
 12443                           fsr1l	equ	0xFE1
 12444                           indf2	equ	0xFDF
 12445                           postinc2	equ	0xFDE
 12446                           postdec2	equ	0xFDD
 12447                           fsr2h	equ	0xFDA
 12448                           fsr2l	equ	0xFD9
 12449                           status	equ	0xFD8
 12450                           
 12451 ;; *************** function _pow *****************
 12452 ;; Defined at:
 12453 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
 12454 ;; Parameters:    Size  Location     Type
 12455 ;;  x               3   64[BANK0 ] void 
 12456 ;;  y               3   67[BANK0 ] void 
 12457 ;; Auto vars:     Size  Location     Type
 12458 ;;  yi              4   77[BANK0 ] unsigned long 
 12459 ;;  sign            1   76[BANK0 ] unsigned char 
 12460 ;; Return value:  Size  Location     Type
 12461 ;;                  3   64[BANK0 ] unsigned char 
 12462 ;; Registers used:
 12463 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12464 ;; Tracked objects:
 12465 ;;		On entry : 0/0
 12466 ;;		On exit  : 0/0
 12467 ;;		Unchanged: 0/0
 12468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12469 ;;      Params:         0       6       0       0       0       0       0
 12470 ;;      Locals:         0      11       0       0       0       0       0
 12471 ;;      Temps:          0       0       0       0       0       0       0
 12472 ;;      Totals:         0      17       0       0       0       0       0
 12473 ;;Total ram usage:       17 bytes
 12474 ;; Hardware stack levels used:    1
 12475 ;; Hardware stack levels required when called:    7
 12476 ;; This function calls:
 12477 ;;		___ftge
 12478 ;;		___ftmul
 12479 ;;		___ftneg
 12480 ;;		___fttol
 12481 ;;		___lltoft
 12482 ;;		_exp
 12483 ;;		_log
 12484 ;; This function is called by:
 12485 ;;		_AdcConvert
 12486 ;; This function uses a non-reentrant model
 12487 ;;
 12488                           
 12489                           	psect	text86
 12490  001360                     __ptext86:
 12491                           	opt stack 0
 12492  001360                     _pow:
 12493                           	opt stack 22
 12494                           
 12495                           ;incstack = 0
 12496  001360  0E00               	movlw	0
 12497  001362  0100               	movlb	0	; () banked
 12498  001364  6FAC               	movwf	pow@sign& (0+255),b
 12499                           
 12500                           ; BSR set to: 0
 12501  001366  51A0               	movf	pow@x& (0+255),w,b
 12502  001368  11A1               	iorwf	(pow@x+1)& (0+255),w,b
 12503  00136A  11A2               	iorwf	(pow@x+2)& (0+255),w,b
 12504  00136C  A4D8               	btfss	status,2,c
 12505  00136E  D01D               	goto	l1814
 12506                           
 12507                           ; BSR set to: 0
 12508  001370  0E00               	movlw	0
 12509  001372  6E18               	movwf	___ftge@ff1,c
 12510  001374  0E00               	movlw	0
 12511  001376  6E19               	movwf	___ftge@ff1+1,c
 12512  001378  0E00               	movlw	0
 12513  00137A  6E1A               	movwf	___ftge@ff1+2,c
 12514  00137C  C0A3  F01B         	movff	pow@y,___ftge@ff2
 12515  001380  C0A4  F01C         	movff	pow@y+1,___ftge@ff2+1
 12516  001384  C0A5  F01D         	movff	pow@y+2,___ftge@ff2+2
 12517  001388  EC0D  F012         	call	___ftge	;wreg free
 12518  00138C  A0D8               	btfss	status,0,c
 12519  00138E  D005               	goto	l1815
 12520  001390  0E00               	movlw	0
 12521  001392  0100               	movlb	0	; () banked
 12522  001394  6FC6               	movwf	(_errno+1)& (0+255),b
 12523  001396  0E21               	movlw	33
 12524  001398  6FC5               	movwf	_errno& (0+255),b
 12525  00139A                     l1815:
 12526  00139A  0E00               	movlw	0
 12527  00139C  0100               	movlb	0	; () banked
 12528  00139E  6FA0               	movwf	?_pow& (0+255),b
 12529  0013A0  0E00               	movlw	0
 12530  0013A2  6FA1               	movwf	(?_pow+1)& (0+255),b
 12531  0013A4  0E00               	movlw	0
 12532  0013A6  6FA2               	movwf	(?_pow+2)& (0+255),b
 12533                           
 12534                           ; BSR set to: 0
 12535  0013A8  0012               	return	
 12536  0013AA                     l1814:
 12537                           
 12538                           ; BSR set to: 0
 12539                           
 12540                           ; BSR set to: 0
 12541  0013AA  51A3               	movf	pow@y& (0+255),w,b
 12542  0013AC  11A4               	iorwf	(pow@y+1)& (0+255),w,b
 12543  0013AE  11A5               	iorwf	(pow@y+2)& (0+255),w,b
 12544  0013B0  A4D8               	btfss	status,2,c
 12545  0013B2  D007               	goto	l1817
 12546                           
 12547                           ; BSR set to: 0
 12548  0013B4  0E00               	movlw	0
 12549  0013B6  6FA0               	movwf	?_pow& (0+255),b
 12550  0013B8  0E80               	movlw	128
 12551  0013BA  6FA1               	movwf	(?_pow+1)& (0+255),b
 12552  0013BC  0E3F               	movlw	63
 12553  0013BE  6FA2               	movwf	(?_pow+2)& (0+255),b
 12554                           
 12555                           ; BSR set to: 0
 12556  0013C0  0012               	return	
 12557  0013C2                     l1817:
 12558                           
 12559                           ; BSR set to: 0
 12560                           
 12561                           ; BSR set to: 0
 12562  0013C2  AFA2               	btfss	(pow@x+2)& (0+255),7,b
 12563  0013C4  D041               	goto	l1818
 12564                           
 12565                           ; BSR set to: 0
 12566  0013C6  C0A3  F078         	movff	pow@y,___fttol@f1
 12567  0013CA  C0A4  F079         	movff	pow@y+1,___fttol@f1+1
 12568  0013CE  C0A5  F07A         	movff	pow@y+2,___fttol@f1+2
 12569  0013D2  EC02  F00C         	call	___fttol	;wreg free
 12570  0013D6  C078  F0AD         	movff	?___fttol,pow@yi
 12571  0013DA  C079  F0AE         	movff	?___fttol+1,pow@yi+1
 12572  0013DE  C07A  F0AF         	movff	?___fttol+2,pow@yi+2
 12573  0013E2  C07B  F0B0         	movff	?___fttol+3,pow@yi+3
 12574  0013E6  C0AD  F020         	movff	pow@yi,___lltoft@c
 12575  0013EA  C0AE  F021         	movff	pow@yi+1,___lltoft@c+1
 12576  0013EE  C0AF  F022         	movff	pow@yi+2,___lltoft@c+2
 12577  0013F2  C0B0  F023         	movff	pow@yi+3,___lltoft@c+3
 12578  0013F6  EC49  F015         	call	___lltoft	;wreg free
 12579  0013FA  0100               	movlb	0	; () banked
 12580  0013FC  51A3               	movf	pow@y& (0+255),w,b
 12581  0013FE  1820               	xorwf	?___lltoft,w,c
 12582  001400  E107               	bnz	u7660
 12583  001402  51A4               	movf	(pow@y+1)& (0+255),w,b
 12584  001404  1821               	xorwf	?___lltoft+1,w,c
 12585  001406  E104               	bnz	u7660
 12586  001408  51A5               	movf	(pow@y+2)& (0+255),w,b
 12587  00140A  1822               	xorwf	?___lltoft+2,w,c
 12588  00140C  B4D8               	btfsc	status,2,c
 12589  00140E  D00B               	goto	l1819
 12590  001410                     u7660:
 12591                           
 12592                           ; BSR set to: 0
 12593  001410  0E00               	movlw	0
 12594  001412  6FC6               	movwf	(_errno+1)& (0+255),b
 12595  001414  0E21               	movlw	33
 12596  001416  6FC5               	movwf	_errno& (0+255),b
 12597  001418  0E00               	movlw	0
 12598  00141A  6FA0               	movwf	?_pow& (0+255),b
 12599  00141C  0E00               	movlw	0
 12600  00141E  6FA1               	movwf	(?_pow+1)& (0+255),b
 12601  001420  0E00               	movlw	0
 12602  001422  6FA2               	movwf	(?_pow+2)& (0+255),b
 12603                           
 12604                           ; BSR set to: 0
 12605  001424  0012               	return	
 12606  001426                     l1819:
 12607                           
 12608                           ; BSR set to: 0
 12609                           
 12610                           ; BSR set to: 0
 12611  001426  51AD               	movf	pow@yi& (0+255),w,b
 12612  001428  0B01               	andlw	1
 12613  00142A  6FAC               	movwf	pow@sign& (0+255),b
 12614                           
 12615                           ; BSR set to: 0
 12616  00142C  C0A0  F018         	movff	pow@x,___ftneg@f1
 12617  001430  C0A1  F019         	movff	pow@x+1,___ftneg@f1+1
 12618  001434  C0A2  F01A         	movff	pow@x+2,___ftneg@f1+2
 12619  001438  ECAB  F01A         	call	___ftneg	;wreg free
 12620  00143C  C018  F0A0         	movff	?___ftneg,pow@x
 12621  001440  C019  F0A1         	movff	?___ftneg+1,pow@x+1
 12622  001444  C01A  F0A2         	movff	?___ftneg+2,pow@x+2
 12623  001448                     l1818:
 12624  001448  C0A0  F08E         	movff	pow@x,log@x
 12625  00144C  C0A1  F08F         	movff	pow@x+1,log@x+1
 12626  001450  C0A2  F090         	movff	pow@x+2,log@x+2
 12627  001454  EC6E  F00A         	call	_log	;wreg free
 12628  001458  C08E  F0A6         	movff	?_log,_pow$3235
 12629  00145C  C08F  F0A7         	movff	?_log+1,_pow$3235+1
 12630  001460  C090  F0A8         	movff	?_log+2,_pow$3235+2
 12631  001464  C0A6  F069         	movff	_pow$3235,___ftmul@f1
 12632  001468  C0A7  F06A         	movff	_pow$3235+1,___ftmul@f1+1
 12633  00146C  C0A8  F06B         	movff	_pow$3235+2,___ftmul@f1+2
 12634  001470  C0A3  F06C         	movff	pow@y,___ftmul@f2
 12635  001474  C0A4  F06D         	movff	pow@y+1,___ftmul@f2+1
 12636  001478  C0A5  F06E         	movff	pow@y+2,___ftmul@f2+2
 12637  00147C  EC7E  F00C         	call	___ftmul	;wreg free
 12638  001480  C069  F0A9         	movff	?___ftmul,_pow$3236
 12639  001484  C06A  F0AA         	movff	?___ftmul+1,_pow$3236+1
 12640  001488  C06B  F0AB         	movff	?___ftmul+2,_pow$3236+2
 12641  00148C  C0A9  F097         	movff	_pow$3236,exp@x
 12642  001490  C0AA  F098         	movff	_pow$3236+1,exp@x+1
 12643  001494  C0AB  F099         	movff	_pow$3236+2,exp@x+2
 12644  001498  EC1A  F006         	call	_exp	;wreg free
 12645  00149C  C097  F0A0         	movff	?_exp,pow@x
 12646  0014A0  C098  F0A1         	movff	?_exp+1,pow@x+1
 12647  0014A4  C099  F0A2         	movff	?_exp+2,pow@x+2
 12648  0014A8  0100               	movlb	0	; () banked
 12649  0014AA  51AC               	movf	pow@sign& (0+255),w,b
 12650  0014AC  B4D8               	btfsc	status,2,c
 12651  0014AE  D00F               	goto	l1820
 12652                           
 12653                           ; BSR set to: 0
 12654  0014B0  C0A0  F018         	movff	pow@x,___ftneg@f1
 12655  0014B4  C0A1  F019         	movff	pow@x+1,___ftneg@f1+1
 12656  0014B8  C0A2  F01A         	movff	pow@x+2,___ftneg@f1+2
 12657  0014BC  ECAB  F01A         	call	___ftneg	;wreg free
 12658  0014C0  C018  F0A0         	movff	?___ftneg,?_pow
 12659  0014C4  C019  F0A1         	movff	?___ftneg+1,?_pow+1
 12660  0014C8  C01A  F0A2         	movff	?___ftneg+2,?_pow+2
 12661  0014CC  0012               	return	
 12662  0014CE                     l1820:
 12663                           
 12664                           ; BSR set to: 0
 12665  0014CE  C0A0  F0A0         	movff	pow@x,?_pow
 12666  0014D2  C0A1  F0A1         	movff	pow@x+1,?_pow+1
 12667  0014D6  C0A2  F0A2         	movff	pow@x+2,?_pow+2
 12668  0014DA  0012               	return		;funcret
 12669  0014DC                     __end_of_pow:
 12670                           	opt stack 0
 12671                           tosu	equ	0xFFF
 12672                           tosh	equ	0xFFE
 12673                           tosl	equ	0xFFD
 12674                           pclath	equ	0xFFA
 12675                           tblptru	equ	0xFF8
 12676                           tblptrh	equ	0xFF7
 12677                           tblptrl	equ	0xFF6
 12678                           tablat	equ	0xFF5
 12679                           prodh	equ	0xFF4
 12680                           prodl	equ	0xFF3
 12681                           intcon	equ	0xFF2
 12682                           intcon2	equ	0xFF1
 12683                           postinc0	equ	0xFEE
 12684                           wreg	equ	0xFE8
 12685                           indf1	equ	0xFE7
 12686                           postdec1	equ	0xFE5
 12687                           fsr1h	equ	0xFE2
 12688                           fsr1l	equ	0xFE1
 12689                           indf2	equ	0xFDF
 12690                           postinc2	equ	0xFDE
 12691                           postdec2	equ	0xFDD
 12692                           fsr2h	equ	0xFDA
 12693                           fsr2l	equ	0xFD9
 12694                           status	equ	0xFD8
 12695                           
 12696 ;; *************** function _log *****************
 12697 ;; Defined at:
 12698 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
 12699 ;; Parameters:    Size  Location     Type
 12700 ;;  x               3   46[BANK0 ] unsigned char 
 12701 ;; Auto vars:     Size  Location     Type
 12702 ;;  exponent        2   49[BANK0 ] int 
 12703 ;; Return value:  Size  Location     Type
 12704 ;;                  3   46[BANK0 ] int 
 12705 ;; Registers used:
 12706 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12707 ;; Tracked objects:
 12708 ;;		On entry : 0/0
 12709 ;;		On exit  : 0/0
 12710 ;;		Unchanged: 0/0
 12711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12712 ;;      Params:         0       3       0       0       0       0       0
 12713 ;;      Locals:         0       2       0       0       0       0       0
 12714 ;;      Temps:          0       0       0       0       0       0       0
 12715 ;;      Totals:         0       5       0       0       0       0       0
 12716 ;;Total ram usage:        5 bytes
 12717 ;; Hardware stack levels used:    1
 12718 ;; Hardware stack levels required when called:    6
 12719 ;; This function calls:
 12720 ;;		___awtoft
 12721 ;;		___ftadd
 12722 ;;		___ftmul
 12723 ;;		_eval_poly
 12724 ;;		_frexp
 12725 ;; This function is called by:
 12726 ;;		_pow
 12727 ;; This function uses a non-reentrant model
 12728 ;;
 12729                           
 12730                           	psect	text87
 12731  0014DC                     __ptext87:
 12732                           	opt stack 0
 12733  0014DC                     _log:
 12734                           	opt stack 22
 12735                           
 12736                           ;incstack = 0
 12737  0014DC  0100               	movlb	0	; () banked
 12738  0014DE  AF90               	btfss	(log@x+2)& (0+255),7,b
 12739  0014E0  D00B               	goto	l2076
 12740                           
 12741                           ; BSR set to: 0
 12742  0014E2  0E00               	movlw	0
 12743  0014E4  6FC6               	movwf	(_errno+1)& (0+255),b
 12744  0014E6  0E21               	movlw	33
 12745  0014E8  6FC5               	movwf	_errno& (0+255),b
 12746  0014EA  0E00               	movlw	0
 12747  0014EC  6F8E               	movwf	?_log& (0+255),b
 12748  0014EE  0E00               	movlw	0
 12749  0014F0  6F8F               	movwf	(?_log+1)& (0+255),b
 12750  0014F2  0E00               	movlw	0
 12751  0014F4  6F90               	movwf	(?_log+2)& (0+255),b
 12752                           
 12753                           ; BSR set to: 0
 12754  0014F6  0012               	return	
 12755  0014F8                     l2076:
 12756                           
 12757                           ; BSR set to: 0
 12758                           
 12759                           ; BSR set to: 0
 12760  0014F8  518E               	movf	log@x& (0+255),w,b
 12761  0014FA  118F               	iorwf	(log@x+1)& (0+255),w,b
 12762  0014FC  1190               	iorwf	(log@x+2)& (0+255),w,b
 12763  0014FE  A4D8               	btfss	status,2,c
 12764  001500  D00B               	goto	l2078
 12765                           
 12766                           ; BSR set to: 0
 12767  001502  0E00               	movlw	0
 12768  001504  6FC6               	movwf	(_errno+1)& (0+255),b
 12769  001506  0E22               	movlw	34
 12770  001508  6FC5               	movwf	_errno& (0+255),b
 12771  00150A  0E00               	movlw	0
 12772  00150C  6F8E               	movwf	?_log& (0+255),b
 12773  00150E  0E00               	movlw	0
 12774  001510  6F8F               	movwf	(?_log+1)& (0+255),b
 12775  001512  0E00               	movlw	0
 12776  001514  6F90               	movwf	(?_log+2)& (0+255),b
 12777                           
 12778                           ; BSR set to: 0
 12779  001516  0012               	return	
 12780  001518                     l2078:
 12781                           
 12782                           ; BSR set to: 0
 12783                           
 12784                           ; BSR set to: 0
 12785  001518  0E00               	movlw	0
 12786  00151A  6F6C               	movwf	___ftmul@f2& (0+255),b
 12787  00151C  0E00               	movlw	0
 12788  00151E  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 12789  001520  0E40               	movlw	64
 12790  001522  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 12791  001524  0E91               	movlw	low log@exponent
 12792  001526  6E1B               	movwf	frexp@eptr,c
 12793  001528  0E00               	movlw	high log@exponent
 12794  00152A  6E1C               	movwf	frexp@eptr+1,c
 12795  00152C  C08E  F018         	movff	log@x,frexp@value
 12796  001530  C08F  F019         	movff	log@x+1,frexp@value+1
 12797  001534  C090  F01A         	movff	log@x+2,frexp@value+2
 12798  001538  ECC5  F011         	call	_frexp	;wreg free
 12799  00153C  C018  F069         	movff	?_frexp,___ftmul@f1
 12800  001540  C019  F06A         	movff	?_frexp+1,___ftmul@f1+1
 12801  001544  C01A  F06B         	movff	?_frexp+2,___ftmul@f1+2
 12802  001548  EC7E  F00C         	call	___ftmul	;wreg free
 12803  00154C  C069  F078         	movff	?___ftmul,___ftadd@f1
 12804  001550  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 12805  001554  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 12806  001558  0E00               	movlw	0
 12807  00155A  0100               	movlb	0	; () banked
 12808  00155C  6F7B               	movwf	___ftadd@f2& (0+255),b
 12809  00155E  0E80               	movlw	128
 12810  001560  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 12811  001562  0EBF               	movlw	191
 12812  001564  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 12813  001566  ECD9  F008         	call	___ftadd	;wreg free
 12814  00156A  C078  F08E         	movff	?___ftadd,log@x
 12815  00156E  C079  F08F         	movff	?___ftadd+1,log@x+1
 12816  001572  C07A  F090         	movff	?___ftadd+2,log@x+2
 12817  001576  0100               	movlb	0	; () banked
 12818  001578  0791               	decf	log@exponent& (0+255),f,b
 12819  00157A  A0D8               	btfss	status,0,c
 12820  00157C  0792               	decf	(log@exponent+1)& (0+255),f,b
 12821                           
 12822                           ; BSR set to: 0
 12823  00157E  C08E  F084         	movff	log@x,eval_poly@x
 12824  001582  C08F  F085         	movff	log@x+1,eval_poly@x+1
 12825  001586  C090  F086         	movff	log@x+2,eval_poly@x+2
 12826  00158A  0E5A               	movlw	low log@coeff
 12827  00158C  6F87               	movwf	eval_poly@d& (0+255),b
 12828  00158E  0E06               	movlw	high log@coeff
 12829  001590  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 12830  001592  0E00               	movlw	0
 12831  001594  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 12832  001596  0E08               	movlw	8
 12833  001598  6F89               	movwf	eval_poly@n& (0+255),b
 12834  00159A  EC50  F00E         	call	_eval_poly	;wreg free
 12835  00159E  C084  F08E         	movff	?_eval_poly,log@x
 12836  0015A2  C085  F08F         	movff	?_eval_poly+1,log@x+1
 12837  0015A6  C086  F090         	movff	?_eval_poly+2,log@x+2
 12838  0015AA  0E72               	movlw	114
 12839  0015AC  0100               	movlb	0	; () banked
 12840  0015AE  6F6C               	movwf	___ftmul@f2& (0+255),b
 12841  0015B0  0E31               	movlw	49
 12842  0015B2  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 12843  0015B4  0E3F               	movlw	63
 12844  0015B6  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 12845  0015B8  C091  F020         	movff	log@exponent,___awtoft@c
 12846  0015BC  C092  F021         	movff	log@exponent+1,___awtoft@c+1
 12847  0015C0  EC14  F019         	call	___awtoft	;wreg free
 12848  0015C4  C020  F069         	movff	?___awtoft,___ftmul@f1
 12849  0015C8  C021  F06A         	movff	?___awtoft+1,___ftmul@f1+1
 12850  0015CC  C022  F06B         	movff	?___awtoft+2,___ftmul@f1+2
 12851  0015D0  EC7E  F00C         	call	___ftmul	;wreg free
 12852  0015D4  C069  F078         	movff	?___ftmul,___ftadd@f1
 12853  0015D8  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 12854  0015DC  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 12855  0015E0  C08E  F07B         	movff	log@x,___ftadd@f2
 12856  0015E4  C08F  F07C         	movff	log@x+1,___ftadd@f2+1
 12857  0015E8  C090  F07D         	movff	log@x+2,___ftadd@f2+2
 12858  0015EC  ECD9  F008         	call	___ftadd	;wreg free
 12859  0015F0  C078  F08E         	movff	?___ftadd,?_log
 12860  0015F4  C079  F08F         	movff	?___ftadd+1,?_log+1
 12861  0015F8  C07A  F090         	movff	?___ftadd+2,?_log+2
 12862  0015FC  0012               	return	
 12863  0015FE                     __end_of_log:
 12864                           	opt stack 0
 12865                           tosu	equ	0xFFF
 12866                           tosh	equ	0xFFE
 12867                           tosl	equ	0xFFD
 12868                           pclath	equ	0xFFA
 12869                           tblptru	equ	0xFF8
 12870                           tblptrh	equ	0xFF7
 12871                           tblptrl	equ	0xFF6
 12872                           tablat	equ	0xFF5
 12873                           prodh	equ	0xFF4
 12874                           prodl	equ	0xFF3
 12875                           intcon	equ	0xFF2
 12876                           intcon2	equ	0xFF1
 12877                           postinc0	equ	0xFEE
 12878                           wreg	equ	0xFE8
 12879                           indf1	equ	0xFE7
 12880                           postdec1	equ	0xFE5
 12881                           fsr1h	equ	0xFE2
 12882                           fsr1l	equ	0xFE1
 12883                           indf2	equ	0xFDF
 12884                           postinc2	equ	0xFDE
 12885                           postdec2	equ	0xFDD
 12886                           fsr2h	equ	0xFDA
 12887                           fsr2l	equ	0xFD9
 12888                           status	equ	0xFD8
 12889                           
 12890 ;; *************** function _exp *****************
 12891 ;; Defined at:
 12892 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
 12893 ;; Parameters:    Size  Location     Type
 12894 ;;  x               3   55[BANK0 ] int 
 12895 ;; Auto vars:     Size  Location     Type
 12896 ;;  exponent        2   61[BANK0 ] int 
 12897 ;;  sign            1   63[BANK0 ] unsigned char 
 12898 ;; Return value:  Size  Location     Type
 12899 ;;                  3   55[BANK0 ] unsigned char 
 12900 ;; Registers used:
 12901 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12902 ;; Tracked objects:
 12903 ;;		On entry : 0/0
 12904 ;;		On exit  : 0/0
 12905 ;;		Unchanged: 0/0
 12906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12907 ;;      Params:         0       3       0       0       0       0       0
 12908 ;;      Locals:         0       6       0       0       0       0       0
 12909 ;;      Temps:          0       0       0       0       0       0       0
 12910 ;;      Totals:         0       9       0       0       0       0       0
 12911 ;;Total ram usage:        9 bytes
 12912 ;; Hardware stack levels used:    1
 12913 ;; Hardware stack levels required when called:    6
 12914 ;; This function calls:
 12915 ;;		___awtoft
 12916 ;;		___ftdiv
 12917 ;;		___ftge
 12918 ;;		___ftmul
 12919 ;;		___ftneg
 12920 ;;		___ftsub
 12921 ;;		___fttol
 12922 ;;		_eval_poly
 12923 ;;		_floor
 12924 ;;		_ldexp
 12925 ;; This function is called by:
 12926 ;;		_pow
 12927 ;; This function uses a non-reentrant model
 12928 ;;
 12929                           
 12930                           	psect	text88
 12931  000C34                     __ptext88:
 12932                           	opt stack 0
 12933  000C34                     _exp:
 12934                           	opt stack 22
 12935                           
 12936                           ;incstack = 0
 12937  000C34  0100               	movlb	0	; () banked
 12938  000C36  5197               	movf	exp@x& (0+255),w,b
 12939  000C38  1198               	iorwf	(exp@x+1)& (0+255),w,b
 12940  000C3A  1199               	iorwf	(exp@x+2)& (0+255),w,b
 12941  000C3C  A4D8               	btfss	status,2,c
 12942  000C3E  D007               	goto	l2012
 12943                           
 12944                           ; BSR set to: 0
 12945  000C40  0E00               	movlw	0
 12946  000C42  6F97               	movwf	?_exp& (0+255),b
 12947  000C44  0E80               	movlw	128
 12948  000C46  6F98               	movwf	(?_exp+1)& (0+255),b
 12949  000C48  0E3F               	movlw	63
 12950  000C4A  6F99               	movwf	(?_exp+2)& (0+255),b
 12951                           
 12952                           ; BSR set to: 0
 12953  000C4C  0012               	return	
 12954  000C4E                     l2012:
 12955                           
 12956                           ; BSR set to: 0
 12957                           
 12958                           ; BSR set to: 0
 12959  000C4E  0E72               	movlw	114
 12960  000C50  6E18               	movwf	___ftge@ff1,c
 12961  000C52  0E31               	movlw	49
 12962  000C54  6E19               	movwf	___ftge@ff1+1,c
 12963  000C56  0E44               	movlw	68
 12964  000C58  6E1A               	movwf	___ftge@ff1+2,c
 12965  000C5A  C097  F01B         	movff	exp@x,___ftge@ff2
 12966  000C5E  C098  F01C         	movff	exp@x+1,___ftge@ff2+1
 12967  000C62  C099  F01D         	movff	exp@x+2,___ftge@ff2+2
 12968  000C66  EC0D  F012         	call	___ftge	;wreg free
 12969  000C6A  B0D8               	btfsc	status,0,c
 12970  000C6C  D00C               	goto	l2014
 12971  000C6E  0E00               	movlw	0
 12972  000C70  0100               	movlb	0	; () banked
 12973  000C72  6FC6               	movwf	(_errno+1)& (0+255),b
 12974  000C74  0E22               	movlw	34
 12975  000C76  6FC5               	movwf	_errno& (0+255),b
 12976  000C78  0EFF               	movlw	255
 12977  000C7A  6F97               	movwf	?_exp& (0+255),b
 12978  000C7C  0E7F               	movlw	127
 12979  000C7E  6F98               	movwf	(?_exp+1)& (0+255),b
 12980  000C80  0E7F               	movlw	127
 12981  000C82  6F99               	movwf	(?_exp+2)& (0+255),b
 12982                           
 12983                           ; BSR set to: 0
 12984  000C84  0012               	return	
 12985  000C86                     l2014:
 12986                           
 12987                           ; BSR set to: 0
 12988  000C86  C097  F018         	movff	exp@x,___ftge@ff1
 12989  000C8A  C098  F019         	movff	exp@x+1,___ftge@ff1+1
 12990  000C8E  C099  F01A         	movff	exp@x+2,___ftge@ff1+2
 12991  000C92  0E49               	movlw	73
 12992  000C94  6E1B               	movwf	___ftge@ff2,c
 12993  000C96  0E3A               	movlw	58
 12994  000C98  6E1C               	movwf	___ftge@ff2+1,c
 12995  000C9A  0EC4               	movlw	196
 12996  000C9C  6E1D               	movwf	___ftge@ff2+2,c
 12997  000C9E  EC0D  F012         	call	___ftge	;wreg free
 12998  000CA2  B0D8               	btfsc	status,0,c
 12999  000CA4  D00C               	goto	l2015
 13000  000CA6  0E00               	movlw	0
 13001  000CA8  0100               	movlb	0	; () banked
 13002  000CAA  6FC6               	movwf	(_errno+1)& (0+255),b
 13003  000CAC  0E22               	movlw	34
 13004  000CAE  6FC5               	movwf	_errno& (0+255),b
 13005  000CB0  0E00               	movlw	0
 13006  000CB2  6F97               	movwf	?_exp& (0+255),b
 13007  000CB4  0E00               	movlw	0
 13008  000CB6  6F98               	movwf	(?_exp+1)& (0+255),b
 13009  000CB8  0E00               	movlw	0
 13010  000CBA  6F99               	movwf	(?_exp+2)& (0+255),b
 13011                           
 13012                           ; BSR set to: 0
 13013  000CBC  0012               	return	
 13014  000CBE                     l2015:
 13015                           
 13016                           ; BSR set to: 0
 13017  000CBE  0100               	movlb	0	; () banked
 13018  000CC0  AF99               	btfss	(exp@x+2)& (0+255),7,b
 13019  000CC2  D002               	goto	u7570
 13020  000CC4  0E01               	movlw	1
 13021  000CC6  D001               	goto	u7580
 13022  000CC8                     u7570:
 13023  000CC8  0E00               	movlw	0
 13024  000CCA                     u7580:
 13025  000CCA  6F9F               	movwf	exp@sign& (0+255),b
 13026                           
 13027                           ; BSR set to: 0
 13028  000CCC  519F               	movf	exp@sign& (0+255),w,b
 13029  000CCE  B4D8               	btfsc	status,2,c
 13030  000CD0  D00E               	goto	l2016
 13031                           
 13032                           ; BSR set to: 0
 13033  000CD2  C097  F018         	movff	exp@x,___ftneg@f1
 13034  000CD6  C098  F019         	movff	exp@x+1,___ftneg@f1+1
 13035  000CDA  C099  F01A         	movff	exp@x+2,___ftneg@f1+2
 13036  000CDE  ECAB  F01A         	call	___ftneg	;wreg free
 13037  000CE2  C018  F097         	movff	?___ftneg,exp@x
 13038  000CE6  C019  F098         	movff	?___ftneg+1,exp@x+1
 13039  000CEA  C01A  F099         	movff	?___ftneg+2,exp@x+2
 13040  000CEE                     l2016:
 13041  000CEE  C097  F069         	movff	exp@x,___ftmul@f1
 13042  000CF2  C098  F06A         	movff	exp@x+1,___ftmul@f1+1
 13043  000CF6  C099  F06B         	movff	exp@x+2,___ftmul@f1+2
 13044  000CFA  0EAA               	movlw	170
 13045  000CFC  0100               	movlb	0	; () banked
 13046  000CFE  6F6C               	movwf	___ftmul@f2& (0+255),b
 13047  000D00  0EB8               	movlw	184
 13048  000D02  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 13049  000D04  0E3F               	movlw	63
 13050  000D06  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 13051  000D08  EC7E  F00C         	call	___ftmul	;wreg free
 13052  000D0C  C069  F097         	movff	?___ftmul,exp@x
 13053  000D10  C06A  F098         	movff	?___ftmul+1,exp@x+1
 13054  000D14  C06B  F099         	movff	?___ftmul+2,exp@x+2
 13055  000D18  C097  F08F         	movff	exp@x,floor@x
 13056  000D1C  C098  F090         	movff	exp@x+1,floor@x+1
 13057  000D20  C099  F091         	movff	exp@x+2,floor@x+2
 13058  000D24  ECDF  F00D         	call	_floor	;wreg free
 13059  000D28  C08F  F09A         	movff	?_floor,_exp$3237
 13060  000D2C  C090  F09B         	movff	?_floor+1,_exp$3237+1
 13061  000D30  C091  F09C         	movff	?_floor+2,_exp$3237+2
 13062  000D34  C09A  F078         	movff	_exp$3237,___fttol@f1
 13063  000D38  C09B  F079         	movff	_exp$3237+1,___fttol@f1+1
 13064  000D3C  C09C  F07A         	movff	_exp$3237+2,___fttol@f1+2
 13065  000D40  EC02  F00C         	call	___fttol	;wreg free
 13066  000D44  C078  F09D         	movff	?___fttol,exp@exponent
 13067  000D48  C079  F09E         	movff	?___fttol+1,exp@exponent+1
 13068  000D4C  C097  F084         	movff	exp@x,___ftsub@f1
 13069  000D50  C098  F085         	movff	exp@x+1,___ftsub@f1+1
 13070  000D54  C099  F086         	movff	exp@x+2,___ftsub@f1+2
 13071  000D58  C09D  F020         	movff	exp@exponent,___awtoft@c
 13072  000D5C  C09E  F021         	movff	exp@exponent+1,___awtoft@c+1
 13073  000D60  EC14  F019         	call	___awtoft	;wreg free
 13074  000D64  C020  F087         	movff	?___awtoft,___ftsub@f2
 13075  000D68  C021  F088         	movff	?___awtoft+1,___ftsub@f2+1
 13076  000D6C  C022  F089         	movff	?___awtoft+2,___ftsub@f2+2
 13077  000D70  EC3E  F018         	call	___ftsub	;wreg free
 13078  000D74  C084  F097         	movff	?___ftsub,exp@x
 13079  000D78  C085  F098         	movff	?___ftsub+1,exp@x+1
 13080  000D7C  C086  F099         	movff	?___ftsub+2,exp@x+2
 13081  000D80  C097  F084         	movff	exp@x,eval_poly@x
 13082  000D84  C098  F085         	movff	exp@x+1,eval_poly@x+1
 13083  000D88  C099  F086         	movff	exp@x+2,eval_poly@x+2
 13084  000D8C  0E3C               	movlw	low exp@coeff
 13085  000D8E  0100               	movlb	0	; () banked
 13086  000D90  6F87               	movwf	eval_poly@d& (0+255),b
 13087  000D92  0E06               	movlw	high exp@coeff
 13088  000D94  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 13089  000D96  0E00               	movlw	0
 13090  000D98  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 13091  000D9A  0E09               	movlw	9
 13092  000D9C  6F89               	movwf	eval_poly@n& (0+255),b
 13093  000D9E  EC50  F00E         	call	_eval_poly	;wreg free
 13094  000DA2  C084  F08E         	movff	?_eval_poly,ldexp@value
 13095  000DA6  C085  F08F         	movff	?_eval_poly+1,ldexp@value+1
 13096  000DAA  C086  F090         	movff	?_eval_poly+2,ldexp@value+2
 13097  000DAE  C09D  F091         	movff	exp@exponent,ldexp@newexp
 13098  000DB2  C09E  F092         	movff	exp@exponent+1,ldexp@newexp+1
 13099  000DB6  ECBB  F00E         	call	_ldexp	;wreg free
 13100  000DBA  C08E  F097         	movff	?_ldexp,exp@x
 13101  000DBE  C08F  F098         	movff	?_ldexp+1,exp@x+1
 13102  000DC2  C090  F099         	movff	?_ldexp+2,exp@x+2
 13103  000DC6  0100               	movlb	0	; () banked
 13104  000DC8  519F               	movf	exp@sign& (0+255),w,b
 13105  000DCA  B4D8               	btfsc	status,2,c
 13106  000DCC  D025               	goto	l2017
 13107                           
 13108                           ; BSR set to: 0
 13109  000DCE  2997               	incf	exp@x& (0+255),w,b
 13110  000DD0  E10E               	bnz	l7555
 13111  000DD2  0E7F               	movlw	127
 13112  000DD4  1998               	xorwf	(exp@x+1)& (0+255),w,b
 13113  000DD6  E10B               	bnz	l7555
 13114  000DD8  0E7F               	movlw	127
 13115  000DDA  1999               	xorwf	(exp@x+2)& (0+255),w,b
 13116  000DDC  A4D8               	btfss	status,2,c
 13117  000DDE  D007               	goto	l2018
 13118                           
 13119                           ; BSR set to: 0
 13120  000DE0  0E00               	movlw	0
 13121  000DE2  6F97               	movwf	?_exp& (0+255),b
 13122  000DE4  0E00               	movlw	0
 13123  000DE6  6F98               	movwf	(?_exp+1)& (0+255),b
 13124  000DE8  0E00               	movlw	0
 13125  000DEA  6F99               	movwf	(?_exp+2)& (0+255),b
 13126                           
 13127                           ; BSR set to: 0
 13128  000DEC  0012               	return	
 13129  000DEE                     l2018:
 13130  000DEE                     l7555:
 13131                           
 13132                           ; BSR set to: 0
 13133  000DEE  0E00               	movlw	0
 13134  000DF0  6E29               	movwf	___ftdiv@f1,c
 13135  000DF2  0E80               	movlw	128
 13136  000DF4  6E2A               	movwf	___ftdiv@f1+1,c
 13137  000DF6  0E3F               	movlw	63
 13138  000DF8  6E2B               	movwf	___ftdiv@f1+2,c
 13139  000DFA  C097  F02C         	movff	exp@x,___ftdiv@f2
 13140  000DFE  C098  F02D         	movff	exp@x+1,___ftdiv@f2+1
 13141  000E02  C099  F02E         	movff	exp@x+2,___ftdiv@f2+2
 13142  000E06  ECF9  F00C         	call	___ftdiv	;wreg free
 13143  000E0A  C029  F097         	movff	?___ftdiv,?_exp
 13144  000E0E  C02A  F098         	movff	?___ftdiv+1,?_exp+1
 13145  000E12  C02B  F099         	movff	?___ftdiv+2,?_exp+2
 13146  000E16  0012               	return	
 13147  000E18                     l2017:
 13148                           
 13149                           ; BSR set to: 0
 13150  000E18  C097  F097         	movff	exp@x,?_exp
 13151  000E1C  C098  F098         	movff	exp@x+1,?_exp+1
 13152  000E20  C099  F099         	movff	exp@x+2,?_exp+2
 13153  000E24  0012               	return		;funcret
 13154  000E26                     __end_of_exp:
 13155                           	opt stack 0
 13156                           tosu	equ	0xFFF
 13157                           tosh	equ	0xFFE
 13158                           tosl	equ	0xFFD
 13159                           pclath	equ	0xFFA
 13160                           tblptru	equ	0xFF8
 13161                           tblptrh	equ	0xFF7
 13162                           tblptrl	equ	0xFF6
 13163                           tablat	equ	0xFF5
 13164                           prodh	equ	0xFF4
 13165                           prodl	equ	0xFF3
 13166                           intcon	equ	0xFF2
 13167                           intcon2	equ	0xFF1
 13168                           postinc0	equ	0xFEE
 13169                           wreg	equ	0xFE8
 13170                           indf1	equ	0xFE7
 13171                           postdec1	equ	0xFE5
 13172                           fsr1h	equ	0xFE2
 13173                           fsr1l	equ	0xFE1
 13174                           indf2	equ	0xFDF
 13175                           postinc2	equ	0xFDE
 13176                           postdec2	equ	0xFDD
 13177                           fsr2h	equ	0xFDA
 13178                           fsr2l	equ	0xFD9
 13179                           status	equ	0xFD8
 13180                           
 13181 ;; *************** function _ldexp *****************
 13182 ;; Defined at:
 13183 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 13184 ;; Parameters:    Size  Location     Type
 13185 ;;  value           3   46[BANK0 ] unsigned char 
 13186 ;;  newexp          2   49[BANK0 ] int 
 13187 ;; Auto vars:     Size  Location     Type
 13188 ;;		None
 13189 ;; Return value:  Size  Location     Type
 13190 ;;                  3   46[BANK0 ] int 
 13191 ;; Registers used:
 13192 ;;		wreg, status,2, status,0
 13193 ;; Tracked objects:
 13194 ;;		On entry : 0/0
 13195 ;;		On exit  : 0/0
 13196 ;;		Unchanged: 0/0
 13197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13198 ;;      Params:         0       5       0       0       0       0       0
 13199 ;;      Locals:         0       0       0       0       0       0       0
 13200 ;;      Temps:          0       2       0       0       0       0       0
 13201 ;;      Totals:         0       7       0       0       0       0       0
 13202 ;;Total ram usage:        7 bytes
 13203 ;; Hardware stack levels used:    1
 13204 ;; Hardware stack levels required when called:    3
 13205 ;; This function calls:
 13206 ;;		Nothing
 13207 ;; This function is called by:
 13208 ;;		_exp
 13209 ;; This function uses a non-reentrant model
 13210 ;;
 13211                           
 13212                           	psect	text89
 13213  001D76                     __ptext89:
 13214                           	opt stack 0
 13215  001D76                     _ldexp:
 13216                           	opt stack 24
 13217                           
 13218                           ;incstack = 0
 13219  001D76  0100               	movlb	0	; () banked
 13220  001D78  518E               	movf	ldexp@value& (0+255),w,b
 13221  001D7A  118F               	iorwf	(ldexp@value+1)& (0+255),w,b
 13222  001D7C  1190               	iorwf	(ldexp@value+2)& (0+255),w,b
 13223  001D7E  A4D8               	btfss	status,2,c
 13224  001D80  D007               	goto	l2036
 13225                           
 13226                           ; BSR set to: 0
 13227  001D82  0E00               	movlw	0
 13228  001D84  6F8E               	movwf	?_ldexp& (0+255),b
 13229  001D86  0E00               	movlw	0
 13230  001D88  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 13231  001D8A  0E00               	movlw	0
 13232  001D8C  6F90               	movwf	(?_ldexp+2)& (0+255),b
 13233                           
 13234                           ; BSR set to: 0
 13235  001D8E  0012               	return	
 13236  001D90                     l2036:
 13237                           
 13238                           ; BSR set to: 0
 13239                           
 13240                           ; BSR set to: 0
 13241  001D90  5190               	movf	(ldexp@value+2)& (0+255),w,b
 13242  001D92  0B7F               	andlw	127
 13243  001D94  6F93               	movwf	??_ldexp& (0+255),b
 13244  001D96  6B94               	clrf	(??_ldexp+1)& (0+255),b
 13245  001D98  90D8               	bcf	status,0,c
 13246  001D9A  3793               	rlcf	??_ldexp& (0+255),f,b
 13247  001D9C  3794               	rlcf	(??_ldexp+1)& (0+255),f,b
 13248  001D9E  5193               	movf	??_ldexp& (0+255),w,b
 13249  001DA0  2791               	addwf	ldexp@newexp& (0+255),f,b
 13250  001DA2  5194               	movf	(??_ldexp+1)& (0+255),w,b
 13251  001DA4  2392               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 13252  001DA6  AF8F               	btfss	(ldexp@value+1)& (0+255),7,b
 13253  001DA8  D003               	goto	u4340
 13254  001DAA  6B93               	clrf	??_ldexp& (0+255),b
 13255  001DAC  2B93               	incf	??_ldexp& (0+255),f,b
 13256  001DAE  D002               	goto	u4348
 13257  001DB0                     u4340:
 13258  001DB0  0100               	movlb	0	; () banked
 13259  001DB2  6B93               	clrf	??_ldexp& (0+255),b
 13260  001DB4                     u4348:
 13261  001DB4  5193               	movf	??_ldexp& (0+255),w,b
 13262  001DB6  2791               	addwf	ldexp@newexp& (0+255),f,b
 13263  001DB8  0E00               	movlw	0
 13264  001DBA  2392               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 13265  001DBC  AF92               	btfss	(ldexp@newexp+1)& (0+255),7,b
 13266  001DBE  D00B               	goto	l2038
 13267                           
 13268                           ; BSR set to: 0
 13269  001DC0  0E00               	movlw	0
 13270  001DC2  6FC6               	movwf	(_errno+1)& (0+255),b
 13271  001DC4  0E22               	movlw	34
 13272  001DC6  6FC5               	movwf	_errno& (0+255),b
 13273  001DC8  0E00               	movlw	0
 13274  001DCA  6F8E               	movwf	?_ldexp& (0+255),b
 13275  001DCC  0E00               	movlw	0
 13276  001DCE  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 13277  001DD0  0E00               	movlw	0
 13278  001DD2                     L1:
 13279  001DD2  6F90               	movwf	(?_ldexp+2)& (0+255),b
 13280                           
 13281                           ; BSR set to: 0
 13282  001DD4  0012               	return	
 13283  001DD6                     l2038:
 13284                           
 13285                           ; BSR set to: 0
 13286                           
 13287                           ; BSR set to: 0
 13288  001DD6  BF92               	btfsc	(ldexp@newexp+1)& (0+255),7,b
 13289  001DD8  D015               	goto	l2040
 13290  001DDA  0592               	decf	(ldexp@newexp+1)& (0+255),w,b
 13291  001DDC  A0D8               	btfss	status,0,c
 13292  001DDE  D012               	goto	l2040
 13293                           
 13294                           ; BSR set to: 0
 13295  001DE0  0E00               	movlw	0
 13296  001DE2  6FC6               	movwf	(_errno+1)& (0+255),b
 13297  001DE4  0E22               	movlw	34
 13298  001DE6  6FC5               	movwf	_errno& (0+255),b
 13299                           
 13300                           ; BSR set to: 0
 13301  001DE8  AF90               	btfss	(ldexp@value+2)& (0+255),7,b
 13302  001DEA  D006               	goto	l2041
 13303                           
 13304                           ; BSR set to: 0
 13305  001DEC  0EFF               	movlw	255
 13306  001DEE  6F8E               	movwf	?_ldexp& (0+255),b
 13307  001DF0  0E7F               	movlw	127
 13308  001DF2  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 13309  001DF4  0EFF               	movlw	255
 13310  001DF6  D7ED               	goto	L1
 13311  001DF8                     l2041:
 13312                           
 13313                           ; BSR set to: 0
 13314                           
 13315                           ; BSR set to: 0
 13316  001DF8  0EFF               	movlw	255
 13317  001DFA  6F8E               	movwf	?_ldexp& (0+255),b
 13318  001DFC  0E7F               	movlw	127
 13319  001DFE  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 13320  001E00  0E7F               	movlw	127
 13321  001E02  D7E7               	goto	L1
 13322  001E04                     l2040:
 13323                           
 13324                           ; BSR set to: 0
 13325                           
 13326                           ; BSR set to: 0
 13327  001E04  3592               	rlcf	(ldexp@newexp+1)& (0+255),w,b
 13328  001E06  3192               	rrcf	(ldexp@newexp+1)& (0+255),w,b
 13329  001E08  6F94               	movwf	(??_ldexp+1)& (0+255),b
 13330  001E0A  3191               	rrcf	ldexp@newexp& (0+255),w,b
 13331  001E0C  6F93               	movwf	??_ldexp& (0+255),b
 13332  001E0E  5190               	movf	(ldexp@value+2)& (0+255),w,b
 13333  001E10  1993               	xorwf	??_ldexp& (0+255),w,b
 13334  001E12  0B80               	andlw	-128
 13335  001E14  1993               	xorwf	??_ldexp& (0+255),w,b
 13336  001E16  6F90               	movwf	(ldexp@value+2)& (0+255),b
 13337  001E18  C091  F093         	movff	ldexp@newexp,??_ldexp
 13338  001E1C  0E01               	movlw	1
 13339  001E1E  1793               	andwf	??_ldexp& (0+255),f,b
 13340  001E20  3393               	rrcf	??_ldexp& (0+255),f,b
 13341  001E22  3393               	rrcf	??_ldexp& (0+255),f,b
 13342  001E24  518F               	movf	(ldexp@value+1)& (0+255),w,b
 13343  001E26  1993               	xorwf	??_ldexp& (0+255),w,b
 13344  001E28  0B7F               	andlw	-129
 13345  001E2A  1993               	xorwf	??_ldexp& (0+255),w,b
 13346  001E2C  6F8F               	movwf	(ldexp@value+1)& (0+255),b
 13347                           
 13348                           ; BSR set to: 0
 13349                           
 13350                           ; BSR set to: 0
 13351                           
 13352                           ; BSR set to: 0
 13353  001E2E  C08E  F08E         	movff	ldexp@value,?_ldexp
 13354  001E32  C08F  F08F         	movff	ldexp@value+1,?_ldexp+1
 13355  001E36  C090  F090         	movff	ldexp@value+2,?_ldexp+2
 13356  001E3A  0012               	return	
 13357  001E3C                     __end_of_ldexp:
 13358                           	opt stack 0
 13359                           tosu	equ	0xFFF
 13360                           tosh	equ	0xFFE
 13361                           tosl	equ	0xFFD
 13362                           pclath	equ	0xFFA
 13363                           tblptru	equ	0xFF8
 13364                           tblptrh	equ	0xFF7
 13365                           tblptrl	equ	0xFF6
 13366                           tablat	equ	0xFF5
 13367                           prodh	equ	0xFF4
 13368                           prodl	equ	0xFF3
 13369                           intcon	equ	0xFF2
 13370                           intcon2	equ	0xFF1
 13371                           postinc0	equ	0xFEE
 13372                           wreg	equ	0xFE8
 13373                           indf1	equ	0xFE7
 13374                           postdec1	equ	0xFE5
 13375                           fsr1h	equ	0xFE2
 13376                           fsr1l	equ	0xFE1
 13377                           indf2	equ	0xFDF
 13378                           postinc2	equ	0xFDE
 13379                           postdec2	equ	0xFDD
 13380                           fsr2h	equ	0xFDA
 13381                           fsr2l	equ	0xFD9
 13382                           status	equ	0xFD8
 13383                           
 13384 ;; *************** function _floor *****************
 13385 ;; Defined at:
 13386 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
 13387 ;; Parameters:    Size  Location     Type
 13388 ;;  x               3   47[BANK0 ] int 
 13389 ;; Auto vars:     Size  Location     Type
 13390 ;;  i               3   50[BANK0 ] int 
 13391 ;;  expon           2   53[BANK0 ] int 
 13392 ;; Return value:  Size  Location     Type
 13393 ;;                  3   47[BANK0 ] int 
 13394 ;; Registers used:
 13395 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13396 ;; Tracked objects:
 13397 ;;		On entry : 0/0
 13398 ;;		On exit  : 0/0
 13399 ;;		Unchanged: 0/0
 13400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13401 ;;      Params:         0       3       0       0       0       0       0
 13402 ;;      Locals:         0       5       0       0       0       0       0
 13403 ;;      Temps:          0       0       0       0       0       0       0
 13404 ;;      Totals:         0       8       0       0       0       0       0
 13405 ;;Total ram usage:        8 bytes
 13406 ;; Hardware stack levels used:    1
 13407 ;; Hardware stack levels required when called:    5
 13408 ;; This function calls:
 13409 ;;		___altoft
 13410 ;;		___ftadd
 13411 ;;		___ftge
 13412 ;;		___fttol
 13413 ;;		_frexp
 13414 ;; This function is called by:
 13415 ;;		_exp
 13416 ;; This function uses a non-reentrant model
 13417 ;;
 13418                           
 13419                           	psect	text90
 13420  001BBE                     __ptext90:
 13421                           	opt stack 0
 13422  001BBE                     _floor:
 13423                           	opt stack 22
 13424                           
 13425                           ; BSR set to: 0
 13426                           ;incstack = 0
 13427  001BBE  C08F  F018         	movff	floor@x,frexp@value
 13428  001BC2  C090  F019         	movff	floor@x+1,frexp@value+1
 13429  001BC6  C091  F01A         	movff	floor@x+2,frexp@value+2
 13430  001BCA  0E95               	movlw	low floor@expon
 13431  001BCC  6E1B               	movwf	frexp@eptr,c
 13432  001BCE  0E00               	movlw	high floor@expon
 13433  001BD0  6E1C               	movwf	frexp@eptr+1,c
 13434  001BD2  ECC5  F011         	call	_frexp	;wreg free
 13435  001BD6  0100               	movlb	0	; () banked
 13436  001BD8  AF96               	btfss	(floor@expon+1)& (0+255),7,b
 13437  001BDA  D010               	goto	l2023
 13438                           
 13439                           ; BSR set to: 0
 13440  001BDC  AF91               	btfss	(floor@x+2)& (0+255),7,b
 13441  001BDE  D007               	goto	l2024
 13442                           
 13443                           ; BSR set to: 0
 13444  001BE0  0E00               	movlw	0
 13445  001BE2  6F8F               	movwf	?_floor& (0+255),b
 13446  001BE4  0E80               	movlw	128
 13447  001BE6  6F90               	movwf	(?_floor+1)& (0+255),b
 13448  001BE8  0EBF               	movlw	191
 13449  001BEA  6F91               	movwf	(?_floor+2)& (0+255),b
 13450                           
 13451                           ; BSR set to: 0
 13452  001BEC  0012               	return	
 13453  001BEE                     l2024:
 13454                           
 13455                           ; BSR set to: 0
 13456                           
 13457                           ; BSR set to: 0
 13458  001BEE  0E00               	movlw	0
 13459  001BF0  6F8F               	movwf	?_floor& (0+255),b
 13460  001BF2  0E00               	movlw	0
 13461  001BF4  6F90               	movwf	(?_floor+1)& (0+255),b
 13462  001BF6  0E00               	movlw	0
 13463  001BF8  6F91               	movwf	(?_floor+2)& (0+255),b
 13464                           
 13465                           ; BSR set to: 0
 13466  001BFA  0012               	return	
 13467  001BFC                     l2023:
 13468                           
 13469                           ; BSR set to: 0
 13470                           
 13471                           ; BSR set to: 0
 13472  001BFC  5196               	movf	(floor@expon+1)& (0+255),w,b
 13473  001BFE  E104               	bnz	u7030
 13474  001C00  0E15               	movlw	21
 13475  001C02  5D95               	subwf	floor@expon& (0+255),w,b
 13476  001C04  A0D8               	btfss	status,0,c
 13477  001C06  D007               	goto	l2026
 13478  001C08                     u7030:
 13479                           
 13480                           ; BSR set to: 0
 13481  001C08  C08F  F08F         	movff	floor@x,?_floor
 13482  001C0C  C090  F090         	movff	floor@x+1,?_floor+1
 13483  001C10  C091  F091         	movff	floor@x+2,?_floor+2
 13484  001C14  0012               	return	
 13485  001C16                     l2026:
 13486                           
 13487                           ; BSR set to: 0
 13488                           
 13489                           ; BSR set to: 0
 13490  001C16  C08F  F078         	movff	floor@x,___fttol@f1
 13491  001C1A  C090  F079         	movff	floor@x+1,___fttol@f1+1
 13492  001C1E  C091  F07A         	movff	floor@x+2,___fttol@f1+2
 13493  001C22  EC02  F00C         	call	___fttol	;wreg free
 13494  001C26  C078  F087         	movff	?___fttol,___altoft@c
 13495  001C2A  C079  F088         	movff	?___fttol+1,___altoft@c+1
 13496  001C2E  C07A  F089         	movff	?___fttol+2,___altoft@c+2
 13497  001C32  C07B  F08A         	movff	?___fttol+3,___altoft@c+3
 13498  001C36  EC17  F013         	call	___altoft	;wreg free
 13499  001C3A  C087  F092         	movff	?___altoft,floor@i
 13500  001C3E  C088  F093         	movff	?___altoft+1,floor@i+1
 13501  001C42  C089  F094         	movff	?___altoft+2,floor@i+2
 13502  001C46  C08F  F018         	movff	floor@x,___ftge@ff1
 13503  001C4A  C090  F019         	movff	floor@x+1,___ftge@ff1+1
 13504  001C4E  C091  F01A         	movff	floor@x+2,___ftge@ff1+2
 13505  001C52  C092  F01B         	movff	floor@i,___ftge@ff2
 13506  001C56  C093  F01C         	movff	floor@i+1,___ftge@ff2+1
 13507  001C5A  C094  F01D         	movff	floor@i+2,___ftge@ff2+2
 13508  001C5E  EC0D  F012         	call	___ftge	;wreg free
 13509  001C62  B0D8               	btfsc	status,0,c
 13510  001C64  D016               	goto	l2027
 13511  001C66  C092  F078         	movff	floor@i,___ftadd@f1
 13512  001C6A  C093  F079         	movff	floor@i+1,___ftadd@f1+1
 13513  001C6E  C094  F07A         	movff	floor@i+2,___ftadd@f1+2
 13514  001C72  0E00               	movlw	0
 13515  001C74  0100               	movlb	0	; () banked
 13516  001C76  6F7B               	movwf	___ftadd@f2& (0+255),b
 13517  001C78  0E80               	movlw	128
 13518  001C7A  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 13519  001C7C  0EBF               	movlw	191
 13520  001C7E  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 13521  001C80  ECD9  F008         	call	___ftadd	;wreg free
 13522  001C84  C078  F08F         	movff	?___ftadd,?_floor
 13523  001C88  C079  F090         	movff	?___ftadd+1,?_floor+1
 13524  001C8C  C07A  F091         	movff	?___ftadd+2,?_floor+2
 13525  001C90  0012               	return	
 13526  001C92                     l2027:
 13527  001C92  C092  F08F         	movff	floor@i,?_floor
 13528  001C96  C093  F090         	movff	floor@i+1,?_floor+1
 13529  001C9A  C094  F091         	movff	floor@i+2,?_floor+2
 13530  001C9E  0012               	return		;funcret
 13531  001CA0                     __end_of_floor:
 13532                           	opt stack 0
 13533                           tosu	equ	0xFFF
 13534                           tosh	equ	0xFFE
 13535                           tosl	equ	0xFFD
 13536                           pclath	equ	0xFFA
 13537                           tblptru	equ	0xFF8
 13538                           tblptrh	equ	0xFF7
 13539                           tblptrl	equ	0xFF6
 13540                           tablat	equ	0xFF5
 13541                           prodh	equ	0xFF4
 13542                           prodl	equ	0xFF3
 13543                           intcon	equ	0xFF2
 13544                           intcon2	equ	0xFF1
 13545                           postinc0	equ	0xFEE
 13546                           wreg	equ	0xFE8
 13547                           indf1	equ	0xFE7
 13548                           postdec1	equ	0xFE5
 13549                           fsr1h	equ	0xFE2
 13550                           fsr1l	equ	0xFE1
 13551                           indf2	equ	0xFDF
 13552                           postinc2	equ	0xFDE
 13553                           postdec2	equ	0xFDD
 13554                           fsr2h	equ	0xFDA
 13555                           fsr2l	equ	0xFD9
 13556                           status	equ	0xFD8
 13557                           
 13558 ;; *************** function _frexp *****************
 13559 ;; Defined at:
 13560 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 13561 ;; Parameters:    Size  Location     Type
 13562 ;;  value           3   23[COMRAM] int 
 13563 ;;  eptr            2   26[COMRAM] PTR int 
 13564 ;;		 -> log@exponent(2), floor@expon(2), 
 13565 ;; Auto vars:     Size  Location     Type
 13566 ;;		None
 13567 ;; Return value:  Size  Location     Type
 13568 ;;                  3   23[COMRAM] PTR int 
 13569 ;; Registers used:
 13570 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13571 ;; Tracked objects:
 13572 ;;		On entry : 0/0
 13573 ;;		On exit  : 0/0
 13574 ;;		Unchanged: 0/0
 13575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13576 ;;      Params:         5       0       0       0       0       0       0
 13577 ;;      Locals:         0       0       0       0       0       0       0
 13578 ;;      Temps:          2       0       0       0       0       0       0
 13579 ;;      Totals:         7       0       0       0       0       0       0
 13580 ;;Total ram usage:        7 bytes
 13581 ;; Hardware stack levels used:    1
 13582 ;; Hardware stack levels required when called:    3
 13583 ;; This function calls:
 13584 ;;		Nothing
 13585 ;; This function is called by:
 13586 ;;		_floor
 13587 ;;		_log
 13588 ;; This function uses a non-reentrant model
 13589 ;;
 13590                           
 13591                           	psect	text91
 13592  00238A                     __ptext91:
 13593                           	opt stack 0
 13594  00238A                     _frexp:
 13595                           	opt stack 24
 13596                           
 13597                           ;incstack = 0
 13598  00238A  5018               	movf	frexp@value,w,c
 13599  00238C  1019               	iorwf	frexp@value+1,w,c
 13600  00238E  101A               	iorwf	frexp@value+2,w,c
 13601  002390  A4D8               	btfss	status,2,c
 13602  002392  D00F               	goto	l2032
 13603  002394  C01B  FFD9         	movff	frexp@eptr,fsr2l
 13604  002398  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 13605  00239C  0E00               	movlw	0
 13606  00239E  6EDE               	movwf	postinc2,c
 13607  0023A0  0E00               	movlw	0
 13608  0023A2  6EDD               	movwf	postdec2,c
 13609  0023A4  0E00               	movlw	0
 13610  0023A6  6E18               	movwf	?_frexp,c
 13611  0023A8  0E00               	movlw	0
 13612  0023AA  6E19               	movwf	?_frexp+1,c
 13613  0023AC  0E00               	movlw	0
 13614  0023AE  6E1A               	movwf	?_frexp+2,c
 13615  0023B0  0012               	return	
 13616  0023B2                     l2032:
 13617  0023B2  501A               	movf	frexp@value+2,w,c
 13618  0023B4  0B7F               	andlw	127
 13619  0023B6  6E1D               	movwf	??_frexp& (0+255),c
 13620  0023B8  6A1E               	clrf	(??_frexp+1)& (0+255),c
 13621  0023BA  90D8               	bcf	status,0,c
 13622  0023BC  361D               	rlcf	??_frexp,f,c
 13623  0023BE  361E               	rlcf	??_frexp+1,f,c
 13624  0023C0  C01B  FFD9         	movff	frexp@eptr,fsr2l
 13625  0023C4  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 13626  0023C8  C01D  FFDE         	movff	??_frexp,postinc2
 13627  0023CC  C01E  FFDD         	movff	??_frexp+1,postdec2
 13628  0023D0  AE19               	btfss	frexp@value+1,7,c
 13629  0023D2  D003               	goto	u4000
 13630  0023D4  6A1D               	clrf	??_frexp& (0+255),c
 13631  0023D6  2A1D               	incf	??_frexp& (0+255),f,c
 13632  0023D8  D001               	goto	u4008
 13633  0023DA                     u4000:
 13634  0023DA  6A1D               	clrf	??_frexp& (0+255),c
 13635  0023DC                     u4008:
 13636  0023DC  501D               	movf	??_frexp,w,c
 13637  0023DE  C01B  FFD9         	movff	frexp@eptr,fsr2l
 13638  0023E2  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 13639  0023E6  12DE               	iorwf	postinc2,f,c
 13640  0023E8  0E00               	movlw	0
 13641  0023EA  12DD               	iorwf	postdec2,f,c
 13642  0023EC  C01B  FFD9         	movff	frexp@eptr,fsr2l
 13643  0023F0  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 13644  0023F4  0E82               	movlw	130
 13645  0023F6  26DE               	addwf	postinc2,f,c
 13646  0023F8  0EFF               	movlw	255
 13647  0023FA  22DD               	addwfc	postdec2,f,c
 13648  0023FC  801A               	bsf	frexp@value+2,0,c
 13649  0023FE  821A               	bsf	frexp@value+2,1,c
 13650  002400  841A               	bsf	frexp@value+2,2,c
 13651  002402  861A               	bsf	frexp@value+2,3,c
 13652  002404  881A               	bsf	frexp@value+2,4,c
 13653  002406  8A1A               	bsf	frexp@value+2,5,c
 13654  002408  9C1A               	bcf	frexp@value+2,6,c
 13655  00240A  9E19               	bcf	frexp@value+1,7,c
 13656  00240C  C018  F018         	movff	frexp@value,?_frexp
 13657  002410  C019  F019         	movff	frexp@value+1,?_frexp+1
 13658  002414  C01A  F01A         	movff	frexp@value+2,?_frexp+2
 13659  002418  0012               	return	
 13660  00241A                     __end_of_frexp:
 13661                           	opt stack 0
 13662                           tosu	equ	0xFFF
 13663                           tosh	equ	0xFFE
 13664                           tosl	equ	0xFFD
 13665                           pclath	equ	0xFFA
 13666                           tblptru	equ	0xFF8
 13667                           tblptrh	equ	0xFF7
 13668                           tblptrl	equ	0xFF6
 13669                           tablat	equ	0xFF5
 13670                           prodh	equ	0xFF4
 13671                           prodl	equ	0xFF3
 13672                           intcon	equ	0xFF2
 13673                           intcon2	equ	0xFF1
 13674                           postinc0	equ	0xFEE
 13675                           wreg	equ	0xFE8
 13676                           indf1	equ	0xFE7
 13677                           postdec1	equ	0xFE5
 13678                           fsr1h	equ	0xFE2
 13679                           fsr1l	equ	0xFE1
 13680                           indf2	equ	0xFDF
 13681                           postinc2	equ	0xFDE
 13682                           postdec2	equ	0xFDD
 13683                           fsr2h	equ	0xFDA
 13684                           fsr2l	equ	0xFD9
 13685                           status	equ	0xFD8
 13686                           
 13687 ;; *************** function ___fttol *****************
 13688 ;; Defined at:
 13689 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 13690 ;; Parameters:    Size  Location     Type
 13691 ;;  f1              3   24[BANK0 ] float 
 13692 ;; Auto vars:     Size  Location     Type
 13693 ;;  lval            4   34[BANK0 ] unsigned long 
 13694 ;;  exp1            1   38[BANK0 ] unsigned char 
 13695 ;;  sign1           1   33[BANK0 ] unsigned char 
 13696 ;; Return value:  Size  Location     Type
 13697 ;;                  4   24[BANK0 ] long 
 13698 ;; Registers used:
 13699 ;;		wreg, status,2, status,0
 13700 ;; Tracked objects:
 13701 ;;		On entry : 0/0
 13702 ;;		On exit  : 0/0
 13703 ;;		Unchanged: 0/0
 13704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13705 ;;      Params:         0       4       0       0       0       0       0
 13706 ;;      Locals:         0       6       0       0       0       0       0
 13707 ;;      Temps:          0       5       0       0       0       0       0
 13708 ;;      Totals:         0      15       0       0       0       0       0
 13709 ;;Total ram usage:       15 bytes
 13710 ;; Hardware stack levels used:    1
 13711 ;; Hardware stack levels required when called:    3
 13712 ;; This function calls:
 13713 ;;		Nothing
 13714 ;; This function is called by:
 13715 ;;		_AdcConvert
 13716 ;;		_pow
 13717 ;;		_exp
 13718 ;;		_floor
 13719 ;; This function uses a non-reentrant model
 13720 ;;
 13721                           
 13722                           	psect	text92
 13723  001804                     __ptext92:
 13724                           	opt stack 0
 13725  001804                     ___fttol:
 13726                           	opt stack 23
 13727                           
 13728                           ;incstack = 0
 13729  001804  C07A  F07C         	movff	___fttol@f1+2,??___fttol
 13730  001808  0100               	movlb	0	; () banked
 13731  00180A  6B7D               	clrf	(??___fttol+1)& (0+255),b
 13732  00180C  6B7E               	clrf	(??___fttol+2)& (0+255),b
 13733  00180E  3579               	rlcf	(___fttol@f1+1)& (0+255),w,b
 13734  001810  377C               	rlcf	??___fttol& (0+255),f,b
 13735  001812  E301               	bnc	u3911
 13736  001814  817D               	bsf	(??___fttol+1)& (0+255),0,b
 13737  001816                     u3911:
 13738  001816  517C               	movf	??___fttol& (0+255),w,b
 13739  001818  6F86               	movwf	___fttol@exp1& (0+255),b
 13740  00181A  5186               	movf	___fttol@exp1& (0+255),w,b
 13741  00181C  A4D8               	btfss	status,2,c
 13742  00181E  D009               	goto	l1689
 13743                           
 13744                           ; BSR set to: 0
 13745  001820  0E00               	movlw	0
 13746  001822  6F78               	movwf	?___fttol& (0+255),b
 13747  001824  0E00               	movlw	0
 13748  001826  6F79               	movwf	(?___fttol+1)& (0+255),b
 13749  001828  0E00               	movlw	0
 13750  00182A  6F7A               	movwf	(?___fttol+2)& (0+255),b
 13751  00182C  0E00               	movlw	0
 13752  00182E  6F7B               	movwf	(?___fttol+3)& (0+255),b
 13753                           
 13754                           ; BSR set to: 0
 13755  001830  0012               	return	
 13756  001832                     l1689:
 13757                           
 13758                           ; BSR set to: 0
 13759                           
 13760                           ; BSR set to: 0
 13761  001832  0E17               	movlw	23
 13762  001834  6F7C               	movwf	??___fttol& (0+255),b
 13763  001836  C078  F07D         	movff	___fttol@f1,??___fttol+1
 13764  00183A  C079  F07E         	movff	___fttol@f1+1,??___fttol+2
 13765  00183E  C07A  F07F         	movff	___fttol@f1+2,??___fttol+3
 13766  001842  297C               	incf	??___fttol& (0+255),w,b
 13767  001844  6F80               	movwf	(??___fttol+4)& (0+255),b
 13768  001846  D004               	goto	u3930
 13769  001848                     u3935:
 13770  001848  90D8               	bcf	status,0,c
 13771  00184A  337F               	rrcf	(??___fttol+3)& (0+255),f,b
 13772  00184C  337E               	rrcf	(??___fttol+2)& (0+255),f,b
 13773  00184E  337D               	rrcf	(??___fttol+1)& (0+255),f,b
 13774  001850                     u3930:
 13775  001850  2F80               	decfsz	(??___fttol+4)& (0+255),f,b
 13776  001852  D7FA               	goto	u3935
 13777  001854  0100               	movlb	0	; () banked
 13778  001856  517D               	movf	(??___fttol+1)& (0+255),w,b
 13779  001858  6F81               	movwf	___fttol@sign1& (0+255),b
 13780                           
 13781                           ; BSR set to: 0
 13782  00185A  8F79               	bsf	(___fttol@f1+1)& (0+255),7,b
 13783                           
 13784                           ; BSR set to: 0
 13785  00185C  0EFF               	movlw	255
 13786  00185E  1778               	andwf	___fttol@f1& (0+255),f,b
 13787  001860  0EFF               	movlw	255
 13788  001862  1779               	andwf	(___fttol@f1+1)& (0+255),f,b
 13789  001864  0E00               	movlw	0
 13790  001866  177A               	andwf	(___fttol@f1+2)& (0+255),f,b
 13791                           
 13792                           ; BSR set to: 0
 13793  001868  5178               	movf	___fttol@f1& (0+255),w,b
 13794  00186A  6F82               	movwf	___fttol@lval& (0+255),b
 13795  00186C  5179               	movf	(___fttol@f1+1)& (0+255),w,b
 13796  00186E  6F83               	movwf	(___fttol@lval+1)& (0+255),b
 13797  001870  517A               	movf	(___fttol@f1+2)& (0+255),w,b
 13798  001872  6F84               	movwf	(___fttol@lval+2)& (0+255),b
 13799  001874  6B85               	clrf	(___fttol@lval+3)& (0+255),b
 13800                           
 13801                           ; BSR set to: 0
 13802  001876  0E8E               	movlw	142
 13803  001878  5F86               	subwf	___fttol@exp1& (0+255),f,b
 13804                           
 13805                           ; BSR set to: 0
 13806  00187A  AF86               	btfss	___fttol@exp1& (0+255),7,b
 13807  00187C  D016               	goto	l1691
 13808                           
 13809                           ; BSR set to: 0
 13810  00187E  5186               	movf	___fttol@exp1& (0+255),w,b
 13811  001880  0A80               	xorlw	128
 13812  001882  0F8F               	addlw	143
 13813  001884  B0D8               	btfsc	status,0,c
 13814  001886  D009               	goto	l1692
 13815                           
 13816                           ; BSR set to: 0
 13817  001888  0E00               	movlw	0
 13818  00188A  6F78               	movwf	?___fttol& (0+255),b
 13819  00188C  0E00               	movlw	0
 13820  00188E  6F79               	movwf	(?___fttol+1)& (0+255),b
 13821  001890  0E00               	movlw	0
 13822  001892  6F7A               	movwf	(?___fttol+2)& (0+255),b
 13823  001894  0E00               	movlw	0
 13824  001896  6F7B               	movwf	(?___fttol+3)& (0+255),b
 13825                           
 13826                           ; BSR set to: 0
 13827  001898  0012               	return	
 13828  00189A                     l1692:
 13829                           
 13830                           ; BSR set to: 0
 13831                           
 13832                           ; BSR set to: 0
 13833                           
 13834                           ; BSR set to: 0
 13835  00189A  90D8               	bcf	status,0,c
 13836  00189C  3385               	rrcf	(___fttol@lval+3)& (0+255),f,b
 13837  00189E  3384               	rrcf	(___fttol@lval+2)& (0+255),f,b
 13838  0018A0  3383               	rrcf	(___fttol@lval+1)& (0+255),f,b
 13839  0018A2  3382               	rrcf	___fttol@lval& (0+255),f,b
 13840                           
 13841                           ; BSR set to: 0
 13842  0018A4  3F86               	incfsz	___fttol@exp1& (0+255),f,b
 13843  0018A6  D7F9               	goto	l1692
 13844                           
 13845                           ; BSR set to: 0
 13846  0018A8  D015               	goto	u3970
 13847  0018AA                     l1691:
 13848                           
 13849                           ; BSR set to: 0
 13850                           
 13851                           ; BSR set to: 0
 13852  0018AA  0E17               	movlw	23
 13853  0018AC  6586               	cpfsgt	___fttol@exp1& (0+255),b
 13854  0018AE  D00F               	goto	l1697
 13855                           
 13856                           ; BSR set to: 0
 13857  0018B0  0E00               	movlw	0
 13858  0018B2  6F78               	movwf	?___fttol& (0+255),b
 13859  0018B4  0E00               	movlw	0
 13860  0018B6  6F79               	movwf	(?___fttol+1)& (0+255),b
 13861  0018B8  0E00               	movlw	0
 13862  0018BA  6F7A               	movwf	(?___fttol+2)& (0+255),b
 13863  0018BC  0E00               	movlw	0
 13864  0018BE  6F7B               	movwf	(?___fttol+3)& (0+255),b
 13865                           
 13866                           ; BSR set to: 0
 13867  0018C0  0012               	return	
 13868  0018C2                     
 13869                           ; BSR set to: 0
 13870                           
 13871                           ; BSR set to: 0
 13872  0018C2  90D8               	bcf	status,0,c
 13873  0018C4  3782               	rlcf	___fttol@lval& (0+255),f,b
 13874  0018C6  3783               	rlcf	(___fttol@lval+1)& (0+255),f,b
 13875  0018C8  3784               	rlcf	(___fttol@lval+2)& (0+255),f,b
 13876  0018CA  3785               	rlcf	(___fttol@lval+3)& (0+255),f,b
 13877  0018CC  0786               	decf	___fttol@exp1& (0+255),f,b
 13878  0018CE                     l1697:
 13879                           
 13880                           ; BSR set to: 0
 13881                           
 13882                           ; BSR set to: 0
 13883  0018CE  5186               	movf	___fttol@exp1& (0+255),w,b
 13884  0018D0  A4D8               	btfss	status,2,c
 13885  0018D2  D7F7               	goto	l1698
 13886  0018D4                     u3970:
 13887                           
 13888                           ; BSR set to: 0
 13889                           
 13890                           ; BSR set to: 0
 13891                           
 13892                           ; BSR set to: 0
 13893  0018D4  5181               	movf	___fttol@sign1& (0+255),w,b
 13894  0018D6  B4D8               	btfsc	status,2,c
 13895  0018D8  D008               	goto	l1700
 13896                           
 13897                           ; BSR set to: 0
 13898  0018DA  1F85               	comf	(___fttol@lval+3)& (0+255),f,b
 13899  0018DC  1F84               	comf	(___fttol@lval+2)& (0+255),f,b
 13900  0018DE  1F83               	comf	(___fttol@lval+1)& (0+255),f,b
 13901  0018E0  6D82               	negf	___fttol@lval& (0+255),b
 13902  0018E2  0E00               	movlw	0
 13903  0018E4  2383               	addwfc	(___fttol@lval+1)& (0+255),f,b
 13904  0018E6  2384               	addwfc	(___fttol@lval+2)& (0+255),f,b
 13905  0018E8  2385               	addwfc	(___fttol@lval+3)& (0+255),f,b
 13906  0018EA                     l1700:
 13907                           
 13908                           ; BSR set to: 0
 13909                           
 13910                           ; BSR set to: 0
 13911  0018EA  C082  F078         	movff	___fttol@lval,?___fttol
 13912  0018EE  C083  F079         	movff	___fttol@lval+1,?___fttol+1
 13913  0018F2  C084  F07A         	movff	___fttol@lval+2,?___fttol+2
 13914  0018F6  C085  F07B         	movff	___fttol@lval+3,?___fttol+3
 13915  0018FA  0012               	return	
 13916  0018FC                     __end_of___fttol:
 13917                           	opt stack 0
 13918                           tosu	equ	0xFFF
 13919                           tosh	equ	0xFFE
 13920                           tosl	equ	0xFFD
 13921                           pclath	equ	0xFFA
 13922                           tblptru	equ	0xFF8
 13923                           tblptrh	equ	0xFF7
 13924                           tblptrl	equ	0xFF6
 13925                           tablat	equ	0xFF5
 13926                           prodh	equ	0xFF4
 13927                           prodl	equ	0xFF3
 13928                           intcon	equ	0xFF2
 13929                           intcon2	equ	0xFF1
 13930                           postinc0	equ	0xFEE
 13931                           wreg	equ	0xFE8
 13932                           indf1	equ	0xFE7
 13933                           postdec1	equ	0xFE5
 13934                           fsr1h	equ	0xFE2
 13935                           fsr1l	equ	0xFE1
 13936                           indf2	equ	0xFDF
 13937                           postinc2	equ	0xFDE
 13938                           postdec2	equ	0xFDD
 13939                           fsr2h	equ	0xFDA
 13940                           fsr2l	equ	0xFD9
 13941                           status	equ	0xFD8
 13942                           
 13943 ;; *************** function ___ftge *****************
 13944 ;; Defined at:
 13945 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 13946 ;; Parameters:    Size  Location     Type
 13947 ;;  ff1             3   23[COMRAM] float 
 13948 ;;  ff2             3   26[COMRAM] float 
 13949 ;; Auto vars:     Size  Location     Type
 13950 ;;		None
 13951 ;; Return value:  Size  Location     Type
 13952 ;;		None               void
 13953 ;; Registers used:
 13954 ;;		wreg, status,2, status,0
 13955 ;; Tracked objects:
 13956 ;;		On entry : 0/0
 13957 ;;		On exit  : 0/0
 13958 ;;		Unchanged: 0/0
 13959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13960 ;;      Params:         6       0       0       0       0       0       0
 13961 ;;      Locals:         0       0       0       0       0       0       0
 13962 ;;      Temps:          3       0       0       0       0       0       0
 13963 ;;      Totals:         9       0       0       0       0       0       0
 13964 ;;Total ram usage:        9 bytes
 13965 ;; Hardware stack levels used:    1
 13966 ;; Hardware stack levels required when called:    3
 13967 ;; This function calls:
 13968 ;;		Nothing
 13969 ;; This function is called by:
 13970 ;;		_CheckFlashPrecentage
 13971 ;;		_pow
 13972 ;;		_exp
 13973 ;;		_floor
 13974 ;; This function uses a non-reentrant model
 13975 ;;
 13976                           
 13977                           	psect	text93
 13978  00241A                     __ptext93:
 13979                           	opt stack 0
 13980  00241A                     ___ftge:
 13981                           	opt stack 26
 13982                           
 13983                           ; BSR set to: 0
 13984                           ;incstack = 0
 13985  00241A  AE1A               	btfss	___ftge@ff1+2,7,c
 13986  00241C  D016               	goto	l1661
 13987  00241E  C018  F01E         	movff	___ftge@ff1,??___ftge
 13988  002422  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
 13989  002426  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
 13990  00242A  1E1E               	comf	??___ftge,f,c
 13991  00242C  1E1F               	comf	??___ftge+1,f,c
 13992  00242E  1E20               	comf	??___ftge+2,f,c
 13993  002430  2A1E               	incf	??___ftge,f,c
 13994  002432  0E00               	movlw	0
 13995  002434  221F               	addwfc	??___ftge+1,f,c
 13996  002436  2220               	addwfc	??___ftge+2,f,c
 13997  002438  0E00               	movlw	0
 13998  00243A  241E               	addwf	??___ftge,w,c
 13999  00243C  6E18               	movwf	___ftge@ff1,c
 14000  00243E  0E00               	movlw	0
 14001  002440  201F               	addwfc	??___ftge+1,w,c
 14002  002442  6E19               	movwf	___ftge@ff1+1,c
 14003  002444  0E80               	movlw	128
 14004  002446  2020               	addwfc	??___ftge+2,w,c
 14005  002448  6E1A               	movwf	___ftge@ff1+2,c
 14006  00244A                     l1661:
 14007  00244A  AE1D               	btfss	___ftge@ff2+2,7,c
 14008  00244C  D016               	goto	l1662
 14009  00244E  C01B  F01E         	movff	___ftge@ff2,??___ftge
 14010  002452  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
 14011  002456  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
 14012  00245A  1E1E               	comf	??___ftge,f,c
 14013  00245C  1E1F               	comf	??___ftge+1,f,c
 14014  00245E  1E20               	comf	??___ftge+2,f,c
 14015  002460  2A1E               	incf	??___ftge,f,c
 14016  002462  0E00               	movlw	0
 14017  002464  221F               	addwfc	??___ftge+1,f,c
 14018  002466  2220               	addwfc	??___ftge+2,f,c
 14019  002468  0E00               	movlw	0
 14020  00246A  241E               	addwf	??___ftge,w,c
 14021  00246C  6E1B               	movwf	___ftge@ff2,c
 14022  00246E  0E00               	movlw	0
 14023  002470  201F               	addwfc	??___ftge+1,w,c
 14024  002472  6E1C               	movwf	___ftge@ff2+1,c
 14025  002474  0E80               	movlw	128
 14026  002476  2020               	addwfc	??___ftge+2,w,c
 14027  002478  6E1D               	movwf	___ftge@ff2+2,c
 14028  00247A                     l1662:
 14029  00247A  0E00               	movlw	0
 14030  00247C  1A18               	xorwf	___ftge@ff1,f,c
 14031  00247E  0E00               	movlw	0
 14032  002480  1A19               	xorwf	___ftge@ff1+1,f,c
 14033  002482  0E80               	movlw	128
 14034  002484  1A1A               	xorwf	___ftge@ff1+2,f,c
 14035  002486  0E00               	movlw	0
 14036  002488  1A1B               	xorwf	___ftge@ff2,f,c
 14037  00248A  0E00               	movlw	0
 14038  00248C  1A1C               	xorwf	___ftge@ff2+1,f,c
 14039  00248E  0E80               	movlw	128
 14040  002490  1A1D               	xorwf	___ftge@ff2+2,f,c
 14041  002492  501B               	movf	___ftge@ff2,w,c
 14042  002494  5C18               	subwf	___ftge@ff1,w,c
 14043  002496  501C               	movf	___ftge@ff2+1,w,c
 14044  002498  5819               	subwfb	___ftge@ff1+1,w,c
 14045  00249A  501D               	movf	___ftge@ff2+2,w,c
 14046  00249C  581A               	subwfb	___ftge@ff1+2,w,c
 14047  00249E  B0D8               	btfsc	status,0,c
 14048  0024A0  D002               	goto	l4297
 14049  0024A2  90D8               	bcf	status,0,c
 14050  0024A4  0012               	return	
 14051  0024A6                     l4297:
 14052  0024A6  80D8               	bsf	status,0,c
 14053  0024A8  0012               	return	
 14054  0024AA                     __end_of___ftge:
 14055                           	opt stack 0
 14056                           tosu	equ	0xFFF
 14057                           tosh	equ	0xFFE
 14058                           tosl	equ	0xFFD
 14059                           pclath	equ	0xFFA
 14060                           tblptru	equ	0xFF8
 14061                           tblptrh	equ	0xFF7
 14062                           tblptrl	equ	0xFF6
 14063                           tablat	equ	0xFF5
 14064                           prodh	equ	0xFF4
 14065                           prodl	equ	0xFF3
 14066                           intcon	equ	0xFF2
 14067                           intcon2	equ	0xFF1
 14068                           postinc0	equ	0xFEE
 14069                           wreg	equ	0xFE8
 14070                           indf1	equ	0xFE7
 14071                           postdec1	equ	0xFE5
 14072                           fsr1h	equ	0xFE2
 14073                           fsr1l	equ	0xFE1
 14074                           indf2	equ	0xFDF
 14075                           postinc2	equ	0xFDE
 14076                           postdec2	equ	0xFDD
 14077                           fsr2h	equ	0xFDA
 14078                           fsr2l	equ	0xFD9
 14079                           status	equ	0xFD8
 14080                           
 14081 ;; *************** function ___altoft *****************
 14082 ;; Defined at:
 14083 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 14084 ;; Parameters:    Size  Location     Type
 14085 ;;  c               4   39[BANK0 ] long 
 14086 ;; Auto vars:     Size  Location     Type
 14087 ;;  sign            1   47[COMRAM] unsigned char 
 14088 ;;  exp             1   46[COMRAM] unsigned char 
 14089 ;; Return value:  Size  Location     Type
 14090 ;;                  3   39[BANK0 ] float 
 14091 ;; Registers used:
 14092 ;;		wreg, status,2, status,0, cstack
 14093 ;; Tracked objects:
 14094 ;;		On entry : 0/0
 14095 ;;		On exit  : 0/0
 14096 ;;		Unchanged: 0/0
 14097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14098 ;;      Params:         0       4       0       0       0       0       0
 14099 ;;      Locals:         2       0       0       0       0       0       0
 14100 ;;      Temps:          0       4       0       0       0       0       0
 14101 ;;      Totals:         2       8       0       0       0       0       0
 14102 ;;Total ram usage:       10 bytes
 14103 ;; Hardware stack levels used:    1
 14104 ;; Hardware stack levels required when called:    4
 14105 ;; This function calls:
 14106 ;;		___ftpack
 14107 ;; This function is called by:
 14108 ;;		_floor
 14109 ;; This function uses a non-reentrant model
 14110 ;;
 14111                           
 14112                           	psect	text94
 14113  00262E                     __ptext94:
 14114                           	opt stack 0
 14115  00262E                     ___altoft:
 14116                           	opt stack 22
 14117                           
 14118                           ;incstack = 0
 14119  00262E  0E00               	movlw	0
 14120  002630  6E30               	movwf	___altoft@sign,c
 14121  002632  0E8E               	movlw	142
 14122  002634  6E2F               	movwf	___altoft@exp,c
 14123  002636  0100               	movlb	0	; () banked
 14124  002638  AF8A               	btfss	(___altoft@c+3)& (0+255),7,b
 14125  00263A  D011               	goto	l1459
 14126                           
 14127                           ; BSR set to: 0
 14128  00263C  1F8A               	comf	(___altoft@c+3)& (0+255),f,b
 14129  00263E  1F89               	comf	(___altoft@c+2)& (0+255),f,b
 14130  002640  1F88               	comf	(___altoft@c+1)& (0+255),f,b
 14131  002642  6D87               	negf	___altoft@c& (0+255),b
 14132  002644  0E00               	movlw	0
 14133  002646  2388               	addwfc	(___altoft@c+1)& (0+255),f,b
 14134  002648  2389               	addwfc	(___altoft@c+2)& (0+255),f,b
 14135  00264A  238A               	addwfc	(___altoft@c+3)& (0+255),f,b
 14136                           
 14137                           ; BSR set to: 0
 14138  00264C  0E01               	movlw	1
 14139  00264E  6E30               	movwf	___altoft@sign,c
 14140                           
 14141                           ; BSR set to: 0
 14142  002650  D006               	goto	l1459
 14143  002652                     
 14144                           ; BSR set to: 0
 14145                           
 14146                           ; BSR set to: 0
 14147  002652  90D8               	bcf	status,0,c
 14148  002654  338A               	rrcf	(___altoft@c+3)& (0+255),f,b
 14149  002656  3389               	rrcf	(___altoft@c+2)& (0+255),f,b
 14150  002658  3388               	rrcf	(___altoft@c+1)& (0+255),f,b
 14151  00265A  3387               	rrcf	___altoft@c& (0+255),f,b
 14152  00265C  2A2F               	incf	___altoft@exp,f,c
 14153  00265E                     l1459:
 14154                           
 14155                           ; BSR set to: 0
 14156                           
 14157                           ; BSR set to: 0
 14158  00265E  0E00               	movlw	0
 14159  002660  1587               	andwf	___altoft@c& (0+255),w,b
 14160  002662  6F8B               	movwf	??___altoft& (0+255),b
 14161  002664  0E00               	movlw	0
 14162  002666  1588               	andwf	(___altoft@c+1)& (0+255),w,b
 14163  002668  6F8C               	movwf	(??___altoft+1)& (0+255),b
 14164  00266A  0E00               	movlw	0
 14165  00266C  1589               	andwf	(___altoft@c+2)& (0+255),w,b
 14166  00266E  6F8D               	movwf	(??___altoft+2)& (0+255),b
 14167  002670  0EFF               	movlw	255
 14168  002672  158A               	andwf	(___altoft@c+3)& (0+255),w,b
 14169  002674  6F8E               	movwf	(??___altoft+3)& (0+255),b
 14170  002676  518B               	movf	??___altoft& (0+255),w,b
 14171  002678  118C               	iorwf	(??___altoft+1)& (0+255),w,b
 14172  00267A  118D               	iorwf	(??___altoft+2)& (0+255),w,b
 14173  00267C  118E               	iorwf	(??___altoft+3)& (0+255),w,b
 14174  00267E  A4D8               	btfss	status,2,c
 14175  002680  D7E8               	goto	l1460
 14176                           
 14177                           ; BSR set to: 0
 14178                           
 14179                           ; BSR set to: 0
 14180  002682  C087  F018         	movff	___altoft@c,___ftpack@arg
 14181  002686  C088  F019         	movff	___altoft@c+1,___ftpack@arg+1
 14182  00268A  C089  F01A         	movff	___altoft@c+2,___ftpack@arg+2
 14183  00268E  C02F  F01B         	movff	___altoft@exp,___ftpack@exp
 14184  002692  C030  F01C         	movff	___altoft@sign,___ftpack@sign
 14185  002696  EC90  F010         	call	___ftpack	;wreg free
 14186  00269A  C018  F087         	movff	?___ftpack,?___altoft
 14187  00269E  C019  F088         	movff	?___ftpack+1,?___altoft+1
 14188  0026A2  C01A  F089         	movff	?___ftpack+2,?___altoft+2
 14189  0026A6  0012               	return	
 14190  0026A8                     __end_of___altoft:
 14191                           	opt stack 0
 14192                           tosu	equ	0xFFF
 14193                           tosh	equ	0xFFE
 14194                           tosl	equ	0xFFD
 14195                           pclath	equ	0xFFA
 14196                           tblptru	equ	0xFF8
 14197                           tblptrh	equ	0xFF7
 14198                           tblptrl	equ	0xFF6
 14199                           tablat	equ	0xFF5
 14200                           prodh	equ	0xFF4
 14201                           prodl	equ	0xFF3
 14202                           intcon	equ	0xFF2
 14203                           intcon2	equ	0xFF1
 14204                           postinc0	equ	0xFEE
 14205                           wreg	equ	0xFE8
 14206                           indf1	equ	0xFE7
 14207                           postdec1	equ	0xFE5
 14208                           fsr1h	equ	0xFE2
 14209                           fsr1l	equ	0xFE1
 14210                           indf2	equ	0xFDF
 14211                           postinc2	equ	0xFDE
 14212                           postdec2	equ	0xFDD
 14213                           fsr2h	equ	0xFDA
 14214                           fsr2l	equ	0xFD9
 14215                           status	equ	0xFD8
 14216                           
 14217 ;; *************** function _eval_poly *****************
 14218 ;; Defined at:
 14219 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
 14220 ;; Parameters:    Size  Location     Type
 14221 ;;  x               3   36[BANK0 ] float 
 14222 ;;  d               2   39[BANK0 ] PTR const 
 14223 ;;		 -> log@coeff(27), exp@coeff(30), 
 14224 ;;  n               2   41[BANK0 ] int 
 14225 ;; Auto vars:     Size  Location     Type
 14226 ;;  res             3   43[BANK0 ] int 
 14227 ;; Return value:  Size  Location     Type
 14228 ;;                  3   36[BANK0 ] int 
 14229 ;; Registers used:
 14230 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14231 ;; Tracked objects:
 14232 ;;		On entry : 0/0
 14233 ;;		On exit  : 0/0
 14234 ;;		Unchanged: 0/0
 14235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14236 ;;      Params:         0       7       0       0       0       0       0
 14237 ;;      Locals:         0       3       0       0       0       0       0
 14238 ;;      Temps:          2       0       0       0       0       0       0
 14239 ;;      Totals:         2      10       0       0       0       0       0
 14240 ;;Total ram usage:       12 bytes
 14241 ;; Hardware stack levels used:    1
 14242 ;; Hardware stack levels required when called:    5
 14243 ;; This function calls:
 14244 ;;		___ftadd
 14245 ;;		___ftmul
 14246 ;;		___wmul
 14247 ;; This function is called by:
 14248 ;;		_exp
 14249 ;;		_log
 14250 ;; This function uses a non-reentrant model
 14251 ;;
 14252                           
 14253                           	psect	text95
 14254  001CA0                     __ptext95:
 14255                           	opt stack 0
 14256  001CA0                     _eval_poly:
 14257                           	opt stack 22
 14258                           
 14259                           ;incstack = 0
 14260  001CA0  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 14261  001CA4  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 14262  001CA8  0E00               	movlw	0
 14263  001CAA  6E1B               	movwf	___wmul@multiplicand+1,c
 14264  001CAC  0E03               	movlw	3
 14265  001CAE  6E1A               	movwf	___wmul@multiplicand,c
 14266  001CB0  EC98  F01A         	call	___wmul	;wreg free
 14267  001CB4  C087  F02F         	movff	eval_poly@d,??_eval_poly
 14268  001CB8  C088  F030         	movff	eval_poly@d+1,??_eval_poly+1
 14269  001CBC  5018               	movf	?___wmul,w,c
 14270  001CBE  262F               	addwf	??_eval_poly,f,c
 14271  001CC0  5019               	movf	?___wmul+1,w,c
 14272  001CC2  2230               	addwfc	??_eval_poly+1,f,c
 14273  001CC4  C02F  FFF6         	movff	??_eval_poly,tblptrl
 14274  001CC8  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 14275  001CCC                     	if	0	;tblptru may be non-zero
 14276  001CCC                     	endif
 14277  001CCC                     	if	0	;tblptru may be non-zero
 14278  001CCC                     	endif
 14279  001CCC  0009               	tblrd		*+
 14280  001CCE  CFF5 F08B          	movff	tablat,eval_poly@res
 14281  001CD2  0009               	tblrd		*+
 14282  001CD4  CFF5 F08C          	movff	tablat,eval_poly@res+1
 14283  001CD8  000A               	tblrd		*-
 14284  001CDA  CFF5 F08D          	movff	tablat,eval_poly@res+2
 14285  001CDE  D03F               	goto	l2084
 14286  001CE0  C08B  F06C         	movff	eval_poly@res,___ftmul@f2
 14287  001CE4  C08C  F06D         	movff	eval_poly@res+1,___ftmul@f2+1
 14288  001CE8  C08D  F06E         	movff	eval_poly@res+2,___ftmul@f2+2
 14289  001CEC  C084  F069         	movff	eval_poly@x,___ftmul@f1
 14290  001CF0  C085  F06A         	movff	eval_poly@x+1,___ftmul@f1+1
 14291  001CF4  C086  F06B         	movff	eval_poly@x+2,___ftmul@f1+2
 14292  001CF8  EC7E  F00C         	call	___ftmul	;wreg free
 14293  001CFC  C069  F078         	movff	?___ftmul,___ftadd@f1
 14294  001D00  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 14295  001D04  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 14296  001D08  0E00               	movlw	0
 14297  001D0A  6E1B               	movwf	___wmul@multiplicand+1,c
 14298  001D0C  0E03               	movlw	3
 14299  001D0E  6E1A               	movwf	___wmul@multiplicand,c
 14300  001D10  0100               	movlb	0	; () banked
 14301  001D12  0789               	decf	eval_poly@n& (0+255),f,b
 14302  001D14  A0D8               	btfss	status,0,c
 14303  001D16  078A               	decf	(eval_poly@n+1)& (0+255),f,b
 14304  001D18  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 14305  001D1C  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 14306  001D20  EC98  F01A         	call	___wmul	;wreg free
 14307  001D24  C087  F02F         	movff	eval_poly@d,??_eval_poly
 14308  001D28  C088  F030         	movff	eval_poly@d+1,??_eval_poly+1
 14309  001D2C  5018               	movf	?___wmul,w,c
 14310  001D2E  262F               	addwf	??_eval_poly,f,c
 14311  001D30  5019               	movf	?___wmul+1,w,c
 14312  001D32  2230               	addwfc	??_eval_poly+1,f,c
 14313  001D34  C02F  FFF6         	movff	??_eval_poly,tblptrl
 14314  001D38  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 14315  001D3C                     	if	0	;tblptru may be non-zero
 14316  001D3C                     	endif
 14317  001D3C                     	if	0	;tblptru may be non-zero
 14318  001D3C                     	endif
 14319  001D3C  0009               	tblrd		*+
 14320  001D3E  CFF5 F07B          	movff	tablat,___ftadd@f2
 14321  001D42  0009               	tblrd		*+
 14322  001D44  CFF5 F07C          	movff	tablat,___ftadd@f2+1
 14323  001D48  000A               	tblrd		*-
 14324  001D4A  CFF5 F07D          	movff	tablat,___ftadd@f2+2
 14325  001D4E  ECD9  F008         	call	___ftadd	;wreg free
 14326  001D52  C078  F08B         	movff	?___ftadd,eval_poly@res
 14327  001D56  C079  F08C         	movff	?___ftadd+1,eval_poly@res+1
 14328  001D5A  C07A  F08D         	movff	?___ftadd+2,eval_poly@res+2
 14329  001D5E                     l2084:
 14330  001D5E  0100               	movlb	0	; () banked
 14331  001D60  5189               	movf	eval_poly@n& (0+255),w,b
 14332  001D62  118A               	iorwf	(eval_poly@n+1)& (0+255),w,b
 14333  001D64  A4D8               	btfss	status,2,c
 14334  001D66  D7BC               	goto	l2085
 14335                           
 14336                           ; BSR set to: 0
 14337  001D68  C08B  F084         	movff	eval_poly@res,?_eval_poly
 14338  001D6C  C08C  F085         	movff	eval_poly@res+1,?_eval_poly+1
 14339  001D70  C08D  F086         	movff	eval_poly@res+2,?_eval_poly+2
 14340                           
 14341                           ; BSR set to: 0
 14342  001D74  0012               	return		;funcret
 14343  001D76                     __end_of_eval_poly:
 14344                           	opt stack 0
 14345                           tosu	equ	0xFFF
 14346                           tosh	equ	0xFFE
 14347                           tosl	equ	0xFFD
 14348                           pclath	equ	0xFFA
 14349                           tblptru	equ	0xFF8
 14350                           tblptrh	equ	0xFF7
 14351                           tblptrl	equ	0xFF6
 14352                           tablat	equ	0xFF5
 14353                           prodh	equ	0xFF4
 14354                           prodl	equ	0xFF3
 14355                           intcon	equ	0xFF2
 14356                           intcon2	equ	0xFF1
 14357                           postinc0	equ	0xFEE
 14358                           wreg	equ	0xFE8
 14359                           indf1	equ	0xFE7
 14360                           postdec1	equ	0xFE5
 14361                           fsr1h	equ	0xFE2
 14362                           fsr1l	equ	0xFE1
 14363                           indf2	equ	0xFDF
 14364                           postinc2	equ	0xFDE
 14365                           postdec2	equ	0xFDD
 14366                           fsr2h	equ	0xFDA
 14367                           fsr2l	equ	0xFD9
 14368                           status	equ	0xFD8
 14369                           
 14370 ;; *************** function ___wmul *****************
 14371 ;; Defined at:
 14372 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 14373 ;; Parameters:    Size  Location     Type
 14374 ;;  multiplier      2   23[COMRAM] unsigned int 
 14375 ;;  multiplicand    2   25[COMRAM] unsigned int 
 14376 ;; Auto vars:     Size  Location     Type
 14377 ;;  product         2   27[COMRAM] unsigned int 
 14378 ;; Return value:  Size  Location     Type
 14379 ;;                  2   23[COMRAM] unsigned int 
 14380 ;; Registers used:
 14381 ;;		wreg, status,2, status,0, prodl, prodh
 14382 ;; Tracked objects:
 14383 ;;		On entry : 0/0
 14384 ;;		On exit  : 0/0
 14385 ;;		Unchanged: 0/0
 14386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14387 ;;      Params:         4       0       0       0       0       0       0
 14388 ;;      Locals:         2       0       0       0       0       0       0
 14389 ;;      Temps:          0       0       0       0       0       0       0
 14390 ;;      Totals:         6       0       0       0       0       0       0
 14391 ;;Total ram usage:        6 bytes
 14392 ;; Hardware stack levels used:    1
 14393 ;; Hardware stack levels required when called:    3
 14394 ;; This function calls:
 14395 ;;		Nothing
 14396 ;; This function is called by:
 14397 ;;		_eval_poly
 14398 ;; This function uses a non-reentrant model
 14399 ;;
 14400                           
 14401                           	psect	text96
 14402  003530                     __ptext96:
 14403                           	opt stack 0
 14404  003530                     ___wmul:
 14405                           	opt stack 23
 14406                           
 14407                           ; BSR set to: 0
 14408                           ;incstack = 0
 14409  003530  5018               	movf	___wmul@multiplier,w,c
 14410  003532  021A               	mulwf	___wmul@multiplicand,c
 14411  003534  CFF3 F01C          	movff	prodl,___wmul@product
 14412  003538  CFF4 F01D          	movff	prodh,___wmul@product+1
 14413  00353C  5018               	movf	___wmul@multiplier,w,c
 14414  00353E  021B               	mulwf	___wmul@multiplicand+1,c
 14415  003540  50F3               	movf	prodl,w,c
 14416  003542  261D               	addwf	___wmul@product+1,f,c
 14417  003544  5019               	movf	___wmul@multiplier+1,w,c
 14418  003546  021A               	mulwf	___wmul@multiplicand,c
 14419  003548  50F3               	movf	prodl,w,c
 14420  00354A  261D               	addwf	___wmul@product+1,f,c
 14421  00354C  C01C  F018         	movff	___wmul@product,?___wmul
 14422  003550  C01D  F019         	movff	___wmul@product+1,?___wmul+1
 14423  003554  0012               	return	
 14424  003556                     __end_of___wmul:
 14425                           	opt stack 0
 14426                           tosu	equ	0xFFF
 14427                           tosh	equ	0xFFE
 14428                           tosl	equ	0xFFD
 14429                           pclath	equ	0xFFA
 14430                           tblptru	equ	0xFF8
 14431                           tblptrh	equ	0xFF7
 14432                           tblptrl	equ	0xFF6
 14433                           tablat	equ	0xFF5
 14434                           prodh	equ	0xFF4
 14435                           prodl	equ	0xFF3
 14436                           intcon	equ	0xFF2
 14437                           intcon2	equ	0xFF1
 14438                           postinc0	equ	0xFEE
 14439                           wreg	equ	0xFE8
 14440                           indf1	equ	0xFE7
 14441                           postdec1	equ	0xFE5
 14442                           fsr1h	equ	0xFE2
 14443                           fsr1l	equ	0xFE1
 14444                           indf2	equ	0xFDF
 14445                           postinc2	equ	0xFDE
 14446                           postdec2	equ	0xFDD
 14447                           fsr2h	equ	0xFDA
 14448                           fsr2l	equ	0xFD9
 14449                           status	equ	0xFD8
 14450                           
 14451 ;; *************** function ___ftmul *****************
 14452 ;; Defined at:
 14453 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 14454 ;; Parameters:    Size  Location     Type
 14455 ;;  f1              3    9[BANK0 ] float 
 14456 ;;  f2              3   12[BANK0 ] float 
 14457 ;; Auto vars:     Size  Location     Type
 14458 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
 14459 ;;  sign            1   23[BANK0 ] unsigned char 
 14460 ;;  cntr            1   22[BANK0 ] unsigned char 
 14461 ;;  exp             1   18[BANK0 ] unsigned char 
 14462 ;; Return value:  Size  Location     Type
 14463 ;;                  3    9[BANK0 ] float 
 14464 ;; Registers used:
 14465 ;;		wreg, status,2, status,0, cstack
 14466 ;; Tracked objects:
 14467 ;;		On entry : 0/0
 14468 ;;		On exit  : 0/0
 14469 ;;		Unchanged: 0/0
 14470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14471 ;;      Params:         0       6       0       0       0       0       0
 14472 ;;      Locals:         0       6       0       0       0       0       0
 14473 ;;      Temps:          0       3       0       0       0       0       0
 14474 ;;      Totals:         0      15       0       0       0       0       0
 14475 ;;Total ram usage:       15 bytes
 14476 ;; Hardware stack levels used:    1
 14477 ;; Hardware stack levels required when called:    4
 14478 ;; This function calls:
 14479 ;;		___ftpack
 14480 ;; This function is called by:
 14481 ;;		_AdcConvert
 14482 ;;		_CheckFlashPrecentage
 14483 ;;		_pow
 14484 ;;		_exp
 14485 ;;		_log
 14486 ;;		_eval_poly
 14487 ;; This function uses a non-reentrant model
 14488 ;;
 14489                           
 14490                           	psect	text97
 14491  0018FC                     __ptext97:
 14492                           	opt stack 0
 14493  0018FC                     ___ftmul:
 14494                           	opt stack 25
 14495                           
 14496                           ;incstack = 0
 14497  0018FC  C06B  F06F         	movff	___ftmul@f1+2,??___ftmul
 14498  001900  0100               	movlb	0	; () banked
 14499  001902  6B70               	clrf	(??___ftmul+1)& (0+255),b
 14500  001904  6B71               	clrf	(??___ftmul+2)& (0+255),b
 14501  001906  356A               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 14502  001908  376F               	rlcf	??___ftmul& (0+255),f,b
 14503  00190A  E301               	bnc	u6691
 14504  00190C  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 14505  00190E                     u6691:
 14506  00190E  516F               	movf	??___ftmul& (0+255),w,b
 14507  001910  6F72               	movwf	___ftmul@exp& (0+255),b
 14508  001912  5172               	movf	___ftmul@exp& (0+255),w,b
 14509  001914  A4D8               	btfss	status,2,c
 14510  001916  D007               	goto	l1668
 14511                           
 14512                           ; BSR set to: 0
 14513  001918  0E00               	movlw	0
 14514  00191A  6F69               	movwf	?___ftmul& (0+255),b
 14515  00191C  0E00               	movlw	0
 14516  00191E  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 14517  001920  0E00               	movlw	0
 14518  001922  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 14519                           
 14520                           ; BSR set to: 0
 14521  001924  0012               	return	
 14522  001926                     l1668:
 14523                           
 14524                           ; BSR set to: 0
 14525                           
 14526                           ; BSR set to: 0
 14527  001926  C06E  F06F         	movff	___ftmul@f2+2,??___ftmul
 14528  00192A  6B70               	clrf	(??___ftmul+1)& (0+255),b
 14529  00192C  6B71               	clrf	(??___ftmul+2)& (0+255),b
 14530  00192E  356D               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 14531  001930  376F               	rlcf	??___ftmul& (0+255),f,b
 14532  001932  E301               	bnc	u6711
 14533  001934  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 14534  001936                     u6711:
 14535  001936  516F               	movf	??___ftmul& (0+255),w,b
 14536  001938  6F77               	movwf	___ftmul@sign& (0+255),b
 14537  00193A  5177               	movf	___ftmul@sign& (0+255),w,b
 14538  00193C  A4D8               	btfss	status,2,c
 14539  00193E  D007               	goto	l1670
 14540                           
 14541                           ; BSR set to: 0
 14542  001940  0E00               	movlw	0
 14543  001942  6F69               	movwf	?___ftmul& (0+255),b
 14544  001944  0E00               	movlw	0
 14545  001946  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 14546  001948  0E00               	movlw	0
 14547  00194A  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 14548                           
 14549                           ; BSR set to: 0
 14550  00194C  0012               	return	
 14551  00194E                     l1670:
 14552                           
 14553                           ; BSR set to: 0
 14554                           
 14555                           ; BSR set to: 0
 14556  00194E  5177               	movf	___ftmul@sign& (0+255),w,b
 14557  001950  0F7B               	addlw	123
 14558  001952  2772               	addwf	___ftmul@exp& (0+255),f,b
 14559                           
 14560                           ; BSR set to: 0
 14561  001954  C06B  F077         	movff	___ftmul@f1+2,___ftmul@sign
 14562  001958  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 14563  00195A  1B77               	xorwf	___ftmul@sign& (0+255),f,b
 14564  00195C  0E80               	movlw	128
 14565  00195E  1777               	andwf	___ftmul@sign& (0+255),f,b
 14566                           
 14567                           ; BSR set to: 0
 14568  001960  8F6A               	bsf	(___ftmul@f1+1)& (0+255),7,b
 14569                           
 14570                           ; BSR set to: 0
 14571  001962  8F6D               	bsf	(___ftmul@f2+1)& (0+255),7,b
 14572                           
 14573                           ; BSR set to: 0
 14574  001964  0EFF               	movlw	255
 14575  001966  176C               	andwf	___ftmul@f2& (0+255),f,b
 14576  001968  0EFF               	movlw	255
 14577  00196A  176D               	andwf	(___ftmul@f2+1)& (0+255),f,b
 14578  00196C  0E00               	movlw	0
 14579  00196E  176E               	andwf	(___ftmul@f2+2)& (0+255),f,b
 14580                           
 14581                           ; BSR set to: 0
 14582  001970  0E00               	movlw	0
 14583  001972  6F73               	movwf	___ftmul@f3_as_product& (0+255),b
 14584  001974  0E00               	movlw	0
 14585  001976  6F74               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 14586  001978  0E00               	movlw	0
 14587  00197A  6F75               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 14588                           
 14589                           ; BSR set to: 0
 14590  00197C  0E07               	movlw	7
 14591  00197E  6F76               	movwf	___ftmul@cntr& (0+255),b
 14592  001980                     
 14593                           ; BSR set to: 0
 14594                           
 14595                           ; BSR set to: 0
 14596  001980  A169               	btfss	___ftmul@f1& (0+255),0,b
 14597  001982  D006               	goto	l1672
 14598                           
 14599                           ; BSR set to: 0
 14600  001984  516C               	movf	___ftmul@f2& (0+255),w,b
 14601  001986  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 14602  001988  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 14603  00198A  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 14604  00198C  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 14605  00198E  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 14606  001990                     l1672:
 14607                           
 14608                           ; BSR set to: 0
 14609                           
 14610                           ; BSR set to: 0
 14611  001990  90D8               	bcf	status,0,c
 14612  001992  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 14613  001994  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 14614  001996  3369               	rrcf	___ftmul@f1& (0+255),f,b
 14615  001998  90D8               	bcf	status,0,c
 14616  00199A  376C               	rlcf	___ftmul@f2& (0+255),f,b
 14617  00199C  376D               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 14618  00199E  376E               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 14619                           
 14620                           ; BSR set to: 0
 14621  0019A0  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 14622  0019A2  D7EE               	goto	l1671
 14623                           
 14624                           ; BSR set to: 0
 14625                           
 14626                           ; BSR set to: 0
 14627  0019A4  0E09               	movlw	9
 14628  0019A6  6F76               	movwf	___ftmul@cntr& (0+255),b
 14629  0019A8                     
 14630                           ; BSR set to: 0
 14631                           
 14632                           ; BSR set to: 0
 14633  0019A8  A169               	btfss	___ftmul@f1& (0+255),0,b
 14634  0019AA  D006               	goto	l1675
 14635                           
 14636                           ; BSR set to: 0
 14637  0019AC  516C               	movf	___ftmul@f2& (0+255),w,b
 14638  0019AE  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 14639  0019B0  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 14640  0019B2  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 14641  0019B4  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 14642  0019B6  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 14643  0019B8                     l1675:
 14644                           
 14645                           ; BSR set to: 0
 14646                           
 14647                           ; BSR set to: 0
 14648  0019B8  90D8               	bcf	status,0,c
 14649  0019BA  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 14650  0019BC  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 14651  0019BE  3369               	rrcf	___ftmul@f1& (0+255),f,b
 14652  0019C0  90D8               	bcf	status,0,c
 14653  0019C2  3375               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 14654  0019C4  3374               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 14655  0019C6  3373               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 14656                           
 14657                           ; BSR set to: 0
 14658  0019C8  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 14659  0019CA  D7EE               	goto	l1674
 14660                           
 14661                           ; BSR set to: 0
 14662                           
 14663                           ; BSR set to: 0
 14664  0019CC  C073  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
 14665  0019D0  C074  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 14666  0019D4  C075  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 14667  0019D8  C072  F01B         	movff	___ftmul@exp,___ftpack@exp
 14668  0019DC  C077  F01C         	movff	___ftmul@sign,___ftpack@sign
 14669  0019E0  EC90  F010         	call	___ftpack	;wreg free
 14670  0019E4  C018  F069         	movff	?___ftpack,?___ftmul
 14671  0019E8  C019  F06A         	movff	?___ftpack+1,?___ftmul+1
 14672  0019EC  C01A  F06B         	movff	?___ftpack+2,?___ftmul+2
 14673  0019F0  0012               	return	
 14674  0019F2                     __end_of___ftmul:
 14675                           	opt stack 0
 14676                           tosu	equ	0xFFF
 14677                           tosh	equ	0xFFE
 14678                           tosl	equ	0xFFD
 14679                           pclath	equ	0xFFA
 14680                           tblptru	equ	0xFF8
 14681                           tblptrh	equ	0xFF7
 14682                           tblptrl	equ	0xFF6
 14683                           tablat	equ	0xFF5
 14684                           prodh	equ	0xFF4
 14685                           prodl	equ	0xFF3
 14686                           intcon	equ	0xFF2
 14687                           intcon2	equ	0xFF1
 14688                           postinc0	equ	0xFEE
 14689                           wreg	equ	0xFE8
 14690                           indf1	equ	0xFE7
 14691                           postdec1	equ	0xFE5
 14692                           fsr1h	equ	0xFE2
 14693                           fsr1l	equ	0xFE1
 14694                           indf2	equ	0xFDF
 14695                           postinc2	equ	0xFDE
 14696                           postdec2	equ	0xFDD
 14697                           fsr2h	equ	0xFDA
 14698                           fsr2l	equ	0xFD9
 14699                           status	equ	0xFD8
 14700                           
 14701 ;; *************** function ___ftsub *****************
 14702 ;; Defined at:
 14703 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
 14704 ;; Parameters:    Size  Location     Type
 14705 ;;  f1              3   36[BANK0 ] float 
 14706 ;;  f2              3   39[BANK0 ] float 
 14707 ;; Auto vars:     Size  Location     Type
 14708 ;;		None
 14709 ;; Return value:  Size  Location     Type
 14710 ;;                  3   36[BANK0 ] float 
 14711 ;; Registers used:
 14712 ;;		wreg, status,2, status,0, cstack
 14713 ;; Tracked objects:
 14714 ;;		On entry : 0/0
 14715 ;;		On exit  : 0/0
 14716 ;;		Unchanged: 0/0
 14717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14718 ;;      Params:         0       6       0       0       0       0       0
 14719 ;;      Locals:         0       0       0       0       0       0       0
 14720 ;;      Temps:          0       0       0       0       0       0       0
 14721 ;;      Totals:         0       6       0       0       0       0       0
 14722 ;;Total ram usage:        6 bytes
 14723 ;; Hardware stack levels used:    1
 14724 ;; Hardware stack levels required when called:    5
 14725 ;; This function calls:
 14726 ;;		___ftadd
 14727 ;; This function is called by:
 14728 ;;		_exp
 14729 ;; This function uses a non-reentrant model
 14730 ;;
 14731                           
 14732                           	psect	text98
 14733  00307C                     __ptext98:
 14734                           	opt stack 0
 14735  00307C                     ___ftsub:
 14736                           	opt stack 22
 14737                           
 14738                           ;incstack = 0
 14739  00307C  0100               	movlb	0	; () banked
 14740  00307E  5187               	movf	___ftsub@f2& (0+255),w,b
 14741  003080  1188               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 14742  003082  1189               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 14743  003084  B4D8               	btfsc	status,2,c
 14744  003086  D006               	goto	l1685
 14745                           
 14746                           ; BSR set to: 0
 14747  003088  0E00               	movlw	0
 14748  00308A  1B87               	xorwf	___ftsub@f2& (0+255),f,b
 14749  00308C  0E00               	movlw	0
 14750  00308E  1B88               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 14751  003090  0E80               	movlw	128
 14752  003092  1B89               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 14753  003094                     l1685:
 14754                           
 14755                           ; BSR set to: 0
 14756                           
 14757                           ; BSR set to: 0
 14758  003094  C084  F078         	movff	___ftsub@f1,___ftadd@f1
 14759  003098  C085  F079         	movff	___ftsub@f1+1,___ftadd@f1+1
 14760  00309C  C086  F07A         	movff	___ftsub@f1+2,___ftadd@f1+2
 14761  0030A0  C087  F07B         	movff	___ftsub@f2,___ftadd@f2
 14762  0030A4  C088  F07C         	movff	___ftsub@f2+1,___ftadd@f2+1
 14763  0030A8  C089  F07D         	movff	___ftsub@f2+2,___ftadd@f2+2
 14764  0030AC  ECD9  F008         	call	___ftadd	;wreg free
 14765  0030B0  C078  F084         	movff	?___ftadd,?___ftsub
 14766  0030B4  C079  F085         	movff	?___ftadd+1,?___ftsub+1
 14767  0030B8  C07A  F086         	movff	?___ftadd+2,?___ftsub+2
 14768  0030BC  0012               	return	
 14769  0030BE                     __end_of___ftsub:
 14770                           	opt stack 0
 14771                           tosu	equ	0xFFF
 14772                           tosh	equ	0xFFE
 14773                           tosl	equ	0xFFD
 14774                           pclath	equ	0xFFA
 14775                           tblptru	equ	0xFF8
 14776                           tblptrh	equ	0xFF7
 14777                           tblptrl	equ	0xFF6
 14778                           tablat	equ	0xFF5
 14779                           prodh	equ	0xFF4
 14780                           prodl	equ	0xFF3
 14781                           intcon	equ	0xFF2
 14782                           intcon2	equ	0xFF1
 14783                           postinc0	equ	0xFEE
 14784                           wreg	equ	0xFE8
 14785                           indf1	equ	0xFE7
 14786                           postdec1	equ	0xFE5
 14787                           fsr1h	equ	0xFE2
 14788                           fsr1l	equ	0xFE1
 14789                           indf2	equ	0xFDF
 14790                           postinc2	equ	0xFDE
 14791                           postdec2	equ	0xFDD
 14792                           fsr2h	equ	0xFDA
 14793                           fsr2l	equ	0xFD9
 14794                           status	equ	0xFD8
 14795                           
 14796 ;; *************** function ___ftadd *****************
 14797 ;; Defined at:
 14798 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 14799 ;; Parameters:    Size  Location     Type
 14800 ;;  f1              3   24[BANK0 ] float 
 14801 ;;  f2              3   27[BANK0 ] float 
 14802 ;; Auto vars:     Size  Location     Type
 14803 ;;  exp1            1   35[BANK0 ] unsigned char 
 14804 ;;  exp2            1   34[BANK0 ] unsigned char 
 14805 ;;  sign            1   33[BANK0 ] unsigned char 
 14806 ;; Return value:  Size  Location     Type
 14807 ;;                  3   24[BANK0 ] float 
 14808 ;; Registers used:
 14809 ;;		wreg, status,2, status,0, cstack
 14810 ;; Tracked objects:
 14811 ;;		On entry : 0/0
 14812 ;;		On exit  : 0/0
 14813 ;;		Unchanged: 0/0
 14814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14815 ;;      Params:         0       6       0       0       0       0       0
 14816 ;;      Locals:         0       3       0       0       0       0       0
 14817 ;;      Temps:          0       3       0       0       0       0       0
 14818 ;;      Totals:         0      12       0       0       0       0       0
 14819 ;;Total ram usage:       12 bytes
 14820 ;; Hardware stack levels used:    1
 14821 ;; Hardware stack levels required when called:    4
 14822 ;; This function calls:
 14823 ;;		___ftpack
 14824 ;; This function is called by:
 14825 ;;		___ftsub
 14826 ;;		_floor
 14827 ;;		_log
 14828 ;;		_eval_poly
 14829 ;; This function uses a non-reentrant model
 14830 ;;
 14831                           
 14832                           	psect	text99
 14833  0011B2                     __ptext99:
 14834                           	opt stack 0
 14835  0011B2                     ___ftadd:
 14836                           	opt stack 22
 14837                           
 14838                           ;incstack = 0
 14839  0011B2  C07A  F07E         	movff	___ftadd@f1+2,??___ftadd
 14840  0011B6  0100               	movlb	0	; () banked
 14841  0011B8  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 14842  0011BA  6B80               	clrf	(??___ftadd+2)& (0+255),b
 14843  0011BC  3579               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 14844  0011BE  377E               	rlcf	??___ftadd& (0+255),f,b
 14845  0011C0  E301               	bnc	u6481
 14846  0011C2  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 14847  0011C4                     u6481:
 14848  0011C4  517E               	movf	??___ftadd& (0+255),w,b
 14849  0011C6  6F83               	movwf	___ftadd@exp1& (0+255),b
 14850  0011C8  C07D  F07E         	movff	___ftadd@f2+2,??___ftadd
 14851  0011CC  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 14852  0011CE  6B80               	clrf	(??___ftadd+2)& (0+255),b
 14853  0011D0  357C               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 14854  0011D2  377E               	rlcf	??___ftadd& (0+255),f,b
 14855  0011D4  E301               	bnc	u6491
 14856  0011D6  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 14857  0011D8                     u6491:
 14858  0011D8  517E               	movf	??___ftadd& (0+255),w,b
 14859  0011DA  6F82               	movwf	___ftadd@exp2& (0+255),b
 14860                           
 14861                           ; BSR set to: 0
 14862  0011DC  5183               	movf	___ftadd@exp1& (0+255),w,b
 14863  0011DE  B4D8               	btfsc	status,2,c
 14864  0011E0  D00B               	goto	u6520
 14865                           
 14866                           ; BSR set to: 0
 14867  0011E2  5182               	movf	___ftadd@exp2& (0+255),w,b
 14868  0011E4  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 14869  0011E6  B0D8               	btfsc	status,0,c
 14870  0011E8  D00E               	goto	l1620
 14871                           
 14872                           ; BSR set to: 0
 14873  0011EA  5183               	movf	___ftadd@exp1& (0+255),w,b
 14874  0011EC  0800               	sublw	0
 14875  0011EE  2582               	addwf	___ftadd@exp2& (0+255),w,b
 14876  0011F0  6F7E               	movwf	??___ftadd& (0+255),b
 14877  0011F2  0E18               	movlw	24
 14878  0011F4  657E               	cpfsgt	??___ftadd& (0+255),b
 14879  0011F6  D007               	goto	l1620
 14880  0011F8                     u6520:
 14881                           
 14882                           ; BSR set to: 0
 14883  0011F8  C07B  F078         	movff	___ftadd@f2,?___ftadd
 14884  0011FC  C07C  F079         	movff	___ftadd@f2+1,?___ftadd+1
 14885  001200  C07D  F07A         	movff	___ftadd@f2+2,?___ftadd+2
 14886  001204  0012               	return	
 14887  001206                     l1620:
 14888                           
 14889                           ; BSR set to: 0
 14890                           
 14891                           ; BSR set to: 0
 14892  001206  5182               	movf	___ftadd@exp2& (0+255),w,b
 14893  001208  B4D8               	btfsc	status,2,c
 14894  00120A  D00B               	goto	u6550
 14895                           
 14896                           ; BSR set to: 0
 14897  00120C  5183               	movf	___ftadd@exp1& (0+255),w,b
 14898  00120E  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 14899  001210  B0D8               	btfsc	status,0,c
 14900  001212  D00E               	goto	l1624
 14901                           
 14902                           ; BSR set to: 0
 14903  001214  5182               	movf	___ftadd@exp2& (0+255),w,b
 14904  001216  0800               	sublw	0
 14905  001218  2583               	addwf	___ftadd@exp1& (0+255),w,b
 14906  00121A  6F7E               	movwf	??___ftadd& (0+255),b
 14907  00121C  0E18               	movlw	24
 14908  00121E  657E               	cpfsgt	??___ftadd& (0+255),b
 14909  001220  D007               	goto	l1624
 14910  001222                     u6550:
 14911                           
 14912                           ; BSR set to: 0
 14913  001222  C078  F078         	movff	___ftadd@f1,?___ftadd
 14914  001226  C079  F079         	movff	___ftadd@f1+1,?___ftadd+1
 14915  00122A  C07A  F07A         	movff	___ftadd@f1+2,?___ftadd+2
 14916  00122E  0012               	return	
 14917  001230                     l1624:
 14918                           
 14919                           ; BSR set to: 0
 14920                           
 14921                           ; BSR set to: 0
 14922  001230  0E06               	movlw	6
 14923  001232  6F81               	movwf	___ftadd@sign& (0+255),b
 14924                           
 14925                           ; BSR set to: 0
 14926  001234  BF7A               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 14927                           
 14928                           ; BSR set to: 0
 14929  001236  8F81               	bsf	___ftadd@sign& (0+255),7,b
 14930                           
 14931                           ; BSR set to: 0
 14932                           
 14933                           ; BSR set to: 0
 14934  001238  BF7D               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 14935                           
 14936                           ; BSR set to: 0
 14937  00123A  8D81               	bsf	___ftadd@sign& (0+255),6,b
 14938                           
 14939                           ; BSR set to: 0
 14940  00123C  8F79               	bsf	(___ftadd@f1+1)& (0+255),7,b
 14941                           
 14942                           ; BSR set to: 0
 14943  00123E  0EFF               	movlw	255
 14944  001240  1778               	andwf	___ftadd@f1& (0+255),f,b
 14945  001242  0EFF               	movlw	255
 14946  001244  1779               	andwf	(___ftadd@f1+1)& (0+255),f,b
 14947  001246  0E00               	movlw	0
 14948  001248  177A               	andwf	(___ftadd@f1+2)& (0+255),f,b
 14949  00124A  8F7C               	bsf	(___ftadd@f2+1)& (0+255),7,b
 14950                           
 14951                           ; BSR set to: 0
 14952  00124C  0EFF               	movlw	255
 14953  00124E  177B               	andwf	___ftadd@f2& (0+255),f,b
 14954  001250  0EFF               	movlw	255
 14955  001252  177C               	andwf	(___ftadd@f2+1)& (0+255),f,b
 14956  001254  0E00               	movlw	0
 14957  001256  177D               	andwf	(___ftadd@f2+2)& (0+255),f,b
 14958                           
 14959                           ; BSR set to: 0
 14960  001258  5182               	movf	___ftadd@exp2& (0+255),w,b
 14961  00125A  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 14962  00125C  B0D8               	btfsc	status,0,c
 14963  00125E  D01B               	goto	l1629
 14964  001260                     u6580:
 14965                           
 14966                           ; BSR set to: 0
 14967                           
 14968                           ; BSR set to: 0
 14969  001260  90D8               	bcf	status,0,c
 14970  001262  377B               	rlcf	___ftadd@f2& (0+255),f,b
 14971  001264  377C               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 14972  001266  377D               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 14973  001268  0782               	decf	___ftadd@exp2& (0+255),f,b
 14974                           
 14975                           ; BSR set to: 0
 14976  00126A  5183               	movf	___ftadd@exp1& (0+255),w,b
 14977  00126C  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 14978  00126E  B4D8               	btfsc	status,2,c
 14979  001270  D00D               	goto	l1634
 14980                           
 14981                           ; BSR set to: 0
 14982  001272  0781               	decf	___ftadd@sign& (0+255),f,b
 14983  001274  C081  F07E         	movff	___ftadd@sign,??___ftadd
 14984  001278  0E07               	movlw	7
 14985  00127A  177E               	andwf	??___ftadd& (0+255),f,b
 14986  00127C  B4D8               	btfsc	status,2,c
 14987  00127E  D006               	goto	l1634
 14988  001280  D7EF               	goto	u6580
 14989  001282                     
 14990                           ; BSR set to: 0
 14991                           
 14992                           ; BSR set to: 0
 14993  001282  90D8               	bcf	status,0,c
 14994  001284  337A               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 14995  001286  3379               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 14996  001288  3378               	rrcf	___ftadd@f1& (0+255),f,b
 14997  00128A  2B83               	incf	___ftadd@exp1& (0+255),f,b
 14998  00128C                     l1634:
 14999                           
 15000                           ; BSR set to: 0
 15001                           
 15002                           ; BSR set to: 0
 15003  00128C  5182               	movf	___ftadd@exp2& (0+255),w,b
 15004  00128E  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 15005  001290  B4D8               	btfsc	status,2,c
 15006  001292  D01F               	goto	u6650
 15007  001294  D7F6               	goto	l1635
 15008  001296                     l1629:
 15009                           
 15010                           ; BSR set to: 0
 15011                           
 15012                           ; BSR set to: 0
 15013  001296  5183               	movf	___ftadd@exp1& (0+255),w,b
 15014  001298  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 15015  00129A  B0D8               	btfsc	status,0,c
 15016  00129C  D01A               	goto	u6650
 15017  00129E                     u6620:
 15018                           
 15019                           ; BSR set to: 0
 15020                           
 15021                           ; BSR set to: 0
 15022  00129E  90D8               	bcf	status,0,c
 15023  0012A0  3778               	rlcf	___ftadd@f1& (0+255),f,b
 15024  0012A2  3779               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 15025  0012A4  377A               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 15026  0012A6  0783               	decf	___ftadd@exp1& (0+255),f,b
 15027                           
 15028                           ; BSR set to: 0
 15029  0012A8  5183               	movf	___ftadd@exp1& (0+255),w,b
 15030  0012AA  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 15031  0012AC  B4D8               	btfsc	status,2,c
 15032  0012AE  D00D               	goto	l1643
 15033                           
 15034                           ; BSR set to: 0
 15035  0012B0  0781               	decf	___ftadd@sign& (0+255),f,b
 15036  0012B2  C081  F07E         	movff	___ftadd@sign,??___ftadd
 15037  0012B6  0E07               	movlw	7
 15038  0012B8  177E               	andwf	??___ftadd& (0+255),f,b
 15039  0012BA  B4D8               	btfsc	status,2,c
 15040  0012BC  D006               	goto	l1643
 15041  0012BE  D7EF               	goto	u6620
 15042  0012C0                     
 15043                           ; BSR set to: 0
 15044                           
 15045                           ; BSR set to: 0
 15046  0012C0  90D8               	bcf	status,0,c
 15047  0012C2  337D               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 15048  0012C4  337C               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 15049  0012C6  337B               	rrcf	___ftadd@f2& (0+255),f,b
 15050  0012C8  2B82               	incf	___ftadd@exp2& (0+255),f,b
 15051  0012CA                     l1643:
 15052                           
 15053                           ; BSR set to: 0
 15054                           
 15055                           ; BSR set to: 0
 15056  0012CA  5182               	movf	___ftadd@exp2& (0+255),w,b
 15057  0012CC  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 15058  0012CE  A4D8               	btfss	status,2,c
 15059  0012D0  D7F7               	goto	l1644
 15060  0012D2                     u6650:
 15061                           
 15062                           ; BSR set to: 0
 15063                           
 15064                           ; BSR set to: 0
 15065                           
 15066                           ; BSR set to: 0
 15067  0012D2  AF81               	btfss	___ftadd@sign& (0+255),7,b
 15068  0012D4  D00C               	goto	l1646
 15069                           
 15070                           ; BSR set to: 0
 15071  0012D6  0EFF               	movlw	255
 15072  0012D8  1B78               	xorwf	___ftadd@f1& (0+255),f,b
 15073  0012DA  0EFF               	movlw	255
 15074  0012DC  1B79               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 15075  0012DE  0EFF               	movlw	255
 15076  0012E0  1B7A               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 15077  0012E2  0E01               	movlw	1
 15078  0012E4  2778               	addwf	___ftadd@f1& (0+255),f,b
 15079  0012E6  0E00               	movlw	0
 15080  0012E8  2379               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 15081  0012EA  0E00               	movlw	0
 15082  0012EC  237A               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 15083  0012EE                     l1646:
 15084                           
 15085                           ; BSR set to: 0
 15086  0012EE  AD81               	btfss	___ftadd@sign& (0+255),6,b
 15087  0012F0  D00C               	goto	l1647
 15088                           
 15089                           ; BSR set to: 0
 15090  0012F2  0EFF               	movlw	255
 15091  0012F4  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 15092  0012F6  0EFF               	movlw	255
 15093  0012F8  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 15094  0012FA  0EFF               	movlw	255
 15095  0012FC  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 15096  0012FE  0E01               	movlw	1
 15097  001300  277B               	addwf	___ftadd@f2& (0+255),f,b
 15098  001302  0E00               	movlw	0
 15099  001304  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 15100  001306  0E00               	movlw	0
 15101  001308  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 15102  00130A                     l1647:
 15103                           
 15104                           ; BSR set to: 0
 15105                           
 15106                           ; BSR set to: 0
 15107  00130A  0E00               	movlw	0
 15108  00130C  6F81               	movwf	___ftadd@sign& (0+255),b
 15109                           
 15110                           ; BSR set to: 0
 15111  00130E  5178               	movf	___ftadd@f1& (0+255),w,b
 15112  001310  277B               	addwf	___ftadd@f2& (0+255),f,b
 15113  001312  5179               	movf	(___ftadd@f1+1)& (0+255),w,b
 15114  001314  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 15115  001316  517A               	movf	(___ftadd@f1+2)& (0+255),w,b
 15116  001318  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 15117                           
 15118                           ; BSR set to: 0
 15119  00131A  AF7D               	btfss	(___ftadd@f2+2)& (0+255),7,b
 15120  00131C  D00E               	goto	l1648
 15121                           
 15122                           ; BSR set to: 0
 15123  00131E  0EFF               	movlw	255
 15124  001320  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 15125  001322  0EFF               	movlw	255
 15126  001324  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 15127  001326  0EFF               	movlw	255
 15128  001328  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 15129  00132A  0E01               	movlw	1
 15130  00132C  277B               	addwf	___ftadd@f2& (0+255),f,b
 15131  00132E  0E00               	movlw	0
 15132  001330  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 15133  001332  0E00               	movlw	0
 15134  001334  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 15135                           
 15136                           ; BSR set to: 0
 15137  001336  0E01               	movlw	1
 15138  001338  6F81               	movwf	___ftadd@sign& (0+255),b
 15139  00133A                     l1648:
 15140                           
 15141                           ; BSR set to: 0
 15142                           
 15143                           ; BSR set to: 0
 15144  00133A  C07B  F018         	movff	___ftadd@f2,___ftpack@arg
 15145  00133E  C07C  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
 15146  001342  C07D  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
 15147  001346  C083  F01B         	movff	___ftadd@exp1,___ftpack@exp
 15148  00134A  C081  F01C         	movff	___ftadd@sign,___ftpack@sign
 15149  00134E  EC90  F010         	call	___ftpack	;wreg free
 15150  001352  C018  F078         	movff	?___ftpack,?___ftadd
 15151  001356  C019  F079         	movff	?___ftpack+1,?___ftadd+1
 15152  00135A  C01A  F07A         	movff	?___ftpack+2,?___ftadd+2
 15153  00135E  0012               	return	
 15154  001360                     __end_of___ftadd:
 15155                           	opt stack 0
 15156                           tosu	equ	0xFFF
 15157                           tosh	equ	0xFFE
 15158                           tosl	equ	0xFFD
 15159                           pclath	equ	0xFFA
 15160                           tblptru	equ	0xFF8
 15161                           tblptrh	equ	0xFF7
 15162                           tblptrl	equ	0xFF6
 15163                           tablat	equ	0xFF5
 15164                           prodh	equ	0xFF4
 15165                           prodl	equ	0xFF3
 15166                           intcon	equ	0xFF2
 15167                           intcon2	equ	0xFF1
 15168                           postinc0	equ	0xFEE
 15169                           wreg	equ	0xFE8
 15170                           indf1	equ	0xFE7
 15171                           postdec1	equ	0xFE5
 15172                           fsr1h	equ	0xFE2
 15173                           fsr1l	equ	0xFE1
 15174                           indf2	equ	0xFDF
 15175                           postinc2	equ	0xFDE
 15176                           postdec2	equ	0xFDD
 15177                           fsr2h	equ	0xFDA
 15178                           fsr2l	equ	0xFD9
 15179                           status	equ	0xFD8
 15180                           
 15181 ;; *************** function ___ftneg *****************
 15182 ;; Defined at:
 15183 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 15184 ;; Parameters:    Size  Location     Type
 15185 ;;  f1              3   23[COMRAM] float 
 15186 ;; Auto vars:     Size  Location     Type
 15187 ;;		None
 15188 ;; Return value:  Size  Location     Type
 15189 ;;                  3   23[COMRAM] float 
 15190 ;; Registers used:
 15191 ;;		wreg, status,2, status,0
 15192 ;; Tracked objects:
 15193 ;;		On entry : 0/0
 15194 ;;		On exit  : 0/0
 15195 ;;		Unchanged: 0/0
 15196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15197 ;;      Params:         3       0       0       0       0       0       0
 15198 ;;      Locals:         0       0       0       0       0       0       0
 15199 ;;      Temps:          0       0       0       0       0       0       0
 15200 ;;      Totals:         3       0       0       0       0       0       0
 15201 ;;Total ram usage:        3 bytes
 15202 ;; Hardware stack levels used:    1
 15203 ;; Hardware stack levels required when called:    3
 15204 ;; This function calls:
 15205 ;;		Nothing
 15206 ;; This function is called by:
 15207 ;;		_pow
 15208 ;;		_exp
 15209 ;; This function uses a non-reentrant model
 15210 ;;
 15211                           
 15212                           	psect	text100
 15213  003556                     __ptext100:
 15214                           	opt stack 0
 15215  003556                     ___ftneg:
 15216                           	opt stack 24
 15217                           
 15218                           ;incstack = 0
 15219  003556  5018               	movf	___ftneg@f1,w,c
 15220  003558  1019               	iorwf	___ftneg@f1+1,w,c
 15221  00355A  101A               	iorwf	___ftneg@f1+2,w,c
 15222  00355C  B4D8               	btfsc	status,2,c
 15223  00355E  D006               	goto	l1679
 15224  003560  0E00               	movlw	0
 15225  003562  1A18               	xorwf	___ftneg@f1,f,c
 15226  003564  0E00               	movlw	0
 15227  003566  1A19               	xorwf	___ftneg@f1+1,f,c
 15228  003568  0E80               	movlw	128
 15229  00356A  1A1A               	xorwf	___ftneg@f1+2,f,c
 15230  00356C                     l1679:
 15231  00356C  C018  F018         	movff	___ftneg@f1,?___ftneg
 15232  003570  C019  F019         	movff	___ftneg@f1+1,?___ftneg+1
 15233  003574  C01A  F01A         	movff	___ftneg@f1+2,?___ftneg+2
 15234  003578  0012               	return		;funcret
 15235  00357A                     __end_of___ftneg:
 15236                           	opt stack 0
 15237                           tosu	equ	0xFFF
 15238                           tosh	equ	0xFFE
 15239                           tosl	equ	0xFFD
 15240                           pclath	equ	0xFFA
 15241                           tblptru	equ	0xFF8
 15242                           tblptrh	equ	0xFF7
 15243                           tblptrl	equ	0xFF6
 15244                           tablat	equ	0xFF5
 15245                           prodh	equ	0xFF4
 15246                           prodl	equ	0xFF3
 15247                           intcon	equ	0xFF2
 15248                           intcon2	equ	0xFF1
 15249                           postinc0	equ	0xFEE
 15250                           wreg	equ	0xFE8
 15251                           indf1	equ	0xFE7
 15252                           postdec1	equ	0xFE5
 15253                           fsr1h	equ	0xFE2
 15254                           fsr1l	equ	0xFE1
 15255                           indf2	equ	0xFDF
 15256                           postinc2	equ	0xFDE
 15257                           postdec2	equ	0xFDD
 15258                           fsr2h	equ	0xFDA
 15259                           fsr2l	equ	0xFD9
 15260                           status	equ	0xFD8
 15261                           
 15262 ;; *************** function ___ftdiv *****************
 15263 ;; Defined at:
 15264 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 15265 ;; Parameters:    Size  Location     Type
 15266 ;;  f1              3   40[COMRAM] float 
 15267 ;;  f2              3   43[COMRAM] float 
 15268 ;; Auto vars:     Size  Location     Type
 15269 ;;  f3              3    4[BANK0 ] float 
 15270 ;;  sign            1    8[BANK0 ] unsigned char 
 15271 ;;  exp             1    7[BANK0 ] unsigned char 
 15272 ;;  cntr            1    3[BANK0 ] unsigned char 
 15273 ;; Return value:  Size  Location     Type
 15274 ;;                  3   40[COMRAM] float 
 15275 ;; Registers used:
 15276 ;;		wreg, status,2, status,0, cstack
 15277 ;; Tracked objects:
 15278 ;;		On entry : 0/0
 15279 ;;		On exit  : 0/0
 15280 ;;		Unchanged: 0/0
 15281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15282 ;;      Params:         6       0       0       0       0       0       0
 15283 ;;      Locals:         0       6       0       0       0       0       0
 15284 ;;      Temps:          0       3       0       0       0       0       0
 15285 ;;      Totals:         6       9       0       0       0       0       0
 15286 ;;Total ram usage:       15 bytes
 15287 ;; Hardware stack levels used:    1
 15288 ;; Hardware stack levels required when called:    4
 15289 ;; This function calls:
 15290 ;;		___ftpack
 15291 ;; This function is called by:
 15292 ;;		_AdcConvert
 15293 ;;		_CheckFlashPrecentage
 15294 ;;		_exp
 15295 ;; This function uses a non-reentrant model
 15296 ;;
 15297                           
 15298                           	psect	text101
 15299  0019F2                     __ptext101:
 15300                           	opt stack 0
 15301  0019F2                     ___ftdiv:
 15302                           	opt stack 25
 15303                           
 15304                           ;incstack = 0
 15305  0019F2  C02B  F060         	movff	___ftdiv@f1+2,??___ftdiv
 15306  0019F6  0100               	movlb	0	; () banked
 15307  0019F8  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 15308  0019FA  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 15309  0019FC  342A               	rlcf	___ftdiv@f1+1,w,c
 15310  0019FE  3760               	rlcf	??___ftdiv& (0+255),f,b
 15311  001A00  E301               	bnc	u6881
 15312  001A02  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 15313  001A04                     u6881:
 15314  001A04  5160               	movf	??___ftdiv& (0+255),w,b
 15315  001A06  6F67               	movwf	___ftdiv@exp& (0+255),b
 15316  001A08  5167               	movf	___ftdiv@exp& (0+255),w,b
 15317  001A0A  A4D8               	btfss	status,2,c
 15318  001A0C  D007               	goto	l1653
 15319                           
 15320                           ; BSR set to: 0
 15321  001A0E  0E00               	movlw	0
 15322  001A10  6E29               	movwf	?___ftdiv,c
 15323  001A12  0E00               	movlw	0
 15324  001A14  6E2A               	movwf	?___ftdiv+1,c
 15325  001A16  0E00               	movlw	0
 15326  001A18  6E2B               	movwf	?___ftdiv+2,c
 15327                           
 15328                           ; BSR set to: 0
 15329  001A1A  0012               	return	
 15330  001A1C                     l1653:
 15331                           
 15332                           ; BSR set to: 0
 15333                           
 15334                           ; BSR set to: 0
 15335  001A1C  C02E  F060         	movff	___ftdiv@f2+2,??___ftdiv
 15336  001A20  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 15337  001A22  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 15338  001A24  342D               	rlcf	___ftdiv@f2+1,w,c
 15339  001A26  3760               	rlcf	??___ftdiv& (0+255),f,b
 15340  001A28  E301               	bnc	u6901
 15341  001A2A  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 15342  001A2C                     u6901:
 15343  001A2C  5160               	movf	??___ftdiv& (0+255),w,b
 15344  001A2E  6F68               	movwf	___ftdiv@sign& (0+255),b
 15345  001A30  5168               	movf	___ftdiv@sign& (0+255),w,b
 15346  001A32  A4D8               	btfss	status,2,c
 15347  001A34  D007               	goto	l1655
 15348                           
 15349                           ; BSR set to: 0
 15350  001A36  0E00               	movlw	0
 15351  001A38  6E29               	movwf	?___ftdiv,c
 15352  001A3A  0E00               	movlw	0
 15353  001A3C  6E2A               	movwf	?___ftdiv+1,c
 15354  001A3E  0E00               	movlw	0
 15355  001A40  6E2B               	movwf	?___ftdiv+2,c
 15356                           
 15357                           ; BSR set to: 0
 15358  001A42  0012               	return	
 15359  001A44                     l1655:
 15360                           
 15361                           ; BSR set to: 0
 15362                           
 15363                           ; BSR set to: 0
 15364  001A44  0E00               	movlw	0
 15365  001A46  6F64               	movwf	___ftdiv@f3& (0+255),b
 15366  001A48  0E00               	movlw	0
 15367  001A4A  6F65               	movwf	(___ftdiv@f3+1)& (0+255),b
 15368  001A4C  0E00               	movlw	0
 15369  001A4E  6F66               	movwf	(___ftdiv@f3+2)& (0+255),b
 15370                           
 15371                           ; BSR set to: 0
 15372  001A50  5168               	movf	___ftdiv@sign& (0+255),w,b
 15373  001A52  0F89               	addlw	137
 15374  001A54  5F67               	subwf	___ftdiv@exp& (0+255),f,b
 15375                           
 15376                           ; BSR set to: 0
 15377  001A56  C02B  F068         	movff	___ftdiv@f1+2,___ftdiv@sign
 15378                           
 15379                           ; BSR set to: 0
 15380  001A5A  502E               	movf	___ftdiv@f2+2,w,c
 15381  001A5C  1B68               	xorwf	___ftdiv@sign& (0+255),f,b
 15382                           
 15383                           ; BSR set to: 0
 15384  001A5E  0E80               	movlw	128
 15385  001A60  1768               	andwf	___ftdiv@sign& (0+255),f,b
 15386                           
 15387                           ; BSR set to: 0
 15388  001A62  8E2A               	bsf	___ftdiv@f1+1,7,c
 15389                           
 15390                           ; BSR set to: 0
 15391  001A64  0EFF               	movlw	255
 15392  001A66  1629               	andwf	___ftdiv@f1,f,c
 15393  001A68  0EFF               	movlw	255
 15394  001A6A  162A               	andwf	___ftdiv@f1+1,f,c
 15395  001A6C  0E00               	movlw	0
 15396  001A6E  162B               	andwf	___ftdiv@f1+2,f,c
 15397                           
 15398                           ; BSR set to: 0
 15399  001A70  8E2D               	bsf	___ftdiv@f2+1,7,c
 15400                           
 15401                           ; BSR set to: 0
 15402  001A72  0EFF               	movlw	255
 15403  001A74  162C               	andwf	___ftdiv@f2,f,c
 15404  001A76  0EFF               	movlw	255
 15405  001A78  162D               	andwf	___ftdiv@f2+1,f,c
 15406  001A7A  0E00               	movlw	0
 15407  001A7C  162E               	andwf	___ftdiv@f2+2,f,c
 15408                           
 15409                           ; BSR set to: 0
 15410  001A7E  0E18               	movlw	24
 15411  001A80  6F63               	movwf	___ftdiv@cntr& (0+255),b
 15412  001A82                     
 15413                           ; BSR set to: 0
 15414                           
 15415                           ; BSR set to: 0
 15416  001A82  90D8               	bcf	status,0,c
 15417  001A84  3764               	rlcf	___ftdiv@f3& (0+255),f,b
 15418  001A86  3765               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 15419  001A88  3766               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 15420                           
 15421                           ; BSR set to: 0
 15422  001A8A  502C               	movf	___ftdiv@f2,w,c
 15423  001A8C  5C29               	subwf	___ftdiv@f1,w,c
 15424  001A8E  502D               	movf	___ftdiv@f2+1,w,c
 15425  001A90  582A               	subwfb	___ftdiv@f1+1,w,c
 15426  001A92  502E               	movf	___ftdiv@f2+2,w,c
 15427  001A94  582B               	subwfb	___ftdiv@f1+2,w,c
 15428  001A96  A0D8               	btfss	status,0,c
 15429  001A98  D007               	goto	l1657
 15430                           
 15431                           ; BSR set to: 0
 15432  001A9A  502C               	movf	___ftdiv@f2,w,c
 15433  001A9C  5E29               	subwf	___ftdiv@f1,f,c
 15434  001A9E  502D               	movf	___ftdiv@f2+1,w,c
 15435  001AA0  5A2A               	subwfb	___ftdiv@f1+1,f,c
 15436  001AA2  502E               	movf	___ftdiv@f2+2,w,c
 15437  001AA4  5A2B               	subwfb	___ftdiv@f1+2,f,c
 15438                           
 15439                           ; BSR set to: 0
 15440  001AA6  8164               	bsf	___ftdiv@f3& (0+255),0,b
 15441  001AA8                     l1657:
 15442                           
 15443                           ; BSR set to: 0
 15444  001AA8  90D8               	bcf	status,0,c
 15445  001AAA  3629               	rlcf	___ftdiv@f1,f,c
 15446  001AAC  362A               	rlcf	___ftdiv@f1+1,f,c
 15447  001AAE  362B               	rlcf	___ftdiv@f1+2,f,c
 15448                           
 15449                           ; BSR set to: 0
 15450  001AB0  2F63               	decfsz	___ftdiv@cntr& (0+255),f,b
 15451  001AB2  D7E7               	goto	l1656
 15452                           
 15453                           ; BSR set to: 0
 15454                           
 15455                           ; BSR set to: 0
 15456  001AB4  C064  F018         	movff	___ftdiv@f3,___ftpack@arg
 15457  001AB8  C065  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
 15458  001ABC  C066  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
 15459  001AC0  C067  F01B         	movff	___ftdiv@exp,___ftpack@exp
 15460  001AC4  C068  F01C         	movff	___ftdiv@sign,___ftpack@sign
 15461  001AC8  EC90  F010         	call	___ftpack	;wreg free
 15462  001ACC  C018  F029         	movff	?___ftpack,?___ftdiv
 15463  001AD0  C019  F02A         	movff	?___ftpack+1,?___ftdiv+1
 15464  001AD4  C01A  F02B         	movff	?___ftpack+2,?___ftdiv+2
 15465  001AD8  0012               	return	
 15466  001ADA                     __end_of___ftdiv:
 15467                           	opt stack 0
 15468                           tosu	equ	0xFFF
 15469                           tosh	equ	0xFFE
 15470                           tosl	equ	0xFFD
 15471                           pclath	equ	0xFFA
 15472                           tblptru	equ	0xFF8
 15473                           tblptrh	equ	0xFF7
 15474                           tblptrl	equ	0xFF6
 15475                           tablat	equ	0xFF5
 15476                           prodh	equ	0xFF4
 15477                           prodl	equ	0xFF3
 15478                           intcon	equ	0xFF2
 15479                           intcon2	equ	0xFF1
 15480                           postinc0	equ	0xFEE
 15481                           wreg	equ	0xFE8
 15482                           indf1	equ	0xFE7
 15483                           postdec1	equ	0xFE5
 15484                           fsr1h	equ	0xFE2
 15485                           fsr1l	equ	0xFE1
 15486                           indf2	equ	0xFDF
 15487                           postinc2	equ	0xFDE
 15488                           postdec2	equ	0xFDD
 15489                           fsr2h	equ	0xFDA
 15490                           fsr2l	equ	0xFD9
 15491                           status	equ	0xFD8
 15492                           
 15493 ;; *************** function ___awtoft *****************
 15494 ;; Defined at:
 15495 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 15496 ;; Parameters:    Size  Location     Type
 15497 ;;  c               2   31[COMRAM] int 
 15498 ;; Auto vars:     Size  Location     Type
 15499 ;;  sign            1   34[COMRAM] unsigned char 
 15500 ;; Return value:  Size  Location     Type
 15501 ;;                  3   31[COMRAM] float 
 15502 ;; Registers used:
 15503 ;;		wreg, status,2, status,0, cstack
 15504 ;; Tracked objects:
 15505 ;;		On entry : 0/0
 15506 ;;		On exit  : 0/0
 15507 ;;		Unchanged: 0/0
 15508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15509 ;;      Params:         3       0       0       0       0       0       0
 15510 ;;      Locals:         1       0       0       0       0       0       0
 15511 ;;      Temps:          0       0       0       0       0       0       0
 15512 ;;      Totals:         4       0       0       0       0       0       0
 15513 ;;Total ram usage:        4 bytes
 15514 ;; Hardware stack levels used:    1
 15515 ;; Hardware stack levels required when called:    4
 15516 ;; This function calls:
 15517 ;;		___ftpack
 15518 ;; This function is called by:
 15519 ;;		_exp
 15520 ;;		_log
 15521 ;; This function uses a non-reentrant model
 15522 ;;
 15523                           
 15524                           	psect	text102
 15525  003228                     __ptext102:
 15526                           	opt stack 0
 15527  003228                     ___awtoft:
 15528                           	opt stack 23
 15529                           
 15530                           ;incstack = 0
 15531  003228  0E00               	movlw	0
 15532  00322A  6E23               	movwf	___awtoft@sign,c
 15533  00322C  AE21               	btfss	___awtoft@c+1,7,c
 15534  00322E  D006               	goto	l1570
 15535  003230  6C20               	negf	___awtoft@c,c
 15536  003232  1E21               	comf	___awtoft@c+1,f,c
 15537  003234  B0D8               	btfsc	status,0,c
 15538  003236  2A21               	incf	___awtoft@c+1,f,c
 15539  003238  0E01               	movlw	1
 15540  00323A  6E23               	movwf	___awtoft@sign,c
 15541  00323C                     l1570:
 15542  00323C  C020  F018         	movff	___awtoft@c,___ftpack@arg
 15543  003240  C021  F019         	movff	___awtoft@c+1,___ftpack@arg+1
 15544  003244  6A1A               	clrf	___ftpack@arg+2,c
 15545  003246  0E8E               	movlw	142
 15546  003248  6E1B               	movwf	___ftpack@exp,c
 15547  00324A  C023  F01C         	movff	___awtoft@sign,___ftpack@sign
 15548  00324E  EC90  F010         	call	___ftpack	;wreg free
 15549  003252  C018  F020         	movff	?___ftpack,?___awtoft
 15550  003256  C019  F021         	movff	?___ftpack+1,?___awtoft+1
 15551  00325A  C01A  F022         	movff	?___ftpack+2,?___awtoft+2
 15552  00325E  0012               	return	
 15553  003260                     __end_of___awtoft:
 15554                           	opt stack 0
 15555                           tosu	equ	0xFFF
 15556                           tosh	equ	0xFFE
 15557                           tosl	equ	0xFFD
 15558                           pclath	equ	0xFFA
 15559                           tblptru	equ	0xFF8
 15560                           tblptrh	equ	0xFF7
 15561                           tblptrl	equ	0xFF6
 15562                           tablat	equ	0xFF5
 15563                           prodh	equ	0xFF4
 15564                           prodl	equ	0xFF3
 15565                           intcon	equ	0xFF2
 15566                           intcon2	equ	0xFF1
 15567                           postinc0	equ	0xFEE
 15568                           wreg	equ	0xFE8
 15569                           indf1	equ	0xFE7
 15570                           postdec1	equ	0xFE5
 15571                           fsr1h	equ	0xFE2
 15572                           fsr1l	equ	0xFE1
 15573                           indf2	equ	0xFDF
 15574                           postinc2	equ	0xFDE
 15575                           postdec2	equ	0xFDD
 15576                           fsr2h	equ	0xFDA
 15577                           fsr2l	equ	0xFD9
 15578                           status	equ	0xFD8
 15579                           
 15580 ;; *************** function ___lltoft *****************
 15581 ;; Defined at:
 15582 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
 15583 ;; Parameters:    Size  Location     Type
 15584 ;;  c               4   31[COMRAM] unsigned long 
 15585 ;; Auto vars:     Size  Location     Type
 15586 ;;  exp             1   39[COMRAM] unsigned char 
 15587 ;; Return value:  Size  Location     Type
 15588 ;;                  3   31[COMRAM] float 
 15589 ;; Registers used:
 15590 ;;		wreg, status,2, status,0, cstack
 15591 ;; Tracked objects:
 15592 ;;		On entry : 0/0
 15593 ;;		On exit  : 0/0
 15594 ;;		Unchanged: 0/0
 15595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15596 ;;      Params:         4       0       0       0       0       0       0
 15597 ;;      Locals:         1       0       0       0       0       0       0
 15598 ;;      Temps:          4       0       0       0       0       0       0
 15599 ;;      Totals:         9       0       0       0       0       0       0
 15600 ;;Total ram usage:        9 bytes
 15601 ;; Hardware stack levels used:    1
 15602 ;; Hardware stack levels required when called:    4
 15603 ;; This function calls:
 15604 ;;		___ftpack
 15605 ;; This function is called by:
 15606 ;;		_CheckFlashPrecentage
 15607 ;;		_pow
 15608 ;; This function uses a non-reentrant model
 15609 ;;
 15610                           
 15611                           	psect	text103
 15612  002A92                     __ptext103:
 15613                           	opt stack 0
 15614  002A92                     ___lltoft:
 15615                           	opt stack 25
 15616                           
 15617                           ;incstack = 0
 15618  002A92  0E8E               	movlw	142
 15619  002A94  6E28               	movwf	___lltoft@exp,c
 15620  002A96  D006               	goto	l1746
 15621  002A98  90D8               	bcf	status,0,c
 15622  002A9A  3223               	rrcf	___lltoft@c+3,f,c
 15623  002A9C  3222               	rrcf	___lltoft@c+2,f,c
 15624  002A9E  3221               	rrcf	___lltoft@c+1,f,c
 15625  002AA0  3220               	rrcf	___lltoft@c,f,c
 15626  002AA2  2A28               	incf	___lltoft@exp,f,c
 15627  002AA4                     l1746:
 15628  002AA4  0E00               	movlw	0
 15629  002AA6  1420               	andwf	___lltoft@c,w,c
 15630  002AA8  6E24               	movwf	??___lltoft& (0+255),c
 15631  002AAA  0E00               	movlw	0
 15632  002AAC  1421               	andwf	___lltoft@c+1,w,c
 15633  002AAE  6E25               	movwf	(??___lltoft+1)& (0+255),c
 15634  002AB0  0E00               	movlw	0
 15635  002AB2  1422               	andwf	___lltoft@c+2,w,c
 15636  002AB4  6E26               	movwf	(??___lltoft+2)& (0+255),c
 15637  002AB6  0EFF               	movlw	255
 15638  002AB8  1423               	andwf	___lltoft@c+3,w,c
 15639  002ABA  6E27               	movwf	(??___lltoft+3)& (0+255),c
 15640  002ABC  5024               	movf	??___lltoft,w,c
 15641  002ABE  1025               	iorwf	??___lltoft+1,w,c
 15642  002AC0  1026               	iorwf	??___lltoft+2,w,c
 15643  002AC2  1027               	iorwf	??___lltoft+3,w,c
 15644  002AC4  A4D8               	btfss	status,2,c
 15645  002AC6  D7E8               	goto	l1747
 15646  002AC8  C020  F018         	movff	___lltoft@c,___ftpack@arg
 15647  002ACC  C021  F019         	movff	___lltoft@c+1,___ftpack@arg+1
 15648  002AD0  C022  F01A         	movff	___lltoft@c+2,___ftpack@arg+2
 15649  002AD4  C028  F01B         	movff	___lltoft@exp,___ftpack@exp
 15650  002AD8  0E00               	movlw	0
 15651  002ADA  6E1C               	movwf	___ftpack@sign,c
 15652  002ADC  EC90  F010         	call	___ftpack	;wreg free
 15653  002AE0  C018  F020         	movff	?___ftpack,?___lltoft
 15654  002AE4  C019  F021         	movff	?___ftpack+1,?___lltoft+1
 15655  002AE8  C01A  F022         	movff	?___ftpack+2,?___lltoft+2
 15656  002AEC  0012               	return	
 15657  002AEE                     __end_of___lltoft:
 15658                           	opt stack 0
 15659                           tosu	equ	0xFFF
 15660                           tosh	equ	0xFFE
 15661                           tosl	equ	0xFFD
 15662                           pclath	equ	0xFFA
 15663                           tblptru	equ	0xFF8
 15664                           tblptrh	equ	0xFF7
 15665                           tblptrl	equ	0xFF6
 15666                           tablat	equ	0xFF5
 15667                           prodh	equ	0xFF4
 15668                           prodl	equ	0xFF3
 15669                           intcon	equ	0xFF2
 15670                           intcon2	equ	0xFF1
 15671                           postinc0	equ	0xFEE
 15672                           wreg	equ	0xFE8
 15673                           indf1	equ	0xFE7
 15674                           postdec1	equ	0xFE5
 15675                           fsr1h	equ	0xFE2
 15676                           fsr1l	equ	0xFE1
 15677                           indf2	equ	0xFDF
 15678                           postinc2	equ	0xFDE
 15679                           postdec2	equ	0xFDD
 15680                           fsr2h	equ	0xFDA
 15681                           fsr2l	equ	0xFD9
 15682                           status	equ	0xFD8
 15683                           
 15684 ;; *************** function ___lwtoft *****************
 15685 ;; Defined at:
 15686 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 15687 ;; Parameters:    Size  Location     Type
 15688 ;;  c               2   31[COMRAM] unsigned int 
 15689 ;; Auto vars:     Size  Location     Type
 15690 ;;		None
 15691 ;; Return value:  Size  Location     Type
 15692 ;;                  3   31[COMRAM] float 
 15693 ;; Registers used:
 15694 ;;		wreg, status,2, status,0, cstack
 15695 ;; Tracked objects:
 15696 ;;		On entry : 0/0
 15697 ;;		On exit  : 0/0
 15698 ;;		Unchanged: 0/0
 15699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15700 ;;      Params:         3       0       0       0       0       0       0
 15701 ;;      Locals:         0       0       0       0       0       0       0
 15702 ;;      Temps:          0       0       0       0       0       0       0
 15703 ;;      Totals:         3       0       0       0       0       0       0
 15704 ;;Total ram usage:        3 bytes
 15705 ;; Hardware stack levels used:    1
 15706 ;; Hardware stack levels required when called:    4
 15707 ;; This function calls:
 15708 ;;		___ftpack
 15709 ;; This function is called by:
 15710 ;;		_AdcConvert
 15711 ;; This function uses a non-reentrant model
 15712 ;;
 15713                           
 15714                           	psect	text104
 15715  00357A                     __ptext104:
 15716                           	opt stack 0
 15717  00357A                     ___lwtoft:
 15718                           	opt stack 25
 15719                           
 15720                           ;incstack = 0
 15721  00357A  C020  F018         	movff	___lwtoft@c,___ftpack@arg
 15722  00357E  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
 15723  003582  6A1A               	clrf	___ftpack@arg+2,c
 15724  003584  0E8E               	movlw	142
 15725  003586  6E1B               	movwf	___ftpack@exp,c
 15726  003588  0E00               	movlw	0
 15727  00358A  6E1C               	movwf	___ftpack@sign,c
 15728  00358C  EC90  F010         	call	___ftpack	;wreg free
 15729  003590  C018  F020         	movff	?___ftpack,?___lwtoft
 15730  003594  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
 15731  003598  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
 15732  00359C  0012               	return	
 15733  00359E                     __end_of___lwtoft:
 15734                           	opt stack 0
 15735                           tosu	equ	0xFFF
 15736                           tosh	equ	0xFFE
 15737                           tosl	equ	0xFFD
 15738                           pclath	equ	0xFFA
 15739                           tblptru	equ	0xFF8
 15740                           tblptrh	equ	0xFF7
 15741                           tblptrl	equ	0xFF6
 15742                           tablat	equ	0xFF5
 15743                           prodh	equ	0xFF4
 15744                           prodl	equ	0xFF3
 15745                           intcon	equ	0xFF2
 15746                           intcon2	equ	0xFF1
 15747                           postinc0	equ	0xFEE
 15748                           wreg	equ	0xFE8
 15749                           indf1	equ	0xFE7
 15750                           postdec1	equ	0xFE5
 15751                           fsr1h	equ	0xFE2
 15752                           fsr1l	equ	0xFE1
 15753                           indf2	equ	0xFDF
 15754                           postinc2	equ	0xFDE
 15755                           postdec2	equ	0xFDD
 15756                           fsr2h	equ	0xFDA
 15757                           fsr2l	equ	0xFD9
 15758                           status	equ	0xFD8
 15759                           
 15760 ;; *************** function ___ftpack *****************
 15761 ;; Defined at:
 15762 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 15763 ;; Parameters:    Size  Location     Type
 15764 ;;  arg             3   23[COMRAM] unsigned um
 15765 ;;  exp             1   26[COMRAM] unsigned char 
 15766 ;;  sign            1   27[COMRAM] unsigned char 
 15767 ;; Auto vars:     Size  Location     Type
 15768 ;;		None
 15769 ;; Return value:  Size  Location     Type
 15770 ;;                  3   23[COMRAM] float 
 15771 ;; Registers used:
 15772 ;;		wreg, status,2, status,0
 15773 ;; Tracked objects:
 15774 ;;		On entry : 0/0
 15775 ;;		On exit  : 0/0
 15776 ;;		Unchanged: 0/0
 15777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15778 ;;      Params:         5       0       0       0       0       0       0
 15779 ;;      Locals:         0       0       0       0       0       0       0
 15780 ;;      Temps:          3       0       0       0       0       0       0
 15781 ;;      Totals:         8       0       0       0       0       0       0
 15782 ;;Total ram usage:        8 bytes
 15783 ;; Hardware stack levels used:    1
 15784 ;; Hardware stack levels required when called:    3
 15785 ;; This function calls:
 15786 ;;		Nothing
 15787 ;; This function is called by:
 15788 ;;		___altoft
 15789 ;;		___awtoft
 15790 ;;		___ftadd
 15791 ;;		___ftdiv
 15792 ;;		___ftmul
 15793 ;;		___lltoft
 15794 ;;		___lwtoft
 15795 ;; This function uses a non-reentrant model
 15796 ;;
 15797                           
 15798                           	psect	text105
 15799  002120                     __ptext105:
 15800                           	opt stack 0
 15801  002120                     ___ftpack:
 15802                           	opt stack 25
 15803                           
 15804                           ;incstack = 0
 15805  002120  501B               	movf	___ftpack@exp,w,c
 15806  002122  B4D8               	btfsc	status,2,c
 15807  002124  D005               	goto	u6020
 15808  002126  5018               	movf	___ftpack@arg,w,c
 15809  002128  1019               	iorwf	___ftpack@arg+1,w,c
 15810  00212A  101A               	iorwf	___ftpack@arg+2,w,c
 15811  00212C  A4D8               	btfss	status,2,c
 15812  00212E  D00C               	goto	l1589
 15813  002130                     u6020:
 15814  002130  0E00               	movlw	0
 15815  002132  6E18               	movwf	?___ftpack,c
 15816  002134  0E00               	movlw	0
 15817  002136  6E19               	movwf	?___ftpack+1,c
 15818  002138  0E00               	movlw	0
 15819  00213A  6E1A               	movwf	?___ftpack+2,c
 15820  00213C  0012               	return	
 15821  00213E  2A1B               	incf	___ftpack@exp,f,c
 15822  002140  90D8               	bcf	status,0,c
 15823  002142  321A               	rrcf	___ftpack@arg+2,f,c
 15824  002144  3219               	rrcf	___ftpack@arg+1,f,c
 15825  002146  3218               	rrcf	___ftpack@arg,f,c
 15826  002148                     l1589:
 15827  002148  0E00               	movlw	0
 15828  00214A  1418               	andwf	___ftpack@arg,w,c
 15829  00214C  6E1D               	movwf	??___ftpack& (0+255),c
 15830  00214E  0E00               	movlw	0
 15831  002150  1419               	andwf	___ftpack@arg+1,w,c
 15832  002152  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 15833  002154  0EFE               	movlw	254
 15834  002156  141A               	andwf	___ftpack@arg+2,w,c
 15835  002158  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 15836  00215A  501D               	movf	??___ftpack,w,c
 15837  00215C  101E               	iorwf	??___ftpack+1,w,c
 15838  00215E  101F               	iorwf	??___ftpack+2,w,c
 15839  002160  B4D8               	btfsc	status,2,c
 15840  002162  D00C               	goto	l1592
 15841  002164  D7EC               	goto	l1590
 15842  002166  2A1B               	incf	___ftpack@exp,f,c
 15843  002168  0E01               	movlw	1
 15844  00216A  2618               	addwf	___ftpack@arg,f,c
 15845  00216C  0E00               	movlw	0
 15846  00216E  2219               	addwfc	___ftpack@arg+1,f,c
 15847  002170  0E00               	movlw	0
 15848  002172  221A               	addwfc	___ftpack@arg+2,f,c
 15849  002174  90D8               	bcf	status,0,c
 15850  002176  321A               	rrcf	___ftpack@arg+2,f,c
 15851  002178  3219               	rrcf	___ftpack@arg+1,f,c
 15852  00217A  3218               	rrcf	___ftpack@arg,f,c
 15853  00217C                     l1592:
 15854  00217C  0E00               	movlw	0
 15855  00217E  1418               	andwf	___ftpack@arg,w,c
 15856  002180  6E1D               	movwf	??___ftpack& (0+255),c
 15857  002182  0E00               	movlw	0
 15858  002184  1419               	andwf	___ftpack@arg+1,w,c
 15859  002186  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 15860  002188  0EFF               	movlw	255
 15861  00218A  141A               	andwf	___ftpack@arg+2,w,c
 15862  00218C  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 15863  00218E  501D               	movf	??___ftpack,w,c
 15864  002190  101E               	iorwf	??___ftpack+1,w,c
 15865  002192  101F               	iorwf	??___ftpack+2,w,c
 15866  002194  B4D8               	btfsc	status,2,c
 15867  002196  D006               	goto	l1595
 15868  002198  D7E6               	goto	l1593
 15869  00219A  061B               	decf	___ftpack@exp,f,c
 15870  00219C  90D8               	bcf	status,0,c
 15871  00219E  3618               	rlcf	___ftpack@arg,f,c
 15872  0021A0  3619               	rlcf	___ftpack@arg+1,f,c
 15873  0021A2  361A               	rlcf	___ftpack@arg+2,f,c
 15874  0021A4                     l1595:
 15875  0021A4  BE19               	btfsc	___ftpack@arg+1,7,c
 15876  0021A6  D003               	goto	u6060
 15877  0021A8  0E02               	movlw	2
 15878  0021AA  601B               	cpfslt	___ftpack@exp,c
 15879  0021AC  D7F6               	goto	l1596
 15880  0021AE                     u6060:
 15881  0021AE  A01B               	btfss	___ftpack@exp,0,c
 15882  0021B0  9E19               	bcf	___ftpack@arg+1,7,c
 15883  0021B2  90D8               	bcf	status,0,c
 15884  0021B4  321B               	rrcf	___ftpack@exp,f,c
 15885  0021B6  501B               	movf	___ftpack@exp,w,c
 15886  0021B8  121A               	iorwf	___ftpack@arg+2,f,c
 15887  0021BA  501C               	movf	___ftpack@sign,w,c
 15888  0021BC  A4D8               	btfss	status,2,c
 15889  0021BE  8E1A               	bsf	___ftpack@arg+2,7,c
 15890  0021C0  C018  F018         	movff	___ftpack@arg,?___ftpack
 15891  0021C4  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
 15892  0021C8  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
 15893  0021CC  0012               	return	
 15894  0021CE                     __end_of___ftpack:
 15895                           	opt stack 0
 15896                           tosu	equ	0xFFF
 15897                           tosh	equ	0xFFE
 15898                           tosl	equ	0xFFD
 15899                           pclath	equ	0xFFA
 15900                           tblptru	equ	0xFF8
 15901                           tblptrh	equ	0xFF7
 15902                           tblptrl	equ	0xFF6
 15903                           tablat	equ	0xFF5
 15904                           prodh	equ	0xFF4
 15905                           prodl	equ	0xFF3
 15906                           intcon	equ	0xFF2
 15907                           intcon2	equ	0xFF1
 15908                           postinc0	equ	0xFEE
 15909                           wreg	equ	0xFE8
 15910                           indf1	equ	0xFE7
 15911                           postdec1	equ	0xFE5
 15912                           fsr1h	equ	0xFE2
 15913                           fsr1l	equ	0xFE1
 15914                           indf2	equ	0xFDF
 15915                           postinc2	equ	0xFDE
 15916                           postdec2	equ	0xFDD
 15917                           fsr2h	equ	0xFDA
 15918                           fsr2l	equ	0xFD9
 15919                           status	equ	0xFD8
 15920                           
 15921 ;; *************** function _FlashSampleWrite *****************
 15922 ;; Defined at:
 15923 ;;		line 29 in file "FlashApp.c"
 15924 ;; Parameters:    Size  Location     Type
 15925 ;;  sampleData      2   44[COMRAM] unsigned int 
 15926 ;;  channelNum      1   46[COMRAM] unsigned char 
 15927 ;; Auto vars:     Size  Location     Type
 15928 ;;  rotateLeft      2    2[BANK0 ] unsigned int 
 15929 ;; Return value:  Size  Location     Type
 15930 ;;                  1    wreg      void 
 15931 ;; Registers used:
 15932 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15933 ;; Tracked objects:
 15934 ;;		On entry : 0/0
 15935 ;;		On exit  : 0/0
 15936 ;;		Unchanged: 0/0
 15937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15938 ;;      Params:         3       0       0       0       0       0       0
 15939 ;;      Locals:         0       2       0       0       0       0       0
 15940 ;;      Temps:          0       2       0       0       0       0       0
 15941 ;;      Totals:         3       4       0       0       0       0       0
 15942 ;;Total ram usage:        7 bytes
 15943 ;; Hardware stack levels used:    1
 15944 ;; Hardware stack levels required when called:    5
 15945 ;; This function calls:
 15946 ;;		_FLASH_IsWriteDone
 15947 ;;		_FLASH_WriteBlock
 15948 ;; This function is called by:
 15949 ;;		_AdcConvert
 15950 ;; This function uses a non-reentrant model
 15951 ;;
 15952                           
 15953                           	psect	text106
 15954  00170A                     __ptext106:
 15955                           	opt stack 0
 15956  00170A                     _FlashSampleWrite:
 15957                           	opt stack 24
 15958                           
 15959                           ;FlashApp.c: 32: uint16_t rotateLeft = (channelNum << 12);
 15960                           
 15961                           ;incstack = 0
 15962  00170A  502F               	movf	FlashSampleWrite@channelNum,w,c
 15963  00170C  0100               	movlb	0	; () banked
 15964  00170E  6F60               	movwf	??_FlashSampleWrite& (0+255),b
 15965  001710  6B61               	clrf	(??_FlashSampleWrite+1)& (0+255),b
 15966  001712  0E0C               	movlw	12
 15967  001714                     u7685:
 15968  001714  90D8               	bcf	status,0,c
 15969  001716  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 15970  001718  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 15971  00171A  2EE8               	decfsz	wreg,f,c
 15972  00171C  D7FB               	goto	u7685
 15973  00171E  C060  F062         	movff	??_FlashSampleWrite,FlashSampleWrite@rotateLeft
 15974  001722  C061  F063         	movff	??_FlashSampleWrite+1,FlashSampleWrite@rotateLeft+1
 15975                           
 15976                           ;FlashApp.c: 33: sampleData |= rotateLeft;
 15977  001726  5162               	movf	FlashSampleWrite@rotateLeft& (0+255),w,b
 15978  001728  122D               	iorwf	FlashSampleWrite@sampleData,f,c
 15979  00172A  5163               	movf	(FlashSampleWrite@rotateLeft+1)& (0+255),w,b
 15980  00172C  122E               	iorwf	FlashSampleWrite@sampleData+1,f,c
 15981                           
 15982                           ; BSR set to: 0
 15983                           ;FlashApp.c: 34: sampleArray[sampleCount] = sampleData;
 15984  00172E  90D8               	bcf	status,0,c
 15985  001730  35C7               	rlcf	_sampleCount& (0+255),w,b
 15986  001732  6ED9               	movwf	fsr2l,c
 15987  001734  35C8               	rlcf	(_sampleCount+1)& (0+255),w,b
 15988  001736  6EDA               	movwf	fsr2h,c
 15989  001738  0E6E               	movlw	low _sampleArray
 15990  00173A  26D9               	addwf	fsr2l,f,c
 15991  00173C  0E01               	movlw	high _sampleArray
 15992  00173E  22DA               	addwfc	fsr2h,f,c
 15993  001740  C02D  FFDE         	movff	FlashSampleWrite@sampleData,postinc2
 15994  001744  C02E  FFDD         	movff	FlashSampleWrite@sampleData+1,postdec2
 15995                           
 15996                           ; BSR set to: 0
 15997                           ;FlashApp.c: 35: sampleCount ++;
 15998  001748  4BC7               	infsnz	_sampleCount& (0+255),f,b
 15999  00174A  2BC8               	incf	(_sampleCount+1)& (0+255),f,b
 16000                           
 16001                           ; BSR set to: 0
 16002                           ;FlashApp.c: 37: if(((sampleCount*sizeof(adc_result_t)) >= (64)) && FLASH_IsWriteDone())
 16003  00174C  C0C7  F060         	movff	_sampleCount,??_FlashSampleWrite
 16004  001750  C0C8  F061         	movff	_sampleCount+1,??_FlashSampleWrite+1
 16005  001754  90D8               	bcf	status,0,c
 16006  001756  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 16007  001758  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 16008  00175A  5161               	movf	(??_FlashSampleWrite+1)& (0+255),w,b
 16009  00175C  E104               	bnz	u7690
 16010  00175E  0E40               	movlw	64
 16011  001760  5D60               	subwf	??_FlashSampleWrite& (0+255),w,b
 16012  001762  A0D8               	btfss	status,0,c
 16013  001764  0012               	return	
 16014  001766                     u7690:
 16015                           
 16016                           ; BSR set to: 0
 16017  001766  ECA4  F01B         	call	_FLASH_IsWriteDone	;wreg free
 16018  00176A  0900               	iorlw	0
 16019  00176C  B4D8               	btfsc	status,2,c
 16020  00176E  0012               	return	
 16021                           
 16022                           ;FlashApp.c: 38: {
 16023                           ;FlashApp.c: 39: FLASH_WriteBlock(writeAddress, (uint8_t *)sampleArray);
 16024  001770  C042  F01D         	movff	_writeAddress,FLASH_WriteBlock@writeAddr
 16025  001774  C043  F01E         	movff	_writeAddress+1,FLASH_WriteBlock@writeAddr+1
 16026  001778  C044  F01F         	movff	_writeAddress+2,FLASH_WriteBlock@writeAddr+2
 16027  00177C  C045  F020         	movff	_writeAddress+3,FLASH_WriteBlock@writeAddr+3
 16028  001780  0E6E               	movlw	low _sampleArray
 16029  001782  6E21               	movwf	FLASH_WriteBlock@flashWrBufPtr,c
 16030  001784  0E01               	movlw	high _sampleArray
 16031  001786  6E22               	movwf	FLASH_WriteBlock@flashWrBufPtr+1,c
 16032  001788  EC7E  F00F         	call	_FLASH_WriteBlock	;wreg free
 16033                           
 16034                           ;FlashApp.c: 40: writeAddress += (64);
 16035  00178C  0E40               	movlw	64
 16036  00178E  2642               	addwf	_writeAddress,f,c
 16037  001790  0E00               	movlw	0
 16038  001792  2243               	addwfc	_writeAddress+1,f,c
 16039  001794  2244               	addwfc	_writeAddress+2,f,c
 16040  001796  2245               	addwfc	_writeAddress+3,f,c
 16041                           
 16042                           ;FlashApp.c: 41: if (writeAddress >= 0x7FF0)
 16043  001798  5045               	movf	_writeAddress+3,w,c
 16044  00179A  1044               	iorwf	_writeAddress+2,w,c
 16045  00179C  E106               	bnz	u7710
 16046  00179E  0EF0               	movlw	240
 16047  0017A0  5C42               	subwf	_writeAddress,w,c
 16048  0017A2  0E7F               	movlw	127
 16049  0017A4  5843               	subwfb	_writeAddress+1,w,c
 16050  0017A6  A0D8               	btfss	status,0,c
 16051  0017A8  D018               	goto	l275
 16052  0017AA                     u7710:
 16053                           
 16054                           ;FlashApp.c: 42: {
 16055                           ;FlashApp.c: 43: writeAddress = 0x4000;
 16056  0017AA  0E00               	movlw	0
 16057  0017AC  6E42               	movwf	_writeAddress,c
 16058  0017AE  0E40               	movlw	64
 16059  0017B0  6E43               	movwf	_writeAddress+1,c
 16060  0017B2  0E00               	movlw	0
 16061  0017B4  6E44               	movwf	_writeAddress+2,c
 16062  0017B6  0E00               	movlw	0
 16063  0017B8  6E45               	movwf	_writeAddress+3,c
 16064                           
 16065                           ;FlashApp.c: 44: isReWriteDone = 1;
 16066  0017BA  0E01               	movlw	1
 16067  0017BC  6E3C               	movwf	_isReWriteDone,c
 16068                           
 16069                           ;FlashApp.c: 45: if (readAddress == 0x4000)
 16070  0017BE  0E40               	movlw	64
 16071  0017C0  0100               	movlb	0	; () banked
 16072  0017C2  19FA               	xorwf	(_readAddress+1)& (0+255),w,b
 16073  0017C4  11F9               	iorwf	_readAddress& (0+255),w,b
 16074  0017C6  11FB               	iorwf	(_readAddress+2)& (0+255),w,b
 16075  0017C8  11FC               	iorwf	(_readAddress+3)& (0+255),w,b
 16076  0017CA  A4D8               	btfss	status,2,c
 16077  0017CC  D006               	goto	l275
 16078                           
 16079                           ; BSR set to: 0
 16080                           ;FlashApp.c: 46: {
 16081                           ;FlashApp.c: 47: readAddress += (64);
 16082  0017CE  0E40               	movlw	64
 16083  0017D0  27F9               	addwf	_readAddress& (0+255),f,b
 16084  0017D2  0E00               	movlw	0
 16085  0017D4  23FA               	addwfc	(_readAddress+1)& (0+255),f,b
 16086  0017D6  23FB               	addwfc	(_readAddress+2)& (0+255),f,b
 16087  0017D8  23FC               	addwfc	(_readAddress+3)& (0+255),f,b
 16088  0017DA                     l275:
 16089                           
 16090                           ;FlashApp.c: 48: }
 16091                           ;FlashApp.c: 49: }
 16092                           ;FlashApp.c: 51: if (numOfValidateSamples < ((0x4000-0x7FF0)/(64)))
 16093                           
 16094                           ; BSR set to: 0
 16095  0017DA  0431               	decf	_numOfValidateSamples,w,c
 16096  0017DC  0EFF               	movlw	255
 16097  0017DE  5832               	subwfb	_numOfValidateSamples+1,w,c
 16098  0017E0  0EFF               	movlw	255
 16099  0017E2  5833               	subwfb	_numOfValidateSamples+2,w,c
 16100  0017E4  0EFF               	movlw	255
 16101  0017E6  5834               	subwfb	_numOfValidateSamples+3,w,c
 16102  0017E8  B0D8               	btfsc	status,0,c
 16103  0017EA  D006               	goto	l276
 16104                           
 16105                           ;FlashApp.c: 52: {
 16106                           ;FlashApp.c: 53: numOfValidateSamples++;
 16107  0017EC  0E01               	movlw	1
 16108  0017EE  2631               	addwf	_numOfValidateSamples,f,c
 16109  0017F0  0E00               	movlw	0
 16110  0017F2  2232               	addwfc	_numOfValidateSamples+1,f,c
 16111  0017F4  2233               	addwfc	_numOfValidateSamples+2,f,c
 16112  0017F6  2234               	addwfc	_numOfValidateSamples+3,f,c
 16113  0017F8                     l276:
 16114                           
 16115                           ;FlashApp.c: 54: }
 16116                           ;FlashApp.c: 55: sampleCount = 0;
 16117  0017F8  0E00               	movlw	0
 16118  0017FA  0100               	movlb	0	; () banked
 16119  0017FC  6FC8               	movwf	(_sampleCount+1)& (0+255),b
 16120  0017FE  0E00               	movlw	0
 16121  001800  6FC7               	movwf	_sampleCount& (0+255),b
 16122  001802  0012               	return	
 16123  001804                     __end_of_FlashSampleWrite:
 16124                           	opt stack 0
 16125                           tosu	equ	0xFFF
 16126                           tosh	equ	0xFFE
 16127                           tosl	equ	0xFFD
 16128                           pclath	equ	0xFFA
 16129                           tblptru	equ	0xFF8
 16130                           tblptrh	equ	0xFF7
 16131                           tblptrl	equ	0xFF6
 16132                           tablat	equ	0xFF5
 16133                           prodh	equ	0xFF4
 16134                           prodl	equ	0xFF3
 16135                           intcon	equ	0xFF2
 16136                           intcon2	equ	0xFF1
 16137                           postinc0	equ	0xFEE
 16138                           wreg	equ	0xFE8
 16139                           indf1	equ	0xFE7
 16140                           postdec1	equ	0xFE5
 16141                           fsr1h	equ	0xFE2
 16142                           fsr1l	equ	0xFE1
 16143                           indf2	equ	0xFDF
 16144                           postinc2	equ	0xFDE
 16145                           postdec2	equ	0xFDD
 16146                           fsr2h	equ	0xFDA
 16147                           fsr2l	equ	0xFD9
 16148                           status	equ	0xFD8
 16149                           
 16150 ;; *************** function _FLASH_WriteBlock *****************
 16151 ;; Defined at:
 16152 ;;		line 93 in file "mcc_generated_files/memory.c"
 16153 ;; Parameters:    Size  Location     Type
 16154 ;;  writeAddr       4   28[COMRAM] unsigned long 
 16155 ;;  flashWrBufPt    2   32[COMRAM] PTR unsigned char 
 16156 ;;		 -> FlashTest@buff(128), sampleArray(64), 
 16157 ;; Auto vars:     Size  Location     Type
 16158 ;;  blockStartAd    4   38[COMRAM] unsigned long 
 16159 ;;  i               1   43[COMRAM] unsigned char 
 16160 ;;  GIEBitValue     1   42[COMRAM] unsigned char 
 16161 ;; Return value:  Size  Location     Type
 16162 ;;                  1    wreg      char 
 16163 ;; Registers used:
 16164 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16165 ;; Tracked objects:
 16166 ;;		On entry : 0/0
 16167 ;;		On exit  : 0/0
 16168 ;;		Unchanged: 0/0
 16169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16170 ;;      Params:         6       0       0       0       0       0       0
 16171 ;;      Locals:         6       0       0       0       0       0       0
 16172 ;;      Temps:          4       0       0       0       0       0       0
 16173 ;;      Totals:        16       0       0       0       0       0       0
 16174 ;;Total ram usage:       16 bytes
 16175 ;; Hardware stack levels used:    1
 16176 ;; Hardware stack levels required when called:    4
 16177 ;; This function calls:
 16178 ;;		_FLASH_EraseBlock
 16179 ;; This function is called by:
 16180 ;;		_FlashSampleWrite
 16181 ;;		_FlashTest
 16182 ;;		_FLASH_WriteByte
 16183 ;; This function uses a non-reentrant model
 16184 ;;
 16185                           
 16186                           	psect	text107
 16187  001EFC                     __ptext107:
 16188                           	opt stack 0
 16189  001EFC                     _FLASH_WriteBlock:
 16190                           	opt stack 24
 16191                           
 16192                           ;memory.c: 95: uint32_t blockStartAddr = (uint32_t )(writeAddr & ((0x8000-1) ^ ((64)-1))
      +                          );
 16193                           
 16194                           ;incstack = 0
 16195  001EFC  0EC0               	movlw	192
 16196  001EFE  6E23               	movwf	??_FLASH_WriteBlock& (0+255),c
 16197  001F00  0E7F               	movlw	127
 16198  001F02  6E24               	movwf	(??_FLASH_WriteBlock+1)& (0+255),c
 16199  001F04  C01D  F025         	movff	FLASH_WriteBlock@writeAddr,??_FLASH_WriteBlock+2
 16200  001F08  C01E  F026         	movff	FLASH_WriteBlock@writeAddr+1,??_FLASH_WriteBlock+3
 16201  001F0C  5023               	movf	??_FLASH_WriteBlock,w,c
 16202  001F0E  1625               	andwf	??_FLASH_WriteBlock+2,f,c
 16203  001F10  5024               	movf	??_FLASH_WriteBlock+1,w,c
 16204  001F12  1626               	andwf	??_FLASH_WriteBlock+3,f,c
 16205  001F14  C025  F027         	movff	??_FLASH_WriteBlock+2,FLASH_WriteBlock@blockStartAddr
 16206  001F18  C026  F028         	movff	??_FLASH_WriteBlock+3,FLASH_WriteBlock@blockStartAddr+1
 16207  001F1C  6A29               	clrf	FLASH_WriteBlock@blockStartAddr+2,c
 16208  001F1E  6A2A               	clrf	FLASH_WriteBlock@blockStartAddr+3,c
 16209                           
 16210                           ;memory.c: 96: uint8_t GIEBitValue = INTCONbits.GIE;
 16211  001F20  0E00               	movlw	0
 16212  001F22  BEF2               	btfsc	intcon,7,c	;volatile
 16213  001F24  0E01               	movlw	1
 16214  001F26  6E2B               	movwf	FLASH_WriteBlock@GIEBitValue,c
 16215                           
 16216                           ;memory.c: 97: uint8_t i;
 16217                           ;memory.c: 100: if( writeAddr != blockStartAddr )
 16218  001F28  5027               	movf	FLASH_WriteBlock@blockStartAddr,w,c
 16219  001F2A  181D               	xorwf	FLASH_WriteBlock@writeAddr,w,c
 16220  001F2C  E144               	bnz	l873
 16221  001F2E  5028               	movf	FLASH_WriteBlock@blockStartAddr+1,w,c
 16222  001F30  181E               	xorwf	FLASH_WriteBlock@writeAddr+1,w,c
 16223  001F32  E141               	bnz	l873
 16224  001F34  5029               	movf	FLASH_WriteBlock@blockStartAddr+2,w,c
 16225  001F36  181F               	xorwf	FLASH_WriteBlock@writeAddr+2,w,c
 16226  001F38  E13E               	bnz	l873
 16227  001F3A  502A               	movf	FLASH_WriteBlock@blockStartAddr+3,w,c
 16228  001F3C  1820               	xorwf	FLASH_WriteBlock@writeAddr+3,w,c
 16229  001F3E  A4D8               	btfss	status,2,c
 16230  001F40  0012               	return	
 16231                           
 16232                           ;memory.c: 103: }
 16233                           ;memory.c: 106: FLASH_EraseBlock(writeAddr);
 16234                           
 16235                           ;memory.c: 101: {
 16236                           ;memory.c: 102: return -1;
 16237                           ;	Return value of _FLASH_WriteBlock is never used
 16238  001F42  C01D  F018         	movff	FLASH_WriteBlock@writeAddr,FLASH_EraseBlock@baseAddr
 16239  001F46  C01E  F019         	movff	FLASH_WriteBlock@writeAddr+1,FLASH_EraseBlock@baseAddr+1
 16240  001F4A  C01F  F01A         	movff	FLASH_WriteBlock@writeAddr+2,FLASH_EraseBlock@baseAddr+2
 16241  001F4E  C020  F01B         	movff	FLASH_WriteBlock@writeAddr+3,FLASH_EraseBlock@baseAddr+3
 16242  001F52  ECD2  F019         	call	_FLASH_EraseBlock	;wreg free
 16243                           
 16244                           ;memory.c: 109: TBLPTRU = (uint8_t)((writeAddr & 0x00FF0000) >> 16);
 16245  001F56  C01F  FFF8         	movff	FLASH_WriteBlock@writeAddr+2,tblptru	;volatile
 16246                           
 16247                           ;memory.c: 110: TBLPTRH = (uint8_t)((writeAddr & 0x0000FF00)>> 8);
 16248  001F5A  C01E  FFF7         	movff	FLASH_WriteBlock@writeAddr+1,tblptrh	;volatile
 16249                           
 16250                           ;memory.c: 111: TBLPTRL = (uint8_t)(writeAddr & 0x000000FF);
 16251  001F5E  C01D  FFF6         	movff	FLASH_WriteBlock@writeAddr,tblptrl	;volatile
 16252                           
 16253                           ;memory.c: 114: for (i=0; i<(64); i++)
 16254  001F62  0E00               	movlw	0
 16255  001F64  6E2C               	movwf	FLASH_WriteBlock@i,c
 16256  001F66                     l7201:
 16257  001F66  0E3F               	movlw	63
 16258  001F68  642C               	cpfsgt	FLASH_WriteBlock@i,c
 16259  001F6A  D001               	goto	l874
 16260  001F6C  D013               	goto	u7120
 16261  001F6E                     l874:
 16262                           
 16263                           ;memory.c: 115: {
 16264                           ;memory.c: 116: TABLAT = flashWrBufPtr[i];
 16265  001F6E  502C               	movf	FLASH_WriteBlock@i,w,c
 16266  001F70  0D01               	mullw	1
 16267  001F72  50F3               	movf	prodl,w,c
 16268  001F74  2421               	addwf	FLASH_WriteBlock@flashWrBufPtr,w,c
 16269  001F76  6ED9               	movwf	fsr2l,c
 16270  001F78  50F4               	movf	prodh,w,c
 16271  001F7A  2022               	addwfc	FLASH_WriteBlock@flashWrBufPtr+1,w,c
 16272  001F7C  6EDA               	movwf	fsr2h,c
 16273  001F7E  50DF               	movf	indf2,w,c
 16274  001F80  6EF5               	movwf	tablat,c	;volatile
 16275                           
 16276                           ;memory.c: 118: if (i == ((64)-1))
 16277  001F82  0E3F               	movlw	63
 16278  001F84  182C               	xorwf	FLASH_WriteBlock@i,w,c
 16279  001F86  A4D8               	btfss	status,2,c
 16280  001F88  D002               	goto	l876
 16281  001F8A  000C               	tblwt		*	;# 
 16282                           
 16283                           ;memory.c: 121: }
 16284  001F8C  D001               	goto	l877
 16285  001F8E                     l876:
 16286  001F8E  000D               	tblwt		*+	;# 
 16287  001F90                     l877:
 16288  001F90  2A2C               	incf	FLASH_WriteBlock@i,f,c
 16289  001F92  D7E9               	goto	l7201
 16290  001F94                     u7120:
 16291                           
 16292                           ;memory.c: 125: }
 16293                           ;memory.c: 126: }
 16294                           ;memory.c: 128: PIR2bits.EEIF = 1;
 16295  001F94  88A1               	bsf	4001,4,c	;volatile
 16296                           
 16297                           ;memory.c: 129: EECON1bits.EEPGD = 1;
 16298  001F96  8EA6               	bsf	4006,7,c	;volsfr
 16299                           
 16300                           ;memory.c: 130: EECON1bits.CFGS = 0;
 16301  001F98  9CA6               	bcf	4006,6,c	;volsfr
 16302                           
 16303                           ;memory.c: 131: EECON1bits.WREN = 1;
 16304  001F9A  84A6               	bsf	4006,2,c	;volsfr
 16305                           
 16306                           ;memory.c: 132: INTCONbits.GIE = 0;
 16307  001F9C  9EF2               	bcf	intcon,7,c	;volatile
 16308                           
 16309                           ;memory.c: 133: EECON2 = 0x55;
 16310  001F9E  0E55               	movlw	85
 16311  001FA0  6EA7               	movwf	4007,c	;volsfr
 16312                           
 16313                           ;memory.c: 134: EECON2 = 0xAA;
 16314  001FA2  0EAA               	movlw	170
 16315  001FA4  6EA7               	movwf	4007,c	;volsfr
 16316                           
 16317                           ;memory.c: 135: EECON1bits.WR = 1;
 16318  001FA6  82A6               	bsf	4006,1,c	;volsfr
 16319                           
 16320                           ;memory.c: 137: EECON1bits.WREN = 0;
 16321  001FA8  94A6               	bcf	4006,2,c	;volsfr
 16322                           
 16323                           ;memory.c: 138: INTCONbits.GIE = GIEBitValue;
 16324  001FAA  B02B               	btfsc	FLASH_WriteBlock@GIEBitValue,0,c
 16325  001FAC  D002               	bra	u7135
 16326  001FAE  9EF2               	bcf	intcon,7,c	;volatile
 16327  001FB0  D001               	bra	u7136
 16328  001FB2                     u7135:
 16329  001FB2  8EF2               	bsf	intcon,7,c	;volatile
 16330  001FB4                     u7136:
 16331  001FB4  0012               	return	
 16332  001FB6                     l873:
 16333  001FB6  0012               	return		;funcret
 16334  001FB8                     __end_of_FLASH_WriteBlock:
 16335                           	opt stack 0
 16336                           tosu	equ	0xFFF
 16337                           tosh	equ	0xFFE
 16338                           tosl	equ	0xFFD
 16339                           pclath	equ	0xFFA
 16340                           tblptru	equ	0xFF8
 16341                           tblptrh	equ	0xFF7
 16342                           tblptrl	equ	0xFF6
 16343                           tablat	equ	0xFF5
 16344                           prodh	equ	0xFF4
 16345                           prodl	equ	0xFF3
 16346                           intcon	equ	0xFF2
 16347                           intcon2	equ	0xFF1
 16348                           postinc0	equ	0xFEE
 16349                           wreg	equ	0xFE8
 16350                           indf1	equ	0xFE7
 16351                           postdec1	equ	0xFE5
 16352                           fsr1h	equ	0xFE2
 16353                           fsr1l	equ	0xFE1
 16354                           indf2	equ	0xFDF
 16355                           postinc2	equ	0xFDE
 16356                           postdec2	equ	0xFDD
 16357                           fsr2h	equ	0xFDA
 16358                           fsr2l	equ	0xFD9
 16359                           status	equ	0xFD8
 16360                           
 16361 ;; *************** function _FLASH_EraseBlock *****************
 16362 ;; Defined at:
 16363 ;;		line 144 in file "mcc_generated_files/memory.c"
 16364 ;; Parameters:    Size  Location     Type
 16365 ;;  baseAddr        4   23[COMRAM] unsigned long 
 16366 ;; Auto vars:     Size  Location     Type
 16367 ;;  GIEBitValue     1   27[COMRAM] unsigned char 
 16368 ;; Return value:  Size  Location     Type
 16369 ;;                  1    wreg      void 
 16370 ;; Registers used:
 16371 ;;		wreg, status,2
 16372 ;; Tracked objects:
 16373 ;;		On entry : 0/0
 16374 ;;		On exit  : 0/0
 16375 ;;		Unchanged: 0/0
 16376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16377 ;;      Params:         4       0       0       0       0       0       0
 16378 ;;      Locals:         1       0       0       0       0       0       0
 16379 ;;      Temps:          0       0       0       0       0       0       0
 16380 ;;      Totals:         5       0       0       0       0       0       0
 16381 ;;Total ram usage:        5 bytes
 16382 ;; Hardware stack levels used:    1
 16383 ;; Hardware stack levels required when called:    3
 16384 ;; This function calls:
 16385 ;;		Nothing
 16386 ;; This function is called by:
 16387 ;;		_FLASH_WriteBlock
 16388 ;; This function uses a non-reentrant model
 16389 ;;
 16390                           
 16391                           	psect	text108
 16392  0033A4                     __ptext108:
 16393                           	opt stack 0
 16394  0033A4                     _FLASH_EraseBlock:
 16395                           	opt stack 24
 16396                           
 16397                           ;memory.c: 146: uint8_t GIEBitValue = INTCONbits.GIE;
 16398                           
 16399                           ;incstack = 0
 16400  0033A4  0E00               	movlw	0
 16401  0033A6  BEF2               	btfsc	intcon,7,c	;volatile
 16402  0033A8  0E01               	movlw	1
 16403  0033AA  6E1C               	movwf	FLASH_EraseBlock@GIEBitValue,c
 16404                           
 16405                           ;memory.c: 148: TBLPTRU = (uint8_t)((baseAddr & 0x00FF0000) >> 16);
 16406  0033AC  C01A  FFF8         	movff	FLASH_EraseBlock@baseAddr+2,tblptru	;volatile
 16407                           
 16408                           ;memory.c: 149: TBLPTRH = (uint8_t)((baseAddr & 0x0000FF00)>> 8);
 16409  0033B0  C019  FFF7         	movff	FLASH_EraseBlock@baseAddr+1,tblptrh	;volatile
 16410                           
 16411                           ;memory.c: 150: TBLPTRL = (uint8_t)(baseAddr & 0x000000FF);
 16412  0033B4  C018  FFF6         	movff	FLASH_EraseBlock@baseAddr,tblptrl	;volatile
 16413                           
 16414                           ;memory.c: 152: EECON1bits.EEPGD = 1;
 16415  0033B8  8EA6               	bsf	4006,7,c	;volsfr
 16416                           
 16417                           ;memory.c: 153: EECON1bits.CFGS = 0;
 16418  0033BA  9CA6               	bcf	4006,6,c	;volsfr
 16419                           
 16420                           ;memory.c: 154: EECON1bits.WREN = 1;
 16421  0033BC  84A6               	bsf	4006,2,c	;volsfr
 16422                           
 16423                           ;memory.c: 155: EECON1bits.FREE = 1;
 16424  0033BE  88A6               	bsf	4006,4,c	;volsfr
 16425                           
 16426                           ;memory.c: 156: INTCONbits.GIE = 0;
 16427  0033C0  9EF2               	bcf	intcon,7,c	;volatile
 16428                           
 16429                           ;memory.c: 157: EECON2 = 0x55;
 16430  0033C2  0E55               	movlw	85
 16431  0033C4  6EA7               	movwf	4007,c	;volsfr
 16432                           
 16433                           ;memory.c: 158: EECON2 = 0xAA;
 16434  0033C6  0EAA               	movlw	170
 16435  0033C8  6EA7               	movwf	4007,c	;volsfr
 16436                           
 16437                           ;memory.c: 159: EECON1bits.WR = 1;
 16438  0033CA  82A6               	bsf	4006,1,c	;volsfr
 16439                           
 16440                           ;memory.c: 160: INTCONbits.GIE = GIEBitValue;
 16441  0033CC  B01C               	btfsc	FLASH_EraseBlock@GIEBitValue,0,c
 16442  0033CE  D002               	bra	u6875
 16443  0033D0  9EF2               	bcf	intcon,7,c	;volatile
 16444  0033D2  D001               	bra	u6876
 16445  0033D4                     u6875:
 16446  0033D4  8EF2               	bsf	intcon,7,c	;volatile
 16447  0033D6                     u6876:
 16448  0033D6  0012               	return		;funcret
 16449  0033D8                     __end_of_FLASH_EraseBlock:
 16450                           	opt stack 0
 16451                           tosu	equ	0xFFF
 16452                           tosh	equ	0xFFE
 16453                           tosl	equ	0xFFD
 16454                           pclath	equ	0xFFA
 16455                           tblptru	equ	0xFF8
 16456                           tblptrh	equ	0xFF7
 16457                           tblptrl	equ	0xFF6
 16458                           tablat	equ	0xFF5
 16459                           prodh	equ	0xFF4
 16460                           prodl	equ	0xFF3
 16461                           intcon	equ	0xFF2
 16462                           intcon2	equ	0xFF1
 16463                           postinc0	equ	0xFEE
 16464                           wreg	equ	0xFE8
 16465                           indf1	equ	0xFE7
 16466                           postdec1	equ	0xFE5
 16467                           fsr1h	equ	0xFE2
 16468                           fsr1l	equ	0xFE1
 16469                           indf2	equ	0xFDF
 16470                           postinc2	equ	0xFDE
 16471                           postdec2	equ	0xFDD
 16472                           fsr2h	equ	0xFDA
 16473                           fsr2l	equ	0xFD9
 16474                           status	equ	0xFD8
 16475                           
 16476 ;; *************** function _FLASH_IsWriteDone *****************
 16477 ;; Defined at:
 16478 ;;		line 189 in file "mcc_generated_files/memory.c"
 16479 ;; Parameters:    Size  Location     Type
 16480 ;;		None
 16481 ;; Auto vars:     Size  Location     Type
 16482 ;;		None
 16483 ;; Return value:  Size  Location     Type
 16484 ;;                  1    wreg      unsigned char 
 16485 ;; Registers used:
 16486 ;;		wreg
 16487 ;; Tracked objects:
 16488 ;;		On entry : 0/0
 16489 ;;		On exit  : 0/0
 16490 ;;		Unchanged: 0/0
 16491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16492 ;;      Params:         0       0       0       0       0       0       0
 16493 ;;      Locals:         0       0       0       0       0       0       0
 16494 ;;      Temps:          0       0       0       0       0       0       0
 16495 ;;      Totals:         0       0       0       0       0       0       0
 16496 ;;Total ram usage:        0 bytes
 16497 ;; Hardware stack levels used:    1
 16498 ;; Hardware stack levels required when called:    3
 16499 ;; This function calls:
 16500 ;;		Nothing
 16501 ;; This function is called by:
 16502 ;;		_FlashSampleWrite
 16503 ;;		_FlashReadUart
 16504 ;; This function uses a non-reentrant model
 16505 ;;
 16506                           
 16507                           	psect	text109
 16508  003748                     __ptext109:
 16509                           	opt stack 0
 16510  003748                     _FLASH_IsWriteDone:
 16511                           	opt stack 24
 16512                           
 16513                           ;memory.c: 191: return (EECON1bits.WR == 0);
 16514                           
 16515                           ;incstack = 0
 16516  003748  A2A6               	btfss	4006,1,c	;volsfr
 16517  00374A  D001               	goto	u6751
 16518  00374C  D002               	goto	u6750
 16519  00374E                     u6751:
 16520  00374E  0E01               	movlw	1
 16521  003750  0012               	return	
 16522  003752                     u6750:
 16523  003752  0E00               	movlw	0
 16524  003754  0012               	return	
 16525  003756                     __end_of_FLASH_IsWriteDone:
 16526                           	opt stack 0
 16527                           tosu	equ	0xFFF
 16528                           tosh	equ	0xFFE
 16529                           tosl	equ	0xFFD
 16530                           pclath	equ	0xFFA
 16531                           tblptru	equ	0xFF8
 16532                           tblptrh	equ	0xFF7
 16533                           tblptrl	equ	0xFF6
 16534                           tablat	equ	0xFF5
 16535                           prodh	equ	0xFF4
 16536                           prodl	equ	0xFF3
 16537                           intcon	equ	0xFF2
 16538                           intcon2	equ	0xFF1
 16539                           postinc0	equ	0xFEE
 16540                           wreg	equ	0xFE8
 16541                           indf1	equ	0xFE7
 16542                           postdec1	equ	0xFE5
 16543                           fsr1h	equ	0xFE2
 16544                           fsr1l	equ	0xFE1
 16545                           indf2	equ	0xFDF
 16546                           postinc2	equ	0xFDE
 16547                           postdec2	equ	0xFDD
 16548                           fsr2h	equ	0xFDA
 16549                           fsr2l	equ	0xFD9
 16550                           status	equ	0xFD8
 16551                           
 16552 ;; *************** function _ADC_GetConversion *****************
 16553 ;; Defined at:
 16554 ;;		line 106 in file "mcc_generated_files/adc.c"
 16555 ;; Parameters:    Size  Location     Type
 16556 ;;  channel         1    wreg     enum E6975
 16557 ;; Auto vars:     Size  Location     Type
 16558 ;;  channel         1   27[COMRAM] enum E6975
 16559 ;; Return value:  Size  Location     Type
 16560 ;;                  2   23[COMRAM] unsigned int 
 16561 ;; Registers used:
 16562 ;;		wreg, status,2, status,0
 16563 ;; Tracked objects:
 16564 ;;		On entry : 0/0
 16565 ;;		On exit  : 0/0
 16566 ;;		Unchanged: 0/0
 16567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16568 ;;      Params:         2       0       0       0       0       0       0
 16569 ;;      Locals:         1       0       0       0       0       0       0
 16570 ;;      Temps:          2       0       0       0       0       0       0
 16571 ;;      Totals:         5       0       0       0       0       0       0
 16572 ;;Total ram usage:        5 bytes
 16573 ;; Hardware stack levels used:    1
 16574 ;; Hardware stack levels required when called:    3
 16575 ;; This function calls:
 16576 ;;		Nothing
 16577 ;; This function is called by:
 16578 ;;		_AdcConvert
 16579 ;; This function uses a non-reentrant model
 16580 ;;
 16581                           
 16582                           	psect	text110
 16583  003408                     __ptext110:
 16584                           	opt stack 0
 16585  003408                     _ADC_GetConversion:
 16586                           	opt stack 26
 16587                           
 16588                           ;incstack = 0
 16589                           ;ADC_GetConversion@channel stored from wreg
 16590  003408  6E1C               	movwf	ADC_GetConversion@channel,c
 16591                           
 16592                           ;adc.c: 109: ADCON0bits.CHS = channel;
 16593  00340A  C01C  F01A         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
 16594  00340E  461A               	rlncf	??_ADC_GetConversion,f,c
 16595  003410  461A               	rlncf	??_ADC_GetConversion,f,c
 16596  003412  50C2               	movf	4034,w,c	;volatile
 16597  003414  181A               	xorwf	??_ADC_GetConversion,w,c
 16598  003416  0B83               	andlw	-125
 16599  003418  181A               	xorwf	??_ADC_GetConversion,w,c
 16600  00341A  6EC2               	movwf	4034,c	;volatile
 16601                           
 16602                           ;adc.c: 112: ADCON0bits.ADON = 1;
 16603  00341C  80C2               	bsf	4034,0,c	;volatile
 16604                           
 16605                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
 16606  00341E  82C2               	bsf	4034,1,c	;volatile
 16607  003420                     
 16608                           ;adc.c: 119: {
 16609  003420  B2C2               	btfsc	4034,1,c	;volatile
 16610  003422  D7FE               	goto	l986
 16611                           
 16612                           ;adc.c: 120: }
 16613                           ;adc.c: 122: return ((ADRESH << 8) + ADRESL);
 16614  003424  50C4               	movf	4036,w,c	;volatile
 16615  003426  6E1B               	movwf	(??_ADC_GetConversion+1)& (0+255),c
 16616  003428  6A1A               	clrf	??_ADC_GetConversion& (0+255),c
 16617  00342A  50C3               	movf	4035,w,c	;volatile
 16618  00342C  241A               	addwf	??_ADC_GetConversion,w,c
 16619  00342E  6E18               	movwf	?_ADC_GetConversion,c
 16620  003430  0E00               	movlw	0
 16621  003432  201B               	addwfc	??_ADC_GetConversion+1,w,c
 16622  003434  6E19               	movwf	?_ADC_GetConversion+1,c
 16623  003436  0012               	return	
 16624  003438                     __end_of_ADC_GetConversion:
 16625                           	opt stack 0
 16626                           tosu	equ	0xFFF
 16627                           tosh	equ	0xFFE
 16628                           tosl	equ	0xFFD
 16629                           pclath	equ	0xFFA
 16630                           tblptru	equ	0xFF8
 16631                           tblptrh	equ	0xFF7
 16632                           tblptrl	equ	0xFF6
 16633                           tablat	equ	0xFF5
 16634                           prodh	equ	0xFF4
 16635                           prodl	equ	0xFF3
 16636                           intcon	equ	0xFF2
 16637                           intcon2	equ	0xFF1
 16638                           postinc0	equ	0xFEE
 16639                           wreg	equ	0xFE8
 16640                           indf1	equ	0xFE7
 16641                           postdec1	equ	0xFE5
 16642                           fsr1h	equ	0xFE2
 16643                           fsr1l	equ	0xFE1
 16644                           indf2	equ	0xFDF
 16645                           postinc2	equ	0xFDE
 16646                           postdec2	equ	0xFDD
 16647                           fsr2h	equ	0xFDA
 16648                           fsr2l	equ	0xFD9
 16649                           status	equ	0xFD8
 16650                           
 16651 ;; *************** function _INTERRUPT_InterruptManager *****************
 16652 ;; Defined at:
 16653 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 16654 ;; Parameters:    Size  Location     Type
 16655 ;;		None
 16656 ;; Auto vars:     Size  Location     Type
 16657 ;;		None
 16658 ;; Return value:  Size  Location     Type
 16659 ;;                  1    wreg      void 
 16660 ;; Registers used:
 16661 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16662 ;; Tracked objects:
 16663 ;;		On entry : 0/0
 16664 ;;		On exit  : 0/0
 16665 ;;		Unchanged: 0/0
 16666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16667 ;;      Params:         0       0       0       0       0       0       0
 16668 ;;      Locals:         0       0       0       0       0       0       0
 16669 ;;      Temps:         18       0       0       0       0       0       0
 16670 ;;      Totals:        18       0       0       0       0       0       0
 16671 ;;Total ram usage:       18 bytes
 16672 ;; Hardware stack levels used:    1
 16673 ;; Hardware stack levels required when called:    2
 16674 ;; This function calls:
 16675 ;;		_EUSART1_Receive_ISR
 16676 ;;		_EUSART1_Transmit_ISR
 16677 ;;		_MEMORY_ISR
 16678 ;;		_PIN_MANAGER_IOC
 16679 ;;		_TMR0_ISR
 16680 ;; This function is called by:
 16681 ;;		Interrupt level 2
 16682 ;; This function uses a non-reentrant model
 16683 ;;
 16684                           
 16685                           	psect	intcode
 16686  000008                     __pintcode:
 16687                           	opt stack 0
 16688  000008                     _INTERRUPT_InterruptManager:
 16689                           	opt stack 21
 16690                           
 16691                           ;incstack = 0
 16692  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 16693  00000A  CFFA F006          	movff	pclath,??_INTERRUPT_InterruptManager
 16694  00000E  CFFB F007          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 16695  000012  CFE9 F008          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 16696  000016  CFEA F009          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 16697  00001A  CFE1 F00A          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 16698  00001E  CFE2 F00B          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 16699  000022  CFD9 F00C          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 16700  000026  CFDA F00D          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 16701  00002A  CFF3 F00E          	movff	prodl,??_INTERRUPT_InterruptManager+8
 16702  00002E  CFF4 F00F          	movff	prodh,??_INTERRUPT_InterruptManager+9
 16703  000032  CFF6 F010          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 16704  000036  CFF7 F011          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 16705  00003A  CFF8 F012          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 16706  00003E  CFF5 F013          	movff	tablat,??_INTERRUPT_InterruptManager+13
 16707  000042  C048  F014         	movff	btemp,??_INTERRUPT_InterruptManager+14
 16708  000046  C049  F015         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 16709  00004A  C04A  F016         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 16710  00004E  C04B  F017         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 16711                           
 16712                           ;interrupt_manager.c: 60: if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
 16713  000052  B6F2               	btfsc	intcon,3,c	;volatile
 16714  000054  A0F2               	btfss	intcon,0,c	;volatile
 16715  000056  D003               	goto	i2l711
 16716                           
 16717                           ;interrupt_manager.c: 61: {
 16718                           ;interrupt_manager.c: 62: PIN_MANAGER_IOC();
 16719  000058  ECDE  F01B         	call	_PIN_MANAGER_IOC	;wreg free
 16720                           
 16721                           ;interrupt_manager.c: 63: }
 16722  00005C  D019               	goto	i2l720
 16723  00005E                     i2l711:
 16724                           
 16725                           ;interrupt_manager.c: 64: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 16726  00005E  BAF2               	btfsc	intcon,5,c	;volatile
 16727  000060  A4F2               	btfss	intcon,2,c	;volatile
 16728  000062  D003               	goto	i2l713
 16729                           
 16730                           ;interrupt_manager.c: 65: {
 16731                           ;interrupt_manager.c: 66: TMR0_ISR();
 16732  000064  EC34  F011         	call	_TMR0_ISR	;wreg free
 16733                           
 16734                           ;interrupt_manager.c: 67: }
 16735  000068  D013               	goto	i2l720
 16736  00006A                     i2l713:
 16737                           
 16738                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1)
 16739  00006A  ACF2               	btfss	intcon,6,c	;volatile
 16740  00006C  D011               	goto	i2l720
 16741                           
 16742                           ;interrupt_manager.c: 69: {
 16743                           ;interrupt_manager.c: 70: if(PIE2bits.EEIE == 1 && PIR2bits.EEIF == 1)
 16744  00006E  B8A0               	btfsc	4000,4,c	;volatile
 16745  000070  A8A1               	btfss	4001,4,c	;volatile
 16746  000072  D003               	goto	i2l716
 16747                           
 16748                           ;interrupt_manager.c: 71: {
 16749                           ;interrupt_manager.c: 72: MEMORY_ISR();
 16750  000074  ECE0  F01B         	call	_MEMORY_ISR	;wreg free
 16751                           
 16752                           ;interrupt_manager.c: 73: }
 16753  000078  D00B               	goto	i2l720
 16754  00007A                     i2l716:
 16755                           
 16756                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 16757  00007A  B89D               	btfsc	3997,4,c	;volatile
 16758  00007C  A89E               	btfss	3998,4,c	;volatile
 16759  00007E  D003               	goto	i2l718
 16760                           
 16761                           ;interrupt_manager.c: 75: {
 16762                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
 16763  000080  EC30  F019         	call	_EUSART1_Transmit_ISR	;wreg free
 16764                           
 16765                           ;interrupt_manager.c: 77: }
 16766  000084  D005               	goto	i2l720
 16767  000086                     i2l718:
 16768                           
 16769                           ;interrupt_manager.c: 78: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 16770  000086  BA9D               	btfsc	3997,5,c	;volatile
 16771  000088  AA9E               	btfss	3998,5,c	;volatile
 16772  00008A  D002               	goto	i2l720
 16773                           
 16774                           ;interrupt_manager.c: 79: {
 16775                           ;interrupt_manager.c: 80: EUSART1_Receive_ISR();
 16776  00008C  EC1C  F01A         	call	_EUSART1_Receive_ISR	;wreg free
 16777  000090                     i2l720:
 16778                           
 16779                           ;interrupt_manager.c: 87: else
 16780                           ;interrupt_manager.c: 88: {
 16781                           
 16782                           ;interrupt_manager.c: 85: }
 16783                           ;interrupt_manager.c: 86: }
 16784                           
 16785                           ;interrupt_manager.c: 82: else
 16786                           ;interrupt_manager.c: 83: {
 16787  000090  C017  F04B         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 16788  000094  C016  F04A         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 16789  000098  C015  F049         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 16790  00009C  C014  F048         	movff	??_INTERRUPT_InterruptManager+14,btemp
 16791  0000A0  C013  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 16792  0000A4  C012  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 16793  0000A8  C011  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 16794  0000AC  C010  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 16795  0000B0  C00F  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 16796  0000B4  C00E  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 16797  0000B8  C00D  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 16798  0000BC  C00C  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 16799  0000C0  C00B  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 16800  0000C4  C00A  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 16801  0000C8  C009  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 16802  0000CC  C008  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 16803  0000D0  C007  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 16804  0000D4  C006  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 16805  0000D8  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 16806  0000DA  0011               	retfie		f
 16807  0000DC                     __end_of_INTERRUPT_InterruptManager:
 16808                           	opt stack 0
 16809                           tosu	equ	0xFFF
 16810                           tosh	equ	0xFFE
 16811                           tosl	equ	0xFFD
 16812                           pclatu	equ	0xFFB
 16813                           pclath	equ	0xFFA
 16814                           tblptru	equ	0xFF8
 16815                           tblptrh	equ	0xFF7
 16816                           tblptrl	equ	0xFF6
 16817                           tablat	equ	0xFF5
 16818                           prodh	equ	0xFF4
 16819                           prodl	equ	0xFF3
 16820                           intcon	equ	0xFF2
 16821                           intcon2	equ	0xFF1
 16822                           postinc0	equ	0xFEE
 16823                           fsr0h	equ	0xFEA
 16824                           fsr0l	equ	0xFE9
 16825                           wreg	equ	0xFE8
 16826                           indf1	equ	0xFE7
 16827                           postdec1	equ	0xFE5
 16828                           fsr1h	equ	0xFE2
 16829                           fsr1l	equ	0xFE1
 16830                           indf2	equ	0xFDF
 16831                           postinc2	equ	0xFDE
 16832                           postdec2	equ	0xFDD
 16833                           fsr2h	equ	0xFDA
 16834                           fsr2l	equ	0xFD9
 16835                           status	equ	0xFD8
 16836                           
 16837 ;; *************** function _TMR0_ISR *****************
 16838 ;; Defined at:
 16839 ;;		line 132 in file "mcc_generated_files/tmr0.c"
 16840 ;; Parameters:    Size  Location     Type
 16841 ;;		None
 16842 ;; Auto vars:     Size  Location     Type
 16843 ;;		None
 16844 ;; Return value:  Size  Location     Type
 16845 ;;                  1    wreg      void 
 16846 ;; Registers used:
 16847 ;;		wreg, status,2, status,0, cstack
 16848 ;; Tracked objects:
 16849 ;;		On entry : 0/0
 16850 ;;		On exit  : 0/0
 16851 ;;		Unchanged: 0/0
 16852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16853 ;;      Params:         0       0       0       0       0       0       0
 16854 ;;      Locals:         0       0       0       0       0       0       0
 16855 ;;      Temps:          0       0       0       0       0       0       0
 16856 ;;      Totals:         0       0       0       0       0       0       0
 16857 ;;Total ram usage:        0 bytes
 16858 ;; Hardware stack levels used:    1
 16859 ;; Hardware stack levels required when called:    1
 16860 ;; This function calls:
 16861 ;;		___lwmod
 16862 ;; This function is called by:
 16863 ;;		_INTERRUPT_InterruptManager
 16864 ;; This function uses a non-reentrant model
 16865 ;;
 16866                           
 16867                           	psect	text112
 16868  002268                     __ptext112:
 16869                           	opt stack 0
 16870  002268                     _TMR0_ISR:
 16871                           	opt stack 21
 16872                           
 16873                           ;tmr0.c: 134: static volatile uint16_t CountCallBack = 0;
 16874                           ;tmr0.c: 137: INTCONbits.TMR0IF = 0;
 16875                           
 16876                           ;incstack = 0
 16877  002268  94F2               	bcf	intcon,2,c	;volatile
 16878                           
 16879                           ;tmr0.c: 141: TMR0H = timer0ReloadVal >> 8;
 16880  00226A  5047               	movf	_timer0ReloadVal+1,w,c	;volatile
 16881  00226C  6ED7               	movwf	4055,c	;volatile
 16882                           
 16883                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal;
 16884  00226E  C046  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 16885                           
 16886                           ;tmr0.c: 146: CountCallBack ++;
 16887  002272  4A35               	infsnz	TMR0_ISR@CountCallBack,f,c	;volatile
 16888  002274  2A36               	incf	TMR0_ISR@CountCallBack+1,f,c	;volatile
 16889                           
 16890                           ;tmr0.c: 147: if ((CountCallBack % 20) == 0)
 16891  002276  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 16892  00227A  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 16893  00227E  0E00               	movlw	0
 16894  002280  6E04               	movwf	___lwmod@divisor+1,c
 16895  002282  0E14               	movlw	20
 16896  002284  6E03               	movwf	___lwmod@divisor,c
 16897  002286  EC5F  F018         	call	___lwmod	;wreg free
 16898  00228A  5001               	movf	?___lwmod,w,c
 16899  00228C  1002               	iorwf	?___lwmod+1,w,c
 16900  00228E  A4D8               	btfss	status,2,c
 16901  002290  D003               	goto	i2l942
 16902                           
 16903                           ;tmr0.c: 148: {
 16904                           ;tmr0.c: 149: TimerOneSecFlag = 1;
 16905  002292  0E01               	movlw	1
 16906  002294  0100               	movlb	0	; () banked
 16907  002296  6FD8               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
 16908  002298                     i2l942:
 16909                           
 16910                           ;tmr0.c: 150: }
 16911                           ;tmr0.c: 152: if ((CountCallBack % 50) == 0)
 16912                           
 16913                           ; BSR set to: 0
 16914  002298  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 16915  00229C  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 16916  0022A0  0E00               	movlw	0
 16917  0022A2  6E04               	movwf	___lwmod@divisor+1,c
 16918  0022A4  0E32               	movlw	50
 16919  0022A6  6E03               	movwf	___lwmod@divisor,c
 16920  0022A8  EC5F  F018         	call	___lwmod	;wreg free
 16921  0022AC  5001               	movf	?___lwmod,w,c
 16922  0022AE  1002               	iorwf	?___lwmod+1,w,c
 16923  0022B0  A4D8               	btfss	status,2,c
 16924  0022B2  D003               	goto	i2l943
 16925                           
 16926                           ;tmr0.c: 153: {
 16927                           ;tmr0.c: 154: TimerSamplingFlag = 1;
 16928  0022B4  0E01               	movlw	1
 16929  0022B6  0100               	movlb	0	; () banked
 16930  0022B8  6FD7               	movwf	_TimerSamplingFlag& (0+255),b	;volatile
 16931  0022BA                     i2l943:
 16932                           
 16933                           ;tmr0.c: 155: }
 16934                           ;tmr0.c: 156: if ((CountCallBack % 300) == 0)
 16935                           
 16936                           ; BSR set to: 0
 16937  0022BA  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 16938  0022BE  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 16939  0022C2  0E01               	movlw	1
 16940  0022C4  6E04               	movwf	___lwmod@divisor+1,c
 16941  0022C6  0E2C               	movlw	44
 16942  0022C8  6E03               	movwf	___lwmod@divisor,c
 16943  0022CA  EC5F  F018         	call	___lwmod	;wreg free
 16944  0022CE  5001               	movf	?___lwmod,w,c
 16945  0022D0  1002               	iorwf	?___lwmod+1,w,c
 16946  0022D2  A4D8               	btfss	status,2,c
 16947  0022D4  D003               	goto	i2l944
 16948                           
 16949                           ;tmr0.c: 157: {
 16950                           ;tmr0.c: 158: TimerKeepAliveFlag = 1;
 16951  0022D6  0E01               	movlw	1
 16952  0022D8  0100               	movlb	0	; () banked
 16953  0022DA  6FD6               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
 16954  0022DC                     i2l944:
 16955                           
 16956                           ;tmr0.c: 159: }
 16957                           ;tmr0.c: 161: CountCallBack %= 300;
 16958                           
 16959                           ; BSR set to: 0
 16960  0022DC  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 16961  0022E0  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 16962  0022E4  0E01               	movlw	1
 16963  0022E6  6E04               	movwf	___lwmod@divisor+1,c
 16964  0022E8  0E2C               	movlw	44
 16965  0022EA  6E03               	movwf	___lwmod@divisor,c
 16966  0022EC  EC5F  F018         	call	___lwmod	;wreg free
 16967  0022F0  C001  F035         	movff	?___lwmod,TMR0_ISR@CountCallBack	;volatile
 16968  0022F4  C002  F036         	movff	?___lwmod+1,TMR0_ISR@CountCallBack+1	;volatile
 16969  0022F8  0012               	return		;funcret
 16970  0022FA                     __end_of_TMR0_ISR:
 16971                           	opt stack 0
 16972                           tosu	equ	0xFFF
 16973                           tosh	equ	0xFFE
 16974                           tosl	equ	0xFFD
 16975                           pclatu	equ	0xFFB
 16976                           pclath	equ	0xFFA
 16977                           tblptru	equ	0xFF8
 16978                           tblptrh	equ	0xFF7
 16979                           tblptrl	equ	0xFF6
 16980                           tablat	equ	0xFF5
 16981                           prodh	equ	0xFF4
 16982                           prodl	equ	0xFF3
 16983                           intcon	equ	0xFF2
 16984                           intcon2	equ	0xFF1
 16985                           postinc0	equ	0xFEE
 16986                           fsr0h	equ	0xFEA
 16987                           fsr0l	equ	0xFE9
 16988                           wreg	equ	0xFE8
 16989                           indf1	equ	0xFE7
 16990                           postdec1	equ	0xFE5
 16991                           fsr1h	equ	0xFE2
 16992                           fsr1l	equ	0xFE1
 16993                           indf2	equ	0xFDF
 16994                           postinc2	equ	0xFDE
 16995                           postdec2	equ	0xFDD
 16996                           fsr2h	equ	0xFDA
 16997                           fsr2l	equ	0xFD9
 16998                           status	equ	0xFD8
 16999                           
 17000 ;; *************** function ___lwmod *****************
 17001 ;; Defined at:
 17002 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 17003 ;; Parameters:    Size  Location     Type
 17004 ;;  dividend        2    0[COMRAM] unsigned int 
 17005 ;;  divisor         2    2[COMRAM] unsigned int 
 17006 ;; Auto vars:     Size  Location     Type
 17007 ;;  counter         1    4[COMRAM] unsigned char 
 17008 ;; Return value:  Size  Location     Type
 17009 ;;                  2    0[COMRAM] unsigned int 
 17010 ;; Registers used:
 17011 ;;		wreg, status,2, status,0
 17012 ;; Tracked objects:
 17013 ;;		On entry : 0/0
 17014 ;;		On exit  : 0/0
 17015 ;;		Unchanged: 0/0
 17016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17017 ;;      Params:         4       0       0       0       0       0       0
 17018 ;;      Locals:         1       0       0       0       0       0       0
 17019 ;;      Temps:          0       0       0       0       0       0       0
 17020 ;;      Totals:         5       0       0       0       0       0       0
 17021 ;;Total ram usage:        5 bytes
 17022 ;; Hardware stack levels used:    1
 17023 ;; This function calls:
 17024 ;;		Nothing
 17025 ;; This function is called by:
 17026 ;;		_TMR0_ISR
 17027 ;; This function uses a non-reentrant model
 17028 ;;
 17029                           
 17030                           	psect	text113
 17031  0030BE                     __ptext113:
 17032                           	opt stack 0
 17033  0030BE                     ___lwmod:
 17034                           	opt stack 21
 17035                           
 17036                           ;incstack = 0
 17037  0030BE  5003               	movf	___lwmod@divisor,w,c
 17038  0030C0  1004               	iorwf	___lwmod@divisor+1,w,c
 17039  0030C2  B4D8               	btfsc	status,2,c
 17040  0030C4  D018               	goto	i2l1793
 17041  0030C6  0E01               	movlw	1
 17042  0030C8  6E05               	movwf	___lwmod@counter,c
 17043  0030CA  D004               	goto	i2l1788
 17044  0030CC  90D8               	bcf	status,0,c
 17045  0030CE  3603               	rlcf	___lwmod@divisor,f,c
 17046  0030D0  3604               	rlcf	___lwmod@divisor+1,f,c
 17047  0030D2  2A05               	incf	___lwmod@counter,f,c
 17048  0030D4                     i2l1788:
 17049  0030D4  AE04               	btfss	___lwmod@divisor+1,7,c
 17050  0030D6  D7FA               	goto	i2l1789
 17051  0030D8                     i2u516_40:
 17052  0030D8  5003               	movf	___lwmod@divisor,w,c
 17053  0030DA  5C01               	subwf	___lwmod@dividend,w,c
 17054  0030DC  5004               	movf	___lwmod@divisor+1,w,c
 17055  0030DE  5802               	subwfb	___lwmod@dividend+1,w,c
 17056  0030E0  A0D8               	btfss	status,0,c
 17057  0030E2  D004               	goto	i2l1792
 17058  0030E4  5003               	movf	___lwmod@divisor,w,c
 17059  0030E6  5E01               	subwf	___lwmod@dividend,f,c
 17060  0030E8  5004               	movf	___lwmod@divisor+1,w,c
 17061  0030EA  5A02               	subwfb	___lwmod@dividend+1,f,c
 17062  0030EC                     i2l1792:
 17063  0030EC  90D8               	bcf	status,0,c
 17064  0030EE  3204               	rrcf	___lwmod@divisor+1,f,c
 17065  0030F0  3203               	rrcf	___lwmod@divisor,f,c
 17066  0030F2  2E05               	decfsz	___lwmod@counter,f,c
 17067  0030F4  D7F1               	goto	i2u516_40
 17068  0030F6                     i2l1793:
 17069  0030F6  C001  F001         	movff	___lwmod@dividend,?___lwmod
 17070  0030FA  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
 17071  0030FE  0012               	return		;funcret
 17072  003100                     __end_of___lwmod:
 17073                           	opt stack 0
 17074                           tosu	equ	0xFFF
 17075                           tosh	equ	0xFFE
 17076                           tosl	equ	0xFFD
 17077                           pclatu	equ	0xFFB
 17078                           pclath	equ	0xFFA
 17079                           tblptru	equ	0xFF8
 17080                           tblptrh	equ	0xFF7
 17081                           tblptrl	equ	0xFF6
 17082                           tablat	equ	0xFF5
 17083                           prodh	equ	0xFF4
 17084                           prodl	equ	0xFF3
 17085                           intcon	equ	0xFF2
 17086                           intcon2	equ	0xFF1
 17087                           postinc0	equ	0xFEE
 17088                           fsr0h	equ	0xFEA
 17089                           fsr0l	equ	0xFE9
 17090                           wreg	equ	0xFE8
 17091                           indf1	equ	0xFE7
 17092                           postdec1	equ	0xFE5
 17093                           fsr1h	equ	0xFE2
 17094                           fsr1l	equ	0xFE1
 17095                           indf2	equ	0xFDF
 17096                           postinc2	equ	0xFDE
 17097                           postdec2	equ	0xFDD
 17098                           fsr2h	equ	0xFDA
 17099                           fsr2l	equ	0xFD9
 17100                           status	equ	0xFD8
 17101                           
 17102 ;; *************** function _PIN_MANAGER_IOC *****************
 17103 ;; Defined at:
 17104 ;;		line 96 in file "mcc_generated_files/pin_manager.c"
 17105 ;; Parameters:    Size  Location     Type
 17106 ;;		None
 17107 ;; Auto vars:     Size  Location     Type
 17108 ;;		None
 17109 ;; Return value:  Size  Location     Type
 17110 ;;                  1    wreg      void 
 17111 ;; Registers used:
 17112 ;;		None
 17113 ;; Tracked objects:
 17114 ;;		On entry : 0/0
 17115 ;;		On exit  : 0/0
 17116 ;;		Unchanged: 0/0
 17117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17118 ;;      Params:         0       0       0       0       0       0       0
 17119 ;;      Locals:         0       0       0       0       0       0       0
 17120 ;;      Temps:          0       0       0       0       0       0       0
 17121 ;;      Totals:         0       0       0       0       0       0       0
 17122 ;;Total ram usage:        0 bytes
 17123 ;; Hardware stack levels used:    1
 17124 ;; This function calls:
 17125 ;;		Nothing
 17126 ;; This function is called by:
 17127 ;;		_INTERRUPT_InterruptManager
 17128 ;; This function uses a non-reentrant model
 17129 ;;
 17130                           
 17131                           	psect	text114
 17132  0037BC                     __ptext114:
 17133                           	opt stack 0
 17134  0037BC                     _PIN_MANAGER_IOC:
 17135                           	opt stack 22
 17136                           
 17137                           ;pin_manager.c: 100: INTCONbits.RBIF = 0;
 17138                           
 17139                           ;incstack = 0
 17140  0037BC  90F2               	bcf	intcon,0,c	;volatile
 17141  0037BE  0012               	return		;funcret
 17142  0037C0                     __end_of_PIN_MANAGER_IOC:
 17143                           	opt stack 0
 17144                           tosu	equ	0xFFF
 17145                           tosh	equ	0xFFE
 17146                           tosl	equ	0xFFD
 17147                           pclatu	equ	0xFFB
 17148                           pclath	equ	0xFFA
 17149                           tblptru	equ	0xFF8
 17150                           tblptrh	equ	0xFF7
 17151                           tblptrl	equ	0xFF6
 17152                           tablat	equ	0xFF5
 17153                           prodh	equ	0xFF4
 17154                           prodl	equ	0xFF3
 17155                           intcon	equ	0xFF2
 17156                           intcon2	equ	0xFF1
 17157                           postinc0	equ	0xFEE
 17158                           fsr0h	equ	0xFEA
 17159                           fsr0l	equ	0xFE9
 17160                           wreg	equ	0xFE8
 17161                           indf1	equ	0xFE7
 17162                           postdec1	equ	0xFE5
 17163                           fsr1h	equ	0xFE2
 17164                           fsr1l	equ	0xFE1
 17165                           indf2	equ	0xFDF
 17166                           postinc2	equ	0xFDE
 17167                           postdec2	equ	0xFDD
 17168                           fsr2h	equ	0xFDA
 17169                           fsr2l	equ	0xFD9
 17170                           status	equ	0xFD8
 17171                           
 17172 ;; *************** function _MEMORY_ISR *****************
 17173 ;; Defined at:
 17174 ;;		line 206 in file "mcc_generated_files/memory.c"
 17175 ;; Parameters:    Size  Location     Type
 17176 ;;		None
 17177 ;; Auto vars:     Size  Location     Type
 17178 ;;		None
 17179 ;; Return value:  Size  Location     Type
 17180 ;;                  1    wreg      void 
 17181 ;; Registers used:
 17182 ;;		None
 17183 ;; Tracked objects:
 17184 ;;		On entry : 0/0
 17185 ;;		On exit  : 0/0
 17186 ;;		Unchanged: 0/0
 17187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17188 ;;      Params:         0       0       0       0       0       0       0
 17189 ;;      Locals:         0       0       0       0       0       0       0
 17190 ;;      Temps:          0       0       0       0       0       0       0
 17191 ;;      Totals:         0       0       0       0       0       0       0
 17192 ;;Total ram usage:        0 bytes
 17193 ;; Hardware stack levels used:    1
 17194 ;; This function calls:
 17195 ;;		Nothing
 17196 ;; This function is called by:
 17197 ;;		_INTERRUPT_InterruptManager
 17198 ;; This function uses a non-reentrant model
 17199 ;;
 17200                           
 17201                           	psect	text115
 17202  0037C0                     __ptext115:
 17203                           	opt stack 0
 17204  0037C0                     _MEMORY_ISR:
 17205                           	opt stack 22
 17206                           
 17207                           ;memory.c: 209: PIR2bits.EEIF = 0;
 17208                           
 17209                           ;incstack = 0
 17210  0037C0  98A1               	bcf	4001,4,c	;volatile
 17211  0037C2  0012               	return		;funcret
 17212  0037C4                     __end_of_MEMORY_ISR:
 17213                           	opt stack 0
 17214                           tosu	equ	0xFFF
 17215                           tosh	equ	0xFFE
 17216                           tosl	equ	0xFFD
 17217                           pclatu	equ	0xFFB
 17218                           pclath	equ	0xFFA
 17219                           tblptru	equ	0xFF8
 17220                           tblptrh	equ	0xFF7
 17221                           tblptrl	equ	0xFF6
 17222                           tablat	equ	0xFF5
 17223                           prodh	equ	0xFF4
 17224                           prodl	equ	0xFF3
 17225                           intcon	equ	0xFF2
 17226                           intcon2	equ	0xFF1
 17227                           postinc0	equ	0xFEE
 17228                           fsr0h	equ	0xFEA
 17229                           fsr0l	equ	0xFE9
 17230                           wreg	equ	0xFE8
 17231                           indf1	equ	0xFE7
 17232                           postdec1	equ	0xFE5
 17233                           fsr1h	equ	0xFE2
 17234                           fsr1l	equ	0xFE1
 17235                           indf2	equ	0xFDF
 17236                           postinc2	equ	0xFDE
 17237                           postdec2	equ	0xFDD
 17238                           fsr2h	equ	0xFDA
 17239                           fsr2l	equ	0xFD9
 17240                           status	equ	0xFD8
 17241                           
 17242 ;; *************** function _EUSART1_Transmit_ISR *****************
 17243 ;; Defined at:
 17244 ;;		line 181 in file "mcc_generated_files/eusart1.c"
 17245 ;; Parameters:    Size  Location     Type
 17246 ;;		None
 17247 ;; Auto vars:     Size  Location     Type
 17248 ;;		None
 17249 ;; Return value:  Size  Location     Type
 17250 ;;                  1    wreg      void 
 17251 ;; Registers used:
 17252 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17253 ;; Tracked objects:
 17254 ;;		On entry : 0/0
 17255 ;;		On exit  : 0/0
 17256 ;;		Unchanged: 0/0
 17257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17258 ;;      Params:         0       0       0       0       0       0       0
 17259 ;;      Locals:         0       0       0       0       0       0       0
 17260 ;;      Temps:          0       0       0       0       0       0       0
 17261 ;;      Totals:         0       0       0       0       0       0       0
 17262 ;;Total ram usage:        0 bytes
 17263 ;; Hardware stack levels used:    1
 17264 ;; This function calls:
 17265 ;;		Nothing
 17266 ;; This function is called by:
 17267 ;;		_INTERRUPT_InterruptManager
 17268 ;; This function uses a non-reentrant model
 17269 ;;
 17270                           
 17271                           	psect	text116
 17272  003260                     __ptext116:
 17273                           	opt stack 0
 17274  003260                     _EUSART1_Transmit_ISR:
 17275                           	opt stack 22
 17276                           
 17277                           ;eusart1.c: 185: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 17278                           
 17279                           ;incstack = 0
 17280  003260  0E46               	movlw	70
 17281  003262  0100               	movlb	0	; () banked
 17282  003264  61FF               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 17283  003266  D012               	goto	i2l782
 17284                           
 17285                           ; BSR set to: 0
 17286                           ;eusart1.c: 186: {
 17287                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 17288  003268  5039               	movf	_eusart1TxTail,w,c	;volatile
 17289  00326A  0D01               	mullw	1
 17290  00326C  0E00               	movlw	low _eusart1TxBuffer
 17291  00326E  24F3               	addwf	prodl,w,c
 17292  003270  6ED9               	movwf	fsr2l,c
 17293  003272  0E01               	movlw	high _eusart1TxBuffer
 17294  003274  20F4               	addwfc	prodh,w,c
 17295  003276  6EDA               	movwf	fsr2h,c
 17296  003278  50DF               	movf	indf2,w,c
 17297  00327A  6EAD               	movwf	4013,c	;volatile
 17298                           
 17299                           ; BSR set to: 0
 17300  00327C  2A39               	incf	_eusart1TxTail,f,c	;volatile
 17301                           
 17302                           ; BSR set to: 0
 17303                           ;eusart1.c: 188: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 17304  00327E  0E45               	movlw	69
 17305  003280  6439               	cpfsgt	_eusart1TxTail,c	;volatile
 17306  003282  D002               	goto	i2l783
 17307                           
 17308                           ; BSR set to: 0
 17309                           ;eusart1.c: 189: {
 17310                           ;eusart1.c: 190: eusart1TxTail = 0;
 17311  003284  0E00               	movlw	0
 17312  003286  6E39               	movwf	_eusart1TxTail,c	;volatile
 17313  003288                     i2l783:
 17314                           
 17315                           ; BSR set to: 0
 17316                           ;eusart1.c: 191: }
 17317                           ;eusart1.c: 192: eusart1TxBufferRemaining++;
 17318                           
 17319                           ; BSR set to: 0
 17320  003288  2BFF               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 17321                           
 17322                           ;eusart1.c: 193: }
 17323  00328A  0012               	return	
 17324  00328C                     i2l782:
 17325                           
 17326                           ; BSR set to: 0
 17327                           ;eusart1.c: 194: else
 17328                           ;eusart1.c: 195: {
 17329                           ;eusart1.c: 196: PIE1bits.TX1IE = 0;
 17330  00328C  989D               	bcf	3997,4,c	;volatile
 17331                           
 17332                           ; BSR set to: 0
 17333                           ;eusart1.c: 197: eusart1TxTail = 0;
 17334  00328E  0E00               	movlw	0
 17335  003290  6E39               	movwf	_eusart1TxTail,c	;volatile
 17336                           
 17337                           ;eusart1.c: 198: eusart1TxHead = 0;
 17338  003292  0E00               	movlw	0
 17339  003294  6E3A               	movwf	_eusart1TxHead,c	;volatile
 17340  003296  0012               	return	
 17341  003298                     __end_of_EUSART1_Transmit_ISR:
 17342                           	opt stack 0
 17343                           tosu	equ	0xFFF
 17344                           tosh	equ	0xFFE
 17345                           tosl	equ	0xFFD
 17346                           pclatu	equ	0xFFB
 17347                           pclath	equ	0xFFA
 17348                           tblptru	equ	0xFF8
 17349                           tblptrh	equ	0xFF7
 17350                           tblptrl	equ	0xFF6
 17351                           tablat	equ	0xFF5
 17352                           prodh	equ	0xFF4
 17353                           prodl	equ	0xFF3
 17354                           intcon	equ	0xFF2
 17355                           intcon2	equ	0xFF1
 17356                           postinc0	equ	0xFEE
 17357                           fsr0h	equ	0xFEA
 17358                           fsr0l	equ	0xFE9
 17359                           wreg	equ	0xFE8
 17360                           indf1	equ	0xFE7
 17361                           postdec1	equ	0xFE5
 17362                           fsr1h	equ	0xFE2
 17363                           fsr1l	equ	0xFE1
 17364                           indf2	equ	0xFDF
 17365                           postinc2	equ	0xFDE
 17366                           postdec2	equ	0xFDD
 17367                           fsr2h	equ	0xFDA
 17368                           fsr2l	equ	0xFD9
 17369                           status	equ	0xFD8
 17370                           
 17371 ;; *************** function _EUSART1_Receive_ISR *****************
 17372 ;; Defined at:
 17373 ;;		line 202 in file "mcc_generated_files/eusart1.c"
 17374 ;; Parameters:    Size  Location     Type
 17375 ;;		None
 17376 ;; Auto vars:     Size  Location     Type
 17377 ;;		None
 17378 ;; Return value:  Size  Location     Type
 17379 ;;                  1    wreg      void 
 17380 ;; Registers used:
 17381 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17382 ;; Tracked objects:
 17383 ;;		On entry : 0/0
 17384 ;;		On exit  : 0/0
 17385 ;;		Unchanged: 0/0
 17386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17387 ;;      Params:         0       0       0       0       0       0       0
 17388 ;;      Locals:         0       0       0       0       0       0       0
 17389 ;;      Temps:          0       0       0       0       0       0       0
 17390 ;;      Totals:         0       0       0       0       0       0       0
 17391 ;;Total ram usage:        0 bytes
 17392 ;; Hardware stack levels used:    1
 17393 ;; This function calls:
 17394 ;;		Nothing
 17395 ;; This function is called by:
 17396 ;;		_INTERRUPT_InterruptManager
 17397 ;; This function uses a non-reentrant model
 17398 ;;
 17399                           
 17400                           	psect	text117
 17401  003438                     __ptext117:
 17402                           	opt stack 0
 17403  003438                     _EUSART1_Receive_ISR:
 17404                           	opt stack 22
 17405                           
 17406                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
 17407                           
 17408                           ; BSR set to: 0
 17409                           ;incstack = 0
 17410  003438  A2AB               	btfss	4011,1,c	;volatile
 17411  00343A  D002               	goto	i2l788
 17412                           
 17413                           ;eusart1.c: 206: {
 17414                           ;eusart1.c: 208: RCSTA1bits.CREN = 0;
 17415  00343C  98AB               	bcf	4011,4,c	;volatile
 17416                           
 17417                           ;eusart1.c: 209: RCSTA1bits.CREN = 1;
 17418  00343E  88AB               	bsf	4011,4,c	;volatile
 17419  003440                     i2l788:
 17420                           
 17421                           ;eusart1.c: 210: }
 17422                           ;eusart1.c: 215: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 17423  003440  5038               	movf	_eusart1RxHead,w,c	;volatile
 17424  003442  0D01               	mullw	1
 17425  003444  0E46               	movlw	low _eusart1RxBuffer
 17426  003446  24F3               	addwf	prodl,w,c
 17427  003448  6ED9               	movwf	fsr2l,c
 17428  00344A  0E01               	movlw	high _eusart1RxBuffer
 17429  00344C  20F4               	addwfc	prodh,w,c
 17430  00344E  6EDA               	movwf	fsr2h,c
 17431  003450  CFAE FFDF          	movff	4014,indf2	;volatile
 17432  003454  2A38               	incf	_eusart1RxHead,f,c	;volatile
 17433                           
 17434                           ;eusart1.c: 216: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 17435  003456  0E27               	movlw	39
 17436  003458  6438               	cpfsgt	_eusart1RxHead,c	;volatile
 17437  00345A  D002               	goto	i2l789
 17438                           
 17439                           ;eusart1.c: 217: {
 17440                           ;eusart1.c: 218: eusart1RxHead = 0;
 17441  00345C  0E00               	movlw	0
 17442  00345E  6E38               	movwf	_eusart1RxHead,c	;volatile
 17443  003460                     i2l789:
 17444                           
 17445                           ;eusart1.c: 219: }
 17446                           ;eusart1.c: 220: eusart1RxCount++;
 17447  003460  0100               	movlb	0	; () banked
 17448  003462  2BD3               	incf	_eusart1RxCount& (0+255),f,b	;volatile
 17449                           
 17450                           ; BSR set to: 0
 17451  003464  0012               	return		;funcret
 17452  003466                     __end_of_EUSART1_Receive_ISR:
 17453                           	opt stack 0
 17454                           tosu	equ	0xFFF
 17455                           tosh	equ	0xFFE
 17456                           tosl	equ	0xFFD
 17457                           pclatu	equ	0xFFB
 17458                           pclath	equ	0xFFA
 17459                           tblptru	equ	0xFF8
 17460                           tblptrh	equ	0xFF7
 17461                           tblptrl	equ	0xFF6
 17462                           tablat	equ	0xFF5
 17463                           prodh	equ	0xFF4
 17464                           prodl	equ	0xFF3
 17465                           intcon	equ	0xFF2
 17466                           intcon2	equ	0xFF1
 17467                           postinc0	equ	0xFEE
 17468                           fsr0h	equ	0xFEA
 17469                           fsr0l	equ	0xFE9
 17470                           wreg	equ	0xFE8
 17471                           indf1	equ	0xFE7
 17472                           postdec1	equ	0xFE5
 17473                           fsr1h	equ	0xFE2
 17474                           fsr1l	equ	0xFE1
 17475                           indf2	equ	0xFDF
 17476                           postinc2	equ	0xFDE
 17477                           postdec2	equ	0xFDD
 17478                           fsr2h	equ	0xFDA
 17479                           fsr2l	equ	0xFD9
 17480                           status	equ	0xFD8
 17481                           tosu	equ	0xFFF
 17482                           tosh	equ	0xFFE
 17483                           tosl	equ	0xFFD
 17484                           pclatu	equ	0xFFB
 17485                           pclath	equ	0xFFA
 17486                           tblptru	equ	0xFF8
 17487                           tblptrh	equ	0xFF7
 17488                           tblptrl	equ	0xFF6
 17489                           tablat	equ	0xFF5
 17490                           prodh	equ	0xFF4
 17491                           prodl	equ	0xFF3
 17492                           intcon	equ	0xFF2
 17493                           intcon2	equ	0xFF1
 17494                           postinc0	equ	0xFEE
 17495                           fsr0h	equ	0xFEA
 17496                           fsr0l	equ	0xFE9
 17497                           wreg	equ	0xFE8
 17498                           indf1	equ	0xFE7
 17499                           postdec1	equ	0xFE5
 17500                           fsr1h	equ	0xFE2
 17501                           fsr1l	equ	0xFE1
 17502                           indf2	equ	0xFDF
 17503                           postinc2	equ	0xFDE
 17504                           postdec2	equ	0xFDD
 17505                           fsr2h	equ	0xFDA
 17506                           fsr2l	equ	0xFD9
 17507                           status	equ	0xFD8
 17508                           
 17509                           	psect	text118
 17510  000000                     __ptext118:
 17511                           	opt stack 0
 17512                           tosu	equ	0xFFF
 17513                           tosh	equ	0xFFE
 17514                           tosl	equ	0xFFD
 17515                           pclatu	equ	0xFFB
 17516                           pclath	equ	0xFFA
 17517                           tblptru	equ	0xFF8
 17518                           tblptrh	equ	0xFF7
 17519                           tblptrl	equ	0xFF6
 17520                           tablat	equ	0xFF5
 17521                           prodh	equ	0xFF4
 17522                           prodl	equ	0xFF3
 17523                           intcon	equ	0xFF2
 17524                           intcon2	equ	0xFF1
 17525                           postinc0	equ	0xFEE
 17526                           fsr0h	equ	0xFEA
 17527                           fsr0l	equ	0xFE9
 17528                           wreg	equ	0xFE8
 17529                           indf1	equ	0xFE7
 17530                           postdec1	equ	0xFE5
 17531                           fsr1h	equ	0xFE2
 17532                           fsr1l	equ	0xFE1
 17533                           indf2	equ	0xFDF
 17534                           postinc2	equ	0xFDE
 17535                           postdec2	equ	0xFDD
 17536                           fsr2h	equ	0xFDA
 17537                           fsr2l	equ	0xFD9
 17538                           status	equ	0xFD8
 17539                           
 17540                           	psect	rparam
 17541  0000                     tosu	equ	0xFFF
 17542                           tosh	equ	0xFFE
 17543                           tosl	equ	0xFFD
 17544                           pclatu	equ	0xFFB
 17545                           pclath	equ	0xFFA
 17546                           tblptru	equ	0xFF8
 17547                           tblptrh	equ	0xFF7
 17548                           tblptrl	equ	0xFF6
 17549                           tablat	equ	0xFF5
 17550                           prodh	equ	0xFF4
 17551                           prodl	equ	0xFF3
 17552                           intcon	equ	0xFF2
 17553                           intcon2	equ	0xFF1
 17554                           postinc0	equ	0xFEE
 17555                           fsr0h	equ	0xFEA
 17556                           fsr0l	equ	0xFE9
 17557                           wreg	equ	0xFE8
 17558                           indf1	equ	0xFE7
 17559                           postdec1	equ	0xFE5
 17560                           fsr1h	equ	0xFE2
 17561                           fsr1l	equ	0xFE1
 17562                           indf2	equ	0xFDF
 17563                           postinc2	equ	0xFDE
 17564                           postdec2	equ	0xFDD
 17565                           fsr2h	equ	0xFDA
 17566                           fsr2l	equ	0xFD9
 17567                           status	equ	0xFD8
 17568                           
 17569                           	psect	temp
 17570  000048                     btemp:
 17571                           	opt stack 0
 17572  000048                     	ds	1
 17573  0000                     int$flags	set	btemp
 17574  0000                     wtemp6	set	btemp+1
 17575                           tosu	equ	0xFFF
 17576                           tosh	equ	0xFFE
 17577                           tosl	equ	0xFFD
 17578                           pclatu	equ	0xFFB
 17579                           pclath	equ	0xFFA
 17580                           tblptru	equ	0xFF8
 17581                           tblptrh	equ	0xFF7
 17582                           tblptrl	equ	0xFF6
 17583                           tablat	equ	0xFF5
 17584                           prodh	equ	0xFF4
 17585                           prodl	equ	0xFF3
 17586                           intcon	equ	0xFF2
 17587                           intcon2	equ	0xFF1
 17588                           postinc0	equ	0xFEE
 17589                           fsr0h	equ	0xFEA
 17590                           fsr0l	equ	0xFE9
 17591                           wreg	equ	0xFE8
 17592                           indf1	equ	0xFE7
 17593                           postdec1	equ	0xFE5
 17594                           fsr1h	equ	0xFE2
 17595                           fsr1l	equ	0xFE1
 17596                           indf2	equ	0xFDF
 17597                           postinc2	equ	0xFDE
 17598                           postdec2	equ	0xFDD
 17599                           fsr2h	equ	0xFDA
 17600                           fsr2l	equ	0xFD9
 17601                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    116
    Data        20
    BSS         255
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     48      71
    BANK0           160     97     160
    BANK1           256      9     203
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    PLLUartInitialize@data	PTR unsigned char  size(2) Largest target is 0

    SetConversionResultFormat@data	PTR unsigned char  size(2) Largest target is 0

    SetAdcOperationMode@data	PTR unsigned char  size(2) Largest target is 0

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    strtol@endptr	PTR PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strtol@s	PTR const unsigned char  size(2) Largest target is 9
		 -> GetIntFromUartData@dataRegArr(BANK0[9]), 

    memset@p1	PTR void  size(2) Largest target is 69
		 -> GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), GetIntFromUartData@dataRegArr(BANK0[9]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), 
		 -> FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), 
		 -> rxMsgData(BANK1[20]), rxMsgQueue(BANK0[20]), 

    memset@p	PTR unsigned char  size(2) Largest target is 69
		 -> GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), GetIntFromUartData@dataRegArr(BANK0[9]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), 
		 -> FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), 
		 -> rxMsgData(BANK1[20]), rxMsgQueue(BANK0[20]), 

    SetCpldFwVersion@data	PTR unsigned char  size(2) Largest target is 0

    SetMcuFwVersion@data	PTR unsigned char  size(2) Largest target is 0

    Make32bitsArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> SWSPI_Synth_send_bits@bitArray(BANK0[32]), 

    GetIntFromUartData@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    ZeroBitsArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> SWSPI_Synth_send_bits@bitArray(BANK0[32]), 

    sp__memset	PTR void  size(2) Largest target is 69
		 -> GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), GetIntFromUartData@dataRegArr(BANK0[9]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), 
		 -> FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), 
		 -> rxMsgData(BANK1[20]), rxMsgQueue(BANK0[20]), 

    ZeroArray@array	PTR unsigned char  size(2) Largest target is 69
		 -> GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), GetIntFromUartData@dataRegArr(BANK0[9]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), 
		 -> rxMsgQueue(BANK0[20]), 

    crc8@dataArray	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgQueue(BANK0[20]), 

    GroupDAC@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    FLASH_WriteBlock@flashWrBufPtr	PTR unsigned char  size(2) Largest target is 128
		 -> FlashTest@buff(BANK0[128]), sampleArray(BANK1[64]), 

    UpdateRxFreq@data	PTR unsigned char  size(2) Largest target is 0

    UpdateTxFreq@data	PTR unsigned char  size(2) Largest target is 0

    DacSetValue@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    WriteUartMessage@dataBuf	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), SendAckMessage@TxMsg(COMRAM[6]), 

    SetChannelMode@data	PTR unsigned char  size(2) Largest target is 0

    groupsArray	PTR FTN()void [6] size(2) Largest target is 1
		 -> GroupDAC(), GroupFlashMemory(), GroupSynthesizers(), GroupAdc(), 
		 -> GroupStatusAndVersion(), GroupControlMcu(), 


Critical Paths under _main in COMRAM

    _InitRxMessageParams->_ZeroArray
    _GroupSynthesizers->_UpdateRxFreq
    _GroupSynthesizers->_UpdateTxFreq
    _UpdateTxFreq->_SWSPI_send_word
    _UpdateRxFreq->_SWSPI_send_word
    _GroupStatusAndVersion->_GetCpldFwVersion
    _SetMcuFwVersion->_SendAckMessage
    _SetCpldFwVersion->_SendAckMessage
    _GetMcuRunTime->___lldiv
    _GetMcuFwVersion->_ZeroArray
    _GetCpldFwVersion->_ZeroArray
    _GroupFlashMemory->_FlashReadCondition
    _FlashReadUart->_SendAckMessage
    _FlashReadCondition->_ZeroArray
    _FlashEreaseMem->_SendAckMessage
    _GroupDAC->_DacSetValue
    _DacSetValue->_SWSPI_send_word
    _StoreIntInEeprom->_make8
    _EepromWrite->_DATAEE_WriteByte
    _GetIntFromUartData->_strtol
    _strtol->___lmul
    _isalpha->_isupper
    _testLeds->_SendAckMessage
    _ResetMcu->_SendAckMessage
    _ResetCpld->_SendAckMessage
    _SetConversionResultFormat->_SendAckMessage
    _SetChannelMode->_SendAckMessage
    _SetAdcOperationMode->_SendAckMessage
    _keepAliveSignalUart->_SendAckMessage
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _SetMcuRunTime->___llmod
    _SendSystemStartAck->_SendAckMessage
    _SendAckMessage->_ZeroArray
    _ZeroArray->_memset
    _WriteUartMessage->_EUSART1_Write
    _InitSystemApplicationManagers->_DacInit
    _PLLInitialize->_SWSPI_send_word
    _DacInit->_SWSPI_send_word
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _SWSPI_Synth_send_bits->_Make32bitsArray
    _SWSPI_Synth_send_bits->_ZeroBitsArray
    _ZeroBitsArray->_memset
    _SWSPI_DAC_send_bits->_SwSpi_Clk_Pin
    _SWSPI_DAC_send_bits->_SwSpi_Data_Pin
    _ReadIntFromEeprom->_EepromRead
    _EepromRead->_DATAEE_ReadByte
    _CheckFlashPrecentage->___ftdiv
    _log->_eval_poly
    _exp->_eval_poly
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftdiv
    ___ftmul->___ftdiv
    ___ftdiv->___lltoft
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lwtoft->___ftpack
    _FlashSampleWrite->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_ISR->___lwmod

Critical Paths under _main in BANK0

    _readUartMessage->_GroupFlashMemory
    _GroupFlashMemory->_FlashReadUart
    _GetIntFromUartData->_strtol
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _CheckFlashPrecentage->___ftmul
    _AdcConvert->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___ftdiv
    ___ftsub->___ftadd
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_readUartMessage
    _readUartMessage->_GroupAdc
    _readUartMessage->_GroupControlMcu
    _readUartMessage->_GroupDAC
    _readUartMessage->_GroupFlashMemory
    _readUartMessage->_GroupStatusAndVersion
    _readUartMessage->_GroupSynthesizers

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  318582
                         _AdcConvert
                     _BlinkErrorLeds
                        _BlinkOkLeds
               _CheckFlashPrecentage
      _InitSystemApplicationManagers
                 _SendSystemStartAck
                      _SetMcuRunTime
                       _SetMcuSystem
                 _keepAliveSignalLed
                _keepAliveSignalUart
                    _readUartMessage
 ---------------------------------------------------------------------------------
 (1) _readUartMessage                                      7     7      0  173396
                                              2 BANK1      7     7      0
                       _EUSART1_Read
                           _GroupAdc *
                    _GroupControlMcu *
                           _GroupDAC *
                   _GroupFlashMemory *
              _GroupStatusAndVersion *
                  _GroupSynthesizers *
                _InitRxMessageParams
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _InitRxMessageParams                                  0     0      0    2359
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupSynthesizers                                    3     1      2   42559
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                  _PLLUartInitialize
                       _UpdateRxFreq
                       _UpdateTxFreq
 ---------------------------------------------------------------------------------
 (3) _UpdateTxFreq                                         6     4      2   21112
                                             46 COMRAM     2     0      2
                                             38 BANK0      4     4      0
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _UpdateRxFreq                                         6     4      2   21112
                                             46 COMRAM     2     0      2
                                             38 BANK0      4     4      0
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _PLLUartInitialize                                    2     0      2     180
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _GroupStatusAndVersion                                3     1      2   30499
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                   _GetCpldFwVersion
                    _GetMcuFwVersion
                      _GetMcuRunTime
                   _SetCpldFwVersion
                    _SetMcuFwVersion
 ---------------------------------------------------------------------------------
 (3) _SetMcuFwVersion                                      3     1      2    7588
                                             43 COMRAM     3     1      2
                        _EepromWrite
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _SetCpldFwVersion                                     4     2      2    7588
                                             43 COMRAM     4     2      2
                        _EepromWrite
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _GetMcuRunTime                                       17    17      0    4138
                                             36 COMRAM     2     2      0
                                              0 BANK0     15    15      0
                   _WriteUartMessage
                            ___lldiv
                            ___llmod
                               _crc8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     421
                                             23 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _GetMcuFwVersion                                     12    12      0    5546
                                             35 COMRAM    12    12      0
                         _EepromRead
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (3) _GetCpldFwVersion                                    13    13      0    5546
                                             35 COMRAM    13    13      0
                         _EepromRead
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _GroupFlashMemory                                     4     2      2   29318
                                             95 BANK0      2     2      0
                                              0 BANK1      2     0      2
                     _FlashEreaseMem
                 _FlashReadCondition
                      _FlashReadUart
 ---------------------------------------------------------------------------------
 (3) _FlashReadUart                                       97    95      2   13468
                                             43 COMRAM     2     0      2
                                              0 BANK0     95    95      0
                  _FLASH_IsWriteDone
                     _FLASH_ReadByte
                     _SendAckMessage
                   _WriteUartMessage
                          _ZeroArray
                                _abs
                               _crc8
 ---------------------------------------------------------------------------------
 (4) _abs                                                  4     2      2     183
                                             23 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _FLASH_ReadByte                                       4     0      4     543
                                             23 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _FlashReadCondition                                  13    13      0    6700
                                             35 COMRAM    13    13      0
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (3) _FlashEreaseMem                                       0     0      0    9088
                     _SendAckMessage
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupDAC                                             3     1      2   23674
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                        _DacSetValue
 ---------------------------------------------------------------------------------
 (3) _DacSetValue                                          8     6      2   23547
                                             46 COMRAM     2     0      2
                                             38 BANK0      6     6      0
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (4) _StoreIntInEeprom                                     9     2      7    2339
                                             32 COMRAM     9     2      7
                        _EepromWrite
                              _make8
 ---------------------------------------------------------------------------------
 (4) _EepromWrite                                          2     1      1     608
                                             26 COMRAM     2     1      1
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (5) _DATAEE_WriteByte                                     3     2      1     276
                                             23 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (4) _GetIntFromUartData                                  21    17      4    5350
                                              6 BANK0     21    17      4
                          _ZeroArray
                             _strtol
 ---------------------------------------------------------------------------------
 (5) _strtol                                              16    10      6    2273
                                             35 COMRAM    10     4      6
                                              0 BANK0      6     6      0
                             ___lmul
                            _isalpha
                            _isdigit
                            _isspace
                            _toupper
 ---------------------------------------------------------------------------------
 (6) _toupper                                              1     1      0      96
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _isspace                                              3     3      0     130
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isalpha                                              3     3      0     229
                                             26 COMRAM     3     3      0
                            _isupper
 ---------------------------------------------------------------------------------
 (7) _isupper                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     456
                                             23 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) _GroupControlMcu                                      4     1      3   20286
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                          _ResetCpld
                           _ResetMcu
                           _testLeds
 ---------------------------------------------------------------------------------
 (3) _testLeds                                             3     3      0    6797
                                             43 COMRAM     3     3      0
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _ResetMcu                                             0     0      0    6729
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _ResetCpld                                            0     0      0    6729
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _GroupAdc                                             3     1      2   20643
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                _SetAdcOperationMode
                     _SetChannelMode
          _SetConversionResultFormat
 ---------------------------------------------------------------------------------
 (3) _SetConversionResultFormat                            2     0      2    6819
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _SetChannelMode                                       2     0      2    6881
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _SetAdcOperationMode                                  2     0      2    6819
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         3     3      0      68
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalUart                                  0     0      0    6729
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalLed                                   1     1      0       0
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SetMcuSystem                                         0     0      0      98
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0      98
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      2     2      0      98
                                             25 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _TMR0_SetInterruptHandler                             2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMcuRunTime                                        0     0      0     592
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     592
                                             23 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (1) _SendSystemStartAck                                   0     0      0    6729
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (4) _SendAckMessage                                       8     7      1    6729
                                             35 COMRAM     8     7      1
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _crc8                                                 9     5      4    1430
                                             23 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _ZeroArray                                            4     0      4    2359
                                             31 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (5) _WriteUartMessage                                     7     3      4    1272
                                             24 COMRAM     7     3      4
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (6) _EUSART1_Write                                        1     1      0      62
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitSystemApplicationManagers                        0     0      0   18358
                    _ClearMcuRunTime
                            _DacInit
              _InitAdcApplicationMgr
                      _PLLInitialize
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PLLInitialize                                        1     1      0    9163
                                             46 COMRAM     1     1      0
                    _SWSPI_send_word
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (3) _SwSpi_Set_CE_Pin                                     2     1      1     186
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _InitAdcApplicationMgr                                1     1      0       1
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _DacInit                                              2     2      0    9194
                                             46 COMRAM     2     2      0
                  _ReadIntFromEeprom
                    _SWSPI_send_word
 ---------------------------------------------------------------------------------
 (4) _SWSPI_send_word                                      9     4      5    8878
                                             37 COMRAM     9     4      5
                _SWSPI_DAC_send_bits
              _SWSPI_Synth_send_bits
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
                              _make8
 ---------------------------------------------------------------------------------
 (5) _make8                                                9     4      5    1235
                                             23 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Synth_Le_Pin                               2     1      1     335
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Dac_Sync_Pin                               1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _SWSPI_Synth_send_bits                               42    38      4    3353
                                             33 COMRAM     4     0      4
                                              0 BANK0     38    38      0
                    _Make32bitsArray
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
                      _ZeroBitsArray
 ---------------------------------------------------------------------------------
 (6) _ZeroBitsArray                                        2     0      2     798
                                             31 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     677
                                             23 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (6) _Make32bitsArray                                     10     4      6     344
                                             23 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (5) _SWSPI_DAC_send_bits                                  3     2      1    2041
                                             25 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Data_Pin                                       2     1      1     757
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Clk_Pin                                        2     1      1     937
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (3) _ReadIntFromEeprom                                   13     9      4     313
                                             25 COMRAM    13     9      4
                         _EepromRead
 ---------------------------------------------------------------------------------
 (4) _EepromRead                                           1     1      0      62
                                             24 COMRAM     1     1      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (5) _DATAEE_ReadByte                                      1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ClearMcuRunTime                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckFlashPrecentage                                 7     7      0   13919
                                             24 BANK0      7     7      0
                            ___ftdiv
                             ___ftge
                            ___ftmul
                           ___lltoft
 ---------------------------------------------------------------------------------
 (1) _BlinkOkLeds                                          6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _BlinkErrorLeds                                       6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _AdcConvert                                          12    12      0   98581
                                             81 BANK0     12    12      0
                  _ADC_GetConversion
                   _FlashSampleWrite
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 17    11      6   83041
                                             64 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  5     2      3   26919
                                             46 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                  9     6      3   44808
                                             55 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                                7     2      5     400
                                             46 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) _floor                                                8     5      3   11219
                                             47 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                7     2      5     528
                                             23 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             15    11      4     632
                                             24 BANK0     15    11      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     896
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (5) ___altoft                                            10     6      4    3367
                                             46 COMRAM     2     2      0
                                             39 BANK0      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           12     5      7   11976
                                             46 COMRAM     2     2      0
                                             36 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     563
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    5281
                                              9 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    5754
                                             36 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    5338
                                             24 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     273
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    4353
                                             40 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    3386
                                             31 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    3355
                                             31 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3284
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    3073
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _FlashSampleWrite                                     7     4      3    1631
                                             44 COMRAM     3     0      3
                                              0 BANK0      4     4      0
                  _FLASH_IsWriteDone
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_WriteBlock                                    16    10      6    1172
                                             28 COMRAM    16    10      6
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     5     1      4     217
                                             23 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) _FLASH_IsWriteDone                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      22
                                             23 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                          18    18      0     767
                                              5 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                         _MEMORY_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR0_ISR                                             0     0      0     767
                            ___lwmod
 ---------------------------------------------------------------------------------
 (10) ___lwmod                                             5     1      4     767
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (9) _PIN_MANAGER_IOC                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _MEMORY_ISR                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcConvert
     _ADC_GetConversion
     _FlashSampleWrite
       _FLASH_IsWriteDone
       _FLASH_WriteBlock
         _FLASH_EraseBlock
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _frexp
   _BlinkErrorLeds
   _BlinkOkLeds
   _CheckFlashPrecentage
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___lltoft
       ___ftpack
   _InitSystemApplicationManagers
     _ClearMcuRunTime
     _DacInit
       _ReadIntFromEeprom
         _EepromRead
           _DATAEE_ReadByte
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _Make32bitsArray
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
           _ZeroBitsArray
             _memset
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
     _InitAdcApplicationMgr
     _PLLInitialize
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _Make32bitsArray
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
           _ZeroBitsArray
             _memset
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
       _SwSpi_Set_CE_Pin
     _TMR0_StartTimer
   _SendSystemStartAck
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _SetMcuRunTime
     ___llmod
   _SetMcuSystem
     _SYSTEM_Initialize
       _ADC_Initialize
       _EUSART1_Initialize
       _INTERRUPT_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
   _keepAliveSignalLed
   _keepAliveSignalUart
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _readUartMessage
     _EUSART1_Read
     _GroupAdc *
       _SetAdcOperationMode
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _SetChannelMode
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _SetConversionResultFormat
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupControlMcu *
       _ResetCpld
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _ResetMcu
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _testLeds
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupDAC *
       _DacSetValue
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
             _ZeroBitsArray
               _memset
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _StoreIntInEeprom
           _EepromWrite
             _DATAEE_WriteByte
           _make8
     _GroupFlashMemory *
       _FlashEreaseMem
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _ZeroArray
           _memset
       _FlashReadCondition
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _FlashReadUart
         _FLASH_IsWriteDone
         _FLASH_ReadByte
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _abs
         _crc8
     _GroupStatusAndVersion *
       _GetCpldFwVersion
         _EepromRead
           _DATAEE_ReadByte
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
       _GetMcuFwVersion
         _EepromRead
           _DATAEE_ReadByte
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
       _GetMcuRunTime
         _WriteUartMessage
           _EUSART1_Write
         ___lldiv
         ___llmod
         _crc8
       _SetCpldFwVersion
         _EepromWrite
           _DATAEE_WriteByte
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _SetMcuFwVersion
         _EepromWrite
           _DATAEE_WriteByte
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupSynthesizers *
       _PLLUartInitialize
       _UpdateRxFreq
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
             _ZeroBitsArray
               _memset
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _UpdateTxFreq
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
             _ZeroBitsArray
               _memset
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _InitRxMessageParams *
       _ZeroArray
         _memset
     _ZeroArray *
       _memset
     _crc8 *

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _MEMORY_ISR
   _PIN_MANAGER_IOC
   _TMR0_ISR
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      9      CB       8       79.3%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0     61      A0       6      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     30      47       1       75.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1B2       3        0.0%
DATA                 0      0     1B2       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Mar 12 18:10:54 2018

             __size_of_SendSystemStartAck 000C                         ??_GetMcuFwVersion 0024  
              __end_of_keepAliveSignalLed 3684                              ___altoft@exp 002F  
                _eusart1TxBufferRemaining 00FF                        readUartMessage@idx 01C8  
                         _GroupControlMcu 3100               __end_of_keepAliveSignalUart 3786  
                           ___altoft@sign 0030                __size_of_FLASH_IsWriteDone 000E  
                                      l48 27A6                  GetIntFromUartData@retVal 0074  
                     __end_of_BlinkOkLeds 297C                           _SWSPI_send_word 21CE  
                     ___wmul@multiplicand 001A                           _timer0ReloadVal 0046  
                            __CFG_CP0$OFF 000000                              __CFG_CP1$OFF 000000  
                            __CFG_CP2$OFF 000000                              __CFG_CP3$OFF 000000  
                            ___ftadd@exp1 0083                              ___ftadd@exp2 0082  
                            ___ftadd@sign 0081                               ?_MEMORY_ISR 0001  
                                     l104 33FC                                       l108 10F2  
                                     l204 335A                                       l300 08FE  
                                     l109 1018                                       l205 3344  
                                     l301 0A22                                       l302 091A  
                                     l303 0932                                       l305 09B0  
                                     l307 0A06                                       l308 0A1C  
                                     l172 0BFE                                       l181 0A80  
                                     l173 0A40                                       l431 2E5A  
                                     l191 0B40                                       l183 0A98  
                                     l504 220A                                       l192 0AFC  
                                     l176 0A4E                                       l185 0AB0  
                                     l177 0A7A                                       l530 2C50  
                                     l514 2BDA                                       l522 2004  
                                     l282 088E                                       l290 087C  
                                     l194 0B66                                       l275 17DA  
                                     l531 2C5A                                       l515 2BA6  
                                     l283 07F2                                       l187 0ACE  
                                     l276 17F8                                       l540 2C6E  
                                     l516 2BC0                                       l524 2032  
                                     l508 2264                                       l292 082C  
                                     l444 2D8C                                       l196 0B9E  
                                     l517 2BCA                                       l525 203E  
                                     l605 3190                                       l285 073E  
                                     l189 0AD4                                       l606 319A  
                                     l294 083E                                       l198 0BA4  
                                     l287 074E                                       l439 2D3A  
                                     l560 2CB0                                       l616 31E0  
                                     l529 2C8C                                       l617 31B8  
                                     l297 08E6                                       l289 07BA  
                                     l642 363E                                       l626 31CC  
                                     l618 31C2                                       l547 2C78  
                                     l539 2C64                                       l627 31D6  
                                     l548 2C82                                       l637 3642  
                                     l558 2CE2                                       l638 363A  
                                     l559 2CA6                                       l576 2CCE  
                                     l568 2CBA                                       l577 2CD8  
                                     l569 2CC4                                       l595 31A4  
                                     l763 2FC6                                       l596 317C  
                                     l597 3186                                       l765 2FEC  
                                     l776 3150                                       l873 1FB6  
                                     l777 3174                                       l874 1F6E  
                                     l778 3172                                       l876 1F8E  
                                     l884 32F2                                       l877 1F90  
                                     l986 3420                              __CFG_CPB$OFF 000000  
                            __CFG_CPD$OFF 000000                      readUartMessage@chRec 01CA  
                       ??_Make32bitsArray 001E                                _SYNTH_REGS 0601  
                        PLLInitialize@idx 002F                                       _abs 34BA  
                                     _exp 0C34                                       _log 14DC  
                                     _pow 1360                                       prod 000FF3  
                                     tosl 000FFD                                       wreg 000FE8  
                   ??_SetAdcOperationMode 002E            ?_InitSystemApplicationManagers 0001  
                            __CFG_LVP$OFF 000000                __end_of_FlashReadCondition 170A  
                            ___ftdiv@cntr 0063                              ___ftdiv@sign 0068  
                          ?_ZeroBitsArray 0020                                      l1110 2B08  
                                    l1111 2B0E                                      l1112 2B1C  
                                    l1120 2EF2                                      l1121 2F00  
                                    l1210 2A44                                      l1130 29FC  
                                    l1106 2B22                                      l1211 2A72  
                                    l1131 2A0A                                      l1107 2AF4  
                                    ?_abs 0018                                      l2012 0C4E  
                                    l1220 3220                                      l1140 2F80  
                                    l1205 2A76                                      l1221 31F6  
                                    l1109 2AFA                                      l1117 2F0E  
                                    l2014 0C86                                      l1206 2A38  
                                    l1126 2A18                                      l1118 2EE4  
                                    l2023 1BFC                                      l2015 0CBE  
                                    l1215 2B5E                                      l1127 29E0  
                                    l2032 23B2                                      l2024 1BEE  
                                    l2040 1E04                                      l2016 0CEE  
                                    l1208 2A3C                                      l1136 2F9A  
                                    l2041 1DF8                                      l2017 0E18  
                                    l1217 2B9C                                      l1209 2A40  
                                    l1305 1B14                                      l1129 29EE  
                                    l1137 2F74                                      l1145 35B2  
                                    l2026 1C16                                      l2018 0DEE  
                                    l1226 290C                                      l1146 35A4  
                                    l2027 1C92                                      l1139 2F7A  
                                    l2036 1D90                                      l1420 34D8  
                                    l2038 1DD6                                      l2054 35D4  
                                    l1095 3118                                      l2064 35F2  
                                    l1096 3106                                      l2049 3502  
                                    l1361 2870                                      l1186 2EBE  
                                    l1098 310C                                      l1362 2888  
                                    l1187 2EA2                                      l2059 3528  
                                    l1099 3112                                      l1620 1206  
                                    l2084 1D5E                                      l1460 2652  
                                    l1700 18EA                                      l2076 14F8  
                                    l1284 255C                                      l1364 28AE  
                                    l2085 1CE0                                      l1365 28A2  
                                    l2078 1518                                      l1382 2C06  
                                    l1198 1E80                                      l1294 2336  
                                    l1383 2C1A                                      l1279 32A4  
                                    l1624 1230                                      l1289 3052  
                                    l1570 323C                                      l1634 128C  
                                    l1802 3480                                      l1730 251A  
                                    l1643 12CA                                      l1635 1282  
                                    l1459 265E                                      l1803 3470  
                                    l1644 12C0                                      l1820 14CE  
                                    l1740 284C                                      l1653 1A1C  
                                    l1629 1296                                      l1661 244A  
                                    l1725 24D8                                      l1590 213E  
                                    l1646 12EE                                      l1670 194E  
                                    l1662 247A                                      l1814 13AA  
                                    l1726 24CC                                      l1655 1A44  
                                    l1647 130A                                      l1671 1980  
                                    l1815 139A                                      l1735 2816  
                                    l1592 217C                                      l1656 1A82  
                                    l1648 133A                                      l1672 1990  
                                    l1736 280A                                      l1593 2166  
                                    l1657 1AA8                                      l1817 13C2  
                                    l1729 250C                                      l1746 2AA4  
                                    l1674 19A8                                      l1818 1448  
                                    l1595 21A4                                      l1747 2A98  
                                    l1675 19B8                                      l1691 18AA  
                                    l1819 1426                                      l1739 283E  
                                    l1596 219A                                      l1668 1926  
                                    l1692 189A                                      l1589 2148  
                                    l1685 3094                                      l1679 356C  
                                    l1697 18CE                                      l1689 1832  
                                    l1953 0E66                                      l1698 18C2  
                                    l1970 0F8A                                      l1963 0EE2  
                                    l1955 0E7E                                      l1972 0FAE  
                                    l1964 0EF2                                      l1973 0FEA  
                                    l1957 0ED2                                      l1966 0F0C  
                                    l7201 1F66                                      l4297 24A6  
                                    l1977 36C0                                      l1969 0F1E  
                                    l7153 2796                                      l6435 2B4E  
                                    l6339 3470                                      l7411 329C  
                                    ?_exp 0097                                      l6357 313E  
                                    ?_log 008E                                      l7167 27EC  
                                    l6633 1FFC                                      l7281 0922  
                                    l7291 0982                                      l7435 2326  
                                    l7451 3042                                      l7277 08FE  
                                    l7445 235E                                      l7461 3070  
                                    l5943 2986                                      l7555 0DEE  
                                    l5955 2928                                      l7395 2554  
                                    l7467 1B04                                      l6943 2232  
                                    l7479 1B90                                      l7761 1010  
                                    l6939 2224                                      l7669 2E52  
                                    l6959 1E70                                      l6977 1EBC  
                                    ?_pow 00A0                        EepromWrite@address 001C  
                                    _IOCB 000F62                                      _LATA 000F89  
                                    _LATB 000F8A                                      _LATC 000F8B  
                                    u4000 23DA                                      _LATD 000F8C  
                                    _LATE 000F8D                                      u4008 23DC  
                                    u6020 2130                                      u4340 1DB0  
                                    u5220 3676                                      u6110 3524  
                                    u6210 2A6A                                      u6130 34F4  
                                    u6060 21AE                                      u4348 1DB4  
                                    u7030 1C08                                      u5238 3678  
                                    u3911 1816                                      u6215 2A60  
                                    u7120 1F94                                      u3930 1850  
                                    u6330 0E6E                                      u7070 27EC  
                                    u7310 0982                                      u7135 1FB2  
                                    u3935 1848                                      u7136 1FB4  
                                    u6520 11F8                                      u6280 2050  
                                    u6360 0EA8                                      u7320 09A0  
                                    u7225 07C4                                      u3970 18D4  
                                    u7170 06EA                                      u8107 27BE  
                                    u6620 129E                                      u6380 0EB8  
                                    u7180 06EC                                      u7420 2582  
                                    u7500 1B90                                      u8117 27CE  
                                    u7245 0850                                      u6550 1222  
                                    u6711 1936                                      u8127 27DE  
                                    u7280 08D4                                      u7440 32C2  
                                    u6481 11C4                                      u8137 2052  
                                    u6650 12D2                                      u6491 11D8  
                                    u8147 294E                                      u6580 1260  
                                    u6820 225E                                      u7460 235E  
                                    u6901 1A2C                                      u8157 2968  
                                    u5845 3300                                      u6750 3752  
                                    u7710 17AA                                      u5846 3302  
                                    u6751 374E                                      u8167 29AC  
                                    u7480 3070                                      u8177 29C6  
                                    u8097 27AE                                      u7385 26E2  
                                    u7570 0CC8                                      u6850 1EBC  
                                    u6691 190E                                      u8187 10DE  
                                    u7580 0CCA                                      u7660 1410  
                                    u6790 21DE                                      u6960 24DC  
                                    u6881 1A04                                      u7690 1766  
                                    u6875 33D4                                      u6876 33D6  
                                    u7940 211C                                      u7685 1714  
                                    u6990 281A                                      u7938 0BD6  
                                    u7939 0BF6                  ??_SwSpi_Set_Synth_Le_Pin 0019  
                                    _WPUB 000F61                             _EUSART1_Write 313C  
                                    abs@a 0018                                      _crc8 2E90  
                 ??_InitAdcApplicationMgr 0018                                      _data 00CE  
                                    _main 285E                              ___ftpack@arg 0018  
                           ?_EUSART1_Read 0001                              ___ftpack@exp 001B  
                         _TMR0_StartTimer 37B8                           __end_of_DacInit 262E  
                                    fsr0h 000FEA                                      fsr1h 000FE2  
                                    fsr2h 000FDA                                      fsr0l 000FE9  
                                    indf1 000FE7                                      indf2 000FDF  
                                    fsr1l 000FE1                                      fsr2l 000FD9  
                                    btemp 0048                             __CFG_BORV$190 000000  
                                    exp@x 0097                                      log@x 008E  
                       ?_FLASH_WriteBlock 001D                          ?_ClearMcuRunTime 0001  
                                    pow@x 00A0                                      pow@y 00A3  
                                    prodh 000FF4                                      prodl 000FF3  
               GroupStatusAndVersion@data 01C2             __size_of_CheckFlashPrecentage 00AE  
                                    start 00DC                             __CFG_IESO$OFF 000000  
                     __end_of_EepromWrite 372C                        ??_FLASH_WriteBlock 0023  
                           _adcSampleMode 003D                              ___ftmul@cntr 0076  
                            ___param_bank 000000                              ___ftmul@sign 0077  
                          _BlinkErrorLeds 297C                              ___fttol@exp1 0086  
                                   ??_abs 001A                 __size_of_DATAEE_WriteByte 0036  
                                   ??_exp 0031                                     ??_log 0031  
                            ___fttol@lval 0082                                     ??_pow 0031  
                 __end_of_TMR0_Initialize 33A4            __size_of_OSCILLATOR_Initialize 000E  
           __end_of_OSCILLATOR_Initialize 3748                                     ?_crc8 0018  
              SWSPI_DAC_send_bits@phrType 001C                                     ?_main 0001  
                                   _EEADR 000FA9                           __end_of___ftadd 1360  
         __size_of_SwSpi_Set_Dac_Sync_Pin 001C                           __end_of___ftdiv 1ADA  
                         __end_of___ftneg 357A                           __end_of___lldiv 252C  
                              _EepromRead 37A6                           __end_of___ftmul 19F2  
                                   _T0CON 000FD5                           __end_of___llmod 285E  
                         __end_of___ftsub 30BE                           __end_of___fttol 18FC  
                          __CFG_DEBUG$OFF 000000                           __end_of___lwmod 3100  
                                   i2l711 005E                       StoreIntInEeprom@idx 0029  
                                   i2l720 0090                                     i2l713 006A  
                                   i2l716 007A                                     i2l718 0086  
                                   i2l782 328C                                     i2l942 2298  
                                   i2l783 3288                                     i2l943 22BA  
                                   i2l944 22DC                                     i2l788 3440  
                                   i2l789 3460                       StoreIntInEeprom@val 0028  
                                   _TMR0H 000FD7                                     _TMR0L 000FD6  
                                   _TRISA 000F92                                     _TRISB 000F93  
                                   _TRISC 000F94                                     _TRISD 000F95  
                                   _TRISE 000F96                       _SWSPI_DAC_send_bits 2B9E  
       __size_of_TMR0_SetInterruptHandler 000A                             __CFG_WRT0$OFF 000000  
                           __CFG_WRT1$OFF 000000                __end_of_GetIntFromUartData 1EFC  
                           __CFG_WRT2$OFF 000000                       ___lmul@multiplicand 001C  
               ?_TMR0_SetInterruptHandler 0018                             __CFG_WRT3$OFF 000000  
                            ___lltoft@exp 0028                      _EUSART1_Transmit_ISR 3260  
                          __CFG_EBTR0$OFF 000000                            __CFG_FCMEN$OFF 000000  
                          __CFG_EBTR1$OFF 000000                            __CFG_EBTR2$OFF 000000  
                          __CFG_EBTR3$OFF 000000                         ?_WriteUartMessage 0019  
                        __end_of_TMR0_ISR 22FA                             __CFG_WRTB$OFF 000000  
                __size_of_SetMcuFwVersion 0036                             __CFG_WRTC$OFF 000000  
                           __CFG_WRTD$OFF 000000                           DacSetValue@data 002F  
                         _DATAEE_ReadByte 36C4                            __CFG_EBTRB$OFF 000000  
                           ___awtoft@sign 0023                   __end_of_PIN_MANAGER_IOC 37C0  
                                   crc8@i 001F                                     _make8 2A36  
          __size_of_SWSPI_Synth_send_bits 00BA                     __end_of_GetMcuRunTime 1BBE  
                                   _count 00C9                                     _floor 1BBE  
                                   _ldexp 1D76                                     _frexp 238A  
                                   _errno 00C5             __end_of_SWSPI_Synth_send_bits 2072  
                         __end_of_isalpha 350A                           __end_of_isdigit 35DC  
                                   _group 00D1                        ??_WriteUartMessage 001D  
                      __CFG_MCLRE$EXTMCLR 000000                             ___ftpack@sign 001C  
                 ??_GroupStatusAndVersion 0031                           __end_of_isspace 3530  
                          ?_EUSART1_Write 0001                               ?_AdcConvert 0001  
                          __CFG_BOREN$OFF 000000                           __end_of_isupper 35FA  
                                   pclath 000FFA                                     tablat 000FF5  
                                   pow@yi 00AD                            ??_EUSART1_Read 0018  
                                   status 000FD8                                     wtemp6 0049  
                          __CFG_HFOFST$ON 000000                           __end_of_toupper 36C4  
          SwSpi_Set_Synth_Le_Pin@cPinMode 0018                   __end_of_GroupControlMcu 313C  
                     __size_of_MEMORY_ISR 0004                            __CFG_PBADEN$ON 000000  
      __size_of_SetConversionResultFormat 000C                               exp@exponent 009D  
          CheckFlashPrecentage@precentage 007C                      ?_SWSPI_DAC_send_bits 001A  
                  __end_of_BlinkErrorLeds 29DA                               ldexp@newexp 0091  
                 __end_of_SWSPI_send_word 2268                               _BlinkOkLeds 291E  
                 WriteUartMessage@dataBuf 0019                           __initialization 271C  
                             log@exponent 0091                              __end_of_crc8 2EDE  
              __end_of_EUSART1_Initialize 333A                              __end_of_main 28C0  
                 FLASH_ReadByte@flashAddr 0018               ?_INTERRUPT_InterruptManager 0001  
                        __end_of_GroupDAC 35BE                           _readUartMessage 0A38  
                        __end_of_GroupAdc 2F26                                    ??_crc8 001C  
                                  ??_main 0031                             ___fttol@sign1 0081  
                       ?_SwSpi_Set_CE_Pin 0018                        _TimerKeepAliveFlag 00D6  
                           __activetblptr 000002                   __size_of_FLASH_ReadByte 0012  
                        __end_of_ResetMcu 373A                       SetMcuFwVersion@data 002C  
                            _writeAddress 0042                        ??_SwSpi_Set_CE_Pin 0019  
                   ?_EUSART1_Transmit_ISR 0001                           ??_ZeroBitsArray 0022  
                 __end_of_TMR0_StartTimer 37BC                                    ?_make8 0018  
                                  _ADCON0 000FC2                                    _ADCON1 000FC1  
                                  _ADCON2 000FC0                                    ?_floor 008F  
               FLASH_WriteBlock@writeAddr 001D                                    ?_ldexp 008E  
                                  ?_frexp 0018                          __end_of___altoft 26A8  
                        ___llmod@dividend 0018                                    _ADRESH 000FC4  
                                  _ADRESL 000FC3                                    _EEDATA 000FA8  
                               ??_DacInit 002F                                    _EECON2 000FA7  
                        __end_of___awtoft 3260                                    _ANSELA 000F38  
                                  _ANSELB 000F39                                    _ANSELC 000F3A  
                                  _ANSELD 000F3B                                    _ANSELE 000F3C  
                        __end_of___ftpack 21CE                          __end_of___lltoft 2AEE  
                       _FlashReadUart$561 00B1                         _FlashReadUart$562 00B5  
                       ?_FlashSampleWrite 002D                            __CFG_WDTEN$OFF 000000  
                    StoreIntInEeprom@data 0021                                    i2l1792 30EC  
                                  i2l1793 30F6                                    i2l1788 30D4  
                                  i2l1789 30CC                                    _TABLAT 000FF5  
                             _EepromWrite 371E                                    _RCREG1 000FAE  
                        __end_of___lwtoft 359E                   __size_of_FlashEreaseMem 0052  
               __size_of_FLASH_EraseBlock 0034                                    _RCSTA1 000FAB  
         __size_of_SwSpi_Set_Synth_Le_Pin 003C                                    _OSCCON 000FD3  
                                  _SPBRG1 000FAF                    _SwSpi_Set_Dac_Sync_Pin 3636  
                 __size_of_SwSpi_Data_Pin 0056                  GroupSynthesizers@request 00BF  
                      ??_FlashSampleWrite 0060                                    _TXREG1 000FAD  
                                  _TXSTA1 000FAC                     ??_SWSPI_DAC_send_bits 001B  
                __end_of_GroupFlashMemory 2FB2                           ?_BlinkErrorLeds 0001  
                          __CFG_PWRTEN$ON 000000                          _GetCpldFwVersion 22FA  
                          __CFG_XINST$OFF 000000                         ?_SetCpldFwVersion 002C  
                                  _cState 00D2                                    ___ftge 241A  
                                  ___lmul 2BF6                 SWSPI_Synth_send_bits@data 0022  
                                  ___wmul 3530                       UpdateRxFreq@regData 0086  
                               ??___ftadd 007E                 SWSPI_Synth_send_bits@mask 0080  
                               ??___ftdiv 0060                                 ??___ftneg 001B  
                               ??___lldiv 0020                                 ??___ftmul 006F  
                   __end_of_PLLInitialize 2E90                                 ??___llmod 0020  
                               ??___ftsub 002F                                 ??___fttol 007C  
                      ??_SetCpldFwVersion 002E                                 ??___lwmod 0005  
          SwSpi_Set_Dac_Sync_Pin@cPinMode 0018                        __size_of_ResetCpld 000C  
                        ?_TMR0_Initialize 0001                                    _memset 3466  
                                  clear_0 2762                                    clear_1 276E  
                                  clear_2 277A                       __size_of_AdcConvert 01B6  
                 __end_of_DATAEE_ReadByte 36D8                               ?_EepromRead 0001  
                                  _strtol 0E26                                    floor@i 0092  
                   __end_of_SwSpi_Clk_Pin 2CF8                                    floor@x 008F  
                   ___ftmul@f3_as_product 0073                  SWSPI_DAC_send_bits@count 001B  
              FlashSampleWrite@channelNum 002F                              __pdataCOMRAM 0042  
                               ??_isalpha 001B                                 ??_isdigit 0018  
                   __end_of_FlashReadUart 0A38                          __end_of_testLeds 27F8  
                           ?_SetMcuSystem 0001                              __mediumconst 0000  
                               ??_isspace 0018                                    tblptrh 000FF7  
                               ??_isupper 0018                                    tblptrl 000FF6  
                                  tblptru 000FF8                  ADC_GetConversion@channel 001C  
                         ??_EUSART1_Write 0018  TMR0_SetInterruptHandler@InterruptHandler 0018  
            __size_of_InitRxMessageParams 0028                          ?_PIN_MANAGER_IOC 0001  
                         _eusart1RxBuffer 0146                                 ??_toupper 0018  
                      __size_of_ZeroArray 001E             __size_of_INTERRUPT_Initialize 0004  
                         _eusart1TxBuffer 0100                           _GetMcuFwVersion 252C  
                        __end_ofexp@coeff 065A                         _SYSTEM_Initialize 3652  
                        __end_oflog@coeff 0675                                __accesstop 0060  
                 __end_of__initialization 2780                                ___altoft@c 0087  
                           ZeroArray@size 0022                         ??_SetMcuFwVersion 002E  
                              ___ftadd@f1 0078                                ___ftadd@f2 007B  
                              ___ftge@ff1 0018                                ___ftge@ff2 001B  
                      ?_SYSTEM_Initialize 0001                              eval_poly@res 008B  
                           ___rparam_used 000001                                ___ftdiv@f1 0029  
                              ___ftdiv@f2 002C                                ___ftdiv@f3 0064  
                        ?_GroupControlMcu 01C2              GroupStatusAndVersion@request 00BF  
                              ___ftneg@f1 0018                                ___awtoft@c 0020  
                 __end_of_readUartMessage 0C34                  WriteUartMessage@dataSize 001B  
                              ___ftmul@f1 0069                                ___ftmul@f2 006C  
                        ?_SWSPI_send_word 0026                              ?_DacSetValue 002F  
                              ___ftsub@f1 0084                                ___ftsub@f2 0087  
                              ___fttol@f1 0078                           _Make32bitsArray 2B46  
                          __pcstackCOMRAM 0001                              __pidataBANK0 36FE  
                     ??_SYSTEM_Initialize 001C                                 ?_TMR0_ISR 0001  
                              ___lltoft@c 0020                             __end_of_make8 2A92  
                        _DATAEE_WriteByte 32CE                             __end_of_floor 1CA0  
                           __end_of_ldexp 1E3C                             __end_of_frexp 241A  
                  _SwSpi_Set_Synth_Le_Pin 31B4                      GroupFlashMemory@data 01C2  
                              ___lwtoft@c 0020                      __end_of_EUSART1_Read 2FF6  
                            ??_MEMORY_ISR 0001                 __size_of_StoreIntInEeprom 0038  
                  __size_of_SetMcuRunTime 0044                    ??_EUSART1_Transmit_ISR 0001  
                          ??_SetMcuSystem 001C                        ZeroBitsArray@array 0020  
                   TMR0_ISR@CountCallBack 0035             SwSpi_Set_Synth_Le_Pin@phrType 0019  
                 GroupFlashMemory@request 00C0                        _keepAliveSignalLed 366C  
                       make8@dataLocation 001C               __end_of_EUSART1_Receive_ISR 3466  
             FLASH_WriteBlock@GIEBitValue 002B                              GroupDAC@data 01C2  
                                 ??_make8 001D                                   ??_floor 0031  
                        ?_TMR0_StartTimer 0001                                   ??_ldexp 0093  
                                 ??_frexp 001D                           _AdcConvert$3234 00B7  
               __end_of_SYSTEM_Initialize 366C                             _eusart1RxHead 0038  
                    GetMcuFwVersion@TxMsg 0026                             _eusart1TxHead 003A  
                           _eusart1RxTail 0037                                __pbssBANK0 00C1  
                              __pbssBANK1 0100                             _eusart1TxTail 0039  
                     ?_keepAliveSignalLed 0001                        __size_of_eval_poly 00D6  
                       __end_of_ResetCpld 3762                           __CFG_PLLCFG$OFF 000000  
                              _channelArr 0635                                 ?_GroupDAC 01C2  
                              __pnvCOMRAM 0046                                 ?_GroupAdc 01C2  
          __size_of_InitAdcApplicationMgr 0010                __end_of_SendSystemStartAck 3792  
           __end_of_InitAdcApplicationMgr 371E                       __size_of_EepromRead 000A  
                      __end_of_MEMORY_ISR 37C4                                 ?_ResetMcu 0001  
                      _FlashReadCondition 15FE           ??_InitSystemApplicationManagers 0031  
                      __CFG_CCP2MX$PORTC1 000000                                   ?___ftge 0018  
                          FlashReadUart@j 00B9          __end_of_TMR0_SetInterruptHandler 37A6  
                                 ?___lmul 0018                                   ?___wmul 0018  
                              ??_TMR0_ISR 0006                        __CFG_CCP3MX$PORTB5 000000  
                      SetChannelMode@data 002C                      ??_keepAliveSignalLed 0018  
                       __end_of_ZeroArray 3618                                 ?___altoft 0087  
                                 ?_memset 0018                         _ReadIntFromEeprom 28C0  
                          ___lmul@product 0020                       ?_FlashReadCondition 0001  
                               ?___awtoft 0020                                 ?___ftpack 0018  
                            GroupAdc@data 01C2                          FlashReadUart@idx 00BB  
                               ?___lltoft 0020                 __size_of_FLASH_WriteBlock 00BC  
                 __size_of_ADC_Initialize 0016               __end_of_SetAdcOperationMode 377A  
              FlashSampleWrite@sampleData 002D                            _FLASH_ReadByte 36EC  
                               ?___lwtoft 0020              __end_of_CheckFlashPrecentage 2120  
                      ?_ReadIntFromEeprom 001A                                   ?_strtol 0024  
                        ?_DATAEE_ReadByte 0001              __size_of_keepAliveSignalUart 000C  
                 __end_of_GetMcuFwVersion 25AE                                   _OSCCON2 000FD2  
                                 _TBLPTRH 000FF7                                   _TBLPTRL 000FF6  
                                 _TBLPTRU 000FF8                                   _OSCTUNE 000F9B  
                                 _SPBRGH1 000FB0                       ??_ReadIntFromEeprom 001E  
                                 _DacInit 25AE                     GetIntFromUartData@idx 0079  
                   GetIntFromUartData@num 0073                          GetMcuRunTime@idx 006D  
                            ??_AdcConvert 00B1                      ??_FlashReadCondition 0024  
                          _FlashEreaseMem 2D9C                          _FLASH_EraseBlock 33A4  
          __size_of_GroupStatusAndVersion 0058                            _SwSpi_Data_Pin 2C4C  
                    DATAEE_WriteByte@bAdd 0019             __end_of_GroupStatusAndVersion 2B46  
                 __end_of_Make32bitsArray 2B9E                                ??_GroupDAC 0031  
                              ??_GroupAdc 0031                             _SetMcuRunTime 2FF6  
                      _GetIntFromUartData 1E3C                        FlashReadUart@TxMsg 006C  
                   GroupSynthesizers@data 01C2                                   __Hparam 0000  
                              ??_ResetMcu 002C                 __size_of_WriteUartMessage 0036  
                            ?_BlinkOkLeds 0001                                   __Lparam 0000  
                            _cntRegUpdate 003B                          UpdateRxFreq@data 002F  
                   SendAckMessage@inGroup 0025                          ?_readUartMessage 0001  
                  GroupControlMcu@request 00BF                                 ?_testLeds 0001  
               __end_of_ReadIntFromEeprom 291E                       ?_GetIntFromUartData 0066  
                         __size_of___ftge 0090                           __size_of___lmul 0056  
                                 ___ftadd 11B2                                   ___ftdiv 19F2  
                                 ___ftneg 3556                                   ___lldiv 24AA  
                         __size_of___wmul 0026                                   ___ftmul 18FC  
                                 ___llmod 27F8                                   ___ftsub 307C  
                                 ___fttol 1804                FlashSampleWrite@rotateLeft 0062  
                            crc8@dataSize 001A                  __size_of_ClearMcuRunTime 0014  
                                 ___lwmod 30BE                      AdcConvert@_adcResult 00B3  
                            __psmallconst 0600                                ??___altoft 008B  
                  __end_of_FLASH_ReadByte 36FE                           __CFG_STVREN$OFF 000000  
              SWSPI_Synth_send_bits@count 0084                     _mcuRunTimeIn5SecTicks 00C1  
                                 _crcCalc 00CD                                   _channel 00D4  
                                 __pcinit 271C                                ??___awtoft 0023  
                              ??___ftpack 001D                         __end_of_eval_poly 1D76  
                         __size_of_memset 002C                                   __ramtop 0600  
                 __size_of_SendAckMessage 0052                                ??___lltoft 0024  
                 __size_of_SetChannelMode 0030                                   __ptext0 285E  
                                 __ptext1 0A38                                   __ptext2 3492  
                                 __ptext3 359E                                   __ptext4 2F6E  
                                 __ptext5 2EDE                                   __ptext6 2AEE  
                                 __ptext7 3100                                   __ptext8 29DA  
                                 __ptext9 2CF8                                   crc8@crc 001D  
                      __end_of_AdcConvert 11B2                                ??___lwtoft 0023  
                               _T0CONbits 000FD5                         BlinkErrorLeds@idx 001C  
                         __size_of_strtol 01D6                     _OSCILLATOR_Initialize 373A  
                            __size_of_abs 0028                                   _isalpha 34E2  
                            __size_of_exp 01F2                              __size_of_log 0122  
                                 _isdigit 35BE                              __size_of_pow 017C  
                      _EUSART1_Initialize 3304                  ??_PIN_MANAGER_Initialize 0018  
                                 _isspace 350A                 StoreIntInEeprom@numOfByes 0026  
                __end_of_GetCpldFwVersion 238A                                   _isupper 35DC  
                        UpdateTxFreq@data 002F                                   _request 00D0  
                         GroupDAC@request 00BF                      ??_GetIntFromUartData 002E  
                  __end_of_FlashEreaseMem 2DEE                __size_of_SYSTEM_Initialize 001A  
                 ?_SwSpi_Set_Dac_Sync_Pin 0001                    __end_of_SwSpi_Data_Pin 2CA2  
                 StoreIntInEeprom@address 0025                                   _toupper 36B0  
                    end_of_initialization 2780                       GetCpldFwVersion@idx 002F  
                           ?_UpdateRxFreq 002F                                   exp@sign 009F  
                           ?_UpdateTxFreq 002F                       ?_EUSART1_Initialize 0001  
                        ??_BlinkErrorLeds 0018                              ?_EepromWrite 001B  
                     SetCpldFwVersion@idx 002E                     _SWSPI_Synth_send_bits 1FB8  
               __size_of_SwSpi_Set_CE_Pin 003C                            ?_SetMcuRunTime 0001  
                                 memset@c 001A                                   memset@n 001C  
                                 memset@p 001E                             __Lmediumconst 0000  
                         ___lldiv@divisor 001C                      __end_of_SetMcuSystem 379C  
                                 pow@sign 00AC                           ___lldiv@counter 0024  
                       ?_GroupFlashMemory 01C2                          AdcConvert@adcRes 00BA  
                      __end_of_SYNTH_REGS 0635                                ??_testLeds 002C  
                    SWSPI_send_word@datac 002B                                _rxMsgQueue 00D9  
                                 postdec1 000FE5                                   postdec2 000FDD  
                      ??_GroupFlashMemory 00BF                                   postinc0 000FEE  
                                 postinc2 000FDE                     __size_of_EUSART1_Read 0044  
                     _InitRxMessageParams 3492                               testLeds@idx 002D  
                    __size_of_DacSetValue 0074                 __size_of_FlashSampleWrite 00FA  
                  __size_of_GetMcuRunTime 00E4                       UpdateTxFreq@regData 0086  
                    ??_EUSART1_Initialize 0018     __end_of_InitSystemApplicationManagers 36B0  
  __size_of_InitSystemApplicationManagers 0016             _InitSystemApplicationManagers 369A  
                         ?_FLASH_ReadByte 0018                                   strtol@a 0061  
                                 strtol@c 0065                                   strtol@s 0024  
                _TMR0_SetInterruptHandler 379C                              ??_EepromRead 0019  
                        _StoreIntInEeprom 31F0                           _SetMcuFwVersion 3298  
                        ?_GetMcuFwVersion 0001                 __size_of_SetCpldFwVersion 0042  
                          ZeroArray@array 0020            __end_of_SwSpi_Set_Dac_Sync_Pin 3652  
                            strtol@endptr 0026             FLASH_WriteBlock@flashWrBufPtr 0021  
                      GetMcuRunTime@TxMsg 0060                      ?_InitRxMessageParams 0001  
                         ?_FlashEreaseMem 0001                       EUSART1_Write@txData 0018  
                         ?_SwSpi_Data_Pin 0018                     __end_of_ZeroBitsArray 3636  
                          ??_UpdateRxFreq 0031                            ??_UpdateTxFreq 0031  
                __end_of_DATAEE_WriteByte 3304               __end_of_SWSPI_DAC_send_bits 2BF6  
                FLASH_EraseBlock@baseAddr 0018                          ?_Make32bitsArray 0018  
                             ___ftdiv@exp 0067                              _EUSART1_Read 2FB2  
                    _CheckFlashPrecentage 2072                         FLASH_WriteBlock@i 002C  
                      __end_of_EepromRead 37B0                               ___ftmul@exp 0072  
                 ?_SwSpi_Set_Synth_Le_Pin 0018                     PLLUartInitialize@data 0018  
              __size_of_ReadIntFromEeprom 005E                ?_SetConversionResultFormat 002C  
            __end_of_INTERRUPT_Initialize 37B8                               DacInit@test 002F  
                          __end_of___ftge 24AA              InitAdcApplicationMgr@channel 0018  
                          __end_of___lmul 2C4C                            __end_of___wmul 3556  
                     GroupControlMcu@data 01C2                             __pidataCOMRAM 37B0  
                       __size_of_TMR0_ISR 0092                            _ADC_Initialize 3684  
                        _FLASH_WriteBlock 1EFC                    ?_OSCILLATOR_Initialize 0001  
                          __end_of_memset 3492                                floor@expon 0095  
                       ??_ClearMcuRunTime 0018                            __end_of_strtol 0FFC  
                     start_initialization 271C                                eval_poly@d 0087  
                              eval_poly@n 0089                                eval_poly@x 0084  
                        BlinkOkLeds@state 001B                  __size_of_TMR0_Initialize 0034  
                              ldexp@value 008E           __size_of_PIN_MANAGER_Initialize 0048  
                             __end_of_abs 34E2                     ??_InitRxMessageParams 0024  
                             __end_of_exp 0E26                               __end_of_log 15FE  
                             __end_of_pow 14DC                  AdcConvert@_adcResult_330 00B5  
                           _GetMcuRunTime 1ADA                    ?_SWSPI_Synth_send_bits 0022  
                         ??_SetMcuRunTime 0021                     __end_of_EUSART1_Write 3178  
                      GetMcuFwVersion@idx 002F                        SetMcuFwVersion@idx 002E  
                  __size_of_PLLInitialize 0050                                frexp@value 0018  
                         ___llmod@divisor 001C                     ?_CheckFlashPrecentage 0001  
                         ___llmod@counter 0020                       DATAEE_ReadByte@bAdd 0018  
                __size_of_PIN_MANAGER_IOC 0004                                 _ResetCpld 3756  
                  __size_of_SwSpi_Clk_Pin 0056                       SendAckMessage@TxMsg 0026  
          __end_of_SwSpi_Set_Synth_Le_Pin 31F0                       _keepAliveSignalUart 377A  
                       __size_of_GroupDAC 0020                          _WriteUartMessage 333A  
                       __size_of_GroupAdc 0048                    __size_of_FlashReadUart 03C2  
                                ??___ftge 001E                                  ??___lmul 0020  
                 SendAckMessage@inRequest 0024                                  ??___wmul 001C  
                       __size_of_ResetMcu 000E                      __size_of_BlinkOkLeds 005E  
                 SetAdcOperationMode@data 002C                    __end_of_ADC_Initialize 369A  
       __end_of_SetConversionResultFormat 376E                               __pdataBANK0 00ED  
                 SWSPI_DAC_send_bits@data 001A                   __end_of_SetMcuFwVersion 32CE  
                                ??_memset 001E                  __size_of_GroupControlMcu 003C  
             FLASH_EraseBlock@GIEBitValue 001C                            _SendAckMessage 2DEE  
                          _SetChannelMode 33D8                  __end_of_FLASH_EraseBlock 33D8  
                      _SendSystemStartAck 3786                  __size_of_SWSPI_send_word 009A  
                                ??_strtol 002A                            _eusart1RxCount 00D3  
                       __size_of___altoft 007A                                 _ZeroArray 35FA  
                       __size_of___awtoft 0038                         __size_of___ftpack 00AE  
                    ?_keepAliveSignalUart 0001                         __size_of___lltoft 005C  
                             __pbssCOMRAM 0031                         __size_of___lwtoft 0024  
           __size_of_EUSART1_Transmit_ISR 0038                             __pcstackBANK0 0060  
                           __pcstackBANK1 01C2                       ?_SendSystemStartAck 0001  
                            _isalpha$2951 001C                              _isdigit$2954 0019  
                          ?_GetMcuRunTime 0001                       DacSetValue@dacIndex 0089  
                          BlinkOkLeds@idx 001C                                  ?_DacInit 0001  
                   __size_of_SetMcuSystem 000A                          _SwSpi_Set_CE_Pin 3178  
            __size_of_EUSART1_Receive_ISR 002E             SWSPI_Synth_send_bits@bitArray 0060  
                    __size_of_EepromWrite 000E                     _TMR0_InterruptHandler 00FD  
                               __pnvBANK0 00FD                  __size_of_TMR0_StartTimer 0004  
                              ?_ResetCpld 0001                    _PIN_MANAGER_Initialize 2F26  
                    ??_SendSystemStartAck 002C                     _InitAdcApplicationMgr 370E  
                               __pintcode 0008                    __end_of_SendAckMessage 2E40  
                               __ptext100 3556                                 __ptext101 19F2  
                               __ptext110 3408                                 __ptext102 3228  
                               __ptext103 2A92                                 __ptext112 2268  
                               __ptext104 357A                                 __ptext113 30BE  
                               __ptext105 2120                                 __ptext114 37BC  
                               __ptext106 170A                                 __ptext115 37C0  
                               __ptext107 1EFC                                 __ptext116 3260  
                               __ptext108 33A4                                 __ptext117 3438  
                               __ptext109 3748                                  ?___ftadd 0078  
                               __ptext118 0000                                  ?___ftdiv 0029  
                  __end_of_SetChannelMode 3408                                  ?___ftneg 0018  
                                ?___lldiv 0018                                  ?___ftmul 0069  
                                ?___llmod 0018                                  ?___ftsub 0084  
                                ?___fttol 0078                          _FlashSampleWrite 170A  
                                ?___lwmod 0001                           ?_ADC_Initialize 0001  
                    __end_of_UpdateRxFreq 2D9C                         __size_of_testLeds 006A  
                           _PLLInitialize 2E40             SetConversionResultFormat@data 002C  
                    __end_of_UpdateTxFreq 2D4A               __size_of_keepAliveSignalLed 0018  
            ??_INTERRUPT_InterruptManager 0006                          __CFG_PRICLKEN$ON 000000  
                              ?_ZeroArray 0020                               __smallconst 0600  
                   ??_keepAliveSignalUart 002C                                  _BAUDCON1 000FB8  
                           _SwSpi_Clk_Pin 2CA2                                  ?_isalpha 0001  
                                ?_isdigit 0001                                 _eval_poly 1CA0  
                     BlinkErrorLeds@state 001B                           _TimerOneSecFlag 00D8  
                                ?_isspace 0001                          _SetCpldFwVersion 303A  
                            _SetMcuSystem 3792                                  ?_isupper 0001  
                           _FlashReadUart 0676                         _PLLUartInitialize 37C4  
                       ?_GetCpldFwVersion 0001              __size_of_SetAdcOperationMode 000C  
                          __size_of_make8 005C                            __size_of_floor 00E2  
                          __size_of_ldexp 00C6                            __size_of_frexp 0090  
                      ?_PLLUartInitialize 0018                  __size_of_DATAEE_ReadByte 0014  
                                ?_toupper 0001                          _conversionFormat 00D5  
                      ??_GetCpldFwVersion 0024                      _INTERRUPT_Initialize 37B4  
          FLASH_WriteBlock@blockStartAddr 0027               __size_of_FlashReadCondition 010C  
                       ??_TMR0_Initialize 001A                    ??_CheckFlashPrecentage 0078  
                          ___wmul@product 001C                                  _LATAbits 000F89  
                                _LATBbits 000F8A                                  _LATCbits 000F8B  
                                _LATDbits 000F8C                  __end_of_StoreIntInEeprom 3228  
                     ??_PLLUartInitialize 001A            FlashReadUart@numOfSampleToRead 002C  
                                _PIE1bits 000F9D                                  _PIE2bits 000FA0  
                   _GroupStatusAndVersion 2AEE                         _GroupSynthesizers 29DA  
     __size_of_INTERRUPT_InterruptManager 00D4                ??_TMR0_SetInterruptHandler 001A  
                    Make32bitsArray@array 0018                                  _PIR1bits 000F9E  
                        ??_FLASH_ReadByte 001C                                  _PIR2bits 000FA1  
                               _rxMsgData 01AE                                  i2u516_40 30D8  
                     SWSPI_send_word@data 0026                        ?_GroupSynthesizers 01C2  
                                _RCONbits 000FD0                          __CFG_WDTPS$16384 000000  
                               make8@data 0018                                  _TMR0_ISR 2268  
                         ?_SendAckMessage 0024                           ?_SetChannelMode 002C  
                          ?_PLLInitialize 0001                         ??_PIN_MANAGER_IOC 0001  
                        ?_SetMcuFwVersion 002C                       ??_GroupSynthesizers 0031  
                  GetIntFromUartData@data 0066                   SWSPI_send_word@dataSize 002A  
                              _ADCON0bits 000FC2                  __size_of_readUartMessage 01FC  
                       ___wmul@multiplier 0018                            ?_SwSpi_Clk_Pin 0018  
                        ??_FlashEreaseMem 002C                 __end_of_PLLUartInitialize 37C6  
                      __end_of_channelArr 063C                          ??_SwSpi_Data_Pin 0019  
               __size_of_GroupFlashMemory 0044                                ?_eval_poly 0084  
                          ?_FlashReadUart 002C                         ??_GroupControlMcu 0031  
                         ??_GetMcuRunTime 0025                     DATAEE_WriteByte@bData 0018  
                            _isspace$2957 0019                         ??_SWSPI_send_word 002B  
                   GetCpldFwVersion@TxMsg 0026               __size_of_GetIntFromUartData 00C0  
                       ___lmul@multiplier 0018                   FlashReadCondition@TxMsg 0028  
                             _INTCON2bits 000FF1                                 copy_data0 2730  
                               copy_data1 2750                     ?_INTERRUPT_Initialize 0001  
                        __size_of_DacInit 0080                         ?_DATAEE_WriteByte 0018  
               __end_of_GroupSynthesizers 2A36                     EUSART1_Read@readValue 0019  
                __end_of_FLASH_WriteBlock 1FB8                                  _GroupDAC 359E  
                      ??_DATAEE_WriteByte 0019                                  _GroupAdc 2EDE  
                               frexp@eptr 001B                                _EECON1bits 000FA6  
                             ??_ResetCpld 002C                                  __Hrparam 0000  
                  ?_InitAdcApplicationMgr 0001                                  _ResetMcu 372C  
                           ??_DacSetValue 0086                               _readAddress 00F9  
                                __Lrparam 0000                         _ADC_GetConversion 3408  
                     FlashReadUart@offset 00BD                           _ClearMcuRunTime 36D8  
                       __CFG_P2BMX$PORTD2 000000               ??_SetConversionResultFormat 002E  
                 ??_OSCILLATOR_Initialize 0018                        ?_ADC_GetConversion 0018  
                       ??_TMR0_StartTimer 0018                          __size_of___ftadd 01AE  
                        __size_of___ftdiv 00E8                      _numOfValidateSamples 0031  
                        __size_of___ftneg 0024                          __size_of___lldiv 0082  
                                ___altoft 262E                          __size_of___ftmul 00F6  
                        __size_of___llmod 0066                          __size_of___ftsub 0042  
                        __size_of___fttol 00F8               __size_of_EUSART1_Initialize 0036  
                        __size_of___lwmod 0042                           GroupAdc@request 00BF  
                                ___awtoft 3228                             crc8@dataArray 0018  
                                ___ftpack 2120                          _numOfReadSamples 003E  
                                ___lltoft 2A92                         _FLASH_IsWriteDone 3748  
                     WriteUartMessage@idx 001E                                  ___lwtoft 357A  
                             ??_ZeroArray 0024                  GetMcuRunTime@tempRunTime 0069  
                     ??_ADC_GetConversion 001A                                  _exp$3237 009A  
                            _isupper$2960 0019                        ?_FLASH_IsWriteDone 0001  
                                _dataSize 00CF                     SwSpi_Clk_Pin@cPinMode 0018  
                __end_of_WriteUartMessage 3370                          __size_of_isalpha 0028  
                                _crcGiven 00CC                          __size_of_isdigit 001E  
                 ??_SWSPI_Synth_send_bits 0026                    SwSpi_Data_Pin@cPinMode 0018  
                        __size_of_isspace 0026                        DacSetValue@regData 008A  
                                __ptext10 2D4A                                  __ptext11 37C4  
                                __ptext20 36EC                                  __ptext12 3298  
                                __ptext21 15FE                                  __ptext13 303A  
                                __ptext30 350A                                  __ptext22 2D9C  
                                __ptext14 1ADA                                  __ptext31 35BE  
                                __ptext23 26A8                                  __ptext15 24AA  
                                __ptext40 376E                                  __ptext32 34E2  
                                __ptext24 31F0                                  __ptext16 252C  
                                __ptext41 2FB2                                  __ptext33 35DC  
                                __ptext25 371E                                  __ptext17 22FA  
                                __ptext50 37B4                                  __ptext42 377A  
                                __ptext34 2BF6                                  __ptext26 32CE  
                                __ptext18 0676                                  __ptext51 3304  
                                __ptext43 366C                                  __ptext35 278E  
                                __ptext27 1E3C                                  __ptext19 34BA  
                                __ptext60 313C                                  __ptext52 3684  
                                __ptext44 3792                                  __ptext36 372C  
                                __ptext28 0E26                                  __ptext61 369A  
                                __ptext53 2FF6                                  __ptext45 3652  
                                __ptext37 3756                                  __ptext29 36B0  
                                __ptext70 3636                                  __ptext62 37B8  
                                __ptext54 27F8                                  __ptext46 3370  
                                __ptext38 3762                                  __ptext71 1FB8  
                                __ptext63 2E40                                  __ptext55 3786  
                                __ptext47 379C                                  __ptext39 33D8  
                                __ptext80 36C4                                  __ptext72 3618  
                                __ptext64 3178                                  __ptext56 2DEE  
                                __ptext48 2F26                                  __ptext81 36D8  
                                __ptext73 3466                                  __ptext65 370E  
                                __ptext57 2E90                                  __ptext49 373A  
                                __ptext90 1BBE                                  __ptext82 2072  
                                __ptext74 2B46                                  __ptext66 25AE  
                                __ptext58 35FA                                  __ptext91 238A  
                                __ptext83 291E                                  __ptext75 2B9E  
                                __ptext67 21CE                                  __ptext59 333A  
                                __ptext92 1804                                  __ptext84 297C  
                                __ptext76 2C4C                                  __ptext68 2A36  
                                __ptext93 241A                                  __ptext85 0FFC  
                                __ptext77 2CA2                                  __ptext69 31B4  
                                __ptext94 262E                                  __ptext86 1360  
                                __ptext78 28C0                                  __ptext95 1CA0  
                                __ptext87 14DC                                  __ptext79 37A6  
                                __ptext96 3530                                  __ptext88 0C34  
                                __ptext97 18FC                                  __ptext89 1D76  
                                __ptext98 307C                                  __ptext99 11B2  
                        __size_of_isupper 001E              SWSPI_Synth_send_bits@phrType 0085  
                SwSpi_Set_CE_Pin@cPinMode 0018                                  _pow$3235 00A6  
                                _pow$3236 00A9                       ??_FLASH_IsWriteDone 0018  
                     GetIntFromUartData@c 0078               DATAEE_WriteByte@GIEBitValue 001A  
                        __size_of_toupper 0014                  __size_of_GetMcuFwVersion 0082  
                           __size_of_crc8 004E                             __size_of_main 0062  
                  ?_GroupStatusAndVersion 01C2                                  _msgCount 00CB  
            _TMR0_DefaultInterruptHandler 000000                         ??_DATAEE_ReadByte 0018  
               __end_of_ADC_GetConversion 3438              __size_of_SWSPI_DAC_send_bits 0058  
                   __size_of_UpdateRxFreq 0052                       Make32bitsArray@data 001A  
                   __size_of_UpdateTxFreq 0052                        SWSPI_send_word@idx 002C  
                             _groupsArray 00ED                           ??_PLLInitialize 002F  
                                _testLeds 278E                   __size_of_BlinkErrorLeds 005E  
                                int$flags 0048                  __size_of_Make32bitsArray 0058  
                              strtol@base 0028                                strtol@sign 0060  
               __end_of_FLASH_IsWriteDone 3756        __end_of_INTERRUPT_InterruptManager 00DC  
              _INTERRUPT_InterruptManager 0008                    __size_of_ZeroBitsArray 001E  
                         EepromWrite@data 001B                           ??_SwSpi_Clk_Pin 0019  
                     __end_of_DacSetValue 271C                       _EUSART1_Receive_ISR 3438  
                __end_of_SwSpi_Set_CE_Pin 31B4                         ?_FLASH_EraseBlock 0018  
             __end_of_InitRxMessageParams 34BA                                  exp@coeff 063C  
                              _MEMORY_ISR 37C0                           ??_FlashReadUart 0060  
                                log@coeff 065A                __size_of_PLLUartInitialize 0002  
                  SWSPI_send_word@phrType 002E                      SetCpldFwVersion@data 002C  
                      ??_FLASH_EraseBlock 001C                                _INTCONbits 000FF2  
                             ??_eval_poly 002F                               _sampleArray 016E  
                             _sampleCount 00C7                                  isalpha@c 001D  
                                isdigit@c 001A                    ??_INTERRUPT_Initialize 0018  
                                memset@p1 0018                         ??_readUartMessage 01C4  
               _SetConversionResultFormat 3762                  __end_of_FlashSampleWrite 1804  
                                intlevel2 0000                              _UpdateRxFreq 2D4A  
                            _UpdateTxFreq 2CF8                      ?_EUSART1_Receive_ISR 0001  
                   __end_of_SetMcuRunTime 303A                          ___lwmod@dividend 0001  
              __size_of_GroupSynthesizers 005C                                  isspace@c 001A  
                        ___lldiv@dividend 0018                   ?_PIN_MANAGER_Initialize 0001  
                 __end_of_ClearMcuRunTime 36EC                                _RCSTA1bits 000FAB  
                                isupper@c 001A                  ReadIntFromEeprom@address 0026  
            __end_of_EUSART1_Transmit_ISR 3298                             ??_BlinkOkLeds 0018  
                        ??_ADC_Initialize 0018                  __end_of_SetCpldFwVersion 307C  
                      Make32bitsArray@idx 0020                         _TimerSamplingFlag 00D7  
                           AdcConvert@idx 00BC                       _SetAdcOperationMode 376E  
                           _isReWriteDone 003C                      SwSpi_Clk_Pin@phrType 0019  
                   SwSpi_Data_Pin@phrType 0019                   SwSpi_Set_CE_Pin@phrType 0019  
                  __size_of_EUSART1_Write 003C                  ??_SwSpi_Set_Dac_Sync_Pin 0018  
                       EepromRead@address 0019                          ___lldiv@quotient 0020  
                        _GroupFlashMemory 2F6E                           ___lwmod@divisor 0003  
                         _TMR0_Initialize 3370                           ___lwmod@counter 0005  
                                toupper@c 0018                ReadIntFromEeprom@numOfByes 001A  
                       __CFG_T3CMX$PORTC0 000000                      ?_SetAdcOperationMode 002C  
                 ReadIntFromEeprom@retVal 0022                             ??_EepromWrite 001C  
                           _ZeroBitsArray 3618                                _AdcConvert 0FFC  
                   ??_EUSART1_Receive_ISR 0001            __end_of_PIN_MANAGER_Initialize 2F6E  
            GetIntFromUartData@dataRegArr 006A                         __CFG_FOSC$INTIO67 000000  
                         _PIN_MANAGER_IOC 37BC                         ?_StoreIntInEeprom 0021  
                        ??_SendAckMessage 0025                __size_of_ADC_GetConversion 0030  
                        ??_SetChannelMode 002E                 __size_of_GetCpldFwVersion 0090  
                      ??_StoreIntInEeprom 0028                               _DacSetValue 26A8  



Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Feb 28 17:38:21 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1,group=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1,group=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1,group=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1,group=1
   105                           	psect	text86,global,reloc=2,class=CODE,delta=1,group=1
   106                           	psect	text87,global,reloc=2,class=CODE,delta=1,group=1
   107                           	psect	text88,global,reloc=2,class=CODE,delta=1,group=1
   108                           	psect	text89,global,reloc=2,class=CODE,delta=1,group=1
   109                           	psect	text90,global,reloc=2,class=CODE,delta=1,group=1
   110                           	psect	text91,global,reloc=2,class=CODE,delta=1,group=1
   111                           	psect	text92,global,reloc=2,class=CODE,delta=1,group=1
   112                           	psect	text93,global,reloc=2,class=CODE,delta=1,group=1
   113                           	psect	text94,global,reloc=2,class=CODE,delta=1,group=1
   114                           	psect	text95,global,reloc=2,class=CODE,delta=1,group=1
   115                           	psect	text96,global,reloc=2,class=CODE,delta=1,group=1
   116                           	psect	text97,global,reloc=2,class=CODE,delta=1,group=1
   117                           	psect	text98,global,reloc=2,class=CODE,delta=1,group=1
   118                           	psect	text99,global,reloc=2,class=CODE,delta=1,group=1
   119                           	psect	text100,global,reloc=2,class=CODE,delta=1,group=1
   120                           	psect	text101,global,reloc=2,class=CODE,delta=1,group=1
   121                           	psect	text102,global,reloc=2,class=CODE,delta=1
   122                           	psect	text103,global,reloc=2,class=CODE,delta=1
   123                           	psect	text104,global,reloc=2,class=CODE,delta=1
   124                           	psect	text105,global,reloc=2,class=CODE,delta=1
   125                           	psect	text106,global,reloc=2,class=CODE,delta=1
   126                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   127                           	psect	text108,global,reloc=2,class=CODE,delta=1
   128                           	psect	text109,global,reloc=2,class=CODE,delta=1,group=1
   129                           	psect	text110,global,reloc=2,class=CODE,delta=1
   130                           	psect	text111,global,reloc=2,class=CODE,delta=1
   131                           	psect	text112,global,reloc=2,class=CODE,delta=1
   132                           	psect	text113,global,reloc=2,class=CODE,delta=1
   133                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   134                           	psect	text114,global,reloc=2,class=CODE,delta=1
   135                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   136                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   137  0000                     
   138                           ; Version 1.45
   139                           ; Generated 16/11/2017 GMT
   140                           ; 
   141                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   142                           ; All rights reserved.
   143                           ; 
   144                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   145                           ; 
   146                           ; Redistribution and use in source and binary forms, with or without modification, are
   147                           ; permitted provided that the following conditions are met:
   148                           ; 
   149                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   150                           ;        conditions and the following disclaimer.
   151                           ; 
   152                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   153                           ;        of conditions and the following disclaimer in the documentation and/or other
   154                           ;        materials provided with the distribution.
   155                           ; 
   156                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   157                           ;        software without specific prior written permission.
   158                           ; 
   159                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   160                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   161                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   162                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   163                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   164                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   165                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   166                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   167                           ; 
   168                           ; 
   169                           ; Code-generator required, PIC18F45K22 Definitions
   170                           ; 
   171                           ; SFR Addresses
   172  0000                     
   173 ;; Function _TMR0_DefaultInterruptHandler is unused but had its address taken
   174  0000                     
   175                           	psect	idataCOMRAM
   176  003752                     __pidataCOMRAM:
   177                           	opt stack 0
   178                           
   179                           ;initializer for _writeAddress
   180  003752  4000               	dw	16384
   181  003754  0000               	dw	0
   182                           
   183                           	psect	idataBANK0
   184  0036A2                     __pidataBANK0:
   185                           	opt stack 0
   186                           
   187                           ;initializer for _groupsArray
   188  0036A2  9A                 	db	low _GroupControlMcu
   189  0036A3  30                 	db	high _GroupControlMcu
   190  0036A4  50                 	db	low _GroupStatusAndVersion
   191  0036A5  2B                 	db	high _GroupStatusAndVersion
   192  0036A6  F4                 	db	low _GroupAdc
   193  0036A7  2D                 	db	high _GroupAdc
   194  0036A8  3C                 	db	low _GroupSynthesizers
   195  0036A9  2A                 	db	high _GroupSynthesizers
   196  0036AA  84                 	db	low _GroupFlashMemory
   197  0036AB  2E                 	db	high _GroupFlashMemory
   198  0036AC  5C                 	db	low _GroupDAC
   199  0036AD  35                 	db	high _GroupDAC
   200                           
   201                           ;initializer for _readAddress
   202  0036AE  4000               	dw	16384
   203  0036B0  0000               	dw	0
   204                           
   205                           	psect	smallconst
   206  000600                     __psmallconst:
   207                           	opt stack 0
   208  000600  00                 	db	0
   209  000601                     _PLL_INIT_REGISTERS:
   210                           	opt stack 0
   211  000601  041C               	dw	1052
   212  000603  0001               	dw	1
   213  000605  300B               	dw	12299
   214  000607  0061               	dw	97
   215  000609  323A               	dw	12858
   216  00060B  00C0               	dw	192
   217  00060D  BCC9               	dw	48329
   218  00060F  2221               	dw	8737
   219  000611  0428               	dw	1064
   220  000613  102D               	dw	4141
   221  000615  00E7               	dw	231
   222  000617  1200               	dw	4608
   223  000619  6076               	dw	24694
   224  00061B  3505               	dw	13573
   225  00061D  0025               	dw	37
   226  00061F  0080               	dw	128
   227  000621  9B84               	dw	39812
   228  000623  3400               	dw	13312
   229  000625  0003               	dw	3
   230  000627  0000               	dw	0
   231  000629  0012               	dw	18
   232  00062B  0000               	dw	0
   233  00062D  0001               	dw	1
   234  00062F  0600               	dw	1536
   235  000631  0340               	dw	832
   236  000633  0020               	dw	32
   237  000635                     __end_of_PLL_INIT_REGISTERS:
   238                           	opt stack 0
   239  000635                     _channelArr:
   240                           	opt stack 0
   241  000635  07                 	db	7
   242  000636  06                 	db	6
   243  000637  05                 	db	5
   244  000638  04                 	db	4
   245  000639  19                 	db	25
   246  00063A  0A                 	db	10
   247  00063B  0D                 	db	13
   248  00063C                     __end_of_channelArr:
   249                           	opt stack 0
   250  00063C                     exp@coeff:
   251                           	opt stack 0
   252  00063C  00                 	db	0
   253  00063D  80                 	db	128
   254  00063E  3F                 	db	63
   255  00063F  72                 	db	114
   256  000640  31                 	db	49
   257  000641  3F                 	db	63
   258  000642  FE                 	db	254
   259  000643  75                 	db	117
   260  000644  3E                 	db	62
   261  000645  58                 	db	88
   262  000646  63                 	db	99
   263  000647  3D                 	db	61
   264  000648  95                 	db	149
   265  000649  1D                 	db	29
   266  00064A  3C                 	db	60
   267  00064B  C5                 	db	197
   268  00064C  AE                 	db	174
   269  00064D  3A                 	db	58
   270  00064E  79                 	db	121
   271  00064F  21                 	db	33
   272  000650  39                 	db	57
   273  000651  94                 	db	148
   274  000652  80                 	db	128
   275  000653  37                 	db	55
   276  000654  93                 	db	147
   277  000655  A7                 	db	167
   278  000656  35                 	db	53
   279  000657  56                 	db	86
   280  000658  15                 	db	21
   281  000659  34                 	db	52
   282  00065A                     __end_ofexp@coeff:
   283                           	opt stack 0
   284  00065A                     log@coeff:
   285                           	opt stack 0
   286  00065A  00                 	db	0
   287  00065B  00                 	db	0
   288  00065C  00                 	db	0
   289  00065D  00                 	db	0
   290  00065E  80                 	db	128
   291  00065F  3F                 	db	63
   292  000660  F0                 	db	240
   293  000661  FF                 	db	255
   294  000662  BE                 	db	190
   295  000663  E2                 	db	226
   296  000664  A9                 	db	169
   297  000665  3E                 	db	62
   298  000666  83                 	db	131
   299  000667  76                 	db	118
   300  000668  BE                 	db	190
   301  000669  AE                 	db	174
   302  00066A  2B                 	db	43
   303  00066B  3E                 	db	62
   304  00066C  3C                 	db	60
   305  00066D  C3                 	db	195
   306  00066E  BD                 	db	189
   307  00066F  D2                 	db	210
   308  000670  13                 	db	19
   309  000671  3D                 	db	61
   310  000672  78                 	db	120
   311  000673  D3                 	db	211
   312  000674  BB                 	db	187
   313  000675                     __end_oflog@coeff:
   314                           	opt stack 0
   315  000675  00                 	db	0	; dummy byte at the end
   316  0000                     
   317                           	psect	nvCOMRAM
   318  000046                     __pnvCOMRAM:
   319                           	opt stack 0
   320  000046                     _timer0ReloadVal:
   321                           	opt stack 0
   322  000046                     	ds	2
   323                           
   324                           	psect	nvBANK0
   325  0000FB                     __pnvBANK0:
   326                           	opt stack 0
   327  0000FB                     _TMR0_InterruptHandler:
   328                           	opt stack 0
   329  0000FB                     	ds	2
   330  0000FD                     _cnt:
   331                           	opt stack 0
   332  0000FD                     	ds	2
   333  0000FF                     _eusart1TxBufferRemaining:
   334                           	opt stack 0
   335  0000FF                     	ds	1
   336  0000                     _ANSELE	set	3900
   337  0000                     _ANSELB	set	3897
   338  0000                     _ANSELC	set	3898
   339  0000                     _ANSELD	set	3899
   340  0000                     _ANSELA	set	3896
   341  0000                     _ADCON0bits	set	4034
   342  0000                     _ADRESH	set	4036
   343  0000                     _ADRESL	set	4035
   344  0000                     _ADCON2	set	4032
   345  0000                     _ADCON1	set	4033
   346  0000                     _ADCON0	set	4034
   347  0000                     _T0CONbits	set	4053
   348  0000                     _T0CON	set	4053
   349  0000                     _TMR0L	set	4054
   350  0000                     _TMR0H	set	4055
   351  0000                     _EEDATA	set	4008
   352  0000                     _EEADR	set	4009
   353  0000                     _EECON2	set	4007
   354  0000                     _EECON1bits	set	4006
   355  0000                     _TABLAT	set	4085
   356  0000                     _TBLPTRL	set	4086
   357  0000                     _TBLPTRH	set	4087
   358  0000                     _TBLPTRU	set	4088
   359  0000                     _INTCON2bits	set	4081
   360  0000                     _WPUB	set	3937
   361  0000                     _TRISC	set	3988
   362  0000                     _TRISB	set	3987
   363  0000                     _TRISE	set	3990
   364  0000                     _LATC	set	3979
   365  0000                     _LATB	set	3978
   366  0000                     _LATE	set	3981
   367  0000                     _RCREG1	set	4014
   368  0000                     _RCSTA1bits	set	4011
   369  0000                     _TXREG1	set	4013
   370  0000                     _SPBRGH1	set	4016
   371  0000                     _SPBRG1	set	4015
   372  0000                     _TXSTA1	set	4012
   373  0000                     _RCSTA1	set	4011
   374  0000                     _BAUDCON1	set	4024
   375  0000                     _PIR1bits	set	3998
   376  0000                     _PIE1bits	set	3997
   377  0000                     _PIR2bits	set	4001
   378  0000                     _PIE2bits	set	4000
   379  0000                     _RCONbits	set	4048
   380  0000                     _OSCTUNE	set	3995
   381  0000                     _OSCCON2	set	4050
   382  0000                     _OSCCON	set	4051
   383  0000                     _LATAbits	set	3977
   384  0000                     _LATDbits	set	3980
   385  0000                     _INTCONbits	set	4082
   386  0000                     _IOCB	set	3938
   387  0000                     _PORTD	set	3971
   388  0000                     _LATD	set	3980
   389  0000                     _TRISD	set	3989
   390  0000                     _LATA	set	3977
   391  0000                     _TRISA	set	3986
   392  0000                     _LATCbits	set	3979
   393  0000                     _LATBbits	set	3978
   394                           
   395                           ; #config settings
   396  0000                     
   397                           	psect	cinit
   398  002772                     __pcinit:
   399                           	opt stack 0
   400  002772                     start_initialization:
   401                           	opt stack 0
   402  002772                     __initialization:
   403                           	opt stack 0
   404                           
   405                           ; Initialize objects allocated to BANK0 (16 bytes)
   406                           ; load TBLPTR registers with __pidataBANK0
   407  002772  0EA2               	movlw	low __pidataBANK0
   408  002774  6EF6               	movwf	tblptrl,c
   409  002776  0E36               	movlw	high __pidataBANK0
   410  002778  6EF7               	movwf	tblptrh,c
   411  00277A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   412  00277C  6EF8               	movwf	tblptru,c
   413  00277E  EE00  F0EB         	lfsr	0,__pdataBANK0
   414  002782  EE10 F010          	lfsr	1,16
   415  002786                     copy_data0:
   416  002786  0009               	tblrd		*+
   417  002788  CFF5 FFEE          	movff	tablat,postinc0
   418  00278C  50E5               	movf	postdec1,w,c
   419  00278E  50E1               	movf	fsr1l,w,c
   420  002790  E1FA               	bnz	copy_data0
   421                           
   422                           ; Initialize objects allocated to COMRAM (4 bytes)
   423                           ; load TBLPTR registers with __pidataCOMRAM
   424  002792  0E52               	movlw	low __pidataCOMRAM
   425  002794  6EF6               	movwf	tblptrl,c
   426  002796  0E37               	movlw	high __pidataCOMRAM
   427  002798  6EF7               	movwf	tblptrh,c
   428  00279A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   429  00279C  6EF8               	movwf	tblptru,c
   430  00279E  EE00  F042         	lfsr	0,__pdataCOMRAM
   431  0027A2  EE10 F004          	lfsr	1,4
   432  0027A6                     copy_data1:
   433  0027A6  0009               	tblrd		*+
   434  0027A8  CFF5 FFEE          	movff	tablat,postinc0
   435  0027AC  50E5               	movf	postdec1,w,c
   436  0027AE  50E1               	movf	fsr1l,w,c
   437  0027B0  E1FA               	bnz	copy_data1
   438                           
   439                           ; Clear objects allocated to BANK1 (194 bytes)
   440  0027B2  EE01  F000         	lfsr	0,__pbssBANK1
   441  0027B6  0EC2               	movlw	194
   442  0027B8                     clear_0:
   443  0027B8  6AEE               	clrf	postinc0,c
   444  0027BA  06E8               	decf	wreg,f,c
   445  0027BC  E1FD               	bnz	clear_0
   446                           
   447                           ; Clear objects allocated to BANK0 (43 bytes)
   448  0027BE  EE00  F0C0         	lfsr	0,__pbssBANK0
   449  0027C2  0E2B               	movlw	43
   450  0027C4                     clear_1:
   451  0027C4  6AEE               	clrf	postinc0,c
   452  0027C6  06E8               	decf	wreg,f,c
   453  0027C8  E1FD               	bnz	clear_1
   454                           
   455                           ; Clear objects allocated to COMRAM (17 bytes)
   456  0027CA  EE00  F031         	lfsr	0,__pbssCOMRAM
   457  0027CE  0E11               	movlw	17
   458  0027D0                     clear_2:
   459  0027D0  6AEE               	clrf	postinc0,c
   460  0027D2  06E8               	decf	wreg,f,c
   461  0027D4  E1FD               	bnz	clear_2
   462  0027D6                     end_of_initialization:
   463                           	opt stack 0
   464  0027D6                     __end_of__initialization:
   465                           	opt stack 0
   466  0027D6  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   467  0027D8  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   468  0027DA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   469  0027DC  6EF8               	movwf	tblptru,c
   470  0027DE  0100               	movlb	0
   471  0027E0  EF8F  F014         	goto	_main	;jump to C main() function
   472                           tblptru	equ	0xFF8
   473                           tblptrh	equ	0xFF7
   474                           tblptrl	equ	0xFF6
   475                           tablat	equ	0xFF5
   476                           postinc0	equ	0xFEE
   477                           wreg	equ	0xFE8
   478                           postdec1	equ	0xFE5
   479                           fsr1l	equ	0xFE1
   480                           
   481                           	psect	bssCOMRAM
   482  000031                     __pbssCOMRAM:
   483                           	opt stack 0
   484  000031                     _numOfValidateSamples:
   485                           	opt stack 0
   486  000031                     	ds	4
   487  000035                     TMR0_ISR@CountCallBack:
   488                           	opt stack 0
   489  000035                     	ds	2
   490  000037                     _eusart1RxTail:
   491                           	opt stack 0
   492  000037                     	ds	1
   493  000038                     _eusart1RxHead:
   494                           	opt stack 0
   495  000038                     	ds	1
   496  000039                     _eusart1TxTail:
   497                           	opt stack 0
   498  000039                     	ds	1
   499  00003A                     _eusart1TxHead:
   500                           	opt stack 0
   501  00003A                     	ds	1
   502  00003B                     _isReWriteDone:
   503                           	opt stack 0
   504  00003B                     	ds	1
   505  00003C                     _adcSampleMode:
   506                           	opt stack 0
   507  00003C                     	ds	1
   508  00003D                     _conversionFormat:
   509                           	opt stack 0
   510  00003D                     	ds	1
   511  00003E                     _numOfReadSamples:
   512                           	opt stack 0
   513  00003E                     	ds	4
   514                           tblptru	equ	0xFF8
   515                           tblptrh	equ	0xFF7
   516                           tblptrl	equ	0xFF6
   517                           tablat	equ	0xFF5
   518                           postinc0	equ	0xFEE
   519                           wreg	equ	0xFE8
   520                           postdec1	equ	0xFE5
   521                           fsr1l	equ	0xFE1
   522                           
   523                           	psect	dataCOMRAM
   524  000042                     __pdataCOMRAM:
   525                           	opt stack 0
   526  000042                     _writeAddress:
   527                           	opt stack 0
   528  000042                     	ds	4
   529                           tblptru	equ	0xFF8
   530                           tblptrh	equ	0xFF7
   531                           tblptrl	equ	0xFF6
   532                           tablat	equ	0xFF5
   533                           postinc0	equ	0xFEE
   534                           wreg	equ	0xFE8
   535                           postdec1	equ	0xFE5
   536                           fsr1l	equ	0xFE1
   537                           
   538                           	psect	bssBANK0
   539  0000C0                     __pbssBANK0:
   540                           	opt stack 0
   541  0000C0                     _mcuRunTimeIn5SecTicks:
   542                           	opt stack 0
   543  0000C0                     	ds	4
   544  0000C4                     _errno:
   545                           	opt stack 0
   546  0000C4                     	ds	2
   547  0000C6                     _sampleCount:
   548                           	opt stack 0
   549  0000C6                     	ds	2
   550  0000C8                     _count:
   551                           	opt stack 0
   552  0000C8                     	ds	2
   553  0000CA                     _msgCount:
   554                           	opt stack 0
   555  0000CA                     	ds	1
   556  0000CB                     _crcGiven:
   557                           	opt stack 0
   558  0000CB                     	ds	1
   559  0000CC                     _crcCalc:
   560                           	opt stack 0
   561  0000CC                     	ds	1
   562  0000CD                     _data:
   563                           	opt stack 0
   564  0000CD                     	ds	1
   565  0000CE                     _dataSize:
   566                           	opt stack 0
   567  0000CE                     	ds	1
   568  0000CF                     _request:
   569                           	opt stack 0
   570  0000CF                     	ds	1
   571  0000D0                     _group:
   572                           	opt stack 0
   573  0000D0                     	ds	1
   574  0000D1                     _cState:
   575                           	opt stack 0
   576  0000D1                     	ds	1
   577  0000D2                     _eusart1RxCount:
   578                           	opt stack 0
   579  0000D2                     	ds	1
   580  0000D3                     _channel:
   581                           	opt stack 0
   582  0000D3                     	ds	1
   583  0000D4                     _TimerKeepAliveFlag:
   584                           	opt stack 0
   585  0000D4                     	ds	1
   586  0000D5                     _TimerSamplingFlag:
   587                           	opt stack 0
   588  0000D5                     	ds	1
   589  0000D6                     _TimerOneSecFlag:
   590                           	opt stack 0
   591  0000D6                     	ds	1
   592  0000D7                     _rxMsgQueue:
   593                           	opt stack 0
   594  0000D7                     	ds	20
   595                           tblptru	equ	0xFF8
   596                           tblptrh	equ	0xFF7
   597                           tblptrl	equ	0xFF6
   598                           tablat	equ	0xFF5
   599                           postinc0	equ	0xFEE
   600                           wreg	equ	0xFE8
   601                           postdec1	equ	0xFE5
   602                           fsr1l	equ	0xFE1
   603                           
   604                           	psect	dataBANK0
   605  0000EB                     __pdataBANK0:
   606                           	opt stack 0
   607  0000EB                     _groupsArray:
   608                           	opt stack 0
   609  0000EB                     	ds	12
   610  0000F7                     _readAddress:
   611                           	opt stack 0
   612  0000F7                     	ds	4
   613                           tblptru	equ	0xFF8
   614                           tblptrh	equ	0xFF7
   615                           tblptrl	equ	0xFF6
   616                           tablat	equ	0xFF5
   617                           postinc0	equ	0xFEE
   618                           wreg	equ	0xFE8
   619                           postdec1	equ	0xFE5
   620                           fsr1l	equ	0xFE1
   621                           
   622                           	psect	bssBANK1
   623  000100                     __pbssBANK1:
   624                           	opt stack 0
   625  000100                     _eusart1TxBuffer:
   626                           	opt stack 0
   627  000100                     	ds	70
   628  000146                     _eusart1RxBuffer:
   629                           	opt stack 0
   630  000146                     	ds	40
   631  00016E                     _sampleArray:
   632                           	opt stack 0
   633  00016E                     	ds	64
   634  0001AE                     _rxMsgData:
   635                           	opt stack 0
   636  0001AE                     	ds	20
   637                           tblptru	equ	0xFF8
   638                           tblptrh	equ	0xFF7
   639                           tblptrl	equ	0xFF6
   640                           tablat	equ	0xFF5
   641                           postinc0	equ	0xFEE
   642                           wreg	equ	0xFE8
   643                           postdec1	equ	0xFE5
   644                           fsr1l	equ	0xFE1
   645                           
   646                           	psect	cstackBANK1
   647  0001C2                     __pcstackBANK1:
   648                           	opt stack 0
   649  0001C2                     GroupStatusAndVersion@data:
   650                           	opt stack 0
   651  0001C2                     GroupAdc@data:
   652                           	opt stack 0
   653  0001C2                     GroupSynthesizers@data:
   654                           	opt stack 0
   655  0001C2                     GroupFlashMemory@data:
   656                           	opt stack 0
   657  0001C2                     GroupDAC@data:
   658                           	opt stack 0
   659  0001C2                     
   660                           ; 3 bytes @ 0x0
   661  0001C2                     	ds	2
   662  0001C4                     GroupFlashMemory@request:
   663                           	opt stack 0
   664                           
   665                           ; 1 bytes @ 0x2
   666  0001C4                     	ds	1
   667  0001C5                     ??_readUartMessage:
   668                           
   669                           ; 1 bytes @ 0x3
   670  0001C5                     	ds	4
   671  0001C9                     readUartMessage@idx:
   672                           	opt stack 0
   673                           
   674                           ; 2 bytes @ 0x7
   675  0001C9                     	ds	2
   676  0001CB                     readUartMessage@chRec:
   677                           	opt stack 0
   678                           
   679                           ; 1 bytes @ 0x9
   680  0001CB                     	ds	1
   681                           tblptru	equ	0xFF8
   682                           tblptrh	equ	0xFF7
   683                           tblptrl	equ	0xFF6
   684                           tablat	equ	0xFF5
   685                           postinc0	equ	0xFEE
   686                           wreg	equ	0xFE8
   687                           postdec1	equ	0xFE5
   688                           fsr1l	equ	0xFE1
   689                           
   690                           	psect	cstackBANK0
   691  000060                     __pcstackBANK0:
   692                           	opt stack 0
   693  000060                     ??_FlashSampleWrite:
   694  000060                     ??___ftdiv:
   695  000060                     ??_FlashReadUart:
   696  000060                     strtol@sign:
   697                           	opt stack 0
   698  000060                     GetMcuRunTime@TxMsg:
   699                           	opt stack 0
   700                           
   701                           ; 9 bytes @ 0x0
   702  000060                     	ds	1
   703  000061                     strtol@a:
   704                           	opt stack 0
   705                           
   706                           ; 4 bytes @ 0x1
   707  000061                     	ds	1
   708  000062                     FlashSampleWrite@rotateLeft:
   709                           	opt stack 0
   710                           
   711                           ; 2 bytes @ 0x2
   712  000062                     	ds	1
   713  000063                     ___ftdiv@cntr:
   714                           	opt stack 0
   715                           
   716                           ; 1 bytes @ 0x3
   717  000063                     	ds	1
   718  000064                     ___ftdiv@f3:
   719                           	opt stack 0
   720                           
   721                           ; 3 bytes @ 0x4
   722  000064                     	ds	1
   723  000065                     strtol@c:
   724                           	opt stack 0
   725                           
   726                           ; 1 bytes @ 0x5
   727  000065                     	ds	1
   728  000066                     ?_GetIntFromUartData:
   729                           	opt stack 0
   730  000066                     GetIntFromUartData@data:
   731                           	opt stack 0
   732                           
   733                           ; 2 bytes @ 0x6
   734  000066                     	ds	1
   735  000067                     ___ftdiv@exp:
   736                           	opt stack 0
   737                           
   738                           ; 1 bytes @ 0x7
   739  000067                     	ds	1
   740  000068                     ___ftdiv@sign:
   741                           	opt stack 0
   742                           
   743                           ; 1 bytes @ 0x8
   744  000068                     	ds	1
   745  000069                     ?___ftmul:
   746                           	opt stack 0
   747  000069                     ___ftmul@f1:
   748                           	opt stack 0
   749  000069                     GetMcuRunTime@tempRunTime:
   750                           	opt stack 0
   751                           
   752                           ; 4 bytes @ 0x9
   753  000069                     	ds	1
   754  00006A                     GetIntFromUartData@dataRegArr:
   755                           	opt stack 0
   756                           
   757                           ; 8 bytes @ 0xA
   758  00006A                     	ds	2
   759  00006C                     ___ftmul@f2:
   760                           	opt stack 0
   761  00006C                     FlashReadUart@TxMsg:
   762                           	opt stack 0
   763                           
   764                           ; 69 bytes @ 0xC
   765  00006C                     	ds	1
   766  00006D                     GetMcuRunTime@idx:
   767                           	opt stack 0
   768                           
   769                           ; 2 bytes @ 0xD
   770  00006D                     	ds	2
   771  00006F                     ??___ftmul:
   772                           
   773                           ; 1 bytes @ 0xF
   774  00006F                     	ds	3
   775  000072                     GetIntFromUartData@c:
   776                           	opt stack 0
   777  000072                     ___ftmul@exp:
   778                           	opt stack 0
   779                           
   780                           ; 1 bytes @ 0x12
   781  000072                     	ds	1
   782  000073                     GetIntFromUartData@idx:
   783                           	opt stack 0
   784  000073                     ___ftmul@f3_as_product:
   785                           	opt stack 0
   786                           
   787                           ; 3 bytes @ 0x13
   788  000073                     	ds	2
   789  000075                     DacSetValue@regData:
   790                           	opt stack 0
   791  000075                     UpdateTxFreq@regData:
   792                           	opt stack 0
   793  000075                     UpdateRxFreq@regData:
   794                           	opt stack 0
   795                           
   796                           ; 4 bytes @ 0x15
   797  000075                     	ds	1
   798  000076                     ___ftmul@cntr:
   799                           	opt stack 0
   800                           
   801                           ; 1 bytes @ 0x16
   802  000076                     	ds	1
   803  000077                     ___ftmul@sign:
   804                           	opt stack 0
   805                           
   806                           ; 1 bytes @ 0x17
   807  000077                     	ds	1
   808  000078                     ??_CheckFlashPrecentage:
   809  000078                     ?___ftadd:
   810                           	opt stack 0
   811  000078                     ?___fttol:
   812                           	opt stack 0
   813  000078                     ___ftadd@f1:
   814                           	opt stack 0
   815  000078                     ___fttol@f1:
   816                           	opt stack 0
   817                           
   818                           ; 3 bytes @ 0x18
   819  000078                     	ds	3
   820  00007B                     ___ftadd@f2:
   821                           	opt stack 0
   822                           
   823                           ; 3 bytes @ 0x1B
   824  00007B                     	ds	1
   825  00007C                     ??___fttol:
   826  00007C                     CheckFlashPrecentage@precentage:
   827                           	opt stack 0
   828                           
   829                           ; 3 bytes @ 0x1C
   830  00007C                     	ds	2
   831  00007E                     ??___ftadd:
   832                           
   833                           ; 1 bytes @ 0x1E
   834  00007E                     	ds	3
   835  000081                     ___ftadd@sign:
   836                           	opt stack 0
   837  000081                     ___fttol@sign1:
   838                           	opt stack 0
   839                           
   840                           ; 1 bytes @ 0x21
   841  000081                     	ds	1
   842  000082                     ___ftadd@exp2:
   843                           	opt stack 0
   844  000082                     ___fttol@lval:
   845                           	opt stack 0
   846                           
   847                           ; 4 bytes @ 0x22
   848  000082                     	ds	1
   849  000083                     ___ftadd@exp1:
   850                           	opt stack 0
   851                           
   852                           ; 1 bytes @ 0x23
   853  000083                     	ds	1
   854  000084                     ?___ftsub:
   855                           	opt stack 0
   856  000084                     ?_eval_poly:
   857                           	opt stack 0
   858  000084                     ___ftsub@f1:
   859                           	opt stack 0
   860  000084                     eval_poly@x:
   861                           	opt stack 0
   862                           
   863                           ; 3 bytes @ 0x24
   864  000084                     	ds	2
   865  000086                     ___fttol@exp1:
   866                           	opt stack 0
   867                           
   868                           ; 1 bytes @ 0x26
   869  000086                     	ds	1
   870  000087                     ?___altoft:
   871                           	opt stack 0
   872  000087                     eval_poly@d:
   873                           	opt stack 0
   874  000087                     ___ftsub@f2:
   875                           	opt stack 0
   876  000087                     ___altoft@c:
   877                           	opt stack 0
   878                           
   879                           ; 4 bytes @ 0x27
   880  000087                     	ds	2
   881  000089                     eval_poly@n:
   882                           	opt stack 0
   883                           
   884                           ; 2 bytes @ 0x29
   885  000089                     	ds	2
   886  00008B                     ??___altoft:
   887  00008B                     eval_poly@res:
   888                           	opt stack 0
   889                           
   890                           ; 3 bytes @ 0x2B
   891  00008B                     	ds	3
   892  00008E                     ?_log:
   893                           	opt stack 0
   894  00008E                     ?_ldexp:
   895                           	opt stack 0
   896  00008E                     ldexp@value:
   897                           	opt stack 0
   898  00008E                     log@x:
   899                           	opt stack 0
   900                           
   901                           ; 3 bytes @ 0x2E
   902  00008E                     	ds	1
   903  00008F                     ?_floor:
   904                           	opt stack 0
   905  00008F                     floor@x:
   906                           	opt stack 0
   907                           
   908                           ; 3 bytes @ 0x2F
   909  00008F                     	ds	2
   910  000091                     ldexp@newexp:
   911                           	opt stack 0
   912  000091                     log@exponent:
   913                           	opt stack 0
   914                           
   915                           ; 2 bytes @ 0x31
   916  000091                     	ds	1
   917  000092                     floor@i:
   918                           	opt stack 0
   919                           
   920                           ; 3 bytes @ 0x32
   921  000092                     	ds	1
   922  000093                     ??_ldexp:
   923                           
   924                           ; 1 bytes @ 0x33
   925  000093                     	ds	2
   926  000095                     floor@expon:
   927                           	opt stack 0
   928                           
   929                           ; 2 bytes @ 0x35
   930  000095                     	ds	2
   931  000097                     ?_exp:
   932                           	opt stack 0
   933  000097                     exp@x:
   934                           	opt stack 0
   935                           
   936                           ; 3 bytes @ 0x37
   937  000097                     	ds	3
   938  00009A                     _exp$3257:
   939                           	opt stack 0
   940                           
   941                           ; 3 bytes @ 0x3A
   942  00009A                     	ds	3
   943  00009D                     exp@exponent:
   944                           	opt stack 0
   945                           
   946                           ; 2 bytes @ 0x3D
   947  00009D                     	ds	2
   948  00009F                     exp@sign:
   949                           	opt stack 0
   950                           
   951                           ; 1 bytes @ 0x3F
   952  00009F                     	ds	1
   953  0000A0                     ?_pow:
   954                           	opt stack 0
   955  0000A0                     pow@x:
   956                           	opt stack 0
   957                           
   958                           ; 3 bytes @ 0x40
   959  0000A0                     	ds	3
   960  0000A3                     pow@y:
   961                           	opt stack 0
   962                           
   963                           ; 3 bytes @ 0x43
   964  0000A3                     	ds	3
   965  0000A6                     _pow$3255:
   966                           	opt stack 0
   967                           
   968                           ; 3 bytes @ 0x46
   969  0000A6                     	ds	3
   970  0000A9                     _pow$3256:
   971                           	opt stack 0
   972                           
   973                           ; 3 bytes @ 0x49
   974  0000A9                     	ds	3
   975  0000AC                     pow@sign:
   976                           	opt stack 0
   977                           
   978                           ; 1 bytes @ 0x4C
   979  0000AC                     	ds	1
   980  0000AD                     pow@yi:
   981                           	opt stack 0
   982                           
   983                           ; 4 bytes @ 0x4D
   984  0000AD                     	ds	4
   985  0000B1                     ??_AdcConvert:
   986  0000B1                     _FlashReadUart$561:
   987                           	opt stack 0
   988                           
   989                           ; 4 bytes @ 0x51
   990  0000B1                     	ds	2
   991  0000B3                     AdcConvert@_adcResult:
   992                           	opt stack 0
   993                           
   994                           ; 2 bytes @ 0x53
   995  0000B3                     	ds	2
   996  0000B5                     AdcConvert@_adcResult_330:
   997                           	opt stack 0
   998  0000B5                     _FlashReadUart$562:
   999                           	opt stack 0
  1000                           
  1001                           ; 4 bytes @ 0x55
  1002  0000B5                     	ds	2
  1003  0000B7                     _AdcConvert$3254:
  1004                           	opt stack 0
  1005                           
  1006                           ; 3 bytes @ 0x57
  1007  0000B7                     	ds	2
  1008  0000B9                     FlashReadUart@j:
  1009                           	opt stack 0
  1010                           
  1011                           ; 2 bytes @ 0x59
  1012  0000B9                     	ds	1
  1013  0000BA                     AdcConvert@adcRes:
  1014                           	opt stack 0
  1015                           
  1016                           ; 2 bytes @ 0x5A
  1017  0000BA                     	ds	1
  1018  0000BB                     FlashReadUart@idx:
  1019                           	opt stack 0
  1020                           
  1021                           ; 2 bytes @ 0x5B
  1022  0000BB                     	ds	1
  1023  0000BC                     AdcConvert@idx:
  1024                           	opt stack 0
  1025                           
  1026                           ; 1 bytes @ 0x5C
  1027  0000BC                     	ds	1
  1028  0000BD                     FlashReadUart@offset:
  1029                           	opt stack 0
  1030                           
  1031                           ; 2 bytes @ 0x5D
  1032  0000BD                     	ds	2
  1033  0000BF                     ??_GroupFlashMemory:
  1034  0000BF                     GroupControlMcu@request:
  1035                           	opt stack 0
  1036  0000BF                     GroupStatusAndVersion@request:
  1037                           	opt stack 0
  1038  0000BF                     GroupAdc@request:
  1039                           	opt stack 0
  1040  0000BF                     GroupSynthesizers@request:
  1041                           	opt stack 0
  1042  0000BF                     GroupDAC@request:
  1043                           	opt stack 0
  1044                           
  1045                           ; 1 bytes @ 0x5F
  1046  0000BF                     	ds	1
  1047                           tblptru	equ	0xFF8
  1048                           tblptrh	equ	0xFF7
  1049                           tblptrl	equ	0xFF6
  1050                           tablat	equ	0xFF5
  1051                           postinc0	equ	0xFEE
  1052                           wreg	equ	0xFE8
  1053                           postdec1	equ	0xFE5
  1054                           fsr1l	equ	0xFE1
  1055                           
  1056                           	psect	cstackCOMRAM
  1057  000001                     __pcstackCOMRAM:
  1058                           	opt stack 0
  1059  000001                     ?___lwmod:
  1060                           	opt stack 0
  1061  000001                     ___lwmod@dividend:
  1062                           	opt stack 0
  1063                           
  1064                           ; 2 bytes @ 0x0
  1065  000001                     	ds	2
  1066  000003                     ___lwmod@divisor:
  1067                           	opt stack 0
  1068                           
  1069                           ; 2 bytes @ 0x2
  1070  000003                     	ds	2
  1071  000005                     ___lwmod@counter:
  1072                           	opt stack 0
  1073                           
  1074                           ; 1 bytes @ 0x4
  1075  000005                     	ds	1
  1076  000006                     ??_INTERRUPT_InterruptManager:
  1077                           
  1078                           ; 1 bytes @ 0x5
  1079  000006                     	ds	18
  1080  000018                     ??_EUSART1_Read:
  1081  000018                     ??_isspace:
  1082  000018                     ??_isdigit:
  1083  000018                     ??_isupper:
  1084  000018                     ??_BlinkErrorLeds:
  1085  000018                     ??_BlinkOkLeds:
  1086  000018                     ??_keepAliveSignalLed:
  1087  000018                     ?_ADC_GetConversion:
  1088                           	opt stack 0
  1089  000018                     ?_abs:
  1090                           	opt stack 0
  1091  000018                     ?___wmul:
  1092                           	opt stack 0
  1093  000018                     ?___ftpack:
  1094                           	opt stack 0
  1095  000018                     ?_frexp:
  1096                           	opt stack 0
  1097  000018                     ?___ftneg:
  1098                           	opt stack 0
  1099  000018                     ?___lmul:
  1100                           	opt stack 0
  1101  000018                     ?___lldiv:
  1102                           	opt stack 0
  1103  000018                     ?___llmod:
  1104                           	opt stack 0
  1105  000018                     InitAdcApplicationMgr@channel:
  1106                           	opt stack 0
  1107  000018                     SwSpi_Data_Pin@cPinMode:
  1108                           	opt stack 0
  1109  000018                     SwSpi_Clk_Pin@cPinMode:
  1110                           	opt stack 0
  1111  000018                     SwSpi_Set_CE_Pin@cPinMode:
  1112                           	opt stack 0
  1113  000018                     SwSpi_Set_Synth_Le_Pin@cPinMode:
  1114                           	opt stack 0
  1115  000018                     SwSpi_Set_Dac_Sync_Pin@cPinMode:
  1116                           	opt stack 0
  1117  000018                     EUSART1_Write@txData:
  1118                           	opt stack 0
  1119  000018                     DATAEE_WriteByte@bData:
  1120                           	opt stack 0
  1121  000018                     DATAEE_ReadByte@bAdd:
  1122                           	opt stack 0
  1123  000018                     toupper@c:
  1124                           	opt stack 0
  1125  000018                     PLLUartInitialize@data:
  1126                           	opt stack 0
  1127  000018                     TMR0_SetInterruptHandler@InterruptHandler:
  1128                           	opt stack 0
  1129  000018                     crc8@dataArray:
  1130                           	opt stack 0
  1131  000018                     ___wmul@multiplier:
  1132                           	opt stack 0
  1133  000018                     abs@a:
  1134                           	opt stack 0
  1135  000018                     memset@p1:
  1136                           	opt stack 0
  1137  000018                     ___ftpack@arg:
  1138                           	opt stack 0
  1139  000018                     ___ftge@ff1:
  1140                           	opt stack 0
  1141  000018                     ___ftneg@f1:
  1142                           	opt stack 0
  1143  000018                     frexp@value:
  1144                           	opt stack 0
  1145  000018                     FLASH_ReadByte@flashAddr:
  1146                           	opt stack 0
  1147  000018                     FLASH_EraseBlock@baseAddr:
  1148                           	opt stack 0
  1149  000018                     make8@data:
  1150                           	opt stack 0
  1151  000018                     ___lmul@multiplier:
  1152                           	opt stack 0
  1153  000018                     ___lldiv@dividend:
  1154                           	opt stack 0
  1155  000018                     ___llmod@dividend:
  1156                           	opt stack 0
  1157                           
  1158                           ; 4 bytes @ 0x17
  1159  000018                     	ds	1
  1160  000019                     EepromRead@address:
  1161                           	opt stack 0
  1162  000019                     SwSpi_Data_Pin@phrType:
  1163                           	opt stack 0
  1164  000019                     SwSpi_Clk_Pin@phrType:
  1165                           	opt stack 0
  1166  000019                     SwSpi_Set_CE_Pin@phrType:
  1167                           	opt stack 0
  1168  000019                     SwSpi_Set_Synth_Le_Pin@phrType:
  1169                           	opt stack 0
  1170  000019                     DATAEE_WriteByte@bAdd:
  1171                           	opt stack 0
  1172  000019                     _isdigit$2964:
  1173                           	opt stack 0
  1174  000019                     _isspace$2967:
  1175                           	opt stack 0
  1176  000019                     _isupper$2970:
  1177                           	opt stack 0
  1178  000019                     WriteUartMessage@dataBuf:
  1179                           	opt stack 0
  1180  000019                     EUSART1_Read@readValue:
  1181                           	opt stack 0
  1182                           
  1183                           ; 2 bytes @ 0x18
  1184  000019                     	ds	1
  1185  00001A                     ??_ADC_GetConversion:
  1186  00001A                     ??_abs:
  1187  00001A                     ??_TMR0_Initialize:
  1188  00001A                     SWSPI_send_bits@data:
  1189                           	opt stack 0
  1190  00001A                     DATAEE_WriteByte@GIEBitValue:
  1191                           	opt stack 0
  1192  00001A                     isdigit@c:
  1193                           	opt stack 0
  1194  00001A                     isspace@c:
  1195                           	opt stack 0
  1196  00001A                     isupper@c:
  1197                           	opt stack 0
  1198  00001A                     crc8@dataSize:
  1199                           	opt stack 0
  1200  00001A                     ___wmul@multiplicand:
  1201                           	opt stack 0
  1202  00001A                     memset@c:
  1203                           	opt stack 0
  1204                           
  1205                           ; 2 bytes @ 0x19
  1206  00001A                     	ds	1
  1207  00001B                     ??_isalpha:
  1208  00001B                     BlinkErrorLeds@state:
  1209                           	opt stack 0
  1210  00001B                     BlinkOkLeds@state:
  1211                           	opt stack 0
  1212  00001B                     EepromWrite@data:
  1213                           	opt stack 0
  1214  00001B                     SWSPI_send_bits@count:
  1215                           	opt stack 0
  1216  00001B                     ___ftpack@exp:
  1217                           	opt stack 0
  1218  00001B                     WriteUartMessage@dataSize:
  1219                           	opt stack 0
  1220  00001B                     frexp@eptr:
  1221                           	opt stack 0
  1222  00001B                     ___ftge@ff2:
  1223                           	opt stack 0
  1224                           
  1225                           ; 3 bytes @ 0x1A
  1226  00001B                     	ds	1
  1227  00001C                     ??_crc8:
  1228  00001C                     EepromWrite@address:
  1229                           	opt stack 0
  1230  00001C                     SWSPI_send_bits@phrType:
  1231                           	opt stack 0
  1232  00001C                     FLASH_EraseBlock@GIEBitValue:
  1233                           	opt stack 0
  1234  00001C                     ADC_GetConversion@channel:
  1235                           	opt stack 0
  1236  00001C                     make8@dataLocation:
  1237                           	opt stack 0
  1238  00001C                     ___ftpack@sign:
  1239                           	opt stack 0
  1240  00001C                     _isalpha$2961:
  1241                           	opt stack 0
  1242  00001C                     BlinkErrorLeds@idx:
  1243                           	opt stack 0
  1244  00001C                     BlinkOkLeds@idx:
  1245                           	opt stack 0
  1246  00001C                     ___wmul@product:
  1247                           	opt stack 0
  1248  00001C                     memset@n:
  1249                           	opt stack 0
  1250  00001C                     ___lmul@multiplicand:
  1251                           	opt stack 0
  1252  00001C                     ___lldiv@divisor:
  1253                           	opt stack 0
  1254  00001C                     ___llmod@divisor:
  1255                           	opt stack 0
  1256                           
  1257                           ; 4 bytes @ 0x1B
  1258  00001C                     	ds	1
  1259  00001D                     ??_make8:
  1260  00001D                     ??___ftpack:
  1261  00001D                     ??_frexp:
  1262  00001D                     ??_WriteUartMessage:
  1263  00001D                     isalpha@c:
  1264                           	opt stack 0
  1265  00001D                     crc8@crc:
  1266                           	opt stack 0
  1267  00001D                     FLASH_WriteBlock@writeAddr:
  1268                           	opt stack 0
  1269                           
  1270                           ; 4 bytes @ 0x1C
  1271  00001D                     	ds	1
  1272  00001E                     ??___ftge:
  1273  00001E                     WriteUartMessage@idx:
  1274                           	opt stack 0
  1275  00001E                     memset@p:
  1276                           	opt stack 0
  1277                           
  1278                           ; 2 bytes @ 0x1D
  1279  00001E                     	ds	1
  1280  00001F                     crc8@i:
  1281                           	opt stack 0
  1282                           
  1283                           ; 2 bytes @ 0x1E
  1284  00001F                     	ds	1
  1285  000020                     ?___awtoft:
  1286                           	opt stack 0
  1287  000020                     ?___lltoft:
  1288                           	opt stack 0
  1289  000020                     ?___lwtoft:
  1290                           	opt stack 0
  1291  000020                     ___llmod@counter:
  1292                           	opt stack 0
  1293  000020                     ZeroArray@array:
  1294                           	opt stack 0
  1295  000020                     ___awtoft@c:
  1296                           	opt stack 0
  1297  000020                     ___lwtoft@c:
  1298                           	opt stack 0
  1299  000020                     ___lmul@product:
  1300                           	opt stack 0
  1301  000020                     ___lldiv@quotient:
  1302                           	opt stack 0
  1303  000020                     ___lltoft@c:
  1304                           	opt stack 0
  1305                           
  1306                           ; 4 bytes @ 0x1F
  1307  000020                     	ds	1
  1308  000021                     FLASH_WriteBlock@flashWrBufPtr:
  1309                           	opt stack 0
  1310  000021                     SWSPI_send_word@data:
  1311                           	opt stack 0
  1312                           
  1313                           ; 4 bytes @ 0x20
  1314  000021                     	ds	1
  1315  000022                     ZeroArray@size:
  1316                           	opt stack 0
  1317                           
  1318                           ; 2 bytes @ 0x21
  1319  000022                     	ds	1
  1320  000023                     ??_FLASH_WriteBlock:
  1321  000023                     ___awtoft@sign:
  1322                           	opt stack 0
  1323                           
  1324                           ; 1 bytes @ 0x22
  1325  000023                     	ds	1
  1326  000024                     ??_GetMcuFwVersion:
  1327  000024                     ??_GetCpldFwVersion:
  1328  000024                     ??_FlashReadCondition:
  1329  000024                     ??___lltoft:
  1330  000024                     ?_strtol:
  1331                           	opt stack 0
  1332  000024                     SendAckMessage@inRequest:
  1333                           	opt stack 0
  1334  000024                     ___lldiv@counter:
  1335                           	opt stack 0
  1336  000024                     strtol@s:
  1337                           	opt stack 0
  1338                           
  1339                           ; 2 bytes @ 0x23
  1340  000024                     	ds	1
  1341  000025                     ??_GetMcuRunTime:
  1342  000025                     SendAckMessage@inGroup:
  1343                           	opt stack 0
  1344  000025                     SWSPI_send_word@dataSize:
  1345                           	opt stack 0
  1346                           
  1347                           ; 1 bytes @ 0x24
  1348  000025                     	ds	1
  1349  000026                     SWSPI_send_word@datac:
  1350                           	opt stack 0
  1351  000026                     strtol@endptr:
  1352                           	opt stack 0
  1353  000026                     SendAckMessage@TxMsg:
  1354                           	opt stack 0
  1355  000026                     GetMcuFwVersion@TxMsg:
  1356                           	opt stack 0
  1357  000026                     GetCpldFwVersion@TxMsg:
  1358                           	opt stack 0
  1359                           
  1360                           ; 9 bytes @ 0x25
  1361  000026                     	ds	1
  1362  000027                     SWSPI_send_word@idx:
  1363                           	opt stack 0
  1364  000027                     FLASH_WriteBlock@blockStartAddr:
  1365                           	opt stack 0
  1366                           
  1367                           ; 4 bytes @ 0x26
  1368  000027                     	ds	1
  1369  000028                     ___lltoft@exp:
  1370                           	opt stack 0
  1371  000028                     strtol@base:
  1372                           	opt stack 0
  1373  000028                     FlashReadCondition@TxMsg:
  1374                           	opt stack 0
  1375                           
  1376                           ; 9 bytes @ 0x27
  1377  000028                     	ds	1
  1378  000029                     ?___ftdiv:
  1379                           	opt stack 0
  1380  000029                     SWSPI_send_word@phrType:
  1381                           	opt stack 0
  1382  000029                     ___ftdiv@f1:
  1383                           	opt stack 0
  1384                           
  1385                           ; 3 bytes @ 0x28
  1386  000029                     	ds	1
  1387  00002A                     ??_strtol:
  1388  00002A                     ??_PLLInitialize:
  1389                           
  1390                           ; 1 bytes @ 0x29
  1391  00002A                     	ds	1
  1392  00002B                     FLASH_WriteBlock@GIEBitValue:
  1393                           	opt stack 0
  1394                           
  1395                           ; 1 bytes @ 0x2A
  1396  00002B                     	ds	1
  1397  00002C                     ??_testLeds:
  1398  00002C                     FLASH_WriteBlock@i:
  1399                           	opt stack 0
  1400  00002C                     SetAdcOperationMode@data:
  1401                           	opt stack 0
  1402  00002C                     SetConversionResultFormat@data:
  1403                           	opt stack 0
  1404  00002C                     SetChannelMode@data:
  1405                           	opt stack 0
  1406  00002C                     FlashReadUart@numOfSampleToRead:
  1407                           	opt stack 0
  1408  00002C                     PLLInitialize@idx:
  1409                           	opt stack 0
  1410  00002C                     SetMcuFwVersion@data:
  1411                           	opt stack 0
  1412  00002C                     SetCpldFwVersion@data:
  1413                           	opt stack 0
  1414  00002C                     ___ftdiv@f2:
  1415                           	opt stack 0
  1416                           
  1417                           ; 3 bytes @ 0x2B
  1418  00002C                     	ds	1
  1419  00002D                     testLeds@idx:
  1420                           	opt stack 0
  1421  00002D                     FlashSampleWrite@sampleData:
  1422                           	opt stack 0
  1423                           
  1424                           ; 2 bytes @ 0x2C
  1425  00002D                     	ds	1
  1426  00002E                     SetMcuFwVersion@idx:
  1427                           	opt stack 0
  1428  00002E                     DacSetValue@data:
  1429                           	opt stack 0
  1430  00002E                     PLLInitialize@idx_805:
  1431                           	opt stack 0
  1432  00002E                     UpdateTxFreq@data:
  1433                           	opt stack 0
  1434  00002E                     UpdateRxFreq@data:
  1435                           	opt stack 0
  1436  00002E                     SetCpldFwVersion@idx:
  1437                           	opt stack 0
  1438                           
  1439                           ; 2 bytes @ 0x2D
  1440  00002E                     	ds	1
  1441  00002F                     ??_eval_poly:
  1442  00002F                     FlashSampleWrite@channelNum:
  1443                           	opt stack 0
  1444  00002F                     GetMcuFwVersion@idx:
  1445                           	opt stack 0
  1446  00002F                     ___altoft@exp:
  1447                           	opt stack 0
  1448  00002F                     GetCpldFwVersion@idx:
  1449                           	opt stack 0
  1450                           
  1451                           ; 2 bytes @ 0x2E
  1452  00002F                     	ds	1
  1453  000030                     ___altoft@sign:
  1454                           	opt stack 0
  1455                           
  1456                           ; 1 bytes @ 0x2F
  1457  000030                     	ds	1
  1458  000031                     tblptru	equ	0xFF8
  1459                           tblptrh	equ	0xFF7
  1460                           tblptrl	equ	0xFF6
  1461                           tablat	equ	0xFF5
  1462                           postinc0	equ	0xFEE
  1463                           wreg	equ	0xFE8
  1464                           postdec1	equ	0xFE5
  1465                           fsr1l	equ	0xFE1
  1466                           
  1467                           ; 1 bytes @ 0x30
  1468 ;;
  1469 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1470 ;;
  1471 ;; *************** function _main *****************
  1472 ;; Defined at:
  1473 ;;		line 13 in file "main.c"
  1474 ;; Parameters:    Size  Location     Type
  1475 ;;		None
  1476 ;; Auto vars:     Size  Location     Type
  1477 ;;		None
  1478 ;; Return value:  Size  Location     Type
  1479 ;;                  1    wreg      void 
  1480 ;; Registers used:
  1481 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1482 ;; Tracked objects:
  1483 ;;		On entry : 0/0
  1484 ;;		On exit  : 0/0
  1485 ;;		Unchanged: 0/0
  1486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1487 ;;      Params:         0       0       0       0       0       0       0
  1488 ;;      Locals:         0       0       0       0       0       0       0
  1489 ;;      Temps:          0       0       0       0       0       0       0
  1490 ;;      Totals:         0       0       0       0       0       0       0
  1491 ;;Total ram usage:        0 bytes
  1492 ;; Hardware stack levels required when called:   10
  1493 ;; This function calls:
  1494 ;;		_AdcConvert
  1495 ;;		_BlinkErrorLeds
  1496 ;;		_BlinkOkLeds
  1497 ;;		_CheckFlashPrecentage
  1498 ;;		_InitSystemApplicationManagers
  1499 ;;		_SendSystemStartAck
  1500 ;;		_SetMcuRunTime
  1501 ;;		_SetMcuSystem
  1502 ;;		_keepAliveSignalLed
  1503 ;;		_keepAliveSignalUart
  1504 ;;		_readUartMessage
  1505 ;; This function is called by:
  1506 ;;		Startup code after reset
  1507 ;; This function uses a non-reentrant model
  1508 ;;
  1509                           
  1510                           	psect	text0
  1511  00291E                     __ptext0:
  1512                           	opt stack 0
  1513  00291E                     _main:
  1514                           	opt stack 21
  1515                           
  1516                           ;main.c: 16: SetMcuSystem();
  1517                           
  1518                           ;incstack = 0
  1519  00291E  EC9F  F01B         	call	_SetMcuSystem	;wreg free
  1520                           
  1521                           ;main.c: 19: InitSystemApplicationManagers();
  1522  002922  EC06  F01B         	call	_InitSystemApplicationManagers	;wreg free
  1523                           
  1524                           ;main.c: 22: SendSystemStartAck();
  1525  002926  EC94  F01B         	call	_SendSystemStartAck	;wreg free
  1526                           
  1527                           ;main.c: 25: BlinkOkLeds(OK_START_SYSTEM);
  1528  00292A  0E03               	movlw	3
  1529  00292C  ECC0  F014         	call	_BlinkOkLeds
  1530  002930                     
  1531                           ;main.c: 28: {
  1532                           ;main.c: 29: readUartMessage();
  1533  002930  EC31  F006         	call	_readUartMessage	;wreg free
  1534                           
  1535                           ;main.c: 31: if (TimerOneSecFlag == 1)
  1536  002934  0100               	movlb	0	; () banked
  1537  002936  05D6               	decf	_TimerOneSecFlag& (0+255),w,b	;volatile
  1538  002938  A4D8               	btfss	status,2,c
  1539  00293A  D006               	goto	l1391
  1540                           
  1541                           ; BSR set to: 0
  1542                           ;main.c: 32: {
  1543                           ;main.c: 34: SetMcuRunTime();
  1544  00293C  EC86  F017         	call	_SetMcuRunTime	;wreg free
  1545                           
  1546                           ;main.c: 35: TimerOneSecFlag = 0;
  1547  002940  0E00               	movlw	0
  1548  002942  0100               	movlb	0	; () banked
  1549  002944  6FD6               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
  1550                           
  1551                           ;main.c: 36: }
  1552  002946  D7F4               	goto	l1390
  1553  002948                     l1391:
  1554                           
  1555                           ; BSR set to: 0
  1556                           ;main.c: 37: else if (TimerSamplingFlag == 1)
  1557                           
  1558                           ; BSR set to: 0
  1559  002948  05D5               	decf	_TimerSamplingFlag& (0+255),w,b	;volatile
  1560  00294A  A4D8               	btfss	status,2,c
  1561  00294C  D010               	goto	l1393
  1562                           
  1563                           ; BSR set to: 0
  1564                           ;main.c: 38: {
  1565                           ;main.c: 39: keepAliveSignalLed();
  1566  00294E  EC13  F01B         	call	_keepAliveSignalLed	;wreg free
  1567                           
  1568                           ;main.c: 41: if(1 == CheckFlashPrecentage())
  1569  002952  EC91  F010         	call	_CheckFlashPrecentage	;wreg free
  1570  002956  06E8               	decf	wreg,f,c
  1571  002958  A4D8               	btfss	status,2,c
  1572  00295A  D003               	goto	l1394
  1573                           
  1574                           ;main.c: 42: {
  1575                           ;main.c: 43: BlinkErrorLeds(FAIL_FLASH_MORE_THEN_HELF);
  1576  00295C  0E04               	movlw	4
  1577  00295E  ECEF  F014         	call	_BlinkErrorLeds
  1578  002962                     l1394:
  1579                           
  1580                           ;main.c: 44: }
  1581                           ;main.c: 47: AdcConvert();
  1582  002962  EC13  F009         	call	_AdcConvert	;wreg free
  1583                           
  1584                           ;main.c: 49: TimerSamplingFlag = 0;
  1585  002966  0E00               	movlw	0
  1586  002968  0100               	movlb	0	; () banked
  1587  00296A  6FD5               	movwf	_TimerSamplingFlag& (0+255),b	;volatile
  1588                           
  1589                           ;main.c: 50: }
  1590  00296C  D7E1               	goto	l1390
  1591  00296E                     l1393:
  1592                           
  1593                           ; BSR set to: 0
  1594                           ;main.c: 51: else if (TimerKeepAliveFlag == 1)
  1595                           
  1596                           ; BSR set to: 0
  1597  00296E  05D4               	decf	_TimerKeepAliveFlag& (0+255),w,b	;volatile
  1598  002970  A4D8               	btfss	status,2,c
  1599  002972  D7DE               	goto	l1390
  1600                           
  1601                           ; BSR set to: 0
  1602                           ;main.c: 52: {
  1603                           ;main.c: 53: keepAliveSignalUart();
  1604  002974  EC8E  F01B         	call	_keepAliveSignalUart	;wreg free
  1605                           
  1606                           ;main.c: 54: TimerKeepAliveFlag = 0;
  1607  002978  0E00               	movlw	0
  1608  00297A  0100               	movlb	0	; () banked
  1609  00297C  6FD4               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
  1610                           
  1611                           ; BSR set to: 0
  1612                           
  1613                           ; BSR set to: 0
  1614                           
  1615                           ; BSR set to: 0
  1616                           
  1617                           ; BSR set to: 0
  1618  00297E  D7D8               	goto	l1390
  1619  002980                     __end_of_main:
  1620                           	opt stack 0
  1621                           tblptru	equ	0xFF8
  1622                           tblptrh	equ	0xFF7
  1623                           tblptrl	equ	0xFF6
  1624                           tablat	equ	0xFF5
  1625                           postinc0	equ	0xFEE
  1626                           wreg	equ	0xFE8
  1627                           postdec1	equ	0xFE5
  1628                           fsr1l	equ	0xFE1
  1629                           status	equ	0xFD8
  1630                           
  1631 ;; *************** function _readUartMessage *****************
  1632 ;; Defined at:
  1633 ;;		line 28 in file "EusartApp.c"
  1634 ;; Parameters:    Size  Location     Type
  1635 ;;		None
  1636 ;; Auto vars:     Size  Location     Type
  1637 ;;  idx             2    7[BANK1 ] int 
  1638 ;;  chRec           1    9[BANK1 ] unsigned char 
  1639 ;; Return value:  Size  Location     Type
  1640 ;;                  1    wreg      void 
  1641 ;; Registers used:
  1642 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  1643 ;; Tracked objects:
  1644 ;;		On entry : 0/0
  1645 ;;		On exit  : 0/0
  1646 ;;		Unchanged: 0/0
  1647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1648 ;;      Params:         0       0       0       0       0       0       0
  1649 ;;      Locals:         0       0       3       0       0       0       0
  1650 ;;      Temps:          0       0       4       0       0       0       0
  1651 ;;      Totals:         0       0       7       0       0       0       0
  1652 ;;Total ram usage:        7 bytes
  1653 ;; Hardware stack levels used:    1
  1654 ;; Hardware stack levels required when called:    9
  1655 ;; This function calls:
  1656 ;;		_EUSART1_Read
  1657 ;;		_GroupAdc
  1658 ;;		_GroupControlMcu
  1659 ;;		_GroupDAC
  1660 ;;		_GroupFlashMemory
  1661 ;;		_GroupStatusAndVersion
  1662 ;;		_GroupSynthesizers
  1663 ;;		_InitRxMessageParams
  1664 ;;		_ZeroArray
  1665 ;;		_crc8
  1666 ;; This function is called by:
  1667 ;;		_main
  1668 ;; This function uses a non-reentrant model
  1669 ;;
  1670                           
  1671                           	psect	text1
  1672  000C62                     __ptext1:
  1673                           	opt stack 0
  1674  000C62                     _readUartMessage:
  1675                           	opt stack 21
  1676                           
  1677                           ;EusartApp.c: 31: uint8_t chRec = (0);
  1678                           
  1679                           ; BSR set to: 0
  1680                           ;incstack = 0
  1681  000C62  0E00               	movlw	0
  1682  000C64  0101               	movlb	1	; () banked
  1683  000C66  6FCB               	movwf	readUartMessage@chRec& (0+255),b
  1684                           
  1685                           ;EusartApp.c: 32: switch(cState)
  1686  000C68  D0DF               	goto	l172
  1687  000C6A                     
  1688                           ;EusartApp.c: 37: if(eusart1RxCount > (4))
  1689                           
  1690                           ; BSR set to: 1
  1691  000C6A  0E04               	movlw	4
  1692  000C6C  0100               	movlb	0	; () banked
  1693  000C6E  65D2               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1694  000C70  0012               	return	
  1695                           
  1696                           ; BSR set to: 0
  1697                           ;EusartApp.c: 38: {
  1698                           ;EusartApp.c: 39: cState = FIND_MAGIC;
  1699  000C72  0E01               	movlw	1
  1700  000C74  6FD1               	movwf	_cState& (0+255),b
  1701                           
  1702                           ; BSR set to: 0
  1703                           ;EusartApp.c: 40: }
  1704                           ;EusartApp.c: 41: return;
  1705                           
  1706                           ; BSR set to: 0
  1707  000C76  0012               	return	
  1708  000C78                     
  1709                           ; BSR set to: 0
  1710                           ;EusartApp.c: 45: InitRxMessageParams();
  1711                           
  1712                           ; BSR set to: 0
  1713  000C78  EC15  F01A         	call	_InitRxMessageParams	;wreg free
  1714                           
  1715                           ;EusartApp.c: 46: msgCount = 0;
  1716  000C7C  0E00               	movlw	0
  1717  000C7E  0100               	movlb	0	; () banked
  1718  000C80  6FCA               	movwf	_msgCount& (0+255),b
  1719                           
  1720                           ; BSR set to: 0
  1721                           ;EusartApp.c: 47: if(eusart1RxCount > 1)
  1722  000C82  0E01               	movlw	1
  1723  000C84  65D2               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1724  000C86  D00E               	goto	l177
  1725                           
  1726                           ; BSR set to: 0
  1727                           ;EusartApp.c: 48: {
  1728                           ;EusartApp.c: 49: chRec = EUSART1_Read();
  1729  000C88  EC64  F017         	call	_EUSART1_Read	;wreg free
  1730  000C8C  0101               	movlb	1	; () banked
  1731  000C8E  6FCB               	movwf	readUartMessage@chRec& (0+255),b
  1732                           
  1733                           ; BSR set to: 1
  1734                           ;EusartApp.c: 50: rxMsgQueue[(0)] = chRec;
  1735  000C90  C1CB  F0D7         	movff	readUartMessage@chRec,_rxMsgQueue
  1736                           
  1737                           ; BSR set to: 1
  1738                           ;EusartApp.c: 51: if(chRec == (0x24))
  1739  000C94  0E24               	movlw	36
  1740  000C96  19CB               	xorwf	readUartMessage@chRec& (0+255),w,b
  1741  000C98  A4D8               	btfss	status,2,c
  1742  000C9A  0012               	return	
  1743                           
  1744                           ; BSR set to: 1
  1745                           ;EusartApp.c: 52: {
  1746                           ;EusartApp.c: 53: cState = READ_GROUP;
  1747  000C9C  0E02               	movlw	2
  1748  000C9E  0100               	movlb	0	; () banked
  1749  000CA0  6FD1               	movwf	_cState& (0+255),b
  1750                           
  1751                           ; BSR set to: 0
  1752                           ;EusartApp.c: 54: }
  1753                           ;EusartApp.c: 55: }
  1754  000CA2  0012               	return	
  1755  000CA4                     l177:
  1756                           
  1757                           ; BSR set to: 0
  1758                           ;EusartApp.c: 56: else
  1759                           ;EusartApp.c: 57: {
  1760                           ;EusartApp.c: 58: cState = START_RX_MESSAGE_READ;
  1761                           
  1762                           ; BSR set to: 0
  1763  000CA4  0E00               	movlw	0
  1764  000CA6  6FD1               	movwf	_cState& (0+255),b
  1765                           
  1766                           ; BSR set to: 0
  1767                           ;EusartApp.c: 59: }
  1768                           ;EusartApp.c: 61: break;
  1769  000CA8  0012               	return	
  1770  000CAA                     
  1771                           ; BSR set to: 0
  1772                           ;EusartApp.c: 65: if(eusart1RxCount > 1)
  1773                           
  1774                           ; BSR set to: 0
  1775  000CAA  0E01               	movlw	1
  1776  000CAC  65D2               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1777  000CAE  0012               	return	
  1778                           
  1779                           ; BSR set to: 0
  1780                           ;EusartApp.c: 66: {
  1781                           ;EusartApp.c: 67: group = EUSART1_Read();
  1782  000CB0  EC64  F017         	call	_EUSART1_Read	;wreg free
  1783  000CB4  0100               	movlb	0	; () banked
  1784  000CB6  6FD0               	movwf	_group& (0+255),b
  1785                           
  1786                           ; BSR set to: 0
  1787                           ;EusartApp.c: 68: rxMsgQueue[(1)] = group;
  1788  000CB8  C0D0  F0D8         	movff	_group,_rxMsgQueue+1
  1789                           
  1790                           ; BSR set to: 0
  1791                           ;EusartApp.c: 69: cState = READ_REQUEST;
  1792  000CBC  0E03               	movlw	3
  1793  000CBE  6FD1               	movwf	_cState& (0+255),b
  1794                           
  1795                           ; BSR set to: 0
  1796                           ;EusartApp.c: 70: }
  1797                           ;EusartApp.c: 71: break;
  1798  000CC0  0012               	return	
  1799  000CC2                     
  1800                           ; BSR set to: 0
  1801                           ;EusartApp.c: 75: if(eusart1RxCount > 1)
  1802                           
  1803                           ; BSR set to: 0
  1804  000CC2  0E01               	movlw	1
  1805  000CC4  65D2               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1806  000CC6  0012               	return	
  1807                           
  1808                           ; BSR set to: 0
  1809                           ;EusartApp.c: 76: {
  1810                           ;EusartApp.c: 77: request = EUSART1_Read();
  1811  000CC8  EC64  F017         	call	_EUSART1_Read	;wreg free
  1812  000CCC  0100               	movlb	0	; () banked
  1813  000CCE  6FCF               	movwf	_request& (0+255),b
  1814                           
  1815                           ; BSR set to: 0
  1816                           ;EusartApp.c: 78: rxMsgQueue[(2)] = request;
  1817  000CD0  C0CF  F0D9         	movff	_request,_rxMsgQueue+2
  1818                           
  1819                           ; BSR set to: 0
  1820                           ;EusartApp.c: 79: cState = READ_DATA_SIZE;
  1821  000CD4  0E04               	movlw	4
  1822  000CD6  6FD1               	movwf	_cState& (0+255),b
  1823                           
  1824                           ; BSR set to: 0
  1825                           ;EusartApp.c: 80: }
  1826                           ;EusartApp.c: 81: break;
  1827  000CD8  0012               	return	
  1828  000CDA                     
  1829                           ; BSR set to: 0
  1830                           ;EusartApp.c: 84: if(eusart1RxCount > 1)
  1831                           
  1832                           ; BSR set to: 0
  1833  000CDA  0E01               	movlw	1
  1834  000CDC  65D2               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1835  000CDE  0012               	return	
  1836                           
  1837                           ; BSR set to: 0
  1838                           ;EusartApp.c: 85: {
  1839                           ;EusartApp.c: 86: dataSize = EUSART1_Read();
  1840  000CE0  EC64  F017         	call	_EUSART1_Read	;wreg free
  1841  000CE4  0100               	movlb	0	; () banked
  1842  000CE6  6FCE               	movwf	_dataSize& (0+255),b
  1843                           
  1844                           ; BSR set to: 0
  1845                           ;EusartApp.c: 87: rxMsgQueue[(3)] = dataSize;
  1846  000CE8  C0CE  F0DA         	movff	_dataSize,_rxMsgQueue+3
  1847                           
  1848                           ; BSR set to: 0
  1849                           ;EusartApp.c: 88: if(dataSize == 0)
  1850  000CEC  51CE               	movf	_dataSize& (0+255),w,b
  1851  000CEE  A4D8               	btfss	status,2,c
  1852  000CF0  D003               	goto	l187
  1853                           
  1854                           ; BSR set to: 0
  1855                           ;EusartApp.c: 89: {
  1856                           ;EusartApp.c: 90: cState = CHECK_CRC;
  1857  000CF2  0E06               	movlw	6
  1858  000CF4  6FD1               	movwf	_cState& (0+255),b
  1859                           
  1860                           ;EusartApp.c: 91: }
  1861  000CF6  0012               	return	
  1862  000CF8                     l187:
  1863                           
  1864                           ; BSR set to: 0
  1865                           ;EusartApp.c: 92: else
  1866                           ;EusartApp.c: 93: {
  1867                           ;EusartApp.c: 94: cState = READ_DATA;
  1868                           
  1869                           ; BSR set to: 0
  1870  000CF8  0E05               	movlw	5
  1871  000CFA  6FD1               	movwf	_cState& (0+255),b
  1872                           
  1873                           ; BSR set to: 0
  1874                           ;EusartApp.c: 95: }
  1875                           ;EusartApp.c: 97: }
  1876                           ;EusartApp.c: 99: break;
  1877                           
  1878                           ; BSR set to: 0
  1879  000CFC  0012               	return	
  1880  000CFE                     
  1881                           ; BSR set to: 0
  1882                           ;EusartApp.c: 103: if(eusart1RxCount >= dataSize)
  1883                           
  1884                           ; BSR set to: 0
  1885  000CFE  51CE               	movf	_dataSize& (0+255),w,b
  1886  000D00  5DD2               	subwf	_eusart1RxCount& (0+255),w,b	;volatile
  1887  000D02  A0D8               	btfss	status,0,c
  1888  000D04  0012               	return	
  1889                           
  1890                           ; BSR set to: 0
  1891                           ;EusartApp.c: 104: {
  1892                           ;EusartApp.c: 105: ZeroArray(rxMsgData, (0x14));
  1893  000D06  0EAE               	movlw	low _rxMsgData
  1894  000D08  6E20               	movwf	ZeroArray@array,c
  1895  000D0A  0E01               	movlw	high _rxMsgData
  1896  000D0C  6E21               	movwf	ZeroArray@array+1,c
  1897  000D0E  0E00               	movlw	0
  1898  000D10  6E23               	movwf	ZeroArray@size+1,c
  1899  000D12  0E14               	movlw	20
  1900  000D14  6E22               	movwf	ZeroArray@size,c
  1901  000D16  ECDC  F01A         	call	_ZeroArray	;wreg free
  1902                           
  1903                           ;EusartApp.c: 107: for(int idx = 0; idx < dataSize; idx++)
  1904  000D1A  0E00               	movlw	0
  1905  000D1C  0101               	movlb	1	; () banked
  1906  000D1E  6FCA               	movwf	(readUartMessage@idx+1)& (0+255),b
  1907  000D20  0E00               	movlw	0
  1908  000D22  6FC9               	movwf	readUartMessage@idx& (0+255),b
  1909  000D24  D022               	goto	l191
  1910  000D26                     
  1911                           ; BSR set to: 1
  1912                           ;EusartApp.c: 108: {
  1913                           ;EusartApp.c: 109: chRec = EUSART1_Read();
  1914                           
  1915                           ; BSR set to: 1
  1916  000D26  EC64  F017         	call	_EUSART1_Read	;wreg free
  1917  000D2A  0101               	movlb	1	; () banked
  1918  000D2C  6FCB               	movwf	readUartMessage@chRec& (0+255),b
  1919                           
  1920                           ; BSR set to: 1
  1921                           ;EusartApp.c: 110: rxMsgQueue[(0x4) + msgCount++] = chRec;
  1922  000D2E  0100               	movlb	0	; () banked
  1923  000D30  51CA               	movf	_msgCount& (0+255),w,b
  1924  000D32  0101               	movlb	1	; () banked
  1925  000D34  6FC5               	movwf	??_readUartMessage& (0+255),b
  1926  000D36  6BC6               	clrf	(??_readUartMessage+1)& (0+255),b
  1927  000D38  0E04               	movlw	4
  1928  000D3A  27C5               	addwf	??_readUartMessage& (0+255),f,b
  1929  000D3C  0E00               	movlw	0
  1930  000D3E  23C6               	addwfc	(??_readUartMessage+1)& (0+255),f,b
  1931  000D40  0ED7               	movlw	low _rxMsgQueue
  1932  000D42  25C5               	addwf	??_readUartMessage& (0+255),w,b
  1933  000D44  6ED9               	movwf	fsr2l,c
  1934  000D46  0E00               	movlw	high _rxMsgQueue
  1935  000D48  21C6               	addwfc	(??_readUartMessage+1)& (0+255),w,b
  1936  000D4A  6EDA               	movwf	fsr2h,c
  1937  000D4C  C1CB  FFDF         	movff	readUartMessage@chRec,indf2
  1938                           
  1939                           ; BSR set to: 1
  1940  000D50  0100               	movlb	0	; () banked
  1941  000D52  2BCA               	incf	_msgCount& (0+255),f,b
  1942                           
  1943                           ; BSR set to: 0
  1944                           ;EusartApp.c: 111: rxMsgData[idx] = chRec;
  1945  000D54  0EAE               	movlw	low _rxMsgData
  1946  000D56  0101               	movlb	1	; () banked
  1947  000D58  25C9               	addwf	readUartMessage@idx& (0+255),w,b
  1948  000D5A  6ED9               	movwf	fsr2l,c
  1949  000D5C  0E01               	movlw	high _rxMsgData
  1950  000D5E  21CA               	addwfc	(readUartMessage@idx+1)& (0+255),w,b
  1951  000D60  6EDA               	movwf	fsr2h,c
  1952  000D62  C1CB  FFDF         	movff	readUartMessage@chRec,indf2
  1953                           
  1954                           ; BSR set to: 1
  1955  000D66  4BC9               	infsnz	readUartMessage@idx& (0+255),f,b
  1956  000D68  2BCA               	incf	(readUartMessage@idx+1)& (0+255),f,b
  1957  000D6A                     l191:
  1958                           
  1959                           ; BSR set to: 1
  1960                           
  1961                           ; BSR set to: 1
  1962  000D6A  0100               	movlb	0	; () banked
  1963  000D6C  51CE               	movf	_dataSize& (0+255),w,b
  1964  000D6E  0101               	movlb	1	; () banked
  1965  000D70  6FC5               	movwf	??_readUartMessage& (0+255),b
  1966  000D72  6BC6               	clrf	(??_readUartMessage+1)& (0+255),b
  1967  000D74  51C5               	movf	??_readUartMessage& (0+255),w,b
  1968  000D76  5DC9               	subwf	readUartMessage@idx& (0+255),w,b
  1969  000D78  51CA               	movf	(readUartMessage@idx+1)& (0+255),w,b
  1970  000D7A  0A80               	xorlw	128
  1971  000D7C  6FC7               	movwf	(??_readUartMessage+2)& (0+255),b
  1972  000D7E  51C6               	movf	(??_readUartMessage+1)& (0+255),w,b
  1973  000D80  0A80               	xorlw	128
  1974  000D82  59C7               	subwfb	(??_readUartMessage+2)& (0+255),w,b
  1975  000D84  A0D8               	btfss	status,0,c
  1976  000D86  D7CF               	goto	l192
  1977                           
  1978                           ; BSR set to: 1
  1979                           ;EusartApp.c: 112: }
  1980                           ;EusartApp.c: 114: cState = CHECK_CRC;
  1981                           
  1982                           ; BSR set to: 1
  1983  000D88  0E06               	movlw	6
  1984  000D8A  0100               	movlb	0	; () banked
  1985  000D8C  6FD1               	movwf	_cState& (0+255),b
  1986                           
  1987                           ; BSR set to: 0
  1988                           ;EusartApp.c: 115: }
  1989                           ;EusartApp.c: 116: break;
  1990  000D8E  0012               	return	
  1991  000D90                     
  1992                           ; BSR set to: 0
  1993                           ;EusartApp.c: 119: if(eusart1RxCount >= 1)
  1994                           
  1995                           ; BSR set to: 0
  1996  000D90  51D2               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  1997  000D92  B4D8               	btfsc	status,2,c
  1998  000D94  0012               	return	
  1999                           
  2000                           ; BSR set to: 0
  2001                           ;EusartApp.c: 120: {
  2002                           ;EusartApp.c: 121: crcGiven = EUSART1_Read();
  2003  000D96  EC64  F017         	call	_EUSART1_Read	;wreg free
  2004  000D9A  0100               	movlb	0	; () banked
  2005  000D9C  6FCB               	movwf	_crcGiven& (0+255),b
  2006                           
  2007                           ; BSR set to: 0
  2008                           ;EusartApp.c: 122: crcCalc = crc8(rxMsgQueue, (0x4) + msgCount);
  2009  000D9E  0ED7               	movlw	low _rxMsgQueue
  2010  000DA0  6E18               	movwf	crc8@dataArray,c
  2011  000DA2  0E00               	movlw	high _rxMsgQueue
  2012  000DA4  6E19               	movwf	crc8@dataArray+1,c
  2013  000DA6  0E04               	movlw	4
  2014  000DA8  25CA               	addwf	_msgCount& (0+255),w,b
  2015  000DAA  6E1A               	movwf	crc8@dataSize,c
  2016  000DAC  6A1B               	clrf	crc8@dataSize+1,c
  2017  000DAE  0E00               	movlw	0
  2018  000DB0  221B               	addwfc	crc8@dataSize+1,f,c
  2019  000DB2  ECD3  F016         	call	_crc8	;wreg free
  2020  000DB6  0100               	movlb	0	; () banked
  2021  000DB8  6FCC               	movwf	_crcCalc& (0+255),b
  2022                           
  2023                           ; BSR set to: 0
  2024                           ;EusartApp.c: 124: if(crcGiven == crcCalc)
  2025  000DBA  51CC               	movf	_crcCalc& (0+255),w,b
  2026  000DBC  19CB               	xorwf	_crcGiven& (0+255),w,b
  2027  000DBE  A4D8               	btfss	status,2,c
  2028  000DC0  D003               	goto	l196
  2029                           
  2030                           ; BSR set to: 0
  2031                           ;EusartApp.c: 125: {
  2032                           ;EusartApp.c: 126: cState = JUMP_FUNCTION;
  2033  000DC2  0E07               	movlw	7
  2034  000DC4  6FD1               	movwf	_cState& (0+255),b
  2035                           
  2036                           ;EusartApp.c: 127: }
  2037  000DC6  0012               	return	
  2038  000DC8                     l196:
  2039                           
  2040                           ; BSR set to: 0
  2041                           ;EusartApp.c: 128: else
  2042                           ;EusartApp.c: 129: {
  2043                           ;EusartApp.c: 130: cState = START_RX_MESSAGE_READ;
  2044                           
  2045                           ; BSR set to: 0
  2046  000DC8  0E00               	movlw	0
  2047  000DCA  6FD1               	movwf	_cState& (0+255),b
  2048                           
  2049                           ; BSR set to: 0
  2050                           ;EusartApp.c: 131: }
  2051                           ;EusartApp.c: 132: }
  2052                           ;EusartApp.c: 133: break;
  2053                           
  2054                           ; BSR set to: 0
  2055  000DCC  0012               	return	
  2056  000DCE                     
  2057                           ; BSR set to: 0
  2058                           ;EusartApp.c: 136: groupsArray[group - 1](request, rxMsgData);
  2059                           
  2060                           ; BSR set to: 0
  2061  000DCE  0EFE               	movlw	254
  2062  000DD0  0101               	movlb	1	; () banked
  2063  000DD2  6FC5               	movwf	??_readUartMessage& (0+255),b
  2064  000DD4  0EFF               	movlw	255
  2065  000DD6  6FC6               	movwf	(??_readUartMessage+1)& (0+255),b
  2066  000DD8  0100               	movlb	0	; () banked
  2067  000DDA  51D0               	movf	_group& (0+255),w,b
  2068  000DDC  0101               	movlb	1	; () banked
  2069  000DDE  6FC7               	movwf	(??_readUartMessage+2)& (0+255),b
  2070  000DE0  6BC8               	clrf	(??_readUartMessage+3)& (0+255),b
  2071  000DE2  90D8               	bcf	status,0,c
  2072  000DE4  37C7               	rlcf	(??_readUartMessage+2)& (0+255),f,b
  2073  000DE6  37C8               	rlcf	(??_readUartMessage+3)& (0+255),f,b
  2074  000DE8  51C5               	movf	??_readUartMessage& (0+255),w,b
  2075  000DEA  27C7               	addwf	(??_readUartMessage+2)& (0+255),f,b
  2076  000DEC  51C6               	movf	(??_readUartMessage+1)& (0+255),w,b
  2077  000DEE  23C8               	addwfc	(??_readUartMessage+3)& (0+255),f,b
  2078  000DF0  0EEB               	movlw	low _groupsArray
  2079  000DF2  25C7               	addwf	(??_readUartMessage+2)& (0+255),w,b
  2080  000DF4  6ED9               	movwf	fsr2l,c
  2081  000DF6  0E00               	movlw	high _groupsArray
  2082  000DF8  21C8               	addwfc	(??_readUartMessage+3)& (0+255),w,b
  2083  000DFA  6EDA               	movwf	fsr2h,c
  2084  000DFC  D801               	call	u7798
  2085  000DFE  D010               	goto	u7799
  2086  000E00                     u7798:
  2087  000E00  0005               	push	
  2088  000E02  6EFA               	movwf	pclath,c
  2089  000E04  50DE               	movf	postinc2,w,c
  2090  000E06  6EFD               	movwf	tosl,c
  2091  000E08  50DE               	movf	postinc2,w,c
  2092  000E0A  6EFE               	movwf	tosh,c
  2093  000E0C  50F8               	movf	tblptru,w,c
  2094  000E0E  6EFF               	movwf	tosu,c
  2095  000E10  50FA               	movf	pclath,w,c
  2096  000E12  0EAE               	movlw	low _rxMsgData
  2097  000E14  6FC2               	movwf	GroupDAC@data& (0+255),b
  2098  000E16  0E01               	movlw	high _rxMsgData
  2099  000E18  6FC3               	movwf	(GroupDAC@data+1)& (0+255),b
  2100  000E1A  0100               	movlb	0	; () banked
  2101  000E1C  51CF               	movf	_request& (0+255),w,b
  2102  000E1E  0012               	return		;indir
  2103  000E20                     u7799:
  2104                           
  2105                           ;EusartApp.c: 137: cState = START_RX_MESSAGE_READ;
  2106  000E20  0E00               	movlw	0
  2107  000E22  0100               	movlb	0	; () banked
  2108  000E24  6FD1               	movwf	_cState& (0+255),b
  2109                           
  2110                           ; BSR set to: 0
  2111                           ;EusartApp.c: 139: }
  2112                           
  2113                           ;EusartApp.c: 138: break;
  2114  000E26  0012               	return	
  2115  000E28                     l172:
  2116                           
  2117                           ; BSR set to: 0
  2118  000E28  0100               	movlb	0	; () banked
  2119  000E2A  51D1               	movf	_cState& (0+255),w,b
  2120                           
  2121                           ; Switch size 1, requested type "space"
  2122                           ; Number of cases is 8, Range of values is 0 to 7
  2123                           ; switch strategies available:
  2124                           ; Name         Instructions Cycles
  2125                           ; simple_byte           25    13 (average)
  2126                           ;	Chosen strategy is simple_byte
  2127  000E2C  0A00               	xorlw	0	; case 0
  2128  000E2E  B4D8               	btfsc	status,2,c
  2129  000E30  D71C               	goto	l173
  2130  000E32  0A01               	xorlw	1	; case 1
  2131  000E34  B4D8               	btfsc	status,2,c
  2132  000E36  D720               	goto	l176
  2133  000E38  0A03               	xorlw	3	; case 2
  2134  000E3A  B4D8               	btfsc	status,2,c
  2135  000E3C  D736               	goto	l181
  2136  000E3E  0A01               	xorlw	1	; case 3
  2137  000E40  B4D8               	btfsc	status,2,c
  2138  000E42  D73F               	goto	l183
  2139  000E44  0A07               	xorlw	7	; case 4
  2140  000E46  B4D8               	btfsc	status,2,c
  2141  000E48  D748               	goto	l185
  2142  000E4A  0A01               	xorlw	1	; case 5
  2143  000E4C  B4D8               	btfsc	status,2,c
  2144  000E4E  D757               	goto	l189
  2145  000E50  0A03               	xorlw	3	; case 6
  2146  000E52  B4D8               	btfsc	status,2,c
  2147  000E54  D79D               	goto	l194
  2148  000E56  0A01               	xorlw	1	; case 7
  2149  000E58  A4D8               	btfss	status,2,c
  2150  000E5A  0012               	return	
  2151  000E5C  D7B8               	goto	l198
  2152  000E5E                     __end_of_readUartMessage:
  2153                           	opt stack 0
  2154                           tosu	equ	0xFFF
  2155                           tosh	equ	0xFFE
  2156                           tosl	equ	0xFFD
  2157                           pclath	equ	0xFFA
  2158                           tblptru	equ	0xFF8
  2159                           tblptrh	equ	0xFF7
  2160                           tblptrl	equ	0xFF6
  2161                           tablat	equ	0xFF5
  2162                           postinc0	equ	0xFEE
  2163                           wreg	equ	0xFE8
  2164                           postdec1	equ	0xFE5
  2165                           fsr1l	equ	0xFE1
  2166                           indf2	equ	0xFDF
  2167                           postinc2	equ	0xFDE
  2168                           fsr2h	equ	0xFDA
  2169                           fsr2l	equ	0xFD9
  2170                           status	equ	0xFD8
  2171                           
  2172 ;; *************** function _InitRxMessageParams *****************
  2173 ;; Defined at:
  2174 ;;		line 142 in file "EusartApp.c"
  2175 ;; Parameters:    Size  Location     Type
  2176 ;;		None
  2177 ;; Auto vars:     Size  Location     Type
  2178 ;;		None
  2179 ;; Return value:  Size  Location     Type
  2180 ;;                  1    wreg      void 
  2181 ;; Registers used:
  2182 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2183 ;; Tracked objects:
  2184 ;;		On entry : 0/0
  2185 ;;		On exit  : 0/0
  2186 ;;		Unchanged: 0/0
  2187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2188 ;;      Params:         0       0       0       0       0       0       0
  2189 ;;      Locals:         0       0       0       0       0       0       0
  2190 ;;      Temps:          0       0       0       0       0       0       0
  2191 ;;      Totals:         0       0       0       0       0       0       0
  2192 ;;Total ram usage:        0 bytes
  2193 ;; Hardware stack levels used:    1
  2194 ;; Hardware stack levels required when called:    5
  2195 ;; This function calls:
  2196 ;;		_ZeroArray
  2197 ;; This function is called by:
  2198 ;;		_readUartMessage
  2199 ;; This function uses a non-reentrant model
  2200 ;;
  2201                           
  2202                           	psect	text2
  2203  00342A                     __ptext2:
  2204                           	opt stack 0
  2205  00342A                     _InitRxMessageParams:
  2206                           	opt stack 24
  2207                           
  2208                           ;EusartApp.c: 146: dataSize = 0;
  2209                           
  2210                           ;incstack = 0
  2211  00342A  0E00               	movlw	0
  2212  00342C  0100               	movlb	0	; () banked
  2213  00342E  6FCE               	movwf	_dataSize& (0+255),b
  2214                           
  2215                           ;EusartApp.c: 147: crcCalc = 0;
  2216  003430  0E00               	movlw	0
  2217  003432  6FCC               	movwf	_crcCalc& (0+255),b
  2218                           
  2219                           ;EusartApp.c: 148: crcGiven = 0;
  2220  003434  0E00               	movlw	0
  2221  003436  6FCB               	movwf	_crcGiven& (0+255),b
  2222                           
  2223                           ;EusartApp.c: 149: msgCount = 0;
  2224  003438  0E00               	movlw	0
  2225  00343A  6FCA               	movwf	_msgCount& (0+255),b
  2226                           
  2227                           ; BSR set to: 0
  2228                           ;EusartApp.c: 150: ZeroArray(rxMsgQueue, (0x14));
  2229  00343C  0ED7               	movlw	low _rxMsgQueue
  2230  00343E  6E20               	movwf	ZeroArray@array,c
  2231  003440  0E00               	movlw	high _rxMsgQueue
  2232  003442  6E21               	movwf	ZeroArray@array+1,c
  2233  003444  0E00               	movlw	0
  2234  003446  6E23               	movwf	ZeroArray@size+1,c
  2235  003448  0E14               	movlw	20
  2236  00344A  6E22               	movwf	ZeroArray@size,c
  2237  00344C  ECDC  F01A         	call	_ZeroArray
  2238  003450  0012               	return		;funcret
  2239  003452                     __end_of_InitRxMessageParams:
  2240                           	opt stack 0
  2241                           tosu	equ	0xFFF
  2242                           tosh	equ	0xFFE
  2243                           tosl	equ	0xFFD
  2244                           pclath	equ	0xFFA
  2245                           tblptru	equ	0xFF8
  2246                           tblptrh	equ	0xFF7
  2247                           tblptrl	equ	0xFF6
  2248                           tablat	equ	0xFF5
  2249                           postinc0	equ	0xFEE
  2250                           wreg	equ	0xFE8
  2251                           postdec1	equ	0xFE5
  2252                           fsr1l	equ	0xFE1
  2253                           indf2	equ	0xFDF
  2254                           postinc2	equ	0xFDE
  2255                           fsr2h	equ	0xFDA
  2256                           fsr2l	equ	0xFD9
  2257                           status	equ	0xFD8
  2258                           
  2259 ;; *************** function _GroupDAC *****************
  2260 ;; Defined at:
  2261 ;;		line 133 in file "MessageFunctions.c"
  2262 ;; Parameters:    Size  Location     Type
  2263 ;;  request         1    wreg     enum E12
  2264 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2265 ;;		 -> rxMsgData(20), 
  2266 ;; Auto vars:     Size  Location     Type
  2267 ;;  request         1   95[BANK0 ] enum E12
  2268 ;; Return value:  Size  Location     Type
  2269 ;;                  1    wreg      void 
  2270 ;; Registers used:
  2271 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2272 ;; Tracked objects:
  2273 ;;		On entry : 0/0
  2274 ;;		On exit  : 0/0
  2275 ;;		Unchanged: 0/0
  2276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2277 ;;      Params:         0       0       2       0       0       0       0
  2278 ;;      Locals:         0       1       0       0       0       0       0
  2279 ;;      Temps:          0       0       0       0       0       0       0
  2280 ;;      Totals:         0       1       2       0       0       0       0
  2281 ;;Total ram usage:        3 bytes
  2282 ;; Hardware stack levels used:    1
  2283 ;; Hardware stack levels required when called:    8
  2284 ;; This function calls:
  2285 ;;		_DacSetValue
  2286 ;; This function is called by:
  2287 ;;		_readUartMessage
  2288 ;; This function uses a non-reentrant model
  2289 ;;
  2290                           
  2291                           	psect	text3
  2292  00355C                     __ptext3:
  2293                           	opt stack 0
  2294  00355C                     _GroupDAC:
  2295                           	opt stack 21
  2296                           
  2297                           ;incstack = 0
  2298                           ;GroupDAC@request stored from wreg
  2299  00355C  0100               	movlb	0	; () banked
  2300  00355E  6FBF               	movwf	GroupDAC@request& (0+255),b
  2301                           
  2302                           ;MessageFunctions.c: 135: switch (request)
  2303  003560  D007               	goto	l1192
  2304  003562                     
  2305                           ;MessageFunctions.c: 138: DacSetValue(data);
  2306  003562  C1C2  F02E         	movff	GroupDAC@data,DacSetValue@data
  2307  003566  C1C3  F02F         	movff	GroupDAC@data+1,DacSetValue@data+1
  2308  00356A  EC33  F019         	call	_DacSetValue	;wreg free
  2309                           
  2310                           ;MessageFunctions.c: 143: }
  2311                           
  2312                           ;MessageFunctions.c: 142: break;
  2313                           
  2314                           ;MessageFunctions.c: 141: default:
  2315                           
  2316                           ;MessageFunctions.c: 139: break;
  2317  00356E  0012               	return	
  2318  003570                     l1192:
  2319  003570  0100               	movlb	0	; () banked
  2320  003572  51BF               	movf	GroupDAC@request& (0+255),w,b
  2321                           
  2322                           ; Switch size 1, requested type "space"
  2323                           ; Number of cases is 1, Range of values is 97 to 97
  2324                           ; switch strategies available:
  2325                           ; Name         Instructions Cycles
  2326                           ; simple_byte            4     3 (average)
  2327                           ;	Chosen strategy is simple_byte
  2328  003574  0A61               	xorlw	97	; case 97
  2329  003576  A4D8               	btfss	status,2,c
  2330  003578  0012               	return	
  2331  00357A  D7F3               	goto	l1193
  2332  00357C                     __end_of_GroupDAC:
  2333                           	opt stack 0
  2334                           tosu	equ	0xFFF
  2335                           tosh	equ	0xFFE
  2336                           tosl	equ	0xFFD
  2337                           pclath	equ	0xFFA
  2338                           tblptru	equ	0xFF8
  2339                           tblptrh	equ	0xFF7
  2340                           tblptrl	equ	0xFF6
  2341                           tablat	equ	0xFF5
  2342                           postinc0	equ	0xFEE
  2343                           wreg	equ	0xFE8
  2344                           postdec1	equ	0xFE5
  2345                           fsr1l	equ	0xFE1
  2346                           indf2	equ	0xFDF
  2347                           postinc2	equ	0xFDE
  2348                           fsr2h	equ	0xFDA
  2349                           fsr2l	equ	0xFD9
  2350                           status	equ	0xFD8
  2351                           
  2352 ;; *************** function _GroupFlashMemory *****************
  2353 ;; Defined at:
  2354 ;;		line 112 in file "MessageFunctions.c"
  2355 ;; Parameters:    Size  Location     Type
  2356 ;;  request         1    wreg     enum E12
  2357 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2358 ;; Auto vars:     Size  Location     Type
  2359 ;;  request         1    2[BANK1 ] enum E12
  2360 ;; Return value:  Size  Location     Type
  2361 ;;                  1    wreg      void 
  2362 ;; Registers used:
  2363 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2364 ;; Tracked objects:
  2365 ;;		On entry : 0/0
  2366 ;;		On exit  : 0/0
  2367 ;;		Unchanged: 0/0
  2368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2369 ;;      Params:         0       0       2       0       0       0       0
  2370 ;;      Locals:         0       0       1       0       0       0       0
  2371 ;;      Temps:          0       1       0       0       0       0       0
  2372 ;;      Totals:         0       1       3       0       0       0       0
  2373 ;;Total ram usage:        4 bytes
  2374 ;; Hardware stack levels used:    1
  2375 ;; Hardware stack levels required when called:    7
  2376 ;; This function calls:
  2377 ;;		_FlashEreaseMem
  2378 ;;		_FlashReadCondition
  2379 ;;		_FlashReadUart
  2380 ;; This function is called by:
  2381 ;;		_readUartMessage
  2382 ;; This function uses a non-reentrant model
  2383 ;;
  2384                           
  2385                           	psect	text4
  2386  002E84                     __ptext4:
  2387                           	opt stack 0
  2388  002E84                     _GroupFlashMemory:
  2389                           	opt stack 22
  2390                           
  2391                           ;incstack = 0
  2392                           ;GroupFlashMemory@request stored from wreg
  2393  002E84  0101               	movlb	1	; () banked
  2394  002E86  6FC4               	movwf	GroupFlashMemory@request& (0+255),b
  2395                           
  2396                           ;MessageFunctions.c: 114: switch (request)
  2397  002E88  D013               	goto	l1183
  2398  002E8A                     
  2399                           ;MessageFunctions.c: 117: FlashEreaseMem();
  2400  002E8A  EC81  F016         	call	_FlashEreaseMem	;wreg free
  2401                           
  2402                           ;MessageFunctions.c: 118: break;
  2403  002E8E  0012               	return	
  2404  002E90                     
  2405                           ;MessageFunctions.c: 121: FlashReadCondition();
  2406  002E90  EC14  F00C         	call	_FlashReadCondition	;wreg free
  2407                           
  2408                           ;MessageFunctions.c: 122: break;
  2409  002E94  0012               	return	
  2410  002E96                     
  2411                           ;MessageFunctions.c: 125: FlashReadUart((int)data[0]);
  2412  002E96  C1C2  FFD9         	movff	GroupFlashMemory@data,fsr2l
  2413  002E9A  C1C3  FFDA         	movff	GroupFlashMemory@data+1,fsr2h
  2414  002E9E  50DF               	movf	indf2,w,c
  2415  002EA0  0100               	movlb	0	; () banked
  2416  002EA2  6FBF               	movwf	??_GroupFlashMemory& (0+255),b
  2417  002EA4  51BF               	movf	??_GroupFlashMemory& (0+255),w,b
  2418  002EA6  6E2C               	movwf	FlashReadUart@numOfSampleToRead,c
  2419  002EA8  6A2D               	clrf	FlashReadUart@numOfSampleToRead+1,c
  2420  002EAA  EC3B  F003         	call	_FlashReadUart	;wreg free
  2421                           
  2422                           ;MessageFunctions.c: 130: }
  2423                           
  2424                           ;MessageFunctions.c: 129: break;
  2425                           
  2426                           ;MessageFunctions.c: 128: default:
  2427                           
  2428                           ;MessageFunctions.c: 126: break;
  2429  002EAE  0012               	return	
  2430  002EB0                     l1183:
  2431  002EB0  0101               	movlb	1	; () banked
  2432  002EB2  51C4               	movf	GroupFlashMemory@request& (0+255),w,b
  2433                           
  2434                           ; Switch size 1, requested type "space"
  2435                           ; Number of cases is 3, Range of values is 81 to 83
  2436                           ; switch strategies available:
  2437                           ; Name         Instructions Cycles
  2438                           ; simple_byte           10     6 (average)
  2439                           ;	Chosen strategy is simple_byte
  2440  002EB4  0A51               	xorlw	81	; case 81
  2441  002EB6  B4D8               	btfsc	status,2,c
  2442  002EB8  D7E8               	goto	l1184
  2443  002EBA  0A03               	xorlw	3	; case 82
  2444  002EBC  B4D8               	btfsc	status,2,c
  2445  002EBE  D7E8               	goto	l1186
  2446  002EC0  0A01               	xorlw	1	; case 83
  2447  002EC2  A4D8               	btfss	status,2,c
  2448  002EC4  0012               	return	
  2449  002EC6  D7E7               	goto	l1187
  2450  002EC8                     __end_of_GroupFlashMemory:
  2451                           	opt stack 0
  2452                           tosu	equ	0xFFF
  2453                           tosh	equ	0xFFE
  2454                           tosl	equ	0xFFD
  2455                           pclath	equ	0xFFA
  2456                           tblptru	equ	0xFF8
  2457                           tblptrh	equ	0xFF7
  2458                           tblptrl	equ	0xFF6
  2459                           tablat	equ	0xFF5
  2460                           postinc0	equ	0xFEE
  2461                           wreg	equ	0xFE8
  2462                           postdec1	equ	0xFE5
  2463                           fsr1l	equ	0xFE1
  2464                           indf2	equ	0xFDF
  2465                           postinc2	equ	0xFDE
  2466                           fsr2h	equ	0xFDA
  2467                           fsr2l	equ	0xFD9
  2468                           status	equ	0xFD8
  2469                           
  2470 ;; *************** function _GroupAdc *****************
  2471 ;; Defined at:
  2472 ;;		line 67 in file "MessageFunctions.c"
  2473 ;; Parameters:    Size  Location     Type
  2474 ;;  request         1    wreg     enum E12
  2475 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2476 ;; Auto vars:     Size  Location     Type
  2477 ;;  request         1   95[BANK0 ] enum E12
  2478 ;; Return value:  Size  Location     Type
  2479 ;;                  1    wreg      void 
  2480 ;; Registers used:
  2481 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2482 ;; Tracked objects:
  2483 ;;		On entry : 0/0
  2484 ;;		On exit  : 0/0
  2485 ;;		Unchanged: 0/0
  2486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2487 ;;      Params:         0       0       2       0       0       0       0
  2488 ;;      Locals:         0       1       0       0       0       0       0
  2489 ;;      Temps:          0       0       0       0       0       0       0
  2490 ;;      Totals:         0       1       2       0       0       0       0
  2491 ;;Total ram usage:        3 bytes
  2492 ;; Hardware stack levels used:    1
  2493 ;; Hardware stack levels required when called:    7
  2494 ;; This function calls:
  2495 ;;		_SetAdcOperationMode
  2496 ;;		_SetChannelMode
  2497 ;;		_SetConversionResultFormat
  2498 ;; This function is called by:
  2499 ;;		_readUartMessage
  2500 ;; This function uses a non-reentrant model
  2501 ;;
  2502                           
  2503                           	psect	text5
  2504  002DF4                     __ptext5:
  2505                           	opt stack 0
  2506  002DF4                     _GroupAdc:
  2507                           	opt stack 22
  2508                           
  2509                           ;incstack = 0
  2510                           ;GroupAdc@request stored from wreg
  2511  002DF4  0100               	movlb	0	; () banked
  2512  002DF6  6FBF               	movwf	GroupAdc@request& (0+255),b
  2513                           
  2514                           ;MessageFunctions.c: 69: switch (request)
  2515  002DF8  D015               	goto	l1164
  2516  002DFA                     
  2517                           ;MessageFunctions.c: 72: SetAdcOperationMode(data);
  2518  002DFA  C1C2  F02C         	movff	GroupAdc@data,SetAdcOperationMode@data
  2519  002DFE  C1C3  F02D         	movff	GroupAdc@data+1,SetAdcOperationMode@data+1
  2520  002E02  EC88  F01B         	call	_SetAdcOperationMode	;wreg free
  2521                           
  2522                           ;MessageFunctions.c: 73: break;
  2523  002E06  0012               	return	
  2524  002E08                     
  2525                           ;MessageFunctions.c: 76: SetChannelMode(data);
  2526  002E08  C1C2  F02C         	movff	GroupAdc@data,SetChannelMode@data
  2527  002E0C  C1C3  F02D         	movff	GroupAdc@data+1,SetChannelMode@data+1
  2528  002E10  ECB8  F019         	call	_SetChannelMode	;wreg free
  2529                           
  2530                           ;MessageFunctions.c: 77: break;
  2531  002E14  0012               	return	
  2532  002E16                     
  2533                           ;MessageFunctions.c: 80: SetConversionResultFormat(data);
  2534  002E16  C1C2  F02C         	movff	GroupAdc@data,SetConversionResultFormat@data
  2535  002E1A  C1C3  F02D         	movff	GroupAdc@data+1,SetConversionResultFormat@data+1
  2536  002E1E  EC82  F01B         	call	_SetConversionResultFormat	;wreg free
  2537                           
  2538                           ;MessageFunctions.c: 85: }
  2539                           
  2540                           ;MessageFunctions.c: 84: break;
  2541                           
  2542                           ;MessageFunctions.c: 83: default:
  2543                           
  2544                           ;MessageFunctions.c: 81: break;
  2545  002E22  0012               	return	
  2546  002E24                     l1164:
  2547  002E24  0100               	movlb	0	; () banked
  2548  002E26  51BF               	movf	GroupAdc@request& (0+255),w,b
  2549                           
  2550                           ; Switch size 1, requested type "space"
  2551                           ; Number of cases is 3, Range of values is 49 to 51
  2552                           ; switch strategies available:
  2553                           ; Name         Instructions Cycles
  2554                           ; simple_byte           10     6 (average)
  2555                           ;	Chosen strategy is simple_byte
  2556  002E28  0A31               	xorlw	49	; case 49
  2557  002E2A  B4D8               	btfsc	status,2,c
  2558  002E2C  D7E6               	goto	l1165
  2559  002E2E  0A03               	xorlw	3	; case 50
  2560  002E30  B4D8               	btfsc	status,2,c
  2561  002E32  D7EA               	goto	l1167
  2562  002E34  0A01               	xorlw	1	; case 51
  2563  002E36  A4D8               	btfss	status,2,c
  2564  002E38  0012               	return	
  2565  002E3A  D7ED               	goto	l1168
  2566  002E3C                     __end_of_GroupAdc:
  2567                           	opt stack 0
  2568                           tosu	equ	0xFFF
  2569                           tosh	equ	0xFFE
  2570                           tosl	equ	0xFFD
  2571                           pclath	equ	0xFFA
  2572                           tblptru	equ	0xFF8
  2573                           tblptrh	equ	0xFF7
  2574                           tblptrl	equ	0xFF6
  2575                           tablat	equ	0xFF5
  2576                           postinc0	equ	0xFEE
  2577                           wreg	equ	0xFE8
  2578                           postdec1	equ	0xFE5
  2579                           fsr1l	equ	0xFE1
  2580                           indf2	equ	0xFDF
  2581                           postinc2	equ	0xFDE
  2582                           fsr2h	equ	0xFDA
  2583                           fsr2l	equ	0xFD9
  2584                           status	equ	0xFD8
  2585                           
  2586 ;; *************** function _GroupStatusAndVersion *****************
  2587 ;; Defined at:
  2588 ;;		line 38 in file "MessageFunctions.c"
  2589 ;; Parameters:    Size  Location     Type
  2590 ;;  request         1    wreg     enum E12
  2591 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2592 ;; Auto vars:     Size  Location     Type
  2593 ;;  request         1   95[BANK0 ] enum E12
  2594 ;; Return value:  Size  Location     Type
  2595 ;;                  1    wreg      void 
  2596 ;; Registers used:
  2597 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2598 ;; Tracked objects:
  2599 ;;		On entry : 0/0
  2600 ;;		On exit  : 0/0
  2601 ;;		Unchanged: 0/0
  2602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2603 ;;      Params:         0       0       2       0       0       0       0
  2604 ;;      Locals:         0       1       0       0       0       0       0
  2605 ;;      Temps:          0       0       0       0       0       0       0
  2606 ;;      Totals:         0       1       2       0       0       0       0
  2607 ;;Total ram usage:        3 bytes
  2608 ;; Hardware stack levels used:    1
  2609 ;; Hardware stack levels required when called:    7
  2610 ;; This function calls:
  2611 ;;		_GetCpldFwVersion
  2612 ;;		_GetMcuFwVersion
  2613 ;;		_GetMcuRunTime
  2614 ;;		_SetCpldFwVersion
  2615 ;;		_SetMcuFwVersion
  2616 ;; This function is called by:
  2617 ;;		_readUartMessage
  2618 ;; This function uses a non-reentrant model
  2619 ;;
  2620                           
  2621                           	psect	text6
  2622  002B50                     __ptext6:
  2623                           	opt stack 0
  2624  002B50                     _GroupStatusAndVersion:
  2625                           	opt stack 22
  2626                           
  2627                           ;incstack = 0
  2628                           ;GroupStatusAndVersion@request stored from wreg
  2629  002B50  0100               	movlb	0	; () banked
  2630  002B52  6FBF               	movwf	GroupStatusAndVersion@request& (0+255),b
  2631                           
  2632                           ;MessageFunctions.c: 40: switch (request)
  2633  002B54  D017               	goto	l1153
  2634  002B56                     
  2635                           ;MessageFunctions.c: 43: GetMcuFwVersion();
  2636  002B56  EC3B  F013         	call	_GetMcuFwVersion	;wreg free
  2637                           
  2638                           ;MessageFunctions.c: 44: break;
  2639  002B5A  0012               	return	
  2640  002B5C                     
  2641                           ;MessageFunctions.c: 47: SetMcuFwVersion(data);
  2642  002B5C  C1C2  F02C         	movff	GroupStatusAndVersion@data,SetMcuFwVersion@data
  2643  002B60  C1C3  F02D         	movff	GroupStatusAndVersion@data+1,SetMcuFwVersion@data+1
  2644  002B64  ECFD  F018         	call	_SetMcuFwVersion	;wreg free
  2645                           
  2646                           ;MessageFunctions.c: 48: break;
  2647  002B68  0012               	return	
  2648  002B6A                     
  2649                           ;MessageFunctions.c: 51: GetCpldFwVersion();
  2650  002B6A  EC22  F012         	call	_GetCpldFwVersion	;wreg free
  2651                           
  2652                           ;MessageFunctions.c: 52: break;
  2653  002B6E  0012               	return	
  2654  002B70                     
  2655                           ;MessageFunctions.c: 55: SetCpldFwVersion(data);
  2656  002B70  C1C2  F02C         	movff	GroupStatusAndVersion@data,SetCpldFwVersion@data
  2657  002B74  C1C3  F02D         	movff	GroupStatusAndVersion@data+1,SetCpldFwVersion@data+1
  2658  002B78  ECEA  F017         	call	_SetCpldFwVersion	;wreg free
  2659                           
  2660                           ;MessageFunctions.c: 56: break;
  2661  002B7C  0012               	return	
  2662  002B7E                     
  2663                           ;MessageFunctions.c: 59: GetMcuRunTime();
  2664  002B7E  EC82  F00E         	call	_GetMcuRunTime	;wreg free
  2665                           
  2666                           ;MessageFunctions.c: 64: }
  2667                           
  2668                           ;MessageFunctions.c: 63: break;
  2669                           
  2670                           ;MessageFunctions.c: 62: default:
  2671                           
  2672                           ;MessageFunctions.c: 60: break;
  2673  002B82  0012               	return	
  2674  002B84                     l1153:
  2675  002B84  0100               	movlb	0	; () banked
  2676  002B86  51BF               	movf	GroupStatusAndVersion@request& (0+255),w,b
  2677                           
  2678                           ; Switch size 1, requested type "space"
  2679                           ; Number of cases is 5, Range of values is 33 to 37
  2680                           ; switch strategies available:
  2681                           ; Name         Instructions Cycles
  2682                           ; simple_byte           16     9 (average)
  2683                           ;	Chosen strategy is simple_byte
  2684  002B88  0A21               	xorlw	33	; case 33
  2685  002B8A  B4D8               	btfsc	status,2,c
  2686  002B8C  D7F8               	goto	l1159
  2687  002B8E  0A03               	xorlw	3	; case 34
  2688  002B90  B4D8               	btfsc	status,2,c
  2689  002B92  D7E1               	goto	l1154
  2690  002B94  0A01               	xorlw	1	; case 35
  2691  002B96  B4D8               	btfsc	status,2,c
  2692  002B98  D7E8               	goto	l1157
  2693  002B9A  0A07               	xorlw	7	; case 36
  2694  002B9C  B4D8               	btfsc	status,2,c
  2695  002B9E  D7DE               	goto	l1156
  2696  002BA0  0A01               	xorlw	1	; case 37
  2697  002BA2  A4D8               	btfss	status,2,c
  2698  002BA4  0012               	return	
  2699  002BA6  D7E4               	goto	l1158
  2700  002BA8                     __end_of_GroupStatusAndVersion:
  2701                           	opt stack 0
  2702                           tosu	equ	0xFFF
  2703                           tosh	equ	0xFFE
  2704                           tosl	equ	0xFFD
  2705                           pclath	equ	0xFFA
  2706                           tblptru	equ	0xFF8
  2707                           tblptrh	equ	0xFF7
  2708                           tblptrl	equ	0xFF6
  2709                           tablat	equ	0xFF5
  2710                           postinc0	equ	0xFEE
  2711                           wreg	equ	0xFE8
  2712                           postdec1	equ	0xFE5
  2713                           fsr1l	equ	0xFE1
  2714                           indf2	equ	0xFDF
  2715                           postinc2	equ	0xFDE
  2716                           fsr2h	equ	0xFDA
  2717                           fsr2l	equ	0xFD9
  2718                           status	equ	0xFD8
  2719                           
  2720 ;; *************** function _GroupControlMcu *****************
  2721 ;; Defined at:
  2722 ;;		line 11 in file "MessageFunctions.c"
  2723 ;; Parameters:    Size  Location     Type
  2724 ;;  request         1    wreg     enum E12
  2725 ;;  data            3    0[BANK1 ] PTR unsigned char 
  2726 ;; Auto vars:     Size  Location     Type
  2727 ;;  request         1   95[BANK0 ] enum E12
  2728 ;; Return value:  Size  Location     Type
  2729 ;;                  1    wreg      void 
  2730 ;; Registers used:
  2731 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2732 ;; Tracked objects:
  2733 ;;		On entry : 0/0
  2734 ;;		On exit  : 0/0
  2735 ;;		Unchanged: 0/0
  2736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2737 ;;      Params:         0       0       2       0       0       0       0
  2738 ;;      Locals:         0       1       0       0       0       0       0
  2739 ;;      Temps:          0       0       0       0       0       0       0
  2740 ;;      Totals:         0       1       2       0       0       0       0
  2741 ;;Total ram usage:        3 bytes
  2742 ;; Hardware stack levels used:    1
  2743 ;; Hardware stack levels required when called:    7
  2744 ;; This function calls:
  2745 ;;		_ResetCpld
  2746 ;;		_ResetMcu
  2747 ;;		_testLeds
  2748 ;; This function is called by:
  2749 ;;		_readUartMessage
  2750 ;; This function uses a non-reentrant model
  2751 ;;
  2752                           
  2753                           	psect	text7
  2754  00309A                     __ptext7:
  2755                           	opt stack 0
  2756  00309A                     _GroupControlMcu:
  2757                           	opt stack 22
  2758                           
  2759                           ;incstack = 0
  2760                           ;GroupControlMcu@request stored from wreg
  2761  00309A  0100               	movlb	0	; () banked
  2762  00309C  6FBF               	movwf	GroupControlMcu@request& (0+255),b
  2763                           
  2764                           ;MessageFunctions.c: 13: switch (request)
  2765  00309E  D009               	goto	l1142
  2766  0030A0                     
  2767                           ;MessageFunctions.c: 16: testLeds();
  2768  0030A0  ECF2  F013         	call	_testLeds	;wreg free
  2769                           
  2770                           ;MessageFunctions.c: 17: break;
  2771  0030A4  0012               	return	
  2772  0030A6                     
  2773                           ;MessageFunctions.c: 20: ResetMcu();
  2774  0030A6  EC60  F01B         	call	_ResetMcu	;wreg free
  2775                           
  2776                           ;MessageFunctions.c: 21: break;
  2777  0030AA  0012               	return	
  2778  0030AC                     
  2779                           ;MessageFunctions.c: 24: ResetCpld();
  2780  0030AC  EC7C  F01B         	call	_ResetCpld	;wreg free
  2781                           
  2782                           ;MessageFunctions.c: 35: }
  2783                           
  2784                           ;MessageFunctions.c: 34: break;
  2785                           
  2786                           ;MessageFunctions.c: 33: default:
  2787                           
  2788                           ;MessageFunctions.c: 31: break;
  2789                           
  2790                           ;MessageFunctions.c: 30: case CONTROL_PA2_SET:
  2791                           
  2792                           ;MessageFunctions.c: 28: break;
  2793                           
  2794                           ;MessageFunctions.c: 27: case CONTROL_PA1_SET:
  2795                           
  2796                           ;MessageFunctions.c: 25: break;
  2797  0030B0  0012               	return	
  2798  0030B2                     l1142:
  2799  0030B2  0100               	movlb	0	; () banked
  2800  0030B4  51BF               	movf	GroupControlMcu@request& (0+255),w,b
  2801                           
  2802                           ; Switch size 1, requested type "space"
  2803                           ; Number of cases is 5, Range of values is 17 to 21
  2804                           ; switch strategies available:
  2805                           ; Name         Instructions Cycles
  2806                           ; simple_byte           16     9 (average)
  2807                           ;	Chosen strategy is simple_byte
  2808  0030B6  0A11               	xorlw	17	; case 17
  2809  0030B8  B4D8               	btfsc	status,2,c
  2810  0030BA  D7F5               	goto	l1145
  2811  0030BC  0A03               	xorlw	3	; case 18
  2812  0030BE  B4D8               	btfsc	status,2,c
  2813  0030C0  D7F5               	goto	l1146
  2814  0030C2  0A01               	xorlw	1	; case 19
  2815  0030C4  B4D8               	btfsc	status,2,c
  2816  0030C6  0012               	return	
  2817  0030C8  0A07               	xorlw	7	; case 20
  2818  0030CA  B4D8               	btfsc	status,2,c
  2819  0030CC  0012               	return	
  2820  0030CE  0A01               	xorlw	1	; case 21
  2821  0030D0  A4D8               	btfss	status,2,c
  2822  0030D2  0012               	return	
  2823  0030D4  D7E5               	goto	l1143
  2824  0030D6                     __end_of_GroupControlMcu:
  2825                           	opt stack 0
  2826                           tosu	equ	0xFFF
  2827                           tosh	equ	0xFFE
  2828                           tosl	equ	0xFFD
  2829                           pclath	equ	0xFFA
  2830                           tblptru	equ	0xFF8
  2831                           tblptrh	equ	0xFF7
  2832                           tblptrl	equ	0xFF6
  2833                           tablat	equ	0xFF5
  2834                           postinc0	equ	0xFEE
  2835                           wreg	equ	0xFE8
  2836                           postdec1	equ	0xFE5
  2837                           fsr1l	equ	0xFE1
  2838                           indf2	equ	0xFDF
  2839                           postinc2	equ	0xFDE
  2840                           fsr2h	equ	0xFDA
  2841                           fsr2l	equ	0xFD9
  2842                           status	equ	0xFD8
  2843                           
  2844 ;; *************** function _GroupSynthesizers *****************
  2845 ;; Defined at:
  2846 ;;		line 87 in file "MessageFunctions.c"
  2847 ;; Parameters:    Size  Location     Type
  2848 ;;  request         1    wreg     enum E12
  2849 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2850 ;; Auto vars:     Size  Location     Type
  2851 ;;  request         1   95[BANK0 ] enum E12
  2852 ;; Return value:  Size  Location     Type
  2853 ;;                  1    wreg      void 
  2854 ;; Registers used:
  2855 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2856 ;; Tracked objects:
  2857 ;;		On entry : 0/0
  2858 ;;		On exit  : 0/0
  2859 ;;		Unchanged: 0/0
  2860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2861 ;;      Params:         0       0       2       0       0       0       0
  2862 ;;      Locals:         0       1       0       0       0       0       0
  2863 ;;      Temps:          0       0       0       0       0       0       0
  2864 ;;      Totals:         0       1       2       0       0       0       0
  2865 ;;Total ram usage:        3 bytes
  2866 ;; Hardware stack levels used:    1
  2867 ;; Hardware stack levels required when called:    8
  2868 ;; This function calls:
  2869 ;;		_PLLUartInitialize
  2870 ;;		_UpdateRxFreq
  2871 ;;		_UpdateTxFreq
  2872 ;; This function is called by:
  2873 ;;		_readUartMessage
  2874 ;; This function uses a non-reentrant model
  2875 ;;
  2876                           
  2877                           	psect	text8
  2878  002A3C                     __ptext8:
  2879                           	opt stack 0
  2880  002A3C                     _GroupSynthesizers:
  2881                           	opt stack 21
  2882                           
  2883                           ;incstack = 0
  2884                           ;GroupSynthesizers@request stored from wreg
  2885  002A3C  0100               	movlb	0	; () banked
  2886  002A3E  6FBF               	movwf	GroupSynthesizers@request& (0+255),b
  2887                           
  2888                           ;MessageFunctions.c: 89: switch (request)
  2889  002A40  D01C               	goto	l1173
  2890  002A42                     
  2891                           ;MessageFunctions.c: 92: PLLUartInitialize(data);
  2892  002A42  C1C2  F018         	movff	GroupSynthesizers@data,PLLUartInitialize@data
  2893  002A46  C1C3  F019         	movff	GroupSynthesizers@data+1,PLLUartInitialize@data+1
  2894  002A4A  ECB3  F01B         	call	_PLLUartInitialize	;wreg free
  2895                           
  2896                           ;MessageFunctions.c: 93: break;
  2897  002A4E  0012               	return	
  2898  002A50                     
  2899                           ;MessageFunctions.c: 96: PLLUartInitialize(data);
  2900  002A50  C1C2  F018         	movff	GroupSynthesizers@data,PLLUartInitialize@data
  2901  002A54  C1C3  F019         	movff	GroupSynthesizers@data+1,PLLUartInitialize@data+1
  2902  002A58  ECB3  F01B         	call	_PLLUartInitialize	;wreg free
  2903                           
  2904                           ;MessageFunctions.c: 97: break;
  2905  002A5C  0012               	return	
  2906  002A5E                     
  2907                           ;MessageFunctions.c: 100: UpdateTxFreq(data);
  2908  002A5E  C1C2  F02E         	movff	GroupSynthesizers@data,UpdateTxFreq@data
  2909  002A62  C1C3  F02F         	movff	GroupSynthesizers@data+1,UpdateTxFreq@data+1
  2910  002A66  ECA8  F017         	call	_UpdateTxFreq	;wreg free
  2911                           
  2912                           ;MessageFunctions.c: 101: break;
  2913  002A6A  0012               	return	
  2914  002A6C                     
  2915                           ;MessageFunctions.c: 104: UpdateRxFreq(data);
  2916  002A6C  C1C2  F02E         	movff	GroupSynthesizers@data,UpdateRxFreq@data
  2917  002A70  C1C3  F02F         	movff	GroupSynthesizers@data+1,UpdateRxFreq@data+1
  2918  002A74  ECC9  F017         	call	_UpdateRxFreq	;wreg free
  2919                           
  2920                           ;MessageFunctions.c: 109: }
  2921                           
  2922                           ;MessageFunctions.c: 108: break;
  2923                           
  2924                           ;MessageFunctions.c: 107: default:
  2925                           
  2926                           ;MessageFunctions.c: 105: break;
  2927  002A78  0012               	return	
  2928  002A7A                     l1173:
  2929  002A7A  0100               	movlb	0	; () banked
  2930  002A7C  51BF               	movf	GroupSynthesizers@request& (0+255),w,b
  2931                           
  2932                           ; Switch size 1, requested type "space"
  2933                           ; Number of cases is 4, Range of values is 64 to 67
  2934                           ; switch strategies available:
  2935                           ; Name         Instructions Cycles
  2936                           ; simple_byte           13     7 (average)
  2937                           ;	Chosen strategy is simple_byte
  2938  002A7E  0A40               	xorlw	64	; case 64
  2939  002A80  B4D8               	btfsc	status,2,c
  2940  002A82  D7DF               	goto	l1174
  2941  002A84  0A01               	xorlw	1	; case 65
  2942  002A86  B4D8               	btfsc	status,2,c
  2943  002A88  D7E3               	goto	l1176
  2944  002A8A  0A03               	xorlw	3	; case 66
  2945  002A8C  B4D8               	btfsc	status,2,c
  2946  002A8E  D7E7               	goto	l1177
  2947  002A90  0A01               	xorlw	1	; case 67
  2948  002A92  A4D8               	btfss	status,2,c
  2949  002A94  0012               	return	
  2950  002A96  D7EA               	goto	l1178
  2951  002A98                     __end_of_GroupSynthesizers:
  2952                           	opt stack 0
  2953                           tosu	equ	0xFFF
  2954                           tosh	equ	0xFFE
  2955                           tosl	equ	0xFFD
  2956                           pclath	equ	0xFFA
  2957                           tblptru	equ	0xFF8
  2958                           tblptrh	equ	0xFF7
  2959                           tblptrl	equ	0xFF6
  2960                           tablat	equ	0xFF5
  2961                           postinc0	equ	0xFEE
  2962                           wreg	equ	0xFE8
  2963                           postdec1	equ	0xFE5
  2964                           fsr1l	equ	0xFE1
  2965                           indf2	equ	0xFDF
  2966                           postinc2	equ	0xFDE
  2967                           fsr2h	equ	0xFDA
  2968                           fsr2l	equ	0xFD9
  2969                           status	equ	0xFD8
  2970                           
  2971 ;; *************** function _UpdateTxFreq *****************
  2972 ;; Defined at:
  2973 ;;		line 61 in file "SyntApp.c"
  2974 ;; Parameters:    Size  Location     Type
  2975 ;;  data            2   45[COMRAM] PTR unsigned char 
  2976 ;; Auto vars:     Size  Location     Type
  2977 ;;  regData         4   21[BANK0 ] unsigned long 
  2978 ;; Return value:  Size  Location     Type
  2979 ;;                  1    wreg      void 
  2980 ;; Registers used:
  2981 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2982 ;; Tracked objects:
  2983 ;;		On entry : 0/0
  2984 ;;		On exit  : 0/0
  2985 ;;		Unchanged: 0/0
  2986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2987 ;;      Params:         2       0       0       0       0       0       0
  2988 ;;      Locals:         0       4       0       0       0       0       0
  2989 ;;      Temps:          0       0       0       0       0       0       0
  2990 ;;      Totals:         2       4       0       0       0       0       0
  2991 ;;Total ram usage:        6 bytes
  2992 ;; Hardware stack levels used:    1
  2993 ;; Hardware stack levels required when called:    7
  2994 ;; This function calls:
  2995 ;;		_GetIntFromUartData
  2996 ;;		_SWSPI_send_word
  2997 ;;		_SendAckMessage
  2998 ;; This function is called by:
  2999 ;;		_GroupSynthesizers
  3000 ;; This function uses a non-reentrant model
  3001 ;;
  3002                           
  3003                           	psect	text9
  3004  002F50                     __ptext9:
  3005                           	opt stack 0
  3006  002F50                     _UpdateTxFreq:
  3007                           	opt stack 21
  3008                           
  3009                           ;SyntApp.c: 63: uint32_t regData = GetIntFromUartData(data);
  3010                           
  3011                           ;incstack = 0
  3012  002F50  C02E  F066         	movff	UpdateTxFreq@data,GetIntFromUartData@data
  3013  002F54  C02F  F067         	movff	UpdateTxFreq@data+1,GetIntFromUartData@data+1
  3014  002F58  EC3F  F011         	call	_GetIntFromUartData	;wreg free
  3015  002F5C  C066  F075         	movff	?_GetIntFromUartData,UpdateTxFreq@regData
  3016  002F60  C067  F076         	movff	?_GetIntFromUartData+1,UpdateTxFreq@regData+1
  3017  002F64  C068  F077         	movff	?_GetIntFromUartData+2,UpdateTxFreq@regData+2
  3018  002F68  C069  F078         	movff	?_GetIntFromUartData+3,UpdateTxFreq@regData+3
  3019                           
  3020                           ;SyntApp.c: 64: SWSPI_send_word(SYNTH_TX, regData, 3);
  3021  002F6C  C075  F021         	movff	UpdateTxFreq@regData,SWSPI_send_word@data
  3022  002F70  C076  F022         	movff	UpdateTxFreq@regData+1,SWSPI_send_word@data+1
  3023  002F74  C077  F023         	movff	UpdateTxFreq@regData+2,SWSPI_send_word@data+2
  3024  002F78  C078  F024         	movff	UpdateTxFreq@regData+3,SWSPI_send_word@data+3
  3025  002F7C  0E03               	movlw	3
  3026  002F7E  6E25               	movwf	SWSPI_send_word@dataSize,c
  3027  002F80  0E00               	movlw	0
  3028  002F82  EC8C  F011         	call	_SWSPI_send_word
  3029                           
  3030                           ;SyntApp.c: 65: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_DOWN_SET);
  3031  002F86  0E42               	movlw	66
  3032  002F88  6E24               	movwf	SendAckMessage@inRequest,c
  3033  002F8A  0E04               	movlw	4
  3034  002F8C  ECAA  F016         	call	_SendAckMessage
  3035  002F90  0012               	return		;funcret
  3036  002F92                     __end_of_UpdateTxFreq:
  3037                           	opt stack 0
  3038                           tosu	equ	0xFFF
  3039                           tosh	equ	0xFFE
  3040                           tosl	equ	0xFFD
  3041                           pclath	equ	0xFFA
  3042                           tblptru	equ	0xFF8
  3043                           tblptrh	equ	0xFF7
  3044                           tblptrl	equ	0xFF6
  3045                           tablat	equ	0xFF5
  3046                           postinc0	equ	0xFEE
  3047                           wreg	equ	0xFE8
  3048                           postdec1	equ	0xFE5
  3049                           fsr1l	equ	0xFE1
  3050                           indf2	equ	0xFDF
  3051                           postinc2	equ	0xFDE
  3052                           fsr2h	equ	0xFDA
  3053                           fsr2l	equ	0xFD9
  3054                           status	equ	0xFD8
  3055                           
  3056 ;; *************** function _UpdateRxFreq *****************
  3057 ;; Defined at:
  3058 ;;		line 68 in file "SyntApp.c"
  3059 ;; Parameters:    Size  Location     Type
  3060 ;;  data            2   45[COMRAM] PTR unsigned char 
  3061 ;; Auto vars:     Size  Location     Type
  3062 ;;  regData         4   21[BANK0 ] unsigned long 
  3063 ;; Return value:  Size  Location     Type
  3064 ;;                  1    wreg      void 
  3065 ;; Registers used:
  3066 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3067 ;; Tracked objects:
  3068 ;;		On entry : 0/0
  3069 ;;		On exit  : 0/0
  3070 ;;		Unchanged: 0/0
  3071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3072 ;;      Params:         2       0       0       0       0       0       0
  3073 ;;      Locals:         0       4       0       0       0       0       0
  3074 ;;      Temps:          0       0       0       0       0       0       0
  3075 ;;      Totals:         2       4       0       0       0       0       0
  3076 ;;Total ram usage:        6 bytes
  3077 ;; Hardware stack levels used:    1
  3078 ;; Hardware stack levels required when called:    7
  3079 ;; This function calls:
  3080 ;;		_GetIntFromUartData
  3081 ;;		_SWSPI_send_word
  3082 ;;		_SendAckMessage
  3083 ;; This function is called by:
  3084 ;;		_GroupSynthesizers
  3085 ;; This function uses a non-reentrant model
  3086 ;;
  3087                           
  3088                           	psect	text10
  3089  002F92                     __ptext10:
  3090                           	opt stack 0
  3091  002F92                     _UpdateRxFreq:
  3092                           	opt stack 21
  3093                           
  3094                           ;SyntApp.c: 70: uint32_t regData = GetIntFromUartData(data);
  3095                           
  3096                           ;incstack = 0
  3097  002F92  C02E  F066         	movff	UpdateRxFreq@data,GetIntFromUartData@data
  3098  002F96  C02F  F067         	movff	UpdateRxFreq@data+1,GetIntFromUartData@data+1
  3099  002F9A  EC3F  F011         	call	_GetIntFromUartData	;wreg free
  3100  002F9E  C066  F075         	movff	?_GetIntFromUartData,UpdateRxFreq@regData
  3101  002FA2  C067  F076         	movff	?_GetIntFromUartData+1,UpdateRxFreq@regData+1
  3102  002FA6  C068  F077         	movff	?_GetIntFromUartData+2,UpdateRxFreq@regData+2
  3103  002FAA  C069  F078         	movff	?_GetIntFromUartData+3,UpdateRxFreq@regData+3
  3104                           
  3105                           ;SyntApp.c: 71: SWSPI_send_word(SYNTH_RX, regData, 3);
  3106  002FAE  C075  F021         	movff	UpdateRxFreq@regData,SWSPI_send_word@data
  3107  002FB2  C076  F022         	movff	UpdateRxFreq@regData+1,SWSPI_send_word@data+1
  3108  002FB6  C077  F023         	movff	UpdateRxFreq@regData+2,SWSPI_send_word@data+2
  3109  002FBA  C078  F024         	movff	UpdateRxFreq@regData+3,SWSPI_send_word@data+3
  3110  002FBE  0E03               	movlw	3
  3111  002FC0  6E25               	movwf	SWSPI_send_word@dataSize,c
  3112  002FC2  0E01               	movlw	1
  3113  002FC4  EC8C  F011         	call	_SWSPI_send_word
  3114                           
  3115                           ;SyntApp.c: 72: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_UP_SET);
  3116  002FC8  0E43               	movlw	67
  3117  002FCA  6E24               	movwf	SendAckMessage@inRequest,c
  3118  002FCC  0E04               	movlw	4
  3119  002FCE  ECAA  F016         	call	_SendAckMessage
  3120  002FD2  0012               	return		;funcret
  3121  002FD4                     __end_of_UpdateRxFreq:
  3122                           	opt stack 0
  3123                           tosu	equ	0xFFF
  3124                           tosh	equ	0xFFE
  3125                           tosl	equ	0xFFD
  3126                           pclath	equ	0xFFA
  3127                           tblptru	equ	0xFF8
  3128                           tblptrh	equ	0xFF7
  3129                           tblptrl	equ	0xFF6
  3130                           tablat	equ	0xFF5
  3131                           postinc0	equ	0xFEE
  3132                           wreg	equ	0xFE8
  3133                           postdec1	equ	0xFE5
  3134                           fsr1l	equ	0xFE1
  3135                           indf2	equ	0xFDF
  3136                           postinc2	equ	0xFDE
  3137                           fsr2h	equ	0xFDA
  3138                           fsr2l	equ	0xFD9
  3139                           status	equ	0xFD8
  3140                           
  3141 ;; *************** function _PLLUartInitialize *****************
  3142 ;; Defined at:
  3143 ;;		line 51 in file "SyntApp.c"
  3144 ;; Parameters:    Size  Location     Type
  3145 ;;  data            2   23[COMRAM] PTR unsigned char 
  3146 ;; Auto vars:     Size  Location     Type
  3147 ;;		None
  3148 ;; Return value:  Size  Location     Type
  3149 ;;                  1    wreg      void 
  3150 ;; Registers used:
  3151 ;;		None
  3152 ;; Tracked objects:
  3153 ;;		On entry : 0/0
  3154 ;;		On exit  : 0/0
  3155 ;;		Unchanged: 0/0
  3156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3157 ;;      Params:         2       0       0       0       0       0       0
  3158 ;;      Locals:         0       0       0       0       0       0       0
  3159 ;;      Temps:          0       0       0       0       0       0       0
  3160 ;;      Totals:         2       0       0       0       0       0       0
  3161 ;;Total ram usage:        2 bytes
  3162 ;; Hardware stack levels used:    1
  3163 ;; Hardware stack levels required when called:    3
  3164 ;; This function calls:
  3165 ;;		Nothing
  3166 ;; This function is called by:
  3167 ;;		_GroupSynthesizers
  3168 ;; This function uses a non-reentrant model
  3169 ;;
  3170                           
  3171                           	psect	text11
  3172  003766                     __ptext11:
  3173                           	opt stack 0
  3174  003766                     _PLLUartInitialize:
  3175                           	opt stack 25
  3176                           
  3177                           ;incstack = 0
  3178  003766  0012               	return		;funcret
  3179  003768                     __end_of_PLLUartInitialize:
  3180                           	opt stack 0
  3181                           tosu	equ	0xFFF
  3182                           tosh	equ	0xFFE
  3183                           tosl	equ	0xFFD
  3184                           pclath	equ	0xFFA
  3185                           tblptru	equ	0xFF8
  3186                           tblptrh	equ	0xFF7
  3187                           tblptrl	equ	0xFF6
  3188                           tablat	equ	0xFF5
  3189                           postinc0	equ	0xFEE
  3190                           wreg	equ	0xFE8
  3191                           postdec1	equ	0xFE5
  3192                           fsr1l	equ	0xFE1
  3193                           indf2	equ	0xFDF
  3194                           postinc2	equ	0xFDE
  3195                           fsr2h	equ	0xFDA
  3196                           fsr2l	equ	0xFD9
  3197                           status	equ	0xFD8
  3198                           
  3199 ;; *************** function _SetMcuFwVersion *****************
  3200 ;; Defined at:
  3201 ;;		line 15 in file "SystemStatus.c"
  3202 ;; Parameters:    Size  Location     Type
  3203 ;;  data            2   43[COMRAM] PTR unsigned char 
  3204 ;; Auto vars:     Size  Location     Type
  3205 ;;  idx             1   45[COMRAM] unsigned char 
  3206 ;; Return value:  Size  Location     Type
  3207 ;;                  1    wreg      void 
  3208 ;; Registers used:
  3209 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3210 ;; Tracked objects:
  3211 ;;		On entry : 0/0
  3212 ;;		On exit  : 0/0
  3213 ;;		Unchanged: 0/0
  3214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3215 ;;      Params:         2       0       0       0       0       0       0
  3216 ;;      Locals:         1       0       0       0       0       0       0
  3217 ;;      Temps:          0       0       0       0       0       0       0
  3218 ;;      Totals:         3       0       0       0       0       0       0
  3219 ;;Total ram usage:        3 bytes
  3220 ;; Hardware stack levels used:    1
  3221 ;; Hardware stack levels required when called:    6
  3222 ;; This function calls:
  3223 ;;		_EepromWrite
  3224 ;;		_SendAckMessage
  3225 ;; This function is called by:
  3226 ;;		_GroupStatusAndVersion
  3227 ;; This function uses a non-reentrant model
  3228 ;;
  3229                           
  3230                           	psect	text12
  3231  0031FA                     __ptext12:
  3232                           	opt stack 0
  3233  0031FA                     _SetMcuFwVersion:
  3234                           	opt stack 22
  3235                           
  3236                           ;SystemStatus.c: 17: for(uint8_t idx = 0; idx < (0x4); idx++)
  3237                           
  3238                           ;incstack = 0
  3239  0031FA  0E00               	movlw	0
  3240  0031FC  6E2E               	movwf	SetMcuFwVersion@idx,c
  3241  0031FE                     l7358:
  3242  0031FE  0E03               	movlw	3
  3243  003200  642E               	cpfsgt	SetMcuFwVersion@idx,c
  3244  003202  D001               	goto	l1308
  3245  003204  D00F               	goto	u7280
  3246  003206                     l1308:
  3247                           
  3248                           ;SystemStatus.c: 18: {
  3249                           ;SystemStatus.c: 19: EepromWrite(idx, data[idx]);
  3250  003206  502E               	movf	SetMcuFwVersion@idx,w,c
  3251  003208  0D01               	mullw	1
  3252  00320A  50F3               	movf	prodl,w,c
  3253  00320C  242C               	addwf	SetMcuFwVersion@data,w,c
  3254  00320E  6ED9               	movwf	fsr2l,c
  3255  003210  50F4               	movf	prodh,w,c
  3256  003212  202D               	addwfc	SetMcuFwVersion@data+1,w,c
  3257  003214  6EDA               	movwf	fsr2h,c
  3258  003216  50DF               	movf	indf2,w,c
  3259  003218  6E1B               	movwf	EepromWrite@data,c
  3260  00321A  502E               	movf	SetMcuFwVersion@idx,w,c
  3261  00321C  EC59  F01B         	call	_EepromWrite
  3262  003220  2A2E               	incf	SetMcuFwVersion@idx,f,c
  3263  003222  D7ED               	goto	l7358
  3264  003224                     u7280:
  3265                           
  3266                           ;SystemStatus.c: 20: }
  3267                           ;SystemStatus.c: 23: SendAckMessage((MSG_GROUPS)MCU_STATUS_VERSION_MSG, (MSG_REQUEST)STA
      +                          TUS_SET_MCU_FW_VERSION);
  3268  003224  0E24               	movlw	36
  3269  003226  6E24               	movwf	SendAckMessage@inRequest,c
  3270  003228  0E02               	movlw	2
  3271  00322A  ECAA  F016         	call	_SendAckMessage
  3272  00322E  0012               	return		;funcret
  3273  003230                     __end_of_SetMcuFwVersion:
  3274                           	opt stack 0
  3275                           tosu	equ	0xFFF
  3276                           tosh	equ	0xFFE
  3277                           tosl	equ	0xFFD
  3278                           pclath	equ	0xFFA
  3279                           tblptru	equ	0xFF8
  3280                           tblptrh	equ	0xFF7
  3281                           tblptrl	equ	0xFF6
  3282                           tablat	equ	0xFF5
  3283                           prodh	equ	0xFF4
  3284                           prodl	equ	0xFF3
  3285                           postinc0	equ	0xFEE
  3286                           wreg	equ	0xFE8
  3287                           postdec1	equ	0xFE5
  3288                           fsr1l	equ	0xFE1
  3289                           indf2	equ	0xFDF
  3290                           postinc2	equ	0xFDE
  3291                           fsr2h	equ	0xFDA
  3292                           fsr2l	equ	0xFD9
  3293                           status	equ	0xFD8
  3294                           
  3295 ;; *************** function _SetCpldFwVersion *****************
  3296 ;; Defined at:
  3297 ;;		line 49 in file "SystemStatus.c"
  3298 ;; Parameters:    Size  Location     Type
  3299 ;;  data            2   43[COMRAM] PTR unsigned char 
  3300 ;; Auto vars:     Size  Location     Type
  3301 ;;  idx             2   45[COMRAM] int 
  3302 ;; Return value:  Size  Location     Type
  3303 ;;                  1    wreg      void 
  3304 ;; Registers used:
  3305 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3306 ;; Tracked objects:
  3307 ;;		On entry : 0/0
  3308 ;;		On exit  : 0/0
  3309 ;;		Unchanged: 0/0
  3310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3311 ;;      Params:         2       0       0       0       0       0       0
  3312 ;;      Locals:         2       0       0       0       0       0       0
  3313 ;;      Temps:          0       0       0       0       0       0       0
  3314 ;;      Totals:         4       0       0       0       0       0       0
  3315 ;;Total ram usage:        4 bytes
  3316 ;; Hardware stack levels used:    1
  3317 ;; Hardware stack levels required when called:    6
  3318 ;; This function calls:
  3319 ;;		_EepromWrite
  3320 ;;		_SendAckMessage
  3321 ;; This function is called by:
  3322 ;;		_GroupStatusAndVersion
  3323 ;; This function uses a non-reentrant model
  3324 ;;
  3325                           
  3326                           	psect	text13
  3327  002FD4                     __ptext13:
  3328                           	opt stack 0
  3329  002FD4                     _SetCpldFwVersion:
  3330                           	opt stack 22
  3331                           
  3332                           ;SystemStatus.c: 51: for(int idx = 0; idx < (0x4); idx++)
  3333                           
  3334                           ;incstack = 0
  3335  002FD4  0E00               	movlw	0
  3336  002FD6  6E2F               	movwf	SetCpldFwVersion@idx+1,c
  3337  002FD8  0E00               	movlw	0
  3338  002FDA  6E2E               	movwf	SetCpldFwVersion@idx,c
  3339  002FDC                     l7398:
  3340  002FDC  BE2F               	btfsc	SetCpldFwVersion@idx+1,7,c
  3341  002FDE  D006               	goto	l1318
  3342  002FE0  502F               	movf	SetCpldFwVersion@idx+1,w,c
  3343  002FE2  E113               	bnz	l7408
  3344  002FE4  0E04               	movlw	4
  3345  002FE6  5C2E               	subwf	SetCpldFwVersion@idx,w,c
  3346  002FE8  B0D8               	btfsc	status,0,c
  3347  002FEA  D00F               	goto	u7320
  3348  002FEC                     l1318:
  3349                           
  3350                           ;SystemStatus.c: 52: {
  3351                           ;SystemStatus.c: 53: EepromWrite((0x4) + idx, data[idx]);
  3352  002FEC  502E               	movf	SetCpldFwVersion@idx,w,c
  3353  002FEE  242C               	addwf	SetCpldFwVersion@data,w,c
  3354  002FF0  6ED9               	movwf	fsr2l,c
  3355  002FF2  502F               	movf	SetCpldFwVersion@idx+1,w,c
  3356  002FF4  202D               	addwfc	SetCpldFwVersion@data+1,w,c
  3357  002FF6  6EDA               	movwf	fsr2h,c
  3358  002FF8  50DF               	movf	indf2,w,c
  3359  002FFA  6E1B               	movwf	EepromWrite@data,c
  3360  002FFC  502E               	movf	SetCpldFwVersion@idx,w,c
  3361  002FFE  0F04               	addlw	4
  3362  003000  EC59  F01B         	call	_EepromWrite
  3363  003004  4A2E               	infsnz	SetCpldFwVersion@idx,f,c
  3364  003006  2A2F               	incf	SetCpldFwVersion@idx+1,f,c
  3365  003008  D7E9               	goto	l7398
  3366  00300A                     u7320:
  3367  00300A                     l7408:
  3368                           
  3369                           ;SystemStatus.c: 54: }
  3370                           ;SystemStatus.c: 55: SendAckMessage((MSG_GROUPS)MCU_STATUS_VERSION_MSG, (MSG_REQUEST)STA
      +                          TUS_SET_CPLD_FW_VERSION);
  3371  00300A  0E25               	movlw	37
  3372  00300C  6E24               	movwf	SendAckMessage@inRequest,c
  3373  00300E  0E02               	movlw	2
  3374  003010  ECAA  F016         	call	_SendAckMessage
  3375  003014  0012               	return		;funcret
  3376  003016                     __end_of_SetCpldFwVersion:
  3377                           	opt stack 0
  3378                           tosu	equ	0xFFF
  3379                           tosh	equ	0xFFE
  3380                           tosl	equ	0xFFD
  3381                           pclath	equ	0xFFA
  3382                           tblptru	equ	0xFF8
  3383                           tblptrh	equ	0xFF7
  3384                           tblptrl	equ	0xFF6
  3385                           tablat	equ	0xFF5
  3386                           prodh	equ	0xFF4
  3387                           prodl	equ	0xFF3
  3388                           postinc0	equ	0xFEE
  3389                           wreg	equ	0xFE8
  3390                           postdec1	equ	0xFE5
  3391                           fsr1l	equ	0xFE1
  3392                           indf2	equ	0xFDF
  3393                           postinc2	equ	0xFDE
  3394                           fsr2h	equ	0xFDA
  3395                           fsr2l	equ	0xFD9
  3396                           status	equ	0xFD8
  3397                           
  3398 ;; *************** function _EepromWrite *****************
  3399 ;; Defined at:
  3400 ;;		line 220 in file "FlashApp.c"
  3401 ;; Parameters:    Size  Location     Type
  3402 ;;  address         1    wreg     unsigned char 
  3403 ;;  data            1   26[COMRAM] unsigned char 
  3404 ;; Auto vars:     Size  Location     Type
  3405 ;;  address         1   27[COMRAM] unsigned char 
  3406 ;; Return value:  Size  Location     Type
  3407 ;;                  1    wreg      void 
  3408 ;; Registers used:
  3409 ;;		wreg, status,2, cstack
  3410 ;; Tracked objects:
  3411 ;;		On entry : 0/0
  3412 ;;		On exit  : 0/0
  3413 ;;		Unchanged: 0/0
  3414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3415 ;;      Params:         1       0       0       0       0       0       0
  3416 ;;      Locals:         1       0       0       0       0       0       0
  3417 ;;      Temps:          0       0       0       0       0       0       0
  3418 ;;      Totals:         2       0       0       0       0       0       0
  3419 ;;Total ram usage:        2 bytes
  3420 ;; Hardware stack levels used:    1
  3421 ;; Hardware stack levels required when called:    4
  3422 ;; This function calls:
  3423 ;;		_DATAEE_WriteByte
  3424 ;; This function is called by:
  3425 ;;		_SetMcuFwVersion
  3426 ;;		_SetCpldFwVersion
  3427 ;; This function uses a non-reentrant model
  3428 ;;
  3429                           
  3430                           	psect	text14
  3431  0036B2                     __ptext14:
  3432                           	opt stack 0
  3433  0036B2                     _EepromWrite:
  3434                           	opt stack 23
  3435                           
  3436                           ;incstack = 0
  3437                           ;EepromWrite@address stored from wreg
  3438  0036B2  6E1C               	movwf	EepromWrite@address,c
  3439                           
  3440                           ;FlashApp.c: 222: DATAEE_WriteByte(address, data);
  3441  0036B4  C01B  F018         	movff	EepromWrite@data,DATAEE_WriteByte@bData
  3442  0036B8  501C               	movf	EepromWrite@address,w,c
  3443  0036BA  EC18  F019         	call	_DATAEE_WriteByte
  3444  0036BE  0012               	return		;funcret
  3445  0036C0                     __end_of_EepromWrite:
  3446                           	opt stack 0
  3447                           tosu	equ	0xFFF
  3448                           tosh	equ	0xFFE
  3449                           tosl	equ	0xFFD
  3450                           pclath	equ	0xFFA
  3451                           tblptru	equ	0xFF8
  3452                           tblptrh	equ	0xFF7
  3453                           tblptrl	equ	0xFF6
  3454                           tablat	equ	0xFF5
  3455                           prodh	equ	0xFF4
  3456                           prodl	equ	0xFF3
  3457                           postinc0	equ	0xFEE
  3458                           wreg	equ	0xFE8
  3459                           postdec1	equ	0xFE5
  3460                           fsr1l	equ	0xFE1
  3461                           indf2	equ	0xFDF
  3462                           postinc2	equ	0xFDE
  3463                           fsr2h	equ	0xFDA
  3464                           fsr2l	equ	0xFD9
  3465                           status	equ	0xFD8
  3466                           
  3467 ;; *************** function _DATAEE_WriteByte *****************
  3468 ;; Defined at:
  3469 ;;		line 167 in file "mcc_generated_files/memory.c"
  3470 ;; Parameters:    Size  Location     Type
  3471 ;;  bAdd            1    wreg     unsigned char 
  3472 ;;  bData           1   23[COMRAM] unsigned char 
  3473 ;; Auto vars:     Size  Location     Type
  3474 ;;  bAdd            1   24[COMRAM] unsigned char 
  3475 ;;  GIEBitValue     1   25[COMRAM] unsigned char 
  3476 ;; Return value:  Size  Location     Type
  3477 ;;                  1    wreg      void 
  3478 ;; Registers used:
  3479 ;;		wreg, status,2
  3480 ;; Tracked objects:
  3481 ;;		On entry : 0/0
  3482 ;;		On exit  : 0/0
  3483 ;;		Unchanged: 0/0
  3484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3485 ;;      Params:         1       0       0       0       0       0       0
  3486 ;;      Locals:         2       0       0       0       0       0       0
  3487 ;;      Temps:          0       0       0       0       0       0       0
  3488 ;;      Totals:         3       0       0       0       0       0       0
  3489 ;;Total ram usage:        3 bytes
  3490 ;; Hardware stack levels used:    1
  3491 ;; Hardware stack levels required when called:    3
  3492 ;; This function calls:
  3493 ;;		Nothing
  3494 ;; This function is called by:
  3495 ;;		_EepromWrite
  3496 ;;		_EepromTest
  3497 ;; This function uses a non-reentrant model
  3498 ;;
  3499                           
  3500                           	psect	text15
  3501  003230                     __ptext15:
  3502                           	opt stack 0
  3503  003230                     _DATAEE_WriteByte:
  3504                           	opt stack 23
  3505                           
  3506                           ;incstack = 0
  3507                           ;DATAEE_WriteByte@bAdd stored from wreg
  3508  003230  6E19               	movwf	DATAEE_WriteByte@bAdd,c
  3509                           
  3510                           ;memory.c: 169: uint8_t GIEBitValue = INTCONbits.GIE;
  3511  003232  0E00               	movlw	0
  3512  003234  BEF2               	btfsc	intcon,7,c	;volatile
  3513  003236  0E01               	movlw	1
  3514  003238  6E1A               	movwf	DATAEE_WriteByte@GIEBitValue,c
  3515                           
  3516                           ;memory.c: 171: EEADR = (bAdd & 0xFF);
  3517  00323A  C019  FFA9         	movff	DATAEE_WriteByte@bAdd,4009	;volatile
  3518                           
  3519                           ;memory.c: 172: EEDATA = bData;
  3520  00323E  C018  FFA8         	movff	DATAEE_WriteByte@bData,4008	;volatile
  3521                           
  3522                           ;memory.c: 173: EECON1bits.EEPGD = 0;
  3523  003242  9EA6               	bcf	4006,7,c	;volsfr
  3524                           
  3525                           ;memory.c: 174: EECON1bits.CFGS = 0;
  3526  003244  9CA6               	bcf	4006,6,c	;volsfr
  3527                           
  3528                           ;memory.c: 175: EECON1bits.WREN = 1;
  3529  003246  84A6               	bsf	4006,2,c	;volsfr
  3530                           
  3531                           ;memory.c: 176: INTCONbits.GIE = 0;
  3532  003248  9EF2               	bcf	intcon,7,c	;volatile
  3533                           
  3534                           ;memory.c: 177: EECON2 = 0x55;
  3535  00324A  0E55               	movlw	85
  3536  00324C  6EA7               	movwf	4007,c	;volsfr
  3537                           
  3538                           ;memory.c: 178: EECON2 = 0xAA;
  3539  00324E  0EAA               	movlw	170
  3540  003250  6EA7               	movwf	4007,c	;volsfr
  3541                           
  3542                           ;memory.c: 179: EECON1bits.WR = 1;
  3543  003252  82A6               	bsf	4006,1,c	;volsfr
  3544  003254                     
  3545                           ;memory.c: 182: {
  3546  003254  B2A6               	btfsc	4006,1,c	;volsfr
  3547  003256  D7FE               	goto	l929
  3548                           
  3549                           ;memory.c: 183: }
  3550                           ;memory.c: 185: EECON1bits.WREN = 0;
  3551  003258  94A6               	bcf	4006,2,c	;volsfr
  3552                           
  3553                           ;memory.c: 186: INTCONbits.GIE = GIEBitValue;
  3554  00325A  B01A               	btfsc	DATAEE_WriteByte@GIEBitValue,0,c
  3555  00325C  D002               	bra	u6105
  3556  00325E  9EF2               	bcf	intcon,7,c	;volatile
  3557  003260  D001               	bra	u6106
  3558  003262                     u6105:
  3559  003262  8EF2               	bsf	intcon,7,c	;volatile
  3560  003264                     u6106:
  3561  003264  0012               	return		;funcret
  3562  003266                     __end_of_DATAEE_WriteByte:
  3563                           	opt stack 0
  3564                           tosu	equ	0xFFF
  3565                           tosh	equ	0xFFE
  3566                           tosl	equ	0xFFD
  3567                           pclath	equ	0xFFA
  3568                           tblptru	equ	0xFF8
  3569                           tblptrh	equ	0xFF7
  3570                           tblptrl	equ	0xFF6
  3571                           tablat	equ	0xFF5
  3572                           prodh	equ	0xFF4
  3573                           prodl	equ	0xFF3
  3574                           intcon	equ	0xFF2
  3575                           postinc0	equ	0xFEE
  3576                           wreg	equ	0xFE8
  3577                           postdec1	equ	0xFE5
  3578                           fsr1l	equ	0xFE1
  3579                           indf2	equ	0xFDF
  3580                           postinc2	equ	0xFDE
  3581                           fsr2h	equ	0xFDA
  3582                           fsr2l	equ	0xFD9
  3583                           status	equ	0xFD8
  3584                           
  3585 ;; *************** function _GetMcuRunTime *****************
  3586 ;; Defined at:
  3587 ;;		line 92 in file "SystemStatus.c"
  3588 ;; Parameters:    Size  Location     Type
  3589 ;;		None
  3590 ;; Auto vars:     Size  Location     Type
  3591 ;;  idx             2   13[BANK0 ] int 
  3592 ;;  TxMsg           9    0[BANK0 ] unsigned char [9]
  3593 ;;  tempRunTime     4    9[BANK0 ] unsigned long 
  3594 ;; Return value:  Size  Location     Type
  3595 ;;                  1    wreg      void 
  3596 ;; Registers used:
  3597 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3598 ;; Tracked objects:
  3599 ;;		On entry : 0/0
  3600 ;;		On exit  : 0/0
  3601 ;;		Unchanged: 0/0
  3602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3603 ;;      Params:         0       0       0       0       0       0       0
  3604 ;;      Locals:         0      15       0       0       0       0       0
  3605 ;;      Temps:          2       0       0       0       0       0       0
  3606 ;;      Totals:         2      15       0       0       0       0       0
  3607 ;;Total ram usage:       17 bytes
  3608 ;; Hardware stack levels used:    1
  3609 ;; Hardware stack levels required when called:    5
  3610 ;; This function calls:
  3611 ;;		_WriteUartMessage
  3612 ;;		___lldiv
  3613 ;;		___llmod
  3614 ;;		_crc8
  3615 ;; This function is called by:
  3616 ;;		_GroupStatusAndVersion
  3617 ;; This function uses a non-reentrant model
  3618 ;;
  3619                           
  3620                           	psect	text16
  3621  001D04                     __ptext16:
  3622                           	opt stack 0
  3623  001D04                     _GetMcuRunTime:
  3624                           	opt stack 23
  3625                           
  3626                           ;SystemStatus.c: 95: char TxMsg[(0x4) + (0x4) + 1];
  3627                           ;SystemStatus.c: 98: TxMsg[(0)] = (0x24);
  3628                           
  3629                           ;incstack = 0
  3630  001D04  0E24               	movlw	36
  3631  001D06  0100               	movlb	0	; () banked
  3632  001D08  6F60               	movwf	GetMcuRunTime@TxMsg& (0+255),b
  3633                           
  3634                           ;SystemStatus.c: 99: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  3635  001D0A  0E02               	movlw	2
  3636  001D0C  6F61               	movwf	(GetMcuRunTime@TxMsg+1)& (0+255),b
  3637                           
  3638                           ;SystemStatus.c: 100: TxMsg[(2)] = STATUS_MCU_RUN_TIME;
  3639  001D0E  0E21               	movlw	33
  3640  001D10  6F62               	movwf	(GetMcuRunTime@TxMsg+2)& (0+255),b
  3641                           
  3642                           ;SystemStatus.c: 101: TxMsg[(3)] = (0x4);
  3643  001D12  0E04               	movlw	4
  3644  001D14  6F63               	movwf	(GetMcuRunTime@TxMsg+3)& (0+255),b
  3645                           
  3646                           ; BSR set to: 0
  3647                           ;SystemStatus.c: 103: uint32_t tempRunTime = mcuRunTimeIn5SecTicks;
  3648  001D16  C0C0  F069         	movff	_mcuRunTimeIn5SecTicks,GetMcuRunTime@tempRunTime
  3649  001D1A  C0C1  F06A         	movff	_mcuRunTimeIn5SecTicks+1,GetMcuRunTime@tempRunTime+1
  3650  001D1E  C0C2  F06B         	movff	_mcuRunTimeIn5SecTicks+2,GetMcuRunTime@tempRunTime+2
  3651  001D22  C0C3  F06C         	movff	_mcuRunTimeIn5SecTicks+3,GetMcuRunTime@tempRunTime+3
  3652                           
  3653                           ;SystemStatus.c: 106: for(int idx = 0; idx < (0x4); idx++)
  3654  001D26  0E00               	movlw	0
  3655  001D28  6F6E               	movwf	(GetMcuRunTime@idx+1)& (0+255),b
  3656  001D2A  0E00               	movlw	0
  3657  001D2C  6F6D               	movwf	GetMcuRunTime@idx& (0+255),b
  3658  001D2E                     l7414:
  3659                           
  3660                           ; BSR set to: 0
  3661  001D2E  BF6E               	btfsc	(GetMcuRunTime@idx+1)& (0+255),7,b
  3662  001D30  D006               	goto	l1334
  3663  001D32  516E               	movf	(GetMcuRunTime@idx+1)& (0+255),w,b
  3664  001D34  E142               	bnz	l7426
  3665  001D36  0E04               	movlw	4
  3666  001D38  5D6D               	subwf	GetMcuRunTime@idx& (0+255),w,b
  3667  001D3A  B0D8               	btfsc	status,0,c
  3668  001D3C  D03E               	goto	u7340
  3669  001D3E                     l1334:
  3670                           
  3671                           ; BSR set to: 0
  3672                           ;SystemStatus.c: 107: {
  3673                           ;SystemStatus.c: 108: TxMsg[(0x4) + idx] = tempRunTime % 10;
  3674                           
  3675                           ; BSR set to: 0
  3676  001D3E  0E04               	movlw	4
  3677  001D40  256D               	addwf	GetMcuRunTime@idx& (0+255),w,b
  3678  001D42  6E25               	movwf	??_GetMcuRunTime& (0+255),c
  3679  001D44  0E00               	movlw	0
  3680  001D46  216E               	addwfc	(GetMcuRunTime@idx+1)& (0+255),w,b
  3681  001D48  6E26               	movwf	(??_GetMcuRunTime+1)& (0+255),c
  3682  001D4A  0E60               	movlw	low GetMcuRunTime@TxMsg
  3683  001D4C  2425               	addwf	??_GetMcuRunTime,w,c
  3684  001D4E  6ED9               	movwf	fsr2l,c
  3685  001D50  0E00               	movlw	high GetMcuRunTime@TxMsg
  3686  001D52  2026               	addwfc	??_GetMcuRunTime+1,w,c
  3687  001D54  6EDA               	movwf	fsr2h,c
  3688  001D56  C069  F018         	movff	GetMcuRunTime@tempRunTime,___llmod@dividend
  3689  001D5A  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___llmod@dividend+1
  3690  001D5E  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___llmod@dividend+2
  3691  001D62  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___llmod@dividend+3
  3692  001D66  0E0A               	movlw	10
  3693  001D68  6E1C               	movwf	___llmod@divisor,c
  3694  001D6A  0E00               	movlw	0
  3695  001D6C  6E1D               	movwf	___llmod@divisor+1,c
  3696  001D6E  0E00               	movlw	0
  3697  001D70  6E1E               	movwf	___llmod@divisor+2,c
  3698  001D72  0E00               	movlw	0
  3699  001D74  6E1F               	movwf	___llmod@divisor+3,c
  3700  001D76  EC5C  F014         	call	___llmod	;wreg free
  3701  001D7A  5018               	movf	?___llmod,w,c
  3702  001D7C  6EDF               	movwf	indf2,c
  3703                           
  3704                           ;SystemStatus.c: 109: tempRunTime /= 10;
  3705  001D7E  C069  F018         	movff	GetMcuRunTime@tempRunTime,___lldiv@dividend
  3706  001D82  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___lldiv@dividend+1
  3707  001D86  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___lldiv@dividend+2
  3708  001D8A  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___lldiv@dividend+3
  3709  001D8E  0E0A               	movlw	10
  3710  001D90  6E1C               	movwf	___lldiv@divisor,c
  3711  001D92  0E00               	movlw	0
  3712  001D94  6E1D               	movwf	___lldiv@divisor+1,c
  3713  001D96  0E00               	movlw	0
  3714  001D98  6E1E               	movwf	___lldiv@divisor+2,c
  3715  001D9A  0E00               	movlw	0
  3716  001D9C  6E1F               	movwf	___lldiv@divisor+3,c
  3717  001D9E  ECFA  F012         	call	___lldiv	;wreg free
  3718  001DA2  C018  F069         	movff	?___lldiv,GetMcuRunTime@tempRunTime
  3719  001DA6  C019  F06A         	movff	?___lldiv+1,GetMcuRunTime@tempRunTime+1
  3720  001DAA  C01A  F06B         	movff	?___lldiv+2,GetMcuRunTime@tempRunTime+2
  3721  001DAE  C01B  F06C         	movff	?___lldiv+3,GetMcuRunTime@tempRunTime+3
  3722  001DB2  0100               	movlb	0	; () banked
  3723  001DB4  4B6D               	infsnz	GetMcuRunTime@idx& (0+255),f,b
  3724  001DB6  2B6E               	incf	(GetMcuRunTime@idx+1)& (0+255),f,b
  3725  001DB8  D7BA               	goto	l7414
  3726  001DBA                     u7340:
  3727  001DBA                     l7426:
  3728                           
  3729                           ; BSR set to: 0
  3730                           ;SystemStatus.c: 110: }
  3731                           ;SystemStatus.c: 112: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  3732  001DBA  0E60               	movlw	low GetMcuRunTime@TxMsg
  3733  001DBC  6E18               	movwf	crc8@dataArray,c
  3734  001DBE  0E00               	movlw	high GetMcuRunTime@TxMsg
  3735  001DC0  6E19               	movwf	crc8@dataArray+1,c
  3736  001DC2  0E00               	movlw	0
  3737  001DC4  6E1B               	movwf	crc8@dataSize+1,c
  3738  001DC6  0E08               	movlw	8
  3739  001DC8  6E1A               	movwf	crc8@dataSize,c
  3740  001DCA  ECD3  F016         	call	_crc8	;wreg free
  3741  001DCE  0100               	movlb	0	; () banked
  3742  001DD0  6F68               	movwf	(GetMcuRunTime@TxMsg+8)& (0+255),b
  3743                           
  3744                           ; BSR set to: 0
  3745                           ;SystemStatus.c: 114: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  3746  001DD2  0E60               	movlw	low GetMcuRunTime@TxMsg
  3747  001DD4  6E19               	movwf	WriteUartMessage@dataBuf,c
  3748  001DD6  0E00               	movlw	high GetMcuRunTime@TxMsg
  3749  001DD8  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  3750  001DDA  0E00               	movlw	0
  3751  001DDC  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  3752  001DDE  0E09               	movlw	9
  3753  001DE0  6E1B               	movwf	WriteUartMessage@dataSize,c
  3754  001DE2  EC69  F019         	call	_WriteUartMessage	;wreg free
  3755  001DE6  0012               	return		;funcret
  3756  001DE8                     __end_of_GetMcuRunTime:
  3757                           	opt stack 0
  3758                           tosu	equ	0xFFF
  3759                           tosh	equ	0xFFE
  3760                           tosl	equ	0xFFD
  3761                           pclath	equ	0xFFA
  3762                           tblptru	equ	0xFF8
  3763                           tblptrh	equ	0xFF7
  3764                           tblptrl	equ	0xFF6
  3765                           tablat	equ	0xFF5
  3766                           prodh	equ	0xFF4
  3767                           prodl	equ	0xFF3
  3768                           intcon	equ	0xFF2
  3769                           postinc0	equ	0xFEE
  3770                           wreg	equ	0xFE8
  3771                           postdec1	equ	0xFE5
  3772                           fsr1l	equ	0xFE1
  3773                           indf2	equ	0xFDF
  3774                           postinc2	equ	0xFDE
  3775                           fsr2h	equ	0xFDA
  3776                           fsr2l	equ	0xFD9
  3777                           status	equ	0xFD8
  3778                           
  3779 ;; *************** function ___lldiv *****************
  3780 ;; Defined at:
  3781 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  3782 ;; Parameters:    Size  Location     Type
  3783 ;;  dividend        4   23[COMRAM] unsigned long 
  3784 ;;  divisor         4   27[COMRAM] unsigned long 
  3785 ;; Auto vars:     Size  Location     Type
  3786 ;;  quotient        4   31[COMRAM] unsigned long 
  3787 ;;  counter         1   35[COMRAM] unsigned char 
  3788 ;; Return value:  Size  Location     Type
  3789 ;;                  4   23[COMRAM] unsigned long 
  3790 ;; Registers used:
  3791 ;;		wreg, status,2, status,0
  3792 ;; Tracked objects:
  3793 ;;		On entry : 0/0
  3794 ;;		On exit  : 0/0
  3795 ;;		Unchanged: 0/0
  3796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3797 ;;      Params:         8       0       0       0       0       0       0
  3798 ;;      Locals:         5       0       0       0       0       0       0
  3799 ;;      Temps:          0       0       0       0       0       0       0
  3800 ;;      Totals:        13       0       0       0       0       0       0
  3801 ;;Total ram usage:       13 bytes
  3802 ;; Hardware stack levels used:    1
  3803 ;; Hardware stack levels required when called:    3
  3804 ;; This function calls:
  3805 ;;		Nothing
  3806 ;; This function is called by:
  3807 ;;		_GetMcuRunTime
  3808 ;; This function uses a non-reentrant model
  3809 ;;
  3810                           
  3811                           	psect	text17
  3812  0025F4                     __ptext17:
  3813                           	opt stack 0
  3814  0025F4                     ___lldiv:
  3815                           	opt stack 24
  3816                           
  3817                           ;incstack = 0
  3818  0025F4  0E00               	movlw	0
  3819  0025F6  6E20               	movwf	___lldiv@quotient,c
  3820  0025F8  0E00               	movlw	0
  3821  0025FA  6E21               	movwf	___lldiv@quotient+1,c
  3822  0025FC  0E00               	movlw	0
  3823  0025FE  6E22               	movwf	___lldiv@quotient+2,c
  3824  002600  0E00               	movlw	0
  3825  002602  6E23               	movwf	___lldiv@quotient+3,c
  3826  002604  501C               	movf	___lldiv@divisor,w,c
  3827  002606  101D               	iorwf	___lldiv@divisor+1,w,c
  3828  002608  101E               	iorwf	___lldiv@divisor+2,w,c
  3829  00260A  101F               	iorwf	___lldiv@divisor+3,w,c
  3830  00260C  B4D8               	btfsc	status,2,c
  3831  00260E  D02A               	goto	l1759
  3832  002610  0E01               	movlw	1
  3833  002612  6E24               	movwf	___lldiv@counter,c
  3834  002614  D006               	goto	l1754
  3835  002616  90D8               	bcf	status,0,c
  3836  002618  361C               	rlcf	___lldiv@divisor,f,c
  3837  00261A  361D               	rlcf	___lldiv@divisor+1,f,c
  3838  00261C  361E               	rlcf	___lldiv@divisor+2,f,c
  3839  00261E  361F               	rlcf	___lldiv@divisor+3,f,c
  3840  002620  2A24               	incf	___lldiv@counter,f,c
  3841  002622                     l1754:
  3842  002622  AE1F               	btfss	___lldiv@divisor+3,7,c
  3843  002624  D7F8               	goto	l1755
  3844  002626                     u6840:
  3845  002626  90D8               	bcf	status,0,c
  3846  002628  3620               	rlcf	___lldiv@quotient,f,c
  3847  00262A  3621               	rlcf	___lldiv@quotient+1,f,c
  3848  00262C  3622               	rlcf	___lldiv@quotient+2,f,c
  3849  00262E  3623               	rlcf	___lldiv@quotient+3,f,c
  3850  002630  501C               	movf	___lldiv@divisor,w,c
  3851  002632  5C18               	subwf	___lldiv@dividend,w,c
  3852  002634  501D               	movf	___lldiv@divisor+1,w,c
  3853  002636  5819               	subwfb	___lldiv@dividend+1,w,c
  3854  002638  501E               	movf	___lldiv@divisor+2,w,c
  3855  00263A  581A               	subwfb	___lldiv@dividend+2,w,c
  3856  00263C  501F               	movf	___lldiv@divisor+3,w,c
  3857  00263E  581B               	subwfb	___lldiv@dividend+3,w,c
  3858  002640  A0D8               	btfss	status,0,c
  3859  002642  D009               	goto	l1758
  3860  002644  501C               	movf	___lldiv@divisor,w,c
  3861  002646  5E18               	subwf	___lldiv@dividend,f,c
  3862  002648  501D               	movf	___lldiv@divisor+1,w,c
  3863  00264A  5A19               	subwfb	___lldiv@dividend+1,f,c
  3864  00264C  501E               	movf	___lldiv@divisor+2,w,c
  3865  00264E  5A1A               	subwfb	___lldiv@dividend+2,f,c
  3866  002650  501F               	movf	___lldiv@divisor+3,w,c
  3867  002652  5A1B               	subwfb	___lldiv@dividend+3,f,c
  3868  002654  8020               	bsf	___lldiv@quotient,0,c
  3869  002656                     l1758:
  3870  002656  90D8               	bcf	status,0,c
  3871  002658  321F               	rrcf	___lldiv@divisor+3,f,c
  3872  00265A  321E               	rrcf	___lldiv@divisor+2,f,c
  3873  00265C  321D               	rrcf	___lldiv@divisor+1,f,c
  3874  00265E  321C               	rrcf	___lldiv@divisor,f,c
  3875  002660  2E24               	decfsz	___lldiv@counter,f,c
  3876  002662  D7E1               	goto	u6840
  3877  002664                     l1759:
  3878  002664  C020  F018         	movff	___lldiv@quotient,?___lldiv
  3879  002668  C021  F019         	movff	___lldiv@quotient+1,?___lldiv+1
  3880  00266C  C022  F01A         	movff	___lldiv@quotient+2,?___lldiv+2
  3881  002670  C023  F01B         	movff	___lldiv@quotient+3,?___lldiv+3
  3882  002674  0012               	return		;funcret
  3883  002676                     __end_of___lldiv:
  3884                           	opt stack 0
  3885                           tosu	equ	0xFFF
  3886                           tosh	equ	0xFFE
  3887                           tosl	equ	0xFFD
  3888                           pclath	equ	0xFFA
  3889                           tblptru	equ	0xFF8
  3890                           tblptrh	equ	0xFF7
  3891                           tblptrl	equ	0xFF6
  3892                           tablat	equ	0xFF5
  3893                           prodh	equ	0xFF4
  3894                           prodl	equ	0xFF3
  3895                           intcon	equ	0xFF2
  3896                           postinc0	equ	0xFEE
  3897                           wreg	equ	0xFE8
  3898                           postdec1	equ	0xFE5
  3899                           fsr1l	equ	0xFE1
  3900                           indf2	equ	0xFDF
  3901                           postinc2	equ	0xFDE
  3902                           fsr2h	equ	0xFDA
  3903                           fsr2l	equ	0xFD9
  3904                           status	equ	0xFD8
  3905                           
  3906 ;; *************** function _GetMcuFwVersion *****************
  3907 ;; Defined at:
  3908 ;;		line 26 in file "SystemStatus.c"
  3909 ;; Parameters:    Size  Location     Type
  3910 ;;		None
  3911 ;; Auto vars:     Size  Location     Type
  3912 ;;  idx             1   46[COMRAM] unsigned char 
  3913 ;;  TxMsg           9   37[COMRAM] unsigned char [9]
  3914 ;; Return value:  Size  Location     Type
  3915 ;;                  1    wreg      void 
  3916 ;; Registers used:
  3917 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3918 ;; Tracked objects:
  3919 ;;		On entry : 0/0
  3920 ;;		On exit  : 0/0
  3921 ;;		Unchanged: 0/0
  3922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3923 ;;      Params:         0       0       0       0       0       0       0
  3924 ;;      Locals:        10       0       0       0       0       0       0
  3925 ;;      Temps:          2       0       0       0       0       0       0
  3926 ;;      Totals:        12       0       0       0       0       0       0
  3927 ;;Total ram usage:       12 bytes
  3928 ;; Hardware stack levels used:    1
  3929 ;; Hardware stack levels required when called:    5
  3930 ;; This function calls:
  3931 ;;		_EepromRead
  3932 ;;		_WriteUartMessage
  3933 ;;		_ZeroArray
  3934 ;;		_crc8
  3935 ;; This function is called by:
  3936 ;;		_GroupStatusAndVersion
  3937 ;; This function uses a non-reentrant model
  3938 ;;
  3939                           
  3940                           	psect	text18
  3941  002676                     __ptext18:
  3942                           	opt stack 0
  3943  002676                     _GetMcuFwVersion:
  3944                           	opt stack 23
  3945                           
  3946                           ;SystemStatus.c: 29: char TxMsg[(0x4) + (0x4) + 1];
  3947                           ;SystemStatus.c: 30: ZeroArray(TxMsg, (0x4) + (0x4) + 1);
  3948                           
  3949                           ;incstack = 0
  3950  002676  0E26               	movlw	low GetMcuFwVersion@TxMsg
  3951  002678  6E20               	movwf	ZeroArray@array,c
  3952  00267A  0E00               	movlw	high GetMcuFwVersion@TxMsg
  3953  00267C  6E21               	movwf	ZeroArray@array+1,c
  3954  00267E  0E00               	movlw	0
  3955  002680  6E23               	movwf	ZeroArray@size+1,c
  3956  002682  0E09               	movlw	9
  3957  002684  6E22               	movwf	ZeroArray@size,c
  3958  002686  ECDC  F01A         	call	_ZeroArray	;wreg free
  3959                           
  3960                           ;SystemStatus.c: 33: TxMsg[(0)] = (0x24);
  3961  00268A  0E24               	movlw	36
  3962  00268C  6E26               	movwf	GetMcuFwVersion@TxMsg,c
  3963                           
  3964                           ;SystemStatus.c: 34: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  3965  00268E  0E02               	movlw	2
  3966  002690  6E27               	movwf	GetMcuFwVersion@TxMsg+1,c
  3967                           
  3968                           ;SystemStatus.c: 35: TxMsg[(2)] = STATUS_GET_MCU_FW_VERSION;
  3969  002692  0E22               	movlw	34
  3970  002694  6E28               	movwf	GetMcuFwVersion@TxMsg+2,c
  3971                           
  3972                           ;SystemStatus.c: 36: TxMsg[(3)] = (0x4);
  3973  002696  0E04               	movlw	4
  3974  002698  6E29               	movwf	GetMcuFwVersion@TxMsg+3,c
  3975                           
  3976                           ;SystemStatus.c: 39: for(uint8_t idx = 0; idx < (0x4); idx++)
  3977  00269A  0E00               	movlw	0
  3978  00269C  6E2F               	movwf	GetMcuFwVersion@idx,c
  3979  00269E                     l7342:
  3980  00269E  0E03               	movlw	3
  3981  0026A0  642F               	cpfsgt	GetMcuFwVersion@idx,c
  3982  0026A2  D001               	goto	l1313
  3983  0026A4  D013               	goto	u7260
  3984  0026A6                     l1313:
  3985                           
  3986                           ;SystemStatus.c: 40: {
  3987                           ;SystemStatus.c: 41: TxMsg[(0x4) + idx] = EepromRead(idx);
  3988  0026A6  502F               	movf	GetMcuFwVersion@idx,w,c
  3989  0026A8  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  3990  0026AA  6A25               	clrf	(??_GetMcuFwVersion+1)& (0+255),c
  3991  0026AC  0E04               	movlw	4
  3992  0026AE  2624               	addwf	??_GetMcuFwVersion,f,c
  3993  0026B0  0E00               	movlw	0
  3994  0026B2  2225               	addwfc	??_GetMcuFwVersion+1,f,c
  3995  0026B4  0E26               	movlw	low GetMcuFwVersion@TxMsg
  3996  0026B6  2424               	addwf	??_GetMcuFwVersion,w,c
  3997  0026B8  6ED9               	movwf	fsr2l,c
  3998  0026BA  0E00               	movlw	high GetMcuFwVersion@TxMsg
  3999  0026BC  2025               	addwfc	??_GetMcuFwVersion+1,w,c
  4000  0026BE  6EDA               	movwf	fsr2h,c
  4001  0026C0  502F               	movf	GetMcuFwVersion@idx,w,c
  4002  0026C2  EC9A  F01B         	call	_EepromRead
  4003  0026C6  6EDF               	movwf	indf2,c
  4004  0026C8  2A2F               	incf	GetMcuFwVersion@idx,f,c
  4005  0026CA  D7E9               	goto	l7342
  4006  0026CC                     u7260:
  4007                           
  4008                           ;SystemStatus.c: 42: }
  4009                           ;SystemStatus.c: 44: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  4010  0026CC  0E26               	movlw	low GetMcuFwVersion@TxMsg
  4011  0026CE  6E18               	movwf	crc8@dataArray,c
  4012  0026D0  0E00               	movlw	high GetMcuFwVersion@TxMsg
  4013  0026D2  6E19               	movwf	crc8@dataArray+1,c
  4014  0026D4  0E00               	movlw	0
  4015  0026D6  6E1B               	movwf	crc8@dataSize+1,c
  4016  0026D8  0E08               	movlw	8
  4017  0026DA  6E1A               	movwf	crc8@dataSize,c
  4018  0026DC  ECD3  F016         	call	_crc8	;wreg free
  4019  0026E0  6E2E               	movwf	GetMcuFwVersion@TxMsg+8,c
  4020                           
  4021                           ;SystemStatus.c: 46: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  4022  0026E2  0E26               	movlw	low GetMcuFwVersion@TxMsg
  4023  0026E4  6E19               	movwf	WriteUartMessage@dataBuf,c
  4024  0026E6  0E00               	movlw	high GetMcuFwVersion@TxMsg
  4025  0026E8  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  4026  0026EA  0E00               	movlw	0
  4027  0026EC  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  4028  0026EE  0E09               	movlw	9
  4029  0026F0  6E1B               	movwf	WriteUartMessage@dataSize,c
  4030  0026F2  EC69  F019         	call	_WriteUartMessage	;wreg free
  4031  0026F6  0012               	return		;funcret
  4032  0026F8                     __end_of_GetMcuFwVersion:
  4033                           	opt stack 0
  4034                           tosu	equ	0xFFF
  4035                           tosh	equ	0xFFE
  4036                           tosl	equ	0xFFD
  4037                           pclath	equ	0xFFA
  4038                           tblptru	equ	0xFF8
  4039                           tblptrh	equ	0xFF7
  4040                           tblptrl	equ	0xFF6
  4041                           tablat	equ	0xFF5
  4042                           prodh	equ	0xFF4
  4043                           prodl	equ	0xFF3
  4044                           intcon	equ	0xFF2
  4045                           postinc0	equ	0xFEE
  4046                           wreg	equ	0xFE8
  4047                           postdec1	equ	0xFE5
  4048                           fsr1l	equ	0xFE1
  4049                           indf2	equ	0xFDF
  4050                           postinc2	equ	0xFDE
  4051                           fsr2h	equ	0xFDA
  4052                           fsr2l	equ	0xFD9
  4053                           status	equ	0xFD8
  4054                           
  4055 ;; *************** function _GetCpldFwVersion *****************
  4056 ;; Defined at:
  4057 ;;		line 58 in file "SystemStatus.c"
  4058 ;; Parameters:    Size  Location     Type
  4059 ;;		None
  4060 ;; Auto vars:     Size  Location     Type
  4061 ;;  idx             2   46[COMRAM] int 
  4062 ;;  TxMsg           9   37[COMRAM] unsigned char [9]
  4063 ;; Return value:  Size  Location     Type
  4064 ;;                  1    wreg      void 
  4065 ;; Registers used:
  4066 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4067 ;; Tracked objects:
  4068 ;;		On entry : 0/0
  4069 ;;		On exit  : 0/0
  4070 ;;		Unchanged: 0/0
  4071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4072 ;;      Params:         0       0       0       0       0       0       0
  4073 ;;      Locals:        11       0       0       0       0       0       0
  4074 ;;      Temps:          2       0       0       0       0       0       0
  4075 ;;      Totals:        13       0       0       0       0       0       0
  4076 ;;Total ram usage:       13 bytes
  4077 ;; Hardware stack levels used:    1
  4078 ;; Hardware stack levels required when called:    5
  4079 ;; This function calls:
  4080 ;;		_EepromRead
  4081 ;;		_WriteUartMessage
  4082 ;;		_ZeroArray
  4083 ;;		_crc8
  4084 ;; This function is called by:
  4085 ;;		_GroupStatusAndVersion
  4086 ;; This function uses a non-reentrant model
  4087 ;;
  4088                           
  4089                           	psect	text19
  4090  002444                     __ptext19:
  4091                           	opt stack 0
  4092  002444                     _GetCpldFwVersion:
  4093                           	opt stack 23
  4094                           
  4095                           ;SystemStatus.c: 61: char TxMsg[(0x4) + (0x4) + 1];
  4096                           ;SystemStatus.c: 62: ZeroArray(TxMsg, (0x4) + (0x4) + 1);
  4097                           
  4098                           ;incstack = 0
  4099  002444  0E26               	movlw	low GetCpldFwVersion@TxMsg
  4100  002446  6E20               	movwf	ZeroArray@array,c
  4101  002448  0E00               	movlw	high GetCpldFwVersion@TxMsg
  4102  00244A  6E21               	movwf	ZeroArray@array+1,c
  4103  00244C  0E00               	movlw	0
  4104  00244E  6E23               	movwf	ZeroArray@size+1,c
  4105  002450  0E09               	movlw	9
  4106  002452  6E22               	movwf	ZeroArray@size,c
  4107  002454  ECDC  F01A         	call	_ZeroArray	;wreg free
  4108                           
  4109                           ;SystemStatus.c: 65: TxMsg[(0)] = (0x24);
  4110  002458  0E24               	movlw	36
  4111  00245A  6E26               	movwf	GetCpldFwVersion@TxMsg,c
  4112                           
  4113                           ;SystemStatus.c: 66: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  4114  00245C  0E02               	movlw	2
  4115  00245E  6E27               	movwf	GetCpldFwVersion@TxMsg+1,c
  4116                           
  4117                           ;SystemStatus.c: 67: TxMsg[(2)] = STATUS_GET_CPLD_FW_VERSION;
  4118  002460  0E23               	movlw	35
  4119  002462  6E28               	movwf	GetCpldFwVersion@TxMsg+2,c
  4120                           
  4121                           ;SystemStatus.c: 68: TxMsg[(3)] = (0x4);
  4122  002464  0E04               	movlw	4
  4123  002466  6E29               	movwf	GetCpldFwVersion@TxMsg+3,c
  4124                           
  4125                           ;SystemStatus.c: 71: for(int idx = 0; idx < (0x4); idx++)
  4126  002468  0E00               	movlw	0
  4127  00246A  6E30               	movwf	GetCpldFwVersion@idx+1,c
  4128  00246C  0E00               	movlw	0
  4129  00246E  6E2F               	movwf	GetCpldFwVersion@idx,c
  4130  002470                     l7382:
  4131  002470  BE30               	btfsc	GetCpldFwVersion@idx+1,7,c
  4132  002472  D006               	goto	l1323
  4133  002474  5030               	movf	GetCpldFwVersion@idx+1,w,c
  4134  002476  E118               	bnz	l7392
  4135  002478  0E04               	movlw	4
  4136  00247A  5C2F               	subwf	GetCpldFwVersion@idx,w,c
  4137  00247C  B0D8               	btfsc	status,0,c
  4138  00247E  D014               	goto	u7300
  4139  002480                     l1323:
  4140                           
  4141                           ;SystemStatus.c: 72: {
  4142                           ;SystemStatus.c: 73: TxMsg[(0x4) + idx] = EepromRead((0x4) + idx);
  4143  002480  0E04               	movlw	4
  4144  002482  242F               	addwf	GetCpldFwVersion@idx,w,c
  4145  002484  6E24               	movwf	??_GetCpldFwVersion& (0+255),c
  4146  002486  0E00               	movlw	0
  4147  002488  2030               	addwfc	GetCpldFwVersion@idx+1,w,c
  4148  00248A  6E25               	movwf	(??_GetCpldFwVersion+1)& (0+255),c
  4149  00248C  0E26               	movlw	low GetCpldFwVersion@TxMsg
  4150  00248E  2424               	addwf	??_GetCpldFwVersion,w,c
  4151  002490  6ED9               	movwf	fsr2l,c
  4152  002492  0E00               	movlw	high GetCpldFwVersion@TxMsg
  4153  002494  2025               	addwfc	??_GetCpldFwVersion+1,w,c
  4154  002496  6EDA               	movwf	fsr2h,c
  4155  002498  502F               	movf	GetCpldFwVersion@idx,w,c
  4156  00249A  0F04               	addlw	4
  4157  00249C  EC9A  F01B         	call	_EepromRead
  4158  0024A0  6EDF               	movwf	indf2,c
  4159  0024A2  4A2F               	infsnz	GetCpldFwVersion@idx,f,c
  4160  0024A4  2A30               	incf	GetCpldFwVersion@idx+1,f,c
  4161  0024A6  D7E4               	goto	l7382
  4162  0024A8                     u7300:
  4163  0024A8                     l7392:
  4164                           
  4165                           ;SystemStatus.c: 74: }
  4166                           ;SystemStatus.c: 76: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  4167  0024A8  0E26               	movlw	low GetCpldFwVersion@TxMsg
  4168  0024AA  6E18               	movwf	crc8@dataArray,c
  4169  0024AC  0E00               	movlw	high GetCpldFwVersion@TxMsg
  4170  0024AE  6E19               	movwf	crc8@dataArray+1,c
  4171  0024B0  0E00               	movlw	0
  4172  0024B2  6E1B               	movwf	crc8@dataSize+1,c
  4173  0024B4  0E08               	movlw	8
  4174  0024B6  6E1A               	movwf	crc8@dataSize,c
  4175  0024B8  ECD3  F016         	call	_crc8	;wreg free
  4176  0024BC  6E2E               	movwf	GetCpldFwVersion@TxMsg+8,c
  4177                           
  4178                           ;SystemStatus.c: 78: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  4179  0024BE  0E26               	movlw	low GetCpldFwVersion@TxMsg
  4180  0024C0  6E19               	movwf	WriteUartMessage@dataBuf,c
  4181  0024C2  0E00               	movlw	high GetCpldFwVersion@TxMsg
  4182  0024C4  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  4183  0024C6  0E00               	movlw	0
  4184  0024C8  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  4185  0024CA  0E09               	movlw	9
  4186  0024CC  6E1B               	movwf	WriteUartMessage@dataSize,c
  4187  0024CE  EC69  F019         	call	_WriteUartMessage	;wreg free
  4188  0024D2  0012               	return		;funcret
  4189  0024D4                     __end_of_GetCpldFwVersion:
  4190                           	opt stack 0
  4191                           tosu	equ	0xFFF
  4192                           tosh	equ	0xFFE
  4193                           tosl	equ	0xFFD
  4194                           pclath	equ	0xFFA
  4195                           tblptru	equ	0xFF8
  4196                           tblptrh	equ	0xFF7
  4197                           tblptrl	equ	0xFF6
  4198                           tablat	equ	0xFF5
  4199                           prodh	equ	0xFF4
  4200                           prodl	equ	0xFF3
  4201                           intcon	equ	0xFF2
  4202                           postinc0	equ	0xFEE
  4203                           wreg	equ	0xFE8
  4204                           postdec1	equ	0xFE5
  4205                           fsr1l	equ	0xFE1
  4206                           indf2	equ	0xFDF
  4207                           postinc2	equ	0xFDE
  4208                           fsr2h	equ	0xFDA
  4209                           fsr2l	equ	0xFD9
  4210                           status	equ	0xFD8
  4211                           
  4212 ;; *************** function _EepromRead *****************
  4213 ;; Defined at:
  4214 ;;		line 215 in file "FlashApp.c"
  4215 ;; Parameters:    Size  Location     Type
  4216 ;;  address         1    wreg     unsigned char 
  4217 ;; Auto vars:     Size  Location     Type
  4218 ;;  address         1   24[COMRAM] unsigned char 
  4219 ;; Return value:  Size  Location     Type
  4220 ;;                  1    wreg      unsigned char 
  4221 ;; Registers used:
  4222 ;;		wreg, status,2, cstack
  4223 ;; Tracked objects:
  4224 ;;		On entry : 0/0
  4225 ;;		On exit  : 0/0
  4226 ;;		Unchanged: 0/0
  4227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4228 ;;      Params:         0       0       0       0       0       0       0
  4229 ;;      Locals:         1       0       0       0       0       0       0
  4230 ;;      Temps:          0       0       0       0       0       0       0
  4231 ;;      Totals:         1       0       0       0       0       0       0
  4232 ;;Total ram usage:        1 bytes
  4233 ;; Hardware stack levels used:    1
  4234 ;; Hardware stack levels required when called:    4
  4235 ;; This function calls:
  4236 ;;		_DATAEE_ReadByte
  4237 ;; This function is called by:
  4238 ;;		_GetMcuFwVersion
  4239 ;;		_GetCpldFwVersion
  4240 ;; This function uses a non-reentrant model
  4241 ;;
  4242                           
  4243                           	psect	text20
  4244  003734                     __ptext20:
  4245                           	opt stack 0
  4246  003734                     _EepromRead:
  4247                           	opt stack 23
  4248                           
  4249                           ;incstack = 0
  4250                           ;EepromRead@address stored from wreg
  4251  003734  6E19               	movwf	EepromRead@address,c
  4252                           
  4253                           ;FlashApp.c: 217: return DATAEE_ReadByte(address);
  4254  003736  5019               	movf	EepromRead@address,w,c
  4255  003738  EC2A  F01B         	call	_DATAEE_ReadByte
  4256  00373C  0012               	return	
  4257  00373E                     __end_of_EepromRead:
  4258                           	opt stack 0
  4259                           tosu	equ	0xFFF
  4260                           tosh	equ	0xFFE
  4261                           tosl	equ	0xFFD
  4262                           pclath	equ	0xFFA
  4263                           tblptru	equ	0xFF8
  4264                           tblptrh	equ	0xFF7
  4265                           tblptrl	equ	0xFF6
  4266                           tablat	equ	0xFF5
  4267                           prodh	equ	0xFF4
  4268                           prodl	equ	0xFF3
  4269                           intcon	equ	0xFF2
  4270                           postinc0	equ	0xFEE
  4271                           wreg	equ	0xFE8
  4272                           postdec1	equ	0xFE5
  4273                           fsr1l	equ	0xFE1
  4274                           indf2	equ	0xFDF
  4275                           postinc2	equ	0xFDE
  4276                           fsr2h	equ	0xFDA
  4277                           fsr2l	equ	0xFD9
  4278                           status	equ	0xFD8
  4279                           
  4280 ;; *************** function _DATAEE_ReadByte *****************
  4281 ;; Defined at:
  4282 ;;		line 194 in file "mcc_generated_files/memory.c"
  4283 ;; Parameters:    Size  Location     Type
  4284 ;;  bAdd            1    wreg     unsigned char 
  4285 ;; Auto vars:     Size  Location     Type
  4286 ;;  bAdd            1   23[COMRAM] unsigned char 
  4287 ;; Return value:  Size  Location     Type
  4288 ;;                  1    wreg      unsigned char 
  4289 ;; Registers used:
  4290 ;;		wreg, status,2
  4291 ;; Tracked objects:
  4292 ;;		On entry : 0/0
  4293 ;;		On exit  : 0/0
  4294 ;;		Unchanged: 0/0
  4295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4296 ;;      Params:         0       0       0       0       0       0       0
  4297 ;;      Locals:         1       0       0       0       0       0       0
  4298 ;;      Temps:          0       0       0       0       0       0       0
  4299 ;;      Totals:         1       0       0       0       0       0       0
  4300 ;;Total ram usage:        1 bytes
  4301 ;; Hardware stack levels used:    1
  4302 ;; Hardware stack levels required when called:    3
  4303 ;; This function calls:
  4304 ;;		Nothing
  4305 ;; This function is called by:
  4306 ;;		_EepromRead
  4307 ;;		_EepromTest
  4308 ;; This function uses a non-reentrant model
  4309 ;;
  4310                           
  4311                           	psect	text21
  4312  003654                     __ptext21:
  4313                           	opt stack 0
  4314  003654                     _DATAEE_ReadByte:
  4315                           	opt stack 23
  4316                           
  4317                           ;incstack = 0
  4318                           ;DATAEE_ReadByte@bAdd stored from wreg
  4319  003654  6E18               	movwf	DATAEE_ReadByte@bAdd,c
  4320                           
  4321                           ;memory.c: 197: EEADR = (bAdd & 0xFF);
  4322  003656  C018  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
  4323                           
  4324                           ;memory.c: 198: EECON1bits.CFGS = 0;
  4325  00365A  9CA6               	bcf	4006,6,c	;volsfr
  4326                           
  4327                           ;memory.c: 199: EECON1bits.EEPGD = 0;
  4328  00365C  9EA6               	bcf	4006,7,c	;volsfr
  4329                           
  4330                           ;memory.c: 200: EECON1bits.RD = 1;
  4331  00365E  80A6               	bsf	4006,0,c	;volsfr
  4332                           
  4333                           ;memory.c: 201: __nop();
  4334  003660  F000               	nop	
  4335                           
  4336                           ;memory.c: 202: __nop();
  4337  003662  F000               	nop	
  4338                           
  4339                           ;memory.c: 204: return (EEDATA);
  4340  003664  50A8               	movf	4008,w,c	;volatile
  4341  003666  0012               	return	
  4342  003668                     __end_of_DATAEE_ReadByte:
  4343                           	opt stack 0
  4344                           tosu	equ	0xFFF
  4345                           tosh	equ	0xFFE
  4346                           tosl	equ	0xFFD
  4347                           pclath	equ	0xFFA
  4348                           tblptru	equ	0xFF8
  4349                           tblptrh	equ	0xFF7
  4350                           tblptrl	equ	0xFF6
  4351                           tablat	equ	0xFF5
  4352                           prodh	equ	0xFF4
  4353                           prodl	equ	0xFF3
  4354                           intcon	equ	0xFF2
  4355                           postinc0	equ	0xFEE
  4356                           wreg	equ	0xFE8
  4357                           postdec1	equ	0xFE5
  4358                           fsr1l	equ	0xFE1
  4359                           indf2	equ	0xFDF
  4360                           postinc2	equ	0xFDE
  4361                           fsr2h	equ	0xFDA
  4362                           fsr2l	equ	0xFD9
  4363                           status	equ	0xFD8
  4364                           
  4365 ;; *************** function _FlashReadUart *****************
  4366 ;; Defined at:
  4367 ;;		line 62 in file "FlashApp.c"
  4368 ;; Parameters:    Size  Location     Type
  4369 ;;  numOfSampleT    2   43[COMRAM] int 
  4370 ;; Auto vars:     Size  Location     Type
  4371 ;;  idx             2   91[BANK0 ] int 
  4372 ;;  TxMsg          69   12[BANK0 ] unsigned char [69]
  4373 ;;  offset          2   93[BANK0 ] int 
  4374 ;;  j               2   89[BANK0 ] int 
  4375 ;; Return value:  Size  Location     Type
  4376 ;;                  1    wreg      void 
  4377 ;; Registers used:
  4378 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4379 ;; Tracked objects:
  4380 ;;		On entry : 0/0
  4381 ;;		On exit  : 0/0
  4382 ;;		Unchanged: 0/0
  4383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4384 ;;      Params:         2       0       0       0       0       0       0
  4385 ;;      Locals:         0      83       0       0       0       0       0
  4386 ;;      Temps:          0      12       0       0       0       0       0
  4387 ;;      Totals:         2      95       0       0       0       0       0
  4388 ;;Total ram usage:       97 bytes
  4389 ;; Hardware stack levels used:    1
  4390 ;; Hardware stack levels required when called:    6
  4391 ;; This function calls:
  4392 ;;		_FLASH_IsWriteDone
  4393 ;;		_FLASH_ReadByte
  4394 ;;		_SendAckMessage
  4395 ;;		_WriteUartMessage
  4396 ;;		_ZeroArray
  4397 ;;		_abs
  4398 ;;		_crc8
  4399 ;; This function is called by:
  4400 ;;		_GroupFlashMemory
  4401 ;; This function uses a non-reentrant model
  4402 ;;
  4403                           
  4404                           	psect	text22
  4405  000676                     __ptext22:
  4406                           	opt stack 0
  4407  000676                     _FlashReadUart:
  4408                           	opt stack 22
  4409                           
  4410                           ;FlashApp.c: 65: int j=0;
  4411                           
  4412                           ;incstack = 0
  4413  000676  0E00               	movlw	0
  4414  000678  0100               	movlb	0	; () banked
  4415  00067A  6FBA               	movwf	(FlashReadUart@j+1)& (0+255),b
  4416  00067C  0E00               	movlw	0
  4417  00067E  6FB9               	movwf	FlashReadUart@j& (0+255),b
  4418                           
  4419                           ;FlashApp.c: 66: int offset = 0;
  4420  000680  0E00               	movlw	0
  4421  000682  6FBE               	movwf	(FlashReadUart@offset+1)& (0+255),b
  4422  000684  0E00               	movlw	0
  4423  000686  6FBD               	movwf	FlashReadUart@offset& (0+255),b
  4424                           
  4425                           ; BSR set to: 0
  4426                           ;FlashApp.c: 67: char TxMsg[(64) + (0x4) + 1];
  4427                           ;FlashApp.c: 68: ZeroArray(TxMsg, (64) + (0x4) + 1);
  4428  000688  0E6C               	movlw	low FlashReadUart@TxMsg
  4429  00068A  6E20               	movwf	ZeroArray@array,c
  4430  00068C  0E00               	movlw	high FlashReadUart@TxMsg
  4431  00068E  6E21               	movwf	ZeroArray@array+1,c
  4432  000690  0E00               	movlw	0
  4433  000692  6E23               	movwf	ZeroArray@size+1,c
  4434  000694  0E45               	movlw	69
  4435  000696  6E22               	movwf	ZeroArray@size,c
  4436  000698  ECDC  F01A         	call	_ZeroArray	;wreg free
  4437                           
  4438                           ;FlashApp.c: 71: if (FLASH_IsWriteDone() == 0)
  4439  00069C  EC75  F01B         	call	_FLASH_IsWriteDone	;wreg free
  4440  0006A0  0900               	iorlw	0
  4441  0006A2  B4D8               	btfsc	status,2,c
  4442  0006A4  0012               	return	
  4443                           
  4444                           ;FlashApp.c: 74: }
  4445                           ;FlashApp.c: 76: if (numOfReadSamples)
  4446                           
  4447                           ;FlashApp.c: 72: {
  4448                           ;FlashApp.c: 73: return;
  4449  0006A6  503E               	movf	_numOfReadSamples,w,c
  4450  0006A8  103F               	iorwf	_numOfReadSamples+1,w,c
  4451  0006AA  1040               	iorwf	_numOfReadSamples+2,w,c
  4452  0006AC  1041               	iorwf	_numOfReadSamples+3,w,c
  4453  0006AE  B4D8               	btfsc	status,2,c
  4454  0006B0  D0EE               	goto	l282
  4455                           
  4456                           ;FlashApp.c: 77: {
  4457                           ;FlashApp.c: 78: if (numOfValidateSamples)
  4458  0006B2  5031               	movf	_numOfValidateSamples,w,c
  4459  0006B4  1032               	iorwf	_numOfValidateSamples+1,w,c
  4460  0006B6  1033               	iorwf	_numOfValidateSamples+2,w,c
  4461  0006B8  1034               	iorwf	_numOfValidateSamples+3,w,c
  4462  0006BA  B4D8               	btfsc	status,2,c
  4463  0006BC  D09A               	goto	l283
  4464                           
  4465                           ;FlashApp.c: 79: {
  4466                           ;FlashApp.c: 80: offset = numOfValidateSamples - (numOfValidateSamples > numOfSampleToRe
      +                          ad)? numOfValidateSamples : numOfSampleToRead;
  4467  0006BE  C02C  F060         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  4468  0006C2  C02D  F061         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  4469  0006C6  0E00               	movlw	0
  4470  0006C8  0100               	movlb	0	; () banked
  4471  0006CA  BF61               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  4472  0006CC  0EFF               	movlw	255
  4473  0006CE  6F62               	movwf	(??_FlashReadUart+2)& (0+255),b
  4474  0006D0  6F63               	movwf	(??_FlashReadUart+3)& (0+255),b
  4475  0006D2  5031               	movf	_numOfValidateSamples,w,c
  4476  0006D4  5D60               	subwf	??_FlashReadUart& (0+255),w,b
  4477  0006D6  5032               	movf	_numOfValidateSamples+1,w,c
  4478  0006D8  5961               	subwfb	(??_FlashReadUart+1)& (0+255),w,b
  4479  0006DA  5033               	movf	_numOfValidateSamples+2,w,c
  4480  0006DC  5962               	subwfb	(??_FlashReadUart+2)& (0+255),w,b
  4481  0006DE  5034               	movf	_numOfValidateSamples+3,w,c
  4482  0006E0  5963               	subwfb	(??_FlashReadUart+3)& (0+255),w,b
  4483  0006E2  B0D8               	btfsc	status,0,c
  4484  0006E4  D002               	goto	u7050
  4485  0006E6  0E01               	movlw	1
  4486  0006E8  D001               	goto	u7060
  4487  0006EA                     u7050:
  4488  0006EA  0E00               	movlw	0
  4489  0006EC                     u7060:
  4490  0006EC  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  4491  0006EE  6B65               	clrf	(??_FlashReadUart+5)& (0+255),b
  4492  0006F0  6B66               	clrf	(??_FlashReadUart+6)& (0+255),b
  4493  0006F2  6B67               	clrf	(??_FlashReadUart+7)& (0+255),b
  4494  0006F4  1F64               	comf	(??_FlashReadUart+4)& (0+255),f,b
  4495  0006F6  1F65               	comf	(??_FlashReadUart+5)& (0+255),f,b
  4496  0006F8  1F66               	comf	(??_FlashReadUart+6)& (0+255),f,b
  4497  0006FA  1F67               	comf	(??_FlashReadUart+7)& (0+255),f,b
  4498  0006FC  2B64               	incf	(??_FlashReadUart+4)& (0+255),f,b
  4499  0006FE  0E00               	movlw	0
  4500  000700  2365               	addwfc	(??_FlashReadUart+5)& (0+255),f,b
  4501  000702  2366               	addwfc	(??_FlashReadUart+6)& (0+255),f,b
  4502  000704  2367               	addwfc	(??_FlashReadUart+7)& (0+255),f,b
  4503  000706  5031               	movf	_numOfValidateSamples,w,c
  4504  000708  2564               	addwf	(??_FlashReadUart+4)& (0+255),w,b
  4505  00070A  6F68               	movwf	(??_FlashReadUart+8)& (0+255),b
  4506  00070C  5032               	movf	_numOfValidateSamples+1,w,c
  4507  00070E  2165               	addwfc	(??_FlashReadUart+5)& (0+255),w,b
  4508  000710  6F69               	movwf	(??_FlashReadUart+9)& (0+255),b
  4509  000712  5033               	movf	_numOfValidateSamples+2,w,c
  4510  000714  2166               	addwfc	(??_FlashReadUart+6)& (0+255),w,b
  4511  000716  6F6A               	movwf	(??_FlashReadUart+10)& (0+255),b
  4512  000718  5034               	movf	_numOfValidateSamples+3,w,c
  4513  00071A  2167               	addwfc	(??_FlashReadUart+7)& (0+255),w,b
  4514  00071C  6F6B               	movwf	(??_FlashReadUart+11)& (0+255),b
  4515  00071E  5168               	movf	(??_FlashReadUart+8)& (0+255),w,b
  4516  000720  1169               	iorwf	(??_FlashReadUart+9)& (0+255),w,b
  4517  000722  116A               	iorwf	(??_FlashReadUart+10)& (0+255),w,b
  4518  000724  116B               	iorwf	(??_FlashReadUart+11)& (0+255),w,b
  4519  000726  A4D8               	btfss	status,2,c
  4520  000728  D00A               	goto	l285
  4521                           
  4522                           ; BSR set to: 0
  4523  00072A  C02C  F0B1         	movff	FlashReadUart@numOfSampleToRead,_FlashReadUart$561
  4524  00072E  C02D  F0B2         	movff	FlashReadUart@numOfSampleToRead+1,_FlashReadUart$561+1
  4525  000732  0E00               	movlw	0
  4526  000734  BFB2               	btfsc	(_FlashReadUart$561+1)& (0+255),7,b
  4527  000736  0EFF               	movlw	-1
  4528  000738  6FB3               	movwf	(_FlashReadUart$561+2)& (0+255),b
  4529  00073A  6FB4               	movwf	(_FlashReadUart$561+3)& (0+255),b
  4530  00073C  D008               	goto	l287
  4531  00073E                     l285:
  4532                           
  4533                           ; BSR set to: 0
  4534  00073E  C031  F0B1         	movff	_numOfValidateSamples,_FlashReadUart$561
  4535  000742  C032  F0B2         	movff	_numOfValidateSamples+1,_FlashReadUart$561+1
  4536  000746  C033  F0B3         	movff	_numOfValidateSamples+2,_FlashReadUart$561+2
  4537  00074A  C034  F0B4         	movff	_numOfValidateSamples+3,_FlashReadUart$561+3
  4538  00074E                     l287:
  4539                           
  4540                           ; BSR set to: 0
  4541  00074E  C0B1  F0BD         	movff	_FlashReadUart$561,FlashReadUart@offset
  4542  000752  C0B2  F0BE         	movff	_FlashReadUart$561+1,FlashReadUart@offset+1
  4543                           
  4544                           ; BSR set to: 0
  4545                           ;FlashApp.c: 81: if(offset < 0)
  4546  000756  AFBE               	btfss	(FlashReadUart@offset+1)& (0+255),7,b
  4547  000758  D091               	goto	l290
  4548                           
  4549                           ; BSR set to: 0
  4550                           ;FlashApp.c: 82: {
  4551                           ;FlashApp.c: 83: if (abs(offset) > numOfReadSamples)
  4552  00075A  C0BD  F018         	movff	FlashReadUart@offset,abs@a
  4553  00075E  C0BE  F019         	movff	FlashReadUart@offset+1,abs@a+1
  4554  000762  EC29  F01A         	call	_abs	;wreg free
  4555  000766  C018  F060         	movff	?_abs,??_FlashReadUart
  4556  00076A  C019  F061         	movff	?_abs+1,??_FlashReadUart+1
  4557  00076E  0E00               	movlw	0
  4558  000770  0100               	movlb	0	; () banked
  4559  000772  BF61               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  4560  000774  0EFF               	movlw	255
  4561  000776  6F62               	movwf	(??_FlashReadUart+2)& (0+255),b
  4562  000778  6F63               	movwf	(??_FlashReadUart+3)& (0+255),b
  4563  00077A  5160               	movf	??_FlashReadUart& (0+255),w,b
  4564  00077C  5C3E               	subwf	_numOfReadSamples,w,c
  4565  00077E  5161               	movf	(??_FlashReadUart+1)& (0+255),w,b
  4566  000780  583F               	subwfb	_numOfReadSamples+1,w,c
  4567  000782  5162               	movf	(??_FlashReadUart+2)& (0+255),w,b
  4568  000784  5840               	subwfb	_numOfReadSamples+2,w,c
  4569  000786  5163               	movf	(??_FlashReadUart+3)& (0+255),w,b
  4570  000788  5841               	subwfb	_numOfReadSamples+3,w,c
  4571  00078A  B0D8               	btfsc	status,0,c
  4572  00078C  D016               	goto	l289
  4573                           
  4574                           ; BSR set to: 0
  4575                           ;FlashApp.c: 84: {
  4576                           ;FlashApp.c: 85: numOfSampleToRead += offset + numOfReadSamples;
  4577  00078E  503E               	movf	_numOfReadSamples,w,c
  4578  000790  25BD               	addwf	FlashReadUart@offset& (0+255),w,b
  4579  000792  6F60               	movwf	??_FlashReadUart& (0+255),b
  4580  000794  503F               	movf	_numOfReadSamples+1,w,c
  4581  000796  21BE               	addwfc	(FlashReadUart@offset+1)& (0+255),w,b
  4582  000798  6F61               	movwf	(??_FlashReadUart+1)& (0+255),b
  4583  00079A  5160               	movf	??_FlashReadUart& (0+255),w,b
  4584  00079C  262C               	addwf	FlashReadUart@numOfSampleToRead,f,c
  4585  00079E  5161               	movf	(??_FlashReadUart+1)& (0+255),w,b
  4586  0007A0  222D               	addwfc	FlashReadUart@numOfSampleToRead+1,f,c
  4587                           
  4588                           ; BSR set to: 0
  4589                           ;FlashApp.c: 86: offset = numOfReadSamples * (-1);
  4590  0007A2  C03E  F060         	movff	_numOfReadSamples,??_FlashReadUart
  4591  0007A6  C03F  F061         	movff	_numOfReadSamples+1,??_FlashReadUart+1
  4592  0007AA  1F60               	comf	??_FlashReadUart& (0+255),f,b
  4593  0007AC  1F61               	comf	(??_FlashReadUart+1)& (0+255),f,b
  4594  0007AE  4B60               	infsnz	??_FlashReadUart& (0+255),f,b
  4595  0007B0  2B61               	incf	(??_FlashReadUart+1)& (0+255),f,b
  4596  0007B2  C060  F0BD         	movff	??_FlashReadUart,FlashReadUart@offset
  4597  0007B6  C061  F0BE         	movff	??_FlashReadUart+1,FlashReadUart@offset+1
  4598  0007BA                     l289:
  4599                           
  4600                           ; BSR set to: 0
  4601                           ;FlashApp.c: 88: }
  4602                           ;FlashApp.c: 90: readAddress += offset * (64);
  4603  0007BA  C0BD  F060         	movff	FlashReadUart@offset,??_FlashReadUart
  4604  0007BE  C0BE  F061         	movff	FlashReadUart@offset+1,??_FlashReadUart+1
  4605  0007C2  0E06               	movlw	6
  4606  0007C4                     u7105:
  4607  0007C4  90D8               	bcf	status,0,c
  4608  0007C6  3760               	rlcf	??_FlashReadUart& (0+255),f,b
  4609  0007C8  3761               	rlcf	(??_FlashReadUart+1)& (0+255),f,b
  4610  0007CA  2EE8               	decfsz	wreg,f,c
  4611  0007CC  D7FB               	goto	u7105
  4612  0007CE  C060  F062         	movff	??_FlashReadUart,??_FlashReadUart+2
  4613  0007D2  C061  F063         	movff	??_FlashReadUart+1,??_FlashReadUart+3
  4614  0007D6  0E00               	movlw	0
  4615  0007D8  BF63               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  4616  0007DA  0EFF               	movlw	255
  4617  0007DC  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  4618  0007DE  6F65               	movwf	(??_FlashReadUart+5)& (0+255),b
  4619  0007E0  5162               	movf	(??_FlashReadUart+2)& (0+255),w,b
  4620  0007E2  27F7               	addwf	_readAddress& (0+255),f,b
  4621  0007E4  5163               	movf	(??_FlashReadUart+3)& (0+255),w,b
  4622  0007E6  23F8               	addwfc	(_readAddress+1)& (0+255),f,b
  4623  0007E8  5164               	movf	(??_FlashReadUart+4)& (0+255),w,b
  4624  0007EA  23F9               	addwfc	(_readAddress+2)& (0+255),f,b
  4625  0007EC  5165               	movf	(??_FlashReadUart+5)& (0+255),w,b
  4626  0007EE  23FA               	addwfc	(_readAddress+3)& (0+255),f,b
  4627                           
  4628                           ; BSR set to: 0
  4629                           ;FlashApp.c: 91: }
  4630                           ;FlashApp.c: 92: }
  4631  0007F0  D045               	goto	l290
  4632  0007F2                     l283:
  4633                           
  4634                           ;FlashApp.c: 93: else
  4635                           ;FlashApp.c: 94: {
  4636                           ;FlashApp.c: 95: numOfSampleToRead = (numOfReadSamples > numOfSampleToRead)? numOfSample
      +                          ToRead : numOfReadSamples;
  4637                           
  4638                           ; BSR set to: 0
  4639  0007F2  C02C  F060         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  4640  0007F6  C02D  F061         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  4641  0007FA  0E00               	movlw	0
  4642  0007FC  0100               	movlb	0	; () banked
  4643  0007FE  BF61               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  4644  000800  0EFF               	movlw	255
  4645  000802  6F62               	movwf	(??_FlashReadUart+2)& (0+255),b
  4646  000804  6F63               	movwf	(??_FlashReadUart+3)& (0+255),b
  4647  000806  503E               	movf	_numOfReadSamples,w,c
  4648  000808  5D60               	subwf	??_FlashReadUart& (0+255),w,b
  4649  00080A  503F               	movf	_numOfReadSamples+1,w,c
  4650  00080C  5961               	subwfb	(??_FlashReadUart+1)& (0+255),w,b
  4651  00080E  5040               	movf	_numOfReadSamples+2,w,c
  4652  000810  5962               	subwfb	(??_FlashReadUart+2)& (0+255),w,b
  4653  000812  5041               	movf	_numOfReadSamples+3,w,c
  4654  000814  5963               	subwfb	(??_FlashReadUart+3)& (0+255),w,b
  4655  000816  A0D8               	btfss	status,0,c
  4656  000818  D009               	goto	l292
  4657                           
  4658                           ; BSR set to: 0
  4659  00081A  C03E  F0B5         	movff	_numOfReadSamples,_FlashReadUart$562
  4660  00081E  C03F  F0B6         	movff	_numOfReadSamples+1,_FlashReadUart$562+1
  4661  000822  C040  F0B7         	movff	_numOfReadSamples+2,_FlashReadUart$562+2
  4662  000826  C041  F0B8         	movff	_numOfReadSamples+3,_FlashReadUart$562+3
  4663  00082A  D009               	goto	l294
  4664  00082C                     l292:
  4665                           
  4666                           ; BSR set to: 0
  4667                           
  4668                           ; BSR set to: 0
  4669  00082C  C02C  F0B5         	movff	FlashReadUart@numOfSampleToRead,_FlashReadUart$562
  4670  000830  C02D  F0B6         	movff	FlashReadUart@numOfSampleToRead+1,_FlashReadUart$562+1
  4671  000834  0E00               	movlw	0
  4672  000836  BFB6               	btfsc	(_FlashReadUart$562+1)& (0+255),7,b
  4673  000838  0EFF               	movlw	-1
  4674  00083A  6FB7               	movwf	(_FlashReadUart$562+2)& (0+255),b
  4675  00083C  6FB8               	movwf	(_FlashReadUart$562+3)& (0+255),b
  4676  00083E                     l294:
  4677                           
  4678                           ; BSR set to: 0
  4679                           
  4680                           ; BSR set to: 0
  4681  00083E  C0B5  F02C         	movff	_FlashReadUart$562,FlashReadUart@numOfSampleToRead
  4682  000842  C0B6  F02D         	movff	_FlashReadUart$562+1,FlashReadUart@numOfSampleToRead+1
  4683                           
  4684                           ; BSR set to: 0
  4685                           ;FlashApp.c: 96: readAddress -= numOfSampleToRead * (64);
  4686  000846  C02C  F060         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  4687  00084A  C02D  F061         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  4688  00084E  0E06               	movlw	6
  4689  000850                     u7125:
  4690  000850  90D8               	bcf	status,0,c
  4691  000852  3760               	rlcf	??_FlashReadUart& (0+255),f,b
  4692  000854  3761               	rlcf	(??_FlashReadUart+1)& (0+255),f,b
  4693  000856  2EE8               	decfsz	wreg,f,c
  4694  000858  D7FB               	goto	u7125
  4695  00085A  C060  F062         	movff	??_FlashReadUart,??_FlashReadUart+2
  4696  00085E  C061  F063         	movff	??_FlashReadUart+1,??_FlashReadUart+3
  4697  000862  0E00               	movlw	0
  4698  000864  BF63               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  4699  000866  0EFF               	movlw	255
  4700  000868  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  4701  00086A  6F65               	movwf	(??_FlashReadUart+5)& (0+255),b
  4702  00086C  5162               	movf	(??_FlashReadUart+2)& (0+255),w,b
  4703  00086E  5FF7               	subwf	_readAddress& (0+255),f,b
  4704  000870  5163               	movf	(??_FlashReadUart+3)& (0+255),w,b
  4705  000872  5BF8               	subwfb	(_readAddress+1)& (0+255),f,b
  4706  000874  5164               	movf	(??_FlashReadUart+4)& (0+255),w,b
  4707  000876  5BF9               	subwfb	(_readAddress+2)& (0+255),f,b
  4708  000878  5165               	movf	(??_FlashReadUart+5)& (0+255),w,b
  4709  00087A  5BFA               	subwfb	(_readAddress+3)& (0+255),f,b
  4710  00087C                     l290:
  4711                           
  4712                           ; BSR set to: 0
  4713                           ;FlashApp.c: 97: }
  4714                           ;FlashApp.c: 99: if (readAddress <= 0x4000)
  4715                           
  4716                           ; BSR set to: 0
  4717  00087C  51FA               	movf	(_readAddress+3)& (0+255),w,b
  4718  00087E  11F9               	iorwf	(_readAddress+2)& (0+255),w,b
  4719  000880  E13E               	bnz	l7248
  4720  000882  05F7               	decf	_readAddress& (0+255),w,b
  4721  000884  0E40               	movlw	64
  4722  000886  59F8               	subwfb	(_readAddress+1)& (0+255),w,b
  4723  000888  B0D8               	btfsc	status,0,c
  4724  00088A  D039               	goto	l300
  4725  00088C  D023               	goto	u7160
  4726  00088E                     l282:
  4727                           
  4728                           ;FlashApp.c: 104: else
  4729                           ;FlashApp.c: 105: {
  4730                           ;FlashApp.c: 106: if ((isReWriteDone) && (readAddress <= writeAddress))
  4731                           
  4732                           ; BSR set to: 0
  4733  00088E  503B               	movf	_isReWriteDone,w,c
  4734  000890  B4D8               	btfsc	status,2,c
  4735  000892  D029               	goto	l297
  4736  000894  0100               	movlb	0	; () banked
  4737  000896  51F7               	movf	_readAddress& (0+255),w,b
  4738  000898  5C42               	subwf	_writeAddress,w,c
  4739  00089A  51F8               	movf	(_readAddress+1)& (0+255),w,b
  4740  00089C  5843               	subwfb	_writeAddress+1,w,c
  4741  00089E  51F9               	movf	(_readAddress+2)& (0+255),w,b
  4742  0008A0  5844               	subwfb	_writeAddress+2,w,c
  4743  0008A2  51FA               	movf	(_readAddress+3)& (0+255),w,b
  4744  0008A4  5845               	subwfb	_writeAddress+3,w,c
  4745  0008A6  A0D8               	btfss	status,0,c
  4746  0008A8  D01E               	goto	l297
  4747                           
  4748                           ; BSR set to: 0
  4749                           ;FlashApp.c: 107: {
  4750                           ;FlashApp.c: 108: readAddress = writeAddress + (64);
  4751  0008AA  0E40               	movlw	64
  4752  0008AC  2442               	addwf	_writeAddress,w,c
  4753  0008AE  6FF7               	movwf	_readAddress& (0+255),b
  4754  0008B0  0E00               	movlw	0
  4755  0008B2  2043               	addwfc	_writeAddress+1,w,c
  4756  0008B4  6FF8               	movwf	(_readAddress+1)& (0+255),b
  4757  0008B6  0E00               	movlw	0
  4758  0008B8  2044               	addwfc	_writeAddress+2,w,c
  4759  0008BA  6FF9               	movwf	(_readAddress+2)& (0+255),b
  4760  0008BC  0E00               	movlw	0
  4761  0008BE  2045               	addwfc	_writeAddress+3,w,c
  4762  0008C0  6FFA               	movwf	(_readAddress+3)& (0+255),b
  4763                           
  4764                           ;FlashApp.c: 109: if (readAddress >= 0x7FF0)
  4765  0008C2  51FA               	movf	(_readAddress+3)& (0+255),w,b
  4766  0008C4  11F9               	iorwf	(_readAddress+2)& (0+255),w,b
  4767  0008C6  E106               	bnz	u7160
  4768  0008C8  0EF0               	movlw	240
  4769  0008CA  5DF7               	subwf	_readAddress& (0+255),w,b
  4770  0008CC  0E7F               	movlw	127
  4771  0008CE  59F8               	subwfb	(_readAddress+1)& (0+255),w,b
  4772  0008D0  A0D8               	btfss	status,0,c
  4773  0008D2  D015               	goto	l300
  4774  0008D4                     u7160:
  4775                           
  4776                           ; BSR set to: 0
  4777                           ;FlashApp.c: 110: {
  4778                           ;FlashApp.c: 111: readAddress = 0x4000;
  4779  0008D4  0E00               	movlw	0
  4780  0008D6  6FF7               	movwf	_readAddress& (0+255),b
  4781  0008D8  0E40               	movlw	64
  4782  0008DA  6FF8               	movwf	(_readAddress+1)& (0+255),b
  4783  0008DC  0E00               	movlw	0
  4784  0008DE  6FF9               	movwf	(_readAddress+2)& (0+255),b
  4785  0008E0  0E00               	movlw	0
  4786  0008E2  6FFA               	movwf	(_readAddress+3)& (0+255),b
  4787                           
  4788                           ; BSR set to: 0
  4789                           ;FlashApp.c: 112: }
  4790                           ;FlashApp.c: 114: }
  4791  0008E4  D00C               	goto	l300
  4792  0008E6                     l297:
  4793                           
  4794                           ;FlashApp.c: 115: else
  4795                           ;FlashApp.c: 116: {
  4796                           ;FlashApp.c: 117: if(numOfValidateSamples == 0)
  4797                           
  4798                           ; BSR set to: 0
  4799  0008E6  5031               	movf	_numOfValidateSamples,w,c
  4800  0008E8  1032               	iorwf	_numOfValidateSamples+1,w,c
  4801  0008EA  1033               	iorwf	_numOfValidateSamples+2,w,c
  4802  0008EC  1034               	iorwf	_numOfValidateSamples+3,w,c
  4803  0008EE  A4D8               	btfss	status,2,c
  4804  0008F0  D006               	goto	l300
  4805                           
  4806                           ;FlashApp.c: 118: {
  4807                           ;FlashApp.c: 119: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_NO_SAMPLE_YET
      +                          );
  4808  0008F2  0E55               	movlw	85
  4809  0008F4  6E24               	movwf	SendAckMessage@inRequest,c
  4810  0008F6  0E05               	movlw	5
  4811  0008F8  ECAA  F016         	call	_SendAckMessage
  4812                           
  4813                           ;FlashApp.c: 120: return;
  4814  0008FC  0012               	return	
  4815  0008FE                     l300:
  4816  0008FE                     l7248:
  4817                           
  4818                           ;FlashApp.c: 121: }
  4819                           ;FlashApp.c: 123: }
  4820                           ;FlashApp.c: 124: }
  4821                           ;FlashApp.c: 127: TxMsg[(0)] = (0x24);
  4822  0008FE  0E24               	movlw	36
  4823  000900  0100               	movlb	0	; () banked
  4824  000902  6F6C               	movwf	FlashReadUart@TxMsg& (0+255),b
  4825                           
  4826                           ;FlashApp.c: 128: TxMsg[(1)] = FLASH_MSG;
  4827  000904  0E05               	movlw	5
  4828  000906  6F6D               	movwf	(FlashReadUart@TxMsg+1)& (0+255),b
  4829                           
  4830                           ;FlashApp.c: 129: TxMsg[(2)] = FLASH_SEND_RAW_DATA;
  4831  000908  0E54               	movlw	84
  4832  00090A  6F6E               	movwf	(FlashReadUart@TxMsg+2)& (0+255),b
  4833                           
  4834                           ;FlashApp.c: 130: TxMsg[(3)] = (64);
  4835  00090C  0E40               	movlw	64
  4836  00090E  6F6F               	movwf	(FlashReadUart@TxMsg+3)& (0+255),b
  4837                           
  4838                           ;FlashApp.c: 132: for (j=0; j<numOfSampleToRead; j++)
  4839  000910  0E00               	movlw	0
  4840  000912  6FBA               	movwf	(FlashReadUart@j+1)& (0+255),b
  4841  000914  0E00               	movlw	0
  4842  000916  6FB9               	movwf	FlashReadUart@j& (0+255),b
  4843  000918  D084               	goto	l301
  4844  00091A                     
  4845                           ; BSR set to: 0
  4846                           ;FlashApp.c: 133: {
  4847                           ;FlashApp.c: 135: for(int idx = 0; idx < (64); idx++)
  4848                           
  4849                           ; BSR set to: 0
  4850  00091A  0E00               	movlw	0
  4851  00091C  6FBC               	movwf	(FlashReadUart@idx+1)& (0+255),b
  4852  00091E  0E00               	movlw	0
  4853  000920  6FBB               	movwf	FlashReadUart@idx& (0+255),b
  4854  000922                     l7252:
  4855                           
  4856                           ; BSR set to: 0
  4857  000922  BFBC               	btfsc	(FlashReadUart@idx+1)& (0+255),7,b
  4858  000924  D006               	goto	l303
  4859  000926  51BC               	movf	(FlashReadUart@idx+1)& (0+255),w,b
  4860  000928  E12C               	bnz	l7262
  4861  00092A  0E40               	movlw	64
  4862  00092C  5DBB               	subwf	FlashReadUart@idx& (0+255),w,b
  4863  00092E  B0D8               	btfsc	status,0,c
  4864  000930  D028               	goto	u7190
  4865  000932                     l303:
  4866                           
  4867                           ; BSR set to: 0
  4868                           ;FlashApp.c: 136: {
  4869                           ;FlashApp.c: 137: TxMsg[(0x4) + idx] = FLASH_ReadByte(readAddress + idx);
  4870                           
  4871                           ; BSR set to: 0
  4872  000932  0E04               	movlw	4
  4873  000934  25BB               	addwf	FlashReadUart@idx& (0+255),w,b
  4874  000936  6F60               	movwf	??_FlashReadUart& (0+255),b
  4875  000938  0E00               	movlw	0
  4876  00093A  21BC               	addwfc	(FlashReadUart@idx+1)& (0+255),w,b
  4877  00093C  6F61               	movwf	(??_FlashReadUart+1)& (0+255),b
  4878  00093E  0E6C               	movlw	low FlashReadUart@TxMsg
  4879  000940  2560               	addwf	??_FlashReadUart& (0+255),w,b
  4880  000942  6ED9               	movwf	fsr2l,c
  4881  000944  0E00               	movlw	high FlashReadUart@TxMsg
  4882  000946  2161               	addwfc	(??_FlashReadUart+1)& (0+255),w,b
  4883  000948  6EDA               	movwf	fsr2h,c
  4884  00094A  C0BB  F062         	movff	FlashReadUart@idx,??_FlashReadUart+2
  4885  00094E  C0BC  F063         	movff	FlashReadUart@idx+1,??_FlashReadUart+3
  4886  000952  0E00               	movlw	0
  4887  000954  BF63               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  4888  000956  0EFF               	movlw	255
  4889  000958  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  4890  00095A  6F65               	movwf	(??_FlashReadUart+5)& (0+255),b
  4891  00095C  51F7               	movf	_readAddress& (0+255),w,b
  4892  00095E  2562               	addwf	(??_FlashReadUart+2)& (0+255),w,b
  4893  000960  6E18               	movwf	FLASH_ReadByte@flashAddr,c
  4894  000962  51F8               	movf	(_readAddress+1)& (0+255),w,b
  4895  000964  2163               	addwfc	(??_FlashReadUart+3)& (0+255),w,b
  4896  000966  6E19               	movwf	FLASH_ReadByte@flashAddr+1,c
  4897  000968  51F9               	movf	(_readAddress+2)& (0+255),w,b
  4898  00096A  2164               	addwfc	(??_FlashReadUart+4)& (0+255),w,b
  4899  00096C  6E1A               	movwf	FLASH_ReadByte@flashAddr+2,c
  4900  00096E  51FA               	movf	(_readAddress+3)& (0+255),w,b
  4901  000970  2165               	addwfc	(??_FlashReadUart+5)& (0+255),w,b
  4902  000972  6E1B               	movwf	FLASH_ReadByte@flashAddr+3,c
  4903  000974  EC48  F01B         	call	_FLASH_ReadByte	;wreg free
  4904  000978  6EDF               	movwf	indf2,c
  4905  00097A  0100               	movlb	0	; () banked
  4906  00097C  4BBB               	infsnz	FlashReadUart@idx& (0+255),f,b
  4907  00097E  2BBC               	incf	(FlashReadUart@idx+1)& (0+255),f,b
  4908  000980  D7D0               	goto	l7252
  4909  000982                     u7190:
  4910  000982                     l7262:
  4911                           
  4912                           ; BSR set to: 0
  4913                           ;FlashApp.c: 138: }
  4914                           ;FlashApp.c: 140: readAddress += (64);
  4915  000982  0E40               	movlw	64
  4916  000984  27F7               	addwf	_readAddress& (0+255),f,b
  4917  000986  0E00               	movlw	0
  4918  000988  23F8               	addwfc	(_readAddress+1)& (0+255),f,b
  4919  00098A  23F9               	addwfc	(_readAddress+2)& (0+255),f,b
  4920  00098C  23FA               	addwfc	(_readAddress+3)& (0+255),f,b
  4921                           
  4922                           ;FlashApp.c: 141: if (readAddress >= 0x7FF0)
  4923  00098E  51FA               	movf	(_readAddress+3)& (0+255),w,b
  4924  000990  11F9               	iorwf	(_readAddress+2)& (0+255),w,b
  4925  000992  E106               	bnz	u7200
  4926  000994  0EF0               	movlw	240
  4927  000996  5DF7               	subwf	_readAddress& (0+255),w,b
  4928  000998  0E7F               	movlw	127
  4929  00099A  59F8               	subwfb	(_readAddress+1)& (0+255),w,b
  4930  00099C  A0D8               	btfss	status,0,c
  4931  00099E  D008               	goto	l305
  4932  0009A0                     u7200:
  4933                           
  4934                           ; BSR set to: 0
  4935                           ;FlashApp.c: 142: {
  4936                           ;FlashApp.c: 143: readAddress = 0x4000;
  4937  0009A0  0E00               	movlw	0
  4938  0009A2  6FF7               	movwf	_readAddress& (0+255),b
  4939  0009A4  0E40               	movlw	64
  4940  0009A6  6FF8               	movwf	(_readAddress+1)& (0+255),b
  4941  0009A8  0E00               	movlw	0
  4942  0009AA  6FF9               	movwf	(_readAddress+2)& (0+255),b
  4943  0009AC  0E00               	movlw	0
  4944  0009AE  6FFA               	movwf	(_readAddress+3)& (0+255),b
  4945  0009B0                     l305:
  4946                           
  4947                           ; BSR set to: 0
  4948                           ;FlashApp.c: 144: }
  4949                           ;FlashApp.c: 145: TxMsg[(64) + (0x4)] = crc8(TxMsg, (64) + (0x4));
  4950                           
  4951                           ; BSR set to: 0
  4952  0009B0  0E6C               	movlw	low FlashReadUart@TxMsg
  4953  0009B2  6E18               	movwf	crc8@dataArray,c
  4954  0009B4  0E00               	movlw	high FlashReadUart@TxMsg
  4955  0009B6  6E19               	movwf	crc8@dataArray+1,c
  4956  0009B8  0E00               	movlw	0
  4957  0009BA  6E1B               	movwf	crc8@dataSize+1,c
  4958  0009BC  0E44               	movlw	68
  4959  0009BE  6E1A               	movwf	crc8@dataSize,c
  4960  0009C0  ECD3  F016         	call	_crc8	;wreg free
  4961  0009C4  0100               	movlb	0	; () banked
  4962  0009C6  6FB0               	movwf	(FlashReadUart@TxMsg+68)& (0+255),b
  4963                           
  4964                           ; BSR set to: 0
  4965                           ;FlashApp.c: 147: WriteUartMessage(TxMsg, (64) + (0x4) + 1);
  4966  0009C8  0E6C               	movlw	low FlashReadUart@TxMsg
  4967  0009CA  6E19               	movwf	WriteUartMessage@dataBuf,c
  4968  0009CC  0E00               	movlw	high FlashReadUart@TxMsg
  4969  0009CE  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  4970  0009D0  0E00               	movlw	0
  4971  0009D2  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  4972  0009D4  0E45               	movlw	69
  4973  0009D6  6E1B               	movwf	WriteUartMessage@dataSize,c
  4974  0009D8  EC69  F019         	call	_WriteUartMessage	;wreg free
  4975                           
  4976                           ;FlashApp.c: 149: if(numOfValidateSamples)
  4977  0009DC  5031               	movf	_numOfValidateSamples,w,c
  4978  0009DE  1032               	iorwf	_numOfValidateSamples+1,w,c
  4979  0009E0  1033               	iorwf	_numOfValidateSamples+2,w,c
  4980  0009E2  1034               	iorwf	_numOfValidateSamples+3,w,c
  4981  0009E4  B4D8               	btfsc	status,2,c
  4982  0009E6  D01A               	goto	l308
  4983                           
  4984                           ;FlashApp.c: 150: {
  4985                           ;FlashApp.c: 151: if (numOfReadSamples < ((0x4000-0x7FF0)/(64)))
  4986  0009E8  043E               	decf	_numOfReadSamples,w,c
  4987  0009EA  0EFF               	movlw	255
  4988  0009EC  583F               	subwfb	_numOfReadSamples+1,w,c
  4989  0009EE  0EFF               	movlw	255
  4990  0009F0  5840               	subwfb	_numOfReadSamples+2,w,c
  4991  0009F2  0EFF               	movlw	255
  4992  0009F4  5841               	subwfb	_numOfReadSamples+3,w,c
  4993  0009F6  B0D8               	btfsc	status,0,c
  4994  0009F8  D006               	goto	l307
  4995                           
  4996                           ;FlashApp.c: 152: {
  4997                           ;FlashApp.c: 153: numOfReadSamples++;
  4998  0009FA  0E01               	movlw	1
  4999  0009FC  263E               	addwf	_numOfReadSamples,f,c
  5000  0009FE  0E00               	movlw	0
  5001  000A00  223F               	addwfc	_numOfReadSamples+1,f,c
  5002  000A02  2240               	addwfc	_numOfReadSamples+2,f,c
  5003  000A04  2241               	addwfc	_numOfReadSamples+3,f,c
  5004  000A06                     l307:
  5005                           
  5006                           ;FlashApp.c: 154: }
  5007                           ;FlashApp.c: 155: if (numOfValidateSamples > 0)
  5008  000A06  5031               	movf	_numOfValidateSamples,w,c
  5009  000A08  1032               	iorwf	_numOfValidateSamples+1,w,c
  5010  000A0A  1033               	iorwf	_numOfValidateSamples+2,w,c
  5011  000A0C  1034               	iorwf	_numOfValidateSamples+3,w,c
  5012  000A0E  B4D8               	btfsc	status,2,c
  5013  000A10  D005               	goto	l308
  5014                           
  5015                           ;FlashApp.c: 156: {
  5016                           ;FlashApp.c: 157: numOfValidateSamples--;
  5017  000A12  0631               	decf	_numOfValidateSamples,f,c
  5018  000A14  0E00               	movlw	0
  5019  000A16  5A32               	subwfb	_numOfValidateSamples+1,f,c
  5020  000A18  5A33               	subwfb	_numOfValidateSamples+2,f,c
  5021  000A1A  5A34               	subwfb	_numOfValidateSamples+3,f,c
  5022  000A1C                     l308:
  5023  000A1C  0100               	movlb	0	; () banked
  5024  000A1E  4BB9               	infsnz	FlashReadUart@j& (0+255),f,b
  5025  000A20  2BBA               	incf	(FlashReadUart@j+1)& (0+255),f,b
  5026  000A22                     l301:
  5027                           
  5028                           ; BSR set to: 0
  5029                           
  5030                           ; BSR set to: 0
  5031  000A22  502C               	movf	FlashReadUart@numOfSampleToRead,w,c
  5032  000A24  5DB9               	subwf	FlashReadUart@j& (0+255),w,b
  5033  000A26  51BA               	movf	(FlashReadUart@j+1)& (0+255),w,b
  5034  000A28  0A80               	xorlw	128
  5035  000A2A  6F60               	movwf	??_FlashReadUart& (0+255),b
  5036  000A2C  502D               	movf	FlashReadUart@numOfSampleToRead+1,w,c
  5037  000A2E  0A80               	xorlw	128
  5038  000A30  5960               	subwfb	??_FlashReadUart& (0+255),w,b
  5039  000A32  B0D8               	btfsc	status,0,c
  5040  000A34  0012               	return	
  5041  000A36  D771               	goto	l302
  5042  000A38                     __end_of_FlashReadUart:
  5043                           	opt stack 0
  5044                           tosu	equ	0xFFF
  5045                           tosh	equ	0xFFE
  5046                           tosl	equ	0xFFD
  5047                           pclath	equ	0xFFA
  5048                           tblptru	equ	0xFF8
  5049                           tblptrh	equ	0xFF7
  5050                           tblptrl	equ	0xFF6
  5051                           tablat	equ	0xFF5
  5052                           prodh	equ	0xFF4
  5053                           prodl	equ	0xFF3
  5054                           intcon	equ	0xFF2
  5055                           postinc0	equ	0xFEE
  5056                           wreg	equ	0xFE8
  5057                           postdec1	equ	0xFE5
  5058                           fsr1l	equ	0xFE1
  5059                           indf2	equ	0xFDF
  5060                           postinc2	equ	0xFDE
  5061                           fsr2h	equ	0xFDA
  5062                           fsr2l	equ	0xFD9
  5063                           status	equ	0xFD8
  5064                           
  5065 ;; *************** function _abs *****************
  5066 ;; Defined at:
  5067 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abs.c"
  5068 ;; Parameters:    Size  Location     Type
  5069 ;;  a               2   23[COMRAM] int 
  5070 ;; Auto vars:     Size  Location     Type
  5071 ;;		None
  5072 ;; Return value:  Size  Location     Type
  5073 ;;                  2   23[COMRAM] int 
  5074 ;; Registers used:
  5075 ;;		wreg, status,2, status,0
  5076 ;; Tracked objects:
  5077 ;;		On entry : 0/0
  5078 ;;		On exit  : 0/0
  5079 ;;		Unchanged: 0/0
  5080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5081 ;;      Params:         2       0       0       0       0       0       0
  5082 ;;      Locals:         0       0       0       0       0       0       0
  5083 ;;      Temps:          2       0       0       0       0       0       0
  5084 ;;      Totals:         4       0       0       0       0       0       0
  5085 ;;Total ram usage:        4 bytes
  5086 ;; Hardware stack levels used:    1
  5087 ;; Hardware stack levels required when called:    3
  5088 ;; This function calls:
  5089 ;;		Nothing
  5090 ;; This function is called by:
  5091 ;;		_FlashReadUart
  5092 ;; This function uses a non-reentrant model
  5093 ;;
  5094                           
  5095                           	psect	text23
  5096  003452                     __ptext23:
  5097                           	opt stack 0
  5098  003452                     _abs:
  5099                           	opt stack 24
  5100                           
  5101                           ;incstack = 0
  5102  003452  AE19               	btfss	abs@a+1,7,c
  5103  003454  D00D               	goto	l1449
  5104  003456  C018  F01A         	movff	abs@a,??_abs
  5105  00345A  C019  F01B         	movff	abs@a+1,??_abs+1
  5106  00345E  1E1A               	comf	??_abs,f,c
  5107  003460  1E1B               	comf	??_abs+1,f,c
  5108  003462  4A1A               	infsnz	??_abs,f,c
  5109  003464  2A1B               	incf	??_abs+1,f,c
  5110  003466  C01A  F018         	movff	??_abs,?_abs
  5111  00346A  C01B  F019         	movff	??_abs+1,?_abs+1
  5112  00346E  0012               	return	
  5113  003470                     l1449:
  5114  003470  C018  F018         	movff	abs@a,?_abs
  5115  003474  C019  F019         	movff	abs@a+1,?_abs+1
  5116  003478  0012               	return		;funcret
  5117  00347A                     __end_of_abs:
  5118                           	opt stack 0
  5119                           tosu	equ	0xFFF
  5120                           tosh	equ	0xFFE
  5121                           tosl	equ	0xFFD
  5122                           pclath	equ	0xFFA
  5123                           tblptru	equ	0xFF8
  5124                           tblptrh	equ	0xFF7
  5125                           tblptrl	equ	0xFF6
  5126                           tablat	equ	0xFF5
  5127                           prodh	equ	0xFF4
  5128                           prodl	equ	0xFF3
  5129                           intcon	equ	0xFF2
  5130                           postinc0	equ	0xFEE
  5131                           wreg	equ	0xFE8
  5132                           postdec1	equ	0xFE5
  5133                           fsr1l	equ	0xFE1
  5134                           indf2	equ	0xFDF
  5135                           postinc2	equ	0xFDE
  5136                           fsr2h	equ	0xFDA
  5137                           fsr2l	equ	0xFD9
  5138                           status	equ	0xFD8
  5139                           
  5140 ;; *************** function _FLASH_ReadByte *****************
  5141 ;; Defined at:
  5142 ;;		line 58 in file "mcc_generated_files/memory.c"
  5143 ;; Parameters:    Size  Location     Type
  5144 ;;  flashAddr       4   23[COMRAM] unsigned long 
  5145 ;; Auto vars:     Size  Location     Type
  5146 ;;		None
  5147 ;; Return value:  Size  Location     Type
  5148 ;;                  1    wreg      unsigned char 
  5149 ;; Registers used:
  5150 ;;		wreg, status,2
  5151 ;; Tracked objects:
  5152 ;;		On entry : 0/0
  5153 ;;		On exit  : 0/0
  5154 ;;		Unchanged: 0/0
  5155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5156 ;;      Params:         4       0       0       0       0       0       0
  5157 ;;      Locals:         0       0       0       0       0       0       0
  5158 ;;      Temps:          0       0       0       0       0       0       0
  5159 ;;      Totals:         4       0       0       0       0       0       0
  5160 ;;Total ram usage:        4 bytes
  5161 ;; Hardware stack levels used:    1
  5162 ;; Hardware stack levels required when called:    3
  5163 ;; This function calls:
  5164 ;;		Nothing
  5165 ;; This function is called by:
  5166 ;;		_FlashReadUart
  5167 ;;		_FlashTest
  5168 ;;		_FLASH_ReadWord
  5169 ;;		_FLASH_WriteByte
  5170 ;; This function uses a non-reentrant model
  5171 ;;
  5172                           
  5173                           	psect	text24
  5174  003690                     __ptext24:
  5175                           	opt stack 0
  5176  003690                     _FLASH_ReadByte:
  5177                           	opt stack 24
  5178                           
  5179                           ;memory.c: 60: TBLPTRU = (uint8_t)((flashAddr & 0x00FF0000) >> 16);
  5180                           
  5181                           ;incstack = 0
  5182  003690  C01A  FFF8         	movff	FLASH_ReadByte@flashAddr+2,tblptru	;volatile
  5183                           
  5184                           ;memory.c: 61: TBLPTRH = (uint8_t)((flashAddr & 0x0000FF00)>> 8);
  5185  003694  C019  FFF7         	movff	FLASH_ReadByte@flashAddr+1,tblptrh	;volatile
  5186                           
  5187                           ;memory.c: 62: TBLPTRL = (uint8_t)(flashAddr & 0x000000FF);
  5188  003698  C018  FFF6         	movff	FLASH_ReadByte@flashAddr,tblptrl	;volatile
  5189  00369C  0008               	tblrd		*	;# 
  5190                           
  5191                           ;memory.c: 66: return (TABLAT);
  5192  00369E  50F5               	movf	tablat,w,c	;volatile
  5193  0036A0  0012               	return	
  5194  0036A2                     __end_of_FLASH_ReadByte:
  5195                           	opt stack 0
  5196                           tosu	equ	0xFFF
  5197                           tosh	equ	0xFFE
  5198                           tosl	equ	0xFFD
  5199                           pclath	equ	0xFFA
  5200                           tblptru	equ	0xFF8
  5201                           tblptrh	equ	0xFF7
  5202                           tblptrl	equ	0xFF6
  5203                           tablat	equ	0xFF5
  5204                           prodh	equ	0xFF4
  5205                           prodl	equ	0xFF3
  5206                           intcon	equ	0xFF2
  5207                           postinc0	equ	0xFEE
  5208                           wreg	equ	0xFE8
  5209                           postdec1	equ	0xFE5
  5210                           fsr1l	equ	0xFE1
  5211                           indf2	equ	0xFDF
  5212                           postinc2	equ	0xFDE
  5213                           fsr2h	equ	0xFDA
  5214                           fsr2l	equ	0xFD9
  5215                           status	equ	0xFD8
  5216                           
  5217 ;; *************** function _FlashReadCondition *****************
  5218 ;; Defined at:
  5219 ;;		line 178 in file "FlashApp.c"
  5220 ;; Parameters:    Size  Location     Type
  5221 ;;		None
  5222 ;; Auto vars:     Size  Location     Type
  5223 ;;  TxMsg           9   39[COMRAM] unsigned char [9]
  5224 ;; Return value:  Size  Location     Type
  5225 ;;                  1    wreg      void 
  5226 ;; Registers used:
  5227 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5228 ;; Tracked objects:
  5229 ;;		On entry : 0/0
  5230 ;;		On exit  : 0/0
  5231 ;;		Unchanged: 0/0
  5232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5233 ;;      Params:         0       0       0       0       0       0       0
  5234 ;;      Locals:         9       0       0       0       0       0       0
  5235 ;;      Temps:          4       0       0       0       0       0       0
  5236 ;;      Totals:        13       0       0       0       0       0       0
  5237 ;;Total ram usage:       13 bytes
  5238 ;; Hardware stack levels used:    1
  5239 ;; Hardware stack levels required when called:    5
  5240 ;; This function calls:
  5241 ;;		_WriteUartMessage
  5242 ;;		_ZeroArray
  5243 ;;		_crc8
  5244 ;;		_make8
  5245 ;; This function is called by:
  5246 ;;		_GroupFlashMemory
  5247 ;; This function uses a non-reentrant model
  5248 ;;
  5249                           
  5250                           	psect	text25
  5251  001828                     __ptext25:
  5252                           	opt stack 0
  5253  001828                     _FlashReadCondition:
  5254                           	opt stack 23
  5255                           
  5256                           ;FlashApp.c: 181: char TxMsg[4 + (0x4) + 1];
  5257                           ;FlashApp.c: 182: ZeroArray(TxMsg, 4 + (0x4) + 1);
  5258                           
  5259                           ;incstack = 0
  5260  001828  0E28               	movlw	low FlashReadCondition@TxMsg
  5261  00182A  6E20               	movwf	ZeroArray@array,c
  5262  00182C  0E00               	movlw	high FlashReadCondition@TxMsg
  5263  00182E  6E21               	movwf	ZeroArray@array+1,c
  5264  001830  0E00               	movlw	0
  5265  001832  6E23               	movwf	ZeroArray@size+1,c
  5266  001834  0E09               	movlw	9
  5267  001836  6E22               	movwf	ZeroArray@size,c
  5268  001838  ECDC  F01A         	call	_ZeroArray	;wreg free
  5269                           
  5270                           ;FlashApp.c: 185: TxMsg[(0)] = (0x24);
  5271  00183C  0E24               	movlw	36
  5272  00183E  6E28               	movwf	FlashReadCondition@TxMsg,c
  5273                           
  5274                           ;FlashApp.c: 186: TxMsg[(1)] = FLASH_MSG;
  5275  001840  0E05               	movlw	5
  5276  001842  6E29               	movwf	FlashReadCondition@TxMsg+1,c
  5277                           
  5278                           ;FlashApp.c: 187: TxMsg[(2)] = FLASH_READ_CONDITION;
  5279  001844  0E52               	movlw	82
  5280  001846  6E2A               	movwf	FlashReadCondition@TxMsg+2,c
  5281                           
  5282                           ;FlashApp.c: 188: TxMsg[(3)] = 4;
  5283  001848  0E04               	movlw	4
  5284  00184A  6E2B               	movwf	FlashReadCondition@TxMsg+3,c
  5285                           
  5286                           ;FlashApp.c: 193: TxMsg[(0x4) + 0] = make8(0x7FF0 - 0x4000,1);
  5287  00184C  0EF0               	movlw	240
  5288  00184E  6E18               	movwf	make8@data,c
  5289  001850  0E3F               	movlw	63
  5290  001852  6E19               	movwf	make8@data+1,c
  5291  001854  0E00               	movlw	0
  5292  001856  6E1A               	movwf	make8@data+2,c
  5293  001858  0E00               	movlw	0
  5294  00185A  6E1B               	movwf	make8@data+3,c
  5295  00185C  0E01               	movlw	1
  5296  00185E  6E1C               	movwf	make8@dataLocation,c
  5297  001860  EC4C  F015         	call	_make8	;wreg free
  5298  001864  6E2C               	movwf	FlashReadCondition@TxMsg+4,c
  5299                           
  5300                           ;FlashApp.c: 194: TxMsg[(0x4) + 1] = make8(0x7FF0 - 0x4000,0);
  5301  001866  0EF0               	movlw	240
  5302  001868  6E18               	movwf	make8@data,c
  5303  00186A  0E3F               	movlw	63
  5304  00186C  6E19               	movwf	make8@data+1,c
  5305  00186E  0E00               	movlw	0
  5306  001870  6E1A               	movwf	make8@data+2,c
  5307  001872  0E00               	movlw	0
  5308  001874  6E1B               	movwf	make8@data+3,c
  5309  001876  0E00               	movlw	0
  5310  001878  6E1C               	movwf	make8@dataLocation,c
  5311  00187A  EC4C  F015         	call	_make8	;wreg free
  5312  00187E  6E2D               	movwf	FlashReadCondition@TxMsg+5,c
  5313                           
  5314                           ;FlashApp.c: 197: TxMsg[(0x4) + 2] = make8(0x7FF0 - writeAddress,1);
  5315  001880  C042  F024         	movff	_writeAddress,??_FlashReadCondition
  5316  001884  C043  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  5317  001888  C044  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  5318  00188C  C045  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  5319  001890  1E24               	comf	??_FlashReadCondition,f,c
  5320  001892  1E25               	comf	??_FlashReadCondition+1,f,c
  5321  001894  1E26               	comf	??_FlashReadCondition+2,f,c
  5322  001896  1E27               	comf	??_FlashReadCondition+3,f,c
  5323  001898  2A24               	incf	??_FlashReadCondition,f,c
  5324  00189A  0E00               	movlw	0
  5325  00189C  2225               	addwfc	??_FlashReadCondition+1,f,c
  5326  00189E  2226               	addwfc	??_FlashReadCondition+2,f,c
  5327  0018A0  2227               	addwfc	??_FlashReadCondition+3,f,c
  5328  0018A2  0EF0               	movlw	240
  5329  0018A4  2424               	addwf	??_FlashReadCondition,w,c
  5330  0018A6  6E18               	movwf	make8@data,c
  5331  0018A8  0E7F               	movlw	127
  5332  0018AA  2025               	addwfc	??_FlashReadCondition+1,w,c
  5333  0018AC  6E19               	movwf	make8@data+1,c
  5334  0018AE  0E00               	movlw	0
  5335  0018B0  2026               	addwfc	??_FlashReadCondition+2,w,c
  5336  0018B2  6E1A               	movwf	make8@data+2,c
  5337  0018B4  0E00               	movlw	0
  5338  0018B6  2027               	addwfc	??_FlashReadCondition+3,w,c
  5339  0018B8  6E1B               	movwf	make8@data+3,c
  5340  0018BA  0E01               	movlw	1
  5341  0018BC  6E1C               	movwf	make8@dataLocation,c
  5342  0018BE  EC4C  F015         	call	_make8	;wreg free
  5343  0018C2  6E2E               	movwf	FlashReadCondition@TxMsg+6,c
  5344                           
  5345                           ;FlashApp.c: 198: TxMsg[(0x4) + 3] = make8(0x7FF0 - writeAddress,0);
  5346  0018C4  C042  F024         	movff	_writeAddress,??_FlashReadCondition
  5347  0018C8  C043  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  5348  0018CC  C044  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  5349  0018D0  C045  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  5350  0018D4  1E24               	comf	??_FlashReadCondition,f,c
  5351  0018D6  1E25               	comf	??_FlashReadCondition+1,f,c
  5352  0018D8  1E26               	comf	??_FlashReadCondition+2,f,c
  5353  0018DA  1E27               	comf	??_FlashReadCondition+3,f,c
  5354  0018DC  2A24               	incf	??_FlashReadCondition,f,c
  5355  0018DE  0E00               	movlw	0
  5356  0018E0  2225               	addwfc	??_FlashReadCondition+1,f,c
  5357  0018E2  2226               	addwfc	??_FlashReadCondition+2,f,c
  5358  0018E4  2227               	addwfc	??_FlashReadCondition+3,f,c
  5359  0018E6  0EF0               	movlw	240
  5360  0018E8  2424               	addwf	??_FlashReadCondition,w,c
  5361  0018EA  6E18               	movwf	make8@data,c
  5362  0018EC  0E7F               	movlw	127
  5363  0018EE  2025               	addwfc	??_FlashReadCondition+1,w,c
  5364  0018F0  6E19               	movwf	make8@data+1,c
  5365  0018F2  0E00               	movlw	0
  5366  0018F4  2026               	addwfc	??_FlashReadCondition+2,w,c
  5367  0018F6  6E1A               	movwf	make8@data+2,c
  5368  0018F8  0E00               	movlw	0
  5369  0018FA  2027               	addwfc	??_FlashReadCondition+3,w,c
  5370  0018FC  6E1B               	movwf	make8@data+3,c
  5371  0018FE  0E00               	movlw	0
  5372  001900  6E1C               	movwf	make8@dataLocation,c
  5373  001902  EC4C  F015         	call	_make8	;wreg free
  5374  001906  6E2F               	movwf	FlashReadCondition@TxMsg+7,c
  5375                           
  5376                           ;FlashApp.c: 200: TxMsg[4 + (0x4)] = crc8(TxMsg, 4 + (0x4));
  5377  001908  0E28               	movlw	low FlashReadCondition@TxMsg
  5378  00190A  6E18               	movwf	crc8@dataArray,c
  5379  00190C  0E00               	movlw	high FlashReadCondition@TxMsg
  5380  00190E  6E19               	movwf	crc8@dataArray+1,c
  5381  001910  0E00               	movlw	0
  5382  001912  6E1B               	movwf	crc8@dataSize+1,c
  5383  001914  0E08               	movlw	8
  5384  001916  6E1A               	movwf	crc8@dataSize,c
  5385  001918  ECD3  F016         	call	_crc8	;wreg free
  5386  00191C  6E30               	movwf	FlashReadCondition@TxMsg+8,c
  5387                           
  5388                           ;FlashApp.c: 202: WriteUartMessage(TxMsg, 4 + (0x4) + 1);
  5389  00191E  0E28               	movlw	low FlashReadCondition@TxMsg
  5390  001920  6E19               	movwf	WriteUartMessage@dataBuf,c
  5391  001922  0E00               	movlw	high FlashReadCondition@TxMsg
  5392  001924  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5393  001926  0E00               	movlw	0
  5394  001928  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5395  00192A  0E09               	movlw	9
  5396  00192C  6E1B               	movwf	WriteUartMessage@dataSize,c
  5397  00192E  EC69  F019         	call	_WriteUartMessage	;wreg free
  5398  001932  0012               	return		;funcret
  5399  001934                     __end_of_FlashReadCondition:
  5400                           	opt stack 0
  5401                           tosu	equ	0xFFF
  5402                           tosh	equ	0xFFE
  5403                           tosl	equ	0xFFD
  5404                           pclath	equ	0xFFA
  5405                           tblptru	equ	0xFF8
  5406                           tblptrh	equ	0xFF7
  5407                           tblptrl	equ	0xFF6
  5408                           tablat	equ	0xFF5
  5409                           prodh	equ	0xFF4
  5410                           prodl	equ	0xFF3
  5411                           intcon	equ	0xFF2
  5412                           postinc0	equ	0xFEE
  5413                           wreg	equ	0xFE8
  5414                           postdec1	equ	0xFE5
  5415                           fsr1l	equ	0xFE1
  5416                           indf2	equ	0xFDF
  5417                           postinc2	equ	0xFDE
  5418                           fsr2h	equ	0xFDA
  5419                           fsr2l	equ	0xFD9
  5420                           status	equ	0xFD8
  5421                           
  5422 ;; *************** function _FlashEreaseMem *****************
  5423 ;; Defined at:
  5424 ;;		line 168 in file "FlashApp.c"
  5425 ;; Parameters:    Size  Location     Type
  5426 ;;		None
  5427 ;; Auto vars:     Size  Location     Type
  5428 ;;		None
  5429 ;; Return value:  Size  Location     Type
  5430 ;;                  1    wreg      void 
  5431 ;; Registers used:
  5432 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5433 ;; Tracked objects:
  5434 ;;		On entry : 0/0
  5435 ;;		On exit  : 0/0
  5436 ;;		Unchanged: 0/0
  5437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5438 ;;      Params:         0       0       0       0       0       0       0
  5439 ;;      Locals:         0       0       0       0       0       0       0
  5440 ;;      Temps:          0       0       0       0       0       0       0
  5441 ;;      Totals:         0       0       0       0       0       0       0
  5442 ;;Total ram usage:        0 bytes
  5443 ;; Hardware stack levels used:    1
  5444 ;; Hardware stack levels required when called:    6
  5445 ;; This function calls:
  5446 ;;		_SendAckMessage
  5447 ;;		_ZeroArray
  5448 ;; This function is called by:
  5449 ;;		_GroupFlashMemory
  5450 ;; This function uses a non-reentrant model
  5451 ;;
  5452                           
  5453                           	psect	text26
  5454  002D02                     __ptext26:
  5455                           	opt stack 0
  5456  002D02                     _FlashEreaseMem:
  5457                           	opt stack 22
  5458                           
  5459                           ;FlashApp.c: 170: writeAddress = 0x4000;
  5460                           
  5461                           ;incstack = 0
  5462  002D02  0E00               	movlw	0
  5463  002D04  6E42               	movwf	_writeAddress,c
  5464  002D06  0E40               	movlw	64
  5465  002D08  6E43               	movwf	_writeAddress+1,c
  5466  002D0A  0E00               	movlw	0
  5467  002D0C  6E44               	movwf	_writeAddress+2,c
  5468  002D0E  0E00               	movlw	0
  5469  002D10  6E45               	movwf	_writeAddress+3,c
  5470                           
  5471                           ;FlashApp.c: 171: readAddress = 0x4000;
  5472  002D12  0E00               	movlw	0
  5473  002D14  0100               	movlb	0	; () banked
  5474  002D16  6FF7               	movwf	_readAddress& (0+255),b
  5475  002D18  0E40               	movlw	64
  5476  002D1A  6FF8               	movwf	(_readAddress+1)& (0+255),b
  5477  002D1C  0E00               	movlw	0
  5478  002D1E  6FF9               	movwf	(_readAddress+2)& (0+255),b
  5479  002D20  0E00               	movlw	0
  5480  002D22  6FFA               	movwf	(_readAddress+3)& (0+255),b
  5481                           
  5482                           ;FlashApp.c: 172: numOfValidateSamples = 0;
  5483  002D24  0E00               	movlw	0
  5484  002D26  6E31               	movwf	_numOfValidateSamples,c
  5485  002D28  0E00               	movlw	0
  5486  002D2A  6E32               	movwf	_numOfValidateSamples+1,c
  5487  002D2C  0E00               	movlw	0
  5488  002D2E  6E33               	movwf	_numOfValidateSamples+2,c
  5489  002D30  0E00               	movlw	0
  5490  002D32  6E34               	movwf	_numOfValidateSamples+3,c
  5491                           
  5492                           ; BSR set to: 0
  5493                           ;FlashApp.c: 173: ZeroArray(sampleArray, (64)/sizeof(adc_result_t));
  5494  002D34  0E6E               	movlw	low _sampleArray
  5495  002D36  6E20               	movwf	ZeroArray@array,c
  5496  002D38  0E01               	movlw	high _sampleArray
  5497  002D3A  6E21               	movwf	ZeroArray@array+1,c
  5498  002D3C  0E00               	movlw	0
  5499  002D3E  6E23               	movwf	ZeroArray@size+1,c
  5500  002D40  0E20               	movlw	32
  5501  002D42  6E22               	movwf	ZeroArray@size,c
  5502  002D44  ECDC  F01A         	call	_ZeroArray	;wreg free
  5503                           
  5504                           ;FlashApp.c: 174: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_EREASE_MEMORY
      +                          );
  5505  002D48  0E51               	movlw	81
  5506  002D4A  6E24               	movwf	SendAckMessage@inRequest,c
  5507  002D4C  0E05               	movlw	5
  5508  002D4E  ECAA  F016         	call	_SendAckMessage
  5509  002D52  0012               	return		;funcret
  5510  002D54                     __end_of_FlashEreaseMem:
  5511                           	opt stack 0
  5512                           tosu	equ	0xFFF
  5513                           tosh	equ	0xFFE
  5514                           tosl	equ	0xFFD
  5515                           pclath	equ	0xFFA
  5516                           tblptru	equ	0xFF8
  5517                           tblptrh	equ	0xFF7
  5518                           tblptrl	equ	0xFF6
  5519                           tablat	equ	0xFF5
  5520                           prodh	equ	0xFF4
  5521                           prodl	equ	0xFF3
  5522                           intcon	equ	0xFF2
  5523                           postinc0	equ	0xFEE
  5524                           wreg	equ	0xFE8
  5525                           postdec1	equ	0xFE5
  5526                           fsr1l	equ	0xFE1
  5527                           indf2	equ	0xFDF
  5528                           postinc2	equ	0xFDE
  5529                           fsr2h	equ	0xFDA
  5530                           fsr2l	equ	0xFD9
  5531                           status	equ	0xFD8
  5532                           
  5533 ;; *************** function _DacSetValue *****************
  5534 ;; Defined at:
  5535 ;;		line 33 in file "DacApp.c"
  5536 ;; Parameters:    Size  Location     Type
  5537 ;;  data            2   45[COMRAM] PTR unsigned char 
  5538 ;;		 -> rxMsgData(20), 
  5539 ;; Auto vars:     Size  Location     Type
  5540 ;;  regData         2   21[BANK0 ] unsigned int 
  5541 ;; Return value:  Size  Location     Type
  5542 ;;                  1    wreg      void 
  5543 ;; Registers used:
  5544 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5545 ;; Tracked objects:
  5546 ;;		On entry : 0/0
  5547 ;;		On exit  : 0/0
  5548 ;;		Unchanged: 0/0
  5549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5550 ;;      Params:         2       0       0       0       0       0       0
  5551 ;;      Locals:         0       2       0       0       0       0       0
  5552 ;;      Temps:          0       0       0       0       0       0       0
  5553 ;;      Totals:         2       2       0       0       0       0       0
  5554 ;;Total ram usage:        4 bytes
  5555 ;; Hardware stack levels used:    1
  5556 ;; Hardware stack levels required when called:    7
  5557 ;; This function calls:
  5558 ;;		_GetIntFromUartData
  5559 ;;		_SWSPI_send_word
  5560 ;;		_SendAckMessage
  5561 ;; This function is called by:
  5562 ;;		_GroupDAC
  5563 ;; This function uses a non-reentrant model
  5564 ;;
  5565                           
  5566                           	psect	text27
  5567  003266                     __ptext27:
  5568                           	opt stack 0
  5569  003266                     _DacSetValue:
  5570                           	opt stack 21
  5571                           
  5572                           ;DacApp.c: 35: uint16_t regData = GetIntFromUartData(data);
  5573                           
  5574                           ;incstack = 0
  5575  003266  C02E  F066         	movff	DacSetValue@data,GetIntFromUartData@data
  5576  00326A  C02F  F067         	movff	DacSetValue@data+1,GetIntFromUartData@data+1
  5577  00326E  EC3F  F011         	call	_GetIntFromUartData	;wreg free
  5578  003272  C066  F075         	movff	?_GetIntFromUartData,DacSetValue@regData
  5579  003276  C067  F076         	movff	?_GetIntFromUartData+1,DacSetValue@regData+1
  5580                           
  5581                           ;DacApp.c: 36: SWSPI_send_word(EXT_DAC, regData, 1);
  5582  00327A  C075  F021         	movff	DacSetValue@regData,SWSPI_send_word@data
  5583  00327E  C076  F022         	movff	DacSetValue@regData+1,SWSPI_send_word@data+1
  5584  003282  6A23               	clrf	SWSPI_send_word@data+2,c
  5585  003284  6A24               	clrf	SWSPI_send_word@data+3,c
  5586  003286  0E01               	movlw	1
  5587  003288  6E25               	movwf	SWSPI_send_word@dataSize,c
  5588  00328A  0E02               	movlw	2
  5589  00328C  EC8C  F011         	call	_SWSPI_send_word
  5590                           
  5591                           ;DacApp.c: 39: SendAckMessage((MSG_GROUPS)DAC_MSG, (MSG_REQUEST)DAC_SET_VALUE);
  5592  003290  0E61               	movlw	97
  5593  003292  6E24               	movwf	SendAckMessage@inRequest,c
  5594  003294  0E06               	movlw	6
  5595  003296  ECAA  F016         	call	_SendAckMessage
  5596  00329A  0012               	return		;funcret
  5597  00329C                     __end_of_DacSetValue:
  5598                           	opt stack 0
  5599                           tosu	equ	0xFFF
  5600                           tosh	equ	0xFFE
  5601                           tosl	equ	0xFFD
  5602                           pclath	equ	0xFFA
  5603                           tblptru	equ	0xFF8
  5604                           tblptrh	equ	0xFF7
  5605                           tblptrl	equ	0xFF6
  5606                           tablat	equ	0xFF5
  5607                           prodh	equ	0xFF4
  5608                           prodl	equ	0xFF3
  5609                           intcon	equ	0xFF2
  5610                           postinc0	equ	0xFEE
  5611                           wreg	equ	0xFE8
  5612                           postdec1	equ	0xFE5
  5613                           fsr1l	equ	0xFE1
  5614                           indf2	equ	0xFDF
  5615                           postinc2	equ	0xFDE
  5616                           fsr2h	equ	0xFDA
  5617                           fsr2l	equ	0xFD9
  5618                           status	equ	0xFD8
  5619                           
  5620 ;; *************** function _GetIntFromUartData *****************
  5621 ;; Defined at:
  5622 ;;		line 40 in file "SystemCommon.c"
  5623 ;; Parameters:    Size  Location     Type
  5624 ;;  data            2    6[BANK0 ] PTR unsigned char 
  5625 ;;		 -> rxMsgData(20), 
  5626 ;; Auto vars:     Size  Location     Type
  5627 ;;  c               1   18[BANK0 ] unsigned char 
  5628 ;;  idx             2   19[BANK0 ] int 
  5629 ;;  dataRegArr      8   10[BANK0 ] unsigned char [8]
  5630 ;; Return value:  Size  Location     Type
  5631 ;;                  4    6[BANK0 ] unsigned long 
  5632 ;; Registers used:
  5633 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5634 ;; Tracked objects:
  5635 ;;		On entry : 0/0
  5636 ;;		On exit  : 0/0
  5637 ;;		Unchanged: 0/0
  5638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5639 ;;      Params:         0       4       0       0       0       0       0
  5640 ;;      Locals:         0      11       0       0       0       0       0
  5641 ;;      Temps:          0       0       0       0       0       0       0
  5642 ;;      Totals:         0      15       0       0       0       0       0
  5643 ;;Total ram usage:       15 bytes
  5644 ;; Hardware stack levels used:    1
  5645 ;; Hardware stack levels required when called:    6
  5646 ;; This function calls:
  5647 ;;		_ZeroArray
  5648 ;;		_strtol
  5649 ;; This function is called by:
  5650 ;;		_DacSetValue
  5651 ;;		_UpdateTxFreq
  5652 ;;		_UpdateRxFreq
  5653 ;; This function uses a non-reentrant model
  5654 ;;
  5655                           
  5656                           	psect	text28
  5657  00227E                     __ptext28:
  5658                           	opt stack 0
  5659  00227E                     _GetIntFromUartData:
  5660                           	opt stack 21
  5661                           
  5662                           ;SystemCommon.c: 42: char dataRegArr[8];
  5663                           ;SystemCommon.c: 43: ZeroArray(dataRegArr, 8);
  5664                           
  5665                           ;incstack = 0
  5666  00227E  0E6A               	movlw	low GetIntFromUartData@dataRegArr
  5667  002280  6E20               	movwf	ZeroArray@array,c
  5668  002282  0E00               	movlw	high GetIntFromUartData@dataRegArr
  5669  002284  6E21               	movwf	ZeroArray@array+1,c
  5670  002286  0E00               	movlw	0
  5671  002288  6E23               	movwf	ZeroArray@size+1,c
  5672  00228A  0E08               	movlw	8
  5673  00228C  6E22               	movwf	ZeroArray@size,c
  5674  00228E  ECDC  F01A         	call	_ZeroArray	;wreg free
  5675                           
  5676                           ;SystemCommon.c: 45: for(int idx = 0; idx < 8; idx++)
  5677  002292  0E00               	movlw	0
  5678  002294  0100               	movlb	0	; () banked
  5679  002296  6F74               	movwf	(GetIntFromUartData@idx+1)& (0+255),b
  5680  002298  0E00               	movlw	0
  5681  00229A  6F73               	movwf	GetIntFromUartData@idx& (0+255),b
  5682  00229C                     l6940:
  5683                           
  5684                           ; BSR set to: 0
  5685  00229C  BF74               	btfsc	(GetIntFromUartData@idx+1)& (0+255),7,b
  5686  00229E  D006               	goto	l1244
  5687  0022A0  5174               	movf	(GetIntFromUartData@idx+1)& (0+255),w,b
  5688  0022A2  E123               	bnz	l6958
  5689  0022A4  0E08               	movlw	8
  5690  0022A6  5D73               	subwf	GetIntFromUartData@idx& (0+255),w,b
  5691  0022A8  B0D8               	btfsc	status,0,c
  5692  0022AA  D01F               	goto	u6740
  5693  0022AC                     l1244:
  5694                           
  5695                           ; BSR set to: 0
  5696                           ;SystemCommon.c: 46: {
  5697                           ;SystemCommon.c: 47: char c = data[idx] + '0';
  5698                           
  5699                           ; BSR set to: 0
  5700  0022AC  5173               	movf	GetIntFromUartData@idx& (0+255),w,b
  5701  0022AE  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  5702  0022B0  6ED9               	movwf	fsr2l,c
  5703  0022B2  5174               	movf	(GetIntFromUartData@idx+1)& (0+255),w,b
  5704  0022B4  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  5705  0022B6  6EDA               	movwf	fsr2h,c
  5706  0022B8  50DF               	movf	indf2,w,c
  5707  0022BA  0F30               	addlw	48
  5708  0022BC  6F72               	movwf	GetIntFromUartData@c& (0+255),b
  5709                           
  5710                           ; BSR set to: 0
  5711                           ;SystemCommon.c: 48: if(c == 0x40)
  5712  0022BE  0E40               	movlw	64
  5713  0022C0  1972               	xorwf	GetIntFromUartData@c& (0+255),w,b
  5714  0022C2  B4D8               	btfsc	status,2,c
  5715  0022C4  D012               	goto	u6740
  5716                           
  5717                           ; BSR set to: 0
  5718                           ;SystemCommon.c: 52: else
  5719                           ;SystemCommon.c: 53: {
  5720                           ;SystemCommon.c: 54: dataRegArr[idx] = data[idx] + '0';
  5721                           
  5722                           ; BSR set to: 0
  5723                           
  5724                           ; BSR set to: 0
  5725                           ;SystemCommon.c: 51: }
  5726                           
  5727                           ; BSR set to: 0
  5728                           ;SystemCommon.c: 49: {
  5729                           ;SystemCommon.c: 50: break;
  5730  0022C6  0E6A               	movlw	low GetIntFromUartData@dataRegArr
  5731  0022C8  2573               	addwf	GetIntFromUartData@idx& (0+255),w,b
  5732  0022CA  6ED9               	movwf	fsr2l,c
  5733  0022CC  0E00               	movlw	high GetIntFromUartData@dataRegArr
  5734  0022CE  2174               	addwfc	(GetIntFromUartData@idx+1)& (0+255),w,b
  5735  0022D0  6EDA               	movwf	fsr2h,c
  5736  0022D2  5173               	movf	GetIntFromUartData@idx& (0+255),w,b
  5737  0022D4  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  5738  0022D6  6EE1               	movwf	fsr1l,c
  5739  0022D8  5174               	movf	(GetIntFromUartData@idx+1)& (0+255),w,b
  5740  0022DA  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  5741  0022DC  6EE2               	movwf	fsr1h,c
  5742  0022DE  50E7               	movf	indf1,w,c
  5743  0022E0  0F30               	addlw	48
  5744  0022E2  6EDF               	movwf	indf2,c
  5745                           
  5746                           ; BSR set to: 0
  5747                           
  5748                           ; BSR set to: 0
  5749  0022E4  4B73               	infsnz	GetIntFromUartData@idx& (0+255),f,b
  5750  0022E6  2B74               	incf	(GetIntFromUartData@idx+1)& (0+255),f,b
  5751  0022E8  D7D9               	goto	l6940
  5752  0022EA                     u6740:
  5753  0022EA                     l6958:
  5754                           
  5755                           ; BSR set to: 0
  5756                           ;SystemCommon.c: 55: }
  5757                           ;SystemCommon.c: 57: }
  5758                           ;SystemCommon.c: 59: return strtol(dataRegArr, (0), 16);
  5759  0022EA  0E6A               	movlw	low GetIntFromUartData@dataRegArr
  5760  0022EC  6E24               	movwf	strtol@s,c
  5761  0022EE  0E00               	movlw	high GetIntFromUartData@dataRegArr
  5762  0022F0  6E25               	movwf	strtol@s+1,c
  5763  0022F2  0E00               	movlw	0
  5764  0022F4  6E26               	movwf	strtol@endptr,c
  5765  0022F6  0E00               	movlw	0
  5766  0022F8  6E27               	movwf	strtol@endptr+1,c
  5767  0022FA  0E00               	movlw	0
  5768  0022FC  6E29               	movwf	strtol@base+1,c
  5769  0022FE  0E10               	movlw	16
  5770  002300  6E28               	movwf	strtol@base,c
  5771  002302  EC28  F008         	call	_strtol	;wreg free
  5772  002306  C024  F066         	movff	?_strtol,?_GetIntFromUartData
  5773  00230A  C025  F067         	movff	?_strtol+1,?_GetIntFromUartData+1
  5774  00230E  C026  F068         	movff	?_strtol+2,?_GetIntFromUartData+2
  5775  002312  C027  F069         	movff	?_strtol+3,?_GetIntFromUartData+3
  5776  002316  0012               	return	
  5777  002318                     __end_of_GetIntFromUartData:
  5778                           	opt stack 0
  5779                           tosu	equ	0xFFF
  5780                           tosh	equ	0xFFE
  5781                           tosl	equ	0xFFD
  5782                           pclath	equ	0xFFA
  5783                           tblptru	equ	0xFF8
  5784                           tblptrh	equ	0xFF7
  5785                           tblptrl	equ	0xFF6
  5786                           tablat	equ	0xFF5
  5787                           prodh	equ	0xFF4
  5788                           prodl	equ	0xFF3
  5789                           intcon	equ	0xFF2
  5790                           postinc0	equ	0xFEE
  5791                           wreg	equ	0xFE8
  5792                           indf1	equ	0xFE7
  5793                           postdec1	equ	0xFE5
  5794                           fsr1h	equ	0xFE2
  5795                           fsr1l	equ	0xFE1
  5796                           indf2	equ	0xFDF
  5797                           postinc2	equ	0xFDE
  5798                           fsr2h	equ	0xFDA
  5799                           fsr2l	equ	0xFD9
  5800                           status	equ	0xFD8
  5801                           
  5802 ;; *************** function _strtol *****************
  5803 ;; Defined at:
  5804 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strtol.c"
  5805 ;; Parameters:    Size  Location     Type
  5806 ;;  s               2   35[COMRAM] PTR const unsigned char 
  5807 ;;		 -> GetIntFromUartData@dataRegArr(8), 
  5808 ;;  endptr          2   37[COMRAM] PTR PTR unsigned char 
  5809 ;;		 -> NULL(0), 
  5810 ;;  base            2   39[COMRAM] int 
  5811 ;; Auto vars:     Size  Location     Type
  5812 ;;  a               4    1[BANK0 ] long 
  5813 ;;  c               1    5[BANK0 ] unsigned char 
  5814 ;;  sign            1    0[BANK0 ] unsigned char 
  5815 ;; Return value:  Size  Location     Type
  5816 ;;                  4   35[COMRAM] long 
  5817 ;; Registers used:
  5818 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5819 ;; Tracked objects:
  5820 ;;		On entry : 0/0
  5821 ;;		On exit  : 0/0
  5822 ;;		Unchanged: 0/0
  5823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5824 ;;      Params:         6       0       0       0       0       0       0
  5825 ;;      Locals:         0       6       0       0       0       0       0
  5826 ;;      Temps:          4       0       0       0       0       0       0
  5827 ;;      Totals:        10       6       0       0       0       0       0
  5828 ;;Total ram usage:       16 bytes
  5829 ;; Hardware stack levels used:    1
  5830 ;; Hardware stack levels required when called:    5
  5831 ;; This function calls:
  5832 ;;		___lmul
  5833 ;;		_isalpha
  5834 ;;		_isdigit
  5835 ;;		_isspace
  5836 ;;		_toupper
  5837 ;; This function is called by:
  5838 ;;		_GetIntFromUartData
  5839 ;; This function uses a non-reentrant model
  5840 ;;
  5841                           
  5842                           	psect	text29
  5843  001050                     __ptext29:
  5844                           	opt stack 0
  5845  001050                     _strtol:
  5846                           	opt stack 21
  5847                           
  5848                           ;incstack = 0
  5849  001050  C024  FFD9         	movff	strtol@s,fsr2l
  5850  001054  C025  FFDA         	movff	strtol@s+1,fsr2h
  5851  001058  50DF               	movf	indf2,w,c
  5852  00105A  0100               	movlb	0	; () banked
  5853  00105C  6F65               	movwf	strtol@c& (0+255),b
  5854                           
  5855                           ; BSR set to: 0
  5856  00105E  4A24               	infsnz	strtol@s,f,c
  5857  001060  2A25               	incf	strtol@s+1,f,c
  5858                           
  5859                           ; BSR set to: 0
  5860  001062  5165               	movf	strtol@c& (0+255),w,b
  5861  001064  EC51  F01A         	call	_isspace
  5862  001068  B0D8               	btfsc	status,0,c
  5863  00106A  D7F2               	goto	_strtol
  5864  00106C  0E00               	movlw	0
  5865  00106E  0100               	movlb	0	; () banked
  5866  001070  6F61               	movwf	strtol@a& (0+255),b
  5867  001072  0E00               	movlw	0
  5868  001074  6F62               	movwf	(strtol@a+1)& (0+255),b
  5869  001076  0E00               	movlw	0
  5870  001078  6F63               	movwf	(strtol@a+2)& (0+255),b
  5871  00107A  0E00               	movlw	0
  5872  00107C  6F64               	movwf	(strtol@a+3)& (0+255),b
  5873  00107E  0E00               	movlw	0
  5874  001080  6F60               	movwf	strtol@sign& (0+255),b
  5875                           
  5876                           ; BSR set to: 0
  5877  001082  0E2D               	movlw	45
  5878  001084  1965               	xorwf	strtol@c& (0+255),w,b
  5879  001086  A4D8               	btfss	status,2,c
  5880  001088  D003               	goto	l1982
  5881                           
  5882                           ; BSR set to: 0
  5883  00108A  0E01               	movlw	1
  5884  00108C  6F60               	movwf	strtol@sign& (0+255),b
  5885  00108E  D004               	goto	u6190
  5886  001090                     l1982:
  5887                           
  5888                           ; BSR set to: 0
  5889                           
  5890                           ; BSR set to: 0
  5891  001090  0E2B               	movlw	43
  5892  001092  1965               	xorwf	strtol@c& (0+255),w,b
  5893  001094  A4D8               	btfss	status,2,c
  5894  001096  D008               	goto	l1984
  5895  001098                     u6190:
  5896                           
  5897                           ; BSR set to: 0
  5898  001098  C024  FFD9         	movff	strtol@s,fsr2l
  5899  00109C  C025  FFDA         	movff	strtol@s+1,fsr2h
  5900  0010A0  50DF               	movf	indf2,w,c
  5901  0010A2  6F65               	movwf	strtol@c& (0+255),b
  5902                           
  5903                           ; BSR set to: 0
  5904  0010A4  4A24               	infsnz	strtol@s,f,c
  5905  0010A6  2A25               	incf	strtol@s+1,f,c
  5906  0010A8                     l1984:
  5907                           
  5908                           ; BSR set to: 0
  5909                           
  5910                           ; BSR set to: 0
  5911                           
  5912                           ; BSR set to: 0
  5913  0010A8  0E30               	movlw	48
  5914  0010AA  1965               	xorwf	strtol@c& (0+255),w,b
  5915  0010AC  A4D8               	btfss	status,2,c
  5916  0010AE  D02E               	goto	l1992
  5917                           
  5918                           ; BSR set to: 0
  5919  0010B0  C024  FFD9         	movff	strtol@s,fsr2l
  5920  0010B4  C025  FFDA         	movff	strtol@s+1,fsr2h
  5921  0010B8  50DF               	movf	indf2,w,c
  5922  0010BA  6F65               	movwf	strtol@c& (0+255),b
  5923                           
  5924                           ; BSR set to: 0
  5925  0010BC  4A24               	infsnz	strtol@s,f,c
  5926  0010BE  2A25               	incf	strtol@s+1,f,c
  5927                           
  5928                           ; BSR set to: 0
  5929  0010C0  5028               	movf	strtol@base,w,c
  5930  0010C2  1029               	iorwf	strtol@base+1,w,c
  5931  0010C4  B4D8               	btfsc	status,2,c
  5932  0010C6  D005               	goto	u6220
  5933                           
  5934                           ; BSR set to: 0
  5935  0010C8  0E10               	movlw	16
  5936  0010CA  1828               	xorwf	strtol@base,w,c
  5937  0010CC  1029               	iorwf	strtol@base+1,w,c
  5938  0010CE  A4D8               	btfss	status,2,c
  5939  0010D0  D015               	goto	l1986
  5940  0010D2                     u6220:
  5941                           
  5942                           ; BSR set to: 0
  5943                           
  5944                           ; BSR set to: 0
  5945  0010D2  0E78               	movlw	120
  5946  0010D4  1965               	xorwf	strtol@c& (0+255),w,b
  5947  0010D6  B4D8               	btfsc	status,2,c
  5948  0010D8  D004               	goto	u6240
  5949                           
  5950                           ; BSR set to: 0
  5951  0010DA  0E58               	movlw	88
  5952  0010DC  1965               	xorwf	strtol@c& (0+255),w,b
  5953  0010DE  A4D8               	btfss	status,2,c
  5954  0010E0  D00D               	goto	l1986
  5955  0010E2                     u6240:
  5956                           
  5957                           ; BSR set to: 0
  5958                           
  5959                           ; BSR set to: 0
  5960  0010E2  0E00               	movlw	0
  5961  0010E4  6E29               	movwf	strtol@base+1,c
  5962  0010E6  0E10               	movlw	16
  5963  0010E8  6E28               	movwf	strtol@base,c
  5964                           
  5965                           ; BSR set to: 0
  5966  0010EA  C024  FFD9         	movff	strtol@s,fsr2l
  5967  0010EE  C025  FFDA         	movff	strtol@s+1,fsr2h
  5968  0010F2  50DF               	movf	indf2,w,c
  5969  0010F4  6F65               	movwf	strtol@c& (0+255),b
  5970                           
  5971                           ; BSR set to: 0
  5972  0010F6  4A24               	infsnz	strtol@s,f,c
  5973  0010F8  2A25               	incf	strtol@s+1,f,c
  5974  0010FA  D008               	goto	l1992
  5975  0010FC                     l1986:
  5976                           
  5977                           ; BSR set to: 0
  5978                           
  5979                           ; BSR set to: 0
  5980  0010FC  5028               	movf	strtol@base,w,c
  5981  0010FE  1029               	iorwf	strtol@base+1,w,c
  5982  001100  A4D8               	btfss	status,2,c
  5983  001102  D004               	goto	l1992
  5984                           
  5985                           ; BSR set to: 0
  5986  001104  0E00               	movlw	0
  5987  001106  6E29               	movwf	strtol@base+1,c
  5988  001108  0E08               	movlw	8
  5989  00110A  6E28               	movwf	strtol@base,c
  5990  00110C                     l1992:
  5991                           
  5992                           ; BSR set to: 0
  5993                           
  5994                           ; BSR set to: 0
  5995                           
  5996                           ; BSR set to: 0
  5997                           
  5998                           ; BSR set to: 0
  5999  00110C  5028               	movf	strtol@base,w,c
  6000  00110E  1029               	iorwf	strtol@base+1,w,c
  6001  001110  A4D8               	btfss	status,2,c
  6002  001112  D004               	goto	l1993
  6003                           
  6004                           ; BSR set to: 0
  6005  001114  0E00               	movlw	0
  6006  001116  6E29               	movwf	strtol@base+1,c
  6007  001118  0E0A               	movlw	10
  6008  00111A  6E28               	movwf	strtol@base,c
  6009  00111C                     l1993:
  6010                           
  6011                           ; BSR set to: 0
  6012                           
  6013                           ; BSR set to: 0
  6014                           
  6015                           ; BSR set to: 0
  6016  00111C  5165               	movf	strtol@c& (0+255),w,b
  6017  00111E  EC3D  F01A         	call	_isalpha
  6018  001122  A0D8               	btfss	status,0,c
  6019  001124  D008               	goto	l1995
  6020  001126  0100               	movlb	0	; () banked
  6021  001128  5165               	movf	strtol@c& (0+255),w,b
  6022  00112A  EC34  F01B         	call	_toupper
  6023  00112E  0FC9               	addlw	201
  6024  001130  0100               	movlb	0	; () banked
  6025  001132  6F65               	movwf	strtol@c& (0+255),b
  6026  001134  D009               	goto	l1998
  6027  001136                     l1995:
  6028                           
  6029                           ; BSR set to: 0
  6030  001136  0100               	movlb	0	; () banked
  6031  001138  5165               	movf	strtol@c& (0+255),w,b
  6032  00113A  ECBE  F01A         	call	_isdigit
  6033  00113E  A0D8               	btfss	status,0,c
  6034  001140  D039               	goto	l1999
  6035  001142  0E30               	movlw	48
  6036  001144  0100               	movlb	0	; () banked
  6037  001146  5F65               	subwf	strtol@c& (0+255),f,b
  6038  001148                     l1998:
  6039                           
  6040                           ; BSR set to: 0
  6041                           
  6042                           ; BSR set to: 0
  6043                           
  6044                           ; BSR set to: 0
  6045  001148  5165               	movf	strtol@c& (0+255),w,b
  6046  00114A  6E2A               	movwf	??_strtol& (0+255),c
  6047  00114C  6A2B               	clrf	(??_strtol+1)& (0+255),c
  6048  00114E  5028               	movf	strtol@base,w,c
  6049  001150  5C2A               	subwf	??_strtol,w,c
  6050  001152  502B               	movf	??_strtol+1,w,c
  6051  001154  0A80               	xorlw	128
  6052  001156  6E2C               	movwf	(??_strtol+2)& (0+255),c
  6053  001158  5029               	movf	strtol@base+1,w,c
  6054  00115A  0A80               	xorlw	128
  6055  00115C  582C               	subwfb	(??_strtol+2)& (0+255),w,c
  6056  00115E  B0D8               	btfsc	status,0,c
  6057  001160  D029               	goto	l1999
  6058                           
  6059                           ; BSR set to: 0
  6060                           
  6061                           ; BSR set to: 0
  6062                           
  6063                           ; BSR set to: 0
  6064  001162  C028  F018         	movff	strtol@base,___lmul@multiplier
  6065  001166  C029  F019         	movff	strtol@base+1,___lmul@multiplier+1
  6066  00116A  0E00               	movlw	0
  6067  00116C  BE19               	btfsc	___lmul@multiplier+1,7,c
  6068  00116E  0EFF               	movlw	-1
  6069  001170  6E1A               	movwf	___lmul@multiplier+2,c
  6070  001172  6E1B               	movwf	___lmul@multiplier+3,c
  6071  001174  C061  F01C         	movff	strtol@a,___lmul@multiplicand
  6072  001178  C062  F01D         	movff	strtol@a+1,___lmul@multiplicand+1
  6073  00117C  C063  F01E         	movff	strtol@a+2,___lmul@multiplicand+2
  6074  001180  C064  F01F         	movff	strtol@a+3,___lmul@multiplicand+3
  6075  001184  EC00  F016         	call	___lmul	;wreg free
  6076  001188  0100               	movlb	0	; () banked
  6077  00118A  5165               	movf	strtol@c& (0+255),w,b
  6078  00118C  2418               	addwf	?___lmul,w,c
  6079  00118E  6F61               	movwf	strtol@a& (0+255),b
  6080  001190  0E00               	movlw	0
  6081  001192  2019               	addwfc	?___lmul+1,w,c
  6082  001194  6F62               	movwf	(strtol@a+1)& (0+255),b
  6083  001196  0E00               	movlw	0
  6084  001198  201A               	addwfc	?___lmul+2,w,c
  6085  00119A  6F63               	movwf	(strtol@a+2)& (0+255),b
  6086  00119C  0E00               	movlw	0
  6087  00119E  201B               	addwfc	?___lmul+3,w,c
  6088  0011A0  6F64               	movwf	(strtol@a+3)& (0+255),b
  6089                           
  6090                           ; BSR set to: 0
  6091  0011A2  C024  FFD9         	movff	strtol@s,fsr2l
  6092  0011A6  C025  FFDA         	movff	strtol@s+1,fsr2h
  6093  0011AA  50DF               	movf	indf2,w,c
  6094  0011AC  6F65               	movwf	strtol@c& (0+255),b
  6095                           
  6096                           ; BSR set to: 0
  6097  0011AE  4A24               	infsnz	strtol@s,f,c
  6098  0011B0  2A25               	incf	strtol@s+1,f,c
  6099  0011B2  D7B4               	goto	l1993
  6100  0011B4                     l1999:
  6101                           
  6102                           ; BSR set to: 0
  6103  0011B4  5026               	movf	strtol@endptr,w,c
  6104  0011B6  1027               	iorwf	strtol@endptr+1,w,c
  6105  0011B8  B4D8               	btfsc	status,2,c
  6106  0011BA  D00E               	goto	l2001
  6107  0011BC  0EFF               	movlw	255
  6108  0011BE  2424               	addwf	strtol@s,w,c
  6109  0011C0  6E2A               	movwf	??_strtol& (0+255),c
  6110  0011C2  0EFF               	movlw	255
  6111  0011C4  2025               	addwfc	strtol@s+1,w,c
  6112  0011C6  6E2B               	movwf	(??_strtol+1)& (0+255),c
  6113  0011C8  C026  FFD9         	movff	strtol@endptr,fsr2l
  6114  0011CC  C027  FFDA         	movff	strtol@endptr+1,fsr2h
  6115  0011D0  C02A  FFDE         	movff	??_strtol,postinc2
  6116  0011D4  C02B  FFDD         	movff	??_strtol+1,postdec2
  6117  0011D8                     l2001:
  6118  0011D8  0100               	movlb	0	; () banked
  6119  0011DA  5160               	movf	strtol@sign& (0+255),w,b
  6120  0011DC  B4D8               	btfsc	status,2,c
  6121  0011DE  D01A               	goto	l2002
  6122                           
  6123                           ; BSR set to: 0
  6124  0011E0  C061  F02A         	movff	strtol@a,??_strtol
  6125  0011E4  C062  F02B         	movff	strtol@a+1,??_strtol+1
  6126  0011E8  C063  F02C         	movff	strtol@a+2,??_strtol+2
  6127  0011EC  C064  F02D         	movff	strtol@a+3,??_strtol+3
  6128  0011F0  1E2A               	comf	??_strtol,f,c
  6129  0011F2  1E2B               	comf	??_strtol+1,f,c
  6130  0011F4  1E2C               	comf	??_strtol+2,f,c
  6131  0011F6  1E2D               	comf	??_strtol+3,f,c
  6132  0011F8  2A2A               	incf	??_strtol,f,c
  6133  0011FA  0E00               	movlw	0
  6134  0011FC  222B               	addwfc	??_strtol+1,f,c
  6135  0011FE  222C               	addwfc	??_strtol+2,f,c
  6136  001200  222D               	addwfc	??_strtol+3,f,c
  6137  001202  C02A  F024         	movff	??_strtol,?_strtol
  6138  001206  C02B  F025         	movff	??_strtol+1,?_strtol+1
  6139  00120A  C02C  F026         	movff	??_strtol+2,?_strtol+2
  6140  00120E  C02D  F027         	movff	??_strtol+3,?_strtol+3
  6141                           
  6142                           ; BSR set to: 0
  6143  001212  0012               	return	
  6144  001214                     l2002:
  6145                           
  6146                           ; BSR set to: 0
  6147  001214  C061  F024         	movff	strtol@a,?_strtol
  6148  001218  C062  F025         	movff	strtol@a+1,?_strtol+1
  6149  00121C  C063  F026         	movff	strtol@a+2,?_strtol+2
  6150  001220  C064  F027         	movff	strtol@a+3,?_strtol+3
  6151                           
  6152                           ; BSR set to: 0
  6153  001224  0012               	return		;funcret
  6154  001226                     __end_of_strtol:
  6155                           	opt stack 0
  6156                           tosu	equ	0xFFF
  6157                           tosh	equ	0xFFE
  6158                           tosl	equ	0xFFD
  6159                           pclath	equ	0xFFA
  6160                           tblptru	equ	0xFF8
  6161                           tblptrh	equ	0xFF7
  6162                           tblptrl	equ	0xFF6
  6163                           tablat	equ	0xFF5
  6164                           prodh	equ	0xFF4
  6165                           prodl	equ	0xFF3
  6166                           intcon	equ	0xFF2
  6167                           postinc0	equ	0xFEE
  6168                           wreg	equ	0xFE8
  6169                           indf1	equ	0xFE7
  6170                           postdec1	equ	0xFE5
  6171                           fsr1h	equ	0xFE2
  6172                           fsr1l	equ	0xFE1
  6173                           indf2	equ	0xFDF
  6174                           postinc2	equ	0xFDE
  6175                           postdec2	equ	0xFDD
  6176                           fsr2h	equ	0xFDA
  6177                           fsr2l	equ	0xFD9
  6178                           status	equ	0xFD8
  6179                           
  6180 ;; *************** function _toupper *****************
  6181 ;; Defined at:
  6182 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\toupper.c"
  6183 ;; Parameters:    Size  Location     Type
  6184 ;;  c               1    wreg     unsigned char 
  6185 ;; Auto vars:     Size  Location     Type
  6186 ;;  c               1   23[COMRAM] unsigned char 
  6187 ;; Return value:  Size  Location     Type
  6188 ;;                  1    wreg      unsigned char 
  6189 ;; Registers used:
  6190 ;;		wreg, status,2, status,0
  6191 ;; Tracked objects:
  6192 ;;		On entry : 0/0
  6193 ;;		On exit  : 0/0
  6194 ;;		Unchanged: 0/0
  6195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6196 ;;      Params:         0       0       0       0       0       0       0
  6197 ;;      Locals:         1       0       0       0       0       0       0
  6198 ;;      Temps:          0       0       0       0       0       0       0
  6199 ;;      Totals:         1       0       0       0       0       0       0
  6200 ;;Total ram usage:        1 bytes
  6201 ;; Hardware stack levels used:    1
  6202 ;; Hardware stack levels required when called:    3
  6203 ;; This function calls:
  6204 ;;		Nothing
  6205 ;; This function is called by:
  6206 ;;		_strtol
  6207 ;; This function uses a non-reentrant model
  6208 ;;
  6209                           
  6210                           	psect	text30
  6211  003668                     __ptext30:
  6212                           	opt stack 0
  6213  003668                     _toupper:
  6214                           	opt stack 22
  6215                           
  6216                           ; BSR set to: 0
  6217                           ;incstack = 0
  6218                           ;toupper@c stored from wreg
  6219  003668  6E18               	movwf	toupper@c,c
  6220  00366A  0E7B               	movlw	123
  6221  00366C  6018               	cpfslt	toupper@c,c
  6222  00366E  D004               	goto	l2006
  6223  003670  0E60               	movlw	96
  6224  003672  6418               	cpfsgt	toupper@c,c
  6225  003674  D001               	goto	l2006
  6226  003676  9A18               	bcf	toupper@c,5,c
  6227  003678                     l2006:
  6228  003678  5018               	movf	toupper@c,w,c
  6229  00367A  0012               	return	
  6230  00367C                     __end_of_toupper:
  6231                           	opt stack 0
  6232                           tosu	equ	0xFFF
  6233                           tosh	equ	0xFFE
  6234                           tosl	equ	0xFFD
  6235                           pclath	equ	0xFFA
  6236                           tblptru	equ	0xFF8
  6237                           tblptrh	equ	0xFF7
  6238                           tblptrl	equ	0xFF6
  6239                           tablat	equ	0xFF5
  6240                           prodh	equ	0xFF4
  6241                           prodl	equ	0xFF3
  6242                           intcon	equ	0xFF2
  6243                           postinc0	equ	0xFEE
  6244                           wreg	equ	0xFE8
  6245                           indf1	equ	0xFE7
  6246                           postdec1	equ	0xFE5
  6247                           fsr1h	equ	0xFE2
  6248                           fsr1l	equ	0xFE1
  6249                           indf2	equ	0xFDF
  6250                           postinc2	equ	0xFDE
  6251                           postdec2	equ	0xFDD
  6252                           fsr2h	equ	0xFDA
  6253                           fsr2l	equ	0xFD9
  6254                           status	equ	0xFD8
  6255                           
  6256 ;; *************** function _isspace *****************
  6257 ;; Defined at:
  6258 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isspace.c"
  6259 ;; Parameters:    Size  Location     Type
  6260 ;;  c               1    wreg     unsigned char 
  6261 ;; Auto vars:     Size  Location     Type
  6262 ;;  c               1   25[COMRAM] unsigned char 
  6263 ;; Return value:  Size  Location     Type
  6264 ;;		None               void
  6265 ;; Registers used:
  6266 ;;		wreg, status,2, status,0
  6267 ;; Tracked objects:
  6268 ;;		On entry : 0/0
  6269 ;;		On exit  : 0/0
  6270 ;;		Unchanged: 0/0
  6271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6272 ;;      Params:         0       0       0       0       0       0       0
  6273 ;;      Locals:         2       0       0       0       0       0       0
  6274 ;;      Temps:          1       0       0       0       0       0       0
  6275 ;;      Totals:         3       0       0       0       0       0       0
  6276 ;;Total ram usage:        3 bytes
  6277 ;; Hardware stack levels used:    1
  6278 ;; Hardware stack levels required when called:    3
  6279 ;; This function calls:
  6280 ;;		Nothing
  6281 ;; This function is called by:
  6282 ;;		_strtol
  6283 ;; This function uses a non-reentrant model
  6284 ;;
  6285                           
  6286                           	psect	text31
  6287  0034A2                     __ptext31:
  6288                           	opt stack 0
  6289  0034A2                     _isspace:
  6290                           	opt stack 22
  6291                           
  6292                           ;incstack = 0
  6293                           ;isspace@c stored from wreg
  6294  0034A2  6E1A               	movwf	isspace@c,c
  6295  0034A4  0E01               	movlw	1
  6296  0034A6  6E19               	movwf	_isspace$2967,c
  6297  0034A8  0E20               	movlw	32
  6298  0034AA  181A               	xorwf	isspace@c,w,c
  6299  0034AC  B4D8               	btfsc	status,2,c
  6300  0034AE  D008               	goto	l2088
  6301  0034B0  0E0E               	movlw	14
  6302  0034B2  601A               	cpfslt	isspace@c,c
  6303  0034B4  D003               	goto	u5980
  6304  0034B6  0E09               	movlw	9
  6305  0034B8  601A               	cpfslt	isspace@c,c
  6306  0034BA  D002               	goto	l2088
  6307  0034BC                     u5980:
  6308  0034BC  0E00               	movlw	0
  6309  0034BE  6E19               	movwf	_isspace$2967,c
  6310  0034C0                     l2088:
  6311  0034C0  C019  F018         	movff	_isspace$2967,??_isspace
  6312  0034C4  3018               	rrcf	??_isspace,w,c
  6313  0034C6  0012               	return	
  6314  0034C8                     __end_of_isspace:
  6315                           	opt stack 0
  6316                           tosu	equ	0xFFF
  6317                           tosh	equ	0xFFE
  6318                           tosl	equ	0xFFD
  6319                           pclath	equ	0xFFA
  6320                           tblptru	equ	0xFF8
  6321                           tblptrh	equ	0xFF7
  6322                           tblptrl	equ	0xFF6
  6323                           tablat	equ	0xFF5
  6324                           prodh	equ	0xFF4
  6325                           prodl	equ	0xFF3
  6326                           intcon	equ	0xFF2
  6327                           postinc0	equ	0xFEE
  6328                           wreg	equ	0xFE8
  6329                           indf1	equ	0xFE7
  6330                           postdec1	equ	0xFE5
  6331                           fsr1h	equ	0xFE2
  6332                           fsr1l	equ	0xFE1
  6333                           indf2	equ	0xFDF
  6334                           postinc2	equ	0xFDE
  6335                           postdec2	equ	0xFDD
  6336                           fsr2h	equ	0xFDA
  6337                           fsr2l	equ	0xFD9
  6338                           status	equ	0xFD8
  6339                           
  6340 ;; *************** function _isdigit *****************
  6341 ;; Defined at:
  6342 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  6343 ;; Parameters:    Size  Location     Type
  6344 ;;  c               1    wreg     unsigned char 
  6345 ;; Auto vars:     Size  Location     Type
  6346 ;;  c               1   25[COMRAM] unsigned char 
  6347 ;; Return value:  Size  Location     Type
  6348 ;;		None               void
  6349 ;; Registers used:
  6350 ;;		wreg, status,2, status,0
  6351 ;; Tracked objects:
  6352 ;;		On entry : 0/0
  6353 ;;		On exit  : 0/0
  6354 ;;		Unchanged: 0/0
  6355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6356 ;;      Params:         0       0       0       0       0       0       0
  6357 ;;      Locals:         2       0       0       0       0       0       0
  6358 ;;      Temps:          1       0       0       0       0       0       0
  6359 ;;      Totals:         3       0       0       0       0       0       0
  6360 ;;Total ram usage:        3 bytes
  6361 ;; Hardware stack levels used:    1
  6362 ;; Hardware stack levels required when called:    3
  6363 ;; This function calls:
  6364 ;;		Nothing
  6365 ;; This function is called by:
  6366 ;;		_strtol
  6367 ;; This function uses a non-reentrant model
  6368 ;;
  6369                           
  6370                           	psect	text32
  6371  00357C                     __ptext32:
  6372                           	opt stack 0
  6373  00357C                     _isdigit:
  6374                           	opt stack 22
  6375                           
  6376                           ;incstack = 0
  6377                           ;isdigit@c stored from wreg
  6378  00357C  6E1A               	movwf	isdigit@c,c
  6379  00357E  0E00               	movlw	0
  6380  003580  6E19               	movwf	_isdigit$2964,c
  6381  003582  0E3A               	movlw	58
  6382  003584  601A               	cpfslt	isdigit@c,c
  6383  003586  D005               	goto	l2083
  6384  003588  0E2F               	movlw	47
  6385  00358A  641A               	cpfsgt	isdigit@c,c
  6386  00358C  D002               	goto	l2083
  6387  00358E  0E01               	movlw	1
  6388  003590  6E19               	movwf	_isdigit$2964,c
  6389  003592                     l2083:
  6390  003592  C019  F018         	movff	_isdigit$2964,??_isdigit
  6391  003596  3018               	rrcf	??_isdigit,w,c
  6392  003598  0012               	return	
  6393  00359A                     __end_of_isdigit:
  6394                           	opt stack 0
  6395                           tosu	equ	0xFFF
  6396                           tosh	equ	0xFFE
  6397                           tosl	equ	0xFFD
  6398                           pclath	equ	0xFFA
  6399                           tblptru	equ	0xFF8
  6400                           tblptrh	equ	0xFF7
  6401                           tblptrl	equ	0xFF6
  6402                           tablat	equ	0xFF5
  6403                           prodh	equ	0xFF4
  6404                           prodl	equ	0xFF3
  6405                           intcon	equ	0xFF2
  6406                           postinc0	equ	0xFEE
  6407                           wreg	equ	0xFE8
  6408                           indf1	equ	0xFE7
  6409                           postdec1	equ	0xFE5
  6410                           fsr1h	equ	0xFE2
  6411                           fsr1l	equ	0xFE1
  6412                           indf2	equ	0xFDF
  6413                           postinc2	equ	0xFDE
  6414                           postdec2	equ	0xFDD
  6415                           fsr2h	equ	0xFDA
  6416                           fsr2l	equ	0xFD9
  6417                           status	equ	0xFD8
  6418                           
  6419 ;; *************** function _isalpha *****************
  6420 ;; Defined at:
  6421 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isalpha.c"
  6422 ;; Parameters:    Size  Location     Type
  6423 ;;  c               1    wreg     unsigned char 
  6424 ;; Auto vars:     Size  Location     Type
  6425 ;;  c               1   28[COMRAM] unsigned char 
  6426 ;; Return value:  Size  Location     Type
  6427 ;;		None               void
  6428 ;; Registers used:
  6429 ;;		wreg, status,2, status,0, cstack
  6430 ;; Tracked objects:
  6431 ;;		On entry : 0/0
  6432 ;;		On exit  : 0/0
  6433 ;;		Unchanged: 0/0
  6434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6435 ;;      Params:         0       0       0       0       0       0       0
  6436 ;;      Locals:         2       0       0       0       0       0       0
  6437 ;;      Temps:          1       0       0       0       0       0       0
  6438 ;;      Totals:         3       0       0       0       0       0       0
  6439 ;;Total ram usage:        3 bytes
  6440 ;; Hardware stack levels used:    1
  6441 ;; Hardware stack levels required when called:    4
  6442 ;; This function calls:
  6443 ;;		_isupper
  6444 ;; This function is called by:
  6445 ;;		_strtol
  6446 ;; This function uses a non-reentrant model
  6447 ;;
  6448                           
  6449                           	psect	text33
  6450  00347A                     __ptext33:
  6451                           	opt stack 0
  6452  00347A                     _isalpha:
  6453                           	opt stack 21
  6454                           
  6455                           ;incstack = 0
  6456                           ;isalpha@c stored from wreg
  6457  00347A  6E1D               	movwf	isalpha@c,c
  6458  00347C  0E01               	movlw	1
  6459  00347E  6E1C               	movwf	_isalpha$2961,c
  6460  003480  0E7B               	movlw	123
  6461  003482  601D               	cpfslt	isalpha@c,c
  6462  003484  D003               	goto	u6000
  6463  003486  0E61               	movlw	97
  6464  003488  601D               	cpfslt	isalpha@c,c
  6465  00348A  D007               	goto	l2078
  6466  00348C                     u6000:
  6467  00348C  501D               	movf	isalpha@c,w,c
  6468  00348E  ECCD  F01A         	call	_isupper
  6469  003492  B0D8               	btfsc	status,0,c
  6470  003494  D002               	goto	l2078
  6471  003496  0E00               	movlw	0
  6472  003498  6E1C               	movwf	_isalpha$2961,c
  6473  00349A                     l2078:
  6474  00349A  C01C  F01B         	movff	_isalpha$2961,??_isalpha
  6475  00349E  301B               	rrcf	??_isalpha,w,c
  6476  0034A0  0012               	return	
  6477  0034A2                     __end_of_isalpha:
  6478                           	opt stack 0
  6479                           tosu	equ	0xFFF
  6480                           tosh	equ	0xFFE
  6481                           tosl	equ	0xFFD
  6482                           pclath	equ	0xFFA
  6483                           tblptru	equ	0xFF8
  6484                           tblptrh	equ	0xFF7
  6485                           tblptrl	equ	0xFF6
  6486                           tablat	equ	0xFF5
  6487                           prodh	equ	0xFF4
  6488                           prodl	equ	0xFF3
  6489                           intcon	equ	0xFF2
  6490                           postinc0	equ	0xFEE
  6491                           wreg	equ	0xFE8
  6492                           indf1	equ	0xFE7
  6493                           postdec1	equ	0xFE5
  6494                           fsr1h	equ	0xFE2
  6495                           fsr1l	equ	0xFE1
  6496                           indf2	equ	0xFDF
  6497                           postinc2	equ	0xFDE
  6498                           postdec2	equ	0xFDD
  6499                           fsr2h	equ	0xFDA
  6500                           fsr2l	equ	0xFD9
  6501                           status	equ	0xFD8
  6502                           
  6503 ;; *************** function _isupper *****************
  6504 ;; Defined at:
  6505 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isupper.c"
  6506 ;; Parameters:    Size  Location     Type
  6507 ;;  c               1    wreg     unsigned char 
  6508 ;; Auto vars:     Size  Location     Type
  6509 ;;  c               1   25[COMRAM] unsigned char 
  6510 ;; Return value:  Size  Location     Type
  6511 ;;		None               void
  6512 ;; Registers used:
  6513 ;;		wreg, status,2, status,0
  6514 ;; Tracked objects:
  6515 ;;		On entry : 0/0
  6516 ;;		On exit  : 0/0
  6517 ;;		Unchanged: 0/0
  6518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6519 ;;      Params:         0       0       0       0       0       0       0
  6520 ;;      Locals:         2       0       0       0       0       0       0
  6521 ;;      Temps:          1       0       0       0       0       0       0
  6522 ;;      Totals:         3       0       0       0       0       0       0
  6523 ;;Total ram usage:        3 bytes
  6524 ;; Hardware stack levels used:    1
  6525 ;; Hardware stack levels required when called:    3
  6526 ;; This function calls:
  6527 ;;		Nothing
  6528 ;; This function is called by:
  6529 ;;		_isalpha
  6530 ;; This function uses a non-reentrant model
  6531 ;;
  6532                           
  6533                           	psect	text34
  6534  00359A                     __ptext34:
  6535                           	opt stack 0
  6536  00359A                     _isupper:
  6537                           	opt stack 21
  6538                           
  6539                           ;incstack = 0
  6540                           ;isupper@c stored from wreg
  6541  00359A  6E1A               	movwf	isupper@c,c
  6542  00359C  0E00               	movlw	0
  6543  00359E  6E19               	movwf	_isupper$2970,c
  6544  0035A0  0E5B               	movlw	91
  6545  0035A2  601A               	cpfslt	isupper@c,c
  6546  0035A4  D005               	goto	l2093
  6547  0035A6  0E40               	movlw	64
  6548  0035A8  641A               	cpfsgt	isupper@c,c
  6549  0035AA  D002               	goto	l2093
  6550  0035AC  0E01               	movlw	1
  6551  0035AE  6E19               	movwf	_isupper$2970,c
  6552  0035B0                     l2093:
  6553  0035B0  C019  F018         	movff	_isupper$2970,??_isupper
  6554  0035B4  3018               	rrcf	??_isupper,w,c
  6555  0035B6  0012               	return	
  6556  0035B8                     __end_of_isupper:
  6557                           	opt stack 0
  6558                           tosu	equ	0xFFF
  6559                           tosh	equ	0xFFE
  6560                           tosl	equ	0xFFD
  6561                           pclath	equ	0xFFA
  6562                           tblptru	equ	0xFF8
  6563                           tblptrh	equ	0xFF7
  6564                           tblptrl	equ	0xFF6
  6565                           tablat	equ	0xFF5
  6566                           prodh	equ	0xFF4
  6567                           prodl	equ	0xFF3
  6568                           intcon	equ	0xFF2
  6569                           postinc0	equ	0xFEE
  6570                           wreg	equ	0xFE8
  6571                           indf1	equ	0xFE7
  6572                           postdec1	equ	0xFE5
  6573                           fsr1h	equ	0xFE2
  6574                           fsr1l	equ	0xFE1
  6575                           indf2	equ	0xFDF
  6576                           postinc2	equ	0xFDE
  6577                           postdec2	equ	0xFDD
  6578                           fsr2h	equ	0xFDA
  6579                           fsr2l	equ	0xFD9
  6580                           status	equ	0xFD8
  6581                           
  6582 ;; *************** function ___lmul *****************
  6583 ;; Defined at:
  6584 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  6585 ;; Parameters:    Size  Location     Type
  6586 ;;  multiplier      4   23[COMRAM] unsigned long 
  6587 ;;  multiplicand    4   27[COMRAM] unsigned long 
  6588 ;; Auto vars:     Size  Location     Type
  6589 ;;  product         4   31[COMRAM] unsigned long 
  6590 ;; Return value:  Size  Location     Type
  6591 ;;                  4   23[COMRAM] unsigned long 
  6592 ;; Registers used:
  6593 ;;		wreg, status,2, status,0
  6594 ;; Tracked objects:
  6595 ;;		On entry : 0/0
  6596 ;;		On exit  : 0/0
  6597 ;;		Unchanged: 0/0
  6598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6599 ;;      Params:         8       0       0       0       0       0       0
  6600 ;;      Locals:         4       0       0       0       0       0       0
  6601 ;;      Temps:          0       0       0       0       0       0       0
  6602 ;;      Totals:        12       0       0       0       0       0       0
  6603 ;;Total ram usage:       12 bytes
  6604 ;; Hardware stack levels used:    1
  6605 ;; Hardware stack levels required when called:    3
  6606 ;; This function calls:
  6607 ;;		Nothing
  6608 ;; This function is called by:
  6609 ;;		_strtol
  6610 ;; This function uses a non-reentrant model
  6611 ;;
  6612                           
  6613                           	psect	text35
  6614  002C00                     __ptext35:
  6615                           	opt stack 0
  6616  002C00                     ___lmul:
  6617                           	opt stack 22
  6618                           
  6619                           ;incstack = 0
  6620  002C00  0E00               	movlw	0
  6621  002C02  6E20               	movwf	___lmul@product,c
  6622  002C04  0E00               	movlw	0
  6623  002C06  6E21               	movwf	___lmul@product+1,c
  6624  002C08  0E00               	movlw	0
  6625  002C0A  6E22               	movwf	___lmul@product+2,c
  6626  002C0C  0E00               	movlw	0
  6627  002C0E  6E23               	movwf	___lmul@product+3,c
  6628  002C10  A018               	btfss	___lmul@multiplier,0,c
  6629  002C12  D008               	goto	l1412
  6630  002C14  501C               	movf	___lmul@multiplicand,w,c
  6631  002C16  2620               	addwf	___lmul@product,f,c
  6632  002C18  501D               	movf	___lmul@multiplicand+1,w,c
  6633  002C1A  2221               	addwfc	___lmul@product+1,f,c
  6634  002C1C  501E               	movf	___lmul@multiplicand+2,w,c
  6635  002C1E  2222               	addwfc	___lmul@product+2,f,c
  6636  002C20  501F               	movf	___lmul@multiplicand+3,w,c
  6637  002C22  2223               	addwfc	___lmul@product+3,f,c
  6638  002C24                     l1412:
  6639  002C24  90D8               	bcf	status,0,c
  6640  002C26  361C               	rlcf	___lmul@multiplicand,f,c
  6641  002C28  361D               	rlcf	___lmul@multiplicand+1,f,c
  6642  002C2A  361E               	rlcf	___lmul@multiplicand+2,f,c
  6643  002C2C  361F               	rlcf	___lmul@multiplicand+3,f,c
  6644  002C2E  90D8               	bcf	status,0,c
  6645  002C30  321B               	rrcf	___lmul@multiplier+3,f,c
  6646  002C32  321A               	rrcf	___lmul@multiplier+2,f,c
  6647  002C34  3219               	rrcf	___lmul@multiplier+1,f,c
  6648  002C36  3218               	rrcf	___lmul@multiplier,f,c
  6649  002C38  5018               	movf	___lmul@multiplier,w,c
  6650  002C3A  1019               	iorwf	___lmul@multiplier+1,w,c
  6651  002C3C  101A               	iorwf	___lmul@multiplier+2,w,c
  6652  002C3E  101B               	iorwf	___lmul@multiplier+3,w,c
  6653  002C40  A4D8               	btfss	status,2,c
  6654  002C42  D7E6               	goto	l1411
  6655  002C44  C020  F018         	movff	___lmul@product,?___lmul
  6656  002C48  C021  F019         	movff	___lmul@product+1,?___lmul+1
  6657  002C4C  C022  F01A         	movff	___lmul@product+2,?___lmul+2
  6658  002C50  C023  F01B         	movff	___lmul@product+3,?___lmul+3
  6659  002C54  0012               	return		;funcret
  6660  002C56                     __end_of___lmul:
  6661                           	opt stack 0
  6662                           tosu	equ	0xFFF
  6663                           tosh	equ	0xFFE
  6664                           tosl	equ	0xFFD
  6665                           pclath	equ	0xFFA
  6666                           tblptru	equ	0xFF8
  6667                           tblptrh	equ	0xFF7
  6668                           tblptrl	equ	0xFF6
  6669                           tablat	equ	0xFF5
  6670                           prodh	equ	0xFF4
  6671                           prodl	equ	0xFF3
  6672                           intcon	equ	0xFF2
  6673                           postinc0	equ	0xFEE
  6674                           wreg	equ	0xFE8
  6675                           indf1	equ	0xFE7
  6676                           postdec1	equ	0xFE5
  6677                           fsr1h	equ	0xFE2
  6678                           fsr1l	equ	0xFE1
  6679                           indf2	equ	0xFDF
  6680                           postinc2	equ	0xFDE
  6681                           postdec2	equ	0xFDD
  6682                           fsr2h	equ	0xFDA
  6683                           fsr2l	equ	0xFD9
  6684                           status	equ	0xFD8
  6685                           
  6686 ;; *************** function _testLeds *****************
  6687 ;; Defined at:
  6688 ;;		line 43 in file "LedsApp.c"
  6689 ;; Parameters:    Size  Location     Type
  6690 ;;		None
  6691 ;; Auto vars:     Size  Location     Type
  6692 ;;  idx             2   44[COMRAM] int 
  6693 ;; Return value:  Size  Location     Type
  6694 ;;                  1    wreg      void 
  6695 ;; Registers used:
  6696 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6697 ;; Tracked objects:
  6698 ;;		On entry : 0/0
  6699 ;;		On exit  : 0/0
  6700 ;;		Unchanged: 0/0
  6701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6702 ;;      Params:         0       0       0       0       0       0       0
  6703 ;;      Locals:         2       0       0       0       0       0       0
  6704 ;;      Temps:          1       0       0       0       0       0       0
  6705 ;;      Totals:         3       0       0       0       0       0       0
  6706 ;;Total ram usage:        3 bytes
  6707 ;; Hardware stack levels used:    1
  6708 ;; Hardware stack levels required when called:    6
  6709 ;; This function calls:
  6710 ;;		_SendAckMessage
  6711 ;; This function is called by:
  6712 ;;		_GroupControlMcu
  6713 ;; This function uses a non-reentrant model
  6714 ;;
  6715                           
  6716                           	psect	text36
  6717  0027E4                     __ptext36:
  6718                           	opt stack 0
  6719  0027E4                     _testLeds:
  6720                           	opt stack 22
  6721                           
  6722                           ;LedsApp.c: 46: for(int idx = 0; idx < 10; idx++)
  6723                           
  6724                           ;incstack = 0
  6725  0027E4  0E00               	movlw	0
  6726  0027E6  6E2E               	movwf	testLeds@idx+1,c
  6727  0027E8  0E00               	movlw	0
  6728  0027EA  6E2D               	movwf	testLeds@idx,c
  6729  0027EC                     l7124:
  6730  0027EC  BE2E               	btfsc	testLeds@idx+1,7,c
  6731  0027EE  D006               	goto	l48
  6732  0027F0  502E               	movf	testLeds@idx+1,w,c
  6733  0027F2  E127               	bnz	l7138
  6734  0027F4  0E0A               	movlw	10
  6735  0027F6  5C2D               	subwf	testLeds@idx,w,c
  6736  0027F8  B0D8               	btfsc	status,0,c
  6737  0027FA  D023               	goto	u6950
  6738  0027FC                     l48:
  6739                           
  6740                           ;LedsApp.c: 47: {
  6741                           ;LedsApp.c: 49: LATCbits.LATC0 = 1;
  6742  0027FC  808B               	bsf	3979,0,c	;volatile
  6743                           
  6744                           ;LedsApp.c: 50: _delay((unsigned long)((50)*(8000000/4000.0)));
  6745  0027FE  0E82               	movlw	130
  6746  002800  6E2C               	movwf	??_testLeds& (0+255),c
  6747  002802  0EDE               	movlw	222
  6748  002804                     u7957:
  6749  002804  2EE8               	decfsz	wreg,f,c
  6750  002806  D7FE               	bra	u7957
  6751  002808  2E2C               	decfsz	??_testLeds& (0+255),f,c
  6752  00280A  D7FC               	bra	u7957
  6753                           
  6754                           ;LedsApp.c: 51: LATBbits.LATB4 = 1;
  6755  00280C  888A               	bsf	3978,4,c	;volatile
  6756                           
  6757                           ;LedsApp.c: 52: _delay((unsigned long)((50)*(8000000/4000.0)));
  6758  00280E  0E82               	movlw	130
  6759  002810  6E2C               	movwf	??_testLeds& (0+255),c
  6760  002812  0EDE               	movlw	222
  6761  002814                     u7967:
  6762  002814  2EE8               	decfsz	wreg,f,c
  6763  002816  D7FE               	bra	u7967
  6764  002818  2E2C               	decfsz	??_testLeds& (0+255),f,c
  6765  00281A  D7FC               	bra	u7967
  6766                           
  6767                           ;LedsApp.c: 53: LATCbits.LATC0 = 0;
  6768  00281C  908B               	bcf	3979,0,c	;volatile
  6769                           
  6770                           ;LedsApp.c: 54: _delay((unsigned long)((50)*(8000000/4000.0)));
  6771  00281E  0E82               	movlw	130
  6772  002820  6E2C               	movwf	??_testLeds& (0+255),c
  6773  002822  0EDE               	movlw	222
  6774  002824                     u7977:
  6775  002824  2EE8               	decfsz	wreg,f,c
  6776  002826  D7FE               	bra	u7977
  6777  002828  2E2C               	decfsz	??_testLeds& (0+255),f,c
  6778  00282A  D7FC               	bra	u7977
  6779                           
  6780                           ;LedsApp.c: 55: LATBbits.LATB4 = 0;
  6781  00282C  988A               	bcf	3978,4,c	;volatile
  6782                           
  6783                           ;LedsApp.c: 56: _delay((unsigned long)((50)*(8000000/4000.0)));
  6784  00282E  0E82               	movlw	130
  6785  002830  6E2C               	movwf	??_testLeds& (0+255),c
  6786  002832  0EDE               	movlw	222
  6787  002834                     u7987:
  6788  002834  2EE8               	decfsz	wreg,f,c
  6789  002836  D7FE               	bra	u7987
  6790  002838  2E2C               	decfsz	??_testLeds& (0+255),f,c
  6791  00283A  D7FC               	bra	u7987
  6792  00283C  4A2D               	infsnz	testLeds@idx,f,c
  6793  00283E  2A2E               	incf	testLeds@idx+1,f,c
  6794  002840  D7D5               	goto	l7124
  6795  002842                     u6950:
  6796  002842                     l7138:
  6797                           
  6798                           ;LedsApp.c: 57: }
  6799                           ;LedsApp.c: 59: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_TEST_LEDS);
  6800  002842  0E15               	movlw	21
  6801  002844  6E24               	movwf	SendAckMessage@inRequest,c
  6802  002846  0E01               	movlw	1
  6803  002848  ECAA  F016         	call	_SendAckMessage
  6804  00284C  0012               	return	
  6805  00284E                     __end_of_testLeds:
  6806                           	opt stack 0
  6807                           tosu	equ	0xFFF
  6808                           tosh	equ	0xFFE
  6809                           tosl	equ	0xFFD
  6810                           pclath	equ	0xFFA
  6811                           tblptru	equ	0xFF8
  6812                           tblptrh	equ	0xFF7
  6813                           tblptrl	equ	0xFF6
  6814                           tablat	equ	0xFF5
  6815                           prodh	equ	0xFF4
  6816                           prodl	equ	0xFF3
  6817                           intcon	equ	0xFF2
  6818                           postinc0	equ	0xFEE
  6819                           wreg	equ	0xFE8
  6820                           indf1	equ	0xFE7
  6821                           postdec1	equ	0xFE5
  6822                           fsr1h	equ	0xFE2
  6823                           fsr1l	equ	0xFE1
  6824                           indf2	equ	0xFDF
  6825                           postinc2	equ	0xFDE
  6826                           postdec2	equ	0xFDD
  6827                           fsr2h	equ	0xFDA
  6828                           fsr2l	equ	0xFD9
  6829                           status	equ	0xFD8
  6830                           
  6831 ;; *************** function _ResetMcu *****************
  6832 ;; Defined at:
  6833 ;;		line 85 in file "SystemCommon.c"
  6834 ;; Parameters:    Size  Location     Type
  6835 ;;		None
  6836 ;; Auto vars:     Size  Location     Type
  6837 ;;		None
  6838 ;; Return value:  Size  Location     Type
  6839 ;;                  1    wreg      void 
  6840 ;; Registers used:
  6841 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6842 ;; Tracked objects:
  6843 ;;		On entry : 0/0
  6844 ;;		On exit  : 0/0
  6845 ;;		Unchanged: 0/0
  6846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6847 ;;      Params:         0       0       0       0       0       0       0
  6848 ;;      Locals:         0       0       0       0       0       0       0
  6849 ;;      Temps:          0       0       0       0       0       0       0
  6850 ;;      Totals:         0       0       0       0       0       0       0
  6851 ;;Total ram usage:        0 bytes
  6852 ;; Hardware stack levels used:    1
  6853 ;; Hardware stack levels required when called:    6
  6854 ;; This function calls:
  6855 ;;		_SendAckMessage
  6856 ;; This function is called by:
  6857 ;;		_GroupControlMcu
  6858 ;; This function uses a non-reentrant model
  6859 ;;
  6860                           
  6861                           	psect	text37
  6862  0036C0                     __ptext37:
  6863                           	opt stack 0
  6864  0036C0                     _ResetMcu:
  6865                           	opt stack 22
  6866                           
  6867                           ;SystemCommon.c: 88: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_RESET_
      +                          MCU);
  6868                           
  6869                           ;incstack = 0
  6870  0036C0  0E11               	movlw	17
  6871  0036C2  6E24               	movwf	SendAckMessage@inRequest,c
  6872  0036C4  0E01               	movlw	1
  6873  0036C6  ECAA  F016         	call	_SendAckMessage
  6874  0036CA  00FF               	reset		;# 
  6875  0036CC  0012               	return		;funcret
  6876  0036CE                     __end_of_ResetMcu:
  6877                           	opt stack 0
  6878                           tosu	equ	0xFFF
  6879                           tosh	equ	0xFFE
  6880                           tosl	equ	0xFFD
  6881                           pclath	equ	0xFFA
  6882                           tblptru	equ	0xFF8
  6883                           tblptrh	equ	0xFF7
  6884                           tblptrl	equ	0xFF6
  6885                           tablat	equ	0xFF5
  6886                           prodh	equ	0xFF4
  6887                           prodl	equ	0xFF3
  6888                           intcon	equ	0xFF2
  6889                           postinc0	equ	0xFEE
  6890                           wreg	equ	0xFE8
  6891                           indf1	equ	0xFE7
  6892                           postdec1	equ	0xFE5
  6893                           fsr1h	equ	0xFE2
  6894                           fsr1l	equ	0xFE1
  6895                           indf2	equ	0xFDF
  6896                           postinc2	equ	0xFDE
  6897                           postdec2	equ	0xFDD
  6898                           fsr2h	equ	0xFDA
  6899                           fsr2l	equ	0xFD9
  6900                           status	equ	0xFD8
  6901                           
  6902 ;; *************** function _ResetCpld *****************
  6903 ;; Defined at:
  6904 ;;		line 94 in file "SystemCommon.c"
  6905 ;; Parameters:    Size  Location     Type
  6906 ;;		None
  6907 ;; Auto vars:     Size  Location     Type
  6908 ;;		None
  6909 ;; Return value:  Size  Location     Type
  6910 ;;                  1    wreg      void 
  6911 ;; Registers used:
  6912 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6913 ;; Tracked objects:
  6914 ;;		On entry : 0/0
  6915 ;;		On exit  : 0/0
  6916 ;;		Unchanged: 0/0
  6917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6918 ;;      Params:         0       0       0       0       0       0       0
  6919 ;;      Locals:         0       0       0       0       0       0       0
  6920 ;;      Temps:          0       0       0       0       0       0       0
  6921 ;;      Totals:         0       0       0       0       0       0       0
  6922 ;;Total ram usage:        0 bytes
  6923 ;; Hardware stack levels used:    1
  6924 ;; Hardware stack levels required when called:    6
  6925 ;; This function calls:
  6926 ;;		_SendAckMessage
  6927 ;; This function is called by:
  6928 ;;		_GroupControlMcu
  6929 ;; This function uses a non-reentrant model
  6930 ;;
  6931                           
  6932                           	psect	text38
  6933  0036F8                     __ptext38:
  6934                           	opt stack 0
  6935  0036F8                     _ResetCpld:
  6936                           	opt stack 22
  6937                           
  6938                           ;SystemCommon.c: 97: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_RESET_
      +                          CPLD);
  6939                           
  6940                           ;incstack = 0
  6941  0036F8  0E12               	movlw	18
  6942  0036FA  6E24               	movwf	SendAckMessage@inRequest,c
  6943  0036FC  0E01               	movlw	1
  6944  0036FE  ECAA  F016         	call	_SendAckMessage
  6945  003702  0012               	return		;funcret
  6946  003704                     __end_of_ResetCpld:
  6947                           	opt stack 0
  6948                           tosu	equ	0xFFF
  6949                           tosh	equ	0xFFE
  6950                           tosl	equ	0xFFD
  6951                           pclath	equ	0xFFA
  6952                           tblptru	equ	0xFF8
  6953                           tblptrh	equ	0xFF7
  6954                           tblptrl	equ	0xFF6
  6955                           tablat	equ	0xFF5
  6956                           prodh	equ	0xFF4
  6957                           prodl	equ	0xFF3
  6958                           intcon	equ	0xFF2
  6959                           postinc0	equ	0xFEE
  6960                           wreg	equ	0xFE8
  6961                           indf1	equ	0xFE7
  6962                           postdec1	equ	0xFE5
  6963                           fsr1h	equ	0xFE2
  6964                           fsr1l	equ	0xFE1
  6965                           indf2	equ	0xFDF
  6966                           postinc2	equ	0xFDE
  6967                           postdec2	equ	0xFDD
  6968                           fsr2h	equ	0xFDA
  6969                           fsr2l	equ	0xFD9
  6970                           status	equ	0xFD8
  6971                           
  6972 ;; *************** function _SetConversionResultFormat *****************
  6973 ;; Defined at:
  6974 ;;		line 38 in file "AdcApp.c"
  6975 ;; Parameters:    Size  Location     Type
  6976 ;;  data            2   43[COMRAM] PTR unsigned char 
  6977 ;; Auto vars:     Size  Location     Type
  6978 ;;		None
  6979 ;; Return value:  Size  Location     Type
  6980 ;;                  1    wreg      void 
  6981 ;; Registers used:
  6982 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6983 ;; Tracked objects:
  6984 ;;		On entry : 0/0
  6985 ;;		On exit  : 0/0
  6986 ;;		Unchanged: 0/0
  6987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6988 ;;      Params:         2       0       0       0       0       0       0
  6989 ;;      Locals:         0       0       0       0       0       0       0
  6990 ;;      Temps:          0       0       0       0       0       0       0
  6991 ;;      Totals:         2       0       0       0       0       0       0
  6992 ;;Total ram usage:        2 bytes
  6993 ;; Hardware stack levels used:    1
  6994 ;; Hardware stack levels required when called:    6
  6995 ;; This function calls:
  6996 ;;		_SendAckMessage
  6997 ;; This function is called by:
  6998 ;;		_GroupAdc
  6999 ;; This function uses a non-reentrant model
  7000 ;;
  7001                           
  7002                           	psect	text39
  7003  003704                     __ptext39:
  7004                           	opt stack 0
  7005  003704                     _SetConversionResultFormat:
  7006                           	opt stack 22
  7007                           
  7008                           ;AdcApp.c: 40: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_CONVERSION_MODE);
  7009                           
  7010                           ;incstack = 0
  7011  003704  0E33               	movlw	51
  7012  003706  6E24               	movwf	SendAckMessage@inRequest,c
  7013  003708  0E03               	movlw	3
  7014  00370A  ECAA  F016         	call	_SendAckMessage
  7015  00370E  0012               	return		;funcret
  7016  003710                     __end_of_SetConversionResultFormat:
  7017                           	opt stack 0
  7018                           tosu	equ	0xFFF
  7019                           tosh	equ	0xFFE
  7020                           tosl	equ	0xFFD
  7021                           pclath	equ	0xFFA
  7022                           tblptru	equ	0xFF8
  7023                           tblptrh	equ	0xFF7
  7024                           tblptrl	equ	0xFF6
  7025                           tablat	equ	0xFF5
  7026                           prodh	equ	0xFF4
  7027                           prodl	equ	0xFF3
  7028                           intcon	equ	0xFF2
  7029                           postinc0	equ	0xFEE
  7030                           wreg	equ	0xFE8
  7031                           indf1	equ	0xFE7
  7032                           postdec1	equ	0xFE5
  7033                           fsr1h	equ	0xFE2
  7034                           fsr1l	equ	0xFE1
  7035                           indf2	equ	0xFDF
  7036                           postinc2	equ	0xFDE
  7037                           postdec2	equ	0xFDD
  7038                           fsr2h	equ	0xFDA
  7039                           fsr2l	equ	0xFD9
  7040                           status	equ	0xFD8
  7041                           
  7042 ;; *************** function _SetChannelMode *****************
  7043 ;; Defined at:
  7044 ;;		line 43 in file "AdcApp.c"
  7045 ;; Parameters:    Size  Location     Type
  7046 ;;  data            2   43[COMRAM] PTR unsigned char 
  7047 ;; Auto vars:     Size  Location     Type
  7048 ;;		None
  7049 ;; Return value:  Size  Location     Type
  7050 ;;                  1    wreg      void 
  7051 ;; Registers used:
  7052 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7053 ;; Tracked objects:
  7054 ;;		On entry : 0/0
  7055 ;;		On exit  : 0/0
  7056 ;;		Unchanged: 0/0
  7057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7058 ;;      Params:         2       0       0       0       0       0       0
  7059 ;;      Locals:         0       0       0       0       0       0       0
  7060 ;;      Temps:          0       0       0       0       0       0       0
  7061 ;;      Totals:         2       0       0       0       0       0       0
  7062 ;;Total ram usage:        2 bytes
  7063 ;; Hardware stack levels used:    1
  7064 ;; Hardware stack levels required when called:    6
  7065 ;; This function calls:
  7066 ;;		_SendAckMessage
  7067 ;; This function is called by:
  7068 ;;		_GroupAdc
  7069 ;; This function uses a non-reentrant model
  7070 ;;
  7071                           
  7072                           	psect	text40
  7073  003370                     __ptext40:
  7074                           	opt stack 0
  7075  003370                     _SetChannelMode:
  7076                           	opt stack 22
  7077                           
  7078                           ;AdcApp.c: 45: adcSampleMode = data[0];
  7079                           
  7080                           ;incstack = 0
  7081  003370  C02C  FFD9         	movff	SetChannelMode@data,fsr2l
  7082  003374  C02D  FFDA         	movff	SetChannelMode@data+1,fsr2h
  7083  003378  50DF               	movf	indf2,w,c
  7084  00337A  6E3C               	movwf	_adcSampleMode,c
  7085                           
  7086                           ;AdcApp.c: 46: if (adcSampleMode == SINGLE_CHANNEL)
  7087  00337C  043C               	decf	_adcSampleMode,w,c
  7088  00337E  A4D8               	btfss	status,2,c
  7089  003380  D009               	goto	l104
  7090                           
  7091                           ;AdcApp.c: 47: {
  7092                           ;AdcApp.c: 48: channel = data[1];
  7093  003382  EE20 F001          	lfsr	2,1
  7094  003386  502C               	movf	SetChannelMode@data,w,c
  7095  003388  26D9               	addwf	fsr2l,f,c
  7096  00338A  502D               	movf	SetChannelMode@data+1,w,c
  7097  00338C  22DA               	addwfc	fsr2h,f,c
  7098  00338E  50DF               	movf	indf2,w,c
  7099  003390  0100               	movlb	0	; () banked
  7100  003392  6FD3               	movwf	_channel& (0+255),b
  7101  003394                     l104:
  7102                           
  7103                           ;AdcApp.c: 49: }
  7104                           ;AdcApp.c: 50: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_CHANNEL_MODE);
  7105                           
  7106                           ; BSR set to: 0
  7107  003394  0E32               	movlw	50
  7108  003396  6E24               	movwf	SendAckMessage@inRequest,c
  7109  003398  0E03               	movlw	3
  7110  00339A  ECAA  F016         	call	_SendAckMessage
  7111  00339E  0012               	return		;funcret
  7112  0033A0                     __end_of_SetChannelMode:
  7113                           	opt stack 0
  7114                           tosu	equ	0xFFF
  7115                           tosh	equ	0xFFE
  7116                           tosl	equ	0xFFD
  7117                           pclath	equ	0xFFA
  7118                           tblptru	equ	0xFF8
  7119                           tblptrh	equ	0xFF7
  7120                           tblptrl	equ	0xFF6
  7121                           tablat	equ	0xFF5
  7122                           prodh	equ	0xFF4
  7123                           prodl	equ	0xFF3
  7124                           intcon	equ	0xFF2
  7125                           postinc0	equ	0xFEE
  7126                           wreg	equ	0xFE8
  7127                           indf1	equ	0xFE7
  7128                           postdec1	equ	0xFE5
  7129                           fsr1h	equ	0xFE2
  7130                           fsr1l	equ	0xFE1
  7131                           indf2	equ	0xFDF
  7132                           postinc2	equ	0xFDE
  7133                           postdec2	equ	0xFDD
  7134                           fsr2h	equ	0xFDA
  7135                           fsr2l	equ	0xFD9
  7136                           status	equ	0xFD8
  7137                           
  7138 ;; *************** function _SetAdcOperationMode *****************
  7139 ;; Defined at:
  7140 ;;		line 33 in file "AdcApp.c"
  7141 ;; Parameters:    Size  Location     Type
  7142 ;;  data            2   43[COMRAM] PTR unsigned char 
  7143 ;; Auto vars:     Size  Location     Type
  7144 ;;		None
  7145 ;; Return value:  Size  Location     Type
  7146 ;;                  1    wreg      void 
  7147 ;; Registers used:
  7148 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7149 ;; Tracked objects:
  7150 ;;		On entry : 0/0
  7151 ;;		On exit  : 0/0
  7152 ;;		Unchanged: 0/0
  7153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7154 ;;      Params:         2       0       0       0       0       0       0
  7155 ;;      Locals:         0       0       0       0       0       0       0
  7156 ;;      Temps:          0       0       0       0       0       0       0
  7157 ;;      Totals:         2       0       0       0       0       0       0
  7158 ;;Total ram usage:        2 bytes
  7159 ;; Hardware stack levels used:    1
  7160 ;; Hardware stack levels required when called:    6
  7161 ;; This function calls:
  7162 ;;		_SendAckMessage
  7163 ;; This function is called by:
  7164 ;;		_GroupAdc
  7165 ;; This function uses a non-reentrant model
  7166 ;;
  7167                           
  7168                           	psect	text41
  7169  003710                     __ptext41:
  7170                           	opt stack 0
  7171  003710                     _SetAdcOperationMode:
  7172                           	opt stack 22
  7173                           
  7174                           ;AdcApp.c: 35: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_OPERATION);
  7175                           
  7176                           ;incstack = 0
  7177  003710  0E31               	movlw	49
  7178  003712  6E24               	movwf	SendAckMessage@inRequest,c
  7179  003714  0E03               	movlw	3
  7180  003716  ECAA  F016         	call	_SendAckMessage
  7181  00371A  0012               	return		;funcret
  7182  00371C                     __end_of_SetAdcOperationMode:
  7183                           	opt stack 0
  7184                           tosu	equ	0xFFF
  7185                           tosh	equ	0xFFE
  7186                           tosl	equ	0xFFD
  7187                           pclath	equ	0xFFA
  7188                           tblptru	equ	0xFF8
  7189                           tblptrh	equ	0xFF7
  7190                           tblptrl	equ	0xFF6
  7191                           tablat	equ	0xFF5
  7192                           prodh	equ	0xFF4
  7193                           prodl	equ	0xFF3
  7194                           intcon	equ	0xFF2
  7195                           postinc0	equ	0xFEE
  7196                           wreg	equ	0xFE8
  7197                           indf1	equ	0xFE7
  7198                           postdec1	equ	0xFE5
  7199                           fsr1h	equ	0xFE2
  7200                           fsr1l	equ	0xFE1
  7201                           indf2	equ	0xFDF
  7202                           postinc2	equ	0xFDE
  7203                           postdec2	equ	0xFDD
  7204                           fsr2h	equ	0xFDA
  7205                           fsr2l	equ	0xFD9
  7206                           status	equ	0xFD8
  7207                           
  7208 ;; *************** function _EUSART1_Read *****************
  7209 ;; Defined at:
  7210 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  7211 ;; Parameters:    Size  Location     Type
  7212 ;;		None
  7213 ;; Auto vars:     Size  Location     Type
  7214 ;;  readValue       2   24[COMRAM] unsigned int 
  7215 ;; Return value:  Size  Location     Type
  7216 ;;                  1    wreg      unsigned char 
  7217 ;; Registers used:
  7218 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7219 ;; Tracked objects:
  7220 ;;		On entry : 0/0
  7221 ;;		On exit  : 0/0
  7222 ;;		Unchanged: 0/0
  7223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7224 ;;      Params:         0       0       0       0       0       0       0
  7225 ;;      Locals:         2       0       0       0       0       0       0
  7226 ;;      Temps:          1       0       0       0       0       0       0
  7227 ;;      Totals:         3       0       0       0       0       0       0
  7228 ;;Total ram usage:        3 bytes
  7229 ;; Hardware stack levels used:    1
  7230 ;; Hardware stack levels required when called:    3
  7231 ;; This function calls:
  7232 ;;		Nothing
  7233 ;; This function is called by:
  7234 ;;		_readUartMessage
  7235 ;; This function uses a non-reentrant model
  7236 ;;
  7237                           
  7238                           	psect	text42
  7239  002EC8                     __ptext42:
  7240                           	opt stack 0
  7241  002EC8                     _EUSART1_Read:
  7242                           	opt stack 26
  7243                           
  7244                           ;eusart1.c: 112: uint16_t readValue = 0;
  7245                           
  7246                           ;incstack = 0
  7247  002EC8  0E00               	movlw	0
  7248  002ECA  6E1A               	movwf	EUSART1_Read@readValue+1,c
  7249  002ECC  0E00               	movlw	0
  7250  002ECE  6E19               	movwf	EUSART1_Read@readValue,c
  7251                           
  7252                           ;eusart1.c: 119: if (eusart1RxCount == 0)
  7253  002ED0  0100               	movlb	0	; () banked
  7254  002ED2  51D2               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  7255  002ED4  A4D8               	btfss	status,2,c
  7256  002ED6  D002               	goto	l808
  7257                           
  7258                           ; BSR set to: 0
  7259                           ;eusart1.c: 120: {
  7260                           ;eusart1.c: 121: return readValue;
  7261  002ED8  5019               	movf	EUSART1_Read@readValue,w,c
  7262                           
  7263                           ; BSR set to: 0
  7264  002EDA  0012               	return	
  7265  002EDC                     l808:
  7266                           
  7267                           ; BSR set to: 0
  7268                           ;eusart1.c: 122: }
  7269                           ;eusart1.c: 124: readValue = eusart1RxBuffer[eusart1RxTail++];
  7270                           
  7271                           ; BSR set to: 0
  7272  002EDC  5037               	movf	_eusart1RxTail,w,c	;volatile
  7273  002EDE  0D01               	mullw	1
  7274  002EE0  0E46               	movlw	low _eusart1RxBuffer
  7275  002EE2  24F3               	addwf	prodl,w,c
  7276  002EE4  6ED9               	movwf	fsr2l,c
  7277  002EE6  0E01               	movlw	high _eusart1RxBuffer
  7278  002EE8  20F4               	addwfc	prodh,w,c
  7279  002EEA  6EDA               	movwf	fsr2h,c
  7280  002EEC  50DF               	movf	indf2,w,c
  7281  002EEE  6E18               	movwf	??_EUSART1_Read& (0+255),c
  7282  002EF0  5018               	movf	??_EUSART1_Read,w,c
  7283  002EF2  6E19               	movwf	EUSART1_Read@readValue,c
  7284  002EF4  6A1A               	clrf	EUSART1_Read@readValue+1,c
  7285                           
  7286                           ; BSR set to: 0
  7287  002EF6  2A37               	incf	_eusart1RxTail,f,c	;volatile
  7288                           
  7289                           ; BSR set to: 0
  7290                           ;eusart1.c: 125: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
  7291  002EF8  0E27               	movlw	39
  7292  002EFA  6437               	cpfsgt	_eusart1RxTail,c	;volatile
  7293  002EFC  D002               	goto	l810
  7294                           
  7295                           ; BSR set to: 0
  7296                           ;eusart1.c: 126: {
  7297                           ;eusart1.c: 127: eusart1RxTail = 0;
  7298  002EFE  0E00               	movlw	0
  7299  002F00  6E37               	movwf	_eusart1RxTail,c	;volatile
  7300  002F02                     l810:
  7301                           
  7302                           ; BSR set to: 0
  7303                           ;eusart1.c: 128: }
  7304                           ;eusart1.c: 129: PIE1bits.RC1IE = 0;
  7305                           
  7306                           ; BSR set to: 0
  7307  002F02  9A9D               	bcf	3997,5,c	;volatile
  7308                           
  7309                           ; BSR set to: 0
  7310                           ;eusart1.c: 130: eusart1RxCount--;
  7311  002F04  07D2               	decf	_eusart1RxCount& (0+255),f,b	;volatile
  7312                           
  7313                           ; BSR set to: 0
  7314                           ;eusart1.c: 131: PIE1bits.RC1IE = 1;
  7315  002F06  8A9D               	bsf	3997,5,c	;volatile
  7316                           
  7317                           ; BSR set to: 0
  7318                           ;eusart1.c: 133: return readValue;
  7319  002F08  5019               	movf	EUSART1_Read@readValue,w,c
  7320  002F0A  0012               	return	
  7321  002F0C                     __end_of_EUSART1_Read:
  7322                           	opt stack 0
  7323                           tosu	equ	0xFFF
  7324                           tosh	equ	0xFFE
  7325                           tosl	equ	0xFFD
  7326                           pclath	equ	0xFFA
  7327                           tblptru	equ	0xFF8
  7328                           tblptrh	equ	0xFF7
  7329                           tblptrl	equ	0xFF6
  7330                           tablat	equ	0xFF5
  7331                           prodh	equ	0xFF4
  7332                           prodl	equ	0xFF3
  7333                           intcon	equ	0xFF2
  7334                           postinc0	equ	0xFEE
  7335                           wreg	equ	0xFE8
  7336                           indf1	equ	0xFE7
  7337                           postdec1	equ	0xFE5
  7338                           fsr1h	equ	0xFE2
  7339                           fsr1l	equ	0xFE1
  7340                           indf2	equ	0xFDF
  7341                           postinc2	equ	0xFDE
  7342                           postdec2	equ	0xFDD
  7343                           fsr2h	equ	0xFDA
  7344                           fsr2l	equ	0xFD9
  7345                           status	equ	0xFD8
  7346                           
  7347 ;; *************** function _keepAliveSignalUart *****************
  7348 ;; Defined at:
  7349 ;;		line 117 in file "SystemStatus.c"
  7350 ;; Parameters:    Size  Location     Type
  7351 ;;		None
  7352 ;; Auto vars:     Size  Location     Type
  7353 ;;		None
  7354 ;; Return value:  Size  Location     Type
  7355 ;;                  1    wreg      void 
  7356 ;; Registers used:
  7357 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7358 ;; Tracked objects:
  7359 ;;		On entry : 0/0
  7360 ;;		On exit  : 0/0
  7361 ;;		Unchanged: 0/0
  7362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7363 ;;      Params:         0       0       0       0       0       0       0
  7364 ;;      Locals:         0       0       0       0       0       0       0
  7365 ;;      Temps:          0       0       0       0       0       0       0
  7366 ;;      Totals:         0       0       0       0       0       0       0
  7367 ;;Total ram usage:        0 bytes
  7368 ;; Hardware stack levels used:    1
  7369 ;; Hardware stack levels required when called:    6
  7370 ;; This function calls:
  7371 ;;		_SendAckMessage
  7372 ;; This function is called by:
  7373 ;;		_main
  7374 ;; This function uses a non-reentrant model
  7375 ;;
  7376                           
  7377                           	psect	text43
  7378  00371C                     __ptext43:
  7379                           	opt stack 0
  7380  00371C                     _keepAliveSignalUart:
  7381                           	opt stack 24
  7382                           
  7383                           ;SystemStatus.c: 119: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_KEEP_
      +                          ALIVE);
  7384                           
  7385                           ; BSR set to: 0
  7386                           ;incstack = 0
  7387  00371C  0E16               	movlw	22
  7388  00371E  6E24               	movwf	SendAckMessage@inRequest,c
  7389  003720  0E01               	movlw	1
  7390  003722  ECAA  F016         	call	_SendAckMessage
  7391  003726  0012               	return		;funcret
  7392  003728                     __end_of_keepAliveSignalUart:
  7393                           	opt stack 0
  7394                           tosu	equ	0xFFF
  7395                           tosh	equ	0xFFE
  7396                           tosl	equ	0xFFD
  7397                           pclath	equ	0xFFA
  7398                           tblptru	equ	0xFF8
  7399                           tblptrh	equ	0xFF7
  7400                           tblptrl	equ	0xFF6
  7401                           tablat	equ	0xFF5
  7402                           prodh	equ	0xFF4
  7403                           prodl	equ	0xFF3
  7404                           intcon	equ	0xFF2
  7405                           postinc0	equ	0xFEE
  7406                           wreg	equ	0xFE8
  7407                           indf1	equ	0xFE7
  7408                           postdec1	equ	0xFE5
  7409                           fsr1h	equ	0xFE2
  7410                           fsr1l	equ	0xFE1
  7411                           indf2	equ	0xFDF
  7412                           postinc2	equ	0xFDE
  7413                           postdec2	equ	0xFDD
  7414                           fsr2h	equ	0xFDA
  7415                           fsr2l	equ	0xFD9
  7416                           status	equ	0xFD8
  7417                           
  7418 ;; *************** function _keepAliveSignalLed *****************
  7419 ;; Defined at:
  7420 ;;		line 35 in file "LedsApp.c"
  7421 ;; Parameters:    Size  Location     Type
  7422 ;;		None
  7423 ;; Auto vars:     Size  Location     Type
  7424 ;;		None
  7425 ;; Return value:  Size  Location     Type
  7426 ;;                  1    wreg      void 
  7427 ;; Registers used:
  7428 ;;		wreg, status,2, status,0
  7429 ;; Tracked objects:
  7430 ;;		On entry : 0/0
  7431 ;;		On exit  : 0/0
  7432 ;;		Unchanged: 0/0
  7433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7434 ;;      Params:         0       0       0       0       0       0       0
  7435 ;;      Locals:         0       0       0       0       0       0       0
  7436 ;;      Temps:          1       0       0       0       0       0       0
  7437 ;;      Totals:         1       0       0       0       0       0       0
  7438 ;;Total ram usage:        1 bytes
  7439 ;; Hardware stack levels used:    1
  7440 ;; Hardware stack levels required when called:    3
  7441 ;; This function calls:
  7442 ;;		Nothing
  7443 ;; This function is called by:
  7444 ;;		_main
  7445 ;; This function uses a non-reentrant model
  7446 ;;
  7447                           
  7448                           	psect	text44
  7449  003626                     __ptext44:
  7450                           	opt stack 0
  7451  003626                     _keepAliveSignalLed:
  7452                           	opt stack 27
  7453                           
  7454                           ;LedsApp.c: 37: LATCbits.LATC0 = !LATCbits.LATC0;
  7455                           
  7456                           ;incstack = 0
  7457  003626  B08B               	btfsc	3979,0,c	;volatile
  7458  003628  D003               	goto	u5130
  7459  00362A  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  7460  00362C  2A18               	incf	??_keepAliveSignalLed& (0+255),f,c
  7461  00362E  D001               	goto	u5148
  7462  003630                     u5130:
  7463  003630  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  7464  003632                     u5148:
  7465  003632  508B               	movf	3979,w,c	;volatile
  7466  003634  1818               	xorwf	??_keepAliveSignalLed,w,c
  7467  003636  0BFE               	andlw	-2
  7468  003638  1818               	xorwf	??_keepAliveSignalLed,w,c
  7469  00363A  6E8B               	movwf	3979,c	;volatile
  7470  00363C  0012               	return		;funcret
  7471  00363E                     __end_of_keepAliveSignalLed:
  7472                           	opt stack 0
  7473                           tosu	equ	0xFFF
  7474                           tosh	equ	0xFFE
  7475                           tosl	equ	0xFFD
  7476                           pclath	equ	0xFFA
  7477                           tblptru	equ	0xFF8
  7478                           tblptrh	equ	0xFF7
  7479                           tblptrl	equ	0xFF6
  7480                           tablat	equ	0xFF5
  7481                           prodh	equ	0xFF4
  7482                           prodl	equ	0xFF3
  7483                           intcon	equ	0xFF2
  7484                           postinc0	equ	0xFEE
  7485                           wreg	equ	0xFE8
  7486                           indf1	equ	0xFE7
  7487                           postdec1	equ	0xFE5
  7488                           fsr1h	equ	0xFE2
  7489                           fsr1l	equ	0xFE1
  7490                           indf2	equ	0xFDF
  7491                           postinc2	equ	0xFDE
  7492                           postdec2	equ	0xFDD
  7493                           fsr2h	equ	0xFDA
  7494                           fsr2l	equ	0xFD9
  7495                           status	equ	0xFD8
  7496                           
  7497 ;; *************** function _SetMcuSystem *****************
  7498 ;; Defined at:
  7499 ;;		line 11 in file "SystemSettings.c"
  7500 ;; Parameters:    Size  Location     Type
  7501 ;;		None
  7502 ;; Auto vars:     Size  Location     Type
  7503 ;;		None
  7504 ;; Return value:  Size  Location     Type
  7505 ;;                  1    wreg      void 
  7506 ;; Registers used:
  7507 ;;		wreg, status,2, status,0, cstack
  7508 ;; Tracked objects:
  7509 ;;		On entry : 0/0
  7510 ;;		On exit  : 0/0
  7511 ;;		Unchanged: 0/0
  7512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7513 ;;      Params:         0       0       0       0       0       0       0
  7514 ;;      Locals:         0       0       0       0       0       0       0
  7515 ;;      Temps:          0       0       0       0       0       0       0
  7516 ;;      Totals:         0       0       0       0       0       0       0
  7517 ;;Total ram usage:        0 bytes
  7518 ;; Hardware stack levels used:    1
  7519 ;; Hardware stack levels required when called:    6
  7520 ;; This function calls:
  7521 ;;		_SYSTEM_Initialize
  7522 ;; This function is called by:
  7523 ;;		_main
  7524 ;; This function uses a non-reentrant model
  7525 ;;
  7526                           
  7527                           	psect	text45
  7528  00373E                     __ptext45:
  7529                           	opt stack 0
  7530  00373E                     _SetMcuSystem:
  7531                           	opt stack 24
  7532                           
  7533                           ;SystemSettings.c: 14: SYSTEM_Initialize();
  7534                           
  7535                           ;incstack = 0
  7536  00373E  ECF9  F01A         	call	_SYSTEM_Initialize	;wreg free
  7537                           
  7538                           ;SystemSettings.c: 21: (INTCONbits.GIE = 1);
  7539  003742  8EF2               	bsf	intcon,7,c	;volatile
  7540                           
  7541                           ;SystemSettings.c: 27: (INTCONbits.PEIE = 1);
  7542  003744  8CF2               	bsf	intcon,6,c	;volatile
  7543  003746  0012               	return		;funcret
  7544  003748                     __end_of_SetMcuSystem:
  7545                           	opt stack 0
  7546                           tosu	equ	0xFFF
  7547                           tosh	equ	0xFFE
  7548                           tosl	equ	0xFFD
  7549                           pclath	equ	0xFFA
  7550                           tblptru	equ	0xFF8
  7551                           tblptrh	equ	0xFF7
  7552                           tblptrl	equ	0xFF6
  7553                           tablat	equ	0xFF5
  7554                           prodh	equ	0xFF4
  7555                           prodl	equ	0xFF3
  7556                           intcon	equ	0xFF2
  7557                           postinc0	equ	0xFEE
  7558                           wreg	equ	0xFE8
  7559                           indf1	equ	0xFE7
  7560                           postdec1	equ	0xFE5
  7561                           fsr1h	equ	0xFE2
  7562                           fsr1l	equ	0xFE1
  7563                           indf2	equ	0xFDF
  7564                           postinc2	equ	0xFDE
  7565                           postdec2	equ	0xFDD
  7566                           fsr2h	equ	0xFDA
  7567                           fsr2l	equ	0xFD9
  7568                           status	equ	0xFD8
  7569                           
  7570 ;; *************** function _SYSTEM_Initialize *****************
  7571 ;; Defined at:
  7572 ;;		line 112 in file "mcc_generated_files/mcc.c"
  7573 ;; Parameters:    Size  Location     Type
  7574 ;;		None
  7575 ;; Auto vars:     Size  Location     Type
  7576 ;;		None
  7577 ;; Return value:  Size  Location     Type
  7578 ;;                  1    wreg      void 
  7579 ;; Registers used:
  7580 ;;		wreg, status,2, status,0, cstack
  7581 ;; Tracked objects:
  7582 ;;		On entry : 0/0
  7583 ;;		On exit  : 0/0
  7584 ;;		Unchanged: 0/0
  7585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7586 ;;      Params:         0       0       0       0       0       0       0
  7587 ;;      Locals:         0       0       0       0       0       0       0
  7588 ;;      Temps:          0       0       0       0       0       0       0
  7589 ;;      Totals:         0       0       0       0       0       0       0
  7590 ;;Total ram usage:        0 bytes
  7591 ;; Hardware stack levels used:    1
  7592 ;; Hardware stack levels required when called:    5
  7593 ;; This function calls:
  7594 ;;		_ADC_Initialize
  7595 ;;		_EUSART1_Initialize
  7596 ;;		_INTERRUPT_Initialize
  7597 ;;		_OSCILLATOR_Initialize
  7598 ;;		_PIN_MANAGER_Initialize
  7599 ;;		_TMR0_Initialize
  7600 ;; This function is called by:
  7601 ;;		_SetMcuSystem
  7602 ;; This function uses a non-reentrant model
  7603 ;;
  7604                           
  7605                           	psect	text46
  7606  0035F2                     __ptext46:
  7607                           	opt stack 0
  7608  0035F2                     _SYSTEM_Initialize:
  7609                           	opt stack 24
  7610                           
  7611                           ;mcc.c: 114: INTERRUPT_Initialize();
  7612                           
  7613                           ;incstack = 0
  7614  0035F2  ECAB  F01B         	call	_INTERRUPT_Initialize	;wreg free
  7615                           
  7616                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  7617  0035F6  EC1E  F017         	call	_PIN_MANAGER_Initialize	;wreg free
  7618                           
  7619                           ;mcc.c: 116: OSCILLATOR_Initialize();
  7620  0035FA  EC67  F01B         	call	_OSCILLATOR_Initialize	;wreg free
  7621                           
  7622                           ;mcc.c: 117: ADC_Initialize();
  7623  0035FE  EC1F  F01B         	call	_ADC_Initialize	;wreg free
  7624                           
  7625                           ;mcc.c: 118: TMR0_Initialize();
  7626  003602  EC84  F019         	call	_TMR0_Initialize	;wreg free
  7627                           
  7628                           ;mcc.c: 119: EUSART1_Initialize();
  7629  003606  EC4E  F019         	call	_EUSART1_Initialize	;wreg free
  7630  00360A  0012               	return		;funcret
  7631  00360C                     __end_of_SYSTEM_Initialize:
  7632                           	opt stack 0
  7633                           tosu	equ	0xFFF
  7634                           tosh	equ	0xFFE
  7635                           tosl	equ	0xFFD
  7636                           pclath	equ	0xFFA
  7637                           tblptru	equ	0xFF8
  7638                           tblptrh	equ	0xFF7
  7639                           tblptrl	equ	0xFF6
  7640                           tablat	equ	0xFF5
  7641                           prodh	equ	0xFF4
  7642                           prodl	equ	0xFF3
  7643                           intcon	equ	0xFF2
  7644                           postinc0	equ	0xFEE
  7645                           wreg	equ	0xFE8
  7646                           indf1	equ	0xFE7
  7647                           postdec1	equ	0xFE5
  7648                           fsr1h	equ	0xFE2
  7649                           fsr1l	equ	0xFE1
  7650                           indf2	equ	0xFDF
  7651                           postinc2	equ	0xFDE
  7652                           postdec2	equ	0xFDD
  7653                           fsr2h	equ	0xFDA
  7654                           fsr2l	equ	0xFD9
  7655                           status	equ	0xFD8
  7656                           
  7657 ;; *************** function _TMR0_Initialize *****************
  7658 ;; Defined at:
  7659 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  7660 ;; Parameters:    Size  Location     Type
  7661 ;;		None
  7662 ;; Auto vars:     Size  Location     Type
  7663 ;;		None
  7664 ;; Return value:  Size  Location     Type
  7665 ;;                  1    wreg      void 
  7666 ;; Registers used:
  7667 ;;		wreg, status,2, status,0, cstack
  7668 ;; Tracked objects:
  7669 ;;		On entry : 0/0
  7670 ;;		On exit  : 0/0
  7671 ;;		Unchanged: 0/0
  7672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7673 ;;      Params:         0       0       0       0       0       0       0
  7674 ;;      Locals:         0       0       0       0       0       0       0
  7675 ;;      Temps:          2       0       0       0       0       0       0
  7676 ;;      Totals:         2       0       0       0       0       0       0
  7677 ;;Total ram usage:        2 bytes
  7678 ;; Hardware stack levels used:    1
  7679 ;; Hardware stack levels required when called:    4
  7680 ;; This function calls:
  7681 ;;		_TMR0_SetInterruptHandler
  7682 ;; This function is called by:
  7683 ;;		_SYSTEM_Initialize
  7684 ;; This function uses a non-reentrant model
  7685 ;;
  7686                           
  7687                           	psect	text47
  7688  003308                     __ptext47:
  7689                           	opt stack 0
  7690  003308                     _TMR0_Initialize:
  7691                           	opt stack 24
  7692                           
  7693                           ;tmr0.c: 71: TMR0H = 0x3C;
  7694                           
  7695                           ;incstack = 0
  7696  003308  0E3C               	movlw	60
  7697  00330A  6ED7               	movwf	4055,c	;volatile
  7698                           
  7699                           ;tmr0.c: 74: TMR0L = 0xAF;
  7700  00330C  0EAF               	movlw	175
  7701  00330E  6ED6               	movwf	4054,c	;volatile
  7702                           
  7703                           ;tmr0.c: 78: timer0ReloadVal = (TMR0H << 8) | TMR0L;
  7704  003310  50D6               	movf	4054,w,c	;volatile
  7705  003312  CFD7 F01A          	movff	4055,??_TMR0_Initialize	;volatile
  7706  003316  6A1B               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  7707  003318  C01A  F01B         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  7708  00331C  6A1A               	clrf	??_TMR0_Initialize,c
  7709  00331E  101A               	iorwf	??_TMR0_Initialize,w,c
  7710  003320  6E46               	movwf	_timer0ReloadVal,c	;volatile
  7711  003322  501B               	movf	??_TMR0_Initialize+1,w,c
  7712  003324  6E47               	movwf	_timer0ReloadVal+1,c	;volatile
  7713                           
  7714                           ;tmr0.c: 81: INTCONbits.TMR0IF = 0;
  7715  003326  94F2               	bcf	intcon,2,c	;volatile
  7716                           
  7717                           ;tmr0.c: 84: INTCONbits.TMR0IE = 1;
  7718  003328  8AF2               	bsf	intcon,5,c	;volatile
  7719                           
  7720                           ;tmr0.c: 87: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  7721  00332A  0E00               	movlw	0
  7722  00332C  6E18               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  7723  00332E  0E00               	movlw	0
  7724  003330  6E19               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  7725  003332  ECA4  F01B         	call	_TMR0_SetInterruptHandler	;wreg free
  7726                           
  7727                           ;tmr0.c: 90: T0CON = 0x90;
  7728  003336  0E90               	movlw	144
  7729  003338  6ED5               	movwf	4053,c	;volatile
  7730  00333A  0012               	return		;funcret
  7731  00333C                     __end_of_TMR0_Initialize:
  7732                           	opt stack 0
  7733                           tosu	equ	0xFFF
  7734                           tosh	equ	0xFFE
  7735                           tosl	equ	0xFFD
  7736                           pclath	equ	0xFFA
  7737                           tblptru	equ	0xFF8
  7738                           tblptrh	equ	0xFF7
  7739                           tblptrl	equ	0xFF6
  7740                           tablat	equ	0xFF5
  7741                           prodh	equ	0xFF4
  7742                           prodl	equ	0xFF3
  7743                           intcon	equ	0xFF2
  7744                           postinc0	equ	0xFEE
  7745                           wreg	equ	0xFE8
  7746                           indf1	equ	0xFE7
  7747                           postdec1	equ	0xFE5
  7748                           fsr1h	equ	0xFE2
  7749                           fsr1l	equ	0xFE1
  7750                           indf2	equ	0xFDF
  7751                           postinc2	equ	0xFDE
  7752                           postdec2	equ	0xFDD
  7753                           fsr2h	equ	0xFDA
  7754                           fsr2l	equ	0xFD9
  7755                           status	equ	0xFD8
  7756                           
  7757 ;; *************** function _TMR0_SetInterruptHandler *****************
  7758 ;; Defined at:
  7759 ;;		line 177 in file "mcc_generated_files/tmr0.c"
  7760 ;; Parameters:    Size  Location     Type
  7761 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  7762 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  7763 ;; Auto vars:     Size  Location     Type
  7764 ;;		None
  7765 ;; Return value:  Size  Location     Type
  7766 ;;                  1    wreg      void 
  7767 ;; Registers used:
  7768 ;;		wreg, status,2, status,0
  7769 ;; Tracked objects:
  7770 ;;		On entry : 0/0
  7771 ;;		On exit  : 0/0
  7772 ;;		Unchanged: 0/0
  7773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7774 ;;      Params:         2       0       0       0       0       0       0
  7775 ;;      Locals:         0       0       0       0       0       0       0
  7776 ;;      Temps:          0       0       0       0       0       0       0
  7777 ;;      Totals:         2       0       0       0       0       0       0
  7778 ;;Total ram usage:        2 bytes
  7779 ;; Hardware stack levels used:    1
  7780 ;; Hardware stack levels required when called:    3
  7781 ;; This function calls:
  7782 ;;		Nothing
  7783 ;; This function is called by:
  7784 ;;		_TMR0_Initialize
  7785 ;; This function uses a non-reentrant model
  7786 ;;
  7787                           
  7788                           	psect	text48
  7789  003748                     __ptext48:
  7790                           	opt stack 0
  7791  003748                     _TMR0_SetInterruptHandler:
  7792                           	opt stack 24
  7793                           
  7794                           ;tmr0.c: 178: TMR0_InterruptHandler = InterruptHandler;
  7795                           
  7796                           ;incstack = 0
  7797  003748  C018  F0FB         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  7798  00374C  C019  F0FC         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  7799  003750  0012               	return		;funcret
  7800  003752                     __end_of_TMR0_SetInterruptHandler:
  7801                           	opt stack 0
  7802                           tosu	equ	0xFFF
  7803                           tosh	equ	0xFFE
  7804                           tosl	equ	0xFFD
  7805                           pclath	equ	0xFFA
  7806                           tblptru	equ	0xFF8
  7807                           tblptrh	equ	0xFF7
  7808                           tblptrl	equ	0xFF6
  7809                           tablat	equ	0xFF5
  7810                           prodh	equ	0xFF4
  7811                           prodl	equ	0xFF3
  7812                           intcon	equ	0xFF2
  7813                           postinc0	equ	0xFEE
  7814                           wreg	equ	0xFE8
  7815                           indf1	equ	0xFE7
  7816                           postdec1	equ	0xFE5
  7817                           fsr1h	equ	0xFE2
  7818                           fsr1l	equ	0xFE1
  7819                           indf2	equ	0xFDF
  7820                           postinc2	equ	0xFDE
  7821                           postdec2	equ	0xFDD
  7822                           fsr2h	equ	0xFDA
  7823                           fsr2l	equ	0xFD9
  7824                           status	equ	0xFD8
  7825                           
  7826 ;; *************** function _PIN_MANAGER_Initialize *****************
  7827 ;; Defined at:
  7828 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  7829 ;; Parameters:    Size  Location     Type
  7830 ;;		None
  7831 ;; Auto vars:     Size  Location     Type
  7832 ;;		None
  7833 ;; Return value:  Size  Location     Type
  7834 ;;                  1    wreg      void 
  7835 ;; Registers used:
  7836 ;;		wreg, status,2
  7837 ;; Tracked objects:
  7838 ;;		On entry : 0/0
  7839 ;;		On exit  : 0/0
  7840 ;;		Unchanged: 0/0
  7841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7842 ;;      Params:         0       0       0       0       0       0       0
  7843 ;;      Locals:         0       0       0       0       0       0       0
  7844 ;;      Temps:          0       0       0       0       0       0       0
  7845 ;;      Totals:         0       0       0       0       0       0       0
  7846 ;;Total ram usage:        0 bytes
  7847 ;; Hardware stack levels used:    1
  7848 ;; Hardware stack levels required when called:    3
  7849 ;; This function calls:
  7850 ;;		Nothing
  7851 ;; This function is called by:
  7852 ;;		_SYSTEM_Initialize
  7853 ;; This function uses a non-reentrant model
  7854 ;;
  7855                           
  7856                           	psect	text49
  7857  002E3C                     __ptext49:
  7858                           	opt stack 0
  7859  002E3C                     _PIN_MANAGER_Initialize:
  7860                           	opt stack 25
  7861                           
  7862                           ;pin_manager.c: 57: LATE = 0x00;
  7863                           
  7864                           ;incstack = 0
  7865  002E3C  0E00               	movlw	0
  7866  002E3E  6E8D               	movwf	3981,c	;volatile
  7867                           
  7868                           ;pin_manager.c: 58: LATD = 0x00;
  7869  002E40  0E00               	movlw	0
  7870  002E42  6E8C               	movwf	3980,c	;volatile
  7871                           
  7872                           ;pin_manager.c: 59: LATA = 0x06;
  7873  002E44  0E06               	movlw	6
  7874  002E46  6E89               	movwf	3977,c	;volatile
  7875                           
  7876                           ;pin_manager.c: 60: LATB = 0x00;
  7877  002E48  0E00               	movlw	0
  7878  002E4A  6E8A               	movwf	3978,c	;volatile
  7879                           
  7880                           ;pin_manager.c: 61: LATC = 0x00;
  7881  002E4C  0E00               	movlw	0
  7882  002E4E  6E8B               	movwf	3979,c	;volatile
  7883                           
  7884                           ;pin_manager.c: 66: TRISE = 0x07;
  7885  002E50  0E07               	movlw	7
  7886  002E52  6E96               	movwf	3990,c	;volatile
  7887                           
  7888                           ;pin_manager.c: 67: TRISA = 0xE1;
  7889  002E54  0EE1               	movlw	225
  7890  002E56  6E92               	movwf	3986,c	;volatile
  7891                           
  7892                           ;pin_manager.c: 68: TRISB = 0xEF;
  7893  002E58  0EEF               	movlw	239
  7894  002E5A  6E93               	movwf	3987,c	;volatile
  7895                           
  7896                           ;pin_manager.c: 69: TRISC = 0x80;
  7897  002E5C  0E80               	movlw	128
  7898  002E5E  6E94               	movwf	3988,c	;volatile
  7899                           
  7900                           ;pin_manager.c: 70: TRISD = 0xF2;
  7901  002E60  0EF2               	movlw	242
  7902  002E62  6E95               	movwf	3989,c	;volatile
  7903                           
  7904                           ;pin_manager.c: 75: ANSELC = 0x30;
  7905  002E64  0E30               	movlw	48
  7906  002E66  010F               	movlb	15	; () banked
  7907  002E68  6F3A               	movwf	58,b	;volatile
  7908                           
  7909                           ;pin_manager.c: 76: ANSELB = 0x33;
  7910  002E6A  0E33               	movlw	51
  7911  002E6C  6F39               	movwf	57,b	;volatile
  7912                           
  7913                           ;pin_manager.c: 77: ANSELD = 0xE4;
  7914  002E6E  0EE4               	movlw	228
  7915  002E70  6F3B               	movwf	59,b	;volatile
  7916                           
  7917                           ;pin_manager.c: 78: ANSELE = 0x07;
  7918  002E72  0E07               	movlw	7
  7919  002E74  6F3C               	movwf	60,b	;volatile
  7920                           
  7921                           ;pin_manager.c: 79: ANSELA = 0x2F;
  7922  002E76  0E2F               	movlw	47
  7923  002E78  6F38               	movwf	56,b	;volatile
  7924                           
  7925                           ;pin_manager.c: 84: WPUB = 0xC2;
  7926  002E7A  0EC2               	movlw	194
  7927  002E7C  6E61               	movwf	3937,c	;volatile
  7928                           
  7929                           ; BSR set to: 15
  7930                           ;pin_manager.c: 85: INTCON2bits.nRBPU = 0;
  7931  002E7E  9EF1               	bcf	intcon2,7,c	;volatile
  7932                           
  7933                           ; BSR set to: 15
  7934                           ;pin_manager.c: 92: INTCONbits.RBIE = 1;
  7935  002E80  86F2               	bsf	intcon,3,c	;volatile
  7936                           
  7937                           ; BSR set to: 15
  7938  002E82  0012               	return		;funcret
  7939  002E84                     __end_of_PIN_MANAGER_Initialize:
  7940                           	opt stack 0
  7941                           tosu	equ	0xFFF
  7942                           tosh	equ	0xFFE
  7943                           tosl	equ	0xFFD
  7944                           pclath	equ	0xFFA
  7945                           tblptru	equ	0xFF8
  7946                           tblptrh	equ	0xFF7
  7947                           tblptrl	equ	0xFF6
  7948                           tablat	equ	0xFF5
  7949                           prodh	equ	0xFF4
  7950                           prodl	equ	0xFF3
  7951                           intcon	equ	0xFF2
  7952                           intcon2	equ	0xFF1
  7953                           postinc0	equ	0xFEE
  7954                           wreg	equ	0xFE8
  7955                           indf1	equ	0xFE7
  7956                           postdec1	equ	0xFE5
  7957                           fsr1h	equ	0xFE2
  7958                           fsr1l	equ	0xFE1
  7959                           indf2	equ	0xFDF
  7960                           postinc2	equ	0xFDE
  7961                           postdec2	equ	0xFDD
  7962                           fsr2h	equ	0xFDA
  7963                           fsr2l	equ	0xFD9
  7964                           status	equ	0xFD8
  7965                           
  7966 ;; *************** function _OSCILLATOR_Initialize *****************
  7967 ;; Defined at:
  7968 ;;		line 122 in file "mcc_generated_files/mcc.c"
  7969 ;; Parameters:    Size  Location     Type
  7970 ;;		None
  7971 ;; Auto vars:     Size  Location     Type
  7972 ;;		None
  7973 ;; Return value:  Size  Location     Type
  7974 ;;                  1    wreg      void 
  7975 ;; Registers used:
  7976 ;;		wreg, status,2
  7977 ;; Tracked objects:
  7978 ;;		On entry : 0/0
  7979 ;;		On exit  : 0/0
  7980 ;;		Unchanged: 0/0
  7981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7982 ;;      Params:         0       0       0       0       0       0       0
  7983 ;;      Locals:         0       0       0       0       0       0       0
  7984 ;;      Temps:          0       0       0       0       0       0       0
  7985 ;;      Totals:         0       0       0       0       0       0       0
  7986 ;;Total ram usage:        0 bytes
  7987 ;; Hardware stack levels used:    1
  7988 ;; Hardware stack levels required when called:    3
  7989 ;; This function calls:
  7990 ;;		Nothing
  7991 ;; This function is called by:
  7992 ;;		_SYSTEM_Initialize
  7993 ;; This function uses a non-reentrant model
  7994 ;;
  7995                           
  7996                           	psect	text50
  7997  0036CE                     __ptext50:
  7998                           	opt stack 0
  7999  0036CE                     _OSCILLATOR_Initialize:
  8000                           	opt stack 25
  8001                           
  8002                           ;mcc.c: 125: OSCCON = 0x60;
  8003                           
  8004                           ; BSR set to: 15
  8005                           ;incstack = 0
  8006  0036CE  0E60               	movlw	96
  8007  0036D0  6ED3               	movwf	4051,c	;volatile
  8008                           
  8009                           ;mcc.c: 127: OSCCON2 = 0x04;
  8010  0036D2  0E04               	movlw	4
  8011  0036D4  6ED2               	movwf	4050,c	;volatile
  8012                           
  8013                           ;mcc.c: 129: OSCTUNE = 0x00;
  8014  0036D6  0E00               	movlw	0
  8015  0036D8  6E9B               	movwf	3995,c	;volatile
  8016  0036DA  0012               	return		;funcret
  8017  0036DC                     __end_of_OSCILLATOR_Initialize:
  8018                           	opt stack 0
  8019                           tosu	equ	0xFFF
  8020                           tosh	equ	0xFFE
  8021                           tosl	equ	0xFFD
  8022                           pclath	equ	0xFFA
  8023                           tblptru	equ	0xFF8
  8024                           tblptrh	equ	0xFF7
  8025                           tblptrl	equ	0xFF6
  8026                           tablat	equ	0xFF5
  8027                           prodh	equ	0xFF4
  8028                           prodl	equ	0xFF3
  8029                           intcon	equ	0xFF2
  8030                           intcon2	equ	0xFF1
  8031                           postinc0	equ	0xFEE
  8032                           wreg	equ	0xFE8
  8033                           indf1	equ	0xFE7
  8034                           postdec1	equ	0xFE5
  8035                           fsr1h	equ	0xFE2
  8036                           fsr1l	equ	0xFE1
  8037                           indf2	equ	0xFDF
  8038                           postinc2	equ	0xFDE
  8039                           postdec2	equ	0xFDD
  8040                           fsr2h	equ	0xFDA
  8041                           fsr2l	equ	0xFD9
  8042                           status	equ	0xFD8
  8043                           
  8044 ;; *************** function _INTERRUPT_Initialize *****************
  8045 ;; Defined at:
  8046 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  8047 ;; Parameters:    Size  Location     Type
  8048 ;;		None
  8049 ;; Auto vars:     Size  Location     Type
  8050 ;;		None
  8051 ;; Return value:  Size  Location     Type
  8052 ;;                  1    wreg      void 
  8053 ;; Registers used:
  8054 ;;		None
  8055 ;; Tracked objects:
  8056 ;;		On entry : 0/0
  8057 ;;		On exit  : 0/0
  8058 ;;		Unchanged: 0/0
  8059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8060 ;;      Params:         0       0       0       0       0       0       0
  8061 ;;      Locals:         0       0       0       0       0       0       0
  8062 ;;      Temps:          0       0       0       0       0       0       0
  8063 ;;      Totals:         0       0       0       0       0       0       0
  8064 ;;Total ram usage:        0 bytes
  8065 ;; Hardware stack levels used:    1
  8066 ;; Hardware stack levels required when called:    3
  8067 ;; This function calls:
  8068 ;;		Nothing
  8069 ;; This function is called by:
  8070 ;;		_SYSTEM_Initialize
  8071 ;; This function uses a non-reentrant model
  8072 ;;
  8073                           
  8074                           	psect	text51
  8075  003756                     __ptext51:
  8076                           	opt stack 0
  8077  003756                     _INTERRUPT_Initialize:
  8078                           	opt stack 25
  8079                           
  8080                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  8081                           
  8082                           ;incstack = 0
  8083  003756  9ED0               	bcf	4048,7,c	;volatile
  8084  003758  0012               	return		;funcret
  8085  00375A                     __end_of_INTERRUPT_Initialize:
  8086                           	opt stack 0
  8087                           tosu	equ	0xFFF
  8088                           tosh	equ	0xFFE
  8089                           tosl	equ	0xFFD
  8090                           pclath	equ	0xFFA
  8091                           tblptru	equ	0xFF8
  8092                           tblptrh	equ	0xFF7
  8093                           tblptrl	equ	0xFF6
  8094                           tablat	equ	0xFF5
  8095                           prodh	equ	0xFF4
  8096                           prodl	equ	0xFF3
  8097                           intcon	equ	0xFF2
  8098                           intcon2	equ	0xFF1
  8099                           postinc0	equ	0xFEE
  8100                           wreg	equ	0xFE8
  8101                           indf1	equ	0xFE7
  8102                           postdec1	equ	0xFE5
  8103                           fsr1h	equ	0xFE2
  8104                           fsr1l	equ	0xFE1
  8105                           indf2	equ	0xFDF
  8106                           postinc2	equ	0xFDE
  8107                           postdec2	equ	0xFDD
  8108                           fsr2h	equ	0xFDA
  8109                           fsr2l	equ	0xFD9
  8110                           status	equ	0xFD8
  8111                           
  8112 ;; *************** function _EUSART1_Initialize *****************
  8113 ;; Defined at:
  8114 ;;		line 74 in file "mcc_generated_files/eusart1.c"
  8115 ;; Parameters:    Size  Location     Type
  8116 ;;		None
  8117 ;; Auto vars:     Size  Location     Type
  8118 ;;		None
  8119 ;; Return value:  Size  Location     Type
  8120 ;;                  1    wreg      void 
  8121 ;; Registers used:
  8122 ;;		wreg, status,2
  8123 ;; Tracked objects:
  8124 ;;		On entry : 0/0
  8125 ;;		On exit  : 0/0
  8126 ;;		Unchanged: 0/0
  8127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8128 ;;      Params:         0       0       0       0       0       0       0
  8129 ;;      Locals:         0       0       0       0       0       0       0
  8130 ;;      Temps:          0       0       0       0       0       0       0
  8131 ;;      Totals:         0       0       0       0       0       0       0
  8132 ;;Total ram usage:        0 bytes
  8133 ;; Hardware stack levels used:    1
  8134 ;; Hardware stack levels required when called:    3
  8135 ;; This function calls:
  8136 ;;		Nothing
  8137 ;; This function is called by:
  8138 ;;		_SYSTEM_Initialize
  8139 ;; This function uses a non-reentrant model
  8140 ;;
  8141                           
  8142                           	psect	text52
  8143  00329C                     __ptext52:
  8144                           	opt stack 0
  8145  00329C                     _EUSART1_Initialize:
  8146                           	opt stack 25
  8147                           
  8148                           ;eusart1.c: 77: PIE1bits.RC1IE = 0;
  8149                           
  8150                           ;incstack = 0
  8151  00329C  9A9D               	bcf	3997,5,c	;volatile
  8152                           
  8153                           ;eusart1.c: 78: PIE1bits.TX1IE = 0;
  8154  00329E  989D               	bcf	3997,4,c	;volatile
  8155                           
  8156                           ;eusart1.c: 82: BAUDCON1 = 0x08;
  8157  0032A0  0E08               	movlw	8
  8158  0032A2  6EB8               	movwf	4024,c	;volatile
  8159                           
  8160                           ;eusart1.c: 85: RCSTA1 = 0x90;
  8161  0032A4  0E90               	movlw	144
  8162  0032A6  6EAB               	movwf	4011,c	;volatile
  8163                           
  8164                           ;eusart1.c: 88: TXSTA1 = 0x24;
  8165  0032A8  0E24               	movlw	36
  8166  0032AA  6EAC               	movwf	4012,c	;volatile
  8167                           
  8168                           ;eusart1.c: 91: SPBRG1 = 0x10;
  8169  0032AC  0E10               	movlw	16
  8170  0032AE  6EAF               	movwf	4015,c	;volatile
  8171                           
  8172                           ;eusart1.c: 94: SPBRGH1 = 0x00;
  8173  0032B0  0E00               	movlw	0
  8174  0032B2  6EB0               	movwf	4016,c	;volatile
  8175                           
  8176                           ;eusart1.c: 98: eusart1TxHead = 0;
  8177  0032B4  0E00               	movlw	0
  8178  0032B6  6E3A               	movwf	_eusart1TxHead,c	;volatile
  8179                           
  8180                           ;eusart1.c: 99: eusart1TxTail = 0;
  8181  0032B8  0E00               	movlw	0
  8182  0032BA  6E39               	movwf	_eusart1TxTail,c	;volatile
  8183                           
  8184                           ;eusart1.c: 100: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  8185  0032BC  0E46               	movlw	70
  8186  0032BE  0100               	movlb	0	; () banked
  8187  0032C0  6FFF               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
  8188                           
  8189                           ;eusart1.c: 102: eusart1RxHead = 0;
  8190  0032C2  0E00               	movlw	0
  8191  0032C4  6E38               	movwf	_eusart1RxHead,c	;volatile
  8192                           
  8193                           ;eusart1.c: 103: eusart1RxTail = 0;
  8194  0032C6  0E00               	movlw	0
  8195  0032C8  6E37               	movwf	_eusart1RxTail,c	;volatile
  8196                           
  8197                           ;eusart1.c: 104: eusart1RxCount = 0;
  8198  0032CA  0E00               	movlw	0
  8199  0032CC  6FD2               	movwf	_eusart1RxCount& (0+255),b	;volatile
  8200                           
  8201                           ; BSR set to: 0
  8202                           ;eusart1.c: 107: PIE1bits.RC1IE = 1;
  8203  0032CE  8A9D               	bsf	3997,5,c	;volatile
  8204                           
  8205                           ; BSR set to: 0
  8206  0032D0  0012               	return		;funcret
  8207  0032D2                     __end_of_EUSART1_Initialize:
  8208                           	opt stack 0
  8209                           tosu	equ	0xFFF
  8210                           tosh	equ	0xFFE
  8211                           tosl	equ	0xFFD
  8212                           pclath	equ	0xFFA
  8213                           tblptru	equ	0xFF8
  8214                           tblptrh	equ	0xFF7
  8215                           tblptrl	equ	0xFF6
  8216                           tablat	equ	0xFF5
  8217                           prodh	equ	0xFF4
  8218                           prodl	equ	0xFF3
  8219                           intcon	equ	0xFF2
  8220                           intcon2	equ	0xFF1
  8221                           postinc0	equ	0xFEE
  8222                           wreg	equ	0xFE8
  8223                           indf1	equ	0xFE7
  8224                           postdec1	equ	0xFE5
  8225                           fsr1h	equ	0xFE2
  8226                           fsr1l	equ	0xFE1
  8227                           indf2	equ	0xFDF
  8228                           postinc2	equ	0xFDE
  8229                           postdec2	equ	0xFDD
  8230                           fsr2h	equ	0xFDA
  8231                           fsr2l	equ	0xFD9
  8232                           status	equ	0xFD8
  8233                           
  8234 ;; *************** function _ADC_Initialize *****************
  8235 ;; Defined at:
  8236 ;;		line 58 in file "mcc_generated_files/adc.c"
  8237 ;; Parameters:    Size  Location     Type
  8238 ;;		None
  8239 ;; Auto vars:     Size  Location     Type
  8240 ;;		None
  8241 ;; Return value:  Size  Location     Type
  8242 ;;                  1    wreg      void 
  8243 ;; Registers used:
  8244 ;;		wreg, status,2
  8245 ;; Tracked objects:
  8246 ;;		On entry : 0/0
  8247 ;;		On exit  : 0/0
  8248 ;;		Unchanged: 0/0
  8249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8250 ;;      Params:         0       0       0       0       0       0       0
  8251 ;;      Locals:         0       0       0       0       0       0       0
  8252 ;;      Temps:          0       0       0       0       0       0       0
  8253 ;;      Totals:         0       0       0       0       0       0       0
  8254 ;;Total ram usage:        0 bytes
  8255 ;; Hardware stack levels used:    1
  8256 ;; Hardware stack levels required when called:    3
  8257 ;; This function calls:
  8258 ;;		Nothing
  8259 ;; This function is called by:
  8260 ;;		_SYSTEM_Initialize
  8261 ;; This function uses a non-reentrant model
  8262 ;;
  8263                           
  8264                           	psect	text53
  8265  00363E                     __ptext53:
  8266                           	opt stack 0
  8267  00363E                     _ADC_Initialize:
  8268                           	opt stack 25
  8269                           
  8270                           ;adc.c: 63: ADCON0 = 0x05;
  8271                           
  8272                           ; BSR set to: 0
  8273                           ;incstack = 0
  8274  00363E  0E05               	movlw	5
  8275  003640  6EC2               	movwf	4034,c	;volatile
  8276                           
  8277                           ;adc.c: 66: ADCON1 = 0x00;
  8278  003642  0E00               	movlw	0
  8279  003644  6EC1               	movwf	4033,c	;volatile
  8280                           
  8281                           ;adc.c: 69: ADCON2 = 0x87;
  8282  003646  0E87               	movlw	135
  8283  003648  6EC0               	movwf	4032,c	;volatile
  8284                           
  8285                           ;adc.c: 72: ADRESL = 0x00;
  8286  00364A  0E00               	movlw	0
  8287  00364C  6EC3               	movwf	4035,c	;volatile
  8288                           
  8289                           ;adc.c: 75: ADRESH = 0x00;
  8290  00364E  0E00               	movlw	0
  8291  003650  6EC4               	movwf	4036,c	;volatile
  8292  003652  0012               	return		;funcret
  8293  003654                     __end_of_ADC_Initialize:
  8294                           	opt stack 0
  8295                           tosu	equ	0xFFF
  8296                           tosh	equ	0xFFE
  8297                           tosl	equ	0xFFD
  8298                           pclath	equ	0xFFA
  8299                           tblptru	equ	0xFF8
  8300                           tblptrh	equ	0xFF7
  8301                           tblptrl	equ	0xFF6
  8302                           tablat	equ	0xFF5
  8303                           prodh	equ	0xFF4
  8304                           prodl	equ	0xFF3
  8305                           intcon	equ	0xFF2
  8306                           intcon2	equ	0xFF1
  8307                           postinc0	equ	0xFEE
  8308                           wreg	equ	0xFE8
  8309                           indf1	equ	0xFE7
  8310                           postdec1	equ	0xFE5
  8311                           fsr1h	equ	0xFE2
  8312                           fsr1l	equ	0xFE1
  8313                           indf2	equ	0xFDF
  8314                           postinc2	equ	0xFDE
  8315                           postdec2	equ	0xFDD
  8316                           fsr2h	equ	0xFDA
  8317                           fsr2l	equ	0xFD9
  8318                           status	equ	0xFD8
  8319                           
  8320 ;; *************** function _SetMcuRunTime *****************
  8321 ;; Defined at:
  8322 ;;		line 81 in file "SystemStatus.c"
  8323 ;; Parameters:    Size  Location     Type
  8324 ;;		None
  8325 ;; Auto vars:     Size  Location     Type
  8326 ;;		None
  8327 ;; Return value:  Size  Location     Type
  8328 ;;                  1    wreg      void 
  8329 ;; Registers used:
  8330 ;;		wreg, status,2, status,0, cstack
  8331 ;; Tracked objects:
  8332 ;;		On entry : 0/0
  8333 ;;		On exit  : 0/0
  8334 ;;		Unchanged: 0/0
  8335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8336 ;;      Params:         0       0       0       0       0       0       0
  8337 ;;      Locals:         0       0       0       0       0       0       0
  8338 ;;      Temps:          0       0       0       0       0       0       0
  8339 ;;      Totals:         0       0       0       0       0       0       0
  8340 ;;Total ram usage:        0 bytes
  8341 ;; Hardware stack levels used:    1
  8342 ;; Hardware stack levels required when called:    4
  8343 ;; This function calls:
  8344 ;;		___llmod
  8345 ;; This function is called by:
  8346 ;;		_main
  8347 ;; This function uses a non-reentrant model
  8348 ;;
  8349                           
  8350                           	psect	text54
  8351  002F0C                     __ptext54:
  8352                           	opt stack 0
  8353  002F0C                     _SetMcuRunTime:
  8354                           	opt stack 26
  8355                           
  8356                           ;SystemStatus.c: 83: mcuRunTimeIn5SecTicks++;
  8357                           
  8358                           ;incstack = 0
  8359  002F0C  0E01               	movlw	1
  8360  002F0E  0100               	movlb	0	; () banked
  8361  002F10  27C0               	addwf	_mcuRunTimeIn5SecTicks& (0+255),f,b
  8362  002F12  0E00               	movlw	0
  8363  002F14  23C1               	addwfc	(_mcuRunTimeIn5SecTicks+1)& (0+255),f,b
  8364  002F16  23C2               	addwfc	(_mcuRunTimeIn5SecTicks+2)& (0+255),f,b
  8365  002F18  23C3               	addwfc	(_mcuRunTimeIn5SecTicks+3)& (0+255),f,b
  8366                           
  8367                           ; BSR set to: 0
  8368                           ;SystemStatus.c: 84: mcuRunTimeIn5SecTicks %= (17280);
  8369  002F1A  C0C0  F018         	movff	_mcuRunTimeIn5SecTicks,___llmod@dividend
  8370  002F1E  C0C1  F019         	movff	_mcuRunTimeIn5SecTicks+1,___llmod@dividend+1
  8371  002F22  C0C2  F01A         	movff	_mcuRunTimeIn5SecTicks+2,___llmod@dividend+2
  8372  002F26  C0C3  F01B         	movff	_mcuRunTimeIn5SecTicks+3,___llmod@dividend+3
  8373  002F2A  0E80               	movlw	128
  8374  002F2C  6E1C               	movwf	___llmod@divisor,c
  8375  002F2E  0E43               	movlw	67
  8376  002F30  6E1D               	movwf	___llmod@divisor+1,c
  8377  002F32  0E00               	movlw	0
  8378  002F34  6E1E               	movwf	___llmod@divisor+2,c
  8379  002F36  0E00               	movlw	0
  8380  002F38  6E1F               	movwf	___llmod@divisor+3,c
  8381  002F3A  EC5C  F014         	call	___llmod	;wreg free
  8382  002F3E  C018  F0C0         	movff	?___llmod,_mcuRunTimeIn5SecTicks
  8383  002F42  C019  F0C1         	movff	?___llmod+1,_mcuRunTimeIn5SecTicks+1
  8384  002F46  C01A  F0C2         	movff	?___llmod+2,_mcuRunTimeIn5SecTicks+2
  8385  002F4A  C01B  F0C3         	movff	?___llmod+3,_mcuRunTimeIn5SecTicks+3
  8386  002F4E  0012               	return		;funcret
  8387  002F50                     __end_of_SetMcuRunTime:
  8388                           	opt stack 0
  8389                           tosu	equ	0xFFF
  8390                           tosh	equ	0xFFE
  8391                           tosl	equ	0xFFD
  8392                           pclath	equ	0xFFA
  8393                           tblptru	equ	0xFF8
  8394                           tblptrh	equ	0xFF7
  8395                           tblptrl	equ	0xFF6
  8396                           tablat	equ	0xFF5
  8397                           prodh	equ	0xFF4
  8398                           prodl	equ	0xFF3
  8399                           intcon	equ	0xFF2
  8400                           intcon2	equ	0xFF1
  8401                           postinc0	equ	0xFEE
  8402                           wreg	equ	0xFE8
  8403                           indf1	equ	0xFE7
  8404                           postdec1	equ	0xFE5
  8405                           fsr1h	equ	0xFE2
  8406                           fsr1l	equ	0xFE1
  8407                           indf2	equ	0xFDF
  8408                           postinc2	equ	0xFDE
  8409                           postdec2	equ	0xFDD
  8410                           fsr2h	equ	0xFDA
  8411                           fsr2l	equ	0xFD9
  8412                           status	equ	0xFD8
  8413                           
  8414 ;; *************** function ___llmod *****************
  8415 ;; Defined at:
  8416 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  8417 ;; Parameters:    Size  Location     Type
  8418 ;;  dividend        4   23[COMRAM] unsigned long 
  8419 ;;  divisor         4   27[COMRAM] unsigned long 
  8420 ;; Auto vars:     Size  Location     Type
  8421 ;;  counter         1   31[COMRAM] unsigned char 
  8422 ;; Return value:  Size  Location     Type
  8423 ;;                  4   23[COMRAM] unsigned long 
  8424 ;; Registers used:
  8425 ;;		wreg, status,2, status,0
  8426 ;; Tracked objects:
  8427 ;;		On entry : 0/0
  8428 ;;		On exit  : 0/0
  8429 ;;		Unchanged: 0/0
  8430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8431 ;;      Params:         8       0       0       0       0       0       0
  8432 ;;      Locals:         1       0       0       0       0       0       0
  8433 ;;      Temps:          0       0       0       0       0       0       0
  8434 ;;      Totals:         9       0       0       0       0       0       0
  8435 ;;Total ram usage:        9 bytes
  8436 ;; Hardware stack levels used:    1
  8437 ;; Hardware stack levels required when called:    3
  8438 ;; This function calls:
  8439 ;;		Nothing
  8440 ;; This function is called by:
  8441 ;;		_SetMcuRunTime
  8442 ;;		_GetMcuRunTime
  8443 ;; This function uses a non-reentrant model
  8444 ;;
  8445                           
  8446                           	psect	text55
  8447  0028B8                     __ptext55:
  8448                           	opt stack 0
  8449  0028B8                     ___llmod:
  8450                           	opt stack 24
  8451                           
  8452                           ;incstack = 0
  8453  0028B8  501C               	movf	___llmod@divisor,w,c
  8454  0028BA  101D               	iorwf	___llmod@divisor+1,w,c
  8455  0028BC  101E               	iorwf	___llmod@divisor+2,w,c
  8456  0028BE  101F               	iorwf	___llmod@divisor+3,w,c
  8457  0028C0  B4D8               	btfsc	status,2,c
  8458  0028C2  D024               	goto	l1769
  8459  0028C4  0E01               	movlw	1
  8460  0028C6  6E20               	movwf	___llmod@counter,c
  8461  0028C8  D006               	goto	l1764
  8462  0028CA  90D8               	bcf	status,0,c
  8463  0028CC  361C               	rlcf	___llmod@divisor,f,c
  8464  0028CE  361D               	rlcf	___llmod@divisor+1,f,c
  8465  0028D0  361E               	rlcf	___llmod@divisor+2,f,c
  8466  0028D2  361F               	rlcf	___llmod@divisor+3,f,c
  8467  0028D4  2A20               	incf	___llmod@counter,f,c
  8468  0028D6                     l1764:
  8469  0028D6  AE1F               	btfss	___llmod@divisor+3,7,c
  8470  0028D8  D7F8               	goto	l1765
  8471  0028DA                     u6870:
  8472  0028DA  501C               	movf	___llmod@divisor,w,c
  8473  0028DC  5C18               	subwf	___llmod@dividend,w,c
  8474  0028DE  501D               	movf	___llmod@divisor+1,w,c
  8475  0028E0  5819               	subwfb	___llmod@dividend+1,w,c
  8476  0028E2  501E               	movf	___llmod@divisor+2,w,c
  8477  0028E4  581A               	subwfb	___llmod@dividend+2,w,c
  8478  0028E6  501F               	movf	___llmod@divisor+3,w,c
  8479  0028E8  581B               	subwfb	___llmod@dividend+3,w,c
  8480  0028EA  A0D8               	btfss	status,0,c
  8481  0028EC  D008               	goto	l1768
  8482  0028EE  501C               	movf	___llmod@divisor,w,c
  8483  0028F0  5E18               	subwf	___llmod@dividend,f,c
  8484  0028F2  501D               	movf	___llmod@divisor+1,w,c
  8485  0028F4  5A19               	subwfb	___llmod@dividend+1,f,c
  8486  0028F6  501E               	movf	___llmod@divisor+2,w,c
  8487  0028F8  5A1A               	subwfb	___llmod@dividend+2,f,c
  8488  0028FA  501F               	movf	___llmod@divisor+3,w,c
  8489  0028FC  5A1B               	subwfb	___llmod@dividend+3,f,c
  8490  0028FE                     l1768:
  8491  0028FE  90D8               	bcf	status,0,c
  8492  002900  321F               	rrcf	___llmod@divisor+3,f,c
  8493  002902  321E               	rrcf	___llmod@divisor+2,f,c
  8494  002904  321D               	rrcf	___llmod@divisor+1,f,c
  8495  002906  321C               	rrcf	___llmod@divisor,f,c
  8496  002908  2E20               	decfsz	___llmod@counter,f,c
  8497  00290A  D7E7               	goto	u6870
  8498  00290C                     l1769:
  8499  00290C  C018  F018         	movff	___llmod@dividend,?___llmod
  8500  002910  C019  F019         	movff	___llmod@dividend+1,?___llmod+1
  8501  002914  C01A  F01A         	movff	___llmod@dividend+2,?___llmod+2
  8502  002918  C01B  F01B         	movff	___llmod@dividend+3,?___llmod+3
  8503  00291C  0012               	return		;funcret
  8504  00291E                     __end_of___llmod:
  8505                           	opt stack 0
  8506                           tosu	equ	0xFFF
  8507                           tosh	equ	0xFFE
  8508                           tosl	equ	0xFFD
  8509                           pclath	equ	0xFFA
  8510                           tblptru	equ	0xFF8
  8511                           tblptrh	equ	0xFF7
  8512                           tblptrl	equ	0xFF6
  8513                           tablat	equ	0xFF5
  8514                           prodh	equ	0xFF4
  8515                           prodl	equ	0xFF3
  8516                           intcon	equ	0xFF2
  8517                           intcon2	equ	0xFF1
  8518                           postinc0	equ	0xFEE
  8519                           wreg	equ	0xFE8
  8520                           indf1	equ	0xFE7
  8521                           postdec1	equ	0xFE5
  8522                           fsr1h	equ	0xFE2
  8523                           fsr1l	equ	0xFE1
  8524                           indf2	equ	0xFDF
  8525                           postinc2	equ	0xFDE
  8526                           postdec2	equ	0xFDD
  8527                           fsr2h	equ	0xFDA
  8528                           fsr2l	equ	0xFD9
  8529                           status	equ	0xFD8
  8530                           
  8531 ;; *************** function _SendSystemStartAck *****************
  8532 ;; Defined at:
  8533 ;;		line 103 in file "SystemCommon.c"
  8534 ;; Parameters:    Size  Location     Type
  8535 ;;		None
  8536 ;; Auto vars:     Size  Location     Type
  8537 ;;		None
  8538 ;; Return value:  Size  Location     Type
  8539 ;;                  1    wreg      void 
  8540 ;; Registers used:
  8541 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8542 ;; Tracked objects:
  8543 ;;		On entry : 0/0
  8544 ;;		On exit  : 0/0
  8545 ;;		Unchanged: 0/0
  8546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8547 ;;      Params:         0       0       0       0       0       0       0
  8548 ;;      Locals:         0       0       0       0       0       0       0
  8549 ;;      Temps:          0       0       0       0       0       0       0
  8550 ;;      Totals:         0       0       0       0       0       0       0
  8551 ;;Total ram usage:        0 bytes
  8552 ;; Hardware stack levels used:    1
  8553 ;; Hardware stack levels required when called:    6
  8554 ;; This function calls:
  8555 ;;		_SendAckMessage
  8556 ;; This function is called by:
  8557 ;;		_main
  8558 ;; This function uses a non-reentrant model
  8559 ;;
  8560                           
  8561                           	psect	text56
  8562  003728                     __ptext56:
  8563                           	opt stack 0
  8564  003728                     _SendSystemStartAck:
  8565                           	opt stack 24
  8566                           
  8567                           ;SystemCommon.c: 105: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_SYSTE
      +                          M_START);
  8568                           
  8569                           ;incstack = 0
  8570  003728  0E10               	movlw	16
  8571  00372A  6E24               	movwf	SendAckMessage@inRequest,c
  8572  00372C  0E01               	movlw	1
  8573  00372E  ECAA  F016         	call	_SendAckMessage
  8574  003732  0012               	return		;funcret
  8575  003734                     __end_of_SendSystemStartAck:
  8576                           	opt stack 0
  8577                           tosu	equ	0xFFF
  8578                           tosh	equ	0xFFE
  8579                           tosl	equ	0xFFD
  8580                           pclath	equ	0xFFA
  8581                           tblptru	equ	0xFF8
  8582                           tblptrh	equ	0xFF7
  8583                           tblptrl	equ	0xFF6
  8584                           tablat	equ	0xFF5
  8585                           prodh	equ	0xFF4
  8586                           prodl	equ	0xFF3
  8587                           intcon	equ	0xFF2
  8588                           intcon2	equ	0xFF1
  8589                           postinc0	equ	0xFEE
  8590                           wreg	equ	0xFE8
  8591                           indf1	equ	0xFE7
  8592                           postdec1	equ	0xFE5
  8593                           fsr1h	equ	0xFE2
  8594                           fsr1l	equ	0xFE1
  8595                           indf2	equ	0xFDF
  8596                           postinc2	equ	0xFDE
  8597                           postdec2	equ	0xFDD
  8598                           fsr2h	equ	0xFDA
  8599                           fsr2l	equ	0xFD9
  8600                           status	equ	0xFD8
  8601                           
  8602 ;; *************** function _SendAckMessage *****************
  8603 ;; Defined at:
  8604 ;;		line 171 in file "EusartApp.c"
  8605 ;; Parameters:    Size  Location     Type
  8606 ;;  inGroup         1    wreg     enum E7163
  8607 ;;  inRequest       1   35[COMRAM] enum E7171
  8608 ;; Auto vars:     Size  Location     Type
  8609 ;;  inGroup         1   36[COMRAM] enum E7163
  8610 ;;  TxMsg           6   37[COMRAM] unsigned char [6]
  8611 ;; Return value:  Size  Location     Type
  8612 ;;                  1    wreg      void 
  8613 ;; Registers used:
  8614 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8615 ;; Tracked objects:
  8616 ;;		On entry : 0/0
  8617 ;;		On exit  : 0/0
  8618 ;;		Unchanged: 0/0
  8619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8620 ;;      Params:         1       0       0       0       0       0       0
  8621 ;;      Locals:         7       0       0       0       0       0       0
  8622 ;;      Temps:          0       0       0       0       0       0       0
  8623 ;;      Totals:         8       0       0       0       0       0       0
  8624 ;;Total ram usage:        8 bytes
  8625 ;; Hardware stack levels used:    1
  8626 ;; Hardware stack levels required when called:    5
  8627 ;; This function calls:
  8628 ;;		_WriteUartMessage
  8629 ;;		_ZeroArray
  8630 ;;		_crc8
  8631 ;; This function is called by:
  8632 ;;		_testLeds
  8633 ;;		_SetAdcOperationMode
  8634 ;;		_SetConversionResultFormat
  8635 ;;		_SetChannelMode
  8636 ;;		_FlashReadUart
  8637 ;;		_FlashEreaseMem
  8638 ;;		_DacSetValue
  8639 ;;		_UpdateTxFreq
  8640 ;;		_UpdateRxFreq
  8641 ;;		_ResetMcu
  8642 ;;		_ResetCpld
  8643 ;;		_SendSystemStartAck
  8644 ;;		_SetMcuFwVersion
  8645 ;;		_SetCpldFwVersion
  8646 ;;		_keepAliveSignalUart
  8647 ;; This function uses a non-reentrant model
  8648 ;;
  8649                           
  8650                           	psect	text57
  8651  002D54                     __ptext57:
  8652                           	opt stack 0
  8653  002D54                     _SendAckMessage:
  8654                           	opt stack 22
  8655                           
  8656                           ;incstack = 0
  8657                           ;SendAckMessage@inGroup stored from wreg
  8658  002D54  6E25               	movwf	SendAckMessage@inGroup,c
  8659                           
  8660                           ;EusartApp.c: 174: char TxMsg[(0x5) + 1];
  8661                           ;EusartApp.c: 175: ZeroArray(TxMsg, (0x5) + 1);
  8662  002D56  0E26               	movlw	low SendAckMessage@TxMsg
  8663  002D58  6E20               	movwf	ZeroArray@array,c
  8664  002D5A  0E00               	movlw	high SendAckMessage@TxMsg
  8665  002D5C  6E21               	movwf	ZeroArray@array+1,c
  8666  002D5E  0E00               	movlw	0
  8667  002D60  6E23               	movwf	ZeroArray@size+1,c
  8668  002D62  0E06               	movlw	6
  8669  002D64  6E22               	movwf	ZeroArray@size,c
  8670  002D66  ECDC  F01A         	call	_ZeroArray	;wreg free
  8671                           
  8672                           ;EusartApp.c: 178: TxMsg[(0)] = (0x24);
  8673  002D6A  0E24               	movlw	36
  8674  002D6C  6E26               	movwf	SendAckMessage@TxMsg,c
  8675                           
  8676                           ;EusartApp.c: 179: TxMsg[(1)] = inGroup;
  8677  002D6E  C025  F027         	movff	SendAckMessage@inGroup,SendAckMessage@TxMsg+1
  8678                           
  8679                           ;EusartApp.c: 180: TxMsg[(2)] = inRequest;
  8680  002D72  C024  F028         	movff	SendAckMessage@inRequest,SendAckMessage@TxMsg+2
  8681                           
  8682                           ;EusartApp.c: 181: TxMsg[(3)] = 0;
  8683  002D76  0E00               	movlw	0
  8684  002D78  6E29               	movwf	SendAckMessage@TxMsg+3,c
  8685                           
  8686                           ;EusartApp.c: 183: TxMsg[(0x5)] = crc8(TxMsg, (0x5));
  8687  002D7A  0E26               	movlw	low SendAckMessage@TxMsg
  8688  002D7C  6E18               	movwf	crc8@dataArray,c
  8689  002D7E  0E00               	movlw	high SendAckMessage@TxMsg
  8690  002D80  6E19               	movwf	crc8@dataArray+1,c
  8691  002D82  0E00               	movlw	0
  8692  002D84  6E1B               	movwf	crc8@dataSize+1,c
  8693  002D86  0E05               	movlw	5
  8694  002D88  6E1A               	movwf	crc8@dataSize,c
  8695  002D8A  ECD3  F016         	call	_crc8	;wreg free
  8696  002D8E  6E2B               	movwf	SendAckMessage@TxMsg+5,c
  8697                           
  8698                           ;EusartApp.c: 185: WriteUartMessage(TxMsg, (0x5) + 1);
  8699  002D90  0E26               	movlw	low SendAckMessage@TxMsg
  8700  002D92  6E19               	movwf	WriteUartMessage@dataBuf,c
  8701  002D94  0E00               	movlw	high SendAckMessage@TxMsg
  8702  002D96  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  8703  002D98  0E00               	movlw	0
  8704  002D9A  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  8705  002D9C  0E06               	movlw	6
  8706  002D9E  6E1B               	movwf	WriteUartMessage@dataSize,c
  8707  002DA0  EC69  F019         	call	_WriteUartMessage	;wreg free
  8708  002DA4  0012               	return		;funcret
  8709  002DA6                     __end_of_SendAckMessage:
  8710                           	opt stack 0
  8711                           tosu	equ	0xFFF
  8712                           tosh	equ	0xFFE
  8713                           tosl	equ	0xFFD
  8714                           pclath	equ	0xFFA
  8715                           tblptru	equ	0xFF8
  8716                           tblptrh	equ	0xFF7
  8717                           tblptrl	equ	0xFF6
  8718                           tablat	equ	0xFF5
  8719                           prodh	equ	0xFF4
  8720                           prodl	equ	0xFF3
  8721                           intcon	equ	0xFF2
  8722                           intcon2	equ	0xFF1
  8723                           postinc0	equ	0xFEE
  8724                           wreg	equ	0xFE8
  8725                           indf1	equ	0xFE7
  8726                           postdec1	equ	0xFE5
  8727                           fsr1h	equ	0xFE2
  8728                           fsr1l	equ	0xFE1
  8729                           indf2	equ	0xFDF
  8730                           postinc2	equ	0xFDE
  8731                           postdec2	equ	0xFDD
  8732                           fsr2h	equ	0xFDA
  8733                           fsr2l	equ	0xFD9
  8734                           status	equ	0xFD8
  8735                           
  8736 ;; *************** function _crc8 *****************
  8737 ;; Defined at:
  8738 ;;		line 13 in file "SystemCommon.c"
  8739 ;; Parameters:    Size  Location     Type
  8740 ;;  dataArray       2   23[COMRAM] PTR unsigned char 
  8741 ;;		 -> GetMcuRunTime@TxMsg(9), GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), FlashReadCondition@TxMsg(9), 
  8742 ;;		 -> FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), rxMsgQueue(20), 
  8743 ;;  dataSize        2   25[COMRAM] int 
  8744 ;; Auto vars:     Size  Location     Type
  8745 ;;  i               2   30[COMRAM] int 
  8746 ;;  crc             2   28[COMRAM] int 
  8747 ;; Return value:  Size  Location     Type
  8748 ;;                  1    wreg      unsigned char 
  8749 ;; Registers used:
  8750 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8751 ;; Tracked objects:
  8752 ;;		On entry : 0/0
  8753 ;;		On exit  : 0/0
  8754 ;;		Unchanged: 0/0
  8755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8756 ;;      Params:         4       0       0       0       0       0       0
  8757 ;;      Locals:         4       0       0       0       0       0       0
  8758 ;;      Temps:          1       0       0       0       0       0       0
  8759 ;;      Totals:         9       0       0       0       0       0       0
  8760 ;;Total ram usage:        9 bytes
  8761 ;; Hardware stack levels used:    1
  8762 ;; Hardware stack levels required when called:    3
  8763 ;; This function calls:
  8764 ;;		Nothing
  8765 ;; This function is called by:
  8766 ;;		_readUartMessage
  8767 ;;		_SendAckMessage
  8768 ;;		_FlashReadUart
  8769 ;;		_FlashReadCondition
  8770 ;;		_GetMcuFwVersion
  8771 ;;		_GetCpldFwVersion
  8772 ;;		_GetMcuRunTime
  8773 ;; This function uses a non-reentrant model
  8774 ;;
  8775                           
  8776                           	psect	text58
  8777  002DA6                     __ptext58:
  8778                           	opt stack 0
  8779  002DA6                     _crc8:
  8780                           	opt stack 26
  8781                           
  8782                           ;SystemCommon.c: 15: int crc = 0;
  8783                           
  8784                           ;incstack = 0
  8785  002DA6  0E00               	movlw	0
  8786  002DA8  6E1E               	movwf	crc8@crc+1,c
  8787  002DAA  0E00               	movlw	0
  8788  002DAC  6E1D               	movwf	crc8@crc,c
  8789                           
  8790                           ;SystemCommon.c: 16: for (int i = 0; i < dataSize; i++)
  8791  002DAE  0E00               	movlw	0
  8792  002DB0  6E20               	movwf	crc8@i+1,c
  8793  002DB2  0E00               	movlw	0
  8794  002DB4  6E1F               	movwf	crc8@i,c
  8795  002DB6  D00E               	goto	l1229
  8796  002DB8                     
  8797                           ;SystemCommon.c: 17: {
  8798                           ;SystemCommon.c: 18: crc += dataArray[i];
  8799  002DB8  501F               	movf	crc8@i,w,c
  8800  002DBA  2418               	addwf	crc8@dataArray,w,c
  8801  002DBC  6ED9               	movwf	fsr2l,c
  8802  002DBE  5020               	movf	crc8@i+1,w,c
  8803  002DC0  2019               	addwfc	crc8@dataArray+1,w,c
  8804  002DC2  6EDA               	movwf	fsr2h,c
  8805  002DC4  50DF               	movf	indf2,w,c
  8806  002DC6  6E1C               	movwf	??_crc8& (0+255),c
  8807  002DC8  501C               	movf	??_crc8,w,c
  8808  002DCA  261D               	addwf	crc8@crc,f,c
  8809  002DCC  0E00               	movlw	0
  8810  002DCE  221E               	addwfc	crc8@crc+1,f,c
  8811  002DD0  4A1F               	infsnz	crc8@i,f,c
  8812  002DD2  2A20               	incf	crc8@i+1,f,c
  8813  002DD4                     l1229:
  8814  002DD4  501A               	movf	crc8@dataSize,w,c
  8815  002DD6  5C1F               	subwf	crc8@i,w,c
  8816  002DD8  5020               	movf	crc8@i+1,w,c
  8817  002DDA  0A80               	xorlw	128
  8818  002DDC  6E1C               	movwf	??_crc8& (0+255),c
  8819  002DDE  501B               	movf	crc8@dataSize+1,w,c
  8820  002DE0  0A80               	xorlw	128
  8821  002DE2  581C               	subwfb	??_crc8& (0+255),w,c
  8822  002DE4  A0D8               	btfss	status,0,c
  8823  002DE6  D7E8               	goto	l1230
  8824                           
  8825                           ;SystemCommon.c: 19: }
  8826                           ;SystemCommon.c: 20: crc &= 0xff;
  8827  002DE8  0EFF               	movlw	255
  8828  002DEA  161D               	andwf	crc8@crc,f,c
  8829  002DEC  0E00               	movlw	0
  8830  002DEE  161E               	andwf	crc8@crc+1,f,c
  8831                           
  8832                           ;SystemCommon.c: 21: return crc;
  8833  002DF0  501D               	movf	crc8@crc,w,c
  8834  002DF2  0012               	return	
  8835  002DF4                     __end_of_crc8:
  8836                           	opt stack 0
  8837                           tosu	equ	0xFFF
  8838                           tosh	equ	0xFFE
  8839                           tosl	equ	0xFFD
  8840                           pclath	equ	0xFFA
  8841                           tblptru	equ	0xFF8
  8842                           tblptrh	equ	0xFF7
  8843                           tblptrl	equ	0xFF6
  8844                           tablat	equ	0xFF5
  8845                           prodh	equ	0xFF4
  8846                           prodl	equ	0xFF3
  8847                           intcon	equ	0xFF2
  8848                           intcon2	equ	0xFF1
  8849                           postinc0	equ	0xFEE
  8850                           wreg	equ	0xFE8
  8851                           indf1	equ	0xFE7
  8852                           postdec1	equ	0xFE5
  8853                           fsr1h	equ	0xFE2
  8854                           fsr1l	equ	0xFE1
  8855                           indf2	equ	0xFDF
  8856                           postinc2	equ	0xFDE
  8857                           postdec2	equ	0xFDD
  8858                           fsr2h	equ	0xFDA
  8859                           fsr2l	equ	0xFD9
  8860                           status	equ	0xFD8
  8861                           
  8862 ;; *************** function _ZeroArray *****************
  8863 ;; Defined at:
  8864 ;;		line 24 in file "SystemCommon.c"
  8865 ;; Parameters:    Size  Location     Type
  8866 ;;  array           2   31[COMRAM] PTR unsigned char 
  8867 ;;		 -> GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dataRegArr(8), FlashReadCondition@TxMsg(
      +9), 
  8868 ;;		 -> FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), 
  8869 ;;		 -> rxMsgQueue(20), 
  8870 ;;  size            2   33[COMRAM] int 
  8871 ;; Auto vars:     Size  Location     Type
  8872 ;;		None
  8873 ;; Return value:  Size  Location     Type
  8874 ;;                  1    wreg      void 
  8875 ;; Registers used:
  8876 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8877 ;; Tracked objects:
  8878 ;;		On entry : 0/0
  8879 ;;		On exit  : 0/0
  8880 ;;		Unchanged: 0/0
  8881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8882 ;;      Params:         4       0       0       0       0       0       0
  8883 ;;      Locals:         0       0       0       0       0       0       0
  8884 ;;      Temps:          0       0       0       0       0       0       0
  8885 ;;      Totals:         4       0       0       0       0       0       0
  8886 ;;Total ram usage:        4 bytes
  8887 ;; Hardware stack levels used:    1
  8888 ;; Hardware stack levels required when called:    4
  8889 ;; This function calls:
  8890 ;;		_memset
  8891 ;; This function is called by:
  8892 ;;		_readUartMessage
  8893 ;;		_InitRxMessageParams
  8894 ;;		_SendAckMessage
  8895 ;;		_FlashReadUart
  8896 ;;		_FlashEreaseMem
  8897 ;;		_FlashReadCondition
  8898 ;;		_GetIntFromUartData
  8899 ;;		_GetMcuFwVersion
  8900 ;;		_GetCpldFwVersion
  8901 ;; This function uses a non-reentrant model
  8902 ;;
  8903                           
  8904                           	psect	text59
  8905  0035B8                     __ptext59:
  8906                           	opt stack 0
  8907  0035B8                     _ZeroArray:
  8908                           	opt stack 25
  8909                           
  8910                           ;SystemCommon.c: 26: memset(array, 0x0, size);
  8911                           
  8912                           ;incstack = 0
  8913  0035B8  C020  F018         	movff	ZeroArray@array,memset@p1
  8914  0035BC  C021  F019         	movff	ZeroArray@array+1,memset@p1+1
  8915  0035C0  0E00               	movlw	0
  8916  0035C2  6E1B               	movwf	memset@c+1,c
  8917  0035C4  0E00               	movlw	0
  8918  0035C6  6E1A               	movwf	memset@c,c
  8919  0035C8  C022  F01C         	movff	ZeroArray@size,memset@n
  8920  0035CC  C023  F01D         	movff	ZeroArray@size+1,memset@n+1
  8921  0035D0  ECFF  F019         	call	_memset	;wreg free
  8922  0035D4  0012               	return		;funcret
  8923  0035D6                     __end_of_ZeroArray:
  8924                           	opt stack 0
  8925                           tosu	equ	0xFFF
  8926                           tosh	equ	0xFFE
  8927                           tosl	equ	0xFFD
  8928                           pclath	equ	0xFFA
  8929                           tblptru	equ	0xFF8
  8930                           tblptrh	equ	0xFF7
  8931                           tblptrl	equ	0xFF6
  8932                           tablat	equ	0xFF5
  8933                           prodh	equ	0xFF4
  8934                           prodl	equ	0xFF3
  8935                           intcon	equ	0xFF2
  8936                           intcon2	equ	0xFF1
  8937                           postinc0	equ	0xFEE
  8938                           wreg	equ	0xFE8
  8939                           indf1	equ	0xFE7
  8940                           postdec1	equ	0xFE5
  8941                           fsr1h	equ	0xFE2
  8942                           fsr1l	equ	0xFE1
  8943                           indf2	equ	0xFDF
  8944                           postinc2	equ	0xFDE
  8945                           postdec2	equ	0xFDD
  8946                           fsr2h	equ	0xFDA
  8947                           fsr2l	equ	0xFD9
  8948                           status	equ	0xFD8
  8949                           
  8950 ;; *************** function _memset *****************
  8951 ;; Defined at:
  8952 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
  8953 ;; Parameters:    Size  Location     Type
  8954 ;;  p1              2   23[COMRAM] PTR void 
  8955 ;;		 -> GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dataRegArr(8), FlashReadCondition@TxMsg(
      +9), 
  8956 ;;		 -> FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), 
  8957 ;;		 -> rxMsgQueue(20), 
  8958 ;;  c               2   25[COMRAM] int 
  8959 ;;  n               2   27[COMRAM] unsigned int 
  8960 ;; Auto vars:     Size  Location     Type
  8961 ;;  p               2   29[COMRAM] PTR unsigned char 
  8962 ;;		 -> GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dataRegArr(8), FlashReadCondition@TxMsg(
      +9), 
  8963 ;;		 -> FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), 
  8964 ;;		 -> rxMsgQueue(20), 
  8965 ;; Return value:  Size  Location     Type
  8966 ;;                  2   23[COMRAM] PTR void 
  8967 ;; Registers used:
  8968 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8969 ;; Tracked objects:
  8970 ;;		On entry : 0/0
  8971 ;;		On exit  : 0/0
  8972 ;;		Unchanged: 0/0
  8973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8974 ;;      Params:         6       0       0       0       0       0       0
  8975 ;;      Locals:         2       0       0       0       0       0       0
  8976 ;;      Temps:          0       0       0       0       0       0       0
  8977 ;;      Totals:         8       0       0       0       0       0       0
  8978 ;;Total ram usage:        8 bytes
  8979 ;; Hardware stack levels used:    1
  8980 ;; Hardware stack levels required when called:    3
  8981 ;; This function calls:
  8982 ;;		Nothing
  8983 ;; This function is called by:
  8984 ;;		_ZeroArray
  8985 ;; This function uses a non-reentrant model
  8986 ;;
  8987                           
  8988                           	psect	text60
  8989  0033FE                     __ptext60:
  8990                           	opt stack 0
  8991  0033FE                     _memset:
  8992                           	opt stack 25
  8993                           
  8994                           ;incstack = 0
  8995  0033FE  C018  F01E         	movff	memset@p1,memset@p
  8996  003402  C019  F01F         	movff	memset@p1+1,memset@p+1
  8997  003406  D008               	goto	l1831
  8998  003408                     l6430:
  8999  003408  C01E  FFD9         	movff	memset@p,fsr2l
  9000  00340C  C01F  FFDA         	movff	memset@p+1,fsr2h
  9001  003410  C01A  FFDF         	movff	memset@c,indf2
  9002  003414  4A1E               	infsnz	memset@p,f,c
  9003  003416  2A1F               	incf	memset@p+1,f,c
  9004  003418                     l1831:
  9005  003418  061C               	decf	memset@n,f,c
  9006  00341A  A0D8               	btfss	status,0,c
  9007  00341C  061D               	decf	memset@n+1,f,c
  9008  00341E  281C               	incf	memset@n,w,c
  9009  003420  E1F3               	bnz	l6430
  9010  003422  281D               	incf	memset@n+1,w,c
  9011  003424  B4D8               	btfsc	status,2,c
  9012  003426  0012               	return	
  9013  003428  D7EF               	goto	l1832
  9014  00342A                     __end_of_memset:
  9015                           	opt stack 0
  9016                           tosu	equ	0xFFF
  9017                           tosh	equ	0xFFE
  9018                           tosl	equ	0xFFD
  9019                           pclath	equ	0xFFA
  9020                           tblptru	equ	0xFF8
  9021                           tblptrh	equ	0xFF7
  9022                           tblptrl	equ	0xFF6
  9023                           tablat	equ	0xFF5
  9024                           prodh	equ	0xFF4
  9025                           prodl	equ	0xFF3
  9026                           intcon	equ	0xFF2
  9027                           intcon2	equ	0xFF1
  9028                           postinc0	equ	0xFEE
  9029                           wreg	equ	0xFE8
  9030                           indf1	equ	0xFE7
  9031                           postdec1	equ	0xFE5
  9032                           fsr1h	equ	0xFE2
  9033                           fsr1l	equ	0xFE1
  9034                           indf2	equ	0xFDF
  9035                           postinc2	equ	0xFDE
  9036                           postdec2	equ	0xFDD
  9037                           fsr2h	equ	0xFDA
  9038                           fsr2l	equ	0xFD9
  9039                           status	equ	0xFD8
  9040                           
  9041 ;; *************** function _WriteUartMessage *****************
  9042 ;; Defined at:
  9043 ;;		line 158 in file "EusartApp.c"
  9044 ;; Parameters:    Size  Location     Type
  9045 ;;  dataBuf         2   24[COMRAM] PTR unsigned char 
  9046 ;;		 -> GetMcuRunTime@TxMsg(9), GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), FlashReadCondition@TxMsg(9), 
  9047 ;;		 -> FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), 
  9048 ;;  dataSize        2   26[COMRAM] int 
  9049 ;; Auto vars:     Size  Location     Type
  9050 ;;  idx             2   29[COMRAM] int 
  9051 ;; Return value:  Size  Location     Type
  9052 ;;                  1    wreg      void 
  9053 ;; Registers used:
  9054 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9055 ;; Tracked objects:
  9056 ;;		On entry : 0/0
  9057 ;;		On exit  : 0/0
  9058 ;;		Unchanged: 0/0
  9059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9060 ;;      Params:         4       0       0       0       0       0       0
  9061 ;;      Locals:         2       0       0       0       0       0       0
  9062 ;;      Temps:          1       0       0       0       0       0       0
  9063 ;;      Totals:         7       0       0       0       0       0       0
  9064 ;;Total ram usage:        7 bytes
  9065 ;; Hardware stack levels used:    1
  9066 ;; Hardware stack levels required when called:    4
  9067 ;; This function calls:
  9068 ;;		_EUSART1_Write
  9069 ;; This function is called by:
  9070 ;;		_SendAckMessage
  9071 ;;		_FlashReadUart
  9072 ;;		_FlashReadCondition
  9073 ;;		_GetMcuFwVersion
  9074 ;;		_GetCpldFwVersion
  9075 ;;		_GetMcuRunTime
  9076 ;; This function uses a non-reentrant model
  9077 ;;
  9078                           
  9079                           	psect	text61
  9080  0032D2                     __ptext61:
  9081                           	opt stack 0
  9082  0032D2                     _WriteUartMessage:
  9083                           	opt stack 22
  9084                           
  9085                           ;EusartApp.c: 160: for(int idx = 0; idx < dataSize; idx++)
  9086                           
  9087                           ;incstack = 0
  9088  0032D2  0E00               	movlw	0
  9089  0032D4  6E1F               	movwf	WriteUartMessage@idx+1,c
  9090  0032D6  0E00               	movlw	0
  9091  0032D8  6E1E               	movwf	WriteUartMessage@idx,c
  9092  0032DA  D00B               	goto	l204
  9093  0032DC                     
  9094                           ;EusartApp.c: 161: {
  9095                           ;EusartApp.c: 162: EUSART1_Write(dataBuf[idx]);
  9096  0032DC  501E               	movf	WriteUartMessage@idx,w,c
  9097  0032DE  2419               	addwf	WriteUartMessage@dataBuf,w,c
  9098  0032E0  6ED9               	movwf	fsr2l,c
  9099  0032E2  501F               	movf	WriteUartMessage@idx+1,w,c
  9100  0032E4  201A               	addwfc	WriteUartMessage@dataBuf+1,w,c
  9101  0032E6  6EDA               	movwf	fsr2h,c
  9102  0032E8  50DF               	movf	indf2,w,c
  9103  0032EA  EC6B  F018         	call	_EUSART1_Write
  9104  0032EE  4A1E               	infsnz	WriteUartMessage@idx,f,c
  9105  0032F0  2A1F               	incf	WriteUartMessage@idx+1,f,c
  9106  0032F2                     l204:
  9107  0032F2  501B               	movf	WriteUartMessage@dataSize,w,c
  9108  0032F4  5C1E               	subwf	WriteUartMessage@idx,w,c
  9109  0032F6  501F               	movf	WriteUartMessage@idx+1,w,c
  9110  0032F8  0A80               	xorlw	128
  9111  0032FA  6E1D               	movwf	??_WriteUartMessage& (0+255),c
  9112  0032FC  501C               	movf	WriteUartMessage@dataSize+1,w,c
  9113  0032FE  0A80               	xorlw	128
  9114  003300  581D               	subwfb	??_WriteUartMessage& (0+255),w,c
  9115  003302  B0D8               	btfsc	status,0,c
  9116  003304  0012               	return	
  9117  003306  D7EA               	goto	l205
  9118  003308                     __end_of_WriteUartMessage:
  9119                           	opt stack 0
  9120                           tosu	equ	0xFFF
  9121                           tosh	equ	0xFFE
  9122                           tosl	equ	0xFFD
  9123                           pclath	equ	0xFFA
  9124                           tblptru	equ	0xFF8
  9125                           tblptrh	equ	0xFF7
  9126                           tblptrl	equ	0xFF6
  9127                           tablat	equ	0xFF5
  9128                           prodh	equ	0xFF4
  9129                           prodl	equ	0xFF3
  9130                           intcon	equ	0xFF2
  9131                           intcon2	equ	0xFF1
  9132                           postinc0	equ	0xFEE
  9133                           wreg	equ	0xFE8
  9134                           indf1	equ	0xFE7
  9135                           postdec1	equ	0xFE5
  9136                           fsr1h	equ	0xFE2
  9137                           fsr1l	equ	0xFE1
  9138                           indf2	equ	0xFDF
  9139                           postinc2	equ	0xFDE
  9140                           postdec2	equ	0xFDD
  9141                           fsr2h	equ	0xFDA
  9142                           fsr2l	equ	0xFD9
  9143                           status	equ	0xFD8
  9144                           
  9145 ;; *************** function _EUSART1_Write *****************
  9146 ;; Defined at:
  9147 ;;		line 157 in file "mcc_generated_files/eusart1.c"
  9148 ;; Parameters:    Size  Location     Type
  9149 ;;  txData          1    wreg     unsigned char 
  9150 ;; Auto vars:     Size  Location     Type
  9151 ;;  txData          1   23[COMRAM] unsigned char 
  9152 ;; Return value:  Size  Location     Type
  9153 ;;                  1    wreg      void 
  9154 ;; Registers used:
  9155 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9156 ;; Tracked objects:
  9157 ;;		On entry : 0/0
  9158 ;;		On exit  : 0/0
  9159 ;;		Unchanged: 0/0
  9160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9161 ;;      Params:         0       0       0       0       0       0       0
  9162 ;;      Locals:         1       0       0       0       0       0       0
  9163 ;;      Temps:          0       0       0       0       0       0       0
  9164 ;;      Totals:         1       0       0       0       0       0       0
  9165 ;;Total ram usage:        1 bytes
  9166 ;; Hardware stack levels used:    1
  9167 ;; Hardware stack levels required when called:    3
  9168 ;; This function calls:
  9169 ;;		Nothing
  9170 ;; This function is called by:
  9171 ;;		_WriteUartMessage
  9172 ;; This function uses a non-reentrant model
  9173 ;;
  9174                           
  9175                           	psect	text62
  9176  0030D6                     __ptext62:
  9177                           	opt stack 0
  9178  0030D6                     _EUSART1_Write:
  9179                           	opt stack 22
  9180                           
  9181                           ;incstack = 0
  9182                           ;EUSART1_Write@txData stored from wreg
  9183  0030D6  6E18               	movwf	EUSART1_Write@txData,c
  9184  0030D8                     
  9185                           ;eusart1.c: 160: {
  9186                           
  9187                           ;eusart1.c: 159: while(0 == eusart1TxBufferRemaining)
  9188  0030D8  0100               	movlb	0	; () banked
  9189  0030DA  51FF               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
  9190  0030DC  B4D8               	btfsc	status,2,c
  9191  0030DE  D7FC               	goto	l6374
  9192                           
  9193                           ; BSR set to: 0
  9194                           ;eusart1.c: 161: }
  9195                           ;eusart1.c: 163: if(0 == PIE1bits.TX1IE)
  9196  0030E0  B89D               	btfsc	3997,4,c	;volatile
  9197  0030E2  D003               	goto	l821
  9198                           
  9199                           ; BSR set to: 0
  9200                           ;eusart1.c: 164: {
  9201                           ;eusart1.c: 165: TXREG1 = txData;
  9202  0030E4  C018  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  9203                           
  9204                           ;eusart1.c: 166: }
  9205  0030E8  D012               	goto	l822
  9206  0030EA                     l821:
  9207                           
  9208                           ; BSR set to: 0
  9209                           ;eusart1.c: 167: else
  9210                           ;eusart1.c: 168: {
  9211                           ;eusart1.c: 169: PIE1bits.TX1IE = 0;
  9212  0030EA  989D               	bcf	3997,4,c	;volatile
  9213                           
  9214                           ; BSR set to: 0
  9215                           ;eusart1.c: 170: eusart1TxBuffer[eusart1TxHead++] = txData;
  9216  0030EC  503A               	movf	_eusart1TxHead,w,c	;volatile
  9217  0030EE  0D01               	mullw	1
  9218  0030F0  0E00               	movlw	low _eusart1TxBuffer
  9219  0030F2  24F3               	addwf	prodl,w,c
  9220  0030F4  6ED9               	movwf	fsr2l,c
  9221  0030F6  0E01               	movlw	high _eusart1TxBuffer
  9222  0030F8  20F4               	addwfc	prodh,w,c
  9223  0030FA  6EDA               	movwf	fsr2h,c
  9224  0030FC  C018  FFDF         	movff	EUSART1_Write@txData,indf2
  9225                           
  9226                           ; BSR set to: 0
  9227  003100  2A3A               	incf	_eusart1TxHead,f,c	;volatile
  9228                           
  9229                           ; BSR set to: 0
  9230                           ;eusart1.c: 171: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  9231  003102  0E45               	movlw	69
  9232  003104  643A               	cpfsgt	_eusart1TxHead,c	;volatile
  9233  003106  D002               	goto	l823
  9234                           
  9235                           ; BSR set to: 0
  9236                           ;eusart1.c: 172: {
  9237                           ;eusart1.c: 173: eusart1TxHead = 0;
  9238  003108  0E00               	movlw	0
  9239  00310A  6E3A               	movwf	_eusart1TxHead,c	;volatile
  9240  00310C                     l823:
  9241                           
  9242                           ; BSR set to: 0
  9243                           ;eusart1.c: 174: }
  9244                           ;eusart1.c: 175: eusart1TxBufferRemaining--;
  9245                           
  9246                           ; BSR set to: 0
  9247  00310C  07FF               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
  9248  00310E                     l822:
  9249                           
  9250                           ; BSR set to: 0
  9251                           ;eusart1.c: 176: }
  9252                           ;eusart1.c: 177: PIE1bits.TX1IE = 1;
  9253                           
  9254                           ; BSR set to: 0
  9255  00310E  889D               	bsf	3997,4,c	;volatile
  9256                           
  9257                           ; BSR set to: 0
  9258  003110  0012               	return		;funcret
  9259  003112                     __end_of_EUSART1_Write:
  9260                           	opt stack 0
  9261                           tosu	equ	0xFFF
  9262                           tosh	equ	0xFFE
  9263                           tosl	equ	0xFFD
  9264                           pclath	equ	0xFFA
  9265                           tblptru	equ	0xFF8
  9266                           tblptrh	equ	0xFF7
  9267                           tblptrl	equ	0xFF6
  9268                           tablat	equ	0xFF5
  9269                           prodh	equ	0xFF4
  9270                           prodl	equ	0xFF3
  9271                           intcon	equ	0xFF2
  9272                           intcon2	equ	0xFF1
  9273                           postinc0	equ	0xFEE
  9274                           wreg	equ	0xFE8
  9275                           indf1	equ	0xFE7
  9276                           postdec1	equ	0xFE5
  9277                           fsr1h	equ	0xFE2
  9278                           fsr1l	equ	0xFE1
  9279                           indf2	equ	0xFDF
  9280                           postinc2	equ	0xFDE
  9281                           postdec2	equ	0xFDD
  9282                           fsr2h	equ	0xFDA
  9283                           fsr2l	equ	0xFD9
  9284                           status	equ	0xFD8
  9285                           
  9286 ;; *************** function _InitSystemApplicationManagers *****************
  9287 ;; Defined at:
  9288 ;;		line 33 in file "SystemSettings.c"
  9289 ;; Parameters:    Size  Location     Type
  9290 ;;		None
  9291 ;; Auto vars:     Size  Location     Type
  9292 ;;		None
  9293 ;; Return value:  Size  Location     Type
  9294 ;;                  1    wreg      void 
  9295 ;; Registers used:
  9296 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9297 ;; Tracked objects:
  9298 ;;		On entry : 0/0
  9299 ;;		On exit  : 0/0
  9300 ;;		Unchanged: 0/0
  9301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9302 ;;      Params:         0       0       0       0       0       0       0
  9303 ;;      Locals:         0       0       0       0       0       0       0
  9304 ;;      Temps:          0       0       0       0       0       0       0
  9305 ;;      Totals:         0       0       0       0       0       0       0
  9306 ;;Total ram usage:        0 bytes
  9307 ;; Hardware stack levels used:    1
  9308 ;; Hardware stack levels required when called:    7
  9309 ;; This function calls:
  9310 ;;		_ClearMcuRunTime
  9311 ;;		_DacInit
  9312 ;;		_InitAdcApplicationMgr
  9313 ;;		_InitSevenSegment
  9314 ;;		_PLLInitialize
  9315 ;;		_TMR0_StartTimer
  9316 ;; This function is called by:
  9317 ;;		_main
  9318 ;; This function uses a non-reentrant model
  9319 ;;
  9320                           
  9321                           	psect	text63
  9322  00360C                     __ptext63:
  9323                           	opt stack 0
  9324  00360C                     _InitSystemApplicationManagers:
  9325                           	opt stack 23
  9326                           
  9327                           ;SystemSettings.c: 36: InitAdcApplicationMgr();
  9328                           
  9329                           ; BSR set to: 0
  9330                           ;incstack = 0
  9331  00360C  EC6E  F01B         	call	_InitAdcApplicationMgr	;wreg free
  9332                           
  9333                           ;SystemSettings.c: 39: TMR0_StartTimer();
  9334  003610  ECAD  F01B         	call	_TMR0_StartTimer	;wreg free
  9335                           
  9336                           ;SystemSettings.c: 42: InitSevenSegment();
  9337  003614  EC64  F01A         	call	_InitSevenSegment	;wreg free
  9338                           
  9339                           ;SystemSettings.c: 45: PLLInitialize();
  9340  003618  EC1C  F005         	call	_PLLInitialize	;wreg free
  9341                           
  9342                           ;SystemSettings.c: 48: ClearMcuRunTime();
  9343  00361C  EC3E  F01B         	call	_ClearMcuRunTime	;wreg free
  9344                           
  9345                           ;SystemSettings.c: 51: DacInit();
  9346  003620  EC27  F014         	call	_DacInit	;wreg free
  9347  003624  0012               	return		;funcret
  9348  003626                     __end_of_InitSystemApplicationManagers:
  9349                           	opt stack 0
  9350                           tosu	equ	0xFFF
  9351                           tosh	equ	0xFFE
  9352                           tosl	equ	0xFFD
  9353                           pclath	equ	0xFFA
  9354                           tblptru	equ	0xFF8
  9355                           tblptrh	equ	0xFF7
  9356                           tblptrl	equ	0xFF6
  9357                           tablat	equ	0xFF5
  9358                           prodh	equ	0xFF4
  9359                           prodl	equ	0xFF3
  9360                           intcon	equ	0xFF2
  9361                           intcon2	equ	0xFF1
  9362                           postinc0	equ	0xFEE
  9363                           wreg	equ	0xFE8
  9364                           indf1	equ	0xFE7
  9365                           postdec1	equ	0xFE5
  9366                           fsr1h	equ	0xFE2
  9367                           fsr1l	equ	0xFE1
  9368                           indf2	equ	0xFDF
  9369                           postinc2	equ	0xFDE
  9370                           postdec2	equ	0xFDD
  9371                           fsr2h	equ	0xFDA
  9372                           fsr2l	equ	0xFD9
  9373                           status	equ	0xFD8
  9374                           
  9375 ;; *************** function _TMR0_StartTimer *****************
  9376 ;; Defined at:
  9377 ;;		line 93 in file "mcc_generated_files/tmr0.c"
  9378 ;; Parameters:    Size  Location     Type
  9379 ;;		None
  9380 ;; Auto vars:     Size  Location     Type
  9381 ;;		None
  9382 ;; Return value:  Size  Location     Type
  9383 ;;                  1    wreg      void 
  9384 ;; Registers used:
  9385 ;;		None
  9386 ;; Tracked objects:
  9387 ;;		On entry : 0/0
  9388 ;;		On exit  : 0/0
  9389 ;;		Unchanged: 0/0
  9390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9391 ;;      Params:         0       0       0       0       0       0       0
  9392 ;;      Locals:         0       0       0       0       0       0       0
  9393 ;;      Temps:          0       0       0       0       0       0       0
  9394 ;;      Totals:         0       0       0       0       0       0       0
  9395 ;;Total ram usage:        0 bytes
  9396 ;; Hardware stack levels used:    1
  9397 ;; Hardware stack levels required when called:    3
  9398 ;; This function calls:
  9399 ;;		Nothing
  9400 ;; This function is called by:
  9401 ;;		_InitSystemApplicationManagers
  9402 ;; This function uses a non-reentrant model
  9403 ;;
  9404                           
  9405                           	psect	text64
  9406  00375A                     __ptext64:
  9407                           	opt stack 0
  9408  00375A                     _TMR0_StartTimer:
  9409                           	opt stack 26
  9410                           
  9411                           ;tmr0.c: 96: T0CONbits.TMR0ON = 1;
  9412                           
  9413                           ;incstack = 0
  9414  00375A  8ED5               	bsf	4053,7,c	;volatile
  9415  00375C  0012               	return		;funcret
  9416  00375E                     __end_of_TMR0_StartTimer:
  9417                           	opt stack 0
  9418                           tosu	equ	0xFFF
  9419                           tosh	equ	0xFFE
  9420                           tosl	equ	0xFFD
  9421                           pclath	equ	0xFFA
  9422                           tblptru	equ	0xFF8
  9423                           tblptrh	equ	0xFF7
  9424                           tblptrl	equ	0xFF6
  9425                           tablat	equ	0xFF5
  9426                           prodh	equ	0xFF4
  9427                           prodl	equ	0xFF3
  9428                           intcon	equ	0xFF2
  9429                           intcon2	equ	0xFF1
  9430                           postinc0	equ	0xFEE
  9431                           wreg	equ	0xFE8
  9432                           indf1	equ	0xFE7
  9433                           postdec1	equ	0xFE5
  9434                           fsr1h	equ	0xFE2
  9435                           fsr1l	equ	0xFE1
  9436                           indf2	equ	0xFDF
  9437                           postinc2	equ	0xFDE
  9438                           postdec2	equ	0xFDD
  9439                           fsr2h	equ	0xFDA
  9440                           fsr2l	equ	0xFD9
  9441                           status	equ	0xFD8
  9442                           
  9443 ;; *************** function _PLLInitialize *****************
  9444 ;; Defined at:
  9445 ;;		line 14 in file "SyntApp.c"
  9446 ;; Parameters:    Size  Location     Type
  9447 ;;		None
  9448 ;; Auto vars:     Size  Location     Type
  9449 ;;  idx             2   45[COMRAM] int 
  9450 ;;  idx             2   43[COMRAM] int 
  9451 ;; Return value:  Size  Location     Type
  9452 ;;                  1    wreg      void 
  9453 ;; Registers used:
  9454 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9455 ;; Tracked objects:
  9456 ;;		On entry : 0/0
  9457 ;;		On exit  : 0/0
  9458 ;;		Unchanged: 0/0
  9459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9460 ;;      Params:         0       0       0       0       0       0       0
  9461 ;;      Locals:         4       0       0       0       0       0       0
  9462 ;;      Temps:          2       0       0       0       0       0       0
  9463 ;;      Totals:         6       0       0       0       0       0       0
  9464 ;;Total ram usage:        6 bytes
  9465 ;; Hardware stack levels used:    1
  9466 ;; Hardware stack levels required when called:    6
  9467 ;; This function calls:
  9468 ;;		_SWSPI_send_word
  9469 ;;		_SwSpi_Set_CE_Pin
  9470 ;; This function is called by:
  9471 ;;		_InitSystemApplicationManagers
  9472 ;; This function uses a non-reentrant model
  9473 ;;
  9474                           
  9475                           	psect	text65
  9476  000A38                     __ptext65:
  9477                           	opt stack 0
  9478  000A38                     _PLLInitialize:
  9479                           	opt stack 23
  9480                           
  9481                           ;SyntApp.c: 17: IOCB = 0b10000000;
  9482                           
  9483                           ;incstack = 0
  9484  000A38  0E80               	movlw	128
  9485  000A3A  6E62               	movwf	3938,c	;volatile
  9486                           
  9487                           ;SyntApp.c: 20: SwSpi_Set_CE_Pin(SYNTH_TX, 1);
  9488  000A3C  0E01               	movlw	1
  9489  000A3E  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  9490  000A40  0E00               	movlw	0
  9491  000A42  EC89  F018         	call	_SwSpi_Set_CE_Pin
  9492                           
  9493                           ;SyntApp.c: 24: for(int idx = 0; idx < 13; idx++)
  9494  000A46  0E00               	movlw	0
  9495  000A48  6E2D               	movwf	PLLInitialize@idx+1,c
  9496  000A4A  0E00               	movlw	0
  9497  000A4C  6E2C               	movwf	PLLInitialize@idx,c
  9498  000A4E                     l7608:
  9499  000A4E  BE2D               	btfsc	PLLInitialize@idx+1,7,c
  9500  000A50  D006               	goto	l486
  9501  000A52  502D               	movf	PLLInitialize@idx+1,w,c
  9502  000A54  E128               	bnz	l7618
  9503  000A56  0E0D               	movlw	13
  9504  000A58  5C2C               	subwf	PLLInitialize@idx,w,c
  9505  000A5A  B0D8               	btfsc	status,0,c
  9506  000A5C  D024               	goto	u7610
  9507  000A5E                     l486:
  9508                           
  9509                           ;SyntApp.c: 25: {
  9510                           ;SyntApp.c: 26: SWSPI_send_word(SYNTH_TX, PLL_INIT_REGISTERS[idx], 3);
  9511  000A5E  C02C  F02A         	movff	PLLInitialize@idx,??_PLLInitialize
  9512  000A62  C02D  F02B         	movff	PLLInitialize@idx+1,??_PLLInitialize+1
  9513  000A66  90D8               	bcf	status,0,c
  9514  000A68  362A               	rlcf	??_PLLInitialize,f,c
  9515  000A6A  362B               	rlcf	??_PLLInitialize+1,f,c
  9516  000A6C  90D8               	bcf	status,0,c
  9517  000A6E  362A               	rlcf	??_PLLInitialize,f,c
  9518  000A70  362B               	rlcf	??_PLLInitialize+1,f,c
  9519  000A72  0E01               	movlw	low _PLL_INIT_REGISTERS
  9520  000A74  242A               	addwf	??_PLLInitialize,w,c
  9521  000A76  6EF6               	movwf	tblptrl,c
  9522  000A78  0E06               	movlw	high _PLL_INIT_REGISTERS
  9523  000A7A  202B               	addwfc	??_PLLInitialize+1,w,c
  9524  000A7C  6EF7               	movwf	tblptrh,c
  9525  000A7E                     	if	0	;There are less than 3 active tblptr bytes
  9526  000A7E                     	endif
  9527  000A7E  0009               	tblrd		*+
  9528  000A80  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  9529  000A84  0009               	tblrd		*+
  9530  000A86  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  9531  000A8A  0009               	tblrd		*+
  9532  000A8C  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  9533  000A90  000A               	tblrd		*-
  9534  000A92  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  9535  000A96  0E03               	movlw	3
  9536  000A98  6E25               	movwf	SWSPI_send_word@dataSize,c
  9537  000A9A  0E00               	movlw	0
  9538  000A9C  EC8C  F011         	call	_SWSPI_send_word
  9539  000AA0  4A2C               	infsnz	PLLInitialize@idx,f,c
  9540  000AA2  2A2D               	incf	PLLInitialize@idx+1,f,c
  9541  000AA4  D7D4               	goto	l7608
  9542  000AA6                     u7610:
  9543  000AA6                     l7618:
  9544                           
  9545                           ;SyntApp.c: 27: }
  9546                           ;SyntApp.c: 30: SWSPI_send_word(SYNTH_TX, PLL_INIT_REGISTERS[4], 3);
  9547  000AA6  0E11               	movlw	low (_PLL_INIT_REGISTERS+16)
  9548  000AA8  6EF6               	movwf	tblptrl,c
  9549  000AAA  0E06               	movlw	high (_PLL_INIT_REGISTERS+16)
  9550  000AAC  6EF7               	movwf	tblptrh,c
  9551  000AAE                     	if	0	;tblptru may be non-zero
  9552  000AAE                     	endif
  9553  000AAE                     	if	0	;tblptru may be non-zero
  9554  000AAE                     	endif
  9555  000AAE  0009               	tblrd		*+
  9556  000AB0  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  9557  000AB4  0009               	tblrd		*+
  9558  000AB6  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  9559  000ABA  0009               	tblrd		*+
  9560  000ABC  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  9561  000AC0  000A               	tblrd		*-
  9562  000AC2  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  9563  000AC6  0E03               	movlw	3
  9564  000AC8  6E25               	movwf	SWSPI_send_word@dataSize,c
  9565  000ACA  0E00               	movlw	0
  9566  000ACC  EC8C  F011         	call	_SWSPI_send_word
  9567                           
  9568                           ;SyntApp.c: 31: SWSPI_send_word(SYNTH_TX, PLL_INIT_REGISTERS[2], 3);
  9569  000AD0  0E09               	movlw	low (_PLL_INIT_REGISTERS+8)
  9570  000AD2  6EF6               	movwf	tblptrl,c
  9571  000AD4  0E06               	movlw	high (_PLL_INIT_REGISTERS+8)
  9572  000AD6  6EF7               	movwf	tblptrh,c
  9573  000AD8                     	if	0	;tblptru may be non-zero
  9574  000AD8                     	endif
  9575  000AD8                     	if	0	;tblptru may be non-zero
  9576  000AD8                     	endif
  9577  000AD8  0009               	tblrd		*+
  9578  000ADA  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  9579  000ADE  0009               	tblrd		*+
  9580  000AE0  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  9581  000AE4  0009               	tblrd		*+
  9582  000AE6  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  9583  000AEA  000A               	tblrd		*-
  9584  000AEC  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  9585  000AF0  0E03               	movlw	3
  9586  000AF2  6E25               	movwf	SWSPI_send_word@dataSize,c
  9587  000AF4  0E00               	movlw	0
  9588  000AF6  EC8C  F011         	call	_SWSPI_send_word
  9589                           
  9590                           ;SyntApp.c: 32: SWSPI_send_word(SYNTH_TX, PLL_INIT_REGISTERS[1], 3);
  9591  000AFA  0E05               	movlw	low (_PLL_INIT_REGISTERS+4)
  9592  000AFC  6EF6               	movwf	tblptrl,c
  9593  000AFE  0E06               	movlw	high (_PLL_INIT_REGISTERS+4)
  9594  000B00  6EF7               	movwf	tblptrh,c
  9595  000B02                     	if	0	;tblptru may be non-zero
  9596  000B02                     	endif
  9597  000B02                     	if	0	;tblptru may be non-zero
  9598  000B02                     	endif
  9599  000B02  0009               	tblrd		*+
  9600  000B04  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  9601  000B08  0009               	tblrd		*+
  9602  000B0A  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  9603  000B0E  0009               	tblrd		*+
  9604  000B10  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  9605  000B14  000A               	tblrd		*-
  9606  000B16  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  9607  000B1A  0E03               	movlw	3
  9608  000B1C  6E25               	movwf	SWSPI_send_word@dataSize,c
  9609  000B1E  0E00               	movlw	0
  9610  000B20  EC8C  F011         	call	_SWSPI_send_word
  9611                           
  9612                           ;SyntApp.c: 33: SWSPI_send_word(SYNTH_TX, PLL_INIT_REGISTERS[0], 3);
  9613  000B24  0E01               	movlw	low _PLL_INIT_REGISTERS
  9614  000B26  6EF6               	movwf	tblptrl,c
  9615  000B28                     	if	1	;There is more than 1 active tblptr byte
  9616  000B28  0E06               	movlw	high _PLL_INIT_REGISTERS
  9617  000B2A  6EF7               	movwf	tblptrh,c
  9618  000B2C                     	endif
  9619  000B2C                     	if	0	;There are less than 3 active tblptr bytes
  9620  000B2C                     	endif
  9621  000B2C  0009               	tblrd		*+
  9622  000B2E  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  9623  000B32  0009               	tblrd		*+
  9624  000B34  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  9625  000B38  0009               	tblrd		*+
  9626  000B3A  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  9627  000B3E  000A               	tblrd		*-
  9628  000B40  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  9629  000B44  0E03               	movlw	3
  9630  000B46  6E25               	movwf	SWSPI_send_word@dataSize,c
  9631  000B48  0E00               	movlw	0
  9632  000B4A  EC8C  F011         	call	_SWSPI_send_word
  9633                           
  9634                           ;SyntApp.c: 36: SwSpi_Set_CE_Pin(SYNTH_RX, 1);
  9635  000B4E  0E01               	movlw	1
  9636  000B50  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  9637  000B52  0E01               	movlw	1
  9638  000B54  EC89  F018         	call	_SwSpi_Set_CE_Pin
  9639                           
  9640                           ;SyntApp.c: 39: for(int idx = 0; idx < 13; idx++)
  9641  000B58  0E00               	movlw	0
  9642  000B5A  6E2F               	movwf	PLLInitialize@idx_805+1,c
  9643  000B5C  0E00               	movlw	0
  9644  000B5E  6E2E               	movwf	PLLInitialize@idx_805,c
  9645  000B60                     l7624:
  9646  000B60  BE2F               	btfsc	PLLInitialize@idx_805+1,7,c
  9647  000B62  D006               	goto	l488
  9648  000B64  502F               	movf	PLLInitialize@idx_805+1,w,c
  9649  000B66  E128               	bnz	l7634
  9650  000B68  0E0D               	movlw	13
  9651  000B6A  5C2E               	subwf	PLLInitialize@idx_805,w,c
  9652  000B6C  B0D8               	btfsc	status,0,c
  9653  000B6E  D024               	goto	u7630
  9654  000B70                     l488:
  9655                           
  9656                           ;SyntApp.c: 40: {
  9657                           ;SyntApp.c: 41: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[idx], 3);
  9658  000B70  C02E  F02A         	movff	PLLInitialize@idx_805,??_PLLInitialize
  9659  000B74  C02F  F02B         	movff	PLLInitialize@idx_805+1,??_PLLInitialize+1
  9660  000B78  90D8               	bcf	status,0,c
  9661  000B7A  362A               	rlcf	??_PLLInitialize,f,c
  9662  000B7C  362B               	rlcf	??_PLLInitialize+1,f,c
  9663  000B7E  90D8               	bcf	status,0,c
  9664  000B80  362A               	rlcf	??_PLLInitialize,f,c
  9665  000B82  362B               	rlcf	??_PLLInitialize+1,f,c
  9666  000B84  0E01               	movlw	low _PLL_INIT_REGISTERS
  9667  000B86  242A               	addwf	??_PLLInitialize,w,c
  9668  000B88  6EF6               	movwf	tblptrl,c
  9669  000B8A  0E06               	movlw	high _PLL_INIT_REGISTERS
  9670  000B8C  202B               	addwfc	??_PLLInitialize+1,w,c
  9671  000B8E  6EF7               	movwf	tblptrh,c
  9672  000B90                     	if	0	;There are less than 3 active tblptr bytes
  9673  000B90                     	endif
  9674  000B90  0009               	tblrd		*+
  9675  000B92  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  9676  000B96  0009               	tblrd		*+
  9677  000B98  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  9678  000B9C  0009               	tblrd		*+
  9679  000B9E  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  9680  000BA2  000A               	tblrd		*-
  9681  000BA4  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  9682  000BA8  0E03               	movlw	3
  9683  000BAA  6E25               	movwf	SWSPI_send_word@dataSize,c
  9684  000BAC  0E01               	movlw	1
  9685  000BAE  EC8C  F011         	call	_SWSPI_send_word
  9686  000BB2  4A2E               	infsnz	PLLInitialize@idx_805,f,c
  9687  000BB4  2A2F               	incf	PLLInitialize@idx_805+1,f,c
  9688  000BB6  D7D4               	goto	l7624
  9689  000BB8                     u7630:
  9690  000BB8                     l7634:
  9691                           
  9692                           ;SyntApp.c: 42: }
  9693                           ;SyntApp.c: 45: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[4], 3);
  9694  000BB8  0E11               	movlw	low (_PLL_INIT_REGISTERS+16)
  9695  000BBA  6EF6               	movwf	tblptrl,c
  9696  000BBC  0E06               	movlw	high (_PLL_INIT_REGISTERS+16)
  9697  000BBE  6EF7               	movwf	tblptrh,c
  9698  000BC0                     	if	0	;tblptru may be non-zero
  9699  000BC0                     	endif
  9700  000BC0                     	if	0	;tblptru may be non-zero
  9701  000BC0                     	endif
  9702  000BC0  0009               	tblrd		*+
  9703  000BC2  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  9704  000BC6  0009               	tblrd		*+
  9705  000BC8  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  9706  000BCC  0009               	tblrd		*+
  9707  000BCE  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  9708  000BD2  000A               	tblrd		*-
  9709  000BD4  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  9710  000BD8  0E03               	movlw	3
  9711  000BDA  6E25               	movwf	SWSPI_send_word@dataSize,c
  9712  000BDC  0E01               	movlw	1
  9713  000BDE  EC8C  F011         	call	_SWSPI_send_word
  9714                           
  9715                           ;SyntApp.c: 46: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[2], 3);
  9716  000BE2  0E09               	movlw	low (_PLL_INIT_REGISTERS+8)
  9717  000BE4  6EF6               	movwf	tblptrl,c
  9718  000BE6  0E06               	movlw	high (_PLL_INIT_REGISTERS+8)
  9719  000BE8  6EF7               	movwf	tblptrh,c
  9720  000BEA                     	if	0	;tblptru may be non-zero
  9721  000BEA                     	endif
  9722  000BEA                     	if	0	;tblptru may be non-zero
  9723  000BEA                     	endif
  9724  000BEA  0009               	tblrd		*+
  9725  000BEC  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  9726  000BF0  0009               	tblrd		*+
  9727  000BF2  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  9728  000BF6  0009               	tblrd		*+
  9729  000BF8  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  9730  000BFC  000A               	tblrd		*-
  9731  000BFE  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  9732  000C02  0E03               	movlw	3
  9733  000C04  6E25               	movwf	SWSPI_send_word@dataSize,c
  9734  000C06  0E01               	movlw	1
  9735  000C08  EC8C  F011         	call	_SWSPI_send_word
  9736                           
  9737                           ;SyntApp.c: 47: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[1], 3);
  9738  000C0C  0E05               	movlw	low (_PLL_INIT_REGISTERS+4)
  9739  000C0E  6EF6               	movwf	tblptrl,c
  9740  000C10  0E06               	movlw	high (_PLL_INIT_REGISTERS+4)
  9741  000C12  6EF7               	movwf	tblptrh,c
  9742  000C14                     	if	0	;tblptru may be non-zero
  9743  000C14                     	endif
  9744  000C14                     	if	0	;tblptru may be non-zero
  9745  000C14                     	endif
  9746  000C14  0009               	tblrd		*+
  9747  000C16  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  9748  000C1A  0009               	tblrd		*+
  9749  000C1C  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  9750  000C20  0009               	tblrd		*+
  9751  000C22  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  9752  000C26  000A               	tblrd		*-
  9753  000C28  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  9754  000C2C  0E03               	movlw	3
  9755  000C2E  6E25               	movwf	SWSPI_send_word@dataSize,c
  9756  000C30  0E01               	movlw	1
  9757  000C32  EC8C  F011         	call	_SWSPI_send_word
  9758                           
  9759                           ;SyntApp.c: 48: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[0], 3);
  9760  000C36  0E01               	movlw	low _PLL_INIT_REGISTERS
  9761  000C38  6EF6               	movwf	tblptrl,c
  9762  000C3A                     	if	1	;There is more than 1 active tblptr byte
  9763  000C3A  0E06               	movlw	high _PLL_INIT_REGISTERS
  9764  000C3C  6EF7               	movwf	tblptrh,c
  9765  000C3E                     	endif
  9766  000C3E                     	if	0	;There are less than 3 active tblptr bytes
  9767  000C3E                     	endif
  9768  000C3E  0009               	tblrd		*+
  9769  000C40  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  9770  000C44  0009               	tblrd		*+
  9771  000C46  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  9772  000C4A  0009               	tblrd		*+
  9773  000C4C  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  9774  000C50  000A               	tblrd		*-
  9775  000C52  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  9776  000C56  0E03               	movlw	3
  9777  000C58  6E25               	movwf	SWSPI_send_word@dataSize,c
  9778  000C5A  0E01               	movlw	1
  9779  000C5C  EC8C  F011         	call	_SWSPI_send_word
  9780  000C60  0012               	return		;funcret
  9781  000C62                     __end_of_PLLInitialize:
  9782                           	opt stack 0
  9783                           tosu	equ	0xFFF
  9784                           tosh	equ	0xFFE
  9785                           tosl	equ	0xFFD
  9786                           pclath	equ	0xFFA
  9787                           tblptru	equ	0xFF8
  9788                           tblptrh	equ	0xFF7
  9789                           tblptrl	equ	0xFF6
  9790                           tablat	equ	0xFF5
  9791                           prodh	equ	0xFF4
  9792                           prodl	equ	0xFF3
  9793                           intcon	equ	0xFF2
  9794                           intcon2	equ	0xFF1
  9795                           postinc0	equ	0xFEE
  9796                           wreg	equ	0xFE8
  9797                           indf1	equ	0xFE7
  9798                           postdec1	equ	0xFE5
  9799                           fsr1h	equ	0xFE2
  9800                           fsr1l	equ	0xFE1
  9801                           indf2	equ	0xFDF
  9802                           postinc2	equ	0xFDE
  9803                           postdec2	equ	0xFDD
  9804                           fsr2h	equ	0xFDA
  9805                           fsr2l	equ	0xFD9
  9806                           status	equ	0xFD8
  9807                           
  9808 ;; *************** function _SwSpi_Set_CE_Pin *****************
  9809 ;; Defined at:
  9810 ;;		line 193 in file "SwSpiApp.c"
  9811 ;; Parameters:    Size  Location     Type
  9812 ;;  phrType         1    wreg     enum E7537
  9813 ;;  cPinMode        1   23[COMRAM] unsigned char 
  9814 ;; Auto vars:     Size  Location     Type
  9815 ;;  phrType         1   24[COMRAM] enum E7537
  9816 ;; Return value:  Size  Location     Type
  9817 ;;                  1    wreg      void 
  9818 ;; Registers used:
  9819 ;;		wreg, status,2, status,0
  9820 ;; Tracked objects:
  9821 ;;		On entry : 0/0
  9822 ;;		On exit  : 0/0
  9823 ;;		Unchanged: 0/0
  9824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9825 ;;      Params:         1       0       0       0       0       0       0
  9826 ;;      Locals:         1       0       0       0       0       0       0
  9827 ;;      Temps:          0       0       0       0       0       0       0
  9828 ;;      Totals:         2       0       0       0       0       0       0
  9829 ;;Total ram usage:        2 bytes
  9830 ;; Hardware stack levels used:    1
  9831 ;; Hardware stack levels required when called:    3
  9832 ;; This function calls:
  9833 ;;		Nothing
  9834 ;; This function is called by:
  9835 ;;		_PLLInitialize
  9836 ;; This function uses a non-reentrant model
  9837 ;;
  9838                           
  9839                           	psect	text66
  9840  003112                     __ptext66:
  9841                           	opt stack 0
  9842  003112                     _SwSpi_Set_CE_Pin:
  9843                           	opt stack 25
  9844                           
  9845                           ;incstack = 0
  9846                           ;SwSpi_Set_CE_Pin@phrType stored from wreg
  9847  003112  6E19               	movwf	SwSpi_Set_CE_Pin@phrType,c
  9848                           
  9849                           ;SwSpiApp.c: 195: switch(phrType)
  9850  003114  D014               	goto	l640
  9851  003116                     
  9852                           ;SwSpiApp.c: 198: if(cPinMode == 1)
  9853  003116  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
  9854  003118  A4D8               	btfss	status,2,c
  9855  00311A  D002               	goto	l642
  9856                           
  9857                           ;SwSpiApp.c: 199: {
  9858                           ;SwSpiApp.c: 200: do { LATCbits.LATC1 = 1; } while(0);
  9859  00311C  828B               	bsf	3979,1,c	;volatile
  9860                           
  9861                           ;SwSpiApp.c: 201: }
  9862  00311E  0012               	return	
  9863  003120                     l642:
  9864                           
  9865                           ;SwSpiApp.c: 202: else if(cPinMode == 0)
  9866  003120  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
  9867  003122  A4D8               	btfss	status,2,c
  9868  003124  0012               	return	
  9869                           
  9870                           ;SwSpiApp.c: 203: {
  9871                           ;SwSpiApp.c: 204: do { LATCbits.LATC1 = 0; } while(0);
  9872  003126  928B               	bcf	3979,1,c	;volatile
  9873                           
  9874                           ;SwSpiApp.c: 205: }
  9875                           ;SwSpiApp.c: 206: break;
  9876  003128  0012               	return	
  9877  00312A                     
  9878                           ;SwSpiApp.c: 209: if(cPinMode == 1)
  9879  00312A  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
  9880  00312C  A4D8               	btfss	status,2,c
  9881  00312E  D002               	goto	l651
  9882                           
  9883                           ;SwSpiApp.c: 210: {
  9884                           ;SwSpiApp.c: 211: do { LATDbits.LATD2 = 1; } while(0);
  9885  003130  848C               	bsf	3980,2,c	;volatile
  9886                           
  9887                           ;SwSpiApp.c: 212: }
  9888  003132  0012               	return	
  9889  003134                     l651:
  9890                           
  9891                           ;SwSpiApp.c: 213: else if(cPinMode == 0)
  9892  003134  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
  9893  003136  A4D8               	btfss	status,2,c
  9894  003138  0012               	return	
  9895                           
  9896                           ;SwSpiApp.c: 214: {
  9897                           ;SwSpiApp.c: 215: do { LATCbits.LATC1 = 0; } while(0);
  9898  00313A  928B               	bcf	3979,1,c	;volatile
  9899                           
  9900                           ;SwSpiApp.c: 218: }
  9901                           
  9902                           ;SwSpiApp.c: 216: }
  9903                           ;SwSpiApp.c: 217: break;
  9904  00313C  0012               	return	
  9905  00313E                     l640:
  9906  00313E  5019               	movf	SwSpi_Set_CE_Pin@phrType,w,c
  9907                           
  9908                           ; Switch size 1, requested type "space"
  9909                           ; Number of cases is 2, Range of values is 0 to 1
  9910                           ; switch strategies available:
  9911                           ; Name         Instructions Cycles
  9912                           ; simple_byte            7     4 (average)
  9913                           ;	Chosen strategy is simple_byte
  9914  003140  0A00               	xorlw	0	; case 0
  9915  003142  B4D8               	btfsc	status,2,c
  9916  003144  D7E8               	goto	l641
  9917  003146  0A01               	xorlw	1	; case 1
  9918  003148  A4D8               	btfss	status,2,c
  9919  00314A  0012               	return	
  9920  00314C  D7EE               	goto	l650
  9921  00314E                     __end_of_SwSpi_Set_CE_Pin:
  9922                           	opt stack 0
  9923                           tosu	equ	0xFFF
  9924                           tosh	equ	0xFFE
  9925                           tosl	equ	0xFFD
  9926                           pclath	equ	0xFFA
  9927                           tblptru	equ	0xFF8
  9928                           tblptrh	equ	0xFF7
  9929                           tblptrl	equ	0xFF6
  9930                           tablat	equ	0xFF5
  9931                           prodh	equ	0xFF4
  9932                           prodl	equ	0xFF3
  9933                           intcon	equ	0xFF2
  9934                           intcon2	equ	0xFF1
  9935                           postinc0	equ	0xFEE
  9936                           wreg	equ	0xFE8
  9937                           indf1	equ	0xFE7
  9938                           postdec1	equ	0xFE5
  9939                           fsr1h	equ	0xFE2
  9940                           fsr1l	equ	0xFE1
  9941                           indf2	equ	0xFDF
  9942                           postinc2	equ	0xFDE
  9943                           postdec2	equ	0xFDD
  9944                           fsr2h	equ	0xFDA
  9945                           fsr2l	equ	0xFD9
  9946                           status	equ	0xFD8
  9947                           
  9948 ;; *************** function _InitSevenSegment *****************
  9949 ;; Defined at:
  9950 ;;		line 14 in file "SevenSegmentApp.c"
  9951 ;; Parameters:    Size  Location     Type
  9952 ;;		None
  9953 ;; Auto vars:     Size  Location     Type
  9954 ;;		None
  9955 ;; Return value:  Size  Location     Type
  9956 ;;                  1    wreg      void 
  9957 ;; Registers used:
  9958 ;;		wreg, status,2
  9959 ;; Tracked objects:
  9960 ;;		On entry : 0/0
  9961 ;;		On exit  : 0/0
  9962 ;;		Unchanged: 0/0
  9963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9964 ;;      Params:         0       0       0       0       0       0       0
  9965 ;;      Locals:         0       0       0       0       0       0       0
  9966 ;;      Temps:          0       0       0       0       0       0       0
  9967 ;;      Totals:         0       0       0       0       0       0       0
  9968 ;;Total ram usage:        0 bytes
  9969 ;; Hardware stack levels used:    1
  9970 ;; Hardware stack levels required when called:    3
  9971 ;; This function calls:
  9972 ;;		Nothing
  9973 ;; This function is called by:
  9974 ;;		_InitSystemApplicationManagers
  9975 ;; This function uses a non-reentrant model
  9976 ;;
  9977                           
  9978                           	psect	text67
  9979  0034C8                     __ptext67:
  9980                           	opt stack 0
  9981  0034C8                     _InitSevenSegment:
  9982                           	opt stack 26
  9983                           
  9984                           ;SevenSegmentApp.c: 16: ANSELA = 0;
  9985                           
  9986                           ;incstack = 0
  9987  0034C8  0E00               	movlw	0
  9988  0034CA  010F               	movlb	15	; () banked
  9989  0034CC  6F38               	movwf	56,b	;volatile
  9990                           
  9991                           ;SevenSegmentApp.c: 17: ANSELD = 0;
  9992  0034CE  0E00               	movlw	0
  9993  0034D0  6F3B               	movwf	59,b	;volatile
  9994                           
  9995                           ;SevenSegmentApp.c: 19: TRISA = 0;
  9996  0034D2  0E00               	movlw	0
  9997  0034D4  6E92               	movwf	3986,c	;volatile
  9998                           
  9999                           ;SevenSegmentApp.c: 20: LATA = 0;
 10000  0034D6  0E00               	movlw	0
 10001  0034D8  6E89               	movwf	3977,c	;volatile
 10002                           
 10003                           ;SevenSegmentApp.c: 21: TRISD = 0;
 10004  0034DA  0E00               	movlw	0
 10005  0034DC  6E95               	movwf	3989,c	;volatile
 10006                           
 10007                           ;SevenSegmentApp.c: 22: LATD = 0;
 10008  0034DE  0E00               	movlw	0
 10009  0034E0  6E8C               	movwf	3980,c	;volatile
 10010                           
 10011                           ;SevenSegmentApp.c: 24: cnt = 1;
 10012  0034E2  0E00               	movlw	0
 10013  0034E4  0100               	movlb	0	; () banked
 10014  0034E6  6FFE               	movwf	(_cnt+1)& (0+255),b
 10015  0034E8  0E01               	movlw	1
 10016  0034EA  6FFD               	movwf	_cnt& (0+255),b
 10017                           
 10018                           ; BSR set to: 0
 10019  0034EC  0012               	return		;funcret
 10020  0034EE                     __end_of_InitSevenSegment:
 10021                           	opt stack 0
 10022                           tosu	equ	0xFFF
 10023                           tosh	equ	0xFFE
 10024                           tosl	equ	0xFFD
 10025                           pclath	equ	0xFFA
 10026                           tblptru	equ	0xFF8
 10027                           tblptrh	equ	0xFF7
 10028                           tblptrl	equ	0xFF6
 10029                           tablat	equ	0xFF5
 10030                           prodh	equ	0xFF4
 10031                           prodl	equ	0xFF3
 10032                           intcon	equ	0xFF2
 10033                           intcon2	equ	0xFF1
 10034                           postinc0	equ	0xFEE
 10035                           wreg	equ	0xFE8
 10036                           indf1	equ	0xFE7
 10037                           postdec1	equ	0xFE5
 10038                           fsr1h	equ	0xFE2
 10039                           fsr1l	equ	0xFE1
 10040                           indf2	equ	0xFDF
 10041                           postinc2	equ	0xFDE
 10042                           postdec2	equ	0xFDD
 10043                           fsr2h	equ	0xFDA
 10044                           fsr2l	equ	0xFD9
 10045                           status	equ	0xFD8
 10046                           
 10047 ;; *************** function _InitAdcApplicationMgr *****************
 10048 ;; Defined at:
 10049 ;;		line 22 in file "AdcApp.c"
 10050 ;; Parameters:    Size  Location     Type
 10051 ;;		None
 10052 ;; Auto vars:     Size  Location     Type
 10053 ;;  channel         1   23[COMRAM] unsigned char 
 10054 ;; Return value:  Size  Location     Type
 10055 ;;                  1    wreg      void 
 10056 ;; Registers used:
 10057 ;;		wreg, status,2
 10058 ;; Tracked objects:
 10059 ;;		On entry : 0/0
 10060 ;;		On exit  : 0/0
 10061 ;;		Unchanged: 0/0
 10062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10063 ;;      Params:         0       0       0       0       0       0       0
 10064 ;;      Locals:         1       0       0       0       0       0       0
 10065 ;;      Temps:          0       0       0       0       0       0       0
 10066 ;;      Totals:         1       0       0       0       0       0       0
 10067 ;;Total ram usage:        1 bytes
 10068 ;; Hardware stack levels used:    1
 10069 ;; Hardware stack levels required when called:    3
 10070 ;; This function calls:
 10071 ;;		Nothing
 10072 ;; This function is called by:
 10073 ;;		_InitSystemApplicationManagers
 10074 ;; This function uses a non-reentrant model
 10075 ;;
 10076                           
 10077                           	psect	text68
 10078  0036DC                     __ptext68:
 10079                           	opt stack 0
 10080  0036DC                     _InitAdcApplicationMgr:
 10081                           	opt stack 26
 10082                           
 10083                           ;AdcApp.c: 24: conversionFormat = CONVERSION_LEFT_FORAMT;
 10084                           
 10085                           ; BSR set to: 0
 10086                           ;incstack = 0
 10087  0036DC  0E00               	movlw	0
 10088  0036DE  6E3D               	movwf	_conversionFormat,c
 10089                           
 10090                           ;AdcApp.c: 25: adcSampleMode = CIRCULAR;
 10091  0036E0  0E00               	movlw	0
 10092  0036E2  6E3C               	movwf	_adcSampleMode,c
 10093                           
 10094                           ;AdcApp.c: 26: char channel = 0;
 10095  0036E4  0E00               	movlw	0
 10096  0036E6  6E18               	movwf	InitAdcApplicationMgr@channel,c
 10097  0036E8  0012               	return		;funcret
 10098  0036EA                     __end_of_InitAdcApplicationMgr:
 10099                           	opt stack 0
 10100                           tosu	equ	0xFFF
 10101                           tosh	equ	0xFFE
 10102                           tosl	equ	0xFFD
 10103                           pclath	equ	0xFFA
 10104                           tblptru	equ	0xFF8
 10105                           tblptrh	equ	0xFF7
 10106                           tblptrl	equ	0xFF6
 10107                           tablat	equ	0xFF5
 10108                           prodh	equ	0xFF4
 10109                           prodl	equ	0xFF3
 10110                           intcon	equ	0xFF2
 10111                           intcon2	equ	0xFF1
 10112                           postinc0	equ	0xFEE
 10113                           wreg	equ	0xFE8
 10114                           indf1	equ	0xFE7
 10115                           postdec1	equ	0xFE5
 10116                           fsr1h	equ	0xFE2
 10117                           fsr1l	equ	0xFE1
 10118                           indf2	equ	0xFDF
 10119                           postinc2	equ	0xFDE
 10120                           postdec2	equ	0xFDD
 10121                           fsr2h	equ	0xFDA
 10122                           fsr2l	equ	0xFD9
 10123                           status	equ	0xFD8
 10124                           
 10125 ;; *************** function _DacInit *****************
 10126 ;; Defined at:
 10127 ;;		line 24 in file "DacApp.c"
 10128 ;; Parameters:    Size  Location     Type
 10129 ;;		None
 10130 ;; Auto vars:     Size  Location     Type
 10131 ;;		None
 10132 ;; Return value:  Size  Location     Type
 10133 ;;                  1    wreg      void 
 10134 ;; Registers used:
 10135 ;;		wreg, status,2, status,0, cstack
 10136 ;; Tracked objects:
 10137 ;;		On entry : 0/0
 10138 ;;		On exit  : 0/0
 10139 ;;		Unchanged: 0/0
 10140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10141 ;;      Params:         0       0       0       0       0       0       0
 10142 ;;      Locals:         0       0       0       0       0       0       0
 10143 ;;      Temps:          0       0       0       0       0       0       0
 10144 ;;      Totals:         0       0       0       0       0       0       0
 10145 ;;Total ram usage:        0 bytes
 10146 ;; Hardware stack levels used:    1
 10147 ;; Hardware stack levels required when called:    6
 10148 ;; This function calls:
 10149 ;;		_SWSPI_send_word
 10150 ;; This function is called by:
 10151 ;;		_InitSystemApplicationManagers
 10152 ;; This function uses a non-reentrant model
 10153 ;;
 10154                           
 10155                           	psect	text69
 10156  00284E                     __ptext69:
 10157                           	opt stack 0
 10158  00284E                     _DacInit:
 10159                           	opt stack 23
 10160                           
 10161                           ;DacApp.c: 26: SWSPI_send_word(EXT_DAC, (0x2344), 1);
 10162                           
 10163                           ;incstack = 0
 10164  00284E  0E44               	movlw	68
 10165  002850  6E21               	movwf	SWSPI_send_word@data,c
 10166  002852  0E23               	movlw	35
 10167  002854  6E22               	movwf	SWSPI_send_word@data+1,c
 10168  002856  0E00               	movlw	0
 10169  002858  6E23               	movwf	SWSPI_send_word@data+2,c
 10170  00285A  0E00               	movlw	0
 10171  00285C  6E24               	movwf	SWSPI_send_word@data+3,c
 10172  00285E  0E01               	movlw	1
 10173  002860  6E25               	movwf	SWSPI_send_word@dataSize,c
 10174  002862  0E02               	movlw	2
 10175  002864  EC8C  F011         	call	_SWSPI_send_word
 10176                           
 10177                           ;DacApp.c: 27: SWSPI_send_word(EXT_DAC, (0x6344), 1);
 10178  002868  0E44               	movlw	68
 10179  00286A  6E21               	movwf	SWSPI_send_word@data,c
 10180  00286C  0E63               	movlw	99
 10181  00286E  6E22               	movwf	SWSPI_send_word@data+1,c
 10182  002870  0E00               	movlw	0
 10183  002872  6E23               	movwf	SWSPI_send_word@data+2,c
 10184  002874  0E00               	movlw	0
 10185  002876  6E24               	movwf	SWSPI_send_word@data+3,c
 10186  002878  0E01               	movlw	1
 10187  00287A  6E25               	movwf	SWSPI_send_word@dataSize,c
 10188  00287C  0E02               	movlw	2
 10189  00287E  EC8C  F011         	call	_SWSPI_send_word
 10190                           
 10191                           ;DacApp.c: 28: SWSPI_send_word(EXT_DAC, (0xA344), 1);
 10192  002882  0E44               	movlw	68
 10193  002884  6E21               	movwf	SWSPI_send_word@data,c
 10194  002886  0EA3               	movlw	163
 10195  002888  6E22               	movwf	SWSPI_send_word@data+1,c
 10196  00288A  0E00               	movlw	0
 10197  00288C  6E23               	movwf	SWSPI_send_word@data+2,c
 10198  00288E  0E00               	movlw	0
 10199  002890  6E24               	movwf	SWSPI_send_word@data+3,c
 10200  002892  0E01               	movlw	1
 10201  002894  6E25               	movwf	SWSPI_send_word@dataSize,c
 10202  002896  0E02               	movlw	2
 10203  002898  EC8C  F011         	call	_SWSPI_send_word
 10204                           
 10205                           ;DacApp.c: 29: SWSPI_send_word(EXT_DAC, (0xE344), 1);
 10206  00289C  0E44               	movlw	68
 10207  00289E  6E21               	movwf	SWSPI_send_word@data,c
 10208  0028A0  0EE3               	movlw	227
 10209  0028A2  6E22               	movwf	SWSPI_send_word@data+1,c
 10210  0028A4  0E00               	movlw	0
 10211  0028A6  6E23               	movwf	SWSPI_send_word@data+2,c
 10212  0028A8  0E00               	movlw	0
 10213  0028AA  6E24               	movwf	SWSPI_send_word@data+3,c
 10214  0028AC  0E01               	movlw	1
 10215  0028AE  6E25               	movwf	SWSPI_send_word@dataSize,c
 10216  0028B0  0E02               	movlw	2
 10217  0028B2  EC8C  F011         	call	_SWSPI_send_word
 10218  0028B6  0012               	return		;funcret
 10219  0028B8                     __end_of_DacInit:
 10220                           	opt stack 0
 10221                           tosu	equ	0xFFF
 10222                           tosh	equ	0xFFE
 10223                           tosl	equ	0xFFD
 10224                           pclath	equ	0xFFA
 10225                           tblptru	equ	0xFF8
 10226                           tblptrh	equ	0xFF7
 10227                           tblptrl	equ	0xFF6
 10228                           tablat	equ	0xFF5
 10229                           prodh	equ	0xFF4
 10230                           prodl	equ	0xFF3
 10231                           intcon	equ	0xFF2
 10232                           intcon2	equ	0xFF1
 10233                           postinc0	equ	0xFEE
 10234                           wreg	equ	0xFE8
 10235                           indf1	equ	0xFE7
 10236                           postdec1	equ	0xFE5
 10237                           fsr1h	equ	0xFE2
 10238                           fsr1l	equ	0xFE1
 10239                           indf2	equ	0xFDF
 10240                           postinc2	equ	0xFDE
 10241                           postdec2	equ	0xFDD
 10242                           fsr2h	equ	0xFDA
 10243                           fsr2l	equ	0xFD9
 10244                           status	equ	0xFD8
 10245                           
 10246 ;; *************** function _SWSPI_send_word *****************
 10247 ;; Defined at:
 10248 ;;		line 17 in file "SwSpiApp.c"
 10249 ;; Parameters:    Size  Location     Type
 10250 ;;  phrType         1    wreg     enum E7537
 10251 ;;  data            4   32[COMRAM] unsigned long 
 10252 ;;  dataSize        1   36[COMRAM] unsigned char 
 10253 ;; Auto vars:     Size  Location     Type
 10254 ;;  phrType         1   40[COMRAM] enum E7537
 10255 ;;  datac           1   37[COMRAM] unsigned char 
 10256 ;;  idx             2   38[COMRAM] int 
 10257 ;; Return value:  Size  Location     Type
 10258 ;;                  1    wreg      void 
 10259 ;; Registers used:
 10260 ;;		wreg, status,2, status,0, cstack
 10261 ;; Tracked objects:
 10262 ;;		On entry : 0/0
 10263 ;;		On exit  : 0/0
 10264 ;;		Unchanged: 0/0
 10265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10266 ;;      Params:         5       0       0       0       0       0       0
 10267 ;;      Locals:         4       0       0       0       0       0       0
 10268 ;;      Temps:          0       0       0       0       0       0       0
 10269 ;;      Totals:         9       0       0       0       0       0       0
 10270 ;;Total ram usage:        9 bytes
 10271 ;; Hardware stack levels used:    1
 10272 ;; Hardware stack levels required when called:    5
 10273 ;; This function calls:
 10274 ;;		_SWSPI_send_bits
 10275 ;;		_SwSpi_Set_Dac_Sync_Pin
 10276 ;;		_SwSpi_Set_Synth_Le_Pin
 10277 ;;		_make8
 10278 ;; This function is called by:
 10279 ;;		_DacInit
 10280 ;;		_DacSetValue
 10281 ;;		_PLLInitialize
 10282 ;;		_UpdateTxFreq
 10283 ;;		_UpdateRxFreq
 10284 ;; This function uses a non-reentrant model
 10285 ;;
 10286                           
 10287                           	psect	text70
 10288  002318                     __ptext70:
 10289                           	opt stack 0
 10290  002318                     _SWSPI_send_word:
 10291                           	opt stack 22
 10292                           
 10293                           ;incstack = 0
 10294                           ;SWSPI_send_word@phrType stored from wreg
 10295  002318  6E29               	movwf	SWSPI_send_word@phrType,c
 10296                           
 10297                           ;SwSpiApp.c: 19: (INTCONbits.GIE = 0);
 10298  00231A  9EF2               	bcf	intcon,7,c	;volatile
 10299                           
 10300                           ;SwSpiApp.c: 23: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
 10301  00231C  5029               	movf	SWSPI_send_word@phrType,w,c
 10302  00231E  B4D8               	btfsc	status,2,c
 10303  002320  D003               	goto	u6650
 10304  002322  0429               	decf	SWSPI_send_word@phrType,w,c
 10305  002324  A4D8               	btfss	status,2,c
 10306  002326  D006               	goto	l551
 10307  002328                     u6650:
 10308                           
 10309                           ;SwSpiApp.c: 24: {
 10310                           ;SwSpiApp.c: 25: SwSpi_Set_Synth_Le_Pin(phrType, 0);
 10311  002328  0E00               	movlw	0
 10312  00232A  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 10313  00232C  5029               	movf	SWSPI_send_word@phrType,w,c
 10314  00232E  ECA7  F018         	call	_SwSpi_Set_Synth_Le_Pin
 10315                           
 10316                           ;SwSpiApp.c: 26: }
 10317  002332  D007               	goto	l555
 10318  002334                     l551:
 10319                           
 10320                           ;SwSpiApp.c: 27: else if(phrType == EXT_DAC)
 10321  002334  0E02               	movlw	2
 10322  002336  1829               	xorwf	SWSPI_send_word@phrType,w,c
 10323  002338  A4D8               	btfss	status,2,c
 10324  00233A  D003               	goto	l555
 10325                           
 10326                           ;SwSpiApp.c: 28: {
 10327                           ;SwSpiApp.c: 29: SwSpi_Set_Dac_Sync_Pin(0);
 10328  00233C  0E00               	movlw	0
 10329  00233E  ECEB  F01A         	call	_SwSpi_Set_Dac_Sync_Pin
 10330  002342                     l555:
 10331                           
 10332                           ;SwSpiApp.c: 30: }
 10333                           ;SwSpiApp.c: 35: for(int idx = dataSize + 1; idx > 0; idx--)
 10334  002342  0E01               	movlw	1
 10335  002344  2425               	addwf	SWSPI_send_word@dataSize,w,c
 10336  002346  6E27               	movwf	SWSPI_send_word@idx,c
 10337  002348  6A28               	clrf	SWSPI_send_word@idx+1,c
 10338  00234A  0E00               	movlw	0
 10339  00234C  2228               	addwfc	SWSPI_send_word@idx+1,f,c
 10340  00234E                     l6914:
 10341  00234E  BE28               	btfsc	SWSPI_send_word@idx+1,7,c
 10342  002350  D01B               	goto	u6680
 10343  002352  5028               	movf	SWSPI_send_word@idx+1,w,c
 10344  002354  E103               	bnz	l6918
 10345  002356  0427               	decf	SWSPI_send_word@idx,w,c
 10346  002358  A0D8               	btfss	status,0,c
 10347  00235A  D016               	goto	u6680
 10348  00235C                     l6918:
 10349                           
 10350                           ;SwSpiApp.c: 36: {
 10351                           ;SwSpiApp.c: 37: uint8_t datac = make8(data, idx - 1);
 10352  00235C  C021  F018         	movff	SWSPI_send_word@data,make8@data
 10353  002360  C022  F019         	movff	SWSPI_send_word@data+1,make8@data+1
 10354  002364  C023  F01A         	movff	SWSPI_send_word@data+2,make8@data+2
 10355  002368  C024  F01B         	movff	SWSPI_send_word@data+3,make8@data+3
 10356  00236C  0427               	decf	SWSPI_send_word@idx,w,c
 10357  00236E  6E1C               	movwf	make8@dataLocation,c
 10358  002370  EC4C  F015         	call	_make8	;wreg free
 10359  002374  6E26               	movwf	SWSPI_send_word@datac,c
 10360                           
 10361                           ;SwSpiApp.c: 38: SWSPI_send_bits(phrType, datac);
 10362  002376  C026  F01A         	movff	SWSPI_send_word@datac,SWSPI_send_bits@data
 10363  00237A  5029               	movf	SWSPI_send_word@phrType,w,c
 10364  00237C  ECD4  F015         	call	_SWSPI_send_bits
 10365  002380  0627               	decf	SWSPI_send_word@idx,f,c
 10366  002382  A0D8               	btfss	status,0,c
 10367  002384  0628               	decf	SWSPI_send_word@idx+1,f,c
 10368  002386  D7E3               	goto	l6914
 10369  002388                     u6680:
 10370                           
 10371                           ;SwSpiApp.c: 39: }
 10372                           ;SwSpiApp.c: 44: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
 10373  002388  5029               	movf	SWSPI_send_word@phrType,w,c
 10374  00238A  B4D8               	btfsc	status,2,c
 10375  00238C  D003               	goto	u6700
 10376  00238E  0429               	decf	SWSPI_send_word@phrType,w,c
 10377  002390  A4D8               	btfss	status,2,c
 10378  002392  D006               	goto	l558
 10379  002394                     u6700:
 10380                           
 10381                           ;SwSpiApp.c: 45: {
 10382                           ;SwSpiApp.c: 46: SwSpi_Set_Synth_Le_Pin(phrType, 1);
 10383  002394  0E01               	movlw	1
 10384  002396  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 10385  002398  5029               	movf	SWSPI_send_word@phrType,w,c
 10386  00239A  ECA7  F018         	call	_SwSpi_Set_Synth_Le_Pin
 10387                           
 10388                           ;SwSpiApp.c: 47: }
 10389  00239E  D007               	goto	l562
 10390  0023A0                     l558:
 10391                           
 10392                           ;SwSpiApp.c: 48: else if(phrType == EXT_DAC)
 10393  0023A0  0E02               	movlw	2
 10394  0023A2  1829               	xorwf	SWSPI_send_word@phrType,w,c
 10395  0023A4  A4D8               	btfss	status,2,c
 10396  0023A6  D003               	goto	l562
 10397                           
 10398                           ;SwSpiApp.c: 49: {
 10399                           ;SwSpiApp.c: 50: SwSpi_Set_Dac_Sync_Pin(1);
 10400  0023A8  0E01               	movlw	1
 10401  0023AA  ECEB  F01A         	call	_SwSpi_Set_Dac_Sync_Pin
 10402  0023AE                     l562:
 10403                           
 10404                           ;SwSpiApp.c: 51: }
 10405                           ;SwSpiApp.c: 54: (INTCONbits.GIE = 1);
 10406  0023AE  8EF2               	bsf	intcon,7,c	;volatile
 10407  0023B0  0012               	return		;funcret
 10408  0023B2                     __end_of_SWSPI_send_word:
 10409                           	opt stack 0
 10410                           tosu	equ	0xFFF
 10411                           tosh	equ	0xFFE
 10412                           tosl	equ	0xFFD
 10413                           pclath	equ	0xFFA
 10414                           tblptru	equ	0xFF8
 10415                           tblptrh	equ	0xFF7
 10416                           tblptrl	equ	0xFF6
 10417                           tablat	equ	0xFF5
 10418                           prodh	equ	0xFF4
 10419                           prodl	equ	0xFF3
 10420                           intcon	equ	0xFF2
 10421                           intcon2	equ	0xFF1
 10422                           postinc0	equ	0xFEE
 10423                           wreg	equ	0xFE8
 10424                           indf1	equ	0xFE7
 10425                           postdec1	equ	0xFE5
 10426                           fsr1h	equ	0xFE2
 10427                           fsr1l	equ	0xFE1
 10428                           indf2	equ	0xFDF
 10429                           postinc2	equ	0xFDE
 10430                           postdec2	equ	0xFDD
 10431                           fsr2h	equ	0xFDA
 10432                           fsr2l	equ	0xFD9
 10433                           status	equ	0xFD8
 10434                           
 10435 ;; *************** function _make8 *****************
 10436 ;; Defined at:
 10437 ;;		line 62 in file "SystemCommon.c"
 10438 ;; Parameters:    Size  Location     Type
 10439 ;;  data            4   23[COMRAM] unsigned long 
 10440 ;;  dataLocation    1   27[COMRAM] unsigned char 
 10441 ;; Auto vars:     Size  Location     Type
 10442 ;;		None
 10443 ;; Return value:  Size  Location     Type
 10444 ;;                  1    wreg      unsigned char 
 10445 ;; Registers used:
 10446 ;;		wreg, status,2, status,0
 10447 ;; Tracked objects:
 10448 ;;		On entry : 0/0
 10449 ;;		On exit  : 0/0
 10450 ;;		Unchanged: 0/0
 10451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10452 ;;      Params:         5       0       0       0       0       0       0
 10453 ;;      Locals:         0       0       0       0       0       0       0
 10454 ;;      Temps:          4       0       0       0       0       0       0
 10455 ;;      Totals:         9       0       0       0       0       0       0
 10456 ;;Total ram usage:        9 bytes
 10457 ;; Hardware stack levels used:    1
 10458 ;; Hardware stack levels required when called:    3
 10459 ;; This function calls:
 10460 ;;		Nothing
 10461 ;; This function is called by:
 10462 ;;		_FlashReadCondition
 10463 ;;		_SWSPI_send_word
 10464 ;; This function uses a non-reentrant model
 10465 ;;
 10466                           
 10467                           	psect	text71
 10468  002A98                     __ptext71:
 10469                           	opt stack 0
 10470  002A98                     _make8:
 10471                           	opt stack 23
 10472                           
 10473                           ;SystemCommon.c: 64: switch(dataLocation)
 10474                           
 10475                           ;incstack = 0
 10476  002A98  D01F               	goto	l1251
 10477  002A9A                     
 10478                           ;SystemCommon.c: 67: return (data & 0x000000ff);
 10479  002A9A  5018               	movf	make8@data,w,c
 10480  002A9C  0012               	return	
 10481  002A9E                     
 10482                           ;SystemCommon.c: 70: return (data & 0x0000ff00) >> 8;
 10483  002A9E  5019               	movf	make8@data+1,w,c
 10484  002AA0  0012               	return	
 10485  002AA2                     
 10486                           ;SystemCommon.c: 73: return (data & 0x00ff0000) >> 16;
 10487  002AA2  501A               	movf	make8@data+2,w,c
 10488  002AA4  0012               	return	
 10489  002AA6                     
 10490                           ;SystemCommon.c: 76: return (data & 0xff000000) >> 24;
 10491  002AA6  0E00               	movlw	0
 10492  002AA8  1418               	andwf	make8@data,w,c
 10493  002AAA  6E1D               	movwf	??_make8& (0+255),c
 10494  002AAC  0E00               	movlw	0
 10495  002AAE  1419               	andwf	make8@data+1,w,c
 10496  002AB0  6E1E               	movwf	(??_make8+1)& (0+255),c
 10497  002AB2  0E00               	movlw	0
 10498  002AB4  141A               	andwf	make8@data+2,w,c
 10499  002AB6  6E1F               	movwf	(??_make8+2)& (0+255),c
 10500  002AB8  0EFF               	movlw	255
 10501  002ABA  141B               	andwf	make8@data+3,w,c
 10502  002ABC  6E20               	movwf	(??_make8+3)& (0+255),c
 10503  002ABE  0E19               	movlw	25
 10504  002AC0  D005               	goto	u6080
 10505  002AC2                     u6085:
 10506  002AC2  90D8               	bcf	status,0,c
 10507  002AC4  3220               	rrcf	??_make8+3,f,c
 10508  002AC6  321F               	rrcf	??_make8+2,f,c
 10509  002AC8  321E               	rrcf	??_make8+1,f,c
 10510  002ACA  321D               	rrcf	??_make8,f,c
 10511  002ACC                     u6080:
 10512  002ACC  2EE8               	decfsz	wreg,f,c
 10513  002ACE  D7F9               	goto	u6085
 10514  002AD0  501D               	movf	??_make8,w,c
 10515  002AD2  0012               	return	
 10516  002AD4                     
 10517                           ;SystemCommon.c: 79: return (0);
 10518  002AD4  0E00               	movlw	0
 10519                           
 10520                           ;SystemCommon.c: 80: }
 10521  002AD6  0012               	return	
 10522  002AD8                     l1251:
 10523  002AD8  501C               	movf	make8@dataLocation,w,c
 10524                           
 10525                           ; Switch size 1, requested type "space"
 10526                           ; Number of cases is 4, Range of values is 0 to 3
 10527                           ; switch strategies available:
 10528                           ; Name         Instructions Cycles
 10529                           ; simple_byte           13     7 (average)
 10530                           ;	Chosen strategy is simple_byte
 10531  002ADA  0A00               	xorlw	0	; case 0
 10532  002ADC  B4D8               	btfsc	status,2,c
 10533  002ADE  D7DD               	goto	l1252
 10534  002AE0  0A01               	xorlw	1	; case 1
 10535  002AE2  B4D8               	btfsc	status,2,c
 10536  002AE4  D7DC               	goto	l1254
 10537  002AE6  0A03               	xorlw	3	; case 2
 10538  002AE8  B4D8               	btfsc	status,2,c
 10539  002AEA  D7DB               	goto	l1255
 10540  002AEC  0A01               	xorlw	1	; case 3
 10541  002AEE  B4D8               	btfsc	status,2,c
 10542  002AF0  D7DA               	goto	l1256
 10543  002AF2  D7F0               	goto	l1257
 10544  002AF4                     __end_of_make8:
 10545                           	opt stack 0
 10546                           tosu	equ	0xFFF
 10547                           tosh	equ	0xFFE
 10548                           tosl	equ	0xFFD
 10549                           pclath	equ	0xFFA
 10550                           tblptru	equ	0xFF8
 10551                           tblptrh	equ	0xFF7
 10552                           tblptrl	equ	0xFF6
 10553                           tablat	equ	0xFF5
 10554                           prodh	equ	0xFF4
 10555                           prodl	equ	0xFF3
 10556                           intcon	equ	0xFF2
 10557                           intcon2	equ	0xFF1
 10558                           postinc0	equ	0xFEE
 10559                           wreg	equ	0xFE8
 10560                           indf1	equ	0xFE7
 10561                           postdec1	equ	0xFE5
 10562                           fsr1h	equ	0xFE2
 10563                           fsr1l	equ	0xFE1
 10564                           indf2	equ	0xFDF
 10565                           postinc2	equ	0xFDE
 10566                           postdec2	equ	0xFDD
 10567                           fsr2h	equ	0xFDA
 10568                           fsr2l	equ	0xFD9
 10569                           status	equ	0xFD8
 10570                           
 10571 ;; *************** function _SwSpi_Set_Synth_Le_Pin *****************
 10572 ;; Defined at:
 10573 ;;		line 224 in file "SwSpiApp.c"
 10574 ;; Parameters:    Size  Location     Type
 10575 ;;  phrType         1    wreg     enum E7537
 10576 ;;  cPinMode        1   23[COMRAM] unsigned char 
 10577 ;; Auto vars:     Size  Location     Type
 10578 ;;  phrType         1   24[COMRAM] enum E7537
 10579 ;; Return value:  Size  Location     Type
 10580 ;;                  1    wreg      void 
 10581 ;; Registers used:
 10582 ;;		wreg, status,2, status,0
 10583 ;; Tracked objects:
 10584 ;;		On entry : 0/0
 10585 ;;		On exit  : 0/0
 10586 ;;		Unchanged: 0/0
 10587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10588 ;;      Params:         1       0       0       0       0       0       0
 10589 ;;      Locals:         1       0       0       0       0       0       0
 10590 ;;      Temps:          0       0       0       0       0       0       0
 10591 ;;      Totals:         2       0       0       0       0       0       0
 10592 ;;Total ram usage:        2 bytes
 10593 ;; Hardware stack levels used:    1
 10594 ;; Hardware stack levels required when called:    3
 10595 ;; This function calls:
 10596 ;;		Nothing
 10597 ;; This function is called by:
 10598 ;;		_SWSPI_send_word
 10599 ;; This function uses a non-reentrant model
 10600 ;;
 10601                           
 10602                           	psect	text72
 10603  00314E                     __ptext72:
 10604                           	opt stack 0
 10605  00314E                     _SwSpi_Set_Synth_Le_Pin:
 10606                           	opt stack 23
 10607                           
 10608                           ;incstack = 0
 10609                           ;SwSpi_Set_Synth_Le_Pin@phrType stored from wreg
 10610  00314E  6E19               	movwf	SwSpi_Set_Synth_Le_Pin@phrType,c
 10611                           
 10612                           ;SwSpiApp.c: 226: switch(phrType)
 10613  003150  D014               	goto	l661
 10614  003152                     
 10615                           ;SwSpiApp.c: 229: if(cPinMode == 1)
 10616  003152  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10617  003154  A4D8               	btfss	status,2,c
 10618  003156  D002               	goto	l663
 10619                           
 10620                           ;SwSpiApp.c: 230: {
 10621                           ;SwSpiApp.c: 231: do { LATCbits.LATC2 = 1; } while(0);
 10622  003158  848B               	bsf	3979,2,c	;volatile
 10623                           
 10624                           ;SwSpiApp.c: 232: }
 10625  00315A  0012               	return	
 10626  00315C                     l663:
 10627                           
 10628                           ;SwSpiApp.c: 233: else if(cPinMode == 0)
 10629  00315C  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10630  00315E  A4D8               	btfss	status,2,c
 10631  003160  0012               	return	
 10632                           
 10633                           ;SwSpiApp.c: 234: {
 10634                           ;SwSpiApp.c: 235: do { LATCbits.LATC2 = 0; } while(0);
 10635  003162  948B               	bcf	3979,2,c	;volatile
 10636                           
 10637                           ;SwSpiApp.c: 236: }
 10638                           ;SwSpiApp.c: 237: break;
 10639  003164  0012               	return	
 10640  003166                     
 10641                           ;SwSpiApp.c: 240: if(cPinMode == 1)
 10642  003166  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10643  003168  A4D8               	btfss	status,2,c
 10644  00316A  D002               	goto	l672
 10645                           
 10646                           ;SwSpiApp.c: 241: {
 10647                           ;SwSpiApp.c: 242: do { LATDbits.LATD3 = 1; } while(0);
 10648  00316C  868C               	bsf	3980,3,c	;volatile
 10649                           
 10650                           ;SwSpiApp.c: 243: }
 10651  00316E  0012               	return	
 10652  003170                     l672:
 10653                           
 10654                           ;SwSpiApp.c: 244: else if(cPinMode == 0)
 10655  003170  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10656  003172  A4D8               	btfss	status,2,c
 10657  003174  0012               	return	
 10658                           
 10659                           ;SwSpiApp.c: 245: {
 10660                           ;SwSpiApp.c: 246: do { LATDbits.LATD3 = 0; } while(0);
 10661  003176  968C               	bcf	3980,3,c	;volatile
 10662                           
 10663                           ;SwSpiApp.c: 249: }
 10664                           
 10665                           ;SwSpiApp.c: 247: }
 10666                           ;SwSpiApp.c: 248: break;
 10667  003178  0012               	return	
 10668  00317A                     l661:
 10669  00317A  5019               	movf	SwSpi_Set_Synth_Le_Pin@phrType,w,c
 10670                           
 10671                           ; Switch size 1, requested type "space"
 10672                           ; Number of cases is 2, Range of values is 0 to 1
 10673                           ; switch strategies available:
 10674                           ; Name         Instructions Cycles
 10675                           ; simple_byte            7     4 (average)
 10676                           ;	Chosen strategy is simple_byte
 10677  00317C  0A00               	xorlw	0	; case 0
 10678  00317E  B4D8               	btfsc	status,2,c
 10679  003180  D7E8               	goto	l662
 10680  003182  0A01               	xorlw	1	; case 1
 10681  003184  A4D8               	btfss	status,2,c
 10682  003186  0012               	return	
 10683  003188  D7EE               	goto	l671
 10684  00318A                     __end_of_SwSpi_Set_Synth_Le_Pin:
 10685                           	opt stack 0
 10686                           tosu	equ	0xFFF
 10687                           tosh	equ	0xFFE
 10688                           tosl	equ	0xFFD
 10689                           pclath	equ	0xFFA
 10690                           tblptru	equ	0xFF8
 10691                           tblptrh	equ	0xFF7
 10692                           tblptrl	equ	0xFF6
 10693                           tablat	equ	0xFF5
 10694                           prodh	equ	0xFF4
 10695                           prodl	equ	0xFF3
 10696                           intcon	equ	0xFF2
 10697                           intcon2	equ	0xFF1
 10698                           postinc0	equ	0xFEE
 10699                           wreg	equ	0xFE8
 10700                           indf1	equ	0xFE7
 10701                           postdec1	equ	0xFE5
 10702                           fsr1h	equ	0xFE2
 10703                           fsr1l	equ	0xFE1
 10704                           indf2	equ	0xFDF
 10705                           postinc2	equ	0xFDE
 10706                           postdec2	equ	0xFDD
 10707                           fsr2h	equ	0xFDA
 10708                           fsr2l	equ	0xFD9
 10709                           status	equ	0xFD8
 10710                           
 10711 ;; *************** function _SwSpi_Set_Dac_Sync_Pin *****************
 10712 ;; Defined at:
 10713 ;;		line 252 in file "SwSpiApp.c"
 10714 ;; Parameters:    Size  Location     Type
 10715 ;;  cPinMode        1    wreg     unsigned char 
 10716 ;; Auto vars:     Size  Location     Type
 10717 ;;  cPinMode        1   23[COMRAM] unsigned char 
 10718 ;; Return value:  Size  Location     Type
 10719 ;;                  1    wreg      void 
 10720 ;; Registers used:
 10721 ;;		wreg, status,2, status,0
 10722 ;; Tracked objects:
 10723 ;;		On entry : 0/0
 10724 ;;		On exit  : 0/0
 10725 ;;		Unchanged: 0/0
 10726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10727 ;;      Params:         0       0       0       0       0       0       0
 10728 ;;      Locals:         1       0       0       0       0       0       0
 10729 ;;      Temps:          0       0       0       0       0       0       0
 10730 ;;      Totals:         1       0       0       0       0       0       0
 10731 ;;Total ram usage:        1 bytes
 10732 ;; Hardware stack levels used:    1
 10733 ;; Hardware stack levels required when called:    3
 10734 ;; This function calls:
 10735 ;;		Nothing
 10736 ;; This function is called by:
 10737 ;;		_SWSPI_send_word
 10738 ;; This function uses a non-reentrant model
 10739 ;;
 10740                           
 10741                           	psect	text73
 10742  0035D6                     __ptext73:
 10743                           	opt stack 0
 10744  0035D6                     _SwSpi_Set_Dac_Sync_Pin:
 10745                           	opt stack 23
 10746                           
 10747                           ;incstack = 0
 10748                           ;SwSpi_Set_Dac_Sync_Pin@cPinMode stored from wreg
 10749  0035D6  6E18               	movwf	SwSpi_Set_Dac_Sync_Pin@cPinMode,c
 10750                           
 10751                           ;SwSpiApp.c: 254: switch(cPinMode)
 10752  0035D8  D004               	goto	l682
 10753  0035DA                     
 10754                           ;SwSpiApp.c: 257: do { LATAbits.LATA2 = 0; } while(0);
 10755  0035DA  9489               	bcf	3977,2,c	;volatile
 10756                           
 10757                           ;SwSpiApp.c: 258: break;
 10758  0035DC  0012               	return	
 10759  0035DE                     
 10760                           ;SwSpiApp.c: 261: do { LATAbits.LATA2 = 1; } while(0);
 10761  0035DE  8489               	bsf	3977,2,c	;volatile
 10762                           
 10763                           ;SwSpiApp.c: 263: }
 10764                           
 10765                           ;SwSpiApp.c: 262: break;
 10766  0035E0  0012               	return	
 10767  0035E2                     l682:
 10768  0035E2  5018               	movf	SwSpi_Set_Dac_Sync_Pin@cPinMode,w,c
 10769                           
 10770                           ; Switch size 1, requested type "space"
 10771                           ; Number of cases is 2, Range of values is 0 to 1
 10772                           ; switch strategies available:
 10773                           ; Name         Instructions Cycles
 10774                           ; simple_byte            7     4 (average)
 10775                           ;	Chosen strategy is simple_byte
 10776  0035E4  0A00               	xorlw	0	; case 0
 10777  0035E6  B4D8               	btfsc	status,2,c
 10778  0035E8  D7F8               	goto	l683
 10779  0035EA  0A01               	xorlw	1	; case 1
 10780  0035EC  A4D8               	btfss	status,2,c
 10781  0035EE  0012               	return	
 10782  0035F0  D7F6               	goto	l687
 10783  0035F2                     __end_of_SwSpi_Set_Dac_Sync_Pin:
 10784                           	opt stack 0
 10785                           tosu	equ	0xFFF
 10786                           tosh	equ	0xFFE
 10787                           tosl	equ	0xFFD
 10788                           pclath	equ	0xFFA
 10789                           tblptru	equ	0xFF8
 10790                           tblptrh	equ	0xFF7
 10791                           tblptrl	equ	0xFF6
 10792                           tablat	equ	0xFF5
 10793                           prodh	equ	0xFF4
 10794                           prodl	equ	0xFF3
 10795                           intcon	equ	0xFF2
 10796                           intcon2	equ	0xFF1
 10797                           postinc0	equ	0xFEE
 10798                           wreg	equ	0xFE8
 10799                           indf1	equ	0xFE7
 10800                           postdec1	equ	0xFE5
 10801                           fsr1h	equ	0xFE2
 10802                           fsr1l	equ	0xFE1
 10803                           indf2	equ	0xFDF
 10804                           postinc2	equ	0xFDE
 10805                           postdec2	equ	0xFDD
 10806                           fsr2h	equ	0xFDA
 10807                           fsr2l	equ	0xFD9
 10808                           status	equ	0xFD8
 10809                           
 10810 ;; *************** function _SWSPI_send_bits *****************
 10811 ;; Defined at:
 10812 ;;		line 57 in file "SwSpiApp.c"
 10813 ;; Parameters:    Size  Location     Type
 10814 ;;  phrType         1    wreg     enum E7537
 10815 ;;  data            1   25[COMRAM] unsigned char 
 10816 ;; Auto vars:     Size  Location     Type
 10817 ;;  phrType         1   27[COMRAM] enum E7537
 10818 ;;  count           1   26[COMRAM] unsigned char 
 10819 ;; Return value:  Size  Location     Type
 10820 ;;                  1    wreg      void 
 10821 ;; Registers used:
 10822 ;;		wreg, status,2, status,0, cstack
 10823 ;; Tracked objects:
 10824 ;;		On entry : 0/0
 10825 ;;		On exit  : 0/0
 10826 ;;		Unchanged: 0/0
 10827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10828 ;;      Params:         1       0       0       0       0       0       0
 10829 ;;      Locals:         2       0       0       0       0       0       0
 10830 ;;      Temps:          0       0       0       0       0       0       0
 10831 ;;      Totals:         3       0       0       0       0       0       0
 10832 ;;Total ram usage:        3 bytes
 10833 ;; Hardware stack levels used:    1
 10834 ;; Hardware stack levels required when called:    4
 10835 ;; This function calls:
 10836 ;;		_SwSpi_Clk_Pin
 10837 ;;		_SwSpi_Data_Pin
 10838 ;; This function is called by:
 10839 ;;		_SWSPI_send_word
 10840 ;; This function uses a non-reentrant model
 10841 ;;
 10842                           
 10843                           	psect	text74
 10844  002BA8                     __ptext74:
 10845                           	opt stack 0
 10846  002BA8                     _SWSPI_send_bits:
 10847                           	opt stack 22
 10848                           
 10849                           ;incstack = 0
 10850                           ;SWSPI_send_bits@phrType stored from wreg
 10851  002BA8  6E1C               	movwf	SWSPI_send_bits@phrType,c
 10852                           
 10853                           ;SwSpiApp.c: 59: uint8_t count;
 10854                           ;SwSpiApp.c: 60: for (count = 8; count ; count--, data <<= 1)
 10855  002BAA  0E08               	movlw	8
 10856  002BAC  6E1B               	movwf	SWSPI_send_bits@count,c
 10857  002BAE  D01A               	goto	l566
 10858  002BB0                     
 10859                           ;SwSpiApp.c: 61: {
 10860                           ;SwSpiApp.c: 63: {
 10861                           ;SwSpiApp.c: 64: SwSpi_Clk_Pin(phrType, 1);
 10862  002BB0  0E01               	movlw	1
 10863  002BB2  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 10864  002BB4  501C               	movf	SWSPI_send_bits@phrType,w,c
 10865  002BB6  EC56  F016         	call	_SwSpi_Clk_Pin
 10866                           
 10867                           ;SwSpiApp.c: 65: }
 10868                           ;SwSpiApp.c: 67: if (data & 0X80)
 10869  002BBA  AE1A               	btfss	SWSPI_send_bits@data,7,c
 10870  002BBC  D006               	goto	l568
 10871                           
 10872                           ;SwSpiApp.c: 68: {
 10873                           ;SwSpiApp.c: 70: SwSpi_Data_Pin(phrType, 1);
 10874  002BBE  0E01               	movlw	1
 10875  002BC0  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 10876  002BC2  501C               	movf	SWSPI_send_bits@phrType,w,c
 10877  002BC4  EC2B  F016         	call	_SwSpi_Data_Pin
 10878                           
 10879                           ;SwSpiApp.c: 71: }
 10880  002BC8  D005               	goto	l569
 10881  002BCA                     l568:
 10882                           
 10883                           ;SwSpiApp.c: 72: else
 10884                           ;SwSpiApp.c: 73: {
 10885                           ;SwSpiApp.c: 74: SwSpi_Data_Pin(phrType, 0);
 10886  002BCA  0E00               	movlw	0
 10887  002BCC  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 10888  002BCE  501C               	movf	SWSPI_send_bits@phrType,w,c
 10889  002BD0  EC2B  F016         	call	_SwSpi_Data_Pin
 10890  002BD4                     l569:
 10891                           
 10892                           ;SwSpiApp.c: 75: }
 10893                           ;SwSpiApp.c: 77: SwSpi_Clk_Pin(phrType, 0);
 10894  002BD4  0E00               	movlw	0
 10895  002BD6  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 10896  002BD8  501C               	movf	SWSPI_send_bits@phrType,w,c
 10897  002BDA  EC56  F016         	call	_SwSpi_Clk_Pin
 10898  002BDE  061B               	decf	SWSPI_send_bits@count,f,c
 10899  002BE0  90D8               	bcf	status,0,c
 10900  002BE2  361A               	rlcf	SWSPI_send_bits@data,f,c
 10901  002BE4                     l566:
 10902  002BE4  501B               	movf	SWSPI_send_bits@count,w,c
 10903  002BE6  A4D8               	btfss	status,2,c
 10904  002BE8  D7E3               	goto	l567
 10905                           
 10906                           ;SwSpiApp.c: 85: }
 10907                           ;SwSpiApp.c: 87: SwSpi_Data_Pin(phrType, 0);
 10908  002BEA  0E00               	movlw	0
 10909  002BEC  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 10910  002BEE  501C               	movf	SWSPI_send_bits@phrType,w,c
 10911  002BF0  EC2B  F016         	call	_SwSpi_Data_Pin
 10912                           
 10913                           ;SwSpiApp.c: 88: SwSpi_Clk_Pin(phrType, 0);
 10914  002BF4  0E00               	movlw	0
 10915  002BF6  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 10916  002BF8  501C               	movf	SWSPI_send_bits@phrType,w,c
 10917  002BFA  EC56  F016         	call	_SwSpi_Clk_Pin
 10918  002BFE  0012               	return		;funcret
 10919  002C00                     __end_of_SWSPI_send_bits:
 10920                           	opt stack 0
 10921                           tosu	equ	0xFFF
 10922                           tosh	equ	0xFFE
 10923                           tosl	equ	0xFFD
 10924                           pclath	equ	0xFFA
 10925                           tblptru	equ	0xFF8
 10926                           tblptrh	equ	0xFF7
 10927                           tblptrl	equ	0xFF6
 10928                           tablat	equ	0xFF5
 10929                           prodh	equ	0xFF4
 10930                           prodl	equ	0xFF3
 10931                           intcon	equ	0xFF2
 10932                           intcon2	equ	0xFF1
 10933                           postinc0	equ	0xFEE
 10934                           wreg	equ	0xFE8
 10935                           indf1	equ	0xFE7
 10936                           postdec1	equ	0xFE5
 10937                           fsr1h	equ	0xFE2
 10938                           fsr1l	equ	0xFE1
 10939                           indf2	equ	0xFDF
 10940                           postinc2	equ	0xFDE
 10941                           postdec2	equ	0xFDD
 10942                           fsr2h	equ	0xFDA
 10943                           fsr2l	equ	0xFD9
 10944                           status	equ	0xFD8
 10945                           
 10946 ;; *************** function _SwSpi_Data_Pin *****************
 10947 ;; Defined at:
 10948 ;;		line 95 in file "SwSpiApp.c"
 10949 ;; Parameters:    Size  Location     Type
 10950 ;;  phrType         1    wreg     enum E7537
 10951 ;;  cPinMode        1   23[COMRAM] unsigned char 
 10952 ;; Auto vars:     Size  Location     Type
 10953 ;;  phrType         1   24[COMRAM] enum E7537
 10954 ;; Return value:  Size  Location     Type
 10955 ;;                  1    wreg      void 
 10956 ;; Registers used:
 10957 ;;		wreg, status,2, status,0
 10958 ;; Tracked objects:
 10959 ;;		On entry : 0/0
 10960 ;;		On exit  : 0/0
 10961 ;;		Unchanged: 0/0
 10962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10963 ;;      Params:         1       0       0       0       0       0       0
 10964 ;;      Locals:         1       0       0       0       0       0       0
 10965 ;;      Temps:          0       0       0       0       0       0       0
 10966 ;;      Totals:         2       0       0       0       0       0       0
 10967 ;;Total ram usage:        2 bytes
 10968 ;; Hardware stack levels used:    1
 10969 ;; Hardware stack levels required when called:    3
 10970 ;; This function calls:
 10971 ;;		Nothing
 10972 ;; This function is called by:
 10973 ;;		_SWSPI_send_bits
 10974 ;; This function uses a non-reentrant model
 10975 ;;
 10976                           
 10977                           	psect	text75
 10978  002C56                     __ptext75:
 10979                           	opt stack 0
 10980  002C56                     _SwSpi_Data_Pin:
 10981                           	opt stack 22
 10982                           
 10983                           ;incstack = 0
 10984                           ;SwSpi_Data_Pin@phrType stored from wreg
 10985  002C56  6E19               	movwf	SwSpi_Data_Pin@phrType,c
 10986                           
 10987                           ;SwSpiApp.c: 97: switch(phrType)
 10988  002C58  D01E               	goto	l574
 10989  002C5A                     
 10990                           ;SwSpiApp.c: 100: if(cPinMode == 1)
 10991  002C5A  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 10992  002C5C  A4D8               	btfss	status,2,c
 10993  002C5E  D002               	goto	l576
 10994                           
 10995                           ;SwSpiApp.c: 101: {
 10996                           ;SwSpiApp.c: 102: do { LATDbits.LATD0 = 1; } while(0);
 10997  002C60  808C               	bsf	3980,0,c	;volatile
 10998                           
 10999                           ;SwSpiApp.c: 103: }
 11000  002C62  0012               	return	
 11001  002C64                     l576:
 11002                           
 11003                           ;SwSpiApp.c: 104: else if (cPinMode == 0)
 11004  002C64  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 11005  002C66  A4D8               	btfss	status,2,c
 11006  002C68  0012               	return	
 11007                           
 11008                           ;SwSpiApp.c: 105: {
 11009                           ;SwSpiApp.c: 106: do { LATDbits.LATD0 = 0; } while(0);
 11010  002C6A  908C               	bcf	3980,0,c	;volatile
 11011                           
 11012                           ;SwSpiApp.c: 107: }
 11013                           ;SwSpiApp.c: 108: break;
 11014  002C6C  0012               	return	
 11015  002C6E                     
 11016                           ;SwSpiApp.c: 111: if(cPinMode == 1)
 11017  002C6E  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 11018  002C70  A4D8               	btfss	status,2,c
 11019  002C72  D002               	goto	l585
 11020                           
 11021                           ;SwSpiApp.c: 112: {
 11022                           ;SwSpiApp.c: 113: do { LATCbits.LATC5 = 1; } while(0);
 11023  002C74  8A8B               	bsf	3979,5,c	;volatile
 11024                           
 11025                           ;SwSpiApp.c: 114: }
 11026  002C76  0012               	return	
 11027  002C78                     l585:
 11028                           
 11029                           ;SwSpiApp.c: 115: else if (cPinMode == 0)
 11030  002C78  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 11031  002C7A  A4D8               	btfss	status,2,c
 11032  002C7C  0012               	return	
 11033                           
 11034                           ;SwSpiApp.c: 116: {
 11035                           ;SwSpiApp.c: 117: do { LATCbits.LATC5 = 0; } while(0);
 11036  002C7E  9A8B               	bcf	3979,5,c	;volatile
 11037                           
 11038                           ;SwSpiApp.c: 118: }
 11039                           ;SwSpiApp.c: 119: break;
 11040  002C80  0012               	return	
 11041  002C82                     
 11042                           ;SwSpiApp.c: 122: if(cPinMode == 1)
 11043  002C82  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 11044  002C84  A4D8               	btfss	status,2,c
 11045  002C86  D002               	goto	l593
 11046                           
 11047                           ;SwSpiApp.c: 123: {
 11048                           ;SwSpiApp.c: 124: do { LATAbits.LATA4 = 1; } while(0);
 11049  002C88  8889               	bsf	3977,4,c	;volatile
 11050                           
 11051                           ;SwSpiApp.c: 125: }
 11052  002C8A  0012               	return	
 11053  002C8C                     l593:
 11054                           
 11055                           ;SwSpiApp.c: 126: else if (cPinMode == 0)
 11056  002C8C  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 11057  002C8E  A4D8               	btfss	status,2,c
 11058  002C90  0012               	return	
 11059                           
 11060                           ;SwSpiApp.c: 127: {
 11061                           ;SwSpiApp.c: 128: do { LATAbits.LATA4 = 0; } while(0);
 11062  002C92  9889               	bcf	3977,4,c	;volatile
 11063                           
 11064                           ;SwSpiApp.c: 131: }
 11065                           
 11066                           ;SwSpiApp.c: 129: }
 11067                           ;SwSpiApp.c: 130: break;
 11068  002C94  0012               	return	
 11069  002C96                     l574:
 11070  002C96  5019               	movf	SwSpi_Data_Pin@phrType,w,c
 11071                           
 11072                           ; Switch size 1, requested type "space"
 11073                           ; Number of cases is 3, Range of values is 0 to 2
 11074                           ; switch strategies available:
 11075                           ; Name         Instructions Cycles
 11076                           ; simple_byte           10     6 (average)
 11077                           ;	Chosen strategy is simple_byte
 11078  002C98  0A00               	xorlw	0	; case 0
 11079  002C9A  B4D8               	btfsc	status,2,c
 11080  002C9C  D7DE               	goto	l575
 11081  002C9E  0A01               	xorlw	1	; case 1
 11082  002CA0  B4D8               	btfsc	status,2,c
 11083  002CA2  D7E5               	goto	l584
 11084  002CA4  0A03               	xorlw	3	; case 2
 11085  002CA6  A4D8               	btfss	status,2,c
 11086  002CA8  0012               	return	
 11087  002CAA  D7EB               	goto	l592
 11088  002CAC                     __end_of_SwSpi_Data_Pin:
 11089                           	opt stack 0
 11090                           tosu	equ	0xFFF
 11091                           tosh	equ	0xFFE
 11092                           tosl	equ	0xFFD
 11093                           pclath	equ	0xFFA
 11094                           tblptru	equ	0xFF8
 11095                           tblptrh	equ	0xFF7
 11096                           tblptrl	equ	0xFF6
 11097                           tablat	equ	0xFF5
 11098                           prodh	equ	0xFF4
 11099                           prodl	equ	0xFF3
 11100                           intcon	equ	0xFF2
 11101                           intcon2	equ	0xFF1
 11102                           postinc0	equ	0xFEE
 11103                           wreg	equ	0xFE8
 11104                           indf1	equ	0xFE7
 11105                           postdec1	equ	0xFE5
 11106                           fsr1h	equ	0xFE2
 11107                           fsr1l	equ	0xFE1
 11108                           indf2	equ	0xFDF
 11109                           postinc2	equ	0xFDE
 11110                           postdec2	equ	0xFDD
 11111                           fsr2h	equ	0xFDA
 11112                           fsr2l	equ	0xFD9
 11113                           status	equ	0xFD8
 11114                           
 11115 ;; *************** function _SwSpi_Clk_Pin *****************
 11116 ;; Defined at:
 11117 ;;		line 134 in file "SwSpiApp.c"
 11118 ;; Parameters:    Size  Location     Type
 11119 ;;  phrType         1    wreg     enum E7537
 11120 ;;  cPinMode        1   23[COMRAM] unsigned char 
 11121 ;; Auto vars:     Size  Location     Type
 11122 ;;  phrType         1   24[COMRAM] enum E7537
 11123 ;; Return value:  Size  Location     Type
 11124 ;;                  1    wreg      void 
 11125 ;; Registers used:
 11126 ;;		wreg, status,2, status,0
 11127 ;; Tracked objects:
 11128 ;;		On entry : 0/0
 11129 ;;		On exit  : 0/0
 11130 ;;		Unchanged: 0/0
 11131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11132 ;;      Params:         1       0       0       0       0       0       0
 11133 ;;      Locals:         1       0       0       0       0       0       0
 11134 ;;      Temps:          0       0       0       0       0       0       0
 11135 ;;      Totals:         2       0       0       0       0       0       0
 11136 ;;Total ram usage:        2 bytes
 11137 ;; Hardware stack levels used:    1
 11138 ;; Hardware stack levels required when called:    3
 11139 ;; This function calls:
 11140 ;;		Nothing
 11141 ;; This function is called by:
 11142 ;;		_SWSPI_send_bits
 11143 ;;		_SwSpi_Synth_Toggle_Clock
 11144 ;; This function uses a non-reentrant model
 11145 ;;
 11146                           
 11147                           	psect	text76
 11148  002CAC                     __ptext76:
 11149                           	opt stack 0
 11150  002CAC                     _SwSpi_Clk_Pin:
 11151                           	opt stack 22
 11152                           
 11153                           ;incstack = 0
 11154                           ;SwSpi_Clk_Pin@phrType stored from wreg
 11155  002CAC  6E19               	movwf	SwSpi_Clk_Pin@phrType,c
 11156                           
 11157                           ;SwSpiApp.c: 136: switch(phrType)
 11158  002CAE  D01E               	goto	l603
 11159  002CB0                     
 11160                           ;SwSpiApp.c: 139: if(cPinMode == 1)
 11161  002CB0  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 11162  002CB2  A4D8               	btfss	status,2,c
 11163  002CB4  D002               	goto	l605
 11164                           
 11165                           ;SwSpiApp.c: 140: {
 11166                           ;SwSpiApp.c: 141: do { LATCbits.LATC3 = 1; } while(0);
 11167  002CB6  868B               	bsf	3979,3,c	;volatile
 11168                           
 11169                           ;SwSpiApp.c: 142: }
 11170  002CB8  0012               	return	
 11171  002CBA                     l605:
 11172                           
 11173                           ;SwSpiApp.c: 143: else if (cPinMode == 0)
 11174  002CBA  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 11175  002CBC  A4D8               	btfss	status,2,c
 11176  002CBE  0012               	return	
 11177                           
 11178                           ;SwSpiApp.c: 144: {
 11179                           ;SwSpiApp.c: 145: do { LATCbits.LATC3 = 0; } while(0);
 11180  002CC0  968B               	bcf	3979,3,c	;volatile
 11181                           
 11182                           ;SwSpiApp.c: 146: }
 11183                           ;SwSpiApp.c: 147: break;
 11184  002CC2  0012               	return	
 11185  002CC4                     
 11186                           ;SwSpiApp.c: 150: if(cPinMode == 1)
 11187  002CC4  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 11188  002CC6  A4D8               	btfss	status,2,c
 11189  002CC8  D002               	goto	l614
 11190                           
 11191                           ;SwSpiApp.c: 151: {
 11192                           ;SwSpiApp.c: 152: do { LATCbits.LATC4 = 1; } while(0);
 11193  002CCA  888B               	bsf	3979,4,c	;volatile
 11194                           
 11195                           ;SwSpiApp.c: 153: }
 11196  002CCC  0012               	return	
 11197  002CCE                     l614:
 11198                           
 11199                           ;SwSpiApp.c: 154: else if (cPinMode == 0)
 11200  002CCE  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 11201  002CD0  A4D8               	btfss	status,2,c
 11202  002CD2  0012               	return	
 11203                           
 11204                           ;SwSpiApp.c: 155: {
 11205                           ;SwSpiApp.c: 156: do { LATCbits.LATC4 = 0; } while(0);
 11206  002CD4  988B               	bcf	3979,4,c	;volatile
 11207                           
 11208                           ;SwSpiApp.c: 157: }
 11209                           ;SwSpiApp.c: 159: break;
 11210  002CD6  0012               	return	
 11211  002CD8                     
 11212                           ;SwSpiApp.c: 162: if(cPinMode == 1)
 11213  002CD8  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 11214  002CDA  A4D8               	btfss	status,2,c
 11215  002CDC  D002               	goto	l622
 11216                           
 11217                           ;SwSpiApp.c: 163: {
 11218                           ;SwSpiApp.c: 164: do { LATAbits.LATA3 = 1; } while(0);
 11219  002CDE  8689               	bsf	3977,3,c	;volatile
 11220                           
 11221                           ;SwSpiApp.c: 165: }
 11222  002CE0  0012               	return	
 11223  002CE2                     l622:
 11224                           
 11225                           ;SwSpiApp.c: 166: else if (cPinMode == 0)
 11226  002CE2  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 11227  002CE4  A4D8               	btfss	status,2,c
 11228  002CE6  0012               	return	
 11229                           
 11230                           ;SwSpiApp.c: 167: {
 11231                           ;SwSpiApp.c: 168: do { LATAbits.LATA3 = 0; } while(0);
 11232  002CE8  9689               	bcf	3977,3,c	;volatile
 11233                           
 11234                           ;SwSpiApp.c: 171: }
 11235                           
 11236                           ;SwSpiApp.c: 169: }
 11237                           ;SwSpiApp.c: 170: break;
 11238  002CEA  0012               	return	
 11239  002CEC                     l603:
 11240  002CEC  5019               	movf	SwSpi_Clk_Pin@phrType,w,c
 11241                           
 11242                           ; Switch size 1, requested type "space"
 11243                           ; Number of cases is 3, Range of values is 0 to 2
 11244                           ; switch strategies available:
 11245                           ; Name         Instructions Cycles
 11246                           ; simple_byte           10     6 (average)
 11247                           ;	Chosen strategy is simple_byte
 11248  002CEE  0A00               	xorlw	0	; case 0
 11249  002CF0  B4D8               	btfsc	status,2,c
 11250  002CF2  D7DE               	goto	l604
 11251  002CF4  0A01               	xorlw	1	; case 1
 11252  002CF6  B4D8               	btfsc	status,2,c
 11253  002CF8  D7E5               	goto	l613
 11254  002CFA  0A03               	xorlw	3	; case 2
 11255  002CFC  A4D8               	btfss	status,2,c
 11256  002CFE  0012               	return	
 11257  002D00  D7EB               	goto	l621
 11258  002D02                     __end_of_SwSpi_Clk_Pin:
 11259                           	opt stack 0
 11260                           tosu	equ	0xFFF
 11261                           tosh	equ	0xFFE
 11262                           tosl	equ	0xFFD
 11263                           pclath	equ	0xFFA
 11264                           tblptru	equ	0xFF8
 11265                           tblptrh	equ	0xFF7
 11266                           tblptrl	equ	0xFF6
 11267                           tablat	equ	0xFF5
 11268                           prodh	equ	0xFF4
 11269                           prodl	equ	0xFF3
 11270                           intcon	equ	0xFF2
 11271                           intcon2	equ	0xFF1
 11272                           postinc0	equ	0xFEE
 11273                           wreg	equ	0xFE8
 11274                           indf1	equ	0xFE7
 11275                           postdec1	equ	0xFE5
 11276                           fsr1h	equ	0xFE2
 11277                           fsr1l	equ	0xFE1
 11278                           indf2	equ	0xFDF
 11279                           postinc2	equ	0xFDE
 11280                           postdec2	equ	0xFDD
 11281                           fsr2h	equ	0xFDA
 11282                           fsr2l	equ	0xFD9
 11283                           status	equ	0xFD8
 11284                           
 11285 ;; *************** function _ClearMcuRunTime *****************
 11286 ;; Defined at:
 11287 ;;		line 87 in file "SystemStatus.c"
 11288 ;; Parameters:    Size  Location     Type
 11289 ;;		None
 11290 ;; Auto vars:     Size  Location     Type
 11291 ;;		None
 11292 ;; Return value:  Size  Location     Type
 11293 ;;                  1    wreg      void 
 11294 ;; Registers used:
 11295 ;;		wreg, status,2
 11296 ;; Tracked objects:
 11297 ;;		On entry : 0/0
 11298 ;;		On exit  : 0/0
 11299 ;;		Unchanged: 0/0
 11300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11301 ;;      Params:         0       0       0       0       0       0       0
 11302 ;;      Locals:         0       0       0       0       0       0       0
 11303 ;;      Temps:          0       0       0       0       0       0       0
 11304 ;;      Totals:         0       0       0       0       0       0       0
 11305 ;;Total ram usage:        0 bytes
 11306 ;; Hardware stack levels used:    1
 11307 ;; Hardware stack levels required when called:    3
 11308 ;; This function calls:
 11309 ;;		Nothing
 11310 ;; This function is called by:
 11311 ;;		_InitSystemApplicationManagers
 11312 ;; This function uses a non-reentrant model
 11313 ;;
 11314                           
 11315                           	psect	text77
 11316  00367C                     __ptext77:
 11317                           	opt stack 0
 11318  00367C                     _ClearMcuRunTime:
 11319                           	opt stack 26
 11320                           
 11321                           ;SystemStatus.c: 89: mcuRunTimeIn5SecTicks = 0;
 11322                           
 11323                           ;incstack = 0
 11324  00367C  0E00               	movlw	0
 11325  00367E  0100               	movlb	0	; () banked
 11326  003680  6FC0               	movwf	_mcuRunTimeIn5SecTicks& (0+255),b
 11327  003682  0E00               	movlw	0
 11328  003684  6FC1               	movwf	(_mcuRunTimeIn5SecTicks+1)& (0+255),b
 11329  003686  0E00               	movlw	0
 11330  003688  6FC2               	movwf	(_mcuRunTimeIn5SecTicks+2)& (0+255),b
 11331  00368A  0E00               	movlw	0
 11332  00368C  6FC3               	movwf	(_mcuRunTimeIn5SecTicks+3)& (0+255),b
 11333                           
 11334                           ; BSR set to: 0
 11335  00368E  0012               	return		;funcret
 11336  003690                     __end_of_ClearMcuRunTime:
 11337                           	opt stack 0
 11338                           tosu	equ	0xFFF
 11339                           tosh	equ	0xFFE
 11340                           tosl	equ	0xFFD
 11341                           pclath	equ	0xFFA
 11342                           tblptru	equ	0xFF8
 11343                           tblptrh	equ	0xFF7
 11344                           tblptrl	equ	0xFF6
 11345                           tablat	equ	0xFF5
 11346                           prodh	equ	0xFF4
 11347                           prodl	equ	0xFF3
 11348                           intcon	equ	0xFF2
 11349                           intcon2	equ	0xFF1
 11350                           postinc0	equ	0xFEE
 11351                           wreg	equ	0xFE8
 11352                           indf1	equ	0xFE7
 11353                           postdec1	equ	0xFE5
 11354                           fsr1h	equ	0xFE2
 11355                           fsr1l	equ	0xFE1
 11356                           indf2	equ	0xFDF
 11357                           postinc2	equ	0xFDE
 11358                           postdec2	equ	0xFDD
 11359                           fsr2h	equ	0xFDA
 11360                           fsr2l	equ	0xFD9
 11361                           status	equ	0xFD8
 11362                           
 11363 ;; *************** function _CheckFlashPrecentage *****************
 11364 ;; Defined at:
 11365 ;;		line 205 in file "FlashApp.c"
 11366 ;; Parameters:    Size  Location     Type
 11367 ;;		None
 11368 ;; Auto vars:     Size  Location     Type
 11369 ;;  precentage      3   28[BANK0 ] void 
 11370 ;; Return value:  Size  Location     Type
 11371 ;;                  1    wreg      unsigned char 
 11372 ;; Registers used:
 11373 ;;		wreg, status,2, status,0, cstack
 11374 ;; Tracked objects:
 11375 ;;		On entry : 0/0
 11376 ;;		On exit  : 0/0
 11377 ;;		Unchanged: 0/0
 11378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11379 ;;      Params:         0       0       0       0       0       0       0
 11380 ;;      Locals:         0       3       0       0       0       0       0
 11381 ;;      Temps:          0       4       0       0       0       0       0
 11382 ;;      Totals:         0       7       0       0       0       0       0
 11383 ;;Total ram usage:        7 bytes
 11384 ;; Hardware stack levels used:    1
 11385 ;; Hardware stack levels required when called:    5
 11386 ;; This function calls:
 11387 ;;		___ftdiv
 11388 ;;		___ftge
 11389 ;;		___ftmul
 11390 ;;		___lltoft
 11391 ;; This function is called by:
 11392 ;;		_main
 11393 ;; This function uses a non-reentrant model
 11394 ;;
 11395                           
 11396                           	psect	text78
 11397  002122                     __ptext78:
 11398                           	opt stack 0
 11399  002122                     _CheckFlashPrecentage:
 11400                           	opt stack 25
 11401                           
 11402                           ;FlashApp.c: 207: double precentage = ((double)(0x7FF0 - writeAddress) / 0x7FF0) * 100;
 11403                           
 11404                           ; BSR set to: 0
 11405                           ;incstack = 0
 11406  002122  0EE0               	movlw	224
 11407  002124  6E2C               	movwf	___ftdiv@f2,c
 11408  002126  0EFF               	movlw	255
 11409  002128  6E2D               	movwf	___ftdiv@f2+1,c
 11410  00212A  0E46               	movlw	70
 11411  00212C  6E2E               	movwf	___ftdiv@f2+2,c
 11412  00212E  C042  F078         	movff	_writeAddress,??_CheckFlashPrecentage
 11413  002132  C043  F079         	movff	_writeAddress+1,??_CheckFlashPrecentage+1
 11414  002136  C044  F07A         	movff	_writeAddress+2,??_CheckFlashPrecentage+2
 11415  00213A  C045  F07B         	movff	_writeAddress+3,??_CheckFlashPrecentage+3
 11416  00213E  0100               	movlb	0	; () banked
 11417  002140  1F78               	comf	??_CheckFlashPrecentage& (0+255),f,b
 11418  002142  1F79               	comf	(??_CheckFlashPrecentage+1)& (0+255),f,b
 11419  002144  1F7A               	comf	(??_CheckFlashPrecentage+2)& (0+255),f,b
 11420  002146  1F7B               	comf	(??_CheckFlashPrecentage+3)& (0+255),f,b
 11421  002148  2B78               	incf	??_CheckFlashPrecentage& (0+255),f,b
 11422  00214A  0E00               	movlw	0
 11423  00214C  2379               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),f,b
 11424  00214E  237A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),f,b
 11425  002150  237B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),f,b
 11426  002152  0EF0               	movlw	240
 11427  002154  2578               	addwf	??_CheckFlashPrecentage& (0+255),w,b
 11428  002156  6E20               	movwf	___lltoft@c,c
 11429  002158  0E7F               	movlw	127
 11430  00215A  2179               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),w,b
 11431  00215C  6E21               	movwf	___lltoft@c+1,c
 11432  00215E  0E00               	movlw	0
 11433  002160  217A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),w,b
 11434  002162  6E22               	movwf	___lltoft@c+2,c
 11435  002164  0E00               	movlw	0
 11436  002166  217B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),w,b
 11437  002168  6E23               	movwf	___lltoft@c+3,c
 11438  00216A  EC7A  F015         	call	___lltoft	;wreg free
 11439  00216E  C020  F029         	movff	?___lltoft,___ftdiv@f1
 11440  002172  C021  F02A         	movff	?___lltoft+1,___ftdiv@f1+1
 11441  002176  C022  F02B         	movff	?___lltoft+2,___ftdiv@f1+2
 11442  00217A  EC0E  F00E         	call	___ftdiv	;wreg free
 11443  00217E  C029  F069         	movff	?___ftdiv,___ftmul@f1
 11444  002182  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 11445  002186  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 11446  00218A  0E00               	movlw	0
 11447  00218C  0100               	movlb	0	; () banked
 11448  00218E  6F6C               	movwf	___ftmul@f2& (0+255),b
 11449  002190  0EC8               	movlw	200
 11450  002192  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 11451  002194  0E42               	movlw	66
 11452  002196  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 11453  002198  EC93  F00D         	call	___ftmul	;wreg free
 11454  00219C  C069  F07C         	movff	?___ftmul,CheckFlashPrecentage@precentage
 11455  0021A0  C06A  F07D         	movff	?___ftmul+1,CheckFlashPrecentage@precentage+1
 11456  0021A4  C06B  F07E         	movff	?___ftmul+2,CheckFlashPrecentage@precentage+2
 11457                           
 11458                           ;FlashApp.c: 208: return (precentage > 75) ? 1 : 0;
 11459  0021A8  0E00               	movlw	0
 11460  0021AA  6E18               	movwf	___ftge@ff1,c
 11461  0021AC  0E96               	movlw	150
 11462  0021AE  6E19               	movwf	___ftge@ff1+1,c
 11463  0021B0  0E42               	movlw	66
 11464  0021B2  6E1A               	movwf	___ftge@ff1+2,c
 11465  0021B4  C07C  F01B         	movff	CheckFlashPrecentage@precentage,___ftge@ff2
 11466  0021B8  C07D  F01C         	movff	CheckFlashPrecentage@precentage+1,___ftge@ff2+1
 11467  0021BC  C07E  F01D         	movff	CheckFlashPrecentage@precentage+2,___ftge@ff2+2
 11468  0021C0  ECB2  F012         	call	___ftge	;wreg free
 11469  0021C4  B0D8               	btfsc	status,0,c
 11470  0021C6  D002               	goto	u7800
 11471  0021C8  0E01               	movlw	1
 11472  0021CA  0012               	return	
 11473  0021CC                     u7800:
 11474  0021CC  0E00               	movlw	0
 11475  0021CE  0012               	return	
 11476  0021D0                     __end_of_CheckFlashPrecentage:
 11477                           	opt stack 0
 11478                           tosu	equ	0xFFF
 11479                           tosh	equ	0xFFE
 11480                           tosl	equ	0xFFD
 11481                           pclath	equ	0xFFA
 11482                           tblptru	equ	0xFF8
 11483                           tblptrh	equ	0xFF7
 11484                           tblptrl	equ	0xFF6
 11485                           tablat	equ	0xFF5
 11486                           prodh	equ	0xFF4
 11487                           prodl	equ	0xFF3
 11488                           intcon	equ	0xFF2
 11489                           intcon2	equ	0xFF1
 11490                           postinc0	equ	0xFEE
 11491                           wreg	equ	0xFE8
 11492                           indf1	equ	0xFE7
 11493                           postdec1	equ	0xFE5
 11494                           fsr1h	equ	0xFE2
 11495                           fsr1l	equ	0xFE1
 11496                           indf2	equ	0xFDF
 11497                           postinc2	equ	0xFDE
 11498                           postdec2	equ	0xFDD
 11499                           fsr2h	equ	0xFDA
 11500                           fsr2l	equ	0xFD9
 11501                           status	equ	0xFD8
 11502                           
 11503 ;; *************** function _BlinkOkLeds *****************
 11504 ;; Defined at:
 11505 ;;		line 24 in file "LedsApp.c"
 11506 ;; Parameters:    Size  Location     Type
 11507 ;;  state           1    wreg     enum E7550
 11508 ;; Auto vars:     Size  Location     Type
 11509 ;;  state           1   26[COMRAM] enum E7550
 11510 ;;  idx             2   27[COMRAM] int 
 11511 ;; Return value:  Size  Location     Type
 11512 ;;                  1    wreg      void 
 11513 ;; Registers used:
 11514 ;;		wreg, status,2, status,0
 11515 ;; Tracked objects:
 11516 ;;		On entry : 0/0
 11517 ;;		On exit  : 0/0
 11518 ;;		Unchanged: 0/0
 11519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11520 ;;      Params:         0       0       0       0       0       0       0
 11521 ;;      Locals:         3       0       0       0       0       0       0
 11522 ;;      Temps:          3       0       0       0       0       0       0
 11523 ;;      Totals:         6       0       0       0       0       0       0
 11524 ;;Total ram usage:        6 bytes
 11525 ;; Hardware stack levels used:    1
 11526 ;; Hardware stack levels required when called:    3
 11527 ;; This function calls:
 11528 ;;		Nothing
 11529 ;; This function is called by:
 11530 ;;		_main
 11531 ;; This function uses a non-reentrant model
 11532 ;;
 11533                           
 11534                           	psect	text79
 11535  002980                     __ptext79:
 11536                           	opt stack 0
 11537  002980                     _BlinkOkLeds:
 11538                           	opt stack 27
 11539                           
 11540                           ;incstack = 0
 11541                           ;BlinkOkLeds@state stored from wreg
 11542  002980  6E1B               	movwf	BlinkOkLeds@state,c
 11543                           
 11544                           ;LedsApp.c: 26: for(int idx = 0; idx < state; idx++)
 11545  002982  0E00               	movlw	0
 11546  002984  6E1D               	movwf	BlinkOkLeds@idx+1,c
 11547  002986  0E00               	movlw	0
 11548  002988  6E1C               	movwf	BlinkOkLeds@idx,c
 11549  00298A                     l5920:
 11550  00298A  501B               	movf	BlinkOkLeds@state,w,c
 11551  00298C  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 11552  00298E  6A19               	clrf	(??_BlinkOkLeds+1)& (0+255),c
 11553  002990  5018               	movf	??_BlinkOkLeds,w,c
 11554  002992  5C1C               	subwf	BlinkOkLeds@idx,w,c
 11555  002994  501D               	movf	BlinkOkLeds@idx+1,w,c
 11556  002996  0A80               	xorlw	128
 11557  002998  6E1A               	movwf	(??_BlinkOkLeds+2)& (0+255),c
 11558  00299A  5019               	movf	??_BlinkOkLeds+1,w,c
 11559  00299C  0A80               	xorlw	128
 11560  00299E  581A               	subwfb	(??_BlinkOkLeds+2)& (0+255),w,c
 11561  0029A0  B0D8               	btfsc	status,0,c
 11562  0029A2  0012               	return	
 11563                           
 11564                           ;LedsApp.c: 27: {
 11565                           ;LedsApp.c: 28: LATCbits.LATC0 = 0;
 11566  0029A4  908B               	bcf	3979,0,c	;volatile
 11567                           
 11568                           ;LedsApp.c: 29: _delay((unsigned long)((100)*(8000000/4000.0)));
 11569  0029A6  0E02               	movlw	2
 11570  0029A8  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 11571  0029AA  0E04               	movlw	4
 11572  0029AC  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 11573  0029AE  0EBA               	movlw	186
 11574  0029B0                     u7997:
 11575  0029B0  2EE8               	decfsz	wreg,f,c
 11576  0029B2  D7FE               	bra	u7997
 11577  0029B4  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 11578  0029B6  D7FC               	bra	u7997
 11579  0029B8  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 11580  0029BA  D7FA               	bra	u7997
 11581  0029BC  D000               	nop2	
 11582                           
 11583                           ;LedsApp.c: 30: LATCbits.LATC0 = 1;
 11584  0029BE  808B               	bsf	3979,0,c	;volatile
 11585                           
 11586                           ;LedsApp.c: 31: _delay((unsigned long)((100)*(8000000/4000.0)));
 11587  0029C0  0E02               	movlw	2
 11588  0029C2  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 11589  0029C4  0E04               	movlw	4
 11590  0029C6  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 11591  0029C8  0EBA               	movlw	186
 11592  0029CA                     u8007:
 11593  0029CA  2EE8               	decfsz	wreg,f,c
 11594  0029CC  D7FE               	bra	u8007
 11595  0029CE  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 11596  0029D0  D7FC               	bra	u8007
 11597  0029D2  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 11598  0029D4  D7FA               	bra	u8007
 11599  0029D6  D000               	nop2	
 11600  0029D8  4A1C               	infsnz	BlinkOkLeds@idx,f,c
 11601  0029DA  2A1D               	incf	BlinkOkLeds@idx+1,f,c
 11602  0029DC  D7D6               	goto	l5920
 11603  0029DE                     __end_of_BlinkOkLeds:
 11604                           	opt stack 0
 11605                           tosu	equ	0xFFF
 11606                           tosh	equ	0xFFE
 11607                           tosl	equ	0xFFD
 11608                           pclath	equ	0xFFA
 11609                           tblptru	equ	0xFF8
 11610                           tblptrh	equ	0xFF7
 11611                           tblptrl	equ	0xFF6
 11612                           tablat	equ	0xFF5
 11613                           prodh	equ	0xFF4
 11614                           prodl	equ	0xFF3
 11615                           intcon	equ	0xFF2
 11616                           intcon2	equ	0xFF1
 11617                           postinc0	equ	0xFEE
 11618                           wreg	equ	0xFE8
 11619                           indf1	equ	0xFE7
 11620                           postdec1	equ	0xFE5
 11621                           fsr1h	equ	0xFE2
 11622                           fsr1l	equ	0xFE1
 11623                           indf2	equ	0xFDF
 11624                           postinc2	equ	0xFDE
 11625                           postdec2	equ	0xFDD
 11626                           fsr2h	equ	0xFDA
 11627                           fsr2l	equ	0xFD9
 11628                           status	equ	0xFD8
 11629                           
 11630 ;; *************** function _BlinkErrorLeds *****************
 11631 ;; Defined at:
 11632 ;;		line 13 in file "LedsApp.c"
 11633 ;; Parameters:    Size  Location     Type
 11634 ;;  state           1    wreg     enum E7553
 11635 ;; Auto vars:     Size  Location     Type
 11636 ;;  state           1   26[COMRAM] enum E7553
 11637 ;;  idx             2   27[COMRAM] int 
 11638 ;; Return value:  Size  Location     Type
 11639 ;;                  1    wreg      void 
 11640 ;; Registers used:
 11641 ;;		wreg, status,2, status,0
 11642 ;; Tracked objects:
 11643 ;;		On entry : 0/0
 11644 ;;		On exit  : 0/0
 11645 ;;		Unchanged: 0/0
 11646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11647 ;;      Params:         0       0       0       0       0       0       0
 11648 ;;      Locals:         3       0       0       0       0       0       0
 11649 ;;      Temps:          3       0       0       0       0       0       0
 11650 ;;      Totals:         6       0       0       0       0       0       0
 11651 ;;Total ram usage:        6 bytes
 11652 ;; Hardware stack levels used:    1
 11653 ;; Hardware stack levels required when called:    3
 11654 ;; This function calls:
 11655 ;;		Nothing
 11656 ;; This function is called by:
 11657 ;;		_main
 11658 ;; This function uses a non-reentrant model
 11659 ;;
 11660                           
 11661                           	psect	text80
 11662  0029DE                     __ptext80:
 11663                           	opt stack 0
 11664  0029DE                     _BlinkErrorLeds:
 11665                           	opt stack 27
 11666                           
 11667                           ;incstack = 0
 11668                           ;BlinkErrorLeds@state stored from wreg
 11669  0029DE  6E1B               	movwf	BlinkErrorLeds@state,c
 11670                           
 11671                           ;LedsApp.c: 15: for(int idx = 0; idx < state; idx++)
 11672  0029E0  0E00               	movlw	0
 11673  0029E2  6E1D               	movwf	BlinkErrorLeds@idx+1,c
 11674  0029E4  0E00               	movlw	0
 11675  0029E6  6E1C               	movwf	BlinkErrorLeds@idx,c
 11676  0029E8                     l5908:
 11677  0029E8  501B               	movf	BlinkErrorLeds@state,w,c
 11678  0029EA  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 11679  0029EC  6A19               	clrf	(??_BlinkErrorLeds+1)& (0+255),c
 11680  0029EE  5018               	movf	??_BlinkErrorLeds,w,c
 11681  0029F0  5C1C               	subwf	BlinkErrorLeds@idx,w,c
 11682  0029F2  501D               	movf	BlinkErrorLeds@idx+1,w,c
 11683  0029F4  0A80               	xorlw	128
 11684  0029F6  6E1A               	movwf	(??_BlinkErrorLeds+2)& (0+255),c
 11685  0029F8  5019               	movf	??_BlinkErrorLeds+1,w,c
 11686  0029FA  0A80               	xorlw	128
 11687  0029FC  581A               	subwfb	(??_BlinkErrorLeds+2)& (0+255),w,c
 11688  0029FE  B0D8               	btfsc	status,0,c
 11689  002A00  0012               	return	
 11690                           
 11691                           ;LedsApp.c: 16: {
 11692                           ;LedsApp.c: 17: LATBbits.LATB4 = 0;
 11693  002A02  988A               	bcf	3978,4,c	;volatile
 11694                           
 11695                           ;LedsApp.c: 18: _delay((unsigned long)((100)*(8000000/4000.0)));
 11696  002A04  0E02               	movlw	2
 11697  002A06  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
 11698  002A08  0E04               	movlw	4
 11699  002A0A  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 11700  002A0C  0EBA               	movlw	186
 11701  002A0E                     u8017:
 11702  002A0E  2EE8               	decfsz	wreg,f,c
 11703  002A10  D7FE               	bra	u8017
 11704  002A12  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
 11705  002A14  D7FC               	bra	u8017
 11706  002A16  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
 11707  002A18  D7FA               	bra	u8017
 11708  002A1A  D000               	nop2	
 11709                           
 11710                           ;LedsApp.c: 19: LATBbits.LATB4 = 1;
 11711  002A1C  888A               	bsf	3978,4,c	;volatile
 11712                           
 11713                           ;LedsApp.c: 20: _delay((unsigned long)((100)*(8000000/4000.0)));
 11714  002A1E  0E02               	movlw	2
 11715  002A20  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
 11716  002A22  0E04               	movlw	4
 11717  002A24  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 11718  002A26  0EBA               	movlw	186
 11719  002A28                     u8027:
 11720  002A28  2EE8               	decfsz	wreg,f,c
 11721  002A2A  D7FE               	bra	u8027
 11722  002A2C  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
 11723  002A2E  D7FC               	bra	u8027
 11724  002A30  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
 11725  002A32  D7FA               	bra	u8027
 11726  002A34  D000               	nop2	
 11727  002A36  4A1C               	infsnz	BlinkErrorLeds@idx,f,c
 11728  002A38  2A1D               	incf	BlinkErrorLeds@idx+1,f,c
 11729  002A3A  D7D6               	goto	l5908
 11730  002A3C                     __end_of_BlinkErrorLeds:
 11731                           	opt stack 0
 11732                           tosu	equ	0xFFF
 11733                           tosh	equ	0xFFE
 11734                           tosl	equ	0xFFD
 11735                           pclath	equ	0xFFA
 11736                           tblptru	equ	0xFF8
 11737                           tblptrh	equ	0xFF7
 11738                           tblptrl	equ	0xFF6
 11739                           tablat	equ	0xFF5
 11740                           prodh	equ	0xFF4
 11741                           prodl	equ	0xFF3
 11742                           intcon	equ	0xFF2
 11743                           intcon2	equ	0xFF1
 11744                           postinc0	equ	0xFEE
 11745                           wreg	equ	0xFE8
 11746                           indf1	equ	0xFE7
 11747                           postdec1	equ	0xFE5
 11748                           fsr1h	equ	0xFE2
 11749                           fsr1l	equ	0xFE1
 11750                           indf2	equ	0xFDF
 11751                           postinc2	equ	0xFDE
 11752                           postdec2	equ	0xFDD
 11753                           fsr2h	equ	0xFDA
 11754                           fsr2l	equ	0xFD9
 11755                           status	equ	0xFD8
 11756                           
 11757 ;; *************** function _AdcConvert *****************
 11758 ;; Defined at:
 11759 ;;		line 56 in file "AdcApp.c"
 11760 ;; Parameters:    Size  Location     Type
 11761 ;;		None
 11762 ;; Auto vars:     Size  Location     Type
 11763 ;;  _adcResult      2   83[BANK0 ] unsigned int 
 11764 ;;  idx             1   92[BANK0 ] unsigned char 
 11765 ;;  _adcResult      2   85[BANK0 ] unsigned int 
 11766 ;;  adcRes          2   90[BANK0 ] unsigned int 
 11767 ;; Return value:  Size  Location     Type
 11768 ;;                  1    wreg      void 
 11769 ;; Registers used:
 11770 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11771 ;; Tracked objects:
 11772 ;;		On entry : 0/0
 11773 ;;		On exit  : 0/0
 11774 ;;		Unchanged: 0/0
 11775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11776 ;;      Params:         0       0       0       0       0       0       0
 11777 ;;      Locals:         0      10       0       0       0       0       0
 11778 ;;      Temps:          0       2       0       0       0       0       0
 11779 ;;      Totals:         0      12       0       0       0       0       0
 11780 ;;Total ram usage:       12 bytes
 11781 ;; Hardware stack levels used:    1
 11782 ;; Hardware stack levels required when called:    8
 11783 ;; This function calls:
 11784 ;;		_ADC_GetConversion
 11785 ;;		_FlashSampleWrite
 11786 ;;		___ftdiv
 11787 ;;		___ftmul
 11788 ;;		___fttol
 11789 ;;		___lwtoft
 11790 ;;		_pow
 11791 ;; This function is called by:
 11792 ;;		_main
 11793 ;; This function uses a non-reentrant model
 11794 ;;
 11795                           
 11796                           	psect	text81
 11797  001226                     __ptext81:
 11798                           	opt stack 0
 11799  001226                     _AdcConvert:
 11800                           	opt stack 22
 11801                           
 11802                           ;AdcApp.c: 61: uint16_t adcRes = 0;
 11803                           
 11804                           ;incstack = 0
 11805  001226  0E00               	movlw	0
 11806  001228  0100               	movlb	0	; () banked
 11807  00122A  6FBB               	movwf	(AdcConvert@adcRes+1)& (0+255),b
 11808  00122C  0E00               	movlw	0
 11809  00122E  6FBA               	movwf	AdcConvert@adcRes& (0+255),b
 11810                           
 11811                           ;AdcApp.c: 63: if (adcSampleMode == CIRCULAR)
 11812  001230  503C               	movf	_adcSampleMode,w,c
 11813  001232  A4D8               	btfss	status,2,c
 11814  001234  D073               	goto	l108
 11815                           
 11816                           ; BSR set to: 0
 11817                           ;AdcApp.c: 64: {
 11818                           ;AdcApp.c: 65: for(uint8_t idx = 0; idx < (7); idx++)
 11819  001236  0E00               	movlw	0
 11820  001238  6FBC               	movwf	AdcConvert@idx& (0+255),b
 11821  00123A                     l7718:
 11822                           
 11823                           ; BSR set to: 0
 11824  00123A  0E06               	movlw	6
 11825  00123C  65BC               	cpfsgt	AdcConvert@idx& (0+255),b
 11826  00123E  D001               	goto	l109
 11827  001240  0012               	return	
 11828  001242                     l109:
 11829                           
 11830                           ; BSR set to: 0
 11831                           ;AdcApp.c: 66: {
 11832                           ;AdcApp.c: 67: adc_result_t _adcResult = ADC_GetConversion(channelArr[idx]);
 11833                           
 11834                           ; BSR set to: 0
 11835  001242  51BC               	movf	AdcConvert@idx& (0+255),w,b
 11836  001244  0D01               	mullw	1
 11837  001246  0E35               	movlw	low _channelArr
 11838  001248  24F3               	addwf	prodl,w,c
 11839  00124A  6EF6               	movwf	tblptrl,c
 11840  00124C  0E06               	movlw	high _channelArr
 11841  00124E  20F4               	addwfc	prodh,w,c
 11842  001250  6EF7               	movwf	tblptrh,c
 11843  001252                     	if	0	;There are less than 3 active tblptr bytes
 11844  001252                     	endif
 11845  001252  0008               	tblrd		*
 11846  001254  50F5               	movf	tablat,w,c
 11847  001256  ECD0  F019         	call	_ADC_GetConversion
 11848  00125A  C018  F0B3         	movff	?_ADC_GetConversion,AdcConvert@_adcResult
 11849  00125E  C019  F0B4         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult+1
 11850                           
 11851                           ;AdcApp.c: 68: adcRes = (_adcResult/pow(2,(10)))*(3340);
 11852  001262  0E00               	movlw	0
 11853  001264  0100               	movlb	0	; () banked
 11854  001266  6FA3               	movwf	pow@y& (0+255),b
 11855  001268  0E20               	movlw	32
 11856  00126A  6FA4               	movwf	(pow@y+1)& (0+255),b
 11857  00126C  0E41               	movlw	65
 11858  00126E  6FA5               	movwf	(pow@y+2)& (0+255),b
 11859  001270  0E00               	movlw	0
 11860  001272  6FA0               	movwf	pow@x& (0+255),b
 11861  001274  0E00               	movlw	0
 11862  001276  6FA1               	movwf	(pow@x+1)& (0+255),b
 11863  001278  0E40               	movlw	64
 11864  00127A  6FA2               	movwf	(pow@x+2)& (0+255),b
 11865  00127C  ECC5  F00A         	call	_pow	;wreg free
 11866  001280  C0A0  F0B7         	movff	?_pow,_AdcConvert$3254
 11867  001284  C0A1  F0B8         	movff	?_pow+1,_AdcConvert$3254+1
 11868  001288  C0A2  F0B9         	movff	?_pow+2,_AdcConvert$3254+2
 11869                           
 11870                           ;AdcApp.c: 68: adcRes = (_adcResult/pow(2,(10)))*(3340);
 11871  00128C  0EC0               	movlw	192
 11872  00128E  0100               	movlb	0	; () banked
 11873  001290  6F6C               	movwf	___ftmul@f2& (0+255),b
 11874  001292  0E50               	movlw	80
 11875  001294  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 11876  001296  0E45               	movlw	69
 11877  001298  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 11878  00129A  C0B7  F02C         	movff	_AdcConvert$3254,___ftdiv@f2
 11879  00129E  C0B8  F02D         	movff	_AdcConvert$3254+1,___ftdiv@f2+1
 11880  0012A2  C0B9  F02E         	movff	_AdcConvert$3254+2,___ftdiv@f2+2
 11881  0012A6  C0B3  F020         	movff	AdcConvert@_adcResult,___lwtoft@c
 11882  0012AA  C0B4  F021         	movff	AdcConvert@_adcResult+1,___lwtoft@c+1
 11883  0012AE  EC9C  F01A         	call	___lwtoft	;wreg free
 11884  0012B2  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 11885  0012B6  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 11886  0012BA  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 11887  0012BE  EC0E  F00E         	call	___ftdiv	;wreg free
 11888  0012C2  C029  F069         	movff	?___ftdiv,___ftmul@f1
 11889  0012C6  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 11890  0012CA  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 11891  0012CE  EC93  F00D         	call	___ftmul	;wreg free
 11892  0012D2  C069  F078         	movff	?___ftmul,___fttol@f1
 11893  0012D6  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 11894  0012DA  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 11895  0012DE  EC17  F00D         	call	___fttol	;wreg free
 11896  0012E2  C078  F0BA         	movff	?___fttol,AdcConvert@adcRes
 11897  0012E6  C079  F0BB         	movff	?___fttol+1,AdcConvert@adcRes+1
 11898                           
 11899                           ;AdcApp.c: 69: FlashSampleWrite(adcRes, idx + 1);
 11900  0012EA  C0BA  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 11901  0012EE  C0BB  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 11902  0012F2  0100               	movlb	0	; () banked
 11903  0012F4  29BC               	incf	AdcConvert@idx& (0+255),w,b
 11904  0012F6  6E2F               	movwf	FlashSampleWrite@channelNum,c
 11905  0012F8  EC9A  F00C         	call	_FlashSampleWrite	;wreg free
 11906                           
 11907                           ;AdcApp.c: 70: _delay((unsigned long)((250)*(8000000/4000.0)));
 11908  0012FC  0E03               	movlw	3
 11909  0012FE  0100               	movlb	0	; () banked
 11910  001300  6FB2               	movwf	(??_AdcConvert+1)& (0+255),b
 11911  001302  0E8A               	movlw	138
 11912  001304  6FB1               	movwf	??_AdcConvert& (0+255),b
 11913  001306  0E55               	movlw	85
 11914  001308                     u8037:
 11915  001308  2EE8               	decfsz	wreg,f,c
 11916  00130A  D7FE               	bra	u8037
 11917  00130C  2FB1               	decfsz	??_AdcConvert& (0+255),f,b
 11918  00130E  D7FC               	bra	u8037
 11919  001310  2FB2               	decfsz	(??_AdcConvert+1)& (0+255),f,b
 11920  001312  D7FA               	bra	u8037
 11921  001314  D000               	nop2	
 11922  001316  0100               	movlb	0	; () banked
 11923  001318  2BBC               	incf	AdcConvert@idx& (0+255),f,b
 11924  00131A  D78F               	goto	l7718
 11925  00131C                     l108:
 11926                           
 11927                           ; BSR set to: 0
 11928                           ;AdcApp.c: 73: else if (adcSampleMode == SINGLE_CHANNEL)
 11929                           
 11930                           ; BSR set to: 0
 11931  00131C  043C               	decf	_adcSampleMode,w,c
 11932  00131E  A4D8               	btfss	status,2,c
 11933  001320  0012               	return	
 11934                           
 11935                           ; BSR set to: 0
 11936                           ;AdcApp.c: 74: {
 11937                           ;AdcApp.c: 75: adc_result_t _adcResult = ADC_GetConversion(channelArr[channel]);
 11938  001322  51D3               	movf	_channel& (0+255),w,b
 11939  001324  0D01               	mullw	1
 11940  001326  0E35               	movlw	low _channelArr
 11941  001328  24F3               	addwf	prodl,w,c
 11942  00132A  6EF6               	movwf	tblptrl,c
 11943  00132C  0E06               	movlw	high _channelArr
 11944  00132E  20F4               	addwfc	prodh,w,c
 11945  001330  6EF7               	movwf	tblptrh,c
 11946  001332                     	if	0	;There are less than 3 active tblptr bytes
 11947  001332                     	endif
 11948  001332  0008               	tblrd		*
 11949  001334  50F5               	movf	tablat,w,c
 11950  001336  ECD0  F019         	call	_ADC_GetConversion
 11951  00133A  C018  F0B5         	movff	?_ADC_GetConversion,AdcConvert@_adcResult_330
 11952  00133E  C019  F0B6         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult_330+1
 11953                           
 11954                           ;AdcApp.c: 76: adcRes = (_adcResult/pow(2,(10)))*(3340);
 11955  001342  0E00               	movlw	0
 11956  001344  0100               	movlb	0	; () banked
 11957  001346  6FA3               	movwf	pow@y& (0+255),b
 11958  001348  0E20               	movlw	32
 11959  00134A  6FA4               	movwf	(pow@y+1)& (0+255),b
 11960  00134C  0E41               	movlw	65
 11961  00134E  6FA5               	movwf	(pow@y+2)& (0+255),b
 11962  001350  0E00               	movlw	0
 11963  001352  6FA0               	movwf	pow@x& (0+255),b
 11964  001354  0E00               	movlw	0
 11965  001356  6FA1               	movwf	(pow@x+1)& (0+255),b
 11966  001358  0E40               	movlw	64
 11967  00135A  6FA2               	movwf	(pow@x+2)& (0+255),b
 11968  00135C  ECC5  F00A         	call	_pow	;wreg free
 11969  001360  C0A0  F0B7         	movff	?_pow,_AdcConvert$3254
 11970  001364  C0A1  F0B8         	movff	?_pow+1,_AdcConvert$3254+1
 11971  001368  C0A2  F0B9         	movff	?_pow+2,_AdcConvert$3254+2
 11972                           
 11973                           ;AdcApp.c: 76: adcRes = (_adcResult/pow(2,(10)))*(3340);
 11974  00136C  0EC0               	movlw	192
 11975  00136E  0100               	movlb	0	; () banked
 11976  001370  6F6C               	movwf	___ftmul@f2& (0+255),b
 11977  001372  0E50               	movlw	80
 11978  001374  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 11979  001376  0E45               	movlw	69
 11980  001378  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 11981  00137A  C0B7  F02C         	movff	_AdcConvert$3254,___ftdiv@f2
 11982  00137E  C0B8  F02D         	movff	_AdcConvert$3254+1,___ftdiv@f2+1
 11983  001382  C0B9  F02E         	movff	_AdcConvert$3254+2,___ftdiv@f2+2
 11984  001386  C0B5  F020         	movff	AdcConvert@_adcResult_330,___lwtoft@c
 11985  00138A  C0B6  F021         	movff	AdcConvert@_adcResult_330+1,___lwtoft@c+1
 11986  00138E  EC9C  F01A         	call	___lwtoft	;wreg free
 11987  001392  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 11988  001396  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 11989  00139A  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 11990  00139E  EC0E  F00E         	call	___ftdiv	;wreg free
 11991  0013A2  C029  F069         	movff	?___ftdiv,___ftmul@f1
 11992  0013A6  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 11993  0013AA  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 11994  0013AE  EC93  F00D         	call	___ftmul	;wreg free
 11995  0013B2  C069  F078         	movff	?___ftmul,___fttol@f1
 11996  0013B6  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 11997  0013BA  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 11998  0013BE  EC17  F00D         	call	___fttol	;wreg free
 11999  0013C2  C078  F0BA         	movff	?___fttol,AdcConvert@adcRes
 12000  0013C6  C079  F0BB         	movff	?___fttol+1,AdcConvert@adcRes+1
 12001                           
 12002                           ;AdcApp.c: 77: FlashSampleWrite(adcRes, 1);
 12003  0013CA  C0BA  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 12004  0013CE  C0BB  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 12005  0013D2  0E01               	movlw	1
 12006  0013D4  6E2F               	movwf	FlashSampleWrite@channelNum,c
 12007  0013D6  EC9A  F00C         	call	_FlashSampleWrite	;wreg free
 12008  0013DA  0012               	return	
 12009  0013DC                     __end_of_AdcConvert:
 12010                           	opt stack 0
 12011                           tosu	equ	0xFFF
 12012                           tosh	equ	0xFFE
 12013                           tosl	equ	0xFFD
 12014                           pclath	equ	0xFFA
 12015                           tblptru	equ	0xFF8
 12016                           tblptrh	equ	0xFF7
 12017                           tblptrl	equ	0xFF6
 12018                           tablat	equ	0xFF5
 12019                           prodh	equ	0xFF4
 12020                           prodl	equ	0xFF3
 12021                           intcon	equ	0xFF2
 12022                           intcon2	equ	0xFF1
 12023                           postinc0	equ	0xFEE
 12024                           wreg	equ	0xFE8
 12025                           indf1	equ	0xFE7
 12026                           postdec1	equ	0xFE5
 12027                           fsr1h	equ	0xFE2
 12028                           fsr1l	equ	0xFE1
 12029                           indf2	equ	0xFDF
 12030                           postinc2	equ	0xFDE
 12031                           postdec2	equ	0xFDD
 12032                           fsr2h	equ	0xFDA
 12033                           fsr2l	equ	0xFD9
 12034                           status	equ	0xFD8
 12035                           
 12036 ;; *************** function _pow *****************
 12037 ;; Defined at:
 12038 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
 12039 ;; Parameters:    Size  Location     Type
 12040 ;;  x               3   64[BANK0 ] void 
 12041 ;;  y               3   67[BANK0 ] void 
 12042 ;; Auto vars:     Size  Location     Type
 12043 ;;  yi              4   77[BANK0 ] unsigned long 
 12044 ;;  sign            1   76[BANK0 ] unsigned char 
 12045 ;; Return value:  Size  Location     Type
 12046 ;;                  3   64[BANK0 ] unsigned char 
 12047 ;; Registers used:
 12048 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12049 ;; Tracked objects:
 12050 ;;		On entry : 0/0
 12051 ;;		On exit  : 0/0
 12052 ;;		Unchanged: 0/0
 12053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12054 ;;      Params:         0       6       0       0       0       0       0
 12055 ;;      Locals:         0      11       0       0       0       0       0
 12056 ;;      Temps:          0       0       0       0       0       0       0
 12057 ;;      Totals:         0      17       0       0       0       0       0
 12058 ;;Total ram usage:       17 bytes
 12059 ;; Hardware stack levels used:    1
 12060 ;; Hardware stack levels required when called:    7
 12061 ;; This function calls:
 12062 ;;		___ftge
 12063 ;;		___ftmul
 12064 ;;		___ftneg
 12065 ;;		___fttol
 12066 ;;		___lltoft
 12067 ;;		_exp
 12068 ;;		_log
 12069 ;; This function is called by:
 12070 ;;		_AdcConvert
 12071 ;; This function uses a non-reentrant model
 12072 ;;
 12073                           
 12074                           	psect	text82
 12075  00158A                     __ptext82:
 12076                           	opt stack 0
 12077  00158A                     _pow:
 12078                           	opt stack 22
 12079                           
 12080                           ;incstack = 0
 12081  00158A  0E00               	movlw	0
 12082  00158C  0100               	movlb	0	; () banked
 12083  00158E  6FAC               	movwf	pow@sign& (0+255),b
 12084                           
 12085                           ; BSR set to: 0
 12086  001590  51A0               	movf	pow@x& (0+255),w,b
 12087  001592  11A1               	iorwf	(pow@x+1)& (0+255),w,b
 12088  001594  11A2               	iorwf	(pow@x+2)& (0+255),w,b
 12089  001596  A4D8               	btfss	status,2,c
 12090  001598  D01D               	goto	l1843
 12091                           
 12092                           ; BSR set to: 0
 12093  00159A  0E00               	movlw	0
 12094  00159C  6E18               	movwf	___ftge@ff1,c
 12095  00159E  0E00               	movlw	0
 12096  0015A0  6E19               	movwf	___ftge@ff1+1,c
 12097  0015A2  0E00               	movlw	0
 12098  0015A4  6E1A               	movwf	___ftge@ff1+2,c
 12099  0015A6  C0A3  F01B         	movff	pow@y,___ftge@ff2
 12100  0015AA  C0A4  F01C         	movff	pow@y+1,___ftge@ff2+1
 12101  0015AE  C0A5  F01D         	movff	pow@y+2,___ftge@ff2+2
 12102  0015B2  ECB2  F012         	call	___ftge	;wreg free
 12103  0015B6  A0D8               	btfss	status,0,c
 12104  0015B8  D005               	goto	l1844
 12105  0015BA  0E00               	movlw	0
 12106  0015BC  0100               	movlb	0	; () banked
 12107  0015BE  6FC5               	movwf	(_errno+1)& (0+255),b
 12108  0015C0  0E21               	movlw	33
 12109  0015C2  6FC4               	movwf	_errno& (0+255),b
 12110  0015C4                     l1844:
 12111  0015C4  0E00               	movlw	0
 12112  0015C6  0100               	movlb	0	; () banked
 12113  0015C8  6FA0               	movwf	?_pow& (0+255),b
 12114  0015CA  0E00               	movlw	0
 12115  0015CC  6FA1               	movwf	(?_pow+1)& (0+255),b
 12116  0015CE  0E00               	movlw	0
 12117  0015D0  6FA2               	movwf	(?_pow+2)& (0+255),b
 12118                           
 12119                           ; BSR set to: 0
 12120  0015D2  0012               	return	
 12121  0015D4                     l1843:
 12122                           
 12123                           ; BSR set to: 0
 12124                           
 12125                           ; BSR set to: 0
 12126  0015D4  51A3               	movf	pow@y& (0+255),w,b
 12127  0015D6  11A4               	iorwf	(pow@y+1)& (0+255),w,b
 12128  0015D8  11A5               	iorwf	(pow@y+2)& (0+255),w,b
 12129  0015DA  A4D8               	btfss	status,2,c
 12130  0015DC  D007               	goto	l1846
 12131                           
 12132                           ; BSR set to: 0
 12133  0015DE  0E00               	movlw	0
 12134  0015E0  6FA0               	movwf	?_pow& (0+255),b
 12135  0015E2  0E80               	movlw	128
 12136  0015E4  6FA1               	movwf	(?_pow+1)& (0+255),b
 12137  0015E6  0E3F               	movlw	63
 12138  0015E8  6FA2               	movwf	(?_pow+2)& (0+255),b
 12139                           
 12140                           ; BSR set to: 0
 12141  0015EA  0012               	return	
 12142  0015EC                     l1846:
 12143                           
 12144                           ; BSR set to: 0
 12145                           
 12146                           ; BSR set to: 0
 12147  0015EC  AFA2               	btfss	(pow@x+2)& (0+255),7,b
 12148  0015EE  D041               	goto	l1847
 12149                           
 12150                           ; BSR set to: 0
 12151  0015F0  C0A3  F078         	movff	pow@y,___fttol@f1
 12152  0015F4  C0A4  F079         	movff	pow@y+1,___fttol@f1+1
 12153  0015F8  C0A5  F07A         	movff	pow@y+2,___fttol@f1+2
 12154  0015FC  EC17  F00D         	call	___fttol	;wreg free
 12155  001600  C078  F0AD         	movff	?___fttol,pow@yi
 12156  001604  C079  F0AE         	movff	?___fttol+1,pow@yi+1
 12157  001608  C07A  F0AF         	movff	?___fttol+2,pow@yi+2
 12158  00160C  C07B  F0B0         	movff	?___fttol+3,pow@yi+3
 12159  001610  C0AD  F020         	movff	pow@yi,___lltoft@c
 12160  001614  C0AE  F021         	movff	pow@yi+1,___lltoft@c+1
 12161  001618  C0AF  F022         	movff	pow@yi+2,___lltoft@c+2
 12162  00161C  C0B0  F023         	movff	pow@yi+3,___lltoft@c+3
 12163  001620  EC7A  F015         	call	___lltoft	;wreg free
 12164  001624  0100               	movlb	0	; () banked
 12165  001626  51A3               	movf	pow@y& (0+255),w,b
 12166  001628  1820               	xorwf	?___lltoft,w,c
 12167  00162A  E107               	bnz	u7500
 12168  00162C  51A4               	movf	(pow@y+1)& (0+255),w,b
 12169  00162E  1821               	xorwf	?___lltoft+1,w,c
 12170  001630  E104               	bnz	u7500
 12171  001632  51A5               	movf	(pow@y+2)& (0+255),w,b
 12172  001634  1822               	xorwf	?___lltoft+2,w,c
 12173  001636  B4D8               	btfsc	status,2,c
 12174  001638  D00B               	goto	l1848
 12175  00163A                     u7500:
 12176                           
 12177                           ; BSR set to: 0
 12178  00163A  0E00               	movlw	0
 12179  00163C  6FC5               	movwf	(_errno+1)& (0+255),b
 12180  00163E  0E21               	movlw	33
 12181  001640  6FC4               	movwf	_errno& (0+255),b
 12182  001642  0E00               	movlw	0
 12183  001644  6FA0               	movwf	?_pow& (0+255),b
 12184  001646  0E00               	movlw	0
 12185  001648  6FA1               	movwf	(?_pow+1)& (0+255),b
 12186  00164A  0E00               	movlw	0
 12187  00164C  6FA2               	movwf	(?_pow+2)& (0+255),b
 12188                           
 12189                           ; BSR set to: 0
 12190  00164E  0012               	return	
 12191  001650                     l1848:
 12192                           
 12193                           ; BSR set to: 0
 12194                           
 12195                           ; BSR set to: 0
 12196  001650  51AD               	movf	pow@yi& (0+255),w,b
 12197  001652  0B01               	andlw	1
 12198  001654  6FAC               	movwf	pow@sign& (0+255),b
 12199                           
 12200                           ; BSR set to: 0
 12201  001656  C0A0  F018         	movff	pow@x,___ftneg@f1
 12202  00165A  C0A1  F019         	movff	pow@x+1,___ftneg@f1+1
 12203  00165E  C0A2  F01A         	movff	pow@x+2,___ftneg@f1+2
 12204  001662  EC8A  F01A         	call	___ftneg	;wreg free
 12205  001666  C018  F0A0         	movff	?___ftneg,pow@x
 12206  00166A  C019  F0A1         	movff	?___ftneg+1,pow@x+1
 12207  00166E  C01A  F0A2         	movff	?___ftneg+2,pow@x+2
 12208  001672                     l1847:
 12209  001672  C0A0  F08E         	movff	pow@x,log@x
 12210  001676  C0A1  F08F         	movff	pow@x+1,log@x+1
 12211  00167A  C0A2  F090         	movff	pow@x+2,log@x+2
 12212  00167E  EC83  F00B         	call	_log	;wreg free
 12213  001682  C08E  F0A6         	movff	?_log,_pow$3255
 12214  001686  C08F  F0A7         	movff	?_log+1,_pow$3255+1
 12215  00168A  C090  F0A8         	movff	?_log+2,_pow$3255+2
 12216  00168E  C0A6  F069         	movff	_pow$3255,___ftmul@f1
 12217  001692  C0A7  F06A         	movff	_pow$3255+1,___ftmul@f1+1
 12218  001696  C0A8  F06B         	movff	_pow$3255+2,___ftmul@f1+2
 12219  00169A  C0A3  F06C         	movff	pow@y,___ftmul@f2
 12220  00169E  C0A4  F06D         	movff	pow@y+1,___ftmul@f2+1
 12221  0016A2  C0A5  F06E         	movff	pow@y+2,___ftmul@f2+2
 12222  0016A6  EC93  F00D         	call	___ftmul	;wreg free
 12223  0016AA  C069  F0A9         	movff	?___ftmul,_pow$3256
 12224  0016AE  C06A  F0AA         	movff	?___ftmul+1,_pow$3256+1
 12225  0016B2  C06B  F0AB         	movff	?___ftmul+2,_pow$3256+2
 12226  0016B6  C0A9  F097         	movff	_pow$3256,exp@x
 12227  0016BA  C0AA  F098         	movff	_pow$3256+1,exp@x+1
 12228  0016BE  C0AB  F099         	movff	_pow$3256+2,exp@x+2
 12229  0016C2  EC2F  F007         	call	_exp	;wreg free
 12230  0016C6  C097  F0A0         	movff	?_exp,pow@x
 12231  0016CA  C098  F0A1         	movff	?_exp+1,pow@x+1
 12232  0016CE  C099  F0A2         	movff	?_exp+2,pow@x+2
 12233  0016D2  0100               	movlb	0	; () banked
 12234  0016D4  51AC               	movf	pow@sign& (0+255),w,b
 12235  0016D6  B4D8               	btfsc	status,2,c
 12236  0016D8  D00F               	goto	l1849
 12237                           
 12238                           ; BSR set to: 0
 12239  0016DA  C0A0  F018         	movff	pow@x,___ftneg@f1
 12240  0016DE  C0A1  F019         	movff	pow@x+1,___ftneg@f1+1
 12241  0016E2  C0A2  F01A         	movff	pow@x+2,___ftneg@f1+2
 12242  0016E6  EC8A  F01A         	call	___ftneg	;wreg free
 12243  0016EA  C018  F0A0         	movff	?___ftneg,?_pow
 12244  0016EE  C019  F0A1         	movff	?___ftneg+1,?_pow+1
 12245  0016F2  C01A  F0A2         	movff	?___ftneg+2,?_pow+2
 12246  0016F6  0012               	return	
 12247  0016F8                     l1849:
 12248                           
 12249                           ; BSR set to: 0
 12250  0016F8  C0A0  F0A0         	movff	pow@x,?_pow
 12251  0016FC  C0A1  F0A1         	movff	pow@x+1,?_pow+1
 12252  001700  C0A2  F0A2         	movff	pow@x+2,?_pow+2
 12253  001704  0012               	return		;funcret
 12254  001706                     __end_of_pow:
 12255                           	opt stack 0
 12256                           tosu	equ	0xFFF
 12257                           tosh	equ	0xFFE
 12258                           tosl	equ	0xFFD
 12259                           pclath	equ	0xFFA
 12260                           tblptru	equ	0xFF8
 12261                           tblptrh	equ	0xFF7
 12262                           tblptrl	equ	0xFF6
 12263                           tablat	equ	0xFF5
 12264                           prodh	equ	0xFF4
 12265                           prodl	equ	0xFF3
 12266                           intcon	equ	0xFF2
 12267                           intcon2	equ	0xFF1
 12268                           postinc0	equ	0xFEE
 12269                           wreg	equ	0xFE8
 12270                           indf1	equ	0xFE7
 12271                           postdec1	equ	0xFE5
 12272                           fsr1h	equ	0xFE2
 12273                           fsr1l	equ	0xFE1
 12274                           indf2	equ	0xFDF
 12275                           postinc2	equ	0xFDE
 12276                           postdec2	equ	0xFDD
 12277                           fsr2h	equ	0xFDA
 12278                           fsr2l	equ	0xFD9
 12279                           status	equ	0xFD8
 12280                           
 12281 ;; *************** function _log *****************
 12282 ;; Defined at:
 12283 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
 12284 ;; Parameters:    Size  Location     Type
 12285 ;;  x               3   46[BANK0 ] unsigned char 
 12286 ;; Auto vars:     Size  Location     Type
 12287 ;;  exponent        2   49[BANK0 ] int 
 12288 ;; Return value:  Size  Location     Type
 12289 ;;                  3   46[BANK0 ] int 
 12290 ;; Registers used:
 12291 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12292 ;; Tracked objects:
 12293 ;;		On entry : 0/0
 12294 ;;		On exit  : 0/0
 12295 ;;		Unchanged: 0/0
 12296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12297 ;;      Params:         0       3       0       0       0       0       0
 12298 ;;      Locals:         0       2       0       0       0       0       0
 12299 ;;      Temps:          0       0       0       0       0       0       0
 12300 ;;      Totals:         0       5       0       0       0       0       0
 12301 ;;Total ram usage:        5 bytes
 12302 ;; Hardware stack levels used:    1
 12303 ;; Hardware stack levels required when called:    6
 12304 ;; This function calls:
 12305 ;;		___awtoft
 12306 ;;		___ftadd
 12307 ;;		___ftmul
 12308 ;;		_eval_poly
 12309 ;;		_frexp
 12310 ;; This function is called by:
 12311 ;;		_pow
 12312 ;; This function uses a non-reentrant model
 12313 ;;
 12314                           
 12315                           	psect	text83
 12316  001706                     __ptext83:
 12317                           	opt stack 0
 12318  001706                     _log:
 12319                           	opt stack 22
 12320                           
 12321                           ;incstack = 0
 12322  001706  0100               	movlb	0	; () banked
 12323  001708  AF90               	btfss	(log@x+2)& (0+255),7,b
 12324  00170A  D00B               	goto	l2105
 12325                           
 12326                           ; BSR set to: 0
 12327  00170C  0E00               	movlw	0
 12328  00170E  6FC5               	movwf	(_errno+1)& (0+255),b
 12329  001710  0E21               	movlw	33
 12330  001712  6FC4               	movwf	_errno& (0+255),b
 12331  001714  0E00               	movlw	0
 12332  001716  6F8E               	movwf	?_log& (0+255),b
 12333  001718  0E00               	movlw	0
 12334  00171A  6F8F               	movwf	(?_log+1)& (0+255),b
 12335  00171C  0E00               	movlw	0
 12336  00171E  6F90               	movwf	(?_log+2)& (0+255),b
 12337                           
 12338                           ; BSR set to: 0
 12339  001720  0012               	return	
 12340  001722                     l2105:
 12341                           
 12342                           ; BSR set to: 0
 12343                           
 12344                           ; BSR set to: 0
 12345  001722  518E               	movf	log@x& (0+255),w,b
 12346  001724  118F               	iorwf	(log@x+1)& (0+255),w,b
 12347  001726  1190               	iorwf	(log@x+2)& (0+255),w,b
 12348  001728  A4D8               	btfss	status,2,c
 12349  00172A  D00B               	goto	l2107
 12350                           
 12351                           ; BSR set to: 0
 12352  00172C  0E00               	movlw	0
 12353  00172E  6FC5               	movwf	(_errno+1)& (0+255),b
 12354  001730  0E22               	movlw	34
 12355  001732  6FC4               	movwf	_errno& (0+255),b
 12356  001734  0E00               	movlw	0
 12357  001736  6F8E               	movwf	?_log& (0+255),b
 12358  001738  0E00               	movlw	0
 12359  00173A  6F8F               	movwf	(?_log+1)& (0+255),b
 12360  00173C  0E00               	movlw	0
 12361  00173E  6F90               	movwf	(?_log+2)& (0+255),b
 12362                           
 12363                           ; BSR set to: 0
 12364  001740  0012               	return	
 12365  001742                     l2107:
 12366                           
 12367                           ; BSR set to: 0
 12368                           
 12369                           ; BSR set to: 0
 12370  001742  0E00               	movlw	0
 12371  001744  6F6C               	movwf	___ftmul@f2& (0+255),b
 12372  001746  0E00               	movlw	0
 12373  001748  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 12374  00174A  0E40               	movlw	64
 12375  00174C  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 12376  00174E  0E91               	movlw	low log@exponent
 12377  001750  6E1B               	movwf	frexp@eptr,c
 12378  001752  0E00               	movlw	high log@exponent
 12379  001754  6E1C               	movwf	frexp@eptr+1,c
 12380  001756  C08E  F018         	movff	log@x,frexp@value
 12381  00175A  C08F  F019         	movff	log@x+1,frexp@value+1
 12382  00175E  C090  F01A         	movff	log@x+2,frexp@value+2
 12383  001762  EC6A  F012         	call	_frexp	;wreg free
 12384  001766  C018  F069         	movff	?_frexp,___ftmul@f1
 12385  00176A  C019  F06A         	movff	?_frexp+1,___ftmul@f1+1
 12386  00176E  C01A  F06B         	movff	?_frexp+2,___ftmul@f1+2
 12387  001772  EC93  F00D         	call	___ftmul	;wreg free
 12388  001776  C069  F078         	movff	?___ftmul,___ftadd@f1
 12389  00177A  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 12390  00177E  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 12391  001782  0E00               	movlw	0
 12392  001784  0100               	movlb	0	; () banked
 12393  001786  6F7B               	movwf	___ftadd@f2& (0+255),b
 12394  001788  0E80               	movlw	128
 12395  00178A  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 12396  00178C  0EBF               	movlw	191
 12397  00178E  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 12398  001790  ECEE  F009         	call	___ftadd	;wreg free
 12399  001794  C078  F08E         	movff	?___ftadd,log@x
 12400  001798  C079  F08F         	movff	?___ftadd+1,log@x+1
 12401  00179C  C07A  F090         	movff	?___ftadd+2,log@x+2
 12402  0017A0  0100               	movlb	0	; () banked
 12403  0017A2  0791               	decf	log@exponent& (0+255),f,b
 12404  0017A4  A0D8               	btfss	status,0,c
 12405  0017A6  0792               	decf	(log@exponent+1)& (0+255),f,b
 12406                           
 12407                           ; BSR set to: 0
 12408  0017A8  C08E  F084         	movff	log@x,eval_poly@x
 12409  0017AC  C08F  F085         	movff	log@x+1,eval_poly@x+1
 12410  0017B0  C090  F086         	movff	log@x+2,eval_poly@x+2
 12411  0017B4  0E5A               	movlw	low log@coeff
 12412  0017B6  6F87               	movwf	eval_poly@d& (0+255),b
 12413  0017B8  0E06               	movlw	high log@coeff
 12414  0017BA  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 12415  0017BC  0E00               	movlw	0
 12416  0017BE  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 12417  0017C0  0E08               	movlw	8
 12418  0017C2  6F89               	movwf	eval_poly@n& (0+255),b
 12419  0017C4  EC65  F00F         	call	_eval_poly	;wreg free
 12420  0017C8  C084  F08E         	movff	?_eval_poly,log@x
 12421  0017CC  C085  F08F         	movff	?_eval_poly+1,log@x+1
 12422  0017D0  C086  F090         	movff	?_eval_poly+2,log@x+2
 12423  0017D4  0E72               	movlw	114
 12424  0017D6  0100               	movlb	0	; () banked
 12425  0017D8  6F6C               	movwf	___ftmul@f2& (0+255),b
 12426  0017DA  0E31               	movlw	49
 12427  0017DC  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 12428  0017DE  0E3F               	movlw	63
 12429  0017E0  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 12430  0017E2  C091  F020         	movff	log@exponent,___awtoft@c
 12431  0017E6  C092  F021         	movff	log@exponent+1,___awtoft@c+1
 12432  0017EA  ECC5  F018         	call	___awtoft	;wreg free
 12433  0017EE  C020  F069         	movff	?___awtoft,___ftmul@f1
 12434  0017F2  C021  F06A         	movff	?___awtoft+1,___ftmul@f1+1
 12435  0017F6  C022  F06B         	movff	?___awtoft+2,___ftmul@f1+2
 12436  0017FA  EC93  F00D         	call	___ftmul	;wreg free
 12437  0017FE  C069  F078         	movff	?___ftmul,___ftadd@f1
 12438  001802  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 12439  001806  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 12440  00180A  C08E  F07B         	movff	log@x,___ftadd@f2
 12441  00180E  C08F  F07C         	movff	log@x+1,___ftadd@f2+1
 12442  001812  C090  F07D         	movff	log@x+2,___ftadd@f2+2
 12443  001816  ECEE  F009         	call	___ftadd	;wreg free
 12444  00181A  C078  F08E         	movff	?___ftadd,?_log
 12445  00181E  C079  F08F         	movff	?___ftadd+1,?_log+1
 12446  001822  C07A  F090         	movff	?___ftadd+2,?_log+2
 12447  001826  0012               	return	
 12448  001828                     __end_of_log:
 12449                           	opt stack 0
 12450                           tosu	equ	0xFFF
 12451                           tosh	equ	0xFFE
 12452                           tosl	equ	0xFFD
 12453                           pclath	equ	0xFFA
 12454                           tblptru	equ	0xFF8
 12455                           tblptrh	equ	0xFF7
 12456                           tblptrl	equ	0xFF6
 12457                           tablat	equ	0xFF5
 12458                           prodh	equ	0xFF4
 12459                           prodl	equ	0xFF3
 12460                           intcon	equ	0xFF2
 12461                           intcon2	equ	0xFF1
 12462                           postinc0	equ	0xFEE
 12463                           wreg	equ	0xFE8
 12464                           indf1	equ	0xFE7
 12465                           postdec1	equ	0xFE5
 12466                           fsr1h	equ	0xFE2
 12467                           fsr1l	equ	0xFE1
 12468                           indf2	equ	0xFDF
 12469                           postinc2	equ	0xFDE
 12470                           postdec2	equ	0xFDD
 12471                           fsr2h	equ	0xFDA
 12472                           fsr2l	equ	0xFD9
 12473                           status	equ	0xFD8
 12474                           
 12475 ;; *************** function _exp *****************
 12476 ;; Defined at:
 12477 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
 12478 ;; Parameters:    Size  Location     Type
 12479 ;;  x               3   55[BANK0 ] int 
 12480 ;; Auto vars:     Size  Location     Type
 12481 ;;  exponent        2   61[BANK0 ] int 
 12482 ;;  sign            1   63[BANK0 ] unsigned char 
 12483 ;; Return value:  Size  Location     Type
 12484 ;;                  3   55[BANK0 ] unsigned char 
 12485 ;; Registers used:
 12486 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12487 ;; Tracked objects:
 12488 ;;		On entry : 0/0
 12489 ;;		On exit  : 0/0
 12490 ;;		Unchanged: 0/0
 12491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12492 ;;      Params:         0       3       0       0       0       0       0
 12493 ;;      Locals:         0       6       0       0       0       0       0
 12494 ;;      Temps:          0       0       0       0       0       0       0
 12495 ;;      Totals:         0       9       0       0       0       0       0
 12496 ;;Total ram usage:        9 bytes
 12497 ;; Hardware stack levels used:    1
 12498 ;; Hardware stack levels required when called:    6
 12499 ;; This function calls:
 12500 ;;		___awtoft
 12501 ;;		___ftdiv
 12502 ;;		___ftge
 12503 ;;		___ftmul
 12504 ;;		___ftneg
 12505 ;;		___ftsub
 12506 ;;		___fttol
 12507 ;;		_eval_poly
 12508 ;;		_floor
 12509 ;;		_ldexp
 12510 ;; This function is called by:
 12511 ;;		_pow
 12512 ;; This function uses a non-reentrant model
 12513 ;;
 12514                           
 12515                           	psect	text84
 12516  000E5E                     __ptext84:
 12517                           	opt stack 0
 12518  000E5E                     _exp:
 12519                           	opt stack 22
 12520                           
 12521                           ;incstack = 0
 12522  000E5E  0100               	movlb	0	; () banked
 12523  000E60  5197               	movf	exp@x& (0+255),w,b
 12524  000E62  1198               	iorwf	(exp@x+1)& (0+255),w,b
 12525  000E64  1199               	iorwf	(exp@x+2)& (0+255),w,b
 12526  000E66  A4D8               	btfss	status,2,c
 12527  000E68  D007               	goto	l2041
 12528                           
 12529                           ; BSR set to: 0
 12530  000E6A  0E00               	movlw	0
 12531  000E6C  6F97               	movwf	?_exp& (0+255),b
 12532  000E6E  0E80               	movlw	128
 12533  000E70  6F98               	movwf	(?_exp+1)& (0+255),b
 12534  000E72  0E3F               	movlw	63
 12535  000E74  6F99               	movwf	(?_exp+2)& (0+255),b
 12536                           
 12537                           ; BSR set to: 0
 12538  000E76  0012               	return	
 12539  000E78                     l2041:
 12540                           
 12541                           ; BSR set to: 0
 12542                           
 12543                           ; BSR set to: 0
 12544  000E78  0E72               	movlw	114
 12545  000E7A  6E18               	movwf	___ftge@ff1,c
 12546  000E7C  0E31               	movlw	49
 12547  000E7E  6E19               	movwf	___ftge@ff1+1,c
 12548  000E80  0E44               	movlw	68
 12549  000E82  6E1A               	movwf	___ftge@ff1+2,c
 12550  000E84  C097  F01B         	movff	exp@x,___ftge@ff2
 12551  000E88  C098  F01C         	movff	exp@x+1,___ftge@ff2+1
 12552  000E8C  C099  F01D         	movff	exp@x+2,___ftge@ff2+2
 12553  000E90  ECB2  F012         	call	___ftge	;wreg free
 12554  000E94  B0D8               	btfsc	status,0,c
 12555  000E96  D00C               	goto	l2043
 12556  000E98  0E00               	movlw	0
 12557  000E9A  0100               	movlb	0	; () banked
 12558  000E9C  6FC5               	movwf	(_errno+1)& (0+255),b
 12559  000E9E  0E22               	movlw	34
 12560  000EA0  6FC4               	movwf	_errno& (0+255),b
 12561  000EA2  0EFF               	movlw	255
 12562  000EA4  6F97               	movwf	?_exp& (0+255),b
 12563  000EA6  0E7F               	movlw	127
 12564  000EA8  6F98               	movwf	(?_exp+1)& (0+255),b
 12565  000EAA  0E7F               	movlw	127
 12566  000EAC  6F99               	movwf	(?_exp+2)& (0+255),b
 12567                           
 12568                           ; BSR set to: 0
 12569  000EAE  0012               	return	
 12570  000EB0                     l2043:
 12571                           
 12572                           ; BSR set to: 0
 12573  000EB0  C097  F018         	movff	exp@x,___ftge@ff1
 12574  000EB4  C098  F019         	movff	exp@x+1,___ftge@ff1+1
 12575  000EB8  C099  F01A         	movff	exp@x+2,___ftge@ff1+2
 12576  000EBC  0E49               	movlw	73
 12577  000EBE  6E1B               	movwf	___ftge@ff2,c
 12578  000EC0  0E3A               	movlw	58
 12579  000EC2  6E1C               	movwf	___ftge@ff2+1,c
 12580  000EC4  0EC4               	movlw	196
 12581  000EC6  6E1D               	movwf	___ftge@ff2+2,c
 12582  000EC8  ECB2  F012         	call	___ftge	;wreg free
 12583  000ECC  B0D8               	btfsc	status,0,c
 12584  000ECE  D00C               	goto	l2044
 12585  000ED0  0E00               	movlw	0
 12586  000ED2  0100               	movlb	0	; () banked
 12587  000ED4  6FC5               	movwf	(_errno+1)& (0+255),b
 12588  000ED6  0E22               	movlw	34
 12589  000ED8  6FC4               	movwf	_errno& (0+255),b
 12590  000EDA  0E00               	movlw	0
 12591  000EDC  6F97               	movwf	?_exp& (0+255),b
 12592  000EDE  0E00               	movlw	0
 12593  000EE0  6F98               	movwf	(?_exp+1)& (0+255),b
 12594  000EE2  0E00               	movlw	0
 12595  000EE4  6F99               	movwf	(?_exp+2)& (0+255),b
 12596                           
 12597                           ; BSR set to: 0
 12598  000EE6  0012               	return	
 12599  000EE8                     l2044:
 12600                           
 12601                           ; BSR set to: 0
 12602  000EE8  0100               	movlb	0	; () banked
 12603  000EEA  AF99               	btfss	(exp@x+2)& (0+255),7,b
 12604  000EEC  D002               	goto	u7410
 12605  000EEE  0E01               	movlw	1
 12606  000EF0  D001               	goto	u7420
 12607  000EF2                     u7410:
 12608  000EF2  0E00               	movlw	0
 12609  000EF4                     u7420:
 12610  000EF4  6F9F               	movwf	exp@sign& (0+255),b
 12611                           
 12612                           ; BSR set to: 0
 12613  000EF6  519F               	movf	exp@sign& (0+255),w,b
 12614  000EF8  B4D8               	btfsc	status,2,c
 12615  000EFA  D00E               	goto	l2045
 12616                           
 12617                           ; BSR set to: 0
 12618  000EFC  C097  F018         	movff	exp@x,___ftneg@f1
 12619  000F00  C098  F019         	movff	exp@x+1,___ftneg@f1+1
 12620  000F04  C099  F01A         	movff	exp@x+2,___ftneg@f1+2
 12621  000F08  EC8A  F01A         	call	___ftneg	;wreg free
 12622  000F0C  C018  F097         	movff	?___ftneg,exp@x
 12623  000F10  C019  F098         	movff	?___ftneg+1,exp@x+1
 12624  000F14  C01A  F099         	movff	?___ftneg+2,exp@x+2
 12625  000F18                     l2045:
 12626  000F18  C097  F069         	movff	exp@x,___ftmul@f1
 12627  000F1C  C098  F06A         	movff	exp@x+1,___ftmul@f1+1
 12628  000F20  C099  F06B         	movff	exp@x+2,___ftmul@f1+2
 12629  000F24  0EAA               	movlw	170
 12630  000F26  0100               	movlb	0	; () banked
 12631  000F28  6F6C               	movwf	___ftmul@f2& (0+255),b
 12632  000F2A  0EB8               	movlw	184
 12633  000F2C  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 12634  000F2E  0E3F               	movlw	63
 12635  000F30  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 12636  000F32  EC93  F00D         	call	___ftmul	;wreg free
 12637  000F36  C069  F097         	movff	?___ftmul,exp@x
 12638  000F3A  C06A  F098         	movff	?___ftmul+1,exp@x+1
 12639  000F3E  C06B  F099         	movff	?___ftmul+2,exp@x+2
 12640  000F42  C097  F08F         	movff	exp@x,floor@x
 12641  000F46  C098  F090         	movff	exp@x+1,floor@x+1
 12642  000F4A  C099  F091         	movff	exp@x+2,floor@x+2
 12643  000F4E  ECF4  F00E         	call	_floor	;wreg free
 12644  000F52  C08F  F09A         	movff	?_floor,_exp$3257
 12645  000F56  C090  F09B         	movff	?_floor+1,_exp$3257+1
 12646  000F5A  C091  F09C         	movff	?_floor+2,_exp$3257+2
 12647  000F5E  C09A  F078         	movff	_exp$3257,___fttol@f1
 12648  000F62  C09B  F079         	movff	_exp$3257+1,___fttol@f1+1
 12649  000F66  C09C  F07A         	movff	_exp$3257+2,___fttol@f1+2
 12650  000F6A  EC17  F00D         	call	___fttol	;wreg free
 12651  000F6E  C078  F09D         	movff	?___fttol,exp@exponent
 12652  000F72  C079  F09E         	movff	?___fttol+1,exp@exponent+1
 12653  000F76  C097  F084         	movff	exp@x,___ftsub@f1
 12654  000F7A  C098  F085         	movff	exp@x+1,___ftsub@f1+1
 12655  000F7E  C099  F086         	movff	exp@x+2,___ftsub@f1+2
 12656  000F82  C09D  F020         	movff	exp@exponent,___awtoft@c
 12657  000F86  C09E  F021         	movff	exp@exponent+1,___awtoft@c+1
 12658  000F8A  ECC5  F018         	call	___awtoft	;wreg free
 12659  000F8E  C020  F087         	movff	?___awtoft,___ftsub@f2
 12660  000F92  C021  F088         	movff	?___awtoft+1,___ftsub@f2+1
 12661  000F96  C022  F089         	movff	?___awtoft+2,___ftsub@f2+2
 12662  000F9A  EC0B  F018         	call	___ftsub	;wreg free
 12663  000F9E  C084  F097         	movff	?___ftsub,exp@x
 12664  000FA2  C085  F098         	movff	?___ftsub+1,exp@x+1
 12665  000FA6  C086  F099         	movff	?___ftsub+2,exp@x+2
 12666  000FAA  C097  F084         	movff	exp@x,eval_poly@x
 12667  000FAE  C098  F085         	movff	exp@x+1,eval_poly@x+1
 12668  000FB2  C099  F086         	movff	exp@x+2,eval_poly@x+2
 12669  000FB6  0E3C               	movlw	low exp@coeff
 12670  000FB8  0100               	movlb	0	; () banked
 12671  000FBA  6F87               	movwf	eval_poly@d& (0+255),b
 12672  000FBC  0E06               	movlw	high exp@coeff
 12673  000FBE  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 12674  000FC0  0E00               	movlw	0
 12675  000FC2  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 12676  000FC4  0E09               	movlw	9
 12677  000FC6  6F89               	movwf	eval_poly@n& (0+255),b
 12678  000FC8  EC65  F00F         	call	_eval_poly	;wreg free
 12679  000FCC  C084  F08E         	movff	?_eval_poly,ldexp@value
 12680  000FD0  C085  F08F         	movff	?_eval_poly+1,ldexp@value+1
 12681  000FD4  C086  F090         	movff	?_eval_poly+2,ldexp@value+2
 12682  000FD8  C09D  F091         	movff	exp@exponent,ldexp@newexp
 12683  000FDC  C09E  F092         	movff	exp@exponent+1,ldexp@newexp+1
 12684  000FE0  ECD0  F00F         	call	_ldexp	;wreg free
 12685  000FE4  C08E  F097         	movff	?_ldexp,exp@x
 12686  000FE8  C08F  F098         	movff	?_ldexp+1,exp@x+1
 12687  000FEC  C090  F099         	movff	?_ldexp+2,exp@x+2
 12688  000FF0  0100               	movlb	0	; () banked
 12689  000FF2  519F               	movf	exp@sign& (0+255),w,b
 12690  000FF4  B4D8               	btfsc	status,2,c
 12691  000FF6  D025               	goto	l2046
 12692                           
 12693                           ; BSR set to: 0
 12694  000FF8  2997               	incf	exp@x& (0+255),w,b
 12695  000FFA  E10E               	bnz	l7502
 12696  000FFC  0E7F               	movlw	127
 12697  000FFE  1998               	xorwf	(exp@x+1)& (0+255),w,b
 12698  001000  E10B               	bnz	l7502
 12699  001002  0E7F               	movlw	127
 12700  001004  1999               	xorwf	(exp@x+2)& (0+255),w,b
 12701  001006  A4D8               	btfss	status,2,c
 12702  001008  D007               	goto	l2047
 12703                           
 12704                           ; BSR set to: 0
 12705  00100A  0E00               	movlw	0
 12706  00100C  6F97               	movwf	?_exp& (0+255),b
 12707  00100E  0E00               	movlw	0
 12708  001010  6F98               	movwf	(?_exp+1)& (0+255),b
 12709  001012  0E00               	movlw	0
 12710  001014  6F99               	movwf	(?_exp+2)& (0+255),b
 12711                           
 12712                           ; BSR set to: 0
 12713  001016  0012               	return	
 12714  001018                     l2047:
 12715  001018                     l7502:
 12716                           
 12717                           ; BSR set to: 0
 12718  001018  0E00               	movlw	0
 12719  00101A  6E29               	movwf	___ftdiv@f1,c
 12720  00101C  0E80               	movlw	128
 12721  00101E  6E2A               	movwf	___ftdiv@f1+1,c
 12722  001020  0E3F               	movlw	63
 12723  001022  6E2B               	movwf	___ftdiv@f1+2,c
 12724  001024  C097  F02C         	movff	exp@x,___ftdiv@f2
 12725  001028  C098  F02D         	movff	exp@x+1,___ftdiv@f2+1
 12726  00102C  C099  F02E         	movff	exp@x+2,___ftdiv@f2+2
 12727  001030  EC0E  F00E         	call	___ftdiv	;wreg free
 12728  001034  C029  F097         	movff	?___ftdiv,?_exp
 12729  001038  C02A  F098         	movff	?___ftdiv+1,?_exp+1
 12730  00103C  C02B  F099         	movff	?___ftdiv+2,?_exp+2
 12731  001040  0012               	return	
 12732  001042                     l2046:
 12733                           
 12734                           ; BSR set to: 0
 12735  001042  C097  F097         	movff	exp@x,?_exp
 12736  001046  C098  F098         	movff	exp@x+1,?_exp+1
 12737  00104A  C099  F099         	movff	exp@x+2,?_exp+2
 12738  00104E  0012               	return		;funcret
 12739  001050                     __end_of_exp:
 12740                           	opt stack 0
 12741                           tosu	equ	0xFFF
 12742                           tosh	equ	0xFFE
 12743                           tosl	equ	0xFFD
 12744                           pclath	equ	0xFFA
 12745                           tblptru	equ	0xFF8
 12746                           tblptrh	equ	0xFF7
 12747                           tblptrl	equ	0xFF6
 12748                           tablat	equ	0xFF5
 12749                           prodh	equ	0xFF4
 12750                           prodl	equ	0xFF3
 12751                           intcon	equ	0xFF2
 12752                           intcon2	equ	0xFF1
 12753                           postinc0	equ	0xFEE
 12754                           wreg	equ	0xFE8
 12755                           indf1	equ	0xFE7
 12756                           postdec1	equ	0xFE5
 12757                           fsr1h	equ	0xFE2
 12758                           fsr1l	equ	0xFE1
 12759                           indf2	equ	0xFDF
 12760                           postinc2	equ	0xFDE
 12761                           postdec2	equ	0xFDD
 12762                           fsr2h	equ	0xFDA
 12763                           fsr2l	equ	0xFD9
 12764                           status	equ	0xFD8
 12765                           
 12766 ;; *************** function _ldexp *****************
 12767 ;; Defined at:
 12768 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 12769 ;; Parameters:    Size  Location     Type
 12770 ;;  value           3   46[BANK0 ] unsigned char 
 12771 ;;  newexp          2   49[BANK0 ] int 
 12772 ;; Auto vars:     Size  Location     Type
 12773 ;;		None
 12774 ;; Return value:  Size  Location     Type
 12775 ;;                  3   46[BANK0 ] int 
 12776 ;; Registers used:
 12777 ;;		wreg, status,2, status,0
 12778 ;; Tracked objects:
 12779 ;;		On entry : 0/0
 12780 ;;		On exit  : 0/0
 12781 ;;		Unchanged: 0/0
 12782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12783 ;;      Params:         0       5       0       0       0       0       0
 12784 ;;      Locals:         0       0       0       0       0       0       0
 12785 ;;      Temps:          0       2       0       0       0       0       0
 12786 ;;      Totals:         0       7       0       0       0       0       0
 12787 ;;Total ram usage:        7 bytes
 12788 ;; Hardware stack levels used:    1
 12789 ;; Hardware stack levels required when called:    3
 12790 ;; This function calls:
 12791 ;;		Nothing
 12792 ;; This function is called by:
 12793 ;;		_exp
 12794 ;; This function uses a non-reentrant model
 12795 ;;
 12796                           
 12797                           	psect	text85
 12798  001FA0                     __ptext85:
 12799                           	opt stack 0
 12800  001FA0                     _ldexp:
 12801                           	opt stack 24
 12802                           
 12803                           ;incstack = 0
 12804  001FA0  0100               	movlb	0	; () banked
 12805  001FA2  518E               	movf	ldexp@value& (0+255),w,b
 12806  001FA4  118F               	iorwf	(ldexp@value+1)& (0+255),w,b
 12807  001FA6  1190               	iorwf	(ldexp@value+2)& (0+255),w,b
 12808  001FA8  A4D8               	btfss	status,2,c
 12809  001FAA  D007               	goto	l2065
 12810                           
 12811                           ; BSR set to: 0
 12812  001FAC  0E00               	movlw	0
 12813  001FAE  6F8E               	movwf	?_ldexp& (0+255),b
 12814  001FB0  0E00               	movlw	0
 12815  001FB2  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 12816  001FB4  0E00               	movlw	0
 12817  001FB6  6F90               	movwf	(?_ldexp+2)& (0+255),b
 12818                           
 12819                           ; BSR set to: 0
 12820  001FB8  0012               	return	
 12821  001FBA                     l2065:
 12822                           
 12823                           ; BSR set to: 0
 12824                           
 12825                           ; BSR set to: 0
 12826  001FBA  5190               	movf	(ldexp@value+2)& (0+255),w,b
 12827  001FBC  0B7F               	andlw	127
 12828  001FBE  6F93               	movwf	??_ldexp& (0+255),b
 12829  001FC0  6B94               	clrf	(??_ldexp+1)& (0+255),b
 12830  001FC2  90D8               	bcf	status,0,c
 12831  001FC4  3793               	rlcf	??_ldexp& (0+255),f,b
 12832  001FC6  3794               	rlcf	(??_ldexp+1)& (0+255),f,b
 12833  001FC8  5193               	movf	??_ldexp& (0+255),w,b
 12834  001FCA  2791               	addwf	ldexp@newexp& (0+255),f,b
 12835  001FCC  5194               	movf	(??_ldexp+1)& (0+255),w,b
 12836  001FCE  2392               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 12837  001FD0  AF8F               	btfss	(ldexp@value+1)& (0+255),7,b
 12838  001FD2  D003               	goto	u4270
 12839  001FD4  6B93               	clrf	??_ldexp& (0+255),b
 12840  001FD6  2B93               	incf	??_ldexp& (0+255),f,b
 12841  001FD8  D002               	goto	u4278
 12842  001FDA                     u4270:
 12843  001FDA  0100               	movlb	0	; () banked
 12844  001FDC  6B93               	clrf	??_ldexp& (0+255),b
 12845  001FDE                     u4278:
 12846  001FDE  5193               	movf	??_ldexp& (0+255),w,b
 12847  001FE0  2791               	addwf	ldexp@newexp& (0+255),f,b
 12848  001FE2  0E00               	movlw	0
 12849  001FE4  2392               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 12850  001FE6  AF92               	btfss	(ldexp@newexp+1)& (0+255),7,b
 12851  001FE8  D00B               	goto	l2067
 12852                           
 12853                           ; BSR set to: 0
 12854  001FEA  0E00               	movlw	0
 12855  001FEC  6FC5               	movwf	(_errno+1)& (0+255),b
 12856  001FEE  0E22               	movlw	34
 12857  001FF0  6FC4               	movwf	_errno& (0+255),b
 12858  001FF2  0E00               	movlw	0
 12859  001FF4  6F8E               	movwf	?_ldexp& (0+255),b
 12860  001FF6  0E00               	movlw	0
 12861  001FF8  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 12862  001FFA  0E00               	movlw	0
 12863  001FFC                     L1:
 12864  001FFC  6F90               	movwf	(?_ldexp+2)& (0+255),b
 12865                           
 12866                           ; BSR set to: 0
 12867  001FFE  0012               	return	
 12868  002000                     l2067:
 12869                           
 12870                           ; BSR set to: 0
 12871                           
 12872                           ; BSR set to: 0
 12873  002000  BF92               	btfsc	(ldexp@newexp+1)& (0+255),7,b
 12874  002002  D015               	goto	l2069
 12875  002004  0592               	decf	(ldexp@newexp+1)& (0+255),w,b
 12876  002006  A0D8               	btfss	status,0,c
 12877  002008  D012               	goto	l2069
 12878                           
 12879                           ; BSR set to: 0
 12880  00200A  0E00               	movlw	0
 12881  00200C  6FC5               	movwf	(_errno+1)& (0+255),b
 12882  00200E  0E22               	movlw	34
 12883  002010  6FC4               	movwf	_errno& (0+255),b
 12884                           
 12885                           ; BSR set to: 0
 12886  002012  AF90               	btfss	(ldexp@value+2)& (0+255),7,b
 12887  002014  D006               	goto	l2070
 12888                           
 12889                           ; BSR set to: 0
 12890  002016  0EFF               	movlw	255
 12891  002018  6F8E               	movwf	?_ldexp& (0+255),b
 12892  00201A  0E7F               	movlw	127
 12893  00201C  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 12894  00201E  0EFF               	movlw	255
 12895  002020  D7ED               	goto	L1
 12896  002022                     l2070:
 12897                           
 12898                           ; BSR set to: 0
 12899                           
 12900                           ; BSR set to: 0
 12901  002022  0EFF               	movlw	255
 12902  002024  6F8E               	movwf	?_ldexp& (0+255),b
 12903  002026  0E7F               	movlw	127
 12904  002028  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 12905  00202A  0E7F               	movlw	127
 12906  00202C  D7E7               	goto	L1
 12907  00202E                     l2069:
 12908                           
 12909                           ; BSR set to: 0
 12910                           
 12911                           ; BSR set to: 0
 12912  00202E  3592               	rlcf	(ldexp@newexp+1)& (0+255),w,b
 12913  002030  3192               	rrcf	(ldexp@newexp+1)& (0+255),w,b
 12914  002032  6F94               	movwf	(??_ldexp+1)& (0+255),b
 12915  002034  3191               	rrcf	ldexp@newexp& (0+255),w,b
 12916  002036  6F93               	movwf	??_ldexp& (0+255),b
 12917  002038  5190               	movf	(ldexp@value+2)& (0+255),w,b
 12918  00203A  1993               	xorwf	??_ldexp& (0+255),w,b
 12919  00203C  0B80               	andlw	-128
 12920  00203E  1993               	xorwf	??_ldexp& (0+255),w,b
 12921  002040  6F90               	movwf	(ldexp@value+2)& (0+255),b
 12922  002042  C091  F093         	movff	ldexp@newexp,??_ldexp
 12923  002046  0E01               	movlw	1
 12924  002048  1793               	andwf	??_ldexp& (0+255),f,b
 12925  00204A  3393               	rrcf	??_ldexp& (0+255),f,b
 12926  00204C  3393               	rrcf	??_ldexp& (0+255),f,b
 12927  00204E  518F               	movf	(ldexp@value+1)& (0+255),w,b
 12928  002050  1993               	xorwf	??_ldexp& (0+255),w,b
 12929  002052  0B7F               	andlw	-129
 12930  002054  1993               	xorwf	??_ldexp& (0+255),w,b
 12931  002056  6F8F               	movwf	(ldexp@value+1)& (0+255),b
 12932                           
 12933                           ; BSR set to: 0
 12934                           
 12935                           ; BSR set to: 0
 12936                           
 12937                           ; BSR set to: 0
 12938  002058  C08E  F08E         	movff	ldexp@value,?_ldexp
 12939  00205C  C08F  F08F         	movff	ldexp@value+1,?_ldexp+1
 12940  002060  C090  F090         	movff	ldexp@value+2,?_ldexp+2
 12941  002064  0012               	return	
 12942  002066                     __end_of_ldexp:
 12943                           	opt stack 0
 12944                           tosu	equ	0xFFF
 12945                           tosh	equ	0xFFE
 12946                           tosl	equ	0xFFD
 12947                           pclath	equ	0xFFA
 12948                           tblptru	equ	0xFF8
 12949                           tblptrh	equ	0xFF7
 12950                           tblptrl	equ	0xFF6
 12951                           tablat	equ	0xFF5
 12952                           prodh	equ	0xFF4
 12953                           prodl	equ	0xFF3
 12954                           intcon	equ	0xFF2
 12955                           intcon2	equ	0xFF1
 12956                           postinc0	equ	0xFEE
 12957                           wreg	equ	0xFE8
 12958                           indf1	equ	0xFE7
 12959                           postdec1	equ	0xFE5
 12960                           fsr1h	equ	0xFE2
 12961                           fsr1l	equ	0xFE1
 12962                           indf2	equ	0xFDF
 12963                           postinc2	equ	0xFDE
 12964                           postdec2	equ	0xFDD
 12965                           fsr2h	equ	0xFDA
 12966                           fsr2l	equ	0xFD9
 12967                           status	equ	0xFD8
 12968                           
 12969 ;; *************** function _floor *****************
 12970 ;; Defined at:
 12971 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
 12972 ;; Parameters:    Size  Location     Type
 12973 ;;  x               3   47[BANK0 ] int 
 12974 ;; Auto vars:     Size  Location     Type
 12975 ;;  i               3   50[BANK0 ] int 
 12976 ;;  expon           2   53[BANK0 ] int 
 12977 ;; Return value:  Size  Location     Type
 12978 ;;                  3   47[BANK0 ] int 
 12979 ;; Registers used:
 12980 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12981 ;; Tracked objects:
 12982 ;;		On entry : 0/0
 12983 ;;		On exit  : 0/0
 12984 ;;		Unchanged: 0/0
 12985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12986 ;;      Params:         0       3       0       0       0       0       0
 12987 ;;      Locals:         0       5       0       0       0       0       0
 12988 ;;      Temps:          0       0       0       0       0       0       0
 12989 ;;      Totals:         0       8       0       0       0       0       0
 12990 ;;Total ram usage:        8 bytes
 12991 ;; Hardware stack levels used:    1
 12992 ;; Hardware stack levels required when called:    5
 12993 ;; This function calls:
 12994 ;;		___altoft
 12995 ;;		___ftadd
 12996 ;;		___ftge
 12997 ;;		___fttol
 12998 ;;		_frexp
 12999 ;; This function is called by:
 13000 ;;		_exp
 13001 ;; This function uses a non-reentrant model
 13002 ;;
 13003                           
 13004                           	psect	text86
 13005  001DE8                     __ptext86:
 13006                           	opt stack 0
 13007  001DE8                     _floor:
 13008                           	opt stack 22
 13009                           
 13010                           ; BSR set to: 0
 13011                           ;incstack = 0
 13012  001DE8  C08F  F018         	movff	floor@x,frexp@value
 13013  001DEC  C090  F019         	movff	floor@x+1,frexp@value+1
 13014  001DF0  C091  F01A         	movff	floor@x+2,frexp@value+2
 13015  001DF4  0E95               	movlw	low floor@expon
 13016  001DF6  6E1B               	movwf	frexp@eptr,c
 13017  001DF8  0E00               	movlw	high floor@expon
 13018  001DFA  6E1C               	movwf	frexp@eptr+1,c
 13019  001DFC  EC6A  F012         	call	_frexp	;wreg free
 13020  001E00  0100               	movlb	0	; () banked
 13021  001E02  AF96               	btfss	(floor@expon+1)& (0+255),7,b
 13022  001E04  D010               	goto	l2052
 13023                           
 13024                           ; BSR set to: 0
 13025  001E06  AF91               	btfss	(floor@x+2)& (0+255),7,b
 13026  001E08  D007               	goto	l2053
 13027                           
 13028                           ; BSR set to: 0
 13029  001E0A  0E00               	movlw	0
 13030  001E0C  6F8F               	movwf	?_floor& (0+255),b
 13031  001E0E  0E80               	movlw	128
 13032  001E10  6F90               	movwf	(?_floor+1)& (0+255),b
 13033  001E12  0EBF               	movlw	191
 13034  001E14  6F91               	movwf	(?_floor+2)& (0+255),b
 13035                           
 13036                           ; BSR set to: 0
 13037  001E16  0012               	return	
 13038  001E18                     l2053:
 13039                           
 13040                           ; BSR set to: 0
 13041                           
 13042                           ; BSR set to: 0
 13043  001E18  0E00               	movlw	0
 13044  001E1A  6F8F               	movwf	?_floor& (0+255),b
 13045  001E1C  0E00               	movlw	0
 13046  001E1E  6F90               	movwf	(?_floor+1)& (0+255),b
 13047  001E20  0E00               	movlw	0
 13048  001E22  6F91               	movwf	(?_floor+2)& (0+255),b
 13049                           
 13050                           ; BSR set to: 0
 13051  001E24  0012               	return	
 13052  001E26                     l2052:
 13053                           
 13054                           ; BSR set to: 0
 13055                           
 13056                           ; BSR set to: 0
 13057  001E26  5196               	movf	(floor@expon+1)& (0+255),w,b
 13058  001E28  E104               	bnz	u6910
 13059  001E2A  0E15               	movlw	21
 13060  001E2C  5D95               	subwf	floor@expon& (0+255),w,b
 13061  001E2E  A0D8               	btfss	status,0,c
 13062  001E30  D007               	goto	l2055
 13063  001E32                     u6910:
 13064                           
 13065                           ; BSR set to: 0
 13066  001E32  C08F  F08F         	movff	floor@x,?_floor
 13067  001E36  C090  F090         	movff	floor@x+1,?_floor+1
 13068  001E3A  C091  F091         	movff	floor@x+2,?_floor+2
 13069  001E3E  0012               	return	
 13070  001E40                     l2055:
 13071                           
 13072                           ; BSR set to: 0
 13073                           
 13074                           ; BSR set to: 0
 13075  001E40  C08F  F078         	movff	floor@x,___fttol@f1
 13076  001E44  C090  F079         	movff	floor@x+1,___fttol@f1+1
 13077  001E48  C091  F07A         	movff	floor@x+2,___fttol@f1+2
 13078  001E4C  EC17  F00D         	call	___fttol	;wreg free
 13079  001E50  C078  F087         	movff	?___fttol,___altoft@c
 13080  001E54  C079  F088         	movff	?___fttol+1,___altoft@c+1
 13081  001E58  C07A  F089         	movff	?___fttol+2,___altoft@c+2
 13082  001E5C  C07B  F08A         	movff	?___fttol+3,___altoft@c+3
 13083  001E60  EC7C  F013         	call	___altoft	;wreg free
 13084  001E64  C087  F092         	movff	?___altoft,floor@i
 13085  001E68  C088  F093         	movff	?___altoft+1,floor@i+1
 13086  001E6C  C089  F094         	movff	?___altoft+2,floor@i+2
 13087  001E70  C08F  F018         	movff	floor@x,___ftge@ff1
 13088  001E74  C090  F019         	movff	floor@x+1,___ftge@ff1+1
 13089  001E78  C091  F01A         	movff	floor@x+2,___ftge@ff1+2
 13090  001E7C  C092  F01B         	movff	floor@i,___ftge@ff2
 13091  001E80  C093  F01C         	movff	floor@i+1,___ftge@ff2+1
 13092  001E84  C094  F01D         	movff	floor@i+2,___ftge@ff2+2
 13093  001E88  ECB2  F012         	call	___ftge	;wreg free
 13094  001E8C  B0D8               	btfsc	status,0,c
 13095  001E8E  D016               	goto	l2056
 13096  001E90  C092  F078         	movff	floor@i,___ftadd@f1
 13097  001E94  C093  F079         	movff	floor@i+1,___ftadd@f1+1
 13098  001E98  C094  F07A         	movff	floor@i+2,___ftadd@f1+2
 13099  001E9C  0E00               	movlw	0
 13100  001E9E  0100               	movlb	0	; () banked
 13101  001EA0  6F7B               	movwf	___ftadd@f2& (0+255),b
 13102  001EA2  0E80               	movlw	128
 13103  001EA4  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 13104  001EA6  0EBF               	movlw	191
 13105  001EA8  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 13106  001EAA  ECEE  F009         	call	___ftadd	;wreg free
 13107  001EAE  C078  F08F         	movff	?___ftadd,?_floor
 13108  001EB2  C079  F090         	movff	?___ftadd+1,?_floor+1
 13109  001EB6  C07A  F091         	movff	?___ftadd+2,?_floor+2
 13110  001EBA  0012               	return	
 13111  001EBC                     l2056:
 13112  001EBC  C092  F08F         	movff	floor@i,?_floor
 13113  001EC0  C093  F090         	movff	floor@i+1,?_floor+1
 13114  001EC4  C094  F091         	movff	floor@i+2,?_floor+2
 13115  001EC8  0012               	return		;funcret
 13116  001ECA                     __end_of_floor:
 13117                           	opt stack 0
 13118                           tosu	equ	0xFFF
 13119                           tosh	equ	0xFFE
 13120                           tosl	equ	0xFFD
 13121                           pclath	equ	0xFFA
 13122                           tblptru	equ	0xFF8
 13123                           tblptrh	equ	0xFF7
 13124                           tblptrl	equ	0xFF6
 13125                           tablat	equ	0xFF5
 13126                           prodh	equ	0xFF4
 13127                           prodl	equ	0xFF3
 13128                           intcon	equ	0xFF2
 13129                           intcon2	equ	0xFF1
 13130                           postinc0	equ	0xFEE
 13131                           wreg	equ	0xFE8
 13132                           indf1	equ	0xFE7
 13133                           postdec1	equ	0xFE5
 13134                           fsr1h	equ	0xFE2
 13135                           fsr1l	equ	0xFE1
 13136                           indf2	equ	0xFDF
 13137                           postinc2	equ	0xFDE
 13138                           postdec2	equ	0xFDD
 13139                           fsr2h	equ	0xFDA
 13140                           fsr2l	equ	0xFD9
 13141                           status	equ	0xFD8
 13142                           
 13143 ;; *************** function _frexp *****************
 13144 ;; Defined at:
 13145 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 13146 ;; Parameters:    Size  Location     Type
 13147 ;;  value           3   23[COMRAM] int 
 13148 ;;  eptr            2   26[COMRAM] PTR int 
 13149 ;;		 -> log@exponent(2), floor@expon(2), 
 13150 ;; Auto vars:     Size  Location     Type
 13151 ;;		None
 13152 ;; Return value:  Size  Location     Type
 13153 ;;                  3   23[COMRAM] PTR int 
 13154 ;; Registers used:
 13155 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13156 ;; Tracked objects:
 13157 ;;		On entry : 0/0
 13158 ;;		On exit  : 0/0
 13159 ;;		Unchanged: 0/0
 13160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13161 ;;      Params:         5       0       0       0       0       0       0
 13162 ;;      Locals:         0       0       0       0       0       0       0
 13163 ;;      Temps:          2       0       0       0       0       0       0
 13164 ;;      Totals:         7       0       0       0       0       0       0
 13165 ;;Total ram usage:        7 bytes
 13166 ;; Hardware stack levels used:    1
 13167 ;; Hardware stack levels required when called:    3
 13168 ;; This function calls:
 13169 ;;		Nothing
 13170 ;; This function is called by:
 13171 ;;		_floor
 13172 ;;		_log
 13173 ;; This function uses a non-reentrant model
 13174 ;;
 13175                           
 13176                           	psect	text87
 13177  0024D4                     __ptext87:
 13178                           	opt stack 0
 13179  0024D4                     _frexp:
 13180                           	opt stack 24
 13181                           
 13182                           ;incstack = 0
 13183  0024D4  5018               	movf	frexp@value,w,c
 13184  0024D6  1019               	iorwf	frexp@value+1,w,c
 13185  0024D8  101A               	iorwf	frexp@value+2,w,c
 13186  0024DA  A4D8               	btfss	status,2,c
 13187  0024DC  D00F               	goto	l2061
 13188  0024DE  C01B  FFD9         	movff	frexp@eptr,fsr2l
 13189  0024E2  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 13190  0024E6  0E00               	movlw	0
 13191  0024E8  6EDE               	movwf	postinc2,c
 13192  0024EA  0E00               	movlw	0
 13193  0024EC  6EDD               	movwf	postdec2,c
 13194  0024EE  0E00               	movlw	0
 13195  0024F0  6E18               	movwf	?_frexp,c
 13196  0024F2  0E00               	movlw	0
 13197  0024F4  6E19               	movwf	?_frexp+1,c
 13198  0024F6  0E00               	movlw	0
 13199  0024F8  6E1A               	movwf	?_frexp+2,c
 13200  0024FA  0012               	return	
 13201  0024FC                     l2061:
 13202  0024FC  501A               	movf	frexp@value+2,w,c
 13203  0024FE  0B7F               	andlw	127
 13204  002500  6E1D               	movwf	??_frexp& (0+255),c
 13205  002502  6A1E               	clrf	(??_frexp+1)& (0+255),c
 13206  002504  90D8               	bcf	status,0,c
 13207  002506  361D               	rlcf	??_frexp,f,c
 13208  002508  361E               	rlcf	??_frexp+1,f,c
 13209  00250A  C01B  FFD9         	movff	frexp@eptr,fsr2l
 13210  00250E  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 13211  002512  C01D  FFDE         	movff	??_frexp,postinc2
 13212  002516  C01E  FFDD         	movff	??_frexp+1,postdec2
 13213  00251A  AE19               	btfss	frexp@value+1,7,c
 13214  00251C  D003               	goto	u3910
 13215  00251E  6A1D               	clrf	??_frexp& (0+255),c
 13216  002520  2A1D               	incf	??_frexp& (0+255),f,c
 13217  002522  D001               	goto	u3918
 13218  002524                     u3910:
 13219  002524  6A1D               	clrf	??_frexp& (0+255),c
 13220  002526                     u3918:
 13221  002526  501D               	movf	??_frexp,w,c
 13222  002528  C01B  FFD9         	movff	frexp@eptr,fsr2l
 13223  00252C  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 13224  002530  12DE               	iorwf	postinc2,f,c
 13225  002532  0E00               	movlw	0
 13226  002534  12DD               	iorwf	postdec2,f,c
 13227  002536  C01B  FFD9         	movff	frexp@eptr,fsr2l
 13228  00253A  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 13229  00253E  0E82               	movlw	130
 13230  002540  26DE               	addwf	postinc2,f,c
 13231  002542  0EFF               	movlw	255
 13232  002544  22DD               	addwfc	postdec2,f,c
 13233  002546  801A               	bsf	frexp@value+2,0,c
 13234  002548  821A               	bsf	frexp@value+2,1,c
 13235  00254A  841A               	bsf	frexp@value+2,2,c
 13236  00254C  861A               	bsf	frexp@value+2,3,c
 13237  00254E  881A               	bsf	frexp@value+2,4,c
 13238  002550  8A1A               	bsf	frexp@value+2,5,c
 13239  002552  9C1A               	bcf	frexp@value+2,6,c
 13240  002554  9E19               	bcf	frexp@value+1,7,c
 13241  002556  C018  F018         	movff	frexp@value,?_frexp
 13242  00255A  C019  F019         	movff	frexp@value+1,?_frexp+1
 13243  00255E  C01A  F01A         	movff	frexp@value+2,?_frexp+2
 13244  002562  0012               	return	
 13245  002564                     __end_of_frexp:
 13246                           	opt stack 0
 13247                           tosu	equ	0xFFF
 13248                           tosh	equ	0xFFE
 13249                           tosl	equ	0xFFD
 13250                           pclath	equ	0xFFA
 13251                           tblptru	equ	0xFF8
 13252                           tblptrh	equ	0xFF7
 13253                           tblptrl	equ	0xFF6
 13254                           tablat	equ	0xFF5
 13255                           prodh	equ	0xFF4
 13256                           prodl	equ	0xFF3
 13257                           intcon	equ	0xFF2
 13258                           intcon2	equ	0xFF1
 13259                           postinc0	equ	0xFEE
 13260                           wreg	equ	0xFE8
 13261                           indf1	equ	0xFE7
 13262                           postdec1	equ	0xFE5
 13263                           fsr1h	equ	0xFE2
 13264                           fsr1l	equ	0xFE1
 13265                           indf2	equ	0xFDF
 13266                           postinc2	equ	0xFDE
 13267                           postdec2	equ	0xFDD
 13268                           fsr2h	equ	0xFDA
 13269                           fsr2l	equ	0xFD9
 13270                           status	equ	0xFD8
 13271                           
 13272 ;; *************** function ___fttol *****************
 13273 ;; Defined at:
 13274 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 13275 ;; Parameters:    Size  Location     Type
 13276 ;;  f1              3   24[BANK0 ] float 
 13277 ;; Auto vars:     Size  Location     Type
 13278 ;;  lval            4   34[BANK0 ] unsigned long 
 13279 ;;  exp1            1   38[BANK0 ] unsigned char 
 13280 ;;  sign1           1   33[BANK0 ] unsigned char 
 13281 ;; Return value:  Size  Location     Type
 13282 ;;                  4   24[BANK0 ] long 
 13283 ;; Registers used:
 13284 ;;		wreg, status,2, status,0
 13285 ;; Tracked objects:
 13286 ;;		On entry : 0/0
 13287 ;;		On exit  : 0/0
 13288 ;;		Unchanged: 0/0
 13289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13290 ;;      Params:         0       4       0       0       0       0       0
 13291 ;;      Locals:         0       6       0       0       0       0       0
 13292 ;;      Temps:          0       5       0       0       0       0       0
 13293 ;;      Totals:         0      15       0       0       0       0       0
 13294 ;;Total ram usage:       15 bytes
 13295 ;; Hardware stack levels used:    1
 13296 ;; Hardware stack levels required when called:    3
 13297 ;; This function calls:
 13298 ;;		Nothing
 13299 ;; This function is called by:
 13300 ;;		_AdcConvert
 13301 ;;		_pow
 13302 ;;		_exp
 13303 ;;		_floor
 13304 ;; This function uses a non-reentrant model
 13305 ;;
 13306                           
 13307                           	psect	text88
 13308  001A2E                     __ptext88:
 13309                           	opt stack 0
 13310  001A2E                     ___fttol:
 13311                           	opt stack 23
 13312                           
 13313                           ;incstack = 0
 13314  001A2E  C07A  F07C         	movff	___fttol@f1+2,??___fttol
 13315  001A32  0100               	movlb	0	; () banked
 13316  001A34  6B7D               	clrf	(??___fttol+1)& (0+255),b
 13317  001A36  6B7E               	clrf	(??___fttol+2)& (0+255),b
 13318  001A38  3579               	rlcf	(___fttol@f1+1)& (0+255),w,b
 13319  001A3A  377C               	rlcf	??___fttol& (0+255),f,b
 13320  001A3C  E301               	bnc	u3821
 13321  001A3E  817D               	bsf	(??___fttol+1)& (0+255),0,b
 13322  001A40                     u3821:
 13323  001A40  517C               	movf	??___fttol& (0+255),w,b
 13324  001A42  6F86               	movwf	___fttol@exp1& (0+255),b
 13325  001A44  5186               	movf	___fttol@exp1& (0+255),w,b
 13326  001A46  A4D8               	btfss	status,2,c
 13327  001A48  D009               	goto	l1718
 13328                           
 13329                           ; BSR set to: 0
 13330  001A4A  0E00               	movlw	0
 13331  001A4C  6F78               	movwf	?___fttol& (0+255),b
 13332  001A4E  0E00               	movlw	0
 13333  001A50  6F79               	movwf	(?___fttol+1)& (0+255),b
 13334  001A52  0E00               	movlw	0
 13335  001A54  6F7A               	movwf	(?___fttol+2)& (0+255),b
 13336  001A56  0E00               	movlw	0
 13337  001A58  6F7B               	movwf	(?___fttol+3)& (0+255),b
 13338                           
 13339                           ; BSR set to: 0
 13340  001A5A  0012               	return	
 13341  001A5C                     l1718:
 13342                           
 13343                           ; BSR set to: 0
 13344                           
 13345                           ; BSR set to: 0
 13346  001A5C  0E17               	movlw	23
 13347  001A5E  6F7C               	movwf	??___fttol& (0+255),b
 13348  001A60  C078  F07D         	movff	___fttol@f1,??___fttol+1
 13349  001A64  C079  F07E         	movff	___fttol@f1+1,??___fttol+2
 13350  001A68  C07A  F07F         	movff	___fttol@f1+2,??___fttol+3
 13351  001A6C  297C               	incf	??___fttol& (0+255),w,b
 13352  001A6E  6F80               	movwf	(??___fttol+4)& (0+255),b
 13353  001A70  D004               	goto	u3840
 13354  001A72                     u3845:
 13355  001A72  90D8               	bcf	status,0,c
 13356  001A74  337F               	rrcf	(??___fttol+3)& (0+255),f,b
 13357  001A76  337E               	rrcf	(??___fttol+2)& (0+255),f,b
 13358  001A78  337D               	rrcf	(??___fttol+1)& (0+255),f,b
 13359  001A7A                     u3840:
 13360  001A7A  2F80               	decfsz	(??___fttol+4)& (0+255),f,b
 13361  001A7C  D7FA               	goto	u3845
 13362  001A7E  0100               	movlb	0	; () banked
 13363  001A80  517D               	movf	(??___fttol+1)& (0+255),w,b
 13364  001A82  6F81               	movwf	___fttol@sign1& (0+255),b
 13365                           
 13366                           ; BSR set to: 0
 13367  001A84  8F79               	bsf	(___fttol@f1+1)& (0+255),7,b
 13368                           
 13369                           ; BSR set to: 0
 13370  001A86  0EFF               	movlw	255
 13371  001A88  1778               	andwf	___fttol@f1& (0+255),f,b
 13372  001A8A  0EFF               	movlw	255
 13373  001A8C  1779               	andwf	(___fttol@f1+1)& (0+255),f,b
 13374  001A8E  0E00               	movlw	0
 13375  001A90  177A               	andwf	(___fttol@f1+2)& (0+255),f,b
 13376                           
 13377                           ; BSR set to: 0
 13378  001A92  5178               	movf	___fttol@f1& (0+255),w,b
 13379  001A94  6F82               	movwf	___fttol@lval& (0+255),b
 13380  001A96  5179               	movf	(___fttol@f1+1)& (0+255),w,b
 13381  001A98  6F83               	movwf	(___fttol@lval+1)& (0+255),b
 13382  001A9A  517A               	movf	(___fttol@f1+2)& (0+255),w,b
 13383  001A9C  6F84               	movwf	(___fttol@lval+2)& (0+255),b
 13384  001A9E  6B85               	clrf	(___fttol@lval+3)& (0+255),b
 13385                           
 13386                           ; BSR set to: 0
 13387  001AA0  0E8E               	movlw	142
 13388  001AA2  5F86               	subwf	___fttol@exp1& (0+255),f,b
 13389                           
 13390                           ; BSR set to: 0
 13391  001AA4  AF86               	btfss	___fttol@exp1& (0+255),7,b
 13392  001AA6  D016               	goto	l1720
 13393                           
 13394                           ; BSR set to: 0
 13395  001AA8  5186               	movf	___fttol@exp1& (0+255),w,b
 13396  001AAA  0A80               	xorlw	128
 13397  001AAC  0F8F               	addlw	143
 13398  001AAE  B0D8               	btfsc	status,0,c
 13399  001AB0  D009               	goto	l1721
 13400                           
 13401                           ; BSR set to: 0
 13402  001AB2  0E00               	movlw	0
 13403  001AB4  6F78               	movwf	?___fttol& (0+255),b
 13404  001AB6  0E00               	movlw	0
 13405  001AB8  6F79               	movwf	(?___fttol+1)& (0+255),b
 13406  001ABA  0E00               	movlw	0
 13407  001ABC  6F7A               	movwf	(?___fttol+2)& (0+255),b
 13408  001ABE  0E00               	movlw	0
 13409  001AC0  6F7B               	movwf	(?___fttol+3)& (0+255),b
 13410                           
 13411                           ; BSR set to: 0
 13412  001AC2  0012               	return	
 13413  001AC4                     l1721:
 13414                           
 13415                           ; BSR set to: 0
 13416                           
 13417                           ; BSR set to: 0
 13418                           
 13419                           ; BSR set to: 0
 13420  001AC4  90D8               	bcf	status,0,c
 13421  001AC6  3385               	rrcf	(___fttol@lval+3)& (0+255),f,b
 13422  001AC8  3384               	rrcf	(___fttol@lval+2)& (0+255),f,b
 13423  001ACA  3383               	rrcf	(___fttol@lval+1)& (0+255),f,b
 13424  001ACC  3382               	rrcf	___fttol@lval& (0+255),f,b
 13425                           
 13426                           ; BSR set to: 0
 13427  001ACE  3F86               	incfsz	___fttol@exp1& (0+255),f,b
 13428  001AD0  D7F9               	goto	l1721
 13429                           
 13430                           ; BSR set to: 0
 13431  001AD2  D015               	goto	u3880
 13432  001AD4                     l1720:
 13433                           
 13434                           ; BSR set to: 0
 13435                           
 13436                           ; BSR set to: 0
 13437  001AD4  0E17               	movlw	23
 13438  001AD6  6586               	cpfsgt	___fttol@exp1& (0+255),b
 13439  001AD8  D00F               	goto	l1726
 13440                           
 13441                           ; BSR set to: 0
 13442  001ADA  0E00               	movlw	0
 13443  001ADC  6F78               	movwf	?___fttol& (0+255),b
 13444  001ADE  0E00               	movlw	0
 13445  001AE0  6F79               	movwf	(?___fttol+1)& (0+255),b
 13446  001AE2  0E00               	movlw	0
 13447  001AE4  6F7A               	movwf	(?___fttol+2)& (0+255),b
 13448  001AE6  0E00               	movlw	0
 13449  001AE8  6F7B               	movwf	(?___fttol+3)& (0+255),b
 13450                           
 13451                           ; BSR set to: 0
 13452  001AEA  0012               	return	
 13453  001AEC                     
 13454                           ; BSR set to: 0
 13455                           
 13456                           ; BSR set to: 0
 13457  001AEC  90D8               	bcf	status,0,c
 13458  001AEE  3782               	rlcf	___fttol@lval& (0+255),f,b
 13459  001AF0  3783               	rlcf	(___fttol@lval+1)& (0+255),f,b
 13460  001AF2  3784               	rlcf	(___fttol@lval+2)& (0+255),f,b
 13461  001AF4  3785               	rlcf	(___fttol@lval+3)& (0+255),f,b
 13462  001AF6  0786               	decf	___fttol@exp1& (0+255),f,b
 13463  001AF8                     l1726:
 13464                           
 13465                           ; BSR set to: 0
 13466                           
 13467                           ; BSR set to: 0
 13468  001AF8  5186               	movf	___fttol@exp1& (0+255),w,b
 13469  001AFA  A4D8               	btfss	status,2,c
 13470  001AFC  D7F7               	goto	l1727
 13471  001AFE                     u3880:
 13472                           
 13473                           ; BSR set to: 0
 13474                           
 13475                           ; BSR set to: 0
 13476                           
 13477                           ; BSR set to: 0
 13478  001AFE  5181               	movf	___fttol@sign1& (0+255),w,b
 13479  001B00  B4D8               	btfsc	status,2,c
 13480  001B02  D008               	goto	l1729
 13481                           
 13482                           ; BSR set to: 0
 13483  001B04  1F85               	comf	(___fttol@lval+3)& (0+255),f,b
 13484  001B06  1F84               	comf	(___fttol@lval+2)& (0+255),f,b
 13485  001B08  1F83               	comf	(___fttol@lval+1)& (0+255),f,b
 13486  001B0A  6D82               	negf	___fttol@lval& (0+255),b
 13487  001B0C  0E00               	movlw	0
 13488  001B0E  2383               	addwfc	(___fttol@lval+1)& (0+255),f,b
 13489  001B10  2384               	addwfc	(___fttol@lval+2)& (0+255),f,b
 13490  001B12  2385               	addwfc	(___fttol@lval+3)& (0+255),f,b
 13491  001B14                     l1729:
 13492                           
 13493                           ; BSR set to: 0
 13494                           
 13495                           ; BSR set to: 0
 13496  001B14  C082  F078         	movff	___fttol@lval,?___fttol
 13497  001B18  C083  F079         	movff	___fttol@lval+1,?___fttol+1
 13498  001B1C  C084  F07A         	movff	___fttol@lval+2,?___fttol+2
 13499  001B20  C085  F07B         	movff	___fttol@lval+3,?___fttol+3
 13500  001B24  0012               	return	
 13501  001B26                     __end_of___fttol:
 13502                           	opt stack 0
 13503                           tosu	equ	0xFFF
 13504                           tosh	equ	0xFFE
 13505                           tosl	equ	0xFFD
 13506                           pclath	equ	0xFFA
 13507                           tblptru	equ	0xFF8
 13508                           tblptrh	equ	0xFF7
 13509                           tblptrl	equ	0xFF6
 13510                           tablat	equ	0xFF5
 13511                           prodh	equ	0xFF4
 13512                           prodl	equ	0xFF3
 13513                           intcon	equ	0xFF2
 13514                           intcon2	equ	0xFF1
 13515                           postinc0	equ	0xFEE
 13516                           wreg	equ	0xFE8
 13517                           indf1	equ	0xFE7
 13518                           postdec1	equ	0xFE5
 13519                           fsr1h	equ	0xFE2
 13520                           fsr1l	equ	0xFE1
 13521                           indf2	equ	0xFDF
 13522                           postinc2	equ	0xFDE
 13523                           postdec2	equ	0xFDD
 13524                           fsr2h	equ	0xFDA
 13525                           fsr2l	equ	0xFD9
 13526                           status	equ	0xFD8
 13527                           
 13528 ;; *************** function ___ftge *****************
 13529 ;; Defined at:
 13530 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 13531 ;; Parameters:    Size  Location     Type
 13532 ;;  ff1             3   23[COMRAM] float 
 13533 ;;  ff2             3   26[COMRAM] float 
 13534 ;; Auto vars:     Size  Location     Type
 13535 ;;		None
 13536 ;; Return value:  Size  Location     Type
 13537 ;;		None               void
 13538 ;; Registers used:
 13539 ;;		wreg, status,2, status,0
 13540 ;; Tracked objects:
 13541 ;;		On entry : 0/0
 13542 ;;		On exit  : 0/0
 13543 ;;		Unchanged: 0/0
 13544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13545 ;;      Params:         6       0       0       0       0       0       0
 13546 ;;      Locals:         0       0       0       0       0       0       0
 13547 ;;      Temps:          3       0       0       0       0       0       0
 13548 ;;      Totals:         9       0       0       0       0       0       0
 13549 ;;Total ram usage:        9 bytes
 13550 ;; Hardware stack levels used:    1
 13551 ;; Hardware stack levels required when called:    3
 13552 ;; This function calls:
 13553 ;;		Nothing
 13554 ;; This function is called by:
 13555 ;;		_CheckFlashPrecentage
 13556 ;;		_pow
 13557 ;;		_exp
 13558 ;;		_floor
 13559 ;; This function uses a non-reentrant model
 13560 ;;
 13561                           
 13562                           	psect	text89
 13563  002564                     __ptext89:
 13564                           	opt stack 0
 13565  002564                     ___ftge:
 13566                           	opt stack 26
 13567                           
 13568                           ; BSR set to: 0
 13569                           ;incstack = 0
 13570  002564  AE1A               	btfss	___ftge@ff1+2,7,c
 13571  002566  D016               	goto	l1690
 13572  002568  C018  F01E         	movff	___ftge@ff1,??___ftge
 13573  00256C  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
 13574  002570  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
 13575  002574  1E1E               	comf	??___ftge,f,c
 13576  002576  1E1F               	comf	??___ftge+1,f,c
 13577  002578  1E20               	comf	??___ftge+2,f,c
 13578  00257A  2A1E               	incf	??___ftge,f,c
 13579  00257C  0E00               	movlw	0
 13580  00257E  221F               	addwfc	??___ftge+1,f,c
 13581  002580  2220               	addwfc	??___ftge+2,f,c
 13582  002582  0E00               	movlw	0
 13583  002584  241E               	addwf	??___ftge,w,c
 13584  002586  6E18               	movwf	___ftge@ff1,c
 13585  002588  0E00               	movlw	0
 13586  00258A  201F               	addwfc	??___ftge+1,w,c
 13587  00258C  6E19               	movwf	___ftge@ff1+1,c
 13588  00258E  0E80               	movlw	128
 13589  002590  2020               	addwfc	??___ftge+2,w,c
 13590  002592  6E1A               	movwf	___ftge@ff1+2,c
 13591  002594                     l1690:
 13592  002594  AE1D               	btfss	___ftge@ff2+2,7,c
 13593  002596  D016               	goto	l1691
 13594  002598  C01B  F01E         	movff	___ftge@ff2,??___ftge
 13595  00259C  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
 13596  0025A0  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
 13597  0025A4  1E1E               	comf	??___ftge,f,c
 13598  0025A6  1E1F               	comf	??___ftge+1,f,c
 13599  0025A8  1E20               	comf	??___ftge+2,f,c
 13600  0025AA  2A1E               	incf	??___ftge,f,c
 13601  0025AC  0E00               	movlw	0
 13602  0025AE  221F               	addwfc	??___ftge+1,f,c
 13603  0025B0  2220               	addwfc	??___ftge+2,f,c
 13604  0025B2  0E00               	movlw	0
 13605  0025B4  241E               	addwf	??___ftge,w,c
 13606  0025B6  6E1B               	movwf	___ftge@ff2,c
 13607  0025B8  0E00               	movlw	0
 13608  0025BA  201F               	addwfc	??___ftge+1,w,c
 13609  0025BC  6E1C               	movwf	___ftge@ff2+1,c
 13610  0025BE  0E80               	movlw	128
 13611  0025C0  2020               	addwfc	??___ftge+2,w,c
 13612  0025C2  6E1D               	movwf	___ftge@ff2+2,c
 13613  0025C4                     l1691:
 13614  0025C4  0E00               	movlw	0
 13615  0025C6  1A18               	xorwf	___ftge@ff1,f,c
 13616  0025C8  0E00               	movlw	0
 13617  0025CA  1A19               	xorwf	___ftge@ff1+1,f,c
 13618  0025CC  0E80               	movlw	128
 13619  0025CE  1A1A               	xorwf	___ftge@ff1+2,f,c
 13620  0025D0  0E00               	movlw	0
 13621  0025D2  1A1B               	xorwf	___ftge@ff2,f,c
 13622  0025D4  0E00               	movlw	0
 13623  0025D6  1A1C               	xorwf	___ftge@ff2+1,f,c
 13624  0025D8  0E80               	movlw	128
 13625  0025DA  1A1D               	xorwf	___ftge@ff2+2,f,c
 13626  0025DC  501B               	movf	___ftge@ff2,w,c
 13627  0025DE  5C18               	subwf	___ftge@ff1,w,c
 13628  0025E0  501C               	movf	___ftge@ff2+1,w,c
 13629  0025E2  5819               	subwfb	___ftge@ff1+1,w,c
 13630  0025E4  501D               	movf	___ftge@ff2+2,w,c
 13631  0025E6  581A               	subwfb	___ftge@ff1+2,w,c
 13632  0025E8  B0D8               	btfsc	status,0,c
 13633  0025EA  D002               	goto	l4328
 13634  0025EC  90D8               	bcf	status,0,c
 13635  0025EE  0012               	return	
 13636  0025F0                     l4328:
 13637  0025F0  80D8               	bsf	status,0,c
 13638  0025F2  0012               	return	
 13639  0025F4                     __end_of___ftge:
 13640                           	opt stack 0
 13641                           tosu	equ	0xFFF
 13642                           tosh	equ	0xFFE
 13643                           tosl	equ	0xFFD
 13644                           pclath	equ	0xFFA
 13645                           tblptru	equ	0xFF8
 13646                           tblptrh	equ	0xFF7
 13647                           tblptrl	equ	0xFF6
 13648                           tablat	equ	0xFF5
 13649                           prodh	equ	0xFF4
 13650                           prodl	equ	0xFF3
 13651                           intcon	equ	0xFF2
 13652                           intcon2	equ	0xFF1
 13653                           postinc0	equ	0xFEE
 13654                           wreg	equ	0xFE8
 13655                           indf1	equ	0xFE7
 13656                           postdec1	equ	0xFE5
 13657                           fsr1h	equ	0xFE2
 13658                           fsr1l	equ	0xFE1
 13659                           indf2	equ	0xFDF
 13660                           postinc2	equ	0xFDE
 13661                           postdec2	equ	0xFDD
 13662                           fsr2h	equ	0xFDA
 13663                           fsr2l	equ	0xFD9
 13664                           status	equ	0xFD8
 13665                           
 13666 ;; *************** function ___altoft *****************
 13667 ;; Defined at:
 13668 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 13669 ;; Parameters:    Size  Location     Type
 13670 ;;  c               4   39[BANK0 ] long 
 13671 ;; Auto vars:     Size  Location     Type
 13672 ;;  sign            1   47[COMRAM] unsigned char 
 13673 ;;  exp             1   46[COMRAM] unsigned char 
 13674 ;; Return value:  Size  Location     Type
 13675 ;;                  3   39[BANK0 ] float 
 13676 ;; Registers used:
 13677 ;;		wreg, status,2, status,0, cstack
 13678 ;; Tracked objects:
 13679 ;;		On entry : 0/0
 13680 ;;		On exit  : 0/0
 13681 ;;		Unchanged: 0/0
 13682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13683 ;;      Params:         0       4       0       0       0       0       0
 13684 ;;      Locals:         2       0       0       0       0       0       0
 13685 ;;      Temps:          0       4       0       0       0       0       0
 13686 ;;      Totals:         2       8       0       0       0       0       0
 13687 ;;Total ram usage:       10 bytes
 13688 ;; Hardware stack levels used:    1
 13689 ;; Hardware stack levels required when called:    4
 13690 ;; This function calls:
 13691 ;;		___ftpack
 13692 ;; This function is called by:
 13693 ;;		_floor
 13694 ;; This function uses a non-reentrant model
 13695 ;;
 13696                           
 13697                           	psect	text90
 13698  0026F8                     __ptext90:
 13699                           	opt stack 0
 13700  0026F8                     ___altoft:
 13701                           	opt stack 22
 13702                           
 13703                           ;incstack = 0
 13704  0026F8  0E00               	movlw	0
 13705  0026FA  6E30               	movwf	___altoft@sign,c
 13706  0026FC  0E8E               	movlw	142
 13707  0026FE  6E2F               	movwf	___altoft@exp,c
 13708  002700  0100               	movlb	0	; () banked
 13709  002702  AF8A               	btfss	(___altoft@c+3)& (0+255),7,b
 13710  002704  D011               	goto	l1488
 13711                           
 13712                           ; BSR set to: 0
 13713  002706  1F8A               	comf	(___altoft@c+3)& (0+255),f,b
 13714  002708  1F89               	comf	(___altoft@c+2)& (0+255),f,b
 13715  00270A  1F88               	comf	(___altoft@c+1)& (0+255),f,b
 13716  00270C  6D87               	negf	___altoft@c& (0+255),b
 13717  00270E  0E00               	movlw	0
 13718  002710  2388               	addwfc	(___altoft@c+1)& (0+255),f,b
 13719  002712  2389               	addwfc	(___altoft@c+2)& (0+255),f,b
 13720  002714  238A               	addwfc	(___altoft@c+3)& (0+255),f,b
 13721                           
 13722                           ; BSR set to: 0
 13723  002716  0E01               	movlw	1
 13724  002718  6E30               	movwf	___altoft@sign,c
 13725                           
 13726                           ; BSR set to: 0
 13727  00271A  D006               	goto	l1488
 13728  00271C                     
 13729                           ; BSR set to: 0
 13730                           
 13731                           ; BSR set to: 0
 13732  00271C  90D8               	bcf	status,0,c
 13733  00271E  338A               	rrcf	(___altoft@c+3)& (0+255),f,b
 13734  002720  3389               	rrcf	(___altoft@c+2)& (0+255),f,b
 13735  002722  3388               	rrcf	(___altoft@c+1)& (0+255),f,b
 13736  002724  3387               	rrcf	___altoft@c& (0+255),f,b
 13737  002726  2A2F               	incf	___altoft@exp,f,c
 13738  002728                     l1488:
 13739                           
 13740                           ; BSR set to: 0
 13741                           
 13742                           ; BSR set to: 0
 13743  002728  0E00               	movlw	0
 13744  00272A  1587               	andwf	___altoft@c& (0+255),w,b
 13745  00272C  6F8B               	movwf	??___altoft& (0+255),b
 13746  00272E  0E00               	movlw	0
 13747  002730  1588               	andwf	(___altoft@c+1)& (0+255),w,b
 13748  002732  6F8C               	movwf	(??___altoft+1)& (0+255),b
 13749  002734  0E00               	movlw	0
 13750  002736  1589               	andwf	(___altoft@c+2)& (0+255),w,b
 13751  002738  6F8D               	movwf	(??___altoft+2)& (0+255),b
 13752  00273A  0EFF               	movlw	255
 13753  00273C  158A               	andwf	(___altoft@c+3)& (0+255),w,b
 13754  00273E  6F8E               	movwf	(??___altoft+3)& (0+255),b
 13755  002740  518B               	movf	??___altoft& (0+255),w,b
 13756  002742  118C               	iorwf	(??___altoft+1)& (0+255),w,b
 13757  002744  118D               	iorwf	(??___altoft+2)& (0+255),w,b
 13758  002746  118E               	iorwf	(??___altoft+3)& (0+255),w,b
 13759  002748  A4D8               	btfss	status,2,c
 13760  00274A  D7E8               	goto	l1489
 13761                           
 13762                           ; BSR set to: 0
 13763                           
 13764                           ; BSR set to: 0
 13765  00274C  C087  F018         	movff	___altoft@c,___ftpack@arg
 13766  002750  C088  F019         	movff	___altoft@c+1,___ftpack@arg+1
 13767  002754  C089  F01A         	movff	___altoft@c+2,___ftpack@arg+2
 13768  002758  C02F  F01B         	movff	___altoft@exp,___ftpack@exp
 13769  00275C  C030  F01C         	movff	___altoft@sign,___ftpack@sign
 13770  002760  ECE8  F010         	call	___ftpack	;wreg free
 13771  002764  C018  F087         	movff	?___ftpack,?___altoft
 13772  002768  C019  F088         	movff	?___ftpack+1,?___altoft+1
 13773  00276C  C01A  F089         	movff	?___ftpack+2,?___altoft+2
 13774  002770  0012               	return	
 13775  002772                     __end_of___altoft:
 13776                           	opt stack 0
 13777                           tosu	equ	0xFFF
 13778                           tosh	equ	0xFFE
 13779                           tosl	equ	0xFFD
 13780                           pclath	equ	0xFFA
 13781                           tblptru	equ	0xFF8
 13782                           tblptrh	equ	0xFF7
 13783                           tblptrl	equ	0xFF6
 13784                           tablat	equ	0xFF5
 13785                           prodh	equ	0xFF4
 13786                           prodl	equ	0xFF3
 13787                           intcon	equ	0xFF2
 13788                           intcon2	equ	0xFF1
 13789                           postinc0	equ	0xFEE
 13790                           wreg	equ	0xFE8
 13791                           indf1	equ	0xFE7
 13792                           postdec1	equ	0xFE5
 13793                           fsr1h	equ	0xFE2
 13794                           fsr1l	equ	0xFE1
 13795                           indf2	equ	0xFDF
 13796                           postinc2	equ	0xFDE
 13797                           postdec2	equ	0xFDD
 13798                           fsr2h	equ	0xFDA
 13799                           fsr2l	equ	0xFD9
 13800                           status	equ	0xFD8
 13801                           
 13802 ;; *************** function _eval_poly *****************
 13803 ;; Defined at:
 13804 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
 13805 ;; Parameters:    Size  Location     Type
 13806 ;;  x               3   36[BANK0 ] float 
 13807 ;;  d               2   39[BANK0 ] PTR const 
 13808 ;;		 -> log@coeff(27), exp@coeff(30), 
 13809 ;;  n               2   41[BANK0 ] int 
 13810 ;; Auto vars:     Size  Location     Type
 13811 ;;  res             3   43[BANK0 ] int 
 13812 ;; Return value:  Size  Location     Type
 13813 ;;                  3   36[BANK0 ] int 
 13814 ;; Registers used:
 13815 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13816 ;; Tracked objects:
 13817 ;;		On entry : 0/0
 13818 ;;		On exit  : 0/0
 13819 ;;		Unchanged: 0/0
 13820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13821 ;;      Params:         0       7       0       0       0       0       0
 13822 ;;      Locals:         0       3       0       0       0       0       0
 13823 ;;      Temps:          2       0       0       0       0       0       0
 13824 ;;      Totals:         2      10       0       0       0       0       0
 13825 ;;Total ram usage:       12 bytes
 13826 ;; Hardware stack levels used:    1
 13827 ;; Hardware stack levels required when called:    5
 13828 ;; This function calls:
 13829 ;;		___ftadd
 13830 ;;		___ftmul
 13831 ;;		___wmul
 13832 ;; This function is called by:
 13833 ;;		_exp
 13834 ;;		_log
 13835 ;; This function uses a non-reentrant model
 13836 ;;
 13837                           
 13838                           	psect	text91
 13839  001ECA                     __ptext91:
 13840                           	opt stack 0
 13841  001ECA                     _eval_poly:
 13842                           	opt stack 22
 13843                           
 13844                           ;incstack = 0
 13845  001ECA  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 13846  001ECE  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 13847  001ED2  0E00               	movlw	0
 13848  001ED4  6E1B               	movwf	___wmul@multiplicand+1,c
 13849  001ED6  0E03               	movlw	3
 13850  001ED8  6E1A               	movwf	___wmul@multiplicand,c
 13851  001EDA  EC77  F01A         	call	___wmul	;wreg free
 13852  001EDE  C087  F02F         	movff	eval_poly@d,??_eval_poly
 13853  001EE2  C088  F030         	movff	eval_poly@d+1,??_eval_poly+1
 13854  001EE6  5018               	movf	?___wmul,w,c
 13855  001EE8  262F               	addwf	??_eval_poly,f,c
 13856  001EEA  5019               	movf	?___wmul+1,w,c
 13857  001EEC  2230               	addwfc	??_eval_poly+1,f,c
 13858  001EEE  C02F  FFF6         	movff	??_eval_poly,tblptrl
 13859  001EF2  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 13860  001EF6                     	if	0	;tblptru may be non-zero
 13861  001EF6                     	endif
 13862  001EF6                     	if	0	;tblptru may be non-zero
 13863  001EF6                     	endif
 13864  001EF6  0009               	tblrd		*+
 13865  001EF8  CFF5 F08B          	movff	tablat,eval_poly@res
 13866  001EFC  0009               	tblrd		*+
 13867  001EFE  CFF5 F08C          	movff	tablat,eval_poly@res+1
 13868  001F02  000A               	tblrd		*-
 13869  001F04  CFF5 F08D          	movff	tablat,eval_poly@res+2
 13870  001F08  D03F               	goto	l2113
 13871  001F0A  C08B  F06C         	movff	eval_poly@res,___ftmul@f2
 13872  001F0E  C08C  F06D         	movff	eval_poly@res+1,___ftmul@f2+1
 13873  001F12  C08D  F06E         	movff	eval_poly@res+2,___ftmul@f2+2
 13874  001F16  C084  F069         	movff	eval_poly@x,___ftmul@f1
 13875  001F1A  C085  F06A         	movff	eval_poly@x+1,___ftmul@f1+1
 13876  001F1E  C086  F06B         	movff	eval_poly@x+2,___ftmul@f1+2
 13877  001F22  EC93  F00D         	call	___ftmul	;wreg free
 13878  001F26  C069  F078         	movff	?___ftmul,___ftadd@f1
 13879  001F2A  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 13880  001F2E  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 13881  001F32  0E00               	movlw	0
 13882  001F34  6E1B               	movwf	___wmul@multiplicand+1,c
 13883  001F36  0E03               	movlw	3
 13884  001F38  6E1A               	movwf	___wmul@multiplicand,c
 13885  001F3A  0100               	movlb	0	; () banked
 13886  001F3C  0789               	decf	eval_poly@n& (0+255),f,b
 13887  001F3E  A0D8               	btfss	status,0,c
 13888  001F40  078A               	decf	(eval_poly@n+1)& (0+255),f,b
 13889  001F42  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 13890  001F46  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 13891  001F4A  EC77  F01A         	call	___wmul	;wreg free
 13892  001F4E  C087  F02F         	movff	eval_poly@d,??_eval_poly
 13893  001F52  C088  F030         	movff	eval_poly@d+1,??_eval_poly+1
 13894  001F56  5018               	movf	?___wmul,w,c
 13895  001F58  262F               	addwf	??_eval_poly,f,c
 13896  001F5A  5019               	movf	?___wmul+1,w,c
 13897  001F5C  2230               	addwfc	??_eval_poly+1,f,c
 13898  001F5E  C02F  FFF6         	movff	??_eval_poly,tblptrl
 13899  001F62  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 13900  001F66                     	if	0	;tblptru may be non-zero
 13901  001F66                     	endif
 13902  001F66                     	if	0	;tblptru may be non-zero
 13903  001F66                     	endif
 13904  001F66  0009               	tblrd		*+
 13905  001F68  CFF5 F07B          	movff	tablat,___ftadd@f2
 13906  001F6C  0009               	tblrd		*+
 13907  001F6E  CFF5 F07C          	movff	tablat,___ftadd@f2+1
 13908  001F72  000A               	tblrd		*-
 13909  001F74  CFF5 F07D          	movff	tablat,___ftadd@f2+2
 13910  001F78  ECEE  F009         	call	___ftadd	;wreg free
 13911  001F7C  C078  F08B         	movff	?___ftadd,eval_poly@res
 13912  001F80  C079  F08C         	movff	?___ftadd+1,eval_poly@res+1
 13913  001F84  C07A  F08D         	movff	?___ftadd+2,eval_poly@res+2
 13914  001F88                     l2113:
 13915  001F88  0100               	movlb	0	; () banked
 13916  001F8A  5189               	movf	eval_poly@n& (0+255),w,b
 13917  001F8C  118A               	iorwf	(eval_poly@n+1)& (0+255),w,b
 13918  001F8E  A4D8               	btfss	status,2,c
 13919  001F90  D7BC               	goto	l2114
 13920                           
 13921                           ; BSR set to: 0
 13922  001F92  C08B  F084         	movff	eval_poly@res,?_eval_poly
 13923  001F96  C08C  F085         	movff	eval_poly@res+1,?_eval_poly+1
 13924  001F9A  C08D  F086         	movff	eval_poly@res+2,?_eval_poly+2
 13925                           
 13926                           ; BSR set to: 0
 13927  001F9E  0012               	return		;funcret
 13928  001FA0                     __end_of_eval_poly:
 13929                           	opt stack 0
 13930                           tosu	equ	0xFFF
 13931                           tosh	equ	0xFFE
 13932                           tosl	equ	0xFFD
 13933                           pclath	equ	0xFFA
 13934                           tblptru	equ	0xFF8
 13935                           tblptrh	equ	0xFF7
 13936                           tblptrl	equ	0xFF6
 13937                           tablat	equ	0xFF5
 13938                           prodh	equ	0xFF4
 13939                           prodl	equ	0xFF3
 13940                           intcon	equ	0xFF2
 13941                           intcon2	equ	0xFF1
 13942                           postinc0	equ	0xFEE
 13943                           wreg	equ	0xFE8
 13944                           indf1	equ	0xFE7
 13945                           postdec1	equ	0xFE5
 13946                           fsr1h	equ	0xFE2
 13947                           fsr1l	equ	0xFE1
 13948                           indf2	equ	0xFDF
 13949                           postinc2	equ	0xFDE
 13950                           postdec2	equ	0xFDD
 13951                           fsr2h	equ	0xFDA
 13952                           fsr2l	equ	0xFD9
 13953                           status	equ	0xFD8
 13954                           
 13955 ;; *************** function ___wmul *****************
 13956 ;; Defined at:
 13957 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 13958 ;; Parameters:    Size  Location     Type
 13959 ;;  multiplier      2   23[COMRAM] unsigned int 
 13960 ;;  multiplicand    2   25[COMRAM] unsigned int 
 13961 ;; Auto vars:     Size  Location     Type
 13962 ;;  product         2   27[COMRAM] unsigned int 
 13963 ;; Return value:  Size  Location     Type
 13964 ;;                  2   23[COMRAM] unsigned int 
 13965 ;; Registers used:
 13966 ;;		wreg, status,2, status,0, prodl, prodh
 13967 ;; Tracked objects:
 13968 ;;		On entry : 0/0
 13969 ;;		On exit  : 0/0
 13970 ;;		Unchanged: 0/0
 13971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13972 ;;      Params:         4       0       0       0       0       0       0
 13973 ;;      Locals:         2       0       0       0       0       0       0
 13974 ;;      Temps:          0       0       0       0       0       0       0
 13975 ;;      Totals:         6       0       0       0       0       0       0
 13976 ;;Total ram usage:        6 bytes
 13977 ;; Hardware stack levels used:    1
 13978 ;; Hardware stack levels required when called:    3
 13979 ;; This function calls:
 13980 ;;		Nothing
 13981 ;; This function is called by:
 13982 ;;		_eval_poly
 13983 ;; This function uses a non-reentrant model
 13984 ;;
 13985                           
 13986                           	psect	text92
 13987  0034EE                     __ptext92:
 13988                           	opt stack 0
 13989  0034EE                     ___wmul:
 13990                           	opt stack 23
 13991                           
 13992                           ; BSR set to: 0
 13993                           ;incstack = 0
 13994  0034EE  5018               	movf	___wmul@multiplier,w,c
 13995  0034F0  021A               	mulwf	___wmul@multiplicand,c
 13996  0034F2  CFF3 F01C          	movff	prodl,___wmul@product
 13997  0034F6  CFF4 F01D          	movff	prodh,___wmul@product+1
 13998  0034FA  5018               	movf	___wmul@multiplier,w,c
 13999  0034FC  021B               	mulwf	___wmul@multiplicand+1,c
 14000  0034FE  50F3               	movf	prodl,w,c
 14001  003500  261D               	addwf	___wmul@product+1,f,c
 14002  003502  5019               	movf	___wmul@multiplier+1,w,c
 14003  003504  021A               	mulwf	___wmul@multiplicand,c
 14004  003506  50F3               	movf	prodl,w,c
 14005  003508  261D               	addwf	___wmul@product+1,f,c
 14006  00350A  C01C  F018         	movff	___wmul@product,?___wmul
 14007  00350E  C01D  F019         	movff	___wmul@product+1,?___wmul+1
 14008  003512  0012               	return	
 14009  003514                     __end_of___wmul:
 14010                           	opt stack 0
 14011                           tosu	equ	0xFFF
 14012                           tosh	equ	0xFFE
 14013                           tosl	equ	0xFFD
 14014                           pclath	equ	0xFFA
 14015                           tblptru	equ	0xFF8
 14016                           tblptrh	equ	0xFF7
 14017                           tblptrl	equ	0xFF6
 14018                           tablat	equ	0xFF5
 14019                           prodh	equ	0xFF4
 14020                           prodl	equ	0xFF3
 14021                           intcon	equ	0xFF2
 14022                           intcon2	equ	0xFF1
 14023                           postinc0	equ	0xFEE
 14024                           wreg	equ	0xFE8
 14025                           indf1	equ	0xFE7
 14026                           postdec1	equ	0xFE5
 14027                           fsr1h	equ	0xFE2
 14028                           fsr1l	equ	0xFE1
 14029                           indf2	equ	0xFDF
 14030                           postinc2	equ	0xFDE
 14031                           postdec2	equ	0xFDD
 14032                           fsr2h	equ	0xFDA
 14033                           fsr2l	equ	0xFD9
 14034                           status	equ	0xFD8
 14035                           
 14036 ;; *************** function ___ftmul *****************
 14037 ;; Defined at:
 14038 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 14039 ;; Parameters:    Size  Location     Type
 14040 ;;  f1              3    9[BANK0 ] float 
 14041 ;;  f2              3   12[BANK0 ] float 
 14042 ;; Auto vars:     Size  Location     Type
 14043 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
 14044 ;;  sign            1   23[BANK0 ] unsigned char 
 14045 ;;  cntr            1   22[BANK0 ] unsigned char 
 14046 ;;  exp             1   18[BANK0 ] unsigned char 
 14047 ;; Return value:  Size  Location     Type
 14048 ;;                  3    9[BANK0 ] float 
 14049 ;; Registers used:
 14050 ;;		wreg, status,2, status,0, cstack
 14051 ;; Tracked objects:
 14052 ;;		On entry : 0/0
 14053 ;;		On exit  : 0/0
 14054 ;;		Unchanged: 0/0
 14055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14056 ;;      Params:         0       6       0       0       0       0       0
 14057 ;;      Locals:         0       6       0       0       0       0       0
 14058 ;;      Temps:          0       3       0       0       0       0       0
 14059 ;;      Totals:         0      15       0       0       0       0       0
 14060 ;;Total ram usage:       15 bytes
 14061 ;; Hardware stack levels used:    1
 14062 ;; Hardware stack levels required when called:    4
 14063 ;; This function calls:
 14064 ;;		___ftpack
 14065 ;; This function is called by:
 14066 ;;		_AdcConvert
 14067 ;;		_CheckFlashPrecentage
 14068 ;;		_pow
 14069 ;;		_exp
 14070 ;;		_log
 14071 ;;		_eval_poly
 14072 ;; This function uses a non-reentrant model
 14073 ;;
 14074                           
 14075                           	psect	text93
 14076  001B26                     __ptext93:
 14077                           	opt stack 0
 14078  001B26                     ___ftmul:
 14079                           	opt stack 25
 14080                           
 14081                           ;incstack = 0
 14082  001B26  C06B  F06F         	movff	___ftmul@f1+2,??___ftmul
 14083  001B2A  0100               	movlb	0	; () banked
 14084  001B2C  6B70               	clrf	(??___ftmul+1)& (0+255),b
 14085  001B2E  6B71               	clrf	(??___ftmul+2)& (0+255),b
 14086  001B30  356A               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 14087  001B32  376F               	rlcf	??___ftmul& (0+255),f,b
 14088  001B34  E301               	bnc	u6551
 14089  001B36  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 14090  001B38                     u6551:
 14091  001B38  516F               	movf	??___ftmul& (0+255),w,b
 14092  001B3A  6F72               	movwf	___ftmul@exp& (0+255),b
 14093  001B3C  5172               	movf	___ftmul@exp& (0+255),w,b
 14094  001B3E  A4D8               	btfss	status,2,c
 14095  001B40  D007               	goto	l1697
 14096                           
 14097                           ; BSR set to: 0
 14098  001B42  0E00               	movlw	0
 14099  001B44  6F69               	movwf	?___ftmul& (0+255),b
 14100  001B46  0E00               	movlw	0
 14101  001B48  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 14102  001B4A  0E00               	movlw	0
 14103  001B4C  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 14104                           
 14105                           ; BSR set to: 0
 14106  001B4E  0012               	return	
 14107  001B50                     l1697:
 14108                           
 14109                           ; BSR set to: 0
 14110                           
 14111                           ; BSR set to: 0
 14112  001B50  C06E  F06F         	movff	___ftmul@f2+2,??___ftmul
 14113  001B54  6B70               	clrf	(??___ftmul+1)& (0+255),b
 14114  001B56  6B71               	clrf	(??___ftmul+2)& (0+255),b
 14115  001B58  356D               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 14116  001B5A  376F               	rlcf	??___ftmul& (0+255),f,b
 14117  001B5C  E301               	bnc	u6571
 14118  001B5E  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 14119  001B60                     u6571:
 14120  001B60  516F               	movf	??___ftmul& (0+255),w,b
 14121  001B62  6F77               	movwf	___ftmul@sign& (0+255),b
 14122  001B64  5177               	movf	___ftmul@sign& (0+255),w,b
 14123  001B66  A4D8               	btfss	status,2,c
 14124  001B68  D007               	goto	l1699
 14125                           
 14126                           ; BSR set to: 0
 14127  001B6A  0E00               	movlw	0
 14128  001B6C  6F69               	movwf	?___ftmul& (0+255),b
 14129  001B6E  0E00               	movlw	0
 14130  001B70  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 14131  001B72  0E00               	movlw	0
 14132  001B74  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 14133                           
 14134                           ; BSR set to: 0
 14135  001B76  0012               	return	
 14136  001B78                     l1699:
 14137                           
 14138                           ; BSR set to: 0
 14139                           
 14140                           ; BSR set to: 0
 14141  001B78  5177               	movf	___ftmul@sign& (0+255),w,b
 14142  001B7A  0F7B               	addlw	123
 14143  001B7C  2772               	addwf	___ftmul@exp& (0+255),f,b
 14144                           
 14145                           ; BSR set to: 0
 14146  001B7E  C06B  F077         	movff	___ftmul@f1+2,___ftmul@sign
 14147  001B82  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 14148  001B84  1B77               	xorwf	___ftmul@sign& (0+255),f,b
 14149  001B86  0E80               	movlw	128
 14150  001B88  1777               	andwf	___ftmul@sign& (0+255),f,b
 14151                           
 14152                           ; BSR set to: 0
 14153  001B8A  8F6A               	bsf	(___ftmul@f1+1)& (0+255),7,b
 14154                           
 14155                           ; BSR set to: 0
 14156  001B8C  8F6D               	bsf	(___ftmul@f2+1)& (0+255),7,b
 14157                           
 14158                           ; BSR set to: 0
 14159  001B8E  0EFF               	movlw	255
 14160  001B90  176C               	andwf	___ftmul@f2& (0+255),f,b
 14161  001B92  0EFF               	movlw	255
 14162  001B94  176D               	andwf	(___ftmul@f2+1)& (0+255),f,b
 14163  001B96  0E00               	movlw	0
 14164  001B98  176E               	andwf	(___ftmul@f2+2)& (0+255),f,b
 14165                           
 14166                           ; BSR set to: 0
 14167  001B9A  0E00               	movlw	0
 14168  001B9C  6F73               	movwf	___ftmul@f3_as_product& (0+255),b
 14169  001B9E  0E00               	movlw	0
 14170  001BA0  6F74               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 14171  001BA2  0E00               	movlw	0
 14172  001BA4  6F75               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 14173                           
 14174                           ; BSR set to: 0
 14175  001BA6  0E07               	movlw	7
 14176  001BA8  6F76               	movwf	___ftmul@cntr& (0+255),b
 14177  001BAA                     
 14178                           ; BSR set to: 0
 14179                           
 14180                           ; BSR set to: 0
 14181  001BAA  A169               	btfss	___ftmul@f1& (0+255),0,b
 14182  001BAC  D006               	goto	l1701
 14183                           
 14184                           ; BSR set to: 0
 14185  001BAE  516C               	movf	___ftmul@f2& (0+255),w,b
 14186  001BB0  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 14187  001BB2  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 14188  001BB4  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 14189  001BB6  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 14190  001BB8  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 14191  001BBA                     l1701:
 14192                           
 14193                           ; BSR set to: 0
 14194                           
 14195                           ; BSR set to: 0
 14196  001BBA  90D8               	bcf	status,0,c
 14197  001BBC  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 14198  001BBE  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 14199  001BC0  3369               	rrcf	___ftmul@f1& (0+255),f,b
 14200  001BC2  90D8               	bcf	status,0,c
 14201  001BC4  376C               	rlcf	___ftmul@f2& (0+255),f,b
 14202  001BC6  376D               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 14203  001BC8  376E               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 14204                           
 14205                           ; BSR set to: 0
 14206  001BCA  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 14207  001BCC  D7EE               	goto	l1700
 14208                           
 14209                           ; BSR set to: 0
 14210                           
 14211                           ; BSR set to: 0
 14212  001BCE  0E09               	movlw	9
 14213  001BD0  6F76               	movwf	___ftmul@cntr& (0+255),b
 14214  001BD2                     
 14215                           ; BSR set to: 0
 14216                           
 14217                           ; BSR set to: 0
 14218  001BD2  A169               	btfss	___ftmul@f1& (0+255),0,b
 14219  001BD4  D006               	goto	l1704
 14220                           
 14221                           ; BSR set to: 0
 14222  001BD6  516C               	movf	___ftmul@f2& (0+255),w,b
 14223  001BD8  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 14224  001BDA  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 14225  001BDC  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 14226  001BDE  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 14227  001BE0  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 14228  001BE2                     l1704:
 14229                           
 14230                           ; BSR set to: 0
 14231                           
 14232                           ; BSR set to: 0
 14233  001BE2  90D8               	bcf	status,0,c
 14234  001BE4  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 14235  001BE6  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 14236  001BE8  3369               	rrcf	___ftmul@f1& (0+255),f,b
 14237  001BEA  90D8               	bcf	status,0,c
 14238  001BEC  3375               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 14239  001BEE  3374               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 14240  001BF0  3373               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 14241                           
 14242                           ; BSR set to: 0
 14243  001BF2  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 14244  001BF4  D7EE               	goto	l1703
 14245                           
 14246                           ; BSR set to: 0
 14247                           
 14248                           ; BSR set to: 0
 14249  001BF6  C073  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
 14250  001BFA  C074  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 14251  001BFE  C075  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 14252  001C02  C072  F01B         	movff	___ftmul@exp,___ftpack@exp
 14253  001C06  C077  F01C         	movff	___ftmul@sign,___ftpack@sign
 14254  001C0A  ECE8  F010         	call	___ftpack	;wreg free
 14255  001C0E  C018  F069         	movff	?___ftpack,?___ftmul
 14256  001C12  C019  F06A         	movff	?___ftpack+1,?___ftmul+1
 14257  001C16  C01A  F06B         	movff	?___ftpack+2,?___ftmul+2
 14258  001C1A  0012               	return	
 14259  001C1C                     __end_of___ftmul:
 14260                           	opt stack 0
 14261                           tosu	equ	0xFFF
 14262                           tosh	equ	0xFFE
 14263                           tosl	equ	0xFFD
 14264                           pclath	equ	0xFFA
 14265                           tblptru	equ	0xFF8
 14266                           tblptrh	equ	0xFF7
 14267                           tblptrl	equ	0xFF6
 14268                           tablat	equ	0xFF5
 14269                           prodh	equ	0xFF4
 14270                           prodl	equ	0xFF3
 14271                           intcon	equ	0xFF2
 14272                           intcon2	equ	0xFF1
 14273                           postinc0	equ	0xFEE
 14274                           wreg	equ	0xFE8
 14275                           indf1	equ	0xFE7
 14276                           postdec1	equ	0xFE5
 14277                           fsr1h	equ	0xFE2
 14278                           fsr1l	equ	0xFE1
 14279                           indf2	equ	0xFDF
 14280                           postinc2	equ	0xFDE
 14281                           postdec2	equ	0xFDD
 14282                           fsr2h	equ	0xFDA
 14283                           fsr2l	equ	0xFD9
 14284                           status	equ	0xFD8
 14285                           
 14286 ;; *************** function ___ftsub *****************
 14287 ;; Defined at:
 14288 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
 14289 ;; Parameters:    Size  Location     Type
 14290 ;;  f1              3   36[BANK0 ] float 
 14291 ;;  f2              3   39[BANK0 ] float 
 14292 ;; Auto vars:     Size  Location     Type
 14293 ;;		None
 14294 ;; Return value:  Size  Location     Type
 14295 ;;                  3   36[BANK0 ] float 
 14296 ;; Registers used:
 14297 ;;		wreg, status,2, status,0, cstack
 14298 ;; Tracked objects:
 14299 ;;		On entry : 0/0
 14300 ;;		On exit  : 0/0
 14301 ;;		Unchanged: 0/0
 14302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14303 ;;      Params:         0       6       0       0       0       0       0
 14304 ;;      Locals:         0       0       0       0       0       0       0
 14305 ;;      Temps:          0       0       0       0       0       0       0
 14306 ;;      Totals:         0       6       0       0       0       0       0
 14307 ;;Total ram usage:        6 bytes
 14308 ;; Hardware stack levels used:    1
 14309 ;; Hardware stack levels required when called:    5
 14310 ;; This function calls:
 14311 ;;		___ftadd
 14312 ;; This function is called by:
 14313 ;;		_exp
 14314 ;; This function uses a non-reentrant model
 14315 ;;
 14316                           
 14317                           	psect	text94
 14318  003016                     __ptext94:
 14319                           	opt stack 0
 14320  003016                     ___ftsub:
 14321                           	opt stack 22
 14322                           
 14323                           ;incstack = 0
 14324  003016  0100               	movlb	0	; () banked
 14325  003018  5187               	movf	___ftsub@f2& (0+255),w,b
 14326  00301A  1188               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 14327  00301C  1189               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 14328  00301E  B4D8               	btfsc	status,2,c
 14329  003020  D006               	goto	l1714
 14330                           
 14331                           ; BSR set to: 0
 14332  003022  0E00               	movlw	0
 14333  003024  1B87               	xorwf	___ftsub@f2& (0+255),f,b
 14334  003026  0E00               	movlw	0
 14335  003028  1B88               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 14336  00302A  0E80               	movlw	128
 14337  00302C  1B89               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 14338  00302E                     l1714:
 14339                           
 14340                           ; BSR set to: 0
 14341                           
 14342                           ; BSR set to: 0
 14343  00302E  C084  F078         	movff	___ftsub@f1,___ftadd@f1
 14344  003032  C085  F079         	movff	___ftsub@f1+1,___ftadd@f1+1
 14345  003036  C086  F07A         	movff	___ftsub@f1+2,___ftadd@f1+2
 14346  00303A  C087  F07B         	movff	___ftsub@f2,___ftadd@f2
 14347  00303E  C088  F07C         	movff	___ftsub@f2+1,___ftadd@f2+1
 14348  003042  C089  F07D         	movff	___ftsub@f2+2,___ftadd@f2+2
 14349  003046  ECEE  F009         	call	___ftadd	;wreg free
 14350  00304A  C078  F084         	movff	?___ftadd,?___ftsub
 14351  00304E  C079  F085         	movff	?___ftadd+1,?___ftsub+1
 14352  003052  C07A  F086         	movff	?___ftadd+2,?___ftsub+2
 14353  003056  0012               	return	
 14354  003058                     __end_of___ftsub:
 14355                           	opt stack 0
 14356                           tosu	equ	0xFFF
 14357                           tosh	equ	0xFFE
 14358                           tosl	equ	0xFFD
 14359                           pclath	equ	0xFFA
 14360                           tblptru	equ	0xFF8
 14361                           tblptrh	equ	0xFF7
 14362                           tblptrl	equ	0xFF6
 14363                           tablat	equ	0xFF5
 14364                           prodh	equ	0xFF4
 14365                           prodl	equ	0xFF3
 14366                           intcon	equ	0xFF2
 14367                           intcon2	equ	0xFF1
 14368                           postinc0	equ	0xFEE
 14369                           wreg	equ	0xFE8
 14370                           indf1	equ	0xFE7
 14371                           postdec1	equ	0xFE5
 14372                           fsr1h	equ	0xFE2
 14373                           fsr1l	equ	0xFE1
 14374                           indf2	equ	0xFDF
 14375                           postinc2	equ	0xFDE
 14376                           postdec2	equ	0xFDD
 14377                           fsr2h	equ	0xFDA
 14378                           fsr2l	equ	0xFD9
 14379                           status	equ	0xFD8
 14380                           
 14381 ;; *************** function ___ftadd *****************
 14382 ;; Defined at:
 14383 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 14384 ;; Parameters:    Size  Location     Type
 14385 ;;  f1              3   24[BANK0 ] float 
 14386 ;;  f2              3   27[BANK0 ] float 
 14387 ;; Auto vars:     Size  Location     Type
 14388 ;;  exp1            1   35[BANK0 ] unsigned char 
 14389 ;;  exp2            1   34[BANK0 ] unsigned char 
 14390 ;;  sign            1   33[BANK0 ] unsigned char 
 14391 ;; Return value:  Size  Location     Type
 14392 ;;                  3   24[BANK0 ] float 
 14393 ;; Registers used:
 14394 ;;		wreg, status,2, status,0, cstack
 14395 ;; Tracked objects:
 14396 ;;		On entry : 0/0
 14397 ;;		On exit  : 0/0
 14398 ;;		Unchanged: 0/0
 14399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14400 ;;      Params:         0       6       0       0       0       0       0
 14401 ;;      Locals:         0       3       0       0       0       0       0
 14402 ;;      Temps:          0       3       0       0       0       0       0
 14403 ;;      Totals:         0      12       0       0       0       0       0
 14404 ;;Total ram usage:       12 bytes
 14405 ;; Hardware stack levels used:    1
 14406 ;; Hardware stack levels required when called:    4
 14407 ;; This function calls:
 14408 ;;		___ftpack
 14409 ;; This function is called by:
 14410 ;;		___ftsub
 14411 ;;		_floor
 14412 ;;		_log
 14413 ;;		_eval_poly
 14414 ;; This function uses a non-reentrant model
 14415 ;;
 14416                           
 14417                           	psect	text95
 14418  0013DC                     __ptext95:
 14419                           	opt stack 0
 14420  0013DC                     ___ftadd:
 14421                           	opt stack 22
 14422                           
 14423                           ;incstack = 0
 14424  0013DC  C07A  F07E         	movff	___ftadd@f1+2,??___ftadd
 14425  0013E0  0100               	movlb	0	; () banked
 14426  0013E2  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 14427  0013E4  6B80               	clrf	(??___ftadd+2)& (0+255),b
 14428  0013E6  3579               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 14429  0013E8  377E               	rlcf	??___ftadd& (0+255),f,b
 14430  0013EA  E301               	bnc	u6341
 14431  0013EC  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 14432  0013EE                     u6341:
 14433  0013EE  517E               	movf	??___ftadd& (0+255),w,b
 14434  0013F0  6F83               	movwf	___ftadd@exp1& (0+255),b
 14435  0013F2  C07D  F07E         	movff	___ftadd@f2+2,??___ftadd
 14436  0013F6  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 14437  0013F8  6B80               	clrf	(??___ftadd+2)& (0+255),b
 14438  0013FA  357C               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 14439  0013FC  377E               	rlcf	??___ftadd& (0+255),f,b
 14440  0013FE  E301               	bnc	u6351
 14441  001400  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 14442  001402                     u6351:
 14443  001402  517E               	movf	??___ftadd& (0+255),w,b
 14444  001404  6F82               	movwf	___ftadd@exp2& (0+255),b
 14445                           
 14446                           ; BSR set to: 0
 14447  001406  5183               	movf	___ftadd@exp1& (0+255),w,b
 14448  001408  B4D8               	btfsc	status,2,c
 14449  00140A  D00B               	goto	u6380
 14450                           
 14451                           ; BSR set to: 0
 14452  00140C  5182               	movf	___ftadd@exp2& (0+255),w,b
 14453  00140E  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 14454  001410  B0D8               	btfsc	status,0,c
 14455  001412  D00E               	goto	l1649
 14456                           
 14457                           ; BSR set to: 0
 14458  001414  5183               	movf	___ftadd@exp1& (0+255),w,b
 14459  001416  0800               	sublw	0
 14460  001418  2582               	addwf	___ftadd@exp2& (0+255),w,b
 14461  00141A  6F7E               	movwf	??___ftadd& (0+255),b
 14462  00141C  0E18               	movlw	24
 14463  00141E  657E               	cpfsgt	??___ftadd& (0+255),b
 14464  001420  D007               	goto	l1649
 14465  001422                     u6380:
 14466                           
 14467                           ; BSR set to: 0
 14468  001422  C07B  F078         	movff	___ftadd@f2,?___ftadd
 14469  001426  C07C  F079         	movff	___ftadd@f2+1,?___ftadd+1
 14470  00142A  C07D  F07A         	movff	___ftadd@f2+2,?___ftadd+2
 14471  00142E  0012               	return	
 14472  001430                     l1649:
 14473                           
 14474                           ; BSR set to: 0
 14475                           
 14476                           ; BSR set to: 0
 14477  001430  5182               	movf	___ftadd@exp2& (0+255),w,b
 14478  001432  B4D8               	btfsc	status,2,c
 14479  001434  D00B               	goto	u6410
 14480                           
 14481                           ; BSR set to: 0
 14482  001436  5183               	movf	___ftadd@exp1& (0+255),w,b
 14483  001438  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 14484  00143A  B0D8               	btfsc	status,0,c
 14485  00143C  D00E               	goto	l1653
 14486                           
 14487                           ; BSR set to: 0
 14488  00143E  5182               	movf	___ftadd@exp2& (0+255),w,b
 14489  001440  0800               	sublw	0
 14490  001442  2583               	addwf	___ftadd@exp1& (0+255),w,b
 14491  001444  6F7E               	movwf	??___ftadd& (0+255),b
 14492  001446  0E18               	movlw	24
 14493  001448  657E               	cpfsgt	??___ftadd& (0+255),b
 14494  00144A  D007               	goto	l1653
 14495  00144C                     u6410:
 14496                           
 14497                           ; BSR set to: 0
 14498  00144C  C078  F078         	movff	___ftadd@f1,?___ftadd
 14499  001450  C079  F079         	movff	___ftadd@f1+1,?___ftadd+1
 14500  001454  C07A  F07A         	movff	___ftadd@f1+2,?___ftadd+2
 14501  001458  0012               	return	
 14502  00145A                     l1653:
 14503                           
 14504                           ; BSR set to: 0
 14505                           
 14506                           ; BSR set to: 0
 14507  00145A  0E06               	movlw	6
 14508  00145C  6F81               	movwf	___ftadd@sign& (0+255),b
 14509                           
 14510                           ; BSR set to: 0
 14511  00145E  BF7A               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 14512                           
 14513                           ; BSR set to: 0
 14514  001460  8F81               	bsf	___ftadd@sign& (0+255),7,b
 14515                           
 14516                           ; BSR set to: 0
 14517                           
 14518                           ; BSR set to: 0
 14519  001462  BF7D               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 14520                           
 14521                           ; BSR set to: 0
 14522  001464  8D81               	bsf	___ftadd@sign& (0+255),6,b
 14523                           
 14524                           ; BSR set to: 0
 14525  001466  8F79               	bsf	(___ftadd@f1+1)& (0+255),7,b
 14526                           
 14527                           ; BSR set to: 0
 14528  001468  0EFF               	movlw	255
 14529  00146A  1778               	andwf	___ftadd@f1& (0+255),f,b
 14530  00146C  0EFF               	movlw	255
 14531  00146E  1779               	andwf	(___ftadd@f1+1)& (0+255),f,b
 14532  001470  0E00               	movlw	0
 14533  001472  177A               	andwf	(___ftadd@f1+2)& (0+255),f,b
 14534  001474  8F7C               	bsf	(___ftadd@f2+1)& (0+255),7,b
 14535                           
 14536                           ; BSR set to: 0
 14537  001476  0EFF               	movlw	255
 14538  001478  177B               	andwf	___ftadd@f2& (0+255),f,b
 14539  00147A  0EFF               	movlw	255
 14540  00147C  177C               	andwf	(___ftadd@f2+1)& (0+255),f,b
 14541  00147E  0E00               	movlw	0
 14542  001480  177D               	andwf	(___ftadd@f2+2)& (0+255),f,b
 14543                           
 14544                           ; BSR set to: 0
 14545  001482  5182               	movf	___ftadd@exp2& (0+255),w,b
 14546  001484  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 14547  001486  B0D8               	btfsc	status,0,c
 14548  001488  D01B               	goto	l1658
 14549  00148A                     u6440:
 14550                           
 14551                           ; BSR set to: 0
 14552                           
 14553                           ; BSR set to: 0
 14554  00148A  90D8               	bcf	status,0,c
 14555  00148C  377B               	rlcf	___ftadd@f2& (0+255),f,b
 14556  00148E  377C               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 14557  001490  377D               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 14558  001492  0782               	decf	___ftadd@exp2& (0+255),f,b
 14559                           
 14560                           ; BSR set to: 0
 14561  001494  5183               	movf	___ftadd@exp1& (0+255),w,b
 14562  001496  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 14563  001498  B4D8               	btfsc	status,2,c
 14564  00149A  D00D               	goto	l1663
 14565                           
 14566                           ; BSR set to: 0
 14567  00149C  0781               	decf	___ftadd@sign& (0+255),f,b
 14568  00149E  C081  F07E         	movff	___ftadd@sign,??___ftadd
 14569  0014A2  0E07               	movlw	7
 14570  0014A4  177E               	andwf	??___ftadd& (0+255),f,b
 14571  0014A6  B4D8               	btfsc	status,2,c
 14572  0014A8  D006               	goto	l1663
 14573  0014AA  D7EF               	goto	u6440
 14574  0014AC                     
 14575                           ; BSR set to: 0
 14576                           
 14577                           ; BSR set to: 0
 14578  0014AC  90D8               	bcf	status,0,c
 14579  0014AE  337A               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 14580  0014B0  3379               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 14581  0014B2  3378               	rrcf	___ftadd@f1& (0+255),f,b
 14582  0014B4  2B83               	incf	___ftadd@exp1& (0+255),f,b
 14583  0014B6                     l1663:
 14584                           
 14585                           ; BSR set to: 0
 14586                           
 14587                           ; BSR set to: 0
 14588  0014B6  5182               	movf	___ftadd@exp2& (0+255),w,b
 14589  0014B8  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 14590  0014BA  B4D8               	btfsc	status,2,c
 14591  0014BC  D01F               	goto	u6510
 14592  0014BE  D7F6               	goto	l1664
 14593  0014C0                     l1658:
 14594                           
 14595                           ; BSR set to: 0
 14596                           
 14597                           ; BSR set to: 0
 14598  0014C0  5183               	movf	___ftadd@exp1& (0+255),w,b
 14599  0014C2  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 14600  0014C4  B0D8               	btfsc	status,0,c
 14601  0014C6  D01A               	goto	u6510
 14602  0014C8                     u6480:
 14603                           
 14604                           ; BSR set to: 0
 14605                           
 14606                           ; BSR set to: 0
 14607  0014C8  90D8               	bcf	status,0,c
 14608  0014CA  3778               	rlcf	___ftadd@f1& (0+255),f,b
 14609  0014CC  3779               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 14610  0014CE  377A               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 14611  0014D0  0783               	decf	___ftadd@exp1& (0+255),f,b
 14612                           
 14613                           ; BSR set to: 0
 14614  0014D2  5183               	movf	___ftadd@exp1& (0+255),w,b
 14615  0014D4  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 14616  0014D6  B4D8               	btfsc	status,2,c
 14617  0014D8  D00D               	goto	l1672
 14618                           
 14619                           ; BSR set to: 0
 14620  0014DA  0781               	decf	___ftadd@sign& (0+255),f,b
 14621  0014DC  C081  F07E         	movff	___ftadd@sign,??___ftadd
 14622  0014E0  0E07               	movlw	7
 14623  0014E2  177E               	andwf	??___ftadd& (0+255),f,b
 14624  0014E4  B4D8               	btfsc	status,2,c
 14625  0014E6  D006               	goto	l1672
 14626  0014E8  D7EF               	goto	u6480
 14627  0014EA                     
 14628                           ; BSR set to: 0
 14629                           
 14630                           ; BSR set to: 0
 14631  0014EA  90D8               	bcf	status,0,c
 14632  0014EC  337D               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 14633  0014EE  337C               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 14634  0014F0  337B               	rrcf	___ftadd@f2& (0+255),f,b
 14635  0014F2  2B82               	incf	___ftadd@exp2& (0+255),f,b
 14636  0014F4                     l1672:
 14637                           
 14638                           ; BSR set to: 0
 14639                           
 14640                           ; BSR set to: 0
 14641  0014F4  5182               	movf	___ftadd@exp2& (0+255),w,b
 14642  0014F6  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 14643  0014F8  A4D8               	btfss	status,2,c
 14644  0014FA  D7F7               	goto	l1673
 14645  0014FC                     u6510:
 14646                           
 14647                           ; BSR set to: 0
 14648                           
 14649                           ; BSR set to: 0
 14650                           
 14651                           ; BSR set to: 0
 14652  0014FC  AF81               	btfss	___ftadd@sign& (0+255),7,b
 14653  0014FE  D00C               	goto	l1675
 14654                           
 14655                           ; BSR set to: 0
 14656  001500  0EFF               	movlw	255
 14657  001502  1B78               	xorwf	___ftadd@f1& (0+255),f,b
 14658  001504  0EFF               	movlw	255
 14659  001506  1B79               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 14660  001508  0EFF               	movlw	255
 14661  00150A  1B7A               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 14662  00150C  0E01               	movlw	1
 14663  00150E  2778               	addwf	___ftadd@f1& (0+255),f,b
 14664  001510  0E00               	movlw	0
 14665  001512  2379               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 14666  001514  0E00               	movlw	0
 14667  001516  237A               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 14668  001518                     l1675:
 14669                           
 14670                           ; BSR set to: 0
 14671  001518  AD81               	btfss	___ftadd@sign& (0+255),6,b
 14672  00151A  D00C               	goto	l1676
 14673                           
 14674                           ; BSR set to: 0
 14675  00151C  0EFF               	movlw	255
 14676  00151E  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 14677  001520  0EFF               	movlw	255
 14678  001522  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 14679  001524  0EFF               	movlw	255
 14680  001526  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 14681  001528  0E01               	movlw	1
 14682  00152A  277B               	addwf	___ftadd@f2& (0+255),f,b
 14683  00152C  0E00               	movlw	0
 14684  00152E  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 14685  001530  0E00               	movlw	0
 14686  001532  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 14687  001534                     l1676:
 14688                           
 14689                           ; BSR set to: 0
 14690                           
 14691                           ; BSR set to: 0
 14692  001534  0E00               	movlw	0
 14693  001536  6F81               	movwf	___ftadd@sign& (0+255),b
 14694                           
 14695                           ; BSR set to: 0
 14696  001538  5178               	movf	___ftadd@f1& (0+255),w,b
 14697  00153A  277B               	addwf	___ftadd@f2& (0+255),f,b
 14698  00153C  5179               	movf	(___ftadd@f1+1)& (0+255),w,b
 14699  00153E  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 14700  001540  517A               	movf	(___ftadd@f1+2)& (0+255),w,b
 14701  001542  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 14702                           
 14703                           ; BSR set to: 0
 14704  001544  AF7D               	btfss	(___ftadd@f2+2)& (0+255),7,b
 14705  001546  D00E               	goto	l1677
 14706                           
 14707                           ; BSR set to: 0
 14708  001548  0EFF               	movlw	255
 14709  00154A  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 14710  00154C  0EFF               	movlw	255
 14711  00154E  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 14712  001550  0EFF               	movlw	255
 14713  001552  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 14714  001554  0E01               	movlw	1
 14715  001556  277B               	addwf	___ftadd@f2& (0+255),f,b
 14716  001558  0E00               	movlw	0
 14717  00155A  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 14718  00155C  0E00               	movlw	0
 14719  00155E  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 14720                           
 14721                           ; BSR set to: 0
 14722  001560  0E01               	movlw	1
 14723  001562  6F81               	movwf	___ftadd@sign& (0+255),b
 14724  001564                     l1677:
 14725                           
 14726                           ; BSR set to: 0
 14727                           
 14728                           ; BSR set to: 0
 14729  001564  C07B  F018         	movff	___ftadd@f2,___ftpack@arg
 14730  001568  C07C  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
 14731  00156C  C07D  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
 14732  001570  C083  F01B         	movff	___ftadd@exp1,___ftpack@exp
 14733  001574  C081  F01C         	movff	___ftadd@sign,___ftpack@sign
 14734  001578  ECE8  F010         	call	___ftpack	;wreg free
 14735  00157C  C018  F078         	movff	?___ftpack,?___ftadd
 14736  001580  C019  F079         	movff	?___ftpack+1,?___ftadd+1
 14737  001584  C01A  F07A         	movff	?___ftpack+2,?___ftadd+2
 14738  001588  0012               	return	
 14739  00158A                     __end_of___ftadd:
 14740                           	opt stack 0
 14741                           tosu	equ	0xFFF
 14742                           tosh	equ	0xFFE
 14743                           tosl	equ	0xFFD
 14744                           pclath	equ	0xFFA
 14745                           tblptru	equ	0xFF8
 14746                           tblptrh	equ	0xFF7
 14747                           tblptrl	equ	0xFF6
 14748                           tablat	equ	0xFF5
 14749                           prodh	equ	0xFF4
 14750                           prodl	equ	0xFF3
 14751                           intcon	equ	0xFF2
 14752                           intcon2	equ	0xFF1
 14753                           postinc0	equ	0xFEE
 14754                           wreg	equ	0xFE8
 14755                           indf1	equ	0xFE7
 14756                           postdec1	equ	0xFE5
 14757                           fsr1h	equ	0xFE2
 14758                           fsr1l	equ	0xFE1
 14759                           indf2	equ	0xFDF
 14760                           postinc2	equ	0xFDE
 14761                           postdec2	equ	0xFDD
 14762                           fsr2h	equ	0xFDA
 14763                           fsr2l	equ	0xFD9
 14764                           status	equ	0xFD8
 14765                           
 14766 ;; *************** function ___ftneg *****************
 14767 ;; Defined at:
 14768 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 14769 ;; Parameters:    Size  Location     Type
 14770 ;;  f1              3   23[COMRAM] float 
 14771 ;; Auto vars:     Size  Location     Type
 14772 ;;		None
 14773 ;; Return value:  Size  Location     Type
 14774 ;;                  3   23[COMRAM] float 
 14775 ;; Registers used:
 14776 ;;		wreg, status,2, status,0
 14777 ;; Tracked objects:
 14778 ;;		On entry : 0/0
 14779 ;;		On exit  : 0/0
 14780 ;;		Unchanged: 0/0
 14781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14782 ;;      Params:         3       0       0       0       0       0       0
 14783 ;;      Locals:         0       0       0       0       0       0       0
 14784 ;;      Temps:          0       0       0       0       0       0       0
 14785 ;;      Totals:         3       0       0       0       0       0       0
 14786 ;;Total ram usage:        3 bytes
 14787 ;; Hardware stack levels used:    1
 14788 ;; Hardware stack levels required when called:    3
 14789 ;; This function calls:
 14790 ;;		Nothing
 14791 ;; This function is called by:
 14792 ;;		_pow
 14793 ;;		_exp
 14794 ;; This function uses a non-reentrant model
 14795 ;;
 14796                           
 14797                           	psect	text96
 14798  003514                     __ptext96:
 14799                           	opt stack 0
 14800  003514                     ___ftneg:
 14801                           	opt stack 24
 14802                           
 14803                           ;incstack = 0
 14804  003514  5018               	movf	___ftneg@f1,w,c
 14805  003516  1019               	iorwf	___ftneg@f1+1,w,c
 14806  003518  101A               	iorwf	___ftneg@f1+2,w,c
 14807  00351A  B4D8               	btfsc	status,2,c
 14808  00351C  D006               	goto	l1708
 14809  00351E  0E00               	movlw	0
 14810  003520  1A18               	xorwf	___ftneg@f1,f,c
 14811  003522  0E00               	movlw	0
 14812  003524  1A19               	xorwf	___ftneg@f1+1,f,c
 14813  003526  0E80               	movlw	128
 14814  003528  1A1A               	xorwf	___ftneg@f1+2,f,c
 14815  00352A                     l1708:
 14816  00352A  C018  F018         	movff	___ftneg@f1,?___ftneg
 14817  00352E  C019  F019         	movff	___ftneg@f1+1,?___ftneg+1
 14818  003532  C01A  F01A         	movff	___ftneg@f1+2,?___ftneg+2
 14819  003536  0012               	return		;funcret
 14820  003538                     __end_of___ftneg:
 14821                           	opt stack 0
 14822                           tosu	equ	0xFFF
 14823                           tosh	equ	0xFFE
 14824                           tosl	equ	0xFFD
 14825                           pclath	equ	0xFFA
 14826                           tblptru	equ	0xFF8
 14827                           tblptrh	equ	0xFF7
 14828                           tblptrl	equ	0xFF6
 14829                           tablat	equ	0xFF5
 14830                           prodh	equ	0xFF4
 14831                           prodl	equ	0xFF3
 14832                           intcon	equ	0xFF2
 14833                           intcon2	equ	0xFF1
 14834                           postinc0	equ	0xFEE
 14835                           wreg	equ	0xFE8
 14836                           indf1	equ	0xFE7
 14837                           postdec1	equ	0xFE5
 14838                           fsr1h	equ	0xFE2
 14839                           fsr1l	equ	0xFE1
 14840                           indf2	equ	0xFDF
 14841                           postinc2	equ	0xFDE
 14842                           postdec2	equ	0xFDD
 14843                           fsr2h	equ	0xFDA
 14844                           fsr2l	equ	0xFD9
 14845                           status	equ	0xFD8
 14846                           
 14847 ;; *************** function ___ftdiv *****************
 14848 ;; Defined at:
 14849 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 14850 ;; Parameters:    Size  Location     Type
 14851 ;;  f1              3   40[COMRAM] float 
 14852 ;;  f2              3   43[COMRAM] float 
 14853 ;; Auto vars:     Size  Location     Type
 14854 ;;  f3              3    4[BANK0 ] float 
 14855 ;;  sign            1    8[BANK0 ] unsigned char 
 14856 ;;  exp             1    7[BANK0 ] unsigned char 
 14857 ;;  cntr            1    3[BANK0 ] unsigned char 
 14858 ;; Return value:  Size  Location     Type
 14859 ;;                  3   40[COMRAM] float 
 14860 ;; Registers used:
 14861 ;;		wreg, status,2, status,0, cstack
 14862 ;; Tracked objects:
 14863 ;;		On entry : 0/0
 14864 ;;		On exit  : 0/0
 14865 ;;		Unchanged: 0/0
 14866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14867 ;;      Params:         6       0       0       0       0       0       0
 14868 ;;      Locals:         0       6       0       0       0       0       0
 14869 ;;      Temps:          0       3       0       0       0       0       0
 14870 ;;      Totals:         6       9       0       0       0       0       0
 14871 ;;Total ram usage:       15 bytes
 14872 ;; Hardware stack levels used:    1
 14873 ;; Hardware stack levels required when called:    4
 14874 ;; This function calls:
 14875 ;;		___ftpack
 14876 ;; This function is called by:
 14877 ;;		_AdcConvert
 14878 ;;		_CheckFlashPrecentage
 14879 ;;		_exp
 14880 ;; This function uses a non-reentrant model
 14881 ;;
 14882                           
 14883                           	psect	text97
 14884  001C1C                     __ptext97:
 14885                           	opt stack 0
 14886  001C1C                     ___ftdiv:
 14887                           	opt stack 25
 14888                           
 14889                           ;incstack = 0
 14890  001C1C  C02B  F060         	movff	___ftdiv@f1+2,??___ftdiv
 14891  001C20  0100               	movlb	0	; () banked
 14892  001C22  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 14893  001C24  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 14894  001C26  342A               	rlcf	___ftdiv@f1+1,w,c
 14895  001C28  3760               	rlcf	??___ftdiv& (0+255),f,b
 14896  001C2A  E301               	bnc	u6761
 14897  001C2C  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 14898  001C2E                     u6761:
 14899  001C2E  5160               	movf	??___ftdiv& (0+255),w,b
 14900  001C30  6F67               	movwf	___ftdiv@exp& (0+255),b
 14901  001C32  5167               	movf	___ftdiv@exp& (0+255),w,b
 14902  001C34  A4D8               	btfss	status,2,c
 14903  001C36  D007               	goto	l1682
 14904                           
 14905                           ; BSR set to: 0
 14906  001C38  0E00               	movlw	0
 14907  001C3A  6E29               	movwf	?___ftdiv,c
 14908  001C3C  0E00               	movlw	0
 14909  001C3E  6E2A               	movwf	?___ftdiv+1,c
 14910  001C40  0E00               	movlw	0
 14911  001C42  6E2B               	movwf	?___ftdiv+2,c
 14912                           
 14913                           ; BSR set to: 0
 14914  001C44  0012               	return	
 14915  001C46                     l1682:
 14916                           
 14917                           ; BSR set to: 0
 14918                           
 14919                           ; BSR set to: 0
 14920  001C46  C02E  F060         	movff	___ftdiv@f2+2,??___ftdiv
 14921  001C4A  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 14922  001C4C  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 14923  001C4E  342D               	rlcf	___ftdiv@f2+1,w,c
 14924  001C50  3760               	rlcf	??___ftdiv& (0+255),f,b
 14925  001C52  E301               	bnc	u6781
 14926  001C54  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 14927  001C56                     u6781:
 14928  001C56  5160               	movf	??___ftdiv& (0+255),w,b
 14929  001C58  6F68               	movwf	___ftdiv@sign& (0+255),b
 14930  001C5A  5168               	movf	___ftdiv@sign& (0+255),w,b
 14931  001C5C  A4D8               	btfss	status,2,c
 14932  001C5E  D007               	goto	l1684
 14933                           
 14934                           ; BSR set to: 0
 14935  001C60  0E00               	movlw	0
 14936  001C62  6E29               	movwf	?___ftdiv,c
 14937  001C64  0E00               	movlw	0
 14938  001C66  6E2A               	movwf	?___ftdiv+1,c
 14939  001C68  0E00               	movlw	0
 14940  001C6A  6E2B               	movwf	?___ftdiv+2,c
 14941                           
 14942                           ; BSR set to: 0
 14943  001C6C  0012               	return	
 14944  001C6E                     l1684:
 14945                           
 14946                           ; BSR set to: 0
 14947                           
 14948                           ; BSR set to: 0
 14949  001C6E  0E00               	movlw	0
 14950  001C70  6F64               	movwf	___ftdiv@f3& (0+255),b
 14951  001C72  0E00               	movlw	0
 14952  001C74  6F65               	movwf	(___ftdiv@f3+1)& (0+255),b
 14953  001C76  0E00               	movlw	0
 14954  001C78  6F66               	movwf	(___ftdiv@f3+2)& (0+255),b
 14955                           
 14956                           ; BSR set to: 0
 14957  001C7A  5168               	movf	___ftdiv@sign& (0+255),w,b
 14958  001C7C  0F89               	addlw	137
 14959  001C7E  5F67               	subwf	___ftdiv@exp& (0+255),f,b
 14960                           
 14961                           ; BSR set to: 0
 14962  001C80  C02B  F068         	movff	___ftdiv@f1+2,___ftdiv@sign
 14963                           
 14964                           ; BSR set to: 0
 14965  001C84  502E               	movf	___ftdiv@f2+2,w,c
 14966  001C86  1B68               	xorwf	___ftdiv@sign& (0+255),f,b
 14967                           
 14968                           ; BSR set to: 0
 14969  001C88  0E80               	movlw	128
 14970  001C8A  1768               	andwf	___ftdiv@sign& (0+255),f,b
 14971                           
 14972                           ; BSR set to: 0
 14973  001C8C  8E2A               	bsf	___ftdiv@f1+1,7,c
 14974                           
 14975                           ; BSR set to: 0
 14976  001C8E  0EFF               	movlw	255
 14977  001C90  1629               	andwf	___ftdiv@f1,f,c
 14978  001C92  0EFF               	movlw	255
 14979  001C94  162A               	andwf	___ftdiv@f1+1,f,c
 14980  001C96  0E00               	movlw	0
 14981  001C98  162B               	andwf	___ftdiv@f1+2,f,c
 14982                           
 14983                           ; BSR set to: 0
 14984  001C9A  8E2D               	bsf	___ftdiv@f2+1,7,c
 14985                           
 14986                           ; BSR set to: 0
 14987  001C9C  0EFF               	movlw	255
 14988  001C9E  162C               	andwf	___ftdiv@f2,f,c
 14989  001CA0  0EFF               	movlw	255
 14990  001CA2  162D               	andwf	___ftdiv@f2+1,f,c
 14991  001CA4  0E00               	movlw	0
 14992  001CA6  162E               	andwf	___ftdiv@f2+2,f,c
 14993                           
 14994                           ; BSR set to: 0
 14995  001CA8  0E18               	movlw	24
 14996  001CAA  6F63               	movwf	___ftdiv@cntr& (0+255),b
 14997  001CAC                     
 14998                           ; BSR set to: 0
 14999                           
 15000                           ; BSR set to: 0
 15001  001CAC  90D8               	bcf	status,0,c
 15002  001CAE  3764               	rlcf	___ftdiv@f3& (0+255),f,b
 15003  001CB0  3765               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 15004  001CB2  3766               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 15005                           
 15006                           ; BSR set to: 0
 15007  001CB4  502C               	movf	___ftdiv@f2,w,c
 15008  001CB6  5C29               	subwf	___ftdiv@f1,w,c
 15009  001CB8  502D               	movf	___ftdiv@f2+1,w,c
 15010  001CBA  582A               	subwfb	___ftdiv@f1+1,w,c
 15011  001CBC  502E               	movf	___ftdiv@f2+2,w,c
 15012  001CBE  582B               	subwfb	___ftdiv@f1+2,w,c
 15013  001CC0  A0D8               	btfss	status,0,c
 15014  001CC2  D007               	goto	l1686
 15015                           
 15016                           ; BSR set to: 0
 15017  001CC4  502C               	movf	___ftdiv@f2,w,c
 15018  001CC6  5E29               	subwf	___ftdiv@f1,f,c
 15019  001CC8  502D               	movf	___ftdiv@f2+1,w,c
 15020  001CCA  5A2A               	subwfb	___ftdiv@f1+1,f,c
 15021  001CCC  502E               	movf	___ftdiv@f2+2,w,c
 15022  001CCE  5A2B               	subwfb	___ftdiv@f1+2,f,c
 15023                           
 15024                           ; BSR set to: 0
 15025  001CD0  8164               	bsf	___ftdiv@f3& (0+255),0,b
 15026  001CD2                     l1686:
 15027                           
 15028                           ; BSR set to: 0
 15029  001CD2  90D8               	bcf	status,0,c
 15030  001CD4  3629               	rlcf	___ftdiv@f1,f,c
 15031  001CD6  362A               	rlcf	___ftdiv@f1+1,f,c
 15032  001CD8  362B               	rlcf	___ftdiv@f1+2,f,c
 15033                           
 15034                           ; BSR set to: 0
 15035  001CDA  2F63               	decfsz	___ftdiv@cntr& (0+255),f,b
 15036  001CDC  D7E7               	goto	l1685
 15037                           
 15038                           ; BSR set to: 0
 15039                           
 15040                           ; BSR set to: 0
 15041  001CDE  C064  F018         	movff	___ftdiv@f3,___ftpack@arg
 15042  001CE2  C065  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
 15043  001CE6  C066  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
 15044  001CEA  C067  F01B         	movff	___ftdiv@exp,___ftpack@exp
 15045  001CEE  C068  F01C         	movff	___ftdiv@sign,___ftpack@sign
 15046  001CF2  ECE8  F010         	call	___ftpack	;wreg free
 15047  001CF6  C018  F029         	movff	?___ftpack,?___ftdiv
 15048  001CFA  C019  F02A         	movff	?___ftpack+1,?___ftdiv+1
 15049  001CFE  C01A  F02B         	movff	?___ftpack+2,?___ftdiv+2
 15050  001D02  0012               	return	
 15051  001D04                     __end_of___ftdiv:
 15052                           	opt stack 0
 15053                           tosu	equ	0xFFF
 15054                           tosh	equ	0xFFE
 15055                           tosl	equ	0xFFD
 15056                           pclath	equ	0xFFA
 15057                           tblptru	equ	0xFF8
 15058                           tblptrh	equ	0xFF7
 15059                           tblptrl	equ	0xFF6
 15060                           tablat	equ	0xFF5
 15061                           prodh	equ	0xFF4
 15062                           prodl	equ	0xFF3
 15063                           intcon	equ	0xFF2
 15064                           intcon2	equ	0xFF1
 15065                           postinc0	equ	0xFEE
 15066                           wreg	equ	0xFE8
 15067                           indf1	equ	0xFE7
 15068                           postdec1	equ	0xFE5
 15069                           fsr1h	equ	0xFE2
 15070                           fsr1l	equ	0xFE1
 15071                           indf2	equ	0xFDF
 15072                           postinc2	equ	0xFDE
 15073                           postdec2	equ	0xFDD
 15074                           fsr2h	equ	0xFDA
 15075                           fsr2l	equ	0xFD9
 15076                           status	equ	0xFD8
 15077                           
 15078 ;; *************** function ___awtoft *****************
 15079 ;; Defined at:
 15080 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 15081 ;; Parameters:    Size  Location     Type
 15082 ;;  c               2   31[COMRAM] int 
 15083 ;; Auto vars:     Size  Location     Type
 15084 ;;  sign            1   34[COMRAM] unsigned char 
 15085 ;; Return value:  Size  Location     Type
 15086 ;;                  3   31[COMRAM] float 
 15087 ;; Registers used:
 15088 ;;		wreg, status,2, status,0, cstack
 15089 ;; Tracked objects:
 15090 ;;		On entry : 0/0
 15091 ;;		On exit  : 0/0
 15092 ;;		Unchanged: 0/0
 15093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15094 ;;      Params:         3       0       0       0       0       0       0
 15095 ;;      Locals:         1       0       0       0       0       0       0
 15096 ;;      Temps:          0       0       0       0       0       0       0
 15097 ;;      Totals:         4       0       0       0       0       0       0
 15098 ;;Total ram usage:        4 bytes
 15099 ;; Hardware stack levels used:    1
 15100 ;; Hardware stack levels required when called:    4
 15101 ;; This function calls:
 15102 ;;		___ftpack
 15103 ;; This function is called by:
 15104 ;;		_exp
 15105 ;;		_log
 15106 ;; This function uses a non-reentrant model
 15107 ;;
 15108                           
 15109                           	psect	text98
 15110  00318A                     __ptext98:
 15111                           	opt stack 0
 15112  00318A                     ___awtoft:
 15113                           	opt stack 23
 15114                           
 15115                           ;incstack = 0
 15116  00318A  0E00               	movlw	0
 15117  00318C  6E23               	movwf	___awtoft@sign,c
 15118  00318E  AE21               	btfss	___awtoft@c+1,7,c
 15119  003190  D006               	goto	l1599
 15120  003192  6C20               	negf	___awtoft@c,c
 15121  003194  1E21               	comf	___awtoft@c+1,f,c
 15122  003196  B0D8               	btfsc	status,0,c
 15123  003198  2A21               	incf	___awtoft@c+1,f,c
 15124  00319A  0E01               	movlw	1
 15125  00319C  6E23               	movwf	___awtoft@sign,c
 15126  00319E                     l1599:
 15127  00319E  C020  F018         	movff	___awtoft@c,___ftpack@arg
 15128  0031A2  C021  F019         	movff	___awtoft@c+1,___ftpack@arg+1
 15129  0031A6  6A1A               	clrf	___ftpack@arg+2,c
 15130  0031A8  0E8E               	movlw	142
 15131  0031AA  6E1B               	movwf	___ftpack@exp,c
 15132  0031AC  C023  F01C         	movff	___awtoft@sign,___ftpack@sign
 15133  0031B0  ECE8  F010         	call	___ftpack	;wreg free
 15134  0031B4  C018  F020         	movff	?___ftpack,?___awtoft
 15135  0031B8  C019  F021         	movff	?___ftpack+1,?___awtoft+1
 15136  0031BC  C01A  F022         	movff	?___ftpack+2,?___awtoft+2
 15137  0031C0  0012               	return	
 15138  0031C2                     __end_of___awtoft:
 15139                           	opt stack 0
 15140                           tosu	equ	0xFFF
 15141                           tosh	equ	0xFFE
 15142                           tosl	equ	0xFFD
 15143                           pclath	equ	0xFFA
 15144                           tblptru	equ	0xFF8
 15145                           tblptrh	equ	0xFF7
 15146                           tblptrl	equ	0xFF6
 15147                           tablat	equ	0xFF5
 15148                           prodh	equ	0xFF4
 15149                           prodl	equ	0xFF3
 15150                           intcon	equ	0xFF2
 15151                           intcon2	equ	0xFF1
 15152                           postinc0	equ	0xFEE
 15153                           wreg	equ	0xFE8
 15154                           indf1	equ	0xFE7
 15155                           postdec1	equ	0xFE5
 15156                           fsr1h	equ	0xFE2
 15157                           fsr1l	equ	0xFE1
 15158                           indf2	equ	0xFDF
 15159                           postinc2	equ	0xFDE
 15160                           postdec2	equ	0xFDD
 15161                           fsr2h	equ	0xFDA
 15162                           fsr2l	equ	0xFD9
 15163                           status	equ	0xFD8
 15164                           
 15165 ;; *************** function ___lltoft *****************
 15166 ;; Defined at:
 15167 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
 15168 ;; Parameters:    Size  Location     Type
 15169 ;;  c               4   31[COMRAM] unsigned long 
 15170 ;; Auto vars:     Size  Location     Type
 15171 ;;  exp             1   39[COMRAM] unsigned char 
 15172 ;; Return value:  Size  Location     Type
 15173 ;;                  3   31[COMRAM] float 
 15174 ;; Registers used:
 15175 ;;		wreg, status,2, status,0, cstack
 15176 ;; Tracked objects:
 15177 ;;		On entry : 0/0
 15178 ;;		On exit  : 0/0
 15179 ;;		Unchanged: 0/0
 15180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15181 ;;      Params:         4       0       0       0       0       0       0
 15182 ;;      Locals:         1       0       0       0       0       0       0
 15183 ;;      Temps:          4       0       0       0       0       0       0
 15184 ;;      Totals:         9       0       0       0       0       0       0
 15185 ;;Total ram usage:        9 bytes
 15186 ;; Hardware stack levels used:    1
 15187 ;; Hardware stack levels required when called:    4
 15188 ;; This function calls:
 15189 ;;		___ftpack
 15190 ;; This function is called by:
 15191 ;;		_CheckFlashPrecentage
 15192 ;;		_pow
 15193 ;; This function uses a non-reentrant model
 15194 ;;
 15195                           
 15196                           	psect	text99
 15197  002AF4                     __ptext99:
 15198                           	opt stack 0
 15199  002AF4                     ___lltoft:
 15200                           	opt stack 25
 15201                           
 15202                           ;incstack = 0
 15203  002AF4  0E8E               	movlw	142
 15204  002AF6  6E28               	movwf	___lltoft@exp,c
 15205  002AF8  D006               	goto	l1775
 15206  002AFA  90D8               	bcf	status,0,c
 15207  002AFC  3223               	rrcf	___lltoft@c+3,f,c
 15208  002AFE  3222               	rrcf	___lltoft@c+2,f,c
 15209  002B00  3221               	rrcf	___lltoft@c+1,f,c
 15210  002B02  3220               	rrcf	___lltoft@c,f,c
 15211  002B04  2A28               	incf	___lltoft@exp,f,c
 15212  002B06                     l1775:
 15213  002B06  0E00               	movlw	0
 15214  002B08  1420               	andwf	___lltoft@c,w,c
 15215  002B0A  6E24               	movwf	??___lltoft& (0+255),c
 15216  002B0C  0E00               	movlw	0
 15217  002B0E  1421               	andwf	___lltoft@c+1,w,c
 15218  002B10  6E25               	movwf	(??___lltoft+1)& (0+255),c
 15219  002B12  0E00               	movlw	0
 15220  002B14  1422               	andwf	___lltoft@c+2,w,c
 15221  002B16  6E26               	movwf	(??___lltoft+2)& (0+255),c
 15222  002B18  0EFF               	movlw	255
 15223  002B1A  1423               	andwf	___lltoft@c+3,w,c
 15224  002B1C  6E27               	movwf	(??___lltoft+3)& (0+255),c
 15225  002B1E  5024               	movf	??___lltoft,w,c
 15226  002B20  1025               	iorwf	??___lltoft+1,w,c
 15227  002B22  1026               	iorwf	??___lltoft+2,w,c
 15228  002B24  1027               	iorwf	??___lltoft+3,w,c
 15229  002B26  A4D8               	btfss	status,2,c
 15230  002B28  D7E8               	goto	l1776
 15231  002B2A  C020  F018         	movff	___lltoft@c,___ftpack@arg
 15232  002B2E  C021  F019         	movff	___lltoft@c+1,___ftpack@arg+1
 15233  002B32  C022  F01A         	movff	___lltoft@c+2,___ftpack@arg+2
 15234  002B36  C028  F01B         	movff	___lltoft@exp,___ftpack@exp
 15235  002B3A  0E00               	movlw	0
 15236  002B3C  6E1C               	movwf	___ftpack@sign,c
 15237  002B3E  ECE8  F010         	call	___ftpack	;wreg free
 15238  002B42  C018  F020         	movff	?___ftpack,?___lltoft
 15239  002B46  C019  F021         	movff	?___ftpack+1,?___lltoft+1
 15240  002B4A  C01A  F022         	movff	?___ftpack+2,?___lltoft+2
 15241  002B4E  0012               	return	
 15242  002B50                     __end_of___lltoft:
 15243                           	opt stack 0
 15244                           tosu	equ	0xFFF
 15245                           tosh	equ	0xFFE
 15246                           tosl	equ	0xFFD
 15247                           pclath	equ	0xFFA
 15248                           tblptru	equ	0xFF8
 15249                           tblptrh	equ	0xFF7
 15250                           tblptrl	equ	0xFF6
 15251                           tablat	equ	0xFF5
 15252                           prodh	equ	0xFF4
 15253                           prodl	equ	0xFF3
 15254                           intcon	equ	0xFF2
 15255                           intcon2	equ	0xFF1
 15256                           postinc0	equ	0xFEE
 15257                           wreg	equ	0xFE8
 15258                           indf1	equ	0xFE7
 15259                           postdec1	equ	0xFE5
 15260                           fsr1h	equ	0xFE2
 15261                           fsr1l	equ	0xFE1
 15262                           indf2	equ	0xFDF
 15263                           postinc2	equ	0xFDE
 15264                           postdec2	equ	0xFDD
 15265                           fsr2h	equ	0xFDA
 15266                           fsr2l	equ	0xFD9
 15267                           status	equ	0xFD8
 15268                           
 15269 ;; *************** function ___lwtoft *****************
 15270 ;; Defined at:
 15271 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 15272 ;; Parameters:    Size  Location     Type
 15273 ;;  c               2   31[COMRAM] unsigned int 
 15274 ;; Auto vars:     Size  Location     Type
 15275 ;;		None
 15276 ;; Return value:  Size  Location     Type
 15277 ;;                  3   31[COMRAM] float 
 15278 ;; Registers used:
 15279 ;;		wreg, status,2, status,0, cstack
 15280 ;; Tracked objects:
 15281 ;;		On entry : 0/0
 15282 ;;		On exit  : 0/0
 15283 ;;		Unchanged: 0/0
 15284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15285 ;;      Params:         3       0       0       0       0       0       0
 15286 ;;      Locals:         0       0       0       0       0       0       0
 15287 ;;      Temps:          0       0       0       0       0       0       0
 15288 ;;      Totals:         3       0       0       0       0       0       0
 15289 ;;Total ram usage:        3 bytes
 15290 ;; Hardware stack levels used:    1
 15291 ;; Hardware stack levels required when called:    4
 15292 ;; This function calls:
 15293 ;;		___ftpack
 15294 ;; This function is called by:
 15295 ;;		_AdcConvert
 15296 ;; This function uses a non-reentrant model
 15297 ;;
 15298                           
 15299                           	psect	text100
 15300  003538                     __ptext100:
 15301                           	opt stack 0
 15302  003538                     ___lwtoft:
 15303                           	opt stack 25
 15304                           
 15305                           ;incstack = 0
 15306  003538  C020  F018         	movff	___lwtoft@c,___ftpack@arg
 15307  00353C  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
 15308  003540  6A1A               	clrf	___ftpack@arg+2,c
 15309  003542  0E8E               	movlw	142
 15310  003544  6E1B               	movwf	___ftpack@exp,c
 15311  003546  0E00               	movlw	0
 15312  003548  6E1C               	movwf	___ftpack@sign,c
 15313  00354A  ECE8  F010         	call	___ftpack	;wreg free
 15314  00354E  C018  F020         	movff	?___ftpack,?___lwtoft
 15315  003552  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
 15316  003556  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
 15317  00355A  0012               	return	
 15318  00355C                     __end_of___lwtoft:
 15319                           	opt stack 0
 15320                           tosu	equ	0xFFF
 15321                           tosh	equ	0xFFE
 15322                           tosl	equ	0xFFD
 15323                           pclath	equ	0xFFA
 15324                           tblptru	equ	0xFF8
 15325                           tblptrh	equ	0xFF7
 15326                           tblptrl	equ	0xFF6
 15327                           tablat	equ	0xFF5
 15328                           prodh	equ	0xFF4
 15329                           prodl	equ	0xFF3
 15330                           intcon	equ	0xFF2
 15331                           intcon2	equ	0xFF1
 15332                           postinc0	equ	0xFEE
 15333                           wreg	equ	0xFE8
 15334                           indf1	equ	0xFE7
 15335                           postdec1	equ	0xFE5
 15336                           fsr1h	equ	0xFE2
 15337                           fsr1l	equ	0xFE1
 15338                           indf2	equ	0xFDF
 15339                           postinc2	equ	0xFDE
 15340                           postdec2	equ	0xFDD
 15341                           fsr2h	equ	0xFDA
 15342                           fsr2l	equ	0xFD9
 15343                           status	equ	0xFD8
 15344                           
 15345 ;; *************** function ___ftpack *****************
 15346 ;; Defined at:
 15347 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 15348 ;; Parameters:    Size  Location     Type
 15349 ;;  arg             3   23[COMRAM] unsigned um
 15350 ;;  exp             1   26[COMRAM] unsigned char 
 15351 ;;  sign            1   27[COMRAM] unsigned char 
 15352 ;; Auto vars:     Size  Location     Type
 15353 ;;		None
 15354 ;; Return value:  Size  Location     Type
 15355 ;;                  3   23[COMRAM] float 
 15356 ;; Registers used:
 15357 ;;		wreg, status,2, status,0
 15358 ;; Tracked objects:
 15359 ;;		On entry : 0/0
 15360 ;;		On exit  : 0/0
 15361 ;;		Unchanged: 0/0
 15362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15363 ;;      Params:         5       0       0       0       0       0       0
 15364 ;;      Locals:         0       0       0       0       0       0       0
 15365 ;;      Temps:          3       0       0       0       0       0       0
 15366 ;;      Totals:         8       0       0       0       0       0       0
 15367 ;;Total ram usage:        8 bytes
 15368 ;; Hardware stack levels used:    1
 15369 ;; Hardware stack levels required when called:    3
 15370 ;; This function calls:
 15371 ;;		Nothing
 15372 ;; This function is called by:
 15373 ;;		___altoft
 15374 ;;		___awtoft
 15375 ;;		___ftadd
 15376 ;;		___ftdiv
 15377 ;;		___ftmul
 15378 ;;		___lltoft
 15379 ;;		___lwtoft
 15380 ;; This function uses a non-reentrant model
 15381 ;;
 15382                           
 15383                           	psect	text101
 15384  0021D0                     __ptext101:
 15385                           	opt stack 0
 15386  0021D0                     ___ftpack:
 15387                           	opt stack 25
 15388                           
 15389                           ;incstack = 0
 15390  0021D0  501B               	movf	___ftpack@exp,w,c
 15391  0021D2  B4D8               	btfsc	status,2,c
 15392  0021D4  D005               	goto	u5890
 15393  0021D6  5018               	movf	___ftpack@arg,w,c
 15394  0021D8  1019               	iorwf	___ftpack@arg+1,w,c
 15395  0021DA  101A               	iorwf	___ftpack@arg+2,w,c
 15396  0021DC  A4D8               	btfss	status,2,c
 15397  0021DE  D00C               	goto	l1618
 15398  0021E0                     u5890:
 15399  0021E0  0E00               	movlw	0
 15400  0021E2  6E18               	movwf	?___ftpack,c
 15401  0021E4  0E00               	movlw	0
 15402  0021E6  6E19               	movwf	?___ftpack+1,c
 15403  0021E8  0E00               	movlw	0
 15404  0021EA  6E1A               	movwf	?___ftpack+2,c
 15405  0021EC  0012               	return	
 15406  0021EE  2A1B               	incf	___ftpack@exp,f,c
 15407  0021F0  90D8               	bcf	status,0,c
 15408  0021F2  321A               	rrcf	___ftpack@arg+2,f,c
 15409  0021F4  3219               	rrcf	___ftpack@arg+1,f,c
 15410  0021F6  3218               	rrcf	___ftpack@arg,f,c
 15411  0021F8                     l1618:
 15412  0021F8  0E00               	movlw	0
 15413  0021FA  1418               	andwf	___ftpack@arg,w,c
 15414  0021FC  6E1D               	movwf	??___ftpack& (0+255),c
 15415  0021FE  0E00               	movlw	0
 15416  002200  1419               	andwf	___ftpack@arg+1,w,c
 15417  002202  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 15418  002204  0EFE               	movlw	254
 15419  002206  141A               	andwf	___ftpack@arg+2,w,c
 15420  002208  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 15421  00220A  501D               	movf	??___ftpack,w,c
 15422  00220C  101E               	iorwf	??___ftpack+1,w,c
 15423  00220E  101F               	iorwf	??___ftpack+2,w,c
 15424  002210  B4D8               	btfsc	status,2,c
 15425  002212  D00C               	goto	l1621
 15426  002214  D7EC               	goto	l1619
 15427  002216  2A1B               	incf	___ftpack@exp,f,c
 15428  002218  0E01               	movlw	1
 15429  00221A  2618               	addwf	___ftpack@arg,f,c
 15430  00221C  0E00               	movlw	0
 15431  00221E  2219               	addwfc	___ftpack@arg+1,f,c
 15432  002220  0E00               	movlw	0
 15433  002222  221A               	addwfc	___ftpack@arg+2,f,c
 15434  002224  90D8               	bcf	status,0,c
 15435  002226  321A               	rrcf	___ftpack@arg+2,f,c
 15436  002228  3219               	rrcf	___ftpack@arg+1,f,c
 15437  00222A  3218               	rrcf	___ftpack@arg,f,c
 15438  00222C                     l1621:
 15439  00222C  0E00               	movlw	0
 15440  00222E  1418               	andwf	___ftpack@arg,w,c
 15441  002230  6E1D               	movwf	??___ftpack& (0+255),c
 15442  002232  0E00               	movlw	0
 15443  002234  1419               	andwf	___ftpack@arg+1,w,c
 15444  002236  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 15445  002238  0EFF               	movlw	255
 15446  00223A  141A               	andwf	___ftpack@arg+2,w,c
 15447  00223C  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 15448  00223E  501D               	movf	??___ftpack,w,c
 15449  002240  101E               	iorwf	??___ftpack+1,w,c
 15450  002242  101F               	iorwf	??___ftpack+2,w,c
 15451  002244  B4D8               	btfsc	status,2,c
 15452  002246  D006               	goto	l1624
 15453  002248  D7E6               	goto	l1622
 15454  00224A  061B               	decf	___ftpack@exp,f,c
 15455  00224C  90D8               	bcf	status,0,c
 15456  00224E  3618               	rlcf	___ftpack@arg,f,c
 15457  002250  3619               	rlcf	___ftpack@arg+1,f,c
 15458  002252  361A               	rlcf	___ftpack@arg+2,f,c
 15459  002254                     l1624:
 15460  002254  BE19               	btfsc	___ftpack@arg+1,7,c
 15461  002256  D003               	goto	u5930
 15462  002258  0E02               	movlw	2
 15463  00225A  601B               	cpfslt	___ftpack@exp,c
 15464  00225C  D7F6               	goto	l1625
 15465  00225E                     u5930:
 15466  00225E  A01B               	btfss	___ftpack@exp,0,c
 15467  002260  9E19               	bcf	___ftpack@arg+1,7,c
 15468  002262  90D8               	bcf	status,0,c
 15469  002264  321B               	rrcf	___ftpack@exp,f,c
 15470  002266  501B               	movf	___ftpack@exp,w,c
 15471  002268  121A               	iorwf	___ftpack@arg+2,f,c
 15472  00226A  501C               	movf	___ftpack@sign,w,c
 15473  00226C  A4D8               	btfss	status,2,c
 15474  00226E  8E1A               	bsf	___ftpack@arg+2,7,c
 15475  002270  C018  F018         	movff	___ftpack@arg,?___ftpack
 15476  002274  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
 15477  002278  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
 15478  00227C  0012               	return	
 15479  00227E                     __end_of___ftpack:
 15480                           	opt stack 0
 15481                           tosu	equ	0xFFF
 15482                           tosh	equ	0xFFE
 15483                           tosl	equ	0xFFD
 15484                           pclath	equ	0xFFA
 15485                           tblptru	equ	0xFF8
 15486                           tblptrh	equ	0xFF7
 15487                           tblptrl	equ	0xFF6
 15488                           tablat	equ	0xFF5
 15489                           prodh	equ	0xFF4
 15490                           prodl	equ	0xFF3
 15491                           intcon	equ	0xFF2
 15492                           intcon2	equ	0xFF1
 15493                           postinc0	equ	0xFEE
 15494                           wreg	equ	0xFE8
 15495                           indf1	equ	0xFE7
 15496                           postdec1	equ	0xFE5
 15497                           fsr1h	equ	0xFE2
 15498                           fsr1l	equ	0xFE1
 15499                           indf2	equ	0xFDF
 15500                           postinc2	equ	0xFDE
 15501                           postdec2	equ	0xFDD
 15502                           fsr2h	equ	0xFDA
 15503                           fsr2l	equ	0xFD9
 15504                           status	equ	0xFD8
 15505                           
 15506 ;; *************** function _FlashSampleWrite *****************
 15507 ;; Defined at:
 15508 ;;		line 29 in file "FlashApp.c"
 15509 ;; Parameters:    Size  Location     Type
 15510 ;;  sampleData      2   44[COMRAM] unsigned int 
 15511 ;;  channelNum      1   46[COMRAM] unsigned char 
 15512 ;; Auto vars:     Size  Location     Type
 15513 ;;  rotateLeft      2    2[BANK0 ] unsigned int 
 15514 ;; Return value:  Size  Location     Type
 15515 ;;                  1    wreg      void 
 15516 ;; Registers used:
 15517 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15518 ;; Tracked objects:
 15519 ;;		On entry : 0/0
 15520 ;;		On exit  : 0/0
 15521 ;;		Unchanged: 0/0
 15522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15523 ;;      Params:         3       0       0       0       0       0       0
 15524 ;;      Locals:         0       2       0       0       0       0       0
 15525 ;;      Temps:          0       2       0       0       0       0       0
 15526 ;;      Totals:         3       4       0       0       0       0       0
 15527 ;;Total ram usage:        7 bytes
 15528 ;; Hardware stack levels used:    1
 15529 ;; Hardware stack levels required when called:    5
 15530 ;; This function calls:
 15531 ;;		_FLASH_IsWriteDone
 15532 ;;		_FLASH_WriteBlock
 15533 ;; This function is called by:
 15534 ;;		_AdcConvert
 15535 ;; This function uses a non-reentrant model
 15536 ;;
 15537                           
 15538                           	psect	text102
 15539  001934                     __ptext102:
 15540                           	opt stack 0
 15541  001934                     _FlashSampleWrite:
 15542                           	opt stack 24
 15543                           
 15544                           ;FlashApp.c: 32: uint16_t rotateLeft = (channelNum << 12);
 15545                           
 15546                           ;incstack = 0
 15547  001934  502F               	movf	FlashSampleWrite@channelNum,w,c
 15548  001936  0100               	movlb	0	; () banked
 15549  001938  6F60               	movwf	??_FlashSampleWrite& (0+255),b
 15550  00193A  6B61               	clrf	(??_FlashSampleWrite+1)& (0+255),b
 15551  00193C  0E0C               	movlw	12
 15552  00193E                     u7525:
 15553  00193E  90D8               	bcf	status,0,c
 15554  001940  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 15555  001942  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 15556  001944  2EE8               	decfsz	wreg,f,c
 15557  001946  D7FB               	goto	u7525
 15558  001948  C060  F062         	movff	??_FlashSampleWrite,FlashSampleWrite@rotateLeft
 15559  00194C  C061  F063         	movff	??_FlashSampleWrite+1,FlashSampleWrite@rotateLeft+1
 15560                           
 15561                           ;FlashApp.c: 33: sampleData |= rotateLeft;
 15562  001950  5162               	movf	FlashSampleWrite@rotateLeft& (0+255),w,b
 15563  001952  122D               	iorwf	FlashSampleWrite@sampleData,f,c
 15564  001954  5163               	movf	(FlashSampleWrite@rotateLeft+1)& (0+255),w,b
 15565  001956  122E               	iorwf	FlashSampleWrite@sampleData+1,f,c
 15566                           
 15567                           ; BSR set to: 0
 15568                           ;FlashApp.c: 34: sampleArray[sampleCount] = sampleData;
 15569  001958  90D8               	bcf	status,0,c
 15570  00195A  35C6               	rlcf	_sampleCount& (0+255),w,b
 15571  00195C  6ED9               	movwf	fsr2l,c
 15572  00195E  35C7               	rlcf	(_sampleCount+1)& (0+255),w,b
 15573  001960  6EDA               	movwf	fsr2h,c
 15574  001962  0E6E               	movlw	low _sampleArray
 15575  001964  26D9               	addwf	fsr2l,f,c
 15576  001966  0E01               	movlw	high _sampleArray
 15577  001968  22DA               	addwfc	fsr2h,f,c
 15578  00196A  C02D  FFDE         	movff	FlashSampleWrite@sampleData,postinc2
 15579  00196E  C02E  FFDD         	movff	FlashSampleWrite@sampleData+1,postdec2
 15580                           
 15581                           ; BSR set to: 0
 15582                           ;FlashApp.c: 35: sampleCount ++;
 15583  001972  4BC6               	infsnz	_sampleCount& (0+255),f,b
 15584  001974  2BC7               	incf	(_sampleCount+1)& (0+255),f,b
 15585                           
 15586                           ; BSR set to: 0
 15587                           ;FlashApp.c: 37: if(((sampleCount*sizeof(adc_result_t)) >= (64)) && FLASH_IsWriteDone())
 15588  001976  C0C6  F060         	movff	_sampleCount,??_FlashSampleWrite
 15589  00197A  C0C7  F061         	movff	_sampleCount+1,??_FlashSampleWrite+1
 15590  00197E  90D8               	bcf	status,0,c
 15591  001980  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 15592  001982  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 15593  001984  5161               	movf	(??_FlashSampleWrite+1)& (0+255),w,b
 15594  001986  E104               	bnz	u7530
 15595  001988  0E40               	movlw	64
 15596  00198A  5D60               	subwf	??_FlashSampleWrite& (0+255),w,b
 15597  00198C  A0D8               	btfss	status,0,c
 15598  00198E  0012               	return	
 15599  001990                     u7530:
 15600                           
 15601                           ; BSR set to: 0
 15602  001990  EC75  F01B         	call	_FLASH_IsWriteDone	;wreg free
 15603  001994  0900               	iorlw	0
 15604  001996  B4D8               	btfsc	status,2,c
 15605  001998  0012               	return	
 15606                           
 15607                           ;FlashApp.c: 38: {
 15608                           ;FlashApp.c: 39: FLASH_WriteBlock(writeAddress, (uint8_t *)sampleArray);
 15609  00199A  C042  F01D         	movff	_writeAddress,FLASH_WriteBlock@writeAddr
 15610  00199E  C043  F01E         	movff	_writeAddress+1,FLASH_WriteBlock@writeAddr+1
 15611  0019A2  C044  F01F         	movff	_writeAddress+2,FLASH_WriteBlock@writeAddr+2
 15612  0019A6  C045  F020         	movff	_writeAddress+3,FLASH_WriteBlock@writeAddr+3
 15613  0019AA  0E6E               	movlw	low _sampleArray
 15614  0019AC  6E21               	movwf	FLASH_WriteBlock@flashWrBufPtr,c
 15615  0019AE  0E01               	movlw	high _sampleArray
 15616  0019B0  6E22               	movwf	FLASH_WriteBlock@flashWrBufPtr+1,c
 15617  0019B2  EC33  F010         	call	_FLASH_WriteBlock	;wreg free
 15618                           
 15619                           ;FlashApp.c: 40: writeAddress += (64);
 15620  0019B6  0E40               	movlw	64
 15621  0019B8  2642               	addwf	_writeAddress,f,c
 15622  0019BA  0E00               	movlw	0
 15623  0019BC  2243               	addwfc	_writeAddress+1,f,c
 15624  0019BE  2244               	addwfc	_writeAddress+2,f,c
 15625  0019C0  2245               	addwfc	_writeAddress+3,f,c
 15626                           
 15627                           ;FlashApp.c: 41: if (writeAddress >= 0x7FF0)
 15628  0019C2  5045               	movf	_writeAddress+3,w,c
 15629  0019C4  1044               	iorwf	_writeAddress+2,w,c
 15630  0019C6  E106               	bnz	u7550
 15631  0019C8  0EF0               	movlw	240
 15632  0019CA  5C42               	subwf	_writeAddress,w,c
 15633  0019CC  0E7F               	movlw	127
 15634  0019CE  5843               	subwfb	_writeAddress+1,w,c
 15635  0019D0  A0D8               	btfss	status,0,c
 15636  0019D2  D018               	goto	l275
 15637  0019D4                     u7550:
 15638                           
 15639                           ;FlashApp.c: 42: {
 15640                           ;FlashApp.c: 43: writeAddress = 0x4000;
 15641  0019D4  0E00               	movlw	0
 15642  0019D6  6E42               	movwf	_writeAddress,c
 15643  0019D8  0E40               	movlw	64
 15644  0019DA  6E43               	movwf	_writeAddress+1,c
 15645  0019DC  0E00               	movlw	0
 15646  0019DE  6E44               	movwf	_writeAddress+2,c
 15647  0019E0  0E00               	movlw	0
 15648  0019E2  6E45               	movwf	_writeAddress+3,c
 15649                           
 15650                           ;FlashApp.c: 44: isReWriteDone = 1;
 15651  0019E4  0E01               	movlw	1
 15652  0019E6  6E3B               	movwf	_isReWriteDone,c
 15653                           
 15654                           ;FlashApp.c: 45: if (readAddress == 0x4000)
 15655  0019E8  0E40               	movlw	64
 15656  0019EA  0100               	movlb	0	; () banked
 15657  0019EC  19F8               	xorwf	(_readAddress+1)& (0+255),w,b
 15658  0019EE  11F7               	iorwf	_readAddress& (0+255),w,b
 15659  0019F0  11F9               	iorwf	(_readAddress+2)& (0+255),w,b
 15660  0019F2  11FA               	iorwf	(_readAddress+3)& (0+255),w,b
 15661  0019F4  A4D8               	btfss	status,2,c
 15662  0019F6  D006               	goto	l275
 15663                           
 15664                           ; BSR set to: 0
 15665                           ;FlashApp.c: 46: {
 15666                           ;FlashApp.c: 47: readAddress += (64);
 15667  0019F8  0E40               	movlw	64
 15668  0019FA  27F7               	addwf	_readAddress& (0+255),f,b
 15669  0019FC  0E00               	movlw	0
 15670  0019FE  23F8               	addwfc	(_readAddress+1)& (0+255),f,b
 15671  001A00  23F9               	addwfc	(_readAddress+2)& (0+255),f,b
 15672  001A02  23FA               	addwfc	(_readAddress+3)& (0+255),f,b
 15673  001A04                     l275:
 15674                           
 15675                           ;FlashApp.c: 48: }
 15676                           ;FlashApp.c: 49: }
 15677                           ;FlashApp.c: 51: if (numOfValidateSamples < ((0x4000-0x7FF0)/(64)))
 15678                           
 15679                           ; BSR set to: 0
 15680  001A04  0431               	decf	_numOfValidateSamples,w,c
 15681  001A06  0EFF               	movlw	255
 15682  001A08  5832               	subwfb	_numOfValidateSamples+1,w,c
 15683  001A0A  0EFF               	movlw	255
 15684  001A0C  5833               	subwfb	_numOfValidateSamples+2,w,c
 15685  001A0E  0EFF               	movlw	255
 15686  001A10  5834               	subwfb	_numOfValidateSamples+3,w,c
 15687  001A12  B0D8               	btfsc	status,0,c
 15688  001A14  D006               	goto	l276
 15689                           
 15690                           ;FlashApp.c: 52: {
 15691                           ;FlashApp.c: 53: numOfValidateSamples++;
 15692  001A16  0E01               	movlw	1
 15693  001A18  2631               	addwf	_numOfValidateSamples,f,c
 15694  001A1A  0E00               	movlw	0
 15695  001A1C  2232               	addwfc	_numOfValidateSamples+1,f,c
 15696  001A1E  2233               	addwfc	_numOfValidateSamples+2,f,c
 15697  001A20  2234               	addwfc	_numOfValidateSamples+3,f,c
 15698  001A22                     l276:
 15699                           
 15700                           ;FlashApp.c: 54: }
 15701                           ;FlashApp.c: 55: sampleCount = 0;
 15702  001A22  0E00               	movlw	0
 15703  001A24  0100               	movlb	0	; () banked
 15704  001A26  6FC7               	movwf	(_sampleCount+1)& (0+255),b
 15705  001A28  0E00               	movlw	0
 15706  001A2A  6FC6               	movwf	_sampleCount& (0+255),b
 15707  001A2C  0012               	return	
 15708  001A2E                     __end_of_FlashSampleWrite:
 15709                           	opt stack 0
 15710                           tosu	equ	0xFFF
 15711                           tosh	equ	0xFFE
 15712                           tosl	equ	0xFFD
 15713                           pclath	equ	0xFFA
 15714                           tblptru	equ	0xFF8
 15715                           tblptrh	equ	0xFF7
 15716                           tblptrl	equ	0xFF6
 15717                           tablat	equ	0xFF5
 15718                           prodh	equ	0xFF4
 15719                           prodl	equ	0xFF3
 15720                           intcon	equ	0xFF2
 15721                           intcon2	equ	0xFF1
 15722                           postinc0	equ	0xFEE
 15723                           wreg	equ	0xFE8
 15724                           indf1	equ	0xFE7
 15725                           postdec1	equ	0xFE5
 15726                           fsr1h	equ	0xFE2
 15727                           fsr1l	equ	0xFE1
 15728                           indf2	equ	0xFDF
 15729                           postinc2	equ	0xFDE
 15730                           postdec2	equ	0xFDD
 15731                           fsr2h	equ	0xFDA
 15732                           fsr2l	equ	0xFD9
 15733                           status	equ	0xFD8
 15734                           
 15735 ;; *************** function _FLASH_WriteBlock *****************
 15736 ;; Defined at:
 15737 ;;		line 93 in file "mcc_generated_files/memory.c"
 15738 ;; Parameters:    Size  Location     Type
 15739 ;;  writeAddr       4   28[COMRAM] unsigned long 
 15740 ;;  flashWrBufPt    2   32[COMRAM] PTR unsigned char 
 15741 ;;		 -> FlashTest@buff(128), sampleArray(64), 
 15742 ;; Auto vars:     Size  Location     Type
 15743 ;;  blockStartAd    4   38[COMRAM] unsigned long 
 15744 ;;  i               1   43[COMRAM] unsigned char 
 15745 ;;  GIEBitValue     1   42[COMRAM] unsigned char 
 15746 ;; Return value:  Size  Location     Type
 15747 ;;                  1    wreg      char 
 15748 ;; Registers used:
 15749 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15750 ;; Tracked objects:
 15751 ;;		On entry : 0/0
 15752 ;;		On exit  : 0/0
 15753 ;;		Unchanged: 0/0
 15754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15755 ;;      Params:         6       0       0       0       0       0       0
 15756 ;;      Locals:         6       0       0       0       0       0       0
 15757 ;;      Temps:          4       0       0       0       0       0       0
 15758 ;;      Totals:        16       0       0       0       0       0       0
 15759 ;;Total ram usage:       16 bytes
 15760 ;; Hardware stack levels used:    1
 15761 ;; Hardware stack levels required when called:    4
 15762 ;; This function calls:
 15763 ;;		_FLASH_EraseBlock
 15764 ;; This function is called by:
 15765 ;;		_FlashSampleWrite
 15766 ;;		_FlashTest
 15767 ;;		_FLASH_WriteByte
 15768 ;; This function uses a non-reentrant model
 15769 ;;
 15770                           
 15771                           	psect	text103
 15772  002066                     __ptext103:
 15773                           	opt stack 0
 15774  002066                     _FLASH_WriteBlock:
 15775                           	opt stack 24
 15776                           
 15777                           ;memory.c: 95: uint32_t blockStartAddr = (uint32_t )(writeAddr & ((0x8000-1) ^ ((64)-1))
      +                          );
 15778                           
 15779                           ;incstack = 0
 15780  002066  0EC0               	movlw	192
 15781  002068  6E23               	movwf	??_FLASH_WriteBlock& (0+255),c
 15782  00206A  0E7F               	movlw	127
 15783  00206C  6E24               	movwf	(??_FLASH_WriteBlock+1)& (0+255),c
 15784  00206E  C01D  F025         	movff	FLASH_WriteBlock@writeAddr,??_FLASH_WriteBlock+2
 15785  002072  C01E  F026         	movff	FLASH_WriteBlock@writeAddr+1,??_FLASH_WriteBlock+3
 15786  002076  5023               	movf	??_FLASH_WriteBlock,w,c
 15787  002078  1625               	andwf	??_FLASH_WriteBlock+2,f,c
 15788  00207A  5024               	movf	??_FLASH_WriteBlock+1,w,c
 15789  00207C  1626               	andwf	??_FLASH_WriteBlock+3,f,c
 15790  00207E  C025  F027         	movff	??_FLASH_WriteBlock+2,FLASH_WriteBlock@blockStartAddr
 15791  002082  C026  F028         	movff	??_FLASH_WriteBlock+3,FLASH_WriteBlock@blockStartAddr+1
 15792  002086  6A29               	clrf	FLASH_WriteBlock@blockStartAddr+2,c
 15793  002088  6A2A               	clrf	FLASH_WriteBlock@blockStartAddr+3,c
 15794                           
 15795                           ;memory.c: 96: uint8_t GIEBitValue = INTCONbits.GIE;
 15796  00208A  0E00               	movlw	0
 15797  00208C  BEF2               	btfsc	intcon,7,c	;volatile
 15798  00208E  0E01               	movlw	1
 15799  002090  6E2B               	movwf	FLASH_WriteBlock@GIEBitValue,c
 15800                           
 15801                           ;memory.c: 97: uint8_t i;
 15802                           ;memory.c: 100: if( writeAddr != blockStartAddr )
 15803  002092  5027               	movf	FLASH_WriteBlock@blockStartAddr,w,c
 15804  002094  181D               	xorwf	FLASH_WriteBlock@writeAddr,w,c
 15805  002096  E144               	bnz	l918
 15806  002098  5028               	movf	FLASH_WriteBlock@blockStartAddr+1,w,c
 15807  00209A  181E               	xorwf	FLASH_WriteBlock@writeAddr+1,w,c
 15808  00209C  E141               	bnz	l918
 15809  00209E  5029               	movf	FLASH_WriteBlock@blockStartAddr+2,w,c
 15810  0020A0  181F               	xorwf	FLASH_WriteBlock@writeAddr+2,w,c
 15811  0020A2  E13E               	bnz	l918
 15812  0020A4  502A               	movf	FLASH_WriteBlock@blockStartAddr+3,w,c
 15813  0020A6  1820               	xorwf	FLASH_WriteBlock@writeAddr+3,w,c
 15814  0020A8  A4D8               	btfss	status,2,c
 15815  0020AA  0012               	return	
 15816                           
 15817                           ;memory.c: 103: }
 15818                           ;memory.c: 106: FLASH_EraseBlock(writeAddr);
 15819                           
 15820                           ;memory.c: 101: {
 15821                           ;memory.c: 102: return -1;
 15822                           ;	Return value of _FLASH_WriteBlock is never used
 15823  0020AC  C01D  F018         	movff	FLASH_WriteBlock@writeAddr,FLASH_EraseBlock@baseAddr
 15824  0020B0  C01E  F019         	movff	FLASH_WriteBlock@writeAddr+1,FLASH_EraseBlock@baseAddr+1
 15825  0020B4  C01F  F01A         	movff	FLASH_WriteBlock@writeAddr+2,FLASH_EraseBlock@baseAddr+2
 15826  0020B8  C020  F01B         	movff	FLASH_WriteBlock@writeAddr+3,FLASH_EraseBlock@baseAddr+3
 15827  0020BC  EC9E  F019         	call	_FLASH_EraseBlock	;wreg free
 15828                           
 15829                           ;memory.c: 109: TBLPTRU = (uint8_t)((writeAddr & 0x00FF0000) >> 16);
 15830  0020C0  C01F  FFF8         	movff	FLASH_WriteBlock@writeAddr+2,tblptru	;volatile
 15831                           
 15832                           ;memory.c: 110: TBLPTRH = (uint8_t)((writeAddr & 0x0000FF00)>> 8);
 15833  0020C4  C01E  FFF7         	movff	FLASH_WriteBlock@writeAddr+1,tblptrh	;volatile
 15834                           
 15835                           ;memory.c: 111: TBLPTRL = (uint8_t)(writeAddr & 0x000000FF);
 15836  0020C8  C01D  FFF6         	movff	FLASH_WriteBlock@writeAddr,tblptrl	;volatile
 15837                           
 15838                           ;memory.c: 114: for (i=0; i<(64); i++)
 15839  0020CC  0E00               	movlw	0
 15840  0020CE  6E2C               	movwf	FLASH_WriteBlock@i,c
 15841  0020D0                     l7172:
 15842  0020D0  0E3F               	movlw	63
 15843  0020D2  642C               	cpfsgt	FLASH_WriteBlock@i,c
 15844  0020D4  D001               	goto	l919
 15845  0020D6  D013               	goto	u7000
 15846  0020D8                     l919:
 15847                           
 15848                           ;memory.c: 115: {
 15849                           ;memory.c: 116: TABLAT = flashWrBufPtr[i];
 15850  0020D8  502C               	movf	FLASH_WriteBlock@i,w,c
 15851  0020DA  0D01               	mullw	1
 15852  0020DC  50F3               	movf	prodl,w,c
 15853  0020DE  2421               	addwf	FLASH_WriteBlock@flashWrBufPtr,w,c
 15854  0020E0  6ED9               	movwf	fsr2l,c
 15855  0020E2  50F4               	movf	prodh,w,c
 15856  0020E4  2022               	addwfc	FLASH_WriteBlock@flashWrBufPtr+1,w,c
 15857  0020E6  6EDA               	movwf	fsr2h,c
 15858  0020E8  50DF               	movf	indf2,w,c
 15859  0020EA  6EF5               	movwf	tablat,c	;volatile
 15860                           
 15861                           ;memory.c: 118: if (i == ((64)-1))
 15862  0020EC  0E3F               	movlw	63
 15863  0020EE  182C               	xorwf	FLASH_WriteBlock@i,w,c
 15864  0020F0  A4D8               	btfss	status,2,c
 15865  0020F2  D002               	goto	l921
 15866  0020F4  000C               	tblwt		*	;# 
 15867                           
 15868                           ;memory.c: 121: }
 15869  0020F6  D001               	goto	l922
 15870  0020F8                     l921:
 15871  0020F8  000D               	tblwt		*+	;# 
 15872  0020FA                     l922:
 15873  0020FA  2A2C               	incf	FLASH_WriteBlock@i,f,c
 15874  0020FC  D7E9               	goto	l7172
 15875  0020FE                     u7000:
 15876                           
 15877                           ;memory.c: 125: }
 15878                           ;memory.c: 126: }
 15879                           ;memory.c: 128: PIR2bits.EEIF = 1;
 15880  0020FE  88A1               	bsf	4001,4,c	;volatile
 15881                           
 15882                           ;memory.c: 129: EECON1bits.EEPGD = 1;
 15883  002100  8EA6               	bsf	4006,7,c	;volsfr
 15884                           
 15885                           ;memory.c: 130: EECON1bits.CFGS = 0;
 15886  002102  9CA6               	bcf	4006,6,c	;volsfr
 15887                           
 15888                           ;memory.c: 131: EECON1bits.WREN = 1;
 15889  002104  84A6               	bsf	4006,2,c	;volsfr
 15890                           
 15891                           ;memory.c: 132: INTCONbits.GIE = 0;
 15892  002106  9EF2               	bcf	intcon,7,c	;volatile
 15893                           
 15894                           ;memory.c: 133: EECON2 = 0x55;
 15895  002108  0E55               	movlw	85
 15896  00210A  6EA7               	movwf	4007,c	;volsfr
 15897                           
 15898                           ;memory.c: 134: EECON2 = 0xAA;
 15899  00210C  0EAA               	movlw	170
 15900  00210E  6EA7               	movwf	4007,c	;volsfr
 15901                           
 15902                           ;memory.c: 135: EECON1bits.WR = 1;
 15903  002110  82A6               	bsf	4006,1,c	;volsfr
 15904                           
 15905                           ;memory.c: 137: EECON1bits.WREN = 0;
 15906  002112  94A6               	bcf	4006,2,c	;volsfr
 15907                           
 15908                           ;memory.c: 138: INTCONbits.GIE = GIEBitValue;
 15909  002114  B02B               	btfsc	FLASH_WriteBlock@GIEBitValue,0,c
 15910  002116  D002               	bra	u7015
 15911  002118  9EF2               	bcf	intcon,7,c	;volatile
 15912  00211A  D001               	bra	u7016
 15913  00211C                     u7015:
 15914  00211C  8EF2               	bsf	intcon,7,c	;volatile
 15915  00211E                     u7016:
 15916  00211E  0012               	return	
 15917  002120                     l918:
 15918  002120  0012               	return		;funcret
 15919  002122                     __end_of_FLASH_WriteBlock:
 15920                           	opt stack 0
 15921                           tosu	equ	0xFFF
 15922                           tosh	equ	0xFFE
 15923                           tosl	equ	0xFFD
 15924                           pclath	equ	0xFFA
 15925                           tblptru	equ	0xFF8
 15926                           tblptrh	equ	0xFF7
 15927                           tblptrl	equ	0xFF6
 15928                           tablat	equ	0xFF5
 15929                           prodh	equ	0xFF4
 15930                           prodl	equ	0xFF3
 15931                           intcon	equ	0xFF2
 15932                           intcon2	equ	0xFF1
 15933                           postinc0	equ	0xFEE
 15934                           wreg	equ	0xFE8
 15935                           indf1	equ	0xFE7
 15936                           postdec1	equ	0xFE5
 15937                           fsr1h	equ	0xFE2
 15938                           fsr1l	equ	0xFE1
 15939                           indf2	equ	0xFDF
 15940                           postinc2	equ	0xFDE
 15941                           postdec2	equ	0xFDD
 15942                           fsr2h	equ	0xFDA
 15943                           fsr2l	equ	0xFD9
 15944                           status	equ	0xFD8
 15945                           
 15946 ;; *************** function _FLASH_EraseBlock *****************
 15947 ;; Defined at:
 15948 ;;		line 144 in file "mcc_generated_files/memory.c"
 15949 ;; Parameters:    Size  Location     Type
 15950 ;;  baseAddr        4   23[COMRAM] unsigned long 
 15951 ;; Auto vars:     Size  Location     Type
 15952 ;;  GIEBitValue     1   27[COMRAM] unsigned char 
 15953 ;; Return value:  Size  Location     Type
 15954 ;;                  1    wreg      void 
 15955 ;; Registers used:
 15956 ;;		wreg, status,2
 15957 ;; Tracked objects:
 15958 ;;		On entry : 0/0
 15959 ;;		On exit  : 0/0
 15960 ;;		Unchanged: 0/0
 15961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15962 ;;      Params:         4       0       0       0       0       0       0
 15963 ;;      Locals:         1       0       0       0       0       0       0
 15964 ;;      Temps:          0       0       0       0       0       0       0
 15965 ;;      Totals:         5       0       0       0       0       0       0
 15966 ;;Total ram usage:        5 bytes
 15967 ;; Hardware stack levels used:    1
 15968 ;; Hardware stack levels required when called:    3
 15969 ;; This function calls:
 15970 ;;		Nothing
 15971 ;; This function is called by:
 15972 ;;		_FLASH_WriteBlock
 15973 ;; This function uses a non-reentrant model
 15974 ;;
 15975                           
 15976                           	psect	text104
 15977  00333C                     __ptext104:
 15978                           	opt stack 0
 15979  00333C                     _FLASH_EraseBlock:
 15980                           	opt stack 24
 15981                           
 15982                           ;memory.c: 146: uint8_t GIEBitValue = INTCONbits.GIE;
 15983                           
 15984                           ;incstack = 0
 15985  00333C  0E00               	movlw	0
 15986  00333E  BEF2               	btfsc	intcon,7,c	;volatile
 15987  003340  0E01               	movlw	1
 15988  003342  6E1C               	movwf	FLASH_EraseBlock@GIEBitValue,c
 15989                           
 15990                           ;memory.c: 148: TBLPTRU = (uint8_t)((baseAddr & 0x00FF0000) >> 16);
 15991  003344  C01A  FFF8         	movff	FLASH_EraseBlock@baseAddr+2,tblptru	;volatile
 15992                           
 15993                           ;memory.c: 149: TBLPTRH = (uint8_t)((baseAddr & 0x0000FF00)>> 8);
 15994  003348  C019  FFF7         	movff	FLASH_EraseBlock@baseAddr+1,tblptrh	;volatile
 15995                           
 15996                           ;memory.c: 150: TBLPTRL = (uint8_t)(baseAddr & 0x000000FF);
 15997  00334C  C018  FFF6         	movff	FLASH_EraseBlock@baseAddr,tblptrl	;volatile
 15998                           
 15999                           ;memory.c: 152: EECON1bits.EEPGD = 1;
 16000  003350  8EA6               	bsf	4006,7,c	;volsfr
 16001                           
 16002                           ;memory.c: 153: EECON1bits.CFGS = 0;
 16003  003352  9CA6               	bcf	4006,6,c	;volsfr
 16004                           
 16005                           ;memory.c: 154: EECON1bits.WREN = 1;
 16006  003354  84A6               	bsf	4006,2,c	;volsfr
 16007                           
 16008                           ;memory.c: 155: EECON1bits.FREE = 1;
 16009  003356  88A6               	bsf	4006,4,c	;volsfr
 16010                           
 16011                           ;memory.c: 156: INTCONbits.GIE = 0;
 16012  003358  9EF2               	bcf	intcon,7,c	;volatile
 16013                           
 16014                           ;memory.c: 157: EECON2 = 0x55;
 16015  00335A  0E55               	movlw	85
 16016  00335C  6EA7               	movwf	4007,c	;volsfr
 16017                           
 16018                           ;memory.c: 158: EECON2 = 0xAA;
 16019  00335E  0EAA               	movlw	170
 16020  003360  6EA7               	movwf	4007,c	;volsfr
 16021                           
 16022                           ;memory.c: 159: EECON1bits.WR = 1;
 16023  003362  82A6               	bsf	4006,1,c	;volsfr
 16024                           
 16025                           ;memory.c: 160: INTCONbits.GIE = GIEBitValue;
 16026  003364  B01C               	btfsc	FLASH_EraseBlock@GIEBitValue,0,c
 16027  003366  D002               	bra	u6755
 16028  003368  9EF2               	bcf	intcon,7,c	;volatile
 16029  00336A  D001               	bra	u6756
 16030  00336C                     u6755:
 16031  00336C  8EF2               	bsf	intcon,7,c	;volatile
 16032  00336E                     u6756:
 16033  00336E  0012               	return		;funcret
 16034  003370                     __end_of_FLASH_EraseBlock:
 16035                           	opt stack 0
 16036                           tosu	equ	0xFFF
 16037                           tosh	equ	0xFFE
 16038                           tosl	equ	0xFFD
 16039                           pclath	equ	0xFFA
 16040                           tblptru	equ	0xFF8
 16041                           tblptrh	equ	0xFF7
 16042                           tblptrl	equ	0xFF6
 16043                           tablat	equ	0xFF5
 16044                           prodh	equ	0xFF4
 16045                           prodl	equ	0xFF3
 16046                           intcon	equ	0xFF2
 16047                           intcon2	equ	0xFF1
 16048                           postinc0	equ	0xFEE
 16049                           wreg	equ	0xFE8
 16050                           indf1	equ	0xFE7
 16051                           postdec1	equ	0xFE5
 16052                           fsr1h	equ	0xFE2
 16053                           fsr1l	equ	0xFE1
 16054                           indf2	equ	0xFDF
 16055                           postinc2	equ	0xFDE
 16056                           postdec2	equ	0xFDD
 16057                           fsr2h	equ	0xFDA
 16058                           fsr2l	equ	0xFD9
 16059                           status	equ	0xFD8
 16060                           
 16061 ;; *************** function _FLASH_IsWriteDone *****************
 16062 ;; Defined at:
 16063 ;;		line 189 in file "mcc_generated_files/memory.c"
 16064 ;; Parameters:    Size  Location     Type
 16065 ;;		None
 16066 ;; Auto vars:     Size  Location     Type
 16067 ;;		None
 16068 ;; Return value:  Size  Location     Type
 16069 ;;                  1    wreg      unsigned char 
 16070 ;; Registers used:
 16071 ;;		wreg
 16072 ;; Tracked objects:
 16073 ;;		On entry : 0/0
 16074 ;;		On exit  : 0/0
 16075 ;;		Unchanged: 0/0
 16076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16077 ;;      Params:         0       0       0       0       0       0       0
 16078 ;;      Locals:         0       0       0       0       0       0       0
 16079 ;;      Temps:          0       0       0       0       0       0       0
 16080 ;;      Totals:         0       0       0       0       0       0       0
 16081 ;;Total ram usage:        0 bytes
 16082 ;; Hardware stack levels used:    1
 16083 ;; Hardware stack levels required when called:    3
 16084 ;; This function calls:
 16085 ;;		Nothing
 16086 ;; This function is called by:
 16087 ;;		_FlashSampleWrite
 16088 ;;		_FlashReadUart
 16089 ;; This function uses a non-reentrant model
 16090 ;;
 16091                           
 16092                           	psect	text105
 16093  0036EA                     __ptext105:
 16094                           	opt stack 0
 16095  0036EA                     _FLASH_IsWriteDone:
 16096                           	opt stack 24
 16097                           
 16098                           ;memory.c: 191: return (EECON1bits.WR == 0);
 16099                           
 16100                           ;incstack = 0
 16101  0036EA  A2A6               	btfss	4006,1,c	;volsfr
 16102  0036EC  D001               	goto	u6611
 16103  0036EE  D002               	goto	u6610
 16104  0036F0                     u6611:
 16105  0036F0  0E01               	movlw	1
 16106  0036F2  0012               	return	
 16107  0036F4                     u6610:
 16108  0036F4  0E00               	movlw	0
 16109  0036F6  0012               	return	
 16110  0036F8                     __end_of_FLASH_IsWriteDone:
 16111                           	opt stack 0
 16112                           tosu	equ	0xFFF
 16113                           tosh	equ	0xFFE
 16114                           tosl	equ	0xFFD
 16115                           pclath	equ	0xFFA
 16116                           tblptru	equ	0xFF8
 16117                           tblptrh	equ	0xFF7
 16118                           tblptrl	equ	0xFF6
 16119                           tablat	equ	0xFF5
 16120                           prodh	equ	0xFF4
 16121                           prodl	equ	0xFF3
 16122                           intcon	equ	0xFF2
 16123                           intcon2	equ	0xFF1
 16124                           postinc0	equ	0xFEE
 16125                           wreg	equ	0xFE8
 16126                           indf1	equ	0xFE7
 16127                           postdec1	equ	0xFE5
 16128                           fsr1h	equ	0xFE2
 16129                           fsr1l	equ	0xFE1
 16130                           indf2	equ	0xFDF
 16131                           postinc2	equ	0xFDE
 16132                           postdec2	equ	0xFDD
 16133                           fsr2h	equ	0xFDA
 16134                           fsr2l	equ	0xFD9
 16135                           status	equ	0xFD8
 16136                           
 16137 ;; *************** function _ADC_GetConversion *****************
 16138 ;; Defined at:
 16139 ;;		line 106 in file "mcc_generated_files/adc.c"
 16140 ;; Parameters:    Size  Location     Type
 16141 ;;  channel         1    wreg     enum E6975
 16142 ;; Auto vars:     Size  Location     Type
 16143 ;;  channel         1   27[COMRAM] enum E6975
 16144 ;; Return value:  Size  Location     Type
 16145 ;;                  2   23[COMRAM] unsigned int 
 16146 ;; Registers used:
 16147 ;;		wreg, status,2, status,0
 16148 ;; Tracked objects:
 16149 ;;		On entry : 0/0
 16150 ;;		On exit  : 0/0
 16151 ;;		Unchanged: 0/0
 16152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16153 ;;      Params:         2       0       0       0       0       0       0
 16154 ;;      Locals:         1       0       0       0       0       0       0
 16155 ;;      Temps:          2       0       0       0       0       0       0
 16156 ;;      Totals:         5       0       0       0       0       0       0
 16157 ;;Total ram usage:        5 bytes
 16158 ;; Hardware stack levels used:    1
 16159 ;; Hardware stack levels required when called:    3
 16160 ;; This function calls:
 16161 ;;		Nothing
 16162 ;; This function is called by:
 16163 ;;		_AdcConvert
 16164 ;; This function uses a non-reentrant model
 16165 ;;
 16166                           
 16167                           	psect	text106
 16168  0033A0                     __ptext106:
 16169                           	opt stack 0
 16170  0033A0                     _ADC_GetConversion:
 16171                           	opt stack 26
 16172                           
 16173                           ;incstack = 0
 16174                           ;ADC_GetConversion@channel stored from wreg
 16175  0033A0  6E1C               	movwf	ADC_GetConversion@channel,c
 16176                           
 16177                           ;adc.c: 109: ADCON0bits.CHS = channel;
 16178  0033A2  C01C  F01A         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
 16179  0033A6  461A               	rlncf	??_ADC_GetConversion,f,c
 16180  0033A8  461A               	rlncf	??_ADC_GetConversion,f,c
 16181  0033AA  50C2               	movf	4034,w,c	;volatile
 16182  0033AC  181A               	xorwf	??_ADC_GetConversion,w,c
 16183  0033AE  0B83               	andlw	-125
 16184  0033B0  181A               	xorwf	??_ADC_GetConversion,w,c
 16185  0033B2  6EC2               	movwf	4034,c	;volatile
 16186                           
 16187                           ;adc.c: 112: ADCON0bits.ADON = 1;
 16188  0033B4  80C2               	bsf	4034,0,c	;volatile
 16189                           
 16190                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
 16191  0033B6  82C2               	bsf	4034,1,c	;volatile
 16192  0033B8                     
 16193                           ;adc.c: 119: {
 16194  0033B8  B2C2               	btfsc	4034,1,c	;volatile
 16195  0033BA  D7FE               	goto	l1031
 16196                           
 16197                           ;adc.c: 120: }
 16198                           ;adc.c: 122: return ((ADRESH << 8) + ADRESL);
 16199  0033BC  50C4               	movf	4036,w,c	;volatile
 16200  0033BE  6E1B               	movwf	(??_ADC_GetConversion+1)& (0+255),c
 16201  0033C0  6A1A               	clrf	??_ADC_GetConversion& (0+255),c
 16202  0033C2  50C3               	movf	4035,w,c	;volatile
 16203  0033C4  241A               	addwf	??_ADC_GetConversion,w,c
 16204  0033C6  6E18               	movwf	?_ADC_GetConversion,c
 16205  0033C8  0E00               	movlw	0
 16206  0033CA  201B               	addwfc	??_ADC_GetConversion+1,w,c
 16207  0033CC  6E19               	movwf	?_ADC_GetConversion+1,c
 16208  0033CE  0012               	return	
 16209  0033D0                     __end_of_ADC_GetConversion:
 16210                           	opt stack 0
 16211                           tosu	equ	0xFFF
 16212                           tosh	equ	0xFFE
 16213                           tosl	equ	0xFFD
 16214                           pclath	equ	0xFFA
 16215                           tblptru	equ	0xFF8
 16216                           tblptrh	equ	0xFF7
 16217                           tblptrl	equ	0xFF6
 16218                           tablat	equ	0xFF5
 16219                           prodh	equ	0xFF4
 16220                           prodl	equ	0xFF3
 16221                           intcon	equ	0xFF2
 16222                           intcon2	equ	0xFF1
 16223                           postinc0	equ	0xFEE
 16224                           wreg	equ	0xFE8
 16225                           indf1	equ	0xFE7
 16226                           postdec1	equ	0xFE5
 16227                           fsr1h	equ	0xFE2
 16228                           fsr1l	equ	0xFE1
 16229                           indf2	equ	0xFDF
 16230                           postinc2	equ	0xFDE
 16231                           postdec2	equ	0xFDD
 16232                           fsr2h	equ	0xFDA
 16233                           fsr2l	equ	0xFD9
 16234                           status	equ	0xFD8
 16235                           
 16236 ;; *************** function _INTERRUPT_InterruptManager *****************
 16237 ;; Defined at:
 16238 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 16239 ;; Parameters:    Size  Location     Type
 16240 ;;		None
 16241 ;; Auto vars:     Size  Location     Type
 16242 ;;		None
 16243 ;; Return value:  Size  Location     Type
 16244 ;;                  1    wreg      void 
 16245 ;; Registers used:
 16246 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16247 ;; Tracked objects:
 16248 ;;		On entry : 0/0
 16249 ;;		On exit  : 0/0
 16250 ;;		Unchanged: 0/0
 16251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16252 ;;      Params:         0       0       0       0       0       0       0
 16253 ;;      Locals:         0       0       0       0       0       0       0
 16254 ;;      Temps:         18       0       0       0       0       0       0
 16255 ;;      Totals:        18       0       0       0       0       0       0
 16256 ;;Total ram usage:       18 bytes
 16257 ;; Hardware stack levels used:    1
 16258 ;; Hardware stack levels required when called:    2
 16259 ;; This function calls:
 16260 ;;		_EUSART1_Receive_ISR
 16261 ;;		_EUSART1_Transmit_ISR
 16262 ;;		_MEMORY_ISR
 16263 ;;		_PIN_MANAGER_IOC
 16264 ;;		_TMR0_ISR
 16265 ;; This function is called by:
 16266 ;;		Interrupt level 2
 16267 ;; This function uses a non-reentrant model
 16268 ;;
 16269                           
 16270                           	psect	intcode
 16271  000008                     __pintcode:
 16272                           	opt stack 0
 16273  000008                     _INTERRUPT_InterruptManager:
 16274                           	opt stack 21
 16275                           
 16276                           ;incstack = 0
 16277  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 16278  00000A  CFFA F006          	movff	pclath,??_INTERRUPT_InterruptManager
 16279  00000E  CFFB F007          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 16280  000012  CFE9 F008          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 16281  000016  CFEA F009          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 16282  00001A  CFE1 F00A          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 16283  00001E  CFE2 F00B          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 16284  000022  CFD9 F00C          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 16285  000026  CFDA F00D          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 16286  00002A  CFF3 F00E          	movff	prodl,??_INTERRUPT_InterruptManager+8
 16287  00002E  CFF4 F00F          	movff	prodh,??_INTERRUPT_InterruptManager+9
 16288  000032  CFF6 F010          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 16289  000036  CFF7 F011          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 16290  00003A  CFF8 F012          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 16291  00003E  CFF5 F013          	movff	tablat,??_INTERRUPT_InterruptManager+13
 16292  000042  C048  F014         	movff	btemp,??_INTERRUPT_InterruptManager+14
 16293  000046  C049  F015         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 16294  00004A  C04A  F016         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 16295  00004E  C04B  F017         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 16296                           
 16297                           ;interrupt_manager.c: 60: if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
 16298  000052  B6F2               	btfsc	intcon,3,c	;volatile
 16299  000054  A0F2               	btfss	intcon,0,c	;volatile
 16300  000056  D003               	goto	i2l756
 16301                           
 16302                           ;interrupt_manager.c: 61: {
 16303                           ;interrupt_manager.c: 62: PIN_MANAGER_IOC();
 16304  000058  ECAF  F01B         	call	_PIN_MANAGER_IOC	;wreg free
 16305                           
 16306                           ;interrupt_manager.c: 63: }
 16307  00005C  D019               	goto	i2l765
 16308  00005E                     i2l756:
 16309                           
 16310                           ;interrupt_manager.c: 64: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 16311  00005E  BAF2               	btfsc	intcon,5,c	;volatile
 16312  000060  A4F2               	btfss	intcon,2,c	;volatile
 16313  000062  D003               	goto	i2l758
 16314                           
 16315                           ;interrupt_manager.c: 65: {
 16316                           ;interrupt_manager.c: 66: TMR0_ISR();
 16317  000064  ECD9  F011         	call	_TMR0_ISR	;wreg free
 16318                           
 16319                           ;interrupt_manager.c: 67: }
 16320  000068  D013               	goto	i2l765
 16321  00006A                     i2l758:
 16322                           
 16323                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1)
 16324  00006A  ACF2               	btfss	intcon,6,c	;volatile
 16325  00006C  D011               	goto	i2l765
 16326                           
 16327                           ;interrupt_manager.c: 69: {
 16328                           ;interrupt_manager.c: 70: if(PIE2bits.EEIE == 1 && PIR2bits.EEIF == 1)
 16329  00006E  B8A0               	btfsc	4000,4,c	;volatile
 16330  000070  A8A1               	btfss	4001,4,c	;volatile
 16331  000072  D003               	goto	i2l761
 16332                           
 16333                           ;interrupt_manager.c: 71: {
 16334                           ;interrupt_manager.c: 72: MEMORY_ISR();
 16335  000074  ECB1  F01B         	call	_MEMORY_ISR	;wreg free
 16336                           
 16337                           ;interrupt_manager.c: 73: }
 16338  000078  D00B               	goto	i2l765
 16339  00007A                     i2l761:
 16340                           
 16341                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 16342  00007A  B89D               	btfsc	3997,4,c	;volatile
 16343  00007C  A89E               	btfss	3998,4,c	;volatile
 16344  00007E  D003               	goto	i2l763
 16345                           
 16346                           ;interrupt_manager.c: 75: {
 16347                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
 16348  000080  ECE1  F018         	call	_EUSART1_Transmit_ISR	;wreg free
 16349                           
 16350                           ;interrupt_manager.c: 77: }
 16351  000084  D005               	goto	i2l765
 16352  000086                     i2l763:
 16353                           
 16354                           ;interrupt_manager.c: 78: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 16355  000086  BA9D               	btfsc	3997,5,c	;volatile
 16356  000088  AA9E               	btfss	3998,5,c	;volatile
 16357  00008A  D002               	goto	i2l765
 16358                           
 16359                           ;interrupt_manager.c: 79: {
 16360                           ;interrupt_manager.c: 80: EUSART1_Receive_ISR();
 16361  00008C  ECE8  F019         	call	_EUSART1_Receive_ISR	;wreg free
 16362  000090                     i2l765:
 16363                           
 16364                           ;interrupt_manager.c: 87: else
 16365                           ;interrupt_manager.c: 88: {
 16366                           
 16367                           ;interrupt_manager.c: 85: }
 16368                           ;interrupt_manager.c: 86: }
 16369                           
 16370                           ;interrupt_manager.c: 82: else
 16371                           ;interrupt_manager.c: 83: {
 16372  000090  C017  F04B         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 16373  000094  C016  F04A         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 16374  000098  C015  F049         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 16375  00009C  C014  F048         	movff	??_INTERRUPT_InterruptManager+14,btemp
 16376  0000A0  C013  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 16377  0000A4  C012  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 16378  0000A8  C011  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 16379  0000AC  C010  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 16380  0000B0  C00F  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 16381  0000B4  C00E  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 16382  0000B8  C00D  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 16383  0000BC  C00C  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 16384  0000C0  C00B  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 16385  0000C4  C00A  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 16386  0000C8  C009  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 16387  0000CC  C008  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 16388  0000D0  C007  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 16389  0000D4  C006  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 16390  0000D8  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 16391  0000DA  0011               	retfie		f
 16392  0000DC                     __end_of_INTERRUPT_InterruptManager:
 16393                           	opt stack 0
 16394                           tosu	equ	0xFFF
 16395                           tosh	equ	0xFFE
 16396                           tosl	equ	0xFFD
 16397                           pclatu	equ	0xFFB
 16398                           pclath	equ	0xFFA
 16399                           tblptru	equ	0xFF8
 16400                           tblptrh	equ	0xFF7
 16401                           tblptrl	equ	0xFF6
 16402                           tablat	equ	0xFF5
 16403                           prodh	equ	0xFF4
 16404                           prodl	equ	0xFF3
 16405                           intcon	equ	0xFF2
 16406                           intcon2	equ	0xFF1
 16407                           postinc0	equ	0xFEE
 16408                           fsr0h	equ	0xFEA
 16409                           fsr0l	equ	0xFE9
 16410                           wreg	equ	0xFE8
 16411                           indf1	equ	0xFE7
 16412                           postdec1	equ	0xFE5
 16413                           fsr1h	equ	0xFE2
 16414                           fsr1l	equ	0xFE1
 16415                           indf2	equ	0xFDF
 16416                           postinc2	equ	0xFDE
 16417                           postdec2	equ	0xFDD
 16418                           fsr2h	equ	0xFDA
 16419                           fsr2l	equ	0xFD9
 16420                           status	equ	0xFD8
 16421                           
 16422 ;; *************** function _TMR0_ISR *****************
 16423 ;; Defined at:
 16424 ;;		line 132 in file "mcc_generated_files/tmr0.c"
 16425 ;; Parameters:    Size  Location     Type
 16426 ;;		None
 16427 ;; Auto vars:     Size  Location     Type
 16428 ;;		None
 16429 ;; Return value:  Size  Location     Type
 16430 ;;                  1    wreg      void 
 16431 ;; Registers used:
 16432 ;;		wreg, status,2, status,0, cstack
 16433 ;; Tracked objects:
 16434 ;;		On entry : 0/0
 16435 ;;		On exit  : 0/0
 16436 ;;		Unchanged: 0/0
 16437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16438 ;;      Params:         0       0       0       0       0       0       0
 16439 ;;      Locals:         0       0       0       0       0       0       0
 16440 ;;      Temps:          0       0       0       0       0       0       0
 16441 ;;      Totals:         0       0       0       0       0       0       0
 16442 ;;Total ram usage:        0 bytes
 16443 ;; Hardware stack levels used:    1
 16444 ;; Hardware stack levels required when called:    1
 16445 ;; This function calls:
 16446 ;;		___lwmod
 16447 ;; This function is called by:
 16448 ;;		_INTERRUPT_InterruptManager
 16449 ;; This function uses a non-reentrant model
 16450 ;;
 16451                           
 16452                           	psect	text108
 16453  0023B2                     __ptext108:
 16454                           	opt stack 0
 16455  0023B2                     _TMR0_ISR:
 16456                           	opt stack 21
 16457                           
 16458                           ;tmr0.c: 134: static volatile uint16_t CountCallBack = 0;
 16459                           ;tmr0.c: 137: INTCONbits.TMR0IF = 0;
 16460                           
 16461                           ;incstack = 0
 16462  0023B2  94F2               	bcf	intcon,2,c	;volatile
 16463                           
 16464                           ;tmr0.c: 141: TMR0H = timer0ReloadVal >> 8;
 16465  0023B4  5047               	movf	_timer0ReloadVal+1,w,c	;volatile
 16466  0023B6  6ED7               	movwf	4055,c	;volatile
 16467                           
 16468                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal;
 16469  0023B8  C046  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 16470                           
 16471                           ;tmr0.c: 146: CountCallBack ++;
 16472  0023BC  4A35               	infsnz	TMR0_ISR@CountCallBack,f,c	;volatile
 16473  0023BE  2A36               	incf	TMR0_ISR@CountCallBack+1,f,c	;volatile
 16474                           
 16475                           ;tmr0.c: 147: if ((CountCallBack % 20) == 0)
 16476  0023C0  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 16477  0023C4  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 16478  0023C8  0E00               	movlw	0
 16479  0023CA  6E04               	movwf	___lwmod@divisor+1,c
 16480  0023CC  0E14               	movlw	20
 16481  0023CE  6E03               	movwf	___lwmod@divisor,c
 16482  0023D0  EC2C  F018         	call	___lwmod	;wreg free
 16483  0023D4  5001               	movf	?___lwmod,w,c
 16484  0023D6  1002               	iorwf	?___lwmod+1,w,c
 16485  0023D8  A4D8               	btfss	status,2,c
 16486  0023DA  D003               	goto	i2l987
 16487                           
 16488                           ;tmr0.c: 148: {
 16489                           ;tmr0.c: 149: TimerOneSecFlag = 1;
 16490  0023DC  0E01               	movlw	1
 16491  0023DE  0100               	movlb	0	; () banked
 16492  0023E0  6FD6               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
 16493  0023E2                     i2l987:
 16494                           
 16495                           ;tmr0.c: 150: }
 16496                           ;tmr0.c: 152: if ((CountCallBack % 50) == 0)
 16497                           
 16498                           ; BSR set to: 0
 16499  0023E2  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 16500  0023E6  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 16501  0023EA  0E00               	movlw	0
 16502  0023EC  6E04               	movwf	___lwmod@divisor+1,c
 16503  0023EE  0E32               	movlw	50
 16504  0023F0  6E03               	movwf	___lwmod@divisor,c
 16505  0023F2  EC2C  F018         	call	___lwmod	;wreg free
 16506  0023F6  5001               	movf	?___lwmod,w,c
 16507  0023F8  1002               	iorwf	?___lwmod+1,w,c
 16508  0023FA  A4D8               	btfss	status,2,c
 16509  0023FC  D003               	goto	i2l988
 16510                           
 16511                           ;tmr0.c: 153: {
 16512                           ;tmr0.c: 154: TimerSamplingFlag = 1;
 16513  0023FE  0E01               	movlw	1
 16514  002400  0100               	movlb	0	; () banked
 16515  002402  6FD5               	movwf	_TimerSamplingFlag& (0+255),b	;volatile
 16516  002404                     i2l988:
 16517                           
 16518                           ;tmr0.c: 155: }
 16519                           ;tmr0.c: 156: if ((CountCallBack % 300) == 0)
 16520                           
 16521                           ; BSR set to: 0
 16522  002404  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 16523  002408  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 16524  00240C  0E01               	movlw	1
 16525  00240E  6E04               	movwf	___lwmod@divisor+1,c
 16526  002410  0E2C               	movlw	44
 16527  002412  6E03               	movwf	___lwmod@divisor,c
 16528  002414  EC2C  F018         	call	___lwmod	;wreg free
 16529  002418  5001               	movf	?___lwmod,w,c
 16530  00241A  1002               	iorwf	?___lwmod+1,w,c
 16531  00241C  A4D8               	btfss	status,2,c
 16532  00241E  D003               	goto	i2l989
 16533                           
 16534                           ;tmr0.c: 157: {
 16535                           ;tmr0.c: 158: TimerKeepAliveFlag = 1;
 16536  002420  0E01               	movlw	1
 16537  002422  0100               	movlb	0	; () banked
 16538  002424  6FD4               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
 16539  002426                     i2l989:
 16540                           
 16541                           ;tmr0.c: 159: }
 16542                           ;tmr0.c: 161: CountCallBack %= 300;
 16543                           
 16544                           ; BSR set to: 0
 16545  002426  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 16546  00242A  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 16547  00242E  0E01               	movlw	1
 16548  002430  6E04               	movwf	___lwmod@divisor+1,c
 16549  002432  0E2C               	movlw	44
 16550  002434  6E03               	movwf	___lwmod@divisor,c
 16551  002436  EC2C  F018         	call	___lwmod	;wreg free
 16552  00243A  C001  F035         	movff	?___lwmod,TMR0_ISR@CountCallBack	;volatile
 16553  00243E  C002  F036         	movff	?___lwmod+1,TMR0_ISR@CountCallBack+1	;volatile
 16554  002442  0012               	return		;funcret
 16555  002444                     __end_of_TMR0_ISR:
 16556                           	opt stack 0
 16557                           tosu	equ	0xFFF
 16558                           tosh	equ	0xFFE
 16559                           tosl	equ	0xFFD
 16560                           pclatu	equ	0xFFB
 16561                           pclath	equ	0xFFA
 16562                           tblptru	equ	0xFF8
 16563                           tblptrh	equ	0xFF7
 16564                           tblptrl	equ	0xFF6
 16565                           tablat	equ	0xFF5
 16566                           prodh	equ	0xFF4
 16567                           prodl	equ	0xFF3
 16568                           intcon	equ	0xFF2
 16569                           intcon2	equ	0xFF1
 16570                           postinc0	equ	0xFEE
 16571                           fsr0h	equ	0xFEA
 16572                           fsr0l	equ	0xFE9
 16573                           wreg	equ	0xFE8
 16574                           indf1	equ	0xFE7
 16575                           postdec1	equ	0xFE5
 16576                           fsr1h	equ	0xFE2
 16577                           fsr1l	equ	0xFE1
 16578                           indf2	equ	0xFDF
 16579                           postinc2	equ	0xFDE
 16580                           postdec2	equ	0xFDD
 16581                           fsr2h	equ	0xFDA
 16582                           fsr2l	equ	0xFD9
 16583                           status	equ	0xFD8
 16584                           
 16585 ;; *************** function ___lwmod *****************
 16586 ;; Defined at:
 16587 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 16588 ;; Parameters:    Size  Location     Type
 16589 ;;  dividend        2    0[COMRAM] unsigned int 
 16590 ;;  divisor         2    2[COMRAM] unsigned int 
 16591 ;; Auto vars:     Size  Location     Type
 16592 ;;  counter         1    4[COMRAM] unsigned char 
 16593 ;; Return value:  Size  Location     Type
 16594 ;;                  2    0[COMRAM] unsigned int 
 16595 ;; Registers used:
 16596 ;;		wreg, status,2, status,0
 16597 ;; Tracked objects:
 16598 ;;		On entry : 0/0
 16599 ;;		On exit  : 0/0
 16600 ;;		Unchanged: 0/0
 16601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16602 ;;      Params:         4       0       0       0       0       0       0
 16603 ;;      Locals:         1       0       0       0       0       0       0
 16604 ;;      Temps:          0       0       0       0       0       0       0
 16605 ;;      Totals:         5       0       0       0       0       0       0
 16606 ;;Total ram usage:        5 bytes
 16607 ;; Hardware stack levels used:    1
 16608 ;; This function calls:
 16609 ;;		Nothing
 16610 ;; This function is called by:
 16611 ;;		_TMR0_ISR
 16612 ;;		_segmentCounter
 16613 ;; This function uses a non-reentrant model
 16614 ;;
 16615                           
 16616                           	psect	text109
 16617  003058                     __ptext109:
 16618                           	opt stack 0
 16619  003058                     ___lwmod:
 16620                           	opt stack 21
 16621                           
 16622                           ;incstack = 0
 16623  003058  5003               	movf	___lwmod@divisor,w,c
 16624  00305A  1004               	iorwf	___lwmod@divisor+1,w,c
 16625  00305C  B4D8               	btfsc	status,2,c
 16626  00305E  D018               	goto	i2l1822
 16627  003060  0E01               	movlw	1
 16628  003062  6E05               	movwf	___lwmod@counter,c
 16629  003064  D004               	goto	i2l1817
 16630  003066  90D8               	bcf	status,0,c
 16631  003068  3603               	rlcf	___lwmod@divisor,f,c
 16632  00306A  3604               	rlcf	___lwmod@divisor+1,f,c
 16633  00306C  2A05               	incf	___lwmod@counter,f,c
 16634  00306E                     i2l1817:
 16635  00306E  AE04               	btfss	___lwmod@divisor+1,7,c
 16636  003070  D7FA               	goto	i2l1818
 16637  003072                     i2u507_40:
 16638  003072  5003               	movf	___lwmod@divisor,w,c
 16639  003074  5C01               	subwf	___lwmod@dividend,w,c
 16640  003076  5004               	movf	___lwmod@divisor+1,w,c
 16641  003078  5802               	subwfb	___lwmod@dividend+1,w,c
 16642  00307A  A0D8               	btfss	status,0,c
 16643  00307C  D004               	goto	i2l1821
 16644  00307E  5003               	movf	___lwmod@divisor,w,c
 16645  003080  5E01               	subwf	___lwmod@dividend,f,c
 16646  003082  5004               	movf	___lwmod@divisor+1,w,c
 16647  003084  5A02               	subwfb	___lwmod@dividend+1,f,c
 16648  003086                     i2l1821:
 16649  003086  90D8               	bcf	status,0,c
 16650  003088  3204               	rrcf	___lwmod@divisor+1,f,c
 16651  00308A  3203               	rrcf	___lwmod@divisor,f,c
 16652  00308C  2E05               	decfsz	___lwmod@counter,f,c
 16653  00308E  D7F1               	goto	i2u507_40
 16654  003090                     i2l1822:
 16655  003090  C001  F001         	movff	___lwmod@dividend,?___lwmod
 16656  003094  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
 16657  003098  0012               	return		;funcret
 16658  00309A                     __end_of___lwmod:
 16659                           	opt stack 0
 16660                           tosu	equ	0xFFF
 16661                           tosh	equ	0xFFE
 16662                           tosl	equ	0xFFD
 16663                           pclatu	equ	0xFFB
 16664                           pclath	equ	0xFFA
 16665                           tblptru	equ	0xFF8
 16666                           tblptrh	equ	0xFF7
 16667                           tblptrl	equ	0xFF6
 16668                           tablat	equ	0xFF5
 16669                           prodh	equ	0xFF4
 16670                           prodl	equ	0xFF3
 16671                           intcon	equ	0xFF2
 16672                           intcon2	equ	0xFF1
 16673                           postinc0	equ	0xFEE
 16674                           fsr0h	equ	0xFEA
 16675                           fsr0l	equ	0xFE9
 16676                           wreg	equ	0xFE8
 16677                           indf1	equ	0xFE7
 16678                           postdec1	equ	0xFE5
 16679                           fsr1h	equ	0xFE2
 16680                           fsr1l	equ	0xFE1
 16681                           indf2	equ	0xFDF
 16682                           postinc2	equ	0xFDE
 16683                           postdec2	equ	0xFDD
 16684                           fsr2h	equ	0xFDA
 16685                           fsr2l	equ	0xFD9
 16686                           status	equ	0xFD8
 16687                           
 16688 ;; *************** function _PIN_MANAGER_IOC *****************
 16689 ;; Defined at:
 16690 ;;		line 96 in file "mcc_generated_files/pin_manager.c"
 16691 ;; Parameters:    Size  Location     Type
 16692 ;;		None
 16693 ;; Auto vars:     Size  Location     Type
 16694 ;;		None
 16695 ;; Return value:  Size  Location     Type
 16696 ;;                  1    wreg      void 
 16697 ;; Registers used:
 16698 ;;		None
 16699 ;; Tracked objects:
 16700 ;;		On entry : 0/0
 16701 ;;		On exit  : 0/0
 16702 ;;		Unchanged: 0/0
 16703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16704 ;;      Params:         0       0       0       0       0       0       0
 16705 ;;      Locals:         0       0       0       0       0       0       0
 16706 ;;      Temps:          0       0       0       0       0       0       0
 16707 ;;      Totals:         0       0       0       0       0       0       0
 16708 ;;Total ram usage:        0 bytes
 16709 ;; Hardware stack levels used:    1
 16710 ;; This function calls:
 16711 ;;		Nothing
 16712 ;; This function is called by:
 16713 ;;		_INTERRUPT_InterruptManager
 16714 ;; This function uses a non-reentrant model
 16715 ;;
 16716                           
 16717                           	psect	text110
 16718  00375E                     __ptext110:
 16719                           	opt stack 0
 16720  00375E                     _PIN_MANAGER_IOC:
 16721                           	opt stack 22
 16722                           
 16723                           ;pin_manager.c: 100: INTCONbits.RBIF = 0;
 16724                           
 16725                           ;incstack = 0
 16726  00375E  90F2               	bcf	intcon,0,c	;volatile
 16727  003760  0012               	return		;funcret
 16728  003762                     __end_of_PIN_MANAGER_IOC:
 16729                           	opt stack 0
 16730                           tosu	equ	0xFFF
 16731                           tosh	equ	0xFFE
 16732                           tosl	equ	0xFFD
 16733                           pclatu	equ	0xFFB
 16734                           pclath	equ	0xFFA
 16735                           tblptru	equ	0xFF8
 16736                           tblptrh	equ	0xFF7
 16737                           tblptrl	equ	0xFF6
 16738                           tablat	equ	0xFF5
 16739                           prodh	equ	0xFF4
 16740                           prodl	equ	0xFF3
 16741                           intcon	equ	0xFF2
 16742                           intcon2	equ	0xFF1
 16743                           postinc0	equ	0xFEE
 16744                           fsr0h	equ	0xFEA
 16745                           fsr0l	equ	0xFE9
 16746                           wreg	equ	0xFE8
 16747                           indf1	equ	0xFE7
 16748                           postdec1	equ	0xFE5
 16749                           fsr1h	equ	0xFE2
 16750                           fsr1l	equ	0xFE1
 16751                           indf2	equ	0xFDF
 16752                           postinc2	equ	0xFDE
 16753                           postdec2	equ	0xFDD
 16754                           fsr2h	equ	0xFDA
 16755                           fsr2l	equ	0xFD9
 16756                           status	equ	0xFD8
 16757                           
 16758 ;; *************** function _MEMORY_ISR *****************
 16759 ;; Defined at:
 16760 ;;		line 206 in file "mcc_generated_files/memory.c"
 16761 ;; Parameters:    Size  Location     Type
 16762 ;;		None
 16763 ;; Auto vars:     Size  Location     Type
 16764 ;;		None
 16765 ;; Return value:  Size  Location     Type
 16766 ;;                  1    wreg      void 
 16767 ;; Registers used:
 16768 ;;		None
 16769 ;; Tracked objects:
 16770 ;;		On entry : 0/0
 16771 ;;		On exit  : 0/0
 16772 ;;		Unchanged: 0/0
 16773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16774 ;;      Params:         0       0       0       0       0       0       0
 16775 ;;      Locals:         0       0       0       0       0       0       0
 16776 ;;      Temps:          0       0       0       0       0       0       0
 16777 ;;      Totals:         0       0       0       0       0       0       0
 16778 ;;Total ram usage:        0 bytes
 16779 ;; Hardware stack levels used:    1
 16780 ;; This function calls:
 16781 ;;		Nothing
 16782 ;; This function is called by:
 16783 ;;		_INTERRUPT_InterruptManager
 16784 ;; This function uses a non-reentrant model
 16785 ;;
 16786                           
 16787                           	psect	text111
 16788  003762                     __ptext111:
 16789                           	opt stack 0
 16790  003762                     _MEMORY_ISR:
 16791                           	opt stack 22
 16792                           
 16793                           ;memory.c: 209: PIR2bits.EEIF = 0;
 16794                           
 16795                           ;incstack = 0
 16796  003762  98A1               	bcf	4001,4,c	;volatile
 16797  003764  0012               	return		;funcret
 16798  003766                     __end_of_MEMORY_ISR:
 16799                           	opt stack 0
 16800                           tosu	equ	0xFFF
 16801                           tosh	equ	0xFFE
 16802                           tosl	equ	0xFFD
 16803                           pclatu	equ	0xFFB
 16804                           pclath	equ	0xFFA
 16805                           tblptru	equ	0xFF8
 16806                           tblptrh	equ	0xFF7
 16807                           tblptrl	equ	0xFF6
 16808                           tablat	equ	0xFF5
 16809                           prodh	equ	0xFF4
 16810                           prodl	equ	0xFF3
 16811                           intcon	equ	0xFF2
 16812                           intcon2	equ	0xFF1
 16813                           postinc0	equ	0xFEE
 16814                           fsr0h	equ	0xFEA
 16815                           fsr0l	equ	0xFE9
 16816                           wreg	equ	0xFE8
 16817                           indf1	equ	0xFE7
 16818                           postdec1	equ	0xFE5
 16819                           fsr1h	equ	0xFE2
 16820                           fsr1l	equ	0xFE1
 16821                           indf2	equ	0xFDF
 16822                           postinc2	equ	0xFDE
 16823                           postdec2	equ	0xFDD
 16824                           fsr2h	equ	0xFDA
 16825                           fsr2l	equ	0xFD9
 16826                           status	equ	0xFD8
 16827                           
 16828 ;; *************** function _EUSART1_Transmit_ISR *****************
 16829 ;; Defined at:
 16830 ;;		line 181 in file "mcc_generated_files/eusart1.c"
 16831 ;; Parameters:    Size  Location     Type
 16832 ;;		None
 16833 ;; Auto vars:     Size  Location     Type
 16834 ;;		None
 16835 ;; Return value:  Size  Location     Type
 16836 ;;                  1    wreg      void 
 16837 ;; Registers used:
 16838 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16839 ;; Tracked objects:
 16840 ;;		On entry : 0/0
 16841 ;;		On exit  : 0/0
 16842 ;;		Unchanged: 0/0
 16843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16844 ;;      Params:         0       0       0       0       0       0       0
 16845 ;;      Locals:         0       0       0       0       0       0       0
 16846 ;;      Temps:          0       0       0       0       0       0       0
 16847 ;;      Totals:         0       0       0       0       0       0       0
 16848 ;;Total ram usage:        0 bytes
 16849 ;; Hardware stack levels used:    1
 16850 ;; This function calls:
 16851 ;;		Nothing
 16852 ;; This function is called by:
 16853 ;;		_INTERRUPT_InterruptManager
 16854 ;; This function uses a non-reentrant model
 16855 ;;
 16856                           
 16857                           	psect	text112
 16858  0031C2                     __ptext112:
 16859                           	opt stack 0
 16860  0031C2                     _EUSART1_Transmit_ISR:
 16861                           	opt stack 22
 16862                           
 16863                           ;eusart1.c: 185: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 16864                           
 16865                           ;incstack = 0
 16866  0031C2  0E46               	movlw	70
 16867  0031C4  0100               	movlb	0	; () banked
 16868  0031C6  61FF               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 16869  0031C8  D012               	goto	i2l827
 16870                           
 16871                           ; BSR set to: 0
 16872                           ;eusart1.c: 186: {
 16873                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 16874  0031CA  5039               	movf	_eusart1TxTail,w,c	;volatile
 16875  0031CC  0D01               	mullw	1
 16876  0031CE  0E00               	movlw	low _eusart1TxBuffer
 16877  0031D0  24F3               	addwf	prodl,w,c
 16878  0031D2  6ED9               	movwf	fsr2l,c
 16879  0031D4  0E01               	movlw	high _eusart1TxBuffer
 16880  0031D6  20F4               	addwfc	prodh,w,c
 16881  0031D8  6EDA               	movwf	fsr2h,c
 16882  0031DA  50DF               	movf	indf2,w,c
 16883  0031DC  6EAD               	movwf	4013,c	;volatile
 16884                           
 16885                           ; BSR set to: 0
 16886  0031DE  2A39               	incf	_eusart1TxTail,f,c	;volatile
 16887                           
 16888                           ; BSR set to: 0
 16889                           ;eusart1.c: 188: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 16890  0031E0  0E45               	movlw	69
 16891  0031E2  6439               	cpfsgt	_eusart1TxTail,c	;volatile
 16892  0031E4  D002               	goto	i2l828
 16893                           
 16894                           ; BSR set to: 0
 16895                           ;eusart1.c: 189: {
 16896                           ;eusart1.c: 190: eusart1TxTail = 0;
 16897  0031E6  0E00               	movlw	0
 16898  0031E8  6E39               	movwf	_eusart1TxTail,c	;volatile
 16899  0031EA                     i2l828:
 16900                           
 16901                           ; BSR set to: 0
 16902                           ;eusart1.c: 191: }
 16903                           ;eusart1.c: 192: eusart1TxBufferRemaining++;
 16904                           
 16905                           ; BSR set to: 0
 16906  0031EA  2BFF               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 16907                           
 16908                           ;eusart1.c: 193: }
 16909  0031EC  0012               	return	
 16910  0031EE                     i2l827:
 16911                           
 16912                           ; BSR set to: 0
 16913                           ;eusart1.c: 194: else
 16914                           ;eusart1.c: 195: {
 16915                           ;eusart1.c: 196: PIE1bits.TX1IE = 0;
 16916  0031EE  989D               	bcf	3997,4,c	;volatile
 16917                           
 16918                           ; BSR set to: 0
 16919                           ;eusart1.c: 197: eusart1TxTail = 0;
 16920  0031F0  0E00               	movlw	0
 16921  0031F2  6E39               	movwf	_eusart1TxTail,c	;volatile
 16922                           
 16923                           ;eusart1.c: 198: eusart1TxHead = 0;
 16924  0031F4  0E00               	movlw	0
 16925  0031F6  6E3A               	movwf	_eusart1TxHead,c	;volatile
 16926  0031F8  0012               	return	
 16927  0031FA                     __end_of_EUSART1_Transmit_ISR:
 16928                           	opt stack 0
 16929                           tosu	equ	0xFFF
 16930                           tosh	equ	0xFFE
 16931                           tosl	equ	0xFFD
 16932                           pclatu	equ	0xFFB
 16933                           pclath	equ	0xFFA
 16934                           tblptru	equ	0xFF8
 16935                           tblptrh	equ	0xFF7
 16936                           tblptrl	equ	0xFF6
 16937                           tablat	equ	0xFF5
 16938                           prodh	equ	0xFF4
 16939                           prodl	equ	0xFF3
 16940                           intcon	equ	0xFF2
 16941                           intcon2	equ	0xFF1
 16942                           postinc0	equ	0xFEE
 16943                           fsr0h	equ	0xFEA
 16944                           fsr0l	equ	0xFE9
 16945                           wreg	equ	0xFE8
 16946                           indf1	equ	0xFE7
 16947                           postdec1	equ	0xFE5
 16948                           fsr1h	equ	0xFE2
 16949                           fsr1l	equ	0xFE1
 16950                           indf2	equ	0xFDF
 16951                           postinc2	equ	0xFDE
 16952                           postdec2	equ	0xFDD
 16953                           fsr2h	equ	0xFDA
 16954                           fsr2l	equ	0xFD9
 16955                           status	equ	0xFD8
 16956                           
 16957 ;; *************** function _EUSART1_Receive_ISR *****************
 16958 ;; Defined at:
 16959 ;;		line 202 in file "mcc_generated_files/eusart1.c"
 16960 ;; Parameters:    Size  Location     Type
 16961 ;;		None
 16962 ;; Auto vars:     Size  Location     Type
 16963 ;;		None
 16964 ;; Return value:  Size  Location     Type
 16965 ;;                  1    wreg      void 
 16966 ;; Registers used:
 16967 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16968 ;; Tracked objects:
 16969 ;;		On entry : 0/0
 16970 ;;		On exit  : 0/0
 16971 ;;		Unchanged: 0/0
 16972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16973 ;;      Params:         0       0       0       0       0       0       0
 16974 ;;      Locals:         0       0       0       0       0       0       0
 16975 ;;      Temps:          0       0       0       0       0       0       0
 16976 ;;      Totals:         0       0       0       0       0       0       0
 16977 ;;Total ram usage:        0 bytes
 16978 ;; Hardware stack levels used:    1
 16979 ;; This function calls:
 16980 ;;		Nothing
 16981 ;; This function is called by:
 16982 ;;		_INTERRUPT_InterruptManager
 16983 ;; This function uses a non-reentrant model
 16984 ;;
 16985                           
 16986                           	psect	text113
 16987  0033D0                     __ptext113:
 16988                           	opt stack 0
 16989  0033D0                     _EUSART1_Receive_ISR:
 16990                           	opt stack 22
 16991                           
 16992                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
 16993                           
 16994                           ; BSR set to: 0
 16995                           ;incstack = 0
 16996  0033D0  A2AB               	btfss	4011,1,c	;volatile
 16997  0033D2  D002               	goto	i2l833
 16998                           
 16999                           ;eusart1.c: 206: {
 17000                           ;eusart1.c: 208: RCSTA1bits.CREN = 0;
 17001  0033D4  98AB               	bcf	4011,4,c	;volatile
 17002                           
 17003                           ;eusart1.c: 209: RCSTA1bits.CREN = 1;
 17004  0033D6  88AB               	bsf	4011,4,c	;volatile
 17005  0033D8                     i2l833:
 17006                           
 17007                           ;eusart1.c: 210: }
 17008                           ;eusart1.c: 215: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 17009  0033D8  5038               	movf	_eusart1RxHead,w,c	;volatile
 17010  0033DA  0D01               	mullw	1
 17011  0033DC  0E46               	movlw	low _eusart1RxBuffer
 17012  0033DE  24F3               	addwf	prodl,w,c
 17013  0033E0  6ED9               	movwf	fsr2l,c
 17014  0033E2  0E01               	movlw	high _eusart1RxBuffer
 17015  0033E4  20F4               	addwfc	prodh,w,c
 17016  0033E6  6EDA               	movwf	fsr2h,c
 17017  0033E8  CFAE FFDF          	movff	4014,indf2	;volatile
 17018  0033EC  2A38               	incf	_eusart1RxHead,f,c	;volatile
 17019                           
 17020                           ;eusart1.c: 216: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 17021  0033EE  0E27               	movlw	39
 17022  0033F0  6438               	cpfsgt	_eusart1RxHead,c	;volatile
 17023  0033F2  D002               	goto	i2l834
 17024                           
 17025                           ;eusart1.c: 217: {
 17026                           ;eusart1.c: 218: eusart1RxHead = 0;
 17027  0033F4  0E00               	movlw	0
 17028  0033F6  6E38               	movwf	_eusart1RxHead,c	;volatile
 17029  0033F8                     i2l834:
 17030                           
 17031                           ;eusart1.c: 219: }
 17032                           ;eusart1.c: 220: eusart1RxCount++;
 17033  0033F8  0100               	movlb	0	; () banked
 17034  0033FA  2BD2               	incf	_eusart1RxCount& (0+255),f,b	;volatile
 17035                           
 17036                           ; BSR set to: 0
 17037  0033FC  0012               	return		;funcret
 17038  0033FE                     __end_of_EUSART1_Receive_ISR:
 17039                           	opt stack 0
 17040                           tosu	equ	0xFFF
 17041                           tosh	equ	0xFFE
 17042                           tosl	equ	0xFFD
 17043                           pclatu	equ	0xFFB
 17044                           pclath	equ	0xFFA
 17045                           tblptru	equ	0xFF8
 17046                           tblptrh	equ	0xFF7
 17047                           tblptrl	equ	0xFF6
 17048                           tablat	equ	0xFF5
 17049                           prodh	equ	0xFF4
 17050                           prodl	equ	0xFF3
 17051                           intcon	equ	0xFF2
 17052                           intcon2	equ	0xFF1
 17053                           postinc0	equ	0xFEE
 17054                           fsr0h	equ	0xFEA
 17055                           fsr0l	equ	0xFE9
 17056                           wreg	equ	0xFE8
 17057                           indf1	equ	0xFE7
 17058                           postdec1	equ	0xFE5
 17059                           fsr1h	equ	0xFE2
 17060                           fsr1l	equ	0xFE1
 17061                           indf2	equ	0xFDF
 17062                           postinc2	equ	0xFDE
 17063                           postdec2	equ	0xFDD
 17064                           fsr2h	equ	0xFDA
 17065                           fsr2l	equ	0xFD9
 17066                           status	equ	0xFD8
 17067                           tosu	equ	0xFFF
 17068                           tosh	equ	0xFFE
 17069                           tosl	equ	0xFFD
 17070                           pclatu	equ	0xFFB
 17071                           pclath	equ	0xFFA
 17072                           tblptru	equ	0xFF8
 17073                           tblptrh	equ	0xFF7
 17074                           tblptrl	equ	0xFF6
 17075                           tablat	equ	0xFF5
 17076                           prodh	equ	0xFF4
 17077                           prodl	equ	0xFF3
 17078                           intcon	equ	0xFF2
 17079                           intcon2	equ	0xFF1
 17080                           postinc0	equ	0xFEE
 17081                           fsr0h	equ	0xFEA
 17082                           fsr0l	equ	0xFE9
 17083                           wreg	equ	0xFE8
 17084                           indf1	equ	0xFE7
 17085                           postdec1	equ	0xFE5
 17086                           fsr1h	equ	0xFE2
 17087                           fsr1l	equ	0xFE1
 17088                           indf2	equ	0xFDF
 17089                           postinc2	equ	0xFDE
 17090                           postdec2	equ	0xFDD
 17091                           fsr2h	equ	0xFDA
 17092                           fsr2l	equ	0xFD9
 17093                           status	equ	0xFD8
 17094                           
 17095                           	psect	text114
 17096  000000                     __ptext114:
 17097                           	opt stack 0
 17098                           tosu	equ	0xFFF
 17099                           tosh	equ	0xFFE
 17100                           tosl	equ	0xFFD
 17101                           pclatu	equ	0xFFB
 17102                           pclath	equ	0xFFA
 17103                           tblptru	equ	0xFF8
 17104                           tblptrh	equ	0xFF7
 17105                           tblptrl	equ	0xFF6
 17106                           tablat	equ	0xFF5
 17107                           prodh	equ	0xFF4
 17108                           prodl	equ	0xFF3
 17109                           intcon	equ	0xFF2
 17110                           intcon2	equ	0xFF1
 17111                           postinc0	equ	0xFEE
 17112                           fsr0h	equ	0xFEA
 17113                           fsr0l	equ	0xFE9
 17114                           wreg	equ	0xFE8
 17115                           indf1	equ	0xFE7
 17116                           postdec1	equ	0xFE5
 17117                           fsr1h	equ	0xFE2
 17118                           fsr1l	equ	0xFE1
 17119                           indf2	equ	0xFDF
 17120                           postinc2	equ	0xFDE
 17121                           postdec2	equ	0xFDD
 17122                           fsr2h	equ	0xFDA
 17123                           fsr2l	equ	0xFD9
 17124                           status	equ	0xFD8
 17125                           
 17126                           	psect	rparam
 17127  0000                     tosu	equ	0xFFF
 17128                           tosh	equ	0xFFE
 17129                           tosl	equ	0xFFD
 17130                           pclatu	equ	0xFFB
 17131                           pclath	equ	0xFFA
 17132                           tblptru	equ	0xFF8
 17133                           tblptrh	equ	0xFF7
 17134                           tblptrl	equ	0xFF6
 17135                           tablat	equ	0xFF5
 17136                           prodh	equ	0xFF4
 17137                           prodl	equ	0xFF3
 17138                           intcon	equ	0xFF2
 17139                           intcon2	equ	0xFF1
 17140                           postinc0	equ	0xFEE
 17141                           fsr0h	equ	0xFEA
 17142                           fsr0l	equ	0xFE9
 17143                           wreg	equ	0xFE8
 17144                           indf1	equ	0xFE7
 17145                           postdec1	equ	0xFE5
 17146                           fsr1h	equ	0xFE2
 17147                           fsr1l	equ	0xFE1
 17148                           indf2	equ	0xFDF
 17149                           postinc2	equ	0xFDE
 17150                           postdec2	equ	0xFDD
 17151                           fsr2h	equ	0xFDA
 17152                           fsr2l	equ	0xFD9
 17153                           status	equ	0xFD8
 17154                           
 17155                           	psect	temp
 17156  000048                     btemp:
 17157                           	opt stack 0
 17158  000048                     	ds	1
 17159  0000                     int$flags	set	btemp
 17160  0000                     wtemp6	set	btemp+1
 17161                           tosu	equ	0xFFF
 17162                           tosh	equ	0xFFE
 17163                           tosl	equ	0xFFD
 17164                           pclatu	equ	0xFFB
 17165                           pclath	equ	0xFFA
 17166                           tblptru	equ	0xFF8
 17167                           tblptrh	equ	0xFF7
 17168                           tblptrl	equ	0xFF6
 17169                           tablat	equ	0xFF5
 17170                           prodh	equ	0xFF4
 17171                           prodl	equ	0xFF3
 17172                           intcon	equ	0xFF2
 17173                           intcon2	equ	0xFF1
 17174                           postinc0	equ	0xFEE
 17175                           fsr0h	equ	0xFEA
 17176                           fsr0l	equ	0xFE9
 17177                           wreg	equ	0xFE8
 17178                           indf1	equ	0xFE7
 17179                           postdec1	equ	0xFE5
 17180                           fsr1h	equ	0xFE2
 17181                           fsr1l	equ	0xFE1
 17182                           indf2	equ	0xFDF
 17183                           postinc2	equ	0xFDE
 17184                           postdec2	equ	0xFDD
 17185                           fsr2h	equ	0xFDA
 17186                           fsr2l	equ	0xFD9
 17187                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    116
    Data        20
    BSS         254
    Persistent  7
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     48      71
    BANK0           160     96     160
    BANK1           256     10     204
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    PLLUartInitialize@data	PTR unsigned char  size(2) Largest target is 0

    SetConversionResultFormat@data	PTR unsigned char  size(2) Largest target is 0

    SetAdcOperationMode@data	PTR unsigned char  size(2) Largest target is 0

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    strtol@endptr	PTR PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strtol@s	PTR const unsigned char  size(2) Largest target is 8
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), 

    memset@p1	PTR void  size(2) Largest target is 69
		 -> GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), GetIntFromUartData@dataRegArr(BANK0[8]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), 
		 -> rxMsgQueue(BANK0[20]), 

    memset@p	PTR unsigned char  size(2) Largest target is 69
		 -> GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), GetIntFromUartData@dataRegArr(BANK0[8]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), 
		 -> rxMsgQueue(BANK0[20]), 

    SetCpldFwVersion@data	PTR unsigned char  size(2) Largest target is 0

    SetMcuFwVersion@data	PTR unsigned char  size(2) Largest target is 0

    GetIntFromUartData@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    sp__memset	PTR void  size(2) Largest target is 69
		 -> GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), GetIntFromUartData@dataRegArr(BANK0[8]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), 
		 -> rxMsgQueue(BANK0[20]), 

    ZeroArray@array	PTR unsigned char  size(2) Largest target is 69
		 -> GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), GetIntFromUartData@dataRegArr(BANK0[8]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), 
		 -> rxMsgQueue(BANK0[20]), 

    crc8@dataArray	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgQueue(BANK0[20]), 

    GroupDAC@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    FLASH_WriteBlock@flashWrBufPtr	PTR unsigned char  size(2) Largest target is 128
		 -> FlashTest@buff(BANK0[128]), sampleArray(BANK1[64]), 

    UpdateRxFreq@data	PTR unsigned char  size(2) Largest target is 0

    UpdateTxFreq@data	PTR unsigned char  size(2) Largest target is 0

    DacSetValue@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    WriteUartMessage@dataBuf	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), SendAckMessage@TxMsg(COMRAM[6]), 

    SetChannelMode@data	PTR unsigned char  size(2) Largest target is 0

    groupsArray	PTR FTN()void [6] size(2) Largest target is 1
		 -> GroupDAC(), GroupFlashMemory(), GroupSynthesizers(), GroupAdc(), 
		 -> GroupStatusAndVersion(), GroupControlMcu(), 


Critical Paths under _main in COMRAM

    _InitRxMessageParams->_ZeroArray
    _GroupStatusAndVersion->_GetCpldFwVersion
    _SetMcuFwVersion->_SendAckMessage
    _SetCpldFwVersion->_SendAckMessage
    _EepromWrite->_DATAEE_WriteByte
    _GetMcuRunTime->___lldiv
    _GetMcuFwVersion->_ZeroArray
    _GetCpldFwVersion->_ZeroArray
    _EepromRead->_DATAEE_ReadByte
    _GroupFlashMemory->_FlashReadCondition
    _FlashReadUart->_SendAckMessage
    _FlashReadCondition->_ZeroArray
    _FlashEreaseMem->_SendAckMessage
    _GetIntFromUartData->_strtol
    _strtol->___lmul
    _isalpha->_isupper
    _testLeds->_SendAckMessage
    _ResetMcu->_SendAckMessage
    _ResetCpld->_SendAckMessage
    _SetConversionResultFormat->_SendAckMessage
    _SetChannelMode->_SendAckMessage
    _SetAdcOperationMode->_SendAckMessage
    _keepAliveSignalUart->_SendAckMessage
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _SetMcuRunTime->___llmod
    _SendSystemStartAck->_SendAckMessage
    _SendAckMessage->_ZeroArray
    _ZeroArray->_memset
    _WriteUartMessage->_EUSART1_Write
    _InitSystemApplicationManagers->_PLLInitialize
    _PLLInitialize->_SWSPI_send_word
    _DacInit->_SWSPI_send_word
    _SWSPI_send_word->_make8
    _SWSPI_send_bits->_SwSpi_Clk_Pin
    _SWSPI_send_bits->_SwSpi_Data_Pin
    _CheckFlashPrecentage->___ftdiv
    _log->_eval_poly
    _exp->_eval_poly
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftdiv
    ___ftmul->___ftdiv
    ___ftdiv->___lltoft
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lwtoft->___ftpack
    _FlashSampleWrite->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_ISR->___lwmod

Critical Paths under _main in BANK0

    _readUartMessage->_GroupAdc
    _readUartMessage->_GroupControlMcu
    _readUartMessage->_GroupDAC
    _readUartMessage->_GroupFlashMemory
    _readUartMessage->_GroupStatusAndVersion
    _readUartMessage->_GroupSynthesizers
    _UpdateTxFreq->_GetIntFromUartData
    _UpdateRxFreq->_GetIntFromUartData
    _GroupFlashMemory->_FlashReadUart
    _DacSetValue->_GetIntFromUartData
    _GetIntFromUartData->_strtol
    _CheckFlashPrecentage->___ftmul
    _AdcConvert->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___ftdiv
    ___ftsub->___ftadd
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_readUartMessage
    _readUartMessage->_GroupFlashMemory

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  296582
                         _AdcConvert
                     _BlinkErrorLeds
                        _BlinkOkLeds
               _CheckFlashPrecentage
      _InitSystemApplicationManagers
                 _SendSystemStartAck
                      _SetMcuRunTime
                       _SetMcuSystem
                 _keepAliveSignalLed
                _keepAliveSignalUart
                    _readUartMessage
 ---------------------------------------------------------------------------------
 (1) _readUartMessage                                      7     7      0  156921
                                              3 BANK1      7     7      0
                       _EUSART1_Read
                           _GroupAdc *
                    _GroupControlMcu *
                           _GroupDAC *
                   _GroupFlashMemory *
              _GroupStatusAndVersion *
                  _GroupSynthesizers *
                _InitRxMessageParams
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _InitRxMessageParams                                  0     0      0    2089
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupSynthesizers                                    3     1      2   36499
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                  _PLLUartInitialize
                       _UpdateRxFreq
                       _UpdateTxFreq
 ---------------------------------------------------------------------------------
 (3) _UpdateTxFreq                                         6     4      2   18082
                                             45 COMRAM     2     0      2
                                             21 BANK0      4     4      0
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _UpdateRxFreq                                         6     4      2   18082
                                             45 COMRAM     2     0      2
                                             21 BANK0      4     4      0
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _PLLUartInitialize                                    2     0      2     180
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _GroupStatusAndVersion                                3     1      2   29239
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                   _GetCpldFwVersion
                    _GetMcuFwVersion
                      _GetMcuRunTime
                   _SetCpldFwVersion
                    _SetMcuFwVersion
 ---------------------------------------------------------------------------------
 (3) _SetMcuFwVersion                                      3     1      2    7228
                                             43 COMRAM     3     1      2
                        _EepromWrite
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _SetCpldFwVersion                                     4     2      2    7228
                                             43 COMRAM     4     2      2
                        _EepromWrite
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (4) _EepromWrite                                          2     1      1     518
                                             26 COMRAM     2     1      1
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (5) _DATAEE_WriteByte                                     3     2      1     276
                                             23 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (3) _GetMcuRunTime                                       17    17      0    4138
                                             36 COMRAM     2     2      0
                                              0 BANK0     15    15      0
                   _WriteUartMessage
                            ___lldiv
                            ___llmod
                               _crc8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     421
                                             23 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _GetMcuFwVersion                                     12    12      0    5276
                                             35 COMRAM    12    12      0
                         _EepromRead
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (3) _GetCpldFwVersion                                    13    13      0    5276
                                             35 COMRAM    13    13      0
                         _EepromRead
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (4) _EepromRead                                           1     1      0      62
                                             24 COMRAM     1     1      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (5) _DATAEE_ReadByte                                      1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _GroupFlashMemory                                     4     2      2   27788
                                             95 BANK0      1     1      0
                                              0 BANK1      3     1      2
                     _FlashEreaseMem
                 _FlashReadCondition
                      _FlashReadUart
 ---------------------------------------------------------------------------------
 (3) _FlashReadUart                                       97    95      2   12928
                                             43 COMRAM     2     0      2
                                              0 BANK0     95    95      0
                  _FLASH_IsWriteDone
                     _FLASH_ReadByte
                     _SendAckMessage
                   _WriteUartMessage
                          _ZeroArray
                                _abs
                               _crc8
 ---------------------------------------------------------------------------------
 (4) _abs                                                  4     2      2     183
                                             23 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _FLASH_ReadByte                                       4     0      4     543
                                             23 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _FlashReadCondition                                  13    13      0    6250
                                             35 COMRAM    13    13      0
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (3) _FlashEreaseMem                                       0     0      0    8548
                     _SendAckMessage
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupDAC                                             3     1      2   18209
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                        _DacSetValue
 ---------------------------------------------------------------------------------
 (3) _DacSetValue                                          4     2      2   18082
                                             45 COMRAM     2     0      2
                                             21 BANK0      2     2      0
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (4) _GetIntFromUartData                                  15    11      4    5012
                                              6 BANK0     15    11      4
                          _ZeroArray
                             _strtol
 ---------------------------------------------------------------------------------
 (5) _strtol                                              16    10      6    2273
                                             35 COMRAM    10     4      6
                                              0 BANK0      6     6      0
                             ___lmul
                            _isalpha
                            _isdigit
                            _isspace
                            _toupper
 ---------------------------------------------------------------------------------
 (6) _toupper                                              1     1      0      96
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _isspace                                              3     3      0     130
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isalpha                                              3     3      0     229
                                             26 COMRAM     3     3      0
                            _isupper
 ---------------------------------------------------------------------------------
 (7) _isupper                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     456
                                             23 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) _GroupControlMcu                                      4     1      3   19476
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                          _ResetCpld
                           _ResetMcu
                           _testLeds
 ---------------------------------------------------------------------------------
 (3) _testLeds                                             3     3      0    6527
                                             43 COMRAM     3     3      0
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _ResetMcu                                             0     0      0    6459
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _ResetCpld                                            0     0      0    6459
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _GroupAdc                                             3     1      2   19833
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                _SetAdcOperationMode
                     _SetChannelMode
          _SetConversionResultFormat
 ---------------------------------------------------------------------------------
 (3) _SetConversionResultFormat                            2     0      2    6549
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _SetChannelMode                                       2     0      2    6611
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _SetAdcOperationMode                                  2     0      2    6549
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         3     3      0      68
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalUart                                  0     0      0    6459
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalLed                                   1     1      0       0
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SetMcuSystem                                         0     0      0      98
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0      98
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      2     2      0      98
                                             25 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _TMR0_SetInterruptHandler                             2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMcuRunTime                                        0     0      0     592
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     592
                                             23 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (1) _SendSystemStartAck                                   0     0      0    6459
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (4) _SendAckMessage                                       8     7      1    6459
                                             35 COMRAM     8     7      1
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _crc8                                                 9     5      4    1430
                                             23 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _ZeroArray                                            4     0      4    2089
                                             31 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     407
                                             23 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (5) _WriteUartMessage                                     7     3      4    1272
                                             24 COMRAM     7     3      4
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (6) _EUSART1_Write                                        1     1      0      62
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitSystemApplicationManagers                        0     0      0   13373
                    _ClearMcuRunTime
                            _DacInit
              _InitAdcApplicationMgr
                   _InitSevenSegment
                      _PLLInitialize
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PLLInitialize                                        6     6      0    6916
                                             41 COMRAM     6     6      0
                    _SWSPI_send_word
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (3) _SwSpi_Set_CE_Pin                                     2     1      1     262
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _InitSevenSegment                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitAdcApplicationMgr                                1     1      0       1
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _DacInit                                              0     0      0    6456
                    _SWSPI_send_word
 ---------------------------------------------------------------------------------
 (4) _SWSPI_send_word                                      9     4      5    6456
                                             32 COMRAM     9     4      5
                    _SWSPI_send_bits
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
                              _make8
 ---------------------------------------------------------------------------------
 (5) _make8                                                9     4      5    1055
                                             23 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Synth_Le_Pin                               2     1      1     335
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Dac_Sync_Pin                               1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _SWSPI_send_bits                                      3     2      1    1501
                                             25 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Data_Pin                                       2     1      1     487
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Clk_Pin                                        2     1      1     667
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _ClearMcuRunTime                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckFlashPrecentage                                 7     7      0   13919
                                             24 BANK0      7     7      0
                            ___ftdiv
                             ___ftge
                            ___ftmul
                           ___lltoft
 ---------------------------------------------------------------------------------
 (1) _BlinkOkLeds                                          6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _BlinkErrorLeds                                       6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _AdcConvert                                          12    12      0   98581
                                             81 BANK0     12    12      0
                  _ADC_GetConversion
                   _FlashSampleWrite
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 17    11      6   83041
                                             64 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  5     2      3   26919
                                             46 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                  9     6      3   44808
                                             55 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                                7     2      5     400
                                             46 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) _floor                                                8     5      3   11219
                                             47 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                7     2      5     528
                                             23 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             15    11      4     632
                                             24 BANK0     15    11      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     896
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (5) ___altoft                                            10     6      4    3367
                                             46 COMRAM     2     2      0
                                             39 BANK0      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           12     5      7   11976
                                             46 COMRAM     2     2      0
                                             36 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     563
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    5281
                                              9 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    5754
                                             36 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    5338
                                             24 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     273
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    4353
                                             40 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    3386
                                             31 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    3355
                                             31 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3284
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    3073
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _FlashSampleWrite                                     7     4      3    1631
                                             44 COMRAM     3     0      3
                                              0 BANK0      4     4      0
                  _FLASH_IsWriteDone
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_WriteBlock                                    16    10      6    1172
                                             28 COMRAM    16    10      6
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     5     1      4     217
                                             23 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) _FLASH_IsWriteDone                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      22
                                             23 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                          18    18      0     919
                                              5 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                         _MEMORY_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR0_ISR                                             0     0      0     919
                            ___lwmod
 ---------------------------------------------------------------------------------
 (10) ___lwmod                                             5     1      4     919
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (9) _PIN_MANAGER_IOC                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _MEMORY_ISR                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcConvert
     _ADC_GetConversion
     _FlashSampleWrite
       _FLASH_IsWriteDone
       _FLASH_WriteBlock
         _FLASH_EraseBlock
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _frexp
   _BlinkErrorLeds
   _BlinkOkLeds
   _CheckFlashPrecentage
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___lltoft
       ___ftpack
   _InitSystemApplicationManagers
     _ClearMcuRunTime
     _DacInit
       _SWSPI_send_word
         _SWSPI_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
     _InitAdcApplicationMgr
     _InitSevenSegment
     _PLLInitialize
       _SWSPI_send_word
         _SWSPI_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
       _SwSpi_Set_CE_Pin
     _TMR0_StartTimer
   _SendSystemStartAck
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _SetMcuRunTime
     ___llmod
   _SetMcuSystem
     _SYSTEM_Initialize
       _ADC_Initialize
       _EUSART1_Initialize
       _INTERRUPT_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
   _keepAliveSignalLed
   _keepAliveSignalUart
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _readUartMessage
     _EUSART1_Read
     _GroupAdc *
       _SetAdcOperationMode
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _SetChannelMode
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _SetConversionResultFormat
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupControlMcu *
       _ResetCpld
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _ResetMcu
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _testLeds
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupDAC *
       _DacSetValue
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupFlashMemory *
       _FlashEreaseMem
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _ZeroArray
           _memset
       _FlashReadCondition
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _FlashReadUart
         _FLASH_IsWriteDone
         _FLASH_ReadByte
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _abs
         _crc8
     _GroupStatusAndVersion *
       _GetCpldFwVersion
         _EepromRead
           _DATAEE_ReadByte
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
       _GetMcuFwVersion
         _EepromRead
           _DATAEE_ReadByte
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
       _GetMcuRunTime
         _WriteUartMessage
           _EUSART1_Write
         ___lldiv
         ___llmod
         _crc8
       _SetCpldFwVersion
         _EepromWrite
           _DATAEE_WriteByte
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _SetMcuFwVersion
         _EepromWrite
           _DATAEE_WriteByte
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupSynthesizers *
       _PLLUartInitialize
       _UpdateRxFreq
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _UpdateTxFreq
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _InitRxMessageParams *
       _ZeroArray
         _memset
     _ZeroArray *
       _memset
     _crc8 *

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _MEMORY_ISR
   _PIN_MANAGER_IOC
   _TMR0_ISR
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      A      CC       8       79.7%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0     60      A0       6      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     30      47       1       75.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1B3       3        0.0%
DATA                 0      0     1B3       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Feb 28 17:38:21 2018

             __size_of_SendSystemStartAck 000C                         ??_GetMcuFwVersion 0024  
              __end_of_keepAliveSignalLed 363E                              ___altoft@exp 002F  
                _eusart1TxBufferRemaining 00FF                        readUartMessage@idx 01C9  
                         _GroupControlMcu 309A               __end_of_keepAliveSignalUart 3728  
                           ___altoft@sign 0030                __size_of_FLASH_IsWriteDone 000E  
                                      l48 27FC                           _SWSPI_send_bits 2BA8  
                     __end_of_BlinkOkLeds 29DE                           _SWSPI_send_word 2318  
                     ___wmul@multiplicand 001A                           _timer0ReloadVal 0046  
                            __CFG_CP0$OFF 000000                              __CFG_CP1$OFF 000000  
                            __CFG_CP2$OFF 000000                              __CFG_CP3$OFF 000000  
                            ___ftadd@exp1 0083                              ___ftadd@exp2 0082  
                             __CFG_LVP$ON 000000                              ___ftadd@sign 0081  
                             ?_MEMORY_ISR 0001                                       l104 3394  
                                     l108 131C                                       l204 32F2  
                                     l300 08FE                                       l109 1242  
                                     l205 32DC                                       l301 0A22  
                                     l302 091A                                       l303 0932  
                                     l305 09B0                                       l307 0A06  
                                     l308 0A1C                                       l172 0E28  
                                     l181 0CAA                                       l173 0C6A  
                                     l191 0D6A                                       l183 0CC2  
                                     l192 0D26                                       l176 0C78  
                                     l185 0CDA                                       l177 0CA4  
                                     l282 088E                                       l290 087C  
                                     l194 0D90                                       l275 1A04  
                                     l603 2CEC                                       l283 07F2  
                                     l187 0CF8                                       l276 1A22  
                                     l604 2CB0                                       l292 082C  
                                     l196 0DC8                                       l621 2CD8  
                                     l613 2CC4                                       l605 2CBA  
                                     l285 073E                                       l189 0CFE  
                                     l622 2CE2                                       l614 2CCE  
                                     l294 083E                                       l198 0DCE  
                                     l551 2334                                       l287 074E  
                                     l640 313E                                       l641 3116  
                                     l297 08E6                                       l289 07BA  
                                     l562 23AE                                       l650 312A  
                                     l642 3120                                       l810 2F02  
                                     l555 2342                                       l651 3134  
                                     l661 317A                                       l821 30EA  
                                     l574 2C96                                       l566 2BE4  
                                     l662 3152                                       l558 23A0  
                                     l486 0A5E                                       l822 310E  
                                     l575 2C5A                                       l567 2BB0  
                                     l671 3166                                       l663 315C  
                                     l823 310C                                       l592 2C82  
                                     l584 2C6E                                       l576 2C64  
                                     l568 2BCA                                       l672 3170  
                                     l488 0B70                                       l808 2EDC  
                                     l921 20F8                                       l593 2C8C  
                                     l585 2C78                                       l569 2BD4  
                                     l922 20FA                                       l682 35E2  
                                     l683 35DA                                       l918 2120  
                                     l919 20D8                                       l687 35DE  
                                     l929 3254                              __CFG_CPB$OFF 000000  
                            __CFG_CPD$OFF 000000                      readUartMessage@chRec 01CB  
                        PLLInitialize@idx 002C                                       _abs 3452  
                                     _cnt 00FD                                       _exp 0E5E  
                                     _log 1706                                       _pow 158A  
                                     prod 000FF3                                       tosl 000FFD  
                                     wreg 000FE8                     ??_SetAdcOperationMode 002E  
          ?_InitSystemApplicationManagers 0001                __end_of_FlashReadCondition 1934  
                            ___ftdiv@cntr 0063                              ___ftdiv@sign 0068  
                                    l1031 33B8                                      l2001 11D8  
                                    l2002 1214                                      ?_abs 0018  
                                    l1230 2DB8                                      l2006 3678  
                                    l1142 30B2                                      l1143 30A0  
                                    l2113 1F88                                      l2041 0E78  
                                    l2105 1722                                      l1313 26A6  
                                    l1145 30A6                                      l1153 2B84  
                                    l2114 1F0A                                      l1146 30AC  
                                    l1154 2B56                                      l2043 0EB0  
                                    l2107 1742                                      l1251 2AD8  
                                    l1411 2C10                                      l1323 2480  
                                    l2052 1E26                                      l2044 0EE8  
                                    l1252 2A9A                                      l1412 2C24  
                                    l1244 22AC                                      l1308 3206  
                                    l1156 2B5C                                      l1164 2E24  
                                    l2061 24FC                                      l2053 1E18  
                                    l2045 0F18                                      l1229 2DD4  
                                    l1173 2A7A                                      l1157 2B6A  
                                    l1165 2DFA                                      l2070 2022  
                                    l2046 1042                                      l1254 2A9E  
                                    l1334 1D3E                                      l1318 2FEC  
                                    l1174 2A42                                      l1158 2B70  
                                    l2055 1E40                                      l2047 1018  
                                    l1255 2AA2                                      l1159 2B7E  
                                    l1167 2E08                                      l1183 2EB0  
                                    l2056 1EBC                                      l1256 2AA6  
                                    l1176 2A50                                      l1168 2E16  
                                    l1184 2E8A                                      l1192 3570  
                                    l2065 1FBA                                      l1257 2AD4  
                                    l1177 2A5E                                      l1193 3562  
                                    l1178 2A6C                                      l1186 2E90  
                                    l2067 2000                                      l2083 3592  
                                    l1187 2E96                                      l1700 1BAA  
                                    l1621 222C                                      l1701 1BBA  
                                    l2069 202E                                      l2093 35B0  
                                    l1622 2216                                      l2078 349A  
                                    l1390 2930                                      l1703 1BD2  
                                    l1391 2948                                      l1624 2254  
                                    l1704 1BE2                                      l1720 1AD4  
                                    l2088 34C0                                      l1625 224A  
                                    l1721 1AC4                                      l1449 3470  
                                    l1393 296E                                      l1618 21F8  
                                    l1714 302E                                      l1394 2962  
                                    l1619 21EE                                      l1708 352A  
                                    l1653 145A                                      l1726 1AF8  
                                    l1718 1A5C                                      l1663 14B6  
                                    l1727 1AEC                                      l1831 3418  
                                    l1672 14F4                                      l1664 14AC  
                                    l1488 2728                                      l1832 3408  
                                    l1673 14EA                                      l1649 1430  
                                    l1489 271C                                      l1729 1B14  
                                    l1682 1C46                                      l1658 14C0  
                                    l1690 2594                                      l1754 2622  
                                    l1675 1518                                      l1691 25C4  
                                    l1843 15D4                                      l1755 2616  
                                    l1684 1C6E                                      l1676 1534  
                                    l1844 15C4                                      l1764 28D6  
                                    l1685 1CAC                                      l1677 1564  
                                    l1765 28CA                                      l1686 1CD2  
                                    l1846 15EC                                      l1758 2656  
                                    l1775 2B06                                      l1599 319E  
                                    l1847 1672                                      l1759 2664  
                                    l1776 2AFA                                      l4328 25F0  
                                    l1848 1650                                      l1768 28FE  
                                    l1697 1B50                                      l1849 16F8  
                                    l1769 290C                                      l1699 1B78  
                                    l1982 1090                                      l1992 110C  
                                    l1984 10A8                                      l1993 111C  
                                    l1986 10FC                                      l1995 1136  
                                    l7124 27EC                                      l6430 3408  
                                    l1998 1148                                      l1999 11B4  
                                    l7138 2842                                      l7172 20D0  
                                    l7252 0922                                      ?_exp 0097  
                                    ?_log 008E                                      l7502 1018  
                                    l6374 30D8                                      l7262 0982  
                                    l7342 269E                                      l7414 1D2E  
                                    l5920 298A                                      l7248 08FE  
                                    l7408 300A                                      l7426 1DBA  
                                    l5908 29E8                                      l7382 2470  
                                    l7358 31FE                                      l7624 0B60  
                                    l7608 0A4E                                      l7392 24A8  
                                    l6914 234E                                      l7634 0BB8  
                                    l7618 0AA6                                      l6940 229C  
                                    l7718 123A                                      l6918 235C  
                                    l7398 2FDC                                      l6958 22EA  
                                    ?_pow 00A0                        EepromWrite@address 001C  
                                    _IOCB 000F62                                      _LATA 000F89  
                                    _LATB 000F8A                                      _LATC 000F8B  
                                    _LATD 000F8C                                      _LATE 000F8D  
                                    u6000 348C                                      u5130 3630  
                                    u4270 1FDA                                      u7000 20FE  
                                    u6105 3262                                      u6106 3264  
                                    u5148 3632                                      u6220 10D2  
                                    u3821 1A40                                      u3910 2524  
                                    u4278 1FDE                                      u7015 211C  
                                    u7016 211E                                      u3840 1A7A  
                                    u6080 2ACC                                      u6240 10E2  
                                    u7200 09A0                                      u7105 07C4  
                                    u6410 144C                                      u7050 06EA  
                                    u7060 06EC                                      u7300 24A8  
                                    u6341 13EE                                      u3845 1A72  
                                    u6085 2AC2                                      u7125 0850  
                                    u6510 14FC                                      u3918 2526  
                                    u6190 1098                                      u6351 1402  
                                    u8007 29CA                                      u6440 148A  
                                    u3880 1AFE                                      u7160 08D4  
                                    u7320 300A                                      u8017 2A0E  
                                    u6610 36F4                                      u7410 0EF2  
                                    u6611 36F0                                      u8027 2A28  
                                    u6380 1422                                      u7420 0EF4  
                                    u7500 163A                                      u6700 2394  
                                    u7260 26CC                                      u7340 1DBA  
                                    u8037 1308                                      u7190 0982  
                                    u6551 1B38                                      u6480 14C8  
                                    u7280 3224                                      u7530 1990  
                                    u5930 225E                                      u6650 2328  
                                    u7610 0AA6                                      u6571 1B60  
                                    u6740 22EA                                      u7525 193E  
                                    u7550 19D4                                      u6910 1E32  
                                    u7630 0BB8                                      u7800 21CC  
                                    u6680 2388                                      u6840 2626  
                                    u6761 1C2E                                      u5890 21E0  
                                    u6755 336C                                      u6756 336E  
                                    u5980 34BC                                      u6781 1C56  
                                    u6870 28DA                                      u6950 2842  
                                    u7957 2804                                      u7798 0E00  
                                    u7967 2814                                      u7799 0E20  
                                    u7977 2824                                      u7987 2834  
                                    u7997 29B0                  ??_SwSpi_Set_Synth_Le_Pin 0019  
                                    _WPUB 000F61                             _EUSART1_Write 30D6  
                                    abs@a 0018                                      _crc8 2DA6  
                 ??_InitAdcApplicationMgr 0018                                      _data 00CD  
                                    _main 291E                              ___ftpack@arg 0018  
                           ?_EUSART1_Read 0001                              ___ftpack@exp 001B  
                         _TMR0_StartTimer 375A                           __end_of_DacInit 28B8  
                                    fsr0h 000FEA                                      fsr1h 000FE2  
                                    fsr2h 000FDA                                      fsr0l 000FE9  
                                    indf1 000FE7                                      indf2 000FDF  
                                    fsr1l 000FE1                                      fsr2l 000FD9  
                                    btemp 0048                             __CFG_BORV$190 000000  
                                    exp@x 0097                                      log@x 008E  
                       ?_FLASH_WriteBlock 001D                          ?_ClearMcuRunTime 0001  
                                    pow@x 00A0                                      pow@y 00A3  
                                    prodh 000FF4                                      prodl 000FF3  
               GroupStatusAndVersion@data 01C2             __size_of_CheckFlashPrecentage 00AE  
                                    start 00DC                             __CFG_IESO$OFF 000000  
                     __end_of_EepromWrite 36C0                        ??_FLASH_WriteBlock 0023  
                           _adcSampleMode 003C                              ___ftmul@cntr 0076  
                            ___param_bank 000000                              ___ftmul@sign 0077  
                          _BlinkErrorLeds 29DE                              ___fttol@exp1 0086  
                                   ??_abs 001A                 __size_of_DATAEE_WriteByte 0036  
                                   ??_exp 0031                                     ??_log 0031  
                            ___fttol@lval 0082                                     ??_pow 0031  
                 __end_of_TMR0_Initialize 333C            __size_of_OSCILLATOR_Initialize 000E  
           __end_of_OSCILLATOR_Initialize 36DC                                     ?_crc8 0018  
                                   ?_main 0001                                     _EEADR 000FA9  
                         __end_of___ftadd 158A           __size_of_SwSpi_Set_Dac_Sync_Pin 001C  
                         __end_of___ftdiv 1D04                           __end_of___ftneg 3538  
                         __end_of___lldiv 2676                                _EepromRead 3734  
                         __end_of___ftmul 1C1C                                     _T0CON 000FD5  
                         __end_of___llmod 291E                           __end_of___ftsub 3058  
                         __end_of___fttol 1B26                            __CFG_DEBUG$OFF 000000  
                         __end_of___lwmod 309A                                     i2l833 33D8  
                                   i2l761 007A                                     i2l834 33F8  
                                   i2l827 31EE                                     i2l763 0086  
                                   i2l828 31EA                                     i2l756 005E  
                                   i2l765 0090                                     i2l758 006A  
                                   i2l987 23E2                                     i2l988 2404  
                                   i2l989 2426                                     _TMR0H 000FD7  
                                   _TMR0L 000FD6                                     _PORTD 000F83  
                                   _TRISA 000F92                                     _TRISB 000F93  
                                   _TRISC 000F94                                     _TRISD 000F95  
                                   _TRISE 000F96         __size_of_TMR0_SetInterruptHandler 000A  
                           __CFG_WRT0$OFF 000000                             __CFG_WRT1$OFF 000000  
              __end_of_GetIntFromUartData 2318                             __CFG_WRT2$OFF 000000  
                     ___lmul@multiplicand 001C                 ?_TMR0_SetInterruptHandler 0018  
                           __CFG_WRT3$OFF 000000                              ___lltoft@exp 0028  
                    _EUSART1_Transmit_ISR 31C2                            __CFG_EBTR0$OFF 000000  
                          __CFG_FCMEN$OFF 000000                            __CFG_EBTR1$OFF 000000  
                          __CFG_EBTR2$OFF 000000                            __CFG_EBTR3$OFF 000000  
                       ?_WriteUartMessage 0019                          __end_of_TMR0_ISR 2444  
                           __CFG_WRTB$OFF 000000                  __size_of_SetMcuFwVersion 0036  
                           __CFG_WRTC$OFF 000000                             __CFG_WRTD$OFF 000000  
                         DacSetValue@data 002E                           _DATAEE_ReadByte 3654  
                          __CFG_EBTRB$OFF 000000                             ___awtoft@sign 0023  
                 __end_of_PIN_MANAGER_IOC 3762                                     crc8@i 001F  
                                   _make8 2A98                     __end_of_GetMcuRunTime 1DE8  
                                   _count 00C8                                     _floor 1DE8  
                                   _ldexp 1FA0                                     _frexp 24D4  
                                   _errno 00C4                           __end_of_isalpha 34A2  
                         __end_of_isdigit 359A                                     _group 00D0  
                      ??_WriteUartMessage 001D                        __CFG_MCLRE$EXTMCLR 000000  
                           ___ftpack@sign 001C                   ??_GroupStatusAndVersion 0031  
                         __end_of_isspace 34C8                            ?_EUSART1_Write 0001  
                             ?_AdcConvert 0001                           __end_of_isupper 35B8  
                                   pclath 000FFA                                     tablat 000FF5  
                                   pow@yi 00AD                            ??_EUSART1_Read 0018  
                                   status 000FD8                                     wtemp6 0049  
                          __CFG_HFOFST$ON 000000                           __end_of_toupper 367C  
          SwSpi_Set_Synth_Le_Pin@cPinMode 0018                   __end_of_GroupControlMcu 30D6  
                     __size_of_MEMORY_ISR 0004                            __CFG_PBADEN$ON 000000  
      __size_of_SetConversionResultFormat 000C                               exp@exponent 009D  
          CheckFlashPrecentage@precentage 007C                    __end_of_BlinkErrorLeds 2A3C  
                 __end_of_SWSPI_send_bits 2C00                               ldexp@newexp 0091  
                 __end_of_SWSPI_send_word 23B2                               _BlinkOkLeds 2980  
                 WriteUartMessage@dataBuf 0019                           __initialization 2772  
                             log@exponent 0091                              __end_of_crc8 2DF4  
              __end_of_EUSART1_Initialize 32D2                              __end_of_main 2980  
                 FLASH_ReadByte@flashAddr 0018               ?_INTERRUPT_InterruptManager 0001  
                        __end_of_GroupDAC 357C                           _readUartMessage 0C62  
                        __end_of_GroupAdc 2E3C                                    ??_crc8 001C  
                                  ??_main 0031                             ___fttol@sign1 0081  
                       ?_SwSpi_Set_CE_Pin 0018                        _TimerKeepAliveFlag 00D4  
                           __activetblptr 000002                   __size_of_FLASH_ReadByte 0012  
                        __end_of_ResetMcu 36CE                       SetMcuFwVersion@data 002C  
                  SWSPI_send_bits@phrType 001C                              _writeAddress 0042  
                      ??_SwSpi_Set_CE_Pin 0019                     ?_EUSART1_Transmit_ISR 0001  
                 __end_of_TMR0_StartTimer 375E                                    ?_make8 0018  
                                  _ADCON0 000FC2                                    _ADCON1 000FC1  
                                  _ADCON2 000FC0                                    ?_floor 008F  
               FLASH_WriteBlock@writeAddr 001D                                    ?_ldexp 008E  
                                  ?_frexp 0018                          __end_of___altoft 2772  
                        ___llmod@dividend 0018                                    _ADRESH 000FC4  
                                  _ADRESL 000FC3                                    _EEDATA 000FA8  
                               ??_DacInit 002A                                    _EECON2 000FA7  
                        __end_of___awtoft 31C2                                    _ANSELA 000F38  
                                  _ANSELB 000F39                                    _ANSELC 000F3A  
                                  _ANSELD 000F3B                                    _ANSELE 000F3C  
                        __end_of___ftpack 227E                          __end_of___lltoft 2B50  
                       _FlashReadUart$561 00B1                         _FlashReadUart$562 00B5  
                       ?_FlashSampleWrite 002D                                    i2l1821 3086  
                                  i2l1822 3090                            __CFG_WDTEN$OFF 000000  
                                  i2l1817 306E                                    i2l1818 3066  
                                  _TABLAT 000FF5                               _EepromWrite 36B2  
                                  _RCREG1 000FAE                          __end_of___lwtoft 355C  
                 __size_of_FlashEreaseMem 0052                 __size_of_FLASH_EraseBlock 0034  
                                  _RCSTA1 000FAB           __size_of_SwSpi_Set_Synth_Le_Pin 003C  
                                  _OSCCON 000FD3                                    _SPBRG1 000FAF  
                  _SwSpi_Set_Dac_Sync_Pin 35D6                   __size_of_SwSpi_Data_Pin 0056  
                GroupSynthesizers@request 00BF                        ??_FlashSampleWrite 0060  
                                  _TXREG1 000FAD                                    _TXSTA1 000FAC  
                __end_of_GroupFlashMemory 2EC8                           ?_BlinkErrorLeds 0001  
                        _GetCpldFwVersion 2444                            __CFG_XINST$OFF 000000  
                       ?_SetCpldFwVersion 002C                                    _cState 00D1  
                                  ___ftge 2564                                    ___lmul 2C00  
                                  ___wmul 34EE                       UpdateRxFreq@regData 0075  
                               ??___ftadd 007E                            __CFG_STVREN$ON 000000  
                               ??___ftdiv 0060                                 ??___ftneg 001B  
                       ?_InitSevenSegment 0001                                 ??___lldiv 0020  
                               ??___ftmul 006F                     __end_of_PLLInitialize 0C62  
                               ??___llmod 0020                                 ??___ftsub 002F  
                               ??___fttol 007C                        ??_SetCpldFwVersion 002E  
                               ??___lwmod 0005            SwSpi_Set_Dac_Sync_Pin@cPinMode 0018  
                      __size_of_ResetCpld 000C                          ?_TMR0_Initialize 0001  
                                  _memset 33FE                                    clear_0 27B8  
                                  clear_1 27C4                                    clear_2 27D0  
                      ??_InitSevenSegment 0018                       __size_of_AdcConvert 01B6  
                 __end_of_DATAEE_ReadByte 3668                               ?_EepromRead 0001  
                                  _strtol 1050                                    floor@i 0092  
                   __end_of_SwSpi_Clk_Pin 2D02                                    floor@x 008F  
                   ___ftmul@f3_as_product 0073                FlashSampleWrite@channelNum 002F  
                            __pdataCOMRAM 0042                                 ??_isalpha 001B  
                               ??_isdigit 0018                     __end_of_FlashReadUart 0A38  
                        __end_of_testLeds 284E                             ?_SetMcuSystem 0001  
                            __mediumconst 0000                                 ??_isspace 0018  
                                  tblptrh 000FF7                                 ??_isupper 0018  
                                  tblptrl 000FF6                                    tblptru 000FF8  
                ADC_GetConversion@channel 001C                           ??_EUSART1_Write 0018  
TMR0_SetInterruptHandler@InterruptHandler 0018              __size_of_InitRxMessageParams 0028  
                        ?_PIN_MANAGER_IOC 0001                           _eusart1RxBuffer 0146  
                               ??_toupper 0018                        __size_of_ZeroArray 001E  
           __size_of_INTERRUPT_Initialize 0004                           _eusart1TxBuffer 0100  
                         _GetMcuFwVersion 2676                          __end_ofexp@coeff 065A  
                       _SYSTEM_Initialize 35F2                          __end_oflog@coeff 0675  
                              __accesstop 0060                   __end_of__initialization 27D6  
                              ___altoft@c 0087                             ZeroArray@size 0022  
                       ??_SetMcuFwVersion 002E                                ___ftadd@f1 0078  
                              ___ftadd@f2 007B                                ___ftge@ff1 0018  
                              ___ftge@ff2 001B                        ?_SYSTEM_Initialize 0001  
                            eval_poly@res 008B                             ___rparam_used 000001  
                              ___ftdiv@f1 0029                                ___ftdiv@f2 002C  
                              ___ftdiv@f3 0064                          ?_GroupControlMcu 01C2  
            GroupStatusAndVersion@request 00BF                                ___ftneg@f1 0018  
                              ___awtoft@c 0020                          ?_SWSPI_send_bits 001A  
                 __end_of_readUartMessage 0E5E                  WriteUartMessage@dataSize 001B  
                              ___ftmul@f1 0069                                ___ftmul@f2 006C  
                        ?_SWSPI_send_word 0021                              ?_DacSetValue 002E  
                              ___ftsub@f1 0084                                ___ftsub@f2 0087  
                              ___fttol@f1 0078                            __pcstackCOMRAM 0001  
                            __pidataBANK0 36A2                       ??_SYSTEM_Initialize 001C  
                               ?_TMR0_ISR 0001                                ___lltoft@c 0020  
                           __end_of_make8 2AF4                          _DATAEE_WriteByte 3230  
                           __end_of_floor 1ECA                             __end_of_ldexp 2066  
                           __end_of_frexp 2564                    _SwSpi_Set_Synth_Le_Pin 314E  
                    GroupFlashMemory@data 01C2                                ___lwtoft@c 0020  
                    __end_of_EUSART1_Read 2F0C                              ??_MEMORY_ISR 0001  
                    SWSPI_send_bits@count 001B                    __size_of_SetMcuRunTime 0044  
                  ??_EUSART1_Transmit_ISR 0001                            ??_SetMcuSystem 001C  
                   TMR0_ISR@CountCallBack 0035             SwSpi_Set_Synth_Le_Pin@phrType 0019  
                 GroupFlashMemory@request 01C4                        _keepAliveSignalLed 3626  
                       make8@dataLocation 001C               __end_of_EUSART1_Receive_ISR 33FE  
             FLASH_WriteBlock@GIEBitValue 002B                              GroupDAC@data 01C2  
                                 ??_make8 001D                                   ??_floor 0031  
                        ?_TMR0_StartTimer 0001                                   ??_ldexp 0093  
                                 ??_frexp 001D                           _AdcConvert$3254 00B7  
               __end_of_SYSTEM_Initialize 360C                             _eusart1RxHead 0038  
                    GetMcuFwVersion@TxMsg 0026                             _eusart1TxHead 003A  
                           _eusart1RxTail 0037                                __pbssBANK0 00C0  
                              __pbssBANK1 0100                             _eusart1TxTail 0039  
                     ?_keepAliveSignalLed 0001                        __size_of_eval_poly 00D6  
                       __end_of_ResetCpld 3704                           __CFG_PLLCFG$OFF 000000  
                              _channelArr 0635                                 ?_GroupDAC 01C2  
                              __pnvCOMRAM 0046                                 ?_GroupAdc 01C2  
          __size_of_InitAdcApplicationMgr 000E                __end_of_SendSystemStartAck 3734  
           __end_of_InitAdcApplicationMgr 36EA                       __size_of_EepromRead 000A  
                      __end_of_MEMORY_ISR 3766                                 ?_ResetMcu 0001  
                      _FlashReadCondition 1828           ??_InitSystemApplicationManagers 0030  
                      __CFG_CCP2MX$PORTC1 000000                                   ?___ftge 0018  
                          FlashReadUart@j 00B9          __end_of_TMR0_SetInterruptHandler 3752  
                                 ?___lmul 0018                                   ?___wmul 0018  
                              ??_TMR0_ISR 0006                        __CFG_CCP3MX$PORTB5 000000  
                      SetChannelMode@data 002C                      ??_keepAliveSignalLed 0018  
                       __end_of_ZeroArray 35D6                                 ?___altoft 0087  
                                 ?_memset 0018                            ___lmul@product 0020  
                     ?_FlashReadCondition 0001                                 ?___awtoft 0020  
                               ?___ftpack 0018                              GroupAdc@data 01C2  
                        FlashReadUart@idx 00BB                                 ?___lltoft 0020  
               __size_of_FLASH_WriteBlock 00BC                   __size_of_ADC_Initialize 0016  
             __end_of_SetAdcOperationMode 371C                FlashSampleWrite@sampleData 002D  
                          _FLASH_ReadByte 3690                                 ?___lwtoft 0020  
            __end_of_CheckFlashPrecentage 21D0                                   ?_strtol 0024  
                        ?_DATAEE_ReadByte 0001              __size_of_keepAliveSignalUart 000C  
                 __end_of_GetMcuFwVersion 26F8                                   _OSCCON2 000FD2  
                                 _TBLPTRH 000FF7                                   _TBLPTRL 000FF6  
                                 _TBLPTRU 000FF8                                   _OSCTUNE 000F9B  
                                 _SPBRGH1 000FB0                                   _DacInit 284E  
                   GetIntFromUartData@idx 0073                          GetMcuRunTime@idx 006D  
                            ??_AdcConvert 00B1                      ??_FlashReadCondition 0024  
                          _FlashEreaseMem 2D02                          _FLASH_EraseBlock 333C  
          __size_of_GroupStatusAndVersion 0058                            _SwSpi_Data_Pin 2C56  
                    DATAEE_WriteByte@bAdd 0019             __end_of_GroupStatusAndVersion 2BA8  
                              ??_GroupDAC 0031                                ??_GroupAdc 0031  
                           _SetMcuRunTime 2F0C                        _GetIntFromUartData 227E  
                         __CFG_PWRTEN$OFF 000000                        FlashReadUart@TxMsg 006C  
                   GroupSynthesizers@data 01C2                                   __Hparam 0000  
                              ??_ResetMcu 002C                 __size_of_WriteUartMessage 0036  
                            ?_BlinkOkLeds 0001                                   __Lparam 0000  
                        UpdateRxFreq@data 002E                     SendAckMessage@inGroup 0025  
                        ?_readUartMessage 0001                    GroupControlMcu@request 00BF  
                               ?_testLeds 0001                      PLLInitialize@idx_805 002E  
                     ?_GetIntFromUartData 0066                           __size_of___ftge 0090  
                         __size_of___lmul 0056                                   ___ftadd 13DC  
                                 ___ftdiv 1C1C                                   ___ftneg 3514  
                                 ___lldiv 25F4                           __size_of___wmul 0026  
                                 ___ftmul 1B26                                   ___llmod 28B8  
                                 ___ftsub 3016                                   ___fttol 1A2E  
              FlashSampleWrite@rotateLeft 0062                              crc8@dataSize 001A  
                __size_of_ClearMcuRunTime 0014                                   ___lwmod 3058  
                    AdcConvert@_adcResult 00B3                              __psmallconst 0600  
                              ??___altoft 008B                    __end_of_FLASH_ReadByte 36A2  
                   _mcuRunTimeIn5SecTicks 00C0                                   _crcCalc 00CC  
                                 _channel 00D3                                   __pcinit 2772  
                              ??___awtoft 0023                                ??___ftpack 001D  
                       __end_of_eval_poly 1FA0                           __size_of_memset 002C  
                                 __ramtop 0600                   __size_of_SendAckMessage 0052  
                              ??___lltoft 0024                   __size_of_SetChannelMode 0030  
                                 __ptext0 291E                                   __ptext1 0C62  
                                 __ptext2 342A                                   __ptext3 355C  
                                 __ptext4 2E84                                   __ptext5 2DF4  
                                 __ptext6 2B50                                   __ptext7 309A  
                                 __ptext8 2A3C                                   __ptext9 2F50  
                                 crc8@crc 001D                        __end_of_AdcConvert 13DC  
                              ??___lwtoft 0023                                 _T0CONbits 000FD5  
                       BlinkErrorLeds@idx 001C                           __size_of_strtol 01D6  
                   _OSCILLATOR_Initialize 36CE                              __size_of_abs 0028  
                                 _isalpha 347A                              __size_of_exp 01F2  
                            __size_of_log 0122                                   _isdigit 357C  
                            __size_of_pow 017C                        _EUSART1_Initialize 329C  
                ??_PIN_MANAGER_Initialize 0018                                   _isspace 34A2  
                __end_of_GetCpldFwVersion 24D4                                   _isupper 359A  
                        UpdateTxFreq@data 002E                                   _request 00CF  
                         GroupDAC@request 00BF                      ??_GetIntFromUartData 002E  
                  __end_of_FlashEreaseMem 2D54                __size_of_SYSTEM_Initialize 001A  
                 ?_SwSpi_Set_Dac_Sync_Pin 0001                    __end_of_SwSpi_Data_Pin 2CAC  
                                 _toupper 3668                      end_of_initialization 27D6  
                     GetCpldFwVersion@idx 002F                             ?_UpdateRxFreq 002E  
                                 exp@sign 009F                             ?_UpdateTxFreq 002E  
                     ?_EUSART1_Initialize 0001                          ??_BlinkErrorLeds 0018  
                            ?_EepromWrite 001B                       SetCpldFwVersion@idx 002E  
               __size_of_SwSpi_Set_CE_Pin 003C                            ?_SetMcuRunTime 0001  
                                 memset@c 001A                                   memset@n 001C  
                                 memset@p 001E                             __Lmediumconst 0000  
                         ___lldiv@divisor 001C                      __end_of_SetMcuSystem 3748  
                                 pow@sign 00AC                           ___lldiv@counter 0024  
                       ?_GroupFlashMemory 01C2                          AdcConvert@adcRes 00BA  
                              ??_testLeds 002C                      SWSPI_send_word@datac 0026  
                              _rxMsgQueue 00D7                                   postdec1 000FE5  
                                 postdec2 000FDD                        ??_GroupFlashMemory 00BF  
              __end_of_PLL_INIT_REGISTERS 0635                                   postinc0 000FEE  
                                 postinc2 000FDE                     __size_of_EUSART1_Read 0044  
                     _InitRxMessageParams 342A                               testLeds@idx 002D  
                    __size_of_DacSetValue 0036                 __size_of_FlashSampleWrite 00FA  
                  __size_of_GetMcuRunTime 00E4                       UpdateTxFreq@regData 0075  
                    ??_EUSART1_Initialize 0018     __end_of_InitSystemApplicationManagers 3626  
  __size_of_InitSystemApplicationManagers 001A             _InitSystemApplicationManagers 360C  
                         ?_FLASH_ReadByte 0018                                   strtol@a 0061  
                                 strtol@c 0065                                   strtol@s 0024  
                _TMR0_SetInterruptHandler 3748                              ??_EepromRead 0019  
                         _SetMcuFwVersion 31FA                          ?_GetMcuFwVersion 0001  
               __size_of_SetCpldFwVersion 0042                            ZeroArray@array 0020  
          __end_of_SwSpi_Set_Dac_Sync_Pin 35F2                              strtol@endptr 0026  
           FLASH_WriteBlock@flashWrBufPtr 0021                 __size_of_InitSevenSegment 0026  
                      GetMcuRunTime@TxMsg 0060                      ?_InitRxMessageParams 0001  
                         ?_FlashEreaseMem 0001                       EUSART1_Write@txData 0018  
                         ?_SwSpi_Data_Pin 0018                            ??_UpdateRxFreq 0030  
                          ??_UpdateTxFreq 0030                  __end_of_DATAEE_WriteByte 3266  
                FLASH_EraseBlock@baseAddr 0018                               ___ftdiv@exp 0067  
                            _EUSART1_Read 2EC8                      _CheckFlashPrecentage 2122  
                       FLASH_WriteBlock@i 002C                        __end_of_EepromRead 373E  
                             ___ftmul@exp 0072                   ?_SwSpi_Set_Synth_Le_Pin 0018  
                   PLLUartInitialize@data 0018                ?_SetConversionResultFormat 002C  
            __end_of_INTERRUPT_Initialize 375A                            __end_of___ftge 25F4  
            InitAdcApplicationMgr@channel 0018                            __end_of___lmul 2C56  
                          __end_of___wmul 3514                       GroupControlMcu@data 01C2  
                           __pidataCOMRAM 3752                         __size_of_TMR0_ISR 0092  
                          _ADC_Initialize 363E                          _FLASH_WriteBlock 2066  
                  ?_OSCILLATOR_Initialize 0001                            __end_of_memset 342A  
                              floor@expon 0095                         ??_ClearMcuRunTime 0018  
                          __end_of_strtol 1226                       start_initialization 2772  
                              eval_poly@d 0087                                eval_poly@n 0089  
                              eval_poly@x 0084                          BlinkOkLeds@state 001B  
                __size_of_TMR0_Initialize 0034                                ldexp@value 008E  
         __size_of_PIN_MANAGER_Initialize 0048                               __end_of_abs 347A  
                   ??_InitRxMessageParams 0024                               __end_of_exp 1050  
                             __end_of_log 1828                               __end_of_pow 1706  
                AdcConvert@_adcResult_330 00B5                             _GetMcuRunTime 1D04  
                         ??_SetMcuRunTime 0021                     __end_of_EUSART1_Write 3112  
                      GetMcuFwVersion@idx 002F                        SetMcuFwVersion@idx 002E  
                  __size_of_PLLInitialize 022A                                frexp@value 0018  
                         ___llmod@divisor 001C                     ?_CheckFlashPrecentage 0001  
                         ___llmod@counter 0020                       DATAEE_ReadByte@bAdd 0018  
                __size_of_PIN_MANAGER_IOC 0004                                 _ResetCpld 36F8  
                  __size_of_SwSpi_Clk_Pin 0056                       SendAckMessage@TxMsg 0026  
          __end_of_SwSpi_Set_Synth_Le_Pin 318A                       _keepAliveSignalUart 371C  
                       __size_of_GroupDAC 0020                          _WriteUartMessage 32D2  
                       __size_of_GroupAdc 0048                    __size_of_FlashReadUart 03C2  
                                ??___ftge 001E                                  ??___lmul 0020  
                 SendAckMessage@inRequest 0024                                  ??___wmul 001C  
                       __size_of_ResetMcu 000E                      __size_of_BlinkOkLeds 005E  
                 SetAdcOperationMode@data 002C                    __end_of_ADC_Initialize 3654  
       __end_of_SetConversionResultFormat 3710                               __pdataBANK0 00EB  
                 __end_of_SetMcuFwVersion 3230                                  ??_memset 001E  
                __size_of_GroupControlMcu 003C               FLASH_EraseBlock@GIEBitValue 001C  
                          _SendAckMessage 2D54                            _SetChannelMode 3370  
                __end_of_FLASH_EraseBlock 3370                  __size_of_SWSPI_send_bits 0058  
                      _SendSystemStartAck 3728                  __size_of_SWSPI_send_word 009A  
                                ??_strtol 002A                            _eusart1RxCount 00D2  
                       __size_of___altoft 007A                                 _ZeroArray 35B8  
                       __size_of___awtoft 0038                         __size_of___ftpack 00AE  
                    ?_keepAliveSignalUart 0001                         __size_of___lltoft 005C  
                             __pbssCOMRAM 0031                         __size_of___lwtoft 0024  
           __size_of_EUSART1_Transmit_ISR 0038                             __pcstackBANK0 0060  
                           __pcstackBANK1 01C2                       ?_SendSystemStartAck 0001  
                            _isalpha$2961 001C                              _isdigit$2964 0019  
                          ?_GetMcuRunTime 0001                            BlinkOkLeds@idx 001C  
                                ?_DacInit 0001                       SWSPI_send_bits@data 001A  
                   __size_of_SetMcuSystem 000A                          _SwSpi_Set_CE_Pin 3112  
            __size_of_EUSART1_Receive_ISR 002E                      __size_of_EepromWrite 000E  
                   _TMR0_InterruptHandler 00FB                                 __pnvBANK0 00FB  
                __size_of_TMR0_StartTimer 0004                                ?_ResetCpld 0001  
                  _PIN_MANAGER_Initialize 2E3C                      ??_SendSystemStartAck 002C  
                   _InitAdcApplicationMgr 36DC                                 __pintcode 0008  
                  __end_of_SendAckMessage 2DA6                                 __ptext100 3538  
                               __ptext101 21D0                                 __ptext110 375E  
                               __ptext102 1934                                 __ptext111 3762  
                               __ptext103 2066                                 __ptext112 31C2  
                               __ptext104 333C                                 __ptext113 33D0  
                               __ptext105 36EA                                 __ptext114 0000  
                               __ptext106 33A0                                 __ptext108 23B2  
                               __ptext109 3058                                  ?___ftadd 0078  
                                ?___ftdiv 0029                    __end_of_SetChannelMode 33A0  
                                ?___ftneg 0018                                  ?___lldiv 0018  
                                ?___ftmul 0069                                  ?___llmod 0018  
                                ?___ftsub 0084                                  ?___fttol 0078  
                        _FlashSampleWrite 1934                                  ?___lwmod 0001  
                         ?_ADC_Initialize 0001                      __end_of_UpdateRxFreq 2FD4  
                       __size_of_testLeds 006A                             _PLLInitialize 0A38  
           SetConversionResultFormat@data 002C                      __end_of_UpdateTxFreq 2F92  
             __size_of_keepAliveSignalLed 0018              ??_INTERRUPT_InterruptManager 0006  
                        __CFG_PRICLKEN$ON 000000                                ?_ZeroArray 0020  
                             __smallconst 0600                     ??_keepAliveSignalUart 002C  
                                _BAUDCON1 000FB8                             _SwSpi_Clk_Pin 2CAC  
                                ?_isalpha 0001                                  ?_isdigit 0001  
                               _eval_poly 1ECA                       BlinkErrorLeds@state 001B  
                         _TimerOneSecFlag 00D6                                  ?_isspace 0001  
                        _SetCpldFwVersion 2FD4                              _SetMcuSystem 373E  
                                ?_isupper 0001                             _FlashReadUart 0676  
                       _PLLUartInitialize 3766                         ?_GetCpldFwVersion 0001  
                        _InitSevenSegment 34C8              __size_of_SetAdcOperationMode 000C  
                          __size_of_make8 005C                            __size_of_floor 00E2  
                          __size_of_ldexp 00C6                            __size_of_frexp 0090  
                      ?_PLLUartInitialize 0018                  __size_of_DATAEE_ReadByte 0014  
                                ?_toupper 0001                          _conversionFormat 003D  
                      ??_GetCpldFwVersion 0024                      _INTERRUPT_Initialize 3756  
          FLASH_WriteBlock@blockStartAddr 0027               __size_of_FlashReadCondition 010C  
                       ??_TMR0_Initialize 001A                    ??_CheckFlashPrecentage 0078  
                          ___wmul@product 001C                                  _LATAbits 000F89  
                                _LATBbits 000F8A                                  _LATCbits 000F8B  
                                _LATDbits 000F8C                       ??_PLLUartInitialize 001A  
          FlashReadUart@numOfSampleToRead 002C                                  _PIE1bits 000F9D  
                                _PIE2bits 000FA0                     _GroupStatusAndVersion 2B50  
                       _GroupSynthesizers 2A3C       __size_of_INTERRUPT_InterruptManager 00D4  
              ??_TMR0_SetInterruptHandler 001A                                  _PIR1bits 000F9E  
                        ??_FLASH_ReadByte 001C                                  i2u507_40 3072  
                                _PIR2bits 000FA1                                 _rxMsgData 01AE  
                     SWSPI_send_word@data 0021                        ?_GroupSynthesizers 01C2  
                                _RCONbits 000FD0                          __CFG_WDTPS$32768 000000  
                               make8@data 0018                                  _TMR0_ISR 23B2  
                         ?_SendAckMessage 0024                           ?_SetChannelMode 002C  
                          ?_PLLInitialize 0001                         ??_PIN_MANAGER_IOC 0001  
                        ?_SetMcuFwVersion 002C                       ??_GroupSynthesizers 0031  
                  GetIntFromUartData@data 0066                   SWSPI_send_word@dataSize 0025  
                              _ADCON0bits 000FC2                  __size_of_readUartMessage 01FC  
                       ___wmul@multiplier 0018                            ?_SwSpi_Clk_Pin 0018  
                        ??_FlashEreaseMem 002C                 __end_of_PLLUartInitialize 3768  
                      __end_of_channelArr 063C                          ??_SwSpi_Data_Pin 0019  
               __size_of_GroupFlashMemory 0044                                ?_eval_poly 0084  
                          ?_FlashReadUart 002C                         ??_GroupControlMcu 0031  
                      _PLL_INIT_REGISTERS 0601                           ??_GetMcuRunTime 0025  
                   DATAEE_WriteByte@bData 0018                         ??_SWSPI_send_bits 001B  
                            _isspace$2967 0019                         ??_SWSPI_send_word 0026  
                   GetCpldFwVersion@TxMsg 0026               __size_of_GetIntFromUartData 009A  
                       ___lmul@multiplier 0018                   FlashReadCondition@TxMsg 0028  
                             _INTCON2bits 000FF1                                 copy_data0 2786  
                               copy_data1 27A6                     ?_INTERRUPT_Initialize 0001  
                        __size_of_DacInit 006A                         ?_DATAEE_WriteByte 0018  
               __end_of_GroupSynthesizers 2A98                     EUSART1_Read@readValue 0019  
                __end_of_FLASH_WriteBlock 2122                                  _GroupDAC 355C  
                      ??_DATAEE_WriteByte 0019                                  _GroupAdc 2DF4  
                               frexp@eptr 001B                                _EECON1bits 000FA6  
                             ??_ResetCpld 002C                                  __Hrparam 0000  
                  ?_InitAdcApplicationMgr 0001                                  _ResetMcu 36C0  
                           ??_DacSetValue 0030                               _readAddress 00F7  
                                __Lrparam 0000                         _ADC_GetConversion 33A0  
                     FlashReadUart@offset 00BD                        __CFG_BOREN$SBORDIS 000000  
                         _ClearMcuRunTime 367C                         __CFG_P2BMX$PORTD2 000000  
             ??_SetConversionResultFormat 002E                   ??_OSCILLATOR_Initialize 0018  
                      ?_ADC_GetConversion 0018                         ??_TMR0_StartTimer 0018  
                        __size_of___ftadd 01AE                          __size_of___ftdiv 00E8  
                    _numOfValidateSamples 0031                          __size_of___ftneg 0024  
                        __size_of___lldiv 0082                                  ___altoft 26F8  
                        __size_of___ftmul 00F6                          __size_of___llmod 0066  
                        __size_of___ftsub 0042                          __size_of___fttol 00F8  
             __size_of_EUSART1_Initialize 0036                          __size_of___lwmod 0042  
                         GroupAdc@request 00BF                                  ___awtoft 318A  
                           crc8@dataArray 0018                                  ___ftpack 21D0  
                        _numOfReadSamples 003E                                  ___lltoft 2AF4  
                       _FLASH_IsWriteDone 36EA                       WriteUartMessage@idx 001E  
                                ___lwtoft 3538                               ??_ZeroArray 0024  
                GetMcuRunTime@tempRunTime 0069                       ??_ADC_GetConversion 001A  
                                _exp$3257 009A                              _isupper$2970 0019  
                      ?_FLASH_IsWriteDone 0001                                  _dataSize 00CE  
                   SwSpi_Clk_Pin@cPinMode 0018                  __end_of_WriteUartMessage 3308  
                        __size_of_isalpha 0028                                  _crcGiven 00CB  
                        __size_of_isdigit 001E                    SwSpi_Data_Pin@cPinMode 0018  
                        __size_of_isspace 0026                        DacSetValue@regData 0075  
                                __ptext10 2F92                                  __ptext11 3766  
                                __ptext20 3734                                  __ptext12 31FA  
                                __ptext21 3654                                  __ptext13 2FD4  
                                __ptext30 3668                                  __ptext22 0676  
                                __ptext14 36B2                                  __ptext31 34A2  
                                __ptext23 3452                                  __ptext15 3230  
                                __ptext40 3370                                  __ptext32 357C  
                                __ptext24 3690                                  __ptext16 1D04  
                                __ptext41 3710                                  __ptext33 347A  
                                __ptext25 1828                                  __ptext17 25F4  
                                __ptext50 36CE                                  __ptext42 2EC8  
                                __ptext34 359A                                  __ptext26 2D02  
                                __ptext18 2676                                  __ptext51 3756  
                                __ptext43 371C                                  __ptext35 2C00  
                                __ptext27 3266                                  __ptext19 2444  
                                __ptext60 33FE                                  __ptext52 329C  
                                __ptext44 3626                                  __ptext36 27E4  
                                __ptext28 227E                                  __ptext61 32D2  
                                __ptext53 363E                                  __ptext45 373E  
                                __ptext37 36C0                                  __ptext29 1050  
                                __ptext70 2318                                  __ptext62 30D6  
                                __ptext54 2F0C                                  __ptext46 35F2  
                                __ptext38 36F8                                  __ptext71 2A98  
                                __ptext63 360C                                  __ptext55 28B8  
                                __ptext47 3308                                  __ptext39 3704  
                                __ptext80 29DE                                  __ptext72 314E  
                                __ptext64 375A                                  __ptext56 3728  
                                __ptext48 3748                                  __ptext81 1226  
                                __ptext73 35D6                                  __ptext65 0A38  
                                __ptext57 2D54                                  __ptext49 2E3C  
                                __ptext90 26F8                                  __ptext82 158A  
                                __ptext74 2BA8                                  __ptext66 3112  
                                __ptext58 2DA6                                  __ptext91 1ECA  
                                __ptext83 1706                                  __ptext75 2C56  
                                __ptext67 34C8                                  __ptext59 35B8  
                                __ptext92 34EE                                  __ptext84 0E5E  
                                __ptext76 2CAC                                  __ptext68 36DC  
                                __ptext93 1B26                                  __ptext85 1FA0  
                                __ptext77 367C                                  __ptext69 284E  
                                __ptext94 3016                                  __ptext86 1DE8  
                                __ptext78 2122                                  __ptext95 13DC  
                                __ptext87 24D4                                  __ptext79 2980  
                                __ptext96 3514                                  __ptext88 1A2E  
                                __ptext97 1C1C                                  __ptext89 2564  
                                __ptext98 318A                                  __ptext99 2AF4  
                        __size_of_isupper 001E                  SwSpi_Set_CE_Pin@cPinMode 0018  
                                _pow$3255 00A6                                  _pow$3256 00A9  
                     ??_FLASH_IsWriteDone 0018                       GetIntFromUartData@c 0072  
             DATAEE_WriteByte@GIEBitValue 001A                          __size_of_toupper 0014  
                __size_of_GetMcuFwVersion 0082                             __size_of_crc8 004E  
                           __size_of_main 0062                    ?_GroupStatusAndVersion 01C2  
                                _msgCount 00CA              _TMR0_DefaultInterruptHandler 000000  
                       ??_DATAEE_ReadByte 0018                 __end_of_ADC_GetConversion 33D0  
                   __size_of_UpdateRxFreq 0042                     __size_of_UpdateTxFreq 0042  
                      SWSPI_send_word@idx 0027                               _groupsArray 00EB  
                         ??_PLLInitialize 002A                                  _testLeds 27E4  
                 __size_of_BlinkErrorLeds 005E                                  int$flags 0048  
                              strtol@base 0028                                strtol@sign 0060  
               __end_of_FLASH_IsWriteDone 36F8        __end_of_INTERRUPT_InterruptManager 00DC  
              _INTERRUPT_InterruptManager 0008                           EepromWrite@data 001B  
                         ??_SwSpi_Clk_Pin 0019                       __end_of_DacSetValue 329C  
                     _EUSART1_Receive_ISR 33D0                  __end_of_SwSpi_Set_CE_Pin 314E  
                       ?_FLASH_EraseBlock 0018               __end_of_InitRxMessageParams 3452  
                                exp@coeff 063C                                _MEMORY_ISR 3762  
                         ??_FlashReadUart 0060                                  log@coeff 065A  
              __size_of_PLLUartInitialize 0002                    SWSPI_send_word@phrType 0029  
                    SetCpldFwVersion@data 002C                        ??_FLASH_EraseBlock 001C  
                              _INTCONbits 000FF2                               ??_eval_poly 002F  
                             _sampleArray 016E                               _sampleCount 00C6  
                                isalpha@c 001D                                  isdigit@c 001A  
                  ??_INTERRUPT_Initialize 0018                                  memset@p1 0018  
                       ??_readUartMessage 01C5                 _SetConversionResultFormat 3704  
                __end_of_FlashSampleWrite 1A2E                                  intlevel2 0000  
                            _UpdateRxFreq 2F92                              _UpdateTxFreq 2F50  
                    ?_EUSART1_Receive_ISR 0001                     __end_of_SetMcuRunTime 2F50  
                        ___lwmod@dividend 0001                __size_of_GroupSynthesizers 005C  
                                isspace@c 001A                          ___lldiv@dividend 0018  
                 ?_PIN_MANAGER_Initialize 0001                   __end_of_ClearMcuRunTime 3690  
                              _RCSTA1bits 000FAB                                  isupper@c 001A  
            __end_of_EUSART1_Transmit_ISR 31FA                             ??_BlinkOkLeds 0018  
                        ??_ADC_Initialize 0018                  __end_of_SetCpldFwVersion 3016  
                       _TimerSamplingFlag 00D5                             AdcConvert@idx 00BC  
                __end_of_InitSevenSegment 34EE                       _SetAdcOperationMode 3710  
                           _isReWriteDone 003B                      SwSpi_Clk_Pin@phrType 0019  
                   SwSpi_Data_Pin@phrType 0019                   SwSpi_Set_CE_Pin@phrType 0019  
                  __size_of_EUSART1_Write 003C                  ??_SwSpi_Set_Dac_Sync_Pin 0018  
                       EepromRead@address 0019                          ___lldiv@quotient 0020  
                        _GroupFlashMemory 2E84                           ___lwmod@divisor 0003  
                         _TMR0_Initialize 3308                           ___lwmod@counter 0005  
                                toupper@c 0018                         __CFG_T3CMX$PORTC0 000000  
                    ?_SetAdcOperationMode 002C                             ??_EepromWrite 001C  
                              _AdcConvert 1226                     ??_EUSART1_Receive_ISR 0001  
          __end_of_PIN_MANAGER_Initialize 2E84              GetIntFromUartData@dataRegArr 006A  
                       __CFG_FOSC$INTIO67 000000                           _PIN_MANAGER_IOC 375E  
                        ??_SendAckMessage 0025                __size_of_ADC_GetConversion 0030  
                        ??_SetChannelMode 002E                 __size_of_GetCpldFwVersion 0090  
                             _DacSetValue 3266  

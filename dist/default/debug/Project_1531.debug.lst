

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Mar 22 17:07:44 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    12                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    17                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    18                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    22                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	text0,global,reloc=2,class=CODE,delta=1
    24                           	psect	text1,global,reloc=2,class=CODE,delta=1
    25                           	psect	text2,global,reloc=2,class=CODE,delta=1
    26                           	psect	text3,global,reloc=2,class=CODE,delta=1
    27                           	psect	text4,global,reloc=2,class=CODE,delta=1
    28                           	psect	text5,global,reloc=2,class=CODE,delta=1
    29                           	psect	text6,global,reloc=2,class=CODE,delta=1
    30                           	psect	text7,global,reloc=2,class=CODE,delta=1
    31                           	psect	text8,global,reloc=2,class=CODE,delta=1
    32                           	psect	text9,global,reloc=2,class=CODE,delta=1
    33                           	psect	text10,global,reloc=2,class=CODE,delta=1
    34                           	psect	text11,global,reloc=2,class=CODE,delta=1
    35                           	psect	text12,global,reloc=2,class=CODE,delta=1
    36                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text14,global,reloc=2,class=CODE,delta=1
    38                           	psect	text15,global,reloc=2,class=CODE,delta=1
    39                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text17,global,reloc=2,class=CODE,delta=1
    41                           	psect	text18,global,reloc=2,class=CODE,delta=1
    42                           	psect	text19,global,reloc=2,class=CODE,delta=1
    43                           	psect	text20,global,reloc=2,class=CODE,delta=1
    44                           	psect	text21,global,reloc=2,class=CODE,delta=1
    45                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text28,global,reloc=2,class=CODE,delta=1
    52                           	psect	text29,global,reloc=2,class=CODE,delta=1
    53                           	psect	text30,global,reloc=2,class=CODE,delta=1
    54                           	psect	text31,global,reloc=2,class=CODE,delta=1
    55                           	psect	text32,global,reloc=2,class=CODE,delta=1
    56                           	psect	text33,global,reloc=2,class=CODE,delta=1
    57                           	psect	text34,global,reloc=2,class=CODE,delta=1
    58                           	psect	text35,global,reloc=2,class=CODE,delta=1
    59                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text37,global,reloc=2,class=CODE,delta=1
    61                           	psect	text38,global,reloc=2,class=CODE,delta=1
    62                           	psect	text39,global,reloc=2,class=CODE,delta=1
    63                           	psect	text40,global,reloc=2,class=CODE,delta=1
    64                           	psect	text41,global,reloc=2,class=CODE,delta=1
    65                           	psect	text42,global,reloc=2,class=CODE,delta=1
    66                           	psect	text43,global,reloc=2,class=CODE,delta=1
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1
    68                           	psect	text45,global,reloc=2,class=CODE,delta=1
    69                           	psect	text46,global,reloc=2,class=CODE,delta=1
    70                           	psect	text47,global,reloc=2,class=CODE,delta=1
    71                           	psect	text48,global,reloc=2,class=CODE,delta=1
    72                           	psect	text49,global,reloc=2,class=CODE,delta=1
    73                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text51,global,reloc=2,class=CODE,delta=1
    75                           	psect	text52,global,reloc=2,class=CODE,delta=1
    76                           	psect	text53,global,reloc=2,class=CODE,delta=1
    77                           	psect	text54,global,reloc=2,class=CODE,delta=1
    78                           	psect	text55,global,reloc=2,class=CODE,delta=1
    79                           	psect	text56,global,reloc=2,class=CODE,delta=1
    80                           	psect	text57,global,reloc=2,class=CODE,delta=1
    81                           	psect	text58,global,reloc=2,class=CODE,delta=1
    82                           	psect	text59,global,reloc=2,class=CODE,delta=1
    83                           	psect	text60,global,reloc=2,class=CODE,delta=1
    84                           	psect	text61,global,reloc=2,class=CODE,delta=1
    85                           	psect	text62,global,reloc=2,class=CODE,delta=1
    86                           	psect	text63,global,reloc=2,class=CODE,delta=1
    87                           	psect	text64,global,reloc=2,class=CODE,delta=1
    88                           	psect	text65,global,reloc=2,class=CODE,delta=1
    89                           	psect	text66,global,reloc=2,class=CODE,delta=1
    90                           	psect	text67,global,reloc=2,class=CODE,delta=1
    91                           	psect	text68,global,reloc=2,class=CODE,delta=1
    92                           	psect	text69,global,reloc=2,class=CODE,delta=1
    93                           	psect	text70,global,reloc=2,class=CODE,delta=1
    94                           	psect	text71,global,reloc=2,class=CODE,delta=1
    95                           	psect	text72,global,reloc=2,class=CODE,delta=1
    96                           	psect	text73,global,reloc=2,class=CODE,delta=1
    97                           	psect	text74,global,reloc=2,class=CODE,delta=1,group=1
    98                           	psect	text75,global,reloc=2,class=CODE,delta=1
    99                           	psect	text76,global,reloc=2,class=CODE,delta=1
   100                           	psect	text77,global,reloc=2,class=CODE,delta=1
   101                           	psect	text78,global,reloc=2,class=CODE,delta=1
   102                           	psect	text79,global,reloc=2,class=CODE,delta=1,group=1
   103                           	psect	text80,global,reloc=2,class=CODE,delta=1
   104                           	psect	text81,global,reloc=2,class=CODE,delta=1
   105                           	psect	text82,global,reloc=2,class=CODE,delta=1
   106                           	psect	text83,global,reloc=2,class=CODE,delta=1
   107                           	psect	text84,global,reloc=2,class=CODE,delta=1
   108                           	psect	text85,global,reloc=2,class=CODE,delta=1
   109                           	psect	text86,global,reloc=2,class=CODE,delta=1,group=1
   110                           	psect	text87,global,reloc=2,class=CODE,delta=1,group=1
   111                           	psect	text88,global,reloc=2,class=CODE,delta=1,group=1
   112                           	psect	text89,global,reloc=2,class=CODE,delta=1,group=1
   113                           	psect	text90,global,reloc=2,class=CODE,delta=1,group=1
   114                           	psect	text91,global,reloc=2,class=CODE,delta=1,group=1
   115                           	psect	text92,global,reloc=2,class=CODE,delta=1,group=1
   116                           	psect	text93,global,reloc=2,class=CODE,delta=1,group=1
   117                           	psect	text94,global,reloc=2,class=CODE,delta=1,group=1
   118                           	psect	text95,global,reloc=2,class=CODE,delta=1,group=1
   119                           	psect	text96,global,reloc=2,class=CODE,delta=1,group=1
   120                           	psect	text97,global,reloc=2,class=CODE,delta=1,group=1
   121                           	psect	text98,global,reloc=2,class=CODE,delta=1,group=1
   122                           	psect	text99,global,reloc=2,class=CODE,delta=1,group=1
   123                           	psect	text100,global,reloc=2,class=CODE,delta=1,group=1
   124                           	psect	text101,global,reloc=2,class=CODE,delta=1,group=1
   125                           	psect	text102,global,reloc=2,class=CODE,delta=1,group=1
   126                           	psect	text103,global,reloc=2,class=CODE,delta=1,group=1
   127                           	psect	text104,global,reloc=2,class=CODE,delta=1,group=1
   128                           	psect	text105,global,reloc=2,class=CODE,delta=1,group=1
   129                           	psect	text106,global,reloc=2,class=CODE,delta=1
   130                           	psect	text107,global,reloc=2,class=CODE,delta=1
   131                           	psect	text108,global,reloc=2,class=CODE,delta=1
   132                           	psect	text109,global,reloc=2,class=CODE,delta=1
   133                           	psect	text110,global,reloc=2,class=CODE,delta=1
   134                           	psect	text111,global,reloc=2,class=CODE,delta=1
   135                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   136                           	psect	text113,global,reloc=2,class=CODE,delta=1
   137                           	psect	text114,global,reloc=2,class=CODE,delta=1,group=1
   138                           	psect	text115,global,reloc=2,class=CODE,delta=1
   139                           	psect	text116,global,reloc=2,class=CODE,delta=1
   140                           	psect	text117,global,reloc=2,class=CODE,delta=1
   141                           	psect	text118,global,reloc=2,class=CODE,delta=1
   142                           	psect	text119,global,reloc=2,class=CODE,delta=1
   143                           	psect	text120,global,reloc=2,class=CODE,delta=1
   144                           	psect	text121,global,reloc=2,class=CODE,delta=1
   145                           	psect	text122,global,reloc=2,class=CODE,delta=1
   146                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   147                           	psect	text123,global,reloc=2,class=CODE,delta=1
   148                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   149                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   150  0000                     
   151                           ; Version 1.45
   152                           ; Generated 16/11/2017 GMT
   153                           ; 
   154                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   155                           ; All rights reserved.
   156                           ; 
   157                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   158                           ; 
   159                           ; Redistribution and use in source and binary forms, with or without modification, are
   160                           ; permitted provided that the following conditions are met:
   161                           ; 
   162                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   163                           ;        conditions and the following disclaimer.
   164                           ; 
   165                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   166                           ;        of conditions and the following disclaimer in the documentation and/or other
   167                           ;        materials provided with the distribution.
   168                           ; 
   169                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   170                           ;        software without specific prior written permission.
   171                           ; 
   172                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   173                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   174                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   175                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   176                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   177                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   178                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   179                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   180                           ; 
   181                           ; 
   182                           ; Code-generator required, PIC18F45K22 Definitions
   183                           ; 
   184                           ; SFR Addresses
   185  0000                     
   186 ;; Function _TMR0_DefaultInterruptHandler is unused but had its address taken
   187  0000                     
   188                           	psect	idataCOMRAM
   189  00453C                     __pidataCOMRAM:
   190                           	opt stack 0
   191                           
   192                           ;initializer for _writeAddress
   193  00453C  4600               	dw	17920
   194  00453E  0000               	dw	0
   195                           
   196                           ;initializer for _SynthRxOper
   197  004540  01                 	db	1
   198                           
   199                           ;initializer for _SynthTxOper
   200  004541  01                 	db	1
   201                           
   202                           	psect	idataBANK0
   203  004548                     __pidataBANK0:
   204                           	opt stack 0
   205                           
   206                           ;initializer for _readAddress
   207  004548  4600               	dw	17920
   208  00454A  0000               	dw	0
   209                           
   210                           ;initializer for _synthLdRxCnt
   211  00454C  02                 	db	2
   212                           
   213                           	psect	idataBANK1
   214  0044E4                     __pidataBANK1:
   215                           	opt stack 0
   216                           
   217                           ;initializer for _groupsArray
   218  0044E4  BA                 	db	low _GroupControlMcu
   219  0044E5  40                 	db	high _GroupControlMcu
   220  0044E6  8E                 	db	low _GroupStatusAndVersion
   221  0044E7  42                 	db	high _GroupStatusAndVersion
   222  0044E8  3E                 	db	low _GroupAdc
   223  0044E9  43                 	db	high _GroupAdc
   224  0044EA  32                 	db	low _GroupSynthesizers
   225  0044EB  34                 	db	high _GroupSynthesizers
   226  0044EC  9A                 	db	low _GroupFlashMemory
   227  0044ED  3E                 	db	high _GroupFlashMemory
   228  0044EE  1E                 	db	low _GroupDAC
   229  0044EF  40                 	db	high _GroupDAC
   230                           
   231                           ;initializer for _synthLdTxCnt
   232  0044F0  02                 	db	2
   233                           
   234                           	psect	smallconst
   235  000600                     __psmallconst:
   236                           	opt stack 0
   237  000600  00                 	db	0
   238  000601                     _SYNTH_REGS:
   239                           	opt stack 0
   240  000601  041C               	dw	1052
   241  000603  0001               	dw	1
   242  000605  300B               	dw	12299
   243  000607  0061               	dw	97
   244  000609  193A               	dw	6458
   245  00060B  00C0               	dw	192
   246  00060D  FCC9               	dw	64713
   247  00060F  1110               	dw	4368
   248  000611  0428               	dw	1064
   249  000613  102D               	dw	4141
   250  000615  00E7               	dw	231
   251  000617  1200               	dw	4608
   252  000619  6076               	dw	24694
   253  00061B  3500               	dw	13568
   254  00061D  0025               	dw	37
   255  00061F  0080               	dw	128
   256  000621  BF84               	dw	49028
   257  000623  0800               	dw	2048
   258  000625  0003               	dw	3
   259  000627  0000               	dw	0
   260  000629  0012               	dw	18
   261  00062B  0000               	dw	0
   262  00062D  0001               	dw	1
   263  00062F  0C00               	dw	3072
   264  000631  0680               	dw	1664
   265  000633  0020               	dw	32
   266  000635                     __end_of_SYNTH_REGS:
   267                           	opt stack 0
   268  000635                     _SYNTH_ADDRES:
   269                           	opt stack 0
   270  000635  04                 	db	4
   271  000636  08                 	db	8
   272  000637  0C                 	db	12
   273  000638  00                 	db	0
   274  000639  10                 	db	16
   275  00063A  00                 	db	0
   276  00063B  14                 	db	20
   277  00063C  00                 	db	0
   278  00063D  00                 	db	0
   279  00063E  00                 	db	0
   280  00063F  18                 	db	24
   281  000640  00                 	db	0
   282  000641  00                 	db	0
   283  000642                     __end_of_SYNTH_ADDRES:
   284                           	opt stack 0
   285  000642                     _channelArr:
   286                           	opt stack 0
   287  000642  04                 	db	4
   288  000643  05                 	db	5
   289  000644  06                 	db	6
   290  000645  07                 	db	7
   291  000646  08                 	db	8
   292  000647  09                 	db	9
   293  000648  0A                 	db	10
   294  000649  0D                 	db	13
   295  00064A  19                 	db	25
   296  00064B                     __end_of_channelArr:
   297                           	opt stack 0
   298  00064B                     _DAC_DEFAULT_INIT_VALUES:
   299                           	opt stack 0
   300  00064B  2344               	dw	9028
   301  00064D  6344               	dw	25412
   302  00064F  A344               	dw	41796
   303  000651  E344               	dw	58180
   304  000653                     __end_of_DAC_DEFAULT_INIT_VALUES:
   305                           	opt stack 0
   306  000653                     _DAC_ADDRES:
   307                           	opt stack 0
   308  000653  02                 	db	2
   309  000654  04                 	db	4
   310  000655  06                 	db	6
   311  000656  08                 	db	8
   312  000657                     __end_of_DAC_ADDRES:
   313                           	opt stack 0
   314  000657                     exp@coeff:
   315                           	opt stack 0
   316  000657  00                 	db	0
   317  000658  80                 	db	128
   318  000659  3F                 	db	63
   319  00065A  72                 	db	114
   320  00065B  31                 	db	49
   321  00065C  3F                 	db	63
   322  00065D  FE                 	db	254
   323  00065E  75                 	db	117
   324  00065F  3E                 	db	62
   325  000660  58                 	db	88
   326  000661  63                 	db	99
   327  000662  3D                 	db	61
   328  000663  95                 	db	149
   329  000664  1D                 	db	29
   330  000665  3C                 	db	60
   331  000666  C5                 	db	197
   332  000667  AE                 	db	174
   333  000668  3A                 	db	58
   334  000669  79                 	db	121
   335  00066A  21                 	db	33
   336  00066B  39                 	db	57
   337  00066C  94                 	db	148
   338  00066D  80                 	db	128
   339  00066E  37                 	db	55
   340  00066F  93                 	db	147
   341  000670  A7                 	db	167
   342  000671  35                 	db	53
   343  000672  56                 	db	86
   344  000673  15                 	db	21
   345  000674  34                 	db	52
   346  000675                     __end_ofexp@coeff:
   347                           	opt stack 0
   348  000675                     log@coeff:
   349                           	opt stack 0
   350  000675  00                 	db	0
   351  000676  00                 	db	0
   352  000677  00                 	db	0
   353  000678  00                 	db	0
   354  000679  80                 	db	128
   355  00067A  3F                 	db	63
   356  00067B  F0                 	db	240
   357  00067C  FF                 	db	255
   358  00067D  BE                 	db	190
   359  00067E  E2                 	db	226
   360  00067F  A9                 	db	169
   361  000680  3E                 	db	62
   362  000681  83                 	db	131
   363  000682  76                 	db	118
   364  000683  BE                 	db	190
   365  000684  AE                 	db	174
   366  000685  2B                 	db	43
   367  000686  3E                 	db	62
   368  000687  3C                 	db	60
   369  000688  C3                 	db	195
   370  000689  BD                 	db	189
   371  00068A  D2                 	db	210
   372  00068B  13                 	db	19
   373  00068C  3D                 	db	61
   374  00068D  78                 	db	120
   375  00068E  D3                 	db	211
   376  00068F  BB                 	db	187
   377  000690                     __end_oflog@coeff:
   378                           	opt stack 0
   379  000690                     STR_1:
   380                           
   381                           ; BSR set to: 0
   382  000690  4D                 	db	77	;'M'
   383  000691  61                 	db	97	;'a'
   384  000692  72                 	db	114	;'r'
   385  000693  20                 	db	32
   386  000694  32                 	db	50	;'2'
   387  000695  32                 	db	50	;'2'
   388  000696  20                 	db	32
   389  000697  32                 	db	50	;'2'
   390  000698  30                 	db	48	;'0'
   391  000699  31                 	db	49	;'1'
   392  00069A  38                 	db	56	;'8'
   393  00069B  00                 	db	0
   394  00069C                     STR_18:
   395                           
   396                           ; BSR set to: 0
   397  00069C  31                 	db	49	;'1'
   398  00069D  37                 	db	55	;'7'
   399  00069E  3A                 	db	58	;':'
   400  00069F  30                 	db	48	;'0'
   401  0006A0  33                 	db	51	;'3'
   402  0006A1  3A                 	db	58	;':'
   403  0006A2  33                 	db	51	;'3'
   404  0006A3  39                 	db	57	;'9'
   405  0006A4  00                 	db	0
   406  0000                     
   407                           ; #config settings
   408  0006A5  00                 	db	0	; dummy byte at the end
   409  0000                     
   410                           	psect	nvCOMRAM
   411  000046                     __pnvCOMRAM:
   412                           	opt stack 0
   413  000046                     _timer0ReloadVal:
   414                           	opt stack 0
   415  000046                     	ds	2
   416                           
   417                           	psect	nvBANK1
   418  0001E2                     __pnvBANK1:
   419                           	opt stack 0
   420  0001E2                     _TMR0_InterruptHandler:
   421                           	opt stack 0
   422  0001E2                     	ds	2
   423  0001E4                     _IOCB5_InterruptHandler:
   424                           	opt stack 0
   425  0001E4                     	ds	2
   426  0001E6                     _IOCB4_InterruptHandler:
   427                           	opt stack 0
   428  0001E6                     	ds	2
   429  0001E8                     _eusart1TxBufferRemaining:
   430                           	opt stack 0
   431  0001E8                     	ds	1
   432  0000                     _ANSELA	set	3896
   433  0000                     _ANSELE	set	3900
   434  0000                     _ANSELD	set	3899
   435  0000                     _ANSELB	set	3897
   436  0000                     _ANSELC	set	3898
   437  0000                     _ADCON0bits	set	4034
   438  0000                     _ADRESH	set	4036
   439  0000                     _ADRESL	set	4035
   440  0000                     _ADCON2	set	4032
   441  0000                     _ADCON1	set	4033
   442  0000                     _ADCON0	set	4034
   443  0000                     _T0CONbits	set	4053
   444  0000                     _T0CON	set	4053
   445  0000                     _TMR0L	set	4054
   446  0000                     _TMR0H	set	4055
   447  0000                     _EEDATA	set	4008
   448  0000                     _EEADR	set	4009
   449  0000                     _EECON2	set	4007
   450  0000                     _EECON1bits	set	4006
   451  0000                     _TABLAT	set	4085
   452  0000                     _TBLPTRL	set	4086
   453  0000                     _TBLPTRH	set	4087
   454  0000                     _TBLPTRU	set	4088
   455  0000                     _IOCBbits	set	3938
   456  0000                     _INTCON2bits	set	4081
   457  0000                     _WPUB	set	3937
   458  0000                     _TRISD	set	3989
   459  0000                     _TRISC	set	3988
   460  0000                     _TRISB	set	3987
   461  0000                     _TRISA	set	3986
   462  0000                     _TRISE	set	3990
   463  0000                     _LATC	set	3979
   464  0000                     _LATB	set	3978
   465  0000                     _LATA	set	3977
   466  0000                     _LATD	set	3980
   467  0000                     _LATE	set	3981
   468  0000                     _RCREG1	set	4014
   469  0000                     _RCSTA1bits	set	4011
   470  0000                     _TXREG1	set	4013
   471  0000                     _SPBRGH1	set	4016
   472  0000                     _SPBRG1	set	4015
   473  0000                     _TXSTA1	set	4012
   474  0000                     _RCSTA1	set	4011
   475  0000                     _BAUDCON1	set	4024
   476  0000                     _PIR1bits	set	3998
   477  0000                     _PIE1bits	set	3997
   478  0000                     _PIR2bits	set	4001
   479  0000                     _PIE2bits	set	4000
   480  0000                     _RCONbits	set	4048
   481  0000                     _OSCTUNE	set	3995
   482  0000                     _OSCCON2	set	4050
   483  0000                     _OSCCON	set	4051
   484  0000                     _LATAbits	set	3977
   485  0000                     _LATDbits	set	3980
   486  0000                     _INTCONbits	set	4082
   487  0000                     _PORTDbits	set	3971
   488  0000                     _LATCbits	set	3979
   489  0000                     _LATBbits	set	3978
   490                           
   491                           	psect	cinit
   492  0031D6                     __pcinit:
   493                           	opt stack 0
   494  0031D6                     start_initialization:
   495                           	opt stack 0
   496  0031D6                     __initialization:
   497                           	opt stack 0
   498                           
   499                           ; Initialize objects allocated to BANK1 (13 bytes)
   500                           ; load TBLPTR registers with __pidataBANK1
   501  0031D6  0EE4               	movlw	low __pidataBANK1
   502  0031D8  6EF6               	movwf	tblptrl,c
   503  0031DA  0E44               	movlw	high __pidataBANK1
   504  0031DC  6EF7               	movwf	tblptrh,c
   505  0031DE  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   506  0031E0  6EF8               	movwf	tblptru,c
   507  0031E2  EE01  F0D5         	lfsr	0,__pdataBANK1
   508  0031E6  EE10 F00D          	lfsr	1,13
   509  0031EA                     copy_data0:
   510  0031EA  0009               	tblrd		*+
   511  0031EC  CFF5 FFEE          	movff	tablat,postinc0
   512  0031F0  50E5               	movf	postdec1,w,c
   513  0031F2  50E1               	movf	fsr1l,w,c
   514  0031F4  E1FA               	bnz	copy_data0
   515                           
   516                           ; Initialize objects allocated to BANK0 (5 bytes)
   517                           ; load TBLPTR registers with __pidataBANK0
   518  0031F6  0E48               	movlw	low __pidataBANK0
   519  0031F8  6EF6               	movwf	tblptrl,c
   520  0031FA  0E45               	movlw	high __pidataBANK0
   521  0031FC  6EF7               	movwf	tblptrh,c
   522  0031FE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   523  003200  6EF8               	movwf	tblptru,c
   524  003202  EE00  F0F5         	lfsr	0,__pdataBANK0
   525  003206  EE10 F005          	lfsr	1,5
   526  00320A                     copy_data1:
   527  00320A  0009               	tblrd		*+
   528  00320C  CFF5 FFEE          	movff	tablat,postinc0
   529  003210  50E5               	movf	postdec1,w,c
   530  003212  50E1               	movf	fsr1l,w,c
   531  003214  E1FA               	bnz	copy_data1
   532                           
   533                           ; Initialize objects allocated to COMRAM (6 bytes)
   534                           ; load TBLPTR registers with __pidataCOMRAM
   535  003216  0E3C               	movlw	low __pidataCOMRAM
   536  003218  6EF6               	movwf	tblptrl,c
   537  00321A  0E45               	movlw	high __pidataCOMRAM
   538  00321C  6EF7               	movwf	tblptrh,c
   539  00321E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   540  003220  6EF8               	movwf	tblptru,c
   541  003222  EE00  F040         	lfsr	0,__pdataCOMRAM
   542  003226  EE10 F006          	lfsr	1,6
   543  00322A                     copy_data2:
   544  00322A  0009               	tblrd		*+
   545  00322C  CFF5 FFEE          	movff	tablat,postinc0
   546  003230  50E5               	movf	postdec1,w,c
   547  003232  50E1               	movf	fsr1l,w,c
   548  003234  E1FA               	bnz	copy_data2
   549                           
   550                           ; Clear objects allocated to BANK2 (70 bytes)
   551  003236  EE02  F05D         	lfsr	0,__pbssBANK2
   552  00323A  0E46               	movlw	70
   553  00323C                     clear_0:
   554  00323C  6AEE               	clrf	postinc0,c
   555  00323E  06E8               	decf	wreg,f,c
   556  003240  E1FD               	bnz	clear_0
   557                           
   558                           ; Clear objects allocated to BANK1 (179 bytes)
   559  003242  EE01  F000         	lfsr	0,__pbssBANK1
   560  003246  0EB3               	movlw	179
   561  003248                     clear_1:
   562  003248  6AEE               	clrf	postinc0,c
   563  00324A  06E8               	decf	wreg,f,c
   564  00324C  E1FD               	bnz	clear_1
   565                           
   566                           ; Clear objects allocated to BANK0 (17 bytes)
   567  00324E  EE00  F0E4         	lfsr	0,__pbssBANK0
   568  003252  0E11               	movlw	17
   569  003254                     clear_2:
   570  003254  6AEE               	clrf	postinc0,c
   571  003256  06E8               	decf	wreg,f,c
   572  003258  E1FD               	bnz	clear_2
   573                           
   574                           ; Clear objects allocated to COMRAM (15 bytes)
   575  00325A  EE00  F031         	lfsr	0,__pbssCOMRAM
   576  00325E  0E0F               	movlw	15
   577  003260                     clear_3:
   578  003260  6AEE               	clrf	postinc0,c
   579  003262  06E8               	decf	wreg,f,c
   580  003264  E1FD               	bnz	clear_3
   581  003266                     end_of_initialization:
   582                           	opt stack 0
   583  003266                     __end_of__initialization:
   584                           	opt stack 0
   585  003266  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   586  003268  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   587  00326A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   588  00326C  6EF8               	movwf	tblptru,c
   589  00326E  0100               	movlb	0
   590  003270  EF1B  F01B         	goto	_main	;jump to C main() function
   591                           tblptru	equ	0xFF8
   592                           tblptrh	equ	0xFF7
   593                           tblptrl	equ	0xFF6
   594                           tablat	equ	0xFF5
   595                           postinc0	equ	0xFEE
   596                           wreg	equ	0xFE8
   597                           postdec1	equ	0xFE5
   598                           fsr1l	equ	0xFE1
   599                           
   600                           	psect	bssCOMRAM
   601  000031                     __pbssCOMRAM:
   602                           	opt stack 0
   603  000031                     _numOfValidateSamples:
   604                           	opt stack 0
   605  000031                     	ds	4
   606  000035                     TMR0_ISR@CountCallBack:
   607                           	opt stack 0
   608  000035                     	ds	2
   609  000037                     _eusart1RxTail:
   610                           	opt stack 0
   611  000037                     	ds	1
   612  000038                     _eusart1RxHead:
   613                           	opt stack 0
   614  000038                     	ds	1
   615  000039                     _eusart1TxTail:
   616                           	opt stack 0
   617  000039                     	ds	1
   618  00003A                     _eusart1TxHead:
   619                           	opt stack 0
   620  00003A                     	ds	1
   621  00003B                     _adcSampleMode:
   622                           	opt stack 0
   623  00003B                     	ds	1
   624  00003C                     _numOfReadSamples:
   625                           	opt stack 0
   626  00003C                     	ds	4
   627                           tblptru	equ	0xFF8
   628                           tblptrh	equ	0xFF7
   629                           tblptrl	equ	0xFF6
   630                           tablat	equ	0xFF5
   631                           postinc0	equ	0xFEE
   632                           wreg	equ	0xFE8
   633                           postdec1	equ	0xFE5
   634                           fsr1l	equ	0xFE1
   635                           
   636                           	psect	dataCOMRAM
   637  000040                     __pdataCOMRAM:
   638                           	opt stack 0
   639  000040                     _writeAddress:
   640                           	opt stack 0
   641  000040                     	ds	4
   642  000044                     _SynthRxOper:
   643                           	opt stack 0
   644  000044                     	ds	1
   645  000045                     _SynthTxOper:
   646                           	opt stack 0
   647  000045                     	ds	1
   648                           tblptru	equ	0xFF8
   649                           tblptrh	equ	0xFF7
   650                           tblptrl	equ	0xFF6
   651                           tablat	equ	0xFF5
   652                           postinc0	equ	0xFEE
   653                           wreg	equ	0xFE8
   654                           postdec1	equ	0xFE5
   655                           fsr1l	equ	0xFE1
   656                           
   657                           	psect	bssBANK0
   658  0000E4                     __pbssBANK0:
   659                           	opt stack 0
   660  0000E4                     _synthLdTxArrayCnt:
   661                           	opt stack 0
   662  0000E4                     	ds	1
   663  0000E5                     _synthLdRxArrayCnt:
   664                           	opt stack 0
   665  0000E5                     	ds	1
   666  0000E6                     _cntRegUpdate:
   667                           	opt stack 0
   668  0000E6                     	ds	1
   669  0000E7                     _isReWriteDone:
   670                           	opt stack 0
   671  0000E7                     	ds	1
   672  0000E8                     _msgCount:
   673                           	opt stack 0
   674  0000E8                     	ds	1
   675  0000E9                     _crcGiven:
   676                           	opt stack 0
   677  0000E9                     	ds	1
   678  0000EA                     _crcCalc:
   679                           	opt stack 0
   680  0000EA                     	ds	1
   681  0000EB                     _dataSize:
   682                           	opt stack 0
   683  0000EB                     	ds	1
   684  0000EC                     _request:
   685                           	opt stack 0
   686  0000EC                     	ds	1
   687  0000ED                     _group:
   688                           	opt stack 0
   689  0000ED                     	ds	1
   690  0000EE                     _cState:
   691                           	opt stack 0
   692  0000EE                     	ds	1
   693  0000EF                     _eusart1RxCount:
   694                           	opt stack 0
   695  0000EF                     	ds	1
   696  0000F0                     _channel:
   697                           	opt stack 0
   698  0000F0                     	ds	1
   699  0000F1                     _Timer0_OneSec:
   700                           	opt stack 0
   701  0000F1                     	ds	1
   702  0000F2                     _Timer0_KeepAlive:
   703                           	opt stack 0
   704  0000F2                     	ds	1
   705  0000F3                     _Timer0_Sampling:
   706                           	opt stack 0
   707  0000F3                     	ds	1
   708  0000F4                     _Timer0_SynthLd:
   709                           	opt stack 0
   710  0000F4                     	ds	1
   711                           tblptru	equ	0xFF8
   712                           tblptrh	equ	0xFF7
   713                           tblptrl	equ	0xFF6
   714                           tablat	equ	0xFF5
   715                           postinc0	equ	0xFEE
   716                           wreg	equ	0xFE8
   717                           postdec1	equ	0xFE5
   718                           fsr1l	equ	0xFE1
   719                           
   720                           	psect	dataBANK0
   721  0000F5                     __pdataBANK0:
   722                           	opt stack 0
   723  0000F5                     _readAddress:
   724                           	opt stack 0
   725  0000F5                     	ds	4
   726  0000F9                     _synthLdRxCnt:
   727                           	opt stack 0
   728  0000F9                     	ds	1
   729                           tblptru	equ	0xFF8
   730                           tblptrh	equ	0xFF7
   731                           tblptrl	equ	0xFF6
   732                           tablat	equ	0xFF5
   733                           postinc0	equ	0xFEE
   734                           wreg	equ	0xFE8
   735                           postdec1	equ	0xFE5
   736                           fsr1l	equ	0xFE1
   737                           
   738                           	psect	bssBANK1
   739  000100                     __pbssBANK1:
   740                           	opt stack 0
   741  000100                     _eusart1RxBuffer:
   742                           	opt stack 0
   743  000100                     	ds	40
   744  000128                     _mcuRunTimeIn5SecTicks:
   745                           	opt stack 0
   746  000128                     	ds	4
   747  00012C                     _errno:
   748                           	opt stack 0
   749  00012C                     	ds	2
   750  00012E                     _sampleCount:
   751                           	opt stack 0
   752  00012E                     	ds	2
   753  000130                     _count:
   754                           	opt stack 0
   755  000130                     	ds	2
   756  000132                     _data:
   757                           	opt stack 0
   758  000132                     	ds	1
   759  000133                     _sampleArray:
   760                           	opt stack 0
   761  000133                     	ds	64
   762  000173                     _rxMsgData:
   763                           	opt stack 0
   764  000173                     	ds	20
   765  000187                     _rxMsgQueue:
   766                           	opt stack 0
   767  000187                     	ds	20
   768  00019B                     _synthLdTxArray:
   769                           	opt stack 0
   770  00019B                     	ds	12
   771  0001A7                     _synthLdRxArray:
   772                           	opt stack 0
   773  0001A7                     	ds	12
   774                           tblptru	equ	0xFF8
   775                           tblptrh	equ	0xFF7
   776                           tblptrl	equ	0xFF6
   777                           tablat	equ	0xFF5
   778                           postinc0	equ	0xFEE
   779                           wreg	equ	0xFE8
   780                           postdec1	equ	0xFE5
   781                           fsr1l	equ	0xFE1
   782                           
   783                           	psect	dataBANK1
   784  0001D5                     __pdataBANK1:
   785                           	opt stack 0
   786  0001D5                     _groupsArray:
   787                           	opt stack 0
   788  0001D5                     	ds	12
   789  0001E1                     _synthLdTxCnt:
   790                           	opt stack 0
   791  0001E1                     	ds	1
   792                           tblptru	equ	0xFF8
   793                           tblptrh	equ	0xFF7
   794                           tblptrl	equ	0xFF6
   795                           tablat	equ	0xFF5
   796                           postinc0	equ	0xFEE
   797                           wreg	equ	0xFE8
   798                           postdec1	equ	0xFE5
   799                           fsr1l	equ	0xFE1
   800                           
   801                           	psect	bssBANK2
   802  00025D                     __pbssBANK2:
   803                           	opt stack 0
   804  00025D                     _eusart1TxBuffer:
   805                           	opt stack 0
   806  00025D                     	ds	70
   807                           tblptru	equ	0xFF8
   808                           tblptrh	equ	0xFF7
   809                           tblptrl	equ	0xFF6
   810                           tablat	equ	0xFF5
   811                           postinc0	equ	0xFEE
   812                           wreg	equ	0xFE8
   813                           postdec1	equ	0xFE5
   814                           fsr1l	equ	0xFE1
   815                           
   816                           	psect	cstackBANK2
   817  000200                     __pcstackBANK2:
   818                           	opt stack 0
   819  000200                     FlashReadUart@TxMsg:
   820                           	opt stack 0
   821                           
   822                           ; 69 bytes @ 0x0
   823  000200                     	ds	69
   824  000245                     FlashReadUart@val:
   825                           	opt stack 0
   826                           
   827                           ; 8 bytes @ 0x45
   828  000245                     	ds	8
   829  00024D                     _FlashReadUart$609:
   830                           	opt stack 0
   831                           
   832                           ; 4 bytes @ 0x4D
   833  00024D                     	ds	4
   834  000251                     _FlashReadUart$610:
   835                           	opt stack 0
   836                           
   837                           ; 4 bytes @ 0x51
   838  000251                     	ds	4
   839  000255                     FlashReadUart@j:
   840                           	opt stack 0
   841                           
   842                           ; 2 bytes @ 0x55
   843  000255                     	ds	2
   844  000257                     FlashReadUart@idx:
   845                           	opt stack 0
   846                           
   847                           ; 2 bytes @ 0x57
   848  000257                     	ds	2
   849  000259                     FlashReadUart@offset:
   850                           	opt stack 0
   851                           
   852                           ; 2 bytes @ 0x59
   853  000259                     	ds	2
   854  00025B                     FlashReadUart@numOfSampleToRead:
   855                           	opt stack 0
   856                           
   857                           ; 2 bytes @ 0x5B
   858  00025B                     	ds	2
   859                           tblptru	equ	0xFF8
   860                           tblptrh	equ	0xFF7
   861                           tblptrl	equ	0xFF6
   862                           tablat	equ	0xFF5
   863                           postinc0	equ	0xFEE
   864                           wreg	equ	0xFE8
   865                           postdec1	equ	0xFE5
   866                           fsr1l	equ	0xFE1
   867                           
   868                           	psect	cstackBANK1
   869  0001B3                     __pcstackBANK1:
   870                           	opt stack 0
   871  0001B3                     SynthReadData@TxMsg:
   872                           	opt stack 0
   873                           
   874                           ; 18 bytes @ 0x0
   875  0001B3                     	ds	18
   876  0001C5                     SynthReadData@data_984:
   877                           	opt stack 0
   878                           
   879                           ; 1 bytes @ 0x12
   880  0001C5                     	ds	1
   881  0001C6                     SynthReadData@cType:
   882                           	opt stack 0
   883                           
   884                           ; 1 bytes @ 0x13
   885  0001C6                     	ds	1
   886  0001C7                     SynthReadData@eepromDataArray:
   887                           	opt stack 0
   888                           
   889                           ; 12 bytes @ 0x14
   890  0001C7                     	ds	12
   891  0001D3                     SynthReadData@regNum:
   892                           	opt stack 0
   893                           
   894                           ; 1 bytes @ 0x20
   895  0001D3                     	ds	1
   896  0001D4                     SynthReadData@byteNum:
   897                           	opt stack 0
   898                           
   899                           ; 1 bytes @ 0x21
   900  0001D4                     	ds	1
   901                           tblptru	equ	0xFF8
   902                           tblptrh	equ	0xFF7
   903                           tblptrl	equ	0xFF6
   904                           tablat	equ	0xFF5
   905                           postinc0	equ	0xFEE
   906                           wreg	equ	0xFE8
   907                           postdec1	equ	0xFE5
   908                           fsr1l	equ	0xFE1
   909                           
   910                           	psect	cstackBANK0
   911  000060                     __pcstackBANK0:
   912                           	opt stack 0
   913  000060                     ??_FlashSampleWrite:
   914  000060                     ??___ftdiv:
   915  000060                     strtol@sign:
   916                           	opt stack 0
   917  000060                     GetMcuFwVersion@compileData:
   918                           	opt stack 0
   919  000060                     GetMcuRunTime@TxMsg:
   920                           	opt stack 0
   921  000060                     SWSPI_Synth_send_bits@bitArray:
   922                           	opt stack 0
   923                           
   924                           ; 32 bytes @ 0x0
   925  000060                     	ds	1
   926  000061                     strtol@a:
   927                           	opt stack 0
   928                           
   929                           ; 4 bytes @ 0x1
   930  000061                     	ds	1
   931  000062                     FlashSampleWrite@rotateLeft:
   932                           	opt stack 0
   933                           
   934                           ; 2 bytes @ 0x2
   935  000062                     	ds	1
   936  000063                     ___ftdiv@cntr:
   937                           	opt stack 0
   938                           
   939                           ; 1 bytes @ 0x3
   940  000063                     	ds	1
   941  000064                     ___ftdiv@f3:
   942                           	opt stack 0
   943  000064                     GetMcuFwVersion@TxMsg:
   944                           	opt stack 0
   945                           
   946                           ; 18 bytes @ 0x4
   947  000064                     	ds	1
   948  000065                     strtol@c:
   949                           	opt stack 0
   950                           
   951                           ; 1 bytes @ 0x5
   952  000065                     	ds	1
   953  000066                     ?_GetIntFromUartData:
   954                           	opt stack 0
   955  000066                     GetIntFromUartData@data:
   956                           	opt stack 0
   957                           
   958                           ; 2 bytes @ 0x6
   959  000066                     	ds	1
   960  000067                     ___ftdiv@exp:
   961                           	opt stack 0
   962                           
   963                           ; 1 bytes @ 0x7
   964  000067                     	ds	1
   965  000068                     ___ftdiv@sign:
   966                           	opt stack 0
   967                           
   968                           ; 1 bytes @ 0x8
   969  000068                     	ds	1
   970  000069                     ?___ftmul:
   971                           	opt stack 0
   972  000069                     ___ftmul@f1:
   973                           	opt stack 0
   974  000069                     GetMcuRunTime@tempRunTime:
   975                           	opt stack 0
   976                           
   977                           ; 4 bytes @ 0x9
   978  000069                     	ds	3
   979  00006C                     ___ftmul@f2:
   980                           	opt stack 0
   981                           
   982                           ; 3 bytes @ 0xC
   983  00006C                     	ds	1
   984  00006D                     GetMcuRunTime@idx:
   985                           	opt stack 0
   986                           
   987                           ; 2 bytes @ 0xD
   988  00006D                     	ds	1
   989  00006E                     ??_GetIntFromUartData:
   990                           
   991                           ; 1 bytes @ 0xE
   992  00006E                     	ds	1
   993  00006F                     ??___ftmul:
   994                           
   995                           ; 1 bytes @ 0xF
   996  00006F                     	ds	1
   997  000070                     GetIntFromUartData@dataRegArr:
   998                           	opt stack 0
   999                           
  1000                           ; 10 bytes @ 0x10
  1001  000070                     	ds	2
  1002  000072                     ___ftmul@exp:
  1003                           	opt stack 0
  1004                           
  1005                           ; 1 bytes @ 0x12
  1006  000072                     	ds	1
  1007  000073                     ___ftmul@f3_as_product:
  1008                           	opt stack 0
  1009                           
  1010                           ; 3 bytes @ 0x13
  1011  000073                     	ds	3
  1012  000076                     ___ftmul@cntr:
  1013                           	opt stack 0
  1014  000076                     _GetMcuFwVersion$2689:
  1015                           	opt stack 0
  1016                           
  1017                           ; 2 bytes @ 0x16
  1018  000076                     	ds	1
  1019  000077                     ___ftmul@sign:
  1020                           	opt stack 0
  1021                           
  1022                           ; 1 bytes @ 0x17
  1023  000077                     	ds	1
  1024  000078                     ??_CheckFlashPrecentage:
  1025  000078                     ?___ftadd:
  1026                           	opt stack 0
  1027  000078                     ?___fttol:
  1028                           	opt stack 0
  1029  000078                     _GetMcuFwVersion$2693:
  1030                           	opt stack 0
  1031  000078                     ___ftadd@f1:
  1032                           	opt stack 0
  1033  000078                     ___fttol@f1:
  1034                           	opt stack 0
  1035                           
  1036                           ; 3 bytes @ 0x18
  1037  000078                     	ds	2
  1038  00007A                     GetIntFromUartData@num:
  1039                           	opt stack 0
  1040                           
  1041                           ; 1 bytes @ 0x1A
  1042  00007A                     	ds	1
  1043  00007B                     GetIntFromUartData@recVal:
  1044                           	opt stack 0
  1045  00007B                     ___ftadd@f2:
  1046                           	opt stack 0
  1047                           
  1048                           ; 3 bytes @ 0x1B
  1049  00007B                     	ds	1
  1050  00007C                     ??___fttol:
  1051  00007C                     CheckFlashPrecentage@precentage:
  1052                           	opt stack 0
  1053  00007C                     GetIntFromUartData@retVal:
  1054                           	opt stack 0
  1055                           
  1056                           ; 8 bytes @ 0x1C
  1057  00007C                     	ds	2
  1058  00007E                     ??___ftadd:
  1059                           
  1060                           ; 1 bytes @ 0x1E
  1061  00007E                     	ds	2
  1062  000080                     SWSPI_Synth_send_bits@mask:
  1063                           	opt stack 0
  1064                           
  1065                           ; 4 bytes @ 0x20
  1066  000080                     	ds	1
  1067  000081                     ___ftadd@sign:
  1068                           	opt stack 0
  1069  000081                     ___fttol@sign1:
  1070                           	opt stack 0
  1071                           
  1072                           ; 1 bytes @ 0x21
  1073  000081                     	ds	1
  1074  000082                     ___ftadd@exp2:
  1075                           	opt stack 0
  1076  000082                     ___fttol@lval:
  1077                           	opt stack 0
  1078                           
  1079                           ; 4 bytes @ 0x22
  1080  000082                     	ds	1
  1081  000083                     ___ftadd@exp1:
  1082                           	opt stack 0
  1083                           
  1084                           ; 1 bytes @ 0x23
  1085  000083                     	ds	1
  1086  000084                     ?___ftsub:
  1087                           	opt stack 0
  1088  000084                     ?_eval_poly:
  1089                           	opt stack 0
  1090  000084                     SWSPI_Synth_send_bits@count:
  1091                           	opt stack 0
  1092  000084                     GetIntFromUartData@idxCon:
  1093                           	opt stack 0
  1094  000084                     ___ftsub@f1:
  1095                           	opt stack 0
  1096  000084                     eval_poly@x:
  1097                           	opt stack 0
  1098                           
  1099                           ; 3 bytes @ 0x24
  1100  000084                     	ds	1
  1101  000085                     SWSPI_Synth_send_bits@phrType:
  1102                           	opt stack 0
  1103                           
  1104                           ; 1 bytes @ 0x25
  1105  000085                     	ds	1
  1106  000086                     SWSPI_send_word@datac:
  1107                           	opt stack 0
  1108  000086                     GetIntFromUartData@idxData:
  1109                           	opt stack 0
  1110  000086                     ___fttol@exp1:
  1111                           	opt stack 0
  1112                           
  1113                           ; 1 bytes @ 0x26
  1114  000086                     	ds	1
  1115  000087                     ?___altoft:
  1116                           	opt stack 0
  1117  000087                     FlashReadUart@data:
  1118                           	opt stack 0
  1119  000087                     SWSPI_send_word@idx:
  1120                           	opt stack 0
  1121  000087                     eval_poly@d:
  1122                           	opt stack 0
  1123  000087                     ___ftsub@f2:
  1124                           	opt stack 0
  1125  000087                     ___altoft@c:
  1126                           	opt stack 0
  1127                           
  1128                           ; 4 bytes @ 0x27
  1129  000087                     	ds	2
  1130  000089                     ??_FlashReadUart:
  1131  000089                     SWSPI_send_word@phrType:
  1132                           	opt stack 0
  1133  000089                     eval_poly@n:
  1134                           	opt stack 0
  1135                           
  1136                           ; 2 bytes @ 0x29
  1137  000089                     	ds	1
  1138  00008A                     DacSetValue@data:
  1139                           	opt stack 0
  1140  00008A                     UpdateSynthFreq@data:
  1141                           	opt stack 0
  1142                           
  1143                           ; 2 bytes @ 0x2A
  1144  00008A                     	ds	1
  1145  00008B                     ??___altoft:
  1146  00008B                     eval_poly@res:
  1147                           	opt stack 0
  1148                           
  1149                           ; 3 bytes @ 0x2B
  1150  00008B                     	ds	1
  1151  00008C                     ??_DacSetValue:
  1152  00008C                     UpdateSynthFreq@cType:
  1153                           	opt stack 0
  1154                           
  1155                           ; 1 bytes @ 0x2C
  1156  00008C                     	ds	1
  1157  00008D                     UpdateSynthFreq@retVal:
  1158                           	opt stack 0
  1159                           
  1160                           ; 8 bytes @ 0x2D
  1161  00008D                     	ds	1
  1162  00008E                     ?_log:
  1163                           	opt stack 0
  1164  00008E                     ?_ldexp:
  1165                           	opt stack 0
  1166  00008E                     ldexp@value:
  1167                           	opt stack 0
  1168  00008E                     log@x:
  1169                           	opt stack 0
  1170                           
  1171                           ; 3 bytes @ 0x2E
  1172  00008E                     	ds	1
  1173  00008F                     ?_floor:
  1174                           	opt stack 0
  1175  00008F                     floor@x:
  1176                           	opt stack 0
  1177                           
  1178                           ; 3 bytes @ 0x2F
  1179  00008F                     	ds	1
  1180  000090                     DacSetValue@dacIndex:
  1181                           	opt stack 0
  1182                           
  1183                           ; 1 bytes @ 0x30
  1184  000090                     	ds	1
  1185  000091                     ldexp@newexp:
  1186                           	opt stack 0
  1187  000091                     log@exponent:
  1188                           	opt stack 0
  1189  000091                     DacSetValue@retVal:
  1190                           	opt stack 0
  1191                           
  1192                           ; 8 bytes @ 0x31
  1193  000091                     	ds	1
  1194  000092                     floor@i:
  1195                           	opt stack 0
  1196                           
  1197                           ; 3 bytes @ 0x32
  1198  000092                     	ds	1
  1199  000093                     ??_ldexp:
  1200                           
  1201                           ; 1 bytes @ 0x33
  1202  000093                     	ds	2
  1203  000095                     floor@expon:
  1204                           	opt stack 0
  1205                           
  1206                           ; 2 bytes @ 0x35
  1207  000095                     	ds	2
  1208  000097                     ?_exp:
  1209                           	opt stack 0
  1210  000097                     exp@x:
  1211                           	opt stack 0
  1212                           
  1213                           ; 3 bytes @ 0x37
  1214  000097                     	ds	3
  1215  00009A                     _exp$3596:
  1216                           	opt stack 0
  1217                           
  1218                           ; 3 bytes @ 0x3A
  1219  00009A                     	ds	3
  1220  00009D                     exp@exponent:
  1221                           	opt stack 0
  1222                           
  1223                           ; 2 bytes @ 0x3D
  1224  00009D                     	ds	2
  1225  00009F                     exp@sign:
  1226                           	opt stack 0
  1227                           
  1228                           ; 1 bytes @ 0x3F
  1229  00009F                     	ds	1
  1230  0000A0                     ?_pow:
  1231                           	opt stack 0
  1232  0000A0                     pow@x:
  1233                           	opt stack 0
  1234                           
  1235                           ; 3 bytes @ 0x40
  1236  0000A0                     	ds	3
  1237  0000A3                     pow@y:
  1238                           	opt stack 0
  1239                           
  1240                           ; 3 bytes @ 0x43
  1241  0000A3                     	ds	3
  1242  0000A6                     _pow$3594:
  1243                           	opt stack 0
  1244                           
  1245                           ; 3 bytes @ 0x46
  1246  0000A6                     	ds	3
  1247  0000A9                     _pow$3595:
  1248                           	opt stack 0
  1249                           
  1250                           ; 3 bytes @ 0x49
  1251  0000A9                     	ds	3
  1252  0000AC                     pow@sign:
  1253                           	opt stack 0
  1254                           
  1255                           ; 1 bytes @ 0x4C
  1256  0000AC                     	ds	1
  1257  0000AD                     pow@yi:
  1258                           	opt stack 0
  1259                           
  1260                           ; 4 bytes @ 0x4D
  1261  0000AD                     	ds	4
  1262  0000B1                     ??_AdcConvert:
  1263  0000B1                     ?_ReadIntFromEeprom:
  1264                           	opt stack 0
  1265  0000B1                     ReadIntFromEeprom@numOfByes:
  1266                           	opt stack 0
  1267                           
  1268                           ; 2 bytes @ 0x51
  1269  0000B1                     	ds	2
  1270  0000B3                     AdcConvert@_adcResult:
  1271                           	opt stack 0
  1272                           
  1273                           ; 2 bytes @ 0x53
  1274  0000B3                     	ds	2
  1275  0000B5                     ??_ReadIntFromEeprom:
  1276  0000B5                     AdcConvert@ldRxSate:
  1277                           	opt stack 0
  1278                           
  1279                           ; 2 bytes @ 0x55
  1280  0000B5                     	ds	2
  1281  0000B7                     AdcConvert@ldTxSate:
  1282                           	opt stack 0
  1283                           
  1284                           ; 2 bytes @ 0x57
  1285  0000B7                     	ds	1
  1286  0000B8                     ReadIntFromEeprom@base:
  1287                           	opt stack 0
  1288                           
  1289                           ; 4 bytes @ 0x58
  1290  0000B8                     	ds	1
  1291  0000B9                     AdcConvert@_adcResult_347:
  1292                           	opt stack 0
  1293                           
  1294                           ; 2 bytes @ 0x59
  1295  0000B9                     	ds	2
  1296  0000BB                     _AdcConvert$3591:
  1297                           	opt stack 0
  1298                           
  1299                           ; 3 bytes @ 0x5B
  1300  0000BB                     	ds	1
  1301  0000BC                     _ReadIntFromEeprom$3592:
  1302                           	opt stack 0
  1303                           
  1304                           ; 3 bytes @ 0x5C
  1305  0000BC                     	ds	2
  1306  0000BE                     AdcConvert@adcRes:
  1307                           	opt stack 0
  1308                           
  1309                           ; 2 bytes @ 0x5E
  1310  0000BE                     	ds	1
  1311  0000BF                     _ReadIntFromEeprom$3593:
  1312                           	opt stack 0
  1313                           
  1314                           ; 3 bytes @ 0x5F
  1315  0000BF                     	ds	1
  1316  0000C0                     AdcConvert@idx:
  1317                           	opt stack 0
  1318                           
  1319                           ; 1 bytes @ 0x60
  1320  0000C0                     	ds	2
  1321  0000C2                     ReadIntFromEeprom@address:
  1322                           	opt stack 0
  1323                           
  1324                           ; 1 bytes @ 0x62
  1325  0000C2                     	ds	1
  1326  0000C3                     ReadIntFromEeprom@retVal:
  1327                           	opt stack 0
  1328                           
  1329                           ; 4 bytes @ 0x63
  1330  0000C3                     	ds	4
  1331  0000C7                     ReadIntFromEeprom@idx:
  1332                           	opt stack 0
  1333                           
  1334                           ; 1 bytes @ 0x67
  1335  0000C7                     	ds	1
  1336  0000C8                     ??_DacInit:
  1337  0000C8                     DacReadValue@data:
  1338                           	opt stack 0
  1339  0000C8                     SynthReadData@data:
  1340                           	opt stack 0
  1341  0000C8                     InitSynth@EepromVal:
  1342                           	opt stack 0
  1343                           
  1344                           ; 4 bytes @ 0x68
  1345  0000C8                     	ds	2
  1346  0000CA                     ??_DacReadValue:
  1347  0000CA                     DacInit@dacInput:
  1348                           	opt stack 0
  1349                           
  1350                           ; 2 bytes @ 0x6A
  1351  0000CA                     	ds	2
  1352  0000CC                     DacInit@idx:
  1353                           	opt stack 0
  1354  0000CC                     DacReadValue@regNum:
  1355                           	opt stack 0
  1356  0000CC                     InitSynth@cType:
  1357                           	opt stack 0
  1358                           
  1359                           ; 1 bytes @ 0x6C
  1360  0000CC                     	ds	1
  1361  0000CD                     DacReadValue@byteNum:
  1362                           	opt stack 0
  1363  0000CD                     InitSynth@idx:
  1364                           	opt stack 0
  1365                           
  1366                           ; 1 bytes @ 0x6D
  1367  0000CD                     	ds	1
  1368  0000CE                     InitSynth@regNum:
  1369                           	opt stack 0
  1370  0000CE                     DacReadValue@readVal:
  1371                           	opt stack 0
  1372                           
  1373                           ; 2 bytes @ 0x6E
  1374  0000CE                     	ds	1
  1375  0000CF                     SetSynthOper@cType:
  1376                           	opt stack 0
  1377                           
  1378                           ; 1 bytes @ 0x6F
  1379  0000CF                     	ds	1
  1380  0000D0                     DacReadValue@dacIndex:
  1381                           	opt stack 0
  1382                           
  1383                           ; 1 bytes @ 0x70
  1384  0000D0                     	ds	1
  1385  0000D1                     DacReadValue@TxMsg:
  1386                           	opt stack 0
  1387                           
  1388                           ; 7 bytes @ 0x71
  1389  0000D1                     	ds	7
  1390  0000D8                     DacReadValue@byteIdx:
  1391                           	opt stack 0
  1392                           
  1393                           ; 2 bytes @ 0x78
  1394  0000D8                     	ds	2
  1395  0000DA                     GroupAdc@data:
  1396                           	opt stack 0
  1397  0000DA                     GroupSynthesizers@data:
  1398                           	opt stack 0
  1399  0000DA                     GroupFlashMemory@data:
  1400                           	opt stack 0
  1401  0000DA                     GroupDAC@data:
  1402                           	opt stack 0
  1403  0000DA                     
  1404                           ; 3 bytes @ 0x7A
  1405  0000DA                     	ds	2
  1406  0000DC                     GroupAdc@request:
  1407                           	opt stack 0
  1408  0000DC                     GroupSynthesizers@request:
  1409                           	opt stack 0
  1410  0000DC                     GroupFlashMemory@request:
  1411                           	opt stack 0
  1412  0000DC                     GroupDAC@request:
  1413                           	opt stack 0
  1414                           
  1415                           ; 1 bytes @ 0x7C
  1416  0000DC                     	ds	1
  1417  0000DD                     ??_readUartMessage:
  1418  0000DD                     GroupControlMcu@request:
  1419                           	opt stack 0
  1420  0000DD                     GroupStatusAndVersion@request:
  1421                           	opt stack 0
  1422                           
  1423                           ; 1 bytes @ 0x7D
  1424  0000DD                     	ds	4
  1425  0000E1                     readUartMessage@idx:
  1426                           	opt stack 0
  1427                           
  1428                           ; 2 bytes @ 0x81
  1429  0000E1                     	ds	2
  1430  0000E3                     readUartMessage@chRec:
  1431                           	opt stack 0
  1432                           
  1433                           ; 1 bytes @ 0x83
  1434  0000E3                     	ds	1
  1435                           tblptru	equ	0xFF8
  1436                           tblptrh	equ	0xFF7
  1437                           tblptrl	equ	0xFF6
  1438                           tablat	equ	0xFF5
  1439                           postinc0	equ	0xFEE
  1440                           wreg	equ	0xFE8
  1441                           postdec1	equ	0xFE5
  1442                           fsr1l	equ	0xFE1
  1443                           
  1444                           	psect	cstackCOMRAM
  1445  000001                     __pcstackCOMRAM:
  1446                           	opt stack 0
  1447  000001                     ?___lwmod:
  1448                           	opt stack 0
  1449  000001                     ___lwmod@dividend:
  1450                           	opt stack 0
  1451                           
  1452                           ; 2 bytes @ 0x0
  1453  000001                     	ds	2
  1454  000003                     ___lwmod@divisor:
  1455                           	opt stack 0
  1456                           
  1457                           ; 2 bytes @ 0x2
  1458  000003                     	ds	2
  1459  000005                     ___lwmod@counter:
  1460                           	opt stack 0
  1461                           
  1462                           ; 1 bytes @ 0x4
  1463  000005                     	ds	1
  1464  000006                     ??_INTERRUPT_InterruptManager:
  1465                           
  1466                           ; 1 bytes @ 0x5
  1467  000006                     	ds	18
  1468  000018                     ??_EUSART1_Read:
  1469  000018                     ??_isspace:
  1470  000018                     ??_isdigit:
  1471  000018                     ??_isupper:
  1472  000018                     ??_BlinkErrorLeds:
  1473  000018                     ??_BlinkOkLeds:
  1474  000018                     ??_keepAliveSignalLed:
  1475  000018                     ?_ADC_GetConversion:
  1476                           	opt stack 0
  1477  000018                     ?_GetUint16FromBitArray:
  1478                           	opt stack 0
  1479  000018                     ?_abs:
  1480                           	opt stack 0
  1481  000018                     ?___wmul:
  1482                           	opt stack 0
  1483  000018                     ?___awmod:
  1484                           	opt stack 0
  1485  000018                     ?___ftpack:
  1486                           	opt stack 0
  1487  000018                     ?_frexp:
  1488                           	opt stack 0
  1489  000018                     ?___ftneg:
  1490                           	opt stack 0
  1491  000018                     ?___lldiv:
  1492                           	opt stack 0
  1493  000018                     ?___llmod:
  1494                           	opt stack 0
  1495  000018                     SwSpi_Data_Pin@cPinMode:
  1496                           	opt stack 0
  1497  000018                     SwSpi_Clk_Pin@cPinMode:
  1498                           	opt stack 0
  1499  000018                     SwSpi_Set_CE_Pin@cPinMode:
  1500                           	opt stack 0
  1501  000018                     SwSpi_Set_Synth_Le_Pin@cPinMode:
  1502                           	opt stack 0
  1503  000018                     SwSpi_Set_Dac_Sync_Pin@cPinMode:
  1504                           	opt stack 0
  1505  000018                     EUSART1_Write@txData:
  1506                           	opt stack 0
  1507  000018                     DATAEE_WriteByte@bData:
  1508                           	opt stack 0
  1509  000018                     DATAEE_ReadByte@bAdd:
  1510                           	opt stack 0
  1511  000018                     toupper@c:
  1512                           	opt stack 0
  1513  000018                     IOCB4_SetInterruptHandler@InterruptHandler:
  1514                           	opt stack 0
  1515  000018                     IOCB5_SetInterruptHandler@InterruptHandler:
  1516                           	opt stack 0
  1517  000018                     TMR0_SetInterruptHandler@InterruptHandler:
  1518                           	opt stack 0
  1519  000018                     crc8@dataArray:
  1520                           	opt stack 0
  1521  000018                     GetUint16FromBitArray@bitarray:
  1522                           	opt stack 0
  1523  000018                     Make32bitsArray@array:
  1524                           	opt stack 0
  1525  000018                     ___wmul@multiplier:
  1526                           	opt stack 0
  1527  000018                     abs@a:
  1528                           	opt stack 0
  1529  000018                     ___awmod@dividend:
  1530                           	opt stack 0
  1531  000018                     memset@p1:
  1532                           	opt stack 0
  1533  000018                     ___ftpack@arg:
  1534                           	opt stack 0
  1535  000018                     ___ftge@ff1:
  1536                           	opt stack 0
  1537  000018                     ___ftneg@f1:
  1538                           	opt stack 0
  1539  000018                     frexp@value:
  1540                           	opt stack 0
  1541  000018                     FLASH_ReadByte@flashAddr:
  1542                           	opt stack 0
  1543  000018                     FLASH_EraseBlock@baseAddr:
  1544                           	opt stack 0
  1545  000018                     make8@data:
  1546                           	opt stack 0
  1547  000018                     ___lldiv@dividend:
  1548                           	opt stack 0
  1549  000018                     ___llmod@dividend:
  1550                           	opt stack 0
  1551                           
  1552                           ; 4 bytes @ 0x17
  1553  000018                     	ds	1
  1554  000019                     EepromRead@address:
  1555                           	opt stack 0
  1556  000019                     SwSpi_Data_Pin@phrType:
  1557                           	opt stack 0
  1558  000019                     SwSpi_Clk_Pin@phrType:
  1559                           	opt stack 0
  1560  000019                     SwSpi_Set_CE_Pin@phrType:
  1561                           	opt stack 0
  1562  000019                     SwSpi_Set_Synth_Le_Pin@phrType:
  1563                           	opt stack 0
  1564  000019                     DATAEE_WriteByte@bAdd:
  1565                           	opt stack 0
  1566  000019                     _isdigit$3321:
  1567                           	opt stack 0
  1568  000019                     _isspace$3324:
  1569                           	opt stack 0
  1570  000019                     _isupper$3327:
  1571                           	opt stack 0
  1572  000019                     WriteUartMessage@dataBuf:
  1573                           	opt stack 0
  1574  000019                     EUSART1_Read@readValue:
  1575                           	opt stack 0
  1576                           
  1577                           ; 2 bytes @ 0x18
  1578  000019                     	ds	1
  1579  00001A                     ??_ADC_GetConversion:
  1580  00001A                     ??_GetUint16FromBitArray:
  1581  00001A                     ??_abs:
  1582  00001A                     ??_TMR0_Initialize:
  1583  00001A                     ?___lmul:
  1584                           	opt stack 0
  1585  00001A                     SWSPI_DAC_send_bits@data:
  1586                           	opt stack 0
  1587  00001A                     DATAEE_WriteByte@GIEBitValue:
  1588                           	opt stack 0
  1589  00001A                     isdigit@c:
  1590                           	opt stack 0
  1591  00001A                     isspace@c:
  1592                           	opt stack 0
  1593  00001A                     isupper@c:
  1594                           	opt stack 0
  1595  00001A                     crc8@dataSize:
  1596                           	opt stack 0
  1597  00001A                     ___wmul@multiplicand:
  1598                           	opt stack 0
  1599  00001A                     ___awmod@divisor:
  1600                           	opt stack 0
  1601  00001A                     memset@c:
  1602                           	opt stack 0
  1603  00001A                     Make32bitsArray@data:
  1604                           	opt stack 0
  1605  00001A                     ___lmul@multiplier:
  1606                           	opt stack 0
  1607                           
  1608                           ; 4 bytes @ 0x19
  1609  00001A                     	ds	1
  1610  00001B                     ??_isalpha:
  1611  00001B                     BlinkErrorLeds@state:
  1612                           	opt stack 0
  1613  00001B                     BlinkOkLeds@state:
  1614                           	opt stack 0
  1615  00001B                     EepromWrite@data:
  1616                           	opt stack 0
  1617  00001B                     SWSPI_DAC_send_bits@count:
  1618                           	opt stack 0
  1619  00001B                     ___ftpack@exp:
  1620                           	opt stack 0
  1621  00001B                     WriteUartMessage@dataSize:
  1622                           	opt stack 0
  1623  00001B                     frexp@eptr:
  1624                           	opt stack 0
  1625  00001B                     ___ftge@ff2:
  1626                           	opt stack 0
  1627                           
  1628                           ; 3 bytes @ 0x1A
  1629  00001B                     	ds	1
  1630  00001C                     ??_crc8:
  1631  00001C                     EepromWrite@address:
  1632                           	opt stack 0
  1633  00001C                     SWSPI_DAC_send_bits@phrType:
  1634                           	opt stack 0
  1635  00001C                     FLASH_EraseBlock@GIEBitValue:
  1636                           	opt stack 0
  1637  00001C                     ADC_GetConversion@channel:
  1638                           	opt stack 0
  1639  00001C                     make8@dataLocation:
  1640                           	opt stack 0
  1641  00001C                     ___awmod@counter:
  1642                           	opt stack 0
  1643  00001C                     ___ftpack@sign:
  1644                           	opt stack 0
  1645  00001C                     _isalpha$3318:
  1646                           	opt stack 0
  1647  00001C                     BlinkErrorLeds@idx:
  1648                           	opt stack 0
  1649  00001C                     BlinkOkLeds@idx:
  1650                           	opt stack 0
  1651  00001C                     ___wmul@product:
  1652                           	opt stack 0
  1653  00001C                     memset@n:
  1654                           	opt stack 0
  1655  00001C                     ___lldiv@divisor:
  1656                           	opt stack 0
  1657  00001C                     ___llmod@divisor:
  1658                           	opt stack 0
  1659                           
  1660                           ; 4 bytes @ 0x1B
  1661  00001C                     	ds	1
  1662  00001D                     ??_make8:
  1663  00001D                     ??___ftpack:
  1664  00001D                     ??_frexp:
  1665  00001D                     ??_WriteUartMessage:
  1666  00001D                     ___awmod@sign:
  1667                           	opt stack 0
  1668  00001D                     isalpha@c:
  1669                           	opt stack 0
  1670  00001D                     crc8@crc:
  1671                           	opt stack 0
  1672  00001D                     GetUint16FromBitArray@res:
  1673                           	opt stack 0
  1674  00001D                     FLASH_WriteBlock@writeAddr:
  1675                           	opt stack 0
  1676                           
  1677                           ; 4 bytes @ 0x1C
  1678  00001D                     	ds	1
  1679  00001E                     ??_Make32bitsArray:
  1680  00001E                     ??___ftge:
  1681  00001E                     WriteUartMessage@idx:
  1682                           	opt stack 0
  1683  00001E                     memset@p:
  1684                           	opt stack 0
  1685  00001E                     ___lmul@multiplicand:
  1686                           	opt stack 0
  1687                           
  1688                           ; 4 bytes @ 0x1D
  1689  00001E                     	ds	1
  1690  00001F                     GetUint16FromBitArray@state:
  1691                           	opt stack 0
  1692  00001F                     crc8@i:
  1693                           	opt stack 0
  1694                           
  1695                           ; 2 bytes @ 0x1E
  1696  00001F                     	ds	1
  1697  000020                     ?___awtoft:
  1698                           	opt stack 0
  1699  000020                     ?___lltoft:
  1700                           	opt stack 0
  1701  000020                     ?___lwtoft:
  1702                           	opt stack 0
  1703  000020                     ___llmod@counter:
  1704                           	opt stack 0
  1705  000020                     ZeroArray@array:
  1706                           	opt stack 0
  1707  000020                     FillArray@array:
  1708                           	opt stack 0
  1709  000020                     GetUint16FromBitArray@i:
  1710                           	opt stack 0
  1711  000020                     Make32bitsArray@idx:
  1712                           	opt stack 0
  1713  000020                     ___awtoft@c:
  1714                           	opt stack 0
  1715  000020                     ___lwtoft@c:
  1716                           	opt stack 0
  1717  000020                     ___lldiv@quotient:
  1718                           	opt stack 0
  1719  000020                     ___lltoft@c:
  1720                           	opt stack 0
  1721                           
  1722                           ; 4 bytes @ 0x1F
  1723  000020                     	ds	1
  1724  000021                     FLASH_WriteBlock@flashWrBufPtr:
  1725                           	opt stack 0
  1726  000021                     StoreIntInEeprom@data:
  1727                           	opt stack 0
  1728                           
  1729                           ; 4 bytes @ 0x20
  1730  000021                     	ds	1
  1731  000022                     ZeroArray@size:
  1732                           	opt stack 0
  1733  000022                     FillArray@size:
  1734                           	opt stack 0
  1735  000022                     ___lmul@product:
  1736                           	opt stack 0
  1737                           
  1738                           ; 4 bytes @ 0x21
  1739  000022                     	ds	1
  1740  000023                     ??_FLASH_WriteBlock:
  1741  000023                     ___awtoft@sign:
  1742                           	opt stack 0
  1743                           
  1744                           ; 1 bytes @ 0x22
  1745  000023                     	ds	1
  1746  000024                     ??_GetMcuFwVersion:
  1747  000024                     ??_FlashReadCondition:
  1748  000024                     ??___lltoft:
  1749  000024                     SendAckMessage@inRequest:
  1750                           	opt stack 0
  1751  000024                     FillArray@value:
  1752                           	opt stack 0
  1753  000024                     ___lldiv@counter:
  1754                           	opt stack 0
  1755                           
  1756                           ; 1 bytes @ 0x23
  1757  000024                     	ds	1
  1758  000025                     ??_GetMcuRunTime:
  1759  000025                     SendAckMessage@inGroup:
  1760                           	opt stack 0
  1761  000025                     StoreIntInEeprom@address:
  1762                           	opt stack 0
  1763  000025                     SWSPI_Synth_send_bits@data:
  1764                           	opt stack 0
  1765                           
  1766                           ; 4 bytes @ 0x24
  1767  000025                     	ds	1
  1768  000026                     ?_strtol:
  1769                           	opt stack 0
  1770  000026                     StoreIntInEeprom@numOfByes:
  1771                           	opt stack 0
  1772  000026                     strtol@s:
  1773                           	opt stack 0
  1774  000026                     SendAckMessage@TxMsg:
  1775                           	opt stack 0
  1776                           
  1777                           ; 6 bytes @ 0x25
  1778  000026                     	ds	1
  1779  000027                     FLASH_WriteBlock@blockStartAddr:
  1780                           	opt stack 0
  1781                           
  1782                           ; 4 bytes @ 0x26
  1783  000027                     	ds	1
  1784  000028                     StoreIntInEeprom@val:
  1785                           	opt stack 0
  1786  000028                     ___lltoft@exp:
  1787                           	opt stack 0
  1788  000028                     strtol@endptr:
  1789                           	opt stack 0
  1790  000028                     FlashReadCondition@TxMsg:
  1791                           	opt stack 0
  1792                           
  1793                           ; 9 bytes @ 0x27
  1794  000028                     	ds	1
  1795  000029                     ?___ftdiv:
  1796                           	opt stack 0
  1797  000029                     StoreIntInEeprom@idx:
  1798                           	opt stack 0
  1799  000029                     ___ftdiv@f1:
  1800                           	opt stack 0
  1801  000029                     SWSPI_send_word@data:
  1802                           	opt stack 0
  1803                           
  1804                           ; 4 bytes @ 0x28
  1805  000029                     	ds	1
  1806  00002A                     strtol@base:
  1807                           	opt stack 0
  1808                           
  1809                           ; 2 bytes @ 0x29
  1810  00002A                     	ds	1
  1811  00002B                     FLASH_WriteBlock@GIEBitValue:
  1812                           	opt stack 0
  1813                           
  1814                           ; 1 bytes @ 0x2A
  1815  00002B                     	ds	1
  1816  00002C                     ??_strtol:
  1817  00002C                     ??_testLeds:
  1818  00002C                     FLASH_WriteBlock@i:
  1819                           	opt stack 0
  1820  00002C                     SetChannelMode@data:
  1821                           	opt stack 0
  1822  00002C                     ___ftdiv@f2:
  1823                           	opt stack 0
  1824                           
  1825                           ; 3 bytes @ 0x2B
  1826  00002C                     	ds	1
  1827  00002D                     SWSPI_send_word@dataSize:
  1828                           	opt stack 0
  1829  00002D                     testLeds@idx:
  1830                           	opt stack 0
  1831  00002D                     FlashSampleWrite@sampleData:
  1832                           	opt stack 0
  1833                           
  1834                           ; 2 bytes @ 0x2C
  1835  00002D                     	ds	1
  1836  00002E                     
  1837                           ; 1 bytes @ 0x2D
  1838  00002E                     	ds	1
  1839  00002F                     ??_eval_poly:
  1840  00002F                     FlashSampleWrite@channelNum:
  1841                           	opt stack 0
  1842  00002F                     ___altoft@exp:
  1843                           	opt stack 0
  1844                           
  1845                           ; 1 bytes @ 0x2E
  1846  00002F                     	ds	1
  1847  000030                     ___altoft@sign:
  1848                           	opt stack 0
  1849                           
  1850                           ; 1 bytes @ 0x2F
  1851  000030                     	ds	1
  1852  000031                     tblptru	equ	0xFF8
  1853                           tblptrh	equ	0xFF7
  1854                           tblptrl	equ	0xFF6
  1855                           tablat	equ	0xFF5
  1856                           postinc0	equ	0xFEE
  1857                           wreg	equ	0xFE8
  1858                           postdec1	equ	0xFE5
  1859                           fsr1l	equ	0xFE1
  1860                           
  1861                           ; 1 bytes @ 0x30
  1862 ;;
  1863 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1864 ;;
  1865 ;; *************** function _main *****************
  1866 ;; Defined at:
  1867 ;;		line 13 in file "main.c"
  1868 ;; Parameters:    Size  Location     Type
  1869 ;;		None
  1870 ;; Auto vars:     Size  Location     Type
  1871 ;;		None
  1872 ;; Return value:  Size  Location     Type
  1873 ;;                  1    wreg      void 
  1874 ;; Registers used:
  1875 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  1876 ;; Tracked objects:
  1877 ;;		On entry : 0/0
  1878 ;;		On exit  : 0/0
  1879 ;;		Unchanged: 0/0
  1880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1881 ;;      Params:         0       0       0       0       0       0       0
  1882 ;;      Locals:         0       0       0       0       0       0       0
  1883 ;;      Temps:          0       0       0       0       0       0       0
  1884 ;;      Totals:         0       0       0       0       0       0       0
  1885 ;;Total ram usage:        0 bytes
  1886 ;; Hardware stack levels required when called:   14
  1887 ;; This function calls:
  1888 ;;		_AdcConvert
  1889 ;;		_BlinkErrorLeds
  1890 ;;		_BlinkOkLeds
  1891 ;;		_CheckFlashPrecentage
  1892 ;;		_InitSystemApplicationManagers
  1893 ;;		_SendSystemStartAck
  1894 ;;		_SetMcuRunTime
  1895 ;;		_SetMcuSystem
  1896 ;;		_SynthLdDetect
  1897 ;;		_keepAliveSignalLed
  1898 ;;		_keepAliveSignalUart
  1899 ;;		_readUartMessage
  1900 ;; This function is called by:
  1901 ;;		Startup code after reset
  1902 ;; This function uses a non-reentrant model
  1903 ;;
  1904                           
  1905                           	psect	text0
  1906  003636                     __ptext0:
  1907                           	opt stack 0
  1908  003636                     _main:
  1909                           	opt stack 17
  1910                           
  1911                           ;main.c: 16: SetMcuSystem();
  1912                           
  1913                           ;incstack = 0
  1914  003636  EC85  F022         	call	_SetMcuSystem	;wreg free
  1915                           
  1916                           ;main.c: 19: InitSystemApplicationManagers();
  1917  00363A  EC1C  F022         	call	_InitSystemApplicationManagers	;wreg free
  1918                           
  1919                           ;main.c: 22: SendSystemStartAck();
  1920  00363E  EC7F  F022         	call	_SendSystemStartAck	;wreg free
  1921                           
  1922                           ;main.c: 25: BlinkOkLeds(OK_START_SYSTEM);
  1923  003642  0E03               	movlw	3
  1924  003644  EC90  F01C         	call	_BlinkOkLeds
  1925  003648                     
  1926                           ;main.c: 28: {
  1927                           ;main.c: 29: readUartMessage();
  1928  003648  EC90  F00A         	call	_readUartMessage	;wreg free
  1929                           
  1930                           ;main.c: 31: if (Timer0_OneSec == 1)
  1931  00364C  0100               	movlb	0	; () banked
  1932  00364E  05F1               	decf	_Timer0_OneSec& (0+255),w,b	;volatile
  1933  003650  A4D8               	btfss	status,2,c
  1934  003652  D006               	goto	l1597
  1935                           
  1936                           ; BSR set to: 0
  1937                           ;main.c: 32: {
  1938                           ;main.c: 33: SetMcuRunTime();
  1939  003654  EC8F  F01E         	call	_SetMcuRunTime	;wreg free
  1940                           
  1941                           ;main.c: 34: Timer0_OneSec = 0;
  1942  003658  0E00               	movlw	0
  1943  00365A  0100               	movlb	0	; () banked
  1944  00365C  6FF1               	movwf	_Timer0_OneSec& (0+255),b	;volatile
  1945                           
  1946                           ;main.c: 35: }
  1947  00365E  D7F4               	goto	l1596
  1948  003660                     l1597:
  1949                           
  1950                           ; BSR set to: 0
  1951                           ;main.c: 36: else if (Timer0_Sampling == 1)
  1952                           
  1953                           ; BSR set to: 0
  1954  003660  05F3               	decf	_Timer0_Sampling& (0+255),w,b	;volatile
  1955  003662  A4D8               	btfss	status,2,c
  1956  003664  D010               	goto	l1599
  1957                           
  1958                           ; BSR set to: 0
  1959                           ;main.c: 37: {
  1960                           ;main.c: 38: keepAliveSignalLed();
  1961  003666  EC05  F022         	call	_keepAliveSignalLed	;wreg free
  1962                           
  1963                           ;main.c: 40: if(1 == CheckFlashPrecentage())
  1964  00366A  EC92  F017         	call	_CheckFlashPrecentage	;wreg free
  1965  00366E  06E8               	decf	wreg,f,c
  1966  003670  A4D8               	btfss	status,2,c
  1967  003672  D003               	goto	l1600
  1968                           
  1969                           ;main.c: 41: {
  1970                           ;main.c: 42: BlinkErrorLeds(FAIL_FLASH_MORE_THEN_HELF);
  1971  003674  0E02               	movlw	2
  1972  003676  EC61  F01C         	call	_BlinkErrorLeds
  1973  00367A                     l1600:
  1974                           
  1975                           ;main.c: 43: }
  1976                           ;main.c: 46: AdcConvert();
  1977  00367A  EC8F  F008         	call	_AdcConvert	;wreg free
  1978                           
  1979                           ;main.c: 47: Timer0_Sampling = 0;
  1980  00367E  0E00               	movlw	0
  1981  003680  0100               	movlb	0	; () banked
  1982  003682  6FF3               	movwf	_Timer0_Sampling& (0+255),b	;volatile
  1983                           
  1984                           ;main.c: 48: }
  1985  003684  D7E1               	goto	l1596
  1986  003686                     l1599:
  1987                           
  1988                           ; BSR set to: 0
  1989                           ;main.c: 49: else if (Timer0_KeepAlive == 1)
  1990                           
  1991                           ; BSR set to: 0
  1992  003686  05F2               	decf	_Timer0_KeepAlive& (0+255),w,b	;volatile
  1993  003688  A4D8               	btfss	status,2,c
  1994  00368A  D006               	goto	l1602
  1995                           
  1996                           ; BSR set to: 0
  1997                           ;main.c: 50: {
  1998                           ;main.c: 51: keepAliveSignalUart();
  1999  00368C  EC79  F022         	call	_keepAliveSignalUart	;wreg free
  2000                           
  2001                           ;main.c: 52: Timer0_KeepAlive = 0;
  2002  003690  0E00               	movlw	0
  2003  003692  0100               	movlb	0	; () banked
  2004  003694  6FF2               	movwf	_Timer0_KeepAlive& (0+255),b	;volatile
  2005                           
  2006                           ;main.c: 53: }
  2007  003696  D7D8               	goto	l1596
  2008  003698                     l1602:
  2009                           
  2010                           ; BSR set to: 0
  2011                           ;main.c: 54: else if (Timer0_SynthLd == 1)
  2012                           
  2013                           ; BSR set to: 0
  2014  003698  05F4               	decf	_Timer0_SynthLd& (0+255),w,b	;volatile
  2015  00369A  A4D8               	btfss	status,2,c
  2016  00369C  D7D5               	goto	l1596
  2017                           
  2018                           ; BSR set to: 0
  2019                           ;main.c: 55: {
  2020                           ;main.c: 56: SynthLdDetect();
  2021  00369E  EC50  F013         	call	_SynthLdDetect	;wreg free
  2022                           
  2023                           ;main.c: 57: Timer0_SynthLd = 0;
  2024  0036A2  0E00               	movlw	0
  2025  0036A4  0100               	movlb	0	; () banked
  2026  0036A6  6FF4               	movwf	_Timer0_SynthLd& (0+255),b	;volatile
  2027                           
  2028                           ; BSR set to: 0
  2029                           
  2030                           ; BSR set to: 0
  2031                           
  2032                           ; BSR set to: 0
  2033                           
  2034                           ; BSR set to: 0
  2035                           
  2036                           ; BSR set to: 0
  2037  0036A8  D7CF               	goto	l1596
  2038  0036AA                     __end_of_main:
  2039                           	opt stack 0
  2040                           tblptru	equ	0xFF8
  2041                           tblptrh	equ	0xFF7
  2042                           tblptrl	equ	0xFF6
  2043                           tablat	equ	0xFF5
  2044                           postinc0	equ	0xFEE
  2045                           wreg	equ	0xFE8
  2046                           postdec1	equ	0xFE5
  2047                           fsr1l	equ	0xFE1
  2048                           status	equ	0xFD8
  2049                           
  2050 ;; *************** function _readUartMessage *****************
  2051 ;; Defined at:
  2052 ;;		line 28 in file "EusartApp.c"
  2053 ;; Parameters:    Size  Location     Type
  2054 ;;		None
  2055 ;; Auto vars:     Size  Location     Type
  2056 ;;  idx             2  129[BANK0 ] int 
  2057 ;;  chRec           1  131[BANK0 ] unsigned char 
  2058 ;; Return value:  Size  Location     Type
  2059 ;;                  1    wreg      void 
  2060 ;; Registers used:
  2061 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2062 ;; Tracked objects:
  2063 ;;		On entry : 0/0
  2064 ;;		On exit  : 0/0
  2065 ;;		Unchanged: 0/0
  2066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2067 ;;      Params:         0       0       0       0       0       0       0
  2068 ;;      Locals:         0       3       0       0       0       0       0
  2069 ;;      Temps:          0       4       0       0       0       0       0
  2070 ;;      Totals:         0       7       0       0       0       0       0
  2071 ;;Total ram usage:        7 bytes
  2072 ;; Hardware stack levels used:    1
  2073 ;; Hardware stack levels required when called:   13
  2074 ;; This function calls:
  2075 ;;		_EUSART1_Read
  2076 ;;		_GroupAdc
  2077 ;;		_GroupControlMcu
  2078 ;;		_GroupDAC
  2079 ;;		_GroupFlashMemory
  2080 ;;		_GroupStatusAndVersion
  2081 ;;		_GroupSynthesizers
  2082 ;;		_InitRxMessageParams
  2083 ;;		_ZeroArray
  2084 ;;		_crc8
  2085 ;; This function is called by:
  2086 ;;		_main
  2087 ;; This function uses a non-reentrant model
  2088 ;;
  2089                           
  2090                           	psect	text1
  2091  001520                     __ptext1:
  2092                           	opt stack 0
  2093  001520                     _readUartMessage:
  2094                           	opt stack 17
  2095                           
  2096                           ;EusartApp.c: 31: uint8_t chRec = (0);
  2097                           
  2098                           ; BSR set to: 0
  2099                           ;incstack = 0
  2100  001520  0E00               	movlw	0
  2101  001522  0100               	movlb	0	; () banked
  2102  001524  6FE3               	movwf	readUartMessage@chRec& (0+255),b
  2103                           
  2104                           ;EusartApp.c: 32: switch(cState)
  2105  001526  D0D2               	goto	l202
  2106  001528                     
  2107                           ; BSR set to: 0
  2108                           ;EusartApp.c: 37: if(eusart1RxCount > (4))
  2109                           
  2110                           ; BSR set to: 0
  2111  001528  0E04               	movlw	4
  2112  00152A  65EF               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2113  00152C  0012               	return	
  2114                           
  2115                           ; BSR set to: 0
  2116                           ;EusartApp.c: 38: {
  2117                           ;EusartApp.c: 39: cState = FIND_MAGIC;
  2118  00152E  0E01               	movlw	1
  2119  001530  6FEE               	movwf	_cState& (0+255),b
  2120                           
  2121                           ; BSR set to: 0
  2122                           ;EusartApp.c: 40: }
  2123                           ;EusartApp.c: 41: return;
  2124                           
  2125                           ; BSR set to: 0
  2126  001532  0012               	return	
  2127  001534                     
  2128                           ; BSR set to: 0
  2129                           ;EusartApp.c: 45: InitRxMessageParams();
  2130                           
  2131                           ; BSR set to: 0
  2132  001534  ECD2  F020         	call	_InitRxMessageParams	;wreg free
  2133                           
  2134                           ;EusartApp.c: 46: msgCount = 0;
  2135  001538  0E00               	movlw	0
  2136  00153A  0100               	movlb	0	; () banked
  2137  00153C  6FE8               	movwf	_msgCount& (0+255),b
  2138                           
  2139                           ; BSR set to: 0
  2140                           ;EusartApp.c: 47: if(eusart1RxCount > 1)
  2141  00153E  0E01               	movlw	1
  2142  001540  65EF               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2143  001542  D00D               	goto	l207
  2144                           
  2145                           ; BSR set to: 0
  2146                           ;EusartApp.c: 48: {
  2147                           ;EusartApp.c: 49: chRec = EUSART1_Read();
  2148  001544  EC6D  F01E         	call	_EUSART1_Read	;wreg free
  2149  001548  0100               	movlb	0	; () banked
  2150  00154A  6FE3               	movwf	readUartMessage@chRec& (0+255),b
  2151                           
  2152                           ; BSR set to: 0
  2153                           ;EusartApp.c: 50: rxMsgQueue[(0)] = chRec;
  2154  00154C  C0E3  F187         	movff	readUartMessage@chRec,_rxMsgQueue
  2155                           
  2156                           ; BSR set to: 0
  2157                           ;EusartApp.c: 51: if(chRec == (0x24))
  2158  001550  0E24               	movlw	36
  2159  001552  19E3               	xorwf	readUartMessage@chRec& (0+255),w,b
  2160  001554  A4D8               	btfss	status,2,c
  2161  001556  0012               	return	
  2162                           
  2163                           ; BSR set to: 0
  2164                           ;EusartApp.c: 52: {
  2165                           ;EusartApp.c: 53: cState = READ_GROUP;
  2166  001558  0E02               	movlw	2
  2167  00155A  6FEE               	movwf	_cState& (0+255),b
  2168                           
  2169                           ; BSR set to: 0
  2170                           ;EusartApp.c: 54: }
  2171                           ;EusartApp.c: 55: }
  2172  00155C  0012               	return	
  2173  00155E                     l207:
  2174                           
  2175                           ; BSR set to: 0
  2176                           ;EusartApp.c: 56: else
  2177                           ;EusartApp.c: 57: {
  2178                           ;EusartApp.c: 58: cState = START_RX_MESSAGE_READ;
  2179                           
  2180                           ; BSR set to: 0
  2181  00155E  0E00               	movlw	0
  2182  001560  6FEE               	movwf	_cState& (0+255),b
  2183                           
  2184                           ; BSR set to: 0
  2185                           ;EusartApp.c: 59: }
  2186                           ;EusartApp.c: 61: break;
  2187  001562  0012               	return	
  2188  001564                     
  2189                           ; BSR set to: 0
  2190                           ;EusartApp.c: 65: if(eusart1RxCount > 1)
  2191                           
  2192                           ; BSR set to: 0
  2193  001564  0E01               	movlw	1
  2194  001566  65EF               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2195  001568  0012               	return	
  2196                           
  2197                           ; BSR set to: 0
  2198                           ;EusartApp.c: 66: {
  2199                           ;EusartApp.c: 67: group = EUSART1_Read();
  2200  00156A  EC6D  F01E         	call	_EUSART1_Read	;wreg free
  2201  00156E  0100               	movlb	0	; () banked
  2202  001570  6FED               	movwf	_group& (0+255),b
  2203                           
  2204                           ; BSR set to: 0
  2205                           ;EusartApp.c: 68: rxMsgQueue[(1)] = group;
  2206  001572  C0ED  F188         	movff	_group,_rxMsgQueue+1
  2207                           
  2208                           ; BSR set to: 0
  2209                           ;EusartApp.c: 69: cState = READ_REQUEST;
  2210  001576  0E03               	movlw	3
  2211  001578  6FEE               	movwf	_cState& (0+255),b
  2212                           
  2213                           ; BSR set to: 0
  2214                           ;EusartApp.c: 70: }
  2215                           ;EusartApp.c: 71: break;
  2216  00157A  0012               	return	
  2217  00157C                     
  2218                           ; BSR set to: 0
  2219                           ;EusartApp.c: 75: if(eusart1RxCount > 1)
  2220                           
  2221                           ; BSR set to: 0
  2222  00157C  0E01               	movlw	1
  2223  00157E  65EF               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2224  001580  0012               	return	
  2225                           
  2226                           ; BSR set to: 0
  2227                           ;EusartApp.c: 76: {
  2228                           ;EusartApp.c: 77: request = EUSART1_Read();
  2229  001582  EC6D  F01E         	call	_EUSART1_Read	;wreg free
  2230  001586  0100               	movlb	0	; () banked
  2231  001588  6FEC               	movwf	_request& (0+255),b
  2232                           
  2233                           ; BSR set to: 0
  2234                           ;EusartApp.c: 78: rxMsgQueue[(2)] = request;
  2235  00158A  C0EC  F189         	movff	_request,_rxMsgQueue+2
  2236                           
  2237                           ; BSR set to: 0
  2238                           ;EusartApp.c: 79: cState = READ_DATA_SIZE;
  2239  00158E  0E04               	movlw	4
  2240  001590  6FEE               	movwf	_cState& (0+255),b
  2241                           
  2242                           ; BSR set to: 0
  2243                           ;EusartApp.c: 80: }
  2244                           ;EusartApp.c: 81: break;
  2245  001592  0012               	return	
  2246  001594                     
  2247                           ; BSR set to: 0
  2248                           ;EusartApp.c: 84: if(eusart1RxCount > 1)
  2249                           
  2250                           ; BSR set to: 0
  2251  001594  0E01               	movlw	1
  2252  001596  65EF               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2253  001598  0012               	return	
  2254                           
  2255                           ; BSR set to: 0
  2256                           ;EusartApp.c: 85: {
  2257                           ;EusartApp.c: 86: dataSize = EUSART1_Read();
  2258  00159A  EC6D  F01E         	call	_EUSART1_Read	;wreg free
  2259  00159E  0100               	movlb	0	; () banked
  2260  0015A0  6FEB               	movwf	_dataSize& (0+255),b
  2261                           
  2262                           ; BSR set to: 0
  2263                           ;EusartApp.c: 87: rxMsgQueue[(3)] = dataSize;
  2264  0015A2  C0EB  F18A         	movff	_dataSize,_rxMsgQueue+3
  2265                           
  2266                           ; BSR set to: 0
  2267                           ;EusartApp.c: 88: if(dataSize == 0)
  2268  0015A6  51EB               	movf	_dataSize& (0+255),w,b
  2269  0015A8  A4D8               	btfss	status,2,c
  2270  0015AA  D003               	goto	l217
  2271                           
  2272                           ; BSR set to: 0
  2273                           ;EusartApp.c: 89: {
  2274                           ;EusartApp.c: 90: cState = CHECK_CRC;
  2275  0015AC  0E06               	movlw	6
  2276  0015AE  6FEE               	movwf	_cState& (0+255),b
  2277                           
  2278                           ;EusartApp.c: 91: }
  2279  0015B0  0012               	return	
  2280  0015B2                     l217:
  2281                           
  2282                           ; BSR set to: 0
  2283                           ;EusartApp.c: 92: else
  2284                           ;EusartApp.c: 93: {
  2285                           ;EusartApp.c: 94: cState = READ_DATA;
  2286                           
  2287                           ; BSR set to: 0
  2288  0015B2  0E05               	movlw	5
  2289  0015B4  6FEE               	movwf	_cState& (0+255),b
  2290                           
  2291                           ; BSR set to: 0
  2292                           ;EusartApp.c: 95: }
  2293                           ;EusartApp.c: 97: }
  2294                           ;EusartApp.c: 99: break;
  2295                           
  2296                           ; BSR set to: 0
  2297  0015B6  0012               	return	
  2298  0015B8                     
  2299                           ; BSR set to: 0
  2300                           ;EusartApp.c: 103: if(eusart1RxCount >= dataSize)
  2301                           
  2302                           ; BSR set to: 0
  2303  0015B8  51EB               	movf	_dataSize& (0+255),w,b
  2304  0015BA  5DEF               	subwf	_eusart1RxCount& (0+255),w,b	;volatile
  2305  0015BC  A0D8               	btfss	status,0,c
  2306  0015BE  0012               	return	
  2307                           
  2308                           ; BSR set to: 0
  2309                           ;EusartApp.c: 104: {
  2310                           ;EusartApp.c: 105: ZeroArray(rxMsgData, (0x14));
  2311  0015C0  0E73               	movlw	low _rxMsgData
  2312  0015C2  6E20               	movwf	ZeroArray@array,c
  2313  0015C4  0E01               	movlw	high _rxMsgData
  2314  0015C6  6E21               	movwf	ZeroArray@array+1,c
  2315  0015C8  0E00               	movlw	0
  2316  0015CA  6E23               	movwf	ZeroArray@size+1,c
  2317  0015CC  0E14               	movlw	20
  2318  0015CE  6E22               	movwf	ZeroArray@size,c
  2319  0015D0  ECCD  F021         	call	_ZeroArray	;wreg free
  2320                           
  2321                           ;EusartApp.c: 107: for(int idx = 0; idx < dataSize; idx++)
  2322  0015D4  0E00               	movlw	0
  2323  0015D6  0100               	movlb	0	; () banked
  2324  0015D8  6FE2               	movwf	(readUartMessage@idx+1)& (0+255),b
  2325  0015DA  0E00               	movlw	0
  2326  0015DC  6FE1               	movwf	readUartMessage@idx& (0+255),b
  2327  0015DE  D01E               	goto	l221
  2328  0015E0                     
  2329                           ; BSR set to: 0
  2330                           ;EusartApp.c: 108: {
  2331                           ;EusartApp.c: 109: chRec = EUSART1_Read();
  2332                           
  2333                           ; BSR set to: 0
  2334  0015E0  EC6D  F01E         	call	_EUSART1_Read	;wreg free
  2335  0015E4  0100               	movlb	0	; () banked
  2336  0015E6  6FE3               	movwf	readUartMessage@chRec& (0+255),b
  2337                           
  2338                           ; BSR set to: 0
  2339                           ;EusartApp.c: 110: rxMsgQueue[(0x4) + msgCount++] = chRec;
  2340  0015E8  51E8               	movf	_msgCount& (0+255),w,b
  2341  0015EA  6FDD               	movwf	??_readUartMessage& (0+255),b
  2342  0015EC  6BDE               	clrf	(??_readUartMessage+1)& (0+255),b
  2343  0015EE  0E04               	movlw	4
  2344  0015F0  27DD               	addwf	??_readUartMessage& (0+255),f,b
  2345  0015F2  0E00               	movlw	0
  2346  0015F4  23DE               	addwfc	(??_readUartMessage+1)& (0+255),f,b
  2347  0015F6  0E87               	movlw	low _rxMsgQueue
  2348  0015F8  25DD               	addwf	??_readUartMessage& (0+255),w,b
  2349  0015FA  6ED9               	movwf	fsr2l,c
  2350  0015FC  0E01               	movlw	high _rxMsgQueue
  2351  0015FE  21DE               	addwfc	(??_readUartMessage+1)& (0+255),w,b
  2352  001600  6EDA               	movwf	fsr2h,c
  2353  001602  C0E3  FFDF         	movff	readUartMessage@chRec,indf2
  2354                           
  2355                           ; BSR set to: 0
  2356  001606  2BE8               	incf	_msgCount& (0+255),f,b
  2357                           
  2358                           ; BSR set to: 0
  2359                           ;EusartApp.c: 111: rxMsgData[idx] = chRec;
  2360  001608  0E73               	movlw	low _rxMsgData
  2361  00160A  25E1               	addwf	readUartMessage@idx& (0+255),w,b
  2362  00160C  6ED9               	movwf	fsr2l,c
  2363  00160E  0E01               	movlw	high _rxMsgData
  2364  001610  21E2               	addwfc	(readUartMessage@idx+1)& (0+255),w,b
  2365  001612  6EDA               	movwf	fsr2h,c
  2366  001614  C0E3  FFDF         	movff	readUartMessage@chRec,indf2
  2367                           
  2368                           ; BSR set to: 0
  2369  001618  4BE1               	infsnz	readUartMessage@idx& (0+255),f,b
  2370  00161A  2BE2               	incf	(readUartMessage@idx+1)& (0+255),f,b
  2371  00161C                     l221:
  2372                           
  2373                           ; BSR set to: 0
  2374                           
  2375                           ; BSR set to: 0
  2376  00161C  51EB               	movf	_dataSize& (0+255),w,b
  2377  00161E  6FDD               	movwf	??_readUartMessage& (0+255),b
  2378  001620  6BDE               	clrf	(??_readUartMessage+1)& (0+255),b
  2379  001622  51DD               	movf	??_readUartMessage& (0+255),w,b
  2380  001624  5DE1               	subwf	readUartMessage@idx& (0+255),w,b
  2381  001626  51E2               	movf	(readUartMessage@idx+1)& (0+255),w,b
  2382  001628  0A80               	xorlw	128
  2383  00162A  6FDF               	movwf	(??_readUartMessage+2)& (0+255),b
  2384  00162C  51DE               	movf	(??_readUartMessage+1)& (0+255),w,b
  2385  00162E  0A80               	xorlw	128
  2386  001630  59DF               	subwfb	(??_readUartMessage+2)& (0+255),w,b
  2387  001632  A0D8               	btfss	status,0,c
  2388  001634  D7D5               	goto	l222
  2389                           
  2390                           ; BSR set to: 0
  2391                           ;EusartApp.c: 112: }
  2392                           ;EusartApp.c: 114: cState = CHECK_CRC;
  2393                           
  2394                           ; BSR set to: 0
  2395  001636  0E06               	movlw	6
  2396  001638  6FEE               	movwf	_cState& (0+255),b
  2397                           
  2398                           ; BSR set to: 0
  2399                           ;EusartApp.c: 115: }
  2400                           ;EusartApp.c: 116: break;
  2401  00163A  0012               	return	
  2402  00163C                     
  2403                           ; BSR set to: 0
  2404                           ;EusartApp.c: 119: if(eusart1RxCount >= 1)
  2405                           
  2406                           ; BSR set to: 0
  2407  00163C  51EF               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  2408  00163E  B4D8               	btfsc	status,2,c
  2409  001640  0012               	return	
  2410                           
  2411                           ; BSR set to: 0
  2412                           ;EusartApp.c: 120: {
  2413                           ;EusartApp.c: 121: crcGiven = EUSART1_Read();
  2414  001642  EC6D  F01E         	call	_EUSART1_Read	;wreg free
  2415  001646  0100               	movlb	0	; () banked
  2416  001648  6FE9               	movwf	_crcGiven& (0+255),b
  2417                           
  2418                           ; BSR set to: 0
  2419                           ;EusartApp.c: 122: crcCalc = crc8(rxMsgQueue, (0x4) + msgCount);
  2420  00164A  0E87               	movlw	low _rxMsgQueue
  2421  00164C  6E18               	movwf	crc8@dataArray,c
  2422  00164E  0E01               	movlw	high _rxMsgQueue
  2423  001650  6E19               	movwf	crc8@dataArray+1,c
  2424  001652  0E04               	movlw	4
  2425  001654  25E8               	addwf	_msgCount& (0+255),w,b
  2426  001656  6E1A               	movwf	crc8@dataSize,c
  2427  001658  6A1B               	clrf	crc8@dataSize+1,c
  2428  00165A  0E00               	movlw	0
  2429  00165C  221B               	addwfc	crc8@dataSize+1,f,c
  2430  00165E  EC46  F01E         	call	_crc8	;wreg free
  2431  001662  0100               	movlb	0	; () banked
  2432  001664  6FEA               	movwf	_crcCalc& (0+255),b
  2433                           
  2434                           ; BSR set to: 0
  2435                           ;EusartApp.c: 124: if(crcGiven == crcCalc)
  2436  001666  51EA               	movf	_crcCalc& (0+255),w,b
  2437  001668  19E9               	xorwf	_crcGiven& (0+255),w,b
  2438  00166A  A4D8               	btfss	status,2,c
  2439  00166C  D003               	goto	l226
  2440                           
  2441                           ; BSR set to: 0
  2442                           ;EusartApp.c: 125: {
  2443                           ;EusartApp.c: 126: cState = JUMP_FUNCTION;
  2444  00166E  0E07               	movlw	7
  2445  001670  6FEE               	movwf	_cState& (0+255),b
  2446                           
  2447                           ;EusartApp.c: 127: }
  2448  001672  0012               	return	
  2449  001674                     l226:
  2450                           
  2451                           ; BSR set to: 0
  2452                           ;EusartApp.c: 128: else
  2453                           ;EusartApp.c: 129: {
  2454                           ;EusartApp.c: 130: cState = START_RX_MESSAGE_READ;
  2455                           
  2456                           ; BSR set to: 0
  2457  001674  0E00               	movlw	0
  2458  001676  6FEE               	movwf	_cState& (0+255),b
  2459                           
  2460                           ; BSR set to: 0
  2461                           ;EusartApp.c: 131: }
  2462                           ;EusartApp.c: 132: }
  2463                           ;EusartApp.c: 133: break;
  2464                           
  2465                           ; BSR set to: 0
  2466  001678  0012               	return	
  2467  00167A                     
  2468                           ; BSR set to: 0
  2469                           ;EusartApp.c: 136: groupsArray[group - 1](request, rxMsgData);
  2470                           
  2471                           ; BSR set to: 0
  2472  00167A  0EFE               	movlw	254
  2473  00167C  6FDD               	movwf	??_readUartMessage& (0+255),b
  2474  00167E  0EFF               	movlw	255
  2475  001680  6FDE               	movwf	(??_readUartMessage+1)& (0+255),b
  2476  001682  51ED               	movf	_group& (0+255),w,b
  2477  001684  6FDF               	movwf	(??_readUartMessage+2)& (0+255),b
  2478  001686  6BE0               	clrf	(??_readUartMessage+3)& (0+255),b
  2479  001688  90D8               	bcf	status,0,c
  2480  00168A  37DF               	rlcf	(??_readUartMessage+2)& (0+255),f,b
  2481  00168C  37E0               	rlcf	(??_readUartMessage+3)& (0+255),f,b
  2482  00168E  51DD               	movf	??_readUartMessage& (0+255),w,b
  2483  001690  27DF               	addwf	(??_readUartMessage+2)& (0+255),f,b
  2484  001692  51DE               	movf	(??_readUartMessage+1)& (0+255),w,b
  2485  001694  23E0               	addwfc	(??_readUartMessage+3)& (0+255),f,b
  2486  001696  0ED5               	movlw	low _groupsArray
  2487  001698  25DF               	addwf	(??_readUartMessage+2)& (0+255),w,b
  2488  00169A  6ED9               	movwf	fsr2l,c
  2489  00169C  0E01               	movlw	high _groupsArray
  2490  00169E  21E0               	addwfc	(??_readUartMessage+3)& (0+255),w,b
  2491  0016A0  6EDA               	movwf	fsr2h,c
  2492  0016A2  D801               	call	u9458
  2493  0016A4  D00F               	goto	u9459
  2494  0016A6                     u9458:
  2495  0016A6  0005               	push	
  2496  0016A8  6EFA               	movwf	pclath,c
  2497  0016AA  50DE               	movf	postinc2,w,c
  2498  0016AC  6EFD               	movwf	tosl,c
  2499  0016AE  50DE               	movf	postinc2,w,c
  2500  0016B0  6EFE               	movwf	tosh,c
  2501  0016B2  50F8               	movf	tblptru,w,c
  2502  0016B4  6EFF               	movwf	tosu,c
  2503  0016B6  50FA               	movf	pclath,w,c
  2504  0016B8  0E73               	movlw	low _rxMsgData
  2505  0016BA  6FDA               	movwf	GroupDAC@data& (0+255),b
  2506  0016BC  0E01               	movlw	high _rxMsgData
  2507  0016BE  6FDB               	movwf	(GroupDAC@data+1)& (0+255),b
  2508  0016C0  51EC               	movf	_request& (0+255),w,b
  2509  0016C2  0012               	return		;indir
  2510  0016C4                     u9459:
  2511                           
  2512                           ;EusartApp.c: 137: cState = START_RX_MESSAGE_READ;
  2513  0016C4  0E00               	movlw	0
  2514  0016C6  0100               	movlb	0	; () banked
  2515  0016C8  6FEE               	movwf	_cState& (0+255),b
  2516                           
  2517                           ; BSR set to: 0
  2518                           ;EusartApp.c: 139: }
  2519                           
  2520                           ;EusartApp.c: 138: break;
  2521  0016CA  0012               	return	
  2522  0016CC                     l202:
  2523                           
  2524                           ; BSR set to: 0
  2525                           
  2526                           ; BSR set to: 0
  2527  0016CC  51EE               	movf	_cState& (0+255),w,b
  2528                           
  2529                           ; Switch size 1, requested type "space"
  2530                           ; Number of cases is 8, Range of values is 0 to 7
  2531                           ; switch strategies available:
  2532                           ; Name         Instructions Cycles
  2533                           ; simple_byte           25    13 (average)
  2534                           ;	Chosen strategy is simple_byte
  2535  0016CE  0A00               	xorlw	0	; case 0
  2536  0016D0  B4D8               	btfsc	status,2,c
  2537  0016D2  D72A               	goto	l203
  2538  0016D4  0A01               	xorlw	1	; case 1
  2539  0016D6  B4D8               	btfsc	status,2,c
  2540  0016D8  D72D               	goto	l206
  2541  0016DA  0A03               	xorlw	3	; case 2
  2542  0016DC  B4D8               	btfsc	status,2,c
  2543  0016DE  D742               	goto	l211
  2544  0016E0  0A01               	xorlw	1	; case 3
  2545  0016E2  B4D8               	btfsc	status,2,c
  2546  0016E4  D74B               	goto	l213
  2547  0016E6  0A07               	xorlw	7	; case 4
  2548  0016E8  B4D8               	btfsc	status,2,c
  2549  0016EA  D754               	goto	l215
  2550  0016EC  0A01               	xorlw	1	; case 5
  2551  0016EE  B4D8               	btfsc	status,2,c
  2552  0016F0  D763               	goto	l219
  2553  0016F2  0A03               	xorlw	3	; case 6
  2554  0016F4  B4D8               	btfsc	status,2,c
  2555  0016F6  D7A2               	goto	l224
  2556  0016F8  0A01               	xorlw	1	; case 7
  2557  0016FA  A4D8               	btfss	status,2,c
  2558  0016FC  0012               	return	
  2559  0016FE  D7BD               	goto	l228
  2560  001700                     __end_of_readUartMessage:
  2561                           	opt stack 0
  2562                           tosu	equ	0xFFF
  2563                           tosh	equ	0xFFE
  2564                           tosl	equ	0xFFD
  2565                           pclath	equ	0xFFA
  2566                           tblptru	equ	0xFF8
  2567                           tblptrh	equ	0xFF7
  2568                           tblptrl	equ	0xFF6
  2569                           tablat	equ	0xFF5
  2570                           postinc0	equ	0xFEE
  2571                           wreg	equ	0xFE8
  2572                           postdec1	equ	0xFE5
  2573                           fsr1l	equ	0xFE1
  2574                           indf2	equ	0xFDF
  2575                           postinc2	equ	0xFDE
  2576                           fsr2h	equ	0xFDA
  2577                           fsr2l	equ	0xFD9
  2578                           status	equ	0xFD8
  2579                           
  2580 ;; *************** function _InitRxMessageParams *****************
  2581 ;; Defined at:
  2582 ;;		line 142 in file "EusartApp.c"
  2583 ;; Parameters:    Size  Location     Type
  2584 ;;		None
  2585 ;; Auto vars:     Size  Location     Type
  2586 ;;		None
  2587 ;; Return value:  Size  Location     Type
  2588 ;;                  1    wreg      void 
  2589 ;; Registers used:
  2590 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2591 ;; Tracked objects:
  2592 ;;		On entry : 0/0
  2593 ;;		On exit  : 0/0
  2594 ;;		Unchanged: 0/0
  2595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2596 ;;      Params:         0       0       0       0       0       0       0
  2597 ;;      Locals:         0       0       0       0       0       0       0
  2598 ;;      Temps:          0       0       0       0       0       0       0
  2599 ;;      Totals:         0       0       0       0       0       0       0
  2600 ;;Total ram usage:        0 bytes
  2601 ;; Hardware stack levels used:    1
  2602 ;; Hardware stack levels required when called:    6
  2603 ;; This function calls:
  2604 ;;		_ZeroArray
  2605 ;; This function is called by:
  2606 ;;		_readUartMessage
  2607 ;; This function uses a non-reentrant model
  2608 ;;
  2609                           
  2610                           	psect	text2
  2611  0041A4                     __ptext2:
  2612                           	opt stack 0
  2613  0041A4                     _InitRxMessageParams:
  2614                           	opt stack 23
  2615                           
  2616                           ;EusartApp.c: 146: dataSize = 0;
  2617                           
  2618                           ; BSR set to: 0
  2619                           ;incstack = 0
  2620  0041A4  0E00               	movlw	0
  2621  0041A6  0100               	movlb	0	; () banked
  2622  0041A8  6FEB               	movwf	_dataSize& (0+255),b
  2623                           
  2624                           ;EusartApp.c: 147: crcCalc = 0;
  2625  0041AA  0E00               	movlw	0
  2626  0041AC  6FEA               	movwf	_crcCalc& (0+255),b
  2627                           
  2628                           ;EusartApp.c: 148: crcGiven = 0;
  2629  0041AE  0E00               	movlw	0
  2630  0041B0  6FE9               	movwf	_crcGiven& (0+255),b
  2631                           
  2632                           ;EusartApp.c: 149: msgCount = 0;
  2633  0041B2  0E00               	movlw	0
  2634  0041B4  6FE8               	movwf	_msgCount& (0+255),b
  2635                           
  2636                           ; BSR set to: 0
  2637                           ;EusartApp.c: 150: ZeroArray(rxMsgQueue, (0x14));
  2638  0041B6  0E87               	movlw	low _rxMsgQueue
  2639  0041B8  6E20               	movwf	ZeroArray@array,c
  2640  0041BA  0E01               	movlw	high _rxMsgQueue
  2641  0041BC  6E21               	movwf	ZeroArray@array+1,c
  2642  0041BE  0E00               	movlw	0
  2643  0041C0  6E23               	movwf	ZeroArray@size+1,c
  2644  0041C2  0E14               	movlw	20
  2645  0041C4  6E22               	movwf	ZeroArray@size,c
  2646  0041C6  ECCD  F021         	call	_ZeroArray
  2647  0041CA  0012               	return		;funcret
  2648  0041CC                     __end_of_InitRxMessageParams:
  2649                           	opt stack 0
  2650                           tosu	equ	0xFFF
  2651                           tosh	equ	0xFFE
  2652                           tosl	equ	0xFFD
  2653                           pclath	equ	0xFFA
  2654                           tblptru	equ	0xFF8
  2655                           tblptrh	equ	0xFF7
  2656                           tblptrl	equ	0xFF6
  2657                           tablat	equ	0xFF5
  2658                           postinc0	equ	0xFEE
  2659                           wreg	equ	0xFE8
  2660                           postdec1	equ	0xFE5
  2661                           fsr1l	equ	0xFE1
  2662                           indf2	equ	0xFDF
  2663                           postinc2	equ	0xFDE
  2664                           fsr2h	equ	0xFDA
  2665                           fsr2l	equ	0xFD9
  2666                           status	equ	0xFD8
  2667                           
  2668 ;; *************** function _GroupDAC *****************
  2669 ;; Defined at:
  2670 ;;		line 125 in file "MessageFunctions.c"
  2671 ;; Parameters:    Size  Location     Type
  2672 ;;  request         1    wreg     enum E12
  2673 ;;  data            2  122[BANK0 ] PTR unsigned char 
  2674 ;;		 -> rxMsgData(20), 
  2675 ;; Auto vars:     Size  Location     Type
  2676 ;;  request         1  124[BANK0 ] enum E12
  2677 ;; Return value:  Size  Location     Type
  2678 ;;                  1    wreg      void 
  2679 ;; Registers used:
  2680 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2681 ;; Tracked objects:
  2682 ;;		On entry : 0/0
  2683 ;;		On exit  : 0/0
  2684 ;;		Unchanged: 0/0
  2685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2686 ;;      Params:         0       2       0       0       0       0       0
  2687 ;;      Locals:         0       1       0       0       0       0       0
  2688 ;;      Temps:          0       0       0       0       0       0       0
  2689 ;;      Totals:         0       3       0       0       0       0       0
  2690 ;;Total ram usage:        3 bytes
  2691 ;; Hardware stack levels used:    1
  2692 ;; Hardware stack levels required when called:   11
  2693 ;; This function calls:
  2694 ;;		_DacReadValue
  2695 ;;		_DacSetValue
  2696 ;; This function is called by:
  2697 ;;		_readUartMessage
  2698 ;; This function uses a non-reentrant model
  2699 ;;
  2700                           
  2701                           	psect	text3
  2702  00401E                     __ptext3:
  2703                           	opt stack 0
  2704  00401E                     _GroupDAC:
  2705                           	opt stack 18
  2706                           
  2707                           ;incstack = 0
  2708                           ;GroupDAC@request stored from wreg
  2709  00401E  0100               	movlb	0	; () banked
  2710  004020  6FDC               	movwf	GroupDAC@request& (0+255),b
  2711                           
  2712                           ;MessageFunctions.c: 127: switch (request)
  2713  004022  D00E               	goto	l1344
  2714  004024                     
  2715                           ;MessageFunctions.c: 130: DacSetValue(data);
  2716  004024  C0DA  F08A         	movff	GroupDAC@data,DacSetValue@data
  2717  004028  C0DB  F08B         	movff	GroupDAC@data+1,DacSetValue@data+1
  2718  00402C  EC3A  F019         	call	_DacSetValue	;wreg free
  2719                           
  2720                           ;MessageFunctions.c: 131: break;
  2721  004030  0012               	return	
  2722  004032                     
  2723                           ;MessageFunctions.c: 134: DacReadValue(data);
  2724  004032  C0DA  F0C8         	movff	GroupDAC@data,DacReadValue@data
  2725  004036  C0DB  F0C9         	movff	GroupDAC@data+1,DacReadValue@data+1
  2726  00403A  ECAA  F014         	call	_DacReadValue	;wreg free
  2727                           
  2728                           ;MessageFunctions.c: 139: }
  2729                           
  2730                           ;MessageFunctions.c: 138: break;
  2731                           
  2732                           ;MessageFunctions.c: 137: default:
  2733                           
  2734                           ;MessageFunctions.c: 135: break;
  2735  00403E  0012               	return	
  2736  004040                     l1344:
  2737  004040  0100               	movlb	0	; () banked
  2738  004042  51DC               	movf	GroupDAC@request& (0+255),w,b
  2739                           
  2740                           ; Switch size 1, requested type "space"
  2741                           ; Number of cases is 2, Range of values is 97 to 98
  2742                           ; switch strategies available:
  2743                           ; Name         Instructions Cycles
  2744                           ; simple_byte            7     4 (average)
  2745                           ;	Chosen strategy is simple_byte
  2746  004044  0A61               	xorlw	97	; case 97
  2747  004046  B4D8               	btfsc	status,2,c
  2748  004048  D7ED               	goto	l1345
  2749  00404A  0A03               	xorlw	3	; case 98
  2750  00404C  A4D8               	btfss	status,2,c
  2751  00404E  0012               	return	
  2752  004050  D7F0               	goto	l1347
  2753  004052                     __end_of_GroupDAC:
  2754                           	opt stack 0
  2755                           tosu	equ	0xFFF
  2756                           tosh	equ	0xFFE
  2757                           tosl	equ	0xFFD
  2758                           pclath	equ	0xFFA
  2759                           tblptru	equ	0xFF8
  2760                           tblptrh	equ	0xFF7
  2761                           tblptrl	equ	0xFF6
  2762                           tablat	equ	0xFF5
  2763                           postinc0	equ	0xFEE
  2764                           wreg	equ	0xFE8
  2765                           postdec1	equ	0xFE5
  2766                           fsr1l	equ	0xFE1
  2767                           indf2	equ	0xFDF
  2768                           postinc2	equ	0xFDE
  2769                           fsr2h	equ	0xFDA
  2770                           fsr2l	equ	0xFD9
  2771                           status	equ	0xFD8
  2772                           
  2773 ;; *************** function _GroupFlashMemory *****************
  2774 ;; Defined at:
  2775 ;;		line 104 in file "MessageFunctions.c"
  2776 ;; Parameters:    Size  Location     Type
  2777 ;;  request         1    wreg     enum E12
  2778 ;;  data            2  122[BANK0 ] PTR unsigned char 
  2779 ;; Auto vars:     Size  Location     Type
  2780 ;;  request         1  124[BANK0 ] enum E12
  2781 ;; Return value:  Size  Location     Type
  2782 ;;                  1    wreg      void 
  2783 ;; Registers used:
  2784 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2785 ;; Tracked objects:
  2786 ;;		On entry : 0/0
  2787 ;;		On exit  : 0/0
  2788 ;;		Unchanged: 0/0
  2789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2790 ;;      Params:         0       2       0       0       0       0       0
  2791 ;;      Locals:         0       1       0       0       0       0       0
  2792 ;;      Temps:          0       0       0       0       0       0       0
  2793 ;;      Totals:         0       3       0       0       0       0       0
  2794 ;;Total ram usage:        3 bytes
  2795 ;; Hardware stack levels used:    1
  2796 ;; Hardware stack levels required when called:    9
  2797 ;; This function calls:
  2798 ;;		_FlashEreaseMem
  2799 ;;		_FlashReadCondition
  2800 ;;		_FlashReadUart
  2801 ;; This function is called by:
  2802 ;;		_readUartMessage
  2803 ;; This function uses a non-reentrant model
  2804 ;;
  2805                           
  2806                           	psect	text4
  2807  003E9A                     __ptext4:
  2808                           	opt stack 0
  2809  003E9A                     _GroupFlashMemory:
  2810                           	opt stack 20
  2811                           
  2812                           ;incstack = 0
  2813                           ;GroupFlashMemory@request stored from wreg
  2814  003E9A  0100               	movlb	0	; () banked
  2815  003E9C  6FDC               	movwf	GroupFlashMemory@request& (0+255),b
  2816                           
  2817                           ;MessageFunctions.c: 106: switch (request)
  2818  003E9E  D00D               	goto	l1335
  2819  003EA0                     
  2820                           ;MessageFunctions.c: 109: FlashEreaseMem();
  2821  003EA0  ECF4  F01D         	call	_FlashEreaseMem	;wreg free
  2822                           
  2823                           ;MessageFunctions.c: 110: break;
  2824  003EA4  0012               	return	
  2825  003EA6                     
  2826                           ;MessageFunctions.c: 113: FlashReadCondition();
  2827  003EA6  ECD7  F010         	call	_FlashReadCondition	;wreg free
  2828                           
  2829                           ;MessageFunctions.c: 114: break;
  2830  003EAA  0012               	return	
  2831  003EAC                     
  2832                           ;MessageFunctions.c: 117: FlashReadUart(data);
  2833  003EAC  C0DA  F087         	movff	GroupFlashMemory@data,FlashReadUart@data
  2834  003EB0  C0DB  F088         	movff	GroupFlashMemory@data+1,FlashReadUart@data+1
  2835  003EB4  EC53  F003         	call	_FlashReadUart	;wreg free
  2836                           
  2837                           ;MessageFunctions.c: 122: }
  2838                           
  2839                           ;MessageFunctions.c: 121: break;
  2840                           
  2841                           ;MessageFunctions.c: 120: default:
  2842                           
  2843                           ;MessageFunctions.c: 118: break;
  2844  003EB8  0012               	return	
  2845  003EBA                     l1335:
  2846  003EBA  0100               	movlb	0	; () banked
  2847  003EBC  51DC               	movf	GroupFlashMemory@request& (0+255),w,b
  2848                           
  2849                           ; Switch size 1, requested type "space"
  2850                           ; Number of cases is 3, Range of values is 81 to 83
  2851                           ; switch strategies available:
  2852                           ; Name         Instructions Cycles
  2853                           ; simple_byte           10     6 (average)
  2854                           ;	Chosen strategy is simple_byte
  2855  003EBE  0A51               	xorlw	81	; case 81
  2856  003EC0  B4D8               	btfsc	status,2,c
  2857  003EC2  D7EE               	goto	l1336
  2858  003EC4  0A03               	xorlw	3	; case 82
  2859  003EC6  B4D8               	btfsc	status,2,c
  2860  003EC8  D7EE               	goto	l1338
  2861  003ECA  0A01               	xorlw	1	; case 83
  2862  003ECC  A4D8               	btfss	status,2,c
  2863  003ECE  0012               	return	
  2864  003ED0  D7ED               	goto	l1339
  2865  003ED2                     __end_of_GroupFlashMemory:
  2866                           	opt stack 0
  2867                           tosu	equ	0xFFF
  2868                           tosh	equ	0xFFE
  2869                           tosl	equ	0xFFD
  2870                           pclath	equ	0xFFA
  2871                           tblptru	equ	0xFF8
  2872                           tblptrh	equ	0xFF7
  2873                           tblptrl	equ	0xFF6
  2874                           tablat	equ	0xFF5
  2875                           postinc0	equ	0xFEE
  2876                           wreg	equ	0xFE8
  2877                           postdec1	equ	0xFE5
  2878                           fsr1l	equ	0xFE1
  2879                           indf2	equ	0xFDF
  2880                           postinc2	equ	0xFDE
  2881                           fsr2h	equ	0xFDA
  2882                           fsr2l	equ	0xFD9
  2883                           status	equ	0xFD8
  2884                           
  2885 ;; *************** function _GroupAdc *****************
  2886 ;; Defined at:
  2887 ;;		line 51 in file "MessageFunctions.c"
  2888 ;; Parameters:    Size  Location     Type
  2889 ;;  request         1    wreg     enum E12
  2890 ;;  data            2  122[BANK0 ] PTR unsigned char 
  2891 ;; Auto vars:     Size  Location     Type
  2892 ;;  request         1  124[BANK0 ] enum E12
  2893 ;; Return value:  Size  Location     Type
  2894 ;;                  1    wreg      void 
  2895 ;; Registers used:
  2896 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2897 ;; Tracked objects:
  2898 ;;		On entry : 0/0
  2899 ;;		On exit  : 0/0
  2900 ;;		Unchanged: 0/0
  2901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2902 ;;      Params:         0       2       0       0       0       0       0
  2903 ;;      Locals:         0       1       0       0       0       0       0
  2904 ;;      Temps:          0       0       0       0       0       0       0
  2905 ;;      Totals:         0       3       0       0       0       0       0
  2906 ;;Total ram usage:        3 bytes
  2907 ;; Hardware stack levels used:    1
  2908 ;; Hardware stack levels required when called:    8
  2909 ;; This function calls:
  2910 ;;		_SetChannelMode
  2911 ;; This function is called by:
  2912 ;;		_readUartMessage
  2913 ;; This function uses a non-reentrant model
  2914 ;;
  2915                           
  2916                           	psect	text5
  2917  00433E                     __ptext5:
  2918                           	opt stack 0
  2919  00433E                     _GroupAdc:
  2920                           	opt stack 21
  2921                           
  2922                           ;incstack = 0
  2923                           ;GroupAdc@request stored from wreg
  2924  00433E  0100               	movlb	0	; () banked
  2925  004340  6FDC               	movwf	GroupAdc@request& (0+255),b
  2926                           
  2927                           ;MessageFunctions.c: 53: switch (request)
  2928  004342  D007               	goto	l1314
  2929  004344                     
  2930                           ;MessageFunctions.c: 56: SetChannelMode(data);
  2931  004344  C0DA  F02C         	movff	GroupAdc@data,SetChannelMode@data
  2932  004348  C0DB  F02D         	movff	GroupAdc@data+1,SetChannelMode@data+1
  2933  00434C  EC75  F020         	call	_SetChannelMode	;wreg free
  2934                           
  2935                           ;MessageFunctions.c: 61: }
  2936                           
  2937                           ;MessageFunctions.c: 60: break;
  2938                           
  2939                           ;MessageFunctions.c: 59: default:
  2940                           
  2941                           ;MessageFunctions.c: 57: break;
  2942  004350  0012               	return	
  2943  004352                     l1314:
  2944  004352  0100               	movlb	0	; () banked
  2945  004354  51DC               	movf	GroupAdc@request& (0+255),w,b
  2946                           
  2947                           ; Switch size 1, requested type "space"
  2948                           ; Number of cases is 1, Range of values is 50 to 50
  2949                           ; switch strategies available:
  2950                           ; Name         Instructions Cycles
  2951                           ; simple_byte            4     3 (average)
  2952                           ;	Chosen strategy is simple_byte
  2953  004356  0A32               	xorlw	50	; case 50
  2954  004358  A4D8               	btfss	status,2,c
  2955  00435A  0012               	return	
  2956  00435C  D7F3               	goto	l1315
  2957  00435E                     __end_of_GroupAdc:
  2958                           	opt stack 0
  2959                           tosu	equ	0xFFF
  2960                           tosh	equ	0xFFE
  2961                           tosl	equ	0xFFD
  2962                           pclath	equ	0xFFA
  2963                           tblptru	equ	0xFF8
  2964                           tblptrh	equ	0xFF7
  2965                           tblptrl	equ	0xFF6
  2966                           tablat	equ	0xFF5
  2967                           postinc0	equ	0xFEE
  2968                           wreg	equ	0xFE8
  2969                           postdec1	equ	0xFE5
  2970                           fsr1l	equ	0xFE1
  2971                           indf2	equ	0xFDF
  2972                           postinc2	equ	0xFDE
  2973                           fsr2h	equ	0xFDA
  2974                           fsr2l	equ	0xFD9
  2975                           status	equ	0xFD8
  2976                           
  2977 ;; *************** function _GroupStatusAndVersion *****************
  2978 ;; Defined at:
  2979 ;;		line 34 in file "MessageFunctions.c"
  2980 ;; Parameters:    Size  Location     Type
  2981 ;;  request         1    wreg     enum E12
  2982 ;;  data            3  122[BANK0 ] PTR unsigned char 
  2983 ;; Auto vars:     Size  Location     Type
  2984 ;;  request         1  125[BANK0 ] enum E12
  2985 ;; Return value:  Size  Location     Type
  2986 ;;                  1    wreg      void 
  2987 ;; Registers used:
  2988 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2989 ;; Tracked objects:
  2990 ;;		On entry : 0/0
  2991 ;;		On exit  : 0/0
  2992 ;;		Unchanged: 0/0
  2993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2994 ;;      Params:         0       2       0       0       0       0       0
  2995 ;;      Locals:         0       1       0       0       0       0       0
  2996 ;;      Temps:          0       0       0       0       0       0       0
  2997 ;;      Totals:         0       3       0       0       0       0       0
  2998 ;;Total ram usage:        3 bytes
  2999 ;; Hardware stack levels used:    1
  3000 ;; Hardware stack levels required when called:    7
  3001 ;; This function calls:
  3002 ;;		_GetMcuFwVersion
  3003 ;;		_GetMcuRunTime
  3004 ;; This function is called by:
  3005 ;;		_readUartMessage
  3006 ;; This function uses a non-reentrant model
  3007 ;;
  3008                           
  3009                           	psect	text6
  3010  00428E                     __ptext6:
  3011                           	opt stack 0
  3012  00428E                     _GroupStatusAndVersion:
  3013                           	opt stack 22
  3014                           
  3015                           ;incstack = 0
  3016                           ;GroupStatusAndVersion@request stored from wreg
  3017  00428E  0100               	movlb	0	; () banked
  3018  004290  6FDD               	movwf	GroupStatusAndVersion@request& (0+255),b
  3019                           
  3020                           ;MessageFunctions.c: 36: switch (request)
  3021  004292  D006               	goto	l1306
  3022  004294                     
  3023                           ;MessageFunctions.c: 39: GetMcuFwVersion();
  3024  004294  EC5C  F005         	call	_GetMcuFwVersion	;wreg free
  3025                           
  3026                           ;MessageFunctions.c: 40: break;
  3027  004298  0012               	return	
  3028  00429A                     
  3029                           ;MessageFunctions.c: 43: GetMcuRunTime();
  3030  00429A  EC38  F014         	call	_GetMcuRunTime	;wreg free
  3031                           
  3032                           ;MessageFunctions.c: 48: }
  3033                           
  3034                           ;MessageFunctions.c: 47: break;
  3035                           
  3036                           ;MessageFunctions.c: 46: default:
  3037                           
  3038                           ;MessageFunctions.c: 44: break;
  3039  00429E  0012               	return	
  3040  0042A0                     l1306:
  3041  0042A0  0100               	movlb	0	; () banked
  3042  0042A2  51DD               	movf	GroupStatusAndVersion@request& (0+255),w,b
  3043                           
  3044                           ; Switch size 1, requested type "space"
  3045                           ; Number of cases is 2, Range of values is 33 to 34
  3046                           ; switch strategies available:
  3047                           ; Name         Instructions Cycles
  3048                           ; simple_byte            7     4 (average)
  3049                           ;	Chosen strategy is simple_byte
  3050  0042A4  0A21               	xorlw	33	; case 33
  3051  0042A6  B4D8               	btfsc	status,2,c
  3052  0042A8  D7F8               	goto	l1309
  3053  0042AA  0A03               	xorlw	3	; case 34
  3054  0042AC  A4D8               	btfss	status,2,c
  3055  0042AE  0012               	return	
  3056  0042B0  D7F1               	goto	l1307
  3057  0042B2                     __end_of_GroupStatusAndVersion:
  3058                           	opt stack 0
  3059                           tosu	equ	0xFFF
  3060                           tosh	equ	0xFFE
  3061                           tosl	equ	0xFFD
  3062                           pclath	equ	0xFFA
  3063                           tblptru	equ	0xFF8
  3064                           tblptrh	equ	0xFF7
  3065                           tblptrl	equ	0xFF6
  3066                           tablat	equ	0xFF5
  3067                           postinc0	equ	0xFEE
  3068                           wreg	equ	0xFE8
  3069                           postdec1	equ	0xFE5
  3070                           fsr1l	equ	0xFE1
  3071                           indf2	equ	0xFDF
  3072                           postinc2	equ	0xFDE
  3073                           fsr2h	equ	0xFDA
  3074                           fsr2l	equ	0xFD9
  3075                           status	equ	0xFD8
  3076                           
  3077 ;; *************** function _GroupControlMcu *****************
  3078 ;; Defined at:
  3079 ;;		line 11 in file "MessageFunctions.c"
  3080 ;; Parameters:    Size  Location     Type
  3081 ;;  request         1    wreg     enum E12
  3082 ;;  data            3  122[BANK0 ] PTR unsigned char 
  3083 ;; Auto vars:     Size  Location     Type
  3084 ;;  request         1  125[BANK0 ] enum E12
  3085 ;; Return value:  Size  Location     Type
  3086 ;;                  1    wreg      void 
  3087 ;; Registers used:
  3088 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3089 ;; Tracked objects:
  3090 ;;		On entry : 0/0
  3091 ;;		On exit  : 0/0
  3092 ;;		Unchanged: 0/0
  3093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3094 ;;      Params:         0       2       0       0       0       0       0
  3095 ;;      Locals:         0       1       0       0       0       0       0
  3096 ;;      Temps:          0       0       0       0       0       0       0
  3097 ;;      Totals:         0       3       0       0       0       0       0
  3098 ;;Total ram usage:        3 bytes
  3099 ;; Hardware stack levels used:    1
  3100 ;; Hardware stack levels required when called:    8
  3101 ;; This function calls:
  3102 ;;		_ResetMcu
  3103 ;;		_testLeds
  3104 ;; This function is called by:
  3105 ;;		_readUartMessage
  3106 ;; This function uses a non-reentrant model
  3107 ;;
  3108                           
  3109                           	psect	text7
  3110  0040BA                     __ptext7:
  3111                           	opt stack 0
  3112  0040BA                     _GroupControlMcu:
  3113                           	opt stack 21
  3114                           
  3115                           ;incstack = 0
  3116                           ;GroupControlMcu@request stored from wreg
  3117  0040BA  0100               	movlb	0	; () banked
  3118  0040BC  6FDD               	movwf	GroupControlMcu@request& (0+255),b
  3119                           
  3120                           ;MessageFunctions.c: 13: switch (request)
  3121  0040BE  D006               	goto	l1296
  3122  0040C0                     
  3123                           ;MessageFunctions.c: 16: testLeds();
  3124  0040C0  ECC7  F01B         	call	_testLeds	;wreg free
  3125                           
  3126                           ;MessageFunctions.c: 17: break;
  3127  0040C4  0012               	return	
  3128  0040C6                     
  3129                           ;MessageFunctions.c: 20: ResetMcu();
  3130  0040C6  EC56  F022         	call	_ResetMcu	;wreg free
  3131                           
  3132                           ;MessageFunctions.c: 31: }
  3133                           
  3134                           ;MessageFunctions.c: 30: break;
  3135                           
  3136                           ;MessageFunctions.c: 29: default:
  3137                           
  3138                           ;MessageFunctions.c: 27: break;
  3139                           
  3140                           ;MessageFunctions.c: 26: case CONTROL_PA2_SET:
  3141                           
  3142                           ;MessageFunctions.c: 24: break;
  3143                           
  3144                           ;MessageFunctions.c: 23: case CONTROL_PA1_SET:
  3145                           
  3146                           ;MessageFunctions.c: 21: break;
  3147  0040CA  0012               	return	
  3148  0040CC                     l1296:
  3149  0040CC  0100               	movlb	0	; () banked
  3150  0040CE  51DD               	movf	GroupControlMcu@request& (0+255),w,b
  3151                           
  3152                           ; Switch size 1, requested type "space"
  3153                           ; Number of cases is 4, Range of values is 17 to 20
  3154                           ; switch strategies available:
  3155                           ; Name         Instructions Cycles
  3156                           ; simple_byte           13     7 (average)
  3157                           ;	Chosen strategy is simple_byte
  3158  0040D0  0A11               	xorlw	17	; case 17
  3159  0040D2  B4D8               	btfsc	status,2,c
  3160  0040D4  D7F8               	goto	l1299
  3161  0040D6  0A03               	xorlw	3	; case 18
  3162  0040D8  B4D8               	btfsc	status,2,c
  3163  0040DA  0012               	return	
  3164  0040DC  0A01               	xorlw	1	; case 19
  3165  0040DE  B4D8               	btfsc	status,2,c
  3166  0040E0  0012               	return	
  3167  0040E2  0A07               	xorlw	7	; case 20
  3168  0040E4  A4D8               	btfss	status,2,c
  3169  0040E6  0012               	return	
  3170  0040E8  D7EB               	goto	l1297
  3171  0040EA                     __end_of_GroupControlMcu:
  3172                           	opt stack 0
  3173                           tosu	equ	0xFFF
  3174                           tosh	equ	0xFFE
  3175                           tosl	equ	0xFFD
  3176                           pclath	equ	0xFFA
  3177                           tblptru	equ	0xFF8
  3178                           tblptrh	equ	0xFF7
  3179                           tblptrl	equ	0xFF6
  3180                           tablat	equ	0xFF5
  3181                           postinc0	equ	0xFEE
  3182                           wreg	equ	0xFE8
  3183                           postdec1	equ	0xFE5
  3184                           fsr1l	equ	0xFE1
  3185                           indf2	equ	0xFDF
  3186                           postinc2	equ	0xFDE
  3187                           fsr2h	equ	0xFDA
  3188                           fsr2l	equ	0xFD9
  3189                           status	equ	0xFD8
  3190                           
  3191 ;; *************** function _GroupSynthesizers *****************
  3192 ;; Defined at:
  3193 ;;		line 63 in file "MessageFunctions.c"
  3194 ;; Parameters:    Size  Location     Type
  3195 ;;  request         1    wreg     enum E12
  3196 ;;  data            2  122[BANK0 ] PTR unsigned char 
  3197 ;; Auto vars:     Size  Location     Type
  3198 ;;  request         1  124[BANK0 ] enum E12
  3199 ;; Return value:  Size  Location     Type
  3200 ;;                  1    wreg      void 
  3201 ;; Registers used:
  3202 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3203 ;; Tracked objects:
  3204 ;;		On entry : 0/0
  3205 ;;		On exit  : 0/0
  3206 ;;		Unchanged: 0/0
  3207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3208 ;;      Params:         0       2       0       0       0       0       0
  3209 ;;      Locals:         0       1       0       0       0       0       0
  3210 ;;      Temps:          0       0       0       0       0       0       0
  3211 ;;      Totals:         0       3       0       0       0       0       0
  3212 ;;Total ram usage:        3 bytes
  3213 ;; Hardware stack levels used:    1
  3214 ;; Hardware stack levels required when called:   12
  3215 ;; This function calls:
  3216 ;;		_SetSynthOper
  3217 ;;		_SynthReadData
  3218 ;;		_UpdateSynthFreq
  3219 ;; This function is called by:
  3220 ;;		_readUartMessage
  3221 ;; This function uses a non-reentrant model
  3222 ;;
  3223                           
  3224                           	psect	text8
  3225  003432                     __ptext8:
  3226                           	opt stack 0
  3227  003432                     _GroupSynthesizers:
  3228                           	opt stack 17
  3229                           
  3230                           ;incstack = 0
  3231                           ;GroupSynthesizers@request stored from wreg
  3232  003432  0100               	movlb	0	; () banked
  3233  003434  6FDC               	movwf	GroupSynthesizers@request& (0+255),b
  3234                           
  3235                           ;MessageFunctions.c: 65: switch (request)
  3236  003436  D028               	goto	l1321
  3237  003438                     
  3238                           ;MessageFunctions.c: 76: UpdateSynthFreq(SYNTH_TX, data);
  3239  003438  C0DA  F08A         	movff	GroupSynthesizers@data,UpdateSynthFreq@data
  3240  00343C  C0DB  F08B         	movff	GroupSynthesizers@data+1,UpdateSynthFreq@data+1
  3241  003440  0E00               	movlw	0
  3242  003442  ECDD  F011         	call	_UpdateSynthFreq
  3243                           
  3244                           ;MessageFunctions.c: 77: break;
  3245  003446  0012               	return	
  3246  003448                     
  3247                           ;MessageFunctions.c: 80: UpdateSynthFreq(SYNTH_RX, data);
  3248  003448  C0DA  F08A         	movff	GroupSynthesizers@data,UpdateSynthFreq@data
  3249  00344C  C0DB  F08B         	movff	GroupSynthesizers@data+1,UpdateSynthFreq@data+1
  3250  003450  0E01               	movlw	1
  3251  003452  ECDD  F011         	call	_UpdateSynthFreq
  3252                           
  3253                           ;MessageFunctions.c: 81: break;
  3254  003456  0012               	return	
  3255  003458                     
  3256                           ;MessageFunctions.c: 84: SetSynthOper(SYNTH_RX);
  3257  003458  0E01               	movlw	1
  3258  00345A  ECA0  F01A         	call	_SetSynthOper
  3259                           
  3260                           ;MessageFunctions.c: 85: break;
  3261  00345E  0012               	return	
  3262  003460                     
  3263                           ;MessageFunctions.c: 88: SetSynthOper(SYNTH_TX);
  3264  003460  0E00               	movlw	0
  3265  003462  ECA0  F01A         	call	_SetSynthOper
  3266                           
  3267                           ;MessageFunctions.c: 89: break;
  3268  003466  0012               	return	
  3269  003468                     
  3270                           ;MessageFunctions.c: 92: SynthReadData(SYNTH_RX, data);
  3271  003468  C0DA  F0C8         	movff	GroupSynthesizers@data,SynthReadData@data
  3272  00346C  C0DB  F0C9         	movff	GroupSynthesizers@data+1,SynthReadData@data+1
  3273  003470  0E01               	movlw	1
  3274  003472  EC80  F00B         	call	_SynthReadData
  3275                           
  3276                           ;MessageFunctions.c: 93: break;
  3277  003476  0012               	return	
  3278  003478                     
  3279                           ;MessageFunctions.c: 96: SynthReadData(SYNTH_TX, data);
  3280  003478  C0DA  F0C8         	movff	GroupSynthesizers@data,SynthReadData@data
  3281  00347C  C0DB  F0C9         	movff	GroupSynthesizers@data+1,SynthReadData@data+1
  3282  003480  0E00               	movlw	0
  3283  003482  EC80  F00B         	call	_SynthReadData
  3284                           
  3285                           ;MessageFunctions.c: 101: }
  3286                           
  3287                           ;MessageFunctions.c: 100: break;
  3288                           
  3289                           ;MessageFunctions.c: 99: default:
  3290                           
  3291                           ;MessageFunctions.c: 97: break;
  3292  003486  0012               	return	
  3293  003488                     l1321:
  3294  003488  0100               	movlb	0	; () banked
  3295  00348A  51DC               	movf	GroupSynthesizers@request& (0+255),w,b
  3296                           
  3297                           ; Switch size 1, requested type "space"
  3298                           ; Number of cases is 8, Range of values is 64 to 71
  3299                           ; switch strategies available:
  3300                           ; Name         Instructions Cycles
  3301                           ; simple_byte           25    13 (average)
  3302                           ;	Chosen strategy is simple_byte
  3303  00348C  0A40               	xorlw	64	; case 64
  3304  00348E  B4D8               	btfsc	status,2,c
  3305  003490  0012               	return	
  3306  003492  0A01               	xorlw	1	; case 65
  3307  003494  B4D8               	btfsc	status,2,c
  3308  003496  0012               	return	
  3309  003498  0A03               	xorlw	3	; case 66
  3310  00349A  B4D8               	btfsc	status,2,c
  3311  00349C  D7CD               	goto	l1325
  3312  00349E  0A01               	xorlw	1	; case 67
  3313  0034A0  B4D8               	btfsc	status,2,c
  3314  0034A2  D7D2               	goto	l1326
  3315  0034A4  0A07               	xorlw	7	; case 68
  3316  0034A6  B4D8               	btfsc	status,2,c
  3317  0034A8  D7D7               	goto	l1327
  3318  0034AA  0A01               	xorlw	1	; case 69
  3319  0034AC  B4D8               	btfsc	status,2,c
  3320  0034AE  D7D8               	goto	l1328
  3321  0034B0  0A03               	xorlw	3	; case 70
  3322  0034B2  B4D8               	btfsc	status,2,c
  3323  0034B4  D7D9               	goto	l1329
  3324  0034B6  0A01               	xorlw	1	; case 71
  3325  0034B8  A4D8               	btfss	status,2,c
  3326  0034BA  0012               	return	
  3327  0034BC  D7DD               	goto	l1330
  3328  0034BE                     __end_of_GroupSynthesizers:
  3329                           	opt stack 0
  3330                           tosu	equ	0xFFF
  3331                           tosh	equ	0xFFE
  3332                           tosl	equ	0xFFD
  3333                           pclath	equ	0xFFA
  3334                           tblptru	equ	0xFF8
  3335                           tblptrh	equ	0xFF7
  3336                           tblptrl	equ	0xFF6
  3337                           tablat	equ	0xFF5
  3338                           postinc0	equ	0xFEE
  3339                           wreg	equ	0xFE8
  3340                           postdec1	equ	0xFE5
  3341                           fsr1l	equ	0xFE1
  3342                           indf2	equ	0xFDF
  3343                           postinc2	equ	0xFDE
  3344                           fsr2h	equ	0xFDA
  3345                           fsr2l	equ	0xFD9
  3346                           status	equ	0xFD8
  3347                           
  3348 ;; *************** function _UpdateSynthFreq *****************
  3349 ;; Defined at:
  3350 ;;		line 89 in file "SyntApp.c"
  3351 ;; Parameters:    Size  Location     Type
  3352 ;;  cType           1    wreg     enum E1
  3353 ;;  data            2   42[BANK0 ] PTR unsigned char 
  3354 ;; Auto vars:     Size  Location     Type
  3355 ;;  cType           1   44[BANK0 ] enum E1
  3356 ;;  retVal          8   45[BANK0 ] struct .
  3357 ;; Return value:  Size  Location     Type
  3358 ;;                  1    wreg      void 
  3359 ;; Registers used:
  3360 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3361 ;; Tracked objects:
  3362 ;;		On entry : 0/0
  3363 ;;		On exit  : 0/0
  3364 ;;		Unchanged: 0/0
  3365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3366 ;;      Params:         0       2       0       0       0       0       0
  3367 ;;      Locals:         0       9       0       0       0       0       0
  3368 ;;      Temps:          0       0       0       0       0       0       0
  3369 ;;      Totals:         0      11       0       0       0       0       0
  3370 ;;Total ram usage:       11 bytes
  3371 ;; Hardware stack levels used:    1
  3372 ;; Hardware stack levels required when called:    8
  3373 ;; This function calls:
  3374 ;;		_GetIntFromUartData
  3375 ;;		_SWSPI_send_word
  3376 ;;		_SendAckMessage
  3377 ;;		_StoreIntInEeprom
  3378 ;; This function is called by:
  3379 ;;		_GroupSynthesizers
  3380 ;; This function uses a non-reentrant model
  3381 ;;
  3382                           
  3383                           	psect	text9
  3384  0023BA                     __ptext9:
  3385                           	opt stack 0
  3386  0023BA                     _UpdateSynthFreq:
  3387                           	opt stack 20
  3388                           
  3389                           ;incstack = 0
  3390                           ;UpdateSynthFreq@cType stored from wreg
  3391  0023BA  0100               	movlb	0	; () banked
  3392  0023BC  6F8C               	movwf	UpdateSynthFreq@cType& (0+255),b
  3393                           
  3394                           ;SyntApp.c: 91: INT_VAL retVal;
  3395                           ;SyntApp.c: 92: if(cntRegUpdate < 7)
  3396  0023BE  0E07               	movlw	7
  3397  0023C0  0100               	movlb	0	; () banked
  3398  0023C2  61E6               	cpfslt	_cntRegUpdate& (0+255),b
  3399  0023C4  D061               	goto	l537
  3400                           
  3401                           ; BSR set to: 0
  3402                           ;SyntApp.c: 93: {
  3403                           ;SyntApp.c: 94: retVal = GetIntFromUartData(10, data);
  3404  0023C6  C08A  F066         	movff	UpdateSynthFreq@data,GetIntFromUartData@data
  3405  0023CA  C08B  F067         	movff	UpdateSynthFreq@data+1,GetIntFromUartData@data+1
  3406  0023CE  0E0A               	movlw	10
  3407  0023D0  ECF1  F00E         	call	_GetIntFromUartData
  3408  0023D4  EE20  F08D         	lfsr	2,UpdateSynthFreq@retVal
  3409  0023D8  0E07               	movlw	7
  3410  0023DA                     u8981:
  3411  0023DA  CFEB FFDB          	movff	plusw0,plusw2
  3412  0023DE  06E8               	decf	wreg,f,c
  3413  0023E0  E2FC               	bc	u8981
  3414                           
  3415                           ;SyntApp.c: 95: SWSPI_send_word(cType, retVal.num, 3);
  3416  0023E2  C08D  F029         	movff	UpdateSynthFreq@retVal,SWSPI_send_word@data
  3417  0023E6  C08E  F02A         	movff	UpdateSynthFreq@retVal+1,SWSPI_send_word@data+1
  3418  0023EA  C08F  F02B         	movff	UpdateSynthFreq@retVal+2,SWSPI_send_word@data+2
  3419  0023EE  C090  F02C         	movff	UpdateSynthFreq@retVal+3,SWSPI_send_word@data+3
  3420  0023F2  0E03               	movlw	3
  3421  0023F4  6E2D               	movwf	SWSPI_send_word@dataSize,c
  3422  0023F6  0100               	movlb	0	; () banked
  3423  0023F8  518C               	movf	UpdateSynthFreq@cType& (0+255),w,b
  3424  0023FA  EC96  F018         	call	_SWSPI_send_word
  3425                           
  3426                           ;SyntApp.c: 96: if(cType == SYNTH_TX)
  3427  0023FE  0100               	movlb	0	; () banked
  3428  002400  518C               	movf	UpdateSynthFreq@cType& (0+255),w,b
  3429  002402  A4D8               	btfss	status,2,c
  3430  002404  D01D               	goto	l538
  3431                           
  3432                           ; BSR set to: 0
  3433                           ;SyntApp.c: 97: {
  3434                           ;SyntApp.c: 98: StoreIntInEeprom(retVal.num, (0) | SYNTH_ADDRES[retVal.con], 4);
  3435  002406  C08D  F021         	movff	UpdateSynthFreq@retVal,StoreIntInEeprom@data
  3436  00240A  C08E  F022         	movff	UpdateSynthFreq@retVal+1,StoreIntInEeprom@data+1
  3437  00240E  C08F  F023         	movff	UpdateSynthFreq@retVal+2,StoreIntInEeprom@data+2
  3438  002412  C090  F024         	movff	UpdateSynthFreq@retVal+3,StoreIntInEeprom@data+3
  3439  002416  0E35               	movlw	low _SYNTH_ADDRES
  3440  002418  2591               	addwf	(UpdateSynthFreq@retVal+4)& (0+255),w,b
  3441  00241A  6EF6               	movwf	tblptrl,c
  3442  00241C  0E06               	movlw	high _SYNTH_ADDRES
  3443  00241E  2192               	addwfc	(UpdateSynthFreq@retVal+5)& (0+255),w,b
  3444  002420  6EF7               	movwf	tblptrh,c
  3445  002422                     	if	0	;There are less than 3 active tblptr bytes
  3446  002422                     	endif
  3447  002422  0008               	tblrd		*
  3448  002424  CFF5 F025          	movff	tablat,StoreIntInEeprom@address
  3449  002428  0E00               	movlw	0
  3450  00242A  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  3451  00242C  0E04               	movlw	4
  3452  00242E  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  3453  002430  EC85  F01F         	call	_StoreIntInEeprom	;wreg free
  3454                           
  3455                           ;SyntApp.c: 99: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_REQ_ANTHER_TX_R
      +                          EG);
  3456  002434  0E48               	movlw	72
  3457  002436  6E24               	movwf	SendAckMessage@inRequest,c
  3458  002438  0E04               	movlw	4
  3459  00243A  EC1D  F01E         	call	_SendAckMessage
  3460                           
  3461                           ;SyntApp.c: 100: }
  3462  00243E  D021               	goto	l540
  3463  002440                     l538:
  3464                           
  3465                           ;SyntApp.c: 101: else if(cType == SYNTH_RX)
  3466  002440  0100               	movlb	0	; () banked
  3467  002442  058C               	decf	UpdateSynthFreq@cType& (0+255),w,b
  3468  002444  A4D8               	btfss	status,2,c
  3469  002446  D01D               	goto	l540
  3470                           
  3471                           ; BSR set to: 0
  3472                           ;SyntApp.c: 102: {
  3473                           ;SyntApp.c: 103: StoreIntInEeprom(retVal.num, (0x20) | SYNTH_ADDRES[retVal.con], 4);
  3474  002448  C08D  F021         	movff	UpdateSynthFreq@retVal,StoreIntInEeprom@data
  3475  00244C  C08E  F022         	movff	UpdateSynthFreq@retVal+1,StoreIntInEeprom@data+1
  3476  002450  C08F  F023         	movff	UpdateSynthFreq@retVal+2,StoreIntInEeprom@data+2
  3477  002454  C090  F024         	movff	UpdateSynthFreq@retVal+3,StoreIntInEeprom@data+3
  3478  002458  0E35               	movlw	low _SYNTH_ADDRES
  3479  00245A  2591               	addwf	(UpdateSynthFreq@retVal+4)& (0+255),w,b
  3480  00245C  6EF6               	movwf	tblptrl,c
  3481  00245E  0E06               	movlw	high _SYNTH_ADDRES
  3482  002460  2192               	addwfc	(UpdateSynthFreq@retVal+5)& (0+255),w,b
  3483  002462  6EF7               	movwf	tblptrh,c
  3484  002464                     	if	0	;There are less than 3 active tblptr bytes
  3485  002464                     	endif
  3486  002464  0008               	tblrd		*
  3487  002466  50F5               	movf	tablat,w,c
  3488  002468  0920               	iorlw	32
  3489  00246A  6E25               	movwf	StoreIntInEeprom@address,c
  3490  00246C  0E00               	movlw	0
  3491  00246E  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  3492  002470  0E04               	movlw	4
  3493  002472  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  3494  002474  EC85  F01F         	call	_StoreIntInEeprom	;wreg free
  3495                           
  3496                           ;SyntApp.c: 104: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_REQ_ANTHER_RX_
      +                          REG);
  3497  002478  0E49               	movlw	73
  3498  00247A  6E24               	movwf	SendAckMessage@inRequest,c
  3499  00247C  0E04               	movlw	4
  3500  00247E  EC1D  F01E         	call	_SendAckMessage
  3501  002482                     l540:
  3502                           
  3503                           ;SyntApp.c: 105: }
  3504                           ;SyntApp.c: 106: cntRegUpdate ++;
  3505  002482  0100               	movlb	0	; () banked
  3506  002484  2BE6               	incf	_cntRegUpdate& (0+255),f,b
  3507                           
  3508                           ;SyntApp.c: 107: }
  3509  002486  0012               	return	
  3510  002488                     l537:
  3511                           
  3512                           ; BSR set to: 0
  3513                           ;SyntApp.c: 109: else
  3514                           ;SyntApp.c: 110: {
  3515                           ;SyntApp.c: 111: cntRegUpdate = 0;
  3516                           
  3517                           ; BSR set to: 0
  3518  002488  0E00               	movlw	0
  3519  00248A  6FE6               	movwf	_cntRegUpdate& (0+255),b
  3520                           
  3521                           ;SyntApp.c: 112: if(cType == SYNTH_TX)
  3522  00248C  518C               	movf	UpdateSynthFreq@cType& (0+255),w,b
  3523  00248E  A4D8               	btfss	status,2,c
  3524  002490  D006               	goto	l542
  3525                           
  3526                           ; BSR set to: 0
  3527                           ;SyntApp.c: 113: {
  3528                           ;SyntApp.c: 114: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_DOWN_SET);
  3529  002492  0E42               	movlw	66
  3530  002494  6E24               	movwf	SendAckMessage@inRequest,c
  3531  002496  0E04               	movlw	4
  3532  002498  EC1D  F01E         	call	_SendAckMessage
  3533                           
  3534                           ;SyntApp.c: 115: }
  3535  00249C  0012               	return	
  3536  00249E                     l542:
  3537                           
  3538                           ;SyntApp.c: 116: else if(cType == SYNTH_RX)
  3539  00249E  0100               	movlb	0	; () banked
  3540  0024A0  058C               	decf	UpdateSynthFreq@cType& (0+255),w,b
  3541  0024A2  A4D8               	btfss	status,2,c
  3542  0024A4  0012               	return	
  3543                           
  3544                           ; BSR set to: 0
  3545                           ;SyntApp.c: 117: {
  3546                           ;SyntApp.c: 118: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_UP_SET);
  3547  0024A6  0E43               	movlw	67
  3548  0024A8  6E24               	movwf	SendAckMessage@inRequest,c
  3549  0024AA  0E04               	movlw	4
  3550  0024AC  EC1D  F01E         	call	_SendAckMessage
  3551  0024B0  0012               	return	
  3552  0024B2                     __end_of_UpdateSynthFreq:
  3553                           	opt stack 0
  3554                           tosu	equ	0xFFF
  3555                           tosh	equ	0xFFE
  3556                           tosl	equ	0xFFD
  3557                           pclath	equ	0xFFA
  3558                           tblptru	equ	0xFF8
  3559                           tblptrh	equ	0xFF7
  3560                           tblptrl	equ	0xFF6
  3561                           tablat	equ	0xFF5
  3562                           postinc0	equ	0xFEE
  3563                           plusw0	equ	0xFEB
  3564                           wreg	equ	0xFE8
  3565                           postdec1	equ	0xFE5
  3566                           fsr1l	equ	0xFE1
  3567                           indf2	equ	0xFDF
  3568                           postinc2	equ	0xFDE
  3569                           plusw2	equ	0xFDB
  3570                           fsr2h	equ	0xFDA
  3571                           fsr2l	equ	0xFD9
  3572                           status	equ	0xFD8
  3573                           
  3574 ;; *************** function _SynthReadData *****************
  3575 ;; Defined at:
  3576 ;;		line 158 in file "SyntApp.c"
  3577 ;; Parameters:    Size  Location     Type
  3578 ;;  cType           1    wreg     enum E1
  3579 ;;  data            2  104[BANK0 ] PTR unsigned char 
  3580 ;; Auto vars:     Size  Location     Type
  3581 ;;  cType           1   19[BANK1 ] enum E1
  3582 ;;  data            1   18[BANK1 ] unsigned char 
  3583 ;;  TxMsg          18    0[BANK1 ] unsigned char [18]
  3584 ;;  eepromDataAr   12   20[BANK1 ] unsigned long [3]
  3585 ;;  byteNum         1   33[BANK1 ] unsigned char 
  3586 ;;  regNum          1   32[BANK1 ] unsigned char 
  3587 ;; Return value:  Size  Location     Type
  3588 ;;                  1    wreg      void 
  3589 ;; Registers used:
  3590 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3591 ;; Tracked objects:
  3592 ;;		On entry : 0/0
  3593 ;;		On exit  : 0/0
  3594 ;;		Unchanged: 0/0
  3595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3596 ;;      Params:         0       2       0       0       0       0       0
  3597 ;;      Locals:         0       0      34       0       0       0       0
  3598 ;;      Temps:          0       0       0       0       0       0       0
  3599 ;;      Totals:         0       2      34       0       0       0       0
  3600 ;;Total ram usage:       36 bytes
  3601 ;; Hardware stack levels used:    1
  3602 ;; Hardware stack levels required when called:   10
  3603 ;; This function calls:
  3604 ;;		_ReadIntFromEeprom
  3605 ;;		_WriteUartMessage
  3606 ;;		_ZeroArray
  3607 ;;		_crc8
  3608 ;;		_make8
  3609 ;; This function is called by:
  3610 ;;		_GroupSynthesizers
  3611 ;; This function uses a non-reentrant model
  3612 ;;
  3613                           
  3614                           	psect	text10
  3615  001700                     __ptext10:
  3616                           	opt stack 0
  3617  001700                     _SynthReadData:
  3618                           	opt stack 18
  3619                           
  3620                           ;incstack = 0
  3621                           ;SynthReadData@cType stored from wreg
  3622  001700  0101               	movlb	1	; () banked
  3623  001702  6FC6               	movwf	SynthReadData@cType& (0+255),b
  3624                           
  3625                           ;SyntApp.c: 160: uint32_t eepromDataArray[3];
  3626                           ;SyntApp.c: 161: uint8_t regNum = 0, byteNum = 0;
  3627  001704  0E00               	movlw	0
  3628  001706  0101               	movlb	1	; () banked
  3629  001708  6FD3               	movwf	SynthReadData@regNum& (0+255),b
  3630  00170A  0E00               	movlw	0
  3631  00170C  6FD4               	movwf	SynthReadData@byteNum& (0+255),b
  3632                           
  3633                           ; BSR set to: 1
  3634                           ;SyntApp.c: 162: char TxMsg[5 * 3 + 1 + 1 + 1];
  3635                           ;SyntApp.c: 163: ZeroArray(TxMsg, 5 * 3 + 1 + 1 + 1);
  3636  00170E  0EB3               	movlw	low SynthReadData@TxMsg
  3637  001710  6E20               	movwf	ZeroArray@array,c
  3638  001712  0E01               	movlw	high SynthReadData@TxMsg
  3639  001714  6E21               	movwf	ZeroArray@array+1,c
  3640  001716  0E00               	movlw	0
  3641  001718  6E23               	movwf	ZeroArray@size+1,c
  3642  00171A  0E12               	movlw	18
  3643  00171C  6E22               	movwf	ZeroArray@size,c
  3644  00171E  ECCD  F021         	call	_ZeroArray	;wreg free
  3645                           
  3646                           ;SyntApp.c: 166: TxMsg[(0)] = (0x24);
  3647  001722  0E24               	movlw	36
  3648  001724  0101               	movlb	1	; () banked
  3649  001726  6FB3               	movwf	SynthReadData@TxMsg& (0+255),b
  3650                           
  3651                           ; BSR set to: 1
  3652                           ;SyntApp.c: 167: TxMsg[(1)] = SYNTH_MSG;
  3653  001728  0E04               	movlw	4
  3654  00172A  6FB4               	movwf	(SynthReadData@TxMsg+1)& (0+255),b
  3655                           
  3656                           ; BSR set to: 1
  3657                           ;SyntApp.c: 168: TxMsg[(3)] = 5 * 3 + 1 - (0x4);
  3658  00172C  0E0C               	movlw	12
  3659  00172E  6FB6               	movwf	(SynthReadData@TxMsg+3)& (0+255),b
  3660                           
  3661                           ; BSR set to: 1
  3662                           ;SyntApp.c: 170: if(cType == SYNTH_TX)
  3663  001730  51C6               	movf	SynthReadData@cType& (0+255),w,b
  3664  001732  A4D8               	btfss	status,2,c
  3665  001734  D03A               	goto	l558
  3666                           
  3667                           ; BSR set to: 1
  3668                           ;SyntApp.c: 171: {
  3669                           ;SyntApp.c: 172: TxMsg[(2)] = SYNTH_DOWN_READ_DATA;
  3670  001736  0E47               	movlw	71
  3671  001738  6FB5               	movwf	(SynthReadData@TxMsg+2)& (0+255),b
  3672                           
  3673                           ; BSR set to: 1
  3674                           ;SyntApp.c: 173: eepromDataArray[0] = ReadIntFromEeprom((0) | SYNTH_ADDRES[0], 4);
  3675  00173A  0E00               	movlw	0
  3676  00173C  0100               	movlb	0	; () banked
  3677  00173E  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3678  001740  0E04               	movlw	4
  3679  001742  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3680  001744  0E35               	movlw	low _SYNTH_ADDRES
  3681  001746  6EF6               	movwf	tblptrl,c
  3682  001748                     	if	1	;There is more than 1 active tblptr byte
  3683  001748  0E06               	movlw	high _SYNTH_ADDRES
  3684  00174A  6EF7               	movwf	tblptrh,c
  3685  00174C                     	endif
  3686  00174C                     	if	0	;There are less than 3 active tblptr bytes
  3687  00174C                     	endif
  3688  00174C  0008               	tblrd		*
  3689  00174E  50F5               	movf	tablat,w,c
  3690  001750  EC44  F010         	call	_ReadIntFromEeprom
  3691  001754  C0B1  F1C7         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray
  3692  001758  C0B2  F1C8         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+1
  3693  00175C  C0B3  F1C9         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+2
  3694  001760  C0B4  F1CA         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+3
  3695                           
  3696                           ;SyntApp.c: 174: eepromDataArray[1] = ReadIntFromEeprom((0) | SYNTH_ADDRES[1], 4);
  3697  001764  0E00               	movlw	0
  3698  001766  0100               	movlb	0	; () banked
  3699  001768  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3700  00176A  0E04               	movlw	4
  3701  00176C  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3702  00176E  0E36               	movlw	low (_SYNTH_ADDRES+1)
  3703  001770  6EF6               	movwf	tblptrl,c
  3704  001772  0E06               	movlw	high (_SYNTH_ADDRES+1)
  3705  001774  6EF7               	movwf	tblptrh,c
  3706  001776                     	if	0	;tblptru may be non-zero
  3707  001776                     	endif
  3708  001776                     	if	0	;tblptru may be non-zero
  3709  001776                     	endif
  3710  001776  0008               	tblrd		*
  3711  001778  50F5               	movf	tablat,w,c
  3712  00177A  EC44  F010         	call	_ReadIntFromEeprom
  3713  00177E  C0B1  F1CB         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+4
  3714  001782  C0B2  F1CC         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+5
  3715  001786  C0B3  F1CD         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+6
  3716  00178A  C0B4  F1CE         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+7
  3717                           
  3718                           ;SyntApp.c: 175: eepromDataArray[2] = ReadIntFromEeprom((0) | SYNTH_ADDRES[2], 4);
  3719  00178E  0E00               	movlw	0
  3720  001790  0100               	movlb	0	; () banked
  3721  001792  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3722  001794  0E04               	movlw	4
  3723  001796  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3724  001798  0E37               	movlw	low (_SYNTH_ADDRES+2)
  3725  00179A  6EF6               	movwf	tblptrl,c
  3726  00179C  0E06               	movlw	high (_SYNTH_ADDRES+2)
  3727  00179E  6EF7               	movwf	tblptrh,c
  3728  0017A0                     	if	0	;tblptru may be non-zero
  3729  0017A0                     	endif
  3730  0017A0                     	if	0	;tblptru may be non-zero
  3731  0017A0                     	endif
  3732  0017A0  0008               	tblrd		*
  3733  0017A2  50F5               	movf	tablat,w,c
  3734  0017A4  EC44  F010         	call	_ReadIntFromEeprom
  3735  0017A8  D040               	goto	L1
  3736  0017AA                     l558:
  3737                           
  3738                           ;SyntApp.c: 177: else if (cType == SYNTH_RX)
  3739  0017AA  0101               	movlb	1	; () banked
  3740  0017AC  05C6               	decf	SynthReadData@cType& (0+255),w,b
  3741  0017AE  A4D8               	btfss	status,2,c
  3742  0017B0  D044               	goto	l560
  3743                           
  3744                           ; BSR set to: 1
  3745                           ;SyntApp.c: 178: {
  3746                           ;SyntApp.c: 179: TxMsg[(2)] = SYNTH_UP_READ_DATA;
  3747  0017B2  0E46               	movlw	70
  3748  0017B4  6FB5               	movwf	(SynthReadData@TxMsg+2)& (0+255),b
  3749                           
  3750                           ; BSR set to: 1
  3751                           ;SyntApp.c: 180: eepromDataArray[0] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[0], 4);
  3752  0017B6  0E00               	movlw	0
  3753  0017B8  0100               	movlb	0	; () banked
  3754  0017BA  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3755  0017BC  0E04               	movlw	4
  3756  0017BE  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3757  0017C0  0E35               	movlw	low _SYNTH_ADDRES
  3758  0017C2  6EF6               	movwf	tblptrl,c
  3759  0017C4                     	if	1	;There is more than 1 active tblptr byte
  3760  0017C4  0E06               	movlw	high _SYNTH_ADDRES
  3761  0017C6  6EF7               	movwf	tblptrh,c
  3762  0017C8                     	endif
  3763  0017C8                     	if	0	;There are less than 3 active tblptr bytes
  3764  0017C8                     	endif
  3765  0017C8  0008               	tblrd		*
  3766  0017CA  50F5               	movf	tablat,w,c
  3767  0017CC  0920               	iorlw	32
  3768  0017CE  EC44  F010         	call	_ReadIntFromEeprom
  3769  0017D2  C0B1  F1C7         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray
  3770  0017D6  C0B2  F1C8         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+1
  3771  0017DA  C0B3  F1C9         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+2
  3772  0017DE  C0B4  F1CA         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+3
  3773                           
  3774                           ;SyntApp.c: 181: eepromDataArray[1] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[1], 4);
  3775  0017E2  0E00               	movlw	0
  3776  0017E4  0100               	movlb	0	; () banked
  3777  0017E6  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3778  0017E8  0E04               	movlw	4
  3779  0017EA  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3780  0017EC  0E36               	movlw	low (_SYNTH_ADDRES+1)
  3781  0017EE  6EF6               	movwf	tblptrl,c
  3782  0017F0  0E06               	movlw	high (_SYNTH_ADDRES+1)
  3783  0017F2  6EF7               	movwf	tblptrh,c
  3784  0017F4                     	if	0	;tblptru may be non-zero
  3785  0017F4                     	endif
  3786  0017F4                     	if	0	;tblptru may be non-zero
  3787  0017F4                     	endif
  3788  0017F4  0008               	tblrd		*
  3789  0017F6  50F5               	movf	tablat,w,c
  3790  0017F8  0920               	iorlw	32
  3791  0017FA  EC44  F010         	call	_ReadIntFromEeprom
  3792  0017FE  C0B1  F1CB         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+4
  3793  001802  C0B2  F1CC         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+5
  3794  001806  C0B3  F1CD         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+6
  3795  00180A  C0B4  F1CE         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+7
  3796                           
  3797                           ;SyntApp.c: 182: eepromDataArray[2] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[2], 4);
  3798  00180E  0E00               	movlw	0
  3799  001810  0100               	movlb	0	; () banked
  3800  001812  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3801  001814  0E04               	movlw	4
  3802  001816  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3803  001818  0E37               	movlw	low (_SYNTH_ADDRES+2)
  3804  00181A  6EF6               	movwf	tblptrl,c
  3805  00181C  0E06               	movlw	high (_SYNTH_ADDRES+2)
  3806  00181E  6EF7               	movwf	tblptrh,c
  3807  001820                     	if	0	;tblptru may be non-zero
  3808  001820                     	endif
  3809  001820                     	if	0	;tblptru may be non-zero
  3810  001820                     	endif
  3811  001820  0008               	tblrd		*
  3812  001822  50F5               	movf	tablat,w,c
  3813  001824  0920               	iorlw	32
  3814  001826  EC44  F010         	call	_ReadIntFromEeprom
  3815  00182A                     L1:
  3816  00182A  C0B1  F1CF         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+8
  3817  00182E  C0B2  F1D0         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+9
  3818  001832  C0B3  F1D1         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+10
  3819  001836  C0B4  F1D2         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+11
  3820  00183A                     l560:
  3821                           
  3822                           ;SyntApp.c: 183: }
  3823                           ;SyntApp.c: 185: for(regNum = 0; regNum < 3; regNum++)
  3824  00183A  0E00               	movlw	0
  3825  00183C  0101               	movlb	1	; () banked
  3826  00183E  6FD3               	movwf	SynthReadData@regNum& (0+255),b
  3827  001840                     l8564:
  3828                           
  3829                           ; BSR set to: 1
  3830  001840  0E02               	movlw	2
  3831  001842  65D3               	cpfsgt	SynthReadData@regNum& (0+255),b
  3832  001844  D001               	goto	l561
  3833  001846  D032               	goto	u9160
  3834  001848                     l561:
  3835                           
  3836                           ; BSR set to: 1
  3837                           ;SyntApp.c: 186: {
  3838                           ;SyntApp.c: 187: for(byteNum = 0; byteNum < (5); byteNum++)
  3839                           
  3840                           ; BSR set to: 1
  3841  001848  0E00               	movlw	0
  3842  00184A  6FD4               	movwf	SynthReadData@byteNum& (0+255),b
  3843  00184C                     l8570:
  3844                           
  3845                           ; BSR set to: 1
  3846  00184C  0E04               	movlw	4
  3847  00184E  65D4               	cpfsgt	SynthReadData@byteNum& (0+255),b
  3848  001850  D001               	goto	l563
  3849  001852  D02A               	goto	u9150
  3850  001854                     l563:
  3851                           
  3852                           ; BSR set to: 1
  3853                           ;SyntApp.c: 188: {
  3854                           ;SyntApp.c: 189: uint8_t data = make8(eepromDataArray[regNum], byteNum);
  3855                           
  3856                           ; BSR set to: 1
  3857  001854  51D3               	movf	SynthReadData@regNum& (0+255),w,b
  3858  001856  0D04               	mullw	4
  3859  001858  0EC7               	movlw	low SynthReadData@eepromDataArray
  3860  00185A  24F3               	addwf	prodl,w,c
  3861  00185C  6ED9               	movwf	fsr2l,c
  3862  00185E  0E01               	movlw	high SynthReadData@eepromDataArray
  3863  001860  20F4               	addwfc	prodh,w,c
  3864  001862  6EDA               	movwf	fsr2h,c
  3865  001864  CFDE F018          	movff	postinc2,make8@data
  3866  001868  CFDE F019          	movff	postinc2,make8@data+1
  3867  00186C  CFDE F01A          	movff	postinc2,make8@data+2
  3868  001870  CFDE F01B          	movff	postinc2,make8@data+3
  3869  001874  C1D4  F01C         	movff	SynthReadData@byteNum,make8@dataLocation
  3870  001878  ECBF  F01C         	call	_make8	;wreg free
  3871  00187C  0101               	movlb	1	; () banked
  3872  00187E  6FC5               	movwf	SynthReadData@data_984& (0+255),b
  3873                           
  3874                           ; BSR set to: 1
  3875                           ;SyntApp.c: 190: TxMsg[(0x4) + (3 + 1)*regNum + byteNum] = data;
  3876  001880  51D3               	movf	SynthReadData@regNum& (0+255),w,b
  3877  001882  0D04               	mullw	4
  3878  001884  51D4               	movf	SynthReadData@byteNum& (0+255),w,b
  3879  001886  26F3               	addwf	prodl,f,c
  3880  001888  0E00               	movlw	0
  3881  00188A  22F4               	addwfc	prodh,f,c
  3882  00188C  0E04               	movlw	4
  3883  00188E  26F3               	addwf	prodl,f,c
  3884  001890  0E00               	movlw	0
  3885  001892  22F4               	addwfc	prodh,f,c
  3886  001894  0EB3               	movlw	low SynthReadData@TxMsg
  3887  001896  24F3               	addwf	prodl,w,c
  3888  001898  6ED9               	movwf	fsr2l,c
  3889  00189A  0E01               	movlw	high SynthReadData@TxMsg
  3890  00189C  20F4               	addwfc	prodh,w,c
  3891  00189E  6EDA               	movwf	fsr2h,c
  3892  0018A0  C1C5  FFDF         	movff	SynthReadData@data_984,indf2
  3893                           
  3894                           ; BSR set to: 1
  3895  0018A4  2BD4               	incf	SynthReadData@byteNum& (0+255),f,b
  3896  0018A6  D7D2               	goto	l8570
  3897  0018A8                     u9150:
  3898                           
  3899                           ; BSR set to: 1
  3900                           
  3901                           ; BSR set to: 1
  3902  0018A8  2BD3               	incf	SynthReadData@regNum& (0+255),f,b
  3903  0018AA  D7CA               	goto	l8564
  3904  0018AC                     u9160:
  3905                           
  3906                           ; BSR set to: 1
  3907                           ;SyntApp.c: 191: }
  3908                           ;SyntApp.c: 192: }
  3909                           ;SyntApp.c: 194: TxMsg[5 * 3 + 1] = 0x9;
  3910                           
  3911                           ; BSR set to: 1
  3912  0018AC  0E09               	movlw	9
  3913  0018AE  6FC3               	movwf	(SynthReadData@TxMsg+16)& (0+255),b
  3914                           
  3915                           ; BSR set to: 1
  3916                           ;SyntApp.c: 195: TxMsg[5 * 3 + 1 + 1] = crc8(TxMsg, 5 * 3 + 1 + 1);
  3917  0018B0  0EB3               	movlw	low SynthReadData@TxMsg
  3918  0018B2  6E18               	movwf	crc8@dataArray,c
  3919  0018B4  0E01               	movlw	high SynthReadData@TxMsg
  3920  0018B6  6E19               	movwf	crc8@dataArray+1,c
  3921  0018B8  0E00               	movlw	0
  3922  0018BA  6E1B               	movwf	crc8@dataSize+1,c
  3923  0018BC  0E11               	movlw	17
  3924  0018BE  6E1A               	movwf	crc8@dataSize,c
  3925  0018C0  EC46  F01E         	call	_crc8	;wreg free
  3926  0018C4  0101               	movlb	1	; () banked
  3927  0018C6  6FC4               	movwf	(SynthReadData@TxMsg+17)& (0+255),b
  3928                           
  3929                           ; BSR set to: 1
  3930                           ;SyntApp.c: 196: WriteUartMessage(TxMsg, 5 * 3 + 1 + 1 + 1);
  3931  0018C8  0EB3               	movlw	low SynthReadData@TxMsg
  3932  0018CA  6E19               	movwf	WriteUartMessage@dataBuf,c
  3933  0018CC  0E01               	movlw	high SynthReadData@TxMsg
  3934  0018CE  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  3935  0018D0  0E00               	movlw	0
  3936  0018D2  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  3937  0018D4  0E12               	movlw	18
  3938  0018D6  6E1B               	movwf	WriteUartMessage@dataSize,c
  3939  0018D8  ECD9  F01F         	call	_WriteUartMessage	;wreg free
  3940  0018DC  0012               	return		;funcret
  3941  0018DE                     __end_of_SynthReadData:
  3942                           	opt stack 0
  3943                           tosu	equ	0xFFF
  3944                           tosh	equ	0xFFE
  3945                           tosl	equ	0xFFD
  3946                           pclath	equ	0xFFA
  3947                           tblptru	equ	0xFF8
  3948                           tblptrh	equ	0xFF7
  3949                           tblptrl	equ	0xFF6
  3950                           tablat	equ	0xFF5
  3951                           prodh	equ	0xFF4
  3952                           prodl	equ	0xFF3
  3953                           postinc0	equ	0xFEE
  3954                           plusw0	equ	0xFEB
  3955                           wreg	equ	0xFE8
  3956                           postdec1	equ	0xFE5
  3957                           fsr1l	equ	0xFE1
  3958                           indf2	equ	0xFDF
  3959                           postinc2	equ	0xFDE
  3960                           plusw2	equ	0xFDB
  3961                           fsr2h	equ	0xFDA
  3962                           fsr2l	equ	0xFD9
  3963                           status	equ	0xFD8
  3964                           
  3965 ;; *************** function _SetSynthOper *****************
  3966 ;; Defined at:
  3967 ;;		line 127 in file "SyntApp.c"
  3968 ;; Parameters:    Size  Location     Type
  3969 ;;  cType           1    wreg     enum E1
  3970 ;; Auto vars:     Size  Location     Type
  3971 ;;  cType           1  111[BANK0 ] enum E1
  3972 ;; Return value:  Size  Location     Type
  3973 ;;                  1    wreg      void 
  3974 ;; Registers used:
  3975 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3976 ;; Tracked objects:
  3977 ;;		On entry : 0/0
  3978 ;;		On exit  : 0/0
  3979 ;;		Unchanged: 0/0
  3980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3981 ;;      Params:         0       0       0       0       0       0       0
  3982 ;;      Locals:         0       1       0       0       0       0       0
  3983 ;;      Temps:          0       0       0       0       0       0       0
  3984 ;;      Totals:         0       1       0       0       0       0       0
  3985 ;;Total ram usage:        1 bytes
  3986 ;; Hardware stack levels used:    1
  3987 ;; Hardware stack levels required when called:   11
  3988 ;; This function calls:
  3989 ;;		_InitSynth
  3990 ;;		_SendAckMessage
  3991 ;;		_SwSpi_Set_CE_Pin
  3992 ;; This function is called by:
  3993 ;;		_GroupSynthesizers
  3994 ;; This function uses a non-reentrant model
  3995 ;;
  3996                           
  3997                           	psect	text11
  3998  003540                     __ptext11:
  3999                           	opt stack 0
  4000  003540                     _SetSynthOper:
  4001                           	opt stack 17
  4002                           
  4003                           ;incstack = 0
  4004                           ;SetSynthOper@cType stored from wreg
  4005  003540  0100               	movlb	0	; () banked
  4006  003542  6FCF               	movwf	SetSynthOper@cType& (0+255),b
  4007                           
  4008                           ;SyntApp.c: 129: if(cType == SYNTH_TX)
  4009  003544  0100               	movlb	0	; () banked
  4010  003546  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4011  003548  A4D8               	btfss	status,2,c
  4012  00354A  D01A               	goto	l548
  4013                           
  4014                           ; BSR set to: 0
  4015                           ;SyntApp.c: 130: {
  4016                           ;SyntApp.c: 131: SynthTxOper = !SynthTxOper;
  4017  00354C  5045               	movf	_SynthTxOper,w,c
  4018  00354E  A4D8               	btfss	status,2,c
  4019  003550  D002               	goto	u9040
  4020  003552  0E01               	movlw	1
  4021  003554  D001               	goto	u9050
  4022  003556                     u9040:
  4023  003556  0E00               	movlw	0
  4024  003558                     u9050:
  4025  003558  6E45               	movwf	_SynthTxOper,c
  4026                           
  4027                           ;SyntApp.c: 132: if(SynthTxOper)
  4028  00355A  5045               	movf	_SynthTxOper,w,c
  4029  00355C  B4D8               	btfsc	status,2,c
  4030  00355E  D004               	goto	l549
  4031                           
  4032                           ; BSR set to: 0
  4033                           ;SyntApp.c: 133: {
  4034                           ;SyntApp.c: 134: InitSynth(cType);
  4035  003560  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4036  003562  EC54  F007         	call	_InitSynth
  4037                           
  4038                           ;SyntApp.c: 135: }
  4039  003566  D006               	goto	l550
  4040  003568                     l549:
  4041                           
  4042                           ;SyntApp.c: 136: else
  4043                           ;SyntApp.c: 137: {
  4044                           ;SyntApp.c: 138: SwSpi_Set_CE_Pin(cType, 0);
  4045  003568  0E00               	movlw	0
  4046  00356A  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  4047  00356C  0100               	movlb	0	; () banked
  4048  00356E  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4049  003570  EC11  F01F         	call	_SwSpi_Set_CE_Pin
  4050  003574                     l550:
  4051                           
  4052                           ;SyntApp.c: 139: }
  4053                           ;SyntApp.c: 140: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_DOWN_OPER);
  4054  003574  0E45               	movlw	69
  4055  003576  6E24               	movwf	SendAckMessage@inRequest,c
  4056  003578  0E04               	movlw	4
  4057  00357A  EC1D  F01E         	call	_SendAckMessage
  4058                           
  4059                           ;SyntApp.c: 141: }
  4060  00357E  0012               	return	
  4061  003580                     l548:
  4062                           
  4063                           ;SyntApp.c: 142: else if (cType == SYNTH_RX)
  4064  003580  0100               	movlb	0	; () banked
  4065  003582  05CF               	decf	SetSynthOper@cType& (0+255),w,b
  4066  003584  A4D8               	btfss	status,2,c
  4067  003586  0012               	return	
  4068                           
  4069                           ; BSR set to: 0
  4070                           ;SyntApp.c: 143: {
  4071                           ;SyntApp.c: 144: SynthRxOper = !SynthRxOper;
  4072  003588  5044               	movf	_SynthRxOper,w,c
  4073  00358A  A4D8               	btfss	status,2,c
  4074  00358C  D002               	goto	u9080
  4075  00358E  0E01               	movlw	1
  4076  003590  D001               	goto	u9090
  4077  003592                     u9080:
  4078  003592  0E00               	movlw	0
  4079  003594                     u9090:
  4080  003594  6E44               	movwf	_SynthRxOper,c
  4081                           
  4082                           ;SyntApp.c: 145: if(SynthRxOper)
  4083  003596  5044               	movf	_SynthRxOper,w,c
  4084  003598  B4D8               	btfsc	status,2,c
  4085  00359A  D004               	goto	l553
  4086                           
  4087                           ; BSR set to: 0
  4088                           ;SyntApp.c: 146: {
  4089                           ;SyntApp.c: 147: InitSynth(cType);
  4090  00359C  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4091  00359E  EC54  F007         	call	_InitSynth
  4092                           
  4093                           ;SyntApp.c: 148: }
  4094  0035A2  D006               	goto	l554
  4095  0035A4                     l553:
  4096                           
  4097                           ;SyntApp.c: 149: else
  4098                           ;SyntApp.c: 150: {
  4099                           ;SyntApp.c: 151: SwSpi_Set_CE_Pin(cType, 0);
  4100  0035A4  0E00               	movlw	0
  4101  0035A6  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  4102  0035A8  0100               	movlb	0	; () banked
  4103  0035AA  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4104  0035AC  EC11  F01F         	call	_SwSpi_Set_CE_Pin
  4105  0035B0                     l554:
  4106                           
  4107                           ;SyntApp.c: 152: }
  4108                           ;SyntApp.c: 153: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_UP_OPER);
  4109  0035B0  0E44               	movlw	68
  4110  0035B2  6E24               	movwf	SendAckMessage@inRequest,c
  4111  0035B4  0E04               	movlw	4
  4112  0035B6  EC1D  F01E         	call	_SendAckMessage
  4113  0035BA  0012               	return	
  4114  0035BC                     __end_of_SetSynthOper:
  4115                           	opt stack 0
  4116                           tosu	equ	0xFFF
  4117                           tosh	equ	0xFFE
  4118                           tosl	equ	0xFFD
  4119                           pclath	equ	0xFFA
  4120                           tblptru	equ	0xFF8
  4121                           tblptrh	equ	0xFF7
  4122                           tblptrl	equ	0xFF6
  4123                           tablat	equ	0xFF5
  4124                           prodh	equ	0xFF4
  4125                           prodl	equ	0xFF3
  4126                           postinc0	equ	0xFEE
  4127                           plusw0	equ	0xFEB
  4128                           wreg	equ	0xFE8
  4129                           postdec1	equ	0xFE5
  4130                           fsr1l	equ	0xFE1
  4131                           indf2	equ	0xFDF
  4132                           postinc2	equ	0xFDE
  4133                           plusw2	equ	0xFDB
  4134                           fsr2h	equ	0xFDA
  4135                           fsr2l	equ	0xFD9
  4136                           status	equ	0xFD8
  4137                           
  4138 ;; *************** function _GetMcuRunTime *****************
  4139 ;; Defined at:
  4140 ;;		line 68 in file "SystemStatus.c"
  4141 ;; Parameters:    Size  Location     Type
  4142 ;;		None
  4143 ;; Auto vars:     Size  Location     Type
  4144 ;;  idx             2   13[BANK0 ] int 
  4145 ;;  TxMsg           9    0[BANK0 ] unsigned char [9]
  4146 ;;  tempRunTime     4    9[BANK0 ] unsigned long 
  4147 ;; Return value:  Size  Location     Type
  4148 ;;                  1    wreg      void 
  4149 ;; Registers used:
  4150 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4151 ;; Tracked objects:
  4152 ;;		On entry : 0/0
  4153 ;;		On exit  : 0/0
  4154 ;;		Unchanged: 0/0
  4155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4156 ;;      Params:         0       0       0       0       0       0       0
  4157 ;;      Locals:         0      15       0       0       0       0       0
  4158 ;;      Temps:          2       0       0       0       0       0       0
  4159 ;;      Totals:         2      15       0       0       0       0       0
  4160 ;;Total ram usage:       17 bytes
  4161 ;; Hardware stack levels used:    1
  4162 ;; Hardware stack levels required when called:    6
  4163 ;; This function calls:
  4164 ;;		_WriteUartMessage
  4165 ;;		___lldiv
  4166 ;;		___llmod
  4167 ;;		_crc8
  4168 ;; This function is called by:
  4169 ;;		_GroupStatusAndVersion
  4170 ;; This function uses a non-reentrant model
  4171 ;;
  4172                           
  4173                           	psect	text12
  4174  002870                     __ptext12:
  4175                           	opt stack 0
  4176  002870                     _GetMcuRunTime:
  4177                           	opt stack 22
  4178                           
  4179                           ;SystemStatus.c: 71: char TxMsg[(0x4) + (0x4) + 1];
  4180                           ;SystemStatus.c: 74: TxMsg[(0)] = (0x24);
  4181                           
  4182                           ;incstack = 0
  4183  002870  0E24               	movlw	36
  4184  002872  0100               	movlb	0	; () banked
  4185  002874  6F60               	movwf	GetMcuRunTime@TxMsg& (0+255),b
  4186                           
  4187                           ;SystemStatus.c: 75: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  4188  002876  0E02               	movlw	2
  4189  002878  6F61               	movwf	(GetMcuRunTime@TxMsg+1)& (0+255),b
  4190                           
  4191                           ;SystemStatus.c: 76: TxMsg[(2)] = STATUS_MCU_RUN_TIME;
  4192  00287A  0E21               	movlw	33
  4193  00287C  6F62               	movwf	(GetMcuRunTime@TxMsg+2)& (0+255),b
  4194                           
  4195                           ;SystemStatus.c: 77: TxMsg[(3)] = (0x4);
  4196  00287E  0E04               	movlw	4
  4197  002880  6F63               	movwf	(GetMcuRunTime@TxMsg+3)& (0+255),b
  4198                           
  4199                           ; BSR set to: 0
  4200                           ;SystemStatus.c: 79: uint32_t tempRunTime = mcuRunTimeIn5SecTicks;
  4201  002882  C128  F069         	movff	_mcuRunTimeIn5SecTicks,GetMcuRunTime@tempRunTime
  4202  002886  C129  F06A         	movff	_mcuRunTimeIn5SecTicks+1,GetMcuRunTime@tempRunTime+1
  4203  00288A  C12A  F06B         	movff	_mcuRunTimeIn5SecTicks+2,GetMcuRunTime@tempRunTime+2
  4204  00288E  C12B  F06C         	movff	_mcuRunTimeIn5SecTicks+3,GetMcuRunTime@tempRunTime+3
  4205                           
  4206                           ;SystemStatus.c: 82: for(int idx = 0; idx < (0x4); idx++)
  4207  002892  0E00               	movlw	0
  4208  002894  6F6E               	movwf	(GetMcuRunTime@idx+1)& (0+255),b
  4209  002896  0E00               	movlw	0
  4210  002898  6F6D               	movwf	GetMcuRunTime@idx& (0+255),b
  4211  00289A                     l8650:
  4212                           
  4213                           ; BSR set to: 0
  4214  00289A  BF6E               	btfsc	(GetMcuRunTime@idx+1)& (0+255),7,b
  4215  00289C  D006               	goto	l1526
  4216  00289E  516E               	movf	(GetMcuRunTime@idx+1)& (0+255),w,b
  4217  0028A0  E142               	bnz	l8662
  4218  0028A2  0E04               	movlw	4
  4219  0028A4  5D6D               	subwf	GetMcuRunTime@idx& (0+255),w,b
  4220  0028A6  B0D8               	btfsc	status,0,c
  4221  0028A8  D03E               	goto	u9200
  4222  0028AA                     l1526:
  4223                           
  4224                           ; BSR set to: 0
  4225                           ;SystemStatus.c: 83: {
  4226                           ;SystemStatus.c: 84: TxMsg[(0x4) + idx] = tempRunTime % 10;
  4227                           
  4228                           ; BSR set to: 0
  4229  0028AA  0E04               	movlw	4
  4230  0028AC  256D               	addwf	GetMcuRunTime@idx& (0+255),w,b
  4231  0028AE  6E25               	movwf	??_GetMcuRunTime& (0+255),c
  4232  0028B0  0E00               	movlw	0
  4233  0028B2  216E               	addwfc	(GetMcuRunTime@idx+1)& (0+255),w,b
  4234  0028B4  6E26               	movwf	(??_GetMcuRunTime+1)& (0+255),c
  4235  0028B6  0E60               	movlw	low GetMcuRunTime@TxMsg
  4236  0028B8  2425               	addwf	??_GetMcuRunTime,w,c
  4237  0028BA  6ED9               	movwf	fsr2l,c
  4238  0028BC  0E00               	movlw	high GetMcuRunTime@TxMsg
  4239  0028BE  2026               	addwfc	??_GetMcuRunTime+1,w,c
  4240  0028C0  6EDA               	movwf	fsr2h,c
  4241  0028C2  C069  F018         	movff	GetMcuRunTime@tempRunTime,___llmod@dividend
  4242  0028C6  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___llmod@dividend+1
  4243  0028CA  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___llmod@dividend+2
  4244  0028CE  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___llmod@dividend+3
  4245  0028D2  0E0A               	movlw	10
  4246  0028D4  6E1C               	movwf	___llmod@divisor,c
  4247  0028D6  0E00               	movlw	0
  4248  0028D8  6E1D               	movwf	___llmod@divisor+1,c
  4249  0028DA  0E00               	movlw	0
  4250  0028DC  6E1E               	movwf	___llmod@divisor+2,c
  4251  0028DE  0E00               	movlw	0
  4252  0028E0  6E1F               	movwf	___llmod@divisor+3,c
  4253  0028E2  ECFC  F01B         	call	___llmod	;wreg free
  4254  0028E6  5018               	movf	?___llmod,w,c
  4255  0028E8  6EDF               	movwf	indf2,c
  4256                           
  4257                           ;SystemStatus.c: 85: tempRunTime /= 10;
  4258  0028EA  C069  F018         	movff	GetMcuRunTime@tempRunTime,___lldiv@dividend
  4259  0028EE  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___lldiv@dividend+1
  4260  0028F2  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___lldiv@dividend+2
  4261  0028F6  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___lldiv@dividend+3
  4262  0028FA  0E0A               	movlw	10
  4263  0028FC  6E1C               	movwf	___lldiv@divisor,c
  4264  0028FE  0E00               	movlw	0
  4265  002900  6E1D               	movwf	___lldiv@divisor+1,c
  4266  002902  0E00               	movlw	0
  4267  002904  6E1E               	movwf	___lldiv@divisor+2,c
  4268  002906  0E00               	movlw	0
  4269  002908  6E1F               	movwf	___lldiv@divisor+3,c
  4270  00290A  EC5F  F01A         	call	___lldiv	;wreg free
  4271  00290E  C018  F069         	movff	?___lldiv,GetMcuRunTime@tempRunTime
  4272  002912  C019  F06A         	movff	?___lldiv+1,GetMcuRunTime@tempRunTime+1
  4273  002916  C01A  F06B         	movff	?___lldiv+2,GetMcuRunTime@tempRunTime+2
  4274  00291A  C01B  F06C         	movff	?___lldiv+3,GetMcuRunTime@tempRunTime+3
  4275  00291E  0100               	movlb	0	; () banked
  4276  002920  4B6D               	infsnz	GetMcuRunTime@idx& (0+255),f,b
  4277  002922  2B6E               	incf	(GetMcuRunTime@idx+1)& (0+255),f,b
  4278  002924  D7BA               	goto	l8650
  4279  002926                     u9200:
  4280  002926                     l8662:
  4281                           
  4282                           ; BSR set to: 0
  4283                           ;SystemStatus.c: 86: }
  4284                           ;SystemStatus.c: 88: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  4285  002926  0E60               	movlw	low GetMcuRunTime@TxMsg
  4286  002928  6E18               	movwf	crc8@dataArray,c
  4287  00292A  0E00               	movlw	high GetMcuRunTime@TxMsg
  4288  00292C  6E19               	movwf	crc8@dataArray+1,c
  4289  00292E  0E00               	movlw	0
  4290  002930  6E1B               	movwf	crc8@dataSize+1,c
  4291  002932  0E08               	movlw	8
  4292  002934  6E1A               	movwf	crc8@dataSize,c
  4293  002936  EC46  F01E         	call	_crc8	;wreg free
  4294  00293A  0100               	movlb	0	; () banked
  4295  00293C  6F68               	movwf	(GetMcuRunTime@TxMsg+8)& (0+255),b
  4296                           
  4297                           ; BSR set to: 0
  4298                           ;SystemStatus.c: 90: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  4299  00293E  0E60               	movlw	low GetMcuRunTime@TxMsg
  4300  002940  6E19               	movwf	WriteUartMessage@dataBuf,c
  4301  002942  0E00               	movlw	high GetMcuRunTime@TxMsg
  4302  002944  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  4303  002946  0E00               	movlw	0
  4304  002948  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  4305  00294A  0E09               	movlw	9
  4306  00294C  6E1B               	movwf	WriteUartMessage@dataSize,c
  4307  00294E  ECD9  F01F         	call	_WriteUartMessage	;wreg free
  4308  002952  0012               	return		;funcret
  4309  002954                     __end_of_GetMcuRunTime:
  4310                           	opt stack 0
  4311                           tosu	equ	0xFFF
  4312                           tosh	equ	0xFFE
  4313                           tosl	equ	0xFFD
  4314                           pclath	equ	0xFFA
  4315                           tblptru	equ	0xFF8
  4316                           tblptrh	equ	0xFF7
  4317                           tblptrl	equ	0xFF6
  4318                           tablat	equ	0xFF5
  4319                           prodh	equ	0xFF4
  4320                           prodl	equ	0xFF3
  4321                           postinc0	equ	0xFEE
  4322                           plusw0	equ	0xFEB
  4323                           wreg	equ	0xFE8
  4324                           postdec1	equ	0xFE5
  4325                           fsr1l	equ	0xFE1
  4326                           indf2	equ	0xFDF
  4327                           postinc2	equ	0xFDE
  4328                           plusw2	equ	0xFDB
  4329                           fsr2h	equ	0xFDA
  4330                           fsr2l	equ	0xFD9
  4331                           status	equ	0xFD8
  4332                           
  4333 ;; *************** function ___lldiv *****************
  4334 ;; Defined at:
  4335 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4336 ;; Parameters:    Size  Location     Type
  4337 ;;  dividend        4   23[COMRAM] unsigned long 
  4338 ;;  divisor         4   27[COMRAM] unsigned long 
  4339 ;; Auto vars:     Size  Location     Type
  4340 ;;  quotient        4   31[COMRAM] unsigned long 
  4341 ;;  counter         1   35[COMRAM] unsigned char 
  4342 ;; Return value:  Size  Location     Type
  4343 ;;                  4   23[COMRAM] unsigned long 
  4344 ;; Registers used:
  4345 ;;		wreg, status,2, status,0
  4346 ;; Tracked objects:
  4347 ;;		On entry : 0/0
  4348 ;;		On exit  : 0/0
  4349 ;;		Unchanged: 0/0
  4350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4351 ;;      Params:         8       0       0       0       0       0       0
  4352 ;;      Locals:         5       0       0       0       0       0       0
  4353 ;;      Temps:          0       0       0       0       0       0       0
  4354 ;;      Totals:        13       0       0       0       0       0       0
  4355 ;;Total ram usage:       13 bytes
  4356 ;; Hardware stack levels used:    1
  4357 ;; Hardware stack levels required when called:    4
  4358 ;; This function calls:
  4359 ;;		Nothing
  4360 ;; This function is called by:
  4361 ;;		_GetMcuRunTime
  4362 ;; This function uses a non-reentrant model
  4363 ;;
  4364                           
  4365                           	psect	text13
  4366  0034BE                     __ptext13:
  4367                           	opt stack 0
  4368  0034BE                     ___lldiv:
  4369                           	opt stack 23
  4370                           
  4371                           ;incstack = 0
  4372  0034BE  0E00               	movlw	0
  4373  0034C0  6E20               	movwf	___lldiv@quotient,c
  4374  0034C2  0E00               	movlw	0
  4375  0034C4  6E21               	movwf	___lldiv@quotient+1,c
  4376  0034C6  0E00               	movlw	0
  4377  0034C8  6E22               	movwf	___lldiv@quotient+2,c
  4378  0034CA  0E00               	movlw	0
  4379  0034CC  6E23               	movwf	___lldiv@quotient+3,c
  4380  0034CE  501C               	movf	___lldiv@divisor,w,c
  4381  0034D0  101D               	iorwf	___lldiv@divisor+1,w,c
  4382  0034D2  101E               	iorwf	___lldiv@divisor+2,w,c
  4383  0034D4  101F               	iorwf	___lldiv@divisor+3,w,c
  4384  0034D6  B4D8               	btfsc	status,2,c
  4385  0034D8  D02A               	goto	l1967
  4386  0034DA  0E01               	movlw	1
  4387  0034DC  6E24               	movwf	___lldiv@counter,c
  4388  0034DE  D006               	goto	l1962
  4389  0034E0  90D8               	bcf	status,0,c
  4390  0034E2  361C               	rlcf	___lldiv@divisor,f,c
  4391  0034E4  361D               	rlcf	___lldiv@divisor+1,f,c
  4392  0034E6  361E               	rlcf	___lldiv@divisor+2,f,c
  4393  0034E8  361F               	rlcf	___lldiv@divisor+3,f,c
  4394  0034EA  2A24               	incf	___lldiv@counter,f,c
  4395  0034EC                     l1962:
  4396  0034EC  AE1F               	btfss	___lldiv@divisor+3,7,c
  4397  0034EE  D7F8               	goto	l1963
  4398  0034F0                     u8560:
  4399  0034F0  90D8               	bcf	status,0,c
  4400  0034F2  3620               	rlcf	___lldiv@quotient,f,c
  4401  0034F4  3621               	rlcf	___lldiv@quotient+1,f,c
  4402  0034F6  3622               	rlcf	___lldiv@quotient+2,f,c
  4403  0034F8  3623               	rlcf	___lldiv@quotient+3,f,c
  4404  0034FA  501C               	movf	___lldiv@divisor,w,c
  4405  0034FC  5C18               	subwf	___lldiv@dividend,w,c
  4406  0034FE  501D               	movf	___lldiv@divisor+1,w,c
  4407  003500  5819               	subwfb	___lldiv@dividend+1,w,c
  4408  003502  501E               	movf	___lldiv@divisor+2,w,c
  4409  003504  581A               	subwfb	___lldiv@dividend+2,w,c
  4410  003506  501F               	movf	___lldiv@divisor+3,w,c
  4411  003508  581B               	subwfb	___lldiv@dividend+3,w,c
  4412  00350A  A0D8               	btfss	status,0,c
  4413  00350C  D009               	goto	l1966
  4414  00350E  501C               	movf	___lldiv@divisor,w,c
  4415  003510  5E18               	subwf	___lldiv@dividend,f,c
  4416  003512  501D               	movf	___lldiv@divisor+1,w,c
  4417  003514  5A19               	subwfb	___lldiv@dividend+1,f,c
  4418  003516  501E               	movf	___lldiv@divisor+2,w,c
  4419  003518  5A1A               	subwfb	___lldiv@dividend+2,f,c
  4420  00351A  501F               	movf	___lldiv@divisor+3,w,c
  4421  00351C  5A1B               	subwfb	___lldiv@dividend+3,f,c
  4422  00351E  8020               	bsf	___lldiv@quotient,0,c
  4423  003520                     l1966:
  4424  003520  90D8               	bcf	status,0,c
  4425  003522  321F               	rrcf	___lldiv@divisor+3,f,c
  4426  003524  321E               	rrcf	___lldiv@divisor+2,f,c
  4427  003526  321D               	rrcf	___lldiv@divisor+1,f,c
  4428  003528  321C               	rrcf	___lldiv@divisor,f,c
  4429  00352A  2E24               	decfsz	___lldiv@counter,f,c
  4430  00352C  D7E1               	goto	u8560
  4431  00352E                     l1967:
  4432  00352E  C020  F018         	movff	___lldiv@quotient,?___lldiv
  4433  003532  C021  F019         	movff	___lldiv@quotient+1,?___lldiv+1
  4434  003536  C022  F01A         	movff	___lldiv@quotient+2,?___lldiv+2
  4435  00353A  C023  F01B         	movff	___lldiv@quotient+3,?___lldiv+3
  4436  00353E  0012               	return		;funcret
  4437  003540                     __end_of___lldiv:
  4438                           	opt stack 0
  4439                           tosu	equ	0xFFF
  4440                           tosh	equ	0xFFE
  4441                           tosl	equ	0xFFD
  4442                           pclath	equ	0xFFA
  4443                           tblptru	equ	0xFF8
  4444                           tblptrh	equ	0xFF7
  4445                           tblptrl	equ	0xFF6
  4446                           tablat	equ	0xFF5
  4447                           prodh	equ	0xFF4
  4448                           prodl	equ	0xFF3
  4449                           postinc0	equ	0xFEE
  4450                           plusw0	equ	0xFEB
  4451                           wreg	equ	0xFE8
  4452                           postdec1	equ	0xFE5
  4453                           fsr1l	equ	0xFE1
  4454                           indf2	equ	0xFDF
  4455                           postinc2	equ	0xFDE
  4456                           plusw2	equ	0xFDB
  4457                           fsr2h	equ	0xFDA
  4458                           fsr2l	equ	0xFD9
  4459                           status	equ	0xFD8
  4460                           
  4461 ;; *************** function _GetMcuFwVersion *****************
  4462 ;; Defined at:
  4463 ;;		line 14 in file "SystemStatus.c"
  4464 ;; Parameters:    Size  Location     Type
  4465 ;;		None
  4466 ;; Auto vars:     Size  Location     Type
  4467 ;;  TxMsg          18    4[BANK0 ] unsigned char [18]
  4468 ;;  compileData     4    0[BANK0 ] unsigned long 
  4469 ;; Return value:  Size  Location     Type
  4470 ;;                  1    wreg      void 
  4471 ;; Registers used:
  4472 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4473 ;; Tracked objects:
  4474 ;;		On entry : 0/0
  4475 ;;		On exit  : 0/0
  4476 ;;		Unchanged: 0/0
  4477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4478 ;;      Params:         0       0       0       0       0       0       0
  4479 ;;      Locals:         0      26       0       0       0       0       0
  4480 ;;      Temps:          7       0       0       0       0       0       0
  4481 ;;      Totals:         7      26       0       0       0       0       0
  4482 ;;Total ram usage:       33 bytes
  4483 ;; Hardware stack levels used:    1
  4484 ;; Hardware stack levels required when called:    6
  4485 ;; This function calls:
  4486 ;;		_WriteUartMessage
  4487 ;;		_ZeroArray
  4488 ;;		___wmul
  4489 ;;		_crc8
  4490 ;; This function is called by:
  4491 ;;		_GroupStatusAndVersion
  4492 ;; This function uses a non-reentrant model
  4493 ;;
  4494                           
  4495                           	psect	text14
  4496  000AB8                     __ptext14:
  4497                           	opt stack 0
  4498  000AB8                     _GetMcuFwVersion:
  4499                           	opt stack 22
  4500                           
  4501                           ;SystemStatus.c: 16: uint32_t compileData = 0x0;
  4502                           
  4503                           ;incstack = 0
  4504  000AB8  0E00               	movlw	0
  4505  000ABA  0100               	movlb	0	; () banked
  4506  000ABC  6F60               	movwf	GetMcuFwVersion@compileData& (0+255),b
  4507  000ABE  0E00               	movlw	0
  4508  000AC0  6F61               	movwf	(GetMcuFwVersion@compileData+1)& (0+255),b
  4509  000AC2  0E00               	movlw	0
  4510  000AC4  6F62               	movwf	(GetMcuFwVersion@compileData+2)& (0+255),b
  4511  000AC6  0E00               	movlw	0
  4512  000AC8  6F63               	movwf	(GetMcuFwVersion@compileData+3)& (0+255),b
  4513                           
  4514                           ; BSR set to: 0
  4515                           ;SystemStatus.c: 19: char TxMsg[(13) + (0x4) + 1];
  4516                           ;SystemStatus.c: 20: ZeroArray(TxMsg, (13) + (0x4) + 1);
  4517  000ACA  0E64               	movlw	low GetMcuFwVersion@TxMsg
  4518  000ACC  6E20               	movwf	ZeroArray@array,c
  4519  000ACE  0E00               	movlw	high GetMcuFwVersion@TxMsg
  4520  000AD0  6E21               	movwf	ZeroArray@array+1,c
  4521  000AD2  0E00               	movlw	0
  4522  000AD4  6E23               	movwf	ZeroArray@size+1,c
  4523  000AD6  0E12               	movlw	18
  4524  000AD8  6E22               	movwf	ZeroArray@size,c
  4525  000ADA  ECCD  F021         	call	_ZeroArray	;wreg free
  4526                           
  4527                           ;SystemStatus.c: 23: TxMsg[(0)] = (0x24);
  4528  000ADE  0E24               	movlw	36
  4529  000AE0  0100               	movlb	0	; () banked
  4530  000AE2  6F64               	movwf	GetMcuFwVersion@TxMsg& (0+255),b
  4531                           
  4532                           ; BSR set to: 0
  4533                           ;SystemStatus.c: 24: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  4534  000AE4  0E02               	movlw	2
  4535  000AE6  6F65               	movwf	(GetMcuFwVersion@TxMsg+1)& (0+255),b
  4536                           
  4537                           ; BSR set to: 0
  4538                           ;SystemStatus.c: 25: TxMsg[(2)] = STATUS_GET_MCU_FW_VERSION;
  4539  000AE8  0E22               	movlw	34
  4540  000AEA  6F66               	movwf	(GetMcuFwVersion@TxMsg+2)& (0+255),b
  4541                           
  4542                           ; BSR set to: 0
  4543                           ;SystemStatus.c: 26: TxMsg[(3)] = (13);
  4544  000AEC  0E0D               	movlw	13
  4545  000AEE  6F67               	movwf	(GetMcuFwVersion@TxMsg+3)& (0+255),b
  4546                           
  4547                           ; BSR set to: 0
  4548                           ;SystemStatus.c: 29: TxMsg[(0x4) + 0] = (( ("Mar 22 2018"[ 7] - '0') * 1000 + ("Mar 22 2
      +                          018"[ 8] - '0') * 100 + ("Mar 22 2018"[ 9] - '0') * 10 + ("Mar 22 2018"[10] - '0') ) & 0
      +                          xFF00) >> 8;
  4549  000AF0  0ED0               	movlw	208
  4550  000AF2  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  4551  000AF4  0EFF               	movlw	255
  4552  000AF6  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  4553  000AF8  0E97               	movlw	low (STR_1+7)
  4554  000AFA  6EF6               	movwf	tblptrl,c
  4555  000AFC  0E06               	movlw	high (STR_1+7)
  4556  000AFE  6EF7               	movwf	tblptrh,c
  4557  000B00                     	if	0	;tblptru may be non-zero
  4558  000B00                     	endif
  4559  000B00                     	if	0	;tblptru may be non-zero
  4560  000B00                     	endif
  4561  000B00  0008               	tblrd		*
  4562  000B02  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  4563  000B06  0ED0               	movlw	208
  4564  000B08  2426               	addwf	??_GetMcuFwVersion+2,w,c
  4565  000B0A  6E18               	movwf	___wmul@multiplier,c
  4566  000B0C  6A19               	clrf	___wmul@multiplier+1,c
  4567  000B0E  0EFF               	movlw	255
  4568  000B10  2219               	addwfc	___wmul@multiplier+1,f,c
  4569  000B12  0E03               	movlw	3
  4570  000B14  6E1B               	movwf	___wmul@multiplicand+1,c
  4571  000B16  0EE8               	movlw	232
  4572  000B18  6E1A               	movwf	___wmul@multiplicand,c
  4573  000B1A  EC34  F021         	call	___wmul	;wreg free
  4574  000B1E  0E9A               	movlw	low (STR_1+10)
  4575  000B20  6EF6               	movwf	tblptrl,c
  4576  000B22  0E06               	movlw	high (STR_1+10)
  4577  000B24  6EF7               	movwf	tblptrh,c
  4578  000B26                     	if	0	;tblptru may be non-zero
  4579  000B26                     	endif
  4580  000B26                     	if	0	;tblptru may be non-zero
  4581  000B26                     	endif
  4582  000B26  0008               	tblrd		*
  4583  000B28  50F5               	movf	tablat,w,c
  4584  000B2A  6E27               	movwf	(??_GetMcuFwVersion+3)& (0+255),c
  4585  000B2C  6A28               	clrf	(??_GetMcuFwVersion+4)& (0+255),c
  4586  000B2E  5018               	movf	?___wmul,w,c
  4587  000B30  2627               	addwf	??_GetMcuFwVersion+3,f,c
  4588  000B32  5019               	movf	?___wmul+1,w,c
  4589  000B34  2228               	addwfc	??_GetMcuFwVersion+4,f,c
  4590  000B36  0E98               	movlw	low (STR_1+8)
  4591  000B38  6EF6               	movwf	tblptrl,c
  4592  000B3A  0E06               	movlw	high (STR_1+8)
  4593  000B3C  6EF7               	movwf	tblptrh,c
  4594  000B3E                     	if	0	;tblptru may be non-zero
  4595  000B3E                     	endif
  4596  000B3E                     	if	0	;tblptru may be non-zero
  4597  000B3E                     	endif
  4598  000B3E  0008               	tblrd		*
  4599  000B40  CFF5 F029          	movff	tablat,??_GetMcuFwVersion+5
  4600  000B44  0ED0               	movlw	208
  4601  000B46  2429               	addwf	??_GetMcuFwVersion+5,w,c
  4602  000B48  6E18               	movwf	___wmul@multiplier,c
  4603  000B4A  6A19               	clrf	___wmul@multiplier+1,c
  4604  000B4C  0EFF               	movlw	255
  4605  000B4E  2219               	addwfc	___wmul@multiplier+1,f,c
  4606  000B50  0E00               	movlw	0
  4607  000B52  6E1B               	movwf	___wmul@multiplicand+1,c
  4608  000B54  0E64               	movlw	100
  4609  000B56  6E1A               	movwf	___wmul@multiplicand,c
  4610  000B58  EC34  F021         	call	___wmul	;wreg free
  4611  000B5C  5018               	movf	?___wmul,w,c
  4612  000B5E  2627               	addwf	??_GetMcuFwVersion+3,f,c
  4613  000B60  5019               	movf	?___wmul+1,w,c
  4614  000B62  2228               	addwfc	??_GetMcuFwVersion+4,f,c
  4615  000B64  0E99               	movlw	low (STR_1+9)
  4616  000B66  6EF6               	movwf	tblptrl,c
  4617  000B68  0E06               	movlw	high (STR_1+9)
  4618  000B6A  6EF7               	movwf	tblptrh,c
  4619  000B6C                     	if	0	;tblptru may be non-zero
  4620  000B6C                     	endif
  4621  000B6C                     	if	0	;tblptru may be non-zero
  4622  000B6C                     	endif
  4623  000B6C  0008               	tblrd		*
  4624  000B6E  CFF5 F02A          	movff	tablat,??_GetMcuFwVersion+6
  4625  000B72  0ED0               	movlw	208
  4626  000B74  242A               	addwf	??_GetMcuFwVersion+6,w,c
  4627  000B76  6E18               	movwf	___wmul@multiplier,c
  4628  000B78  6A19               	clrf	___wmul@multiplier+1,c
  4629  000B7A  0EFF               	movlw	255
  4630  000B7C  2219               	addwfc	___wmul@multiplier+1,f,c
  4631  000B7E  0E00               	movlw	0
  4632  000B80  6E1B               	movwf	___wmul@multiplicand+1,c
  4633  000B82  0E0A               	movlw	10
  4634  000B84  6E1A               	movwf	___wmul@multiplicand,c
  4635  000B86  EC34  F021         	call	___wmul	;wreg free
  4636  000B8A  5018               	movf	?___wmul,w,c
  4637  000B8C  2627               	addwf	??_GetMcuFwVersion+3,f,c
  4638  000B8E  5019               	movf	?___wmul+1,w,c
  4639  000B90  2228               	addwfc	??_GetMcuFwVersion+4,f,c
  4640  000B92  5024               	movf	??_GetMcuFwVersion,w,c
  4641  000B94  2627               	addwf	??_GetMcuFwVersion+3,f,c
  4642  000B96  5025               	movf	??_GetMcuFwVersion+1,w,c
  4643  000B98  2228               	addwfc	??_GetMcuFwVersion+4,f,c
  4644  000B9A  C028  F027         	movff	??_GetMcuFwVersion+4,??_GetMcuFwVersion+3
  4645  000B9E  6A28               	clrf	??_GetMcuFwVersion+4,c
  4646  000BA0  5027               	movf	??_GetMcuFwVersion+3,w,c
  4647  000BA2  0100               	movlb	0	; () banked
  4648  000BA4  6F68               	movwf	(GetMcuFwVersion@TxMsg+4)& (0+255),b
  4649                           
  4650                           ; BSR set to: 0
  4651                           ;SystemStatus.c: 30: TxMsg[(0x4) + 1] = ( ("Mar 22 2018"[ 7] - '0') * 1000 + ("Mar 22 20
      +                          18"[ 8] - '0') * 100 + ("Mar 22 2018"[ 9] - '0') * 10 + ("Mar 22 2018"[10] - '0') ) & 0x
      +                          FF;
  4652  000BA6  0E9A               	movlw	low (STR_1+10)
  4653  000BA8  6EF6               	movwf	tblptrl,c
  4654  000BAA  0E06               	movlw	high (STR_1+10)
  4655  000BAC  6EF7               	movwf	tblptrh,c
  4656  000BAE                     	if	0	;tblptru may be non-zero
  4657  000BAE                     	endif
  4658  000BAE                     	if	0	;tblptru may be non-zero
  4659  000BAE                     	endif
  4660  000BAE  0008               	tblrd		*
  4661  000BB0  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  4662  000BB4  0E99               	movlw	low (STR_1+9)
  4663  000BB6  6EF6               	movwf	tblptrl,c
  4664  000BB8  0E06               	movlw	high (STR_1+9)
  4665  000BBA  6EF7               	movwf	tblptrh,c
  4666  000BBC                     	if	0	;tblptru may be non-zero
  4667  000BBC                     	endif
  4668  000BBC                     	if	0	;tblptru may be non-zero
  4669  000BBC                     	endif
  4670  000BBC  0008               	tblrd		*
  4671  000BBE  50F5               	movf	tablat,w,c
  4672  000BC0  0FD0               	addlw	208
  4673  000BC2  0D0A               	mullw	10
  4674  000BC4  CFF3 F025          	movff	prodl,??_GetMcuFwVersion+1
  4675  000BC8  0E98               	movlw	low (STR_1+8)
  4676  000BCA  6EF6               	movwf	tblptrl,c
  4677  000BCC  0E06               	movlw	high (STR_1+8)
  4678  000BCE  6EF7               	movwf	tblptrh,c
  4679  000BD0                     	if	0	;tblptru may be non-zero
  4680  000BD0                     	endif
  4681  000BD0                     	if	0	;tblptru may be non-zero
  4682  000BD0                     	endif
  4683  000BD0  0008               	tblrd		*
  4684  000BD2  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  4685  000BD6  0ED0               	movlw	208
  4686  000BD8  2426               	addwf	??_GetMcuFwVersion+2,w,c
  4687  000BDA  6E18               	movwf	___wmul@multiplier,c
  4688  000BDC  6A19               	clrf	___wmul@multiplier+1,c
  4689  000BDE  0EFF               	movlw	255
  4690  000BE0  2219               	addwfc	___wmul@multiplier+1,f,c
  4691  000BE2  0E00               	movlw	0
  4692  000BE4  6E1B               	movwf	___wmul@multiplicand+1,c
  4693  000BE6  0E64               	movlw	100
  4694  000BE8  6E1A               	movwf	___wmul@multiplicand,c
  4695  000BEA  EC34  F021         	call	___wmul	;wreg free
  4696  000BEE  0E97               	movlw	low (STR_1+7)
  4697  000BF0  6EF6               	movwf	tblptrl,c
  4698  000BF2  0E06               	movlw	high (STR_1+7)
  4699  000BF4  6EF7               	movwf	tblptrh,c
  4700  000BF6                     	if	0	;tblptru may be non-zero
  4701  000BF6                     	endif
  4702  000BF6                     	if	0	;tblptru may be non-zero
  4703  000BF6                     	endif
  4704  000BF6  0008               	tblrd		*
  4705  000BF8  50F5               	movf	tablat,w,c
  4706  000BFA  0FD0               	addlw	208
  4707  000BFC  0DE8               	mullw	232
  4708  000BFE  50F3               	movf	prodl,w,c
  4709  000C00  2418               	addwf	?___wmul,w,c
  4710  000C02  2425               	addwf	??_GetMcuFwVersion+1,w,c
  4711  000C04  2424               	addwf	??_GetMcuFwVersion,w,c
  4712  000C06  0FD0               	addlw	208
  4713  000C08  0100               	movlb	0	; () banked
  4714  000C0A  6F69               	movwf	(GetMcuFwVersion@TxMsg+5)& (0+255),b
  4715                           
  4716                           ; BSR set to: 0
  4717                           ;SystemStatus.c: 33: TxMsg[(0x4) + 2] = "Mar 22 2018"[0];
  4718  000C0C  0E90               	movlw	low STR_1
  4719  000C0E  6EF6               	movwf	tblptrl,c
  4720  000C10                     	if	1	;There is more than 1 active tblptr byte
  4721  000C10  0E06               	movlw	high STR_1
  4722  000C12  6EF7               	movwf	tblptrh,c
  4723  000C14                     	endif
  4724  000C14                     	if	0	;There are less than 3 active tblptr bytes
  4725  000C14                     	endif
  4726  000C14  0008               	tblrd		*
  4727  000C16  CFF5 F06A          	movff	tablat,GetMcuFwVersion@TxMsg+6
  4728                           
  4729                           ; BSR set to: 0
  4730                           ;SystemStatus.c: 34: TxMsg[(0x4) + 3] = "Mar 22 2018"[1];
  4731  000C1A  0E91               	movlw	low (STR_1+1)
  4732  000C1C  6EF6               	movwf	tblptrl,c
  4733  000C1E  0E06               	movlw	high (STR_1+1)
  4734  000C20  6EF7               	movwf	tblptrh,c
  4735  000C22                     	if	0	;tblptru may be non-zero
  4736  000C22                     	endif
  4737  000C22                     	if	0	;tblptru may be non-zero
  4738  000C22                     	endif
  4739  000C22  0008               	tblrd		*
  4740  000C24  CFF5 F06B          	movff	tablat,GetMcuFwVersion@TxMsg+7
  4741                           
  4742                           ; BSR set to: 0
  4743                           ;SystemStatus.c: 35: TxMsg[(0x4) + 4] = "Mar 22 2018"[2];
  4744  000C28  0E92               	movlw	low (STR_1+2)
  4745  000C2A  6EF6               	movwf	tblptrl,c
  4746  000C2C  0E06               	movlw	high (STR_1+2)
  4747  000C2E  6EF7               	movwf	tblptrh,c
  4748  000C30                     	if	0	;tblptru may be non-zero
  4749  000C30                     	endif
  4750  000C30                     	if	0	;tblptru may be non-zero
  4751  000C30                     	endif
  4752  000C30  0008               	tblrd		*
  4753  000C32  CFF5 F06C          	movff	tablat,GetMcuFwVersion@TxMsg+8
  4754                           
  4755                           ; BSR set to: 0
  4756                           ;SystemStatus.c: 38: TxMsg[(0x4) + 5] = (( (("Mar 22 2018"[4] >= '0') ? ("Mar 22 2018"[4
      +                          ] - '0') * 10 : 0) + ("Mar 22 2018"[5] - '0') ) & 0xFF00) >> 8;
  4757  000C36  0E94               	movlw	low (STR_1+4)
  4758  000C38  6EF6               	movwf	tblptrl,c
  4759  000C3A  0E06               	movlw	high (STR_1+4)
  4760  000C3C  6EF7               	movwf	tblptrh,c
  4761  000C3E                     	if	0	;tblptru may be non-zero
  4762  000C3E                     	endif
  4763  000C3E                     	if	0	;tblptru may be non-zero
  4764  000C3E                     	endif
  4765  000C3E  0E30               	movlw	48
  4766  000C40  0008               	tblrd		*
  4767  000C42  60F5               	cpfslt	tablat,c
  4768  000C44  D005               	goto	l1510
  4769                           
  4770                           ; BSR set to: 0
  4771  000C46  0E00               	movlw	0
  4772  000C48  6F77               	movwf	(_GetMcuFwVersion$2689+1)& (0+255),b
  4773  000C4A  0E00               	movlw	0
  4774  000C4C  6F76               	movwf	_GetMcuFwVersion$2689& (0+255),b
  4775  000C4E  D017               	goto	l1512
  4776  000C50                     l1510:
  4777                           
  4778                           ; BSR set to: 0
  4779                           
  4780                           ; BSR set to: 0
  4781  000C50  0E94               	movlw	low (STR_1+4)
  4782  000C52  6EF6               	movwf	tblptrl,c
  4783  000C54  0E06               	movlw	high (STR_1+4)
  4784  000C56  6EF7               	movwf	tblptrh,c
  4785  000C58                     	if	0	;tblptru may be non-zero
  4786  000C58                     	endif
  4787  000C58                     	if	0	;tblptru may be non-zero
  4788  000C58                     	endif
  4789  000C58  0008               	tblrd		*
  4790  000C5A  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  4791  000C5E  0ED0               	movlw	208
  4792  000C60  2424               	addwf	??_GetMcuFwVersion,w,c
  4793  000C62  6E18               	movwf	___wmul@multiplier,c
  4794  000C64  6A19               	clrf	___wmul@multiplier+1,c
  4795  000C66  0EFF               	movlw	255
  4796  000C68  2219               	addwfc	___wmul@multiplier+1,f,c
  4797  000C6A  0E00               	movlw	0
  4798  000C6C  6E1B               	movwf	___wmul@multiplicand+1,c
  4799  000C6E  0E0A               	movlw	10
  4800  000C70  6E1A               	movwf	___wmul@multiplicand,c
  4801  000C72  EC34  F021         	call	___wmul	;wreg free
  4802  000C76  C018  F076         	movff	?___wmul,_GetMcuFwVersion$2689
  4803  000C7A  C019  F077         	movff	?___wmul+1,_GetMcuFwVersion$2689+1
  4804  000C7E                     l1512:
  4805  000C7E  0ED0               	movlw	208
  4806  000C80  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  4807  000C82  0EFF               	movlw	255
  4808  000C84  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  4809  000C86  0E95               	movlw	low (STR_1+5)
  4810  000C88  6EF6               	movwf	tblptrl,c
  4811  000C8A  0E06               	movlw	high (STR_1+5)
  4812  000C8C  6EF7               	movwf	tblptrh,c
  4813  000C8E                     	if	0	;tblptru may be non-zero
  4814  000C8E                     	endif
  4815  000C8E                     	if	0	;tblptru may be non-zero
  4816  000C8E                     	endif
  4817  000C8E  0008               	tblrd		*
  4818  000C90  50F5               	movf	tablat,w,c
  4819  000C92  0100               	movlb	0	; () banked
  4820  000C94  2576               	addwf	_GetMcuFwVersion$2689& (0+255),w,b
  4821  000C96  6E26               	movwf	(??_GetMcuFwVersion+2)& (0+255),c
  4822  000C98  0E00               	movlw	0
  4823  000C9A  2177               	addwfc	(_GetMcuFwVersion$2689+1)& (0+255),w,b
  4824  000C9C  6E27               	movwf	(??_GetMcuFwVersion+3)& (0+255),c
  4825  000C9E  5024               	movf	??_GetMcuFwVersion,w,c
  4826  000CA0  2626               	addwf	??_GetMcuFwVersion+2,f,c
  4827  000CA2  5025               	movf	??_GetMcuFwVersion+1,w,c
  4828  000CA4  2227               	addwfc	??_GetMcuFwVersion+3,f,c
  4829  000CA6  C027  F026         	movff	??_GetMcuFwVersion+3,??_GetMcuFwVersion+2
  4830  000CAA  6A27               	clrf	??_GetMcuFwVersion+3,c
  4831  000CAC  5026               	movf	??_GetMcuFwVersion+2,w,c
  4832  000CAE  6F6D               	movwf	(GetMcuFwVersion@TxMsg+9)& (0+255),b
  4833                           
  4834                           ; BSR set to: 0
  4835                           ;SystemStatus.c: 39: TxMsg[(0x4) + 6] = ( (("Mar 22 2018"[4] >= '0') ? ("Mar 22 2018"[4]
      +                           - '0') * 10 : 0) + ("Mar 22 2018"[5] - '0') ) & 0xFF;
  4836  000CB0  0E94               	movlw	low (STR_1+4)
  4837  000CB2  6EF6               	movwf	tblptrl,c
  4838  000CB4  0E06               	movlw	high (STR_1+4)
  4839  000CB6  6EF7               	movwf	tblptrh,c
  4840  000CB8                     	if	0	;tblptru may be non-zero
  4841  000CB8                     	endif
  4842  000CB8                     	if	0	;tblptru may be non-zero
  4843  000CB8                     	endif
  4844  000CB8  0E30               	movlw	48
  4845  000CBA  0008               	tblrd		*
  4846  000CBC  60F5               	cpfslt	tablat,c
  4847  000CBE  D005               	goto	l1514
  4848                           
  4849                           ; BSR set to: 0
  4850  000CC0  0E00               	movlw	0
  4851  000CC2  6F79               	movwf	(_GetMcuFwVersion$2693+1)& (0+255),b
  4852  000CC4  0E00               	movlw	0
  4853  000CC6  6F78               	movwf	_GetMcuFwVersion$2693& (0+255),b
  4854  000CC8  D017               	goto	l1516
  4855  000CCA                     l1514:
  4856                           
  4857                           ; BSR set to: 0
  4858                           
  4859                           ; BSR set to: 0
  4860  000CCA  0E94               	movlw	low (STR_1+4)
  4861  000CCC  6EF6               	movwf	tblptrl,c
  4862  000CCE  0E06               	movlw	high (STR_1+4)
  4863  000CD0  6EF7               	movwf	tblptrh,c
  4864  000CD2                     	if	0	;tblptru may be non-zero
  4865  000CD2                     	endif
  4866  000CD2                     	if	0	;tblptru may be non-zero
  4867  000CD2                     	endif
  4868  000CD2  0008               	tblrd		*
  4869  000CD4  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  4870  000CD8  0ED0               	movlw	208
  4871  000CDA  2424               	addwf	??_GetMcuFwVersion,w,c
  4872  000CDC  6E18               	movwf	___wmul@multiplier,c
  4873  000CDE  6A19               	clrf	___wmul@multiplier+1,c
  4874  000CE0  0EFF               	movlw	255
  4875  000CE2  2219               	addwfc	___wmul@multiplier+1,f,c
  4876  000CE4  0E00               	movlw	0
  4877  000CE6  6E1B               	movwf	___wmul@multiplicand+1,c
  4878  000CE8  0E0A               	movlw	10
  4879  000CEA  6E1A               	movwf	___wmul@multiplicand,c
  4880  000CEC  EC34  F021         	call	___wmul	;wreg free
  4881  000CF0  C018  F078         	movff	?___wmul,_GetMcuFwVersion$2693
  4882  000CF4  C019  F079         	movff	?___wmul+1,_GetMcuFwVersion$2693+1
  4883  000CF8                     l1516:
  4884  000CF8  0E95               	movlw	low (STR_1+5)
  4885  000CFA  6EF6               	movwf	tblptrl,c
  4886  000CFC  0E06               	movlw	high (STR_1+5)
  4887  000CFE  6EF7               	movwf	tblptrh,c
  4888  000D00                     	if	0	;tblptru may be non-zero
  4889  000D00                     	endif
  4890  000D00                     	if	0	;tblptru may be non-zero
  4891  000D00                     	endif
  4892  000D00  0008               	tblrd		*
  4893  000D02  50F5               	movf	tablat,w,c
  4894  000D04  0100               	movlb	0	; () banked
  4895  000D06  2578               	addwf	_GetMcuFwVersion$2693& (0+255),w,b
  4896  000D08  0FD0               	addlw	208
  4897  000D0A  6F6E               	movwf	(GetMcuFwVersion@TxMsg+10)& (0+255),b
  4898                           
  4899                           ; BSR set to: 0
  4900                           ;SystemStatus.c: 42: TxMsg[(0x4) + 7] = ((("17:03:39"[0] - '0') * 10 + "17:03:39"[1] - '
      +                          0') & 0xFF00) >> 8;
  4901  000D0C  0ED0               	movlw	208
  4902  000D0E  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  4903  000D10  0EFF               	movlw	255
  4904  000D12  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  4905  000D14  0E9C               	movlw	low STR_18
  4906  000D16  6EF6               	movwf	tblptrl,c
  4907  000D18                     	if	1	;There is more than 1 active tblptr byte
  4908  000D18  0E06               	movlw	high STR_18
  4909  000D1A  6EF7               	movwf	tblptrh,c
  4910  000D1C                     	endif
  4911  000D1C                     	if	0	;There are less than 3 active tblptr bytes
  4912  000D1C                     	endif
  4913  000D1C  0008               	tblrd		*
  4914  000D1E  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  4915  000D22  0ED0               	movlw	208
  4916  000D24  2426               	addwf	??_GetMcuFwVersion+2,w,c
  4917  000D26  6E18               	movwf	___wmul@multiplier,c
  4918  000D28  6A19               	clrf	___wmul@multiplier+1,c
  4919  000D2A  0EFF               	movlw	255
  4920  000D2C  2219               	addwfc	___wmul@multiplier+1,f,c
  4921  000D2E  0E00               	movlw	0
  4922  000D30  6E1B               	movwf	___wmul@multiplicand+1,c
  4923  000D32  0E0A               	movlw	10
  4924  000D34  6E1A               	movwf	___wmul@multiplicand,c
  4925  000D36  EC34  F021         	call	___wmul	;wreg free
  4926  000D3A  0E9D               	movlw	low (STR_18+1)
  4927  000D3C  6EF6               	movwf	tblptrl,c
  4928  000D3E  0E06               	movlw	high (STR_18+1)
  4929  000D40  6EF7               	movwf	tblptrh,c
  4930  000D42                     	if	0	;tblptru may be non-zero
  4931  000D42                     	endif
  4932  000D42                     	if	0	;tblptru may be non-zero
  4933  000D42                     	endif
  4934  000D42  0008               	tblrd		*
  4935  000D44  50F5               	movf	tablat,w,c
  4936  000D46  2618               	addwf	?___wmul,f,c
  4937  000D48  0E00               	movlw	0
  4938  000D4A  2219               	addwfc	?___wmul+1,f,c
  4939  000D4C  5024               	movf	??_GetMcuFwVersion,w,c
  4940  000D4E  2618               	addwf	?___wmul,f,c
  4941  000D50  5025               	movf	??_GetMcuFwVersion+1,w,c
  4942  000D52  2219               	addwfc	?___wmul+1,f,c
  4943  000D54  C019  F018         	movff	?___wmul+1,?___wmul
  4944  000D58  6A19               	clrf	?___wmul+1,c
  4945  000D5A  5018               	movf	?___wmul,w,c
  4946  000D5C  0100               	movlb	0	; () banked
  4947  000D5E  6F6F               	movwf	(GetMcuFwVersion@TxMsg+11)& (0+255),b
  4948                           
  4949                           ; BSR set to: 0
  4950                           ;SystemStatus.c: 43: TxMsg[(0x4) + 8] = (("17:03:39"[0] - '0') * 10 + "17:03:39"[1] - '0
      +                          ') & 0xFF;
  4951  000D60  0E9D               	movlw	low (STR_18+1)
  4952  000D62  6EF6               	movwf	tblptrl,c
  4953  000D64  0E06               	movlw	high (STR_18+1)
  4954  000D66  6EF7               	movwf	tblptrh,c
  4955  000D68                     	if	0	;tblptru may be non-zero
  4956  000D68                     	endif
  4957  000D68                     	if	0	;tblptru may be non-zero
  4958  000D68                     	endif
  4959  000D68  0008               	tblrd		*
  4960  000D6A  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  4961  000D6E  0E9C               	movlw	low STR_18
  4962  000D70  6EF6               	movwf	tblptrl,c
  4963  000D72                     	if	1	;There is more than 1 active tblptr byte
  4964  000D72  0E06               	movlw	high STR_18
  4965  000D74  6EF7               	movwf	tblptrh,c
  4966  000D76                     	endif
  4967  000D76                     	if	0	;There are less than 3 active tblptr bytes
  4968  000D76                     	endif
  4969  000D76  0008               	tblrd		*
  4970  000D78  50F5               	movf	tablat,w,c
  4971  000D7A  0FD0               	addlw	208
  4972  000D7C  0D0A               	mullw	10
  4973  000D7E  50F3               	movf	prodl,w,c
  4974  000D80  2424               	addwf	??_GetMcuFwVersion,w,c
  4975  000D82  0FD0               	addlw	208
  4976  000D84  6F70               	movwf	(GetMcuFwVersion@TxMsg+12)& (0+255),b
  4977                           
  4978                           ; BSR set to: 0
  4979                           ;SystemStatus.c: 46: TxMsg[(0x4) + 9] = ((("17:03:39"[3] - '0') * 10 + "17:03:39"[4] - '
      +                          0') & 0xFF00) >> 8;
  4980  000D86  0ED0               	movlw	208
  4981  000D88  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  4982  000D8A  0EFF               	movlw	255
  4983  000D8C  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  4984  000D8E  0E9F               	movlw	low (STR_18+3)
  4985  000D90  6EF6               	movwf	tblptrl,c
  4986  000D92  0E06               	movlw	high (STR_18+3)
  4987  000D94  6EF7               	movwf	tblptrh,c
  4988  000D96                     	if	0	;tblptru may be non-zero
  4989  000D96                     	endif
  4990  000D96                     	if	0	;tblptru may be non-zero
  4991  000D96                     	endif
  4992  000D96  0008               	tblrd		*
  4993  000D98  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  4994  000D9C  0ED0               	movlw	208
  4995  000D9E  2426               	addwf	??_GetMcuFwVersion+2,w,c
  4996  000DA0  6E18               	movwf	___wmul@multiplier,c
  4997  000DA2  6A19               	clrf	___wmul@multiplier+1,c
  4998  000DA4  0EFF               	movlw	255
  4999  000DA6  2219               	addwfc	___wmul@multiplier+1,f,c
  5000  000DA8  0E00               	movlw	0
  5001  000DAA  6E1B               	movwf	___wmul@multiplicand+1,c
  5002  000DAC  0E0A               	movlw	10
  5003  000DAE  6E1A               	movwf	___wmul@multiplicand,c
  5004  000DB0  EC34  F021         	call	___wmul	;wreg free
  5005  000DB4  0EA0               	movlw	low (STR_18+4)
  5006  000DB6  6EF6               	movwf	tblptrl,c
  5007  000DB8  0E06               	movlw	high (STR_18+4)
  5008  000DBA  6EF7               	movwf	tblptrh,c
  5009  000DBC                     	if	0	;tblptru may be non-zero
  5010  000DBC                     	endif
  5011  000DBC                     	if	0	;tblptru may be non-zero
  5012  000DBC                     	endif
  5013  000DBC  0008               	tblrd		*
  5014  000DBE  50F5               	movf	tablat,w,c
  5015  000DC0  2618               	addwf	?___wmul,f,c
  5016  000DC2  0E00               	movlw	0
  5017  000DC4  2219               	addwfc	?___wmul+1,f,c
  5018  000DC6  5024               	movf	??_GetMcuFwVersion,w,c
  5019  000DC8  2618               	addwf	?___wmul,f,c
  5020  000DCA  5025               	movf	??_GetMcuFwVersion+1,w,c
  5021  000DCC  2219               	addwfc	?___wmul+1,f,c
  5022  000DCE  C019  F018         	movff	?___wmul+1,?___wmul
  5023  000DD2  6A19               	clrf	?___wmul+1,c
  5024  000DD4  5018               	movf	?___wmul,w,c
  5025  000DD6  0100               	movlb	0	; () banked
  5026  000DD8  6F71               	movwf	(GetMcuFwVersion@TxMsg+13)& (0+255),b
  5027                           
  5028                           ; BSR set to: 0
  5029                           ;SystemStatus.c: 47: TxMsg[(0x4) + 10] = (("17:03:39"[3] - '0') * 10 + "17:03:39"[4] - '
      +                          0') & 0xFF;
  5030  000DDA  0EA0               	movlw	low (STR_18+4)
  5031  000DDC  6EF6               	movwf	tblptrl,c
  5032  000DDE  0E06               	movlw	high (STR_18+4)
  5033  000DE0  6EF7               	movwf	tblptrh,c
  5034  000DE2                     	if	0	;tblptru may be non-zero
  5035  000DE2                     	endif
  5036  000DE2                     	if	0	;tblptru may be non-zero
  5037  000DE2                     	endif
  5038  000DE2  0008               	tblrd		*
  5039  000DE4  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  5040  000DE8  0E9F               	movlw	low (STR_18+3)
  5041  000DEA  6EF6               	movwf	tblptrl,c
  5042  000DEC  0E06               	movlw	high (STR_18+3)
  5043  000DEE  6EF7               	movwf	tblptrh,c
  5044  000DF0                     	if	0	;tblptru may be non-zero
  5045  000DF0                     	endif
  5046  000DF0                     	if	0	;tblptru may be non-zero
  5047  000DF0                     	endif
  5048  000DF0  0008               	tblrd		*
  5049  000DF2  50F5               	movf	tablat,w,c
  5050  000DF4  0FD0               	addlw	208
  5051  000DF6  0D0A               	mullw	10
  5052  000DF8  50F3               	movf	prodl,w,c
  5053  000DFA  2424               	addwf	??_GetMcuFwVersion,w,c
  5054  000DFC  0FD0               	addlw	208
  5055  000DFE  6F72               	movwf	(GetMcuFwVersion@TxMsg+14)& (0+255),b
  5056                           
  5057                           ; BSR set to: 0
  5058                           ;SystemStatus.c: 49: TxMsg[(0x4) + 11] = ((("17:03:39"[6] - '0') * 10 + "17:03:39"[7] - 
      +                          '0') & 0xFF00) >> 8;
  5059  000E00  0ED0               	movlw	208
  5060  000E02  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  5061  000E04  0EFF               	movlw	255
  5062  000E06  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  5063  000E08  0EA2               	movlw	low (STR_18+6)
  5064  000E0A  6EF6               	movwf	tblptrl,c
  5065  000E0C  0E06               	movlw	high (STR_18+6)
  5066  000E0E  6EF7               	movwf	tblptrh,c
  5067  000E10                     	if	0	;tblptru may be non-zero
  5068  000E10                     	endif
  5069  000E10                     	if	0	;tblptru may be non-zero
  5070  000E10                     	endif
  5071  000E10  0008               	tblrd		*
  5072  000E12  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  5073  000E16  0ED0               	movlw	208
  5074  000E18  2426               	addwf	??_GetMcuFwVersion+2,w,c
  5075  000E1A  6E18               	movwf	___wmul@multiplier,c
  5076  000E1C  6A19               	clrf	___wmul@multiplier+1,c
  5077  000E1E  0EFF               	movlw	255
  5078  000E20  2219               	addwfc	___wmul@multiplier+1,f,c
  5079  000E22  0E00               	movlw	0
  5080  000E24  6E1B               	movwf	___wmul@multiplicand+1,c
  5081  000E26  0E0A               	movlw	10
  5082  000E28  6E1A               	movwf	___wmul@multiplicand,c
  5083  000E2A  EC34  F021         	call	___wmul	;wreg free
  5084  000E2E  0EA3               	movlw	low (STR_18+7)
  5085  000E30  6EF6               	movwf	tblptrl,c
  5086  000E32  0E06               	movlw	high (STR_18+7)
  5087  000E34  6EF7               	movwf	tblptrh,c
  5088  000E36                     	if	0	;tblptru may be non-zero
  5089  000E36                     	endif
  5090  000E36                     	if	0	;tblptru may be non-zero
  5091  000E36                     	endif
  5092  000E36  0008               	tblrd		*
  5093  000E38  50F5               	movf	tablat,w,c
  5094  000E3A  2618               	addwf	?___wmul,f,c
  5095  000E3C  0E00               	movlw	0
  5096  000E3E  2219               	addwfc	?___wmul+1,f,c
  5097  000E40  5024               	movf	??_GetMcuFwVersion,w,c
  5098  000E42  2618               	addwf	?___wmul,f,c
  5099  000E44  5025               	movf	??_GetMcuFwVersion+1,w,c
  5100  000E46  2219               	addwfc	?___wmul+1,f,c
  5101  000E48  C019  F018         	movff	?___wmul+1,?___wmul
  5102  000E4C  6A19               	clrf	?___wmul+1,c
  5103  000E4E  5018               	movf	?___wmul,w,c
  5104  000E50  0100               	movlb	0	; () banked
  5105  000E52  6F73               	movwf	(GetMcuFwVersion@TxMsg+15)& (0+255),b
  5106                           
  5107                           ; BSR set to: 0
  5108                           ;SystemStatus.c: 50: TxMsg[(0x4) + 12] = (("17:03:39"[6] - '0') * 10 + "17:03:39"[7] - '
      +                          0') & 0xFF;
  5109  000E54  0EA3               	movlw	low (STR_18+7)
  5110  000E56  6EF6               	movwf	tblptrl,c
  5111  000E58  0E06               	movlw	high (STR_18+7)
  5112  000E5A  6EF7               	movwf	tblptrh,c
  5113  000E5C                     	if	0	;tblptru may be non-zero
  5114  000E5C                     	endif
  5115  000E5C                     	if	0	;tblptru may be non-zero
  5116  000E5C                     	endif
  5117  000E5C  0008               	tblrd		*
  5118  000E5E  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  5119  000E62  0EA2               	movlw	low (STR_18+6)
  5120  000E64  6EF6               	movwf	tblptrl,c
  5121  000E66  0E06               	movlw	high (STR_18+6)
  5122  000E68  6EF7               	movwf	tblptrh,c
  5123  000E6A                     	if	0	;tblptru may be non-zero
  5124  000E6A                     	endif
  5125  000E6A                     	if	0	;tblptru may be non-zero
  5126  000E6A                     	endif
  5127  000E6A  0008               	tblrd		*
  5128  000E6C  50F5               	movf	tablat,w,c
  5129  000E6E  0FD0               	addlw	208
  5130  000E70  0D0A               	mullw	10
  5131  000E72  50F3               	movf	prodl,w,c
  5132  000E74  2424               	addwf	??_GetMcuFwVersion,w,c
  5133  000E76  0FD0               	addlw	208
  5134  000E78  6F74               	movwf	(GetMcuFwVersion@TxMsg+16)& (0+255),b
  5135                           
  5136                           ; BSR set to: 0
  5137                           ;SystemStatus.c: 52: TxMsg[(13) + (0x4)] = crc8(TxMsg, (13) + (0x4));
  5138  000E7A  0E64               	movlw	low GetMcuFwVersion@TxMsg
  5139  000E7C  6E18               	movwf	crc8@dataArray,c
  5140  000E7E  0E00               	movlw	high GetMcuFwVersion@TxMsg
  5141  000E80  6E19               	movwf	crc8@dataArray+1,c
  5142  000E82  0E00               	movlw	0
  5143  000E84  6E1B               	movwf	crc8@dataSize+1,c
  5144  000E86  0E11               	movlw	17
  5145  000E88  6E1A               	movwf	crc8@dataSize,c
  5146  000E8A  EC46  F01E         	call	_crc8	;wreg free
  5147  000E8E  0100               	movlb	0	; () banked
  5148  000E90  6F75               	movwf	(GetMcuFwVersion@TxMsg+17)& (0+255),b
  5149                           
  5150                           ;SystemStatus.c: 54: WriteUartMessage(TxMsg, (13) + (0x4) + 1);
  5151  000E92  0E64               	movlw	low GetMcuFwVersion@TxMsg
  5152  000E94  6E19               	movwf	WriteUartMessage@dataBuf,c
  5153  000E96  0E00               	movlw	high GetMcuFwVersion@TxMsg
  5154  000E98  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5155  000E9A  0E00               	movlw	0
  5156  000E9C  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5157  000E9E  0E12               	movlw	18
  5158  000EA0  6E1B               	movwf	WriteUartMessage@dataSize,c
  5159  000EA2  ECD9  F01F         	call	_WriteUartMessage	;wreg free
  5160  000EA6  0012               	return		;funcret
  5161  000EA8                     __end_of_GetMcuFwVersion:
  5162                           	opt stack 0
  5163                           tosu	equ	0xFFF
  5164                           tosh	equ	0xFFE
  5165                           tosl	equ	0xFFD
  5166                           pclath	equ	0xFFA
  5167                           tblptru	equ	0xFF8
  5168                           tblptrh	equ	0xFF7
  5169                           tblptrl	equ	0xFF6
  5170                           tablat	equ	0xFF5
  5171                           prodh	equ	0xFF4
  5172                           prodl	equ	0xFF3
  5173                           postinc0	equ	0xFEE
  5174                           plusw0	equ	0xFEB
  5175                           wreg	equ	0xFE8
  5176                           postdec1	equ	0xFE5
  5177                           fsr1l	equ	0xFE1
  5178                           indf2	equ	0xFDF
  5179                           postinc2	equ	0xFDE
  5180                           plusw2	equ	0xFDB
  5181                           fsr2h	equ	0xFDA
  5182                           fsr2l	equ	0xFD9
  5183                           status	equ	0xFD8
  5184                           
  5185 ;; *************** function _FlashReadUart *****************
  5186 ;; Defined at:
  5187 ;;		line 62 in file "FlashApp.c"
  5188 ;; Parameters:    Size  Location     Type
  5189 ;;  data            2   39[BANK0 ] PTR unsigned char 
  5190 ;; Auto vars:     Size  Location     Type
  5191 ;;  idx             2   87[BANK2 ] int 
  5192 ;;  TxMsg          69    0[BANK2 ] unsigned char [69]
  5193 ;;  val             8   69[BANK2 ] struct .
  5194 ;;  numOfSampleT    2   91[BANK2 ] int 
  5195 ;;  offset          2   89[BANK2 ] int 
  5196 ;;  j               2   85[BANK2 ] int 
  5197 ;; Return value:  Size  Location     Type
  5198 ;;                  1    wreg      void 
  5199 ;; Registers used:
  5200 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5201 ;; Tracked objects:
  5202 ;;		On entry : 0/0
  5203 ;;		On exit  : 0/0
  5204 ;;		Unchanged: 0/0
  5205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5206 ;;      Params:         0       2       0       0       0       0       0
  5207 ;;      Locals:         0       0       0      93       0       0       0
  5208 ;;      Temps:          0      12       0       0       0       0       0
  5209 ;;      Totals:         0      14       0      93       0       0       0
  5210 ;;Total ram usage:      107 bytes
  5211 ;; Hardware stack levels used:    1
  5212 ;; Hardware stack levels required when called:    8
  5213 ;; This function calls:
  5214 ;;		_FLASH_IsWriteDone
  5215 ;;		_FLASH_ReadByte
  5216 ;;		_GetIntFromUartData
  5217 ;;		_SendAckMessage
  5218 ;;		_WriteUartMessage
  5219 ;;		_ZeroArray
  5220 ;;		_abs
  5221 ;;		_crc8
  5222 ;; This function is called by:
  5223 ;;		_GroupFlashMemory
  5224 ;; This function uses a non-reentrant model
  5225 ;;
  5226                           
  5227                           	psect	text15
  5228  0006A6                     __ptext15:
  5229                           	opt stack 0
  5230  0006A6                     _FlashReadUart:
  5231                           	opt stack 20
  5232                           
  5233                           ;FlashApp.c: 65: int j=0;
  5234                           
  5235                           ;incstack = 0
  5236  0006A6  0E00               	movlw	0
  5237  0006A8  0102               	movlb	2	; () banked
  5238  0006AA  6F56               	movwf	(FlashReadUart@j+1)& (0+255),b
  5239  0006AC  0E00               	movlw	0
  5240  0006AE  6F55               	movwf	FlashReadUart@j& (0+255),b
  5241                           
  5242                           ;FlashApp.c: 66: int offset = 0;
  5243  0006B0  0E00               	movlw	0
  5244  0006B2  6F5A               	movwf	(FlashReadUart@offset+1)& (0+255),b
  5245  0006B4  0E00               	movlw	0
  5246  0006B6  6F59               	movwf	FlashReadUart@offset& (0+255),b
  5247                           
  5248                           ; BSR set to: 2
  5249                           ;FlashApp.c: 68: INT_VAL val = GetIntFromUartData(10, data);
  5250  0006B8  C087  F066         	movff	FlashReadUart@data,GetIntFromUartData@data
  5251  0006BC  C088  F067         	movff	FlashReadUart@data+1,GetIntFromUartData@data+1
  5252  0006C0  0E0A               	movlw	10
  5253  0006C2  ECF1  F00E         	call	_GetIntFromUartData
  5254  0006C6  EE22  F045         	lfsr	2,FlashReadUart@val
  5255  0006CA  0E07               	movlw	7
  5256  0006CC                     u8691:
  5257  0006CC  CFEB FFDB          	movff	plusw0,plusw2
  5258  0006D0  06E8               	decf	wreg,f,c
  5259  0006D2  E2FC               	bc	u8691
  5260                           
  5261                           ;FlashApp.c: 69: int numOfSampleToRead = val.num;
  5262  0006D4  C245  F25B         	movff	FlashReadUart@val,FlashReadUart@numOfSampleToRead
  5263  0006D8  C246  F25C         	movff	FlashReadUart@val+1,FlashReadUart@numOfSampleToRead+1
  5264                           
  5265                           ;FlashApp.c: 71: char TxMsg[(64) + (0x4) + 1];
  5266                           ;FlashApp.c: 72: ZeroArray(TxMsg, (64) + (0x4) + 1);
  5267  0006DC  0E00               	movlw	low FlashReadUart@TxMsg
  5268  0006DE  6E20               	movwf	ZeroArray@array,c
  5269  0006E0  0E02               	movlw	high FlashReadUart@TxMsg
  5270  0006E2  6E21               	movwf	ZeroArray@array+1,c
  5271  0006E4  0E00               	movlw	0
  5272  0006E6  6E23               	movwf	ZeroArray@size+1,c
  5273  0006E8  0E45               	movlw	69
  5274  0006EA  6E22               	movwf	ZeroArray@size,c
  5275  0006EC  ECCD  F021         	call	_ZeroArray	;wreg free
  5276                           
  5277                           ;FlashApp.c: 75: if (FLASH_IsWriteDone() == 0)
  5278  0006F0  EC6B  F022         	call	_FLASH_IsWriteDone	;wreg free
  5279  0006F4  0900               	iorlw	0
  5280  0006F6  B4D8               	btfsc	status,2,c
  5281  0006F8  0012               	return	
  5282                           
  5283                           ;FlashApp.c: 78: }
  5284                           ;FlashApp.c: 80: if (numOfReadSamples)
  5285                           
  5286                           ;FlashApp.c: 76: {
  5287                           ;FlashApp.c: 77: return;
  5288  0006FA  503C               	movf	_numOfReadSamples,w,c
  5289  0006FC  103D               	iorwf	_numOfReadSamples+1,w,c
  5290  0006FE  103E               	iorwf	_numOfReadSamples+2,w,c
  5291  000700  103F               	iorwf	_numOfReadSamples+3,w,c
  5292  000702  B4D8               	btfsc	status,2,c
  5293  000704  D0FB               	goto	l326
  5294                           
  5295                           ;FlashApp.c: 81: {
  5296                           ;FlashApp.c: 82: if (numOfValidateSamples)
  5297  000706  5031               	movf	_numOfValidateSamples,w,c
  5298  000708  1032               	iorwf	_numOfValidateSamples+1,w,c
  5299  00070A  1033               	iorwf	_numOfValidateSamples+2,w,c
  5300  00070C  1034               	iorwf	_numOfValidateSamples+3,w,c
  5301  00070E  B4D8               	btfsc	status,2,c
  5302  000710  D0A4               	goto	l327
  5303                           
  5304                           ;FlashApp.c: 83: {
  5305                           ;FlashApp.c: 84: offset = numOfValidateSamples - (numOfValidateSamples > numOfSampleToRe
      +                          ad)? numOfValidateSamples : numOfSampleToRead;
  5306  000712  C25B  F089         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  5307  000716  C25C  F08A         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  5308  00071A  0E00               	movlw	0
  5309  00071C  0100               	movlb	0	; () banked
  5310  00071E  BF8A               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  5311  000720  0EFF               	movlw	255
  5312  000722  6F8B               	movwf	(??_FlashReadUart+2)& (0+255),b
  5313  000724  6F8C               	movwf	(??_FlashReadUart+3)& (0+255),b
  5314  000726  5031               	movf	_numOfValidateSamples,w,c
  5315  000728  5D89               	subwf	??_FlashReadUart& (0+255),w,b
  5316  00072A  5032               	movf	_numOfValidateSamples+1,w,c
  5317  00072C  598A               	subwfb	(??_FlashReadUart+1)& (0+255),w,b
  5318  00072E  5033               	movf	_numOfValidateSamples+2,w,c
  5319  000730  598B               	subwfb	(??_FlashReadUart+2)& (0+255),w,b
  5320  000732  5034               	movf	_numOfValidateSamples+3,w,c
  5321  000734  598C               	subwfb	(??_FlashReadUart+3)& (0+255),w,b
  5322  000736  B0D8               	btfsc	status,0,c
  5323  000738  D002               	goto	u8730
  5324  00073A  0E01               	movlw	1
  5325  00073C  D001               	goto	u8740
  5326  00073E                     u8730:
  5327  00073E  0E00               	movlw	0
  5328  000740                     u8740:
  5329  000740  6F8D               	movwf	(??_FlashReadUart+4)& (0+255),b
  5330  000742  6B8E               	clrf	(??_FlashReadUart+5)& (0+255),b
  5331  000744  6B8F               	clrf	(??_FlashReadUart+6)& (0+255),b
  5332  000746  6B90               	clrf	(??_FlashReadUart+7)& (0+255),b
  5333  000748  1F8D               	comf	(??_FlashReadUart+4)& (0+255),f,b
  5334  00074A  1F8E               	comf	(??_FlashReadUart+5)& (0+255),f,b
  5335  00074C  1F8F               	comf	(??_FlashReadUart+6)& (0+255),f,b
  5336  00074E  1F90               	comf	(??_FlashReadUart+7)& (0+255),f,b
  5337  000750  2B8D               	incf	(??_FlashReadUart+4)& (0+255),f,b
  5338  000752  0E00               	movlw	0
  5339  000754  238E               	addwfc	(??_FlashReadUart+5)& (0+255),f,b
  5340  000756  238F               	addwfc	(??_FlashReadUart+6)& (0+255),f,b
  5341  000758  2390               	addwfc	(??_FlashReadUart+7)& (0+255),f,b
  5342  00075A  5031               	movf	_numOfValidateSamples,w,c
  5343  00075C  258D               	addwf	(??_FlashReadUart+4)& (0+255),w,b
  5344  00075E  6F91               	movwf	(??_FlashReadUart+8)& (0+255),b
  5345  000760  5032               	movf	_numOfValidateSamples+1,w,c
  5346  000762  218E               	addwfc	(??_FlashReadUart+5)& (0+255),w,b
  5347  000764  6F92               	movwf	(??_FlashReadUart+9)& (0+255),b
  5348  000766  5033               	movf	_numOfValidateSamples+2,w,c
  5349  000768  218F               	addwfc	(??_FlashReadUart+6)& (0+255),w,b
  5350  00076A  6F93               	movwf	(??_FlashReadUart+10)& (0+255),b
  5351  00076C  5034               	movf	_numOfValidateSamples+3,w,c
  5352  00076E  2190               	addwfc	(??_FlashReadUart+7)& (0+255),w,b
  5353  000770  6F94               	movwf	(??_FlashReadUart+11)& (0+255),b
  5354  000772  5191               	movf	(??_FlashReadUart+8)& (0+255),w,b
  5355  000774  1192               	iorwf	(??_FlashReadUart+9)& (0+255),w,b
  5356  000776  1193               	iorwf	(??_FlashReadUart+10)& (0+255),w,b
  5357  000778  1194               	iorwf	(??_FlashReadUart+11)& (0+255),w,b
  5358  00077A  A4D8               	btfss	status,2,c
  5359  00077C  D00B               	goto	l329
  5360                           
  5361                           ; BSR set to: 0
  5362  00077E  C25B  F24D         	movff	FlashReadUart@numOfSampleToRead,_FlashReadUart$609
  5363  000782  C25C  F24E         	movff	FlashReadUart@numOfSampleToRead+1,_FlashReadUart$609+1
  5364  000786  0102               	movlb	2	; () banked
  5365  000788  0E00               	movlw	0
  5366  00078A  BF4E               	btfsc	(_FlashReadUart$609+1)& (0+255),7,b
  5367  00078C  0EFF               	movlw	-1
  5368  00078E  6F4F               	movwf	(_FlashReadUart$609+2)& (0+255),b
  5369  000790  6F50               	movwf	(_FlashReadUart$609+3)& (0+255),b
  5370  000792  D008               	goto	l331
  5371  000794                     l329:
  5372                           
  5373                           ; BSR set to: 0
  5374  000794  C031  F24D         	movff	_numOfValidateSamples,_FlashReadUart$609
  5375  000798  C032  F24E         	movff	_numOfValidateSamples+1,_FlashReadUart$609+1
  5376  00079C  C033  F24F         	movff	_numOfValidateSamples+2,_FlashReadUart$609+2
  5377  0007A0  C034  F250         	movff	_numOfValidateSamples+3,_FlashReadUart$609+3
  5378  0007A4                     l331:
  5379  0007A4  C24D  F259         	movff	_FlashReadUart$609,FlashReadUart@offset
  5380  0007A8  C24E  F25A         	movff	_FlashReadUart$609+1,FlashReadUart@offset+1
  5381                           
  5382                           ;FlashApp.c: 85: if(offset < 0)
  5383  0007AC  0102               	movlb	2	; () banked
  5384  0007AE  AF5A               	btfss	(FlashReadUart@offset+1)& (0+255),7,b
  5385  0007B0  D09B               	goto	l334
  5386                           
  5387                           ; BSR set to: 2
  5388                           ;FlashApp.c: 86: {
  5389                           ;FlashApp.c: 87: if (abs(offset) > numOfReadSamples)
  5390  0007B2  C259  F018         	movff	FlashReadUart@offset,abs@a
  5391  0007B6  C25A  F019         	movff	FlashReadUart@offset+1,abs@a+1
  5392  0007BA  ECE6  F020         	call	_abs	;wreg free
  5393  0007BE  C018  F089         	movff	?_abs,??_FlashReadUart
  5394  0007C2  C019  F08A         	movff	?_abs+1,??_FlashReadUart+1
  5395  0007C6  0E00               	movlw	0
  5396  0007C8  0100               	movlb	0	; () banked
  5397  0007CA  BF8A               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  5398  0007CC  0EFF               	movlw	255
  5399  0007CE  6F8B               	movwf	(??_FlashReadUart+2)& (0+255),b
  5400  0007D0  6F8C               	movwf	(??_FlashReadUart+3)& (0+255),b
  5401  0007D2  5189               	movf	??_FlashReadUart& (0+255),w,b
  5402  0007D4  5C3C               	subwf	_numOfReadSamples,w,c
  5403  0007D6  518A               	movf	(??_FlashReadUart+1)& (0+255),w,b
  5404  0007D8  583D               	subwfb	_numOfReadSamples+1,w,c
  5405  0007DA  518B               	movf	(??_FlashReadUart+2)& (0+255),w,b
  5406  0007DC  583E               	subwfb	_numOfReadSamples+2,w,c
  5407  0007DE  518C               	movf	(??_FlashReadUart+3)& (0+255),w,b
  5408  0007E0  583F               	subwfb	_numOfReadSamples+3,w,c
  5409  0007E2  B0D8               	btfsc	status,0,c
  5410  0007E4  D01E               	goto	l333
  5411                           
  5412                           ; BSR set to: 0
  5413                           ;FlashApp.c: 88: {
  5414                           ;FlashApp.c: 89: numOfSampleToRead += offset + numOfReadSamples;
  5415  0007E6  503C               	movf	_numOfReadSamples,w,c
  5416  0007E8  0102               	movlb	2	; () banked
  5417  0007EA  2559               	addwf	FlashReadUart@offset& (0+255),w,b
  5418  0007EC  0100               	movlb	0	; () banked
  5419  0007EE  6F89               	movwf	??_FlashReadUart& (0+255),b
  5420  0007F0  503D               	movf	_numOfReadSamples+1,w,c
  5421  0007F2  0102               	movlb	2	; () banked
  5422  0007F4  215A               	addwfc	(FlashReadUart@offset+1)& (0+255),w,b
  5423  0007F6  0100               	movlb	0	; () banked
  5424  0007F8  6F8A               	movwf	(??_FlashReadUart+1)& (0+255),b
  5425  0007FA  5189               	movf	??_FlashReadUart& (0+255),w,b
  5426  0007FC  0102               	movlb	2	; () banked
  5427  0007FE  275B               	addwf	FlashReadUart@numOfSampleToRead& (0+255),f,b
  5428  000800  0100               	movlb	0	; () banked
  5429  000802  518A               	movf	(??_FlashReadUart+1)& (0+255),w,b
  5430  000804  0102               	movlb	2	; () banked
  5431  000806  235C               	addwfc	(FlashReadUart@numOfSampleToRead+1)& (0+255),f,b
  5432                           
  5433                           ; BSR set to: 2
  5434                           ;FlashApp.c: 90: offset = numOfReadSamples * (-1);
  5435  000808  C03C  F089         	movff	_numOfReadSamples,??_FlashReadUart
  5436  00080C  C03D  F08A         	movff	_numOfReadSamples+1,??_FlashReadUart+1
  5437  000810  0100               	movlb	0	; () banked
  5438  000812  1F89               	comf	??_FlashReadUart& (0+255),f,b
  5439  000814  1F8A               	comf	(??_FlashReadUart+1)& (0+255),f,b
  5440  000816  4B89               	infsnz	??_FlashReadUart& (0+255),f,b
  5441  000818  2B8A               	incf	(??_FlashReadUart+1)& (0+255),f,b
  5442  00081A  C089  F259         	movff	??_FlashReadUart,FlashReadUart@offset
  5443  00081E  C08A  F25A         	movff	??_FlashReadUart+1,FlashReadUart@offset+1
  5444  000822                     l333:
  5445                           
  5446                           ; BSR set to: 0
  5447                           ;FlashApp.c: 92: }
  5448                           ;FlashApp.c: 94: readAddress += offset * (64);
  5449  000822  C259  F089         	movff	FlashReadUart@offset,??_FlashReadUart
  5450  000826  C25A  F08A         	movff	FlashReadUart@offset+1,??_FlashReadUart+1
  5451  00082A  0E06               	movlw	6
  5452  00082C                     u8785:
  5453  00082C  90D8               	bcf	status,0,c
  5454  00082E  3789               	rlcf	??_FlashReadUart& (0+255),f,b
  5455  000830  378A               	rlcf	(??_FlashReadUart+1)& (0+255),f,b
  5456  000832  2EE8               	decfsz	wreg,f,c
  5457  000834  D7FB               	goto	u8785
  5458  000836  C089  F08B         	movff	??_FlashReadUart,??_FlashReadUart+2
  5459  00083A  C08A  F08C         	movff	??_FlashReadUart+1,??_FlashReadUart+3
  5460  00083E  0E00               	movlw	0
  5461  000840  BF8C               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  5462  000842  0EFF               	movlw	255
  5463  000844  6F8D               	movwf	(??_FlashReadUart+4)& (0+255),b
  5464  000846  6F8E               	movwf	(??_FlashReadUart+5)& (0+255),b
  5465  000848  518B               	movf	(??_FlashReadUart+2)& (0+255),w,b
  5466  00084A  27F5               	addwf	_readAddress& (0+255),f,b
  5467  00084C  518C               	movf	(??_FlashReadUart+3)& (0+255),w,b
  5468  00084E  23F6               	addwfc	(_readAddress+1)& (0+255),f,b
  5469  000850  518D               	movf	(??_FlashReadUart+4)& (0+255),w,b
  5470  000852  23F7               	addwfc	(_readAddress+2)& (0+255),f,b
  5471  000854  518E               	movf	(??_FlashReadUart+5)& (0+255),w,b
  5472  000856  23F8               	addwfc	(_readAddress+3)& (0+255),f,b
  5473                           
  5474                           ; BSR set to: 0
  5475                           ;FlashApp.c: 95: }
  5476                           ;FlashApp.c: 96: }
  5477  000858  D047               	goto	l334
  5478  00085A                     l327:
  5479                           
  5480                           ;FlashApp.c: 97: else
  5481                           ;FlashApp.c: 98: {
  5482                           ;FlashApp.c: 99: numOfSampleToRead = (numOfReadSamples > numOfSampleToRead)? numOfSample
      +                          ToRead : numOfReadSamples;
  5483                           
  5484                           ; BSR set to: 0
  5485  00085A  C25B  F089         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  5486  00085E  C25C  F08A         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  5487  000862  0E00               	movlw	0
  5488  000864  0100               	movlb	0	; () banked
  5489  000866  BF8A               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  5490  000868  0EFF               	movlw	255
  5491  00086A  6F8B               	movwf	(??_FlashReadUart+2)& (0+255),b
  5492  00086C  6F8C               	movwf	(??_FlashReadUart+3)& (0+255),b
  5493  00086E  503C               	movf	_numOfReadSamples,w,c
  5494  000870  5D89               	subwf	??_FlashReadUart& (0+255),w,b
  5495  000872  503D               	movf	_numOfReadSamples+1,w,c
  5496  000874  598A               	subwfb	(??_FlashReadUart+1)& (0+255),w,b
  5497  000876  503E               	movf	_numOfReadSamples+2,w,c
  5498  000878  598B               	subwfb	(??_FlashReadUart+2)& (0+255),w,b
  5499  00087A  503F               	movf	_numOfReadSamples+3,w,c
  5500  00087C  598C               	subwfb	(??_FlashReadUart+3)& (0+255),w,b
  5501  00087E  A0D8               	btfss	status,0,c
  5502  000880  D009               	goto	l336
  5503                           
  5504                           ; BSR set to: 0
  5505  000882  C03C  F251         	movff	_numOfReadSamples,_FlashReadUart$610
  5506  000886  C03D  F252         	movff	_numOfReadSamples+1,_FlashReadUart$610+1
  5507  00088A  C03E  F253         	movff	_numOfReadSamples+2,_FlashReadUart$610+2
  5508  00088E  C03F  F254         	movff	_numOfReadSamples+3,_FlashReadUart$610+3
  5509  000892  D00A               	goto	l338
  5510  000894                     l336:
  5511                           
  5512                           ; BSR set to: 0
  5513                           
  5514                           ; BSR set to: 0
  5515  000894  C25B  F251         	movff	FlashReadUart@numOfSampleToRead,_FlashReadUart$610
  5516  000898  C25C  F252         	movff	FlashReadUart@numOfSampleToRead+1,_FlashReadUart$610+1
  5517  00089C  0102               	movlb	2	; () banked
  5518  00089E  0E00               	movlw	0
  5519  0008A0  BF52               	btfsc	(_FlashReadUart$610+1)& (0+255),7,b
  5520  0008A2  0EFF               	movlw	-1
  5521  0008A4  6F53               	movwf	(_FlashReadUart$610+2)& (0+255),b
  5522  0008A6  6F54               	movwf	(_FlashReadUart$610+3)& (0+255),b
  5523  0008A8                     l338:
  5524                           
  5525                           ; BSR set to: 2
  5526  0008A8  C251  F25B         	movff	_FlashReadUart$610,FlashReadUart@numOfSampleToRead
  5527  0008AC  C252  F25C         	movff	_FlashReadUart$610+1,FlashReadUart@numOfSampleToRead+1
  5528                           
  5529                           ;FlashApp.c: 100: readAddress -= numOfSampleToRead * (64);
  5530  0008B0  C25B  F089         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  5531  0008B4  C25C  F08A         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  5532  0008B8  0E06               	movlw	6
  5533  0008BA                     u8805:
  5534  0008BA  90D8               	bcf	status,0,c
  5535  0008BC  0100               	movlb	0	; () banked
  5536  0008BE  3789               	rlcf	??_FlashReadUart& (0+255),f,b
  5537  0008C0  378A               	rlcf	(??_FlashReadUart+1)& (0+255),f,b
  5538  0008C2  2EE8               	decfsz	wreg,f,c
  5539  0008C4  D7FA               	goto	u8805
  5540  0008C6  C089  F08B         	movff	??_FlashReadUart,??_FlashReadUart+2
  5541  0008CA  C08A  F08C         	movff	??_FlashReadUart+1,??_FlashReadUart+3
  5542  0008CE  0E00               	movlw	0
  5543  0008D0  BF8C               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  5544  0008D2  0EFF               	movlw	255
  5545  0008D4  6F8D               	movwf	(??_FlashReadUart+4)& (0+255),b
  5546  0008D6  6F8E               	movwf	(??_FlashReadUart+5)& (0+255),b
  5547  0008D8  518B               	movf	(??_FlashReadUart+2)& (0+255),w,b
  5548  0008DA  5FF5               	subwf	_readAddress& (0+255),f,b
  5549  0008DC  518C               	movf	(??_FlashReadUart+3)& (0+255),w,b
  5550  0008DE  5BF6               	subwfb	(_readAddress+1)& (0+255),f,b
  5551  0008E0  518D               	movf	(??_FlashReadUart+4)& (0+255),w,b
  5552  0008E2  5BF7               	subwfb	(_readAddress+2)& (0+255),f,b
  5553  0008E4  518E               	movf	(??_FlashReadUart+5)& (0+255),w,b
  5554  0008E6  5BF8               	subwfb	(_readAddress+3)& (0+255),f,b
  5555  0008E8                     l334:
  5556                           
  5557                           ;FlashApp.c: 101: }
  5558                           ;FlashApp.c: 103: if (readAddress <= 0x4600)
  5559                           
  5560                           ; BSR set to: 0
  5561  0008E8  0100               	movlb	0	; () banked
  5562  0008EA  51F8               	movf	(_readAddress+3)& (0+255),w,b
  5563  0008EC  11F7               	iorwf	(_readAddress+2)& (0+255),w,b
  5564  0008EE  E13E               	bnz	l8382
  5565  0008F0  05F5               	decf	_readAddress& (0+255),w,b
  5566  0008F2  0E46               	movlw	70
  5567  0008F4  59F6               	subwfb	(_readAddress+1)& (0+255),w,b
  5568  0008F6  B0D8               	btfsc	status,0,c
  5569  0008F8  D039               	goto	l344
  5570  0008FA  D023               	goto	u8840
  5571  0008FC                     l326:
  5572                           
  5573                           ;FlashApp.c: 108: else
  5574                           ;FlashApp.c: 109: {
  5575                           ;FlashApp.c: 110: if ((isReWriteDone) && (readAddress <= writeAddress))
  5576                           
  5577                           ; BSR set to: 0
  5578  0008FC  0100               	movlb	0	; () banked
  5579  0008FE  51E7               	movf	_isReWriteDone& (0+255),w,b
  5580  000900  B4D8               	btfsc	status,2,c
  5581  000902  D028               	goto	l341
  5582                           
  5583                           ; BSR set to: 0
  5584  000904  51F5               	movf	_readAddress& (0+255),w,b
  5585  000906  5C40               	subwf	_writeAddress,w,c
  5586  000908  51F6               	movf	(_readAddress+1)& (0+255),w,b
  5587  00090A  5841               	subwfb	_writeAddress+1,w,c
  5588  00090C  51F7               	movf	(_readAddress+2)& (0+255),w,b
  5589  00090E  5842               	subwfb	_writeAddress+2,w,c
  5590  000910  51F8               	movf	(_readAddress+3)& (0+255),w,b
  5591  000912  5843               	subwfb	_writeAddress+3,w,c
  5592  000914  A0D8               	btfss	status,0,c
  5593  000916  D01E               	goto	l341
  5594                           
  5595                           ; BSR set to: 0
  5596                           ;FlashApp.c: 111: {
  5597                           ;FlashApp.c: 112: readAddress = writeAddress + (64);
  5598  000918  0E40               	movlw	64
  5599  00091A  2440               	addwf	_writeAddress,w,c
  5600  00091C  6FF5               	movwf	_readAddress& (0+255),b
  5601  00091E  0E00               	movlw	0
  5602  000920  2041               	addwfc	_writeAddress+1,w,c
  5603  000922  6FF6               	movwf	(_readAddress+1)& (0+255),b
  5604  000924  0E00               	movlw	0
  5605  000926  2042               	addwfc	_writeAddress+2,w,c
  5606  000928  6FF7               	movwf	(_readAddress+2)& (0+255),b
  5607  00092A  0E00               	movlw	0
  5608  00092C  2043               	addwfc	_writeAddress+3,w,c
  5609  00092E  6FF8               	movwf	(_readAddress+3)& (0+255),b
  5610                           
  5611                           ;FlashApp.c: 113: if (readAddress >= 0x7FF0)
  5612  000930  51F8               	movf	(_readAddress+3)& (0+255),w,b
  5613  000932  11F7               	iorwf	(_readAddress+2)& (0+255),w,b
  5614  000934  E106               	bnz	u8840
  5615  000936  0EF0               	movlw	240
  5616  000938  5DF5               	subwf	_readAddress& (0+255),w,b
  5617  00093A  0E7F               	movlw	127
  5618  00093C  59F6               	subwfb	(_readAddress+1)& (0+255),w,b
  5619  00093E  A0D8               	btfss	status,0,c
  5620  000940  D015               	goto	l344
  5621  000942                     u8840:
  5622                           
  5623                           ; BSR set to: 0
  5624                           ;FlashApp.c: 114: {
  5625                           ;FlashApp.c: 115: readAddress = 0x4600;
  5626  000942  0E00               	movlw	0
  5627  000944  6FF5               	movwf	_readAddress& (0+255),b
  5628  000946  0E46               	movlw	70
  5629  000948  6FF6               	movwf	(_readAddress+1)& (0+255),b
  5630  00094A  0E00               	movlw	0
  5631  00094C  6FF7               	movwf	(_readAddress+2)& (0+255),b
  5632  00094E  0E00               	movlw	0
  5633  000950  6FF8               	movwf	(_readAddress+3)& (0+255),b
  5634                           
  5635                           ; BSR set to: 0
  5636                           ;FlashApp.c: 116: }
  5637                           ;FlashApp.c: 118: }
  5638  000952  D00C               	goto	l344
  5639  000954                     l341:
  5640                           
  5641                           ; BSR set to: 0
  5642                           ;FlashApp.c: 119: else
  5643                           ;FlashApp.c: 120: {
  5644                           ;FlashApp.c: 121: if(numOfValidateSamples == 0)
  5645                           
  5646                           ; BSR set to: 0
  5647  000954  5031               	movf	_numOfValidateSamples,w,c
  5648  000956  1032               	iorwf	_numOfValidateSamples+1,w,c
  5649  000958  1033               	iorwf	_numOfValidateSamples+2,w,c
  5650  00095A  1034               	iorwf	_numOfValidateSamples+3,w,c
  5651  00095C  A4D8               	btfss	status,2,c
  5652  00095E  D006               	goto	l344
  5653                           
  5654                           ; BSR set to: 0
  5655                           ;FlashApp.c: 122: {
  5656                           ;FlashApp.c: 123: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_NO_SAMPLE_YET
      +                          );
  5657  000960  0E55               	movlw	85
  5658  000962  6E24               	movwf	SendAckMessage@inRequest,c
  5659  000964  0E05               	movlw	5
  5660  000966  EC1D  F01E         	call	_SendAckMessage
  5661                           
  5662                           ;FlashApp.c: 124: return;
  5663  00096A  0012               	return	
  5664  00096C                     l344:
  5665  00096C                     l8382:
  5666                           
  5667                           ;FlashApp.c: 125: }
  5668                           ;FlashApp.c: 127: }
  5669                           ;FlashApp.c: 128: }
  5670                           ;FlashApp.c: 131: TxMsg[(0)] = (0x24);
  5671  00096C  0E24               	movlw	36
  5672  00096E  0102               	movlb	2	; () banked
  5673  000970  6F00               	movwf	FlashReadUart@TxMsg& (0+255),b
  5674                           
  5675                           ;FlashApp.c: 132: TxMsg[(1)] = FLASH_MSG;
  5676  000972  0E05               	movlw	5
  5677  000974  6F01               	movwf	(FlashReadUart@TxMsg+1)& (0+255),b
  5678                           
  5679                           ;FlashApp.c: 133: TxMsg[(2)] = FLASH_SEND_RAW_DATA;
  5680  000976  0E54               	movlw	84
  5681  000978  6F02               	movwf	(FlashReadUart@TxMsg+2)& (0+255),b
  5682                           
  5683                           ;FlashApp.c: 134: TxMsg[(3)] = (64);
  5684  00097A  0E40               	movlw	64
  5685  00097C  6F03               	movwf	(FlashReadUart@TxMsg+3)& (0+255),b
  5686                           
  5687                           ;FlashApp.c: 137: for (j=0; j<numOfSampleToRead; j++)
  5688  00097E  0E00               	movlw	0
  5689  000980  6F56               	movwf	(FlashReadUart@j+1)& (0+255),b
  5690  000982  0E00               	movlw	0
  5691  000984  6F55               	movwf	FlashReadUart@j& (0+255),b
  5692  000986  D08A               	goto	l345
  5693  000988                     
  5694                           ;FlashApp.c: 138: {
  5695                           ;FlashApp.c: 140: for(int idx = 0; idx < (64); idx++)
  5696                           
  5697                           ; BSR set to: 2
  5698  000988  0E00               	movlw	0
  5699  00098A  0102               	movlb	2	; () banked
  5700  00098C  6F58               	movwf	(FlashReadUart@idx+1)& (0+255),b
  5701  00098E  0E00               	movlw	0
  5702  000990  6F57               	movwf	FlashReadUart@idx& (0+255),b
  5703  000992                     l8386:
  5704                           
  5705                           ; BSR set to: 2
  5706  000992  BF58               	btfsc	(FlashReadUart@idx+1)& (0+255),7,b
  5707  000994  D006               	goto	l347
  5708  000996  5158               	movf	(FlashReadUart@idx+1)& (0+255),w,b
  5709  000998  E12F               	bnz	l8396
  5710  00099A  0E40               	movlw	64
  5711  00099C  5D57               	subwf	FlashReadUart@idx& (0+255),w,b
  5712  00099E  B0D8               	btfsc	status,0,c
  5713  0009A0  D02B               	goto	u8870
  5714  0009A2                     l347:
  5715                           
  5716                           ; BSR set to: 2
  5717                           ;FlashApp.c: 141: {
  5718                           ;FlashApp.c: 142: TxMsg[(0x4) + idx] = FLASH_ReadByte(readAddress + idx);
  5719                           
  5720                           ; BSR set to: 2
  5721  0009A2  0E04               	movlw	4
  5722  0009A4  2557               	addwf	FlashReadUart@idx& (0+255),w,b
  5723  0009A6  0100               	movlb	0	; () banked
  5724  0009A8  6F89               	movwf	??_FlashReadUart& (0+255),b
  5725  0009AA  0E00               	movlw	0
  5726  0009AC  0102               	movlb	2	; () banked
  5727  0009AE  2158               	addwfc	(FlashReadUart@idx+1)& (0+255),w,b
  5728  0009B0  0100               	movlb	0	; () banked
  5729  0009B2  6F8A               	movwf	(??_FlashReadUart+1)& (0+255),b
  5730  0009B4  0E00               	movlw	low FlashReadUart@TxMsg
  5731  0009B6  2589               	addwf	??_FlashReadUart& (0+255),w,b
  5732  0009B8  6ED9               	movwf	fsr2l,c
  5733  0009BA  0E02               	movlw	high FlashReadUart@TxMsg
  5734  0009BC  218A               	addwfc	(??_FlashReadUart+1)& (0+255),w,b
  5735  0009BE  6EDA               	movwf	fsr2h,c
  5736  0009C0  C257  F08B         	movff	FlashReadUart@idx,??_FlashReadUart+2
  5737  0009C4  C258  F08C         	movff	FlashReadUart@idx+1,??_FlashReadUart+3
  5738  0009C8  0E00               	movlw	0
  5739  0009CA  BF8C               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  5740  0009CC  0EFF               	movlw	255
  5741  0009CE  6F8D               	movwf	(??_FlashReadUart+4)& (0+255),b
  5742  0009D0  6F8E               	movwf	(??_FlashReadUart+5)& (0+255),b
  5743  0009D2  51F5               	movf	_readAddress& (0+255),w,b
  5744  0009D4  258B               	addwf	(??_FlashReadUart+2)& (0+255),w,b
  5745  0009D6  6E18               	movwf	FLASH_ReadByte@flashAddr,c
  5746  0009D8  51F6               	movf	(_readAddress+1)& (0+255),w,b
  5747  0009DA  218C               	addwfc	(??_FlashReadUart+3)& (0+255),w,b
  5748  0009DC  6E19               	movwf	FLASH_ReadByte@flashAddr+1,c
  5749  0009DE  51F7               	movf	(_readAddress+2)& (0+255),w,b
  5750  0009E0  218D               	addwfc	(??_FlashReadUart+4)& (0+255),w,b
  5751  0009E2  6E1A               	movwf	FLASH_ReadByte@flashAddr+2,c
  5752  0009E4  51F8               	movf	(_readAddress+3)& (0+255),w,b
  5753  0009E6  218E               	addwfc	(??_FlashReadUart+5)& (0+255),w,b
  5754  0009E8  6E1B               	movwf	FLASH_ReadByte@flashAddr+3,c
  5755  0009EA  EC45  F022         	call	_FLASH_ReadByte	;wreg free
  5756  0009EE  6EDF               	movwf	indf2,c
  5757  0009F0  0102               	movlb	2	; () banked
  5758  0009F2  4B57               	infsnz	FlashReadUart@idx& (0+255),f,b
  5759  0009F4  2B58               	incf	(FlashReadUart@idx+1)& (0+255),f,b
  5760  0009F6  D7CD               	goto	l8386
  5761  0009F8                     u8870:
  5762  0009F8                     l8396:
  5763                           
  5764                           ; BSR set to: 2
  5765                           ;FlashApp.c: 143: }
  5766                           ;FlashApp.c: 145: readAddress += (64);
  5767  0009F8  0E40               	movlw	64
  5768  0009FA  0100               	movlb	0	; () banked
  5769  0009FC  27F5               	addwf	_readAddress& (0+255),f,b
  5770  0009FE  0E00               	movlw	0
  5771  000A00  23F6               	addwfc	(_readAddress+1)& (0+255),f,b
  5772  000A02  23F7               	addwfc	(_readAddress+2)& (0+255),f,b
  5773  000A04  23F8               	addwfc	(_readAddress+3)& (0+255),f,b
  5774                           
  5775                           ;FlashApp.c: 146: if (readAddress >= 0x7FF0)
  5776  000A06  51F8               	movf	(_readAddress+3)& (0+255),w,b
  5777  000A08  11F7               	iorwf	(_readAddress+2)& (0+255),w,b
  5778  000A0A  E106               	bnz	u8880
  5779  000A0C  0EF0               	movlw	240
  5780  000A0E  5DF5               	subwf	_readAddress& (0+255),w,b
  5781  000A10  0E7F               	movlw	127
  5782  000A12  59F6               	subwfb	(_readAddress+1)& (0+255),w,b
  5783  000A14  A0D8               	btfss	status,0,c
  5784  000A16  D008               	goto	l349
  5785  000A18                     u8880:
  5786                           
  5787                           ; BSR set to: 0
  5788                           ;FlashApp.c: 147: {
  5789                           ;FlashApp.c: 148: readAddress = 0x4600;
  5790  000A18  0E00               	movlw	0
  5791  000A1A  6FF5               	movwf	_readAddress& (0+255),b
  5792  000A1C  0E46               	movlw	70
  5793  000A1E  6FF6               	movwf	(_readAddress+1)& (0+255),b
  5794  000A20  0E00               	movlw	0
  5795  000A22  6FF7               	movwf	(_readAddress+2)& (0+255),b
  5796  000A24  0E00               	movlw	0
  5797  000A26  6FF8               	movwf	(_readAddress+3)& (0+255),b
  5798  000A28                     l349:
  5799                           
  5800                           ; BSR set to: 0
  5801                           ;FlashApp.c: 149: }
  5802                           ;FlashApp.c: 150: TxMsg[(64) + (0x4)] = crc8(TxMsg, (64) + (0x4));
  5803                           
  5804                           ; BSR set to: 0
  5805  000A28  0E00               	movlw	low FlashReadUart@TxMsg
  5806  000A2A  6E18               	movwf	crc8@dataArray,c
  5807  000A2C  0E02               	movlw	high FlashReadUart@TxMsg
  5808  000A2E  6E19               	movwf	crc8@dataArray+1,c
  5809  000A30  0E00               	movlw	0
  5810  000A32  6E1B               	movwf	crc8@dataSize+1,c
  5811  000A34  0E44               	movlw	68
  5812  000A36  6E1A               	movwf	crc8@dataSize,c
  5813  000A38  EC46  F01E         	call	_crc8	;wreg free
  5814  000A3C  0102               	movlb	2	; () banked
  5815  000A3E  6F44               	movwf	(FlashReadUart@TxMsg+68)& (0+255),b
  5816                           
  5817                           ; BSR set to: 2
  5818                           ;FlashApp.c: 152: WriteUartMessage(TxMsg, (64) + (0x4) + 1);
  5819  000A40  0E00               	movlw	low FlashReadUart@TxMsg
  5820  000A42  6E19               	movwf	WriteUartMessage@dataBuf,c
  5821  000A44  0E02               	movlw	high FlashReadUart@TxMsg
  5822  000A46  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5823  000A48  0E00               	movlw	0
  5824  000A4A  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5825  000A4C  0E45               	movlw	69
  5826  000A4E  6E1B               	movwf	WriteUartMessage@dataSize,c
  5827  000A50  ECD9  F01F         	call	_WriteUartMessage	;wreg free
  5828                           
  5829                           ;FlashApp.c: 154: if(numOfValidateSamples)
  5830  000A54  5031               	movf	_numOfValidateSamples,w,c
  5831  000A56  1032               	iorwf	_numOfValidateSamples+1,w,c
  5832  000A58  1033               	iorwf	_numOfValidateSamples+2,w,c
  5833  000A5A  1034               	iorwf	_numOfValidateSamples+3,w,c
  5834  000A5C  B4D8               	btfsc	status,2,c
  5835  000A5E  D01B               	goto	l352
  5836                           
  5837                           ;FlashApp.c: 155: {
  5838                           ;FlashApp.c: 156: if (numOfReadSamples < ((0x4600-0x7FF0)/(64)))
  5839  000A60  0E19               	movlw	25
  5840  000A62  5C3C               	subwf	_numOfReadSamples,w,c
  5841  000A64  0EFF               	movlw	255
  5842  000A66  583D               	subwfb	_numOfReadSamples+1,w,c
  5843  000A68  0EFF               	movlw	255
  5844  000A6A  583E               	subwfb	_numOfReadSamples+2,w,c
  5845  000A6C  0EFF               	movlw	255
  5846  000A6E  583F               	subwfb	_numOfReadSamples+3,w,c
  5847  000A70  B0D8               	btfsc	status,0,c
  5848  000A72  D006               	goto	l351
  5849                           
  5850                           ;FlashApp.c: 157: {
  5851                           ;FlashApp.c: 158: numOfReadSamples++;
  5852  000A74  0E01               	movlw	1
  5853  000A76  263C               	addwf	_numOfReadSamples,f,c
  5854  000A78  0E00               	movlw	0
  5855  000A7A  223D               	addwfc	_numOfReadSamples+1,f,c
  5856  000A7C  223E               	addwfc	_numOfReadSamples+2,f,c
  5857  000A7E  223F               	addwfc	_numOfReadSamples+3,f,c
  5858  000A80                     l351:
  5859                           
  5860                           ;FlashApp.c: 159: }
  5861                           ;FlashApp.c: 160: if (numOfValidateSamples > 0)
  5862  000A80  5031               	movf	_numOfValidateSamples,w,c
  5863  000A82  1032               	iorwf	_numOfValidateSamples+1,w,c
  5864  000A84  1033               	iorwf	_numOfValidateSamples+2,w,c
  5865  000A86  1034               	iorwf	_numOfValidateSamples+3,w,c
  5866  000A88  B4D8               	btfsc	status,2,c
  5867  000A8A  D005               	goto	l352
  5868                           
  5869                           ;FlashApp.c: 161: {
  5870                           ;FlashApp.c: 162: numOfValidateSamples--;
  5871  000A8C  0631               	decf	_numOfValidateSamples,f,c
  5872  000A8E  0E00               	movlw	0
  5873  000A90  5A32               	subwfb	_numOfValidateSamples+1,f,c
  5874  000A92  5A33               	subwfb	_numOfValidateSamples+2,f,c
  5875  000A94  5A34               	subwfb	_numOfValidateSamples+3,f,c
  5876  000A96                     l352:
  5877  000A96  0102               	movlb	2	; () banked
  5878  000A98  4B55               	infsnz	FlashReadUart@j& (0+255),f,b
  5879  000A9A  2B56               	incf	(FlashReadUart@j+1)& (0+255),f,b
  5880  000A9C                     l345:
  5881                           
  5882                           ; BSR set to: 2
  5883                           
  5884                           ; BSR set to: 2
  5885  000A9C  515B               	movf	FlashReadUart@numOfSampleToRead& (0+255),w,b
  5886  000A9E  5D55               	subwf	FlashReadUart@j& (0+255),w,b
  5887  000AA0  5156               	movf	(FlashReadUart@j+1)& (0+255),w,b
  5888  000AA2  0A80               	xorlw	128
  5889  000AA4  0100               	movlb	0	; () banked
  5890  000AA6  6F89               	movwf	??_FlashReadUart& (0+255),b
  5891  000AA8  0102               	movlb	2	; () banked
  5892  000AAA  515C               	movf	(FlashReadUart@numOfSampleToRead+1)& (0+255),w,b
  5893  000AAC  0A80               	xorlw	128
  5894  000AAE  0100               	movlb	0	; () banked
  5895  000AB0  5989               	subwfb	??_FlashReadUart& (0+255),w,b
  5896  000AB2  B0D8               	btfsc	status,0,c
  5897  000AB4  0012               	return	
  5898  000AB6  D768               	goto	l346
  5899  000AB8                     __end_of_FlashReadUart:
  5900                           	opt stack 0
  5901                           tosu	equ	0xFFF
  5902                           tosh	equ	0xFFE
  5903                           tosl	equ	0xFFD
  5904                           pclath	equ	0xFFA
  5905                           tblptru	equ	0xFF8
  5906                           tblptrh	equ	0xFF7
  5907                           tblptrl	equ	0xFF6
  5908                           tablat	equ	0xFF5
  5909                           prodh	equ	0xFF4
  5910                           prodl	equ	0xFF3
  5911                           postinc0	equ	0xFEE
  5912                           plusw0	equ	0xFEB
  5913                           wreg	equ	0xFE8
  5914                           postdec1	equ	0xFE5
  5915                           fsr1l	equ	0xFE1
  5916                           indf2	equ	0xFDF
  5917                           postinc2	equ	0xFDE
  5918                           plusw2	equ	0xFDB
  5919                           fsr2h	equ	0xFDA
  5920                           fsr2l	equ	0xFD9
  5921                           status	equ	0xFD8
  5922                           
  5923 ;; *************** function _abs *****************
  5924 ;; Defined at:
  5925 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abs.c"
  5926 ;; Parameters:    Size  Location     Type
  5927 ;;  a               2   23[COMRAM] int 
  5928 ;; Auto vars:     Size  Location     Type
  5929 ;;		None
  5930 ;; Return value:  Size  Location     Type
  5931 ;;                  2   23[COMRAM] int 
  5932 ;; Registers used:
  5933 ;;		wreg, status,2, status,0
  5934 ;; Tracked objects:
  5935 ;;		On entry : 0/0
  5936 ;;		On exit  : 0/0
  5937 ;;		Unchanged: 0/0
  5938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5939 ;;      Params:         2       0       0       0       0       0       0
  5940 ;;      Locals:         0       0       0       0       0       0       0
  5941 ;;      Temps:          2       0       0       0       0       0       0
  5942 ;;      Totals:         4       0       0       0       0       0       0
  5943 ;;Total ram usage:        4 bytes
  5944 ;; Hardware stack levels used:    1
  5945 ;; Hardware stack levels required when called:    4
  5946 ;; This function calls:
  5947 ;;		Nothing
  5948 ;; This function is called by:
  5949 ;;		_FlashReadUart
  5950 ;; This function uses a non-reentrant model
  5951 ;;
  5952                           
  5953                           	psect	text16
  5954  0041CC                     __ptext16:
  5955                           	opt stack 0
  5956  0041CC                     _abs:
  5957                           	opt stack 23
  5958                           
  5959                           ;incstack = 0
  5960  0041CC  AE19               	btfss	abs@a+1,7,c
  5961  0041CE  D00D               	goto	l1657
  5962  0041D0  C018  F01A         	movff	abs@a,??_abs
  5963  0041D4  C019  F01B         	movff	abs@a+1,??_abs+1
  5964  0041D8  1E1A               	comf	??_abs,f,c
  5965  0041DA  1E1B               	comf	??_abs+1,f,c
  5966  0041DC  4A1A               	infsnz	??_abs,f,c
  5967  0041DE  2A1B               	incf	??_abs+1,f,c
  5968  0041E0  C01A  F018         	movff	??_abs,?_abs
  5969  0041E4  C01B  F019         	movff	??_abs+1,?_abs+1
  5970  0041E8  0012               	return	
  5971  0041EA                     l1657:
  5972  0041EA  C018  F018         	movff	abs@a,?_abs
  5973  0041EE  C019  F019         	movff	abs@a+1,?_abs+1
  5974  0041F2  0012               	return		;funcret
  5975  0041F4                     __end_of_abs:
  5976                           	opt stack 0
  5977                           tosu	equ	0xFFF
  5978                           tosh	equ	0xFFE
  5979                           tosl	equ	0xFFD
  5980                           pclath	equ	0xFFA
  5981                           tblptru	equ	0xFF8
  5982                           tblptrh	equ	0xFF7
  5983                           tblptrl	equ	0xFF6
  5984                           tablat	equ	0xFF5
  5985                           prodh	equ	0xFF4
  5986                           prodl	equ	0xFF3
  5987                           postinc0	equ	0xFEE
  5988                           plusw0	equ	0xFEB
  5989                           wreg	equ	0xFE8
  5990                           postdec1	equ	0xFE5
  5991                           fsr1l	equ	0xFE1
  5992                           indf2	equ	0xFDF
  5993                           postinc2	equ	0xFDE
  5994                           plusw2	equ	0xFDB
  5995                           fsr2h	equ	0xFDA
  5996                           fsr2l	equ	0xFD9
  5997                           status	equ	0xFD8
  5998                           
  5999 ;; *************** function _FLASH_ReadByte *****************
  6000 ;; Defined at:
  6001 ;;		line 58 in file "mcc_generated_files/memory.c"
  6002 ;; Parameters:    Size  Location     Type
  6003 ;;  flashAddr       4   23[COMRAM] unsigned long 
  6004 ;; Auto vars:     Size  Location     Type
  6005 ;;		None
  6006 ;; Return value:  Size  Location     Type
  6007 ;;                  1    wreg      unsigned char 
  6008 ;; Registers used:
  6009 ;;		wreg, status,2
  6010 ;; Tracked objects:
  6011 ;;		On entry : 0/0
  6012 ;;		On exit  : 0/0
  6013 ;;		Unchanged: 0/0
  6014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6015 ;;      Params:         4       0       0       0       0       0       0
  6016 ;;      Locals:         0       0       0       0       0       0       0
  6017 ;;      Temps:          0       0       0       0       0       0       0
  6018 ;;      Totals:         4       0       0       0       0       0       0
  6019 ;;Total ram usage:        4 bytes
  6020 ;; Hardware stack levels used:    1
  6021 ;; Hardware stack levels required when called:    4
  6022 ;; This function calls:
  6023 ;;		Nothing
  6024 ;; This function is called by:
  6025 ;;		_FlashReadUart
  6026 ;;		_FLASH_ReadWord
  6027 ;;		_FLASH_WriteByte
  6028 ;; This function uses a non-reentrant model
  6029 ;;
  6030                           
  6031                           	psect	text17
  6032  00448A                     __ptext17:
  6033                           	opt stack 0
  6034  00448A                     _FLASH_ReadByte:
  6035                           	opt stack 23
  6036                           
  6037                           ;memory.c: 60: TBLPTRU = (uint8_t)((flashAddr & 0x00FF0000) >> 16);
  6038                           
  6039                           ;incstack = 0
  6040  00448A  C01A  FFF8         	movff	FLASH_ReadByte@flashAddr+2,tblptru	;volatile
  6041                           
  6042                           ;memory.c: 61: TBLPTRH = (uint8_t)((flashAddr & 0x0000FF00)>> 8);
  6043  00448E  C019  FFF7         	movff	FLASH_ReadByte@flashAddr+1,tblptrh	;volatile
  6044                           
  6045                           ;memory.c: 62: TBLPTRL = (uint8_t)(flashAddr & 0x000000FF);
  6046  004492  C018  FFF6         	movff	FLASH_ReadByte@flashAddr,tblptrl	;volatile
  6047  004496  0008               	tblrd		*	;# 
  6048                           
  6049                           ;memory.c: 66: return (TABLAT);
  6050  004498  50F5               	movf	tablat,w,c	;volatile
  6051  00449A  0012               	return	
  6052  00449C                     __end_of_FLASH_ReadByte:
  6053                           	opt stack 0
  6054                           tosu	equ	0xFFF
  6055                           tosh	equ	0xFFE
  6056                           tosl	equ	0xFFD
  6057                           pclath	equ	0xFFA
  6058                           tblptru	equ	0xFF8
  6059                           tblptrh	equ	0xFF7
  6060                           tblptrl	equ	0xFF6
  6061                           tablat	equ	0xFF5
  6062                           prodh	equ	0xFF4
  6063                           prodl	equ	0xFF3
  6064                           postinc0	equ	0xFEE
  6065                           plusw0	equ	0xFEB
  6066                           wreg	equ	0xFE8
  6067                           postdec1	equ	0xFE5
  6068                           fsr1l	equ	0xFE1
  6069                           indf2	equ	0xFDF
  6070                           postinc2	equ	0xFDE
  6071                           plusw2	equ	0xFDB
  6072                           fsr2h	equ	0xFDA
  6073                           fsr2l	equ	0xFD9
  6074                           status	equ	0xFD8
  6075                           
  6076 ;; *************** function _FlashReadCondition *****************
  6077 ;; Defined at:
  6078 ;;		line 183 in file "FlashApp.c"
  6079 ;; Parameters:    Size  Location     Type
  6080 ;;		None
  6081 ;; Auto vars:     Size  Location     Type
  6082 ;;  TxMsg           9   39[COMRAM] unsigned char [9]
  6083 ;; Return value:  Size  Location     Type
  6084 ;;                  1    wreg      void 
  6085 ;; Registers used:
  6086 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6087 ;; Tracked objects:
  6088 ;;		On entry : 0/0
  6089 ;;		On exit  : 0/0
  6090 ;;		Unchanged: 0/0
  6091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6092 ;;      Params:         0       0       0       0       0       0       0
  6093 ;;      Locals:         9       0       0       0       0       0       0
  6094 ;;      Temps:          4       0       0       0       0       0       0
  6095 ;;      Totals:        13       0       0       0       0       0       0
  6096 ;;Total ram usage:       13 bytes
  6097 ;; Hardware stack levels used:    1
  6098 ;; Hardware stack levels required when called:    6
  6099 ;; This function calls:
  6100 ;;		_WriteUartMessage
  6101 ;;		_ZeroArray
  6102 ;;		_crc8
  6103 ;;		_make8
  6104 ;; This function is called by:
  6105 ;;		_GroupFlashMemory
  6106 ;; This function uses a non-reentrant model
  6107 ;;
  6108                           
  6109                           	psect	text18
  6110  0021AE                     __ptext18:
  6111                           	opt stack 0
  6112  0021AE                     _FlashReadCondition:
  6113                           	opt stack 22
  6114                           
  6115                           ;FlashApp.c: 186: char TxMsg[4 + (0x4) + 1];
  6116                           ;FlashApp.c: 187: ZeroArray(TxMsg, 4 + (0x4) + 1);
  6117                           
  6118                           ;incstack = 0
  6119  0021AE  0E28               	movlw	low FlashReadCondition@TxMsg
  6120  0021B0  6E20               	movwf	ZeroArray@array,c
  6121  0021B2  0E00               	movlw	high FlashReadCondition@TxMsg
  6122  0021B4  6E21               	movwf	ZeroArray@array+1,c
  6123  0021B6  0E00               	movlw	0
  6124  0021B8  6E23               	movwf	ZeroArray@size+1,c
  6125  0021BA  0E09               	movlw	9
  6126  0021BC  6E22               	movwf	ZeroArray@size,c
  6127  0021BE  ECCD  F021         	call	_ZeroArray	;wreg free
  6128                           
  6129                           ;FlashApp.c: 190: TxMsg[(0)] = (0x24);
  6130  0021C2  0E24               	movlw	36
  6131  0021C4  6E28               	movwf	FlashReadCondition@TxMsg,c
  6132                           
  6133                           ;FlashApp.c: 191: TxMsg[(1)] = FLASH_MSG;
  6134  0021C6  0E05               	movlw	5
  6135  0021C8  6E29               	movwf	FlashReadCondition@TxMsg+1,c
  6136                           
  6137                           ;FlashApp.c: 192: TxMsg[(2)] = FLASH_READ_CONDITION;
  6138  0021CA  0E52               	movlw	82
  6139  0021CC  6E2A               	movwf	FlashReadCondition@TxMsg+2,c
  6140                           
  6141                           ;FlashApp.c: 193: TxMsg[(3)] = 4;
  6142  0021CE  0E04               	movlw	4
  6143  0021D0  6E2B               	movwf	FlashReadCondition@TxMsg+3,c
  6144                           
  6145                           ;FlashApp.c: 198: TxMsg[(0x4) + 0] = make8(0x7FF0 - 0x4600,1);
  6146  0021D2  0EF0               	movlw	240
  6147  0021D4  6E18               	movwf	make8@data,c
  6148  0021D6  0E39               	movlw	57
  6149  0021D8  6E19               	movwf	make8@data+1,c
  6150  0021DA  0E00               	movlw	0
  6151  0021DC  6E1A               	movwf	make8@data+2,c
  6152  0021DE  0E00               	movlw	0
  6153  0021E0  6E1B               	movwf	make8@data+3,c
  6154  0021E2  0E01               	movlw	1
  6155  0021E4  6E1C               	movwf	make8@dataLocation,c
  6156  0021E6  ECBF  F01C         	call	_make8	;wreg free
  6157  0021EA  6E2C               	movwf	FlashReadCondition@TxMsg+4,c
  6158                           
  6159                           ;FlashApp.c: 199: TxMsg[(0x4) + 1] = make8(0x7FF0 - 0x4600,0);
  6160  0021EC  0EF0               	movlw	240
  6161  0021EE  6E18               	movwf	make8@data,c
  6162  0021F0  0E39               	movlw	57
  6163  0021F2  6E19               	movwf	make8@data+1,c
  6164  0021F4  0E00               	movlw	0
  6165  0021F6  6E1A               	movwf	make8@data+2,c
  6166  0021F8  0E00               	movlw	0
  6167  0021FA  6E1B               	movwf	make8@data+3,c
  6168  0021FC  0E00               	movlw	0
  6169  0021FE  6E1C               	movwf	make8@dataLocation,c
  6170  002200  ECBF  F01C         	call	_make8	;wreg free
  6171  002204  6E2D               	movwf	FlashReadCondition@TxMsg+5,c
  6172                           
  6173                           ;FlashApp.c: 202: TxMsg[(0x4) + 2] = make8(0x7FF0 - writeAddress,1);
  6174  002206  C040  F024         	movff	_writeAddress,??_FlashReadCondition
  6175  00220A  C041  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  6176  00220E  C042  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  6177  002212  C043  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  6178  002216  1E24               	comf	??_FlashReadCondition,f,c
  6179  002218  1E25               	comf	??_FlashReadCondition+1,f,c
  6180  00221A  1E26               	comf	??_FlashReadCondition+2,f,c
  6181  00221C  1E27               	comf	??_FlashReadCondition+3,f,c
  6182  00221E  2A24               	incf	??_FlashReadCondition,f,c
  6183  002220  0E00               	movlw	0
  6184  002222  2225               	addwfc	??_FlashReadCondition+1,f,c
  6185  002224  2226               	addwfc	??_FlashReadCondition+2,f,c
  6186  002226  2227               	addwfc	??_FlashReadCondition+3,f,c
  6187  002228  0EF0               	movlw	240
  6188  00222A  2424               	addwf	??_FlashReadCondition,w,c
  6189  00222C  6E18               	movwf	make8@data,c
  6190  00222E  0E7F               	movlw	127
  6191  002230  2025               	addwfc	??_FlashReadCondition+1,w,c
  6192  002232  6E19               	movwf	make8@data+1,c
  6193  002234  0E00               	movlw	0
  6194  002236  2026               	addwfc	??_FlashReadCondition+2,w,c
  6195  002238  6E1A               	movwf	make8@data+2,c
  6196  00223A  0E00               	movlw	0
  6197  00223C  2027               	addwfc	??_FlashReadCondition+3,w,c
  6198  00223E  6E1B               	movwf	make8@data+3,c
  6199  002240  0E01               	movlw	1
  6200  002242  6E1C               	movwf	make8@dataLocation,c
  6201  002244  ECBF  F01C         	call	_make8	;wreg free
  6202  002248  6E2E               	movwf	FlashReadCondition@TxMsg+6,c
  6203                           
  6204                           ;FlashApp.c: 203: TxMsg[(0x4) + 3] = make8(0x7FF0 - writeAddress,0);
  6205  00224A  C040  F024         	movff	_writeAddress,??_FlashReadCondition
  6206  00224E  C041  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  6207  002252  C042  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  6208  002256  C043  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  6209  00225A  1E24               	comf	??_FlashReadCondition,f,c
  6210  00225C  1E25               	comf	??_FlashReadCondition+1,f,c
  6211  00225E  1E26               	comf	??_FlashReadCondition+2,f,c
  6212  002260  1E27               	comf	??_FlashReadCondition+3,f,c
  6213  002262  2A24               	incf	??_FlashReadCondition,f,c
  6214  002264  0E00               	movlw	0
  6215  002266  2225               	addwfc	??_FlashReadCondition+1,f,c
  6216  002268  2226               	addwfc	??_FlashReadCondition+2,f,c
  6217  00226A  2227               	addwfc	??_FlashReadCondition+3,f,c
  6218  00226C  0EF0               	movlw	240
  6219  00226E  2424               	addwf	??_FlashReadCondition,w,c
  6220  002270  6E18               	movwf	make8@data,c
  6221  002272  0E7F               	movlw	127
  6222  002274  2025               	addwfc	??_FlashReadCondition+1,w,c
  6223  002276  6E19               	movwf	make8@data+1,c
  6224  002278  0E00               	movlw	0
  6225  00227A  2026               	addwfc	??_FlashReadCondition+2,w,c
  6226  00227C  6E1A               	movwf	make8@data+2,c
  6227  00227E  0E00               	movlw	0
  6228  002280  2027               	addwfc	??_FlashReadCondition+3,w,c
  6229  002282  6E1B               	movwf	make8@data+3,c
  6230  002284  0E00               	movlw	0
  6231  002286  6E1C               	movwf	make8@dataLocation,c
  6232  002288  ECBF  F01C         	call	_make8	;wreg free
  6233  00228C  6E2F               	movwf	FlashReadCondition@TxMsg+7,c
  6234                           
  6235                           ;FlashApp.c: 205: TxMsg[4 + (0x4)] = crc8(TxMsg, 4 + (0x4));
  6236  00228E  0E28               	movlw	low FlashReadCondition@TxMsg
  6237  002290  6E18               	movwf	crc8@dataArray,c
  6238  002292  0E00               	movlw	high FlashReadCondition@TxMsg
  6239  002294  6E19               	movwf	crc8@dataArray+1,c
  6240  002296  0E00               	movlw	0
  6241  002298  6E1B               	movwf	crc8@dataSize+1,c
  6242  00229A  0E08               	movlw	8
  6243  00229C  6E1A               	movwf	crc8@dataSize,c
  6244  00229E  EC46  F01E         	call	_crc8	;wreg free
  6245  0022A2  6E30               	movwf	FlashReadCondition@TxMsg+8,c
  6246                           
  6247                           ;FlashApp.c: 207: WriteUartMessage(TxMsg, 4 + (0x4) + 1);
  6248  0022A4  0E28               	movlw	low FlashReadCondition@TxMsg
  6249  0022A6  6E19               	movwf	WriteUartMessage@dataBuf,c
  6250  0022A8  0E00               	movlw	high FlashReadCondition@TxMsg
  6251  0022AA  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  6252  0022AC  0E00               	movlw	0
  6253  0022AE  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  6254  0022B0  0E09               	movlw	9
  6255  0022B2  6E1B               	movwf	WriteUartMessage@dataSize,c
  6256  0022B4  ECD9  F01F         	call	_WriteUartMessage	;wreg free
  6257  0022B8  0012               	return		;funcret
  6258  0022BA                     __end_of_FlashReadCondition:
  6259                           	opt stack 0
  6260                           tosu	equ	0xFFF
  6261                           tosh	equ	0xFFE
  6262                           tosl	equ	0xFFD
  6263                           pclath	equ	0xFFA
  6264                           tblptru	equ	0xFF8
  6265                           tblptrh	equ	0xFF7
  6266                           tblptrl	equ	0xFF6
  6267                           tablat	equ	0xFF5
  6268                           prodh	equ	0xFF4
  6269                           prodl	equ	0xFF3
  6270                           postinc0	equ	0xFEE
  6271                           plusw0	equ	0xFEB
  6272                           wreg	equ	0xFE8
  6273                           postdec1	equ	0xFE5
  6274                           fsr1l	equ	0xFE1
  6275                           indf2	equ	0xFDF
  6276                           postinc2	equ	0xFDE
  6277                           plusw2	equ	0xFDB
  6278                           fsr2h	equ	0xFDA
  6279                           fsr2l	equ	0xFD9
  6280                           status	equ	0xFD8
  6281                           
  6282 ;; *************** function _FlashEreaseMem *****************
  6283 ;; Defined at:
  6284 ;;		line 173 in file "FlashApp.c"
  6285 ;; Parameters:    Size  Location     Type
  6286 ;;		None
  6287 ;; Auto vars:     Size  Location     Type
  6288 ;;		None
  6289 ;; Return value:  Size  Location     Type
  6290 ;;                  1    wreg      void 
  6291 ;; Registers used:
  6292 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6293 ;; Tracked objects:
  6294 ;;		On entry : 0/0
  6295 ;;		On exit  : 0/0
  6296 ;;		Unchanged: 0/0
  6297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6298 ;;      Params:         0       0       0       0       0       0       0
  6299 ;;      Locals:         0       0       0       0       0       0       0
  6300 ;;      Temps:          0       0       0       0       0       0       0
  6301 ;;      Totals:         0       0       0       0       0       0       0
  6302 ;;Total ram usage:        0 bytes
  6303 ;; Hardware stack levels used:    1
  6304 ;; Hardware stack levels required when called:    7
  6305 ;; This function calls:
  6306 ;;		_SendAckMessage
  6307 ;;		_ZeroArray
  6308 ;; This function is called by:
  6309 ;;		_GroupFlashMemory
  6310 ;; This function uses a non-reentrant model
  6311 ;;
  6312                           
  6313                           	psect	text19
  6314  003BE8                     __ptext19:
  6315                           	opt stack 0
  6316  003BE8                     _FlashEreaseMem:
  6317                           	opt stack 21
  6318                           
  6319                           ;FlashApp.c: 175: writeAddress = 0x4600;
  6320                           
  6321                           ;incstack = 0
  6322  003BE8  0E00               	movlw	0
  6323  003BEA  6E40               	movwf	_writeAddress,c
  6324  003BEC  0E46               	movlw	70
  6325  003BEE  6E41               	movwf	_writeAddress+1,c
  6326  003BF0  0E00               	movlw	0
  6327  003BF2  6E42               	movwf	_writeAddress+2,c
  6328  003BF4  0E00               	movlw	0
  6329  003BF6  6E43               	movwf	_writeAddress+3,c
  6330                           
  6331                           ;FlashApp.c: 176: readAddress = 0x4600;
  6332  003BF8  0E00               	movlw	0
  6333  003BFA  0100               	movlb	0	; () banked
  6334  003BFC  6FF5               	movwf	_readAddress& (0+255),b
  6335  003BFE  0E46               	movlw	70
  6336  003C00  6FF6               	movwf	(_readAddress+1)& (0+255),b
  6337  003C02  0E00               	movlw	0
  6338  003C04  6FF7               	movwf	(_readAddress+2)& (0+255),b
  6339  003C06  0E00               	movlw	0
  6340  003C08  6FF8               	movwf	(_readAddress+3)& (0+255),b
  6341                           
  6342                           ;FlashApp.c: 177: numOfValidateSamples = 0;
  6343  003C0A  0E00               	movlw	0
  6344  003C0C  6E31               	movwf	_numOfValidateSamples,c
  6345  003C0E  0E00               	movlw	0
  6346  003C10  6E32               	movwf	_numOfValidateSamples+1,c
  6347  003C12  0E00               	movlw	0
  6348  003C14  6E33               	movwf	_numOfValidateSamples+2,c
  6349  003C16  0E00               	movlw	0
  6350  003C18  6E34               	movwf	_numOfValidateSamples+3,c
  6351                           
  6352                           ; BSR set to: 0
  6353                           ;FlashApp.c: 178: ZeroArray(sampleArray, (64)/sizeof(adc_result_t));
  6354  003C1A  0E33               	movlw	low _sampleArray
  6355  003C1C  6E20               	movwf	ZeroArray@array,c
  6356  003C1E  0E01               	movlw	high _sampleArray
  6357  003C20  6E21               	movwf	ZeroArray@array+1,c
  6358  003C22  0E00               	movlw	0
  6359  003C24  6E23               	movwf	ZeroArray@size+1,c
  6360  003C26  0E20               	movlw	32
  6361  003C28  6E22               	movwf	ZeroArray@size,c
  6362  003C2A  ECCD  F021         	call	_ZeroArray	;wreg free
  6363                           
  6364                           ;FlashApp.c: 179: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_EREASE_MEMORY
      +                          );
  6365  003C2E  0E51               	movlw	81
  6366  003C30  6E24               	movwf	SendAckMessage@inRequest,c
  6367  003C32  0E05               	movlw	5
  6368  003C34  EC1D  F01E         	call	_SendAckMessage
  6369  003C38  0012               	return		;funcret
  6370  003C3A                     __end_of_FlashEreaseMem:
  6371                           	opt stack 0
  6372                           tosu	equ	0xFFF
  6373                           tosh	equ	0xFFE
  6374                           tosl	equ	0xFFD
  6375                           pclath	equ	0xFFA
  6376                           tblptru	equ	0xFF8
  6377                           tblptrh	equ	0xFF7
  6378                           tblptrl	equ	0xFF6
  6379                           tablat	equ	0xFF5
  6380                           prodh	equ	0xFF4
  6381                           prodl	equ	0xFF3
  6382                           postinc0	equ	0xFEE
  6383                           plusw0	equ	0xFEB
  6384                           wreg	equ	0xFE8
  6385                           postdec1	equ	0xFE5
  6386                           fsr1l	equ	0xFE1
  6387                           indf2	equ	0xFDF
  6388                           postinc2	equ	0xFDE
  6389                           plusw2	equ	0xFDB
  6390                           fsr2h	equ	0xFDA
  6391                           fsr2l	equ	0xFD9
  6392                           status	equ	0xFD8
  6393                           
  6394 ;; *************** function _DacSetValue *****************
  6395 ;; Defined at:
  6396 ;;		line 30 in file "DacApp.c"
  6397 ;; Parameters:    Size  Location     Type
  6398 ;;  data            2   42[BANK0 ] PTR unsigned char 
  6399 ;;		 -> rxMsgData(20), 
  6400 ;; Auto vars:     Size  Location     Type
  6401 ;;  retVal          8   49[BANK0 ] struct .
  6402 ;;  dacIndex        1   48[BANK0 ] char 
  6403 ;; Return value:  Size  Location     Type
  6404 ;;                  1    wreg      void 
  6405 ;; Registers used:
  6406 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6407 ;; Tracked objects:
  6408 ;;		On entry : 0/0
  6409 ;;		On exit  : 0/0
  6410 ;;		Unchanged: 0/0
  6411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6412 ;;      Params:         0       2       0       0       0       0       0
  6413 ;;      Locals:         0       9       0       0       0       0       0
  6414 ;;      Temps:          0       4       0       0       0       0       0
  6415 ;;      Totals:         0      15       0       0       0       0       0
  6416 ;;Total ram usage:       15 bytes
  6417 ;; Hardware stack levels used:    1
  6418 ;; Hardware stack levels required when called:    8
  6419 ;; This function calls:
  6420 ;;		_GetIntFromUartData
  6421 ;;		_SWSPI_send_word
  6422 ;;		_SendAckMessage
  6423 ;;		_StoreIntInEeprom
  6424 ;; This function is called by:
  6425 ;;		_GroupDAC
  6426 ;; This function uses a non-reentrant model
  6427 ;;
  6428                           
  6429                           	psect	text20
  6430  003274                     __ptext20:
  6431                           	opt stack 0
  6432  003274                     _DacSetValue:
  6433                           	opt stack 20
  6434                           
  6435                           ;DacApp.c: 32: INT_VAL retVal;
  6436                           ;DacApp.c: 33: retVal = GetIntFromUartData(16, data);
  6437                           
  6438                           ;incstack = 0
  6439  003274  C08A  F066         	movff	DacSetValue@data,GetIntFromUartData@data
  6440  003278  C08B  F067         	movff	DacSetValue@data+1,GetIntFromUartData@data+1
  6441  00327C  0E10               	movlw	16
  6442  00327E  ECF1  F00E         	call	_GetIntFromUartData
  6443  003282  EE20  F091         	lfsr	2,DacSetValue@retVal
  6444  003286  0E07               	movlw	7
  6445  003288                     u8931:
  6446  003288  CFEB FFDB          	movff	plusw0,plusw2
  6447  00328C  06E8               	decf	wreg,f,c
  6448  00328E  E2FC               	bc	u8931
  6449                           
  6450                           ;DacApp.c: 34: SWSPI_send_word(EXT_DAC, retVal.num, 1);
  6451  003290  C091  F029         	movff	DacSetValue@retVal,SWSPI_send_word@data
  6452  003294  C092  F02A         	movff	DacSetValue@retVal+1,SWSPI_send_word@data+1
  6453  003298  C093  F02B         	movff	DacSetValue@retVal+2,SWSPI_send_word@data+2
  6454  00329C  C094  F02C         	movff	DacSetValue@retVal+3,SWSPI_send_word@data+3
  6455  0032A0  0E01               	movlw	1
  6456  0032A2  6E2D               	movwf	SWSPI_send_word@dataSize,c
  6457  0032A4  0E02               	movlw	2
  6458  0032A6  EC96  F018         	call	_SWSPI_send_word
  6459                           
  6460                           ;DacApp.c: 37: int8_t dacIndex = (retVal.num >> 14);
  6461  0032AA  C091  F08C         	movff	DacSetValue@retVal,??_DacSetValue
  6462  0032AE  C092  F08D         	movff	DacSetValue@retVal+1,??_DacSetValue+1
  6463  0032B2  C093  F08E         	movff	DacSetValue@retVal+2,??_DacSetValue+2
  6464  0032B6  C094  F08F         	movff	DacSetValue@retVal+3,??_DacSetValue+3
  6465  0032BA  0E0F               	movlw	15
  6466  0032BC  D006               	goto	u8940
  6467  0032BE                     u8945:
  6468  0032BE  0100               	movlb	0	; () banked
  6469  0032C0  90D8               	bcf	status,0,c
  6470  0032C2  338F               	rrcf	(??_DacSetValue+3)& (0+255),f,b
  6471  0032C4  338E               	rrcf	(??_DacSetValue+2)& (0+255),f,b
  6472  0032C6  338D               	rrcf	(??_DacSetValue+1)& (0+255),f,b
  6473  0032C8  338C               	rrcf	??_DacSetValue& (0+255),f,b
  6474  0032CA                     u8940:
  6475  0032CA  2EE8               	decfsz	wreg,f,c
  6476  0032CC  D7F8               	goto	u8945
  6477  0032CE  518C               	movf	??_DacSetValue& (0+255),w,b
  6478  0032D0  6F90               	movwf	DacSetValue@dacIndex& (0+255),b
  6479                           
  6480                           ; BSR set to: 0
  6481                           ;DacApp.c: 38: StoreIntInEeprom(retVal.num, (0x40) | DAC_ADDRES[dacIndex], 2);
  6482  0032D2  C091  F021         	movff	DacSetValue@retVal,StoreIntInEeprom@data
  6483  0032D6  C092  F022         	movff	DacSetValue@retVal+1,StoreIntInEeprom@data+1
  6484  0032DA  C093  F023         	movff	DacSetValue@retVal+2,StoreIntInEeprom@data+2
  6485  0032DE  C094  F024         	movff	DacSetValue@retVal+3,StoreIntInEeprom@data+3
  6486  0032E2  5190               	movf	DacSetValue@dacIndex& (0+255),w,b
  6487  0032E4  0D01               	mullw	1
  6488  0032E6  0E53               	movlw	low _DAC_ADDRES
  6489  0032E8  24F3               	addwf	prodl,w,c
  6490  0032EA  6EF6               	movwf	tblptrl,c
  6491  0032EC  0E06               	movlw	high _DAC_ADDRES
  6492  0032EE  20F4               	addwfc	prodh,w,c
  6493  0032F0  6EF7               	movwf	tblptrh,c
  6494  0032F2                     	if	0	;There are less than 3 active tblptr bytes
  6495  0032F2                     	endif
  6496  0032F2  0008               	tblrd		*
  6497  0032F4  50F5               	movf	tablat,w,c
  6498  0032F6  0940               	iorlw	64
  6499  0032F8  6E25               	movwf	StoreIntInEeprom@address,c
  6500  0032FA  0E00               	movlw	0
  6501  0032FC  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  6502  0032FE  0E02               	movlw	2
  6503  003300  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  6504  003302  EC85  F01F         	call	_StoreIntInEeprom	;wreg free
  6505                           
  6506                           ;DacApp.c: 41: SendAckMessage((MSG_GROUPS)DAC_MSG, (MSG_REQUEST)DAC_SET_VALUE);
  6507  003306  0E61               	movlw	97
  6508  003308  6E24               	movwf	SendAckMessage@inRequest,c
  6509  00330A  0E06               	movlw	6
  6510  00330C  EC1D  F01E         	call	_SendAckMessage
  6511  003310  0012               	return		;funcret
  6512  003312                     __end_of_DacSetValue:
  6513                           	opt stack 0
  6514                           tosu	equ	0xFFF
  6515                           tosh	equ	0xFFE
  6516                           tosl	equ	0xFFD
  6517                           pclath	equ	0xFFA
  6518                           tblptru	equ	0xFF8
  6519                           tblptrh	equ	0xFF7
  6520                           tblptrl	equ	0xFF6
  6521                           tablat	equ	0xFF5
  6522                           prodh	equ	0xFF4
  6523                           prodl	equ	0xFF3
  6524                           postinc0	equ	0xFEE
  6525                           plusw0	equ	0xFEB
  6526                           wreg	equ	0xFE8
  6527                           postdec1	equ	0xFE5
  6528                           fsr1l	equ	0xFE1
  6529                           indf2	equ	0xFDF
  6530                           postinc2	equ	0xFDE
  6531                           plusw2	equ	0xFDB
  6532                           fsr2h	equ	0xFDA
  6533                           fsr2l	equ	0xFD9
  6534                           status	equ	0xFD8
  6535                           
  6536 ;; *************** function _GetIntFromUartData *****************
  6537 ;; Defined at:
  6538 ;;		line 51 in file "SystemCommon.c"
  6539 ;; Parameters:    Size  Location     Type
  6540 ;;  num             1    wreg     char 
  6541 ;;  data            2    6[BANK0 ] PTR unsigned char 
  6542 ;;		 -> rxMsgData(20), 
  6543 ;; Auto vars:     Size  Location     Type
  6544 ;;  num             1   26[BANK0 ] char 
  6545 ;;  idxCon          2   36[BANK0 ] int 
  6546 ;;  dataRegArr     10   16[BANK0 ] unsigned char [10]
  6547 ;;  retVal          8   28[BANK0 ] struct .
  6548 ;;  idxData         1   38[BANK0 ] unsigned char 
  6549 ;;  recVal          1   27[BANK0 ] unsigned char 
  6550 ;; Return value:  Size  Location     Type
  6551 ;;                  8    6[BANK0 ] struct .
  6552 ;; Registers used:
  6553 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6554 ;; Tracked objects:
  6555 ;;		On entry : 0/0
  6556 ;;		On exit  : 0/0
  6557 ;;		Unchanged: 0/0
  6558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6559 ;;      Params:         0       8       0       0       0       0       0
  6560 ;;      Locals:         0      23       0       0       0       0       0
  6561 ;;      Temps:          0       2       0       0       0       0       0
  6562 ;;      Totals:         0      33       0       0       0       0       0
  6563 ;;Total ram usage:       33 bytes
  6564 ;; Hardware stack levels used:    1
  6565 ;; Hardware stack levels required when called:    7
  6566 ;; This function calls:
  6567 ;;		_ZeroArray
  6568 ;;		_strtol
  6569 ;; This function is called by:
  6570 ;;		_FlashReadUart
  6571 ;;		_DacSetValue
  6572 ;;		_UpdateSynthFreq
  6573 ;; This function uses a non-reentrant model
  6574 ;;
  6575                           
  6576                           	psect	text21
  6577  001DE2                     __ptext21:
  6578                           	opt stack 0
  6579  001DE2                     _GetIntFromUartData:
  6580                           	opt stack 20
  6581                           
  6582                           ;incstack = 0
  6583                           ;GetIntFromUartData@num stored from wreg
  6584  001DE2  0100               	movlb	0	; () banked
  6585  001DE4  6F7A               	movwf	GetIntFromUartData@num& (0+255),b
  6586                           
  6587                           ;SystemCommon.c: 53: INT_VAL retVal;
  6588                           ;SystemCommon.c: 54: retVal.num = 0;
  6589  001DE6  0E00               	movlw	0
  6590  001DE8  0100               	movlb	0	; () banked
  6591  001DEA  6F7C               	movwf	GetIntFromUartData@retVal& (0+255),b
  6592  001DEC  0E00               	movlw	0
  6593  001DEE  6F7D               	movwf	(GetIntFromUartData@retVal+1)& (0+255),b
  6594  001DF0  0E00               	movlw	0
  6595  001DF2  6F7E               	movwf	(GetIntFromUartData@retVal+2)& (0+255),b
  6596  001DF4  0E00               	movlw	0
  6597  001DF6  6F7F               	movwf	(GetIntFromUartData@retVal+3)& (0+255),b
  6598                           
  6599                           ;SystemCommon.c: 55: retVal.con = 0;
  6600  001DF8  0E00               	movlw	0
  6601  001DFA  6F80               	movwf	(GetIntFromUartData@retVal+4)& (0+255),b
  6602  001DFC  0E00               	movlw	0
  6603  001DFE  6F81               	movwf	(GetIntFromUartData@retVal+5)& (0+255),b
  6604  001E00  0E00               	movlw	0
  6605  001E02  6F82               	movwf	(GetIntFromUartData@retVal+6)& (0+255),b
  6606  001E04  0E00               	movlw	0
  6607  001E06  6F83               	movwf	(GetIntFromUartData@retVal+7)& (0+255),b
  6608                           
  6609                           ;SystemCommon.c: 56: uint8_t idxData = 0;
  6610  001E08  0E00               	movlw	0
  6611  001E0A  6F86               	movwf	GetIntFromUartData@idxData& (0+255),b
  6612                           
  6613                           ;SystemCommon.c: 57: char recVal = (0);
  6614  001E0C  0E00               	movlw	0
  6615  001E0E  6F7B               	movwf	GetIntFromUartData@recVal& (0+255),b
  6616                           
  6617                           ; BSR set to: 0
  6618                           ;SystemCommon.c: 59: char dataRegArr[0xA];
  6619                           ;SystemCommon.c: 60: ZeroArray(dataRegArr, 0xA);
  6620  001E10  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6621  001E12  6E20               	movwf	ZeroArray@array,c
  6622  001E14  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6623  001E16  6E21               	movwf	ZeroArray@array+1,c
  6624  001E18  0E00               	movlw	0
  6625  001E1A  6E23               	movwf	ZeroArray@size+1,c
  6626  001E1C  0E0A               	movlw	10
  6627  001E1E  6E22               	movwf	ZeroArray@size,c
  6628  001E20  ECCD  F021         	call	_ZeroArray	;wreg free
  6629                           
  6630                           ;SystemCommon.c: 62: for(idxData = 0; idxData < 0xA; idxData++)
  6631  001E24  0E00               	movlw	0
  6632  001E26  0100               	movlb	0	; () banked
  6633  001E28  6F86               	movwf	GetIntFromUartData@idxData& (0+255),b
  6634  001E2A                     l8080:
  6635                           
  6636                           ; BSR set to: 0
  6637  001E2A  0E09               	movlw	9
  6638  001E2C  6586               	cpfsgt	GetIntFromUartData@idxData& (0+255),b
  6639  001E2E  D001               	goto	l1419
  6640  001E30  D01D               	goto	u8360
  6641  001E32                     l1419:
  6642                           
  6643                           ; BSR set to: 0
  6644                           ;SystemCommon.c: 63: {
  6645                           ;SystemCommon.c: 64: recVal = data[idxData];
  6646                           
  6647                           ; BSR set to: 0
  6648  001E32  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  6649  001E34  0D01               	mullw	1
  6650  001E36  50F3               	movf	prodl,w,c
  6651  001E38  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  6652  001E3A  6ED9               	movwf	fsr2l,c
  6653  001E3C  50F4               	movf	prodh,w,c
  6654  001E3E  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  6655  001E40  6EDA               	movwf	fsr2h,c
  6656  001E42  50DF               	movf	indf2,w,c
  6657  001E44  6F7B               	movwf	GetIntFromUartData@recVal& (0+255),b
  6658                           
  6659                           ; BSR set to: 0
  6660                           ;SystemCommon.c: 65: if(recVal == 0x10)
  6661  001E46  0E10               	movlw	16
  6662  001E48  197B               	xorwf	GetIntFromUartData@recVal& (0+255),w,b
  6663  001E4A  A4D8               	btfss	status,2,c
  6664  001E4C  D002               	goto	l1421
  6665                           
  6666                           ; BSR set to: 0
  6667                           ;SystemCommon.c: 66: {
  6668                           ;SystemCommon.c: 67: idxData++;
  6669  001E4E  2B86               	incf	GetIntFromUartData@idxData& (0+255),f,b
  6670                           
  6671                           ;SystemCommon.c: 68: break;
  6672  001E50  D00D               	goto	u8360
  6673  001E52                     l1421:
  6674                           
  6675                           ; BSR set to: 0
  6676                           ;SystemCommon.c: 70: else
  6677                           ;SystemCommon.c: 71: {
  6678                           ;SystemCommon.c: 72: dataRegArr[idxData] = recVal + '0';
  6679                           
  6680                           ; BSR set to: 0
  6681  001E52  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  6682  001E54  0D01               	mullw	1
  6683  001E56  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6684  001E58  24F3               	addwf	prodl,w,c
  6685  001E5A  6ED9               	movwf	fsr2l,c
  6686  001E5C  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6687  001E5E  20F4               	addwfc	prodh,w,c
  6688  001E60  6EDA               	movwf	fsr2h,c
  6689  001E62  517B               	movf	GetIntFromUartData@recVal& (0+255),w,b
  6690  001E64  0F30               	addlw	48
  6691  001E66  6EDF               	movwf	indf2,c
  6692                           
  6693                           ; BSR set to: 0
  6694                           
  6695                           ; BSR set to: 0
  6696  001E68  2B86               	incf	GetIntFromUartData@idxData& (0+255),f,b
  6697  001E6A  D7DF               	goto	l8080
  6698  001E6C                     u8360:
  6699                           
  6700                           ; BSR set to: 0
  6701                           ;SystemCommon.c: 73: }
  6702                           ;SystemCommon.c: 74: }
  6703                           ;SystemCommon.c: 75: retVal.num = strtol(dataRegArr, (0), num);
  6704                           
  6705                           ; BSR set to: 0
  6706  001E6C  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6707  001E6E  6E26               	movwf	strtol@s,c
  6708  001E70  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6709  001E72  6E27               	movwf	strtol@s+1,c
  6710  001E74  0E00               	movlw	0
  6711  001E76  6E28               	movwf	strtol@endptr,c
  6712  001E78  0E00               	movlw	0
  6713  001E7A  6E29               	movwf	strtol@endptr+1,c
  6714  001E7C  517A               	movf	GetIntFromUartData@num& (0+255),w,b
  6715  001E7E  6E2A               	movwf	strtol@base,c
  6716  001E80  6A2B               	clrf	strtol@base+1,c
  6717  001E82  BE2A               	btfsc	strtol@base,7,c
  6718  001E84  062B               	decf	strtol@base+1,f,c
  6719  001E86  EC6F  F00C         	call	_strtol	;wreg free
  6720  001E8A  C026  F07C         	movff	?_strtol,GetIntFromUartData@retVal
  6721  001E8E  C027  F07D         	movff	?_strtol+1,GetIntFromUartData@retVal+1
  6722  001E92  C028  F07E         	movff	?_strtol+2,GetIntFromUartData@retVal+2
  6723  001E96  C029  F07F         	movff	?_strtol+3,GetIntFromUartData@retVal+3
  6724                           
  6725                           ;SystemCommon.c: 77: ZeroArray(dataRegArr, 0xA);
  6726  001E9A  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6727  001E9C  6E20               	movwf	ZeroArray@array,c
  6728  001E9E  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6729  001EA0  6E21               	movwf	ZeroArray@array+1,c
  6730  001EA2  0E00               	movlw	0
  6731  001EA4  6E23               	movwf	ZeroArray@size+1,c
  6732  001EA6  0E0A               	movlw	10
  6733  001EA8  6E22               	movwf	ZeroArray@size,c
  6734  001EAA  ECCD  F021         	call	_ZeroArray	;wreg free
  6735                           
  6736                           ;SystemCommon.c: 79: for(int idxCon = 0; idxCon < 0xA; idxCon++)
  6737  001EAE  0E00               	movlw	0
  6738  001EB0  0100               	movlb	0	; () banked
  6739  001EB2  6F85               	movwf	(GetIntFromUartData@idxCon+1)& (0+255),b
  6740  001EB4  0E00               	movlw	0
  6741  001EB6  6F84               	movwf	GetIntFromUartData@idxCon& (0+255),b
  6742  001EB8                     l8102:
  6743                           
  6744                           ; BSR set to: 0
  6745  001EB8  BF85               	btfsc	(GetIntFromUartData@idxCon+1)& (0+255),7,b
  6746  001EBA  D006               	goto	l1423
  6747  001EBC  5185               	movf	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  6748  001EBE  E12E               	bnz	l8120
  6749  001EC0  0E0A               	movlw	10
  6750  001EC2  5D84               	subwf	GetIntFromUartData@idxCon& (0+255),w,b
  6751  001EC4  B0D8               	btfsc	status,0,c
  6752  001EC6  D02A               	goto	u8390
  6753  001EC8                     l1423:
  6754                           
  6755                           ; BSR set to: 0
  6756                           ;SystemCommon.c: 80: {
  6757                           ;SystemCommon.c: 81: recVal = data[idxData + idxCon];
  6758                           
  6759                           ; BSR set to: 0
  6760  001EC8  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  6761  001ECA  2584               	addwf	GetIntFromUartData@idxCon& (0+255),w,b
  6762  001ECC  6F6E               	movwf	??_GetIntFromUartData& (0+255),b
  6763  001ECE  0E00               	movlw	0
  6764  001ED0  2185               	addwfc	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  6765  001ED2  6F6F               	movwf	(??_GetIntFromUartData+1)& (0+255),b
  6766  001ED4  516E               	movf	??_GetIntFromUartData& (0+255),w,b
  6767  001ED6  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  6768  001ED8  6ED9               	movwf	fsr2l,c
  6769  001EDA  516F               	movf	(??_GetIntFromUartData+1)& (0+255),w,b
  6770  001EDC  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  6771  001EDE  6EDA               	movwf	fsr2h,c
  6772  001EE0  50DF               	movf	indf2,w,c
  6773  001EE2  6F7B               	movwf	GetIntFromUartData@recVal& (0+255),b
  6774                           
  6775                           ; BSR set to: 0
  6776                           ;SystemCommon.c: 82: if(recVal == 0x23)
  6777  001EE4  0E23               	movlw	35
  6778  001EE6  197B               	xorwf	GetIntFromUartData@recVal& (0+255),w,b
  6779  001EE8  B4D8               	btfsc	status,2,c
  6780  001EEA  D018               	goto	u8390
  6781                           
  6782                           ; BSR set to: 0
  6783                           ;SystemCommon.c: 86: else
  6784                           ;SystemCommon.c: 87: {
  6785                           ;SystemCommon.c: 88: dataRegArr[idxCon] = data[idxCon + idxData] + '0';
  6786                           
  6787                           ; BSR set to: 0
  6788                           
  6789                           ; BSR set to: 0
  6790                           ;SystemCommon.c: 85: }
  6791                           
  6792                           ; BSR set to: 0
  6793                           ;SystemCommon.c: 83: {
  6794                           ;SystemCommon.c: 84: break;
  6795  001EEC  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6796  001EEE  2584               	addwf	GetIntFromUartData@idxCon& (0+255),w,b
  6797  001EF0  6ED9               	movwf	fsr2l,c
  6798  001EF2  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6799  001EF4  2185               	addwfc	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  6800  001EF6  6EDA               	movwf	fsr2h,c
  6801  001EF8  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  6802  001EFA  2584               	addwf	GetIntFromUartData@idxCon& (0+255),w,b
  6803  001EFC  6F6E               	movwf	??_GetIntFromUartData& (0+255),b
  6804  001EFE  0E00               	movlw	0
  6805  001F00  2185               	addwfc	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  6806  001F02  6F6F               	movwf	(??_GetIntFromUartData+1)& (0+255),b
  6807  001F04  516E               	movf	??_GetIntFromUartData& (0+255),w,b
  6808  001F06  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  6809  001F08  6EE1               	movwf	fsr1l,c
  6810  001F0A  516F               	movf	(??_GetIntFromUartData+1)& (0+255),w,b
  6811  001F0C  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  6812  001F0E  6EE2               	movwf	fsr1h,c
  6813  001F10  50E7               	movf	indf1,w,c
  6814  001F12  0F30               	addlw	48
  6815  001F14  6EDF               	movwf	indf2,c
  6816                           
  6817                           ; BSR set to: 0
  6818                           
  6819                           ; BSR set to: 0
  6820  001F16  4B84               	infsnz	GetIntFromUartData@idxCon& (0+255),f,b
  6821  001F18  2B85               	incf	(GetIntFromUartData@idxCon+1)& (0+255),f,b
  6822  001F1A  D7CE               	goto	l8102
  6823  001F1C                     u8390:
  6824  001F1C                     l8120:
  6825                           
  6826                           ; BSR set to: 0
  6827                           ;SystemCommon.c: 89: }
  6828                           ;SystemCommon.c: 90: }
  6829                           ;SystemCommon.c: 91: retVal.con = strtol(dataRegArr, (0), num);
  6830  001F1C  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6831  001F1E  6E26               	movwf	strtol@s,c
  6832  001F20  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6833  001F22  6E27               	movwf	strtol@s+1,c
  6834  001F24  0E00               	movlw	0
  6835  001F26  6E28               	movwf	strtol@endptr,c
  6836  001F28  0E00               	movlw	0
  6837  001F2A  6E29               	movwf	strtol@endptr+1,c
  6838  001F2C  517A               	movf	GetIntFromUartData@num& (0+255),w,b
  6839  001F2E  6E2A               	movwf	strtol@base,c
  6840  001F30  6A2B               	clrf	strtol@base+1,c
  6841  001F32  BE2A               	btfsc	strtol@base,7,c
  6842  001F34  062B               	decf	strtol@base+1,f,c
  6843  001F36  EC6F  F00C         	call	_strtol	;wreg free
  6844  001F3A  C026  F080         	movff	?_strtol,GetIntFromUartData@retVal+4
  6845  001F3E  C027  F081         	movff	?_strtol+1,GetIntFromUartData@retVal+5
  6846  001F42  C028  F082         	movff	?_strtol+2,GetIntFromUartData@retVal+6
  6847  001F46  C029  F083         	movff	?_strtol+3,GetIntFromUartData@retVal+7
  6848                           
  6849                           ;SystemCommon.c: 93: return retVal;
  6850  001F4A  EE20  F07C         	lfsr	2,GetIntFromUartData@retVal
  6851  001F4E  EE00  F066         	lfsr	0,?_GetIntFromUartData
  6852  001F52  0E07               	movlw	7
  6853  001F54                     u8401:
  6854  001F54  CFDB FFEB          	movff	plusw2,plusw0
  6855  001F58  06E8               	decf	wreg,f,c
  6856  001F5A  E2FC               	bc	u8401
  6857  001F5C  0012               	return	
  6858  001F5E                     __end_of_GetIntFromUartData:
  6859                           	opt stack 0
  6860                           tosu	equ	0xFFF
  6861                           tosh	equ	0xFFE
  6862                           tosl	equ	0xFFD
  6863                           pclath	equ	0xFFA
  6864                           tblptru	equ	0xFF8
  6865                           tblptrh	equ	0xFF7
  6866                           tblptrl	equ	0xFF6
  6867                           tablat	equ	0xFF5
  6868                           prodh	equ	0xFF4
  6869                           prodl	equ	0xFF3
  6870                           postinc0	equ	0xFEE
  6871                           plusw0	equ	0xFEB
  6872                           wreg	equ	0xFE8
  6873                           indf1	equ	0xFE7
  6874                           postdec1	equ	0xFE5
  6875                           fsr1h	equ	0xFE2
  6876                           fsr1l	equ	0xFE1
  6877                           indf2	equ	0xFDF
  6878                           postinc2	equ	0xFDE
  6879                           plusw2	equ	0xFDB
  6880                           fsr2h	equ	0xFDA
  6881                           fsr2l	equ	0xFD9
  6882                           status	equ	0xFD8
  6883                           
  6884 ;; *************** function _strtol *****************
  6885 ;; Defined at:
  6886 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strtol.c"
  6887 ;; Parameters:    Size  Location     Type
  6888 ;;  s               2   37[COMRAM] PTR const unsigned char 
  6889 ;;		 -> GetIntFromUartData@dataRegArr(10), 
  6890 ;;  endptr          2   39[COMRAM] PTR PTR unsigned char 
  6891 ;;		 -> NULL(0), 
  6892 ;;  base            2   41[COMRAM] int 
  6893 ;; Auto vars:     Size  Location     Type
  6894 ;;  a               4    1[BANK0 ] long 
  6895 ;;  c               1    5[BANK0 ] unsigned char 
  6896 ;;  sign            1    0[BANK0 ] unsigned char 
  6897 ;; Return value:  Size  Location     Type
  6898 ;;                  4   37[COMRAM] long 
  6899 ;; Registers used:
  6900 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6901 ;; Tracked objects:
  6902 ;;		On entry : 0/0
  6903 ;;		On exit  : 0/0
  6904 ;;		Unchanged: 0/0
  6905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6906 ;;      Params:         6       0       0       0       0       0       0
  6907 ;;      Locals:         0       6       0       0       0       0       0
  6908 ;;      Temps:          4       0       0       0       0       0       0
  6909 ;;      Totals:        10       6       0       0       0       0       0
  6910 ;;Total ram usage:       16 bytes
  6911 ;; Hardware stack levels used:    1
  6912 ;; Hardware stack levels required when called:    6
  6913 ;; This function calls:
  6914 ;;		___lmul
  6915 ;;		_isalpha
  6916 ;;		_isdigit
  6917 ;;		_isspace
  6918 ;;		_toupper
  6919 ;; This function is called by:
  6920 ;;		_GetIntFromUartData
  6921 ;; This function uses a non-reentrant model
  6922 ;;
  6923                           
  6924                           	psect	text22
  6925  0018DE                     __ptext22:
  6926                           	opt stack 0
  6927  0018DE                     _strtol:
  6928                           	opt stack 20
  6929                           
  6930                           ;incstack = 0
  6931  0018DE  C026  FFD9         	movff	strtol@s,fsr2l
  6932  0018E2  C027  FFDA         	movff	strtol@s+1,fsr2h
  6933  0018E6  50DF               	movf	indf2,w,c
  6934  0018E8  0100               	movlb	0	; () banked
  6935  0018EA  6F65               	movwf	strtol@c& (0+255),b
  6936                           
  6937                           ; BSR set to: 0
  6938  0018EC  4A26               	infsnz	strtol@s,f,c
  6939  0018EE  2A27               	incf	strtol@s+1,f,c
  6940                           
  6941                           ; BSR set to: 0
  6942  0018F0  5165               	movf	strtol@c& (0+255),w,b
  6943  0018F2  EC0E  F021         	call	_isspace
  6944  0018F6  B0D8               	btfsc	status,0,c
  6945  0018F8  D7F2               	goto	_strtol
  6946  0018FA  0E00               	movlw	0
  6947  0018FC  0100               	movlb	0	; () banked
  6948  0018FE  6F61               	movwf	strtol@a& (0+255),b
  6949  001900  0E00               	movlw	0
  6950  001902  6F62               	movwf	(strtol@a+1)& (0+255),b
  6951  001904  0E00               	movlw	0
  6952  001906  6F63               	movwf	(strtol@a+2)& (0+255),b
  6953  001908  0E00               	movlw	0
  6954  00190A  6F64               	movwf	(strtol@a+3)& (0+255),b
  6955  00190C  0E00               	movlw	0
  6956  00190E  6F60               	movwf	strtol@sign& (0+255),b
  6957                           
  6958                           ; BSR set to: 0
  6959  001910  0E2D               	movlw	45
  6960  001912  1965               	xorwf	strtol@c& (0+255),w,b
  6961  001914  A4D8               	btfss	status,2,c
  6962  001916  D003               	goto	l2190
  6963                           
  6964                           ; BSR set to: 0
  6965  001918  0E01               	movlw	1
  6966  00191A  6F60               	movwf	strtol@sign& (0+255),b
  6967  00191C  D004               	goto	u8190
  6968  00191E                     l2190:
  6969                           
  6970                           ; BSR set to: 0
  6971                           
  6972                           ; BSR set to: 0
  6973  00191E  0E2B               	movlw	43
  6974  001920  1965               	xorwf	strtol@c& (0+255),w,b
  6975  001922  A4D8               	btfss	status,2,c
  6976  001924  D008               	goto	l2192
  6977  001926                     u8190:
  6978                           
  6979                           ; BSR set to: 0
  6980  001926  C026  FFD9         	movff	strtol@s,fsr2l
  6981  00192A  C027  FFDA         	movff	strtol@s+1,fsr2h
  6982  00192E  50DF               	movf	indf2,w,c
  6983  001930  6F65               	movwf	strtol@c& (0+255),b
  6984                           
  6985                           ; BSR set to: 0
  6986  001932  4A26               	infsnz	strtol@s,f,c
  6987  001934  2A27               	incf	strtol@s+1,f,c
  6988  001936                     l2192:
  6989                           
  6990                           ; BSR set to: 0
  6991                           
  6992                           ; BSR set to: 0
  6993                           
  6994                           ; BSR set to: 0
  6995  001936  0E30               	movlw	48
  6996  001938  1965               	xorwf	strtol@c& (0+255),w,b
  6997  00193A  A4D8               	btfss	status,2,c
  6998  00193C  D02E               	goto	l2200
  6999                           
  7000                           ; BSR set to: 0
  7001  00193E  C026  FFD9         	movff	strtol@s,fsr2l
  7002  001942  C027  FFDA         	movff	strtol@s+1,fsr2h
  7003  001946  50DF               	movf	indf2,w,c
  7004  001948  6F65               	movwf	strtol@c& (0+255),b
  7005                           
  7006                           ; BSR set to: 0
  7007  00194A  4A26               	infsnz	strtol@s,f,c
  7008  00194C  2A27               	incf	strtol@s+1,f,c
  7009                           
  7010                           ; BSR set to: 0
  7011  00194E  502A               	movf	strtol@base,w,c
  7012  001950  102B               	iorwf	strtol@base+1,w,c
  7013  001952  B4D8               	btfsc	status,2,c
  7014  001954  D005               	goto	u8220
  7015                           
  7016                           ; BSR set to: 0
  7017  001956  0E10               	movlw	16
  7018  001958  182A               	xorwf	strtol@base,w,c
  7019  00195A  102B               	iorwf	strtol@base+1,w,c
  7020  00195C  A4D8               	btfss	status,2,c
  7021  00195E  D015               	goto	l2194
  7022  001960                     u8220:
  7023                           
  7024                           ; BSR set to: 0
  7025                           
  7026                           ; BSR set to: 0
  7027  001960  0E78               	movlw	120
  7028  001962  1965               	xorwf	strtol@c& (0+255),w,b
  7029  001964  B4D8               	btfsc	status,2,c
  7030  001966  D004               	goto	u8240
  7031                           
  7032                           ; BSR set to: 0
  7033  001968  0E58               	movlw	88
  7034  00196A  1965               	xorwf	strtol@c& (0+255),w,b
  7035  00196C  A4D8               	btfss	status,2,c
  7036  00196E  D00D               	goto	l2194
  7037  001970                     u8240:
  7038                           
  7039                           ; BSR set to: 0
  7040                           
  7041                           ; BSR set to: 0
  7042  001970  0E00               	movlw	0
  7043  001972  6E2B               	movwf	strtol@base+1,c
  7044  001974  0E10               	movlw	16
  7045  001976  6E2A               	movwf	strtol@base,c
  7046                           
  7047                           ; BSR set to: 0
  7048  001978  C026  FFD9         	movff	strtol@s,fsr2l
  7049  00197C  C027  FFDA         	movff	strtol@s+1,fsr2h
  7050  001980  50DF               	movf	indf2,w,c
  7051  001982  6F65               	movwf	strtol@c& (0+255),b
  7052                           
  7053                           ; BSR set to: 0
  7054  001984  4A26               	infsnz	strtol@s,f,c
  7055  001986  2A27               	incf	strtol@s+1,f,c
  7056  001988  D008               	goto	l2200
  7057  00198A                     l2194:
  7058                           
  7059                           ; BSR set to: 0
  7060                           
  7061                           ; BSR set to: 0
  7062  00198A  502A               	movf	strtol@base,w,c
  7063  00198C  102B               	iorwf	strtol@base+1,w,c
  7064  00198E  A4D8               	btfss	status,2,c
  7065  001990  D004               	goto	l2200
  7066                           
  7067                           ; BSR set to: 0
  7068  001992  0E00               	movlw	0
  7069  001994  6E2B               	movwf	strtol@base+1,c
  7070  001996  0E08               	movlw	8
  7071  001998  6E2A               	movwf	strtol@base,c
  7072  00199A                     l2200:
  7073                           
  7074                           ; BSR set to: 0
  7075                           
  7076                           ; BSR set to: 0
  7077                           
  7078                           ; BSR set to: 0
  7079                           
  7080                           ; BSR set to: 0
  7081  00199A  502A               	movf	strtol@base,w,c
  7082  00199C  102B               	iorwf	strtol@base+1,w,c
  7083  00199E  A4D8               	btfss	status,2,c
  7084  0019A0  D004               	goto	l2201
  7085                           
  7086                           ; BSR set to: 0
  7087  0019A2  0E00               	movlw	0
  7088  0019A4  6E2B               	movwf	strtol@base+1,c
  7089  0019A6  0E0A               	movlw	10
  7090  0019A8  6E2A               	movwf	strtol@base,c
  7091  0019AA                     l2201:
  7092                           
  7093                           ; BSR set to: 0
  7094                           
  7095                           ; BSR set to: 0
  7096                           
  7097                           ; BSR set to: 0
  7098  0019AA  5165               	movf	strtol@c& (0+255),w,b
  7099  0019AC  ECFA  F020         	call	_isalpha
  7100  0019B0  A0D8               	btfss	status,0,c
  7101  0019B2  D008               	goto	l2203
  7102  0019B4  0100               	movlb	0	; () banked
  7103  0019B6  5165               	movf	strtol@c& (0+255),w,b
  7104  0019B8  EC27  F022         	call	_toupper
  7105  0019BC  0FC9               	addlw	201
  7106  0019BE  0100               	movlb	0	; () banked
  7107  0019C0  6F65               	movwf	strtol@c& (0+255),b
  7108  0019C2  D009               	goto	l2206
  7109  0019C4                     l2203:
  7110                           
  7111                           ; BSR set to: 0
  7112  0019C4  0100               	movlb	0	; () banked
  7113  0019C6  5165               	movf	strtol@c& (0+255),w,b
  7114  0019C8  ECAF  F021         	call	_isdigit
  7115  0019CC  A0D8               	btfss	status,0,c
  7116  0019CE  D039               	goto	l2207
  7117  0019D0  0E30               	movlw	48
  7118  0019D2  0100               	movlb	0	; () banked
  7119  0019D4  5F65               	subwf	strtol@c& (0+255),f,b
  7120  0019D6                     l2206:
  7121                           
  7122                           ; BSR set to: 0
  7123                           
  7124                           ; BSR set to: 0
  7125                           
  7126                           ; BSR set to: 0
  7127  0019D6  5165               	movf	strtol@c& (0+255),w,b
  7128  0019D8  6E2C               	movwf	??_strtol& (0+255),c
  7129  0019DA  6A2D               	clrf	(??_strtol+1)& (0+255),c
  7130  0019DC  502A               	movf	strtol@base,w,c
  7131  0019DE  5C2C               	subwf	??_strtol,w,c
  7132  0019E0  502D               	movf	??_strtol+1,w,c
  7133  0019E2  0A80               	xorlw	128
  7134  0019E4  6E2E               	movwf	(??_strtol+2)& (0+255),c
  7135  0019E6  502B               	movf	strtol@base+1,w,c
  7136  0019E8  0A80               	xorlw	128
  7137  0019EA  582E               	subwfb	(??_strtol+2)& (0+255),w,c
  7138  0019EC  B0D8               	btfsc	status,0,c
  7139  0019EE  D029               	goto	l2207
  7140                           
  7141                           ; BSR set to: 0
  7142                           
  7143                           ; BSR set to: 0
  7144                           
  7145                           ; BSR set to: 0
  7146  0019F0  C02A  F01A         	movff	strtol@base,___lmul@multiplier
  7147  0019F4  C02B  F01B         	movff	strtol@base+1,___lmul@multiplier+1
  7148  0019F8  0E00               	movlw	0
  7149  0019FA  BE1B               	btfsc	___lmul@multiplier+1,7,c
  7150  0019FC  0EFF               	movlw	-1
  7151  0019FE  6E1C               	movwf	___lmul@multiplier+2,c
  7152  001A00  6E1D               	movwf	___lmul@multiplier+3,c
  7153  001A02  C061  F01E         	movff	strtol@a,___lmul@multiplicand
  7154  001A06  C062  F01F         	movff	strtol@a+1,___lmul@multiplicand+1
  7155  001A0A  C063  F020         	movff	strtol@a+2,___lmul@multiplicand+2
  7156  001A0E  C064  F021         	movff	strtol@a+3,___lmul@multiplicand+3
  7157  001A12  ECC9  F01D         	call	___lmul	;wreg free
  7158  001A16  0100               	movlb	0	; () banked
  7159  001A18  5165               	movf	strtol@c& (0+255),w,b
  7160  001A1A  241A               	addwf	?___lmul,w,c
  7161  001A1C  6F61               	movwf	strtol@a& (0+255),b
  7162  001A1E  0E00               	movlw	0
  7163  001A20  201B               	addwfc	?___lmul+1,w,c
  7164  001A22  6F62               	movwf	(strtol@a+1)& (0+255),b
  7165  001A24  0E00               	movlw	0
  7166  001A26  201C               	addwfc	?___lmul+2,w,c
  7167  001A28  6F63               	movwf	(strtol@a+2)& (0+255),b
  7168  001A2A  0E00               	movlw	0
  7169  001A2C  201D               	addwfc	?___lmul+3,w,c
  7170  001A2E  6F64               	movwf	(strtol@a+3)& (0+255),b
  7171                           
  7172                           ; BSR set to: 0
  7173  001A30  C026  FFD9         	movff	strtol@s,fsr2l
  7174  001A34  C027  FFDA         	movff	strtol@s+1,fsr2h
  7175  001A38  50DF               	movf	indf2,w,c
  7176  001A3A  6F65               	movwf	strtol@c& (0+255),b
  7177                           
  7178                           ; BSR set to: 0
  7179  001A3C  4A26               	infsnz	strtol@s,f,c
  7180  001A3E  2A27               	incf	strtol@s+1,f,c
  7181  001A40  D7B4               	goto	l2201
  7182  001A42                     l2207:
  7183                           
  7184                           ; BSR set to: 0
  7185  001A42  5028               	movf	strtol@endptr,w,c
  7186  001A44  1029               	iorwf	strtol@endptr+1,w,c
  7187  001A46  B4D8               	btfsc	status,2,c
  7188  001A48  D00E               	goto	l2209
  7189  001A4A  0EFF               	movlw	255
  7190  001A4C  2426               	addwf	strtol@s,w,c
  7191  001A4E  6E2C               	movwf	??_strtol& (0+255),c
  7192  001A50  0EFF               	movlw	255
  7193  001A52  2027               	addwfc	strtol@s+1,w,c
  7194  001A54  6E2D               	movwf	(??_strtol+1)& (0+255),c
  7195  001A56  C028  FFD9         	movff	strtol@endptr,fsr2l
  7196  001A5A  C029  FFDA         	movff	strtol@endptr+1,fsr2h
  7197  001A5E  C02C  FFDE         	movff	??_strtol,postinc2
  7198  001A62  C02D  FFDD         	movff	??_strtol+1,postdec2
  7199  001A66                     l2209:
  7200  001A66  0100               	movlb	0	; () banked
  7201  001A68  5160               	movf	strtol@sign& (0+255),w,b
  7202  001A6A  B4D8               	btfsc	status,2,c
  7203  001A6C  D01A               	goto	l2210
  7204                           
  7205                           ; BSR set to: 0
  7206  001A6E  C061  F02C         	movff	strtol@a,??_strtol
  7207  001A72  C062  F02D         	movff	strtol@a+1,??_strtol+1
  7208  001A76  C063  F02E         	movff	strtol@a+2,??_strtol+2
  7209  001A7A  C064  F02F         	movff	strtol@a+3,??_strtol+3
  7210  001A7E  1E2C               	comf	??_strtol,f,c
  7211  001A80  1E2D               	comf	??_strtol+1,f,c
  7212  001A82  1E2E               	comf	??_strtol+2,f,c
  7213  001A84  1E2F               	comf	??_strtol+3,f,c
  7214  001A86  2A2C               	incf	??_strtol,f,c
  7215  001A88  0E00               	movlw	0
  7216  001A8A  222D               	addwfc	??_strtol+1,f,c
  7217  001A8C  222E               	addwfc	??_strtol+2,f,c
  7218  001A8E  222F               	addwfc	??_strtol+3,f,c
  7219  001A90  C02C  F026         	movff	??_strtol,?_strtol
  7220  001A94  C02D  F027         	movff	??_strtol+1,?_strtol+1
  7221  001A98  C02E  F028         	movff	??_strtol+2,?_strtol+2
  7222  001A9C  C02F  F029         	movff	??_strtol+3,?_strtol+3
  7223                           
  7224                           ; BSR set to: 0
  7225  001AA0  0012               	return	
  7226  001AA2                     l2210:
  7227                           
  7228                           ; BSR set to: 0
  7229  001AA2  C061  F026         	movff	strtol@a,?_strtol
  7230  001AA6  C062  F027         	movff	strtol@a+1,?_strtol+1
  7231  001AAA  C063  F028         	movff	strtol@a+2,?_strtol+2
  7232  001AAE  C064  F029         	movff	strtol@a+3,?_strtol+3
  7233                           
  7234                           ; BSR set to: 0
  7235  001AB2  0012               	return		;funcret
  7236  001AB4                     __end_of_strtol:
  7237                           	opt stack 0
  7238                           tosu	equ	0xFFF
  7239                           tosh	equ	0xFFE
  7240                           tosl	equ	0xFFD
  7241                           pclath	equ	0xFFA
  7242                           tblptru	equ	0xFF8
  7243                           tblptrh	equ	0xFF7
  7244                           tblptrl	equ	0xFF6
  7245                           tablat	equ	0xFF5
  7246                           prodh	equ	0xFF4
  7247                           prodl	equ	0xFF3
  7248                           postinc0	equ	0xFEE
  7249                           plusw0	equ	0xFEB
  7250                           wreg	equ	0xFE8
  7251                           indf1	equ	0xFE7
  7252                           postdec1	equ	0xFE5
  7253                           fsr1h	equ	0xFE2
  7254                           fsr1l	equ	0xFE1
  7255                           indf2	equ	0xFDF
  7256                           postinc2	equ	0xFDE
  7257                           postdec2	equ	0xFDD
  7258                           plusw2	equ	0xFDB
  7259                           fsr2h	equ	0xFDA
  7260                           fsr2l	equ	0xFD9
  7261                           status	equ	0xFD8
  7262                           
  7263 ;; *************** function _toupper *****************
  7264 ;; Defined at:
  7265 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\toupper.c"
  7266 ;; Parameters:    Size  Location     Type
  7267 ;;  c               1    wreg     unsigned char 
  7268 ;; Auto vars:     Size  Location     Type
  7269 ;;  c               1   23[COMRAM] unsigned char 
  7270 ;; Return value:  Size  Location     Type
  7271 ;;                  1    wreg      unsigned char 
  7272 ;; Registers used:
  7273 ;;		wreg, status,2, status,0
  7274 ;; Tracked objects:
  7275 ;;		On entry : 0/0
  7276 ;;		On exit  : 0/0
  7277 ;;		Unchanged: 0/0
  7278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7279 ;;      Params:         0       0       0       0       0       0       0
  7280 ;;      Locals:         1       0       0       0       0       0       0
  7281 ;;      Temps:          0       0       0       0       0       0       0
  7282 ;;      Totals:         1       0       0       0       0       0       0
  7283 ;;Total ram usage:        1 bytes
  7284 ;; Hardware stack levels used:    1
  7285 ;; Hardware stack levels required when called:    4
  7286 ;; This function calls:
  7287 ;;		Nothing
  7288 ;; This function is called by:
  7289 ;;		_strtol
  7290 ;; This function uses a non-reentrant model
  7291 ;;
  7292                           
  7293                           	psect	text23
  7294  00444E                     __ptext23:
  7295                           	opt stack 0
  7296  00444E                     _toupper:
  7297                           	opt stack 21
  7298                           
  7299                           ; BSR set to: 0
  7300                           ;incstack = 0
  7301                           ;toupper@c stored from wreg
  7302  00444E  6E18               	movwf	toupper@c,c
  7303  004450  0E7B               	movlw	123
  7304  004452  6018               	cpfslt	toupper@c,c
  7305  004454  D004               	goto	l2214
  7306  004456  0E60               	movlw	96
  7307  004458  6418               	cpfsgt	toupper@c,c
  7308  00445A  D001               	goto	l2214
  7309  00445C  9A18               	bcf	toupper@c,5,c
  7310  00445E                     l2214:
  7311  00445E  5018               	movf	toupper@c,w,c
  7312  004460  0012               	return	
  7313  004462                     __end_of_toupper:
  7314                           	opt stack 0
  7315                           tosu	equ	0xFFF
  7316                           tosh	equ	0xFFE
  7317                           tosl	equ	0xFFD
  7318                           pclath	equ	0xFFA
  7319                           tblptru	equ	0xFF8
  7320                           tblptrh	equ	0xFF7
  7321                           tblptrl	equ	0xFF6
  7322                           tablat	equ	0xFF5
  7323                           prodh	equ	0xFF4
  7324                           prodl	equ	0xFF3
  7325                           postinc0	equ	0xFEE
  7326                           plusw0	equ	0xFEB
  7327                           wreg	equ	0xFE8
  7328                           indf1	equ	0xFE7
  7329                           postdec1	equ	0xFE5
  7330                           fsr1h	equ	0xFE2
  7331                           fsr1l	equ	0xFE1
  7332                           indf2	equ	0xFDF
  7333                           postinc2	equ	0xFDE
  7334                           postdec2	equ	0xFDD
  7335                           plusw2	equ	0xFDB
  7336                           fsr2h	equ	0xFDA
  7337                           fsr2l	equ	0xFD9
  7338                           status	equ	0xFD8
  7339                           
  7340 ;; *************** function _isspace *****************
  7341 ;; Defined at:
  7342 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isspace.c"
  7343 ;; Parameters:    Size  Location     Type
  7344 ;;  c               1    wreg     unsigned char 
  7345 ;; Auto vars:     Size  Location     Type
  7346 ;;  c               1   25[COMRAM] unsigned char 
  7347 ;; Return value:  Size  Location     Type
  7348 ;;		None               void
  7349 ;; Registers used:
  7350 ;;		wreg, status,2, status,0
  7351 ;; Tracked objects:
  7352 ;;		On entry : 0/0
  7353 ;;		On exit  : 0/0
  7354 ;;		Unchanged: 0/0
  7355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7356 ;;      Params:         0       0       0       0       0       0       0
  7357 ;;      Locals:         2       0       0       0       0       0       0
  7358 ;;      Temps:          1       0       0       0       0       0       0
  7359 ;;      Totals:         3       0       0       0       0       0       0
  7360 ;;Total ram usage:        3 bytes
  7361 ;; Hardware stack levels used:    1
  7362 ;; Hardware stack levels required when called:    4
  7363 ;; This function calls:
  7364 ;;		Nothing
  7365 ;; This function is called by:
  7366 ;;		_strtol
  7367 ;; This function uses a non-reentrant model
  7368 ;;
  7369                           
  7370                           	psect	text24
  7371  00421C                     __ptext24:
  7372                           	opt stack 0
  7373  00421C                     _isspace:
  7374                           	opt stack 21
  7375                           
  7376                           ;incstack = 0
  7377                           ;isspace@c stored from wreg
  7378  00421C  6E1A               	movwf	isspace@c,c
  7379  00421E  0E01               	movlw	1
  7380  004220  6E19               	movwf	_isspace$3324,c
  7381  004222  0E20               	movlw	32
  7382  004224  181A               	xorwf	isspace@c,w,c
  7383  004226  B4D8               	btfsc	status,2,c
  7384  004228  D008               	goto	l2296
  7385  00422A  0E0E               	movlw	14
  7386  00422C  601A               	cpfslt	isspace@c,c
  7387  00422E  D003               	goto	u7960
  7388  004230  0E09               	movlw	9
  7389  004232  601A               	cpfslt	isspace@c,c
  7390  004234  D002               	goto	l2296
  7391  004236                     u7960:
  7392  004236  0E00               	movlw	0
  7393  004238  6E19               	movwf	_isspace$3324,c
  7394  00423A                     l2296:
  7395  00423A  C019  F018         	movff	_isspace$3324,??_isspace
  7396  00423E  3018               	rrcf	??_isspace,w,c
  7397  004240  0012               	return	
  7398  004242                     __end_of_isspace:
  7399                           	opt stack 0
  7400                           tosu	equ	0xFFF
  7401                           tosh	equ	0xFFE
  7402                           tosl	equ	0xFFD
  7403                           pclath	equ	0xFFA
  7404                           tblptru	equ	0xFF8
  7405                           tblptrh	equ	0xFF7
  7406                           tblptrl	equ	0xFF6
  7407                           tablat	equ	0xFF5
  7408                           prodh	equ	0xFF4
  7409                           prodl	equ	0xFF3
  7410                           postinc0	equ	0xFEE
  7411                           plusw0	equ	0xFEB
  7412                           wreg	equ	0xFE8
  7413                           indf1	equ	0xFE7
  7414                           postdec1	equ	0xFE5
  7415                           fsr1h	equ	0xFE2
  7416                           fsr1l	equ	0xFE1
  7417                           indf2	equ	0xFDF
  7418                           postinc2	equ	0xFDE
  7419                           postdec2	equ	0xFDD
  7420                           plusw2	equ	0xFDB
  7421                           fsr2h	equ	0xFDA
  7422                           fsr2l	equ	0xFD9
  7423                           status	equ	0xFD8
  7424                           
  7425 ;; *************** function _isdigit *****************
  7426 ;; Defined at:
  7427 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  7428 ;; Parameters:    Size  Location     Type
  7429 ;;  c               1    wreg     unsigned char 
  7430 ;; Auto vars:     Size  Location     Type
  7431 ;;  c               1   25[COMRAM] unsigned char 
  7432 ;; Return value:  Size  Location     Type
  7433 ;;		None               void
  7434 ;; Registers used:
  7435 ;;		wreg, status,2, status,0
  7436 ;; Tracked objects:
  7437 ;;		On entry : 0/0
  7438 ;;		On exit  : 0/0
  7439 ;;		Unchanged: 0/0
  7440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7441 ;;      Params:         0       0       0       0       0       0       0
  7442 ;;      Locals:         2       0       0       0       0       0       0
  7443 ;;      Temps:          1       0       0       0       0       0       0
  7444 ;;      Totals:         3       0       0       0       0       0       0
  7445 ;;Total ram usage:        3 bytes
  7446 ;; Hardware stack levels used:    1
  7447 ;; Hardware stack levels required when called:    4
  7448 ;; This function calls:
  7449 ;;		Nothing
  7450 ;; This function is called by:
  7451 ;;		_strtol
  7452 ;; This function uses a non-reentrant model
  7453 ;;
  7454                           
  7455                           	psect	text25
  7456  00435E                     __ptext25:
  7457                           	opt stack 0
  7458  00435E                     _isdigit:
  7459                           	opt stack 21
  7460                           
  7461                           ;incstack = 0
  7462                           ;isdigit@c stored from wreg
  7463  00435E  6E1A               	movwf	isdigit@c,c
  7464  004360  0E00               	movlw	0
  7465  004362  6E19               	movwf	_isdigit$3321,c
  7466  004364  0E3A               	movlw	58
  7467  004366  601A               	cpfslt	isdigit@c,c
  7468  004368  D005               	goto	l2291
  7469  00436A  0E2F               	movlw	47
  7470  00436C  641A               	cpfsgt	isdigit@c,c
  7471  00436E  D002               	goto	l2291
  7472  004370  0E01               	movlw	1
  7473  004372  6E19               	movwf	_isdigit$3321,c
  7474  004374                     l2291:
  7475  004374  C019  F018         	movff	_isdigit$3321,??_isdigit
  7476  004378  3018               	rrcf	??_isdigit,w,c
  7477  00437A  0012               	return	
  7478  00437C                     __end_of_isdigit:
  7479                           	opt stack 0
  7480                           tosu	equ	0xFFF
  7481                           tosh	equ	0xFFE
  7482                           tosl	equ	0xFFD
  7483                           pclath	equ	0xFFA
  7484                           tblptru	equ	0xFF8
  7485                           tblptrh	equ	0xFF7
  7486                           tblptrl	equ	0xFF6
  7487                           tablat	equ	0xFF5
  7488                           prodh	equ	0xFF4
  7489                           prodl	equ	0xFF3
  7490                           postinc0	equ	0xFEE
  7491                           plusw0	equ	0xFEB
  7492                           wreg	equ	0xFE8
  7493                           indf1	equ	0xFE7
  7494                           postdec1	equ	0xFE5
  7495                           fsr1h	equ	0xFE2
  7496                           fsr1l	equ	0xFE1
  7497                           indf2	equ	0xFDF
  7498                           postinc2	equ	0xFDE
  7499                           postdec2	equ	0xFDD
  7500                           plusw2	equ	0xFDB
  7501                           fsr2h	equ	0xFDA
  7502                           fsr2l	equ	0xFD9
  7503                           status	equ	0xFD8
  7504                           
  7505 ;; *************** function _isalpha *****************
  7506 ;; Defined at:
  7507 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isalpha.c"
  7508 ;; Parameters:    Size  Location     Type
  7509 ;;  c               1    wreg     unsigned char 
  7510 ;; Auto vars:     Size  Location     Type
  7511 ;;  c               1   28[COMRAM] unsigned char 
  7512 ;; Return value:  Size  Location     Type
  7513 ;;		None               void
  7514 ;; Registers used:
  7515 ;;		wreg, status,2, status,0, cstack
  7516 ;; Tracked objects:
  7517 ;;		On entry : 0/0
  7518 ;;		On exit  : 0/0
  7519 ;;		Unchanged: 0/0
  7520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7521 ;;      Params:         0       0       0       0       0       0       0
  7522 ;;      Locals:         2       0       0       0       0       0       0
  7523 ;;      Temps:          1       0       0       0       0       0       0
  7524 ;;      Totals:         3       0       0       0       0       0       0
  7525 ;;Total ram usage:        3 bytes
  7526 ;; Hardware stack levels used:    1
  7527 ;; Hardware stack levels required when called:    5
  7528 ;; This function calls:
  7529 ;;		_isupper
  7530 ;; This function is called by:
  7531 ;;		_strtol
  7532 ;; This function uses a non-reentrant model
  7533 ;;
  7534                           
  7535                           	psect	text26
  7536  0041F4                     __ptext26:
  7537                           	opt stack 0
  7538  0041F4                     _isalpha:
  7539                           	opt stack 20
  7540                           
  7541                           ;incstack = 0
  7542                           ;isalpha@c stored from wreg
  7543  0041F4  6E1D               	movwf	isalpha@c,c
  7544  0041F6  0E01               	movlw	1
  7545  0041F8  6E1C               	movwf	_isalpha$3318,c
  7546  0041FA  0E7B               	movlw	123
  7547  0041FC  601D               	cpfslt	isalpha@c,c
  7548  0041FE  D003               	goto	u7980
  7549  004200  0E61               	movlw	97
  7550  004202  601D               	cpfslt	isalpha@c,c
  7551  004204  D007               	goto	l2286
  7552  004206                     u7980:
  7553  004206  501D               	movf	isalpha@c,w,c
  7554  004208  ECBE  F021         	call	_isupper
  7555  00420C  B0D8               	btfsc	status,0,c
  7556  00420E  D002               	goto	l2286
  7557  004210  0E00               	movlw	0
  7558  004212  6E1C               	movwf	_isalpha$3318,c
  7559  004214                     l2286:
  7560  004214  C01C  F01B         	movff	_isalpha$3318,??_isalpha
  7561  004218  301B               	rrcf	??_isalpha,w,c
  7562  00421A  0012               	return	
  7563  00421C                     __end_of_isalpha:
  7564                           	opt stack 0
  7565                           tosu	equ	0xFFF
  7566                           tosh	equ	0xFFE
  7567                           tosl	equ	0xFFD
  7568                           pclath	equ	0xFFA
  7569                           tblptru	equ	0xFF8
  7570                           tblptrh	equ	0xFF7
  7571                           tblptrl	equ	0xFF6
  7572                           tablat	equ	0xFF5
  7573                           prodh	equ	0xFF4
  7574                           prodl	equ	0xFF3
  7575                           postinc0	equ	0xFEE
  7576                           plusw0	equ	0xFEB
  7577                           wreg	equ	0xFE8
  7578                           indf1	equ	0xFE7
  7579                           postdec1	equ	0xFE5
  7580                           fsr1h	equ	0xFE2
  7581                           fsr1l	equ	0xFE1
  7582                           indf2	equ	0xFDF
  7583                           postinc2	equ	0xFDE
  7584                           postdec2	equ	0xFDD
  7585                           plusw2	equ	0xFDB
  7586                           fsr2h	equ	0xFDA
  7587                           fsr2l	equ	0xFD9
  7588                           status	equ	0xFD8
  7589                           
  7590 ;; *************** function _isupper *****************
  7591 ;; Defined at:
  7592 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isupper.c"
  7593 ;; Parameters:    Size  Location     Type
  7594 ;;  c               1    wreg     unsigned char 
  7595 ;; Auto vars:     Size  Location     Type
  7596 ;;  c               1   25[COMRAM] unsigned char 
  7597 ;; Return value:  Size  Location     Type
  7598 ;;		None               void
  7599 ;; Registers used:
  7600 ;;		wreg, status,2, status,0
  7601 ;; Tracked objects:
  7602 ;;		On entry : 0/0
  7603 ;;		On exit  : 0/0
  7604 ;;		Unchanged: 0/0
  7605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7606 ;;      Params:         0       0       0       0       0       0       0
  7607 ;;      Locals:         2       0       0       0       0       0       0
  7608 ;;      Temps:          1       0       0       0       0       0       0
  7609 ;;      Totals:         3       0       0       0       0       0       0
  7610 ;;Total ram usage:        3 bytes
  7611 ;; Hardware stack levels used:    1
  7612 ;; Hardware stack levels required when called:    4
  7613 ;; This function calls:
  7614 ;;		Nothing
  7615 ;; This function is called by:
  7616 ;;		_isalpha
  7617 ;; This function uses a non-reentrant model
  7618 ;;
  7619                           
  7620                           	psect	text27
  7621  00437C                     __ptext27:
  7622                           	opt stack 0
  7623  00437C                     _isupper:
  7624                           	opt stack 20
  7625                           
  7626                           ;incstack = 0
  7627                           ;isupper@c stored from wreg
  7628  00437C  6E1A               	movwf	isupper@c,c
  7629  00437E  0E00               	movlw	0
  7630  004380  6E19               	movwf	_isupper$3327,c
  7631  004382  0E5B               	movlw	91
  7632  004384  601A               	cpfslt	isupper@c,c
  7633  004386  D005               	goto	l2301
  7634  004388  0E40               	movlw	64
  7635  00438A  641A               	cpfsgt	isupper@c,c
  7636  00438C  D002               	goto	l2301
  7637  00438E  0E01               	movlw	1
  7638  004390  6E19               	movwf	_isupper$3327,c
  7639  004392                     l2301:
  7640  004392  C019  F018         	movff	_isupper$3327,??_isupper
  7641  004396  3018               	rrcf	??_isupper,w,c
  7642  004398  0012               	return	
  7643  00439A                     __end_of_isupper:
  7644                           	opt stack 0
  7645                           tosu	equ	0xFFF
  7646                           tosh	equ	0xFFE
  7647                           tosl	equ	0xFFD
  7648                           pclath	equ	0xFFA
  7649                           tblptru	equ	0xFF8
  7650                           tblptrh	equ	0xFF7
  7651                           tblptrl	equ	0xFF6
  7652                           tablat	equ	0xFF5
  7653                           prodh	equ	0xFF4
  7654                           prodl	equ	0xFF3
  7655                           postinc0	equ	0xFEE
  7656                           plusw0	equ	0xFEB
  7657                           wreg	equ	0xFE8
  7658                           indf1	equ	0xFE7
  7659                           postdec1	equ	0xFE5
  7660                           fsr1h	equ	0xFE2
  7661                           fsr1l	equ	0xFE1
  7662                           indf2	equ	0xFDF
  7663                           postinc2	equ	0xFDE
  7664                           postdec2	equ	0xFDD
  7665                           plusw2	equ	0xFDB
  7666                           fsr2h	equ	0xFDA
  7667                           fsr2l	equ	0xFD9
  7668                           status	equ	0xFD8
  7669                           
  7670 ;; *************** function _DacReadValue *****************
  7671 ;; Defined at:
  7672 ;;		line 44 in file "DacApp.c"
  7673 ;; Parameters:    Size  Location     Type
  7674 ;;  data            2  104[BANK0 ] PTR unsigned char 
  7675 ;;		 -> rxMsgData(20), 
  7676 ;; Auto vars:     Size  Location     Type
  7677 ;;  byteIdx         2  120[BANK0 ] int 
  7678 ;;  TxMsg           7  113[BANK0 ] unsigned char [7]
  7679 ;;  readVal         2  110[BANK0 ] unsigned int 
  7680 ;;  dacIndex        1  112[BANK0 ] unsigned char 
  7681 ;;  byteNum         1  109[BANK0 ] unsigned char 
  7682 ;;  regNum          1  108[BANK0 ] unsigned char 
  7683 ;; Return value:  Size  Location     Type
  7684 ;;                  1    wreg      void 
  7685 ;; Registers used:
  7686 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7687 ;; Tracked objects:
  7688 ;;		On entry : 0/0
  7689 ;;		On exit  : 0/0
  7690 ;;		Unchanged: 0/0
  7691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7692 ;;      Params:         0       2       0       0       0       0       0
  7693 ;;      Locals:         0      14       0       0       0       0       0
  7694 ;;      Temps:          0       2       0       0       0       0       0
  7695 ;;      Totals:         0      18       0       0       0       0       0
  7696 ;;Total ram usage:       18 bytes
  7697 ;; Hardware stack levels used:    1
  7698 ;; Hardware stack levels required when called:   10
  7699 ;; This function calls:
  7700 ;;		_ReadIntFromEeprom
  7701 ;;		_WriteUartMessage
  7702 ;;		_ZeroArray
  7703 ;;		_crc8
  7704 ;;		_make8
  7705 ;; This function is called by:
  7706 ;;		_GroupDAC
  7707 ;; This function uses a non-reentrant model
  7708 ;;
  7709                           
  7710                           	psect	text28
  7711  002954                     __ptext28:
  7712                           	opt stack 0
  7713  002954                     _DacReadValue:
  7714                           	opt stack 18
  7715                           
  7716                           ;DacApp.c: 46: uint16_t readVal;
  7717                           ;DacApp.c: 47: uint8_t regNum = 0, byteNum = 0;
  7718                           
  7719                           ;incstack = 0
  7720  002954  0E00               	movlw	0
  7721  002956  0100               	movlb	0	; () banked
  7722  002958  6FCC               	movwf	DacReadValue@regNum& (0+255),b
  7723  00295A  0E00               	movlw	0
  7724  00295C  6FCD               	movwf	DacReadValue@byteNum& (0+255),b
  7725                           
  7726                           ; BSR set to: 0
  7727                           ;DacApp.c: 48: char TxMsg[2 + (0x4) + 1];
  7728                           ;DacApp.c: 49: ZeroArray(TxMsg, 2 + (0x4) + 1);
  7729  00295E  0ED1               	movlw	low DacReadValue@TxMsg
  7730  002960  6E20               	movwf	ZeroArray@array,c
  7731  002962  0E00               	movlw	high DacReadValue@TxMsg
  7732  002964  6E21               	movwf	ZeroArray@array+1,c
  7733  002966  0E00               	movlw	0
  7734  002968  6E23               	movwf	ZeroArray@size+1,c
  7735  00296A  0E07               	movlw	7
  7736  00296C  6E22               	movwf	ZeroArray@size,c
  7737  00296E  ECCD  F021         	call	_ZeroArray	;wreg free
  7738                           
  7739                           ;DacApp.c: 52: TxMsg[(0)] = (0x24);
  7740  002972  0E24               	movlw	36
  7741  002974  0100               	movlb	0	; () banked
  7742  002976  6FD1               	movwf	DacReadValue@TxMsg& (0+255),b
  7743                           
  7744                           ; BSR set to: 0
  7745                           ;DacApp.c: 53: TxMsg[(1)] = DAC_MSG;
  7746  002978  0E06               	movlw	6
  7747  00297A  6FD2               	movwf	(DacReadValue@TxMsg+1)& (0+255),b
  7748                           
  7749                           ; BSR set to: 0
  7750                           ;DacApp.c: 54: TxMsg[(2)] = DAC_READ_VALUE;
  7751  00297C  0E62               	movlw	98
  7752  00297E  6FD3               	movwf	(DacReadValue@TxMsg+2)& (0+255),b
  7753                           
  7754                           ; BSR set to: 0
  7755                           ;DacApp.c: 55: TxMsg[(3)] = 2;
  7756  002980  0E02               	movlw	2
  7757  002982  6FD4               	movwf	(DacReadValue@TxMsg+3)& (0+255),b
  7758                           
  7759                           ; BSR set to: 0
  7760                           ;DacApp.c: 57: uint8_t dacIndex = data[0];
  7761  002984  C0C8  FFD9         	movff	DacReadValue@data,fsr2l
  7762  002988  C0C9  FFDA         	movff	DacReadValue@data+1,fsr2h
  7763  00298C  50DF               	movf	indf2,w,c
  7764  00298E  6FD0               	movwf	DacReadValue@dacIndex& (0+255),b
  7765                           
  7766                           ; BSR set to: 0
  7767                           ;DacApp.c: 58: uint16_t readVal = ReadIntFromEeprom((0x40) | DAC_ADDRES[dacIndex], 2);
  7768  002990  0E00               	movlw	0
  7769  002992  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  7770  002994  0E02               	movlw	2
  7771  002996  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  7772  002998  51D0               	movf	DacReadValue@dacIndex& (0+255),w,b
  7773  00299A  0D01               	mullw	1
  7774  00299C  0E53               	movlw	low _DAC_ADDRES
  7775  00299E  24F3               	addwf	prodl,w,c
  7776  0029A0  6EF6               	movwf	tblptrl,c
  7777  0029A2  0E06               	movlw	high _DAC_ADDRES
  7778  0029A4  20F4               	addwfc	prodh,w,c
  7779  0029A6  6EF7               	movwf	tblptrh,c
  7780  0029A8                     	if	0	;There are less than 3 active tblptr bytes
  7781  0029A8                     	endif
  7782  0029A8  0008               	tblrd		*
  7783  0029AA  50F5               	movf	tablat,w,c
  7784  0029AC  0940               	iorlw	64
  7785  0029AE  EC44  F010         	call	_ReadIntFromEeprom
  7786  0029B2  C0B1  F0CE         	movff	?_ReadIntFromEeprom,DacReadValue@readVal
  7787  0029B6  C0B2  F0CF         	movff	?_ReadIntFromEeprom+1,DacReadValue@readVal+1
  7788                           
  7789                           ;DacApp.c: 60: for(int byteIdx = 0; byteIdx < 2; byteIdx++)
  7790  0029BA  0E00               	movlw	0
  7791  0029BC  0100               	movlb	0	; () banked
  7792  0029BE  6FD9               	movwf	(DacReadValue@byteIdx+1)& (0+255),b
  7793  0029C0  0E00               	movlw	0
  7794  0029C2  6FD8               	movwf	DacReadValue@byteIdx& (0+255),b
  7795  0029C4                     l8470:
  7796                           
  7797                           ; BSR set to: 0
  7798  0029C4  BFD9               	btfsc	(DacReadValue@byteIdx+1)& (0+255),7,b
  7799  0029C6  D006               	goto	l435
  7800  0029C8  51D9               	movf	(DacReadValue@byteIdx+1)& (0+255),w,b
  7801  0029CA  E11F               	bnz	l8480
  7802  0029CC  0E02               	movlw	2
  7803  0029CE  5DD8               	subwf	DacReadValue@byteIdx& (0+255),w,b
  7804  0029D0  B0D8               	btfsc	status,0,c
  7805  0029D2  D01B               	goto	u8960
  7806  0029D4                     l435:
  7807                           
  7808                           ; BSR set to: 0
  7809                           ;DacApp.c: 61: {
  7810                           ;DacApp.c: 62: TxMsg[(0x4) + byteIdx] = make8(readVal, byteIdx);
  7811                           
  7812                           ; BSR set to: 0
  7813  0029D4  0E04               	movlw	4
  7814  0029D6  25D8               	addwf	DacReadValue@byteIdx& (0+255),w,b
  7815  0029D8  6FCA               	movwf	??_DacReadValue& (0+255),b
  7816  0029DA  0E00               	movlw	0
  7817  0029DC  21D9               	addwfc	(DacReadValue@byteIdx+1)& (0+255),w,b
  7818  0029DE  6FCB               	movwf	(??_DacReadValue+1)& (0+255),b
  7819  0029E0  0ED1               	movlw	low DacReadValue@TxMsg
  7820  0029E2  25CA               	addwf	??_DacReadValue& (0+255),w,b
  7821  0029E4  6ED9               	movwf	fsr2l,c
  7822  0029E6  0E00               	movlw	high DacReadValue@TxMsg
  7823  0029E8  21CB               	addwfc	(??_DacReadValue+1)& (0+255),w,b
  7824  0029EA  6EDA               	movwf	fsr2h,c
  7825  0029EC  C0CE  F018         	movff	DacReadValue@readVal,make8@data
  7826  0029F0  C0CF  F019         	movff	DacReadValue@readVal+1,make8@data+1
  7827  0029F4  6A1A               	clrf	make8@data+2,c
  7828  0029F6  6A1B               	clrf	make8@data+3,c
  7829  0029F8  C0D8  F01C         	movff	DacReadValue@byteIdx,make8@dataLocation
  7830  0029FC  ECBF  F01C         	call	_make8	;wreg free
  7831  002A00  6EDF               	movwf	indf2,c
  7832  002A02  0100               	movlb	0	; () banked
  7833  002A04  4BD8               	infsnz	DacReadValue@byteIdx& (0+255),f,b
  7834  002A06  2BD9               	incf	(DacReadValue@byteIdx+1)& (0+255),f,b
  7835  002A08  D7DD               	goto	l8470
  7836  002A0A                     u8960:
  7837  002A0A                     l8480:
  7838                           
  7839                           ; BSR set to: 0
  7840                           ;DacApp.c: 63: }
  7841                           ;DacApp.c: 64: TxMsg[2 + (0x4)] = crc8(TxMsg, 2 + (0x4));
  7842  002A0A  0ED1               	movlw	low DacReadValue@TxMsg
  7843  002A0C  6E18               	movwf	crc8@dataArray,c
  7844  002A0E  0E00               	movlw	high DacReadValue@TxMsg
  7845  002A10  6E19               	movwf	crc8@dataArray+1,c
  7846  002A12  0E00               	movlw	0
  7847  002A14  6E1B               	movwf	crc8@dataSize+1,c
  7848  002A16  0E06               	movlw	6
  7849  002A18  6E1A               	movwf	crc8@dataSize,c
  7850  002A1A  EC46  F01E         	call	_crc8	;wreg free
  7851  002A1E  0100               	movlb	0	; () banked
  7852  002A20  6FD7               	movwf	(DacReadValue@TxMsg+6)& (0+255),b
  7853                           
  7854                           ; BSR set to: 0
  7855                           ;DacApp.c: 65: WriteUartMessage(TxMsg, 2 + (0x4) + 1);
  7856  002A22  0ED1               	movlw	low DacReadValue@TxMsg
  7857  002A24  6E19               	movwf	WriteUartMessage@dataBuf,c
  7858  002A26  0E00               	movlw	high DacReadValue@TxMsg
  7859  002A28  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  7860  002A2A  0E00               	movlw	0
  7861  002A2C  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  7862  002A2E  0E07               	movlw	7
  7863  002A30  6E1B               	movwf	WriteUartMessage@dataSize,c
  7864  002A32  ECD9  F01F         	call	_WriteUartMessage	;wreg free
  7865  002A36  0012               	return		;funcret
  7866  002A38                     __end_of_DacReadValue:
  7867                           	opt stack 0
  7868                           tosu	equ	0xFFF
  7869                           tosh	equ	0xFFE
  7870                           tosl	equ	0xFFD
  7871                           pclath	equ	0xFFA
  7872                           tblptru	equ	0xFF8
  7873                           tblptrh	equ	0xFF7
  7874                           tblptrl	equ	0xFF6
  7875                           tablat	equ	0xFF5
  7876                           prodh	equ	0xFF4
  7877                           prodl	equ	0xFF3
  7878                           postinc0	equ	0xFEE
  7879                           plusw0	equ	0xFEB
  7880                           wreg	equ	0xFE8
  7881                           indf1	equ	0xFE7
  7882                           postdec1	equ	0xFE5
  7883                           fsr1h	equ	0xFE2
  7884                           fsr1l	equ	0xFE1
  7885                           indf2	equ	0xFDF
  7886                           postinc2	equ	0xFDE
  7887                           postdec2	equ	0xFDD
  7888                           plusw2	equ	0xFDB
  7889                           fsr2h	equ	0xFDA
  7890                           fsr2l	equ	0xFD9
  7891                           status	equ	0xFD8
  7892                           
  7893 ;; *************** function _testLeds *****************
  7894 ;; Defined at:
  7895 ;;		line 43 in file "LedsApp.c"
  7896 ;; Parameters:    Size  Location     Type
  7897 ;;		None
  7898 ;; Auto vars:     Size  Location     Type
  7899 ;;  idx             2   44[COMRAM] int 
  7900 ;; Return value:  Size  Location     Type
  7901 ;;                  1    wreg      void 
  7902 ;; Registers used:
  7903 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7904 ;; Tracked objects:
  7905 ;;		On entry : 0/0
  7906 ;;		On exit  : 0/0
  7907 ;;		Unchanged: 0/0
  7908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7909 ;;      Params:         0       0       0       0       0       0       0
  7910 ;;      Locals:         2       0       0       0       0       0       0
  7911 ;;      Temps:          1       0       0       0       0       0       0
  7912 ;;      Totals:         3       0       0       0       0       0       0
  7913 ;;Total ram usage:        3 bytes
  7914 ;; Hardware stack levels used:    1
  7915 ;; Hardware stack levels required when called:    7
  7916 ;; This function calls:
  7917 ;;		_SendAckMessage
  7918 ;; This function is called by:
  7919 ;;		_GroupControlMcu
  7920 ;; This function uses a non-reentrant model
  7921 ;;
  7922                           
  7923                           	psect	text29
  7924  00378E                     __ptext29:
  7925                           	opt stack 0
  7926  00378E                     _testLeds:
  7927                           	opt stack 21
  7928                           
  7929                           ;LedsApp.c: 46: for(int idx = 0; idx < 10; idx++)
  7930                           
  7931                           ;incstack = 0
  7932  00378E  0E00               	movlw	0
  7933  003790  6E2E               	movwf	testLeds@idx+1,c
  7934  003792  0E00               	movlw	0
  7935  003794  6E2D               	movwf	testLeds@idx,c
  7936  003796                     l8258:
  7937  003796  BE2E               	btfsc	testLeds@idx+1,7,c
  7938  003798  D006               	goto	l60
  7939  00379A  502E               	movf	testLeds@idx+1,w,c
  7940  00379C  E127               	bnz	l8272
  7941  00379E  0E0A               	movlw	10
  7942  0037A0  5C2D               	subwf	testLeds@idx,w,c
  7943  0037A2  B0D8               	btfsc	status,0,c
  7944  0037A4  D023               	goto	u8620
  7945  0037A6                     l60:
  7946                           
  7947                           ;LedsApp.c: 47: {
  7948                           ;LedsApp.c: 49: LATCbits.LATC0 = 1;
  7949  0037A6  808B               	bsf	3979,0,c	;volatile
  7950                           
  7951                           ;LedsApp.c: 50: _delay((unsigned long)((50)*(8000000/4000.0)));
  7952  0037A8  0E82               	movlw	130
  7953  0037AA  6E2C               	movwf	??_testLeds& (0+255),c
  7954  0037AC  0EDE               	movlw	222
  7955  0037AE                     u9597:
  7956  0037AE  2EE8               	decfsz	wreg,f,c
  7957  0037B0  D7FE               	bra	u9597
  7958  0037B2  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7959  0037B4  D7FC               	bra	u9597
  7960                           
  7961                           ;LedsApp.c: 51: LATBbits.LATB4 = 1;
  7962  0037B6  888A               	bsf	3978,4,c	;volatile
  7963                           
  7964                           ;LedsApp.c: 52: _delay((unsigned long)((50)*(8000000/4000.0)));
  7965  0037B8  0E82               	movlw	130
  7966  0037BA  6E2C               	movwf	??_testLeds& (0+255),c
  7967  0037BC  0EDE               	movlw	222
  7968  0037BE                     u9607:
  7969  0037BE  2EE8               	decfsz	wreg,f,c
  7970  0037C0  D7FE               	bra	u9607
  7971  0037C2  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7972  0037C4  D7FC               	bra	u9607
  7973                           
  7974                           ;LedsApp.c: 53: LATCbits.LATC0 = 0;
  7975  0037C6  908B               	bcf	3979,0,c	;volatile
  7976                           
  7977                           ;LedsApp.c: 54: _delay((unsigned long)((50)*(8000000/4000.0)));
  7978  0037C8  0E82               	movlw	130
  7979  0037CA  6E2C               	movwf	??_testLeds& (0+255),c
  7980  0037CC  0EDE               	movlw	222
  7981  0037CE                     u9617:
  7982  0037CE  2EE8               	decfsz	wreg,f,c
  7983  0037D0  D7FE               	bra	u9617
  7984  0037D2  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7985  0037D4  D7FC               	bra	u9617
  7986                           
  7987                           ;LedsApp.c: 55: LATBbits.LATB4 = 0;
  7988  0037D6  988A               	bcf	3978,4,c	;volatile
  7989                           
  7990                           ;LedsApp.c: 56: _delay((unsigned long)((50)*(8000000/4000.0)));
  7991  0037D8  0E82               	movlw	130
  7992  0037DA  6E2C               	movwf	??_testLeds& (0+255),c
  7993  0037DC  0EDE               	movlw	222
  7994  0037DE                     u9627:
  7995  0037DE  2EE8               	decfsz	wreg,f,c
  7996  0037E0  D7FE               	bra	u9627
  7997  0037E2  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7998  0037E4  D7FC               	bra	u9627
  7999  0037E6  4A2D               	infsnz	testLeds@idx,f,c
  8000  0037E8  2A2E               	incf	testLeds@idx+1,f,c
  8001  0037EA  D7D5               	goto	l8258
  8002  0037EC                     u8620:
  8003  0037EC                     l8272:
  8004                           
  8005                           ;LedsApp.c: 57: }
  8006                           ;LedsApp.c: 59: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_TEST_LEDS);
  8007  0037EC  0E14               	movlw	20
  8008  0037EE  6E24               	movwf	SendAckMessage@inRequest,c
  8009  0037F0  0E01               	movlw	1
  8010  0037F2  EC1D  F01E         	call	_SendAckMessage
  8011  0037F6  0012               	return	
  8012  0037F8                     __end_of_testLeds:
  8013                           	opt stack 0
  8014                           tosu	equ	0xFFF
  8015                           tosh	equ	0xFFE
  8016                           tosl	equ	0xFFD
  8017                           pclath	equ	0xFFA
  8018                           tblptru	equ	0xFF8
  8019                           tblptrh	equ	0xFF7
  8020                           tblptrl	equ	0xFF6
  8021                           tablat	equ	0xFF5
  8022                           prodh	equ	0xFF4
  8023                           prodl	equ	0xFF3
  8024                           postinc0	equ	0xFEE
  8025                           plusw0	equ	0xFEB
  8026                           wreg	equ	0xFE8
  8027                           indf1	equ	0xFE7
  8028                           postdec1	equ	0xFE5
  8029                           fsr1h	equ	0xFE2
  8030                           fsr1l	equ	0xFE1
  8031                           indf2	equ	0xFDF
  8032                           postinc2	equ	0xFDE
  8033                           postdec2	equ	0xFDD
  8034                           plusw2	equ	0xFDB
  8035                           fsr2h	equ	0xFDA
  8036                           fsr2l	equ	0xFD9
  8037                           status	equ	0xFD8
  8038                           
  8039 ;; *************** function _ResetMcu *****************
  8040 ;; Defined at:
  8041 ;;		line 148 in file "SystemCommon.c"
  8042 ;; Parameters:    Size  Location     Type
  8043 ;;		None
  8044 ;; Auto vars:     Size  Location     Type
  8045 ;;		None
  8046 ;; Return value:  Size  Location     Type
  8047 ;;                  1    wreg      void 
  8048 ;; Registers used:
  8049 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8050 ;; Tracked objects:
  8051 ;;		On entry : 0/0
  8052 ;;		On exit  : 0/0
  8053 ;;		Unchanged: 0/0
  8054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8055 ;;      Params:         0       0       0       0       0       0       0
  8056 ;;      Locals:         0       0       0       0       0       0       0
  8057 ;;      Temps:          0       0       0       0       0       0       0
  8058 ;;      Totals:         0       0       0       0       0       0       0
  8059 ;;Total ram usage:        0 bytes
  8060 ;; Hardware stack levels used:    1
  8061 ;; Hardware stack levels required when called:    7
  8062 ;; This function calls:
  8063 ;;		_SendAckMessage
  8064 ;; This function is called by:
  8065 ;;		_GroupControlMcu
  8066 ;; This function uses a non-reentrant model
  8067 ;;
  8068                           
  8069                           	psect	text30
  8070  0044AC                     __ptext30:
  8071                           	opt stack 0
  8072  0044AC                     _ResetMcu:
  8073                           	opt stack 21
  8074                           
  8075                           ;SystemCommon.c: 151: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_RESET
      +                          _MCU);
  8076                           
  8077                           ;incstack = 0
  8078  0044AC  0E11               	movlw	17
  8079  0044AE  6E24               	movwf	SendAckMessage@inRequest,c
  8080  0044B0  0E01               	movlw	1
  8081  0044B2  EC1D  F01E         	call	_SendAckMessage
  8082  0044B6  00FF               	reset		;# 
  8083  0044B8  0012               	return		;funcret
  8084  0044BA                     __end_of_ResetMcu:
  8085                           	opt stack 0
  8086                           tosu	equ	0xFFF
  8087                           tosh	equ	0xFFE
  8088                           tosl	equ	0xFFD
  8089                           pclath	equ	0xFFA
  8090                           tblptru	equ	0xFF8
  8091                           tblptrh	equ	0xFF7
  8092                           tblptrl	equ	0xFF6
  8093                           tablat	equ	0xFF5
  8094                           prodh	equ	0xFF4
  8095                           prodl	equ	0xFF3
  8096                           postinc0	equ	0xFEE
  8097                           plusw0	equ	0xFEB
  8098                           wreg	equ	0xFE8
  8099                           indf1	equ	0xFE7
  8100                           postdec1	equ	0xFE5
  8101                           fsr1h	equ	0xFE2
  8102                           fsr1l	equ	0xFE1
  8103                           indf2	equ	0xFDF
  8104                           postinc2	equ	0xFDE
  8105                           postdec2	equ	0xFDD
  8106                           plusw2	equ	0xFDB
  8107                           fsr2h	equ	0xFDA
  8108                           fsr2l	equ	0xFD9
  8109                           status	equ	0xFD8
  8110                           
  8111 ;; *************** function _SetChannelMode *****************
  8112 ;; Defined at:
  8113 ;;		line 30 in file "AdcApp.c"
  8114 ;; Parameters:    Size  Location     Type
  8115 ;;  data            2   43[COMRAM] PTR unsigned char 
  8116 ;; Auto vars:     Size  Location     Type
  8117 ;;		None
  8118 ;; Return value:  Size  Location     Type
  8119 ;;                  1    wreg      void 
  8120 ;; Registers used:
  8121 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8122 ;; Tracked objects:
  8123 ;;		On entry : 0/0
  8124 ;;		On exit  : 0/0
  8125 ;;		Unchanged: 0/0
  8126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8127 ;;      Params:         2       0       0       0       0       0       0
  8128 ;;      Locals:         0       0       0       0       0       0       0
  8129 ;;      Temps:          0       0       0       0       0       0       0
  8130 ;;      Totals:         2       0       0       0       0       0       0
  8131 ;;Total ram usage:        2 bytes
  8132 ;; Hardware stack levels used:    1
  8133 ;; Hardware stack levels required when called:    7
  8134 ;; This function calls:
  8135 ;;		_SendAckMessage
  8136 ;; This function is called by:
  8137 ;;		_GroupAdc
  8138 ;; This function uses a non-reentrant model
  8139 ;;
  8140                           
  8141                           	psect	text31
  8142  0040EA                     __ptext31:
  8143                           	opt stack 0
  8144  0040EA                     _SetChannelMode:
  8145                           	opt stack 21
  8146                           
  8147                           ;AdcApp.c: 32: adcSampleMode = data[0];
  8148                           
  8149                           ;incstack = 0
  8150  0040EA  C02C  FFD9         	movff	SetChannelMode@data,fsr2l
  8151  0040EE  C02D  FFDA         	movff	SetChannelMode@data+1,fsr2h
  8152  0040F2  50DF               	movf	indf2,w,c
  8153  0040F4  6E3B               	movwf	_adcSampleMode,c
  8154                           
  8155                           ;AdcApp.c: 33: if (adcSampleMode == SINGLE_CHANNEL)
  8156  0040F6  043B               	decf	_adcSampleMode,w,c
  8157  0040F8  A4D8               	btfss	status,2,c
  8158  0040FA  D009               	goto	l122
  8159                           
  8160                           ;AdcApp.c: 34: {
  8161                           ;AdcApp.c: 35: channel = data[1];
  8162  0040FC  EE20 F001          	lfsr	2,1
  8163  004100  502C               	movf	SetChannelMode@data,w,c
  8164  004102  26D9               	addwf	fsr2l,f,c
  8165  004104  502D               	movf	SetChannelMode@data+1,w,c
  8166  004106  22DA               	addwfc	fsr2h,f,c
  8167  004108  50DF               	movf	indf2,w,c
  8168  00410A  0100               	movlb	0	; () banked
  8169  00410C  6FF0               	movwf	_channel& (0+255),b
  8170  00410E                     l122:
  8171                           
  8172                           ;AdcApp.c: 36: }
  8173                           ;AdcApp.c: 37: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_CHANNEL_MODE);
  8174                           
  8175                           ; BSR set to: 0
  8176  00410E  0E32               	movlw	50
  8177  004110  6E24               	movwf	SendAckMessage@inRequest,c
  8178  004112  0E03               	movlw	3
  8179  004114  EC1D  F01E         	call	_SendAckMessage
  8180  004118  0012               	return		;funcret
  8181  00411A                     __end_of_SetChannelMode:
  8182                           	opt stack 0
  8183                           tosu	equ	0xFFF
  8184                           tosh	equ	0xFFE
  8185                           tosl	equ	0xFFD
  8186                           pclath	equ	0xFFA
  8187                           tblptru	equ	0xFF8
  8188                           tblptrh	equ	0xFF7
  8189                           tblptrl	equ	0xFF6
  8190                           tablat	equ	0xFF5
  8191                           prodh	equ	0xFF4
  8192                           prodl	equ	0xFF3
  8193                           postinc0	equ	0xFEE
  8194                           plusw0	equ	0xFEB
  8195                           wreg	equ	0xFE8
  8196                           indf1	equ	0xFE7
  8197                           postdec1	equ	0xFE5
  8198                           fsr1h	equ	0xFE2
  8199                           fsr1l	equ	0xFE1
  8200                           indf2	equ	0xFDF
  8201                           postinc2	equ	0xFDE
  8202                           postdec2	equ	0xFDD
  8203                           plusw2	equ	0xFDB
  8204                           fsr2h	equ	0xFDA
  8205                           fsr2l	equ	0xFD9
  8206                           status	equ	0xFD8
  8207                           
  8208 ;; *************** function _EUSART1_Read *****************
  8209 ;; Defined at:
  8210 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  8211 ;; Parameters:    Size  Location     Type
  8212 ;;		None
  8213 ;; Auto vars:     Size  Location     Type
  8214 ;;  readValue       2   24[COMRAM] unsigned int 
  8215 ;; Return value:  Size  Location     Type
  8216 ;;                  1    wreg      unsigned char 
  8217 ;; Registers used:
  8218 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8219 ;; Tracked objects:
  8220 ;;		On entry : 0/0
  8221 ;;		On exit  : 0/0
  8222 ;;		Unchanged: 0/0
  8223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8224 ;;      Params:         0       0       0       0       0       0       0
  8225 ;;      Locals:         2       0       0       0       0       0       0
  8226 ;;      Temps:          1       0       0       0       0       0       0
  8227 ;;      Totals:         3       0       0       0       0       0       0
  8228 ;;Total ram usage:        3 bytes
  8229 ;; Hardware stack levels used:    1
  8230 ;; Hardware stack levels required when called:    4
  8231 ;; This function calls:
  8232 ;;		Nothing
  8233 ;; This function is called by:
  8234 ;;		_readUartMessage
  8235 ;; This function uses a non-reentrant model
  8236 ;;
  8237                           
  8238                           	psect	text32
  8239  003CDA                     __ptext32:
  8240                           	opt stack 0
  8241  003CDA                     _EUSART1_Read:
  8242                           	opt stack 25
  8243                           
  8244                           ;eusart1.c: 112: uint16_t readValue = 0;
  8245                           
  8246                           ;incstack = 0
  8247  003CDA  0E00               	movlw	0
  8248  003CDC  6E1A               	movwf	EUSART1_Read@readValue+1,c
  8249  003CDE  0E00               	movlw	0
  8250  003CE0  6E19               	movwf	EUSART1_Read@readValue,c
  8251                           
  8252                           ;eusart1.c: 119: if (eusart1RxCount == 0)
  8253  003CE2  0100               	movlb	0	; () banked
  8254  003CE4  51EF               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  8255  003CE6  A4D8               	btfss	status,2,c
  8256  003CE8  D002               	goto	l906
  8257                           
  8258                           ; BSR set to: 0
  8259                           ;eusart1.c: 120: {
  8260                           ;eusart1.c: 121: return readValue;
  8261  003CEA  5019               	movf	EUSART1_Read@readValue,w,c
  8262                           
  8263                           ; BSR set to: 0
  8264  003CEC  0012               	return	
  8265  003CEE                     l906:
  8266                           
  8267                           ; BSR set to: 0
  8268                           ;eusart1.c: 122: }
  8269                           ;eusart1.c: 124: readValue = eusart1RxBuffer[eusart1RxTail++];
  8270                           
  8271                           ; BSR set to: 0
  8272  003CEE  5037               	movf	_eusart1RxTail,w,c	;volatile
  8273  003CF0  0D01               	mullw	1
  8274  003CF2  0E00               	movlw	low _eusart1RxBuffer
  8275  003CF4  24F3               	addwf	prodl,w,c
  8276  003CF6  6ED9               	movwf	fsr2l,c
  8277  003CF8  0E01               	movlw	high _eusart1RxBuffer
  8278  003CFA  20F4               	addwfc	prodh,w,c
  8279  003CFC  6EDA               	movwf	fsr2h,c
  8280  003CFE  50DF               	movf	indf2,w,c
  8281  003D00  6E18               	movwf	??_EUSART1_Read& (0+255),c
  8282  003D02  5018               	movf	??_EUSART1_Read,w,c
  8283  003D04  6E19               	movwf	EUSART1_Read@readValue,c
  8284  003D06  6A1A               	clrf	EUSART1_Read@readValue+1,c
  8285                           
  8286                           ; BSR set to: 0
  8287  003D08  2A37               	incf	_eusart1RxTail,f,c	;volatile
  8288                           
  8289                           ; BSR set to: 0
  8290                           ;eusart1.c: 125: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
  8291  003D0A  0E27               	movlw	39
  8292  003D0C  6437               	cpfsgt	_eusart1RxTail,c	;volatile
  8293  003D0E  D002               	goto	l908
  8294                           
  8295                           ; BSR set to: 0
  8296                           ;eusart1.c: 126: {
  8297                           ;eusart1.c: 127: eusart1RxTail = 0;
  8298  003D10  0E00               	movlw	0
  8299  003D12  6E37               	movwf	_eusart1RxTail,c	;volatile
  8300  003D14                     l908:
  8301                           
  8302                           ; BSR set to: 0
  8303                           ;eusart1.c: 128: }
  8304                           ;eusart1.c: 129: PIE1bits.RC1IE = 0;
  8305                           
  8306                           ; BSR set to: 0
  8307  003D14  9A9D               	bcf	3997,5,c	;volatile
  8308                           
  8309                           ; BSR set to: 0
  8310                           ;eusart1.c: 130: eusart1RxCount--;
  8311  003D16  07EF               	decf	_eusart1RxCount& (0+255),f,b	;volatile
  8312                           
  8313                           ; BSR set to: 0
  8314                           ;eusart1.c: 131: PIE1bits.RC1IE = 1;
  8315  003D18  8A9D               	bsf	3997,5,c	;volatile
  8316                           
  8317                           ; BSR set to: 0
  8318                           ;eusart1.c: 133: return readValue;
  8319  003D1A  5019               	movf	EUSART1_Read@readValue,w,c
  8320  003D1C  0012               	return	
  8321  003D1E                     __end_of_EUSART1_Read:
  8322                           	opt stack 0
  8323                           tosu	equ	0xFFF
  8324                           tosh	equ	0xFFE
  8325                           tosl	equ	0xFFD
  8326                           pclath	equ	0xFFA
  8327                           tblptru	equ	0xFF8
  8328                           tblptrh	equ	0xFF7
  8329                           tblptrl	equ	0xFF6
  8330                           tablat	equ	0xFF5
  8331                           prodh	equ	0xFF4
  8332                           prodl	equ	0xFF3
  8333                           postinc0	equ	0xFEE
  8334                           plusw0	equ	0xFEB
  8335                           wreg	equ	0xFE8
  8336                           indf1	equ	0xFE7
  8337                           postdec1	equ	0xFE5
  8338                           fsr1h	equ	0xFE2
  8339                           fsr1l	equ	0xFE1
  8340                           indf2	equ	0xFDF
  8341                           postinc2	equ	0xFDE
  8342                           postdec2	equ	0xFDD
  8343                           plusw2	equ	0xFDB
  8344                           fsr2h	equ	0xFDA
  8345                           fsr2l	equ	0xFD9
  8346                           status	equ	0xFD8
  8347                           
  8348 ;; *************** function _keepAliveSignalUart *****************
  8349 ;; Defined at:
  8350 ;;		line 93 in file "SystemStatus.c"
  8351 ;; Parameters:    Size  Location     Type
  8352 ;;		None
  8353 ;; Auto vars:     Size  Location     Type
  8354 ;;		None
  8355 ;; Return value:  Size  Location     Type
  8356 ;;                  1    wreg      void 
  8357 ;; Registers used:
  8358 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8359 ;; Tracked objects:
  8360 ;;		On entry : 0/0
  8361 ;;		On exit  : 0/0
  8362 ;;		Unchanged: 0/0
  8363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8364 ;;      Params:         0       0       0       0       0       0       0
  8365 ;;      Locals:         0       0       0       0       0       0       0
  8366 ;;      Temps:          0       0       0       0       0       0       0
  8367 ;;      Totals:         0       0       0       0       0       0       0
  8368 ;;Total ram usage:        0 bytes
  8369 ;; Hardware stack levels used:    1
  8370 ;; Hardware stack levels required when called:    7
  8371 ;; This function calls:
  8372 ;;		_SendAckMessage
  8373 ;; This function is called by:
  8374 ;;		_main
  8375 ;; This function uses a non-reentrant model
  8376 ;;
  8377                           
  8378                           	psect	text33
  8379  0044F2                     __ptext33:
  8380                           	opt stack 0
  8381  0044F2                     _keepAliveSignalUart:
  8382                           	opt stack 23
  8383                           
  8384                           ;SystemStatus.c: 95: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_KEEP_A
      +                          LIVE);
  8385                           
  8386                           ; BSR set to: 0
  8387                           ;incstack = 0
  8388  0044F2  0E15               	movlw	21
  8389  0044F4  6E24               	movwf	SendAckMessage@inRequest,c
  8390  0044F6  0E01               	movlw	1
  8391  0044F8  EC1D  F01E         	call	_SendAckMessage
  8392  0044FC  0012               	return		;funcret
  8393  0044FE                     __end_of_keepAliveSignalUart:
  8394                           	opt stack 0
  8395                           tosu	equ	0xFFF
  8396                           tosh	equ	0xFFE
  8397                           tosl	equ	0xFFD
  8398                           pclath	equ	0xFFA
  8399                           tblptru	equ	0xFF8
  8400                           tblptrh	equ	0xFF7
  8401                           tblptrl	equ	0xFF6
  8402                           tablat	equ	0xFF5
  8403                           prodh	equ	0xFF4
  8404                           prodl	equ	0xFF3
  8405                           postinc0	equ	0xFEE
  8406                           plusw0	equ	0xFEB
  8407                           wreg	equ	0xFE8
  8408                           indf1	equ	0xFE7
  8409                           postdec1	equ	0xFE5
  8410                           fsr1h	equ	0xFE2
  8411                           fsr1l	equ	0xFE1
  8412                           indf2	equ	0xFDF
  8413                           postinc2	equ	0xFDE
  8414                           postdec2	equ	0xFDD
  8415                           plusw2	equ	0xFDB
  8416                           fsr2h	equ	0xFDA
  8417                           fsr2l	equ	0xFD9
  8418                           status	equ	0xFD8
  8419                           
  8420 ;; *************** function _keepAliveSignalLed *****************
  8421 ;; Defined at:
  8422 ;;		line 35 in file "LedsApp.c"
  8423 ;; Parameters:    Size  Location     Type
  8424 ;;		None
  8425 ;; Auto vars:     Size  Location     Type
  8426 ;;		None
  8427 ;; Return value:  Size  Location     Type
  8428 ;;                  1    wreg      void 
  8429 ;; Registers used:
  8430 ;;		wreg, status,2, status,0
  8431 ;; Tracked objects:
  8432 ;;		On entry : 0/0
  8433 ;;		On exit  : 0/0
  8434 ;;		Unchanged: 0/0
  8435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8436 ;;      Params:         0       0       0       0       0       0       0
  8437 ;;      Locals:         0       0       0       0       0       0       0
  8438 ;;      Temps:          1       0       0       0       0       0       0
  8439 ;;      Totals:         1       0       0       0       0       0       0
  8440 ;;Total ram usage:        1 bytes
  8441 ;; Hardware stack levels used:    1
  8442 ;; Hardware stack levels required when called:    4
  8443 ;; This function calls:
  8444 ;;		Nothing
  8445 ;; This function is called by:
  8446 ;;		_main
  8447 ;; This function uses a non-reentrant model
  8448 ;;
  8449                           
  8450                           	psect	text34
  8451  00440A                     __ptext34:
  8452                           	opt stack 0
  8453  00440A                     _keepAliveSignalLed:
  8454                           	opt stack 26
  8455                           
  8456                           ;LedsApp.c: 37: LATCbits.LATC0 = !LATCbits.LATC0;
  8457                           
  8458                           ;incstack = 0
  8459  00440A  B08B               	btfsc	3979,0,c	;volatile
  8460  00440C  D003               	goto	u6180
  8461  00440E  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  8462  004410  2A18               	incf	??_keepAliveSignalLed& (0+255),f,c
  8463  004412  D001               	goto	u6198
  8464  004414                     u6180:
  8465  004414  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  8466  004416                     u6198:
  8467  004416  508B               	movf	3979,w,c	;volatile
  8468  004418  1818               	xorwf	??_keepAliveSignalLed,w,c
  8469  00441A  0BFE               	andlw	-2
  8470  00441C  1818               	xorwf	??_keepAliveSignalLed,w,c
  8471  00441E  6E8B               	movwf	3979,c	;volatile
  8472  004420  0012               	return		;funcret
  8473  004422                     __end_of_keepAliveSignalLed:
  8474                           	opt stack 0
  8475                           tosu	equ	0xFFF
  8476                           tosh	equ	0xFFE
  8477                           tosl	equ	0xFFD
  8478                           pclath	equ	0xFFA
  8479                           tblptru	equ	0xFF8
  8480                           tblptrh	equ	0xFF7
  8481                           tblptrl	equ	0xFF6
  8482                           tablat	equ	0xFF5
  8483                           prodh	equ	0xFF4
  8484                           prodl	equ	0xFF3
  8485                           postinc0	equ	0xFEE
  8486                           plusw0	equ	0xFEB
  8487                           wreg	equ	0xFE8
  8488                           indf1	equ	0xFE7
  8489                           postdec1	equ	0xFE5
  8490                           fsr1h	equ	0xFE2
  8491                           fsr1l	equ	0xFE1
  8492                           indf2	equ	0xFDF
  8493                           postinc2	equ	0xFDE
  8494                           postdec2	equ	0xFDD
  8495                           plusw2	equ	0xFDB
  8496                           fsr2h	equ	0xFDA
  8497                           fsr2l	equ	0xFD9
  8498                           status	equ	0xFD8
  8499                           
  8500 ;; *************** function _SynthLdDetect *****************
  8501 ;; Defined at:
  8502 ;;		line 204 in file "SyntApp.c"
  8503 ;; Parameters:    Size  Location     Type
  8504 ;;		None
  8505 ;; Auto vars:     Size  Location     Type
  8506 ;;		None
  8507 ;; Return value:  Size  Location     Type
  8508 ;;                  1    wreg      void 
  8509 ;; Registers used:
  8510 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8511 ;; Tracked objects:
  8512 ;;		On entry : 0/0
  8513 ;;		On exit  : 0/0
  8514 ;;		Unchanged: 0/0
  8515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8516 ;;      Params:         0       0       0       0       0       0       0
  8517 ;;      Locals:         0       0       0       0       0       0       0
  8518 ;;      Temps:          0       0       0       0       0       0       0
  8519 ;;      Totals:         0       0       0       0       0       0       0
  8520 ;;Total ram usage:        0 bytes
  8521 ;; Hardware stack levels used:    1
  8522 ;; Hardware stack levels required when called:   11
  8523 ;; This function calls:
  8524 ;;		_BlinkErrorLeds
  8525 ;;		_InitSynth
  8526 ;;		___awmod
  8527 ;; This function is called by:
  8528 ;;		_main
  8529 ;; This function uses a non-reentrant model
  8530 ;;
  8531                           
  8532                           	psect	text35
  8533  0026A0                     __ptext35:
  8534                           	opt stack 0
  8535  0026A0                     _SynthLdDetect:
  8536                           	opt stack 19
  8537                           
  8538                           ;SyntApp.c: 208: if(PORTDbits.RD4 == 0)
  8539                           
  8540                           ;incstack = 0
  8541  0026A0  B883               	btfsc	3971,4,c	;volatile
  8542  0026A2  D020               	goto	l568
  8543                           
  8544                           ;SyntApp.c: 209: {
  8545                           ;SyntApp.c: 210: if(synthLdRxCnt > 0)
  8546  0026A4  0100               	movlb	0	; () banked
  8547  0026A6  51F9               	movf	_synthLdRxCnt& (0+255),w,b
  8548  0026A8  0A80               	xorlw	128
  8549  0026AA  0F7F               	addlw	-129
  8550  0026AC  A0D8               	btfss	status,0,c
  8551  0026AE  D006               	goto	l569
  8552                           
  8553                           ; BSR set to: 0
  8554                           ;SyntApp.c: 211: {
  8555                           ;SyntApp.c: 212: InitSynth(SYNTH_RX);
  8556  0026B0  0E01               	movlw	1
  8557  0026B2  EC54  F007         	call	_InitSynth
  8558                           
  8559                           ;SyntApp.c: 213: synthLdRxCnt--;
  8560  0026B6  0100               	movlb	0	; () banked
  8561  0026B8  07F9               	decf	_synthLdRxCnt& (0+255),f,b
  8562                           
  8563                           ;SyntApp.c: 214: }
  8564  0026BA  D003               	goto	l570
  8565  0026BC                     l569:
  8566                           
  8567                           ; BSR set to: 0
  8568                           ;SyntApp.c: 215: else
  8569                           ;SyntApp.c: 216: {
  8570                           ;SyntApp.c: 217: BlinkErrorLeds(FAIL_SYNTH_RX_LATCH);
  8571                           
  8572                           ; BSR set to: 0
  8573  0026BC  0E02               	movlw	2
  8574  0026BE  EC61  F01C         	call	_BlinkErrorLeds
  8575  0026C2                     l570:
  8576                           
  8577                           ;SyntApp.c: 218: }
  8578                           ;SyntApp.c: 219: synthLdRxArray[synthLdRxArrayCnt++ % 12] = UNLOCK;
  8579  0026C2  C0E5  F018         	movff	_synthLdRxArrayCnt,___awmod@dividend
  8580  0026C6  6A19               	clrf	___awmod@dividend+1,c
  8581  0026C8  0E00               	movlw	0
  8582  0026CA  6E1B               	movwf	___awmod@divisor+1,c
  8583  0026CC  0E0C               	movlw	12
  8584  0026CE  6E1A               	movwf	___awmod@divisor,c
  8585  0026D0  EC8F  F01B         	call	___awmod	;wreg free
  8586  0026D4  0EA7               	movlw	low _synthLdRxArray
  8587  0026D6  2418               	addwf	?___awmod,w,c
  8588  0026D8  6ED9               	movwf	fsr2l,c
  8589  0026DA  0E01               	movlw	high _synthLdRxArray
  8590  0026DC  2019               	addwfc	?___awmod+1,w,c
  8591  0026DE  6EDA               	movwf	fsr2h,c
  8592  0026E0  0E00               	movlw	0
  8593  0026E2  D013               	goto	L2
  8594  0026E4                     l568:
  8595                           
  8596                           ;SyntApp.c: 221: else
  8597                           ;SyntApp.c: 222: {
  8598                           ;SyntApp.c: 223: synthLdRxCnt = 2;
  8599                           
  8600                           ; BSR set to: 0
  8601  0026E4  0E02               	movlw	2
  8602  0026E6  0100               	movlb	0	; () banked
  8603  0026E8  6FF9               	movwf	_synthLdRxCnt& (0+255),b
  8604                           
  8605                           ; BSR set to: 0
  8606                           ;SyntApp.c: 224: synthLdRxArray[synthLdRxArrayCnt++ % 12] = LOCK;
  8607  0026EA  C0E5  F018         	movff	_synthLdRxArrayCnt,___awmod@dividend
  8608  0026EE  6A19               	clrf	___awmod@dividend+1,c
  8609  0026F0  0E00               	movlw	0
  8610  0026F2  6E1B               	movwf	___awmod@divisor+1,c
  8611  0026F4  0E0C               	movlw	12
  8612  0026F6  6E1A               	movwf	___awmod@divisor,c
  8613  0026F8  EC8F  F01B         	call	___awmod	;wreg free
  8614  0026FC  0EA7               	movlw	low _synthLdRxArray
  8615  0026FE  2418               	addwf	?___awmod,w,c
  8616  002700  6ED9               	movwf	fsr2l,c
  8617  002702  0E01               	movlw	high _synthLdRxArray
  8618  002704  2019               	addwfc	?___awmod+1,w,c
  8619  002706  6EDA               	movwf	fsr2h,c
  8620  002708  0E01               	movlw	1
  8621  00270A                     L2:
  8622  00270A  6EDF               	movwf	indf2,c
  8623  00270C  0100               	movlb	0	; () banked
  8624  00270E  2BE5               	incf	_synthLdRxArrayCnt& (0+255),f,b
  8625                           
  8626                           ; BSR set to: 0
  8627                           ;SyntApp.c: 225: }
  8628                           ;SyntApp.c: 230: if(PORTDbits.RD1 == 0)
  8629                           
  8630                           ; BSR set to: 0
  8631  002710  B283               	btfsc	3971,1,c	;volatile
  8632  002712  D023               	goto	l572
  8633                           
  8634                           ; BSR set to: 0
  8635                           ;SyntApp.c: 231: {
  8636                           ;SyntApp.c: 232: if(synthLdTxCnt > 0)
  8637  002714  0101               	movlb	1	; () banked
  8638  002716  51E1               	movf	_synthLdTxCnt& (0+255),w,b
  8639  002718  0A80               	xorlw	128
  8640  00271A  0F7F               	addlw	-129
  8641  00271C  A0D8               	btfss	status,0,c
  8642  00271E  D006               	goto	l573
  8643                           
  8644                           ; BSR set to: 1
  8645                           ;SyntApp.c: 233: {
  8646                           ;SyntApp.c: 234: InitSynth(SYNTH_TX);
  8647  002720  0E00               	movlw	0
  8648  002722  EC54  F007         	call	_InitSynth
  8649                           
  8650                           ;SyntApp.c: 235: synthLdTxCnt--;
  8651  002726  0101               	movlb	1	; () banked
  8652  002728  07E1               	decf	_synthLdTxCnt& (0+255),f,b
  8653                           
  8654                           ;SyntApp.c: 236: }
  8655  00272A  D003               	goto	l574
  8656  00272C                     l573:
  8657                           
  8658                           ; BSR set to: 1
  8659                           ;SyntApp.c: 237: else
  8660                           ;SyntApp.c: 238: {
  8661                           ;SyntApp.c: 239: BlinkErrorLeds(FAIL_SYNTH_TX_LATCH);
  8662                           
  8663                           ; BSR set to: 1
  8664  00272C  0E02               	movlw	2
  8665  00272E  EC61  F01C         	call	_BlinkErrorLeds
  8666  002732                     l574:
  8667                           
  8668                           ;SyntApp.c: 240: }
  8669                           ;SyntApp.c: 241: synthLdTxArray[synthLdTxArrayCnt++ % 12] = UNLOCK;
  8670  002732  C0E4  F018         	movff	_synthLdTxArrayCnt,___awmod@dividend
  8671  002736  6A19               	clrf	___awmod@dividend+1,c
  8672  002738  0E00               	movlw	0
  8673  00273A  6E1B               	movwf	___awmod@divisor+1,c
  8674  00273C  0E0C               	movlw	12
  8675  00273E  6E1A               	movwf	___awmod@divisor,c
  8676  002740  EC8F  F01B         	call	___awmod	;wreg free
  8677  002744  0E9B               	movlw	low _synthLdTxArray
  8678  002746  2418               	addwf	?___awmod,w,c
  8679  002748  6ED9               	movwf	fsr2l,c
  8680  00274A  0E01               	movlw	high _synthLdTxArray
  8681  00274C  2019               	addwfc	?___awmod+1,w,c
  8682  00274E  6EDA               	movwf	fsr2h,c
  8683  002750  0E00               	movlw	0
  8684  002752  6EDF               	movwf	indf2,c
  8685  002754  0100               	movlb	0	; () banked
  8686  002756  2BE4               	incf	_synthLdTxArrayCnt& (0+255),f,b
  8687                           
  8688                           ;SyntApp.c: 242: }
  8689  002758  0012               	return	
  8690  00275A                     l572:
  8691                           
  8692                           ; BSR set to: 0
  8693                           ;SyntApp.c: 243: else
  8694                           ;SyntApp.c: 244: {
  8695                           ;SyntApp.c: 245: synthLdTxCnt = 2;
  8696                           
  8697                           ; BSR set to: 0
  8698  00275A  0E02               	movlw	2
  8699  00275C  0101               	movlb	1	; () banked
  8700  00275E  6FE1               	movwf	_synthLdTxCnt& (0+255),b
  8701                           
  8702                           ; BSR set to: 1
  8703                           ;SyntApp.c: 246: synthLdTxArray[synthLdTxArrayCnt++ % 12] = LOCK;
  8704  002760  C0E4  F018         	movff	_synthLdTxArrayCnt,___awmod@dividend
  8705  002764  6A19               	clrf	___awmod@dividend+1,c
  8706  002766  0E00               	movlw	0
  8707  002768  6E1B               	movwf	___awmod@divisor+1,c
  8708  00276A  0E0C               	movlw	12
  8709  00276C  6E1A               	movwf	___awmod@divisor,c
  8710  00276E  EC8F  F01B         	call	___awmod	;wreg free
  8711  002772  0E9B               	movlw	low _synthLdTxArray
  8712  002774  2418               	addwf	?___awmod,w,c
  8713  002776  6ED9               	movwf	fsr2l,c
  8714  002778  0E01               	movlw	high _synthLdTxArray
  8715  00277A  2019               	addwfc	?___awmod+1,w,c
  8716  00277C  6EDA               	movwf	fsr2h,c
  8717  00277E  0E01               	movlw	1
  8718  002780  6EDF               	movwf	indf2,c
  8719  002782  0100               	movlb	0	; () banked
  8720  002784  2BE4               	incf	_synthLdTxArrayCnt& (0+255),f,b
  8721  002786  0012               	return	
  8722  002788                     __end_of_SynthLdDetect:
  8723                           	opt stack 0
  8724                           tosu	equ	0xFFF
  8725                           tosh	equ	0xFFE
  8726                           tosl	equ	0xFFD
  8727                           pclath	equ	0xFFA
  8728                           tblptru	equ	0xFF8
  8729                           tblptrh	equ	0xFF7
  8730                           tblptrl	equ	0xFF6
  8731                           tablat	equ	0xFF5
  8732                           prodh	equ	0xFF4
  8733                           prodl	equ	0xFF3
  8734                           postinc0	equ	0xFEE
  8735                           plusw0	equ	0xFEB
  8736                           wreg	equ	0xFE8
  8737                           indf1	equ	0xFE7
  8738                           postdec1	equ	0xFE5
  8739                           fsr1h	equ	0xFE2
  8740                           fsr1l	equ	0xFE1
  8741                           indf2	equ	0xFDF
  8742                           postinc2	equ	0xFDE
  8743                           postdec2	equ	0xFDD
  8744                           plusw2	equ	0xFDB
  8745                           fsr2h	equ	0xFDA
  8746                           fsr2l	equ	0xFD9
  8747                           status	equ	0xFD8
  8748                           
  8749 ;; *************** function ___awmod *****************
  8750 ;; Defined at:
  8751 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  8752 ;; Parameters:    Size  Location     Type
  8753 ;;  dividend        2   23[COMRAM] int 
  8754 ;;  divisor         2   25[COMRAM] int 
  8755 ;; Auto vars:     Size  Location     Type
  8756 ;;  sign            1   28[COMRAM] unsigned char 
  8757 ;;  counter         1   27[COMRAM] unsigned char 
  8758 ;; Return value:  Size  Location     Type
  8759 ;;                  2   23[COMRAM] int 
  8760 ;; Registers used:
  8761 ;;		wreg, status,2, status,0
  8762 ;; Tracked objects:
  8763 ;;		On entry : 0/0
  8764 ;;		On exit  : 0/0
  8765 ;;		Unchanged: 0/0
  8766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8767 ;;      Params:         4       0       0       0       0       0       0
  8768 ;;      Locals:         2       0       0       0       0       0       0
  8769 ;;      Temps:          0       0       0       0       0       0       0
  8770 ;;      Totals:         6       0       0       0       0       0       0
  8771 ;;Total ram usage:        6 bytes
  8772 ;; Hardware stack levels used:    1
  8773 ;; Hardware stack levels required when called:    4
  8774 ;; This function calls:
  8775 ;;		Nothing
  8776 ;; This function is called by:
  8777 ;;		_SynthLdDetect
  8778 ;; This function uses a non-reentrant model
  8779 ;;
  8780                           
  8781                           	psect	text36
  8782  00371E                     __ptext36:
  8783                           	opt stack 0
  8784  00371E                     ___awmod:
  8785                           	opt stack 25
  8786                           
  8787                           ; BSR set to: 0
  8788                           ;incstack = 0
  8789  00371E  0E00               	movlw	0
  8790  003720  6E1D               	movwf	___awmod@sign,c
  8791  003722  AE19               	btfss	___awmod@dividend+1,7,c
  8792  003724  D006               	goto	l1792
  8793  003726  6C18               	negf	___awmod@dividend,c
  8794  003728  1E19               	comf	___awmod@dividend+1,f,c
  8795  00372A  B0D8               	btfsc	status,0,c
  8796  00372C  2A19               	incf	___awmod@dividend+1,f,c
  8797  00372E  0E01               	movlw	1
  8798  003730  6E1D               	movwf	___awmod@sign,c
  8799  003732                     l1792:
  8800  003732  AE1B               	btfss	___awmod@divisor+1,7,c
  8801  003734  D004               	goto	l1793
  8802  003736  6C1A               	negf	___awmod@divisor,c
  8803  003738  1E1B               	comf	___awmod@divisor+1,f,c
  8804  00373A  B0D8               	btfsc	status,0,c
  8805  00373C  2A1B               	incf	___awmod@divisor+1,f,c
  8806  00373E                     l1793:
  8807  00373E  501A               	movf	___awmod@divisor,w,c
  8808  003740  101B               	iorwf	___awmod@divisor+1,w,c
  8809  003742  B4D8               	btfsc	status,2,c
  8810  003744  D018               	goto	l1800
  8811  003746  0E01               	movlw	1
  8812  003748  6E1C               	movwf	___awmod@counter,c
  8813  00374A  D004               	goto	l1795
  8814  00374C  90D8               	bcf	status,0,c
  8815  00374E  361A               	rlcf	___awmod@divisor,f,c
  8816  003750  361B               	rlcf	___awmod@divisor+1,f,c
  8817  003752  2A1C               	incf	___awmod@counter,f,c
  8818  003754                     l1795:
  8819  003754  AE1B               	btfss	___awmod@divisor+1,7,c
  8820  003756  D7FA               	goto	l1796
  8821  003758                     u6100:
  8822  003758  501A               	movf	___awmod@divisor,w,c
  8823  00375A  5C18               	subwf	___awmod@dividend,w,c
  8824  00375C  501B               	movf	___awmod@divisor+1,w,c
  8825  00375E  5819               	subwfb	___awmod@dividend+1,w,c
  8826  003760  A0D8               	btfss	status,0,c
  8827  003762  D004               	goto	l1799
  8828  003764  501A               	movf	___awmod@divisor,w,c
  8829  003766  5E18               	subwf	___awmod@dividend,f,c
  8830  003768  501B               	movf	___awmod@divisor+1,w,c
  8831  00376A  5A19               	subwfb	___awmod@dividend+1,f,c
  8832  00376C                     l1799:
  8833  00376C  90D8               	bcf	status,0,c
  8834  00376E  321B               	rrcf	___awmod@divisor+1,f,c
  8835  003770  321A               	rrcf	___awmod@divisor,f,c
  8836  003772  2E1C               	decfsz	___awmod@counter,f,c
  8837  003774  D7F1               	goto	u6100
  8838  003776                     l1800:
  8839  003776  501D               	movf	___awmod@sign,w,c
  8840  003778  B4D8               	btfsc	status,2,c
  8841  00377A  D004               	goto	l1801
  8842  00377C  6C18               	negf	___awmod@dividend,c
  8843  00377E  1E19               	comf	___awmod@dividend+1,f,c
  8844  003780  B0D8               	btfsc	status,0,c
  8845  003782  2A19               	incf	___awmod@dividend+1,f,c
  8846  003784                     l1801:
  8847  003784  C018  F018         	movff	___awmod@dividend,?___awmod
  8848  003788  C019  F019         	movff	___awmod@dividend+1,?___awmod+1
  8849  00378C  0012               	return	
  8850  00378E                     __end_of___awmod:
  8851                           	opt stack 0
  8852                           tosu	equ	0xFFF
  8853                           tosh	equ	0xFFE
  8854                           tosl	equ	0xFFD
  8855                           pclath	equ	0xFFA
  8856                           tblptru	equ	0xFF8
  8857                           tblptrh	equ	0xFF7
  8858                           tblptrl	equ	0xFF6
  8859                           tablat	equ	0xFF5
  8860                           prodh	equ	0xFF4
  8861                           prodl	equ	0xFF3
  8862                           postinc0	equ	0xFEE
  8863                           plusw0	equ	0xFEB
  8864                           wreg	equ	0xFE8
  8865                           indf1	equ	0xFE7
  8866                           postdec1	equ	0xFE5
  8867                           fsr1h	equ	0xFE2
  8868                           fsr1l	equ	0xFE1
  8869                           indf2	equ	0xFDF
  8870                           postinc2	equ	0xFDE
  8871                           postdec2	equ	0xFDD
  8872                           plusw2	equ	0xFDB
  8873                           fsr2h	equ	0xFDA
  8874                           fsr2l	equ	0xFD9
  8875                           status	equ	0xFD8
  8876                           
  8877 ;; *************** function _BlinkErrorLeds *****************
  8878 ;; Defined at:
  8879 ;;		line 13 in file "LedsApp.c"
  8880 ;; Parameters:    Size  Location     Type
  8881 ;;  state           1    wreg     enum E7596
  8882 ;; Auto vars:     Size  Location     Type
  8883 ;;  state           1   26[COMRAM] enum E7596
  8884 ;;  idx             2   27[COMRAM] int 
  8885 ;; Return value:  Size  Location     Type
  8886 ;;                  1    wreg      void 
  8887 ;; Registers used:
  8888 ;;		wreg, status,2, status,0
  8889 ;; Tracked objects:
  8890 ;;		On entry : 0/0
  8891 ;;		On exit  : 0/0
  8892 ;;		Unchanged: 0/0
  8893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8894 ;;      Params:         0       0       0       0       0       0       0
  8895 ;;      Locals:         3       0       0       0       0       0       0
  8896 ;;      Temps:          3       0       0       0       0       0       0
  8897 ;;      Totals:         6       0       0       0       0       0       0
  8898 ;;Total ram usage:        6 bytes
  8899 ;; Hardware stack levels used:    1
  8900 ;; Hardware stack levels required when called:    4
  8901 ;; This function calls:
  8902 ;;		Nothing
  8903 ;; This function is called by:
  8904 ;;		_SynthLdDetect
  8905 ;;		_main
  8906 ;; This function uses a non-reentrant model
  8907 ;;
  8908                           
  8909                           	psect	text37
  8910  0038C2                     __ptext37:
  8911                           	opt stack 0
  8912  0038C2                     _BlinkErrorLeds:
  8913                           	opt stack 25
  8914                           
  8915                           ;incstack = 0
  8916                           ;BlinkErrorLeds@state stored from wreg
  8917  0038C2  6E1B               	movwf	BlinkErrorLeds@state,c
  8918                           
  8919                           ;LedsApp.c: 15: for(int idx = 0; idx < state; idx++)
  8920  0038C4  0E00               	movlw	0
  8921  0038C6  6E1D               	movwf	BlinkErrorLeds@idx+1,c
  8922  0038C8  0E00               	movlw	0
  8923  0038CA  6E1C               	movwf	BlinkErrorLeds@idx,c
  8924  0038CC                     l6412:
  8925  0038CC  501B               	movf	BlinkErrorLeds@state,w,c
  8926  0038CE  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
  8927  0038D0  6A19               	clrf	(??_BlinkErrorLeds+1)& (0+255),c
  8928  0038D2  5018               	movf	??_BlinkErrorLeds,w,c
  8929  0038D4  5C1C               	subwf	BlinkErrorLeds@idx,w,c
  8930  0038D6  501D               	movf	BlinkErrorLeds@idx+1,w,c
  8931  0038D8  0A80               	xorlw	128
  8932  0038DA  6E1A               	movwf	(??_BlinkErrorLeds+2)& (0+255),c
  8933  0038DC  5019               	movf	??_BlinkErrorLeds+1,w,c
  8934  0038DE  0A80               	xorlw	128
  8935  0038E0  581A               	subwfb	(??_BlinkErrorLeds+2)& (0+255),w,c
  8936  0038E2  B0D8               	btfsc	status,0,c
  8937  0038E4  0012               	return	
  8938                           
  8939                           ;LedsApp.c: 16: {
  8940                           ;LedsApp.c: 17: LATBbits.LATB4 = 0;
  8941  0038E6  988A               	bcf	3978,4,c	;volatile
  8942                           
  8943                           ;LedsApp.c: 18: _delay((unsigned long)((100)*(8000000/4000.0)));
  8944  0038E8  0E02               	movlw	2
  8945  0038EA  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
  8946  0038EC  0E04               	movlw	4
  8947  0038EE  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
  8948  0038F0  0EBA               	movlw	186
  8949  0038F2                     u9637:
  8950  0038F2  2EE8               	decfsz	wreg,f,c
  8951  0038F4  D7FE               	bra	u9637
  8952  0038F6  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
  8953  0038F8  D7FC               	bra	u9637
  8954  0038FA  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
  8955  0038FC  D7FA               	bra	u9637
  8956  0038FE  D000               	nop2	
  8957                           
  8958                           ;LedsApp.c: 19: LATBbits.LATB4 = 1;
  8959  003900  888A               	bsf	3978,4,c	;volatile
  8960                           
  8961                           ;LedsApp.c: 20: _delay((unsigned long)((100)*(8000000/4000.0)));
  8962  003902  0E02               	movlw	2
  8963  003904  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
  8964  003906  0E04               	movlw	4
  8965  003908  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
  8966  00390A  0EBA               	movlw	186
  8967  00390C                     u9647:
  8968  00390C  2EE8               	decfsz	wreg,f,c
  8969  00390E  D7FE               	bra	u9647
  8970  003910  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
  8971  003912  D7FC               	bra	u9647
  8972  003914  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
  8973  003916  D7FA               	bra	u9647
  8974  003918  D000               	nop2	
  8975  00391A  4A1C               	infsnz	BlinkErrorLeds@idx,f,c
  8976  00391C  2A1D               	incf	BlinkErrorLeds@idx+1,f,c
  8977  00391E  D7D6               	goto	l6412
  8978  003920                     __end_of_BlinkErrorLeds:
  8979                           	opt stack 0
  8980                           tosu	equ	0xFFF
  8981                           tosh	equ	0xFFE
  8982                           tosl	equ	0xFFD
  8983                           pclath	equ	0xFFA
  8984                           tblptru	equ	0xFF8
  8985                           tblptrh	equ	0xFF7
  8986                           tblptrl	equ	0xFF6
  8987                           tablat	equ	0xFF5
  8988                           prodh	equ	0xFF4
  8989                           prodl	equ	0xFF3
  8990                           postinc0	equ	0xFEE
  8991                           plusw0	equ	0xFEB
  8992                           wreg	equ	0xFE8
  8993                           indf1	equ	0xFE7
  8994                           postdec1	equ	0xFE5
  8995                           fsr1h	equ	0xFE2
  8996                           fsr1l	equ	0xFE1
  8997                           indf2	equ	0xFDF
  8998                           postinc2	equ	0xFDE
  8999                           postdec2	equ	0xFDD
  9000                           plusw2	equ	0xFDB
  9001                           fsr2h	equ	0xFDA
  9002                           fsr2l	equ	0xFD9
  9003                           status	equ	0xFD8
  9004                           
  9005 ;; *************** function _SetMcuSystem *****************
  9006 ;; Defined at:
  9007 ;;		line 11 in file "SystemSettings.c"
  9008 ;; Parameters:    Size  Location     Type
  9009 ;;		None
  9010 ;; Auto vars:     Size  Location     Type
  9011 ;;		None
  9012 ;; Return value:  Size  Location     Type
  9013 ;;                  1    wreg      void 
  9014 ;; Registers used:
  9015 ;;		wreg, status,2, status,0, cstack
  9016 ;; Tracked objects:
  9017 ;;		On entry : 0/0
  9018 ;;		On exit  : 0/0
  9019 ;;		Unchanged: 0/0
  9020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9021 ;;      Params:         0       0       0       0       0       0       0
  9022 ;;      Locals:         0       0       0       0       0       0       0
  9023 ;;      Temps:          0       0       0       0       0       0       0
  9024 ;;      Totals:         0       0       0       0       0       0       0
  9025 ;;Total ram usage:        0 bytes
  9026 ;; Hardware stack levels used:    1
  9027 ;; Hardware stack levels required when called:    7
  9028 ;; This function calls:
  9029 ;;		_SYSTEM_Initialize
  9030 ;; This function is called by:
  9031 ;;		_main
  9032 ;; This function uses a non-reentrant model
  9033 ;;
  9034                           
  9035                           	psect	text38
  9036  00450A                     __ptext38:
  9037                           	opt stack 0
  9038  00450A                     _SetMcuSystem:
  9039                           	opt stack 23
  9040                           
  9041                           ;SystemSettings.c: 14: SYSTEM_Initialize();
  9042                           
  9043                           ;incstack = 0
  9044  00450A  ECF8  F021         	call	_SYSTEM_Initialize	;wreg free
  9045                           
  9046                           ;SystemSettings.c: 21: (INTCONbits.GIE = 1);
  9047  00450E  8EF2               	bsf	intcon,7,c	;volatile
  9048                           
  9049                           ;SystemSettings.c: 27: (INTCONbits.PEIE = 1);
  9050  004510  8CF2               	bsf	intcon,6,c	;volatile
  9051  004512  0012               	return		;funcret
  9052  004514                     __end_of_SetMcuSystem:
  9053                           	opt stack 0
  9054                           tosu	equ	0xFFF
  9055                           tosh	equ	0xFFE
  9056                           tosl	equ	0xFFD
  9057                           pclath	equ	0xFFA
  9058                           tblptru	equ	0xFF8
  9059                           tblptrh	equ	0xFF7
  9060                           tblptrl	equ	0xFF6
  9061                           tablat	equ	0xFF5
  9062                           prodh	equ	0xFF4
  9063                           prodl	equ	0xFF3
  9064                           intcon	equ	0xFF2
  9065                           postinc0	equ	0xFEE
  9066                           plusw0	equ	0xFEB
  9067                           wreg	equ	0xFE8
  9068                           indf1	equ	0xFE7
  9069                           postdec1	equ	0xFE5
  9070                           fsr1h	equ	0xFE2
  9071                           fsr1l	equ	0xFE1
  9072                           indf2	equ	0xFDF
  9073                           postinc2	equ	0xFDE
  9074                           postdec2	equ	0xFDD
  9075                           plusw2	equ	0xFDB
  9076                           fsr2h	equ	0xFDA
  9077                           fsr2l	equ	0xFD9
  9078                           status	equ	0xFD8
  9079                           
  9080 ;; *************** function _SYSTEM_Initialize *****************
  9081 ;; Defined at:
  9082 ;;		line 112 in file "mcc_generated_files/mcc.c"
  9083 ;; Parameters:    Size  Location     Type
  9084 ;;		None
  9085 ;; Auto vars:     Size  Location     Type
  9086 ;;		None
  9087 ;; Return value:  Size  Location     Type
  9088 ;;                  1    wreg      void 
  9089 ;; Registers used:
  9090 ;;		wreg, status,2, status,0, cstack
  9091 ;; Tracked objects:
  9092 ;;		On entry : 0/0
  9093 ;;		On exit  : 0/0
  9094 ;;		Unchanged: 0/0
  9095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9096 ;;      Params:         0       0       0       0       0       0       0
  9097 ;;      Locals:         0       0       0       0       0       0       0
  9098 ;;      Temps:          0       0       0       0       0       0       0
  9099 ;;      Totals:         0       0       0       0       0       0       0
  9100 ;;Total ram usage:        0 bytes
  9101 ;; Hardware stack levels used:    1
  9102 ;; Hardware stack levels required when called:    6
  9103 ;; This function calls:
  9104 ;;		_ADC_Initialize
  9105 ;;		_EUSART1_Initialize
  9106 ;;		_INTERRUPT_Initialize
  9107 ;;		_OSCILLATOR_Initialize
  9108 ;;		_PIN_MANAGER_Initialize
  9109 ;;		_TMR0_Initialize
  9110 ;; This function is called by:
  9111 ;;		_SetMcuSystem
  9112 ;; This function uses a non-reentrant model
  9113 ;;
  9114                           
  9115                           	psect	text39
  9116  0043F0                     __ptext39:
  9117                           	opt stack 0
  9118  0043F0                     _SYSTEM_Initialize:
  9119                           	opt stack 23
  9120                           
  9121                           ;mcc.c: 114: INTERRUPT_Initialize();
  9122                           
  9123                           ;incstack = 0
  9124  0043F0  ECA7  F022         	call	_INTERRUPT_Initialize	;wreg free
  9125                           
  9126                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  9127  0043F4  EC2F  F01C         	call	_PIN_MANAGER_Initialize	;wreg free
  9128                           
  9129                           ;mcc.c: 116: OSCILLATOR_Initialize();
  9130  0043F8  EC5D  F022         	call	_OSCILLATOR_Initialize	;wreg free
  9131                           
  9132                           ;mcc.c: 117: TMR0_Initialize();
  9133  0043FC  EC29  F020         	call	_TMR0_Initialize	;wreg free
  9134                           
  9135                           ;mcc.c: 118: ADC_Initialize();
  9136  004400  EC11  F022         	call	_ADC_Initialize	;wreg free
  9137                           
  9138                           ;mcc.c: 119: EUSART1_Initialize();
  9139  004404  EC69  F01F         	call	_EUSART1_Initialize	;wreg free
  9140  004408  0012               	return		;funcret
  9141  00440A                     __end_of_SYSTEM_Initialize:
  9142                           	opt stack 0
  9143                           tosu	equ	0xFFF
  9144                           tosh	equ	0xFFE
  9145                           tosl	equ	0xFFD
  9146                           pclath	equ	0xFFA
  9147                           tblptru	equ	0xFF8
  9148                           tblptrh	equ	0xFF7
  9149                           tblptrl	equ	0xFF6
  9150                           tablat	equ	0xFF5
  9151                           prodh	equ	0xFF4
  9152                           prodl	equ	0xFF3
  9153                           intcon	equ	0xFF2
  9154                           postinc0	equ	0xFEE
  9155                           plusw0	equ	0xFEB
  9156                           wreg	equ	0xFE8
  9157                           indf1	equ	0xFE7
  9158                           postdec1	equ	0xFE5
  9159                           fsr1h	equ	0xFE2
  9160                           fsr1l	equ	0xFE1
  9161                           indf2	equ	0xFDF
  9162                           postinc2	equ	0xFDE
  9163                           postdec2	equ	0xFDD
  9164                           plusw2	equ	0xFDB
  9165                           fsr2h	equ	0xFDA
  9166                           fsr2l	equ	0xFD9
  9167                           status	equ	0xFD8
  9168                           
  9169 ;; *************** function _TMR0_Initialize *****************
  9170 ;; Defined at:
  9171 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  9172 ;; Parameters:    Size  Location     Type
  9173 ;;		None
  9174 ;; Auto vars:     Size  Location     Type
  9175 ;;		None
  9176 ;; Return value:  Size  Location     Type
  9177 ;;                  1    wreg      void 
  9178 ;; Registers used:
  9179 ;;		wreg, status,2, status,0, cstack
  9180 ;; Tracked objects:
  9181 ;;		On entry : 0/0
  9182 ;;		On exit  : 0/0
  9183 ;;		Unchanged: 0/0
  9184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9185 ;;      Params:         0       0       0       0       0       0       0
  9186 ;;      Locals:         0       0       0       0       0       0       0
  9187 ;;      Temps:          2       0       0       0       0       0       0
  9188 ;;      Totals:         2       0       0       0       0       0       0
  9189 ;;Total ram usage:        2 bytes
  9190 ;; Hardware stack levels used:    1
  9191 ;; Hardware stack levels required when called:    5
  9192 ;; This function calls:
  9193 ;;		_TMR0_SetInterruptHandler
  9194 ;; This function is called by:
  9195 ;;		_SYSTEM_Initialize
  9196 ;; This function uses a non-reentrant model
  9197 ;;
  9198                           
  9199                           	psect	text40
  9200  004052                     __ptext40:
  9201                           	opt stack 0
  9202  004052                     _TMR0_Initialize:
  9203                           	opt stack 23
  9204                           
  9205                           ;tmr0.c: 71: TMR0H = 0xF8;
  9206                           
  9207                           ;incstack = 0
  9208  004052  0EF8               	movlw	248
  9209  004054  6ED7               	movwf	4055,c	;volatile
  9210                           
  9211                           ;tmr0.c: 74: TMR0L = 0x2F;
  9212  004056  0E2F               	movlw	47
  9213  004058  6ED6               	movwf	4054,c	;volatile
  9214                           
  9215                           ;tmr0.c: 78: timer0ReloadVal = (TMR0H << 8) | TMR0L;
  9216  00405A  50D6               	movf	4054,w,c	;volatile
  9217  00405C  CFD7 F01A          	movff	4055,??_TMR0_Initialize	;volatile
  9218  004060  6A1B               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  9219  004062  C01A  F01B         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  9220  004066  6A1A               	clrf	??_TMR0_Initialize,c
  9221  004068  101A               	iorwf	??_TMR0_Initialize,w,c
  9222  00406A  6E46               	movwf	_timer0ReloadVal,c	;volatile
  9223  00406C  501B               	movf	??_TMR0_Initialize+1,w,c
  9224  00406E  6E47               	movwf	_timer0ReloadVal+1,c	;volatile
  9225                           
  9226                           ;tmr0.c: 81: INTCONbits.TMR0IF = 0;
  9227  004070  94F2               	bcf	intcon,2,c	;volatile
  9228                           
  9229                           ;tmr0.c: 84: INTCONbits.TMR0IE = 1;
  9230  004072  8AF2               	bsf	intcon,5,c	;volatile
  9231                           
  9232                           ;tmr0.c: 87: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  9233  004074  0E00               	movlw	0
  9234  004076  6E18               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  9235  004078  0E00               	movlw	0
  9236  00407A  6E19               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  9237  00407C  EC8A  F022         	call	_TMR0_SetInterruptHandler	;wreg free
  9238                           
  9239                           ;tmr0.c: 90: T0CON = 0x90;
  9240  004080  0E90               	movlw	144
  9241  004082  6ED5               	movwf	4053,c	;volatile
  9242  004084  0012               	return		;funcret
  9243  004086                     __end_of_TMR0_Initialize:
  9244                           	opt stack 0
  9245                           tosu	equ	0xFFF
  9246                           tosh	equ	0xFFE
  9247                           tosl	equ	0xFFD
  9248                           pclath	equ	0xFFA
  9249                           tblptru	equ	0xFF8
  9250                           tblptrh	equ	0xFF7
  9251                           tblptrl	equ	0xFF6
  9252                           tablat	equ	0xFF5
  9253                           prodh	equ	0xFF4
  9254                           prodl	equ	0xFF3
  9255                           intcon	equ	0xFF2
  9256                           postinc0	equ	0xFEE
  9257                           plusw0	equ	0xFEB
  9258                           wreg	equ	0xFE8
  9259                           indf1	equ	0xFE7
  9260                           postdec1	equ	0xFE5
  9261                           fsr1h	equ	0xFE2
  9262                           fsr1l	equ	0xFE1
  9263                           indf2	equ	0xFDF
  9264                           postinc2	equ	0xFDE
  9265                           postdec2	equ	0xFDD
  9266                           plusw2	equ	0xFDB
  9267                           fsr2h	equ	0xFDA
  9268                           fsr2l	equ	0xFD9
  9269                           status	equ	0xFD8
  9270                           
  9271 ;; *************** function _TMR0_SetInterruptHandler *****************
  9272 ;; Defined at:
  9273 ;;		line 179 in file "mcc_generated_files/tmr0.c"
  9274 ;; Parameters:    Size  Location     Type
  9275 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  9276 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  9277 ;; Auto vars:     Size  Location     Type
  9278 ;;		None
  9279 ;; Return value:  Size  Location     Type
  9280 ;;                  1    wreg      void 
  9281 ;; Registers used:
  9282 ;;		wreg, status,2, status,0
  9283 ;; Tracked objects:
  9284 ;;		On entry : 0/0
  9285 ;;		On exit  : 0/0
  9286 ;;		Unchanged: 0/0
  9287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9288 ;;      Params:         2       0       0       0       0       0       0
  9289 ;;      Locals:         0       0       0       0       0       0       0
  9290 ;;      Temps:          0       0       0       0       0       0       0
  9291 ;;      Totals:         2       0       0       0       0       0       0
  9292 ;;Total ram usage:        2 bytes
  9293 ;; Hardware stack levels used:    1
  9294 ;; Hardware stack levels required when called:    4
  9295 ;; This function calls:
  9296 ;;		Nothing
  9297 ;; This function is called by:
  9298 ;;		_TMR0_Initialize
  9299 ;; This function uses a non-reentrant model
  9300 ;;
  9301                           
  9302                           	psect	text41
  9303  004514                     __ptext41:
  9304                           	opt stack 0
  9305  004514                     _TMR0_SetInterruptHandler:
  9306                           	opt stack 23
  9307                           
  9308                           ;tmr0.c: 180: TMR0_InterruptHandler = InterruptHandler;
  9309                           
  9310                           ;incstack = 0
  9311  004514  C018  F1E2         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  9312  004518  C019  F1E3         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  9313  00451C  0012               	return		;funcret
  9314  00451E                     __end_of_TMR0_SetInterruptHandler:
  9315                           	opt stack 0
  9316                           tosu	equ	0xFFF
  9317                           tosh	equ	0xFFE
  9318                           tosl	equ	0xFFD
  9319                           pclath	equ	0xFFA
  9320                           tblptru	equ	0xFF8
  9321                           tblptrh	equ	0xFF7
  9322                           tblptrl	equ	0xFF6
  9323                           tablat	equ	0xFF5
  9324                           prodh	equ	0xFF4
  9325                           prodl	equ	0xFF3
  9326                           intcon	equ	0xFF2
  9327                           postinc0	equ	0xFEE
  9328                           plusw0	equ	0xFEB
  9329                           wreg	equ	0xFE8
  9330                           indf1	equ	0xFE7
  9331                           postdec1	equ	0xFE5
  9332                           fsr1h	equ	0xFE2
  9333                           fsr1l	equ	0xFE1
  9334                           indf2	equ	0xFDF
  9335                           postinc2	equ	0xFDE
  9336                           postdec2	equ	0xFDD
  9337                           plusw2	equ	0xFDB
  9338                           fsr2h	equ	0xFDA
  9339                           fsr2l	equ	0xFD9
  9340                           status	equ	0xFD8
  9341                           
  9342 ;; *************** function _PIN_MANAGER_Initialize *****************
  9343 ;; Defined at:
  9344 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  9345 ;; Parameters:    Size  Location     Type
  9346 ;;		None
  9347 ;; Auto vars:     Size  Location     Type
  9348 ;;		None
  9349 ;; Return value:  Size  Location     Type
  9350 ;;                  1    wreg      void 
  9351 ;; Registers used:
  9352 ;;		wreg, status,2, status,0, cstack
  9353 ;; Tracked objects:
  9354 ;;		On entry : 0/0
  9355 ;;		On exit  : 0/0
  9356 ;;		Unchanged: 0/0
  9357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9358 ;;      Params:         0       0       0       0       0       0       0
  9359 ;;      Locals:         0       0       0       0       0       0       0
  9360 ;;      Temps:          0       0       0       0       0       0       0
  9361 ;;      Totals:         0       0       0       0       0       0       0
  9362 ;;Total ram usage:        0 bytes
  9363 ;; Hardware stack levels used:    1
  9364 ;; Hardware stack levels required when called:    5
  9365 ;; This function calls:
  9366 ;;		_IOCB4_SetInterruptHandler
  9367 ;;		_IOCB5_SetInterruptHandler
  9368 ;; This function is called by:
  9369 ;;		_SYSTEM_Initialize
  9370 ;; This function uses a non-reentrant model
  9371 ;;
  9372                           
  9373                           	psect	text42
  9374  00385E                     __ptext42:
  9375                           	opt stack 0
  9376  00385E                     _PIN_MANAGER_Initialize:
  9377                           	opt stack 23
  9378                           
  9379                           ;pin_manager.c: 60: LATE = 0x00;
  9380                           
  9381                           ;incstack = 0
  9382  00385E  0E00               	movlw	0
  9383  003860  6E8D               	movwf	3981,c	;volatile
  9384                           
  9385                           ;pin_manager.c: 61: LATD = 0x00;
  9386  003862  0E00               	movlw	0
  9387  003864  6E8C               	movwf	3980,c	;volatile
  9388                           
  9389                           ;pin_manager.c: 62: LATA = 0x06;
  9390  003866  0E06               	movlw	6
  9391  003868  6E89               	movwf	3977,c	;volatile
  9392                           
  9393                           ;pin_manager.c: 63: LATB = 0x00;
  9394  00386A  0E00               	movlw	0
  9395  00386C  6E8A               	movwf	3978,c	;volatile
  9396                           
  9397                           ;pin_manager.c: 64: LATC = 0x00;
  9398  00386E  0E00               	movlw	0
  9399  003870  6E8B               	movwf	3979,c	;volatile
  9400                           
  9401                           ;pin_manager.c: 69: TRISE = 0x07;
  9402  003872  0E07               	movlw	7
  9403  003874  6E96               	movwf	3990,c	;volatile
  9404                           
  9405                           ;pin_manager.c: 70: TRISA = 0xE1;
  9406  003876  0EE1               	movlw	225
  9407  003878  6E92               	movwf	3986,c	;volatile
  9408                           
  9409                           ;pin_manager.c: 71: TRISB = 0xEF;
  9410  00387A  0EEF               	movlw	239
  9411  00387C  6E93               	movwf	3987,c	;volatile
  9412                           
  9413                           ;pin_manager.c: 72: TRISC = 0x80;
  9414  00387E  0E80               	movlw	128
  9415  003880  6E94               	movwf	3988,c	;volatile
  9416                           
  9417                           ;pin_manager.c: 73: TRISD = 0xF2;
  9418  003882  0EF2               	movlw	242
  9419  003884  6E95               	movwf	3989,c	;volatile
  9420                           
  9421                           ;pin_manager.c: 78: ANSELC = 0x34;
  9422  003886  0E34               	movlw	52
  9423  003888  010F               	movlb	15	; () banked
  9424  00388A  6F3A               	movwf	58,b	;volatile
  9425                           
  9426                           ;pin_manager.c: 79: ANSELB = 0x3E;
  9427  00388C  0E3E               	movlw	62
  9428  00388E  6F39               	movwf	57,b	;volatile
  9429                           
  9430                           ;pin_manager.c: 80: ANSELD = 0xE4;
  9431  003890  0EE4               	movlw	228
  9432  003892  6F3B               	movwf	59,b	;volatile
  9433                           
  9434                           ;pin_manager.c: 81: ANSELE = 0x07;
  9435  003894  0E07               	movlw	7
  9436  003896  6F3C               	movwf	60,b	;volatile
  9437                           
  9438                           ;pin_manager.c: 82: ANSELA = 0x2F;
  9439  003898  0E2F               	movlw	47
  9440  00389A  6F38               	movwf	56,b	;volatile
  9441                           
  9442                           ;pin_manager.c: 87: WPUB = 0xC3;
  9443  00389C  0EC3               	movlw	195
  9444  00389E  6E61               	movwf	3937,c	;volatile
  9445                           
  9446                           ; BSR set to: 15
  9447                           ;pin_manager.c: 88: INTCON2bits.nRBPU = 0;
  9448  0038A0  9EF1               	bcf	intcon2,7,c	;volatile
  9449                           
  9450                           ; BSR set to: 15
  9451                           ;pin_manager.c: 96: IOCBbits.IOCB4 = 1;
  9452  0038A2  8862               	bsf	3938,4,c	;volatile
  9453                           
  9454                           ; BSR set to: 15
  9455                           ;pin_manager.c: 97: IOCBbits.IOCB5 = 1;
  9456  0038A4  8A62               	bsf	3938,5,c	;volatile
  9457                           
  9458                           ; BSR set to: 15
  9459                           ;pin_manager.c: 100: IOCB4_SetInterruptHandler(IOCB4_DefaultInterruptHandler);
  9460  0038A6  0E5C               	movlw	low _IOCB4_DefaultInterruptHandler
  9461  0038A8  6E18               	movwf	IOCB4_SetInterruptHandler@InterruptHandler,c
  9462  0038AA  0E45               	movlw	high _IOCB4_DefaultInterruptHandler
  9463  0038AC  6E19               	movwf	IOCB4_SetInterruptHandler@InterruptHandler+1,c
  9464  0038AE  EC94  F022         	call	_IOCB4_SetInterruptHandler	;wreg free
  9465                           
  9466                           ;pin_manager.c: 101: IOCB5_SetInterruptHandler(IOCB5_DefaultInterruptHandler);
  9467  0038B2  0E5A               	movlw	low _IOCB5_DefaultInterruptHandler
  9468  0038B4  6E18               	movwf	IOCB5_SetInterruptHandler@InterruptHandler,c
  9469  0038B6  0E45               	movlw	high _IOCB5_DefaultInterruptHandler
  9470  0038B8  6E19               	movwf	IOCB5_SetInterruptHandler@InterruptHandler+1,c
  9471  0038BA  EC8F  F022         	call	_IOCB5_SetInterruptHandler	;wreg free
  9472                           
  9473                           ;pin_manager.c: 104: INTCONbits.RBIE = 1;
  9474  0038BE  86F2               	bsf	intcon,3,c	;volatile
  9475  0038C0  0012               	return		;funcret
  9476  0038C2                     __end_of_PIN_MANAGER_Initialize:
  9477                           	opt stack 0
  9478                           tosu	equ	0xFFF
  9479                           tosh	equ	0xFFE
  9480                           tosl	equ	0xFFD
  9481                           pclath	equ	0xFFA
  9482                           tblptru	equ	0xFF8
  9483                           tblptrh	equ	0xFF7
  9484                           tblptrl	equ	0xFF6
  9485                           tablat	equ	0xFF5
  9486                           prodh	equ	0xFF4
  9487                           prodl	equ	0xFF3
  9488                           intcon	equ	0xFF2
  9489                           intcon2	equ	0xFF1
  9490                           postinc0	equ	0xFEE
  9491                           plusw0	equ	0xFEB
  9492                           wreg	equ	0xFE8
  9493                           indf1	equ	0xFE7
  9494                           postdec1	equ	0xFE5
  9495                           fsr1h	equ	0xFE2
  9496                           fsr1l	equ	0xFE1
  9497                           indf2	equ	0xFDF
  9498                           postinc2	equ	0xFDE
  9499                           postdec2	equ	0xFDD
  9500                           plusw2	equ	0xFDB
  9501                           fsr2h	equ	0xFDA
  9502                           fsr2l	equ	0xFD9
  9503                           status	equ	0xFD8
  9504                           
  9505 ;; *************** function _IOCB5_SetInterruptHandler *****************
  9506 ;; Defined at:
  9507 ;;		line 172 in file "mcc_generated_files/pin_manager.c"
  9508 ;; Parameters:    Size  Location     Type
  9509 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  9510 ;;		 -> IOCB5_DefaultInterruptHandler(1), 
  9511 ;; Auto vars:     Size  Location     Type
  9512 ;;		None
  9513 ;; Return value:  Size  Location     Type
  9514 ;;                  1    wreg      void 
  9515 ;; Registers used:
  9516 ;;		wreg, status,2, status,0
  9517 ;; Tracked objects:
  9518 ;;		On entry : 0/0
  9519 ;;		On exit  : 0/0
  9520 ;;		Unchanged: 0/0
  9521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9522 ;;      Params:         2       0       0       0       0       0       0
  9523 ;;      Locals:         0       0       0       0       0       0       0
  9524 ;;      Temps:          0       0       0       0       0       0       0
  9525 ;;      Totals:         2       0       0       0       0       0       0
  9526 ;;Total ram usage:        2 bytes
  9527 ;; Hardware stack levels used:    1
  9528 ;; Hardware stack levels required when called:    4
  9529 ;; This function calls:
  9530 ;;		Nothing
  9531 ;; This function is called by:
  9532 ;;		_PIN_MANAGER_Initialize
  9533 ;; This function uses a non-reentrant model
  9534 ;;
  9535                           
  9536                           	psect	text43
  9537  00451E                     __ptext43:
  9538                           	opt stack 0
  9539  00451E                     _IOCB5_SetInterruptHandler:
  9540                           	opt stack 23
  9541                           
  9542                           ;pin_manager.c: 173: IOCB5_InterruptHandler = InterruptHandler;
  9543                           
  9544                           ;incstack = 0
  9545  00451E  C018  F1E4         	movff	IOCB5_SetInterruptHandler@InterruptHandler,_IOCB5_InterruptHandler
  9546  004522  C019  F1E5         	movff	IOCB5_SetInterruptHandler@InterruptHandler+1,_IOCB5_InterruptHandler+1
  9547  004526  0012               	return		;funcret
  9548  004528                     __end_of_IOCB5_SetInterruptHandler:
  9549                           	opt stack 0
  9550                           tosu	equ	0xFFF
  9551                           tosh	equ	0xFFE
  9552                           tosl	equ	0xFFD
  9553                           pclath	equ	0xFFA
  9554                           tblptru	equ	0xFF8
  9555                           tblptrh	equ	0xFF7
  9556                           tblptrl	equ	0xFF6
  9557                           tablat	equ	0xFF5
  9558                           prodh	equ	0xFF4
  9559                           prodl	equ	0xFF3
  9560                           intcon	equ	0xFF2
  9561                           intcon2	equ	0xFF1
  9562                           postinc0	equ	0xFEE
  9563                           plusw0	equ	0xFEB
  9564                           wreg	equ	0xFE8
  9565                           indf1	equ	0xFE7
  9566                           postdec1	equ	0xFE5
  9567                           fsr1h	equ	0xFE2
  9568                           fsr1l	equ	0xFE1
  9569                           indf2	equ	0xFDF
  9570                           postinc2	equ	0xFDE
  9571                           postdec2	equ	0xFDD
  9572                           plusw2	equ	0xFDB
  9573                           fsr2h	equ	0xFDA
  9574                           fsr2l	equ	0xFD9
  9575                           status	equ	0xFD8
  9576                           
  9577 ;; *************** function _IOCB4_SetInterruptHandler *****************
  9578 ;; Defined at:
  9579 ;;		line 143 in file "mcc_generated_files/pin_manager.c"
  9580 ;; Parameters:    Size  Location     Type
  9581 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  9582 ;;		 -> IOCB4_DefaultInterruptHandler(1), 
  9583 ;; Auto vars:     Size  Location     Type
  9584 ;;		None
  9585 ;; Return value:  Size  Location     Type
  9586 ;;                  1    wreg      void 
  9587 ;; Registers used:
  9588 ;;		wreg, status,2, status,0
  9589 ;; Tracked objects:
  9590 ;;		On entry : 0/0
  9591 ;;		On exit  : 0/0
  9592 ;;		Unchanged: 0/0
  9593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9594 ;;      Params:         2       0       0       0       0       0       0
  9595 ;;      Locals:         0       0       0       0       0       0       0
  9596 ;;      Temps:          0       0       0       0       0       0       0
  9597 ;;      Totals:         2       0       0       0       0       0       0
  9598 ;;Total ram usage:        2 bytes
  9599 ;; Hardware stack levels used:    1
  9600 ;; Hardware stack levels required when called:    4
  9601 ;; This function calls:
  9602 ;;		Nothing
  9603 ;; This function is called by:
  9604 ;;		_PIN_MANAGER_Initialize
  9605 ;; This function uses a non-reentrant model
  9606 ;;
  9607                           
  9608                           	psect	text44
  9609  004528                     __ptext44:
  9610                           	opt stack 0
  9611  004528                     _IOCB4_SetInterruptHandler:
  9612                           	opt stack 23
  9613                           
  9614                           ;pin_manager.c: 144: IOCB4_InterruptHandler = InterruptHandler;
  9615                           
  9616                           ;incstack = 0
  9617  004528  C018  F1E6         	movff	IOCB4_SetInterruptHandler@InterruptHandler,_IOCB4_InterruptHandler
  9618  00452C  C019  F1E7         	movff	IOCB4_SetInterruptHandler@InterruptHandler+1,_IOCB4_InterruptHandler+1
  9619  004530  0012               	return		;funcret
  9620  004532                     __end_of_IOCB4_SetInterruptHandler:
  9621                           	opt stack 0
  9622                           tosu	equ	0xFFF
  9623                           tosh	equ	0xFFE
  9624                           tosl	equ	0xFFD
  9625                           pclath	equ	0xFFA
  9626                           tblptru	equ	0xFF8
  9627                           tblptrh	equ	0xFF7
  9628                           tblptrl	equ	0xFF6
  9629                           tablat	equ	0xFF5
  9630                           prodh	equ	0xFF4
  9631                           prodl	equ	0xFF3
  9632                           intcon	equ	0xFF2
  9633                           intcon2	equ	0xFF1
  9634                           postinc0	equ	0xFEE
  9635                           plusw0	equ	0xFEB
  9636                           wreg	equ	0xFE8
  9637                           indf1	equ	0xFE7
  9638                           postdec1	equ	0xFE5
  9639                           fsr1h	equ	0xFE2
  9640                           fsr1l	equ	0xFE1
  9641                           indf2	equ	0xFDF
  9642                           postinc2	equ	0xFDE
  9643                           postdec2	equ	0xFDD
  9644                           plusw2	equ	0xFDB
  9645                           fsr2h	equ	0xFDA
  9646                           fsr2l	equ	0xFD9
  9647                           status	equ	0xFD8
  9648                           
  9649 ;; *************** function _OSCILLATOR_Initialize *****************
  9650 ;; Defined at:
  9651 ;;		line 122 in file "mcc_generated_files/mcc.c"
  9652 ;; Parameters:    Size  Location     Type
  9653 ;;		None
  9654 ;; Auto vars:     Size  Location     Type
  9655 ;;		None
  9656 ;; Return value:  Size  Location     Type
  9657 ;;                  1    wreg      void 
  9658 ;; Registers used:
  9659 ;;		wreg, status,2
  9660 ;; Tracked objects:
  9661 ;;		On entry : 0/0
  9662 ;;		On exit  : 0/0
  9663 ;;		Unchanged: 0/0
  9664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9665 ;;      Params:         0       0       0       0       0       0       0
  9666 ;;      Locals:         0       0       0       0       0       0       0
  9667 ;;      Temps:          0       0       0       0       0       0       0
  9668 ;;      Totals:         0       0       0       0       0       0       0
  9669 ;;Total ram usage:        0 bytes
  9670 ;; Hardware stack levels used:    1
  9671 ;; Hardware stack levels required when called:    4
  9672 ;; This function calls:
  9673 ;;		Nothing
  9674 ;; This function is called by:
  9675 ;;		_SYSTEM_Initialize
  9676 ;; This function uses a non-reentrant model
  9677 ;;
  9678                           
  9679                           	psect	text45
  9680  0044BA                     __ptext45:
  9681                           	opt stack 0
  9682  0044BA                     _OSCILLATOR_Initialize:
  9683                           	opt stack 24
  9684                           
  9685                           ;mcc.c: 125: OSCCON = 0x60;
  9686                           
  9687                           ;incstack = 0
  9688  0044BA  0E60               	movlw	96
  9689  0044BC  6ED3               	movwf	4051,c	;volatile
  9690                           
  9691                           ;mcc.c: 127: OSCCON2 = 0x04;
  9692  0044BE  0E04               	movlw	4
  9693  0044C0  6ED2               	movwf	4050,c	;volatile
  9694                           
  9695                           ;mcc.c: 129: OSCTUNE = 0x80;
  9696  0044C2  0E80               	movlw	128
  9697  0044C4  6E9B               	movwf	3995,c	;volatile
  9698  0044C6  0012               	return		;funcret
  9699  0044C8                     __end_of_OSCILLATOR_Initialize:
  9700                           	opt stack 0
  9701                           tosu	equ	0xFFF
  9702                           tosh	equ	0xFFE
  9703                           tosl	equ	0xFFD
  9704                           pclath	equ	0xFFA
  9705                           tblptru	equ	0xFF8
  9706                           tblptrh	equ	0xFF7
  9707                           tblptrl	equ	0xFF6
  9708                           tablat	equ	0xFF5
  9709                           prodh	equ	0xFF4
  9710                           prodl	equ	0xFF3
  9711                           intcon	equ	0xFF2
  9712                           intcon2	equ	0xFF1
  9713                           postinc0	equ	0xFEE
  9714                           plusw0	equ	0xFEB
  9715                           wreg	equ	0xFE8
  9716                           indf1	equ	0xFE7
  9717                           postdec1	equ	0xFE5
  9718                           fsr1h	equ	0xFE2
  9719                           fsr1l	equ	0xFE1
  9720                           indf2	equ	0xFDF
  9721                           postinc2	equ	0xFDE
  9722                           postdec2	equ	0xFDD
  9723                           plusw2	equ	0xFDB
  9724                           fsr2h	equ	0xFDA
  9725                           fsr2l	equ	0xFD9
  9726                           status	equ	0xFD8
  9727                           
  9728 ;; *************** function _INTERRUPT_Initialize *****************
  9729 ;; Defined at:
  9730 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  9731 ;; Parameters:    Size  Location     Type
  9732 ;;		None
  9733 ;; Auto vars:     Size  Location     Type
  9734 ;;		None
  9735 ;; Return value:  Size  Location     Type
  9736 ;;                  1    wreg      void 
  9737 ;; Registers used:
  9738 ;;		None
  9739 ;; Tracked objects:
  9740 ;;		On entry : 0/0
  9741 ;;		On exit  : 0/0
  9742 ;;		Unchanged: 0/0
  9743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9744 ;;      Params:         0       0       0       0       0       0       0
  9745 ;;      Locals:         0       0       0       0       0       0       0
  9746 ;;      Temps:          0       0       0       0       0       0       0
  9747 ;;      Totals:         0       0       0       0       0       0       0
  9748 ;;Total ram usage:        0 bytes
  9749 ;; Hardware stack levels used:    1
  9750 ;; Hardware stack levels required when called:    4
  9751 ;; This function calls:
  9752 ;;		Nothing
  9753 ;; This function is called by:
  9754 ;;		_SYSTEM_Initialize
  9755 ;; This function uses a non-reentrant model
  9756 ;;
  9757                           
  9758                           	psect	text46
  9759  00454E                     __ptext46:
  9760                           	opt stack 0
  9761  00454E                     _INTERRUPT_Initialize:
  9762                           	opt stack 24
  9763                           
  9764                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  9765                           
  9766                           ;incstack = 0
  9767  00454E  9ED0               	bcf	4048,7,c	;volatile
  9768  004550  0012               	return		;funcret
  9769  004552                     __end_of_INTERRUPT_Initialize:
  9770                           	opt stack 0
  9771                           tosu	equ	0xFFF
  9772                           tosh	equ	0xFFE
  9773                           tosl	equ	0xFFD
  9774                           pclath	equ	0xFFA
  9775                           tblptru	equ	0xFF8
  9776                           tblptrh	equ	0xFF7
  9777                           tblptrl	equ	0xFF6
  9778                           tablat	equ	0xFF5
  9779                           prodh	equ	0xFF4
  9780                           prodl	equ	0xFF3
  9781                           intcon	equ	0xFF2
  9782                           intcon2	equ	0xFF1
  9783                           postinc0	equ	0xFEE
  9784                           plusw0	equ	0xFEB
  9785                           wreg	equ	0xFE8
  9786                           indf1	equ	0xFE7
  9787                           postdec1	equ	0xFE5
  9788                           fsr1h	equ	0xFE2
  9789                           fsr1l	equ	0xFE1
  9790                           indf2	equ	0xFDF
  9791                           postinc2	equ	0xFDE
  9792                           postdec2	equ	0xFDD
  9793                           plusw2	equ	0xFDB
  9794                           fsr2h	equ	0xFDA
  9795                           fsr2l	equ	0xFD9
  9796                           status	equ	0xFD8
  9797                           
  9798 ;; *************** function _EUSART1_Initialize *****************
  9799 ;; Defined at:
  9800 ;;		line 74 in file "mcc_generated_files/eusart1.c"
  9801 ;; Parameters:    Size  Location     Type
  9802 ;;		None
  9803 ;; Auto vars:     Size  Location     Type
  9804 ;;		None
  9805 ;; Return value:  Size  Location     Type
  9806 ;;                  1    wreg      void 
  9807 ;; Registers used:
  9808 ;;		wreg, status,2
  9809 ;; Tracked objects:
  9810 ;;		On entry : 0/0
  9811 ;;		On exit  : 0/0
  9812 ;;		Unchanged: 0/0
  9813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9814 ;;      Params:         0       0       0       0       0       0       0
  9815 ;;      Locals:         0       0       0       0       0       0       0
  9816 ;;      Temps:          0       0       0       0       0       0       0
  9817 ;;      Totals:         0       0       0       0       0       0       0
  9818 ;;Total ram usage:        0 bytes
  9819 ;; Hardware stack levels used:    1
  9820 ;; Hardware stack levels required when called:    4
  9821 ;; This function calls:
  9822 ;;		Nothing
  9823 ;; This function is called by:
  9824 ;;		_SYSTEM_Initialize
  9825 ;; This function uses a non-reentrant model
  9826 ;;
  9827                           
  9828                           	psect	text47
  9829  003ED2                     __ptext47:
  9830                           	opt stack 0
  9831  003ED2                     _EUSART1_Initialize:
  9832                           	opt stack 24
  9833                           
  9834                           ;eusart1.c: 77: PIE1bits.RC1IE = 0;
  9835                           
  9836                           ;incstack = 0
  9837  003ED2  9A9D               	bcf	3997,5,c	;volatile
  9838                           
  9839                           ;eusart1.c: 78: PIE1bits.TX1IE = 0;
  9840  003ED4  989D               	bcf	3997,4,c	;volatile
  9841                           
  9842                           ;eusart1.c: 82: BAUDCON1 = 0x08;
  9843  003ED6  0E08               	movlw	8
  9844  003ED8  6EB8               	movwf	4024,c	;volatile
  9845                           
  9846                           ;eusart1.c: 85: RCSTA1 = 0x90;
  9847  003EDA  0E90               	movlw	144
  9848  003EDC  6EAB               	movwf	4011,c	;volatile
  9849                           
  9850                           ;eusart1.c: 88: TXSTA1 = 0x24;
  9851  003EDE  0E24               	movlw	36
  9852  003EE0  6EAC               	movwf	4012,c	;volatile
  9853                           
  9854                           ;eusart1.c: 91: SPBRG1 = 0x10;
  9855  003EE2  0E10               	movlw	16
  9856  003EE4  6EAF               	movwf	4015,c	;volatile
  9857                           
  9858                           ;eusart1.c: 94: SPBRGH1 = 0x00;
  9859  003EE6  0E00               	movlw	0
  9860  003EE8  6EB0               	movwf	4016,c	;volatile
  9861                           
  9862                           ;eusart1.c: 98: eusart1TxHead = 0;
  9863  003EEA  0E00               	movlw	0
  9864  003EEC  6E3A               	movwf	_eusart1TxHead,c	;volatile
  9865                           
  9866                           ;eusart1.c: 99: eusart1TxTail = 0;
  9867  003EEE  0E00               	movlw	0
  9868  003EF0  6E39               	movwf	_eusart1TxTail,c	;volatile
  9869                           
  9870                           ;eusart1.c: 100: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  9871  003EF2  0E46               	movlw	70
  9872  003EF4  0101               	movlb	1	; () banked
  9873  003EF6  6FE8               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
  9874                           
  9875                           ;eusart1.c: 102: eusart1RxHead = 0;
  9876  003EF8  0E00               	movlw	0
  9877  003EFA  6E38               	movwf	_eusart1RxHead,c	;volatile
  9878                           
  9879                           ;eusart1.c: 103: eusart1RxTail = 0;
  9880  003EFC  0E00               	movlw	0
  9881  003EFE  6E37               	movwf	_eusart1RxTail,c	;volatile
  9882                           
  9883                           ;eusart1.c: 104: eusart1RxCount = 0;
  9884  003F00  0E00               	movlw	0
  9885  003F02  0100               	movlb	0	; () banked
  9886  003F04  6FEF               	movwf	_eusart1RxCount& (0+255),b	;volatile
  9887                           
  9888                           ; BSR set to: 0
  9889                           ;eusart1.c: 107: PIE1bits.RC1IE = 1;
  9890  003F06  8A9D               	bsf	3997,5,c	;volatile
  9891                           
  9892                           ; BSR set to: 0
  9893  003F08  0012               	return		;funcret
  9894  003F0A                     __end_of_EUSART1_Initialize:
  9895                           	opt stack 0
  9896                           tosu	equ	0xFFF
  9897                           tosh	equ	0xFFE
  9898                           tosl	equ	0xFFD
  9899                           pclath	equ	0xFFA
  9900                           tblptru	equ	0xFF8
  9901                           tblptrh	equ	0xFF7
  9902                           tblptrl	equ	0xFF6
  9903                           tablat	equ	0xFF5
  9904                           prodh	equ	0xFF4
  9905                           prodl	equ	0xFF3
  9906                           intcon	equ	0xFF2
  9907                           intcon2	equ	0xFF1
  9908                           postinc0	equ	0xFEE
  9909                           plusw0	equ	0xFEB
  9910                           wreg	equ	0xFE8
  9911                           indf1	equ	0xFE7
  9912                           postdec1	equ	0xFE5
  9913                           fsr1h	equ	0xFE2
  9914                           fsr1l	equ	0xFE1
  9915                           indf2	equ	0xFDF
  9916                           postinc2	equ	0xFDE
  9917                           postdec2	equ	0xFDD
  9918                           plusw2	equ	0xFDB
  9919                           fsr2h	equ	0xFDA
  9920                           fsr2l	equ	0xFD9
  9921                           status	equ	0xFD8
  9922                           
  9923 ;; *************** function _ADC_Initialize *****************
  9924 ;; Defined at:
  9925 ;;		line 58 in file "mcc_generated_files/adc.c"
  9926 ;; Parameters:    Size  Location     Type
  9927 ;;		None
  9928 ;; Auto vars:     Size  Location     Type
  9929 ;;		None
  9930 ;; Return value:  Size  Location     Type
  9931 ;;                  1    wreg      void 
  9932 ;; Registers used:
  9933 ;;		wreg, status,2
  9934 ;; Tracked objects:
  9935 ;;		On entry : 0/0
  9936 ;;		On exit  : 0/0
  9937 ;;		Unchanged: 0/0
  9938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9939 ;;      Params:         0       0       0       0       0       0       0
  9940 ;;      Locals:         0       0       0       0       0       0       0
  9941 ;;      Temps:          0       0       0       0       0       0       0
  9942 ;;      Totals:         0       0       0       0       0       0       0
  9943 ;;Total ram usage:        0 bytes
  9944 ;; Hardware stack levels used:    1
  9945 ;; Hardware stack levels required when called:    4
  9946 ;; This function calls:
  9947 ;;		Nothing
  9948 ;; This function is called by:
  9949 ;;		_SYSTEM_Initialize
  9950 ;; This function uses a non-reentrant model
  9951 ;;
  9952                           
  9953                           	psect	text48
  9954  004422                     __ptext48:
  9955                           	opt stack 0
  9956  004422                     _ADC_Initialize:
  9957                           	opt stack 24
  9958                           
  9959                           ;adc.c: 63: ADCON0 = 0x05;
  9960                           
  9961                           ; BSR set to: 0
  9962                           ;incstack = 0
  9963  004422  0E05               	movlw	5
  9964  004424  6EC2               	movwf	4034,c	;volatile
  9965                           
  9966                           ;adc.c: 66: ADCON1 = 0x00;
  9967  004426  0E00               	movlw	0
  9968  004428  6EC1               	movwf	4033,c	;volatile
  9969                           
  9970                           ;adc.c: 69: ADCON2 = 0x87;
  9971  00442A  0E87               	movlw	135
  9972  00442C  6EC0               	movwf	4032,c	;volatile
  9973                           
  9974                           ;adc.c: 72: ADRESL = 0x00;
  9975  00442E  0E00               	movlw	0
  9976  004430  6EC3               	movwf	4035,c	;volatile
  9977                           
  9978                           ;adc.c: 75: ADRESH = 0x00;
  9979  004432  0E00               	movlw	0
  9980  004434  6EC4               	movwf	4036,c	;volatile
  9981  004436  0012               	return		;funcret
  9982  004438                     __end_of_ADC_Initialize:
  9983                           	opt stack 0
  9984                           tosu	equ	0xFFF
  9985                           tosh	equ	0xFFE
  9986                           tosl	equ	0xFFD
  9987                           pclath	equ	0xFFA
  9988                           tblptru	equ	0xFF8
  9989                           tblptrh	equ	0xFF7
  9990                           tblptrl	equ	0xFF6
  9991                           tablat	equ	0xFF5
  9992                           prodh	equ	0xFF4
  9993                           prodl	equ	0xFF3
  9994                           intcon	equ	0xFF2
  9995                           intcon2	equ	0xFF1
  9996                           postinc0	equ	0xFEE
  9997                           plusw0	equ	0xFEB
  9998                           wreg	equ	0xFE8
  9999                           indf1	equ	0xFE7
 10000                           postdec1	equ	0xFE5
 10001                           fsr1h	equ	0xFE2
 10002                           fsr1l	equ	0xFE1
 10003                           indf2	equ	0xFDF
 10004                           postinc2	equ	0xFDE
 10005                           postdec2	equ	0xFDD
 10006                           plusw2	equ	0xFDB
 10007                           fsr2h	equ	0xFDA
 10008                           fsr2l	equ	0xFD9
 10009                           status	equ	0xFD8
 10010                           
 10011 ;; *************** function _SetMcuRunTime *****************
 10012 ;; Defined at:
 10013 ;;		line 57 in file "SystemStatus.c"
 10014 ;; Parameters:    Size  Location     Type
 10015 ;;		None
 10016 ;; Auto vars:     Size  Location     Type
 10017 ;;		None
 10018 ;; Return value:  Size  Location     Type
 10019 ;;                  1    wreg      void 
 10020 ;; Registers used:
 10021 ;;		wreg, status,2, status,0, cstack
 10022 ;; Tracked objects:
 10023 ;;		On entry : 0/0
 10024 ;;		On exit  : 0/0
 10025 ;;		Unchanged: 0/0
 10026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10027 ;;      Params:         0       0       0       0       0       0       0
 10028 ;;      Locals:         0       0       0       0       0       0       0
 10029 ;;      Temps:          0       0       0       0       0       0       0
 10030 ;;      Totals:         0       0       0       0       0       0       0
 10031 ;;Total ram usage:        0 bytes
 10032 ;; Hardware stack levels used:    1
 10033 ;; Hardware stack levels required when called:    5
 10034 ;; This function calls:
 10035 ;;		___llmod
 10036 ;; This function is called by:
 10037 ;;		_main
 10038 ;; This function uses a non-reentrant model
 10039 ;;
 10040                           
 10041                           	psect	text49
 10042  003D1E                     __ptext49:
 10043                           	opt stack 0
 10044  003D1E                     _SetMcuRunTime:
 10045                           	opt stack 25
 10046                           
 10047                           ;SystemStatus.c: 59: mcuRunTimeIn5SecTicks++;
 10048                           
 10049                           ;incstack = 0
 10050  003D1E  0E01               	movlw	1
 10051  003D20  0101               	movlb	1	; () banked
 10052  003D22  2728               	addwf	_mcuRunTimeIn5SecTicks& (0+255),f,b
 10053  003D24  0E00               	movlw	0
 10054  003D26  2329               	addwfc	(_mcuRunTimeIn5SecTicks+1)& (0+255),f,b
 10055  003D28  232A               	addwfc	(_mcuRunTimeIn5SecTicks+2)& (0+255),f,b
 10056  003D2A  232B               	addwfc	(_mcuRunTimeIn5SecTicks+3)& (0+255),f,b
 10057                           
 10058                           ; BSR set to: 1
 10059                           ;SystemStatus.c: 60: mcuRunTimeIn5SecTicks %= (17280);
 10060  003D2C  C128  F018         	movff	_mcuRunTimeIn5SecTicks,___llmod@dividend
 10061  003D30  C129  F019         	movff	_mcuRunTimeIn5SecTicks+1,___llmod@dividend+1
 10062  003D34  C12A  F01A         	movff	_mcuRunTimeIn5SecTicks+2,___llmod@dividend+2
 10063  003D38  C12B  F01B         	movff	_mcuRunTimeIn5SecTicks+3,___llmod@dividend+3
 10064  003D3C  0E80               	movlw	128
 10065  003D3E  6E1C               	movwf	___llmod@divisor,c
 10066  003D40  0E43               	movlw	67
 10067  003D42  6E1D               	movwf	___llmod@divisor+1,c
 10068  003D44  0E00               	movlw	0
 10069  003D46  6E1E               	movwf	___llmod@divisor+2,c
 10070  003D48  0E00               	movlw	0
 10071  003D4A  6E1F               	movwf	___llmod@divisor+3,c
 10072  003D4C  ECFC  F01B         	call	___llmod	;wreg free
 10073  003D50  C018  F128         	movff	?___llmod,_mcuRunTimeIn5SecTicks
 10074  003D54  C019  F129         	movff	?___llmod+1,_mcuRunTimeIn5SecTicks+1
 10075  003D58  C01A  F12A         	movff	?___llmod+2,_mcuRunTimeIn5SecTicks+2
 10076  003D5C  C01B  F12B         	movff	?___llmod+3,_mcuRunTimeIn5SecTicks+3
 10077  003D60  0012               	return		;funcret
 10078  003D62                     __end_of_SetMcuRunTime:
 10079                           	opt stack 0
 10080                           tosu	equ	0xFFF
 10081                           tosh	equ	0xFFE
 10082                           tosl	equ	0xFFD
 10083                           pclath	equ	0xFFA
 10084                           tblptru	equ	0xFF8
 10085                           tblptrh	equ	0xFF7
 10086                           tblptrl	equ	0xFF6
 10087                           tablat	equ	0xFF5
 10088                           prodh	equ	0xFF4
 10089                           prodl	equ	0xFF3
 10090                           intcon	equ	0xFF2
 10091                           intcon2	equ	0xFF1
 10092                           postinc0	equ	0xFEE
 10093                           plusw0	equ	0xFEB
 10094                           wreg	equ	0xFE8
 10095                           indf1	equ	0xFE7
 10096                           postdec1	equ	0xFE5
 10097                           fsr1h	equ	0xFE2
 10098                           fsr1l	equ	0xFE1
 10099                           indf2	equ	0xFDF
 10100                           postinc2	equ	0xFDE
 10101                           postdec2	equ	0xFDD
 10102                           plusw2	equ	0xFDB
 10103                           fsr2h	equ	0xFDA
 10104                           fsr2l	equ	0xFD9
 10105                           status	equ	0xFD8
 10106                           
 10107 ;; *************** function ___llmod *****************
 10108 ;; Defined at:
 10109 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
 10110 ;; Parameters:    Size  Location     Type
 10111 ;;  dividend        4   23[COMRAM] unsigned long 
 10112 ;;  divisor         4   27[COMRAM] unsigned long 
 10113 ;; Auto vars:     Size  Location     Type
 10114 ;;  counter         1   31[COMRAM] unsigned char 
 10115 ;; Return value:  Size  Location     Type
 10116 ;;                  4   23[COMRAM] unsigned long 
 10117 ;; Registers used:
 10118 ;;		wreg, status,2, status,0
 10119 ;; Tracked objects:
 10120 ;;		On entry : 0/0
 10121 ;;		On exit  : 0/0
 10122 ;;		Unchanged: 0/0
 10123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10124 ;;      Params:         8       0       0       0       0       0       0
 10125 ;;      Locals:         1       0       0       0       0       0       0
 10126 ;;      Temps:          0       0       0       0       0       0       0
 10127 ;;      Totals:         9       0       0       0       0       0       0
 10128 ;;Total ram usage:        9 bytes
 10129 ;; Hardware stack levels used:    1
 10130 ;; Hardware stack levels required when called:    4
 10131 ;; This function calls:
 10132 ;;		Nothing
 10133 ;; This function is called by:
 10134 ;;		_SetMcuRunTime
 10135 ;;		_GetMcuRunTime
 10136 ;; This function uses a non-reentrant model
 10137 ;;
 10138                           
 10139                           	psect	text50
 10140  0037F8                     __ptext50:
 10141                           	opt stack 0
 10142  0037F8                     ___llmod:
 10143                           	opt stack 23
 10144                           
 10145                           ;incstack = 0
 10146  0037F8  501C               	movf	___llmod@divisor,w,c
 10147  0037FA  101D               	iorwf	___llmod@divisor+1,w,c
 10148  0037FC  101E               	iorwf	___llmod@divisor+2,w,c
 10149  0037FE  101F               	iorwf	___llmod@divisor+3,w,c
 10150  003800  B4D8               	btfsc	status,2,c
 10151  003802  D024               	goto	l1977
 10152  003804  0E01               	movlw	1
 10153  003806  6E20               	movwf	___llmod@counter,c
 10154  003808  D006               	goto	l1972
 10155  00380A  90D8               	bcf	status,0,c
 10156  00380C  361C               	rlcf	___llmod@divisor,f,c
 10157  00380E  361D               	rlcf	___llmod@divisor+1,f,c
 10158  003810  361E               	rlcf	___llmod@divisor+2,f,c
 10159  003812  361F               	rlcf	___llmod@divisor+3,f,c
 10160  003814  2A20               	incf	___llmod@counter,f,c
 10161  003816                     l1972:
 10162  003816  AE1F               	btfss	___llmod@divisor+3,7,c
 10163  003818  D7F8               	goto	l1973
 10164  00381A                     u8590:
 10165  00381A  501C               	movf	___llmod@divisor,w,c
 10166  00381C  5C18               	subwf	___llmod@dividend,w,c
 10167  00381E  501D               	movf	___llmod@divisor+1,w,c
 10168  003820  5819               	subwfb	___llmod@dividend+1,w,c
 10169  003822  501E               	movf	___llmod@divisor+2,w,c
 10170  003824  581A               	subwfb	___llmod@dividend+2,w,c
 10171  003826  501F               	movf	___llmod@divisor+3,w,c
 10172  003828  581B               	subwfb	___llmod@dividend+3,w,c
 10173  00382A  A0D8               	btfss	status,0,c
 10174  00382C  D008               	goto	l1976
 10175  00382E  501C               	movf	___llmod@divisor,w,c
 10176  003830  5E18               	subwf	___llmod@dividend,f,c
 10177  003832  501D               	movf	___llmod@divisor+1,w,c
 10178  003834  5A19               	subwfb	___llmod@dividend+1,f,c
 10179  003836  501E               	movf	___llmod@divisor+2,w,c
 10180  003838  5A1A               	subwfb	___llmod@dividend+2,f,c
 10181  00383A  501F               	movf	___llmod@divisor+3,w,c
 10182  00383C  5A1B               	subwfb	___llmod@dividend+3,f,c
 10183  00383E                     l1976:
 10184  00383E  90D8               	bcf	status,0,c
 10185  003840  321F               	rrcf	___llmod@divisor+3,f,c
 10186  003842  321E               	rrcf	___llmod@divisor+2,f,c
 10187  003844  321D               	rrcf	___llmod@divisor+1,f,c
 10188  003846  321C               	rrcf	___llmod@divisor,f,c
 10189  003848  2E20               	decfsz	___llmod@counter,f,c
 10190  00384A  D7E7               	goto	u8590
 10191  00384C                     l1977:
 10192  00384C  C018  F018         	movff	___llmod@dividend,?___llmod
 10193  003850  C019  F019         	movff	___llmod@dividend+1,?___llmod+1
 10194  003854  C01A  F01A         	movff	___llmod@dividend+2,?___llmod+2
 10195  003858  C01B  F01B         	movff	___llmod@dividend+3,?___llmod+3
 10196  00385C  0012               	return		;funcret
 10197  00385E                     __end_of___llmod:
 10198                           	opt stack 0
 10199                           tosu	equ	0xFFF
 10200                           tosh	equ	0xFFE
 10201                           tosl	equ	0xFFD
 10202                           pclath	equ	0xFFA
 10203                           tblptru	equ	0xFF8
 10204                           tblptrh	equ	0xFF7
 10205                           tblptrl	equ	0xFF6
 10206                           tablat	equ	0xFF5
 10207                           prodh	equ	0xFF4
 10208                           prodl	equ	0xFF3
 10209                           intcon	equ	0xFF2
 10210                           intcon2	equ	0xFF1
 10211                           postinc0	equ	0xFEE
 10212                           plusw0	equ	0xFEB
 10213                           wreg	equ	0xFE8
 10214                           indf1	equ	0xFE7
 10215                           postdec1	equ	0xFE5
 10216                           fsr1h	equ	0xFE2
 10217                           fsr1l	equ	0xFE1
 10218                           indf2	equ	0xFDF
 10219                           postinc2	equ	0xFDE
 10220                           postdec2	equ	0xFDD
 10221                           plusw2	equ	0xFDB
 10222                           fsr2h	equ	0xFDA
 10223                           fsr2l	equ	0xFD9
 10224                           status	equ	0xFD8
 10225                           
 10226 ;; *************** function _SendSystemStartAck *****************
 10227 ;; Defined at:
 10228 ;;		line 157 in file "SystemCommon.c"
 10229 ;; Parameters:    Size  Location     Type
 10230 ;;		None
 10231 ;; Auto vars:     Size  Location     Type
 10232 ;;		None
 10233 ;; Return value:  Size  Location     Type
 10234 ;;                  1    wreg      void 
 10235 ;; Registers used:
 10236 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10237 ;; Tracked objects:
 10238 ;;		On entry : 0/0
 10239 ;;		On exit  : 0/0
 10240 ;;		Unchanged: 0/0
 10241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10242 ;;      Params:         0       0       0       0       0       0       0
 10243 ;;      Locals:         0       0       0       0       0       0       0
 10244 ;;      Temps:          0       0       0       0       0       0       0
 10245 ;;      Totals:         0       0       0       0       0       0       0
 10246 ;;Total ram usage:        0 bytes
 10247 ;; Hardware stack levels used:    1
 10248 ;; Hardware stack levels required when called:    7
 10249 ;; This function calls:
 10250 ;;		_SendAckMessage
 10251 ;; This function is called by:
 10252 ;;		_main
 10253 ;; This function uses a non-reentrant model
 10254 ;;
 10255                           
 10256                           	psect	text51
 10257  0044FE                     __ptext51:
 10258                           	opt stack 0
 10259  0044FE                     _SendSystemStartAck:
 10260                           	opt stack 23
 10261                           
 10262                           ;SystemCommon.c: 159: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_SYSTE
      +                          M_START);
 10263                           
 10264                           ;incstack = 0
 10265  0044FE  0E10               	movlw	16
 10266  004500  6E24               	movwf	SendAckMessage@inRequest,c
 10267  004502  0E01               	movlw	1
 10268  004504  EC1D  F01E         	call	_SendAckMessage
 10269  004508  0012               	return		;funcret
 10270  00450A                     __end_of_SendSystemStartAck:
 10271                           	opt stack 0
 10272                           tosu	equ	0xFFF
 10273                           tosh	equ	0xFFE
 10274                           tosl	equ	0xFFD
 10275                           pclath	equ	0xFFA
 10276                           tblptru	equ	0xFF8
 10277                           tblptrh	equ	0xFF7
 10278                           tblptrl	equ	0xFF6
 10279                           tablat	equ	0xFF5
 10280                           prodh	equ	0xFF4
 10281                           prodl	equ	0xFF3
 10282                           intcon	equ	0xFF2
 10283                           intcon2	equ	0xFF1
 10284                           postinc0	equ	0xFEE
 10285                           plusw0	equ	0xFEB
 10286                           wreg	equ	0xFE8
 10287                           indf1	equ	0xFE7
 10288                           postdec1	equ	0xFE5
 10289                           fsr1h	equ	0xFE2
 10290                           fsr1l	equ	0xFE1
 10291                           indf2	equ	0xFDF
 10292                           postinc2	equ	0xFDE
 10293                           postdec2	equ	0xFDD
 10294                           plusw2	equ	0xFDB
 10295                           fsr2h	equ	0xFDA
 10296                           fsr2l	equ	0xFD9
 10297                           status	equ	0xFD8
 10298                           
 10299 ;; *************** function _SendAckMessage *****************
 10300 ;; Defined at:
 10301 ;;		line 171 in file "EusartApp.c"
 10302 ;; Parameters:    Size  Location     Type
 10303 ;;  inGroup         1    wreg     enum E7193
 10304 ;;  inRequest       1   35[COMRAM] enum E7201
 10305 ;; Auto vars:     Size  Location     Type
 10306 ;;  inGroup         1   36[COMRAM] enum E7193
 10307 ;;  TxMsg           6   37[COMRAM] unsigned char [6]
 10308 ;; Return value:  Size  Location     Type
 10309 ;;                  1    wreg      void 
 10310 ;; Registers used:
 10311 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10312 ;; Tracked objects:
 10313 ;;		On entry : 0/0
 10314 ;;		On exit  : 0/0
 10315 ;;		Unchanged: 0/0
 10316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10317 ;;      Params:         1       0       0       0       0       0       0
 10318 ;;      Locals:         7       0       0       0       0       0       0
 10319 ;;      Temps:          0       0       0       0       0       0       0
 10320 ;;      Totals:         8       0       0       0       0       0       0
 10321 ;;Total ram usage:        8 bytes
 10322 ;; Hardware stack levels used:    1
 10323 ;; Hardware stack levels required when called:    6
 10324 ;; This function calls:
 10325 ;;		_WriteUartMessage
 10326 ;;		_ZeroArray
 10327 ;;		_crc8
 10328 ;; This function is called by:
 10329 ;;		_testLeds
 10330 ;;		_SetChannelMode
 10331 ;;		_FlashReadUart
 10332 ;;		_FlashEreaseMem
 10333 ;;		_DacSetValue
 10334 ;;		_UpdateSynthFreq
 10335 ;;		_SetSynthOper
 10336 ;;		_ResetMcu
 10337 ;;		_SendSystemStartAck
 10338 ;;		_keepAliveSignalUart
 10339 ;; This function uses a non-reentrant model
 10340 ;;
 10341                           
 10342                           	psect	text52
 10343  003C3A                     __ptext52:
 10344                           	opt stack 0
 10345  003C3A                     _SendAckMessage:
 10346                           	opt stack 21
 10347                           
 10348                           ;incstack = 0
 10349                           ;SendAckMessage@inGroup stored from wreg
 10350  003C3A  6E25               	movwf	SendAckMessage@inGroup,c
 10351                           
 10352                           ;EusartApp.c: 174: char TxMsg[(0x5) + 1];
 10353                           ;EusartApp.c: 175: ZeroArray(TxMsg, (0x5) + 1);
 10354  003C3C  0E26               	movlw	low SendAckMessage@TxMsg
 10355  003C3E  6E20               	movwf	ZeroArray@array,c
 10356  003C40  0E00               	movlw	high SendAckMessage@TxMsg
 10357  003C42  6E21               	movwf	ZeroArray@array+1,c
 10358  003C44  0E00               	movlw	0
 10359  003C46  6E23               	movwf	ZeroArray@size+1,c
 10360  003C48  0E06               	movlw	6
 10361  003C4A  6E22               	movwf	ZeroArray@size,c
 10362  003C4C  ECCD  F021         	call	_ZeroArray	;wreg free
 10363                           
 10364                           ;EusartApp.c: 178: TxMsg[(0)] = (0x24);
 10365  003C50  0E24               	movlw	36
 10366  003C52  6E26               	movwf	SendAckMessage@TxMsg,c
 10367                           
 10368                           ;EusartApp.c: 179: TxMsg[(1)] = inGroup;
 10369  003C54  C025  F027         	movff	SendAckMessage@inGroup,SendAckMessage@TxMsg+1
 10370                           
 10371                           ;EusartApp.c: 180: TxMsg[(2)] = inRequest;
 10372  003C58  C024  F028         	movff	SendAckMessage@inRequest,SendAckMessage@TxMsg+2
 10373                           
 10374                           ;EusartApp.c: 181: TxMsg[(3)] = 0;
 10375  003C5C  0E00               	movlw	0
 10376  003C5E  6E29               	movwf	SendAckMessage@TxMsg+3,c
 10377                           
 10378                           ;EusartApp.c: 183: TxMsg[(0x5)] = crc8(TxMsg, (0x5));
 10379  003C60  0E26               	movlw	low SendAckMessage@TxMsg
 10380  003C62  6E18               	movwf	crc8@dataArray,c
 10381  003C64  0E00               	movlw	high SendAckMessage@TxMsg
 10382  003C66  6E19               	movwf	crc8@dataArray+1,c
 10383  003C68  0E00               	movlw	0
 10384  003C6A  6E1B               	movwf	crc8@dataSize+1,c
 10385  003C6C  0E05               	movlw	5
 10386  003C6E  6E1A               	movwf	crc8@dataSize,c
 10387  003C70  EC46  F01E         	call	_crc8	;wreg free
 10388  003C74  6E2B               	movwf	SendAckMessage@TxMsg+5,c
 10389                           
 10390                           ;EusartApp.c: 185: WriteUartMessage(TxMsg, (0x5) + 1);
 10391  003C76  0E26               	movlw	low SendAckMessage@TxMsg
 10392  003C78  6E19               	movwf	WriteUartMessage@dataBuf,c
 10393  003C7A  0E00               	movlw	high SendAckMessage@TxMsg
 10394  003C7C  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
 10395  003C7E  0E00               	movlw	0
 10396  003C80  6E1C               	movwf	WriteUartMessage@dataSize+1,c
 10397  003C82  0E06               	movlw	6
 10398  003C84  6E1B               	movwf	WriteUartMessage@dataSize,c
 10399  003C86  ECD9  F01F         	call	_WriteUartMessage	;wreg free
 10400  003C8A  0012               	return		;funcret
 10401  003C8C                     __end_of_SendAckMessage:
 10402                           	opt stack 0
 10403                           tosu	equ	0xFFF
 10404                           tosh	equ	0xFFE
 10405                           tosl	equ	0xFFD
 10406                           pclath	equ	0xFFA
 10407                           tblptru	equ	0xFF8
 10408                           tblptrh	equ	0xFF7
 10409                           tblptrl	equ	0xFF6
 10410                           tablat	equ	0xFF5
 10411                           prodh	equ	0xFF4
 10412                           prodl	equ	0xFF3
 10413                           intcon	equ	0xFF2
 10414                           intcon2	equ	0xFF1
 10415                           postinc0	equ	0xFEE
 10416                           plusw0	equ	0xFEB
 10417                           wreg	equ	0xFE8
 10418                           indf1	equ	0xFE7
 10419                           postdec1	equ	0xFE5
 10420                           fsr1h	equ	0xFE2
 10421                           fsr1l	equ	0xFE1
 10422                           indf2	equ	0xFDF
 10423                           postinc2	equ	0xFDE
 10424                           postdec2	equ	0xFDD
 10425                           plusw2	equ	0xFDB
 10426                           fsr2h	equ	0xFDA
 10427                           fsr2l	equ	0xFD9
 10428                           status	equ	0xFD8
 10429                           
 10430 ;; *************** function _crc8 *****************
 10431 ;; Defined at:
 10432 ;;		line 13 in file "SystemCommon.c"
 10433 ;; Parameters:    Size  Location     Type
 10434 ;;  dataArray       2   23[COMRAM] PTR unsigned char 
 10435 ;;		 -> GetMcuRunTime@TxMsg(9), GetMcuFwVersion@TxMsg(18), SynthReadData@TxMsg(18), DacReadValue@TxMsg(7), 
 10436 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), rxMsgQueue(20), 
 10437 ;;  dataSize        2   25[COMRAM] int 
 10438 ;; Auto vars:     Size  Location     Type
 10439 ;;  i               2   30[COMRAM] int 
 10440 ;;  crc             2   28[COMRAM] int 
 10441 ;; Return value:  Size  Location     Type
 10442 ;;                  1    wreg      unsigned char 
 10443 ;; Registers used:
 10444 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10445 ;; Tracked objects:
 10446 ;;		On entry : 0/0
 10447 ;;		On exit  : 0/0
 10448 ;;		Unchanged: 0/0
 10449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10450 ;;      Params:         4       0       0       0       0       0       0
 10451 ;;      Locals:         4       0       0       0       0       0       0
 10452 ;;      Temps:          1       0       0       0       0       0       0
 10453 ;;      Totals:         9       0       0       0       0       0       0
 10454 ;;Total ram usage:        9 bytes
 10455 ;; Hardware stack levels used:    1
 10456 ;; Hardware stack levels required when called:    4
 10457 ;; This function calls:
 10458 ;;		Nothing
 10459 ;; This function is called by:
 10460 ;;		_readUartMessage
 10461 ;;		_SendAckMessage
 10462 ;;		_FlashReadUart
 10463 ;;		_FlashReadCondition
 10464 ;;		_DacReadValue
 10465 ;;		_SynthReadData
 10466 ;;		_GetMcuFwVersion
 10467 ;;		_GetMcuRunTime
 10468 ;; This function uses a non-reentrant model
 10469 ;;
 10470                           
 10471                           	psect	text53
 10472  003C8C                     __ptext53:
 10473                           	opt stack 0
 10474  003C8C                     _crc8:
 10475                           	opt stack 25
 10476                           
 10477                           ;SystemCommon.c: 15: int crc = 0;
 10478                           
 10479                           ;incstack = 0
 10480  003C8C  0E00               	movlw	0
 10481  003C8E  6E1E               	movwf	crc8@crc+1,c
 10482  003C90  0E00               	movlw	0
 10483  003C92  6E1D               	movwf	crc8@crc,c
 10484                           
 10485                           ;SystemCommon.c: 16: for (int i = 0; i < dataSize; i++)
 10486  003C94  0E00               	movlw	0
 10487  003C96  6E20               	movwf	crc8@i+1,c
 10488  003C98  0E00               	movlw	0
 10489  003C9A  6E1F               	movwf	crc8@i,c
 10490  003C9C  D00E               	goto	l1400
 10491  003C9E                     
 10492                           ;SystemCommon.c: 17: {
 10493                           ;SystemCommon.c: 18: crc += dataArray[i];
 10494  003C9E  501F               	movf	crc8@i,w,c
 10495  003CA0  2418               	addwf	crc8@dataArray,w,c
 10496  003CA2  6ED9               	movwf	fsr2l,c
 10497  003CA4  5020               	movf	crc8@i+1,w,c
 10498  003CA6  2019               	addwfc	crc8@dataArray+1,w,c
 10499  003CA8  6EDA               	movwf	fsr2h,c
 10500  003CAA  50DF               	movf	indf2,w,c
 10501  003CAC  6E1C               	movwf	??_crc8& (0+255),c
 10502  003CAE  501C               	movf	??_crc8,w,c
 10503  003CB0  261D               	addwf	crc8@crc,f,c
 10504  003CB2  0E00               	movlw	0
 10505  003CB4  221E               	addwfc	crc8@crc+1,f,c
 10506  003CB6  4A1F               	infsnz	crc8@i,f,c
 10507  003CB8  2A20               	incf	crc8@i+1,f,c
 10508  003CBA                     l1400:
 10509  003CBA  501A               	movf	crc8@dataSize,w,c
 10510  003CBC  5C1F               	subwf	crc8@i,w,c
 10511  003CBE  5020               	movf	crc8@i+1,w,c
 10512  003CC0  0A80               	xorlw	128
 10513  003CC2  6E1C               	movwf	??_crc8& (0+255),c
 10514  003CC4  501B               	movf	crc8@dataSize+1,w,c
 10515  003CC6  0A80               	xorlw	128
 10516  003CC8  581C               	subwfb	??_crc8& (0+255),w,c
 10517  003CCA  A0D8               	btfss	status,0,c
 10518  003CCC  D7E8               	goto	l1401
 10519                           
 10520                           ;SystemCommon.c: 19: }
 10521                           ;SystemCommon.c: 20: crc &= 0xff;
 10522  003CCE  0EFF               	movlw	255
 10523  003CD0  161D               	andwf	crc8@crc,f,c
 10524  003CD2  0E00               	movlw	0
 10525  003CD4  161E               	andwf	crc8@crc+1,f,c
 10526                           
 10527                           ;SystemCommon.c: 21: return crc;
 10528  003CD6  501D               	movf	crc8@crc,w,c
 10529  003CD8  0012               	return	
 10530  003CDA                     __end_of_crc8:
 10531                           	opt stack 0
 10532                           tosu	equ	0xFFF
 10533                           tosh	equ	0xFFE
 10534                           tosl	equ	0xFFD
 10535                           pclath	equ	0xFFA
 10536                           tblptru	equ	0xFF8
 10537                           tblptrh	equ	0xFF7
 10538                           tblptrl	equ	0xFF6
 10539                           tablat	equ	0xFF5
 10540                           prodh	equ	0xFF4
 10541                           prodl	equ	0xFF3
 10542                           intcon	equ	0xFF2
 10543                           intcon2	equ	0xFF1
 10544                           postinc0	equ	0xFEE
 10545                           plusw0	equ	0xFEB
 10546                           wreg	equ	0xFE8
 10547                           indf1	equ	0xFE7
 10548                           postdec1	equ	0xFE5
 10549                           fsr1h	equ	0xFE2
 10550                           fsr1l	equ	0xFE1
 10551                           indf2	equ	0xFDF
 10552                           postinc2	equ	0xFDE
 10553                           postdec2	equ	0xFDD
 10554                           plusw2	equ	0xFDB
 10555                           fsr2h	equ	0xFDA
 10556                           fsr2l	equ	0xFD9
 10557                           status	equ	0xFD8
 10558                           
 10559 ;; *************** function _ZeroArray *****************
 10560 ;; Defined at:
 10561 ;;		line 24 in file "SystemCommon.c"
 10562 ;; Parameters:    Size  Location     Type
 10563 ;;  array           2   31[COMRAM] PTR unsigned char 
 10564 ;;		 -> GetMcuFwVersion@TxMsg(18), GetIntFromUartData@dataRegArr(10), SynthReadData@TxMsg(18), DacReadValue@TxMsg(7), 
 10565 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), 
 10566 ;;		 -> rxMsgData(20), rxMsgQueue(20), 
 10567 ;;  size            2   33[COMRAM] int 
 10568 ;; Auto vars:     Size  Location     Type
 10569 ;;		None
 10570 ;; Return value:  Size  Location     Type
 10571 ;;                  1    wreg      void 
 10572 ;; Registers used:
 10573 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10574 ;; Tracked objects:
 10575 ;;		On entry : 0/0
 10576 ;;		On exit  : 0/0
 10577 ;;		Unchanged: 0/0
 10578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10579 ;;      Params:         4       0       0       0       0       0       0
 10580 ;;      Locals:         0       0       0       0       0       0       0
 10581 ;;      Temps:          0       0       0       0       0       0       0
 10582 ;;      Totals:         4       0       0       0       0       0       0
 10583 ;;Total ram usage:        4 bytes
 10584 ;; Hardware stack levels used:    1
 10585 ;; Hardware stack levels required when called:    5
 10586 ;; This function calls:
 10587 ;;		_memset
 10588 ;; This function is called by:
 10589 ;;		_readUartMessage
 10590 ;;		_InitRxMessageParams
 10591 ;;		_SendAckMessage
 10592 ;;		_FlashReadUart
 10593 ;;		_FlashEreaseMem
 10594 ;;		_FlashReadCondition
 10595 ;;		_DacReadValue
 10596 ;;		_SynthReadData
 10597 ;;		_GetIntFromUartData
 10598 ;;		_GetMcuFwVersion
 10599 ;; This function uses a non-reentrant model
 10600 ;;
 10601                           
 10602                           	psect	text54
 10603  00439A                     __ptext54:
 10604                           	opt stack 0
 10605  00439A                     _ZeroArray:
 10606                           	opt stack 24
 10607                           
 10608                           ;SystemCommon.c: 26: memset(array, 0x0, size);
 10609                           
 10610                           ;incstack = 0
 10611  00439A  C020  F018         	movff	ZeroArray@array,memset@p1
 10612  00439E  C021  F019         	movff	ZeroArray@array+1,memset@p1+1
 10613  0043A2  0E00               	movlw	0
 10614  0043A4  6E1B               	movwf	memset@c+1,c
 10615  0043A6  0E00               	movlw	0
 10616  0043A8  6E1A               	movwf	memset@c,c
 10617  0043AA  C022  F01C         	movff	ZeroArray@size,memset@n
 10618  0043AE  C023  F01D         	movff	ZeroArray@size+1,memset@n+1
 10619  0043B2  ECBC  F020         	call	_memset	;wreg free
 10620  0043B6  0012               	return		;funcret
 10621  0043B8                     __end_of_ZeroArray:
 10622                           	opt stack 0
 10623                           tosu	equ	0xFFF
 10624                           tosh	equ	0xFFE
 10625                           tosl	equ	0xFFD
 10626                           pclath	equ	0xFFA
 10627                           tblptru	equ	0xFF8
 10628                           tblptrh	equ	0xFF7
 10629                           tblptrl	equ	0xFF6
 10630                           tablat	equ	0xFF5
 10631                           prodh	equ	0xFF4
 10632                           prodl	equ	0xFF3
 10633                           intcon	equ	0xFF2
 10634                           intcon2	equ	0xFF1
 10635                           postinc0	equ	0xFEE
 10636                           plusw0	equ	0xFEB
 10637                           wreg	equ	0xFE8
 10638                           indf1	equ	0xFE7
 10639                           postdec1	equ	0xFE5
 10640                           fsr1h	equ	0xFE2
 10641                           fsr1l	equ	0xFE1
 10642                           indf2	equ	0xFDF
 10643                           postinc2	equ	0xFDE
 10644                           postdec2	equ	0xFDD
 10645                           plusw2	equ	0xFDB
 10646                           fsr2h	equ	0xFDA
 10647                           fsr2l	equ	0xFD9
 10648                           status	equ	0xFD8
 10649                           
 10650 ;; *************** function _WriteUartMessage *****************
 10651 ;; Defined at:
 10652 ;;		line 158 in file "EusartApp.c"
 10653 ;; Parameters:    Size  Location     Type
 10654 ;;  dataBuf         2   24[COMRAM] PTR unsigned char 
 10655 ;;		 -> GetMcuRunTime@TxMsg(9), GetMcuFwVersion@TxMsg(18), SynthReadData@TxMsg(18), DacReadValue@TxMsg(7), 
 10656 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), 
 10657 ;;  dataSize        2   26[COMRAM] int 
 10658 ;; Auto vars:     Size  Location     Type
 10659 ;;  idx             2   29[COMRAM] int 
 10660 ;; Return value:  Size  Location     Type
 10661 ;;                  1    wreg      void 
 10662 ;; Registers used:
 10663 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10664 ;; Tracked objects:
 10665 ;;		On entry : 0/0
 10666 ;;		On exit  : 0/0
 10667 ;;		Unchanged: 0/0
 10668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10669 ;;      Params:         4       0       0       0       0       0       0
 10670 ;;      Locals:         2       0       0       0       0       0       0
 10671 ;;      Temps:          1       0       0       0       0       0       0
 10672 ;;      Totals:         7       0       0       0       0       0       0
 10673 ;;Total ram usage:        7 bytes
 10674 ;; Hardware stack levels used:    1
 10675 ;; Hardware stack levels required when called:    5
 10676 ;; This function calls:
 10677 ;;		_EUSART1_Write
 10678 ;; This function is called by:
 10679 ;;		_SendAckMessage
 10680 ;;		_FlashReadUart
 10681 ;;		_FlashReadCondition
 10682 ;;		_DacReadValue
 10683 ;;		_SynthReadData
 10684 ;;		_GetMcuFwVersion
 10685 ;;		_GetMcuRunTime
 10686 ;; This function uses a non-reentrant model
 10687 ;;
 10688                           
 10689                           	psect	text55
 10690  003FB2                     __ptext55:
 10691                           	opt stack 0
 10692  003FB2                     _WriteUartMessage:
 10693                           	opt stack 21
 10694                           
 10695                           ;EusartApp.c: 160: for(int idx = 0; idx < dataSize; idx++)
 10696                           
 10697                           ;incstack = 0
 10698  003FB2  0E00               	movlw	0
 10699  003FB4  6E1F               	movwf	WriteUartMessage@idx+1,c
 10700  003FB6  0E00               	movlw	0
 10701  003FB8  6E1E               	movwf	WriteUartMessage@idx,c
 10702  003FBA  D00B               	goto	l234
 10703  003FBC                     
 10704                           ;EusartApp.c: 161: {
 10705                           ;EusartApp.c: 162: EUSART1_Write(dataBuf[idx]);
 10706  003FBC  501E               	movf	WriteUartMessage@idx,w,c
 10707  003FBE  2419               	addwf	WriteUartMessage@dataBuf,w,c
 10708  003FC0  6ED9               	movwf	fsr2l,c
 10709  003FC2  501F               	movf	WriteUartMessage@idx+1,w,c
 10710  003FC4  201A               	addwfc	WriteUartMessage@dataBuf+1,w,c
 10711  003FC6  6EDA               	movwf	fsr2h,c
 10712  003FC8  50DF               	movf	indf2,w,c
 10713  003FCA  ECF3  F01E         	call	_EUSART1_Write
 10714  003FCE  4A1E               	infsnz	WriteUartMessage@idx,f,c
 10715  003FD0  2A1F               	incf	WriteUartMessage@idx+1,f,c
 10716  003FD2                     l234:
 10717  003FD2  501B               	movf	WriteUartMessage@dataSize,w,c
 10718  003FD4  5C1E               	subwf	WriteUartMessage@idx,w,c
 10719  003FD6  501F               	movf	WriteUartMessage@idx+1,w,c
 10720  003FD8  0A80               	xorlw	128
 10721  003FDA  6E1D               	movwf	??_WriteUartMessage& (0+255),c
 10722  003FDC  501C               	movf	WriteUartMessage@dataSize+1,w,c
 10723  003FDE  0A80               	xorlw	128
 10724  003FE0  581D               	subwfb	??_WriteUartMessage& (0+255),w,c
 10725  003FE2  B0D8               	btfsc	status,0,c
 10726  003FE4  0012               	return	
 10727  003FE6  D7EA               	goto	l235
 10728  003FE8                     __end_of_WriteUartMessage:
 10729                           	opt stack 0
 10730                           tosu	equ	0xFFF
 10731                           tosh	equ	0xFFE
 10732                           tosl	equ	0xFFD
 10733                           pclath	equ	0xFFA
 10734                           tblptru	equ	0xFF8
 10735                           tblptrh	equ	0xFF7
 10736                           tblptrl	equ	0xFF6
 10737                           tablat	equ	0xFF5
 10738                           prodh	equ	0xFF4
 10739                           prodl	equ	0xFF3
 10740                           intcon	equ	0xFF2
 10741                           intcon2	equ	0xFF1
 10742                           postinc0	equ	0xFEE
 10743                           plusw0	equ	0xFEB
 10744                           wreg	equ	0xFE8
 10745                           indf1	equ	0xFE7
 10746                           postdec1	equ	0xFE5
 10747                           fsr1h	equ	0xFE2
 10748                           fsr1l	equ	0xFE1
 10749                           indf2	equ	0xFDF
 10750                           postinc2	equ	0xFDE
 10751                           postdec2	equ	0xFDD
 10752                           plusw2	equ	0xFDB
 10753                           fsr2h	equ	0xFDA
 10754                           fsr2l	equ	0xFD9
 10755                           status	equ	0xFD8
 10756                           
 10757 ;; *************** function _EUSART1_Write *****************
 10758 ;; Defined at:
 10759 ;;		line 157 in file "mcc_generated_files/eusart1.c"
 10760 ;; Parameters:    Size  Location     Type
 10761 ;;  txData          1    wreg     unsigned char 
 10762 ;; Auto vars:     Size  Location     Type
 10763 ;;  txData          1   23[COMRAM] unsigned char 
 10764 ;; Return value:  Size  Location     Type
 10765 ;;                  1    wreg      void 
 10766 ;; Registers used:
 10767 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10768 ;; Tracked objects:
 10769 ;;		On entry : 0/0
 10770 ;;		On exit  : 0/0
 10771 ;;		Unchanged: 0/0
 10772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10773 ;;      Params:         0       0       0       0       0       0       0
 10774 ;;      Locals:         1       0       0       0       0       0       0
 10775 ;;      Temps:          0       0       0       0       0       0       0
 10776 ;;      Totals:         1       0       0       0       0       0       0
 10777 ;;Total ram usage:        1 bytes
 10778 ;; Hardware stack levels used:    1
 10779 ;; Hardware stack levels required when called:    4
 10780 ;; This function calls:
 10781 ;;		Nothing
 10782 ;; This function is called by:
 10783 ;;		_WriteUartMessage
 10784 ;; This function uses a non-reentrant model
 10785 ;;
 10786                           
 10787                           	psect	text56
 10788  003DE6                     __ptext56:
 10789                           	opt stack 0
 10790  003DE6                     _EUSART1_Write:
 10791                           	opt stack 21
 10792                           
 10793                           ;incstack = 0
 10794                           ;EUSART1_Write@txData stored from wreg
 10795  003DE6  6E18               	movwf	EUSART1_Write@txData,c
 10796  003DE8                     
 10797                           ;eusart1.c: 160: {
 10798                           
 10799                           ;eusart1.c: 159: while(0 == eusart1TxBufferRemaining)
 10800  003DE8  0101               	movlb	1	; () banked
 10801  003DEA  51E8               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
 10802  003DEC  B4D8               	btfsc	status,2,c
 10803  003DEE  D7FC               	goto	l7706
 10804                           
 10805                           ; BSR set to: 1
 10806                           ;eusart1.c: 161: }
 10807                           ;eusart1.c: 163: if(0 == PIE1bits.TX1IE)
 10808  003DF0  B89D               	btfsc	3997,4,c	;volatile
 10809  003DF2  D003               	goto	l919
 10810                           
 10811                           ; BSR set to: 1
 10812                           ;eusart1.c: 164: {
 10813                           ;eusart1.c: 165: TXREG1 = txData;
 10814  003DF4  C018  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
 10815                           
 10816                           ;eusart1.c: 166: }
 10817  003DF8  D012               	goto	l920
 10818  003DFA                     l919:
 10819                           
 10820                           ; BSR set to: 1
 10821                           ;eusart1.c: 167: else
 10822                           ;eusart1.c: 168: {
 10823                           ;eusart1.c: 169: PIE1bits.TX1IE = 0;
 10824  003DFA  989D               	bcf	3997,4,c	;volatile
 10825                           
 10826                           ; BSR set to: 1
 10827                           ;eusart1.c: 170: eusart1TxBuffer[eusart1TxHead++] = txData;
 10828  003DFC  503A               	movf	_eusart1TxHead,w,c	;volatile
 10829  003DFE  0D01               	mullw	1
 10830  003E00  0E5D               	movlw	low _eusart1TxBuffer
 10831  003E02  24F3               	addwf	prodl,w,c
 10832  003E04  6ED9               	movwf	fsr2l,c
 10833  003E06  0E02               	movlw	high _eusart1TxBuffer
 10834  003E08  20F4               	addwfc	prodh,w,c
 10835  003E0A  6EDA               	movwf	fsr2h,c
 10836  003E0C  C018  FFDF         	movff	EUSART1_Write@txData,indf2
 10837                           
 10838                           ; BSR set to: 1
 10839  003E10  2A3A               	incf	_eusart1TxHead,f,c	;volatile
 10840                           
 10841                           ; BSR set to: 1
 10842                           ;eusart1.c: 171: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
 10843  003E12  0E45               	movlw	69
 10844  003E14  643A               	cpfsgt	_eusart1TxHead,c	;volatile
 10845  003E16  D002               	goto	l921
 10846                           
 10847                           ; BSR set to: 1
 10848                           ;eusart1.c: 172: {
 10849                           ;eusart1.c: 173: eusart1TxHead = 0;
 10850  003E18  0E00               	movlw	0
 10851  003E1A  6E3A               	movwf	_eusart1TxHead,c	;volatile
 10852  003E1C                     l921:
 10853                           
 10854                           ; BSR set to: 1
 10855                           ;eusart1.c: 174: }
 10856                           ;eusart1.c: 175: eusart1TxBufferRemaining--;
 10857                           
 10858                           ; BSR set to: 1
 10859  003E1C  07E8               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 10860  003E1E                     l920:
 10861                           
 10862                           ; BSR set to: 1
 10863                           ;eusart1.c: 176: }
 10864                           ;eusart1.c: 177: PIE1bits.TX1IE = 1;
 10865                           
 10866                           ; BSR set to: 1
 10867  003E1E  889D               	bsf	3997,4,c	;volatile
 10868                           
 10869                           ; BSR set to: 1
 10870  003E20  0012               	return		;funcret
 10871  003E22                     __end_of_EUSART1_Write:
 10872                           	opt stack 0
 10873                           tosu	equ	0xFFF
 10874                           tosh	equ	0xFFE
 10875                           tosl	equ	0xFFD
 10876                           pclath	equ	0xFFA
 10877                           tblptru	equ	0xFF8
 10878                           tblptrh	equ	0xFF7
 10879                           tblptrl	equ	0xFF6
 10880                           tablat	equ	0xFF5
 10881                           prodh	equ	0xFF4
 10882                           prodl	equ	0xFF3
 10883                           intcon	equ	0xFF2
 10884                           intcon2	equ	0xFF1
 10885                           postinc0	equ	0xFEE
 10886                           plusw0	equ	0xFEB
 10887                           wreg	equ	0xFE8
 10888                           indf1	equ	0xFE7
 10889                           postdec1	equ	0xFE5
 10890                           fsr1h	equ	0xFE2
 10891                           fsr1l	equ	0xFE1
 10892                           indf2	equ	0xFDF
 10893                           postinc2	equ	0xFDE
 10894                           postdec2	equ	0xFDD
 10895                           plusw2	equ	0xFDB
 10896                           fsr2h	equ	0xFDA
 10897                           fsr2l	equ	0xFD9
 10898                           status	equ	0xFD8
 10899                           
 10900 ;; *************** function _InitSystemApplicationManagers *****************
 10901 ;; Defined at:
 10902 ;;		line 33 in file "SystemSettings.c"
 10903 ;; Parameters:    Size  Location     Type
 10904 ;;		None
 10905 ;; Auto vars:     Size  Location     Type
 10906 ;;		None
 10907 ;; Return value:  Size  Location     Type
 10908 ;;                  1    wreg      void 
 10909 ;; Registers used:
 10910 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10911 ;; Tracked objects:
 10912 ;;		On entry : 0/0
 10913 ;;		On exit  : 0/0
 10914 ;;		Unchanged: 0/0
 10915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10916 ;;      Params:         0       0       0       0       0       0       0
 10917 ;;      Locals:         0       0       0       0       0       0       0
 10918 ;;      Temps:          0       0       0       0       0       0       0
 10919 ;;      Totals:         0       0       0       0       0       0       0
 10920 ;;Total ram usage:        0 bytes
 10921 ;; Hardware stack levels used:    1
 10922 ;; Hardware stack levels required when called:   12
 10923 ;; This function calls:
 10924 ;;		_ClearMcuRunTime
 10925 ;;		_DacInit
 10926 ;;		_InitAdcApplicationMgr
 10927 ;;		_PLLInitialize
 10928 ;;		_TMR0_StartTimer
 10929 ;; This function is called by:
 10930 ;;		_main
 10931 ;; This function uses a non-reentrant model
 10932 ;;
 10933                           
 10934                           	psect	text57
 10935  004438                     __ptext57:
 10936                           	opt stack 0
 10937  004438                     _InitSystemApplicationManagers:
 10938                           	opt stack 18
 10939                           
 10940                           ;SystemSettings.c: 36: InitAdcApplicationMgr();
 10941                           
 10942                           ; BSR set to: 1
 10943                           ;incstack = 0
 10944  004438  ECA1  F022         	call	_InitAdcApplicationMgr	;wreg free
 10945                           
 10946                           ;SystemSettings.c: 39: TMR0_StartTimer();
 10947  00443C  ECA9  F022         	call	_TMR0_StartTimer	;wreg free
 10948                           
 10949                           ;SystemSettings.c: 42: PLLInitialize();
 10950  004440  EC21  F021         	call	_PLLInitialize	;wreg free
 10951                           
 10952                           ;SystemSettings.c: 45: ClearMcuRunTime();
 10953  004444  EC3B  F022         	call	_ClearMcuRunTime	;wreg free
 10954                           
 10955                           ;SystemSettings.c: 48: DacInit();
 10956  004448  EC1C  F015         	call	_DacInit	;wreg free
 10957  00444C  0012               	return		;funcret
 10958  00444E                     __end_of_InitSystemApplicationManagers:
 10959                           	opt stack 0
 10960                           tosu	equ	0xFFF
 10961                           tosh	equ	0xFFE
 10962                           tosl	equ	0xFFD
 10963                           pclath	equ	0xFFA
 10964                           tblptru	equ	0xFF8
 10965                           tblptrh	equ	0xFF7
 10966                           tblptrl	equ	0xFF6
 10967                           tablat	equ	0xFF5
 10968                           prodh	equ	0xFF4
 10969                           prodl	equ	0xFF3
 10970                           intcon	equ	0xFF2
 10971                           intcon2	equ	0xFF1
 10972                           postinc0	equ	0xFEE
 10973                           plusw0	equ	0xFEB
 10974                           wreg	equ	0xFE8
 10975                           indf1	equ	0xFE7
 10976                           postdec1	equ	0xFE5
 10977                           fsr1h	equ	0xFE2
 10978                           fsr1l	equ	0xFE1
 10979                           indf2	equ	0xFDF
 10980                           postinc2	equ	0xFDE
 10981                           postdec2	equ	0xFDD
 10982                           plusw2	equ	0xFDB
 10983                           fsr2h	equ	0xFDA
 10984                           fsr2l	equ	0xFD9
 10985                           status	equ	0xFD8
 10986                           
 10987 ;; *************** function _TMR0_StartTimer *****************
 10988 ;; Defined at:
 10989 ;;		line 93 in file "mcc_generated_files/tmr0.c"
 10990 ;; Parameters:    Size  Location     Type
 10991 ;;		None
 10992 ;; Auto vars:     Size  Location     Type
 10993 ;;		None
 10994 ;; Return value:  Size  Location     Type
 10995 ;;                  1    wreg      void 
 10996 ;; Registers used:
 10997 ;;		None
 10998 ;; Tracked objects:
 10999 ;;		On entry : 0/0
 11000 ;;		On exit  : 0/0
 11001 ;;		Unchanged: 0/0
 11002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11003 ;;      Params:         0       0       0       0       0       0       0
 11004 ;;      Locals:         0       0       0       0       0       0       0
 11005 ;;      Temps:          0       0       0       0       0       0       0
 11006 ;;      Totals:         0       0       0       0       0       0       0
 11007 ;;Total ram usage:        0 bytes
 11008 ;; Hardware stack levels used:    1
 11009 ;; Hardware stack levels required when called:    4
 11010 ;; This function calls:
 11011 ;;		Nothing
 11012 ;; This function is called by:
 11013 ;;		_InitSystemApplicationManagers
 11014 ;; This function uses a non-reentrant model
 11015 ;;
 11016                           
 11017                           	psect	text58
 11018  004552                     __ptext58:
 11019                           	opt stack 0
 11020  004552                     _TMR0_StartTimer:
 11021                           	opt stack 25
 11022                           
 11023                           ;tmr0.c: 96: T0CONbits.TMR0ON = 1;
 11024                           
 11025                           ;incstack = 0
 11026  004552  8ED5               	bsf	4053,7,c	;volatile
 11027  004554  0012               	return		;funcret
 11028  004556                     __end_of_TMR0_StartTimer:
 11029                           	opt stack 0
 11030                           tosu	equ	0xFFF
 11031                           tosh	equ	0xFFE
 11032                           tosl	equ	0xFFD
 11033                           pclath	equ	0xFFA
 11034                           tblptru	equ	0xFF8
 11035                           tblptrh	equ	0xFF7
 11036                           tblptrl	equ	0xFF6
 11037                           tablat	equ	0xFF5
 11038                           prodh	equ	0xFF4
 11039                           prodl	equ	0xFF3
 11040                           intcon	equ	0xFF2
 11041                           intcon2	equ	0xFF1
 11042                           postinc0	equ	0xFEE
 11043                           plusw0	equ	0xFEB
 11044                           wreg	equ	0xFE8
 11045                           indf1	equ	0xFE7
 11046                           postdec1	equ	0xFE5
 11047                           fsr1h	equ	0xFE2
 11048                           fsr1l	equ	0xFE1
 11049                           indf2	equ	0xFDF
 11050                           postinc2	equ	0xFDE
 11051                           postdec2	equ	0xFDD
 11052                           plusw2	equ	0xFDB
 11053                           fsr2h	equ	0xFDA
 11054                           fsr2l	equ	0xFD9
 11055                           status	equ	0xFD8
 11056                           
 11057 ;; *************** function _PLLInitialize *****************
 11058 ;; Defined at:
 11059 ;;		line 28 in file "SyntApp.c"
 11060 ;; Parameters:    Size  Location     Type
 11061 ;;		None
 11062 ;; Auto vars:     Size  Location     Type
 11063 ;;		None
 11064 ;; Return value:  Size  Location     Type
 11065 ;;                  1    wreg      void 
 11066 ;; Registers used:
 11067 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11068 ;; Tracked objects:
 11069 ;;		On entry : 0/0
 11070 ;;		On exit  : 0/0
 11071 ;;		Unchanged: 0/0
 11072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11073 ;;      Params:         0       0       0       0       0       0       0
 11074 ;;      Locals:         0       0       0       0       0       0       0
 11075 ;;      Temps:          0       0       0       0       0       0       0
 11076 ;;      Totals:         0       0       0       0       0       0       0
 11077 ;;Total ram usage:        0 bytes
 11078 ;; Hardware stack levels used:    1
 11079 ;; Hardware stack levels required when called:   11
 11080 ;; This function calls:
 11081 ;;		_FillArray
 11082 ;;		_InitSynth
 11083 ;; This function is called by:
 11084 ;;		_InitSystemApplicationManagers
 11085 ;; This function uses a non-reentrant model
 11086 ;;
 11087                           
 11088                           	psect	text59
 11089  004242                     __ptext59:
 11090                           	opt stack 0
 11091  004242                     _PLLInitialize:
 11092                           	opt stack 18
 11093                           
 11094                           ;SyntApp.c: 30: InitSynth(SYNTH_TX);
 11095                           
 11096                           ;incstack = 0
 11097  004242  0E00               	movlw	0
 11098  004244  EC54  F007         	call	_InitSynth
 11099                           
 11100                           ;SyntApp.c: 31: InitSynth(SYNTH_RX);
 11101  004248  0E01               	movlw	1
 11102  00424A  EC54  F007         	call	_InitSynth
 11103                           
 11104                           ;SyntApp.c: 34: FillArray(synthLdRxArray, sizeof(synthLdRxArray), 0xFF);
 11105  00424E  0EA7               	movlw	low _synthLdRxArray
 11106  004250  6E20               	movwf	FillArray@array,c
 11107  004252  0E01               	movlw	high _synthLdRxArray
 11108  004254  6E21               	movwf	FillArray@array+1,c
 11109  004256  0E00               	movlw	0
 11110  004258  6E23               	movwf	FillArray@size+1,c
 11111  00425A  0E0C               	movlw	12
 11112  00425C  6E22               	movwf	FillArray@size,c
 11113  00425E  0EFF               	movlw	255
 11114  004260  6E24               	movwf	FillArray@value,c
 11115  004262  ECEA  F021         	call	_FillArray	;wreg free
 11116  004266  0012               	return		;funcret
 11117  004268                     __end_of_PLLInitialize:
 11118                           	opt stack 0
 11119                           tosu	equ	0xFFF
 11120                           tosh	equ	0xFFE
 11121                           tosl	equ	0xFFD
 11122                           pclath	equ	0xFFA
 11123                           tblptru	equ	0xFF8
 11124                           tblptrh	equ	0xFF7
 11125                           tblptrl	equ	0xFF6
 11126                           tablat	equ	0xFF5
 11127                           prodh	equ	0xFF4
 11128                           prodl	equ	0xFF3
 11129                           intcon	equ	0xFF2
 11130                           intcon2	equ	0xFF1
 11131                           postinc0	equ	0xFEE
 11132                           plusw0	equ	0xFEB
 11133                           wreg	equ	0xFE8
 11134                           indf1	equ	0xFE7
 11135                           postdec1	equ	0xFE5
 11136                           fsr1h	equ	0xFE2
 11137                           fsr1l	equ	0xFE1
 11138                           indf2	equ	0xFDF
 11139                           postinc2	equ	0xFDE
 11140                           postdec2	equ	0xFDD
 11141                           plusw2	equ	0xFDB
 11142                           fsr2h	equ	0xFDA
 11143                           fsr2l	equ	0xFD9
 11144                           status	equ	0xFD8
 11145                           
 11146 ;; *************** function _InitSynth *****************
 11147 ;; Defined at:
 11148 ;;		line 37 in file "SyntApp.c"
 11149 ;; Parameters:    Size  Location     Type
 11150 ;;  cType           1    wreg     enum E1
 11151 ;; Auto vars:     Size  Location     Type
 11152 ;;  cType           1  108[BANK0 ] enum E1
 11153 ;;  idx             1  109[BANK0 ] unsigned char 
 11154 ;;  EepromVal       4  104[BANK0 ] unsigned long 
 11155 ;;  regNum          1  110[BANK0 ] unsigned char 
 11156 ;; Return value:  Size  Location     Type
 11157 ;;                  1    wreg      void 
 11158 ;; Registers used:
 11159 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11160 ;; Tracked objects:
 11161 ;;		On entry : 0/0
 11162 ;;		On exit  : 0/0
 11163 ;;		Unchanged: 0/0
 11164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11165 ;;      Params:         0       0       0       0       0       0       0
 11166 ;;      Locals:         0       7       0       0       0       0       0
 11167 ;;      Temps:          0       0       0       0       0       0       0
 11168 ;;      Totals:         0       7       0       0       0       0       0
 11169 ;;Total ram usage:        7 bytes
 11170 ;; Hardware stack levels used:    1
 11171 ;; Hardware stack levels required when called:   10
 11172 ;; This function calls:
 11173 ;;		_ReadIntFromEeprom
 11174 ;;		_SWSPI_send_word
 11175 ;;		_StoreIntInEeprom
 11176 ;;		_SwSpi_Set_CE_Pin
 11177 ;; This function is called by:
 11178 ;;		_PLLInitialize
 11179 ;;		_SetSynthOper
 11180 ;;		_SynthLdDetect
 11181 ;; This function uses a non-reentrant model
 11182 ;;
 11183                           
 11184                           	psect	text60
 11185  000EA8                     __ptext60:
 11186                           	opt stack 0
 11187  000EA8                     _InitSynth:
 11188                           	opt stack 17
 11189                           
 11190                           ;incstack = 0
 11191                           ;InitSynth@cType stored from wreg
 11192  000EA8  0100               	movlb	0	; () banked
 11193  000EAA  6FCC               	movwf	InitSynth@cType& (0+255),b
 11194                           
 11195                           ;SyntApp.c: 39: SwSpi_Set_CE_Pin(cType, 1);
 11196  000EAC  0E01               	movlw	1
 11197  000EAE  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
 11198  000EB0  0100               	movlb	0	; () banked
 11199  000EB2  51CC               	movf	InitSynth@cType& (0+255),w,b
 11200  000EB4  EC11  F01F         	call	_SwSpi_Set_CE_Pin
 11201                           
 11202                           ;SyntApp.c: 41: uint8_t regNum = 0;
 11203  000EB8  0E00               	movlw	0
 11204  000EBA  0100               	movlb	0	; () banked
 11205  000EBC  6FCE               	movwf	InitSynth@regNum& (0+255),b
 11206                           
 11207                           ; BSR set to: 0
 11208                           ;SyntApp.c: 42: uint32_t EepromVal = 0x0;
 11209  000EBE  0E00               	movlw	0
 11210  000EC0  6FC8               	movwf	InitSynth@EepromVal& (0+255),b
 11211  000EC2  0E00               	movlw	0
 11212  000EC4  6FC9               	movwf	(InitSynth@EepromVal+1)& (0+255),b
 11213  000EC6  0E00               	movlw	0
 11214  000EC8  6FCA               	movwf	(InitSynth@EepromVal+2)& (0+255),b
 11215  000ECA  0E00               	movlw	0
 11216  000ECC  6FCB               	movwf	(InitSynth@EepromVal+3)& (0+255),b
 11217                           
 11218                           ; BSR set to: 0
 11219                           ;SyntApp.c: 45: for(uint8_t idx = 0; idx < 13; idx++)
 11220  000ECE  0E00               	movlw	0
 11221  000ED0  6FCD               	movwf	InitSynth@idx& (0+255),b
 11222  000ED2                     l8144:
 11223                           
 11224                           ; BSR set to: 0
 11225  000ED2  0E0C               	movlw	12
 11226  000ED4  65CD               	cpfsgt	InitSynth@idx& (0+255),b
 11227  000ED6  D001               	goto	l521
 11228  000ED8  0012               	return	
 11229  000EDA                     l521:
 11230                           
 11231                           ; BSR set to: 0
 11232                           ;SyntApp.c: 46: {
 11233                           ;SyntApp.c: 47: regNum = 13 - idx - 1;
 11234                           
 11235                           ; BSR set to: 0
 11236  000EDA  29CD               	incf	InitSynth@idx& (0+255),w,b
 11237  000EDC  0800               	sublw	0
 11238  000EDE  0F0D               	addlw	13
 11239  000EE0  6FCE               	movwf	InitSynth@regNum& (0+255),b
 11240                           
 11241                           ; BSR set to: 0
 11242                           ;SyntApp.c: 48: if(regNum == 0x0 || regNum == 0x1 || regNum == 0x2 || regNum == 0x4 || r
      +                          egNum == 0x6 || regNum == 0xA)
 11243  000EE2  51CE               	movf	InitSynth@regNum& (0+255),w,b
 11244  000EE4  B4D8               	btfsc	status,2,c
 11245  000EE6  D013               	goto	u8480
 11246                           
 11247                           ; BSR set to: 0
 11248  000EE8  05CE               	decf	InitSynth@regNum& (0+255),w,b
 11249  000EEA  B4D8               	btfsc	status,2,c
 11250  000EEC  D010               	goto	u8480
 11251                           
 11252                           ; BSR set to: 0
 11253  000EEE  0E02               	movlw	2
 11254  000EF0  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 11255  000EF2  B4D8               	btfsc	status,2,c
 11256  000EF4  D00C               	goto	u8480
 11257                           
 11258                           ; BSR set to: 0
 11259  000EF6  0E04               	movlw	4
 11260  000EF8  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 11261  000EFA  B4D8               	btfsc	status,2,c
 11262  000EFC  D008               	goto	u8480
 11263                           
 11264                           ; BSR set to: 0
 11265  000EFE  0E06               	movlw	6
 11266  000F00  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 11267  000F02  B4D8               	btfsc	status,2,c
 11268  000F04  D004               	goto	u8480
 11269                           
 11270                           ; BSR set to: 0
 11271  000F06  0E0A               	movlw	10
 11272  000F08  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 11273  000F0A  A4D8               	btfss	status,2,c
 11274  000F0C  D0EB               	goto	l523
 11275  000F0E                     u8480:
 11276                           
 11277                           ; BSR set to: 0
 11278                           ;SyntApp.c: 49: {
 11279                           ;SyntApp.c: 50: if(cType == SYNTH_TX)
 11280                           
 11281                           ; BSR set to: 0
 11282  000F0E  51CC               	movf	InitSynth@cType& (0+255),w,b
 11283  000F10  A4D8               	btfss	status,2,c
 11284  000F12  D071               	goto	l526
 11285                           
 11286                           ; BSR set to: 0
 11287                           ;SyntApp.c: 51: {
 11288                           ;SyntApp.c: 52: EepromVal = ReadIntFromEeprom((0) | SYNTH_ADDRES[regNum], 4);
 11289  000F14  0E00               	movlw	0
 11290  000F16  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 11291  000F18  0E04               	movlw	4
 11292  000F1A  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 11293  000F1C  51CE               	movf	InitSynth@regNum& (0+255),w,b
 11294  000F1E  0D01               	mullw	1
 11295  000F20  0E35               	movlw	low _SYNTH_ADDRES
 11296  000F22  24F3               	addwf	prodl,w,c
 11297  000F24  6EF6               	movwf	tblptrl,c
 11298  000F26  0E06               	movlw	high _SYNTH_ADDRES
 11299  000F28  20F4               	addwfc	prodh,w,c
 11300  000F2A  6EF7               	movwf	tblptrh,c
 11301  000F2C                     	if	0	;There are less than 3 active tblptr bytes
 11302  000F2C                     	endif
 11303  000F2C  0008               	tblrd		*
 11304  000F2E  50F5               	movf	tablat,w,c
 11305  000F30  EC44  F010         	call	_ReadIntFromEeprom
 11306  000F34  C0B1  F0C8         	movff	?_ReadIntFromEeprom,InitSynth@EepromVal
 11307  000F38  C0B2  F0C9         	movff	?_ReadIntFromEeprom+1,InitSynth@EepromVal+1
 11308  000F3C  C0B3  F0CA         	movff	?_ReadIntFromEeprom+2,InitSynth@EepromVal+2
 11309  000F40  C0B4  F0CB         	movff	?_ReadIntFromEeprom+3,InitSynth@EepromVal+3
 11310                           
 11311                           ;SyntApp.c: 53: if(EepromVal == 0xFFFFFFFF)
 11312  000F44  0100               	movlb	0	; () banked
 11313  000F46  29C8               	incf	InitSynth@EepromVal& (0+255),w,b
 11314  000F48  E147               	bnz	l8172
 11315  000F4A  29C9               	incf	(InitSynth@EepromVal+1)& (0+255),w,b
 11316  000F4C  E145               	bnz	l8172
 11317  000F4E  29CA               	incf	(InitSynth@EepromVal+2)& (0+255),w,b
 11318  000F50  E143               	bnz	l8172
 11319  000F52  29CB               	incf	(InitSynth@EepromVal+3)& (0+255),w,b
 11320  000F54  A4D8               	btfss	status,2,c
 11321  000F56  D040               	goto	l527
 11322                           
 11323                           ; BSR set to: 0
 11324                           ;SyntApp.c: 54: {
 11325                           ;SyntApp.c: 55: SWSPI_send_word(cType, SYNTH_REGS[idx],3);
 11326  000F58  51CD               	movf	InitSynth@idx& (0+255),w,b
 11327  000F5A  0D04               	mullw	4
 11328  000F5C  0E01               	movlw	low _SYNTH_REGS
 11329  000F5E  24F3               	addwf	prodl,w,c
 11330  000F60  6EF6               	movwf	tblptrl,c
 11331  000F62  0E06               	movlw	high _SYNTH_REGS
 11332  000F64  20F4               	addwfc	prodh,w,c
 11333  000F66  6EF7               	movwf	tblptrh,c
 11334  000F68                     	if	0	;There are less than 3 active tblptr bytes
 11335  000F68                     	endif
 11336  000F68  0009               	tblrd		*+
 11337  000F6A  CFF5 F029          	movff	tablat,SWSPI_send_word@data
 11338  000F6E  0009               	tblrd		*+
 11339  000F70  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+1
 11340  000F74  0009               	tblrd		*+
 11341  000F76  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+2
 11342  000F7A  000A               	tblrd		*-
 11343  000F7C  CFF5 F02C          	movff	tablat,SWSPI_send_word@data+3
 11344  000F80  0E03               	movlw	3
 11345  000F82  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11346  000F84  51CC               	movf	InitSynth@cType& (0+255),w,b
 11347  000F86  EC96  F018         	call	_SWSPI_send_word
 11348                           
 11349                           ;SyntApp.c: 56: StoreIntInEeprom(SYNTH_REGS[idx], (0) | SYNTH_ADDRES[regNum], 4);
 11350  000F8A  0100               	movlb	0	; () banked
 11351  000F8C  51CD               	movf	InitSynth@idx& (0+255),w,b
 11352  000F8E  0D04               	mullw	4
 11353  000F90  0E01               	movlw	low _SYNTH_REGS
 11354  000F92  24F3               	addwf	prodl,w,c
 11355  000F94  6EF6               	movwf	tblptrl,c
 11356  000F96  0E06               	movlw	high _SYNTH_REGS
 11357  000F98  20F4               	addwfc	prodh,w,c
 11358  000F9A  6EF7               	movwf	tblptrh,c
 11359  000F9C                     	if	0	;There are less than 3 active tblptr bytes
 11360  000F9C                     	endif
 11361  000F9C  0009               	tblrd		*+
 11362  000F9E  CFF5 F021          	movff	tablat,StoreIntInEeprom@data
 11363  000FA2  0009               	tblrd		*+
 11364  000FA4  CFF5 F022          	movff	tablat,StoreIntInEeprom@data+1
 11365  000FA8  0009               	tblrd		*+
 11366  000FAA  CFF5 F023          	movff	tablat,StoreIntInEeprom@data+2
 11367  000FAE  000A               	tblrd		*-
 11368  000FB0  CFF5 F024          	movff	tablat,StoreIntInEeprom@data+3
 11369  000FB4  51CE               	movf	InitSynth@regNum& (0+255),w,b
 11370  000FB6  0D01               	mullw	1
 11371  000FB8  0E35               	movlw	low _SYNTH_ADDRES
 11372  000FBA  24F3               	addwf	prodl,w,c
 11373  000FBC  6EF6               	movwf	tblptrl,c
 11374  000FBE  0E06               	movlw	high _SYNTH_ADDRES
 11375  000FC0  20F4               	addwfc	prodh,w,c
 11376  000FC2  6EF7               	movwf	tblptrh,c
 11377  000FC4                     	if	0	;There are less than 3 active tblptr bytes
 11378  000FC4                     	endif
 11379  000FC4  0008               	tblrd		*
 11380  000FC6  CFF5 F025          	movff	tablat,StoreIntInEeprom@address
 11381  000FCA  0E00               	movlw	0
 11382  000FCC  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
 11383  000FCE  0E04               	movlw	4
 11384  000FD0  6E26               	movwf	StoreIntInEeprom@numOfByes,c
 11385  000FD2  EC85  F01F         	call	_StoreIntInEeprom	;wreg free
 11386                           
 11387                           ;SyntApp.c: 57: }
 11388  000FD6  D0A0               	goto	l533
 11389  000FD8                     l527:
 11390  000FD8                     l8172:
 11391                           
 11392                           ;SyntApp.c: 58: else
 11393                           ;SyntApp.c: 59: {
 11394                           ;SyntApp.c: 60: SWSPI_send_word(cType, EepromVal,3);
 11395  000FD8  C0C8  F029         	movff	InitSynth@EepromVal,SWSPI_send_word@data
 11396  000FDC  C0C9  F02A         	movff	InitSynth@EepromVal+1,SWSPI_send_word@data+1
 11397  000FE0  C0CA  F02B         	movff	InitSynth@EepromVal+2,SWSPI_send_word@data+2
 11398  000FE4  C0CB  F02C         	movff	InitSynth@EepromVal+3,SWSPI_send_word@data+3
 11399  000FE8  0E03               	movlw	3
 11400  000FEA  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11401  000FEC  0100               	movlb	0	; () banked
 11402  000FEE  51CC               	movf	InitSynth@cType& (0+255),w,b
 11403  000FF0  EC96  F018         	call	_SWSPI_send_word
 11404                           
 11405                           ;SyntApp.c: 61: }
 11406                           ;SyntApp.c: 62: }
 11407  000FF4  D091               	goto	l533
 11408  000FF6                     l526:
 11409                           
 11410                           ;SyntApp.c: 63: else if (cType == SYNTH_RX)
 11411  000FF6  0100               	movlb	0	; () banked
 11412  000FF8  05CC               	decf	InitSynth@cType& (0+255),w,b
 11413  000FFA  A4D8               	btfss	status,2,c
 11414  000FFC  D08D               	goto	l533
 11415                           
 11416                           ; BSR set to: 0
 11417                           ;SyntApp.c: 64: {
 11418                           ;SyntApp.c: 65: EepromVal = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[regNum], 4);
 11419  000FFE  0E00               	movlw	0
 11420  001000  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 11421  001002  0E04               	movlw	4
 11422  001004  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 11423  001006  51CE               	movf	InitSynth@regNum& (0+255),w,b
 11424  001008  0D01               	mullw	1
 11425  00100A  0E35               	movlw	low _SYNTH_ADDRES
 11426  00100C  24F3               	addwf	prodl,w,c
 11427  00100E  6EF6               	movwf	tblptrl,c
 11428  001010  0E06               	movlw	high _SYNTH_ADDRES
 11429  001012  20F4               	addwfc	prodh,w,c
 11430  001014  6EF7               	movwf	tblptrh,c
 11431  001016                     	if	0	;There are less than 3 active tblptr bytes
 11432  001016                     	endif
 11433  001016  0008               	tblrd		*
 11434  001018  50F5               	movf	tablat,w,c
 11435  00101A  0920               	iorlw	32
 11436  00101C  EC44  F010         	call	_ReadIntFromEeprom
 11437  001020  C0B1  F0C8         	movff	?_ReadIntFromEeprom,InitSynth@EepromVal
 11438  001024  C0B2  F0C9         	movff	?_ReadIntFromEeprom+1,InitSynth@EepromVal+1
 11439  001028  C0B3  F0CA         	movff	?_ReadIntFromEeprom+2,InitSynth@EepromVal+2
 11440  00102C  C0B4  F0CB         	movff	?_ReadIntFromEeprom+3,InitSynth@EepromVal+3
 11441                           
 11442                           ;SyntApp.c: 66: if(EepromVal == 0xFFFFFFFF)
 11443  001030  0100               	movlb	0	; () banked
 11444  001032  29C8               	incf	InitSynth@EepromVal& (0+255),w,b
 11445  001034  E148               	bnz	l8184
 11446  001036  29C9               	incf	(InitSynth@EepromVal+1)& (0+255),w,b
 11447  001038  E146               	bnz	l8184
 11448  00103A  29CA               	incf	(InitSynth@EepromVal+2)& (0+255),w,b
 11449  00103C  E144               	bnz	l8184
 11450  00103E  29CB               	incf	(InitSynth@EepromVal+3)& (0+255),w,b
 11451  001040  A4D8               	btfss	status,2,c
 11452  001042  D041               	goto	l531
 11453                           
 11454                           ; BSR set to: 0
 11455                           ;SyntApp.c: 67: {
 11456                           ;SyntApp.c: 68: SWSPI_send_word(cType, SYNTH_REGS[idx],3);
 11457  001044  51CD               	movf	InitSynth@idx& (0+255),w,b
 11458  001046  0D04               	mullw	4
 11459  001048  0E01               	movlw	low _SYNTH_REGS
 11460  00104A  24F3               	addwf	prodl,w,c
 11461  00104C  6EF6               	movwf	tblptrl,c
 11462  00104E  0E06               	movlw	high _SYNTH_REGS
 11463  001050  20F4               	addwfc	prodh,w,c
 11464  001052  6EF7               	movwf	tblptrh,c
 11465  001054                     	if	0	;There are less than 3 active tblptr bytes
 11466  001054                     	endif
 11467  001054  0009               	tblrd		*+
 11468  001056  CFF5 F029          	movff	tablat,SWSPI_send_word@data
 11469  00105A  0009               	tblrd		*+
 11470  00105C  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+1
 11471  001060  0009               	tblrd		*+
 11472  001062  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+2
 11473  001066  000A               	tblrd		*-
 11474  001068  CFF5 F02C          	movff	tablat,SWSPI_send_word@data+3
 11475  00106C  0E03               	movlw	3
 11476  00106E  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11477  001070  51CC               	movf	InitSynth@cType& (0+255),w,b
 11478  001072  EC96  F018         	call	_SWSPI_send_word
 11479                           
 11480                           ;SyntApp.c: 69: StoreIntInEeprom(SYNTH_REGS[idx], (0x20) | SYNTH_ADDRES[regNum], 4);
 11481  001076  0100               	movlb	0	; () banked
 11482  001078  51CD               	movf	InitSynth@idx& (0+255),w,b
 11483  00107A  0D04               	mullw	4
 11484  00107C  0E01               	movlw	low _SYNTH_REGS
 11485  00107E  24F3               	addwf	prodl,w,c
 11486  001080  6EF6               	movwf	tblptrl,c
 11487  001082  0E06               	movlw	high _SYNTH_REGS
 11488  001084  20F4               	addwfc	prodh,w,c
 11489  001086  6EF7               	movwf	tblptrh,c
 11490  001088                     	if	0	;There are less than 3 active tblptr bytes
 11491  001088                     	endif
 11492  001088  0009               	tblrd		*+
 11493  00108A  CFF5 F021          	movff	tablat,StoreIntInEeprom@data
 11494  00108E  0009               	tblrd		*+
 11495  001090  CFF5 F022          	movff	tablat,StoreIntInEeprom@data+1
 11496  001094  0009               	tblrd		*+
 11497  001096  CFF5 F023          	movff	tablat,StoreIntInEeprom@data+2
 11498  00109A  000A               	tblrd		*-
 11499  00109C  CFF5 F024          	movff	tablat,StoreIntInEeprom@data+3
 11500  0010A0  51CE               	movf	InitSynth@regNum& (0+255),w,b
 11501  0010A2  0D01               	mullw	1
 11502  0010A4  0E35               	movlw	low _SYNTH_ADDRES
 11503  0010A6  24F3               	addwf	prodl,w,c
 11504  0010A8  6EF6               	movwf	tblptrl,c
 11505  0010AA  0E06               	movlw	high _SYNTH_ADDRES
 11506  0010AC  20F4               	addwfc	prodh,w,c
 11507  0010AE  6EF7               	movwf	tblptrh,c
 11508  0010B0                     	if	0	;There are less than 3 active tblptr bytes
 11509  0010B0                     	endif
 11510  0010B0  0008               	tblrd		*
 11511  0010B2  50F5               	movf	tablat,w,c
 11512  0010B4  0920               	iorlw	32
 11513  0010B6  6E25               	movwf	StoreIntInEeprom@address,c
 11514  0010B8  0E00               	movlw	0
 11515  0010BA  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
 11516  0010BC  0E04               	movlw	4
 11517  0010BE  6E26               	movwf	StoreIntInEeprom@numOfByes,c
 11518  0010C0  EC85  F01F         	call	_StoreIntInEeprom	;wreg free
 11519                           
 11520                           ;SyntApp.c: 70: }
 11521  0010C4  D029               	goto	l533
 11522  0010C6                     l531:
 11523  0010C6                     l8184:
 11524                           
 11525                           ;SyntApp.c: 71: else
 11526                           ;SyntApp.c: 72: {
 11527                           ;SyntApp.c: 73: SWSPI_send_word(cType, EepromVal,3);
 11528  0010C6  C0C8  F029         	movff	InitSynth@EepromVal,SWSPI_send_word@data
 11529  0010CA  C0C9  F02A         	movff	InitSynth@EepromVal+1,SWSPI_send_word@data+1
 11530  0010CE  C0CA  F02B         	movff	InitSynth@EepromVal+2,SWSPI_send_word@data+2
 11531  0010D2  C0CB  F02C         	movff	InitSynth@EepromVal+3,SWSPI_send_word@data+3
 11532  0010D6  0E03               	movlw	3
 11533  0010D8  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11534  0010DA  0100               	movlb	0	; () banked
 11535  0010DC  51CC               	movf	InitSynth@cType& (0+255),w,b
 11536  0010DE  EC96  F018         	call	_SWSPI_send_word
 11537                           
 11538                           ;SyntApp.c: 74: }
 11539                           ;SyntApp.c: 75: }
 11540                           ;SyntApp.c: 78: }
 11541  0010E2  D01A               	goto	l533
 11542  0010E4                     l523:
 11543                           
 11544                           ;SyntApp.c: 79: else
 11545                           ;SyntApp.c: 80: {
 11546                           ;SyntApp.c: 81: SWSPI_send_word(cType, SYNTH_REGS[idx],3);
 11547  0010E4  0100               	movlb	0	; () banked
 11548  0010E6  51CD               	movf	InitSynth@idx& (0+255),w,b
 11549  0010E8  0D04               	mullw	4
 11550  0010EA  0E01               	movlw	low _SYNTH_REGS
 11551  0010EC  24F3               	addwf	prodl,w,c
 11552  0010EE  6EF6               	movwf	tblptrl,c
 11553  0010F0  0E06               	movlw	high _SYNTH_REGS
 11554  0010F2  20F4               	addwfc	prodh,w,c
 11555  0010F4  6EF7               	movwf	tblptrh,c
 11556  0010F6                     	if	0	;There are less than 3 active tblptr bytes
 11557  0010F6                     	endif
 11558  0010F6  0009               	tblrd		*+
 11559  0010F8  CFF5 F029          	movff	tablat,SWSPI_send_word@data
 11560  0010FC  0009               	tblrd		*+
 11561  0010FE  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+1
 11562  001102  0009               	tblrd		*+
 11563  001104  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+2
 11564  001108  000A               	tblrd		*-
 11565  00110A  CFF5 F02C          	movff	tablat,SWSPI_send_word@data+3
 11566  00110E  0E03               	movlw	3
 11567  001110  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11568  001112  51CC               	movf	InitSynth@cType& (0+255),w,b
 11569  001114  EC96  F018         	call	_SWSPI_send_word
 11570  001118                     l533:
 11571  001118  0100               	movlb	0	; () banked
 11572  00111A  2BCD               	incf	InitSynth@idx& (0+255),f,b
 11573  00111C  D6DA               	goto	l8144
 11574  00111E                     __end_of_InitSynth:
 11575                           	opt stack 0
 11576                           tosu	equ	0xFFF
 11577                           tosh	equ	0xFFE
 11578                           tosl	equ	0xFFD
 11579                           pclath	equ	0xFFA
 11580                           tblptru	equ	0xFF8
 11581                           tblptrh	equ	0xFF7
 11582                           tblptrl	equ	0xFF6
 11583                           tablat	equ	0xFF5
 11584                           prodh	equ	0xFF4
 11585                           prodl	equ	0xFF3
 11586                           intcon	equ	0xFF2
 11587                           intcon2	equ	0xFF1
 11588                           postinc0	equ	0xFEE
 11589                           plusw0	equ	0xFEB
 11590                           wreg	equ	0xFE8
 11591                           indf1	equ	0xFE7
 11592                           postdec1	equ	0xFE5
 11593                           fsr1h	equ	0xFE2
 11594                           fsr1l	equ	0xFE1
 11595                           indf2	equ	0xFDF
 11596                           postinc2	equ	0xFDE
 11597                           postdec2	equ	0xFDD
 11598                           plusw2	equ	0xFDB
 11599                           fsr2h	equ	0xFDA
 11600                           fsr2l	equ	0xFD9
 11601                           status	equ	0xFD8
 11602                           
 11603 ;; *************** function _SwSpi_Set_CE_Pin *****************
 11604 ;; Defined at:
 11605 ;;		line 201 in file "SwSpiApp.c"
 11606 ;; Parameters:    Size  Location     Type
 11607 ;;  phrType         1    wreg     enum E1
 11608 ;;  cPinMode        1   23[COMRAM] unsigned char 
 11609 ;; Auto vars:     Size  Location     Type
 11610 ;;  phrType         1   24[COMRAM] enum E1
 11611 ;; Return value:  Size  Location     Type
 11612 ;;                  1    wreg      void 
 11613 ;; Registers used:
 11614 ;;		wreg, status,2, status,0
 11615 ;; Tracked objects:
 11616 ;;		On entry : 0/0
 11617 ;;		On exit  : 0/0
 11618 ;;		Unchanged: 0/0
 11619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11620 ;;      Params:         1       0       0       0       0       0       0
 11621 ;;      Locals:         1       0       0       0       0       0       0
 11622 ;;      Temps:          0       0       0       0       0       0       0
 11623 ;;      Totals:         2       0       0       0       0       0       0
 11624 ;;Total ram usage:        2 bytes
 11625 ;; Hardware stack levels used:    1
 11626 ;; Hardware stack levels required when called:    4
 11627 ;; This function calls:
 11628 ;;		Nothing
 11629 ;; This function is called by:
 11630 ;;		_InitSynth
 11631 ;;		_SetSynthOper
 11632 ;; This function uses a non-reentrant model
 11633 ;;
 11634                           
 11635                           	psect	text61
 11636  003E22                     __ptext61:
 11637                           	opt stack 0
 11638  003E22                     _SwSpi_Set_CE_Pin:
 11639                           	opt stack 23
 11640                           
 11641                           ; BSR set to: 0
 11642                           ;incstack = 0
 11643                           ;SwSpi_Set_CE_Pin@phrType stored from wreg
 11644  003E22  6E19               	movwf	SwSpi_Set_CE_Pin@phrType,c
 11645                           
 11646                           ;SwSpiApp.c: 203: switch(phrType)
 11647  003E24  D014               	goto	l734
 11648  003E26                     
 11649                           ;SwSpiApp.c: 206: if(cPinMode == 1)
 11650  003E26  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
 11651  003E28  A4D8               	btfss	status,2,c
 11652  003E2A  D002               	goto	l736
 11653                           
 11654                           ;SwSpiApp.c: 207: {
 11655                           ;SwSpiApp.c: 208: do { LATCbits.LATC1 = 1; } while(0);
 11656  003E2C  828B               	bsf	3979,1,c	;volatile
 11657                           
 11658                           ;SwSpiApp.c: 209: }
 11659  003E2E  0012               	return	
 11660  003E30                     l736:
 11661                           
 11662                           ;SwSpiApp.c: 210: else if(cPinMode == 0)
 11663  003E30  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
 11664  003E32  A4D8               	btfss	status,2,c
 11665  003E34  0012               	return	
 11666                           
 11667                           ;SwSpiApp.c: 211: {
 11668                           ;SwSpiApp.c: 212: do { LATCbits.LATC1 = 0; } while(0);
 11669  003E36  928B               	bcf	3979,1,c	;volatile
 11670                           
 11671                           ;SwSpiApp.c: 213: }
 11672                           ;SwSpiApp.c: 214: break;
 11673  003E38  0012               	return	
 11674  003E3A                     
 11675                           ;SwSpiApp.c: 217: if(cPinMode == 1)
 11676  003E3A  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
 11677  003E3C  A4D8               	btfss	status,2,c
 11678  003E3E  D002               	goto	l745
 11679                           
 11680                           ;SwSpiApp.c: 218: {
 11681                           ;SwSpiApp.c: 219: do { LATDbits.LATD2 = 1; } while(0);
 11682  003E40  848C               	bsf	3980,2,c	;volatile
 11683                           
 11684                           ;SwSpiApp.c: 220: }
 11685  003E42  0012               	return	
 11686  003E44                     l745:
 11687                           
 11688                           ;SwSpiApp.c: 221: else if(cPinMode == 0)
 11689  003E44  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
 11690  003E46  A4D8               	btfss	status,2,c
 11691  003E48  0012               	return	
 11692                           
 11693                           ;SwSpiApp.c: 222: {
 11694                           ;SwSpiApp.c: 223: do { LATDbits.LATD2 = 0; } while(0);
 11695  003E4A  948C               	bcf	3980,2,c	;volatile
 11696                           
 11697                           ;SwSpiApp.c: 226: }
 11698                           
 11699                           ;SwSpiApp.c: 224: }
 11700                           ;SwSpiApp.c: 225: break;
 11701  003E4C  0012               	return	
 11702  003E4E                     l734:
 11703  003E4E  5019               	movf	SwSpi_Set_CE_Pin@phrType,w,c
 11704                           
 11705                           ; Switch size 1, requested type "space"
 11706                           ; Number of cases is 2, Range of values is 0 to 1
 11707                           ; switch strategies available:
 11708                           ; Name         Instructions Cycles
 11709                           ; simple_byte            7     4 (average)
 11710                           ;	Chosen strategy is simple_byte
 11711  003E50  0A00               	xorlw	0	; case 0
 11712  003E52  B4D8               	btfsc	status,2,c
 11713  003E54  D7E8               	goto	l735
 11714  003E56  0A01               	xorlw	1	; case 1
 11715  003E58  A4D8               	btfss	status,2,c
 11716  003E5A  0012               	return	
 11717  003E5C  D7EE               	goto	l744
 11718  003E5E                     __end_of_SwSpi_Set_CE_Pin:
 11719                           	opt stack 0
 11720                           tosu	equ	0xFFF
 11721                           tosh	equ	0xFFE
 11722                           tosl	equ	0xFFD
 11723                           pclath	equ	0xFFA
 11724                           tblptru	equ	0xFF8
 11725                           tblptrh	equ	0xFF7
 11726                           tblptrl	equ	0xFF6
 11727                           tablat	equ	0xFF5
 11728                           prodh	equ	0xFF4
 11729                           prodl	equ	0xFF3
 11730                           intcon	equ	0xFF2
 11731                           intcon2	equ	0xFF1
 11732                           postinc0	equ	0xFEE
 11733                           plusw0	equ	0xFEB
 11734                           wreg	equ	0xFE8
 11735                           indf1	equ	0xFE7
 11736                           postdec1	equ	0xFE5
 11737                           fsr1h	equ	0xFE2
 11738                           fsr1l	equ	0xFE1
 11739                           indf2	equ	0xFDF
 11740                           postinc2	equ	0xFDE
 11741                           postdec2	equ	0xFDD
 11742                           plusw2	equ	0xFDB
 11743                           fsr2h	equ	0xFDA
 11744                           fsr2l	equ	0xFD9
 11745                           status	equ	0xFD8
 11746                           
 11747 ;; *************** function _InitAdcApplicationMgr *****************
 11748 ;; Defined at:
 11749 ;;		line 20 in file "AdcApp.c"
 11750 ;; Parameters:    Size  Location     Type
 11751 ;;		None
 11752 ;; Auto vars:     Size  Location     Type
 11753 ;;		None
 11754 ;; Return value:  Size  Location     Type
 11755 ;;                  1    wreg      void 
 11756 ;; Registers used:
 11757 ;;		wreg, status,2
 11758 ;; Tracked objects:
 11759 ;;		On entry : 0/0
 11760 ;;		On exit  : 0/0
 11761 ;;		Unchanged: 0/0
 11762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11763 ;;      Params:         0       0       0       0       0       0       0
 11764 ;;      Locals:         0       0       0       0       0       0       0
 11765 ;;      Temps:          0       0       0       0       0       0       0
 11766 ;;      Totals:         0       0       0       0       0       0       0
 11767 ;;Total ram usage:        0 bytes
 11768 ;; Hardware stack levels used:    1
 11769 ;; Hardware stack levels required when called:    4
 11770 ;; This function calls:
 11771 ;;		Nothing
 11772 ;; This function is called by:
 11773 ;;		_InitSystemApplicationManagers
 11774 ;; This function uses a non-reentrant model
 11775 ;;
 11776                           
 11777                           	psect	text62
 11778  004542                     __ptext62:
 11779                           	opt stack 0
 11780  004542                     _InitAdcApplicationMgr:
 11781                           	opt stack 25
 11782                           
 11783                           ;AdcApp.c: 22: adcSampleMode = CIRCULAR;
 11784                           
 11785                           ;incstack = 0
 11786  004542  0E00               	movlw	0
 11787  004544  6E3B               	movwf	_adcSampleMode,c
 11788  004546  0012               	return		;funcret
 11789  004548                     __end_of_InitAdcApplicationMgr:
 11790                           	opt stack 0
 11791                           tosu	equ	0xFFF
 11792                           tosh	equ	0xFFE
 11793                           tosl	equ	0xFFD
 11794                           pclath	equ	0xFFA
 11795                           tblptru	equ	0xFF8
 11796                           tblptrh	equ	0xFF7
 11797                           tblptrl	equ	0xFF6
 11798                           tablat	equ	0xFF5
 11799                           prodh	equ	0xFF4
 11800                           prodl	equ	0xFF3
 11801                           intcon	equ	0xFF2
 11802                           intcon2	equ	0xFF1
 11803                           postinc0	equ	0xFEE
 11804                           plusw0	equ	0xFEB
 11805                           wreg	equ	0xFE8
 11806                           indf1	equ	0xFE7
 11807                           postdec1	equ	0xFE5
 11808                           fsr1h	equ	0xFE2
 11809                           fsr1l	equ	0xFE1
 11810                           indf2	equ	0xFDF
 11811                           postinc2	equ	0xFDE
 11812                           postdec2	equ	0xFDD
 11813                           plusw2	equ	0xFDB
 11814                           fsr2h	equ	0xFDA
 11815                           fsr2l	equ	0xFD9
 11816                           status	equ	0xFD8
 11817                           
 11818 ;; *************** function _DacInit *****************
 11819 ;; Defined at:
 11820 ;;		line 11 in file "DacApp.c"
 11821 ;; Parameters:    Size  Location     Type
 11822 ;;		None
 11823 ;; Auto vars:     Size  Location     Type
 11824 ;;  dacInput        2  106[BANK0 ] unsigned int 
 11825 ;;  idx             1  108[BANK0 ] char 
 11826 ;; Return value:  Size  Location     Type
 11827 ;;                  1    wreg      void 
 11828 ;; Registers used:
 11829 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11830 ;; Tracked objects:
 11831 ;;		On entry : 0/0
 11832 ;;		On exit  : 0/0
 11833 ;;		Unchanged: 0/0
 11834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11835 ;;      Params:         0       0       0       0       0       0       0
 11836 ;;      Locals:         0       3       0       0       0       0       0
 11837 ;;      Temps:          0       2       0       0       0       0       0
 11838 ;;      Totals:         0       5       0       0       0       0       0
 11839 ;;Total ram usage:        5 bytes
 11840 ;; Hardware stack levels used:    1
 11841 ;; Hardware stack levels required when called:   10
 11842 ;; This function calls:
 11843 ;;		_ReadIntFromEeprom
 11844 ;;		_SWSPI_send_word
 11845 ;;		_StoreIntInEeprom
 11846 ;; This function is called by:
 11847 ;;		_InitSystemApplicationManagers
 11848 ;; This function uses a non-reentrant model
 11849 ;;
 11850                           
 11851                           	psect	text63
 11852  002A38                     __ptext63:
 11853                           	opt stack 0
 11854  002A38                     _DacInit:
 11855                           	opt stack 19
 11856                           
 11857                           ;DacApp.c: 13: for(int8_t idx = 0; idx < (4); idx++)
 11858                           
 11859                           ;incstack = 0
 11860  002A38  0E00               	movlw	0
 11861  002A3A  0100               	movlb	0	; () banked
 11862  002A3C  6FCC               	movwf	DacInit@idx& (0+255),b
 11863  002A3E                     l8698:
 11864                           
 11865                           ; BSR set to: 0
 11866  002A3E  51CC               	movf	DacInit@idx& (0+255),w,b
 11867  002A40  0A80               	xorlw	128
 11868  002A42  0F7C               	addlw	-132
 11869  002A44  B0D8               	btfsc	status,0,c
 11870  002A46  0012               	return	
 11871                           
 11872                           ; BSR set to: 0
 11873                           ;DacApp.c: 14: {
 11874                           ;DacApp.c: 15: uint16_t dacInput = ReadIntFromEeprom((0x40) | DAC_ADDRES[idx], 2);
 11875                           
 11876                           ; BSR set to: 0
 11877                           
 11878                           ; BSR set to: 0
 11879  002A48  0E00               	movlw	0
 11880  002A4A  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 11881  002A4C  0E02               	movlw	2
 11882  002A4E  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 11883  002A50  51CC               	movf	DacInit@idx& (0+255),w,b
 11884  002A52  0D01               	mullw	1
 11885  002A54  0E53               	movlw	low _DAC_ADDRES
 11886  002A56  24F3               	addwf	prodl,w,c
 11887  002A58  6EF6               	movwf	tblptrl,c
 11888  002A5A  0E06               	movlw	high _DAC_ADDRES
 11889  002A5C  20F4               	addwfc	prodh,w,c
 11890  002A5E  6EF7               	movwf	tblptrh,c
 11891  002A60                     	if	0	;There are less than 3 active tblptr bytes
 11892  002A60                     	endif
 11893  002A60  0008               	tblrd		*
 11894  002A62  50F5               	movf	tablat,w,c
 11895  002A64  0940               	iorlw	64
 11896  002A66  EC44  F010         	call	_ReadIntFromEeprom
 11897  002A6A  C0B1  F0CA         	movff	?_ReadIntFromEeprom,DacInit@dacInput
 11898  002A6E  C0B2  F0CB         	movff	?_ReadIntFromEeprom+1,DacInit@dacInput+1
 11899                           
 11900                           ;DacApp.c: 16: if(dacInput == 0xFFFF)
 11901  002A72  0100               	movlb	0	; () banked
 11902  002A74  29CA               	incf	DacInit@dacInput& (0+255),w,b
 11903  002A76  E144               	bnz	l8710
 11904  002A78  29CB               	incf	(DacInit@dacInput+1)& (0+255),w,b
 11905  002A7A  A4D8               	btfss	status,2,c
 11906  002A7C  D041               	goto	l427
 11907                           
 11908                           ; BSR set to: 0
 11909                           ;DacApp.c: 17: {
 11910                           ;DacApp.c: 18: SWSPI_send_word(EXT_DAC, DAC_DEFAULT_INIT_VALUES[idx], 1);
 11911  002A7E  51CC               	movf	DacInit@idx& (0+255),w,b
 11912  002A80  0D02               	mullw	2
 11913  002A82  0E4B               	movlw	low _DAC_DEFAULT_INIT_VALUES
 11914  002A84  24F3               	addwf	prodl,w,c
 11915  002A86  6EF6               	movwf	tblptrl,c
 11916  002A88  0E06               	movlw	high _DAC_DEFAULT_INIT_VALUES
 11917  002A8A  20F4               	addwfc	prodh,w,c
 11918  002A8C  6EF7               	movwf	tblptrh,c
 11919  002A8E                     	if	0	;There are less than 3 active tblptr bytes
 11920  002A8E                     	endif
 11921  002A8E  0009               	tblrd		*+
 11922  002A90  CFF5 F0C8          	movff	tablat,??_DacInit
 11923  002A94  0009               	tblrd		*+
 11924  002A96  CFF5 F0C9          	movff	tablat,??_DacInit+1
 11925  002A9A  C0C8  F029         	movff	??_DacInit,SWSPI_send_word@data
 11926  002A9E  C0C9  F02A         	movff	??_DacInit+1,SWSPI_send_word@data+1
 11927  002AA2  6A2B               	clrf	SWSPI_send_word@data+2,c
 11928  002AA4  6A2C               	clrf	SWSPI_send_word@data+3,c
 11929  002AA6  0E01               	movlw	1
 11930  002AA8  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11931  002AAA  0E02               	movlw	2
 11932  002AAC  EC96  F018         	call	_SWSPI_send_word
 11933                           
 11934                           ;DacApp.c: 19: StoreIntInEeprom(DAC_DEFAULT_INIT_VALUES[idx], (0x40) | DAC_ADDRES[idx], 
      +                          2);
 11935  002AB0  0100               	movlb	0	; () banked
 11936  002AB2  51CC               	movf	DacInit@idx& (0+255),w,b
 11937  002AB4  0D02               	mullw	2
 11938  002AB6  0E4B               	movlw	low _DAC_DEFAULT_INIT_VALUES
 11939  002AB8  24F3               	addwf	prodl,w,c
 11940  002ABA  6EF6               	movwf	tblptrl,c
 11941  002ABC  0E06               	movlw	high _DAC_DEFAULT_INIT_VALUES
 11942  002ABE  20F4               	addwfc	prodh,w,c
 11943  002AC0  6EF7               	movwf	tblptrh,c
 11944  002AC2                     	if	0	;There are less than 3 active tblptr bytes
 11945  002AC2                     	endif
 11946  002AC2  0009               	tblrd		*+
 11947  002AC4  CFF5 F0C8          	movff	tablat,??_DacInit
 11948  002AC8  0009               	tblrd		*+
 11949  002ACA  CFF5 F0C9          	movff	tablat,??_DacInit+1
 11950  002ACE  C0C8  F021         	movff	??_DacInit,StoreIntInEeprom@data
 11951  002AD2  C0C9  F022         	movff	??_DacInit+1,StoreIntInEeprom@data+1
 11952  002AD6  6A23               	clrf	StoreIntInEeprom@data+2,c
 11953  002AD8  6A24               	clrf	StoreIntInEeprom@data+3,c
 11954  002ADA  51CC               	movf	DacInit@idx& (0+255),w,b
 11955  002ADC  0D01               	mullw	1
 11956  002ADE  0E53               	movlw	low _DAC_ADDRES
 11957  002AE0  24F3               	addwf	prodl,w,c
 11958  002AE2  6EF6               	movwf	tblptrl,c
 11959  002AE4  0E06               	movlw	high _DAC_ADDRES
 11960  002AE6  20F4               	addwfc	prodh,w,c
 11961  002AE8  6EF7               	movwf	tblptrh,c
 11962  002AEA                     	if	0	;There are less than 3 active tblptr bytes
 11963  002AEA                     	endif
 11964  002AEA  0008               	tblrd		*
 11965  002AEC  50F5               	movf	tablat,w,c
 11966  002AEE  0940               	iorlw	64
 11967  002AF0  6E25               	movwf	StoreIntInEeprom@address,c
 11968  002AF2  0E00               	movlw	0
 11969  002AF4  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
 11970  002AF6  0E02               	movlw	2
 11971  002AF8  6E26               	movwf	StoreIntInEeprom@numOfByes,c
 11972  002AFA  EC85  F01F         	call	_StoreIntInEeprom	;wreg free
 11973                           
 11974                           ;DacApp.c: 20: }
 11975  002AFE  D00B               	goto	l428
 11976  002B00                     l427:
 11977  002B00                     l8710:
 11978                           
 11979                           ;DacApp.c: 21: else
 11980                           ;DacApp.c: 22: {
 11981                           ;DacApp.c: 23: SWSPI_send_word(EXT_DAC, dacInput, 1);
 11982  002B00  C0CA  F029         	movff	DacInit@dacInput,SWSPI_send_word@data
 11983  002B04  C0CB  F02A         	movff	DacInit@dacInput+1,SWSPI_send_word@data+1
 11984  002B08  6A2B               	clrf	SWSPI_send_word@data+2,c
 11985  002B0A  6A2C               	clrf	SWSPI_send_word@data+3,c
 11986  002B0C  0E01               	movlw	1
 11987  002B0E  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11988  002B10  0E02               	movlw	2
 11989  002B12  EC96  F018         	call	_SWSPI_send_word
 11990  002B16                     l428:
 11991  002B16  0100               	movlb	0	; () banked
 11992  002B18  2BCC               	incf	DacInit@idx& (0+255),f,b
 11993  002B1A  D791               	goto	l8698
 11994  002B1C                     __end_of_DacInit:
 11995                           	opt stack 0
 11996                           tosu	equ	0xFFF
 11997                           tosh	equ	0xFFE
 11998                           tosl	equ	0xFFD
 11999                           pclath	equ	0xFFA
 12000                           tblptru	equ	0xFF8
 12001                           tblptrh	equ	0xFF7
 12002                           tblptrl	equ	0xFF6
 12003                           tablat	equ	0xFF5
 12004                           prodh	equ	0xFF4
 12005                           prodl	equ	0xFF3
 12006                           intcon	equ	0xFF2
 12007                           intcon2	equ	0xFF1
 12008                           postinc0	equ	0xFEE
 12009                           plusw0	equ	0xFEB
 12010                           wreg	equ	0xFE8
 12011                           indf1	equ	0xFE7
 12012                           postdec1	equ	0xFE5
 12013                           fsr1h	equ	0xFE2
 12014                           fsr1l	equ	0xFE1
 12015                           indf2	equ	0xFDF
 12016                           postinc2	equ	0xFDE
 12017                           postdec2	equ	0xFDD
 12018                           plusw2	equ	0xFDB
 12019                           fsr2h	equ	0xFDA
 12020                           fsr2l	equ	0xFD9
 12021                           status	equ	0xFD8
 12022                           
 12023 ;; *************** function _StoreIntInEeprom *****************
 12024 ;; Defined at:
 12025 ;;		line 126 in file "SystemCommon.c"
 12026 ;; Parameters:    Size  Location     Type
 12027 ;;  data            4   32[COMRAM] unsigned long 
 12028 ;;  address         1   36[COMRAM] unsigned char 
 12029 ;;  numOfByes       2   37[COMRAM] int 
 12030 ;; Auto vars:     Size  Location     Type
 12031 ;;  val             1   39[COMRAM] unsigned char 
 12032 ;;  idx             1   40[COMRAM] unsigned char 
 12033 ;; Return value:  Size  Location     Type
 12034 ;;                  1    wreg      void 
 12035 ;; Registers used:
 12036 ;;		wreg, status,2, status,0, cstack
 12037 ;; Tracked objects:
 12038 ;;		On entry : 0/0
 12039 ;;		On exit  : 0/0
 12040 ;;		Unchanged: 0/0
 12041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12042 ;;      Params:         7       0       0       0       0       0       0
 12043 ;;      Locals:         2       0       0       0       0       0       0
 12044 ;;      Temps:          0       0       0       0       0       0       0
 12045 ;;      Totals:         9       0       0       0       0       0       0
 12046 ;;Total ram usage:        9 bytes
 12047 ;; Hardware stack levels used:    1
 12048 ;; Hardware stack levels required when called:    6
 12049 ;; This function calls:
 12050 ;;		_EepromWrite
 12051 ;;		_make8
 12052 ;; This function is called by:
 12053 ;;		_DacInit
 12054 ;;		_DacSetValue
 12055 ;;		_InitSynth
 12056 ;;		_UpdateSynthFreq
 12057 ;; This function uses a non-reentrant model
 12058 ;;
 12059                           
 12060                           	psect	text64
 12061  003F0A                     __ptext64:
 12062                           	opt stack 0
 12063  003F0A                     _StoreIntInEeprom:
 12064                           	opt stack 21
 12065                           
 12066                           ;SystemCommon.c: 128: for(uint8_t idx = numOfByes; idx; idx--)
 12067                           
 12068                           ; BSR set to: 0
 12069                           ;incstack = 0
 12070  003F0A  C026  F029         	movff	StoreIntInEeprom@numOfByes,StoreIntInEeprom@idx
 12071  003F0E  D015               	goto	l1445
 12072  003F10                     
 12073                           ;SystemCommon.c: 129: {
 12074                           ;SystemCommon.c: 130: uint8_t val = make8(data, idx - 1);
 12075  003F10  C021  F018         	movff	StoreIntInEeprom@data,make8@data
 12076  003F14  C022  F019         	movff	StoreIntInEeprom@data+1,make8@data+1
 12077  003F18  C023  F01A         	movff	StoreIntInEeprom@data+2,make8@data+2
 12078  003F1C  C024  F01B         	movff	StoreIntInEeprom@data+3,make8@data+3
 12079  003F20  0429               	decf	StoreIntInEeprom@idx,w,c
 12080  003F22  6E1C               	movwf	make8@dataLocation,c
 12081  003F24  ECBF  F01C         	call	_make8	;wreg free
 12082  003F28  6E28               	movwf	StoreIntInEeprom@val,c
 12083                           
 12084                           ;SystemCommon.c: 131: EepromWrite(address - idx, val);
 12085  003F2A  C028  F01B         	movff	StoreIntInEeprom@val,EepromWrite@data
 12086  003F2E  5029               	movf	StoreIntInEeprom@idx,w,c
 12087  003F30  0800               	sublw	0
 12088  003F32  2425               	addwf	StoreIntInEeprom@address,w,c
 12089  003F34  EC64  F022         	call	_EepromWrite
 12090  003F38  0629               	decf	StoreIntInEeprom@idx,f,c
 12091  003F3A                     l1445:
 12092  003F3A  5029               	movf	StoreIntInEeprom@idx,w,c
 12093  003F3C  B4D8               	btfsc	status,2,c
 12094  003F3E  0012               	return	
 12095  003F40  D7E7               	goto	l1446
 12096  003F42                     __end_of_StoreIntInEeprom:
 12097                           	opt stack 0
 12098                           tosu	equ	0xFFF
 12099                           tosh	equ	0xFFE
 12100                           tosl	equ	0xFFD
 12101                           pclath	equ	0xFFA
 12102                           tblptru	equ	0xFF8
 12103                           tblptrh	equ	0xFF7
 12104                           tblptrl	equ	0xFF6
 12105                           tablat	equ	0xFF5
 12106                           prodh	equ	0xFF4
 12107                           prodl	equ	0xFF3
 12108                           intcon	equ	0xFF2
 12109                           intcon2	equ	0xFF1
 12110                           postinc0	equ	0xFEE
 12111                           plusw0	equ	0xFEB
 12112                           wreg	equ	0xFE8
 12113                           indf1	equ	0xFE7
 12114                           postdec1	equ	0xFE5
 12115                           fsr1h	equ	0xFE2
 12116                           fsr1l	equ	0xFE1
 12117                           indf2	equ	0xFDF
 12118                           postinc2	equ	0xFDE
 12119                           postdec2	equ	0xFDD
 12120                           plusw2	equ	0xFDB
 12121                           fsr2h	equ	0xFDA
 12122                           fsr2l	equ	0xFD9
 12123                           status	equ	0xFD8
 12124                           
 12125 ;; *************** function _EepromWrite *****************
 12126 ;; Defined at:
 12127 ;;		line 225 in file "FlashApp.c"
 12128 ;; Parameters:    Size  Location     Type
 12129 ;;  address         1    wreg     unsigned char 
 12130 ;;  data            1   26[COMRAM] unsigned char 
 12131 ;; Auto vars:     Size  Location     Type
 12132 ;;  address         1   27[COMRAM] unsigned char 
 12133 ;; Return value:  Size  Location     Type
 12134 ;;                  1    wreg      void 
 12135 ;; Registers used:
 12136 ;;		wreg, status,2, cstack
 12137 ;; Tracked objects:
 12138 ;;		On entry : 0/0
 12139 ;;		On exit  : 0/0
 12140 ;;		Unchanged: 0/0
 12141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12142 ;;      Params:         1       0       0       0       0       0       0
 12143 ;;      Locals:         1       0       0       0       0       0       0
 12144 ;;      Temps:          0       0       0       0       0       0       0
 12145 ;;      Totals:         2       0       0       0       0       0       0
 12146 ;;Total ram usage:        2 bytes
 12147 ;; Hardware stack levels used:    1
 12148 ;; Hardware stack levels required when called:    5
 12149 ;; This function calls:
 12150 ;;		_DATAEE_WriteByte
 12151 ;; This function is called by:
 12152 ;;		_StoreIntInEeprom
 12153 ;; This function uses a non-reentrant model
 12154 ;;
 12155                           
 12156                           	psect	text65
 12157  0044C8                     __ptext65:
 12158                           	opt stack 0
 12159  0044C8                     _EepromWrite:
 12160                           	opt stack 21
 12161                           
 12162                           ;incstack = 0
 12163                           ;EepromWrite@address stored from wreg
 12164  0044C8  6E1C               	movwf	EepromWrite@address,c
 12165                           
 12166                           ;FlashApp.c: 227: DATAEE_WriteByte(address, data);
 12167  0044CA  C01B  F018         	movff	EepromWrite@data,DATAEE_WriteByte@bData
 12168  0044CE  501C               	movf	EepromWrite@address,w,c
 12169  0044D0  ECF4  F01F         	call	_DATAEE_WriteByte
 12170  0044D4  0012               	return		;funcret
 12171  0044D6                     __end_of_EepromWrite:
 12172                           	opt stack 0
 12173                           tosu	equ	0xFFF
 12174                           tosh	equ	0xFFE
 12175                           tosl	equ	0xFFD
 12176                           pclath	equ	0xFFA
 12177                           tblptru	equ	0xFF8
 12178                           tblptrh	equ	0xFF7
 12179                           tblptrl	equ	0xFF6
 12180                           tablat	equ	0xFF5
 12181                           prodh	equ	0xFF4
 12182                           prodl	equ	0xFF3
 12183                           intcon	equ	0xFF2
 12184                           intcon2	equ	0xFF1
 12185                           postinc0	equ	0xFEE
 12186                           plusw0	equ	0xFEB
 12187                           wreg	equ	0xFE8
 12188                           indf1	equ	0xFE7
 12189                           postdec1	equ	0xFE5
 12190                           fsr1h	equ	0xFE2
 12191                           fsr1l	equ	0xFE1
 12192                           indf2	equ	0xFDF
 12193                           postinc2	equ	0xFDE
 12194                           postdec2	equ	0xFDD
 12195                           plusw2	equ	0xFDB
 12196                           fsr2h	equ	0xFDA
 12197                           fsr2l	equ	0xFD9
 12198                           status	equ	0xFD8
 12199                           
 12200 ;; *************** function _DATAEE_WriteByte *****************
 12201 ;; Defined at:
 12202 ;;		line 167 in file "mcc_generated_files/memory.c"
 12203 ;; Parameters:    Size  Location     Type
 12204 ;;  bAdd            1    wreg     unsigned char 
 12205 ;;  bData           1   23[COMRAM] unsigned char 
 12206 ;; Auto vars:     Size  Location     Type
 12207 ;;  bAdd            1   24[COMRAM] unsigned char 
 12208 ;;  GIEBitValue     1   25[COMRAM] unsigned char 
 12209 ;; Return value:  Size  Location     Type
 12210 ;;                  1    wreg      void 
 12211 ;; Registers used:
 12212 ;;		wreg, status,2
 12213 ;; Tracked objects:
 12214 ;;		On entry : 0/0
 12215 ;;		On exit  : 0/0
 12216 ;;		Unchanged: 0/0
 12217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12218 ;;      Params:         1       0       0       0       0       0       0
 12219 ;;      Locals:         2       0       0       0       0       0       0
 12220 ;;      Temps:          0       0       0       0       0       0       0
 12221 ;;      Totals:         3       0       0       0       0       0       0
 12222 ;;Total ram usage:        3 bytes
 12223 ;; Hardware stack levels used:    1
 12224 ;; Hardware stack levels required when called:    4
 12225 ;; This function calls:
 12226 ;;		Nothing
 12227 ;; This function is called by:
 12228 ;;		_EepromWrite
 12229 ;; This function uses a non-reentrant model
 12230 ;;
 12231                           
 12232                           	psect	text66
 12233  003FE8                     __ptext66:
 12234                           	opt stack 0
 12235  003FE8                     _DATAEE_WriteByte:
 12236                           	opt stack 21
 12237                           
 12238                           ;incstack = 0
 12239                           ;DATAEE_WriteByte@bAdd stored from wreg
 12240  003FE8  6E19               	movwf	DATAEE_WriteByte@bAdd,c
 12241                           
 12242                           ;memory.c: 169: uint8_t GIEBitValue = INTCONbits.GIE;
 12243  003FEA  0E00               	movlw	0
 12244  003FEC  BEF2               	btfsc	intcon,7,c	;volatile
 12245  003FEE  0E01               	movlw	1
 12246  003FF0  6E1A               	movwf	DATAEE_WriteByte@GIEBitValue,c
 12247                           
 12248                           ;memory.c: 171: EEADR = (bAdd & 0xFF);
 12249  003FF2  C019  FFA9         	movff	DATAEE_WriteByte@bAdd,4009	;volatile
 12250                           
 12251                           ;memory.c: 172: EEDATA = bData;
 12252  003FF6  C018  FFA8         	movff	DATAEE_WriteByte@bData,4008	;volatile
 12253                           
 12254                           ;memory.c: 173: EECON1bits.EEPGD = 0;
 12255  003FFA  9EA6               	bcf	4006,7,c	;volsfr
 12256                           
 12257                           ;memory.c: 174: EECON1bits.CFGS = 0;
 12258  003FFC  9CA6               	bcf	4006,6,c	;volsfr
 12259                           
 12260                           ;memory.c: 175: EECON1bits.WREN = 1;
 12261  003FFE  84A6               	bsf	4006,2,c	;volsfr
 12262                           
 12263                           ;memory.c: 176: INTCONbits.GIE = 0;
 12264  004000  9EF2               	bcf	intcon,7,c	;volatile
 12265                           
 12266                           ;memory.c: 177: EECON2 = 0x55;
 12267  004002  0E55               	movlw	85
 12268  004004  6EA7               	movwf	4007,c	;volsfr
 12269                           
 12270                           ;memory.c: 178: EECON2 = 0xAA;
 12271  004006  0EAA               	movlw	170
 12272  004008  6EA7               	movwf	4007,c	;volsfr
 12273                           
 12274                           ;memory.c: 179: EECON1bits.WR = 1;
 12275  00400A  82A6               	bsf	4006,1,c	;volsfr
 12276  00400C                     
 12277                           ;memory.c: 182: {
 12278  00400C  B2A6               	btfsc	4006,1,c	;volsfr
 12279  00400E  D7FE               	goto	l1067
 12280                           
 12281                           ;memory.c: 183: }
 12282                           ;memory.c: 185: EECON1bits.WREN = 0;
 12283  004010  94A6               	bcf	4006,2,c	;volsfr
 12284                           
 12285                           ;memory.c: 186: INTCONbits.GIE = GIEBitValue;
 12286  004012  B01A               	btfsc	DATAEE_WriteByte@GIEBitValue,0,c
 12287  004014  D002               	bra	u7455
 12288  004016  9EF2               	bcf	intcon,7,c	;volatile
 12289  004018  D001               	bra	u7456
 12290  00401A                     u7455:
 12291  00401A  8EF2               	bsf	intcon,7,c	;volatile
 12292  00401C                     u7456:
 12293  00401C  0012               	return		;funcret
 12294  00401E                     __end_of_DATAEE_WriteByte:
 12295                           	opt stack 0
 12296                           tosu	equ	0xFFF
 12297                           tosh	equ	0xFFE
 12298                           tosl	equ	0xFFD
 12299                           pclath	equ	0xFFA
 12300                           tblptru	equ	0xFF8
 12301                           tblptrh	equ	0xFF7
 12302                           tblptrl	equ	0xFF6
 12303                           tablat	equ	0xFF5
 12304                           prodh	equ	0xFF4
 12305                           prodl	equ	0xFF3
 12306                           intcon	equ	0xFF2
 12307                           intcon2	equ	0xFF1
 12308                           postinc0	equ	0xFEE
 12309                           plusw0	equ	0xFEB
 12310                           wreg	equ	0xFE8
 12311                           indf1	equ	0xFE7
 12312                           postdec1	equ	0xFE5
 12313                           fsr1h	equ	0xFE2
 12314                           fsr1l	equ	0xFE1
 12315                           indf2	equ	0xFDF
 12316                           postinc2	equ	0xFDE
 12317                           postdec2	equ	0xFDD
 12318                           plusw2	equ	0xFDB
 12319                           fsr2h	equ	0xFDA
 12320                           fsr2l	equ	0xFD9
 12321                           status	equ	0xFD8
 12322                           
 12323 ;; *************** function _SWSPI_send_word *****************
 12324 ;; Defined at:
 12325 ;;		line 17 in file "SwSpiApp.c"
 12326 ;; Parameters:    Size  Location     Type
 12327 ;;  phrType         1    wreg     enum E1
 12328 ;;  data            4   40[COMRAM] unsigned long 
 12329 ;;  dataSize        1   44[COMRAM] unsigned char 
 12330 ;; Auto vars:     Size  Location     Type
 12331 ;;  phrType         1   41[BANK0 ] enum E1
 12332 ;;  datac           1   38[BANK0 ] unsigned char 
 12333 ;;  idx             2   39[BANK0 ] int 
 12334 ;; Return value:  Size  Location     Type
 12335 ;;                  1    wreg      void 
 12336 ;; Registers used:
 12337 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12338 ;; Tracked objects:
 12339 ;;		On entry : 0/0
 12340 ;;		On exit  : 0/0
 12341 ;;		Unchanged: 0/0
 12342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12343 ;;      Params:         5       0       0       0       0       0       0
 12344 ;;      Locals:         0       4       0       0       0       0       0
 12345 ;;      Temps:          0       0       0       0       0       0       0
 12346 ;;      Totals:         5       4       0       0       0       0       0
 12347 ;;Total ram usage:        9 bytes
 12348 ;; Hardware stack levels used:    1
 12349 ;; Hardware stack levels required when called:    7
 12350 ;; This function calls:
 12351 ;;		_SWSPI_DAC_send_bits
 12352 ;;		_SWSPI_Synth_send_bits
 12353 ;;		_SwSpi_Set_Dac_Sync_Pin
 12354 ;;		_SwSpi_Set_Synth_Le_Pin
 12355 ;;		_make8
 12356 ;; This function is called by:
 12357 ;;		_DacInit
 12358 ;;		_DacSetValue
 12359 ;;		_InitSynth
 12360 ;;		_UpdateSynthFreq
 12361 ;; This function uses a non-reentrant model
 12362 ;;
 12363                           
 12364                           	psect	text67
 12365  00312C                     __ptext67:
 12366                           	opt stack 0
 12367  00312C                     _SWSPI_send_word:
 12368                           	opt stack 20
 12369                           
 12370                           ;incstack = 0
 12371                           ;SWSPI_send_word@phrType stored from wreg
 12372  00312C  0100               	movlb	0	; () banked
 12373  00312E  6F89               	movwf	SWSPI_send_word@phrType& (0+255),b
 12374                           
 12375                           ;SwSpiApp.c: 19: (INTCONbits.GIE = 0);
 12376  003130  9EF2               	bcf	intcon,7,c	;volatile
 12377                           
 12378                           ;SwSpiApp.c: 23: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
 12379  003132  0100               	movlb	0	; () banked
 12380  003134  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 12381  003136  B4D8               	btfsc	status,2,c
 12382  003138  D003               	goto	u8080
 12383                           
 12384                           ; BSR set to: 0
 12385  00313A  0589               	decf	SWSPI_send_word@phrType& (0+255),w,b
 12386  00313C  A4D8               	btfss	status,2,c
 12387  00313E  D018               	goto	l643
 12388  003140                     u8080:
 12389                           
 12390                           ; BSR set to: 0
 12391                           ;SwSpiApp.c: 24: {
 12392                           ;SwSpiApp.c: 25: SwSpi_Set_Synth_Le_Pin(phrType, 0);
 12393                           
 12394                           ; BSR set to: 0
 12395  003140  0E00               	movlw	0
 12396  003142  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 12397  003144  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 12398  003146  EC2F  F01F         	call	_SwSpi_Set_Synth_Le_Pin
 12399                           
 12400                           ;SwSpiApp.c: 26: SWSPI_Synth_send_bits(phrType, data);
 12401  00314A  C029  F025         	movff	SWSPI_send_word@data,SWSPI_Synth_send_bits@data
 12402  00314E  C02A  F026         	movff	SWSPI_send_word@data+1,SWSPI_Synth_send_bits@data+1
 12403  003152  C02B  F027         	movff	SWSPI_send_word@data+2,SWSPI_Synth_send_bits@data+2
 12404  003156  C02C  F028         	movff	SWSPI_send_word@data+3,SWSPI_Synth_send_bits@data+3
 12405  00315A  0100               	movlb	0	; () banked
 12406  00315C  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 12407  00315E  ECD1  F016         	call	_SWSPI_Synth_send_bits
 12408                           
 12409                           ;SwSpiApp.c: 27: SwSpi_Set_Synth_Le_Pin(phrType, 1);
 12410  003162  0E01               	movlw	1
 12411  003164  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 12412  003166  0100               	movlb	0	; () banked
 12413  003168  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 12414  00316A  EC2F  F01F         	call	_SwSpi_Set_Synth_Le_Pin
 12415                           
 12416                           ;SwSpiApp.c: 28: }
 12417  00316E  D031               	goto	l647
 12418  003170                     l643:
 12419                           
 12420                           ;SwSpiApp.c: 29: else if(phrType == EXT_DAC)
 12421  003170  0E02               	movlw	2
 12422  003172  0100               	movlb	0	; () banked
 12423  003174  1989               	xorwf	SWSPI_send_word@phrType& (0+255),w,b
 12424  003176  A4D8               	btfss	status,2,c
 12425  003178  D02C               	goto	l647
 12426                           
 12427                           ; BSR set to: 0
 12428                           ;SwSpiApp.c: 30: {
 12429                           ;SwSpiApp.c: 31: SwSpi_Set_Dac_Sync_Pin(0);
 12430  00317A  0E00               	movlw	0
 12431  00317C  ECDC  F021         	call	_SwSpi_Set_Dac_Sync_Pin
 12432                           
 12433                           ;SwSpiApp.c: 32: for(int idx = dataSize + 1; idx > 0; idx--)
 12434  003180  0E01               	movlw	1
 12435  003182  242D               	addwf	SWSPI_send_word@dataSize,w,c
 12436  003184  0100               	movlb	0	; () banked
 12437  003186  6F87               	movwf	SWSPI_send_word@idx& (0+255),b
 12438  003188  6B88               	clrf	(SWSPI_send_word@idx+1)& (0+255),b
 12439  00318A  0E00               	movlw	0
 12440  00318C  2388               	addwfc	(SWSPI_send_word@idx+1)& (0+255),f,b
 12441  00318E                     l7944:
 12442                           
 12443                           ; BSR set to: 0
 12444  00318E  BF88               	btfsc	(SWSPI_send_word@idx+1)& (0+255),7,b
 12445  003190  D01D               	goto	u8110
 12446  003192  5188               	movf	(SWSPI_send_word@idx+1)& (0+255),w,b
 12447  003194  E103               	bnz	l7948
 12448  003196  0587               	decf	SWSPI_send_word@idx& (0+255),w,b
 12449  003198  A0D8               	btfss	status,0,c
 12450  00319A  D018               	goto	u8110
 12451  00319C                     l7948:
 12452                           
 12453                           ; BSR set to: 0
 12454                           ;SwSpiApp.c: 33: {
 12455                           ;SwSpiApp.c: 34: uint8_t datac = make8(data, idx - 1);
 12456  00319C  C029  F018         	movff	SWSPI_send_word@data,make8@data
 12457  0031A0  C02A  F019         	movff	SWSPI_send_word@data+1,make8@data+1
 12458  0031A4  C02B  F01A         	movff	SWSPI_send_word@data+2,make8@data+2
 12459  0031A8  C02C  F01B         	movff	SWSPI_send_word@data+3,make8@data+3
 12460  0031AC  0587               	decf	SWSPI_send_word@idx& (0+255),w,b
 12461  0031AE  6E1C               	movwf	make8@dataLocation,c
 12462  0031B0  ECBF  F01C         	call	_make8	;wreg free
 12463  0031B4  0100               	movlb	0	; () banked
 12464  0031B6  6F86               	movwf	SWSPI_send_word@datac& (0+255),b
 12465                           
 12466                           ;SwSpiApp.c: 35: SWSPI_DAC_send_bits(phrType, datac);
 12467  0031B8  C086  F01A         	movff	SWSPI_send_word@datac,SWSPI_DAC_send_bits@data
 12468  0031BC  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 12469  0031BE  EC47  F01D         	call	_SWSPI_DAC_send_bits
 12470  0031C2  0100               	movlb	0	; () banked
 12471  0031C4  0787               	decf	SWSPI_send_word@idx& (0+255),f,b
 12472  0031C6  A0D8               	btfss	status,0,c
 12473  0031C8  0788               	decf	(SWSPI_send_word@idx+1)& (0+255),f,b
 12474  0031CA  D7E1               	goto	l7944
 12475  0031CC                     u8110:
 12476                           
 12477                           ; BSR set to: 0
 12478                           ;SwSpiApp.c: 36: }
 12479                           ;SwSpiApp.c: 37: SwSpi_Set_Dac_Sync_Pin(1);
 12480                           
 12481                           ; BSR set to: 0
 12482  0031CC  0E01               	movlw	1
 12483  0031CE  ECDC  F021         	call	_SwSpi_Set_Dac_Sync_Pin
 12484  0031D2                     l647:
 12485                           
 12486                           ;SwSpiApp.c: 38: }
 12487                           ;SwSpiApp.c: 40: (INTCONbits.GIE = 1);
 12488  0031D2  8EF2               	bsf	intcon,7,c	;volatile
 12489  0031D4  0012               	return		;funcret
 12490  0031D6                     __end_of_SWSPI_send_word:
 12491                           	opt stack 0
 12492                           tosu	equ	0xFFF
 12493                           tosh	equ	0xFFE
 12494                           tosl	equ	0xFFD
 12495                           pclath	equ	0xFFA
 12496                           tblptru	equ	0xFF8
 12497                           tblptrh	equ	0xFF7
 12498                           tblptrl	equ	0xFF6
 12499                           tablat	equ	0xFF5
 12500                           prodh	equ	0xFF4
 12501                           prodl	equ	0xFF3
 12502                           intcon	equ	0xFF2
 12503                           intcon2	equ	0xFF1
 12504                           postinc0	equ	0xFEE
 12505                           plusw0	equ	0xFEB
 12506                           wreg	equ	0xFE8
 12507                           indf1	equ	0xFE7
 12508                           postdec1	equ	0xFE5
 12509                           fsr1h	equ	0xFE2
 12510                           fsr1l	equ	0xFE1
 12511                           indf2	equ	0xFDF
 12512                           postinc2	equ	0xFDE
 12513                           postdec2	equ	0xFDD
 12514                           plusw2	equ	0xFDB
 12515                           fsr2h	equ	0xFDA
 12516                           fsr2l	equ	0xFD9
 12517                           status	equ	0xFD8
 12518                           
 12519 ;; *************** function _make8 *****************
 12520 ;; Defined at:
 12521 ;;		line 96 in file "SystemCommon.c"
 12522 ;; Parameters:    Size  Location     Type
 12523 ;;  data            4   23[COMRAM] unsigned long 
 12524 ;;  dataLocation    1   27[COMRAM] unsigned char 
 12525 ;; Auto vars:     Size  Location     Type
 12526 ;;		None
 12527 ;; Return value:  Size  Location     Type
 12528 ;;                  1    wreg      unsigned char 
 12529 ;; Registers used:
 12530 ;;		wreg, status,2, status,0
 12531 ;; Tracked objects:
 12532 ;;		On entry : 0/0
 12533 ;;		On exit  : 0/0
 12534 ;;		Unchanged: 0/0
 12535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12536 ;;      Params:         5       0       0       0       0       0       0
 12537 ;;      Locals:         0       0       0       0       0       0       0
 12538 ;;      Temps:          4       0       0       0       0       0       0
 12539 ;;      Totals:         9       0       0       0       0       0       0
 12540 ;;Total ram usage:        9 bytes
 12541 ;; Hardware stack levels used:    1
 12542 ;; Hardware stack levels required when called:    4
 12543 ;; This function calls:
 12544 ;;		Nothing
 12545 ;; This function is called by:
 12546 ;;		_FlashReadCondition
 12547 ;;		_DacReadValue
 12548 ;;		_SynthReadData
 12549 ;;		_SWSPI_send_word
 12550 ;;		_StoreIntInEeprom
 12551 ;; This function uses a non-reentrant model
 12552 ;;
 12553                           
 12554                           	psect	text68
 12555  00397E                     __ptext68:
 12556                           	opt stack 0
 12557  00397E                     _make8:
 12558                           	opt stack 22
 12559                           
 12560                           ;SystemCommon.c: 98: switch(dataLocation)
 12561                           
 12562                           ;incstack = 0
 12563  00397E  D01F               	goto	l1430
 12564  003980                     
 12565                           ;SystemCommon.c: 101: return (data & 0x000000ff);
 12566  003980  5018               	movf	make8@data,w,c
 12567  003982  0012               	return	
 12568  003984                     
 12569                           ;SystemCommon.c: 104: return (data & 0x0000ff00) >> 8;
 12570  003984  5019               	movf	make8@data+1,w,c
 12571  003986  0012               	return	
 12572  003988                     
 12573                           ;SystemCommon.c: 107: return (data & 0x00ff0000) >> 16;
 12574  003988  501A               	movf	make8@data+2,w,c
 12575  00398A  0012               	return	
 12576  00398C                     
 12577                           ;SystemCommon.c: 110: return (data & 0xff000000) >> 24;
 12578  00398C  0E00               	movlw	0
 12579  00398E  1418               	andwf	make8@data,w,c
 12580  003990  6E1D               	movwf	??_make8& (0+255),c
 12581  003992  0E00               	movlw	0
 12582  003994  1419               	andwf	make8@data+1,w,c
 12583  003996  6E1E               	movwf	(??_make8+1)& (0+255),c
 12584  003998  0E00               	movlw	0
 12585  00399A  141A               	andwf	make8@data+2,w,c
 12586  00399C  6E1F               	movwf	(??_make8+2)& (0+255),c
 12587  00399E  0EFF               	movlw	255
 12588  0039A0  141B               	andwf	make8@data+3,w,c
 12589  0039A2  6E20               	movwf	(??_make8+3)& (0+255),c
 12590  0039A4  0E19               	movlw	25
 12591  0039A6  D005               	goto	u7820
 12592  0039A8                     u7825:
 12593  0039A8  90D8               	bcf	status,0,c
 12594  0039AA  3220               	rrcf	??_make8+3,f,c
 12595  0039AC  321F               	rrcf	??_make8+2,f,c
 12596  0039AE  321E               	rrcf	??_make8+1,f,c
 12597  0039B0  321D               	rrcf	??_make8,f,c
 12598  0039B2                     u7820:
 12599  0039B2  2EE8               	decfsz	wreg,f,c
 12600  0039B4  D7F9               	goto	u7825
 12601  0039B6  501D               	movf	??_make8,w,c
 12602  0039B8  0012               	return	
 12603  0039BA                     
 12604                           ;SystemCommon.c: 113: return (0);
 12605  0039BA  0E00               	movlw	0
 12606                           
 12607                           ;SystemCommon.c: 114: }
 12608  0039BC  0012               	return	
 12609  0039BE                     l1430:
 12610  0039BE  501C               	movf	make8@dataLocation,w,c
 12611                           
 12612                           ; Switch size 1, requested type "space"
 12613                           ; Number of cases is 4, Range of values is 0 to 3
 12614                           ; switch strategies available:
 12615                           ; Name         Instructions Cycles
 12616                           ; simple_byte           13     7 (average)
 12617                           ;	Chosen strategy is simple_byte
 12618  0039C0  0A00               	xorlw	0	; case 0
 12619  0039C2  B4D8               	btfsc	status,2,c
 12620  0039C4  D7DD               	goto	l1431
 12621  0039C6  0A01               	xorlw	1	; case 1
 12622  0039C8  B4D8               	btfsc	status,2,c
 12623  0039CA  D7DC               	goto	l1433
 12624  0039CC  0A03               	xorlw	3	; case 2
 12625  0039CE  B4D8               	btfsc	status,2,c
 12626  0039D0  D7DB               	goto	l1434
 12627  0039D2  0A01               	xorlw	1	; case 3
 12628  0039D4  B4D8               	btfsc	status,2,c
 12629  0039D6  D7DA               	goto	l1435
 12630  0039D8  D7F0               	goto	l1436
 12631  0039DA                     __end_of_make8:
 12632                           	opt stack 0
 12633                           tosu	equ	0xFFF
 12634                           tosh	equ	0xFFE
 12635                           tosl	equ	0xFFD
 12636                           pclath	equ	0xFFA
 12637                           tblptru	equ	0xFF8
 12638                           tblptrh	equ	0xFF7
 12639                           tblptrl	equ	0xFF6
 12640                           tablat	equ	0xFF5
 12641                           prodh	equ	0xFF4
 12642                           prodl	equ	0xFF3
 12643                           intcon	equ	0xFF2
 12644                           intcon2	equ	0xFF1
 12645                           postinc0	equ	0xFEE
 12646                           plusw0	equ	0xFEB
 12647                           wreg	equ	0xFE8
 12648                           indf1	equ	0xFE7
 12649                           postdec1	equ	0xFE5
 12650                           fsr1h	equ	0xFE2
 12651                           fsr1l	equ	0xFE1
 12652                           indf2	equ	0xFDF
 12653                           postinc2	equ	0xFDE
 12654                           postdec2	equ	0xFDD
 12655                           plusw2	equ	0xFDB
 12656                           fsr2h	equ	0xFDA
 12657                           fsr2l	equ	0xFD9
 12658                           status	equ	0xFD8
 12659                           
 12660 ;; *************** function _SwSpi_Set_Synth_Le_Pin *****************
 12661 ;; Defined at:
 12662 ;;		line 232 in file "SwSpiApp.c"
 12663 ;; Parameters:    Size  Location     Type
 12664 ;;  phrType         1    wreg     enum E1
 12665 ;;  cPinMode        1   23[COMRAM] unsigned char 
 12666 ;; Auto vars:     Size  Location     Type
 12667 ;;  phrType         1   24[COMRAM] enum E1
 12668 ;; Return value:  Size  Location     Type
 12669 ;;                  1    wreg      void 
 12670 ;; Registers used:
 12671 ;;		wreg, status,2, status,0
 12672 ;; Tracked objects:
 12673 ;;		On entry : 0/0
 12674 ;;		On exit  : 0/0
 12675 ;;		Unchanged: 0/0
 12676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12677 ;;      Params:         1       0       0       0       0       0       0
 12678 ;;      Locals:         1       0       0       0       0       0       0
 12679 ;;      Temps:          0       0       0       0       0       0       0
 12680 ;;      Totals:         2       0       0       0       0       0       0
 12681 ;;Total ram usage:        2 bytes
 12682 ;; Hardware stack levels used:    1
 12683 ;; Hardware stack levels required when called:    4
 12684 ;; This function calls:
 12685 ;;		Nothing
 12686 ;; This function is called by:
 12687 ;;		_SWSPI_send_word
 12688 ;; This function uses a non-reentrant model
 12689 ;;
 12690                           
 12691                           	psect	text69
 12692  003E5E                     __ptext69:
 12693                           	opt stack 0
 12694  003E5E                     _SwSpi_Set_Synth_Le_Pin:
 12695                           	opt stack 22
 12696                           
 12697                           ;incstack = 0
 12698                           ;SwSpi_Set_Synth_Le_Pin@phrType stored from wreg
 12699  003E5E  6E19               	movwf	SwSpi_Set_Synth_Le_Pin@phrType,c
 12700                           
 12701                           ;SwSpiApp.c: 234: switch(phrType)
 12702  003E60  D014               	goto	l755
 12703  003E62                     
 12704                           ;SwSpiApp.c: 237: if(cPinMode == 1)
 12705  003E62  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 12706  003E64  A4D8               	btfss	status,2,c
 12707  003E66  D002               	goto	l757
 12708                           
 12709                           ;SwSpiApp.c: 238: {
 12710                           ;SwSpiApp.c: 239: do { LATCbits.LATC2 = 1; } while(0);
 12711  003E68  848B               	bsf	3979,2,c	;volatile
 12712                           
 12713                           ;SwSpiApp.c: 240: }
 12714  003E6A  0012               	return	
 12715  003E6C                     l757:
 12716                           
 12717                           ;SwSpiApp.c: 241: else if(cPinMode == 0)
 12718  003E6C  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 12719  003E6E  A4D8               	btfss	status,2,c
 12720  003E70  0012               	return	
 12721                           
 12722                           ;SwSpiApp.c: 242: {
 12723                           ;SwSpiApp.c: 243: do { LATCbits.LATC2 = 0; } while(0);
 12724  003E72  948B               	bcf	3979,2,c	;volatile
 12725                           
 12726                           ;SwSpiApp.c: 244: }
 12727                           ;SwSpiApp.c: 245: break;
 12728  003E74  0012               	return	
 12729  003E76                     
 12730                           ;SwSpiApp.c: 248: if(cPinMode == 1)
 12731  003E76  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 12732  003E78  A4D8               	btfss	status,2,c
 12733  003E7A  D002               	goto	l766
 12734                           
 12735                           ;SwSpiApp.c: 249: {
 12736                           ;SwSpiApp.c: 250: do { LATDbits.LATD3 = 1; } while(0);
 12737  003E7C  868C               	bsf	3980,3,c	;volatile
 12738                           
 12739                           ;SwSpiApp.c: 251: }
 12740  003E7E  0012               	return	
 12741  003E80                     l766:
 12742                           
 12743                           ;SwSpiApp.c: 252: else if(cPinMode == 0)
 12744  003E80  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 12745  003E82  A4D8               	btfss	status,2,c
 12746  003E84  0012               	return	
 12747                           
 12748                           ;SwSpiApp.c: 253: {
 12749                           ;SwSpiApp.c: 254: do { LATDbits.LATD3 = 0; } while(0);
 12750  003E86  968C               	bcf	3980,3,c	;volatile
 12751                           
 12752                           ;SwSpiApp.c: 257: }
 12753                           
 12754                           ;SwSpiApp.c: 255: }
 12755                           ;SwSpiApp.c: 256: break;
 12756  003E88  0012               	return	
 12757  003E8A                     l755:
 12758  003E8A  5019               	movf	SwSpi_Set_Synth_Le_Pin@phrType,w,c
 12759                           
 12760                           ; Switch size 1, requested type "space"
 12761                           ; Number of cases is 2, Range of values is 0 to 1
 12762                           ; switch strategies available:
 12763                           ; Name         Instructions Cycles
 12764                           ; simple_byte            7     4 (average)
 12765                           ;	Chosen strategy is simple_byte
 12766  003E8C  0A00               	xorlw	0	; case 0
 12767  003E8E  B4D8               	btfsc	status,2,c
 12768  003E90  D7E8               	goto	l756
 12769  003E92  0A01               	xorlw	1	; case 1
 12770  003E94  A4D8               	btfss	status,2,c
 12771  003E96  0012               	return	
 12772  003E98  D7EE               	goto	l765
 12773  003E9A                     __end_of_SwSpi_Set_Synth_Le_Pin:
 12774                           	opt stack 0
 12775                           tosu	equ	0xFFF
 12776                           tosh	equ	0xFFE
 12777                           tosl	equ	0xFFD
 12778                           pclath	equ	0xFFA
 12779                           tblptru	equ	0xFF8
 12780                           tblptrh	equ	0xFF7
 12781                           tblptrl	equ	0xFF6
 12782                           tablat	equ	0xFF5
 12783                           prodh	equ	0xFF4
 12784                           prodl	equ	0xFF3
 12785                           intcon	equ	0xFF2
 12786                           intcon2	equ	0xFF1
 12787                           postinc0	equ	0xFEE
 12788                           plusw0	equ	0xFEB
 12789                           wreg	equ	0xFE8
 12790                           indf1	equ	0xFE7
 12791                           postdec1	equ	0xFE5
 12792                           fsr1h	equ	0xFE2
 12793                           fsr1l	equ	0xFE1
 12794                           indf2	equ	0xFDF
 12795                           postinc2	equ	0xFDE
 12796                           postdec2	equ	0xFDD
 12797                           plusw2	equ	0xFDB
 12798                           fsr2h	equ	0xFDA
 12799                           fsr2l	equ	0xFD9
 12800                           status	equ	0xFD8
 12801                           
 12802 ;; *************** function _SwSpi_Set_Dac_Sync_Pin *****************
 12803 ;; Defined at:
 12804 ;;		line 260 in file "SwSpiApp.c"
 12805 ;; Parameters:    Size  Location     Type
 12806 ;;  cPinMode        1    wreg     unsigned char 
 12807 ;; Auto vars:     Size  Location     Type
 12808 ;;  cPinMode        1   23[COMRAM] unsigned char 
 12809 ;; Return value:  Size  Location     Type
 12810 ;;                  1    wreg      void 
 12811 ;; Registers used:
 12812 ;;		wreg, status,2, status,0
 12813 ;; Tracked objects:
 12814 ;;		On entry : 0/0
 12815 ;;		On exit  : 0/0
 12816 ;;		Unchanged: 0/0
 12817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12818 ;;      Params:         0       0       0       0       0       0       0
 12819 ;;      Locals:         1       0       0       0       0       0       0
 12820 ;;      Temps:          0       0       0       0       0       0       0
 12821 ;;      Totals:         1       0       0       0       0       0       0
 12822 ;;Total ram usage:        1 bytes
 12823 ;; Hardware stack levels used:    1
 12824 ;; Hardware stack levels required when called:    4
 12825 ;; This function calls:
 12826 ;;		Nothing
 12827 ;; This function is called by:
 12828 ;;		_SWSPI_send_word
 12829 ;; This function uses a non-reentrant model
 12830 ;;
 12831                           
 12832                           	psect	text70
 12833  0043B8                     __ptext70:
 12834                           	opt stack 0
 12835  0043B8                     _SwSpi_Set_Dac_Sync_Pin:
 12836                           	opt stack 22
 12837                           
 12838                           ;incstack = 0
 12839                           ;SwSpi_Set_Dac_Sync_Pin@cPinMode stored from wreg
 12840  0043B8  6E18               	movwf	SwSpi_Set_Dac_Sync_Pin@cPinMode,c
 12841                           
 12842                           ;SwSpiApp.c: 262: switch(cPinMode)
 12843  0043BA  D004               	goto	l776
 12844  0043BC                     
 12845                           ;SwSpiApp.c: 265: do { LATAbits.LATA2 = 0; } while(0);
 12846  0043BC  9489               	bcf	3977,2,c	;volatile
 12847                           
 12848                           ;SwSpiApp.c: 266: break;
 12849  0043BE  0012               	return	
 12850  0043C0                     
 12851                           ;SwSpiApp.c: 269: do { LATAbits.LATA2 = 1; } while(0);
 12852  0043C0  8489               	bsf	3977,2,c	;volatile
 12853                           
 12854                           ;SwSpiApp.c: 271: }
 12855                           
 12856                           ;SwSpiApp.c: 270: break;
 12857  0043C2  0012               	return	
 12858  0043C4                     l776:
 12859  0043C4  5018               	movf	SwSpi_Set_Dac_Sync_Pin@cPinMode,w,c
 12860                           
 12861                           ; Switch size 1, requested type "space"
 12862                           ; Number of cases is 2, Range of values is 0 to 1
 12863                           ; switch strategies available:
 12864                           ; Name         Instructions Cycles
 12865                           ; simple_byte            7     4 (average)
 12866                           ;	Chosen strategy is simple_byte
 12867  0043C6  0A00               	xorlw	0	; case 0
 12868  0043C8  B4D8               	btfsc	status,2,c
 12869  0043CA  D7F8               	goto	l777
 12870  0043CC  0A01               	xorlw	1	; case 1
 12871  0043CE  A4D8               	btfss	status,2,c
 12872  0043D0  0012               	return	
 12873  0043D2  D7F6               	goto	l781
 12874  0043D4                     __end_of_SwSpi_Set_Dac_Sync_Pin:
 12875                           	opt stack 0
 12876                           tosu	equ	0xFFF
 12877                           tosh	equ	0xFFE
 12878                           tosl	equ	0xFFD
 12879                           pclath	equ	0xFFA
 12880                           tblptru	equ	0xFF8
 12881                           tblptrh	equ	0xFF7
 12882                           tblptrl	equ	0xFF6
 12883                           tablat	equ	0xFF5
 12884                           prodh	equ	0xFF4
 12885                           prodl	equ	0xFF3
 12886                           intcon	equ	0xFF2
 12887                           intcon2	equ	0xFF1
 12888                           postinc0	equ	0xFEE
 12889                           plusw0	equ	0xFEB
 12890                           wreg	equ	0xFE8
 12891                           indf1	equ	0xFE7
 12892                           postdec1	equ	0xFE5
 12893                           fsr1h	equ	0xFE2
 12894                           fsr1l	equ	0xFE1
 12895                           indf2	equ	0xFDF
 12896                           postinc2	equ	0xFDE
 12897                           postdec2	equ	0xFDD
 12898                           plusw2	equ	0xFDB
 12899                           fsr2h	equ	0xFDA
 12900                           fsr2l	equ	0xFD9
 12901                           status	equ	0xFD8
 12902                           
 12903 ;; *************** function _SWSPI_Synth_send_bits *****************
 12904 ;; Defined at:
 12905 ;;		line 67 in file "SwSpiApp.c"
 12906 ;; Parameters:    Size  Location     Type
 12907 ;;  phrType         1    wreg     enum E1
 12908 ;;  data            4   36[COMRAM] unsigned long 
 12909 ;; Auto vars:     Size  Location     Type
 12910 ;;  phrType         1   37[BANK0 ] enum E1
 12911 ;;  bitArray       32    0[BANK0 ] unsigned char [32]
 12912 ;;  mask            4   32[BANK0 ] unsigned long 
 12913 ;;  count           1   36[BANK0 ] unsigned char 
 12914 ;; Return value:  Size  Location     Type
 12915 ;;                  1    wreg      void 
 12916 ;; Registers used:
 12917 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12918 ;; Tracked objects:
 12919 ;;		On entry : 0/0
 12920 ;;		On exit  : 0/0
 12921 ;;		Unchanged: 0/0
 12922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12923 ;;      Params:         4       0       0       0       0       0       0
 12924 ;;      Locals:         0      38       0       0       0       0       0
 12925 ;;      Temps:          0       0       0       0       0       0       0
 12926 ;;      Totals:         4      38       0       0       0       0       0
 12927 ;;Total ram usage:       42 bytes
 12928 ;; Hardware stack levels used:    1
 12929 ;; Hardware stack levels required when called:    6
 12930 ;; This function calls:
 12931 ;;		_FillArray
 12932 ;;		_Make32bitsArray
 12933 ;;		_SwSpi_Clk_Pin
 12934 ;;		_SwSpi_Data_Pin
 12935 ;; This function is called by:
 12936 ;;		_SWSPI_send_word
 12937 ;; This function uses a non-reentrant model
 12938 ;;
 12939                           
 12940                           	psect	text71
 12941  002DA2                     __ptext71:
 12942                           	opt stack 0
 12943  002DA2                     _SWSPI_Synth_send_bits:
 12944                           	opt stack 20
 12945                           
 12946                           ;incstack = 0
 12947                           ;SWSPI_Synth_send_bits@phrType stored from wreg
 12948  002DA2  0100               	movlb	0	; () banked
 12949  002DA4  6F85               	movwf	SWSPI_Synth_send_bits@phrType& (0+255),b
 12950                           
 12951                           ;SwSpiApp.c: 69: uint8_t count;
 12952                           ;SwSpiApp.c: 70: uint32_t mask = 0x1;
 12953  002DA6  0E01               	movlw	1
 12954  002DA8  0100               	movlb	0	; () banked
 12955  002DAA  6F80               	movwf	SWSPI_Synth_send_bits@mask& (0+255),b
 12956  002DAC  0E00               	movlw	0
 12957  002DAE  6F81               	movwf	(SWSPI_Synth_send_bits@mask+1)& (0+255),b
 12958  002DB0  0E00               	movlw	0
 12959  002DB2  6F82               	movwf	(SWSPI_Synth_send_bits@mask+2)& (0+255),b
 12960  002DB4  0E00               	movlw	0
 12961  002DB6  6F83               	movwf	(SWSPI_Synth_send_bits@mask+3)& (0+255),b
 12962                           
 12963                           ; BSR set to: 0
 12964                           ;SwSpiApp.c: 72: bool bitArray[32];
 12965                           ;SwSpiApp.c: 73: FillArray(bitArray, sizeof(bitArray), 0x0);
 12966  002DB8  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 12967  002DBA  6E20               	movwf	FillArray@array,c
 12968  002DBC  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 12969  002DBE  6E21               	movwf	FillArray@array+1,c
 12970  002DC0  0E00               	movlw	0
 12971  002DC2  6E23               	movwf	FillArray@size+1,c
 12972  002DC4  0E20               	movlw	32
 12973  002DC6  6E22               	movwf	FillArray@size,c
 12974  002DC8  0E00               	movlw	0
 12975  002DCA  6E24               	movwf	FillArray@value,c
 12976  002DCC  ECEA  F021         	call	_FillArray	;wreg free
 12977                           
 12978                           ;SwSpiApp.c: 75: Make32bitsArray(bitArray, data);
 12979  002DD0  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 12980  002DD2  6E18               	movwf	Make32bitsArray@array,c
 12981  002DD4  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 12982  002DD6  6E19               	movwf	Make32bitsArray@array+1,c
 12983  002DD8  C025  F01A         	movff	SWSPI_Synth_send_bits@data,Make32bitsArray@data
 12984  002DDC  C026  F01B         	movff	SWSPI_Synth_send_bits@data+1,Make32bitsArray@data+1
 12985  002DE0  C027  F01C         	movff	SWSPI_Synth_send_bits@data+2,Make32bitsArray@data+2
 12986  002DE4  C028  F01D         	movff	SWSPI_Synth_send_bits@data+3,Make32bitsArray@data+3
 12987  002DE8  EC1B  F01D         	call	_Make32bitsArray	;wreg free
 12988                           
 12989                           ;SwSpiApp.c: 77: for (count = 0; count <= 31 ; count++)
 12990  002DEC  0E00               	movlw	0
 12991  002DEE  0100               	movlb	0	; () banked
 12992  002DF0  6F84               	movwf	SWSPI_Synth_send_bits@count& (0+255),b
 12993  002DF2                     l7778:
 12994                           
 12995                           ; BSR set to: 0
 12996  002DF2  0E1F               	movlw	31
 12997  002DF4  6584               	cpfsgt	SWSPI_Synth_send_bits@count& (0+255),b
 12998  002DF6  D001               	goto	l661
 12999  002DF8  D026               	goto	u7890
 13000  002DFA                     l661:
 13001                           
 13002                           ; BSR set to: 0
 13003                           ;SwSpiApp.c: 78: {
 13004                           ;SwSpiApp.c: 80: SwSpi_Clk_Pin(phrType, 0);
 13005                           
 13006                           ; BSR set to: 0
 13007  002DFA  0E00               	movlw	0
 13008  002DFC  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 13009  002DFE  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 13010  002E00  EC9E  F01D         	call	_SwSpi_Clk_Pin
 13011                           
 13012                           ;SwSpiApp.c: 82: if (bitArray[count])
 13013  002E04  0100               	movlb	0	; () banked
 13014  002E06  5184               	movf	SWSPI_Synth_send_bits@count& (0+255),w,b
 13015  002E08  0D01               	mullw	1
 13016  002E0A  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 13017  002E0C  24F3               	addwf	prodl,w,c
 13018  002E0E  6ED9               	movwf	fsr2l,c
 13019  002E10  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 13020  002E12  20F4               	addwfc	prodh,w,c
 13021  002E14  6EDA               	movwf	fsr2h,c
 13022  002E16  50DF               	movf	indf2,w,c
 13023  002E18  B4D8               	btfsc	status,2,c
 13024  002E1A  D006               	goto	l663
 13025                           
 13026                           ; BSR set to: 0
 13027                           ;SwSpiApp.c: 83: {
 13028                           ;SwSpiApp.c: 84: SwSpi_Data_Pin(phrType, 1);
 13029  002E1C  0E01               	movlw	1
 13030  002E1E  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 13031  002E20  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 13032  002E22  EC73  F01D         	call	_SwSpi_Data_Pin
 13033                           
 13034                           ;SwSpiApp.c: 85: }
 13035  002E26  D006               	goto	l664
 13036  002E28                     l663:
 13037                           
 13038                           ;SwSpiApp.c: 86: else
 13039                           ;SwSpiApp.c: 87: {
 13040                           ;SwSpiApp.c: 88: SwSpi_Data_Pin(phrType, 0);
 13041  002E28  0E00               	movlw	0
 13042  002E2A  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 13043  002E2C  0100               	movlb	0	; () banked
 13044  002E2E  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 13045  002E30  EC73  F01D         	call	_SwSpi_Data_Pin
 13046  002E34                     l664:
 13047                           
 13048                           ;SwSpiApp.c: 89: }
 13049                           ;SwSpiApp.c: 91: SwSpi_Clk_Pin(phrType, 1);
 13050  002E34  0E01               	movlw	1
 13051  002E36  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 13052  002E38  0100               	movlb	0	; () banked
 13053  002E3A  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 13054  002E3C  EC9E  F01D         	call	_SwSpi_Clk_Pin
 13055  002E40  0100               	movlb	0	; () banked
 13056  002E42  2B84               	incf	SWSPI_Synth_send_bits@count& (0+255),f,b
 13057  002E44  D7D6               	goto	l7778
 13058  002E46                     u7890:
 13059                           
 13060                           ; BSR set to: 0
 13061                           ;SwSpiApp.c: 92: }
 13062                           ;SwSpiApp.c: 94: _delay((unsigned long)((50)*(8000000/4000000.0)));
 13063                           
 13064                           ; BSR set to: 0
 13065  002E46  0E21               	movlw	33
 13066  002E48                     u9657:
 13067  002E48  2EE8               	decfsz	wreg,f,c
 13068  002E4A  D7FE               	bra	u9657
 13069  002E4C  F000               	nop	
 13070                           
 13071                           ;SwSpiApp.c: 95: SwSpi_Data_Pin(phrType, 0);
 13072  002E4E  0E00               	movlw	0
 13073  002E50  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 13074  002E52  0100               	movlb	0	; () banked
 13075  002E54  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 13076  002E56  EC73  F01D         	call	_SwSpi_Data_Pin
 13077                           
 13078                           ;SwSpiApp.c: 96: SwSpi_Clk_Pin(phrType, 0);
 13079  002E5A  0E00               	movlw	0
 13080  002E5C  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 13081  002E5E  0100               	movlb	0	; () banked
 13082  002E60  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 13083  002E62  EC9E  F01D         	call	_SwSpi_Clk_Pin
 13084  002E66  0012               	return		;funcret
 13085  002E68                     __end_of_SWSPI_Synth_send_bits:
 13086                           	opt stack 0
 13087                           tosu	equ	0xFFF
 13088                           tosh	equ	0xFFE
 13089                           tosl	equ	0xFFD
 13090                           pclath	equ	0xFFA
 13091                           tblptru	equ	0xFF8
 13092                           tblptrh	equ	0xFF7
 13093                           tblptrl	equ	0xFF6
 13094                           tablat	equ	0xFF5
 13095                           prodh	equ	0xFF4
 13096                           prodl	equ	0xFF3
 13097                           intcon	equ	0xFF2
 13098                           intcon2	equ	0xFF1
 13099                           postinc0	equ	0xFEE
 13100                           plusw0	equ	0xFEB
 13101                           wreg	equ	0xFE8
 13102                           indf1	equ	0xFE7
 13103                           postdec1	equ	0xFE5
 13104                           fsr1h	equ	0xFE2
 13105                           fsr1l	equ	0xFE1
 13106                           indf2	equ	0xFDF
 13107                           postinc2	equ	0xFDE
 13108                           postdec2	equ	0xFDD
 13109                           plusw2	equ	0xFDB
 13110                           fsr2h	equ	0xFDA
 13111                           fsr2l	equ	0xFD9
 13112                           status	equ	0xFD8
 13113                           
 13114 ;; *************** function _Make32bitsArray *****************
 13115 ;; Defined at:
 13116 ;;		line 117 in file "SystemCommon.c"
 13117 ;; Parameters:    Size  Location     Type
 13118 ;;  array           2   23[COMRAM] PTR unsigned char 
 13119 ;;		 -> SWSPI_Synth_send_bits@bitArray(32), 
 13120 ;;  data            4   25[COMRAM] unsigned long 
 13121 ;; Auto vars:     Size  Location     Type
 13122 ;;  idx             2   31[COMRAM] int 
 13123 ;; Return value:  Size  Location     Type
 13124 ;;                  1    wreg      void 
 13125 ;; Registers used:
 13126 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13127 ;; Tracked objects:
 13128 ;;		On entry : 0/0
 13129 ;;		On exit  : 0/0
 13130 ;;		Unchanged: 0/0
 13131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13132 ;;      Params:         6       0       0       0       0       0       0
 13133 ;;      Locals:         2       0       0       0       0       0       0
 13134 ;;      Temps:          2       0       0       0       0       0       0
 13135 ;;      Totals:        10       0       0       0       0       0       0
 13136 ;;Total ram usage:       10 bytes
 13137 ;; Hardware stack levels used:    1
 13138 ;; Hardware stack levels required when called:    4
 13139 ;; This function calls:
 13140 ;;		Nothing
 13141 ;; This function is called by:
 13142 ;;		_SWSPI_Synth_send_bits
 13143 ;; This function uses a non-reentrant model
 13144 ;;
 13145                           
 13146                           	psect	text72
 13147  003A36                     __ptext72:
 13148                           	opt stack 0
 13149  003A36                     _Make32bitsArray:
 13150                           	opt stack 21
 13151                           
 13152                           ;SystemCommon.c: 119: for(int idx = 0; idx <= 32; idx++)
 13153                           
 13154                           ;incstack = 0
 13155  003A36  0E00               	movlw	0
 13156  003A38  6E21               	movwf	Make32bitsArray@idx+1,c
 13157  003A3A  0E00               	movlw	0
 13158  003A3C  6E20               	movwf	Make32bitsArray@idx,c
 13159  003A3E                     l7566:
 13160  003A3E  BE21               	btfsc	Make32bitsArray@idx+1,7,c
 13161  003A40  D006               	goto	l1440
 13162  003A42  5021               	movf	Make32bitsArray@idx+1,w,c
 13163  003A44  E123               	bnz	l1442
 13164  003A46  0E21               	movlw	33
 13165  003A48  5C20               	subwf	Make32bitsArray@idx,w,c
 13166  003A4A  B0D8               	btfsc	status,0,c
 13167  003A4C  0012               	return	
 13168  003A4E                     l1440:
 13169                           
 13170                           ;SystemCommon.c: 120: {
 13171                           ;SystemCommon.c: 121: array[32 - idx - 1] = data % 2;
 13172  003A4E  0E01               	movlw	1
 13173  003A50  2420               	addwf	Make32bitsArray@idx,w,c
 13174  003A52  6E1E               	movwf	??_Make32bitsArray& (0+255),c
 13175  003A54  0E00               	movlw	0
 13176  003A56  2021               	addwfc	Make32bitsArray@idx+1,w,c
 13177  003A58  6E1F               	movwf	(??_Make32bitsArray+1)& (0+255),c
 13178  003A5A  1E1E               	comf	??_Make32bitsArray,f,c
 13179  003A5C  1E1F               	comf	??_Make32bitsArray+1,f,c
 13180  003A5E  4A1E               	infsnz	??_Make32bitsArray,f,c
 13181  003A60  2A1F               	incf	??_Make32bitsArray+1,f,c
 13182  003A62  0E20               	movlw	32
 13183  003A64  261E               	addwf	??_Make32bitsArray,f,c
 13184  003A66  0E00               	movlw	0
 13185  003A68  221F               	addwfc	??_Make32bitsArray+1,f,c
 13186  003A6A  501E               	movf	??_Make32bitsArray,w,c
 13187  003A6C  2418               	addwf	Make32bitsArray@array,w,c
 13188  003A6E  6ED9               	movwf	fsr2l,c
 13189  003A70  501F               	movf	??_Make32bitsArray+1,w,c
 13190  003A72  2019               	addwfc	Make32bitsArray@array+1,w,c
 13191  003A74  6EDA               	movwf	fsr2h,c
 13192  003A76  501A               	movf	Make32bitsArray@data,w,c
 13193  003A78  0B01               	andlw	1
 13194  003A7A  6EDF               	movwf	indf2,c
 13195                           
 13196                           ;SystemCommon.c: 122: data /= 2;
 13197  003A7C  90D8               	bcf	status,0,c
 13198  003A7E  321D               	rrcf	Make32bitsArray@data+3,f,c
 13199  003A80  321C               	rrcf	Make32bitsArray@data+2,f,c
 13200  003A82  321B               	rrcf	Make32bitsArray@data+1,f,c
 13201  003A84  321A               	rrcf	Make32bitsArray@data,f,c
 13202  003A86  4A20               	infsnz	Make32bitsArray@idx,f,c
 13203  003A88  2A21               	incf	Make32bitsArray@idx+1,f,c
 13204  003A8A  D7D9               	goto	l7566
 13205  003A8C                     l1442:
 13206  003A8C  0012               	return		;funcret
 13207  003A8E                     __end_of_Make32bitsArray:
 13208                           	opt stack 0
 13209                           tosu	equ	0xFFF
 13210                           tosh	equ	0xFFE
 13211                           tosl	equ	0xFFD
 13212                           pclath	equ	0xFFA
 13213                           tblptru	equ	0xFF8
 13214                           tblptrh	equ	0xFF7
 13215                           tblptrl	equ	0xFF6
 13216                           tablat	equ	0xFF5
 13217                           prodh	equ	0xFF4
 13218                           prodl	equ	0xFF3
 13219                           intcon	equ	0xFF2
 13220                           intcon2	equ	0xFF1
 13221                           postinc0	equ	0xFEE
 13222                           plusw0	equ	0xFEB
 13223                           wreg	equ	0xFE8
 13224                           indf1	equ	0xFE7
 13225                           postdec1	equ	0xFE5
 13226                           fsr1h	equ	0xFE2
 13227                           fsr1l	equ	0xFE1
 13228                           indf2	equ	0xFDF
 13229                           postinc2	equ	0xFDE
 13230                           postdec2	equ	0xFDD
 13231                           plusw2	equ	0xFDB
 13232                           fsr2h	equ	0xFDA
 13233                           fsr2l	equ	0xFD9
 13234                           status	equ	0xFD8
 13235                           
 13236 ;; *************** function _FillArray *****************
 13237 ;; Defined at:
 13238 ;;		line 29 in file "SystemCommon.c"
 13239 ;; Parameters:    Size  Location     Type
 13240 ;;  array           2   31[COMRAM] PTR unsigned char 
 13241 ;;		 -> SWSPI_Synth_send_bits@bitArray(32), synthLdRxArray(12), 
 13242 ;;  size            2   33[COMRAM] int 
 13243 ;;  value           1   35[COMRAM] unsigned char 
 13244 ;; Auto vars:     Size  Location     Type
 13245 ;;		None
 13246 ;; Return value:  Size  Location     Type
 13247 ;;                  1    wreg      void 
 13248 ;; Registers used:
 13249 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13250 ;; Tracked objects:
 13251 ;;		On entry : 0/0
 13252 ;;		On exit  : 0/0
 13253 ;;		Unchanged: 0/0
 13254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13255 ;;      Params:         5       0       0       0       0       0       0
 13256 ;;      Locals:         0       0       0       0       0       0       0
 13257 ;;      Temps:          0       0       0       0       0       0       0
 13258 ;;      Totals:         5       0       0       0       0       0       0
 13259 ;;Total ram usage:        5 bytes
 13260 ;; Hardware stack levels used:    1
 13261 ;; Hardware stack levels required when called:    5
 13262 ;; This function calls:
 13263 ;;		_memset
 13264 ;; This function is called by:
 13265 ;;		_PLLInitialize
 13266 ;;		_SWSPI_Synth_send_bits
 13267 ;; This function uses a non-reentrant model
 13268 ;;
 13269                           
 13270                           	psect	text73
 13271  0043D4                     __ptext73:
 13272                           	opt stack 0
 13273  0043D4                     _FillArray:
 13274                           	opt stack 20
 13275                           
 13276                           ;SystemCommon.c: 31: memset(array, value, size);
 13277                           
 13278                           ;incstack = 0
 13279  0043D4  C020  F018         	movff	FillArray@array,memset@p1
 13280  0043D8  C021  F019         	movff	FillArray@array+1,memset@p1+1
 13281  0043DC  C024  F01A         	movff	FillArray@value,memset@c
 13282  0043E0  6A1B               	clrf	memset@c+1,c
 13283  0043E2  C022  F01C         	movff	FillArray@size,memset@n
 13284  0043E6  C023  F01D         	movff	FillArray@size+1,memset@n+1
 13285  0043EA  ECBC  F020         	call	_memset	;wreg free
 13286  0043EE  0012               	return		;funcret
 13287  0043F0                     __end_of_FillArray:
 13288                           	opt stack 0
 13289                           tosu	equ	0xFFF
 13290                           tosh	equ	0xFFE
 13291                           tosl	equ	0xFFD
 13292                           pclath	equ	0xFFA
 13293                           tblptru	equ	0xFF8
 13294                           tblptrh	equ	0xFF7
 13295                           tblptrl	equ	0xFF6
 13296                           tablat	equ	0xFF5
 13297                           prodh	equ	0xFF4
 13298                           prodl	equ	0xFF3
 13299                           intcon	equ	0xFF2
 13300                           intcon2	equ	0xFF1
 13301                           postinc0	equ	0xFEE
 13302                           plusw0	equ	0xFEB
 13303                           wreg	equ	0xFE8
 13304                           indf1	equ	0xFE7
 13305                           postdec1	equ	0xFE5
 13306                           fsr1h	equ	0xFE2
 13307                           fsr1l	equ	0xFE1
 13308                           indf2	equ	0xFDF
 13309                           postinc2	equ	0xFDE
 13310                           postdec2	equ	0xFDD
 13311                           plusw2	equ	0xFDB
 13312                           fsr2h	equ	0xFDA
 13313                           fsr2l	equ	0xFD9
 13314                           status	equ	0xFD8
 13315                           
 13316 ;; *************** function _memset *****************
 13317 ;; Defined at:
 13318 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 13319 ;; Parameters:    Size  Location     Type
 13320 ;;  p1              2   23[COMRAM] PTR void 
 13321 ;;		 -> GetMcuFwVersion@TxMsg(18), GetIntFromUartData@dataRegArr(10), SWSPI_Synth_send_bits@bitArray(32), SynthReadData@
      +TxMsg(18), 
 13322 ;;		 -> DacReadValue@TxMsg(7), FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), sampleArray(64), 
 13323 ;;		 -> SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), synthLdRxArray(12), 
 13324 ;;  c               2   25[COMRAM] int 
 13325 ;;  n               2   27[COMRAM] unsigned int 
 13326 ;; Auto vars:     Size  Location     Type
 13327 ;;  p               2   29[COMRAM] PTR unsigned char 
 13328 ;;		 -> GetMcuFwVersion@TxMsg(18), GetIntFromUartData@dataRegArr(10), SWSPI_Synth_send_bits@bitArray(32), SynthReadData@
      +TxMsg(18), 
 13329 ;;		 -> DacReadValue@TxMsg(7), FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), sampleArray(64), 
 13330 ;;		 -> SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), synthLdRxArray(12), 
 13331 ;; Return value:  Size  Location     Type
 13332 ;;                  2   23[COMRAM] PTR void 
 13333 ;; Registers used:
 13334 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13335 ;; Tracked objects:
 13336 ;;		On entry : 0/0
 13337 ;;		On exit  : 0/0
 13338 ;;		Unchanged: 0/0
 13339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13340 ;;      Params:         6       0       0       0       0       0       0
 13341 ;;      Locals:         2       0       0       0       0       0       0
 13342 ;;      Temps:          0       0       0       0       0       0       0
 13343 ;;      Totals:         8       0       0       0       0       0       0
 13344 ;;Total ram usage:        8 bytes
 13345 ;; Hardware stack levels used:    1
 13346 ;; Hardware stack levels required when called:    4
 13347 ;; This function calls:
 13348 ;;		Nothing
 13349 ;; This function is called by:
 13350 ;;		_ZeroArray
 13351 ;;		_FillArray
 13352 ;; This function uses a non-reentrant model
 13353 ;;
 13354                           
 13355                           	psect	text74
 13356  004178                     __ptext74:
 13357                           	opt stack 0
 13358  004178                     _memset:
 13359                           	opt stack 24
 13360                           
 13361                           ;incstack = 0
 13362  004178  C018  F01E         	movff	memset@p1,memset@p
 13363  00417C  C019  F01F         	movff	memset@p1+1,memset@p+1
 13364  004180  D008               	goto	l2039
 13365  004182                     l7348:
 13366  004182  C01E  FFD9         	movff	memset@p,fsr2l
 13367  004186  C01F  FFDA         	movff	memset@p+1,fsr2h
 13368  00418A  C01A  FFDF         	movff	memset@c,indf2
 13369  00418E  4A1E               	infsnz	memset@p,f,c
 13370  004190  2A1F               	incf	memset@p+1,f,c
 13371  004192                     l2039:
 13372  004192  061C               	decf	memset@n,f,c
 13373  004194  A0D8               	btfss	status,0,c
 13374  004196  061D               	decf	memset@n+1,f,c
 13375  004198  281C               	incf	memset@n,w,c
 13376  00419A  E1F3               	bnz	l7348
 13377  00419C  281D               	incf	memset@n+1,w,c
 13378  00419E  B4D8               	btfsc	status,2,c
 13379  0041A0  0012               	return	
 13380  0041A2  D7EF               	goto	l2040
 13381  0041A4                     __end_of_memset:
 13382                           	opt stack 0
 13383                           tosu	equ	0xFFF
 13384                           tosh	equ	0xFFE
 13385                           tosl	equ	0xFFD
 13386                           pclath	equ	0xFFA
 13387                           tblptru	equ	0xFF8
 13388                           tblptrh	equ	0xFF7
 13389                           tblptrl	equ	0xFF6
 13390                           tablat	equ	0xFF5
 13391                           prodh	equ	0xFF4
 13392                           prodl	equ	0xFF3
 13393                           intcon	equ	0xFF2
 13394                           intcon2	equ	0xFF1
 13395                           postinc0	equ	0xFEE
 13396                           plusw0	equ	0xFEB
 13397                           wreg	equ	0xFE8
 13398                           indf1	equ	0xFE7
 13399                           postdec1	equ	0xFE5
 13400                           fsr1h	equ	0xFE2
 13401                           fsr1l	equ	0xFE1
 13402                           indf2	equ	0xFDF
 13403                           postinc2	equ	0xFDE
 13404                           postdec2	equ	0xFDD
 13405                           plusw2	equ	0xFDB
 13406                           fsr2h	equ	0xFDA
 13407                           fsr2l	equ	0xFD9
 13408                           status	equ	0xFD8
 13409                           
 13410 ;; *************** function _SWSPI_DAC_send_bits *****************
 13411 ;; Defined at:
 13412 ;;		line 43 in file "SwSpiApp.c"
 13413 ;; Parameters:    Size  Location     Type
 13414 ;;  phrType         1    wreg     enum E1
 13415 ;;  data            1   25[COMRAM] unsigned char 
 13416 ;; Auto vars:     Size  Location     Type
 13417 ;;  phrType         1   27[COMRAM] enum E1
 13418 ;;  count           1   26[COMRAM] unsigned char 
 13419 ;; Return value:  Size  Location     Type
 13420 ;;                  1    wreg      void 
 13421 ;; Registers used:
 13422 ;;		wreg, status,2, status,0, cstack
 13423 ;; Tracked objects:
 13424 ;;		On entry : 0/0
 13425 ;;		On exit  : 0/0
 13426 ;;		Unchanged: 0/0
 13427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13428 ;;      Params:         1       0       0       0       0       0       0
 13429 ;;      Locals:         2       0       0       0       0       0       0
 13430 ;;      Temps:          0       0       0       0       0       0       0
 13431 ;;      Totals:         3       0       0       0       0       0       0
 13432 ;;Total ram usage:        3 bytes
 13433 ;; Hardware stack levels used:    1
 13434 ;; Hardware stack levels required when called:    5
 13435 ;; This function calls:
 13436 ;;		_SwSpi_Clk_Pin
 13437 ;;		_SwSpi_Data_Pin
 13438 ;; This function is called by:
 13439 ;;		_SWSPI_send_word
 13440 ;; This function uses a non-reentrant model
 13441 ;;
 13442                           
 13443                           	psect	text75
 13444  003A8E                     __ptext75:
 13445                           	opt stack 0
 13446  003A8E                     _SWSPI_DAC_send_bits:
 13447                           	opt stack 21
 13448                           
 13449                           ;incstack = 0
 13450                           ;SWSPI_DAC_send_bits@phrType stored from wreg
 13451  003A8E  6E1C               	movwf	SWSPI_DAC_send_bits@phrType,c
 13452                           
 13453                           ;SwSpiApp.c: 45: uint8_t count;
 13454                           ;SwSpiApp.c: 46: for (count = 8; count ; count--, data <<= 1)
 13455  003A90  0E08               	movlw	8
 13456  003A92  6E1B               	movwf	SWSPI_DAC_send_bits@count,c
 13457  003A94  D01A               	goto	l653
 13458  003A96                     
 13459                           ;SwSpiApp.c: 47: {
 13460                           ;SwSpiApp.c: 48: SwSpi_Clk_Pin(phrType, 1);
 13461  003A96  0E01               	movlw	1
 13462  003A98  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 13463  003A9A  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13464  003A9C  EC9E  F01D         	call	_SwSpi_Clk_Pin
 13465                           
 13466                           ;SwSpiApp.c: 50: if (data & 0X80)
 13467  003AA0  AE1A               	btfss	SWSPI_DAC_send_bits@data,7,c
 13468  003AA2  D006               	goto	l655
 13469                           
 13470                           ;SwSpiApp.c: 51: {
 13471                           ;SwSpiApp.c: 53: SwSpi_Data_Pin(phrType, 1);
 13472  003AA4  0E01               	movlw	1
 13473  003AA6  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 13474  003AA8  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13475  003AAA  EC73  F01D         	call	_SwSpi_Data_Pin
 13476                           
 13477                           ;SwSpiApp.c: 54: }
 13478  003AAE  D005               	goto	l656
 13479  003AB0                     l655:
 13480                           
 13481                           ;SwSpiApp.c: 55: else
 13482                           ;SwSpiApp.c: 56: {
 13483                           ;SwSpiApp.c: 57: SwSpi_Data_Pin(phrType, 0);
 13484  003AB0  0E00               	movlw	0
 13485  003AB2  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 13486  003AB4  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13487  003AB6  EC73  F01D         	call	_SwSpi_Data_Pin
 13488  003ABA                     l656:
 13489                           
 13490                           ;SwSpiApp.c: 58: }
 13491                           ;SwSpiApp.c: 60: SwSpi_Clk_Pin(phrType, 0);
 13492  003ABA  0E00               	movlw	0
 13493  003ABC  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 13494  003ABE  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13495  003AC0  EC9E  F01D         	call	_SwSpi_Clk_Pin
 13496  003AC4  061B               	decf	SWSPI_DAC_send_bits@count,f,c
 13497  003AC6  90D8               	bcf	status,0,c
 13498  003AC8  361A               	rlcf	SWSPI_DAC_send_bits@data,f,c
 13499  003ACA                     l653:
 13500  003ACA  501B               	movf	SWSPI_DAC_send_bits@count,w,c
 13501  003ACC  A4D8               	btfss	status,2,c
 13502  003ACE  D7E3               	goto	l654
 13503                           
 13504                           ;SwSpiApp.c: 61: }
 13505                           ;SwSpiApp.c: 63: SwSpi_Data_Pin(phrType, 0);
 13506  003AD0  0E00               	movlw	0
 13507  003AD2  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 13508  003AD4  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13509  003AD6  EC73  F01D         	call	_SwSpi_Data_Pin
 13510                           
 13511                           ;SwSpiApp.c: 64: SwSpi_Clk_Pin(phrType, 0);
 13512  003ADA  0E00               	movlw	0
 13513  003ADC  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 13514  003ADE  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13515  003AE0  EC9E  F01D         	call	_SwSpi_Clk_Pin
 13516  003AE4  0012               	return		;funcret
 13517  003AE6                     __end_of_SWSPI_DAC_send_bits:
 13518                           	opt stack 0
 13519                           tosu	equ	0xFFF
 13520                           tosh	equ	0xFFE
 13521                           tosl	equ	0xFFD
 13522                           pclath	equ	0xFFA
 13523                           tblptru	equ	0xFF8
 13524                           tblptrh	equ	0xFF7
 13525                           tblptrl	equ	0xFF6
 13526                           tablat	equ	0xFF5
 13527                           prodh	equ	0xFF4
 13528                           prodl	equ	0xFF3
 13529                           intcon	equ	0xFF2
 13530                           intcon2	equ	0xFF1
 13531                           postinc0	equ	0xFEE
 13532                           plusw0	equ	0xFEB
 13533                           wreg	equ	0xFE8
 13534                           indf1	equ	0xFE7
 13535                           postdec1	equ	0xFE5
 13536                           fsr1h	equ	0xFE2
 13537                           fsr1l	equ	0xFE1
 13538                           indf2	equ	0xFDF
 13539                           postinc2	equ	0xFDE
 13540                           postdec2	equ	0xFDD
 13541                           plusw2	equ	0xFDB
 13542                           fsr2h	equ	0xFDA
 13543                           fsr2l	equ	0xFD9
 13544                           status	equ	0xFD8
 13545                           
 13546 ;; *************** function _SwSpi_Data_Pin *****************
 13547 ;; Defined at:
 13548 ;;		line 103 in file "SwSpiApp.c"
 13549 ;; Parameters:    Size  Location     Type
 13550 ;;  phrType         1    wreg     enum E1
 13551 ;;  cPinMode        1   23[COMRAM] unsigned char 
 13552 ;; Auto vars:     Size  Location     Type
 13553 ;;  phrType         1   24[COMRAM] enum E1
 13554 ;; Return value:  Size  Location     Type
 13555 ;;                  1    wreg      void 
 13556 ;; Registers used:
 13557 ;;		wreg, status,2, status,0
 13558 ;; Tracked objects:
 13559 ;;		On entry : 0/0
 13560 ;;		On exit  : 0/0
 13561 ;;		Unchanged: 0/0
 13562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13563 ;;      Params:         1       0       0       0       0       0       0
 13564 ;;      Locals:         1       0       0       0       0       0       0
 13565 ;;      Temps:          0       0       0       0       0       0       0
 13566 ;;      Totals:         2       0       0       0       0       0       0
 13567 ;;Total ram usage:        2 bytes
 13568 ;; Hardware stack levels used:    1
 13569 ;; Hardware stack levels required when called:    4
 13570 ;; This function calls:
 13571 ;;		Nothing
 13572 ;; This function is called by:
 13573 ;;		_SWSPI_DAC_send_bits
 13574 ;;		_SWSPI_Synth_send_bits
 13575 ;; This function uses a non-reentrant model
 13576 ;;
 13577                           
 13578                           	psect	text76
 13579  003AE6                     __ptext76:
 13580                           	opt stack 0
 13581  003AE6                     _SwSpi_Data_Pin:
 13582                           	opt stack 21
 13583                           
 13584                           ;incstack = 0
 13585                           ;SwSpi_Data_Pin@phrType stored from wreg
 13586  003AE6  6E19               	movwf	SwSpi_Data_Pin@phrType,c
 13587                           
 13588                           ;SwSpiApp.c: 105: switch(phrType)
 13589  003AE8  D01E               	goto	l668
 13590  003AEA                     
 13591                           ;SwSpiApp.c: 108: if(cPinMode == 1)
 13592  003AEA  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 13593  003AEC  A4D8               	btfss	status,2,c
 13594  003AEE  D002               	goto	l670
 13595                           
 13596                           ;SwSpiApp.c: 109: {
 13597                           ;SwSpiApp.c: 110: do { LATDbits.LATD0 = 1; } while(0);
 13598  003AF0  808C               	bsf	3980,0,c	;volatile
 13599                           
 13600                           ;SwSpiApp.c: 111: }
 13601  003AF2  0012               	return	
 13602  003AF4                     l670:
 13603                           
 13604                           ;SwSpiApp.c: 112: else if (cPinMode == 0)
 13605  003AF4  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 13606  003AF6  A4D8               	btfss	status,2,c
 13607  003AF8  0012               	return	
 13608                           
 13609                           ;SwSpiApp.c: 113: {
 13610                           ;SwSpiApp.c: 114: do { LATDbits.LATD0 = 0; } while(0);
 13611  003AFA  908C               	bcf	3980,0,c	;volatile
 13612                           
 13613                           ;SwSpiApp.c: 115: }
 13614                           ;SwSpiApp.c: 116: break;
 13615  003AFC  0012               	return	
 13616  003AFE                     
 13617                           ;SwSpiApp.c: 119: if(cPinMode == 1)
 13618  003AFE  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 13619  003B00  A4D8               	btfss	status,2,c
 13620  003B02  D002               	goto	l679
 13621                           
 13622                           ;SwSpiApp.c: 120: {
 13623                           ;SwSpiApp.c: 121: do { LATCbits.LATC5 = 1; } while(0);
 13624  003B04  8A8B               	bsf	3979,5,c	;volatile
 13625                           
 13626                           ;SwSpiApp.c: 122: }
 13627  003B06  0012               	return	
 13628  003B08                     l679:
 13629                           
 13630                           ;SwSpiApp.c: 123: else if (cPinMode == 0)
 13631  003B08  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 13632  003B0A  A4D8               	btfss	status,2,c
 13633  003B0C  0012               	return	
 13634                           
 13635                           ;SwSpiApp.c: 124: {
 13636                           ;SwSpiApp.c: 125: do { LATCbits.LATC5 = 0; } while(0);
 13637  003B0E  9A8B               	bcf	3979,5,c	;volatile
 13638                           
 13639                           ;SwSpiApp.c: 126: }
 13640                           ;SwSpiApp.c: 127: break;
 13641  003B10  0012               	return	
 13642  003B12                     
 13643                           ;SwSpiApp.c: 130: if(cPinMode == 1)
 13644  003B12  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 13645  003B14  A4D8               	btfss	status,2,c
 13646  003B16  D002               	goto	l687
 13647                           
 13648                           ;SwSpiApp.c: 131: {
 13649                           ;SwSpiApp.c: 132: do { LATAbits.LATA4 = 1; } while(0);
 13650  003B18  8889               	bsf	3977,4,c	;volatile
 13651                           
 13652                           ;SwSpiApp.c: 133: }
 13653  003B1A  0012               	return	
 13654  003B1C                     l687:
 13655                           
 13656                           ;SwSpiApp.c: 134: else if (cPinMode == 0)
 13657  003B1C  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 13658  003B1E  A4D8               	btfss	status,2,c
 13659  003B20  0012               	return	
 13660                           
 13661                           ;SwSpiApp.c: 135: {
 13662                           ;SwSpiApp.c: 136: do { LATAbits.LATA4 = 0; } while(0);
 13663  003B22  9889               	bcf	3977,4,c	;volatile
 13664                           
 13665                           ;SwSpiApp.c: 139: }
 13666                           
 13667                           ;SwSpiApp.c: 137: }
 13668                           ;SwSpiApp.c: 138: break;
 13669  003B24  0012               	return	
 13670  003B26                     l668:
 13671  003B26  5019               	movf	SwSpi_Data_Pin@phrType,w,c
 13672                           
 13673                           ; Switch size 1, requested type "space"
 13674                           ; Number of cases is 3, Range of values is 0 to 2
 13675                           ; switch strategies available:
 13676                           ; Name         Instructions Cycles
 13677                           ; simple_byte           10     6 (average)
 13678                           ;	Chosen strategy is simple_byte
 13679  003B28  0A00               	xorlw	0	; case 0
 13680  003B2A  B4D8               	btfsc	status,2,c
 13681  003B2C  D7DE               	goto	l669
 13682  003B2E  0A01               	xorlw	1	; case 1
 13683  003B30  B4D8               	btfsc	status,2,c
 13684  003B32  D7E5               	goto	l678
 13685  003B34  0A03               	xorlw	3	; case 2
 13686  003B36  A4D8               	btfss	status,2,c
 13687  003B38  0012               	return	
 13688  003B3A  D7EB               	goto	l686
 13689  003B3C                     __end_of_SwSpi_Data_Pin:
 13690                           	opt stack 0
 13691                           tosu	equ	0xFFF
 13692                           tosh	equ	0xFFE
 13693                           tosl	equ	0xFFD
 13694                           pclath	equ	0xFFA
 13695                           tblptru	equ	0xFF8
 13696                           tblptrh	equ	0xFF7
 13697                           tblptrl	equ	0xFF6
 13698                           tablat	equ	0xFF5
 13699                           prodh	equ	0xFF4
 13700                           prodl	equ	0xFF3
 13701                           intcon	equ	0xFF2
 13702                           intcon2	equ	0xFF1
 13703                           postinc0	equ	0xFEE
 13704                           plusw0	equ	0xFEB
 13705                           wreg	equ	0xFE8
 13706                           indf1	equ	0xFE7
 13707                           postdec1	equ	0xFE5
 13708                           fsr1h	equ	0xFE2
 13709                           fsr1l	equ	0xFE1
 13710                           indf2	equ	0xFDF
 13711                           postinc2	equ	0xFDE
 13712                           postdec2	equ	0xFDD
 13713                           plusw2	equ	0xFDB
 13714                           fsr2h	equ	0xFDA
 13715                           fsr2l	equ	0xFD9
 13716                           status	equ	0xFD8
 13717                           
 13718 ;; *************** function _SwSpi_Clk_Pin *****************
 13719 ;; Defined at:
 13720 ;;		line 142 in file "SwSpiApp.c"
 13721 ;; Parameters:    Size  Location     Type
 13722 ;;  phrType         1    wreg     enum E1
 13723 ;;  cPinMode        1   23[COMRAM] unsigned char 
 13724 ;; Auto vars:     Size  Location     Type
 13725 ;;  phrType         1   24[COMRAM] enum E1
 13726 ;; Return value:  Size  Location     Type
 13727 ;;                  1    wreg      void 
 13728 ;; Registers used:
 13729 ;;		wreg, status,2, status,0
 13730 ;; Tracked objects:
 13731 ;;		On entry : 0/0
 13732 ;;		On exit  : 0/0
 13733 ;;		Unchanged: 0/0
 13734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13735 ;;      Params:         1       0       0       0       0       0       0
 13736 ;;      Locals:         1       0       0       0       0       0       0
 13737 ;;      Temps:          0       0       0       0       0       0       0
 13738 ;;      Totals:         2       0       0       0       0       0       0
 13739 ;;Total ram usage:        2 bytes
 13740 ;; Hardware stack levels used:    1
 13741 ;; Hardware stack levels required when called:    4
 13742 ;; This function calls:
 13743 ;;		Nothing
 13744 ;; This function is called by:
 13745 ;;		_SWSPI_DAC_send_bits
 13746 ;;		_SWSPI_Synth_send_bits
 13747 ;;		_SwSpi_Synth_Toggle_Clock
 13748 ;; This function uses a non-reentrant model
 13749 ;;
 13750                           
 13751                           	psect	text77
 13752  003B3C                     __ptext77:
 13753                           	opt stack 0
 13754  003B3C                     _SwSpi_Clk_Pin:
 13755                           	opt stack 21
 13756                           
 13757                           ;incstack = 0
 13758                           ;SwSpi_Clk_Pin@phrType stored from wreg
 13759  003B3C  6E19               	movwf	SwSpi_Clk_Pin@phrType,c
 13760                           
 13761                           ;SwSpiApp.c: 144: switch(phrType)
 13762  003B3E  D01E               	goto	l697
 13763  003B40                     
 13764                           ;SwSpiApp.c: 147: if(cPinMode == 1)
 13765  003B40  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 13766  003B42  A4D8               	btfss	status,2,c
 13767  003B44  D002               	goto	l699
 13768                           
 13769                           ;SwSpiApp.c: 148: {
 13770                           ;SwSpiApp.c: 149: do { LATCbits.LATC3 = 1; } while(0);
 13771  003B46  868B               	bsf	3979,3,c	;volatile
 13772                           
 13773                           ;SwSpiApp.c: 150: }
 13774  003B48  0012               	return	
 13775  003B4A                     l699:
 13776                           
 13777                           ;SwSpiApp.c: 151: else if (cPinMode == 0)
 13778  003B4A  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 13779  003B4C  A4D8               	btfss	status,2,c
 13780  003B4E  0012               	return	
 13781                           
 13782                           ;SwSpiApp.c: 152: {
 13783                           ;SwSpiApp.c: 153: do { LATCbits.LATC3 = 0; } while(0);
 13784  003B50  968B               	bcf	3979,3,c	;volatile
 13785                           
 13786                           ;SwSpiApp.c: 154: }
 13787                           ;SwSpiApp.c: 155: break;
 13788  003B52  0012               	return	
 13789  003B54                     
 13790                           ;SwSpiApp.c: 158: if(cPinMode == 1)
 13791  003B54  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 13792  003B56  A4D8               	btfss	status,2,c
 13793  003B58  D002               	goto	l708
 13794                           
 13795                           ;SwSpiApp.c: 159: {
 13796                           ;SwSpiApp.c: 160: do { LATCbits.LATC4 = 1; } while(0);
 13797  003B5A  888B               	bsf	3979,4,c	;volatile
 13798                           
 13799                           ;SwSpiApp.c: 161: }
 13800  003B5C  0012               	return	
 13801  003B5E                     l708:
 13802                           
 13803                           ;SwSpiApp.c: 162: else if (cPinMode == 0)
 13804  003B5E  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 13805  003B60  A4D8               	btfss	status,2,c
 13806  003B62  0012               	return	
 13807                           
 13808                           ;SwSpiApp.c: 163: {
 13809                           ;SwSpiApp.c: 164: do { LATCbits.LATC4 = 0; } while(0);
 13810  003B64  988B               	bcf	3979,4,c	;volatile
 13811                           
 13812                           ;SwSpiApp.c: 165: }
 13813                           ;SwSpiApp.c: 167: break;
 13814  003B66  0012               	return	
 13815  003B68                     
 13816                           ;SwSpiApp.c: 170: if(cPinMode == 1)
 13817  003B68  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 13818  003B6A  A4D8               	btfss	status,2,c
 13819  003B6C  D002               	goto	l716
 13820                           
 13821                           ;SwSpiApp.c: 171: {
 13822                           ;SwSpiApp.c: 172: do { LATAbits.LATA3 = 1; } while(0);
 13823  003B6E  8689               	bsf	3977,3,c	;volatile
 13824                           
 13825                           ;SwSpiApp.c: 173: }
 13826  003B70  0012               	return	
 13827  003B72                     l716:
 13828                           
 13829                           ;SwSpiApp.c: 174: else if (cPinMode == 0)
 13830  003B72  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 13831  003B74  A4D8               	btfss	status,2,c
 13832  003B76  0012               	return	
 13833                           
 13834                           ;SwSpiApp.c: 175: {
 13835                           ;SwSpiApp.c: 176: do { LATAbits.LATA3 = 0; } while(0);
 13836  003B78  9689               	bcf	3977,3,c	;volatile
 13837                           
 13838                           ;SwSpiApp.c: 179: }
 13839                           
 13840                           ;SwSpiApp.c: 177: }
 13841                           ;SwSpiApp.c: 178: break;
 13842  003B7A  0012               	return	
 13843  003B7C                     l697:
 13844  003B7C  5019               	movf	SwSpi_Clk_Pin@phrType,w,c
 13845                           
 13846                           ; Switch size 1, requested type "space"
 13847                           ; Number of cases is 3, Range of values is 0 to 2
 13848                           ; switch strategies available:
 13849                           ; Name         Instructions Cycles
 13850                           ; simple_byte           10     6 (average)
 13851                           ;	Chosen strategy is simple_byte
 13852  003B7E  0A00               	xorlw	0	; case 0
 13853  003B80  B4D8               	btfsc	status,2,c
 13854  003B82  D7DE               	goto	l698
 13855  003B84  0A01               	xorlw	1	; case 1
 13856  003B86  B4D8               	btfsc	status,2,c
 13857  003B88  D7E5               	goto	l707
 13858  003B8A  0A03               	xorlw	3	; case 2
 13859  003B8C  A4D8               	btfss	status,2,c
 13860  003B8E  0012               	return	
 13861  003B90  D7EB               	goto	l715
 13862  003B92                     __end_of_SwSpi_Clk_Pin:
 13863                           	opt stack 0
 13864                           tosu	equ	0xFFF
 13865                           tosh	equ	0xFFE
 13866                           tosl	equ	0xFFD
 13867                           pclath	equ	0xFFA
 13868                           tblptru	equ	0xFF8
 13869                           tblptrh	equ	0xFF7
 13870                           tblptrl	equ	0xFF6
 13871                           tablat	equ	0xFF5
 13872                           prodh	equ	0xFF4
 13873                           prodl	equ	0xFF3
 13874                           intcon	equ	0xFF2
 13875                           intcon2	equ	0xFF1
 13876                           postinc0	equ	0xFEE
 13877                           plusw0	equ	0xFEB
 13878                           wreg	equ	0xFE8
 13879                           indf1	equ	0xFE7
 13880                           postdec1	equ	0xFE5
 13881                           fsr1h	equ	0xFE2
 13882                           fsr1l	equ	0xFE1
 13883                           indf2	equ	0xFDF
 13884                           postinc2	equ	0xFDE
 13885                           postdec2	equ	0xFDD
 13886                           plusw2	equ	0xFDB
 13887                           fsr2h	equ	0xFDA
 13888                           fsr2l	equ	0xFD9
 13889                           status	equ	0xFD8
 13890                           
 13891 ;; *************** function _ReadIntFromEeprom *****************
 13892 ;; Defined at:
 13893 ;;		line 135 in file "SystemCommon.c"
 13894 ;; Parameters:    Size  Location     Type
 13895 ;;  address         1    wreg     unsigned char 
 13896 ;;  numOfByes       2   81[BANK0 ] int 
 13897 ;; Auto vars:     Size  Location     Type
 13898 ;;  address         1   98[BANK0 ] unsigned char 
 13899 ;;  base            4   88[BANK0 ] unsigned long 
 13900 ;;  idx             1  103[BANK0 ] unsigned char 
 13901 ;;  retVal          4   99[BANK0 ] unsigned long 
 13902 ;; Return value:  Size  Location     Type
 13903 ;;                  4   81[BANK0 ] unsigned long 
 13904 ;; Registers used:
 13905 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13906 ;; Tracked objects:
 13907 ;;		On entry : 0/0
 13908 ;;		On exit  : 0/0
 13909 ;;		Unchanged: 0/0
 13910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13911 ;;      Params:         0       4       0       0       0       0       0
 13912 ;;      Locals:         0      16       0       0       0       0       0
 13913 ;;      Temps:          0       3       0       0       0       0       0
 13914 ;;      Totals:         0      23       0       0       0       0       0
 13915 ;;Total ram usage:       23 bytes
 13916 ;; Hardware stack levels used:    1
 13917 ;; Hardware stack levels required when called:    9
 13918 ;; This function calls:
 13919 ;;		_EepromRead
 13920 ;;		___awtoft
 13921 ;;		___fttol
 13922 ;;		___lmul
 13923 ;;		_pow
 13924 ;; This function is called by:
 13925 ;;		_DacInit
 13926 ;;		_DacReadValue
 13927 ;;		_InitSynth
 13928 ;;		_SynthReadData
 13929 ;; This function uses a non-reentrant model
 13930 ;;
 13931                           
 13932                           	psect	text78
 13933  002088                     __ptext78:
 13934                           	opt stack 0
 13935  002088                     _ReadIntFromEeprom:
 13936                           	opt stack 18
 13937                           
 13938                           ;incstack = 0
 13939                           ;ReadIntFromEeprom@address stored from wreg
 13940  002088  0100               	movlb	0	; () banked
 13941  00208A  6FC2               	movwf	ReadIntFromEeprom@address& (0+255),b
 13942                           
 13943                           ;SystemCommon.c: 137: uint32_t retVal = 0x00;
 13944  00208C  0E00               	movlw	0
 13945  00208E  0100               	movlb	0	; () banked
 13946  002090  6FC3               	movwf	ReadIntFromEeprom@retVal& (0+255),b
 13947  002092  0E00               	movlw	0
 13948  002094  6FC4               	movwf	(ReadIntFromEeprom@retVal+1)& (0+255),b
 13949  002096  0E00               	movlw	0
 13950  002098  6FC5               	movwf	(ReadIntFromEeprom@retVal+2)& (0+255),b
 13951  00209A  0E00               	movlw	0
 13952  00209C  6FC6               	movwf	(ReadIntFromEeprom@retVal+3)& (0+255),b
 13953                           
 13954                           ; BSR set to: 0
 13955                           ;SystemCommon.c: 138: address -= numOfByes;
 13956  00209E  51B1               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 13957  0020A0  5FC2               	subwf	ReadIntFromEeprom@address& (0+255),f,b
 13958                           
 13959                           ; BSR set to: 0
 13960                           ;SystemCommon.c: 140: for(uint8_t idx = 0; idx < numOfByes; idx++)
 13961  0020A2  0E00               	movlw	0
 13962  0020A4  6FC7               	movwf	ReadIntFromEeprom@idx& (0+255),b
 13963  0020A6  D06D               	goto	l1451
 13964  0020A8                     
 13965                           ; BSR set to: 0
 13966                           ;SystemCommon.c: 141: {
 13967                           ;SystemCommon.c: 142: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 13968                           
 13969                           ; BSR set to: 0
 13970  0020A8  51C7               	movf	ReadIntFromEeprom@idx& (0+255),w,b
 13971  0020AA  6FB5               	movwf	??_ReadIntFromEeprom& (0+255),b
 13972  0020AC  6BB6               	clrf	(??_ReadIntFromEeprom+1)& (0+255),b
 13973  0020AE  0E01               	movlw	1
 13974  0020B0  27B5               	addwf	??_ReadIntFromEeprom& (0+255),f,b
 13975  0020B2  0E00               	movlw	0
 13976  0020B4  23B6               	addwfc	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13977  0020B6  1FB5               	comf	??_ReadIntFromEeprom& (0+255),f,b
 13978  0020B8  1FB6               	comf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13979  0020BA  4BB5               	infsnz	??_ReadIntFromEeprom& (0+255),f,b
 13980  0020BC  2BB6               	incf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13981  0020BE  51B1               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 13982  0020C0  27B5               	addwf	??_ReadIntFromEeprom& (0+255),f,b
 13983  0020C2  51B2               	movf	(ReadIntFromEeprom@numOfByes+1)& (0+255),w,b
 13984  0020C4  23B6               	addwfc	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13985  0020C6  90D8               	bcf	status,0,c
 13986  0020C8  37B5               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 13987  0020CA  37B6               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13988  0020CC  90D8               	bcf	status,0,c
 13989  0020CE  37B5               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 13990  0020D0  37B6               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13991  0020D2  90D8               	bcf	status,0,c
 13992  0020D4  37B5               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 13993  0020D6  37B6               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13994  0020D8  C0B5  F020         	movff	??_ReadIntFromEeprom,___awtoft@c
 13995  0020DC  C0B6  F021         	movff	??_ReadIntFromEeprom+1,___awtoft@c+1
 13996  0020E0  ECA1  F01F         	call	___awtoft	;wreg free
 13997  0020E4  C020  F0BC         	movff	?___awtoft,_ReadIntFromEeprom$3592
 13998  0020E8  C021  F0BD         	movff	?___awtoft+1,_ReadIntFromEeprom$3592+1
 13999  0020EC  C022  F0BE         	movff	?___awtoft+2,_ReadIntFromEeprom$3592+2
 14000                           
 14001                           ;SystemCommon.c: 141: {
 14002                           ;SystemCommon.c: 142: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 14003  0020F0  C0BC  F0A3         	movff	_ReadIntFromEeprom$3592,pow@y
 14004  0020F4  C0BD  F0A4         	movff	_ReadIntFromEeprom$3592+1,pow@y+1
 14005  0020F8  C0BE  F0A5         	movff	_ReadIntFromEeprom$3592+2,pow@y+2
 14006  0020FC  0E00               	movlw	0
 14007  0020FE  0100               	movlb	0	; () banked
 14008  002100  6FA0               	movwf	pow@x& (0+255),b
 14009  002102  0E00               	movlw	0
 14010  002104  6FA1               	movwf	(pow@x+1)& (0+255),b
 14011  002106  0E40               	movlw	64
 14012  002108  6FA2               	movwf	(pow@x+2)& (0+255),b
 14013  00210A  EC31  F00E         	call	_pow	;wreg free
 14014  00210E  C0A0  F0BF         	movff	?_pow,_ReadIntFromEeprom$3593
 14015  002112  C0A1  F0C0         	movff	?_pow+1,_ReadIntFromEeprom$3593+1
 14016  002116  C0A2  F0C1         	movff	?_pow+2,_ReadIntFromEeprom$3593+2
 14017                           
 14018                           ;SystemCommon.c: 141: {
 14019                           ;SystemCommon.c: 142: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 14020  00211A  C0BF  F078         	movff	_ReadIntFromEeprom$3593,___fttol@f1
 14021  00211E  C0C0  F079         	movff	_ReadIntFromEeprom$3593+1,___fttol@f1+1
 14022  002122  C0C1  F07A         	movff	_ReadIntFromEeprom$3593+2,___fttol@f1+2
 14023  002126  EC59  F012         	call	___fttol	;wreg free
 14024  00212A  C078  F0B8         	movff	?___fttol,ReadIntFromEeprom@base
 14025  00212E  C079  F0B9         	movff	?___fttol+1,ReadIntFromEeprom@base+1
 14026  002132  C07A  F0BA         	movff	?___fttol+2,ReadIntFromEeprom@base+2
 14027  002136  C07B  F0BB         	movff	?___fttol+3,ReadIntFromEeprom@base+3
 14028                           
 14029                           ;SystemCommon.c: 143: retVal = retVal | EepromRead(address + idx) * base;
 14030  00213A  0100               	movlb	0	; () banked
 14031  00213C  51C2               	movf	ReadIntFromEeprom@address& (0+255),w,b
 14032  00213E  25C7               	addwf	ReadIntFromEeprom@idx& (0+255),w,b
 14033  002140  EC99  F022         	call	_EepromRead
 14034  002144  0100               	movlb	0	; () banked
 14035  002146  6FB5               	movwf	??_ReadIntFromEeprom& (0+255),b
 14036  002148  51B5               	movf	??_ReadIntFromEeprom& (0+255),w,b
 14037  00214A  6E1A               	movwf	___lmul@multiplier,c
 14038  00214C  6A1B               	clrf	___lmul@multiplier+1,c
 14039  00214E  6A1C               	clrf	___lmul@multiplier+2,c
 14040  002150  6A1D               	clrf	___lmul@multiplier+3,c
 14041  002152  C0B8  F01E         	movff	ReadIntFromEeprom@base,___lmul@multiplicand
 14042  002156  C0B9  F01F         	movff	ReadIntFromEeprom@base+1,___lmul@multiplicand+1
 14043  00215A  C0BA  F020         	movff	ReadIntFromEeprom@base+2,___lmul@multiplicand+2
 14044  00215E  C0BB  F021         	movff	ReadIntFromEeprom@base+3,___lmul@multiplicand+3
 14045  002162  ECC9  F01D         	call	___lmul	;wreg free
 14046  002166  0100               	movlb	0	; () banked
 14047  002168  51C3               	movf	ReadIntFromEeprom@retVal& (0+255),w,b
 14048  00216A  101A               	iorwf	?___lmul,w,c
 14049  00216C  6FC3               	movwf	ReadIntFromEeprom@retVal& (0+255),b
 14050  00216E  51C4               	movf	(ReadIntFromEeprom@retVal+1)& (0+255),w,b
 14051  002170  101B               	iorwf	?___lmul+1,w,c
 14052  002172  6FC4               	movwf	(ReadIntFromEeprom@retVal+1)& (0+255),b
 14053  002174  51C5               	movf	(ReadIntFromEeprom@retVal+2)& (0+255),w,b
 14054  002176  101C               	iorwf	?___lmul+2,w,c
 14055  002178  6FC5               	movwf	(ReadIntFromEeprom@retVal+2)& (0+255),b
 14056  00217A  51C6               	movf	(ReadIntFromEeprom@retVal+3)& (0+255),w,b
 14057  00217C  101D               	iorwf	?___lmul+3,w,c
 14058  00217E  6FC6               	movwf	(ReadIntFromEeprom@retVal+3)& (0+255),b
 14059                           
 14060                           ; BSR set to: 0
 14061  002180  2BC7               	incf	ReadIntFromEeprom@idx& (0+255),f,b
 14062  002182                     l1451:
 14063                           
 14064                           ; BSR set to: 0
 14065                           
 14066                           ; BSR set to: 0
 14067  002182  51C7               	movf	ReadIntFromEeprom@idx& (0+255),w,b
 14068  002184  6FB5               	movwf	??_ReadIntFromEeprom& (0+255),b
 14069  002186  6BB6               	clrf	(??_ReadIntFromEeprom+1)& (0+255),b
 14070  002188  51B1               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 14071  00218A  5DB5               	subwf	??_ReadIntFromEeprom& (0+255),w,b
 14072  00218C  51B6               	movf	(??_ReadIntFromEeprom+1)& (0+255),w,b
 14073  00218E  0A80               	xorlw	128
 14074  002190  6FB7               	movwf	(??_ReadIntFromEeprom+2)& (0+255),b
 14075  002192  51B2               	movf	(ReadIntFromEeprom@numOfByes+1)& (0+255),w,b
 14076  002194  0A80               	xorlw	128
 14077  002196  59B7               	subwfb	(??_ReadIntFromEeprom+2)& (0+255),w,b
 14078  002198  A0D8               	btfss	status,0,c
 14079  00219A  D786               	goto	l1452
 14080                           
 14081                           ; BSR set to: 0
 14082                           ;SystemCommon.c: 144: }
 14083                           ;SystemCommon.c: 145: return retVal;
 14084  00219C  C0C3  F0B1         	movff	ReadIntFromEeprom@retVal,?_ReadIntFromEeprom
 14085  0021A0  C0C4  F0B2         	movff	ReadIntFromEeprom@retVal+1,?_ReadIntFromEeprom+1
 14086  0021A4  C0C5  F0B3         	movff	ReadIntFromEeprom@retVal+2,?_ReadIntFromEeprom+2
 14087  0021A8  C0C6  F0B4         	movff	ReadIntFromEeprom@retVal+3,?_ReadIntFromEeprom+3
 14088                           
 14089                           ; BSR set to: 0
 14090  0021AC  0012               	return		;funcret
 14091  0021AE                     __end_of_ReadIntFromEeprom:
 14092                           	opt stack 0
 14093                           tosu	equ	0xFFF
 14094                           tosh	equ	0xFFE
 14095                           tosl	equ	0xFFD
 14096                           pclath	equ	0xFFA
 14097                           tblptru	equ	0xFF8
 14098                           tblptrh	equ	0xFF7
 14099                           tblptrl	equ	0xFF6
 14100                           tablat	equ	0xFF5
 14101                           prodh	equ	0xFF4
 14102                           prodl	equ	0xFF3
 14103                           intcon	equ	0xFF2
 14104                           intcon2	equ	0xFF1
 14105                           postinc0	equ	0xFEE
 14106                           plusw0	equ	0xFEB
 14107                           wreg	equ	0xFE8
 14108                           indf1	equ	0xFE7
 14109                           postdec1	equ	0xFE5
 14110                           fsr1h	equ	0xFE2
 14111                           fsr1l	equ	0xFE1
 14112                           indf2	equ	0xFDF
 14113                           postinc2	equ	0xFDE
 14114                           postdec2	equ	0xFDD
 14115                           plusw2	equ	0xFDB
 14116                           fsr2h	equ	0xFDA
 14117                           fsr2l	equ	0xFD9
 14118                           status	equ	0xFD8
 14119                           
 14120 ;; *************** function ___lmul *****************
 14121 ;; Defined at:
 14122 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 14123 ;; Parameters:    Size  Location     Type
 14124 ;;  multiplier      4   25[COMRAM] unsigned long 
 14125 ;;  multiplicand    4   29[COMRAM] unsigned long 
 14126 ;; Auto vars:     Size  Location     Type
 14127 ;;  product         4   33[COMRAM] unsigned long 
 14128 ;; Return value:  Size  Location     Type
 14129 ;;                  4   25[COMRAM] unsigned long 
 14130 ;; Registers used:
 14131 ;;		wreg, status,2, status,0
 14132 ;; Tracked objects:
 14133 ;;		On entry : 0/0
 14134 ;;		On exit  : 0/0
 14135 ;;		Unchanged: 0/0
 14136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14137 ;;      Params:         8       0       0       0       0       0       0
 14138 ;;      Locals:         4       0       0       0       0       0       0
 14139 ;;      Temps:          0       0       0       0       0       0       0
 14140 ;;      Totals:        12       0       0       0       0       0       0
 14141 ;;Total ram usage:       12 bytes
 14142 ;; Hardware stack levels used:    1
 14143 ;; Hardware stack levels required when called:    4
 14144 ;; This function calls:
 14145 ;;		Nothing
 14146 ;; This function is called by:
 14147 ;;		_ReadIntFromEeprom
 14148 ;;		_strtol
 14149 ;; This function uses a non-reentrant model
 14150 ;;
 14151                           
 14152                           	psect	text79
 14153  003B92                     __ptext79:
 14154                           	opt stack 0
 14155  003B92                     ___lmul:
 14156                           	opt stack 21
 14157                           
 14158                           ; BSR set to: 0
 14159                           ;incstack = 0
 14160  003B92  0E00               	movlw	0
 14161  003B94  6E22               	movwf	___lmul@product,c
 14162  003B96  0E00               	movlw	0
 14163  003B98  6E23               	movwf	___lmul@product+1,c
 14164  003B9A  0E00               	movlw	0
 14165  003B9C  6E24               	movwf	___lmul@product+2,c
 14166  003B9E  0E00               	movlw	0
 14167  003BA0  6E25               	movwf	___lmul@product+3,c
 14168  003BA2  A01A               	btfss	___lmul@multiplier,0,c
 14169  003BA4  D008               	goto	l1620
 14170  003BA6  501E               	movf	___lmul@multiplicand,w,c
 14171  003BA8  2622               	addwf	___lmul@product,f,c
 14172  003BAA  501F               	movf	___lmul@multiplicand+1,w,c
 14173  003BAC  2223               	addwfc	___lmul@product+1,f,c
 14174  003BAE  5020               	movf	___lmul@multiplicand+2,w,c
 14175  003BB0  2224               	addwfc	___lmul@product+2,f,c
 14176  003BB2  5021               	movf	___lmul@multiplicand+3,w,c
 14177  003BB4  2225               	addwfc	___lmul@product+3,f,c
 14178  003BB6                     l1620:
 14179  003BB6  90D8               	bcf	status,0,c
 14180  003BB8  361E               	rlcf	___lmul@multiplicand,f,c
 14181  003BBA  361F               	rlcf	___lmul@multiplicand+1,f,c
 14182  003BBC  3620               	rlcf	___lmul@multiplicand+2,f,c
 14183  003BBE  3621               	rlcf	___lmul@multiplicand+3,f,c
 14184  003BC0  90D8               	bcf	status,0,c
 14185  003BC2  321D               	rrcf	___lmul@multiplier+3,f,c
 14186  003BC4  321C               	rrcf	___lmul@multiplier+2,f,c
 14187  003BC6  321B               	rrcf	___lmul@multiplier+1,f,c
 14188  003BC8  321A               	rrcf	___lmul@multiplier,f,c
 14189  003BCA  501A               	movf	___lmul@multiplier,w,c
 14190  003BCC  101B               	iorwf	___lmul@multiplier+1,w,c
 14191  003BCE  101C               	iorwf	___lmul@multiplier+2,w,c
 14192  003BD0  101D               	iorwf	___lmul@multiplier+3,w,c
 14193  003BD2  A4D8               	btfss	status,2,c
 14194  003BD4  D7E6               	goto	l1619
 14195  003BD6  C022  F01A         	movff	___lmul@product,?___lmul
 14196  003BDA  C023  F01B         	movff	___lmul@product+1,?___lmul+1
 14197  003BDE  C024  F01C         	movff	___lmul@product+2,?___lmul+2
 14198  003BE2  C025  F01D         	movff	___lmul@product+3,?___lmul+3
 14199  003BE6  0012               	return		;funcret
 14200  003BE8                     __end_of___lmul:
 14201                           	opt stack 0
 14202                           tosu	equ	0xFFF
 14203                           tosh	equ	0xFFE
 14204                           tosl	equ	0xFFD
 14205                           pclath	equ	0xFFA
 14206                           tblptru	equ	0xFF8
 14207                           tblptrh	equ	0xFF7
 14208                           tblptrl	equ	0xFF6
 14209                           tablat	equ	0xFF5
 14210                           prodh	equ	0xFF4
 14211                           prodl	equ	0xFF3
 14212                           intcon	equ	0xFF2
 14213                           intcon2	equ	0xFF1
 14214                           postinc0	equ	0xFEE
 14215                           plusw0	equ	0xFEB
 14216                           wreg	equ	0xFE8
 14217                           indf1	equ	0xFE7
 14218                           postdec1	equ	0xFE5
 14219                           fsr1h	equ	0xFE2
 14220                           fsr1l	equ	0xFE1
 14221                           indf2	equ	0xFDF
 14222                           postinc2	equ	0xFDE
 14223                           postdec2	equ	0xFDD
 14224                           plusw2	equ	0xFDB
 14225                           fsr2h	equ	0xFDA
 14226                           fsr2l	equ	0xFD9
 14227                           status	equ	0xFD8
 14228                           
 14229 ;; *************** function _EepromRead *****************
 14230 ;; Defined at:
 14231 ;;		line 220 in file "FlashApp.c"
 14232 ;; Parameters:    Size  Location     Type
 14233 ;;  address         1    wreg     unsigned char 
 14234 ;; Auto vars:     Size  Location     Type
 14235 ;;  address         1   24[COMRAM] unsigned char 
 14236 ;; Return value:  Size  Location     Type
 14237 ;;                  1    wreg      unsigned char 
 14238 ;; Registers used:
 14239 ;;		wreg, status,2, cstack
 14240 ;; Tracked objects:
 14241 ;;		On entry : 0/0
 14242 ;;		On exit  : 0/0
 14243 ;;		Unchanged: 0/0
 14244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14245 ;;      Params:         0       0       0       0       0       0       0
 14246 ;;      Locals:         1       0       0       0       0       0       0
 14247 ;;      Temps:          0       0       0       0       0       0       0
 14248 ;;      Totals:         1       0       0       0       0       0       0
 14249 ;;Total ram usage:        1 bytes
 14250 ;; Hardware stack levels used:    1
 14251 ;; Hardware stack levels required when called:    5
 14252 ;; This function calls:
 14253 ;;		_DATAEE_ReadByte
 14254 ;; This function is called by:
 14255 ;;		_ReadIntFromEeprom
 14256 ;; This function uses a non-reentrant model
 14257 ;;
 14258                           
 14259                           	psect	text80
 14260  004532                     __ptext80:
 14261                           	opt stack 0
 14262  004532                     _EepromRead:
 14263                           	opt stack 21
 14264                           
 14265                           ;incstack = 0
 14266                           ;EepromRead@address stored from wreg
 14267  004532  6E19               	movwf	EepromRead@address,c
 14268                           
 14269                           ;FlashApp.c: 222: return DATAEE_ReadByte(address);
 14270  004534  5019               	movf	EepromRead@address,w,c
 14271  004536  EC31  F022         	call	_DATAEE_ReadByte
 14272  00453A  0012               	return	
 14273  00453C                     __end_of_EepromRead:
 14274                           	opt stack 0
 14275                           tosu	equ	0xFFF
 14276                           tosh	equ	0xFFE
 14277                           tosl	equ	0xFFD
 14278                           pclath	equ	0xFFA
 14279                           tblptru	equ	0xFF8
 14280                           tblptrh	equ	0xFF7
 14281                           tblptrl	equ	0xFF6
 14282                           tablat	equ	0xFF5
 14283                           prodh	equ	0xFF4
 14284                           prodl	equ	0xFF3
 14285                           intcon	equ	0xFF2
 14286                           intcon2	equ	0xFF1
 14287                           postinc0	equ	0xFEE
 14288                           plusw0	equ	0xFEB
 14289                           wreg	equ	0xFE8
 14290                           indf1	equ	0xFE7
 14291                           postdec1	equ	0xFE5
 14292                           fsr1h	equ	0xFE2
 14293                           fsr1l	equ	0xFE1
 14294                           indf2	equ	0xFDF
 14295                           postinc2	equ	0xFDE
 14296                           postdec2	equ	0xFDD
 14297                           plusw2	equ	0xFDB
 14298                           fsr2h	equ	0xFDA
 14299                           fsr2l	equ	0xFD9
 14300                           status	equ	0xFD8
 14301                           
 14302 ;; *************** function _DATAEE_ReadByte *****************
 14303 ;; Defined at:
 14304 ;;		line 194 in file "mcc_generated_files/memory.c"
 14305 ;; Parameters:    Size  Location     Type
 14306 ;;  bAdd            1    wreg     unsigned char 
 14307 ;; Auto vars:     Size  Location     Type
 14308 ;;  bAdd            1   23[COMRAM] unsigned char 
 14309 ;; Return value:  Size  Location     Type
 14310 ;;                  1    wreg      unsigned char 
 14311 ;; Registers used:
 14312 ;;		wreg, status,2
 14313 ;; Tracked objects:
 14314 ;;		On entry : 0/0
 14315 ;;		On exit  : 0/0
 14316 ;;		Unchanged: 0/0
 14317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14318 ;;      Params:         0       0       0       0       0       0       0
 14319 ;;      Locals:         1       0       0       0       0       0       0
 14320 ;;      Temps:          0       0       0       0       0       0       0
 14321 ;;      Totals:         1       0       0       0       0       0       0
 14322 ;;Total ram usage:        1 bytes
 14323 ;; Hardware stack levels used:    1
 14324 ;; Hardware stack levels required when called:    4
 14325 ;; This function calls:
 14326 ;;		Nothing
 14327 ;; This function is called by:
 14328 ;;		_EepromRead
 14329 ;; This function uses a non-reentrant model
 14330 ;;
 14331                           
 14332                           	psect	text81
 14333  004462                     __ptext81:
 14334                           	opt stack 0
 14335  004462                     _DATAEE_ReadByte:
 14336                           	opt stack 21
 14337                           
 14338                           ;incstack = 0
 14339                           ;DATAEE_ReadByte@bAdd stored from wreg
 14340  004462  6E18               	movwf	DATAEE_ReadByte@bAdd,c
 14341                           
 14342                           ;memory.c: 197: EEADR = (bAdd & 0xFF);
 14343  004464  C018  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
 14344                           
 14345                           ;memory.c: 198: EECON1bits.CFGS = 0;
 14346  004468  9CA6               	bcf	4006,6,c	;volsfr
 14347                           
 14348                           ;memory.c: 199: EECON1bits.EEPGD = 0;
 14349  00446A  9EA6               	bcf	4006,7,c	;volsfr
 14350                           
 14351                           ;memory.c: 200: EECON1bits.RD = 1;
 14352  00446C  80A6               	bsf	4006,0,c	;volsfr
 14353                           
 14354                           ;memory.c: 201: __nop();
 14355  00446E  F000               	nop	
 14356                           
 14357                           ;memory.c: 202: __nop();
 14358  004470  F000               	nop	
 14359                           
 14360                           ;memory.c: 204: return (EEDATA);
 14361  004472  50A8               	movf	4008,w,c	;volatile
 14362  004474  0012               	return	
 14363  004476                     __end_of_DATAEE_ReadByte:
 14364                           	opt stack 0
 14365                           tosu	equ	0xFFF
 14366                           tosh	equ	0xFFE
 14367                           tosl	equ	0xFFD
 14368                           pclath	equ	0xFFA
 14369                           tblptru	equ	0xFF8
 14370                           tblptrh	equ	0xFF7
 14371                           tblptrl	equ	0xFF6
 14372                           tablat	equ	0xFF5
 14373                           prodh	equ	0xFF4
 14374                           prodl	equ	0xFF3
 14375                           intcon	equ	0xFF2
 14376                           intcon2	equ	0xFF1
 14377                           postinc0	equ	0xFEE
 14378                           plusw0	equ	0xFEB
 14379                           wreg	equ	0xFE8
 14380                           indf1	equ	0xFE7
 14381                           postdec1	equ	0xFE5
 14382                           fsr1h	equ	0xFE2
 14383                           fsr1l	equ	0xFE1
 14384                           indf2	equ	0xFDF
 14385                           postinc2	equ	0xFDE
 14386                           postdec2	equ	0xFDD
 14387                           plusw2	equ	0xFDB
 14388                           fsr2h	equ	0xFDA
 14389                           fsr2l	equ	0xFD9
 14390                           status	equ	0xFD8
 14391                           
 14392 ;; *************** function _ClearMcuRunTime *****************
 14393 ;; Defined at:
 14394 ;;		line 63 in file "SystemStatus.c"
 14395 ;; Parameters:    Size  Location     Type
 14396 ;;		None
 14397 ;; Auto vars:     Size  Location     Type
 14398 ;;		None
 14399 ;; Return value:  Size  Location     Type
 14400 ;;                  1    wreg      void 
 14401 ;; Registers used:
 14402 ;;		wreg, status,2
 14403 ;; Tracked objects:
 14404 ;;		On entry : 0/0
 14405 ;;		On exit  : 0/0
 14406 ;;		Unchanged: 0/0
 14407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14408 ;;      Params:         0       0       0       0       0       0       0
 14409 ;;      Locals:         0       0       0       0       0       0       0
 14410 ;;      Temps:          0       0       0       0       0       0       0
 14411 ;;      Totals:         0       0       0       0       0       0       0
 14412 ;;Total ram usage:        0 bytes
 14413 ;; Hardware stack levels used:    1
 14414 ;; Hardware stack levels required when called:    4
 14415 ;; This function calls:
 14416 ;;		Nothing
 14417 ;; This function is called by:
 14418 ;;		_InitSystemApplicationManagers
 14419 ;; This function uses a non-reentrant model
 14420 ;;
 14421                           
 14422                           	psect	text82
 14423  004476                     __ptext82:
 14424                           	opt stack 0
 14425  004476                     _ClearMcuRunTime:
 14426                           	opt stack 25
 14427                           
 14428                           ;SystemStatus.c: 65: mcuRunTimeIn5SecTicks = 0;
 14429                           
 14430                           ;incstack = 0
 14431  004476  0E00               	movlw	0
 14432  004478  0101               	movlb	1	; () banked
 14433  00447A  6F28               	movwf	_mcuRunTimeIn5SecTicks& (0+255),b
 14434  00447C  0E00               	movlw	0
 14435  00447E  6F29               	movwf	(_mcuRunTimeIn5SecTicks+1)& (0+255),b
 14436  004480  0E00               	movlw	0
 14437  004482  6F2A               	movwf	(_mcuRunTimeIn5SecTicks+2)& (0+255),b
 14438  004484  0E00               	movlw	0
 14439  004486  6F2B               	movwf	(_mcuRunTimeIn5SecTicks+3)& (0+255),b
 14440                           
 14441                           ; BSR set to: 1
 14442  004488  0012               	return		;funcret
 14443  00448A                     __end_of_ClearMcuRunTime:
 14444                           	opt stack 0
 14445                           tosu	equ	0xFFF
 14446                           tosh	equ	0xFFE
 14447                           tosl	equ	0xFFD
 14448                           pclath	equ	0xFFA
 14449                           tblptru	equ	0xFF8
 14450                           tblptrh	equ	0xFF7
 14451                           tblptrl	equ	0xFF6
 14452                           tablat	equ	0xFF5
 14453                           prodh	equ	0xFF4
 14454                           prodl	equ	0xFF3
 14455                           intcon	equ	0xFF2
 14456                           intcon2	equ	0xFF1
 14457                           postinc0	equ	0xFEE
 14458                           plusw0	equ	0xFEB
 14459                           wreg	equ	0xFE8
 14460                           indf1	equ	0xFE7
 14461                           postdec1	equ	0xFE5
 14462                           fsr1h	equ	0xFE2
 14463                           fsr1l	equ	0xFE1
 14464                           indf2	equ	0xFDF
 14465                           postinc2	equ	0xFDE
 14466                           postdec2	equ	0xFDD
 14467                           plusw2	equ	0xFDB
 14468                           fsr2h	equ	0xFDA
 14469                           fsr2l	equ	0xFD9
 14470                           status	equ	0xFD8
 14471                           
 14472 ;; *************** function _CheckFlashPrecentage *****************
 14473 ;; Defined at:
 14474 ;;		line 210 in file "FlashApp.c"
 14475 ;; Parameters:    Size  Location     Type
 14476 ;;		None
 14477 ;; Auto vars:     Size  Location     Type
 14478 ;;  precentage      3   28[BANK0 ] void 
 14479 ;; Return value:  Size  Location     Type
 14480 ;;                  1    wreg      unsigned char 
 14481 ;; Registers used:
 14482 ;;		wreg, status,2, status,0, cstack
 14483 ;; Tracked objects:
 14484 ;;		On entry : 0/0
 14485 ;;		On exit  : 0/0
 14486 ;;		Unchanged: 0/0
 14487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14488 ;;      Params:         0       0       0       0       0       0       0
 14489 ;;      Locals:         0       3       0       0       0       0       0
 14490 ;;      Temps:          0       4       0       0       0       0       0
 14491 ;;      Totals:         0       7       0       0       0       0       0
 14492 ;;Total ram usage:        7 bytes
 14493 ;; Hardware stack levels used:    1
 14494 ;; Hardware stack levels required when called:    6
 14495 ;; This function calls:
 14496 ;;		___ftdiv
 14497 ;;		___ftge
 14498 ;;		___ftmul
 14499 ;;		___lltoft
 14500 ;; This function is called by:
 14501 ;;		_main
 14502 ;; This function uses a non-reentrant model
 14503 ;;
 14504                           
 14505                           	psect	text83
 14506  002F24                     __ptext83:
 14507                           	opt stack 0
 14508  002F24                     _CheckFlashPrecentage:
 14509                           	opt stack 24
 14510                           
 14511                           ;FlashApp.c: 212: double precentage = ((double)(0x7FF0 - writeAddress) / 0x7FF0) * 100;
 14512                           
 14513                           ; BSR set to: 1
 14514                           ;incstack = 0
 14515  002F24  0EE0               	movlw	224
 14516  002F26  6E2C               	movwf	___ftdiv@f2,c
 14517  002F28  0EFF               	movlw	255
 14518  002F2A  6E2D               	movwf	___ftdiv@f2+1,c
 14519  002F2C  0E46               	movlw	70
 14520  002F2E  6E2E               	movwf	___ftdiv@f2+2,c
 14521  002F30  C040  F078         	movff	_writeAddress,??_CheckFlashPrecentage
 14522  002F34  C041  F079         	movff	_writeAddress+1,??_CheckFlashPrecentage+1
 14523  002F38  C042  F07A         	movff	_writeAddress+2,??_CheckFlashPrecentage+2
 14524  002F3C  C043  F07B         	movff	_writeAddress+3,??_CheckFlashPrecentage+3
 14525  002F40  0100               	movlb	0	; () banked
 14526  002F42  1F78               	comf	??_CheckFlashPrecentage& (0+255),f,b
 14527  002F44  1F79               	comf	(??_CheckFlashPrecentage+1)& (0+255),f,b
 14528  002F46  1F7A               	comf	(??_CheckFlashPrecentage+2)& (0+255),f,b
 14529  002F48  1F7B               	comf	(??_CheckFlashPrecentage+3)& (0+255),f,b
 14530  002F4A  2B78               	incf	??_CheckFlashPrecentage& (0+255),f,b
 14531  002F4C  0E00               	movlw	0
 14532  002F4E  2379               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),f,b
 14533  002F50  237A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),f,b
 14534  002F52  237B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),f,b
 14535  002F54  0EF0               	movlw	240
 14536  002F56  2578               	addwf	??_CheckFlashPrecentage& (0+255),w,b
 14537  002F58  6E20               	movwf	___lltoft@c,c
 14538  002F5A  0E7F               	movlw	127
 14539  002F5C  2179               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),w,b
 14540  002F5E  6E21               	movwf	___lltoft@c+1,c
 14541  002F60  0E00               	movlw	0
 14542  002F62  217A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),w,b
 14543  002F64  6E22               	movwf	___lltoft@c+2,c
 14544  002F66  0E00               	movlw	0
 14545  002F68  217B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),w,b
 14546  002F6A  6E23               	movwf	___lltoft@c+3,c
 14547  002F6C  ECED  F01C         	call	___lltoft	;wreg free
 14548  002F70  C020  F029         	movff	?___lltoft,___ftdiv@f1
 14549  002F74  C021  F02A         	movff	?___lltoft+1,___ftdiv@f1+1
 14550  002F78  C022  F02B         	movff	?___lltoft+2,___ftdiv@f1+2
 14551  002F7C  ECC4  F013         	call	___ftdiv	;wreg free
 14552  002F80  C029  F069         	movff	?___ftdiv,___ftmul@f1
 14553  002F84  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 14554  002F88  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 14555  002F8C  0E00               	movlw	0
 14556  002F8E  0100               	movlb	0	; () banked
 14557  002F90  6F6C               	movwf	___ftmul@f2& (0+255),b
 14558  002F92  0EC8               	movlw	200
 14559  002F94  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 14560  002F96  0E42               	movlw	66
 14561  002F98  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 14562  002F9A  ECD5  F012         	call	___ftmul	;wreg free
 14563  002F9E  C069  F07C         	movff	?___ftmul,CheckFlashPrecentage@precentage
 14564  002FA2  C06A  F07D         	movff	?___ftmul+1,CheckFlashPrecentage@precentage+1
 14565  002FA6  C06B  F07E         	movff	?___ftmul+2,CheckFlashPrecentage@precentage+2
 14566                           
 14567                           ;FlashApp.c: 213: return (precentage > 75) ? 1 : 0;
 14568  002FAA  0E00               	movlw	0
 14569  002FAC  6E18               	movwf	___ftge@ff1,c
 14570  002FAE  0E96               	movlw	150
 14571  002FB0  6E19               	movwf	___ftge@ff1+1,c
 14572  002FB2  0E42               	movlw	66
 14573  002FB4  6E1A               	movwf	___ftge@ff1+2,c
 14574  002FB6  C07C  F01B         	movff	CheckFlashPrecentage@precentage,___ftge@ff2
 14575  002FBA  C07D  F01C         	movff	CheckFlashPrecentage@precentage+1,___ftge@ff2+1
 14576  002FBE  C07E  F01D         	movff	CheckFlashPrecentage@precentage+2,___ftge@ff2+2
 14577  002FC2  ECD1  F019         	call	___ftge	;wreg free
 14578  002FC6  B0D8               	btfsc	status,0,c
 14579  002FC8  D002               	goto	u9460
 14580  002FCA  0E01               	movlw	1
 14581  002FCC  0012               	return	
 14582  002FCE                     u9460:
 14583  002FCE  0E00               	movlw	0
 14584  002FD0  0012               	return	
 14585  002FD2                     __end_of_CheckFlashPrecentage:
 14586                           	opt stack 0
 14587                           tosu	equ	0xFFF
 14588                           tosh	equ	0xFFE
 14589                           tosl	equ	0xFFD
 14590                           pclath	equ	0xFFA
 14591                           tblptru	equ	0xFF8
 14592                           tblptrh	equ	0xFF7
 14593                           tblptrl	equ	0xFF6
 14594                           tablat	equ	0xFF5
 14595                           prodh	equ	0xFF4
 14596                           prodl	equ	0xFF3
 14597                           intcon	equ	0xFF2
 14598                           intcon2	equ	0xFF1
 14599                           postinc0	equ	0xFEE
 14600                           plusw0	equ	0xFEB
 14601                           wreg	equ	0xFE8
 14602                           indf1	equ	0xFE7
 14603                           postdec1	equ	0xFE5
 14604                           fsr1h	equ	0xFE2
 14605                           fsr1l	equ	0xFE1
 14606                           indf2	equ	0xFDF
 14607                           postinc2	equ	0xFDE
 14608                           postdec2	equ	0xFDD
 14609                           plusw2	equ	0xFDB
 14610                           fsr2h	equ	0xFDA
 14611                           fsr2l	equ	0xFD9
 14612                           status	equ	0xFD8
 14613                           
 14614 ;; *************** function _BlinkOkLeds *****************
 14615 ;; Defined at:
 14616 ;;		line 24 in file "LedsApp.c"
 14617 ;; Parameters:    Size  Location     Type
 14618 ;;  state           1    wreg     enum E7593
 14619 ;; Auto vars:     Size  Location     Type
 14620 ;;  state           1   26[COMRAM] enum E7593
 14621 ;;  idx             2   27[COMRAM] int 
 14622 ;; Return value:  Size  Location     Type
 14623 ;;                  1    wreg      void 
 14624 ;; Registers used:
 14625 ;;		wreg, status,2, status,0
 14626 ;; Tracked objects:
 14627 ;;		On entry : 0/0
 14628 ;;		On exit  : 0/0
 14629 ;;		Unchanged: 0/0
 14630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14631 ;;      Params:         0       0       0       0       0       0       0
 14632 ;;      Locals:         3       0       0       0       0       0       0
 14633 ;;      Temps:          3       0       0       0       0       0       0
 14634 ;;      Totals:         6       0       0       0       0       0       0
 14635 ;;Total ram usage:        6 bytes
 14636 ;; Hardware stack levels used:    1
 14637 ;; Hardware stack levels required when called:    4
 14638 ;; This function calls:
 14639 ;;		Nothing
 14640 ;; This function is called by:
 14641 ;;		_main
 14642 ;; This function uses a non-reentrant model
 14643 ;;
 14644                           
 14645                           	psect	text84
 14646  003920                     __ptext84:
 14647                           	opt stack 0
 14648  003920                     _BlinkOkLeds:
 14649                           	opt stack 26
 14650                           
 14651                           ;incstack = 0
 14652                           ;BlinkOkLeds@state stored from wreg
 14653  003920  6E1B               	movwf	BlinkOkLeds@state,c
 14654                           
 14655                           ;LedsApp.c: 26: for(int idx = 0; idx < state; idx++)
 14656  003922  0E00               	movlw	0
 14657  003924  6E1D               	movwf	BlinkOkLeds@idx+1,c
 14658  003926  0E00               	movlw	0
 14659  003928  6E1C               	movwf	BlinkOkLeds@idx,c
 14660  00392A                     l6682:
 14661  00392A  501B               	movf	BlinkOkLeds@state,w,c
 14662  00392C  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 14663  00392E  6A19               	clrf	(??_BlinkOkLeds+1)& (0+255),c
 14664  003930  5018               	movf	??_BlinkOkLeds,w,c
 14665  003932  5C1C               	subwf	BlinkOkLeds@idx,w,c
 14666  003934  501D               	movf	BlinkOkLeds@idx+1,w,c
 14667  003936  0A80               	xorlw	128
 14668  003938  6E1A               	movwf	(??_BlinkOkLeds+2)& (0+255),c
 14669  00393A  5019               	movf	??_BlinkOkLeds+1,w,c
 14670  00393C  0A80               	xorlw	128
 14671  00393E  581A               	subwfb	(??_BlinkOkLeds+2)& (0+255),w,c
 14672  003940  B0D8               	btfsc	status,0,c
 14673  003942  0012               	return	
 14674                           
 14675                           ;LedsApp.c: 27: {
 14676                           ;LedsApp.c: 28: LATCbits.LATC0 = 0;
 14677  003944  908B               	bcf	3979,0,c	;volatile
 14678                           
 14679                           ;LedsApp.c: 29: _delay((unsigned long)((100)*(8000000/4000.0)));
 14680  003946  0E02               	movlw	2
 14681  003948  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 14682  00394A  0E04               	movlw	4
 14683  00394C  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 14684  00394E  0EBA               	movlw	186
 14685  003950                     u9667:
 14686  003950  2EE8               	decfsz	wreg,f,c
 14687  003952  D7FE               	bra	u9667
 14688  003954  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 14689  003956  D7FC               	bra	u9667
 14690  003958  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 14691  00395A  D7FA               	bra	u9667
 14692  00395C  D000               	nop2	
 14693                           
 14694                           ;LedsApp.c: 30: LATCbits.LATC0 = 1;
 14695  00395E  808B               	bsf	3979,0,c	;volatile
 14696                           
 14697                           ;LedsApp.c: 31: _delay((unsigned long)((100)*(8000000/4000.0)));
 14698  003960  0E02               	movlw	2
 14699  003962  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 14700  003964  0E04               	movlw	4
 14701  003966  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 14702  003968  0EBA               	movlw	186
 14703  00396A                     u9677:
 14704  00396A  2EE8               	decfsz	wreg,f,c
 14705  00396C  D7FE               	bra	u9677
 14706  00396E  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 14707  003970  D7FC               	bra	u9677
 14708  003972  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 14709  003974  D7FA               	bra	u9677
 14710  003976  D000               	nop2	
 14711  003978  4A1C               	infsnz	BlinkOkLeds@idx,f,c
 14712  00397A  2A1D               	incf	BlinkOkLeds@idx+1,f,c
 14713  00397C  D7D6               	goto	l6682
 14714  00397E                     __end_of_BlinkOkLeds:
 14715                           	opt stack 0
 14716                           tosu	equ	0xFFF
 14717                           tosh	equ	0xFFE
 14718                           tosl	equ	0xFFD
 14719                           pclath	equ	0xFFA
 14720                           tblptru	equ	0xFF8
 14721                           tblptrh	equ	0xFF7
 14722                           tblptrl	equ	0xFF6
 14723                           tablat	equ	0xFF5
 14724                           prodh	equ	0xFF4
 14725                           prodl	equ	0xFF3
 14726                           intcon	equ	0xFF2
 14727                           intcon2	equ	0xFF1
 14728                           postinc0	equ	0xFEE
 14729                           plusw0	equ	0xFEB
 14730                           wreg	equ	0xFE8
 14731                           indf1	equ	0xFE7
 14732                           postdec1	equ	0xFE5
 14733                           fsr1h	equ	0xFE2
 14734                           fsr1l	equ	0xFE1
 14735                           indf2	equ	0xFDF
 14736                           postinc2	equ	0xFDE
 14737                           postdec2	equ	0xFDD
 14738                           plusw2	equ	0xFDB
 14739                           fsr2h	equ	0xFDA
 14740                           fsr2l	equ	0xFD9
 14741                           status	equ	0xFD8
 14742                           
 14743 ;; *************** function _AdcConvert *****************
 14744 ;; Defined at:
 14745 ;;		line 43 in file "AdcApp.c"
 14746 ;; Parameters:    Size  Location     Type
 14747 ;;		None
 14748 ;; Auto vars:     Size  Location     Type
 14749 ;;  _adcResult      2   83[BANK0 ] unsigned int 
 14750 ;;  _adcResult      2   89[BANK0 ] unsigned int 
 14751 ;;  ldTxSate        2   87[BANK0 ] unsigned int 
 14752 ;;  ldRxSate        2   85[BANK0 ] unsigned int 
 14753 ;;  adcRes          2   94[BANK0 ] unsigned int 
 14754 ;;  idx             1   96[BANK0 ] unsigned char 
 14755 ;; Return value:  Size  Location     Type
 14756 ;;                  1    wreg      void 
 14757 ;; Registers used:
 14758 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14759 ;; Tracked objects:
 14760 ;;		On entry : 0/0
 14761 ;;		On exit  : 0/0
 14762 ;;		Unchanged: 0/0
 14763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14764 ;;      Params:         0       0       0       0       0       0       0
 14765 ;;      Locals:         0      14       0       0       0       0       0
 14766 ;;      Temps:          0       2       0       0       0       0       0
 14767 ;;      Totals:         0      16       0       0       0       0       0
 14768 ;;Total ram usage:       16 bytes
 14769 ;; Hardware stack levels used:    1
 14770 ;; Hardware stack levels required when called:    9
 14771 ;; This function calls:
 14772 ;;		_ADC_GetConversion
 14773 ;;		_FlashSampleWrite
 14774 ;;		_GetUint16FromBitArray
 14775 ;;		___ftdiv
 14776 ;;		___ftmul
 14777 ;;		___fttol
 14778 ;;		___lwtoft
 14779 ;;		_pow
 14780 ;; This function is called by:
 14781 ;;		_main
 14782 ;; This function uses a non-reentrant model
 14783 ;;
 14784                           
 14785                           	psect	text85
 14786  00111E                     __ptext85:
 14787                           	opt stack 0
 14788  00111E                     _AdcConvert:
 14789                           	opt stack 21
 14790                           
 14791                           ;AdcApp.c: 48: uint16_t adcRes = 0;
 14792                           
 14793                           ;incstack = 0
 14794  00111E  0E00               	movlw	0
 14795  001120  0100               	movlb	0	; () banked
 14796  001122  6FBF               	movwf	(AdcConvert@adcRes+1)& (0+255),b
 14797  001124  0E00               	movlw	0
 14798  001126  6FBE               	movwf	AdcConvert@adcRes& (0+255),b
 14799                           
 14800                           ;AdcApp.c: 49: uint8_t idx = 0;
 14801  001128  0E00               	movlw	0
 14802  00112A  6FC0               	movwf	AdcConvert@idx& (0+255),b
 14803                           
 14804                           ;AdcApp.c: 51: if (adcSampleMode == CIRCULAR)
 14805  00112C  503B               	movf	_adcSampleMode,w,c
 14806  00112E  A4D8               	btfss	status,2,c
 14807  001130  D09B               	goto	l126
 14808                           
 14809                           ; BSR set to: 0
 14810                           ;AdcApp.c: 52: {
 14811                           ;AdcApp.c: 53: for(idx = 0; idx < (9); idx++)
 14812  001132  0E00               	movlw	0
 14813  001134  6FC0               	movwf	AdcConvert@idx& (0+255),b
 14814  001136                     l8796:
 14815                           
 14816                           ; BSR set to: 0
 14817  001136  0E08               	movlw	8
 14818  001138  65C0               	cpfsgt	AdcConvert@idx& (0+255),b
 14819  00113A  D001               	goto	l127
 14820  00113C  D06D               	goto	u9320
 14821  00113E                     l127:
 14822                           
 14823                           ; BSR set to: 0
 14824                           ;AdcApp.c: 54: {
 14825                           ;AdcApp.c: 55: adc_result_t _adcResult = ADC_GetConversion(channelArr[idx]);
 14826                           
 14827                           ; BSR set to: 0
 14828  00113E  51C0               	movf	AdcConvert@idx& (0+255),w,b
 14829  001140  0D01               	mullw	1
 14830  001142  0E42               	movlw	low _channelArr
 14831  001144  24F3               	addwf	prodl,w,c
 14832  001146  6EF6               	movwf	tblptrl,c
 14833  001148  0E06               	movlw	high _channelArr
 14834  00114A  20F4               	addwfc	prodh,w,c
 14835  00114C  6EF7               	movwf	tblptrh,c
 14836  00114E                     	if	0	;There are less than 3 active tblptr bytes
 14837  00114E                     	endif
 14838  00114E  0008               	tblrd		*
 14839  001150  50F5               	movf	tablat,w,c
 14840  001152  EC8D  F020         	call	_ADC_GetConversion
 14841  001156  C018  F0B3         	movff	?_ADC_GetConversion,AdcConvert@_adcResult
 14842  00115A  C019  F0B4         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult+1
 14843                           
 14844                           ;AdcApp.c: 56: adcRes = (_adcResult/pow(2,(10)))*(3340);
 14845  00115E  0E00               	movlw	0
 14846  001160  0100               	movlb	0	; () banked
 14847  001162  6FA3               	movwf	pow@y& (0+255),b
 14848  001164  0E20               	movlw	32
 14849  001166  6FA4               	movwf	(pow@y+1)& (0+255),b
 14850  001168  0E41               	movlw	65
 14851  00116A  6FA5               	movwf	(pow@y+2)& (0+255),b
 14852  00116C  0E00               	movlw	0
 14853  00116E  6FA0               	movwf	pow@x& (0+255),b
 14854  001170  0E00               	movlw	0
 14855  001172  6FA1               	movwf	(pow@x+1)& (0+255),b
 14856  001174  0E40               	movlw	64
 14857  001176  6FA2               	movwf	(pow@x+2)& (0+255),b
 14858  001178  EC31  F00E         	call	_pow	;wreg free
 14859  00117C  C0A0  F0BB         	movff	?_pow,_AdcConvert$3591
 14860  001180  C0A1  F0BC         	movff	?_pow+1,_AdcConvert$3591+1
 14861  001184  C0A2  F0BD         	movff	?_pow+2,_AdcConvert$3591+2
 14862                           
 14863                           ;AdcApp.c: 56: adcRes = (_adcResult/pow(2,(10)))*(3340);
 14864  001188  0EC0               	movlw	192
 14865  00118A  0100               	movlb	0	; () banked
 14866  00118C  6F6C               	movwf	___ftmul@f2& (0+255),b
 14867  00118E  0E50               	movlw	80
 14868  001190  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 14869  001192  0E45               	movlw	69
 14870  001194  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 14871  001196  C0BB  F02C         	movff	_AdcConvert$3591,___ftdiv@f2
 14872  00119A  C0BC  F02D         	movff	_AdcConvert$3591+1,___ftdiv@f2+1
 14873  00119E  C0BD  F02E         	movff	_AdcConvert$3591+2,___ftdiv@f2+2
 14874  0011A2  C0B3  F020         	movff	AdcConvert@_adcResult,___lwtoft@c
 14875  0011A6  C0B4  F021         	movff	AdcConvert@_adcResult+1,___lwtoft@c+1
 14876  0011AA  EC6B  F021         	call	___lwtoft	;wreg free
 14877  0011AE  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 14878  0011B2  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 14879  0011B6  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 14880  0011BA  ECC4  F013         	call	___ftdiv	;wreg free
 14881  0011BE  C029  F069         	movff	?___ftdiv,___ftmul@f1
 14882  0011C2  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 14883  0011C6  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 14884  0011CA  ECD5  F012         	call	___ftmul	;wreg free
 14885  0011CE  C069  F078         	movff	?___ftmul,___fttol@f1
 14886  0011D2  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 14887  0011D6  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 14888  0011DA  EC59  F012         	call	___fttol	;wreg free
 14889  0011DE  C078  F0BE         	movff	?___fttol,AdcConvert@adcRes
 14890  0011E2  C079  F0BF         	movff	?___fttol+1,AdcConvert@adcRes+1
 14891                           
 14892                           ;AdcApp.c: 57: FlashSampleWrite(adcRes, idx + 1);
 14893  0011E6  C0BE  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 14894  0011EA  C0BF  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 14895  0011EE  0100               	movlb	0	; () banked
 14896  0011F0  29C0               	incf	AdcConvert@idx& (0+255),w,b
 14897  0011F2  6E2F               	movwf	FlashSampleWrite@channelNum,c
 14898  0011F4  EC5D  F011         	call	_FlashSampleWrite	;wreg free
 14899                           
 14900                           ;AdcApp.c: 58: _delay((unsigned long)((250)*(8000000/4000.0)));
 14901  0011F8  0E03               	movlw	3
 14902  0011FA  0100               	movlb	0	; () banked
 14903  0011FC  6FB2               	movwf	(??_AdcConvert+1)& (0+255),b
 14904  0011FE  0E8A               	movlw	138
 14905  001200  6FB1               	movwf	??_AdcConvert& (0+255),b
 14906  001202  0E55               	movlw	85
 14907  001204                     u9687:
 14908  001204  2EE8               	decfsz	wreg,f,c
 14909  001206  D7FE               	bra	u9687
 14910  001208  2FB1               	decfsz	??_AdcConvert& (0+255),f,b
 14911  00120A  D7FC               	bra	u9687
 14912  00120C  2FB2               	decfsz	(??_AdcConvert+1)& (0+255),f,b
 14913  00120E  D7FA               	bra	u9687
 14914  001210  D000               	nop2	
 14915  001212  0100               	movlb	0	; () banked
 14916  001214  2BC0               	incf	AdcConvert@idx& (0+255),f,b
 14917  001216  D78F               	goto	l8796
 14918  001218                     u9320:
 14919                           
 14920                           ; BSR set to: 0
 14921                           ;AdcApp.c: 59: }
 14922                           ;AdcApp.c: 62: uint16_t ldRxSate = GetUint16FromBitArray(synthLdRxArray);
 14923                           
 14924                           ; BSR set to: 0
 14925  001218  0EA7               	movlw	low _synthLdRxArray
 14926  00121A  6E18               	movwf	GetUint16FromBitArray@bitarray,c
 14927  00121C  0E01               	movlw	high _synthLdRxArray
 14928  00121E  6E19               	movwf	GetUint16FromBitArray@bitarray+1,c
 14929  001220  EC55  F01B         	call	_GetUint16FromBitArray	;wreg free
 14930  001224  C018  F0B5         	movff	?_GetUint16FromBitArray,AdcConvert@ldRxSate
 14931  001228  C019  F0B6         	movff	?_GetUint16FromBitArray+1,AdcConvert@ldRxSate+1
 14932                           
 14933                           ;AdcApp.c: 63: FlashSampleWrite(ldRxSate, idx + 1);
 14934  00122C  C0B5  F02D         	movff	AdcConvert@ldRxSate,FlashSampleWrite@sampleData
 14935  001230  C0B6  F02E         	movff	AdcConvert@ldRxSate+1,FlashSampleWrite@sampleData+1
 14936  001234  0100               	movlb	0	; () banked
 14937  001236  29C0               	incf	AdcConvert@idx& (0+255),w,b
 14938  001238  6E2F               	movwf	FlashSampleWrite@channelNum,c
 14939  00123A  EC5D  F011         	call	_FlashSampleWrite	;wreg free
 14940                           
 14941                           ;AdcApp.c: 64: uint16_t ldTxSate = GetUint16FromBitArray(synthLdTxArray);
 14942  00123E  0E9B               	movlw	low _synthLdTxArray
 14943  001240  6E18               	movwf	GetUint16FromBitArray@bitarray,c
 14944  001242  0E01               	movlw	high _synthLdTxArray
 14945  001244  6E19               	movwf	GetUint16FromBitArray@bitarray+1,c
 14946  001246  EC55  F01B         	call	_GetUint16FromBitArray	;wreg free
 14947  00124A  C018  F0B7         	movff	?_GetUint16FromBitArray,AdcConvert@ldTxSate
 14948  00124E  C019  F0B8         	movff	?_GetUint16FromBitArray+1,AdcConvert@ldTxSate+1
 14949                           
 14950                           ;AdcApp.c: 65: FlashSampleWrite(ldTxSate, idx + 2);
 14951  001252  C0B7  F02D         	movff	AdcConvert@ldTxSate,FlashSampleWrite@sampleData
 14952  001256  C0B8  F02E         	movff	AdcConvert@ldTxSate+1,FlashSampleWrite@sampleData+1
 14953  00125A  0100               	movlb	0	; () banked
 14954  00125C  51C0               	movf	AdcConvert@idx& (0+255),w,b
 14955  00125E  0F02               	addlw	2
 14956  001260  6E2F               	movwf	FlashSampleWrite@channelNum,c
 14957  001262  EC5D  F011         	call	_FlashSampleWrite	;wreg free
 14958                           
 14959                           ;AdcApp.c: 67: }
 14960  001266  0012               	return	
 14961  001268                     l126:
 14962                           
 14963                           ;AdcApp.c: 68: else if (adcSampleMode == SINGLE_CHANNEL)
 14964  001268  043B               	decf	_adcSampleMode,w,c
 14965  00126A  A4D8               	btfss	status,2,c
 14966  00126C  0012               	return	
 14967                           
 14968                           ;AdcApp.c: 69: {
 14969                           ;AdcApp.c: 70: adc_result_t _adcResult = ADC_GetConversion(channelArr[channel]);
 14970  00126E  0100               	movlb	0	; () banked
 14971  001270  51F0               	movf	_channel& (0+255),w,b
 14972  001272  0D01               	mullw	1
 14973  001274  0E42               	movlw	low _channelArr
 14974  001276  24F3               	addwf	prodl,w,c
 14975  001278  6EF6               	movwf	tblptrl,c
 14976  00127A  0E06               	movlw	high _channelArr
 14977  00127C  20F4               	addwfc	prodh,w,c
 14978  00127E  6EF7               	movwf	tblptrh,c
 14979  001280                     	if	0	;There are less than 3 active tblptr bytes
 14980  001280                     	endif
 14981  001280  0008               	tblrd		*
 14982  001282  50F5               	movf	tablat,w,c
 14983  001284  EC8D  F020         	call	_ADC_GetConversion
 14984  001288  C018  F0B9         	movff	?_ADC_GetConversion,AdcConvert@_adcResult_347
 14985  00128C  C019  F0BA         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult_347+1
 14986                           
 14987                           ;AdcApp.c: 71: adcRes = (_adcResult/pow(2,(10)))*(3340);
 14988  001290  0E00               	movlw	0
 14989  001292  0100               	movlb	0	; () banked
 14990  001294  6FA3               	movwf	pow@y& (0+255),b
 14991  001296  0E20               	movlw	32
 14992  001298  6FA4               	movwf	(pow@y+1)& (0+255),b
 14993  00129A  0E41               	movlw	65
 14994  00129C  6FA5               	movwf	(pow@y+2)& (0+255),b
 14995  00129E  0E00               	movlw	0
 14996  0012A0  6FA0               	movwf	pow@x& (0+255),b
 14997  0012A2  0E00               	movlw	0
 14998  0012A4  6FA1               	movwf	(pow@x+1)& (0+255),b
 14999  0012A6  0E40               	movlw	64
 15000  0012A8  6FA2               	movwf	(pow@x+2)& (0+255),b
 15001  0012AA  EC31  F00E         	call	_pow	;wreg free
 15002  0012AE  C0A0  F0BB         	movff	?_pow,_AdcConvert$3591
 15003  0012B2  C0A1  F0BC         	movff	?_pow+1,_AdcConvert$3591+1
 15004  0012B6  C0A2  F0BD         	movff	?_pow+2,_AdcConvert$3591+2
 15005                           
 15006                           ;AdcApp.c: 71: adcRes = (_adcResult/pow(2,(10)))*(3340);
 15007  0012BA  0EC0               	movlw	192
 15008  0012BC  0100               	movlb	0	; () banked
 15009  0012BE  6F6C               	movwf	___ftmul@f2& (0+255),b
 15010  0012C0  0E50               	movlw	80
 15011  0012C2  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 15012  0012C4  0E45               	movlw	69
 15013  0012C6  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 15014  0012C8  C0BB  F02C         	movff	_AdcConvert$3591,___ftdiv@f2
 15015  0012CC  C0BC  F02D         	movff	_AdcConvert$3591+1,___ftdiv@f2+1
 15016  0012D0  C0BD  F02E         	movff	_AdcConvert$3591+2,___ftdiv@f2+2
 15017  0012D4  C0B9  F020         	movff	AdcConvert@_adcResult_347,___lwtoft@c
 15018  0012D8  C0BA  F021         	movff	AdcConvert@_adcResult_347+1,___lwtoft@c+1
 15019  0012DC  EC6B  F021         	call	___lwtoft	;wreg free
 15020  0012E0  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 15021  0012E4  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 15022  0012E8  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 15023  0012EC  ECC4  F013         	call	___ftdiv	;wreg free
 15024  0012F0  C029  F069         	movff	?___ftdiv,___ftmul@f1
 15025  0012F4  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 15026  0012F8  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 15027  0012FC  ECD5  F012         	call	___ftmul	;wreg free
 15028  001300  C069  F078         	movff	?___ftmul,___fttol@f1
 15029  001304  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 15030  001308  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 15031  00130C  EC59  F012         	call	___fttol	;wreg free
 15032  001310  C078  F0BE         	movff	?___fttol,AdcConvert@adcRes
 15033  001314  C079  F0BF         	movff	?___fttol+1,AdcConvert@adcRes+1
 15034                           
 15035                           ;AdcApp.c: 72: FlashSampleWrite(adcRes, 1);
 15036  001318  C0BE  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 15037  00131C  C0BF  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 15038  001320  0E01               	movlw	1
 15039  001322  6E2F               	movwf	FlashSampleWrite@channelNum,c
 15040  001324  EC5D  F011         	call	_FlashSampleWrite	;wreg free
 15041  001328  0012               	return	
 15042  00132A                     __end_of_AdcConvert:
 15043                           	opt stack 0
 15044                           tosu	equ	0xFFF
 15045                           tosh	equ	0xFFE
 15046                           tosl	equ	0xFFD
 15047                           pclath	equ	0xFFA
 15048                           tblptru	equ	0xFF8
 15049                           tblptrh	equ	0xFF7
 15050                           tblptrl	equ	0xFF6
 15051                           tablat	equ	0xFF5
 15052                           prodh	equ	0xFF4
 15053                           prodl	equ	0xFF3
 15054                           intcon	equ	0xFF2
 15055                           intcon2	equ	0xFF1
 15056                           postinc0	equ	0xFEE
 15057                           plusw0	equ	0xFEB
 15058                           wreg	equ	0xFE8
 15059                           indf1	equ	0xFE7
 15060                           postdec1	equ	0xFE5
 15061                           fsr1h	equ	0xFE2
 15062                           fsr1l	equ	0xFE1
 15063                           indf2	equ	0xFDF
 15064                           postinc2	equ	0xFDE
 15065                           postdec2	equ	0xFDD
 15066                           plusw2	equ	0xFDB
 15067                           fsr2h	equ	0xFDA
 15068                           fsr2l	equ	0xFD9
 15069                           status	equ	0xFD8
 15070                           
 15071 ;; *************** function _pow *****************
 15072 ;; Defined at:
 15073 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
 15074 ;; Parameters:    Size  Location     Type
 15075 ;;  x               3   64[BANK0 ] void 
 15076 ;;  y               3   67[BANK0 ] void 
 15077 ;; Auto vars:     Size  Location     Type
 15078 ;;  yi              4   77[BANK0 ] unsigned long 
 15079 ;;  sign            1   76[BANK0 ] unsigned char 
 15080 ;; Return value:  Size  Location     Type
 15081 ;;                  3   64[BANK0 ] unsigned char 
 15082 ;; Registers used:
 15083 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15084 ;; Tracked objects:
 15085 ;;		On entry : 0/0
 15086 ;;		On exit  : 0/0
 15087 ;;		Unchanged: 0/0
 15088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15089 ;;      Params:         0       6       0       0       0       0       0
 15090 ;;      Locals:         0      11       0       0       0       0       0
 15091 ;;      Temps:          0       0       0       0       0       0       0
 15092 ;;      Totals:         0      17       0       0       0       0       0
 15093 ;;Total ram usage:       17 bytes
 15094 ;; Hardware stack levels used:    1
 15095 ;; Hardware stack levels required when called:    8
 15096 ;; This function calls:
 15097 ;;		___ftge
 15098 ;;		___ftmul
 15099 ;;		___ftneg
 15100 ;;		___fttol
 15101 ;;		___lltoft
 15102 ;;		_exp
 15103 ;;		_log
 15104 ;; This function is called by:
 15105 ;;		_AdcConvert
 15106 ;;		_ReadIntFromEeprom
 15107 ;; This function uses a non-reentrant model
 15108 ;;
 15109                           
 15110                           	psect	text86
 15111  001C62                     __ptext86:
 15112                           	opt stack 0
 15113  001C62                     _pow:
 15114                           	opt stack 18
 15115                           
 15116                           ;incstack = 0
 15117  001C62  0E00               	movlw	0
 15118  001C64  0100               	movlb	0	; () banked
 15119  001C66  6FAC               	movwf	pow@sign& (0+255),b
 15120                           
 15121                           ; BSR set to: 0
 15122  001C68  51A0               	movf	pow@x& (0+255),w,b
 15123  001C6A  11A1               	iorwf	(pow@x+1)& (0+255),w,b
 15124  001C6C  11A2               	iorwf	(pow@x+2)& (0+255),w,b
 15125  001C6E  A4D8               	btfss	status,2,c
 15126  001C70  D01D               	goto	l2051
 15127                           
 15128                           ; BSR set to: 0
 15129  001C72  0E00               	movlw	0
 15130  001C74  6E18               	movwf	___ftge@ff1,c
 15131  001C76  0E00               	movlw	0
 15132  001C78  6E19               	movwf	___ftge@ff1+1,c
 15133  001C7A  0E00               	movlw	0
 15134  001C7C  6E1A               	movwf	___ftge@ff1+2,c
 15135  001C7E  C0A3  F01B         	movff	pow@y,___ftge@ff2
 15136  001C82  C0A4  F01C         	movff	pow@y+1,___ftge@ff2+1
 15137  001C86  C0A5  F01D         	movff	pow@y+2,___ftge@ff2+2
 15138  001C8A  ECD1  F019         	call	___ftge	;wreg free
 15139  001C8E  A0D8               	btfss	status,0,c
 15140  001C90  D005               	goto	l2052
 15141  001C92  0E00               	movlw	0
 15142  001C94  0101               	movlb	1	; () banked
 15143  001C96  6F2D               	movwf	(_errno+1)& (0+255),b
 15144  001C98  0E21               	movlw	33
 15145  001C9A  6F2C               	movwf	_errno& (0+255),b
 15146  001C9C                     l2052:
 15147  001C9C  0E00               	movlw	0
 15148  001C9E  0100               	movlb	0	; () banked
 15149  001CA0  6FA0               	movwf	?_pow& (0+255),b
 15150  001CA2  0E00               	movlw	0
 15151  001CA4  6FA1               	movwf	(?_pow+1)& (0+255),b
 15152  001CA6  0E00               	movlw	0
 15153  001CA8  6FA2               	movwf	(?_pow+2)& (0+255),b
 15154                           
 15155                           ; BSR set to: 0
 15156  001CAA  0012               	return	
 15157  001CAC                     l2051:
 15158                           
 15159                           ; BSR set to: 0
 15160                           
 15161                           ; BSR set to: 0
 15162  001CAC  51A3               	movf	pow@y& (0+255),w,b
 15163  001CAE  11A4               	iorwf	(pow@y+1)& (0+255),w,b
 15164  001CB0  11A5               	iorwf	(pow@y+2)& (0+255),w,b
 15165  001CB2  A4D8               	btfss	status,2,c
 15166  001CB4  D007               	goto	l2054
 15167                           
 15168                           ; BSR set to: 0
 15169  001CB6  0E00               	movlw	0
 15170  001CB8  6FA0               	movwf	?_pow& (0+255),b
 15171  001CBA  0E80               	movlw	128
 15172  001CBC  6FA1               	movwf	(?_pow+1)& (0+255),b
 15173  001CBE  0E3F               	movlw	63
 15174  001CC0  6FA2               	movwf	(?_pow+2)& (0+255),b
 15175                           
 15176                           ; BSR set to: 0
 15177  001CC2  0012               	return	
 15178  001CC4                     l2054:
 15179                           
 15180                           ; BSR set to: 0
 15181                           
 15182                           ; BSR set to: 0
 15183  001CC4  AFA2               	btfss	(pow@x+2)& (0+255),7,b
 15184  001CC6  D043               	goto	l2055
 15185                           
 15186                           ; BSR set to: 0
 15187  001CC8  C0A3  F078         	movff	pow@y,___fttol@f1
 15188  001CCC  C0A4  F079         	movff	pow@y+1,___fttol@f1+1
 15189  001CD0  C0A5  F07A         	movff	pow@y+2,___fttol@f1+2
 15190  001CD4  EC59  F012         	call	___fttol	;wreg free
 15191  001CD8  C078  F0AD         	movff	?___fttol,pow@yi
 15192  001CDC  C079  F0AE         	movff	?___fttol+1,pow@yi+1
 15193  001CE0  C07A  F0AF         	movff	?___fttol+2,pow@yi+2
 15194  001CE4  C07B  F0B0         	movff	?___fttol+3,pow@yi+3
 15195  001CE8  C0AD  F020         	movff	pow@yi,___lltoft@c
 15196  001CEC  C0AE  F021         	movff	pow@yi+1,___lltoft@c+1
 15197  001CF0  C0AF  F022         	movff	pow@yi+2,___lltoft@c+2
 15198  001CF4  C0B0  F023         	movff	pow@yi+3,___lltoft@c+3
 15199  001CF8  ECED  F01C         	call	___lltoft	;wreg free
 15200  001CFC  0100               	movlb	0	; () banked
 15201  001CFE  51A3               	movf	pow@y& (0+255),w,b
 15202  001D00  1820               	xorwf	?___lltoft,w,c
 15203  001D02  E107               	bnz	u7770
 15204  001D04  51A4               	movf	(pow@y+1)& (0+255),w,b
 15205  001D06  1821               	xorwf	?___lltoft+1,w,c
 15206  001D08  E104               	bnz	u7770
 15207  001D0A  51A5               	movf	(pow@y+2)& (0+255),w,b
 15208  001D0C  1822               	xorwf	?___lltoft+2,w,c
 15209  001D0E  B4D8               	btfsc	status,2,c
 15210  001D10  D00D               	goto	l2056
 15211  001D12                     u7770:
 15212                           
 15213                           ; BSR set to: 0
 15214  001D12  0E00               	movlw	0
 15215  001D14  0101               	movlb	1	; () banked
 15216  001D16  6F2D               	movwf	(_errno+1)& (0+255),b
 15217  001D18  0E21               	movlw	33
 15218  001D1A  6F2C               	movwf	_errno& (0+255),b
 15219  001D1C  0E00               	movlw	0
 15220  001D1E  0100               	movlb	0	; () banked
 15221  001D20  6FA0               	movwf	?_pow& (0+255),b
 15222  001D22  0E00               	movlw	0
 15223  001D24  6FA1               	movwf	(?_pow+1)& (0+255),b
 15224  001D26  0E00               	movlw	0
 15225  001D28  6FA2               	movwf	(?_pow+2)& (0+255),b
 15226                           
 15227                           ; BSR set to: 0
 15228  001D2A  0012               	return	
 15229  001D2C                     l2056:
 15230                           
 15231                           ; BSR set to: 0
 15232                           
 15233                           ; BSR set to: 0
 15234  001D2C  51AD               	movf	pow@yi& (0+255),w,b
 15235  001D2E  0B01               	andlw	1
 15236  001D30  6FAC               	movwf	pow@sign& (0+255),b
 15237                           
 15238                           ; BSR set to: 0
 15239  001D32  C0A0  F018         	movff	pow@x,___ftneg@f1
 15240  001D36  C0A1  F019         	movff	pow@x+1,___ftneg@f1+1
 15241  001D3A  C0A2  F01A         	movff	pow@x+2,___ftneg@f1+2
 15242  001D3E  EC59  F021         	call	___ftneg	;wreg free
 15243  001D42  C018  F0A0         	movff	?___ftneg,pow@x
 15244  001D46  C019  F0A1         	movff	?___ftneg+1,pow@x+1
 15245  001D4A  C01A  F0A2         	movff	?___ftneg+2,pow@x+2
 15246  001D4E                     l2055:
 15247  001D4E  C0A0  F08E         	movff	pow@x,log@x
 15248  001D52  C0A1  F08F         	movff	pow@x+1,log@x+1
 15249  001D56  C0A2  F090         	movff	pow@x+2,log@x+2
 15250  001D5A  ECAF  F00F         	call	_log	;wreg free
 15251  001D5E  C08E  F0A6         	movff	?_log,_pow$3594
 15252  001D62  C08F  F0A7         	movff	?_log+1,_pow$3594+1
 15253  001D66  C090  F0A8         	movff	?_log+2,_pow$3594+2
 15254  001D6A  C0A6  F069         	movff	_pow$3594,___ftmul@f1
 15255  001D6E  C0A7  F06A         	movff	_pow$3594+1,___ftmul@f1+1
 15256  001D72  C0A8  F06B         	movff	_pow$3594+2,___ftmul@f1+2
 15257  001D76  C0A3  F06C         	movff	pow@y,___ftmul@f2
 15258  001D7A  C0A4  F06D         	movff	pow@y+1,___ftmul@f2+1
 15259  001D7E  C0A5  F06E         	movff	pow@y+2,___ftmul@f2+2
 15260  001D82  ECD5  F012         	call	___ftmul	;wreg free
 15261  001D86  C069  F0A9         	movff	?___ftmul,_pow$3595
 15262  001D8A  C06A  F0AA         	movff	?___ftmul+1,_pow$3595+1
 15263  001D8E  C06B  F0AB         	movff	?___ftmul+2,_pow$3595+2
 15264  001D92  C0A9  F097         	movff	_pow$3595,exp@x
 15265  001D96  C0AA  F098         	movff	_pow$3595+1,exp@x+1
 15266  001D9A  C0AB  F099         	movff	_pow$3595+2,exp@x+2
 15267  001D9E  EC95  F009         	call	_exp	;wreg free
 15268  001DA2  C097  F0A0         	movff	?_exp,pow@x
 15269  001DA6  C098  F0A1         	movff	?_exp+1,pow@x+1
 15270  001DAA  C099  F0A2         	movff	?_exp+2,pow@x+2
 15271  001DAE  0100               	movlb	0	; () banked
 15272  001DB0  51AC               	movf	pow@sign& (0+255),w,b
 15273  001DB2  B4D8               	btfsc	status,2,c
 15274  001DB4  D00F               	goto	l2057
 15275                           
 15276                           ; BSR set to: 0
 15277  001DB6  C0A0  F018         	movff	pow@x,___ftneg@f1
 15278  001DBA  C0A1  F019         	movff	pow@x+1,___ftneg@f1+1
 15279  001DBE  C0A2  F01A         	movff	pow@x+2,___ftneg@f1+2
 15280  001DC2  EC59  F021         	call	___ftneg	;wreg free
 15281  001DC6  C018  F0A0         	movff	?___ftneg,?_pow
 15282  001DCA  C019  F0A1         	movff	?___ftneg+1,?_pow+1
 15283  001DCE  C01A  F0A2         	movff	?___ftneg+2,?_pow+2
 15284  001DD2  0012               	return	
 15285  001DD4                     l2057:
 15286                           
 15287                           ; BSR set to: 0
 15288  001DD4  C0A0  F0A0         	movff	pow@x,?_pow
 15289  001DD8  C0A1  F0A1         	movff	pow@x+1,?_pow+1
 15290  001DDC  C0A2  F0A2         	movff	pow@x+2,?_pow+2
 15291  001DE0  0012               	return		;funcret
 15292  001DE2                     __end_of_pow:
 15293                           	opt stack 0
 15294                           tosu	equ	0xFFF
 15295                           tosh	equ	0xFFE
 15296                           tosl	equ	0xFFD
 15297                           pclath	equ	0xFFA
 15298                           tblptru	equ	0xFF8
 15299                           tblptrh	equ	0xFF7
 15300                           tblptrl	equ	0xFF6
 15301                           tablat	equ	0xFF5
 15302                           prodh	equ	0xFF4
 15303                           prodl	equ	0xFF3
 15304                           intcon	equ	0xFF2
 15305                           intcon2	equ	0xFF1
 15306                           postinc0	equ	0xFEE
 15307                           plusw0	equ	0xFEB
 15308                           wreg	equ	0xFE8
 15309                           indf1	equ	0xFE7
 15310                           postdec1	equ	0xFE5
 15311                           fsr1h	equ	0xFE2
 15312                           fsr1l	equ	0xFE1
 15313                           indf2	equ	0xFDF
 15314                           postinc2	equ	0xFDE
 15315                           postdec2	equ	0xFDD
 15316                           plusw2	equ	0xFDB
 15317                           fsr2h	equ	0xFDA
 15318                           fsr2l	equ	0xFD9
 15319                           status	equ	0xFD8
 15320                           
 15321 ;; *************** function _log *****************
 15322 ;; Defined at:
 15323 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
 15324 ;; Parameters:    Size  Location     Type
 15325 ;;  x               3   46[BANK0 ] unsigned char 
 15326 ;; Auto vars:     Size  Location     Type
 15327 ;;  exponent        2   49[BANK0 ] int 
 15328 ;; Return value:  Size  Location     Type
 15329 ;;                  3   46[BANK0 ] int 
 15330 ;; Registers used:
 15331 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15332 ;; Tracked objects:
 15333 ;;		On entry : 0/0
 15334 ;;		On exit  : 0/0
 15335 ;;		Unchanged: 0/0
 15336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15337 ;;      Params:         0       3       0       0       0       0       0
 15338 ;;      Locals:         0       2       0       0       0       0       0
 15339 ;;      Temps:          0       0       0       0       0       0       0
 15340 ;;      Totals:         0       5       0       0       0       0       0
 15341 ;;Total ram usage:        5 bytes
 15342 ;; Hardware stack levels used:    1
 15343 ;; Hardware stack levels required when called:    7
 15344 ;; This function calls:
 15345 ;;		___awtoft
 15346 ;;		___ftadd
 15347 ;;		___ftmul
 15348 ;;		_eval_poly
 15349 ;;		_frexp
 15350 ;; This function is called by:
 15351 ;;		_pow
 15352 ;; This function uses a non-reentrant model
 15353 ;;
 15354                           
 15355                           	psect	text87
 15356  001F5E                     __ptext87:
 15357                           	opt stack 0
 15358  001F5E                     _log:
 15359                           	opt stack 18
 15360                           
 15361                           ;incstack = 0
 15362  001F5E  0100               	movlb	0	; () banked
 15363  001F60  AF90               	btfss	(log@x+2)& (0+255),7,b
 15364  001F62  D00D               	goto	l2313
 15365                           
 15366                           ; BSR set to: 0
 15367  001F64  0E00               	movlw	0
 15368  001F66  0101               	movlb	1	; () banked
 15369  001F68  6F2D               	movwf	(_errno+1)& (0+255),b
 15370  001F6A  0E21               	movlw	33
 15371  001F6C  6F2C               	movwf	_errno& (0+255),b
 15372  001F6E  0E00               	movlw	0
 15373  001F70  0100               	movlb	0	; () banked
 15374  001F72  6F8E               	movwf	?_log& (0+255),b
 15375  001F74  0E00               	movlw	0
 15376  001F76  6F8F               	movwf	(?_log+1)& (0+255),b
 15377  001F78  0E00               	movlw	0
 15378  001F7A  6F90               	movwf	(?_log+2)& (0+255),b
 15379                           
 15380                           ; BSR set to: 0
 15381  001F7C  0012               	return	
 15382  001F7E                     l2313:
 15383                           
 15384                           ; BSR set to: 0
 15385                           
 15386                           ; BSR set to: 0
 15387  001F7E  518E               	movf	log@x& (0+255),w,b
 15388  001F80  118F               	iorwf	(log@x+1)& (0+255),w,b
 15389  001F82  1190               	iorwf	(log@x+2)& (0+255),w,b
 15390  001F84  A4D8               	btfss	status,2,c
 15391  001F86  D00D               	goto	l2315
 15392                           
 15393                           ; BSR set to: 0
 15394  001F88  0E00               	movlw	0
 15395  001F8A  0101               	movlb	1	; () banked
 15396  001F8C  6F2D               	movwf	(_errno+1)& (0+255),b
 15397  001F8E  0E22               	movlw	34
 15398  001F90  6F2C               	movwf	_errno& (0+255),b
 15399  001F92  0E00               	movlw	0
 15400  001F94  0100               	movlb	0	; () banked
 15401  001F96  6F8E               	movwf	?_log& (0+255),b
 15402  001F98  0E00               	movlw	0
 15403  001F9A  6F8F               	movwf	(?_log+1)& (0+255),b
 15404  001F9C  0E00               	movlw	0
 15405  001F9E  6F90               	movwf	(?_log+2)& (0+255),b
 15406                           
 15407                           ; BSR set to: 0
 15408  001FA0  0012               	return	
 15409  001FA2                     l2315:
 15410                           
 15411                           ; BSR set to: 0
 15412                           
 15413                           ; BSR set to: 0
 15414  001FA2  0E00               	movlw	0
 15415  001FA4  6F6C               	movwf	___ftmul@f2& (0+255),b
 15416  001FA6  0E00               	movlw	0
 15417  001FA8  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 15418  001FAA  0E40               	movlw	64
 15419  001FAC  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 15420  001FAE  0E91               	movlw	low log@exponent
 15421  001FB0  6E1B               	movwf	frexp@eptr,c
 15422  001FB2  0E00               	movlw	high log@exponent
 15423  001FB4  6E1C               	movwf	frexp@eptr+1,c
 15424  001FB6  C08E  F018         	movff	log@x,frexp@value
 15425  001FBA  C08F  F019         	movff	log@x+1,frexp@value+1
 15426  001FBE  C090  F01A         	movff	log@x+2,frexp@value+2
 15427  001FC2  EC89  F019         	call	_frexp	;wreg free
 15428  001FC6  C018  F069         	movff	?_frexp,___ftmul@f1
 15429  001FCA  C019  F06A         	movff	?_frexp+1,___ftmul@f1+1
 15430  001FCE  C01A  F06B         	movff	?_frexp+2,___ftmul@f1+2
 15431  001FD2  ECD5  F012         	call	___ftmul	;wreg free
 15432  001FD6  C069  F078         	movff	?___ftmul,___ftadd@f1
 15433  001FDA  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 15434  001FDE  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 15435  001FE2  0E00               	movlw	0
 15436  001FE4  0100               	movlb	0	; () banked
 15437  001FE6  6F7B               	movwf	___ftadd@f2& (0+255),b
 15438  001FE8  0E80               	movlw	128
 15439  001FEA  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 15440  001FEC  0EBF               	movlw	191
 15441  001FEE  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 15442  001FF0  EC5A  F00D         	call	___ftadd	;wreg free
 15443  001FF4  C078  F08E         	movff	?___ftadd,log@x
 15444  001FF8  C079  F08F         	movff	?___ftadd+1,log@x+1
 15445  001FFC  C07A  F090         	movff	?___ftadd+2,log@x+2
 15446  002000  0100               	movlb	0	; () banked
 15447  002002  0791               	decf	log@exponent& (0+255),f,b
 15448  002004  A0D8               	btfss	status,0,c
 15449  002006  0792               	decf	(log@exponent+1)& (0+255),f,b
 15450                           
 15451                           ; BSR set to: 0
 15452  002008  C08E  F084         	movff	log@x,eval_poly@x
 15453  00200C  C08F  F085         	movff	log@x+1,eval_poly@x+1
 15454  002010  C090  F086         	movff	log@x+2,eval_poly@x+2
 15455  002014  0E75               	movlw	low log@coeff
 15456  002016  6F87               	movwf	eval_poly@d& (0+255),b
 15457  002018  0E06               	movlw	high log@coeff
 15458  00201A  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 15459  00201C  0E00               	movlw	0
 15460  00201E  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 15461  002020  0E08               	movlw	8
 15462  002022  6F89               	movwf	eval_poly@n& (0+255),b
 15463  002024  ECFF  F015         	call	_eval_poly	;wreg free
 15464  002028  C084  F08E         	movff	?_eval_poly,log@x
 15465  00202C  C085  F08F         	movff	?_eval_poly+1,log@x+1
 15466  002030  C086  F090         	movff	?_eval_poly+2,log@x+2
 15467  002034  0E72               	movlw	114
 15468  002036  0100               	movlb	0	; () banked
 15469  002038  6F6C               	movwf	___ftmul@f2& (0+255),b
 15470  00203A  0E31               	movlw	49
 15471  00203C  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 15472  00203E  0E3F               	movlw	63
 15473  002040  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 15474  002042  C091  F020         	movff	log@exponent,___awtoft@c
 15475  002046  C092  F021         	movff	log@exponent+1,___awtoft@c+1
 15476  00204A  ECA1  F01F         	call	___awtoft	;wreg free
 15477  00204E  C020  F069         	movff	?___awtoft,___ftmul@f1
 15478  002052  C021  F06A         	movff	?___awtoft+1,___ftmul@f1+1
 15479  002056  C022  F06B         	movff	?___awtoft+2,___ftmul@f1+2
 15480  00205A  ECD5  F012         	call	___ftmul	;wreg free
 15481  00205E  C069  F078         	movff	?___ftmul,___ftadd@f1
 15482  002062  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 15483  002066  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 15484  00206A  C08E  F07B         	movff	log@x,___ftadd@f2
 15485  00206E  C08F  F07C         	movff	log@x+1,___ftadd@f2+1
 15486  002072  C090  F07D         	movff	log@x+2,___ftadd@f2+2
 15487  002076  EC5A  F00D         	call	___ftadd	;wreg free
 15488  00207A  C078  F08E         	movff	?___ftadd,?_log
 15489  00207E  C079  F08F         	movff	?___ftadd+1,?_log+1
 15490  002082  C07A  F090         	movff	?___ftadd+2,?_log+2
 15491  002086  0012               	return	
 15492  002088                     __end_of_log:
 15493                           	opt stack 0
 15494                           tosu	equ	0xFFF
 15495                           tosh	equ	0xFFE
 15496                           tosl	equ	0xFFD
 15497                           pclath	equ	0xFFA
 15498                           tblptru	equ	0xFF8
 15499                           tblptrh	equ	0xFF7
 15500                           tblptrl	equ	0xFF6
 15501                           tablat	equ	0xFF5
 15502                           prodh	equ	0xFF4
 15503                           prodl	equ	0xFF3
 15504                           intcon	equ	0xFF2
 15505                           intcon2	equ	0xFF1
 15506                           postinc0	equ	0xFEE
 15507                           plusw0	equ	0xFEB
 15508                           wreg	equ	0xFE8
 15509                           indf1	equ	0xFE7
 15510                           postdec1	equ	0xFE5
 15511                           fsr1h	equ	0xFE2
 15512                           fsr1l	equ	0xFE1
 15513                           indf2	equ	0xFDF
 15514                           postinc2	equ	0xFDE
 15515                           postdec2	equ	0xFDD
 15516                           plusw2	equ	0xFDB
 15517                           fsr2h	equ	0xFDA
 15518                           fsr2l	equ	0xFD9
 15519                           status	equ	0xFD8
 15520                           
 15521 ;; *************** function _exp *****************
 15522 ;; Defined at:
 15523 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
 15524 ;; Parameters:    Size  Location     Type
 15525 ;;  x               3   55[BANK0 ] int 
 15526 ;; Auto vars:     Size  Location     Type
 15527 ;;  exponent        2   61[BANK0 ] int 
 15528 ;;  sign            1   63[BANK0 ] unsigned char 
 15529 ;; Return value:  Size  Location     Type
 15530 ;;                  3   55[BANK0 ] unsigned char 
 15531 ;; Registers used:
 15532 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15533 ;; Tracked objects:
 15534 ;;		On entry : 0/0
 15535 ;;		On exit  : 0/0
 15536 ;;		Unchanged: 0/0
 15537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15538 ;;      Params:         0       3       0       0       0       0       0
 15539 ;;      Locals:         0       6       0       0       0       0       0
 15540 ;;      Temps:          0       0       0       0       0       0       0
 15541 ;;      Totals:         0       9       0       0       0       0       0
 15542 ;;Total ram usage:        9 bytes
 15543 ;; Hardware stack levels used:    1
 15544 ;; Hardware stack levels required when called:    7
 15545 ;; This function calls:
 15546 ;;		___awtoft
 15547 ;;		___ftdiv
 15548 ;;		___ftge
 15549 ;;		___ftmul
 15550 ;;		___ftneg
 15551 ;;		___ftsub
 15552 ;;		___fttol
 15553 ;;		_eval_poly
 15554 ;;		_floor
 15555 ;;		_ldexp
 15556 ;; This function is called by:
 15557 ;;		_pow
 15558 ;; This function uses a non-reentrant model
 15559 ;;
 15560                           
 15561                           	psect	text88
 15562  00132A                     __ptext88:
 15563                           	opt stack 0
 15564  00132A                     _exp:
 15565                           	opt stack 18
 15566                           
 15567                           ;incstack = 0
 15568  00132A  0100               	movlb	0	; () banked
 15569  00132C  5197               	movf	exp@x& (0+255),w,b
 15570  00132E  1198               	iorwf	(exp@x+1)& (0+255),w,b
 15571  001330  1199               	iorwf	(exp@x+2)& (0+255),w,b
 15572  001332  A4D8               	btfss	status,2,c
 15573  001334  D007               	goto	l2249
 15574                           
 15575                           ; BSR set to: 0
 15576  001336  0E00               	movlw	0
 15577  001338  6F97               	movwf	?_exp& (0+255),b
 15578  00133A  0E80               	movlw	128
 15579  00133C  6F98               	movwf	(?_exp+1)& (0+255),b
 15580  00133E  0E3F               	movlw	63
 15581  001340  6F99               	movwf	(?_exp+2)& (0+255),b
 15582                           
 15583                           ; BSR set to: 0
 15584  001342  0012               	return	
 15585  001344                     l2249:
 15586                           
 15587                           ; BSR set to: 0
 15588                           
 15589                           ; BSR set to: 0
 15590  001344  0E72               	movlw	114
 15591  001346  6E18               	movwf	___ftge@ff1,c
 15592  001348  0E31               	movlw	49
 15593  00134A  6E19               	movwf	___ftge@ff1+1,c
 15594  00134C  0E44               	movlw	68
 15595  00134E  6E1A               	movwf	___ftge@ff1+2,c
 15596  001350  C097  F01B         	movff	exp@x,___ftge@ff2
 15597  001354  C098  F01C         	movff	exp@x+1,___ftge@ff2+1
 15598  001358  C099  F01D         	movff	exp@x+2,___ftge@ff2+2
 15599  00135C  ECD1  F019         	call	___ftge	;wreg free
 15600  001360  B0D8               	btfsc	status,0,c
 15601  001362  D00D               	goto	l2251
 15602  001364  0E00               	movlw	0
 15603  001366  0101               	movlb	1	; () banked
 15604  001368  6F2D               	movwf	(_errno+1)& (0+255),b
 15605  00136A  0E22               	movlw	34
 15606  00136C  6F2C               	movwf	_errno& (0+255),b
 15607  00136E  0EFF               	movlw	255
 15608  001370  0100               	movlb	0	; () banked
 15609  001372  6F97               	movwf	?_exp& (0+255),b
 15610  001374  0E7F               	movlw	127
 15611  001376  6F98               	movwf	(?_exp+1)& (0+255),b
 15612  001378  0E7F               	movlw	127
 15613  00137A  6F99               	movwf	(?_exp+2)& (0+255),b
 15614                           
 15615                           ; BSR set to: 0
 15616  00137C  0012               	return	
 15617  00137E                     l2251:
 15618                           
 15619                           ; BSR set to: 0
 15620  00137E  C097  F018         	movff	exp@x,___ftge@ff1
 15621  001382  C098  F019         	movff	exp@x+1,___ftge@ff1+1
 15622  001386  C099  F01A         	movff	exp@x+2,___ftge@ff1+2
 15623  00138A  0E49               	movlw	73
 15624  00138C  6E1B               	movwf	___ftge@ff2,c
 15625  00138E  0E3A               	movlw	58
 15626  001390  6E1C               	movwf	___ftge@ff2+1,c
 15627  001392  0EC4               	movlw	196
 15628  001394  6E1D               	movwf	___ftge@ff2+2,c
 15629  001396  ECD1  F019         	call	___ftge	;wreg free
 15630  00139A  B0D8               	btfsc	status,0,c
 15631  00139C  D00D               	goto	l2252
 15632  00139E  0E00               	movlw	0
 15633  0013A0  0101               	movlb	1	; () banked
 15634  0013A2  6F2D               	movwf	(_errno+1)& (0+255),b
 15635  0013A4  0E22               	movlw	34
 15636  0013A6  6F2C               	movwf	_errno& (0+255),b
 15637  0013A8  0E00               	movlw	0
 15638  0013AA  0100               	movlb	0	; () banked
 15639  0013AC  6F97               	movwf	?_exp& (0+255),b
 15640  0013AE  0E00               	movlw	0
 15641  0013B0  6F98               	movwf	(?_exp+1)& (0+255),b
 15642  0013B2  0E00               	movlw	0
 15643  0013B4  6F99               	movwf	(?_exp+2)& (0+255),b
 15644                           
 15645                           ; BSR set to: 0
 15646  0013B6  0012               	return	
 15647  0013B8                     l2252:
 15648                           
 15649                           ; BSR set to: 0
 15650  0013B8  0100               	movlb	0	; () banked
 15651  0013BA  AF99               	btfss	(exp@x+2)& (0+255),7,b
 15652  0013BC  D002               	goto	u7660
 15653  0013BE  0E01               	movlw	1
 15654  0013C0  D001               	goto	u7670
 15655  0013C2                     u7660:
 15656  0013C2  0E00               	movlw	0
 15657  0013C4                     u7670:
 15658  0013C4  6F9F               	movwf	exp@sign& (0+255),b
 15659                           
 15660                           ; BSR set to: 0
 15661  0013C6  519F               	movf	exp@sign& (0+255),w,b
 15662  0013C8  B4D8               	btfsc	status,2,c
 15663  0013CA  D00E               	goto	l2253
 15664                           
 15665                           ; BSR set to: 0
 15666  0013CC  C097  F018         	movff	exp@x,___ftneg@f1
 15667  0013D0  C098  F019         	movff	exp@x+1,___ftneg@f1+1
 15668  0013D4  C099  F01A         	movff	exp@x+2,___ftneg@f1+2
 15669  0013D8  EC59  F021         	call	___ftneg	;wreg free
 15670  0013DC  C018  F097         	movff	?___ftneg,exp@x
 15671  0013E0  C019  F098         	movff	?___ftneg+1,exp@x+1
 15672  0013E4  C01A  F099         	movff	?___ftneg+2,exp@x+2
 15673  0013E8                     l2253:
 15674  0013E8  C097  F069         	movff	exp@x,___ftmul@f1
 15675  0013EC  C098  F06A         	movff	exp@x+1,___ftmul@f1+1
 15676  0013F0  C099  F06B         	movff	exp@x+2,___ftmul@f1+2
 15677  0013F4  0EAA               	movlw	170
 15678  0013F6  0100               	movlb	0	; () banked
 15679  0013F8  6F6C               	movwf	___ftmul@f2& (0+255),b
 15680  0013FA  0EB8               	movlw	184
 15681  0013FC  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 15682  0013FE  0E3F               	movlw	63
 15683  001400  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 15684  001402  ECD5  F012         	call	___ftmul	;wreg free
 15685  001406  C069  F097         	movff	?___ftmul,exp@x
 15686  00140A  C06A  F098         	movff	?___ftmul+1,exp@x+1
 15687  00140E  C06B  F099         	movff	?___ftmul+2,exp@x+2
 15688  001412  C097  F08F         	movff	exp@x,floor@x
 15689  001416  C098  F090         	movff	exp@x+1,floor@x+1
 15690  00141A  C099  F091         	movff	exp@x+2,floor@x+2
 15691  00141E  EC8E  F015         	call	_floor	;wreg free
 15692  001422  C08F  F09A         	movff	?_floor,_exp$3596
 15693  001426  C090  F09B         	movff	?_floor+1,_exp$3596+1
 15694  00142A  C091  F09C         	movff	?_floor+2,_exp$3596+2
 15695  00142E  C09A  F078         	movff	_exp$3596,___fttol@f1
 15696  001432  C09B  F079         	movff	_exp$3596+1,___fttol@f1+1
 15697  001436  C09C  F07A         	movff	_exp$3596+2,___fttol@f1+2
 15698  00143A  EC59  F012         	call	___fttol	;wreg free
 15699  00143E  C078  F09D         	movff	?___fttol,exp@exponent
 15700  001442  C079  F09E         	movff	?___fttol+1,exp@exponent+1
 15701  001446  C097  F084         	movff	exp@x,___ftsub@f1
 15702  00144A  C098  F085         	movff	exp@x+1,___ftsub@f1+1
 15703  00144E  C099  F086         	movff	exp@x+2,___ftsub@f1+2
 15704  001452  C09D  F020         	movff	exp@exponent,___awtoft@c
 15705  001456  C09E  F021         	movff	exp@exponent+1,___awtoft@c+1
 15706  00145A  ECA1  F01F         	call	___awtoft	;wreg free
 15707  00145E  C020  F087         	movff	?___awtoft,___ftsub@f2
 15708  001462  C021  F088         	movff	?___awtoft+1,___ftsub@f2+1
 15709  001466  C022  F089         	movff	?___awtoft+2,___ftsub@f2+2
 15710  00146A  ECB1  F01E         	call	___ftsub	;wreg free
 15711  00146E  C084  F097         	movff	?___ftsub,exp@x
 15712  001472  C085  F098         	movff	?___ftsub+1,exp@x+1
 15713  001476  C086  F099         	movff	?___ftsub+2,exp@x+2
 15714  00147A  C097  F084         	movff	exp@x,eval_poly@x
 15715  00147E  C098  F085         	movff	exp@x+1,eval_poly@x+1
 15716  001482  C099  F086         	movff	exp@x+2,eval_poly@x+2
 15717  001486  0E57               	movlw	low exp@coeff
 15718  001488  0100               	movlb	0	; () banked
 15719  00148A  6F87               	movwf	eval_poly@d& (0+255),b
 15720  00148C  0E06               	movlw	high exp@coeff
 15721  00148E  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 15722  001490  0E00               	movlw	0
 15723  001492  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 15724  001494  0E09               	movlw	9
 15725  001496  6F89               	movwf	eval_poly@n& (0+255),b
 15726  001498  ECFF  F015         	call	_eval_poly	;wreg free
 15727  00149C  C084  F08E         	movff	?_eval_poly,ldexp@value
 15728  0014A0  C085  F08F         	movff	?_eval_poly+1,ldexp@value+1
 15729  0014A4  C086  F090         	movff	?_eval_poly+2,ldexp@value+2
 15730  0014A8  C09D  F091         	movff	exp@exponent,ldexp@newexp
 15731  0014AC  C09E  F092         	movff	exp@exponent+1,ldexp@newexp+1
 15732  0014B0  EC6A  F016         	call	_ldexp	;wreg free
 15733  0014B4  C08E  F097         	movff	?_ldexp,exp@x
 15734  0014B8  C08F  F098         	movff	?_ldexp+1,exp@x+1
 15735  0014BC  C090  F099         	movff	?_ldexp+2,exp@x+2
 15736  0014C0  0100               	movlb	0	; () banked
 15737  0014C2  519F               	movf	exp@sign& (0+255),w,b
 15738  0014C4  B4D8               	btfsc	status,2,c
 15739  0014C6  D025               	goto	l2254
 15740                           
 15741                           ; BSR set to: 0
 15742  0014C8  2997               	incf	exp@x& (0+255),w,b
 15743  0014CA  E10E               	bnz	l7650
 15744  0014CC  0E7F               	movlw	127
 15745  0014CE  1998               	xorwf	(exp@x+1)& (0+255),w,b
 15746  0014D0  E10B               	bnz	l7650
 15747  0014D2  0E7F               	movlw	127
 15748  0014D4  1999               	xorwf	(exp@x+2)& (0+255),w,b
 15749  0014D6  A4D8               	btfss	status,2,c
 15750  0014D8  D007               	goto	l2255
 15751                           
 15752                           ; BSR set to: 0
 15753  0014DA  0E00               	movlw	0
 15754  0014DC  6F97               	movwf	?_exp& (0+255),b
 15755  0014DE  0E00               	movlw	0
 15756  0014E0  6F98               	movwf	(?_exp+1)& (0+255),b
 15757  0014E2  0E00               	movlw	0
 15758  0014E4  6F99               	movwf	(?_exp+2)& (0+255),b
 15759                           
 15760                           ; BSR set to: 0
 15761  0014E6  0012               	return	
 15762  0014E8                     l2255:
 15763  0014E8                     l7650:
 15764                           
 15765                           ; BSR set to: 0
 15766  0014E8  0E00               	movlw	0
 15767  0014EA  6E29               	movwf	___ftdiv@f1,c
 15768  0014EC  0E80               	movlw	128
 15769  0014EE  6E2A               	movwf	___ftdiv@f1+1,c
 15770  0014F0  0E3F               	movlw	63
 15771  0014F2  6E2B               	movwf	___ftdiv@f1+2,c
 15772  0014F4  C097  F02C         	movff	exp@x,___ftdiv@f2
 15773  0014F8  C098  F02D         	movff	exp@x+1,___ftdiv@f2+1
 15774  0014FC  C099  F02E         	movff	exp@x+2,___ftdiv@f2+2
 15775  001500  ECC4  F013         	call	___ftdiv	;wreg free
 15776  001504  C029  F097         	movff	?___ftdiv,?_exp
 15777  001508  C02A  F098         	movff	?___ftdiv+1,?_exp+1
 15778  00150C  C02B  F099         	movff	?___ftdiv+2,?_exp+2
 15779  001510  0012               	return	
 15780  001512                     l2254:
 15781                           
 15782                           ; BSR set to: 0
 15783  001512  C097  F097         	movff	exp@x,?_exp
 15784  001516  C098  F098         	movff	exp@x+1,?_exp+1
 15785  00151A  C099  F099         	movff	exp@x+2,?_exp+2
 15786  00151E  0012               	return		;funcret
 15787  001520                     __end_of_exp:
 15788                           	opt stack 0
 15789                           tosu	equ	0xFFF
 15790                           tosh	equ	0xFFE
 15791                           tosl	equ	0xFFD
 15792                           pclath	equ	0xFFA
 15793                           tblptru	equ	0xFF8
 15794                           tblptrh	equ	0xFF7
 15795                           tblptrl	equ	0xFF6
 15796                           tablat	equ	0xFF5
 15797                           prodh	equ	0xFF4
 15798                           prodl	equ	0xFF3
 15799                           intcon	equ	0xFF2
 15800                           intcon2	equ	0xFF1
 15801                           postinc0	equ	0xFEE
 15802                           plusw0	equ	0xFEB
 15803                           wreg	equ	0xFE8
 15804                           indf1	equ	0xFE7
 15805                           postdec1	equ	0xFE5
 15806                           fsr1h	equ	0xFE2
 15807                           fsr1l	equ	0xFE1
 15808                           indf2	equ	0xFDF
 15809                           postinc2	equ	0xFDE
 15810                           postdec2	equ	0xFDD
 15811                           plusw2	equ	0xFDB
 15812                           fsr2h	equ	0xFDA
 15813                           fsr2l	equ	0xFD9
 15814                           status	equ	0xFD8
 15815                           
 15816 ;; *************** function _ldexp *****************
 15817 ;; Defined at:
 15818 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 15819 ;; Parameters:    Size  Location     Type
 15820 ;;  value           3   46[BANK0 ] unsigned char 
 15821 ;;  newexp          2   49[BANK0 ] int 
 15822 ;; Auto vars:     Size  Location     Type
 15823 ;;		None
 15824 ;; Return value:  Size  Location     Type
 15825 ;;                  3   46[BANK0 ] int 
 15826 ;; Registers used:
 15827 ;;		wreg, status,2, status,0
 15828 ;; Tracked objects:
 15829 ;;		On entry : 0/0
 15830 ;;		On exit  : 0/0
 15831 ;;		Unchanged: 0/0
 15832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15833 ;;      Params:         0       5       0       0       0       0       0
 15834 ;;      Locals:         0       0       0       0       0       0       0
 15835 ;;      Temps:          0       2       0       0       0       0       0
 15836 ;;      Totals:         0       7       0       0       0       0       0
 15837 ;;Total ram usage:        7 bytes
 15838 ;; Hardware stack levels used:    1
 15839 ;; Hardware stack levels required when called:    4
 15840 ;; This function calls:
 15841 ;;		Nothing
 15842 ;; This function is called by:
 15843 ;;		_exp
 15844 ;; This function uses a non-reentrant model
 15845 ;;
 15846                           
 15847                           	psect	text89
 15848  002CD4                     __ptext89:
 15849                           	opt stack 0
 15850  002CD4                     _ldexp:
 15851                           	opt stack 20
 15852                           
 15853                           ;incstack = 0
 15854  002CD4  0100               	movlb	0	; () banked
 15855  002CD6  518E               	movf	ldexp@value& (0+255),w,b
 15856  002CD8  118F               	iorwf	(ldexp@value+1)& (0+255),w,b
 15857  002CDA  1190               	iorwf	(ldexp@value+2)& (0+255),w,b
 15858  002CDC  A4D8               	btfss	status,2,c
 15859  002CDE  D007               	goto	l2273
 15860                           
 15861                           ; BSR set to: 0
 15862  002CE0  0E00               	movlw	0
 15863  002CE2  6F8E               	movwf	?_ldexp& (0+255),b
 15864  002CE4  0E00               	movlw	0
 15865  002CE6  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 15866  002CE8  0E00               	movlw	0
 15867  002CEA  6F90               	movwf	(?_ldexp+2)& (0+255),b
 15868                           
 15869                           ; BSR set to: 0
 15870  002CEC  0012               	return	
 15871  002CEE                     l2273:
 15872                           
 15873                           ; BSR set to: 0
 15874                           
 15875                           ; BSR set to: 0
 15876  002CEE  5190               	movf	(ldexp@value+2)& (0+255),w,b
 15877  002CF0  0B7F               	andlw	127
 15878  002CF2  6F93               	movwf	??_ldexp& (0+255),b
 15879  002CF4  6B94               	clrf	(??_ldexp+1)& (0+255),b
 15880  002CF6  90D8               	bcf	status,0,c
 15881  002CF8  3793               	rlcf	??_ldexp& (0+255),f,b
 15882  002CFA  3794               	rlcf	(??_ldexp+1)& (0+255),f,b
 15883  002CFC  5193               	movf	??_ldexp& (0+255),w,b
 15884  002CFE  2791               	addwf	ldexp@newexp& (0+255),f,b
 15885  002D00  5194               	movf	(??_ldexp+1)& (0+255),w,b
 15886  002D02  2392               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 15887  002D04  AF8F               	btfss	(ldexp@value+1)& (0+255),7,b
 15888  002D06  D003               	goto	u7400
 15889  002D08  6B93               	clrf	??_ldexp& (0+255),b
 15890  002D0A  2B93               	incf	??_ldexp& (0+255),f,b
 15891  002D0C  D002               	goto	u7408
 15892  002D0E                     u7400:
 15893  002D0E  0100               	movlb	0	; () banked
 15894  002D10  6B93               	clrf	??_ldexp& (0+255),b
 15895  002D12                     u7408:
 15896  002D12  5193               	movf	??_ldexp& (0+255),w,b
 15897  002D14  2791               	addwf	ldexp@newexp& (0+255),f,b
 15898  002D16  0E00               	movlw	0
 15899  002D18  2392               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 15900  002D1A  AF92               	btfss	(ldexp@newexp+1)& (0+255),7,b
 15901  002D1C  D00D               	goto	l2275
 15902                           
 15903                           ; BSR set to: 0
 15904  002D1E  0E00               	movlw	0
 15905  002D20  0101               	movlb	1	; () banked
 15906  002D22  6F2D               	movwf	(_errno+1)& (0+255),b
 15907  002D24  0E22               	movlw	34
 15908  002D26  6F2C               	movwf	_errno& (0+255),b
 15909  002D28  0E00               	movlw	0
 15910  002D2A  0100               	movlb	0	; () banked
 15911  002D2C  6F8E               	movwf	?_ldexp& (0+255),b
 15912  002D2E  0E00               	movlw	0
 15913  002D30  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 15914  002D32  0E00               	movlw	0
 15915  002D34                     L3:
 15916  002D34  6F90               	movwf	(?_ldexp+2)& (0+255),b
 15917                           
 15918                           ; BSR set to: 0
 15919  002D36  0012               	return	
 15920  002D38                     l2275:
 15921                           
 15922                           ; BSR set to: 0
 15923                           
 15924                           ; BSR set to: 0
 15925  002D38  BF92               	btfsc	(ldexp@newexp+1)& (0+255),7,b
 15926  002D3A  D017               	goto	l2277
 15927  002D3C  0592               	decf	(ldexp@newexp+1)& (0+255),w,b
 15928  002D3E  A0D8               	btfss	status,0,c
 15929  002D40  D014               	goto	l2277
 15930                           
 15931                           ; BSR set to: 0
 15932  002D42  0E00               	movlw	0
 15933  002D44  0101               	movlb	1	; () banked
 15934  002D46  6F2D               	movwf	(_errno+1)& (0+255),b
 15935  002D48  0E22               	movlw	34
 15936  002D4A  6F2C               	movwf	_errno& (0+255),b
 15937                           
 15938                           ; BSR set to: 1
 15939  002D4C  0100               	movlb	0	; () banked
 15940  002D4E  AF90               	btfss	(ldexp@value+2)& (0+255),7,b
 15941  002D50  D006               	goto	l2278
 15942                           
 15943                           ; BSR set to: 0
 15944  002D52  0EFF               	movlw	255
 15945  002D54  6F8E               	movwf	?_ldexp& (0+255),b
 15946  002D56  0E7F               	movlw	127
 15947  002D58  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 15948  002D5A  0EFF               	movlw	255
 15949  002D5C  D7EB               	goto	L3
 15950  002D5E                     l2278:
 15951                           
 15952                           ; BSR set to: 0
 15953                           
 15954                           ; BSR set to: 0
 15955  002D5E  0EFF               	movlw	255
 15956  002D60  6F8E               	movwf	?_ldexp& (0+255),b
 15957  002D62  0E7F               	movlw	127
 15958  002D64  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 15959  002D66  0E7F               	movlw	127
 15960  002D68  D7E5               	goto	L3
 15961  002D6A                     l2277:
 15962                           
 15963                           ; BSR set to: 0
 15964                           
 15965                           ; BSR set to: 0
 15966  002D6A  3592               	rlcf	(ldexp@newexp+1)& (0+255),w,b
 15967  002D6C  3192               	rrcf	(ldexp@newexp+1)& (0+255),w,b
 15968  002D6E  6F94               	movwf	(??_ldexp+1)& (0+255),b
 15969  002D70  3191               	rrcf	ldexp@newexp& (0+255),w,b
 15970  002D72  6F93               	movwf	??_ldexp& (0+255),b
 15971  002D74  5190               	movf	(ldexp@value+2)& (0+255),w,b
 15972  002D76  1993               	xorwf	??_ldexp& (0+255),w,b
 15973  002D78  0B80               	andlw	-128
 15974  002D7A  1993               	xorwf	??_ldexp& (0+255),w,b
 15975  002D7C  6F90               	movwf	(ldexp@value+2)& (0+255),b
 15976  002D7E  C091  F093         	movff	ldexp@newexp,??_ldexp
 15977  002D82  0E01               	movlw	1
 15978  002D84  1793               	andwf	??_ldexp& (0+255),f,b
 15979  002D86  3393               	rrcf	??_ldexp& (0+255),f,b
 15980  002D88  3393               	rrcf	??_ldexp& (0+255),f,b
 15981  002D8A  518F               	movf	(ldexp@value+1)& (0+255),w,b
 15982  002D8C  1993               	xorwf	??_ldexp& (0+255),w,b
 15983  002D8E  0B7F               	andlw	-129
 15984  002D90  1993               	xorwf	??_ldexp& (0+255),w,b
 15985  002D92  6F8F               	movwf	(ldexp@value+1)& (0+255),b
 15986                           
 15987                           ; BSR set to: 0
 15988                           
 15989                           ; BSR set to: 0
 15990                           
 15991                           ; BSR set to: 0
 15992  002D94  C08E  F08E         	movff	ldexp@value,?_ldexp
 15993  002D98  C08F  F08F         	movff	ldexp@value+1,?_ldexp+1
 15994  002D9C  C090  F090         	movff	ldexp@value+2,?_ldexp+2
 15995  002DA0  0012               	return	
 15996  002DA2                     __end_of_ldexp:
 15997                           	opt stack 0
 15998                           tosu	equ	0xFFF
 15999                           tosh	equ	0xFFE
 16000                           tosl	equ	0xFFD
 16001                           pclath	equ	0xFFA
 16002                           tblptru	equ	0xFF8
 16003                           tblptrh	equ	0xFF7
 16004                           tblptrl	equ	0xFF6
 16005                           tablat	equ	0xFF5
 16006                           prodh	equ	0xFF4
 16007                           prodl	equ	0xFF3
 16008                           intcon	equ	0xFF2
 16009                           intcon2	equ	0xFF1
 16010                           postinc0	equ	0xFEE
 16011                           plusw0	equ	0xFEB
 16012                           wreg	equ	0xFE8
 16013                           indf1	equ	0xFE7
 16014                           postdec1	equ	0xFE5
 16015                           fsr1h	equ	0xFE2
 16016                           fsr1l	equ	0xFE1
 16017                           indf2	equ	0xFDF
 16018                           postinc2	equ	0xFDE
 16019                           postdec2	equ	0xFDD
 16020                           plusw2	equ	0xFDB
 16021                           fsr2h	equ	0xFDA
 16022                           fsr2l	equ	0xFD9
 16023                           status	equ	0xFD8
 16024                           
 16025 ;; *************** function _floor *****************
 16026 ;; Defined at:
 16027 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
 16028 ;; Parameters:    Size  Location     Type
 16029 ;;  x               3   47[BANK0 ] int 
 16030 ;; Auto vars:     Size  Location     Type
 16031 ;;  i               3   50[BANK0 ] int 
 16032 ;;  expon           2   53[BANK0 ] int 
 16033 ;; Return value:  Size  Location     Type
 16034 ;;                  3   47[BANK0 ] int 
 16035 ;; Registers used:
 16036 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16037 ;; Tracked objects:
 16038 ;;		On entry : 0/0
 16039 ;;		On exit  : 0/0
 16040 ;;		Unchanged: 0/0
 16041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16042 ;;      Params:         0       3       0       0       0       0       0
 16043 ;;      Locals:         0       5       0       0       0       0       0
 16044 ;;      Temps:          0       0       0       0       0       0       0
 16045 ;;      Totals:         0       8       0       0       0       0       0
 16046 ;;Total ram usage:        8 bytes
 16047 ;; Hardware stack levels used:    1
 16048 ;; Hardware stack levels required when called:    6
 16049 ;; This function calls:
 16050 ;;		___altoft
 16051 ;;		___ftadd
 16052 ;;		___ftge
 16053 ;;		___fttol
 16054 ;;		_frexp
 16055 ;; This function is called by:
 16056 ;;		_exp
 16057 ;; This function uses a non-reentrant model
 16058 ;;
 16059                           
 16060                           	psect	text90
 16061  002B1C                     __ptext90:
 16062                           	opt stack 0
 16063  002B1C                     _floor:
 16064                           	opt stack 18
 16065                           
 16066                           ; BSR set to: 0
 16067                           ;incstack = 0
 16068  002B1C  C08F  F018         	movff	floor@x,frexp@value
 16069  002B20  C090  F019         	movff	floor@x+1,frexp@value+1
 16070  002B24  C091  F01A         	movff	floor@x+2,frexp@value+2
 16071  002B28  0E95               	movlw	low floor@expon
 16072  002B2A  6E1B               	movwf	frexp@eptr,c
 16073  002B2C  0E00               	movlw	high floor@expon
 16074  002B2E  6E1C               	movwf	frexp@eptr+1,c
 16075  002B30  EC89  F019         	call	_frexp	;wreg free
 16076  002B34  0100               	movlb	0	; () banked
 16077  002B36  AF96               	btfss	(floor@expon+1)& (0+255),7,b
 16078  002B38  D010               	goto	l2260
 16079                           
 16080                           ; BSR set to: 0
 16081  002B3A  AF91               	btfss	(floor@x+2)& (0+255),7,b
 16082  002B3C  D007               	goto	l2261
 16083                           
 16084                           ; BSR set to: 0
 16085  002B3E  0E00               	movlw	0
 16086  002B40  6F8F               	movwf	?_floor& (0+255),b
 16087  002B42  0E80               	movlw	128
 16088  002B44  6F90               	movwf	(?_floor+1)& (0+255),b
 16089  002B46  0EBF               	movlw	191
 16090  002B48  6F91               	movwf	(?_floor+2)& (0+255),b
 16091                           
 16092                           ; BSR set to: 0
 16093  002B4A  0012               	return	
 16094  002B4C                     l2261:
 16095                           
 16096                           ; BSR set to: 0
 16097                           
 16098                           ; BSR set to: 0
 16099  002B4C  0E00               	movlw	0
 16100  002B4E  6F8F               	movwf	?_floor& (0+255),b
 16101  002B50  0E00               	movlw	0
 16102  002B52  6F90               	movwf	(?_floor+1)& (0+255),b
 16103  002B54  0E00               	movlw	0
 16104  002B56  6F91               	movwf	(?_floor+2)& (0+255),b
 16105                           
 16106                           ; BSR set to: 0
 16107  002B58  0012               	return	
 16108  002B5A                     l2260:
 16109                           
 16110                           ; BSR set to: 0
 16111                           
 16112                           ; BSR set to: 0
 16113  002B5A  5196               	movf	(floor@expon+1)& (0+255),w,b
 16114  002B5C  E104               	bnz	u7360
 16115  002B5E  0E15               	movlw	21
 16116  002B60  5D95               	subwf	floor@expon& (0+255),w,b
 16117  002B62  A0D8               	btfss	status,0,c
 16118  002B64  D007               	goto	l2263
 16119  002B66                     u7360:
 16120                           
 16121                           ; BSR set to: 0
 16122  002B66  C08F  F08F         	movff	floor@x,?_floor
 16123  002B6A  C090  F090         	movff	floor@x+1,?_floor+1
 16124  002B6E  C091  F091         	movff	floor@x+2,?_floor+2
 16125  002B72  0012               	return	
 16126  002B74                     l2263:
 16127                           
 16128                           ; BSR set to: 0
 16129                           
 16130                           ; BSR set to: 0
 16131  002B74  C08F  F078         	movff	floor@x,___fttol@f1
 16132  002B78  C090  F079         	movff	floor@x+1,___fttol@f1+1
 16133  002B7C  C091  F07A         	movff	floor@x+2,___fttol@f1+2
 16134  002B80  EC59  F012         	call	___fttol	;wreg free
 16135  002B84  C078  F087         	movff	?___fttol,___altoft@c
 16136  002B88  C079  F088         	movff	?___fttol+1,___altoft@c+1
 16137  002B8C  C07A  F089         	movff	?___fttol+2,___altoft@c+2
 16138  002B90  C07B  F08A         	movff	?___fttol+3,___altoft@c+3
 16139  002B94  ECDE  F01A         	call	___altoft	;wreg free
 16140  002B98  C087  F092         	movff	?___altoft,floor@i
 16141  002B9C  C088  F093         	movff	?___altoft+1,floor@i+1
 16142  002BA0  C089  F094         	movff	?___altoft+2,floor@i+2
 16143  002BA4  C08F  F018         	movff	floor@x,___ftge@ff1
 16144  002BA8  C090  F019         	movff	floor@x+1,___ftge@ff1+1
 16145  002BAC  C091  F01A         	movff	floor@x+2,___ftge@ff1+2
 16146  002BB0  C092  F01B         	movff	floor@i,___ftge@ff2
 16147  002BB4  C093  F01C         	movff	floor@i+1,___ftge@ff2+1
 16148  002BB8  C094  F01D         	movff	floor@i+2,___ftge@ff2+2
 16149  002BBC  ECD1  F019         	call	___ftge	;wreg free
 16150  002BC0  B0D8               	btfsc	status,0,c
 16151  002BC2  D016               	goto	l2264
 16152  002BC4  C092  F078         	movff	floor@i,___ftadd@f1
 16153  002BC8  C093  F079         	movff	floor@i+1,___ftadd@f1+1
 16154  002BCC  C094  F07A         	movff	floor@i+2,___ftadd@f1+2
 16155  002BD0  0E00               	movlw	0
 16156  002BD2  0100               	movlb	0	; () banked
 16157  002BD4  6F7B               	movwf	___ftadd@f2& (0+255),b
 16158  002BD6  0E80               	movlw	128
 16159  002BD8  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 16160  002BDA  0EBF               	movlw	191
 16161  002BDC  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 16162  002BDE  EC5A  F00D         	call	___ftadd	;wreg free
 16163  002BE2  C078  F08F         	movff	?___ftadd,?_floor
 16164  002BE6  C079  F090         	movff	?___ftadd+1,?_floor+1
 16165  002BEA  C07A  F091         	movff	?___ftadd+2,?_floor+2
 16166  002BEE  0012               	return	
 16167  002BF0                     l2264:
 16168  002BF0  C092  F08F         	movff	floor@i,?_floor
 16169  002BF4  C093  F090         	movff	floor@i+1,?_floor+1
 16170  002BF8  C094  F091         	movff	floor@i+2,?_floor+2
 16171  002BFC  0012               	return		;funcret
 16172  002BFE                     __end_of_floor:
 16173                           	opt stack 0
 16174                           tosu	equ	0xFFF
 16175                           tosh	equ	0xFFE
 16176                           tosl	equ	0xFFD
 16177                           pclath	equ	0xFFA
 16178                           tblptru	equ	0xFF8
 16179                           tblptrh	equ	0xFF7
 16180                           tblptrl	equ	0xFF6
 16181                           tablat	equ	0xFF5
 16182                           prodh	equ	0xFF4
 16183                           prodl	equ	0xFF3
 16184                           intcon	equ	0xFF2
 16185                           intcon2	equ	0xFF1
 16186                           postinc0	equ	0xFEE
 16187                           plusw0	equ	0xFEB
 16188                           wreg	equ	0xFE8
 16189                           indf1	equ	0xFE7
 16190                           postdec1	equ	0xFE5
 16191                           fsr1h	equ	0xFE2
 16192                           fsr1l	equ	0xFE1
 16193                           indf2	equ	0xFDF
 16194                           postinc2	equ	0xFDE
 16195                           postdec2	equ	0xFDD
 16196                           plusw2	equ	0xFDB
 16197                           fsr2h	equ	0xFDA
 16198                           fsr2l	equ	0xFD9
 16199                           status	equ	0xFD8
 16200                           
 16201 ;; *************** function _frexp *****************
 16202 ;; Defined at:
 16203 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 16204 ;; Parameters:    Size  Location     Type
 16205 ;;  value           3   23[COMRAM] int 
 16206 ;;  eptr            2   26[COMRAM] PTR int 
 16207 ;;		 -> log@exponent(2), floor@expon(2), 
 16208 ;; Auto vars:     Size  Location     Type
 16209 ;;		None
 16210 ;; Return value:  Size  Location     Type
 16211 ;;                  3   23[COMRAM] PTR int 
 16212 ;; Registers used:
 16213 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16214 ;; Tracked objects:
 16215 ;;		On entry : 0/0
 16216 ;;		On exit  : 0/0
 16217 ;;		Unchanged: 0/0
 16218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16219 ;;      Params:         5       0       0       0       0       0       0
 16220 ;;      Locals:         0       0       0       0       0       0       0
 16221 ;;      Temps:          2       0       0       0       0       0       0
 16222 ;;      Totals:         7       0       0       0       0       0       0
 16223 ;;Total ram usage:        7 bytes
 16224 ;; Hardware stack levels used:    1
 16225 ;; Hardware stack levels required when called:    4
 16226 ;; This function calls:
 16227 ;;		Nothing
 16228 ;; This function is called by:
 16229 ;;		_floor
 16230 ;;		_log
 16231 ;; This function uses a non-reentrant model
 16232 ;;
 16233                           
 16234                           	psect	text91
 16235  003312                     __ptext91:
 16236                           	opt stack 0
 16237  003312                     _frexp:
 16238                           	opt stack 20
 16239                           
 16240                           ;incstack = 0
 16241  003312  5018               	movf	frexp@value,w,c
 16242  003314  1019               	iorwf	frexp@value+1,w,c
 16243  003316  101A               	iorwf	frexp@value+2,w,c
 16244  003318  A4D8               	btfss	status,2,c
 16245  00331A  D00F               	goto	l2269
 16246  00331C  C01B  FFD9         	movff	frexp@eptr,fsr2l
 16247  003320  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 16248  003324  0E00               	movlw	0
 16249  003326  6EDE               	movwf	postinc2,c
 16250  003328  0E00               	movlw	0
 16251  00332A  6EDD               	movwf	postdec2,c
 16252  00332C  0E00               	movlw	0
 16253  00332E  6E18               	movwf	?_frexp,c
 16254  003330  0E00               	movlw	0
 16255  003332  6E19               	movwf	?_frexp+1,c
 16256  003334  0E00               	movlw	0
 16257  003336  6E1A               	movwf	?_frexp+2,c
 16258  003338  0012               	return	
 16259  00333A                     l2269:
 16260  00333A  501A               	movf	frexp@value+2,w,c
 16261  00333C  0B7F               	andlw	127
 16262  00333E  6E1D               	movwf	??_frexp& (0+255),c
 16263  003340  6A1E               	clrf	(??_frexp+1)& (0+255),c
 16264  003342  90D8               	bcf	status,0,c
 16265  003344  361D               	rlcf	??_frexp,f,c
 16266  003346  361E               	rlcf	??_frexp+1,f,c
 16267  003348  C01B  FFD9         	movff	frexp@eptr,fsr2l
 16268  00334C  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 16269  003350  C01D  FFDE         	movff	??_frexp,postinc2
 16270  003354  C01E  FFDD         	movff	??_frexp+1,postdec2
 16271  003358  AE19               	btfss	frexp@value+1,7,c
 16272  00335A  D003               	goto	u7240
 16273  00335C  6A1D               	clrf	??_frexp& (0+255),c
 16274  00335E  2A1D               	incf	??_frexp& (0+255),f,c
 16275  003360  D001               	goto	u7248
 16276  003362                     u7240:
 16277  003362  6A1D               	clrf	??_frexp& (0+255),c
 16278  003364                     u7248:
 16279  003364  501D               	movf	??_frexp,w,c
 16280  003366  C01B  FFD9         	movff	frexp@eptr,fsr2l
 16281  00336A  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 16282  00336E  12DE               	iorwf	postinc2,f,c
 16283  003370  0E00               	movlw	0
 16284  003372  12DD               	iorwf	postdec2,f,c
 16285  003374  C01B  FFD9         	movff	frexp@eptr,fsr2l
 16286  003378  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 16287  00337C  0E82               	movlw	130
 16288  00337E  26DE               	addwf	postinc2,f,c
 16289  003380  0EFF               	movlw	255
 16290  003382  22DD               	addwfc	postdec2,f,c
 16291  003384  801A               	bsf	frexp@value+2,0,c
 16292  003386  821A               	bsf	frexp@value+2,1,c
 16293  003388  841A               	bsf	frexp@value+2,2,c
 16294  00338A  861A               	bsf	frexp@value+2,3,c
 16295  00338C  881A               	bsf	frexp@value+2,4,c
 16296  00338E  8A1A               	bsf	frexp@value+2,5,c
 16297  003390  9C1A               	bcf	frexp@value+2,6,c
 16298  003392  9E19               	bcf	frexp@value+1,7,c
 16299  003394  C018  F018         	movff	frexp@value,?_frexp
 16300  003398  C019  F019         	movff	frexp@value+1,?_frexp+1
 16301  00339C  C01A  F01A         	movff	frexp@value+2,?_frexp+2
 16302  0033A0  0012               	return	
 16303  0033A2                     __end_of_frexp:
 16304                           	opt stack 0
 16305                           tosu	equ	0xFFF
 16306                           tosh	equ	0xFFE
 16307                           tosl	equ	0xFFD
 16308                           pclath	equ	0xFFA
 16309                           tblptru	equ	0xFF8
 16310                           tblptrh	equ	0xFF7
 16311                           tblptrl	equ	0xFF6
 16312                           tablat	equ	0xFF5
 16313                           prodh	equ	0xFF4
 16314                           prodl	equ	0xFF3
 16315                           intcon	equ	0xFF2
 16316                           intcon2	equ	0xFF1
 16317                           postinc0	equ	0xFEE
 16318                           plusw0	equ	0xFEB
 16319                           wreg	equ	0xFE8
 16320                           indf1	equ	0xFE7
 16321                           postdec1	equ	0xFE5
 16322                           fsr1h	equ	0xFE2
 16323                           fsr1l	equ	0xFE1
 16324                           indf2	equ	0xFDF
 16325                           postinc2	equ	0xFDE
 16326                           postdec2	equ	0xFDD
 16327                           plusw2	equ	0xFDB
 16328                           fsr2h	equ	0xFDA
 16329                           fsr2l	equ	0xFD9
 16330                           status	equ	0xFD8
 16331                           
 16332 ;; *************** function ___fttol *****************
 16333 ;; Defined at:
 16334 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 16335 ;; Parameters:    Size  Location     Type
 16336 ;;  f1              3   24[BANK0 ] float 
 16337 ;; Auto vars:     Size  Location     Type
 16338 ;;  lval            4   34[BANK0 ] unsigned long 
 16339 ;;  exp1            1   38[BANK0 ] unsigned char 
 16340 ;;  sign1           1   33[BANK0 ] unsigned char 
 16341 ;; Return value:  Size  Location     Type
 16342 ;;                  4   24[BANK0 ] long 
 16343 ;; Registers used:
 16344 ;;		wreg, status,2, status,0
 16345 ;; Tracked objects:
 16346 ;;		On entry : 0/0
 16347 ;;		On exit  : 0/0
 16348 ;;		Unchanged: 0/0
 16349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16350 ;;      Params:         0       4       0       0       0       0       0
 16351 ;;      Locals:         0       6       0       0       0       0       0
 16352 ;;      Temps:          0       5       0       0       0       0       0
 16353 ;;      Totals:         0      15       0       0       0       0       0
 16354 ;;Total ram usage:       15 bytes
 16355 ;; Hardware stack levels used:    1
 16356 ;; Hardware stack levels required when called:    4
 16357 ;; This function calls:
 16358 ;;		Nothing
 16359 ;; This function is called by:
 16360 ;;		_AdcConvert
 16361 ;;		_ReadIntFromEeprom
 16362 ;;		_pow
 16363 ;;		_exp
 16364 ;;		_floor
 16365 ;; This function uses a non-reentrant model
 16366 ;;
 16367                           
 16368                           	psect	text92
 16369  0024B2                     __ptext92:
 16370                           	opt stack 0
 16371  0024B2                     ___fttol:
 16372                           	opt stack 19
 16373                           
 16374                           ;incstack = 0
 16375  0024B2  C07A  F07C         	movff	___fttol@f1+2,??___fttol
 16376  0024B6  0100               	movlb	0	; () banked
 16377  0024B8  6B7D               	clrf	(??___fttol+1)& (0+255),b
 16378  0024BA  6B7E               	clrf	(??___fttol+2)& (0+255),b
 16379  0024BC  3579               	rlcf	(___fttol@f1+1)& (0+255),w,b
 16380  0024BE  377C               	rlcf	??___fttol& (0+255),f,b
 16381  0024C0  E301               	bnc	u7151
 16382  0024C2  817D               	bsf	(??___fttol+1)& (0+255),0,b
 16383  0024C4                     u7151:
 16384  0024C4  517C               	movf	??___fttol& (0+255),w,b
 16385  0024C6  6F86               	movwf	___fttol@exp1& (0+255),b
 16386  0024C8  5186               	movf	___fttol@exp1& (0+255),w,b
 16387  0024CA  A4D8               	btfss	status,2,c
 16388  0024CC  D009               	goto	l1926
 16389                           
 16390                           ; BSR set to: 0
 16391  0024CE  0E00               	movlw	0
 16392  0024D0  6F78               	movwf	?___fttol& (0+255),b
 16393  0024D2  0E00               	movlw	0
 16394  0024D4  6F79               	movwf	(?___fttol+1)& (0+255),b
 16395  0024D6  0E00               	movlw	0
 16396  0024D8  6F7A               	movwf	(?___fttol+2)& (0+255),b
 16397  0024DA  0E00               	movlw	0
 16398  0024DC  6F7B               	movwf	(?___fttol+3)& (0+255),b
 16399                           
 16400                           ; BSR set to: 0
 16401  0024DE  0012               	return	
 16402  0024E0                     l1926:
 16403                           
 16404                           ; BSR set to: 0
 16405                           
 16406                           ; BSR set to: 0
 16407  0024E0  0E17               	movlw	23
 16408  0024E2  6F7C               	movwf	??___fttol& (0+255),b
 16409  0024E4  C078  F07D         	movff	___fttol@f1,??___fttol+1
 16410  0024E8  C079  F07E         	movff	___fttol@f1+1,??___fttol+2
 16411  0024EC  C07A  F07F         	movff	___fttol@f1+2,??___fttol+3
 16412  0024F0  297C               	incf	??___fttol& (0+255),w,b
 16413  0024F2  6F80               	movwf	(??___fttol+4)& (0+255),b
 16414  0024F4  D004               	goto	u7170
 16415  0024F6                     u7175:
 16416  0024F6  90D8               	bcf	status,0,c
 16417  0024F8  337F               	rrcf	(??___fttol+3)& (0+255),f,b
 16418  0024FA  337E               	rrcf	(??___fttol+2)& (0+255),f,b
 16419  0024FC  337D               	rrcf	(??___fttol+1)& (0+255),f,b
 16420  0024FE                     u7170:
 16421  0024FE  2F80               	decfsz	(??___fttol+4)& (0+255),f,b
 16422  002500  D7FA               	goto	u7175
 16423  002502  0100               	movlb	0	; () banked
 16424  002504  517D               	movf	(??___fttol+1)& (0+255),w,b
 16425  002506  6F81               	movwf	___fttol@sign1& (0+255),b
 16426                           
 16427                           ; BSR set to: 0
 16428  002508  8F79               	bsf	(___fttol@f1+1)& (0+255),7,b
 16429                           
 16430                           ; BSR set to: 0
 16431  00250A  0EFF               	movlw	255
 16432  00250C  1778               	andwf	___fttol@f1& (0+255),f,b
 16433  00250E  0EFF               	movlw	255
 16434  002510  1779               	andwf	(___fttol@f1+1)& (0+255),f,b
 16435  002512  0E00               	movlw	0
 16436  002514  177A               	andwf	(___fttol@f1+2)& (0+255),f,b
 16437                           
 16438                           ; BSR set to: 0
 16439  002516  5178               	movf	___fttol@f1& (0+255),w,b
 16440  002518  6F82               	movwf	___fttol@lval& (0+255),b
 16441  00251A  5179               	movf	(___fttol@f1+1)& (0+255),w,b
 16442  00251C  6F83               	movwf	(___fttol@lval+1)& (0+255),b
 16443  00251E  517A               	movf	(___fttol@f1+2)& (0+255),w,b
 16444  002520  6F84               	movwf	(___fttol@lval+2)& (0+255),b
 16445  002522  6B85               	clrf	(___fttol@lval+3)& (0+255),b
 16446                           
 16447                           ; BSR set to: 0
 16448  002524  0E8E               	movlw	142
 16449  002526  5F86               	subwf	___fttol@exp1& (0+255),f,b
 16450                           
 16451                           ; BSR set to: 0
 16452  002528  AF86               	btfss	___fttol@exp1& (0+255),7,b
 16453  00252A  D016               	goto	l1928
 16454                           
 16455                           ; BSR set to: 0
 16456  00252C  5186               	movf	___fttol@exp1& (0+255),w,b
 16457  00252E  0A80               	xorlw	128
 16458  002530  0F8F               	addlw	143
 16459  002532  B0D8               	btfsc	status,0,c
 16460  002534  D009               	goto	l1929
 16461                           
 16462                           ; BSR set to: 0
 16463  002536  0E00               	movlw	0
 16464  002538  6F78               	movwf	?___fttol& (0+255),b
 16465  00253A  0E00               	movlw	0
 16466  00253C  6F79               	movwf	(?___fttol+1)& (0+255),b
 16467  00253E  0E00               	movlw	0
 16468  002540  6F7A               	movwf	(?___fttol+2)& (0+255),b
 16469  002542  0E00               	movlw	0
 16470  002544  6F7B               	movwf	(?___fttol+3)& (0+255),b
 16471                           
 16472                           ; BSR set to: 0
 16473  002546  0012               	return	
 16474  002548                     l1929:
 16475                           
 16476                           ; BSR set to: 0
 16477                           
 16478                           ; BSR set to: 0
 16479                           
 16480                           ; BSR set to: 0
 16481  002548  90D8               	bcf	status,0,c
 16482  00254A  3385               	rrcf	(___fttol@lval+3)& (0+255),f,b
 16483  00254C  3384               	rrcf	(___fttol@lval+2)& (0+255),f,b
 16484  00254E  3383               	rrcf	(___fttol@lval+1)& (0+255),f,b
 16485  002550  3382               	rrcf	___fttol@lval& (0+255),f,b
 16486                           
 16487                           ; BSR set to: 0
 16488  002552  3F86               	incfsz	___fttol@exp1& (0+255),f,b
 16489  002554  D7F9               	goto	l1929
 16490                           
 16491                           ; BSR set to: 0
 16492  002556  D015               	goto	u7210
 16493  002558                     l1928:
 16494                           
 16495                           ; BSR set to: 0
 16496                           
 16497                           ; BSR set to: 0
 16498  002558  0E17               	movlw	23
 16499  00255A  6586               	cpfsgt	___fttol@exp1& (0+255),b
 16500  00255C  D00F               	goto	l1934
 16501                           
 16502                           ; BSR set to: 0
 16503  00255E  0E00               	movlw	0
 16504  002560  6F78               	movwf	?___fttol& (0+255),b
 16505  002562  0E00               	movlw	0
 16506  002564  6F79               	movwf	(?___fttol+1)& (0+255),b
 16507  002566  0E00               	movlw	0
 16508  002568  6F7A               	movwf	(?___fttol+2)& (0+255),b
 16509  00256A  0E00               	movlw	0
 16510  00256C  6F7B               	movwf	(?___fttol+3)& (0+255),b
 16511                           
 16512                           ; BSR set to: 0
 16513  00256E  0012               	return	
 16514  002570                     
 16515                           ; BSR set to: 0
 16516                           
 16517                           ; BSR set to: 0
 16518  002570  90D8               	bcf	status,0,c
 16519  002572  3782               	rlcf	___fttol@lval& (0+255),f,b
 16520  002574  3783               	rlcf	(___fttol@lval+1)& (0+255),f,b
 16521  002576  3784               	rlcf	(___fttol@lval+2)& (0+255),f,b
 16522  002578  3785               	rlcf	(___fttol@lval+3)& (0+255),f,b
 16523  00257A  0786               	decf	___fttol@exp1& (0+255),f,b
 16524  00257C                     l1934:
 16525                           
 16526                           ; BSR set to: 0
 16527                           
 16528                           ; BSR set to: 0
 16529  00257C  5186               	movf	___fttol@exp1& (0+255),w,b
 16530  00257E  A4D8               	btfss	status,2,c
 16531  002580  D7F7               	goto	l1935
 16532  002582                     u7210:
 16533                           
 16534                           ; BSR set to: 0
 16535                           
 16536                           ; BSR set to: 0
 16537                           
 16538                           ; BSR set to: 0
 16539  002582  5181               	movf	___fttol@sign1& (0+255),w,b
 16540  002584  B4D8               	btfsc	status,2,c
 16541  002586  D008               	goto	l1937
 16542                           
 16543                           ; BSR set to: 0
 16544  002588  1F85               	comf	(___fttol@lval+3)& (0+255),f,b
 16545  00258A  1F84               	comf	(___fttol@lval+2)& (0+255),f,b
 16546  00258C  1F83               	comf	(___fttol@lval+1)& (0+255),f,b
 16547  00258E  6D82               	negf	___fttol@lval& (0+255),b
 16548  002590  0E00               	movlw	0
 16549  002592  2383               	addwfc	(___fttol@lval+1)& (0+255),f,b
 16550  002594  2384               	addwfc	(___fttol@lval+2)& (0+255),f,b
 16551  002596  2385               	addwfc	(___fttol@lval+3)& (0+255),f,b
 16552  002598                     l1937:
 16553                           
 16554                           ; BSR set to: 0
 16555                           
 16556                           ; BSR set to: 0
 16557  002598  C082  F078         	movff	___fttol@lval,?___fttol
 16558  00259C  C083  F079         	movff	___fttol@lval+1,?___fttol+1
 16559  0025A0  C084  F07A         	movff	___fttol@lval+2,?___fttol+2
 16560  0025A4  C085  F07B         	movff	___fttol@lval+3,?___fttol+3
 16561  0025A8  0012               	return	
 16562  0025AA                     __end_of___fttol:
 16563                           	opt stack 0
 16564                           tosu	equ	0xFFF
 16565                           tosh	equ	0xFFE
 16566                           tosl	equ	0xFFD
 16567                           pclath	equ	0xFFA
 16568                           tblptru	equ	0xFF8
 16569                           tblptrh	equ	0xFF7
 16570                           tblptrl	equ	0xFF6
 16571                           tablat	equ	0xFF5
 16572                           prodh	equ	0xFF4
 16573                           prodl	equ	0xFF3
 16574                           intcon	equ	0xFF2
 16575                           intcon2	equ	0xFF1
 16576                           postinc0	equ	0xFEE
 16577                           plusw0	equ	0xFEB
 16578                           wreg	equ	0xFE8
 16579                           indf1	equ	0xFE7
 16580                           postdec1	equ	0xFE5
 16581                           fsr1h	equ	0xFE2
 16582                           fsr1l	equ	0xFE1
 16583                           indf2	equ	0xFDF
 16584                           postinc2	equ	0xFDE
 16585                           postdec2	equ	0xFDD
 16586                           plusw2	equ	0xFDB
 16587                           fsr2h	equ	0xFDA
 16588                           fsr2l	equ	0xFD9
 16589                           status	equ	0xFD8
 16590                           
 16591 ;; *************** function ___ftge *****************
 16592 ;; Defined at:
 16593 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 16594 ;; Parameters:    Size  Location     Type
 16595 ;;  ff1             3   23[COMRAM] float 
 16596 ;;  ff2             3   26[COMRAM] float 
 16597 ;; Auto vars:     Size  Location     Type
 16598 ;;		None
 16599 ;; Return value:  Size  Location     Type
 16600 ;;		None               void
 16601 ;; Registers used:
 16602 ;;		wreg, status,2, status,0
 16603 ;; Tracked objects:
 16604 ;;		On entry : 0/0
 16605 ;;		On exit  : 0/0
 16606 ;;		Unchanged: 0/0
 16607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16608 ;;      Params:         6       0       0       0       0       0       0
 16609 ;;      Locals:         0       0       0       0       0       0       0
 16610 ;;      Temps:          3       0       0       0       0       0       0
 16611 ;;      Totals:         9       0       0       0       0       0       0
 16612 ;;Total ram usage:        9 bytes
 16613 ;; Hardware stack levels used:    1
 16614 ;; Hardware stack levels required when called:    4
 16615 ;; This function calls:
 16616 ;;		Nothing
 16617 ;; This function is called by:
 16618 ;;		_CheckFlashPrecentage
 16619 ;;		_pow
 16620 ;;		_exp
 16621 ;;		_floor
 16622 ;; This function uses a non-reentrant model
 16623 ;;
 16624                           
 16625                           	psect	text93
 16626  0033A2                     __ptext93:
 16627                           	opt stack 0
 16628  0033A2                     ___ftge:
 16629                           	opt stack 19
 16630                           
 16631                           ; BSR set to: 0
 16632                           ;incstack = 0
 16633  0033A2  AE1A               	btfss	___ftge@ff1+2,7,c
 16634  0033A4  D016               	goto	l1898
 16635  0033A6  C018  F01E         	movff	___ftge@ff1,??___ftge
 16636  0033AA  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
 16637  0033AE  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
 16638  0033B2  1E1E               	comf	??___ftge,f,c
 16639  0033B4  1E1F               	comf	??___ftge+1,f,c
 16640  0033B6  1E20               	comf	??___ftge+2,f,c
 16641  0033B8  2A1E               	incf	??___ftge,f,c
 16642  0033BA  0E00               	movlw	0
 16643  0033BC  221F               	addwfc	??___ftge+1,f,c
 16644  0033BE  2220               	addwfc	??___ftge+2,f,c
 16645  0033C0  0E00               	movlw	0
 16646  0033C2  241E               	addwf	??___ftge,w,c
 16647  0033C4  6E18               	movwf	___ftge@ff1,c
 16648  0033C6  0E00               	movlw	0
 16649  0033C8  201F               	addwfc	??___ftge+1,w,c
 16650  0033CA  6E19               	movwf	___ftge@ff1+1,c
 16651  0033CC  0E80               	movlw	128
 16652  0033CE  2020               	addwfc	??___ftge+2,w,c
 16653  0033D0  6E1A               	movwf	___ftge@ff1+2,c
 16654  0033D2                     l1898:
 16655  0033D2  AE1D               	btfss	___ftge@ff2+2,7,c
 16656  0033D4  D016               	goto	l1899
 16657  0033D6  C01B  F01E         	movff	___ftge@ff2,??___ftge
 16658  0033DA  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
 16659  0033DE  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
 16660  0033E2  1E1E               	comf	??___ftge,f,c
 16661  0033E4  1E1F               	comf	??___ftge+1,f,c
 16662  0033E6  1E20               	comf	??___ftge+2,f,c
 16663  0033E8  2A1E               	incf	??___ftge,f,c
 16664  0033EA  0E00               	movlw	0
 16665  0033EC  221F               	addwfc	??___ftge+1,f,c
 16666  0033EE  2220               	addwfc	??___ftge+2,f,c
 16667  0033F0  0E00               	movlw	0
 16668  0033F2  241E               	addwf	??___ftge,w,c
 16669  0033F4  6E1B               	movwf	___ftge@ff2,c
 16670  0033F6  0E00               	movlw	0
 16671  0033F8  201F               	addwfc	??___ftge+1,w,c
 16672  0033FA  6E1C               	movwf	___ftge@ff2+1,c
 16673  0033FC  0E80               	movlw	128
 16674  0033FE  2020               	addwfc	??___ftge+2,w,c
 16675  003400  6E1D               	movwf	___ftge@ff2+2,c
 16676  003402                     l1899:
 16677  003402  0E00               	movlw	0
 16678  003404  1A18               	xorwf	___ftge@ff1,f,c
 16679  003406  0E00               	movlw	0
 16680  003408  1A19               	xorwf	___ftge@ff1+1,f,c
 16681  00340A  0E80               	movlw	128
 16682  00340C  1A1A               	xorwf	___ftge@ff1+2,f,c
 16683  00340E  0E00               	movlw	0
 16684  003410  1A1B               	xorwf	___ftge@ff2,f,c
 16685  003412  0E00               	movlw	0
 16686  003414  1A1C               	xorwf	___ftge@ff2+1,f,c
 16687  003416  0E80               	movlw	128
 16688  003418  1A1D               	xorwf	___ftge@ff2+2,f,c
 16689  00341A  501B               	movf	___ftge@ff2,w,c
 16690  00341C  5C18               	subwf	___ftge@ff1,w,c
 16691  00341E  501C               	movf	___ftge@ff2+1,w,c
 16692  003420  5819               	subwfb	___ftge@ff1+1,w,c
 16693  003422  501D               	movf	___ftge@ff2+2,w,c
 16694  003424  581A               	subwfb	___ftge@ff1+2,w,c
 16695  003426  B0D8               	btfsc	status,0,c
 16696  003428  D002               	goto	l7082
 16697  00342A  90D8               	bcf	status,0,c
 16698  00342C  0012               	return	
 16699  00342E                     l7082:
 16700  00342E  80D8               	bsf	status,0,c
 16701  003430  0012               	return	
 16702  003432                     __end_of___ftge:
 16703                           	opt stack 0
 16704                           tosu	equ	0xFFF
 16705                           tosh	equ	0xFFE
 16706                           tosl	equ	0xFFD
 16707                           pclath	equ	0xFFA
 16708                           tblptru	equ	0xFF8
 16709                           tblptrh	equ	0xFF7
 16710                           tblptrl	equ	0xFF6
 16711                           tablat	equ	0xFF5
 16712                           prodh	equ	0xFF4
 16713                           prodl	equ	0xFF3
 16714                           intcon	equ	0xFF2
 16715                           intcon2	equ	0xFF1
 16716                           postinc0	equ	0xFEE
 16717                           plusw0	equ	0xFEB
 16718                           wreg	equ	0xFE8
 16719                           indf1	equ	0xFE7
 16720                           postdec1	equ	0xFE5
 16721                           fsr1h	equ	0xFE2
 16722                           fsr1l	equ	0xFE1
 16723                           indf2	equ	0xFDF
 16724                           postinc2	equ	0xFDE
 16725                           postdec2	equ	0xFDD
 16726                           plusw2	equ	0xFDB
 16727                           fsr2h	equ	0xFDA
 16728                           fsr2l	equ	0xFD9
 16729                           status	equ	0xFD8
 16730                           
 16731 ;; *************** function ___altoft *****************
 16732 ;; Defined at:
 16733 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 16734 ;; Parameters:    Size  Location     Type
 16735 ;;  c               4   39[BANK0 ] long 
 16736 ;; Auto vars:     Size  Location     Type
 16737 ;;  sign            1   47[COMRAM] unsigned char 
 16738 ;;  exp             1   46[COMRAM] unsigned char 
 16739 ;; Return value:  Size  Location     Type
 16740 ;;                  3   39[BANK0 ] float 
 16741 ;; Registers used:
 16742 ;;		wreg, status,2, status,0, cstack
 16743 ;; Tracked objects:
 16744 ;;		On entry : 0/0
 16745 ;;		On exit  : 0/0
 16746 ;;		Unchanged: 0/0
 16747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16748 ;;      Params:         0       4       0       0       0       0       0
 16749 ;;      Locals:         2       0       0       0       0       0       0
 16750 ;;      Temps:          0       4       0       0       0       0       0
 16751 ;;      Totals:         2       8       0       0       0       0       0
 16752 ;;Total ram usage:       10 bytes
 16753 ;; Hardware stack levels used:    1
 16754 ;; Hardware stack levels required when called:    5
 16755 ;; This function calls:
 16756 ;;		___ftpack
 16757 ;; This function is called by:
 16758 ;;		_floor
 16759 ;; This function uses a non-reentrant model
 16760 ;;
 16761                           
 16762                           	psect	text94
 16763  0035BC                     __ptext94:
 16764                           	opt stack 0
 16765  0035BC                     ___altoft:
 16766                           	opt stack 18
 16767                           
 16768                           ;incstack = 0
 16769  0035BC  0E00               	movlw	0
 16770  0035BE  6E30               	movwf	___altoft@sign,c
 16771  0035C0  0E8E               	movlw	142
 16772  0035C2  6E2F               	movwf	___altoft@exp,c
 16773  0035C4  0100               	movlb	0	; () banked
 16774  0035C6  AF8A               	btfss	(___altoft@c+3)& (0+255),7,b
 16775  0035C8  D011               	goto	l1696
 16776                           
 16777                           ; BSR set to: 0
 16778  0035CA  1F8A               	comf	(___altoft@c+3)& (0+255),f,b
 16779  0035CC  1F89               	comf	(___altoft@c+2)& (0+255),f,b
 16780  0035CE  1F88               	comf	(___altoft@c+1)& (0+255),f,b
 16781  0035D0  6D87               	negf	___altoft@c& (0+255),b
 16782  0035D2  0E00               	movlw	0
 16783  0035D4  2388               	addwfc	(___altoft@c+1)& (0+255),f,b
 16784  0035D6  2389               	addwfc	(___altoft@c+2)& (0+255),f,b
 16785  0035D8  238A               	addwfc	(___altoft@c+3)& (0+255),f,b
 16786                           
 16787                           ; BSR set to: 0
 16788  0035DA  0E01               	movlw	1
 16789  0035DC  6E30               	movwf	___altoft@sign,c
 16790                           
 16791                           ; BSR set to: 0
 16792  0035DE  D006               	goto	l1696
 16793  0035E0                     
 16794                           ; BSR set to: 0
 16795                           
 16796                           ; BSR set to: 0
 16797  0035E0  90D8               	bcf	status,0,c
 16798  0035E2  338A               	rrcf	(___altoft@c+3)& (0+255),f,b
 16799  0035E4  3389               	rrcf	(___altoft@c+2)& (0+255),f,b
 16800  0035E6  3388               	rrcf	(___altoft@c+1)& (0+255),f,b
 16801  0035E8  3387               	rrcf	___altoft@c& (0+255),f,b
 16802  0035EA  2A2F               	incf	___altoft@exp,f,c
 16803  0035EC                     l1696:
 16804                           
 16805                           ; BSR set to: 0
 16806                           
 16807                           ; BSR set to: 0
 16808  0035EC  0E00               	movlw	0
 16809  0035EE  1587               	andwf	___altoft@c& (0+255),w,b
 16810  0035F0  6F8B               	movwf	??___altoft& (0+255),b
 16811  0035F2  0E00               	movlw	0
 16812  0035F4  1588               	andwf	(___altoft@c+1)& (0+255),w,b
 16813  0035F6  6F8C               	movwf	(??___altoft+1)& (0+255),b
 16814  0035F8  0E00               	movlw	0
 16815  0035FA  1589               	andwf	(___altoft@c+2)& (0+255),w,b
 16816  0035FC  6F8D               	movwf	(??___altoft+2)& (0+255),b
 16817  0035FE  0EFF               	movlw	255
 16818  003600  158A               	andwf	(___altoft@c+3)& (0+255),w,b
 16819  003602  6F8E               	movwf	(??___altoft+3)& (0+255),b
 16820  003604  518B               	movf	??___altoft& (0+255),w,b
 16821  003606  118C               	iorwf	(??___altoft+1)& (0+255),w,b
 16822  003608  118D               	iorwf	(??___altoft+2)& (0+255),w,b
 16823  00360A  118E               	iorwf	(??___altoft+3)& (0+255),w,b
 16824  00360C  A4D8               	btfss	status,2,c
 16825  00360E  D7E8               	goto	l1697
 16826                           
 16827                           ; BSR set to: 0
 16828                           
 16829                           ; BSR set to: 0
 16830  003610  C087  F018         	movff	___altoft@c,___ftpack@arg
 16831  003614  C088  F019         	movff	___altoft@c+1,___ftpack@arg+1
 16832  003618  C089  F01A         	movff	___altoft@c+2,___ftpack@arg+2
 16833  00361C  C02F  F01B         	movff	___altoft@exp,___ftpack@exp
 16834  003620  C030  F01C         	movff	___altoft@sign,___ftpack@sign
 16835  003624  ECE9  F017         	call	___ftpack	;wreg free
 16836  003628  C018  F087         	movff	?___ftpack,?___altoft
 16837  00362C  C019  F088         	movff	?___ftpack+1,?___altoft+1
 16838  003630  C01A  F089         	movff	?___ftpack+2,?___altoft+2
 16839  003634  0012               	return	
 16840  003636                     __end_of___altoft:
 16841                           	opt stack 0
 16842                           tosu	equ	0xFFF
 16843                           tosh	equ	0xFFE
 16844                           tosl	equ	0xFFD
 16845                           pclath	equ	0xFFA
 16846                           tblptru	equ	0xFF8
 16847                           tblptrh	equ	0xFF7
 16848                           tblptrl	equ	0xFF6
 16849                           tablat	equ	0xFF5
 16850                           prodh	equ	0xFF4
 16851                           prodl	equ	0xFF3
 16852                           intcon	equ	0xFF2
 16853                           intcon2	equ	0xFF1
 16854                           postinc0	equ	0xFEE
 16855                           plusw0	equ	0xFEB
 16856                           wreg	equ	0xFE8
 16857                           indf1	equ	0xFE7
 16858                           postdec1	equ	0xFE5
 16859                           fsr1h	equ	0xFE2
 16860                           fsr1l	equ	0xFE1
 16861                           indf2	equ	0xFDF
 16862                           postinc2	equ	0xFDE
 16863                           postdec2	equ	0xFDD
 16864                           plusw2	equ	0xFDB
 16865                           fsr2h	equ	0xFDA
 16866                           fsr2l	equ	0xFD9
 16867                           status	equ	0xFD8
 16868                           
 16869 ;; *************** function _eval_poly *****************
 16870 ;; Defined at:
 16871 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
 16872 ;; Parameters:    Size  Location     Type
 16873 ;;  x               3   36[BANK0 ] float 
 16874 ;;  d               2   39[BANK0 ] PTR const 
 16875 ;;		 -> log@coeff(27), exp@coeff(30), 
 16876 ;;  n               2   41[BANK0 ] int 
 16877 ;; Auto vars:     Size  Location     Type
 16878 ;;  res             3   43[BANK0 ] int 
 16879 ;; Return value:  Size  Location     Type
 16880 ;;                  3   36[BANK0 ] int 
 16881 ;; Registers used:
 16882 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16883 ;; Tracked objects:
 16884 ;;		On entry : 0/0
 16885 ;;		On exit  : 0/0
 16886 ;;		Unchanged: 0/0
 16887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16888 ;;      Params:         0       7       0       0       0       0       0
 16889 ;;      Locals:         0       3       0       0       0       0       0
 16890 ;;      Temps:          2       0       0       0       0       0       0
 16891 ;;      Totals:         2      10       0       0       0       0       0
 16892 ;;Total ram usage:       12 bytes
 16893 ;; Hardware stack levels used:    1
 16894 ;; Hardware stack levels required when called:    6
 16895 ;; This function calls:
 16896 ;;		___ftadd
 16897 ;;		___ftmul
 16898 ;;		___wmul
 16899 ;; This function is called by:
 16900 ;;		_exp
 16901 ;;		_log
 16902 ;; This function uses a non-reentrant model
 16903 ;;
 16904                           
 16905                           	psect	text95
 16906  002BFE                     __ptext95:
 16907                           	opt stack 0
 16908  002BFE                     _eval_poly:
 16909                           	opt stack 18
 16910                           
 16911                           ;incstack = 0
 16912  002BFE  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 16913  002C02  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 16914  002C06  0E00               	movlw	0
 16915  002C08  6E1B               	movwf	___wmul@multiplicand+1,c
 16916  002C0A  0E03               	movlw	3
 16917  002C0C  6E1A               	movwf	___wmul@multiplicand,c
 16918  002C0E  EC34  F021         	call	___wmul	;wreg free
 16919  002C12  C087  F02F         	movff	eval_poly@d,??_eval_poly
 16920  002C16  C088  F030         	movff	eval_poly@d+1,??_eval_poly+1
 16921  002C1A  5018               	movf	?___wmul,w,c
 16922  002C1C  262F               	addwf	??_eval_poly,f,c
 16923  002C1E  5019               	movf	?___wmul+1,w,c
 16924  002C20  2230               	addwfc	??_eval_poly+1,f,c
 16925  002C22  C02F  FFF6         	movff	??_eval_poly,tblptrl
 16926  002C26  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 16927  002C2A                     	if	0	;tblptru may be non-zero
 16928  002C2A                     	endif
 16929  002C2A                     	if	0	;tblptru may be non-zero
 16930  002C2A                     	endif
 16931  002C2A  0009               	tblrd		*+
 16932  002C2C  CFF5 F08B          	movff	tablat,eval_poly@res
 16933  002C30  0009               	tblrd		*+
 16934  002C32  CFF5 F08C          	movff	tablat,eval_poly@res+1
 16935  002C36  000A               	tblrd		*-
 16936  002C38  CFF5 F08D          	movff	tablat,eval_poly@res+2
 16937  002C3C  D03F               	goto	l2321
 16938  002C3E  C08B  F06C         	movff	eval_poly@res,___ftmul@f2
 16939  002C42  C08C  F06D         	movff	eval_poly@res+1,___ftmul@f2+1
 16940  002C46  C08D  F06E         	movff	eval_poly@res+2,___ftmul@f2+2
 16941  002C4A  C084  F069         	movff	eval_poly@x,___ftmul@f1
 16942  002C4E  C085  F06A         	movff	eval_poly@x+1,___ftmul@f1+1
 16943  002C52  C086  F06B         	movff	eval_poly@x+2,___ftmul@f1+2
 16944  002C56  ECD5  F012         	call	___ftmul	;wreg free
 16945  002C5A  C069  F078         	movff	?___ftmul,___ftadd@f1
 16946  002C5E  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 16947  002C62  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 16948  002C66  0E00               	movlw	0
 16949  002C68  6E1B               	movwf	___wmul@multiplicand+1,c
 16950  002C6A  0E03               	movlw	3
 16951  002C6C  6E1A               	movwf	___wmul@multiplicand,c
 16952  002C6E  0100               	movlb	0	; () banked
 16953  002C70  0789               	decf	eval_poly@n& (0+255),f,b
 16954  002C72  A0D8               	btfss	status,0,c
 16955  002C74  078A               	decf	(eval_poly@n+1)& (0+255),f,b
 16956  002C76  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 16957  002C7A  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 16958  002C7E  EC34  F021         	call	___wmul	;wreg free
 16959  002C82  C087  F02F         	movff	eval_poly@d,??_eval_poly
 16960  002C86  C088  F030         	movff	eval_poly@d+1,??_eval_poly+1
 16961  002C8A  5018               	movf	?___wmul,w,c
 16962  002C8C  262F               	addwf	??_eval_poly,f,c
 16963  002C8E  5019               	movf	?___wmul+1,w,c
 16964  002C90  2230               	addwfc	??_eval_poly+1,f,c
 16965  002C92  C02F  FFF6         	movff	??_eval_poly,tblptrl
 16966  002C96  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 16967  002C9A                     	if	0	;tblptru may be non-zero
 16968  002C9A                     	endif
 16969  002C9A                     	if	0	;tblptru may be non-zero
 16970  002C9A                     	endif
 16971  002C9A  0009               	tblrd		*+
 16972  002C9C  CFF5 F07B          	movff	tablat,___ftadd@f2
 16973  002CA0  0009               	tblrd		*+
 16974  002CA2  CFF5 F07C          	movff	tablat,___ftadd@f2+1
 16975  002CA6  000A               	tblrd		*-
 16976  002CA8  CFF5 F07D          	movff	tablat,___ftadd@f2+2
 16977  002CAC  EC5A  F00D         	call	___ftadd	;wreg free
 16978  002CB0  C078  F08B         	movff	?___ftadd,eval_poly@res
 16979  002CB4  C079  F08C         	movff	?___ftadd+1,eval_poly@res+1
 16980  002CB8  C07A  F08D         	movff	?___ftadd+2,eval_poly@res+2
 16981  002CBC                     l2321:
 16982  002CBC  0100               	movlb	0	; () banked
 16983  002CBE  5189               	movf	eval_poly@n& (0+255),w,b
 16984  002CC0  118A               	iorwf	(eval_poly@n+1)& (0+255),w,b
 16985  002CC2  A4D8               	btfss	status,2,c
 16986  002CC4  D7BC               	goto	l2322
 16987                           
 16988                           ; BSR set to: 0
 16989  002CC6  C08B  F084         	movff	eval_poly@res,?_eval_poly
 16990  002CCA  C08C  F085         	movff	eval_poly@res+1,?_eval_poly+1
 16991  002CCE  C08D  F086         	movff	eval_poly@res+2,?_eval_poly+2
 16992                           
 16993                           ; BSR set to: 0
 16994  002CD2  0012               	return		;funcret
 16995  002CD4                     __end_of_eval_poly:
 16996                           	opt stack 0
 16997                           tosu	equ	0xFFF
 16998                           tosh	equ	0xFFE
 16999                           tosl	equ	0xFFD
 17000                           pclath	equ	0xFFA
 17001                           tblptru	equ	0xFF8
 17002                           tblptrh	equ	0xFF7
 17003                           tblptrl	equ	0xFF6
 17004                           tablat	equ	0xFF5
 17005                           prodh	equ	0xFF4
 17006                           prodl	equ	0xFF3
 17007                           intcon	equ	0xFF2
 17008                           intcon2	equ	0xFF1
 17009                           postinc0	equ	0xFEE
 17010                           plusw0	equ	0xFEB
 17011                           wreg	equ	0xFE8
 17012                           indf1	equ	0xFE7
 17013                           postdec1	equ	0xFE5
 17014                           fsr1h	equ	0xFE2
 17015                           fsr1l	equ	0xFE1
 17016                           indf2	equ	0xFDF
 17017                           postinc2	equ	0xFDE
 17018                           postdec2	equ	0xFDD
 17019                           plusw2	equ	0xFDB
 17020                           fsr2h	equ	0xFDA
 17021                           fsr2l	equ	0xFD9
 17022                           status	equ	0xFD8
 17023                           
 17024 ;; *************** function ___wmul *****************
 17025 ;; Defined at:
 17026 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 17027 ;; Parameters:    Size  Location     Type
 17028 ;;  multiplier      2   23[COMRAM] unsigned int 
 17029 ;;  multiplicand    2   25[COMRAM] unsigned int 
 17030 ;; Auto vars:     Size  Location     Type
 17031 ;;  product         2   27[COMRAM] unsigned int 
 17032 ;; Return value:  Size  Location     Type
 17033 ;;                  2   23[COMRAM] unsigned int 
 17034 ;; Registers used:
 17035 ;;		wreg, status,2, status,0, prodl, prodh
 17036 ;; Tracked objects:
 17037 ;;		On entry : 0/0
 17038 ;;		On exit  : 0/0
 17039 ;;		Unchanged: 0/0
 17040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17041 ;;      Params:         4       0       0       0       0       0       0
 17042 ;;      Locals:         2       0       0       0       0       0       0
 17043 ;;      Temps:          0       0       0       0       0       0       0
 17044 ;;      Totals:         6       0       0       0       0       0       0
 17045 ;;Total ram usage:        6 bytes
 17046 ;; Hardware stack levels used:    1
 17047 ;; Hardware stack levels required when called:    4
 17048 ;; This function calls:
 17049 ;;		Nothing
 17050 ;; This function is called by:
 17051 ;;		_GetMcuFwVersion
 17052 ;;		_eval_poly
 17053 ;; This function uses a non-reentrant model
 17054 ;;
 17055                           
 17056                           	psect	text96
 17057  004268                     __ptext96:
 17058                           	opt stack 0
 17059  004268                     ___wmul:
 17060                           	opt stack 19
 17061                           
 17062                           ; BSR set to: 0
 17063                           ;incstack = 0
 17064  004268  5018               	movf	___wmul@multiplier,w,c
 17065  00426A  021A               	mulwf	___wmul@multiplicand,c
 17066  00426C  CFF3 F01C          	movff	prodl,___wmul@product
 17067  004270  CFF4 F01D          	movff	prodh,___wmul@product+1
 17068  004274  5018               	movf	___wmul@multiplier,w,c
 17069  004276  021B               	mulwf	___wmul@multiplicand+1,c
 17070  004278  50F3               	movf	prodl,w,c
 17071  00427A  261D               	addwf	___wmul@product+1,f,c
 17072  00427C  5019               	movf	___wmul@multiplier+1,w,c
 17073  00427E  021A               	mulwf	___wmul@multiplicand,c
 17074  004280  50F3               	movf	prodl,w,c
 17075  004282  261D               	addwf	___wmul@product+1,f,c
 17076  004284  C01C  F018         	movff	___wmul@product,?___wmul
 17077  004288  C01D  F019         	movff	___wmul@product+1,?___wmul+1
 17078  00428C  0012               	return	
 17079  00428E                     __end_of___wmul:
 17080                           	opt stack 0
 17081                           tosu	equ	0xFFF
 17082                           tosh	equ	0xFFE
 17083                           tosl	equ	0xFFD
 17084                           pclath	equ	0xFFA
 17085                           tblptru	equ	0xFF8
 17086                           tblptrh	equ	0xFF7
 17087                           tblptrl	equ	0xFF6
 17088                           tablat	equ	0xFF5
 17089                           prodh	equ	0xFF4
 17090                           prodl	equ	0xFF3
 17091                           intcon	equ	0xFF2
 17092                           intcon2	equ	0xFF1
 17093                           postinc0	equ	0xFEE
 17094                           plusw0	equ	0xFEB
 17095                           wreg	equ	0xFE8
 17096                           indf1	equ	0xFE7
 17097                           postdec1	equ	0xFE5
 17098                           fsr1h	equ	0xFE2
 17099                           fsr1l	equ	0xFE1
 17100                           indf2	equ	0xFDF
 17101                           postinc2	equ	0xFDE
 17102                           postdec2	equ	0xFDD
 17103                           plusw2	equ	0xFDB
 17104                           fsr2h	equ	0xFDA
 17105                           fsr2l	equ	0xFD9
 17106                           status	equ	0xFD8
 17107                           
 17108 ;; *************** function ___ftmul *****************
 17109 ;; Defined at:
 17110 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 17111 ;; Parameters:    Size  Location     Type
 17112 ;;  f1              3    9[BANK0 ] float 
 17113 ;;  f2              3   12[BANK0 ] float 
 17114 ;; Auto vars:     Size  Location     Type
 17115 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
 17116 ;;  sign            1   23[BANK0 ] unsigned char 
 17117 ;;  cntr            1   22[BANK0 ] unsigned char 
 17118 ;;  exp             1   18[BANK0 ] unsigned char 
 17119 ;; Return value:  Size  Location     Type
 17120 ;;                  3    9[BANK0 ] float 
 17121 ;; Registers used:
 17122 ;;		wreg, status,2, status,0, cstack
 17123 ;; Tracked objects:
 17124 ;;		On entry : 0/0
 17125 ;;		On exit  : 0/0
 17126 ;;		Unchanged: 0/0
 17127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17128 ;;      Params:         0       6       0       0       0       0       0
 17129 ;;      Locals:         0       6       0       0       0       0       0
 17130 ;;      Temps:          0       3       0       0       0       0       0
 17131 ;;      Totals:         0      15       0       0       0       0       0
 17132 ;;Total ram usage:       15 bytes
 17133 ;; Hardware stack levels used:    1
 17134 ;; Hardware stack levels required when called:    5
 17135 ;; This function calls:
 17136 ;;		___ftpack
 17137 ;; This function is called by:
 17138 ;;		_AdcConvert
 17139 ;;		_CheckFlashPrecentage
 17140 ;;		_pow
 17141 ;;		_exp
 17142 ;;		_log
 17143 ;;		_eval_poly
 17144 ;; This function uses a non-reentrant model
 17145 ;;
 17146                           
 17147                           	psect	text97
 17148  0025AA                     __ptext97:
 17149                           	opt stack 0
 17150  0025AA                     ___ftmul:
 17151                           	opt stack 18
 17152                           
 17153                           ;incstack = 0
 17154  0025AA  C06B  F06F         	movff	___ftmul@f1+2,??___ftmul
 17155  0025AE  0100               	movlb	0	; () banked
 17156  0025B0  6B70               	clrf	(??___ftmul+1)& (0+255),b
 17157  0025B2  6B71               	clrf	(??___ftmul+2)& (0+255),b
 17158  0025B4  356A               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 17159  0025B6  376F               	rlcf	??___ftmul& (0+255),f,b
 17160  0025B8  E301               	bnc	u7061
 17161  0025BA  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 17162  0025BC                     u7061:
 17163  0025BC  516F               	movf	??___ftmul& (0+255),w,b
 17164  0025BE  6F72               	movwf	___ftmul@exp& (0+255),b
 17165  0025C0  5172               	movf	___ftmul@exp& (0+255),w,b
 17166  0025C2  A4D8               	btfss	status,2,c
 17167  0025C4  D007               	goto	l1905
 17168                           
 17169                           ; BSR set to: 0
 17170  0025C6  0E00               	movlw	0
 17171  0025C8  6F69               	movwf	?___ftmul& (0+255),b
 17172  0025CA  0E00               	movlw	0
 17173  0025CC  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 17174  0025CE  0E00               	movlw	0
 17175  0025D0  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 17176                           
 17177                           ; BSR set to: 0
 17178  0025D2  0012               	return	
 17179  0025D4                     l1905:
 17180                           
 17181                           ; BSR set to: 0
 17182                           
 17183                           ; BSR set to: 0
 17184  0025D4  C06E  F06F         	movff	___ftmul@f2+2,??___ftmul
 17185  0025D8  6B70               	clrf	(??___ftmul+1)& (0+255),b
 17186  0025DA  6B71               	clrf	(??___ftmul+2)& (0+255),b
 17187  0025DC  356D               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 17188  0025DE  376F               	rlcf	??___ftmul& (0+255),f,b
 17189  0025E0  E301               	bnc	u7081
 17190  0025E2  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 17191  0025E4                     u7081:
 17192  0025E4  516F               	movf	??___ftmul& (0+255),w,b
 17193  0025E6  6F77               	movwf	___ftmul@sign& (0+255),b
 17194  0025E8  5177               	movf	___ftmul@sign& (0+255),w,b
 17195  0025EA  A4D8               	btfss	status,2,c
 17196  0025EC  D007               	goto	l1907
 17197                           
 17198                           ; BSR set to: 0
 17199  0025EE  0E00               	movlw	0
 17200  0025F0  6F69               	movwf	?___ftmul& (0+255),b
 17201  0025F2  0E00               	movlw	0
 17202  0025F4  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 17203  0025F6  0E00               	movlw	0
 17204  0025F8  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 17205                           
 17206                           ; BSR set to: 0
 17207  0025FA  0012               	return	
 17208  0025FC                     l1907:
 17209                           
 17210                           ; BSR set to: 0
 17211                           
 17212                           ; BSR set to: 0
 17213  0025FC  5177               	movf	___ftmul@sign& (0+255),w,b
 17214  0025FE  0F7B               	addlw	123
 17215  002600  2772               	addwf	___ftmul@exp& (0+255),f,b
 17216                           
 17217                           ; BSR set to: 0
 17218  002602  C06B  F077         	movff	___ftmul@f1+2,___ftmul@sign
 17219  002606  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 17220  002608  1B77               	xorwf	___ftmul@sign& (0+255),f,b
 17221  00260A  0E80               	movlw	128
 17222  00260C  1777               	andwf	___ftmul@sign& (0+255),f,b
 17223                           
 17224                           ; BSR set to: 0
 17225  00260E  8F6A               	bsf	(___ftmul@f1+1)& (0+255),7,b
 17226                           
 17227                           ; BSR set to: 0
 17228  002610  8F6D               	bsf	(___ftmul@f2+1)& (0+255),7,b
 17229                           
 17230                           ; BSR set to: 0
 17231  002612  0EFF               	movlw	255
 17232  002614  176C               	andwf	___ftmul@f2& (0+255),f,b
 17233  002616  0EFF               	movlw	255
 17234  002618  176D               	andwf	(___ftmul@f2+1)& (0+255),f,b
 17235  00261A  0E00               	movlw	0
 17236  00261C  176E               	andwf	(___ftmul@f2+2)& (0+255),f,b
 17237                           
 17238                           ; BSR set to: 0
 17239  00261E  0E00               	movlw	0
 17240  002620  6F73               	movwf	___ftmul@f3_as_product& (0+255),b
 17241  002622  0E00               	movlw	0
 17242  002624  6F74               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 17243  002626  0E00               	movlw	0
 17244  002628  6F75               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 17245                           
 17246                           ; BSR set to: 0
 17247  00262A  0E07               	movlw	7
 17248  00262C  6F76               	movwf	___ftmul@cntr& (0+255),b
 17249  00262E                     
 17250                           ; BSR set to: 0
 17251                           
 17252                           ; BSR set to: 0
 17253  00262E  A169               	btfss	___ftmul@f1& (0+255),0,b
 17254  002630  D006               	goto	l1909
 17255                           
 17256                           ; BSR set to: 0
 17257  002632  516C               	movf	___ftmul@f2& (0+255),w,b
 17258  002634  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 17259  002636  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 17260  002638  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 17261  00263A  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 17262  00263C  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 17263  00263E                     l1909:
 17264                           
 17265                           ; BSR set to: 0
 17266                           
 17267                           ; BSR set to: 0
 17268  00263E  90D8               	bcf	status,0,c
 17269  002640  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 17270  002642  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 17271  002644  3369               	rrcf	___ftmul@f1& (0+255),f,b
 17272  002646  90D8               	bcf	status,0,c
 17273  002648  376C               	rlcf	___ftmul@f2& (0+255),f,b
 17274  00264A  376D               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 17275  00264C  376E               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 17276                           
 17277                           ; BSR set to: 0
 17278  00264E  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 17279  002650  D7EE               	goto	l1908
 17280                           
 17281                           ; BSR set to: 0
 17282                           
 17283                           ; BSR set to: 0
 17284  002652  0E09               	movlw	9
 17285  002654  6F76               	movwf	___ftmul@cntr& (0+255),b
 17286  002656                     
 17287                           ; BSR set to: 0
 17288                           
 17289                           ; BSR set to: 0
 17290  002656  A169               	btfss	___ftmul@f1& (0+255),0,b
 17291  002658  D006               	goto	l1912
 17292                           
 17293                           ; BSR set to: 0
 17294  00265A  516C               	movf	___ftmul@f2& (0+255),w,b
 17295  00265C  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 17296  00265E  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 17297  002660  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 17298  002662  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 17299  002664  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 17300  002666                     l1912:
 17301                           
 17302                           ; BSR set to: 0
 17303                           
 17304                           ; BSR set to: 0
 17305  002666  90D8               	bcf	status,0,c
 17306  002668  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 17307  00266A  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 17308  00266C  3369               	rrcf	___ftmul@f1& (0+255),f,b
 17309  00266E  90D8               	bcf	status,0,c
 17310  002670  3375               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 17311  002672  3374               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 17312  002674  3373               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 17313                           
 17314                           ; BSR set to: 0
 17315  002676  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 17316  002678  D7EE               	goto	l1911
 17317                           
 17318                           ; BSR set to: 0
 17319                           
 17320                           ; BSR set to: 0
 17321  00267A  C073  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
 17322  00267E  C074  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 17323  002682  C075  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 17324  002686  C072  F01B         	movff	___ftmul@exp,___ftpack@exp
 17325  00268A  C077  F01C         	movff	___ftmul@sign,___ftpack@sign
 17326  00268E  ECE9  F017         	call	___ftpack	;wreg free
 17327  002692  C018  F069         	movff	?___ftpack,?___ftmul
 17328  002696  C019  F06A         	movff	?___ftpack+1,?___ftmul+1
 17329  00269A  C01A  F06B         	movff	?___ftpack+2,?___ftmul+2
 17330  00269E  0012               	return	
 17331  0026A0                     __end_of___ftmul:
 17332                           	opt stack 0
 17333                           tosu	equ	0xFFF
 17334                           tosh	equ	0xFFE
 17335                           tosl	equ	0xFFD
 17336                           pclath	equ	0xFFA
 17337                           tblptru	equ	0xFF8
 17338                           tblptrh	equ	0xFF7
 17339                           tblptrl	equ	0xFF6
 17340                           tablat	equ	0xFF5
 17341                           prodh	equ	0xFF4
 17342                           prodl	equ	0xFF3
 17343                           intcon	equ	0xFF2
 17344                           intcon2	equ	0xFF1
 17345                           postinc0	equ	0xFEE
 17346                           plusw0	equ	0xFEB
 17347                           wreg	equ	0xFE8
 17348                           indf1	equ	0xFE7
 17349                           postdec1	equ	0xFE5
 17350                           fsr1h	equ	0xFE2
 17351                           fsr1l	equ	0xFE1
 17352                           indf2	equ	0xFDF
 17353                           postinc2	equ	0xFDE
 17354                           postdec2	equ	0xFDD
 17355                           plusw2	equ	0xFDB
 17356                           fsr2h	equ	0xFDA
 17357                           fsr2l	equ	0xFD9
 17358                           status	equ	0xFD8
 17359                           
 17360 ;; *************** function ___ftsub *****************
 17361 ;; Defined at:
 17362 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
 17363 ;; Parameters:    Size  Location     Type
 17364 ;;  f1              3   36[BANK0 ] float 
 17365 ;;  f2              3   39[BANK0 ] float 
 17366 ;; Auto vars:     Size  Location     Type
 17367 ;;		None
 17368 ;; Return value:  Size  Location     Type
 17369 ;;                  3   36[BANK0 ] float 
 17370 ;; Registers used:
 17371 ;;		wreg, status,2, status,0, cstack
 17372 ;; Tracked objects:
 17373 ;;		On entry : 0/0
 17374 ;;		On exit  : 0/0
 17375 ;;		Unchanged: 0/0
 17376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17377 ;;      Params:         0       6       0       0       0       0       0
 17378 ;;      Locals:         0       0       0       0       0       0       0
 17379 ;;      Temps:          0       0       0       0       0       0       0
 17380 ;;      Totals:         0       6       0       0       0       0       0
 17381 ;;Total ram usage:        6 bytes
 17382 ;; Hardware stack levels used:    1
 17383 ;; Hardware stack levels required when called:    6
 17384 ;; This function calls:
 17385 ;;		___ftadd
 17386 ;; This function is called by:
 17387 ;;		_exp
 17388 ;; This function uses a non-reentrant model
 17389 ;;
 17390                           
 17391                           	psect	text98
 17392  003D62                     __ptext98:
 17393                           	opt stack 0
 17394  003D62                     ___ftsub:
 17395                           	opt stack 18
 17396                           
 17397                           ;incstack = 0
 17398  003D62  0100               	movlb	0	; () banked
 17399  003D64  5187               	movf	___ftsub@f2& (0+255),w,b
 17400  003D66  1188               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 17401  003D68  1189               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 17402  003D6A  B4D8               	btfsc	status,2,c
 17403  003D6C  D006               	goto	l1922
 17404                           
 17405                           ; BSR set to: 0
 17406  003D6E  0E00               	movlw	0
 17407  003D70  1B87               	xorwf	___ftsub@f2& (0+255),f,b
 17408  003D72  0E00               	movlw	0
 17409  003D74  1B88               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 17410  003D76  0E80               	movlw	128
 17411  003D78  1B89               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 17412  003D7A                     l1922:
 17413                           
 17414                           ; BSR set to: 0
 17415                           
 17416                           ; BSR set to: 0
 17417  003D7A  C084  F078         	movff	___ftsub@f1,___ftadd@f1
 17418  003D7E  C085  F079         	movff	___ftsub@f1+1,___ftadd@f1+1
 17419  003D82  C086  F07A         	movff	___ftsub@f1+2,___ftadd@f1+2
 17420  003D86  C087  F07B         	movff	___ftsub@f2,___ftadd@f2
 17421  003D8A  C088  F07C         	movff	___ftsub@f2+1,___ftadd@f2+1
 17422  003D8E  C089  F07D         	movff	___ftsub@f2+2,___ftadd@f2+2
 17423  003D92  EC5A  F00D         	call	___ftadd	;wreg free
 17424  003D96  C078  F084         	movff	?___ftadd,?___ftsub
 17425  003D9A  C079  F085         	movff	?___ftadd+1,?___ftsub+1
 17426  003D9E  C07A  F086         	movff	?___ftadd+2,?___ftsub+2
 17427  003DA2  0012               	return	
 17428  003DA4                     __end_of___ftsub:
 17429                           	opt stack 0
 17430                           tosu	equ	0xFFF
 17431                           tosh	equ	0xFFE
 17432                           tosl	equ	0xFFD
 17433                           pclath	equ	0xFFA
 17434                           tblptru	equ	0xFF8
 17435                           tblptrh	equ	0xFF7
 17436                           tblptrl	equ	0xFF6
 17437                           tablat	equ	0xFF5
 17438                           prodh	equ	0xFF4
 17439                           prodl	equ	0xFF3
 17440                           intcon	equ	0xFF2
 17441                           intcon2	equ	0xFF1
 17442                           postinc0	equ	0xFEE
 17443                           plusw0	equ	0xFEB
 17444                           wreg	equ	0xFE8
 17445                           indf1	equ	0xFE7
 17446                           postdec1	equ	0xFE5
 17447                           fsr1h	equ	0xFE2
 17448                           fsr1l	equ	0xFE1
 17449                           indf2	equ	0xFDF
 17450                           postinc2	equ	0xFDE
 17451                           postdec2	equ	0xFDD
 17452                           plusw2	equ	0xFDB
 17453                           fsr2h	equ	0xFDA
 17454                           fsr2l	equ	0xFD9
 17455                           status	equ	0xFD8
 17456                           
 17457 ;; *************** function ___ftadd *****************
 17458 ;; Defined at:
 17459 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 17460 ;; Parameters:    Size  Location     Type
 17461 ;;  f1              3   24[BANK0 ] float 
 17462 ;;  f2              3   27[BANK0 ] float 
 17463 ;; Auto vars:     Size  Location     Type
 17464 ;;  exp1            1   35[BANK0 ] unsigned char 
 17465 ;;  exp2            1   34[BANK0 ] unsigned char 
 17466 ;;  sign            1   33[BANK0 ] unsigned char 
 17467 ;; Return value:  Size  Location     Type
 17468 ;;                  3   24[BANK0 ] float 
 17469 ;; Registers used:
 17470 ;;		wreg, status,2, status,0, cstack
 17471 ;; Tracked objects:
 17472 ;;		On entry : 0/0
 17473 ;;		On exit  : 0/0
 17474 ;;		Unchanged: 0/0
 17475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17476 ;;      Params:         0       6       0       0       0       0       0
 17477 ;;      Locals:         0       3       0       0       0       0       0
 17478 ;;      Temps:          0       3       0       0       0       0       0
 17479 ;;      Totals:         0      12       0       0       0       0       0
 17480 ;;Total ram usage:       12 bytes
 17481 ;; Hardware stack levels used:    1
 17482 ;; Hardware stack levels required when called:    5
 17483 ;; This function calls:
 17484 ;;		___ftpack
 17485 ;; This function is called by:
 17486 ;;		___ftsub
 17487 ;;		_floor
 17488 ;;		_log
 17489 ;;		_eval_poly
 17490 ;; This function uses a non-reentrant model
 17491 ;;
 17492                           
 17493                           	psect	text99
 17494  001AB4                     __ptext99:
 17495                           	opt stack 0
 17496  001AB4                     ___ftadd:
 17497                           	opt stack 18
 17498                           
 17499                           ;incstack = 0
 17500  001AB4  C07A  F07E         	movff	___ftadd@f1+2,??___ftadd
 17501  001AB8  0100               	movlb	0	; () banked
 17502  001ABA  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 17503  001ABC  6B80               	clrf	(??___ftadd+2)& (0+255),b
 17504  001ABE  3579               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 17505  001AC0  377E               	rlcf	??___ftadd& (0+255),f,b
 17506  001AC2  E301               	bnc	u6851
 17507  001AC4  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 17508  001AC6                     u6851:
 17509  001AC6  517E               	movf	??___ftadd& (0+255),w,b
 17510  001AC8  6F83               	movwf	___ftadd@exp1& (0+255),b
 17511  001ACA  C07D  F07E         	movff	___ftadd@f2+2,??___ftadd
 17512  001ACE  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 17513  001AD0  6B80               	clrf	(??___ftadd+2)& (0+255),b
 17514  001AD2  357C               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 17515  001AD4  377E               	rlcf	??___ftadd& (0+255),f,b
 17516  001AD6  E301               	bnc	u6861
 17517  001AD8  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 17518  001ADA                     u6861:
 17519  001ADA  517E               	movf	??___ftadd& (0+255),w,b
 17520  001ADC  6F82               	movwf	___ftadd@exp2& (0+255),b
 17521                           
 17522                           ; BSR set to: 0
 17523  001ADE  5183               	movf	___ftadd@exp1& (0+255),w,b
 17524  001AE0  B4D8               	btfsc	status,2,c
 17525  001AE2  D00B               	goto	u6890
 17526                           
 17527                           ; BSR set to: 0
 17528  001AE4  5182               	movf	___ftadd@exp2& (0+255),w,b
 17529  001AE6  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 17530  001AE8  B0D8               	btfsc	status,0,c
 17531  001AEA  D00E               	goto	l1857
 17532                           
 17533                           ; BSR set to: 0
 17534  001AEC  5183               	movf	___ftadd@exp1& (0+255),w,b
 17535  001AEE  0800               	sublw	0
 17536  001AF0  2582               	addwf	___ftadd@exp2& (0+255),w,b
 17537  001AF2  6F7E               	movwf	??___ftadd& (0+255),b
 17538  001AF4  0E18               	movlw	24
 17539  001AF6  657E               	cpfsgt	??___ftadd& (0+255),b
 17540  001AF8  D007               	goto	l1857
 17541  001AFA                     u6890:
 17542                           
 17543                           ; BSR set to: 0
 17544  001AFA  C07B  F078         	movff	___ftadd@f2,?___ftadd
 17545  001AFE  C07C  F079         	movff	___ftadd@f2+1,?___ftadd+1
 17546  001B02  C07D  F07A         	movff	___ftadd@f2+2,?___ftadd+2
 17547  001B06  0012               	return	
 17548  001B08                     l1857:
 17549                           
 17550                           ; BSR set to: 0
 17551                           
 17552                           ; BSR set to: 0
 17553  001B08  5182               	movf	___ftadd@exp2& (0+255),w,b
 17554  001B0A  B4D8               	btfsc	status,2,c
 17555  001B0C  D00B               	goto	u6920
 17556                           
 17557                           ; BSR set to: 0
 17558  001B0E  5183               	movf	___ftadd@exp1& (0+255),w,b
 17559  001B10  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 17560  001B12  B0D8               	btfsc	status,0,c
 17561  001B14  D00E               	goto	l1861
 17562                           
 17563                           ; BSR set to: 0
 17564  001B16  5182               	movf	___ftadd@exp2& (0+255),w,b
 17565  001B18  0800               	sublw	0
 17566  001B1A  2583               	addwf	___ftadd@exp1& (0+255),w,b
 17567  001B1C  6F7E               	movwf	??___ftadd& (0+255),b
 17568  001B1E  0E18               	movlw	24
 17569  001B20  657E               	cpfsgt	??___ftadd& (0+255),b
 17570  001B22  D007               	goto	l1861
 17571  001B24                     u6920:
 17572                           
 17573                           ; BSR set to: 0
 17574  001B24  C078  F078         	movff	___ftadd@f1,?___ftadd
 17575  001B28  C079  F079         	movff	___ftadd@f1+1,?___ftadd+1
 17576  001B2C  C07A  F07A         	movff	___ftadd@f1+2,?___ftadd+2
 17577  001B30  0012               	return	
 17578  001B32                     l1861:
 17579                           
 17580                           ; BSR set to: 0
 17581                           
 17582                           ; BSR set to: 0
 17583  001B32  0E06               	movlw	6
 17584  001B34  6F81               	movwf	___ftadd@sign& (0+255),b
 17585                           
 17586                           ; BSR set to: 0
 17587  001B36  BF7A               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 17588                           
 17589                           ; BSR set to: 0
 17590  001B38  8F81               	bsf	___ftadd@sign& (0+255),7,b
 17591                           
 17592                           ; BSR set to: 0
 17593                           
 17594                           ; BSR set to: 0
 17595  001B3A  BF7D               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 17596                           
 17597                           ; BSR set to: 0
 17598  001B3C  8D81               	bsf	___ftadd@sign& (0+255),6,b
 17599                           
 17600                           ; BSR set to: 0
 17601  001B3E  8F79               	bsf	(___ftadd@f1+1)& (0+255),7,b
 17602                           
 17603                           ; BSR set to: 0
 17604  001B40  0EFF               	movlw	255
 17605  001B42  1778               	andwf	___ftadd@f1& (0+255),f,b
 17606  001B44  0EFF               	movlw	255
 17607  001B46  1779               	andwf	(___ftadd@f1+1)& (0+255),f,b
 17608  001B48  0E00               	movlw	0
 17609  001B4A  177A               	andwf	(___ftadd@f1+2)& (0+255),f,b
 17610  001B4C  8F7C               	bsf	(___ftadd@f2+1)& (0+255),7,b
 17611                           
 17612                           ; BSR set to: 0
 17613  001B4E  0EFF               	movlw	255
 17614  001B50  177B               	andwf	___ftadd@f2& (0+255),f,b
 17615  001B52  0EFF               	movlw	255
 17616  001B54  177C               	andwf	(___ftadd@f2+1)& (0+255),f,b
 17617  001B56  0E00               	movlw	0
 17618  001B58  177D               	andwf	(___ftadd@f2+2)& (0+255),f,b
 17619                           
 17620                           ; BSR set to: 0
 17621  001B5A  5182               	movf	___ftadd@exp2& (0+255),w,b
 17622  001B5C  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 17623  001B5E  B0D8               	btfsc	status,0,c
 17624  001B60  D01B               	goto	l1866
 17625  001B62                     u6950:
 17626                           
 17627                           ; BSR set to: 0
 17628                           
 17629                           ; BSR set to: 0
 17630  001B62  90D8               	bcf	status,0,c
 17631  001B64  377B               	rlcf	___ftadd@f2& (0+255),f,b
 17632  001B66  377C               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 17633  001B68  377D               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 17634  001B6A  0782               	decf	___ftadd@exp2& (0+255),f,b
 17635                           
 17636                           ; BSR set to: 0
 17637  001B6C  5183               	movf	___ftadd@exp1& (0+255),w,b
 17638  001B6E  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 17639  001B70  B4D8               	btfsc	status,2,c
 17640  001B72  D00D               	goto	l1871
 17641                           
 17642                           ; BSR set to: 0
 17643  001B74  0781               	decf	___ftadd@sign& (0+255),f,b
 17644  001B76  C081  F07E         	movff	___ftadd@sign,??___ftadd
 17645  001B7A  0E07               	movlw	7
 17646  001B7C  177E               	andwf	??___ftadd& (0+255),f,b
 17647  001B7E  B4D8               	btfsc	status,2,c
 17648  001B80  D006               	goto	l1871
 17649  001B82  D7EF               	goto	u6950
 17650  001B84                     
 17651                           ; BSR set to: 0
 17652                           
 17653                           ; BSR set to: 0
 17654  001B84  90D8               	bcf	status,0,c
 17655  001B86  337A               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 17656  001B88  3379               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 17657  001B8A  3378               	rrcf	___ftadd@f1& (0+255),f,b
 17658  001B8C  2B83               	incf	___ftadd@exp1& (0+255),f,b
 17659  001B8E                     l1871:
 17660                           
 17661                           ; BSR set to: 0
 17662                           
 17663                           ; BSR set to: 0
 17664  001B8E  5182               	movf	___ftadd@exp2& (0+255),w,b
 17665  001B90  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 17666  001B92  B4D8               	btfsc	status,2,c
 17667  001B94  D01F               	goto	u7020
 17668  001B96  D7F6               	goto	l1872
 17669  001B98                     l1866:
 17670                           
 17671                           ; BSR set to: 0
 17672                           
 17673                           ; BSR set to: 0
 17674  001B98  5183               	movf	___ftadd@exp1& (0+255),w,b
 17675  001B9A  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 17676  001B9C  B0D8               	btfsc	status,0,c
 17677  001B9E  D01A               	goto	u7020
 17678  001BA0                     u6990:
 17679                           
 17680                           ; BSR set to: 0
 17681                           
 17682                           ; BSR set to: 0
 17683  001BA0  90D8               	bcf	status,0,c
 17684  001BA2  3778               	rlcf	___ftadd@f1& (0+255),f,b
 17685  001BA4  3779               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 17686  001BA6  377A               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 17687  001BA8  0783               	decf	___ftadd@exp1& (0+255),f,b
 17688                           
 17689                           ; BSR set to: 0
 17690  001BAA  5183               	movf	___ftadd@exp1& (0+255),w,b
 17691  001BAC  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 17692  001BAE  B4D8               	btfsc	status,2,c
 17693  001BB0  D00D               	goto	l1880
 17694                           
 17695                           ; BSR set to: 0
 17696  001BB2  0781               	decf	___ftadd@sign& (0+255),f,b
 17697  001BB4  C081  F07E         	movff	___ftadd@sign,??___ftadd
 17698  001BB8  0E07               	movlw	7
 17699  001BBA  177E               	andwf	??___ftadd& (0+255),f,b
 17700  001BBC  B4D8               	btfsc	status,2,c
 17701  001BBE  D006               	goto	l1880
 17702  001BC0  D7EF               	goto	u6990
 17703  001BC2                     
 17704                           ; BSR set to: 0
 17705                           
 17706                           ; BSR set to: 0
 17707  001BC2  90D8               	bcf	status,0,c
 17708  001BC4  337D               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 17709  001BC6  337C               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 17710  001BC8  337B               	rrcf	___ftadd@f2& (0+255),f,b
 17711  001BCA  2B82               	incf	___ftadd@exp2& (0+255),f,b
 17712  001BCC                     l1880:
 17713                           
 17714                           ; BSR set to: 0
 17715                           
 17716                           ; BSR set to: 0
 17717  001BCC  5182               	movf	___ftadd@exp2& (0+255),w,b
 17718  001BCE  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 17719  001BD0  A4D8               	btfss	status,2,c
 17720  001BD2  D7F7               	goto	l1881
 17721  001BD4                     u7020:
 17722                           
 17723                           ; BSR set to: 0
 17724                           
 17725                           ; BSR set to: 0
 17726                           
 17727                           ; BSR set to: 0
 17728  001BD4  AF81               	btfss	___ftadd@sign& (0+255),7,b
 17729  001BD6  D00C               	goto	l1883
 17730                           
 17731                           ; BSR set to: 0
 17732  001BD8  0EFF               	movlw	255
 17733  001BDA  1B78               	xorwf	___ftadd@f1& (0+255),f,b
 17734  001BDC  0EFF               	movlw	255
 17735  001BDE  1B79               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 17736  001BE0  0EFF               	movlw	255
 17737  001BE2  1B7A               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 17738  001BE4  0E01               	movlw	1
 17739  001BE6  2778               	addwf	___ftadd@f1& (0+255),f,b
 17740  001BE8  0E00               	movlw	0
 17741  001BEA  2379               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 17742  001BEC  0E00               	movlw	0
 17743  001BEE  237A               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 17744  001BF0                     l1883:
 17745                           
 17746                           ; BSR set to: 0
 17747  001BF0  AD81               	btfss	___ftadd@sign& (0+255),6,b
 17748  001BF2  D00C               	goto	l1884
 17749                           
 17750                           ; BSR set to: 0
 17751  001BF4  0EFF               	movlw	255
 17752  001BF6  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 17753  001BF8  0EFF               	movlw	255
 17754  001BFA  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 17755  001BFC  0EFF               	movlw	255
 17756  001BFE  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 17757  001C00  0E01               	movlw	1
 17758  001C02  277B               	addwf	___ftadd@f2& (0+255),f,b
 17759  001C04  0E00               	movlw	0
 17760  001C06  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 17761  001C08  0E00               	movlw	0
 17762  001C0A  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 17763  001C0C                     l1884:
 17764                           
 17765                           ; BSR set to: 0
 17766                           
 17767                           ; BSR set to: 0
 17768  001C0C  0E00               	movlw	0
 17769  001C0E  6F81               	movwf	___ftadd@sign& (0+255),b
 17770                           
 17771                           ; BSR set to: 0
 17772  001C10  5178               	movf	___ftadd@f1& (0+255),w,b
 17773  001C12  277B               	addwf	___ftadd@f2& (0+255),f,b
 17774  001C14  5179               	movf	(___ftadd@f1+1)& (0+255),w,b
 17775  001C16  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 17776  001C18  517A               	movf	(___ftadd@f1+2)& (0+255),w,b
 17777  001C1A  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 17778                           
 17779                           ; BSR set to: 0
 17780  001C1C  AF7D               	btfss	(___ftadd@f2+2)& (0+255),7,b
 17781  001C1E  D00E               	goto	l1885
 17782                           
 17783                           ; BSR set to: 0
 17784  001C20  0EFF               	movlw	255
 17785  001C22  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 17786  001C24  0EFF               	movlw	255
 17787  001C26  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 17788  001C28  0EFF               	movlw	255
 17789  001C2A  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 17790  001C2C  0E01               	movlw	1
 17791  001C2E  277B               	addwf	___ftadd@f2& (0+255),f,b
 17792  001C30  0E00               	movlw	0
 17793  001C32  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 17794  001C34  0E00               	movlw	0
 17795  001C36  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 17796                           
 17797                           ; BSR set to: 0
 17798  001C38  0E01               	movlw	1
 17799  001C3A  6F81               	movwf	___ftadd@sign& (0+255),b
 17800  001C3C                     l1885:
 17801                           
 17802                           ; BSR set to: 0
 17803                           
 17804                           ; BSR set to: 0
 17805  001C3C  C07B  F018         	movff	___ftadd@f2,___ftpack@arg
 17806  001C40  C07C  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
 17807  001C44  C07D  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
 17808  001C48  C083  F01B         	movff	___ftadd@exp1,___ftpack@exp
 17809  001C4C  C081  F01C         	movff	___ftadd@sign,___ftpack@sign
 17810  001C50  ECE9  F017         	call	___ftpack	;wreg free
 17811  001C54  C018  F078         	movff	?___ftpack,?___ftadd
 17812  001C58  C019  F079         	movff	?___ftpack+1,?___ftadd+1
 17813  001C5C  C01A  F07A         	movff	?___ftpack+2,?___ftadd+2
 17814  001C60  0012               	return	
 17815  001C62                     __end_of___ftadd:
 17816                           	opt stack 0
 17817                           tosu	equ	0xFFF
 17818                           tosh	equ	0xFFE
 17819                           tosl	equ	0xFFD
 17820                           pclath	equ	0xFFA
 17821                           tblptru	equ	0xFF8
 17822                           tblptrh	equ	0xFF7
 17823                           tblptrl	equ	0xFF6
 17824                           tablat	equ	0xFF5
 17825                           prodh	equ	0xFF4
 17826                           prodl	equ	0xFF3
 17827                           intcon	equ	0xFF2
 17828                           intcon2	equ	0xFF1
 17829                           postinc0	equ	0xFEE
 17830                           plusw0	equ	0xFEB
 17831                           wreg	equ	0xFE8
 17832                           indf1	equ	0xFE7
 17833                           postdec1	equ	0xFE5
 17834                           fsr1h	equ	0xFE2
 17835                           fsr1l	equ	0xFE1
 17836                           indf2	equ	0xFDF
 17837                           postinc2	equ	0xFDE
 17838                           postdec2	equ	0xFDD
 17839                           plusw2	equ	0xFDB
 17840                           fsr2h	equ	0xFDA
 17841                           fsr2l	equ	0xFD9
 17842                           status	equ	0xFD8
 17843                           
 17844 ;; *************** function ___ftneg *****************
 17845 ;; Defined at:
 17846 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 17847 ;; Parameters:    Size  Location     Type
 17848 ;;  f1              3   23[COMRAM] float 
 17849 ;; Auto vars:     Size  Location     Type
 17850 ;;		None
 17851 ;; Return value:  Size  Location     Type
 17852 ;;                  3   23[COMRAM] float 
 17853 ;; Registers used:
 17854 ;;		wreg, status,2, status,0
 17855 ;; Tracked objects:
 17856 ;;		On entry : 0/0
 17857 ;;		On exit  : 0/0
 17858 ;;		Unchanged: 0/0
 17859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17860 ;;      Params:         3       0       0       0       0       0       0
 17861 ;;      Locals:         0       0       0       0       0       0       0
 17862 ;;      Temps:          0       0       0       0       0       0       0
 17863 ;;      Totals:         3       0       0       0       0       0       0
 17864 ;;Total ram usage:        3 bytes
 17865 ;; Hardware stack levels used:    1
 17866 ;; Hardware stack levels required when called:    4
 17867 ;; This function calls:
 17868 ;;		Nothing
 17869 ;; This function is called by:
 17870 ;;		_pow
 17871 ;;		_exp
 17872 ;; This function uses a non-reentrant model
 17873 ;;
 17874                           
 17875                           	psect	text100
 17876  0042B2                     __ptext100:
 17877                           	opt stack 0
 17878  0042B2                     ___ftneg:
 17879                           	opt stack 20
 17880                           
 17881                           ;incstack = 0
 17882  0042B2  5018               	movf	___ftneg@f1,w,c
 17883  0042B4  1019               	iorwf	___ftneg@f1+1,w,c
 17884  0042B6  101A               	iorwf	___ftneg@f1+2,w,c
 17885  0042B8  B4D8               	btfsc	status,2,c
 17886  0042BA  D006               	goto	l1916
 17887  0042BC  0E00               	movlw	0
 17888  0042BE  1A18               	xorwf	___ftneg@f1,f,c
 17889  0042C0  0E00               	movlw	0
 17890  0042C2  1A19               	xorwf	___ftneg@f1+1,f,c
 17891  0042C4  0E80               	movlw	128
 17892  0042C6  1A1A               	xorwf	___ftneg@f1+2,f,c
 17893  0042C8                     l1916:
 17894  0042C8  C018  F018         	movff	___ftneg@f1,?___ftneg
 17895  0042CC  C019  F019         	movff	___ftneg@f1+1,?___ftneg+1
 17896  0042D0  C01A  F01A         	movff	___ftneg@f1+2,?___ftneg+2
 17897  0042D4  0012               	return		;funcret
 17898  0042D6                     __end_of___ftneg:
 17899                           	opt stack 0
 17900                           tosu	equ	0xFFF
 17901                           tosh	equ	0xFFE
 17902                           tosl	equ	0xFFD
 17903                           pclath	equ	0xFFA
 17904                           tblptru	equ	0xFF8
 17905                           tblptrh	equ	0xFF7
 17906                           tblptrl	equ	0xFF6
 17907                           tablat	equ	0xFF5
 17908                           prodh	equ	0xFF4
 17909                           prodl	equ	0xFF3
 17910                           intcon	equ	0xFF2
 17911                           intcon2	equ	0xFF1
 17912                           postinc0	equ	0xFEE
 17913                           plusw0	equ	0xFEB
 17914                           wreg	equ	0xFE8
 17915                           indf1	equ	0xFE7
 17916                           postdec1	equ	0xFE5
 17917                           fsr1h	equ	0xFE2
 17918                           fsr1l	equ	0xFE1
 17919                           indf2	equ	0xFDF
 17920                           postinc2	equ	0xFDE
 17921                           postdec2	equ	0xFDD
 17922                           plusw2	equ	0xFDB
 17923                           fsr2h	equ	0xFDA
 17924                           fsr2l	equ	0xFD9
 17925                           status	equ	0xFD8
 17926                           
 17927 ;; *************** function ___ftdiv *****************
 17928 ;; Defined at:
 17929 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 17930 ;; Parameters:    Size  Location     Type
 17931 ;;  f1              3   40[COMRAM] float 
 17932 ;;  f2              3   43[COMRAM] float 
 17933 ;; Auto vars:     Size  Location     Type
 17934 ;;  f3              3    4[BANK0 ] float 
 17935 ;;  sign            1    8[BANK0 ] unsigned char 
 17936 ;;  exp             1    7[BANK0 ] unsigned char 
 17937 ;;  cntr            1    3[BANK0 ] unsigned char 
 17938 ;; Return value:  Size  Location     Type
 17939 ;;                  3   40[COMRAM] float 
 17940 ;; Registers used:
 17941 ;;		wreg, status,2, status,0, cstack
 17942 ;; Tracked objects:
 17943 ;;		On entry : 0/0
 17944 ;;		On exit  : 0/0
 17945 ;;		Unchanged: 0/0
 17946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17947 ;;      Params:         6       0       0       0       0       0       0
 17948 ;;      Locals:         0       6       0       0       0       0       0
 17949 ;;      Temps:          0       3       0       0       0       0       0
 17950 ;;      Totals:         6       9       0       0       0       0       0
 17951 ;;Total ram usage:       15 bytes
 17952 ;; Hardware stack levels used:    1
 17953 ;; Hardware stack levels required when called:    5
 17954 ;; This function calls:
 17955 ;;		___ftpack
 17956 ;; This function is called by:
 17957 ;;		_AdcConvert
 17958 ;;		_CheckFlashPrecentage
 17959 ;;		_exp
 17960 ;; This function uses a non-reentrant model
 17961 ;;
 17962                           
 17963                           	psect	text101
 17964  002788                     __ptext101:
 17965                           	opt stack 0
 17966  002788                     ___ftdiv:
 17967                           	opt stack 19
 17968                           
 17969                           ;incstack = 0
 17970  002788  C02B  F060         	movff	___ftdiv@f1+2,??___ftdiv
 17971  00278C  0100               	movlb	0	; () banked
 17972  00278E  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 17973  002790  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 17974  002792  342A               	rlcf	___ftdiv@f1+1,w,c
 17975  002794  3760               	rlcf	??___ftdiv& (0+255),f,b
 17976  002796  E301               	bnc	u7261
 17977  002798  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 17978  00279A                     u7261:
 17979  00279A  5160               	movf	??___ftdiv& (0+255),w,b
 17980  00279C  6F67               	movwf	___ftdiv@exp& (0+255),b
 17981  00279E  5167               	movf	___ftdiv@exp& (0+255),w,b
 17982  0027A0  A4D8               	btfss	status,2,c
 17983  0027A2  D007               	goto	l1890
 17984                           
 17985                           ; BSR set to: 0
 17986  0027A4  0E00               	movlw	0
 17987  0027A6  6E29               	movwf	?___ftdiv,c
 17988  0027A8  0E00               	movlw	0
 17989  0027AA  6E2A               	movwf	?___ftdiv+1,c
 17990  0027AC  0E00               	movlw	0
 17991  0027AE  6E2B               	movwf	?___ftdiv+2,c
 17992                           
 17993                           ; BSR set to: 0
 17994  0027B0  0012               	return	
 17995  0027B2                     l1890:
 17996                           
 17997                           ; BSR set to: 0
 17998                           
 17999                           ; BSR set to: 0
 18000  0027B2  C02E  F060         	movff	___ftdiv@f2+2,??___ftdiv
 18001  0027B6  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 18002  0027B8  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 18003  0027BA  342D               	rlcf	___ftdiv@f2+1,w,c
 18004  0027BC  3760               	rlcf	??___ftdiv& (0+255),f,b
 18005  0027BE  E301               	bnc	u7281
 18006  0027C0  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 18007  0027C2                     u7281:
 18008  0027C2  5160               	movf	??___ftdiv& (0+255),w,b
 18009  0027C4  6F68               	movwf	___ftdiv@sign& (0+255),b
 18010  0027C6  5168               	movf	___ftdiv@sign& (0+255),w,b
 18011  0027C8  A4D8               	btfss	status,2,c
 18012  0027CA  D007               	goto	l1892
 18013                           
 18014                           ; BSR set to: 0
 18015  0027CC  0E00               	movlw	0
 18016  0027CE  6E29               	movwf	?___ftdiv,c
 18017  0027D0  0E00               	movlw	0
 18018  0027D2  6E2A               	movwf	?___ftdiv+1,c
 18019  0027D4  0E00               	movlw	0
 18020  0027D6  6E2B               	movwf	?___ftdiv+2,c
 18021                           
 18022                           ; BSR set to: 0
 18023  0027D8  0012               	return	
 18024  0027DA                     l1892:
 18025                           
 18026                           ; BSR set to: 0
 18027                           
 18028                           ; BSR set to: 0
 18029  0027DA  0E00               	movlw	0
 18030  0027DC  6F64               	movwf	___ftdiv@f3& (0+255),b
 18031  0027DE  0E00               	movlw	0
 18032  0027E0  6F65               	movwf	(___ftdiv@f3+1)& (0+255),b
 18033  0027E2  0E00               	movlw	0
 18034  0027E4  6F66               	movwf	(___ftdiv@f3+2)& (0+255),b
 18035                           
 18036                           ; BSR set to: 0
 18037  0027E6  5168               	movf	___ftdiv@sign& (0+255),w,b
 18038  0027E8  0F89               	addlw	137
 18039  0027EA  5F67               	subwf	___ftdiv@exp& (0+255),f,b
 18040                           
 18041                           ; BSR set to: 0
 18042  0027EC  C02B  F068         	movff	___ftdiv@f1+2,___ftdiv@sign
 18043                           
 18044                           ; BSR set to: 0
 18045  0027F0  502E               	movf	___ftdiv@f2+2,w,c
 18046  0027F2  1B68               	xorwf	___ftdiv@sign& (0+255),f,b
 18047                           
 18048                           ; BSR set to: 0
 18049  0027F4  0E80               	movlw	128
 18050  0027F6  1768               	andwf	___ftdiv@sign& (0+255),f,b
 18051                           
 18052                           ; BSR set to: 0
 18053  0027F8  8E2A               	bsf	___ftdiv@f1+1,7,c
 18054                           
 18055                           ; BSR set to: 0
 18056  0027FA  0EFF               	movlw	255
 18057  0027FC  1629               	andwf	___ftdiv@f1,f,c
 18058  0027FE  0EFF               	movlw	255
 18059  002800  162A               	andwf	___ftdiv@f1+1,f,c
 18060  002802  0E00               	movlw	0
 18061  002804  162B               	andwf	___ftdiv@f1+2,f,c
 18062                           
 18063                           ; BSR set to: 0
 18064  002806  8E2D               	bsf	___ftdiv@f2+1,7,c
 18065                           
 18066                           ; BSR set to: 0
 18067  002808  0EFF               	movlw	255
 18068  00280A  162C               	andwf	___ftdiv@f2,f,c
 18069  00280C  0EFF               	movlw	255
 18070  00280E  162D               	andwf	___ftdiv@f2+1,f,c
 18071  002810  0E00               	movlw	0
 18072  002812  162E               	andwf	___ftdiv@f2+2,f,c
 18073                           
 18074                           ; BSR set to: 0
 18075  002814  0E18               	movlw	24
 18076  002816  6F63               	movwf	___ftdiv@cntr& (0+255),b
 18077  002818                     
 18078                           ; BSR set to: 0
 18079                           
 18080                           ; BSR set to: 0
 18081  002818  90D8               	bcf	status,0,c
 18082  00281A  3764               	rlcf	___ftdiv@f3& (0+255),f,b
 18083  00281C  3765               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 18084  00281E  3766               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 18085                           
 18086                           ; BSR set to: 0
 18087  002820  502C               	movf	___ftdiv@f2,w,c
 18088  002822  5C29               	subwf	___ftdiv@f1,w,c
 18089  002824  502D               	movf	___ftdiv@f2+1,w,c
 18090  002826  582A               	subwfb	___ftdiv@f1+1,w,c
 18091  002828  502E               	movf	___ftdiv@f2+2,w,c
 18092  00282A  582B               	subwfb	___ftdiv@f1+2,w,c
 18093  00282C  A0D8               	btfss	status,0,c
 18094  00282E  D007               	goto	l1894
 18095                           
 18096                           ; BSR set to: 0
 18097  002830  502C               	movf	___ftdiv@f2,w,c
 18098  002832  5E29               	subwf	___ftdiv@f1,f,c
 18099  002834  502D               	movf	___ftdiv@f2+1,w,c
 18100  002836  5A2A               	subwfb	___ftdiv@f1+1,f,c
 18101  002838  502E               	movf	___ftdiv@f2+2,w,c
 18102  00283A  5A2B               	subwfb	___ftdiv@f1+2,f,c
 18103                           
 18104                           ; BSR set to: 0
 18105  00283C  8164               	bsf	___ftdiv@f3& (0+255),0,b
 18106  00283E                     l1894:
 18107                           
 18108                           ; BSR set to: 0
 18109  00283E  90D8               	bcf	status,0,c
 18110  002840  3629               	rlcf	___ftdiv@f1,f,c
 18111  002842  362A               	rlcf	___ftdiv@f1+1,f,c
 18112  002844  362B               	rlcf	___ftdiv@f1+2,f,c
 18113                           
 18114                           ; BSR set to: 0
 18115  002846  2F63               	decfsz	___ftdiv@cntr& (0+255),f,b
 18116  002848  D7E7               	goto	l1893
 18117                           
 18118                           ; BSR set to: 0
 18119                           
 18120                           ; BSR set to: 0
 18121  00284A  C064  F018         	movff	___ftdiv@f3,___ftpack@arg
 18122  00284E  C065  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
 18123  002852  C066  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
 18124  002856  C067  F01B         	movff	___ftdiv@exp,___ftpack@exp
 18125  00285A  C068  F01C         	movff	___ftdiv@sign,___ftpack@sign
 18126  00285E  ECE9  F017         	call	___ftpack	;wreg free
 18127  002862  C018  F029         	movff	?___ftpack,?___ftdiv
 18128  002866  C019  F02A         	movff	?___ftpack+1,?___ftdiv+1
 18129  00286A  C01A  F02B         	movff	?___ftpack+2,?___ftdiv+2
 18130  00286E  0012               	return	
 18131  002870                     __end_of___ftdiv:
 18132                           	opt stack 0
 18133                           tosu	equ	0xFFF
 18134                           tosh	equ	0xFFE
 18135                           tosl	equ	0xFFD
 18136                           pclath	equ	0xFFA
 18137                           tblptru	equ	0xFF8
 18138                           tblptrh	equ	0xFF7
 18139                           tblptrl	equ	0xFF6
 18140                           tablat	equ	0xFF5
 18141                           prodh	equ	0xFF4
 18142                           prodl	equ	0xFF3
 18143                           intcon	equ	0xFF2
 18144                           intcon2	equ	0xFF1
 18145                           postinc0	equ	0xFEE
 18146                           plusw0	equ	0xFEB
 18147                           wreg	equ	0xFE8
 18148                           indf1	equ	0xFE7
 18149                           postdec1	equ	0xFE5
 18150                           fsr1h	equ	0xFE2
 18151                           fsr1l	equ	0xFE1
 18152                           indf2	equ	0xFDF
 18153                           postinc2	equ	0xFDE
 18154                           postdec2	equ	0xFDD
 18155                           plusw2	equ	0xFDB
 18156                           fsr2h	equ	0xFDA
 18157                           fsr2l	equ	0xFD9
 18158                           status	equ	0xFD8
 18159                           
 18160 ;; *************** function ___awtoft *****************
 18161 ;; Defined at:
 18162 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 18163 ;; Parameters:    Size  Location     Type
 18164 ;;  c               2   31[COMRAM] int 
 18165 ;; Auto vars:     Size  Location     Type
 18166 ;;  sign            1   34[COMRAM] unsigned char 
 18167 ;; Return value:  Size  Location     Type
 18168 ;;                  3   31[COMRAM] float 
 18169 ;; Registers used:
 18170 ;;		wreg, status,2, status,0, cstack
 18171 ;; Tracked objects:
 18172 ;;		On entry : 0/0
 18173 ;;		On exit  : 0/0
 18174 ;;		Unchanged: 0/0
 18175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18176 ;;      Params:         3       0       0       0       0       0       0
 18177 ;;      Locals:         1       0       0       0       0       0       0
 18178 ;;      Temps:          0       0       0       0       0       0       0
 18179 ;;      Totals:         4       0       0       0       0       0       0
 18180 ;;Total ram usage:        4 bytes
 18181 ;; Hardware stack levels used:    1
 18182 ;; Hardware stack levels required when called:    5
 18183 ;; This function calls:
 18184 ;;		___ftpack
 18185 ;; This function is called by:
 18186 ;;		_ReadIntFromEeprom
 18187 ;;		_exp
 18188 ;;		_log
 18189 ;; This function uses a non-reentrant model
 18190 ;;
 18191                           
 18192                           	psect	text102
 18193  003F42                     __ptext102:
 18194                           	opt stack 0
 18195  003F42                     ___awtoft:
 18196                           	opt stack 19
 18197                           
 18198                           ;incstack = 0
 18199  003F42  0E00               	movlw	0
 18200  003F44  6E23               	movwf	___awtoft@sign,c
 18201  003F46  AE21               	btfss	___awtoft@c+1,7,c
 18202  003F48  D006               	goto	l1807
 18203  003F4A  6C20               	negf	___awtoft@c,c
 18204  003F4C  1E21               	comf	___awtoft@c+1,f,c
 18205  003F4E  B0D8               	btfsc	status,0,c
 18206  003F50  2A21               	incf	___awtoft@c+1,f,c
 18207  003F52  0E01               	movlw	1
 18208  003F54  6E23               	movwf	___awtoft@sign,c
 18209  003F56                     l1807:
 18210  003F56  C020  F018         	movff	___awtoft@c,___ftpack@arg
 18211  003F5A  C021  F019         	movff	___awtoft@c+1,___ftpack@arg+1
 18212  003F5E  6A1A               	clrf	___ftpack@arg+2,c
 18213  003F60  0E8E               	movlw	142
 18214  003F62  6E1B               	movwf	___ftpack@exp,c
 18215  003F64  C023  F01C         	movff	___awtoft@sign,___ftpack@sign
 18216  003F68  ECE9  F017         	call	___ftpack	;wreg free
 18217  003F6C  C018  F020         	movff	?___ftpack,?___awtoft
 18218  003F70  C019  F021         	movff	?___ftpack+1,?___awtoft+1
 18219  003F74  C01A  F022         	movff	?___ftpack+2,?___awtoft+2
 18220  003F78  0012               	return	
 18221  003F7A                     __end_of___awtoft:
 18222                           	opt stack 0
 18223                           tosu	equ	0xFFF
 18224                           tosh	equ	0xFFE
 18225                           tosl	equ	0xFFD
 18226                           pclath	equ	0xFFA
 18227                           tblptru	equ	0xFF8
 18228                           tblptrh	equ	0xFF7
 18229                           tblptrl	equ	0xFF6
 18230                           tablat	equ	0xFF5
 18231                           prodh	equ	0xFF4
 18232                           prodl	equ	0xFF3
 18233                           intcon	equ	0xFF2
 18234                           intcon2	equ	0xFF1
 18235                           postinc0	equ	0xFEE
 18236                           plusw0	equ	0xFEB
 18237                           wreg	equ	0xFE8
 18238                           indf1	equ	0xFE7
 18239                           postdec1	equ	0xFE5
 18240                           fsr1h	equ	0xFE2
 18241                           fsr1l	equ	0xFE1
 18242                           indf2	equ	0xFDF
 18243                           postinc2	equ	0xFDE
 18244                           postdec2	equ	0xFDD
 18245                           plusw2	equ	0xFDB
 18246                           fsr2h	equ	0xFDA
 18247                           fsr2l	equ	0xFD9
 18248                           status	equ	0xFD8
 18249                           
 18250 ;; *************** function ___lltoft *****************
 18251 ;; Defined at:
 18252 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
 18253 ;; Parameters:    Size  Location     Type
 18254 ;;  c               4   31[COMRAM] unsigned long 
 18255 ;; Auto vars:     Size  Location     Type
 18256 ;;  exp             1   39[COMRAM] unsigned char 
 18257 ;; Return value:  Size  Location     Type
 18258 ;;                  3   31[COMRAM] float 
 18259 ;; Registers used:
 18260 ;;		wreg, status,2, status,0, cstack
 18261 ;; Tracked objects:
 18262 ;;		On entry : 0/0
 18263 ;;		On exit  : 0/0
 18264 ;;		Unchanged: 0/0
 18265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18266 ;;      Params:         4       0       0       0       0       0       0
 18267 ;;      Locals:         1       0       0       0       0       0       0
 18268 ;;      Temps:          4       0       0       0       0       0       0
 18269 ;;      Totals:         9       0       0       0       0       0       0
 18270 ;;Total ram usage:        9 bytes
 18271 ;; Hardware stack levels used:    1
 18272 ;; Hardware stack levels required when called:    5
 18273 ;; This function calls:
 18274 ;;		___ftpack
 18275 ;; This function is called by:
 18276 ;;		_CheckFlashPrecentage
 18277 ;;		_pow
 18278 ;; This function uses a non-reentrant model
 18279 ;;
 18280                           
 18281                           	psect	text103
 18282  0039DA                     __ptext103:
 18283                           	opt stack 0
 18284  0039DA                     ___lltoft:
 18285                           	opt stack 20
 18286                           
 18287                           ;incstack = 0
 18288  0039DA  0E8E               	movlw	142
 18289  0039DC  6E28               	movwf	___lltoft@exp,c
 18290  0039DE  D006               	goto	l1983
 18291  0039E0  90D8               	bcf	status,0,c
 18292  0039E2  3223               	rrcf	___lltoft@c+3,f,c
 18293  0039E4  3222               	rrcf	___lltoft@c+2,f,c
 18294  0039E6  3221               	rrcf	___lltoft@c+1,f,c
 18295  0039E8  3220               	rrcf	___lltoft@c,f,c
 18296  0039EA  2A28               	incf	___lltoft@exp,f,c
 18297  0039EC                     l1983:
 18298  0039EC  0E00               	movlw	0
 18299  0039EE  1420               	andwf	___lltoft@c,w,c
 18300  0039F0  6E24               	movwf	??___lltoft& (0+255),c
 18301  0039F2  0E00               	movlw	0
 18302  0039F4  1421               	andwf	___lltoft@c+1,w,c
 18303  0039F6  6E25               	movwf	(??___lltoft+1)& (0+255),c
 18304  0039F8  0E00               	movlw	0
 18305  0039FA  1422               	andwf	___lltoft@c+2,w,c
 18306  0039FC  6E26               	movwf	(??___lltoft+2)& (0+255),c
 18307  0039FE  0EFF               	movlw	255
 18308  003A00  1423               	andwf	___lltoft@c+3,w,c
 18309  003A02  6E27               	movwf	(??___lltoft+3)& (0+255),c
 18310  003A04  5024               	movf	??___lltoft,w,c
 18311  003A06  1025               	iorwf	??___lltoft+1,w,c
 18312  003A08  1026               	iorwf	??___lltoft+2,w,c
 18313  003A0A  1027               	iorwf	??___lltoft+3,w,c
 18314  003A0C  A4D8               	btfss	status,2,c
 18315  003A0E  D7E8               	goto	l1984
 18316  003A10  C020  F018         	movff	___lltoft@c,___ftpack@arg
 18317  003A14  C021  F019         	movff	___lltoft@c+1,___ftpack@arg+1
 18318  003A18  C022  F01A         	movff	___lltoft@c+2,___ftpack@arg+2
 18319  003A1C  C028  F01B         	movff	___lltoft@exp,___ftpack@exp
 18320  003A20  0E00               	movlw	0
 18321  003A22  6E1C               	movwf	___ftpack@sign,c
 18322  003A24  ECE9  F017         	call	___ftpack	;wreg free
 18323  003A28  C018  F020         	movff	?___ftpack,?___lltoft
 18324  003A2C  C019  F021         	movff	?___ftpack+1,?___lltoft+1
 18325  003A30  C01A  F022         	movff	?___ftpack+2,?___lltoft+2
 18326  003A34  0012               	return	
 18327  003A36                     __end_of___lltoft:
 18328                           	opt stack 0
 18329                           tosu	equ	0xFFF
 18330                           tosh	equ	0xFFE
 18331                           tosl	equ	0xFFD
 18332                           pclath	equ	0xFFA
 18333                           tblptru	equ	0xFF8
 18334                           tblptrh	equ	0xFF7
 18335                           tblptrl	equ	0xFF6
 18336                           tablat	equ	0xFF5
 18337                           prodh	equ	0xFF4
 18338                           prodl	equ	0xFF3
 18339                           intcon	equ	0xFF2
 18340                           intcon2	equ	0xFF1
 18341                           postinc0	equ	0xFEE
 18342                           plusw0	equ	0xFEB
 18343                           wreg	equ	0xFE8
 18344                           indf1	equ	0xFE7
 18345                           postdec1	equ	0xFE5
 18346                           fsr1h	equ	0xFE2
 18347                           fsr1l	equ	0xFE1
 18348                           indf2	equ	0xFDF
 18349                           postinc2	equ	0xFDE
 18350                           postdec2	equ	0xFDD
 18351                           plusw2	equ	0xFDB
 18352                           fsr2h	equ	0xFDA
 18353                           fsr2l	equ	0xFD9
 18354                           status	equ	0xFD8
 18355                           
 18356 ;; *************** function ___lwtoft *****************
 18357 ;; Defined at:
 18358 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 18359 ;; Parameters:    Size  Location     Type
 18360 ;;  c               2   31[COMRAM] unsigned int 
 18361 ;; Auto vars:     Size  Location     Type
 18362 ;;		None
 18363 ;; Return value:  Size  Location     Type
 18364 ;;                  3   31[COMRAM] float 
 18365 ;; Registers used:
 18366 ;;		wreg, status,2, status,0, cstack
 18367 ;; Tracked objects:
 18368 ;;		On entry : 0/0
 18369 ;;		On exit  : 0/0
 18370 ;;		Unchanged: 0/0
 18371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18372 ;;      Params:         3       0       0       0       0       0       0
 18373 ;;      Locals:         0       0       0       0       0       0       0
 18374 ;;      Temps:          0       0       0       0       0       0       0
 18375 ;;      Totals:         3       0       0       0       0       0       0
 18376 ;;Total ram usage:        3 bytes
 18377 ;; Hardware stack levels used:    1
 18378 ;; Hardware stack levels required when called:    5
 18379 ;; This function calls:
 18380 ;;		___ftpack
 18381 ;; This function is called by:
 18382 ;;		_AdcConvert
 18383 ;; This function uses a non-reentrant model
 18384 ;;
 18385                           
 18386                           	psect	text104
 18387  0042D6                     __ptext104:
 18388                           	opt stack 0
 18389  0042D6                     ___lwtoft:
 18390                           	opt stack 24
 18391                           
 18392                           ;incstack = 0
 18393  0042D6  C020  F018         	movff	___lwtoft@c,___ftpack@arg
 18394  0042DA  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
 18395  0042DE  6A1A               	clrf	___ftpack@arg+2,c
 18396  0042E0  0E8E               	movlw	142
 18397  0042E2  6E1B               	movwf	___ftpack@exp,c
 18398  0042E4  0E00               	movlw	0
 18399  0042E6  6E1C               	movwf	___ftpack@sign,c
 18400  0042E8  ECE9  F017         	call	___ftpack	;wreg free
 18401  0042EC  C018  F020         	movff	?___ftpack,?___lwtoft
 18402  0042F0  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
 18403  0042F4  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
 18404  0042F8  0012               	return	
 18405  0042FA                     __end_of___lwtoft:
 18406                           	opt stack 0
 18407                           tosu	equ	0xFFF
 18408                           tosh	equ	0xFFE
 18409                           tosl	equ	0xFFD
 18410                           pclath	equ	0xFFA
 18411                           tblptru	equ	0xFF8
 18412                           tblptrh	equ	0xFF7
 18413                           tblptrl	equ	0xFF6
 18414                           tablat	equ	0xFF5
 18415                           prodh	equ	0xFF4
 18416                           prodl	equ	0xFF3
 18417                           intcon	equ	0xFF2
 18418                           intcon2	equ	0xFF1
 18419                           postinc0	equ	0xFEE
 18420                           plusw0	equ	0xFEB
 18421                           wreg	equ	0xFE8
 18422                           indf1	equ	0xFE7
 18423                           postdec1	equ	0xFE5
 18424                           fsr1h	equ	0xFE2
 18425                           fsr1l	equ	0xFE1
 18426                           indf2	equ	0xFDF
 18427                           postinc2	equ	0xFDE
 18428                           postdec2	equ	0xFDD
 18429                           plusw2	equ	0xFDB
 18430                           fsr2h	equ	0xFDA
 18431                           fsr2l	equ	0xFD9
 18432                           status	equ	0xFD8
 18433                           
 18434 ;; *************** function ___ftpack *****************
 18435 ;; Defined at:
 18436 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 18437 ;; Parameters:    Size  Location     Type
 18438 ;;  arg             3   23[COMRAM] unsigned um
 18439 ;;  exp             1   26[COMRAM] unsigned char 
 18440 ;;  sign            1   27[COMRAM] unsigned char 
 18441 ;; Auto vars:     Size  Location     Type
 18442 ;;		None
 18443 ;; Return value:  Size  Location     Type
 18444 ;;                  3   23[COMRAM] float 
 18445 ;; Registers used:
 18446 ;;		wreg, status,2, status,0
 18447 ;; Tracked objects:
 18448 ;;		On entry : 0/0
 18449 ;;		On exit  : 0/0
 18450 ;;		Unchanged: 0/0
 18451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18452 ;;      Params:         5       0       0       0       0       0       0
 18453 ;;      Locals:         0       0       0       0       0       0       0
 18454 ;;      Temps:          3       0       0       0       0       0       0
 18455 ;;      Totals:         8       0       0       0       0       0       0
 18456 ;;Total ram usage:        8 bytes
 18457 ;; Hardware stack levels used:    1
 18458 ;; Hardware stack levels required when called:    4
 18459 ;; This function calls:
 18460 ;;		Nothing
 18461 ;; This function is called by:
 18462 ;;		___altoft
 18463 ;;		___awtoft
 18464 ;;		___ftadd
 18465 ;;		___ftdiv
 18466 ;;		___ftmul
 18467 ;;		___lltoft
 18468 ;;		___lwtoft
 18469 ;; This function uses a non-reentrant model
 18470 ;;
 18471                           
 18472                           	psect	text105
 18473  002FD2                     __ptext105:
 18474                           	opt stack 0
 18475  002FD2                     ___ftpack:
 18476                           	opt stack 18
 18477                           
 18478                           ;incstack = 0
 18479  002FD2  501B               	movf	___ftpack@exp,w,c
 18480  002FD4  B4D8               	btfsc	status,2,c
 18481  002FD6  D005               	goto	u6760
 18482  002FD8  5018               	movf	___ftpack@arg,w,c
 18483  002FDA  1019               	iorwf	___ftpack@arg+1,w,c
 18484  002FDC  101A               	iorwf	___ftpack@arg+2,w,c
 18485  002FDE  A4D8               	btfss	status,2,c
 18486  002FE0  D00C               	goto	l1826
 18487  002FE2                     u6760:
 18488  002FE2  0E00               	movlw	0
 18489  002FE4  6E18               	movwf	?___ftpack,c
 18490  002FE6  0E00               	movlw	0
 18491  002FE8  6E19               	movwf	?___ftpack+1,c
 18492  002FEA  0E00               	movlw	0
 18493  002FEC  6E1A               	movwf	?___ftpack+2,c
 18494  002FEE  0012               	return	
 18495  002FF0  2A1B               	incf	___ftpack@exp,f,c
 18496  002FF2  90D8               	bcf	status,0,c
 18497  002FF4  321A               	rrcf	___ftpack@arg+2,f,c
 18498  002FF6  3219               	rrcf	___ftpack@arg+1,f,c
 18499  002FF8  3218               	rrcf	___ftpack@arg,f,c
 18500  002FFA                     l1826:
 18501  002FFA  0E00               	movlw	0
 18502  002FFC  1418               	andwf	___ftpack@arg,w,c
 18503  002FFE  6E1D               	movwf	??___ftpack& (0+255),c
 18504  003000  0E00               	movlw	0
 18505  003002  1419               	andwf	___ftpack@arg+1,w,c
 18506  003004  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 18507  003006  0EFE               	movlw	254
 18508  003008  141A               	andwf	___ftpack@arg+2,w,c
 18509  00300A  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 18510  00300C  501D               	movf	??___ftpack,w,c
 18511  00300E  101E               	iorwf	??___ftpack+1,w,c
 18512  003010  101F               	iorwf	??___ftpack+2,w,c
 18513  003012  B4D8               	btfsc	status,2,c
 18514  003014  D00C               	goto	l1829
 18515  003016  D7EC               	goto	l1827
 18516  003018  2A1B               	incf	___ftpack@exp,f,c
 18517  00301A  0E01               	movlw	1
 18518  00301C  2618               	addwf	___ftpack@arg,f,c
 18519  00301E  0E00               	movlw	0
 18520  003020  2219               	addwfc	___ftpack@arg+1,f,c
 18521  003022  0E00               	movlw	0
 18522  003024  221A               	addwfc	___ftpack@arg+2,f,c
 18523  003026  90D8               	bcf	status,0,c
 18524  003028  321A               	rrcf	___ftpack@arg+2,f,c
 18525  00302A  3219               	rrcf	___ftpack@arg+1,f,c
 18526  00302C  3218               	rrcf	___ftpack@arg,f,c
 18527  00302E                     l1829:
 18528  00302E  0E00               	movlw	0
 18529  003030  1418               	andwf	___ftpack@arg,w,c
 18530  003032  6E1D               	movwf	??___ftpack& (0+255),c
 18531  003034  0E00               	movlw	0
 18532  003036  1419               	andwf	___ftpack@arg+1,w,c
 18533  003038  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 18534  00303A  0EFF               	movlw	255
 18535  00303C  141A               	andwf	___ftpack@arg+2,w,c
 18536  00303E  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 18537  003040  501D               	movf	??___ftpack,w,c
 18538  003042  101E               	iorwf	??___ftpack+1,w,c
 18539  003044  101F               	iorwf	??___ftpack+2,w,c
 18540  003046  B4D8               	btfsc	status,2,c
 18541  003048  D006               	goto	l1832
 18542  00304A  D7E6               	goto	l1830
 18543  00304C  061B               	decf	___ftpack@exp,f,c
 18544  00304E  90D8               	bcf	status,0,c
 18545  003050  3618               	rlcf	___ftpack@arg,f,c
 18546  003052  3619               	rlcf	___ftpack@arg+1,f,c
 18547  003054  361A               	rlcf	___ftpack@arg+2,f,c
 18548  003056                     l1832:
 18549  003056  BE19               	btfsc	___ftpack@arg+1,7,c
 18550  003058  D003               	goto	u6800
 18551  00305A  0E02               	movlw	2
 18552  00305C  601B               	cpfslt	___ftpack@exp,c
 18553  00305E  D7F6               	goto	l1833
 18554  003060                     u6800:
 18555  003060  A01B               	btfss	___ftpack@exp,0,c
 18556  003062  9E19               	bcf	___ftpack@arg+1,7,c
 18557  003064  90D8               	bcf	status,0,c
 18558  003066  321B               	rrcf	___ftpack@exp,f,c
 18559  003068  501B               	movf	___ftpack@exp,w,c
 18560  00306A  121A               	iorwf	___ftpack@arg+2,f,c
 18561  00306C  501C               	movf	___ftpack@sign,w,c
 18562  00306E  A4D8               	btfss	status,2,c
 18563  003070  8E1A               	bsf	___ftpack@arg+2,7,c
 18564  003072  C018  F018         	movff	___ftpack@arg,?___ftpack
 18565  003076  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
 18566  00307A  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
 18567  00307E  0012               	return	
 18568  003080                     __end_of___ftpack:
 18569                           	opt stack 0
 18570                           tosu	equ	0xFFF
 18571                           tosh	equ	0xFFE
 18572                           tosl	equ	0xFFD
 18573                           pclath	equ	0xFFA
 18574                           tblptru	equ	0xFF8
 18575                           tblptrh	equ	0xFF7
 18576                           tblptrl	equ	0xFF6
 18577                           tablat	equ	0xFF5
 18578                           prodh	equ	0xFF4
 18579                           prodl	equ	0xFF3
 18580                           intcon	equ	0xFF2
 18581                           intcon2	equ	0xFF1
 18582                           postinc0	equ	0xFEE
 18583                           plusw0	equ	0xFEB
 18584                           wreg	equ	0xFE8
 18585                           indf1	equ	0xFE7
 18586                           postdec1	equ	0xFE5
 18587                           fsr1h	equ	0xFE2
 18588                           fsr1l	equ	0xFE1
 18589                           indf2	equ	0xFDF
 18590                           postinc2	equ	0xFDE
 18591                           postdec2	equ	0xFDD
 18592                           plusw2	equ	0xFDB
 18593                           fsr2h	equ	0xFDA
 18594                           fsr2l	equ	0xFD9
 18595                           status	equ	0xFD8
 18596                           
 18597 ;; *************** function _GetUint16FromBitArray *****************
 18598 ;; Defined at:
 18599 ;;		line 34 in file "SystemCommon.c"
 18600 ;; Parameters:    Size  Location     Type
 18601 ;;  bitarray        2   23[COMRAM] PTR unsigned char 
 18602 ;;		 -> synthLdTxArray(12), synthLdRxArray(12), 
 18603 ;; Auto vars:     Size  Location     Type
 18604 ;;  state           1   30[COMRAM] unsigned char 
 18605 ;;  i               2   31[COMRAM] int 
 18606 ;;  res             2   28[COMRAM] unsigned int 
 18607 ;; Return value:  Size  Location     Type
 18608 ;;                  2   23[COMRAM] unsigned int 
 18609 ;; Registers used:
 18610 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18611 ;; Tracked objects:
 18612 ;;		On entry : 0/0
 18613 ;;		On exit  : 0/0
 18614 ;;		Unchanged: 0/0
 18615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18616 ;;      Params:         2       0       0       0       0       0       0
 18617 ;;      Locals:         5       0       0       0       0       0       0
 18618 ;;      Temps:          3       0       0       0       0       0       0
 18619 ;;      Totals:        10       0       0       0       0       0       0
 18620 ;;Total ram usage:       10 bytes
 18621 ;; Hardware stack levels used:    1
 18622 ;; Hardware stack levels required when called:    4
 18623 ;; This function calls:
 18624 ;;		Nothing
 18625 ;; This function is called by:
 18626 ;;		_AdcConvert
 18627 ;; This function uses a non-reentrant model
 18628 ;;
 18629                           
 18630                           	psect	text106
 18631  0036AA                     __ptext106:
 18632                           	opt stack 0
 18633  0036AA                     _GetUint16FromBitArray:
 18634                           	opt stack 25
 18635                           
 18636                           ;SystemCommon.c: 36: uint16_t res = 0;
 18637                           
 18638                           ;incstack = 0
 18639  0036AA  0E00               	movlw	0
 18640  0036AC  6E1E               	movwf	GetUint16FromBitArray@res+1,c
 18641  0036AE  0E00               	movlw	0
 18642  0036B0  6E1D               	movwf	GetUint16FromBitArray@res,c
 18643                           
 18644                           ;SystemCommon.c: 37: for (int i = 0 ; i != 16 ; i++)
 18645  0036B2  0E00               	movlw	0
 18646  0036B4  6E21               	movwf	GetUint16FromBitArray@i+1,c
 18647  0036B6  0E00               	movlw	0
 18648  0036B8  6E20               	movwf	GetUint16FromBitArray@i,c
 18649  0036BA                     l6462:
 18650  0036BA  0E10               	movlw	16
 18651  0036BC  1820               	xorwf	GetUint16FromBitArray@i,w,c
 18652  0036BE  1021               	iorwf	GetUint16FromBitArray@i+1,w,c
 18653  0036C0  B4D8               	btfsc	status,2,c
 18654  0036C2  0012               	return	
 18655                           
 18656                           ;SystemCommon.c: 38: {
 18657                           ;SystemCommon.c: 39: bool state = bitarray[i];
 18658  0036C4  5020               	movf	GetUint16FromBitArray@i,w,c
 18659  0036C6  2418               	addwf	GetUint16FromBitArray@bitarray,w,c
 18660  0036C8  6ED9               	movwf	fsr2l,c
 18661  0036CA  5021               	movf	GetUint16FromBitArray@i+1,w,c
 18662  0036CC  2019               	addwfc	GetUint16FromBitArray@bitarray+1,w,c
 18663  0036CE  6EDA               	movwf	fsr2h,c
 18664  0036D0  50DF               	movf	indf2,w,c
 18665  0036D2  6E1F               	movwf	GetUint16FromBitArray@state,c
 18666                           
 18667                           ;SystemCommon.c: 40: if(state == 0xFF)
 18668  0036D4  281F               	incf	GetUint16FromBitArray@state,w,c
 18669  0036D6  A4D8               	btfss	status,2,c
 18670  0036D8  D005               	goto	l1414
 18671                           
 18672                           ;SystemCommon.c: 41: {
 18673                           ;SystemCommon.c: 42: return res;
 18674  0036DA  C01D  F018         	movff	GetUint16FromBitArray@res,?_GetUint16FromBitArray
 18675  0036DE  C01E  F019         	movff	GetUint16FromBitArray@res+1,?_GetUint16FromBitArray+1
 18676  0036E2  0012               	return	
 18677  0036E4                     l1414:
 18678                           
 18679                           ;SystemCommon.c: 43: }
 18680                           ;SystemCommon.c: 44: if (bitarray[i])
 18681  0036E4  5020               	movf	GetUint16FromBitArray@i,w,c
 18682  0036E6  2418               	addwf	GetUint16FromBitArray@bitarray,w,c
 18683  0036E8  6ED9               	movwf	fsr2l,c
 18684  0036EA  5021               	movf	GetUint16FromBitArray@i+1,w,c
 18685  0036EC  2019               	addwfc	GetUint16FromBitArray@bitarray+1,w,c
 18686  0036EE  6EDA               	movwf	fsr2h,c
 18687  0036F0  50DF               	movf	indf2,w,c
 18688  0036F2  B4D8               	btfsc	status,2,c
 18689  0036F4  D011               	goto	l1416
 18690                           
 18691                           ;SystemCommon.c: 45: {
 18692                           ;SystemCommon.c: 46: res |= (uint16_t)(1 << i);
 18693  0036F6  C020  F01A         	movff	GetUint16FromBitArray@i,??_GetUint16FromBitArray
 18694  0036FA  0E01               	movlw	1
 18695  0036FC  6E1B               	movwf	(??_GetUint16FromBitArray+1)& (0+255),c
 18696  0036FE  0E00               	movlw	0
 18697  003700  6E1C               	movwf	(??_GetUint16FromBitArray+2)& (0+255),c
 18698  003702  2A1A               	incf	??_GetUint16FromBitArray,f,c
 18699  003704  D003               	goto	u5964
 18700  003706                     u5965:
 18701  003706  90D8               	bcf	status,0,c
 18702  003708  361B               	rlcf	??_GetUint16FromBitArray+1,f,c
 18703  00370A  361C               	rlcf	??_GetUint16FromBitArray+2,f,c
 18704  00370C                     u5964:
 18705  00370C  2E1A               	decfsz	??_GetUint16FromBitArray,f,c
 18706  00370E  D7FB               	goto	u5965
 18707  003710  501B               	movf	??_GetUint16FromBitArray+1,w,c
 18708  003712  121D               	iorwf	GetUint16FromBitArray@res,f,c
 18709  003714  501C               	movf	??_GetUint16FromBitArray+2,w,c
 18710  003716  121E               	iorwf	GetUint16FromBitArray@res+1,f,c
 18711  003718                     l1416:
 18712  003718  4A20               	infsnz	GetUint16FromBitArray@i,f,c
 18713  00371A  2A21               	incf	GetUint16FromBitArray@i+1,f,c
 18714  00371C  D7CE               	goto	l6462
 18715  00371E                     __end_of_GetUint16FromBitArray:
 18716                           	opt stack 0
 18717                           tosu	equ	0xFFF
 18718                           tosh	equ	0xFFE
 18719                           tosl	equ	0xFFD
 18720                           pclath	equ	0xFFA
 18721                           tblptru	equ	0xFF8
 18722                           tblptrh	equ	0xFF7
 18723                           tblptrl	equ	0xFF6
 18724                           tablat	equ	0xFF5
 18725                           prodh	equ	0xFF4
 18726                           prodl	equ	0xFF3
 18727                           intcon	equ	0xFF2
 18728                           intcon2	equ	0xFF1
 18729                           postinc0	equ	0xFEE
 18730                           plusw0	equ	0xFEB
 18731                           wreg	equ	0xFE8
 18732                           indf1	equ	0xFE7
 18733                           postdec1	equ	0xFE5
 18734                           fsr1h	equ	0xFE2
 18735                           fsr1l	equ	0xFE1
 18736                           indf2	equ	0xFDF
 18737                           postinc2	equ	0xFDE
 18738                           postdec2	equ	0xFDD
 18739                           plusw2	equ	0xFDB
 18740                           fsr2h	equ	0xFDA
 18741                           fsr2l	equ	0xFD9
 18742                           status	equ	0xFD8
 18743                           
 18744 ;; *************** function _FlashSampleWrite *****************
 18745 ;; Defined at:
 18746 ;;		line 29 in file "FlashApp.c"
 18747 ;; Parameters:    Size  Location     Type
 18748 ;;  sampleData      2   44[COMRAM] unsigned int 
 18749 ;;  channelNum      1   46[COMRAM] unsigned char 
 18750 ;; Auto vars:     Size  Location     Type
 18751 ;;  rotateLeft      2    2[BANK0 ] unsigned int 
 18752 ;; Return value:  Size  Location     Type
 18753 ;;                  1    wreg      void 
 18754 ;; Registers used:
 18755 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18756 ;; Tracked objects:
 18757 ;;		On entry : 0/0
 18758 ;;		On exit  : 0/0
 18759 ;;		Unchanged: 0/0
 18760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18761 ;;      Params:         3       0       0       0       0       0       0
 18762 ;;      Locals:         0       2       0       0       0       0       0
 18763 ;;      Temps:          0       2       0       0       0       0       0
 18764 ;;      Totals:         3       4       0       0       0       0       0
 18765 ;;Total ram usage:        7 bytes
 18766 ;; Hardware stack levels used:    1
 18767 ;; Hardware stack levels required when called:    6
 18768 ;; This function calls:
 18769 ;;		_FLASH_IsWriteDone
 18770 ;;		_FLASH_WriteBlock
 18771 ;; This function is called by:
 18772 ;;		_AdcConvert
 18773 ;; This function uses a non-reentrant model
 18774 ;;
 18775                           
 18776                           	psect	text107
 18777  0022BA                     __ptext107:
 18778                           	opt stack 0
 18779  0022BA                     _FlashSampleWrite:
 18780                           	opt stack 23
 18781                           
 18782                           ;FlashApp.c: 32: uint16_t rotateLeft = (channelNum << 12);
 18783                           
 18784                           ;incstack = 0
 18785  0022BA  502F               	movf	FlashSampleWrite@channelNum,w,c
 18786  0022BC  0100               	movlb	0	; () banked
 18787  0022BE  6F60               	movwf	??_FlashSampleWrite& (0+255),b
 18788  0022C0  6B61               	clrf	(??_FlashSampleWrite+1)& (0+255),b
 18789  0022C2  0E0C               	movlw	12
 18790  0022C4                     u9215:
 18791  0022C4  90D8               	bcf	status,0,c
 18792  0022C6  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 18793  0022C8  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 18794  0022CA  2EE8               	decfsz	wreg,f,c
 18795  0022CC  D7FB               	goto	u9215
 18796  0022CE  C060  F062         	movff	??_FlashSampleWrite,FlashSampleWrite@rotateLeft
 18797  0022D2  C061  F063         	movff	??_FlashSampleWrite+1,FlashSampleWrite@rotateLeft+1
 18798                           
 18799                           ;FlashApp.c: 33: sampleData |= rotateLeft;
 18800  0022D6  5162               	movf	FlashSampleWrite@rotateLeft& (0+255),w,b
 18801  0022D8  122D               	iorwf	FlashSampleWrite@sampleData,f,c
 18802  0022DA  5163               	movf	(FlashSampleWrite@rotateLeft+1)& (0+255),w,b
 18803  0022DC  122E               	iorwf	FlashSampleWrite@sampleData+1,f,c
 18804                           
 18805                           ; BSR set to: 0
 18806                           ;FlashApp.c: 34: sampleArray[sampleCount] = sampleData;
 18807  0022DE  90D8               	bcf	status,0,c
 18808  0022E0  0101               	movlb	1	; () banked
 18809  0022E2  352E               	rlcf	_sampleCount& (0+255),w,b
 18810  0022E4  6ED9               	movwf	fsr2l,c
 18811  0022E6  352F               	rlcf	(_sampleCount+1)& (0+255),w,b
 18812  0022E8  6EDA               	movwf	fsr2h,c
 18813  0022EA  0E33               	movlw	low _sampleArray
 18814  0022EC  26D9               	addwf	fsr2l,f,c
 18815  0022EE  0E01               	movlw	high _sampleArray
 18816  0022F0  22DA               	addwfc	fsr2h,f,c
 18817  0022F2  C02D  FFDE         	movff	FlashSampleWrite@sampleData,postinc2
 18818  0022F6  C02E  FFDD         	movff	FlashSampleWrite@sampleData+1,postdec2
 18819                           
 18820                           ; BSR set to: 1
 18821                           ;FlashApp.c: 35: sampleCount ++;
 18822  0022FA  4B2E               	infsnz	_sampleCount& (0+255),f,b
 18823  0022FC  2B2F               	incf	(_sampleCount+1)& (0+255),f,b
 18824                           
 18825                           ; BSR set to: 1
 18826                           ;FlashApp.c: 37: if(((sampleCount*sizeof(adc_result_t)) >= (64)) && FLASH_IsWriteDone())
 18827  0022FE  C12E  F060         	movff	_sampleCount,??_FlashSampleWrite
 18828  002302  C12F  F061         	movff	_sampleCount+1,??_FlashSampleWrite+1
 18829  002306  90D8               	bcf	status,0,c
 18830  002308  0100               	movlb	0	; () banked
 18831  00230A  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 18832  00230C  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 18833  00230E  5161               	movf	(??_FlashSampleWrite+1)& (0+255),w,b
 18834  002310  E104               	bnz	u9220
 18835  002312  0E40               	movlw	64
 18836  002314  5D60               	subwf	??_FlashSampleWrite& (0+255),w,b
 18837  002316  A0D8               	btfss	status,0,c
 18838  002318  0012               	return	
 18839  00231A                     u9220:
 18840                           
 18841                           ; BSR set to: 0
 18842  00231A  EC6B  F022         	call	_FLASH_IsWriteDone	;wreg free
 18843  00231E  0900               	iorlw	0
 18844  002320  B4D8               	btfsc	status,2,c
 18845  002322  0012               	return	
 18846                           
 18847                           ;FlashApp.c: 38: {
 18848                           ;FlashApp.c: 39: FLASH_WriteBlock(writeAddress, (uint8_t *)sampleArray);
 18849  002324  C040  F01D         	movff	_writeAddress,FLASH_WriteBlock@writeAddr
 18850  002328  C041  F01E         	movff	_writeAddress+1,FLASH_WriteBlock@writeAddr+1
 18851  00232C  C042  F01F         	movff	_writeAddress+2,FLASH_WriteBlock@writeAddr+2
 18852  002330  C043  F020         	movff	_writeAddress+3,FLASH_WriteBlock@writeAddr+3
 18853  002334  0E33               	movlw	low _sampleArray
 18854  002336  6E21               	movwf	FLASH_WriteBlock@flashWrBufPtr,c
 18855  002338  0E01               	movlw	high _sampleArray
 18856  00233A  6E22               	movwf	FLASH_WriteBlock@flashWrBufPtr+1,c
 18857  00233C  EC34  F017         	call	_FLASH_WriteBlock	;wreg free
 18858                           
 18859                           ;FlashApp.c: 40: writeAddress += (64);
 18860  002340  0E40               	movlw	64
 18861  002342  2640               	addwf	_writeAddress,f,c
 18862  002344  0E00               	movlw	0
 18863  002346  2241               	addwfc	_writeAddress+1,f,c
 18864  002348  2242               	addwfc	_writeAddress+2,f,c
 18865  00234A  2243               	addwfc	_writeAddress+3,f,c
 18866                           
 18867                           ;FlashApp.c: 41: if (writeAddress >= 0x7FF0)
 18868  00234C  5043               	movf	_writeAddress+3,w,c
 18869  00234E  1042               	iorwf	_writeAddress+2,w,c
 18870  002350  E106               	bnz	u9240
 18871  002352  0EF0               	movlw	240
 18872  002354  5C40               	subwf	_writeAddress,w,c
 18873  002356  0E7F               	movlw	127
 18874  002358  5841               	subwfb	_writeAddress+1,w,c
 18875  00235A  A0D8               	btfss	status,0,c
 18876  00235C  D018               	goto	l319
 18877  00235E                     u9240:
 18878                           
 18879                           ;FlashApp.c: 42: {
 18880                           ;FlashApp.c: 43: writeAddress = 0x4600;
 18881  00235E  0E00               	movlw	0
 18882  002360  6E40               	movwf	_writeAddress,c
 18883  002362  0E46               	movlw	70
 18884  002364  6E41               	movwf	_writeAddress+1,c
 18885  002366  0E00               	movlw	0
 18886  002368  6E42               	movwf	_writeAddress+2,c
 18887  00236A  0E00               	movlw	0
 18888  00236C  6E43               	movwf	_writeAddress+3,c
 18889                           
 18890                           ;FlashApp.c: 44: isReWriteDone = 1;
 18891  00236E  0E01               	movlw	1
 18892  002370  0100               	movlb	0	; () banked
 18893  002372  6FE7               	movwf	_isReWriteDone& (0+255),b
 18894                           
 18895                           ; BSR set to: 0
 18896                           ;FlashApp.c: 45: if (readAddress == 0x4600)
 18897  002374  0E46               	movlw	70
 18898  002376  19F6               	xorwf	(_readAddress+1)& (0+255),w,b
 18899  002378  11F5               	iorwf	_readAddress& (0+255),w,b
 18900  00237A  11F7               	iorwf	(_readAddress+2)& (0+255),w,b
 18901  00237C  11F8               	iorwf	(_readAddress+3)& (0+255),w,b
 18902  00237E  A4D8               	btfss	status,2,c
 18903  002380  D006               	goto	l319
 18904                           
 18905                           ; BSR set to: 0
 18906                           ;FlashApp.c: 46: {
 18907                           ;FlashApp.c: 47: readAddress += (64);
 18908  002382  0E40               	movlw	64
 18909  002384  27F5               	addwf	_readAddress& (0+255),f,b
 18910  002386  0E00               	movlw	0
 18911  002388  23F6               	addwfc	(_readAddress+1)& (0+255),f,b
 18912  00238A  23F7               	addwfc	(_readAddress+2)& (0+255),f,b
 18913  00238C  23F8               	addwfc	(_readAddress+3)& (0+255),f,b
 18914  00238E                     l319:
 18915                           
 18916                           ;FlashApp.c: 48: }
 18917                           ;FlashApp.c: 49: }
 18918                           ;FlashApp.c: 51: if (numOfValidateSamples < ((0x4600-0x7FF0)/(64)))
 18919                           
 18920                           ; BSR set to: 0
 18921  00238E  0E19               	movlw	25
 18922  002390  5C31               	subwf	_numOfValidateSamples,w,c
 18923  002392  0EFF               	movlw	255
 18924  002394  5832               	subwfb	_numOfValidateSamples+1,w,c
 18925  002396  0EFF               	movlw	255
 18926  002398  5833               	subwfb	_numOfValidateSamples+2,w,c
 18927  00239A  0EFF               	movlw	255
 18928  00239C  5834               	subwfb	_numOfValidateSamples+3,w,c
 18929  00239E  B0D8               	btfsc	status,0,c
 18930  0023A0  D006               	goto	l320
 18931                           
 18932                           ;FlashApp.c: 52: {
 18933                           ;FlashApp.c: 53: numOfValidateSamples++;
 18934  0023A2  0E01               	movlw	1
 18935  0023A4  2631               	addwf	_numOfValidateSamples,f,c
 18936  0023A6  0E00               	movlw	0
 18937  0023A8  2232               	addwfc	_numOfValidateSamples+1,f,c
 18938  0023AA  2233               	addwfc	_numOfValidateSamples+2,f,c
 18939  0023AC  2234               	addwfc	_numOfValidateSamples+3,f,c
 18940  0023AE                     l320:
 18941                           
 18942                           ;FlashApp.c: 54: }
 18943                           ;FlashApp.c: 55: sampleCount = 0;
 18944  0023AE  0E00               	movlw	0
 18945  0023B0  0101               	movlb	1	; () banked
 18946  0023B2  6F2F               	movwf	(_sampleCount+1)& (0+255),b
 18947  0023B4  0E00               	movlw	0
 18948  0023B6  6F2E               	movwf	_sampleCount& (0+255),b
 18949  0023B8  0012               	return	
 18950  0023BA                     __end_of_FlashSampleWrite:
 18951                           	opt stack 0
 18952                           tosu	equ	0xFFF
 18953                           tosh	equ	0xFFE
 18954                           tosl	equ	0xFFD
 18955                           pclath	equ	0xFFA
 18956                           tblptru	equ	0xFF8
 18957                           tblptrh	equ	0xFF7
 18958                           tblptrl	equ	0xFF6
 18959                           tablat	equ	0xFF5
 18960                           prodh	equ	0xFF4
 18961                           prodl	equ	0xFF3
 18962                           intcon	equ	0xFF2
 18963                           intcon2	equ	0xFF1
 18964                           postinc0	equ	0xFEE
 18965                           plusw0	equ	0xFEB
 18966                           wreg	equ	0xFE8
 18967                           indf1	equ	0xFE7
 18968                           postdec1	equ	0xFE5
 18969                           fsr1h	equ	0xFE2
 18970                           fsr1l	equ	0xFE1
 18971                           indf2	equ	0xFDF
 18972                           postinc2	equ	0xFDE
 18973                           postdec2	equ	0xFDD
 18974                           plusw2	equ	0xFDB
 18975                           fsr2h	equ	0xFDA
 18976                           fsr2l	equ	0xFD9
 18977                           status	equ	0xFD8
 18978                           
 18979 ;; *************** function _FLASH_WriteBlock *****************
 18980 ;; Defined at:
 18981 ;;		line 93 in file "mcc_generated_files/memory.c"
 18982 ;; Parameters:    Size  Location     Type
 18983 ;;  writeAddr       4   28[COMRAM] unsigned long 
 18984 ;;  flashWrBufPt    2   32[COMRAM] PTR unsigned char 
 18985 ;;		 -> sampleArray(64), 
 18986 ;; Auto vars:     Size  Location     Type
 18987 ;;  blockStartAd    4   38[COMRAM] unsigned long 
 18988 ;;  i               1   43[COMRAM] unsigned char 
 18989 ;;  GIEBitValue     1   42[COMRAM] unsigned char 
 18990 ;; Return value:  Size  Location     Type
 18991 ;;                  1    wreg      char 
 18992 ;; Registers used:
 18993 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18994 ;; Tracked objects:
 18995 ;;		On entry : 0/0
 18996 ;;		On exit  : 0/0
 18997 ;;		Unchanged: 0/0
 18998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18999 ;;      Params:         6       0       0       0       0       0       0
 19000 ;;      Locals:         6       0       0       0       0       0       0
 19001 ;;      Temps:          4       0       0       0       0       0       0
 19002 ;;      Totals:        16       0       0       0       0       0       0
 19003 ;;Total ram usage:       16 bytes
 19004 ;; Hardware stack levels used:    1
 19005 ;; Hardware stack levels required when called:    5
 19006 ;; This function calls:
 19007 ;;		_FLASH_EraseBlock
 19008 ;; This function is called by:
 19009 ;;		_FlashSampleWrite
 19010 ;;		_FLASH_WriteByte
 19011 ;; This function uses a non-reentrant model
 19012 ;;
 19013                           
 19014                           	psect	text108
 19015  002E68                     __ptext108:
 19016                           	opt stack 0
 19017  002E68                     _FLASH_WriteBlock:
 19018                           	opt stack 23
 19019                           
 19020                           ;memory.c: 95: uint32_t blockStartAddr = (uint32_t )(writeAddr & ((0x8000-1) ^ ((64)-1))
      +                          );
 19021                           
 19022                           ;incstack = 0
 19023  002E68  0EC0               	movlw	192
 19024  002E6A  6E23               	movwf	??_FLASH_WriteBlock& (0+255),c
 19025  002E6C  0E7F               	movlw	127
 19026  002E6E  6E24               	movwf	(??_FLASH_WriteBlock+1)& (0+255),c
 19027  002E70  C01D  F025         	movff	FLASH_WriteBlock@writeAddr,??_FLASH_WriteBlock+2
 19028  002E74  C01E  F026         	movff	FLASH_WriteBlock@writeAddr+1,??_FLASH_WriteBlock+3
 19029  002E78  5023               	movf	??_FLASH_WriteBlock,w,c
 19030  002E7A  1625               	andwf	??_FLASH_WriteBlock+2,f,c
 19031  002E7C  5024               	movf	??_FLASH_WriteBlock+1,w,c
 19032  002E7E  1626               	andwf	??_FLASH_WriteBlock+3,f,c
 19033  002E80  C025  F027         	movff	??_FLASH_WriteBlock+2,FLASH_WriteBlock@blockStartAddr
 19034  002E84  C026  F028         	movff	??_FLASH_WriteBlock+3,FLASH_WriteBlock@blockStartAddr+1
 19035  002E88  6A29               	clrf	FLASH_WriteBlock@blockStartAddr+2,c
 19036  002E8A  6A2A               	clrf	FLASH_WriteBlock@blockStartAddr+3,c
 19037                           
 19038                           ;memory.c: 96: uint8_t GIEBitValue = INTCONbits.GIE;
 19039  002E8C  0E00               	movlw	0
 19040  002E8E  BEF2               	btfsc	intcon,7,c	;volatile
 19041  002E90  0E01               	movlw	1
 19042  002E92  6E2B               	movwf	FLASH_WriteBlock@GIEBitValue,c
 19043                           
 19044                           ;memory.c: 97: uint8_t i;
 19045                           ;memory.c: 100: if( writeAddr != blockStartAddr )
 19046  002E94  5027               	movf	FLASH_WriteBlock@blockStartAddr,w,c
 19047  002E96  181D               	xorwf	FLASH_WriteBlock@writeAddr,w,c
 19048  002E98  E144               	bnz	l1056
 19049  002E9A  5028               	movf	FLASH_WriteBlock@blockStartAddr+1,w,c
 19050  002E9C  181E               	xorwf	FLASH_WriteBlock@writeAddr+1,w,c
 19051  002E9E  E141               	bnz	l1056
 19052  002EA0  5029               	movf	FLASH_WriteBlock@blockStartAddr+2,w,c
 19053  002EA2  181F               	xorwf	FLASH_WriteBlock@writeAddr+2,w,c
 19054  002EA4  E13E               	bnz	l1056
 19055  002EA6  502A               	movf	FLASH_WriteBlock@blockStartAddr+3,w,c
 19056  002EA8  1820               	xorwf	FLASH_WriteBlock@writeAddr+3,w,c
 19057  002EAA  A4D8               	btfss	status,2,c
 19058  002EAC  0012               	return	
 19059                           
 19060                           ;memory.c: 103: }
 19061                           ;memory.c: 106: FLASH_EraseBlock(writeAddr);
 19062                           
 19063                           ;memory.c: 101: {
 19064                           ;memory.c: 102: return -1;
 19065                           ;	Return value of _FLASH_WriteBlock is never used
 19066  002EAE  C01D  F018         	movff	FLASH_WriteBlock@writeAddr,FLASH_EraseBlock@baseAddr
 19067  002EB2  C01E  F019         	movff	FLASH_WriteBlock@writeAddr+1,FLASH_EraseBlock@baseAddr+1
 19068  002EB6  C01F  F01A         	movff	FLASH_WriteBlock@writeAddr+2,FLASH_EraseBlock@baseAddr+2
 19069  002EBA  C020  F01B         	movff	FLASH_WriteBlock@writeAddr+3,FLASH_EraseBlock@baseAddr+3
 19070  002EBE  EC43  F020         	call	_FLASH_EraseBlock	;wreg free
 19071                           
 19072                           ;memory.c: 109: TBLPTRU = (uint8_t)((writeAddr & 0x00FF0000) >> 16);
 19073  002EC2  C01F  FFF8         	movff	FLASH_WriteBlock@writeAddr+2,tblptru	;volatile
 19074                           
 19075                           ;memory.c: 110: TBLPTRH = (uint8_t)((writeAddr & 0x0000FF00)>> 8);
 19076  002EC6  C01E  FFF7         	movff	FLASH_WriteBlock@writeAddr+1,tblptrh	;volatile
 19077                           
 19078                           ;memory.c: 111: TBLPTRL = (uint8_t)(writeAddr & 0x000000FF);
 19079  002ECA  C01D  FFF6         	movff	FLASH_WriteBlock@writeAddr,tblptrl	;volatile
 19080                           
 19081                           ;memory.c: 114: for (i=0; i<(64); i++)
 19082  002ECE  0E00               	movlw	0
 19083  002ED0  6E2C               	movwf	FLASH_WriteBlock@i,c
 19084  002ED2                     l8302:
 19085  002ED2  0E3F               	movlw	63
 19086  002ED4  642C               	cpfsgt	FLASH_WriteBlock@i,c
 19087  002ED6  D001               	goto	l1057
 19088  002ED8  D013               	goto	u8670
 19089  002EDA                     l1057:
 19090                           
 19091                           ;memory.c: 115: {
 19092                           ;memory.c: 116: TABLAT = flashWrBufPtr[i];
 19093  002EDA  502C               	movf	FLASH_WriteBlock@i,w,c
 19094  002EDC  0D01               	mullw	1
 19095  002EDE  50F3               	movf	prodl,w,c
 19096  002EE0  2421               	addwf	FLASH_WriteBlock@flashWrBufPtr,w,c
 19097  002EE2  6ED9               	movwf	fsr2l,c
 19098  002EE4  50F4               	movf	prodh,w,c
 19099  002EE6  2022               	addwfc	FLASH_WriteBlock@flashWrBufPtr+1,w,c
 19100  002EE8  6EDA               	movwf	fsr2h,c
 19101  002EEA  50DF               	movf	indf2,w,c
 19102  002EEC  6EF5               	movwf	tablat,c	;volatile
 19103                           
 19104                           ;memory.c: 118: if (i == ((64)-1))
 19105  002EEE  0E3F               	movlw	63
 19106  002EF0  182C               	xorwf	FLASH_WriteBlock@i,w,c
 19107  002EF2  A4D8               	btfss	status,2,c
 19108  002EF4  D002               	goto	l1059
 19109  002EF6  000C               	tblwt		*	;# 
 19110                           
 19111                           ;memory.c: 121: }
 19112  002EF8  D001               	goto	l1060
 19113  002EFA                     l1059:
 19114  002EFA  000D               	tblwt		*+	;# 
 19115  002EFC                     l1060:
 19116  002EFC  2A2C               	incf	FLASH_WriteBlock@i,f,c
 19117  002EFE  D7E9               	goto	l8302
 19118  002F00                     u8670:
 19119                           
 19120                           ;memory.c: 125: }
 19121                           ;memory.c: 126: }
 19122                           ;memory.c: 128: PIR2bits.EEIF = 1;
 19123  002F00  88A1               	bsf	4001,4,c	;volatile
 19124                           
 19125                           ;memory.c: 129: EECON1bits.EEPGD = 1;
 19126  002F02  8EA6               	bsf	4006,7,c	;volsfr
 19127                           
 19128                           ;memory.c: 130: EECON1bits.CFGS = 0;
 19129  002F04  9CA6               	bcf	4006,6,c	;volsfr
 19130                           
 19131                           ;memory.c: 131: EECON1bits.WREN = 1;
 19132  002F06  84A6               	bsf	4006,2,c	;volsfr
 19133                           
 19134                           ;memory.c: 132: INTCONbits.GIE = 0;
 19135  002F08  9EF2               	bcf	intcon,7,c	;volatile
 19136                           
 19137                           ;memory.c: 133: EECON2 = 0x55;
 19138  002F0A  0E55               	movlw	85
 19139  002F0C  6EA7               	movwf	4007,c	;volsfr
 19140                           
 19141                           ;memory.c: 134: EECON2 = 0xAA;
 19142  002F0E  0EAA               	movlw	170
 19143  002F10  6EA7               	movwf	4007,c	;volsfr
 19144                           
 19145                           ;memory.c: 135: EECON1bits.WR = 1;
 19146  002F12  82A6               	bsf	4006,1,c	;volsfr
 19147                           
 19148                           ;memory.c: 137: EECON1bits.WREN = 0;
 19149  002F14  94A6               	bcf	4006,2,c	;volsfr
 19150                           
 19151                           ;memory.c: 138: INTCONbits.GIE = GIEBitValue;
 19152  002F16  B02B               	btfsc	FLASH_WriteBlock@GIEBitValue,0,c
 19153  002F18  D002               	bra	u8685
 19154  002F1A  9EF2               	bcf	intcon,7,c	;volatile
 19155  002F1C  D001               	bra	u8686
 19156  002F1E                     u8685:
 19157  002F1E  8EF2               	bsf	intcon,7,c	;volatile
 19158  002F20                     u8686:
 19159  002F20  0012               	return	
 19160  002F22                     l1056:
 19161  002F22  0012               	return		;funcret
 19162  002F24                     __end_of_FLASH_WriteBlock:
 19163                           	opt stack 0
 19164                           tosu	equ	0xFFF
 19165                           tosh	equ	0xFFE
 19166                           tosl	equ	0xFFD
 19167                           pclath	equ	0xFFA
 19168                           tblptru	equ	0xFF8
 19169                           tblptrh	equ	0xFF7
 19170                           tblptrl	equ	0xFF6
 19171                           tablat	equ	0xFF5
 19172                           prodh	equ	0xFF4
 19173                           prodl	equ	0xFF3
 19174                           intcon	equ	0xFF2
 19175                           intcon2	equ	0xFF1
 19176                           postinc0	equ	0xFEE
 19177                           plusw0	equ	0xFEB
 19178                           wreg	equ	0xFE8
 19179                           indf1	equ	0xFE7
 19180                           postdec1	equ	0xFE5
 19181                           fsr1h	equ	0xFE2
 19182                           fsr1l	equ	0xFE1
 19183                           indf2	equ	0xFDF
 19184                           postinc2	equ	0xFDE
 19185                           postdec2	equ	0xFDD
 19186                           plusw2	equ	0xFDB
 19187                           fsr2h	equ	0xFDA
 19188                           fsr2l	equ	0xFD9
 19189                           status	equ	0xFD8
 19190                           
 19191 ;; *************** function _FLASH_EraseBlock *****************
 19192 ;; Defined at:
 19193 ;;		line 144 in file "mcc_generated_files/memory.c"
 19194 ;; Parameters:    Size  Location     Type
 19195 ;;  baseAddr        4   23[COMRAM] unsigned long 
 19196 ;; Auto vars:     Size  Location     Type
 19197 ;;  GIEBitValue     1   27[COMRAM] unsigned char 
 19198 ;; Return value:  Size  Location     Type
 19199 ;;                  1    wreg      void 
 19200 ;; Registers used:
 19201 ;;		wreg, status,2
 19202 ;; Tracked objects:
 19203 ;;		On entry : 0/0
 19204 ;;		On exit  : 0/0
 19205 ;;		Unchanged: 0/0
 19206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19207 ;;      Params:         4       0       0       0       0       0       0
 19208 ;;      Locals:         1       0       0       0       0       0       0
 19209 ;;      Temps:          0       0       0       0       0       0       0
 19210 ;;      Totals:         5       0       0       0       0       0       0
 19211 ;;Total ram usage:        5 bytes
 19212 ;; Hardware stack levels used:    1
 19213 ;; Hardware stack levels required when called:    4
 19214 ;; This function calls:
 19215 ;;		Nothing
 19216 ;; This function is called by:
 19217 ;;		_FLASH_WriteBlock
 19218 ;; This function uses a non-reentrant model
 19219 ;;
 19220                           
 19221                           	psect	text109
 19222  004086                     __ptext109:
 19223                           	opt stack 0
 19224  004086                     _FLASH_EraseBlock:
 19225                           	opt stack 23
 19226                           
 19227                           ;memory.c: 146: uint8_t GIEBitValue = INTCONbits.GIE;
 19228                           
 19229                           ;incstack = 0
 19230  004086  0E00               	movlw	0
 19231  004088  BEF2               	btfsc	intcon,7,c	;volatile
 19232  00408A  0E01               	movlw	1
 19233  00408C  6E1C               	movwf	FLASH_EraseBlock@GIEBitValue,c
 19234                           
 19235                           ;memory.c: 148: TBLPTRU = (uint8_t)((baseAddr & 0x00FF0000) >> 16);
 19236  00408E  C01A  FFF8         	movff	FLASH_EraseBlock@baseAddr+2,tblptru	;volatile
 19237                           
 19238                           ;memory.c: 149: TBLPTRH = (uint8_t)((baseAddr & 0x0000FF00)>> 8);
 19239  004092  C019  FFF7         	movff	FLASH_EraseBlock@baseAddr+1,tblptrh	;volatile
 19240                           
 19241                           ;memory.c: 150: TBLPTRL = (uint8_t)(baseAddr & 0x000000FF);
 19242  004096  C018  FFF6         	movff	FLASH_EraseBlock@baseAddr,tblptrl	;volatile
 19243                           
 19244                           ;memory.c: 152: EECON1bits.EEPGD = 1;
 19245  00409A  8EA6               	bsf	4006,7,c	;volsfr
 19246                           
 19247                           ;memory.c: 153: EECON1bits.CFGS = 0;
 19248  00409C  9CA6               	bcf	4006,6,c	;volsfr
 19249                           
 19250                           ;memory.c: 154: EECON1bits.WREN = 1;
 19251  00409E  84A6               	bsf	4006,2,c	;volsfr
 19252                           
 19253                           ;memory.c: 155: EECON1bits.FREE = 1;
 19254  0040A0  88A6               	bsf	4006,4,c	;volsfr
 19255                           
 19256                           ;memory.c: 156: INTCONbits.GIE = 0;
 19257  0040A2  9EF2               	bcf	intcon,7,c	;volatile
 19258                           
 19259                           ;memory.c: 157: EECON2 = 0x55;
 19260  0040A4  0E55               	movlw	85
 19261  0040A6  6EA7               	movwf	4007,c	;volsfr
 19262                           
 19263                           ;memory.c: 158: EECON2 = 0xAA;
 19264  0040A8  0EAA               	movlw	170
 19265  0040AA  6EA7               	movwf	4007,c	;volsfr
 19266                           
 19267                           ;memory.c: 159: EECON1bits.WR = 1;
 19268  0040AC  82A6               	bsf	4006,1,c	;volsfr
 19269                           
 19270                           ;memory.c: 160: INTCONbits.GIE = GIEBitValue;
 19271  0040AE  B01C               	btfsc	FLASH_EraseBlock@GIEBitValue,0,c
 19272  0040B0  D002               	bra	u8545
 19273  0040B2  9EF2               	bcf	intcon,7,c	;volatile
 19274  0040B4  D001               	bra	u8546
 19275  0040B6                     u8545:
 19276  0040B6  8EF2               	bsf	intcon,7,c	;volatile
 19277  0040B8                     u8546:
 19278  0040B8  0012               	return		;funcret
 19279  0040BA                     __end_of_FLASH_EraseBlock:
 19280                           	opt stack 0
 19281                           tosu	equ	0xFFF
 19282                           tosh	equ	0xFFE
 19283                           tosl	equ	0xFFD
 19284                           pclath	equ	0xFFA
 19285                           tblptru	equ	0xFF8
 19286                           tblptrh	equ	0xFF7
 19287                           tblptrl	equ	0xFF6
 19288                           tablat	equ	0xFF5
 19289                           prodh	equ	0xFF4
 19290                           prodl	equ	0xFF3
 19291                           intcon	equ	0xFF2
 19292                           intcon2	equ	0xFF1
 19293                           postinc0	equ	0xFEE
 19294                           plusw0	equ	0xFEB
 19295                           wreg	equ	0xFE8
 19296                           indf1	equ	0xFE7
 19297                           postdec1	equ	0xFE5
 19298                           fsr1h	equ	0xFE2
 19299                           fsr1l	equ	0xFE1
 19300                           indf2	equ	0xFDF
 19301                           postinc2	equ	0xFDE
 19302                           postdec2	equ	0xFDD
 19303                           plusw2	equ	0xFDB
 19304                           fsr2h	equ	0xFDA
 19305                           fsr2l	equ	0xFD9
 19306                           status	equ	0xFD8
 19307                           
 19308 ;; *************** function _FLASH_IsWriteDone *****************
 19309 ;; Defined at:
 19310 ;;		line 189 in file "mcc_generated_files/memory.c"
 19311 ;; Parameters:    Size  Location     Type
 19312 ;;		None
 19313 ;; Auto vars:     Size  Location     Type
 19314 ;;		None
 19315 ;; Return value:  Size  Location     Type
 19316 ;;                  1    wreg      unsigned char 
 19317 ;; Registers used:
 19318 ;;		wreg
 19319 ;; Tracked objects:
 19320 ;;		On entry : 0/0
 19321 ;;		On exit  : 0/0
 19322 ;;		Unchanged: 0/0
 19323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19324 ;;      Params:         0       0       0       0       0       0       0
 19325 ;;      Locals:         0       0       0       0       0       0       0
 19326 ;;      Temps:          0       0       0       0       0       0       0
 19327 ;;      Totals:         0       0       0       0       0       0       0
 19328 ;;Total ram usage:        0 bytes
 19329 ;; Hardware stack levels used:    1
 19330 ;; Hardware stack levels required when called:    4
 19331 ;; This function calls:
 19332 ;;		Nothing
 19333 ;; This function is called by:
 19334 ;;		_FlashSampleWrite
 19335 ;;		_FlashReadUart
 19336 ;; This function uses a non-reentrant model
 19337 ;;
 19338                           
 19339                           	psect	text110
 19340  0044D6                     __ptext110:
 19341                           	opt stack 0
 19342  0044D6                     _FLASH_IsWriteDone:
 19343                           	opt stack 23
 19344                           
 19345                           ;memory.c: 191: return (EECON1bits.WR == 0);
 19346                           
 19347                           ;incstack = 0
 19348  0044D6  A2A6               	btfss	4006,1,c	;volsfr
 19349  0044D8  D001               	goto	u8321
 19350  0044DA  D002               	goto	u8320
 19351  0044DC                     u8321:
 19352  0044DC  0E01               	movlw	1
 19353  0044DE  0012               	return	
 19354  0044E0                     u8320:
 19355  0044E0  0E00               	movlw	0
 19356  0044E2  0012               	return	
 19357  0044E4                     __end_of_FLASH_IsWriteDone:
 19358                           	opt stack 0
 19359                           tosu	equ	0xFFF
 19360                           tosh	equ	0xFFE
 19361                           tosl	equ	0xFFD
 19362                           pclath	equ	0xFFA
 19363                           tblptru	equ	0xFF8
 19364                           tblptrh	equ	0xFF7
 19365                           tblptrl	equ	0xFF6
 19366                           tablat	equ	0xFF5
 19367                           prodh	equ	0xFF4
 19368                           prodl	equ	0xFF3
 19369                           intcon	equ	0xFF2
 19370                           intcon2	equ	0xFF1
 19371                           postinc0	equ	0xFEE
 19372                           plusw0	equ	0xFEB
 19373                           wreg	equ	0xFE8
 19374                           indf1	equ	0xFE7
 19375                           postdec1	equ	0xFE5
 19376                           fsr1h	equ	0xFE2
 19377                           fsr1l	equ	0xFE1
 19378                           indf2	equ	0xFDF
 19379                           postinc2	equ	0xFDE
 19380                           postdec2	equ	0xFDD
 19381                           plusw2	equ	0xFDB
 19382                           fsr2h	equ	0xFDA
 19383                           fsr2l	equ	0xFD9
 19384                           status	equ	0xFD8
 19385                           
 19386 ;; *************** function _ADC_GetConversion *****************
 19387 ;; Defined at:
 19388 ;;		line 106 in file "mcc_generated_files/adc.c"
 19389 ;; Parameters:    Size  Location     Type
 19390 ;;  channel         1    wreg     enum E6975
 19391 ;; Auto vars:     Size  Location     Type
 19392 ;;  channel         1   27[COMRAM] enum E6975
 19393 ;; Return value:  Size  Location     Type
 19394 ;;                  2   23[COMRAM] unsigned int 
 19395 ;; Registers used:
 19396 ;;		wreg, status,2, status,0
 19397 ;; Tracked objects:
 19398 ;;		On entry : 0/0
 19399 ;;		On exit  : 0/0
 19400 ;;		Unchanged: 0/0
 19401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19402 ;;      Params:         2       0       0       0       0       0       0
 19403 ;;      Locals:         1       0       0       0       0       0       0
 19404 ;;      Temps:          2       0       0       0       0       0       0
 19405 ;;      Totals:         5       0       0       0       0       0       0
 19406 ;;Total ram usage:        5 bytes
 19407 ;; Hardware stack levels used:    1
 19408 ;; Hardware stack levels required when called:    4
 19409 ;; This function calls:
 19410 ;;		Nothing
 19411 ;; This function is called by:
 19412 ;;		_AdcConvert
 19413 ;; This function uses a non-reentrant model
 19414 ;;
 19415                           
 19416                           	psect	text111
 19417  00411A                     __ptext111:
 19418                           	opt stack 0
 19419  00411A                     _ADC_GetConversion:
 19420                           	opt stack 25
 19421                           
 19422                           ;incstack = 0
 19423                           ;ADC_GetConversion@channel stored from wreg
 19424  00411A  6E1C               	movwf	ADC_GetConversion@channel,c
 19425                           
 19426                           ;adc.c: 109: ADCON0bits.CHS = channel;
 19427  00411C  C01C  F01A         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
 19428  004120  461A               	rlncf	??_ADC_GetConversion,f,c
 19429  004122  461A               	rlncf	??_ADC_GetConversion,f,c
 19430  004124  50C2               	movf	4034,w,c	;volatile
 19431  004126  181A               	xorwf	??_ADC_GetConversion,w,c
 19432  004128  0B83               	andlw	-125
 19433  00412A  181A               	xorwf	??_ADC_GetConversion,w,c
 19434  00412C  6EC2               	movwf	4034,c	;volatile
 19435                           
 19436                           ;adc.c: 112: ADCON0bits.ADON = 1;
 19437  00412E  80C2               	bsf	4034,0,c	;volatile
 19438                           
 19439                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
 19440  004130  82C2               	bsf	4034,1,c	;volatile
 19441  004132                     
 19442                           ;adc.c: 119: {
 19443  004132  B2C2               	btfsc	4034,1,c	;volatile
 19444  004134  D7FE               	goto	l1173
 19445                           
 19446                           ;adc.c: 120: }
 19447                           ;adc.c: 122: return ((ADRESH << 8) + ADRESL);
 19448  004136  50C4               	movf	4036,w,c	;volatile
 19449  004138  6E1B               	movwf	(??_ADC_GetConversion+1)& (0+255),c
 19450  00413A  6A1A               	clrf	??_ADC_GetConversion& (0+255),c
 19451  00413C  50C3               	movf	4035,w,c	;volatile
 19452  00413E  241A               	addwf	??_ADC_GetConversion,w,c
 19453  004140  6E18               	movwf	?_ADC_GetConversion,c
 19454  004142  0E00               	movlw	0
 19455  004144  201B               	addwfc	??_ADC_GetConversion+1,w,c
 19456  004146  6E19               	movwf	?_ADC_GetConversion+1,c
 19457  004148  0012               	return	
 19458  00414A                     __end_of_ADC_GetConversion:
 19459                           	opt stack 0
 19460                           tosu	equ	0xFFF
 19461                           tosh	equ	0xFFE
 19462                           tosl	equ	0xFFD
 19463                           pclath	equ	0xFFA
 19464                           tblptru	equ	0xFF8
 19465                           tblptrh	equ	0xFF7
 19466                           tblptrl	equ	0xFF6
 19467                           tablat	equ	0xFF5
 19468                           prodh	equ	0xFF4
 19469                           prodl	equ	0xFF3
 19470                           intcon	equ	0xFF2
 19471                           intcon2	equ	0xFF1
 19472                           postinc0	equ	0xFEE
 19473                           plusw0	equ	0xFEB
 19474                           wreg	equ	0xFE8
 19475                           indf1	equ	0xFE7
 19476                           postdec1	equ	0xFE5
 19477                           fsr1h	equ	0xFE2
 19478                           fsr1l	equ	0xFE1
 19479                           indf2	equ	0xFDF
 19480                           postinc2	equ	0xFDE
 19481                           postdec2	equ	0xFDD
 19482                           plusw2	equ	0xFDB
 19483                           fsr2h	equ	0xFDA
 19484                           fsr2l	equ	0xFD9
 19485                           status	equ	0xFD8
 19486                           
 19487 ;; *************** function _INTERRUPT_InterruptManager *****************
 19488 ;; Defined at:
 19489 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 19490 ;; Parameters:    Size  Location     Type
 19491 ;;		None
 19492 ;; Auto vars:     Size  Location     Type
 19493 ;;		None
 19494 ;; Return value:  Size  Location     Type
 19495 ;;                  1    wreg      void 
 19496 ;; Registers used:
 19497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 19498 ;; Tracked objects:
 19499 ;;		On entry : 0/0
 19500 ;;		On exit  : 0/0
 19501 ;;		Unchanged: 0/0
 19502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19503 ;;      Params:         0       0       0       0       0       0       0
 19504 ;;      Locals:         0       0       0       0       0       0       0
 19505 ;;      Temps:         18       0       0       0       0       0       0
 19506 ;;      Totals:        18       0       0       0       0       0       0
 19507 ;;Total ram usage:       18 bytes
 19508 ;; Hardware stack levels used:    1
 19509 ;; Hardware stack levels required when called:    3
 19510 ;; This function calls:
 19511 ;;		_EUSART1_Receive_ISR
 19512 ;;		_EUSART1_Transmit_ISR
 19513 ;;		_MEMORY_ISR
 19514 ;;		_PIN_MANAGER_IOC
 19515 ;;		_TMR0_ISR
 19516 ;; This function is called by:
 19517 ;;		Interrupt level 2
 19518 ;; This function uses a non-reentrant model
 19519 ;;
 19520                           
 19521                           	psect	intcode
 19522  000008                     __pintcode:
 19523                           	opt stack 0
 19524  000008                     _INTERRUPT_InterruptManager:
 19525                           	opt stack 17
 19526                           
 19527                           ;incstack = 0
 19528  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19529  00000A  CFFA F006          	movff	pclath,??_INTERRUPT_InterruptManager
 19530  00000E  CFFB F007          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 19531  000012  CFE9 F008          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 19532  000016  CFEA F009          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 19533  00001A  CFE1 F00A          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 19534  00001E  CFE2 F00B          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 19535  000022  CFD9 F00C          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 19536  000026  CFDA F00D          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 19537  00002A  CFF3 F00E          	movff	prodl,??_INTERRUPT_InterruptManager+8
 19538  00002E  CFF4 F00F          	movff	prodh,??_INTERRUPT_InterruptManager+9
 19539  000032  CFF6 F010          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 19540  000036  CFF7 F011          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 19541  00003A  CFF8 F012          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 19542  00003E  CFF5 F013          	movff	tablat,??_INTERRUPT_InterruptManager+13
 19543  000042  C048  F014         	movff	btemp,??_INTERRUPT_InterruptManager+14
 19544  000046  C049  F015         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 19545  00004A  C04A  F016         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 19546  00004E  C04B  F017         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 19547                           
 19548                           ;interrupt_manager.c: 60: if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
 19549  000052  B6F2               	btfsc	intcon,3,c	;volatile
 19550  000054  A0F2               	btfss	intcon,0,c	;volatile
 19551  000056  D003               	goto	i2l854
 19552                           
 19553                           ;interrupt_manager.c: 61: {
 19554                           ;interrupt_manager.c: 62: PIN_MANAGER_IOC();
 19555  000058  EC4E  F022         	call	_PIN_MANAGER_IOC	;wreg free
 19556                           
 19557                           ;interrupt_manager.c: 63: }
 19558  00005C  D019               	goto	i2l863
 19559  00005E                     i2l854:
 19560                           
 19561                           ;interrupt_manager.c: 64: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 19562  00005E  BAF2               	btfsc	intcon,5,c	;volatile
 19563  000060  A4F2               	btfss	intcon,2,c	;volatile
 19564  000062  D003               	goto	i2l856
 19565                           
 19566                           ;interrupt_manager.c: 65: {
 19567                           ;interrupt_manager.c: 66: TMR0_ISR();
 19568  000064  EC40  F018         	call	_TMR0_ISR	;wreg free
 19569                           
 19570                           ;interrupt_manager.c: 67: }
 19571  000068  D013               	goto	i2l863
 19572  00006A                     i2l856:
 19573                           
 19574                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1)
 19575  00006A  ACF2               	btfss	intcon,6,c	;volatile
 19576  00006C  D011               	goto	i2l863
 19577                           
 19578                           ;interrupt_manager.c: 69: {
 19579                           ;interrupt_manager.c: 70: if(PIE2bits.EEIE == 1 && PIR2bits.EEIF == 1)
 19580  00006E  B8A0               	btfsc	4000,4,c	;volatile
 19581  000070  A8A1               	btfss	4001,4,c	;volatile
 19582  000072  D003               	goto	i2l859
 19583                           
 19584                           ;interrupt_manager.c: 71: {
 19585                           ;interrupt_manager.c: 72: MEMORY_ISR();
 19586  000074  ECAB  F022         	call	_MEMORY_ISR	;wreg free
 19587                           
 19588                           ;interrupt_manager.c: 73: }
 19589  000078  D00B               	goto	i2l863
 19590  00007A                     i2l859:
 19591                           
 19592                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 19593  00007A  B89D               	btfsc	3997,4,c	;volatile
 19594  00007C  A89E               	btfss	3998,4,c	;volatile
 19595  00007E  D003               	goto	i2l861
 19596                           
 19597                           ;interrupt_manager.c: 75: {
 19598                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
 19599  000080  ECBD  F01F         	call	_EUSART1_Transmit_ISR	;wreg free
 19600                           
 19601                           ;interrupt_manager.c: 77: }
 19602  000084  D005               	goto	i2l863
 19603  000086                     i2l861:
 19604                           
 19605                           ;interrupt_manager.c: 78: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 19606  000086  BA9D               	btfsc	3997,5,c	;volatile
 19607  000088  AA9E               	btfss	3998,5,c	;volatile
 19608  00008A  D002               	goto	i2l863
 19609                           
 19610                           ;interrupt_manager.c: 79: {
 19611                           ;interrupt_manager.c: 80: EUSART1_Receive_ISR();
 19612  00008C  ECA5  F020         	call	_EUSART1_Receive_ISR	;wreg free
 19613  000090                     i2l863:
 19614                           
 19615                           ;interrupt_manager.c: 87: else
 19616                           ;interrupt_manager.c: 88: {
 19617                           
 19618                           ;interrupt_manager.c: 85: }
 19619                           ;interrupt_manager.c: 86: }
 19620                           
 19621                           ;interrupt_manager.c: 82: else
 19622                           ;interrupt_manager.c: 83: {
 19623  000090  C017  F04B         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 19624  000094  C016  F04A         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 19625  000098  C015  F049         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 19626  00009C  C014  F048         	movff	??_INTERRUPT_InterruptManager+14,btemp
 19627  0000A0  C013  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 19628  0000A4  C012  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 19629  0000A8  C011  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 19630  0000AC  C010  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 19631  0000B0  C00F  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 19632  0000B4  C00E  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 19633  0000B8  C00D  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 19634  0000BC  C00C  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 19635  0000C0  C00B  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 19636  0000C4  C00A  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 19637  0000C8  C009  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 19638  0000CC  C008  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 19639  0000D0  C007  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 19640  0000D4  C006  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 19641  0000D8  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 19642  0000DA  0011               	retfie		f
 19643  0000DC                     __end_of_INTERRUPT_InterruptManager:
 19644                           	opt stack 0
 19645                           tosu	equ	0xFFF
 19646                           tosh	equ	0xFFE
 19647                           tosl	equ	0xFFD
 19648                           pclatu	equ	0xFFB
 19649                           pclath	equ	0xFFA
 19650                           tblptru	equ	0xFF8
 19651                           tblptrh	equ	0xFF7
 19652                           tblptrl	equ	0xFF6
 19653                           tablat	equ	0xFF5
 19654                           prodh	equ	0xFF4
 19655                           prodl	equ	0xFF3
 19656                           intcon	equ	0xFF2
 19657                           intcon2	equ	0xFF1
 19658                           postinc0	equ	0xFEE
 19659                           plusw0	equ	0xFEB
 19660                           fsr0h	equ	0xFEA
 19661                           fsr0l	equ	0xFE9
 19662                           wreg	equ	0xFE8
 19663                           indf1	equ	0xFE7
 19664                           postdec1	equ	0xFE5
 19665                           fsr1h	equ	0xFE2
 19666                           fsr1l	equ	0xFE1
 19667                           indf2	equ	0xFDF
 19668                           postinc2	equ	0xFDE
 19669                           postdec2	equ	0xFDD
 19670                           plusw2	equ	0xFDB
 19671                           fsr2h	equ	0xFDA
 19672                           fsr2l	equ	0xFD9
 19673                           status	equ	0xFD8
 19674                           
 19675 ;; *************** function _TMR0_ISR *****************
 19676 ;; Defined at:
 19677 ;;		line 132 in file "mcc_generated_files/tmr0.c"
 19678 ;; Parameters:    Size  Location     Type
 19679 ;;		None
 19680 ;; Auto vars:     Size  Location     Type
 19681 ;;		None
 19682 ;; Return value:  Size  Location     Type
 19683 ;;                  1    wreg      void 
 19684 ;; Registers used:
 19685 ;;		wreg, status,2, status,0, cstack
 19686 ;; Tracked objects:
 19687 ;;		On entry : 0/0
 19688 ;;		On exit  : 0/0
 19689 ;;		Unchanged: 0/0
 19690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19691 ;;      Params:         0       0       0       0       0       0       0
 19692 ;;      Locals:         0       0       0       0       0       0       0
 19693 ;;      Temps:          0       0       0       0       0       0       0
 19694 ;;      Totals:         0       0       0       0       0       0       0
 19695 ;;Total ram usage:        0 bytes
 19696 ;; Hardware stack levels used:    1
 19697 ;; Hardware stack levels required when called:    1
 19698 ;; This function calls:
 19699 ;;		___lwmod
 19700 ;; This function is called by:
 19701 ;;		_INTERRUPT_InterruptManager
 19702 ;; This function uses a non-reentrant model
 19703 ;;
 19704                           
 19705                           	psect	text113
 19706  003080                     __ptext113:
 19707                           	opt stack 0
 19708  003080                     _TMR0_ISR:
 19709                           	opt stack 18
 19710                           
 19711                           ;tmr0.c: 134: static volatile uint16_t CountCallBack = 0;
 19712                           ;tmr0.c: 137: INTCONbits.TMR0IF = 0;
 19713                           
 19714                           ;incstack = 0
 19715  003080  94F2               	bcf	intcon,2,c	;volatile
 19716                           
 19717                           ;tmr0.c: 141: TMR0H = timer0ReloadVal >> 8;
 19718  003082  5047               	movf	_timer0ReloadVal+1,w,c	;volatile
 19719  003084  6ED7               	movwf	4055,c	;volatile
 19720                           
 19721                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal;
 19722  003086  C046  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 19723                           
 19724                           ;tmr0.c: 144: CountCallBack++;
 19725  00308A  4A35               	infsnz	TMR0_ISR@CountCallBack,f,c	;volatile
 19726  00308C  2A36               	incf	TMR0_ISR@CountCallBack+1,f,c	;volatile
 19727                           
 19728                           ;tmr0.c: 145: if ((CountCallBack % 20) == 0)
 19729  00308E  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 19730  003092  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 19731  003096  0E00               	movlw	0
 19732  003098  6E04               	movwf	___lwmod@divisor+1,c
 19733  00309A  0E14               	movlw	20
 19734  00309C  6E03               	movwf	___lwmod@divisor,c
 19735  00309E  ECD2  F01E         	call	___lwmod	;wreg free
 19736  0030A2  5001               	movf	?___lwmod,w,c
 19737  0030A4  1002               	iorwf	?___lwmod+1,w,c
 19738  0030A6  A4D8               	btfss	status,2,c
 19739  0030A8  D003               	goto	i2l1127
 19740                           
 19741                           ;tmr0.c: 146: {
 19742                           ;tmr0.c: 147: Timer0_SynthLd = 1;
 19743  0030AA  0E01               	movlw	1
 19744  0030AC  0100               	movlb	0	; () banked
 19745  0030AE  6FF4               	movwf	_Timer0_SynthLd& (0+255),b	;volatile
 19746  0030B0                     i2l1127:
 19747                           
 19748                           ;tmr0.c: 148: }
 19749                           ;tmr0.c: 149: if ((CountCallBack % 100) == 0)
 19750                           
 19751                           ; BSR set to: 0
 19752  0030B0  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 19753  0030B4  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 19754  0030B8  0E00               	movlw	0
 19755  0030BA  6E04               	movwf	___lwmod@divisor+1,c
 19756  0030BC  0E64               	movlw	100
 19757  0030BE  6E03               	movwf	___lwmod@divisor,c
 19758  0030C0  ECD2  F01E         	call	___lwmod	;wreg free
 19759  0030C4  5001               	movf	?___lwmod,w,c
 19760  0030C6  1002               	iorwf	?___lwmod+1,w,c
 19761  0030C8  A4D8               	btfss	status,2,c
 19762  0030CA  D003               	goto	i2l1128
 19763                           
 19764                           ;tmr0.c: 150: {
 19765                           ;tmr0.c: 151: Timer0_Sampling = 1;
 19766  0030CC  0E01               	movlw	1
 19767  0030CE  0100               	movlb	0	; () banked
 19768  0030D0  6FF3               	movwf	_Timer0_Sampling& (0+255),b	;volatile
 19769  0030D2                     i2l1128:
 19770                           
 19771                           ;tmr0.c: 152: }
 19772                           ;tmr0.c: 153: if ((CountCallBack % 200) == 0)
 19773                           
 19774                           ; BSR set to: 0
 19775  0030D2  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 19776  0030D6  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 19777  0030DA  0E00               	movlw	0
 19778  0030DC  6E04               	movwf	___lwmod@divisor+1,c
 19779  0030DE  0EC8               	movlw	200
 19780  0030E0  6E03               	movwf	___lwmod@divisor,c
 19781  0030E2  ECD2  F01E         	call	___lwmod	;wreg free
 19782  0030E6  5001               	movf	?___lwmod,w,c
 19783  0030E8  1002               	iorwf	?___lwmod+1,w,c
 19784  0030EA  A4D8               	btfss	status,2,c
 19785  0030EC  D003               	goto	i2l1129
 19786                           
 19787                           ;tmr0.c: 154: {
 19788                           ;tmr0.c: 155: Timer0_KeepAlive = 1;
 19789  0030EE  0E01               	movlw	1
 19790  0030F0  0100               	movlb	0	; () banked
 19791  0030F2  6FF2               	movwf	_Timer0_KeepAlive& (0+255),b	;volatile
 19792  0030F4                     i2l1129:
 19793                           
 19794                           ;tmr0.c: 156: }
 19795                           ;tmr0.c: 157: if ((CountCallBack % 10) == 0)
 19796                           
 19797                           ; BSR set to: 0
 19798  0030F4  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 19799  0030F8  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 19800  0030FC  0E00               	movlw	0
 19801  0030FE  6E04               	movwf	___lwmod@divisor+1,c
 19802  003100  0E0A               	movlw	10
 19803  003102  6E03               	movwf	___lwmod@divisor,c
 19804  003104  ECD2  F01E         	call	___lwmod	;wreg free
 19805  003108  5001               	movf	?___lwmod,w,c
 19806  00310A  1002               	iorwf	?___lwmod+1,w,c
 19807  00310C  A4D8               	btfss	status,2,c
 19808  00310E  D003               	goto	i2l1130
 19809                           
 19810                           ;tmr0.c: 158: {
 19811                           ;tmr0.c: 159: Timer0_OneSec = 1;
 19812  003110  0E01               	movlw	1
 19813  003112  0100               	movlb	0	; () banked
 19814  003114  6FF1               	movwf	_Timer0_OneSec& (0+255),b	;volatile
 19815  003116                     i2l1130:
 19816                           
 19817                           ;tmr0.c: 160: }
 19818                           ;tmr0.c: 161: if(CountCallBack >= 35000)
 19819                           
 19820                           ; BSR set to: 0
 19821  003116  0EB8               	movlw	184
 19822  003118  5C35               	subwf	TMR0_ISR@CountCallBack,w,c	;volatile
 19823  00311A  0E88               	movlw	136
 19824  00311C  5836               	subwfb	TMR0_ISR@CountCallBack+1,w,c	;volatile
 19825  00311E  A0D8               	btfss	status,0,c
 19826  003120  0012               	return	
 19827                           
 19828                           ;tmr0.c: 163: {
 19829                           ;tmr0.c: 165: CountCallBack = 0;
 19830  003122  0E00               	movlw	0
 19831  003124  6E36               	movwf	TMR0_ISR@CountCallBack+1,c	;volatile
 19832  003126  0E00               	movlw	0
 19833  003128  6E35               	movwf	TMR0_ISR@CountCallBack,c	;volatile
 19834  00312A  0012               	return	
 19835  00312C                     __end_of_TMR0_ISR:
 19836                           	opt stack 0
 19837                           tosu	equ	0xFFF
 19838                           tosh	equ	0xFFE
 19839                           tosl	equ	0xFFD
 19840                           pclatu	equ	0xFFB
 19841                           pclath	equ	0xFFA
 19842                           tblptru	equ	0xFF8
 19843                           tblptrh	equ	0xFF7
 19844                           tblptrl	equ	0xFF6
 19845                           tablat	equ	0xFF5
 19846                           prodh	equ	0xFF4
 19847                           prodl	equ	0xFF3
 19848                           intcon	equ	0xFF2
 19849                           intcon2	equ	0xFF1
 19850                           postinc0	equ	0xFEE
 19851                           plusw0	equ	0xFEB
 19852                           fsr0h	equ	0xFEA
 19853                           fsr0l	equ	0xFE9
 19854                           wreg	equ	0xFE8
 19855                           indf1	equ	0xFE7
 19856                           postdec1	equ	0xFE5
 19857                           fsr1h	equ	0xFE2
 19858                           fsr1l	equ	0xFE1
 19859                           indf2	equ	0xFDF
 19860                           postinc2	equ	0xFDE
 19861                           postdec2	equ	0xFDD
 19862                           plusw2	equ	0xFDB
 19863                           fsr2h	equ	0xFDA
 19864                           fsr2l	equ	0xFD9
 19865                           status	equ	0xFD8
 19866                           
 19867 ;; *************** function ___lwmod *****************
 19868 ;; Defined at:
 19869 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 19870 ;; Parameters:    Size  Location     Type
 19871 ;;  dividend        2    0[COMRAM] unsigned int 
 19872 ;;  divisor         2    2[COMRAM] unsigned int 
 19873 ;; Auto vars:     Size  Location     Type
 19874 ;;  counter         1    4[COMRAM] unsigned char 
 19875 ;; Return value:  Size  Location     Type
 19876 ;;                  2    0[COMRAM] unsigned int 
 19877 ;; Registers used:
 19878 ;;		wreg, status,2, status,0
 19879 ;; Tracked objects:
 19880 ;;		On entry : 0/0
 19881 ;;		On exit  : 0/0
 19882 ;;		Unchanged: 0/0
 19883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19884 ;;      Params:         4       0       0       0       0       0       0
 19885 ;;      Locals:         1       0       0       0       0       0       0
 19886 ;;      Temps:          0       0       0       0       0       0       0
 19887 ;;      Totals:         5       0       0       0       0       0       0
 19888 ;;Total ram usage:        5 bytes
 19889 ;; Hardware stack levels used:    1
 19890 ;; This function calls:
 19891 ;;		Nothing
 19892 ;; This function is called by:
 19893 ;;		_TMR0_ISR
 19894 ;; This function uses a non-reentrant model
 19895 ;;
 19896                           
 19897                           	psect	text114
 19898  003DA4                     __ptext114:
 19899                           	opt stack 0
 19900  003DA4                     ___lwmod:
 19901                           	opt stack 18
 19902                           
 19903                           ;incstack = 0
 19904  003DA4  5003               	movf	___lwmod@divisor,w,c
 19905  003DA6  1004               	iorwf	___lwmod@divisor+1,w,c
 19906  003DA8  B4D8               	btfsc	status,2,c
 19907  003DAA  D018               	goto	i2l2030
 19908  003DAC  0E01               	movlw	1
 19909  003DAE  6E05               	movwf	___lwmod@counter,c
 19910  003DB0  D004               	goto	i2l2025
 19911  003DB2  90D8               	bcf	status,0,c
 19912  003DB4  3603               	rlcf	___lwmod@divisor,f,c
 19913  003DB6  3604               	rlcf	___lwmod@divisor+1,f,c
 19914  003DB8  2A05               	incf	___lwmod@counter,f,c
 19915  003DBA                     i2l2025:
 19916  003DBA  AE04               	btfss	___lwmod@divisor+1,7,c
 19917  003DBC  D7FA               	goto	i2l2026
 19918  003DBE                     i2u614_40:
 19919  003DBE  5003               	movf	___lwmod@divisor,w,c
 19920  003DC0  5C01               	subwf	___lwmod@dividend,w,c
 19921  003DC2  5004               	movf	___lwmod@divisor+1,w,c
 19922  003DC4  5802               	subwfb	___lwmod@dividend+1,w,c
 19923  003DC6  A0D8               	btfss	status,0,c
 19924  003DC8  D004               	goto	i2l2029
 19925  003DCA  5003               	movf	___lwmod@divisor,w,c
 19926  003DCC  5E01               	subwf	___lwmod@dividend,f,c
 19927  003DCE  5004               	movf	___lwmod@divisor+1,w,c
 19928  003DD0  5A02               	subwfb	___lwmod@dividend+1,f,c
 19929  003DD2                     i2l2029:
 19930  003DD2  90D8               	bcf	status,0,c
 19931  003DD4  3204               	rrcf	___lwmod@divisor+1,f,c
 19932  003DD6  3203               	rrcf	___lwmod@divisor,f,c
 19933  003DD8  2E05               	decfsz	___lwmod@counter,f,c
 19934  003DDA  D7F1               	goto	i2u614_40
 19935  003DDC                     i2l2030:
 19936  003DDC  C001  F001         	movff	___lwmod@dividend,?___lwmod
 19937  003DE0  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
 19938  003DE4  0012               	return		;funcret
 19939  003DE6                     __end_of___lwmod:
 19940                           	opt stack 0
 19941                           tosu	equ	0xFFF
 19942                           tosh	equ	0xFFE
 19943                           tosl	equ	0xFFD
 19944                           pclatu	equ	0xFFB
 19945                           pclath	equ	0xFFA
 19946                           tblptru	equ	0xFF8
 19947                           tblptrh	equ	0xFF7
 19948                           tblptrl	equ	0xFF6
 19949                           tablat	equ	0xFF5
 19950                           prodh	equ	0xFF4
 19951                           prodl	equ	0xFF3
 19952                           intcon	equ	0xFF2
 19953                           intcon2	equ	0xFF1
 19954                           postinc0	equ	0xFEE
 19955                           plusw0	equ	0xFEB
 19956                           fsr0h	equ	0xFEA
 19957                           fsr0l	equ	0xFE9
 19958                           wreg	equ	0xFE8
 19959                           indf1	equ	0xFE7
 19960                           postdec1	equ	0xFE5
 19961                           fsr1h	equ	0xFE2
 19962                           fsr1l	equ	0xFE1
 19963                           indf2	equ	0xFDF
 19964                           postinc2	equ	0xFDE
 19965                           postdec2	equ	0xFDD
 19966                           plusw2	equ	0xFDB
 19967                           fsr2h	equ	0xFDA
 19968                           fsr2l	equ	0xFD9
 19969                           status	equ	0xFD8
 19970                           
 19971 ;; *************** function _PIN_MANAGER_IOC *****************
 19972 ;; Defined at:
 19973 ;;		line 108 in file "mcc_generated_files/pin_manager.c"
 19974 ;; Parameters:    Size  Location     Type
 19975 ;;		None
 19976 ;; Auto vars:     Size  Location     Type
 19977 ;;		None
 19978 ;; Return value:  Size  Location     Type
 19979 ;;                  1    wreg      void 
 19980 ;; Registers used:
 19981 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 19982 ;; Tracked objects:
 19983 ;;		On entry : 0/0
 19984 ;;		On exit  : 0/0
 19985 ;;		Unchanged: 0/0
 19986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19987 ;;      Params:         0       0       0       0       0       0       0
 19988 ;;      Locals:         0       0       0       0       0       0       0
 19989 ;;      Temps:          0       0       0       0       0       0       0
 19990 ;;      Totals:         0       0       0       0       0       0       0
 19991 ;;Total ram usage:        0 bytes
 19992 ;; Hardware stack levels used:    1
 19993 ;; Hardware stack levels required when called:    2
 19994 ;; This function calls:
 19995 ;;		_IOCB4_ISR
 19996 ;;		_IOCB5_ISR
 19997 ;; This function is called by:
 19998 ;;		_INTERRUPT_InterruptManager
 19999 ;; This function uses a non-reentrant model
 20000 ;;
 20001                           
 20002                           	psect	text115
 20003  00449C                     __ptext115:
 20004                           	opt stack 0
 20005  00449C                     _PIN_MANAGER_IOC:
 20006                           	opt stack 17
 20007                           
 20008                           ;pin_manager.c: 111: if(IOCBbits.IOCB4 == 1)
 20009                           
 20010                           ;incstack = 0
 20011  00449C  B862               	btfsc	3938,4,c	;volatile
 20012                           
 20013                           ;pin_manager.c: 112: {
 20014                           ;pin_manager.c: 113: IOCB4_ISR();
 20015  00449E  EC8E  F021         	call	_IOCB4_ISR	;wreg free
 20016                           
 20017                           ;pin_manager.c: 114: }
 20018                           ;pin_manager.c: 116: if(IOCBbits.IOCB5 == 1)
 20019  0044A2  BA62               	btfsc	3938,5,c	;volatile
 20020                           
 20021                           ;pin_manager.c: 117: {
 20022                           ;pin_manager.c: 118: IOCB5_ISR();
 20023  0044A4  EC7D  F021         	call	_IOCB5_ISR	;wreg free
 20024                           
 20025                           ;pin_manager.c: 119: }
 20026                           ;pin_manager.c: 122: INTCONbits.RBIF = 0;
 20027  0044A8  90F2               	bcf	intcon,0,c	;volatile
 20028  0044AA  0012               	return		;funcret
 20029  0044AC                     __end_of_PIN_MANAGER_IOC:
 20030                           	opt stack 0
 20031                           tosu	equ	0xFFF
 20032                           tosh	equ	0xFFE
 20033                           tosl	equ	0xFFD
 20034                           pclatu	equ	0xFFB
 20035                           pclath	equ	0xFFA
 20036                           tblptru	equ	0xFF8
 20037                           tblptrh	equ	0xFF7
 20038                           tblptrl	equ	0xFF6
 20039                           tablat	equ	0xFF5
 20040                           prodh	equ	0xFF4
 20041                           prodl	equ	0xFF3
 20042                           intcon	equ	0xFF2
 20043                           intcon2	equ	0xFF1
 20044                           postinc0	equ	0xFEE
 20045                           plusw0	equ	0xFEB
 20046                           fsr0h	equ	0xFEA
 20047                           fsr0l	equ	0xFE9
 20048                           wreg	equ	0xFE8
 20049                           indf1	equ	0xFE7
 20050                           postdec1	equ	0xFE5
 20051                           fsr1h	equ	0xFE2
 20052                           fsr1l	equ	0xFE1
 20053                           indf2	equ	0xFDF
 20054                           postinc2	equ	0xFDE
 20055                           postdec2	equ	0xFDD
 20056                           plusw2	equ	0xFDB
 20057                           fsr2h	equ	0xFDA
 20058                           fsr2l	equ	0xFD9
 20059                           status	equ	0xFD8
 20060                           
 20061 ;; *************** function _IOCB5_ISR *****************
 20062 ;; Defined at:
 20063 ;;		line 158 in file "mcc_generated_files/pin_manager.c"
 20064 ;; Parameters:    Size  Location     Type
 20065 ;;		None
 20066 ;; Auto vars:     Size  Location     Type
 20067 ;;		None
 20068 ;; Return value:  Size  Location     Type
 20069 ;;                  1    wreg      void 
 20070 ;; Registers used:
 20071 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 20072 ;; Tracked objects:
 20073 ;;		On entry : 0/0
 20074 ;;		On exit  : 0/0
 20075 ;;		Unchanged: 0/0
 20076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20077 ;;      Params:         0       0       0       0       0       0       0
 20078 ;;      Locals:         0       0       0       0       0       0       0
 20079 ;;      Temps:          0       0       0       0       0       0       0
 20080 ;;      Totals:         0       0       0       0       0       0       0
 20081 ;;Total ram usage:        0 bytes
 20082 ;; Hardware stack levels used:    1
 20083 ;; Hardware stack levels required when called:    1
 20084 ;; This function calls:
 20085 ;;		Absolute function
 20086 ;;		_IOCB5_DefaultInterruptHandler
 20087 ;; This function is called by:
 20088 ;;		_PIN_MANAGER_IOC
 20089 ;; This function uses a non-reentrant model
 20090 ;;
 20091                           
 20092                           	psect	text116
 20093  0042FA                     __ptext116:
 20094                           	opt stack 0
 20095  0042FA                     _IOCB5_ISR:
 20096                           	opt stack 17
 20097                           
 20098                           ;pin_manager.c: 163: if(IOCB5_InterruptHandler)
 20099                           
 20100                           ;incstack = 0
 20101  0042FA  0101               	movlb	1	; () banked
 20102  0042FC  51E4               	movf	_IOCB5_InterruptHandler& (0+255),w,b
 20103  0042FE  11E5               	iorwf	(_IOCB5_InterruptHandler+1)& (0+255),w,b
 20104  004300  B4D8               	btfsc	status,2,c
 20105  004302  0012               	return	
 20106                           
 20107                           ; BSR set to: 1
 20108                           ;pin_manager.c: 164: {
 20109                           ;pin_manager.c: 165: IOCB5_InterruptHandler();
 20110  004304  D801               	call	i2u606_48
 20111  004306  0012               	return	
 20112  004308                     i2u606_48:
 20113  004308  0005               	push	
 20114  00430A  6EFA               	movwf	pclath,c
 20115  00430C  51E4               	movf	_IOCB5_InterruptHandler& (0+255),w,b
 20116  00430E  6EFD               	movwf	tosl,c
 20117  004310  51E5               	movf	(_IOCB5_InterruptHandler+1)& (0+255),w,b
 20118  004312  6EFE               	movwf	tosh,c
 20119  004314  50F8               	movf	tblptru,w,c
 20120  004316  6EFF               	movwf	tosu,c
 20121  004318  50FA               	movf	pclath,w,c
 20122  00431A  0012               	return		;indir
 20123  00431C                     __end_of_IOCB5_ISR:
 20124                           	opt stack 0
 20125                           tosu	equ	0xFFF
 20126                           tosh	equ	0xFFE
 20127                           tosl	equ	0xFFD
 20128                           pclatu	equ	0xFFB
 20129                           pclath	equ	0xFFA
 20130                           tblptru	equ	0xFF8
 20131                           tblptrh	equ	0xFF7
 20132                           tblptrl	equ	0xFF6
 20133                           tablat	equ	0xFF5
 20134                           prodh	equ	0xFF4
 20135                           prodl	equ	0xFF3
 20136                           intcon	equ	0xFF2
 20137                           intcon2	equ	0xFF1
 20138                           postinc0	equ	0xFEE
 20139                           plusw0	equ	0xFEB
 20140                           fsr0h	equ	0xFEA
 20141                           fsr0l	equ	0xFE9
 20142                           wreg	equ	0xFE8
 20143                           indf1	equ	0xFE7
 20144                           postdec1	equ	0xFE5
 20145                           fsr1h	equ	0xFE2
 20146                           fsr1l	equ	0xFE1
 20147                           indf2	equ	0xFDF
 20148                           postinc2	equ	0xFDE
 20149                           postdec2	equ	0xFDD
 20150                           plusw2	equ	0xFDB
 20151                           fsr2h	equ	0xFDA
 20152                           fsr2l	equ	0xFD9
 20153                           status	equ	0xFD8
 20154                           
 20155 ;; *************** function _IOCB5_DefaultInterruptHandler *****************
 20156 ;; Defined at:
 20157 ;;		line 179 in file "mcc_generated_files/pin_manager.c"
 20158 ;; Parameters:    Size  Location     Type
 20159 ;;		None
 20160 ;; Auto vars:     Size  Location     Type
 20161 ;;		None
 20162 ;; Return value:  Size  Location     Type
 20163 ;;                  1    wreg      void 
 20164 ;; Registers used:
 20165 ;;		None
 20166 ;; Tracked objects:
 20167 ;;		On entry : 0/0
 20168 ;;		On exit  : 0/0
 20169 ;;		Unchanged: 0/0
 20170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20171 ;;      Params:         0       0       0       0       0       0       0
 20172 ;;      Locals:         0       0       0       0       0       0       0
 20173 ;;      Temps:          0       0       0       0       0       0       0
 20174 ;;      Totals:         0       0       0       0       0       0       0
 20175 ;;Total ram usage:        0 bytes
 20176 ;; Hardware stack levels used:    1
 20177 ;; This function calls:
 20178 ;;		Nothing
 20179 ;; This function is called by:
 20180 ;;		_PIN_MANAGER_Initialize
 20181 ;;		_IOCB5_ISR
 20182 ;; This function uses a non-reentrant model
 20183 ;;
 20184                           
 20185                           	psect	text117
 20186  00455A                     __ptext117:
 20187                           	opt stack 0
 20188  00455A                     _IOCB5_DefaultInterruptHandler:
 20189                           	opt stack 17
 20190                           
 20191                           ;incstack = 0
 20192  00455A  0012               	return		;funcret
 20193  00455C                     __end_of_IOCB5_DefaultInterruptHandler:
 20194                           	opt stack 0
 20195                           tosu	equ	0xFFF
 20196                           tosh	equ	0xFFE
 20197                           tosl	equ	0xFFD
 20198                           pclatu	equ	0xFFB
 20199                           pclath	equ	0xFFA
 20200                           tblptru	equ	0xFF8
 20201                           tblptrh	equ	0xFF7
 20202                           tblptrl	equ	0xFF6
 20203                           tablat	equ	0xFF5
 20204                           prodh	equ	0xFF4
 20205                           prodl	equ	0xFF3
 20206                           intcon	equ	0xFF2
 20207                           intcon2	equ	0xFF1
 20208                           postinc0	equ	0xFEE
 20209                           plusw0	equ	0xFEB
 20210                           fsr0h	equ	0xFEA
 20211                           fsr0l	equ	0xFE9
 20212                           wreg	equ	0xFE8
 20213                           indf1	equ	0xFE7
 20214                           postdec1	equ	0xFE5
 20215                           fsr1h	equ	0xFE2
 20216                           fsr1l	equ	0xFE1
 20217                           indf2	equ	0xFDF
 20218                           postinc2	equ	0xFDE
 20219                           postdec2	equ	0xFDD
 20220                           plusw2	equ	0xFDB
 20221                           fsr2h	equ	0xFDA
 20222                           fsr2l	equ	0xFD9
 20223                           status	equ	0xFD8
 20224                           
 20225 ;; *************** function _IOCB4_ISR *****************
 20226 ;; Defined at:
 20227 ;;		line 129 in file "mcc_generated_files/pin_manager.c"
 20228 ;; Parameters:    Size  Location     Type
 20229 ;;		None
 20230 ;; Auto vars:     Size  Location     Type
 20231 ;;		None
 20232 ;; Return value:  Size  Location     Type
 20233 ;;                  1    wreg      void 
 20234 ;; Registers used:
 20235 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 20236 ;; Tracked objects:
 20237 ;;		On entry : 0/0
 20238 ;;		On exit  : 0/0
 20239 ;;		Unchanged: 0/0
 20240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20241 ;;      Params:         0       0       0       0       0       0       0
 20242 ;;      Locals:         0       0       0       0       0       0       0
 20243 ;;      Temps:          0       0       0       0       0       0       0
 20244 ;;      Totals:         0       0       0       0       0       0       0
 20245 ;;Total ram usage:        0 bytes
 20246 ;; Hardware stack levels used:    1
 20247 ;; Hardware stack levels required when called:    1
 20248 ;; This function calls:
 20249 ;;		Absolute function
 20250 ;;		_IOCB4_DefaultInterruptHandler
 20251 ;; This function is called by:
 20252 ;;		_PIN_MANAGER_IOC
 20253 ;; This function uses a non-reentrant model
 20254 ;;
 20255                           
 20256                           	psect	text118
 20257  00431C                     __ptext118:
 20258                           	opt stack 0
 20259  00431C                     _IOCB4_ISR:
 20260                           	opt stack 17
 20261                           
 20262                           ;pin_manager.c: 134: if(IOCB4_InterruptHandler)
 20263                           
 20264                           ;incstack = 0
 20265  00431C  0101               	movlb	1	; () banked
 20266  00431E  51E6               	movf	_IOCB4_InterruptHandler& (0+255),w,b
 20267  004320  11E7               	iorwf	(_IOCB4_InterruptHandler+1)& (0+255),w,b
 20268  004322  B4D8               	btfsc	status,2,c
 20269  004324  0012               	return	
 20270                           
 20271                           ; BSR set to: 1
 20272                           ;pin_manager.c: 135: {
 20273                           ;pin_manager.c: 136: IOCB4_InterruptHandler();
 20274  004326  D801               	call	i2u604_48
 20275  004328  0012               	return	
 20276  00432A                     i2u604_48:
 20277  00432A  0005               	push	
 20278  00432C  6EFA               	movwf	pclath,c
 20279  00432E  51E6               	movf	_IOCB4_InterruptHandler& (0+255),w,b
 20280  004330  6EFD               	movwf	tosl,c
 20281  004332  51E7               	movf	(_IOCB4_InterruptHandler+1)& (0+255),w,b
 20282  004334  6EFE               	movwf	tosh,c
 20283  004336  50F8               	movf	tblptru,w,c
 20284  004338  6EFF               	movwf	tosu,c
 20285  00433A  50FA               	movf	pclath,w,c
 20286  00433C  0012               	return		;indir
 20287  00433E                     __end_of_IOCB4_ISR:
 20288                           	opt stack 0
 20289                           tosu	equ	0xFFF
 20290                           tosh	equ	0xFFE
 20291                           tosl	equ	0xFFD
 20292                           pclatu	equ	0xFFB
 20293                           pclath	equ	0xFFA
 20294                           tblptru	equ	0xFF8
 20295                           tblptrh	equ	0xFF7
 20296                           tblptrl	equ	0xFF6
 20297                           tablat	equ	0xFF5
 20298                           prodh	equ	0xFF4
 20299                           prodl	equ	0xFF3
 20300                           intcon	equ	0xFF2
 20301                           intcon2	equ	0xFF1
 20302                           postinc0	equ	0xFEE
 20303                           plusw0	equ	0xFEB
 20304                           fsr0h	equ	0xFEA
 20305                           fsr0l	equ	0xFE9
 20306                           wreg	equ	0xFE8
 20307                           indf1	equ	0xFE7
 20308                           postdec1	equ	0xFE5
 20309                           fsr1h	equ	0xFE2
 20310                           fsr1l	equ	0xFE1
 20311                           indf2	equ	0xFDF
 20312                           postinc2	equ	0xFDE
 20313                           postdec2	equ	0xFDD
 20314                           plusw2	equ	0xFDB
 20315                           fsr2h	equ	0xFDA
 20316                           fsr2l	equ	0xFD9
 20317                           status	equ	0xFD8
 20318                           
 20319 ;; *************** function _IOCB4_DefaultInterruptHandler *****************
 20320 ;; Defined at:
 20321 ;;		line 150 in file "mcc_generated_files/pin_manager.c"
 20322 ;; Parameters:    Size  Location     Type
 20323 ;;		None
 20324 ;; Auto vars:     Size  Location     Type
 20325 ;;		None
 20326 ;; Return value:  Size  Location     Type
 20327 ;;                  1    wreg      void 
 20328 ;; Registers used:
 20329 ;;		None
 20330 ;; Tracked objects:
 20331 ;;		On entry : 0/0
 20332 ;;		On exit  : 0/0
 20333 ;;		Unchanged: 0/0
 20334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20335 ;;      Params:         0       0       0       0       0       0       0
 20336 ;;      Locals:         0       0       0       0       0       0       0
 20337 ;;      Temps:          0       0       0       0       0       0       0
 20338 ;;      Totals:         0       0       0       0       0       0       0
 20339 ;;Total ram usage:        0 bytes
 20340 ;; Hardware stack levels used:    1
 20341 ;; This function calls:
 20342 ;;		Nothing
 20343 ;; This function is called by:
 20344 ;;		_PIN_MANAGER_Initialize
 20345 ;;		_IOCB4_ISR
 20346 ;; This function uses a non-reentrant model
 20347 ;;
 20348                           
 20349                           	psect	text119
 20350  00455C                     __ptext119:
 20351                           	opt stack 0
 20352  00455C                     _IOCB4_DefaultInterruptHandler:
 20353                           	opt stack 17
 20354                           
 20355                           ;incstack = 0
 20356  00455C  0012               	return		;funcret
 20357  00455E                     __end_of_IOCB4_DefaultInterruptHandler:
 20358                           	opt stack 0
 20359                           tosu	equ	0xFFF
 20360                           tosh	equ	0xFFE
 20361                           tosl	equ	0xFFD
 20362                           pclatu	equ	0xFFB
 20363                           pclath	equ	0xFFA
 20364                           tblptru	equ	0xFF8
 20365                           tblptrh	equ	0xFF7
 20366                           tblptrl	equ	0xFF6
 20367                           tablat	equ	0xFF5
 20368                           prodh	equ	0xFF4
 20369                           prodl	equ	0xFF3
 20370                           intcon	equ	0xFF2
 20371                           intcon2	equ	0xFF1
 20372                           postinc0	equ	0xFEE
 20373                           plusw0	equ	0xFEB
 20374                           fsr0h	equ	0xFEA
 20375                           fsr0l	equ	0xFE9
 20376                           wreg	equ	0xFE8
 20377                           indf1	equ	0xFE7
 20378                           postdec1	equ	0xFE5
 20379                           fsr1h	equ	0xFE2
 20380                           fsr1l	equ	0xFE1
 20381                           indf2	equ	0xFDF
 20382                           postinc2	equ	0xFDE
 20383                           postdec2	equ	0xFDD
 20384                           plusw2	equ	0xFDB
 20385                           fsr2h	equ	0xFDA
 20386                           fsr2l	equ	0xFD9
 20387                           status	equ	0xFD8
 20388                           
 20389 ;; *************** function _MEMORY_ISR *****************
 20390 ;; Defined at:
 20391 ;;		line 206 in file "mcc_generated_files/memory.c"
 20392 ;; Parameters:    Size  Location     Type
 20393 ;;		None
 20394 ;; Auto vars:     Size  Location     Type
 20395 ;;		None
 20396 ;; Return value:  Size  Location     Type
 20397 ;;                  1    wreg      void 
 20398 ;; Registers used:
 20399 ;;		None
 20400 ;; Tracked objects:
 20401 ;;		On entry : 0/0
 20402 ;;		On exit  : 0/0
 20403 ;;		Unchanged: 0/0
 20404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20405 ;;      Params:         0       0       0       0       0       0       0
 20406 ;;      Locals:         0       0       0       0       0       0       0
 20407 ;;      Temps:          0       0       0       0       0       0       0
 20408 ;;      Totals:         0       0       0       0       0       0       0
 20409 ;;Total ram usage:        0 bytes
 20410 ;; Hardware stack levels used:    1
 20411 ;; This function calls:
 20412 ;;		Nothing
 20413 ;; This function is called by:
 20414 ;;		_INTERRUPT_InterruptManager
 20415 ;; This function uses a non-reentrant model
 20416 ;;
 20417                           
 20418                           	psect	text120
 20419  004556                     __ptext120:
 20420                           	opt stack 0
 20421  004556                     _MEMORY_ISR:
 20422                           	opt stack 19
 20423                           
 20424                           ;memory.c: 209: PIR2bits.EEIF = 0;
 20425                           
 20426                           ;incstack = 0
 20427  004556  98A1               	bcf	4001,4,c	;volatile
 20428  004558  0012               	return		;funcret
 20429  00455A                     __end_of_MEMORY_ISR:
 20430                           	opt stack 0
 20431                           tosu	equ	0xFFF
 20432                           tosh	equ	0xFFE
 20433                           tosl	equ	0xFFD
 20434                           pclatu	equ	0xFFB
 20435                           pclath	equ	0xFFA
 20436                           tblptru	equ	0xFF8
 20437                           tblptrh	equ	0xFF7
 20438                           tblptrl	equ	0xFF6
 20439                           tablat	equ	0xFF5
 20440                           prodh	equ	0xFF4
 20441                           prodl	equ	0xFF3
 20442                           intcon	equ	0xFF2
 20443                           intcon2	equ	0xFF1
 20444                           postinc0	equ	0xFEE
 20445                           plusw0	equ	0xFEB
 20446                           fsr0h	equ	0xFEA
 20447                           fsr0l	equ	0xFE9
 20448                           wreg	equ	0xFE8
 20449                           indf1	equ	0xFE7
 20450                           postdec1	equ	0xFE5
 20451                           fsr1h	equ	0xFE2
 20452                           fsr1l	equ	0xFE1
 20453                           indf2	equ	0xFDF
 20454                           postinc2	equ	0xFDE
 20455                           postdec2	equ	0xFDD
 20456                           plusw2	equ	0xFDB
 20457                           fsr2h	equ	0xFDA
 20458                           fsr2l	equ	0xFD9
 20459                           status	equ	0xFD8
 20460                           
 20461 ;; *************** function _EUSART1_Transmit_ISR *****************
 20462 ;; Defined at:
 20463 ;;		line 181 in file "mcc_generated_files/eusart1.c"
 20464 ;; Parameters:    Size  Location     Type
 20465 ;;		None
 20466 ;; Auto vars:     Size  Location     Type
 20467 ;;		None
 20468 ;; Return value:  Size  Location     Type
 20469 ;;                  1    wreg      void 
 20470 ;; Registers used:
 20471 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20472 ;; Tracked objects:
 20473 ;;		On entry : 0/0
 20474 ;;		On exit  : 0/0
 20475 ;;		Unchanged: 0/0
 20476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20477 ;;      Params:         0       0       0       0       0       0       0
 20478 ;;      Locals:         0       0       0       0       0       0       0
 20479 ;;      Temps:          0       0       0       0       0       0       0
 20480 ;;      Totals:         0       0       0       0       0       0       0
 20481 ;;Total ram usage:        0 bytes
 20482 ;; Hardware stack levels used:    1
 20483 ;; This function calls:
 20484 ;;		Nothing
 20485 ;; This function is called by:
 20486 ;;		_INTERRUPT_InterruptManager
 20487 ;; This function uses a non-reentrant model
 20488 ;;
 20489                           
 20490                           	psect	text121
 20491  003F7A                     __ptext121:
 20492                           	opt stack 0
 20493  003F7A                     _EUSART1_Transmit_ISR:
 20494                           	opt stack 19
 20495                           
 20496                           ;eusart1.c: 185: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 20497                           
 20498                           ;incstack = 0
 20499  003F7A  0E46               	movlw	70
 20500  003F7C  0101               	movlb	1	; () banked
 20501  003F7E  61E8               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 20502  003F80  D012               	goto	i2l925
 20503                           
 20504                           ; BSR set to: 1
 20505                           ;eusart1.c: 186: {
 20506                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 20507  003F82  5039               	movf	_eusart1TxTail,w,c	;volatile
 20508  003F84  0D01               	mullw	1
 20509  003F86  0E5D               	movlw	low _eusart1TxBuffer
 20510  003F88  24F3               	addwf	prodl,w,c
 20511  003F8A  6ED9               	movwf	fsr2l,c
 20512  003F8C  0E02               	movlw	high _eusart1TxBuffer
 20513  003F8E  20F4               	addwfc	prodh,w,c
 20514  003F90  6EDA               	movwf	fsr2h,c
 20515  003F92  50DF               	movf	indf2,w,c
 20516  003F94  6EAD               	movwf	4013,c	;volatile
 20517                           
 20518                           ; BSR set to: 1
 20519  003F96  2A39               	incf	_eusart1TxTail,f,c	;volatile
 20520                           
 20521                           ; BSR set to: 1
 20522                           ;eusart1.c: 188: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 20523  003F98  0E45               	movlw	69
 20524  003F9A  6439               	cpfsgt	_eusart1TxTail,c	;volatile
 20525  003F9C  D002               	goto	i2l926
 20526                           
 20527                           ; BSR set to: 1
 20528                           ;eusart1.c: 189: {
 20529                           ;eusart1.c: 190: eusart1TxTail = 0;
 20530  003F9E  0E00               	movlw	0
 20531  003FA0  6E39               	movwf	_eusart1TxTail,c	;volatile
 20532  003FA2                     i2l926:
 20533                           
 20534                           ; BSR set to: 1
 20535                           ;eusart1.c: 191: }
 20536                           ;eusart1.c: 192: eusart1TxBufferRemaining++;
 20537                           
 20538                           ; BSR set to: 1
 20539  003FA2  2BE8               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 20540                           
 20541                           ;eusart1.c: 193: }
 20542  003FA4  0012               	return	
 20543  003FA6                     i2l925:
 20544                           
 20545                           ; BSR set to: 1
 20546                           ;eusart1.c: 194: else
 20547                           ;eusart1.c: 195: {
 20548                           ;eusart1.c: 196: PIE1bits.TX1IE = 0;
 20549  003FA6  989D               	bcf	3997,4,c	;volatile
 20550                           
 20551                           ; BSR set to: 1
 20552                           ;eusart1.c: 197: eusart1TxTail = 0;
 20553  003FA8  0E00               	movlw	0
 20554  003FAA  6E39               	movwf	_eusart1TxTail,c	;volatile
 20555                           
 20556                           ;eusart1.c: 198: eusart1TxHead = 0;
 20557  003FAC  0E00               	movlw	0
 20558  003FAE  6E3A               	movwf	_eusart1TxHead,c	;volatile
 20559  003FB0  0012               	return	
 20560  003FB2                     __end_of_EUSART1_Transmit_ISR:
 20561                           	opt stack 0
 20562                           tosu	equ	0xFFF
 20563                           tosh	equ	0xFFE
 20564                           tosl	equ	0xFFD
 20565                           pclatu	equ	0xFFB
 20566                           pclath	equ	0xFFA
 20567                           tblptru	equ	0xFF8
 20568                           tblptrh	equ	0xFF7
 20569                           tblptrl	equ	0xFF6
 20570                           tablat	equ	0xFF5
 20571                           prodh	equ	0xFF4
 20572                           prodl	equ	0xFF3
 20573                           intcon	equ	0xFF2
 20574                           intcon2	equ	0xFF1
 20575                           postinc0	equ	0xFEE
 20576                           plusw0	equ	0xFEB
 20577                           fsr0h	equ	0xFEA
 20578                           fsr0l	equ	0xFE9
 20579                           wreg	equ	0xFE8
 20580                           indf1	equ	0xFE7
 20581                           postdec1	equ	0xFE5
 20582                           fsr1h	equ	0xFE2
 20583                           fsr1l	equ	0xFE1
 20584                           indf2	equ	0xFDF
 20585                           postinc2	equ	0xFDE
 20586                           postdec2	equ	0xFDD
 20587                           plusw2	equ	0xFDB
 20588                           fsr2h	equ	0xFDA
 20589                           fsr2l	equ	0xFD9
 20590                           status	equ	0xFD8
 20591                           
 20592 ;; *************** function _EUSART1_Receive_ISR *****************
 20593 ;; Defined at:
 20594 ;;		line 202 in file "mcc_generated_files/eusart1.c"
 20595 ;; Parameters:    Size  Location     Type
 20596 ;;		None
 20597 ;; Auto vars:     Size  Location     Type
 20598 ;;		None
 20599 ;; Return value:  Size  Location     Type
 20600 ;;                  1    wreg      void 
 20601 ;; Registers used:
 20602 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20603 ;; Tracked objects:
 20604 ;;		On entry : 0/0
 20605 ;;		On exit  : 0/0
 20606 ;;		Unchanged: 0/0
 20607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20608 ;;      Params:         0       0       0       0       0       0       0
 20609 ;;      Locals:         0       0       0       0       0       0       0
 20610 ;;      Temps:          0       0       0       0       0       0       0
 20611 ;;      Totals:         0       0       0       0       0       0       0
 20612 ;;Total ram usage:        0 bytes
 20613 ;; Hardware stack levels used:    1
 20614 ;; This function calls:
 20615 ;;		Nothing
 20616 ;; This function is called by:
 20617 ;;		_INTERRUPT_InterruptManager
 20618 ;; This function uses a non-reentrant model
 20619 ;;
 20620                           
 20621                           	psect	text122
 20622  00414A                     __ptext122:
 20623                           	opt stack 0
 20624  00414A                     _EUSART1_Receive_ISR:
 20625                           	opt stack 19
 20626                           
 20627                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
 20628                           
 20629                           ; BSR set to: 1
 20630                           ;incstack = 0
 20631  00414A  A2AB               	btfss	4011,1,c	;volatile
 20632  00414C  D002               	goto	i2l931
 20633                           
 20634                           ;eusart1.c: 206: {
 20635                           ;eusart1.c: 208: RCSTA1bits.CREN = 0;
 20636  00414E  98AB               	bcf	4011,4,c	;volatile
 20637                           
 20638                           ;eusart1.c: 209: RCSTA1bits.CREN = 1;
 20639  004150  88AB               	bsf	4011,4,c	;volatile
 20640  004152                     i2l931:
 20641                           
 20642                           ;eusart1.c: 210: }
 20643                           ;eusart1.c: 215: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 20644  004152  5038               	movf	_eusart1RxHead,w,c	;volatile
 20645  004154  0D01               	mullw	1
 20646  004156  0E00               	movlw	low _eusart1RxBuffer
 20647  004158  24F3               	addwf	prodl,w,c
 20648  00415A  6ED9               	movwf	fsr2l,c
 20649  00415C  0E01               	movlw	high _eusart1RxBuffer
 20650  00415E  20F4               	addwfc	prodh,w,c
 20651  004160  6EDA               	movwf	fsr2h,c
 20652  004162  CFAE FFDF          	movff	4014,indf2	;volatile
 20653  004166  2A38               	incf	_eusart1RxHead,f,c	;volatile
 20654                           
 20655                           ;eusart1.c: 216: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 20656  004168  0E27               	movlw	39
 20657  00416A  6438               	cpfsgt	_eusart1RxHead,c	;volatile
 20658  00416C  D002               	goto	i2l932
 20659                           
 20660                           ;eusart1.c: 217: {
 20661                           ;eusart1.c: 218: eusart1RxHead = 0;
 20662  00416E  0E00               	movlw	0
 20663  004170  6E38               	movwf	_eusart1RxHead,c	;volatile
 20664  004172                     i2l932:
 20665                           
 20666                           ;eusart1.c: 219: }
 20667                           ;eusart1.c: 220: eusart1RxCount++;
 20668  004172  0100               	movlb	0	; () banked
 20669  004174  2BEF               	incf	_eusart1RxCount& (0+255),f,b	;volatile
 20670                           
 20671                           ; BSR set to: 0
 20672  004176  0012               	return		;funcret
 20673  004178                     __end_of_EUSART1_Receive_ISR:
 20674                           	opt stack 0
 20675                           tosu	equ	0xFFF
 20676                           tosh	equ	0xFFE
 20677                           tosl	equ	0xFFD
 20678                           pclatu	equ	0xFFB
 20679                           pclath	equ	0xFFA
 20680                           tblptru	equ	0xFF8
 20681                           tblptrh	equ	0xFF7
 20682                           tblptrl	equ	0xFF6
 20683                           tablat	equ	0xFF5
 20684                           prodh	equ	0xFF4
 20685                           prodl	equ	0xFF3
 20686                           intcon	equ	0xFF2
 20687                           intcon2	equ	0xFF1
 20688                           postinc0	equ	0xFEE
 20689                           plusw0	equ	0xFEB
 20690                           fsr0h	equ	0xFEA
 20691                           fsr0l	equ	0xFE9
 20692                           wreg	equ	0xFE8
 20693                           indf1	equ	0xFE7
 20694                           postdec1	equ	0xFE5
 20695                           fsr1h	equ	0xFE2
 20696                           fsr1l	equ	0xFE1
 20697                           indf2	equ	0xFDF
 20698                           postinc2	equ	0xFDE
 20699                           postdec2	equ	0xFDD
 20700                           plusw2	equ	0xFDB
 20701                           fsr2h	equ	0xFDA
 20702                           fsr2l	equ	0xFD9
 20703                           status	equ	0xFD8
 20704                           tosu	equ	0xFFF
 20705                           tosh	equ	0xFFE
 20706                           tosl	equ	0xFFD
 20707                           pclatu	equ	0xFFB
 20708                           pclath	equ	0xFFA
 20709                           tblptru	equ	0xFF8
 20710                           tblptrh	equ	0xFF7
 20711                           tblptrl	equ	0xFF6
 20712                           tablat	equ	0xFF5
 20713                           prodh	equ	0xFF4
 20714                           prodl	equ	0xFF3
 20715                           intcon	equ	0xFF2
 20716                           intcon2	equ	0xFF1
 20717                           postinc0	equ	0xFEE
 20718                           plusw0	equ	0xFEB
 20719                           fsr0h	equ	0xFEA
 20720                           fsr0l	equ	0xFE9
 20721                           wreg	equ	0xFE8
 20722                           indf1	equ	0xFE7
 20723                           postdec1	equ	0xFE5
 20724                           fsr1h	equ	0xFE2
 20725                           fsr1l	equ	0xFE1
 20726                           indf2	equ	0xFDF
 20727                           postinc2	equ	0xFDE
 20728                           postdec2	equ	0xFDD
 20729                           plusw2	equ	0xFDB
 20730                           fsr2h	equ	0xFDA
 20731                           fsr2l	equ	0xFD9
 20732                           status	equ	0xFD8
 20733                           
 20734                           	psect	text123
 20735  000000                     __ptext123:
 20736                           	opt stack 0
 20737                           tosu	equ	0xFFF
 20738                           tosh	equ	0xFFE
 20739                           tosl	equ	0xFFD
 20740                           pclatu	equ	0xFFB
 20741                           pclath	equ	0xFFA
 20742                           tblptru	equ	0xFF8
 20743                           tblptrh	equ	0xFF7
 20744                           tblptrl	equ	0xFF6
 20745                           tablat	equ	0xFF5
 20746                           prodh	equ	0xFF4
 20747                           prodl	equ	0xFF3
 20748                           intcon	equ	0xFF2
 20749                           intcon2	equ	0xFF1
 20750                           postinc0	equ	0xFEE
 20751                           plusw0	equ	0xFEB
 20752                           fsr0h	equ	0xFEA
 20753                           fsr0l	equ	0xFE9
 20754                           wreg	equ	0xFE8
 20755                           indf1	equ	0xFE7
 20756                           postdec1	equ	0xFE5
 20757                           fsr1h	equ	0xFE2
 20758                           fsr1l	equ	0xFE1
 20759                           indf2	equ	0xFDF
 20760                           postinc2	equ	0xFDE
 20761                           postdec2	equ	0xFDD
 20762                           plusw2	equ	0xFDB
 20763                           fsr2h	equ	0xFDA
 20764                           fsr2l	equ	0xFD9
 20765                           status	equ	0xFD8
 20766                           
 20767                           	psect	rparam
 20768  0000                     tosu	equ	0xFFF
 20769                           tosh	equ	0xFFE
 20770                           tosl	equ	0xFFD
 20771                           pclatu	equ	0xFFB
 20772                           pclath	equ	0xFFA
 20773                           tblptru	equ	0xFF8
 20774                           tblptrh	equ	0xFF7
 20775                           tblptrl	equ	0xFF6
 20776                           tablat	equ	0xFF5
 20777                           prodh	equ	0xFF4
 20778                           prodl	equ	0xFF3
 20779                           intcon	equ	0xFF2
 20780                           intcon2	equ	0xFF1
 20781                           postinc0	equ	0xFEE
 20782                           plusw0	equ	0xFEB
 20783                           fsr0h	equ	0xFEA
 20784                           fsr0l	equ	0xFE9
 20785                           wreg	equ	0xFE8
 20786                           indf1	equ	0xFE7
 20787                           postdec1	equ	0xFE5
 20788                           fsr1h	equ	0xFE2
 20789                           fsr1l	equ	0xFE1
 20790                           indf2	equ	0xFDF
 20791                           postinc2	equ	0xFDE
 20792                           postdec2	equ	0xFDD
 20793                           plusw2	equ	0xFDB
 20794                           fsr2h	equ	0xFDA
 20795                           fsr2l	equ	0xFD9
 20796                           status	equ	0xFD8
 20797                           
 20798                           	psect	temp
 20799  000048                     btemp:
 20800                           	opt stack 0
 20801  000048                     	ds	1
 20802  0000                     int$flags	set	btemp
 20803  0000                     wtemp6	set	btemp+1
 20804                           tosu	equ	0xFFF
 20805                           tosh	equ	0xFFE
 20806                           tosl	equ	0xFFD
 20807                           pclatu	equ	0xFFB
 20808                           pclath	equ	0xFFA
 20809                           tblptru	equ	0xFF8
 20810                           tblptrh	equ	0xFF7
 20811                           tblptrl	equ	0xFF6
 20812                           tablat	equ	0xFF5
 20813                           prodh	equ	0xFF4
 20814                           prodl	equ	0xFF3
 20815                           intcon	equ	0xFF2
 20816                           intcon2	equ	0xFF1
 20817                           postinc0	equ	0xFEE
 20818                           plusw0	equ	0xFEB
 20819                           fsr0h	equ	0xFEA
 20820                           fsr0l	equ	0xFE9
 20821                           wreg	equ	0xFE8
 20822                           indf1	equ	0xFE7
 20823                           postdec1	equ	0xFE5
 20824                           fsr1h	equ	0xFE2
 20825                           fsr1l	equ	0xFE1
 20826                           indf2	equ	0xFDF
 20827                           postinc2	equ	0xFDE
 20828                           postdec2	equ	0xFDD
 20829                           plusw2	equ	0xFDB
 20830                           fsr2h	equ	0xFDA
 20831                           fsr2l	equ	0xFD9
 20832                           status	equ	0xFD8


Data Sizes:
    Strings     21
    Constant    143
    Data        24
    BSS         281
    Persistent  9
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     48      71
    BANK0           160    132     154
    BANK1           256     34     233
    BANK2           256     93     163
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    readUartMessage$3598	PTR FTN()void  size(2) Largest target is 1
		 -> GroupDAC(), GroupFlashMemory(), GroupSynthesizers(), GroupAdc(), 
		 -> GroupStatusAndVersion(), GroupControlMcu(), 

    SynthReadData@data	PTR unsigned char  size(2) Largest target is 0

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    strtol@endptr	PTR PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strtol@s	PTR const unsigned char  size(2) Largest target is 10
		 -> GetIntFromUartData@dataRegArr(BANK0[10]), 

    memset@p1	PTR void  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[18]), GetIntFromUartData@dataRegArr(BANK0[10]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK1[18]), 
		 -> DacReadValue@TxMsg(BANK0[7]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK2[69]), sampleArray(BANK1[64]), 
		 -> SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), synthLdRxArray(BANK1[12]), 

    memset@p	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[18]), GetIntFromUartData@dataRegArr(BANK0[10]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK1[18]), 
		 -> DacReadValue@TxMsg(BANK0[7]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK2[69]), sampleArray(BANK1[64]), 
		 -> SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), synthLdRxArray(BANK1[12]), 

    Make32bitsArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> SWSPI_Synth_send_bits@bitArray(BANK0[32]), 

    GetIntFromUartData@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    GetUint16FromBitArray@bitarray	PTR unsigned char  size(2) Largest target is 12
		 -> synthLdTxArray(BANK1[12]), synthLdRxArray(BANK1[12]), 

    FillArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> SWSPI_Synth_send_bits@bitArray(BANK0[32]), synthLdRxArray(BANK1[12]), 

    sp__memset	PTR void  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[18]), GetIntFromUartData@dataRegArr(BANK0[10]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK1[18]), 
		 -> DacReadValue@TxMsg(BANK0[7]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK2[69]), sampleArray(BANK1[64]), 
		 -> SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), synthLdRxArray(BANK1[12]), 

    ZeroArray@array	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[18]), GetIntFromUartData@dataRegArr(BANK0[10]), SynthReadData@TxMsg(BANK1[18]), DacReadValue@TxMsg(BANK0[7]), 
		 -> FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK2[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), 
		 -> rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 

    crc8@dataArray	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetMcuFwVersion@TxMsg(BANK0[18]), SynthReadData@TxMsg(BANK1[18]), DacReadValue@TxMsg(BANK0[7]), 
		 -> FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK2[69]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgQueue(BANK1[20]), 

    GroupDAC@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), Absolute function(), 

    FLASH_WriteBlock@flashWrBufPtr	PTR unsigned char  size(2) Largest target is 64
		 -> sampleArray(BANK1[64]), 

    IOCB5_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCB5_DefaultInterruptHandler(), 

    IOCB5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCB5_DefaultInterruptHandler(), 

    IOCB4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCB4_DefaultInterruptHandler(), 

    IOCB4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCB4_DefaultInterruptHandler(), 

    UpdateSynthFreq@data	PTR unsigned char  size(2) Largest target is 0

    DacReadValue@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    DacSetValue@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    FlashReadUart@data	PTR unsigned char  size(2) Largest target is 0

    WriteUartMessage@dataBuf	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetMcuFwVersion@TxMsg(BANK0[18]), SynthReadData@TxMsg(BANK1[18]), DacReadValue@TxMsg(BANK0[7]), 
		 -> FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK2[69]), SendAckMessage@TxMsg(COMRAM[6]), 

    SetChannelMode@data	PTR unsigned char  size(2) Largest target is 0

    groupsArray	PTR FTN()void [6] size(2) Largest target is 1
		 -> GroupDAC(), GroupFlashMemory(), GroupSynthesizers(), GroupAdc(), 
		 -> GroupStatusAndVersion(), GroupControlMcu(), 


Critical Paths under _main in COMRAM

    _InitRxMessageParams->_ZeroArray
    _GetMcuRunTime->___lldiv
    _GetMcuFwVersion->_ZeroArray
    _GroupFlashMemory->_FlashReadCondition
    _FlashReadCondition->_ZeroArray
    _FlashEreaseMem->_SendAckMessage
    _GetIntFromUartData->_strtol
    _strtol->___lmul
    _isalpha->_isupper
    _testLeds->_SendAckMessage
    _ResetMcu->_SendAckMessage
    _SetChannelMode->_SendAckMessage
    _keepAliveSignalUart->_SendAckMessage
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCB4_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCB5_SetInterruptHandler
    _SetMcuRunTime->___llmod
    _SendSystemStartAck->_SendAckMessage
    _SendAckMessage->_ZeroArray
    _ZeroArray->_memset
    _WriteUartMessage->_EUSART1_Write
    _StoreIntInEeprom->_make8
    _EepromWrite->_DATAEE_WriteByte
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _SWSPI_Synth_send_bits->_FillArray
    _FillArray->_memset
    _SWSPI_DAC_send_bits->_SwSpi_Clk_Pin
    _SWSPI_DAC_send_bits->_SwSpi_Data_Pin
    ___lmul->_EepromRead
    _EepromRead->_DATAEE_ReadByte
    _CheckFlashPrecentage->___ftdiv
    _log->_eval_poly
    _exp->_eval_poly
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftdiv
    ___ftmul->___ftdiv
    ___ftdiv->___lltoft
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lwtoft->___ftpack
    _FlashSampleWrite->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_ISR->___lwmod

Critical Paths under _main in BANK0

    _main->_readUartMessage
    _readUartMessage->_GroupAdc
    _readUartMessage->_GroupControlMcu
    _readUartMessage->_GroupDAC
    _readUartMessage->_GroupFlashMemory
    _readUartMessage->_GroupStatusAndVersion
    _readUartMessage->_GroupSynthesizers
    _UpdateSynthFreq->_SWSPI_send_word
    _SynthReadData->_ReadIntFromEeprom
    _SetSynthOper->_InitSynth
    _FlashReadUart->_GetIntFromUartData
    _GroupDAC->_DacReadValue
    _DacSetValue->_SWSPI_send_word
    _GetIntFromUartData->_strtol
    _DacReadValue->_ReadIntFromEeprom
    _SynthLdDetect->_InitSynth
    _PLLInitialize->_InitSynth
    _InitSynth->_ReadIntFromEeprom
    _DacInit->_ReadIntFromEeprom
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _ReadIntFromEeprom->_pow
    _CheckFlashPrecentage->___ftmul
    _AdcConvert->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___ftdiv
    ___ftsub->___ftadd
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _GroupSynthesizers->_SynthReadData

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _GroupFlashMemory->_FlashReadUart

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  932231
                         _AdcConvert
                     _BlinkErrorLeds
                        _BlinkOkLeds
               _CheckFlashPrecentage
      _InitSystemApplicationManagers
                 _SendSystemStartAck
                      _SetMcuRunTime
                       _SetMcuSystem
                      _SynthLdDetect
                 _keepAliveSignalLed
                _keepAliveSignalUart
                    _readUartMessage
 ---------------------------------------------------------------------------------
 (1) _readUartMessage                                      7     7      0  464524
                                            125 BANK0      7     7      0
                       _EUSART1_Read
                           _GroupAdc *
                    _GroupControlMcu *
                           _GroupDAC *
                   _GroupFlashMemory *
              _GroupStatusAndVersion *
                  _GroupSynthesizers *
                _InitRxMessageParams
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _InitRxMessageParams                                  0     0      0    2719
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupSynthesizers                                    3     1      2  250570
                                            122 BANK0      3     1      2
                       _SetSynthOper
                      _SynthReadData
                    _UpdateSynthFreq
 ---------------------------------------------------------------------------------
 (3) _UpdateSynthFreq                                     11     9      2   28259
                                             42 BANK0     11     9      2
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (3) _SynthReadData                                       36    34      2  103787
                                            104 BANK0      2     0      2
                                              0 BANK1     34    34      0
                  _ReadIntFromEeprom
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (3) _SetSynthOper                                         1     1      0  118369
                                            111 BANK0      1     1      0
                          _InitSynth
                     _SendAckMessage
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (2) _GroupStatusAndVersion                                4     1      3   13446
                                            122 BANK0      3     1      2
                    _GetMcuFwVersion
                      _GetMcuRunTime
 ---------------------------------------------------------------------------------
 (3) _GetMcuRunTime                                       17    17      0    4498
                                             36 COMRAM     2     2      0
                                              0 BANK0     15    15      0
                   _WriteUartMessage
                            ___lldiv
                            ___llmod
                               _crc8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     421
                                             23 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _GetMcuFwVersion                                     33    33      0    8917
                                             35 COMRAM     7     7      0
                                              0 BANK0     26    26      0
                   _WriteUartMessage
                          _ZeroArray
                             ___wmul
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _GroupFlashMemory                                     3     1      2   39377
                                            122 BANK0      3     1      2
                     _FlashEreaseMem
                 _FlashReadCondition
                      _FlashReadUart
 ---------------------------------------------------------------------------------
 (3) _FlashReadUart                                      107   105      2   21457
                                             39 BANK0     14    12      2
                                              0 BANK2     93    93      0
                  _FLASH_IsWriteDone
                     _FLASH_ReadByte
                 _GetIntFromUartData
                     _SendAckMessage
                   _WriteUartMessage
                          _ZeroArray
                                _abs
                               _crc8
 ---------------------------------------------------------------------------------
 (4) _abs                                                  4     2      2     183
                                             23 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _FLASH_ReadByte                                       4     0      4     453
                                             23 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _FlashReadCondition                                  13    13      0    7780
                                             35 COMRAM    13    13      0
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (3) _FlashEreaseMem                                       0     0      0   10078
                     _SendAckMessage
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupDAC                                             3     1      2  131446
                                            122 BANK0      3     1      2
                       _DacReadValue
                        _DacSetValue
 ---------------------------------------------------------------------------------
 (3) _DacSetValue                                         15    13      2   27980
                                             42 BANK0     15    13      2
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (4) _GetIntFromUartData                                  33    25      8    6661
                                              6 BANK0     33    25      8
                          _ZeroArray
                             _strtol
 ---------------------------------------------------------------------------------
 (5) _strtol                                              16    10      6    2723
                                             37 COMRAM    10     4      6
                                              0 BANK0      6     6      0
                             ___lmul
                            _isalpha
                            _isdigit
                            _isspace
                            _toupper
 ---------------------------------------------------------------------------------
 (6) _toupper                                              1     1      0      96
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _isspace                                              3     3      0     130
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isalpha                                              3     3      0     229
                                             26 COMRAM     3     3      0
                            _isupper
 ---------------------------------------------------------------------------------
 (7) _isupper                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _DacReadValue                                        18    16      2  103308
                                            104 BANK0     18    16      2
                  _ReadIntFromEeprom
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (2) _GroupControlMcu                                      4     1      3   14817
                                            122 BANK0      3     1      2
                           _ResetMcu
                           _testLeds
 ---------------------------------------------------------------------------------
 (3) _testLeds                                             3     3      0    7427
                                             43 COMRAM     3     3      0
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _ResetMcu                                             0     0      0    7359
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _GroupAdc                                             3     1      2    7573
                                            122 BANK0      3     1      2
                     _SetChannelMode
 ---------------------------------------------------------------------------------
 (3) _SetChannelMode                                       2     0      2    7511
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         3     3      0      46
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalUart                                  0     0      0    7359
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalLed                                   1     1      0       0
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SynthLdDetect                                        0     0      0  111393
                     _BlinkErrorLeds
                          _InitSynth
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     904
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _BlinkErrorLeds                                       6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _SetMcuSystem                                         0     0      0     294
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0     294
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      2     2      0      98
                                             25 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _TMR0_SetInterruptHandler                             2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0     196
          _IOCB4_SetInterruptHandler
          _IOCB5_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _IOCB5_SetInterruptHandler                            2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _IOCB4_SetInterruptHandler                            2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMcuRunTime                                        0     0      0     592
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     592
                                             23 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (1) _SendSystemStartAck                                   0     0      0    7359
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (4) _SendAckMessage                                       8     7      1    7359
                                             35 COMRAM     8     7      1
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _crc8                                                 9     5      4    1610
                                             23 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _ZeroArray                                            4     0      4    2719
                                             31 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (5) _WriteUartMessage                                     7     3      4    1452
                                             24 COMRAM     7     3      4
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (6) _EUSART1_Write                                        1     1      0      62
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitSystemApplicationManagers                        0     0      0  220989
                    _ClearMcuRunTime
                            _DacInit
              _InitAdcApplicationMgr
                      _PLLInitialize
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PLLInitialize                                        0     0      0  111709
                          _FillArray
                          _InitSynth
 ---------------------------------------------------------------------------------
 (4) _InitSynth                                            7     7      0  110399
                                            104 BANK0      7     7      0
                  _ReadIntFromEeprom
                    _SWSPI_send_word
                   _StoreIntInEeprom
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (4) _SwSpi_Set_CE_Pin                                     2     1      1     425
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _InitAdcApplicationMgr                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DacInit                                              5     5      0  109280
                                            104 BANK0      5     5      0
                  _ReadIntFromEeprom
                    _SWSPI_send_word
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (4) _StoreIntInEeprom                                     9     2      7    3779
                                             32 COMRAM     9     2      7
                        _EepromWrite
                              _make8
 ---------------------------------------------------------------------------------
 (5) _EepromWrite                                          2     1      1     338
                                             26 COMRAM     2     1      1
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (6) _DATAEE_WriteByte                                     3     2      1     186
                                             23 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (4) _SWSPI_send_word                                      9     4      5    9930
                                             40 COMRAM     5     0      5
                                             38 BANK0      4     4      0
                _SWSPI_DAC_send_bits
              _SWSPI_Synth_send_bits
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
                              _make8
 ---------------------------------------------------------------------------------
 (5) _make8                                                9     4      5    1595
                                             23 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Synth_Le_Pin                               2     1      1     335
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Dac_Sync_Pin                               1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _SWSPI_Synth_send_bits                               42    38      4    3865
                                             36 COMRAM     4     0      4
                                              0 BANK0     38    38      0
                          _FillArray
                    _Make32bitsArray
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (6) _Make32bitsArray                                     10     4      6     344
                                             23 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (6) _FillArray                                            5     0      5    1310
                                             31 COMRAM     5     0      5
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     677
                                             23 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (5) _SWSPI_DAC_send_bits                                  3     2      1    2041
                                             25 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Data_Pin                                       2     1      1     757
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Clk_Pin                                        2     1      1     937
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _ReadIntFromEeprom                                   23    19      4   95314
                                             81 BANK0     23    19      4
                         _EepromRead
                           ___awtoft
                            ___fttol
                             ___lmul
                                _pow
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     636
                                             25 COMRAM    12     4      8
                         _EepromRead (ARG)
 ---------------------------------------------------------------------------------
 (5) _EepromRead                                           1     1      0      62
                                             24 COMRAM     1     1      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (6) _DATAEE_ReadByte                                      1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ClearMcuRunTime                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckFlashPrecentage                                 7     7      0   14121
                                             24 BANK0      7     7      0
                            ___ftdiv
                             ___ftge
                            ___ftmul
                           ___lltoft
 ---------------------------------------------------------------------------------
 (1) _BlinkOkLeds                                          6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _AdcConvert                                          16    16      0  105420
                                             81 BANK0     16    16      0
                  _ADC_GetConversion
                   _FlashSampleWrite
              _GetUint16FromBitArray
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _pow
 ---------------------------------------------------------------------------------
 (5) _pow                                                 17    11      6   88933
                                             64 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (6) _log                                                  5     2      3   28922
                                             46 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _exp                                                  9     6      3   47974
                                             55 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (7) _ldexp                                                7     2      5     539
                                             46 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (7) _floor                                                8     5      3   11854
                                             47 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (7) _frexp                                                7     2      5     682
                                             23 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (8) ___fttol                                             15    11      4     911
                                             24 BANK0     15    11      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftge                                               9     3      6    1098
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (8) ___altoft                                            10     6      4    3367
                                             46 COMRAM     2     2      0
                                             39 BANK0      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (7) _eval_poly                                           12     5      7   13735
                                             46 COMRAM     2     2      0
                                             36 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (8) ___wmul                                               6     2      4    2322
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) ___ftmul                                             15     9      6    5281
                                              9 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftsub                                              6     0      6    5754
                                             36 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (8) ___ftadd                                             12     6      6    5338
                                             24 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     335
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             15     9      6    4353
                                             40 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             4     1      3    3476
                                             31 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___lltoft                                             9     5      4    3355
                                             31 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3284
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftpack                                             8     3      5    3073
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _GetUint16FromBitArray                               10     8      2     355
                                             23 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (2) _FlashSampleWrite                                     7     4      3    1811
                                             44 COMRAM     3     0      3
                                              0 BANK0      4     4      0
                  _FLASH_IsWriteDone
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_WriteBlock                                    16    10      6     992
                                             28 COMRAM    16    10      6
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     5     1      4     217
                                             23 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) _FLASH_IsWriteDone                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      22
                                             23 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                         18    18      0     767
                                              5 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                         _MEMORY_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     767
                            ___lwmod
 ---------------------------------------------------------------------------------
 (13) ___lwmod                                             5     1      4     767
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (12) _PIN_MANAGER_IOC                                     0     0      0       0
                          _IOCB4_ISR
                          _IOCB5_ISR
 ---------------------------------------------------------------------------------
 (13) _IOCB5_ISR                                           0     0      0       0
                   Absolute function *
      _IOCB5_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (14) _IOCB5_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _IOCB4_ISR                                           0     0      0       0
                   Absolute function *
      _IOCB4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (14) _IOCB4_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _MEMORY_ISR                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Receive_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcConvert
     _ADC_GetConversion
     _FlashSampleWrite
       _FLASH_IsWriteDone
       _FLASH_WriteBlock
         _FLASH_EraseBlock
     _GetUint16FromBitArray
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _frexp
   _BlinkErrorLeds
   _BlinkOkLeds
   _CheckFlashPrecentage
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___lltoft
       ___ftpack
   _InitSystemApplicationManagers
     _ClearMcuRunTime
     _DacInit
       _ReadIntFromEeprom
         _EepromRead
           _DATAEE_ReadByte
         ___awtoft
           ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lmul
           _EepromRead (ARG)
             _DATAEE_ReadByte
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _FillArray
             _memset
           _Make32bitsArray
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
       _StoreIntInEeprom
         _EepromWrite
           _DATAEE_WriteByte
         _make8
     _InitAdcApplicationMgr
     _PLLInitialize
       _FillArray
         _memset
       _InitSynth
         _ReadIntFromEeprom
           _EepromRead
             _DATAEE_ReadByte
           ___awtoft
             ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lmul
             _EepromRead (ARG)
               _DATAEE_ReadByte
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _FillArray
               _memset
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _StoreIntInEeprom
           _EepromWrite
             _DATAEE_WriteByte
           _make8
         _SwSpi_Set_CE_Pin
     _TMR0_StartTimer
   _SendSystemStartAck
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _SetMcuRunTime
     ___llmod
   _SetMcuSystem
     _SYSTEM_Initialize
       _ADC_Initialize
       _EUSART1_Initialize
       _INTERRUPT_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
         _IOCB4_SetInterruptHandler
         _IOCB5_SetInterruptHandler
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
   _SynthLdDetect
     _BlinkErrorLeds
     _InitSynth
       _ReadIntFromEeprom
         _EepromRead
           _DATAEE_ReadByte
         ___awtoft
           ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lmul
           _EepromRead (ARG)
             _DATAEE_ReadByte
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _FillArray
             _memset
           _Make32bitsArray
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
       _StoreIntInEeprom
         _EepromWrite
           _DATAEE_WriteByte
         _make8
       _SwSpi_Set_CE_Pin
     ___awmod
   _keepAliveSignalLed
   _keepAliveSignalUart
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _readUartMessage
     _EUSART1_Read
     _GroupAdc *
       _SetChannelMode
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupControlMcu *
       _ResetMcu
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _testLeds
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupDAC *
       _DacReadValue
         _ReadIntFromEeprom
           _EepromRead
             _DATAEE_ReadByte
           ___awtoft
             ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lmul
             _EepromRead (ARG)
               _DATAEE_ReadByte
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _DacSetValue
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _FillArray
               _memset
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _StoreIntInEeprom
           _EepromWrite
             _DATAEE_WriteByte
           _make8
     _GroupFlashMemory *
       _FlashEreaseMem
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _ZeroArray
           _memset
       _FlashReadCondition
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _FlashReadUart
         _FLASH_IsWriteDone
         _FLASH_ReadByte
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _abs
         _crc8
     _GroupStatusAndVersion *
       _GetMcuFwVersion
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         ___wmul
         _crc8
       _GetMcuRunTime
         _WriteUartMessage
           _EUSART1_Write
         ___lldiv
         ___llmod
         _crc8
     _GroupSynthesizers *
       _SetSynthOper
         _InitSynth
           _ReadIntFromEeprom
             _EepromRead
               _DATAEE_ReadByte
             ___awtoft
               ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _pow
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lltoft
                 ___ftpack
               _exp
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftge
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg
                 ___ftsub
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _floor
                   ___altoft
                     ___ftpack
                     ___fttol (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftge
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   _frexp
                 _ldexp
                   _eval_poly (ARG)
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___wmul
                 _log (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   _eval_poly
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___wmul
                   _frexp
               _log
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
           _SWSPI_send_word
             _SWSPI_DAC_send_bits
               _SwSpi_Clk_Pin
               _SwSpi_Data_Pin
             _SWSPI_Synth_send_bits
               _FillArray
                 _memset
               _Make32bitsArray
               _SwSpi_Clk_Pin
               _SwSpi_Data_Pin
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
             _make8
           _StoreIntInEeprom
             _EepromWrite
               _DATAEE_WriteByte
             _make8
           _SwSpi_Set_CE_Pin
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _SwSpi_Set_CE_Pin
       _SynthReadData
         _ReadIntFromEeprom
           _EepromRead
             _DATAEE_ReadByte
           ___awtoft
             ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lmul
             _EepromRead (ARG)
               _DATAEE_ReadByte
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _UpdateSynthFreq
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _FillArray
               _memset
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _StoreIntInEeprom
           _EepromWrite
             _DATAEE_WriteByte
           _make8
     _InitRxMessageParams *
       _ZeroArray
         _memset
     _ZeroArray *
       _memset
     _crc8 *

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _MEMORY_ISR
   _PIN_MANAGER_IOC
     _IOCB4_ISR
       Absolute function(Fake) *
       _IOCB4_DefaultInterruptHandler *
     _IOCB5_ISR
       Absolute function(Fake) *
       _IOCB5_DefaultInterruptHandler *
   _TMR0_ISR
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100     5D      A3      10       63.7%
BITBANK1           100      0       0       7        0.0%
BANK1              100     22      E9       8       91.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0     84      9A       6       96.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     30      47       1       75.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     26D       3        0.0%
DATA                 0      0     26D       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Mar 22 17:07:44 2018

              __size_of_SendSystemStartAck 000C                          ??_GetMcuFwVersion 0024  
               __end_of_keepAliveSignalLed 4422                               ___altoft@exp 002F  
                 _eusart1TxBufferRemaining 01E8                         readUartMessage@idx 00E1  
                 GetIntFromUartData@idxCon 0084                            _GroupControlMcu 40BA  
              __end_of_keepAliveSignalUart 44FE                              ___altoft@sign 0030  
               __size_of_FLASH_IsWriteDone 000E                                         l60 37A6  
                 GetIntFromUartData@recVal 007B                   GetIntFromUartData@retVal 007C  
                      __end_of_BlinkOkLeds 397E                            _SWSPI_send_word 312C  
                      ___wmul@multiplicand 001A         __size_of_IOCB4_SetInterruptHandler 000A  
                          _timer0ReloadVal 0046                 ?_IOCB4_SetInterruptHandler 0018  
                             __CFG_CP0$OFF 000000                               __CFG_CP1$OFF 000000  
                             __CFG_CP2$OFF 000000                               __CFG_CP3$OFF 000000  
                             ___ftadd@exp1 0083                               ___ftadd@exp2 0082  
                             ___ftadd@sign 0081                                ?_MEMORY_ISR 0001  
                                      l122 410E                                        l202 16CC  
                                      l211 1564                                        l203 1528  
                                      l221 161C                                        l213 157C  
                                      l126 1268                                        l222 15E0  
                                      l206 1534                                        l127 113E  
                                      l215 1594                                        l207 155E  
                                      l320 23AE                                        l224 163C  
                                      l217 15B2                                        l234 3FD2  
                                      l226 1674                                        l235 3FBC  
                                      l331 07A4                                        l219 15B8  
                                      l228 167A                                        l341 0954  
                                      l333 0822                                        l326 08FC  
                                      l334 08E8                                        l319 238E  
                                      l351 0A80                                        l327 085A  
                                      l352 0A96                                        l344 096C  
                                      l336 0894                                        l521 0EDA  
                                      l345 0A9C                                        l329 0794  
                                      l346 0988                                        l338 08A8  
                                      l427 2B00                                        l523 10E4  
                                      l531 10C6                                        l435 29D4  
                                      l347 09A2                                        l428 2B16  
                                      l540 2482                                        l533 1118  
                                      l349 0A28                                        l526 0FF6  
                                      l550 3574                                        l542 249E  
                                      l527 0FD8                                        l560 183A  
                                      l553 35A4                                        l561 1848  
                                      l537 2488                                        l570 26C2  
                                      l554 35B0                                        l538 2440  
                                      l715 3B68                                        l707 3B54  
                                      l643 3170                                        l563 1854  
                                      l716 3B72                                        l708 3B5E  
                                      l572 275A                                        l548 3580  
                                      l653 3ACA                                        l661 2DFA  
                                      l573 272C                                        l549 3568  
                                      l670 3AF4                                        l654 3A96  
                                      l734 3E4E                                        l574 2732  
                                      l558 17AA                                        l655 3AB0  
                                      l663 2E28                                        l647 31D2  
                                      l735 3E26                                        l656 3ABA  
                                      l664 2E34                                        l744 3E3A  
                                      l736 3E30                                        l920 3E1E  
                                      l568 26E4                                        l745 3E44  
                                      l921 3E1C                                        l569 26BC  
                                      l906 3CEE                                        l755 3E8A  
                                      l668 3B26                                        l756 3E62  
                                      l908 3D14                                        l669 3AEA  
                                      l781 43C0                                        l765 3E76  
                                      l757 3E6C                                        l686 3B12  
                                      l678 3AFE                                        l766 3E80  
                                      l687 3B1C                                        l679 3B08  
                                      l919 3DFA                                        l776 43C4  
                                      l697 3B7C                                        l777 43BC  
                                      l698 3B40                                        l699 3B4A  
                             __CFG_CPB$OFF 000000                               __CFG_CPD$OFF 000000  
                     readUartMessage@chRec 00E3                          ??_Make32bitsArray 001E  
                               _SYNTH_REGS 0601                                        _abs 41CC  
                                      _exp 132A                                        _log 1F5E  
                                      _pow 1C62                               ___awmod@sign 001D  
                                      prod 000FF3                                        tosl 000FFD  
                                      wreg 000FE8             ?_InitSystemApplicationManagers 0001  
                             __CFG_LVP$OFF 000000                 __end_of_FlashReadCondition 22BA  
                           InitSynth@cType 00CC                               ___ftdiv@cntr 0063  
                       __size_of_IOCB4_ISR 0022                         __size_of_IOCB5_ISR 0022  
                             ___ftdiv@sign 0068                                       ?_abs 0018  
                                     l1060 2EFC                                       l1056 2F22  
                                     l2040 4182                                       l1400 3CBA  
                                     l2200 199A                                       l1057 2EDA  
                                     l1401 3C9E                                       l2201 19AA  
                                     l1321 3488                                       l2210 1AA2  
                                     l1330 3478                                       l1306 42A0  
                                     l1314 4352                                       l1059 2EFA  
                                     l2051 1CAC                                       l1067 400C  
                                     l2203 19C4                                       l1307 4294  
                                     l1315 4344                                       l2052 1C9C  
                                     l1173 4132                                       l2301 4392  
                                     l1421 1E52                                       l1325 3438  
                                     l1309 429A                                       l1414 36E4  
                                     l2054 1CC4                                       l1430 39BE  
                                     l2214 445E                                       l2206 19D6  
                                     l1510 0C50                                       l1326 3448  
                                     l2055 1D4E                                       l2039 4192  
                                     l1431 3980                                       l2207 1A42  
                                     l1423 1EC8                                       l1327 3458  
                                     l1335 3EBA                                       l1416 3718  
                                     l2056 1D2C                                       l1440 3A4E  
                                     l1512 0C7E                                       l1328 3460  
                                     l1336 3EA0                                       l1344 4040  
                                     l1600 367A                                       l2321 2CBC  
                                     l2313 1F7E                                       l2057 1DD4  
                                     l1433 3984                                       l2209 1A66  
                                     l1329 3468                                       l1345 4024  
                                     l2322 2C3E                                       l1442 3A8C  
                                     l1434 3988                                       l1514 0CCA  
                                     l1338 3EA6                                       l1602 3698  
                                     l2251 137E                                       l2315 1FA2  
                                     l1451 2182                                       l1435 398C  
                                     l1419 1E32                                       l1339 3EAC  
                                     l1347 4032                                       l2260 2B5A  
                                     l2252 13B8                                       l1620 3BB6  
                                     l1452 20A8                                       l1436 39BA  
                                     l1516 0CF8                                       l2261 2B4C  
                                     l2253 13E8                                       l1445 3F3A  
                                     l2254 1512                                       l1446 3F10  
                                     l2190 191E                                       l1526 28AA  
                                     l2263 2B74                                       l2255 14E8  
                                     l2264 2BF0                                       l1800 3776  
                                     l2192 1936                                       l1296 40CC  
                                     l2273 2CEE                                       l2249 1344  
                                     l1801 3784                                       l1297 40C0  
                                     l2194 198A                                       l2275 2D38  
                                     l1619 3BA2                                       l2291 4374  
                                     l1299 40C6                                       l2269 333A  
                                     l2277 2D6A                                       l1830 3018  
                                     l2278 2D5E                                       l2286 4214  
                                     l1807 3F56                                       l1911 2656  
                                     l1832 3056                                       l1912 2666  
                                     l2296 423A                                       l1833 304C  
                                     l1905 25D4                                       l1657 41EA  
                                     l1826 2FFA                                       l1922 3D7A  
                                     l1827 2FF0                                       l1907 25FC  
                                     l1916 42C8                                       l1908 262E  
                                     l1596 3648                                       l1829 302E  
                                     l1861 1B32                                       l1909 263E  
                                     l1597 3660                                       l1934 257C  
                                     l1926 24E0                                       l1871 1B8E  
                                     l1935 2570                                       l1599 3686  
                                     l1880 1BCC                                       l1872 1B84  
                                     l1696 35EC                                       l1928 2558  
                                     l1792 3732                                       l1881 1BC2  
                                     l1857 1B08                                       l1697 35E0  
                                     l1937 2598                                       l1929 2548  
                                     l1793 373E                                       l1890 27B2  
                                     l1866 1B98                                       l1962 34EC  
                                     l1883 1BF0                                       l1795 3754  
                                     l1963 34E0                                       l1892 27DA  
                                     l1884 1C0C                                       l1972 3816  
                                     l1796 374C                                       l1893 2818  
                                     l1885 1C3C                                       l1973 380A  
                                     l1894 283E                                       l1966 3520  
                                     l1983 39EC                                       l1799 376C  
                                     l1967 352E                                       l1984 39E0  
                                     l1976 383E                                       l1977 384C  
                                     l1898 33D2                                       l1899 3402  
                                     l6412 38CC                                       l8102 1EB8  
                                     l8120 1F1C                                       l7082 342E  
                                     ?_exp 0097                                       ?_log 008E  
                                     l8302 2ED2                                       l6462 36BA  
                                     l8144 0ED2                                       l8080 1E2A  
                                     l7348 4182                                       l8172 0FD8  
                                     l8184 10C6                                       l8272 37EC  
                                     l7650 14E8                                       l6682 392A  
                                     l7706 3DE8                                       l8258 3796  
                                     l7566 3A3E                                       l8710 2B00  
                                     l8470 29C4                                       l8382 096C  
                                     l8480 2A0A                                       l8386 0992  
                                     l8650 289A                                       l8570 184C  
                                     l8396 09F8                                       l8564 1840  
                                     l8662 2926                                       l7944 318E  
                                     l7778 2DF2                                       l7948 319C  
                                     ?_pow 00A0                                       l8698 2A3E  
                                     l8796 1136                                       STR_1 0690  
                                     STR_2 0690                                       STR_3 0690  
                                     STR_4 0690                                       STR_5 0690  
                                     STR_6 0690                                       STR_7 0690  
                                     STR_8 0690                                       STR_9 0690  
                       EepromWrite@address 001C                                       _LATA 000F89  
                                     _LATB 000F8A                                       _LATC 000F8B  
                                     _LATD 000F8C                                       _LATE 000F8D  
                                     u6100 3758                                       u7020 1BD4  
                                     u7210 2582                                       u6180 4414  
                                     u7061 25BC                                       u8110 31CC  
                                     u7151 24C4                                       u7240 3362  
                                     u7400 2D0E                                       u7081 25E4  
                                     u7170 24FE                                       u8220 1960  
                                     u7261 279A                                       u6198 4416  
                                     u7175 24F6                                       u8320 44E0  
                                     u6800 3060                                       u7248 3364  
                                     u7360 2B66                                       u7408 2D12  
                                     u8080 3140                                       u8240 1970  
                                     u9200 2926                                       u9040 3556  
                                     u8321 44DC                                       u7281 27C2  
                                     u8401 1F54                                       u9050 3558  
                                     u9220 231A                                       u8190 1926  
                                     u9150 18A8                                       u9215 22C4  
                                     u7455 401A                                       u9240 235E  
                                     u6760 2FE2                                       u6920 1B24  
                                     u9320 1218                                       u7456 401C  
                                     u8360 1E6C                                       u9080 3592  
                                     u9160 18AC                                       u9090 3594  
                                     u6851 1AC6                                       u5964 370C  
                                     u7660 13C2                                       u7820 39B2  
                                     u8620 37EC                                       u5965 3706  
                                     u6861 1ADA                                       u6950 1B62  
                                     u7670 13C4                                       u8390 1F1C  
                                     u8480 0F0E                                       u8560 34F0  
                                     u8545 40B6                                       u7825 39A8  
                                     u8546 40B8                                       u6890 1AFA  
                                     u7770 1D12                                       u8730 073E  
                                     u9460 2FCE                                       u8740 0740  
                                     u8805 08BA                                       u8670 2F00  
                                     u6990 1BA0                                       u8590 381A  
                                     u9607 37BE                                       u7960 4236  
                                     u8840 0942                                       u9617 37CE  
                                     u7890 2E46                                       u9458 16A6  
                                     u9627 37DE                                       u8931 3288  
                                     u8691 06CC                                       u9459 16C4  
                                     u7980 4206                                       u8940 32CA  
                                     u8685 2F1E                                       u9637 38F2  
                                     u8686 2F20                                       u8870 09F8  
                                     u9647 390C                                       u8960 2A0A  
                                     u8880 0A18                                       u9657 2E48  
                                     u8945 32BE                                       u8785 082C  
                                     u9667 3950                                       u9677 396A  
                                     u9597 37AE                                       u8981 23DA  
                                     u9687 1204                   ??_SwSpi_Set_Synth_Le_Pin 0019  
                                     _WPUB 000F61                              _EUSART1_Write 3DE6  
                                     abs@a 0018                                       _crc8 3C8C  
                  ??_InitAdcApplicationMgr 0018                                       _data 0132  
                                     _main 3636                               ___ftpack@arg 0018  
                            ?_EUSART1_Read 0001                               ___ftpack@exp 001B  
                          _TMR0_StartTimer 4552                            __end_of_DacInit 2B1C  
                                     fsr0h 000FEA                                       fsr1h 000FE2  
                                     fsr2h 000FDA                                       fsr0l 000FE9  
                                     indf1 000FE7                                       indf2 000FDF  
                                     fsr1l 000FE1                                       fsr2l 000FD9  
                                     btemp 0048                              __CFG_BORV$190 000000  
                                     exp@x 0097                                       log@x 008E  
                        ?_FLASH_WriteBlock 001D                           ?_ClearMcuRunTime 0001  
                                     pow@x 00A0                                       pow@y 00A3  
                                     prodh 000FF4                                       prodl 000FF3  
                GroupStatusAndVersion@data 00DA              __size_of_CheckFlashPrecentage 00AE  
                                     start 00DC                              __CFG_IESO$OFF 000000  
                        DacReadValue@TxMsg 00D1                        __end_of_EepromWrite 44D6  
                       ??_FLASH_WriteBlock 0023                              _adcSampleMode 003B  
                             ___ftmul@cntr 0076                               ___param_bank 000000  
                             ___ftmul@sign 0077                             _BlinkErrorLeds 38C2  
                             ___fttol@exp1 0086                                      ??_abs 001A  
                __size_of_DATAEE_WriteByte 0036                                      ??_exp 0031  
                                    ??_log 0031                               ___fttol@lval 0082  
                                    ??_pow 0031                    __end_of_TMR0_Initialize 4086  
                   _ReadIntFromEeprom$3592 00BC                     _ReadIntFromEeprom$3593 00BF  
           __size_of_OSCILLATOR_Initialize 000E              __end_of_OSCILLATOR_Initialize 44C8  
                                    ?_crc8 0018                 SWSPI_DAC_send_bits@phrType 001C  
                                    ?_main 0001                                      _EEADR 000FA9  
                          __end_of___ftadd 1C62                     GetUint16FromBitArray@i 0020  
                                    STR_10 0690                                      STR_11 0690  
                                    STR_12 0690                                      STR_20 069C  
                                    STR_13 0690                                      STR_21 069C  
                                    STR_14 0690                                      STR_22 069C  
                                    STR_15 0690                                      STR_23 069C  
                                    STR_16 0690                                      STR_24 069C  
                                    STR_17 0690                                      STR_25 069C  
          __size_of_SwSpi_Set_Dac_Sync_Pin 001C                                      STR_26 069C  
                                    STR_18 069C                                      STR_27 069C  
                                    STR_19 069C                                      STR_28 069C  
                          __end_of___awmod 378E                                      STR_29 069C  
                          __end_of___ftdiv 2870          __end_of_IOCB4_SetInterruptHandler 4532  
                          __end_of___ftneg 42D6                            __end_of___lldiv 3540  
                               _EepromRead 4532                            __end_of___ftmul 26A0  
                                    _T0CON 000FD5                            __end_of___llmod 385E  
                          __end_of___ftsub 3DA4                            __end_of___fttol 25AA  
                             _SYNTH_ADDRES 0635                             __CFG_DEBUG$OFF 000000  
                          InitSynth@regNum 00CE                            __end_of___lwmod 3DE6  
                      StoreIntInEeprom@idx 0029                                      i2l931 4152  
                                    i2l932 4172                                      i2l925 3FA6  
                                    i2l861 0086                                      i2l926 3FA2  
                                    i2l854 005E                                      i2l863 0090  
                                    i2l856 006A                                      i2l859 007A  
                      StoreIntInEeprom@val 0028                                      _TMR0H 000FD7  
                                    _TMR0L 000FD6                                      _TRISA 000F92  
                                    _TRISB 000F93                                      _TRISC 000F94  
                                    _TRISD 000F95                                      _TRISE 000F96  
                      _SWSPI_DAC_send_bits 3A8E          __size_of_TMR0_SetInterruptHandler 000A  
                            __CFG_WRT0$OFF 000000                              __CFG_WRT1$OFF 000000  
               __end_of_GetIntFromUartData 1F5E                              __CFG_WRT2$OFF 000000  
                      ___lmul@multiplicand 001E                  ?_TMR0_SetInterruptHandler 0018  
                            __CFG_WRT3$OFF 000000                               ___lltoft@exp 0028  
                     _EUSART1_Transmit_ISR 3F7A                             __CFG_EBTR0$OFF 000000  
                           __CFG_FCMEN$OFF 000000                             __CFG_EBTR1$OFF 000000  
                           __CFG_EBTR2$OFF 000000                             __CFG_EBTR3$OFF 000000  
                        ?_WriteUartMessage 0019                           __end_of_TMR0_ISR 312C  
                            __CFG_WRTB$OFF 000000                              __CFG_WRTC$OFF 000000  
                            __CFG_WRTD$OFF 000000                            DacSetValue@data 008A  
                          _DATAEE_ReadByte 4462                             __CFG_EBTRB$OFF 000000  
                            ___awtoft@sign 0023                    __end_of_PIN_MANAGER_IOC 44AC  
                                    crc8@i 001F                                      _make8 397E  
           __size_of_SWSPI_Synth_send_bits 00C6                      __end_of_GetMcuRunTime 2954  
                                    _count 0130                                      _floor 2B1C  
                                    _ldexp 2CD4                                      _frexp 3312  
                                    _errno 012C              __end_of_SWSPI_Synth_send_bits 2E68  
                          __end_of_isalpha 421C                            __end_of_isdigit 437C  
                                    _group 00ED             __size_of_GetUint16FromBitArray 0074  
                       ??_WriteUartMessage 001D                         __CFG_MCLRE$EXTMCLR 000000  
                            ___ftpack@sign 001C                    ??_GroupStatusAndVersion 0031  
            __end_of_GetUint16FromBitArray 371E                            __end_of_isspace 4242  
                           ?_EUSART1_Write 0001                                ?_AdcConvert 0001  
                           __CFG_BOREN$OFF 000000                            __end_of_isupper 439A  
                                    pclath 000FFA                                      tablat 000FF5  
                        ??_UpdateSynthFreq 0030                                      pow@yi 00AD  
                           ??_EUSART1_Read 0018                             FillArray@array 0020  
                                    plusw0 000FEB                                      plusw2 000FDB  
                                    status 000FD8                             FillArray@value 0024  
                                    wtemp6 0049                       ReadIntFromEeprom@idx 00C7  
                           __CFG_HFOFST$ON 000000                            __end_of_toupper 4462  
           SwSpi_Set_Synth_Le_Pin@cPinMode 0018                     __size_of_SynthLdDetect 00E8  
                  __end_of_GroupControlMcu 40EA                        __size_of_MEMORY_ISR 0004  
                           __CFG_PBADEN$ON 000000                                exp@exponent 009D  
           CheckFlashPrecentage@precentage 007C                       ?_SWSPI_DAC_send_bits 001A  
                   __end_of_BlinkErrorLeds 3920            ??_IOCB4_DefaultInterruptHandler 0001  
                              ldexp@newexp 0091                    __end_of_SWSPI_send_word 31D6  
                              _BlinkOkLeds 3920                    WriteUartMessage@dataBuf 0019  
                          __initialization 31D6                                log@exponent 0091  
                             __end_of_crc8 3CDA                 __end_of_EUSART1_Initialize 3F0A  
                             __end_of_main 36AA                         DacReadValue@regNum 00CC  
                        __end_of_IOCB4_ISR 433E                          __end_of_IOCB5_ISR 431C  
                  FLASH_ReadByte@flashAddr 0018                ?_INTERRUPT_InterruptManager 0001  
                         __end_of_GroupDAC 4052                     __size_of_SynthReadData 01DE  
                          _readUartMessage 1520                           __end_of_GroupAdc 435E  
                                   ??_crc8 001C                                     ??_main 0031  
                            ___fttol@sign1 0081                          ?_SwSpi_Set_CE_Pin 0018  
                            __activetblptr 000002                    __size_of_FLASH_ReadByte 0012  
                         __end_of_ResetMcu 44BA                         __size_of_FillArray 001C  
                             _writeAddress 0040                         ??_SwSpi_Set_CE_Pin 0019  
                    ?_EUSART1_Transmit_ISR 0001                    __end_of_TMR0_StartTimer 4556  
                                   ?_make8 0018                                     _ADCON0 000FC2  
                                   _ADCON1 000FC1                                     _ADCON2 000FC0  
                                   ?_floor 008F                  FLASH_WriteBlock@writeAddr 001D  
                                   ?_ldexp 008E                                     ?_frexp 0018  
                         __end_of___altoft 3636                           ___llmod@dividend 0018  
                                   _ADRESH 000FC4                                     _ADRESL 000FC3  
                                   _EEDATA 000FA8                                  ??_DacInit 00C8  
                                   _EECON2 000FA7                           __end_of___awtoft 3F7A  
                                   _ANSELA 000F38                                     _ANSELB 000F39  
                                   _ANSELC 000F3A                                     _ANSELD 000F3B  
                                   _ANSELE 000F3C                           __end_of___ftpack 3080  
           ?_IOCB5_DefaultInterruptHandler 0001                           __end_of___lltoft 3A36  
                        _FlashReadUart$610 0251                          _FlashReadUart$609 024D  
                        ?_FlashSampleWrite 002D                                     i2l1130 3116  
                                   i2l2030 3DDC                                     i2l1127 30B0  
                                   i2l1128 30D2                                     i2l2025 3DBA  
                                   i2l1129 30F4                                     i2l2026 3DB2  
                                   i2l2029 3DD2                             __CFG_WDTEN$OFF 000000  
                     StoreIntInEeprom@data 0021                                     _TABLAT 000FF5  
                              _EepromWrite 44C8                                     _RCREG1 000FAE  
                         __end_of___lwtoft 42FA                    __size_of_FlashEreaseMem 0052  
                __size_of_FLASH_EraseBlock 0034                                     _RCSTA1 000FAB  
                        SynthReadData@data 00C8            __size_of_SwSpi_Set_Synth_Le_Pin 003C  
                                   _OSCCON 000FD3                                     _SPBRG1 000FAF  
                   _SwSpi_Set_Dac_Sync_Pin 43B8                    __size_of_SwSpi_Data_Pin 0056  
                 GroupSynthesizers@request 00DC                         ??_FlashSampleWrite 0060  
                                   _TXREG1 000FAD                                     _TXSTA1 000FAC  
                       __size_of_InitSynth 0276                      ??_SWSPI_DAC_send_bits 001B  
                           _Timer0_SynthLd 00F4                   __end_of_GroupFlashMemory 3ED2  
                          ?_BlinkErrorLeds 0001                             __CFG_PWRTEN$ON 000000  
                           __CFG_XINST$OFF 000000                               _synthLdRxCnt 00F9  
                             _synthLdTxCnt 01E1                                     _cState 00EE  
                                   ___ftge 33A2                                     ___lmul 3B92  
                SWSPI_Synth_send_bits@data 0025                                     ___wmul 4268  
                                ??___ftadd 007E                  SWSPI_Synth_send_bits@mask 0080  
                                ??___awmod 001C                                  ??___ftdiv 0060  
                                ??___ftneg 001B                                  ??___lldiv 0020  
                                ??___ftmul 006F                      __end_of_PLLInitialize 4268  
                                ??___llmod 0020                                  ??___ftsub 002F  
                                ??___fttol 007C                                  ??___lwmod 0005  
           SwSpi_Set_Dac_Sync_Pin@cPinMode 0018                           ?_TMR0_Initialize 0001  
                                   _memset 4178                         __end_of_DAC_ADDRES 0657  
                                   clear_0 323C                                     clear_1 3248  
                                   clear_2 3254                                     clear_3 3260  
                          ___awmod@divisor 001A                        __size_of_AdcConvert 020C  
                          ___awmod@counter 001C                    __end_of_DATAEE_ReadByte 4476  
                              ?_EepromRead 0001                                     _strtol 18DE  
                                   floor@i 0092                      __end_of_SwSpi_Clk_Pin 3B92  
                                   floor@x 008F                      ___ftmul@f3_as_product 0073  
                            _SynthLdDetect 26A0                   SWSPI_DAC_send_bits@count 001B  
               FlashSampleWrite@channelNum 002F                               __pdataCOMRAM 0040  
                                ??_isalpha 001B                                  ??_isdigit 0018  
                    __end_of_FlashReadUart 0AB8                           __end_of_testLeds 37F8  
                            ?_SetMcuSystem 0001                               __mediumconst 0000  
                                ??_isspace 0018                                     tblptrh 000FF7  
                                ??_isupper 0018                                     tblptrl 000FF6  
                                   tblptru 000FF8                   ADC_GetConversion@channel 001C  
                          ??_EUSART1_Write 0018   TMR0_SetInterruptHandler@InterruptHandler 0018  
IOCB5_SetInterruptHandler@InterruptHandler 0018  IOCB4_SetInterruptHandler@InterruptHandler 0018  
             __size_of_InitRxMessageParams 0028                           ?_PIN_MANAGER_IOC 0001  
                    ReadIntFromEeprom@base 00B8                            _eusart1RxBuffer 0100  
                                ??_toupper 0018                         __size_of_ZeroArray 001E  
            __size_of_INTERRUPT_Initialize 0004                              _SynthReadData 1700  
                          _eusart1TxBuffer 025D                            _GetMcuFwVersion 0AB8  
                         __end_ofexp@coeff 0675                          _SYSTEM_Initialize 43F0  
                         __end_oflog@coeff 0690                                 __accesstop 0060  
                  __end_of__initialization 3266                                 ___altoft@c 0087  
                            ZeroArray@size 0022                                 ___ftadd@f1 0078  
                               ___ftadd@f2 007B                                 ___ftge@ff1 0018  
                               ___ftge@ff2 001B                         ?_SYSTEM_Initialize 0001  
                             eval_poly@res 008B                              ___rparam_used 000001  
                               ___ftdiv@f1 0029                                 ___ftdiv@f2 002C  
                               ___ftdiv@f3 0064                           ?_GroupControlMcu 00DA  
             GroupStatusAndVersion@request 00DD                               InitSynth@idx 00CD  
                        __end_of_FillArray 43F0                                 ___ftneg@f1 0018  
                               ___awtoft@c 0020                    __end_of_readUartMessage 1700  
                 WriteUartMessage@dataSize 001B                                 ___ftmul@f1 0069  
                               ___ftmul@f2 006C                           ?_SWSPI_send_word 0029  
                             ?_DacSetValue 008A                                 ___ftsub@f1 0084  
                               ___ftsub@f2 0087                                 ___fttol@f1 0078  
                          _Make32bitsArray 3A36                             __pcstackCOMRAM 0001  
                             __pidataBANK0 4548                               __pidataBANK1 44E4  
                      ??_SYSTEM_Initialize 001C                                  ?_TMR0_ISR 0001  
                      DacReadValue@byteIdx 00D8                                 ___lltoft@c 0020  
                      DacReadValue@byteNum 00CD                              __end_of_make8 39DA  
                      DacReadValue@readVal 00CE                           _DATAEE_WriteByte 3FE8  
                            __end_of_floor 2BFE                              __end_of_ldexp 2DA2  
                            __end_of_frexp 33A2      __end_of_IOCB4_DefaultInterruptHandler 455E  
   __size_of_IOCB4_DefaultInterruptHandler 0002              _IOCB4_DefaultInterruptHandler 455C  
                   _SwSpi_Set_Synth_Le_Pin 3E5E                       GroupFlashMemory@data 00DA  
                               ___lwtoft@c 0020                ??_IOCB4_SetInterruptHandler 001A  
                           ?_SynthLdDetect 0001            __end_of_DAC_DEFAULT_INIT_VALUES 0653  
                     __end_of_EUSART1_Read 3D1E                               ??_MEMORY_ISR 0001  
                __size_of_StoreIntInEeprom 0038                     __size_of_SetMcuRunTime 0044  
                   ??_EUSART1_Transmit_ISR 0001                          __end_of_InitSynth 111E  
                           ??_SetMcuSystem 001C                      TMR0_ISR@CountCallBack 0035  
            SwSpi_Set_Synth_Le_Pin@phrType 0019                    GroupFlashMemory@request 00DC  
                       _keepAliveSignalLed 440A                          make8@dataLocation 001C  
              __end_of_EUSART1_Receive_ISR 4178                FLASH_WriteBlock@GIEBitValue 002B  
                             GroupDAC@data 00DA                              ?_SetSynthOper 0001  
                                  ??_make8 001D                                    ??_floor 0031  
                         ?_TMR0_StartTimer 0001                                    ??_ldexp 0093  
                                  ??_frexp 001D                  __end_of_SYSTEM_Initialize 440A  
                          _AdcConvert$3591 00BB                             ?_SynthReadData 00C8  
                            _eusart1RxHead 0038                       GetMcuFwVersion@TxMsg 0064  
                            _eusart1TxHead 003A                              _eusart1RxTail 0037  
                               __pbssBANK0 00E4                                 __pbssBANK1 0100  
                               __pbssBANK2 025D                              _eusart1TxTail 0039  
                      ?_keepAliveSignalLed 0001                         __size_of_eval_poly 00D6  
                          __CFG_PLLCFG$OFF 000000                                 _channelArr 0642  
                                ?_GroupDAC 00DA                                 __pnvCOMRAM 0046  
                                ?_GroupAdc 00DA             __size_of_InitAdcApplicationMgr 0006  
               __end_of_SendSystemStartAck 450A              __end_of_InitAdcApplicationMgr 4548  
                      __size_of_EepromRead 000A                         __end_of_MEMORY_ISR 455A  
                                ?_ResetMcu 0001                         _FlashReadCondition 21AE  
          ??_InitSystemApplicationManagers 0031                         __CFG_CCP2MX$PORTC1 000000  
                                  ?___ftge 0018                             FlashReadUart@j 0255  
         __end_of_TMR0_SetInterruptHandler 451E                                    ?___lmul 001A  
                                  ?___wmul 0018                                 ??_TMR0_ISR 0006  
                       __CFG_CCP3MX$PORTB5 000000                         SetChannelMode@data 002C  
                     ??_keepAliveSignalLed 0018                          __end_of_ZeroArray 43B8  
                                ?___altoft 0087                                    ?_memset 0018  
                        _ReadIntFromEeprom 2088                             ___lmul@product 0022  
                      ?_FlashReadCondition 0001         __size_of_IOCB5_SetInterruptHandler 000A  
                                ?___awtoft 0020                                  ?___ftpack 0018  
                             GroupAdc@data 00DA                           FlashReadUart@idx 0257  
                 GetUint16FromBitArray@res 001D                           FlashReadUart@val 0245  
               ?_IOCB5_SetInterruptHandler 0018                                  ?___lltoft 0020  
                        _synthLdRxArrayCnt 00E5                  __size_of_FLASH_WriteBlock 00BC  
                  __size_of_ADC_Initialize 0016                 FlashSampleWrite@sampleData 002D  
                           _FLASH_ReadByte 448A                                  ?___lwtoft 0020  
             __end_of_CheckFlashPrecentage 2FD2                         ?_ReadIntFromEeprom 00B1  
                                  ?_strtol 0026                           ?_DATAEE_ReadByte 0001  
               GetMcuFwVersion@compileData 0060                            _UpdateSynthFreq 23BA  
                          _Timer0_Sampling 00F3               __size_of_keepAliveSignalUart 000C  
                       SynthReadData@TxMsg 01B3                    __end_of_GetMcuFwVersion 0EA8  
                       SynthReadData@cType 01C6                                    _OSCCON2 000FD2  
                           ??_SetSynthOper 0031                                    _TBLPTRH 000FF7  
                                  _TBLPTRL 000FF6                                    _TBLPTRU 000FF8  
                                  _OSCTUNE 000F9B                                    _SPBRGH1 000FB0  
                        _synthLdTxArrayCnt 00E4                        ??_ReadIntFromEeprom 00B5  
                                  _DacInit 2A38                      GetIntFromUartData@num 007A  
                         GetMcuRunTime@idx 006D                               ??_AdcConvert 00B1  
                     ??_FlashReadCondition 0024                             _FlashEreaseMem 3BE8  
                         _FLASH_EraseBlock 4086             __size_of_GroupStatusAndVersion 0024  
                           _SwSpi_Data_Pin 3AE6                  _IOCB4_SetInterruptHandler 4528  
                     DATAEE_WriteByte@bAdd 0019              __end_of_GroupStatusAndVersion 42B2  
                  __end_of_Make32bitsArray 3A8E                                 ??_GroupDAC 0031  
                               ??_GroupAdc 0031                              _SetMcuRunTime 3D1E  
                       _GetIntFromUartData 1DE2                         FlashReadUart@TxMsg 0200  
                    GroupSynthesizers@data 00DA                                    __Hparam 0000  
                               ??_ResetMcu 002C                  __size_of_WriteUartMessage 0036  
                             ?_BlinkOkLeds 0001                                    __Lparam 0000  
                             _cntRegUpdate 00E6                      SendAckMessage@inGroup 0025  
                         ?_readUartMessage 0001                     GroupControlMcu@request 00DD  
                                ?_testLeds 0001                  __end_of_ReadIntFromEeprom 21AE  
                      ?_GetIntFromUartData 0066                            __size_of___ftge 0090  
                          __size_of___lmul 0056                                    ___ftadd 1AB4  
                                  ___awmod 371E                                    ___ftdiv 2788  
                                  ___ftneg 42B2                                    ___lldiv 34BE  
                          __size_of___wmul 0026                                    ___ftmul 25AA  
                                  ___llmod 37F8                                    ___ftsub 3D62  
                                  ___fttol 24B2                 FlashSampleWrite@rotateLeft 0062  
                             crc8@dataSize 001A                   __size_of_ClearMcuRunTime 0014  
                                  ___lwmod 3DA4                       AdcConvert@_adcResult 00B3  
                             __psmallconst 0600                            ??_SynthLdDetect 0031  
                               ??___altoft 008B                     __end_of_FLASH_ReadByte 449C  
                          __CFG_STVREN$OFF 000000                 SWSPI_Synth_send_bits@count 0084  
                    _mcuRunTimeIn5SecTicks 0128                                    _crcCalc 00EA  
                                  _channel 00F0                                    __pcinit 31D6  
                               ??___awtoft 0023                                 ??___ftpack 001D  
                        __end_of_eval_poly 2CD4                            __size_of_memset 002C  
                                  __ramtop 0600                    __size_of_SendAckMessage 0052  
                               ??___lltoft 0024                    __size_of_SetChannelMode 0030  
                                  __ptext0 3636                                    __ptext1 1520  
                                  __ptext2 41A4                                    __ptext3 401E  
                                  __ptext4 3E9A                                    __ptext5 433E  
                                  __ptext6 428E                                    __ptext7 40BA  
                                  __ptext8 3432                                    __ptext9 23BA  
                                  crc8@crc 001D                         __end_of_AdcConvert 132A  
                        DacSetValue@retVal 0091                                 ??___lwtoft 0023  
                                _T0CONbits 000FD5          __end_of_IOCB5_SetInterruptHandler 4528  
                                _IOCB4_ISR 431C                                  _IOCB5_ISR 42FA  
                        BlinkErrorLeds@idx 001C                            __size_of_strtol 01D6  
                    _OSCILLATOR_Initialize 44BA                               __size_of_abs 0028  
                                  _isalpha 41F4                               __size_of_exp 01F6  
                             __size_of_log 012A                                    _isdigit 435E  
                             __size_of_pow 0180                           ___awmod@dividend 0018  
                       _EUSART1_Initialize 3ED2                   ??_PIN_MANAGER_Initialize 001A  
                                  _isspace 421C                  StoreIntInEeprom@numOfByes 0026  
                                  _isupper 437C                                    _request 00EC  
                          GroupDAC@request 00DC                            ??_SynthReadData 0031  
                     ??_GetIntFromUartData 006E                     __end_of_FlashEreaseMem 3C3A  
               __size_of_SYSTEM_Initialize 001A                    ?_SwSpi_Set_Dac_Sync_Pin 0001  
                   __end_of_SwSpi_Data_Pin 3B3C                    StoreIntInEeprom@address 0025  
                                  _toupper 444E                       end_of_initialization 3266  
                                  exp@sign 009F                        ?_EUSART1_Initialize 0001  
                         ??_BlinkErrorLeds 0018                               ?_EepromWrite 001B  
                    _SWSPI_Synth_send_bits 2DA2                  __size_of_SwSpi_Set_CE_Pin 003C  
                    _GetUint16FromBitArray 36AA                             ?_SetMcuRunTime 0001  
                                  memset@c 001A                                    memset@n 001C  
                                  memset@p 001E                              __Lmediumconst 0000  
                          ___lldiv@divisor 001C                       __end_of_SetMcuSystem 4514  
                                  pow@sign 00AC                            ___lldiv@counter 0024  
                        ?_GroupFlashMemory 00DA                           AdcConvert@adcRes 00BE  
                       __end_of_SYNTH_REGS 0635                       UpdateSynthFreq@cType 008C  
                               ??_testLeds 002C                       SWSPI_send_word@datac 0086  
                               _rxMsgQueue 0187                                    postdec1 000FE5  
                                  postdec2 000FDD            ??_IOCB5_DefaultInterruptHandler 0001  
                       ??_GroupFlashMemory 0031                                    postinc0 000FEE  
                                  postinc2 000FDE                      __size_of_EUSART1_Read 0044  
                     SynthReadData@byteNum 01D4                        _InitRxMessageParams 41A4  
                              testLeds@idx 002D                    __end_of_UpdateSynthFreq 24B2  
                     __size_of_DacSetValue 009E                  __size_of_FlashSampleWrite 0100  
                   __size_of_GetMcuRunTime 00E4                       ??_EUSART1_Initialize 0018  
    __end_of_InitSystemApplicationManagers 444E     __size_of_InitSystemApplicationManagers 0016  
            _InitSystemApplicationManagers 4438                            ?_FLASH_ReadByte 0018  
                                  strtol@a 0061                                    strtol@c 0065  
                                  strtol@s 0026                   _TMR0_SetInterruptHandler 4514  
                                _PORTDbits 000F83                               ??_EepromRead 0019  
                         _StoreIntInEeprom 3F0A                                 ?_IOCB4_ISR 0001  
                               ?_IOCB5_ISR 0001                           ?_GetMcuFwVersion 0001  
                           ZeroArray@array 0020             __end_of_SwSpi_Set_Dac_Sync_Pin 43D4  
                             strtol@endptr 0028              FLASH_WriteBlock@flashWrBufPtr 0021  
                       GetMcuRunTime@TxMsg 0060                       ?_InitRxMessageParams 0001  
                          ?_FlashEreaseMem 0001                        EUSART1_Write@txData 0018  
                          ?_SwSpi_Data_Pin 0018                   __end_of_DATAEE_WriteByte 401E  
              __end_of_SWSPI_DAC_send_bits 3AE6                              ?_DacReadValue 00C8  
                     DacReadValue@dacIndex 00D0                   FLASH_EraseBlock@baseAddr 0018  
                         ?_Make32bitsArray 0018                                ___ftdiv@exp 0067  
                             _EUSART1_Read 3CDA                       _CheckFlashPrecentage 2F24  
                        FLASH_WriteBlock@i 002C                         __end_of_EepromRead 453C  
                         DacReadValue@data 00C8                                ___ftmul@exp 0072  
                  ?_SwSpi_Set_Synth_Le_Pin 0018                       __end_of_SetSynthOper 35BC  
               __size_of_ReadIntFromEeprom 0126                                  _FillArray 43D4  
             __end_of_INTERRUPT_Initialize 4552                             __end_of___ftge 3432  
                           __end_of___lmul 3BE8                             __end_of___wmul 428E  
                      GroupControlMcu@data 00DA                              __pidataCOMRAM 453C  
                        __size_of_TMR0_ISR 00AC                             _ADC_Initialize 4422  
                         _FLASH_WriteBlock 2E68                     ?_OSCILLATOR_Initialize 0001  
                           __end_of_memset 41A4                         InitSynth@EepromVal 00C8  
                               floor@expon 0095                              FillArray@size 0022  
                        ??_ClearMcuRunTime 0018                             __end_of_strtol 1AB4  
                      start_initialization 31D6                                 eval_poly@d 0087  
                               eval_poly@n 0089                                 eval_poly@x 0084  
                              _SynthRxOper 0044                           BlinkOkLeds@state 001B  
                 __size_of_TMR0_Initialize 0034                                 ldexp@value 008E  
                              _SynthTxOper 0045            __size_of_PIN_MANAGER_Initialize 0064  
                              __end_of_abs 41F4                      ??_InitRxMessageParams 0024  
                              __end_of_exp 1520                                __end_of_log 2088  
                              __end_of_pow 1DE2              GetUint16FromBitArray@bitarray 0018  
                 AdcConvert@_adcResult_347 00B9                                  _InitSynth 0EA8  
                           ??_DacReadValue 00CA                              _GetMcuRunTime 2870  
                   ?_SWSPI_Synth_send_bits 0025                            ??_SetMcuRunTime 0021  
                    __end_of_EUSART1_Write 3E22                     ?_GetUint16FromBitArray 0018  
                   __size_of_PLLInitialize 0026                 GetUint16FromBitArray@state 001F  
                               frexp@value 0018                            ___llmod@divisor 001C  
                            _Timer0_OneSec 00F1                      ?_CheckFlashPrecentage 0001  
                          ___llmod@counter 0020                        DATAEE_ReadByte@bAdd 0018  
                 __size_of_PIN_MANAGER_IOC 0010                     __size_of_SwSpi_Clk_Pin 0056  
                      SendAckMessage@TxMsg 0026             __end_of_SwSpi_Set_Synth_Le_Pin 3E9A  
                      _keepAliveSignalUart 44F2                          __size_of_GroupDAC 0034  
                         _WriteUartMessage 3FB2                          __size_of_GroupAdc 0020  
                   __size_of_FlashReadUart 0412                                   ??___ftge 001E  
                                 ??___lmul 0022                    SendAckMessage@inRequest 0024  
                                 ??___wmul 001C                  GetIntFromUartData@idxData 0086  
                        __size_of_ResetMcu 000E                       __size_of_BlinkOkLeds 005E  
                               ?_FillArray 0020                     __end_of_ADC_Initialize 4438  
                         ?_UpdateSynthFreq 008A                                __pdataBANK0 00F5  
                              __pdataBANK1 01D5                    SWSPI_DAC_send_bits@data 001A  
                                 ??_memset 001E                   __size_of_GroupControlMcu 0030  
              FLASH_EraseBlock@GIEBitValue 001C                             _SendAckMessage 3C3A  
                           _SetChannelMode 40EA                   __end_of_FLASH_EraseBlock 40BA  
                       _SendSystemStartAck 44FE                   __size_of_SWSPI_send_word 00AA  
    __end_of_IOCB5_DefaultInterruptHandler 455C     __size_of_IOCB5_DefaultInterruptHandler 0002  
            _IOCB5_DefaultInterruptHandler 455A                ??_IOCB5_SetInterruptHandler 001A  
                                 ??_strtol 002C                             _eusart1RxCount 00EF  
                              ??_IOCB4_ISR 0001                                ??_IOCB5_ISR 0001  
                        __size_of___altoft 007A                                  _ZeroArray 439A  
                          DacInit@dacInput 00CA                          __size_of___awtoft 0038  
                        __size_of___ftpack 00AE                       ?_keepAliveSignalUart 0001  
                        __size_of___lltoft 005C                                __pbssCOMRAM 0031  
                        __size_of___lwtoft 0024              __size_of_EUSART1_Transmit_ISR 0038  
                            __pcstackBANK0 0060                              __pcstackBANK1 01B3  
                            __pcstackBANK2 0200                               _isalpha$3318 001C  
                      ?_SendSystemStartAck 0001                                 ?_InitSynth 0001  
                             _isdigit$3321 0019                             ?_GetMcuRunTime 0001  
                      DacSetValue@dacIndex 0090                             BlinkOkLeds@idx 001C  
                                 ?_DacInit 0001                      __size_of_SetMcuSystem 000A  
                         _SwSpi_Set_CE_Pin 3E22               __size_of_EUSART1_Receive_ISR 002E  
            SWSPI_Synth_send_bits@bitArray 0060                    _DAC_DEFAULT_INIT_VALUES 064B  
                     __size_of_EepromWrite 000E                      _TMR0_InterruptHandler 01E2  
                                __pnvBANK1 01E2                          SetSynthOper@cType 00CF  
                 __size_of_TMR0_StartTimer 0004                     _PIN_MANAGER_Initialize 385E  
                     ??_SendSystemStartAck 002C                      _InitAdcApplicationMgr 4542  
                                __pintcode 0008                     __end_of_SendAckMessage 3C8C  
                                __ptext100 42B2                                  __ptext101 2788  
                                __ptext110 44D6                                  __ptext102 3F42  
                                __ptext111 411A                                  __ptext103 39DA  
                                __ptext120 4556                                  __ptext104 42D6  
                                __ptext121 3F7A                                  __ptext113 3080  
                                __ptext105 2FD2                                  __ptext122 414A  
                                __ptext114 3DA4                                  __ptext106 36AA  
                                __ptext123 0000                                  __ptext115 449C  
                                __ptext107 22BA                                  __ptext116 42FA  
                                __ptext108 2E68                                  __ptext117 455A  
                                __ptext109 4086                                   ?___ftadd 0078  
                                __ptext118 431C                                  __ptext119 455C  
                                 ?___awmod 0018                                   ?___ftdiv 0029  
                   __end_of_SetChannelMode 411A                                   ?___ftneg 0018  
                                 ?___lldiv 0018                                   ?___ftmul 0069  
                                 ?___llmod 0018                                   ?___ftsub 0084  
                                 ?___fttol 0078                           _FlashSampleWrite 22BA  
                                 ?___lwmod 0001                            ?_ADC_Initialize 0001  
                         _Timer0_KeepAlive 00F2                          __size_of_testLeds 006A  
                            _PLLInitialize 4242                __size_of_keepAliveSignalLed 0018  
             ??_INTERRUPT_InterruptManager 0006                           __CFG_PRICLKEN$ON 000000  
                               ?_ZeroArray 0020                                __smallconst 0600  
                    ??_keepAliveSignalUart 002C                                   _BAUDCON1 000FB8  
                            _SwSpi_Clk_Pin 3B3C                                   ?_isalpha 0001  
                                 ?_isdigit 0001                                  _eval_poly 2BFE  
                      BlinkErrorLeds@state 001B                                   ?_isspace 0001  
                             _SetMcuSystem 450A                          FlashReadUart@data 0087  
                                 ?_isupper 0001                              _FlashReadUart 06A6  
                           __size_of_make8 005C                             __size_of_floor 00E2  
                           __size_of_ldexp 00CE                             __size_of_frexp 0090  
                 __size_of_DATAEE_ReadByte 0014                                   ?_toupper 0001  
                     _INTERRUPT_Initialize 454E             FLASH_WriteBlock@blockStartAddr 0027  
              __size_of_FlashReadCondition 010C                  _IOCB5_SetInterruptHandler 451E  
                        ??_TMR0_Initialize 001A                     ??_CheckFlashPrecentage 0078  
                           ___wmul@product 001C                                   _IOCBbits 000F62  
                                 _LATAbits 000F89                                   _LATBbits 000F8A  
                                 _LATCbits 000F8B                                   _LATDbits 000F8C  
                    __size_of_SetSynthOper 007C                   __end_of_StoreIntInEeprom 3F42  
           FlashReadUart@numOfSampleToRead 025B                                   _PIE1bits 000F9D  
                                 _PIE2bits 000FA0                      _GroupStatusAndVersion 428E  
                        _GroupSynthesizers 3432        __size_of_INTERRUPT_InterruptManager 00D4  
               ??_TMR0_SetInterruptHandler 001A                       Make32bitsArray@array 0018  
                                 _PIR1bits 000F9E                           ??_FLASH_ReadByte 001C  
                                 _PIR2bits 000FA1                                  _rxMsgData 0173  
                                 i2u604_48 432A                                   i2u614_40 3DBE  
                                 i2u606_48 4308                        UpdateSynthFreq@data 008A  
                      SWSPI_send_word@data 0029                         ?_GroupSynthesizers 00DA  
                                 _RCONbits 000FD0                           __CFG_WDTPS$16384 000000  
                      SynthReadData@regNum 01D3                                  make8@data 0018  
                              ??_FillArray 0025                                   _TMR0_ISR 3080  
                          ?_SendAckMessage 0024                            ?_SetChannelMode 002C  
                           ?_PLLInitialize 0001                          ??_PIN_MANAGER_IOC 0001  
                     __end_of_DacReadValue 2A38                        ??_GroupSynthesizers 0031  
                   GetIntFromUartData@data 0066                    SWSPI_send_word@dataSize 002D  
                               _ADCON0bits 000FC2                      __end_of_SynthLdDetect 2788  
                 __size_of_readUartMessage 01E0                          ___wmul@multiplier 0018  
                           ?_SwSpi_Clk_Pin 0018                           ??_FlashEreaseMem 002C  
                       __end_of_channelArr 064B                           ??_SwSpi_Data_Pin 0019  
                __size_of_GroupFlashMemory 0038                                 ?_eval_poly 0084  
                           ?_FlashReadUart 0087                          ??_GroupControlMcu 0031  
                          ??_GetMcuRunTime 0025                      DATAEE_WriteByte@bData 0018  
                             _isspace$3324 0019                                ??_InitSynth 0031  
                        ??_SWSPI_send_word 002E                                 DacInit@idx 00CC  
                             _SetSynthOper 3540                                 _DAC_ADDRES 0653  
              __size_of_GetIntFromUartData 017C                          ___lmul@multiplier 001A  
                  FlashReadCondition@TxMsg 0028                                _INTCON2bits 000FF1  
                    __end_of_SynthReadData 18DE                                  copy_data0 31EA  
                                copy_data1 320A                                  copy_data2 322A  
                    ?_INTERRUPT_Initialize 0001                           __size_of_DacInit 00E4  
                        ?_DATAEE_WriteByte 0018                  __end_of_GroupSynthesizers 34BE  
                    EUSART1_Read@readValue 0019                   __end_of_FLASH_WriteBlock 2F24  
                                 _GroupDAC 401E                         ??_DATAEE_WriteByte 0019  
                                 _GroupAdc 433E                                  frexp@eptr 001B  
                               _EECON1bits 000FA6                             _synthLdRxArray 01A7  
                                 __Hrparam 0000                     ?_InitAdcApplicationMgr 0001  
                           _synthLdTxArray 019B                                   _ResetMcu 44AC  
                            ??_DacSetValue 008C                                _readAddress 00F5  
                                 __Lrparam 0000               SynthReadData@eepromDataArray 01C7  
                        _ADC_GetConversion 411A                        FlashReadUart@offset 0259  
                          _ClearMcuRunTime 4476                          __CFG_P2BMX$PORTD2 000000  
                  ??_OSCILLATOR_Initialize 0018                         ?_ADC_GetConversion 0018  
                        ??_TMR0_StartTimer 0018                           __size_of___ftadd 01AE  
                         __size_of___awmod 0070                           __size_of___ftdiv 00E8  
                     _numOfValidateSamples 0031                           __size_of___ftneg 0024  
                         __size_of___lldiv 0082                                   ___altoft 35BC  
                         __size_of___ftmul 00F6                           __size_of___llmod 0066  
                         __size_of___ftsub 0042                           __size_of___fttol 00F8  
              __size_of_EUSART1_Initialize 0038                           __size_of___lwmod 0042  
                          GroupAdc@request 00DC                                   ___awtoft 3F42  
                            crc8@dataArray 0018                                   ___ftpack 2FD2  
                         _numOfReadSamples 003C                                   ___lltoft 39DA  
                        _FLASH_IsWriteDone 44D6                     _IOCB4_InterruptHandler 01E6  
                      WriteUartMessage@idx 001E                                   ___lwtoft 42D6  
                              ??_ZeroArray 0024                   GetMcuRunTime@tempRunTime 0069  
                      ??_ADC_GetConversion 001A                                   _exp$3596 009A  
                             _isupper$3327 0019                         ?_FLASH_IsWriteDone 0001  
                                 _dataSize 00EB                      SwSpi_Clk_Pin@cPinMode 0018  
                 __end_of_WriteUartMessage 3FE8                           __size_of_isalpha 0028  
                                 _crcGiven 00E9                           __size_of_isdigit 001E  
                  ??_SWSPI_Synth_send_bits 0029                     SwSpi_Data_Pin@cPinMode 0018  
                  ??_GetUint16FromBitArray 001A             ?_IOCB4_DefaultInterruptHandler 0001  
                         __size_of_isspace 0026                                   __ptext10 1700  
                                 __ptext11 3540                                   __ptext20 3274  
                                 __ptext12 2870                                   __ptext21 1DE2  
                                 __ptext13 34BE                                   __ptext30 44AC  
                                 __ptext22 18DE                                   __ptext14 0AB8  
                                 __ptext31 40EA                                   __ptext23 444E  
                                 __ptext15 06A6                                   __ptext40 4052  
                                 __ptext32 3CDA                                   __ptext24 421C  
                                 __ptext16 41CC                                   __ptext41 4514  
                                 __ptext33 44F2                                   __ptext25 435E  
                                 __ptext17 448A                                   __ptext50 37F8  
                                 __ptext42 385E                                   __ptext34 440A  
                                 __ptext26 41F4                                   __ptext18 21AE  
                                 __ptext51 44FE                                   __ptext43 451E  
                                 __ptext35 26A0                                   __ptext27 437C  
                                 __ptext19 3BE8                                   __ptext60 0EA8  
                                 __ptext52 3C3A                                   __ptext44 4528  
                                 __ptext36 371E                                   __ptext28 2954  
                                 __ptext61 3E22                                   __ptext53 3C8C  
                                 __ptext45 44BA                                   __ptext37 38C2  
                                 __ptext29 378E                                   __ptext70 43B8  
                                 __ptext62 4542                                   __ptext54 439A  
                                 __ptext46 454E                                   __ptext38 450A  
                                 __ptext71 2DA2                                   __ptext63 2A38  
                                 __ptext55 3FB2                                   __ptext47 3ED2  
                                 __ptext39 43F0                                   __ptext80 4532  
                                 __ptext72 3A36                                   __ptext64 3F0A  
                                 __ptext56 3DE6                                   __ptext48 4422  
                                 __ptext81 4462                                   __ptext73 43D4  
                                 __ptext65 44C8                                   __ptext57 4438  
                                 __ptext49 3D1E                                   __ptext90 2B1C  
                                 __ptext82 4476                                   __ptext74 4178  
                                 __ptext66 3FE8                                   __ptext58 4552  
                                 __ptext91 3312                                   __ptext83 2F24  
                                 __ptext75 3A8E                                   __ptext67 312C  
                                 __ptext59 4242                                   __ptext92 24B2  
                                 __ptext84 3920                                   __ptext76 3AE6  
                                 __ptext68 397E                                   __ptext93 33A2  
                                 __ptext85 111E                                   __ptext77 3B3C  
                                 __ptext69 3E5E                                   __ptext94 35BC  
                                 __ptext86 1C62                                   __ptext78 2088  
                                 __ptext95 2BFE                                   __ptext87 1F5E  
                                 __ptext79 3B92                                   __ptext96 4268  
                                 __ptext88 132A                                   __ptext97 25AA  
                                 __ptext89 2CD4                                   __ptext98 3D62  
                                 __ptext99 1AB4                           __size_of_isupper 001E  
             SWSPI_Synth_send_bits@phrType 0085                   SwSpi_Set_CE_Pin@cPinMode 0018  
                                 _pow$3594 00A6                                   _pow$3595 00A9  
                      ??_FLASH_IsWriteDone 0018                DATAEE_WriteByte@GIEBitValue 001A  
                         __size_of_toupper 0014                   __size_of_GetMcuFwVersion 03F0  
                     _GetMcuFwVersion$2693 0078                       _GetMcuFwVersion$2689 0076  
                            __size_of_crc8 004E                              __size_of_main 0074  
                   ?_GroupStatusAndVersion 00DA                       __end_of_SYNTH_ADDRES 0642  
                                 _msgCount 00E8               _TMR0_DefaultInterruptHandler 000000  
                        ??_DATAEE_ReadByte 0018                  __end_of_ADC_GetConversion 414A  
             __size_of_SWSPI_DAC_send_bits 0058                        Make32bitsArray@data 001A  
                       SWSPI_send_word@idx 0087                                _groupsArray 01D5  
                          ??_PLLInitialize 0031                                   _testLeds 378E  
                  __size_of_BlinkErrorLeds 005E                                   int$flags 0048  
                 __size_of_Make32bitsArray 0058                                 strtol@base 002A  
                               strtol@sign 0060                  __end_of_FLASH_IsWriteDone 44E4  
       __end_of_INTERRUPT_InterruptManager 00DC                 _INTERRUPT_InterruptManager 0008  
                       AdcConvert@ldRxSate 00B5                         AdcConvert@ldTxSate 00B7  
                          EepromWrite@data 001B                            ??_SwSpi_Clk_Pin 0019  
                      __end_of_DacSetValue 3312                        _EUSART1_Receive_ISR 414A  
                 __end_of_SwSpi_Set_CE_Pin 3E5E                          ?_FLASH_EraseBlock 0018  
              __end_of_InitRxMessageParams 41CC                                   exp@coeff 0657  
                               _MEMORY_ISR 4556                            ??_FlashReadUart 0089  
                                 log@coeff 0675                     SWSPI_send_word@phrType 0089  
                       ??_FLASH_EraseBlock 001C                                 _INTCONbits 000FF2  
                              ??_eval_poly 002F                                _sampleArray 0133  
                              _sampleCount 012E                                   isalpha@c 001D  
                                 isdigit@c 001A                     ??_INTERRUPT_Initialize 0018  
                                 memset@p1 0018                          ??_readUartMessage 00DD  
                 __end_of_FlashSampleWrite 23BA                                   intlevel2 0000  
                     ?_EUSART1_Receive_ISR 0001                      __end_of_SetMcuRunTime 3D62  
                         ___lwmod@dividend 0001                 __size_of_GroupSynthesizers 008C  
                                 isspace@c 001A                           ___lldiv@dividend 0018  
                    SynthReadData@data_984 01C5                    ?_PIN_MANAGER_Initialize 0001  
                  __end_of_ClearMcuRunTime 448A                                 _RCSTA1bits 000FAB  
                                 isupper@c 001A                   ReadIntFromEeprom@address 00C2  
             __end_of_EUSART1_Transmit_ISR 3FB2                              ??_BlinkOkLeds 0018  
                         ??_ADC_Initialize 0018                      __size_of_DacReadValue 00E4  
                       Make32bitsArray@idx 0020                              AdcConvert@idx 00C0  
                            _isReWriteDone 00E7                      UpdateSynthFreq@retVal 008D  
                     SwSpi_Clk_Pin@phrType 0019                      SwSpi_Data_Pin@phrType 0019  
                  SwSpi_Set_CE_Pin@phrType 0019                     __size_of_EUSART1_Write 003C  
                 ??_SwSpi_Set_Dac_Sync_Pin 0018                          EepromRead@address 0019  
                         ___lldiv@quotient 0020                           _GroupFlashMemory 3E9A  
                          ___lwmod@divisor 0003                            _TMR0_Initialize 4052  
                          ___lwmod@counter 0005                   __size_of_UpdateSynthFreq 00F8  
                                 toupper@c 0018                 ReadIntFromEeprom@numOfByes 00B1  
                        __CFG_T3CMX$PORTC0 000000                    ReadIntFromEeprom@retVal 00C3  
                            ??_EepromWrite 001C                                 _AdcConvert 111E  
                    ??_EUSART1_Receive_ISR 0001             __end_of_PIN_MANAGER_Initialize 38C2  
                             _DacReadValue 2954               GetIntFromUartData@dataRegArr 0070  
                        __CFG_FOSC$INTIO67 000000                     _IOCB5_InterruptHandler 01E4  
                          _PIN_MANAGER_IOC 449C                          ?_StoreIntInEeprom 0021  
                         ??_SendAckMessage 0025                 __size_of_ADC_GetConversion 0030  
                         ??_SetChannelMode 002E                         ??_StoreIntInEeprom 0028  
                              _DacSetValue 3274  

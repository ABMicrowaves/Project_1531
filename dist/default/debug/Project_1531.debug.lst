

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Mar 19 13:02:26 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    12                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    17                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    20                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	text0,global,reloc=2,class=CODE,delta=1
    22                           	psect	text1,global,reloc=2,class=CODE,delta=1
    23                           	psect	text2,global,reloc=2,class=CODE,delta=1
    24                           	psect	text3,global,reloc=2,class=CODE,delta=1
    25                           	psect	text4,global,reloc=2,class=CODE,delta=1
    26                           	psect	text5,global,reloc=2,class=CODE,delta=1
    27                           	psect	text6,global,reloc=2,class=CODE,delta=1
    28                           	psect	text7,global,reloc=2,class=CODE,delta=1
    29                           	psect	text8,global,reloc=2,class=CODE,delta=1
    30                           	psect	text9,global,reloc=2,class=CODE,delta=1
    31                           	psect	text10,global,reloc=2,class=CODE,delta=1
    32                           	psect	text11,global,reloc=2,class=CODE,delta=1
    33                           	psect	text12,global,reloc=2,class=CODE,delta=1
    34                           	psect	text13,global,reloc=2,class=CODE,delta=1
    35                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text20,global,reloc=2,class=CODE,delta=1
    42                           	psect	text21,global,reloc=2,class=CODE,delta=1
    43                           	psect	text22,global,reloc=2,class=CODE,delta=1
    44                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text24,global,reloc=2,class=CODE,delta=1
    46                           	psect	text25,global,reloc=2,class=CODE,delta=1
    47                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text27,global,reloc=2,class=CODE,delta=1
    49                           	psect	text28,global,reloc=2,class=CODE,delta=1
    50                           	psect	text29,global,reloc=2,class=CODE,delta=1
    51                           	psect	text30,global,reloc=2,class=CODE,delta=1
    52                           	psect	text31,global,reloc=2,class=CODE,delta=1
    53                           	psect	text32,global,reloc=2,class=CODE,delta=1
    54                           	psect	text33,global,reloc=2,class=CODE,delta=1
    55                           	psect	text34,global,reloc=2,class=CODE,delta=1
    56                           	psect	text35,global,reloc=2,class=CODE,delta=1
    57                           	psect	text36,global,reloc=2,class=CODE,delta=1
    58                           	psect	text37,global,reloc=2,class=CODE,delta=1
    59                           	psect	text38,global,reloc=2,class=CODE,delta=1
    60                           	psect	text39,global,reloc=2,class=CODE,delta=1
    61                           	psect	text40,global,reloc=2,class=CODE,delta=1
    62                           	psect	text41,global,reloc=2,class=CODE,delta=1
    63                           	psect	text42,global,reloc=2,class=CODE,delta=1
    64                           	psect	text43,global,reloc=2,class=CODE,delta=1
    65                           	psect	text44,global,reloc=2,class=CODE,delta=1
    66                           	psect	text45,global,reloc=2,class=CODE,delta=1
    67                           	psect	text46,global,reloc=2,class=CODE,delta=1
    68                           	psect	text47,global,reloc=2,class=CODE,delta=1
    69                           	psect	text48,global,reloc=2,class=CODE,delta=1
    70                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text50,global,reloc=2,class=CODE,delta=1
    72                           	psect	text51,global,reloc=2,class=CODE,delta=1
    73                           	psect	text52,global,reloc=2,class=CODE,delta=1
    74                           	psect	text53,global,reloc=2,class=CODE,delta=1
    75                           	psect	text54,global,reloc=2,class=CODE,delta=1
    76                           	psect	text55,global,reloc=2,class=CODE,delta=1
    77                           	psect	text56,global,reloc=2,class=CODE,delta=1
    78                           	psect	text57,global,reloc=2,class=CODE,delta=1
    79                           	psect	text58,global,reloc=2,class=CODE,delta=1
    80                           	psect	text59,global,reloc=2,class=CODE,delta=1
    81                           	psect	text60,global,reloc=2,class=CODE,delta=1
    82                           	psect	text61,global,reloc=2,class=CODE,delta=1
    83                           	psect	text62,global,reloc=2,class=CODE,delta=1
    84                           	psect	text63,global,reloc=2,class=CODE,delta=1
    85                           	psect	text64,global,reloc=2,class=CODE,delta=1
    86                           	psect	text65,global,reloc=2,class=CODE,delta=1
    87                           	psect	text66,global,reloc=2,class=CODE,delta=1
    88                           	psect	text67,global,reloc=2,class=CODE,delta=1
    89                           	psect	text68,global,reloc=2,class=CODE,delta=1
    90                           	psect	text69,global,reloc=2,class=CODE,delta=1,group=1
    91                           	psect	text70,global,reloc=2,class=CODE,delta=1
    92                           	psect	text71,global,reloc=2,class=CODE,delta=1
    93                           	psect	text72,global,reloc=2,class=CODE,delta=1
    94                           	psect	text73,global,reloc=2,class=CODE,delta=1
    95                           	psect	text74,global,reloc=2,class=CODE,delta=1
    96                           	psect	text75,global,reloc=2,class=CODE,delta=1,group=1
    97                           	psect	text76,global,reloc=2,class=CODE,delta=1
    98                           	psect	text77,global,reloc=2,class=CODE,delta=1
    99                           	psect	text78,global,reloc=2,class=CODE,delta=1
   100                           	psect	text79,global,reloc=2,class=CODE,delta=1
   101                           	psect	text80,global,reloc=2,class=CODE,delta=1
   102                           	psect	text81,global,reloc=2,class=CODE,delta=1
   103                           	psect	text82,global,reloc=2,class=CODE,delta=1
   104                           	psect	text83,global,reloc=2,class=CODE,delta=1,group=1
   105                           	psect	text84,global,reloc=2,class=CODE,delta=1,group=1
   106                           	psect	text85,global,reloc=2,class=CODE,delta=1,group=1
   107                           	psect	text86,global,reloc=2,class=CODE,delta=1,group=1
   108                           	psect	text87,global,reloc=2,class=CODE,delta=1,group=1
   109                           	psect	text88,global,reloc=2,class=CODE,delta=1,group=1
   110                           	psect	text89,global,reloc=2,class=CODE,delta=1,group=1
   111                           	psect	text90,global,reloc=2,class=CODE,delta=1,group=1
   112                           	psect	text91,global,reloc=2,class=CODE,delta=1,group=1
   113                           	psect	text92,global,reloc=2,class=CODE,delta=1,group=1
   114                           	psect	text93,global,reloc=2,class=CODE,delta=1,group=1
   115                           	psect	text94,global,reloc=2,class=CODE,delta=1,group=1
   116                           	psect	text95,global,reloc=2,class=CODE,delta=1,group=1
   117                           	psect	text96,global,reloc=2,class=CODE,delta=1,group=1
   118                           	psect	text97,global,reloc=2,class=CODE,delta=1,group=1
   119                           	psect	text98,global,reloc=2,class=CODE,delta=1,group=1
   120                           	psect	text99,global,reloc=2,class=CODE,delta=1,group=1
   121                           	psect	text100,global,reloc=2,class=CODE,delta=1,group=1
   122                           	psect	text101,global,reloc=2,class=CODE,delta=1,group=1
   123                           	psect	text102,global,reloc=2,class=CODE,delta=1,group=1
   124                           	psect	text103,global,reloc=2,class=CODE,delta=1
   125                           	psect	text104,global,reloc=2,class=CODE,delta=1
   126                           	psect	text105,global,reloc=2,class=CODE,delta=1
   127                           	psect	text106,global,reloc=2,class=CODE,delta=1
   128                           	psect	text107,global,reloc=2,class=CODE,delta=1
   129                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   130                           	psect	text109,global,reloc=2,class=CODE,delta=1
   131                           	psect	text110,global,reloc=2,class=CODE,delta=1,group=1
   132                           	psect	text111,global,reloc=2,class=CODE,delta=1
   133                           	psect	text112,global,reloc=2,class=CODE,delta=1
   134                           	psect	text113,global,reloc=2,class=CODE,delta=1
   135                           	psect	text114,global,reloc=2,class=CODE,delta=1
   136                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   137                           	psect	text115,global,reloc=2,class=CODE,delta=1
   138                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   139                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   140  0000                     
   141                           ; Version 1.45
   142                           ; Generated 16/11/2017 GMT
   143                           ; 
   144                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   145                           ; All rights reserved.
   146                           ; 
   147                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   148                           ; 
   149                           ; Redistribution and use in source and binary forms, with or without modification, are
   150                           ; permitted provided that the following conditions are met:
   151                           ; 
   152                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   153                           ;        conditions and the following disclaimer.
   154                           ; 
   155                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   156                           ;        of conditions and the following disclaimer in the documentation and/or other
   157                           ;        materials provided with the distribution.
   158                           ; 
   159                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   160                           ;        software without specific prior written permission.
   161                           ; 
   162                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   163                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   164                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   165                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   166                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   167                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   168                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   169                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   170                           ; 
   171                           ; 
   172                           ; Code-generator required, PIC18F45K22 Definitions
   173                           ; 
   174                           ; SFR Addresses
   175  0000                     
   176 ;; Function _TMR0_DefaultInterruptHandler is unused but had its address taken
   177  0000                     
   178                           	psect	idataCOMRAM
   179  003C16                     __pidataCOMRAM:
   180                           	opt stack 0
   181                           
   182                           ;initializer for _writeAddress
   183  003C16  4000               	dw	16384
   184  003C18  0000               	dw	0
   185                           
   186                           ;initializer for _SynthRxOper
   187  003C1A  01                 	db	1
   188                           
   189                           ;initializer for _SynthTxOper
   190  003C1B  01                 	db	1
   191                           
   192                           	psect	idataBANK0
   193  003C1C                     __pidataBANK0:
   194                           	opt stack 0
   195                           
   196                           ;initializer for _readAddress
   197  003C1C  4000               	dw	16384
   198  003C1E  0000               	dw	0
   199                           
   200                           	psect	idataBANK1
   201  003BB0                     __pidataBANK1:
   202                           	opt stack 0
   203                           
   204                           ;initializer for _groupsArray
   205  003BB0  DC                 	db	low _GroupControlMcu
   206  003BB1  37                 	db	high _GroupControlMcu
   207  003BB2  8A                 	db	low _GroupStatusAndVersion
   208  003BB3  39                 	db	high _GroupStatusAndVersion
   209  003BB4  94                 	db	low _GroupAdc
   210  003BB5  33                 	db	high _GroupAdc
   211  003BB6  46                 	db	low _GroupSynthesizers
   212  003BB7  2C                 	db	high _GroupSynthesizers
   213  003BB8  24                 	db	low _GroupFlashMemory
   214  003BB9  34                 	db	high _GroupFlashMemory
   215  003BBA  F6                 	db	low _GroupDAC
   216  003BBB  39                 	db	high _GroupDAC
   217                           
   218                           	psect	smallconst
   219  000600                     __psmallconst:
   220                           	opt stack 0
   221  000600  00                 	db	0
   222  000601                     _SYNTH_REGS:
   223                           	opt stack 0
   224  000601  041C               	dw	1052
   225  000603  0001               	dw	1
   226  000605  300B               	dw	12299
   227  000607  0061               	dw	97
   228  000609  193A               	dw	6458
   229  00060B  00C0               	dw	192
   230  00060D  FCC9               	dw	64713
   231  00060F  1110               	dw	4368
   232  000611  0428               	dw	1064
   233  000613  102D               	dw	4141
   234  000615  00E7               	dw	231
   235  000617  1200               	dw	4608
   236  000619  6076               	dw	24694
   237  00061B  3500               	dw	13568
   238  00061D  0025               	dw	37
   239  00061F  0080               	dw	128
   240  000621  8384               	dw	33668
   241  000623  3000               	dw	12288
   242  000625  0003               	dw	3
   243  000627  0000               	dw	0
   244  000629  0012               	dw	18
   245  00062B  0000               	dw	0
   246  00062D  0001               	dw	1
   247  00062F  0C00               	dw	3072
   248  000631  0680               	dw	1664
   249  000633  0020               	dw	32
   250  000635                     __end_of_SYNTH_REGS:
   251                           	opt stack 0
   252  000635                     _SYNTH_ADDRES:
   253                           	opt stack 0
   254  000635  04                 	db	4
   255  000636  08                 	db	8
   256  000637  0C                 	db	12
   257  000638  00                 	db	0
   258  000639  10                 	db	16
   259  00063A  00                 	db	0
   260  00063B  14                 	db	20
   261  00063C  00                 	db	0
   262  00063D  00                 	db	0
   263  00063E  00                 	db	0
   264  00063F  18                 	db	24
   265  000640  00                 	db	0
   266  000641  00                 	db	0
   267  000642                     __end_of_SYNTH_ADDRES:
   268                           	opt stack 0
   269  000642                     _DAC_DEFAULT_INIT_VALUES:
   270                           	opt stack 0
   271  000642  2344               	dw	9028
   272  000644  6344               	dw	25412
   273  000646  A344               	dw	41796
   274  000648  E344               	dw	58180
   275  00064A                     __end_of_DAC_DEFAULT_INIT_VALUES:
   276                           	opt stack 0
   277  00064A                     _channelArr:
   278                           	opt stack 0
   279  00064A  07                 	db	7
   280  00064B  06                 	db	6
   281  00064C  05                 	db	5
   282  00064D  04                 	db	4
   283  00064E  19                 	db	25
   284  00064F  0A                 	db	10
   285  000650  0D                 	db	13
   286  000651                     __end_of_channelArr:
   287                           	opt stack 0
   288  000651                     _DAC_ADDRES:
   289                           	opt stack 0
   290  000651  02                 	db	2
   291  000652  04                 	db	4
   292  000653  06                 	db	6
   293  000654  08                 	db	8
   294  000655                     __end_of_DAC_ADDRES:
   295                           	opt stack 0
   296  000655                     exp@coeff:
   297                           	opt stack 0
   298  000655  00                 	db	0
   299  000656  80                 	db	128
   300  000657  3F                 	db	63
   301  000658  72                 	db	114
   302  000659  31                 	db	49
   303  00065A  3F                 	db	63
   304  00065B  FE                 	db	254
   305  00065C  75                 	db	117
   306  00065D  3E                 	db	62
   307  00065E  58                 	db	88
   308  00065F  63                 	db	99
   309  000660  3D                 	db	61
   310  000661  95                 	db	149
   311  000662  1D                 	db	29
   312  000663  3C                 	db	60
   313  000664  C5                 	db	197
   314  000665  AE                 	db	174
   315  000666  3A                 	db	58
   316  000667  79                 	db	121
   317  000668  21                 	db	33
   318  000669  39                 	db	57
   319  00066A  94                 	db	148
   320  00066B  80                 	db	128
   321  00066C  37                 	db	55
   322  00066D  93                 	db	147
   323  00066E  A7                 	db	167
   324  00066F  35                 	db	53
   325  000670  56                 	db	86
   326  000671  15                 	db	21
   327  000672  34                 	db	52
   328  000673                     __end_ofexp@coeff:
   329                           	opt stack 0
   330  000673                     log@coeff:
   331                           	opt stack 0
   332  000673  00                 	db	0
   333  000674  00                 	db	0
   334  000675  00                 	db	0
   335  000676  00                 	db	0
   336  000677  80                 	db	128
   337  000678  3F                 	db	63
   338  000679  F0                 	db	240
   339  00067A  FF                 	db	255
   340  00067B  BE                 	db	190
   341  00067C  E2                 	db	226
   342  00067D  A9                 	db	169
   343  00067E  3E                 	db	62
   344  00067F  83                 	db	131
   345  000680  76                 	db	118
   346  000681  BE                 	db	190
   347  000682  AE                 	db	174
   348  000683  2B                 	db	43
   349  000684  3E                 	db	62
   350  000685  3C                 	db	60
   351  000686  C3                 	db	195
   352  000687  BD                 	db	189
   353  000688  D2                 	db	210
   354  000689  13                 	db	19
   355  00068A  3D                 	db	61
   356  00068B  78                 	db	120
   357  00068C  D3                 	db	211
   358  00068D  BB                 	db	187
   359  00068E                     __end_oflog@coeff:
   360                           	opt stack 0
   361  00068E                     STR_1:
   362                           
   363                           ; BSR set to: 0
   364  00068E  4D                 	db	77	;'M'
   365  00068F  61                 	db	97	;'a'
   366  000690  72                 	db	114	;'r'
   367  000691  20                 	db	32
   368  000692  31                 	db	49	;'1'
   369  000693  39                 	db	57	;'9'
   370  000694  20                 	db	32
   371  000695  32                 	db	50	;'2'
   372  000696  30                 	db	48	;'0'
   373  000697  31                 	db	49	;'1'
   374  000698  38                 	db	56	;'8'
   375  000699  00                 	db	0
   376  00069A                     STR_2:
   377                           
   378                           ; BSR set to: 0
   379  00069A  31                 	db	49	;'1'
   380  00069B  33                 	db	51	;'3'
   381  00069C  3A                 	db	58	;':'
   382  00069D  30                 	db	48	;'0'
   383  00069E  32                 	db	50	;'2'
   384  00069F  3A                 	db	58	;':'
   385  0006A0  32                 	db	50	;'2'
   386  0006A1  31                 	db	49	;'1'
   387  0006A2  00                 	db	0
   388                           
   389                           ; #config settings
   390  0006A3  00                 	db	0	; dummy byte at the end
   391  0000                     
   392                           	psect	nvCOMRAM
   393  000046                     __pnvCOMRAM:
   394                           	opt stack 0
   395  000046                     _timer0ReloadVal:
   396                           	opt stack 0
   397  000046                     	ds	2
   398                           
   399                           	psect	nvBANK1
   400  0001EF                     __pnvBANK1:
   401                           	opt stack 0
   402  0001EF                     _TMR0_InterruptHandler:
   403                           	opt stack 0
   404  0001EF                     	ds	2
   405  0001F1                     _eusart1TxBufferRemaining:
   406                           	opt stack 0
   407  0001F1                     	ds	1
   408  0000                     _ANSELA	set	3896
   409  0000                     _ANSELE	set	3900
   410  0000                     _ANSELD	set	3899
   411  0000                     _ANSELB	set	3897
   412  0000                     _ANSELC	set	3898
   413  0000                     _ADCON0bits	set	4034
   414  0000                     _ADRESH	set	4036
   415  0000                     _ADRESL	set	4035
   416  0000                     _ADCON2	set	4032
   417  0000                     _ADCON1	set	4033
   418  0000                     _ADCON0	set	4034
   419  0000                     _T0CONbits	set	4053
   420  0000                     _T0CON	set	4053
   421  0000                     _TMR0L	set	4054
   422  0000                     _TMR0H	set	4055
   423  0000                     _EEDATA	set	4008
   424  0000                     _EEADR	set	4009
   425  0000                     _EECON2	set	4007
   426  0000                     _EECON1bits	set	4006
   427  0000                     _TABLAT	set	4085
   428  0000                     _TBLPTRL	set	4086
   429  0000                     _TBLPTRH	set	4087
   430  0000                     _TBLPTRU	set	4088
   431  0000                     _INTCON2bits	set	4081
   432  0000                     _WPUB	set	3937
   433  0000                     _TRISD	set	3989
   434  0000                     _TRISC	set	3988
   435  0000                     _TRISB	set	3987
   436  0000                     _TRISA	set	3986
   437  0000                     _TRISE	set	3990
   438  0000                     _LATC	set	3979
   439  0000                     _LATB	set	3978
   440  0000                     _LATA	set	3977
   441  0000                     _LATD	set	3980
   442  0000                     _LATE	set	3981
   443  0000                     _RCREG1	set	4014
   444  0000                     _RCSTA1bits	set	4011
   445  0000                     _TXREG1	set	4013
   446  0000                     _SPBRGH1	set	4016
   447  0000                     _SPBRG1	set	4015
   448  0000                     _TXSTA1	set	4012
   449  0000                     _RCSTA1	set	4011
   450  0000                     _BAUDCON1	set	4024
   451  0000                     _PIR1bits	set	3998
   452  0000                     _PIE1bits	set	3997
   453  0000                     _PIR2bits	set	4001
   454  0000                     _PIE2bits	set	4000
   455  0000                     _RCONbits	set	4048
   456  0000                     _OSCTUNE	set	3995
   457  0000                     _OSCCON2	set	4050
   458  0000                     _OSCCON	set	4051
   459  0000                     _LATAbits	set	3977
   460  0000                     _LATDbits	set	3980
   461  0000                     _INTCONbits	set	4082
   462  0000                     _IOCB	set	3938
   463  0000                     _LATCbits	set	3979
   464  0000                     _LATBbits	set	3978
   465                           
   466                           	psect	cinit
   467  002972                     __pcinit:
   468                           	opt stack 0
   469  002972                     start_initialization:
   470                           	opt stack 0
   471  002972                     __initialization:
   472                           	opt stack 0
   473                           
   474                           ; Initialize objects allocated to BANK1 (12 bytes)
   475                           ; load TBLPTR registers with __pidataBANK1
   476  002972  0EB0               	movlw	low __pidataBANK1
   477  002974  6EF6               	movwf	tblptrl,c
   478  002976  0E3B               	movlw	high __pidataBANK1
   479  002978  6EF7               	movwf	tblptrh,c
   480  00297A  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   481  00297C  6EF8               	movwf	tblptru,c
   482  00297E  EE01  F0E3         	lfsr	0,__pdataBANK1
   483  002982  EE10 F00C          	lfsr	1,12
   484  002986                     copy_data0:
   485  002986  0009               	tblrd		*+
   486  002988  CFF5 FFEE          	movff	tablat,postinc0
   487  00298C  50E5               	movf	postdec1,w,c
   488  00298E  50E1               	movf	fsr1l,w,c
   489  002990  E1FA               	bnz	copy_data0
   490                           
   491                           ; Initialize objects allocated to BANK0 (4 bytes)
   492                           ; load TBLPTR registers with __pidataBANK0
   493  002992  0E1C               	movlw	low __pidataBANK0
   494  002994  6EF6               	movwf	tblptrl,c
   495  002996  0E3C               	movlw	high __pidataBANK0
   496  002998  6EF7               	movwf	tblptrh,c
   497  00299A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   498  00299C  6EF8               	movwf	tblptru,c
   499  00299E  EE00  F0E8         	lfsr	0,__pdataBANK0
   500  0029A2  EE10 F004          	lfsr	1,4
   501  0029A6                     copy_data1:
   502  0029A6  0009               	tblrd		*+
   503  0029A8  CFF5 FFEE          	movff	tablat,postinc0
   504  0029AC  50E5               	movf	postdec1,w,c
   505  0029AE  50E1               	movf	fsr1l,w,c
   506  0029B0  E1FA               	bnz	copy_data1
   507                           
   508                           ; Initialize objects allocated to COMRAM (6 bytes)
   509                           ; load TBLPTR registers with __pidataCOMRAM
   510  0029B2  0E16               	movlw	low __pidataCOMRAM
   511  0029B4  6EF6               	movwf	tblptrl,c
   512  0029B6  0E3C               	movlw	high __pidataCOMRAM
   513  0029B8  6EF7               	movwf	tblptrh,c
   514  0029BA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   515  0029BC  6EF8               	movwf	tblptru,c
   516  0029BE  EE00  F040         	lfsr	0,__pdataCOMRAM
   517  0029C2  EE10 F006          	lfsr	1,6
   518  0029C6                     copy_data2:
   519  0029C6  0009               	tblrd		*+
   520  0029C8  CFF5 FFEE          	movff	tablat,postinc0
   521  0029CC  50E5               	movf	postdec1,w,c
   522  0029CE  50E1               	movf	fsr1l,w,c
   523  0029D0  E1FA               	bnz	copy_data2
   524                           
   525                           ; Clear objects allocated to BANK1 (227 bytes)
   526  0029D2  EE01  F000         	lfsr	0,__pbssBANK1
   527  0029D6  0EE3               	movlw	227
   528  0029D8                     clear_0:
   529  0029D8  6AEE               	clrf	postinc0,c
   530  0029DA  06E8               	decf	wreg,f,c
   531  0029DC  E1FD               	bnz	clear_0
   532                           
   533                           ; Clear objects allocated to BANK0 (13 bytes)
   534  0029DE  EE00  F0DB         	lfsr	0,__pbssBANK0
   535  0029E2  0E0D               	movlw	13
   536  0029E4                     clear_1:
   537  0029E4  6AEE               	clrf	postinc0,c
   538  0029E6  06E8               	decf	wreg,f,c
   539  0029E8  E1FD               	bnz	clear_1
   540                           
   541                           ; Clear objects allocated to COMRAM (15 bytes)
   542  0029EA  EE00  F031         	lfsr	0,__pbssCOMRAM
   543  0029EE  0E0F               	movlw	15
   544  0029F0                     clear_2:
   545  0029F0  6AEE               	clrf	postinc0,c
   546  0029F2  06E8               	decf	wreg,f,c
   547  0029F4  E1FD               	bnz	clear_2
   548  0029F6                     end_of_initialization:
   549                           	opt stack 0
   550  0029F6                     __end_of__initialization:
   551                           	opt stack 0
   552  0029F6  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   553  0029F8  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   554  0029FA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   555  0029FC  6EF8               	movwf	tblptru,c
   556  0029FE  0100               	movlb	0
   557  002A00  EF8D  F017         	goto	_main	;jump to C main() function
   558                           tblptru	equ	0xFF8
   559                           tblptrh	equ	0xFF7
   560                           tblptrl	equ	0xFF6
   561                           tablat	equ	0xFF5
   562                           postinc0	equ	0xFEE
   563                           wreg	equ	0xFE8
   564                           postdec1	equ	0xFE5
   565                           fsr1l	equ	0xFE1
   566                           
   567                           	psect	bssCOMRAM
   568  000031                     __pbssCOMRAM:
   569                           	opt stack 0
   570  000031                     _numOfValidateSamples:
   571                           	opt stack 0
   572  000031                     	ds	4
   573  000035                     TMR0_ISR@CountCallBack:
   574                           	opt stack 0
   575  000035                     	ds	2
   576  000037                     _eusart1RxTail:
   577                           	opt stack 0
   578  000037                     	ds	1
   579  000038                     _eusart1RxHead:
   580                           	opt stack 0
   581  000038                     	ds	1
   582  000039                     _eusart1TxTail:
   583                           	opt stack 0
   584  000039                     	ds	1
   585  00003A                     _eusart1TxHead:
   586                           	opt stack 0
   587  00003A                     	ds	1
   588  00003B                     _adcSampleMode:
   589                           	opt stack 0
   590  00003B                     	ds	1
   591  00003C                     _numOfReadSamples:
   592                           	opt stack 0
   593  00003C                     	ds	4
   594                           tblptru	equ	0xFF8
   595                           tblptrh	equ	0xFF7
   596                           tblptrl	equ	0xFF6
   597                           tablat	equ	0xFF5
   598                           postinc0	equ	0xFEE
   599                           wreg	equ	0xFE8
   600                           postdec1	equ	0xFE5
   601                           fsr1l	equ	0xFE1
   602                           
   603                           	psect	dataCOMRAM
   604  000040                     __pdataCOMRAM:
   605                           	opt stack 0
   606  000040                     _writeAddress:
   607                           	opt stack 0
   608  000040                     	ds	4
   609  000044                     _SynthRxOper:
   610                           	opt stack 0
   611  000044                     	ds	1
   612  000045                     _SynthTxOper:
   613                           	opt stack 0
   614  000045                     	ds	1
   615                           tblptru	equ	0xFF8
   616                           tblptrh	equ	0xFF7
   617                           tblptrl	equ	0xFF6
   618                           tablat	equ	0xFF5
   619                           postinc0	equ	0xFEE
   620                           wreg	equ	0xFE8
   621                           postdec1	equ	0xFE5
   622                           fsr1l	equ	0xFE1
   623                           
   624                           	psect	bssBANK0
   625  0000DB                     __pbssBANK0:
   626                           	opt stack 0
   627  0000DB                     _isReWriteDone:
   628                           	opt stack 0
   629  0000DB                     	ds	1
   630  0000DC                     _msgCount:
   631                           	opt stack 0
   632  0000DC                     	ds	1
   633  0000DD                     _crcGiven:
   634                           	opt stack 0
   635  0000DD                     	ds	1
   636  0000DE                     _crcCalc:
   637                           	opt stack 0
   638  0000DE                     	ds	1
   639  0000DF                     _dataSize:
   640                           	opt stack 0
   641  0000DF                     	ds	1
   642  0000E0                     _request:
   643                           	opt stack 0
   644  0000E0                     	ds	1
   645  0000E1                     _group:
   646                           	opt stack 0
   647  0000E1                     	ds	1
   648  0000E2                     _cState:
   649                           	opt stack 0
   650  0000E2                     	ds	1
   651  0000E3                     _eusart1RxCount:
   652                           	opt stack 0
   653  0000E3                     	ds	1
   654  0000E4                     _channel:
   655                           	opt stack 0
   656  0000E4                     	ds	1
   657  0000E5                     _TimerKeepAliveFlag:
   658                           	opt stack 0
   659  0000E5                     	ds	1
   660  0000E6                     _TimerSamplingFlag:
   661                           	opt stack 0
   662  0000E6                     	ds	1
   663  0000E7                     _TimerOneSecFlag:
   664                           	opt stack 0
   665  0000E7                     	ds	1
   666                           tblptru	equ	0xFF8
   667                           tblptrh	equ	0xFF7
   668                           tblptrl	equ	0xFF6
   669                           tablat	equ	0xFF5
   670                           postinc0	equ	0xFEE
   671                           wreg	equ	0xFE8
   672                           postdec1	equ	0xFE5
   673                           fsr1l	equ	0xFE1
   674                           
   675                           	psect	dataBANK0
   676  0000E8                     __pdataBANK0:
   677                           	opt stack 0
   678  0000E8                     _readAddress:
   679                           	opt stack 0
   680  0000E8                     	ds	4
   681                           tblptru	equ	0xFF8
   682                           tblptrh	equ	0xFF7
   683                           tblptrl	equ	0xFF6
   684                           tablat	equ	0xFF5
   685                           postinc0	equ	0xFEE
   686                           wreg	equ	0xFE8
   687                           postdec1	equ	0xFE5
   688                           fsr1l	equ	0xFE1
   689                           
   690                           	psect	bssBANK1
   691  000100                     __pbssBANK1:
   692                           	opt stack 0
   693  000100                     _eusart1TxBuffer:
   694                           	opt stack 0
   695  000100                     	ds	70
   696  000146                     _eusart1RxBuffer:
   697                           	opt stack 0
   698  000146                     	ds	40
   699  00016E                     _mcuRunTimeIn5SecTicks:
   700                           	opt stack 0
   701  00016E                     	ds	4
   702  000172                     _errno:
   703                           	opt stack 0
   704  000172                     	ds	2
   705  000174                     _sampleCount:
   706                           	opt stack 0
   707  000174                     	ds	2
   708  000176                     _count:
   709                           	opt stack 0
   710  000176                     	ds	2
   711  000178                     _cntRegUpdate:
   712                           	opt stack 0
   713  000178                     	ds	1
   714  000179                     _data:
   715                           	opt stack 0
   716  000179                     	ds	1
   717  00017A                     _conversionFormat:
   718                           	opt stack 0
   719  00017A                     	ds	1
   720  00017B                     _sampleArray:
   721                           	opt stack 0
   722  00017B                     	ds	64
   723  0001BB                     _rxMsgData:
   724                           	opt stack 0
   725  0001BB                     	ds	20
   726  0001CF                     _rxMsgQueue:
   727                           	opt stack 0
   728  0001CF                     	ds	20
   729                           tblptru	equ	0xFF8
   730                           tblptrh	equ	0xFF7
   731                           tblptrl	equ	0xFF6
   732                           tablat	equ	0xFF5
   733                           postinc0	equ	0xFEE
   734                           wreg	equ	0xFE8
   735                           postdec1	equ	0xFE5
   736                           fsr1l	equ	0xFE1
   737                           
   738                           	psect	dataBANK1
   739  0001E3                     __pdataBANK1:
   740                           	opt stack 0
   741  0001E3                     _groupsArray:
   742                           	opt stack 0
   743  0001E3                     	ds	12
   744                           tblptru	equ	0xFF8
   745                           tblptrh	equ	0xFF7
   746                           tblptrl	equ	0xFF6
   747                           tablat	equ	0xFF5
   748                           postinc0	equ	0xFEE
   749                           wreg	equ	0xFE8
   750                           postdec1	equ	0xFE5
   751                           fsr1l	equ	0xFE1
   752                           
   753                           	psect	cstackBANK2
   754  000200                     __pcstackBANK2:
   755                           	opt stack 0
   756  000200                     SynthReadData@TxMsg:
   757                           	opt stack 0
   758                           
   759                           ; 27 bytes @ 0x0
   760  000200                     	ds	27
   761  00021B                     SynthReadData@cType:
   762                           	opt stack 0
   763                           
   764                           ; 1 bytes @ 0x1B
   765  00021B                     	ds	1
   766  00021C                     SynthReadData@eepromDataArray:
   767                           	opt stack 0
   768                           
   769                           ; 12 bytes @ 0x1C
   770  00021C                     	ds	12
   771  000228                     SynthReadData@regNum:
   772                           	opt stack 0
   773                           
   774                           ; 2 bytes @ 0x28
   775  000228                     	ds	2
   776  00022A                     SynthReadData@byteNum:
   777                           	opt stack 0
   778                           
   779                           ; 2 bytes @ 0x2A
   780  00022A                     	ds	2
   781                           tblptru	equ	0xFF8
   782                           tblptrh	equ	0xFF7
   783                           tblptrl	equ	0xFF6
   784                           tablat	equ	0xFF5
   785                           postinc0	equ	0xFEE
   786                           wreg	equ	0xFE8
   787                           postdec1	equ	0xFE5
   788                           fsr1l	equ	0xFE1
   789                           
   790                           	psect	cstackBANK0
   791  000060                     __pcstackBANK0:
   792                           	opt stack 0
   793  000060                     ??_FlashSampleWrite:
   794  000060                     ??___ftdiv:
   795  000060                     ??_FlashReadUart:
   796  000060                     strtol@sign:
   797                           	opt stack 0
   798  000060                     GetMcuRunTime@TxMsg:
   799                           	opt stack 0
   800  000060                     SWSPI_Synth_send_bits@bitArray:
   801                           	opt stack 0
   802                           
   803                           ; 32 bytes @ 0x0
   804  000060                     	ds	1
   805  000061                     strtol@a:
   806                           	opt stack 0
   807                           
   808                           ; 4 bytes @ 0x1
   809  000061                     	ds	1
   810  000062                     FlashSampleWrite@rotateLeft:
   811                           	opt stack 0
   812                           
   813                           ; 2 bytes @ 0x2
   814  000062                     	ds	1
   815  000063                     ___ftdiv@cntr:
   816                           	opt stack 0
   817                           
   818                           ; 1 bytes @ 0x3
   819  000063                     	ds	1
   820  000064                     ___ftdiv@f3:
   821                           	opt stack 0
   822                           
   823                           ; 3 bytes @ 0x4
   824  000064                     	ds	1
   825  000065                     strtol@c:
   826                           	opt stack 0
   827                           
   828                           ; 1 bytes @ 0x5
   829  000065                     	ds	1
   830  000066                     ?_GetIntFromUartData:
   831                           	opt stack 0
   832  000066                     GetIntFromUartData@data:
   833                           	opt stack 0
   834                           
   835                           ; 2 bytes @ 0x6
   836  000066                     	ds	1
   837  000067                     ___ftdiv@exp:
   838                           	opt stack 0
   839                           
   840                           ; 1 bytes @ 0x7
   841  000067                     	ds	1
   842  000068                     ___ftdiv@sign:
   843                           	opt stack 0
   844                           
   845                           ; 1 bytes @ 0x8
   846  000068                     	ds	1
   847  000069                     ?___ftmul:
   848                           	opt stack 0
   849  000069                     ___ftmul@f1:
   850                           	opt stack 0
   851  000069                     GetMcuRunTime@tempRunTime:
   852                           	opt stack 0
   853                           
   854                           ; 4 bytes @ 0x9
   855  000069                     	ds	3
   856  00006C                     ___ftmul@f2:
   857                           	opt stack 0
   858  00006C                     FlashReadUart@TxMsg:
   859                           	opt stack 0
   860                           
   861                           ; 69 bytes @ 0xC
   862  00006C                     	ds	1
   863  00006D                     GetMcuRunTime@idx:
   864                           	opt stack 0
   865                           
   866                           ; 2 bytes @ 0xD
   867  00006D                     	ds	1
   868  00006E                     ??_GetIntFromUartData:
   869                           
   870                           ; 1 bytes @ 0xE
   871  00006E                     	ds	1
   872  00006F                     ??___ftmul:
   873                           
   874                           ; 1 bytes @ 0xF
   875  00006F                     	ds	1
   876  000070                     GetIntFromUartData@dataRegArr:
   877                           	opt stack 0
   878                           
   879                           ; 10 bytes @ 0x10
   880  000070                     	ds	2
   881  000072                     ___ftmul@exp:
   882                           	opt stack 0
   883                           
   884                           ; 1 bytes @ 0x12
   885  000072                     	ds	1
   886  000073                     ___ftmul@f3_as_product:
   887                           	opt stack 0
   888                           
   889                           ; 3 bytes @ 0x13
   890  000073                     	ds	3
   891  000076                     ___ftmul@cntr:
   892                           	opt stack 0
   893                           
   894                           ; 1 bytes @ 0x16
   895  000076                     	ds	1
   896  000077                     ___ftmul@sign:
   897                           	opt stack 0
   898                           
   899                           ; 1 bytes @ 0x17
   900  000077                     	ds	1
   901  000078                     ??_CheckFlashPrecentage:
   902  000078                     ?___ftadd:
   903                           	opt stack 0
   904  000078                     ?___fttol:
   905                           	opt stack 0
   906  000078                     ___ftadd@f1:
   907                           	opt stack 0
   908  000078                     ___fttol@f1:
   909                           	opt stack 0
   910                           
   911                           ; 3 bytes @ 0x18
   912  000078                     	ds	2
   913  00007A                     GetIntFromUartData@num:
   914                           	opt stack 0
   915                           
   916                           ; 1 bytes @ 0x1A
   917  00007A                     	ds	1
   918  00007B                     GetIntFromUartData@recVal:
   919                           	opt stack 0
   920  00007B                     ___ftadd@f2:
   921                           	opt stack 0
   922                           
   923                           ; 3 bytes @ 0x1B
   924  00007B                     	ds	1
   925  00007C                     ??___fttol:
   926  00007C                     CheckFlashPrecentage@precentage:
   927                           	opt stack 0
   928  00007C                     GetIntFromUartData@retVal:
   929                           	opt stack 0
   930                           
   931                           ; 8 bytes @ 0x1C
   932  00007C                     	ds	2
   933  00007E                     ??___ftadd:
   934                           
   935                           ; 1 bytes @ 0x1E
   936  00007E                     	ds	2
   937  000080                     SWSPI_Synth_send_bits@mask:
   938                           	opt stack 0
   939                           
   940                           ; 4 bytes @ 0x20
   941  000080                     	ds	1
   942  000081                     ___ftadd@sign:
   943                           	opt stack 0
   944  000081                     ___fttol@sign1:
   945                           	opt stack 0
   946                           
   947                           ; 1 bytes @ 0x21
   948  000081                     	ds	1
   949  000082                     ___ftadd@exp2:
   950                           	opt stack 0
   951  000082                     ___fttol@lval:
   952                           	opt stack 0
   953                           
   954                           ; 4 bytes @ 0x22
   955  000082                     	ds	1
   956  000083                     ___ftadd@exp1:
   957                           	opt stack 0
   958                           
   959                           ; 1 bytes @ 0x23
   960  000083                     	ds	1
   961  000084                     ?___ftsub:
   962                           	opt stack 0
   963  000084                     ?_eval_poly:
   964                           	opt stack 0
   965  000084                     SWSPI_Synth_send_bits@count:
   966                           	opt stack 0
   967  000084                     GetIntFromUartData@idxCon:
   968                           	opt stack 0
   969  000084                     ___ftsub@f1:
   970                           	opt stack 0
   971  000084                     eval_poly@x:
   972                           	opt stack 0
   973                           
   974                           ; 3 bytes @ 0x24
   975  000084                     	ds	1
   976  000085                     SWSPI_Synth_send_bits@phrType:
   977                           	opt stack 0
   978                           
   979                           ; 1 bytes @ 0x25
   980  000085                     	ds	1
   981  000086                     GetIntFromUartData@idxData:
   982                           	opt stack 0
   983  000086                     ___fttol@exp1:
   984                           	opt stack 0
   985                           
   986                           ; 1 bytes @ 0x26
   987  000086                     	ds	1
   988  000087                     ?___altoft:
   989                           	opt stack 0
   990  000087                     UpdateSynthFreq@data:
   991                           	opt stack 0
   992  000087                     eval_poly@d:
   993                           	opt stack 0
   994  000087                     ___ftsub@f2:
   995                           	opt stack 0
   996  000087                     ___altoft@c:
   997                           	opt stack 0
   998                           
   999                           ; 4 bytes @ 0x27
  1000  000087                     	ds	2
  1001  000089                     UpdateSynthFreq@cType:
  1002                           	opt stack 0
  1003  000089                     eval_poly@n:
  1004                           	opt stack 0
  1005                           
  1006                           ; 2 bytes @ 0x29
  1007  000089                     	ds	1
  1008  00008A                     UpdateSynthFreq@retVal:
  1009                           	opt stack 0
  1010                           
  1011                           ; 8 bytes @ 0x2A
  1012  00008A                     	ds	1
  1013  00008B                     ??___altoft:
  1014  00008B                     eval_poly@res:
  1015                           	opt stack 0
  1016                           
  1017                           ; 3 bytes @ 0x2B
  1018  00008B                     	ds	3
  1019  00008E                     ?_log:
  1020                           	opt stack 0
  1021  00008E                     ?_ldexp:
  1022                           	opt stack 0
  1023  00008E                     ldexp@value:
  1024                           	opt stack 0
  1025  00008E                     log@x:
  1026                           	opt stack 0
  1027                           
  1028                           ; 3 bytes @ 0x2E
  1029  00008E                     	ds	1
  1030  00008F                     ?_floor:
  1031                           	opt stack 0
  1032  00008F                     floor@x:
  1033                           	opt stack 0
  1034                           
  1035                           ; 3 bytes @ 0x2F
  1036  00008F                     	ds	2
  1037  000091                     ldexp@newexp:
  1038                           	opt stack 0
  1039  000091                     log@exponent:
  1040                           	opt stack 0
  1041                           
  1042                           ; 2 bytes @ 0x31
  1043  000091                     	ds	1
  1044  000092                     floor@i:
  1045                           	opt stack 0
  1046                           
  1047                           ; 3 bytes @ 0x32
  1048  000092                     	ds	1
  1049  000093                     ??_ldexp:
  1050                           
  1051                           ; 1 bytes @ 0x33
  1052  000093                     	ds	2
  1053  000095                     floor@expon:
  1054                           	opt stack 0
  1055                           
  1056                           ; 2 bytes @ 0x35
  1057  000095                     	ds	2
  1058  000097                     ?_exp:
  1059                           	opt stack 0
  1060  000097                     exp@x:
  1061                           	opt stack 0
  1062                           
  1063                           ; 3 bytes @ 0x37
  1064  000097                     	ds	3
  1065  00009A                     _exp$3310:
  1066                           	opt stack 0
  1067                           
  1068                           ; 3 bytes @ 0x3A
  1069  00009A                     	ds	3
  1070  00009D                     exp@exponent:
  1071                           	opt stack 0
  1072                           
  1073                           ; 2 bytes @ 0x3D
  1074  00009D                     	ds	2
  1075  00009F                     exp@sign:
  1076                           	opt stack 0
  1077                           
  1078                           ; 1 bytes @ 0x3F
  1079  00009F                     	ds	1
  1080  0000A0                     ?_pow:
  1081                           	opt stack 0
  1082  0000A0                     pow@x:
  1083                           	opt stack 0
  1084                           
  1085                           ; 3 bytes @ 0x40
  1086  0000A0                     	ds	3
  1087  0000A3                     pow@y:
  1088                           	opt stack 0
  1089                           
  1090                           ; 3 bytes @ 0x43
  1091  0000A3                     	ds	3
  1092  0000A6                     _pow$3308:
  1093                           	opt stack 0
  1094                           
  1095                           ; 3 bytes @ 0x46
  1096  0000A6                     	ds	3
  1097  0000A9                     _pow$3309:
  1098                           	opt stack 0
  1099                           
  1100                           ; 3 bytes @ 0x49
  1101  0000A9                     	ds	3
  1102  0000AC                     pow@sign:
  1103                           	opt stack 0
  1104                           
  1105                           ; 1 bytes @ 0x4C
  1106  0000AC                     	ds	1
  1107  0000AD                     pow@yi:
  1108                           	opt stack 0
  1109                           
  1110                           ; 4 bytes @ 0x4D
  1111  0000AD                     	ds	4
  1112  0000B1                     ??_AdcConvert:
  1113  0000B1                     ?_ReadIntFromEeprom:
  1114                           	opt stack 0
  1115  0000B1                     ReadIntFromEeprom@numOfByes:
  1116                           	opt stack 0
  1117  0000B1                     _FlashReadUart$581:
  1118                           	opt stack 0
  1119                           
  1120                           ; 4 bytes @ 0x51
  1121  0000B1                     	ds	2
  1122  0000B3                     AdcConvert@_adcResult:
  1123                           	opt stack 0
  1124                           
  1125                           ; 2 bytes @ 0x53
  1126  0000B3                     	ds	2
  1127  0000B5                     ??_ReadIntFromEeprom:
  1128  0000B5                     AdcConvert@_adcResult_340:
  1129                           	opt stack 0
  1130  0000B5                     _FlashReadUart$582:
  1131                           	opt stack 0
  1132                           
  1133                           ; 4 bytes @ 0x55
  1134  0000B5                     	ds	2
  1135  0000B7                     _AdcConvert$3305:
  1136                           	opt stack 0
  1137                           
  1138                           ; 3 bytes @ 0x57
  1139  0000B7                     	ds	1
  1140  0000B8                     ReadIntFromEeprom@base:
  1141                           	opt stack 0
  1142                           
  1143                           ; 4 bytes @ 0x58
  1144  0000B8                     	ds	1
  1145  0000B9                     FlashReadUart@j:
  1146                           	opt stack 0
  1147                           
  1148                           ; 2 bytes @ 0x59
  1149  0000B9                     	ds	1
  1150  0000BA                     AdcConvert@adcRes:
  1151                           	opt stack 0
  1152                           
  1153                           ; 2 bytes @ 0x5A
  1154  0000BA                     	ds	1
  1155  0000BB                     FlashReadUart@idx:
  1156                           	opt stack 0
  1157                           
  1158                           ; 2 bytes @ 0x5B
  1159  0000BB                     	ds	1
  1160  0000BC                     AdcConvert@idx:
  1161                           	opt stack 0
  1162  0000BC                     _ReadIntFromEeprom$3306:
  1163                           	opt stack 0
  1164                           
  1165                           ; 3 bytes @ 0x5C
  1166  0000BC                     	ds	1
  1167  0000BD                     FlashReadUart@offset:
  1168                           	opt stack 0
  1169                           
  1170                           ; 2 bytes @ 0x5D
  1171  0000BD                     	ds	2
  1172  0000BF                     _ReadIntFromEeprom$3307:
  1173                           	opt stack 0
  1174                           
  1175                           ; 3 bytes @ 0x5F
  1176  0000BF                     	ds	3
  1177  0000C2                     ReadIntFromEeprom@address:
  1178                           	opt stack 0
  1179                           
  1180                           ; 1 bytes @ 0x62
  1181  0000C2                     	ds	1
  1182  0000C3                     ReadIntFromEeprom@retVal:
  1183                           	opt stack 0
  1184                           
  1185                           ; 4 bytes @ 0x63
  1186  0000C3                     	ds	4
  1187  0000C7                     ReadIntFromEeprom@idx:
  1188                           	opt stack 0
  1189                           
  1190                           ; 1 bytes @ 0x67
  1191  0000C7                     	ds	1
  1192  0000C8                     ??_DacInit:
  1193  0000C8                     SynthReadData@data:
  1194                           	opt stack 0
  1195  0000C8                     InitSynth@EepromVal:
  1196                           	opt stack 0
  1197                           
  1198                           ; 4 bytes @ 0x68
  1199  0000C8                     	ds	2
  1200  0000CA                     ??_SynthReadData:
  1201  0000CA                     DacInit@dacInput:
  1202                           	opt stack 0
  1203                           
  1204                           ; 2 bytes @ 0x6A
  1205  0000CA                     	ds	2
  1206  0000CC                     DacInit@idx:
  1207                           	opt stack 0
  1208  0000CC                     InitSynth@idx:
  1209                           	opt stack 0
  1210                           
  1211                           ; 1 bytes @ 0x6C
  1212  0000CC                     	ds	1
  1213  0000CD                     InitSynth@cType:
  1214                           	opt stack 0
  1215                           
  1216                           ; 1 bytes @ 0x6D
  1217  0000CD                     	ds	1
  1218  0000CE                     InitSynth@regNum:
  1219                           	opt stack 0
  1220                           
  1221                           ; 1 bytes @ 0x6E
  1222  0000CE                     	ds	1
  1223  0000CF                     SetSynthOper@cType:
  1224                           	opt stack 0
  1225                           
  1226                           ; 1 bytes @ 0x6F
  1227  0000CF                     	ds	1
  1228  0000D0                     GroupAdc@data:
  1229                           	opt stack 0
  1230  0000D0                     GroupSynthesizers@data:
  1231                           	opt stack 0
  1232  0000D0                     GroupFlashMemory@data:
  1233                           	opt stack 0
  1234  0000D0                     GroupDAC@data:
  1235                           	opt stack 0
  1236  0000D0                     
  1237                           ; 3 bytes @ 0x70
  1238  0000D0                     	ds	2
  1239  0000D2                     ??_GroupFlashMemory:
  1240  0000D2                     GroupAdc@request:
  1241                           	opt stack 0
  1242  0000D2                     GroupSynthesizers@request:
  1243                           	opt stack 0
  1244  0000D2                     GroupDAC@request:
  1245                           	opt stack 0
  1246                           
  1247                           ; 1 bytes @ 0x72
  1248  0000D2                     	ds	1
  1249  0000D3                     GroupControlMcu@request:
  1250                           	opt stack 0
  1251  0000D3                     GroupStatusAndVersion@request:
  1252                           	opt stack 0
  1253  0000D3                     GroupFlashMemory@request:
  1254                           	opt stack 0
  1255                           
  1256                           ; 1 bytes @ 0x73
  1257  0000D3                     	ds	1
  1258  0000D4                     ??_readUartMessage:
  1259                           
  1260                           ; 1 bytes @ 0x74
  1261  0000D4                     	ds	4
  1262  0000D8                     readUartMessage@idx:
  1263                           	opt stack 0
  1264                           
  1265                           ; 2 bytes @ 0x78
  1266  0000D8                     	ds	2
  1267  0000DA                     readUartMessage@chRec:
  1268                           	opt stack 0
  1269                           
  1270                           ; 1 bytes @ 0x7A
  1271  0000DA                     	ds	1
  1272                           tblptru	equ	0xFF8
  1273                           tblptrh	equ	0xFF7
  1274                           tblptrl	equ	0xFF6
  1275                           tablat	equ	0xFF5
  1276                           postinc0	equ	0xFEE
  1277                           wreg	equ	0xFE8
  1278                           postdec1	equ	0xFE5
  1279                           fsr1l	equ	0xFE1
  1280                           
  1281                           	psect	cstackCOMRAM
  1282  000001                     __pcstackCOMRAM:
  1283                           	opt stack 0
  1284  000001                     ?___lwmod:
  1285                           	opt stack 0
  1286  000001                     ___lwmod@dividend:
  1287                           	opt stack 0
  1288                           
  1289                           ; 2 bytes @ 0x0
  1290  000001                     	ds	2
  1291  000003                     ___lwmod@divisor:
  1292                           	opt stack 0
  1293                           
  1294                           ; 2 bytes @ 0x2
  1295  000003                     	ds	2
  1296  000005                     ___lwmod@counter:
  1297                           	opt stack 0
  1298                           
  1299                           ; 1 bytes @ 0x4
  1300  000005                     	ds	1
  1301  000006                     ??_INTERRUPT_InterruptManager:
  1302                           
  1303                           ; 1 bytes @ 0x5
  1304  000006                     	ds	18
  1305  000018                     ??_EUSART1_Read:
  1306  000018                     ??_isspace:
  1307  000018                     ??_isdigit:
  1308  000018                     ??_isupper:
  1309  000018                     ??_BlinkErrorLeds:
  1310  000018                     ??_BlinkOkLeds:
  1311  000018                     ??_keepAliveSignalLed:
  1312  000018                     ?_ADC_GetConversion:
  1313                           	opt stack 0
  1314  000018                     ?_abs:
  1315                           	opt stack 0
  1316  000018                     ?___wmul:
  1317                           	opt stack 0
  1318  000018                     ?___ftpack:
  1319                           	opt stack 0
  1320  000018                     ?_frexp:
  1321                           	opt stack 0
  1322  000018                     ?___ftneg:
  1323                           	opt stack 0
  1324  000018                     ?___lldiv:
  1325                           	opt stack 0
  1326  000018                     ?___llmod:
  1327                           	opt stack 0
  1328  000018                     InitAdcApplicationMgr@channel:
  1329                           	opt stack 0
  1330  000018                     SwSpi_Data_Pin@cPinMode:
  1331                           	opt stack 0
  1332  000018                     SwSpi_Clk_Pin@cPinMode:
  1333                           	opt stack 0
  1334  000018                     SwSpi_Set_CE_Pin@cPinMode:
  1335                           	opt stack 0
  1336  000018                     SwSpi_Set_Synth_Le_Pin@cPinMode:
  1337                           	opt stack 0
  1338  000018                     SwSpi_Set_Dac_Sync_Pin@cPinMode:
  1339                           	opt stack 0
  1340  000018                     EUSART1_Write@txData:
  1341                           	opt stack 0
  1342  000018                     DATAEE_WriteByte@bData:
  1343                           	opt stack 0
  1344  000018                     DATAEE_ReadByte@bAdd:
  1345                           	opt stack 0
  1346  000018                     toupper@c:
  1347                           	opt stack 0
  1348  000018                     TMR0_SetInterruptHandler@InterruptHandler:
  1349                           	opt stack 0
  1350  000018                     crc8@dataArray:
  1351                           	opt stack 0
  1352  000018                     Make32bitsArray@array:
  1353                           	opt stack 0
  1354  000018                     ___wmul@multiplier:
  1355                           	opt stack 0
  1356  000018                     abs@a:
  1357                           	opt stack 0
  1358  000018                     memset@p1:
  1359                           	opt stack 0
  1360  000018                     ___ftpack@arg:
  1361                           	opt stack 0
  1362  000018                     ___ftge@ff1:
  1363                           	opt stack 0
  1364  000018                     ___ftneg@f1:
  1365                           	opt stack 0
  1366  000018                     frexp@value:
  1367                           	opt stack 0
  1368  000018                     FLASH_ReadByte@flashAddr:
  1369                           	opt stack 0
  1370  000018                     FLASH_EraseBlock@baseAddr:
  1371                           	opt stack 0
  1372  000018                     make8@data:
  1373                           	opt stack 0
  1374  000018                     ___lldiv@dividend:
  1375                           	opt stack 0
  1376  000018                     ___llmod@dividend:
  1377                           	opt stack 0
  1378                           
  1379                           ; 4 bytes @ 0x17
  1380  000018                     	ds	1
  1381  000019                     EepromRead@address:
  1382                           	opt stack 0
  1383  000019                     SwSpi_Data_Pin@phrType:
  1384                           	opt stack 0
  1385  000019                     SwSpi_Clk_Pin@phrType:
  1386                           	opt stack 0
  1387  000019                     SwSpi_Set_CE_Pin@phrType:
  1388                           	opt stack 0
  1389  000019                     SwSpi_Set_Synth_Le_Pin@phrType:
  1390                           	opt stack 0
  1391  000019                     DATAEE_WriteByte@bAdd:
  1392                           	opt stack 0
  1393  000019                     _isdigit$3023:
  1394                           	opt stack 0
  1395  000019                     _isspace$3026:
  1396                           	opt stack 0
  1397  000019                     _isupper$3029:
  1398                           	opt stack 0
  1399  000019                     WriteUartMessage@dataBuf:
  1400                           	opt stack 0
  1401  000019                     EUSART1_Read@readValue:
  1402                           	opt stack 0
  1403                           
  1404                           ; 2 bytes @ 0x18
  1405  000019                     	ds	1
  1406  00001A                     ??_ADC_GetConversion:
  1407  00001A                     ??_abs:
  1408  00001A                     ??_TMR0_Initialize:
  1409  00001A                     ?___lmul:
  1410                           	opt stack 0
  1411  00001A                     SWSPI_DAC_send_bits@data:
  1412                           	opt stack 0
  1413  00001A                     DATAEE_WriteByte@GIEBitValue:
  1414                           	opt stack 0
  1415  00001A                     isdigit@c:
  1416                           	opt stack 0
  1417  00001A                     isspace@c:
  1418                           	opt stack 0
  1419  00001A                     isupper@c:
  1420                           	opt stack 0
  1421  00001A                     crc8@dataSize:
  1422                           	opt stack 0
  1423  00001A                     ___wmul@multiplicand:
  1424                           	opt stack 0
  1425  00001A                     memset@c:
  1426                           	opt stack 0
  1427  00001A                     Make32bitsArray@data:
  1428                           	opt stack 0
  1429  00001A                     ___lmul@multiplier:
  1430                           	opt stack 0
  1431                           
  1432                           ; 4 bytes @ 0x19
  1433  00001A                     	ds	1
  1434  00001B                     ??_isalpha:
  1435  00001B                     BlinkErrorLeds@state:
  1436                           	opt stack 0
  1437  00001B                     BlinkOkLeds@state:
  1438                           	opt stack 0
  1439  00001B                     EepromWrite@data:
  1440                           	opt stack 0
  1441  00001B                     SWSPI_DAC_send_bits@count:
  1442                           	opt stack 0
  1443  00001B                     ___ftpack@exp:
  1444                           	opt stack 0
  1445  00001B                     WriteUartMessage@dataSize:
  1446                           	opt stack 0
  1447  00001B                     frexp@eptr:
  1448                           	opt stack 0
  1449  00001B                     ___ftge@ff2:
  1450                           	opt stack 0
  1451                           
  1452                           ; 3 bytes @ 0x1A
  1453  00001B                     	ds	1
  1454  00001C                     ??_crc8:
  1455  00001C                     EepromWrite@address:
  1456                           	opt stack 0
  1457  00001C                     SWSPI_DAC_send_bits@phrType:
  1458                           	opt stack 0
  1459  00001C                     FLASH_EraseBlock@GIEBitValue:
  1460                           	opt stack 0
  1461  00001C                     ADC_GetConversion@channel:
  1462                           	opt stack 0
  1463  00001C                     make8@dataLocation:
  1464                           	opt stack 0
  1465  00001C                     ___ftpack@sign:
  1466                           	opt stack 0
  1467  00001C                     _isalpha$3020:
  1468                           	opt stack 0
  1469  00001C                     BlinkErrorLeds@idx:
  1470                           	opt stack 0
  1471  00001C                     BlinkOkLeds@idx:
  1472                           	opt stack 0
  1473  00001C                     ___wmul@product:
  1474                           	opt stack 0
  1475  00001C                     memset@n:
  1476                           	opt stack 0
  1477  00001C                     ___lldiv@divisor:
  1478                           	opt stack 0
  1479  00001C                     ___llmod@divisor:
  1480                           	opt stack 0
  1481                           
  1482                           ; 4 bytes @ 0x1B
  1483  00001C                     	ds	1
  1484  00001D                     ??_make8:
  1485  00001D                     ??___ftpack:
  1486  00001D                     ??_frexp:
  1487  00001D                     ??_WriteUartMessage:
  1488  00001D                     isalpha@c:
  1489                           	opt stack 0
  1490  00001D                     crc8@crc:
  1491                           	opt stack 0
  1492  00001D                     FLASH_WriteBlock@writeAddr:
  1493                           	opt stack 0
  1494                           
  1495                           ; 4 bytes @ 0x1C
  1496  00001D                     	ds	1
  1497  00001E                     ??_Make32bitsArray:
  1498  00001E                     ??___ftge:
  1499  00001E                     WriteUartMessage@idx:
  1500                           	opt stack 0
  1501  00001E                     memset@p:
  1502                           	opt stack 0
  1503  00001E                     ___lmul@multiplicand:
  1504                           	opt stack 0
  1505                           
  1506                           ; 4 bytes @ 0x1D
  1507  00001E                     	ds	1
  1508  00001F                     crc8@i:
  1509                           	opt stack 0
  1510                           
  1511                           ; 2 bytes @ 0x1E
  1512  00001F                     	ds	1
  1513  000020                     ?___awtoft:
  1514                           	opt stack 0
  1515  000020                     ?___lltoft:
  1516                           	opt stack 0
  1517  000020                     ?___lwtoft:
  1518                           	opt stack 0
  1519  000020                     ___llmod@counter:
  1520                           	opt stack 0
  1521  000020                     ZeroArray@array:
  1522                           	opt stack 0
  1523  000020                     ZeroBitsArray@array:
  1524                           	opt stack 0
  1525  000020                     Make32bitsArray@idx:
  1526                           	opt stack 0
  1527  000020                     ___awtoft@c:
  1528                           	opt stack 0
  1529  000020                     ___lwtoft@c:
  1530                           	opt stack 0
  1531  000020                     ___lldiv@quotient:
  1532                           	opt stack 0
  1533  000020                     ___lltoft@c:
  1534                           	opt stack 0
  1535                           
  1536                           ; 4 bytes @ 0x1F
  1537  000020                     	ds	1
  1538  000021                     FLASH_WriteBlock@flashWrBufPtr:
  1539                           	opt stack 0
  1540  000021                     StoreIntInEeprom@data:
  1541                           	opt stack 0
  1542                           
  1543                           ; 4 bytes @ 0x20
  1544  000021                     	ds	1
  1545  000022                     ZeroArray@size:
  1546                           	opt stack 0
  1547  000022                     SWSPI_Synth_send_bits@data:
  1548                           	opt stack 0
  1549  000022                     ___lmul@product:
  1550                           	opt stack 0
  1551                           
  1552                           ; 4 bytes @ 0x21
  1553  000022                     	ds	1
  1554  000023                     ??_FLASH_WriteBlock:
  1555  000023                     ___awtoft@sign:
  1556                           	opt stack 0
  1557                           
  1558                           ; 1 bytes @ 0x22
  1559  000023                     	ds	1
  1560  000024                     ??_FlashReadCondition:
  1561  000024                     ??___lltoft:
  1562  000024                     SendAckMessage@inRequest:
  1563                           	opt stack 0
  1564  000024                     ___lldiv@counter:
  1565                           	opt stack 0
  1566  000024                     GetMcuFwVersion@TxMsg:
  1567                           	opt stack 0
  1568                           
  1569                           ; 9 bytes @ 0x23
  1570  000024                     	ds	1
  1571  000025                     ??_GetMcuRunTime:
  1572  000025                     SendAckMessage@inGroup:
  1573                           	opt stack 0
  1574  000025                     StoreIntInEeprom@address:
  1575                           	opt stack 0
  1576                           
  1577                           ; 1 bytes @ 0x24
  1578  000025                     	ds	1
  1579  000026                     ?_strtol:
  1580                           	opt stack 0
  1581  000026                     StoreIntInEeprom@numOfByes:
  1582                           	opt stack 0
  1583  000026                     strtol@s:
  1584                           	opt stack 0
  1585  000026                     SWSPI_send_word@data:
  1586                           	opt stack 0
  1587  000026                     SendAckMessage@TxMsg:
  1588                           	opt stack 0
  1589                           
  1590                           ; 6 bytes @ 0x25
  1591  000026                     	ds	1
  1592  000027                     FLASH_WriteBlock@blockStartAddr:
  1593                           	opt stack 0
  1594                           
  1595                           ; 4 bytes @ 0x26
  1596  000027                     	ds	1
  1597  000028                     StoreIntInEeprom@val:
  1598                           	opt stack 0
  1599  000028                     ___lltoft@exp:
  1600                           	opt stack 0
  1601  000028                     strtol@endptr:
  1602                           	opt stack 0
  1603  000028                     FlashReadCondition@TxMsg:
  1604                           	opt stack 0
  1605                           
  1606                           ; 9 bytes @ 0x27
  1607  000028                     	ds	1
  1608  000029                     ?___ftdiv:
  1609                           	opt stack 0
  1610  000029                     StoreIntInEeprom@idx:
  1611                           	opt stack 0
  1612  000029                     ___ftdiv@f1:
  1613                           	opt stack 0
  1614                           
  1615                           ; 3 bytes @ 0x28
  1616  000029                     	ds	1
  1617  00002A                     SWSPI_send_word@dataSize:
  1618                           	opt stack 0
  1619  00002A                     strtol@base:
  1620                           	opt stack 0
  1621                           
  1622                           ; 2 bytes @ 0x29
  1623  00002A                     	ds	1
  1624  00002B                     SWSPI_send_word@datac:
  1625                           	opt stack 0
  1626  00002B                     FLASH_WriteBlock@GIEBitValue:
  1627                           	opt stack 0
  1628                           
  1629                           ; 1 bytes @ 0x2A
  1630  00002B                     	ds	1
  1631  00002C                     ??_strtol:
  1632  00002C                     ??_testLeds:
  1633  00002C                     FLASH_WriteBlock@i:
  1634                           	opt stack 0
  1635  00002C                     SetAdcOperationMode@data:
  1636                           	opt stack 0
  1637  00002C                     SetConversionResultFormat@data:
  1638                           	opt stack 0
  1639  00002C                     SetChannelMode@data:
  1640                           	opt stack 0
  1641  00002C                     FlashReadUart@numOfSampleToRead:
  1642                           	opt stack 0
  1643  00002C                     DacSetValue@data:
  1644                           	opt stack 0
  1645  00002C                     SWSPI_send_word@idx:
  1646                           	opt stack 0
  1647  00002C                     ___ftdiv@f2:
  1648                           	opt stack 0
  1649                           
  1650                           ; 3 bytes @ 0x2B
  1651  00002C                     	ds	1
  1652  00002D                     testLeds@idx:
  1653                           	opt stack 0
  1654  00002D                     FlashSampleWrite@sampleData:
  1655                           	opt stack 0
  1656  00002D                     GetMcuFwVersion@compileData:
  1657                           	opt stack 0
  1658                           
  1659                           ; 4 bytes @ 0x2C
  1660  00002D                     	ds	1
  1661  00002E                     SWSPI_send_word@phrType:
  1662                           	opt stack 0
  1663                           
  1664                           ; 1 bytes @ 0x2D
  1665  00002E                     	ds	1
  1666  00002F                     ??_eval_poly:
  1667  00002F                     FlashSampleWrite@channelNum:
  1668                           	opt stack 0
  1669  00002F                     ___altoft@exp:
  1670                           	opt stack 0
  1671                           
  1672                           ; 1 bytes @ 0x2E
  1673  00002F                     	ds	1
  1674  000030                     ___altoft@sign:
  1675                           	opt stack 0
  1676                           
  1677                           ; 1 bytes @ 0x2F
  1678  000030                     	ds	1
  1679  000031                     tblptru	equ	0xFF8
  1680                           tblptrh	equ	0xFF7
  1681                           tblptrl	equ	0xFF6
  1682                           tablat	equ	0xFF5
  1683                           postinc0	equ	0xFEE
  1684                           wreg	equ	0xFE8
  1685                           postdec1	equ	0xFE5
  1686                           fsr1l	equ	0xFE1
  1687                           
  1688                           ; 1 bytes @ 0x30
  1689 ;;
  1690 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1691 ;;
  1692 ;; *************** function _main *****************
  1693 ;; Defined at:
  1694 ;;		line 13 in file "main.c"
  1695 ;; Parameters:    Size  Location     Type
  1696 ;;		None
  1697 ;; Auto vars:     Size  Location     Type
  1698 ;;		None
  1699 ;; Return value:  Size  Location     Type
  1700 ;;                  1    wreg      void 
  1701 ;; Registers used:
  1702 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  1703 ;; Tracked objects:
  1704 ;;		On entry : 0/0
  1705 ;;		On exit  : 0/0
  1706 ;;		Unchanged: 0/0
  1707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1708 ;;      Params:         0       0       0       0       0       0       0
  1709 ;;      Locals:         0       0       0       0       0       0       0
  1710 ;;      Temps:          0       0       0       0       0       0       0
  1711 ;;      Totals:         0       0       0       0       0       0       0
  1712 ;;Total ram usage:        0 bytes
  1713 ;; Hardware stack levels required when called:   13
  1714 ;; This function calls:
  1715 ;;		_AdcConvert
  1716 ;;		_BlinkErrorLeds
  1717 ;;		_BlinkOkLeds
  1718 ;;		_CheckFlashPrecentage
  1719 ;;		_InitSystemApplicationManagers
  1720 ;;		_SendSystemStartAck
  1721 ;;		_SetMcuRunTime
  1722 ;;		_SetMcuSystem
  1723 ;;		_keepAliveSignalLed
  1724 ;;		_keepAliveSignalUart
  1725 ;;		_readUartMessage
  1726 ;; This function is called by:
  1727 ;;		Startup code after reset
  1728 ;; This function uses a non-reentrant model
  1729 ;;
  1730                           
  1731                           	psect	text0
  1732  002F1A                     __ptext0:
  1733                           	opt stack 0
  1734  002F1A                     _main:
  1735                           	opt stack 18
  1736                           
  1737                           ;main.c: 16: SetMcuSystem();
  1738                           
  1739                           ;incstack = 0
  1740  002F1A  ECFC  F01D         	call	_SetMcuSystem	;wreg free
  1741                           
  1742                           ;main.c: 19: InitSystemApplicationManagers();
  1743  002F1E  EC79  F01D         	call	_InitSystemApplicationManagers	;wreg free
  1744                           
  1745                           ;main.c: 22: SendSystemStartAck();
  1746  002F22  ECF6  F01D         	call	_SendSystemStartAck	;wreg free
  1747                           
  1748                           ;main.c: 25: BlinkOkLeds(OK_START_SYSTEM);
  1749  002F26  0E03               	movlw	3
  1750  002F28  ECBE  F017         	call	_BlinkOkLeds
  1751  002F2C                     
  1752                           ;main.c: 28: {
  1753                           ;main.c: 29: readUartMessage();
  1754  002F2C  EC2F  F007         	call	_readUartMessage	;wreg free
  1755                           
  1756                           ;main.c: 31: if (TimerOneSecFlag == 1)
  1757  002F30  0100               	movlb	0	; () banked
  1758  002F32  05E7               	decf	_TimerOneSecFlag& (0+255),w,b	;volatile
  1759  002F34  A4D8               	btfss	status,2,c
  1760  002F36  D006               	goto	l1456
  1761                           
  1762                           ; BSR set to: 0
  1763                           ;main.c: 32: {
  1764                           ;main.c: 34: SetMcuRunTime();
  1765  002F38  EC56  F01A         	call	_SetMcuRunTime	;wreg free
  1766                           
  1767                           ;main.c: 35: TimerOneSecFlag = 0;
  1768  002F3C  0E00               	movlw	0
  1769  002F3E  0100               	movlb	0	; () banked
  1770  002F40  6FE7               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
  1771                           
  1772                           ;main.c: 36: }
  1773  002F42  D7F4               	goto	l1455
  1774  002F44                     l1456:
  1775                           
  1776                           ; BSR set to: 0
  1777                           ;main.c: 37: else if (TimerSamplingFlag == 1)
  1778                           
  1779                           ; BSR set to: 0
  1780  002F44  05E6               	decf	_TimerSamplingFlag& (0+255),w,b	;volatile
  1781  002F46  A4D8               	btfss	status,2,c
  1782  002F48  D010               	goto	l1458
  1783                           
  1784                           ; BSR set to: 0
  1785                           ;main.c: 38: {
  1786                           ;main.c: 39: keepAliveSignalLed();
  1787  002F4A  EC62  F01D         	call	_keepAliveSignalLed	;wreg free
  1788                           
  1789                           ;main.c: 41: if(1 == CheckFlashPrecentage())
  1790  002F4E  EC73  F013         	call	_CheckFlashPrecentage	;wreg free
  1791  002F52  06E8               	decf	wreg,f,c
  1792  002F54  A4D8               	btfss	status,2,c
  1793  002F56  D003               	goto	l1459
  1794                           
  1795                           ;main.c: 42: {
  1796                           ;main.c: 43: BlinkErrorLeds(FAIL_FLASH_MORE_THEN_HELF);
  1797  002F58  0E04               	movlw	4
  1798  002F5A  ECED  F017         	call	_BlinkErrorLeds
  1799  002F5E                     l1459:
  1800                           
  1801                           ;main.c: 44: }
  1802                           ;main.c: 47: AdcConvert();
  1803  002F5E  EC0A  F009         	call	_AdcConvert	;wreg free
  1804                           
  1805                           ;main.c: 49: TimerSamplingFlag = 0;
  1806  002F62  0E00               	movlw	0
  1807  002F64  0100               	movlb	0	; () banked
  1808  002F66  6FE6               	movwf	_TimerSamplingFlag& (0+255),b	;volatile
  1809                           
  1810                           ;main.c: 50: }
  1811  002F68  D7E1               	goto	l1455
  1812  002F6A                     l1458:
  1813                           
  1814                           ; BSR set to: 0
  1815                           ;main.c: 51: else if (TimerKeepAliveFlag == 1)
  1816                           
  1817                           ; BSR set to: 0
  1818  002F6A  05E5               	decf	_TimerKeepAliveFlag& (0+255),w,b	;volatile
  1819  002F6C  A4D8               	btfss	status,2,c
  1820  002F6E  D7DE               	goto	l1455
  1821                           
  1822                           ; BSR set to: 0
  1823                           ;main.c: 52: {
  1824                           ;main.c: 53: keepAliveSignalUart();
  1825  002F70  ECF0  F01D         	call	_keepAliveSignalUart	;wreg free
  1826                           
  1827                           ;main.c: 54: TimerKeepAliveFlag = 0;
  1828  002F74  0E00               	movlw	0
  1829  002F76  0100               	movlb	0	; () banked
  1830  002F78  6FE5               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
  1831                           
  1832                           ; BSR set to: 0
  1833                           
  1834                           ; BSR set to: 0
  1835                           
  1836                           ; BSR set to: 0
  1837                           
  1838                           ; BSR set to: 0
  1839  002F7A  D7D8               	goto	l1455
  1840  002F7C                     __end_of_main:
  1841                           	opt stack 0
  1842                           tblptru	equ	0xFF8
  1843                           tblptrh	equ	0xFF7
  1844                           tblptrl	equ	0xFF6
  1845                           tablat	equ	0xFF5
  1846                           postinc0	equ	0xFEE
  1847                           wreg	equ	0xFE8
  1848                           postdec1	equ	0xFE5
  1849                           fsr1l	equ	0xFE1
  1850                           status	equ	0xFD8
  1851                           
  1852 ;; *************** function _readUartMessage *****************
  1853 ;; Defined at:
  1854 ;;		line 28 in file "EusartApp.c"
  1855 ;; Parameters:    Size  Location     Type
  1856 ;;		None
  1857 ;; Auto vars:     Size  Location     Type
  1858 ;;  idx             2  120[BANK0 ] int 
  1859 ;;  chRec           1  122[BANK0 ] unsigned char 
  1860 ;; Return value:  Size  Location     Type
  1861 ;;                  1    wreg      void 
  1862 ;; Registers used:
  1863 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  1864 ;; Tracked objects:
  1865 ;;		On entry : 0/0
  1866 ;;		On exit  : 0/0
  1867 ;;		Unchanged: 0/0
  1868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1869 ;;      Params:         0       0       0       0       0       0       0
  1870 ;;      Locals:         0       3       0       0       0       0       0
  1871 ;;      Temps:          0       4       0       0       0       0       0
  1872 ;;      Totals:         0       7       0       0       0       0       0
  1873 ;;Total ram usage:        7 bytes
  1874 ;; Hardware stack levels used:    1
  1875 ;; Hardware stack levels required when called:   12
  1876 ;; This function calls:
  1877 ;;		_EUSART1_Read
  1878 ;;		_GroupAdc
  1879 ;;		_GroupControlMcu
  1880 ;;		_GroupDAC
  1881 ;;		_GroupFlashMemory
  1882 ;;		_GroupStatusAndVersion
  1883 ;;		_GroupSynthesizers
  1884 ;;		_InitRxMessageParams
  1885 ;;		_ZeroArray
  1886 ;;		_crc8
  1887 ;; This function is called by:
  1888 ;;		_main
  1889 ;; This function uses a non-reentrant model
  1890 ;;
  1891                           
  1892                           	psect	text1
  1893  000E5E                     __ptext1:
  1894                           	opt stack 0
  1895  000E5E                     _readUartMessage:
  1896                           	opt stack 18
  1897                           
  1898                           ;EusartApp.c: 31: uint8_t chRec = (0);
  1899                           
  1900                           ; BSR set to: 0
  1901                           ;incstack = 0
  1902  000E5E  0E00               	movlw	0
  1903  000E60  0100               	movlb	0	; () banked
  1904  000E62  6FDA               	movwf	readUartMessage@chRec& (0+255),b
  1905                           
  1906                           ;EusartApp.c: 32: switch(cState)
  1907  000E64  D0D2               	goto	l190
  1908  000E66                     
  1909                           ; BSR set to: 0
  1910                           ;EusartApp.c: 37: if(eusart1RxCount > (4))
  1911                           
  1912                           ; BSR set to: 0
  1913  000E66  0E04               	movlw	4
  1914  000E68  65E3               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1915  000E6A  0012               	return	
  1916                           
  1917                           ; BSR set to: 0
  1918                           ;EusartApp.c: 38: {
  1919                           ;EusartApp.c: 39: cState = FIND_MAGIC;
  1920  000E6C  0E01               	movlw	1
  1921  000E6E  6FE2               	movwf	_cState& (0+255),b
  1922                           
  1923                           ; BSR set to: 0
  1924                           ;EusartApp.c: 40: }
  1925                           ;EusartApp.c: 41: return;
  1926                           
  1927                           ; BSR set to: 0
  1928  000E70  0012               	return	
  1929  000E72                     
  1930                           ; BSR set to: 0
  1931                           ;EusartApp.c: 45: InitRxMessageParams();
  1932                           
  1933                           ; BSR set to: 0
  1934  000E72  EC63  F01C         	call	_InitRxMessageParams	;wreg free
  1935                           
  1936                           ;EusartApp.c: 46: msgCount = 0;
  1937  000E76  0E00               	movlw	0
  1938  000E78  0100               	movlb	0	; () banked
  1939  000E7A  6FDC               	movwf	_msgCount& (0+255),b
  1940                           
  1941                           ; BSR set to: 0
  1942                           ;EusartApp.c: 47: if(eusart1RxCount > 1)
  1943  000E7C  0E01               	movlw	1
  1944  000E7E  65E3               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1945  000E80  D00D               	goto	l195
  1946                           
  1947                           ; BSR set to: 0
  1948                           ;EusartApp.c: 48: {
  1949                           ;EusartApp.c: 49: chRec = EUSART1_Read();
  1950  000E82  EC34  F01A         	call	_EUSART1_Read	;wreg free
  1951  000E86  0100               	movlb	0	; () banked
  1952  000E88  6FDA               	movwf	readUartMessage@chRec& (0+255),b
  1953                           
  1954                           ; BSR set to: 0
  1955                           ;EusartApp.c: 50: rxMsgQueue[(0)] = chRec;
  1956  000E8A  C0DA  F1CF         	movff	readUartMessage@chRec,_rxMsgQueue
  1957                           
  1958                           ; BSR set to: 0
  1959                           ;EusartApp.c: 51: if(chRec == (0x24))
  1960  000E8E  0E24               	movlw	36
  1961  000E90  19DA               	xorwf	readUartMessage@chRec& (0+255),w,b
  1962  000E92  A4D8               	btfss	status,2,c
  1963  000E94  0012               	return	
  1964                           
  1965                           ; BSR set to: 0
  1966                           ;EusartApp.c: 52: {
  1967                           ;EusartApp.c: 53: cState = READ_GROUP;
  1968  000E96  0E02               	movlw	2
  1969  000E98  6FE2               	movwf	_cState& (0+255),b
  1970                           
  1971                           ; BSR set to: 0
  1972                           ;EusartApp.c: 54: }
  1973                           ;EusartApp.c: 55: }
  1974  000E9A  0012               	return	
  1975  000E9C                     l195:
  1976                           
  1977                           ; BSR set to: 0
  1978                           ;EusartApp.c: 56: else
  1979                           ;EusartApp.c: 57: {
  1980                           ;EusartApp.c: 58: cState = START_RX_MESSAGE_READ;
  1981                           
  1982                           ; BSR set to: 0
  1983  000E9C  0E00               	movlw	0
  1984  000E9E  6FE2               	movwf	_cState& (0+255),b
  1985                           
  1986                           ; BSR set to: 0
  1987                           ;EusartApp.c: 59: }
  1988                           ;EusartApp.c: 61: break;
  1989  000EA0  0012               	return	
  1990  000EA2                     
  1991                           ; BSR set to: 0
  1992                           ;EusartApp.c: 65: if(eusart1RxCount > 1)
  1993                           
  1994                           ; BSR set to: 0
  1995  000EA2  0E01               	movlw	1
  1996  000EA4  65E3               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1997  000EA6  0012               	return	
  1998                           
  1999                           ; BSR set to: 0
  2000                           ;EusartApp.c: 66: {
  2001                           ;EusartApp.c: 67: group = EUSART1_Read();
  2002  000EA8  EC34  F01A         	call	_EUSART1_Read	;wreg free
  2003  000EAC  0100               	movlb	0	; () banked
  2004  000EAE  6FE1               	movwf	_group& (0+255),b
  2005                           
  2006                           ; BSR set to: 0
  2007                           ;EusartApp.c: 68: rxMsgQueue[(1)] = group;
  2008  000EB0  C0E1  F1D0         	movff	_group,_rxMsgQueue+1
  2009                           
  2010                           ; BSR set to: 0
  2011                           ;EusartApp.c: 69: cState = READ_REQUEST;
  2012  000EB4  0E03               	movlw	3
  2013  000EB6  6FE2               	movwf	_cState& (0+255),b
  2014                           
  2015                           ; BSR set to: 0
  2016                           ;EusartApp.c: 70: }
  2017                           ;EusartApp.c: 71: break;
  2018  000EB8  0012               	return	
  2019  000EBA                     
  2020                           ; BSR set to: 0
  2021                           ;EusartApp.c: 75: if(eusart1RxCount > 1)
  2022                           
  2023                           ; BSR set to: 0
  2024  000EBA  0E01               	movlw	1
  2025  000EBC  65E3               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2026  000EBE  0012               	return	
  2027                           
  2028                           ; BSR set to: 0
  2029                           ;EusartApp.c: 76: {
  2030                           ;EusartApp.c: 77: request = EUSART1_Read();
  2031  000EC0  EC34  F01A         	call	_EUSART1_Read	;wreg free
  2032  000EC4  0100               	movlb	0	; () banked
  2033  000EC6  6FE0               	movwf	_request& (0+255),b
  2034                           
  2035                           ; BSR set to: 0
  2036                           ;EusartApp.c: 78: rxMsgQueue[(2)] = request;
  2037  000EC8  C0E0  F1D1         	movff	_request,_rxMsgQueue+2
  2038                           
  2039                           ; BSR set to: 0
  2040                           ;EusartApp.c: 79: cState = READ_DATA_SIZE;
  2041  000ECC  0E04               	movlw	4
  2042  000ECE  6FE2               	movwf	_cState& (0+255),b
  2043                           
  2044                           ; BSR set to: 0
  2045                           ;EusartApp.c: 80: }
  2046                           ;EusartApp.c: 81: break;
  2047  000ED0  0012               	return	
  2048  000ED2                     
  2049                           ; BSR set to: 0
  2050                           ;EusartApp.c: 84: if(eusart1RxCount > 1)
  2051                           
  2052                           ; BSR set to: 0
  2053  000ED2  0E01               	movlw	1
  2054  000ED4  65E3               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2055  000ED6  0012               	return	
  2056                           
  2057                           ; BSR set to: 0
  2058                           ;EusartApp.c: 85: {
  2059                           ;EusartApp.c: 86: dataSize = EUSART1_Read();
  2060  000ED8  EC34  F01A         	call	_EUSART1_Read	;wreg free
  2061  000EDC  0100               	movlb	0	; () banked
  2062  000EDE  6FDF               	movwf	_dataSize& (0+255),b
  2063                           
  2064                           ; BSR set to: 0
  2065                           ;EusartApp.c: 87: rxMsgQueue[(3)] = dataSize;
  2066  000EE0  C0DF  F1D2         	movff	_dataSize,_rxMsgQueue+3
  2067                           
  2068                           ; BSR set to: 0
  2069                           ;EusartApp.c: 88: if(dataSize == 0)
  2070  000EE4  51DF               	movf	_dataSize& (0+255),w,b
  2071  000EE6  A4D8               	btfss	status,2,c
  2072  000EE8  D003               	goto	l205
  2073                           
  2074                           ; BSR set to: 0
  2075                           ;EusartApp.c: 89: {
  2076                           ;EusartApp.c: 90: cState = CHECK_CRC;
  2077  000EEA  0E06               	movlw	6
  2078  000EEC  6FE2               	movwf	_cState& (0+255),b
  2079                           
  2080                           ;EusartApp.c: 91: }
  2081  000EEE  0012               	return	
  2082  000EF0                     l205:
  2083                           
  2084                           ; BSR set to: 0
  2085                           ;EusartApp.c: 92: else
  2086                           ;EusartApp.c: 93: {
  2087                           ;EusartApp.c: 94: cState = READ_DATA;
  2088                           
  2089                           ; BSR set to: 0
  2090  000EF0  0E05               	movlw	5
  2091  000EF2  6FE2               	movwf	_cState& (0+255),b
  2092                           
  2093                           ; BSR set to: 0
  2094                           ;EusartApp.c: 95: }
  2095                           ;EusartApp.c: 97: }
  2096                           ;EusartApp.c: 99: break;
  2097                           
  2098                           ; BSR set to: 0
  2099  000EF4  0012               	return	
  2100  000EF6                     
  2101                           ; BSR set to: 0
  2102                           ;EusartApp.c: 103: if(eusart1RxCount >= dataSize)
  2103                           
  2104                           ; BSR set to: 0
  2105  000EF6  51DF               	movf	_dataSize& (0+255),w,b
  2106  000EF8  5DE3               	subwf	_eusart1RxCount& (0+255),w,b	;volatile
  2107  000EFA  A0D8               	btfss	status,0,c
  2108  000EFC  0012               	return	
  2109                           
  2110                           ; BSR set to: 0
  2111                           ;EusartApp.c: 104: {
  2112                           ;EusartApp.c: 105: ZeroArray(rxMsgData, (0x14));
  2113  000EFE  0EBB               	movlw	low _rxMsgData
  2114  000F00  6E20               	movwf	ZeroArray@array,c
  2115  000F02  0E01               	movlw	high _rxMsgData
  2116  000F04  6E21               	movwf	ZeroArray@array+1,c
  2117  000F06  0E00               	movlw	0
  2118  000F08  6E23               	movwf	ZeroArray@size+1,c
  2119  000F0A  0E14               	movlw	20
  2120  000F0C  6E22               	movwf	ZeroArray@size,c
  2121  000F0E  EC29  F01D         	call	_ZeroArray	;wreg free
  2122                           
  2123                           ;EusartApp.c: 107: for(int idx = 0; idx < dataSize; idx++)
  2124  000F12  0E00               	movlw	0
  2125  000F14  0100               	movlb	0	; () banked
  2126  000F16  6FD9               	movwf	(readUartMessage@idx+1)& (0+255),b
  2127  000F18  0E00               	movlw	0
  2128  000F1A  6FD8               	movwf	readUartMessage@idx& (0+255),b
  2129  000F1C  D01E               	goto	l209
  2130  000F1E                     
  2131                           ; BSR set to: 0
  2132                           ;EusartApp.c: 108: {
  2133                           ;EusartApp.c: 109: chRec = EUSART1_Read();
  2134                           
  2135                           ; BSR set to: 0
  2136  000F1E  EC34  F01A         	call	_EUSART1_Read	;wreg free
  2137  000F22  0100               	movlb	0	; () banked
  2138  000F24  6FDA               	movwf	readUartMessage@chRec& (0+255),b
  2139                           
  2140                           ; BSR set to: 0
  2141                           ;EusartApp.c: 110: rxMsgQueue[(0x4) + msgCount++] = chRec;
  2142  000F26  51DC               	movf	_msgCount& (0+255),w,b
  2143  000F28  6FD4               	movwf	??_readUartMessage& (0+255),b
  2144  000F2A  6BD5               	clrf	(??_readUartMessage+1)& (0+255),b
  2145  000F2C  0E04               	movlw	4
  2146  000F2E  27D4               	addwf	??_readUartMessage& (0+255),f,b
  2147  000F30  0E00               	movlw	0
  2148  000F32  23D5               	addwfc	(??_readUartMessage+1)& (0+255),f,b
  2149  000F34  0ECF               	movlw	low _rxMsgQueue
  2150  000F36  25D4               	addwf	??_readUartMessage& (0+255),w,b
  2151  000F38  6ED9               	movwf	fsr2l,c
  2152  000F3A  0E01               	movlw	high _rxMsgQueue
  2153  000F3C  21D5               	addwfc	(??_readUartMessage+1)& (0+255),w,b
  2154  000F3E  6EDA               	movwf	fsr2h,c
  2155  000F40  C0DA  FFDF         	movff	readUartMessage@chRec,indf2
  2156                           
  2157                           ; BSR set to: 0
  2158  000F44  2BDC               	incf	_msgCount& (0+255),f,b
  2159                           
  2160                           ; BSR set to: 0
  2161                           ;EusartApp.c: 111: rxMsgData[idx] = chRec;
  2162  000F46  0EBB               	movlw	low _rxMsgData
  2163  000F48  25D8               	addwf	readUartMessage@idx& (0+255),w,b
  2164  000F4A  6ED9               	movwf	fsr2l,c
  2165  000F4C  0E01               	movlw	high _rxMsgData
  2166  000F4E  21D9               	addwfc	(readUartMessage@idx+1)& (0+255),w,b
  2167  000F50  6EDA               	movwf	fsr2h,c
  2168  000F52  C0DA  FFDF         	movff	readUartMessage@chRec,indf2
  2169                           
  2170                           ; BSR set to: 0
  2171  000F56  4BD8               	infsnz	readUartMessage@idx& (0+255),f,b
  2172  000F58  2BD9               	incf	(readUartMessage@idx+1)& (0+255),f,b
  2173  000F5A                     l209:
  2174                           
  2175                           ; BSR set to: 0
  2176                           
  2177                           ; BSR set to: 0
  2178  000F5A  51DF               	movf	_dataSize& (0+255),w,b
  2179  000F5C  6FD4               	movwf	??_readUartMessage& (0+255),b
  2180  000F5E  6BD5               	clrf	(??_readUartMessage+1)& (0+255),b
  2181  000F60  51D4               	movf	??_readUartMessage& (0+255),w,b
  2182  000F62  5DD8               	subwf	readUartMessage@idx& (0+255),w,b
  2183  000F64  51D9               	movf	(readUartMessage@idx+1)& (0+255),w,b
  2184  000F66  0A80               	xorlw	128
  2185  000F68  6FD6               	movwf	(??_readUartMessage+2)& (0+255),b
  2186  000F6A  51D5               	movf	(??_readUartMessage+1)& (0+255),w,b
  2187  000F6C  0A80               	xorlw	128
  2188  000F6E  59D6               	subwfb	(??_readUartMessage+2)& (0+255),w,b
  2189  000F70  A0D8               	btfss	status,0,c
  2190  000F72  D7D5               	goto	l210
  2191                           
  2192                           ; BSR set to: 0
  2193                           ;EusartApp.c: 112: }
  2194                           ;EusartApp.c: 114: cState = CHECK_CRC;
  2195                           
  2196                           ; BSR set to: 0
  2197  000F74  0E06               	movlw	6
  2198  000F76  6FE2               	movwf	_cState& (0+255),b
  2199                           
  2200                           ; BSR set to: 0
  2201                           ;EusartApp.c: 115: }
  2202                           ;EusartApp.c: 116: break;
  2203  000F78  0012               	return	
  2204  000F7A                     
  2205                           ; BSR set to: 0
  2206                           ;EusartApp.c: 119: if(eusart1RxCount >= 1)
  2207                           
  2208                           ; BSR set to: 0
  2209  000F7A  51E3               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  2210  000F7C  B4D8               	btfsc	status,2,c
  2211  000F7E  0012               	return	
  2212                           
  2213                           ; BSR set to: 0
  2214                           ;EusartApp.c: 120: {
  2215                           ;EusartApp.c: 121: crcGiven = EUSART1_Read();
  2216  000F80  EC34  F01A         	call	_EUSART1_Read	;wreg free
  2217  000F84  0100               	movlb	0	; () banked
  2218  000F86  6FDD               	movwf	_crcGiven& (0+255),b
  2219                           
  2220                           ; BSR set to: 0
  2221                           ;EusartApp.c: 122: crcCalc = crc8(rxMsgQueue, (0x4) + msgCount);
  2222  000F88  0ECF               	movlw	low _rxMsgQueue
  2223  000F8A  6E18               	movwf	crc8@dataArray,c
  2224  000F8C  0E01               	movlw	high _rxMsgQueue
  2225  000F8E  6E19               	movwf	crc8@dataArray+1,c
  2226  000F90  0E04               	movlw	4
  2227  000F92  25DC               	addwf	_msgCount& (0+255),w,b
  2228  000F94  6E1A               	movwf	crc8@dataSize,c
  2229  000F96  6A1B               	clrf	crc8@dataSize+1,c
  2230  000F98  0E00               	movlw	0
  2231  000F9A  221B               	addwfc	crc8@dataSize+1,f,c
  2232  000F9C  ECA3  F019         	call	_crc8	;wreg free
  2233  000FA0  0100               	movlb	0	; () banked
  2234  000FA2  6FDE               	movwf	_crcCalc& (0+255),b
  2235                           
  2236                           ; BSR set to: 0
  2237                           ;EusartApp.c: 124: if(crcGiven == crcCalc)
  2238  000FA4  51DE               	movf	_crcCalc& (0+255),w,b
  2239  000FA6  19DD               	xorwf	_crcGiven& (0+255),w,b
  2240  000FA8  A4D8               	btfss	status,2,c
  2241  000FAA  D003               	goto	l214
  2242                           
  2243                           ; BSR set to: 0
  2244                           ;EusartApp.c: 125: {
  2245                           ;EusartApp.c: 126: cState = JUMP_FUNCTION;
  2246  000FAC  0E07               	movlw	7
  2247  000FAE  6FE2               	movwf	_cState& (0+255),b
  2248                           
  2249                           ;EusartApp.c: 127: }
  2250  000FB0  0012               	return	
  2251  000FB2                     l214:
  2252                           
  2253                           ; BSR set to: 0
  2254                           ;EusartApp.c: 128: else
  2255                           ;EusartApp.c: 129: {
  2256                           ;EusartApp.c: 130: cState = START_RX_MESSAGE_READ;
  2257                           
  2258                           ; BSR set to: 0
  2259  000FB2  0E00               	movlw	0
  2260  000FB4  6FE2               	movwf	_cState& (0+255),b
  2261                           
  2262                           ; BSR set to: 0
  2263                           ;EusartApp.c: 131: }
  2264                           ;EusartApp.c: 132: }
  2265                           ;EusartApp.c: 133: break;
  2266                           
  2267                           ; BSR set to: 0
  2268  000FB6  0012               	return	
  2269  000FB8                     
  2270                           ; BSR set to: 0
  2271                           ;EusartApp.c: 136: groupsArray[group - 1](request, rxMsgData);
  2272                           
  2273                           ; BSR set to: 0
  2274  000FB8  0EFE               	movlw	254
  2275  000FBA  6FD4               	movwf	??_readUartMessage& (0+255),b
  2276  000FBC  0EFF               	movlw	255
  2277  000FBE  6FD5               	movwf	(??_readUartMessage+1)& (0+255),b
  2278  000FC0  51E1               	movf	_group& (0+255),w,b
  2279  000FC2  6FD6               	movwf	(??_readUartMessage+2)& (0+255),b
  2280  000FC4  6BD7               	clrf	(??_readUartMessage+3)& (0+255),b
  2281  000FC6  90D8               	bcf	status,0,c
  2282  000FC8  37D6               	rlcf	(??_readUartMessage+2)& (0+255),f,b
  2283  000FCA  37D7               	rlcf	(??_readUartMessage+3)& (0+255),f,b
  2284  000FCC  51D4               	movf	??_readUartMessage& (0+255),w,b
  2285  000FCE  27D6               	addwf	(??_readUartMessage+2)& (0+255),f,b
  2286  000FD0  51D5               	movf	(??_readUartMessage+1)& (0+255),w,b
  2287  000FD2  23D7               	addwfc	(??_readUartMessage+3)& (0+255),f,b
  2288  000FD4  0EE3               	movlw	low _groupsArray
  2289  000FD6  25D6               	addwf	(??_readUartMessage+2)& (0+255),w,b
  2290  000FD8  6ED9               	movwf	fsr2l,c
  2291  000FDA  0E01               	movlw	high _groupsArray
  2292  000FDC  21D7               	addwfc	(??_readUartMessage+3)& (0+255),w,b
  2293  000FDE  6EDA               	movwf	fsr2h,c
  2294  000FE0  D801               	call	u8868
  2295  000FE2  D00F               	goto	u8869
  2296  000FE4                     u8868:
  2297  000FE4  0005               	push	
  2298  000FE6  6EFA               	movwf	pclath,c
  2299  000FE8  50DE               	movf	postinc2,w,c
  2300  000FEA  6EFD               	movwf	tosl,c
  2301  000FEC  50DE               	movf	postinc2,w,c
  2302  000FEE  6EFE               	movwf	tosh,c
  2303  000FF0  50F8               	movf	tblptru,w,c
  2304  000FF2  6EFF               	movwf	tosu,c
  2305  000FF4  50FA               	movf	pclath,w,c
  2306  000FF6  0EBB               	movlw	low _rxMsgData
  2307  000FF8  6FD0               	movwf	GroupDAC@data& (0+255),b
  2308  000FFA  0E01               	movlw	high _rxMsgData
  2309  000FFC  6FD1               	movwf	(GroupDAC@data+1)& (0+255),b
  2310  000FFE  51E0               	movf	_request& (0+255),w,b
  2311  001000  0012               	return		;indir
  2312  001002                     u8869:
  2313                           
  2314                           ;EusartApp.c: 137: cState = START_RX_MESSAGE_READ;
  2315  001002  0E00               	movlw	0
  2316  001004  0100               	movlb	0	; () banked
  2317  001006  6FE2               	movwf	_cState& (0+255),b
  2318                           
  2319                           ; BSR set to: 0
  2320                           ;EusartApp.c: 139: }
  2321                           
  2322                           ;EusartApp.c: 138: break;
  2323  001008  0012               	return	
  2324  00100A                     l190:
  2325                           
  2326                           ; BSR set to: 0
  2327                           
  2328                           ; BSR set to: 0
  2329  00100A  51E2               	movf	_cState& (0+255),w,b
  2330                           
  2331                           ; Switch size 1, requested type "space"
  2332                           ; Number of cases is 8, Range of values is 0 to 7
  2333                           ; switch strategies available:
  2334                           ; Name         Instructions Cycles
  2335                           ; simple_byte           25    13 (average)
  2336                           ;	Chosen strategy is simple_byte
  2337  00100C  0A00               	xorlw	0	; case 0
  2338  00100E  B4D8               	btfsc	status,2,c
  2339  001010  D72A               	goto	l191
  2340  001012  0A01               	xorlw	1	; case 1
  2341  001014  B4D8               	btfsc	status,2,c
  2342  001016  D72D               	goto	l194
  2343  001018  0A03               	xorlw	3	; case 2
  2344  00101A  B4D8               	btfsc	status,2,c
  2345  00101C  D742               	goto	l199
  2346  00101E  0A01               	xorlw	1	; case 3
  2347  001020  B4D8               	btfsc	status,2,c
  2348  001022  D74B               	goto	l201
  2349  001024  0A07               	xorlw	7	; case 4
  2350  001026  B4D8               	btfsc	status,2,c
  2351  001028  D754               	goto	l203
  2352  00102A  0A01               	xorlw	1	; case 5
  2353  00102C  B4D8               	btfsc	status,2,c
  2354  00102E  D763               	goto	l207
  2355  001030  0A03               	xorlw	3	; case 6
  2356  001032  B4D8               	btfsc	status,2,c
  2357  001034  D7A2               	goto	l212
  2358  001036  0A01               	xorlw	1	; case 7
  2359  001038  A4D8               	btfss	status,2,c
  2360  00103A  0012               	return	
  2361  00103C  D7BD               	goto	l216
  2362  00103E                     __end_of_readUartMessage:
  2363                           	opt stack 0
  2364                           tosu	equ	0xFFF
  2365                           tosh	equ	0xFFE
  2366                           tosl	equ	0xFFD
  2367                           pclath	equ	0xFFA
  2368                           tblptru	equ	0xFF8
  2369                           tblptrh	equ	0xFF7
  2370                           tblptrl	equ	0xFF6
  2371                           tablat	equ	0xFF5
  2372                           postinc0	equ	0xFEE
  2373                           wreg	equ	0xFE8
  2374                           postdec1	equ	0xFE5
  2375                           fsr1l	equ	0xFE1
  2376                           indf2	equ	0xFDF
  2377                           postinc2	equ	0xFDE
  2378                           fsr2h	equ	0xFDA
  2379                           fsr2l	equ	0xFD9
  2380                           status	equ	0xFD8
  2381                           
  2382 ;; *************** function _InitRxMessageParams *****************
  2383 ;; Defined at:
  2384 ;;		line 142 in file "EusartApp.c"
  2385 ;; Parameters:    Size  Location     Type
  2386 ;;		None
  2387 ;; Auto vars:     Size  Location     Type
  2388 ;;		None
  2389 ;; Return value:  Size  Location     Type
  2390 ;;                  1    wreg      void 
  2391 ;; Registers used:
  2392 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2393 ;; Tracked objects:
  2394 ;;		On entry : 0/0
  2395 ;;		On exit  : 0/0
  2396 ;;		Unchanged: 0/0
  2397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2398 ;;      Params:         0       0       0       0       0       0       0
  2399 ;;      Locals:         0       0       0       0       0       0       0
  2400 ;;      Temps:          0       0       0       0       0       0       0
  2401 ;;      Totals:         0       0       0       0       0       0       0
  2402 ;;Total ram usage:        0 bytes
  2403 ;; Hardware stack levels used:    1
  2404 ;; Hardware stack levels required when called:    5
  2405 ;; This function calls:
  2406 ;;		_ZeroArray
  2407 ;; This function is called by:
  2408 ;;		_readUartMessage
  2409 ;; This function uses a non-reentrant model
  2410 ;;
  2411                           
  2412                           	psect	text2
  2413  0038C6                     __ptext2:
  2414                           	opt stack 0
  2415  0038C6                     _InitRxMessageParams:
  2416                           	opt stack 24
  2417                           
  2418                           ;EusartApp.c: 146: dataSize = 0;
  2419                           
  2420                           ; BSR set to: 0
  2421                           ;incstack = 0
  2422  0038C6  0E00               	movlw	0
  2423  0038C8  0100               	movlb	0	; () banked
  2424  0038CA  6FDF               	movwf	_dataSize& (0+255),b
  2425                           
  2426                           ;EusartApp.c: 147: crcCalc = 0;
  2427  0038CC  0E00               	movlw	0
  2428  0038CE  6FDE               	movwf	_crcCalc& (0+255),b
  2429                           
  2430                           ;EusartApp.c: 148: crcGiven = 0;
  2431  0038D0  0E00               	movlw	0
  2432  0038D2  6FDD               	movwf	_crcGiven& (0+255),b
  2433                           
  2434                           ;EusartApp.c: 149: msgCount = 0;
  2435  0038D4  0E00               	movlw	0
  2436  0038D6  6FDC               	movwf	_msgCount& (0+255),b
  2437                           
  2438                           ; BSR set to: 0
  2439                           ;EusartApp.c: 150: ZeroArray(rxMsgQueue, (0x14));
  2440  0038D8  0ECF               	movlw	low _rxMsgQueue
  2441  0038DA  6E20               	movwf	ZeroArray@array,c
  2442  0038DC  0E01               	movlw	high _rxMsgQueue
  2443  0038DE  6E21               	movwf	ZeroArray@array+1,c
  2444  0038E0  0E00               	movlw	0
  2445  0038E2  6E23               	movwf	ZeroArray@size+1,c
  2446  0038E4  0E14               	movlw	20
  2447  0038E6  6E22               	movwf	ZeroArray@size,c
  2448  0038E8  EC29  F01D         	call	_ZeroArray
  2449  0038EC  0012               	return		;funcret
  2450  0038EE                     __end_of_InitRxMessageParams:
  2451                           	opt stack 0
  2452                           tosu	equ	0xFFF
  2453                           tosh	equ	0xFFE
  2454                           tosl	equ	0xFFD
  2455                           pclath	equ	0xFFA
  2456                           tblptru	equ	0xFF8
  2457                           tblptrh	equ	0xFF7
  2458                           tblptrl	equ	0xFF6
  2459                           tablat	equ	0xFF5
  2460                           postinc0	equ	0xFEE
  2461                           wreg	equ	0xFE8
  2462                           postdec1	equ	0xFE5
  2463                           fsr1l	equ	0xFE1
  2464                           indf2	equ	0xFDF
  2465                           postinc2	equ	0xFDE
  2466                           fsr2h	equ	0xFDA
  2467                           fsr2l	equ	0xFD9
  2468                           status	equ	0xFD8
  2469                           
  2470 ;; *************** function _GroupDAC *****************
  2471 ;; Defined at:
  2472 ;;		line 133 in file "MessageFunctions.c"
  2473 ;; Parameters:    Size  Location     Type
  2474 ;;  request         1    wreg     enum E12
  2475 ;;  data            2  112[BANK0 ] PTR unsigned char 
  2476 ;;		 -> rxMsgData(20), 
  2477 ;; Auto vars:     Size  Location     Type
  2478 ;;  request         1  114[BANK0 ] enum E12
  2479 ;; Return value:  Size  Location     Type
  2480 ;;                  1    wreg      void 
  2481 ;; Registers used:
  2482 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2483 ;; Tracked objects:
  2484 ;;		On entry : 0/0
  2485 ;;		On exit  : 0/0
  2486 ;;		Unchanged: 0/0
  2487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2488 ;;      Params:         0       2       0       0       0       0       0
  2489 ;;      Locals:         0       1       0       0       0       0       0
  2490 ;;      Temps:          0       0       0       0       0       0       0
  2491 ;;      Totals:         0       3       0       0       0       0       0
  2492 ;;Total ram usage:        3 bytes
  2493 ;; Hardware stack levels used:    1
  2494 ;; Hardware stack levels required when called:    7
  2495 ;; This function calls:
  2496 ;;		_DacSetValue
  2497 ;; This function is called by:
  2498 ;;		_readUartMessage
  2499 ;; This function uses a non-reentrant model
  2500 ;;
  2501                           
  2502                           	psect	text3
  2503  0039F6                     __ptext3:
  2504                           	opt stack 0
  2505  0039F6                     _GroupDAC:
  2506                           	opt stack 22
  2507                           
  2508                           ;incstack = 0
  2509                           ;GroupDAC@request stored from wreg
  2510  0039F6  0100               	movlb	0	; () banked
  2511  0039F8  6FD2               	movwf	GroupDAC@request& (0+255),b
  2512                           
  2513                           ;MessageFunctions.c: 135: switch (request)
  2514  0039FA  D007               	goto	l1239
  2515  0039FC                     
  2516                           ;MessageFunctions.c: 138: DacSetValue(data);
  2517  0039FC  C0D0  F02C         	movff	GroupDAC@data,DacSetValue@data
  2518  003A00  C0D1  F02D         	movff	GroupDAC@data+1,DacSetValue@data+1
  2519  003A04  ECDE  F01D         	call	_DacSetValue	;wreg free
  2520                           
  2521                           ;MessageFunctions.c: 143: }
  2522                           
  2523                           ;MessageFunctions.c: 142: break;
  2524                           
  2525                           ;MessageFunctions.c: 141: default:
  2526                           
  2527                           ;MessageFunctions.c: 139: break;
  2528  003A08  0012               	return	
  2529  003A0A                     l1239:
  2530  003A0A  0100               	movlb	0	; () banked
  2531  003A0C  51D2               	movf	GroupDAC@request& (0+255),w,b
  2532                           
  2533                           ; Switch size 1, requested type "space"
  2534                           ; Number of cases is 1, Range of values is 97 to 97
  2535                           ; switch strategies available:
  2536                           ; Name         Instructions Cycles
  2537                           ; simple_byte            4     3 (average)
  2538                           ;	Chosen strategy is simple_byte
  2539  003A0E  0A61               	xorlw	97	; case 97
  2540  003A10  A4D8               	btfss	status,2,c
  2541  003A12  0012               	return	
  2542  003A14  D7F3               	goto	l1240
  2543  003A16                     __end_of_GroupDAC:
  2544                           	opt stack 0
  2545                           tosu	equ	0xFFF
  2546                           tosh	equ	0xFFE
  2547                           tosl	equ	0xFFD
  2548                           pclath	equ	0xFFA
  2549                           tblptru	equ	0xFF8
  2550                           tblptrh	equ	0xFF7
  2551                           tblptrl	equ	0xFF6
  2552                           tablat	equ	0xFF5
  2553                           postinc0	equ	0xFEE
  2554                           wreg	equ	0xFE8
  2555                           postdec1	equ	0xFE5
  2556                           fsr1l	equ	0xFE1
  2557                           indf2	equ	0xFDF
  2558                           postinc2	equ	0xFDE
  2559                           fsr2h	equ	0xFDA
  2560                           fsr2l	equ	0xFD9
  2561                           status	equ	0xFD8
  2562                           
  2563 ;; *************** function _GroupFlashMemory *****************
  2564 ;; Defined at:
  2565 ;;		line 112 in file "MessageFunctions.c"
  2566 ;; Parameters:    Size  Location     Type
  2567 ;;  request         1    wreg     enum E12
  2568 ;;  data            2  112[BANK0 ] PTR unsigned char 
  2569 ;; Auto vars:     Size  Location     Type
  2570 ;;  request         1  115[BANK0 ] enum E12
  2571 ;; Return value:  Size  Location     Type
  2572 ;;                  1    wreg      void 
  2573 ;; Registers used:
  2574 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2575 ;; Tracked objects:
  2576 ;;		On entry : 0/0
  2577 ;;		On exit  : 0/0
  2578 ;;		Unchanged: 0/0
  2579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2580 ;;      Params:         0       2       0       0       0       0       0
  2581 ;;      Locals:         0       1       0       0       0       0       0
  2582 ;;      Temps:          0       1       0       0       0       0       0
  2583 ;;      Totals:         0       4       0       0       0       0       0
  2584 ;;Total ram usage:        4 bytes
  2585 ;; Hardware stack levels used:    1
  2586 ;; Hardware stack levels required when called:    7
  2587 ;; This function calls:
  2588 ;;		_FlashEreaseMem
  2589 ;;		_FlashReadCondition
  2590 ;;		_FlashReadUart
  2591 ;; This function is called by:
  2592 ;;		_readUartMessage
  2593 ;; This function uses a non-reentrant model
  2594 ;;
  2595                           
  2596                           	psect	text4
  2597  003424                     __ptext4:
  2598                           	opt stack 0
  2599  003424                     _GroupFlashMemory:
  2600                           	opt stack 22
  2601                           
  2602                           ;incstack = 0
  2603                           ;GroupFlashMemory@request stored from wreg
  2604  003424  0100               	movlb	0	; () banked
  2605  003426  6FD3               	movwf	GroupFlashMemory@request& (0+255),b
  2606                           
  2607                           ;MessageFunctions.c: 114: switch (request)
  2608  003428  D013               	goto	l1230
  2609  00342A                     
  2610                           ;MessageFunctions.c: 117: FlashEreaseMem();
  2611  00342A  EC51  F019         	call	_FlashEreaseMem	;wreg free
  2612                           
  2613                           ;MessageFunctions.c: 118: break;
  2614  00342E  0012               	return	
  2615  003430                     
  2616                           ;MessageFunctions.c: 121: FlashReadCondition();
  2617  003430  EC16  F00E         	call	_FlashReadCondition	;wreg free
  2618                           
  2619                           ;MessageFunctions.c: 122: break;
  2620  003434  0012               	return	
  2621  003436                     
  2622                           ;MessageFunctions.c: 125: FlashReadUart((int)data[0]);
  2623  003436  C0D0  FFD9         	movff	GroupFlashMemory@data,fsr2l
  2624  00343A  C0D1  FFDA         	movff	GroupFlashMemory@data+1,fsr2h
  2625  00343E  50DF               	movf	indf2,w,c
  2626  003440  0100               	movlb	0	; () banked
  2627  003442  6FD2               	movwf	??_GroupFlashMemory& (0+255),b
  2628  003444  51D2               	movf	??_GroupFlashMemory& (0+255),w,b
  2629  003446  6E2C               	movwf	FlashReadUart@numOfSampleToRead,c
  2630  003448  6A2D               	clrf	FlashReadUart@numOfSampleToRead+1,c
  2631  00344A  EC52  F003         	call	_FlashReadUart	;wreg free
  2632                           
  2633                           ;MessageFunctions.c: 130: }
  2634                           
  2635                           ;MessageFunctions.c: 129: break;
  2636                           
  2637                           ;MessageFunctions.c: 128: default:
  2638                           
  2639                           ;MessageFunctions.c: 126: break;
  2640  00344E  0012               	return	
  2641  003450                     l1230:
  2642  003450  0100               	movlb	0	; () banked
  2643  003452  51D3               	movf	GroupFlashMemory@request& (0+255),w,b
  2644                           
  2645                           ; Switch size 1, requested type "space"
  2646                           ; Number of cases is 3, Range of values is 81 to 83
  2647                           ; switch strategies available:
  2648                           ; Name         Instructions Cycles
  2649                           ; simple_byte           10     6 (average)
  2650                           ;	Chosen strategy is simple_byte
  2651  003454  0A51               	xorlw	81	; case 81
  2652  003456  B4D8               	btfsc	status,2,c
  2653  003458  D7E8               	goto	l1231
  2654  00345A  0A03               	xorlw	3	; case 82
  2655  00345C  B4D8               	btfsc	status,2,c
  2656  00345E  D7E8               	goto	l1233
  2657  003460  0A01               	xorlw	1	; case 83
  2658  003462  A4D8               	btfss	status,2,c
  2659  003464  0012               	return	
  2660  003466  D7E7               	goto	l1234
  2661  003468                     __end_of_GroupFlashMemory:
  2662                           	opt stack 0
  2663                           tosu	equ	0xFFF
  2664                           tosh	equ	0xFFE
  2665                           tosl	equ	0xFFD
  2666                           pclath	equ	0xFFA
  2667                           tblptru	equ	0xFF8
  2668                           tblptrh	equ	0xFF7
  2669                           tblptrl	equ	0xFF6
  2670                           tablat	equ	0xFF5
  2671                           postinc0	equ	0xFEE
  2672                           wreg	equ	0xFE8
  2673                           postdec1	equ	0xFE5
  2674                           fsr1l	equ	0xFE1
  2675                           indf2	equ	0xFDF
  2676                           postinc2	equ	0xFDE
  2677                           fsr2h	equ	0xFDA
  2678                           fsr2l	equ	0xFD9
  2679                           status	equ	0xFD8
  2680                           
  2681 ;; *************** function _GroupAdc *****************
  2682 ;; Defined at:
  2683 ;;		line 51 in file "MessageFunctions.c"
  2684 ;; Parameters:    Size  Location     Type
  2685 ;;  request         1    wreg     enum E12
  2686 ;;  data            2  112[BANK0 ] PTR unsigned char 
  2687 ;; Auto vars:     Size  Location     Type
  2688 ;;  request         1  114[BANK0 ] enum E12
  2689 ;; Return value:  Size  Location     Type
  2690 ;;                  1    wreg      void 
  2691 ;; Registers used:
  2692 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2693 ;; Tracked objects:
  2694 ;;		On entry : 0/0
  2695 ;;		On exit  : 0/0
  2696 ;;		Unchanged: 0/0
  2697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2698 ;;      Params:         0       2       0       0       0       0       0
  2699 ;;      Locals:         0       1       0       0       0       0       0
  2700 ;;      Temps:          0       0       0       0       0       0       0
  2701 ;;      Totals:         0       3       0       0       0       0       0
  2702 ;;Total ram usage:        3 bytes
  2703 ;; Hardware stack levels used:    1
  2704 ;; Hardware stack levels required when called:    7
  2705 ;; This function calls:
  2706 ;;		_SetAdcOperationMode
  2707 ;;		_SetChannelMode
  2708 ;;		_SetConversionResultFormat
  2709 ;; This function is called by:
  2710 ;;		_readUartMessage
  2711 ;; This function uses a non-reentrant model
  2712 ;;
  2713                           
  2714                           	psect	text5
  2715  003394                     __ptext5:
  2716                           	opt stack 0
  2717  003394                     _GroupAdc:
  2718                           	opt stack 22
  2719                           
  2720                           ;incstack = 0
  2721                           ;GroupAdc@request stored from wreg
  2722  003394  0100               	movlb	0	; () banked
  2723  003396  6FD2               	movwf	GroupAdc@request& (0+255),b
  2724                           
  2725                           ;MessageFunctions.c: 53: switch (request)
  2726  003398  D015               	goto	l1207
  2727  00339A                     
  2728                           ;MessageFunctions.c: 56: SetAdcOperationMode(data);
  2729  00339A  C0D0  F02C         	movff	GroupAdc@data,SetAdcOperationMode@data
  2730  00339E  C0D1  F02D         	movff	GroupAdc@data+1,SetAdcOperationMode@data+1
  2731  0033A2  ECEA  F01D         	call	_SetAdcOperationMode	;wreg free
  2732                           
  2733                           ;MessageFunctions.c: 57: break;
  2734  0033A6  0012               	return	
  2735  0033A8                     
  2736                           ;MessageFunctions.c: 60: SetChannelMode(data);
  2737  0033A8  C0D0  F02C         	movff	GroupAdc@data,SetChannelMode@data
  2738  0033AC  C0D1  F02D         	movff	GroupAdc@data+1,SetChannelMode@data+1
  2739  0033B0  EC06  F01C         	call	_SetChannelMode	;wreg free
  2740                           
  2741                           ;MessageFunctions.c: 61: break;
  2742  0033B4  0012               	return	
  2743  0033B6                     
  2744                           ;MessageFunctions.c: 64: SetConversionResultFormat(data);
  2745  0033B6  C0D0  F02C         	movff	GroupAdc@data,SetConversionResultFormat@data
  2746  0033BA  C0D1  F02D         	movff	GroupAdc@data+1,SetConversionResultFormat@data+1
  2747  0033BE  ECE4  F01D         	call	_SetConversionResultFormat	;wreg free
  2748                           
  2749                           ;MessageFunctions.c: 69: }
  2750                           
  2751                           ;MessageFunctions.c: 68: break;
  2752                           
  2753                           ;MessageFunctions.c: 67: default:
  2754                           
  2755                           ;MessageFunctions.c: 65: break;
  2756  0033C2  0012               	return	
  2757  0033C4                     l1207:
  2758  0033C4  0100               	movlb	0	; () banked
  2759  0033C6  51D2               	movf	GroupAdc@request& (0+255),w,b
  2760                           
  2761                           ; Switch size 1, requested type "space"
  2762                           ; Number of cases is 3, Range of values is 49 to 51
  2763                           ; switch strategies available:
  2764                           ; Name         Instructions Cycles
  2765                           ; simple_byte           10     6 (average)
  2766                           ;	Chosen strategy is simple_byte
  2767  0033C8  0A31               	xorlw	49	; case 49
  2768  0033CA  B4D8               	btfsc	status,2,c
  2769  0033CC  D7E6               	goto	l1208
  2770  0033CE  0A03               	xorlw	3	; case 50
  2771  0033D0  B4D8               	btfsc	status,2,c
  2772  0033D2  D7EA               	goto	l1210
  2773  0033D4  0A01               	xorlw	1	; case 51
  2774  0033D6  A4D8               	btfss	status,2,c
  2775  0033D8  0012               	return	
  2776  0033DA  D7ED               	goto	l1211
  2777  0033DC                     __end_of_GroupAdc:
  2778                           	opt stack 0
  2779                           tosu	equ	0xFFF
  2780                           tosh	equ	0xFFE
  2781                           tosl	equ	0xFFD
  2782                           pclath	equ	0xFFA
  2783                           tblptru	equ	0xFF8
  2784                           tblptrh	equ	0xFF7
  2785                           tblptrl	equ	0xFF6
  2786                           tablat	equ	0xFF5
  2787                           postinc0	equ	0xFEE
  2788                           wreg	equ	0xFE8
  2789                           postdec1	equ	0xFE5
  2790                           fsr1l	equ	0xFE1
  2791                           indf2	equ	0xFDF
  2792                           postinc2	equ	0xFDE
  2793                           fsr2h	equ	0xFDA
  2794                           fsr2l	equ	0xFD9
  2795                           status	equ	0xFD8
  2796                           
  2797 ;; *************** function _GroupStatusAndVersion *****************
  2798 ;; Defined at:
  2799 ;;		line 34 in file "MessageFunctions.c"
  2800 ;; Parameters:    Size  Location     Type
  2801 ;;  request         1    wreg     enum E12
  2802 ;;  data            3  112[BANK0 ] PTR unsigned char 
  2803 ;; Auto vars:     Size  Location     Type
  2804 ;;  request         1  115[BANK0 ] enum E12
  2805 ;; Return value:  Size  Location     Type
  2806 ;;                  1    wreg      void 
  2807 ;; Registers used:
  2808 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2809 ;; Tracked objects:
  2810 ;;		On entry : 0/0
  2811 ;;		On exit  : 0/0
  2812 ;;		Unchanged: 0/0
  2813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2814 ;;      Params:         0       2       0       0       0       0       0
  2815 ;;      Locals:         0       1       0       0       0       0       0
  2816 ;;      Temps:          0       0       0       0       0       0       0
  2817 ;;      Totals:         0       3       0       0       0       0       0
  2818 ;;Total ram usage:        3 bytes
  2819 ;; Hardware stack levels used:    1
  2820 ;; Hardware stack levels required when called:    6
  2821 ;; This function calls:
  2822 ;;		_GetMcuFwVersion
  2823 ;;		_GetMcuRunTime
  2824 ;; This function is called by:
  2825 ;;		_readUartMessage
  2826 ;; This function uses a non-reentrant model
  2827 ;;
  2828                           
  2829                           	psect	text6
  2830  00398A                     __ptext6:
  2831                           	opt stack 0
  2832  00398A                     _GroupStatusAndVersion:
  2833                           	opt stack 23
  2834                           
  2835                           ;incstack = 0
  2836                           ;GroupStatusAndVersion@request stored from wreg
  2837  00398A  0100               	movlb	0	; () banked
  2838  00398C  6FD3               	movwf	GroupStatusAndVersion@request& (0+255),b
  2839                           
  2840                           ;MessageFunctions.c: 36: switch (request)
  2841  00398E  D006               	goto	l1199
  2842  003990                     
  2843                           ;MessageFunctions.c: 39: GetMcuFwVersion();
  2844  003990  EC4B  F015         	call	_GetMcuFwVersion	;wreg free
  2845                           
  2846                           ;MessageFunctions.c: 40: break;
  2847  003994  0012               	return	
  2848  003996                     
  2849                           ;MessageFunctions.c: 43: GetMcuRunTime();
  2850  003996  EC03  F011         	call	_GetMcuRunTime	;wreg free
  2851                           
  2852                           ;MessageFunctions.c: 48: }
  2853                           
  2854                           ;MessageFunctions.c: 47: break;
  2855                           
  2856                           ;MessageFunctions.c: 46: default:
  2857                           
  2858                           ;MessageFunctions.c: 44: break;
  2859  00399A  0012               	return	
  2860  00399C                     l1199:
  2861  00399C  0100               	movlb	0	; () banked
  2862  00399E  51D3               	movf	GroupStatusAndVersion@request& (0+255),w,b
  2863                           
  2864                           ; Switch size 1, requested type "space"
  2865                           ; Number of cases is 2, Range of values is 33 to 34
  2866                           ; switch strategies available:
  2867                           ; Name         Instructions Cycles
  2868                           ; simple_byte            7     4 (average)
  2869                           ;	Chosen strategy is simple_byte
  2870  0039A0  0A21               	xorlw	33	; case 33
  2871  0039A2  B4D8               	btfsc	status,2,c
  2872  0039A4  D7F8               	goto	l1202
  2873  0039A6  0A03               	xorlw	3	; case 34
  2874  0039A8  A4D8               	btfss	status,2,c
  2875  0039AA  0012               	return	
  2876  0039AC  D7F1               	goto	l1200
  2877  0039AE                     __end_of_GroupStatusAndVersion:
  2878                           	opt stack 0
  2879                           tosu	equ	0xFFF
  2880                           tosh	equ	0xFFE
  2881                           tosl	equ	0xFFD
  2882                           pclath	equ	0xFFA
  2883                           tblptru	equ	0xFF8
  2884                           tblptrh	equ	0xFF7
  2885                           tblptrl	equ	0xFF6
  2886                           tablat	equ	0xFF5
  2887                           postinc0	equ	0xFEE
  2888                           wreg	equ	0xFE8
  2889                           postdec1	equ	0xFE5
  2890                           fsr1l	equ	0xFE1
  2891                           indf2	equ	0xFDF
  2892                           postinc2	equ	0xFDE
  2893                           fsr2h	equ	0xFDA
  2894                           fsr2l	equ	0xFD9
  2895                           status	equ	0xFD8
  2896                           
  2897 ;; *************** function _GroupControlMcu *****************
  2898 ;; Defined at:
  2899 ;;		line 11 in file "MessageFunctions.c"
  2900 ;; Parameters:    Size  Location     Type
  2901 ;;  request         1    wreg     enum E12
  2902 ;;  data            3  112[BANK0 ] PTR unsigned char 
  2903 ;; Auto vars:     Size  Location     Type
  2904 ;;  request         1  115[BANK0 ] enum E12
  2905 ;; Return value:  Size  Location     Type
  2906 ;;                  1    wreg      void 
  2907 ;; Registers used:
  2908 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2909 ;; Tracked objects:
  2910 ;;		On entry : 0/0
  2911 ;;		On exit  : 0/0
  2912 ;;		Unchanged: 0/0
  2913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2914 ;;      Params:         0       2       0       0       0       0       0
  2915 ;;      Locals:         0       1       0       0       0       0       0
  2916 ;;      Temps:          0       0       0       0       0       0       0
  2917 ;;      Totals:         0       3       0       0       0       0       0
  2918 ;;Total ram usage:        3 bytes
  2919 ;; Hardware stack levels used:    1
  2920 ;; Hardware stack levels required when called:    7
  2921 ;; This function calls:
  2922 ;;		_ResetMcu
  2923 ;;		_testLeds
  2924 ;; This function is called by:
  2925 ;;		_readUartMessage
  2926 ;; This function uses a non-reentrant model
  2927 ;;
  2928                           
  2929                           	psect	text7
  2930  0037DC                     __ptext7:
  2931                           	opt stack 0
  2932  0037DC                     _GroupControlMcu:
  2933                           	opt stack 22
  2934                           
  2935                           ;incstack = 0
  2936                           ;GroupControlMcu@request stored from wreg
  2937  0037DC  0100               	movlb	0	; () banked
  2938  0037DE  6FD3               	movwf	GroupControlMcu@request& (0+255),b
  2939                           
  2940                           ;MessageFunctions.c: 13: switch (request)
  2941  0037E0  D006               	goto	l1189
  2942  0037E2                     
  2943                           ;MessageFunctions.c: 16: testLeds();
  2944  0037E2  EC25  F017         	call	_testLeds	;wreg free
  2945                           
  2946                           ;MessageFunctions.c: 17: break;
  2947  0037E6  0012               	return	
  2948  0037E8                     
  2949                           ;MessageFunctions.c: 20: ResetMcu();
  2950  0037E8  ECC3  F01D         	call	_ResetMcu	;wreg free
  2951                           
  2952                           ;MessageFunctions.c: 31: }
  2953                           
  2954                           ;MessageFunctions.c: 30: break;
  2955                           
  2956                           ;MessageFunctions.c: 29: default:
  2957                           
  2958                           ;MessageFunctions.c: 27: break;
  2959                           
  2960                           ;MessageFunctions.c: 26: case CONTROL_PA2_SET:
  2961                           
  2962                           ;MessageFunctions.c: 24: break;
  2963                           
  2964                           ;MessageFunctions.c: 23: case CONTROL_PA1_SET:
  2965                           
  2966                           ;MessageFunctions.c: 21: break;
  2967  0037EC  0012               	return	
  2968  0037EE                     l1189:
  2969  0037EE  0100               	movlb	0	; () banked
  2970  0037F0  51D3               	movf	GroupControlMcu@request& (0+255),w,b
  2971                           
  2972                           ; Switch size 1, requested type "space"
  2973                           ; Number of cases is 4, Range of values is 17 to 20
  2974                           ; switch strategies available:
  2975                           ; Name         Instructions Cycles
  2976                           ; simple_byte           13     7 (average)
  2977                           ;	Chosen strategy is simple_byte
  2978  0037F2  0A11               	xorlw	17	; case 17
  2979  0037F4  B4D8               	btfsc	status,2,c
  2980  0037F6  D7F8               	goto	l1192
  2981  0037F8  0A03               	xorlw	3	; case 18
  2982  0037FA  B4D8               	btfsc	status,2,c
  2983  0037FC  0012               	return	
  2984  0037FE  0A01               	xorlw	1	; case 19
  2985  003800  B4D8               	btfsc	status,2,c
  2986  003802  0012               	return	
  2987  003804  0A07               	xorlw	7	; case 20
  2988  003806  A4D8               	btfss	status,2,c
  2989  003808  0012               	return	
  2990  00380A  D7EB               	goto	l1190
  2991  00380C                     __end_of_GroupControlMcu:
  2992                           	opt stack 0
  2993                           tosu	equ	0xFFF
  2994                           tosh	equ	0xFFE
  2995                           tosl	equ	0xFFD
  2996                           pclath	equ	0xFFA
  2997                           tblptru	equ	0xFF8
  2998                           tblptrh	equ	0xFF7
  2999                           tblptrl	equ	0xFF6
  3000                           tablat	equ	0xFF5
  3001                           postinc0	equ	0xFEE
  3002                           wreg	equ	0xFE8
  3003                           postdec1	equ	0xFE5
  3004                           fsr1l	equ	0xFE1
  3005                           indf2	equ	0xFDF
  3006                           postinc2	equ	0xFDE
  3007                           fsr2h	equ	0xFDA
  3008                           fsr2l	equ	0xFD9
  3009                           status	equ	0xFD8
  3010                           
  3011 ;; *************** function _GroupSynthesizers *****************
  3012 ;; Defined at:
  3013 ;;		line 71 in file "MessageFunctions.c"
  3014 ;; Parameters:    Size  Location     Type
  3015 ;;  request         1    wreg     enum E12
  3016 ;;  data            2  112[BANK0 ] PTR unsigned char 
  3017 ;; Auto vars:     Size  Location     Type
  3018 ;;  request         1  114[BANK0 ] enum E12
  3019 ;; Return value:  Size  Location     Type
  3020 ;;                  1    wreg      void 
  3021 ;; Registers used:
  3022 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3023 ;; Tracked objects:
  3024 ;;		On entry : 0/0
  3025 ;;		On exit  : 0/0
  3026 ;;		Unchanged: 0/0
  3027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3028 ;;      Params:         0       2       0       0       0       0       0
  3029 ;;      Locals:         0       1       0       0       0       0       0
  3030 ;;      Temps:          0       0       0       0       0       0       0
  3031 ;;      Totals:         0       3       0       0       0       0       0
  3032 ;;Total ram usage:        3 bytes
  3033 ;; Hardware stack levels used:    1
  3034 ;; Hardware stack levels required when called:   11
  3035 ;; This function calls:
  3036 ;;		_SetSynthOper
  3037 ;;		_SynthReadData
  3038 ;;		_UpdateSynthFreq
  3039 ;; This function is called by:
  3040 ;;		_readUartMessage
  3041 ;; This function uses a non-reentrant model
  3042 ;;
  3043                           
  3044                           	psect	text8
  3045  002C46                     __ptext8:
  3046                           	opt stack 0
  3047  002C46                     _GroupSynthesizers:
  3048                           	opt stack 18
  3049                           
  3050                           ;incstack = 0
  3051                           ;GroupSynthesizers@request stored from wreg
  3052  002C46  0100               	movlb	0	; () banked
  3053  002C48  6FD2               	movwf	GroupSynthesizers@request& (0+255),b
  3054                           
  3055                           ;MessageFunctions.c: 73: switch (request)
  3056  002C4A  D028               	goto	l1216
  3057  002C4C                     
  3058                           ;MessageFunctions.c: 84: UpdateSynthFreq(SYNTH_TX, data);
  3059  002C4C  C0D0  F087         	movff	GroupSynthesizers@data,UpdateSynthFreq@data
  3060  002C50  C0D1  F088         	movff	GroupSynthesizers@data+1,UpdateSynthFreq@data+1
  3061  002C54  0E00               	movlw	0
  3062  002C56  EC1B  F00F         	call	_UpdateSynthFreq
  3063                           
  3064                           ;MessageFunctions.c: 85: break;
  3065  002C5A  0012               	return	
  3066  002C5C                     
  3067                           ;MessageFunctions.c: 88: UpdateSynthFreq(SYNTH_RX, data);
  3068  002C5C  C0D0  F087         	movff	GroupSynthesizers@data,UpdateSynthFreq@data
  3069  002C60  C0D1  F088         	movff	GroupSynthesizers@data+1,UpdateSynthFreq@data+1
  3070  002C64  0E01               	movlw	1
  3071  002C66  EC1B  F00F         	call	_UpdateSynthFreq
  3072                           
  3073                           ;MessageFunctions.c: 89: break;
  3074  002C6A  0012               	return	
  3075  002C6C                     
  3076                           ;MessageFunctions.c: 92: SetSynthOper(SYNTH_RX);
  3077  002C6C  0E01               	movlw	1
  3078  002C6E  ECAA  F016         	call	_SetSynthOper
  3079                           
  3080                           ;MessageFunctions.c: 93: break;
  3081  002C72  0012               	return	
  3082  002C74                     
  3083                           ;MessageFunctions.c: 96: SetSynthOper(SYNTH_TX);
  3084  002C74  0E00               	movlw	0
  3085  002C76  ECAA  F016         	call	_SetSynthOper
  3086                           
  3087                           ;MessageFunctions.c: 97: break;
  3088  002C7A  0012               	return	
  3089  002C7C                     
  3090                           ;MessageFunctions.c: 100: SynthReadData(SYNTH_RX, data);
  3091  002C7C  C0D0  F0C8         	movff	GroupSynthesizers@data,SynthReadData@data
  3092  002C80  C0D1  F0C9         	movff	GroupSynthesizers@data+1,SynthReadData@data+1
  3093  002C84  0E01               	movlw	1
  3094  002C86  EC33  F005         	call	_SynthReadData
  3095                           
  3096                           ;MessageFunctions.c: 101: break;
  3097  002C8A  0012               	return	
  3098  002C8C                     
  3099                           ;MessageFunctions.c: 104: SynthReadData(SYNTH_TX, data);
  3100  002C8C  C0D0  F0C8         	movff	GroupSynthesizers@data,SynthReadData@data
  3101  002C90  C0D1  F0C9         	movff	GroupSynthesizers@data+1,SynthReadData@data+1
  3102  002C94  0E00               	movlw	0
  3103  002C96  EC33  F005         	call	_SynthReadData
  3104                           
  3105                           ;MessageFunctions.c: 109: }
  3106                           
  3107                           ;MessageFunctions.c: 108: break;
  3108                           
  3109                           ;MessageFunctions.c: 107: default:
  3110                           
  3111                           ;MessageFunctions.c: 105: break;
  3112  002C9A  0012               	return	
  3113  002C9C                     l1216:
  3114  002C9C  0100               	movlb	0	; () banked
  3115  002C9E  51D2               	movf	GroupSynthesizers@request& (0+255),w,b
  3116                           
  3117                           ; Switch size 1, requested type "space"
  3118                           ; Number of cases is 8, Range of values is 64 to 71
  3119                           ; switch strategies available:
  3120                           ; Name         Instructions Cycles
  3121                           ; simple_byte           25    13 (average)
  3122                           ;	Chosen strategy is simple_byte
  3123  002CA0  0A40               	xorlw	64	; case 64
  3124  002CA2  B4D8               	btfsc	status,2,c
  3125  002CA4  0012               	return	
  3126  002CA6  0A01               	xorlw	1	; case 65
  3127  002CA8  B4D8               	btfsc	status,2,c
  3128  002CAA  0012               	return	
  3129  002CAC  0A03               	xorlw	3	; case 66
  3130  002CAE  B4D8               	btfsc	status,2,c
  3131  002CB0  D7CD               	goto	l1220
  3132  002CB2  0A01               	xorlw	1	; case 67
  3133  002CB4  B4D8               	btfsc	status,2,c
  3134  002CB6  D7D2               	goto	l1221
  3135  002CB8  0A07               	xorlw	7	; case 68
  3136  002CBA  B4D8               	btfsc	status,2,c
  3137  002CBC  D7D7               	goto	l1222
  3138  002CBE  0A01               	xorlw	1	; case 69
  3139  002CC0  B4D8               	btfsc	status,2,c
  3140  002CC2  D7D8               	goto	l1223
  3141  002CC4  0A03               	xorlw	3	; case 70
  3142  002CC6  B4D8               	btfsc	status,2,c
  3143  002CC8  D7D9               	goto	l1224
  3144  002CCA  0A01               	xorlw	1	; case 71
  3145  002CCC  A4D8               	btfss	status,2,c
  3146  002CCE  0012               	return	
  3147  002CD0  D7DD               	goto	l1225
  3148  002CD2                     __end_of_GroupSynthesizers:
  3149                           	opt stack 0
  3150                           tosu	equ	0xFFF
  3151                           tosh	equ	0xFFE
  3152                           tosl	equ	0xFFD
  3153                           pclath	equ	0xFFA
  3154                           tblptru	equ	0xFF8
  3155                           tblptrh	equ	0xFF7
  3156                           tblptrl	equ	0xFF6
  3157                           tablat	equ	0xFF5
  3158                           postinc0	equ	0xFEE
  3159                           wreg	equ	0xFE8
  3160                           postdec1	equ	0xFE5
  3161                           fsr1l	equ	0xFE1
  3162                           indf2	equ	0xFDF
  3163                           postinc2	equ	0xFDE
  3164                           fsr2h	equ	0xFDA
  3165                           fsr2l	equ	0xFD9
  3166                           status	equ	0xFD8
  3167                           
  3168 ;; *************** function _UpdateSynthFreq *****************
  3169 ;; Defined at:
  3170 ;;		line 68 in file "SyntApp.c"
  3171 ;; Parameters:    Size  Location     Type
  3172 ;;  cType           1    wreg     enum E1
  3173 ;;  data            2   39[BANK0 ] PTR unsigned char 
  3174 ;; Auto vars:     Size  Location     Type
  3175 ;;  cType           1   41[BANK0 ] enum E1
  3176 ;;  retVal          8   42[BANK0 ] struct .
  3177 ;; Return value:  Size  Location     Type
  3178 ;;                  1    wreg      void 
  3179 ;; Registers used:
  3180 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3181 ;; Tracked objects:
  3182 ;;		On entry : 0/0
  3183 ;;		On exit  : 0/0
  3184 ;;		Unchanged: 0/0
  3185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3186 ;;      Params:         0       2       0       0       0       0       0
  3187 ;;      Locals:         0       9       0       0       0       0       0
  3188 ;;      Temps:          0       0       0       0       0       0       0
  3189 ;;      Totals:         0      11       0       0       0       0       0
  3190 ;;Total ram usage:       11 bytes
  3191 ;; Hardware stack levels used:    1
  3192 ;; Hardware stack levels required when called:    7
  3193 ;; This function calls:
  3194 ;;		_GetIntFromUartData
  3195 ;;		_SWSPI_send_word
  3196 ;;		_SendAckMessage
  3197 ;;		_StoreIntInEeprom
  3198 ;; This function is called by:
  3199 ;;		_GroupSynthesizers
  3200 ;; This function uses a non-reentrant model
  3201 ;;
  3202                           
  3203                           	psect	text9
  3204  001E36                     __ptext9:
  3205                           	opt stack 0
  3206  001E36                     _UpdateSynthFreq:
  3207                           	opt stack 21
  3208                           
  3209                           ;incstack = 0
  3210                           ;UpdateSynthFreq@cType stored from wreg
  3211  001E36  0100               	movlb	0	; () banked
  3212  001E38  6F89               	movwf	UpdateSynthFreq@cType& (0+255),b
  3213                           
  3214                           ;SyntApp.c: 70: INT_VAL retVal;
  3215                           ;SyntApp.c: 71: if(cntRegUpdate < 7)
  3216  001E3A  0E07               	movlw	7
  3217  001E3C  0101               	movlb	1	; () banked
  3218  001E3E  6178               	cpfslt	_cntRegUpdate& (0+255),b
  3219  001E40  D061               	goto	l502
  3220                           
  3221                           ; BSR set to: 1
  3222                           ;SyntApp.c: 72: {
  3223                           ;SyntApp.c: 73: retVal = GetIntFromUartData(10, data);
  3224  001E42  C087  F066         	movff	UpdateSynthFreq@data,GetIntFromUartData@data
  3225  001E46  C088  F067         	movff	UpdateSynthFreq@data+1,GetIntFromUartData@data+1
  3226  001E4A  0E0A               	movlw	10
  3227  001E4C  EC7C  F00B         	call	_GetIntFromUartData
  3228  001E50  EE20  F08A         	lfsr	2,UpdateSynthFreq@retVal
  3229  001E54  0E07               	movlw	7
  3230  001E56                     u8411:
  3231  001E56  CFEB FFDB          	movff	plusw0,plusw2
  3232  001E5A  06E8               	decf	wreg,f,c
  3233  001E5C  E2FC               	bc	u8411
  3234                           
  3235                           ;SyntApp.c: 74: SWSPI_send_word(cType, retVal.num, 3);
  3236  001E5E  C08A  F026         	movff	UpdateSynthFreq@retVal,SWSPI_send_word@data
  3237  001E62  C08B  F027         	movff	UpdateSynthFreq@retVal+1,SWSPI_send_word@data+1
  3238  001E66  C08C  F028         	movff	UpdateSynthFreq@retVal+2,SWSPI_send_word@data+2
  3239  001E6A  C08D  F029         	movff	UpdateSynthFreq@retVal+3,SWSPI_send_word@data+3
  3240  001E6E  0E03               	movlw	3
  3241  001E70  6E2A               	movwf	SWSPI_send_word@dataSize,c
  3242  001E72  0100               	movlb	0	; () banked
  3243  001E74  5189               	movf	UpdateSynthFreq@cType& (0+255),w,b
  3244  001E76  EC21  F014         	call	_SWSPI_send_word
  3245                           
  3246                           ;SyntApp.c: 75: if(cType == SYNTH_TX)
  3247  001E7A  0100               	movlb	0	; () banked
  3248  001E7C  5189               	movf	UpdateSynthFreq@cType& (0+255),w,b
  3249  001E7E  A4D8               	btfss	status,2,c
  3250  001E80  D01D               	goto	l503
  3251                           
  3252                           ; BSR set to: 0
  3253                           ;SyntApp.c: 76: {
  3254                           ;SyntApp.c: 77: StoreIntInEeprom(retVal.num, (0) | SYNTH_ADDRES[retVal.con], 4);
  3255  001E82  C08A  F021         	movff	UpdateSynthFreq@retVal,StoreIntInEeprom@data
  3256  001E86  C08B  F022         	movff	UpdateSynthFreq@retVal+1,StoreIntInEeprom@data+1
  3257  001E8A  C08C  F023         	movff	UpdateSynthFreq@retVal+2,StoreIntInEeprom@data+2
  3258  001E8E  C08D  F024         	movff	UpdateSynthFreq@retVal+3,StoreIntInEeprom@data+3
  3259  001E92  0E35               	movlw	low _SYNTH_ADDRES
  3260  001E94  258E               	addwf	(UpdateSynthFreq@retVal+4)& (0+255),w,b
  3261  001E96  6EF6               	movwf	tblptrl,c
  3262  001E98  0E06               	movlw	high _SYNTH_ADDRES
  3263  001E9A  218F               	addwfc	(UpdateSynthFreq@retVal+5)& (0+255),w,b
  3264  001E9C  6EF7               	movwf	tblptrh,c
  3265  001E9E                     	if	0	;There are less than 3 active tblptr bytes
  3266  001E9E                     	endif
  3267  001E9E  0008               	tblrd		*
  3268  001EA0  CFF5 F025          	movff	tablat,StoreIntInEeprom@address
  3269  001EA4  0E00               	movlw	0
  3270  001EA6  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  3271  001EA8  0E04               	movlw	4
  3272  001EAA  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  3273  001EAC  EC14  F01B         	call	_StoreIntInEeprom	;wreg free
  3274                           
  3275                           ;SyntApp.c: 78: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_REQ_ANTHER_TX_R
      +                          EG);
  3276  001EB0  0E48               	movlw	72
  3277  001EB2  6E24               	movwf	SendAckMessage@inRequest,c
  3278  001EB4  0E04               	movlw	4
  3279  001EB6  EC7A  F019         	call	_SendAckMessage
  3280                           
  3281                           ;SyntApp.c: 79: }
  3282  001EBA  D021               	goto	l505
  3283  001EBC                     l503:
  3284                           
  3285                           ;SyntApp.c: 80: else if(cType == SYNTH_RX)
  3286  001EBC  0100               	movlb	0	; () banked
  3287  001EBE  0589               	decf	UpdateSynthFreq@cType& (0+255),w,b
  3288  001EC0  A4D8               	btfss	status,2,c
  3289  001EC2  D01D               	goto	l505
  3290                           
  3291                           ; BSR set to: 0
  3292                           ;SyntApp.c: 81: {
  3293                           ;SyntApp.c: 82: StoreIntInEeprom(retVal.num, (0x20) | SYNTH_ADDRES[retVal.con], 4);
  3294  001EC4  C08A  F021         	movff	UpdateSynthFreq@retVal,StoreIntInEeprom@data
  3295  001EC8  C08B  F022         	movff	UpdateSynthFreq@retVal+1,StoreIntInEeprom@data+1
  3296  001ECC  C08C  F023         	movff	UpdateSynthFreq@retVal+2,StoreIntInEeprom@data+2
  3297  001ED0  C08D  F024         	movff	UpdateSynthFreq@retVal+3,StoreIntInEeprom@data+3
  3298  001ED4  0E35               	movlw	low _SYNTH_ADDRES
  3299  001ED6  258E               	addwf	(UpdateSynthFreq@retVal+4)& (0+255),w,b
  3300  001ED8  6EF6               	movwf	tblptrl,c
  3301  001EDA  0E06               	movlw	high _SYNTH_ADDRES
  3302  001EDC  218F               	addwfc	(UpdateSynthFreq@retVal+5)& (0+255),w,b
  3303  001EDE  6EF7               	movwf	tblptrh,c
  3304  001EE0                     	if	0	;There are less than 3 active tblptr bytes
  3305  001EE0                     	endif
  3306  001EE0  0008               	tblrd		*
  3307  001EE2  50F5               	movf	tablat,w,c
  3308  001EE4  0920               	iorlw	32
  3309  001EE6  6E25               	movwf	StoreIntInEeprom@address,c
  3310  001EE8  0E00               	movlw	0
  3311  001EEA  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  3312  001EEC  0E04               	movlw	4
  3313  001EEE  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  3314  001EF0  EC14  F01B         	call	_StoreIntInEeprom	;wreg free
  3315                           
  3316                           ;SyntApp.c: 83: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_REQ_ANTHER_RX_R
      +                          EG);
  3317  001EF4  0E49               	movlw	73
  3318  001EF6  6E24               	movwf	SendAckMessage@inRequest,c
  3319  001EF8  0E04               	movlw	4
  3320  001EFA  EC7A  F019         	call	_SendAckMessage
  3321  001EFE                     l505:
  3322                           
  3323                           ;SyntApp.c: 84: }
  3324                           ;SyntApp.c: 85: cntRegUpdate ++;
  3325  001EFE  0101               	movlb	1	; () banked
  3326  001F00  2B78               	incf	_cntRegUpdate& (0+255),f,b
  3327                           
  3328                           ;SyntApp.c: 86: }
  3329  001F02  0012               	return	
  3330  001F04                     l502:
  3331                           
  3332                           ; BSR set to: 1
  3333                           ;SyntApp.c: 88: else
  3334                           ;SyntApp.c: 89: {
  3335                           ;SyntApp.c: 90: cntRegUpdate = 0;
  3336                           
  3337                           ; BSR set to: 1
  3338  001F04  0E00               	movlw	0
  3339  001F06  6F78               	movwf	_cntRegUpdate& (0+255),b
  3340                           
  3341                           ;SyntApp.c: 91: if(cType == SYNTH_TX)
  3342  001F08  0100               	movlb	0	; () banked
  3343  001F0A  5189               	movf	UpdateSynthFreq@cType& (0+255),w,b
  3344  001F0C  A4D8               	btfss	status,2,c
  3345  001F0E  D006               	goto	l507
  3346                           
  3347                           ; BSR set to: 0
  3348                           ;SyntApp.c: 92: {
  3349                           ;SyntApp.c: 93: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_DOWN_SET);
  3350  001F10  0E42               	movlw	66
  3351  001F12  6E24               	movwf	SendAckMessage@inRequest,c
  3352  001F14  0E04               	movlw	4
  3353  001F16  EC7A  F019         	call	_SendAckMessage
  3354                           
  3355                           ;SyntApp.c: 94: }
  3356  001F1A  0012               	return	
  3357  001F1C                     l507:
  3358                           
  3359                           ;SyntApp.c: 95: else if(cType == SYNTH_RX)
  3360  001F1C  0100               	movlb	0	; () banked
  3361  001F1E  0589               	decf	UpdateSynthFreq@cType& (0+255),w,b
  3362  001F20  A4D8               	btfss	status,2,c
  3363  001F22  0012               	return	
  3364                           
  3365                           ; BSR set to: 0
  3366                           ;SyntApp.c: 96: {
  3367                           ;SyntApp.c: 97: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_UP_SET);
  3368  001F24  0E43               	movlw	67
  3369  001F26  6E24               	movwf	SendAckMessage@inRequest,c
  3370  001F28  0E04               	movlw	4
  3371  001F2A  EC7A  F019         	call	_SendAckMessage
  3372  001F2E  0012               	return	
  3373  001F30                     __end_of_UpdateSynthFreq:
  3374                           	opt stack 0
  3375                           tosu	equ	0xFFF
  3376                           tosh	equ	0xFFE
  3377                           tosl	equ	0xFFD
  3378                           pclath	equ	0xFFA
  3379                           tblptru	equ	0xFF8
  3380                           tblptrh	equ	0xFF7
  3381                           tblptrl	equ	0xFF6
  3382                           tablat	equ	0xFF5
  3383                           postinc0	equ	0xFEE
  3384                           plusw0	equ	0xFEB
  3385                           wreg	equ	0xFE8
  3386                           postdec1	equ	0xFE5
  3387                           fsr1l	equ	0xFE1
  3388                           indf2	equ	0xFDF
  3389                           postinc2	equ	0xFDE
  3390                           plusw2	equ	0xFDB
  3391                           fsr2h	equ	0xFDA
  3392                           fsr2l	equ	0xFD9
  3393                           status	equ	0xFD8
  3394                           
  3395 ;; *************** function _StoreIntInEeprom *****************
  3396 ;; Defined at:
  3397 ;;		line 109 in file "SystemCommon.c"
  3398 ;; Parameters:    Size  Location     Type
  3399 ;;  data            4   32[COMRAM] unsigned long 
  3400 ;;  address         1   36[COMRAM] unsigned char 
  3401 ;;  numOfByes       2   37[COMRAM] int 
  3402 ;; Auto vars:     Size  Location     Type
  3403 ;;  val             1   39[COMRAM] unsigned char 
  3404 ;;  idx             1   40[COMRAM] unsigned char 
  3405 ;; Return value:  Size  Location     Type
  3406 ;;                  1    wreg      void 
  3407 ;; Registers used:
  3408 ;;		wreg, status,2, status,0, cstack
  3409 ;; Tracked objects:
  3410 ;;		On entry : 0/0
  3411 ;;		On exit  : 0/0
  3412 ;;		Unchanged: 0/0
  3413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3414 ;;      Params:         7       0       0       0       0       0       0
  3415 ;;      Locals:         2       0       0       0       0       0       0
  3416 ;;      Temps:          0       0       0       0       0       0       0
  3417 ;;      Totals:         9       0       0       0       0       0       0
  3418 ;;Total ram usage:        9 bytes
  3419 ;; Hardware stack levels used:    1
  3420 ;; Hardware stack levels required when called:    5
  3421 ;; This function calls:
  3422 ;;		_EepromWrite
  3423 ;;		_make8
  3424 ;; This function is called by:
  3425 ;;		_UpdateSynthFreq
  3426 ;; This function uses a non-reentrant model
  3427 ;;
  3428                           
  3429                           	psect	text10
  3430  003628                     __ptext10:
  3431                           	opt stack 0
  3432  003628                     _StoreIntInEeprom:
  3433                           	opt stack 22
  3434                           
  3435                           ;SystemCommon.c: 111: for(uint8_t idx = numOfByes; idx; idx--)
  3436                           
  3437                           ;incstack = 0
  3438  003628  C026  F029         	movff	StoreIntInEeprom@numOfByes,StoreIntInEeprom@idx
  3439  00362C  D015               	goto	l1326
  3440  00362E                     
  3441                           ;SystemCommon.c: 112: {
  3442                           ;SystemCommon.c: 113: uint8_t val = make8(data, idx - 1);
  3443  00362E  C021  F018         	movff	StoreIntInEeprom@data,make8@data
  3444  003632  C022  F019         	movff	StoreIntInEeprom@data+1,make8@data+1
  3445  003636  C023  F01A         	movff	StoreIntInEeprom@data+2,make8@data+2
  3446  00363A  C024  F01B         	movff	StoreIntInEeprom@data+3,make8@data+3
  3447  00363E  0429               	decf	StoreIntInEeprom@idx,w,c
  3448  003640  6E1C               	movwf	make8@dataLocation,c
  3449  003642  EC1C  F018         	call	_make8	;wreg free
  3450  003646  6E28               	movwf	StoreIntInEeprom@val,c
  3451                           
  3452                           ;SystemCommon.c: 114: EepromWrite(address - idx, val);
  3453  003648  C028  F01B         	movff	StoreIntInEeprom@val,EepromWrite@data
  3454  00364C  5029               	movf	StoreIntInEeprom@idx,w,c
  3455  00364E  0800               	sublw	0
  3456  003650  2425               	addwf	StoreIntInEeprom@address,w,c
  3457  003652  ECBC  F01D         	call	_EepromWrite
  3458  003656  0629               	decf	StoreIntInEeprom@idx,f,c
  3459  003658                     l1326:
  3460  003658  5029               	movf	StoreIntInEeprom@idx,w,c
  3461  00365A  B4D8               	btfsc	status,2,c
  3462  00365C  0012               	return	
  3463  00365E  D7E7               	goto	l1327
  3464  003660                     __end_of_StoreIntInEeprom:
  3465                           	opt stack 0
  3466                           tosu	equ	0xFFF
  3467                           tosh	equ	0xFFE
  3468                           tosl	equ	0xFFD
  3469                           pclath	equ	0xFFA
  3470                           tblptru	equ	0xFF8
  3471                           tblptrh	equ	0xFF7
  3472                           tblptrl	equ	0xFF6
  3473                           tablat	equ	0xFF5
  3474                           postinc0	equ	0xFEE
  3475                           plusw0	equ	0xFEB
  3476                           wreg	equ	0xFE8
  3477                           postdec1	equ	0xFE5
  3478                           fsr1l	equ	0xFE1
  3479                           indf2	equ	0xFDF
  3480                           postinc2	equ	0xFDE
  3481                           plusw2	equ	0xFDB
  3482                           fsr2h	equ	0xFDA
  3483                           fsr2l	equ	0xFD9
  3484                           status	equ	0xFD8
  3485                           
  3486 ;; *************** function _EepromWrite *****************
  3487 ;; Defined at:
  3488 ;;		line 220 in file "FlashApp.c"
  3489 ;; Parameters:    Size  Location     Type
  3490 ;;  address         1    wreg     unsigned char 
  3491 ;;  data            1   26[COMRAM] unsigned char 
  3492 ;; Auto vars:     Size  Location     Type
  3493 ;;  address         1   27[COMRAM] unsigned char 
  3494 ;; Return value:  Size  Location     Type
  3495 ;;                  1    wreg      void 
  3496 ;; Registers used:
  3497 ;;		wreg, status,2, cstack
  3498 ;; Tracked objects:
  3499 ;;		On entry : 0/0
  3500 ;;		On exit  : 0/0
  3501 ;;		Unchanged: 0/0
  3502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3503 ;;      Params:         1       0       0       0       0       0       0
  3504 ;;      Locals:         1       0       0       0       0       0       0
  3505 ;;      Temps:          0       0       0       0       0       0       0
  3506 ;;      Totals:         2       0       0       0       0       0       0
  3507 ;;Total ram usage:        2 bytes
  3508 ;; Hardware stack levels used:    1
  3509 ;; Hardware stack levels required when called:    4
  3510 ;; This function calls:
  3511 ;;		_DATAEE_WriteByte
  3512 ;; This function is called by:
  3513 ;;		_StoreIntInEeprom
  3514 ;; This function uses a non-reentrant model
  3515 ;;
  3516                           
  3517                           	psect	text11
  3518  003B78                     __ptext11:
  3519                           	opt stack 0
  3520  003B78                     _EepromWrite:
  3521                           	opt stack 22
  3522                           
  3523                           ;incstack = 0
  3524                           ;EepromWrite@address stored from wreg
  3525  003B78  6E1C               	movwf	EepromWrite@address,c
  3526                           
  3527                           ;FlashApp.c: 222: DATAEE_WriteByte(address, data);
  3528  003B7A  C01B  F018         	movff	EepromWrite@data,DATAEE_WriteByte@bData
  3529  003B7E  501C               	movf	EepromWrite@address,w,c
  3530  003B80  EC84  F01B         	call	_DATAEE_WriteByte
  3531  003B84  0012               	return		;funcret
  3532  003B86                     __end_of_EepromWrite:
  3533                           	opt stack 0
  3534                           tosu	equ	0xFFF
  3535                           tosh	equ	0xFFE
  3536                           tosl	equ	0xFFD
  3537                           pclath	equ	0xFFA
  3538                           tblptru	equ	0xFF8
  3539                           tblptrh	equ	0xFF7
  3540                           tblptrl	equ	0xFF6
  3541                           tablat	equ	0xFF5
  3542                           postinc0	equ	0xFEE
  3543                           plusw0	equ	0xFEB
  3544                           wreg	equ	0xFE8
  3545                           postdec1	equ	0xFE5
  3546                           fsr1l	equ	0xFE1
  3547                           indf2	equ	0xFDF
  3548                           postinc2	equ	0xFDE
  3549                           plusw2	equ	0xFDB
  3550                           fsr2h	equ	0xFDA
  3551                           fsr2l	equ	0xFD9
  3552                           status	equ	0xFD8
  3553                           
  3554 ;; *************** function _DATAEE_WriteByte *****************
  3555 ;; Defined at:
  3556 ;;		line 167 in file "mcc_generated_files/memory.c"
  3557 ;; Parameters:    Size  Location     Type
  3558 ;;  bAdd            1    wreg     unsigned char 
  3559 ;;  bData           1   23[COMRAM] unsigned char 
  3560 ;; Auto vars:     Size  Location     Type
  3561 ;;  bAdd            1   24[COMRAM] unsigned char 
  3562 ;;  GIEBitValue     1   25[COMRAM] unsigned char 
  3563 ;; Return value:  Size  Location     Type
  3564 ;;                  1    wreg      void 
  3565 ;; Registers used:
  3566 ;;		wreg, status,2
  3567 ;; Tracked objects:
  3568 ;;		On entry : 0/0
  3569 ;;		On exit  : 0/0
  3570 ;;		Unchanged: 0/0
  3571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3572 ;;      Params:         1       0       0       0       0       0       0
  3573 ;;      Locals:         2       0       0       0       0       0       0
  3574 ;;      Temps:          0       0       0       0       0       0       0
  3575 ;;      Totals:         3       0       0       0       0       0       0
  3576 ;;Total ram usage:        3 bytes
  3577 ;; Hardware stack levels used:    1
  3578 ;; Hardware stack levels required when called:    3
  3579 ;; This function calls:
  3580 ;;		Nothing
  3581 ;; This function is called by:
  3582 ;;		_EepromWrite
  3583 ;;		_EepromTest
  3584 ;; This function uses a non-reentrant model
  3585 ;;
  3586                           
  3587                           	psect	text12
  3588  003708                     __ptext12:
  3589                           	opt stack 0
  3590  003708                     _DATAEE_WriteByte:
  3591                           	opt stack 22
  3592                           
  3593                           ;incstack = 0
  3594                           ;DATAEE_WriteByte@bAdd stored from wreg
  3595  003708  6E19               	movwf	DATAEE_WriteByte@bAdd,c
  3596                           
  3597                           ;memory.c: 169: uint8_t GIEBitValue = INTCONbits.GIE;
  3598  00370A  0E00               	movlw	0
  3599  00370C  BEF2               	btfsc	intcon,7,c	;volatile
  3600  00370E  0E01               	movlw	1
  3601  003710  6E1A               	movwf	DATAEE_WriteByte@GIEBitValue,c
  3602                           
  3603                           ;memory.c: 171: EEADR = (bAdd & 0xFF);
  3604  003712  C019  FFA9         	movff	DATAEE_WriteByte@bAdd,4009	;volatile
  3605                           
  3606                           ;memory.c: 172: EEDATA = bData;
  3607  003716  C018  FFA8         	movff	DATAEE_WriteByte@bData,4008	;volatile
  3608                           
  3609                           ;memory.c: 173: EECON1bits.EEPGD = 0;
  3610  00371A  9EA6               	bcf	4006,7,c	;volsfr
  3611                           
  3612                           ;memory.c: 174: EECON1bits.CFGS = 0;
  3613  00371C  9CA6               	bcf	4006,6,c	;volsfr
  3614                           
  3615                           ;memory.c: 175: EECON1bits.WREN = 1;
  3616  00371E  84A6               	bsf	4006,2,c	;volsfr
  3617                           
  3618                           ;memory.c: 176: INTCONbits.GIE = 0;
  3619  003720  9EF2               	bcf	intcon,7,c	;volatile
  3620                           
  3621                           ;memory.c: 177: EECON2 = 0x55;
  3622  003722  0E55               	movlw	85
  3623  003724  6EA7               	movwf	4007,c	;volsfr
  3624                           
  3625                           ;memory.c: 178: EECON2 = 0xAA;
  3626  003726  0EAA               	movlw	170
  3627  003728  6EA7               	movwf	4007,c	;volsfr
  3628                           
  3629                           ;memory.c: 179: EECON1bits.WR = 1;
  3630  00372A  82A6               	bsf	4006,1,c	;volsfr
  3631  00372C                     
  3632                           ;memory.c: 182: {
  3633  00372C  B2A6               	btfsc	4006,1,c	;volsfr
  3634  00372E  D7FE               	goto	l974
  3635                           
  3636                           ;memory.c: 183: }
  3637                           ;memory.c: 185: EECON1bits.WREN = 0;
  3638  003730  94A6               	bcf	4006,2,c	;volsfr
  3639                           
  3640                           ;memory.c: 186: INTCONbits.GIE = GIEBitValue;
  3641  003732  B01A               	btfsc	DATAEE_WriteByte@GIEBitValue,0,c
  3642  003734  D002               	bra	u4225
  3643  003736  9EF2               	bcf	intcon,7,c	;volatile
  3644  003738  D001               	bra	u4226
  3645  00373A                     u4225:
  3646  00373A  8EF2               	bsf	intcon,7,c	;volatile
  3647  00373C                     u4226:
  3648  00373C  0012               	return		;funcret
  3649  00373E                     __end_of_DATAEE_WriteByte:
  3650                           	opt stack 0
  3651                           tosu	equ	0xFFF
  3652                           tosh	equ	0xFFE
  3653                           tosl	equ	0xFFD
  3654                           pclath	equ	0xFFA
  3655                           tblptru	equ	0xFF8
  3656                           tblptrh	equ	0xFF7
  3657                           tblptrl	equ	0xFF6
  3658                           tablat	equ	0xFF5
  3659                           intcon	equ	0xFF2
  3660                           postinc0	equ	0xFEE
  3661                           plusw0	equ	0xFEB
  3662                           wreg	equ	0xFE8
  3663                           postdec1	equ	0xFE5
  3664                           fsr1l	equ	0xFE1
  3665                           indf2	equ	0xFDF
  3666                           postinc2	equ	0xFDE
  3667                           plusw2	equ	0xFDB
  3668                           fsr2h	equ	0xFDA
  3669                           fsr2l	equ	0xFD9
  3670                           status	equ	0xFD8
  3671                           
  3672 ;; *************** function _GetIntFromUartData *****************
  3673 ;; Defined at:
  3674 ;;		line 34 in file "SystemCommon.c"
  3675 ;; Parameters:    Size  Location     Type
  3676 ;;  num             1    wreg     char 
  3677 ;;  data            2    6[BANK0 ] PTR unsigned char 
  3678 ;; Auto vars:     Size  Location     Type
  3679 ;;  num             1   26[BANK0 ] char 
  3680 ;;  idxCon          2   36[BANK0 ] int 
  3681 ;;  dataRegArr     10   16[BANK0 ] unsigned char [10]
  3682 ;;  retVal          8   28[BANK0 ] struct .
  3683 ;;  idxData         1   38[BANK0 ] unsigned char 
  3684 ;;  recVal          1   27[BANK0 ] unsigned char 
  3685 ;; Return value:  Size  Location     Type
  3686 ;;                  8    6[BANK0 ] struct .
  3687 ;; Registers used:
  3688 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3689 ;; Tracked objects:
  3690 ;;		On entry : 0/0
  3691 ;;		On exit  : 0/0
  3692 ;;		Unchanged: 0/0
  3693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3694 ;;      Params:         0       8       0       0       0       0       0
  3695 ;;      Locals:         0      23       0       0       0       0       0
  3696 ;;      Temps:          0       2       0       0       0       0       0
  3697 ;;      Totals:         0      33       0       0       0       0       0
  3698 ;;Total ram usage:       33 bytes
  3699 ;; Hardware stack levels used:    1
  3700 ;; Hardware stack levels required when called:    6
  3701 ;; This function calls:
  3702 ;;		_ZeroArray
  3703 ;;		_strtol
  3704 ;; This function is called by:
  3705 ;;		_UpdateSynthFreq
  3706 ;; This function uses a non-reentrant model
  3707 ;;
  3708                           
  3709                           	psect	text13
  3710  0016F8                     __ptext13:
  3711                           	opt stack 0
  3712  0016F8                     _GetIntFromUartData:
  3713                           	opt stack 21
  3714                           
  3715                           ;incstack = 0
  3716                           ;GetIntFromUartData@num stored from wreg
  3717  0016F8  0100               	movlb	0	; () banked
  3718  0016FA  6F7A               	movwf	GetIntFromUartData@num& (0+255),b
  3719                           
  3720                           ;SystemCommon.c: 36: INT_VAL retVal;
  3721                           ;SystemCommon.c: 37: retVal.num = 0;
  3722  0016FC  0E00               	movlw	0
  3723  0016FE  0100               	movlb	0	; () banked
  3724  001700  6F7C               	movwf	GetIntFromUartData@retVal& (0+255),b
  3725  001702  0E00               	movlw	0
  3726  001704  6F7D               	movwf	(GetIntFromUartData@retVal+1)& (0+255),b
  3727  001706  0E00               	movlw	0
  3728  001708  6F7E               	movwf	(GetIntFromUartData@retVal+2)& (0+255),b
  3729  00170A  0E00               	movlw	0
  3730  00170C  6F7F               	movwf	(GetIntFromUartData@retVal+3)& (0+255),b
  3731                           
  3732                           ;SystemCommon.c: 38: retVal.con = 0;
  3733  00170E  0E00               	movlw	0
  3734  001710  6F80               	movwf	(GetIntFromUartData@retVal+4)& (0+255),b
  3735  001712  0E00               	movlw	0
  3736  001714  6F81               	movwf	(GetIntFromUartData@retVal+5)& (0+255),b
  3737  001716  0E00               	movlw	0
  3738  001718  6F82               	movwf	(GetIntFromUartData@retVal+6)& (0+255),b
  3739  00171A  0E00               	movlw	0
  3740  00171C  6F83               	movwf	(GetIntFromUartData@retVal+7)& (0+255),b
  3741                           
  3742                           ;SystemCommon.c: 39: uint8_t idxData = 0;
  3743  00171E  0E00               	movlw	0
  3744  001720  6F86               	movwf	GetIntFromUartData@idxData& (0+255),b
  3745                           
  3746                           ;SystemCommon.c: 40: char recVal = (0);
  3747  001722  0E00               	movlw	0
  3748  001724  6F7B               	movwf	GetIntFromUartData@recVal& (0+255),b
  3749                           
  3750                           ; BSR set to: 0
  3751                           ;SystemCommon.c: 42: char dataRegArr[0xA];
  3752                           ;SystemCommon.c: 43: ZeroArray(dataRegArr, 0xA);
  3753  001726  0E70               	movlw	low GetIntFromUartData@dataRegArr
  3754  001728  6E20               	movwf	ZeroArray@array,c
  3755  00172A  0E00               	movlw	high GetIntFromUartData@dataRegArr
  3756  00172C  6E21               	movwf	ZeroArray@array+1,c
  3757  00172E  0E00               	movlw	0
  3758  001730  6E23               	movwf	ZeroArray@size+1,c
  3759  001732  0E0A               	movlw	10
  3760  001734  6E22               	movwf	ZeroArray@size,c
  3761  001736  EC29  F01D         	call	_ZeroArray	;wreg free
  3762                           
  3763                           ;SystemCommon.c: 45: for(idxData = 0; idxData < 0xA; idxData++)
  3764  00173A  0E00               	movlw	0
  3765  00173C  0100               	movlb	0	; () banked
  3766  00173E  6F86               	movwf	GetIntFromUartData@idxData& (0+255),b
  3767  001740                     l7621:
  3768                           
  3769                           ; BSR set to: 0
  3770  001740  0E09               	movlw	9
  3771  001742  6586               	cpfsgt	GetIntFromUartData@idxData& (0+255),b
  3772  001744  D001               	goto	l1300
  3773  001746  D01D               	goto	u7960
  3774  001748                     l1300:
  3775                           
  3776                           ; BSR set to: 0
  3777                           ;SystemCommon.c: 46: {
  3778                           ;SystemCommon.c: 47: recVal = data[idxData];
  3779                           
  3780                           ; BSR set to: 0
  3781  001748  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  3782  00174A  0D01               	mullw	1
  3783  00174C  50F3               	movf	prodl,w,c
  3784  00174E  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  3785  001750  6ED9               	movwf	fsr2l,c
  3786  001752  50F4               	movf	prodh,w,c
  3787  001754  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  3788  001756  6EDA               	movwf	fsr2h,c
  3789  001758  50DF               	movf	indf2,w,c
  3790  00175A  6F7B               	movwf	GetIntFromUartData@recVal& (0+255),b
  3791                           
  3792                           ; BSR set to: 0
  3793                           ;SystemCommon.c: 48: if(recVal == 0x10)
  3794  00175C  0E10               	movlw	16
  3795  00175E  197B               	xorwf	GetIntFromUartData@recVal& (0+255),w,b
  3796  001760  A4D8               	btfss	status,2,c
  3797  001762  D002               	goto	l1302
  3798                           
  3799                           ; BSR set to: 0
  3800                           ;SystemCommon.c: 49: {
  3801                           ;SystemCommon.c: 50: idxData++;
  3802  001764  2B86               	incf	GetIntFromUartData@idxData& (0+255),f,b
  3803                           
  3804                           ;SystemCommon.c: 51: break;
  3805  001766  D00D               	goto	u7960
  3806  001768                     l1302:
  3807                           
  3808                           ; BSR set to: 0
  3809                           ;SystemCommon.c: 53: else
  3810                           ;SystemCommon.c: 54: {
  3811                           ;SystemCommon.c: 55: dataRegArr[idxData] = recVal + '0';
  3812                           
  3813                           ; BSR set to: 0
  3814  001768  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  3815  00176A  0D01               	mullw	1
  3816  00176C  0E70               	movlw	low GetIntFromUartData@dataRegArr
  3817  00176E  24F3               	addwf	prodl,w,c
  3818  001770  6ED9               	movwf	fsr2l,c
  3819  001772  0E00               	movlw	high GetIntFromUartData@dataRegArr
  3820  001774  20F4               	addwfc	prodh,w,c
  3821  001776  6EDA               	movwf	fsr2h,c
  3822  001778  517B               	movf	GetIntFromUartData@recVal& (0+255),w,b
  3823  00177A  0F30               	addlw	48
  3824  00177C  6EDF               	movwf	indf2,c
  3825                           
  3826                           ; BSR set to: 0
  3827                           
  3828                           ; BSR set to: 0
  3829  00177E  2B86               	incf	GetIntFromUartData@idxData& (0+255),f,b
  3830  001780  D7DF               	goto	l7621
  3831  001782                     u7960:
  3832                           
  3833                           ; BSR set to: 0
  3834                           ;SystemCommon.c: 56: }
  3835                           ;SystemCommon.c: 57: }
  3836                           ;SystemCommon.c: 58: retVal.num = strtol(dataRegArr, (0), num);
  3837                           
  3838                           ; BSR set to: 0
  3839  001782  0E70               	movlw	low GetIntFromUartData@dataRegArr
  3840  001784  6E26               	movwf	strtol@s,c
  3841  001786  0E00               	movlw	high GetIntFromUartData@dataRegArr
  3842  001788  6E27               	movwf	strtol@s+1,c
  3843  00178A  0E00               	movlw	0
  3844  00178C  6E28               	movwf	strtol@endptr,c
  3845  00178E  0E00               	movlw	0
  3846  001790  6E29               	movwf	strtol@endptr+1,c
  3847  001792  517A               	movf	GetIntFromUartData@num& (0+255),w,b
  3848  001794  6E2A               	movwf	strtol@base,c
  3849  001796  6A2B               	clrf	strtol@base+1,c
  3850  001798  BE2A               	btfsc	strtol@base,7,c
  3851  00179A  062B               	decf	strtol@base+1,f,c
  3852  00179C  EC1F  F008         	call	_strtol	;wreg free
  3853  0017A0  C026  F07C         	movff	?_strtol,GetIntFromUartData@retVal
  3854  0017A4  C027  F07D         	movff	?_strtol+1,GetIntFromUartData@retVal+1
  3855  0017A8  C028  F07E         	movff	?_strtol+2,GetIntFromUartData@retVal+2
  3856  0017AC  C029  F07F         	movff	?_strtol+3,GetIntFromUartData@retVal+3
  3857                           
  3858                           ;SystemCommon.c: 60: ZeroArray(dataRegArr, 0xA);
  3859  0017B0  0E70               	movlw	low GetIntFromUartData@dataRegArr
  3860  0017B2  6E20               	movwf	ZeroArray@array,c
  3861  0017B4  0E00               	movlw	high GetIntFromUartData@dataRegArr
  3862  0017B6  6E21               	movwf	ZeroArray@array+1,c
  3863  0017B8  0E00               	movlw	0
  3864  0017BA  6E23               	movwf	ZeroArray@size+1,c
  3865  0017BC  0E0A               	movlw	10
  3866  0017BE  6E22               	movwf	ZeroArray@size,c
  3867  0017C0  EC29  F01D         	call	_ZeroArray	;wreg free
  3868                           
  3869                           ;SystemCommon.c: 62: for(int idxCon = 0; idxCon < 0xA; idxCon++)
  3870  0017C4  0E00               	movlw	0
  3871  0017C6  0100               	movlb	0	; () banked
  3872  0017C8  6F85               	movwf	(GetIntFromUartData@idxCon+1)& (0+255),b
  3873  0017CA  0E00               	movlw	0
  3874  0017CC  6F84               	movwf	GetIntFromUartData@idxCon& (0+255),b
  3875  0017CE                     l7643:
  3876                           
  3877                           ; BSR set to: 0
  3878  0017CE  BF85               	btfsc	(GetIntFromUartData@idxCon+1)& (0+255),7,b
  3879  0017D0  D006               	goto	l1304
  3880  0017D2  5185               	movf	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  3881  0017D4  E12E               	bnz	l7661
  3882  0017D6  0E0A               	movlw	10
  3883  0017D8  5D84               	subwf	GetIntFromUartData@idxCon& (0+255),w,b
  3884  0017DA  B0D8               	btfsc	status,0,c
  3885  0017DC  D02A               	goto	u7990
  3886  0017DE                     l1304:
  3887                           
  3888                           ; BSR set to: 0
  3889                           ;SystemCommon.c: 63: {
  3890                           ;SystemCommon.c: 64: recVal = data[idxData + idxCon];
  3891                           
  3892                           ; BSR set to: 0
  3893  0017DE  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  3894  0017E0  2584               	addwf	GetIntFromUartData@idxCon& (0+255),w,b
  3895  0017E2  6F6E               	movwf	??_GetIntFromUartData& (0+255),b
  3896  0017E4  0E00               	movlw	0
  3897  0017E6  2185               	addwfc	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  3898  0017E8  6F6F               	movwf	(??_GetIntFromUartData+1)& (0+255),b
  3899  0017EA  516E               	movf	??_GetIntFromUartData& (0+255),w,b
  3900  0017EC  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  3901  0017EE  6ED9               	movwf	fsr2l,c
  3902  0017F0  516F               	movf	(??_GetIntFromUartData+1)& (0+255),w,b
  3903  0017F2  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  3904  0017F4  6EDA               	movwf	fsr2h,c
  3905  0017F6  50DF               	movf	indf2,w,c
  3906  0017F8  6F7B               	movwf	GetIntFromUartData@recVal& (0+255),b
  3907                           
  3908                           ; BSR set to: 0
  3909                           ;SystemCommon.c: 65: if(recVal == 0x23)
  3910  0017FA  0E23               	movlw	35
  3911  0017FC  197B               	xorwf	GetIntFromUartData@recVal& (0+255),w,b
  3912  0017FE  B4D8               	btfsc	status,2,c
  3913  001800  D018               	goto	u7990
  3914                           
  3915                           ; BSR set to: 0
  3916                           ;SystemCommon.c: 69: else
  3917                           ;SystemCommon.c: 70: {
  3918                           ;SystemCommon.c: 71: dataRegArr[idxCon] = data[idxCon + idxData] + '0';
  3919                           
  3920                           ; BSR set to: 0
  3921                           
  3922                           ; BSR set to: 0
  3923                           ;SystemCommon.c: 68: }
  3924                           
  3925                           ; BSR set to: 0
  3926                           ;SystemCommon.c: 66: {
  3927                           ;SystemCommon.c: 67: break;
  3928  001802  0E70               	movlw	low GetIntFromUartData@dataRegArr
  3929  001804  2584               	addwf	GetIntFromUartData@idxCon& (0+255),w,b
  3930  001806  6ED9               	movwf	fsr2l,c
  3931  001808  0E00               	movlw	high GetIntFromUartData@dataRegArr
  3932  00180A  2185               	addwfc	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  3933  00180C  6EDA               	movwf	fsr2h,c
  3934  00180E  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  3935  001810  2584               	addwf	GetIntFromUartData@idxCon& (0+255),w,b
  3936  001812  6F6E               	movwf	??_GetIntFromUartData& (0+255),b
  3937  001814  0E00               	movlw	0
  3938  001816  2185               	addwfc	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  3939  001818  6F6F               	movwf	(??_GetIntFromUartData+1)& (0+255),b
  3940  00181A  516E               	movf	??_GetIntFromUartData& (0+255),w,b
  3941  00181C  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  3942  00181E  6EE1               	movwf	fsr1l,c
  3943  001820  516F               	movf	(??_GetIntFromUartData+1)& (0+255),w,b
  3944  001822  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  3945  001824  6EE2               	movwf	fsr1h,c
  3946  001826  50E7               	movf	indf1,w,c
  3947  001828  0F30               	addlw	48
  3948  00182A  6EDF               	movwf	indf2,c
  3949                           
  3950                           ; BSR set to: 0
  3951                           
  3952                           ; BSR set to: 0
  3953  00182C  4B84               	infsnz	GetIntFromUartData@idxCon& (0+255),f,b
  3954  00182E  2B85               	incf	(GetIntFromUartData@idxCon+1)& (0+255),f,b
  3955  001830  D7CE               	goto	l7643
  3956  001832                     u7990:
  3957  001832                     l7661:
  3958                           
  3959                           ; BSR set to: 0
  3960                           ;SystemCommon.c: 72: }
  3961                           ;SystemCommon.c: 73: }
  3962                           ;SystemCommon.c: 74: retVal.con = strtol(dataRegArr, (0), num);
  3963  001832  0E70               	movlw	low GetIntFromUartData@dataRegArr
  3964  001834  6E26               	movwf	strtol@s,c
  3965  001836  0E00               	movlw	high GetIntFromUartData@dataRegArr
  3966  001838  6E27               	movwf	strtol@s+1,c
  3967  00183A  0E00               	movlw	0
  3968  00183C  6E28               	movwf	strtol@endptr,c
  3969  00183E  0E00               	movlw	0
  3970  001840  6E29               	movwf	strtol@endptr+1,c
  3971  001842  517A               	movf	GetIntFromUartData@num& (0+255),w,b
  3972  001844  6E2A               	movwf	strtol@base,c
  3973  001846  6A2B               	clrf	strtol@base+1,c
  3974  001848  BE2A               	btfsc	strtol@base,7,c
  3975  00184A  062B               	decf	strtol@base+1,f,c
  3976  00184C  EC1F  F008         	call	_strtol	;wreg free
  3977  001850  C026  F080         	movff	?_strtol,GetIntFromUartData@retVal+4
  3978  001854  C027  F081         	movff	?_strtol+1,GetIntFromUartData@retVal+5
  3979  001858  C028  F082         	movff	?_strtol+2,GetIntFromUartData@retVal+6
  3980  00185C  C029  F083         	movff	?_strtol+3,GetIntFromUartData@retVal+7
  3981                           
  3982                           ;SystemCommon.c: 76: return retVal;
  3983  001860  EE20  F07C         	lfsr	2,GetIntFromUartData@retVal
  3984  001864  EE00  F066         	lfsr	0,?_GetIntFromUartData
  3985  001868  0E07               	movlw	7
  3986  00186A                     u8001:
  3987  00186A  CFDB FFEB          	movff	plusw2,plusw0
  3988  00186E  06E8               	decf	wreg,f,c
  3989  001870  E2FC               	bc	u8001
  3990  001872  0012               	return	
  3991  001874                     __end_of_GetIntFromUartData:
  3992                           	opt stack 0
  3993                           tosu	equ	0xFFF
  3994                           tosh	equ	0xFFE
  3995                           tosl	equ	0xFFD
  3996                           pclath	equ	0xFFA
  3997                           tblptru	equ	0xFF8
  3998                           tblptrh	equ	0xFF7
  3999                           tblptrl	equ	0xFF6
  4000                           tablat	equ	0xFF5
  4001                           prodh	equ	0xFF4
  4002                           prodl	equ	0xFF3
  4003                           intcon	equ	0xFF2
  4004                           postinc0	equ	0xFEE
  4005                           plusw0	equ	0xFEB
  4006                           wreg	equ	0xFE8
  4007                           indf1	equ	0xFE7
  4008                           postdec1	equ	0xFE5
  4009                           fsr1h	equ	0xFE2
  4010                           fsr1l	equ	0xFE1
  4011                           indf2	equ	0xFDF
  4012                           postinc2	equ	0xFDE
  4013                           plusw2	equ	0xFDB
  4014                           fsr2h	equ	0xFDA
  4015                           fsr2l	equ	0xFD9
  4016                           status	equ	0xFD8
  4017                           
  4018 ;; *************** function _strtol *****************
  4019 ;; Defined at:
  4020 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strtol.c"
  4021 ;; Parameters:    Size  Location     Type
  4022 ;;  s               2   37[COMRAM] PTR const unsigned char 
  4023 ;;		 -> GetIntFromUartData@dataRegArr(10), 
  4024 ;;  endptr          2   39[COMRAM] PTR PTR unsigned char 
  4025 ;;		 -> NULL(0), 
  4026 ;;  base            2   41[COMRAM] int 
  4027 ;; Auto vars:     Size  Location     Type
  4028 ;;  a               4    1[BANK0 ] long 
  4029 ;;  c               1    5[BANK0 ] unsigned char 
  4030 ;;  sign            1    0[BANK0 ] unsigned char 
  4031 ;; Return value:  Size  Location     Type
  4032 ;;                  4   37[COMRAM] long 
  4033 ;; Registers used:
  4034 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4035 ;; Tracked objects:
  4036 ;;		On entry : 0/0
  4037 ;;		On exit  : 0/0
  4038 ;;		Unchanged: 0/0
  4039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4040 ;;      Params:         6       0       0       0       0       0       0
  4041 ;;      Locals:         0       6       0       0       0       0       0
  4042 ;;      Temps:          4       0       0       0       0       0       0
  4043 ;;      Totals:        10       6       0       0       0       0       0
  4044 ;;Total ram usage:       16 bytes
  4045 ;; Hardware stack levels used:    1
  4046 ;; Hardware stack levels required when called:    5
  4047 ;; This function calls:
  4048 ;;		___lmul
  4049 ;;		_isalpha
  4050 ;;		_isdigit
  4051 ;;		_isspace
  4052 ;;		_toupper
  4053 ;; This function is called by:
  4054 ;;		_GetIntFromUartData
  4055 ;; This function uses a non-reentrant model
  4056 ;;
  4057                           
  4058                           	psect	text14
  4059  00103E                     __ptext14:
  4060                           	opt stack 0
  4061  00103E                     _strtol:
  4062                           	opt stack 21
  4063                           
  4064                           ;incstack = 0
  4065  00103E  C026  FFD9         	movff	strtol@s,fsr2l
  4066  001042  C027  FFDA         	movff	strtol@s+1,fsr2h
  4067  001046  50DF               	movf	indf2,w,c
  4068  001048  0100               	movlb	0	; () banked
  4069  00104A  6F65               	movwf	strtol@c& (0+255),b
  4070                           
  4071                           ; BSR set to: 0
  4072  00104C  4A26               	infsnz	strtol@s,f,c
  4073  00104E  2A27               	incf	strtol@s+1,f,c
  4074                           
  4075                           ; BSR set to: 0
  4076  001050  5165               	movf	strtol@c& (0+255),w,b
  4077  001052  EC9F  F01C         	call	_isspace
  4078  001056  B0D8               	btfsc	status,0,c
  4079  001058  D7F2               	goto	_strtol
  4080  00105A  0E00               	movlw	0
  4081  00105C  0100               	movlb	0	; () banked
  4082  00105E  6F61               	movwf	strtol@a& (0+255),b
  4083  001060  0E00               	movlw	0
  4084  001062  6F62               	movwf	(strtol@a+1)& (0+255),b
  4085  001064  0E00               	movlw	0
  4086  001066  6F63               	movwf	(strtol@a+2)& (0+255),b
  4087  001068  0E00               	movlw	0
  4088  00106A  6F64               	movwf	(strtol@a+3)& (0+255),b
  4089  00106C  0E00               	movlw	0
  4090  00106E  6F60               	movwf	strtol@sign& (0+255),b
  4091                           
  4092                           ; BSR set to: 0
  4093  001070  0E2D               	movlw	45
  4094  001072  1965               	xorwf	strtol@c& (0+255),w,b
  4095  001074  A4D8               	btfss	status,2,c
  4096  001076  D003               	goto	l2047
  4097                           
  4098                           ; BSR set to: 0
  4099  001078  0E01               	movlw	1
  4100  00107A  6F60               	movwf	strtol@sign& (0+255),b
  4101  00107C  D004               	goto	u7680
  4102  00107E                     l2047:
  4103                           
  4104                           ; BSR set to: 0
  4105                           
  4106                           ; BSR set to: 0
  4107  00107E  0E2B               	movlw	43
  4108  001080  1965               	xorwf	strtol@c& (0+255),w,b
  4109  001082  A4D8               	btfss	status,2,c
  4110  001084  D008               	goto	l2049
  4111  001086                     u7680:
  4112                           
  4113                           ; BSR set to: 0
  4114  001086  C026  FFD9         	movff	strtol@s,fsr2l
  4115  00108A  C027  FFDA         	movff	strtol@s+1,fsr2h
  4116  00108E  50DF               	movf	indf2,w,c
  4117  001090  6F65               	movwf	strtol@c& (0+255),b
  4118                           
  4119                           ; BSR set to: 0
  4120  001092  4A26               	infsnz	strtol@s,f,c
  4121  001094  2A27               	incf	strtol@s+1,f,c
  4122  001096                     l2049:
  4123                           
  4124                           ; BSR set to: 0
  4125                           
  4126                           ; BSR set to: 0
  4127                           
  4128                           ; BSR set to: 0
  4129  001096  0E30               	movlw	48
  4130  001098  1965               	xorwf	strtol@c& (0+255),w,b
  4131  00109A  A4D8               	btfss	status,2,c
  4132  00109C  D02E               	goto	l2057
  4133                           
  4134                           ; BSR set to: 0
  4135  00109E  C026  FFD9         	movff	strtol@s,fsr2l
  4136  0010A2  C027  FFDA         	movff	strtol@s+1,fsr2h
  4137  0010A6  50DF               	movf	indf2,w,c
  4138  0010A8  6F65               	movwf	strtol@c& (0+255),b
  4139                           
  4140                           ; BSR set to: 0
  4141  0010AA  4A26               	infsnz	strtol@s,f,c
  4142  0010AC  2A27               	incf	strtol@s+1,f,c
  4143                           
  4144                           ; BSR set to: 0
  4145  0010AE  502A               	movf	strtol@base,w,c
  4146  0010B0  102B               	iorwf	strtol@base+1,w,c
  4147  0010B2  B4D8               	btfsc	status,2,c
  4148  0010B4  D005               	goto	u7710
  4149                           
  4150                           ; BSR set to: 0
  4151  0010B6  0E10               	movlw	16
  4152  0010B8  182A               	xorwf	strtol@base,w,c
  4153  0010BA  102B               	iorwf	strtol@base+1,w,c
  4154  0010BC  A4D8               	btfss	status,2,c
  4155  0010BE  D015               	goto	l2051
  4156  0010C0                     u7710:
  4157                           
  4158                           ; BSR set to: 0
  4159                           
  4160                           ; BSR set to: 0
  4161  0010C0  0E78               	movlw	120
  4162  0010C2  1965               	xorwf	strtol@c& (0+255),w,b
  4163  0010C4  B4D8               	btfsc	status,2,c
  4164  0010C6  D004               	goto	u7730
  4165                           
  4166                           ; BSR set to: 0
  4167  0010C8  0E58               	movlw	88
  4168  0010CA  1965               	xorwf	strtol@c& (0+255),w,b
  4169  0010CC  A4D8               	btfss	status,2,c
  4170  0010CE  D00D               	goto	l2051
  4171  0010D0                     u7730:
  4172                           
  4173                           ; BSR set to: 0
  4174                           
  4175                           ; BSR set to: 0
  4176  0010D0  0E00               	movlw	0
  4177  0010D2  6E2B               	movwf	strtol@base+1,c
  4178  0010D4  0E10               	movlw	16
  4179  0010D6  6E2A               	movwf	strtol@base,c
  4180                           
  4181                           ; BSR set to: 0
  4182  0010D8  C026  FFD9         	movff	strtol@s,fsr2l
  4183  0010DC  C027  FFDA         	movff	strtol@s+1,fsr2h
  4184  0010E0  50DF               	movf	indf2,w,c
  4185  0010E2  6F65               	movwf	strtol@c& (0+255),b
  4186                           
  4187                           ; BSR set to: 0
  4188  0010E4  4A26               	infsnz	strtol@s,f,c
  4189  0010E6  2A27               	incf	strtol@s+1,f,c
  4190  0010E8  D008               	goto	l2057
  4191  0010EA                     l2051:
  4192                           
  4193                           ; BSR set to: 0
  4194                           
  4195                           ; BSR set to: 0
  4196  0010EA  502A               	movf	strtol@base,w,c
  4197  0010EC  102B               	iorwf	strtol@base+1,w,c
  4198  0010EE  A4D8               	btfss	status,2,c
  4199  0010F0  D004               	goto	l2057
  4200                           
  4201                           ; BSR set to: 0
  4202  0010F2  0E00               	movlw	0
  4203  0010F4  6E2B               	movwf	strtol@base+1,c
  4204  0010F6  0E08               	movlw	8
  4205  0010F8  6E2A               	movwf	strtol@base,c
  4206  0010FA                     l2057:
  4207                           
  4208                           ; BSR set to: 0
  4209                           
  4210                           ; BSR set to: 0
  4211                           
  4212                           ; BSR set to: 0
  4213                           
  4214                           ; BSR set to: 0
  4215  0010FA  502A               	movf	strtol@base,w,c
  4216  0010FC  102B               	iorwf	strtol@base+1,w,c
  4217  0010FE  A4D8               	btfss	status,2,c
  4218  001100  D004               	goto	l2058
  4219                           
  4220                           ; BSR set to: 0
  4221  001102  0E00               	movlw	0
  4222  001104  6E2B               	movwf	strtol@base+1,c
  4223  001106  0E0A               	movlw	10
  4224  001108  6E2A               	movwf	strtol@base,c
  4225  00110A                     l2058:
  4226                           
  4227                           ; BSR set to: 0
  4228                           
  4229                           ; BSR set to: 0
  4230                           
  4231                           ; BSR set to: 0
  4232  00110A  5165               	movf	strtol@c& (0+255),w,b
  4233  00110C  EC77  F01C         	call	_isalpha
  4234  001110  A0D8               	btfss	status,0,c
  4235  001112  D008               	goto	l2060
  4236  001114  0100               	movlb	0	; () banked
  4237  001116  5165               	movf	strtol@c& (0+255),w,b
  4238  001118  EC84  F01D         	call	_toupper
  4239  00111C  0FC9               	addlw	201
  4240  00111E  0100               	movlb	0	; () banked
  4241  001120  6F65               	movwf	strtol@c& (0+255),b
  4242  001122  D009               	goto	l2063
  4243  001124                     l2060:
  4244                           
  4245                           ; BSR set to: 0
  4246  001124  0100               	movlb	0	; () banked
  4247  001126  5165               	movf	strtol@c& (0+255),w,b
  4248  001128  EC0B  F01D         	call	_isdigit
  4249  00112C  A0D8               	btfss	status,0,c
  4250  00112E  D039               	goto	l2064
  4251  001130  0E30               	movlw	48
  4252  001132  0100               	movlb	0	; () banked
  4253  001134  5F65               	subwf	strtol@c& (0+255),f,b
  4254  001136                     l2063:
  4255                           
  4256                           ; BSR set to: 0
  4257                           
  4258                           ; BSR set to: 0
  4259                           
  4260                           ; BSR set to: 0
  4261  001136  5165               	movf	strtol@c& (0+255),w,b
  4262  001138  6E2C               	movwf	??_strtol& (0+255),c
  4263  00113A  6A2D               	clrf	(??_strtol+1)& (0+255),c
  4264  00113C  502A               	movf	strtol@base,w,c
  4265  00113E  5C2C               	subwf	??_strtol,w,c
  4266  001140  502D               	movf	??_strtol+1,w,c
  4267  001142  0A80               	xorlw	128
  4268  001144  6E2E               	movwf	(??_strtol+2)& (0+255),c
  4269  001146  502B               	movf	strtol@base+1,w,c
  4270  001148  0A80               	xorlw	128
  4271  00114A  582E               	subwfb	(??_strtol+2)& (0+255),w,c
  4272  00114C  B0D8               	btfsc	status,0,c
  4273  00114E  D029               	goto	l2064
  4274                           
  4275                           ; BSR set to: 0
  4276                           
  4277                           ; BSR set to: 0
  4278                           
  4279                           ; BSR set to: 0
  4280  001150  C02A  F01A         	movff	strtol@base,___lmul@multiplier
  4281  001154  C02B  F01B         	movff	strtol@base+1,___lmul@multiplier+1
  4282  001158  0E00               	movlw	0
  4283  00115A  BE1B               	btfsc	___lmul@multiplier+1,7,c
  4284  00115C  0EFF               	movlw	-1
  4285  00115E  6E1C               	movwf	___lmul@multiplier+2,c
  4286  001160  6E1D               	movwf	___lmul@multiplier+3,c
  4287  001162  C061  F01E         	movff	strtol@a,___lmul@multiplicand
  4288  001166  C062  F01F         	movff	strtol@a+1,___lmul@multiplicand+1
  4289  00116A  C063  F020         	movff	strtol@a+2,___lmul@multiplicand+2
  4290  00116E  C064  F021         	movff	strtol@a+3,___lmul@multiplicand+3
  4291  001172  EC26  F019         	call	___lmul	;wreg free
  4292  001176  0100               	movlb	0	; () banked
  4293  001178  5165               	movf	strtol@c& (0+255),w,b
  4294  00117A  241A               	addwf	?___lmul,w,c
  4295  00117C  6F61               	movwf	strtol@a& (0+255),b
  4296  00117E  0E00               	movlw	0
  4297  001180  201B               	addwfc	?___lmul+1,w,c
  4298  001182  6F62               	movwf	(strtol@a+1)& (0+255),b
  4299  001184  0E00               	movlw	0
  4300  001186  201C               	addwfc	?___lmul+2,w,c
  4301  001188  6F63               	movwf	(strtol@a+2)& (0+255),b
  4302  00118A  0E00               	movlw	0
  4303  00118C  201D               	addwfc	?___lmul+3,w,c
  4304  00118E  6F64               	movwf	(strtol@a+3)& (0+255),b
  4305                           
  4306                           ; BSR set to: 0
  4307  001190  C026  FFD9         	movff	strtol@s,fsr2l
  4308  001194  C027  FFDA         	movff	strtol@s+1,fsr2h
  4309  001198  50DF               	movf	indf2,w,c
  4310  00119A  6F65               	movwf	strtol@c& (0+255),b
  4311                           
  4312                           ; BSR set to: 0
  4313  00119C  4A26               	infsnz	strtol@s,f,c
  4314  00119E  2A27               	incf	strtol@s+1,f,c
  4315  0011A0  D7B4               	goto	l2058
  4316  0011A2                     l2064:
  4317                           
  4318                           ; BSR set to: 0
  4319  0011A2  5028               	movf	strtol@endptr,w,c
  4320  0011A4  1029               	iorwf	strtol@endptr+1,w,c
  4321  0011A6  B4D8               	btfsc	status,2,c
  4322  0011A8  D00E               	goto	l2066
  4323  0011AA  0EFF               	movlw	255
  4324  0011AC  2426               	addwf	strtol@s,w,c
  4325  0011AE  6E2C               	movwf	??_strtol& (0+255),c
  4326  0011B0  0EFF               	movlw	255
  4327  0011B2  2027               	addwfc	strtol@s+1,w,c
  4328  0011B4  6E2D               	movwf	(??_strtol+1)& (0+255),c
  4329  0011B6  C028  FFD9         	movff	strtol@endptr,fsr2l
  4330  0011BA  C029  FFDA         	movff	strtol@endptr+1,fsr2h
  4331  0011BE  C02C  FFDE         	movff	??_strtol,postinc2
  4332  0011C2  C02D  FFDD         	movff	??_strtol+1,postdec2
  4333  0011C6                     l2066:
  4334  0011C6  0100               	movlb	0	; () banked
  4335  0011C8  5160               	movf	strtol@sign& (0+255),w,b
  4336  0011CA  B4D8               	btfsc	status,2,c
  4337  0011CC  D01A               	goto	l2067
  4338                           
  4339                           ; BSR set to: 0
  4340  0011CE  C061  F02C         	movff	strtol@a,??_strtol
  4341  0011D2  C062  F02D         	movff	strtol@a+1,??_strtol+1
  4342  0011D6  C063  F02E         	movff	strtol@a+2,??_strtol+2
  4343  0011DA  C064  F02F         	movff	strtol@a+3,??_strtol+3
  4344  0011DE  1E2C               	comf	??_strtol,f,c
  4345  0011E0  1E2D               	comf	??_strtol+1,f,c
  4346  0011E2  1E2E               	comf	??_strtol+2,f,c
  4347  0011E4  1E2F               	comf	??_strtol+3,f,c
  4348  0011E6  2A2C               	incf	??_strtol,f,c
  4349  0011E8  0E00               	movlw	0
  4350  0011EA  222D               	addwfc	??_strtol+1,f,c
  4351  0011EC  222E               	addwfc	??_strtol+2,f,c
  4352  0011EE  222F               	addwfc	??_strtol+3,f,c
  4353  0011F0  C02C  F026         	movff	??_strtol,?_strtol
  4354  0011F4  C02D  F027         	movff	??_strtol+1,?_strtol+1
  4355  0011F8  C02E  F028         	movff	??_strtol+2,?_strtol+2
  4356  0011FC  C02F  F029         	movff	??_strtol+3,?_strtol+3
  4357                           
  4358                           ; BSR set to: 0
  4359  001200  0012               	return	
  4360  001202                     l2067:
  4361                           
  4362                           ; BSR set to: 0
  4363  001202  C061  F026         	movff	strtol@a,?_strtol
  4364  001206  C062  F027         	movff	strtol@a+1,?_strtol+1
  4365  00120A  C063  F028         	movff	strtol@a+2,?_strtol+2
  4366  00120E  C064  F029         	movff	strtol@a+3,?_strtol+3
  4367                           
  4368                           ; BSR set to: 0
  4369  001212  0012               	return		;funcret
  4370  001214                     __end_of_strtol:
  4371                           	opt stack 0
  4372                           tosu	equ	0xFFF
  4373                           tosh	equ	0xFFE
  4374                           tosl	equ	0xFFD
  4375                           pclath	equ	0xFFA
  4376                           tblptru	equ	0xFF8
  4377                           tblptrh	equ	0xFF7
  4378                           tblptrl	equ	0xFF6
  4379                           tablat	equ	0xFF5
  4380                           prodh	equ	0xFF4
  4381                           prodl	equ	0xFF3
  4382                           intcon	equ	0xFF2
  4383                           postinc0	equ	0xFEE
  4384                           plusw0	equ	0xFEB
  4385                           wreg	equ	0xFE8
  4386                           indf1	equ	0xFE7
  4387                           postdec1	equ	0xFE5
  4388                           fsr1h	equ	0xFE2
  4389                           fsr1l	equ	0xFE1
  4390                           indf2	equ	0xFDF
  4391                           postinc2	equ	0xFDE
  4392                           postdec2	equ	0xFDD
  4393                           plusw2	equ	0xFDB
  4394                           fsr2h	equ	0xFDA
  4395                           fsr2l	equ	0xFD9
  4396                           status	equ	0xFD8
  4397                           
  4398 ;; *************** function _toupper *****************
  4399 ;; Defined at:
  4400 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\toupper.c"
  4401 ;; Parameters:    Size  Location     Type
  4402 ;;  c               1    wreg     unsigned char 
  4403 ;; Auto vars:     Size  Location     Type
  4404 ;;  c               1   23[COMRAM] unsigned char 
  4405 ;; Return value:  Size  Location     Type
  4406 ;;                  1    wreg      unsigned char 
  4407 ;; Registers used:
  4408 ;;		wreg, status,2, status,0
  4409 ;; Tracked objects:
  4410 ;;		On entry : 0/0
  4411 ;;		On exit  : 0/0
  4412 ;;		Unchanged: 0/0
  4413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4414 ;;      Params:         0       0       0       0       0       0       0
  4415 ;;      Locals:         1       0       0       0       0       0       0
  4416 ;;      Temps:          0       0       0       0       0       0       0
  4417 ;;      Totals:         1       0       0       0       0       0       0
  4418 ;;Total ram usage:        1 bytes
  4419 ;; Hardware stack levels used:    1
  4420 ;; Hardware stack levels required when called:    3
  4421 ;; This function calls:
  4422 ;;		Nothing
  4423 ;; This function is called by:
  4424 ;;		_strtol
  4425 ;; This function uses a non-reentrant model
  4426 ;;
  4427                           
  4428                           	psect	text15
  4429  003B08                     __ptext15:
  4430                           	opt stack 0
  4431  003B08                     _toupper:
  4432                           	opt stack 22
  4433                           
  4434                           ; BSR set to: 0
  4435                           ;incstack = 0
  4436                           ;toupper@c stored from wreg
  4437  003B08  6E18               	movwf	toupper@c,c
  4438  003B0A  0E7B               	movlw	123
  4439  003B0C  6018               	cpfslt	toupper@c,c
  4440  003B0E  D004               	goto	l2071
  4441  003B10  0E60               	movlw	96
  4442  003B12  6418               	cpfsgt	toupper@c,c
  4443  003B14  D001               	goto	l2071
  4444  003B16  9A18               	bcf	toupper@c,5,c
  4445  003B18                     l2071:
  4446  003B18  5018               	movf	toupper@c,w,c
  4447  003B1A  0012               	return	
  4448  003B1C                     __end_of_toupper:
  4449                           	opt stack 0
  4450                           tosu	equ	0xFFF
  4451                           tosh	equ	0xFFE
  4452                           tosl	equ	0xFFD
  4453                           pclath	equ	0xFFA
  4454                           tblptru	equ	0xFF8
  4455                           tblptrh	equ	0xFF7
  4456                           tblptrl	equ	0xFF6
  4457                           tablat	equ	0xFF5
  4458                           prodh	equ	0xFF4
  4459                           prodl	equ	0xFF3
  4460                           intcon	equ	0xFF2
  4461                           postinc0	equ	0xFEE
  4462                           plusw0	equ	0xFEB
  4463                           wreg	equ	0xFE8
  4464                           indf1	equ	0xFE7
  4465                           postdec1	equ	0xFE5
  4466                           fsr1h	equ	0xFE2
  4467                           fsr1l	equ	0xFE1
  4468                           indf2	equ	0xFDF
  4469                           postinc2	equ	0xFDE
  4470                           postdec2	equ	0xFDD
  4471                           plusw2	equ	0xFDB
  4472                           fsr2h	equ	0xFDA
  4473                           fsr2l	equ	0xFD9
  4474                           status	equ	0xFD8
  4475                           
  4476 ;; *************** function _isspace *****************
  4477 ;; Defined at:
  4478 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isspace.c"
  4479 ;; Parameters:    Size  Location     Type
  4480 ;;  c               1    wreg     unsigned char 
  4481 ;; Auto vars:     Size  Location     Type
  4482 ;;  c               1   25[COMRAM] unsigned char 
  4483 ;; Return value:  Size  Location     Type
  4484 ;;		None               void
  4485 ;; Registers used:
  4486 ;;		wreg, status,2, status,0
  4487 ;; Tracked objects:
  4488 ;;		On entry : 0/0
  4489 ;;		On exit  : 0/0
  4490 ;;		Unchanged: 0/0
  4491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4492 ;;      Params:         0       0       0       0       0       0       0
  4493 ;;      Locals:         2       0       0       0       0       0       0
  4494 ;;      Temps:          1       0       0       0       0       0       0
  4495 ;;      Totals:         3       0       0       0       0       0       0
  4496 ;;Total ram usage:        3 bytes
  4497 ;; Hardware stack levels used:    1
  4498 ;; Hardware stack levels required when called:    3
  4499 ;; This function calls:
  4500 ;;		Nothing
  4501 ;; This function is called by:
  4502 ;;		_strtol
  4503 ;; This function uses a non-reentrant model
  4504 ;;
  4505                           
  4506                           	psect	text16
  4507  00393E                     __ptext16:
  4508                           	opt stack 0
  4509  00393E                     _isspace:
  4510                           	opt stack 22
  4511                           
  4512                           ;incstack = 0
  4513                           ;isspace@c stored from wreg
  4514  00393E  6E1A               	movwf	isspace@c,c
  4515  003940  0E01               	movlw	1
  4516  003942  6E19               	movwf	_isspace$3026,c
  4517  003944  0E20               	movlw	32
  4518  003946  181A               	xorwf	isspace@c,w,c
  4519  003948  B4D8               	btfsc	status,2,c
  4520  00394A  D008               	goto	l2153
  4521  00394C  0E0E               	movlw	14
  4522  00394E  601A               	cpfslt	isspace@c,c
  4523  003950  D003               	goto	u7460
  4524  003952  0E09               	movlw	9
  4525  003954  601A               	cpfslt	isspace@c,c
  4526  003956  D002               	goto	l2153
  4527  003958                     u7460:
  4528  003958  0E00               	movlw	0
  4529  00395A  6E19               	movwf	_isspace$3026,c
  4530  00395C                     l2153:
  4531  00395C  C019  F018         	movff	_isspace$3026,??_isspace
  4532  003960  3018               	rrcf	??_isspace,w,c
  4533  003962  0012               	return	
  4534  003964                     __end_of_isspace:
  4535                           	opt stack 0
  4536                           tosu	equ	0xFFF
  4537                           tosh	equ	0xFFE
  4538                           tosl	equ	0xFFD
  4539                           pclath	equ	0xFFA
  4540                           tblptru	equ	0xFF8
  4541                           tblptrh	equ	0xFF7
  4542                           tblptrl	equ	0xFF6
  4543                           tablat	equ	0xFF5
  4544                           prodh	equ	0xFF4
  4545                           prodl	equ	0xFF3
  4546                           intcon	equ	0xFF2
  4547                           postinc0	equ	0xFEE
  4548                           plusw0	equ	0xFEB
  4549                           wreg	equ	0xFE8
  4550                           indf1	equ	0xFE7
  4551                           postdec1	equ	0xFE5
  4552                           fsr1h	equ	0xFE2
  4553                           fsr1l	equ	0xFE1
  4554                           indf2	equ	0xFDF
  4555                           postinc2	equ	0xFDE
  4556                           postdec2	equ	0xFDD
  4557                           plusw2	equ	0xFDB
  4558                           fsr2h	equ	0xFDA
  4559                           fsr2l	equ	0xFD9
  4560                           status	equ	0xFD8
  4561                           
  4562 ;; *************** function _isdigit *****************
  4563 ;; Defined at:
  4564 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  4565 ;; Parameters:    Size  Location     Type
  4566 ;;  c               1    wreg     unsigned char 
  4567 ;; Auto vars:     Size  Location     Type
  4568 ;;  c               1   25[COMRAM] unsigned char 
  4569 ;; Return value:  Size  Location     Type
  4570 ;;		None               void
  4571 ;; Registers used:
  4572 ;;		wreg, status,2, status,0
  4573 ;; Tracked objects:
  4574 ;;		On entry : 0/0
  4575 ;;		On exit  : 0/0
  4576 ;;		Unchanged: 0/0
  4577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4578 ;;      Params:         0       0       0       0       0       0       0
  4579 ;;      Locals:         2       0       0       0       0       0       0
  4580 ;;      Temps:          1       0       0       0       0       0       0
  4581 ;;      Totals:         3       0       0       0       0       0       0
  4582 ;;Total ram usage:        3 bytes
  4583 ;; Hardware stack levels used:    1
  4584 ;; Hardware stack levels required when called:    3
  4585 ;; This function calls:
  4586 ;;		Nothing
  4587 ;; This function is called by:
  4588 ;;		_strtol
  4589 ;; This function uses a non-reentrant model
  4590 ;;
  4591                           
  4592                           	psect	text17
  4593  003A16                     __ptext17:
  4594                           	opt stack 0
  4595  003A16                     _isdigit:
  4596                           	opt stack 22
  4597                           
  4598                           ;incstack = 0
  4599                           ;isdigit@c stored from wreg
  4600  003A16  6E1A               	movwf	isdigit@c,c
  4601  003A18  0E00               	movlw	0
  4602  003A1A  6E19               	movwf	_isdigit$3023,c
  4603  003A1C  0E3A               	movlw	58
  4604  003A1E  601A               	cpfslt	isdigit@c,c
  4605  003A20  D005               	goto	l2148
  4606  003A22  0E2F               	movlw	47
  4607  003A24  641A               	cpfsgt	isdigit@c,c
  4608  003A26  D002               	goto	l2148
  4609  003A28  0E01               	movlw	1
  4610  003A2A  6E19               	movwf	_isdigit$3023,c
  4611  003A2C                     l2148:
  4612  003A2C  C019  F018         	movff	_isdigit$3023,??_isdigit
  4613  003A30  3018               	rrcf	??_isdigit,w,c
  4614  003A32  0012               	return	
  4615  003A34                     __end_of_isdigit:
  4616                           	opt stack 0
  4617                           tosu	equ	0xFFF
  4618                           tosh	equ	0xFFE
  4619                           tosl	equ	0xFFD
  4620                           pclath	equ	0xFFA
  4621                           tblptru	equ	0xFF8
  4622                           tblptrh	equ	0xFF7
  4623                           tblptrl	equ	0xFF6
  4624                           tablat	equ	0xFF5
  4625                           prodh	equ	0xFF4
  4626                           prodl	equ	0xFF3
  4627                           intcon	equ	0xFF2
  4628                           postinc0	equ	0xFEE
  4629                           plusw0	equ	0xFEB
  4630                           wreg	equ	0xFE8
  4631                           indf1	equ	0xFE7
  4632                           postdec1	equ	0xFE5
  4633                           fsr1h	equ	0xFE2
  4634                           fsr1l	equ	0xFE1
  4635                           indf2	equ	0xFDF
  4636                           postinc2	equ	0xFDE
  4637                           postdec2	equ	0xFDD
  4638                           plusw2	equ	0xFDB
  4639                           fsr2h	equ	0xFDA
  4640                           fsr2l	equ	0xFD9
  4641                           status	equ	0xFD8
  4642                           
  4643 ;; *************** function _isalpha *****************
  4644 ;; Defined at:
  4645 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isalpha.c"
  4646 ;; Parameters:    Size  Location     Type
  4647 ;;  c               1    wreg     unsigned char 
  4648 ;; Auto vars:     Size  Location     Type
  4649 ;;  c               1   28[COMRAM] unsigned char 
  4650 ;; Return value:  Size  Location     Type
  4651 ;;		None               void
  4652 ;; Registers used:
  4653 ;;		wreg, status,2, status,0, cstack
  4654 ;; Tracked objects:
  4655 ;;		On entry : 0/0
  4656 ;;		On exit  : 0/0
  4657 ;;		Unchanged: 0/0
  4658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4659 ;;      Params:         0       0       0       0       0       0       0
  4660 ;;      Locals:         2       0       0       0       0       0       0
  4661 ;;      Temps:          1       0       0       0       0       0       0
  4662 ;;      Totals:         3       0       0       0       0       0       0
  4663 ;;Total ram usage:        3 bytes
  4664 ;; Hardware stack levels used:    1
  4665 ;; Hardware stack levels required when called:    4
  4666 ;; This function calls:
  4667 ;;		_isupper
  4668 ;; This function is called by:
  4669 ;;		_strtol
  4670 ;; This function uses a non-reentrant model
  4671 ;;
  4672                           
  4673                           	psect	text18
  4674  0038EE                     __ptext18:
  4675                           	opt stack 0
  4676  0038EE                     _isalpha:
  4677                           	opt stack 21
  4678                           
  4679                           ;incstack = 0
  4680                           ;isalpha@c stored from wreg
  4681  0038EE  6E1D               	movwf	isalpha@c,c
  4682  0038F0  0E01               	movlw	1
  4683  0038F2  6E1C               	movwf	_isalpha$3020,c
  4684  0038F4  0E7B               	movlw	123
  4685  0038F6  601D               	cpfslt	isalpha@c,c
  4686  0038F8  D003               	goto	u7480
  4687  0038FA  0E61               	movlw	97
  4688  0038FC  601D               	cpfslt	isalpha@c,c
  4689  0038FE  D007               	goto	l2143
  4690  003900                     u7480:
  4691  003900  501D               	movf	isalpha@c,w,c
  4692  003902  EC1A  F01D         	call	_isupper
  4693  003906  B0D8               	btfsc	status,0,c
  4694  003908  D002               	goto	l2143
  4695  00390A  0E00               	movlw	0
  4696  00390C  6E1C               	movwf	_isalpha$3020,c
  4697  00390E                     l2143:
  4698  00390E  C01C  F01B         	movff	_isalpha$3020,??_isalpha
  4699  003912  301B               	rrcf	??_isalpha,w,c
  4700  003914  0012               	return	
  4701  003916                     __end_of_isalpha:
  4702                           	opt stack 0
  4703                           tosu	equ	0xFFF
  4704                           tosh	equ	0xFFE
  4705                           tosl	equ	0xFFD
  4706                           pclath	equ	0xFFA
  4707                           tblptru	equ	0xFF8
  4708                           tblptrh	equ	0xFF7
  4709                           tblptrl	equ	0xFF6
  4710                           tablat	equ	0xFF5
  4711                           prodh	equ	0xFF4
  4712                           prodl	equ	0xFF3
  4713                           intcon	equ	0xFF2
  4714                           postinc0	equ	0xFEE
  4715                           plusw0	equ	0xFEB
  4716                           wreg	equ	0xFE8
  4717                           indf1	equ	0xFE7
  4718                           postdec1	equ	0xFE5
  4719                           fsr1h	equ	0xFE2
  4720                           fsr1l	equ	0xFE1
  4721                           indf2	equ	0xFDF
  4722                           postinc2	equ	0xFDE
  4723                           postdec2	equ	0xFDD
  4724                           plusw2	equ	0xFDB
  4725                           fsr2h	equ	0xFDA
  4726                           fsr2l	equ	0xFD9
  4727                           status	equ	0xFD8
  4728                           
  4729 ;; *************** function _isupper *****************
  4730 ;; Defined at:
  4731 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isupper.c"
  4732 ;; Parameters:    Size  Location     Type
  4733 ;;  c               1    wreg     unsigned char 
  4734 ;; Auto vars:     Size  Location     Type
  4735 ;;  c               1   25[COMRAM] unsigned char 
  4736 ;; Return value:  Size  Location     Type
  4737 ;;		None               void
  4738 ;; Registers used:
  4739 ;;		wreg, status,2, status,0
  4740 ;; Tracked objects:
  4741 ;;		On entry : 0/0
  4742 ;;		On exit  : 0/0
  4743 ;;		Unchanged: 0/0
  4744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4745 ;;      Params:         0       0       0       0       0       0       0
  4746 ;;      Locals:         2       0       0       0       0       0       0
  4747 ;;      Temps:          1       0       0       0       0       0       0
  4748 ;;      Totals:         3       0       0       0       0       0       0
  4749 ;;Total ram usage:        3 bytes
  4750 ;; Hardware stack levels used:    1
  4751 ;; Hardware stack levels required when called:    3
  4752 ;; This function calls:
  4753 ;;		Nothing
  4754 ;; This function is called by:
  4755 ;;		_isalpha
  4756 ;; This function uses a non-reentrant model
  4757 ;;
  4758                           
  4759                           	psect	text19
  4760  003A34                     __ptext19:
  4761                           	opt stack 0
  4762  003A34                     _isupper:
  4763                           	opt stack 21
  4764                           
  4765                           ;incstack = 0
  4766                           ;isupper@c stored from wreg
  4767  003A34  6E1A               	movwf	isupper@c,c
  4768  003A36  0E00               	movlw	0
  4769  003A38  6E19               	movwf	_isupper$3029,c
  4770  003A3A  0E5B               	movlw	91
  4771  003A3C  601A               	cpfslt	isupper@c,c
  4772  003A3E  D005               	goto	l2158
  4773  003A40  0E40               	movlw	64
  4774  003A42  641A               	cpfsgt	isupper@c,c
  4775  003A44  D002               	goto	l2158
  4776  003A46  0E01               	movlw	1
  4777  003A48  6E19               	movwf	_isupper$3029,c
  4778  003A4A                     l2158:
  4779  003A4A  C019  F018         	movff	_isupper$3029,??_isupper
  4780  003A4E  3018               	rrcf	??_isupper,w,c
  4781  003A50  0012               	return	
  4782  003A52                     __end_of_isupper:
  4783                           	opt stack 0
  4784                           tosu	equ	0xFFF
  4785                           tosh	equ	0xFFE
  4786                           tosl	equ	0xFFD
  4787                           pclath	equ	0xFFA
  4788                           tblptru	equ	0xFF8
  4789                           tblptrh	equ	0xFF7
  4790                           tblptrl	equ	0xFF6
  4791                           tablat	equ	0xFF5
  4792                           prodh	equ	0xFF4
  4793                           prodl	equ	0xFF3
  4794                           intcon	equ	0xFF2
  4795                           postinc0	equ	0xFEE
  4796                           plusw0	equ	0xFEB
  4797                           wreg	equ	0xFE8
  4798                           indf1	equ	0xFE7
  4799                           postdec1	equ	0xFE5
  4800                           fsr1h	equ	0xFE2
  4801                           fsr1l	equ	0xFE1
  4802                           indf2	equ	0xFDF
  4803                           postinc2	equ	0xFDE
  4804                           postdec2	equ	0xFDD
  4805                           plusw2	equ	0xFDB
  4806                           fsr2h	equ	0xFDA
  4807                           fsr2l	equ	0xFD9
  4808                           status	equ	0xFD8
  4809                           
  4810 ;; *************** function _SynthReadData *****************
  4811 ;; Defined at:
  4812 ;;		line 137 in file "SyntApp.c"
  4813 ;; Parameters:    Size  Location     Type
  4814 ;;  cType           1    wreg     enum E1
  4815 ;;  data            2  104[BANK0 ] PTR unsigned char 
  4816 ;; Auto vars:     Size  Location     Type
  4817 ;;  cType           1   27[BANK2 ] enum E1
  4818 ;;  byteNum         2   42[BANK2 ] int 
  4819 ;;  regNum          2   40[BANK2 ] int 
  4820 ;;  TxMsg          27    0[BANK2 ] unsigned char [27]
  4821 ;;  eepromDataAr   12   28[BANK2 ] unsigned long [3]
  4822 ;; Return value:  Size  Location     Type
  4823 ;;                  1    wreg      void 
  4824 ;; Registers used:
  4825 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4826 ;; Tracked objects:
  4827 ;;		On entry : 0/0
  4828 ;;		On exit  : 0/0
  4829 ;;		Unchanged: 0/0
  4830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4831 ;;      Params:         0       2       0       0       0       0       0
  4832 ;;      Locals:         0       0       0      44       0       0       0
  4833 ;;      Temps:          0       4       0       0       0       0       0
  4834 ;;      Totals:         0       6       0      44       0       0       0
  4835 ;;Total ram usage:       50 bytes
  4836 ;; Hardware stack levels used:    1
  4837 ;; Hardware stack levels required when called:    9
  4838 ;; This function calls:
  4839 ;;		_ReadIntFromEeprom
  4840 ;;		_WriteUartMessage
  4841 ;;		_ZeroArray
  4842 ;;		_crc8
  4843 ;;		_make8
  4844 ;; This function is called by:
  4845 ;;		_GroupSynthesizers
  4846 ;; This function uses a non-reentrant model
  4847 ;;
  4848                           
  4849                           	psect	text20
  4850  000A66                     __ptext20:
  4851                           	opt stack 0
  4852  000A66                     _SynthReadData:
  4853                           	opt stack 19
  4854                           
  4855                           ;incstack = 0
  4856                           ;SynthReadData@cType stored from wreg
  4857  000A66  0102               	movlb	2	; () banked
  4858  000A68  6F1B               	movwf	SynthReadData@cType& (0+255),b
  4859                           
  4860                           ;SyntApp.c: 139: uint32_t eepromDataArray[3];
  4861                           ;SyntApp.c: 140: char TxMsg[22 + (0x4) + 1];
  4862                           ;SyntApp.c: 141: ZeroArray(TxMsg, 22 + (0x4) + 1);
  4863  000A6A  0E00               	movlw	low SynthReadData@TxMsg
  4864  000A6C  6E20               	movwf	ZeroArray@array,c
  4865  000A6E  0E02               	movlw	high SynthReadData@TxMsg
  4866  000A70  6E21               	movwf	ZeroArray@array+1,c
  4867  000A72  0E00               	movlw	0
  4868  000A74  6E23               	movwf	ZeroArray@size+1,c
  4869  000A76  0E1B               	movlw	27
  4870  000A78  6E22               	movwf	ZeroArray@size,c
  4871  000A7A  EC29  F01D         	call	_ZeroArray	;wreg free
  4872                           
  4873                           ;SyntApp.c: 144: TxMsg[(0)] = (0x24);
  4874  000A7E  0E24               	movlw	36
  4875  000A80  0102               	movlb	2	; () banked
  4876  000A82  6F00               	movwf	SynthReadData@TxMsg& (0+255),b
  4877                           
  4878                           ; BSR set to: 2
  4879                           ;SyntApp.c: 145: TxMsg[(1)] = SYNTH_MSG;
  4880  000A84  0E04               	movlw	4
  4881  000A86  6F01               	movwf	(SynthReadData@TxMsg+1)& (0+255),b
  4882                           
  4883                           ; BSR set to: 2
  4884                           ;SyntApp.c: 146: TxMsg[(3)] = 22;
  4885  000A88  0E16               	movlw	22
  4886  000A8A  6F03               	movwf	(SynthReadData@TxMsg+3)& (0+255),b
  4887                           
  4888                           ; BSR set to: 2
  4889                           ;SyntApp.c: 148: if(cType == SYNTH_TX)
  4890  000A8C  511B               	movf	SynthReadData@cType& (0+255),w,b
  4891  000A8E  A4D8               	btfss	status,2,c
  4892  000A90  D03A               	goto	l523
  4893                           
  4894                           ; BSR set to: 2
  4895                           ;SyntApp.c: 149: {
  4896                           ;SyntApp.c: 150: TxMsg[(2)] = SYNTH_DOWN_READ_DATA;
  4897  000A92  0E47               	movlw	71
  4898  000A94  6F02               	movwf	(SynthReadData@TxMsg+2)& (0+255),b
  4899                           
  4900                           ; BSR set to: 2
  4901                           ;SyntApp.c: 151: eepromDataArray[0] = ReadIntFromEeprom((0) | SYNTH_ADDRES[0], 4);
  4902  000A96  0E00               	movlw	0
  4903  000A98  0100               	movlb	0	; () banked
  4904  000A9A  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  4905  000A9C  0E04               	movlw	4
  4906  000A9E  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  4907  000AA0  0E35               	movlw	low _SYNTH_ADDRES
  4908  000AA2  6EF6               	movwf	tblptrl,c
  4909  000AA4                     	if	1	;There is more than 1 active tblptr byte
  4910  000AA4  0E06               	movlw	high _SYNTH_ADDRES
  4911  000AA6  6EF7               	movwf	tblptrh,c
  4912  000AA8                     	endif
  4913  000AA8                     	if	0	;There are less than 3 active tblptr bytes
  4914  000AA8                     	endif
  4915  000AA8  0008               	tblrd		*
  4916  000AAA  50F5               	movf	tablat,w,c
  4917  000AAC  EC83  F00D         	call	_ReadIntFromEeprom
  4918  000AB0  C0B1  F21C         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray
  4919  000AB4  C0B2  F21D         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+1
  4920  000AB8  C0B3  F21E         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+2
  4921  000ABC  C0B4  F21F         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+3
  4922                           
  4923                           ;SyntApp.c: 152: eepromDataArray[1] = ReadIntFromEeprom((0) | SYNTH_ADDRES[1], 4);
  4924  000AC0  0E00               	movlw	0
  4925  000AC2  0100               	movlb	0	; () banked
  4926  000AC4  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  4927  000AC6  0E04               	movlw	4
  4928  000AC8  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  4929  000ACA  0E36               	movlw	low (_SYNTH_ADDRES+1)
  4930  000ACC  6EF6               	movwf	tblptrl,c
  4931  000ACE  0E06               	movlw	high (_SYNTH_ADDRES+1)
  4932  000AD0  6EF7               	movwf	tblptrh,c
  4933  000AD2                     	if	0	;tblptru may be non-zero
  4934  000AD2                     	endif
  4935  000AD2                     	if	0	;tblptru may be non-zero
  4936  000AD2                     	endif
  4937  000AD2  0008               	tblrd		*
  4938  000AD4  50F5               	movf	tablat,w,c
  4939  000AD6  EC83  F00D         	call	_ReadIntFromEeprom
  4940  000ADA  C0B1  F220         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+4
  4941  000ADE  C0B2  F221         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+5
  4942  000AE2  C0B3  F222         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+6
  4943  000AE6  C0B4  F223         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+7
  4944                           
  4945                           ;SyntApp.c: 153: eepromDataArray[2] = ReadIntFromEeprom((0) | SYNTH_ADDRES[2], 4);
  4946  000AEA  0E00               	movlw	0
  4947  000AEC  0100               	movlb	0	; () banked
  4948  000AEE  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  4949  000AF0  0E04               	movlw	4
  4950  000AF2  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  4951  000AF4  0E37               	movlw	low (_SYNTH_ADDRES+2)
  4952  000AF6  6EF6               	movwf	tblptrl,c
  4953  000AF8  0E06               	movlw	high (_SYNTH_ADDRES+2)
  4954  000AFA  6EF7               	movwf	tblptrh,c
  4955  000AFC                     	if	0	;tblptru may be non-zero
  4956  000AFC                     	endif
  4957  000AFC                     	if	0	;tblptru may be non-zero
  4958  000AFC                     	endif
  4959  000AFC  0008               	tblrd		*
  4960  000AFE  50F5               	movf	tablat,w,c
  4961  000B00  EC83  F00D         	call	_ReadIntFromEeprom
  4962  000B04  D040               	goto	L1
  4963  000B06                     l523:
  4964                           
  4965                           ;SyntApp.c: 155: else if (cType == SYNTH_RX)
  4966  000B06  0102               	movlb	2	; () banked
  4967  000B08  051B               	decf	SynthReadData@cType& (0+255),w,b
  4968  000B0A  A4D8               	btfss	status,2,c
  4969  000B0C  D044               	goto	l525
  4970                           
  4971                           ; BSR set to: 2
  4972                           ;SyntApp.c: 156: {
  4973                           ;SyntApp.c: 157: TxMsg[(2)] = SYNTH_UP_READ_DATA;
  4974  000B0E  0E46               	movlw	70
  4975  000B10  6F02               	movwf	(SynthReadData@TxMsg+2)& (0+255),b
  4976                           
  4977                           ; BSR set to: 2
  4978                           ;SyntApp.c: 158: eepromDataArray[0] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[0], 4);
  4979  000B12  0E00               	movlw	0
  4980  000B14  0100               	movlb	0	; () banked
  4981  000B16  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  4982  000B18  0E04               	movlw	4
  4983  000B1A  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  4984  000B1C  0E35               	movlw	low _SYNTH_ADDRES
  4985  000B1E  6EF6               	movwf	tblptrl,c
  4986  000B20                     	if	1	;There is more than 1 active tblptr byte
  4987  000B20  0E06               	movlw	high _SYNTH_ADDRES
  4988  000B22  6EF7               	movwf	tblptrh,c
  4989  000B24                     	endif
  4990  000B24                     	if	0	;There are less than 3 active tblptr bytes
  4991  000B24                     	endif
  4992  000B24  0008               	tblrd		*
  4993  000B26  50F5               	movf	tablat,w,c
  4994  000B28  0920               	iorlw	32
  4995  000B2A  EC83  F00D         	call	_ReadIntFromEeprom
  4996  000B2E  C0B1  F21C         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray
  4997  000B32  C0B2  F21D         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+1
  4998  000B36  C0B3  F21E         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+2
  4999  000B3A  C0B4  F21F         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+3
  5000                           
  5001                           ;SyntApp.c: 159: eepromDataArray[1] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[1], 4);
  5002  000B3E  0E00               	movlw	0
  5003  000B40  0100               	movlb	0	; () banked
  5004  000B42  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  5005  000B44  0E04               	movlw	4
  5006  000B46  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  5007  000B48  0E36               	movlw	low (_SYNTH_ADDRES+1)
  5008  000B4A  6EF6               	movwf	tblptrl,c
  5009  000B4C  0E06               	movlw	high (_SYNTH_ADDRES+1)
  5010  000B4E  6EF7               	movwf	tblptrh,c
  5011  000B50                     	if	0	;tblptru may be non-zero
  5012  000B50                     	endif
  5013  000B50                     	if	0	;tblptru may be non-zero
  5014  000B50                     	endif
  5015  000B50  0008               	tblrd		*
  5016  000B52  50F5               	movf	tablat,w,c
  5017  000B54  0920               	iorlw	32
  5018  000B56  EC83  F00D         	call	_ReadIntFromEeprom
  5019  000B5A  C0B1  F220         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+4
  5020  000B5E  C0B2  F221         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+5
  5021  000B62  C0B3  F222         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+6
  5022  000B66  C0B4  F223         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+7
  5023                           
  5024                           ;SyntApp.c: 160: eepromDataArray[2] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[2], 4);
  5025  000B6A  0E00               	movlw	0
  5026  000B6C  0100               	movlb	0	; () banked
  5027  000B6E  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  5028  000B70  0E04               	movlw	4
  5029  000B72  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  5030  000B74  0E37               	movlw	low (_SYNTH_ADDRES+2)
  5031  000B76  6EF6               	movwf	tblptrl,c
  5032  000B78  0E06               	movlw	high (_SYNTH_ADDRES+2)
  5033  000B7A  6EF7               	movwf	tblptrh,c
  5034  000B7C                     	if	0	;tblptru may be non-zero
  5035  000B7C                     	endif
  5036  000B7C                     	if	0	;tblptru may be non-zero
  5037  000B7C                     	endif
  5038  000B7C  0008               	tblrd		*
  5039  000B7E  50F5               	movf	tablat,w,c
  5040  000B80  0920               	iorlw	32
  5041  000B82  EC83  F00D         	call	_ReadIntFromEeprom
  5042  000B86                     L1:
  5043  000B86  C0B1  F224         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+8
  5044  000B8A  C0B2  F225         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+9
  5045  000B8E  C0B3  F226         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+10
  5046  000B92  C0B4  F227         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+11
  5047  000B96                     l525:
  5048                           
  5049                           ;SyntApp.c: 161: }
  5050                           ;SyntApp.c: 163: for(int regNum = 0; regNum < 4; regNum++)
  5051  000B96  0E00               	movlw	0
  5052  000B98  0102               	movlb	2	; () banked
  5053  000B9A  6F29               	movwf	(SynthReadData@regNum+1)& (0+255),b
  5054  000B9C  0E00               	movlw	0
  5055  000B9E  6F28               	movwf	SynthReadData@regNum& (0+255),b
  5056  000BA0                     l8005:
  5057                           
  5058                           ; BSR set to: 2
  5059  000BA0  BF29               	btfsc	(SynthReadData@regNum+1)& (0+255),7,b
  5060  000BA2  D006               	goto	l526
  5061  000BA4  5129               	movf	(SynthReadData@regNum+1)& (0+255),w,b
  5062  000BA6  E149               	bnz	l8025
  5063  000BA8  0E04               	movlw	4
  5064  000BAA  5D28               	subwf	SynthReadData@regNum& (0+255),w,b
  5065  000BAC  B0D8               	btfsc	status,0,c
  5066  000BAE  D045               	goto	u8590
  5067  000BB0                     l526:
  5068                           
  5069                           ; BSR set to: 2
  5070                           ;SyntApp.c: 164: {
  5071                           ;SyntApp.c: 165: for(int byteNum = 0; byteNum < 4; byteNum++)
  5072                           
  5073                           ; BSR set to: 2
  5074  000BB0  0E00               	movlw	0
  5075  000BB2  6F2B               	movwf	(SynthReadData@byteNum+1)& (0+255),b
  5076  000BB4  0E00               	movlw	0
  5077  000BB6  6F2A               	movwf	SynthReadData@byteNum& (0+255),b
  5078  000BB8                     l8011:
  5079                           
  5080                           ; BSR set to: 2
  5081  000BB8  BF2B               	btfsc	(SynthReadData@byteNum+1)& (0+255),7,b
  5082  000BBA  D006               	goto	l528
  5083  000BBC  512B               	movf	(SynthReadData@byteNum+1)& (0+255),w,b
  5084  000BBE  E13A               	bnz	l8021
  5085  000BC0  0E04               	movlw	4
  5086  000BC2  5D2A               	subwf	SynthReadData@byteNum& (0+255),w,b
  5087  000BC4  B0D8               	btfsc	status,0,c
  5088  000BC6  D036               	goto	u8580
  5089  000BC8                     l528:
  5090                           
  5091                           ; BSR set to: 2
  5092                           ;SyntApp.c: 166: {
  5093                           ;SyntApp.c: 167: TxMsg[(0x4) + regNum + byteNum] = make8(eepromDataArray[regNum], byteNu
      +                          m);
  5094                           
  5095                           ; BSR set to: 2
  5096  000BC8  512A               	movf	SynthReadData@byteNum& (0+255),w,b
  5097  000BCA  2528               	addwf	SynthReadData@regNum& (0+255),w,b
  5098  000BCC  0100               	movlb	0	; () banked
  5099  000BCE  6FCA               	movwf	??_SynthReadData& (0+255),b
  5100  000BD0  0102               	movlb	2	; () banked
  5101  000BD2  512B               	movf	(SynthReadData@byteNum+1)& (0+255),w,b
  5102  000BD4  2129               	addwfc	(SynthReadData@regNum+1)& (0+255),w,b
  5103  000BD6  0100               	movlb	0	; () banked
  5104  000BD8  6FCB               	movwf	(??_SynthReadData+1)& (0+255),b
  5105  000BDA  0E04               	movlw	4
  5106  000BDC  27CA               	addwf	??_SynthReadData& (0+255),f,b
  5107  000BDE  0E00               	movlw	0
  5108  000BE0  23CB               	addwfc	(??_SynthReadData+1)& (0+255),f,b
  5109  000BE2  0E00               	movlw	low SynthReadData@TxMsg
  5110  000BE4  25CA               	addwf	??_SynthReadData& (0+255),w,b
  5111  000BE6  6ED9               	movwf	fsr2l,c
  5112  000BE8  0E02               	movlw	high SynthReadData@TxMsg
  5113  000BEA  21CB               	addwfc	(??_SynthReadData+1)& (0+255),w,b
  5114  000BEC  6EDA               	movwf	fsr2h,c
  5115  000BEE  0E1C               	movlw	low SynthReadData@eepromDataArray
  5116  000BF0  6FCC               	movwf	(??_SynthReadData+2)& (0+255),b
  5117  000BF2  0E02               	movlw	high SynthReadData@eepromDataArray
  5118  000BF4  6FCD               	movwf	(??_SynthReadData+3)& (0+255),b
  5119  000BF6  90D8               	bcf	status,0,c
  5120  000BF8  0102               	movlb	2	; () banked
  5121  000BFA  3528               	rlcf	SynthReadData@regNum& (0+255),w,b
  5122  000BFC  6EE1               	movwf	fsr1l,c
  5123  000BFE  3529               	rlcf	(SynthReadData@regNum+1)& (0+255),w,b
  5124  000C00  6EE2               	movwf	fsr1h,c
  5125  000C02  90D8               	bcf	status,0,c
  5126  000C04  36E1               	rlcf	fsr1l,f,c
  5127  000C06  36E2               	rlcf	fsr1h,f,c
  5128  000C08  0100               	movlb	0	; () banked
  5129  000C0A  51CC               	movf	(??_SynthReadData+2)& (0+255),w,b
  5130  000C0C  26E1               	addwf	fsr1l,f,c
  5131  000C0E  51CD               	movf	(??_SynthReadData+3)& (0+255),w,b
  5132  000C10  22E2               	addwfc	fsr1h,f,c
  5133  000C12  CFE6 F018          	movff	postinc1,make8@data
  5134  000C16  CFE6 F019          	movff	postinc1,make8@data+1
  5135  000C1A  CFE6 F01A          	movff	postinc1,make8@data+2
  5136  000C1E  CFE6 F01B          	movff	postinc1,make8@data+3
  5137  000C22  C22A  F01C         	movff	SynthReadData@byteNum,make8@dataLocation
  5138  000C26  EC1C  F018         	call	_make8	;wreg free
  5139  000C2A  6EDF               	movwf	indf2,c
  5140  000C2C  0102               	movlb	2	; () banked
  5141  000C2E  4B2A               	infsnz	SynthReadData@byteNum& (0+255),f,b
  5142  000C30  2B2B               	incf	(SynthReadData@byteNum+1)& (0+255),f,b
  5143  000C32  D7C2               	goto	l8011
  5144  000C34                     u8580:
  5145  000C34                     l8021:
  5146                           
  5147                           ; BSR set to: 2
  5148  000C34  4B28               	infsnz	SynthReadData@regNum& (0+255),f,b
  5149  000C36  2B29               	incf	(SynthReadData@regNum+1)& (0+255),f,b
  5150  000C38  D7B3               	goto	l8005
  5151  000C3A                     u8590:
  5152  000C3A                     l8025:
  5153                           
  5154                           ; BSR set to: 2
  5155                           ;SyntApp.c: 168: }
  5156                           ;SyntApp.c: 169: }
  5157                           ;SyntApp.c: 171: TxMsg[22 + (0x4)] = crc8(TxMsg, 22 + (0x4));
  5158  000C3A  0E00               	movlw	low SynthReadData@TxMsg
  5159  000C3C  6E18               	movwf	crc8@dataArray,c
  5160  000C3E  0E02               	movlw	high SynthReadData@TxMsg
  5161  000C40  6E19               	movwf	crc8@dataArray+1,c
  5162  000C42  0E00               	movlw	0
  5163  000C44  6E1B               	movwf	crc8@dataSize+1,c
  5164  000C46  0E1A               	movlw	26
  5165  000C48  6E1A               	movwf	crc8@dataSize,c
  5166  000C4A  ECA3  F019         	call	_crc8	;wreg free
  5167  000C4E  0102               	movlb	2	; () banked
  5168  000C50  6F1A               	movwf	(SynthReadData@TxMsg+26)& (0+255),b
  5169                           
  5170                           ; BSR set to: 2
  5171                           ;SyntApp.c: 172: WriteUartMessage(TxMsg, 22 + (0x4) + 1);
  5172  000C52  0E00               	movlw	low SynthReadData@TxMsg
  5173  000C54  6E19               	movwf	WriteUartMessage@dataBuf,c
  5174  000C56  0E02               	movlw	high SynthReadData@TxMsg
  5175  000C58  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5176  000C5A  0E00               	movlw	0
  5177  000C5C  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5178  000C5E  0E1B               	movlw	27
  5179  000C60  6E1B               	movwf	WriteUartMessage@dataSize,c
  5180  000C62  EC9F  F01B         	call	_WriteUartMessage	;wreg free
  5181  000C66  0012               	return		;funcret
  5182  000C68                     __end_of_SynthReadData:
  5183                           	opt stack 0
  5184                           tosu	equ	0xFFF
  5185                           tosh	equ	0xFFE
  5186                           tosl	equ	0xFFD
  5187                           pclath	equ	0xFFA
  5188                           tblptru	equ	0xFF8
  5189                           tblptrh	equ	0xFF7
  5190                           tblptrl	equ	0xFF6
  5191                           tablat	equ	0xFF5
  5192                           prodh	equ	0xFF4
  5193                           prodl	equ	0xFF3
  5194                           intcon	equ	0xFF2
  5195                           postinc0	equ	0xFEE
  5196                           plusw0	equ	0xFEB
  5197                           wreg	equ	0xFE8
  5198                           indf1	equ	0xFE7
  5199                           postinc1	equ	0xFE6
  5200                           postdec1	equ	0xFE5
  5201                           fsr1h	equ	0xFE2
  5202                           fsr1l	equ	0xFE1
  5203                           indf2	equ	0xFDF
  5204                           postinc2	equ	0xFDE
  5205                           postdec2	equ	0xFDD
  5206                           plusw2	equ	0xFDB
  5207                           fsr2h	equ	0xFDA
  5208                           fsr2l	equ	0xFD9
  5209                           status	equ	0xFD8
  5210                           
  5211 ;; *************** function _SetSynthOper *****************
  5212 ;; Defined at:
  5213 ;;		line 106 in file "SyntApp.c"
  5214 ;; Parameters:    Size  Location     Type
  5215 ;;  cType           1    wreg     enum E1
  5216 ;; Auto vars:     Size  Location     Type
  5217 ;;  cType           1  111[BANK0 ] enum E1
  5218 ;; Return value:  Size  Location     Type
  5219 ;;                  1    wreg      void 
  5220 ;; Registers used:
  5221 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5222 ;; Tracked objects:
  5223 ;;		On entry : 0/0
  5224 ;;		On exit  : 0/0
  5225 ;;		Unchanged: 0/0
  5226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5227 ;;      Params:         0       0       0       0       0       0       0
  5228 ;;      Locals:         0       1       0       0       0       0       0
  5229 ;;      Temps:          0       0       0       0       0       0       0
  5230 ;;      Totals:         0       1       0       0       0       0       0
  5231 ;;Total ram usage:        1 bytes
  5232 ;; Hardware stack levels used:    1
  5233 ;; Hardware stack levels required when called:   10
  5234 ;; This function calls:
  5235 ;;		_InitSynth
  5236 ;;		_SendAckMessage
  5237 ;;		_SwSpi_Set_CE_Pin
  5238 ;; This function is called by:
  5239 ;;		_GroupSynthesizers
  5240 ;; This function uses a non-reentrant model
  5241 ;;
  5242                           
  5243                           	psect	text21
  5244  002D54                     __ptext21:
  5245                           	opt stack 0
  5246  002D54                     _SetSynthOper:
  5247                           	opt stack 18
  5248                           
  5249                           ;incstack = 0
  5250                           ;SetSynthOper@cType stored from wreg
  5251  002D54  0100               	movlb	0	; () banked
  5252  002D56  6FCF               	movwf	SetSynthOper@cType& (0+255),b
  5253                           
  5254                           ;SyntApp.c: 108: if(cType == SYNTH_TX)
  5255  002D58  0100               	movlb	0	; () banked
  5256  002D5A  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  5257  002D5C  A4D8               	btfss	status,2,c
  5258  002D5E  D01A               	goto	l513
  5259                           
  5260                           ; BSR set to: 0
  5261                           ;SyntApp.c: 109: {
  5262                           ;SyntApp.c: 110: SynthTxOper = !SynthTxOper;
  5263  002D60  5045               	movf	_SynthTxOper,w,c
  5264  002D62  A4D8               	btfss	status,2,c
  5265  002D64  D002               	goto	u8470
  5266  002D66  0E01               	movlw	1
  5267  002D68  D001               	goto	u8480
  5268  002D6A                     u8470:
  5269  002D6A  0E00               	movlw	0
  5270  002D6C                     u8480:
  5271  002D6C  6E45               	movwf	_SynthTxOper,c
  5272                           
  5273                           ;SyntApp.c: 111: if(SynthTxOper)
  5274  002D6E  5045               	movf	_SynthTxOper,w,c
  5275  002D70  B4D8               	btfsc	status,2,c
  5276  002D72  D004               	goto	l514
  5277                           
  5278                           ; BSR set to: 0
  5279                           ;SyntApp.c: 112: {
  5280                           ;SyntApp.c: 113: InitSynth(cType);
  5281  002D74  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  5282  002D76  EC3A  F00C         	call	_InitSynth
  5283                           
  5284                           ;SyntApp.c: 114: }
  5285  002D7A  D006               	goto	l515
  5286  002D7C                     l514:
  5287                           
  5288                           ;SyntApp.c: 115: else
  5289                           ;SyntApp.c: 116: {
  5290                           ;SyntApp.c: 117: SwSpi_Set_CE_Pin(cType, 0);
  5291  002D7C  0E00               	movlw	0
  5292  002D7E  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  5293  002D80  0100               	movlb	0	; () banked
  5294  002D82  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  5295  002D84  ECD8  F01A         	call	_SwSpi_Set_CE_Pin
  5296  002D88                     l515:
  5297                           
  5298                           ;SyntApp.c: 118: }
  5299                           ;SyntApp.c: 119: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_DOWN_OPER);
  5300  002D88  0E45               	movlw	69
  5301  002D8A  6E24               	movwf	SendAckMessage@inRequest,c
  5302  002D8C  0E04               	movlw	4
  5303  002D8E  EC7A  F019         	call	_SendAckMessage
  5304                           
  5305                           ;SyntApp.c: 120: }
  5306  002D92  0012               	return	
  5307  002D94                     l513:
  5308                           
  5309                           ;SyntApp.c: 121: else if (cType == SYNTH_RX)
  5310  002D94  0100               	movlb	0	; () banked
  5311  002D96  05CF               	decf	SetSynthOper@cType& (0+255),w,b
  5312  002D98  A4D8               	btfss	status,2,c
  5313  002D9A  0012               	return	
  5314                           
  5315                           ; BSR set to: 0
  5316                           ;SyntApp.c: 122: {
  5317                           ;SyntApp.c: 123: SynthRxOper = !SynthRxOper;
  5318  002D9C  5044               	movf	_SynthRxOper,w,c
  5319  002D9E  A4D8               	btfss	status,2,c
  5320  002DA0  D002               	goto	u8510
  5321  002DA2  0E01               	movlw	1
  5322  002DA4  D001               	goto	u8520
  5323  002DA6                     u8510:
  5324  002DA6  0E00               	movlw	0
  5325  002DA8                     u8520:
  5326  002DA8  6E44               	movwf	_SynthRxOper,c
  5327                           
  5328                           ;SyntApp.c: 124: if(SynthRxOper)
  5329  002DAA  5044               	movf	_SynthRxOper,w,c
  5330  002DAC  B4D8               	btfsc	status,2,c
  5331  002DAE  D004               	goto	l518
  5332                           
  5333                           ; BSR set to: 0
  5334                           ;SyntApp.c: 125: {
  5335                           ;SyntApp.c: 126: InitSynth(cType);
  5336  002DB0  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  5337  002DB2  EC3A  F00C         	call	_InitSynth
  5338                           
  5339                           ;SyntApp.c: 127: }
  5340  002DB6  D006               	goto	l519
  5341  002DB8                     l518:
  5342                           
  5343                           ;SyntApp.c: 128: else
  5344                           ;SyntApp.c: 129: {
  5345                           ;SyntApp.c: 130: SwSpi_Set_CE_Pin(cType, 0);
  5346  002DB8  0E00               	movlw	0
  5347  002DBA  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  5348  002DBC  0100               	movlb	0	; () banked
  5349  002DBE  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  5350  002DC0  ECD8  F01A         	call	_SwSpi_Set_CE_Pin
  5351  002DC4                     l519:
  5352                           
  5353                           ;SyntApp.c: 131: }
  5354                           ;SyntApp.c: 132: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_UP_OPER);
  5355  002DC4  0E44               	movlw	68
  5356  002DC6  6E24               	movwf	SendAckMessage@inRequest,c
  5357  002DC8  0E04               	movlw	4
  5358  002DCA  EC7A  F019         	call	_SendAckMessage
  5359  002DCE  0012               	return	
  5360  002DD0                     __end_of_SetSynthOper:
  5361                           	opt stack 0
  5362                           tosu	equ	0xFFF
  5363                           tosh	equ	0xFFE
  5364                           tosl	equ	0xFFD
  5365                           pclath	equ	0xFFA
  5366                           tblptru	equ	0xFF8
  5367                           tblptrh	equ	0xFF7
  5368                           tblptrl	equ	0xFF6
  5369                           tablat	equ	0xFF5
  5370                           prodh	equ	0xFF4
  5371                           prodl	equ	0xFF3
  5372                           intcon	equ	0xFF2
  5373                           postinc0	equ	0xFEE
  5374                           plusw0	equ	0xFEB
  5375                           wreg	equ	0xFE8
  5376                           indf1	equ	0xFE7
  5377                           postinc1	equ	0xFE6
  5378                           postdec1	equ	0xFE5
  5379                           fsr1h	equ	0xFE2
  5380                           fsr1l	equ	0xFE1
  5381                           indf2	equ	0xFDF
  5382                           postinc2	equ	0xFDE
  5383                           postdec2	equ	0xFDD
  5384                           plusw2	equ	0xFDB
  5385                           fsr2h	equ	0xFDA
  5386                           fsr2l	equ	0xFD9
  5387                           status	equ	0xFD8
  5388                           
  5389 ;; *************** function _GetMcuRunTime *****************
  5390 ;; Defined at:
  5391 ;;		line 54 in file "SystemStatus.c"
  5392 ;; Parameters:    Size  Location     Type
  5393 ;;		None
  5394 ;; Auto vars:     Size  Location     Type
  5395 ;;  idx             2   13[BANK0 ] int 
  5396 ;;  TxMsg           9    0[BANK0 ] unsigned char [9]
  5397 ;;  tempRunTime     4    9[BANK0 ] unsigned long 
  5398 ;; Return value:  Size  Location     Type
  5399 ;;                  1    wreg      void 
  5400 ;; Registers used:
  5401 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5402 ;; Tracked objects:
  5403 ;;		On entry : 0/0
  5404 ;;		On exit  : 0/0
  5405 ;;		Unchanged: 0/0
  5406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5407 ;;      Params:         0       0       0       0       0       0       0
  5408 ;;      Locals:         0      15       0       0       0       0       0
  5409 ;;      Temps:          2       0       0       0       0       0       0
  5410 ;;      Totals:         2      15       0       0       0       0       0
  5411 ;;Total ram usage:       17 bytes
  5412 ;; Hardware stack levels used:    1
  5413 ;; Hardware stack levels required when called:    5
  5414 ;; This function calls:
  5415 ;;		_WriteUartMessage
  5416 ;;		___lldiv
  5417 ;;		___llmod
  5418 ;;		_crc8
  5419 ;; This function is called by:
  5420 ;;		_GroupStatusAndVersion
  5421 ;; This function uses a non-reentrant model
  5422 ;;
  5423                           
  5424                           	psect	text22
  5425  002206                     __ptext22:
  5426                           	opt stack 0
  5427  002206                     _GetMcuRunTime:
  5428                           	opt stack 23
  5429                           
  5430                           ;SystemStatus.c: 57: char TxMsg[(0x4) + (0x4) + 1];
  5431                           ;SystemStatus.c: 60: TxMsg[(0)] = (0x24);
  5432                           
  5433                           ;incstack = 0
  5434  002206  0E24               	movlw	36
  5435  002208  0100               	movlb	0	; () banked
  5436  00220A  6F60               	movwf	GetMcuRunTime@TxMsg& (0+255),b
  5437                           
  5438                           ;SystemStatus.c: 61: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  5439  00220C  0E02               	movlw	2
  5440  00220E  6F61               	movwf	(GetMcuRunTime@TxMsg+1)& (0+255),b
  5441                           
  5442                           ;SystemStatus.c: 62: TxMsg[(2)] = STATUS_MCU_RUN_TIME;
  5443  002210  0E21               	movlw	33
  5444  002212  6F62               	movwf	(GetMcuRunTime@TxMsg+2)& (0+255),b
  5445                           
  5446                           ;SystemStatus.c: 63: TxMsg[(3)] = (0x4);
  5447  002214  0E04               	movlw	4
  5448  002216  6F63               	movwf	(GetMcuRunTime@TxMsg+3)& (0+255),b
  5449                           
  5450                           ; BSR set to: 0
  5451                           ;SystemStatus.c: 65: uint32_t tempRunTime = mcuRunTimeIn5SecTicks;
  5452  002218  C16E  F069         	movff	_mcuRunTimeIn5SecTicks,GetMcuRunTime@tempRunTime
  5453  00221C  C16F  F06A         	movff	_mcuRunTimeIn5SecTicks+1,GetMcuRunTime@tempRunTime+1
  5454  002220  C170  F06B         	movff	_mcuRunTimeIn5SecTicks+2,GetMcuRunTime@tempRunTime+2
  5455  002224  C171  F06C         	movff	_mcuRunTimeIn5SecTicks+3,GetMcuRunTime@tempRunTime+3
  5456                           
  5457                           ;SystemStatus.c: 68: for(int idx = 0; idx < (0x4); idx++)
  5458  002228  0E00               	movlw	0
  5459  00222A  6F6E               	movwf	(GetMcuRunTime@idx+1)& (0+255),b
  5460  00222C  0E00               	movlw	0
  5461  00222E  6F6D               	movwf	GetMcuRunTime@idx& (0+255),b
  5462  002230                     l8063:
  5463                           
  5464                           ; BSR set to: 0
  5465  002230  BF6E               	btfsc	(GetMcuRunTime@idx+1)& (0+255),7,b
  5466  002232  D006               	goto	l1393
  5467  002234  516E               	movf	(GetMcuRunTime@idx+1)& (0+255),w,b
  5468  002236  E142               	bnz	l8075
  5469  002238  0E04               	movlw	4
  5470  00223A  5D6D               	subwf	GetMcuRunTime@idx& (0+255),w,b
  5471  00223C  B0D8               	btfsc	status,0,c
  5472  00223E  D03E               	goto	u8610
  5473  002240                     l1393:
  5474                           
  5475                           ; BSR set to: 0
  5476                           ;SystemStatus.c: 69: {
  5477                           ;SystemStatus.c: 70: TxMsg[(0x4) + idx] = tempRunTime % 10;
  5478                           
  5479                           ; BSR set to: 0
  5480  002240  0E04               	movlw	4
  5481  002242  256D               	addwf	GetMcuRunTime@idx& (0+255),w,b
  5482  002244  6E25               	movwf	??_GetMcuRunTime& (0+255),c
  5483  002246  0E00               	movlw	0
  5484  002248  216E               	addwfc	(GetMcuRunTime@idx+1)& (0+255),w,b
  5485  00224A  6E26               	movwf	(??_GetMcuRunTime+1)& (0+255),c
  5486  00224C  0E60               	movlw	low GetMcuRunTime@TxMsg
  5487  00224E  2425               	addwf	??_GetMcuRunTime,w,c
  5488  002250  6ED9               	movwf	fsr2l,c
  5489  002252  0E00               	movlw	high GetMcuRunTime@TxMsg
  5490  002254  2026               	addwfc	??_GetMcuRunTime+1,w,c
  5491  002256  6EDA               	movwf	fsr2h,c
  5492  002258  C069  F018         	movff	GetMcuRunTime@tempRunTime,___llmod@dividend
  5493  00225C  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___llmod@dividend+1
  5494  002260  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___llmod@dividend+2
  5495  002264  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___llmod@dividend+3
  5496  002268  0E0A               	movlw	10
  5497  00226A  6E1C               	movwf	___llmod@divisor,c
  5498  00226C  0E00               	movlw	0
  5499  00226E  6E1D               	movwf	___llmod@divisor+1,c
  5500  002270  0E00               	movlw	0
  5501  002272  6E1E               	movwf	___llmod@divisor+2,c
  5502  002274  0E00               	movlw	0
  5503  002276  6E1F               	movwf	___llmod@divisor+3,c
  5504  002278  EC5A  F017         	call	___llmod	;wreg free
  5505  00227C  5018               	movf	?___llmod,w,c
  5506  00227E  6EDF               	movwf	indf2,c
  5507                           
  5508                           ;SystemStatus.c: 71: tempRunTime /= 10;
  5509  002280  C069  F018         	movff	GetMcuRunTime@tempRunTime,___lldiv@dividend
  5510  002284  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___lldiv@dividend+1
  5511  002288  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___lldiv@dividend+2
  5512  00228C  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___lldiv@dividend+3
  5513  002290  0E0A               	movlw	10
  5514  002292  6E1C               	movwf	___lldiv@divisor,c
  5515  002294  0E00               	movlw	0
  5516  002296  6E1D               	movwf	___lldiv@divisor+1,c
  5517  002298  0E00               	movlw	0
  5518  00229A  6E1E               	movwf	___lldiv@divisor+2,c
  5519  00229C  0E00               	movlw	0
  5520  00229E  6E1F               	movwf	___lldiv@divisor+3,c
  5521  0022A0  EC69  F016         	call	___lldiv	;wreg free
  5522  0022A4  C018  F069         	movff	?___lldiv,GetMcuRunTime@tempRunTime
  5523  0022A8  C019  F06A         	movff	?___lldiv+1,GetMcuRunTime@tempRunTime+1
  5524  0022AC  C01A  F06B         	movff	?___lldiv+2,GetMcuRunTime@tempRunTime+2
  5525  0022B0  C01B  F06C         	movff	?___lldiv+3,GetMcuRunTime@tempRunTime+3
  5526  0022B4  0100               	movlb	0	; () banked
  5527  0022B6  4B6D               	infsnz	GetMcuRunTime@idx& (0+255),f,b
  5528  0022B8  2B6E               	incf	(GetMcuRunTime@idx+1)& (0+255),f,b
  5529  0022BA  D7BA               	goto	l8063
  5530  0022BC                     u8610:
  5531  0022BC                     l8075:
  5532                           
  5533                           ; BSR set to: 0
  5534                           ;SystemStatus.c: 72: }
  5535                           ;SystemStatus.c: 74: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  5536  0022BC  0E60               	movlw	low GetMcuRunTime@TxMsg
  5537  0022BE  6E18               	movwf	crc8@dataArray,c
  5538  0022C0  0E00               	movlw	high GetMcuRunTime@TxMsg
  5539  0022C2  6E19               	movwf	crc8@dataArray+1,c
  5540  0022C4  0E00               	movlw	0
  5541  0022C6  6E1B               	movwf	crc8@dataSize+1,c
  5542  0022C8  0E08               	movlw	8
  5543  0022CA  6E1A               	movwf	crc8@dataSize,c
  5544  0022CC  ECA3  F019         	call	_crc8	;wreg free
  5545  0022D0  0100               	movlb	0	; () banked
  5546  0022D2  6F68               	movwf	(GetMcuRunTime@TxMsg+8)& (0+255),b
  5547                           
  5548                           ; BSR set to: 0
  5549                           ;SystemStatus.c: 76: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  5550  0022D4  0E60               	movlw	low GetMcuRunTime@TxMsg
  5551  0022D6  6E19               	movwf	WriteUartMessage@dataBuf,c
  5552  0022D8  0E00               	movlw	high GetMcuRunTime@TxMsg
  5553  0022DA  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5554  0022DC  0E00               	movlw	0
  5555  0022DE  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5556  0022E0  0E09               	movlw	9
  5557  0022E2  6E1B               	movwf	WriteUartMessage@dataSize,c
  5558  0022E4  EC9F  F01B         	call	_WriteUartMessage	;wreg free
  5559  0022E8  0012               	return		;funcret
  5560  0022EA                     __end_of_GetMcuRunTime:
  5561                           	opt stack 0
  5562                           tosu	equ	0xFFF
  5563                           tosh	equ	0xFFE
  5564                           tosl	equ	0xFFD
  5565                           pclath	equ	0xFFA
  5566                           tblptru	equ	0xFF8
  5567                           tblptrh	equ	0xFF7
  5568                           tblptrl	equ	0xFF6
  5569                           tablat	equ	0xFF5
  5570                           prodh	equ	0xFF4
  5571                           prodl	equ	0xFF3
  5572                           intcon	equ	0xFF2
  5573                           postinc0	equ	0xFEE
  5574                           plusw0	equ	0xFEB
  5575                           wreg	equ	0xFE8
  5576                           indf1	equ	0xFE7
  5577                           postinc1	equ	0xFE6
  5578                           postdec1	equ	0xFE5
  5579                           fsr1h	equ	0xFE2
  5580                           fsr1l	equ	0xFE1
  5581                           indf2	equ	0xFDF
  5582                           postinc2	equ	0xFDE
  5583                           postdec2	equ	0xFDD
  5584                           plusw2	equ	0xFDB
  5585                           fsr2h	equ	0xFDA
  5586                           fsr2l	equ	0xFD9
  5587                           status	equ	0xFD8
  5588                           
  5589 ;; *************** function ___lldiv *****************
  5590 ;; Defined at:
  5591 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  5592 ;; Parameters:    Size  Location     Type
  5593 ;;  dividend        4   23[COMRAM] unsigned long 
  5594 ;;  divisor         4   27[COMRAM] unsigned long 
  5595 ;; Auto vars:     Size  Location     Type
  5596 ;;  quotient        4   31[COMRAM] unsigned long 
  5597 ;;  counter         1   35[COMRAM] unsigned char 
  5598 ;; Return value:  Size  Location     Type
  5599 ;;                  4   23[COMRAM] unsigned long 
  5600 ;; Registers used:
  5601 ;;		wreg, status,2, status,0
  5602 ;; Tracked objects:
  5603 ;;		On entry : 0/0
  5604 ;;		On exit  : 0/0
  5605 ;;		Unchanged: 0/0
  5606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5607 ;;      Params:         8       0       0       0       0       0       0
  5608 ;;      Locals:         5       0       0       0       0       0       0
  5609 ;;      Temps:          0       0       0       0       0       0       0
  5610 ;;      Totals:        13       0       0       0       0       0       0
  5611 ;;Total ram usage:       13 bytes
  5612 ;; Hardware stack levels used:    1
  5613 ;; Hardware stack levels required when called:    3
  5614 ;; This function calls:
  5615 ;;		Nothing
  5616 ;; This function is called by:
  5617 ;;		_GetMcuRunTime
  5618 ;; This function uses a non-reentrant model
  5619 ;;
  5620                           
  5621                           	psect	text23
  5622  002CD2                     __ptext23:
  5623                           	opt stack 0
  5624  002CD2                     ___lldiv:
  5625                           	opt stack 24
  5626                           
  5627                           ;incstack = 0
  5628  002CD2  0E00               	movlw	0
  5629  002CD4  6E20               	movwf	___lldiv@quotient,c
  5630  002CD6  0E00               	movlw	0
  5631  002CD8  6E21               	movwf	___lldiv@quotient+1,c
  5632  002CDA  0E00               	movlw	0
  5633  002CDC  6E22               	movwf	___lldiv@quotient+2,c
  5634  002CDE  0E00               	movlw	0
  5635  002CE0  6E23               	movwf	___lldiv@quotient+3,c
  5636  002CE2  501C               	movf	___lldiv@divisor,w,c
  5637  002CE4  101D               	iorwf	___lldiv@divisor+1,w,c
  5638  002CE6  101E               	iorwf	___lldiv@divisor+2,w,c
  5639  002CE8  101F               	iorwf	___lldiv@divisor+3,w,c
  5640  002CEA  B4D8               	btfsc	status,2,c
  5641  002CEC  D02A               	goto	l1824
  5642  002CEE  0E01               	movlw	1
  5643  002CF0  6E24               	movwf	___lldiv@counter,c
  5644  002CF2  D006               	goto	l1819
  5645  002CF4  90D8               	bcf	status,0,c
  5646  002CF6  361C               	rlcf	___lldiv@divisor,f,c
  5647  002CF8  361D               	rlcf	___lldiv@divisor+1,f,c
  5648  002CFA  361E               	rlcf	___lldiv@divisor+2,f,c
  5649  002CFC  361F               	rlcf	___lldiv@divisor+3,f,c
  5650  002CFE  2A24               	incf	___lldiv@counter,f,c
  5651  002D00                     l1819:
  5652  002D00  AE1F               	btfss	___lldiv@divisor+3,7,c
  5653  002D02  D7F8               	goto	l1820
  5654  002D04                     u8040:
  5655  002D04  90D8               	bcf	status,0,c
  5656  002D06  3620               	rlcf	___lldiv@quotient,f,c
  5657  002D08  3621               	rlcf	___lldiv@quotient+1,f,c
  5658  002D0A  3622               	rlcf	___lldiv@quotient+2,f,c
  5659  002D0C  3623               	rlcf	___lldiv@quotient+3,f,c
  5660  002D0E  501C               	movf	___lldiv@divisor,w,c
  5661  002D10  5C18               	subwf	___lldiv@dividend,w,c
  5662  002D12  501D               	movf	___lldiv@divisor+1,w,c
  5663  002D14  5819               	subwfb	___lldiv@dividend+1,w,c
  5664  002D16  501E               	movf	___lldiv@divisor+2,w,c
  5665  002D18  581A               	subwfb	___lldiv@dividend+2,w,c
  5666  002D1A  501F               	movf	___lldiv@divisor+3,w,c
  5667  002D1C  581B               	subwfb	___lldiv@dividend+3,w,c
  5668  002D1E  A0D8               	btfss	status,0,c
  5669  002D20  D009               	goto	l1823
  5670  002D22  501C               	movf	___lldiv@divisor,w,c
  5671  002D24  5E18               	subwf	___lldiv@dividend,f,c
  5672  002D26  501D               	movf	___lldiv@divisor+1,w,c
  5673  002D28  5A19               	subwfb	___lldiv@dividend+1,f,c
  5674  002D2A  501E               	movf	___lldiv@divisor+2,w,c
  5675  002D2C  5A1A               	subwfb	___lldiv@dividend+2,f,c
  5676  002D2E  501F               	movf	___lldiv@divisor+3,w,c
  5677  002D30  5A1B               	subwfb	___lldiv@dividend+3,f,c
  5678  002D32  8020               	bsf	___lldiv@quotient,0,c
  5679  002D34                     l1823:
  5680  002D34  90D8               	bcf	status,0,c
  5681  002D36  321F               	rrcf	___lldiv@divisor+3,f,c
  5682  002D38  321E               	rrcf	___lldiv@divisor+2,f,c
  5683  002D3A  321D               	rrcf	___lldiv@divisor+1,f,c
  5684  002D3C  321C               	rrcf	___lldiv@divisor,f,c
  5685  002D3E  2E24               	decfsz	___lldiv@counter,f,c
  5686  002D40  D7E1               	goto	u8040
  5687  002D42                     l1824:
  5688  002D42  C020  F018         	movff	___lldiv@quotient,?___lldiv
  5689  002D46  C021  F019         	movff	___lldiv@quotient+1,?___lldiv+1
  5690  002D4A  C022  F01A         	movff	___lldiv@quotient+2,?___lldiv+2
  5691  002D4E  C023  F01B         	movff	___lldiv@quotient+3,?___lldiv+3
  5692  002D52  0012               	return		;funcret
  5693  002D54                     __end_of___lldiv:
  5694                           	opt stack 0
  5695                           tosu	equ	0xFFF
  5696                           tosh	equ	0xFFE
  5697                           tosl	equ	0xFFD
  5698                           pclath	equ	0xFFA
  5699                           tblptru	equ	0xFF8
  5700                           tblptrh	equ	0xFF7
  5701                           tblptrl	equ	0xFF6
  5702                           tablat	equ	0xFF5
  5703                           prodh	equ	0xFF4
  5704                           prodl	equ	0xFF3
  5705                           intcon	equ	0xFF2
  5706                           postinc0	equ	0xFEE
  5707                           plusw0	equ	0xFEB
  5708                           wreg	equ	0xFE8
  5709                           indf1	equ	0xFE7
  5710                           postinc1	equ	0xFE6
  5711                           postdec1	equ	0xFE5
  5712                           fsr1h	equ	0xFE2
  5713                           fsr1l	equ	0xFE1
  5714                           indf2	equ	0xFDF
  5715                           postinc2	equ	0xFDE
  5716                           postdec2	equ	0xFDD
  5717                           plusw2	equ	0xFDB
  5718                           fsr2h	equ	0xFDA
  5719                           fsr2l	equ	0xFD9
  5720                           status	equ	0xFD8
  5721                           
  5722 ;; *************** function _GetMcuFwVersion *****************
  5723 ;; Defined at:
  5724 ;;		line 14 in file "SystemStatus.c"
  5725 ;; Parameters:    Size  Location     Type
  5726 ;;		None
  5727 ;; Auto vars:     Size  Location     Type
  5728 ;;  TxMsg           9   35[COMRAM] unsigned char [9]
  5729 ;;  compileData     4   44[COMRAM] unsigned long 
  5730 ;; Return value:  Size  Location     Type
  5731 ;;                  1    wreg      void 
  5732 ;; Registers used:
  5733 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5734 ;; Tracked objects:
  5735 ;;		On entry : 0/0
  5736 ;;		On exit  : 0/0
  5737 ;;		Unchanged: 0/0
  5738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5739 ;;      Params:         0       0       0       0       0       0       0
  5740 ;;      Locals:        13       0       0       0       0       0       0
  5741 ;;      Temps:          0       0       0       0       0       0       0
  5742 ;;      Totals:        13       0       0       0       0       0       0
  5743 ;;Total ram usage:       13 bytes
  5744 ;; Hardware stack levels used:    1
  5745 ;; Hardware stack levels required when called:    5
  5746 ;; This function calls:
  5747 ;;		_WriteUartMessage
  5748 ;;		_ZeroArray
  5749 ;;		_crc8
  5750 ;; This function is called by:
  5751 ;;		_GroupStatusAndVersion
  5752 ;; This function uses a non-reentrant model
  5753 ;;
  5754                           
  5755                           	psect	text24
  5756  002A96                     __ptext24:
  5757                           	opt stack 0
  5758  002A96                     _GetMcuFwVersion:
  5759                           	opt stack 23
  5760                           
  5761                           ;SystemStatus.c: 16: uint32_t compileData = 0x0;
  5762                           
  5763                           ;incstack = 0
  5764  002A96  0E00               	movlw	0
  5765  002A98  6E2D               	movwf	GetMcuFwVersion@compileData,c
  5766  002A9A  0E00               	movlw	0
  5767  002A9C  6E2E               	movwf	GetMcuFwVersion@compileData+1,c
  5768  002A9E  0E00               	movlw	0
  5769  002AA0  6E2F               	movwf	GetMcuFwVersion@compileData+2,c
  5770  002AA2  0E00               	movlw	0
  5771  002AA4  6E30               	movwf	GetMcuFwVersion@compileData+3,c
  5772                           
  5773                           ;SystemStatus.c: 19: char TxMsg[(0x4) + (0x4) + 1];
  5774                           ;SystemStatus.c: 20: ZeroArray(TxMsg, (0x4) + (0x4) + 1);
  5775  002AA6  0E24               	movlw	low GetMcuFwVersion@TxMsg
  5776  002AA8  6E20               	movwf	ZeroArray@array,c
  5777  002AAA  0E00               	movlw	high GetMcuFwVersion@TxMsg
  5778  002AAC  6E21               	movwf	ZeroArray@array+1,c
  5779  002AAE  0E00               	movlw	0
  5780  002AB0  6E23               	movwf	ZeroArray@size+1,c
  5781  002AB2  0E09               	movlw	9
  5782  002AB4  6E22               	movwf	ZeroArray@size,c
  5783  002AB6  EC29  F01D         	call	_ZeroArray	;wreg free
  5784                           
  5785                           ;SystemStatus.c: 23: TxMsg[(0)] = (0x24);
  5786  002ABA  0E24               	movlw	36
  5787  002ABC  6E24               	movwf	GetMcuFwVersion@TxMsg,c
  5788                           
  5789                           ;SystemStatus.c: 24: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  5790  002ABE  0E02               	movlw	2
  5791  002AC0  6E25               	movwf	GetMcuFwVersion@TxMsg+1,c
  5792                           
  5793                           ;SystemStatus.c: 25: TxMsg[(2)] = STATUS_GET_MCU_FW_VERSION;
  5794  002AC2  0E22               	movlw	34
  5795  002AC4  6E26               	movwf	GetMcuFwVersion@TxMsg+2,c
  5796                           
  5797                           ;SystemStatus.c: 26: TxMsg[(3)] = (0x4);
  5798  002AC6  0E04               	movlw	4
  5799  002AC8  6E27               	movwf	GetMcuFwVersion@TxMsg+3,c
  5800                           
  5801                           ;SystemStatus.c: 29: compileData = "Mar 19 2018";
  5802  002ACA  0E8E               	movlw	low STR_1
  5803  002ACC  6E2D               	movwf	GetMcuFwVersion@compileData,c
  5804  002ACE  0E06               	movlw	high STR_1
  5805  002AD0  6E2E               	movwf	GetMcuFwVersion@compileData+1,c
  5806  002AD2  0E00               	movlw	low (STR_1 shr (0+16))
  5807  002AD4  6E2F               	movwf	GetMcuFwVersion@compileData+2,c
  5808  002AD6  0E00               	movlw	high (STR_1 shr (0+16))
  5809  002AD8  6E30               	movwf	GetMcuFwVersion@compileData+3,c
  5810                           
  5811                           ;SystemStatus.c: 30: TxMsg[(0x4) + 0] = (compileData & 0xFF00) >> 8;
  5812  002ADA  C02E  F028         	movff	GetMcuFwVersion@compileData+1,GetMcuFwVersion@TxMsg+4
  5813                           
  5814                           ;SystemStatus.c: 31: TxMsg[(0x4) + 1] = compileData & 0xFF;
  5815  002ADE  C02D  F029         	movff	GetMcuFwVersion@compileData,GetMcuFwVersion@TxMsg+5
  5816                           
  5817                           ;SystemStatus.c: 34: compileData = "13:02:21";
  5818  002AE2  0E9A               	movlw	low STR_2
  5819  002AE4  6E2D               	movwf	GetMcuFwVersion@compileData,c
  5820  002AE6  0E06               	movlw	high STR_2
  5821  002AE8  6E2E               	movwf	GetMcuFwVersion@compileData+1,c
  5822  002AEA  0E00               	movlw	low (STR_2 shr (0+16))
  5823  002AEC  6E2F               	movwf	GetMcuFwVersion@compileData+2,c
  5824  002AEE  0E00               	movlw	high (STR_2 shr (0+16))
  5825  002AF0  6E30               	movwf	GetMcuFwVersion@compileData+3,c
  5826                           
  5827                           ;SystemStatus.c: 35: TxMsg[(0x4) + 2] = (compileData & 0xFF00) >> 8;
  5828  002AF2  C02E  F02A         	movff	GetMcuFwVersion@compileData+1,GetMcuFwVersion@TxMsg+6
  5829                           
  5830                           ;SystemStatus.c: 36: TxMsg[(0x4) + 3] = compileData & 0xFF;
  5831  002AF6  C02D  F02B         	movff	GetMcuFwVersion@compileData,GetMcuFwVersion@TxMsg+7
  5832                           
  5833                           ;SystemStatus.c: 38: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  5834  002AFA  0E24               	movlw	low GetMcuFwVersion@TxMsg
  5835  002AFC  6E18               	movwf	crc8@dataArray,c
  5836  002AFE  0E00               	movlw	high GetMcuFwVersion@TxMsg
  5837  002B00  6E19               	movwf	crc8@dataArray+1,c
  5838  002B02  0E00               	movlw	0
  5839  002B04  6E1B               	movwf	crc8@dataSize+1,c
  5840  002B06  0E08               	movlw	8
  5841  002B08  6E1A               	movwf	crc8@dataSize,c
  5842  002B0A  ECA3  F019         	call	_crc8	;wreg free
  5843  002B0E  6E2C               	movwf	GetMcuFwVersion@TxMsg+8,c
  5844                           
  5845                           ;SystemStatus.c: 40: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  5846  002B10  0E24               	movlw	low GetMcuFwVersion@TxMsg
  5847  002B12  6E19               	movwf	WriteUartMessage@dataBuf,c
  5848  002B14  0E00               	movlw	high GetMcuFwVersion@TxMsg
  5849  002B16  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5850  002B18  0E00               	movlw	0
  5851  002B1A  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5852  002B1C  0E09               	movlw	9
  5853  002B1E  6E1B               	movwf	WriteUartMessage@dataSize,c
  5854  002B20  EC9F  F01B         	call	_WriteUartMessage	;wreg free
  5855  002B24  0012               	return		;funcret
  5856  002B26                     __end_of_GetMcuFwVersion:
  5857                           	opt stack 0
  5858                           tosu	equ	0xFFF
  5859                           tosh	equ	0xFFE
  5860                           tosl	equ	0xFFD
  5861                           pclath	equ	0xFFA
  5862                           tblptru	equ	0xFF8
  5863                           tblptrh	equ	0xFF7
  5864                           tblptrl	equ	0xFF6
  5865                           tablat	equ	0xFF5
  5866                           prodh	equ	0xFF4
  5867                           prodl	equ	0xFF3
  5868                           intcon	equ	0xFF2
  5869                           postinc0	equ	0xFEE
  5870                           plusw0	equ	0xFEB
  5871                           wreg	equ	0xFE8
  5872                           indf1	equ	0xFE7
  5873                           postinc1	equ	0xFE6
  5874                           postdec1	equ	0xFE5
  5875                           fsr1h	equ	0xFE2
  5876                           fsr1l	equ	0xFE1
  5877                           indf2	equ	0xFDF
  5878                           postinc2	equ	0xFDE
  5879                           postdec2	equ	0xFDD
  5880                           plusw2	equ	0xFDB
  5881                           fsr2h	equ	0xFDA
  5882                           fsr2l	equ	0xFD9
  5883                           status	equ	0xFD8
  5884                           
  5885 ;; *************** function _FlashReadUart *****************
  5886 ;; Defined at:
  5887 ;;		line 62 in file "FlashApp.c"
  5888 ;; Parameters:    Size  Location     Type
  5889 ;;  numOfSampleT    2   43[COMRAM] int 
  5890 ;; Auto vars:     Size  Location     Type
  5891 ;;  idx             2   91[BANK0 ] int 
  5892 ;;  TxMsg          69   12[BANK0 ] unsigned char [69]
  5893 ;;  offset          2   93[BANK0 ] int 
  5894 ;;  j               2   89[BANK0 ] int 
  5895 ;; Return value:  Size  Location     Type
  5896 ;;                  1    wreg      void 
  5897 ;; Registers used:
  5898 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5899 ;; Tracked objects:
  5900 ;;		On entry : 0/0
  5901 ;;		On exit  : 0/0
  5902 ;;		Unchanged: 0/0
  5903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5904 ;;      Params:         2       0       0       0       0       0       0
  5905 ;;      Locals:         0      83       0       0       0       0       0
  5906 ;;      Temps:          0      12       0       0       0       0       0
  5907 ;;      Totals:         2      95       0       0       0       0       0
  5908 ;;Total ram usage:       97 bytes
  5909 ;; Hardware stack levels used:    1
  5910 ;; Hardware stack levels required when called:    6
  5911 ;; This function calls:
  5912 ;;		_FLASH_IsWriteDone
  5913 ;;		_FLASH_ReadByte
  5914 ;;		_SendAckMessage
  5915 ;;		_WriteUartMessage
  5916 ;;		_ZeroArray
  5917 ;;		_abs
  5918 ;;		_crc8
  5919 ;; This function is called by:
  5920 ;;		_GroupFlashMemory
  5921 ;; This function uses a non-reentrant model
  5922 ;;
  5923                           
  5924                           	psect	text25
  5925  0006A4                     __ptext25:
  5926                           	opt stack 0
  5927  0006A4                     _FlashReadUart:
  5928                           	opt stack 22
  5929                           
  5930                           ;FlashApp.c: 65: int j=0;
  5931                           
  5932                           ;incstack = 0
  5933  0006A4  0E00               	movlw	0
  5934  0006A6  0100               	movlb	0	; () banked
  5935  0006A8  6FBA               	movwf	(FlashReadUart@j+1)& (0+255),b
  5936  0006AA  0E00               	movlw	0
  5937  0006AC  6FB9               	movwf	FlashReadUart@j& (0+255),b
  5938                           
  5939                           ;FlashApp.c: 66: int offset = 0;
  5940  0006AE  0E00               	movlw	0
  5941  0006B0  6FBE               	movwf	(FlashReadUart@offset+1)& (0+255),b
  5942  0006B2  0E00               	movlw	0
  5943  0006B4  6FBD               	movwf	FlashReadUart@offset& (0+255),b
  5944                           
  5945                           ; BSR set to: 0
  5946                           ;FlashApp.c: 67: char TxMsg[(64) + (0x4) + 1];
  5947                           ;FlashApp.c: 68: ZeroArray(TxMsg, (64) + (0x4) + 1);
  5948  0006B6  0E6C               	movlw	low FlashReadUart@TxMsg
  5949  0006B8  6E20               	movwf	ZeroArray@array,c
  5950  0006BA  0E00               	movlw	high FlashReadUart@TxMsg
  5951  0006BC  6E21               	movwf	ZeroArray@array+1,c
  5952  0006BE  0E00               	movlw	0
  5953  0006C0  6E23               	movwf	ZeroArray@size+1,c
  5954  0006C2  0E45               	movlw	69
  5955  0006C4  6E22               	movwf	ZeroArray@size,c
  5956  0006C6  EC29  F01D         	call	_ZeroArray	;wreg free
  5957                           
  5958                           ;FlashApp.c: 71: if (FLASH_IsWriteDone() == 0)
  5959  0006CA  ECD1  F01D         	call	_FLASH_IsWriteDone	;wreg free
  5960  0006CE  0900               	iorlw	0
  5961  0006D0  B4D8               	btfsc	status,2,c
  5962  0006D2  0012               	return	
  5963                           
  5964                           ;FlashApp.c: 74: }
  5965                           ;FlashApp.c: 76: if (numOfReadSamples)
  5966                           
  5967                           ;FlashApp.c: 72: {
  5968                           ;FlashApp.c: 73: return;
  5969  0006D4  503C               	movf	_numOfReadSamples,w,c
  5970  0006D6  103D               	iorwf	_numOfReadSamples+1,w,c
  5971  0006D8  103E               	iorwf	_numOfReadSamples+2,w,c
  5972  0006DA  103F               	iorwf	_numOfReadSamples+3,w,c
  5973  0006DC  B4D8               	btfsc	status,2,c
  5974  0006DE  D0EE               	goto	l306
  5975                           
  5976                           ;FlashApp.c: 77: {
  5977                           ;FlashApp.c: 78: if (numOfValidateSamples)
  5978  0006E0  5031               	movf	_numOfValidateSamples,w,c
  5979  0006E2  1032               	iorwf	_numOfValidateSamples+1,w,c
  5980  0006E4  1033               	iorwf	_numOfValidateSamples+2,w,c
  5981  0006E6  1034               	iorwf	_numOfValidateSamples+3,w,c
  5982  0006E8  B4D8               	btfsc	status,2,c
  5983  0006EA  D09A               	goto	l307
  5984                           
  5985                           ;FlashApp.c: 79: {
  5986                           ;FlashApp.c: 80: offset = numOfValidateSamples - (numOfValidateSamples > numOfSampleToRe
      +                          ad)? numOfValidateSamples : numOfSampleToRead;
  5987  0006EC  C02C  F060         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  5988  0006F0  C02D  F061         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  5989  0006F4  0E00               	movlw	0
  5990  0006F6  0100               	movlb	0	; () banked
  5991  0006F8  BF61               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  5992  0006FA  0EFF               	movlw	255
  5993  0006FC  6F62               	movwf	(??_FlashReadUart+2)& (0+255),b
  5994  0006FE  6F63               	movwf	(??_FlashReadUart+3)& (0+255),b
  5995  000700  5031               	movf	_numOfValidateSamples,w,c
  5996  000702  5D60               	subwf	??_FlashReadUart& (0+255),w,b
  5997  000704  5032               	movf	_numOfValidateSamples+1,w,c
  5998  000706  5961               	subwfb	(??_FlashReadUart+1)& (0+255),w,b
  5999  000708  5033               	movf	_numOfValidateSamples+2,w,c
  6000  00070A  5962               	subwfb	(??_FlashReadUart+2)& (0+255),w,b
  6001  00070C  5034               	movf	_numOfValidateSamples+3,w,c
  6002  00070E  5963               	subwfb	(??_FlashReadUart+3)& (0+255),w,b
  6003  000710  B0D8               	btfsc	status,0,c
  6004  000712  D002               	goto	u8200
  6005  000714  0E01               	movlw	1
  6006  000716  D001               	goto	u8210
  6007  000718                     u8200:
  6008  000718  0E00               	movlw	0
  6009  00071A                     u8210:
  6010  00071A  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  6011  00071C  6B65               	clrf	(??_FlashReadUart+5)& (0+255),b
  6012  00071E  6B66               	clrf	(??_FlashReadUart+6)& (0+255),b
  6013  000720  6B67               	clrf	(??_FlashReadUart+7)& (0+255),b
  6014  000722  1F64               	comf	(??_FlashReadUart+4)& (0+255),f,b
  6015  000724  1F65               	comf	(??_FlashReadUart+5)& (0+255),f,b
  6016  000726  1F66               	comf	(??_FlashReadUart+6)& (0+255),f,b
  6017  000728  1F67               	comf	(??_FlashReadUart+7)& (0+255),f,b
  6018  00072A  2B64               	incf	(??_FlashReadUart+4)& (0+255),f,b
  6019  00072C  0E00               	movlw	0
  6020  00072E  2365               	addwfc	(??_FlashReadUart+5)& (0+255),f,b
  6021  000730  2366               	addwfc	(??_FlashReadUart+6)& (0+255),f,b
  6022  000732  2367               	addwfc	(??_FlashReadUart+7)& (0+255),f,b
  6023  000734  5031               	movf	_numOfValidateSamples,w,c
  6024  000736  2564               	addwf	(??_FlashReadUart+4)& (0+255),w,b
  6025  000738  6F68               	movwf	(??_FlashReadUart+8)& (0+255),b
  6026  00073A  5032               	movf	_numOfValidateSamples+1,w,c
  6027  00073C  2165               	addwfc	(??_FlashReadUart+5)& (0+255),w,b
  6028  00073E  6F69               	movwf	(??_FlashReadUart+9)& (0+255),b
  6029  000740  5033               	movf	_numOfValidateSamples+2,w,c
  6030  000742  2166               	addwfc	(??_FlashReadUart+6)& (0+255),w,b
  6031  000744  6F6A               	movwf	(??_FlashReadUart+10)& (0+255),b
  6032  000746  5034               	movf	_numOfValidateSamples+3,w,c
  6033  000748  2167               	addwfc	(??_FlashReadUart+7)& (0+255),w,b
  6034  00074A  6F6B               	movwf	(??_FlashReadUart+11)& (0+255),b
  6035  00074C  5168               	movf	(??_FlashReadUart+8)& (0+255),w,b
  6036  00074E  1169               	iorwf	(??_FlashReadUart+9)& (0+255),w,b
  6037  000750  116A               	iorwf	(??_FlashReadUart+10)& (0+255),w,b
  6038  000752  116B               	iorwf	(??_FlashReadUart+11)& (0+255),w,b
  6039  000754  A4D8               	btfss	status,2,c
  6040  000756  D00A               	goto	l309
  6041                           
  6042                           ; BSR set to: 0
  6043  000758  C02C  F0B1         	movff	FlashReadUart@numOfSampleToRead,_FlashReadUart$581
  6044  00075C  C02D  F0B2         	movff	FlashReadUart@numOfSampleToRead+1,_FlashReadUart$581+1
  6045  000760  0E00               	movlw	0
  6046  000762  BFB2               	btfsc	(_FlashReadUart$581+1)& (0+255),7,b
  6047  000764  0EFF               	movlw	-1
  6048  000766  6FB3               	movwf	(_FlashReadUart$581+2)& (0+255),b
  6049  000768  6FB4               	movwf	(_FlashReadUart$581+3)& (0+255),b
  6050  00076A  D008               	goto	l311
  6051  00076C                     l309:
  6052                           
  6053                           ; BSR set to: 0
  6054  00076C  C031  F0B1         	movff	_numOfValidateSamples,_FlashReadUart$581
  6055  000770  C032  F0B2         	movff	_numOfValidateSamples+1,_FlashReadUart$581+1
  6056  000774  C033  F0B3         	movff	_numOfValidateSamples+2,_FlashReadUart$581+2
  6057  000778  C034  F0B4         	movff	_numOfValidateSamples+3,_FlashReadUart$581+3
  6058  00077C                     l311:
  6059                           
  6060                           ; BSR set to: 0
  6061  00077C  C0B1  F0BD         	movff	_FlashReadUart$581,FlashReadUart@offset
  6062  000780  C0B2  F0BE         	movff	_FlashReadUart$581+1,FlashReadUart@offset+1
  6063                           
  6064                           ; BSR set to: 0
  6065                           ;FlashApp.c: 81: if(offset < 0)
  6066  000784  AFBE               	btfss	(FlashReadUart@offset+1)& (0+255),7,b
  6067  000786  D091               	goto	l314
  6068                           
  6069                           ; BSR set to: 0
  6070                           ;FlashApp.c: 82: {
  6071                           ;FlashApp.c: 83: if (abs(offset) > numOfReadSamples)
  6072  000788  C0BD  F018         	movff	FlashReadUart@offset,abs@a
  6073  00078C  C0BE  F019         	movff	FlashReadUart@offset+1,abs@a+1
  6074  000790  EC8B  F01C         	call	_abs	;wreg free
  6075  000794  C018  F060         	movff	?_abs,??_FlashReadUart
  6076  000798  C019  F061         	movff	?_abs+1,??_FlashReadUart+1
  6077  00079C  0E00               	movlw	0
  6078  00079E  0100               	movlb	0	; () banked
  6079  0007A0  BF61               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  6080  0007A2  0EFF               	movlw	255
  6081  0007A4  6F62               	movwf	(??_FlashReadUart+2)& (0+255),b
  6082  0007A6  6F63               	movwf	(??_FlashReadUart+3)& (0+255),b
  6083  0007A8  5160               	movf	??_FlashReadUart& (0+255),w,b
  6084  0007AA  5C3C               	subwf	_numOfReadSamples,w,c
  6085  0007AC  5161               	movf	(??_FlashReadUart+1)& (0+255),w,b
  6086  0007AE  583D               	subwfb	_numOfReadSamples+1,w,c
  6087  0007B0  5162               	movf	(??_FlashReadUart+2)& (0+255),w,b
  6088  0007B2  583E               	subwfb	_numOfReadSamples+2,w,c
  6089  0007B4  5163               	movf	(??_FlashReadUart+3)& (0+255),w,b
  6090  0007B6  583F               	subwfb	_numOfReadSamples+3,w,c
  6091  0007B8  B0D8               	btfsc	status,0,c
  6092  0007BA  D016               	goto	l313
  6093                           
  6094                           ; BSR set to: 0
  6095                           ;FlashApp.c: 84: {
  6096                           ;FlashApp.c: 85: numOfSampleToRead += offset + numOfReadSamples;
  6097  0007BC  503C               	movf	_numOfReadSamples,w,c
  6098  0007BE  25BD               	addwf	FlashReadUart@offset& (0+255),w,b
  6099  0007C0  6F60               	movwf	??_FlashReadUart& (0+255),b
  6100  0007C2  503D               	movf	_numOfReadSamples+1,w,c
  6101  0007C4  21BE               	addwfc	(FlashReadUart@offset+1)& (0+255),w,b
  6102  0007C6  6F61               	movwf	(??_FlashReadUart+1)& (0+255),b
  6103  0007C8  5160               	movf	??_FlashReadUart& (0+255),w,b
  6104  0007CA  262C               	addwf	FlashReadUart@numOfSampleToRead,f,c
  6105  0007CC  5161               	movf	(??_FlashReadUart+1)& (0+255),w,b
  6106  0007CE  222D               	addwfc	FlashReadUart@numOfSampleToRead+1,f,c
  6107                           
  6108                           ; BSR set to: 0
  6109                           ;FlashApp.c: 86: offset = numOfReadSamples * (-1);
  6110  0007D0  C03C  F060         	movff	_numOfReadSamples,??_FlashReadUart
  6111  0007D4  C03D  F061         	movff	_numOfReadSamples+1,??_FlashReadUart+1
  6112  0007D8  1F60               	comf	??_FlashReadUart& (0+255),f,b
  6113  0007DA  1F61               	comf	(??_FlashReadUart+1)& (0+255),f,b
  6114  0007DC  4B60               	infsnz	??_FlashReadUart& (0+255),f,b
  6115  0007DE  2B61               	incf	(??_FlashReadUart+1)& (0+255),f,b
  6116  0007E0  C060  F0BD         	movff	??_FlashReadUart,FlashReadUart@offset
  6117  0007E4  C061  F0BE         	movff	??_FlashReadUart+1,FlashReadUart@offset+1
  6118  0007E8                     l313:
  6119                           
  6120                           ; BSR set to: 0
  6121                           ;FlashApp.c: 88: }
  6122                           ;FlashApp.c: 90: readAddress += offset * (64);
  6123  0007E8  C0BD  F060         	movff	FlashReadUart@offset,??_FlashReadUart
  6124  0007EC  C0BE  F061         	movff	FlashReadUart@offset+1,??_FlashReadUart+1
  6125  0007F0  0E06               	movlw	6
  6126  0007F2                     u8255:
  6127  0007F2  90D8               	bcf	status,0,c
  6128  0007F4  3760               	rlcf	??_FlashReadUart& (0+255),f,b
  6129  0007F6  3761               	rlcf	(??_FlashReadUart+1)& (0+255),f,b
  6130  0007F8  2EE8               	decfsz	wreg,f,c
  6131  0007FA  D7FB               	goto	u8255
  6132  0007FC  C060  F062         	movff	??_FlashReadUart,??_FlashReadUart+2
  6133  000800  C061  F063         	movff	??_FlashReadUart+1,??_FlashReadUart+3
  6134  000804  0E00               	movlw	0
  6135  000806  BF63               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  6136  000808  0EFF               	movlw	255
  6137  00080A  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  6138  00080C  6F65               	movwf	(??_FlashReadUart+5)& (0+255),b
  6139  00080E  5162               	movf	(??_FlashReadUart+2)& (0+255),w,b
  6140  000810  27E8               	addwf	_readAddress& (0+255),f,b
  6141  000812  5163               	movf	(??_FlashReadUart+3)& (0+255),w,b
  6142  000814  23E9               	addwfc	(_readAddress+1)& (0+255),f,b
  6143  000816  5164               	movf	(??_FlashReadUart+4)& (0+255),w,b
  6144  000818  23EA               	addwfc	(_readAddress+2)& (0+255),f,b
  6145  00081A  5165               	movf	(??_FlashReadUart+5)& (0+255),w,b
  6146  00081C  23EB               	addwfc	(_readAddress+3)& (0+255),f,b
  6147                           
  6148                           ; BSR set to: 0
  6149                           ;FlashApp.c: 91: }
  6150                           ;FlashApp.c: 92: }
  6151  00081E  D045               	goto	l314
  6152  000820                     l307:
  6153                           
  6154                           ;FlashApp.c: 93: else
  6155                           ;FlashApp.c: 94: {
  6156                           ;FlashApp.c: 95: numOfSampleToRead = (numOfReadSamples > numOfSampleToRead)? numOfSample
      +                          ToRead : numOfReadSamples;
  6157                           
  6158                           ; BSR set to: 0
  6159  000820  C02C  F060         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  6160  000824  C02D  F061         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  6161  000828  0E00               	movlw	0
  6162  00082A  0100               	movlb	0	; () banked
  6163  00082C  BF61               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  6164  00082E  0EFF               	movlw	255
  6165  000830  6F62               	movwf	(??_FlashReadUart+2)& (0+255),b
  6166  000832  6F63               	movwf	(??_FlashReadUart+3)& (0+255),b
  6167  000834  503C               	movf	_numOfReadSamples,w,c
  6168  000836  5D60               	subwf	??_FlashReadUart& (0+255),w,b
  6169  000838  503D               	movf	_numOfReadSamples+1,w,c
  6170  00083A  5961               	subwfb	(??_FlashReadUart+1)& (0+255),w,b
  6171  00083C  503E               	movf	_numOfReadSamples+2,w,c
  6172  00083E  5962               	subwfb	(??_FlashReadUart+2)& (0+255),w,b
  6173  000840  503F               	movf	_numOfReadSamples+3,w,c
  6174  000842  5963               	subwfb	(??_FlashReadUart+3)& (0+255),w,b
  6175  000844  A0D8               	btfss	status,0,c
  6176  000846  D009               	goto	l316
  6177                           
  6178                           ; BSR set to: 0
  6179  000848  C03C  F0B5         	movff	_numOfReadSamples,_FlashReadUart$582
  6180  00084C  C03D  F0B6         	movff	_numOfReadSamples+1,_FlashReadUart$582+1
  6181  000850  C03E  F0B7         	movff	_numOfReadSamples+2,_FlashReadUart$582+2
  6182  000854  C03F  F0B8         	movff	_numOfReadSamples+3,_FlashReadUart$582+3
  6183  000858  D009               	goto	l318
  6184  00085A                     l316:
  6185                           
  6186                           ; BSR set to: 0
  6187                           
  6188                           ; BSR set to: 0
  6189  00085A  C02C  F0B5         	movff	FlashReadUart@numOfSampleToRead,_FlashReadUart$582
  6190  00085E  C02D  F0B6         	movff	FlashReadUart@numOfSampleToRead+1,_FlashReadUart$582+1
  6191  000862  0E00               	movlw	0
  6192  000864  BFB6               	btfsc	(_FlashReadUart$582+1)& (0+255),7,b
  6193  000866  0EFF               	movlw	-1
  6194  000868  6FB7               	movwf	(_FlashReadUart$582+2)& (0+255),b
  6195  00086A  6FB8               	movwf	(_FlashReadUart$582+3)& (0+255),b
  6196  00086C                     l318:
  6197                           
  6198                           ; BSR set to: 0
  6199                           
  6200                           ; BSR set to: 0
  6201  00086C  C0B5  F02C         	movff	_FlashReadUart$582,FlashReadUart@numOfSampleToRead
  6202  000870  C0B6  F02D         	movff	_FlashReadUart$582+1,FlashReadUart@numOfSampleToRead+1
  6203                           
  6204                           ; BSR set to: 0
  6205                           ;FlashApp.c: 96: readAddress -= numOfSampleToRead * (64);
  6206  000874  C02C  F060         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  6207  000878  C02D  F061         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  6208  00087C  0E06               	movlw	6
  6209  00087E                     u8275:
  6210  00087E  90D8               	bcf	status,0,c
  6211  000880  3760               	rlcf	??_FlashReadUart& (0+255),f,b
  6212  000882  3761               	rlcf	(??_FlashReadUart+1)& (0+255),f,b
  6213  000884  2EE8               	decfsz	wreg,f,c
  6214  000886  D7FB               	goto	u8275
  6215  000888  C060  F062         	movff	??_FlashReadUart,??_FlashReadUart+2
  6216  00088C  C061  F063         	movff	??_FlashReadUart+1,??_FlashReadUart+3
  6217  000890  0E00               	movlw	0
  6218  000892  BF63               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  6219  000894  0EFF               	movlw	255
  6220  000896  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  6221  000898  6F65               	movwf	(??_FlashReadUart+5)& (0+255),b
  6222  00089A  5162               	movf	(??_FlashReadUart+2)& (0+255),w,b
  6223  00089C  5FE8               	subwf	_readAddress& (0+255),f,b
  6224  00089E  5163               	movf	(??_FlashReadUart+3)& (0+255),w,b
  6225  0008A0  5BE9               	subwfb	(_readAddress+1)& (0+255),f,b
  6226  0008A2  5164               	movf	(??_FlashReadUart+4)& (0+255),w,b
  6227  0008A4  5BEA               	subwfb	(_readAddress+2)& (0+255),f,b
  6228  0008A6  5165               	movf	(??_FlashReadUart+5)& (0+255),w,b
  6229  0008A8  5BEB               	subwfb	(_readAddress+3)& (0+255),f,b
  6230  0008AA                     l314:
  6231                           
  6232                           ; BSR set to: 0
  6233                           ;FlashApp.c: 97: }
  6234                           ;FlashApp.c: 99: if (readAddress <= 0x4000)
  6235                           
  6236                           ; BSR set to: 0
  6237  0008AA  51EB               	movf	(_readAddress+3)& (0+255),w,b
  6238  0008AC  11EA               	iorwf	(_readAddress+2)& (0+255),w,b
  6239  0008AE  E13E               	bnz	l7865
  6240  0008B0  05E8               	decf	_readAddress& (0+255),w,b
  6241  0008B2  0E40               	movlw	64
  6242  0008B4  59E9               	subwfb	(_readAddress+1)& (0+255),w,b
  6243  0008B6  B0D8               	btfsc	status,0,c
  6244  0008B8  D039               	goto	l324
  6245  0008BA  D023               	goto	u8310
  6246  0008BC                     l306:
  6247                           
  6248                           ;FlashApp.c: 104: else
  6249                           ;FlashApp.c: 105: {
  6250                           ;FlashApp.c: 106: if ((isReWriteDone) && (readAddress <= writeAddress))
  6251                           
  6252                           ; BSR set to: 0
  6253  0008BC  0100               	movlb	0	; () banked
  6254  0008BE  51DB               	movf	_isReWriteDone& (0+255),w,b
  6255  0008C0  B4D8               	btfsc	status,2,c
  6256  0008C2  D028               	goto	l321
  6257                           
  6258                           ; BSR set to: 0
  6259  0008C4  51E8               	movf	_readAddress& (0+255),w,b
  6260  0008C6  5C40               	subwf	_writeAddress,w,c
  6261  0008C8  51E9               	movf	(_readAddress+1)& (0+255),w,b
  6262  0008CA  5841               	subwfb	_writeAddress+1,w,c
  6263  0008CC  51EA               	movf	(_readAddress+2)& (0+255),w,b
  6264  0008CE  5842               	subwfb	_writeAddress+2,w,c
  6265  0008D0  51EB               	movf	(_readAddress+3)& (0+255),w,b
  6266  0008D2  5843               	subwfb	_writeAddress+3,w,c
  6267  0008D4  A0D8               	btfss	status,0,c
  6268  0008D6  D01E               	goto	l321
  6269                           
  6270                           ; BSR set to: 0
  6271                           ;FlashApp.c: 107: {
  6272                           ;FlashApp.c: 108: readAddress = writeAddress + (64);
  6273  0008D8  0E40               	movlw	64
  6274  0008DA  2440               	addwf	_writeAddress,w,c
  6275  0008DC  6FE8               	movwf	_readAddress& (0+255),b
  6276  0008DE  0E00               	movlw	0
  6277  0008E0  2041               	addwfc	_writeAddress+1,w,c
  6278  0008E2  6FE9               	movwf	(_readAddress+1)& (0+255),b
  6279  0008E4  0E00               	movlw	0
  6280  0008E6  2042               	addwfc	_writeAddress+2,w,c
  6281  0008E8  6FEA               	movwf	(_readAddress+2)& (0+255),b
  6282  0008EA  0E00               	movlw	0
  6283  0008EC  2043               	addwfc	_writeAddress+3,w,c
  6284  0008EE  6FEB               	movwf	(_readAddress+3)& (0+255),b
  6285                           
  6286                           ;FlashApp.c: 109: if (readAddress >= 0x7FF0)
  6287  0008F0  51EB               	movf	(_readAddress+3)& (0+255),w,b
  6288  0008F2  11EA               	iorwf	(_readAddress+2)& (0+255),w,b
  6289  0008F4  E106               	bnz	u8310
  6290  0008F6  0EF0               	movlw	240
  6291  0008F8  5DE8               	subwf	_readAddress& (0+255),w,b
  6292  0008FA  0E7F               	movlw	127
  6293  0008FC  59E9               	subwfb	(_readAddress+1)& (0+255),w,b
  6294  0008FE  A0D8               	btfss	status,0,c
  6295  000900  D015               	goto	l324
  6296  000902                     u8310:
  6297                           
  6298                           ; BSR set to: 0
  6299                           ;FlashApp.c: 110: {
  6300                           ;FlashApp.c: 111: readAddress = 0x4000;
  6301  000902  0E00               	movlw	0
  6302  000904  6FE8               	movwf	_readAddress& (0+255),b
  6303  000906  0E40               	movlw	64
  6304  000908  6FE9               	movwf	(_readAddress+1)& (0+255),b
  6305  00090A  0E00               	movlw	0
  6306  00090C  6FEA               	movwf	(_readAddress+2)& (0+255),b
  6307  00090E  0E00               	movlw	0
  6308  000910  6FEB               	movwf	(_readAddress+3)& (0+255),b
  6309                           
  6310                           ; BSR set to: 0
  6311                           ;FlashApp.c: 112: }
  6312                           ;FlashApp.c: 114: }
  6313  000912  D00C               	goto	l324
  6314  000914                     l321:
  6315                           
  6316                           ; BSR set to: 0
  6317                           ;FlashApp.c: 115: else
  6318                           ;FlashApp.c: 116: {
  6319                           ;FlashApp.c: 117: if(numOfValidateSamples == 0)
  6320                           
  6321                           ; BSR set to: 0
  6322  000914  5031               	movf	_numOfValidateSamples,w,c
  6323  000916  1032               	iorwf	_numOfValidateSamples+1,w,c
  6324  000918  1033               	iorwf	_numOfValidateSamples+2,w,c
  6325  00091A  1034               	iorwf	_numOfValidateSamples+3,w,c
  6326  00091C  A4D8               	btfss	status,2,c
  6327  00091E  D006               	goto	l324
  6328                           
  6329                           ; BSR set to: 0
  6330                           ;FlashApp.c: 118: {
  6331                           ;FlashApp.c: 119: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_NO_SAMPLE_YET
      +                          );
  6332  000920  0E55               	movlw	85
  6333  000922  6E24               	movwf	SendAckMessage@inRequest,c
  6334  000924  0E05               	movlw	5
  6335  000926  EC7A  F019         	call	_SendAckMessage
  6336                           
  6337                           ;FlashApp.c: 120: return;
  6338  00092A  0012               	return	
  6339  00092C                     l324:
  6340  00092C                     l7865:
  6341                           
  6342                           ;FlashApp.c: 121: }
  6343                           ;FlashApp.c: 123: }
  6344                           ;FlashApp.c: 124: }
  6345                           ;FlashApp.c: 127: TxMsg[(0)] = (0x24);
  6346  00092C  0E24               	movlw	36
  6347  00092E  0100               	movlb	0	; () banked
  6348  000930  6F6C               	movwf	FlashReadUart@TxMsg& (0+255),b
  6349                           
  6350                           ;FlashApp.c: 128: TxMsg[(1)] = FLASH_MSG;
  6351  000932  0E05               	movlw	5
  6352  000934  6F6D               	movwf	(FlashReadUart@TxMsg+1)& (0+255),b
  6353                           
  6354                           ;FlashApp.c: 129: TxMsg[(2)] = FLASH_SEND_RAW_DATA;
  6355  000936  0E54               	movlw	84
  6356  000938  6F6E               	movwf	(FlashReadUart@TxMsg+2)& (0+255),b
  6357                           
  6358                           ;FlashApp.c: 130: TxMsg[(3)] = (64);
  6359  00093A  0E40               	movlw	64
  6360  00093C  6F6F               	movwf	(FlashReadUart@TxMsg+3)& (0+255),b
  6361                           
  6362                           ;FlashApp.c: 132: for (j=0; j<numOfSampleToRead; j++)
  6363  00093E  0E00               	movlw	0
  6364  000940  6FBA               	movwf	(FlashReadUart@j+1)& (0+255),b
  6365  000942  0E00               	movlw	0
  6366  000944  6FB9               	movwf	FlashReadUart@j& (0+255),b
  6367  000946  D084               	goto	l325
  6368  000948                     
  6369                           ; BSR set to: 0
  6370                           ;FlashApp.c: 133: {
  6371                           ;FlashApp.c: 135: for(int idx = 0; idx < (64); idx++)
  6372                           
  6373                           ; BSR set to: 0
  6374  000948  0E00               	movlw	0
  6375  00094A  6FBC               	movwf	(FlashReadUart@idx+1)& (0+255),b
  6376  00094C  0E00               	movlw	0
  6377  00094E  6FBB               	movwf	FlashReadUart@idx& (0+255),b
  6378  000950                     l7869:
  6379                           
  6380                           ; BSR set to: 0
  6381  000950  BFBC               	btfsc	(FlashReadUart@idx+1)& (0+255),7,b
  6382  000952  D006               	goto	l327
  6383  000954  51BC               	movf	(FlashReadUart@idx+1)& (0+255),w,b
  6384  000956  E12C               	bnz	l7879
  6385  000958  0E40               	movlw	64
  6386  00095A  5DBB               	subwf	FlashReadUart@idx& (0+255),w,b
  6387  00095C  B0D8               	btfsc	status,0,c
  6388  00095E  D028               	goto	u8340
  6389  000960                     l327:
  6390                           
  6391                           ; BSR set to: 0
  6392                           ;FlashApp.c: 136: {
  6393                           ;FlashApp.c: 137: TxMsg[(0x4) + idx] = FLASH_ReadByte(readAddress + idx);
  6394                           
  6395                           ; BSR set to: 0
  6396  000960  0E04               	movlw	4
  6397  000962  25BB               	addwf	FlashReadUart@idx& (0+255),w,b
  6398  000964  6F60               	movwf	??_FlashReadUart& (0+255),b
  6399  000966  0E00               	movlw	0
  6400  000968  21BC               	addwfc	(FlashReadUart@idx+1)& (0+255),w,b
  6401  00096A  6F61               	movwf	(??_FlashReadUart+1)& (0+255),b
  6402  00096C  0E6C               	movlw	low FlashReadUart@TxMsg
  6403  00096E  2560               	addwf	??_FlashReadUart& (0+255),w,b
  6404  000970  6ED9               	movwf	fsr2l,c
  6405  000972  0E00               	movlw	high FlashReadUart@TxMsg
  6406  000974  2161               	addwfc	(??_FlashReadUart+1)& (0+255),w,b
  6407  000976  6EDA               	movwf	fsr2h,c
  6408  000978  C0BB  F062         	movff	FlashReadUart@idx,??_FlashReadUart+2
  6409  00097C  C0BC  F063         	movff	FlashReadUart@idx+1,??_FlashReadUart+3
  6410  000980  0E00               	movlw	0
  6411  000982  BF63               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  6412  000984  0EFF               	movlw	255
  6413  000986  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  6414  000988  6F65               	movwf	(??_FlashReadUart+5)& (0+255),b
  6415  00098A  51E8               	movf	_readAddress& (0+255),w,b
  6416  00098C  2562               	addwf	(??_FlashReadUart+2)& (0+255),w,b
  6417  00098E  6E18               	movwf	FLASH_ReadByte@flashAddr,c
  6418  000990  51E9               	movf	(_readAddress+1)& (0+255),w,b
  6419  000992  2163               	addwfc	(??_FlashReadUart+3)& (0+255),w,b
  6420  000994  6E19               	movwf	FLASH_ReadByte@flashAddr+1,c
  6421  000996  51EA               	movf	(_readAddress+2)& (0+255),w,b
  6422  000998  2164               	addwfc	(??_FlashReadUart+4)& (0+255),w,b
  6423  00099A  6E1A               	movwf	FLASH_ReadByte@flashAddr+2,c
  6424  00099C  51EB               	movf	(_readAddress+3)& (0+255),w,b
  6425  00099E  2165               	addwfc	(??_FlashReadUart+5)& (0+255),w,b
  6426  0009A0  6E1B               	movwf	FLASH_ReadByte@flashAddr+3,c
  6427  0009A2  ECA2  F01D         	call	_FLASH_ReadByte	;wreg free
  6428  0009A6  6EDF               	movwf	indf2,c
  6429  0009A8  0100               	movlb	0	; () banked
  6430  0009AA  4BBB               	infsnz	FlashReadUart@idx& (0+255),f,b
  6431  0009AC  2BBC               	incf	(FlashReadUart@idx+1)& (0+255),f,b
  6432  0009AE  D7D0               	goto	l7869
  6433  0009B0                     u8340:
  6434  0009B0                     l7879:
  6435                           
  6436                           ; BSR set to: 0
  6437                           ;FlashApp.c: 138: }
  6438                           ;FlashApp.c: 140: readAddress += (64);
  6439  0009B0  0E40               	movlw	64
  6440  0009B2  27E8               	addwf	_readAddress& (0+255),f,b
  6441  0009B4  0E00               	movlw	0
  6442  0009B6  23E9               	addwfc	(_readAddress+1)& (0+255),f,b
  6443  0009B8  23EA               	addwfc	(_readAddress+2)& (0+255),f,b
  6444  0009BA  23EB               	addwfc	(_readAddress+3)& (0+255),f,b
  6445                           
  6446                           ;FlashApp.c: 141: if (readAddress >= 0x7FF0)
  6447  0009BC  51EB               	movf	(_readAddress+3)& (0+255),w,b
  6448  0009BE  11EA               	iorwf	(_readAddress+2)& (0+255),w,b
  6449  0009C0  E106               	bnz	u8350
  6450  0009C2  0EF0               	movlw	240
  6451  0009C4  5DE8               	subwf	_readAddress& (0+255),w,b
  6452  0009C6  0E7F               	movlw	127
  6453  0009C8  59E9               	subwfb	(_readAddress+1)& (0+255),w,b
  6454  0009CA  A0D8               	btfss	status,0,c
  6455  0009CC  D008               	goto	l329
  6456  0009CE                     u8350:
  6457                           
  6458                           ; BSR set to: 0
  6459                           ;FlashApp.c: 142: {
  6460                           ;FlashApp.c: 143: readAddress = 0x4000;
  6461  0009CE  0E00               	movlw	0
  6462  0009D0  6FE8               	movwf	_readAddress& (0+255),b
  6463  0009D2  0E40               	movlw	64
  6464  0009D4  6FE9               	movwf	(_readAddress+1)& (0+255),b
  6465  0009D6  0E00               	movlw	0
  6466  0009D8  6FEA               	movwf	(_readAddress+2)& (0+255),b
  6467  0009DA  0E00               	movlw	0
  6468  0009DC  6FEB               	movwf	(_readAddress+3)& (0+255),b
  6469  0009DE                     l329:
  6470                           
  6471                           ; BSR set to: 0
  6472                           ;FlashApp.c: 144: }
  6473                           ;FlashApp.c: 145: TxMsg[(64) + (0x4)] = crc8(TxMsg, (64) + (0x4));
  6474                           
  6475                           ; BSR set to: 0
  6476  0009DE  0E6C               	movlw	low FlashReadUart@TxMsg
  6477  0009E0  6E18               	movwf	crc8@dataArray,c
  6478  0009E2  0E00               	movlw	high FlashReadUart@TxMsg
  6479  0009E4  6E19               	movwf	crc8@dataArray+1,c
  6480  0009E6  0E00               	movlw	0
  6481  0009E8  6E1B               	movwf	crc8@dataSize+1,c
  6482  0009EA  0E44               	movlw	68
  6483  0009EC  6E1A               	movwf	crc8@dataSize,c
  6484  0009EE  ECA3  F019         	call	_crc8	;wreg free
  6485  0009F2  0100               	movlb	0	; () banked
  6486  0009F4  6FB0               	movwf	(FlashReadUart@TxMsg+68)& (0+255),b
  6487                           
  6488                           ; BSR set to: 0
  6489                           ;FlashApp.c: 147: WriteUartMessage(TxMsg, (64) + (0x4) + 1);
  6490  0009F6  0E6C               	movlw	low FlashReadUart@TxMsg
  6491  0009F8  6E19               	movwf	WriteUartMessage@dataBuf,c
  6492  0009FA  0E00               	movlw	high FlashReadUart@TxMsg
  6493  0009FC  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  6494  0009FE  0E00               	movlw	0
  6495  000A00  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  6496  000A02  0E45               	movlw	69
  6497  000A04  6E1B               	movwf	WriteUartMessage@dataSize,c
  6498  000A06  EC9F  F01B         	call	_WriteUartMessage	;wreg free
  6499                           
  6500                           ;FlashApp.c: 149: if(numOfValidateSamples)
  6501  000A0A  5031               	movf	_numOfValidateSamples,w,c
  6502  000A0C  1032               	iorwf	_numOfValidateSamples+1,w,c
  6503  000A0E  1033               	iorwf	_numOfValidateSamples+2,w,c
  6504  000A10  1034               	iorwf	_numOfValidateSamples+3,w,c
  6505  000A12  B4D8               	btfsc	status,2,c
  6506  000A14  D01A               	goto	l332
  6507                           
  6508                           ;FlashApp.c: 150: {
  6509                           ;FlashApp.c: 151: if (numOfReadSamples < ((0x4000-0x7FF0)/(64)))
  6510  000A16  043C               	decf	_numOfReadSamples,w,c
  6511  000A18  0EFF               	movlw	255
  6512  000A1A  583D               	subwfb	_numOfReadSamples+1,w,c
  6513  000A1C  0EFF               	movlw	255
  6514  000A1E  583E               	subwfb	_numOfReadSamples+2,w,c
  6515  000A20  0EFF               	movlw	255
  6516  000A22  583F               	subwfb	_numOfReadSamples+3,w,c
  6517  000A24  B0D8               	btfsc	status,0,c
  6518  000A26  D006               	goto	l331
  6519                           
  6520                           ;FlashApp.c: 152: {
  6521                           ;FlashApp.c: 153: numOfReadSamples++;
  6522  000A28  0E01               	movlw	1
  6523  000A2A  263C               	addwf	_numOfReadSamples,f,c
  6524  000A2C  0E00               	movlw	0
  6525  000A2E  223D               	addwfc	_numOfReadSamples+1,f,c
  6526  000A30  223E               	addwfc	_numOfReadSamples+2,f,c
  6527  000A32  223F               	addwfc	_numOfReadSamples+3,f,c
  6528  000A34                     l331:
  6529                           
  6530                           ;FlashApp.c: 154: }
  6531                           ;FlashApp.c: 155: if (numOfValidateSamples > 0)
  6532  000A34  5031               	movf	_numOfValidateSamples,w,c
  6533  000A36  1032               	iorwf	_numOfValidateSamples+1,w,c
  6534  000A38  1033               	iorwf	_numOfValidateSamples+2,w,c
  6535  000A3A  1034               	iorwf	_numOfValidateSamples+3,w,c
  6536  000A3C  B4D8               	btfsc	status,2,c
  6537  000A3E  D005               	goto	l332
  6538                           
  6539                           ;FlashApp.c: 156: {
  6540                           ;FlashApp.c: 157: numOfValidateSamples--;
  6541  000A40  0631               	decf	_numOfValidateSamples,f,c
  6542  000A42  0E00               	movlw	0
  6543  000A44  5A32               	subwfb	_numOfValidateSamples+1,f,c
  6544  000A46  5A33               	subwfb	_numOfValidateSamples+2,f,c
  6545  000A48  5A34               	subwfb	_numOfValidateSamples+3,f,c
  6546  000A4A                     l332:
  6547  000A4A  0100               	movlb	0	; () banked
  6548  000A4C  4BB9               	infsnz	FlashReadUart@j& (0+255),f,b
  6549  000A4E  2BBA               	incf	(FlashReadUart@j+1)& (0+255),f,b
  6550  000A50                     l325:
  6551                           
  6552                           ; BSR set to: 0
  6553                           
  6554                           ; BSR set to: 0
  6555  000A50  502C               	movf	FlashReadUart@numOfSampleToRead,w,c
  6556  000A52  5DB9               	subwf	FlashReadUart@j& (0+255),w,b
  6557  000A54  51BA               	movf	(FlashReadUart@j+1)& (0+255),w,b
  6558  000A56  0A80               	xorlw	128
  6559  000A58  6F60               	movwf	??_FlashReadUart& (0+255),b
  6560  000A5A  502D               	movf	FlashReadUart@numOfSampleToRead+1,w,c
  6561  000A5C  0A80               	xorlw	128
  6562  000A5E  5960               	subwfb	??_FlashReadUart& (0+255),w,b
  6563  000A60  B0D8               	btfsc	status,0,c
  6564  000A62  0012               	return	
  6565  000A64  D771               	goto	l326
  6566  000A66                     __end_of_FlashReadUart:
  6567                           	opt stack 0
  6568                           tosu	equ	0xFFF
  6569                           tosh	equ	0xFFE
  6570                           tosl	equ	0xFFD
  6571                           pclath	equ	0xFFA
  6572                           tblptru	equ	0xFF8
  6573                           tblptrh	equ	0xFF7
  6574                           tblptrl	equ	0xFF6
  6575                           tablat	equ	0xFF5
  6576                           prodh	equ	0xFF4
  6577                           prodl	equ	0xFF3
  6578                           intcon	equ	0xFF2
  6579                           postinc0	equ	0xFEE
  6580                           plusw0	equ	0xFEB
  6581                           wreg	equ	0xFE8
  6582                           indf1	equ	0xFE7
  6583                           postinc1	equ	0xFE6
  6584                           postdec1	equ	0xFE5
  6585                           fsr1h	equ	0xFE2
  6586                           fsr1l	equ	0xFE1
  6587                           indf2	equ	0xFDF
  6588                           postinc2	equ	0xFDE
  6589                           postdec2	equ	0xFDD
  6590                           plusw2	equ	0xFDB
  6591                           fsr2h	equ	0xFDA
  6592                           fsr2l	equ	0xFD9
  6593                           status	equ	0xFD8
  6594                           
  6595 ;; *************** function _abs *****************
  6596 ;; Defined at:
  6597 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abs.c"
  6598 ;; Parameters:    Size  Location     Type
  6599 ;;  a               2   23[COMRAM] int 
  6600 ;; Auto vars:     Size  Location     Type
  6601 ;;		None
  6602 ;; Return value:  Size  Location     Type
  6603 ;;                  2   23[COMRAM] int 
  6604 ;; Registers used:
  6605 ;;		wreg, status,2, status,0
  6606 ;; Tracked objects:
  6607 ;;		On entry : 0/0
  6608 ;;		On exit  : 0/0
  6609 ;;		Unchanged: 0/0
  6610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6611 ;;      Params:         2       0       0       0       0       0       0
  6612 ;;      Locals:         0       0       0       0       0       0       0
  6613 ;;      Temps:          2       0       0       0       0       0       0
  6614 ;;      Totals:         4       0       0       0       0       0       0
  6615 ;;Total ram usage:        4 bytes
  6616 ;; Hardware stack levels used:    1
  6617 ;; Hardware stack levels required when called:    3
  6618 ;; This function calls:
  6619 ;;		Nothing
  6620 ;; This function is called by:
  6621 ;;		_FlashReadUart
  6622 ;; This function uses a non-reentrant model
  6623 ;;
  6624                           
  6625                           	psect	text26
  6626  003916                     __ptext26:
  6627                           	opt stack 0
  6628  003916                     _abs:
  6629                           	opt stack 24
  6630                           
  6631                           ;incstack = 0
  6632  003916  AE19               	btfss	abs@a+1,7,c
  6633  003918  D00D               	goto	l1514
  6634  00391A  C018  F01A         	movff	abs@a,??_abs
  6635  00391E  C019  F01B         	movff	abs@a+1,??_abs+1
  6636  003922  1E1A               	comf	??_abs,f,c
  6637  003924  1E1B               	comf	??_abs+1,f,c
  6638  003926  4A1A               	infsnz	??_abs,f,c
  6639  003928  2A1B               	incf	??_abs+1,f,c
  6640  00392A  C01A  F018         	movff	??_abs,?_abs
  6641  00392E  C01B  F019         	movff	??_abs+1,?_abs+1
  6642  003932  0012               	return	
  6643  003934                     l1514:
  6644  003934  C018  F018         	movff	abs@a,?_abs
  6645  003938  C019  F019         	movff	abs@a+1,?_abs+1
  6646  00393C  0012               	return		;funcret
  6647  00393E                     __end_of_abs:
  6648                           	opt stack 0
  6649                           tosu	equ	0xFFF
  6650                           tosh	equ	0xFFE
  6651                           tosl	equ	0xFFD
  6652                           pclath	equ	0xFFA
  6653                           tblptru	equ	0xFF8
  6654                           tblptrh	equ	0xFF7
  6655                           tblptrl	equ	0xFF6
  6656                           tablat	equ	0xFF5
  6657                           prodh	equ	0xFF4
  6658                           prodl	equ	0xFF3
  6659                           intcon	equ	0xFF2
  6660                           postinc0	equ	0xFEE
  6661                           plusw0	equ	0xFEB
  6662                           wreg	equ	0xFE8
  6663                           indf1	equ	0xFE7
  6664                           postinc1	equ	0xFE6
  6665                           postdec1	equ	0xFE5
  6666                           fsr1h	equ	0xFE2
  6667                           fsr1l	equ	0xFE1
  6668                           indf2	equ	0xFDF
  6669                           postinc2	equ	0xFDE
  6670                           postdec2	equ	0xFDD
  6671                           plusw2	equ	0xFDB
  6672                           fsr2h	equ	0xFDA
  6673                           fsr2l	equ	0xFD9
  6674                           status	equ	0xFD8
  6675                           
  6676 ;; *************** function _FLASH_ReadByte *****************
  6677 ;; Defined at:
  6678 ;;		line 58 in file "mcc_generated_files/memory.c"
  6679 ;; Parameters:    Size  Location     Type
  6680 ;;  flashAddr       4   23[COMRAM] unsigned long 
  6681 ;; Auto vars:     Size  Location     Type
  6682 ;;		None
  6683 ;; Return value:  Size  Location     Type
  6684 ;;                  1    wreg      unsigned char 
  6685 ;; Registers used:
  6686 ;;		wreg, status,2
  6687 ;; Tracked objects:
  6688 ;;		On entry : 0/0
  6689 ;;		On exit  : 0/0
  6690 ;;		Unchanged: 0/0
  6691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6692 ;;      Params:         4       0       0       0       0       0       0
  6693 ;;      Locals:         0       0       0       0       0       0       0
  6694 ;;      Temps:          0       0       0       0       0       0       0
  6695 ;;      Totals:         4       0       0       0       0       0       0
  6696 ;;Total ram usage:        4 bytes
  6697 ;; Hardware stack levels used:    1
  6698 ;; Hardware stack levels required when called:    3
  6699 ;; This function calls:
  6700 ;;		Nothing
  6701 ;; This function is called by:
  6702 ;;		_FlashReadUart
  6703 ;;		_FlashTest
  6704 ;;		_FLASH_ReadWord
  6705 ;;		_FLASH_WriteByte
  6706 ;; This function uses a non-reentrant model
  6707 ;;
  6708                           
  6709                           	psect	text27
  6710  003B44                     __ptext27:
  6711                           	opt stack 0
  6712  003B44                     _FLASH_ReadByte:
  6713                           	opt stack 24
  6714                           
  6715                           ;memory.c: 60: TBLPTRU = (uint8_t)((flashAddr & 0x00FF0000) >> 16);
  6716                           
  6717                           ;incstack = 0
  6718  003B44  C01A  FFF8         	movff	FLASH_ReadByte@flashAddr+2,tblptru	;volatile
  6719                           
  6720                           ;memory.c: 61: TBLPTRH = (uint8_t)((flashAddr & 0x0000FF00)>> 8);
  6721  003B48  C019  FFF7         	movff	FLASH_ReadByte@flashAddr+1,tblptrh	;volatile
  6722                           
  6723                           ;memory.c: 62: TBLPTRL = (uint8_t)(flashAddr & 0x000000FF);
  6724  003B4C  C018  FFF6         	movff	FLASH_ReadByte@flashAddr,tblptrl	;volatile
  6725  003B50  0008               	tblrd		*	;# 
  6726                           
  6727                           ;memory.c: 66: return (TABLAT);
  6728  003B52  50F5               	movf	tablat,w,c	;volatile
  6729  003B54  0012               	return	
  6730  003B56                     __end_of_FLASH_ReadByte:
  6731                           	opt stack 0
  6732                           tosu	equ	0xFFF
  6733                           tosh	equ	0xFFE
  6734                           tosl	equ	0xFFD
  6735                           pclath	equ	0xFFA
  6736                           tblptru	equ	0xFF8
  6737                           tblptrh	equ	0xFF7
  6738                           tblptrl	equ	0xFF6
  6739                           tablat	equ	0xFF5
  6740                           prodh	equ	0xFF4
  6741                           prodl	equ	0xFF3
  6742                           intcon	equ	0xFF2
  6743                           postinc0	equ	0xFEE
  6744                           plusw0	equ	0xFEB
  6745                           wreg	equ	0xFE8
  6746                           indf1	equ	0xFE7
  6747                           postinc1	equ	0xFE6
  6748                           postdec1	equ	0xFE5
  6749                           fsr1h	equ	0xFE2
  6750                           fsr1l	equ	0xFE1
  6751                           indf2	equ	0xFDF
  6752                           postinc2	equ	0xFDE
  6753                           postdec2	equ	0xFDD
  6754                           plusw2	equ	0xFDB
  6755                           fsr2h	equ	0xFDA
  6756                           fsr2l	equ	0xFD9
  6757                           status	equ	0xFD8
  6758                           
  6759 ;; *************** function _FlashReadCondition *****************
  6760 ;; Defined at:
  6761 ;;		line 178 in file "FlashApp.c"
  6762 ;; Parameters:    Size  Location     Type
  6763 ;;		None
  6764 ;; Auto vars:     Size  Location     Type
  6765 ;;  TxMsg           9   39[COMRAM] unsigned char [9]
  6766 ;; Return value:  Size  Location     Type
  6767 ;;                  1    wreg      void 
  6768 ;; Registers used:
  6769 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6770 ;; Tracked objects:
  6771 ;;		On entry : 0/0
  6772 ;;		On exit  : 0/0
  6773 ;;		Unchanged: 0/0
  6774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6775 ;;      Params:         0       0       0       0       0       0       0
  6776 ;;      Locals:         9       0       0       0       0       0       0
  6777 ;;      Temps:          4       0       0       0       0       0       0
  6778 ;;      Totals:        13       0       0       0       0       0       0
  6779 ;;Total ram usage:       13 bytes
  6780 ;; Hardware stack levels used:    1
  6781 ;; Hardware stack levels required when called:    5
  6782 ;; This function calls:
  6783 ;;		_WriteUartMessage
  6784 ;;		_ZeroArray
  6785 ;;		_crc8
  6786 ;;		_make8
  6787 ;; This function is called by:
  6788 ;;		_GroupFlashMemory
  6789 ;; This function uses a non-reentrant model
  6790 ;;
  6791                           
  6792                           	psect	text28
  6793  001C2C                     __ptext28:
  6794                           	opt stack 0
  6795  001C2C                     _FlashReadCondition:
  6796                           	opt stack 23
  6797                           
  6798                           ;FlashApp.c: 181: char TxMsg[4 + (0x4) + 1];
  6799                           ;FlashApp.c: 182: ZeroArray(TxMsg, 4 + (0x4) + 1);
  6800                           
  6801                           ;incstack = 0
  6802  001C2C  0E28               	movlw	low FlashReadCondition@TxMsg
  6803  001C2E  6E20               	movwf	ZeroArray@array,c
  6804  001C30  0E00               	movlw	high FlashReadCondition@TxMsg
  6805  001C32  6E21               	movwf	ZeroArray@array+1,c
  6806  001C34  0E00               	movlw	0
  6807  001C36  6E23               	movwf	ZeroArray@size+1,c
  6808  001C38  0E09               	movlw	9
  6809  001C3A  6E22               	movwf	ZeroArray@size,c
  6810  001C3C  EC29  F01D         	call	_ZeroArray	;wreg free
  6811                           
  6812                           ;FlashApp.c: 185: TxMsg[(0)] = (0x24);
  6813  001C40  0E24               	movlw	36
  6814  001C42  6E28               	movwf	FlashReadCondition@TxMsg,c
  6815                           
  6816                           ;FlashApp.c: 186: TxMsg[(1)] = FLASH_MSG;
  6817  001C44  0E05               	movlw	5
  6818  001C46  6E29               	movwf	FlashReadCondition@TxMsg+1,c
  6819                           
  6820                           ;FlashApp.c: 187: TxMsg[(2)] = FLASH_READ_CONDITION;
  6821  001C48  0E52               	movlw	82
  6822  001C4A  6E2A               	movwf	FlashReadCondition@TxMsg+2,c
  6823                           
  6824                           ;FlashApp.c: 188: TxMsg[(3)] = 4;
  6825  001C4C  0E04               	movlw	4
  6826  001C4E  6E2B               	movwf	FlashReadCondition@TxMsg+3,c
  6827                           
  6828                           ;FlashApp.c: 193: TxMsg[(0x4) + 0] = make8(0x7FF0 - 0x4000,1);
  6829  001C50  0EF0               	movlw	240
  6830  001C52  6E18               	movwf	make8@data,c
  6831  001C54  0E3F               	movlw	63
  6832  001C56  6E19               	movwf	make8@data+1,c
  6833  001C58  0E00               	movlw	0
  6834  001C5A  6E1A               	movwf	make8@data+2,c
  6835  001C5C  0E00               	movlw	0
  6836  001C5E  6E1B               	movwf	make8@data+3,c
  6837  001C60  0E01               	movlw	1
  6838  001C62  6E1C               	movwf	make8@dataLocation,c
  6839  001C64  EC1C  F018         	call	_make8	;wreg free
  6840  001C68  6E2C               	movwf	FlashReadCondition@TxMsg+4,c
  6841                           
  6842                           ;FlashApp.c: 194: TxMsg[(0x4) + 1] = make8(0x7FF0 - 0x4000,0);
  6843  001C6A  0EF0               	movlw	240
  6844  001C6C  6E18               	movwf	make8@data,c
  6845  001C6E  0E3F               	movlw	63
  6846  001C70  6E19               	movwf	make8@data+1,c
  6847  001C72  0E00               	movlw	0
  6848  001C74  6E1A               	movwf	make8@data+2,c
  6849  001C76  0E00               	movlw	0
  6850  001C78  6E1B               	movwf	make8@data+3,c
  6851  001C7A  0E00               	movlw	0
  6852  001C7C  6E1C               	movwf	make8@dataLocation,c
  6853  001C7E  EC1C  F018         	call	_make8	;wreg free
  6854  001C82  6E2D               	movwf	FlashReadCondition@TxMsg+5,c
  6855                           
  6856                           ;FlashApp.c: 197: TxMsg[(0x4) + 2] = make8(0x7FF0 - writeAddress,1);
  6857  001C84  C040  F024         	movff	_writeAddress,??_FlashReadCondition
  6858  001C88  C041  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  6859  001C8C  C042  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  6860  001C90  C043  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  6861  001C94  1E24               	comf	??_FlashReadCondition,f,c
  6862  001C96  1E25               	comf	??_FlashReadCondition+1,f,c
  6863  001C98  1E26               	comf	??_FlashReadCondition+2,f,c
  6864  001C9A  1E27               	comf	??_FlashReadCondition+3,f,c
  6865  001C9C  2A24               	incf	??_FlashReadCondition,f,c
  6866  001C9E  0E00               	movlw	0
  6867  001CA0  2225               	addwfc	??_FlashReadCondition+1,f,c
  6868  001CA2  2226               	addwfc	??_FlashReadCondition+2,f,c
  6869  001CA4  2227               	addwfc	??_FlashReadCondition+3,f,c
  6870  001CA6  0EF0               	movlw	240
  6871  001CA8  2424               	addwf	??_FlashReadCondition,w,c
  6872  001CAA  6E18               	movwf	make8@data,c
  6873  001CAC  0E7F               	movlw	127
  6874  001CAE  2025               	addwfc	??_FlashReadCondition+1,w,c
  6875  001CB0  6E19               	movwf	make8@data+1,c
  6876  001CB2  0E00               	movlw	0
  6877  001CB4  2026               	addwfc	??_FlashReadCondition+2,w,c
  6878  001CB6  6E1A               	movwf	make8@data+2,c
  6879  001CB8  0E00               	movlw	0
  6880  001CBA  2027               	addwfc	??_FlashReadCondition+3,w,c
  6881  001CBC  6E1B               	movwf	make8@data+3,c
  6882  001CBE  0E01               	movlw	1
  6883  001CC0  6E1C               	movwf	make8@dataLocation,c
  6884  001CC2  EC1C  F018         	call	_make8	;wreg free
  6885  001CC6  6E2E               	movwf	FlashReadCondition@TxMsg+6,c
  6886                           
  6887                           ;FlashApp.c: 198: TxMsg[(0x4) + 3] = make8(0x7FF0 - writeAddress,0);
  6888  001CC8  C040  F024         	movff	_writeAddress,??_FlashReadCondition
  6889  001CCC  C041  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  6890  001CD0  C042  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  6891  001CD4  C043  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  6892  001CD8  1E24               	comf	??_FlashReadCondition,f,c
  6893  001CDA  1E25               	comf	??_FlashReadCondition+1,f,c
  6894  001CDC  1E26               	comf	??_FlashReadCondition+2,f,c
  6895  001CDE  1E27               	comf	??_FlashReadCondition+3,f,c
  6896  001CE0  2A24               	incf	??_FlashReadCondition,f,c
  6897  001CE2  0E00               	movlw	0
  6898  001CE4  2225               	addwfc	??_FlashReadCondition+1,f,c
  6899  001CE6  2226               	addwfc	??_FlashReadCondition+2,f,c
  6900  001CE8  2227               	addwfc	??_FlashReadCondition+3,f,c
  6901  001CEA  0EF0               	movlw	240
  6902  001CEC  2424               	addwf	??_FlashReadCondition,w,c
  6903  001CEE  6E18               	movwf	make8@data,c
  6904  001CF0  0E7F               	movlw	127
  6905  001CF2  2025               	addwfc	??_FlashReadCondition+1,w,c
  6906  001CF4  6E19               	movwf	make8@data+1,c
  6907  001CF6  0E00               	movlw	0
  6908  001CF8  2026               	addwfc	??_FlashReadCondition+2,w,c
  6909  001CFA  6E1A               	movwf	make8@data+2,c
  6910  001CFC  0E00               	movlw	0
  6911  001CFE  2027               	addwfc	??_FlashReadCondition+3,w,c
  6912  001D00  6E1B               	movwf	make8@data+3,c
  6913  001D02  0E00               	movlw	0
  6914  001D04  6E1C               	movwf	make8@dataLocation,c
  6915  001D06  EC1C  F018         	call	_make8	;wreg free
  6916  001D0A  6E2F               	movwf	FlashReadCondition@TxMsg+7,c
  6917                           
  6918                           ;FlashApp.c: 200: TxMsg[4 + (0x4)] = crc8(TxMsg, 4 + (0x4));
  6919  001D0C  0E28               	movlw	low FlashReadCondition@TxMsg
  6920  001D0E  6E18               	movwf	crc8@dataArray,c
  6921  001D10  0E00               	movlw	high FlashReadCondition@TxMsg
  6922  001D12  6E19               	movwf	crc8@dataArray+1,c
  6923  001D14  0E00               	movlw	0
  6924  001D16  6E1B               	movwf	crc8@dataSize+1,c
  6925  001D18  0E08               	movlw	8
  6926  001D1A  6E1A               	movwf	crc8@dataSize,c
  6927  001D1C  ECA3  F019         	call	_crc8	;wreg free
  6928  001D20  6E30               	movwf	FlashReadCondition@TxMsg+8,c
  6929                           
  6930                           ;FlashApp.c: 202: WriteUartMessage(TxMsg, 4 + (0x4) + 1);
  6931  001D22  0E28               	movlw	low FlashReadCondition@TxMsg
  6932  001D24  6E19               	movwf	WriteUartMessage@dataBuf,c
  6933  001D26  0E00               	movlw	high FlashReadCondition@TxMsg
  6934  001D28  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  6935  001D2A  0E00               	movlw	0
  6936  001D2C  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  6937  001D2E  0E09               	movlw	9
  6938  001D30  6E1B               	movwf	WriteUartMessage@dataSize,c
  6939  001D32  EC9F  F01B         	call	_WriteUartMessage	;wreg free
  6940  001D36  0012               	return		;funcret
  6941  001D38                     __end_of_FlashReadCondition:
  6942                           	opt stack 0
  6943                           tosu	equ	0xFFF
  6944                           tosh	equ	0xFFE
  6945                           tosl	equ	0xFFD
  6946                           pclath	equ	0xFFA
  6947                           tblptru	equ	0xFF8
  6948                           tblptrh	equ	0xFF7
  6949                           tblptrl	equ	0xFF6
  6950                           tablat	equ	0xFF5
  6951                           prodh	equ	0xFF4
  6952                           prodl	equ	0xFF3
  6953                           intcon	equ	0xFF2
  6954                           postinc0	equ	0xFEE
  6955                           plusw0	equ	0xFEB
  6956                           wreg	equ	0xFE8
  6957                           indf1	equ	0xFE7
  6958                           postinc1	equ	0xFE6
  6959                           postdec1	equ	0xFE5
  6960                           fsr1h	equ	0xFE2
  6961                           fsr1l	equ	0xFE1
  6962                           indf2	equ	0xFDF
  6963                           postinc2	equ	0xFDE
  6964                           postdec2	equ	0xFDD
  6965                           plusw2	equ	0xFDB
  6966                           fsr2h	equ	0xFDA
  6967                           fsr2l	equ	0xFD9
  6968                           status	equ	0xFD8
  6969                           
  6970 ;; *************** function _FlashEreaseMem *****************
  6971 ;; Defined at:
  6972 ;;		line 168 in file "FlashApp.c"
  6973 ;; Parameters:    Size  Location     Type
  6974 ;;		None
  6975 ;; Auto vars:     Size  Location     Type
  6976 ;;		None
  6977 ;; Return value:  Size  Location     Type
  6978 ;;                  1    wreg      void 
  6979 ;; Registers used:
  6980 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6981 ;; Tracked objects:
  6982 ;;		On entry : 0/0
  6983 ;;		On exit  : 0/0
  6984 ;;		Unchanged: 0/0
  6985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6986 ;;      Params:         0       0       0       0       0       0       0
  6987 ;;      Locals:         0       0       0       0       0       0       0
  6988 ;;      Temps:          0       0       0       0       0       0       0
  6989 ;;      Totals:         0       0       0       0       0       0       0
  6990 ;;Total ram usage:        0 bytes
  6991 ;; Hardware stack levels used:    1
  6992 ;; Hardware stack levels required when called:    6
  6993 ;; This function calls:
  6994 ;;		_SendAckMessage
  6995 ;;		_ZeroArray
  6996 ;; This function is called by:
  6997 ;;		_GroupFlashMemory
  6998 ;; This function uses a non-reentrant model
  6999 ;;
  7000                           
  7001                           	psect	text29
  7002  0032A2                     __ptext29:
  7003                           	opt stack 0
  7004  0032A2                     _FlashEreaseMem:
  7005                           	opt stack 22
  7006                           
  7007                           ;FlashApp.c: 170: writeAddress = 0x4000;
  7008                           
  7009                           ;incstack = 0
  7010  0032A2  0E00               	movlw	0
  7011  0032A4  6E40               	movwf	_writeAddress,c
  7012  0032A6  0E40               	movlw	64
  7013  0032A8  6E41               	movwf	_writeAddress+1,c
  7014  0032AA  0E00               	movlw	0
  7015  0032AC  6E42               	movwf	_writeAddress+2,c
  7016  0032AE  0E00               	movlw	0
  7017  0032B0  6E43               	movwf	_writeAddress+3,c
  7018                           
  7019                           ;FlashApp.c: 171: readAddress = 0x4000;
  7020  0032B2  0E00               	movlw	0
  7021  0032B4  0100               	movlb	0	; () banked
  7022  0032B6  6FE8               	movwf	_readAddress& (0+255),b
  7023  0032B8  0E40               	movlw	64
  7024  0032BA  6FE9               	movwf	(_readAddress+1)& (0+255),b
  7025  0032BC  0E00               	movlw	0
  7026  0032BE  6FEA               	movwf	(_readAddress+2)& (0+255),b
  7027  0032C0  0E00               	movlw	0
  7028  0032C2  6FEB               	movwf	(_readAddress+3)& (0+255),b
  7029                           
  7030                           ;FlashApp.c: 172: numOfValidateSamples = 0;
  7031  0032C4  0E00               	movlw	0
  7032  0032C6  6E31               	movwf	_numOfValidateSamples,c
  7033  0032C8  0E00               	movlw	0
  7034  0032CA  6E32               	movwf	_numOfValidateSamples+1,c
  7035  0032CC  0E00               	movlw	0
  7036  0032CE  6E33               	movwf	_numOfValidateSamples+2,c
  7037  0032D0  0E00               	movlw	0
  7038  0032D2  6E34               	movwf	_numOfValidateSamples+3,c
  7039                           
  7040                           ; BSR set to: 0
  7041                           ;FlashApp.c: 173: ZeroArray(sampleArray, (64)/sizeof(adc_result_t));
  7042  0032D4  0E7B               	movlw	low _sampleArray
  7043  0032D6  6E20               	movwf	ZeroArray@array,c
  7044  0032D8  0E01               	movlw	high _sampleArray
  7045  0032DA  6E21               	movwf	ZeroArray@array+1,c
  7046  0032DC  0E00               	movlw	0
  7047  0032DE  6E23               	movwf	ZeroArray@size+1,c
  7048  0032E0  0E20               	movlw	32
  7049  0032E2  6E22               	movwf	ZeroArray@size,c
  7050  0032E4  EC29  F01D         	call	_ZeroArray	;wreg free
  7051                           
  7052                           ;FlashApp.c: 174: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_EREASE_MEMORY
      +                          );
  7053  0032E8  0E51               	movlw	81
  7054  0032EA  6E24               	movwf	SendAckMessage@inRequest,c
  7055  0032EC  0E05               	movlw	5
  7056  0032EE  EC7A  F019         	call	_SendAckMessage
  7057  0032F2  0012               	return		;funcret
  7058  0032F4                     __end_of_FlashEreaseMem:
  7059                           	opt stack 0
  7060                           tosu	equ	0xFFF
  7061                           tosh	equ	0xFFE
  7062                           tosl	equ	0xFFD
  7063                           pclath	equ	0xFFA
  7064                           tblptru	equ	0xFF8
  7065                           tblptrh	equ	0xFF7
  7066                           tblptrl	equ	0xFF6
  7067                           tablat	equ	0xFF5
  7068                           prodh	equ	0xFF4
  7069                           prodl	equ	0xFF3
  7070                           intcon	equ	0xFF2
  7071                           postinc0	equ	0xFEE
  7072                           plusw0	equ	0xFEB
  7073                           wreg	equ	0xFE8
  7074                           indf1	equ	0xFE7
  7075                           postinc1	equ	0xFE6
  7076                           postdec1	equ	0xFE5
  7077                           fsr1h	equ	0xFE2
  7078                           fsr1l	equ	0xFE1
  7079                           indf2	equ	0xFDF
  7080                           postinc2	equ	0xFDE
  7081                           postdec2	equ	0xFDD
  7082                           plusw2	equ	0xFDB
  7083                           fsr2h	equ	0xFDA
  7084                           fsr2l	equ	0xFD9
  7085                           status	equ	0xFD8
  7086                           
  7087 ;; *************** function _DacSetValue *****************
  7088 ;; Defined at:
  7089 ;;		line 42 in file "DacApp.c"
  7090 ;; Parameters:    Size  Location     Type
  7091 ;;  data            2   43[COMRAM] PTR unsigned char 
  7092 ;;		 -> rxMsgData(20), 
  7093 ;; Auto vars:     Size  Location     Type
  7094 ;;		None
  7095 ;; Return value:  Size  Location     Type
  7096 ;;                  1    wreg      void 
  7097 ;; Registers used:
  7098 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7099 ;; Tracked objects:
  7100 ;;		On entry : 0/0
  7101 ;;		On exit  : 0/0
  7102 ;;		Unchanged: 0/0
  7103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7104 ;;      Params:         2       0       0       0       0       0       0
  7105 ;;      Locals:         0       0       0       0       0       0       0
  7106 ;;      Temps:          0       0       0       0       0       0       0
  7107 ;;      Totals:         2       0       0       0       0       0       0
  7108 ;;Total ram usage:        2 bytes
  7109 ;; Hardware stack levels used:    1
  7110 ;; Hardware stack levels required when called:    6
  7111 ;; This function calls:
  7112 ;;		_SendAckMessage
  7113 ;; This function is called by:
  7114 ;;		_GroupDAC
  7115 ;; This function uses a non-reentrant model
  7116 ;;
  7117                           
  7118                           	psect	text30
  7119  003BBC                     __ptext30:
  7120                           	opt stack 0
  7121  003BBC                     _DacSetValue:
  7122                           	opt stack 22
  7123                           
  7124                           ;DacApp.c: 52: SendAckMessage((MSG_GROUPS)DAC_MSG, (MSG_REQUEST)DAC_SET_VALUE);
  7125                           
  7126                           ;incstack = 0
  7127  003BBC  0E61               	movlw	97
  7128  003BBE  6E24               	movwf	SendAckMessage@inRequest,c
  7129  003BC0  0E06               	movlw	6
  7130  003BC2  EC7A  F019         	call	_SendAckMessage
  7131  003BC6  0012               	return		;funcret
  7132  003BC8                     __end_of_DacSetValue:
  7133                           	opt stack 0
  7134                           tosu	equ	0xFFF
  7135                           tosh	equ	0xFFE
  7136                           tosl	equ	0xFFD
  7137                           pclath	equ	0xFFA
  7138                           tblptru	equ	0xFF8
  7139                           tblptrh	equ	0xFF7
  7140                           tblptrl	equ	0xFF6
  7141                           tablat	equ	0xFF5
  7142                           prodh	equ	0xFF4
  7143                           prodl	equ	0xFF3
  7144                           intcon	equ	0xFF2
  7145                           postinc0	equ	0xFEE
  7146                           plusw0	equ	0xFEB
  7147                           wreg	equ	0xFE8
  7148                           indf1	equ	0xFE7
  7149                           postinc1	equ	0xFE6
  7150                           postdec1	equ	0xFE5
  7151                           fsr1h	equ	0xFE2
  7152                           fsr1l	equ	0xFE1
  7153                           indf2	equ	0xFDF
  7154                           postinc2	equ	0xFDE
  7155                           postdec2	equ	0xFDD
  7156                           plusw2	equ	0xFDB
  7157                           fsr2h	equ	0xFDA
  7158                           fsr2l	equ	0xFD9
  7159                           status	equ	0xFD8
  7160                           
  7161 ;; *************** function _testLeds *****************
  7162 ;; Defined at:
  7163 ;;		line 43 in file "LedsApp.c"
  7164 ;; Parameters:    Size  Location     Type
  7165 ;;		None
  7166 ;; Auto vars:     Size  Location     Type
  7167 ;;  idx             2   44[COMRAM] int 
  7168 ;; Return value:  Size  Location     Type
  7169 ;;                  1    wreg      void 
  7170 ;; Registers used:
  7171 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7172 ;; Tracked objects:
  7173 ;;		On entry : 0/0
  7174 ;;		On exit  : 0/0
  7175 ;;		Unchanged: 0/0
  7176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7177 ;;      Params:         0       0       0       0       0       0       0
  7178 ;;      Locals:         2       0       0       0       0       0       0
  7179 ;;      Temps:          1       0       0       0       0       0       0
  7180 ;;      Totals:         3       0       0       0       0       0       0
  7181 ;;Total ram usage:        3 bytes
  7182 ;; Hardware stack levels used:    1
  7183 ;; Hardware stack levels required when called:    6
  7184 ;; This function calls:
  7185 ;;		_SendAckMessage
  7186 ;; This function is called by:
  7187 ;;		_GroupControlMcu
  7188 ;; This function uses a non-reentrant model
  7189 ;;
  7190                           
  7191                           	psect	text31
  7192  002E4A                     __ptext31:
  7193                           	opt stack 0
  7194  002E4A                     _testLeds:
  7195                           	opt stack 22
  7196                           
  7197                           ;LedsApp.c: 46: for(int idx = 0; idx < 10; idx++)
  7198                           
  7199                           ;incstack = 0
  7200  002E4A  0E00               	movlw	0
  7201  002E4C  6E2E               	movwf	testLeds@idx+1,c
  7202  002E4E  0E00               	movlw	0
  7203  002E50  6E2D               	movwf	testLeds@idx,c
  7204  002E52                     l7741:
  7205  002E52  BE2E               	btfsc	testLeds@idx+1,7,c
  7206  002E54  D006               	goto	l54
  7207  002E56  502E               	movf	testLeds@idx+1,w,c
  7208  002E58  E127               	bnz	l7755
  7209  002E5A  0E0A               	movlw	10
  7210  002E5C  5C2D               	subwf	testLeds@idx,w,c
  7211  002E5E  B0D8               	btfsc	status,0,c
  7212  002E60  D023               	goto	u8100
  7213  002E62                     l54:
  7214                           
  7215                           ;LedsApp.c: 47: {
  7216                           ;LedsApp.c: 49: LATCbits.LATC0 = 1;
  7217  002E62  808B               	bsf	3979,0,c	;volatile
  7218                           
  7219                           ;LedsApp.c: 50: _delay((unsigned long)((50)*(8000000/4000.0)));
  7220  002E64  0E82               	movlw	130
  7221  002E66  6E2C               	movwf	??_testLeds& (0+255),c
  7222  002E68  0EDE               	movlw	222
  7223  002E6A                     u9027:
  7224  002E6A  2EE8               	decfsz	wreg,f,c
  7225  002E6C  D7FE               	bra	u9027
  7226  002E6E  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7227  002E70  D7FC               	bra	u9027
  7228                           
  7229                           ;LedsApp.c: 51: LATBbits.LATB4 = 1;
  7230  002E72  888A               	bsf	3978,4,c	;volatile
  7231                           
  7232                           ;LedsApp.c: 52: _delay((unsigned long)((50)*(8000000/4000.0)));
  7233  002E74  0E82               	movlw	130
  7234  002E76  6E2C               	movwf	??_testLeds& (0+255),c
  7235  002E78  0EDE               	movlw	222
  7236  002E7A                     u9037:
  7237  002E7A  2EE8               	decfsz	wreg,f,c
  7238  002E7C  D7FE               	bra	u9037
  7239  002E7E  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7240  002E80  D7FC               	bra	u9037
  7241                           
  7242                           ;LedsApp.c: 53: LATCbits.LATC0 = 0;
  7243  002E82  908B               	bcf	3979,0,c	;volatile
  7244                           
  7245                           ;LedsApp.c: 54: _delay((unsigned long)((50)*(8000000/4000.0)));
  7246  002E84  0E82               	movlw	130
  7247  002E86  6E2C               	movwf	??_testLeds& (0+255),c
  7248  002E88  0EDE               	movlw	222
  7249  002E8A                     u9047:
  7250  002E8A  2EE8               	decfsz	wreg,f,c
  7251  002E8C  D7FE               	bra	u9047
  7252  002E8E  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7253  002E90  D7FC               	bra	u9047
  7254                           
  7255                           ;LedsApp.c: 55: LATBbits.LATB4 = 0;
  7256  002E92  988A               	bcf	3978,4,c	;volatile
  7257                           
  7258                           ;LedsApp.c: 56: _delay((unsigned long)((50)*(8000000/4000.0)));
  7259  002E94  0E82               	movlw	130
  7260  002E96  6E2C               	movwf	??_testLeds& (0+255),c
  7261  002E98  0EDE               	movlw	222
  7262  002E9A                     u9057:
  7263  002E9A  2EE8               	decfsz	wreg,f,c
  7264  002E9C  D7FE               	bra	u9057
  7265  002E9E  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7266  002EA0  D7FC               	bra	u9057
  7267  002EA2  4A2D               	infsnz	testLeds@idx,f,c
  7268  002EA4  2A2E               	incf	testLeds@idx+1,f,c
  7269  002EA6  D7D5               	goto	l7741
  7270  002EA8                     u8100:
  7271  002EA8                     l7755:
  7272                           
  7273                           ;LedsApp.c: 57: }
  7274                           ;LedsApp.c: 59: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_TEST_LEDS);
  7275  002EA8  0E14               	movlw	20
  7276  002EAA  6E24               	movwf	SendAckMessage@inRequest,c
  7277  002EAC  0E01               	movlw	1
  7278  002EAE  EC7A  F019         	call	_SendAckMessage
  7279  002EB2  0012               	return	
  7280  002EB4                     __end_of_testLeds:
  7281                           	opt stack 0
  7282                           tosu	equ	0xFFF
  7283                           tosh	equ	0xFFE
  7284                           tosl	equ	0xFFD
  7285                           pclath	equ	0xFFA
  7286                           tblptru	equ	0xFF8
  7287                           tblptrh	equ	0xFF7
  7288                           tblptrl	equ	0xFF6
  7289                           tablat	equ	0xFF5
  7290                           prodh	equ	0xFF4
  7291                           prodl	equ	0xFF3
  7292                           intcon	equ	0xFF2
  7293                           postinc0	equ	0xFEE
  7294                           plusw0	equ	0xFEB
  7295                           wreg	equ	0xFE8
  7296                           indf1	equ	0xFE7
  7297                           postinc1	equ	0xFE6
  7298                           postdec1	equ	0xFE5
  7299                           fsr1h	equ	0xFE2
  7300                           fsr1l	equ	0xFE1
  7301                           indf2	equ	0xFDF
  7302                           postinc2	equ	0xFDE
  7303                           postdec2	equ	0xFDD
  7304                           plusw2	equ	0xFDB
  7305                           fsr2h	equ	0xFDA
  7306                           fsr2l	equ	0xFD9
  7307                           status	equ	0xFD8
  7308                           
  7309 ;; *************** function _ResetMcu *****************
  7310 ;; Defined at:
  7311 ;;		line 131 in file "SystemCommon.c"
  7312 ;; Parameters:    Size  Location     Type
  7313 ;;		None
  7314 ;; Auto vars:     Size  Location     Type
  7315 ;;		None
  7316 ;; Return value:  Size  Location     Type
  7317 ;;                  1    wreg      void 
  7318 ;; Registers used:
  7319 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7320 ;; Tracked objects:
  7321 ;;		On entry : 0/0
  7322 ;;		On exit  : 0/0
  7323 ;;		Unchanged: 0/0
  7324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7325 ;;      Params:         0       0       0       0       0       0       0
  7326 ;;      Locals:         0       0       0       0       0       0       0
  7327 ;;      Temps:          0       0       0       0       0       0       0
  7328 ;;      Totals:         0       0       0       0       0       0       0
  7329 ;;Total ram usage:        0 bytes
  7330 ;; Hardware stack levels used:    1
  7331 ;; Hardware stack levels required when called:    6
  7332 ;; This function calls:
  7333 ;;		_SendAckMessage
  7334 ;; This function is called by:
  7335 ;;		_GroupControlMcu
  7336 ;; This function uses a non-reentrant model
  7337 ;;
  7338                           
  7339                           	psect	text32
  7340  003B86                     __ptext32:
  7341                           	opt stack 0
  7342  003B86                     _ResetMcu:
  7343                           	opt stack 22
  7344                           
  7345                           ;SystemCommon.c: 134: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_RESET
      +                          _MCU);
  7346                           
  7347                           ;incstack = 0
  7348  003B86  0E11               	movlw	17
  7349  003B88  6E24               	movwf	SendAckMessage@inRequest,c
  7350  003B8A  0E01               	movlw	1
  7351  003B8C  EC7A  F019         	call	_SendAckMessage
  7352  003B90  00FF               	reset		;# 
  7353  003B92  0012               	return		;funcret
  7354  003B94                     __end_of_ResetMcu:
  7355                           	opt stack 0
  7356                           tosu	equ	0xFFF
  7357                           tosh	equ	0xFFE
  7358                           tosl	equ	0xFFD
  7359                           pclath	equ	0xFFA
  7360                           tblptru	equ	0xFF8
  7361                           tblptrh	equ	0xFF7
  7362                           tblptrl	equ	0xFF6
  7363                           tablat	equ	0xFF5
  7364                           prodh	equ	0xFF4
  7365                           prodl	equ	0xFF3
  7366                           intcon	equ	0xFF2
  7367                           postinc0	equ	0xFEE
  7368                           plusw0	equ	0xFEB
  7369                           wreg	equ	0xFE8
  7370                           indf1	equ	0xFE7
  7371                           postinc1	equ	0xFE6
  7372                           postdec1	equ	0xFE5
  7373                           fsr1h	equ	0xFE2
  7374                           fsr1l	equ	0xFE1
  7375                           indf2	equ	0xFDF
  7376                           postinc2	equ	0xFDE
  7377                           postdec2	equ	0xFDD
  7378                           plusw2	equ	0xFDB
  7379                           fsr2h	equ	0xFDA
  7380                           fsr2l	equ	0xFD9
  7381                           status	equ	0xFD8
  7382                           
  7383 ;; *************** function _SetConversionResultFormat *****************
  7384 ;; Defined at:
  7385 ;;		line 38 in file "AdcApp.c"
  7386 ;; Parameters:    Size  Location     Type
  7387 ;;  data            2   43[COMRAM] PTR unsigned char 
  7388 ;; Auto vars:     Size  Location     Type
  7389 ;;		None
  7390 ;; Return value:  Size  Location     Type
  7391 ;;                  1    wreg      void 
  7392 ;; Registers used:
  7393 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7394 ;; Tracked objects:
  7395 ;;		On entry : 0/0
  7396 ;;		On exit  : 0/0
  7397 ;;		Unchanged: 0/0
  7398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7399 ;;      Params:         2       0       0       0       0       0       0
  7400 ;;      Locals:         0       0       0       0       0       0       0
  7401 ;;      Temps:          0       0       0       0       0       0       0
  7402 ;;      Totals:         2       0       0       0       0       0       0
  7403 ;;Total ram usage:        2 bytes
  7404 ;; Hardware stack levels used:    1
  7405 ;; Hardware stack levels required when called:    6
  7406 ;; This function calls:
  7407 ;;		_SendAckMessage
  7408 ;; This function is called by:
  7409 ;;		_GroupAdc
  7410 ;; This function uses a non-reentrant model
  7411 ;;
  7412                           
  7413                           	psect	text33
  7414  003BC8                     __ptext33:
  7415                           	opt stack 0
  7416  003BC8                     _SetConversionResultFormat:
  7417                           	opt stack 22
  7418                           
  7419                           ;AdcApp.c: 40: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_CONVERSION_MODE);
  7420                           
  7421                           ;incstack = 0
  7422  003BC8  0E33               	movlw	51
  7423  003BCA  6E24               	movwf	SendAckMessage@inRequest,c
  7424  003BCC  0E03               	movlw	3
  7425  003BCE  EC7A  F019         	call	_SendAckMessage
  7426  003BD2  0012               	return		;funcret
  7427  003BD4                     __end_of_SetConversionResultFormat:
  7428                           	opt stack 0
  7429                           tosu	equ	0xFFF
  7430                           tosh	equ	0xFFE
  7431                           tosl	equ	0xFFD
  7432                           pclath	equ	0xFFA
  7433                           tblptru	equ	0xFF8
  7434                           tblptrh	equ	0xFF7
  7435                           tblptrl	equ	0xFF6
  7436                           tablat	equ	0xFF5
  7437                           prodh	equ	0xFF4
  7438                           prodl	equ	0xFF3
  7439                           intcon	equ	0xFF2
  7440                           postinc0	equ	0xFEE
  7441                           plusw0	equ	0xFEB
  7442                           wreg	equ	0xFE8
  7443                           indf1	equ	0xFE7
  7444                           postinc1	equ	0xFE6
  7445                           postdec1	equ	0xFE5
  7446                           fsr1h	equ	0xFE2
  7447                           fsr1l	equ	0xFE1
  7448                           indf2	equ	0xFDF
  7449                           postinc2	equ	0xFDE
  7450                           postdec2	equ	0xFDD
  7451                           plusw2	equ	0xFDB
  7452                           fsr2h	equ	0xFDA
  7453                           fsr2l	equ	0xFD9
  7454                           status	equ	0xFD8
  7455                           
  7456 ;; *************** function _SetChannelMode *****************
  7457 ;; Defined at:
  7458 ;;		line 43 in file "AdcApp.c"
  7459 ;; Parameters:    Size  Location     Type
  7460 ;;  data            2   43[COMRAM] PTR unsigned char 
  7461 ;; Auto vars:     Size  Location     Type
  7462 ;;		None
  7463 ;; Return value:  Size  Location     Type
  7464 ;;                  1    wreg      void 
  7465 ;; Registers used:
  7466 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7467 ;; Tracked objects:
  7468 ;;		On entry : 0/0
  7469 ;;		On exit  : 0/0
  7470 ;;		Unchanged: 0/0
  7471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7472 ;;      Params:         2       0       0       0       0       0       0
  7473 ;;      Locals:         0       0       0       0       0       0       0
  7474 ;;      Temps:          0       0       0       0       0       0       0
  7475 ;;      Totals:         2       0       0       0       0       0       0
  7476 ;;Total ram usage:        2 bytes
  7477 ;; Hardware stack levels used:    1
  7478 ;; Hardware stack levels required when called:    6
  7479 ;; This function calls:
  7480 ;;		_SendAckMessage
  7481 ;; This function is called by:
  7482 ;;		_GroupAdc
  7483 ;; This function uses a non-reentrant model
  7484 ;;
  7485                           
  7486                           	psect	text34
  7487  00380C                     __ptext34:
  7488                           	opt stack 0
  7489  00380C                     _SetChannelMode:
  7490                           	opt stack 22
  7491                           
  7492                           ;AdcApp.c: 45: adcSampleMode = data[0];
  7493                           
  7494                           ;incstack = 0
  7495  00380C  C02C  FFD9         	movff	SetChannelMode@data,fsr2l
  7496  003810  C02D  FFDA         	movff	SetChannelMode@data+1,fsr2h
  7497  003814  50DF               	movf	indf2,w,c
  7498  003816  6E3B               	movwf	_adcSampleMode,c
  7499                           
  7500                           ;AdcApp.c: 46: if (adcSampleMode == SINGLE_CHANNEL)
  7501  003818  043B               	decf	_adcSampleMode,w,c
  7502  00381A  A4D8               	btfss	status,2,c
  7503  00381C  D009               	goto	l116
  7504                           
  7505                           ;AdcApp.c: 47: {
  7506                           ;AdcApp.c: 48: channel = data[1];
  7507  00381E  EE20 F001          	lfsr	2,1
  7508  003822  502C               	movf	SetChannelMode@data,w,c
  7509  003824  26D9               	addwf	fsr2l,f,c
  7510  003826  502D               	movf	SetChannelMode@data+1,w,c
  7511  003828  22DA               	addwfc	fsr2h,f,c
  7512  00382A  50DF               	movf	indf2,w,c
  7513  00382C  0100               	movlb	0	; () banked
  7514  00382E  6FE4               	movwf	_channel& (0+255),b
  7515  003830                     l116:
  7516                           
  7517                           ;AdcApp.c: 49: }
  7518                           ;AdcApp.c: 50: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_CHANNEL_MODE);
  7519                           
  7520                           ; BSR set to: 0
  7521  003830  0E32               	movlw	50
  7522  003832  6E24               	movwf	SendAckMessage@inRequest,c
  7523  003834  0E03               	movlw	3
  7524  003836  EC7A  F019         	call	_SendAckMessage
  7525  00383A  0012               	return		;funcret
  7526  00383C                     __end_of_SetChannelMode:
  7527                           	opt stack 0
  7528                           tosu	equ	0xFFF
  7529                           tosh	equ	0xFFE
  7530                           tosl	equ	0xFFD
  7531                           pclath	equ	0xFFA
  7532                           tblptru	equ	0xFF8
  7533                           tblptrh	equ	0xFF7
  7534                           tblptrl	equ	0xFF6
  7535                           tablat	equ	0xFF5
  7536                           prodh	equ	0xFF4
  7537                           prodl	equ	0xFF3
  7538                           intcon	equ	0xFF2
  7539                           postinc0	equ	0xFEE
  7540                           plusw0	equ	0xFEB
  7541                           wreg	equ	0xFE8
  7542                           indf1	equ	0xFE7
  7543                           postinc1	equ	0xFE6
  7544                           postdec1	equ	0xFE5
  7545                           fsr1h	equ	0xFE2
  7546                           fsr1l	equ	0xFE1
  7547                           indf2	equ	0xFDF
  7548                           postinc2	equ	0xFDE
  7549                           postdec2	equ	0xFDD
  7550                           plusw2	equ	0xFDB
  7551                           fsr2h	equ	0xFDA
  7552                           fsr2l	equ	0xFD9
  7553                           status	equ	0xFD8
  7554                           
  7555 ;; *************** function _SetAdcOperationMode *****************
  7556 ;; Defined at:
  7557 ;;		line 33 in file "AdcApp.c"
  7558 ;; Parameters:    Size  Location     Type
  7559 ;;  data            2   43[COMRAM] PTR unsigned char 
  7560 ;; Auto vars:     Size  Location     Type
  7561 ;;		None
  7562 ;; Return value:  Size  Location     Type
  7563 ;;                  1    wreg      void 
  7564 ;; Registers used:
  7565 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7566 ;; Tracked objects:
  7567 ;;		On entry : 0/0
  7568 ;;		On exit  : 0/0
  7569 ;;		Unchanged: 0/0
  7570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7571 ;;      Params:         2       0       0       0       0       0       0
  7572 ;;      Locals:         0       0       0       0       0       0       0
  7573 ;;      Temps:          0       0       0       0       0       0       0
  7574 ;;      Totals:         2       0       0       0       0       0       0
  7575 ;;Total ram usage:        2 bytes
  7576 ;; Hardware stack levels used:    1
  7577 ;; Hardware stack levels required when called:    6
  7578 ;; This function calls:
  7579 ;;		_SendAckMessage
  7580 ;; This function is called by:
  7581 ;;		_GroupAdc
  7582 ;; This function uses a non-reentrant model
  7583 ;;
  7584                           
  7585                           	psect	text35
  7586  003BD4                     __ptext35:
  7587                           	opt stack 0
  7588  003BD4                     _SetAdcOperationMode:
  7589                           	opt stack 22
  7590                           
  7591                           ;AdcApp.c: 35: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_OPERATION);
  7592                           
  7593                           ;incstack = 0
  7594  003BD4  0E31               	movlw	49
  7595  003BD6  6E24               	movwf	SendAckMessage@inRequest,c
  7596  003BD8  0E03               	movlw	3
  7597  003BDA  EC7A  F019         	call	_SendAckMessage
  7598  003BDE  0012               	return		;funcret
  7599  003BE0                     __end_of_SetAdcOperationMode:
  7600                           	opt stack 0
  7601                           tosu	equ	0xFFF
  7602                           tosh	equ	0xFFE
  7603                           tosl	equ	0xFFD
  7604                           pclath	equ	0xFFA
  7605                           tblptru	equ	0xFF8
  7606                           tblptrh	equ	0xFF7
  7607                           tblptrl	equ	0xFF6
  7608                           tablat	equ	0xFF5
  7609                           prodh	equ	0xFF4
  7610                           prodl	equ	0xFF3
  7611                           intcon	equ	0xFF2
  7612                           postinc0	equ	0xFEE
  7613                           plusw0	equ	0xFEB
  7614                           wreg	equ	0xFE8
  7615                           indf1	equ	0xFE7
  7616                           postinc1	equ	0xFE6
  7617                           postdec1	equ	0xFE5
  7618                           fsr1h	equ	0xFE2
  7619                           fsr1l	equ	0xFE1
  7620                           indf2	equ	0xFDF
  7621                           postinc2	equ	0xFDE
  7622                           postdec2	equ	0xFDD
  7623                           plusw2	equ	0xFDB
  7624                           fsr2h	equ	0xFDA
  7625                           fsr2l	equ	0xFD9
  7626                           status	equ	0xFD8
  7627                           
  7628 ;; *************** function _EUSART1_Read *****************
  7629 ;; Defined at:
  7630 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  7631 ;; Parameters:    Size  Location     Type
  7632 ;;		None
  7633 ;; Auto vars:     Size  Location     Type
  7634 ;;  readValue       2   24[COMRAM] unsigned int 
  7635 ;; Return value:  Size  Location     Type
  7636 ;;                  1    wreg      unsigned char 
  7637 ;; Registers used:
  7638 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7639 ;; Tracked objects:
  7640 ;;		On entry : 0/0
  7641 ;;		On exit  : 0/0
  7642 ;;		Unchanged: 0/0
  7643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7644 ;;      Params:         0       0       0       0       0       0       0
  7645 ;;      Locals:         2       0       0       0       0       0       0
  7646 ;;      Temps:          1       0       0       0       0       0       0
  7647 ;;      Totals:         3       0       0       0       0       0       0
  7648 ;;Total ram usage:        3 bytes
  7649 ;; Hardware stack levels used:    1
  7650 ;; Hardware stack levels required when called:    3
  7651 ;; This function calls:
  7652 ;;		Nothing
  7653 ;; This function is called by:
  7654 ;;		_readUartMessage
  7655 ;; This function uses a non-reentrant model
  7656 ;;
  7657                           
  7658                           	psect	text36
  7659  003468                     __ptext36:
  7660                           	opt stack 0
  7661  003468                     _EUSART1_Read:
  7662                           	opt stack 26
  7663                           
  7664                           ;eusart1.c: 112: uint16_t readValue = 0;
  7665                           
  7666                           ;incstack = 0
  7667  003468  0E00               	movlw	0
  7668  00346A  6E1A               	movwf	EUSART1_Read@readValue+1,c
  7669  00346C  0E00               	movlw	0
  7670  00346E  6E19               	movwf	EUSART1_Read@readValue,c
  7671                           
  7672                           ;eusart1.c: 119: if (eusart1RxCount == 0)
  7673  003470  0100               	movlb	0	; () banked
  7674  003472  51E3               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  7675  003474  A4D8               	btfss	status,2,c
  7676  003476  D002               	goto	l853
  7677                           
  7678                           ; BSR set to: 0
  7679                           ;eusart1.c: 120: {
  7680                           ;eusart1.c: 121: return readValue;
  7681  003478  5019               	movf	EUSART1_Read@readValue,w,c
  7682                           
  7683                           ; BSR set to: 0
  7684  00347A  0012               	return	
  7685  00347C                     l853:
  7686                           
  7687                           ; BSR set to: 0
  7688                           ;eusart1.c: 122: }
  7689                           ;eusart1.c: 124: readValue = eusart1RxBuffer[eusart1RxTail++];
  7690                           
  7691                           ; BSR set to: 0
  7692  00347C  5037               	movf	_eusart1RxTail,w,c	;volatile
  7693  00347E  0D01               	mullw	1
  7694  003480  0E46               	movlw	low _eusart1RxBuffer
  7695  003482  24F3               	addwf	prodl,w,c
  7696  003484  6ED9               	movwf	fsr2l,c
  7697  003486  0E01               	movlw	high _eusart1RxBuffer
  7698  003488  20F4               	addwfc	prodh,w,c
  7699  00348A  6EDA               	movwf	fsr2h,c
  7700  00348C  50DF               	movf	indf2,w,c
  7701  00348E  6E18               	movwf	??_EUSART1_Read& (0+255),c
  7702  003490  5018               	movf	??_EUSART1_Read,w,c
  7703  003492  6E19               	movwf	EUSART1_Read@readValue,c
  7704  003494  6A1A               	clrf	EUSART1_Read@readValue+1,c
  7705                           
  7706                           ; BSR set to: 0
  7707  003496  2A37               	incf	_eusart1RxTail,f,c	;volatile
  7708                           
  7709                           ; BSR set to: 0
  7710                           ;eusart1.c: 125: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
  7711  003498  0E27               	movlw	39
  7712  00349A  6437               	cpfsgt	_eusart1RxTail,c	;volatile
  7713  00349C  D002               	goto	l855
  7714                           
  7715                           ; BSR set to: 0
  7716                           ;eusart1.c: 126: {
  7717                           ;eusart1.c: 127: eusart1RxTail = 0;
  7718  00349E  0E00               	movlw	0
  7719  0034A0  6E37               	movwf	_eusart1RxTail,c	;volatile
  7720  0034A2                     l855:
  7721                           
  7722                           ; BSR set to: 0
  7723                           ;eusart1.c: 128: }
  7724                           ;eusart1.c: 129: PIE1bits.RC1IE = 0;
  7725                           
  7726                           ; BSR set to: 0
  7727  0034A2  9A9D               	bcf	3997,5,c	;volatile
  7728                           
  7729                           ; BSR set to: 0
  7730                           ;eusart1.c: 130: eusart1RxCount--;
  7731  0034A4  07E3               	decf	_eusart1RxCount& (0+255),f,b	;volatile
  7732                           
  7733                           ; BSR set to: 0
  7734                           ;eusart1.c: 131: PIE1bits.RC1IE = 1;
  7735  0034A6  8A9D               	bsf	3997,5,c	;volatile
  7736                           
  7737                           ; BSR set to: 0
  7738                           ;eusart1.c: 133: return readValue;
  7739  0034A8  5019               	movf	EUSART1_Read@readValue,w,c
  7740  0034AA  0012               	return	
  7741  0034AC                     __end_of_EUSART1_Read:
  7742                           	opt stack 0
  7743                           tosu	equ	0xFFF
  7744                           tosh	equ	0xFFE
  7745                           tosl	equ	0xFFD
  7746                           pclath	equ	0xFFA
  7747                           tblptru	equ	0xFF8
  7748                           tblptrh	equ	0xFF7
  7749                           tblptrl	equ	0xFF6
  7750                           tablat	equ	0xFF5
  7751                           prodh	equ	0xFF4
  7752                           prodl	equ	0xFF3
  7753                           intcon	equ	0xFF2
  7754                           postinc0	equ	0xFEE
  7755                           plusw0	equ	0xFEB
  7756                           wreg	equ	0xFE8
  7757                           indf1	equ	0xFE7
  7758                           postinc1	equ	0xFE6
  7759                           postdec1	equ	0xFE5
  7760                           fsr1h	equ	0xFE2
  7761                           fsr1l	equ	0xFE1
  7762                           indf2	equ	0xFDF
  7763                           postinc2	equ	0xFDE
  7764                           postdec2	equ	0xFDD
  7765                           plusw2	equ	0xFDB
  7766                           fsr2h	equ	0xFDA
  7767                           fsr2l	equ	0xFD9
  7768                           status	equ	0xFD8
  7769                           
  7770 ;; *************** function _keepAliveSignalUart *****************
  7771 ;; Defined at:
  7772 ;;		line 79 in file "SystemStatus.c"
  7773 ;; Parameters:    Size  Location     Type
  7774 ;;		None
  7775 ;; Auto vars:     Size  Location     Type
  7776 ;;		None
  7777 ;; Return value:  Size  Location     Type
  7778 ;;                  1    wreg      void 
  7779 ;; Registers used:
  7780 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7781 ;; Tracked objects:
  7782 ;;		On entry : 0/0
  7783 ;;		On exit  : 0/0
  7784 ;;		Unchanged: 0/0
  7785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7786 ;;      Params:         0       0       0       0       0       0       0
  7787 ;;      Locals:         0       0       0       0       0       0       0
  7788 ;;      Temps:          0       0       0       0       0       0       0
  7789 ;;      Totals:         0       0       0       0       0       0       0
  7790 ;;Total ram usage:        0 bytes
  7791 ;; Hardware stack levels used:    1
  7792 ;; Hardware stack levels required when called:    6
  7793 ;; This function calls:
  7794 ;;		_SendAckMessage
  7795 ;; This function is called by:
  7796 ;;		_main
  7797 ;; This function uses a non-reentrant model
  7798 ;;
  7799                           
  7800                           	psect	text37
  7801  003BE0                     __ptext37:
  7802                           	opt stack 0
  7803  003BE0                     _keepAliveSignalUart:
  7804                           	opt stack 24
  7805                           
  7806                           ;SystemStatus.c: 81: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_KEEP_A
      +                          LIVE);
  7807                           
  7808                           ; BSR set to: 0
  7809                           ;incstack = 0
  7810  003BE0  0E15               	movlw	21
  7811  003BE2  6E24               	movwf	SendAckMessage@inRequest,c
  7812  003BE4  0E01               	movlw	1
  7813  003BE6  EC7A  F019         	call	_SendAckMessage
  7814  003BEA  0012               	return		;funcret
  7815  003BEC                     __end_of_keepAliveSignalUart:
  7816                           	opt stack 0
  7817                           tosu	equ	0xFFF
  7818                           tosh	equ	0xFFE
  7819                           tosl	equ	0xFFD
  7820                           pclath	equ	0xFFA
  7821                           tblptru	equ	0xFF8
  7822                           tblptrh	equ	0xFF7
  7823                           tblptrl	equ	0xFF6
  7824                           tablat	equ	0xFF5
  7825                           prodh	equ	0xFF4
  7826                           prodl	equ	0xFF3
  7827                           intcon	equ	0xFF2
  7828                           postinc0	equ	0xFEE
  7829                           plusw0	equ	0xFEB
  7830                           wreg	equ	0xFE8
  7831                           indf1	equ	0xFE7
  7832                           postinc1	equ	0xFE6
  7833                           postdec1	equ	0xFE5
  7834                           fsr1h	equ	0xFE2
  7835                           fsr1l	equ	0xFE1
  7836                           indf2	equ	0xFDF
  7837                           postinc2	equ	0xFDE
  7838                           postdec2	equ	0xFDD
  7839                           plusw2	equ	0xFDB
  7840                           fsr2h	equ	0xFDA
  7841                           fsr2l	equ	0xFD9
  7842                           status	equ	0xFD8
  7843                           
  7844 ;; *************** function _keepAliveSignalLed *****************
  7845 ;; Defined at:
  7846 ;;		line 35 in file "LedsApp.c"
  7847 ;; Parameters:    Size  Location     Type
  7848 ;;		None
  7849 ;; Auto vars:     Size  Location     Type
  7850 ;;		None
  7851 ;; Return value:  Size  Location     Type
  7852 ;;                  1    wreg      void 
  7853 ;; Registers used:
  7854 ;;		wreg, status,2, status,0
  7855 ;; Tracked objects:
  7856 ;;		On entry : 0/0
  7857 ;;		On exit  : 0/0
  7858 ;;		Unchanged: 0/0
  7859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7860 ;;      Params:         0       0       0       0       0       0       0
  7861 ;;      Locals:         0       0       0       0       0       0       0
  7862 ;;      Temps:          1       0       0       0       0       0       0
  7863 ;;      Totals:         1       0       0       0       0       0       0
  7864 ;;Total ram usage:        1 bytes
  7865 ;; Hardware stack levels used:    1
  7866 ;; Hardware stack levels required when called:    3
  7867 ;; This function calls:
  7868 ;;		Nothing
  7869 ;; This function is called by:
  7870 ;;		_main
  7871 ;; This function uses a non-reentrant model
  7872 ;;
  7873                           
  7874                           	psect	text38
  7875  003AC4                     __ptext38:
  7876                           	opt stack 0
  7877  003AC4                     _keepAliveSignalLed:
  7878                           	opt stack 27
  7879                           
  7880                           ;LedsApp.c: 37: LATCbits.LATC0 = !LATCbits.LATC0;
  7881                           
  7882                           ;incstack = 0
  7883  003AC4  B08B               	btfsc	3979,0,c	;volatile
  7884  003AC6  D003               	goto	u5720
  7885  003AC8  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  7886  003ACA  2A18               	incf	??_keepAliveSignalLed& (0+255),f,c
  7887  003ACC  D001               	goto	u5738
  7888  003ACE                     u5720:
  7889  003ACE  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  7890  003AD0                     u5738:
  7891  003AD0  508B               	movf	3979,w,c	;volatile
  7892  003AD2  1818               	xorwf	??_keepAliveSignalLed,w,c
  7893  003AD4  0BFE               	andlw	-2
  7894  003AD6  1818               	xorwf	??_keepAliveSignalLed,w,c
  7895  003AD8  6E8B               	movwf	3979,c	;volatile
  7896  003ADA  0012               	return		;funcret
  7897  003ADC                     __end_of_keepAliveSignalLed:
  7898                           	opt stack 0
  7899                           tosu	equ	0xFFF
  7900                           tosh	equ	0xFFE
  7901                           tosl	equ	0xFFD
  7902                           pclath	equ	0xFFA
  7903                           tblptru	equ	0xFF8
  7904                           tblptrh	equ	0xFF7
  7905                           tblptrl	equ	0xFF6
  7906                           tablat	equ	0xFF5
  7907                           prodh	equ	0xFF4
  7908                           prodl	equ	0xFF3
  7909                           intcon	equ	0xFF2
  7910                           postinc0	equ	0xFEE
  7911                           plusw0	equ	0xFEB
  7912                           wreg	equ	0xFE8
  7913                           indf1	equ	0xFE7
  7914                           postinc1	equ	0xFE6
  7915                           postdec1	equ	0xFE5
  7916                           fsr1h	equ	0xFE2
  7917                           fsr1l	equ	0xFE1
  7918                           indf2	equ	0xFDF
  7919                           postinc2	equ	0xFDE
  7920                           postdec2	equ	0xFDD
  7921                           plusw2	equ	0xFDB
  7922                           fsr2h	equ	0xFDA
  7923                           fsr2l	equ	0xFD9
  7924                           status	equ	0xFD8
  7925                           
  7926 ;; *************** function _SetMcuSystem *****************
  7927 ;; Defined at:
  7928 ;;		line 11 in file "SystemSettings.c"
  7929 ;; Parameters:    Size  Location     Type
  7930 ;;		None
  7931 ;; Auto vars:     Size  Location     Type
  7932 ;;		None
  7933 ;; Return value:  Size  Location     Type
  7934 ;;                  1    wreg      void 
  7935 ;; Registers used:
  7936 ;;		wreg, status,2, status,0, cstack
  7937 ;; Tracked objects:
  7938 ;;		On entry : 0/0
  7939 ;;		On exit  : 0/0
  7940 ;;		Unchanged: 0/0
  7941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7942 ;;      Params:         0       0       0       0       0       0       0
  7943 ;;      Locals:         0       0       0       0       0       0       0
  7944 ;;      Temps:          0       0       0       0       0       0       0
  7945 ;;      Totals:         0       0       0       0       0       0       0
  7946 ;;Total ram usage:        0 bytes
  7947 ;; Hardware stack levels used:    1
  7948 ;; Hardware stack levels required when called:    6
  7949 ;; This function calls:
  7950 ;;		_SYSTEM_Initialize
  7951 ;; This function is called by:
  7952 ;;		_main
  7953 ;; This function uses a non-reentrant model
  7954 ;;
  7955                           
  7956                           	psect	text39
  7957  003BF8                     __ptext39:
  7958                           	opt stack 0
  7959  003BF8                     _SetMcuSystem:
  7960                           	opt stack 24
  7961                           
  7962                           ;SystemSettings.c: 14: SYSTEM_Initialize();
  7963                           
  7964                           ;incstack = 0
  7965  003BF8  EC55  F01D         	call	_SYSTEM_Initialize	;wreg free
  7966                           
  7967                           ;SystemSettings.c: 21: (INTCONbits.GIE = 1);
  7968  003BFC  8EF2               	bsf	intcon,7,c	;volatile
  7969                           
  7970                           ;SystemSettings.c: 27: (INTCONbits.PEIE = 1);
  7971  003BFE  8CF2               	bsf	intcon,6,c	;volatile
  7972  003C00  0012               	return		;funcret
  7973  003C02                     __end_of_SetMcuSystem:
  7974                           	opt stack 0
  7975                           tosu	equ	0xFFF
  7976                           tosh	equ	0xFFE
  7977                           tosl	equ	0xFFD
  7978                           pclath	equ	0xFFA
  7979                           tblptru	equ	0xFF8
  7980                           tblptrh	equ	0xFF7
  7981                           tblptrl	equ	0xFF6
  7982                           tablat	equ	0xFF5
  7983                           prodh	equ	0xFF4
  7984                           prodl	equ	0xFF3
  7985                           intcon	equ	0xFF2
  7986                           postinc0	equ	0xFEE
  7987                           plusw0	equ	0xFEB
  7988                           wreg	equ	0xFE8
  7989                           indf1	equ	0xFE7
  7990                           postinc1	equ	0xFE6
  7991                           postdec1	equ	0xFE5
  7992                           fsr1h	equ	0xFE2
  7993                           fsr1l	equ	0xFE1
  7994                           indf2	equ	0xFDF
  7995                           postinc2	equ	0xFDE
  7996                           postdec2	equ	0xFDD
  7997                           plusw2	equ	0xFDB
  7998                           fsr2h	equ	0xFDA
  7999                           fsr2l	equ	0xFD9
  8000                           status	equ	0xFD8
  8001                           
  8002 ;; *************** function _SYSTEM_Initialize *****************
  8003 ;; Defined at:
  8004 ;;		line 112 in file "mcc_generated_files/mcc.c"
  8005 ;; Parameters:    Size  Location     Type
  8006 ;;		None
  8007 ;; Auto vars:     Size  Location     Type
  8008 ;;		None
  8009 ;; Return value:  Size  Location     Type
  8010 ;;                  1    wreg      void 
  8011 ;; Registers used:
  8012 ;;		wreg, status,2, status,0, cstack
  8013 ;; Tracked objects:
  8014 ;;		On entry : 0/0
  8015 ;;		On exit  : 0/0
  8016 ;;		Unchanged: 0/0
  8017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8018 ;;      Params:         0       0       0       0       0       0       0
  8019 ;;      Locals:         0       0       0       0       0       0       0
  8020 ;;      Temps:          0       0       0       0       0       0       0
  8021 ;;      Totals:         0       0       0       0       0       0       0
  8022 ;;Total ram usage:        0 bytes
  8023 ;; Hardware stack levels used:    1
  8024 ;; Hardware stack levels required when called:    5
  8025 ;; This function calls:
  8026 ;;		_ADC_Initialize
  8027 ;;		_EUSART1_Initialize
  8028 ;;		_INTERRUPT_Initialize
  8029 ;;		_OSCILLATOR_Initialize
  8030 ;;		_PIN_MANAGER_Initialize
  8031 ;;		_TMR0_Initialize
  8032 ;; This function is called by:
  8033 ;;		_SetMcuSystem
  8034 ;; This function uses a non-reentrant model
  8035 ;;
  8036                           
  8037                           	psect	text40
  8038  003AAA                     __ptext40:
  8039                           	opt stack 0
  8040  003AAA                     _SYSTEM_Initialize:
  8041                           	opt stack 24
  8042                           
  8043                           ;mcc.c: 114: INTERRUPT_Initialize();
  8044                           
  8045                           ;incstack = 0
  8046  003AAA  EC10  F01E         	call	_INTERRUPT_Initialize	;wreg free
  8047                           
  8048                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  8049  003AAE  ECEE  F019         	call	_PIN_MANAGER_Initialize	;wreg free
  8050                           
  8051                           ;mcc.c: 116: OSCILLATOR_Initialize();
  8052  003AB2  ECCA  F01D         	call	_OSCILLATOR_Initialize	;wreg free
  8053                           
  8054                           ;mcc.c: 117: ADC_Initialize();
  8055  003AB6  EC6E  F01D         	call	_ADC_Initialize	;wreg free
  8056                           
  8057                           ;mcc.c: 118: TMR0_Initialize();
  8058  003ABA  ECBA  F01B         	call	_TMR0_Initialize	;wreg free
  8059                           
  8060                           ;mcc.c: 119: EUSART1_Initialize();
  8061  003ABE  EC30  F01B         	call	_EUSART1_Initialize	;wreg free
  8062  003AC2  0012               	return		;funcret
  8063  003AC4                     __end_of_SYSTEM_Initialize:
  8064                           	opt stack 0
  8065                           tosu	equ	0xFFF
  8066                           tosh	equ	0xFFE
  8067                           tosl	equ	0xFFD
  8068                           pclath	equ	0xFFA
  8069                           tblptru	equ	0xFF8
  8070                           tblptrh	equ	0xFF7
  8071                           tblptrl	equ	0xFF6
  8072                           tablat	equ	0xFF5
  8073                           prodh	equ	0xFF4
  8074                           prodl	equ	0xFF3
  8075                           intcon	equ	0xFF2
  8076                           postinc0	equ	0xFEE
  8077                           plusw0	equ	0xFEB
  8078                           wreg	equ	0xFE8
  8079                           indf1	equ	0xFE7
  8080                           postinc1	equ	0xFE6
  8081                           postdec1	equ	0xFE5
  8082                           fsr1h	equ	0xFE2
  8083                           fsr1l	equ	0xFE1
  8084                           indf2	equ	0xFDF
  8085                           postinc2	equ	0xFDE
  8086                           postdec2	equ	0xFDD
  8087                           plusw2	equ	0xFDB
  8088                           fsr2h	equ	0xFDA
  8089                           fsr2l	equ	0xFD9
  8090                           status	equ	0xFD8
  8091                           
  8092 ;; *************** function _TMR0_Initialize *****************
  8093 ;; Defined at:
  8094 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  8095 ;; Parameters:    Size  Location     Type
  8096 ;;		None
  8097 ;; Auto vars:     Size  Location     Type
  8098 ;;		None
  8099 ;; Return value:  Size  Location     Type
  8100 ;;                  1    wreg      void 
  8101 ;; Registers used:
  8102 ;;		wreg, status,2, status,0, cstack
  8103 ;; Tracked objects:
  8104 ;;		On entry : 0/0
  8105 ;;		On exit  : 0/0
  8106 ;;		Unchanged: 0/0
  8107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8108 ;;      Params:         0       0       0       0       0       0       0
  8109 ;;      Locals:         0       0       0       0       0       0       0
  8110 ;;      Temps:          2       0       0       0       0       0       0
  8111 ;;      Totals:         2       0       0       0       0       0       0
  8112 ;;Total ram usage:        2 bytes
  8113 ;; Hardware stack levels used:    1
  8114 ;; Hardware stack levels required when called:    4
  8115 ;; This function calls:
  8116 ;;		_TMR0_SetInterruptHandler
  8117 ;; This function is called by:
  8118 ;;		_SYSTEM_Initialize
  8119 ;; This function uses a non-reentrant model
  8120 ;;
  8121                           
  8122                           	psect	text41
  8123  003774                     __ptext41:
  8124                           	opt stack 0
  8125  003774                     _TMR0_Initialize:
  8126                           	opt stack 24
  8127                           
  8128                           ;tmr0.c: 71: TMR0H = 0x3C;
  8129                           
  8130                           ;incstack = 0
  8131  003774  0E3C               	movlw	60
  8132  003776  6ED7               	movwf	4055,c	;volatile
  8133                           
  8134                           ;tmr0.c: 74: TMR0L = 0xAF;
  8135  003778  0EAF               	movlw	175
  8136  00377A  6ED6               	movwf	4054,c	;volatile
  8137                           
  8138                           ;tmr0.c: 78: timer0ReloadVal = (TMR0H << 8) | TMR0L;
  8139  00377C  50D6               	movf	4054,w,c	;volatile
  8140  00377E  CFD7 F01A          	movff	4055,??_TMR0_Initialize	;volatile
  8141  003782  6A1B               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  8142  003784  C01A  F01B         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  8143  003788  6A1A               	clrf	??_TMR0_Initialize,c
  8144  00378A  101A               	iorwf	??_TMR0_Initialize,w,c
  8145  00378C  6E46               	movwf	_timer0ReloadVal,c	;volatile
  8146  00378E  501B               	movf	??_TMR0_Initialize+1,w,c
  8147  003790  6E47               	movwf	_timer0ReloadVal+1,c	;volatile
  8148                           
  8149                           ;tmr0.c: 81: INTCONbits.TMR0IF = 0;
  8150  003792  94F2               	bcf	intcon,2,c	;volatile
  8151                           
  8152                           ;tmr0.c: 84: INTCONbits.TMR0IE = 1;
  8153  003794  8AF2               	bsf	intcon,5,c	;volatile
  8154                           
  8155                           ;tmr0.c: 87: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  8156  003796  0E00               	movlw	0
  8157  003798  6E18               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  8158  00379A  0E00               	movlw	0
  8159  00379C  6E19               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  8160  00379E  EC01  F01E         	call	_TMR0_SetInterruptHandler	;wreg free
  8161                           
  8162                           ;tmr0.c: 90: T0CON = 0x90;
  8163  0037A2  0E90               	movlw	144
  8164  0037A4  6ED5               	movwf	4053,c	;volatile
  8165  0037A6  0012               	return		;funcret
  8166  0037A8                     __end_of_TMR0_Initialize:
  8167                           	opt stack 0
  8168                           tosu	equ	0xFFF
  8169                           tosh	equ	0xFFE
  8170                           tosl	equ	0xFFD
  8171                           pclath	equ	0xFFA
  8172                           tblptru	equ	0xFF8
  8173                           tblptrh	equ	0xFF7
  8174                           tblptrl	equ	0xFF6
  8175                           tablat	equ	0xFF5
  8176                           prodh	equ	0xFF4
  8177                           prodl	equ	0xFF3
  8178                           intcon	equ	0xFF2
  8179                           postinc0	equ	0xFEE
  8180                           plusw0	equ	0xFEB
  8181                           wreg	equ	0xFE8
  8182                           indf1	equ	0xFE7
  8183                           postinc1	equ	0xFE6
  8184                           postdec1	equ	0xFE5
  8185                           fsr1h	equ	0xFE2
  8186                           fsr1l	equ	0xFE1
  8187                           indf2	equ	0xFDF
  8188                           postinc2	equ	0xFDE
  8189                           postdec2	equ	0xFDD
  8190                           plusw2	equ	0xFDB
  8191                           fsr2h	equ	0xFDA
  8192                           fsr2l	equ	0xFD9
  8193                           status	equ	0xFD8
  8194                           
  8195 ;; *************** function _TMR0_SetInterruptHandler *****************
  8196 ;; Defined at:
  8197 ;;		line 177 in file "mcc_generated_files/tmr0.c"
  8198 ;; Parameters:    Size  Location     Type
  8199 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  8200 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  8201 ;; Auto vars:     Size  Location     Type
  8202 ;;		None
  8203 ;; Return value:  Size  Location     Type
  8204 ;;                  1    wreg      void 
  8205 ;; Registers used:
  8206 ;;		wreg, status,2, status,0
  8207 ;; Tracked objects:
  8208 ;;		On entry : 0/0
  8209 ;;		On exit  : 0/0
  8210 ;;		Unchanged: 0/0
  8211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8212 ;;      Params:         2       0       0       0       0       0       0
  8213 ;;      Locals:         0       0       0       0       0       0       0
  8214 ;;      Temps:          0       0       0       0       0       0       0
  8215 ;;      Totals:         2       0       0       0       0       0       0
  8216 ;;Total ram usage:        2 bytes
  8217 ;; Hardware stack levels used:    1
  8218 ;; Hardware stack levels required when called:    3
  8219 ;; This function calls:
  8220 ;;		Nothing
  8221 ;; This function is called by:
  8222 ;;		_TMR0_Initialize
  8223 ;; This function uses a non-reentrant model
  8224 ;;
  8225                           
  8226                           	psect	text42
  8227  003C02                     __ptext42:
  8228                           	opt stack 0
  8229  003C02                     _TMR0_SetInterruptHandler:
  8230                           	opt stack 24
  8231                           
  8232                           ;tmr0.c: 178: TMR0_InterruptHandler = InterruptHandler;
  8233                           
  8234                           ;incstack = 0
  8235  003C02  C018  F1EF         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  8236  003C06  C019  F1F0         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  8237  003C0A  0012               	return		;funcret
  8238  003C0C                     __end_of_TMR0_SetInterruptHandler:
  8239                           	opt stack 0
  8240                           tosu	equ	0xFFF
  8241                           tosh	equ	0xFFE
  8242                           tosl	equ	0xFFD
  8243                           pclath	equ	0xFFA
  8244                           tblptru	equ	0xFF8
  8245                           tblptrh	equ	0xFF7
  8246                           tblptrl	equ	0xFF6
  8247                           tablat	equ	0xFF5
  8248                           prodh	equ	0xFF4
  8249                           prodl	equ	0xFF3
  8250                           intcon	equ	0xFF2
  8251                           postinc0	equ	0xFEE
  8252                           plusw0	equ	0xFEB
  8253                           wreg	equ	0xFE8
  8254                           indf1	equ	0xFE7
  8255                           postinc1	equ	0xFE6
  8256                           postdec1	equ	0xFE5
  8257                           fsr1h	equ	0xFE2
  8258                           fsr1l	equ	0xFE1
  8259                           indf2	equ	0xFDF
  8260                           postinc2	equ	0xFDE
  8261                           postdec2	equ	0xFDD
  8262                           plusw2	equ	0xFDB
  8263                           fsr2h	equ	0xFDA
  8264                           fsr2l	equ	0xFD9
  8265                           status	equ	0xFD8
  8266                           
  8267 ;; *************** function _PIN_MANAGER_Initialize *****************
  8268 ;; Defined at:
  8269 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  8270 ;; Parameters:    Size  Location     Type
  8271 ;;		None
  8272 ;; Auto vars:     Size  Location     Type
  8273 ;;		None
  8274 ;; Return value:  Size  Location     Type
  8275 ;;                  1    wreg      void 
  8276 ;; Registers used:
  8277 ;;		wreg, status,2
  8278 ;; Tracked objects:
  8279 ;;		On entry : 0/0
  8280 ;;		On exit  : 0/0
  8281 ;;		Unchanged: 0/0
  8282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8283 ;;      Params:         0       0       0       0       0       0       0
  8284 ;;      Locals:         0       0       0       0       0       0       0
  8285 ;;      Temps:          0       0       0       0       0       0       0
  8286 ;;      Totals:         0       0       0       0       0       0       0
  8287 ;;Total ram usage:        0 bytes
  8288 ;; Hardware stack levels used:    1
  8289 ;; Hardware stack levels required when called:    3
  8290 ;; This function calls:
  8291 ;;		Nothing
  8292 ;; This function is called by:
  8293 ;;		_SYSTEM_Initialize
  8294 ;; This function uses a non-reentrant model
  8295 ;;
  8296                           
  8297                           	psect	text43
  8298  0033DC                     __ptext43:
  8299                           	opt stack 0
  8300  0033DC                     _PIN_MANAGER_Initialize:
  8301                           	opt stack 25
  8302                           
  8303                           ;pin_manager.c: 57: LATE = 0x00;
  8304                           
  8305                           ;incstack = 0
  8306  0033DC  0E00               	movlw	0
  8307  0033DE  6E8D               	movwf	3981,c	;volatile
  8308                           
  8309                           ;pin_manager.c: 58: LATD = 0x00;
  8310  0033E0  0E00               	movlw	0
  8311  0033E2  6E8C               	movwf	3980,c	;volatile
  8312                           
  8313                           ;pin_manager.c: 59: LATA = 0x06;
  8314  0033E4  0E06               	movlw	6
  8315  0033E6  6E89               	movwf	3977,c	;volatile
  8316                           
  8317                           ;pin_manager.c: 60: LATB = 0x00;
  8318  0033E8  0E00               	movlw	0
  8319  0033EA  6E8A               	movwf	3978,c	;volatile
  8320                           
  8321                           ;pin_manager.c: 61: LATC = 0x00;
  8322  0033EC  0E00               	movlw	0
  8323  0033EE  6E8B               	movwf	3979,c	;volatile
  8324                           
  8325                           ;pin_manager.c: 66: TRISE = 0x07;
  8326  0033F0  0E07               	movlw	7
  8327  0033F2  6E96               	movwf	3990,c	;volatile
  8328                           
  8329                           ;pin_manager.c: 67: TRISA = 0xE1;
  8330  0033F4  0EE1               	movlw	225
  8331  0033F6  6E92               	movwf	3986,c	;volatile
  8332                           
  8333                           ;pin_manager.c: 68: TRISB = 0xEF;
  8334  0033F8  0EEF               	movlw	239
  8335  0033FA  6E93               	movwf	3987,c	;volatile
  8336                           
  8337                           ;pin_manager.c: 69: TRISC = 0x80;
  8338  0033FC  0E80               	movlw	128
  8339  0033FE  6E94               	movwf	3988,c	;volatile
  8340                           
  8341                           ;pin_manager.c: 70: TRISD = 0xF2;
  8342  003400  0EF2               	movlw	242
  8343  003402  6E95               	movwf	3989,c	;volatile
  8344                           
  8345                           ;pin_manager.c: 75: ANSELC = 0x34;
  8346  003404  0E34               	movlw	52
  8347  003406  010F               	movlb	15	; () banked
  8348  003408  6F3A               	movwf	58,b	;volatile
  8349                           
  8350                           ;pin_manager.c: 76: ANSELB = 0x32;
  8351  00340A  0E32               	movlw	50
  8352  00340C  6F39               	movwf	57,b	;volatile
  8353                           
  8354                           ;pin_manager.c: 77: ANSELD = 0xE4;
  8355  00340E  0EE4               	movlw	228
  8356  003410  6F3B               	movwf	59,b	;volatile
  8357                           
  8358                           ;pin_manager.c: 78: ANSELE = 0x07;
  8359  003412  0E07               	movlw	7
  8360  003414  6F3C               	movwf	60,b	;volatile
  8361                           
  8362                           ;pin_manager.c: 79: ANSELA = 0x2F;
  8363  003416  0E2F               	movlw	47
  8364  003418  6F38               	movwf	56,b	;volatile
  8365                           
  8366                           ;pin_manager.c: 84: WPUB = 0xC3;
  8367  00341A  0EC3               	movlw	195
  8368  00341C  6E61               	movwf	3937,c	;volatile
  8369                           
  8370                           ; BSR set to: 15
  8371                           ;pin_manager.c: 85: INTCON2bits.nRBPU = 0;
  8372  00341E  9EF1               	bcf	intcon2,7,c	;volatile
  8373                           
  8374                           ; BSR set to: 15
  8375                           ;pin_manager.c: 92: INTCONbits.RBIE = 1;
  8376  003420  86F2               	bsf	intcon,3,c	;volatile
  8377                           
  8378                           ; BSR set to: 15
  8379  003422  0012               	return		;funcret
  8380  003424                     __end_of_PIN_MANAGER_Initialize:
  8381                           	opt stack 0
  8382                           tosu	equ	0xFFF
  8383                           tosh	equ	0xFFE
  8384                           tosl	equ	0xFFD
  8385                           pclath	equ	0xFFA
  8386                           tblptru	equ	0xFF8
  8387                           tblptrh	equ	0xFF7
  8388                           tblptrl	equ	0xFF6
  8389                           tablat	equ	0xFF5
  8390                           prodh	equ	0xFF4
  8391                           prodl	equ	0xFF3
  8392                           intcon	equ	0xFF2
  8393                           intcon2	equ	0xFF1
  8394                           postinc0	equ	0xFEE
  8395                           plusw0	equ	0xFEB
  8396                           wreg	equ	0xFE8
  8397                           indf1	equ	0xFE7
  8398                           postinc1	equ	0xFE6
  8399                           postdec1	equ	0xFE5
  8400                           fsr1h	equ	0xFE2
  8401                           fsr1l	equ	0xFE1
  8402                           indf2	equ	0xFDF
  8403                           postinc2	equ	0xFDE
  8404                           postdec2	equ	0xFDD
  8405                           plusw2	equ	0xFDB
  8406                           fsr2h	equ	0xFDA
  8407                           fsr2l	equ	0xFD9
  8408                           status	equ	0xFD8
  8409                           
  8410 ;; *************** function _OSCILLATOR_Initialize *****************
  8411 ;; Defined at:
  8412 ;;		line 122 in file "mcc_generated_files/mcc.c"
  8413 ;; Parameters:    Size  Location     Type
  8414 ;;		None
  8415 ;; Auto vars:     Size  Location     Type
  8416 ;;		None
  8417 ;; Return value:  Size  Location     Type
  8418 ;;                  1    wreg      void 
  8419 ;; Registers used:
  8420 ;;		wreg, status,2
  8421 ;; Tracked objects:
  8422 ;;		On entry : 0/0
  8423 ;;		On exit  : 0/0
  8424 ;;		Unchanged: 0/0
  8425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8426 ;;      Params:         0       0       0       0       0       0       0
  8427 ;;      Locals:         0       0       0       0       0       0       0
  8428 ;;      Temps:          0       0       0       0       0       0       0
  8429 ;;      Totals:         0       0       0       0       0       0       0
  8430 ;;Total ram usage:        0 bytes
  8431 ;; Hardware stack levels used:    1
  8432 ;; Hardware stack levels required when called:    3
  8433 ;; This function calls:
  8434 ;;		Nothing
  8435 ;; This function is called by:
  8436 ;;		_SYSTEM_Initialize
  8437 ;; This function uses a non-reentrant model
  8438 ;;
  8439                           
  8440                           	psect	text44
  8441  003B94                     __ptext44:
  8442                           	opt stack 0
  8443  003B94                     _OSCILLATOR_Initialize:
  8444                           	opt stack 25
  8445                           
  8446                           ;mcc.c: 125: OSCCON = 0x60;
  8447                           
  8448                           ; BSR set to: 15
  8449                           ;incstack = 0
  8450  003B94  0E60               	movlw	96
  8451  003B96  6ED3               	movwf	4051,c	;volatile
  8452                           
  8453                           ;mcc.c: 127: OSCCON2 = 0x04;
  8454  003B98  0E04               	movlw	4
  8455  003B9A  6ED2               	movwf	4050,c	;volatile
  8456                           
  8457                           ;mcc.c: 129: OSCTUNE = 0x80;
  8458  003B9C  0E80               	movlw	128
  8459  003B9E  6E9B               	movwf	3995,c	;volatile
  8460  003BA0  0012               	return		;funcret
  8461  003BA2                     __end_of_OSCILLATOR_Initialize:
  8462                           	opt stack 0
  8463                           tosu	equ	0xFFF
  8464                           tosh	equ	0xFFE
  8465                           tosl	equ	0xFFD
  8466                           pclath	equ	0xFFA
  8467                           tblptru	equ	0xFF8
  8468                           tblptrh	equ	0xFF7
  8469                           tblptrl	equ	0xFF6
  8470                           tablat	equ	0xFF5
  8471                           prodh	equ	0xFF4
  8472                           prodl	equ	0xFF3
  8473                           intcon	equ	0xFF2
  8474                           intcon2	equ	0xFF1
  8475                           postinc0	equ	0xFEE
  8476                           plusw0	equ	0xFEB
  8477                           wreg	equ	0xFE8
  8478                           indf1	equ	0xFE7
  8479                           postinc1	equ	0xFE6
  8480                           postdec1	equ	0xFE5
  8481                           fsr1h	equ	0xFE2
  8482                           fsr1l	equ	0xFE1
  8483                           indf2	equ	0xFDF
  8484                           postinc2	equ	0xFDE
  8485                           postdec2	equ	0xFDD
  8486                           plusw2	equ	0xFDB
  8487                           fsr2h	equ	0xFDA
  8488                           fsr2l	equ	0xFD9
  8489                           status	equ	0xFD8
  8490                           
  8491 ;; *************** function _INTERRUPT_Initialize *****************
  8492 ;; Defined at:
  8493 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  8494 ;; Parameters:    Size  Location     Type
  8495 ;;		None
  8496 ;; Auto vars:     Size  Location     Type
  8497 ;;		None
  8498 ;; Return value:  Size  Location     Type
  8499 ;;                  1    wreg      void 
  8500 ;; Registers used:
  8501 ;;		None
  8502 ;; Tracked objects:
  8503 ;;		On entry : 0/0
  8504 ;;		On exit  : 0/0
  8505 ;;		Unchanged: 0/0
  8506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8507 ;;      Params:         0       0       0       0       0       0       0
  8508 ;;      Locals:         0       0       0       0       0       0       0
  8509 ;;      Temps:          0       0       0       0       0       0       0
  8510 ;;      Totals:         0       0       0       0       0       0       0
  8511 ;;Total ram usage:        0 bytes
  8512 ;; Hardware stack levels used:    1
  8513 ;; Hardware stack levels required when called:    3
  8514 ;; This function calls:
  8515 ;;		Nothing
  8516 ;; This function is called by:
  8517 ;;		_SYSTEM_Initialize
  8518 ;; This function uses a non-reentrant model
  8519 ;;
  8520                           
  8521                           	psect	text45
  8522  003C20                     __ptext45:
  8523                           	opt stack 0
  8524  003C20                     _INTERRUPT_Initialize:
  8525                           	opt stack 25
  8526                           
  8527                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  8528                           
  8529                           ;incstack = 0
  8530  003C20  9ED0               	bcf	4048,7,c	;volatile
  8531  003C22  0012               	return		;funcret
  8532  003C24                     __end_of_INTERRUPT_Initialize:
  8533                           	opt stack 0
  8534                           tosu	equ	0xFFF
  8535                           tosh	equ	0xFFE
  8536                           tosl	equ	0xFFD
  8537                           pclath	equ	0xFFA
  8538                           tblptru	equ	0xFF8
  8539                           tblptrh	equ	0xFF7
  8540                           tblptrl	equ	0xFF6
  8541                           tablat	equ	0xFF5
  8542                           prodh	equ	0xFF4
  8543                           prodl	equ	0xFF3
  8544                           intcon	equ	0xFF2
  8545                           intcon2	equ	0xFF1
  8546                           postinc0	equ	0xFEE
  8547                           plusw0	equ	0xFEB
  8548                           wreg	equ	0xFE8
  8549                           indf1	equ	0xFE7
  8550                           postinc1	equ	0xFE6
  8551                           postdec1	equ	0xFE5
  8552                           fsr1h	equ	0xFE2
  8553                           fsr1l	equ	0xFE1
  8554                           indf2	equ	0xFDF
  8555                           postinc2	equ	0xFDE
  8556                           postdec2	equ	0xFDD
  8557                           plusw2	equ	0xFDB
  8558                           fsr2h	equ	0xFDA
  8559                           fsr2l	equ	0xFD9
  8560                           status	equ	0xFD8
  8561                           
  8562 ;; *************** function _EUSART1_Initialize *****************
  8563 ;; Defined at:
  8564 ;;		line 74 in file "mcc_generated_files/eusart1.c"
  8565 ;; Parameters:    Size  Location     Type
  8566 ;;		None
  8567 ;; Auto vars:     Size  Location     Type
  8568 ;;		None
  8569 ;; Return value:  Size  Location     Type
  8570 ;;                  1    wreg      void 
  8571 ;; Registers used:
  8572 ;;		wreg, status,2
  8573 ;; Tracked objects:
  8574 ;;		On entry : 0/0
  8575 ;;		On exit  : 0/0
  8576 ;;		Unchanged: 0/0
  8577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8578 ;;      Params:         0       0       0       0       0       0       0
  8579 ;;      Locals:         0       0       0       0       0       0       0
  8580 ;;      Temps:          0       0       0       0       0       0       0
  8581 ;;      Totals:         0       0       0       0       0       0       0
  8582 ;;Total ram usage:        0 bytes
  8583 ;; Hardware stack levels used:    1
  8584 ;; Hardware stack levels required when called:    3
  8585 ;; This function calls:
  8586 ;;		Nothing
  8587 ;; This function is called by:
  8588 ;;		_SYSTEM_Initialize
  8589 ;; This function uses a non-reentrant model
  8590 ;;
  8591                           
  8592                           	psect	text46
  8593  003660                     __ptext46:
  8594                           	opt stack 0
  8595  003660                     _EUSART1_Initialize:
  8596                           	opt stack 25
  8597                           
  8598                           ;eusart1.c: 77: PIE1bits.RC1IE = 0;
  8599                           
  8600                           ;incstack = 0
  8601  003660  9A9D               	bcf	3997,5,c	;volatile
  8602                           
  8603                           ;eusart1.c: 78: PIE1bits.TX1IE = 0;
  8604  003662  989D               	bcf	3997,4,c	;volatile
  8605                           
  8606                           ;eusart1.c: 82: BAUDCON1 = 0x08;
  8607  003664  0E08               	movlw	8
  8608  003666  6EB8               	movwf	4024,c	;volatile
  8609                           
  8610                           ;eusart1.c: 85: RCSTA1 = 0x90;
  8611  003668  0E90               	movlw	144
  8612  00366A  6EAB               	movwf	4011,c	;volatile
  8613                           
  8614                           ;eusart1.c: 88: TXSTA1 = 0x24;
  8615  00366C  0E24               	movlw	36
  8616  00366E  6EAC               	movwf	4012,c	;volatile
  8617                           
  8618                           ;eusart1.c: 91: SPBRG1 = 0x10;
  8619  003670  0E10               	movlw	16
  8620  003672  6EAF               	movwf	4015,c	;volatile
  8621                           
  8622                           ;eusart1.c: 94: SPBRGH1 = 0x00;
  8623  003674  0E00               	movlw	0
  8624  003676  6EB0               	movwf	4016,c	;volatile
  8625                           
  8626                           ;eusart1.c: 98: eusart1TxHead = 0;
  8627  003678  0E00               	movlw	0
  8628  00367A  6E3A               	movwf	_eusart1TxHead,c	;volatile
  8629                           
  8630                           ;eusart1.c: 99: eusart1TxTail = 0;
  8631  00367C  0E00               	movlw	0
  8632  00367E  6E39               	movwf	_eusart1TxTail,c	;volatile
  8633                           
  8634                           ;eusart1.c: 100: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  8635  003680  0E46               	movlw	70
  8636  003682  0101               	movlb	1	; () banked
  8637  003684  6FF1               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
  8638                           
  8639                           ;eusart1.c: 102: eusart1RxHead = 0;
  8640  003686  0E00               	movlw	0
  8641  003688  6E38               	movwf	_eusart1RxHead,c	;volatile
  8642                           
  8643                           ;eusart1.c: 103: eusart1RxTail = 0;
  8644  00368A  0E00               	movlw	0
  8645  00368C  6E37               	movwf	_eusart1RxTail,c	;volatile
  8646                           
  8647                           ;eusart1.c: 104: eusart1RxCount = 0;
  8648  00368E  0E00               	movlw	0
  8649  003690  0100               	movlb	0	; () banked
  8650  003692  6FE3               	movwf	_eusart1RxCount& (0+255),b	;volatile
  8651                           
  8652                           ; BSR set to: 0
  8653                           ;eusart1.c: 107: PIE1bits.RC1IE = 1;
  8654  003694  8A9D               	bsf	3997,5,c	;volatile
  8655                           
  8656                           ; BSR set to: 0
  8657  003696  0012               	return		;funcret
  8658  003698                     __end_of_EUSART1_Initialize:
  8659                           	opt stack 0
  8660                           tosu	equ	0xFFF
  8661                           tosh	equ	0xFFE
  8662                           tosl	equ	0xFFD
  8663                           pclath	equ	0xFFA
  8664                           tblptru	equ	0xFF8
  8665                           tblptrh	equ	0xFF7
  8666                           tblptrl	equ	0xFF6
  8667                           tablat	equ	0xFF5
  8668                           prodh	equ	0xFF4
  8669                           prodl	equ	0xFF3
  8670                           intcon	equ	0xFF2
  8671                           intcon2	equ	0xFF1
  8672                           postinc0	equ	0xFEE
  8673                           plusw0	equ	0xFEB
  8674                           wreg	equ	0xFE8
  8675                           indf1	equ	0xFE7
  8676                           postinc1	equ	0xFE6
  8677                           postdec1	equ	0xFE5
  8678                           fsr1h	equ	0xFE2
  8679                           fsr1l	equ	0xFE1
  8680                           indf2	equ	0xFDF
  8681                           postinc2	equ	0xFDE
  8682                           postdec2	equ	0xFDD
  8683                           plusw2	equ	0xFDB
  8684                           fsr2h	equ	0xFDA
  8685                           fsr2l	equ	0xFD9
  8686                           status	equ	0xFD8
  8687                           
  8688 ;; *************** function _ADC_Initialize *****************
  8689 ;; Defined at:
  8690 ;;		line 58 in file "mcc_generated_files/adc.c"
  8691 ;; Parameters:    Size  Location     Type
  8692 ;;		None
  8693 ;; Auto vars:     Size  Location     Type
  8694 ;;		None
  8695 ;; Return value:  Size  Location     Type
  8696 ;;                  1    wreg      void 
  8697 ;; Registers used:
  8698 ;;		wreg, status,2
  8699 ;; Tracked objects:
  8700 ;;		On entry : 0/0
  8701 ;;		On exit  : 0/0
  8702 ;;		Unchanged: 0/0
  8703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8704 ;;      Params:         0       0       0       0       0       0       0
  8705 ;;      Locals:         0       0       0       0       0       0       0
  8706 ;;      Temps:          0       0       0       0       0       0       0
  8707 ;;      Totals:         0       0       0       0       0       0       0
  8708 ;;Total ram usage:        0 bytes
  8709 ;; Hardware stack levels used:    1
  8710 ;; Hardware stack levels required when called:    3
  8711 ;; This function calls:
  8712 ;;		Nothing
  8713 ;; This function is called by:
  8714 ;;		_SYSTEM_Initialize
  8715 ;; This function uses a non-reentrant model
  8716 ;;
  8717                           
  8718                           	psect	text47
  8719  003ADC                     __ptext47:
  8720                           	opt stack 0
  8721  003ADC                     _ADC_Initialize:
  8722                           	opt stack 25
  8723                           
  8724                           ;adc.c: 63: ADCON0 = 0x05;
  8725                           
  8726                           ; BSR set to: 0
  8727                           ;incstack = 0
  8728  003ADC  0E05               	movlw	5
  8729  003ADE  6EC2               	movwf	4034,c	;volatile
  8730                           
  8731                           ;adc.c: 66: ADCON1 = 0x00;
  8732  003AE0  0E00               	movlw	0
  8733  003AE2  6EC1               	movwf	4033,c	;volatile
  8734                           
  8735                           ;adc.c: 69: ADCON2 = 0x87;
  8736  003AE4  0E87               	movlw	135
  8737  003AE6  6EC0               	movwf	4032,c	;volatile
  8738                           
  8739                           ;adc.c: 72: ADRESL = 0x00;
  8740  003AE8  0E00               	movlw	0
  8741  003AEA  6EC3               	movwf	4035,c	;volatile
  8742                           
  8743                           ;adc.c: 75: ADRESH = 0x00;
  8744  003AEC  0E00               	movlw	0
  8745  003AEE  6EC4               	movwf	4036,c	;volatile
  8746  003AF0  0012               	return		;funcret
  8747  003AF2                     __end_of_ADC_Initialize:
  8748                           	opt stack 0
  8749                           tosu	equ	0xFFF
  8750                           tosh	equ	0xFFE
  8751                           tosl	equ	0xFFD
  8752                           pclath	equ	0xFFA
  8753                           tblptru	equ	0xFF8
  8754                           tblptrh	equ	0xFF7
  8755                           tblptrl	equ	0xFF6
  8756                           tablat	equ	0xFF5
  8757                           prodh	equ	0xFF4
  8758                           prodl	equ	0xFF3
  8759                           intcon	equ	0xFF2
  8760                           intcon2	equ	0xFF1
  8761                           postinc0	equ	0xFEE
  8762                           plusw0	equ	0xFEB
  8763                           wreg	equ	0xFE8
  8764                           indf1	equ	0xFE7
  8765                           postinc1	equ	0xFE6
  8766                           postdec1	equ	0xFE5
  8767                           fsr1h	equ	0xFE2
  8768                           fsr1l	equ	0xFE1
  8769                           indf2	equ	0xFDF
  8770                           postinc2	equ	0xFDE
  8771                           postdec2	equ	0xFDD
  8772                           plusw2	equ	0xFDB
  8773                           fsr2h	equ	0xFDA
  8774                           fsr2l	equ	0xFD9
  8775                           status	equ	0xFD8
  8776                           
  8777 ;; *************** function _SetMcuRunTime *****************
  8778 ;; Defined at:
  8779 ;;		line 43 in file "SystemStatus.c"
  8780 ;; Parameters:    Size  Location     Type
  8781 ;;		None
  8782 ;; Auto vars:     Size  Location     Type
  8783 ;;		None
  8784 ;; Return value:  Size  Location     Type
  8785 ;;                  1    wreg      void 
  8786 ;; Registers used:
  8787 ;;		wreg, status,2, status,0, cstack
  8788 ;; Tracked objects:
  8789 ;;		On entry : 0/0
  8790 ;;		On exit  : 0/0
  8791 ;;		Unchanged: 0/0
  8792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8793 ;;      Params:         0       0       0       0       0       0       0
  8794 ;;      Locals:         0       0       0       0       0       0       0
  8795 ;;      Temps:          0       0       0       0       0       0       0
  8796 ;;      Totals:         0       0       0       0       0       0       0
  8797 ;;Total ram usage:        0 bytes
  8798 ;; Hardware stack levels used:    1
  8799 ;; Hardware stack levels required when called:    4
  8800 ;; This function calls:
  8801 ;;		___llmod
  8802 ;; This function is called by:
  8803 ;;		_main
  8804 ;; This function uses a non-reentrant model
  8805 ;;
  8806                           
  8807                           	psect	text48
  8808  0034AC                     __ptext48:
  8809                           	opt stack 0
  8810  0034AC                     _SetMcuRunTime:
  8811                           	opt stack 26
  8812                           
  8813                           ;SystemStatus.c: 45: mcuRunTimeIn5SecTicks++;
  8814                           
  8815                           ;incstack = 0
  8816  0034AC  0E01               	movlw	1
  8817  0034AE  0101               	movlb	1	; () banked
  8818  0034B0  276E               	addwf	_mcuRunTimeIn5SecTicks& (0+255),f,b
  8819  0034B2  0E00               	movlw	0
  8820  0034B4  236F               	addwfc	(_mcuRunTimeIn5SecTicks+1)& (0+255),f,b
  8821  0034B6  2370               	addwfc	(_mcuRunTimeIn5SecTicks+2)& (0+255),f,b
  8822  0034B8  2371               	addwfc	(_mcuRunTimeIn5SecTicks+3)& (0+255),f,b
  8823                           
  8824                           ; BSR set to: 1
  8825                           ;SystemStatus.c: 46: mcuRunTimeIn5SecTicks %= (17280);
  8826  0034BA  C16E  F018         	movff	_mcuRunTimeIn5SecTicks,___llmod@dividend
  8827  0034BE  C16F  F019         	movff	_mcuRunTimeIn5SecTicks+1,___llmod@dividend+1
  8828  0034C2  C170  F01A         	movff	_mcuRunTimeIn5SecTicks+2,___llmod@dividend+2
  8829  0034C6  C171  F01B         	movff	_mcuRunTimeIn5SecTicks+3,___llmod@dividend+3
  8830  0034CA  0E80               	movlw	128
  8831  0034CC  6E1C               	movwf	___llmod@divisor,c
  8832  0034CE  0E43               	movlw	67
  8833  0034D0  6E1D               	movwf	___llmod@divisor+1,c
  8834  0034D2  0E00               	movlw	0
  8835  0034D4  6E1E               	movwf	___llmod@divisor+2,c
  8836  0034D6  0E00               	movlw	0
  8837  0034D8  6E1F               	movwf	___llmod@divisor+3,c
  8838  0034DA  EC5A  F017         	call	___llmod	;wreg free
  8839  0034DE  C018  F16E         	movff	?___llmod,_mcuRunTimeIn5SecTicks
  8840  0034E2  C019  F16F         	movff	?___llmod+1,_mcuRunTimeIn5SecTicks+1
  8841  0034E6  C01A  F170         	movff	?___llmod+2,_mcuRunTimeIn5SecTicks+2
  8842  0034EA  C01B  F171         	movff	?___llmod+3,_mcuRunTimeIn5SecTicks+3
  8843  0034EE  0012               	return		;funcret
  8844  0034F0                     __end_of_SetMcuRunTime:
  8845                           	opt stack 0
  8846                           tosu	equ	0xFFF
  8847                           tosh	equ	0xFFE
  8848                           tosl	equ	0xFFD
  8849                           pclath	equ	0xFFA
  8850                           tblptru	equ	0xFF8
  8851                           tblptrh	equ	0xFF7
  8852                           tblptrl	equ	0xFF6
  8853                           tablat	equ	0xFF5
  8854                           prodh	equ	0xFF4
  8855                           prodl	equ	0xFF3
  8856                           intcon	equ	0xFF2
  8857                           intcon2	equ	0xFF1
  8858                           postinc0	equ	0xFEE
  8859                           plusw0	equ	0xFEB
  8860                           wreg	equ	0xFE8
  8861                           indf1	equ	0xFE7
  8862                           postinc1	equ	0xFE6
  8863                           postdec1	equ	0xFE5
  8864                           fsr1h	equ	0xFE2
  8865                           fsr1l	equ	0xFE1
  8866                           indf2	equ	0xFDF
  8867                           postinc2	equ	0xFDE
  8868                           postdec2	equ	0xFDD
  8869                           plusw2	equ	0xFDB
  8870                           fsr2h	equ	0xFDA
  8871                           fsr2l	equ	0xFD9
  8872                           status	equ	0xFD8
  8873                           
  8874 ;; *************** function ___llmod *****************
  8875 ;; Defined at:
  8876 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  8877 ;; Parameters:    Size  Location     Type
  8878 ;;  dividend        4   23[COMRAM] unsigned long 
  8879 ;;  divisor         4   27[COMRAM] unsigned long 
  8880 ;; Auto vars:     Size  Location     Type
  8881 ;;  counter         1   31[COMRAM] unsigned char 
  8882 ;; Return value:  Size  Location     Type
  8883 ;;                  4   23[COMRAM] unsigned long 
  8884 ;; Registers used:
  8885 ;;		wreg, status,2, status,0
  8886 ;; Tracked objects:
  8887 ;;		On entry : 0/0
  8888 ;;		On exit  : 0/0
  8889 ;;		Unchanged: 0/0
  8890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8891 ;;      Params:         8       0       0       0       0       0       0
  8892 ;;      Locals:         1       0       0       0       0       0       0
  8893 ;;      Temps:          0       0       0       0       0       0       0
  8894 ;;      Totals:         9       0       0       0       0       0       0
  8895 ;;Total ram usage:        9 bytes
  8896 ;; Hardware stack levels used:    1
  8897 ;; Hardware stack levels required when called:    3
  8898 ;; This function calls:
  8899 ;;		Nothing
  8900 ;; This function is called by:
  8901 ;;		_SetMcuRunTime
  8902 ;;		_GetMcuRunTime
  8903 ;; This function uses a non-reentrant model
  8904 ;;
  8905                           
  8906                           	psect	text49
  8907  002EB4                     __ptext49:
  8908                           	opt stack 0
  8909  002EB4                     ___llmod:
  8910                           	opt stack 24
  8911                           
  8912                           ;incstack = 0
  8913  002EB4  501C               	movf	___llmod@divisor,w,c
  8914  002EB6  101D               	iorwf	___llmod@divisor+1,w,c
  8915  002EB8  101E               	iorwf	___llmod@divisor+2,w,c
  8916  002EBA  101F               	iorwf	___llmod@divisor+3,w,c
  8917  002EBC  B4D8               	btfsc	status,2,c
  8918  002EBE  D024               	goto	l1834
  8919  002EC0  0E01               	movlw	1
  8920  002EC2  6E20               	movwf	___llmod@counter,c
  8921  002EC4  D006               	goto	l1829
  8922  002EC6  90D8               	bcf	status,0,c
  8923  002EC8  361C               	rlcf	___llmod@divisor,f,c
  8924  002ECA  361D               	rlcf	___llmod@divisor+1,f,c
  8925  002ECC  361E               	rlcf	___llmod@divisor+2,f,c
  8926  002ECE  361F               	rlcf	___llmod@divisor+3,f,c
  8927  002ED0  2A20               	incf	___llmod@counter,f,c
  8928  002ED2                     l1829:
  8929  002ED2  AE1F               	btfss	___llmod@divisor+3,7,c
  8930  002ED4  D7F8               	goto	l1830
  8931  002ED6                     u8070:
  8932  002ED6  501C               	movf	___llmod@divisor,w,c
  8933  002ED8  5C18               	subwf	___llmod@dividend,w,c
  8934  002EDA  501D               	movf	___llmod@divisor+1,w,c
  8935  002EDC  5819               	subwfb	___llmod@dividend+1,w,c
  8936  002EDE  501E               	movf	___llmod@divisor+2,w,c
  8937  002EE0  581A               	subwfb	___llmod@dividend+2,w,c
  8938  002EE2  501F               	movf	___llmod@divisor+3,w,c
  8939  002EE4  581B               	subwfb	___llmod@dividend+3,w,c
  8940  002EE6  A0D8               	btfss	status,0,c
  8941  002EE8  D008               	goto	l1833
  8942  002EEA  501C               	movf	___llmod@divisor,w,c
  8943  002EEC  5E18               	subwf	___llmod@dividend,f,c
  8944  002EEE  501D               	movf	___llmod@divisor+1,w,c
  8945  002EF0  5A19               	subwfb	___llmod@dividend+1,f,c
  8946  002EF2  501E               	movf	___llmod@divisor+2,w,c
  8947  002EF4  5A1A               	subwfb	___llmod@dividend+2,f,c
  8948  002EF6  501F               	movf	___llmod@divisor+3,w,c
  8949  002EF8  5A1B               	subwfb	___llmod@dividend+3,f,c
  8950  002EFA                     l1833:
  8951  002EFA  90D8               	bcf	status,0,c
  8952  002EFC  321F               	rrcf	___llmod@divisor+3,f,c
  8953  002EFE  321E               	rrcf	___llmod@divisor+2,f,c
  8954  002F00  321D               	rrcf	___llmod@divisor+1,f,c
  8955  002F02  321C               	rrcf	___llmod@divisor,f,c
  8956  002F04  2E20               	decfsz	___llmod@counter,f,c
  8957  002F06  D7E7               	goto	u8070
  8958  002F08                     l1834:
  8959  002F08  C018  F018         	movff	___llmod@dividend,?___llmod
  8960  002F0C  C019  F019         	movff	___llmod@dividend+1,?___llmod+1
  8961  002F10  C01A  F01A         	movff	___llmod@dividend+2,?___llmod+2
  8962  002F14  C01B  F01B         	movff	___llmod@dividend+3,?___llmod+3
  8963  002F18  0012               	return		;funcret
  8964  002F1A                     __end_of___llmod:
  8965                           	opt stack 0
  8966                           tosu	equ	0xFFF
  8967                           tosh	equ	0xFFE
  8968                           tosl	equ	0xFFD
  8969                           pclath	equ	0xFFA
  8970                           tblptru	equ	0xFF8
  8971                           tblptrh	equ	0xFF7
  8972                           tblptrl	equ	0xFF6
  8973                           tablat	equ	0xFF5
  8974                           prodh	equ	0xFF4
  8975                           prodl	equ	0xFF3
  8976                           intcon	equ	0xFF2
  8977                           intcon2	equ	0xFF1
  8978                           postinc0	equ	0xFEE
  8979                           plusw0	equ	0xFEB
  8980                           wreg	equ	0xFE8
  8981                           indf1	equ	0xFE7
  8982                           postinc1	equ	0xFE6
  8983                           postdec1	equ	0xFE5
  8984                           fsr1h	equ	0xFE2
  8985                           fsr1l	equ	0xFE1
  8986                           indf2	equ	0xFDF
  8987                           postinc2	equ	0xFDE
  8988                           postdec2	equ	0xFDD
  8989                           plusw2	equ	0xFDB
  8990                           fsr2h	equ	0xFDA
  8991                           fsr2l	equ	0xFD9
  8992                           status	equ	0xFD8
  8993                           
  8994 ;; *************** function _SendSystemStartAck *****************
  8995 ;; Defined at:
  8996 ;;		line 140 in file "SystemCommon.c"
  8997 ;; Parameters:    Size  Location     Type
  8998 ;;		None
  8999 ;; Auto vars:     Size  Location     Type
  9000 ;;		None
  9001 ;; Return value:  Size  Location     Type
  9002 ;;                  1    wreg      void 
  9003 ;; Registers used:
  9004 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9005 ;; Tracked objects:
  9006 ;;		On entry : 0/0
  9007 ;;		On exit  : 0/0
  9008 ;;		Unchanged: 0/0
  9009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9010 ;;      Params:         0       0       0       0       0       0       0
  9011 ;;      Locals:         0       0       0       0       0       0       0
  9012 ;;      Temps:          0       0       0       0       0       0       0
  9013 ;;      Totals:         0       0       0       0       0       0       0
  9014 ;;Total ram usage:        0 bytes
  9015 ;; Hardware stack levels used:    1
  9016 ;; Hardware stack levels required when called:    6
  9017 ;; This function calls:
  9018 ;;		_SendAckMessage
  9019 ;; This function is called by:
  9020 ;;		_main
  9021 ;; This function uses a non-reentrant model
  9022 ;;
  9023                           
  9024                           	psect	text50
  9025  003BEC                     __ptext50:
  9026                           	opt stack 0
  9027  003BEC                     _SendSystemStartAck:
  9028                           	opt stack 24
  9029                           
  9030                           ;SystemCommon.c: 142: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_SYSTE
      +                          M_START);
  9031                           
  9032                           ;incstack = 0
  9033  003BEC  0E10               	movlw	16
  9034  003BEE  6E24               	movwf	SendAckMessage@inRequest,c
  9035  003BF0  0E01               	movlw	1
  9036  003BF2  EC7A  F019         	call	_SendAckMessage
  9037  003BF6  0012               	return		;funcret
  9038  003BF8                     __end_of_SendSystemStartAck:
  9039                           	opt stack 0
  9040                           tosu	equ	0xFFF
  9041                           tosh	equ	0xFFE
  9042                           tosl	equ	0xFFD
  9043                           pclath	equ	0xFFA
  9044                           tblptru	equ	0xFF8
  9045                           tblptrh	equ	0xFF7
  9046                           tblptrl	equ	0xFF6
  9047                           tablat	equ	0xFF5
  9048                           prodh	equ	0xFF4
  9049                           prodl	equ	0xFF3
  9050                           intcon	equ	0xFF2
  9051                           intcon2	equ	0xFF1
  9052                           postinc0	equ	0xFEE
  9053                           plusw0	equ	0xFEB
  9054                           wreg	equ	0xFE8
  9055                           indf1	equ	0xFE7
  9056                           postinc1	equ	0xFE6
  9057                           postdec1	equ	0xFE5
  9058                           fsr1h	equ	0xFE2
  9059                           fsr1l	equ	0xFE1
  9060                           indf2	equ	0xFDF
  9061                           postinc2	equ	0xFDE
  9062                           postdec2	equ	0xFDD
  9063                           plusw2	equ	0xFDB
  9064                           fsr2h	equ	0xFDA
  9065                           fsr2l	equ	0xFD9
  9066                           status	equ	0xFD8
  9067                           
  9068 ;; *************** function _SendAckMessage *****************
  9069 ;; Defined at:
  9070 ;;		line 171 in file "EusartApp.c"
  9071 ;; Parameters:    Size  Location     Type
  9072 ;;  inGroup         1    wreg     enum E7168
  9073 ;;  inRequest       1   35[COMRAM] enum E7176
  9074 ;; Auto vars:     Size  Location     Type
  9075 ;;  inGroup         1   36[COMRAM] enum E7168
  9076 ;;  TxMsg           6   37[COMRAM] unsigned char [6]
  9077 ;; Return value:  Size  Location     Type
  9078 ;;                  1    wreg      void 
  9079 ;; Registers used:
  9080 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9081 ;; Tracked objects:
  9082 ;;		On entry : 0/0
  9083 ;;		On exit  : 0/0
  9084 ;;		Unchanged: 0/0
  9085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9086 ;;      Params:         1       0       0       0       0       0       0
  9087 ;;      Locals:         7       0       0       0       0       0       0
  9088 ;;      Temps:          0       0       0       0       0       0       0
  9089 ;;      Totals:         8       0       0       0       0       0       0
  9090 ;;Total ram usage:        8 bytes
  9091 ;; Hardware stack levels used:    1
  9092 ;; Hardware stack levels required when called:    5
  9093 ;; This function calls:
  9094 ;;		_WriteUartMessage
  9095 ;;		_ZeroArray
  9096 ;;		_crc8
  9097 ;; This function is called by:
  9098 ;;		_testLeds
  9099 ;;		_SetAdcOperationMode
  9100 ;;		_SetConversionResultFormat
  9101 ;;		_SetChannelMode
  9102 ;;		_FlashReadUart
  9103 ;;		_FlashEreaseMem
  9104 ;;		_DacSetValue
  9105 ;;		_UpdateSynthFreq
  9106 ;;		_SetSynthOper
  9107 ;;		_ResetMcu
  9108 ;;		_SendSystemStartAck
  9109 ;;		_keepAliveSignalUart
  9110 ;; This function uses a non-reentrant model
  9111 ;;
  9112                           
  9113                           	psect	text51
  9114  0032F4                     __ptext51:
  9115                           	opt stack 0
  9116  0032F4                     _SendAckMessage:
  9117                           	opt stack 22
  9118                           
  9119                           ;incstack = 0
  9120                           ;SendAckMessage@inGroup stored from wreg
  9121  0032F4  6E25               	movwf	SendAckMessage@inGroup,c
  9122                           
  9123                           ;EusartApp.c: 174: char TxMsg[(0x5) + 1];
  9124                           ;EusartApp.c: 175: ZeroArray(TxMsg, (0x5) + 1);
  9125  0032F6  0E26               	movlw	low SendAckMessage@TxMsg
  9126  0032F8  6E20               	movwf	ZeroArray@array,c
  9127  0032FA  0E00               	movlw	high SendAckMessage@TxMsg
  9128  0032FC  6E21               	movwf	ZeroArray@array+1,c
  9129  0032FE  0E00               	movlw	0
  9130  003300  6E23               	movwf	ZeroArray@size+1,c
  9131  003302  0E06               	movlw	6
  9132  003304  6E22               	movwf	ZeroArray@size,c
  9133  003306  EC29  F01D         	call	_ZeroArray	;wreg free
  9134                           
  9135                           ;EusartApp.c: 178: TxMsg[(0)] = (0x24);
  9136  00330A  0E24               	movlw	36
  9137  00330C  6E26               	movwf	SendAckMessage@TxMsg,c
  9138                           
  9139                           ;EusartApp.c: 179: TxMsg[(1)] = inGroup;
  9140  00330E  C025  F027         	movff	SendAckMessage@inGroup,SendAckMessage@TxMsg+1
  9141                           
  9142                           ;EusartApp.c: 180: TxMsg[(2)] = inRequest;
  9143  003312  C024  F028         	movff	SendAckMessage@inRequest,SendAckMessage@TxMsg+2
  9144                           
  9145                           ;EusartApp.c: 181: TxMsg[(3)] = 0;
  9146  003316  0E00               	movlw	0
  9147  003318  6E29               	movwf	SendAckMessage@TxMsg+3,c
  9148                           
  9149                           ;EusartApp.c: 183: TxMsg[(0x5)] = crc8(TxMsg, (0x5));
  9150  00331A  0E26               	movlw	low SendAckMessage@TxMsg
  9151  00331C  6E18               	movwf	crc8@dataArray,c
  9152  00331E  0E00               	movlw	high SendAckMessage@TxMsg
  9153  003320  6E19               	movwf	crc8@dataArray+1,c
  9154  003322  0E00               	movlw	0
  9155  003324  6E1B               	movwf	crc8@dataSize+1,c
  9156  003326  0E05               	movlw	5
  9157  003328  6E1A               	movwf	crc8@dataSize,c
  9158  00332A  ECA3  F019         	call	_crc8	;wreg free
  9159  00332E  6E2B               	movwf	SendAckMessage@TxMsg+5,c
  9160                           
  9161                           ;EusartApp.c: 185: WriteUartMessage(TxMsg, (0x5) + 1);
  9162  003330  0E26               	movlw	low SendAckMessage@TxMsg
  9163  003332  6E19               	movwf	WriteUartMessage@dataBuf,c
  9164  003334  0E00               	movlw	high SendAckMessage@TxMsg
  9165  003336  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  9166  003338  0E00               	movlw	0
  9167  00333A  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  9168  00333C  0E06               	movlw	6
  9169  00333E  6E1B               	movwf	WriteUartMessage@dataSize,c
  9170  003340  EC9F  F01B         	call	_WriteUartMessage	;wreg free
  9171  003344  0012               	return		;funcret
  9172  003346                     __end_of_SendAckMessage:
  9173                           	opt stack 0
  9174                           tosu	equ	0xFFF
  9175                           tosh	equ	0xFFE
  9176                           tosl	equ	0xFFD
  9177                           pclath	equ	0xFFA
  9178                           tblptru	equ	0xFF8
  9179                           tblptrh	equ	0xFF7
  9180                           tblptrl	equ	0xFF6
  9181                           tablat	equ	0xFF5
  9182                           prodh	equ	0xFF4
  9183                           prodl	equ	0xFF3
  9184                           intcon	equ	0xFF2
  9185                           intcon2	equ	0xFF1
  9186                           postinc0	equ	0xFEE
  9187                           plusw0	equ	0xFEB
  9188                           wreg	equ	0xFE8
  9189                           indf1	equ	0xFE7
  9190                           postinc1	equ	0xFE6
  9191                           postdec1	equ	0xFE5
  9192                           fsr1h	equ	0xFE2
  9193                           fsr1l	equ	0xFE1
  9194                           indf2	equ	0xFDF
  9195                           postinc2	equ	0xFDE
  9196                           postdec2	equ	0xFDD
  9197                           plusw2	equ	0xFDB
  9198                           fsr2h	equ	0xFDA
  9199                           fsr2l	equ	0xFD9
  9200                           status	equ	0xFD8
  9201                           
  9202 ;; *************** function _crc8 *****************
  9203 ;; Defined at:
  9204 ;;		line 13 in file "SystemCommon.c"
  9205 ;; Parameters:    Size  Location     Type
  9206 ;;  dataArray       2   23[COMRAM] PTR unsigned char 
  9207 ;;		 -> GetMcuRunTime@TxMsg(9), GetMcuFwVersion@TxMsg(9), SynthReadData@TxMsg(27), FlashReadCondition@TxMsg(9), 
  9208 ;;		 -> FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), rxMsgQueue(20), 
  9209 ;;  dataSize        2   25[COMRAM] int 
  9210 ;; Auto vars:     Size  Location     Type
  9211 ;;  i               2   30[COMRAM] int 
  9212 ;;  crc             2   28[COMRAM] int 
  9213 ;; Return value:  Size  Location     Type
  9214 ;;                  1    wreg      unsigned char 
  9215 ;; Registers used:
  9216 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9217 ;; Tracked objects:
  9218 ;;		On entry : 0/0
  9219 ;;		On exit  : 0/0
  9220 ;;		Unchanged: 0/0
  9221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9222 ;;      Params:         4       0       0       0       0       0       0
  9223 ;;      Locals:         4       0       0       0       0       0       0
  9224 ;;      Temps:          1       0       0       0       0       0       0
  9225 ;;      Totals:         9       0       0       0       0       0       0
  9226 ;;Total ram usage:        9 bytes
  9227 ;; Hardware stack levels used:    1
  9228 ;; Hardware stack levels required when called:    3
  9229 ;; This function calls:
  9230 ;;		Nothing
  9231 ;; This function is called by:
  9232 ;;		_readUartMessage
  9233 ;;		_SendAckMessage
  9234 ;;		_FlashReadUart
  9235 ;;		_FlashReadCondition
  9236 ;;		_SynthReadData
  9237 ;;		_GetMcuFwVersion
  9238 ;;		_GetMcuRunTime
  9239 ;; This function uses a non-reentrant model
  9240 ;;
  9241                           
  9242                           	psect	text52
  9243  003346                     __ptext52:
  9244                           	opt stack 0
  9245  003346                     _crc8:
  9246                           	opt stack 26
  9247                           
  9248                           ;SystemCommon.c: 15: int crc = 0;
  9249                           
  9250                           ;incstack = 0
  9251  003346  0E00               	movlw	0
  9252  003348  6E1E               	movwf	crc8@crc+1,c
  9253  00334A  0E00               	movlw	0
  9254  00334C  6E1D               	movwf	crc8@crc,c
  9255                           
  9256                           ;SystemCommon.c: 16: for (int i = 0; i < dataSize; i++)
  9257  00334E  0E00               	movlw	0
  9258  003350  6E20               	movwf	crc8@i+1,c
  9259  003352  0E00               	movlw	0
  9260  003354  6E1F               	movwf	crc8@i,c
  9261  003356  D00E               	goto	l1288
  9262  003358                     
  9263                           ;SystemCommon.c: 17: {
  9264                           ;SystemCommon.c: 18: crc += dataArray[i];
  9265  003358  501F               	movf	crc8@i,w,c
  9266  00335A  2418               	addwf	crc8@dataArray,w,c
  9267  00335C  6ED9               	movwf	fsr2l,c
  9268  00335E  5020               	movf	crc8@i+1,w,c
  9269  003360  2019               	addwfc	crc8@dataArray+1,w,c
  9270  003362  6EDA               	movwf	fsr2h,c
  9271  003364  50DF               	movf	indf2,w,c
  9272  003366  6E1C               	movwf	??_crc8& (0+255),c
  9273  003368  501C               	movf	??_crc8,w,c
  9274  00336A  261D               	addwf	crc8@crc,f,c
  9275  00336C  0E00               	movlw	0
  9276  00336E  221E               	addwfc	crc8@crc+1,f,c
  9277  003370  4A1F               	infsnz	crc8@i,f,c
  9278  003372  2A20               	incf	crc8@i+1,f,c
  9279  003374                     l1288:
  9280  003374  501A               	movf	crc8@dataSize,w,c
  9281  003376  5C1F               	subwf	crc8@i,w,c
  9282  003378  5020               	movf	crc8@i+1,w,c
  9283  00337A  0A80               	xorlw	128
  9284  00337C  6E1C               	movwf	??_crc8& (0+255),c
  9285  00337E  501B               	movf	crc8@dataSize+1,w,c
  9286  003380  0A80               	xorlw	128
  9287  003382  581C               	subwfb	??_crc8& (0+255),w,c
  9288  003384  A0D8               	btfss	status,0,c
  9289  003386  D7E8               	goto	l1289
  9290                           
  9291                           ;SystemCommon.c: 19: }
  9292                           ;SystemCommon.c: 20: crc &= 0xff;
  9293  003388  0EFF               	movlw	255
  9294  00338A  161D               	andwf	crc8@crc,f,c
  9295  00338C  0E00               	movlw	0
  9296  00338E  161E               	andwf	crc8@crc+1,f,c
  9297                           
  9298                           ;SystemCommon.c: 21: return crc;
  9299  003390  501D               	movf	crc8@crc,w,c
  9300  003392  0012               	return	
  9301  003394                     __end_of_crc8:
  9302                           	opt stack 0
  9303                           tosu	equ	0xFFF
  9304                           tosh	equ	0xFFE
  9305                           tosl	equ	0xFFD
  9306                           pclath	equ	0xFFA
  9307                           tblptru	equ	0xFF8
  9308                           tblptrh	equ	0xFF7
  9309                           tblptrl	equ	0xFF6
  9310                           tablat	equ	0xFF5
  9311                           prodh	equ	0xFF4
  9312                           prodl	equ	0xFF3
  9313                           intcon	equ	0xFF2
  9314                           intcon2	equ	0xFF1
  9315                           postinc0	equ	0xFEE
  9316                           plusw0	equ	0xFEB
  9317                           wreg	equ	0xFE8
  9318                           indf1	equ	0xFE7
  9319                           postinc1	equ	0xFE6
  9320                           postdec1	equ	0xFE5
  9321                           fsr1h	equ	0xFE2
  9322                           fsr1l	equ	0xFE1
  9323                           indf2	equ	0xFDF
  9324                           postinc2	equ	0xFDE
  9325                           postdec2	equ	0xFDD
  9326                           plusw2	equ	0xFDB
  9327                           fsr2h	equ	0xFDA
  9328                           fsr2l	equ	0xFD9
  9329                           status	equ	0xFD8
  9330                           
  9331 ;; *************** function _ZeroArray *****************
  9332 ;; Defined at:
  9333 ;;		line 24 in file "SystemCommon.c"
  9334 ;; Parameters:    Size  Location     Type
  9335 ;;  array           2   31[COMRAM] PTR unsigned char 
  9336 ;;		 -> GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dataRegArr(10), SynthReadData@TxMsg(27), FlashReadCondition@TxMsg(9
      +), 
  9337 ;;		 -> FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), 
  9338 ;;		 -> rxMsgQueue(20), 
  9339 ;;  size            2   33[COMRAM] int 
  9340 ;; Auto vars:     Size  Location     Type
  9341 ;;		None
  9342 ;; Return value:  Size  Location     Type
  9343 ;;                  1    wreg      void 
  9344 ;; Registers used:
  9345 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9346 ;; Tracked objects:
  9347 ;;		On entry : 0/0
  9348 ;;		On exit  : 0/0
  9349 ;;		Unchanged: 0/0
  9350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9351 ;;      Params:         4       0       0       0       0       0       0
  9352 ;;      Locals:         0       0       0       0       0       0       0
  9353 ;;      Temps:          0       0       0       0       0       0       0
  9354 ;;      Totals:         4       0       0       0       0       0       0
  9355 ;;Total ram usage:        4 bytes
  9356 ;; Hardware stack levels used:    1
  9357 ;; Hardware stack levels required when called:    4
  9358 ;; This function calls:
  9359 ;;		_memset
  9360 ;; This function is called by:
  9361 ;;		_readUartMessage
  9362 ;;		_InitRxMessageParams
  9363 ;;		_SendAckMessage
  9364 ;;		_FlashReadUart
  9365 ;;		_FlashEreaseMem
  9366 ;;		_FlashReadCondition
  9367 ;;		_SynthReadData
  9368 ;;		_GetIntFromUartData
  9369 ;;		_GetMcuFwVersion
  9370 ;; This function uses a non-reentrant model
  9371 ;;
  9372                           
  9373                           	psect	text53
  9374  003A52                     __ptext53:
  9375                           	opt stack 0
  9376  003A52                     _ZeroArray:
  9377                           	opt stack 25
  9378                           
  9379                           ;SystemCommon.c: 26: memset(array, 0x0, size);
  9380                           
  9381                           ;incstack = 0
  9382  003A52  C020  F018         	movff	ZeroArray@array,memset@p1
  9383  003A56  C021  F019         	movff	ZeroArray@array+1,memset@p1+1
  9384  003A5A  0E00               	movlw	0
  9385  003A5C  6E1B               	movwf	memset@c+1,c
  9386  003A5E  0E00               	movlw	0
  9387  003A60  6E1A               	movwf	memset@c,c
  9388  003A62  C022  F01C         	movff	ZeroArray@size,memset@n
  9389  003A66  C023  F01D         	movff	ZeroArray@size+1,memset@n+1
  9390  003A6A  EC4D  F01C         	call	_memset	;wreg free
  9391  003A6E  0012               	return		;funcret
  9392  003A70                     __end_of_ZeroArray:
  9393                           	opt stack 0
  9394                           tosu	equ	0xFFF
  9395                           tosh	equ	0xFFE
  9396                           tosl	equ	0xFFD
  9397                           pclath	equ	0xFFA
  9398                           tblptru	equ	0xFF8
  9399                           tblptrh	equ	0xFF7
  9400                           tblptrl	equ	0xFF6
  9401                           tablat	equ	0xFF5
  9402                           prodh	equ	0xFF4
  9403                           prodl	equ	0xFF3
  9404                           intcon	equ	0xFF2
  9405                           intcon2	equ	0xFF1
  9406                           postinc0	equ	0xFEE
  9407                           plusw0	equ	0xFEB
  9408                           wreg	equ	0xFE8
  9409                           indf1	equ	0xFE7
  9410                           postinc1	equ	0xFE6
  9411                           postdec1	equ	0xFE5
  9412                           fsr1h	equ	0xFE2
  9413                           fsr1l	equ	0xFE1
  9414                           indf2	equ	0xFDF
  9415                           postinc2	equ	0xFDE
  9416                           postdec2	equ	0xFDD
  9417                           plusw2	equ	0xFDB
  9418                           fsr2h	equ	0xFDA
  9419                           fsr2l	equ	0xFD9
  9420                           status	equ	0xFD8
  9421                           
  9422 ;; *************** function _WriteUartMessage *****************
  9423 ;; Defined at:
  9424 ;;		line 158 in file "EusartApp.c"
  9425 ;; Parameters:    Size  Location     Type
  9426 ;;  dataBuf         2   24[COMRAM] PTR unsigned char 
  9427 ;;		 -> GetMcuRunTime@TxMsg(9), GetMcuFwVersion@TxMsg(9), SynthReadData@TxMsg(27), FlashReadCondition@TxMsg(9), 
  9428 ;;		 -> FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), 
  9429 ;;  dataSize        2   26[COMRAM] int 
  9430 ;; Auto vars:     Size  Location     Type
  9431 ;;  idx             2   29[COMRAM] int 
  9432 ;; Return value:  Size  Location     Type
  9433 ;;                  1    wreg      void 
  9434 ;; Registers used:
  9435 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9436 ;; Tracked objects:
  9437 ;;		On entry : 0/0
  9438 ;;		On exit  : 0/0
  9439 ;;		Unchanged: 0/0
  9440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9441 ;;      Params:         4       0       0       0       0       0       0
  9442 ;;      Locals:         2       0       0       0       0       0       0
  9443 ;;      Temps:          1       0       0       0       0       0       0
  9444 ;;      Totals:         7       0       0       0       0       0       0
  9445 ;;Total ram usage:        7 bytes
  9446 ;; Hardware stack levels used:    1
  9447 ;; Hardware stack levels required when called:    4
  9448 ;; This function calls:
  9449 ;;		_EUSART1_Write
  9450 ;; This function is called by:
  9451 ;;		_SendAckMessage
  9452 ;;		_FlashReadUart
  9453 ;;		_FlashReadCondition
  9454 ;;		_SynthReadData
  9455 ;;		_GetMcuFwVersion
  9456 ;;		_GetMcuRunTime
  9457 ;; This function uses a non-reentrant model
  9458 ;;
  9459                           
  9460                           	psect	text54
  9461  00373E                     __ptext54:
  9462                           	opt stack 0
  9463  00373E                     _WriteUartMessage:
  9464                           	opt stack 22
  9465                           
  9466                           ;EusartApp.c: 160: for(int idx = 0; idx < dataSize; idx++)
  9467                           
  9468                           ;incstack = 0
  9469  00373E  0E00               	movlw	0
  9470  003740  6E1F               	movwf	WriteUartMessage@idx+1,c
  9471  003742  0E00               	movlw	0
  9472  003744  6E1E               	movwf	WriteUartMessage@idx,c
  9473  003746  D00B               	goto	l222
  9474  003748                     
  9475                           ;EusartApp.c: 161: {
  9476                           ;EusartApp.c: 162: EUSART1_Write(dataBuf[idx]);
  9477  003748  501E               	movf	WriteUartMessage@idx,w,c
  9478  00374A  2419               	addwf	WriteUartMessage@dataBuf,w,c
  9479  00374C  6ED9               	movwf	fsr2l,c
  9480  00374E  501F               	movf	WriteUartMessage@idx+1,w,c
  9481  003750  201A               	addwfc	WriteUartMessage@dataBuf+1,w,c
  9482  003752  6EDA               	movwf	fsr2h,c
  9483  003754  50DF               	movf	indf2,w,c
  9484  003756  ECBA  F01A         	call	_EUSART1_Write
  9485  00375A  4A1E               	infsnz	WriteUartMessage@idx,f,c
  9486  00375C  2A1F               	incf	WriteUartMessage@idx+1,f,c
  9487  00375E                     l222:
  9488  00375E  501B               	movf	WriteUartMessage@dataSize,w,c
  9489  003760  5C1E               	subwf	WriteUartMessage@idx,w,c
  9490  003762  501F               	movf	WriteUartMessage@idx+1,w,c
  9491  003764  0A80               	xorlw	128
  9492  003766  6E1D               	movwf	??_WriteUartMessage& (0+255),c
  9493  003768  501C               	movf	WriteUartMessage@dataSize+1,w,c
  9494  00376A  0A80               	xorlw	128
  9495  00376C  581D               	subwfb	??_WriteUartMessage& (0+255),w,c
  9496  00376E  B0D8               	btfsc	status,0,c
  9497  003770  0012               	return	
  9498  003772  D7EA               	goto	l223
  9499  003774                     __end_of_WriteUartMessage:
  9500                           	opt stack 0
  9501                           tosu	equ	0xFFF
  9502                           tosh	equ	0xFFE
  9503                           tosl	equ	0xFFD
  9504                           pclath	equ	0xFFA
  9505                           tblptru	equ	0xFF8
  9506                           tblptrh	equ	0xFF7
  9507                           tblptrl	equ	0xFF6
  9508                           tablat	equ	0xFF5
  9509                           prodh	equ	0xFF4
  9510                           prodl	equ	0xFF3
  9511                           intcon	equ	0xFF2
  9512                           intcon2	equ	0xFF1
  9513                           postinc0	equ	0xFEE
  9514                           plusw0	equ	0xFEB
  9515                           wreg	equ	0xFE8
  9516                           indf1	equ	0xFE7
  9517                           postinc1	equ	0xFE6
  9518                           postdec1	equ	0xFE5
  9519                           fsr1h	equ	0xFE2
  9520                           fsr1l	equ	0xFE1
  9521                           indf2	equ	0xFDF
  9522                           postinc2	equ	0xFDE
  9523                           postdec2	equ	0xFDD
  9524                           plusw2	equ	0xFDB
  9525                           fsr2h	equ	0xFDA
  9526                           fsr2l	equ	0xFD9
  9527                           status	equ	0xFD8
  9528                           
  9529 ;; *************** function _EUSART1_Write *****************
  9530 ;; Defined at:
  9531 ;;		line 157 in file "mcc_generated_files/eusart1.c"
  9532 ;; Parameters:    Size  Location     Type
  9533 ;;  txData          1    wreg     unsigned char 
  9534 ;; Auto vars:     Size  Location     Type
  9535 ;;  txData          1   23[COMRAM] unsigned char 
  9536 ;; Return value:  Size  Location     Type
  9537 ;;                  1    wreg      void 
  9538 ;; Registers used:
  9539 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9540 ;; Tracked objects:
  9541 ;;		On entry : 0/0
  9542 ;;		On exit  : 0/0
  9543 ;;		Unchanged: 0/0
  9544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9545 ;;      Params:         0       0       0       0       0       0       0
  9546 ;;      Locals:         1       0       0       0       0       0       0
  9547 ;;      Temps:          0       0       0       0       0       0       0
  9548 ;;      Totals:         1       0       0       0       0       0       0
  9549 ;;Total ram usage:        1 bytes
  9550 ;; Hardware stack levels used:    1
  9551 ;; Hardware stack levels required when called:    3
  9552 ;; This function calls:
  9553 ;;		Nothing
  9554 ;; This function is called by:
  9555 ;;		_WriteUartMessage
  9556 ;; This function uses a non-reentrant model
  9557 ;;
  9558                           
  9559                           	psect	text55
  9560  003574                     __ptext55:
  9561                           	opt stack 0
  9562  003574                     _EUSART1_Write:
  9563                           	opt stack 22
  9564                           
  9565                           ;incstack = 0
  9566                           ;EUSART1_Write@txData stored from wreg
  9567  003574  6E18               	movwf	EUSART1_Write@txData,c
  9568  003576                     
  9569                           ;eusart1.c: 160: {
  9570                           
  9571                           ;eusart1.c: 159: while(0 == eusart1TxBufferRemaining)
  9572  003576  0101               	movlb	1	; () banked
  9573  003578  51F1               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
  9574  00357A  B4D8               	btfsc	status,2,c
  9575  00357C  D7FC               	goto	l7211
  9576                           
  9577                           ; BSR set to: 1
  9578                           ;eusart1.c: 161: }
  9579                           ;eusart1.c: 163: if(0 == PIE1bits.TX1IE)
  9580  00357E  B89D               	btfsc	3997,4,c	;volatile
  9581  003580  D003               	goto	l866
  9582                           
  9583                           ; BSR set to: 1
  9584                           ;eusart1.c: 164: {
  9585                           ;eusart1.c: 165: TXREG1 = txData;
  9586  003582  C018  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  9587                           
  9588                           ;eusart1.c: 166: }
  9589  003586  D012               	goto	l867
  9590  003588                     l866:
  9591                           
  9592                           ; BSR set to: 1
  9593                           ;eusart1.c: 167: else
  9594                           ;eusart1.c: 168: {
  9595                           ;eusart1.c: 169: PIE1bits.TX1IE = 0;
  9596  003588  989D               	bcf	3997,4,c	;volatile
  9597                           
  9598                           ; BSR set to: 1
  9599                           ;eusart1.c: 170: eusart1TxBuffer[eusart1TxHead++] = txData;
  9600  00358A  503A               	movf	_eusart1TxHead,w,c	;volatile
  9601  00358C  0D01               	mullw	1
  9602  00358E  0E00               	movlw	low _eusart1TxBuffer
  9603  003590  24F3               	addwf	prodl,w,c
  9604  003592  6ED9               	movwf	fsr2l,c
  9605  003594  0E01               	movlw	high _eusart1TxBuffer
  9606  003596  20F4               	addwfc	prodh,w,c
  9607  003598  6EDA               	movwf	fsr2h,c
  9608  00359A  C018  FFDF         	movff	EUSART1_Write@txData,indf2
  9609                           
  9610                           ; BSR set to: 1
  9611  00359E  2A3A               	incf	_eusart1TxHead,f,c	;volatile
  9612                           
  9613                           ; BSR set to: 1
  9614                           ;eusart1.c: 171: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  9615  0035A0  0E45               	movlw	69
  9616  0035A2  643A               	cpfsgt	_eusart1TxHead,c	;volatile
  9617  0035A4  D002               	goto	l868
  9618                           
  9619                           ; BSR set to: 1
  9620                           ;eusart1.c: 172: {
  9621                           ;eusart1.c: 173: eusart1TxHead = 0;
  9622  0035A6  0E00               	movlw	0
  9623  0035A8  6E3A               	movwf	_eusart1TxHead,c	;volatile
  9624  0035AA                     l868:
  9625                           
  9626                           ; BSR set to: 1
  9627                           ;eusart1.c: 174: }
  9628                           ;eusart1.c: 175: eusart1TxBufferRemaining--;
  9629                           
  9630                           ; BSR set to: 1
  9631  0035AA  07F1               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
  9632  0035AC                     l867:
  9633                           
  9634                           ; BSR set to: 1
  9635                           ;eusart1.c: 176: }
  9636                           ;eusart1.c: 177: PIE1bits.TX1IE = 1;
  9637                           
  9638                           ; BSR set to: 1
  9639  0035AC  889D               	bsf	3997,4,c	;volatile
  9640                           
  9641                           ; BSR set to: 1
  9642  0035AE  0012               	return		;funcret
  9643  0035B0                     __end_of_EUSART1_Write:
  9644                           	opt stack 0
  9645                           tosu	equ	0xFFF
  9646                           tosh	equ	0xFFE
  9647                           tosl	equ	0xFFD
  9648                           pclath	equ	0xFFA
  9649                           tblptru	equ	0xFF8
  9650                           tblptrh	equ	0xFF7
  9651                           tblptrl	equ	0xFF6
  9652                           tablat	equ	0xFF5
  9653                           prodh	equ	0xFF4
  9654                           prodl	equ	0xFF3
  9655                           intcon	equ	0xFF2
  9656                           intcon2	equ	0xFF1
  9657                           postinc0	equ	0xFEE
  9658                           plusw0	equ	0xFEB
  9659                           wreg	equ	0xFE8
  9660                           indf1	equ	0xFE7
  9661                           postinc1	equ	0xFE6
  9662                           postdec1	equ	0xFE5
  9663                           fsr1h	equ	0xFE2
  9664                           fsr1l	equ	0xFE1
  9665                           indf2	equ	0xFDF
  9666                           postinc2	equ	0xFDE
  9667                           postdec2	equ	0xFDD
  9668                           plusw2	equ	0xFDB
  9669                           fsr2h	equ	0xFDA
  9670                           fsr2l	equ	0xFD9
  9671                           status	equ	0xFD8
  9672                           
  9673 ;; *************** function _InitSystemApplicationManagers *****************
  9674 ;; Defined at:
  9675 ;;		line 33 in file "SystemSettings.c"
  9676 ;; Parameters:    Size  Location     Type
  9677 ;;		None
  9678 ;; Auto vars:     Size  Location     Type
  9679 ;;		None
  9680 ;; Return value:  Size  Location     Type
  9681 ;;                  1    wreg      void 
  9682 ;; Registers used:
  9683 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9684 ;; Tracked objects:
  9685 ;;		On entry : 0/0
  9686 ;;		On exit  : 0/0
  9687 ;;		Unchanged: 0/0
  9688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9689 ;;      Params:         0       0       0       0       0       0       0
  9690 ;;      Locals:         0       0       0       0       0       0       0
  9691 ;;      Temps:          0       0       0       0       0       0       0
  9692 ;;      Totals:         0       0       0       0       0       0       0
  9693 ;;Total ram usage:        0 bytes
  9694 ;; Hardware stack levels used:    1
  9695 ;; Hardware stack levels required when called:   11
  9696 ;; This function calls:
  9697 ;;		_ClearMcuRunTime
  9698 ;;		_DacInit
  9699 ;;		_InitAdcApplicationMgr
  9700 ;;		_PLLInitialize
  9701 ;;		_TMR0_StartTimer
  9702 ;; This function is called by:
  9703 ;;		_main
  9704 ;; This function uses a non-reentrant model
  9705 ;;
  9706                           
  9707                           	psect	text56
  9708  003AF2                     __ptext56:
  9709                           	opt stack 0
  9710  003AF2                     _InitSystemApplicationManagers:
  9711                           	opt stack 19
  9712                           
  9713                           ;SystemSettings.c: 36: InitAdcApplicationMgr();
  9714                           
  9715                           ; BSR set to: 1
  9716                           ;incstack = 0
  9717  003AF2  ECB4  F01D         	call	_InitAdcApplicationMgr	;wreg free
  9718                           
  9719                           ;SystemSettings.c: 39: TMR0_StartTimer();
  9720  003AF6  EC12  F01E         	call	_TMR0_StartTimer	;wreg free
  9721                           
  9722                           ;SystemSettings.c: 42: PLLInitialize();
  9723  003AFA  ECAB  F01D         	call	_PLLInitialize	;wreg free
  9724                           
  9725                           ;SystemSettings.c: 45: ClearMcuRunTime();
  9726  003AFE  EC98  F01D         	call	_ClearMcuRunTime	;wreg free
  9727                           
  9728                           ;SystemSettings.c: 48: DacInit();
  9729  003B02  EC6E  F014         	call	_DacInit	;wreg free
  9730  003B06  0012               	return		;funcret
  9731  003B08                     __end_of_InitSystemApplicationManagers:
  9732                           	opt stack 0
  9733                           tosu	equ	0xFFF
  9734                           tosh	equ	0xFFE
  9735                           tosl	equ	0xFFD
  9736                           pclath	equ	0xFFA
  9737                           tblptru	equ	0xFF8
  9738                           tblptrh	equ	0xFF7
  9739                           tblptrl	equ	0xFF6
  9740                           tablat	equ	0xFF5
  9741                           prodh	equ	0xFF4
  9742                           prodl	equ	0xFF3
  9743                           intcon	equ	0xFF2
  9744                           intcon2	equ	0xFF1
  9745                           postinc0	equ	0xFEE
  9746                           plusw0	equ	0xFEB
  9747                           wreg	equ	0xFE8
  9748                           indf1	equ	0xFE7
  9749                           postinc1	equ	0xFE6
  9750                           postdec1	equ	0xFE5
  9751                           fsr1h	equ	0xFE2
  9752                           fsr1l	equ	0xFE1
  9753                           indf2	equ	0xFDF
  9754                           postinc2	equ	0xFDE
  9755                           postdec2	equ	0xFDD
  9756                           plusw2	equ	0xFDB
  9757                           fsr2h	equ	0xFDA
  9758                           fsr2l	equ	0xFD9
  9759                           status	equ	0xFD8
  9760                           
  9761 ;; *************** function _TMR0_StartTimer *****************
  9762 ;; Defined at:
  9763 ;;		line 93 in file "mcc_generated_files/tmr0.c"
  9764 ;; Parameters:    Size  Location     Type
  9765 ;;		None
  9766 ;; Auto vars:     Size  Location     Type
  9767 ;;		None
  9768 ;; Return value:  Size  Location     Type
  9769 ;;                  1    wreg      void 
  9770 ;; Registers used:
  9771 ;;		None
  9772 ;; Tracked objects:
  9773 ;;		On entry : 0/0
  9774 ;;		On exit  : 0/0
  9775 ;;		Unchanged: 0/0
  9776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9777 ;;      Params:         0       0       0       0       0       0       0
  9778 ;;      Locals:         0       0       0       0       0       0       0
  9779 ;;      Temps:          0       0       0       0       0       0       0
  9780 ;;      Totals:         0       0       0       0       0       0       0
  9781 ;;Total ram usage:        0 bytes
  9782 ;; Hardware stack levels used:    1
  9783 ;; Hardware stack levels required when called:    3
  9784 ;; This function calls:
  9785 ;;		Nothing
  9786 ;; This function is called by:
  9787 ;;		_InitSystemApplicationManagers
  9788 ;; This function uses a non-reentrant model
  9789 ;;
  9790                           
  9791                           	psect	text57
  9792  003C24                     __ptext57:
  9793                           	opt stack 0
  9794  003C24                     _TMR0_StartTimer:
  9795                           	opt stack 26
  9796                           
  9797                           ;tmr0.c: 96: T0CONbits.TMR0ON = 1;
  9798                           
  9799                           ;incstack = 0
  9800  003C24  8ED5               	bsf	4053,7,c	;volatile
  9801  003C26  0012               	return		;funcret
  9802  003C28                     __end_of_TMR0_StartTimer:
  9803                           	opt stack 0
  9804                           tosu	equ	0xFFF
  9805                           tosh	equ	0xFFE
  9806                           tosl	equ	0xFFD
  9807                           pclath	equ	0xFFA
  9808                           tblptru	equ	0xFF8
  9809                           tblptrh	equ	0xFF7
  9810                           tblptrl	equ	0xFF6
  9811                           tablat	equ	0xFF5
  9812                           prodh	equ	0xFF4
  9813                           prodl	equ	0xFF3
  9814                           intcon	equ	0xFF2
  9815                           intcon2	equ	0xFF1
  9816                           postinc0	equ	0xFEE
  9817                           plusw0	equ	0xFEB
  9818                           wreg	equ	0xFE8
  9819                           indf1	equ	0xFE7
  9820                           postinc1	equ	0xFE6
  9821                           postdec1	equ	0xFE5
  9822                           fsr1h	equ	0xFE2
  9823                           fsr1l	equ	0xFE1
  9824                           indf2	equ	0xFDF
  9825                           postinc2	equ	0xFDE
  9826                           postdec2	equ	0xFDD
  9827                           plusw2	equ	0xFDB
  9828                           fsr2h	equ	0xFDA
  9829                           fsr2l	equ	0xFD9
  9830                           status	equ	0xFD8
  9831                           
  9832 ;; *************** function _PLLInitialize *****************
  9833 ;; Defined at:
  9834 ;;		line 19 in file "SyntApp.c"
  9835 ;; Parameters:    Size  Location     Type
  9836 ;;		None
  9837 ;; Auto vars:     Size  Location     Type
  9838 ;;		None
  9839 ;; Return value:  Size  Location     Type
  9840 ;;                  1    wreg      void 
  9841 ;; Registers used:
  9842 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9843 ;; Tracked objects:
  9844 ;;		On entry : 0/0
  9845 ;;		On exit  : 0/0
  9846 ;;		Unchanged: 0/0
  9847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9848 ;;      Params:         0       0       0       0       0       0       0
  9849 ;;      Locals:         0       0       0       0       0       0       0
  9850 ;;      Temps:          0       0       0       0       0       0       0
  9851 ;;      Totals:         0       0       0       0       0       0       0
  9852 ;;Total ram usage:        0 bytes
  9853 ;; Hardware stack levels used:    1
  9854 ;; Hardware stack levels required when called:   10
  9855 ;; This function calls:
  9856 ;;		_InitSynth
  9857 ;; This function is called by:
  9858 ;;		_InitSystemApplicationManagers
  9859 ;; This function uses a non-reentrant model
  9860 ;;
  9861                           
  9862                           	psect	text58
  9863  003B56                     __ptext58:
  9864                           	opt stack 0
  9865  003B56                     _PLLInitialize:
  9866                           	opt stack 19
  9867                           
  9868                           ;SyntApp.c: 22: IOCB = 0b10000000;
  9869                           
  9870                           ;incstack = 0
  9871  003B56  0E80               	movlw	128
  9872  003B58  6E62               	movwf	3938,c	;volatile
  9873                           
  9874                           ;SyntApp.c: 23: InitSynth(SYNTH_TX);
  9875  003B5A  0E00               	movlw	0
  9876  003B5C  EC3A  F00C         	call	_InitSynth
  9877                           
  9878                           ;SyntApp.c: 24: InitSynth(SYNTH_RX);
  9879  003B60  0E01               	movlw	1
  9880  003B62  EC3A  F00C         	call	_InitSynth
  9881  003B66  0012               	return		;funcret
  9882  003B68                     __end_of_PLLInitialize:
  9883                           	opt stack 0
  9884                           tosu	equ	0xFFF
  9885                           tosh	equ	0xFFE
  9886                           tosl	equ	0xFFD
  9887                           pclath	equ	0xFFA
  9888                           tblptru	equ	0xFF8
  9889                           tblptrh	equ	0xFF7
  9890                           tblptrl	equ	0xFF6
  9891                           tablat	equ	0xFF5
  9892                           prodh	equ	0xFF4
  9893                           prodl	equ	0xFF3
  9894                           intcon	equ	0xFF2
  9895                           intcon2	equ	0xFF1
  9896                           postinc0	equ	0xFEE
  9897                           plusw0	equ	0xFEB
  9898                           wreg	equ	0xFE8
  9899                           indf1	equ	0xFE7
  9900                           postinc1	equ	0xFE6
  9901                           postdec1	equ	0xFE5
  9902                           fsr1h	equ	0xFE2
  9903                           fsr1l	equ	0xFE1
  9904                           indf2	equ	0xFDF
  9905                           postinc2	equ	0xFDE
  9906                           postdec2	equ	0xFDD
  9907                           plusw2	equ	0xFDB
  9908                           fsr2h	equ	0xFDA
  9909                           fsr2l	equ	0xFD9
  9910                           status	equ	0xFD8
  9911                           
  9912 ;; *************** function _InitSynth *****************
  9913 ;; Defined at:
  9914 ;;		line 27 in file "SyntApp.c"
  9915 ;; Parameters:    Size  Location     Type
  9916 ;;  cType           1    wreg     enum E1
  9917 ;; Auto vars:     Size  Location     Type
  9918 ;;  cType           1  109[BANK0 ] enum E1
  9919 ;;  idx             1  108[BANK0 ] unsigned char 
  9920 ;;  EepromVal       4  104[BANK0 ] unsigned long 
  9921 ;;  regNum          1  110[BANK0 ] unsigned char 
  9922 ;; Return value:  Size  Location     Type
  9923 ;;                  1    wreg      void 
  9924 ;; Registers used:
  9925 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9926 ;; Tracked objects:
  9927 ;;		On entry : 0/0
  9928 ;;		On exit  : 0/0
  9929 ;;		Unchanged: 0/0
  9930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9931 ;;      Params:         0       0       0       0       0       0       0
  9932 ;;      Locals:         0       7       0       0       0       0       0
  9933 ;;      Temps:          0       0       0       0       0       0       0
  9934 ;;      Totals:         0       7       0       0       0       0       0
  9935 ;;Total ram usage:        7 bytes
  9936 ;; Hardware stack levels used:    1
  9937 ;; Hardware stack levels required when called:    9
  9938 ;; This function calls:
  9939 ;;		_ReadIntFromEeprom
  9940 ;;		_SWSPI_send_word
  9941 ;;		_SwSpi_Set_CE_Pin
  9942 ;; This function is called by:
  9943 ;;		_PLLInitialize
  9944 ;;		_SetSynthOper
  9945 ;; This function uses a non-reentrant model
  9946 ;;
  9947                           
  9948                           	psect	text59
  9949  001874                     __ptext59:
  9950                           	opt stack 0
  9951  001874                     _InitSynth:
  9952                           	opt stack 18
  9953                           
  9954                           ;incstack = 0
  9955                           ;InitSynth@cType stored from wreg
  9956  001874  0100               	movlb	0	; () banked
  9957  001876  6FCD               	movwf	InitSynth@cType& (0+255),b
  9958                           
  9959                           ;SyntApp.c: 29: SwSpi_Set_CE_Pin(cType, 1);
  9960  001878  0E01               	movlw	1
  9961  00187A  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  9962  00187C  0100               	movlb	0	; () banked
  9963  00187E  51CD               	movf	InitSynth@cType& (0+255),w,b
  9964  001880  ECD8  F01A         	call	_SwSpi_Set_CE_Pin
  9965                           
  9966                           ;SyntApp.c: 31: uint8_t regNum = 0;
  9967  001884  0E00               	movlw	0
  9968  001886  0100               	movlb	0	; () banked
  9969  001888  6FCE               	movwf	InitSynth@regNum& (0+255),b
  9970                           
  9971                           ; BSR set to: 0
  9972                           ;SyntApp.c: 32: uint32_t EepromVal = 0x0;
  9973  00188A  0E00               	movlw	0
  9974  00188C  6FC8               	movwf	InitSynth@EepromVal& (0+255),b
  9975  00188E  0E00               	movlw	0
  9976  001890  6FC9               	movwf	(InitSynth@EepromVal+1)& (0+255),b
  9977  001892  0E00               	movlw	0
  9978  001894  6FCA               	movwf	(InitSynth@EepromVal+2)& (0+255),b
  9979  001896  0E00               	movlw	0
  9980  001898  6FCB               	movwf	(InitSynth@EepromVal+3)& (0+255),b
  9981                           
  9982                           ; BSR set to: 0
  9983                           ;SyntApp.c: 35: for(uint8_t idx = 0; idx < 13; idx++)
  9984  00189A  0E00               	movlw	0
  9985  00189C  6FCC               	movwf	InitSynth@idx& (0+255),b
  9986  00189E                     l7577:
  9987                           
  9988                           ; BSR set to: 0
  9989  00189E  0E0C               	movlw	12
  9990  0018A0  65CC               	cpfsgt	InitSynth@idx& (0+255),b
  9991  0018A2  D001               	goto	l488
  9992  0018A4  0012               	return	
  9993  0018A6                     l488:
  9994                           
  9995                           ; BSR set to: 0
  9996                           ;SyntApp.c: 36: {
  9997                           ;SyntApp.c: 37: regNum = 13 - idx - 1;
  9998                           
  9999                           ; BSR set to: 0
 10000  0018A6  29CC               	incf	InitSynth@idx& (0+255),w,b
 10001  0018A8  0800               	sublw	0
 10002  0018AA  0F0D               	addlw	13
 10003  0018AC  6FCE               	movwf	InitSynth@regNum& (0+255),b
 10004                           
 10005                           ; BSR set to: 0
 10006                           ;SyntApp.c: 38: if(regNum == 0x0 || regNum == 0x1 || regNum == 0x2 || regNum == 0x4 || r
      +                          egNum == 0x6 || regNum == 0xA)
 10007  0018AE  51CE               	movf	InitSynth@regNum& (0+255),w,b
 10008  0018B0  B4D8               	btfsc	status,2,c
 10009  0018B2  D013               	goto	u7890
 10010                           
 10011                           ; BSR set to: 0
 10012  0018B4  05CE               	decf	InitSynth@regNum& (0+255),w,b
 10013  0018B6  B4D8               	btfsc	status,2,c
 10014  0018B8  D010               	goto	u7890
 10015                           
 10016                           ; BSR set to: 0
 10017  0018BA  0E02               	movlw	2
 10018  0018BC  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 10019  0018BE  B4D8               	btfsc	status,2,c
 10020  0018C0  D00C               	goto	u7890
 10021                           
 10022                           ; BSR set to: 0
 10023  0018C2  0E04               	movlw	4
 10024  0018C4  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 10025  0018C6  B4D8               	btfsc	status,2,c
 10026  0018C8  D008               	goto	u7890
 10027                           
 10028                           ; BSR set to: 0
 10029  0018CA  0E06               	movlw	6
 10030  0018CC  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 10031  0018CE  B4D8               	btfsc	status,2,c
 10032  0018D0  D004               	goto	u7890
 10033                           
 10034                           ; BSR set to: 0
 10035  0018D2  0E0A               	movlw	10
 10036  0018D4  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 10037  0018D6  A4D8               	btfss	status,2,c
 10038  0018D8  D064               	goto	l490
 10039  0018DA                     u7890:
 10040                           
 10041                           ; BSR set to: 0
 10042                           ;SyntApp.c: 39: {
 10043                           ;SyntApp.c: 40: if(cType == SYNTH_TX)
 10044                           
 10045                           ; BSR set to: 0
 10046  0018DA  51CD               	movf	InitSynth@cType& (0+255),w,b
 10047  0018DC  A4D8               	btfss	status,2,c
 10048  0018DE  D011               	goto	l493
 10049                           
 10050                           ; BSR set to: 0
 10051                           ;SyntApp.c: 41: {
 10052                           ;SyntApp.c: 42: EepromVal = ReadIntFromEeprom((0) | SYNTH_ADDRES[regNum], 4);
 10053  0018E0  0E00               	movlw	0
 10054  0018E2  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 10055  0018E4  0E04               	movlw	4
 10056  0018E6  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 10057  0018E8  51CE               	movf	InitSynth@regNum& (0+255),w,b
 10058  0018EA  0D01               	mullw	1
 10059  0018EC  0E35               	movlw	low _SYNTH_ADDRES
 10060  0018EE  24F3               	addwf	prodl,w,c
 10061  0018F0  6EF6               	movwf	tblptrl,c
 10062  0018F2  0E06               	movlw	high _SYNTH_ADDRES
 10063  0018F4  20F4               	addwfc	prodh,w,c
 10064  0018F6  6EF7               	movwf	tblptrh,c
 10065  0018F8                     	if	0	;There are less than 3 active tblptr bytes
 10066  0018F8                     	endif
 10067  0018F8  0008               	tblrd		*
 10068  0018FA  50F5               	movf	tablat,w,c
 10069  0018FC  EC83  F00D         	call	_ReadIntFromEeprom
 10070  001900  D015               	goto	L2
 10071  001902                     l493:
 10072                           
 10073                           ;SyntApp.c: 44: else if (cType == SYNTH_RX)
 10074  001902  0100               	movlb	0	; () banked
 10075  001904  05CD               	decf	InitSynth@cType& (0+255),w,b
 10076  001906  A4D8               	btfss	status,2,c
 10077  001908  D019               	goto	l495
 10078                           
 10079                           ; BSR set to: 0
 10080                           ;SyntApp.c: 45: {
 10081                           ;SyntApp.c: 46: EepromVal = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[regNum], 4);
 10082  00190A  0E00               	movlw	0
 10083  00190C  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 10084  00190E  0E04               	movlw	4
 10085  001910  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 10086  001912  51CE               	movf	InitSynth@regNum& (0+255),w,b
 10087  001914  0D01               	mullw	1
 10088  001916  0E35               	movlw	low _SYNTH_ADDRES
 10089  001918  24F3               	addwf	prodl,w,c
 10090  00191A  6EF6               	movwf	tblptrl,c
 10091  00191C  0E06               	movlw	high _SYNTH_ADDRES
 10092  00191E  20F4               	addwfc	prodh,w,c
 10093  001920  6EF7               	movwf	tblptrh,c
 10094  001922                     	if	0	;There are less than 3 active tblptr bytes
 10095  001922                     	endif
 10096  001922  0008               	tblrd		*
 10097  001924  50F5               	movf	tablat,w,c
 10098  001926  0920               	iorlw	32
 10099  001928  EC83  F00D         	call	_ReadIntFromEeprom
 10100  00192C                     L2:
 10101  00192C  C0B1  F0C8         	movff	?_ReadIntFromEeprom,InitSynth@EepromVal
 10102  001930  C0B2  F0C9         	movff	?_ReadIntFromEeprom+1,InitSynth@EepromVal+1
 10103  001934  C0B3  F0CA         	movff	?_ReadIntFromEeprom+2,InitSynth@EepromVal+2
 10104  001938  C0B4  F0CB         	movff	?_ReadIntFromEeprom+3,InitSynth@EepromVal+3
 10105  00193C                     l495:
 10106                           
 10107                           ;SyntApp.c: 47: }
 10108                           ;SyntApp.c: 49: if(EepromVal == 0xFFFFFFFF)
 10109  00193C  0100               	movlb	0	; () banked
 10110  00193E  29C8               	incf	InitSynth@EepromVal& (0+255),w,b
 10111  001940  E121               	bnz	l7607
 10112  001942  29C9               	incf	(InitSynth@EepromVal+1)& (0+255),w,b
 10113  001944  E11F               	bnz	l7607
 10114  001946  29CA               	incf	(InitSynth@EepromVal+2)& (0+255),w,b
 10115  001948  E11D               	bnz	l7607
 10116  00194A  29CB               	incf	(InitSynth@EepromVal+3)& (0+255),w,b
 10117  00194C  A4D8               	btfss	status,2,c
 10118  00194E  D01A               	goto	l496
 10119                           
 10120                           ; BSR set to: 0
 10121                           ;SyntApp.c: 50: {
 10122                           ;SyntApp.c: 51: SWSPI_send_word(cType, SYNTH_REGS[idx],3);
 10123  001950  51CC               	movf	InitSynth@idx& (0+255),w,b
 10124  001952  0D04               	mullw	4
 10125  001954  0E01               	movlw	low _SYNTH_REGS
 10126  001956  24F3               	addwf	prodl,w,c
 10127  001958  6EF6               	movwf	tblptrl,c
 10128  00195A  0E06               	movlw	high _SYNTH_REGS
 10129  00195C  20F4               	addwfc	prodh,w,c
 10130  00195E  6EF7               	movwf	tblptrh,c
 10131  001960                     	if	0	;There are less than 3 active tblptr bytes
 10132  001960                     	endif
 10133  001960  0009               	tblrd		*+
 10134  001962  CFF5 F026          	movff	tablat,SWSPI_send_word@data
 10135  001966  0009               	tblrd		*+
 10136  001968  CFF5 F027          	movff	tablat,SWSPI_send_word@data+1
 10137  00196C  0009               	tblrd		*+
 10138  00196E  CFF5 F028          	movff	tablat,SWSPI_send_word@data+2
 10139  001972  000A               	tblrd		*-
 10140  001974  CFF5 F029          	movff	tablat,SWSPI_send_word@data+3
 10141  001978  0E03               	movlw	3
 10142  00197A  6E2A               	movwf	SWSPI_send_word@dataSize,c
 10143  00197C  51CD               	movf	InitSynth@cType& (0+255),w,b
 10144  00197E  EC21  F014         	call	_SWSPI_send_word
 10145                           
 10146                           ;SyntApp.c: 52: }
 10147  001982  D029               	goto	l498
 10148  001984                     l496:
 10149  001984                     l7607:
 10150                           
 10151                           ;SyntApp.c: 53: else
 10152                           ;SyntApp.c: 54: {
 10153                           ;SyntApp.c: 55: SWSPI_send_word(cType, EepromVal,3);
 10154  001984  C0C8  F026         	movff	InitSynth@EepromVal,SWSPI_send_word@data
 10155  001988  C0C9  F027         	movff	InitSynth@EepromVal+1,SWSPI_send_word@data+1
 10156  00198C  C0CA  F028         	movff	InitSynth@EepromVal+2,SWSPI_send_word@data+2
 10157  001990  C0CB  F029         	movff	InitSynth@EepromVal+3,SWSPI_send_word@data+3
 10158  001994  0E03               	movlw	3
 10159  001996  6E2A               	movwf	SWSPI_send_word@dataSize,c
 10160  001998  0100               	movlb	0	; () banked
 10161  00199A  51CD               	movf	InitSynth@cType& (0+255),w,b
 10162  00199C  EC21  F014         	call	_SWSPI_send_word
 10163                           
 10164                           ;SyntApp.c: 56: }
 10165                           ;SyntApp.c: 57: }
 10166  0019A0  D01A               	goto	l498
 10167  0019A2                     l490:
 10168                           
 10169                           ;SyntApp.c: 58: else
 10170                           ;SyntApp.c: 59: {
 10171                           ;SyntApp.c: 60: SWSPI_send_word(cType, SYNTH_REGS[idx],3);
 10172  0019A2  0100               	movlb	0	; () banked
 10173  0019A4  51CC               	movf	InitSynth@idx& (0+255),w,b
 10174  0019A6  0D04               	mullw	4
 10175  0019A8  0E01               	movlw	low _SYNTH_REGS
 10176  0019AA  24F3               	addwf	prodl,w,c
 10177  0019AC  6EF6               	movwf	tblptrl,c
 10178  0019AE  0E06               	movlw	high _SYNTH_REGS
 10179  0019B0  20F4               	addwfc	prodh,w,c
 10180  0019B2  6EF7               	movwf	tblptrh,c
 10181  0019B4                     	if	0	;There are less than 3 active tblptr bytes
 10182  0019B4                     	endif
 10183  0019B4  0009               	tblrd		*+
 10184  0019B6  CFF5 F026          	movff	tablat,SWSPI_send_word@data
 10185  0019BA  0009               	tblrd		*+
 10186  0019BC  CFF5 F027          	movff	tablat,SWSPI_send_word@data+1
 10187  0019C0  0009               	tblrd		*+
 10188  0019C2  CFF5 F028          	movff	tablat,SWSPI_send_word@data+2
 10189  0019C6  000A               	tblrd		*-
 10190  0019C8  CFF5 F029          	movff	tablat,SWSPI_send_word@data+3
 10191  0019CC  0E03               	movlw	3
 10192  0019CE  6E2A               	movwf	SWSPI_send_word@dataSize,c
 10193  0019D0  51CD               	movf	InitSynth@cType& (0+255),w,b
 10194  0019D2  EC21  F014         	call	_SWSPI_send_word
 10195  0019D6                     l498:
 10196  0019D6  0100               	movlb	0	; () banked
 10197  0019D8  2BCC               	incf	InitSynth@idx& (0+255),f,b
 10198  0019DA  D761               	goto	l7577
 10199  0019DC                     __end_of_InitSynth:
 10200                           	opt stack 0
 10201                           tosu	equ	0xFFF
 10202                           tosh	equ	0xFFE
 10203                           tosl	equ	0xFFD
 10204                           pclath	equ	0xFFA
 10205                           tblptru	equ	0xFF8
 10206                           tblptrh	equ	0xFF7
 10207                           tblptrl	equ	0xFF6
 10208                           tablat	equ	0xFF5
 10209                           prodh	equ	0xFF4
 10210                           prodl	equ	0xFF3
 10211                           intcon	equ	0xFF2
 10212                           intcon2	equ	0xFF1
 10213                           postinc0	equ	0xFEE
 10214                           plusw0	equ	0xFEB
 10215                           wreg	equ	0xFE8
 10216                           indf1	equ	0xFE7
 10217                           postinc1	equ	0xFE6
 10218                           postdec1	equ	0xFE5
 10219                           fsr1h	equ	0xFE2
 10220                           fsr1l	equ	0xFE1
 10221                           indf2	equ	0xFDF
 10222                           postinc2	equ	0xFDE
 10223                           postdec2	equ	0xFDD
 10224                           plusw2	equ	0xFDB
 10225                           fsr2h	equ	0xFDA
 10226                           fsr2l	equ	0xFD9
 10227                           status	equ	0xFD8
 10228                           
 10229 ;; *************** function _SwSpi_Set_CE_Pin *****************
 10230 ;; Defined at:
 10231 ;;		line 201 in file "SwSpiApp.c"
 10232 ;; Parameters:    Size  Location     Type
 10233 ;;  phrType         1    wreg     enum E1
 10234 ;;  cPinMode        1   23[COMRAM] unsigned char 
 10235 ;; Auto vars:     Size  Location     Type
 10236 ;;  phrType         1   24[COMRAM] enum E1
 10237 ;; Return value:  Size  Location     Type
 10238 ;;                  1    wreg      void 
 10239 ;; Registers used:
 10240 ;;		wreg, status,2, status,0
 10241 ;; Tracked objects:
 10242 ;;		On entry : 0/0
 10243 ;;		On exit  : 0/0
 10244 ;;		Unchanged: 0/0
 10245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10246 ;;      Params:         1       0       0       0       0       0       0
 10247 ;;      Locals:         1       0       0       0       0       0       0
 10248 ;;      Temps:          0       0       0       0       0       0       0
 10249 ;;      Totals:         2       0       0       0       0       0       0
 10250 ;;Total ram usage:        2 bytes
 10251 ;; Hardware stack levels used:    1
 10252 ;; Hardware stack levels required when called:    3
 10253 ;; This function calls:
 10254 ;;		Nothing
 10255 ;; This function is called by:
 10256 ;;		_InitSynth
 10257 ;;		_SetSynthOper
 10258 ;; This function uses a non-reentrant model
 10259 ;;
 10260                           
 10261                           	psect	text60
 10262  0035B0                     __ptext60:
 10263                           	opt stack 0
 10264  0035B0                     _SwSpi_Set_CE_Pin:
 10265                           	opt stack 24
 10266                           
 10267                           ; BSR set to: 0
 10268                           ;incstack = 0
 10269                           ;SwSpi_Set_CE_Pin@phrType stored from wreg
 10270  0035B0  6E19               	movwf	SwSpi_Set_CE_Pin@phrType,c
 10271                           
 10272                           ;SwSpiApp.c: 203: switch(phrType)
 10273  0035B2  D014               	goto	l685
 10274  0035B4                     
 10275                           ;SwSpiApp.c: 206: if(cPinMode == 1)
 10276  0035B4  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
 10277  0035B6  A4D8               	btfss	status,2,c
 10278  0035B8  D002               	goto	l687
 10279                           
 10280                           ;SwSpiApp.c: 207: {
 10281                           ;SwSpiApp.c: 208: do { LATCbits.LATC1 = 1; } while(0);
 10282  0035BA  828B               	bsf	3979,1,c	;volatile
 10283                           
 10284                           ;SwSpiApp.c: 209: }
 10285  0035BC  0012               	return	
 10286  0035BE                     l687:
 10287                           
 10288                           ;SwSpiApp.c: 210: else if(cPinMode == 0)
 10289  0035BE  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
 10290  0035C0  A4D8               	btfss	status,2,c
 10291  0035C2  0012               	return	
 10292                           
 10293                           ;SwSpiApp.c: 211: {
 10294                           ;SwSpiApp.c: 212: do { LATCbits.LATC1 = 0; } while(0);
 10295  0035C4  928B               	bcf	3979,1,c	;volatile
 10296                           
 10297                           ;SwSpiApp.c: 213: }
 10298                           ;SwSpiApp.c: 214: break;
 10299  0035C6  0012               	return	
 10300  0035C8                     
 10301                           ;SwSpiApp.c: 217: if(cPinMode == 1)
 10302  0035C8  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
 10303  0035CA  A4D8               	btfss	status,2,c
 10304  0035CC  D002               	goto	l696
 10305                           
 10306                           ;SwSpiApp.c: 218: {
 10307                           ;SwSpiApp.c: 219: do { LATDbits.LATD2 = 1; } while(0);
 10308  0035CE  848C               	bsf	3980,2,c	;volatile
 10309                           
 10310                           ;SwSpiApp.c: 220: }
 10311  0035D0  0012               	return	
 10312  0035D2                     l696:
 10313                           
 10314                           ;SwSpiApp.c: 221: else if(cPinMode == 0)
 10315  0035D2  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
 10316  0035D4  A4D8               	btfss	status,2,c
 10317  0035D6  0012               	return	
 10318                           
 10319                           ;SwSpiApp.c: 222: {
 10320                           ;SwSpiApp.c: 223: do { LATCbits.LATC1 = 0; } while(0);
 10321  0035D8  928B               	bcf	3979,1,c	;volatile
 10322                           
 10323                           ;SwSpiApp.c: 226: }
 10324                           
 10325                           ;SwSpiApp.c: 224: }
 10326                           ;SwSpiApp.c: 225: break;
 10327  0035DA  0012               	return	
 10328  0035DC                     l685:
 10329  0035DC  5019               	movf	SwSpi_Set_CE_Pin@phrType,w,c
 10330                           
 10331                           ; Switch size 1, requested type "space"
 10332                           ; Number of cases is 2, Range of values is 0 to 1
 10333                           ; switch strategies available:
 10334                           ; Name         Instructions Cycles
 10335                           ; simple_byte            7     4 (average)
 10336                           ;	Chosen strategy is simple_byte
 10337  0035DE  0A00               	xorlw	0	; case 0
 10338  0035E0  B4D8               	btfsc	status,2,c
 10339  0035E2  D7E8               	goto	l686
 10340  0035E4  0A01               	xorlw	1	; case 1
 10341  0035E6  A4D8               	btfss	status,2,c
 10342  0035E8  0012               	return	
 10343  0035EA  D7EE               	goto	l695
 10344  0035EC                     __end_of_SwSpi_Set_CE_Pin:
 10345                           	opt stack 0
 10346                           tosu	equ	0xFFF
 10347                           tosh	equ	0xFFE
 10348                           tosl	equ	0xFFD
 10349                           pclath	equ	0xFFA
 10350                           tblptru	equ	0xFF8
 10351                           tblptrh	equ	0xFF7
 10352                           tblptrl	equ	0xFF6
 10353                           tablat	equ	0xFF5
 10354                           prodh	equ	0xFF4
 10355                           prodl	equ	0xFF3
 10356                           intcon	equ	0xFF2
 10357                           intcon2	equ	0xFF1
 10358                           postinc0	equ	0xFEE
 10359                           plusw0	equ	0xFEB
 10360                           wreg	equ	0xFE8
 10361                           indf1	equ	0xFE7
 10362                           postinc1	equ	0xFE6
 10363                           postdec1	equ	0xFE5
 10364                           fsr1h	equ	0xFE2
 10365                           fsr1l	equ	0xFE1
 10366                           indf2	equ	0xFDF
 10367                           postinc2	equ	0xFDE
 10368                           postdec2	equ	0xFDD
 10369                           plusw2	equ	0xFDB
 10370                           fsr2h	equ	0xFDA
 10371                           fsr2l	equ	0xFD9
 10372                           status	equ	0xFD8
 10373                           
 10374 ;; *************** function _InitAdcApplicationMgr *****************
 10375 ;; Defined at:
 10376 ;;		line 22 in file "AdcApp.c"
 10377 ;; Parameters:    Size  Location     Type
 10378 ;;		None
 10379 ;; Auto vars:     Size  Location     Type
 10380 ;;  channel         1   23[COMRAM] unsigned char 
 10381 ;; Return value:  Size  Location     Type
 10382 ;;                  1    wreg      void 
 10383 ;; Registers used:
 10384 ;;		wreg, status,2
 10385 ;; Tracked objects:
 10386 ;;		On entry : 0/0
 10387 ;;		On exit  : 0/0
 10388 ;;		Unchanged: 0/0
 10389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10390 ;;      Params:         0       0       0       0       0       0       0
 10391 ;;      Locals:         1       0       0       0       0       0       0
 10392 ;;      Temps:          0       0       0       0       0       0       0
 10393 ;;      Totals:         1       0       0       0       0       0       0
 10394 ;;Total ram usage:        1 bytes
 10395 ;; Hardware stack levels used:    1
 10396 ;; Hardware stack levels required when called:    3
 10397 ;; This function calls:
 10398 ;;		Nothing
 10399 ;; This function is called by:
 10400 ;;		_InitSystemApplicationManagers
 10401 ;; This function uses a non-reentrant model
 10402 ;;
 10403                           
 10404                           	psect	text61
 10405  003B68                     __ptext61:
 10406                           	opt stack 0
 10407  003B68                     _InitAdcApplicationMgr:
 10408                           	opt stack 26
 10409                           
 10410                           ;AdcApp.c: 24: conversionFormat = CONVERSION_LEFT_FORAMT;
 10411                           
 10412                           ;incstack = 0
 10413  003B68  0E00               	movlw	0
 10414  003B6A  0101               	movlb	1	; () banked
 10415  003B6C  6F7A               	movwf	_conversionFormat& (0+255),b
 10416                           
 10417                           ;AdcApp.c: 25: adcSampleMode = CIRCULAR;
 10418  003B6E  0E00               	movlw	0
 10419  003B70  6E3B               	movwf	_adcSampleMode,c
 10420                           
 10421                           ;AdcApp.c: 26: char channel = 0;
 10422  003B72  0E00               	movlw	0
 10423  003B74  6E18               	movwf	InitAdcApplicationMgr@channel,c
 10424                           
 10425                           ; BSR set to: 1
 10426  003B76  0012               	return		;funcret
 10427  003B78                     __end_of_InitAdcApplicationMgr:
 10428                           	opt stack 0
 10429                           tosu	equ	0xFFF
 10430                           tosh	equ	0xFFE
 10431                           tosl	equ	0xFFD
 10432                           pclath	equ	0xFFA
 10433                           tblptru	equ	0xFF8
 10434                           tblptrh	equ	0xFF7
 10435                           tblptrl	equ	0xFF6
 10436                           tablat	equ	0xFF5
 10437                           prodh	equ	0xFF4
 10438                           prodl	equ	0xFF3
 10439                           intcon	equ	0xFF2
 10440                           intcon2	equ	0xFF1
 10441                           postinc0	equ	0xFEE
 10442                           plusw0	equ	0xFEB
 10443                           wreg	equ	0xFE8
 10444                           indf1	equ	0xFE7
 10445                           postinc1	equ	0xFE6
 10446                           postdec1	equ	0xFE5
 10447                           fsr1h	equ	0xFE2
 10448                           fsr1l	equ	0xFE1
 10449                           indf2	equ	0xFDF
 10450                           postinc2	equ	0xFDE
 10451                           postdec2	equ	0xFDD
 10452                           plusw2	equ	0xFDB
 10453                           fsr2h	equ	0xFDA
 10454                           fsr2l	equ	0xFD9
 10455                           status	equ	0xFD8
 10456                           
 10457 ;; *************** function _DacInit *****************
 10458 ;; Defined at:
 10459 ;;		line 24 in file "DacApp.c"
 10460 ;; Parameters:    Size  Location     Type
 10461 ;;		None
 10462 ;; Auto vars:     Size  Location     Type
 10463 ;;  dacInput        2  106[BANK0 ] unsigned int 
 10464 ;;  idx             1  108[BANK0 ] char 
 10465 ;; Return value:  Size  Location     Type
 10466 ;;                  1    wreg      void 
 10467 ;; Registers used:
 10468 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10469 ;; Tracked objects:
 10470 ;;		On entry : 0/0
 10471 ;;		On exit  : 0/0
 10472 ;;		Unchanged: 0/0
 10473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10474 ;;      Params:         0       0       0       0       0       0       0
 10475 ;;      Locals:         0       3       0       0       0       0       0
 10476 ;;      Temps:          0       2       0       0       0       0       0
 10477 ;;      Totals:         0       5       0       0       0       0       0
 10478 ;;Total ram usage:        5 bytes
 10479 ;; Hardware stack levels used:    1
 10480 ;; Hardware stack levels required when called:    9
 10481 ;; This function calls:
 10482 ;;		_ReadIntFromEeprom
 10483 ;;		_SWSPI_send_word
 10484 ;; This function is called by:
 10485 ;;		_InitSystemApplicationManagers
 10486 ;; This function uses a non-reentrant model
 10487 ;;
 10488                           
 10489                           	psect	text62
 10490  0028DC                     __ptext62:
 10491                           	opt stack 0
 10492  0028DC                     _DacInit:
 10493                           	opt stack 20
 10494                           
 10495                           ;DacApp.c: 26: for(int8_t idx = 0; idx < (4); idx++)
 10496                           
 10497                           ; BSR set to: 1
 10498                           ;incstack = 0
 10499  0028DC  0E00               	movlw	0
 10500  0028DE  0100               	movlb	0	; () banked
 10501  0028E0  6FCC               	movwf	DacInit@idx& (0+255),b
 10502  0028E2                     l8111:
 10503                           
 10504                           ; BSR set to: 0
 10505  0028E2  51CC               	movf	DacInit@idx& (0+255),w,b
 10506  0028E4  0A80               	xorlw	128
 10507  0028E6  0F7C               	addlw	-132
 10508  0028E8  B0D8               	btfsc	status,0,c
 10509  0028EA  0012               	return	
 10510                           
 10511                           ; BSR set to: 0
 10512                           ;DacApp.c: 27: {
 10513                           ;DacApp.c: 28: uint16_t dacInput = ReadIntFromEeprom((0x40) | DAC_ADDRES[idx], 2);
 10514                           
 10515                           ; BSR set to: 0
 10516                           
 10517                           ; BSR set to: 0
 10518  0028EC  0E00               	movlw	0
 10519  0028EE  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 10520  0028F0  0E02               	movlw	2
 10521  0028F2  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 10522  0028F4  51CC               	movf	DacInit@idx& (0+255),w,b
 10523  0028F6  0D01               	mullw	1
 10524  0028F8  0E51               	movlw	low _DAC_ADDRES
 10525  0028FA  24F3               	addwf	prodl,w,c
 10526  0028FC  6EF6               	movwf	tblptrl,c
 10527  0028FE  0E06               	movlw	high _DAC_ADDRES
 10528  002900  20F4               	addwfc	prodh,w,c
 10529  002902  6EF7               	movwf	tblptrh,c
 10530  002904                     	if	0	;There are less than 3 active tblptr bytes
 10531  002904                     	endif
 10532  002904  0008               	tblrd		*
 10533  002906  50F5               	movf	tablat,w,c
 10534  002908  0940               	iorlw	64
 10535  00290A  EC83  F00D         	call	_ReadIntFromEeprom
 10536  00290E  C0B1  F0CA         	movff	?_ReadIntFromEeprom,DacInit@dacInput
 10537  002912  C0B2  F0CB         	movff	?_ReadIntFromEeprom+1,DacInit@dacInput+1
 10538                           
 10539                           ;DacApp.c: 29: if(dacInput == 0xFFFF)
 10540  002916  0100               	movlb	0	; () banked
 10541  002918  29CA               	incf	DacInit@dacInput& (0+255),w,b
 10542  00291A  E11D               	bnz	l8121
 10543  00291C  29CB               	incf	(DacInit@dacInput+1)& (0+255),w,b
 10544  00291E  A4D8               	btfss	status,2,c
 10545  002920  D01A               	goto	l417
 10546                           
 10547                           ; BSR set to: 0
 10548                           ;DacApp.c: 30: {
 10549                           ;DacApp.c: 31: SWSPI_send_word(EXT_DAC, DAC_DEFAULT_INIT_VALUES[idx], 1);
 10550  002922  51CC               	movf	DacInit@idx& (0+255),w,b
 10551  002924  0D02               	mullw	2
 10552  002926  0E42               	movlw	low _DAC_DEFAULT_INIT_VALUES
 10553  002928  24F3               	addwf	prodl,w,c
 10554  00292A  6EF6               	movwf	tblptrl,c
 10555  00292C  0E06               	movlw	high _DAC_DEFAULT_INIT_VALUES
 10556  00292E  20F4               	addwfc	prodh,w,c
 10557  002930  6EF7               	movwf	tblptrh,c
 10558  002932                     	if	0	;There are less than 3 active tblptr bytes
 10559  002932                     	endif
 10560  002932  0009               	tblrd		*+
 10561  002934  CFF5 F0C8          	movff	tablat,??_DacInit
 10562  002938  0009               	tblrd		*+
 10563  00293A  CFF5 F0C9          	movff	tablat,??_DacInit+1
 10564  00293E  C0C8  F026         	movff	??_DacInit,SWSPI_send_word@data
 10565  002942  C0C9  F027         	movff	??_DacInit+1,SWSPI_send_word@data+1
 10566  002946  6A28               	clrf	SWSPI_send_word@data+2,c
 10567  002948  6A29               	clrf	SWSPI_send_word@data+3,c
 10568  00294A  0E01               	movlw	1
 10569  00294C  6E2A               	movwf	SWSPI_send_word@dataSize,c
 10570  00294E  0E02               	movlw	2
 10571  002950  EC21  F014         	call	_SWSPI_send_word
 10572                           
 10573                           ;DacApp.c: 32: }
 10574  002954  D00B               	goto	l418
 10575  002956                     l417:
 10576  002956                     l8121:
 10577                           
 10578                           ;DacApp.c: 33: else
 10579                           ;DacApp.c: 34: {
 10580                           ;DacApp.c: 35: SWSPI_send_word(EXT_DAC, dacInput, 1);
 10581  002956  C0CA  F026         	movff	DacInit@dacInput,SWSPI_send_word@data
 10582  00295A  C0CB  F027         	movff	DacInit@dacInput+1,SWSPI_send_word@data+1
 10583  00295E  6A28               	clrf	SWSPI_send_word@data+2,c
 10584  002960  6A29               	clrf	SWSPI_send_word@data+3,c
 10585  002962  0E01               	movlw	1
 10586  002964  6E2A               	movwf	SWSPI_send_word@dataSize,c
 10587  002966  0E02               	movlw	2
 10588  002968  EC21  F014         	call	_SWSPI_send_word
 10589  00296C                     l418:
 10590  00296C  0100               	movlb	0	; () banked
 10591  00296E  2BCC               	incf	DacInit@idx& (0+255),f,b
 10592  002970  D7B8               	goto	l8111
 10593  002972                     __end_of_DacInit:
 10594                           	opt stack 0
 10595                           tosu	equ	0xFFF
 10596                           tosh	equ	0xFFE
 10597                           tosl	equ	0xFFD
 10598                           pclath	equ	0xFFA
 10599                           tblptru	equ	0xFF8
 10600                           tblptrh	equ	0xFF7
 10601                           tblptrl	equ	0xFF6
 10602                           tablat	equ	0xFF5
 10603                           prodh	equ	0xFF4
 10604                           prodl	equ	0xFF3
 10605                           intcon	equ	0xFF2
 10606                           intcon2	equ	0xFF1
 10607                           postinc0	equ	0xFEE
 10608                           plusw0	equ	0xFEB
 10609                           wreg	equ	0xFE8
 10610                           indf1	equ	0xFE7
 10611                           postinc1	equ	0xFE6
 10612                           postdec1	equ	0xFE5
 10613                           fsr1h	equ	0xFE2
 10614                           fsr1l	equ	0xFE1
 10615                           indf2	equ	0xFDF
 10616                           postinc2	equ	0xFDE
 10617                           postdec2	equ	0xFDD
 10618                           plusw2	equ	0xFDB
 10619                           fsr2h	equ	0xFDA
 10620                           fsr2l	equ	0xFD9
 10621                           status	equ	0xFD8
 10622                           
 10623 ;; *************** function _SWSPI_send_word *****************
 10624 ;; Defined at:
 10625 ;;		line 17 in file "SwSpiApp.c"
 10626 ;; Parameters:    Size  Location     Type
 10627 ;;  phrType         1    wreg     enum E1
 10628 ;;  data            4   37[COMRAM] unsigned long 
 10629 ;;  dataSize        1   41[COMRAM] unsigned char 
 10630 ;; Auto vars:     Size  Location     Type
 10631 ;;  phrType         1   45[COMRAM] enum E1
 10632 ;;  datac           1   42[COMRAM] unsigned char 
 10633 ;;  idx             2   43[COMRAM] int 
 10634 ;; Return value:  Size  Location     Type
 10635 ;;                  1    wreg      void 
 10636 ;; Registers used:
 10637 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10638 ;; Tracked objects:
 10639 ;;		On entry : 0/0
 10640 ;;		On exit  : 0/0
 10641 ;;		Unchanged: 0/0
 10642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10643 ;;      Params:         5       0       0       0       0       0       0
 10644 ;;      Locals:         4       0       0       0       0       0       0
 10645 ;;      Temps:          0       0       0       0       0       0       0
 10646 ;;      Totals:         9       0       0       0       0       0       0
 10647 ;;Total ram usage:        9 bytes
 10648 ;; Hardware stack levels used:    1
 10649 ;; Hardware stack levels required when called:    6
 10650 ;; This function calls:
 10651 ;;		_SWSPI_DAC_send_bits
 10652 ;;		_SWSPI_Synth_send_bits
 10653 ;;		_SwSpi_Set_Dac_Sync_Pin
 10654 ;;		_SwSpi_Set_Synth_Le_Pin
 10655 ;;		_make8
 10656 ;; This function is called by:
 10657 ;;		_DacInit
 10658 ;;		_InitSynth
 10659 ;;		_UpdateSynthFreq
 10660 ;; This function uses a non-reentrant model
 10661 ;;
 10662                           
 10663                           	psect	text63
 10664  002842                     __ptext63:
 10665                           	opt stack 0
 10666  002842                     _SWSPI_send_word:
 10667                           	opt stack 21
 10668                           
 10669                           ; BSR set to: 0
 10670                           ;incstack = 0
 10671                           ;SWSPI_send_word@phrType stored from wreg
 10672  002842  6E2E               	movwf	SWSPI_send_word@phrType,c
 10673                           
 10674                           ;SwSpiApp.c: 19: (INTCONbits.GIE = 0);
 10675  002844  9EF2               	bcf	intcon,7,c	;volatile
 10676                           
 10677                           ;SwSpiApp.c: 23: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
 10678  002846  502E               	movf	SWSPI_send_word@phrType,w,c
 10679  002848  B4D8               	btfsc	status,2,c
 10680  00284A  D003               	goto	u7580
 10681  00284C  042E               	decf	SWSPI_send_word@phrType,w,c
 10682  00284E  A4D8               	btfss	status,2,c
 10683  002850  D016               	goto	l594
 10684  002852                     u7580:
 10685                           
 10686                           ;SwSpiApp.c: 24: {
 10687                           ;SwSpiApp.c: 25: SwSpi_Set_Synth_Le_Pin(phrType, 0);
 10688  002852  0E00               	movlw	0
 10689  002854  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 10690  002856  502E               	movf	SWSPI_send_word@phrType,w,c
 10691  002858  ECF6  F01A         	call	_SwSpi_Set_Synth_Le_Pin
 10692                           
 10693                           ;SwSpiApp.c: 26: SWSPI_Synth_send_bits(phrType, data);
 10694  00285C  C026  F022         	movff	SWSPI_send_word@data,SWSPI_Synth_send_bits@data
 10695  002860  C027  F023         	movff	SWSPI_send_word@data+1,SWSPI_Synth_send_bits@data+1
 10696  002864  C028  F024         	movff	SWSPI_send_word@data+2,SWSPI_Synth_send_bits@data+2
 10697  002868  C029  F025         	movff	SWSPI_send_word@data+3,SWSPI_Synth_send_bits@data+3
 10698  00286C  502E               	movf	SWSPI_send_word@phrType,w,c
 10699  00286E  EC16  F013         	call	_SWSPI_Synth_send_bits
 10700                           
 10701                           ;SwSpiApp.c: 27: SwSpi_Set_Synth_Le_Pin(phrType, 1);
 10702  002872  0E01               	movlw	1
 10703  002874  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 10704  002876  502E               	movf	SWSPI_send_word@phrType,w,c
 10705  002878  ECF6  F01A         	call	_SwSpi_Set_Synth_Le_Pin
 10706                           
 10707                           ;SwSpiApp.c: 28: }
 10708  00287C  D02D               	goto	l598
 10709  00287E                     l594:
 10710                           
 10711                           ;SwSpiApp.c: 29: else if(phrType == EXT_DAC)
 10712  00287E  0E02               	movlw	2
 10713  002880  182E               	xorwf	SWSPI_send_word@phrType,w,c
 10714  002882  A4D8               	btfss	status,2,c
 10715  002884  D029               	goto	l598
 10716                           
 10717                           ;SwSpiApp.c: 30: {
 10718                           ;SwSpiApp.c: 31: SwSpi_Set_Dac_Sync_Pin(0);
 10719  002886  0E00               	movlw	0
 10720  002888  EC47  F01D         	call	_SwSpi_Set_Dac_Sync_Pin
 10721                           
 10722                           ;SwSpiApp.c: 32: for(int idx = dataSize + 1; idx > 0; idx--)
 10723  00288C  0E01               	movlw	1
 10724  00288E  242A               	addwf	SWSPI_send_word@dataSize,w,c
 10725  002890  6E2C               	movwf	SWSPI_send_word@idx,c
 10726  002892  6A2D               	clrf	SWSPI_send_word@idx+1,c
 10727  002894  0E00               	movlw	0
 10728  002896  222D               	addwfc	SWSPI_send_word@idx+1,f,c
 10729  002898                     l7447:
 10730  002898  BE2D               	btfsc	SWSPI_send_word@idx+1,7,c
 10731  00289A  D01B               	goto	u7610
 10732  00289C  502D               	movf	SWSPI_send_word@idx+1,w,c
 10733  00289E  E103               	bnz	l7451
 10734  0028A0  042C               	decf	SWSPI_send_word@idx,w,c
 10735  0028A2  A0D8               	btfss	status,0,c
 10736  0028A4  D016               	goto	u7610
 10737  0028A6                     l7451:
 10738                           
 10739                           ;SwSpiApp.c: 33: {
 10740                           ;SwSpiApp.c: 34: uint8_t datac = make8(data, idx - 1);
 10741  0028A6  C026  F018         	movff	SWSPI_send_word@data,make8@data
 10742  0028AA  C027  F019         	movff	SWSPI_send_word@data+1,make8@data+1
 10743  0028AE  C028  F01A         	movff	SWSPI_send_word@data+2,make8@data+2
 10744  0028B2  C029  F01B         	movff	SWSPI_send_word@data+3,make8@data+3
 10745  0028B6  042C               	decf	SWSPI_send_word@idx,w,c
 10746  0028B8  6E1C               	movwf	make8@dataLocation,c
 10747  0028BA  EC1C  F018         	call	_make8	;wreg free
 10748  0028BE  6E2B               	movwf	SWSPI_send_word@datac,c
 10749                           
 10750                           ;SwSpiApp.c: 35: SWSPI_DAC_send_bits(phrType, datac);
 10751  0028C0  C02B  F01A         	movff	SWSPI_send_word@datac,SWSPI_DAC_send_bits@data
 10752  0028C4  502E               	movf	SWSPI_send_word@phrType,w,c
 10753  0028C6  ECA4  F018         	call	_SWSPI_DAC_send_bits
 10754  0028CA  062C               	decf	SWSPI_send_word@idx,f,c
 10755  0028CC  A0D8               	btfss	status,0,c
 10756  0028CE  062D               	decf	SWSPI_send_word@idx+1,f,c
 10757  0028D0  D7E3               	goto	l7447
 10758  0028D2                     u7610:
 10759                           
 10760                           ;SwSpiApp.c: 36: }
 10761                           ;SwSpiApp.c: 37: SwSpi_Set_Dac_Sync_Pin(1);
 10762  0028D2  0E01               	movlw	1
 10763  0028D4  EC47  F01D         	call	_SwSpi_Set_Dac_Sync_Pin
 10764  0028D8                     l598:
 10765                           
 10766                           ;SwSpiApp.c: 38: }
 10767                           ;SwSpiApp.c: 40: (INTCONbits.GIE = 1);
 10768  0028D8  8EF2               	bsf	intcon,7,c	;volatile
 10769  0028DA  0012               	return		;funcret
 10770  0028DC                     __end_of_SWSPI_send_word:
 10771                           	opt stack 0
 10772                           tosu	equ	0xFFF
 10773                           tosh	equ	0xFFE
 10774                           tosl	equ	0xFFD
 10775                           pclath	equ	0xFFA
 10776                           tblptru	equ	0xFF8
 10777                           tblptrh	equ	0xFF7
 10778                           tblptrl	equ	0xFF6
 10779                           tablat	equ	0xFF5
 10780                           prodh	equ	0xFF4
 10781                           prodl	equ	0xFF3
 10782                           intcon	equ	0xFF2
 10783                           intcon2	equ	0xFF1
 10784                           postinc0	equ	0xFEE
 10785                           plusw0	equ	0xFEB
 10786                           wreg	equ	0xFE8
 10787                           indf1	equ	0xFE7
 10788                           postinc1	equ	0xFE6
 10789                           postdec1	equ	0xFE5
 10790                           fsr1h	equ	0xFE2
 10791                           fsr1l	equ	0xFE1
 10792                           indf2	equ	0xFDF
 10793                           postinc2	equ	0xFDE
 10794                           postdec2	equ	0xFDD
 10795                           plusw2	equ	0xFDB
 10796                           fsr2h	equ	0xFDA
 10797                           fsr2l	equ	0xFD9
 10798                           status	equ	0xFD8
 10799                           
 10800 ;; *************** function _make8 *****************
 10801 ;; Defined at:
 10802 ;;		line 79 in file "SystemCommon.c"
 10803 ;; Parameters:    Size  Location     Type
 10804 ;;  data            4   23[COMRAM] unsigned long 
 10805 ;;  dataLocation    1   27[COMRAM] unsigned char 
 10806 ;; Auto vars:     Size  Location     Type
 10807 ;;		None
 10808 ;; Return value:  Size  Location     Type
 10809 ;;                  1    wreg      unsigned char 
 10810 ;; Registers used:
 10811 ;;		wreg, status,2, status,0
 10812 ;; Tracked objects:
 10813 ;;		On entry : 0/0
 10814 ;;		On exit  : 0/0
 10815 ;;		Unchanged: 0/0
 10816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10817 ;;      Params:         5       0       0       0       0       0       0
 10818 ;;      Locals:         0       0       0       0       0       0       0
 10819 ;;      Temps:          4       0       0       0       0       0       0
 10820 ;;      Totals:         9       0       0       0       0       0       0
 10821 ;;Total ram usage:        9 bytes
 10822 ;; Hardware stack levels used:    1
 10823 ;; Hardware stack levels required when called:    3
 10824 ;; This function calls:
 10825 ;;		Nothing
 10826 ;; This function is called by:
 10827 ;;		_FlashReadCondition
 10828 ;;		_SynthReadData
 10829 ;;		_SWSPI_send_word
 10830 ;;		_StoreIntInEeprom
 10831 ;; This function uses a non-reentrant model
 10832 ;;
 10833                           
 10834                           	psect	text64
 10835  003038                     __ptext64:
 10836                           	opt stack 0
 10837  003038                     _make8:
 10838                           	opt stack 23
 10839                           
 10840                           ;SystemCommon.c: 81: switch(dataLocation)
 10841                           
 10842                           ;incstack = 0
 10843  003038  D01F               	goto	l1311
 10844  00303A                     
 10845                           ;SystemCommon.c: 84: return (data & 0x000000ff);
 10846  00303A  5018               	movf	make8@data,w,c
 10847  00303C  0012               	return	
 10848  00303E                     
 10849                           ;SystemCommon.c: 87: return (data & 0x0000ff00) >> 8;
 10850  00303E  5019               	movf	make8@data+1,w,c
 10851  003040  0012               	return	
 10852  003042                     
 10853                           ;SystemCommon.c: 90: return (data & 0x00ff0000) >> 16;
 10854  003042  501A               	movf	make8@data+2,w,c
 10855  003044  0012               	return	
 10856  003046                     
 10857                           ;SystemCommon.c: 93: return (data & 0xff000000) >> 24;
 10858  003046  0E00               	movlw	0
 10859  003048  1418               	andwf	make8@data,w,c
 10860  00304A  6E1D               	movwf	??_make8& (0+255),c
 10861  00304C  0E00               	movlw	0
 10862  00304E  1419               	andwf	make8@data+1,w,c
 10863  003050  6E1E               	movwf	(??_make8+1)& (0+255),c
 10864  003052  0E00               	movlw	0
 10865  003054  141A               	andwf	make8@data+2,w,c
 10866  003056  6E1F               	movwf	(??_make8+2)& (0+255),c
 10867  003058  0EFF               	movlw	255
 10868  00305A  141B               	andwf	make8@data+3,w,c
 10869  00305C  6E20               	movwf	(??_make8+3)& (0+255),c
 10870  00305E  0E19               	movlw	25
 10871  003060  D005               	goto	u7320
 10872  003062                     u7325:
 10873  003062  90D8               	bcf	status,0,c
 10874  003064  3220               	rrcf	??_make8+3,f,c
 10875  003066  321F               	rrcf	??_make8+2,f,c
 10876  003068  321E               	rrcf	??_make8+1,f,c
 10877  00306A  321D               	rrcf	??_make8,f,c
 10878  00306C                     u7320:
 10879  00306C  2EE8               	decfsz	wreg,f,c
 10880  00306E  D7F9               	goto	u7325
 10881  003070  501D               	movf	??_make8,w,c
 10882  003072  0012               	return	
 10883  003074                     
 10884                           ;SystemCommon.c: 96: return (0);
 10885  003074  0E00               	movlw	0
 10886                           
 10887                           ;SystemCommon.c: 97: }
 10888  003076  0012               	return	
 10889  003078                     l1311:
 10890  003078  501C               	movf	make8@dataLocation,w,c
 10891                           
 10892                           ; Switch size 1, requested type "space"
 10893                           ; Number of cases is 4, Range of values is 0 to 3
 10894                           ; switch strategies available:
 10895                           ; Name         Instructions Cycles
 10896                           ; simple_byte           13     7 (average)
 10897                           ;	Chosen strategy is simple_byte
 10898  00307A  0A00               	xorlw	0	; case 0
 10899  00307C  B4D8               	btfsc	status,2,c
 10900  00307E  D7DD               	goto	l1312
 10901  003080  0A01               	xorlw	1	; case 1
 10902  003082  B4D8               	btfsc	status,2,c
 10903  003084  D7DC               	goto	l1314
 10904  003086  0A03               	xorlw	3	; case 2
 10905  003088  B4D8               	btfsc	status,2,c
 10906  00308A  D7DB               	goto	l1315
 10907  00308C  0A01               	xorlw	1	; case 3
 10908  00308E  B4D8               	btfsc	status,2,c
 10909  003090  D7DA               	goto	l1316
 10910  003092  D7F0               	goto	l1317
 10911  003094                     __end_of_make8:
 10912                           	opt stack 0
 10913                           tosu	equ	0xFFF
 10914                           tosh	equ	0xFFE
 10915                           tosl	equ	0xFFD
 10916                           pclath	equ	0xFFA
 10917                           tblptru	equ	0xFF8
 10918                           tblptrh	equ	0xFF7
 10919                           tblptrl	equ	0xFF6
 10920                           tablat	equ	0xFF5
 10921                           prodh	equ	0xFF4
 10922                           prodl	equ	0xFF3
 10923                           intcon	equ	0xFF2
 10924                           intcon2	equ	0xFF1
 10925                           postinc0	equ	0xFEE
 10926                           plusw0	equ	0xFEB
 10927                           wreg	equ	0xFE8
 10928                           indf1	equ	0xFE7
 10929                           postinc1	equ	0xFE6
 10930                           postdec1	equ	0xFE5
 10931                           fsr1h	equ	0xFE2
 10932                           fsr1l	equ	0xFE1
 10933                           indf2	equ	0xFDF
 10934                           postinc2	equ	0xFDE
 10935                           postdec2	equ	0xFDD
 10936                           plusw2	equ	0xFDB
 10937                           fsr2h	equ	0xFDA
 10938                           fsr2l	equ	0xFD9
 10939                           status	equ	0xFD8
 10940                           
 10941 ;; *************** function _SwSpi_Set_Synth_Le_Pin *****************
 10942 ;; Defined at:
 10943 ;;		line 232 in file "SwSpiApp.c"
 10944 ;; Parameters:    Size  Location     Type
 10945 ;;  phrType         1    wreg     enum E1
 10946 ;;  cPinMode        1   23[COMRAM] unsigned char 
 10947 ;; Auto vars:     Size  Location     Type
 10948 ;;  phrType         1   24[COMRAM] enum E1
 10949 ;; Return value:  Size  Location     Type
 10950 ;;                  1    wreg      void 
 10951 ;; Registers used:
 10952 ;;		wreg, status,2, status,0
 10953 ;; Tracked objects:
 10954 ;;		On entry : 0/0
 10955 ;;		On exit  : 0/0
 10956 ;;		Unchanged: 0/0
 10957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10958 ;;      Params:         1       0       0       0       0       0       0
 10959 ;;      Locals:         1       0       0       0       0       0       0
 10960 ;;      Temps:          0       0       0       0       0       0       0
 10961 ;;      Totals:         2       0       0       0       0       0       0
 10962 ;;Total ram usage:        2 bytes
 10963 ;; Hardware stack levels used:    1
 10964 ;; Hardware stack levels required when called:    3
 10965 ;; This function calls:
 10966 ;;		Nothing
 10967 ;; This function is called by:
 10968 ;;		_SWSPI_send_word
 10969 ;; This function uses a non-reentrant model
 10970 ;;
 10971                           
 10972                           	psect	text65
 10973  0035EC                     __ptext65:
 10974                           	opt stack 0
 10975  0035EC                     _SwSpi_Set_Synth_Le_Pin:
 10976                           	opt stack 23
 10977                           
 10978                           ;incstack = 0
 10979                           ;SwSpi_Set_Synth_Le_Pin@phrType stored from wreg
 10980  0035EC  6E19               	movwf	SwSpi_Set_Synth_Le_Pin@phrType,c
 10981                           
 10982                           ;SwSpiApp.c: 234: switch(phrType)
 10983  0035EE  D014               	goto	l706
 10984  0035F0                     
 10985                           ;SwSpiApp.c: 237: if(cPinMode == 1)
 10986  0035F0  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10987  0035F2  A4D8               	btfss	status,2,c
 10988  0035F4  D002               	goto	l708
 10989                           
 10990                           ;SwSpiApp.c: 238: {
 10991                           ;SwSpiApp.c: 239: do { LATCbits.LATC2 = 1; } while(0);
 10992  0035F6  848B               	bsf	3979,2,c	;volatile
 10993                           
 10994                           ;SwSpiApp.c: 240: }
 10995  0035F8  0012               	return	
 10996  0035FA                     l708:
 10997                           
 10998                           ;SwSpiApp.c: 241: else if(cPinMode == 0)
 10999  0035FA  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 11000  0035FC  A4D8               	btfss	status,2,c
 11001  0035FE  0012               	return	
 11002                           
 11003                           ;SwSpiApp.c: 242: {
 11004                           ;SwSpiApp.c: 243: do { LATCbits.LATC2 = 0; } while(0);
 11005  003600  948B               	bcf	3979,2,c	;volatile
 11006                           
 11007                           ;SwSpiApp.c: 244: }
 11008                           ;SwSpiApp.c: 245: break;
 11009  003602  0012               	return	
 11010  003604                     
 11011                           ;SwSpiApp.c: 248: if(cPinMode == 1)
 11012  003604  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 11013  003606  A4D8               	btfss	status,2,c
 11014  003608  D002               	goto	l717
 11015                           
 11016                           ;SwSpiApp.c: 249: {
 11017                           ;SwSpiApp.c: 250: do { LATDbits.LATD3 = 1; } while(0);
 11018  00360A  868C               	bsf	3980,3,c	;volatile
 11019                           
 11020                           ;SwSpiApp.c: 251: }
 11021  00360C  0012               	return	
 11022  00360E                     l717:
 11023                           
 11024                           ;SwSpiApp.c: 252: else if(cPinMode == 0)
 11025  00360E  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 11026  003610  A4D8               	btfss	status,2,c
 11027  003612  0012               	return	
 11028                           
 11029                           ;SwSpiApp.c: 253: {
 11030                           ;SwSpiApp.c: 254: do { LATDbits.LATD3 = 0; } while(0);
 11031  003614  968C               	bcf	3980,3,c	;volatile
 11032                           
 11033                           ;SwSpiApp.c: 257: }
 11034                           
 11035                           ;SwSpiApp.c: 255: }
 11036                           ;SwSpiApp.c: 256: break;
 11037  003616  0012               	return	
 11038  003618                     l706:
 11039  003618  5019               	movf	SwSpi_Set_Synth_Le_Pin@phrType,w,c
 11040                           
 11041                           ; Switch size 1, requested type "space"
 11042                           ; Number of cases is 2, Range of values is 0 to 1
 11043                           ; switch strategies available:
 11044                           ; Name         Instructions Cycles
 11045                           ; simple_byte            7     4 (average)
 11046                           ;	Chosen strategy is simple_byte
 11047  00361A  0A00               	xorlw	0	; case 0
 11048  00361C  B4D8               	btfsc	status,2,c
 11049  00361E  D7E8               	goto	l707
 11050  003620  0A01               	xorlw	1	; case 1
 11051  003622  A4D8               	btfss	status,2,c
 11052  003624  0012               	return	
 11053  003626  D7EE               	goto	l716
 11054  003628                     __end_of_SwSpi_Set_Synth_Le_Pin:
 11055                           	opt stack 0
 11056                           tosu	equ	0xFFF
 11057                           tosh	equ	0xFFE
 11058                           tosl	equ	0xFFD
 11059                           pclath	equ	0xFFA
 11060                           tblptru	equ	0xFF8
 11061                           tblptrh	equ	0xFF7
 11062                           tblptrl	equ	0xFF6
 11063                           tablat	equ	0xFF5
 11064                           prodh	equ	0xFF4
 11065                           prodl	equ	0xFF3
 11066                           intcon	equ	0xFF2
 11067                           intcon2	equ	0xFF1
 11068                           postinc0	equ	0xFEE
 11069                           plusw0	equ	0xFEB
 11070                           wreg	equ	0xFE8
 11071                           indf1	equ	0xFE7
 11072                           postinc1	equ	0xFE6
 11073                           postdec1	equ	0xFE5
 11074                           fsr1h	equ	0xFE2
 11075                           fsr1l	equ	0xFE1
 11076                           indf2	equ	0xFDF
 11077                           postinc2	equ	0xFDE
 11078                           postdec2	equ	0xFDD
 11079                           plusw2	equ	0xFDB
 11080                           fsr2h	equ	0xFDA
 11081                           fsr2l	equ	0xFD9
 11082                           status	equ	0xFD8
 11083                           
 11084 ;; *************** function _SwSpi_Set_Dac_Sync_Pin *****************
 11085 ;; Defined at:
 11086 ;;		line 260 in file "SwSpiApp.c"
 11087 ;; Parameters:    Size  Location     Type
 11088 ;;  cPinMode        1    wreg     unsigned char 
 11089 ;; Auto vars:     Size  Location     Type
 11090 ;;  cPinMode        1   23[COMRAM] unsigned char 
 11091 ;; Return value:  Size  Location     Type
 11092 ;;                  1    wreg      void 
 11093 ;; Registers used:
 11094 ;;		wreg, status,2, status,0
 11095 ;; Tracked objects:
 11096 ;;		On entry : 0/0
 11097 ;;		On exit  : 0/0
 11098 ;;		Unchanged: 0/0
 11099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11100 ;;      Params:         0       0       0       0       0       0       0
 11101 ;;      Locals:         1       0       0       0       0       0       0
 11102 ;;      Temps:          0       0       0       0       0       0       0
 11103 ;;      Totals:         1       0       0       0       0       0       0
 11104 ;;Total ram usage:        1 bytes
 11105 ;; Hardware stack levels used:    1
 11106 ;; Hardware stack levels required when called:    3
 11107 ;; This function calls:
 11108 ;;		Nothing
 11109 ;; This function is called by:
 11110 ;;		_SWSPI_send_word
 11111 ;; This function uses a non-reentrant model
 11112 ;;
 11113                           
 11114                           	psect	text66
 11115  003A8E                     __ptext66:
 11116                           	opt stack 0
 11117  003A8E                     _SwSpi_Set_Dac_Sync_Pin:
 11118                           	opt stack 23
 11119                           
 11120                           ;incstack = 0
 11121                           ;SwSpi_Set_Dac_Sync_Pin@cPinMode stored from wreg
 11122  003A8E  6E18               	movwf	SwSpi_Set_Dac_Sync_Pin@cPinMode,c
 11123                           
 11124                           ;SwSpiApp.c: 262: switch(cPinMode)
 11125  003A90  D004               	goto	l727
 11126  003A92                     
 11127                           ;SwSpiApp.c: 265: do { LATAbits.LATA2 = 0; } while(0);
 11128  003A92  9489               	bcf	3977,2,c	;volatile
 11129                           
 11130                           ;SwSpiApp.c: 266: break;
 11131  003A94  0012               	return	
 11132  003A96                     
 11133                           ;SwSpiApp.c: 269: do { LATAbits.LATA2 = 1; } while(0);
 11134  003A96  8489               	bsf	3977,2,c	;volatile
 11135                           
 11136                           ;SwSpiApp.c: 271: }
 11137                           
 11138                           ;SwSpiApp.c: 270: break;
 11139  003A98  0012               	return	
 11140  003A9A                     l727:
 11141  003A9A  5018               	movf	SwSpi_Set_Dac_Sync_Pin@cPinMode,w,c
 11142                           
 11143                           ; Switch size 1, requested type "space"
 11144                           ; Number of cases is 2, Range of values is 0 to 1
 11145                           ; switch strategies available:
 11146                           ; Name         Instructions Cycles
 11147                           ; simple_byte            7     4 (average)
 11148                           ;	Chosen strategy is simple_byte
 11149  003A9C  0A00               	xorlw	0	; case 0
 11150  003A9E  B4D8               	btfsc	status,2,c
 11151  003AA0  D7F8               	goto	l728
 11152  003AA2  0A01               	xorlw	1	; case 1
 11153  003AA4  A4D8               	btfss	status,2,c
 11154  003AA6  0012               	return	
 11155  003AA8  D7F6               	goto	l732
 11156  003AAA                     __end_of_SwSpi_Set_Dac_Sync_Pin:
 11157                           	opt stack 0
 11158                           tosu	equ	0xFFF
 11159                           tosh	equ	0xFFE
 11160                           tosl	equ	0xFFD
 11161                           pclath	equ	0xFFA
 11162                           tblptru	equ	0xFF8
 11163                           tblptrh	equ	0xFF7
 11164                           tblptrl	equ	0xFF6
 11165                           tablat	equ	0xFF5
 11166                           prodh	equ	0xFF4
 11167                           prodl	equ	0xFF3
 11168                           intcon	equ	0xFF2
 11169                           intcon2	equ	0xFF1
 11170                           postinc0	equ	0xFEE
 11171                           plusw0	equ	0xFEB
 11172                           wreg	equ	0xFE8
 11173                           indf1	equ	0xFE7
 11174                           postinc1	equ	0xFE6
 11175                           postdec1	equ	0xFE5
 11176                           fsr1h	equ	0xFE2
 11177                           fsr1l	equ	0xFE1
 11178                           indf2	equ	0xFDF
 11179                           postinc2	equ	0xFDE
 11180                           postdec2	equ	0xFDD
 11181                           plusw2	equ	0xFDB
 11182                           fsr2h	equ	0xFDA
 11183                           fsr2l	equ	0xFD9
 11184                           status	equ	0xFD8
 11185                           
 11186 ;; *************** function _SWSPI_Synth_send_bits *****************
 11187 ;; Defined at:
 11188 ;;		line 67 in file "SwSpiApp.c"
 11189 ;; Parameters:    Size  Location     Type
 11190 ;;  phrType         1    wreg     enum E1
 11191 ;;  data            4   33[COMRAM] unsigned long 
 11192 ;; Auto vars:     Size  Location     Type
 11193 ;;  phrType         1   37[BANK0 ] enum E1
 11194 ;;  bitArray       32    0[BANK0 ] unsigned char [32]
 11195 ;;  mask            4   32[BANK0 ] unsigned long 
 11196 ;;  count           1   36[BANK0 ] unsigned char 
 11197 ;; Return value:  Size  Location     Type
 11198 ;;                  1    wreg      void 
 11199 ;; Registers used:
 11200 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11201 ;; Tracked objects:
 11202 ;;		On entry : 0/0
 11203 ;;		On exit  : 0/0
 11204 ;;		Unchanged: 0/0
 11205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11206 ;;      Params:         4       0       0       0       0       0       0
 11207 ;;      Locals:         0      38       0       0       0       0       0
 11208 ;;      Temps:          0       0       0       0       0       0       0
 11209 ;;      Totals:         4      38       0       0       0       0       0
 11210 ;;Total ram usage:       42 bytes
 11211 ;; Hardware stack levels used:    1
 11212 ;; Hardware stack levels required when called:    5
 11213 ;; This function calls:
 11214 ;;		_Make32bitsArray
 11215 ;;		_SwSpi_Clk_Pin
 11216 ;;		_SwSpi_Data_Pin
 11217 ;;		_ZeroBitsArray
 11218 ;; This function is called by:
 11219 ;;		_SWSPI_send_word
 11220 ;; This function uses a non-reentrant model
 11221 ;;
 11222                           
 11223                           	psect	text67
 11224  00262C                     __ptext67:
 11225                           	opt stack 0
 11226  00262C                     _SWSPI_Synth_send_bits:
 11227                           	opt stack 21
 11228                           
 11229                           ;incstack = 0
 11230                           ;SWSPI_Synth_send_bits@phrType stored from wreg
 11231  00262C  0100               	movlb	0	; () banked
 11232  00262E  6F85               	movwf	SWSPI_Synth_send_bits@phrType& (0+255),b
 11233                           
 11234                           ;SwSpiApp.c: 69: uint8_t count;
 11235                           ;SwSpiApp.c: 70: uint32_t mask = 0x1;
 11236  002630  0E01               	movlw	1
 11237  002632  0100               	movlb	0	; () banked
 11238  002634  6F80               	movwf	SWSPI_Synth_send_bits@mask& (0+255),b
 11239  002636  0E00               	movlw	0
 11240  002638  6F81               	movwf	(SWSPI_Synth_send_bits@mask+1)& (0+255),b
 11241  00263A  0E00               	movlw	0
 11242  00263C  6F82               	movwf	(SWSPI_Synth_send_bits@mask+2)& (0+255),b
 11243  00263E  0E00               	movlw	0
 11244  002640  6F83               	movwf	(SWSPI_Synth_send_bits@mask+3)& (0+255),b
 11245                           
 11246                           ; BSR set to: 0
 11247                           ;SwSpiApp.c: 72: bool bitArray[32];
 11248                           ;SwSpiApp.c: 73: ZeroBitsArray(bitArray);
 11249  002642  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 11250  002644  6E20               	movwf	ZeroBitsArray@array,c
 11251  002646  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 11252  002648  6E21               	movwf	ZeroBitsArray@array+1,c
 11253  00264A  EC38  F01D         	call	_ZeroBitsArray	;wreg free
 11254                           
 11255                           ;SwSpiApp.c: 75: Make32bitsArray(bitArray, data);
 11256  00264E  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 11257  002650  6E18               	movwf	Make32bitsArray@array,c
 11258  002652  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 11259  002654  6E19               	movwf	Make32bitsArray@array+1,c
 11260  002656  C022  F01A         	movff	SWSPI_Synth_send_bits@data,Make32bitsArray@data
 11261  00265A  C023  F01B         	movff	SWSPI_Synth_send_bits@data+1,Make32bitsArray@data+1
 11262  00265E  C024  F01C         	movff	SWSPI_Synth_send_bits@data+2,Make32bitsArray@data+2
 11263  002662  C025  F01D         	movff	SWSPI_Synth_send_bits@data+3,Make32bitsArray@data+3
 11264  002666  EC78  F018         	call	_Make32bitsArray	;wreg free
 11265                           
 11266                           ;SwSpiApp.c: 77: for (count = 0; count <= 31 ; count++)
 11267  00266A  0E00               	movlw	0
 11268  00266C  0100               	movlb	0	; () banked
 11269  00266E  6F84               	movwf	SWSPI_Synth_send_bits@count& (0+255),b
 11270  002670                     l7281:
 11271                           
 11272                           ; BSR set to: 0
 11273  002670  0E1F               	movlw	31
 11274  002672  6584               	cpfsgt	SWSPI_Synth_send_bits@count& (0+255),b
 11275  002674  D001               	goto	l612
 11276  002676  D026               	goto	u7390
 11277  002678                     l612:
 11278                           
 11279                           ; BSR set to: 0
 11280                           ;SwSpiApp.c: 78: {
 11281                           ;SwSpiApp.c: 80: SwSpi_Clk_Pin(phrType, 0);
 11282                           
 11283                           ; BSR set to: 0
 11284  002678  0E00               	movlw	0
 11285  00267A  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 11286  00267C  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 11287  00267E  ECFB  F018         	call	_SwSpi_Clk_Pin
 11288                           
 11289                           ;SwSpiApp.c: 82: if (bitArray[count])
 11290  002682  0100               	movlb	0	; () banked
 11291  002684  5184               	movf	SWSPI_Synth_send_bits@count& (0+255),w,b
 11292  002686  0D01               	mullw	1
 11293  002688  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 11294  00268A  24F3               	addwf	prodl,w,c
 11295  00268C  6ED9               	movwf	fsr2l,c
 11296  00268E  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 11297  002690  20F4               	addwfc	prodh,w,c
 11298  002692  6EDA               	movwf	fsr2h,c
 11299  002694  50DF               	movf	indf2,w,c
 11300  002696  B4D8               	btfsc	status,2,c
 11301  002698  D006               	goto	l614
 11302                           
 11303                           ; BSR set to: 0
 11304                           ;SwSpiApp.c: 83: {
 11305                           ;SwSpiApp.c: 84: SwSpi_Data_Pin(phrType, 1);
 11306  00269A  0E01               	movlw	1
 11307  00269C  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 11308  00269E  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 11309  0026A0  ECD0  F018         	call	_SwSpi_Data_Pin
 11310                           
 11311                           ;SwSpiApp.c: 85: }
 11312  0026A4  D006               	goto	l615
 11313  0026A6                     l614:
 11314                           
 11315                           ;SwSpiApp.c: 86: else
 11316                           ;SwSpiApp.c: 87: {
 11317                           ;SwSpiApp.c: 88: SwSpi_Data_Pin(phrType, 0);
 11318  0026A6  0E00               	movlw	0
 11319  0026A8  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 11320  0026AA  0100               	movlb	0	; () banked
 11321  0026AC  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 11322  0026AE  ECD0  F018         	call	_SwSpi_Data_Pin
 11323  0026B2                     l615:
 11324                           
 11325                           ;SwSpiApp.c: 89: }
 11326                           ;SwSpiApp.c: 91: SwSpi_Clk_Pin(phrType, 1);
 11327  0026B2  0E01               	movlw	1
 11328  0026B4  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 11329  0026B6  0100               	movlb	0	; () banked
 11330  0026B8  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 11331  0026BA  ECFB  F018         	call	_SwSpi_Clk_Pin
 11332  0026BE  0100               	movlb	0	; () banked
 11333  0026C0  2B84               	incf	SWSPI_Synth_send_bits@count& (0+255),f,b
 11334  0026C2  D7D6               	goto	l7281
 11335  0026C4                     u7390:
 11336                           
 11337                           ; BSR set to: 0
 11338                           ;SwSpiApp.c: 92: }
 11339                           ;SwSpiApp.c: 94: _delay((unsigned long)((50)*(8000000/4000000.0)));
 11340                           
 11341                           ; BSR set to: 0
 11342  0026C4  0E21               	movlw	33
 11343  0026C6                     u9067:
 11344  0026C6  2EE8               	decfsz	wreg,f,c
 11345  0026C8  D7FE               	bra	u9067
 11346  0026CA  F000               	nop	
 11347                           
 11348                           ;SwSpiApp.c: 95: SwSpi_Data_Pin(phrType, 0);
 11349  0026CC  0E00               	movlw	0
 11350  0026CE  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 11351  0026D0  0100               	movlb	0	; () banked
 11352  0026D2  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 11353  0026D4  ECD0  F018         	call	_SwSpi_Data_Pin
 11354                           
 11355                           ;SwSpiApp.c: 96: SwSpi_Clk_Pin(phrType, 0);
 11356  0026D8  0E00               	movlw	0
 11357  0026DA  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 11358  0026DC  0100               	movlb	0	; () banked
 11359  0026DE  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 11360  0026E0  ECFB  F018         	call	_SwSpi_Clk_Pin
 11361  0026E4  0012               	return		;funcret
 11362  0026E6                     __end_of_SWSPI_Synth_send_bits:
 11363                           	opt stack 0
 11364                           tosu	equ	0xFFF
 11365                           tosh	equ	0xFFE
 11366                           tosl	equ	0xFFD
 11367                           pclath	equ	0xFFA
 11368                           tblptru	equ	0xFF8
 11369                           tblptrh	equ	0xFF7
 11370                           tblptrl	equ	0xFF6
 11371                           tablat	equ	0xFF5
 11372                           prodh	equ	0xFF4
 11373                           prodl	equ	0xFF3
 11374                           intcon	equ	0xFF2
 11375                           intcon2	equ	0xFF1
 11376                           postinc0	equ	0xFEE
 11377                           plusw0	equ	0xFEB
 11378                           wreg	equ	0xFE8
 11379                           indf1	equ	0xFE7
 11380                           postinc1	equ	0xFE6
 11381                           postdec1	equ	0xFE5
 11382                           fsr1h	equ	0xFE2
 11383                           fsr1l	equ	0xFE1
 11384                           indf2	equ	0xFDF
 11385                           postinc2	equ	0xFDE
 11386                           postdec2	equ	0xFDD
 11387                           plusw2	equ	0xFDB
 11388                           fsr2h	equ	0xFDA
 11389                           fsr2l	equ	0xFD9
 11390                           status	equ	0xFD8
 11391                           
 11392 ;; *************** function _ZeroBitsArray *****************
 11393 ;; Defined at:
 11394 ;;		line 29 in file "SystemCommon.c"
 11395 ;; Parameters:    Size  Location     Type
 11396 ;;  array           2   31[COMRAM] PTR unsigned char 
 11397 ;;		 -> SWSPI_Synth_send_bits@bitArray(32), 
 11398 ;; Auto vars:     Size  Location     Type
 11399 ;;		None
 11400 ;; Return value:  Size  Location     Type
 11401 ;;                  1    wreg      void 
 11402 ;; Registers used:
 11403 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11404 ;; Tracked objects:
 11405 ;;		On entry : 0/0
 11406 ;;		On exit  : 0/0
 11407 ;;		Unchanged: 0/0
 11408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11409 ;;      Params:         2       0       0       0       0       0       0
 11410 ;;      Locals:         0       0       0       0       0       0       0
 11411 ;;      Temps:          0       0       0       0       0       0       0
 11412 ;;      Totals:         2       0       0       0       0       0       0
 11413 ;;Total ram usage:        2 bytes
 11414 ;; Hardware stack levels used:    1
 11415 ;; Hardware stack levels required when called:    4
 11416 ;; This function calls:
 11417 ;;		_memset
 11418 ;; This function is called by:
 11419 ;;		_SWSPI_Synth_send_bits
 11420 ;; This function uses a non-reentrant model
 11421 ;;
 11422                           
 11423                           	psect	text68
 11424  003A70                     __ptext68:
 11425                           	opt stack 0
 11426  003A70                     _ZeroBitsArray:
 11427                           	opt stack 21
 11428                           
 11429                           ;SystemCommon.c: 31: memset(array, 0x0, 32);
 11430                           
 11431                           ;incstack = 0
 11432  003A70  C020  F018         	movff	ZeroBitsArray@array,memset@p1
 11433  003A74  C021  F019         	movff	ZeroBitsArray@array+1,memset@p1+1
 11434  003A78  0E00               	movlw	0
 11435  003A7A  6E1B               	movwf	memset@c+1,c
 11436  003A7C  0E00               	movlw	0
 11437  003A7E  6E1A               	movwf	memset@c,c
 11438  003A80  0E00               	movlw	0
 11439  003A82  6E1D               	movwf	memset@n+1,c
 11440  003A84  0E20               	movlw	32
 11441  003A86  6E1C               	movwf	memset@n,c
 11442  003A88  EC4D  F01C         	call	_memset	;wreg free
 11443  003A8C  0012               	return		;funcret
 11444  003A8E                     __end_of_ZeroBitsArray:
 11445                           	opt stack 0
 11446                           tosu	equ	0xFFF
 11447                           tosh	equ	0xFFE
 11448                           tosl	equ	0xFFD
 11449                           pclath	equ	0xFFA
 11450                           tblptru	equ	0xFF8
 11451                           tblptrh	equ	0xFF7
 11452                           tblptrl	equ	0xFF6
 11453                           tablat	equ	0xFF5
 11454                           prodh	equ	0xFF4
 11455                           prodl	equ	0xFF3
 11456                           intcon	equ	0xFF2
 11457                           intcon2	equ	0xFF1
 11458                           postinc0	equ	0xFEE
 11459                           plusw0	equ	0xFEB
 11460                           wreg	equ	0xFE8
 11461                           indf1	equ	0xFE7
 11462                           postinc1	equ	0xFE6
 11463                           postdec1	equ	0xFE5
 11464                           fsr1h	equ	0xFE2
 11465                           fsr1l	equ	0xFE1
 11466                           indf2	equ	0xFDF
 11467                           postinc2	equ	0xFDE
 11468                           postdec2	equ	0xFDD
 11469                           plusw2	equ	0xFDB
 11470                           fsr2h	equ	0xFDA
 11471                           fsr2l	equ	0xFD9
 11472                           status	equ	0xFD8
 11473                           
 11474 ;; *************** function _memset *****************
 11475 ;; Defined at:
 11476 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 11477 ;; Parameters:    Size  Location     Type
 11478 ;;  p1              2   23[COMRAM] PTR void 
 11479 ;;		 -> GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dataRegArr(10), SWSPI_Synth_send_bits@bitArray(32), SynthReadData@T
      +xMsg(27), 
 11480 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), 
 11481 ;;		 -> rxMsgData(20), rxMsgQueue(20), 
 11482 ;;  c               2   25[COMRAM] int 
 11483 ;;  n               2   27[COMRAM] unsigned int 
 11484 ;; Auto vars:     Size  Location     Type
 11485 ;;  p               2   29[COMRAM] PTR unsigned char 
 11486 ;;		 -> GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dataRegArr(10), SWSPI_Synth_send_bits@bitArray(32), SynthReadData@T
      +xMsg(27), 
 11487 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), 
 11488 ;;		 -> rxMsgData(20), rxMsgQueue(20), 
 11489 ;; Return value:  Size  Location     Type
 11490 ;;                  2   23[COMRAM] PTR void 
 11491 ;; Registers used:
 11492 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11493 ;; Tracked objects:
 11494 ;;		On entry : 0/0
 11495 ;;		On exit  : 0/0
 11496 ;;		Unchanged: 0/0
 11497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11498 ;;      Params:         6       0       0       0       0       0       0
 11499 ;;      Locals:         2       0       0       0       0       0       0
 11500 ;;      Temps:          0       0       0       0       0       0       0
 11501 ;;      Totals:         8       0       0       0       0       0       0
 11502 ;;Total ram usage:        8 bytes
 11503 ;; Hardware stack levels used:    1
 11504 ;; Hardware stack levels required when called:    3
 11505 ;; This function calls:
 11506 ;;		Nothing
 11507 ;; This function is called by:
 11508 ;;		_ZeroArray
 11509 ;;		_ZeroBitsArray
 11510 ;; This function uses a non-reentrant model
 11511 ;;
 11512                           
 11513                           	psect	text69
 11514  00389A                     __ptext69:
 11515                           	opt stack 0
 11516  00389A                     _memset:
 11517                           	opt stack 25
 11518                           
 11519                           ;incstack = 0
 11520  00389A  C018  F01E         	movff	memset@p1,memset@p
 11521  00389E  C019  F01F         	movff	memset@p1+1,memset@p+1
 11522  0038A2  D008               	goto	l1896
 11523  0038A4                     l6873:
 11524  0038A4  C01E  FFD9         	movff	memset@p,fsr2l
 11525  0038A8  C01F  FFDA         	movff	memset@p+1,fsr2h
 11526  0038AC  C01A  FFDF         	movff	memset@c,indf2
 11527  0038B0  4A1E               	infsnz	memset@p,f,c
 11528  0038B2  2A1F               	incf	memset@p+1,f,c
 11529  0038B4                     l1896:
 11530  0038B4  061C               	decf	memset@n,f,c
 11531  0038B6  A0D8               	btfss	status,0,c
 11532  0038B8  061D               	decf	memset@n+1,f,c
 11533  0038BA  281C               	incf	memset@n,w,c
 11534  0038BC  E1F3               	bnz	l6873
 11535  0038BE  281D               	incf	memset@n+1,w,c
 11536  0038C0  B4D8               	btfsc	status,2,c
 11537  0038C2  0012               	return	
 11538  0038C4  D7EF               	goto	l1897
 11539  0038C6                     __end_of_memset:
 11540                           	opt stack 0
 11541                           tosu	equ	0xFFF
 11542                           tosh	equ	0xFFE
 11543                           tosl	equ	0xFFD
 11544                           pclath	equ	0xFFA
 11545                           tblptru	equ	0xFF8
 11546                           tblptrh	equ	0xFF7
 11547                           tblptrl	equ	0xFF6
 11548                           tablat	equ	0xFF5
 11549                           prodh	equ	0xFF4
 11550                           prodl	equ	0xFF3
 11551                           intcon	equ	0xFF2
 11552                           intcon2	equ	0xFF1
 11553                           postinc0	equ	0xFEE
 11554                           plusw0	equ	0xFEB
 11555                           wreg	equ	0xFE8
 11556                           indf1	equ	0xFE7
 11557                           postinc1	equ	0xFE6
 11558                           postdec1	equ	0xFE5
 11559                           fsr1h	equ	0xFE2
 11560                           fsr1l	equ	0xFE1
 11561                           indf2	equ	0xFDF
 11562                           postinc2	equ	0xFDE
 11563                           postdec2	equ	0xFDD
 11564                           plusw2	equ	0xFDB
 11565                           fsr2h	equ	0xFDA
 11566                           fsr2l	equ	0xFD9
 11567                           status	equ	0xFD8
 11568                           
 11569 ;; *************** function _Make32bitsArray *****************
 11570 ;; Defined at:
 11571 ;;		line 100 in file "SystemCommon.c"
 11572 ;; Parameters:    Size  Location     Type
 11573 ;;  array           2   23[COMRAM] PTR unsigned char 
 11574 ;;		 -> SWSPI_Synth_send_bits@bitArray(32), 
 11575 ;;  data            4   25[COMRAM] unsigned long 
 11576 ;; Auto vars:     Size  Location     Type
 11577 ;;  idx             2   31[COMRAM] int 
 11578 ;; Return value:  Size  Location     Type
 11579 ;;                  1    wreg      void 
 11580 ;; Registers used:
 11581 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11582 ;; Tracked objects:
 11583 ;;		On entry : 0/0
 11584 ;;		On exit  : 0/0
 11585 ;;		Unchanged: 0/0
 11586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11587 ;;      Params:         6       0       0       0       0       0       0
 11588 ;;      Locals:         2       0       0       0       0       0       0
 11589 ;;      Temps:          2       0       0       0       0       0       0
 11590 ;;      Totals:        10       0       0       0       0       0       0
 11591 ;;Total ram usage:       10 bytes
 11592 ;; Hardware stack levels used:    1
 11593 ;; Hardware stack levels required when called:    3
 11594 ;; This function calls:
 11595 ;;		Nothing
 11596 ;; This function is called by:
 11597 ;;		_SWSPI_Synth_send_bits
 11598 ;; This function uses a non-reentrant model
 11599 ;;
 11600                           
 11601                           	psect	text70
 11602  0030F0                     __ptext70:
 11603                           	opt stack 0
 11604  0030F0                     _Make32bitsArray:
 11605                           	opt stack 22
 11606                           
 11607                           ;SystemCommon.c: 102: for(int idx = 0; idx <= 32; idx++)
 11608                           
 11609                           ;incstack = 0
 11610  0030F0  0E00               	movlw	0
 11611  0030F2  6E21               	movwf	Make32bitsArray@idx+1,c
 11612  0030F4  0E00               	movlw	0
 11613  0030F6  6E20               	movwf	Make32bitsArray@idx,c
 11614  0030F8                     l7071:
 11615  0030F8  BE21               	btfsc	Make32bitsArray@idx+1,7,c
 11616  0030FA  D006               	goto	l1321
 11617  0030FC  5021               	movf	Make32bitsArray@idx+1,w,c
 11618  0030FE  E123               	bnz	l1323
 11619  003100  0E21               	movlw	33
 11620  003102  5C20               	subwf	Make32bitsArray@idx,w,c
 11621  003104  B0D8               	btfsc	status,0,c
 11622  003106  0012               	return	
 11623  003108                     l1321:
 11624                           
 11625                           ;SystemCommon.c: 103: {
 11626                           ;SystemCommon.c: 104: array[32 - idx - 1] = data % 2;
 11627  003108  0E01               	movlw	1
 11628  00310A  2420               	addwf	Make32bitsArray@idx,w,c
 11629  00310C  6E1E               	movwf	??_Make32bitsArray& (0+255),c
 11630  00310E  0E00               	movlw	0
 11631  003110  2021               	addwfc	Make32bitsArray@idx+1,w,c
 11632  003112  6E1F               	movwf	(??_Make32bitsArray+1)& (0+255),c
 11633  003114  1E1E               	comf	??_Make32bitsArray,f,c
 11634  003116  1E1F               	comf	??_Make32bitsArray+1,f,c
 11635  003118  4A1E               	infsnz	??_Make32bitsArray,f,c
 11636  00311A  2A1F               	incf	??_Make32bitsArray+1,f,c
 11637  00311C  0E20               	movlw	32
 11638  00311E  261E               	addwf	??_Make32bitsArray,f,c
 11639  003120  0E00               	movlw	0
 11640  003122  221F               	addwfc	??_Make32bitsArray+1,f,c
 11641  003124  501E               	movf	??_Make32bitsArray,w,c
 11642  003126  2418               	addwf	Make32bitsArray@array,w,c
 11643  003128  6ED9               	movwf	fsr2l,c
 11644  00312A  501F               	movf	??_Make32bitsArray+1,w,c
 11645  00312C  2019               	addwfc	Make32bitsArray@array+1,w,c
 11646  00312E  6EDA               	movwf	fsr2h,c
 11647  003130  501A               	movf	Make32bitsArray@data,w,c
 11648  003132  0B01               	andlw	1
 11649  003134  6EDF               	movwf	indf2,c
 11650                           
 11651                           ;SystemCommon.c: 105: data /= 2;
 11652  003136  90D8               	bcf	status,0,c
 11653  003138  321D               	rrcf	Make32bitsArray@data+3,f,c
 11654  00313A  321C               	rrcf	Make32bitsArray@data+2,f,c
 11655  00313C  321B               	rrcf	Make32bitsArray@data+1,f,c
 11656  00313E  321A               	rrcf	Make32bitsArray@data,f,c
 11657  003140  4A20               	infsnz	Make32bitsArray@idx,f,c
 11658  003142  2A21               	incf	Make32bitsArray@idx+1,f,c
 11659  003144  D7D9               	goto	l7071
 11660  003146                     l1323:
 11661  003146  0012               	return		;funcret
 11662  003148                     __end_of_Make32bitsArray:
 11663                           	opt stack 0
 11664                           tosu	equ	0xFFF
 11665                           tosh	equ	0xFFE
 11666                           tosl	equ	0xFFD
 11667                           pclath	equ	0xFFA
 11668                           tblptru	equ	0xFF8
 11669                           tblptrh	equ	0xFF7
 11670                           tblptrl	equ	0xFF6
 11671                           tablat	equ	0xFF5
 11672                           prodh	equ	0xFF4
 11673                           prodl	equ	0xFF3
 11674                           intcon	equ	0xFF2
 11675                           intcon2	equ	0xFF1
 11676                           postinc0	equ	0xFEE
 11677                           plusw0	equ	0xFEB
 11678                           wreg	equ	0xFE8
 11679                           indf1	equ	0xFE7
 11680                           postinc1	equ	0xFE6
 11681                           postdec1	equ	0xFE5
 11682                           fsr1h	equ	0xFE2
 11683                           fsr1l	equ	0xFE1
 11684                           indf2	equ	0xFDF
 11685                           postinc2	equ	0xFDE
 11686                           postdec2	equ	0xFDD
 11687                           plusw2	equ	0xFDB
 11688                           fsr2h	equ	0xFDA
 11689                           fsr2l	equ	0xFD9
 11690                           status	equ	0xFD8
 11691                           
 11692 ;; *************** function _SWSPI_DAC_send_bits *****************
 11693 ;; Defined at:
 11694 ;;		line 43 in file "SwSpiApp.c"
 11695 ;; Parameters:    Size  Location     Type
 11696 ;;  phrType         1    wreg     enum E1
 11697 ;;  data            1   25[COMRAM] unsigned char 
 11698 ;; Auto vars:     Size  Location     Type
 11699 ;;  phrType         1   27[COMRAM] enum E1
 11700 ;;  count           1   26[COMRAM] unsigned char 
 11701 ;; Return value:  Size  Location     Type
 11702 ;;                  1    wreg      void 
 11703 ;; Registers used:
 11704 ;;		wreg, status,2, status,0, cstack
 11705 ;; Tracked objects:
 11706 ;;		On entry : 0/0
 11707 ;;		On exit  : 0/0
 11708 ;;		Unchanged: 0/0
 11709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11710 ;;      Params:         1       0       0       0       0       0       0
 11711 ;;      Locals:         2       0       0       0       0       0       0
 11712 ;;      Temps:          0       0       0       0       0       0       0
 11713 ;;      Totals:         3       0       0       0       0       0       0
 11714 ;;Total ram usage:        3 bytes
 11715 ;; Hardware stack levels used:    1
 11716 ;; Hardware stack levels required when called:    4
 11717 ;; This function calls:
 11718 ;;		_SwSpi_Clk_Pin
 11719 ;;		_SwSpi_Data_Pin
 11720 ;; This function is called by:
 11721 ;;		_SWSPI_send_word
 11722 ;; This function uses a non-reentrant model
 11723 ;;
 11724                           
 11725                           	psect	text71
 11726  003148                     __ptext71:
 11727                           	opt stack 0
 11728  003148                     _SWSPI_DAC_send_bits:
 11729                           	opt stack 22
 11730                           
 11731                           ;incstack = 0
 11732                           ;SWSPI_DAC_send_bits@phrType stored from wreg
 11733  003148  6E1C               	movwf	SWSPI_DAC_send_bits@phrType,c
 11734                           
 11735                           ;SwSpiApp.c: 45: uint8_t count;
 11736                           ;SwSpiApp.c: 46: for (count = 8; count ; count--, data <<= 1)
 11737  00314A  0E08               	movlw	8
 11738  00314C  6E1B               	movwf	SWSPI_DAC_send_bits@count,c
 11739  00314E  D01A               	goto	l604
 11740  003150                     
 11741                           ;SwSpiApp.c: 47: {
 11742                           ;SwSpiApp.c: 48: SwSpi_Clk_Pin(phrType, 1);
 11743  003150  0E01               	movlw	1
 11744  003152  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 11745  003154  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11746  003156  ECFB  F018         	call	_SwSpi_Clk_Pin
 11747                           
 11748                           ;SwSpiApp.c: 50: if (data & 0X80)
 11749  00315A  AE1A               	btfss	SWSPI_DAC_send_bits@data,7,c
 11750  00315C  D006               	goto	l606
 11751                           
 11752                           ;SwSpiApp.c: 51: {
 11753                           ;SwSpiApp.c: 53: SwSpi_Data_Pin(phrType, 1);
 11754  00315E  0E01               	movlw	1
 11755  003160  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 11756  003162  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11757  003164  ECD0  F018         	call	_SwSpi_Data_Pin
 11758                           
 11759                           ;SwSpiApp.c: 54: }
 11760  003168  D005               	goto	l607
 11761  00316A                     l606:
 11762                           
 11763                           ;SwSpiApp.c: 55: else
 11764                           ;SwSpiApp.c: 56: {
 11765                           ;SwSpiApp.c: 57: SwSpi_Data_Pin(phrType, 0);
 11766  00316A  0E00               	movlw	0
 11767  00316C  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 11768  00316E  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11769  003170  ECD0  F018         	call	_SwSpi_Data_Pin
 11770  003174                     l607:
 11771                           
 11772                           ;SwSpiApp.c: 58: }
 11773                           ;SwSpiApp.c: 60: SwSpi_Clk_Pin(phrType, 0);
 11774  003174  0E00               	movlw	0
 11775  003176  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 11776  003178  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11777  00317A  ECFB  F018         	call	_SwSpi_Clk_Pin
 11778  00317E  061B               	decf	SWSPI_DAC_send_bits@count,f,c
 11779  003180  90D8               	bcf	status,0,c
 11780  003182  361A               	rlcf	SWSPI_DAC_send_bits@data,f,c
 11781  003184                     l604:
 11782  003184  501B               	movf	SWSPI_DAC_send_bits@count,w,c
 11783  003186  A4D8               	btfss	status,2,c
 11784  003188  D7E3               	goto	l605
 11785                           
 11786                           ;SwSpiApp.c: 61: }
 11787                           ;SwSpiApp.c: 63: SwSpi_Data_Pin(phrType, 0);
 11788  00318A  0E00               	movlw	0
 11789  00318C  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 11790  00318E  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11791  003190  ECD0  F018         	call	_SwSpi_Data_Pin
 11792                           
 11793                           ;SwSpiApp.c: 64: SwSpi_Clk_Pin(phrType, 0);
 11794  003194  0E00               	movlw	0
 11795  003196  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 11796  003198  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11797  00319A  ECFB  F018         	call	_SwSpi_Clk_Pin
 11798  00319E  0012               	return		;funcret
 11799  0031A0                     __end_of_SWSPI_DAC_send_bits:
 11800                           	opt stack 0
 11801                           tosu	equ	0xFFF
 11802                           tosh	equ	0xFFE
 11803                           tosl	equ	0xFFD
 11804                           pclath	equ	0xFFA
 11805                           tblptru	equ	0xFF8
 11806                           tblptrh	equ	0xFF7
 11807                           tblptrl	equ	0xFF6
 11808                           tablat	equ	0xFF5
 11809                           prodh	equ	0xFF4
 11810                           prodl	equ	0xFF3
 11811                           intcon	equ	0xFF2
 11812                           intcon2	equ	0xFF1
 11813                           postinc0	equ	0xFEE
 11814                           plusw0	equ	0xFEB
 11815                           wreg	equ	0xFE8
 11816                           indf1	equ	0xFE7
 11817                           postinc1	equ	0xFE6
 11818                           postdec1	equ	0xFE5
 11819                           fsr1h	equ	0xFE2
 11820                           fsr1l	equ	0xFE1
 11821                           indf2	equ	0xFDF
 11822                           postinc2	equ	0xFDE
 11823                           postdec2	equ	0xFDD
 11824                           plusw2	equ	0xFDB
 11825                           fsr2h	equ	0xFDA
 11826                           fsr2l	equ	0xFD9
 11827                           status	equ	0xFD8
 11828                           
 11829 ;; *************** function _SwSpi_Data_Pin *****************
 11830 ;; Defined at:
 11831 ;;		line 103 in file "SwSpiApp.c"
 11832 ;; Parameters:    Size  Location     Type
 11833 ;;  phrType         1    wreg     enum E1
 11834 ;;  cPinMode        1   23[COMRAM] unsigned char 
 11835 ;; Auto vars:     Size  Location     Type
 11836 ;;  phrType         1   24[COMRAM] enum E1
 11837 ;; Return value:  Size  Location     Type
 11838 ;;                  1    wreg      void 
 11839 ;; Registers used:
 11840 ;;		wreg, status,2, status,0
 11841 ;; Tracked objects:
 11842 ;;		On entry : 0/0
 11843 ;;		On exit  : 0/0
 11844 ;;		Unchanged: 0/0
 11845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11846 ;;      Params:         1       0       0       0       0       0       0
 11847 ;;      Locals:         1       0       0       0       0       0       0
 11848 ;;      Temps:          0       0       0       0       0       0       0
 11849 ;;      Totals:         2       0       0       0       0       0       0
 11850 ;;Total ram usage:        2 bytes
 11851 ;; Hardware stack levels used:    1
 11852 ;; Hardware stack levels required when called:    3
 11853 ;; This function calls:
 11854 ;;		Nothing
 11855 ;; This function is called by:
 11856 ;;		_SWSPI_DAC_send_bits
 11857 ;;		_SWSPI_Synth_send_bits
 11858 ;; This function uses a non-reentrant model
 11859 ;;
 11860                           
 11861                           	psect	text72
 11862  0031A0                     __ptext72:
 11863                           	opt stack 0
 11864  0031A0                     _SwSpi_Data_Pin:
 11865                           	opt stack 22
 11866                           
 11867                           ;incstack = 0
 11868                           ;SwSpi_Data_Pin@phrType stored from wreg
 11869  0031A0  6E19               	movwf	SwSpi_Data_Pin@phrType,c
 11870                           
 11871                           ;SwSpiApp.c: 105: switch(phrType)
 11872  0031A2  D01E               	goto	l619
 11873  0031A4                     
 11874                           ;SwSpiApp.c: 108: if(cPinMode == 1)
 11875  0031A4  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 11876  0031A6  A4D8               	btfss	status,2,c
 11877  0031A8  D002               	goto	l621
 11878                           
 11879                           ;SwSpiApp.c: 109: {
 11880                           ;SwSpiApp.c: 110: do { LATDbits.LATD0 = 1; } while(0);
 11881  0031AA  808C               	bsf	3980,0,c	;volatile
 11882                           
 11883                           ;SwSpiApp.c: 111: }
 11884  0031AC  0012               	return	
 11885  0031AE                     l621:
 11886                           
 11887                           ;SwSpiApp.c: 112: else if (cPinMode == 0)
 11888  0031AE  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 11889  0031B0  A4D8               	btfss	status,2,c
 11890  0031B2  0012               	return	
 11891                           
 11892                           ;SwSpiApp.c: 113: {
 11893                           ;SwSpiApp.c: 114: do { LATDbits.LATD0 = 0; } while(0);
 11894  0031B4  908C               	bcf	3980,0,c	;volatile
 11895                           
 11896                           ;SwSpiApp.c: 115: }
 11897                           ;SwSpiApp.c: 116: break;
 11898  0031B6  0012               	return	
 11899  0031B8                     
 11900                           ;SwSpiApp.c: 119: if(cPinMode == 1)
 11901  0031B8  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 11902  0031BA  A4D8               	btfss	status,2,c
 11903  0031BC  D002               	goto	l630
 11904                           
 11905                           ;SwSpiApp.c: 120: {
 11906                           ;SwSpiApp.c: 121: do { LATCbits.LATC5 = 1; } while(0);
 11907  0031BE  8A8B               	bsf	3979,5,c	;volatile
 11908                           
 11909                           ;SwSpiApp.c: 122: }
 11910  0031C0  0012               	return	
 11911  0031C2                     l630:
 11912                           
 11913                           ;SwSpiApp.c: 123: else if (cPinMode == 0)
 11914  0031C2  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 11915  0031C4  A4D8               	btfss	status,2,c
 11916  0031C6  0012               	return	
 11917                           
 11918                           ;SwSpiApp.c: 124: {
 11919                           ;SwSpiApp.c: 125: do { LATCbits.LATC5 = 0; } while(0);
 11920  0031C8  9A8B               	bcf	3979,5,c	;volatile
 11921                           
 11922                           ;SwSpiApp.c: 126: }
 11923                           ;SwSpiApp.c: 127: break;
 11924  0031CA  0012               	return	
 11925  0031CC                     
 11926                           ;SwSpiApp.c: 130: if(cPinMode == 1)
 11927  0031CC  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 11928  0031CE  A4D8               	btfss	status,2,c
 11929  0031D0  D002               	goto	l638
 11930                           
 11931                           ;SwSpiApp.c: 131: {
 11932                           ;SwSpiApp.c: 132: do { LATAbits.LATA4 = 1; } while(0);
 11933  0031D2  8889               	bsf	3977,4,c	;volatile
 11934                           
 11935                           ;SwSpiApp.c: 133: }
 11936  0031D4  0012               	return	
 11937  0031D6                     l638:
 11938                           
 11939                           ;SwSpiApp.c: 134: else if (cPinMode == 0)
 11940  0031D6  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 11941  0031D8  A4D8               	btfss	status,2,c
 11942  0031DA  0012               	return	
 11943                           
 11944                           ;SwSpiApp.c: 135: {
 11945                           ;SwSpiApp.c: 136: do { LATAbits.LATA4 = 0; } while(0);
 11946  0031DC  9889               	bcf	3977,4,c	;volatile
 11947                           
 11948                           ;SwSpiApp.c: 139: }
 11949                           
 11950                           ;SwSpiApp.c: 137: }
 11951                           ;SwSpiApp.c: 138: break;
 11952  0031DE  0012               	return	
 11953  0031E0                     l619:
 11954  0031E0  5019               	movf	SwSpi_Data_Pin@phrType,w,c
 11955                           
 11956                           ; Switch size 1, requested type "space"
 11957                           ; Number of cases is 3, Range of values is 0 to 2
 11958                           ; switch strategies available:
 11959                           ; Name         Instructions Cycles
 11960                           ; simple_byte           10     6 (average)
 11961                           ;	Chosen strategy is simple_byte
 11962  0031E2  0A00               	xorlw	0	; case 0
 11963  0031E4  B4D8               	btfsc	status,2,c
 11964  0031E6  D7DE               	goto	l620
 11965  0031E8  0A01               	xorlw	1	; case 1
 11966  0031EA  B4D8               	btfsc	status,2,c
 11967  0031EC  D7E5               	goto	l629
 11968  0031EE  0A03               	xorlw	3	; case 2
 11969  0031F0  A4D8               	btfss	status,2,c
 11970  0031F2  0012               	return	
 11971  0031F4  D7EB               	goto	l637
 11972  0031F6                     __end_of_SwSpi_Data_Pin:
 11973                           	opt stack 0
 11974                           tosu	equ	0xFFF
 11975                           tosh	equ	0xFFE
 11976                           tosl	equ	0xFFD
 11977                           pclath	equ	0xFFA
 11978                           tblptru	equ	0xFF8
 11979                           tblptrh	equ	0xFF7
 11980                           tblptrl	equ	0xFF6
 11981                           tablat	equ	0xFF5
 11982                           prodh	equ	0xFF4
 11983                           prodl	equ	0xFF3
 11984                           intcon	equ	0xFF2
 11985                           intcon2	equ	0xFF1
 11986                           postinc0	equ	0xFEE
 11987                           plusw0	equ	0xFEB
 11988                           wreg	equ	0xFE8
 11989                           indf1	equ	0xFE7
 11990                           postinc1	equ	0xFE6
 11991                           postdec1	equ	0xFE5
 11992                           fsr1h	equ	0xFE2
 11993                           fsr1l	equ	0xFE1
 11994                           indf2	equ	0xFDF
 11995                           postinc2	equ	0xFDE
 11996                           postdec2	equ	0xFDD
 11997                           plusw2	equ	0xFDB
 11998                           fsr2h	equ	0xFDA
 11999                           fsr2l	equ	0xFD9
 12000                           status	equ	0xFD8
 12001                           
 12002 ;; *************** function _SwSpi_Clk_Pin *****************
 12003 ;; Defined at:
 12004 ;;		line 142 in file "SwSpiApp.c"
 12005 ;; Parameters:    Size  Location     Type
 12006 ;;  phrType         1    wreg     enum E1
 12007 ;;  cPinMode        1   23[COMRAM] unsigned char 
 12008 ;; Auto vars:     Size  Location     Type
 12009 ;;  phrType         1   24[COMRAM] enum E1
 12010 ;; Return value:  Size  Location     Type
 12011 ;;                  1    wreg      void 
 12012 ;; Registers used:
 12013 ;;		wreg, status,2, status,0
 12014 ;; Tracked objects:
 12015 ;;		On entry : 0/0
 12016 ;;		On exit  : 0/0
 12017 ;;		Unchanged: 0/0
 12018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12019 ;;      Params:         1       0       0       0       0       0       0
 12020 ;;      Locals:         1       0       0       0       0       0       0
 12021 ;;      Temps:          0       0       0       0       0       0       0
 12022 ;;      Totals:         2       0       0       0       0       0       0
 12023 ;;Total ram usage:        2 bytes
 12024 ;; Hardware stack levels used:    1
 12025 ;; Hardware stack levels required when called:    3
 12026 ;; This function calls:
 12027 ;;		Nothing
 12028 ;; This function is called by:
 12029 ;;		_SWSPI_DAC_send_bits
 12030 ;;		_SWSPI_Synth_send_bits
 12031 ;;		_SwSpi_Synth_Toggle_Clock
 12032 ;; This function uses a non-reentrant model
 12033 ;;
 12034                           
 12035                           	psect	text73
 12036  0031F6                     __ptext73:
 12037                           	opt stack 0
 12038  0031F6                     _SwSpi_Clk_Pin:
 12039                           	opt stack 22
 12040                           
 12041                           ;incstack = 0
 12042                           ;SwSpi_Clk_Pin@phrType stored from wreg
 12043  0031F6  6E19               	movwf	SwSpi_Clk_Pin@phrType,c
 12044                           
 12045                           ;SwSpiApp.c: 144: switch(phrType)
 12046  0031F8  D01E               	goto	l648
 12047  0031FA                     
 12048                           ;SwSpiApp.c: 147: if(cPinMode == 1)
 12049  0031FA  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 12050  0031FC  A4D8               	btfss	status,2,c
 12051  0031FE  D002               	goto	l650
 12052                           
 12053                           ;SwSpiApp.c: 148: {
 12054                           ;SwSpiApp.c: 149: do { LATCbits.LATC3 = 1; } while(0);
 12055  003200  868B               	bsf	3979,3,c	;volatile
 12056                           
 12057                           ;SwSpiApp.c: 150: }
 12058  003202  0012               	return	
 12059  003204                     l650:
 12060                           
 12061                           ;SwSpiApp.c: 151: else if (cPinMode == 0)
 12062  003204  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 12063  003206  A4D8               	btfss	status,2,c
 12064  003208  0012               	return	
 12065                           
 12066                           ;SwSpiApp.c: 152: {
 12067                           ;SwSpiApp.c: 153: do { LATCbits.LATC3 = 0; } while(0);
 12068  00320A  968B               	bcf	3979,3,c	;volatile
 12069                           
 12070                           ;SwSpiApp.c: 154: }
 12071                           ;SwSpiApp.c: 155: break;
 12072  00320C  0012               	return	
 12073  00320E                     
 12074                           ;SwSpiApp.c: 158: if(cPinMode == 1)
 12075  00320E  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 12076  003210  A4D8               	btfss	status,2,c
 12077  003212  D002               	goto	l659
 12078                           
 12079                           ;SwSpiApp.c: 159: {
 12080                           ;SwSpiApp.c: 160: do { LATCbits.LATC4 = 1; } while(0);
 12081  003214  888B               	bsf	3979,4,c	;volatile
 12082                           
 12083                           ;SwSpiApp.c: 161: }
 12084  003216  0012               	return	
 12085  003218                     l659:
 12086                           
 12087                           ;SwSpiApp.c: 162: else if (cPinMode == 0)
 12088  003218  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 12089  00321A  A4D8               	btfss	status,2,c
 12090  00321C  0012               	return	
 12091                           
 12092                           ;SwSpiApp.c: 163: {
 12093                           ;SwSpiApp.c: 164: do { LATCbits.LATC4 = 0; } while(0);
 12094  00321E  988B               	bcf	3979,4,c	;volatile
 12095                           
 12096                           ;SwSpiApp.c: 165: }
 12097                           ;SwSpiApp.c: 167: break;
 12098  003220  0012               	return	
 12099  003222                     
 12100                           ;SwSpiApp.c: 170: if(cPinMode == 1)
 12101  003222  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 12102  003224  A4D8               	btfss	status,2,c
 12103  003226  D002               	goto	l667
 12104                           
 12105                           ;SwSpiApp.c: 171: {
 12106                           ;SwSpiApp.c: 172: do { LATAbits.LATA3 = 1; } while(0);
 12107  003228  8689               	bsf	3977,3,c	;volatile
 12108                           
 12109                           ;SwSpiApp.c: 173: }
 12110  00322A  0012               	return	
 12111  00322C                     l667:
 12112                           
 12113                           ;SwSpiApp.c: 174: else if (cPinMode == 0)
 12114  00322C  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 12115  00322E  A4D8               	btfss	status,2,c
 12116  003230  0012               	return	
 12117                           
 12118                           ;SwSpiApp.c: 175: {
 12119                           ;SwSpiApp.c: 176: do { LATAbits.LATA3 = 0; } while(0);
 12120  003232  9689               	bcf	3977,3,c	;volatile
 12121                           
 12122                           ;SwSpiApp.c: 179: }
 12123                           
 12124                           ;SwSpiApp.c: 177: }
 12125                           ;SwSpiApp.c: 178: break;
 12126  003234  0012               	return	
 12127  003236                     l648:
 12128  003236  5019               	movf	SwSpi_Clk_Pin@phrType,w,c
 12129                           
 12130                           ; Switch size 1, requested type "space"
 12131                           ; Number of cases is 3, Range of values is 0 to 2
 12132                           ; switch strategies available:
 12133                           ; Name         Instructions Cycles
 12134                           ; simple_byte           10     6 (average)
 12135                           ;	Chosen strategy is simple_byte
 12136  003238  0A00               	xorlw	0	; case 0
 12137  00323A  B4D8               	btfsc	status,2,c
 12138  00323C  D7DE               	goto	l649
 12139  00323E  0A01               	xorlw	1	; case 1
 12140  003240  B4D8               	btfsc	status,2,c
 12141  003242  D7E5               	goto	l658
 12142  003244  0A03               	xorlw	3	; case 2
 12143  003246  A4D8               	btfss	status,2,c
 12144  003248  0012               	return	
 12145  00324A  D7EB               	goto	l666
 12146  00324C                     __end_of_SwSpi_Clk_Pin:
 12147                           	opt stack 0
 12148                           tosu	equ	0xFFF
 12149                           tosh	equ	0xFFE
 12150                           tosl	equ	0xFFD
 12151                           pclath	equ	0xFFA
 12152                           tblptru	equ	0xFF8
 12153                           tblptrh	equ	0xFF7
 12154                           tblptrl	equ	0xFF6
 12155                           tablat	equ	0xFF5
 12156                           prodh	equ	0xFF4
 12157                           prodl	equ	0xFF3
 12158                           intcon	equ	0xFF2
 12159                           intcon2	equ	0xFF1
 12160                           postinc0	equ	0xFEE
 12161                           plusw0	equ	0xFEB
 12162                           wreg	equ	0xFE8
 12163                           indf1	equ	0xFE7
 12164                           postinc1	equ	0xFE6
 12165                           postdec1	equ	0xFE5
 12166                           fsr1h	equ	0xFE2
 12167                           fsr1l	equ	0xFE1
 12168                           indf2	equ	0xFDF
 12169                           postinc2	equ	0xFDE
 12170                           postdec2	equ	0xFDD
 12171                           plusw2	equ	0xFDB
 12172                           fsr2h	equ	0xFDA
 12173                           fsr2l	equ	0xFD9
 12174                           status	equ	0xFD8
 12175                           
 12176 ;; *************** function _ReadIntFromEeprom *****************
 12177 ;; Defined at:
 12178 ;;		line 118 in file "SystemCommon.c"
 12179 ;; Parameters:    Size  Location     Type
 12180 ;;  address         1    wreg     unsigned char 
 12181 ;;  numOfByes       2   81[BANK0 ] int 
 12182 ;; Auto vars:     Size  Location     Type
 12183 ;;  address         1   98[BANK0 ] unsigned char 
 12184 ;;  base            4   88[BANK0 ] unsigned long 
 12185 ;;  idx             1  103[BANK0 ] unsigned char 
 12186 ;;  retVal          4   99[BANK0 ] unsigned long 
 12187 ;; Return value:  Size  Location     Type
 12188 ;;                  4   81[BANK0 ] unsigned long 
 12189 ;; Registers used:
 12190 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12191 ;; Tracked objects:
 12192 ;;		On entry : 0/0
 12193 ;;		On exit  : 0/0
 12194 ;;		Unchanged: 0/0
 12195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12196 ;;      Params:         0       4       0       0       0       0       0
 12197 ;;      Locals:         0      16       0       0       0       0       0
 12198 ;;      Temps:          0       3       0       0       0       0       0
 12199 ;;      Totals:         0      23       0       0       0       0       0
 12200 ;;Total ram usage:       23 bytes
 12201 ;; Hardware stack levels used:    1
 12202 ;; Hardware stack levels required when called:    8
 12203 ;; This function calls:
 12204 ;;		_EepromRead
 12205 ;;		___awtoft
 12206 ;;		___fttol
 12207 ;;		___lmul
 12208 ;;		_pow
 12209 ;; This function is called by:
 12210 ;;		_DacInit
 12211 ;;		_InitSynth
 12212 ;;		_SynthReadData
 12213 ;; This function uses a non-reentrant model
 12214 ;;
 12215                           
 12216                           	psect	text74
 12217  001B06                     __ptext74:
 12218                           	opt stack 0
 12219  001B06                     _ReadIntFromEeprom:
 12220                           	opt stack 19
 12221                           
 12222                           ;incstack = 0
 12223                           ;ReadIntFromEeprom@address stored from wreg
 12224  001B06  0100               	movlb	0	; () banked
 12225  001B08  6FC2               	movwf	ReadIntFromEeprom@address& (0+255),b
 12226                           
 12227                           ;SystemCommon.c: 120: uint32_t retVal = 0x00;
 12228  001B0A  0E00               	movlw	0
 12229  001B0C  0100               	movlb	0	; () banked
 12230  001B0E  6FC3               	movwf	ReadIntFromEeprom@retVal& (0+255),b
 12231  001B10  0E00               	movlw	0
 12232  001B12  6FC4               	movwf	(ReadIntFromEeprom@retVal+1)& (0+255),b
 12233  001B14  0E00               	movlw	0
 12234  001B16  6FC5               	movwf	(ReadIntFromEeprom@retVal+2)& (0+255),b
 12235  001B18  0E00               	movlw	0
 12236  001B1A  6FC6               	movwf	(ReadIntFromEeprom@retVal+3)& (0+255),b
 12237                           
 12238                           ; BSR set to: 0
 12239                           ;SystemCommon.c: 121: address -= numOfByes;
 12240  001B1C  51B1               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 12241  001B1E  5FC2               	subwf	ReadIntFromEeprom@address& (0+255),f,b
 12242                           
 12243                           ; BSR set to: 0
 12244                           ;SystemCommon.c: 123: for(uint8_t idx = 0; idx < numOfByes; idx++)
 12245  001B20  0E00               	movlw	0
 12246  001B22  6FC7               	movwf	ReadIntFromEeprom@idx& (0+255),b
 12247  001B24  D06D               	goto	l1332
 12248  001B26                     
 12249                           ; BSR set to: 0
 12250                           ;SystemCommon.c: 124: {
 12251                           ;SystemCommon.c: 125: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 12252                           
 12253                           ; BSR set to: 0
 12254  001B26  51C7               	movf	ReadIntFromEeprom@idx& (0+255),w,b
 12255  001B28  6FB5               	movwf	??_ReadIntFromEeprom& (0+255),b
 12256  001B2A  6BB6               	clrf	(??_ReadIntFromEeprom+1)& (0+255),b
 12257  001B2C  0E01               	movlw	1
 12258  001B2E  27B5               	addwf	??_ReadIntFromEeprom& (0+255),f,b
 12259  001B30  0E00               	movlw	0
 12260  001B32  23B6               	addwfc	(??_ReadIntFromEeprom+1)& (0+255),f,b
 12261  001B34  1FB5               	comf	??_ReadIntFromEeprom& (0+255),f,b
 12262  001B36  1FB6               	comf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 12263  001B38  4BB5               	infsnz	??_ReadIntFromEeprom& (0+255),f,b
 12264  001B3A  2BB6               	incf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 12265  001B3C  51B1               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 12266  001B3E  27B5               	addwf	??_ReadIntFromEeprom& (0+255),f,b
 12267  001B40  51B2               	movf	(ReadIntFromEeprom@numOfByes+1)& (0+255),w,b
 12268  001B42  23B6               	addwfc	(??_ReadIntFromEeprom+1)& (0+255),f,b
 12269  001B44  90D8               	bcf	status,0,c
 12270  001B46  37B5               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 12271  001B48  37B6               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 12272  001B4A  90D8               	bcf	status,0,c
 12273  001B4C  37B5               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 12274  001B4E  37B6               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 12275  001B50  90D8               	bcf	status,0,c
 12276  001B52  37B5               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 12277  001B54  37B6               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 12278  001B56  C0B5  F020         	movff	??_ReadIntFromEeprom,___awtoft@c
 12279  001B5A  C0B6  F021         	movff	??_ReadIntFromEeprom+1,___awtoft@c+1
 12280  001B5E  EC4C  F01B         	call	___awtoft	;wreg free
 12281  001B62  C020  F0BC         	movff	?___awtoft,_ReadIntFromEeprom$3306
 12282  001B66  C021  F0BD         	movff	?___awtoft+1,_ReadIntFromEeprom$3306+1
 12283  001B6A  C022  F0BE         	movff	?___awtoft+2,_ReadIntFromEeprom$3306+2
 12284                           
 12285                           ;SystemCommon.c: 124: {
 12286                           ;SystemCommon.c: 125: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 12287  001B6E  C0BC  F0A3         	movff	_ReadIntFromEeprom$3306,pow@y
 12288  001B72  C0BD  F0A4         	movff	_ReadIntFromEeprom$3306+1,pow@y+1
 12289  001B76  C0BE  F0A5         	movff	_ReadIntFromEeprom$3306+2,pow@y+2
 12290  001B7A  0E00               	movlw	0
 12291  001B7C  0100               	movlb	0	; () banked
 12292  001B7E  6FA0               	movwf	pow@x& (0+255),b
 12293  001B80  0E00               	movlw	0
 12294  001B82  6FA1               	movwf	(pow@x+1)& (0+255),b
 12295  001B84  0E40               	movlw	64
 12296  001B86  6FA2               	movwf	(pow@x+2)& (0+255),b
 12297  001B88  ECBC  F00A         	call	_pow	;wreg free
 12298  001B8C  C0A0  F0BF         	movff	?_pow,_ReadIntFromEeprom$3307
 12299  001B90  C0A1  F0C0         	movff	?_pow+1,_ReadIntFromEeprom$3307+1
 12300  001B94  C0A2  F0C1         	movff	?_pow+2,_ReadIntFromEeprom$3307+2
 12301                           
 12302                           ;SystemCommon.c: 124: {
 12303                           ;SystemCommon.c: 125: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 12304  001B98  C0BF  F078         	movff	_ReadIntFromEeprom$3307,___fttol@f1
 12305  001B9C  C0C0  F079         	movff	_ReadIntFromEeprom$3307+1,___fttol@f1+1
 12306  001BA0  C0C1  F07A         	movff	_ReadIntFromEeprom$3307+2,___fttol@f1+2
 12307  001BA4  EC98  F00F         	call	___fttol	;wreg free
 12308  001BA8  C078  F0B8         	movff	?___fttol,ReadIntFromEeprom@base
 12309  001BAC  C079  F0B9         	movff	?___fttol+1,ReadIntFromEeprom@base+1
 12310  001BB0  C07A  F0BA         	movff	?___fttol+2,ReadIntFromEeprom@base+2
 12311  001BB4  C07B  F0BB         	movff	?___fttol+3,ReadIntFromEeprom@base+3
 12312                           
 12313                           ;SystemCommon.c: 126: retVal = retVal | EepromRead(address + idx) * base;
 12314  001BB8  0100               	movlb	0	; () banked
 12315  001BBA  51C2               	movf	ReadIntFromEeprom@address& (0+255),w,b
 12316  001BBC  25C7               	addwf	ReadIntFromEeprom@idx& (0+255),w,b
 12317  001BBE  EC06  F01E         	call	_EepromRead
 12318  001BC2  0100               	movlb	0	; () banked
 12319  001BC4  6FB5               	movwf	??_ReadIntFromEeprom& (0+255),b
 12320  001BC6  51B5               	movf	??_ReadIntFromEeprom& (0+255),w,b
 12321  001BC8  6E1A               	movwf	___lmul@multiplier,c
 12322  001BCA  6A1B               	clrf	___lmul@multiplier+1,c
 12323  001BCC  6A1C               	clrf	___lmul@multiplier+2,c
 12324  001BCE  6A1D               	clrf	___lmul@multiplier+3,c
 12325  001BD0  C0B8  F01E         	movff	ReadIntFromEeprom@base,___lmul@multiplicand
 12326  001BD4  C0B9  F01F         	movff	ReadIntFromEeprom@base+1,___lmul@multiplicand+1
 12327  001BD8  C0BA  F020         	movff	ReadIntFromEeprom@base+2,___lmul@multiplicand+2
 12328  001BDC  C0BB  F021         	movff	ReadIntFromEeprom@base+3,___lmul@multiplicand+3
 12329  001BE0  EC26  F019         	call	___lmul	;wreg free
 12330  001BE4  0100               	movlb	0	; () banked
 12331  001BE6  51C3               	movf	ReadIntFromEeprom@retVal& (0+255),w,b
 12332  001BE8  101A               	iorwf	?___lmul,w,c
 12333  001BEA  6FC3               	movwf	ReadIntFromEeprom@retVal& (0+255),b
 12334  001BEC  51C4               	movf	(ReadIntFromEeprom@retVal+1)& (0+255),w,b
 12335  001BEE  101B               	iorwf	?___lmul+1,w,c
 12336  001BF0  6FC4               	movwf	(ReadIntFromEeprom@retVal+1)& (0+255),b
 12337  001BF2  51C5               	movf	(ReadIntFromEeprom@retVal+2)& (0+255),w,b
 12338  001BF4  101C               	iorwf	?___lmul+2,w,c
 12339  001BF6  6FC5               	movwf	(ReadIntFromEeprom@retVal+2)& (0+255),b
 12340  001BF8  51C6               	movf	(ReadIntFromEeprom@retVal+3)& (0+255),w,b
 12341  001BFA  101D               	iorwf	?___lmul+3,w,c
 12342  001BFC  6FC6               	movwf	(ReadIntFromEeprom@retVal+3)& (0+255),b
 12343                           
 12344                           ; BSR set to: 0
 12345  001BFE  2BC7               	incf	ReadIntFromEeprom@idx& (0+255),f,b
 12346  001C00                     l1332:
 12347                           
 12348                           ; BSR set to: 0
 12349                           
 12350                           ; BSR set to: 0
 12351  001C00  51C7               	movf	ReadIntFromEeprom@idx& (0+255),w,b
 12352  001C02  6FB5               	movwf	??_ReadIntFromEeprom& (0+255),b
 12353  001C04  6BB6               	clrf	(??_ReadIntFromEeprom+1)& (0+255),b
 12354  001C06  51B1               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 12355  001C08  5DB5               	subwf	??_ReadIntFromEeprom& (0+255),w,b
 12356  001C0A  51B6               	movf	(??_ReadIntFromEeprom+1)& (0+255),w,b
 12357  001C0C  0A80               	xorlw	128
 12358  001C0E  6FB7               	movwf	(??_ReadIntFromEeprom+2)& (0+255),b
 12359  001C10  51B2               	movf	(ReadIntFromEeprom@numOfByes+1)& (0+255),w,b
 12360  001C12  0A80               	xorlw	128
 12361  001C14  59B7               	subwfb	(??_ReadIntFromEeprom+2)& (0+255),w,b
 12362  001C16  A0D8               	btfss	status,0,c
 12363  001C18  D786               	goto	l1333
 12364                           
 12365                           ; BSR set to: 0
 12366                           ;SystemCommon.c: 127: }
 12367                           ;SystemCommon.c: 128: return retVal;
 12368  001C1A  C0C3  F0B1         	movff	ReadIntFromEeprom@retVal,?_ReadIntFromEeprom
 12369  001C1E  C0C4  F0B2         	movff	ReadIntFromEeprom@retVal+1,?_ReadIntFromEeprom+1
 12370  001C22  C0C5  F0B3         	movff	ReadIntFromEeprom@retVal+2,?_ReadIntFromEeprom+2
 12371  001C26  C0C6  F0B4         	movff	ReadIntFromEeprom@retVal+3,?_ReadIntFromEeprom+3
 12372                           
 12373                           ; BSR set to: 0
 12374  001C2A  0012               	return		;funcret
 12375  001C2C                     __end_of_ReadIntFromEeprom:
 12376                           	opt stack 0
 12377                           tosu	equ	0xFFF
 12378                           tosh	equ	0xFFE
 12379                           tosl	equ	0xFFD
 12380                           pclath	equ	0xFFA
 12381                           tblptru	equ	0xFF8
 12382                           tblptrh	equ	0xFF7
 12383                           tblptrl	equ	0xFF6
 12384                           tablat	equ	0xFF5
 12385                           prodh	equ	0xFF4
 12386                           prodl	equ	0xFF3
 12387                           intcon	equ	0xFF2
 12388                           intcon2	equ	0xFF1
 12389                           postinc0	equ	0xFEE
 12390                           plusw0	equ	0xFEB
 12391                           wreg	equ	0xFE8
 12392                           indf1	equ	0xFE7
 12393                           postinc1	equ	0xFE6
 12394                           postdec1	equ	0xFE5
 12395                           fsr1h	equ	0xFE2
 12396                           fsr1l	equ	0xFE1
 12397                           indf2	equ	0xFDF
 12398                           postinc2	equ	0xFDE
 12399                           postdec2	equ	0xFDD
 12400                           plusw2	equ	0xFDB
 12401                           fsr2h	equ	0xFDA
 12402                           fsr2l	equ	0xFD9
 12403                           status	equ	0xFD8
 12404                           
 12405 ;; *************** function ___lmul *****************
 12406 ;; Defined at:
 12407 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 12408 ;; Parameters:    Size  Location     Type
 12409 ;;  multiplier      4   25[COMRAM] unsigned long 
 12410 ;;  multiplicand    4   29[COMRAM] unsigned long 
 12411 ;; Auto vars:     Size  Location     Type
 12412 ;;  product         4   33[COMRAM] unsigned long 
 12413 ;; Return value:  Size  Location     Type
 12414 ;;                  4   25[COMRAM] unsigned long 
 12415 ;; Registers used:
 12416 ;;		wreg, status,2, status,0
 12417 ;; Tracked objects:
 12418 ;;		On entry : 0/0
 12419 ;;		On exit  : 0/0
 12420 ;;		Unchanged: 0/0
 12421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12422 ;;      Params:         8       0       0       0       0       0       0
 12423 ;;      Locals:         4       0       0       0       0       0       0
 12424 ;;      Temps:          0       0       0       0       0       0       0
 12425 ;;      Totals:        12       0       0       0       0       0       0
 12426 ;;Total ram usage:       12 bytes
 12427 ;; Hardware stack levels used:    1
 12428 ;; Hardware stack levels required when called:    3
 12429 ;; This function calls:
 12430 ;;		Nothing
 12431 ;; This function is called by:
 12432 ;;		_ReadIntFromEeprom
 12433 ;;		_strtol
 12434 ;; This function uses a non-reentrant model
 12435 ;;
 12436                           
 12437                           	psect	text75
 12438  00324C                     __ptext75:
 12439                           	opt stack 0
 12440  00324C                     ___lmul:
 12441                           	opt stack 22
 12442                           
 12443                           ; BSR set to: 0
 12444                           ;incstack = 0
 12445  00324C  0E00               	movlw	0
 12446  00324E  6E22               	movwf	___lmul@product,c
 12447  003250  0E00               	movlw	0
 12448  003252  6E23               	movwf	___lmul@product+1,c
 12449  003254  0E00               	movlw	0
 12450  003256  6E24               	movwf	___lmul@product+2,c
 12451  003258  0E00               	movlw	0
 12452  00325A  6E25               	movwf	___lmul@product+3,c
 12453  00325C  A01A               	btfss	___lmul@multiplier,0,c
 12454  00325E  D008               	goto	l1477
 12455  003260  501E               	movf	___lmul@multiplicand,w,c
 12456  003262  2622               	addwf	___lmul@product,f,c
 12457  003264  501F               	movf	___lmul@multiplicand+1,w,c
 12458  003266  2223               	addwfc	___lmul@product+1,f,c
 12459  003268  5020               	movf	___lmul@multiplicand+2,w,c
 12460  00326A  2224               	addwfc	___lmul@product+2,f,c
 12461  00326C  5021               	movf	___lmul@multiplicand+3,w,c
 12462  00326E  2225               	addwfc	___lmul@product+3,f,c
 12463  003270                     l1477:
 12464  003270  90D8               	bcf	status,0,c
 12465  003272  361E               	rlcf	___lmul@multiplicand,f,c
 12466  003274  361F               	rlcf	___lmul@multiplicand+1,f,c
 12467  003276  3620               	rlcf	___lmul@multiplicand+2,f,c
 12468  003278  3621               	rlcf	___lmul@multiplicand+3,f,c
 12469  00327A  90D8               	bcf	status,0,c
 12470  00327C  321D               	rrcf	___lmul@multiplier+3,f,c
 12471  00327E  321C               	rrcf	___lmul@multiplier+2,f,c
 12472  003280  321B               	rrcf	___lmul@multiplier+1,f,c
 12473  003282  321A               	rrcf	___lmul@multiplier,f,c
 12474  003284  501A               	movf	___lmul@multiplier,w,c
 12475  003286  101B               	iorwf	___lmul@multiplier+1,w,c
 12476  003288  101C               	iorwf	___lmul@multiplier+2,w,c
 12477  00328A  101D               	iorwf	___lmul@multiplier+3,w,c
 12478  00328C  A4D8               	btfss	status,2,c
 12479  00328E  D7E6               	goto	l1476
 12480  003290  C022  F01A         	movff	___lmul@product,?___lmul
 12481  003294  C023  F01B         	movff	___lmul@product+1,?___lmul+1
 12482  003298  C024  F01C         	movff	___lmul@product+2,?___lmul+2
 12483  00329C  C025  F01D         	movff	___lmul@product+3,?___lmul+3
 12484  0032A0  0012               	return		;funcret
 12485  0032A2                     __end_of___lmul:
 12486                           	opt stack 0
 12487                           tosu	equ	0xFFF
 12488                           tosh	equ	0xFFE
 12489                           tosl	equ	0xFFD
 12490                           pclath	equ	0xFFA
 12491                           tblptru	equ	0xFF8
 12492                           tblptrh	equ	0xFF7
 12493                           tblptrl	equ	0xFF6
 12494                           tablat	equ	0xFF5
 12495                           prodh	equ	0xFF4
 12496                           prodl	equ	0xFF3
 12497                           intcon	equ	0xFF2
 12498                           intcon2	equ	0xFF1
 12499                           postinc0	equ	0xFEE
 12500                           plusw0	equ	0xFEB
 12501                           wreg	equ	0xFE8
 12502                           indf1	equ	0xFE7
 12503                           postinc1	equ	0xFE6
 12504                           postdec1	equ	0xFE5
 12505                           fsr1h	equ	0xFE2
 12506                           fsr1l	equ	0xFE1
 12507                           indf2	equ	0xFDF
 12508                           postinc2	equ	0xFDE
 12509                           postdec2	equ	0xFDD
 12510                           plusw2	equ	0xFDB
 12511                           fsr2h	equ	0xFDA
 12512                           fsr2l	equ	0xFD9
 12513                           status	equ	0xFD8
 12514                           
 12515 ;; *************** function _EepromRead *****************
 12516 ;; Defined at:
 12517 ;;		line 215 in file "FlashApp.c"
 12518 ;; Parameters:    Size  Location     Type
 12519 ;;  address         1    wreg     unsigned char 
 12520 ;; Auto vars:     Size  Location     Type
 12521 ;;  address         1   24[COMRAM] unsigned char 
 12522 ;; Return value:  Size  Location     Type
 12523 ;;                  1    wreg      unsigned char 
 12524 ;; Registers used:
 12525 ;;		wreg, status,2, cstack
 12526 ;; Tracked objects:
 12527 ;;		On entry : 0/0
 12528 ;;		On exit  : 0/0
 12529 ;;		Unchanged: 0/0
 12530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12531 ;;      Params:         0       0       0       0       0       0       0
 12532 ;;      Locals:         1       0       0       0       0       0       0
 12533 ;;      Temps:          0       0       0       0       0       0       0
 12534 ;;      Totals:         1       0       0       0       0       0       0
 12535 ;;Total ram usage:        1 bytes
 12536 ;; Hardware stack levels used:    1
 12537 ;; Hardware stack levels required when called:    4
 12538 ;; This function calls:
 12539 ;;		_DATAEE_ReadByte
 12540 ;; This function is called by:
 12541 ;;		_ReadIntFromEeprom
 12542 ;; This function uses a non-reentrant model
 12543 ;;
 12544                           
 12545                           	psect	text76
 12546  003C0C                     __ptext76:
 12547                           	opt stack 0
 12548  003C0C                     _EepromRead:
 12549                           	opt stack 22
 12550                           
 12551                           ;incstack = 0
 12552                           ;EepromRead@address stored from wreg
 12553  003C0C  6E19               	movwf	EepromRead@address,c
 12554                           
 12555                           ;FlashApp.c: 217: return DATAEE_ReadByte(address);
 12556  003C0E  5019               	movf	EepromRead@address,w,c
 12557  003C10  EC8E  F01D         	call	_DATAEE_ReadByte
 12558  003C14  0012               	return	
 12559  003C16                     __end_of_EepromRead:
 12560                           	opt stack 0
 12561                           tosu	equ	0xFFF
 12562                           tosh	equ	0xFFE
 12563                           tosl	equ	0xFFD
 12564                           pclath	equ	0xFFA
 12565                           tblptru	equ	0xFF8
 12566                           tblptrh	equ	0xFF7
 12567                           tblptrl	equ	0xFF6
 12568                           tablat	equ	0xFF5
 12569                           prodh	equ	0xFF4
 12570                           prodl	equ	0xFF3
 12571                           intcon	equ	0xFF2
 12572                           intcon2	equ	0xFF1
 12573                           postinc0	equ	0xFEE
 12574                           plusw0	equ	0xFEB
 12575                           wreg	equ	0xFE8
 12576                           indf1	equ	0xFE7
 12577                           postinc1	equ	0xFE6
 12578                           postdec1	equ	0xFE5
 12579                           fsr1h	equ	0xFE2
 12580                           fsr1l	equ	0xFE1
 12581                           indf2	equ	0xFDF
 12582                           postinc2	equ	0xFDE
 12583                           postdec2	equ	0xFDD
 12584                           plusw2	equ	0xFDB
 12585                           fsr2h	equ	0xFDA
 12586                           fsr2l	equ	0xFD9
 12587                           status	equ	0xFD8
 12588                           
 12589 ;; *************** function _DATAEE_ReadByte *****************
 12590 ;; Defined at:
 12591 ;;		line 194 in file "mcc_generated_files/memory.c"
 12592 ;; Parameters:    Size  Location     Type
 12593 ;;  bAdd            1    wreg     unsigned char 
 12594 ;; Auto vars:     Size  Location     Type
 12595 ;;  bAdd            1   23[COMRAM] unsigned char 
 12596 ;; Return value:  Size  Location     Type
 12597 ;;                  1    wreg      unsigned char 
 12598 ;; Registers used:
 12599 ;;		wreg, status,2
 12600 ;; Tracked objects:
 12601 ;;		On entry : 0/0
 12602 ;;		On exit  : 0/0
 12603 ;;		Unchanged: 0/0
 12604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12605 ;;      Params:         0       0       0       0       0       0       0
 12606 ;;      Locals:         1       0       0       0       0       0       0
 12607 ;;      Temps:          0       0       0       0       0       0       0
 12608 ;;      Totals:         1       0       0       0       0       0       0
 12609 ;;Total ram usage:        1 bytes
 12610 ;; Hardware stack levels used:    1
 12611 ;; Hardware stack levels required when called:    3
 12612 ;; This function calls:
 12613 ;;		Nothing
 12614 ;; This function is called by:
 12615 ;;		_EepromRead
 12616 ;;		_EepromTest
 12617 ;; This function uses a non-reentrant model
 12618 ;;
 12619                           
 12620                           	psect	text77
 12621  003B1C                     __ptext77:
 12622                           	opt stack 0
 12623  003B1C                     _DATAEE_ReadByte:
 12624                           	opt stack 22
 12625                           
 12626                           ;incstack = 0
 12627                           ;DATAEE_ReadByte@bAdd stored from wreg
 12628  003B1C  6E18               	movwf	DATAEE_ReadByte@bAdd,c
 12629                           
 12630                           ;memory.c: 197: EEADR = (bAdd & 0xFF);
 12631  003B1E  C018  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
 12632                           
 12633                           ;memory.c: 198: EECON1bits.CFGS = 0;
 12634  003B22  9CA6               	bcf	4006,6,c	;volsfr
 12635                           
 12636                           ;memory.c: 199: EECON1bits.EEPGD = 0;
 12637  003B24  9EA6               	bcf	4006,7,c	;volsfr
 12638                           
 12639                           ;memory.c: 200: EECON1bits.RD = 1;
 12640  003B26  80A6               	bsf	4006,0,c	;volsfr
 12641                           
 12642                           ;memory.c: 201: __nop();
 12643  003B28  F000               	nop	
 12644                           
 12645                           ;memory.c: 202: __nop();
 12646  003B2A  F000               	nop	
 12647                           
 12648                           ;memory.c: 204: return (EEDATA);
 12649  003B2C  50A8               	movf	4008,w,c	;volatile
 12650  003B2E  0012               	return	
 12651  003B30                     __end_of_DATAEE_ReadByte:
 12652                           	opt stack 0
 12653                           tosu	equ	0xFFF
 12654                           tosh	equ	0xFFE
 12655                           tosl	equ	0xFFD
 12656                           pclath	equ	0xFFA
 12657                           tblptru	equ	0xFF8
 12658                           tblptrh	equ	0xFF7
 12659                           tblptrl	equ	0xFF6
 12660                           tablat	equ	0xFF5
 12661                           prodh	equ	0xFF4
 12662                           prodl	equ	0xFF3
 12663                           intcon	equ	0xFF2
 12664                           intcon2	equ	0xFF1
 12665                           postinc0	equ	0xFEE
 12666                           plusw0	equ	0xFEB
 12667                           wreg	equ	0xFE8
 12668                           indf1	equ	0xFE7
 12669                           postinc1	equ	0xFE6
 12670                           postdec1	equ	0xFE5
 12671                           fsr1h	equ	0xFE2
 12672                           fsr1l	equ	0xFE1
 12673                           indf2	equ	0xFDF
 12674                           postinc2	equ	0xFDE
 12675                           postdec2	equ	0xFDD
 12676                           plusw2	equ	0xFDB
 12677                           fsr2h	equ	0xFDA
 12678                           fsr2l	equ	0xFD9
 12679                           status	equ	0xFD8
 12680                           
 12681 ;; *************** function _ClearMcuRunTime *****************
 12682 ;; Defined at:
 12683 ;;		line 49 in file "SystemStatus.c"
 12684 ;; Parameters:    Size  Location     Type
 12685 ;;		None
 12686 ;; Auto vars:     Size  Location     Type
 12687 ;;		None
 12688 ;; Return value:  Size  Location     Type
 12689 ;;                  1    wreg      void 
 12690 ;; Registers used:
 12691 ;;		wreg, status,2
 12692 ;; Tracked objects:
 12693 ;;		On entry : 0/0
 12694 ;;		On exit  : 0/0
 12695 ;;		Unchanged: 0/0
 12696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12697 ;;      Params:         0       0       0       0       0       0       0
 12698 ;;      Locals:         0       0       0       0       0       0       0
 12699 ;;      Temps:          0       0       0       0       0       0       0
 12700 ;;      Totals:         0       0       0       0       0       0       0
 12701 ;;Total ram usage:        0 bytes
 12702 ;; Hardware stack levels used:    1
 12703 ;; Hardware stack levels required when called:    3
 12704 ;; This function calls:
 12705 ;;		Nothing
 12706 ;; This function is called by:
 12707 ;;		_InitSystemApplicationManagers
 12708 ;; This function uses a non-reentrant model
 12709 ;;
 12710                           
 12711                           	psect	text78
 12712  003B30                     __ptext78:
 12713                           	opt stack 0
 12714  003B30                     _ClearMcuRunTime:
 12715                           	opt stack 26
 12716                           
 12717                           ;SystemStatus.c: 51: mcuRunTimeIn5SecTicks = 0;
 12718                           
 12719                           ;incstack = 0
 12720  003B30  0E00               	movlw	0
 12721  003B32  0101               	movlb	1	; () banked
 12722  003B34  6F6E               	movwf	_mcuRunTimeIn5SecTicks& (0+255),b
 12723  003B36  0E00               	movlw	0
 12724  003B38  6F6F               	movwf	(_mcuRunTimeIn5SecTicks+1)& (0+255),b
 12725  003B3A  0E00               	movlw	0
 12726  003B3C  6F70               	movwf	(_mcuRunTimeIn5SecTicks+2)& (0+255),b
 12727  003B3E  0E00               	movlw	0
 12728  003B40  6F71               	movwf	(_mcuRunTimeIn5SecTicks+3)& (0+255),b
 12729                           
 12730                           ; BSR set to: 1
 12731  003B42  0012               	return		;funcret
 12732  003B44                     __end_of_ClearMcuRunTime:
 12733                           	opt stack 0
 12734                           tosu	equ	0xFFF
 12735                           tosh	equ	0xFFE
 12736                           tosl	equ	0xFFD
 12737                           pclath	equ	0xFFA
 12738                           tblptru	equ	0xFF8
 12739                           tblptrh	equ	0xFF7
 12740                           tblptrl	equ	0xFF6
 12741                           tablat	equ	0xFF5
 12742                           prodh	equ	0xFF4
 12743                           prodl	equ	0xFF3
 12744                           intcon	equ	0xFF2
 12745                           intcon2	equ	0xFF1
 12746                           postinc0	equ	0xFEE
 12747                           plusw0	equ	0xFEB
 12748                           wreg	equ	0xFE8
 12749                           indf1	equ	0xFE7
 12750                           postinc1	equ	0xFE6
 12751                           postdec1	equ	0xFE5
 12752                           fsr1h	equ	0xFE2
 12753                           fsr1l	equ	0xFE1
 12754                           indf2	equ	0xFDF
 12755                           postinc2	equ	0xFDE
 12756                           postdec2	equ	0xFDD
 12757                           plusw2	equ	0xFDB
 12758                           fsr2h	equ	0xFDA
 12759                           fsr2l	equ	0xFD9
 12760                           status	equ	0xFD8
 12761                           
 12762 ;; *************** function _CheckFlashPrecentage *****************
 12763 ;; Defined at:
 12764 ;;		line 205 in file "FlashApp.c"
 12765 ;; Parameters:    Size  Location     Type
 12766 ;;		None
 12767 ;; Auto vars:     Size  Location     Type
 12768 ;;  precentage      3   28[BANK0 ] void 
 12769 ;; Return value:  Size  Location     Type
 12770 ;;                  1    wreg      unsigned char 
 12771 ;; Registers used:
 12772 ;;		wreg, status,2, status,0, cstack
 12773 ;; Tracked objects:
 12774 ;;		On entry : 0/0
 12775 ;;		On exit  : 0/0
 12776 ;;		Unchanged: 0/0
 12777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12778 ;;      Params:         0       0       0       0       0       0       0
 12779 ;;      Locals:         0       3       0       0       0       0       0
 12780 ;;      Temps:          0       4       0       0       0       0       0
 12781 ;;      Totals:         0       7       0       0       0       0       0
 12782 ;;Total ram usage:        7 bytes
 12783 ;; Hardware stack levels used:    1
 12784 ;; Hardware stack levels required when called:    5
 12785 ;; This function calls:
 12786 ;;		___ftdiv
 12787 ;;		___ftge
 12788 ;;		___ftmul
 12789 ;;		___lltoft
 12790 ;; This function is called by:
 12791 ;;		_main
 12792 ;; This function uses a non-reentrant model
 12793 ;;
 12794                           
 12795                           	psect	text79
 12796  0026E6                     __ptext79:
 12797                           	opt stack 0
 12798  0026E6                     _CheckFlashPrecentage:
 12799                           	opt stack 25
 12800                           
 12801                           ;FlashApp.c: 207: double precentage = ((double)(0x7FF0 - writeAddress) / 0x7FF0) * 100;
 12802                           
 12803                           ; BSR set to: 1
 12804                           ;incstack = 0
 12805  0026E6  0EE0               	movlw	224
 12806  0026E8  6E2C               	movwf	___ftdiv@f2,c
 12807  0026EA  0EFF               	movlw	255
 12808  0026EC  6E2D               	movwf	___ftdiv@f2+1,c
 12809  0026EE  0E46               	movlw	70
 12810  0026F0  6E2E               	movwf	___ftdiv@f2+2,c
 12811  0026F2  C040  F078         	movff	_writeAddress,??_CheckFlashPrecentage
 12812  0026F6  C041  F079         	movff	_writeAddress+1,??_CheckFlashPrecentage+1
 12813  0026FA  C042  F07A         	movff	_writeAddress+2,??_CheckFlashPrecentage+2
 12814  0026FE  C043  F07B         	movff	_writeAddress+3,??_CheckFlashPrecentage+3
 12815  002702  0100               	movlb	0	; () banked
 12816  002704  1F78               	comf	??_CheckFlashPrecentage& (0+255),f,b
 12817  002706  1F79               	comf	(??_CheckFlashPrecentage+1)& (0+255),f,b
 12818  002708  1F7A               	comf	(??_CheckFlashPrecentage+2)& (0+255),f,b
 12819  00270A  1F7B               	comf	(??_CheckFlashPrecentage+3)& (0+255),f,b
 12820  00270C  2B78               	incf	??_CheckFlashPrecentage& (0+255),f,b
 12821  00270E  0E00               	movlw	0
 12822  002710  2379               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),f,b
 12823  002712  237A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),f,b
 12824  002714  237B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),f,b
 12825  002716  0EF0               	movlw	240
 12826  002718  2578               	addwf	??_CheckFlashPrecentage& (0+255),w,b
 12827  00271A  6E20               	movwf	___lltoft@c,c
 12828  00271C  0E7F               	movlw	127
 12829  00271E  2179               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),w,b
 12830  002720  6E21               	movwf	___lltoft@c+1,c
 12831  002722  0E00               	movlw	0
 12832  002724  217A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),w,b
 12833  002726  6E22               	movwf	___lltoft@c+2,c
 12834  002728  0E00               	movlw	0
 12835  00272A  217B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),w,b
 12836  00272C  6E23               	movwf	___lltoft@c+3,c
 12837  00272E  EC4A  F018         	call	___lltoft	;wreg free
 12838  002732  C020  F029         	movff	?___lltoft,___ftdiv@f1
 12839  002736  C021  F02A         	movff	?___lltoft+1,___ftdiv@f1+1
 12840  00273A  C022  F02B         	movff	?___lltoft+2,___ftdiv@f1+2
 12841  00273E  EC8F  F010         	call	___ftdiv	;wreg free
 12842  002742  C029  F069         	movff	?___ftdiv,___ftmul@f1
 12843  002746  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 12844  00274A  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 12845  00274E  0E00               	movlw	0
 12846  002750  0100               	movlb	0	; () banked
 12847  002752  6F6C               	movwf	___ftmul@f2& (0+255),b
 12848  002754  0EC8               	movlw	200
 12849  002756  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 12850  002758  0E42               	movlw	66
 12851  00275A  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 12852  00275C  EC14  F010         	call	___ftmul	;wreg free
 12853  002760  C069  F07C         	movff	?___ftmul,CheckFlashPrecentage@precentage
 12854  002764  C06A  F07D         	movff	?___ftmul+1,CheckFlashPrecentage@precentage+1
 12855  002768  C06B  F07E         	movff	?___ftmul+2,CheckFlashPrecentage@precentage+2
 12856                           
 12857                           ;FlashApp.c: 208: return (precentage > 75) ? 1 : 0;
 12858  00276C  0E00               	movlw	0
 12859  00276E  6E18               	movwf	___ftge@ff1,c
 12860  002770  0E96               	movlw	150
 12861  002772  6E19               	movwf	___ftge@ff1+1,c
 12862  002774  0E42               	movlw	66
 12863  002776  6E1A               	movwf	___ftge@ff1+2,c
 12864  002778  C07C  F01B         	movff	CheckFlashPrecentage@precentage,___ftge@ff2
 12865  00277C  C07D  F01C         	movff	CheckFlashPrecentage@precentage+1,___ftge@ff2+1
 12866  002780  C07E  F01D         	movff	CheckFlashPrecentage@precentage+2,___ftge@ff2+2
 12867  002784  ECDB  F015         	call	___ftge	;wreg free
 12868  002788  B0D8               	btfsc	status,0,c
 12869  00278A  D002               	goto	u8870
 12870  00278C  0E01               	movlw	1
 12871  00278E  0012               	return	
 12872  002790                     u8870:
 12873  002790  0E00               	movlw	0
 12874  002792  0012               	return	
 12875  002794                     __end_of_CheckFlashPrecentage:
 12876                           	opt stack 0
 12877                           tosu	equ	0xFFF
 12878                           tosh	equ	0xFFE
 12879                           tosl	equ	0xFFD
 12880                           pclath	equ	0xFFA
 12881                           tblptru	equ	0xFF8
 12882                           tblptrh	equ	0xFF7
 12883                           tblptrl	equ	0xFF6
 12884                           tablat	equ	0xFF5
 12885                           prodh	equ	0xFF4
 12886                           prodl	equ	0xFF3
 12887                           intcon	equ	0xFF2
 12888                           intcon2	equ	0xFF1
 12889                           postinc0	equ	0xFEE
 12890                           plusw0	equ	0xFEB
 12891                           wreg	equ	0xFE8
 12892                           indf1	equ	0xFE7
 12893                           postinc1	equ	0xFE6
 12894                           postdec1	equ	0xFE5
 12895                           fsr1h	equ	0xFE2
 12896                           fsr1l	equ	0xFE1
 12897                           indf2	equ	0xFDF
 12898                           postinc2	equ	0xFDE
 12899                           postdec2	equ	0xFDD
 12900                           plusw2	equ	0xFDB
 12901                           fsr2h	equ	0xFDA
 12902                           fsr2l	equ	0xFD9
 12903                           status	equ	0xFD8
 12904                           
 12905 ;; *************** function _BlinkOkLeds *****************
 12906 ;; Defined at:
 12907 ;;		line 24 in file "LedsApp.c"
 12908 ;; Parameters:    Size  Location     Type
 12909 ;;  state           1    wreg     enum E7571
 12910 ;; Auto vars:     Size  Location     Type
 12911 ;;  state           1   26[COMRAM] enum E7571
 12912 ;;  idx             2   27[COMRAM] int 
 12913 ;; Return value:  Size  Location     Type
 12914 ;;                  1    wreg      void 
 12915 ;; Registers used:
 12916 ;;		wreg, status,2, status,0
 12917 ;; Tracked objects:
 12918 ;;		On entry : 0/0
 12919 ;;		On exit  : 0/0
 12920 ;;		Unchanged: 0/0
 12921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12922 ;;      Params:         0       0       0       0       0       0       0
 12923 ;;      Locals:         3       0       0       0       0       0       0
 12924 ;;      Temps:          3       0       0       0       0       0       0
 12925 ;;      Totals:         6       0       0       0       0       0       0
 12926 ;;Total ram usage:        6 bytes
 12927 ;; Hardware stack levels used:    1
 12928 ;; Hardware stack levels required when called:    3
 12929 ;; This function calls:
 12930 ;;		Nothing
 12931 ;; This function is called by:
 12932 ;;		_main
 12933 ;; This function uses a non-reentrant model
 12934 ;;
 12935                           
 12936                           	psect	text80
 12937  002F7C                     __ptext80:
 12938                           	opt stack 0
 12939  002F7C                     _BlinkOkLeds:
 12940                           	opt stack 27
 12941                           
 12942                           ;incstack = 0
 12943                           ;BlinkOkLeds@state stored from wreg
 12944  002F7C  6E1B               	movwf	BlinkOkLeds@state,c
 12945                           
 12946                           ;LedsApp.c: 26: for(int idx = 0; idx < state; idx++)
 12947  002F7E  0E00               	movlw	0
 12948  002F80  6E1D               	movwf	BlinkOkLeds@idx+1,c
 12949  002F82  0E00               	movlw	0
 12950  002F84  6E1C               	movwf	BlinkOkLeds@idx,c
 12951  002F86                     l6225:
 12952  002F86  501B               	movf	BlinkOkLeds@state,w,c
 12953  002F88  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 12954  002F8A  6A19               	clrf	(??_BlinkOkLeds+1)& (0+255),c
 12955  002F8C  5018               	movf	??_BlinkOkLeds,w,c
 12956  002F8E  5C1C               	subwf	BlinkOkLeds@idx,w,c
 12957  002F90  501D               	movf	BlinkOkLeds@idx+1,w,c
 12958  002F92  0A80               	xorlw	128
 12959  002F94  6E1A               	movwf	(??_BlinkOkLeds+2)& (0+255),c
 12960  002F96  5019               	movf	??_BlinkOkLeds+1,w,c
 12961  002F98  0A80               	xorlw	128
 12962  002F9A  581A               	subwfb	(??_BlinkOkLeds+2)& (0+255),w,c
 12963  002F9C  B0D8               	btfsc	status,0,c
 12964  002F9E  0012               	return	
 12965                           
 12966                           ;LedsApp.c: 27: {
 12967                           ;LedsApp.c: 28: LATCbits.LATC0 = 0;
 12968  002FA0  908B               	bcf	3979,0,c	;volatile
 12969                           
 12970                           ;LedsApp.c: 29: _delay((unsigned long)((100)*(8000000/4000.0)));
 12971  002FA2  0E02               	movlw	2
 12972  002FA4  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 12973  002FA6  0E04               	movlw	4
 12974  002FA8  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 12975  002FAA  0EBA               	movlw	186
 12976  002FAC                     u9077:
 12977  002FAC  2EE8               	decfsz	wreg,f,c
 12978  002FAE  D7FE               	bra	u9077
 12979  002FB0  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 12980  002FB2  D7FC               	bra	u9077
 12981  002FB4  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 12982  002FB6  D7FA               	bra	u9077
 12983  002FB8  D000               	nop2	
 12984                           
 12985                           ;LedsApp.c: 30: LATCbits.LATC0 = 1;
 12986  002FBA  808B               	bsf	3979,0,c	;volatile
 12987                           
 12988                           ;LedsApp.c: 31: _delay((unsigned long)((100)*(8000000/4000.0)));
 12989  002FBC  0E02               	movlw	2
 12990  002FBE  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 12991  002FC0  0E04               	movlw	4
 12992  002FC2  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 12993  002FC4  0EBA               	movlw	186
 12994  002FC6                     u9087:
 12995  002FC6  2EE8               	decfsz	wreg,f,c
 12996  002FC8  D7FE               	bra	u9087
 12997  002FCA  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 12998  002FCC  D7FC               	bra	u9087
 12999  002FCE  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 13000  002FD0  D7FA               	bra	u9087
 13001  002FD2  D000               	nop2	
 13002  002FD4  4A1C               	infsnz	BlinkOkLeds@idx,f,c
 13003  002FD6  2A1D               	incf	BlinkOkLeds@idx+1,f,c
 13004  002FD8  D7D6               	goto	l6225
 13005  002FDA                     __end_of_BlinkOkLeds:
 13006                           	opt stack 0
 13007                           tosu	equ	0xFFF
 13008                           tosh	equ	0xFFE
 13009                           tosl	equ	0xFFD
 13010                           pclath	equ	0xFFA
 13011                           tblptru	equ	0xFF8
 13012                           tblptrh	equ	0xFF7
 13013                           tblptrl	equ	0xFF6
 13014                           tablat	equ	0xFF5
 13015                           prodh	equ	0xFF4
 13016                           prodl	equ	0xFF3
 13017                           intcon	equ	0xFF2
 13018                           intcon2	equ	0xFF1
 13019                           postinc0	equ	0xFEE
 13020                           plusw0	equ	0xFEB
 13021                           wreg	equ	0xFE8
 13022                           indf1	equ	0xFE7
 13023                           postinc1	equ	0xFE6
 13024                           postdec1	equ	0xFE5
 13025                           fsr1h	equ	0xFE2
 13026                           fsr1l	equ	0xFE1
 13027                           indf2	equ	0xFDF
 13028                           postinc2	equ	0xFDE
 13029                           postdec2	equ	0xFDD
 13030                           plusw2	equ	0xFDB
 13031                           fsr2h	equ	0xFDA
 13032                           fsr2l	equ	0xFD9
 13033                           status	equ	0xFD8
 13034                           
 13035 ;; *************** function _BlinkErrorLeds *****************
 13036 ;; Defined at:
 13037 ;;		line 13 in file "LedsApp.c"
 13038 ;; Parameters:    Size  Location     Type
 13039 ;;  state           1    wreg     enum E7574
 13040 ;; Auto vars:     Size  Location     Type
 13041 ;;  state           1   26[COMRAM] enum E7574
 13042 ;;  idx             2   27[COMRAM] int 
 13043 ;; Return value:  Size  Location     Type
 13044 ;;                  1    wreg      void 
 13045 ;; Registers used:
 13046 ;;		wreg, status,2, status,0
 13047 ;; Tracked objects:
 13048 ;;		On entry : 0/0
 13049 ;;		On exit  : 0/0
 13050 ;;		Unchanged: 0/0
 13051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13052 ;;      Params:         0       0       0       0       0       0       0
 13053 ;;      Locals:         3       0       0       0       0       0       0
 13054 ;;      Temps:          3       0       0       0       0       0       0
 13055 ;;      Totals:         6       0       0       0       0       0       0
 13056 ;;Total ram usage:        6 bytes
 13057 ;; Hardware stack levels used:    1
 13058 ;; Hardware stack levels required when called:    3
 13059 ;; This function calls:
 13060 ;;		Nothing
 13061 ;; This function is called by:
 13062 ;;		_main
 13063 ;; This function uses a non-reentrant model
 13064 ;;
 13065                           
 13066                           	psect	text81
 13067  002FDA                     __ptext81:
 13068                           	opt stack 0
 13069  002FDA                     _BlinkErrorLeds:
 13070                           	opt stack 27
 13071                           
 13072                           ;incstack = 0
 13073                           ;BlinkErrorLeds@state stored from wreg
 13074  002FDA  6E1B               	movwf	BlinkErrorLeds@state,c
 13075                           
 13076                           ;LedsApp.c: 15: for(int idx = 0; idx < state; idx++)
 13077  002FDC  0E00               	movlw	0
 13078  002FDE  6E1D               	movwf	BlinkErrorLeds@idx+1,c
 13079  002FE0  0E00               	movlw	0
 13080  002FE2  6E1C               	movwf	BlinkErrorLeds@idx,c
 13081  002FE4                     l6213:
 13082  002FE4  501B               	movf	BlinkErrorLeds@state,w,c
 13083  002FE6  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 13084  002FE8  6A19               	clrf	(??_BlinkErrorLeds+1)& (0+255),c
 13085  002FEA  5018               	movf	??_BlinkErrorLeds,w,c
 13086  002FEC  5C1C               	subwf	BlinkErrorLeds@idx,w,c
 13087  002FEE  501D               	movf	BlinkErrorLeds@idx+1,w,c
 13088  002FF0  0A80               	xorlw	128
 13089  002FF2  6E1A               	movwf	(??_BlinkErrorLeds+2)& (0+255),c
 13090  002FF4  5019               	movf	??_BlinkErrorLeds+1,w,c
 13091  002FF6  0A80               	xorlw	128
 13092  002FF8  581A               	subwfb	(??_BlinkErrorLeds+2)& (0+255),w,c
 13093  002FFA  B0D8               	btfsc	status,0,c
 13094  002FFC  0012               	return	
 13095                           
 13096                           ;LedsApp.c: 16: {
 13097                           ;LedsApp.c: 17: LATBbits.LATB4 = 0;
 13098  002FFE  988A               	bcf	3978,4,c	;volatile
 13099                           
 13100                           ;LedsApp.c: 18: _delay((unsigned long)((100)*(8000000/4000.0)));
 13101  003000  0E02               	movlw	2
 13102  003002  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
 13103  003004  0E04               	movlw	4
 13104  003006  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 13105  003008  0EBA               	movlw	186
 13106  00300A                     u9097:
 13107  00300A  2EE8               	decfsz	wreg,f,c
 13108  00300C  D7FE               	bra	u9097
 13109  00300E  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
 13110  003010  D7FC               	bra	u9097
 13111  003012  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
 13112  003014  D7FA               	bra	u9097
 13113  003016  D000               	nop2	
 13114                           
 13115                           ;LedsApp.c: 19: LATBbits.LATB4 = 1;
 13116  003018  888A               	bsf	3978,4,c	;volatile
 13117                           
 13118                           ;LedsApp.c: 20: _delay((unsigned long)((100)*(8000000/4000.0)));
 13119  00301A  0E02               	movlw	2
 13120  00301C  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
 13121  00301E  0E04               	movlw	4
 13122  003020  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 13123  003022  0EBA               	movlw	186
 13124  003024                     u9107:
 13125  003024  2EE8               	decfsz	wreg,f,c
 13126  003026  D7FE               	bra	u9107
 13127  003028  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
 13128  00302A  D7FC               	bra	u9107
 13129  00302C  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
 13130  00302E  D7FA               	bra	u9107
 13131  003030  D000               	nop2	
 13132  003032  4A1C               	infsnz	BlinkErrorLeds@idx,f,c
 13133  003034  2A1D               	incf	BlinkErrorLeds@idx+1,f,c
 13134  003036  D7D6               	goto	l6213
 13135  003038                     __end_of_BlinkErrorLeds:
 13136                           	opt stack 0
 13137                           tosu	equ	0xFFF
 13138                           tosh	equ	0xFFE
 13139                           tosl	equ	0xFFD
 13140                           pclath	equ	0xFFA
 13141                           tblptru	equ	0xFF8
 13142                           tblptrh	equ	0xFF7
 13143                           tblptrl	equ	0xFF6
 13144                           tablat	equ	0xFF5
 13145                           prodh	equ	0xFF4
 13146                           prodl	equ	0xFF3
 13147                           intcon	equ	0xFF2
 13148                           intcon2	equ	0xFF1
 13149                           postinc0	equ	0xFEE
 13150                           plusw0	equ	0xFEB
 13151                           wreg	equ	0xFE8
 13152                           indf1	equ	0xFE7
 13153                           postinc1	equ	0xFE6
 13154                           postdec1	equ	0xFE5
 13155                           fsr1h	equ	0xFE2
 13156                           fsr1l	equ	0xFE1
 13157                           indf2	equ	0xFDF
 13158                           postinc2	equ	0xFDE
 13159                           postdec2	equ	0xFDD
 13160                           plusw2	equ	0xFDB
 13161                           fsr2h	equ	0xFDA
 13162                           fsr2l	equ	0xFD9
 13163                           status	equ	0xFD8
 13164                           
 13165 ;; *************** function _AdcConvert *****************
 13166 ;; Defined at:
 13167 ;;		line 56 in file "AdcApp.c"
 13168 ;; Parameters:    Size  Location     Type
 13169 ;;		None
 13170 ;; Auto vars:     Size  Location     Type
 13171 ;;  _adcResult      2   83[BANK0 ] unsigned int 
 13172 ;;  idx             1   92[BANK0 ] unsigned char 
 13173 ;;  _adcResult      2   85[BANK0 ] unsigned int 
 13174 ;;  adcRes          2   90[BANK0 ] unsigned int 
 13175 ;; Return value:  Size  Location     Type
 13176 ;;                  1    wreg      void 
 13177 ;; Registers used:
 13178 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13179 ;; Tracked objects:
 13180 ;;		On entry : 0/0
 13181 ;;		On exit  : 0/0
 13182 ;;		Unchanged: 0/0
 13183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13184 ;;      Params:         0       0       0       0       0       0       0
 13185 ;;      Locals:         0      10       0       0       0       0       0
 13186 ;;      Temps:          0       2       0       0       0       0       0
 13187 ;;      Totals:         0      12       0       0       0       0       0
 13188 ;;Total ram usage:       12 bytes
 13189 ;; Hardware stack levels used:    1
 13190 ;; Hardware stack levels required when called:    8
 13191 ;; This function calls:
 13192 ;;		_ADC_GetConversion
 13193 ;;		_FlashSampleWrite
 13194 ;;		___ftdiv
 13195 ;;		___ftmul
 13196 ;;		___fttol
 13197 ;;		___lwtoft
 13198 ;;		_pow
 13199 ;; This function is called by:
 13200 ;;		_main
 13201 ;; This function uses a non-reentrant model
 13202 ;;
 13203                           
 13204                           	psect	text82
 13205  001214                     __ptext82:
 13206                           	opt stack 0
 13207  001214                     _AdcConvert:
 13208                           	opt stack 22
 13209                           
 13210                           ;AdcApp.c: 61: uint16_t adcRes = 0;
 13211                           
 13212                           ;incstack = 0
 13213  001214  0E00               	movlw	0
 13214  001216  0100               	movlb	0	; () banked
 13215  001218  6FBB               	movwf	(AdcConvert@adcRes+1)& (0+255),b
 13216  00121A  0E00               	movlw	0
 13217  00121C  6FBA               	movwf	AdcConvert@adcRes& (0+255),b
 13218                           
 13219                           ;AdcApp.c: 63: if (adcSampleMode == CIRCULAR)
 13220  00121E  503B               	movf	_adcSampleMode,w,c
 13221  001220  A4D8               	btfss	status,2,c
 13222  001222  D073               	goto	l120
 13223                           
 13224                           ; BSR set to: 0
 13225                           ;AdcApp.c: 64: {
 13226                           ;AdcApp.c: 65: for(uint8_t idx = 0; idx < (7); idx++)
 13227  001224  0E00               	movlw	0
 13228  001226  6FBC               	movwf	AdcConvert@idx& (0+255),b
 13229  001228                     l8211:
 13230                           
 13231                           ; BSR set to: 0
 13232  001228  0E06               	movlw	6
 13233  00122A  65BC               	cpfsgt	AdcConvert@idx& (0+255),b
 13234  00122C  D001               	goto	l121
 13235  00122E  0012               	return	
 13236  001230                     l121:
 13237                           
 13238                           ; BSR set to: 0
 13239                           ;AdcApp.c: 66: {
 13240                           ;AdcApp.c: 67: adc_result_t _adcResult = ADC_GetConversion(channelArr[idx]);
 13241                           
 13242                           ; BSR set to: 0
 13243  001230  51BC               	movf	AdcConvert@idx& (0+255),w,b
 13244  001232  0D01               	mullw	1
 13245  001234  0E4A               	movlw	low _channelArr
 13246  001236  24F3               	addwf	prodl,w,c
 13247  001238  6EF6               	movwf	tblptrl,c
 13248  00123A  0E06               	movlw	high _channelArr
 13249  00123C  20F4               	addwfc	prodh,w,c
 13250  00123E  6EF7               	movwf	tblptrh,c
 13251  001240                     	if	0	;There are less than 3 active tblptr bytes
 13252  001240                     	endif
 13253  001240  0008               	tblrd		*
 13254  001242  50F5               	movf	tablat,w,c
 13255  001244  EC1E  F01C         	call	_ADC_GetConversion
 13256  001248  C018  F0B3         	movff	?_ADC_GetConversion,AdcConvert@_adcResult
 13257  00124C  C019  F0B4         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult+1
 13258                           
 13259                           ;AdcApp.c: 68: adcRes = (_adcResult/pow(2,(10)))*(3340);
 13260  001250  0E00               	movlw	0
 13261  001252  0100               	movlb	0	; () banked
 13262  001254  6FA3               	movwf	pow@y& (0+255),b
 13263  001256  0E20               	movlw	32
 13264  001258  6FA4               	movwf	(pow@y+1)& (0+255),b
 13265  00125A  0E41               	movlw	65
 13266  00125C  6FA5               	movwf	(pow@y+2)& (0+255),b
 13267  00125E  0E00               	movlw	0
 13268  001260  6FA0               	movwf	pow@x& (0+255),b
 13269  001262  0E00               	movlw	0
 13270  001264  6FA1               	movwf	(pow@x+1)& (0+255),b
 13271  001266  0E40               	movlw	64
 13272  001268  6FA2               	movwf	(pow@x+2)& (0+255),b
 13273  00126A  ECBC  F00A         	call	_pow	;wreg free
 13274  00126E  C0A0  F0B7         	movff	?_pow,_AdcConvert$3305
 13275  001272  C0A1  F0B8         	movff	?_pow+1,_AdcConvert$3305+1
 13276  001276  C0A2  F0B9         	movff	?_pow+2,_AdcConvert$3305+2
 13277                           
 13278                           ;AdcApp.c: 68: adcRes = (_adcResult/pow(2,(10)))*(3340);
 13279  00127A  0EC0               	movlw	192
 13280  00127C  0100               	movlb	0	; () banked
 13281  00127E  6F6C               	movwf	___ftmul@f2& (0+255),b
 13282  001280  0E50               	movlw	80
 13283  001282  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 13284  001284  0E45               	movlw	69
 13285  001286  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 13286  001288  C0B7  F02C         	movff	_AdcConvert$3305,___ftdiv@f2
 13287  00128C  C0B8  F02D         	movff	_AdcConvert$3305+1,___ftdiv@f2+1
 13288  001290  C0B9  F02E         	movff	_AdcConvert$3305+2,___ftdiv@f2+2
 13289  001294  C0B3  F020         	movff	AdcConvert@_adcResult,___lwtoft@c
 13290  001298  C0B4  F021         	movff	AdcConvert@_adcResult+1,___lwtoft@c+1
 13291  00129C  ECE9  F01C         	call	___lwtoft	;wreg free
 13292  0012A0  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 13293  0012A4  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 13294  0012A8  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 13295  0012AC  EC8F  F010         	call	___ftdiv	;wreg free
 13296  0012B0  C029  F069         	movff	?___ftdiv,___ftmul@f1
 13297  0012B4  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 13298  0012B8  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 13299  0012BC  EC14  F010         	call	___ftmul	;wreg free
 13300  0012C0  C069  F078         	movff	?___ftmul,___fttol@f1
 13301  0012C4  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 13302  0012C8  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 13303  0012CC  EC98  F00F         	call	___fttol	;wreg free
 13304  0012D0  C078  F0BA         	movff	?___fttol,AdcConvert@adcRes
 13305  0012D4  C079  F0BB         	movff	?___fttol+1,AdcConvert@adcRes+1
 13306                           
 13307                           ;AdcApp.c: 69: FlashSampleWrite(adcRes, idx + 1);
 13308  0012D8  C0BA  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 13309  0012DC  C0BB  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 13310  0012E0  0100               	movlb	0	; () banked
 13311  0012E2  29BC               	incf	AdcConvert@idx& (0+255),w,b
 13312  0012E4  6E2F               	movwf	FlashSampleWrite@channelNum,c
 13313  0012E6  EC9C  F00E         	call	_FlashSampleWrite	;wreg free
 13314                           
 13315                           ;AdcApp.c: 70: _delay((unsigned long)((250)*(8000000/4000.0)));
 13316  0012EA  0E03               	movlw	3
 13317  0012EC  0100               	movlb	0	; () banked
 13318  0012EE  6FB2               	movwf	(??_AdcConvert+1)& (0+255),b
 13319  0012F0  0E8A               	movlw	138
 13320  0012F2  6FB1               	movwf	??_AdcConvert& (0+255),b
 13321  0012F4  0E55               	movlw	85
 13322  0012F6                     u9117:
 13323  0012F6  2EE8               	decfsz	wreg,f,c
 13324  0012F8  D7FE               	bra	u9117
 13325  0012FA  2FB1               	decfsz	??_AdcConvert& (0+255),f,b
 13326  0012FC  D7FC               	bra	u9117
 13327  0012FE  2FB2               	decfsz	(??_AdcConvert+1)& (0+255),f,b
 13328  001300  D7FA               	bra	u9117
 13329  001302  D000               	nop2	
 13330  001304  0100               	movlb	0	; () banked
 13331  001306  2BBC               	incf	AdcConvert@idx& (0+255),f,b
 13332  001308  D78F               	goto	l8211
 13333  00130A                     l120:
 13334                           
 13335                           ; BSR set to: 0
 13336                           ;AdcApp.c: 73: else if (adcSampleMode == SINGLE_CHANNEL)
 13337                           
 13338                           ; BSR set to: 0
 13339  00130A  043B               	decf	_adcSampleMode,w,c
 13340  00130C  A4D8               	btfss	status,2,c
 13341  00130E  0012               	return	
 13342                           
 13343                           ; BSR set to: 0
 13344                           ;AdcApp.c: 74: {
 13345                           ;AdcApp.c: 75: adc_result_t _adcResult = ADC_GetConversion(channelArr[channel]);
 13346  001310  51E4               	movf	_channel& (0+255),w,b
 13347  001312  0D01               	mullw	1
 13348  001314  0E4A               	movlw	low _channelArr
 13349  001316  24F3               	addwf	prodl,w,c
 13350  001318  6EF6               	movwf	tblptrl,c
 13351  00131A  0E06               	movlw	high _channelArr
 13352  00131C  20F4               	addwfc	prodh,w,c
 13353  00131E  6EF7               	movwf	tblptrh,c
 13354  001320                     	if	0	;There are less than 3 active tblptr bytes
 13355  001320                     	endif
 13356  001320  0008               	tblrd		*
 13357  001322  50F5               	movf	tablat,w,c
 13358  001324  EC1E  F01C         	call	_ADC_GetConversion
 13359  001328  C018  F0B5         	movff	?_ADC_GetConversion,AdcConvert@_adcResult_340
 13360  00132C  C019  F0B6         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult_340+1
 13361                           
 13362                           ;AdcApp.c: 76: adcRes = (_adcResult/pow(2,(10)))*(3340);
 13363  001330  0E00               	movlw	0
 13364  001332  0100               	movlb	0	; () banked
 13365  001334  6FA3               	movwf	pow@y& (0+255),b
 13366  001336  0E20               	movlw	32
 13367  001338  6FA4               	movwf	(pow@y+1)& (0+255),b
 13368  00133A  0E41               	movlw	65
 13369  00133C  6FA5               	movwf	(pow@y+2)& (0+255),b
 13370  00133E  0E00               	movlw	0
 13371  001340  6FA0               	movwf	pow@x& (0+255),b
 13372  001342  0E00               	movlw	0
 13373  001344  6FA1               	movwf	(pow@x+1)& (0+255),b
 13374  001346  0E40               	movlw	64
 13375  001348  6FA2               	movwf	(pow@x+2)& (0+255),b
 13376  00134A  ECBC  F00A         	call	_pow	;wreg free
 13377  00134E  C0A0  F0B7         	movff	?_pow,_AdcConvert$3305
 13378  001352  C0A1  F0B8         	movff	?_pow+1,_AdcConvert$3305+1
 13379  001356  C0A2  F0B9         	movff	?_pow+2,_AdcConvert$3305+2
 13380                           
 13381                           ;AdcApp.c: 76: adcRes = (_adcResult/pow(2,(10)))*(3340);
 13382  00135A  0EC0               	movlw	192
 13383  00135C  0100               	movlb	0	; () banked
 13384  00135E  6F6C               	movwf	___ftmul@f2& (0+255),b
 13385  001360  0E50               	movlw	80
 13386  001362  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 13387  001364  0E45               	movlw	69
 13388  001366  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 13389  001368  C0B7  F02C         	movff	_AdcConvert$3305,___ftdiv@f2
 13390  00136C  C0B8  F02D         	movff	_AdcConvert$3305+1,___ftdiv@f2+1
 13391  001370  C0B9  F02E         	movff	_AdcConvert$3305+2,___ftdiv@f2+2
 13392  001374  C0B5  F020         	movff	AdcConvert@_adcResult_340,___lwtoft@c
 13393  001378  C0B6  F021         	movff	AdcConvert@_adcResult_340+1,___lwtoft@c+1
 13394  00137C  ECE9  F01C         	call	___lwtoft	;wreg free
 13395  001380  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 13396  001384  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 13397  001388  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 13398  00138C  EC8F  F010         	call	___ftdiv	;wreg free
 13399  001390  C029  F069         	movff	?___ftdiv,___ftmul@f1
 13400  001394  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 13401  001398  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 13402  00139C  EC14  F010         	call	___ftmul	;wreg free
 13403  0013A0  C069  F078         	movff	?___ftmul,___fttol@f1
 13404  0013A4  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 13405  0013A8  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 13406  0013AC  EC98  F00F         	call	___fttol	;wreg free
 13407  0013B0  C078  F0BA         	movff	?___fttol,AdcConvert@adcRes
 13408  0013B4  C079  F0BB         	movff	?___fttol+1,AdcConvert@adcRes+1
 13409                           
 13410                           ;AdcApp.c: 77: FlashSampleWrite(adcRes, 1);
 13411  0013B8  C0BA  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 13412  0013BC  C0BB  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 13413  0013C0  0E01               	movlw	1
 13414  0013C2  6E2F               	movwf	FlashSampleWrite@channelNum,c
 13415  0013C4  EC9C  F00E         	call	_FlashSampleWrite	;wreg free
 13416  0013C8  0012               	return	
 13417  0013CA                     __end_of_AdcConvert:
 13418                           	opt stack 0
 13419                           tosu	equ	0xFFF
 13420                           tosh	equ	0xFFE
 13421                           tosl	equ	0xFFD
 13422                           pclath	equ	0xFFA
 13423                           tblptru	equ	0xFF8
 13424                           tblptrh	equ	0xFF7
 13425                           tblptrl	equ	0xFF6
 13426                           tablat	equ	0xFF5
 13427                           prodh	equ	0xFF4
 13428                           prodl	equ	0xFF3
 13429                           intcon	equ	0xFF2
 13430                           intcon2	equ	0xFF1
 13431                           postinc0	equ	0xFEE
 13432                           plusw0	equ	0xFEB
 13433                           wreg	equ	0xFE8
 13434                           indf1	equ	0xFE7
 13435                           postinc1	equ	0xFE6
 13436                           postdec1	equ	0xFE5
 13437                           fsr1h	equ	0xFE2
 13438                           fsr1l	equ	0xFE1
 13439                           indf2	equ	0xFDF
 13440                           postinc2	equ	0xFDE
 13441                           postdec2	equ	0xFDD
 13442                           plusw2	equ	0xFDB
 13443                           fsr2h	equ	0xFDA
 13444                           fsr2l	equ	0xFD9
 13445                           status	equ	0xFD8
 13446                           
 13447 ;; *************** function _pow *****************
 13448 ;; Defined at:
 13449 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
 13450 ;; Parameters:    Size  Location     Type
 13451 ;;  x               3   64[BANK0 ] void 
 13452 ;;  y               3   67[BANK0 ] void 
 13453 ;; Auto vars:     Size  Location     Type
 13454 ;;  yi              4   77[BANK0 ] unsigned long 
 13455 ;;  sign            1   76[BANK0 ] unsigned char 
 13456 ;; Return value:  Size  Location     Type
 13457 ;;                  3   64[BANK0 ] unsigned char 
 13458 ;; Registers used:
 13459 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13460 ;; Tracked objects:
 13461 ;;		On entry : 0/0
 13462 ;;		On exit  : 0/0
 13463 ;;		Unchanged: 0/0
 13464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13465 ;;      Params:         0       6       0       0       0       0       0
 13466 ;;      Locals:         0      11       0       0       0       0       0
 13467 ;;      Temps:          0       0       0       0       0       0       0
 13468 ;;      Totals:         0      17       0       0       0       0       0
 13469 ;;Total ram usage:       17 bytes
 13470 ;; Hardware stack levels used:    1
 13471 ;; Hardware stack levels required when called:    7
 13472 ;; This function calls:
 13473 ;;		___ftge
 13474 ;;		___ftmul
 13475 ;;		___ftneg
 13476 ;;		___fttol
 13477 ;;		___lltoft
 13478 ;;		_exp
 13479 ;;		_log
 13480 ;; This function is called by:
 13481 ;;		_AdcConvert
 13482 ;;		_ReadIntFromEeprom
 13483 ;; This function uses a non-reentrant model
 13484 ;;
 13485                           
 13486                           	psect	text83
 13487  001578                     __ptext83:
 13488                           	opt stack 0
 13489  001578                     _pow:
 13490                           	opt stack 19
 13491                           
 13492                           ;incstack = 0
 13493  001578  0E00               	movlw	0
 13494  00157A  0100               	movlb	0	; () banked
 13495  00157C  6FAC               	movwf	pow@sign& (0+255),b
 13496                           
 13497                           ; BSR set to: 0
 13498  00157E  51A0               	movf	pow@x& (0+255),w,b
 13499  001580  11A1               	iorwf	(pow@x+1)& (0+255),w,b
 13500  001582  11A2               	iorwf	(pow@x+2)& (0+255),w,b
 13501  001584  A4D8               	btfss	status,2,c
 13502  001586  D01D               	goto	l1908
 13503                           
 13504                           ; BSR set to: 0
 13505  001588  0E00               	movlw	0
 13506  00158A  6E18               	movwf	___ftge@ff1,c
 13507  00158C  0E00               	movlw	0
 13508  00158E  6E19               	movwf	___ftge@ff1+1,c
 13509  001590  0E00               	movlw	0
 13510  001592  6E1A               	movwf	___ftge@ff1+2,c
 13511  001594  C0A3  F01B         	movff	pow@y,___ftge@ff2
 13512  001598  C0A4  F01C         	movff	pow@y+1,___ftge@ff2+1
 13513  00159C  C0A5  F01D         	movff	pow@y+2,___ftge@ff2+2
 13514  0015A0  ECDB  F015         	call	___ftge	;wreg free
 13515  0015A4  A0D8               	btfss	status,0,c
 13516  0015A6  D005               	goto	l1909
 13517  0015A8  0E00               	movlw	0
 13518  0015AA  0101               	movlb	1	; () banked
 13519  0015AC  6F73               	movwf	(_errno+1)& (0+255),b
 13520  0015AE  0E21               	movlw	33
 13521  0015B0  6F72               	movwf	_errno& (0+255),b
 13522  0015B2                     l1909:
 13523  0015B2  0E00               	movlw	0
 13524  0015B4  0100               	movlb	0	; () banked
 13525  0015B6  6FA0               	movwf	?_pow& (0+255),b
 13526  0015B8  0E00               	movlw	0
 13527  0015BA  6FA1               	movwf	(?_pow+1)& (0+255),b
 13528  0015BC  0E00               	movlw	0
 13529  0015BE  6FA2               	movwf	(?_pow+2)& (0+255),b
 13530                           
 13531                           ; BSR set to: 0
 13532  0015C0  0012               	return	
 13533  0015C2                     l1908:
 13534                           
 13535                           ; BSR set to: 0
 13536                           
 13537                           ; BSR set to: 0
 13538  0015C2  51A3               	movf	pow@y& (0+255),w,b
 13539  0015C4  11A4               	iorwf	(pow@y+1)& (0+255),w,b
 13540  0015C6  11A5               	iorwf	(pow@y+2)& (0+255),w,b
 13541  0015C8  A4D8               	btfss	status,2,c
 13542  0015CA  D007               	goto	l1911
 13543                           
 13544                           ; BSR set to: 0
 13545  0015CC  0E00               	movlw	0
 13546  0015CE  6FA0               	movwf	?_pow& (0+255),b
 13547  0015D0  0E80               	movlw	128
 13548  0015D2  6FA1               	movwf	(?_pow+1)& (0+255),b
 13549  0015D4  0E3F               	movlw	63
 13550  0015D6  6FA2               	movwf	(?_pow+2)& (0+255),b
 13551                           
 13552                           ; BSR set to: 0
 13553  0015D8  0012               	return	
 13554  0015DA                     l1911:
 13555                           
 13556                           ; BSR set to: 0
 13557                           
 13558                           ; BSR set to: 0
 13559  0015DA  AFA2               	btfss	(pow@x+2)& (0+255),7,b
 13560  0015DC  D043               	goto	l1912
 13561                           
 13562                           ; BSR set to: 0
 13563  0015DE  C0A3  F078         	movff	pow@y,___fttol@f1
 13564  0015E2  C0A4  F079         	movff	pow@y+1,___fttol@f1+1
 13565  0015E6  C0A5  F07A         	movff	pow@y+2,___fttol@f1+2
 13566  0015EA  EC98  F00F         	call	___fttol	;wreg free
 13567  0015EE  C078  F0AD         	movff	?___fttol,pow@yi
 13568  0015F2  C079  F0AE         	movff	?___fttol+1,pow@yi+1
 13569  0015F6  C07A  F0AF         	movff	?___fttol+2,pow@yi+2
 13570  0015FA  C07B  F0B0         	movff	?___fttol+3,pow@yi+3
 13571  0015FE  C0AD  F020         	movff	pow@yi,___lltoft@c
 13572  001602  C0AE  F021         	movff	pow@yi+1,___lltoft@c+1
 13573  001606  C0AF  F022         	movff	pow@yi+2,___lltoft@c+2
 13574  00160A  C0B0  F023         	movff	pow@yi+3,___lltoft@c+3
 13575  00160E  EC4A  F018         	call	___lltoft	;wreg free
 13576  001612  0100               	movlb	0	; () banked
 13577  001614  51A3               	movf	pow@y& (0+255),w,b
 13578  001616  1820               	xorwf	?___lltoft,w,c
 13579  001618  E107               	bnz	u7270
 13580  00161A  51A4               	movf	(pow@y+1)& (0+255),w,b
 13581  00161C  1821               	xorwf	?___lltoft+1,w,c
 13582  00161E  E104               	bnz	u7270
 13583  001620  51A5               	movf	(pow@y+2)& (0+255),w,b
 13584  001622  1822               	xorwf	?___lltoft+2,w,c
 13585  001624  B4D8               	btfsc	status,2,c
 13586  001626  D00D               	goto	l1913
 13587  001628                     u7270:
 13588                           
 13589                           ; BSR set to: 0
 13590  001628  0E00               	movlw	0
 13591  00162A  0101               	movlb	1	; () banked
 13592  00162C  6F73               	movwf	(_errno+1)& (0+255),b
 13593  00162E  0E21               	movlw	33
 13594  001630  6F72               	movwf	_errno& (0+255),b
 13595  001632  0E00               	movlw	0
 13596  001634  0100               	movlb	0	; () banked
 13597  001636  6FA0               	movwf	?_pow& (0+255),b
 13598  001638  0E00               	movlw	0
 13599  00163A  6FA1               	movwf	(?_pow+1)& (0+255),b
 13600  00163C  0E00               	movlw	0
 13601  00163E  6FA2               	movwf	(?_pow+2)& (0+255),b
 13602                           
 13603                           ; BSR set to: 0
 13604  001640  0012               	return	
 13605  001642                     l1913:
 13606                           
 13607                           ; BSR set to: 0
 13608                           
 13609                           ; BSR set to: 0
 13610  001642  51AD               	movf	pow@yi& (0+255),w,b
 13611  001644  0B01               	andlw	1
 13612  001646  6FAC               	movwf	pow@sign& (0+255),b
 13613                           
 13614                           ; BSR set to: 0
 13615  001648  C0A0  F018         	movff	pow@x,___ftneg@f1
 13616  00164C  C0A1  F019         	movff	pow@x+1,___ftneg@f1+1
 13617  001650  C0A2  F01A         	movff	pow@x+2,___ftneg@f1+2
 13618  001654  ECD7  F01C         	call	___ftneg	;wreg free
 13619  001658  C018  F0A0         	movff	?___ftneg,pow@x
 13620  00165C  C019  F0A1         	movff	?___ftneg+1,pow@x+1
 13621  001660  C01A  F0A2         	movff	?___ftneg+2,pow@x+2
 13622  001664                     l1912:
 13623  001664  C0A0  F08E         	movff	pow@x,log@x
 13624  001668  C0A1  F08F         	movff	pow@x+1,log@x+1
 13625  00166C  C0A2  F090         	movff	pow@x+2,log@x+2
 13626  001670  ECEE  F00C         	call	_log	;wreg free
 13627  001674  C08E  F0A6         	movff	?_log,_pow$3308
 13628  001678  C08F  F0A7         	movff	?_log+1,_pow$3308+1
 13629  00167C  C090  F0A8         	movff	?_log+2,_pow$3308+2
 13630  001680  C0A6  F069         	movff	_pow$3308,___ftmul@f1
 13631  001684  C0A7  F06A         	movff	_pow$3308+1,___ftmul@f1+1
 13632  001688  C0A8  F06B         	movff	_pow$3308+2,___ftmul@f1+2
 13633  00168C  C0A3  F06C         	movff	pow@y,___ftmul@f2
 13634  001690  C0A4  F06D         	movff	pow@y+1,___ftmul@f2+1
 13635  001694  C0A5  F06E         	movff	pow@y+2,___ftmul@f2+2
 13636  001698  EC14  F010         	call	___ftmul	;wreg free
 13637  00169C  C069  F0A9         	movff	?___ftmul,_pow$3309
 13638  0016A0  C06A  F0AA         	movff	?___ftmul+1,_pow$3309+1
 13639  0016A4  C06B  F0AB         	movff	?___ftmul+2,_pow$3309+2
 13640  0016A8  C0A9  F097         	movff	_pow$3309,exp@x
 13641  0016AC  C0AA  F098         	movff	_pow$3309+1,exp@x+1
 13642  0016B0  C0AB  F099         	movff	_pow$3309+2,exp@x+2
 13643  0016B4  EC34  F006         	call	_exp	;wreg free
 13644  0016B8  C097  F0A0         	movff	?_exp,pow@x
 13645  0016BC  C098  F0A1         	movff	?_exp+1,pow@x+1
 13646  0016C0  C099  F0A2         	movff	?_exp+2,pow@x+2
 13647  0016C4  0100               	movlb	0	; () banked
 13648  0016C6  51AC               	movf	pow@sign& (0+255),w,b
 13649  0016C8  B4D8               	btfsc	status,2,c
 13650  0016CA  D00F               	goto	l1914
 13651                           
 13652                           ; BSR set to: 0
 13653  0016CC  C0A0  F018         	movff	pow@x,___ftneg@f1
 13654  0016D0  C0A1  F019         	movff	pow@x+1,___ftneg@f1+1
 13655  0016D4  C0A2  F01A         	movff	pow@x+2,___ftneg@f1+2
 13656  0016D8  ECD7  F01C         	call	___ftneg	;wreg free
 13657  0016DC  C018  F0A0         	movff	?___ftneg,?_pow
 13658  0016E0  C019  F0A1         	movff	?___ftneg+1,?_pow+1
 13659  0016E4  C01A  F0A2         	movff	?___ftneg+2,?_pow+2
 13660  0016E8  0012               	return	
 13661  0016EA                     l1914:
 13662                           
 13663                           ; BSR set to: 0
 13664  0016EA  C0A0  F0A0         	movff	pow@x,?_pow
 13665  0016EE  C0A1  F0A1         	movff	pow@x+1,?_pow+1
 13666  0016F2  C0A2  F0A2         	movff	pow@x+2,?_pow+2
 13667  0016F6  0012               	return		;funcret
 13668  0016F8                     __end_of_pow:
 13669                           	opt stack 0
 13670                           tosu	equ	0xFFF
 13671                           tosh	equ	0xFFE
 13672                           tosl	equ	0xFFD
 13673                           pclath	equ	0xFFA
 13674                           tblptru	equ	0xFF8
 13675                           tblptrh	equ	0xFF7
 13676                           tblptrl	equ	0xFF6
 13677                           tablat	equ	0xFF5
 13678                           prodh	equ	0xFF4
 13679                           prodl	equ	0xFF3
 13680                           intcon	equ	0xFF2
 13681                           intcon2	equ	0xFF1
 13682                           postinc0	equ	0xFEE
 13683                           plusw0	equ	0xFEB
 13684                           wreg	equ	0xFE8
 13685                           indf1	equ	0xFE7
 13686                           postinc1	equ	0xFE6
 13687                           postdec1	equ	0xFE5
 13688                           fsr1h	equ	0xFE2
 13689                           fsr1l	equ	0xFE1
 13690                           indf2	equ	0xFDF
 13691                           postinc2	equ	0xFDE
 13692                           postdec2	equ	0xFDD
 13693                           plusw2	equ	0xFDB
 13694                           fsr2h	equ	0xFDA
 13695                           fsr2l	equ	0xFD9
 13696                           status	equ	0xFD8
 13697                           
 13698 ;; *************** function _log *****************
 13699 ;; Defined at:
 13700 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
 13701 ;; Parameters:    Size  Location     Type
 13702 ;;  x               3   46[BANK0 ] unsigned char 
 13703 ;; Auto vars:     Size  Location     Type
 13704 ;;  exponent        2   49[BANK0 ] int 
 13705 ;; Return value:  Size  Location     Type
 13706 ;;                  3   46[BANK0 ] int 
 13707 ;; Registers used:
 13708 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13709 ;; Tracked objects:
 13710 ;;		On entry : 0/0
 13711 ;;		On exit  : 0/0
 13712 ;;		Unchanged: 0/0
 13713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13714 ;;      Params:         0       3       0       0       0       0       0
 13715 ;;      Locals:         0       2       0       0       0       0       0
 13716 ;;      Temps:          0       0       0       0       0       0       0
 13717 ;;      Totals:         0       5       0       0       0       0       0
 13718 ;;Total ram usage:        5 bytes
 13719 ;; Hardware stack levels used:    1
 13720 ;; Hardware stack levels required when called:    6
 13721 ;; This function calls:
 13722 ;;		___awtoft
 13723 ;;		___ftadd
 13724 ;;		___ftmul
 13725 ;;		_eval_poly
 13726 ;;		_frexp
 13727 ;; This function is called by:
 13728 ;;		_pow
 13729 ;; This function uses a non-reentrant model
 13730 ;;
 13731                           
 13732                           	psect	text84
 13733  0019DC                     __ptext84:
 13734                           	opt stack 0
 13735  0019DC                     _log:
 13736                           	opt stack 19
 13737                           
 13738                           ;incstack = 0
 13739  0019DC  0100               	movlb	0	; () banked
 13740  0019DE  AF90               	btfss	(log@x+2)& (0+255),7,b
 13741  0019E0  D00D               	goto	l2170
 13742                           
 13743                           ; BSR set to: 0
 13744  0019E2  0E00               	movlw	0
 13745  0019E4  0101               	movlb	1	; () banked
 13746  0019E6  6F73               	movwf	(_errno+1)& (0+255),b
 13747  0019E8  0E21               	movlw	33
 13748  0019EA  6F72               	movwf	_errno& (0+255),b
 13749  0019EC  0E00               	movlw	0
 13750  0019EE  0100               	movlb	0	; () banked
 13751  0019F0  6F8E               	movwf	?_log& (0+255),b
 13752  0019F2  0E00               	movlw	0
 13753  0019F4  6F8F               	movwf	(?_log+1)& (0+255),b
 13754  0019F6  0E00               	movlw	0
 13755  0019F8  6F90               	movwf	(?_log+2)& (0+255),b
 13756                           
 13757                           ; BSR set to: 0
 13758  0019FA  0012               	return	
 13759  0019FC                     l2170:
 13760                           
 13761                           ; BSR set to: 0
 13762                           
 13763                           ; BSR set to: 0
 13764  0019FC  518E               	movf	log@x& (0+255),w,b
 13765  0019FE  118F               	iorwf	(log@x+1)& (0+255),w,b
 13766  001A00  1190               	iorwf	(log@x+2)& (0+255),w,b
 13767  001A02  A4D8               	btfss	status,2,c
 13768  001A04  D00D               	goto	l2172
 13769                           
 13770                           ; BSR set to: 0
 13771  001A06  0E00               	movlw	0
 13772  001A08  0101               	movlb	1	; () banked
 13773  001A0A  6F73               	movwf	(_errno+1)& (0+255),b
 13774  001A0C  0E22               	movlw	34
 13775  001A0E  6F72               	movwf	_errno& (0+255),b
 13776  001A10  0E00               	movlw	0
 13777  001A12  0100               	movlb	0	; () banked
 13778  001A14  6F8E               	movwf	?_log& (0+255),b
 13779  001A16  0E00               	movlw	0
 13780  001A18  6F8F               	movwf	(?_log+1)& (0+255),b
 13781  001A1A  0E00               	movlw	0
 13782  001A1C  6F90               	movwf	(?_log+2)& (0+255),b
 13783                           
 13784                           ; BSR set to: 0
 13785  001A1E  0012               	return	
 13786  001A20                     l2172:
 13787                           
 13788                           ; BSR set to: 0
 13789                           
 13790                           ; BSR set to: 0
 13791  001A20  0E00               	movlw	0
 13792  001A22  6F6C               	movwf	___ftmul@f2& (0+255),b
 13793  001A24  0E00               	movlw	0
 13794  001A26  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 13795  001A28  0E40               	movlw	64
 13796  001A2A  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 13797  001A2C  0E91               	movlw	low log@exponent
 13798  001A2E  6E1B               	movwf	frexp@eptr,c
 13799  001A30  0E00               	movlw	high log@exponent
 13800  001A32  6E1C               	movwf	frexp@eptr+1,c
 13801  001A34  C08E  F018         	movff	log@x,frexp@value
 13802  001A38  C08F  F019         	movff	log@x+1,frexp@value+1
 13803  001A3C  C090  F01A         	movff	log@x+2,frexp@value+2
 13804  001A40  EC93  F015         	call	_frexp	;wreg free
 13805  001A44  C018  F069         	movff	?_frexp,___ftmul@f1
 13806  001A48  C019  F06A         	movff	?_frexp+1,___ftmul@f1+1
 13807  001A4C  C01A  F06B         	movff	?_frexp+2,___ftmul@f1+2
 13808  001A50  EC14  F010         	call	___ftmul	;wreg free
 13809  001A54  C069  F078         	movff	?___ftmul,___ftadd@f1
 13810  001A58  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 13811  001A5C  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 13812  001A60  0E00               	movlw	0
 13813  001A62  0100               	movlb	0	; () banked
 13814  001A64  6F7B               	movwf	___ftadd@f2& (0+255),b
 13815  001A66  0E80               	movlw	128
 13816  001A68  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 13817  001A6A  0EBF               	movlw	191
 13818  001A6C  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 13819  001A6E  ECE5  F009         	call	___ftadd	;wreg free
 13820  001A72  C078  F08E         	movff	?___ftadd,log@x
 13821  001A76  C079  F08F         	movff	?___ftadd+1,log@x+1
 13822  001A7A  C07A  F090         	movff	?___ftadd+2,log@x+2
 13823  001A7E  0100               	movlb	0	; () banked
 13824  001A80  0791               	decf	log@exponent& (0+255),f,b
 13825  001A82  A0D8               	btfss	status,0,c
 13826  001A84  0792               	decf	(log@exponent+1)& (0+255),f,b
 13827                           
 13828                           ; BSR set to: 0
 13829  001A86  C08E  F084         	movff	log@x,eval_poly@x
 13830  001A8A  C08F  F085         	movff	log@x+1,eval_poly@x+1
 13831  001A8E  C090  F086         	movff	log@x+2,eval_poly@x+2
 13832  001A92  0E73               	movlw	low log@coeff
 13833  001A94  6F87               	movwf	eval_poly@d& (0+255),b
 13834  001A96  0E06               	movlw	high log@coeff
 13835  001A98  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 13836  001A9A  0E00               	movlw	0
 13837  001A9C  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 13838  001A9E  0E08               	movlw	8
 13839  001AA0  6F89               	movwf	eval_poly@n& (0+255),b
 13840  001AA2  ECE6  F011         	call	_eval_poly	;wreg free
 13841  001AA6  C084  F08E         	movff	?_eval_poly,log@x
 13842  001AAA  C085  F08F         	movff	?_eval_poly+1,log@x+1
 13843  001AAE  C086  F090         	movff	?_eval_poly+2,log@x+2
 13844  001AB2  0E72               	movlw	114
 13845  001AB4  0100               	movlb	0	; () banked
 13846  001AB6  6F6C               	movwf	___ftmul@f2& (0+255),b
 13847  001AB8  0E31               	movlw	49
 13848  001ABA  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 13849  001ABC  0E3F               	movlw	63
 13850  001ABE  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 13851  001AC0  C091  F020         	movff	log@exponent,___awtoft@c
 13852  001AC4  C092  F021         	movff	log@exponent+1,___awtoft@c+1
 13853  001AC8  EC4C  F01B         	call	___awtoft	;wreg free
 13854  001ACC  C020  F069         	movff	?___awtoft,___ftmul@f1
 13855  001AD0  C021  F06A         	movff	?___awtoft+1,___ftmul@f1+1
 13856  001AD4  C022  F06B         	movff	?___awtoft+2,___ftmul@f1+2
 13857  001AD8  EC14  F010         	call	___ftmul	;wreg free
 13858  001ADC  C069  F078         	movff	?___ftmul,___ftadd@f1
 13859  001AE0  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 13860  001AE4  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 13861  001AE8  C08E  F07B         	movff	log@x,___ftadd@f2
 13862  001AEC  C08F  F07C         	movff	log@x+1,___ftadd@f2+1
 13863  001AF0  C090  F07D         	movff	log@x+2,___ftadd@f2+2
 13864  001AF4  ECE5  F009         	call	___ftadd	;wreg free
 13865  001AF8  C078  F08E         	movff	?___ftadd,?_log
 13866  001AFC  C079  F08F         	movff	?___ftadd+1,?_log+1
 13867  001B00  C07A  F090         	movff	?___ftadd+2,?_log+2
 13868  001B04  0012               	return	
 13869  001B06                     __end_of_log:
 13870                           	opt stack 0
 13871                           tosu	equ	0xFFF
 13872                           tosh	equ	0xFFE
 13873                           tosl	equ	0xFFD
 13874                           pclath	equ	0xFFA
 13875                           tblptru	equ	0xFF8
 13876                           tblptrh	equ	0xFF7
 13877                           tblptrl	equ	0xFF6
 13878                           tablat	equ	0xFF5
 13879                           prodh	equ	0xFF4
 13880                           prodl	equ	0xFF3
 13881                           intcon	equ	0xFF2
 13882                           intcon2	equ	0xFF1
 13883                           postinc0	equ	0xFEE
 13884                           plusw0	equ	0xFEB
 13885                           wreg	equ	0xFE8
 13886                           indf1	equ	0xFE7
 13887                           postinc1	equ	0xFE6
 13888                           postdec1	equ	0xFE5
 13889                           fsr1h	equ	0xFE2
 13890                           fsr1l	equ	0xFE1
 13891                           indf2	equ	0xFDF
 13892                           postinc2	equ	0xFDE
 13893                           postdec2	equ	0xFDD
 13894                           plusw2	equ	0xFDB
 13895                           fsr2h	equ	0xFDA
 13896                           fsr2l	equ	0xFD9
 13897                           status	equ	0xFD8
 13898                           
 13899 ;; *************** function _exp *****************
 13900 ;; Defined at:
 13901 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
 13902 ;; Parameters:    Size  Location     Type
 13903 ;;  x               3   55[BANK0 ] int 
 13904 ;; Auto vars:     Size  Location     Type
 13905 ;;  exponent        2   61[BANK0 ] int 
 13906 ;;  sign            1   63[BANK0 ] unsigned char 
 13907 ;; Return value:  Size  Location     Type
 13908 ;;                  3   55[BANK0 ] unsigned char 
 13909 ;; Registers used:
 13910 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13911 ;; Tracked objects:
 13912 ;;		On entry : 0/0
 13913 ;;		On exit  : 0/0
 13914 ;;		Unchanged: 0/0
 13915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13916 ;;      Params:         0       3       0       0       0       0       0
 13917 ;;      Locals:         0       6       0       0       0       0       0
 13918 ;;      Temps:          0       0       0       0       0       0       0
 13919 ;;      Totals:         0       9       0       0       0       0       0
 13920 ;;Total ram usage:        9 bytes
 13921 ;; Hardware stack levels used:    1
 13922 ;; Hardware stack levels required when called:    6
 13923 ;; This function calls:
 13924 ;;		___awtoft
 13925 ;;		___ftdiv
 13926 ;;		___ftge
 13927 ;;		___ftmul
 13928 ;;		___ftneg
 13929 ;;		___ftsub
 13930 ;;		___fttol
 13931 ;;		_eval_poly
 13932 ;;		_floor
 13933 ;;		_ldexp
 13934 ;; This function is called by:
 13935 ;;		_pow
 13936 ;; This function uses a non-reentrant model
 13937 ;;
 13938                           
 13939                           	psect	text85
 13940  000C68                     __ptext85:
 13941                           	opt stack 0
 13942  000C68                     _exp:
 13943                           	opt stack 19
 13944                           
 13945                           ;incstack = 0
 13946  000C68  0100               	movlb	0	; () banked
 13947  000C6A  5197               	movf	exp@x& (0+255),w,b
 13948  000C6C  1198               	iorwf	(exp@x+1)& (0+255),w,b
 13949  000C6E  1199               	iorwf	(exp@x+2)& (0+255),w,b
 13950  000C70  A4D8               	btfss	status,2,c
 13951  000C72  D007               	goto	l2106
 13952                           
 13953                           ; BSR set to: 0
 13954  000C74  0E00               	movlw	0
 13955  000C76  6F97               	movwf	?_exp& (0+255),b
 13956  000C78  0E80               	movlw	128
 13957  000C7A  6F98               	movwf	(?_exp+1)& (0+255),b
 13958  000C7C  0E3F               	movlw	63
 13959  000C7E  6F99               	movwf	(?_exp+2)& (0+255),b
 13960                           
 13961                           ; BSR set to: 0
 13962  000C80  0012               	return	
 13963  000C82                     l2106:
 13964                           
 13965                           ; BSR set to: 0
 13966                           
 13967                           ; BSR set to: 0
 13968  000C82  0E72               	movlw	114
 13969  000C84  6E18               	movwf	___ftge@ff1,c
 13970  000C86  0E31               	movlw	49
 13971  000C88  6E19               	movwf	___ftge@ff1+1,c
 13972  000C8A  0E44               	movlw	68
 13973  000C8C  6E1A               	movwf	___ftge@ff1+2,c
 13974  000C8E  C097  F01B         	movff	exp@x,___ftge@ff2
 13975  000C92  C098  F01C         	movff	exp@x+1,___ftge@ff2+1
 13976  000C96  C099  F01D         	movff	exp@x+2,___ftge@ff2+2
 13977  000C9A  ECDB  F015         	call	___ftge	;wreg free
 13978  000C9E  B0D8               	btfsc	status,0,c
 13979  000CA0  D00D               	goto	l2108
 13980  000CA2  0E00               	movlw	0
 13981  000CA4  0101               	movlb	1	; () banked
 13982  000CA6  6F73               	movwf	(_errno+1)& (0+255),b
 13983  000CA8  0E22               	movlw	34
 13984  000CAA  6F72               	movwf	_errno& (0+255),b
 13985  000CAC  0EFF               	movlw	255
 13986  000CAE  0100               	movlb	0	; () banked
 13987  000CB0  6F97               	movwf	?_exp& (0+255),b
 13988  000CB2  0E7F               	movlw	127
 13989  000CB4  6F98               	movwf	(?_exp+1)& (0+255),b
 13990  000CB6  0E7F               	movlw	127
 13991  000CB8  6F99               	movwf	(?_exp+2)& (0+255),b
 13992                           
 13993                           ; BSR set to: 0
 13994  000CBA  0012               	return	
 13995  000CBC                     l2108:
 13996                           
 13997                           ; BSR set to: 0
 13998  000CBC  C097  F018         	movff	exp@x,___ftge@ff1
 13999  000CC0  C098  F019         	movff	exp@x+1,___ftge@ff1+1
 14000  000CC4  C099  F01A         	movff	exp@x+2,___ftge@ff1+2
 14001  000CC8  0E49               	movlw	73
 14002  000CCA  6E1B               	movwf	___ftge@ff2,c
 14003  000CCC  0E3A               	movlw	58
 14004  000CCE  6E1C               	movwf	___ftge@ff2+1,c
 14005  000CD0  0EC4               	movlw	196
 14006  000CD2  6E1D               	movwf	___ftge@ff2+2,c
 14007  000CD4  ECDB  F015         	call	___ftge	;wreg free
 14008  000CD8  B0D8               	btfsc	status,0,c
 14009  000CDA  D00D               	goto	l2109
 14010  000CDC  0E00               	movlw	0
 14011  000CDE  0101               	movlb	1	; () banked
 14012  000CE0  6F73               	movwf	(_errno+1)& (0+255),b
 14013  000CE2  0E22               	movlw	34
 14014  000CE4  6F72               	movwf	_errno& (0+255),b
 14015  000CE6  0E00               	movlw	0
 14016  000CE8  0100               	movlb	0	; () banked
 14017  000CEA  6F97               	movwf	?_exp& (0+255),b
 14018  000CEC  0E00               	movlw	0
 14019  000CEE  6F98               	movwf	(?_exp+1)& (0+255),b
 14020  000CF0  0E00               	movlw	0
 14021  000CF2  6F99               	movwf	(?_exp+2)& (0+255),b
 14022                           
 14023                           ; BSR set to: 0
 14024  000CF4  0012               	return	
 14025  000CF6                     l2109:
 14026                           
 14027                           ; BSR set to: 0
 14028  000CF6  0100               	movlb	0	; () banked
 14029  000CF8  AF99               	btfss	(exp@x+2)& (0+255),7,b
 14030  000CFA  D002               	goto	u7160
 14031  000CFC  0E01               	movlw	1
 14032  000CFE  D001               	goto	u7170
 14033  000D00                     u7160:
 14034  000D00  0E00               	movlw	0
 14035  000D02                     u7170:
 14036  000D02  6F9F               	movwf	exp@sign& (0+255),b
 14037                           
 14038                           ; BSR set to: 0
 14039  000D04  519F               	movf	exp@sign& (0+255),w,b
 14040  000D06  B4D8               	btfsc	status,2,c
 14041  000D08  D00E               	goto	l2110
 14042                           
 14043                           ; BSR set to: 0
 14044  000D0A  C097  F018         	movff	exp@x,___ftneg@f1
 14045  000D0E  C098  F019         	movff	exp@x+1,___ftneg@f1+1
 14046  000D12  C099  F01A         	movff	exp@x+2,___ftneg@f1+2
 14047  000D16  ECD7  F01C         	call	___ftneg	;wreg free
 14048  000D1A  C018  F097         	movff	?___ftneg,exp@x
 14049  000D1E  C019  F098         	movff	?___ftneg+1,exp@x+1
 14050  000D22  C01A  F099         	movff	?___ftneg+2,exp@x+2
 14051  000D26                     l2110:
 14052  000D26  C097  F069         	movff	exp@x,___ftmul@f1
 14053  000D2A  C098  F06A         	movff	exp@x+1,___ftmul@f1+1
 14054  000D2E  C099  F06B         	movff	exp@x+2,___ftmul@f1+2
 14055  000D32  0EAA               	movlw	170
 14056  000D34  0100               	movlb	0	; () banked
 14057  000D36  6F6C               	movwf	___ftmul@f2& (0+255),b
 14058  000D38  0EB8               	movlw	184
 14059  000D3A  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 14060  000D3C  0E3F               	movlw	63
 14061  000D3E  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 14062  000D40  EC14  F010         	call	___ftmul	;wreg free
 14063  000D44  C069  F097         	movff	?___ftmul,exp@x
 14064  000D48  C06A  F098         	movff	?___ftmul+1,exp@x+1
 14065  000D4C  C06B  F099         	movff	?___ftmul+2,exp@x+2
 14066  000D50  C097  F08F         	movff	exp@x,floor@x
 14067  000D54  C098  F090         	movff	exp@x+1,floor@x+1
 14068  000D58  C099  F091         	movff	exp@x+2,floor@x+2
 14069  000D5C  EC75  F011         	call	_floor	;wreg free
 14070  000D60  C08F  F09A         	movff	?_floor,_exp$3310
 14071  000D64  C090  F09B         	movff	?_floor+1,_exp$3310+1
 14072  000D68  C091  F09C         	movff	?_floor+2,_exp$3310+2
 14073  000D6C  C09A  F078         	movff	_exp$3310,___fttol@f1
 14074  000D70  C09B  F079         	movff	_exp$3310+1,___fttol@f1+1
 14075  000D74  C09C  F07A         	movff	_exp$3310+2,___fttol@f1+2
 14076  000D78  EC98  F00F         	call	___fttol	;wreg free
 14077  000D7C  C078  F09D         	movff	?___fttol,exp@exponent
 14078  000D80  C079  F09E         	movff	?___fttol+1,exp@exponent+1
 14079  000D84  C097  F084         	movff	exp@x,___ftsub@f1
 14080  000D88  C098  F085         	movff	exp@x+1,___ftsub@f1+1
 14081  000D8C  C099  F086         	movff	exp@x+2,___ftsub@f1+2
 14082  000D90  C09D  F020         	movff	exp@exponent,___awtoft@c
 14083  000D94  C09E  F021         	movff	exp@exponent+1,___awtoft@c+1
 14084  000D98  EC4C  F01B         	call	___awtoft	;wreg free
 14085  000D9C  C020  F087         	movff	?___awtoft,___ftsub@f2
 14086  000DA0  C021  F088         	movff	?___awtoft+1,___ftsub@f2+1
 14087  000DA4  C022  F089         	movff	?___awtoft+2,___ftsub@f2+2
 14088  000DA8  EC78  F01A         	call	___ftsub	;wreg free
 14089  000DAC  C084  F097         	movff	?___ftsub,exp@x
 14090  000DB0  C085  F098         	movff	?___ftsub+1,exp@x+1
 14091  000DB4  C086  F099         	movff	?___ftsub+2,exp@x+2
 14092  000DB8  C097  F084         	movff	exp@x,eval_poly@x
 14093  000DBC  C098  F085         	movff	exp@x+1,eval_poly@x+1
 14094  000DC0  C099  F086         	movff	exp@x+2,eval_poly@x+2
 14095  000DC4  0E55               	movlw	low exp@coeff
 14096  000DC6  0100               	movlb	0	; () banked
 14097  000DC8  6F87               	movwf	eval_poly@d& (0+255),b
 14098  000DCA  0E06               	movlw	high exp@coeff
 14099  000DCC  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 14100  000DCE  0E00               	movlw	0
 14101  000DD0  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 14102  000DD2  0E09               	movlw	9
 14103  000DD4  6F89               	movwf	eval_poly@n& (0+255),b
 14104  000DD6  ECE6  F011         	call	_eval_poly	;wreg free
 14105  000DDA  C084  F08E         	movff	?_eval_poly,ldexp@value
 14106  000DDE  C085  F08F         	movff	?_eval_poly+1,ldexp@value+1
 14107  000DE2  C086  F090         	movff	?_eval_poly+2,ldexp@value+2
 14108  000DE6  C09D  F091         	movff	exp@exponent,ldexp@newexp
 14109  000DEA  C09E  F092         	movff	exp@exponent+1,ldexp@newexp+1
 14110  000DEE  EC51  F012         	call	_ldexp	;wreg free
 14111  000DF2  C08E  F097         	movff	?_ldexp,exp@x
 14112  000DF6  C08F  F098         	movff	?_ldexp+1,exp@x+1
 14113  000DFA  C090  F099         	movff	?_ldexp+2,exp@x+2
 14114  000DFE  0100               	movlb	0	; () banked
 14115  000E00  519F               	movf	exp@sign& (0+255),w,b
 14116  000E02  B4D8               	btfsc	status,2,c
 14117  000E04  D025               	goto	l2111
 14118                           
 14119                           ; BSR set to: 0
 14120  000E06  2997               	incf	exp@x& (0+255),w,b
 14121  000E08  E10E               	bnz	l7155
 14122  000E0A  0E7F               	movlw	127
 14123  000E0C  1998               	xorwf	(exp@x+1)& (0+255),w,b
 14124  000E0E  E10B               	bnz	l7155
 14125  000E10  0E7F               	movlw	127
 14126  000E12  1999               	xorwf	(exp@x+2)& (0+255),w,b
 14127  000E14  A4D8               	btfss	status,2,c
 14128  000E16  D007               	goto	l2112
 14129                           
 14130                           ; BSR set to: 0
 14131  000E18  0E00               	movlw	0
 14132  000E1A  6F97               	movwf	?_exp& (0+255),b
 14133  000E1C  0E00               	movlw	0
 14134  000E1E  6F98               	movwf	(?_exp+1)& (0+255),b
 14135  000E20  0E00               	movlw	0
 14136  000E22  6F99               	movwf	(?_exp+2)& (0+255),b
 14137                           
 14138                           ; BSR set to: 0
 14139  000E24  0012               	return	
 14140  000E26                     l2112:
 14141  000E26                     l7155:
 14142                           
 14143                           ; BSR set to: 0
 14144  000E26  0E00               	movlw	0
 14145  000E28  6E29               	movwf	___ftdiv@f1,c
 14146  000E2A  0E80               	movlw	128
 14147  000E2C  6E2A               	movwf	___ftdiv@f1+1,c
 14148  000E2E  0E3F               	movlw	63
 14149  000E30  6E2B               	movwf	___ftdiv@f1+2,c
 14150  000E32  C097  F02C         	movff	exp@x,___ftdiv@f2
 14151  000E36  C098  F02D         	movff	exp@x+1,___ftdiv@f2+1
 14152  000E3A  C099  F02E         	movff	exp@x+2,___ftdiv@f2+2
 14153  000E3E  EC8F  F010         	call	___ftdiv	;wreg free
 14154  000E42  C029  F097         	movff	?___ftdiv,?_exp
 14155  000E46  C02A  F098         	movff	?___ftdiv+1,?_exp+1
 14156  000E4A  C02B  F099         	movff	?___ftdiv+2,?_exp+2
 14157  000E4E  0012               	return	
 14158  000E50                     l2111:
 14159                           
 14160                           ; BSR set to: 0
 14161  000E50  C097  F097         	movff	exp@x,?_exp
 14162  000E54  C098  F098         	movff	exp@x+1,?_exp+1
 14163  000E58  C099  F099         	movff	exp@x+2,?_exp+2
 14164  000E5C  0012               	return		;funcret
 14165  000E5E                     __end_of_exp:
 14166                           	opt stack 0
 14167                           tosu	equ	0xFFF
 14168                           tosh	equ	0xFFE
 14169                           tosl	equ	0xFFD
 14170                           pclath	equ	0xFFA
 14171                           tblptru	equ	0xFF8
 14172                           tblptrh	equ	0xFF7
 14173                           tblptrl	equ	0xFF6
 14174                           tablat	equ	0xFF5
 14175                           prodh	equ	0xFF4
 14176                           prodl	equ	0xFF3
 14177                           intcon	equ	0xFF2
 14178                           intcon2	equ	0xFF1
 14179                           postinc0	equ	0xFEE
 14180                           plusw0	equ	0xFEB
 14181                           wreg	equ	0xFE8
 14182                           indf1	equ	0xFE7
 14183                           postinc1	equ	0xFE6
 14184                           postdec1	equ	0xFE5
 14185                           fsr1h	equ	0xFE2
 14186                           fsr1l	equ	0xFE1
 14187                           indf2	equ	0xFDF
 14188                           postinc2	equ	0xFDE
 14189                           postdec2	equ	0xFDD
 14190                           plusw2	equ	0xFDB
 14191                           fsr2h	equ	0xFDA
 14192                           fsr2l	equ	0xFD9
 14193                           status	equ	0xFD8
 14194                           
 14195 ;; *************** function _ldexp *****************
 14196 ;; Defined at:
 14197 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 14198 ;; Parameters:    Size  Location     Type
 14199 ;;  value           3   46[BANK0 ] unsigned char 
 14200 ;;  newexp          2   49[BANK0 ] int 
 14201 ;; Auto vars:     Size  Location     Type
 14202 ;;		None
 14203 ;; Return value:  Size  Location     Type
 14204 ;;                  3   46[BANK0 ] int 
 14205 ;; Registers used:
 14206 ;;		wreg, status,2, status,0
 14207 ;; Tracked objects:
 14208 ;;		On entry : 0/0
 14209 ;;		On exit  : 0/0
 14210 ;;		Unchanged: 0/0
 14211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14212 ;;      Params:         0       5       0       0       0       0       0
 14213 ;;      Locals:         0       0       0       0       0       0       0
 14214 ;;      Temps:          0       2       0       0       0       0       0
 14215 ;;      Totals:         0       7       0       0       0       0       0
 14216 ;;Total ram usage:        7 bytes
 14217 ;; Hardware stack levels used:    1
 14218 ;; Hardware stack levels required when called:    3
 14219 ;; This function calls:
 14220 ;;		Nothing
 14221 ;; This function is called by:
 14222 ;;		_exp
 14223 ;; This function uses a non-reentrant model
 14224 ;;
 14225                           
 14226                           	psect	text86
 14227  0024A2                     __ptext86:
 14228                           	opt stack 0
 14229  0024A2                     _ldexp:
 14230                           	opt stack 21
 14231                           
 14232                           ;incstack = 0
 14233  0024A2  0100               	movlb	0	; () banked
 14234  0024A4  518E               	movf	ldexp@value& (0+255),w,b
 14235  0024A6  118F               	iorwf	(ldexp@value+1)& (0+255),w,b
 14236  0024A8  1190               	iorwf	(ldexp@value+2)& (0+255),w,b
 14237  0024AA  A4D8               	btfss	status,2,c
 14238  0024AC  D007               	goto	l2130
 14239                           
 14240                           ; BSR set to: 0
 14241  0024AE  0E00               	movlw	0
 14242  0024B0  6F8E               	movwf	?_ldexp& (0+255),b
 14243  0024B2  0E00               	movlw	0
 14244  0024B4  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 14245  0024B6  0E00               	movlw	0
 14246  0024B8  6F90               	movwf	(?_ldexp+2)& (0+255),b
 14247                           
 14248                           ; BSR set to: 0
 14249  0024BA  0012               	return	
 14250  0024BC                     l2130:
 14251                           
 14252                           ; BSR set to: 0
 14253                           
 14254                           ; BSR set to: 0
 14255  0024BC  5190               	movf	(ldexp@value+2)& (0+255),w,b
 14256  0024BE  0B7F               	andlw	127
 14257  0024C0  6F93               	movwf	??_ldexp& (0+255),b
 14258  0024C2  6B94               	clrf	(??_ldexp+1)& (0+255),b
 14259  0024C4  90D8               	bcf	status,0,c
 14260  0024C6  3793               	rlcf	??_ldexp& (0+255),f,b
 14261  0024C8  3794               	rlcf	(??_ldexp+1)& (0+255),f,b
 14262  0024CA  5193               	movf	??_ldexp& (0+255),w,b
 14263  0024CC  2791               	addwf	ldexp@newexp& (0+255),f,b
 14264  0024CE  5194               	movf	(??_ldexp+1)& (0+255),w,b
 14265  0024D0  2392               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 14266  0024D2  AF8F               	btfss	(ldexp@value+1)& (0+255),7,b
 14267  0024D4  D003               	goto	u6920
 14268  0024D6  6B93               	clrf	??_ldexp& (0+255),b
 14269  0024D8  2B93               	incf	??_ldexp& (0+255),f,b
 14270  0024DA  D002               	goto	u6928
 14271  0024DC                     u6920:
 14272  0024DC  0100               	movlb	0	; () banked
 14273  0024DE  6B93               	clrf	??_ldexp& (0+255),b
 14274  0024E0                     u6928:
 14275  0024E0  5193               	movf	??_ldexp& (0+255),w,b
 14276  0024E2  2791               	addwf	ldexp@newexp& (0+255),f,b
 14277  0024E4  0E00               	movlw	0
 14278  0024E6  2392               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 14279  0024E8  AF92               	btfss	(ldexp@newexp+1)& (0+255),7,b
 14280  0024EA  D00D               	goto	l2132
 14281                           
 14282                           ; BSR set to: 0
 14283  0024EC  0E00               	movlw	0
 14284  0024EE  0101               	movlb	1	; () banked
 14285  0024F0  6F73               	movwf	(_errno+1)& (0+255),b
 14286  0024F2  0E22               	movlw	34
 14287  0024F4  6F72               	movwf	_errno& (0+255),b
 14288  0024F6  0E00               	movlw	0
 14289  0024F8  0100               	movlb	0	; () banked
 14290  0024FA  6F8E               	movwf	?_ldexp& (0+255),b
 14291  0024FC  0E00               	movlw	0
 14292  0024FE  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 14293  002500  0E00               	movlw	0
 14294  002502                     L3:
 14295  002502  6F90               	movwf	(?_ldexp+2)& (0+255),b
 14296                           
 14297                           ; BSR set to: 0
 14298  002504  0012               	return	
 14299  002506                     l2132:
 14300                           
 14301                           ; BSR set to: 0
 14302                           
 14303                           ; BSR set to: 0
 14304  002506  BF92               	btfsc	(ldexp@newexp+1)& (0+255),7,b
 14305  002508  D017               	goto	l2134
 14306  00250A  0592               	decf	(ldexp@newexp+1)& (0+255),w,b
 14307  00250C  A0D8               	btfss	status,0,c
 14308  00250E  D014               	goto	l2134
 14309                           
 14310                           ; BSR set to: 0
 14311  002510  0E00               	movlw	0
 14312  002512  0101               	movlb	1	; () banked
 14313  002514  6F73               	movwf	(_errno+1)& (0+255),b
 14314  002516  0E22               	movlw	34
 14315  002518  6F72               	movwf	_errno& (0+255),b
 14316                           
 14317                           ; BSR set to: 1
 14318  00251A  0100               	movlb	0	; () banked
 14319  00251C  AF90               	btfss	(ldexp@value+2)& (0+255),7,b
 14320  00251E  D006               	goto	l2135
 14321                           
 14322                           ; BSR set to: 0
 14323  002520  0EFF               	movlw	255
 14324  002522  6F8E               	movwf	?_ldexp& (0+255),b
 14325  002524  0E7F               	movlw	127
 14326  002526  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 14327  002528  0EFF               	movlw	255
 14328  00252A  D7EB               	goto	L3
 14329  00252C                     l2135:
 14330                           
 14331                           ; BSR set to: 0
 14332                           
 14333                           ; BSR set to: 0
 14334  00252C  0EFF               	movlw	255
 14335  00252E  6F8E               	movwf	?_ldexp& (0+255),b
 14336  002530  0E7F               	movlw	127
 14337  002532  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 14338  002534  0E7F               	movlw	127
 14339  002536  D7E5               	goto	L3
 14340  002538                     l2134:
 14341                           
 14342                           ; BSR set to: 0
 14343                           
 14344                           ; BSR set to: 0
 14345  002538  3592               	rlcf	(ldexp@newexp+1)& (0+255),w,b
 14346  00253A  3192               	rrcf	(ldexp@newexp+1)& (0+255),w,b
 14347  00253C  6F94               	movwf	(??_ldexp+1)& (0+255),b
 14348  00253E  3191               	rrcf	ldexp@newexp& (0+255),w,b
 14349  002540  6F93               	movwf	??_ldexp& (0+255),b
 14350  002542  5190               	movf	(ldexp@value+2)& (0+255),w,b
 14351  002544  1993               	xorwf	??_ldexp& (0+255),w,b
 14352  002546  0B80               	andlw	-128
 14353  002548  1993               	xorwf	??_ldexp& (0+255),w,b
 14354  00254A  6F90               	movwf	(ldexp@value+2)& (0+255),b
 14355  00254C  C091  F093         	movff	ldexp@newexp,??_ldexp
 14356  002550  0E01               	movlw	1
 14357  002552  1793               	andwf	??_ldexp& (0+255),f,b
 14358  002554  3393               	rrcf	??_ldexp& (0+255),f,b
 14359  002556  3393               	rrcf	??_ldexp& (0+255),f,b
 14360  002558  518F               	movf	(ldexp@value+1)& (0+255),w,b
 14361  00255A  1993               	xorwf	??_ldexp& (0+255),w,b
 14362  00255C  0B7F               	andlw	-129
 14363  00255E  1993               	xorwf	??_ldexp& (0+255),w,b
 14364  002560  6F8F               	movwf	(ldexp@value+1)& (0+255),b
 14365                           
 14366                           ; BSR set to: 0
 14367                           
 14368                           ; BSR set to: 0
 14369                           
 14370                           ; BSR set to: 0
 14371  002562  C08E  F08E         	movff	ldexp@value,?_ldexp
 14372  002566  C08F  F08F         	movff	ldexp@value+1,?_ldexp+1
 14373  00256A  C090  F090         	movff	ldexp@value+2,?_ldexp+2
 14374  00256E  0012               	return	
 14375  002570                     __end_of_ldexp:
 14376                           	opt stack 0
 14377                           tosu	equ	0xFFF
 14378                           tosh	equ	0xFFE
 14379                           tosl	equ	0xFFD
 14380                           pclath	equ	0xFFA
 14381                           tblptru	equ	0xFF8
 14382                           tblptrh	equ	0xFF7
 14383                           tblptrl	equ	0xFF6
 14384                           tablat	equ	0xFF5
 14385                           prodh	equ	0xFF4
 14386                           prodl	equ	0xFF3
 14387                           intcon	equ	0xFF2
 14388                           intcon2	equ	0xFF1
 14389                           postinc0	equ	0xFEE
 14390                           plusw0	equ	0xFEB
 14391                           wreg	equ	0xFE8
 14392                           indf1	equ	0xFE7
 14393                           postinc1	equ	0xFE6
 14394                           postdec1	equ	0xFE5
 14395                           fsr1h	equ	0xFE2
 14396                           fsr1l	equ	0xFE1
 14397                           indf2	equ	0xFDF
 14398                           postinc2	equ	0xFDE
 14399                           postdec2	equ	0xFDD
 14400                           plusw2	equ	0xFDB
 14401                           fsr2h	equ	0xFDA
 14402                           fsr2l	equ	0xFD9
 14403                           status	equ	0xFD8
 14404                           
 14405 ;; *************** function _floor *****************
 14406 ;; Defined at:
 14407 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
 14408 ;; Parameters:    Size  Location     Type
 14409 ;;  x               3   47[BANK0 ] int 
 14410 ;; Auto vars:     Size  Location     Type
 14411 ;;  i               3   50[BANK0 ] int 
 14412 ;;  expon           2   53[BANK0 ] int 
 14413 ;; Return value:  Size  Location     Type
 14414 ;;                  3   47[BANK0 ] int 
 14415 ;; Registers used:
 14416 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14417 ;; Tracked objects:
 14418 ;;		On entry : 0/0
 14419 ;;		On exit  : 0/0
 14420 ;;		Unchanged: 0/0
 14421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14422 ;;      Params:         0       3       0       0       0       0       0
 14423 ;;      Locals:         0       5       0       0       0       0       0
 14424 ;;      Temps:          0       0       0       0       0       0       0
 14425 ;;      Totals:         0       8       0       0       0       0       0
 14426 ;;Total ram usage:        8 bytes
 14427 ;; Hardware stack levels used:    1
 14428 ;; Hardware stack levels required when called:    5
 14429 ;; This function calls:
 14430 ;;		___altoft
 14431 ;;		___ftadd
 14432 ;;		___ftge
 14433 ;;		___fttol
 14434 ;;		_frexp
 14435 ;; This function is called by:
 14436 ;;		_exp
 14437 ;; This function uses a non-reentrant model
 14438 ;;
 14439                           
 14440                           	psect	text87
 14441  0022EA                     __ptext87:
 14442                           	opt stack 0
 14443  0022EA                     _floor:
 14444                           	opt stack 19
 14445                           
 14446                           ; BSR set to: 0
 14447                           ;incstack = 0
 14448  0022EA  C08F  F018         	movff	floor@x,frexp@value
 14449  0022EE  C090  F019         	movff	floor@x+1,frexp@value+1
 14450  0022F2  C091  F01A         	movff	floor@x+2,frexp@value+2
 14451  0022F6  0E95               	movlw	low floor@expon
 14452  0022F8  6E1B               	movwf	frexp@eptr,c
 14453  0022FA  0E00               	movlw	high floor@expon
 14454  0022FC  6E1C               	movwf	frexp@eptr+1,c
 14455  0022FE  EC93  F015         	call	_frexp	;wreg free
 14456  002302  0100               	movlb	0	; () banked
 14457  002304  AF96               	btfss	(floor@expon+1)& (0+255),7,b
 14458  002306  D010               	goto	l2117
 14459                           
 14460                           ; BSR set to: 0
 14461  002308  AF91               	btfss	(floor@x+2)& (0+255),7,b
 14462  00230A  D007               	goto	l2118
 14463                           
 14464                           ; BSR set to: 0
 14465  00230C  0E00               	movlw	0
 14466  00230E  6F8F               	movwf	?_floor& (0+255),b
 14467  002310  0E80               	movlw	128
 14468  002312  6F90               	movwf	(?_floor+1)& (0+255),b
 14469  002314  0EBF               	movlw	191
 14470  002316  6F91               	movwf	(?_floor+2)& (0+255),b
 14471                           
 14472                           ; BSR set to: 0
 14473  002318  0012               	return	
 14474  00231A                     l2118:
 14475                           
 14476                           ; BSR set to: 0
 14477                           
 14478                           ; BSR set to: 0
 14479  00231A  0E00               	movlw	0
 14480  00231C  6F8F               	movwf	?_floor& (0+255),b
 14481  00231E  0E00               	movlw	0
 14482  002320  6F90               	movwf	(?_floor+1)& (0+255),b
 14483  002322  0E00               	movlw	0
 14484  002324  6F91               	movwf	(?_floor+2)& (0+255),b
 14485                           
 14486                           ; BSR set to: 0
 14487  002326  0012               	return	
 14488  002328                     l2117:
 14489                           
 14490                           ; BSR set to: 0
 14491                           
 14492                           ; BSR set to: 0
 14493  002328  5196               	movf	(floor@expon+1)& (0+255),w,b
 14494  00232A  E104               	bnz	u6880
 14495  00232C  0E15               	movlw	21
 14496  00232E  5D95               	subwf	floor@expon& (0+255),w,b
 14497  002330  A0D8               	btfss	status,0,c
 14498  002332  D007               	goto	l2120
 14499  002334                     u6880:
 14500                           
 14501                           ; BSR set to: 0
 14502  002334  C08F  F08F         	movff	floor@x,?_floor
 14503  002338  C090  F090         	movff	floor@x+1,?_floor+1
 14504  00233C  C091  F091         	movff	floor@x+2,?_floor+2
 14505  002340  0012               	return	
 14506  002342                     l2120:
 14507                           
 14508                           ; BSR set to: 0
 14509                           
 14510                           ; BSR set to: 0
 14511  002342  C08F  F078         	movff	floor@x,___fttol@f1
 14512  002346  C090  F079         	movff	floor@x+1,___fttol@f1+1
 14513  00234A  C091  F07A         	movff	floor@x+2,___fttol@f1+2
 14514  00234E  EC98  F00F         	call	___fttol	;wreg free
 14515  002352  C078  F087         	movff	?___fttol,___altoft@c
 14516  002356  C079  F088         	movff	?___fttol+1,___altoft@c+1
 14517  00235A  C07A  F089         	movff	?___fttol+2,___altoft@c+2
 14518  00235E  C07B  F08A         	movff	?___fttol+3,___altoft@c+3
 14519  002362  ECE8  F016         	call	___altoft	;wreg free
 14520  002366  C087  F092         	movff	?___altoft,floor@i
 14521  00236A  C088  F093         	movff	?___altoft+1,floor@i+1
 14522  00236E  C089  F094         	movff	?___altoft+2,floor@i+2
 14523  002372  C08F  F018         	movff	floor@x,___ftge@ff1
 14524  002376  C090  F019         	movff	floor@x+1,___ftge@ff1+1
 14525  00237A  C091  F01A         	movff	floor@x+2,___ftge@ff1+2
 14526  00237E  C092  F01B         	movff	floor@i,___ftge@ff2
 14527  002382  C093  F01C         	movff	floor@i+1,___ftge@ff2+1
 14528  002386  C094  F01D         	movff	floor@i+2,___ftge@ff2+2
 14529  00238A  ECDB  F015         	call	___ftge	;wreg free
 14530  00238E  B0D8               	btfsc	status,0,c
 14531  002390  D016               	goto	l2121
 14532  002392  C092  F078         	movff	floor@i,___ftadd@f1
 14533  002396  C093  F079         	movff	floor@i+1,___ftadd@f1+1
 14534  00239A  C094  F07A         	movff	floor@i+2,___ftadd@f1+2
 14535  00239E  0E00               	movlw	0
 14536  0023A0  0100               	movlb	0	; () banked
 14537  0023A2  6F7B               	movwf	___ftadd@f2& (0+255),b
 14538  0023A4  0E80               	movlw	128
 14539  0023A6  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 14540  0023A8  0EBF               	movlw	191
 14541  0023AA  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 14542  0023AC  ECE5  F009         	call	___ftadd	;wreg free
 14543  0023B0  C078  F08F         	movff	?___ftadd,?_floor
 14544  0023B4  C079  F090         	movff	?___ftadd+1,?_floor+1
 14545  0023B8  C07A  F091         	movff	?___ftadd+2,?_floor+2
 14546  0023BC  0012               	return	
 14547  0023BE                     l2121:
 14548  0023BE  C092  F08F         	movff	floor@i,?_floor
 14549  0023C2  C093  F090         	movff	floor@i+1,?_floor+1
 14550  0023C6  C094  F091         	movff	floor@i+2,?_floor+2
 14551  0023CA  0012               	return		;funcret
 14552  0023CC                     __end_of_floor:
 14553                           	opt stack 0
 14554                           tosu	equ	0xFFF
 14555                           tosh	equ	0xFFE
 14556                           tosl	equ	0xFFD
 14557                           pclath	equ	0xFFA
 14558                           tblptru	equ	0xFF8
 14559                           tblptrh	equ	0xFF7
 14560                           tblptrl	equ	0xFF6
 14561                           tablat	equ	0xFF5
 14562                           prodh	equ	0xFF4
 14563                           prodl	equ	0xFF3
 14564                           intcon	equ	0xFF2
 14565                           intcon2	equ	0xFF1
 14566                           postinc0	equ	0xFEE
 14567                           plusw0	equ	0xFEB
 14568                           wreg	equ	0xFE8
 14569                           indf1	equ	0xFE7
 14570                           postinc1	equ	0xFE6
 14571                           postdec1	equ	0xFE5
 14572                           fsr1h	equ	0xFE2
 14573                           fsr1l	equ	0xFE1
 14574                           indf2	equ	0xFDF
 14575                           postinc2	equ	0xFDE
 14576                           postdec2	equ	0xFDD
 14577                           plusw2	equ	0xFDB
 14578                           fsr2h	equ	0xFDA
 14579                           fsr2l	equ	0xFD9
 14580                           status	equ	0xFD8
 14581                           
 14582 ;; *************** function _frexp *****************
 14583 ;; Defined at:
 14584 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 14585 ;; Parameters:    Size  Location     Type
 14586 ;;  value           3   23[COMRAM] int 
 14587 ;;  eptr            2   26[COMRAM] PTR int 
 14588 ;;		 -> log@exponent(2), floor@expon(2), 
 14589 ;; Auto vars:     Size  Location     Type
 14590 ;;		None
 14591 ;; Return value:  Size  Location     Type
 14592 ;;                  3   23[COMRAM] PTR int 
 14593 ;; Registers used:
 14594 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14595 ;; Tracked objects:
 14596 ;;		On entry : 0/0
 14597 ;;		On exit  : 0/0
 14598 ;;		Unchanged: 0/0
 14599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14600 ;;      Params:         5       0       0       0       0       0       0
 14601 ;;      Locals:         0       0       0       0       0       0       0
 14602 ;;      Temps:          2       0       0       0       0       0       0
 14603 ;;      Totals:         7       0       0       0       0       0       0
 14604 ;;Total ram usage:        7 bytes
 14605 ;; Hardware stack levels used:    1
 14606 ;; Hardware stack levels required when called:    3
 14607 ;; This function calls:
 14608 ;;		Nothing
 14609 ;; This function is called by:
 14610 ;;		_floor
 14611 ;;		_log
 14612 ;; This function uses a non-reentrant model
 14613 ;;
 14614                           
 14615                           	psect	text88
 14616  002B26                     __ptext88:
 14617                           	opt stack 0
 14618  002B26                     _frexp:
 14619                           	opt stack 21
 14620                           
 14621                           ;incstack = 0
 14622  002B26  5018               	movf	frexp@value,w,c
 14623  002B28  1019               	iorwf	frexp@value+1,w,c
 14624  002B2A  101A               	iorwf	frexp@value+2,w,c
 14625  002B2C  A4D8               	btfss	status,2,c
 14626  002B2E  D00F               	goto	l2126
 14627  002B30  C01B  FFD9         	movff	frexp@eptr,fsr2l
 14628  002B34  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 14629  002B38  0E00               	movlw	0
 14630  002B3A  6EDE               	movwf	postinc2,c
 14631  002B3C  0E00               	movlw	0
 14632  002B3E  6EDD               	movwf	postdec2,c
 14633  002B40  0E00               	movlw	0
 14634  002B42  6E18               	movwf	?_frexp,c
 14635  002B44  0E00               	movlw	0
 14636  002B46  6E19               	movwf	?_frexp+1,c
 14637  002B48  0E00               	movlw	0
 14638  002B4A  6E1A               	movwf	?_frexp+2,c
 14639  002B4C  0012               	return	
 14640  002B4E                     l2126:
 14641  002B4E  501A               	movf	frexp@value+2,w,c
 14642  002B50  0B7F               	andlw	127
 14643  002B52  6E1D               	movwf	??_frexp& (0+255),c
 14644  002B54  6A1E               	clrf	(??_frexp+1)& (0+255),c
 14645  002B56  90D8               	bcf	status,0,c
 14646  002B58  361D               	rlcf	??_frexp,f,c
 14647  002B5A  361E               	rlcf	??_frexp+1,f,c
 14648  002B5C  C01B  FFD9         	movff	frexp@eptr,fsr2l
 14649  002B60  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 14650  002B64  C01D  FFDE         	movff	??_frexp,postinc2
 14651  002B68  C01E  FFDD         	movff	??_frexp+1,postdec2
 14652  002B6C  AE19               	btfss	frexp@value+1,7,c
 14653  002B6E  D003               	goto	u6760
 14654  002B70  6A1D               	clrf	??_frexp& (0+255),c
 14655  002B72  2A1D               	incf	??_frexp& (0+255),f,c
 14656  002B74  D001               	goto	u6768
 14657  002B76                     u6760:
 14658  002B76  6A1D               	clrf	??_frexp& (0+255),c
 14659  002B78                     u6768:
 14660  002B78  501D               	movf	??_frexp,w,c
 14661  002B7A  C01B  FFD9         	movff	frexp@eptr,fsr2l
 14662  002B7E  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 14663  002B82  12DE               	iorwf	postinc2,f,c
 14664  002B84  0E00               	movlw	0
 14665  002B86  12DD               	iorwf	postdec2,f,c
 14666  002B88  C01B  FFD9         	movff	frexp@eptr,fsr2l
 14667  002B8C  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 14668  002B90  0E82               	movlw	130
 14669  002B92  26DE               	addwf	postinc2,f,c
 14670  002B94  0EFF               	movlw	255
 14671  002B96  22DD               	addwfc	postdec2,f,c
 14672  002B98  801A               	bsf	frexp@value+2,0,c
 14673  002B9A  821A               	bsf	frexp@value+2,1,c
 14674  002B9C  841A               	bsf	frexp@value+2,2,c
 14675  002B9E  861A               	bsf	frexp@value+2,3,c
 14676  002BA0  881A               	bsf	frexp@value+2,4,c
 14677  002BA2  8A1A               	bsf	frexp@value+2,5,c
 14678  002BA4  9C1A               	bcf	frexp@value+2,6,c
 14679  002BA6  9E19               	bcf	frexp@value+1,7,c
 14680  002BA8  C018  F018         	movff	frexp@value,?_frexp
 14681  002BAC  C019  F019         	movff	frexp@value+1,?_frexp+1
 14682  002BB0  C01A  F01A         	movff	frexp@value+2,?_frexp+2
 14683  002BB4  0012               	return	
 14684  002BB6                     __end_of_frexp:
 14685                           	opt stack 0
 14686                           tosu	equ	0xFFF
 14687                           tosh	equ	0xFFE
 14688                           tosl	equ	0xFFD
 14689                           pclath	equ	0xFFA
 14690                           tblptru	equ	0xFF8
 14691                           tblptrh	equ	0xFF7
 14692                           tblptrl	equ	0xFF6
 14693                           tablat	equ	0xFF5
 14694                           prodh	equ	0xFF4
 14695                           prodl	equ	0xFF3
 14696                           intcon	equ	0xFF2
 14697                           intcon2	equ	0xFF1
 14698                           postinc0	equ	0xFEE
 14699                           plusw0	equ	0xFEB
 14700                           wreg	equ	0xFE8
 14701                           indf1	equ	0xFE7
 14702                           postinc1	equ	0xFE6
 14703                           postdec1	equ	0xFE5
 14704                           fsr1h	equ	0xFE2
 14705                           fsr1l	equ	0xFE1
 14706                           indf2	equ	0xFDF
 14707                           postinc2	equ	0xFDE
 14708                           postdec2	equ	0xFDD
 14709                           plusw2	equ	0xFDB
 14710                           fsr2h	equ	0xFDA
 14711                           fsr2l	equ	0xFD9
 14712                           status	equ	0xFD8
 14713                           
 14714 ;; *************** function ___fttol *****************
 14715 ;; Defined at:
 14716 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 14717 ;; Parameters:    Size  Location     Type
 14718 ;;  f1              3   24[BANK0 ] float 
 14719 ;; Auto vars:     Size  Location     Type
 14720 ;;  lval            4   34[BANK0 ] unsigned long 
 14721 ;;  exp1            1   38[BANK0 ] unsigned char 
 14722 ;;  sign1           1   33[BANK0 ] unsigned char 
 14723 ;; Return value:  Size  Location     Type
 14724 ;;                  4   24[BANK0 ] long 
 14725 ;; Registers used:
 14726 ;;		wreg, status,2, status,0
 14727 ;; Tracked objects:
 14728 ;;		On entry : 0/0
 14729 ;;		On exit  : 0/0
 14730 ;;		Unchanged: 0/0
 14731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14732 ;;      Params:         0       4       0       0       0       0       0
 14733 ;;      Locals:         0       6       0       0       0       0       0
 14734 ;;      Temps:          0       5       0       0       0       0       0
 14735 ;;      Totals:         0      15       0       0       0       0       0
 14736 ;;Total ram usage:       15 bytes
 14737 ;; Hardware stack levels used:    1
 14738 ;; Hardware stack levels required when called:    3
 14739 ;; This function calls:
 14740 ;;		Nothing
 14741 ;; This function is called by:
 14742 ;;		_AdcConvert
 14743 ;;		_ReadIntFromEeprom
 14744 ;;		_pow
 14745 ;;		_exp
 14746 ;;		_floor
 14747 ;; This function uses a non-reentrant model
 14748 ;;
 14749                           
 14750                           	psect	text89
 14751  001F30                     __ptext89:
 14752                           	opt stack 0
 14753  001F30                     ___fttol:
 14754                           	opt stack 20
 14755                           
 14756                           ;incstack = 0
 14757  001F30  C07A  F07C         	movff	___fttol@f1+2,??___fttol
 14758  001F34  0100               	movlb	0	; () banked
 14759  001F36  6B7D               	clrf	(??___fttol+1)& (0+255),b
 14760  001F38  6B7E               	clrf	(??___fttol+2)& (0+255),b
 14761  001F3A  3579               	rlcf	(___fttol@f1+1)& (0+255),w,b
 14762  001F3C  377C               	rlcf	??___fttol& (0+255),f,b
 14763  001F3E  E301               	bnc	u6671
 14764  001F40  817D               	bsf	(??___fttol+1)& (0+255),0,b
 14765  001F42                     u6671:
 14766  001F42  517C               	movf	??___fttol& (0+255),w,b
 14767  001F44  6F86               	movwf	___fttol@exp1& (0+255),b
 14768  001F46  5186               	movf	___fttol@exp1& (0+255),w,b
 14769  001F48  A4D8               	btfss	status,2,c
 14770  001F4A  D009               	goto	l1783
 14771                           
 14772                           ; BSR set to: 0
 14773  001F4C  0E00               	movlw	0
 14774  001F4E  6F78               	movwf	?___fttol& (0+255),b
 14775  001F50  0E00               	movlw	0
 14776  001F52  6F79               	movwf	(?___fttol+1)& (0+255),b
 14777  001F54  0E00               	movlw	0
 14778  001F56  6F7A               	movwf	(?___fttol+2)& (0+255),b
 14779  001F58  0E00               	movlw	0
 14780  001F5A  6F7B               	movwf	(?___fttol+3)& (0+255),b
 14781                           
 14782                           ; BSR set to: 0
 14783  001F5C  0012               	return	
 14784  001F5E                     l1783:
 14785                           
 14786                           ; BSR set to: 0
 14787                           
 14788                           ; BSR set to: 0
 14789  001F5E  0E17               	movlw	23
 14790  001F60  6F7C               	movwf	??___fttol& (0+255),b
 14791  001F62  C078  F07D         	movff	___fttol@f1,??___fttol+1
 14792  001F66  C079  F07E         	movff	___fttol@f1+1,??___fttol+2
 14793  001F6A  C07A  F07F         	movff	___fttol@f1+2,??___fttol+3
 14794  001F6E  297C               	incf	??___fttol& (0+255),w,b
 14795  001F70  6F80               	movwf	(??___fttol+4)& (0+255),b
 14796  001F72  D004               	goto	u6690
 14797  001F74                     u6695:
 14798  001F74  90D8               	bcf	status,0,c
 14799  001F76  337F               	rrcf	(??___fttol+3)& (0+255),f,b
 14800  001F78  337E               	rrcf	(??___fttol+2)& (0+255),f,b
 14801  001F7A  337D               	rrcf	(??___fttol+1)& (0+255),f,b
 14802  001F7C                     u6690:
 14803  001F7C  2F80               	decfsz	(??___fttol+4)& (0+255),f,b
 14804  001F7E  D7FA               	goto	u6695
 14805  001F80  0100               	movlb	0	; () banked
 14806  001F82  517D               	movf	(??___fttol+1)& (0+255),w,b
 14807  001F84  6F81               	movwf	___fttol@sign1& (0+255),b
 14808                           
 14809                           ; BSR set to: 0
 14810  001F86  8F79               	bsf	(___fttol@f1+1)& (0+255),7,b
 14811                           
 14812                           ; BSR set to: 0
 14813  001F88  0EFF               	movlw	255
 14814  001F8A  1778               	andwf	___fttol@f1& (0+255),f,b
 14815  001F8C  0EFF               	movlw	255
 14816  001F8E  1779               	andwf	(___fttol@f1+1)& (0+255),f,b
 14817  001F90  0E00               	movlw	0
 14818  001F92  177A               	andwf	(___fttol@f1+2)& (0+255),f,b
 14819                           
 14820                           ; BSR set to: 0
 14821  001F94  5178               	movf	___fttol@f1& (0+255),w,b
 14822  001F96  6F82               	movwf	___fttol@lval& (0+255),b
 14823  001F98  5179               	movf	(___fttol@f1+1)& (0+255),w,b
 14824  001F9A  6F83               	movwf	(___fttol@lval+1)& (0+255),b
 14825  001F9C  517A               	movf	(___fttol@f1+2)& (0+255),w,b
 14826  001F9E  6F84               	movwf	(___fttol@lval+2)& (0+255),b
 14827  001FA0  6B85               	clrf	(___fttol@lval+3)& (0+255),b
 14828                           
 14829                           ; BSR set to: 0
 14830  001FA2  0E8E               	movlw	142
 14831  001FA4  5F86               	subwf	___fttol@exp1& (0+255),f,b
 14832                           
 14833                           ; BSR set to: 0
 14834  001FA6  AF86               	btfss	___fttol@exp1& (0+255),7,b
 14835  001FA8  D016               	goto	l1785
 14836                           
 14837                           ; BSR set to: 0
 14838  001FAA  5186               	movf	___fttol@exp1& (0+255),w,b
 14839  001FAC  0A80               	xorlw	128
 14840  001FAE  0F8F               	addlw	143
 14841  001FB0  B0D8               	btfsc	status,0,c
 14842  001FB2  D009               	goto	l1786
 14843                           
 14844                           ; BSR set to: 0
 14845  001FB4  0E00               	movlw	0
 14846  001FB6  6F78               	movwf	?___fttol& (0+255),b
 14847  001FB8  0E00               	movlw	0
 14848  001FBA  6F79               	movwf	(?___fttol+1)& (0+255),b
 14849  001FBC  0E00               	movlw	0
 14850  001FBE  6F7A               	movwf	(?___fttol+2)& (0+255),b
 14851  001FC0  0E00               	movlw	0
 14852  001FC2  6F7B               	movwf	(?___fttol+3)& (0+255),b
 14853                           
 14854                           ; BSR set to: 0
 14855  001FC4  0012               	return	
 14856  001FC6                     l1786:
 14857                           
 14858                           ; BSR set to: 0
 14859                           
 14860                           ; BSR set to: 0
 14861                           
 14862                           ; BSR set to: 0
 14863  001FC6  90D8               	bcf	status,0,c
 14864  001FC8  3385               	rrcf	(___fttol@lval+3)& (0+255),f,b
 14865  001FCA  3384               	rrcf	(___fttol@lval+2)& (0+255),f,b
 14866  001FCC  3383               	rrcf	(___fttol@lval+1)& (0+255),f,b
 14867  001FCE  3382               	rrcf	___fttol@lval& (0+255),f,b
 14868                           
 14869                           ; BSR set to: 0
 14870  001FD0  3F86               	incfsz	___fttol@exp1& (0+255),f,b
 14871  001FD2  D7F9               	goto	l1786
 14872                           
 14873                           ; BSR set to: 0
 14874  001FD4  D015               	goto	u6730
 14875  001FD6                     l1785:
 14876                           
 14877                           ; BSR set to: 0
 14878                           
 14879                           ; BSR set to: 0
 14880  001FD6  0E17               	movlw	23
 14881  001FD8  6586               	cpfsgt	___fttol@exp1& (0+255),b
 14882  001FDA  D00F               	goto	l1791
 14883                           
 14884                           ; BSR set to: 0
 14885  001FDC  0E00               	movlw	0
 14886  001FDE  6F78               	movwf	?___fttol& (0+255),b
 14887  001FE0  0E00               	movlw	0
 14888  001FE2  6F79               	movwf	(?___fttol+1)& (0+255),b
 14889  001FE4  0E00               	movlw	0
 14890  001FE6  6F7A               	movwf	(?___fttol+2)& (0+255),b
 14891  001FE8  0E00               	movlw	0
 14892  001FEA  6F7B               	movwf	(?___fttol+3)& (0+255),b
 14893                           
 14894                           ; BSR set to: 0
 14895  001FEC  0012               	return	
 14896  001FEE                     
 14897                           ; BSR set to: 0
 14898                           
 14899                           ; BSR set to: 0
 14900  001FEE  90D8               	bcf	status,0,c
 14901  001FF0  3782               	rlcf	___fttol@lval& (0+255),f,b
 14902  001FF2  3783               	rlcf	(___fttol@lval+1)& (0+255),f,b
 14903  001FF4  3784               	rlcf	(___fttol@lval+2)& (0+255),f,b
 14904  001FF6  3785               	rlcf	(___fttol@lval+3)& (0+255),f,b
 14905  001FF8  0786               	decf	___fttol@exp1& (0+255),f,b
 14906  001FFA                     l1791:
 14907                           
 14908                           ; BSR set to: 0
 14909                           
 14910                           ; BSR set to: 0
 14911  001FFA  5186               	movf	___fttol@exp1& (0+255),w,b
 14912  001FFC  A4D8               	btfss	status,2,c
 14913  001FFE  D7F7               	goto	l1792
 14914  002000                     u6730:
 14915                           
 14916                           ; BSR set to: 0
 14917                           
 14918                           ; BSR set to: 0
 14919                           
 14920                           ; BSR set to: 0
 14921  002000  5181               	movf	___fttol@sign1& (0+255),w,b
 14922  002002  B4D8               	btfsc	status,2,c
 14923  002004  D008               	goto	l1794
 14924                           
 14925                           ; BSR set to: 0
 14926  002006  1F85               	comf	(___fttol@lval+3)& (0+255),f,b
 14927  002008  1F84               	comf	(___fttol@lval+2)& (0+255),f,b
 14928  00200A  1F83               	comf	(___fttol@lval+1)& (0+255),f,b
 14929  00200C  6D82               	negf	___fttol@lval& (0+255),b
 14930  00200E  0E00               	movlw	0
 14931  002010  2383               	addwfc	(___fttol@lval+1)& (0+255),f,b
 14932  002012  2384               	addwfc	(___fttol@lval+2)& (0+255),f,b
 14933  002014  2385               	addwfc	(___fttol@lval+3)& (0+255),f,b
 14934  002016                     l1794:
 14935                           
 14936                           ; BSR set to: 0
 14937                           
 14938                           ; BSR set to: 0
 14939  002016  C082  F078         	movff	___fttol@lval,?___fttol
 14940  00201A  C083  F079         	movff	___fttol@lval+1,?___fttol+1
 14941  00201E  C084  F07A         	movff	___fttol@lval+2,?___fttol+2
 14942  002022  C085  F07B         	movff	___fttol@lval+3,?___fttol+3
 14943  002026  0012               	return	
 14944  002028                     __end_of___fttol:
 14945                           	opt stack 0
 14946                           tosu	equ	0xFFF
 14947                           tosh	equ	0xFFE
 14948                           tosl	equ	0xFFD
 14949                           pclath	equ	0xFFA
 14950                           tblptru	equ	0xFF8
 14951                           tblptrh	equ	0xFF7
 14952                           tblptrl	equ	0xFF6
 14953                           tablat	equ	0xFF5
 14954                           prodh	equ	0xFF4
 14955                           prodl	equ	0xFF3
 14956                           intcon	equ	0xFF2
 14957                           intcon2	equ	0xFF1
 14958                           postinc0	equ	0xFEE
 14959                           plusw0	equ	0xFEB
 14960                           wreg	equ	0xFE8
 14961                           indf1	equ	0xFE7
 14962                           postinc1	equ	0xFE6
 14963                           postdec1	equ	0xFE5
 14964                           fsr1h	equ	0xFE2
 14965                           fsr1l	equ	0xFE1
 14966                           indf2	equ	0xFDF
 14967                           postinc2	equ	0xFDE
 14968                           postdec2	equ	0xFDD
 14969                           plusw2	equ	0xFDB
 14970                           fsr2h	equ	0xFDA
 14971                           fsr2l	equ	0xFD9
 14972                           status	equ	0xFD8
 14973                           
 14974 ;; *************** function ___ftge *****************
 14975 ;; Defined at:
 14976 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 14977 ;; Parameters:    Size  Location     Type
 14978 ;;  ff1             3   23[COMRAM] float 
 14979 ;;  ff2             3   26[COMRAM] float 
 14980 ;; Auto vars:     Size  Location     Type
 14981 ;;		None
 14982 ;; Return value:  Size  Location     Type
 14983 ;;		None               void
 14984 ;; Registers used:
 14985 ;;		wreg, status,2, status,0
 14986 ;; Tracked objects:
 14987 ;;		On entry : 0/0
 14988 ;;		On exit  : 0/0
 14989 ;;		Unchanged: 0/0
 14990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14991 ;;      Params:         6       0       0       0       0       0       0
 14992 ;;      Locals:         0       0       0       0       0       0       0
 14993 ;;      Temps:          3       0       0       0       0       0       0
 14994 ;;      Totals:         9       0       0       0       0       0       0
 14995 ;;Total ram usage:        9 bytes
 14996 ;; Hardware stack levels used:    1
 14997 ;; Hardware stack levels required when called:    3
 14998 ;; This function calls:
 14999 ;;		Nothing
 15000 ;; This function is called by:
 15001 ;;		_CheckFlashPrecentage
 15002 ;;		_pow
 15003 ;;		_exp
 15004 ;;		_floor
 15005 ;; This function uses a non-reentrant model
 15006 ;;
 15007                           
 15008                           	psect	text90
 15009  002BB6                     __ptext90:
 15010                           	opt stack 0
 15011  002BB6                     ___ftge:
 15012                           	opt stack 20
 15013                           
 15014                           ; BSR set to: 0
 15015                           ;incstack = 0
 15016  002BB6  AE1A               	btfss	___ftge@ff1+2,7,c
 15017  002BB8  D016               	goto	l1755
 15018  002BBA  C018  F01E         	movff	___ftge@ff1,??___ftge
 15019  002BBE  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
 15020  002BC2  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
 15021  002BC6  1E1E               	comf	??___ftge,f,c
 15022  002BC8  1E1F               	comf	??___ftge+1,f,c
 15023  002BCA  1E20               	comf	??___ftge+2,f,c
 15024  002BCC  2A1E               	incf	??___ftge,f,c
 15025  002BCE  0E00               	movlw	0
 15026  002BD0  221F               	addwfc	??___ftge+1,f,c
 15027  002BD2  2220               	addwfc	??___ftge+2,f,c
 15028  002BD4  0E00               	movlw	0
 15029  002BD6  241E               	addwf	??___ftge,w,c
 15030  002BD8  6E18               	movwf	___ftge@ff1,c
 15031  002BDA  0E00               	movlw	0
 15032  002BDC  201F               	addwfc	??___ftge+1,w,c
 15033  002BDE  6E19               	movwf	___ftge@ff1+1,c
 15034  002BE0  0E80               	movlw	128
 15035  002BE2  2020               	addwfc	??___ftge+2,w,c
 15036  002BE4  6E1A               	movwf	___ftge@ff1+2,c
 15037  002BE6                     l1755:
 15038  002BE6  AE1D               	btfss	___ftge@ff2+2,7,c
 15039  002BE8  D016               	goto	l1756
 15040  002BEA  C01B  F01E         	movff	___ftge@ff2,??___ftge
 15041  002BEE  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
 15042  002BF2  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
 15043  002BF6  1E1E               	comf	??___ftge,f,c
 15044  002BF8  1E1F               	comf	??___ftge+1,f,c
 15045  002BFA  1E20               	comf	??___ftge+2,f,c
 15046  002BFC  2A1E               	incf	??___ftge,f,c
 15047  002BFE  0E00               	movlw	0
 15048  002C00  221F               	addwfc	??___ftge+1,f,c
 15049  002C02  2220               	addwfc	??___ftge+2,f,c
 15050  002C04  0E00               	movlw	0
 15051  002C06  241E               	addwf	??___ftge,w,c
 15052  002C08  6E1B               	movwf	___ftge@ff2,c
 15053  002C0A  0E00               	movlw	0
 15054  002C0C  201F               	addwfc	??___ftge+1,w,c
 15055  002C0E  6E1C               	movwf	___ftge@ff2+1,c
 15056  002C10  0E80               	movlw	128
 15057  002C12  2020               	addwfc	??___ftge+2,w,c
 15058  002C14  6E1D               	movwf	___ftge@ff2+2,c
 15059  002C16                     l1756:
 15060  002C16  0E00               	movlw	0
 15061  002C18  1A18               	xorwf	___ftge@ff1,f,c
 15062  002C1A  0E00               	movlw	0
 15063  002C1C  1A19               	xorwf	___ftge@ff1+1,f,c
 15064  002C1E  0E80               	movlw	128
 15065  002C20  1A1A               	xorwf	___ftge@ff1+2,f,c
 15066  002C22  0E00               	movlw	0
 15067  002C24  1A1B               	xorwf	___ftge@ff2,f,c
 15068  002C26  0E00               	movlw	0
 15069  002C28  1A1C               	xorwf	___ftge@ff2+1,f,c
 15070  002C2A  0E80               	movlw	128
 15071  002C2C  1A1D               	xorwf	___ftge@ff2+2,f,c
 15072  002C2E  501B               	movf	___ftge@ff2,w,c
 15073  002C30  5C18               	subwf	___ftge@ff1,w,c
 15074  002C32  501C               	movf	___ftge@ff2+1,w,c
 15075  002C34  5819               	subwfb	___ftge@ff1+1,w,c
 15076  002C36  501D               	movf	___ftge@ff2+2,w,c
 15077  002C38  581A               	subwfb	___ftge@ff1+2,w,c
 15078  002C3A  B0D8               	btfsc	status,0,c
 15079  002C3C  D002               	goto	l6607
 15080  002C3E  90D8               	bcf	status,0,c
 15081  002C40  0012               	return	
 15082  002C42                     l6607:
 15083  002C42  80D8               	bsf	status,0,c
 15084  002C44  0012               	return	
 15085  002C46                     __end_of___ftge:
 15086                           	opt stack 0
 15087                           tosu	equ	0xFFF
 15088                           tosh	equ	0xFFE
 15089                           tosl	equ	0xFFD
 15090                           pclath	equ	0xFFA
 15091                           tblptru	equ	0xFF8
 15092                           tblptrh	equ	0xFF7
 15093                           tblptrl	equ	0xFF6
 15094                           tablat	equ	0xFF5
 15095                           prodh	equ	0xFF4
 15096                           prodl	equ	0xFF3
 15097                           intcon	equ	0xFF2
 15098                           intcon2	equ	0xFF1
 15099                           postinc0	equ	0xFEE
 15100                           plusw0	equ	0xFEB
 15101                           wreg	equ	0xFE8
 15102                           indf1	equ	0xFE7
 15103                           postinc1	equ	0xFE6
 15104                           postdec1	equ	0xFE5
 15105                           fsr1h	equ	0xFE2
 15106                           fsr1l	equ	0xFE1
 15107                           indf2	equ	0xFDF
 15108                           postinc2	equ	0xFDE
 15109                           postdec2	equ	0xFDD
 15110                           plusw2	equ	0xFDB
 15111                           fsr2h	equ	0xFDA
 15112                           fsr2l	equ	0xFD9
 15113                           status	equ	0xFD8
 15114                           
 15115 ;; *************** function ___altoft *****************
 15116 ;; Defined at:
 15117 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 15118 ;; Parameters:    Size  Location     Type
 15119 ;;  c               4   39[BANK0 ] long 
 15120 ;; Auto vars:     Size  Location     Type
 15121 ;;  sign            1   47[COMRAM] unsigned char 
 15122 ;;  exp             1   46[COMRAM] unsigned char 
 15123 ;; Return value:  Size  Location     Type
 15124 ;;                  3   39[BANK0 ] float 
 15125 ;; Registers used:
 15126 ;;		wreg, status,2, status,0, cstack
 15127 ;; Tracked objects:
 15128 ;;		On entry : 0/0
 15129 ;;		On exit  : 0/0
 15130 ;;		Unchanged: 0/0
 15131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15132 ;;      Params:         0       4       0       0       0       0       0
 15133 ;;      Locals:         2       0       0       0       0       0       0
 15134 ;;      Temps:          0       4       0       0       0       0       0
 15135 ;;      Totals:         2       8       0       0       0       0       0
 15136 ;;Total ram usage:       10 bytes
 15137 ;; Hardware stack levels used:    1
 15138 ;; Hardware stack levels required when called:    4
 15139 ;; This function calls:
 15140 ;;		___ftpack
 15141 ;; This function is called by:
 15142 ;;		_floor
 15143 ;; This function uses a non-reentrant model
 15144 ;;
 15145                           
 15146                           	psect	text91
 15147  002DD0                     __ptext91:
 15148                           	opt stack 0
 15149  002DD0                     ___altoft:
 15150                           	opt stack 19
 15151                           
 15152                           ;incstack = 0
 15153  002DD0  0E00               	movlw	0
 15154  002DD2  6E30               	movwf	___altoft@sign,c
 15155  002DD4  0E8E               	movlw	142
 15156  002DD6  6E2F               	movwf	___altoft@exp,c
 15157  002DD8  0100               	movlb	0	; () banked
 15158  002DDA  AF8A               	btfss	(___altoft@c+3)& (0+255),7,b
 15159  002DDC  D011               	goto	l1553
 15160                           
 15161                           ; BSR set to: 0
 15162  002DDE  1F8A               	comf	(___altoft@c+3)& (0+255),f,b
 15163  002DE0  1F89               	comf	(___altoft@c+2)& (0+255),f,b
 15164  002DE2  1F88               	comf	(___altoft@c+1)& (0+255),f,b
 15165  002DE4  6D87               	negf	___altoft@c& (0+255),b
 15166  002DE6  0E00               	movlw	0
 15167  002DE8  2388               	addwfc	(___altoft@c+1)& (0+255),f,b
 15168  002DEA  2389               	addwfc	(___altoft@c+2)& (0+255),f,b
 15169  002DEC  238A               	addwfc	(___altoft@c+3)& (0+255),f,b
 15170                           
 15171                           ; BSR set to: 0
 15172  002DEE  0E01               	movlw	1
 15173  002DF0  6E30               	movwf	___altoft@sign,c
 15174                           
 15175                           ; BSR set to: 0
 15176  002DF2  D006               	goto	l1553
 15177  002DF4                     
 15178                           ; BSR set to: 0
 15179                           
 15180                           ; BSR set to: 0
 15181  002DF4  90D8               	bcf	status,0,c
 15182  002DF6  338A               	rrcf	(___altoft@c+3)& (0+255),f,b
 15183  002DF8  3389               	rrcf	(___altoft@c+2)& (0+255),f,b
 15184  002DFA  3388               	rrcf	(___altoft@c+1)& (0+255),f,b
 15185  002DFC  3387               	rrcf	___altoft@c& (0+255),f,b
 15186  002DFE  2A2F               	incf	___altoft@exp,f,c
 15187  002E00                     l1553:
 15188                           
 15189                           ; BSR set to: 0
 15190                           
 15191                           ; BSR set to: 0
 15192  002E00  0E00               	movlw	0
 15193  002E02  1587               	andwf	___altoft@c& (0+255),w,b
 15194  002E04  6F8B               	movwf	??___altoft& (0+255),b
 15195  002E06  0E00               	movlw	0
 15196  002E08  1588               	andwf	(___altoft@c+1)& (0+255),w,b
 15197  002E0A  6F8C               	movwf	(??___altoft+1)& (0+255),b
 15198  002E0C  0E00               	movlw	0
 15199  002E0E  1589               	andwf	(___altoft@c+2)& (0+255),w,b
 15200  002E10  6F8D               	movwf	(??___altoft+2)& (0+255),b
 15201  002E12  0EFF               	movlw	255
 15202  002E14  158A               	andwf	(___altoft@c+3)& (0+255),w,b
 15203  002E16  6F8E               	movwf	(??___altoft+3)& (0+255),b
 15204  002E18  518B               	movf	??___altoft& (0+255),w,b
 15205  002E1A  118C               	iorwf	(??___altoft+1)& (0+255),w,b
 15206  002E1C  118D               	iorwf	(??___altoft+2)& (0+255),w,b
 15207  002E1E  118E               	iorwf	(??___altoft+3)& (0+255),w,b
 15208  002E20  A4D8               	btfss	status,2,c
 15209  002E22  D7E8               	goto	l1554
 15210                           
 15211                           ; BSR set to: 0
 15212                           
 15213                           ; BSR set to: 0
 15214  002E24  C087  F018         	movff	___altoft@c,___ftpack@arg
 15215  002E28  C088  F019         	movff	___altoft@c+1,___ftpack@arg+1
 15216  002E2C  C089  F01A         	movff	___altoft@c+2,___ftpack@arg+2
 15217  002E30  C02F  F01B         	movff	___altoft@exp,___ftpack@exp
 15218  002E34  C030  F01C         	movff	___altoft@sign,___ftpack@sign
 15219  002E38  ECCA  F013         	call	___ftpack	;wreg free
 15220  002E3C  C018  F087         	movff	?___ftpack,?___altoft
 15221  002E40  C019  F088         	movff	?___ftpack+1,?___altoft+1
 15222  002E44  C01A  F089         	movff	?___ftpack+2,?___altoft+2
 15223  002E48  0012               	return	
 15224  002E4A                     __end_of___altoft:
 15225                           	opt stack 0
 15226                           tosu	equ	0xFFF
 15227                           tosh	equ	0xFFE
 15228                           tosl	equ	0xFFD
 15229                           pclath	equ	0xFFA
 15230                           tblptru	equ	0xFF8
 15231                           tblptrh	equ	0xFF7
 15232                           tblptrl	equ	0xFF6
 15233                           tablat	equ	0xFF5
 15234                           prodh	equ	0xFF4
 15235                           prodl	equ	0xFF3
 15236                           intcon	equ	0xFF2
 15237                           intcon2	equ	0xFF1
 15238                           postinc0	equ	0xFEE
 15239                           plusw0	equ	0xFEB
 15240                           wreg	equ	0xFE8
 15241                           indf1	equ	0xFE7
 15242                           postinc1	equ	0xFE6
 15243                           postdec1	equ	0xFE5
 15244                           fsr1h	equ	0xFE2
 15245                           fsr1l	equ	0xFE1
 15246                           indf2	equ	0xFDF
 15247                           postinc2	equ	0xFDE
 15248                           postdec2	equ	0xFDD
 15249                           plusw2	equ	0xFDB
 15250                           fsr2h	equ	0xFDA
 15251                           fsr2l	equ	0xFD9
 15252                           status	equ	0xFD8
 15253                           
 15254 ;; *************** function _eval_poly *****************
 15255 ;; Defined at:
 15256 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
 15257 ;; Parameters:    Size  Location     Type
 15258 ;;  x               3   36[BANK0 ] float 
 15259 ;;  d               2   39[BANK0 ] PTR const 
 15260 ;;		 -> log@coeff(27), exp@coeff(30), 
 15261 ;;  n               2   41[BANK0 ] int 
 15262 ;; Auto vars:     Size  Location     Type
 15263 ;;  res             3   43[BANK0 ] int 
 15264 ;; Return value:  Size  Location     Type
 15265 ;;                  3   36[BANK0 ] int 
 15266 ;; Registers used:
 15267 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15268 ;; Tracked objects:
 15269 ;;		On entry : 0/0
 15270 ;;		On exit  : 0/0
 15271 ;;		Unchanged: 0/0
 15272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15273 ;;      Params:         0       7       0       0       0       0       0
 15274 ;;      Locals:         0       3       0       0       0       0       0
 15275 ;;      Temps:          2       0       0       0       0       0       0
 15276 ;;      Totals:         2      10       0       0       0       0       0
 15277 ;;Total ram usage:       12 bytes
 15278 ;; Hardware stack levels used:    1
 15279 ;; Hardware stack levels required when called:    5
 15280 ;; This function calls:
 15281 ;;		___ftadd
 15282 ;;		___ftmul
 15283 ;;		___wmul
 15284 ;; This function is called by:
 15285 ;;		_exp
 15286 ;;		_log
 15287 ;; This function uses a non-reentrant model
 15288 ;;
 15289                           
 15290                           	psect	text92
 15291  0023CC                     __ptext92:
 15292                           	opt stack 0
 15293  0023CC                     _eval_poly:
 15294                           	opt stack 19
 15295                           
 15296                           ;incstack = 0
 15297  0023CC  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 15298  0023D0  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 15299  0023D4  0E00               	movlw	0
 15300  0023D6  6E1B               	movwf	___wmul@multiplicand+1,c
 15301  0023D8  0E03               	movlw	3
 15302  0023DA  6E1A               	movwf	___wmul@multiplicand,c
 15303  0023DC  ECB2  F01C         	call	___wmul	;wreg free
 15304  0023E0  C087  F02F         	movff	eval_poly@d,??_eval_poly
 15305  0023E4  C088  F030         	movff	eval_poly@d+1,??_eval_poly+1
 15306  0023E8  5018               	movf	?___wmul,w,c
 15307  0023EA  262F               	addwf	??_eval_poly,f,c
 15308  0023EC  5019               	movf	?___wmul+1,w,c
 15309  0023EE  2230               	addwfc	??_eval_poly+1,f,c
 15310  0023F0  C02F  FFF6         	movff	??_eval_poly,tblptrl
 15311  0023F4  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 15312  0023F8                     	if	0	;tblptru may be non-zero
 15313  0023F8                     	endif
 15314  0023F8                     	if	0	;tblptru may be non-zero
 15315  0023F8                     	endif
 15316  0023F8  0009               	tblrd		*+
 15317  0023FA  CFF5 F08B          	movff	tablat,eval_poly@res
 15318  0023FE  0009               	tblrd		*+
 15319  002400  CFF5 F08C          	movff	tablat,eval_poly@res+1
 15320  002404  000A               	tblrd		*-
 15321  002406  CFF5 F08D          	movff	tablat,eval_poly@res+2
 15322  00240A  D03F               	goto	l2178
 15323  00240C  C08B  F06C         	movff	eval_poly@res,___ftmul@f2
 15324  002410  C08C  F06D         	movff	eval_poly@res+1,___ftmul@f2+1
 15325  002414  C08D  F06E         	movff	eval_poly@res+2,___ftmul@f2+2
 15326  002418  C084  F069         	movff	eval_poly@x,___ftmul@f1
 15327  00241C  C085  F06A         	movff	eval_poly@x+1,___ftmul@f1+1
 15328  002420  C086  F06B         	movff	eval_poly@x+2,___ftmul@f1+2
 15329  002424  EC14  F010         	call	___ftmul	;wreg free
 15330  002428  C069  F078         	movff	?___ftmul,___ftadd@f1
 15331  00242C  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 15332  002430  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 15333  002434  0E00               	movlw	0
 15334  002436  6E1B               	movwf	___wmul@multiplicand+1,c
 15335  002438  0E03               	movlw	3
 15336  00243A  6E1A               	movwf	___wmul@multiplicand,c
 15337  00243C  0100               	movlb	0	; () banked
 15338  00243E  0789               	decf	eval_poly@n& (0+255),f,b
 15339  002440  A0D8               	btfss	status,0,c
 15340  002442  078A               	decf	(eval_poly@n+1)& (0+255),f,b
 15341  002444  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 15342  002448  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 15343  00244C  ECB2  F01C         	call	___wmul	;wreg free
 15344  002450  C087  F02F         	movff	eval_poly@d,??_eval_poly
 15345  002454  C088  F030         	movff	eval_poly@d+1,??_eval_poly+1
 15346  002458  5018               	movf	?___wmul,w,c
 15347  00245A  262F               	addwf	??_eval_poly,f,c
 15348  00245C  5019               	movf	?___wmul+1,w,c
 15349  00245E  2230               	addwfc	??_eval_poly+1,f,c
 15350  002460  C02F  FFF6         	movff	??_eval_poly,tblptrl
 15351  002464  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 15352  002468                     	if	0	;tblptru may be non-zero
 15353  002468                     	endif
 15354  002468                     	if	0	;tblptru may be non-zero
 15355  002468                     	endif
 15356  002468  0009               	tblrd		*+
 15357  00246A  CFF5 F07B          	movff	tablat,___ftadd@f2
 15358  00246E  0009               	tblrd		*+
 15359  002470  CFF5 F07C          	movff	tablat,___ftadd@f2+1
 15360  002474  000A               	tblrd		*-
 15361  002476  CFF5 F07D          	movff	tablat,___ftadd@f2+2
 15362  00247A  ECE5  F009         	call	___ftadd	;wreg free
 15363  00247E  C078  F08B         	movff	?___ftadd,eval_poly@res
 15364  002482  C079  F08C         	movff	?___ftadd+1,eval_poly@res+1
 15365  002486  C07A  F08D         	movff	?___ftadd+2,eval_poly@res+2
 15366  00248A                     l2178:
 15367  00248A  0100               	movlb	0	; () banked
 15368  00248C  5189               	movf	eval_poly@n& (0+255),w,b
 15369  00248E  118A               	iorwf	(eval_poly@n+1)& (0+255),w,b
 15370  002490  A4D8               	btfss	status,2,c
 15371  002492  D7BC               	goto	l2179
 15372                           
 15373                           ; BSR set to: 0
 15374  002494  C08B  F084         	movff	eval_poly@res,?_eval_poly
 15375  002498  C08C  F085         	movff	eval_poly@res+1,?_eval_poly+1
 15376  00249C  C08D  F086         	movff	eval_poly@res+2,?_eval_poly+2
 15377                           
 15378                           ; BSR set to: 0
 15379  0024A0  0012               	return		;funcret
 15380  0024A2                     __end_of_eval_poly:
 15381                           	opt stack 0
 15382                           tosu	equ	0xFFF
 15383                           tosh	equ	0xFFE
 15384                           tosl	equ	0xFFD
 15385                           pclath	equ	0xFFA
 15386                           tblptru	equ	0xFF8
 15387                           tblptrh	equ	0xFF7
 15388                           tblptrl	equ	0xFF6
 15389                           tablat	equ	0xFF5
 15390                           prodh	equ	0xFF4
 15391                           prodl	equ	0xFF3
 15392                           intcon	equ	0xFF2
 15393                           intcon2	equ	0xFF1
 15394                           postinc0	equ	0xFEE
 15395                           plusw0	equ	0xFEB
 15396                           wreg	equ	0xFE8
 15397                           indf1	equ	0xFE7
 15398                           postinc1	equ	0xFE6
 15399                           postdec1	equ	0xFE5
 15400                           fsr1h	equ	0xFE2
 15401                           fsr1l	equ	0xFE1
 15402                           indf2	equ	0xFDF
 15403                           postinc2	equ	0xFDE
 15404                           postdec2	equ	0xFDD
 15405                           plusw2	equ	0xFDB
 15406                           fsr2h	equ	0xFDA
 15407                           fsr2l	equ	0xFD9
 15408                           status	equ	0xFD8
 15409                           
 15410 ;; *************** function ___wmul *****************
 15411 ;; Defined at:
 15412 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 15413 ;; Parameters:    Size  Location     Type
 15414 ;;  multiplier      2   23[COMRAM] unsigned int 
 15415 ;;  multiplicand    2   25[COMRAM] unsigned int 
 15416 ;; Auto vars:     Size  Location     Type
 15417 ;;  product         2   27[COMRAM] unsigned int 
 15418 ;; Return value:  Size  Location     Type
 15419 ;;                  2   23[COMRAM] unsigned int 
 15420 ;; Registers used:
 15421 ;;		wreg, status,2, status,0, prodl, prodh
 15422 ;; Tracked objects:
 15423 ;;		On entry : 0/0
 15424 ;;		On exit  : 0/0
 15425 ;;		Unchanged: 0/0
 15426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15427 ;;      Params:         4       0       0       0       0       0       0
 15428 ;;      Locals:         2       0       0       0       0       0       0
 15429 ;;      Temps:          0       0       0       0       0       0       0
 15430 ;;      Totals:         6       0       0       0       0       0       0
 15431 ;;Total ram usage:        6 bytes
 15432 ;; Hardware stack levels used:    1
 15433 ;; Hardware stack levels required when called:    3
 15434 ;; This function calls:
 15435 ;;		Nothing
 15436 ;; This function is called by:
 15437 ;;		_eval_poly
 15438 ;; This function uses a non-reentrant model
 15439 ;;
 15440                           
 15441                           	psect	text93
 15442  003964                     __ptext93:
 15443                           	opt stack 0
 15444  003964                     ___wmul:
 15445                           	opt stack 20
 15446                           
 15447                           ; BSR set to: 0
 15448                           ;incstack = 0
 15449  003964  5018               	movf	___wmul@multiplier,w,c
 15450  003966  021A               	mulwf	___wmul@multiplicand,c
 15451  003968  CFF3 F01C          	movff	prodl,___wmul@product
 15452  00396C  CFF4 F01D          	movff	prodh,___wmul@product+1
 15453  003970  5018               	movf	___wmul@multiplier,w,c
 15454  003972  021B               	mulwf	___wmul@multiplicand+1,c
 15455  003974  50F3               	movf	prodl,w,c
 15456  003976  261D               	addwf	___wmul@product+1,f,c
 15457  003978  5019               	movf	___wmul@multiplier+1,w,c
 15458  00397A  021A               	mulwf	___wmul@multiplicand,c
 15459  00397C  50F3               	movf	prodl,w,c
 15460  00397E  261D               	addwf	___wmul@product+1,f,c
 15461  003980  C01C  F018         	movff	___wmul@product,?___wmul
 15462  003984  C01D  F019         	movff	___wmul@product+1,?___wmul+1
 15463  003988  0012               	return	
 15464  00398A                     __end_of___wmul:
 15465                           	opt stack 0
 15466                           tosu	equ	0xFFF
 15467                           tosh	equ	0xFFE
 15468                           tosl	equ	0xFFD
 15469                           pclath	equ	0xFFA
 15470                           tblptru	equ	0xFF8
 15471                           tblptrh	equ	0xFF7
 15472                           tblptrl	equ	0xFF6
 15473                           tablat	equ	0xFF5
 15474                           prodh	equ	0xFF4
 15475                           prodl	equ	0xFF3
 15476                           intcon	equ	0xFF2
 15477                           intcon2	equ	0xFF1
 15478                           postinc0	equ	0xFEE
 15479                           plusw0	equ	0xFEB
 15480                           wreg	equ	0xFE8
 15481                           indf1	equ	0xFE7
 15482                           postinc1	equ	0xFE6
 15483                           postdec1	equ	0xFE5
 15484                           fsr1h	equ	0xFE2
 15485                           fsr1l	equ	0xFE1
 15486                           indf2	equ	0xFDF
 15487                           postinc2	equ	0xFDE
 15488                           postdec2	equ	0xFDD
 15489                           plusw2	equ	0xFDB
 15490                           fsr2h	equ	0xFDA
 15491                           fsr2l	equ	0xFD9
 15492                           status	equ	0xFD8
 15493                           
 15494 ;; *************** function ___ftmul *****************
 15495 ;; Defined at:
 15496 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 15497 ;; Parameters:    Size  Location     Type
 15498 ;;  f1              3    9[BANK0 ] float 
 15499 ;;  f2              3   12[BANK0 ] float 
 15500 ;; Auto vars:     Size  Location     Type
 15501 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
 15502 ;;  sign            1   23[BANK0 ] unsigned char 
 15503 ;;  cntr            1   22[BANK0 ] unsigned char 
 15504 ;;  exp             1   18[BANK0 ] unsigned char 
 15505 ;; Return value:  Size  Location     Type
 15506 ;;                  3    9[BANK0 ] float 
 15507 ;; Registers used:
 15508 ;;		wreg, status,2, status,0, cstack
 15509 ;; Tracked objects:
 15510 ;;		On entry : 0/0
 15511 ;;		On exit  : 0/0
 15512 ;;		Unchanged: 0/0
 15513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15514 ;;      Params:         0       6       0       0       0       0       0
 15515 ;;      Locals:         0       6       0       0       0       0       0
 15516 ;;      Temps:          0       3       0       0       0       0       0
 15517 ;;      Totals:         0      15       0       0       0       0       0
 15518 ;;Total ram usage:       15 bytes
 15519 ;; Hardware stack levels used:    1
 15520 ;; Hardware stack levels required when called:    4
 15521 ;; This function calls:
 15522 ;;		___ftpack
 15523 ;; This function is called by:
 15524 ;;		_AdcConvert
 15525 ;;		_CheckFlashPrecentage
 15526 ;;		_pow
 15527 ;;		_exp
 15528 ;;		_log
 15529 ;;		_eval_poly
 15530 ;; This function uses a non-reentrant model
 15531 ;;
 15532                           
 15533                           	psect	text94
 15534  002028                     __ptext94:
 15535                           	opt stack 0
 15536  002028                     ___ftmul:
 15537                           	opt stack 19
 15538                           
 15539                           ;incstack = 0
 15540  002028  C06B  F06F         	movff	___ftmul@f1+2,??___ftmul
 15541  00202C  0100               	movlb	0	; () banked
 15542  00202E  6B70               	clrf	(??___ftmul+1)& (0+255),b
 15543  002030  6B71               	clrf	(??___ftmul+2)& (0+255),b
 15544  002032  356A               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 15545  002034  376F               	rlcf	??___ftmul& (0+255),f,b
 15546  002036  E301               	bnc	u6581
 15547  002038  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 15548  00203A                     u6581:
 15549  00203A  516F               	movf	??___ftmul& (0+255),w,b
 15550  00203C  6F72               	movwf	___ftmul@exp& (0+255),b
 15551  00203E  5172               	movf	___ftmul@exp& (0+255),w,b
 15552  002040  A4D8               	btfss	status,2,c
 15553  002042  D007               	goto	l1762
 15554                           
 15555                           ; BSR set to: 0
 15556  002044  0E00               	movlw	0
 15557  002046  6F69               	movwf	?___ftmul& (0+255),b
 15558  002048  0E00               	movlw	0
 15559  00204A  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 15560  00204C  0E00               	movlw	0
 15561  00204E  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 15562                           
 15563                           ; BSR set to: 0
 15564  002050  0012               	return	
 15565  002052                     l1762:
 15566                           
 15567                           ; BSR set to: 0
 15568                           
 15569                           ; BSR set to: 0
 15570  002052  C06E  F06F         	movff	___ftmul@f2+2,??___ftmul
 15571  002056  6B70               	clrf	(??___ftmul+1)& (0+255),b
 15572  002058  6B71               	clrf	(??___ftmul+2)& (0+255),b
 15573  00205A  356D               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 15574  00205C  376F               	rlcf	??___ftmul& (0+255),f,b
 15575  00205E  E301               	bnc	u6601
 15576  002060  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 15577  002062                     u6601:
 15578  002062  516F               	movf	??___ftmul& (0+255),w,b
 15579  002064  6F77               	movwf	___ftmul@sign& (0+255),b
 15580  002066  5177               	movf	___ftmul@sign& (0+255),w,b
 15581  002068  A4D8               	btfss	status,2,c
 15582  00206A  D007               	goto	l1764
 15583                           
 15584                           ; BSR set to: 0
 15585  00206C  0E00               	movlw	0
 15586  00206E  6F69               	movwf	?___ftmul& (0+255),b
 15587  002070  0E00               	movlw	0
 15588  002072  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 15589  002074  0E00               	movlw	0
 15590  002076  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 15591                           
 15592                           ; BSR set to: 0
 15593  002078  0012               	return	
 15594  00207A                     l1764:
 15595                           
 15596                           ; BSR set to: 0
 15597                           
 15598                           ; BSR set to: 0
 15599  00207A  5177               	movf	___ftmul@sign& (0+255),w,b
 15600  00207C  0F7B               	addlw	123
 15601  00207E  2772               	addwf	___ftmul@exp& (0+255),f,b
 15602                           
 15603                           ; BSR set to: 0
 15604  002080  C06B  F077         	movff	___ftmul@f1+2,___ftmul@sign
 15605  002084  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 15606  002086  1B77               	xorwf	___ftmul@sign& (0+255),f,b
 15607  002088  0E80               	movlw	128
 15608  00208A  1777               	andwf	___ftmul@sign& (0+255),f,b
 15609                           
 15610                           ; BSR set to: 0
 15611  00208C  8F6A               	bsf	(___ftmul@f1+1)& (0+255),7,b
 15612                           
 15613                           ; BSR set to: 0
 15614  00208E  8F6D               	bsf	(___ftmul@f2+1)& (0+255),7,b
 15615                           
 15616                           ; BSR set to: 0
 15617  002090  0EFF               	movlw	255
 15618  002092  176C               	andwf	___ftmul@f2& (0+255),f,b
 15619  002094  0EFF               	movlw	255
 15620  002096  176D               	andwf	(___ftmul@f2+1)& (0+255),f,b
 15621  002098  0E00               	movlw	0
 15622  00209A  176E               	andwf	(___ftmul@f2+2)& (0+255),f,b
 15623                           
 15624                           ; BSR set to: 0
 15625  00209C  0E00               	movlw	0
 15626  00209E  6F73               	movwf	___ftmul@f3_as_product& (0+255),b
 15627  0020A0  0E00               	movlw	0
 15628  0020A2  6F74               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 15629  0020A4  0E00               	movlw	0
 15630  0020A6  6F75               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 15631                           
 15632                           ; BSR set to: 0
 15633  0020A8  0E07               	movlw	7
 15634  0020AA  6F76               	movwf	___ftmul@cntr& (0+255),b
 15635  0020AC                     
 15636                           ; BSR set to: 0
 15637                           
 15638                           ; BSR set to: 0
 15639  0020AC  A169               	btfss	___ftmul@f1& (0+255),0,b
 15640  0020AE  D006               	goto	l1766
 15641                           
 15642                           ; BSR set to: 0
 15643  0020B0  516C               	movf	___ftmul@f2& (0+255),w,b
 15644  0020B2  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 15645  0020B4  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 15646  0020B6  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 15647  0020B8  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 15648  0020BA  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 15649  0020BC                     l1766:
 15650                           
 15651                           ; BSR set to: 0
 15652                           
 15653                           ; BSR set to: 0
 15654  0020BC  90D8               	bcf	status,0,c
 15655  0020BE  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 15656  0020C0  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 15657  0020C2  3369               	rrcf	___ftmul@f1& (0+255),f,b
 15658  0020C4  90D8               	bcf	status,0,c
 15659  0020C6  376C               	rlcf	___ftmul@f2& (0+255),f,b
 15660  0020C8  376D               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 15661  0020CA  376E               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 15662                           
 15663                           ; BSR set to: 0
 15664  0020CC  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 15665  0020CE  D7EE               	goto	l1765
 15666                           
 15667                           ; BSR set to: 0
 15668                           
 15669                           ; BSR set to: 0
 15670  0020D0  0E09               	movlw	9
 15671  0020D2  6F76               	movwf	___ftmul@cntr& (0+255),b
 15672  0020D4                     
 15673                           ; BSR set to: 0
 15674                           
 15675                           ; BSR set to: 0
 15676  0020D4  A169               	btfss	___ftmul@f1& (0+255),0,b
 15677  0020D6  D006               	goto	l1769
 15678                           
 15679                           ; BSR set to: 0
 15680  0020D8  516C               	movf	___ftmul@f2& (0+255),w,b
 15681  0020DA  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 15682  0020DC  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 15683  0020DE  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 15684  0020E0  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 15685  0020E2  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 15686  0020E4                     l1769:
 15687                           
 15688                           ; BSR set to: 0
 15689                           
 15690                           ; BSR set to: 0
 15691  0020E4  90D8               	bcf	status,0,c
 15692  0020E6  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 15693  0020E8  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 15694  0020EA  3369               	rrcf	___ftmul@f1& (0+255),f,b
 15695  0020EC  90D8               	bcf	status,0,c
 15696  0020EE  3375               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 15697  0020F0  3374               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 15698  0020F2  3373               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 15699                           
 15700                           ; BSR set to: 0
 15701  0020F4  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 15702  0020F6  D7EE               	goto	l1768
 15703                           
 15704                           ; BSR set to: 0
 15705                           
 15706                           ; BSR set to: 0
 15707  0020F8  C073  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
 15708  0020FC  C074  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 15709  002100  C075  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 15710  002104  C072  F01B         	movff	___ftmul@exp,___ftpack@exp
 15711  002108  C077  F01C         	movff	___ftmul@sign,___ftpack@sign
 15712  00210C  ECCA  F013         	call	___ftpack	;wreg free
 15713  002110  C018  F069         	movff	?___ftpack,?___ftmul
 15714  002114  C019  F06A         	movff	?___ftpack+1,?___ftmul+1
 15715  002118  C01A  F06B         	movff	?___ftpack+2,?___ftmul+2
 15716  00211C  0012               	return	
 15717  00211E                     __end_of___ftmul:
 15718                           	opt stack 0
 15719                           tosu	equ	0xFFF
 15720                           tosh	equ	0xFFE
 15721                           tosl	equ	0xFFD
 15722                           pclath	equ	0xFFA
 15723                           tblptru	equ	0xFF8
 15724                           tblptrh	equ	0xFF7
 15725                           tblptrl	equ	0xFF6
 15726                           tablat	equ	0xFF5
 15727                           prodh	equ	0xFF4
 15728                           prodl	equ	0xFF3
 15729                           intcon	equ	0xFF2
 15730                           intcon2	equ	0xFF1
 15731                           postinc0	equ	0xFEE
 15732                           plusw0	equ	0xFEB
 15733                           wreg	equ	0xFE8
 15734                           indf1	equ	0xFE7
 15735                           postinc1	equ	0xFE6
 15736                           postdec1	equ	0xFE5
 15737                           fsr1h	equ	0xFE2
 15738                           fsr1l	equ	0xFE1
 15739                           indf2	equ	0xFDF
 15740                           postinc2	equ	0xFDE
 15741                           postdec2	equ	0xFDD
 15742                           plusw2	equ	0xFDB
 15743                           fsr2h	equ	0xFDA
 15744                           fsr2l	equ	0xFD9
 15745                           status	equ	0xFD8
 15746                           
 15747 ;; *************** function ___ftsub *****************
 15748 ;; Defined at:
 15749 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
 15750 ;; Parameters:    Size  Location     Type
 15751 ;;  f1              3   36[BANK0 ] float 
 15752 ;;  f2              3   39[BANK0 ] float 
 15753 ;; Auto vars:     Size  Location     Type
 15754 ;;		None
 15755 ;; Return value:  Size  Location     Type
 15756 ;;                  3   36[BANK0 ] float 
 15757 ;; Registers used:
 15758 ;;		wreg, status,2, status,0, cstack
 15759 ;; Tracked objects:
 15760 ;;		On entry : 0/0
 15761 ;;		On exit  : 0/0
 15762 ;;		Unchanged: 0/0
 15763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15764 ;;      Params:         0       6       0       0       0       0       0
 15765 ;;      Locals:         0       0       0       0       0       0       0
 15766 ;;      Temps:          0       0       0       0       0       0       0
 15767 ;;      Totals:         0       6       0       0       0       0       0
 15768 ;;Total ram usage:        6 bytes
 15769 ;; Hardware stack levels used:    1
 15770 ;; Hardware stack levels required when called:    5
 15771 ;; This function calls:
 15772 ;;		___ftadd
 15773 ;; This function is called by:
 15774 ;;		_exp
 15775 ;; This function uses a non-reentrant model
 15776 ;;
 15777                           
 15778                           	psect	text95
 15779  0034F0                     __ptext95:
 15780                           	opt stack 0
 15781  0034F0                     ___ftsub:
 15782                           	opt stack 19
 15783                           
 15784                           ;incstack = 0
 15785  0034F0  0100               	movlb	0	; () banked
 15786  0034F2  5187               	movf	___ftsub@f2& (0+255),w,b
 15787  0034F4  1188               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 15788  0034F6  1189               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 15789  0034F8  B4D8               	btfsc	status,2,c
 15790  0034FA  D006               	goto	l1779
 15791                           
 15792                           ; BSR set to: 0
 15793  0034FC  0E00               	movlw	0
 15794  0034FE  1B87               	xorwf	___ftsub@f2& (0+255),f,b
 15795  003500  0E00               	movlw	0
 15796  003502  1B88               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 15797  003504  0E80               	movlw	128
 15798  003506  1B89               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 15799  003508                     l1779:
 15800                           
 15801                           ; BSR set to: 0
 15802                           
 15803                           ; BSR set to: 0
 15804  003508  C084  F078         	movff	___ftsub@f1,___ftadd@f1
 15805  00350C  C085  F079         	movff	___ftsub@f1+1,___ftadd@f1+1
 15806  003510  C086  F07A         	movff	___ftsub@f1+2,___ftadd@f1+2
 15807  003514  C087  F07B         	movff	___ftsub@f2,___ftadd@f2
 15808  003518  C088  F07C         	movff	___ftsub@f2+1,___ftadd@f2+1
 15809  00351C  C089  F07D         	movff	___ftsub@f2+2,___ftadd@f2+2
 15810  003520  ECE5  F009         	call	___ftadd	;wreg free
 15811  003524  C078  F084         	movff	?___ftadd,?___ftsub
 15812  003528  C079  F085         	movff	?___ftadd+1,?___ftsub+1
 15813  00352C  C07A  F086         	movff	?___ftadd+2,?___ftsub+2
 15814  003530  0012               	return	
 15815  003532                     __end_of___ftsub:
 15816                           	opt stack 0
 15817                           tosu	equ	0xFFF
 15818                           tosh	equ	0xFFE
 15819                           tosl	equ	0xFFD
 15820                           pclath	equ	0xFFA
 15821                           tblptru	equ	0xFF8
 15822                           tblptrh	equ	0xFF7
 15823                           tblptrl	equ	0xFF6
 15824                           tablat	equ	0xFF5
 15825                           prodh	equ	0xFF4
 15826                           prodl	equ	0xFF3
 15827                           intcon	equ	0xFF2
 15828                           intcon2	equ	0xFF1
 15829                           postinc0	equ	0xFEE
 15830                           plusw0	equ	0xFEB
 15831                           wreg	equ	0xFE8
 15832                           indf1	equ	0xFE7
 15833                           postinc1	equ	0xFE6
 15834                           postdec1	equ	0xFE5
 15835                           fsr1h	equ	0xFE2
 15836                           fsr1l	equ	0xFE1
 15837                           indf2	equ	0xFDF
 15838                           postinc2	equ	0xFDE
 15839                           postdec2	equ	0xFDD
 15840                           plusw2	equ	0xFDB
 15841                           fsr2h	equ	0xFDA
 15842                           fsr2l	equ	0xFD9
 15843                           status	equ	0xFD8
 15844                           
 15845 ;; *************** function ___ftadd *****************
 15846 ;; Defined at:
 15847 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 15848 ;; Parameters:    Size  Location     Type
 15849 ;;  f1              3   24[BANK0 ] float 
 15850 ;;  f2              3   27[BANK0 ] float 
 15851 ;; Auto vars:     Size  Location     Type
 15852 ;;  exp1            1   35[BANK0 ] unsigned char 
 15853 ;;  exp2            1   34[BANK0 ] unsigned char 
 15854 ;;  sign            1   33[BANK0 ] unsigned char 
 15855 ;; Return value:  Size  Location     Type
 15856 ;;                  3   24[BANK0 ] float 
 15857 ;; Registers used:
 15858 ;;		wreg, status,2, status,0, cstack
 15859 ;; Tracked objects:
 15860 ;;		On entry : 0/0
 15861 ;;		On exit  : 0/0
 15862 ;;		Unchanged: 0/0
 15863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15864 ;;      Params:         0       6       0       0       0       0       0
 15865 ;;      Locals:         0       3       0       0       0       0       0
 15866 ;;      Temps:          0       3       0       0       0       0       0
 15867 ;;      Totals:         0      12       0       0       0       0       0
 15868 ;;Total ram usage:       12 bytes
 15869 ;; Hardware stack levels used:    1
 15870 ;; Hardware stack levels required when called:    4
 15871 ;; This function calls:
 15872 ;;		___ftpack
 15873 ;; This function is called by:
 15874 ;;		___ftsub
 15875 ;;		_floor
 15876 ;;		_log
 15877 ;;		_eval_poly
 15878 ;; This function uses a non-reentrant model
 15879 ;;
 15880                           
 15881                           	psect	text96
 15882  0013CA                     __ptext96:
 15883                           	opt stack 0
 15884  0013CA                     ___ftadd:
 15885                           	opt stack 19
 15886                           
 15887                           ;incstack = 0
 15888  0013CA  C07A  F07E         	movff	___ftadd@f1+2,??___ftadd
 15889  0013CE  0100               	movlb	0	; () banked
 15890  0013D0  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 15891  0013D2  6B80               	clrf	(??___ftadd+2)& (0+255),b
 15892  0013D4  3579               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 15893  0013D6  377E               	rlcf	??___ftadd& (0+255),f,b
 15894  0013D8  E301               	bnc	u6371
 15895  0013DA  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 15896  0013DC                     u6371:
 15897  0013DC  517E               	movf	??___ftadd& (0+255),w,b
 15898  0013DE  6F83               	movwf	___ftadd@exp1& (0+255),b
 15899  0013E0  C07D  F07E         	movff	___ftadd@f2+2,??___ftadd
 15900  0013E4  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 15901  0013E6  6B80               	clrf	(??___ftadd+2)& (0+255),b
 15902  0013E8  357C               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 15903  0013EA  377E               	rlcf	??___ftadd& (0+255),f,b
 15904  0013EC  E301               	bnc	u6381
 15905  0013EE  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 15906  0013F0                     u6381:
 15907  0013F0  517E               	movf	??___ftadd& (0+255),w,b
 15908  0013F2  6F82               	movwf	___ftadd@exp2& (0+255),b
 15909                           
 15910                           ; BSR set to: 0
 15911  0013F4  5183               	movf	___ftadd@exp1& (0+255),w,b
 15912  0013F6  B4D8               	btfsc	status,2,c
 15913  0013F8  D00B               	goto	u6410
 15914                           
 15915                           ; BSR set to: 0
 15916  0013FA  5182               	movf	___ftadd@exp2& (0+255),w,b
 15917  0013FC  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 15918  0013FE  B0D8               	btfsc	status,0,c
 15919  001400  D00E               	goto	l1714
 15920                           
 15921                           ; BSR set to: 0
 15922  001402  5183               	movf	___ftadd@exp1& (0+255),w,b
 15923  001404  0800               	sublw	0
 15924  001406  2582               	addwf	___ftadd@exp2& (0+255),w,b
 15925  001408  6F7E               	movwf	??___ftadd& (0+255),b
 15926  00140A  0E18               	movlw	24
 15927  00140C  657E               	cpfsgt	??___ftadd& (0+255),b
 15928  00140E  D007               	goto	l1714
 15929  001410                     u6410:
 15930                           
 15931                           ; BSR set to: 0
 15932  001410  C07B  F078         	movff	___ftadd@f2,?___ftadd
 15933  001414  C07C  F079         	movff	___ftadd@f2+1,?___ftadd+1
 15934  001418  C07D  F07A         	movff	___ftadd@f2+2,?___ftadd+2
 15935  00141C  0012               	return	
 15936  00141E                     l1714:
 15937                           
 15938                           ; BSR set to: 0
 15939                           
 15940                           ; BSR set to: 0
 15941  00141E  5182               	movf	___ftadd@exp2& (0+255),w,b
 15942  001420  B4D8               	btfsc	status,2,c
 15943  001422  D00B               	goto	u6440
 15944                           
 15945                           ; BSR set to: 0
 15946  001424  5183               	movf	___ftadd@exp1& (0+255),w,b
 15947  001426  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 15948  001428  B0D8               	btfsc	status,0,c
 15949  00142A  D00E               	goto	l1718
 15950                           
 15951                           ; BSR set to: 0
 15952  00142C  5182               	movf	___ftadd@exp2& (0+255),w,b
 15953  00142E  0800               	sublw	0
 15954  001430  2583               	addwf	___ftadd@exp1& (0+255),w,b
 15955  001432  6F7E               	movwf	??___ftadd& (0+255),b
 15956  001434  0E18               	movlw	24
 15957  001436  657E               	cpfsgt	??___ftadd& (0+255),b
 15958  001438  D007               	goto	l1718
 15959  00143A                     u6440:
 15960                           
 15961                           ; BSR set to: 0
 15962  00143A  C078  F078         	movff	___ftadd@f1,?___ftadd
 15963  00143E  C079  F079         	movff	___ftadd@f1+1,?___ftadd+1
 15964  001442  C07A  F07A         	movff	___ftadd@f1+2,?___ftadd+2
 15965  001446  0012               	return	
 15966  001448                     l1718:
 15967                           
 15968                           ; BSR set to: 0
 15969                           
 15970                           ; BSR set to: 0
 15971  001448  0E06               	movlw	6
 15972  00144A  6F81               	movwf	___ftadd@sign& (0+255),b
 15973                           
 15974                           ; BSR set to: 0
 15975  00144C  BF7A               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 15976                           
 15977                           ; BSR set to: 0
 15978  00144E  8F81               	bsf	___ftadd@sign& (0+255),7,b
 15979                           
 15980                           ; BSR set to: 0
 15981                           
 15982                           ; BSR set to: 0
 15983  001450  BF7D               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 15984                           
 15985                           ; BSR set to: 0
 15986  001452  8D81               	bsf	___ftadd@sign& (0+255),6,b
 15987                           
 15988                           ; BSR set to: 0
 15989  001454  8F79               	bsf	(___ftadd@f1+1)& (0+255),7,b
 15990                           
 15991                           ; BSR set to: 0
 15992  001456  0EFF               	movlw	255
 15993  001458  1778               	andwf	___ftadd@f1& (0+255),f,b
 15994  00145A  0EFF               	movlw	255
 15995  00145C  1779               	andwf	(___ftadd@f1+1)& (0+255),f,b
 15996  00145E  0E00               	movlw	0
 15997  001460  177A               	andwf	(___ftadd@f1+2)& (0+255),f,b
 15998  001462  8F7C               	bsf	(___ftadd@f2+1)& (0+255),7,b
 15999                           
 16000                           ; BSR set to: 0
 16001  001464  0EFF               	movlw	255
 16002  001466  177B               	andwf	___ftadd@f2& (0+255),f,b
 16003  001468  0EFF               	movlw	255
 16004  00146A  177C               	andwf	(___ftadd@f2+1)& (0+255),f,b
 16005  00146C  0E00               	movlw	0
 16006  00146E  177D               	andwf	(___ftadd@f2+2)& (0+255),f,b
 16007                           
 16008                           ; BSR set to: 0
 16009  001470  5182               	movf	___ftadd@exp2& (0+255),w,b
 16010  001472  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 16011  001474  B0D8               	btfsc	status,0,c
 16012  001476  D01B               	goto	l1723
 16013  001478                     u6470:
 16014                           
 16015                           ; BSR set to: 0
 16016                           
 16017                           ; BSR set to: 0
 16018  001478  90D8               	bcf	status,0,c
 16019  00147A  377B               	rlcf	___ftadd@f2& (0+255),f,b
 16020  00147C  377C               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 16021  00147E  377D               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 16022  001480  0782               	decf	___ftadd@exp2& (0+255),f,b
 16023                           
 16024                           ; BSR set to: 0
 16025  001482  5183               	movf	___ftadd@exp1& (0+255),w,b
 16026  001484  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 16027  001486  B4D8               	btfsc	status,2,c
 16028  001488  D00D               	goto	l1728
 16029                           
 16030                           ; BSR set to: 0
 16031  00148A  0781               	decf	___ftadd@sign& (0+255),f,b
 16032  00148C  C081  F07E         	movff	___ftadd@sign,??___ftadd
 16033  001490  0E07               	movlw	7
 16034  001492  177E               	andwf	??___ftadd& (0+255),f,b
 16035  001494  B4D8               	btfsc	status,2,c
 16036  001496  D006               	goto	l1728
 16037  001498  D7EF               	goto	u6470
 16038  00149A                     
 16039                           ; BSR set to: 0
 16040                           
 16041                           ; BSR set to: 0
 16042  00149A  90D8               	bcf	status,0,c
 16043  00149C  337A               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 16044  00149E  3379               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 16045  0014A0  3378               	rrcf	___ftadd@f1& (0+255),f,b
 16046  0014A2  2B83               	incf	___ftadd@exp1& (0+255),f,b
 16047  0014A4                     l1728:
 16048                           
 16049                           ; BSR set to: 0
 16050                           
 16051                           ; BSR set to: 0
 16052  0014A4  5182               	movf	___ftadd@exp2& (0+255),w,b
 16053  0014A6  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 16054  0014A8  B4D8               	btfsc	status,2,c
 16055  0014AA  D01F               	goto	u6540
 16056  0014AC  D7F6               	goto	l1729
 16057  0014AE                     l1723:
 16058                           
 16059                           ; BSR set to: 0
 16060                           
 16061                           ; BSR set to: 0
 16062  0014AE  5183               	movf	___ftadd@exp1& (0+255),w,b
 16063  0014B0  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 16064  0014B2  B0D8               	btfsc	status,0,c
 16065  0014B4  D01A               	goto	u6540
 16066  0014B6                     u6510:
 16067                           
 16068                           ; BSR set to: 0
 16069                           
 16070                           ; BSR set to: 0
 16071  0014B6  90D8               	bcf	status,0,c
 16072  0014B8  3778               	rlcf	___ftadd@f1& (0+255),f,b
 16073  0014BA  3779               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 16074  0014BC  377A               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 16075  0014BE  0783               	decf	___ftadd@exp1& (0+255),f,b
 16076                           
 16077                           ; BSR set to: 0
 16078  0014C0  5183               	movf	___ftadd@exp1& (0+255),w,b
 16079  0014C2  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 16080  0014C4  B4D8               	btfsc	status,2,c
 16081  0014C6  D00D               	goto	l1737
 16082                           
 16083                           ; BSR set to: 0
 16084  0014C8  0781               	decf	___ftadd@sign& (0+255),f,b
 16085  0014CA  C081  F07E         	movff	___ftadd@sign,??___ftadd
 16086  0014CE  0E07               	movlw	7
 16087  0014D0  177E               	andwf	??___ftadd& (0+255),f,b
 16088  0014D2  B4D8               	btfsc	status,2,c
 16089  0014D4  D006               	goto	l1737
 16090  0014D6  D7EF               	goto	u6510
 16091  0014D8                     
 16092                           ; BSR set to: 0
 16093                           
 16094                           ; BSR set to: 0
 16095  0014D8  90D8               	bcf	status,0,c
 16096  0014DA  337D               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 16097  0014DC  337C               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 16098  0014DE  337B               	rrcf	___ftadd@f2& (0+255),f,b
 16099  0014E0  2B82               	incf	___ftadd@exp2& (0+255),f,b
 16100  0014E2                     l1737:
 16101                           
 16102                           ; BSR set to: 0
 16103                           
 16104                           ; BSR set to: 0
 16105  0014E2  5182               	movf	___ftadd@exp2& (0+255),w,b
 16106  0014E4  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 16107  0014E6  A4D8               	btfss	status,2,c
 16108  0014E8  D7F7               	goto	l1738
 16109  0014EA                     u6540:
 16110                           
 16111                           ; BSR set to: 0
 16112                           
 16113                           ; BSR set to: 0
 16114                           
 16115                           ; BSR set to: 0
 16116  0014EA  AF81               	btfss	___ftadd@sign& (0+255),7,b
 16117  0014EC  D00C               	goto	l1740
 16118                           
 16119                           ; BSR set to: 0
 16120  0014EE  0EFF               	movlw	255
 16121  0014F0  1B78               	xorwf	___ftadd@f1& (0+255),f,b
 16122  0014F2  0EFF               	movlw	255
 16123  0014F4  1B79               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 16124  0014F6  0EFF               	movlw	255
 16125  0014F8  1B7A               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 16126  0014FA  0E01               	movlw	1
 16127  0014FC  2778               	addwf	___ftadd@f1& (0+255),f,b
 16128  0014FE  0E00               	movlw	0
 16129  001500  2379               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 16130  001502  0E00               	movlw	0
 16131  001504  237A               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 16132  001506                     l1740:
 16133                           
 16134                           ; BSR set to: 0
 16135  001506  AD81               	btfss	___ftadd@sign& (0+255),6,b
 16136  001508  D00C               	goto	l1741
 16137                           
 16138                           ; BSR set to: 0
 16139  00150A  0EFF               	movlw	255
 16140  00150C  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 16141  00150E  0EFF               	movlw	255
 16142  001510  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 16143  001512  0EFF               	movlw	255
 16144  001514  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 16145  001516  0E01               	movlw	1
 16146  001518  277B               	addwf	___ftadd@f2& (0+255),f,b
 16147  00151A  0E00               	movlw	0
 16148  00151C  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 16149  00151E  0E00               	movlw	0
 16150  001520  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 16151  001522                     l1741:
 16152                           
 16153                           ; BSR set to: 0
 16154                           
 16155                           ; BSR set to: 0
 16156  001522  0E00               	movlw	0
 16157  001524  6F81               	movwf	___ftadd@sign& (0+255),b
 16158                           
 16159                           ; BSR set to: 0
 16160  001526  5178               	movf	___ftadd@f1& (0+255),w,b
 16161  001528  277B               	addwf	___ftadd@f2& (0+255),f,b
 16162  00152A  5179               	movf	(___ftadd@f1+1)& (0+255),w,b
 16163  00152C  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 16164  00152E  517A               	movf	(___ftadd@f1+2)& (0+255),w,b
 16165  001530  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 16166                           
 16167                           ; BSR set to: 0
 16168  001532  AF7D               	btfss	(___ftadd@f2+2)& (0+255),7,b
 16169  001534  D00E               	goto	l1742
 16170                           
 16171                           ; BSR set to: 0
 16172  001536  0EFF               	movlw	255
 16173  001538  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 16174  00153A  0EFF               	movlw	255
 16175  00153C  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 16176  00153E  0EFF               	movlw	255
 16177  001540  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 16178  001542  0E01               	movlw	1
 16179  001544  277B               	addwf	___ftadd@f2& (0+255),f,b
 16180  001546  0E00               	movlw	0
 16181  001548  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 16182  00154A  0E00               	movlw	0
 16183  00154C  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 16184                           
 16185                           ; BSR set to: 0
 16186  00154E  0E01               	movlw	1
 16187  001550  6F81               	movwf	___ftadd@sign& (0+255),b
 16188  001552                     l1742:
 16189                           
 16190                           ; BSR set to: 0
 16191                           
 16192                           ; BSR set to: 0
 16193  001552  C07B  F018         	movff	___ftadd@f2,___ftpack@arg
 16194  001556  C07C  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
 16195  00155A  C07D  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
 16196  00155E  C083  F01B         	movff	___ftadd@exp1,___ftpack@exp
 16197  001562  C081  F01C         	movff	___ftadd@sign,___ftpack@sign
 16198  001566  ECCA  F013         	call	___ftpack	;wreg free
 16199  00156A  C018  F078         	movff	?___ftpack,?___ftadd
 16200  00156E  C019  F079         	movff	?___ftpack+1,?___ftadd+1
 16201  001572  C01A  F07A         	movff	?___ftpack+2,?___ftadd+2
 16202  001576  0012               	return	
 16203  001578                     __end_of___ftadd:
 16204                           	opt stack 0
 16205                           tosu	equ	0xFFF
 16206                           tosh	equ	0xFFE
 16207                           tosl	equ	0xFFD
 16208                           pclath	equ	0xFFA
 16209                           tblptru	equ	0xFF8
 16210                           tblptrh	equ	0xFF7
 16211                           tblptrl	equ	0xFF6
 16212                           tablat	equ	0xFF5
 16213                           prodh	equ	0xFF4
 16214                           prodl	equ	0xFF3
 16215                           intcon	equ	0xFF2
 16216                           intcon2	equ	0xFF1
 16217                           postinc0	equ	0xFEE
 16218                           plusw0	equ	0xFEB
 16219                           wreg	equ	0xFE8
 16220                           indf1	equ	0xFE7
 16221                           postinc1	equ	0xFE6
 16222                           postdec1	equ	0xFE5
 16223                           fsr1h	equ	0xFE2
 16224                           fsr1l	equ	0xFE1
 16225                           indf2	equ	0xFDF
 16226                           postinc2	equ	0xFDE
 16227                           postdec2	equ	0xFDD
 16228                           plusw2	equ	0xFDB
 16229                           fsr2h	equ	0xFDA
 16230                           fsr2l	equ	0xFD9
 16231                           status	equ	0xFD8
 16232                           
 16233 ;; *************** function ___ftneg *****************
 16234 ;; Defined at:
 16235 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 16236 ;; Parameters:    Size  Location     Type
 16237 ;;  f1              3   23[COMRAM] float 
 16238 ;; Auto vars:     Size  Location     Type
 16239 ;;		None
 16240 ;; Return value:  Size  Location     Type
 16241 ;;                  3   23[COMRAM] float 
 16242 ;; Registers used:
 16243 ;;		wreg, status,2, status,0
 16244 ;; Tracked objects:
 16245 ;;		On entry : 0/0
 16246 ;;		On exit  : 0/0
 16247 ;;		Unchanged: 0/0
 16248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16249 ;;      Params:         3       0       0       0       0       0       0
 16250 ;;      Locals:         0       0       0       0       0       0       0
 16251 ;;      Temps:          0       0       0       0       0       0       0
 16252 ;;      Totals:         3       0       0       0       0       0       0
 16253 ;;Total ram usage:        3 bytes
 16254 ;; Hardware stack levels used:    1
 16255 ;; Hardware stack levels required when called:    3
 16256 ;; This function calls:
 16257 ;;		Nothing
 16258 ;; This function is called by:
 16259 ;;		_pow
 16260 ;;		_exp
 16261 ;; This function uses a non-reentrant model
 16262 ;;
 16263                           
 16264                           	psect	text97
 16265  0039AE                     __ptext97:
 16266                           	opt stack 0
 16267  0039AE                     ___ftneg:
 16268                           	opt stack 21
 16269                           
 16270                           ;incstack = 0
 16271  0039AE  5018               	movf	___ftneg@f1,w,c
 16272  0039B0  1019               	iorwf	___ftneg@f1+1,w,c
 16273  0039B2  101A               	iorwf	___ftneg@f1+2,w,c
 16274  0039B4  B4D8               	btfsc	status,2,c
 16275  0039B6  D006               	goto	l1773
 16276  0039B8  0E00               	movlw	0
 16277  0039BA  1A18               	xorwf	___ftneg@f1,f,c
 16278  0039BC  0E00               	movlw	0
 16279  0039BE  1A19               	xorwf	___ftneg@f1+1,f,c
 16280  0039C0  0E80               	movlw	128
 16281  0039C2  1A1A               	xorwf	___ftneg@f1+2,f,c
 16282  0039C4                     l1773:
 16283  0039C4  C018  F018         	movff	___ftneg@f1,?___ftneg
 16284  0039C8  C019  F019         	movff	___ftneg@f1+1,?___ftneg+1
 16285  0039CC  C01A  F01A         	movff	___ftneg@f1+2,?___ftneg+2
 16286  0039D0  0012               	return		;funcret
 16287  0039D2                     __end_of___ftneg:
 16288                           	opt stack 0
 16289                           tosu	equ	0xFFF
 16290                           tosh	equ	0xFFE
 16291                           tosl	equ	0xFFD
 16292                           pclath	equ	0xFFA
 16293                           tblptru	equ	0xFF8
 16294                           tblptrh	equ	0xFF7
 16295                           tblptrl	equ	0xFF6
 16296                           tablat	equ	0xFF5
 16297                           prodh	equ	0xFF4
 16298                           prodl	equ	0xFF3
 16299                           intcon	equ	0xFF2
 16300                           intcon2	equ	0xFF1
 16301                           postinc0	equ	0xFEE
 16302                           plusw0	equ	0xFEB
 16303                           wreg	equ	0xFE8
 16304                           indf1	equ	0xFE7
 16305                           postinc1	equ	0xFE6
 16306                           postdec1	equ	0xFE5
 16307                           fsr1h	equ	0xFE2
 16308                           fsr1l	equ	0xFE1
 16309                           indf2	equ	0xFDF
 16310                           postinc2	equ	0xFDE
 16311                           postdec2	equ	0xFDD
 16312                           plusw2	equ	0xFDB
 16313                           fsr2h	equ	0xFDA
 16314                           fsr2l	equ	0xFD9
 16315                           status	equ	0xFD8
 16316                           
 16317 ;; *************** function ___ftdiv *****************
 16318 ;; Defined at:
 16319 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 16320 ;; Parameters:    Size  Location     Type
 16321 ;;  f1              3   40[COMRAM] float 
 16322 ;;  f2              3   43[COMRAM] float 
 16323 ;; Auto vars:     Size  Location     Type
 16324 ;;  f3              3    4[BANK0 ] float 
 16325 ;;  sign            1    8[BANK0 ] unsigned char 
 16326 ;;  exp             1    7[BANK0 ] unsigned char 
 16327 ;;  cntr            1    3[BANK0 ] unsigned char 
 16328 ;; Return value:  Size  Location     Type
 16329 ;;                  3   40[COMRAM] float 
 16330 ;; Registers used:
 16331 ;;		wreg, status,2, status,0, cstack
 16332 ;; Tracked objects:
 16333 ;;		On entry : 0/0
 16334 ;;		On exit  : 0/0
 16335 ;;		Unchanged: 0/0
 16336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16337 ;;      Params:         6       0       0       0       0       0       0
 16338 ;;      Locals:         0       6       0       0       0       0       0
 16339 ;;      Temps:          0       3       0       0       0       0       0
 16340 ;;      Totals:         6       9       0       0       0       0       0
 16341 ;;Total ram usage:       15 bytes
 16342 ;; Hardware stack levels used:    1
 16343 ;; Hardware stack levels required when called:    4
 16344 ;; This function calls:
 16345 ;;		___ftpack
 16346 ;; This function is called by:
 16347 ;;		_AdcConvert
 16348 ;;		_CheckFlashPrecentage
 16349 ;;		_exp
 16350 ;; This function uses a non-reentrant model
 16351 ;;
 16352                           
 16353                           	psect	text98
 16354  00211E                     __ptext98:
 16355                           	opt stack 0
 16356  00211E                     ___ftdiv:
 16357                           	opt stack 20
 16358                           
 16359                           ;incstack = 0
 16360  00211E  C02B  F060         	movff	___ftdiv@f1+2,??___ftdiv
 16361  002122  0100               	movlb	0	; () banked
 16362  002124  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 16363  002126  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 16364  002128  342A               	rlcf	___ftdiv@f1+1,w,c
 16365  00212A  3760               	rlcf	??___ftdiv& (0+255),f,b
 16366  00212C  E301               	bnc	u6781
 16367  00212E  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 16368  002130                     u6781:
 16369  002130  5160               	movf	??___ftdiv& (0+255),w,b
 16370  002132  6F67               	movwf	___ftdiv@exp& (0+255),b
 16371  002134  5167               	movf	___ftdiv@exp& (0+255),w,b
 16372  002136  A4D8               	btfss	status,2,c
 16373  002138  D007               	goto	l1747
 16374                           
 16375                           ; BSR set to: 0
 16376  00213A  0E00               	movlw	0
 16377  00213C  6E29               	movwf	?___ftdiv,c
 16378  00213E  0E00               	movlw	0
 16379  002140  6E2A               	movwf	?___ftdiv+1,c
 16380  002142  0E00               	movlw	0
 16381  002144  6E2B               	movwf	?___ftdiv+2,c
 16382                           
 16383                           ; BSR set to: 0
 16384  002146  0012               	return	
 16385  002148                     l1747:
 16386                           
 16387                           ; BSR set to: 0
 16388                           
 16389                           ; BSR set to: 0
 16390  002148  C02E  F060         	movff	___ftdiv@f2+2,??___ftdiv
 16391  00214C  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 16392  00214E  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 16393  002150  342D               	rlcf	___ftdiv@f2+1,w,c
 16394  002152  3760               	rlcf	??___ftdiv& (0+255),f,b
 16395  002154  E301               	bnc	u6801
 16396  002156  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 16397  002158                     u6801:
 16398  002158  5160               	movf	??___ftdiv& (0+255),w,b
 16399  00215A  6F68               	movwf	___ftdiv@sign& (0+255),b
 16400  00215C  5168               	movf	___ftdiv@sign& (0+255),w,b
 16401  00215E  A4D8               	btfss	status,2,c
 16402  002160  D007               	goto	l1749
 16403                           
 16404                           ; BSR set to: 0
 16405  002162  0E00               	movlw	0
 16406  002164  6E29               	movwf	?___ftdiv,c
 16407  002166  0E00               	movlw	0
 16408  002168  6E2A               	movwf	?___ftdiv+1,c
 16409  00216A  0E00               	movlw	0
 16410  00216C  6E2B               	movwf	?___ftdiv+2,c
 16411                           
 16412                           ; BSR set to: 0
 16413  00216E  0012               	return	
 16414  002170                     l1749:
 16415                           
 16416                           ; BSR set to: 0
 16417                           
 16418                           ; BSR set to: 0
 16419  002170  0E00               	movlw	0
 16420  002172  6F64               	movwf	___ftdiv@f3& (0+255),b
 16421  002174  0E00               	movlw	0
 16422  002176  6F65               	movwf	(___ftdiv@f3+1)& (0+255),b
 16423  002178  0E00               	movlw	0
 16424  00217A  6F66               	movwf	(___ftdiv@f3+2)& (0+255),b
 16425                           
 16426                           ; BSR set to: 0
 16427  00217C  5168               	movf	___ftdiv@sign& (0+255),w,b
 16428  00217E  0F89               	addlw	137
 16429  002180  5F67               	subwf	___ftdiv@exp& (0+255),f,b
 16430                           
 16431                           ; BSR set to: 0
 16432  002182  C02B  F068         	movff	___ftdiv@f1+2,___ftdiv@sign
 16433                           
 16434                           ; BSR set to: 0
 16435  002186  502E               	movf	___ftdiv@f2+2,w,c
 16436  002188  1B68               	xorwf	___ftdiv@sign& (0+255),f,b
 16437                           
 16438                           ; BSR set to: 0
 16439  00218A  0E80               	movlw	128
 16440  00218C  1768               	andwf	___ftdiv@sign& (0+255),f,b
 16441                           
 16442                           ; BSR set to: 0
 16443  00218E  8E2A               	bsf	___ftdiv@f1+1,7,c
 16444                           
 16445                           ; BSR set to: 0
 16446  002190  0EFF               	movlw	255
 16447  002192  1629               	andwf	___ftdiv@f1,f,c
 16448  002194  0EFF               	movlw	255
 16449  002196  162A               	andwf	___ftdiv@f1+1,f,c
 16450  002198  0E00               	movlw	0
 16451  00219A  162B               	andwf	___ftdiv@f1+2,f,c
 16452                           
 16453                           ; BSR set to: 0
 16454  00219C  8E2D               	bsf	___ftdiv@f2+1,7,c
 16455                           
 16456                           ; BSR set to: 0
 16457  00219E  0EFF               	movlw	255
 16458  0021A0  162C               	andwf	___ftdiv@f2,f,c
 16459  0021A2  0EFF               	movlw	255
 16460  0021A4  162D               	andwf	___ftdiv@f2+1,f,c
 16461  0021A6  0E00               	movlw	0
 16462  0021A8  162E               	andwf	___ftdiv@f2+2,f,c
 16463                           
 16464                           ; BSR set to: 0
 16465  0021AA  0E18               	movlw	24
 16466  0021AC  6F63               	movwf	___ftdiv@cntr& (0+255),b
 16467  0021AE                     
 16468                           ; BSR set to: 0
 16469                           
 16470                           ; BSR set to: 0
 16471  0021AE  90D8               	bcf	status,0,c
 16472  0021B0  3764               	rlcf	___ftdiv@f3& (0+255),f,b
 16473  0021B2  3765               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 16474  0021B4  3766               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 16475                           
 16476                           ; BSR set to: 0
 16477  0021B6  502C               	movf	___ftdiv@f2,w,c
 16478  0021B8  5C29               	subwf	___ftdiv@f1,w,c
 16479  0021BA  502D               	movf	___ftdiv@f2+1,w,c
 16480  0021BC  582A               	subwfb	___ftdiv@f1+1,w,c
 16481  0021BE  502E               	movf	___ftdiv@f2+2,w,c
 16482  0021C0  582B               	subwfb	___ftdiv@f1+2,w,c
 16483  0021C2  A0D8               	btfss	status,0,c
 16484  0021C4  D007               	goto	l1751
 16485                           
 16486                           ; BSR set to: 0
 16487  0021C6  502C               	movf	___ftdiv@f2,w,c
 16488  0021C8  5E29               	subwf	___ftdiv@f1,f,c
 16489  0021CA  502D               	movf	___ftdiv@f2+1,w,c
 16490  0021CC  5A2A               	subwfb	___ftdiv@f1+1,f,c
 16491  0021CE  502E               	movf	___ftdiv@f2+2,w,c
 16492  0021D0  5A2B               	subwfb	___ftdiv@f1+2,f,c
 16493                           
 16494                           ; BSR set to: 0
 16495  0021D2  8164               	bsf	___ftdiv@f3& (0+255),0,b
 16496  0021D4                     l1751:
 16497                           
 16498                           ; BSR set to: 0
 16499  0021D4  90D8               	bcf	status,0,c
 16500  0021D6  3629               	rlcf	___ftdiv@f1,f,c
 16501  0021D8  362A               	rlcf	___ftdiv@f1+1,f,c
 16502  0021DA  362B               	rlcf	___ftdiv@f1+2,f,c
 16503                           
 16504                           ; BSR set to: 0
 16505  0021DC  2F63               	decfsz	___ftdiv@cntr& (0+255),f,b
 16506  0021DE  D7E7               	goto	l1750
 16507                           
 16508                           ; BSR set to: 0
 16509                           
 16510                           ; BSR set to: 0
 16511  0021E0  C064  F018         	movff	___ftdiv@f3,___ftpack@arg
 16512  0021E4  C065  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
 16513  0021E8  C066  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
 16514  0021EC  C067  F01B         	movff	___ftdiv@exp,___ftpack@exp
 16515  0021F0  C068  F01C         	movff	___ftdiv@sign,___ftpack@sign
 16516  0021F4  ECCA  F013         	call	___ftpack	;wreg free
 16517  0021F8  C018  F029         	movff	?___ftpack,?___ftdiv
 16518  0021FC  C019  F02A         	movff	?___ftpack+1,?___ftdiv+1
 16519  002200  C01A  F02B         	movff	?___ftpack+2,?___ftdiv+2
 16520  002204  0012               	return	
 16521  002206                     __end_of___ftdiv:
 16522                           	opt stack 0
 16523                           tosu	equ	0xFFF
 16524                           tosh	equ	0xFFE
 16525                           tosl	equ	0xFFD
 16526                           pclath	equ	0xFFA
 16527                           tblptru	equ	0xFF8
 16528                           tblptrh	equ	0xFF7
 16529                           tblptrl	equ	0xFF6
 16530                           tablat	equ	0xFF5
 16531                           prodh	equ	0xFF4
 16532                           prodl	equ	0xFF3
 16533                           intcon	equ	0xFF2
 16534                           intcon2	equ	0xFF1
 16535                           postinc0	equ	0xFEE
 16536                           plusw0	equ	0xFEB
 16537                           wreg	equ	0xFE8
 16538                           indf1	equ	0xFE7
 16539                           postinc1	equ	0xFE6
 16540                           postdec1	equ	0xFE5
 16541                           fsr1h	equ	0xFE2
 16542                           fsr1l	equ	0xFE1
 16543                           indf2	equ	0xFDF
 16544                           postinc2	equ	0xFDE
 16545                           postdec2	equ	0xFDD
 16546                           plusw2	equ	0xFDB
 16547                           fsr2h	equ	0xFDA
 16548                           fsr2l	equ	0xFD9
 16549                           status	equ	0xFD8
 16550                           
 16551 ;; *************** function ___awtoft *****************
 16552 ;; Defined at:
 16553 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 16554 ;; Parameters:    Size  Location     Type
 16555 ;;  c               2   31[COMRAM] int 
 16556 ;; Auto vars:     Size  Location     Type
 16557 ;;  sign            1   34[COMRAM] unsigned char 
 16558 ;; Return value:  Size  Location     Type
 16559 ;;                  3   31[COMRAM] float 
 16560 ;; Registers used:
 16561 ;;		wreg, status,2, status,0, cstack
 16562 ;; Tracked objects:
 16563 ;;		On entry : 0/0
 16564 ;;		On exit  : 0/0
 16565 ;;		Unchanged: 0/0
 16566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16567 ;;      Params:         3       0       0       0       0       0       0
 16568 ;;      Locals:         1       0       0       0       0       0       0
 16569 ;;      Temps:          0       0       0       0       0       0       0
 16570 ;;      Totals:         4       0       0       0       0       0       0
 16571 ;;Total ram usage:        4 bytes
 16572 ;; Hardware stack levels used:    1
 16573 ;; Hardware stack levels required when called:    4
 16574 ;; This function calls:
 16575 ;;		___ftpack
 16576 ;; This function is called by:
 16577 ;;		_ReadIntFromEeprom
 16578 ;;		_exp
 16579 ;;		_log
 16580 ;; This function uses a non-reentrant model
 16581 ;;
 16582                           
 16583                           	psect	text99
 16584  003698                     __ptext99:
 16585                           	opt stack 0
 16586  003698                     ___awtoft:
 16587                           	opt stack 20
 16588                           
 16589                           ;incstack = 0
 16590  003698  0E00               	movlw	0
 16591  00369A  6E23               	movwf	___awtoft@sign,c
 16592  00369C  AE21               	btfss	___awtoft@c+1,7,c
 16593  00369E  D006               	goto	l1664
 16594  0036A0  6C20               	negf	___awtoft@c,c
 16595  0036A2  1E21               	comf	___awtoft@c+1,f,c
 16596  0036A4  B0D8               	btfsc	status,0,c
 16597  0036A6  2A21               	incf	___awtoft@c+1,f,c
 16598  0036A8  0E01               	movlw	1
 16599  0036AA  6E23               	movwf	___awtoft@sign,c
 16600  0036AC                     l1664:
 16601  0036AC  C020  F018         	movff	___awtoft@c,___ftpack@arg
 16602  0036B0  C021  F019         	movff	___awtoft@c+1,___ftpack@arg+1
 16603  0036B4  6A1A               	clrf	___ftpack@arg+2,c
 16604  0036B6  0E8E               	movlw	142
 16605  0036B8  6E1B               	movwf	___ftpack@exp,c
 16606  0036BA  C023  F01C         	movff	___awtoft@sign,___ftpack@sign
 16607  0036BE  ECCA  F013         	call	___ftpack	;wreg free
 16608  0036C2  C018  F020         	movff	?___ftpack,?___awtoft
 16609  0036C6  C019  F021         	movff	?___ftpack+1,?___awtoft+1
 16610  0036CA  C01A  F022         	movff	?___ftpack+2,?___awtoft+2
 16611  0036CE  0012               	return	
 16612  0036D0                     __end_of___awtoft:
 16613                           	opt stack 0
 16614                           tosu	equ	0xFFF
 16615                           tosh	equ	0xFFE
 16616                           tosl	equ	0xFFD
 16617                           pclath	equ	0xFFA
 16618                           tblptru	equ	0xFF8
 16619                           tblptrh	equ	0xFF7
 16620                           tblptrl	equ	0xFF6
 16621                           tablat	equ	0xFF5
 16622                           prodh	equ	0xFF4
 16623                           prodl	equ	0xFF3
 16624                           intcon	equ	0xFF2
 16625                           intcon2	equ	0xFF1
 16626                           postinc0	equ	0xFEE
 16627                           plusw0	equ	0xFEB
 16628                           wreg	equ	0xFE8
 16629                           indf1	equ	0xFE7
 16630                           postinc1	equ	0xFE6
 16631                           postdec1	equ	0xFE5
 16632                           fsr1h	equ	0xFE2
 16633                           fsr1l	equ	0xFE1
 16634                           indf2	equ	0xFDF
 16635                           postinc2	equ	0xFDE
 16636                           postdec2	equ	0xFDD
 16637                           plusw2	equ	0xFDB
 16638                           fsr2h	equ	0xFDA
 16639                           fsr2l	equ	0xFD9
 16640                           status	equ	0xFD8
 16641                           
 16642 ;; *************** function ___lltoft *****************
 16643 ;; Defined at:
 16644 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
 16645 ;; Parameters:    Size  Location     Type
 16646 ;;  c               4   31[COMRAM] unsigned long 
 16647 ;; Auto vars:     Size  Location     Type
 16648 ;;  exp             1   39[COMRAM] unsigned char 
 16649 ;; Return value:  Size  Location     Type
 16650 ;;                  3   31[COMRAM] float 
 16651 ;; Registers used:
 16652 ;;		wreg, status,2, status,0, cstack
 16653 ;; Tracked objects:
 16654 ;;		On entry : 0/0
 16655 ;;		On exit  : 0/0
 16656 ;;		Unchanged: 0/0
 16657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16658 ;;      Params:         4       0       0       0       0       0       0
 16659 ;;      Locals:         1       0       0       0       0       0       0
 16660 ;;      Temps:          4       0       0       0       0       0       0
 16661 ;;      Totals:         9       0       0       0       0       0       0
 16662 ;;Total ram usage:        9 bytes
 16663 ;; Hardware stack levels used:    1
 16664 ;; Hardware stack levels required when called:    4
 16665 ;; This function calls:
 16666 ;;		___ftpack
 16667 ;; This function is called by:
 16668 ;;		_CheckFlashPrecentage
 16669 ;;		_pow
 16670 ;; This function uses a non-reentrant model
 16671 ;;
 16672                           
 16673                           	psect	text100
 16674  003094                     __ptext100:
 16675                           	opt stack 0
 16676  003094                     ___lltoft:
 16677                           	opt stack 21
 16678                           
 16679                           ;incstack = 0
 16680  003094  0E8E               	movlw	142
 16681  003096  6E28               	movwf	___lltoft@exp,c
 16682  003098  D006               	goto	l1840
 16683  00309A  90D8               	bcf	status,0,c
 16684  00309C  3223               	rrcf	___lltoft@c+3,f,c
 16685  00309E  3222               	rrcf	___lltoft@c+2,f,c
 16686  0030A0  3221               	rrcf	___lltoft@c+1,f,c
 16687  0030A2  3220               	rrcf	___lltoft@c,f,c
 16688  0030A4  2A28               	incf	___lltoft@exp,f,c
 16689  0030A6                     l1840:
 16690  0030A6  0E00               	movlw	0
 16691  0030A8  1420               	andwf	___lltoft@c,w,c
 16692  0030AA  6E24               	movwf	??___lltoft& (0+255),c
 16693  0030AC  0E00               	movlw	0
 16694  0030AE  1421               	andwf	___lltoft@c+1,w,c
 16695  0030B0  6E25               	movwf	(??___lltoft+1)& (0+255),c
 16696  0030B2  0E00               	movlw	0
 16697  0030B4  1422               	andwf	___lltoft@c+2,w,c
 16698  0030B6  6E26               	movwf	(??___lltoft+2)& (0+255),c
 16699  0030B8  0EFF               	movlw	255
 16700  0030BA  1423               	andwf	___lltoft@c+3,w,c
 16701  0030BC  6E27               	movwf	(??___lltoft+3)& (0+255),c
 16702  0030BE  5024               	movf	??___lltoft,w,c
 16703  0030C0  1025               	iorwf	??___lltoft+1,w,c
 16704  0030C2  1026               	iorwf	??___lltoft+2,w,c
 16705  0030C4  1027               	iorwf	??___lltoft+3,w,c
 16706  0030C6  A4D8               	btfss	status,2,c
 16707  0030C8  D7E8               	goto	l1841
 16708  0030CA  C020  F018         	movff	___lltoft@c,___ftpack@arg
 16709  0030CE  C021  F019         	movff	___lltoft@c+1,___ftpack@arg+1
 16710  0030D2  C022  F01A         	movff	___lltoft@c+2,___ftpack@arg+2
 16711  0030D6  C028  F01B         	movff	___lltoft@exp,___ftpack@exp
 16712  0030DA  0E00               	movlw	0
 16713  0030DC  6E1C               	movwf	___ftpack@sign,c
 16714  0030DE  ECCA  F013         	call	___ftpack	;wreg free
 16715  0030E2  C018  F020         	movff	?___ftpack,?___lltoft
 16716  0030E6  C019  F021         	movff	?___ftpack+1,?___lltoft+1
 16717  0030EA  C01A  F022         	movff	?___ftpack+2,?___lltoft+2
 16718  0030EE  0012               	return	
 16719  0030F0                     __end_of___lltoft:
 16720                           	opt stack 0
 16721                           tosu	equ	0xFFF
 16722                           tosh	equ	0xFFE
 16723                           tosl	equ	0xFFD
 16724                           pclath	equ	0xFFA
 16725                           tblptru	equ	0xFF8
 16726                           tblptrh	equ	0xFF7
 16727                           tblptrl	equ	0xFF6
 16728                           tablat	equ	0xFF5
 16729                           prodh	equ	0xFF4
 16730                           prodl	equ	0xFF3
 16731                           intcon	equ	0xFF2
 16732                           intcon2	equ	0xFF1
 16733                           postinc0	equ	0xFEE
 16734                           plusw0	equ	0xFEB
 16735                           wreg	equ	0xFE8
 16736                           indf1	equ	0xFE7
 16737                           postinc1	equ	0xFE6
 16738                           postdec1	equ	0xFE5
 16739                           fsr1h	equ	0xFE2
 16740                           fsr1l	equ	0xFE1
 16741                           indf2	equ	0xFDF
 16742                           postinc2	equ	0xFDE
 16743                           postdec2	equ	0xFDD
 16744                           plusw2	equ	0xFDB
 16745                           fsr2h	equ	0xFDA
 16746                           fsr2l	equ	0xFD9
 16747                           status	equ	0xFD8
 16748                           
 16749 ;; *************** function ___lwtoft *****************
 16750 ;; Defined at:
 16751 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 16752 ;; Parameters:    Size  Location     Type
 16753 ;;  c               2   31[COMRAM] unsigned int 
 16754 ;; Auto vars:     Size  Location     Type
 16755 ;;		None
 16756 ;; Return value:  Size  Location     Type
 16757 ;;                  3   31[COMRAM] float 
 16758 ;; Registers used:
 16759 ;;		wreg, status,2, status,0, cstack
 16760 ;; Tracked objects:
 16761 ;;		On entry : 0/0
 16762 ;;		On exit  : 0/0
 16763 ;;		Unchanged: 0/0
 16764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16765 ;;      Params:         3       0       0       0       0       0       0
 16766 ;;      Locals:         0       0       0       0       0       0       0
 16767 ;;      Temps:          0       0       0       0       0       0       0
 16768 ;;      Totals:         3       0       0       0       0       0       0
 16769 ;;Total ram usage:        3 bytes
 16770 ;; Hardware stack levels used:    1
 16771 ;; Hardware stack levels required when called:    4
 16772 ;; This function calls:
 16773 ;;		___ftpack
 16774 ;; This function is called by:
 16775 ;;		_AdcConvert
 16776 ;; This function uses a non-reentrant model
 16777 ;;
 16778                           
 16779                           	psect	text101
 16780  0039D2                     __ptext101:
 16781                           	opt stack 0
 16782  0039D2                     ___lwtoft:
 16783                           	opt stack 25
 16784                           
 16785                           ;incstack = 0
 16786  0039D2  C020  F018         	movff	___lwtoft@c,___ftpack@arg
 16787  0039D6  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
 16788  0039DA  6A1A               	clrf	___ftpack@arg+2,c
 16789  0039DC  0E8E               	movlw	142
 16790  0039DE  6E1B               	movwf	___ftpack@exp,c
 16791  0039E0  0E00               	movlw	0
 16792  0039E2  6E1C               	movwf	___ftpack@sign,c
 16793  0039E4  ECCA  F013         	call	___ftpack	;wreg free
 16794  0039E8  C018  F020         	movff	?___ftpack,?___lwtoft
 16795  0039EC  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
 16796  0039F0  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
 16797  0039F4  0012               	return	
 16798  0039F6                     __end_of___lwtoft:
 16799                           	opt stack 0
 16800                           tosu	equ	0xFFF
 16801                           tosh	equ	0xFFE
 16802                           tosl	equ	0xFFD
 16803                           pclath	equ	0xFFA
 16804                           tblptru	equ	0xFF8
 16805                           tblptrh	equ	0xFF7
 16806                           tblptrl	equ	0xFF6
 16807                           tablat	equ	0xFF5
 16808                           prodh	equ	0xFF4
 16809                           prodl	equ	0xFF3
 16810                           intcon	equ	0xFF2
 16811                           intcon2	equ	0xFF1
 16812                           postinc0	equ	0xFEE
 16813                           plusw0	equ	0xFEB
 16814                           wreg	equ	0xFE8
 16815                           indf1	equ	0xFE7
 16816                           postinc1	equ	0xFE6
 16817                           postdec1	equ	0xFE5
 16818                           fsr1h	equ	0xFE2
 16819                           fsr1l	equ	0xFE1
 16820                           indf2	equ	0xFDF
 16821                           postinc2	equ	0xFDE
 16822                           postdec2	equ	0xFDD
 16823                           plusw2	equ	0xFDB
 16824                           fsr2h	equ	0xFDA
 16825                           fsr2l	equ	0xFD9
 16826                           status	equ	0xFD8
 16827                           
 16828 ;; *************** function ___ftpack *****************
 16829 ;; Defined at:
 16830 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 16831 ;; Parameters:    Size  Location     Type
 16832 ;;  arg             3   23[COMRAM] unsigned um
 16833 ;;  exp             1   26[COMRAM] unsigned char 
 16834 ;;  sign            1   27[COMRAM] unsigned char 
 16835 ;; Auto vars:     Size  Location     Type
 16836 ;;		None
 16837 ;; Return value:  Size  Location     Type
 16838 ;;                  3   23[COMRAM] float 
 16839 ;; Registers used:
 16840 ;;		wreg, status,2, status,0
 16841 ;; Tracked objects:
 16842 ;;		On entry : 0/0
 16843 ;;		On exit  : 0/0
 16844 ;;		Unchanged: 0/0
 16845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16846 ;;      Params:         5       0       0       0       0       0       0
 16847 ;;      Locals:         0       0       0       0       0       0       0
 16848 ;;      Temps:          3       0       0       0       0       0       0
 16849 ;;      Totals:         8       0       0       0       0       0       0
 16850 ;;Total ram usage:        8 bytes
 16851 ;; Hardware stack levels used:    1
 16852 ;; Hardware stack levels required when called:    3
 16853 ;; This function calls:
 16854 ;;		Nothing
 16855 ;; This function is called by:
 16856 ;;		___altoft
 16857 ;;		___awtoft
 16858 ;;		___ftadd
 16859 ;;		___ftdiv
 16860 ;;		___ftmul
 16861 ;;		___lltoft
 16862 ;;		___lwtoft
 16863 ;; This function uses a non-reentrant model
 16864 ;;
 16865                           
 16866                           	psect	text102
 16867  002794                     __ptext102:
 16868                           	opt stack 0
 16869  002794                     ___ftpack:
 16870                           	opt stack 19
 16871                           
 16872                           ;incstack = 0
 16873  002794  501B               	movf	___ftpack@exp,w,c
 16874  002796  B4D8               	btfsc	status,2,c
 16875  002798  D005               	goto	u6280
 16876  00279A  5018               	movf	___ftpack@arg,w,c
 16877  00279C  1019               	iorwf	___ftpack@arg+1,w,c
 16878  00279E  101A               	iorwf	___ftpack@arg+2,w,c
 16879  0027A0  A4D8               	btfss	status,2,c
 16880  0027A2  D00C               	goto	l1683
 16881  0027A4                     u6280:
 16882  0027A4  0E00               	movlw	0
 16883  0027A6  6E18               	movwf	?___ftpack,c
 16884  0027A8  0E00               	movlw	0
 16885  0027AA  6E19               	movwf	?___ftpack+1,c
 16886  0027AC  0E00               	movlw	0
 16887  0027AE  6E1A               	movwf	?___ftpack+2,c
 16888  0027B0  0012               	return	
 16889  0027B2  2A1B               	incf	___ftpack@exp,f,c
 16890  0027B4  90D8               	bcf	status,0,c
 16891  0027B6  321A               	rrcf	___ftpack@arg+2,f,c
 16892  0027B8  3219               	rrcf	___ftpack@arg+1,f,c
 16893  0027BA  3218               	rrcf	___ftpack@arg,f,c
 16894  0027BC                     l1683:
 16895  0027BC  0E00               	movlw	0
 16896  0027BE  1418               	andwf	___ftpack@arg,w,c
 16897  0027C0  6E1D               	movwf	??___ftpack& (0+255),c
 16898  0027C2  0E00               	movlw	0
 16899  0027C4  1419               	andwf	___ftpack@arg+1,w,c
 16900  0027C6  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 16901  0027C8  0EFE               	movlw	254
 16902  0027CA  141A               	andwf	___ftpack@arg+2,w,c
 16903  0027CC  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 16904  0027CE  501D               	movf	??___ftpack,w,c
 16905  0027D0  101E               	iorwf	??___ftpack+1,w,c
 16906  0027D2  101F               	iorwf	??___ftpack+2,w,c
 16907  0027D4  B4D8               	btfsc	status,2,c
 16908  0027D6  D00C               	goto	l1686
 16909  0027D8  D7EC               	goto	l1684
 16910  0027DA  2A1B               	incf	___ftpack@exp,f,c
 16911  0027DC  0E01               	movlw	1
 16912  0027DE  2618               	addwf	___ftpack@arg,f,c
 16913  0027E0  0E00               	movlw	0
 16914  0027E2  2219               	addwfc	___ftpack@arg+1,f,c
 16915  0027E4  0E00               	movlw	0
 16916  0027E6  221A               	addwfc	___ftpack@arg+2,f,c
 16917  0027E8  90D8               	bcf	status,0,c
 16918  0027EA  321A               	rrcf	___ftpack@arg+2,f,c
 16919  0027EC  3219               	rrcf	___ftpack@arg+1,f,c
 16920  0027EE  3218               	rrcf	___ftpack@arg,f,c
 16921  0027F0                     l1686:
 16922  0027F0  0E00               	movlw	0
 16923  0027F2  1418               	andwf	___ftpack@arg,w,c
 16924  0027F4  6E1D               	movwf	??___ftpack& (0+255),c
 16925  0027F6  0E00               	movlw	0
 16926  0027F8  1419               	andwf	___ftpack@arg+1,w,c
 16927  0027FA  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 16928  0027FC  0EFF               	movlw	255
 16929  0027FE  141A               	andwf	___ftpack@arg+2,w,c
 16930  002800  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 16931  002802  501D               	movf	??___ftpack,w,c
 16932  002804  101E               	iorwf	??___ftpack+1,w,c
 16933  002806  101F               	iorwf	??___ftpack+2,w,c
 16934  002808  B4D8               	btfsc	status,2,c
 16935  00280A  D006               	goto	l1689
 16936  00280C  D7E6               	goto	l1687
 16937  00280E  061B               	decf	___ftpack@exp,f,c
 16938  002810  90D8               	bcf	status,0,c
 16939  002812  3618               	rlcf	___ftpack@arg,f,c
 16940  002814  3619               	rlcf	___ftpack@arg+1,f,c
 16941  002816  361A               	rlcf	___ftpack@arg+2,f,c
 16942  002818                     l1689:
 16943  002818  BE19               	btfsc	___ftpack@arg+1,7,c
 16944  00281A  D003               	goto	u6320
 16945  00281C  0E02               	movlw	2
 16946  00281E  601B               	cpfslt	___ftpack@exp,c
 16947  002820  D7F6               	goto	l1690
 16948  002822                     u6320:
 16949  002822  A01B               	btfss	___ftpack@exp,0,c
 16950  002824  9E19               	bcf	___ftpack@arg+1,7,c
 16951  002826  90D8               	bcf	status,0,c
 16952  002828  321B               	rrcf	___ftpack@exp,f,c
 16953  00282A  501B               	movf	___ftpack@exp,w,c
 16954  00282C  121A               	iorwf	___ftpack@arg+2,f,c
 16955  00282E  501C               	movf	___ftpack@sign,w,c
 16956  002830  A4D8               	btfss	status,2,c
 16957  002832  8E1A               	bsf	___ftpack@arg+2,7,c
 16958  002834  C018  F018         	movff	___ftpack@arg,?___ftpack
 16959  002838  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
 16960  00283C  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
 16961  002840  0012               	return	
 16962  002842                     __end_of___ftpack:
 16963                           	opt stack 0
 16964                           tosu	equ	0xFFF
 16965                           tosh	equ	0xFFE
 16966                           tosl	equ	0xFFD
 16967                           pclath	equ	0xFFA
 16968                           tblptru	equ	0xFF8
 16969                           tblptrh	equ	0xFF7
 16970                           tblptrl	equ	0xFF6
 16971                           tablat	equ	0xFF5
 16972                           prodh	equ	0xFF4
 16973                           prodl	equ	0xFF3
 16974                           intcon	equ	0xFF2
 16975                           intcon2	equ	0xFF1
 16976                           postinc0	equ	0xFEE
 16977                           plusw0	equ	0xFEB
 16978                           wreg	equ	0xFE8
 16979                           indf1	equ	0xFE7
 16980                           postinc1	equ	0xFE6
 16981                           postdec1	equ	0xFE5
 16982                           fsr1h	equ	0xFE2
 16983                           fsr1l	equ	0xFE1
 16984                           indf2	equ	0xFDF
 16985                           postinc2	equ	0xFDE
 16986                           postdec2	equ	0xFDD
 16987                           plusw2	equ	0xFDB
 16988                           fsr2h	equ	0xFDA
 16989                           fsr2l	equ	0xFD9
 16990                           status	equ	0xFD8
 16991                           
 16992 ;; *************** function _FlashSampleWrite *****************
 16993 ;; Defined at:
 16994 ;;		line 29 in file "FlashApp.c"
 16995 ;; Parameters:    Size  Location     Type
 16996 ;;  sampleData      2   44[COMRAM] unsigned int 
 16997 ;;  channelNum      1   46[COMRAM] unsigned char 
 16998 ;; Auto vars:     Size  Location     Type
 16999 ;;  rotateLeft      2    2[BANK0 ] unsigned int 
 17000 ;; Return value:  Size  Location     Type
 17001 ;;                  1    wreg      void 
 17002 ;; Registers used:
 17003 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17004 ;; Tracked objects:
 17005 ;;		On entry : 0/0
 17006 ;;		On exit  : 0/0
 17007 ;;		Unchanged: 0/0
 17008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17009 ;;      Params:         3       0       0       0       0       0       0
 17010 ;;      Locals:         0       2       0       0       0       0       0
 17011 ;;      Temps:          0       2       0       0       0       0       0
 17012 ;;      Totals:         3       4       0       0       0       0       0
 17013 ;;Total ram usage:        7 bytes
 17014 ;; Hardware stack levels used:    1
 17015 ;; Hardware stack levels required when called:    5
 17016 ;; This function calls:
 17017 ;;		_FLASH_IsWriteDone
 17018 ;;		_FLASH_WriteBlock
 17019 ;; This function is called by:
 17020 ;;		_AdcConvert
 17021 ;; This function uses a non-reentrant model
 17022 ;;
 17023                           
 17024                           	psect	text103
 17025  001D38                     __ptext103:
 17026                           	opt stack 0
 17027  001D38                     _FlashSampleWrite:
 17028                           	opt stack 24
 17029                           
 17030                           ;FlashApp.c: 32: uint16_t rotateLeft = (channelNum << 12);
 17031                           
 17032                           ;incstack = 0
 17033  001D38  502F               	movf	FlashSampleWrite@channelNum,w,c
 17034  001D3A  0100               	movlb	0	; () banked
 17035  001D3C  6F60               	movwf	??_FlashSampleWrite& (0+255),b
 17036  001D3E  6B61               	clrf	(??_FlashSampleWrite+1)& (0+255),b
 17037  001D40  0E0C               	movlw	12
 17038  001D42                     u8625:
 17039  001D42  90D8               	bcf	status,0,c
 17040  001D44  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 17041  001D46  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 17042  001D48  2EE8               	decfsz	wreg,f,c
 17043  001D4A  D7FB               	goto	u8625
 17044  001D4C  C060  F062         	movff	??_FlashSampleWrite,FlashSampleWrite@rotateLeft
 17045  001D50  C061  F063         	movff	??_FlashSampleWrite+1,FlashSampleWrite@rotateLeft+1
 17046                           
 17047                           ;FlashApp.c: 33: sampleData |= rotateLeft;
 17048  001D54  5162               	movf	FlashSampleWrite@rotateLeft& (0+255),w,b
 17049  001D56  122D               	iorwf	FlashSampleWrite@sampleData,f,c
 17050  001D58  5163               	movf	(FlashSampleWrite@rotateLeft+1)& (0+255),w,b
 17051  001D5A  122E               	iorwf	FlashSampleWrite@sampleData+1,f,c
 17052                           
 17053                           ; BSR set to: 0
 17054                           ;FlashApp.c: 34: sampleArray[sampleCount] = sampleData;
 17055  001D5C  90D8               	bcf	status,0,c
 17056  001D5E  0101               	movlb	1	; () banked
 17057  001D60  3574               	rlcf	_sampleCount& (0+255),w,b
 17058  001D62  6ED9               	movwf	fsr2l,c
 17059  001D64  3575               	rlcf	(_sampleCount+1)& (0+255),w,b
 17060  001D66  6EDA               	movwf	fsr2h,c
 17061  001D68  0E7B               	movlw	low _sampleArray
 17062  001D6A  26D9               	addwf	fsr2l,f,c
 17063  001D6C  0E01               	movlw	high _sampleArray
 17064  001D6E  22DA               	addwfc	fsr2h,f,c
 17065  001D70  C02D  FFDE         	movff	FlashSampleWrite@sampleData,postinc2
 17066  001D74  C02E  FFDD         	movff	FlashSampleWrite@sampleData+1,postdec2
 17067                           
 17068                           ; BSR set to: 1
 17069                           ;FlashApp.c: 35: sampleCount ++;
 17070  001D78  4B74               	infsnz	_sampleCount& (0+255),f,b
 17071  001D7A  2B75               	incf	(_sampleCount+1)& (0+255),f,b
 17072                           
 17073                           ; BSR set to: 1
 17074                           ;FlashApp.c: 37: if(((sampleCount*sizeof(adc_result_t)) >= (64)) && FLASH_IsWriteDone())
 17075  001D7C  C174  F060         	movff	_sampleCount,??_FlashSampleWrite
 17076  001D80  C175  F061         	movff	_sampleCount+1,??_FlashSampleWrite+1
 17077  001D84  90D8               	bcf	status,0,c
 17078  001D86  0100               	movlb	0	; () banked
 17079  001D88  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 17080  001D8A  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 17081  001D8C  5161               	movf	(??_FlashSampleWrite+1)& (0+255),w,b
 17082  001D8E  E104               	bnz	u8630
 17083  001D90  0E40               	movlw	64
 17084  001D92  5D60               	subwf	??_FlashSampleWrite& (0+255),w,b
 17085  001D94  A0D8               	btfss	status,0,c
 17086  001D96  0012               	return	
 17087  001D98                     u8630:
 17088                           
 17089                           ; BSR set to: 0
 17090  001D98  ECD1  F01D         	call	_FLASH_IsWriteDone	;wreg free
 17091  001D9C  0900               	iorlw	0
 17092  001D9E  B4D8               	btfsc	status,2,c
 17093  001DA0  0012               	return	
 17094                           
 17095                           ;FlashApp.c: 38: {
 17096                           ;FlashApp.c: 39: FLASH_WriteBlock(writeAddress, (uint8_t *)sampleArray);
 17097  001DA2  C040  F01D         	movff	_writeAddress,FLASH_WriteBlock@writeAddr
 17098  001DA6  C041  F01E         	movff	_writeAddress+1,FLASH_WriteBlock@writeAddr+1
 17099  001DAA  C042  F01F         	movff	_writeAddress+2,FLASH_WriteBlock@writeAddr+2
 17100  001DAE  C043  F020         	movff	_writeAddress+3,FLASH_WriteBlock@writeAddr+3
 17101  001DB2  0E7B               	movlw	low _sampleArray
 17102  001DB4  6E21               	movwf	FLASH_WriteBlock@flashWrBufPtr,c
 17103  001DB6  0E01               	movlw	high _sampleArray
 17104  001DB8  6E22               	movwf	FLASH_WriteBlock@flashWrBufPtr+1,c
 17105  001DBA  ECB8  F012         	call	_FLASH_WriteBlock	;wreg free
 17106                           
 17107                           ;FlashApp.c: 40: writeAddress += (64);
 17108  001DBE  0E40               	movlw	64
 17109  001DC0  2640               	addwf	_writeAddress,f,c
 17110  001DC2  0E00               	movlw	0
 17111  001DC4  2241               	addwfc	_writeAddress+1,f,c
 17112  001DC6  2242               	addwfc	_writeAddress+2,f,c
 17113  001DC8  2243               	addwfc	_writeAddress+3,f,c
 17114                           
 17115                           ;FlashApp.c: 41: if (writeAddress >= 0x7FF0)
 17116  001DCA  5043               	movf	_writeAddress+3,w,c
 17117  001DCC  1042               	iorwf	_writeAddress+2,w,c
 17118  001DCE  E106               	bnz	u8650
 17119  001DD0  0EF0               	movlw	240
 17120  001DD2  5C40               	subwf	_writeAddress,w,c
 17121  001DD4  0E7F               	movlw	127
 17122  001DD6  5841               	subwfb	_writeAddress+1,w,c
 17123  001DD8  A0D8               	btfss	status,0,c
 17124  001DDA  D018               	goto	l299
 17125  001DDC                     u8650:
 17126                           
 17127                           ;FlashApp.c: 42: {
 17128                           ;FlashApp.c: 43: writeAddress = 0x4000;
 17129  001DDC  0E00               	movlw	0
 17130  001DDE  6E40               	movwf	_writeAddress,c
 17131  001DE0  0E40               	movlw	64
 17132  001DE2  6E41               	movwf	_writeAddress+1,c
 17133  001DE4  0E00               	movlw	0
 17134  001DE6  6E42               	movwf	_writeAddress+2,c
 17135  001DE8  0E00               	movlw	0
 17136  001DEA  6E43               	movwf	_writeAddress+3,c
 17137                           
 17138                           ;FlashApp.c: 44: isReWriteDone = 1;
 17139  001DEC  0E01               	movlw	1
 17140  001DEE  0100               	movlb	0	; () banked
 17141  001DF0  6FDB               	movwf	_isReWriteDone& (0+255),b
 17142                           
 17143                           ; BSR set to: 0
 17144                           ;FlashApp.c: 45: if (readAddress == 0x4000)
 17145  001DF2  0E40               	movlw	64
 17146  001DF4  19E9               	xorwf	(_readAddress+1)& (0+255),w,b
 17147  001DF6  11E8               	iorwf	_readAddress& (0+255),w,b
 17148  001DF8  11EA               	iorwf	(_readAddress+2)& (0+255),w,b
 17149  001DFA  11EB               	iorwf	(_readAddress+3)& (0+255),w,b
 17150  001DFC  A4D8               	btfss	status,2,c
 17151  001DFE  D006               	goto	l299
 17152                           
 17153                           ; BSR set to: 0
 17154                           ;FlashApp.c: 46: {
 17155                           ;FlashApp.c: 47: readAddress += (64);
 17156  001E00  0E40               	movlw	64
 17157  001E02  27E8               	addwf	_readAddress& (0+255),f,b
 17158  001E04  0E00               	movlw	0
 17159  001E06  23E9               	addwfc	(_readAddress+1)& (0+255),f,b
 17160  001E08  23EA               	addwfc	(_readAddress+2)& (0+255),f,b
 17161  001E0A  23EB               	addwfc	(_readAddress+3)& (0+255),f,b
 17162  001E0C                     l299:
 17163                           
 17164                           ;FlashApp.c: 48: }
 17165                           ;FlashApp.c: 49: }
 17166                           ;FlashApp.c: 51: if (numOfValidateSamples < ((0x4000-0x7FF0)/(64)))
 17167                           
 17168                           ; BSR set to: 0
 17169  001E0C  0431               	decf	_numOfValidateSamples,w,c
 17170  001E0E  0EFF               	movlw	255
 17171  001E10  5832               	subwfb	_numOfValidateSamples+1,w,c
 17172  001E12  0EFF               	movlw	255
 17173  001E14  5833               	subwfb	_numOfValidateSamples+2,w,c
 17174  001E16  0EFF               	movlw	255
 17175  001E18  5834               	subwfb	_numOfValidateSamples+3,w,c
 17176  001E1A  B0D8               	btfsc	status,0,c
 17177  001E1C  D006               	goto	l300
 17178                           
 17179                           ;FlashApp.c: 52: {
 17180                           ;FlashApp.c: 53: numOfValidateSamples++;
 17181  001E1E  0E01               	movlw	1
 17182  001E20  2631               	addwf	_numOfValidateSamples,f,c
 17183  001E22  0E00               	movlw	0
 17184  001E24  2232               	addwfc	_numOfValidateSamples+1,f,c
 17185  001E26  2233               	addwfc	_numOfValidateSamples+2,f,c
 17186  001E28  2234               	addwfc	_numOfValidateSamples+3,f,c
 17187  001E2A                     l300:
 17188                           
 17189                           ;FlashApp.c: 54: }
 17190                           ;FlashApp.c: 55: sampleCount = 0;
 17191  001E2A  0E00               	movlw	0
 17192  001E2C  0101               	movlb	1	; () banked
 17193  001E2E  6F75               	movwf	(_sampleCount+1)& (0+255),b
 17194  001E30  0E00               	movlw	0
 17195  001E32  6F74               	movwf	_sampleCount& (0+255),b
 17196  001E34  0012               	return	
 17197  001E36                     __end_of_FlashSampleWrite:
 17198                           	opt stack 0
 17199                           tosu	equ	0xFFF
 17200                           tosh	equ	0xFFE
 17201                           tosl	equ	0xFFD
 17202                           pclath	equ	0xFFA
 17203                           tblptru	equ	0xFF8
 17204                           tblptrh	equ	0xFF7
 17205                           tblptrl	equ	0xFF6
 17206                           tablat	equ	0xFF5
 17207                           prodh	equ	0xFF4
 17208                           prodl	equ	0xFF3
 17209                           intcon	equ	0xFF2
 17210                           intcon2	equ	0xFF1
 17211                           postinc0	equ	0xFEE
 17212                           plusw0	equ	0xFEB
 17213                           wreg	equ	0xFE8
 17214                           indf1	equ	0xFE7
 17215                           postinc1	equ	0xFE6
 17216                           postdec1	equ	0xFE5
 17217                           fsr1h	equ	0xFE2
 17218                           fsr1l	equ	0xFE1
 17219                           indf2	equ	0xFDF
 17220                           postinc2	equ	0xFDE
 17221                           postdec2	equ	0xFDD
 17222                           plusw2	equ	0xFDB
 17223                           fsr2h	equ	0xFDA
 17224                           fsr2l	equ	0xFD9
 17225                           status	equ	0xFD8
 17226                           
 17227 ;; *************** function _FLASH_WriteBlock *****************
 17228 ;; Defined at:
 17229 ;;		line 93 in file "mcc_generated_files/memory.c"
 17230 ;; Parameters:    Size  Location     Type
 17231 ;;  writeAddr       4   28[COMRAM] unsigned long 
 17232 ;;  flashWrBufPt    2   32[COMRAM] PTR unsigned char 
 17233 ;;		 -> FlashTest@buff(128), sampleArray(64), 
 17234 ;; Auto vars:     Size  Location     Type
 17235 ;;  blockStartAd    4   38[COMRAM] unsigned long 
 17236 ;;  i               1   43[COMRAM] unsigned char 
 17237 ;;  GIEBitValue     1   42[COMRAM] unsigned char 
 17238 ;; Return value:  Size  Location     Type
 17239 ;;                  1    wreg      char 
 17240 ;; Registers used:
 17241 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17242 ;; Tracked objects:
 17243 ;;		On entry : 0/0
 17244 ;;		On exit  : 0/0
 17245 ;;		Unchanged: 0/0
 17246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17247 ;;      Params:         6       0       0       0       0       0       0
 17248 ;;      Locals:         6       0       0       0       0       0       0
 17249 ;;      Temps:          4       0       0       0       0       0       0
 17250 ;;      Totals:        16       0       0       0       0       0       0
 17251 ;;Total ram usage:       16 bytes
 17252 ;; Hardware stack levels used:    1
 17253 ;; Hardware stack levels required when called:    4
 17254 ;; This function calls:
 17255 ;;		_FLASH_EraseBlock
 17256 ;; This function is called by:
 17257 ;;		_FlashSampleWrite
 17258 ;;		_FlashTest
 17259 ;;		_FLASH_WriteByte
 17260 ;; This function uses a non-reentrant model
 17261 ;;
 17262                           
 17263                           	psect	text104
 17264  002570                     __ptext104:
 17265                           	opt stack 0
 17266  002570                     _FLASH_WriteBlock:
 17267                           	opt stack 24
 17268                           
 17269                           ;memory.c: 95: uint32_t blockStartAddr = (uint32_t )(writeAddr & ((0x8000-1) ^ ((64)-1))
      +                          );
 17270                           
 17271                           ;incstack = 0
 17272  002570  0EC0               	movlw	192
 17273  002572  6E23               	movwf	??_FLASH_WriteBlock& (0+255),c
 17274  002574  0E7F               	movlw	127
 17275  002576  6E24               	movwf	(??_FLASH_WriteBlock+1)& (0+255),c
 17276  002578  C01D  F025         	movff	FLASH_WriteBlock@writeAddr,??_FLASH_WriteBlock+2
 17277  00257C  C01E  F026         	movff	FLASH_WriteBlock@writeAddr+1,??_FLASH_WriteBlock+3
 17278  002580  5023               	movf	??_FLASH_WriteBlock,w,c
 17279  002582  1625               	andwf	??_FLASH_WriteBlock+2,f,c
 17280  002584  5024               	movf	??_FLASH_WriteBlock+1,w,c
 17281  002586  1626               	andwf	??_FLASH_WriteBlock+3,f,c
 17282  002588  C025  F027         	movff	??_FLASH_WriteBlock+2,FLASH_WriteBlock@blockStartAddr
 17283  00258C  C026  F028         	movff	??_FLASH_WriteBlock+3,FLASH_WriteBlock@blockStartAddr+1
 17284  002590  6A29               	clrf	FLASH_WriteBlock@blockStartAddr+2,c
 17285  002592  6A2A               	clrf	FLASH_WriteBlock@blockStartAddr+3,c
 17286                           
 17287                           ;memory.c: 96: uint8_t GIEBitValue = INTCONbits.GIE;
 17288  002594  0E00               	movlw	0
 17289  002596  BEF2               	btfsc	intcon,7,c	;volatile
 17290  002598  0E01               	movlw	1
 17291  00259A  6E2B               	movwf	FLASH_WriteBlock@GIEBitValue,c
 17292                           
 17293                           ;memory.c: 97: uint8_t i;
 17294                           ;memory.c: 100: if( writeAddr != blockStartAddr )
 17295  00259C  5027               	movf	FLASH_WriteBlock@blockStartAddr,w,c
 17296  00259E  181D               	xorwf	FLASH_WriteBlock@writeAddr,w,c
 17297  0025A0  E144               	bnz	l963
 17298  0025A2  5028               	movf	FLASH_WriteBlock@blockStartAddr+1,w,c
 17299  0025A4  181E               	xorwf	FLASH_WriteBlock@writeAddr+1,w,c
 17300  0025A6  E141               	bnz	l963
 17301  0025A8  5029               	movf	FLASH_WriteBlock@blockStartAddr+2,w,c
 17302  0025AA  181F               	xorwf	FLASH_WriteBlock@writeAddr+2,w,c
 17303  0025AC  E13E               	bnz	l963
 17304  0025AE  502A               	movf	FLASH_WriteBlock@blockStartAddr+3,w,c
 17305  0025B0  1820               	xorwf	FLASH_WriteBlock@writeAddr+3,w,c
 17306  0025B2  A4D8               	btfss	status,2,c
 17307  0025B4  0012               	return	
 17308                           
 17309                           ;memory.c: 103: }
 17310                           ;memory.c: 106: FLASH_EraseBlock(writeAddr);
 17311                           
 17312                           ;memory.c: 101: {
 17313                           ;memory.c: 102: return -1;
 17314                           ;	Return value of _FLASH_WriteBlock is never used
 17315  0025B6  C01D  F018         	movff	FLASH_WriteBlock@writeAddr,FLASH_EraseBlock@baseAddr
 17316  0025BA  C01E  F019         	movff	FLASH_WriteBlock@writeAddr+1,FLASH_EraseBlock@baseAddr+1
 17317  0025BE  C01F  F01A         	movff	FLASH_WriteBlock@writeAddr+2,FLASH_EraseBlock@baseAddr+2
 17318  0025C2  C020  F01B         	movff	FLASH_WriteBlock@writeAddr+3,FLASH_EraseBlock@baseAddr+3
 17319  0025C6  ECD4  F01B         	call	_FLASH_EraseBlock	;wreg free
 17320                           
 17321                           ;memory.c: 109: TBLPTRU = (uint8_t)((writeAddr & 0x00FF0000) >> 16);
 17322  0025CA  C01F  FFF8         	movff	FLASH_WriteBlock@writeAddr+2,tblptru	;volatile
 17323                           
 17324                           ;memory.c: 110: TBLPTRH = (uint8_t)((writeAddr & 0x0000FF00)>> 8);
 17325  0025CE  C01E  FFF7         	movff	FLASH_WriteBlock@writeAddr+1,tblptrh	;volatile
 17326                           
 17327                           ;memory.c: 111: TBLPTRL = (uint8_t)(writeAddr & 0x000000FF);
 17328  0025D2  C01D  FFF6         	movff	FLASH_WriteBlock@writeAddr,tblptrl	;volatile
 17329                           
 17330                           ;memory.c: 114: for (i=0; i<(64); i++)
 17331  0025D6  0E00               	movlw	0
 17332  0025D8  6E2C               	movwf	FLASH_WriteBlock@i,c
 17333  0025DA                     l7789:
 17334  0025DA  0E3F               	movlw	63
 17335  0025DC  642C               	cpfsgt	FLASH_WriteBlock@i,c
 17336  0025DE  D001               	goto	l964
 17337  0025E0  D013               	goto	u8150
 17338  0025E2                     l964:
 17339                           
 17340                           ;memory.c: 115: {
 17341                           ;memory.c: 116: TABLAT = flashWrBufPtr[i];
 17342  0025E2  502C               	movf	FLASH_WriteBlock@i,w,c
 17343  0025E4  0D01               	mullw	1
 17344  0025E6  50F3               	movf	prodl,w,c
 17345  0025E8  2421               	addwf	FLASH_WriteBlock@flashWrBufPtr,w,c
 17346  0025EA  6ED9               	movwf	fsr2l,c
 17347  0025EC  50F4               	movf	prodh,w,c
 17348  0025EE  2022               	addwfc	FLASH_WriteBlock@flashWrBufPtr+1,w,c
 17349  0025F0  6EDA               	movwf	fsr2h,c
 17350  0025F2  50DF               	movf	indf2,w,c
 17351  0025F4  6EF5               	movwf	tablat,c	;volatile
 17352                           
 17353                           ;memory.c: 118: if (i == ((64)-1))
 17354  0025F6  0E3F               	movlw	63
 17355  0025F8  182C               	xorwf	FLASH_WriteBlock@i,w,c
 17356  0025FA  A4D8               	btfss	status,2,c
 17357  0025FC  D002               	goto	l966
 17358  0025FE  000C               	tblwt		*	;# 
 17359                           
 17360                           ;memory.c: 121: }
 17361  002600  D001               	goto	l967
 17362  002602                     l966:
 17363  002602  000D               	tblwt		*+	;# 
 17364  002604                     l967:
 17365  002604  2A2C               	incf	FLASH_WriteBlock@i,f,c
 17366  002606  D7E9               	goto	l7789
 17367  002608                     u8150:
 17368                           
 17369                           ;memory.c: 125: }
 17370                           ;memory.c: 126: }
 17371                           ;memory.c: 128: PIR2bits.EEIF = 1;
 17372  002608  88A1               	bsf	4001,4,c	;volatile
 17373                           
 17374                           ;memory.c: 129: EECON1bits.EEPGD = 1;
 17375  00260A  8EA6               	bsf	4006,7,c	;volsfr
 17376                           
 17377                           ;memory.c: 130: EECON1bits.CFGS = 0;
 17378  00260C  9CA6               	bcf	4006,6,c	;volsfr
 17379                           
 17380                           ;memory.c: 131: EECON1bits.WREN = 1;
 17381  00260E  84A6               	bsf	4006,2,c	;volsfr
 17382                           
 17383                           ;memory.c: 132: INTCONbits.GIE = 0;
 17384  002610  9EF2               	bcf	intcon,7,c	;volatile
 17385                           
 17386                           ;memory.c: 133: EECON2 = 0x55;
 17387  002612  0E55               	movlw	85
 17388  002614  6EA7               	movwf	4007,c	;volsfr
 17389                           
 17390                           ;memory.c: 134: EECON2 = 0xAA;
 17391  002616  0EAA               	movlw	170
 17392  002618  6EA7               	movwf	4007,c	;volsfr
 17393                           
 17394                           ;memory.c: 135: EECON1bits.WR = 1;
 17395  00261A  82A6               	bsf	4006,1,c	;volsfr
 17396                           
 17397                           ;memory.c: 137: EECON1bits.WREN = 0;
 17398  00261C  94A6               	bcf	4006,2,c	;volsfr
 17399                           
 17400                           ;memory.c: 138: INTCONbits.GIE = GIEBitValue;
 17401  00261E  B02B               	btfsc	FLASH_WriteBlock@GIEBitValue,0,c
 17402  002620  D002               	bra	u8165
 17403  002622  9EF2               	bcf	intcon,7,c	;volatile
 17404  002624  D001               	bra	u8166
 17405  002626                     u8165:
 17406  002626  8EF2               	bsf	intcon,7,c	;volatile
 17407  002628                     u8166:
 17408  002628  0012               	return	
 17409  00262A                     l963:
 17410  00262A  0012               	return		;funcret
 17411  00262C                     __end_of_FLASH_WriteBlock:
 17412                           	opt stack 0
 17413                           tosu	equ	0xFFF
 17414                           tosh	equ	0xFFE
 17415                           tosl	equ	0xFFD
 17416                           pclath	equ	0xFFA
 17417                           tblptru	equ	0xFF8
 17418                           tblptrh	equ	0xFF7
 17419                           tblptrl	equ	0xFF6
 17420                           tablat	equ	0xFF5
 17421                           prodh	equ	0xFF4
 17422                           prodl	equ	0xFF3
 17423                           intcon	equ	0xFF2
 17424                           intcon2	equ	0xFF1
 17425                           postinc0	equ	0xFEE
 17426                           plusw0	equ	0xFEB
 17427                           wreg	equ	0xFE8
 17428                           indf1	equ	0xFE7
 17429                           postinc1	equ	0xFE6
 17430                           postdec1	equ	0xFE5
 17431                           fsr1h	equ	0xFE2
 17432                           fsr1l	equ	0xFE1
 17433                           indf2	equ	0xFDF
 17434                           postinc2	equ	0xFDE
 17435                           postdec2	equ	0xFDD
 17436                           plusw2	equ	0xFDB
 17437                           fsr2h	equ	0xFDA
 17438                           fsr2l	equ	0xFD9
 17439                           status	equ	0xFD8
 17440                           
 17441 ;; *************** function _FLASH_EraseBlock *****************
 17442 ;; Defined at:
 17443 ;;		line 144 in file "mcc_generated_files/memory.c"
 17444 ;; Parameters:    Size  Location     Type
 17445 ;;  baseAddr        4   23[COMRAM] unsigned long 
 17446 ;; Auto vars:     Size  Location     Type
 17447 ;;  GIEBitValue     1   27[COMRAM] unsigned char 
 17448 ;; Return value:  Size  Location     Type
 17449 ;;                  1    wreg      void 
 17450 ;; Registers used:
 17451 ;;		wreg, status,2
 17452 ;; Tracked objects:
 17453 ;;		On entry : 0/0
 17454 ;;		On exit  : 0/0
 17455 ;;		Unchanged: 0/0
 17456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17457 ;;      Params:         4       0       0       0       0       0       0
 17458 ;;      Locals:         1       0       0       0       0       0       0
 17459 ;;      Temps:          0       0       0       0       0       0       0
 17460 ;;      Totals:         5       0       0       0       0       0       0
 17461 ;;Total ram usage:        5 bytes
 17462 ;; Hardware stack levels used:    1
 17463 ;; Hardware stack levels required when called:    3
 17464 ;; This function calls:
 17465 ;;		Nothing
 17466 ;; This function is called by:
 17467 ;;		_FLASH_WriteBlock
 17468 ;; This function uses a non-reentrant model
 17469 ;;
 17470                           
 17471                           	psect	text105
 17472  0037A8                     __ptext105:
 17473                           	opt stack 0
 17474  0037A8                     _FLASH_EraseBlock:
 17475                           	opt stack 24
 17476                           
 17477                           ;memory.c: 146: uint8_t GIEBitValue = INTCONbits.GIE;
 17478                           
 17479                           ;incstack = 0
 17480  0037A8  0E00               	movlw	0
 17481  0037AA  BEF2               	btfsc	intcon,7,c	;volatile
 17482  0037AC  0E01               	movlw	1
 17483  0037AE  6E1C               	movwf	FLASH_EraseBlock@GIEBitValue,c
 17484                           
 17485                           ;memory.c: 148: TBLPTRU = (uint8_t)((baseAddr & 0x00FF0000) >> 16);
 17486  0037B0  C01A  FFF8         	movff	FLASH_EraseBlock@baseAddr+2,tblptru	;volatile
 17487                           
 17488                           ;memory.c: 149: TBLPTRH = (uint8_t)((baseAddr & 0x0000FF00)>> 8);
 17489  0037B4  C019  FFF7         	movff	FLASH_EraseBlock@baseAddr+1,tblptrh	;volatile
 17490                           
 17491                           ;memory.c: 150: TBLPTRL = (uint8_t)(baseAddr & 0x000000FF);
 17492  0037B8  C018  FFF6         	movff	FLASH_EraseBlock@baseAddr,tblptrl	;volatile
 17493                           
 17494                           ;memory.c: 152: EECON1bits.EEPGD = 1;
 17495  0037BC  8EA6               	bsf	4006,7,c	;volsfr
 17496                           
 17497                           ;memory.c: 153: EECON1bits.CFGS = 0;
 17498  0037BE  9CA6               	bcf	4006,6,c	;volsfr
 17499                           
 17500                           ;memory.c: 154: EECON1bits.WREN = 1;
 17501  0037C0  84A6               	bsf	4006,2,c	;volsfr
 17502                           
 17503                           ;memory.c: 155: EECON1bits.FREE = 1;
 17504  0037C2  88A6               	bsf	4006,4,c	;volsfr
 17505                           
 17506                           ;memory.c: 156: INTCONbits.GIE = 0;
 17507  0037C4  9EF2               	bcf	intcon,7,c	;volatile
 17508                           
 17509                           ;memory.c: 157: EECON2 = 0x55;
 17510  0037C6  0E55               	movlw	85
 17511  0037C8  6EA7               	movwf	4007,c	;volsfr
 17512                           
 17513                           ;memory.c: 158: EECON2 = 0xAA;
 17514  0037CA  0EAA               	movlw	170
 17515  0037CC  6EA7               	movwf	4007,c	;volsfr
 17516                           
 17517                           ;memory.c: 159: EECON1bits.WR = 1;
 17518  0037CE  82A6               	bsf	4006,1,c	;volsfr
 17519                           
 17520                           ;memory.c: 160: INTCONbits.GIE = GIEBitValue;
 17521  0037D0  B01C               	btfsc	FLASH_EraseBlock@GIEBitValue,0,c
 17522  0037D2  D002               	bra	u8025
 17523  0037D4  9EF2               	bcf	intcon,7,c	;volatile
 17524  0037D6  D001               	bra	u8026
 17525  0037D8                     u8025:
 17526  0037D8  8EF2               	bsf	intcon,7,c	;volatile
 17527  0037DA                     u8026:
 17528  0037DA  0012               	return		;funcret
 17529  0037DC                     __end_of_FLASH_EraseBlock:
 17530                           	opt stack 0
 17531                           tosu	equ	0xFFF
 17532                           tosh	equ	0xFFE
 17533                           tosl	equ	0xFFD
 17534                           pclath	equ	0xFFA
 17535                           tblptru	equ	0xFF8
 17536                           tblptrh	equ	0xFF7
 17537                           tblptrl	equ	0xFF6
 17538                           tablat	equ	0xFF5
 17539                           prodh	equ	0xFF4
 17540                           prodl	equ	0xFF3
 17541                           intcon	equ	0xFF2
 17542                           intcon2	equ	0xFF1
 17543                           postinc0	equ	0xFEE
 17544                           plusw0	equ	0xFEB
 17545                           wreg	equ	0xFE8
 17546                           indf1	equ	0xFE7
 17547                           postinc1	equ	0xFE6
 17548                           postdec1	equ	0xFE5
 17549                           fsr1h	equ	0xFE2
 17550                           fsr1l	equ	0xFE1
 17551                           indf2	equ	0xFDF
 17552                           postinc2	equ	0xFDE
 17553                           postdec2	equ	0xFDD
 17554                           plusw2	equ	0xFDB
 17555                           fsr2h	equ	0xFDA
 17556                           fsr2l	equ	0xFD9
 17557                           status	equ	0xFD8
 17558                           
 17559 ;; *************** function _FLASH_IsWriteDone *****************
 17560 ;; Defined at:
 17561 ;;		line 189 in file "mcc_generated_files/memory.c"
 17562 ;; Parameters:    Size  Location     Type
 17563 ;;		None
 17564 ;; Auto vars:     Size  Location     Type
 17565 ;;		None
 17566 ;; Return value:  Size  Location     Type
 17567 ;;                  1    wreg      unsigned char 
 17568 ;; Registers used:
 17569 ;;		wreg
 17570 ;; Tracked objects:
 17571 ;;		On entry : 0/0
 17572 ;;		On exit  : 0/0
 17573 ;;		Unchanged: 0/0
 17574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17575 ;;      Params:         0       0       0       0       0       0       0
 17576 ;;      Locals:         0       0       0       0       0       0       0
 17577 ;;      Temps:          0       0       0       0       0       0       0
 17578 ;;      Totals:         0       0       0       0       0       0       0
 17579 ;;Total ram usage:        0 bytes
 17580 ;; Hardware stack levels used:    1
 17581 ;; Hardware stack levels required when called:    3
 17582 ;; This function calls:
 17583 ;;		Nothing
 17584 ;; This function is called by:
 17585 ;;		_FlashSampleWrite
 17586 ;;		_FlashReadUart
 17587 ;; This function uses a non-reentrant model
 17588 ;;
 17589                           
 17590                           	psect	text106
 17591  003BA2                     __ptext106:
 17592                           	opt stack 0
 17593  003BA2                     _FLASH_IsWriteDone:
 17594                           	opt stack 24
 17595                           
 17596                           ;memory.c: 191: return (EECON1bits.WR == 0);
 17597                           
 17598                           ;incstack = 0
 17599  003BA2  A2A6               	btfss	4006,1,c	;volsfr
 17600  003BA4  D001               	goto	u7811
 17601  003BA6  D002               	goto	u7810
 17602  003BA8                     u7811:
 17603  003BA8  0E01               	movlw	1
 17604  003BAA  0012               	return	
 17605  003BAC                     u7810:
 17606  003BAC  0E00               	movlw	0
 17607  003BAE  0012               	return	
 17608  003BB0                     __end_of_FLASH_IsWriteDone:
 17609                           	opt stack 0
 17610                           tosu	equ	0xFFF
 17611                           tosh	equ	0xFFE
 17612                           tosl	equ	0xFFD
 17613                           pclath	equ	0xFFA
 17614                           tblptru	equ	0xFF8
 17615                           tblptrh	equ	0xFF7
 17616                           tblptrl	equ	0xFF6
 17617                           tablat	equ	0xFF5
 17618                           prodh	equ	0xFF4
 17619                           prodl	equ	0xFF3
 17620                           intcon	equ	0xFF2
 17621                           intcon2	equ	0xFF1
 17622                           postinc0	equ	0xFEE
 17623                           plusw0	equ	0xFEB
 17624                           wreg	equ	0xFE8
 17625                           indf1	equ	0xFE7
 17626                           postinc1	equ	0xFE6
 17627                           postdec1	equ	0xFE5
 17628                           fsr1h	equ	0xFE2
 17629                           fsr1l	equ	0xFE1
 17630                           indf2	equ	0xFDF
 17631                           postinc2	equ	0xFDE
 17632                           postdec2	equ	0xFDD
 17633                           plusw2	equ	0xFDB
 17634                           fsr2h	equ	0xFDA
 17635                           fsr2l	equ	0xFD9
 17636                           status	equ	0xFD8
 17637                           
 17638 ;; *************** function _ADC_GetConversion *****************
 17639 ;; Defined at:
 17640 ;;		line 106 in file "mcc_generated_files/adc.c"
 17641 ;; Parameters:    Size  Location     Type
 17642 ;;  channel         1    wreg     enum E6975
 17643 ;; Auto vars:     Size  Location     Type
 17644 ;;  channel         1   27[COMRAM] enum E6975
 17645 ;; Return value:  Size  Location     Type
 17646 ;;                  2   23[COMRAM] unsigned int 
 17647 ;; Registers used:
 17648 ;;		wreg, status,2, status,0
 17649 ;; Tracked objects:
 17650 ;;		On entry : 0/0
 17651 ;;		On exit  : 0/0
 17652 ;;		Unchanged: 0/0
 17653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17654 ;;      Params:         2       0       0       0       0       0       0
 17655 ;;      Locals:         1       0       0       0       0       0       0
 17656 ;;      Temps:          2       0       0       0       0       0       0
 17657 ;;      Totals:         5       0       0       0       0       0       0
 17658 ;;Total ram usage:        5 bytes
 17659 ;; Hardware stack levels used:    1
 17660 ;; Hardware stack levels required when called:    3
 17661 ;; This function calls:
 17662 ;;		Nothing
 17663 ;; This function is called by:
 17664 ;;		_AdcConvert
 17665 ;; This function uses a non-reentrant model
 17666 ;;
 17667                           
 17668                           	psect	text107
 17669  00383C                     __ptext107:
 17670                           	opt stack 0
 17671  00383C                     _ADC_GetConversion:
 17672                           	opt stack 26
 17673                           
 17674                           ;incstack = 0
 17675                           ;ADC_GetConversion@channel stored from wreg
 17676  00383C  6E1C               	movwf	ADC_GetConversion@channel,c
 17677                           
 17678                           ;adc.c: 109: ADCON0bits.CHS = channel;
 17679  00383E  C01C  F01A         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
 17680  003842  461A               	rlncf	??_ADC_GetConversion,f,c
 17681  003844  461A               	rlncf	??_ADC_GetConversion,f,c
 17682  003846  50C2               	movf	4034,w,c	;volatile
 17683  003848  181A               	xorwf	??_ADC_GetConversion,w,c
 17684  00384A  0B83               	andlw	-125
 17685  00384C  181A               	xorwf	??_ADC_GetConversion,w,c
 17686  00384E  6EC2               	movwf	4034,c	;volatile
 17687                           
 17688                           ;adc.c: 112: ADCON0bits.ADON = 1;
 17689  003850  80C2               	bsf	4034,0,c	;volatile
 17690                           
 17691                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
 17692  003852  82C2               	bsf	4034,1,c	;volatile
 17693  003854                     
 17694                           ;adc.c: 119: {
 17695  003854  B2C2               	btfsc	4034,1,c	;volatile
 17696  003856  D7FE               	goto	l1076
 17697                           
 17698                           ;adc.c: 120: }
 17699                           ;adc.c: 122: return ((ADRESH << 8) + ADRESL);
 17700  003858  50C4               	movf	4036,w,c	;volatile
 17701  00385A  6E1B               	movwf	(??_ADC_GetConversion+1)& (0+255),c
 17702  00385C  6A1A               	clrf	??_ADC_GetConversion& (0+255),c
 17703  00385E  50C3               	movf	4035,w,c	;volatile
 17704  003860  241A               	addwf	??_ADC_GetConversion,w,c
 17705  003862  6E18               	movwf	?_ADC_GetConversion,c
 17706  003864  0E00               	movlw	0
 17707  003866  201B               	addwfc	??_ADC_GetConversion+1,w,c
 17708  003868  6E19               	movwf	?_ADC_GetConversion+1,c
 17709  00386A  0012               	return	
 17710  00386C                     __end_of_ADC_GetConversion:
 17711                           	opt stack 0
 17712                           tosu	equ	0xFFF
 17713                           tosh	equ	0xFFE
 17714                           tosl	equ	0xFFD
 17715                           pclath	equ	0xFFA
 17716                           tblptru	equ	0xFF8
 17717                           tblptrh	equ	0xFF7
 17718                           tblptrl	equ	0xFF6
 17719                           tablat	equ	0xFF5
 17720                           prodh	equ	0xFF4
 17721                           prodl	equ	0xFF3
 17722                           intcon	equ	0xFF2
 17723                           intcon2	equ	0xFF1
 17724                           postinc0	equ	0xFEE
 17725                           plusw0	equ	0xFEB
 17726                           wreg	equ	0xFE8
 17727                           indf1	equ	0xFE7
 17728                           postinc1	equ	0xFE6
 17729                           postdec1	equ	0xFE5
 17730                           fsr1h	equ	0xFE2
 17731                           fsr1l	equ	0xFE1
 17732                           indf2	equ	0xFDF
 17733                           postinc2	equ	0xFDE
 17734                           postdec2	equ	0xFDD
 17735                           plusw2	equ	0xFDB
 17736                           fsr2h	equ	0xFDA
 17737                           fsr2l	equ	0xFD9
 17738                           status	equ	0xFD8
 17739                           
 17740 ;; *************** function _INTERRUPT_InterruptManager *****************
 17741 ;; Defined at:
 17742 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 17743 ;; Parameters:    Size  Location     Type
 17744 ;;		None
 17745 ;; Auto vars:     Size  Location     Type
 17746 ;;		None
 17747 ;; Return value:  Size  Location     Type
 17748 ;;                  1    wreg      void 
 17749 ;; Registers used:
 17750 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17751 ;; Tracked objects:
 17752 ;;		On entry : 0/0
 17753 ;;		On exit  : 0/0
 17754 ;;		Unchanged: 0/0
 17755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17756 ;;      Params:         0       0       0       0       0       0       0
 17757 ;;      Locals:         0       0       0       0       0       0       0
 17758 ;;      Temps:         18       0       0       0       0       0       0
 17759 ;;      Totals:        18       0       0       0       0       0       0
 17760 ;;Total ram usage:       18 bytes
 17761 ;; Hardware stack levels used:    1
 17762 ;; Hardware stack levels required when called:    2
 17763 ;; This function calls:
 17764 ;;		_EUSART1_Receive_ISR
 17765 ;;		_EUSART1_Transmit_ISR
 17766 ;;		_MEMORY_ISR
 17767 ;;		_PIN_MANAGER_IOC
 17768 ;;		_TMR0_ISR
 17769 ;; This function is called by:
 17770 ;;		Interrupt level 2
 17771 ;; This function uses a non-reentrant model
 17772 ;;
 17773                           
 17774                           	psect	intcode
 17775  000008                     __pintcode:
 17776                           	opt stack 0
 17777  000008                     _INTERRUPT_InterruptManager:
 17778                           	opt stack 18
 17779                           
 17780                           ;incstack = 0
 17781  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 17782  00000A  CFFA F006          	movff	pclath,??_INTERRUPT_InterruptManager
 17783  00000E  CFFB F007          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 17784  000012  CFE9 F008          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 17785  000016  CFEA F009          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 17786  00001A  CFE1 F00A          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 17787  00001E  CFE2 F00B          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 17788  000022  CFD9 F00C          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 17789  000026  CFDA F00D          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 17790  00002A  CFF3 F00E          	movff	prodl,??_INTERRUPT_InterruptManager+8
 17791  00002E  CFF4 F00F          	movff	prodh,??_INTERRUPT_InterruptManager+9
 17792  000032  CFF6 F010          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 17793  000036  CFF7 F011          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 17794  00003A  CFF8 F012          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 17795  00003E  CFF5 F013          	movff	tablat,??_INTERRUPT_InterruptManager+13
 17796  000042  C048  F014         	movff	btemp,??_INTERRUPT_InterruptManager+14
 17797  000046  C049  F015         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 17798  00004A  C04A  F016         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 17799  00004E  C04B  F017         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 17800                           
 17801                           ;interrupt_manager.c: 60: if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
 17802  000052  B6F2               	btfsc	intcon,3,c	;volatile
 17803  000054  A0F2               	btfss	intcon,0,c	;volatile
 17804  000056  D003               	goto	i2l801
 17805                           
 17806                           ;interrupt_manager.c: 61: {
 17807                           ;interrupt_manager.c: 62: PIN_MANAGER_IOC();
 17808  000058  EC14  F01E         	call	_PIN_MANAGER_IOC	;wreg free
 17809                           
 17810                           ;interrupt_manager.c: 63: }
 17811  00005C  D019               	goto	i2l810
 17812  00005E                     i2l801:
 17813                           
 17814                           ;interrupt_manager.c: 64: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 17815  00005E  BAF2               	btfsc	intcon,5,c	;volatile
 17816  000060  A4F2               	btfss	intcon,2,c	;volatile
 17817  000062  D003               	goto	i2l803
 17818                           
 17819                           ;interrupt_manager.c: 65: {
 17820                           ;interrupt_manager.c: 66: TMR0_ISR();
 17821  000064  EC02  F015         	call	_TMR0_ISR	;wreg free
 17822                           
 17823                           ;interrupt_manager.c: 67: }
 17824  000068  D013               	goto	i2l810
 17825  00006A                     i2l803:
 17826                           
 17827                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1)
 17828  00006A  ACF2               	btfss	intcon,6,c	;volatile
 17829  00006C  D011               	goto	i2l810
 17830                           
 17831                           ;interrupt_manager.c: 69: {
 17832                           ;interrupt_manager.c: 70: if(PIE2bits.EEIE == 1 && PIR2bits.EEIF == 1)
 17833  00006E  B8A0               	btfsc	4000,4,c	;volatile
 17834  000070  A8A1               	btfss	4001,4,c	;volatile
 17835  000072  D003               	goto	i2l806
 17836                           
 17837                           ;interrupt_manager.c: 71: {
 17838                           ;interrupt_manager.c: 72: MEMORY_ISR();
 17839  000074  EC16  F01E         	call	_MEMORY_ISR	;wreg free
 17840                           
 17841                           ;interrupt_manager.c: 73: }
 17842  000078  D00B               	goto	i2l810
 17843  00007A                     i2l806:
 17844                           
 17845                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 17846  00007A  B89D               	btfsc	3997,4,c	;volatile
 17847  00007C  A89E               	btfss	3998,4,c	;volatile
 17848  00007E  D003               	goto	i2l808
 17849                           
 17850                           ;interrupt_manager.c: 75: {
 17851                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
 17852  000080  EC68  F01B         	call	_EUSART1_Transmit_ISR	;wreg free
 17853                           
 17854                           ;interrupt_manager.c: 77: }
 17855  000084  D005               	goto	i2l810
 17856  000086                     i2l808:
 17857                           
 17858                           ;interrupt_manager.c: 78: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 17859  000086  BA9D               	btfsc	3997,5,c	;volatile
 17860  000088  AA9E               	btfss	3998,5,c	;volatile
 17861  00008A  D002               	goto	i2l810
 17862                           
 17863                           ;interrupt_manager.c: 79: {
 17864                           ;interrupt_manager.c: 80: EUSART1_Receive_ISR();
 17865  00008C  EC36  F01C         	call	_EUSART1_Receive_ISR	;wreg free
 17866  000090                     i2l810:
 17867                           
 17868                           ;interrupt_manager.c: 87: else
 17869                           ;interrupt_manager.c: 88: {
 17870                           
 17871                           ;interrupt_manager.c: 85: }
 17872                           ;interrupt_manager.c: 86: }
 17873                           
 17874                           ;interrupt_manager.c: 82: else
 17875                           ;interrupt_manager.c: 83: {
 17876  000090  C017  F04B         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 17877  000094  C016  F04A         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 17878  000098  C015  F049         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 17879  00009C  C014  F048         	movff	??_INTERRUPT_InterruptManager+14,btemp
 17880  0000A0  C013  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 17881  0000A4  C012  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 17882  0000A8  C011  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 17883  0000AC  C010  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 17884  0000B0  C00F  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 17885  0000B4  C00E  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 17886  0000B8  C00D  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 17887  0000BC  C00C  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 17888  0000C0  C00B  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 17889  0000C4  C00A  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 17890  0000C8  C009  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 17891  0000CC  C008  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 17892  0000D0  C007  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 17893  0000D4  C006  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 17894  0000D8  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 17895  0000DA  0011               	retfie		f
 17896  0000DC                     __end_of_INTERRUPT_InterruptManager:
 17897                           	opt stack 0
 17898                           tosu	equ	0xFFF
 17899                           tosh	equ	0xFFE
 17900                           tosl	equ	0xFFD
 17901                           pclatu	equ	0xFFB
 17902                           pclath	equ	0xFFA
 17903                           tblptru	equ	0xFF8
 17904                           tblptrh	equ	0xFF7
 17905                           tblptrl	equ	0xFF6
 17906                           tablat	equ	0xFF5
 17907                           prodh	equ	0xFF4
 17908                           prodl	equ	0xFF3
 17909                           intcon	equ	0xFF2
 17910                           intcon2	equ	0xFF1
 17911                           postinc0	equ	0xFEE
 17912                           plusw0	equ	0xFEB
 17913                           fsr0h	equ	0xFEA
 17914                           fsr0l	equ	0xFE9
 17915                           wreg	equ	0xFE8
 17916                           indf1	equ	0xFE7
 17917                           postinc1	equ	0xFE6
 17918                           postdec1	equ	0xFE5
 17919                           fsr1h	equ	0xFE2
 17920                           fsr1l	equ	0xFE1
 17921                           indf2	equ	0xFDF
 17922                           postinc2	equ	0xFDE
 17923                           postdec2	equ	0xFDD
 17924                           plusw2	equ	0xFDB
 17925                           fsr2h	equ	0xFDA
 17926                           fsr2l	equ	0xFD9
 17927                           status	equ	0xFD8
 17928                           
 17929 ;; *************** function _TMR0_ISR *****************
 17930 ;; Defined at:
 17931 ;;		line 132 in file "mcc_generated_files/tmr0.c"
 17932 ;; Parameters:    Size  Location     Type
 17933 ;;		None
 17934 ;; Auto vars:     Size  Location     Type
 17935 ;;		None
 17936 ;; Return value:  Size  Location     Type
 17937 ;;                  1    wreg      void 
 17938 ;; Registers used:
 17939 ;;		wreg, status,2, status,0, cstack
 17940 ;; Tracked objects:
 17941 ;;		On entry : 0/0
 17942 ;;		On exit  : 0/0
 17943 ;;		Unchanged: 0/0
 17944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17945 ;;      Params:         0       0       0       0       0       0       0
 17946 ;;      Locals:         0       0       0       0       0       0       0
 17947 ;;      Temps:          0       0       0       0       0       0       0
 17948 ;;      Totals:         0       0       0       0       0       0       0
 17949 ;;Total ram usage:        0 bytes
 17950 ;; Hardware stack levels used:    1
 17951 ;; Hardware stack levels required when called:    1
 17952 ;; This function calls:
 17953 ;;		___lwmod
 17954 ;; This function is called by:
 17955 ;;		_INTERRUPT_InterruptManager
 17956 ;; This function uses a non-reentrant model
 17957 ;;
 17958                           
 17959                           	psect	text109
 17960  002A04                     __ptext109:
 17961                           	opt stack 0
 17962  002A04                     _TMR0_ISR:
 17963                           	opt stack 18
 17964                           
 17965                           ;tmr0.c: 134: static volatile uint16_t CountCallBack = 0;
 17966                           ;tmr0.c: 137: INTCONbits.TMR0IF = 0;
 17967                           
 17968                           ;incstack = 0
 17969  002A04  94F2               	bcf	intcon,2,c	;volatile
 17970                           
 17971                           ;tmr0.c: 141: TMR0H = timer0ReloadVal >> 8;
 17972  002A06  5047               	movf	_timer0ReloadVal+1,w,c	;volatile
 17973  002A08  6ED7               	movwf	4055,c	;volatile
 17974                           
 17975                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal;
 17976  002A0A  C046  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 17977                           
 17978                           ;tmr0.c: 146: CountCallBack ++;
 17979  002A0E  4A35               	infsnz	TMR0_ISR@CountCallBack,f,c	;volatile
 17980  002A10  2A36               	incf	TMR0_ISR@CountCallBack+1,f,c	;volatile
 17981                           
 17982                           ;tmr0.c: 147: if ((CountCallBack % 20) == 0)
 17983  002A12  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 17984  002A16  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 17985  002A1A  0E00               	movlw	0
 17986  002A1C  6E04               	movwf	___lwmod@divisor+1,c
 17987  002A1E  0E14               	movlw	20
 17988  002A20  6E03               	movwf	___lwmod@divisor,c
 17989  002A22  EC99  F01A         	call	___lwmod	;wreg free
 17990  002A26  5001               	movf	?___lwmod,w,c
 17991  002A28  1002               	iorwf	?___lwmod+1,w,c
 17992  002A2A  A4D8               	btfss	status,2,c
 17993  002A2C  D003               	goto	i2l1032
 17994                           
 17995                           ;tmr0.c: 148: {
 17996                           ;tmr0.c: 149: TimerOneSecFlag = 1;
 17997  002A2E  0E01               	movlw	1
 17998  002A30  0100               	movlb	0	; () banked
 17999  002A32  6FE7               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
 18000  002A34                     i2l1032:
 18001                           
 18002                           ;tmr0.c: 150: }
 18003                           ;tmr0.c: 152: if ((CountCallBack % 50) == 0)
 18004                           
 18005                           ; BSR set to: 0
 18006  002A34  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 18007  002A38  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 18008  002A3C  0E00               	movlw	0
 18009  002A3E  6E04               	movwf	___lwmod@divisor+1,c
 18010  002A40  0E32               	movlw	50
 18011  002A42  6E03               	movwf	___lwmod@divisor,c
 18012  002A44  EC99  F01A         	call	___lwmod	;wreg free
 18013  002A48  5001               	movf	?___lwmod,w,c
 18014  002A4A  1002               	iorwf	?___lwmod+1,w,c
 18015  002A4C  A4D8               	btfss	status,2,c
 18016  002A4E  D003               	goto	i2l1033
 18017                           
 18018                           ;tmr0.c: 153: {
 18019                           ;tmr0.c: 154: TimerSamplingFlag = 1;
 18020  002A50  0E01               	movlw	1
 18021  002A52  0100               	movlb	0	; () banked
 18022  002A54  6FE6               	movwf	_TimerSamplingFlag& (0+255),b	;volatile
 18023  002A56                     i2l1033:
 18024                           
 18025                           ;tmr0.c: 155: }
 18026                           ;tmr0.c: 156: if ((CountCallBack % 300) == 0)
 18027                           
 18028                           ; BSR set to: 0
 18029  002A56  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 18030  002A5A  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 18031  002A5E  0E01               	movlw	1
 18032  002A60  6E04               	movwf	___lwmod@divisor+1,c
 18033  002A62  0E2C               	movlw	44
 18034  002A64  6E03               	movwf	___lwmod@divisor,c
 18035  002A66  EC99  F01A         	call	___lwmod	;wreg free
 18036  002A6A  5001               	movf	?___lwmod,w,c
 18037  002A6C  1002               	iorwf	?___lwmod+1,w,c
 18038  002A6E  A4D8               	btfss	status,2,c
 18039  002A70  D003               	goto	i2l1034
 18040                           
 18041                           ;tmr0.c: 157: {
 18042                           ;tmr0.c: 158: TimerKeepAliveFlag = 1;
 18043  002A72  0E01               	movlw	1
 18044  002A74  0100               	movlb	0	; () banked
 18045  002A76  6FE5               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
 18046  002A78                     i2l1034:
 18047                           
 18048                           ;tmr0.c: 159: }
 18049                           ;tmr0.c: 161: CountCallBack %= 300;
 18050                           
 18051                           ; BSR set to: 0
 18052  002A78  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 18053  002A7C  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 18054  002A80  0E01               	movlw	1
 18055  002A82  6E04               	movwf	___lwmod@divisor+1,c
 18056  002A84  0E2C               	movlw	44
 18057  002A86  6E03               	movwf	___lwmod@divisor,c
 18058  002A88  EC99  F01A         	call	___lwmod	;wreg free
 18059  002A8C  C001  F035         	movff	?___lwmod,TMR0_ISR@CountCallBack	;volatile
 18060  002A90  C002  F036         	movff	?___lwmod+1,TMR0_ISR@CountCallBack+1	;volatile
 18061  002A94  0012               	return		;funcret
 18062  002A96                     __end_of_TMR0_ISR:
 18063                           	opt stack 0
 18064                           tosu	equ	0xFFF
 18065                           tosh	equ	0xFFE
 18066                           tosl	equ	0xFFD
 18067                           pclatu	equ	0xFFB
 18068                           pclath	equ	0xFFA
 18069                           tblptru	equ	0xFF8
 18070                           tblptrh	equ	0xFF7
 18071                           tblptrl	equ	0xFF6
 18072                           tablat	equ	0xFF5
 18073                           prodh	equ	0xFF4
 18074                           prodl	equ	0xFF3
 18075                           intcon	equ	0xFF2
 18076                           intcon2	equ	0xFF1
 18077                           postinc0	equ	0xFEE
 18078                           plusw0	equ	0xFEB
 18079                           fsr0h	equ	0xFEA
 18080                           fsr0l	equ	0xFE9
 18081                           wreg	equ	0xFE8
 18082                           indf1	equ	0xFE7
 18083                           postinc1	equ	0xFE6
 18084                           postdec1	equ	0xFE5
 18085                           fsr1h	equ	0xFE2
 18086                           fsr1l	equ	0xFE1
 18087                           indf2	equ	0xFDF
 18088                           postinc2	equ	0xFDE
 18089                           postdec2	equ	0xFDD
 18090                           plusw2	equ	0xFDB
 18091                           fsr2h	equ	0xFDA
 18092                           fsr2l	equ	0xFD9
 18093                           status	equ	0xFD8
 18094                           
 18095 ;; *************** function ___lwmod *****************
 18096 ;; Defined at:
 18097 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 18098 ;; Parameters:    Size  Location     Type
 18099 ;;  dividend        2    0[COMRAM] unsigned int 
 18100 ;;  divisor         2    2[COMRAM] unsigned int 
 18101 ;; Auto vars:     Size  Location     Type
 18102 ;;  counter         1    4[COMRAM] unsigned char 
 18103 ;; Return value:  Size  Location     Type
 18104 ;;                  2    0[COMRAM] unsigned int 
 18105 ;; Registers used:
 18106 ;;		wreg, status,2, status,0
 18107 ;; Tracked objects:
 18108 ;;		On entry : 0/0
 18109 ;;		On exit  : 0/0
 18110 ;;		Unchanged: 0/0
 18111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18112 ;;      Params:         4       0       0       0       0       0       0
 18113 ;;      Locals:         1       0       0       0       0       0       0
 18114 ;;      Temps:          0       0       0       0       0       0       0
 18115 ;;      Totals:         5       0       0       0       0       0       0
 18116 ;;Total ram usage:        5 bytes
 18117 ;; Hardware stack levels used:    1
 18118 ;; This function calls:
 18119 ;;		Nothing
 18120 ;; This function is called by:
 18121 ;;		_TMR0_ISR
 18122 ;; This function uses a non-reentrant model
 18123 ;;
 18124                           
 18125                           	psect	text110
 18126  003532                     __ptext110:
 18127                           	opt stack 0
 18128  003532                     ___lwmod:
 18129                           	opt stack 18
 18130                           
 18131                           ;incstack = 0
 18132  003532  5003               	movf	___lwmod@divisor,w,c
 18133  003534  1004               	iorwf	___lwmod@divisor+1,w,c
 18134  003536  B4D8               	btfsc	status,2,c
 18135  003538  D018               	goto	i2l1887
 18136  00353A  0E01               	movlw	1
 18137  00353C  6E05               	movwf	___lwmod@counter,c
 18138  00353E  D004               	goto	i2l1882
 18139  003540  90D8               	bcf	status,0,c
 18140  003542  3603               	rlcf	___lwmod@divisor,f,c
 18141  003544  3604               	rlcf	___lwmod@divisor+1,f,c
 18142  003546  2A05               	incf	___lwmod@counter,f,c
 18143  003548                     i2l1882:
 18144  003548  AE04               	btfss	___lwmod@divisor+1,7,c
 18145  00354A  D7FA               	goto	i2l1883
 18146  00354C                     i2u566_40:
 18147  00354C  5003               	movf	___lwmod@divisor,w,c
 18148  00354E  5C01               	subwf	___lwmod@dividend,w,c
 18149  003550  5004               	movf	___lwmod@divisor+1,w,c
 18150  003552  5802               	subwfb	___lwmod@dividend+1,w,c
 18151  003554  A0D8               	btfss	status,0,c
 18152  003556  D004               	goto	i2l1886
 18153  003558  5003               	movf	___lwmod@divisor,w,c
 18154  00355A  5E01               	subwf	___lwmod@dividend,f,c
 18155  00355C  5004               	movf	___lwmod@divisor+1,w,c
 18156  00355E  5A02               	subwfb	___lwmod@dividend+1,f,c
 18157  003560                     i2l1886:
 18158  003560  90D8               	bcf	status,0,c
 18159  003562  3204               	rrcf	___lwmod@divisor+1,f,c
 18160  003564  3203               	rrcf	___lwmod@divisor,f,c
 18161  003566  2E05               	decfsz	___lwmod@counter,f,c
 18162  003568  D7F1               	goto	i2u566_40
 18163  00356A                     i2l1887:
 18164  00356A  C001  F001         	movff	___lwmod@dividend,?___lwmod
 18165  00356E  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
 18166  003572  0012               	return		;funcret
 18167  003574                     __end_of___lwmod:
 18168                           	opt stack 0
 18169                           tosu	equ	0xFFF
 18170                           tosh	equ	0xFFE
 18171                           tosl	equ	0xFFD
 18172                           pclatu	equ	0xFFB
 18173                           pclath	equ	0xFFA
 18174                           tblptru	equ	0xFF8
 18175                           tblptrh	equ	0xFF7
 18176                           tblptrl	equ	0xFF6
 18177                           tablat	equ	0xFF5
 18178                           prodh	equ	0xFF4
 18179                           prodl	equ	0xFF3
 18180                           intcon	equ	0xFF2
 18181                           intcon2	equ	0xFF1
 18182                           postinc0	equ	0xFEE
 18183                           plusw0	equ	0xFEB
 18184                           fsr0h	equ	0xFEA
 18185                           fsr0l	equ	0xFE9
 18186                           wreg	equ	0xFE8
 18187                           indf1	equ	0xFE7
 18188                           postinc1	equ	0xFE6
 18189                           postdec1	equ	0xFE5
 18190                           fsr1h	equ	0xFE2
 18191                           fsr1l	equ	0xFE1
 18192                           indf2	equ	0xFDF
 18193                           postinc2	equ	0xFDE
 18194                           postdec2	equ	0xFDD
 18195                           plusw2	equ	0xFDB
 18196                           fsr2h	equ	0xFDA
 18197                           fsr2l	equ	0xFD9
 18198                           status	equ	0xFD8
 18199                           
 18200 ;; *************** function _PIN_MANAGER_IOC *****************
 18201 ;; Defined at:
 18202 ;;		line 96 in file "mcc_generated_files/pin_manager.c"
 18203 ;; Parameters:    Size  Location     Type
 18204 ;;		None
 18205 ;; Auto vars:     Size  Location     Type
 18206 ;;		None
 18207 ;; Return value:  Size  Location     Type
 18208 ;;                  1    wreg      void 
 18209 ;; Registers used:
 18210 ;;		None
 18211 ;; Tracked objects:
 18212 ;;		On entry : 0/0
 18213 ;;		On exit  : 0/0
 18214 ;;		Unchanged: 0/0
 18215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18216 ;;      Params:         0       0       0       0       0       0       0
 18217 ;;      Locals:         0       0       0       0       0       0       0
 18218 ;;      Temps:          0       0       0       0       0       0       0
 18219 ;;      Totals:         0       0       0       0       0       0       0
 18220 ;;Total ram usage:        0 bytes
 18221 ;; Hardware stack levels used:    1
 18222 ;; This function calls:
 18223 ;;		Nothing
 18224 ;; This function is called by:
 18225 ;;		_INTERRUPT_InterruptManager
 18226 ;; This function uses a non-reentrant model
 18227 ;;
 18228                           
 18229                           	psect	text111
 18230  003C28                     __ptext111:
 18231                           	opt stack 0
 18232  003C28                     _PIN_MANAGER_IOC:
 18233                           	opt stack 19
 18234                           
 18235                           ;pin_manager.c: 100: INTCONbits.RBIF = 0;
 18236                           
 18237                           ;incstack = 0
 18238  003C28  90F2               	bcf	intcon,0,c	;volatile
 18239  003C2A  0012               	return		;funcret
 18240  003C2C                     __end_of_PIN_MANAGER_IOC:
 18241                           	opt stack 0
 18242                           tosu	equ	0xFFF
 18243                           tosh	equ	0xFFE
 18244                           tosl	equ	0xFFD
 18245                           pclatu	equ	0xFFB
 18246                           pclath	equ	0xFFA
 18247                           tblptru	equ	0xFF8
 18248                           tblptrh	equ	0xFF7
 18249                           tblptrl	equ	0xFF6
 18250                           tablat	equ	0xFF5
 18251                           prodh	equ	0xFF4
 18252                           prodl	equ	0xFF3
 18253                           intcon	equ	0xFF2
 18254                           intcon2	equ	0xFF1
 18255                           postinc0	equ	0xFEE
 18256                           plusw0	equ	0xFEB
 18257                           fsr0h	equ	0xFEA
 18258                           fsr0l	equ	0xFE9
 18259                           wreg	equ	0xFE8
 18260                           indf1	equ	0xFE7
 18261                           postinc1	equ	0xFE6
 18262                           postdec1	equ	0xFE5
 18263                           fsr1h	equ	0xFE2
 18264                           fsr1l	equ	0xFE1
 18265                           indf2	equ	0xFDF
 18266                           postinc2	equ	0xFDE
 18267                           postdec2	equ	0xFDD
 18268                           plusw2	equ	0xFDB
 18269                           fsr2h	equ	0xFDA
 18270                           fsr2l	equ	0xFD9
 18271                           status	equ	0xFD8
 18272                           
 18273 ;; *************** function _MEMORY_ISR *****************
 18274 ;; Defined at:
 18275 ;;		line 206 in file "mcc_generated_files/memory.c"
 18276 ;; Parameters:    Size  Location     Type
 18277 ;;		None
 18278 ;; Auto vars:     Size  Location     Type
 18279 ;;		None
 18280 ;; Return value:  Size  Location     Type
 18281 ;;                  1    wreg      void 
 18282 ;; Registers used:
 18283 ;;		None
 18284 ;; Tracked objects:
 18285 ;;		On entry : 0/0
 18286 ;;		On exit  : 0/0
 18287 ;;		Unchanged: 0/0
 18288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18289 ;;      Params:         0       0       0       0       0       0       0
 18290 ;;      Locals:         0       0       0       0       0       0       0
 18291 ;;      Temps:          0       0       0       0       0       0       0
 18292 ;;      Totals:         0       0       0       0       0       0       0
 18293 ;;Total ram usage:        0 bytes
 18294 ;; Hardware stack levels used:    1
 18295 ;; This function calls:
 18296 ;;		Nothing
 18297 ;; This function is called by:
 18298 ;;		_INTERRUPT_InterruptManager
 18299 ;; This function uses a non-reentrant model
 18300 ;;
 18301                           
 18302                           	psect	text112
 18303  003C2C                     __ptext112:
 18304                           	opt stack 0
 18305  003C2C                     _MEMORY_ISR:
 18306                           	opt stack 19
 18307                           
 18308                           ;memory.c: 209: PIR2bits.EEIF = 0;
 18309                           
 18310                           ;incstack = 0
 18311  003C2C  98A1               	bcf	4001,4,c	;volatile
 18312  003C2E  0012               	return		;funcret
 18313  003C30                     __end_of_MEMORY_ISR:
 18314                           	opt stack 0
 18315                           tosu	equ	0xFFF
 18316                           tosh	equ	0xFFE
 18317                           tosl	equ	0xFFD
 18318                           pclatu	equ	0xFFB
 18319                           pclath	equ	0xFFA
 18320                           tblptru	equ	0xFF8
 18321                           tblptrh	equ	0xFF7
 18322                           tblptrl	equ	0xFF6
 18323                           tablat	equ	0xFF5
 18324                           prodh	equ	0xFF4
 18325                           prodl	equ	0xFF3
 18326                           intcon	equ	0xFF2
 18327                           intcon2	equ	0xFF1
 18328                           postinc0	equ	0xFEE
 18329                           plusw0	equ	0xFEB
 18330                           fsr0h	equ	0xFEA
 18331                           fsr0l	equ	0xFE9
 18332                           wreg	equ	0xFE8
 18333                           indf1	equ	0xFE7
 18334                           postinc1	equ	0xFE6
 18335                           postdec1	equ	0xFE5
 18336                           fsr1h	equ	0xFE2
 18337                           fsr1l	equ	0xFE1
 18338                           indf2	equ	0xFDF
 18339                           postinc2	equ	0xFDE
 18340                           postdec2	equ	0xFDD
 18341                           plusw2	equ	0xFDB
 18342                           fsr2h	equ	0xFDA
 18343                           fsr2l	equ	0xFD9
 18344                           status	equ	0xFD8
 18345                           
 18346 ;; *************** function _EUSART1_Transmit_ISR *****************
 18347 ;; Defined at:
 18348 ;;		line 181 in file "mcc_generated_files/eusart1.c"
 18349 ;; Parameters:    Size  Location     Type
 18350 ;;		None
 18351 ;; Auto vars:     Size  Location     Type
 18352 ;;		None
 18353 ;; Return value:  Size  Location     Type
 18354 ;;                  1    wreg      void 
 18355 ;; Registers used:
 18356 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 18357 ;; Tracked objects:
 18358 ;;		On entry : 0/0
 18359 ;;		On exit  : 0/0
 18360 ;;		Unchanged: 0/0
 18361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18362 ;;      Params:         0       0       0       0       0       0       0
 18363 ;;      Locals:         0       0       0       0       0       0       0
 18364 ;;      Temps:          0       0       0       0       0       0       0
 18365 ;;      Totals:         0       0       0       0       0       0       0
 18366 ;;Total ram usage:        0 bytes
 18367 ;; Hardware stack levels used:    1
 18368 ;; This function calls:
 18369 ;;		Nothing
 18370 ;; This function is called by:
 18371 ;;		_INTERRUPT_InterruptManager
 18372 ;; This function uses a non-reentrant model
 18373 ;;
 18374                           
 18375                           	psect	text113
 18376  0036D0                     __ptext113:
 18377                           	opt stack 0
 18378  0036D0                     _EUSART1_Transmit_ISR:
 18379                           	opt stack 19
 18380                           
 18381                           ;eusart1.c: 185: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 18382                           
 18383                           ;incstack = 0
 18384  0036D0  0E46               	movlw	70
 18385  0036D2  0101               	movlb	1	; () banked
 18386  0036D4  61F1               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 18387  0036D6  D012               	goto	i2l872
 18388                           
 18389                           ; BSR set to: 1
 18390                           ;eusart1.c: 186: {
 18391                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 18392  0036D8  5039               	movf	_eusart1TxTail,w,c	;volatile
 18393  0036DA  0D01               	mullw	1
 18394  0036DC  0E00               	movlw	low _eusart1TxBuffer
 18395  0036DE  24F3               	addwf	prodl,w,c
 18396  0036E0  6ED9               	movwf	fsr2l,c
 18397  0036E2  0E01               	movlw	high _eusart1TxBuffer
 18398  0036E4  20F4               	addwfc	prodh,w,c
 18399  0036E6  6EDA               	movwf	fsr2h,c
 18400  0036E8  50DF               	movf	indf2,w,c
 18401  0036EA  6EAD               	movwf	4013,c	;volatile
 18402                           
 18403                           ; BSR set to: 1
 18404  0036EC  2A39               	incf	_eusart1TxTail,f,c	;volatile
 18405                           
 18406                           ; BSR set to: 1
 18407                           ;eusart1.c: 188: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 18408  0036EE  0E45               	movlw	69
 18409  0036F0  6439               	cpfsgt	_eusart1TxTail,c	;volatile
 18410  0036F2  D002               	goto	i2l873
 18411                           
 18412                           ; BSR set to: 1
 18413                           ;eusart1.c: 189: {
 18414                           ;eusart1.c: 190: eusart1TxTail = 0;
 18415  0036F4  0E00               	movlw	0
 18416  0036F6  6E39               	movwf	_eusart1TxTail,c	;volatile
 18417  0036F8                     i2l873:
 18418                           
 18419                           ; BSR set to: 1
 18420                           ;eusart1.c: 191: }
 18421                           ;eusart1.c: 192: eusart1TxBufferRemaining++;
 18422                           
 18423                           ; BSR set to: 1
 18424  0036F8  2BF1               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 18425                           
 18426                           ;eusart1.c: 193: }
 18427  0036FA  0012               	return	
 18428  0036FC                     i2l872:
 18429                           
 18430                           ; BSR set to: 1
 18431                           ;eusart1.c: 194: else
 18432                           ;eusart1.c: 195: {
 18433                           ;eusart1.c: 196: PIE1bits.TX1IE = 0;
 18434  0036FC  989D               	bcf	3997,4,c	;volatile
 18435                           
 18436                           ; BSR set to: 1
 18437                           ;eusart1.c: 197: eusart1TxTail = 0;
 18438  0036FE  0E00               	movlw	0
 18439  003700  6E39               	movwf	_eusart1TxTail,c	;volatile
 18440                           
 18441                           ;eusart1.c: 198: eusart1TxHead = 0;
 18442  003702  0E00               	movlw	0
 18443  003704  6E3A               	movwf	_eusart1TxHead,c	;volatile
 18444  003706  0012               	return	
 18445  003708                     __end_of_EUSART1_Transmit_ISR:
 18446                           	opt stack 0
 18447                           tosu	equ	0xFFF
 18448                           tosh	equ	0xFFE
 18449                           tosl	equ	0xFFD
 18450                           pclatu	equ	0xFFB
 18451                           pclath	equ	0xFFA
 18452                           tblptru	equ	0xFF8
 18453                           tblptrh	equ	0xFF7
 18454                           tblptrl	equ	0xFF6
 18455                           tablat	equ	0xFF5
 18456                           prodh	equ	0xFF4
 18457                           prodl	equ	0xFF3
 18458                           intcon	equ	0xFF2
 18459                           intcon2	equ	0xFF1
 18460                           postinc0	equ	0xFEE
 18461                           plusw0	equ	0xFEB
 18462                           fsr0h	equ	0xFEA
 18463                           fsr0l	equ	0xFE9
 18464                           wreg	equ	0xFE8
 18465                           indf1	equ	0xFE7
 18466                           postinc1	equ	0xFE6
 18467                           postdec1	equ	0xFE5
 18468                           fsr1h	equ	0xFE2
 18469                           fsr1l	equ	0xFE1
 18470                           indf2	equ	0xFDF
 18471                           postinc2	equ	0xFDE
 18472                           postdec2	equ	0xFDD
 18473                           plusw2	equ	0xFDB
 18474                           fsr2h	equ	0xFDA
 18475                           fsr2l	equ	0xFD9
 18476                           status	equ	0xFD8
 18477                           
 18478 ;; *************** function _EUSART1_Receive_ISR *****************
 18479 ;; Defined at:
 18480 ;;		line 202 in file "mcc_generated_files/eusart1.c"
 18481 ;; Parameters:    Size  Location     Type
 18482 ;;		None
 18483 ;; Auto vars:     Size  Location     Type
 18484 ;;		None
 18485 ;; Return value:  Size  Location     Type
 18486 ;;                  1    wreg      void 
 18487 ;; Registers used:
 18488 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 18489 ;; Tracked objects:
 18490 ;;		On entry : 0/0
 18491 ;;		On exit  : 0/0
 18492 ;;		Unchanged: 0/0
 18493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18494 ;;      Params:         0       0       0       0       0       0       0
 18495 ;;      Locals:         0       0       0       0       0       0       0
 18496 ;;      Temps:          0       0       0       0       0       0       0
 18497 ;;      Totals:         0       0       0       0       0       0       0
 18498 ;;Total ram usage:        0 bytes
 18499 ;; Hardware stack levels used:    1
 18500 ;; This function calls:
 18501 ;;		Nothing
 18502 ;; This function is called by:
 18503 ;;		_INTERRUPT_InterruptManager
 18504 ;; This function uses a non-reentrant model
 18505 ;;
 18506                           
 18507                           	psect	text114
 18508  00386C                     __ptext114:
 18509                           	opt stack 0
 18510  00386C                     _EUSART1_Receive_ISR:
 18511                           	opt stack 19
 18512                           
 18513                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
 18514                           
 18515                           ; BSR set to: 1
 18516                           ;incstack = 0
 18517  00386C  A2AB               	btfss	4011,1,c	;volatile
 18518  00386E  D002               	goto	i2l878
 18519                           
 18520                           ;eusart1.c: 206: {
 18521                           ;eusart1.c: 208: RCSTA1bits.CREN = 0;
 18522  003870  98AB               	bcf	4011,4,c	;volatile
 18523                           
 18524                           ;eusart1.c: 209: RCSTA1bits.CREN = 1;
 18525  003872  88AB               	bsf	4011,4,c	;volatile
 18526  003874                     i2l878:
 18527                           
 18528                           ;eusart1.c: 210: }
 18529                           ;eusart1.c: 215: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 18530  003874  5038               	movf	_eusart1RxHead,w,c	;volatile
 18531  003876  0D01               	mullw	1
 18532  003878  0E46               	movlw	low _eusart1RxBuffer
 18533  00387A  24F3               	addwf	prodl,w,c
 18534  00387C  6ED9               	movwf	fsr2l,c
 18535  00387E  0E01               	movlw	high _eusart1RxBuffer
 18536  003880  20F4               	addwfc	prodh,w,c
 18537  003882  6EDA               	movwf	fsr2h,c
 18538  003884  CFAE FFDF          	movff	4014,indf2	;volatile
 18539  003888  2A38               	incf	_eusart1RxHead,f,c	;volatile
 18540                           
 18541                           ;eusart1.c: 216: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 18542  00388A  0E27               	movlw	39
 18543  00388C  6438               	cpfsgt	_eusart1RxHead,c	;volatile
 18544  00388E  D002               	goto	i2l879
 18545                           
 18546                           ;eusart1.c: 217: {
 18547                           ;eusart1.c: 218: eusart1RxHead = 0;
 18548  003890  0E00               	movlw	0
 18549  003892  6E38               	movwf	_eusart1RxHead,c	;volatile
 18550  003894                     i2l879:
 18551                           
 18552                           ;eusart1.c: 219: }
 18553                           ;eusart1.c: 220: eusart1RxCount++;
 18554  003894  0100               	movlb	0	; () banked
 18555  003896  2BE3               	incf	_eusart1RxCount& (0+255),f,b	;volatile
 18556                           
 18557                           ; BSR set to: 0
 18558  003898  0012               	return		;funcret
 18559  00389A                     __end_of_EUSART1_Receive_ISR:
 18560                           	opt stack 0
 18561                           tosu	equ	0xFFF
 18562                           tosh	equ	0xFFE
 18563                           tosl	equ	0xFFD
 18564                           pclatu	equ	0xFFB
 18565                           pclath	equ	0xFFA
 18566                           tblptru	equ	0xFF8
 18567                           tblptrh	equ	0xFF7
 18568                           tblptrl	equ	0xFF6
 18569                           tablat	equ	0xFF5
 18570                           prodh	equ	0xFF4
 18571                           prodl	equ	0xFF3
 18572                           intcon	equ	0xFF2
 18573                           intcon2	equ	0xFF1
 18574                           postinc0	equ	0xFEE
 18575                           plusw0	equ	0xFEB
 18576                           fsr0h	equ	0xFEA
 18577                           fsr0l	equ	0xFE9
 18578                           wreg	equ	0xFE8
 18579                           indf1	equ	0xFE7
 18580                           postinc1	equ	0xFE6
 18581                           postdec1	equ	0xFE5
 18582                           fsr1h	equ	0xFE2
 18583                           fsr1l	equ	0xFE1
 18584                           indf2	equ	0xFDF
 18585                           postinc2	equ	0xFDE
 18586                           postdec2	equ	0xFDD
 18587                           plusw2	equ	0xFDB
 18588                           fsr2h	equ	0xFDA
 18589                           fsr2l	equ	0xFD9
 18590                           status	equ	0xFD8
 18591                           tosu	equ	0xFFF
 18592                           tosh	equ	0xFFE
 18593                           tosl	equ	0xFFD
 18594                           pclatu	equ	0xFFB
 18595                           pclath	equ	0xFFA
 18596                           tblptru	equ	0xFF8
 18597                           tblptrh	equ	0xFF7
 18598                           tblptrl	equ	0xFF6
 18599                           tablat	equ	0xFF5
 18600                           prodh	equ	0xFF4
 18601                           prodl	equ	0xFF3
 18602                           intcon	equ	0xFF2
 18603                           intcon2	equ	0xFF1
 18604                           postinc0	equ	0xFEE
 18605                           plusw0	equ	0xFEB
 18606                           fsr0h	equ	0xFEA
 18607                           fsr0l	equ	0xFE9
 18608                           wreg	equ	0xFE8
 18609                           indf1	equ	0xFE7
 18610                           postinc1	equ	0xFE6
 18611                           postdec1	equ	0xFE5
 18612                           fsr1h	equ	0xFE2
 18613                           fsr1l	equ	0xFE1
 18614                           indf2	equ	0xFDF
 18615                           postinc2	equ	0xFDE
 18616                           postdec2	equ	0xFDD
 18617                           plusw2	equ	0xFDB
 18618                           fsr2h	equ	0xFDA
 18619                           fsr2l	equ	0xFD9
 18620                           status	equ	0xFD8
 18621                           
 18622                           	psect	text115
 18623  000000                     __ptext115:
 18624                           	opt stack 0
 18625                           tosu	equ	0xFFF
 18626                           tosh	equ	0xFFE
 18627                           tosl	equ	0xFFD
 18628                           pclatu	equ	0xFFB
 18629                           pclath	equ	0xFFA
 18630                           tblptru	equ	0xFF8
 18631                           tblptrh	equ	0xFF7
 18632                           tblptrl	equ	0xFF6
 18633                           tablat	equ	0xFF5
 18634                           prodh	equ	0xFF4
 18635                           prodl	equ	0xFF3
 18636                           intcon	equ	0xFF2
 18637                           intcon2	equ	0xFF1
 18638                           postinc0	equ	0xFEE
 18639                           plusw0	equ	0xFEB
 18640                           fsr0h	equ	0xFEA
 18641                           fsr0l	equ	0xFE9
 18642                           wreg	equ	0xFE8
 18643                           indf1	equ	0xFE7
 18644                           postinc1	equ	0xFE6
 18645                           postdec1	equ	0xFE5
 18646                           fsr1h	equ	0xFE2
 18647                           fsr1l	equ	0xFE1
 18648                           indf2	equ	0xFDF
 18649                           postinc2	equ	0xFDE
 18650                           postdec2	equ	0xFDD
 18651                           plusw2	equ	0xFDB
 18652                           fsr2h	equ	0xFDA
 18653                           fsr2l	equ	0xFD9
 18654                           status	equ	0xFD8
 18655                           
 18656                           	psect	rparam
 18657  0000                     tosu	equ	0xFFF
 18658                           tosh	equ	0xFFE
 18659                           tosl	equ	0xFFD
 18660                           pclatu	equ	0xFFB
 18661                           pclath	equ	0xFFA
 18662                           tblptru	equ	0xFF8
 18663                           tblptrh	equ	0xFF7
 18664                           tblptrl	equ	0xFF6
 18665                           tablat	equ	0xFF5
 18666                           prodh	equ	0xFF4
 18667                           prodl	equ	0xFF3
 18668                           intcon	equ	0xFF2
 18669                           intcon2	equ	0xFF1
 18670                           postinc0	equ	0xFEE
 18671                           plusw0	equ	0xFEB
 18672                           fsr0h	equ	0xFEA
 18673                           fsr0l	equ	0xFE9
 18674                           wreg	equ	0xFE8
 18675                           indf1	equ	0xFE7
 18676                           postinc1	equ	0xFE6
 18677                           postdec1	equ	0xFE5
 18678                           fsr1h	equ	0xFE2
 18679                           fsr1l	equ	0xFE1
 18680                           indf2	equ	0xFDF
 18681                           postinc2	equ	0xFDE
 18682                           postdec2	equ	0xFDD
 18683                           plusw2	equ	0xFDB
 18684                           fsr2h	equ	0xFDA
 18685                           fsr2l	equ	0xFD9
 18686                           status	equ	0xFD8
 18687                           
 18688                           	psect	temp
 18689  000048                     btemp:
 18690                           	opt stack 0
 18691  000048                     	ds	1
 18692  0000                     int$flags	set	btemp
 18693  0000                     wtemp6	set	btemp+1
 18694                           tosu	equ	0xFFF
 18695                           tosh	equ	0xFFE
 18696                           tosl	equ	0xFFD
 18697                           pclatu	equ	0xFFB
 18698                           pclath	equ	0xFFA
 18699                           tblptru	equ	0xFF8
 18700                           tblptrh	equ	0xFF7
 18701                           tblptrl	equ	0xFF6
 18702                           tablat	equ	0xFF5
 18703                           prodh	equ	0xFF4
 18704                           prodl	equ	0xFF3
 18705                           intcon	equ	0xFF2
 18706                           intcon2	equ	0xFF1
 18707                           postinc0	equ	0xFEE
 18708                           plusw0	equ	0xFEB
 18709                           fsr0h	equ	0xFEA
 18710                           fsr0l	equ	0xFE9
 18711                           wreg	equ	0xFE8
 18712                           indf1	equ	0xFE7
 18713                           postinc1	equ	0xFE6
 18714                           postdec1	equ	0xFE5
 18715                           fsr1h	equ	0xFE2
 18716                           fsr1l	equ	0xFE1
 18717                           indf2	equ	0xFDF
 18718                           postinc2	equ	0xFDE
 18719                           postdec2	equ	0xFDD
 18720                           plusw2	equ	0xFDB
 18721                           fsr2h	equ	0xFDA
 18722                           fsr2l	equ	0xFD9
 18723                           status	equ	0xFD8


Data Sizes:
    Strings     21
    Constant    141
    Data        22
    BSS         255
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     48      71
    BANK0           160    123     140
    BANK1           256      0     242
    BANK2           256     44      44
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    readUartMessage$3312	PTR FTN()void  size(2) Largest target is 1
		 -> GroupDAC(), GroupFlashMemory(), GroupSynthesizers(), GroupAdc(), 
		 -> GroupStatusAndVersion(), GroupControlMcu(), 

    DacSetValue@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    SynthReadData@data	PTR unsigned char  size(2) Largest target is 0

    SetConversionResultFormat@data	PTR unsigned char  size(2) Largest target is 0

    SetAdcOperationMode@data	PTR unsigned char  size(2) Largest target is 0

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    strtol@endptr	PTR PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strtol@s	PTR const unsigned char  size(2) Largest target is 10
		 -> GetIntFromUartData@dataRegArr(BANK0[10]), 

    memset@p1	PTR void  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(COMRAM[9]), GetIntFromUartData@dataRegArr(BANK0[10]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK2[27]), 
		 -> FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), 
		 -> rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 

    memset@p	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(COMRAM[9]), GetIntFromUartData@dataRegArr(BANK0[10]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK2[27]), 
		 -> FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), 
		 -> rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 

    Make32bitsArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> SWSPI_Synth_send_bits@bitArray(BANK0[32]), 

    GetIntFromUartData@data	PTR unsigned char  size(2) Largest target is 0

    ZeroBitsArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> SWSPI_Synth_send_bits@bitArray(BANK0[32]), 

    sp__memset	PTR void  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(COMRAM[9]), GetIntFromUartData@dataRegArr(BANK0[10]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK2[27]), 
		 -> FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), 
		 -> rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 

    ZeroArray@array	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(COMRAM[9]), GetIntFromUartData@dataRegArr(BANK0[10]), SynthReadData@TxMsg(BANK2[27]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), 
		 -> rxMsgQueue(BANK1[20]), 

    crc8@dataArray	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), SynthReadData@TxMsg(BANK2[27]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgQueue(BANK1[20]), 

    GroupDAC@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    FLASH_WriteBlock@flashWrBufPtr	PTR unsigned char  size(2) Largest target is 128
		 -> FlashTest@buff(BANK0[128]), sampleArray(BANK1[64]), 

    UpdateSynthFreq@data	PTR unsigned char  size(2) Largest target is 0

    WriteUartMessage@dataBuf	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), SynthReadData@TxMsg(BANK2[27]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), SendAckMessage@TxMsg(COMRAM[6]), 

    SetChannelMode@data	PTR unsigned char  size(2) Largest target is 0

    groupsArray	PTR FTN()void [6] size(2) Largest target is 1
		 -> GroupDAC(), GroupFlashMemory(), GroupSynthesizers(), GroupAdc(), 
		 -> GroupStatusAndVersion(), GroupControlMcu(), 


Critical Paths under _main in COMRAM

    _InitRxMessageParams->_ZeroArray
    _StoreIntInEeprom->_make8
    _EepromWrite->_DATAEE_WriteByte
    _GetIntFromUartData->_strtol
    _strtol->___lmul
    _isalpha->_isupper
    _GroupStatusAndVersion->_GetMcuFwVersion
    _GetMcuRunTime->___lldiv
    _GetMcuFwVersion->_ZeroArray
    _GroupFlashMemory->_FlashReadCondition
    _FlashReadUart->_SendAckMessage
    _FlashReadCondition->_ZeroArray
    _FlashEreaseMem->_SendAckMessage
    _DacSetValue->_SendAckMessage
    _testLeds->_SendAckMessage
    _ResetMcu->_SendAckMessage
    _SetConversionResultFormat->_SendAckMessage
    _SetChannelMode->_SendAckMessage
    _SetAdcOperationMode->_SendAckMessage
    _keepAliveSignalUart->_SendAckMessage
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _SetMcuRunTime->___llmod
    _SendSystemStartAck->_SendAckMessage
    _SendAckMessage->_ZeroArray
    _ZeroArray->_memset
    _WriteUartMessage->_EUSART1_Write
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _SWSPI_Synth_send_bits->_Make32bitsArray
    _SWSPI_Synth_send_bits->_ZeroBitsArray
    _ZeroBitsArray->_memset
    _SWSPI_DAC_send_bits->_SwSpi_Clk_Pin
    _SWSPI_DAC_send_bits->_SwSpi_Data_Pin
    ___lmul->_EepromRead
    _EepromRead->_DATAEE_ReadByte
    _CheckFlashPrecentage->___ftdiv
    _log->_eval_poly
    _exp->_eval_poly
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftdiv
    ___ftmul->___ftdiv
    ___ftdiv->___lltoft
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lwtoft->___ftpack
    _FlashSampleWrite->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_ISR->___lwmod

Critical Paths under _main in BANK0

    _main->_readUartMessage
    _readUartMessage->_GroupFlashMemory
    _GroupSynthesizers->_SetSynthOper
    _UpdateSynthFreq->_GetIntFromUartData
    _GetIntFromUartData->_strtol
    _SynthReadData->_ReadIntFromEeprom
    _SetSynthOper->_InitSynth
    _PLLInitialize->_InitSynth
    _InitSynth->_ReadIntFromEeprom
    _DacInit->_ReadIntFromEeprom
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _ReadIntFromEeprom->_pow
    _CheckFlashPrecentage->___ftmul
    _AdcConvert->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___ftdiv
    ___ftsub->___ftadd
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _GroupSynthesizers->_SynthReadData

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  657318
                         _AdcConvert
                     _BlinkErrorLeds
                        _BlinkOkLeds
               _CheckFlashPrecentage
      _InitSystemApplicationManagers
                 _SendSystemStartAck
                      _SetMcuRunTime
                       _SetMcuSystem
                 _keepAliveSignalLed
                _keepAliveSignalUart
                    _readUartMessage
 ---------------------------------------------------------------------------------
 (1) _readUartMessage                                      7     7      0  324160
                                            116 BANK0      7     7      0
                       _EUSART1_Read
                           _GroupAdc *
                    _GroupControlMcu *
                           _GroupDAC *
                   _GroupFlashMemory *
              _GroupStatusAndVersion *
                  _GroupSynthesizers *
                _InitRxMessageParams
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _InitRxMessageParams                                  0     0      0    2539
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupSynthesizers                                    3     1      2  234252
                                            112 BANK0      3     1      2
                       _SetSynthOper
                      _SynthReadData
                    _UpdateSynthFreq
 ---------------------------------------------------------------------------------
 (3) _UpdateSynthFreq                                     11     9      2   25048
                                             39 BANK0     11     9      2
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (4) _StoreIntInEeprom                                     9     2      7    2520
                                             32 COMRAM     9     2      7
                        _EepromWrite
                              _make8
 ---------------------------------------------------------------------------------
 (5) _EepromWrite                                          2     1      1     339
                                             26 COMRAM     2     1      1
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (6) _DATAEE_WriteByte                                     3     2      1     219
                                             23 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (4) _GetIntFromUartData                                  33    25      8    6301
                                              6 BANK0     33    25      8
                          _ZeroArray
                             _strtol
 ---------------------------------------------------------------------------------
 (5) _strtol                                              16    10      6    2723
                                             37 COMRAM    10     4      6
                                              0 BANK0      6     6      0
                             ___lmul
                            _isalpha
                            _isdigit
                            _isspace
                            _toupper
 ---------------------------------------------------------------------------------
 (6) _toupper                                              1     1      0      96
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _isspace                                              3     3      0     130
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isalpha                                              3     3      0     229
                                             26 COMRAM     3     3      0
                            _isupper
 ---------------------------------------------------------------------------------
 (7) _isupper                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _SynthReadData                                       50    48      2   99660
                                            104 BANK0      6     4      2
                                              0 BANK2     44    44      0
                  _ReadIntFromEeprom
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (3) _SetSynthOper                                         1     1      0  109389
                                            111 BANK0      1     1      0
                          _InitSynth
                     _SendAckMessage
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (2) _GroupStatusAndVersion                                4     1      3    9947
                                            112 BANK0      3     1      2
                    _GetMcuFwVersion
                      _GetMcuRunTime
 ---------------------------------------------------------------------------------
 (3) _GetMcuRunTime                                       17    17      0    4138
                                             36 COMRAM     2     2      0
                                              0 BANK0     15    15      0
                   _WriteUartMessage
                            ___lldiv
                            ___llmod
                               _crc8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     421
                                             23 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _GetMcuFwVersion                                     13    13      0    5778
                                             35 COMRAM    13    13      0
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _GroupFlashMemory                                     4     2      2   30440
                                            112 BANK0      4     2      2
                     _FlashEreaseMem
                 _FlashReadCondition
                      _FlashReadUart
 ---------------------------------------------------------------------------------
 (3) _FlashReadUart                                       97    95      2   13780
                                             43 COMRAM     2     0      2
                                              0 BANK0     95    95      0
                  _FLASH_IsWriteDone
                     _FLASH_ReadByte
                     _SendAckMessage
                   _WriteUartMessage
                          _ZeroArray
                                _abs
                               _crc8
 ---------------------------------------------------------------------------------
 (4) _abs                                                  4     2      2     142
                                             23 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _FLASH_ReadByte                                       4     0      4     446
                                             23 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _FlashReadCondition                                  13    13      0    7060
                                             35 COMRAM    13    13      0
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (3) _FlashEreaseMem                                       0     0      0    9538
                     _SendAckMessage
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupDAC                                             3     1      2    7216
                                            112 BANK0      3     1      2
                        _DacSetValue
 ---------------------------------------------------------------------------------
 (3) _DacSetValue                                          2     0      2    7089
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _GroupControlMcu                                      4     1      3   14097
                                            112 BANK0      3     1      2
                           _ResetMcu
                           _testLeds
 ---------------------------------------------------------------------------------
 (3) _testLeds                                             3     3      0    7067
                                             43 COMRAM     3     3      0
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _ResetMcu                                             0     0      0    6999
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _GroupAdc                                             3     1      2   21453
                                            112 BANK0      3     1      2
                _SetAdcOperationMode
                     _SetChannelMode
          _SetConversionResultFormat
 ---------------------------------------------------------------------------------
 (3) _SetConversionResultFormat                            2     0      2    7089
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _SetChannelMode                                       2     0      2    7151
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _SetAdcOperationMode                                  2     0      2    7089
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         3     3      0      46
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalUart                                  0     0      0    6999
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalLed                                   1     1      0       0
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SetMcuSystem                                         0     0      0      98
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0      98
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      2     2      0      98
                                             25 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _TMR0_SetInterruptHandler                             2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMcuRunTime                                        0     0      0     592
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     592
                                             23 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (1) _SendSystemStartAck                                   0     0      0    6999
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (4) _SendAckMessage                                       8     7      1    6999
                                             35 COMRAM     8     7      1
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _crc8                                                 9     5      4    1430
                                             23 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _ZeroArray                                            4     0      4    2539
                                             31 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (5) _WriteUartMessage                                     7     3      4    1272
                                             24 COMRAM     7     3      4
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (6) _EUSART1_Write                                        1     1      0      62
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitSystemApplicationManagers                        0     0      0  202657
                    _ClearMcuRunTime
                            _DacInit
              _InitAdcApplicationMgr
                      _PLLInitialize
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PLLInitialize                                        0     0      0  101779
                          _InitSynth
 ---------------------------------------------------------------------------------
 (4) _InitSynth                                            7     7      0  101779
                                            104 BANK0      7     7      0
                  _ReadIntFromEeprom
                    _SWSPI_send_word
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (4) _SwSpi_Set_CE_Pin                                     2     1      1     425
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _InitAdcApplicationMgr                                1     1      0       1
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _DacInit                                              5     5      0  100877
                                            104 BANK0      5     5      0
                  _ReadIntFromEeprom
                    _SWSPI_send_word
 ---------------------------------------------------------------------------------
 (4) _SWSPI_send_word                                      9     4      5    8698
                                             37 COMRAM     9     4      5
                _SWSPI_DAC_send_bits
              _SWSPI_Synth_send_bits
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
                              _make8
 ---------------------------------------------------------------------------------
 (5) _make8                                                9     4      5    1415
                                             23 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Synth_Le_Pin                               2     1      1     335
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Dac_Sync_Pin                               1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _SWSPI_Synth_send_bits                               42    38      4    3353
                                             33 COMRAM     4     0      4
                                              0 BANK0     38    38      0
                    _Make32bitsArray
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
                      _ZeroBitsArray
 ---------------------------------------------------------------------------------
 (6) _ZeroBitsArray                                        2     0      2     798
                                             31 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     677
                                             23 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (6) _Make32bitsArray                                     10     4      6     344
                                             23 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (5) _SWSPI_DAC_send_bits                                  3     2      1    2041
                                             25 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Data_Pin                                       2     1      1     757
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Clk_Pin                                        2     1      1     937
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _ReadIntFromEeprom                                   23    19      4   91984
                                             81 BANK0     23    19      4
                         _EepromRead
                           ___awtoft
                            ___fttol
                             ___lmul
                                _pow
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     636
                                             25 COMRAM    12     4      8
                         _EepromRead (ARG)
 ---------------------------------------------------------------------------------
 (5) _EepromRead                                           1     1      0      62
                                             24 COMRAM     1     1      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (6) _DATAEE_ReadByte                                      1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ClearMcuRunTime                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckFlashPrecentage                                 7     7      0   14121
                                             24 BANK0      7     7      0
                            ___ftdiv
                             ___ftge
                            ___ftmul
                           ___lltoft
 ---------------------------------------------------------------------------------
 (1) _BlinkOkLeds                                          6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _BlinkErrorLeds                                       6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _AdcConvert                                          12    12      0  101512
                                             81 BANK0     12    12      0
                  _ADC_GetConversion
                   _FlashSampleWrite
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _pow
 ---------------------------------------------------------------------------------
 (5) _pow                                                 17    11      6   85693
                                             64 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (6) _log                                                  5     2      3   27302
                                             46 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _exp                                                  9     6      3   46354
                                             55 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (7) _ldexp                                                7     2      5     539
                                             46 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (7) _floor                                                8     5      3   11854
                                             47 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (7) _frexp                                                7     2      5     682
                                             23 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (8) ___fttol                                             15    11      4     911
                                             24 BANK0     15    11      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftge                                               9     3      6    1098
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (8) ___altoft                                            10     6      4    3367
                                             46 COMRAM     2     2      0
                                             39 BANK0      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (7) _eval_poly                                           12     5      7   12115
                                             46 COMRAM     2     2      0
                                             36 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (8) ___wmul                                               6     2      4     702
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) ___ftmul                                             15     9      6    5281
                                              9 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftsub                                              6     0      6    5754
                                             36 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (8) ___ftadd                                             12     6      6    5338
                                             24 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     335
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             15     9      6    4353
                                             40 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             4     1      3    3476
                                             31 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___lltoft                                             9     5      4    3355
                                             31 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3284
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftpack                                             8     3      5    3073
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _FlashSampleWrite                                     7     4      3    1631
                                             44 COMRAM     3     0      3
                                              0 BANK0      4     4      0
                  _FLASH_IsWriteDone
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_WriteBlock                                    16    10      6    1172
                                             28 COMRAM    16    10      6
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     5     1      4     217
                                             23 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) _FLASH_IsWriteDone                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      22
                                             23 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                         18    18      0     767
                                              5 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                         _MEMORY_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     767
                            ___lwmod
 ---------------------------------------------------------------------------------
 (13) ___lwmod                                             5     1      4     767
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (12) _PIN_MANAGER_IOC                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _MEMORY_ISR                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Receive_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcConvert
     _ADC_GetConversion
     _FlashSampleWrite
       _FLASH_IsWriteDone
       _FLASH_WriteBlock
         _FLASH_EraseBlock
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _frexp
   _BlinkErrorLeds
   _BlinkOkLeds
   _CheckFlashPrecentage
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___lltoft
       ___ftpack
   _InitSystemApplicationManagers
     _ClearMcuRunTime
     _DacInit
       _ReadIntFromEeprom
         _EepromRead
           _DATAEE_ReadByte
         ___awtoft
           ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lmul
           _EepromRead (ARG)
             _DATAEE_ReadByte
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _Make32bitsArray
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
           _ZeroBitsArray
             _memset
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
     _InitAdcApplicationMgr
     _PLLInitialize
       _InitSynth
         _ReadIntFromEeprom
           _EepromRead
             _DATAEE_ReadByte
           ___awtoft
             ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lmul
             _EepromRead (ARG)
               _DATAEE_ReadByte
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
             _ZeroBitsArray
               _memset
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SwSpi_Set_CE_Pin
     _TMR0_StartTimer
   _SendSystemStartAck
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _SetMcuRunTime
     ___llmod
   _SetMcuSystem
     _SYSTEM_Initialize
       _ADC_Initialize
       _EUSART1_Initialize
       _INTERRUPT_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
   _keepAliveSignalLed
   _keepAliveSignalUart
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _readUartMessage
     _EUSART1_Read
     _GroupAdc *
       _SetAdcOperationMode
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _SetChannelMode
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _SetConversionResultFormat
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupControlMcu *
       _ResetMcu
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _testLeds
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupDAC *
       _DacSetValue
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupFlashMemory *
       _FlashEreaseMem
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _ZeroArray
           _memset
       _FlashReadCondition
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _FlashReadUart
         _FLASH_IsWriteDone
         _FLASH_ReadByte
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _abs
         _crc8
     _GroupStatusAndVersion *
       _GetMcuFwVersion
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
       _GetMcuRunTime
         _WriteUartMessage
           _EUSART1_Write
         ___lldiv
         ___llmod
         _crc8
     _GroupSynthesizers *
       _SetSynthOper
         _InitSynth
           _ReadIntFromEeprom
             _EepromRead
               _DATAEE_ReadByte
             ___awtoft
               ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _pow
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lltoft
                 ___ftpack
               _exp
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftge
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg
                 ___ftsub
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _floor
                   ___altoft
                     ___ftpack
                     ___fttol (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftge
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   _frexp
                 _ldexp
                   _eval_poly (ARG)
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___wmul
                 _log (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   _eval_poly
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___wmul
                   _frexp
               _log
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
           _SWSPI_send_word
             _SWSPI_DAC_send_bits
               _SwSpi_Clk_Pin
               _SwSpi_Data_Pin
             _SWSPI_Synth_send_bits
               _Make32bitsArray
               _SwSpi_Clk_Pin
               _SwSpi_Data_Pin
               _ZeroBitsArray
                 _memset
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
             _make8
           _SwSpi_Set_CE_Pin
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _SwSpi_Set_CE_Pin
       _SynthReadData
         _ReadIntFromEeprom
           _EepromRead
             _DATAEE_ReadByte
           ___awtoft
             ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lmul
             _EepromRead (ARG)
               _DATAEE_ReadByte
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _UpdateSynthFreq
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
             _ZeroBitsArray
               _memset
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _StoreIntInEeprom
           _EepromWrite
             _DATAEE_WriteByte
           _make8
     _InitRxMessageParams *
       _ZeroArray
         _memset
     _ZeroArray *
       _memset
     _crc8 *

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _MEMORY_ISR
   _PIN_MANAGER_IOC
   _TMR0_ISR
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100     2C      2C      10       17.2%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      F2       8       94.5%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0     7B      8C       6       87.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     30      47       1       75.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1F1       3        0.0%
DATA                 0      0     1F1       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Mar 19 13:02:26 2018

             __size_of_SendSystemStartAck 000C                         ??_GetMcuFwVersion 0024  
              __end_of_keepAliveSignalLed 3ADC                              ___altoft@exp 002F  
                _eusart1TxBufferRemaining 01F1                        readUartMessage@idx 00D8  
                GetIntFromUartData@idxCon 0084                           _GroupControlMcu 37DC  
             __end_of_keepAliveSignalUart 3BEC                             ___altoft@sign 0030  
              __size_of_FLASH_IsWriteDone 000E                                        l54 2E62  
                GetIntFromUartData@recVal 007B                  GetIntFromUartData@retVal 007C  
                     __end_of_BlinkOkLeds 2FDA                           _SWSPI_send_word 2842  
                     ___wmul@multiplicand 001A                           _timer0ReloadVal 0046  
                            __CFG_CP0$OFF 000000                              __CFG_CP1$OFF 000000  
                            __CFG_CP2$OFF 000000                              __CFG_CP3$OFF 000000  
                            ___ftadd@exp1 0083                              ___ftadd@exp2 0082  
                            ___ftadd@sign 0081                               ?_MEMORY_ISR 0001  
                                     l120 130A                                       l121 1230  
                                     l201 0EBA                                       l210 0F1E  
                                     l203 0ED2                                       l300 1E2A  
                                     l116 3830                                       l212 0F7A  
                                     l205 0EF0                                       l222 375E  
                                     l214 0FB2                                       l223 3748  
                                     l311 077C                                       l207 0EF6  
                                     l216 0FB8                                       l321 0914  
                                     l313 07E8                                       l209 0F5A  
                                     l306 08BC                                       l314 08AA  
                                     l331 0A34                                       l307 0820  
                                     l332 0A4A                                       l324 092C  
                                     l316 085A                                       l325 0A50  
                                     l309 076C                                       l326 0948  
                                     l318 086C                                       l502 1F04  
                                     l190 100A                                       l327 0960  
                                     l503 1EBC                                       l191 0E66  
                                     l417 2956                                       l329 09DE  
                                     l513 2D94                                       l505 1EFE  
                                     l418 296C                                       l514 2D7C  
                                     l194 0E72                                       l515 2D88  
                                     l523 0B06                                       l507 1F1C  
                                     l195 0E9C                                       l620 31A4  
                                     l604 3184                                       l612 2678  
                                     l621 31AE                                       l605 3150  
                                     l525 0B96                                       l630 31C2  
                                     l606 316A                                       l614 26A6  
                                     l518 2DB8                                       l526 0BB0  
                                     l607 3174                                       l615 26B2  
                                     l519 2DC4                                       l199 0EA2  
                                     l528 0BC8                                       l650 3204  
                                     l706 3618                                       l490 19A2  
                                     l299 1E0C                                       l619 31E0  
                                     l707 35F0                                       l732 3A96  
                                     l716 3604                                       l708 35FA  
                                     l637 31CC                                       l629 31B8  
                                     l717 360E                                       l493 1902  
                                     l638 31D6                                       l727 3A9A  
                                     l495 193C                                       l648 3236  
                                     l728 3A92                                       l496 1984  
                                     l488 18A6                                       l649 31FA  
                                     l666 3222                                       l658 320E  
                                     l594 287E                                       l498 19D6  
                                     l667 322C                                       l659 3218  
                                     l685 35DC                                       l853 347C  
                                     l598 28D8                                       l686 35B4  
                                     l695 35C8                                       l687 35BE  
                                     l855 34A2                                       l696 35D2  
                                     l866 3588                                       l963 262A  
                                     l867 35AC                                       l964 25E2  
                                     l868 35AA                                       l966 2602  
                                     l974 372C                                       l967 2604  
                            __CFG_CPB$OFF 000000                              __CFG_CPD$OFF 000000  
                    readUartMessage@chRec 00DA                         ??_Make32bitsArray 001E  
                              _SYNTH_REGS 0601                                       _abs 3916  
                                     _exp 0C68                                       _log 19DC  
                                     _pow 1578                                       prod 000FF3  
                                     tosl 000FFD                                       wreg 000FE8  
                   ??_SetAdcOperationMode 002E            ?_InitSystemApplicationManagers 0001  
                            __CFG_LVP$OFF 000000                __end_of_FlashReadCondition 1D38  
                          InitSynth@cType 00CD                              ___ftdiv@cntr 0063  
                            ___ftdiv@sign 0068                            ?_ZeroBitsArray 0020  
                                    l1200 3990                                      l1202 3996  
                                    l1210 33A8                                      l1211 33B6  
                                    ?_abs 0018                                      l1300 1748  
                                    l1220 2C4C                                      l1221 2C5C  
                                    l2110 0D26                                      l1302 1768  
                                    l1222 2C6C                                      l1230 3450  
                                    l2111 0E50                                      l1311 3078  
                                    l1223 2C74                                      l1207 33C4  
                                    l1231 342A                                      l2120 2342  
                                    l2112 0E26                                      l1312 303A  
                                    l1304 17DE                                      l1216 2C9C  
                                    l1224 2C7C                                      l1208 339A  
                                    l1240 39FC                                      l2121 23BE  
                                    l1321 3108                                      l1225 2C8C  
                                    l1233 3430                                      l2130 24BC  
                                    l2106 0C82                                      l1314 303E  
                                    l1234 3436                                      l1323 3146  
                                    l1315 3042                                      l2051 10EA  
                                    l1076 3854                                      l2132 2506  
                                    l2108 0CBC                                      l1332 1C00  
                                    l1316 3046                                      l2060 1124  
                                    l2117 2328                                      l2109 0CF6  
                                    l1333 1B26                                      l1317 3074  
                                    l2126 2B4E                                      l2118 231A  
                                    l2134 2538                                      l1326 3658  
                                    l1190 37E2                                      l2135 252C  
                                    l2143 390E                                      l2071 3B18  
                                    l2063 1136                                      l2047 107E  
                                    l1327 362E                                      l1239 3A0A  
                                    l2064 11A2                                      l1192 37E8  
                                    l2153 395C                                      l2057 10FA  
                                    l2049 1096                                      l2170 19FC  
                                    l1514 3934                                      l2066 11C6  
                                    l2058 110A                                      l2067 1202  
                                    l2172 1A20                                      l2148 3A2C  
                                    l1189 37EE                                      l2158 3A4A  
                                    l1199 399C                                      l1455 2F2C  
                                    l1288 3374                                      l1456 2F44  
                                    l1553 2E00                                      l1289 3358  
                                    l1393 2240                                      l1714 141E  
                                    l2178 248A                                      l1554 2DF4  
                                    l1458 2F6A                                      l1723 14AE  
                                    l2179 240C                                      l1459 2F5E  
                                    l1740 1506                                      l1476 325C  
                                    l1820 2CF4                                      l1741 1522  
                                    l1477 3270                                      l1750 21AE  
                                    l1742 1552                                      l1718 1448  
                                    l1830 2EC6                                      l1751 21D4  
                                    l1911 15DA                                      l1823 2D34  
                                    l1840 30A6                                      l1664 36AC  
                                    l1728 14A4                                      l1912 1664  
                                    l1824 2D42                                      l1841 309A  
                                    l1737 14E2                                      l1729 149A  
                                    l1913 1642                                      l1833 2EFA  
                                    l1690 280E                                      l1738 14D8  
                                    l1762 2052                                      l1914 16EA  
                                    l1834 2F08                                      l1683 27BC  
                                    l1747 2148                                      l1755 2BE6  
                                    l1819 2D00                                      l1684 27B2  
                                    l1764 207A                                      l1756 2C16  
                                    l1908 15C2                                      l1749 2170  
                                    l1773 39C4                                      l1765 20AC  
                                    l1909 15B2                                      l1829 2ED2  
                                    l1686 27F0                                      l1766 20BC  
                                    l1687 27DA                                      l1791 1FFA  
                                    l1783 1F5E                                      l1768 20D4  
                                    l1792 1FEE                                      l1689 2818  
                                    l1769 20E4                                      l1785 1FD6  
                                    l1794 2016                                      l1786 1FC6  
                                    l1779 3508                                      l6213 2FE4  
                                    l1896 38B4                                      l6225 2F86  
                                    l1897 38A4                                      l7211 3576  
                                    l8011 0BB8                                      l8021 0C34  
                                    l8005 0BA0                                      l7071 30F8  
                                    l8111 28E2                                      l8121 2956  
                                    l8025 0C3A                                      l7155 0E26  
                                    l8211 1228                                      ?_exp 0097  
                                    ?_log 008E                                      l6607 2C42  
                                    l8063 2230                                      l7281 2670  
                                    l7451 28A6                                      l8075 22BC  
                                    l7621 1740                                      l7447 2898  
                                    l7607 1984                                      l7643 17CE  
                                    l7741 2E52                                      l7661 1832  
                                    l6873 38A4                                      l7577 189E  
                                    l7755 2EA8                                      l7865 092C  
                                    l7789 25DA                                      l7869 0950  
                                    ?_pow 00A0                                      l7879 09B0  
                                    STR_1 068E                                      STR_2 069A  
                      EepromWrite@address 001C                                      _IOCB 000F62  
                                    _LATA 000F89                                      _LATB 000F8A  
                                    _LATC 000F8B                                      _LATD 000F8C  
                                    _LATE 000F8D                                      u4225 373A  
                                    u4226 373C                                      u6320 2822  
                                    u8001 186A                                      u6410 1410  
                                    u8100 2EA8                                      u6510 14B6  
                                    u6280 27A4                                      u6440 143A  
                                    u7160 0D00                                      u7320 306C  
                                    u5720 3ACE                                      u8200 0718  
                                    u8040 2D04                                      u8025 37D8  
                                    u6601 2062                                      u8026 37DA  
                                    u7170 0D02                                      u8210 071A  
                                    u6371 13DC                                      u6540 14EA  
                                    u6381 13F0                                      u7325 3062  
                                    u8150 2608                                      u6470 1478  
                                    u7270 1628                                      u8070 2ED6  
                                    u8310 0902                                      u6801 2158  
                                    u6730 2000                                      u7610 28D2  
                                    u5738 3AD0                                      u9107 3024  
                                    u9027 2E6A                                      u8411 1E56  
                                    u8340 09B0                                      u7460 3958  
                                    u8165 2626                                      u6581 203A  
                                    u9117 12F6                                      u9037 2E7A  
                                    u8166 2628                                      u7390 26C4  
                                    u8350 09CE                                      u8510 2DA6  
                                    u7710 10C0                                      u6671 1F42  
                                    u9047 2E8A                                      u8255 07F2  
                                    u6760 2B76                                      u6920 24DC  
                                    u8520 2DA8                                      u7480 3900  
                                    u9057 2E9A                                      u7810 3BAC  
                                    u6690 1F7C                                      u8610 22BC  
                                    u7730 10D0                                      u7811 3BA8  
                                    u9067 26C6                                      u8275 087E  
                                    u7580 2852                                      u6781 2130  
                                    u9077 2FAC                                      u8630 1D98  
                                    u8470 2D6A                                      u6695 1F74  
                                    u9087 2FC6                                      u6768 2B78  
                                    u6880 2334                                      u6928 24E0  
                                    u8480 2D6C                                      u7680 1086  
                                    u8625 1D42                                      u9097 300A  
                                    u8650 1DDC                                      u8580 0C34  
                                    u8590 0C3A                                      u7960 1782  
                                    u7890 18DA                                      u8870 2790  
                                    u7990 1832                                      u8868 0FE4  
                                    u8869 1002                  ??_SwSpi_Set_Synth_Le_Pin 0019  
                                    _WPUB 000F61                             _EUSART1_Write 3574  
                                    abs@a 0018                                      _crc8 3346  
                 ??_InitAdcApplicationMgr 0018                                      _data 0179  
                                    _main 2F1A                              ___ftpack@arg 0018  
                           ?_EUSART1_Read 0001                              ___ftpack@exp 001B  
                         _TMR0_StartTimer 3C24                           __end_of_DacInit 2972  
                                    fsr0h 000FEA                                      fsr1h 000FE2  
                                    fsr2h 000FDA                                      fsr0l 000FE9  
                                    indf1 000FE7                                      indf2 000FDF  
                                    fsr1l 000FE1                                      fsr2l 000FD9  
                                    btemp 0048                             __CFG_BORV$190 000000  
                                    exp@x 0097                                      log@x 008E  
                       ?_FLASH_WriteBlock 001D                          ?_ClearMcuRunTime 0001  
                                    pow@x 00A0                                      pow@y 00A3  
                                    prodh 000FF4                                      prodl 000FF3  
               GroupStatusAndVersion@data 00D0             __size_of_CheckFlashPrecentage 00AE  
                                    start 00DC                             __CFG_IESO$OFF 000000  
                     __end_of_EepromWrite 3B86                        ??_FLASH_WriteBlock 0023  
                           _adcSampleMode 003B                              ___ftmul@cntr 0076  
                            ___param_bank 000000                              ___ftmul@sign 0077  
                          _BlinkErrorLeds 2FDA                              ___fttol@exp1 0086  
                                   ??_abs 001A                 __size_of_DATAEE_WriteByte 0036  
                                   ??_exp 0031                                     ??_log 0031  
                            ___fttol@lval 0082                                     ??_pow 0031  
                 __end_of_TMR0_Initialize 37A8                    _ReadIntFromEeprom$3306 00BC  
                  _ReadIntFromEeprom$3307 00BF            __size_of_OSCILLATOR_Initialize 000E  
           __end_of_OSCILLATOR_Initialize 3BA2                                     ?_crc8 0018  
              SWSPI_DAC_send_bits@phrType 001C                                     ?_main 0001  
                                   _EEADR 000FA9                           __end_of___ftadd 1578  
         __size_of_SwSpi_Set_Dac_Sync_Pin 001C                           __end_of___ftdiv 2206  
                         __end_of___ftneg 39D2                           __end_of___lldiv 2D54  
                              _EepromRead 3C0C                           __end_of___ftmul 211E  
                                   _T0CON 000FD5                           __end_of___llmod 2F1A  
                         __end_of___ftsub 3532                           __end_of___fttol 2028  
                            _SYNTH_ADDRES 0635                            __CFG_DEBUG$OFF 000000  
                         InitSynth@regNum 00CE                           __end_of___lwmod 3574  
                     StoreIntInEeprom@idx 0029                                     i2l801 005E  
                                   i2l810 0090                                     i2l803 006A  
                                   i2l806 007A                                     i2l808 0086  
                                   i2l872 36FC                                     i2l873 36F8  
                                   i2l878 3874                                     i2l879 3894  
                     StoreIntInEeprom@val 0028                                     _TMR0H 000FD7  
                                   _TMR0L 000FD6                                     _TRISA 000F92  
                                   _TRISB 000F93                                     _TRISC 000F94  
                                   _TRISD 000F95                                     _TRISE 000F96  
                     _SWSPI_DAC_send_bits 3148         __size_of_TMR0_SetInterruptHandler 000A  
                           __CFG_WRT0$OFF 000000                             __CFG_WRT1$OFF 000000  
              __end_of_GetIntFromUartData 1874                             __CFG_WRT2$OFF 000000  
                     ___lmul@multiplicand 001E                 ?_TMR0_SetInterruptHandler 0018  
                           __CFG_WRT3$OFF 000000                              ___lltoft@exp 0028  
                    _EUSART1_Transmit_ISR 36D0                            __CFG_EBTR0$OFF 000000  
                          __CFG_FCMEN$OFF 000000                            __CFG_EBTR1$OFF 000000  
                          __CFG_EBTR2$OFF 000000                            __CFG_EBTR3$OFF 000000  
                       ?_WriteUartMessage 0019                          __end_of_TMR0_ISR 2A96  
                           __CFG_WRTB$OFF 000000                             __CFG_WRTC$OFF 000000  
                           __CFG_WRTD$OFF 000000                           DacSetValue@data 002C  
                         _DATAEE_ReadByte 3B1C                            __CFG_EBTRB$OFF 000000  
                           ___awtoft@sign 0023                   __end_of_PIN_MANAGER_IOC 3C2C  
                                   crc8@i 001F                                     _make8 3038  
          __size_of_SWSPI_Synth_send_bits 00BA                     __end_of_GetMcuRunTime 22EA  
                                   _count 0176                                     _floor 22EA  
                                   _ldexp 24A2                                     _frexp 2B26  
                                   _errno 0172             __end_of_SWSPI_Synth_send_bits 26E6  
                         __end_of_isalpha 3916                           __end_of_isdigit 3A34  
                                   _group 00E1                        ??_WriteUartMessage 001D  
                      __CFG_MCLRE$EXTMCLR 000000                             ___ftpack@sign 001C  
                 ??_GroupStatusAndVersion 0031                           __end_of_isspace 3964  
                          ?_EUSART1_Write 0001                               ?_AdcConvert 0001  
                          __CFG_BOREN$OFF 000000                           __end_of_isupper 3A52  
                                   pclath 000FFA                                     tablat 000FF5  
                       ??_UpdateSynthFreq 0030                                     pow@yi 00AD  
                          ??_EUSART1_Read 0018                                     plusw0 000FEB  
                                   plusw2 000FDB                                     status 000FD8  
                                   wtemp6 0049                      ReadIntFromEeprom@idx 00C7  
                          __CFG_HFOFST$ON 000000                           __end_of_toupper 3B1C  
          SwSpi_Set_Synth_Le_Pin@cPinMode 0018                   __end_of_GroupControlMcu 380C  
                     __size_of_MEMORY_ISR 0004                            __CFG_PBADEN$ON 000000  
      __size_of_SetConversionResultFormat 000C                               exp@exponent 009D  
          CheckFlashPrecentage@precentage 007C                      ?_SWSPI_DAC_send_bits 001A  
                  __end_of_BlinkErrorLeds 3038                               ldexp@newexp 0091  
                 __end_of_SWSPI_send_word 28DC                               _BlinkOkLeds 2F7C  
                 WriteUartMessage@dataBuf 0019                           __initialization 2972  
                             log@exponent 0091                              __end_of_crc8 3394  
              __end_of_EUSART1_Initialize 3698                              __end_of_main 2F7C  
                 FLASH_ReadByte@flashAddr 0018               ?_INTERRUPT_InterruptManager 0001  
                        __end_of_GroupDAC 3A16                    __size_of_SynthReadData 0202  
                         _readUartMessage 0E5E                          __end_of_GroupAdc 33DC  
                                  ??_crc8 001C                                    ??_main 0031  
                           ___fttol@sign1 0081                         ?_SwSpi_Set_CE_Pin 0018  
                      _TimerKeepAliveFlag 00E5                             __activetblptr 000002  
                 __size_of_FLASH_ReadByte 0012                          __end_of_ResetMcu 3B94  
                            _writeAddress 0040                        ??_SwSpi_Set_CE_Pin 0019  
                   ?_EUSART1_Transmit_ISR 0001                           ??_ZeroBitsArray 0022  
                 __end_of_TMR0_StartTimer 3C28                                    ?_make8 0018  
                                  _ADCON0 000FC2                                    _ADCON1 000FC1  
                                  _ADCON2 000FC0                                    ?_floor 008F  
               FLASH_WriteBlock@writeAddr 001D                                    ?_ldexp 008E  
                                  ?_frexp 0018                          __end_of___altoft 2E4A  
                        ___llmod@dividend 0018                                    _ADRESH 000FC4  
                                  _ADRESL 000FC3                                    _EEDATA 000FA8  
                               ??_DacInit 00C8                                    _EECON2 000FA7  
                        __end_of___awtoft 36D0                                    _ANSELA 000F38  
                                  _ANSELB 000F39                                    _ANSELC 000F3A  
                                  _ANSELD 000F3B                                    _ANSELE 000F3C  
                        __end_of___ftpack 2842                          __end_of___lltoft 30F0  
                       _FlashReadUart$581 00B1                         _FlashReadUart$582 00B5  
                       ?_FlashSampleWrite 002D                                    i2l1032 2A34  
                                  i2l1033 2A56                                    i2l1034 2A78  
                          __CFG_WDTEN$OFF 000000                      StoreIntInEeprom@data 0021  
                                  i2l1882 3548                                    i2l1883 3540  
                                  i2l1886 3560                                    i2l1887 356A  
                                  _TABLAT 000FF5                               _EepromWrite 3B78  
                                  _RCREG1 000FAE                          __end_of___lwtoft 39F6  
                 __size_of_FlashEreaseMem 0052                 __size_of_FLASH_EraseBlock 0034  
                                  _RCSTA1 000FAB                         SynthReadData@data 00C8  
         __size_of_SwSpi_Set_Synth_Le_Pin 003C                                    _OSCCON 000FD3  
                                  _SPBRG1 000FAF                    _SwSpi_Set_Dac_Sync_Pin 3A8E  
                 __size_of_SwSpi_Data_Pin 0056                  GroupSynthesizers@request 00D2  
                      ??_FlashSampleWrite 0060                                    _TXREG1 000FAD  
                                  _TXSTA1 000FAC                        __size_of_InitSynth 0168  
                   ??_SWSPI_DAC_send_bits 001B                  __end_of_GroupFlashMemory 3468  
                         ?_BlinkErrorLeds 0001                            __CFG_PWRTEN$ON 000000  
                          __CFG_XINST$OFF 000000                                    _cState 00E2  
                                  ___ftge 2BB6                                    ___lmul 324C  
               SWSPI_Synth_send_bits@data 0022                                    ___wmul 3964  
                               ??___ftadd 007E                 SWSPI_Synth_send_bits@mask 0080  
                               ??___ftdiv 0060                                 ??___ftneg 001B  
                               ??___lldiv 0020                                 ??___ftmul 006F  
                   __end_of_PLLInitialize 3B68                                 ??___llmod 0020  
                               ??___ftsub 002F                                 ??___fttol 007C  
                               ??___lwmod 0005            SwSpi_Set_Dac_Sync_Pin@cPinMode 0018  
                        ?_TMR0_Initialize 0001                                    _memset 389A  
                      __end_of_DAC_ADDRES 0655                                    clear_0 29D8  
                                  clear_1 29E4                                    clear_2 29F0  
                     __size_of_AdcConvert 01B6                   __end_of_DATAEE_ReadByte 3B30  
                             ?_EepromRead 0001                                    _strtol 103E  
                                  floor@i 0092                     __end_of_SwSpi_Clk_Pin 324C  
                                  floor@x 008F                     ___ftmul@f3_as_product 0073  
                SWSPI_DAC_send_bits@count 001B                FlashSampleWrite@channelNum 002F  
                            __pdataCOMRAM 0040                                 ??_isalpha 001B  
                               ??_isdigit 0018                     __end_of_FlashReadUart 0A66  
                        __end_of_testLeds 2EB4                             ?_SetMcuSystem 0001  
                            __mediumconst 0000                                 ??_isspace 0018  
                                  tblptrh 000FF7                                 ??_isupper 0018  
                                  tblptrl 000FF6                                    tblptru 000FF8  
                ADC_GetConversion@channel 001C                           ??_EUSART1_Write 0018  
TMR0_SetInterruptHandler@InterruptHandler 0018              __size_of_InitRxMessageParams 0028  
                        ?_PIN_MANAGER_IOC 0001                     ReadIntFromEeprom@base 00B8  
                         _eusart1RxBuffer 0146                                 ??_toupper 0018  
                      __size_of_ZeroArray 001E             __size_of_INTERRUPT_Initialize 0004  
                           _SynthReadData 0A66                           _eusart1TxBuffer 0100  
                         _GetMcuFwVersion 2A96                          __end_ofexp@coeff 0673  
                       _SYSTEM_Initialize 3AAA                          __end_oflog@coeff 068E  
                              __accesstop 0060                   __end_of__initialization 29F6  
                              ___altoft@c 0087                             ZeroArray@size 0022  
                              ___ftadd@f1 0078                                ___ftadd@f2 007B  
                              ___ftge@ff1 0018                                ___ftge@ff2 001B  
                      ?_SYSTEM_Initialize 0001                              eval_poly@res 008B  
                           ___rparam_used 000001                                ___ftdiv@f1 0029  
                              ___ftdiv@f2 002C                                ___ftdiv@f3 0064  
                        ?_GroupControlMcu 00D0              GroupStatusAndVersion@request 00D3  
                            InitSynth@idx 00CC                                ___ftneg@f1 0018  
                              ___awtoft@c 0020                   __end_of_readUartMessage 103E  
                WriteUartMessage@dataSize 001B                                ___ftmul@f1 0069  
                              ___ftmul@f2 006C                          ?_SWSPI_send_word 0026  
                            ?_DacSetValue 002C                                ___ftsub@f1 0084  
                              ___ftsub@f2 0087                                ___fttol@f1 0078  
                         _Make32bitsArray 30F0                            __pcstackCOMRAM 0001  
                            __pidataBANK0 3C1C                              __pidataBANK1 3BB0  
                     ??_SYSTEM_Initialize 001C                                 ?_TMR0_ISR 0001  
                              ___lltoft@c 0020                             __end_of_make8 3094  
                        _DATAEE_WriteByte 3708                             __end_of_floor 23CC  
                           __end_of_ldexp 2570                             __end_of_frexp 2BB6  
                  _SwSpi_Set_Synth_Le_Pin 35EC                      GroupFlashMemory@data 00D0  
                              ___lwtoft@c 0020           __end_of_DAC_DEFAULT_INIT_VALUES 064A  
                    __end_of_EUSART1_Read 34AC                              ??_MEMORY_ISR 0001  
               __size_of_StoreIntInEeprom 0038                    __size_of_SetMcuRunTime 0044  
                  ??_EUSART1_Transmit_ISR 0001                         __end_of_InitSynth 19DC  
                          ??_SetMcuSystem 001C                        ZeroBitsArray@array 0020  
                   TMR0_ISR@CountCallBack 0035             SwSpi_Set_Synth_Le_Pin@phrType 0019  
                 GroupFlashMemory@request 00D3                        _keepAliveSignalLed 3AC4  
                       make8@dataLocation 001C               __end_of_EUSART1_Receive_ISR 389A  
             FLASH_WriteBlock@GIEBitValue 002B                              GroupDAC@data 00D0  
                           ?_SetSynthOper 0001                                   ??_make8 001D  
                                 ??_floor 0031                          ?_TMR0_StartTimer 0001  
                                 ??_ldexp 0093                                   ??_frexp 001D  
                         _AdcConvert$3305 00B7                 __end_of_SYSTEM_Initialize 3AC4  
                          ?_SynthReadData 00C8                             _eusart1RxHead 0038  
                    GetMcuFwVersion@TxMsg 0024                             _eusart1TxHead 003A  
                           _eusart1RxTail 0037                                __pbssBANK0 00DB  
                              __pbssBANK1 0100                             _eusart1TxTail 0039  
                     ?_keepAliveSignalLed 0001                        __size_of_eval_poly 00D6  
                         __CFG_PLLCFG$OFF 000000                                _channelArr 064A  
                               ?_GroupDAC 00D0                                __pnvCOMRAM 0046  
                               ?_GroupAdc 00D0            __size_of_InitAdcApplicationMgr 0010  
              __end_of_SendSystemStartAck 3BF8             __end_of_InitAdcApplicationMgr 3B78  
                     __size_of_EepromRead 000A                        __end_of_MEMORY_ISR 3C30  
                               ?_ResetMcu 0001                        _FlashReadCondition 1C2C  
         ??_InitSystemApplicationManagers 0031                        __CFG_CCP2MX$PORTC1 000000  
                                 ?___ftge 0018                            FlashReadUart@j 00B9  
        __end_of_TMR0_SetInterruptHandler 3C0C                                   ?___lmul 001A  
                                 ?___wmul 0018                                ??_TMR0_ISR 0006  
                      __CFG_CCP3MX$PORTB5 000000                        SetChannelMode@data 002C  
                    ??_keepAliveSignalLed 0018                         __end_of_ZeroArray 3A70  
                               ?___altoft 0087                                   ?_memset 0018  
                       _ReadIntFromEeprom 1B06                            ___lmul@product 0022  
                     ?_FlashReadCondition 0001                                 ?___awtoft 0020  
                               ?___ftpack 0018                              GroupAdc@data 00D0  
                        FlashReadUart@idx 00BB                                 ?___lltoft 0020  
               __size_of_FLASH_WriteBlock 00BC                   __size_of_ADC_Initialize 0016  
             __end_of_SetAdcOperationMode 3BE0                FlashSampleWrite@sampleData 002D  
                          _FLASH_ReadByte 3B44                                 ?___lwtoft 0020  
            __end_of_CheckFlashPrecentage 2794                        ?_ReadIntFromEeprom 00B1  
                                 ?_strtol 0026                          ?_DATAEE_ReadByte 0001  
              GetMcuFwVersion@compileData 002D                           _UpdateSynthFreq 1E36  
            __size_of_keepAliveSignalUart 000C                        SynthReadData@TxMsg 0200  
                 __end_of_GetMcuFwVersion 2B26                        SynthReadData@cType 021B  
                                 _OSCCON2 000FD2                            ??_SetSynthOper 0031  
                                 _TBLPTRH 000FF7                                   _TBLPTRL 000FF6  
                                 _TBLPTRU 000FF8                                   _OSCTUNE 000F9B  
                                 _SPBRGH1 000FB0                       ??_ReadIntFromEeprom 00B5  
                                 _DacInit 28DC                     GetIntFromUartData@num 007A  
                        GetMcuRunTime@idx 006D                              ??_AdcConvert 00B1  
                    ??_FlashReadCondition 0024                            _FlashEreaseMem 32A2  
                        _FLASH_EraseBlock 37A8            __size_of_GroupStatusAndVersion 0024  
                          _SwSpi_Data_Pin 31A0                      DATAEE_WriteByte@bAdd 0019  
           __end_of_GroupStatusAndVersion 39AE                   __end_of_Make32bitsArray 3148  
                              ??_GroupDAC 0031                                ??_GroupAdc 0031  
                           _SetMcuRunTime 34AC                        _GetIntFromUartData 16F8  
                      FlashReadUart@TxMsg 006C                     GroupSynthesizers@data 00D0  
                                 __Hparam 0000                                ??_ResetMcu 002C  
               __size_of_WriteUartMessage 0036                              ?_BlinkOkLeds 0001  
                                 __Lparam 0000                              _cntRegUpdate 0178  
                   SendAckMessage@inGroup 0025                          ?_readUartMessage 0001  
                  GroupControlMcu@request 00D3                                 ?_testLeds 0001  
               __end_of_ReadIntFromEeprom 1C2C                       ?_GetIntFromUartData 0066  
                         __size_of___ftge 0090                           __size_of___lmul 0056  
                                 ___ftadd 13CA                                   ___ftdiv 211E  
                                 ___ftneg 39AE                                   ___lldiv 2CD2  
                         __size_of___wmul 0026                                   ___ftmul 2028  
                                 ___llmod 2EB4                                   ___ftsub 34F0  
                                 ___fttol 1F30                FlashSampleWrite@rotateLeft 0062  
                            crc8@dataSize 001A                  __size_of_ClearMcuRunTime 0014  
                                 ___lwmod 3532                      AdcConvert@_adcResult 00B3  
                            __psmallconst 0600                                ??___altoft 008B  
                  __end_of_FLASH_ReadByte 3B56                           __CFG_STVREN$OFF 000000  
              SWSPI_Synth_send_bits@count 0084                     _mcuRunTimeIn5SecTicks 016E  
                                 _crcCalc 00DE                                   _channel 00E4  
                                 __pcinit 2972                                ??___awtoft 0023  
                              ??___ftpack 001D                         __end_of_eval_poly 24A2  
                         __size_of_memset 002C                                   __ramtop 0600  
                 __size_of_SendAckMessage 0052                                ??___lltoft 0024  
                 __size_of_SetChannelMode 0030                                   __ptext0 2F1A  
                                 __ptext1 0E5E                                   __ptext2 38C6  
                                 __ptext3 39F6                                   __ptext4 3424  
                                 __ptext5 3394                                   __ptext6 398A  
                                 __ptext7 37DC                                   __ptext8 2C46  
                                 __ptext9 1E36                                   crc8@crc 001D  
                      __end_of_AdcConvert 13CA                                ??___lwtoft 0023  
                               _T0CONbits 000FD5                         BlinkErrorLeds@idx 001C  
                         __size_of_strtol 01D6                     _OSCILLATOR_Initialize 3B94  
                            __size_of_abs 0028                                   _isalpha 38EE  
                            __size_of_exp 01F6                              __size_of_log 012A  
                                 _isdigit 3A16                              __size_of_pow 0180  
                      _EUSART1_Initialize 3660                  ??_PIN_MANAGER_Initialize 0018  
                                 _isspace 393E                 StoreIntInEeprom@numOfByes 0026  
                                 _isupper 3A34                                   _request 00E0  
                         GroupDAC@request 00D2                           ??_SynthReadData 00CA  
                    ??_GetIntFromUartData 006E                    __end_of_FlashEreaseMem 32F4  
              __size_of_SYSTEM_Initialize 001A                   ?_SwSpi_Set_Dac_Sync_Pin 0001  
                  __end_of_SwSpi_Data_Pin 31F6                   StoreIntInEeprom@address 0025  
                                 _toupper 3B08                      end_of_initialization 29F6  
                                 exp@sign 009F                       ?_EUSART1_Initialize 0001  
                        ??_BlinkErrorLeds 0018                              ?_EepromWrite 001B  
                   _SWSPI_Synth_send_bits 262C                 __size_of_SwSpi_Set_CE_Pin 003C  
                          ?_SetMcuRunTime 0001                                   memset@c 001A  
                                 memset@n 001C                                   memset@p 001E  
                           __Lmediumconst 0000                           ___lldiv@divisor 001C  
                    __end_of_SetMcuSystem 3C02                                   pow@sign 00AC  
                         ___lldiv@counter 0024                         ?_GroupFlashMemory 00D0  
                        AdcConvert@adcRes 00BA                        __end_of_SYNTH_REGS 0635  
                    UpdateSynthFreq@cType 0089                                ??_testLeds 002C  
                    SWSPI_send_word@datac 002B                                _rxMsgQueue 01CF  
                                 postdec1 000FE5                                   postdec2 000FDD  
                      ??_GroupFlashMemory 00D2                                   postinc0 000FEE  
                                 postinc1 000FE6                                   postinc2 000FDE  
                   __size_of_EUSART1_Read 0044                      SynthReadData@byteNum 022A  
                     _InitRxMessageParams 38C6                               testLeds@idx 002D  
                 __end_of_UpdateSynthFreq 1F30                      __size_of_DacSetValue 000C  
               __size_of_FlashSampleWrite 00FE                    __size_of_GetMcuRunTime 00E4  
                    ??_EUSART1_Initialize 0018     __end_of_InitSystemApplicationManagers 3B08  
  __size_of_InitSystemApplicationManagers 0016             _InitSystemApplicationManagers 3AF2  
                         ?_FLASH_ReadByte 0018                                   strtol@a 0061  
                                 strtol@c 0065                                   strtol@s 0026  
                _TMR0_SetInterruptHandler 3C02                              ??_EepromRead 0019  
                        _StoreIntInEeprom 3628                          ?_GetMcuFwVersion 0001  
                          ZeroArray@array 0020            __end_of_SwSpi_Set_Dac_Sync_Pin 3AAA  
                            strtol@endptr 0028             FLASH_WriteBlock@flashWrBufPtr 0021  
                      GetMcuRunTime@TxMsg 0060                      ?_InitRxMessageParams 0001  
                         ?_FlashEreaseMem 0001                       EUSART1_Write@txData 0018  
                         ?_SwSpi_Data_Pin 0018                     __end_of_ZeroBitsArray 3A8E  
                __end_of_DATAEE_WriteByte 373E               __end_of_SWSPI_DAC_send_bits 31A0  
                FLASH_EraseBlock@baseAddr 0018                          ?_Make32bitsArray 0018  
                             ___ftdiv@exp 0067                              _EUSART1_Read 3468  
                    _CheckFlashPrecentage 26E6                         FLASH_WriteBlock@i 002C  
                      __end_of_EepromRead 3C16                               ___ftmul@exp 0072  
                 ?_SwSpi_Set_Synth_Le_Pin 0018                      __end_of_SetSynthOper 2DD0  
              __size_of_ReadIntFromEeprom 0126                ?_SetConversionResultFormat 002C  
            __end_of_INTERRUPT_Initialize 3C24                            __end_of___ftge 2C46  
            InitAdcApplicationMgr@channel 0018                            __end_of___lmul 32A2  
                          __end_of___wmul 398A                       GroupControlMcu@data 00D0  
                           __pidataCOMRAM 3C16                         __size_of_TMR0_ISR 0092  
                          _ADC_Initialize 3ADC                          _FLASH_WriteBlock 2570  
                  ?_OSCILLATOR_Initialize 0001                            __end_of_memset 38C6  
                      InitSynth@EepromVal 00C8                                floor@expon 0095  
                       ??_ClearMcuRunTime 0018                            __end_of_strtol 1214  
                     start_initialization 2972                                eval_poly@d 0087  
                              eval_poly@n 0089                                eval_poly@x 0084  
                             _SynthRxOper 0044                          BlinkOkLeds@state 001B  
                __size_of_TMR0_Initialize 0034                                ldexp@value 008E  
                             _SynthTxOper 0045           __size_of_PIN_MANAGER_Initialize 0048  
                             __end_of_abs 393E                     ??_InitRxMessageParams 0024  
                             __end_of_exp 0E5E                               __end_of_log 1B06  
                             __end_of_pow 16F8                  AdcConvert@_adcResult_340 00B5  
                               _InitSynth 1874                             _GetMcuRunTime 2206  
                  ?_SWSPI_Synth_send_bits 0022                           ??_SetMcuRunTime 0021  
                   __end_of_EUSART1_Write 35B0                    __size_of_PLLInitialize 0012  
                              frexp@value 0018                           ___llmod@divisor 001C  
                   ?_CheckFlashPrecentage 0001                           ___llmod@counter 0020  
                     DATAEE_ReadByte@bAdd 0018                  __size_of_PIN_MANAGER_IOC 0004  
                  __size_of_SwSpi_Clk_Pin 0056                       SendAckMessage@TxMsg 0026  
          __end_of_SwSpi_Set_Synth_Le_Pin 3628                       _keepAliveSignalUart 3BE0  
                       __size_of_GroupDAC 0020                          _WriteUartMessage 373E  
                       __size_of_GroupAdc 0048                    __size_of_FlashReadUart 03C2  
                                ??___ftge 001E                                  ??___lmul 0022  
                 SendAckMessage@inRequest 0024                                  ??___wmul 001C  
               GetIntFromUartData@idxData 0086                         __size_of_ResetMcu 000E  
                    __size_of_BlinkOkLeds 005E                   SetAdcOperationMode@data 002C  
                  __end_of_ADC_Initialize 3AF2                          ?_UpdateSynthFreq 0087  
       __end_of_SetConversionResultFormat 3BD4                               __pdataBANK0 00E8  
                             __pdataBANK1 01E3                   SWSPI_DAC_send_bits@data 001A  
                                ??_memset 001E                  __size_of_GroupControlMcu 0030  
             FLASH_EraseBlock@GIEBitValue 001C                            _SendAckMessage 32F4  
                          _SetChannelMode 380C                  __end_of_FLASH_EraseBlock 37DC  
                      _SendSystemStartAck 3BEC                  __size_of_SWSPI_send_word 009A  
                                ??_strtol 002C                            _eusart1RxCount 00E3  
                       __size_of___altoft 007A                                 _ZeroArray 3A52  
                         DacInit@dacInput 00CA                         __size_of___awtoft 0038  
                       __size_of___ftpack 00AE                      ?_keepAliveSignalUart 0001  
                       __size_of___lltoft 005C                               __pbssCOMRAM 0031  
                       __size_of___lwtoft 0024             __size_of_EUSART1_Transmit_ISR 0038  
                           __pcstackBANK0 0060                             __pcstackBANK2 0200  
                            _isalpha$3020 001C                       ?_SendSystemStartAck 0001  
                              ?_InitSynth 0001                              _isdigit$3023 0019  
                          ?_GetMcuRunTime 0001                            BlinkOkLeds@idx 001C  
                                ?_DacInit 0001                     __size_of_SetMcuSystem 000A  
                        _SwSpi_Set_CE_Pin 35B0              __size_of_EUSART1_Receive_ISR 002E  
           SWSPI_Synth_send_bits@bitArray 0060                   _DAC_DEFAULT_INIT_VALUES 0642  
                    __size_of_EepromWrite 000E                     _TMR0_InterruptHandler 01EF  
                               __pnvBANK1 01EF                         SetSynthOper@cType 00CF  
                __size_of_TMR0_StartTimer 0004                    _PIN_MANAGER_Initialize 33DC  
                    ??_SendSystemStartAck 002C                     _InitAdcApplicationMgr 3B68  
                               __pintcode 0008                    __end_of_SendAckMessage 3346  
                               __ptext100 3094                                 __ptext101 39D2  
                               __ptext110 3532                                 __ptext102 2794  
                               __ptext111 3C28                                 __ptext103 1D38  
                               __ptext112 3C2C                                 __ptext104 2570  
                               __ptext113 36D0                                 __ptext105 37A8  
                               __ptext114 386C                                 __ptext106 3BA2  
                               __ptext115 0000                                 __ptext107 383C  
                               __ptext109 2A04                                  ?___ftadd 0078  
                                ?___ftdiv 0029                    __end_of_SetChannelMode 383C  
                                ?___ftneg 0018                                  ?___lldiv 0018  
                                ?___ftmul 0069                                  ?___llmod 0018  
                                ?___ftsub 0084                                  ?___fttol 0078  
                        _FlashSampleWrite 1D38                                  ?___lwmod 0001  
                         ?_ADC_Initialize 0001                         __size_of_testLeds 006A  
                           _PLLInitialize 3B56             SetConversionResultFormat@data 002C  
             __size_of_keepAliveSignalLed 0018              ??_INTERRUPT_InterruptManager 0006  
                        __CFG_PRICLKEN$ON 000000                                ?_ZeroArray 0020  
                             __smallconst 0600                     ??_keepAliveSignalUart 002C  
                                _BAUDCON1 000FB8                             _SwSpi_Clk_Pin 31F6  
                                ?_isalpha 0001                                  ?_isdigit 0001  
                               _eval_poly 23CC                       BlinkErrorLeds@state 001B  
                         _TimerOneSecFlag 00E7                                  ?_isspace 0001  
                            _SetMcuSystem 3BF8                                  ?_isupper 0001  
                           _FlashReadUart 06A4              __size_of_SetAdcOperationMode 000C  
                          __size_of_make8 005C                            __size_of_floor 00E2  
                          __size_of_ldexp 00CE                            __size_of_frexp 0090  
                __size_of_DATAEE_ReadByte 0014                                  ?_toupper 0001  
                        _conversionFormat 017A                      _INTERRUPT_Initialize 3C20  
          FLASH_WriteBlock@blockStartAddr 0027               __size_of_FlashReadCondition 010C  
                       ??_TMR0_Initialize 001A                    ??_CheckFlashPrecentage 0078  
                          ___wmul@product 001C                                  _LATAbits 000F89  
                                _LATBbits 000F8A                                  _LATCbits 000F8B  
                                _LATDbits 000F8C                     __size_of_SetSynthOper 007C  
                __end_of_StoreIntInEeprom 3660            FlashReadUart@numOfSampleToRead 002C  
                                _PIE1bits 000F9D                                  _PIE2bits 000FA0  
                   _GroupStatusAndVersion 398A                         _GroupSynthesizers 2C46  
     __size_of_INTERRUPT_InterruptManager 00D4                ??_TMR0_SetInterruptHandler 001A  
                    Make32bitsArray@array 0018                                  _PIR1bits 000F9E  
                        ??_FLASH_ReadByte 001C                                  _PIR2bits 000FA1  
                               _rxMsgData 01BB                       UpdateSynthFreq@data 0087  
                                i2u566_40 354C                       SWSPI_send_word@data 0026  
                      ?_GroupSynthesizers 00D0                                  _RCONbits 000FD0  
                        __CFG_WDTPS$16384 000000                       SynthReadData@regNum 0228  
                               make8@data 0018                                  _TMR0_ISR 2A04  
                         ?_SendAckMessage 0024                           ?_SetChannelMode 002C  
                          ?_PLLInitialize 0001                         ??_PIN_MANAGER_IOC 0001  
                     ??_GroupSynthesizers 0031                    GetIntFromUartData@data 0066  
                 SWSPI_send_word@dataSize 002A                                _ADCON0bits 000FC2  
                __size_of_readUartMessage 01E0                         ___wmul@multiplier 0018  
                          ?_SwSpi_Clk_Pin 0018                          ??_FlashEreaseMem 002C  
                      __end_of_channelArr 0651                          ??_SwSpi_Data_Pin 0019  
               __size_of_GroupFlashMemory 0044                                ?_eval_poly 0084  
                          ?_FlashReadUart 002C                         ??_GroupControlMcu 0031  
                         ??_GetMcuRunTime 0025                     DATAEE_WriteByte@bData 0018  
                            _isspace$3026 0019                               ??_InitSynth 0031  
                       ??_SWSPI_send_word 002B                                DacInit@idx 00CC  
                            _SetSynthOper 2D54                                _DAC_ADDRES 0651  
             __size_of_GetIntFromUartData 017C                         ___lmul@multiplier 001A  
                 FlashReadCondition@TxMsg 0028                               _INTCON2bits 000FF1  
                   __end_of_SynthReadData 0C68                                 copy_data0 2986  
                               copy_data1 29A6                                 copy_data2 29C6  
                   ?_INTERRUPT_Initialize 0001                          __size_of_DacInit 0096  
                       ?_DATAEE_WriteByte 0018                 __end_of_GroupSynthesizers 2CD2  
                   EUSART1_Read@readValue 0019                  __end_of_FLASH_WriteBlock 262C  
                                _GroupDAC 39F6                        ??_DATAEE_WriteByte 0019  
                                _GroupAdc 3394                                 frexp@eptr 001B  
                              _EECON1bits 000FA6                                  __Hrparam 0000  
                  ?_InitAdcApplicationMgr 0001                                  _ResetMcu 3B86  
                           ??_DacSetValue 002E                               _readAddress 00E8  
                                __Lrparam 0000              SynthReadData@eepromDataArray 021C  
                       _ADC_GetConversion 383C                       FlashReadUart@offset 00BD  
                         _ClearMcuRunTime 3B30                         __CFG_P2BMX$PORTD2 000000  
             ??_SetConversionResultFormat 002E                   ??_OSCILLATOR_Initialize 0018  
                      ?_ADC_GetConversion 0018                         ??_TMR0_StartTimer 0018  
                        __size_of___ftadd 01AE                          __size_of___ftdiv 00E8  
                    _numOfValidateSamples 0031                          __size_of___ftneg 0024  
                        __size_of___lldiv 0082                                  ___altoft 2DD0  
                        __size_of___ftmul 00F6                          __size_of___llmod 0066  
                        __size_of___ftsub 0042                          __size_of___fttol 00F8  
             __size_of_EUSART1_Initialize 0038                          __size_of___lwmod 0042  
                         GroupAdc@request 00D2                                  ___awtoft 3698  
                           crc8@dataArray 0018                                  ___ftpack 2794  
                        _numOfReadSamples 003C                                  ___lltoft 3094  
                       _FLASH_IsWriteDone 3BA2                       WriteUartMessage@idx 001E  
                                ___lwtoft 39D2                               ??_ZeroArray 0024  
                GetMcuRunTime@tempRunTime 0069                       ??_ADC_GetConversion 001A  
                                _exp$3310 009A                              _isupper$3029 0019  
                      ?_FLASH_IsWriteDone 0001                                  _dataSize 00DF  
                   SwSpi_Clk_Pin@cPinMode 0018                  __end_of_WriteUartMessage 3774  
                        __size_of_isalpha 0028                                  _crcGiven 00DD  
                        __size_of_isdigit 001E                   ??_SWSPI_Synth_send_bits 0026  
                  SwSpi_Data_Pin@cPinMode 0018                          __size_of_isspace 0026  
                                __ptext10 3628                                  __ptext11 3B78  
                                __ptext20 0A66                                  __ptext12 3708  
                                __ptext21 2D54                                  __ptext13 16F8  
                                __ptext30 3BBC                                  __ptext22 2206  
                                __ptext14 103E                                  __ptext31 2E4A  
                                __ptext23 2CD2                                  __ptext15 3B08  
                                __ptext40 3AAA                                  __ptext32 3B86  
                                __ptext24 2A96                                  __ptext16 393E  
                                __ptext41 3774                                  __ptext33 3BC8  
                                __ptext25 06A4                                  __ptext17 3A16  
                                __ptext50 3BEC                                  __ptext42 3C02  
                                __ptext34 380C                                  __ptext26 3916  
                                __ptext18 38EE                                  __ptext51 32F4  
                                __ptext43 33DC                                  __ptext35 3BD4  
                                __ptext27 3B44                                  __ptext19 3A34  
                                __ptext60 35B0                                  __ptext52 3346  
                                __ptext44 3B94                                  __ptext36 3468  
                                __ptext28 1C2C                                  __ptext61 3B68  
                                __ptext53 3A52                                  __ptext45 3C20  
                                __ptext37 3BE0                                  __ptext29 32A2  
                                __ptext70 30F0                                  __ptext62 28DC  
                                __ptext54 373E                                  __ptext46 3660  
                                __ptext38 3AC4                                  __ptext71 3148  
                                __ptext63 2842                                  __ptext55 3574  
                                __ptext47 3ADC                                  __ptext39 3BF8  
                                __ptext80 2F7C                                  __ptext72 31A0  
                                __ptext64 3038                                  __ptext56 3AF2  
                                __ptext48 34AC                                  __ptext81 2FDA  
                                __ptext73 31F6                                  __ptext65 35EC  
                                __ptext57 3C24                                  __ptext49 2EB4  
                                __ptext90 2BB6                                  __ptext82 1214  
                                __ptext74 1B06                                  __ptext66 3A8E  
                                __ptext58 3B56                                  __ptext91 2DD0  
                                __ptext83 1578                                  __ptext75 324C  
                                __ptext67 262C                                  __ptext59 1874  
                                __ptext92 23CC                                  __ptext84 19DC  
                                __ptext76 3C0C                                  __ptext68 3A70  
                                __ptext93 3964                                  __ptext85 0C68  
                                __ptext77 3B1C                                  __ptext69 389A  
                                __ptext94 2028                                  __ptext86 24A2  
                                __ptext78 3B30                                  __ptext95 34F0  
                                __ptext87 22EA                                  __ptext79 26E6  
                                __ptext96 13CA                                  __ptext88 2B26  
                                __ptext97 39AE                                  __ptext89 1F30  
                                __ptext98 211E                                  __ptext99 3698  
                        __size_of_isupper 001E              SWSPI_Synth_send_bits@phrType 0085  
                SwSpi_Set_CE_Pin@cPinMode 0018                                  _pow$3308 00A6  
                                _pow$3309 00A9                       ??_FLASH_IsWriteDone 0018  
             DATAEE_WriteByte@GIEBitValue 001A                          __size_of_toupper 0014  
                __size_of_GetMcuFwVersion 0090                             __size_of_crc8 004E  
                           __size_of_main 0062                    ?_GroupStatusAndVersion 00D0  
                    __end_of_SYNTH_ADDRES 0642                                  _msgCount 00DC  
            _TMR0_DefaultInterruptHandler 000000                         ??_DATAEE_ReadByte 0018  
               __end_of_ADC_GetConversion 386C              __size_of_SWSPI_DAC_send_bits 0058  
                     Make32bitsArray@data 001A                        SWSPI_send_word@idx 002C  
                             _groupsArray 01E3                           ??_PLLInitialize 0031  
                                _testLeds 2E4A                   __size_of_BlinkErrorLeds 005E  
                                int$flags 0048                  __size_of_Make32bitsArray 0058  
                              strtol@base 002A                                strtol@sign 0060  
               __end_of_FLASH_IsWriteDone 3BB0        __end_of_INTERRUPT_InterruptManager 00DC  
              _INTERRUPT_InterruptManager 0008                    __size_of_ZeroBitsArray 001E  
                         EepromWrite@data 001B                           ??_SwSpi_Clk_Pin 0019  
                     __end_of_DacSetValue 3BC8                       _EUSART1_Receive_ISR 386C  
                __end_of_SwSpi_Set_CE_Pin 35EC                         ?_FLASH_EraseBlock 0018  
             __end_of_InitRxMessageParams 38EE                                  exp@coeff 0655  
                              _MEMORY_ISR 3C2C                           ??_FlashReadUart 0060  
                                log@coeff 0673                    SWSPI_send_word@phrType 002E  
                      ??_FLASH_EraseBlock 001C                                _INTCONbits 000FF2  
                             ??_eval_poly 002F                               _sampleArray 017B  
                             _sampleCount 0174                                  isalpha@c 001D  
                                isdigit@c 001A                    ??_INTERRUPT_Initialize 0018  
                                memset@p1 0018                         ??_readUartMessage 00D4  
               _SetConversionResultFormat 3BC8                  __end_of_FlashSampleWrite 1E36  
                                intlevel2 0000                      ?_EUSART1_Receive_ISR 0001  
                   __end_of_SetMcuRunTime 34F0                          ___lwmod@dividend 0001  
              __size_of_GroupSynthesizers 008C                                  isspace@c 001A  
                        ___lldiv@dividend 0018                   ?_PIN_MANAGER_Initialize 0001  
                 __end_of_ClearMcuRunTime 3B44                                _RCSTA1bits 000FAB  
                                isupper@c 001A                  ReadIntFromEeprom@address 00C2  
            __end_of_EUSART1_Transmit_ISR 3708                             ??_BlinkOkLeds 0018  
                        ??_ADC_Initialize 0018                        Make32bitsArray@idx 0020  
                       _TimerSamplingFlag 00E6                             AdcConvert@idx 00BC  
                     _SetAdcOperationMode 3BD4                             _isReWriteDone 00DB  
                   UpdateSynthFreq@retVal 008A                      SwSpi_Clk_Pin@phrType 0019  
                   SwSpi_Data_Pin@phrType 0019                   SwSpi_Set_CE_Pin@phrType 0019  
                  __size_of_EUSART1_Write 003C                  ??_SwSpi_Set_Dac_Sync_Pin 0018  
                       EepromRead@address 0019                          ___lldiv@quotient 0020  
                        _GroupFlashMemory 3424                           ___lwmod@divisor 0003  
                         _TMR0_Initialize 3774                           ___lwmod@counter 0005  
                __size_of_UpdateSynthFreq 00FA                                  toupper@c 0018  
              ReadIntFromEeprom@numOfByes 00B1                         __CFG_T3CMX$PORTC0 000000  
                    ?_SetAdcOperationMode 002C                   ReadIntFromEeprom@retVal 00C3  
                           ??_EepromWrite 001C                             _ZeroBitsArray 3A70  
                              _AdcConvert 1214                     ??_EUSART1_Receive_ISR 0001  
          __end_of_PIN_MANAGER_Initialize 3424              GetIntFromUartData@dataRegArr 0070  
                       __CFG_FOSC$INTIO67 000000                           _PIN_MANAGER_IOC 3C28  
                       ?_StoreIntInEeprom 0021                          ??_SendAckMessage 0025  
              __size_of_ADC_GetConversion 0030                          ??_SetChannelMode 002E  
                      ??_StoreIntInEeprom 0028                               _DacSetValue 3BBC  



Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Mar 24 18:46:09 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    12                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    17                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    18                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    21                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    22                           	psect	text0,global,reloc=2,class=CODE,delta=1
    23                           	psect	text1,global,reloc=2,class=CODE,delta=1
    24                           	psect	text2,global,reloc=2,class=CODE,delta=1
    25                           	psect	text3,global,reloc=2,class=CODE,delta=1
    26                           	psect	text4,global,reloc=2,class=CODE,delta=1
    27                           	psect	text5,global,reloc=2,class=CODE,delta=1
    28                           	psect	text6,global,reloc=2,class=CODE,delta=1
    29                           	psect	text7,global,reloc=2,class=CODE,delta=1
    30                           	psect	text8,global,reloc=2,class=CODE,delta=1
    31                           	psect	text9,global,reloc=2,class=CODE,delta=1
    32                           	psect	text10,global,reloc=2,class=CODE,delta=1
    33                           	psect	text11,global,reloc=2,class=CODE,delta=1
    34                           	psect	text12,global,reloc=2,class=CODE,delta=1
    35                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text14,global,reloc=2,class=CODE,delta=1
    37                           	psect	text15,global,reloc=2,class=CODE,delta=1
    38                           	psect	text16,global,reloc=2,class=CODE,delta=1
    39                           	psect	text17,global,reloc=2,class=CODE,delta=1
    40                           	psect	text18,global,reloc=2,class=CODE,delta=1
    41                           	psect	text19,global,reloc=2,class=CODE,delta=1
    42                           	psect	text20,global,reloc=2,class=CODE,delta=1
    43                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text27,global,reloc=2,class=CODE,delta=1
    50                           	psect	text28,global,reloc=2,class=CODE,delta=1
    51                           	psect	text29,global,reloc=2,class=CODE,delta=1
    52                           	psect	text30,global,reloc=2,class=CODE,delta=1
    53                           	psect	text31,global,reloc=2,class=CODE,delta=1
    54                           	psect	text32,global,reloc=2,class=CODE,delta=1
    55                           	psect	text33,global,reloc=2,class=CODE,delta=1
    56                           	psect	text34,global,reloc=2,class=CODE,delta=1
    57                           	psect	text35,global,reloc=2,class=CODE,delta=1
    58                           	psect	text36,global,reloc=2,class=CODE,delta=1
    59                           	psect	text37,global,reloc=2,class=CODE,delta=1
    60                           	psect	text38,global,reloc=2,class=CODE,delta=1
    61                           	psect	text39,global,reloc=2,class=CODE,delta=1
    62                           	psect	text40,global,reloc=2,class=CODE,delta=1
    63                           	psect	text41,global,reloc=2,class=CODE,delta=1
    64                           	psect	text42,global,reloc=2,class=CODE,delta=1
    65                           	psect	text43,global,reloc=2,class=CODE,delta=1
    66                           	psect	text44,global,reloc=2,class=CODE,delta=1
    67                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text46,global,reloc=2,class=CODE,delta=1
    69                           	psect	text47,global,reloc=2,class=CODE,delta=1
    70                           	psect	text48,global,reloc=2,class=CODE,delta=1
    71                           	psect	text49,global,reloc=2,class=CODE,delta=1
    72                           	psect	text50,global,reloc=2,class=CODE,delta=1
    73                           	psect	text51,global,reloc=2,class=CODE,delta=1
    74                           	psect	text52,global,reloc=2,class=CODE,delta=1
    75                           	psect	text53,global,reloc=2,class=CODE,delta=1
    76                           	psect	text54,global,reloc=2,class=CODE,delta=1
    77                           	psect	text55,global,reloc=2,class=CODE,delta=1
    78                           	psect	text56,global,reloc=2,class=CODE,delta=1
    79                           	psect	text57,global,reloc=2,class=CODE,delta=1
    80                           	psect	text58,global,reloc=2,class=CODE,delta=1
    81                           	psect	text59,global,reloc=2,class=CODE,delta=1
    82                           	psect	text60,global,reloc=2,class=CODE,delta=1
    83                           	psect	text61,global,reloc=2,class=CODE,delta=1
    84                           	psect	text62,global,reloc=2,class=CODE,delta=1
    85                           	psect	text63,global,reloc=2,class=CODE,delta=1
    86                           	psect	text64,global,reloc=2,class=CODE,delta=1
    87                           	psect	text65,global,reloc=2,class=CODE,delta=1
    88                           	psect	text66,global,reloc=2,class=CODE,delta=1
    89                           	psect	text67,global,reloc=2,class=CODE,delta=1
    90                           	psect	text68,global,reloc=2,class=CODE,delta=1
    91                           	psect	text69,global,reloc=2,class=CODE,delta=1,group=1
    92                           	psect	text70,global,reloc=2,class=CODE,delta=1
    93                           	psect	text71,global,reloc=2,class=CODE,delta=1
    94                           	psect	text72,global,reloc=2,class=CODE,delta=1
    95                           	psect	text73,global,reloc=2,class=CODE,delta=1
    96                           	psect	text74,global,reloc=2,class=CODE,delta=1,group=1
    97                           	psect	text75,global,reloc=2,class=CODE,delta=1
    98                           	psect	text76,global,reloc=2,class=CODE,delta=1
    99                           	psect	text77,global,reloc=2,class=CODE,delta=1
   100                           	psect	text78,global,reloc=2,class=CODE,delta=1
   101                           	psect	text79,global,reloc=2,class=CODE,delta=1
   102                           	psect	text80,global,reloc=2,class=CODE,delta=1
   103                           	psect	text81,global,reloc=2,class=CODE,delta=1
   104                           	psect	text82,global,reloc=2,class=CODE,delta=1,group=1
   105                           	psect	text83,global,reloc=2,class=CODE,delta=1,group=1
   106                           	psect	text84,global,reloc=2,class=CODE,delta=1,group=1
   107                           	psect	text85,global,reloc=2,class=CODE,delta=1,group=1
   108                           	psect	text86,global,reloc=2,class=CODE,delta=1,group=1
   109                           	psect	text87,global,reloc=2,class=CODE,delta=1,group=1
   110                           	psect	text88,global,reloc=2,class=CODE,delta=1,group=1
   111                           	psect	text89,global,reloc=2,class=CODE,delta=1,group=1
   112                           	psect	text90,global,reloc=2,class=CODE,delta=1,group=1
   113                           	psect	text91,global,reloc=2,class=CODE,delta=1,group=1
   114                           	psect	text92,global,reloc=2,class=CODE,delta=1,group=1
   115                           	psect	text93,global,reloc=2,class=CODE,delta=1,group=1
   116                           	psect	text94,global,reloc=2,class=CODE,delta=1,group=1
   117                           	psect	text95,global,reloc=2,class=CODE,delta=1,group=1
   118                           	psect	text96,global,reloc=2,class=CODE,delta=1,group=1
   119                           	psect	text97,global,reloc=2,class=CODE,delta=1,group=1
   120                           	psect	text98,global,reloc=2,class=CODE,delta=1,group=1
   121                           	psect	text99,global,reloc=2,class=CODE,delta=1,group=1
   122                           	psect	text100,global,reloc=2,class=CODE,delta=1,group=1
   123                           	psect	text101,global,reloc=2,class=CODE,delta=1,group=1
   124                           	psect	text102,global,reloc=2,class=CODE,delta=1
   125                           	psect	text103,global,reloc=2,class=CODE,delta=1
   126                           	psect	text104,global,reloc=2,class=CODE,delta=1
   127                           	psect	text105,global,reloc=2,class=CODE,delta=1
   128                           	psect	text106,global,reloc=2,class=CODE,delta=1
   129                           	psect	text107,global,reloc=2,class=CODE,delta=1
   130                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   131                           	psect	text109,global,reloc=2,class=CODE,delta=1
   132                           	psect	text110,global,reloc=2,class=CODE,delta=1,group=1
   133                           	psect	text111,global,reloc=2,class=CODE,delta=1
   134                           	psect	text112,global,reloc=2,class=CODE,delta=1
   135                           	psect	text113,global,reloc=2,class=CODE,delta=1
   136                           	psect	text114,global,reloc=2,class=CODE,delta=1
   137                           	psect	text115,global,reloc=2,class=CODE,delta=1
   138                           	psect	text116,global,reloc=2,class=CODE,delta=1
   139                           	psect	text117,global,reloc=2,class=CODE,delta=1
   140                           	psect	text118,global,reloc=2,class=CODE,delta=1
   141                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   142                           	psect	text119,global,reloc=2,class=CODE,delta=1
   143                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   144                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   145  0000                     
   146                           ; Version 1.45
   147                           ; Generated 16/11/2017 GMT
   148                           ; 
   149                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   150                           ; All rights reserved.
   151                           ; 
   152                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   153                           ; 
   154                           ; Redistribution and use in source and binary forms, with or without modification, are
   155                           ; permitted provided that the following conditions are met:
   156                           ; 
   157                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   158                           ;        conditions and the following disclaimer.
   159                           ; 
   160                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   161                           ;        of conditions and the following disclaimer in the documentation and/or other
   162                           ;        materials provided with the distribution.
   163                           ; 
   164                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   165                           ;        software without specific prior written permission.
   166                           ; 
   167                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   168                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   169                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   170                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   171                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   172                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   173                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   174                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   175                           ; 
   176                           ; 
   177                           ; Code-generator required, PIC18F45K22 Definitions
   178                           ; 
   179                           ; SFR Addresses
   180  0000                     
   181 ;; Function _TMR0_DefaultInterruptHandler is unused but had its address taken
   182  0000                     
   183                           	psect	idataCOMRAM
   184  00422E                     __pidataCOMRAM:
   185                           	opt stack 0
   186                           
   187                           ;initializer for _writeAddress
   188  00422E  4580               	dw	17792
   189  004230  0000               	dw	0
   190                           
   191                           ;initializer for _SynthRxOper
   192  004232  01                 	db	1
   193                           
   194                           ;initializer for _SynthTxOper
   195  004233  01                 	db	1
   196                           
   197                           	psect	idataBANK0
   198  004246                     __pidataBANK0:
   199                           	opt stack 0
   200                           
   201                           ;initializer for _synthLdTxCnt
   202  004246  02                 	db	2
   203                           
   204                           ;initializer for _synthLdRxCnt
   205  004247  02                 	db	2
   206                           
   207                           	psect	idataBANK1
   208  004198                     __pidataBANK1:
   209                           	opt stack 0
   210                           
   211                           ;initializer for _groupsArray
   212  004198  04                 	db	low _GroupControlMcu
   213  004199  3E                 	db	high _GroupControlMcu
   214  00419A  8A                 	db	low _GroupStatusAndVersion
   215  00419B  3F                 	db	high _GroupStatusAndVersion
   216  00419C  3A                 	db	low _GroupAdc
   217  00419D  40                 	db	high _GroupAdc
   218  00419E  CC                 	db	low _GroupSynthesizers
   219  00419F  31                 	db	high _GroupSynthesizers
   220  0041A0  E8                 	db	low _GroupFlashMemory
   221  0041A1  3B                 	db	high _GroupFlashMemory
   222  0041A2  68                 	db	low _GroupDAC
   223  0041A3  3D                 	db	high _GroupDAC
   224                           
   225                           ;initializer for _readAddress
   226  0041A4  4580               	dw	17792
   227  0041A6  0000               	dw	0
   228                           
   229                           	psect	smallconst
   230  000600                     __psmallconst:
   231                           	opt stack 0
   232  000600  00                 	db	0
   233  000601                     _SYNTH_REGS:
   234                           	opt stack 0
   235  000601  041C               	dw	1052
   236  000603  0001               	dw	1
   237  000605  300B               	dw	12299
   238  000607  0061               	dw	97
   239  000609  193A               	dw	6458
   240  00060B  00C0               	dw	192
   241  00060D  FCC9               	dw	64713
   242  00060F  1110               	dw	4368
   243  000611  0428               	dw	1064
   244  000613  102D               	dw	4141
   245  000615  00E7               	dw	231
   246  000617  1200               	dw	4608
   247  000619  6076               	dw	24694
   248  00061B  3500               	dw	13568
   249  00061D  0025               	dw	37
   250  00061F  0080               	dw	128
   251  000621  BF84               	dw	49028
   252  000623  0800               	dw	2048
   253  000625  0003               	dw	3
   254  000627  0000               	dw	0
   255  000629  0012               	dw	18
   256  00062B  0000               	dw	0
   257  00062D  0001               	dw	1
   258  00062F  0C00               	dw	3072
   259  000631  0680               	dw	1664
   260  000633  0020               	dw	32
   261  000635                     __end_of_SYNTH_REGS:
   262                           	opt stack 0
   263  000635                     _SYNTH_ADDRES:
   264                           	opt stack 0
   265  000635  04                 	db	4
   266  000636  08                 	db	8
   267  000637  0C                 	db	12
   268  000638  00                 	db	0
   269  000639  10                 	db	16
   270  00063A  00                 	db	0
   271  00063B  14                 	db	20
   272  00063C  00                 	db	0
   273  00063D  00                 	db	0
   274  00063E  00                 	db	0
   275  00063F  18                 	db	24
   276  000640  00                 	db	0
   277  000641  00                 	db	0
   278  000642                     __end_of_SYNTH_ADDRES:
   279                           	opt stack 0
   280  000642                     _channelArr:
   281                           	opt stack 0
   282  000642  04                 	db	4
   283  000643  05                 	db	5
   284  000644  06                 	db	6
   285  000645  07                 	db	7
   286  000646  08                 	db	8
   287  000647  09                 	db	9
   288  000648  0A                 	db	10
   289  000649  0D                 	db	13
   290  00064A  19                 	db	25
   291  00064B                     __end_of_channelArr:
   292                           	opt stack 0
   293  00064B                     _DAC_DEFAULT_INIT_VALUES:
   294                           	opt stack 0
   295  00064B  2344               	dw	9028
   296  00064D  6344               	dw	25412
   297  00064F  A344               	dw	41796
   298  000651  E344               	dw	58180
   299  000653                     __end_of_DAC_DEFAULT_INIT_VALUES:
   300                           	opt stack 0
   301  000653                     _DAC_ADDRES:
   302                           	opt stack 0
   303  000653  02                 	db	2
   304  000654  04                 	db	4
   305  000655  06                 	db	6
   306  000656  08                 	db	8
   307  000657                     __end_of_DAC_ADDRES:
   308                           	opt stack 0
   309  000657                     exp@coeff:
   310                           	opt stack 0
   311  000657  00                 	db	0
   312  000658  80                 	db	128
   313  000659  3F                 	db	63
   314  00065A  72                 	db	114
   315  00065B  31                 	db	49
   316  00065C  3F                 	db	63
   317  00065D  FE                 	db	254
   318  00065E  75                 	db	117
   319  00065F  3E                 	db	62
   320  000660  58                 	db	88
   321  000661  63                 	db	99
   322  000662  3D                 	db	61
   323  000663  95                 	db	149
   324  000664  1D                 	db	29
   325  000665  3C                 	db	60
   326  000666  C5                 	db	197
   327  000667  AE                 	db	174
   328  000668  3A                 	db	58
   329  000669  79                 	db	121
   330  00066A  21                 	db	33
   331  00066B  39                 	db	57
   332  00066C  94                 	db	148
   333  00066D  80                 	db	128
   334  00066E  37                 	db	55
   335  00066F  93                 	db	147
   336  000670  A7                 	db	167
   337  000671  35                 	db	53
   338  000672  56                 	db	86
   339  000673  15                 	db	21
   340  000674  34                 	db	52
   341  000675                     __end_ofexp@coeff:
   342                           	opt stack 0
   343  000675                     log@coeff:
   344                           	opt stack 0
   345  000675  00                 	db	0
   346  000676  00                 	db	0
   347  000677  00                 	db	0
   348  000678  00                 	db	0
   349  000679  80                 	db	128
   350  00067A  3F                 	db	63
   351  00067B  F0                 	db	240
   352  00067C  FF                 	db	255
   353  00067D  BE                 	db	190
   354  00067E  E2                 	db	226
   355  00067F  A9                 	db	169
   356  000680  3E                 	db	62
   357  000681  83                 	db	131
   358  000682  76                 	db	118
   359  000683  BE                 	db	190
   360  000684  AE                 	db	174
   361  000685  2B                 	db	43
   362  000686  3E                 	db	62
   363  000687  3C                 	db	60
   364  000688  C3                 	db	195
   365  000689  BD                 	db	189
   366  00068A  D2                 	db	210
   367  00068B  13                 	db	19
   368  00068C  3D                 	db	61
   369  00068D  78                 	db	120
   370  00068E  D3                 	db	211
   371  00068F  BB                 	db	187
   372  000690                     __end_oflog@coeff:
   373                           	opt stack 0
   374  000690                     STR_1:
   375                           
   376                           ; BSR set to: 0
   377  000690  4D                 	db	77	;'M'
   378  000691  61                 	db	97	;'a'
   379  000692  72                 	db	114	;'r'
   380  000693  20                 	db	32
   381  000694  32                 	db	50	;'2'
   382  000695  34                 	db	52	;'4'
   383  000696  20                 	db	32
   384  000697  32                 	db	50	;'2'
   385  000698  30                 	db	48	;'0'
   386  000699  31                 	db	49	;'1'
   387  00069A  38                 	db	56	;'8'
   388  00069B  00                 	db	0
   389  00069C                     STR_18:
   390                           
   391                           ; BSR set to: 0
   392  00069C  31                 	db	49	;'1'
   393  00069D  37                 	db	55	;'7'
   394  00069E  3A                 	db	58	;':'
   395  00069F  31                 	db	49	;'1'
   396  0006A0  34                 	db	52	;'4'
   397  0006A1  3A                 	db	58	;':'
   398  0006A2  30                 	db	48	;'0'
   399  0006A3  37                 	db	55	;'7'
   400  0006A4  00                 	db	0
   401  0000                     
   402                           ; #config settings
   403  0006A5  00                 	db	0	; dummy byte at the end
   404  0000                     
   405                           	psect	nvCOMRAM
   406  000045                     __pnvCOMRAM:
   407                           	opt stack 0
   408  000045                     _timer0ReloadVal:
   409                           	opt stack 0
   410  000045                     	ds	2
   411  000047                     _eusart1TxBufferRemaining:
   412                           	opt stack 0
   413  000047                     	ds	1
   414                           
   415                           	psect	nvBANK1
   416  0001F5                     __pnvBANK1:
   417                           	opt stack 0
   418  0001F5                     _TMR0_InterruptHandler:
   419                           	opt stack 0
   420  0001F5                     	ds	2
   421  0001F7                     _IOCB5_InterruptHandler:
   422                           	opt stack 0
   423  0001F7                     	ds	2
   424  0001F9                     _IOCB4_InterruptHandler:
   425                           	opt stack 0
   426  0001F9                     	ds	2
   427  0000                     _ANSELA	set	3896
   428  0000                     _ANSELE	set	3900
   429  0000                     _ANSELD	set	3899
   430  0000                     _ANSELB	set	3897
   431  0000                     _ANSELC	set	3898
   432  0000                     _ADCON0bits	set	4034
   433  0000                     _ADRESH	set	4036
   434  0000                     _ADRESL	set	4035
   435  0000                     _ADCON2	set	4032
   436  0000                     _ADCON1	set	4033
   437  0000                     _ADCON0	set	4034
   438  0000                     _T0CONbits	set	4053
   439  0000                     _T0CON	set	4053
   440  0000                     _TMR0L	set	4054
   441  0000                     _TMR0H	set	4055
   442  0000                     _EEDATA	set	4008
   443  0000                     _EEADR	set	4009
   444  0000                     _EECON2	set	4007
   445  0000                     _EECON1bits	set	4006
   446  0000                     _TABLAT	set	4085
   447  0000                     _TBLPTRL	set	4086
   448  0000                     _TBLPTRH	set	4087
   449  0000                     _TBLPTRU	set	4088
   450  0000                     _IOCBbits	set	3938
   451  0000                     _INTCON2bits	set	4081
   452  0000                     _WPUB	set	3937
   453  0000                     _TRISD	set	3989
   454  0000                     _TRISC	set	3988
   455  0000                     _TRISB	set	3987
   456  0000                     _TRISA	set	3986
   457  0000                     _TRISE	set	3990
   458  0000                     _LATC	set	3979
   459  0000                     _LATB	set	3978
   460  0000                     _LATA	set	3977
   461  0000                     _LATD	set	3980
   462  0000                     _LATE	set	3981
   463  0000                     _RCREG1	set	4014
   464  0000                     _RCSTA1bits	set	4011
   465  0000                     _TXREG1	set	4013
   466  0000                     _SPBRGH1	set	4016
   467  0000                     _SPBRG1	set	4015
   468  0000                     _TXSTA1	set	4012
   469  0000                     _RCSTA1	set	4011
   470  0000                     _BAUDCON1	set	4024
   471  0000                     _PIR1bits	set	3998
   472  0000                     _PIE1bits	set	3997
   473  0000                     _PIR2bits	set	4001
   474  0000                     _PIE2bits	set	4000
   475  0000                     _RCONbits	set	4048
   476  0000                     _OSCTUNE	set	3995
   477  0000                     _OSCCON2	set	4050
   478  0000                     _OSCCON	set	4051
   479  0000                     _LATAbits	set	3977
   480  0000                     _LATDbits	set	3980
   481  0000                     _INTCONbits	set	4082
   482  0000                     _PORTDbits	set	3971
   483  0000                     _LATCbits	set	3979
   484  0000                     _LATBbits	set	3978
   485                           
   486                           	psect	cinit
   487  003016                     __pcinit:
   488                           	opt stack 0
   489  003016                     start_initialization:
   490                           	opt stack 0
   491  003016                     __initialization:
   492                           	opt stack 0
   493                           
   494                           ; Initialize objects allocated to BANK1 (16 bytes)
   495                           ; load TBLPTR registers with __pidataBANK1
   496  003016  0E98               	movlw	low __pidataBANK1
   497  003018  6EF6               	movwf	tblptrl,c
   498  00301A  0E41               	movlw	high __pidataBANK1
   499  00301C  6EF7               	movwf	tblptrh,c
   500  00301E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   501  003020  6EF8               	movwf	tblptru,c
   502  003022  EE01  F0E5         	lfsr	0,__pdataBANK1
   503  003026  EE10 F010          	lfsr	1,16
   504  00302A                     copy_data0:
   505  00302A  0009               	tblrd		*+
   506  00302C  CFF5 FFEE          	movff	tablat,postinc0
   507  003030  50E5               	movf	postdec1,w,c
   508  003032  50E1               	movf	fsr1l,w,c
   509  003034  E1FA               	bnz	copy_data0
   510                           
   511                           ; Initialize objects allocated to BANK0 (2 bytes)
   512                           ; load TBLPTR registers with __pidataBANK0
   513  003036  0E46               	movlw	low __pidataBANK0
   514  003038  6EF6               	movwf	tblptrl,c
   515  00303A  0E42               	movlw	high __pidataBANK0
   516  00303C  6EF7               	movwf	tblptrh,c
   517  00303E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   518  003040  6EF8               	movwf	tblptru,c
   519  003042  0009               	tblrd		*+	;fetch initializer
   520  003044  CFF5 F0FD          	movff	tablat,__pdataBANK0
   521  003048  0009               	tblrd		*+	;fetch initializer
   522  00304A  CFF5 F0FE          	movff	tablat,__pdataBANK0+1
   523                           
   524                           ; Initialize objects allocated to COMRAM (6 bytes)
   525                           ; load TBLPTR registers with __pidataCOMRAM
   526  00304E  0E2E               	movlw	low __pidataCOMRAM
   527  003050  6EF6               	movwf	tblptrl,c
   528  003052  0E42               	movlw	high __pidataCOMRAM
   529  003054  6EF7               	movwf	tblptrh,c
   530  003056  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   531  003058  6EF8               	movwf	tblptru,c
   532  00305A  EE00  F03F         	lfsr	0,__pdataCOMRAM
   533  00305E  EE10 F006          	lfsr	1,6
   534  003062                     copy_data1:
   535  003062  0009               	tblrd		*+
   536  003064  CFF5 FFEE          	movff	tablat,postinc0
   537  003068  50E5               	movf	postdec1,w,c
   538  00306A  50E1               	movf	fsr1l,w,c
   539  00306C  E1FA               	bnz	copy_data1
   540                           
   541                           ; Clear objects allocated to BANK2 (70 bytes)
   542  00306E  EE02  F000         	lfsr	0,__pbssBANK2
   543  003072  0E46               	movlw	70
   544  003074                     clear_0:
   545  003074  6AEE               	clrf	postinc0,c
   546  003076  06E8               	decf	wreg,f,c
   547  003078  E1FD               	bnz	clear_0
   548                           
   549                           ; Clear objects allocated to BANK1 (178 bytes)
   550  00307A  EE01  F000         	lfsr	0,__pbssBANK1
   551  00307E  0EB2               	movlw	178
   552  003080                     clear_1:
   553  003080  6AEE               	clrf	postinc0,c
   554  003082  06E8               	decf	wreg,f,c
   555  003084  E1FD               	bnz	clear_1
   556                           
   557                           ; Clear objects allocated to BANK0 (19 bytes)
   558  003086  EE00  F0EA         	lfsr	0,__pbssBANK0
   559  00308A  0E13               	movlw	19
   560  00308C                     clear_2:
   561  00308C  6AEE               	clrf	postinc0,c
   562  00308E  06E8               	decf	wreg,f,c
   563  003090  E1FD               	bnz	clear_2
   564                           
   565                           ; Clear objects allocated to COMRAM (14 bytes)
   566  003092  EE00  F031         	lfsr	0,__pbssCOMRAM
   567  003096  0E0E               	movlw	14
   568  003098                     clear_3:
   569  003098  6AEE               	clrf	postinc0,c
   570  00309A  06E8               	decf	wreg,f,c
   571  00309C  E1FD               	bnz	clear_3
   572  00309E                     end_of_initialization:
   573                           	opt stack 0
   574  00309E                     __end_of__initialization:
   575                           	opt stack 0
   576  00309E  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   577  0030A0  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   578  0030A2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   579  0030A4  6EF8               	movwf	tblptru,c
   580  0030A6  0100               	movlb	0
   581  0030A8  EF1D  F01A         	goto	_main	;jump to C main() function
   582                           tblptru	equ	0xFF8
   583                           tblptrh	equ	0xFF7
   584                           tblptrl	equ	0xFF6
   585                           tablat	equ	0xFF5
   586                           postinc0	equ	0xFEE
   587                           wreg	equ	0xFE8
   588                           postdec1	equ	0xFE5
   589                           fsr1l	equ	0xFE1
   590                           
   591                           	psect	bssCOMRAM
   592  000031                     __pbssCOMRAM:
   593                           	opt stack 0
   594  000031                     _numOfValidateSamples:
   595                           	opt stack 0
   596  000031                     	ds	4
   597  000035                     TMR0_ISR@CountCallBack:
   598                           	opt stack 0
   599  000035                     	ds	2
   600  000037                     _eusart1RxTail:
   601                           	opt stack 0
   602  000037                     	ds	1
   603  000038                     _eusart1RxHead:
   604                           	opt stack 0
   605  000038                     	ds	1
   606  000039                     _eusart1TxTail:
   607                           	opt stack 0
   608  000039                     	ds	1
   609  00003A                     _eusart1TxHead:
   610                           	opt stack 0
   611  00003A                     	ds	1
   612  00003B                     _cntRegUpdate:
   613                           	opt stack 0
   614  00003B                     	ds	1
   615  00003C                     _isReWriteDone:
   616                           	opt stack 0
   617  00003C                     	ds	1
   618  00003D                     _data:
   619                           	opt stack 0
   620  00003D                     	ds	1
   621  00003E                     _adcSampleMode:
   622                           	opt stack 0
   623  00003E                     	ds	1
   624                           tblptru	equ	0xFF8
   625                           tblptrh	equ	0xFF7
   626                           tblptrl	equ	0xFF6
   627                           tablat	equ	0xFF5
   628                           postinc0	equ	0xFEE
   629                           wreg	equ	0xFE8
   630                           postdec1	equ	0xFE5
   631                           fsr1l	equ	0xFE1
   632                           
   633                           	psect	dataCOMRAM
   634  00003F                     __pdataCOMRAM:
   635                           	opt stack 0
   636  00003F                     _writeAddress:
   637                           	opt stack 0
   638  00003F                     	ds	4
   639  000043                     _SynthRxOper:
   640                           	opt stack 0
   641  000043                     	ds	1
   642  000044                     _SynthTxOper:
   643                           	opt stack 0
   644  000044                     	ds	1
   645                           tblptru	equ	0xFF8
   646                           tblptrh	equ	0xFF7
   647                           tblptrl	equ	0xFF6
   648                           tablat	equ	0xFF5
   649                           postinc0	equ	0xFEE
   650                           wreg	equ	0xFE8
   651                           postdec1	equ	0xFE5
   652                           fsr1l	equ	0xFE1
   653                           
   654                           	psect	bssBANK0
   655  0000EA                     __pbssBANK0:
   656                           	opt stack 0
   657  0000EA                     _sampleCount:
   658                           	opt stack 0
   659  0000EA                     	ds	2
   660  0000EC                     _count:
   661                           	opt stack 0
   662  0000EC                     	ds	2
   663  0000EE                     _synthLdTxArrayCnt:
   664                           	opt stack 0
   665  0000EE                     	ds	1
   666  0000EF                     _synthLdRxArrayCnt:
   667                           	opt stack 0
   668  0000EF                     	ds	1
   669  0000F0                     _msgCount:
   670                           	opt stack 0
   671  0000F0                     	ds	1
   672  0000F1                     _crcGiven:
   673                           	opt stack 0
   674  0000F1                     	ds	1
   675  0000F2                     _crcCalc:
   676                           	opt stack 0
   677  0000F2                     	ds	1
   678  0000F3                     _dataSize:
   679                           	opt stack 0
   680  0000F3                     	ds	1
   681  0000F4                     _request:
   682                           	opt stack 0
   683  0000F4                     	ds	1
   684  0000F5                     _group:
   685                           	opt stack 0
   686  0000F5                     	ds	1
   687  0000F6                     _cState:
   688                           	opt stack 0
   689  0000F6                     	ds	1
   690  0000F7                     _eusart1RxCount:
   691                           	opt stack 0
   692  0000F7                     	ds	1
   693  0000F8                     _channel:
   694                           	opt stack 0
   695  0000F8                     	ds	1
   696  0000F9                     _Timer0_OneSec:
   697                           	opt stack 0
   698  0000F9                     	ds	1
   699  0000FA                     _Timer0_KeepAlive:
   700                           	opt stack 0
   701  0000FA                     	ds	1
   702  0000FB                     _Timer0_Sampling:
   703                           	opt stack 0
   704  0000FB                     	ds	1
   705  0000FC                     _Timer0_SynthLd:
   706                           	opt stack 0
   707  0000FC                     	ds	1
   708                           tblptru	equ	0xFF8
   709                           tblptrh	equ	0xFF7
   710                           tblptrl	equ	0xFF6
   711                           tablat	equ	0xFF5
   712                           postinc0	equ	0xFEE
   713                           wreg	equ	0xFE8
   714                           postdec1	equ	0xFE5
   715                           fsr1l	equ	0xFE1
   716                           
   717                           	psect	dataBANK0
   718  0000FD                     __pdataBANK0:
   719                           	opt stack 0
   720  0000FD                     _synthLdTxCnt:
   721                           	opt stack 0
   722  0000FD                     	ds	1
   723  0000FE                     _synthLdRxCnt:
   724                           	opt stack 0
   725  0000FE                     	ds	1
   726                           tblptru	equ	0xFF8
   727                           tblptrh	equ	0xFF7
   728                           tblptrl	equ	0xFF6
   729                           tablat	equ	0xFF5
   730                           postinc0	equ	0xFEE
   731                           wreg	equ	0xFE8
   732                           postdec1	equ	0xFE5
   733                           fsr1l	equ	0xFE1
   734                           
   735                           	psect	bssBANK1
   736  000100                     __pbssBANK1:
   737                           	opt stack 0
   738  000100                     _eusart1RxBuffer:
   739                           	opt stack 0
   740  000100                     	ds	40
   741  000128                     _mcuRunTimeIn5SecTicks:
   742                           	opt stack 0
   743  000128                     	ds	4
   744  00012C                     _numOfReadSamples:
   745                           	opt stack 0
   746  00012C                     	ds	4
   747  000130                     _errno:
   748                           	opt stack 0
   749  000130                     	ds	2
   750  000132                     _sampleArray:
   751                           	opt stack 0
   752  000132                     	ds	64
   753  000172                     _rxMsgData:
   754                           	opt stack 0
   755  000172                     	ds	20
   756  000186                     _rxMsgQueue:
   757                           	opt stack 0
   758  000186                     	ds	20
   759  00019A                     _synthLdTxArray:
   760                           	opt stack 0
   761  00019A                     	ds	12
   762  0001A6                     _synthLdRxArray:
   763                           	opt stack 0
   764  0001A6                     	ds	12
   765                           tblptru	equ	0xFF8
   766                           tblptrh	equ	0xFF7
   767                           tblptrl	equ	0xFF6
   768                           tablat	equ	0xFF5
   769                           postinc0	equ	0xFEE
   770                           wreg	equ	0xFE8
   771                           postdec1	equ	0xFE5
   772                           fsr1l	equ	0xFE1
   773                           
   774                           	psect	dataBANK1
   775  0001E5                     __pdataBANK1:
   776                           	opt stack 0
   777  0001E5                     _groupsArray:
   778                           	opt stack 0
   779  0001E5                     	ds	12
   780  0001F1                     _readAddress:
   781                           	opt stack 0
   782  0001F1                     	ds	4
   783                           tblptru	equ	0xFF8
   784                           tblptrh	equ	0xFF7
   785                           tblptrl	equ	0xFF6
   786                           tablat	equ	0xFF5
   787                           postinc0	equ	0xFEE
   788                           wreg	equ	0xFE8
   789                           postdec1	equ	0xFE5
   790                           fsr1l	equ	0xFE1
   791                           
   792                           	psect	bssBANK2
   793  000200                     __pbssBANK2:
   794                           	opt stack 0
   795  000200                     _eusart1TxBuffer:
   796                           	opt stack 0
   797  000200                     	ds	70
   798                           tblptru	equ	0xFF8
   799                           tblptrh	equ	0xFF7
   800                           tblptrl	equ	0xFF6
   801                           tablat	equ	0xFF5
   802                           postinc0	equ	0xFEE
   803                           wreg	equ	0xFE8
   804                           postdec1	equ	0xFE5
   805                           fsr1l	equ	0xFE1
   806                           
   807                           	psect	cstackBANK1
   808  0001B2                     __pcstackBANK1:
   809                           	opt stack 0
   810  0001B2                     SynthReadData@TxMsg:
   811                           	opt stack 0
   812                           
   813                           ; 22 bytes @ 0x0
   814  0001B2                     	ds	22
   815  0001C8                     SynthReadData@data_980:
   816                           	opt stack 0
   817                           
   818                           ; 1 bytes @ 0x16
   819  0001C8                     	ds	1
   820  0001C9                     _SynthReadData$981:
   821                           	opt stack 0
   822                           
   823                           ; 2 bytes @ 0x17
   824  0001C9                     	ds	2
   825  0001CB                     SynthReadData@eepromDataArray:
   826                           	opt stack 0
   827                           
   828                           ; 16 bytes @ 0x19
   829  0001CB                     	ds	16
   830  0001DB                     SynthReadData@cType:
   831                           	opt stack 0
   832                           
   833                           ; 1 bytes @ 0x29
   834  0001DB                     	ds	1
   835  0001DC                     SynthReadData@regNum:
   836                           	opt stack 0
   837                           
   838                           ; 1 bytes @ 0x2A
   839  0001DC                     	ds	1
   840  0001DD                     SynthReadData@byteNum:
   841                           	opt stack 0
   842                           
   843                           ; 1 bytes @ 0x2B
   844  0001DD                     	ds	1
   845  0001DE                     ??_readUartMessage:
   846                           
   847                           ; 1 bytes @ 0x2C
   848  0001DE                     	ds	4
   849  0001E2                     readUartMessage@idx:
   850                           	opt stack 0
   851                           
   852                           ; 2 bytes @ 0x30
   853  0001E2                     	ds	2
   854  0001E4                     readUartMessage@chRec:
   855                           	opt stack 0
   856                           
   857                           ; 1 bytes @ 0x32
   858  0001E4                     	ds	1
   859                           tblptru	equ	0xFF8
   860                           tblptrh	equ	0xFF7
   861                           tblptrl	equ	0xFF6
   862                           tablat	equ	0xFF5
   863                           postinc0	equ	0xFEE
   864                           wreg	equ	0xFE8
   865                           postdec1	equ	0xFE5
   866                           fsr1l	equ	0xFE1
   867                           
   868                           	psect	cstackBANK0
   869  000060                     __pcstackBANK0:
   870                           	opt stack 0
   871  000060                     ??_FlashSampleWrite:
   872  000060                     ??___ftdiv:
   873  000060                     strtol@sign:
   874                           	opt stack 0
   875  000060                     GetMcuFwVersion@compileData:
   876                           	opt stack 0
   877  000060                     GetMcuRunTime@TxMsg:
   878                           	opt stack 0
   879  000060                     SWSPI_Synth_send_bits@bitArray:
   880                           	opt stack 0
   881                           
   882                           ; 32 bytes @ 0x0
   883  000060                     	ds	1
   884  000061                     strtol@a:
   885                           	opt stack 0
   886                           
   887                           ; 4 bytes @ 0x1
   888  000061                     	ds	1
   889  000062                     FlashSampleWrite@rotateLeft:
   890                           	opt stack 0
   891                           
   892                           ; 2 bytes @ 0x2
   893  000062                     	ds	1
   894  000063                     ___ftdiv@cntr:
   895                           	opt stack 0
   896                           
   897                           ; 1 bytes @ 0x3
   898  000063                     	ds	1
   899  000064                     ___ftdiv@f3:
   900                           	opt stack 0
   901  000064                     GetMcuFwVersion@TxMsg:
   902                           	opt stack 0
   903                           
   904                           ; 18 bytes @ 0x4
   905  000064                     	ds	1
   906  000065                     strtol@c:
   907                           	opt stack 0
   908                           
   909                           ; 1 bytes @ 0x5
   910  000065                     	ds	1
   911  000066                     ?_GetIntFromUartData:
   912                           	opt stack 0
   913  000066                     GetIntFromUartData@data:
   914                           	opt stack 0
   915                           
   916                           ; 2 bytes @ 0x6
   917  000066                     	ds	1
   918  000067                     ___ftdiv@exp:
   919                           	opt stack 0
   920                           
   921                           ; 1 bytes @ 0x7
   922  000067                     	ds	1
   923  000068                     ___ftdiv@sign:
   924                           	opt stack 0
   925                           
   926                           ; 1 bytes @ 0x8
   927  000068                     	ds	1
   928  000069                     ?___ftmul:
   929                           	opt stack 0
   930  000069                     ___ftmul@f1:
   931                           	opt stack 0
   932  000069                     GetMcuRunTime@tempRunTime:
   933                           	opt stack 0
   934                           
   935                           ; 4 bytes @ 0x9
   936  000069                     	ds	3
   937  00006C                     ___ftmul@f2:
   938                           	opt stack 0
   939                           
   940                           ; 3 bytes @ 0xC
   941  00006C                     	ds	1
   942  00006D                     GetMcuRunTime@idx:
   943                           	opt stack 0
   944                           
   945                           ; 2 bytes @ 0xD
   946  00006D                     	ds	1
   947  00006E                     ??_GetIntFromUartData:
   948                           
   949                           ; 1 bytes @ 0xE
   950  00006E                     	ds	1
   951  00006F                     ??___ftmul:
   952                           
   953                           ; 1 bytes @ 0xF
   954  00006F                     	ds	1
   955  000070                     GetIntFromUartData@dataRegArr:
   956                           	opt stack 0
   957                           
   958                           ; 10 bytes @ 0x10
   959  000070                     	ds	2
   960  000072                     ___ftmul@exp:
   961                           	opt stack 0
   962                           
   963                           ; 1 bytes @ 0x12
   964  000072                     	ds	1
   965  000073                     ___ftmul@f3_as_product:
   966                           	opt stack 0
   967                           
   968                           ; 3 bytes @ 0x13
   969  000073                     	ds	3
   970  000076                     ___ftmul@cntr:
   971                           	opt stack 0
   972  000076                     _GetMcuFwVersion$2686:
   973                           	opt stack 0
   974                           
   975                           ; 2 bytes @ 0x16
   976  000076                     	ds	1
   977  000077                     ___ftmul@sign:
   978                           	opt stack 0
   979                           
   980                           ; 1 bytes @ 0x17
   981  000077                     	ds	1
   982  000078                     ??_CheckFlashPrecentage:
   983  000078                     ?___ftadd:
   984                           	opt stack 0
   985  000078                     ?___fttol:
   986                           	opt stack 0
   987  000078                     _GetMcuFwVersion$2690:
   988                           	opt stack 0
   989  000078                     ___ftadd@f1:
   990                           	opt stack 0
   991  000078                     ___fttol@f1:
   992                           	opt stack 0
   993                           
   994                           ; 3 bytes @ 0x18
   995  000078                     	ds	2
   996  00007A                     GetIntFromUartData@num:
   997                           	opt stack 0
   998                           
   999                           ; 1 bytes @ 0x1A
  1000  00007A                     	ds	1
  1001  00007B                     GetIntFromUartData@recVal:
  1002                           	opt stack 0
  1003  00007B                     ___ftadd@f2:
  1004                           	opt stack 0
  1005                           
  1006                           ; 3 bytes @ 0x1B
  1007  00007B                     	ds	1
  1008  00007C                     ??___fttol:
  1009  00007C                     CheckFlashPrecentage@precentage:
  1010                           	opt stack 0
  1011  00007C                     GetIntFromUartData@retVal:
  1012                           	opt stack 0
  1013                           
  1014                           ; 8 bytes @ 0x1C
  1015  00007C                     	ds	2
  1016  00007E                     ??___ftadd:
  1017                           
  1018                           ; 1 bytes @ 0x1E
  1019  00007E                     	ds	2
  1020  000080                     SWSPI_Synth_send_bits@mask:
  1021                           	opt stack 0
  1022                           
  1023                           ; 4 bytes @ 0x20
  1024  000080                     	ds	1
  1025  000081                     ___ftadd@sign:
  1026                           	opt stack 0
  1027  000081                     ___fttol@sign1:
  1028                           	opt stack 0
  1029                           
  1030                           ; 1 bytes @ 0x21
  1031  000081                     	ds	1
  1032  000082                     ___ftadd@exp2:
  1033                           	opt stack 0
  1034  000082                     ___fttol@lval:
  1035                           	opt stack 0
  1036                           
  1037                           ; 4 bytes @ 0x22
  1038  000082                     	ds	1
  1039  000083                     ___ftadd@exp1:
  1040                           	opt stack 0
  1041                           
  1042                           ; 1 bytes @ 0x23
  1043  000083                     	ds	1
  1044  000084                     ?___ftsub:
  1045                           	opt stack 0
  1046  000084                     ?_eval_poly:
  1047                           	opt stack 0
  1048  000084                     SWSPI_Synth_send_bits@count:
  1049                           	opt stack 0
  1050  000084                     GetIntFromUartData@idxCon:
  1051                           	opt stack 0
  1052  000084                     ___ftsub@f1:
  1053                           	opt stack 0
  1054  000084                     eval_poly@x:
  1055                           	opt stack 0
  1056                           
  1057                           ; 3 bytes @ 0x24
  1058  000084                     	ds	1
  1059  000085                     SWSPI_Synth_send_bits@phrType:
  1060                           	opt stack 0
  1061                           
  1062                           ; 1 bytes @ 0x25
  1063  000085                     	ds	1
  1064  000086                     SWSPI_send_word@datac:
  1065                           	opt stack 0
  1066  000086                     GetIntFromUartData@idxData:
  1067                           	opt stack 0
  1068  000086                     ___fttol@exp1:
  1069                           	opt stack 0
  1070                           
  1071                           ; 1 bytes @ 0x26
  1072  000086                     	ds	1
  1073  000087                     ?___altoft:
  1074                           	opt stack 0
  1075  000087                     FlashReadUart@data:
  1076                           	opt stack 0
  1077  000087                     SWSPI_send_word@idx:
  1078                           	opt stack 0
  1079  000087                     eval_poly@d:
  1080                           	opt stack 0
  1081  000087                     ___ftsub@f2:
  1082                           	opt stack 0
  1083  000087                     ___altoft@c:
  1084                           	opt stack 0
  1085                           
  1086                           ; 4 bytes @ 0x27
  1087  000087                     	ds	2
  1088  000089                     ??_FlashReadUart:
  1089  000089                     SWSPI_send_word@phrType:
  1090                           	opt stack 0
  1091  000089                     eval_poly@n:
  1092                           	opt stack 0
  1093                           
  1094                           ; 2 bytes @ 0x29
  1095  000089                     	ds	1
  1096  00008A                     DacSetValue@data:
  1097                           	opt stack 0
  1098  00008A                     UpdateSynthFreq@data:
  1099                           	opt stack 0
  1100                           
  1101                           ; 2 bytes @ 0x2A
  1102  00008A                     	ds	1
  1103  00008B                     ??___altoft:
  1104  00008B                     eval_poly@res:
  1105                           	opt stack 0
  1106                           
  1107                           ; 3 bytes @ 0x2B
  1108  00008B                     	ds	1
  1109  00008C                     ??_DacSetValue:
  1110  00008C                     UpdateSynthFreq@cType:
  1111                           	opt stack 0
  1112                           
  1113                           ; 1 bytes @ 0x2C
  1114  00008C                     	ds	1
  1115  00008D                     UpdateSynthFreq@retVal:
  1116                           	opt stack 0
  1117                           
  1118                           ; 8 bytes @ 0x2D
  1119  00008D                     	ds	1
  1120  00008E                     ?_log:
  1121                           	opt stack 0
  1122  00008E                     ?_ldexp:
  1123                           	opt stack 0
  1124  00008E                     ldexp@value:
  1125                           	opt stack 0
  1126  00008E                     log@x:
  1127                           	opt stack 0
  1128                           
  1129                           ; 3 bytes @ 0x2E
  1130  00008E                     	ds	1
  1131  00008F                     ?_floor:
  1132                           	opt stack 0
  1133  00008F                     floor@x:
  1134                           	opt stack 0
  1135  00008F                     FlashReadUart@TxMsg:
  1136                           	opt stack 0
  1137                           
  1138                           ; 69 bytes @ 0x2F
  1139  00008F                     	ds	1
  1140  000090                     DacSetValue@dacIndex:
  1141                           	opt stack 0
  1142                           
  1143                           ; 1 bytes @ 0x30
  1144  000090                     	ds	1
  1145  000091                     ldexp@newexp:
  1146                           	opt stack 0
  1147  000091                     log@exponent:
  1148                           	opt stack 0
  1149  000091                     DacSetValue@retVal:
  1150                           	opt stack 0
  1151                           
  1152                           ; 8 bytes @ 0x31
  1153  000091                     	ds	1
  1154  000092                     floor@i:
  1155                           	opt stack 0
  1156                           
  1157                           ; 3 bytes @ 0x32
  1158  000092                     	ds	1
  1159  000093                     ??_ldexp:
  1160                           
  1161                           ; 1 bytes @ 0x33
  1162  000093                     	ds	2
  1163  000095                     floor@expon:
  1164                           	opt stack 0
  1165                           
  1166                           ; 2 bytes @ 0x35
  1167  000095                     	ds	2
  1168  000097                     ?_exp:
  1169                           	opt stack 0
  1170  000097                     exp@x:
  1171                           	opt stack 0
  1172                           
  1173                           ; 3 bytes @ 0x37
  1174  000097                     	ds	3
  1175  00009A                     _exp$3589:
  1176                           	opt stack 0
  1177                           
  1178                           ; 3 bytes @ 0x3A
  1179  00009A                     	ds	3
  1180  00009D                     exp@exponent:
  1181                           	opt stack 0
  1182                           
  1183                           ; 2 bytes @ 0x3D
  1184  00009D                     	ds	2
  1185  00009F                     exp@sign:
  1186                           	opt stack 0
  1187                           
  1188                           ; 1 bytes @ 0x3F
  1189  00009F                     	ds	1
  1190  0000A0                     ?_pow:
  1191                           	opt stack 0
  1192  0000A0                     pow@x:
  1193                           	opt stack 0
  1194                           
  1195                           ; 3 bytes @ 0x40
  1196  0000A0                     	ds	3
  1197  0000A3                     pow@y:
  1198                           	opt stack 0
  1199                           
  1200                           ; 3 bytes @ 0x43
  1201  0000A3                     	ds	3
  1202  0000A6                     _pow$3587:
  1203                           	opt stack 0
  1204                           
  1205                           ; 3 bytes @ 0x46
  1206  0000A6                     	ds	3
  1207  0000A9                     _pow$3588:
  1208                           	opt stack 0
  1209                           
  1210                           ; 3 bytes @ 0x49
  1211  0000A9                     	ds	3
  1212  0000AC                     pow@sign:
  1213                           	opt stack 0
  1214                           
  1215                           ; 1 bytes @ 0x4C
  1216  0000AC                     	ds	1
  1217  0000AD                     pow@yi:
  1218                           	opt stack 0
  1219                           
  1220                           ; 4 bytes @ 0x4D
  1221  0000AD                     	ds	4
  1222  0000B1                     ??_AdcConvert:
  1223  0000B1                     ?_ReadIntFromEeprom:
  1224                           	opt stack 0
  1225  0000B1                     ReadIntFromEeprom@numOfByes:
  1226                           	opt stack 0
  1227                           
  1228                           ; 2 bytes @ 0x51
  1229  0000B1                     	ds	2
  1230  0000B3                     AdcConvert@_adcResult:
  1231                           	opt stack 0
  1232                           
  1233                           ; 2 bytes @ 0x53
  1234  0000B3                     	ds	2
  1235  0000B5                     ??_ReadIntFromEeprom:
  1236  0000B5                     AdcConvert@_adcResult_348:
  1237                           	opt stack 0
  1238                           
  1239                           ; 2 bytes @ 0x55
  1240  0000B5                     	ds	2
  1241  0000B7                     AdcConvert@ldRxSate:
  1242                           	opt stack 0
  1243                           
  1244                           ; 2 bytes @ 0x57
  1245  0000B7                     	ds	1
  1246  0000B8                     ReadIntFromEeprom@base:
  1247                           	opt stack 0
  1248                           
  1249                           ; 4 bytes @ 0x58
  1250  0000B8                     	ds	1
  1251  0000B9                     AdcConvert@ldTxSate:
  1252                           	opt stack 0
  1253                           
  1254                           ; 2 bytes @ 0x59
  1255  0000B9                     	ds	2
  1256  0000BB                     _AdcConvert$3584:
  1257                           	opt stack 0
  1258                           
  1259                           ; 3 bytes @ 0x5B
  1260  0000BB                     	ds	1
  1261  0000BC                     _ReadIntFromEeprom$3585:
  1262                           	opt stack 0
  1263                           
  1264                           ; 3 bytes @ 0x5C
  1265  0000BC                     	ds	2
  1266  0000BE                     AdcConvert@adcRes:
  1267                           	opt stack 0
  1268                           
  1269                           ; 2 bytes @ 0x5E
  1270  0000BE                     	ds	1
  1271  0000BF                     _ReadIntFromEeprom$3586:
  1272                           	opt stack 0
  1273                           
  1274                           ; 3 bytes @ 0x5F
  1275  0000BF                     	ds	1
  1276  0000C0                     AdcConvert@idx:
  1277                           	opt stack 0
  1278                           
  1279                           ; 1 bytes @ 0x60
  1280  0000C0                     	ds	2
  1281  0000C2                     ReadIntFromEeprom@address:
  1282                           	opt stack 0
  1283                           
  1284                           ; 1 bytes @ 0x62
  1285  0000C2                     	ds	1
  1286  0000C3                     ReadIntFromEeprom@retVal:
  1287                           	opt stack 0
  1288                           
  1289                           ; 4 bytes @ 0x63
  1290  0000C3                     	ds	4
  1291  0000C7                     ReadIntFromEeprom@idx:
  1292                           	opt stack 0
  1293                           
  1294                           ; 1 bytes @ 0x67
  1295  0000C7                     	ds	1
  1296  0000C8                     ??_DacInit:
  1297  0000C8                     DacReadValue@data:
  1298                           	opt stack 0
  1299  0000C8                     SynthReadData@data:
  1300                           	opt stack 0
  1301  0000C8                     InitSynth@EepromVal:
  1302                           	opt stack 0
  1303                           
  1304                           ; 4 bytes @ 0x68
  1305  0000C8                     	ds	2
  1306  0000CA                     ??_DacReadValue:
  1307  0000CA                     DacInit@dacInput:
  1308                           	opt stack 0
  1309                           
  1310                           ; 2 bytes @ 0x6A
  1311  0000CA                     	ds	2
  1312  0000CC                     DacInit@idx:
  1313                           	opt stack 0
  1314  0000CC                     DacReadValue@regNum:
  1315                           	opt stack 0
  1316  0000CC                     InitSynth@cType:
  1317                           	opt stack 0
  1318                           
  1319                           ; 1 bytes @ 0x6C
  1320  0000CC                     	ds	1
  1321  0000CD                     DacReadValue@byteNum:
  1322                           	opt stack 0
  1323  0000CD                     InitSynth@idx:
  1324                           	opt stack 0
  1325                           
  1326                           ; 1 bytes @ 0x6D
  1327  0000CD                     	ds	1
  1328  0000CE                     InitSynth@regNum:
  1329                           	opt stack 0
  1330  0000CE                     DacReadValue@readVal:
  1331                           	opt stack 0
  1332                           
  1333                           ; 2 bytes @ 0x6E
  1334  0000CE                     	ds	1
  1335  0000CF                     SetSynthOper@cType:
  1336                           	opt stack 0
  1337                           
  1338                           ; 1 bytes @ 0x6F
  1339  0000CF                     	ds	1
  1340  0000D0                     DacReadValue@dacIndex:
  1341                           	opt stack 0
  1342                           
  1343                           ; 1 bytes @ 0x70
  1344  0000D0                     	ds	1
  1345  0000D1                     DacReadValue@TxMsg:
  1346                           	opt stack 0
  1347                           
  1348                           ; 7 bytes @ 0x71
  1349  0000D1                     	ds	3
  1350  0000D4                     FlashReadUart@val:
  1351                           	opt stack 0
  1352                           
  1353                           ; 8 bytes @ 0x74
  1354  0000D4                     	ds	4
  1355  0000D8                     DacReadValue@byteIdx:
  1356                           	opt stack 0
  1357                           
  1358                           ; 2 bytes @ 0x78
  1359  0000D8                     	ds	4
  1360  0000DC                     _FlashReadUart$605:
  1361                           	opt stack 0
  1362                           
  1363                           ; 4 bytes @ 0x7C
  1364  0000DC                     	ds	4
  1365  0000E0                     FlashReadUart@j:
  1366                           	opt stack 0
  1367                           
  1368                           ; 2 bytes @ 0x80
  1369  0000E0                     	ds	2
  1370  0000E2                     FlashReadUart@numOfSampleToRead:
  1371                           	opt stack 0
  1372                           
  1373                           ; 2 bytes @ 0x82
  1374  0000E2                     	ds	2
  1375  0000E4                     FlashReadUart@idx:
  1376                           	opt stack 0
  1377                           
  1378                           ; 2 bytes @ 0x84
  1379  0000E4                     	ds	2
  1380  0000E6                     GroupAdc@data:
  1381                           	opt stack 0
  1382  0000E6                     GroupSynthesizers@data:
  1383                           	opt stack 0
  1384  0000E6                     GroupFlashMemory@data:
  1385                           	opt stack 0
  1386  0000E6                     GroupDAC@data:
  1387                           	opt stack 0
  1388  0000E6                     
  1389                           ; 3 bytes @ 0x86
  1390  0000E6                     	ds	2
  1391  0000E8                     GroupAdc@request:
  1392                           	opt stack 0
  1393  0000E8                     GroupSynthesizers@request:
  1394                           	opt stack 0
  1395  0000E8                     GroupFlashMemory@request:
  1396                           	opt stack 0
  1397  0000E8                     GroupDAC@request:
  1398                           	opt stack 0
  1399                           
  1400                           ; 1 bytes @ 0x88
  1401  0000E8                     	ds	1
  1402  0000E9                     GroupControlMcu@request:
  1403                           	opt stack 0
  1404  0000E9                     GroupStatusAndVersion@request:
  1405                           	opt stack 0
  1406                           
  1407                           ; 1 bytes @ 0x89
  1408  0000E9                     	ds	1
  1409                           tblptru	equ	0xFF8
  1410                           tblptrh	equ	0xFF7
  1411                           tblptrl	equ	0xFF6
  1412                           tablat	equ	0xFF5
  1413                           postinc0	equ	0xFEE
  1414                           wreg	equ	0xFE8
  1415                           postdec1	equ	0xFE5
  1416                           fsr1l	equ	0xFE1
  1417                           
  1418                           	psect	cstackCOMRAM
  1419  000001                     __pcstackCOMRAM:
  1420                           	opt stack 0
  1421  000001                     ?___lwmod:
  1422                           	opt stack 0
  1423  000001                     ___lwmod@dividend:
  1424                           	opt stack 0
  1425                           
  1426                           ; 2 bytes @ 0x0
  1427  000001                     	ds	2
  1428  000003                     ___lwmod@divisor:
  1429                           	opt stack 0
  1430                           
  1431                           ; 2 bytes @ 0x2
  1432  000003                     	ds	2
  1433  000005                     ___lwmod@counter:
  1434                           	opt stack 0
  1435                           
  1436                           ; 1 bytes @ 0x4
  1437  000005                     	ds	1
  1438  000006                     ??_INTERRUPT_InterruptManager:
  1439                           
  1440                           ; 1 bytes @ 0x5
  1441  000006                     	ds	18
  1442  000018                     ??_EUSART1_Read:
  1443  000018                     ??_isspace:
  1444  000018                     ??_isdigit:
  1445  000018                     ??_isupper:
  1446  000018                     ??_BlinkErrorLeds:
  1447  000018                     ??_BlinkOkLeds:
  1448  000018                     ??_keepAliveSignalLed:
  1449  000018                     ?_ADC_GetConversion:
  1450                           	opt stack 0
  1451  000018                     ?_GetUint16FromBitArray:
  1452                           	opt stack 0
  1453  000018                     ?___wmul:
  1454                           	opt stack 0
  1455  000018                     ?___ftpack:
  1456                           	opt stack 0
  1457  000018                     ?_frexp:
  1458                           	opt stack 0
  1459  000018                     ?___ftneg:
  1460                           	opt stack 0
  1461  000018                     ?___lldiv:
  1462                           	opt stack 0
  1463  000018                     ?___llmod:
  1464                           	opt stack 0
  1465  000018                     SwSpi_Data_Pin@cPinMode:
  1466                           	opt stack 0
  1467  000018                     SwSpi_Clk_Pin@cPinMode:
  1468                           	opt stack 0
  1469  000018                     SwSpi_Set_CE_Pin@cPinMode:
  1470                           	opt stack 0
  1471  000018                     SwSpi_Set_Synth_Le_Pin@cPinMode:
  1472                           	opt stack 0
  1473  000018                     SwSpi_Set_Dac_Sync_Pin@cPinMode:
  1474                           	opt stack 0
  1475  000018                     EUSART1_Write@txData:
  1476                           	opt stack 0
  1477  000018                     DATAEE_WriteByte@bData:
  1478                           	opt stack 0
  1479  000018                     DATAEE_ReadByte@bAdd:
  1480                           	opt stack 0
  1481  000018                     toupper@c:
  1482                           	opt stack 0
  1483  000018                     IOCB4_SetInterruptHandler@InterruptHandler:
  1484                           	opt stack 0
  1485  000018                     IOCB5_SetInterruptHandler@InterruptHandler:
  1486                           	opt stack 0
  1487  000018                     TMR0_SetInterruptHandler@InterruptHandler:
  1488                           	opt stack 0
  1489  000018                     crc8@dataArray:
  1490                           	opt stack 0
  1491  000018                     GetUint16FromBitArray@bitarray:
  1492                           	opt stack 0
  1493  000018                     Make32bitsArray@array:
  1494                           	opt stack 0
  1495  000018                     ___wmul@multiplier:
  1496                           	opt stack 0
  1497  000018                     memset@p1:
  1498                           	opt stack 0
  1499  000018                     ___ftpack@arg:
  1500                           	opt stack 0
  1501  000018                     ___ftge@ff1:
  1502                           	opt stack 0
  1503  000018                     ___ftneg@f1:
  1504                           	opt stack 0
  1505  000018                     frexp@value:
  1506                           	opt stack 0
  1507  000018                     FLASH_ReadByte@flashAddr:
  1508                           	opt stack 0
  1509  000018                     FLASH_EraseBlock@baseAddr:
  1510                           	opt stack 0
  1511  000018                     make8@data:
  1512                           	opt stack 0
  1513  000018                     ___lldiv@dividend:
  1514                           	opt stack 0
  1515  000018                     ___llmod@dividend:
  1516                           	opt stack 0
  1517                           
  1518                           ; 4 bytes @ 0x17
  1519  000018                     	ds	1
  1520  000019                     EepromRead@address:
  1521                           	opt stack 0
  1522  000019                     SwSpi_Data_Pin@phrType:
  1523                           	opt stack 0
  1524  000019                     SwSpi_Clk_Pin@phrType:
  1525                           	opt stack 0
  1526  000019                     SwSpi_Set_CE_Pin@phrType:
  1527                           	opt stack 0
  1528  000019                     SwSpi_Set_Synth_Le_Pin@phrType:
  1529                           	opt stack 0
  1530  000019                     DATAEE_WriteByte@bAdd:
  1531                           	opt stack 0
  1532  000019                     _isdigit$3312:
  1533                           	opt stack 0
  1534  000019                     _isspace$3315:
  1535                           	opt stack 0
  1536  000019                     _isupper$3318:
  1537                           	opt stack 0
  1538  000019                     WriteUartMessage@dataBuf:
  1539                           	opt stack 0
  1540  000019                     EUSART1_Read@readValue:
  1541                           	opt stack 0
  1542                           
  1543                           ; 2 bytes @ 0x18
  1544  000019                     	ds	1
  1545  00001A                     ??_ADC_GetConversion:
  1546  00001A                     ??_TMR0_Initialize:
  1547  00001A                     ?___lmul:
  1548                           	opt stack 0
  1549  00001A                     SWSPI_DAC_send_bits@data:
  1550                           	opt stack 0
  1551  00001A                     DATAEE_WriteByte@GIEBitValue:
  1552                           	opt stack 0
  1553  00001A                     isdigit@c:
  1554                           	opt stack 0
  1555  00001A                     isspace@c:
  1556                           	opt stack 0
  1557  00001A                     isupper@c:
  1558                           	opt stack 0
  1559  00001A                     crc8@dataSize:
  1560                           	opt stack 0
  1561  00001A                     GetUint16FromBitArray@numOfBits:
  1562                           	opt stack 0
  1563  00001A                     ___wmul@multiplicand:
  1564                           	opt stack 0
  1565  00001A                     memset@c:
  1566                           	opt stack 0
  1567  00001A                     Make32bitsArray@data:
  1568                           	opt stack 0
  1569  00001A                     ___lmul@multiplier:
  1570                           	opt stack 0
  1571                           
  1572                           ; 4 bytes @ 0x19
  1573  00001A                     	ds	1
  1574  00001B                     ??_isalpha:
  1575  00001B                     BlinkErrorLeds@state:
  1576                           	opt stack 0
  1577  00001B                     BlinkOkLeds@state:
  1578                           	opt stack 0
  1579  00001B                     EepromWrite@data:
  1580                           	opt stack 0
  1581  00001B                     SWSPI_DAC_send_bits@count:
  1582                           	opt stack 0
  1583  00001B                     ___ftpack@exp:
  1584                           	opt stack 0
  1585  00001B                     WriteUartMessage@dataSize:
  1586                           	opt stack 0
  1587  00001B                     frexp@eptr:
  1588                           	opt stack 0
  1589  00001B                     ___ftge@ff2:
  1590                           	opt stack 0
  1591                           
  1592                           ; 3 bytes @ 0x1A
  1593  00001B                     	ds	1
  1594  00001C                     ??_GetUint16FromBitArray:
  1595  00001C                     ??_crc8:
  1596  00001C                     EepromWrite@address:
  1597                           	opt stack 0
  1598  00001C                     SWSPI_DAC_send_bits@phrType:
  1599                           	opt stack 0
  1600  00001C                     FLASH_EraseBlock@GIEBitValue:
  1601                           	opt stack 0
  1602  00001C                     ADC_GetConversion@channel:
  1603                           	opt stack 0
  1604  00001C                     make8@dataLocation:
  1605                           	opt stack 0
  1606  00001C                     ___ftpack@sign:
  1607                           	opt stack 0
  1608  00001C                     _isalpha$3309:
  1609                           	opt stack 0
  1610  00001C                     BlinkErrorLeds@idx:
  1611                           	opt stack 0
  1612  00001C                     BlinkOkLeds@idx:
  1613                           	opt stack 0
  1614  00001C                     ___wmul@product:
  1615                           	opt stack 0
  1616  00001C                     memset@n:
  1617                           	opt stack 0
  1618  00001C                     ___lldiv@divisor:
  1619                           	opt stack 0
  1620  00001C                     ___llmod@divisor:
  1621                           	opt stack 0
  1622                           
  1623                           ; 4 bytes @ 0x1B
  1624  00001C                     	ds	1
  1625  00001D                     ??_make8:
  1626  00001D                     ??___ftpack:
  1627  00001D                     ??_frexp:
  1628  00001D                     ??_WriteUartMessage:
  1629  00001D                     isalpha@c:
  1630                           	opt stack 0
  1631  00001D                     crc8@crc:
  1632                           	opt stack 0
  1633  00001D                     FLASH_WriteBlock@writeAddr:
  1634                           	opt stack 0
  1635                           
  1636                           ; 4 bytes @ 0x1C
  1637  00001D                     	ds	1
  1638  00001E                     ??_Make32bitsArray:
  1639  00001E                     ??___ftge:
  1640  00001E                     WriteUartMessage@idx:
  1641                           	opt stack 0
  1642  00001E                     memset@p:
  1643                           	opt stack 0
  1644  00001E                     ___lmul@multiplicand:
  1645                           	opt stack 0
  1646                           
  1647                           ; 4 bytes @ 0x1D
  1648  00001E                     	ds	1
  1649  00001F                     crc8@i:
  1650                           	opt stack 0
  1651  00001F                     GetUint16FromBitArray@res:
  1652                           	opt stack 0
  1653                           
  1654                           ; 2 bytes @ 0x1E
  1655  00001F                     	ds	1
  1656  000020                     ?___awtoft:
  1657                           	opt stack 0
  1658  000020                     ?___lltoft:
  1659                           	opt stack 0
  1660  000020                     ?___lwtoft:
  1661                           	opt stack 0
  1662  000020                     ___llmod@counter:
  1663                           	opt stack 0
  1664  000020                     ZeroArray@array:
  1665                           	opt stack 0
  1666  000020                     FillArray@array:
  1667                           	opt stack 0
  1668  000020                     Make32bitsArray@idx:
  1669                           	opt stack 0
  1670  000020                     ___awtoft@c:
  1671                           	opt stack 0
  1672  000020                     ___lwtoft@c:
  1673                           	opt stack 0
  1674  000020                     ___lldiv@quotient:
  1675                           	opt stack 0
  1676  000020                     ___lltoft@c:
  1677                           	opt stack 0
  1678                           
  1679                           ; 4 bytes @ 0x1F
  1680  000020                     	ds	1
  1681  000021                     FLASH_WriteBlock@flashWrBufPtr:
  1682                           	opt stack 0
  1683  000021                     GetUint16FromBitArray@i:
  1684                           	opt stack 0
  1685  000021                     StoreIntInEeprom@data:
  1686                           	opt stack 0
  1687                           
  1688                           ; 4 bytes @ 0x20
  1689  000021                     	ds	1
  1690  000022                     ZeroArray@size:
  1691                           	opt stack 0
  1692  000022                     FillArray@size:
  1693                           	opt stack 0
  1694  000022                     ___lmul@product:
  1695                           	opt stack 0
  1696                           
  1697                           ; 4 bytes @ 0x21
  1698  000022                     	ds	1
  1699  000023                     ??_FLASH_WriteBlock:
  1700  000023                     ___awtoft@sign:
  1701                           	opt stack 0
  1702                           
  1703                           ; 1 bytes @ 0x22
  1704  000023                     	ds	1
  1705  000024                     ??_GetMcuFwVersion:
  1706  000024                     ??_FlashReadCondition:
  1707  000024                     ??___lltoft:
  1708  000024                     SendAckMessage@inRequest:
  1709                           	opt stack 0
  1710  000024                     FillArray@value:
  1711                           	opt stack 0
  1712  000024                     ___lldiv@counter:
  1713                           	opt stack 0
  1714                           
  1715                           ; 1 bytes @ 0x23
  1716  000024                     	ds	1
  1717  000025                     ??_GetMcuRunTime:
  1718  000025                     SendAckMessage@inGroup:
  1719                           	opt stack 0
  1720  000025                     StoreIntInEeprom@address:
  1721                           	opt stack 0
  1722  000025                     SWSPI_Synth_send_bits@data:
  1723                           	opt stack 0
  1724                           
  1725                           ; 4 bytes @ 0x24
  1726  000025                     	ds	1
  1727  000026                     ?_strtol:
  1728                           	opt stack 0
  1729  000026                     StoreIntInEeprom@numOfByes:
  1730                           	opt stack 0
  1731  000026                     strtol@s:
  1732                           	opt stack 0
  1733  000026                     SendAckMessage@TxMsg:
  1734                           	opt stack 0
  1735                           
  1736                           ; 6 bytes @ 0x25
  1737  000026                     	ds	1
  1738  000027                     FLASH_WriteBlock@blockStartAddr:
  1739                           	opt stack 0
  1740                           
  1741                           ; 4 bytes @ 0x26
  1742  000027                     	ds	1
  1743  000028                     StoreIntInEeprom@val:
  1744                           	opt stack 0
  1745  000028                     ___lltoft@exp:
  1746                           	opt stack 0
  1747  000028                     strtol@endptr:
  1748                           	opt stack 0
  1749  000028                     FlashReadCondition@TxMsg:
  1750                           	opt stack 0
  1751                           
  1752                           ; 9 bytes @ 0x27
  1753  000028                     	ds	1
  1754  000029                     ?___ftdiv:
  1755                           	opt stack 0
  1756  000029                     StoreIntInEeprom@idx:
  1757                           	opt stack 0
  1758  000029                     ___ftdiv@f1:
  1759                           	opt stack 0
  1760  000029                     SWSPI_send_word@data:
  1761                           	opt stack 0
  1762                           
  1763                           ; 4 bytes @ 0x28
  1764  000029                     	ds	1
  1765  00002A                     strtol@base:
  1766                           	opt stack 0
  1767                           
  1768                           ; 2 bytes @ 0x29
  1769  00002A                     	ds	1
  1770  00002B                     FLASH_WriteBlock@GIEBitValue:
  1771                           	opt stack 0
  1772                           
  1773                           ; 1 bytes @ 0x2A
  1774  00002B                     	ds	1
  1775  00002C                     ??_strtol:
  1776  00002C                     ??_testLeds:
  1777  00002C                     FLASH_WriteBlock@i:
  1778                           	opt stack 0
  1779  00002C                     SetChannelMode@data:
  1780                           	opt stack 0
  1781  00002C                     ___ftdiv@f2:
  1782                           	opt stack 0
  1783                           
  1784                           ; 3 bytes @ 0x2B
  1785  00002C                     	ds	1
  1786  00002D                     SWSPI_send_word@dataSize:
  1787                           	opt stack 0
  1788  00002D                     testLeds@idx:
  1789                           	opt stack 0
  1790  00002D                     FlashSampleWrite@sampleData:
  1791                           	opt stack 0
  1792                           
  1793                           ; 2 bytes @ 0x2C
  1794  00002D                     	ds	1
  1795  00002E                     
  1796                           ; 1 bytes @ 0x2D
  1797  00002E                     	ds	1
  1798  00002F                     ??_eval_poly:
  1799  00002F                     FlashSampleWrite@channelNum:
  1800                           	opt stack 0
  1801  00002F                     ___altoft@exp:
  1802                           	opt stack 0
  1803                           
  1804                           ; 1 bytes @ 0x2E
  1805  00002F                     	ds	1
  1806  000030                     ___altoft@sign:
  1807                           	opt stack 0
  1808                           
  1809                           ; 1 bytes @ 0x2F
  1810  000030                     	ds	1
  1811  000031                     tblptru	equ	0xFF8
  1812                           tblptrh	equ	0xFF7
  1813                           tblptrl	equ	0xFF6
  1814                           tablat	equ	0xFF5
  1815                           postinc0	equ	0xFEE
  1816                           wreg	equ	0xFE8
  1817                           postdec1	equ	0xFE5
  1818                           fsr1l	equ	0xFE1
  1819                           
  1820                           ; 1 bytes @ 0x30
  1821 ;;
  1822 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1823 ;;
  1824 ;; *************** function _main *****************
  1825 ;; Defined at:
  1826 ;;		line 13 in file "main.c"
  1827 ;; Parameters:    Size  Location     Type
  1828 ;;		None
  1829 ;; Auto vars:     Size  Location     Type
  1830 ;;		None
  1831 ;; Return value:  Size  Location     Type
  1832 ;;                  1    wreg      void 
  1833 ;; Registers used:
  1834 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  1835 ;; Tracked objects:
  1836 ;;		On entry : 0/0
  1837 ;;		On exit  : 0/0
  1838 ;;		Unchanged: 0/0
  1839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1840 ;;      Params:         0       0       0       0       0       0       0
  1841 ;;      Locals:         0       0       0       0       0       0       0
  1842 ;;      Temps:          0       0       0       0       0       0       0
  1843 ;;      Totals:         0       0       0       0       0       0       0
  1844 ;;Total ram usage:        0 bytes
  1845 ;; Hardware stack levels required when called:   14
  1846 ;; This function calls:
  1847 ;;		_AdcConvert
  1848 ;;		_BlinkErrorLeds
  1849 ;;		_BlinkOkLeds
  1850 ;;		_CheckFlashPrecentage
  1851 ;;		_InitSystemApplicationManagers
  1852 ;;		_SendSystemStartAck
  1853 ;;		_SetMcuRunTime
  1854 ;;		_SetMcuSystem
  1855 ;;		_keepAliveSignalLed
  1856 ;;		_readUartMessage
  1857 ;; This function is called by:
  1858 ;;		Startup code after reset
  1859 ;; This function uses a non-reentrant model
  1860 ;;
  1861                           
  1862                           	psect	text0
  1863  00343A                     __ptext0:
  1864                           	opt stack 0
  1865  00343A                     _main:
  1866                           	opt stack 17
  1867                           
  1868                           ;main.c: 16: SetMcuSystem();
  1869                           
  1870                           ;incstack = 0
  1871  00343A  ECFE  F020         	call	_SetMcuSystem	;wreg free
  1872                           
  1873                           ;main.c: 19: InitSystemApplicationManagers();
  1874  00343E  EC9A  F020         	call	_InitSystemApplicationManagers	;wreg free
  1875                           
  1876                           ;main.c: 22: SendSystemStartAck();
  1877  003442  ECF8  F020         	call	_SendSystemStartAck	;wreg free
  1878                           
  1879                           ;main.c: 25: BlinkOkLeds(OK_START_SYSTEM);
  1880  003446  0E03               	movlw	3
  1881  003448  ECEA  F01A         	call	_BlinkOkLeds
  1882  00344C                     
  1883                           ;main.c: 28: {
  1884                           ;main.c: 29: readUartMessage();
  1885  00344C  ECC9  F008         	call	_readUartMessage	;wreg free
  1886                           
  1887                           ;main.c: 31: if (Timer0_OneSec == 1)
  1888  003450  0100               	movlb	0	; () banked
  1889  003452  05F9               	decf	_Timer0_OneSec& (0+255),w,b	;volatile
  1890  003454  A4D8               	btfss	status,2,c
  1891  003456  D006               	goto	l1581
  1892                           
  1893                           ; BSR set to: 0
  1894                           ;main.c: 32: {
  1895                           ;main.c: 33: SetMcuRunTime();
  1896  003458  EC18  F01D         	call	_SetMcuRunTime	;wreg free
  1897                           
  1898                           ;main.c: 34: Timer0_OneSec = 0;
  1899  00345C  0E00               	movlw	0
  1900  00345E  0100               	movlb	0	; () banked
  1901  003460  6FF9               	movwf	_Timer0_OneSec& (0+255),b	;volatile
  1902                           
  1903                           ;main.c: 35: }
  1904  003462  D7F4               	goto	l1580
  1905  003464                     l1581:
  1906                           
  1907                           ; BSR set to: 0
  1908                           ;main.c: 36: else if (Timer0_Sampling == 1)
  1909                           
  1910                           ; BSR set to: 0
  1911  003464  05FB               	decf	_Timer0_Sampling& (0+255),w,b	;volatile
  1912  003466  A4D8               	btfss	status,2,c
  1913  003468  D010               	goto	l1583
  1914                           
  1915                           ; BSR set to: 0
  1916                           ;main.c: 37: {
  1917                           ;main.c: 38: keepAliveSignalLed();
  1918  00346A  EC83  F020         	call	_keepAliveSignalLed	;wreg free
  1919                           
  1920                           ;main.c: 40: if(1 == CheckFlashPrecentage())
  1921  00346E  EC63  F016         	call	_CheckFlashPrecentage	;wreg free
  1922  003472  06E8               	decf	wreg,f,c
  1923  003474  A4D8               	btfss	status,2,c
  1924  003476  D003               	goto	l1584
  1925                           
  1926                           ;main.c: 41: {
  1927                           ;main.c: 42: BlinkErrorLeds(FAIL_FLASH_MORE_THEN_HELF);
  1928  003478  0E02               	movlw	2
  1929  00347A  EC19  F01B         	call	_BlinkErrorLeds
  1930  00347E                     l1584:
  1931                           
  1932                           ;main.c: 43: }
  1933                           ;main.c: 46: AdcConvert();
  1934  00347E  ECB3  F007         	call	_AdcConvert	;wreg free
  1935                           
  1936                           ;main.c: 47: Timer0_Sampling = 0;
  1937  003482  0E00               	movlw	0
  1938  003484  0100               	movlb	0	; () banked
  1939  003486  6FFB               	movwf	_Timer0_Sampling& (0+255),b	;volatile
  1940                           
  1941                           ;main.c: 48: }
  1942  003488  D7E1               	goto	l1580
  1943  00348A                     l1583:
  1944                           
  1945                           ; BSR set to: 0
  1946                           ;main.c: 49: else if (Timer0_KeepAlive == 1)
  1947                           
  1948                           ; BSR set to: 0
  1949  00348A  05FA               	decf	_Timer0_KeepAlive& (0+255),w,b	;volatile
  1950  00348C  A4D8               	btfss	status,2,c
  1951  00348E  D003               	goto	l1586
  1952                           
  1953                           ; BSR set to: 0
  1954                           ;main.c: 50: {
  1955                           ;main.c: 52: Timer0_KeepAlive = 0;
  1956  003490  0E00               	movlw	0
  1957  003492  6FFA               	movwf	_Timer0_KeepAlive& (0+255),b	;volatile
  1958                           
  1959                           ;main.c: 53: }
  1960  003494  D7DB               	goto	l1580
  1961  003496                     l1586:
  1962                           
  1963                           ; BSR set to: 0
  1964                           ;main.c: 54: else if (Timer0_SynthLd == 1)
  1965                           
  1966                           ; BSR set to: 0
  1967  003496  05FC               	decf	_Timer0_SynthLd& (0+255),w,b	;volatile
  1968  003498  A4D8               	btfss	status,2,c
  1969  00349A  D7D8               	goto	l1580
  1970                           
  1971                           ; BSR set to: 0
  1972                           ;main.c: 55: {
  1973                           ;main.c: 57: Timer0_SynthLd = 0;
  1974  00349C  0E00               	movlw	0
  1975  00349E  6FFC               	movwf	_Timer0_SynthLd& (0+255),b	;volatile
  1976                           
  1977                           ; BSR set to: 0
  1978                           
  1979                           ; BSR set to: 0
  1980                           
  1981                           ; BSR set to: 0
  1982                           
  1983                           ; BSR set to: 0
  1984                           
  1985                           ; BSR set to: 0
  1986  0034A0  D7D5               	goto	l1580
  1987  0034A2                     __end_of_main:
  1988                           	opt stack 0
  1989                           tblptru	equ	0xFF8
  1990                           tblptrh	equ	0xFF7
  1991                           tblptrl	equ	0xFF6
  1992                           tablat	equ	0xFF5
  1993                           postinc0	equ	0xFEE
  1994                           wreg	equ	0xFE8
  1995                           postdec1	equ	0xFE5
  1996                           fsr1l	equ	0xFE1
  1997                           status	equ	0xFD8
  1998                           
  1999 ;; *************** function _readUartMessage *****************
  2000 ;; Defined at:
  2001 ;;		line 28 in file "EusartApp.c"
  2002 ;; Parameters:    Size  Location     Type
  2003 ;;		None
  2004 ;; Auto vars:     Size  Location     Type
  2005 ;;  idx             2   48[BANK1 ] int 
  2006 ;;  chRec           1   50[BANK1 ] unsigned char 
  2007 ;; Return value:  Size  Location     Type
  2008 ;;                  1    wreg      void 
  2009 ;; Registers used:
  2010 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2011 ;; Tracked objects:
  2012 ;;		On entry : 0/0
  2013 ;;		On exit  : 0/0
  2014 ;;		Unchanged: 0/0
  2015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2016 ;;      Params:         0       0       0       0       0       0       0
  2017 ;;      Locals:         0       0       3       0       0       0       0
  2018 ;;      Temps:          0       0       4       0       0       0       0
  2019 ;;      Totals:         0       0       7       0       0       0       0
  2020 ;;Total ram usage:        7 bytes
  2021 ;; Hardware stack levels used:    1
  2022 ;; Hardware stack levels required when called:   13
  2023 ;; This function calls:
  2024 ;;		_EUSART1_Read
  2025 ;;		_GroupAdc
  2026 ;;		_GroupControlMcu
  2027 ;;		_GroupDAC
  2028 ;;		_GroupFlashMemory
  2029 ;;		_GroupStatusAndVersion
  2030 ;;		_GroupSynthesizers
  2031 ;;		_InitRxMessageParams
  2032 ;;		_ZeroArray
  2033 ;;		_crc8
  2034 ;; This function is called by:
  2035 ;;		_main
  2036 ;; This function uses a non-reentrant model
  2037 ;;
  2038                           
  2039                           	psect	text1
  2040  001192                     __ptext1:
  2041                           	opt stack 0
  2042  001192                     _readUartMessage:
  2043                           	opt stack 17
  2044                           
  2045                           ;EusartApp.c: 31: uint8_t chRec = (0);
  2046                           
  2047                           ; BSR set to: 0
  2048                           ;incstack = 0
  2049  001192  0E00               	movlw	0
  2050  001194  0101               	movlb	1	; () banked
  2051  001196  6FE4               	movwf	readUartMessage@chRec& (0+255),b
  2052                           
  2053                           ;EusartApp.c: 32: switch(cState)
  2054  001198  D0DF               	goto	l202
  2055  00119A                     
  2056                           ;EusartApp.c: 37: if(eusart1RxCount > (4))
  2057                           
  2058                           ; BSR set to: 1
  2059  00119A  0E04               	movlw	4
  2060  00119C  0100               	movlb	0	; () banked
  2061  00119E  65F7               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2062  0011A0  0012               	return	
  2063                           
  2064                           ; BSR set to: 0
  2065                           ;EusartApp.c: 38: {
  2066                           ;EusartApp.c: 39: cState = FIND_MAGIC;
  2067  0011A2  0E01               	movlw	1
  2068  0011A4  6FF6               	movwf	_cState& (0+255),b
  2069                           
  2070                           ; BSR set to: 0
  2071                           ;EusartApp.c: 40: }
  2072                           ;EusartApp.c: 41: return;
  2073                           
  2074                           ; BSR set to: 0
  2075  0011A6  0012               	return	
  2076  0011A8                     
  2077                           ; BSR set to: 0
  2078                           ;EusartApp.c: 45: InitRxMessageParams();
  2079                           
  2080                           ; BSR set to: 0
  2081  0011A8  EC77  F01F         	call	_InitRxMessageParams	;wreg free
  2082                           
  2083                           ;EusartApp.c: 46: msgCount = 0;
  2084  0011AC  0E00               	movlw	0
  2085  0011AE  0100               	movlb	0	; () banked
  2086  0011B0  6FF0               	movwf	_msgCount& (0+255),b
  2087                           
  2088                           ; BSR set to: 0
  2089                           ;EusartApp.c: 47: if(eusart1RxCount > 1)
  2090  0011B2  0E01               	movlw	1
  2091  0011B4  65F7               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2092  0011B6  D00E               	goto	l207
  2093                           
  2094                           ; BSR set to: 0
  2095                           ;EusartApp.c: 48: {
  2096                           ;EusartApp.c: 49: chRec = EUSART1_Read();
  2097  0011B8  ECF6  F01C         	call	_EUSART1_Read	;wreg free
  2098  0011BC  0101               	movlb	1	; () banked
  2099  0011BE  6FE4               	movwf	readUartMessage@chRec& (0+255),b
  2100                           
  2101                           ; BSR set to: 1
  2102                           ;EusartApp.c: 50: rxMsgQueue[(0)] = chRec;
  2103  0011C0  C1E4  F186         	movff	readUartMessage@chRec,_rxMsgQueue
  2104                           
  2105                           ; BSR set to: 1
  2106                           ;EusartApp.c: 51: if(chRec == (0x24))
  2107  0011C4  0E24               	movlw	36
  2108  0011C6  19E4               	xorwf	readUartMessage@chRec& (0+255),w,b
  2109  0011C8  A4D8               	btfss	status,2,c
  2110  0011CA  0012               	return	
  2111                           
  2112                           ; BSR set to: 1
  2113                           ;EusartApp.c: 52: {
  2114                           ;EusartApp.c: 53: cState = READ_GROUP;
  2115  0011CC  0E02               	movlw	2
  2116  0011CE  0100               	movlb	0	; () banked
  2117  0011D0  6FF6               	movwf	_cState& (0+255),b
  2118                           
  2119                           ; BSR set to: 0
  2120                           ;EusartApp.c: 54: }
  2121                           ;EusartApp.c: 55: }
  2122  0011D2  0012               	return	
  2123  0011D4                     l207:
  2124                           
  2125                           ; BSR set to: 0
  2126                           ;EusartApp.c: 56: else
  2127                           ;EusartApp.c: 57: {
  2128                           ;EusartApp.c: 58: cState = START_RX_MESSAGE_READ;
  2129                           
  2130                           ; BSR set to: 0
  2131  0011D4  0E00               	movlw	0
  2132  0011D6  6FF6               	movwf	_cState& (0+255),b
  2133                           
  2134                           ; BSR set to: 0
  2135                           ;EusartApp.c: 59: }
  2136                           ;EusartApp.c: 61: break;
  2137  0011D8  0012               	return	
  2138  0011DA                     
  2139                           ; BSR set to: 0
  2140                           ;EusartApp.c: 65: if(eusart1RxCount > 1)
  2141                           
  2142                           ; BSR set to: 0
  2143  0011DA  0E01               	movlw	1
  2144  0011DC  65F7               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2145  0011DE  0012               	return	
  2146                           
  2147                           ; BSR set to: 0
  2148                           ;EusartApp.c: 66: {
  2149                           ;EusartApp.c: 67: group = EUSART1_Read();
  2150  0011E0  ECF6  F01C         	call	_EUSART1_Read	;wreg free
  2151  0011E4  0100               	movlb	0	; () banked
  2152  0011E6  6FF5               	movwf	_group& (0+255),b
  2153                           
  2154                           ; BSR set to: 0
  2155                           ;EusartApp.c: 68: rxMsgQueue[(1)] = group;
  2156  0011E8  C0F5  F187         	movff	_group,_rxMsgQueue+1
  2157                           
  2158                           ; BSR set to: 0
  2159                           ;EusartApp.c: 69: cState = READ_REQUEST;
  2160  0011EC  0E03               	movlw	3
  2161  0011EE  6FF6               	movwf	_cState& (0+255),b
  2162                           
  2163                           ; BSR set to: 0
  2164                           ;EusartApp.c: 70: }
  2165                           ;EusartApp.c: 71: break;
  2166  0011F0  0012               	return	
  2167  0011F2                     
  2168                           ; BSR set to: 0
  2169                           ;EusartApp.c: 75: if(eusart1RxCount > 1)
  2170                           
  2171                           ; BSR set to: 0
  2172  0011F2  0E01               	movlw	1
  2173  0011F4  65F7               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2174  0011F6  0012               	return	
  2175                           
  2176                           ; BSR set to: 0
  2177                           ;EusartApp.c: 76: {
  2178                           ;EusartApp.c: 77: request = EUSART1_Read();
  2179  0011F8  ECF6  F01C         	call	_EUSART1_Read	;wreg free
  2180  0011FC  0100               	movlb	0	; () banked
  2181  0011FE  6FF4               	movwf	_request& (0+255),b
  2182                           
  2183                           ; BSR set to: 0
  2184                           ;EusartApp.c: 78: rxMsgQueue[(2)] = request;
  2185  001200  C0F4  F188         	movff	_request,_rxMsgQueue+2
  2186                           
  2187                           ; BSR set to: 0
  2188                           ;EusartApp.c: 79: cState = READ_DATA_SIZE;
  2189  001204  0E04               	movlw	4
  2190  001206  6FF6               	movwf	_cState& (0+255),b
  2191                           
  2192                           ; BSR set to: 0
  2193                           ;EusartApp.c: 80: }
  2194                           ;EusartApp.c: 81: break;
  2195  001208  0012               	return	
  2196  00120A                     
  2197                           ; BSR set to: 0
  2198                           ;EusartApp.c: 84: if(eusart1RxCount > 1)
  2199                           
  2200                           ; BSR set to: 0
  2201  00120A  0E01               	movlw	1
  2202  00120C  65F7               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2203  00120E  0012               	return	
  2204                           
  2205                           ; BSR set to: 0
  2206                           ;EusartApp.c: 85: {
  2207                           ;EusartApp.c: 86: dataSize = EUSART1_Read();
  2208  001210  ECF6  F01C         	call	_EUSART1_Read	;wreg free
  2209  001214  0100               	movlb	0	; () banked
  2210  001216  6FF3               	movwf	_dataSize& (0+255),b
  2211                           
  2212                           ; BSR set to: 0
  2213                           ;EusartApp.c: 87: rxMsgQueue[(3)] = dataSize;
  2214  001218  C0F3  F189         	movff	_dataSize,_rxMsgQueue+3
  2215                           
  2216                           ; BSR set to: 0
  2217                           ;EusartApp.c: 88: if(dataSize == 0)
  2218  00121C  51F3               	movf	_dataSize& (0+255),w,b
  2219  00121E  A4D8               	btfss	status,2,c
  2220  001220  D003               	goto	l217
  2221                           
  2222                           ; BSR set to: 0
  2223                           ;EusartApp.c: 89: {
  2224                           ;EusartApp.c: 90: cState = CHECK_CRC;
  2225  001222  0E06               	movlw	6
  2226  001224  6FF6               	movwf	_cState& (0+255),b
  2227                           
  2228                           ;EusartApp.c: 91: }
  2229  001226  0012               	return	
  2230  001228                     l217:
  2231                           
  2232                           ; BSR set to: 0
  2233                           ;EusartApp.c: 92: else
  2234                           ;EusartApp.c: 93: {
  2235                           ;EusartApp.c: 94: cState = READ_DATA;
  2236                           
  2237                           ; BSR set to: 0
  2238  001228  0E05               	movlw	5
  2239  00122A  6FF6               	movwf	_cState& (0+255),b
  2240                           
  2241                           ; BSR set to: 0
  2242                           ;EusartApp.c: 95: }
  2243                           ;EusartApp.c: 97: }
  2244                           ;EusartApp.c: 99: break;
  2245                           
  2246                           ; BSR set to: 0
  2247  00122C  0012               	return	
  2248  00122E                     
  2249                           ; BSR set to: 0
  2250                           ;EusartApp.c: 103: if(eusart1RxCount >= dataSize)
  2251                           
  2252                           ; BSR set to: 0
  2253  00122E  51F3               	movf	_dataSize& (0+255),w,b
  2254  001230  5DF7               	subwf	_eusart1RxCount& (0+255),w,b	;volatile
  2255  001232  A0D8               	btfss	status,0,c
  2256  001234  0012               	return	
  2257                           
  2258                           ; BSR set to: 0
  2259                           ;EusartApp.c: 104: {
  2260                           ;EusartApp.c: 105: ZeroArray(rxMsgData, (0x14));
  2261  001236  0E72               	movlw	low _rxMsgData
  2262  001238  6E20               	movwf	ZeroArray@array,c
  2263  00123A  0E01               	movlw	high _rxMsgData
  2264  00123C  6E21               	movwf	ZeroArray@array+1,c
  2265  00123E  0E00               	movlw	0
  2266  001240  6E23               	movwf	ZeroArray@size+1,c
  2267  001242  0E14               	movlw	20
  2268  001244  6E22               	movwf	ZeroArray@size,c
  2269  001246  EC4B  F020         	call	_ZeroArray	;wreg free
  2270                           
  2271                           ;EusartApp.c: 107: for(int idx = 0; idx < dataSize; idx++)
  2272  00124A  0E00               	movlw	0
  2273  00124C  0101               	movlb	1	; () banked
  2274  00124E  6FE3               	movwf	(readUartMessage@idx+1)& (0+255),b
  2275  001250  0E00               	movlw	0
  2276  001252  6FE2               	movwf	readUartMessage@idx& (0+255),b
  2277  001254  D022               	goto	l221
  2278  001256                     
  2279                           ; BSR set to: 1
  2280                           ;EusartApp.c: 108: {
  2281                           ;EusartApp.c: 109: chRec = EUSART1_Read();
  2282                           
  2283                           ; BSR set to: 1
  2284  001256  ECF6  F01C         	call	_EUSART1_Read	;wreg free
  2285  00125A  0101               	movlb	1	; () banked
  2286  00125C  6FE4               	movwf	readUartMessage@chRec& (0+255),b
  2287                           
  2288                           ; BSR set to: 1
  2289                           ;EusartApp.c: 110: rxMsgQueue[(0x4) + msgCount++] = chRec;
  2290  00125E  0100               	movlb	0	; () banked
  2291  001260  51F0               	movf	_msgCount& (0+255),w,b
  2292  001262  0101               	movlb	1	; () banked
  2293  001264  6FDE               	movwf	??_readUartMessage& (0+255),b
  2294  001266  6BDF               	clrf	(??_readUartMessage+1)& (0+255),b
  2295  001268  0E04               	movlw	4
  2296  00126A  27DE               	addwf	??_readUartMessage& (0+255),f,b
  2297  00126C  0E00               	movlw	0
  2298  00126E  23DF               	addwfc	(??_readUartMessage+1)& (0+255),f,b
  2299  001270  0E86               	movlw	low _rxMsgQueue
  2300  001272  25DE               	addwf	??_readUartMessage& (0+255),w,b
  2301  001274  6ED9               	movwf	fsr2l,c
  2302  001276  0E01               	movlw	high _rxMsgQueue
  2303  001278  21DF               	addwfc	(??_readUartMessage+1)& (0+255),w,b
  2304  00127A  6EDA               	movwf	fsr2h,c
  2305  00127C  C1E4  FFDF         	movff	readUartMessage@chRec,indf2
  2306                           
  2307                           ; BSR set to: 1
  2308  001280  0100               	movlb	0	; () banked
  2309  001282  2BF0               	incf	_msgCount& (0+255),f,b
  2310                           
  2311                           ; BSR set to: 0
  2312                           ;EusartApp.c: 111: rxMsgData[idx] = chRec;
  2313  001284  0E72               	movlw	low _rxMsgData
  2314  001286  0101               	movlb	1	; () banked
  2315  001288  25E2               	addwf	readUartMessage@idx& (0+255),w,b
  2316  00128A  6ED9               	movwf	fsr2l,c
  2317  00128C  0E01               	movlw	high _rxMsgData
  2318  00128E  21E3               	addwfc	(readUartMessage@idx+1)& (0+255),w,b
  2319  001290  6EDA               	movwf	fsr2h,c
  2320  001292  C1E4  FFDF         	movff	readUartMessage@chRec,indf2
  2321                           
  2322                           ; BSR set to: 1
  2323  001296  4BE2               	infsnz	readUartMessage@idx& (0+255),f,b
  2324  001298  2BE3               	incf	(readUartMessage@idx+1)& (0+255),f,b
  2325  00129A                     l221:
  2326                           
  2327                           ; BSR set to: 1
  2328                           
  2329                           ; BSR set to: 1
  2330  00129A  0100               	movlb	0	; () banked
  2331  00129C  51F3               	movf	_dataSize& (0+255),w,b
  2332  00129E  0101               	movlb	1	; () banked
  2333  0012A0  6FDE               	movwf	??_readUartMessage& (0+255),b
  2334  0012A2  6BDF               	clrf	(??_readUartMessage+1)& (0+255),b
  2335  0012A4  51DE               	movf	??_readUartMessage& (0+255),w,b
  2336  0012A6  5DE2               	subwf	readUartMessage@idx& (0+255),w,b
  2337  0012A8  51E3               	movf	(readUartMessage@idx+1)& (0+255),w,b
  2338  0012AA  0A80               	xorlw	128
  2339  0012AC  6FE0               	movwf	(??_readUartMessage+2)& (0+255),b
  2340  0012AE  51DF               	movf	(??_readUartMessage+1)& (0+255),w,b
  2341  0012B0  0A80               	xorlw	128
  2342  0012B2  59E0               	subwfb	(??_readUartMessage+2)& (0+255),w,b
  2343  0012B4  A0D8               	btfss	status,0,c
  2344  0012B6  D7CF               	goto	l222
  2345                           
  2346                           ; BSR set to: 1
  2347                           ;EusartApp.c: 112: }
  2348                           ;EusartApp.c: 114: cState = CHECK_CRC;
  2349                           
  2350                           ; BSR set to: 1
  2351  0012B8  0E06               	movlw	6
  2352  0012BA  0100               	movlb	0	; () banked
  2353  0012BC  6FF6               	movwf	_cState& (0+255),b
  2354                           
  2355                           ; BSR set to: 0
  2356                           ;EusartApp.c: 115: }
  2357                           ;EusartApp.c: 116: break;
  2358  0012BE  0012               	return	
  2359  0012C0                     
  2360                           ; BSR set to: 0
  2361                           ;EusartApp.c: 119: if(eusart1RxCount >= 1)
  2362                           
  2363                           ; BSR set to: 0
  2364  0012C0  51F7               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  2365  0012C2  B4D8               	btfsc	status,2,c
  2366  0012C4  0012               	return	
  2367                           
  2368                           ; BSR set to: 0
  2369                           ;EusartApp.c: 120: {
  2370                           ;EusartApp.c: 121: crcGiven = EUSART1_Read();
  2371  0012C6  ECF6  F01C         	call	_EUSART1_Read	;wreg free
  2372  0012CA  0100               	movlb	0	; () banked
  2373  0012CC  6FF1               	movwf	_crcGiven& (0+255),b
  2374                           
  2375                           ; BSR set to: 0
  2376                           ;EusartApp.c: 122: crcCalc = crc8(rxMsgQueue, (0x4) + msgCount);
  2377  0012CE  0E86               	movlw	low _rxMsgQueue
  2378  0012D0  6E18               	movwf	crc8@dataArray,c
  2379  0012D2  0E01               	movlw	high _rxMsgQueue
  2380  0012D4  6E19               	movwf	crc8@dataArray+1,c
  2381  0012D6  0E04               	movlw	4
  2382  0012D8  25F0               	addwf	_msgCount& (0+255),w,b
  2383  0012DA  6E1A               	movwf	crc8@dataSize,c
  2384  0012DC  6A1B               	clrf	crc8@dataSize+1,c
  2385  0012DE  0E00               	movlw	0
  2386  0012E0  221B               	addwfc	crc8@dataSize+1,f,c
  2387  0012E2  ECCF  F01C         	call	_crc8	;wreg free
  2388  0012E6  0100               	movlb	0	; () banked
  2389  0012E8  6FF2               	movwf	_crcCalc& (0+255),b
  2390                           
  2391                           ; BSR set to: 0
  2392                           ;EusartApp.c: 124: if(crcGiven == crcCalc)
  2393  0012EA  51F2               	movf	_crcCalc& (0+255),w,b
  2394  0012EC  19F1               	xorwf	_crcGiven& (0+255),w,b
  2395  0012EE  A4D8               	btfss	status,2,c
  2396  0012F0  D003               	goto	l226
  2397                           
  2398                           ; BSR set to: 0
  2399                           ;EusartApp.c: 125: {
  2400                           ;EusartApp.c: 126: cState = JUMP_FUNCTION;
  2401  0012F2  0E07               	movlw	7
  2402  0012F4  6FF6               	movwf	_cState& (0+255),b
  2403                           
  2404                           ;EusartApp.c: 127: }
  2405  0012F6  0012               	return	
  2406  0012F8                     l226:
  2407                           
  2408                           ; BSR set to: 0
  2409                           ;EusartApp.c: 128: else
  2410                           ;EusartApp.c: 129: {
  2411                           ;EusartApp.c: 130: cState = START_RX_MESSAGE_READ;
  2412                           
  2413                           ; BSR set to: 0
  2414  0012F8  0E00               	movlw	0
  2415  0012FA  6FF6               	movwf	_cState& (0+255),b
  2416                           
  2417                           ; BSR set to: 0
  2418                           ;EusartApp.c: 131: }
  2419                           ;EusartApp.c: 132: }
  2420                           ;EusartApp.c: 133: break;
  2421                           
  2422                           ; BSR set to: 0
  2423  0012FC  0012               	return	
  2424  0012FE                     
  2425                           ; BSR set to: 0
  2426                           ;EusartApp.c: 136: groupsArray[group - 1](request, rxMsgData);
  2427                           
  2428                           ; BSR set to: 0
  2429  0012FE  0EFE               	movlw	254
  2430  001300  0101               	movlb	1	; () banked
  2431  001302  6FDE               	movwf	??_readUartMessage& (0+255),b
  2432  001304  0EFF               	movlw	255
  2433  001306  6FDF               	movwf	(??_readUartMessage+1)& (0+255),b
  2434  001308  0100               	movlb	0	; () banked
  2435  00130A  51F5               	movf	_group& (0+255),w,b
  2436  00130C  0101               	movlb	1	; () banked
  2437  00130E  6FE0               	movwf	(??_readUartMessage+2)& (0+255),b
  2438  001310  6BE1               	clrf	(??_readUartMessage+3)& (0+255),b
  2439  001312  90D8               	bcf	status,0,c
  2440  001314  37E0               	rlcf	(??_readUartMessage+2)& (0+255),f,b
  2441  001316  37E1               	rlcf	(??_readUartMessage+3)& (0+255),f,b
  2442  001318  51DE               	movf	??_readUartMessage& (0+255),w,b
  2443  00131A  27E0               	addwf	(??_readUartMessage+2)& (0+255),f,b
  2444  00131C  51DF               	movf	(??_readUartMessage+1)& (0+255),w,b
  2445  00131E  23E1               	addwfc	(??_readUartMessage+3)& (0+255),f,b
  2446  001320  0EE5               	movlw	low _groupsArray
  2447  001322  25E0               	addwf	(??_readUartMessage+2)& (0+255),w,b
  2448  001324  6ED9               	movwf	fsr2l,c
  2449  001326  0E01               	movlw	high _groupsArray
  2450  001328  21E1               	addwfc	(??_readUartMessage+3)& (0+255),w,b
  2451  00132A  6EDA               	movwf	fsr2h,c
  2452  00132C  D801               	call	u8898
  2453  00132E  D010               	goto	u8899
  2454  001330                     u8898:
  2455  001330  0005               	push	
  2456  001332  6EFA               	movwf	pclath,c
  2457  001334  50DE               	movf	postinc2,w,c
  2458  001336  6EFD               	movwf	tosl,c
  2459  001338  50DE               	movf	postinc2,w,c
  2460  00133A  6EFE               	movwf	tosh,c
  2461  00133C  50F8               	movf	tblptru,w,c
  2462  00133E  6EFF               	movwf	tosu,c
  2463  001340  50FA               	movf	pclath,w,c
  2464  001342  0E72               	movlw	low _rxMsgData
  2465  001344  0100               	movlb	0	; () banked
  2466  001346  6FE6               	movwf	GroupDAC@data& (0+255),b
  2467  001348  0E01               	movlw	high _rxMsgData
  2468  00134A  6FE7               	movwf	(GroupDAC@data+1)& (0+255),b
  2469  00134C  51F4               	movf	_request& (0+255),w,b
  2470  00134E  0012               	return		;indir
  2471  001350                     u8899:
  2472                           
  2473                           ;EusartApp.c: 137: cState = START_RX_MESSAGE_READ;
  2474  001350  0E00               	movlw	0
  2475  001352  0100               	movlb	0	; () banked
  2476  001354  6FF6               	movwf	_cState& (0+255),b
  2477                           
  2478                           ; BSR set to: 0
  2479                           ;EusartApp.c: 139: }
  2480                           
  2481                           ;EusartApp.c: 138: break;
  2482  001356  0012               	return	
  2483  001358                     l202:
  2484                           
  2485                           ; BSR set to: 0
  2486  001358  0100               	movlb	0	; () banked
  2487  00135A  51F6               	movf	_cState& (0+255),w,b
  2488                           
  2489                           ; Switch size 1, requested type "space"
  2490                           ; Number of cases is 8, Range of values is 0 to 7
  2491                           ; switch strategies available:
  2492                           ; Name         Instructions Cycles
  2493                           ; simple_byte           25    13 (average)
  2494                           ;	Chosen strategy is simple_byte
  2495  00135C  0A00               	xorlw	0	; case 0
  2496  00135E  B4D8               	btfsc	status,2,c
  2497  001360  D71C               	goto	l203
  2498  001362  0A01               	xorlw	1	; case 1
  2499  001364  B4D8               	btfsc	status,2,c
  2500  001366  D720               	goto	l206
  2501  001368  0A03               	xorlw	3	; case 2
  2502  00136A  B4D8               	btfsc	status,2,c
  2503  00136C  D736               	goto	l211
  2504  00136E  0A01               	xorlw	1	; case 3
  2505  001370  B4D8               	btfsc	status,2,c
  2506  001372  D73F               	goto	l213
  2507  001374  0A07               	xorlw	7	; case 4
  2508  001376  B4D8               	btfsc	status,2,c
  2509  001378  D748               	goto	l215
  2510  00137A  0A01               	xorlw	1	; case 5
  2511  00137C  B4D8               	btfsc	status,2,c
  2512  00137E  D757               	goto	l219
  2513  001380  0A03               	xorlw	3	; case 6
  2514  001382  B4D8               	btfsc	status,2,c
  2515  001384  D79D               	goto	l224
  2516  001386  0A01               	xorlw	1	; case 7
  2517  001388  A4D8               	btfss	status,2,c
  2518  00138A  0012               	return	
  2519  00138C  D7B8               	goto	l228
  2520  00138E                     __end_of_readUartMessage:
  2521                           	opt stack 0
  2522                           tosu	equ	0xFFF
  2523                           tosh	equ	0xFFE
  2524                           tosl	equ	0xFFD
  2525                           pclath	equ	0xFFA
  2526                           tblptru	equ	0xFF8
  2527                           tblptrh	equ	0xFF7
  2528                           tblptrl	equ	0xFF6
  2529                           tablat	equ	0xFF5
  2530                           postinc0	equ	0xFEE
  2531                           wreg	equ	0xFE8
  2532                           postdec1	equ	0xFE5
  2533                           fsr1l	equ	0xFE1
  2534                           indf2	equ	0xFDF
  2535                           postinc2	equ	0xFDE
  2536                           fsr2h	equ	0xFDA
  2537                           fsr2l	equ	0xFD9
  2538                           status	equ	0xFD8
  2539                           
  2540 ;; *************** function _InitRxMessageParams *****************
  2541 ;; Defined at:
  2542 ;;		line 142 in file "EusartApp.c"
  2543 ;; Parameters:    Size  Location     Type
  2544 ;;		None
  2545 ;; Auto vars:     Size  Location     Type
  2546 ;;		None
  2547 ;; Return value:  Size  Location     Type
  2548 ;;                  1    wreg      void 
  2549 ;; Registers used:
  2550 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2551 ;; Tracked objects:
  2552 ;;		On entry : 0/0
  2553 ;;		On exit  : 0/0
  2554 ;;		Unchanged: 0/0
  2555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2556 ;;      Params:         0       0       0       0       0       0       0
  2557 ;;      Locals:         0       0       0       0       0       0       0
  2558 ;;      Temps:          0       0       0       0       0       0       0
  2559 ;;      Totals:         0       0       0       0       0       0       0
  2560 ;;Total ram usage:        0 bytes
  2561 ;; Hardware stack levels used:    1
  2562 ;; Hardware stack levels required when called:    6
  2563 ;; This function calls:
  2564 ;;		_ZeroArray
  2565 ;; This function is called by:
  2566 ;;		_readUartMessage
  2567 ;; This function uses a non-reentrant model
  2568 ;;
  2569                           
  2570                           	psect	text2
  2571  003EEE                     __ptext2:
  2572                           	opt stack 0
  2573  003EEE                     _InitRxMessageParams:
  2574                           	opt stack 23
  2575                           
  2576                           ;EusartApp.c: 146: dataSize = 0;
  2577                           
  2578                           ;incstack = 0
  2579  003EEE  0E00               	movlw	0
  2580  003EF0  0100               	movlb	0	; () banked
  2581  003EF2  6FF3               	movwf	_dataSize& (0+255),b
  2582                           
  2583                           ;EusartApp.c: 147: crcCalc = 0;
  2584  003EF4  0E00               	movlw	0
  2585  003EF6  6FF2               	movwf	_crcCalc& (0+255),b
  2586                           
  2587                           ;EusartApp.c: 148: crcGiven = 0;
  2588  003EF8  0E00               	movlw	0
  2589  003EFA  6FF1               	movwf	_crcGiven& (0+255),b
  2590                           
  2591                           ;EusartApp.c: 149: msgCount = 0;
  2592  003EFC  0E00               	movlw	0
  2593  003EFE  6FF0               	movwf	_msgCount& (0+255),b
  2594                           
  2595                           ; BSR set to: 0
  2596                           ;EusartApp.c: 150: ZeroArray(rxMsgQueue, (0x14));
  2597  003F00  0E86               	movlw	low _rxMsgQueue
  2598  003F02  6E20               	movwf	ZeroArray@array,c
  2599  003F04  0E01               	movlw	high _rxMsgQueue
  2600  003F06  6E21               	movwf	ZeroArray@array+1,c
  2601  003F08  0E00               	movlw	0
  2602  003F0A  6E23               	movwf	ZeroArray@size+1,c
  2603  003F0C  0E14               	movlw	20
  2604  003F0E  6E22               	movwf	ZeroArray@size,c
  2605  003F10  EC4B  F020         	call	_ZeroArray
  2606  003F14  0012               	return		;funcret
  2607  003F16                     __end_of_InitRxMessageParams:
  2608                           	opt stack 0
  2609                           tosu	equ	0xFFF
  2610                           tosh	equ	0xFFE
  2611                           tosl	equ	0xFFD
  2612                           pclath	equ	0xFFA
  2613                           tblptru	equ	0xFF8
  2614                           tblptrh	equ	0xFF7
  2615                           tblptrl	equ	0xFF6
  2616                           tablat	equ	0xFF5
  2617                           postinc0	equ	0xFEE
  2618                           wreg	equ	0xFE8
  2619                           postdec1	equ	0xFE5
  2620                           fsr1l	equ	0xFE1
  2621                           indf2	equ	0xFDF
  2622                           postinc2	equ	0xFDE
  2623                           fsr2h	equ	0xFDA
  2624                           fsr2l	equ	0xFD9
  2625                           status	equ	0xFD8
  2626                           
  2627 ;; *************** function _GroupDAC *****************
  2628 ;; Defined at:
  2629 ;;		line 125 in file "MessageFunctions.c"
  2630 ;; Parameters:    Size  Location     Type
  2631 ;;  request         1    wreg     enum E12
  2632 ;;  data            2  134[BANK0 ] PTR unsigned char 
  2633 ;;		 -> rxMsgData(20), 
  2634 ;; Auto vars:     Size  Location     Type
  2635 ;;  request         1  136[BANK0 ] enum E12
  2636 ;; Return value:  Size  Location     Type
  2637 ;;                  1    wreg      void 
  2638 ;; Registers used:
  2639 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2640 ;; Tracked objects:
  2641 ;;		On entry : 0/0
  2642 ;;		On exit  : 0/0
  2643 ;;		Unchanged: 0/0
  2644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2645 ;;      Params:         0       2       0       0       0       0       0
  2646 ;;      Locals:         0       1       0       0       0       0       0
  2647 ;;      Temps:          0       0       0       0       0       0       0
  2648 ;;      Totals:         0       3       0       0       0       0       0
  2649 ;;Total ram usage:        3 bytes
  2650 ;; Hardware stack levels used:    1
  2651 ;; Hardware stack levels required when called:   11
  2652 ;; This function calls:
  2653 ;;		_DacReadValue
  2654 ;;		_DacSetValue
  2655 ;; This function is called by:
  2656 ;;		_readUartMessage
  2657 ;; This function uses a non-reentrant model
  2658 ;;
  2659                           
  2660                           	psect	text3
  2661  003D68                     __ptext3:
  2662                           	opt stack 0
  2663  003D68                     _GroupDAC:
  2664                           	opt stack 18
  2665                           
  2666                           ;incstack = 0
  2667                           ;GroupDAC@request stored from wreg
  2668  003D68  0100               	movlb	0	; () banked
  2669  003D6A  6FE8               	movwf	GroupDAC@request& (0+255),b
  2670                           
  2671                           ;MessageFunctions.c: 127: switch (request)
  2672  003D6C  D00E               	goto	l1332
  2673  003D6E                     
  2674                           ;MessageFunctions.c: 130: DacSetValue(data);
  2675  003D6E  C0E6  F08A         	movff	GroupDAC@data,DacSetValue@data
  2676  003D72  C0E7  F08B         	movff	GroupDAC@data+1,DacSetValue@data+1
  2677  003D76  ECBC  F017         	call	_DacSetValue	;wreg free
  2678                           
  2679                           ;MessageFunctions.c: 131: break;
  2680  003D7A  0012               	return	
  2681  003D7C                     
  2682                           ;MessageFunctions.c: 134: DacReadValue(data);
  2683  003D7C  C0E6  F0C8         	movff	GroupDAC@data,DacReadValue@data
  2684  003D80  C0E7  F0C9         	movff	GroupDAC@data+1,DacReadValue@data+1
  2685  003D84  EC7B  F013         	call	_DacReadValue	;wreg free
  2686                           
  2687                           ;MessageFunctions.c: 139: }
  2688                           
  2689                           ;MessageFunctions.c: 138: break;
  2690                           
  2691                           ;MessageFunctions.c: 137: default:
  2692                           
  2693                           ;MessageFunctions.c: 135: break;
  2694  003D88  0012               	return	
  2695  003D8A                     l1332:
  2696  003D8A  0100               	movlb	0	; () banked
  2697  003D8C  51E8               	movf	GroupDAC@request& (0+255),w,b
  2698                           
  2699                           ; Switch size 1, requested type "space"
  2700                           ; Number of cases is 2, Range of values is 97 to 98
  2701                           ; switch strategies available:
  2702                           ; Name         Instructions Cycles
  2703                           ; simple_byte            7     4 (average)
  2704                           ;	Chosen strategy is simple_byte
  2705  003D8E  0A61               	xorlw	97	; case 97
  2706  003D90  B4D8               	btfsc	status,2,c
  2707  003D92  D7ED               	goto	l1333
  2708  003D94  0A03               	xorlw	3	; case 98
  2709  003D96  A4D8               	btfss	status,2,c
  2710  003D98  0012               	return	
  2711  003D9A  D7F0               	goto	l1335
  2712  003D9C                     __end_of_GroupDAC:
  2713                           	opt stack 0
  2714                           tosu	equ	0xFFF
  2715                           tosh	equ	0xFFE
  2716                           tosl	equ	0xFFD
  2717                           pclath	equ	0xFFA
  2718                           tblptru	equ	0xFF8
  2719                           tblptrh	equ	0xFF7
  2720                           tblptrl	equ	0xFF6
  2721                           tablat	equ	0xFF5
  2722                           postinc0	equ	0xFEE
  2723                           wreg	equ	0xFE8
  2724                           postdec1	equ	0xFE5
  2725                           fsr1l	equ	0xFE1
  2726                           indf2	equ	0xFDF
  2727                           postinc2	equ	0xFDE
  2728                           fsr2h	equ	0xFDA
  2729                           fsr2l	equ	0xFD9
  2730                           status	equ	0xFD8
  2731                           
  2732 ;; *************** function _GroupFlashMemory *****************
  2733 ;; Defined at:
  2734 ;;		line 104 in file "MessageFunctions.c"
  2735 ;; Parameters:    Size  Location     Type
  2736 ;;  request         1    wreg     enum E12
  2737 ;;  data            2  134[BANK0 ] PTR unsigned char 
  2738 ;; Auto vars:     Size  Location     Type
  2739 ;;  request         1  136[BANK0 ] enum E12
  2740 ;; Return value:  Size  Location     Type
  2741 ;;                  1    wreg      void 
  2742 ;; Registers used:
  2743 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2744 ;; Tracked objects:
  2745 ;;		On entry : 0/0
  2746 ;;		On exit  : 0/0
  2747 ;;		Unchanged: 0/0
  2748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2749 ;;      Params:         0       2       0       0       0       0       0
  2750 ;;      Locals:         0       1       0       0       0       0       0
  2751 ;;      Temps:          0       0       0       0       0       0       0
  2752 ;;      Totals:         0       3       0       0       0       0       0
  2753 ;;Total ram usage:        3 bytes
  2754 ;; Hardware stack levels used:    1
  2755 ;; Hardware stack levels required when called:    9
  2756 ;; This function calls:
  2757 ;;		_FlashEreaseMem
  2758 ;;		_FlashReadCondition
  2759 ;;		_FlashReadUart
  2760 ;; This function is called by:
  2761 ;;		_readUartMessage
  2762 ;; This function uses a non-reentrant model
  2763 ;;
  2764                           
  2765                           	psect	text4
  2766  003BE8                     __ptext4:
  2767                           	opt stack 0
  2768  003BE8                     _GroupFlashMemory:
  2769                           	opt stack 20
  2770                           
  2771                           ;incstack = 0
  2772                           ;GroupFlashMemory@request stored from wreg
  2773  003BE8  0100               	movlb	0	; () banked
  2774  003BEA  6FE8               	movwf	GroupFlashMemory@request& (0+255),b
  2775                           
  2776                           ;MessageFunctions.c: 106: switch (request)
  2777  003BEC  D00D               	goto	l1323
  2778  003BEE                     
  2779                           ;MessageFunctions.c: 109: FlashEreaseMem();
  2780  003BEE  EC7D  F01C         	call	_FlashEreaseMem	;wreg free
  2781                           
  2782                           ;MessageFunctions.c: 110: break;
  2783  003BF2  0012               	return	
  2784  003BF4                     
  2785                           ;MessageFunctions.c: 113: FlashReadCondition();
  2786  003BF4  EC1D  F010         	call	_FlashReadCondition	;wreg free
  2787                           
  2788                           ;MessageFunctions.c: 114: break;
  2789  003BF8  0012               	return	
  2790  003BFA                     
  2791                           ;MessageFunctions.c: 117: FlashReadUart(data);
  2792  003BFA  C0E6  F087         	movff	GroupFlashMemory@data,FlashReadUart@data
  2793  003BFE  C0E7  F088         	movff	GroupFlashMemory@data+1,FlashReadUart@data+1
  2794  003C02  ECC2  F00A         	call	_FlashReadUart	;wreg free
  2795                           
  2796                           ;MessageFunctions.c: 122: }
  2797                           
  2798                           ;MessageFunctions.c: 121: break;
  2799                           
  2800                           ;MessageFunctions.c: 120: default:
  2801                           
  2802                           ;MessageFunctions.c: 118: break;
  2803  003C06  0012               	return	
  2804  003C08                     l1323:
  2805  003C08  0100               	movlb	0	; () banked
  2806  003C0A  51E8               	movf	GroupFlashMemory@request& (0+255),w,b
  2807                           
  2808                           ; Switch size 1, requested type "space"
  2809                           ; Number of cases is 3, Range of values is 81 to 83
  2810                           ; switch strategies available:
  2811                           ; Name         Instructions Cycles
  2812                           ; simple_byte           10     6 (average)
  2813                           ;	Chosen strategy is simple_byte
  2814  003C0C  0A51               	xorlw	81	; case 81
  2815  003C0E  B4D8               	btfsc	status,2,c
  2816  003C10  D7EE               	goto	l1324
  2817  003C12  0A03               	xorlw	3	; case 82
  2818  003C14  B4D8               	btfsc	status,2,c
  2819  003C16  D7EE               	goto	l1326
  2820  003C18  0A01               	xorlw	1	; case 83
  2821  003C1A  A4D8               	btfss	status,2,c
  2822  003C1C  0012               	return	
  2823  003C1E  D7ED               	goto	l1327
  2824  003C20                     __end_of_GroupFlashMemory:
  2825                           	opt stack 0
  2826                           tosu	equ	0xFFF
  2827                           tosh	equ	0xFFE
  2828                           tosl	equ	0xFFD
  2829                           pclath	equ	0xFFA
  2830                           tblptru	equ	0xFF8
  2831                           tblptrh	equ	0xFF7
  2832                           tblptrl	equ	0xFF6
  2833                           tablat	equ	0xFF5
  2834                           postinc0	equ	0xFEE
  2835                           wreg	equ	0xFE8
  2836                           postdec1	equ	0xFE5
  2837                           fsr1l	equ	0xFE1
  2838                           indf2	equ	0xFDF
  2839                           postinc2	equ	0xFDE
  2840                           fsr2h	equ	0xFDA
  2841                           fsr2l	equ	0xFD9
  2842                           status	equ	0xFD8
  2843                           
  2844 ;; *************** function _GroupAdc *****************
  2845 ;; Defined at:
  2846 ;;		line 51 in file "MessageFunctions.c"
  2847 ;; Parameters:    Size  Location     Type
  2848 ;;  request         1    wreg     enum E12
  2849 ;;  data            2  134[BANK0 ] PTR unsigned char 
  2850 ;; Auto vars:     Size  Location     Type
  2851 ;;  request         1  136[BANK0 ] enum E12
  2852 ;; Return value:  Size  Location     Type
  2853 ;;                  1    wreg      void 
  2854 ;; Registers used:
  2855 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2856 ;; Tracked objects:
  2857 ;;		On entry : 0/0
  2858 ;;		On exit  : 0/0
  2859 ;;		Unchanged: 0/0
  2860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2861 ;;      Params:         0       2       0       0       0       0       0
  2862 ;;      Locals:         0       1       0       0       0       0       0
  2863 ;;      Temps:          0       0       0       0       0       0       0
  2864 ;;      Totals:         0       3       0       0       0       0       0
  2865 ;;Total ram usage:        3 bytes
  2866 ;; Hardware stack levels used:    1
  2867 ;; Hardware stack levels required when called:    8
  2868 ;; This function calls:
  2869 ;;		_SetChannelMode
  2870 ;; This function is called by:
  2871 ;;		_readUartMessage
  2872 ;; This function uses a non-reentrant model
  2873 ;;
  2874                           
  2875                           	psect	text5
  2876  00403A                     __ptext5:
  2877                           	opt stack 0
  2878  00403A                     _GroupAdc:
  2879                           	opt stack 21
  2880                           
  2881                           ;incstack = 0
  2882                           ;GroupAdc@request stored from wreg
  2883  00403A  0100               	movlb	0	; () banked
  2884  00403C  6FE8               	movwf	GroupAdc@request& (0+255),b
  2885                           
  2886                           ;MessageFunctions.c: 53: switch (request)
  2887  00403E  D007               	goto	l1302
  2888  004040                     
  2889                           ;MessageFunctions.c: 56: SetChannelMode(data);
  2890  004040  C0E6  F02C         	movff	GroupAdc@data,SetChannelMode@data
  2891  004044  C0E7  F02D         	movff	GroupAdc@data+1,SetChannelMode@data+1
  2892  004048  EC1A  F01F         	call	_SetChannelMode	;wreg free
  2893                           
  2894                           ;MessageFunctions.c: 61: }
  2895                           
  2896                           ;MessageFunctions.c: 60: break;
  2897                           
  2898                           ;MessageFunctions.c: 59: default:
  2899                           
  2900                           ;MessageFunctions.c: 57: break;
  2901  00404C  0012               	return	
  2902  00404E                     l1302:
  2903  00404E  0100               	movlb	0	; () banked
  2904  004050  51E8               	movf	GroupAdc@request& (0+255),w,b
  2905                           
  2906                           ; Switch size 1, requested type "space"
  2907                           ; Number of cases is 1, Range of values is 50 to 50
  2908                           ; switch strategies available:
  2909                           ; Name         Instructions Cycles
  2910                           ; simple_byte            4     3 (average)
  2911                           ;	Chosen strategy is simple_byte
  2912  004052  0A32               	xorlw	50	; case 50
  2913  004054  A4D8               	btfss	status,2,c
  2914  004056  0012               	return	
  2915  004058  D7F3               	goto	l1303
  2916  00405A                     __end_of_GroupAdc:
  2917                           	opt stack 0
  2918                           tosu	equ	0xFFF
  2919                           tosh	equ	0xFFE
  2920                           tosl	equ	0xFFD
  2921                           pclath	equ	0xFFA
  2922                           tblptru	equ	0xFF8
  2923                           tblptrh	equ	0xFF7
  2924                           tblptrl	equ	0xFF6
  2925                           tablat	equ	0xFF5
  2926                           postinc0	equ	0xFEE
  2927                           wreg	equ	0xFE8
  2928                           postdec1	equ	0xFE5
  2929                           fsr1l	equ	0xFE1
  2930                           indf2	equ	0xFDF
  2931                           postinc2	equ	0xFDE
  2932                           fsr2h	equ	0xFDA
  2933                           fsr2l	equ	0xFD9
  2934                           status	equ	0xFD8
  2935                           
  2936 ;; *************** function _GroupStatusAndVersion *****************
  2937 ;; Defined at:
  2938 ;;		line 34 in file "MessageFunctions.c"
  2939 ;; Parameters:    Size  Location     Type
  2940 ;;  request         1    wreg     enum E12
  2941 ;;  data            3  134[BANK0 ] PTR unsigned char 
  2942 ;; Auto vars:     Size  Location     Type
  2943 ;;  request         1  137[BANK0 ] enum E12
  2944 ;; Return value:  Size  Location     Type
  2945 ;;                  1    wreg      void 
  2946 ;; Registers used:
  2947 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2948 ;; Tracked objects:
  2949 ;;		On entry : 0/0
  2950 ;;		On exit  : 0/0
  2951 ;;		Unchanged: 0/0
  2952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2953 ;;      Params:         0       2       0       0       0       0       0
  2954 ;;      Locals:         0       1       0       0       0       0       0
  2955 ;;      Temps:          0       0       0       0       0       0       0
  2956 ;;      Totals:         0       3       0       0       0       0       0
  2957 ;;Total ram usage:        3 bytes
  2958 ;; Hardware stack levels used:    1
  2959 ;; Hardware stack levels required when called:    7
  2960 ;; This function calls:
  2961 ;;		_GetMcuFwVersion
  2962 ;;		_GetMcuRunTime
  2963 ;; This function is called by:
  2964 ;;		_readUartMessage
  2965 ;; This function uses a non-reentrant model
  2966 ;;
  2967                           
  2968                           	psect	text6
  2969  003F8A                     __ptext6:
  2970                           	opt stack 0
  2971  003F8A                     _GroupStatusAndVersion:
  2972                           	opt stack 22
  2973                           
  2974                           ;incstack = 0
  2975                           ;GroupStatusAndVersion@request stored from wreg
  2976  003F8A  0100               	movlb	0	; () banked
  2977  003F8C  6FE9               	movwf	GroupStatusAndVersion@request& (0+255),b
  2978                           
  2979                           ;MessageFunctions.c: 36: switch (request)
  2980  003F8E  D006               	goto	l1294
  2981  003F90                     
  2982                           ;MessageFunctions.c: 39: GetMcuFwVersion();
  2983  003F90  EC53  F003         	call	_GetMcuFwVersion	;wreg free
  2984                           
  2985                           ;MessageFunctions.c: 40: break;
  2986  003F94  0012               	return	
  2987  003F96                     
  2988                           ;MessageFunctions.c: 43: GetMcuRunTime();
  2989  003F96  EC09  F013         	call	_GetMcuRunTime	;wreg free
  2990                           
  2991                           ;MessageFunctions.c: 48: }
  2992                           
  2993                           ;MessageFunctions.c: 47: break;
  2994                           
  2995                           ;MessageFunctions.c: 46: default:
  2996                           
  2997                           ;MessageFunctions.c: 44: break;
  2998  003F9A  0012               	return	
  2999  003F9C                     l1294:
  3000  003F9C  0100               	movlb	0	; () banked
  3001  003F9E  51E9               	movf	GroupStatusAndVersion@request& (0+255),w,b
  3002                           
  3003                           ; Switch size 1, requested type "space"
  3004                           ; Number of cases is 2, Range of values is 33 to 34
  3005                           ; switch strategies available:
  3006                           ; Name         Instructions Cycles
  3007                           ; simple_byte            7     4 (average)
  3008                           ;	Chosen strategy is simple_byte
  3009  003FA0  0A21               	xorlw	33	; case 33
  3010  003FA2  B4D8               	btfsc	status,2,c
  3011  003FA4  D7F8               	goto	l1297
  3012  003FA6  0A03               	xorlw	3	; case 34
  3013  003FA8  A4D8               	btfss	status,2,c
  3014  003FAA  0012               	return	
  3015  003FAC  D7F1               	goto	l1295
  3016  003FAE                     __end_of_GroupStatusAndVersion:
  3017                           	opt stack 0
  3018                           tosu	equ	0xFFF
  3019                           tosh	equ	0xFFE
  3020                           tosl	equ	0xFFD
  3021                           pclath	equ	0xFFA
  3022                           tblptru	equ	0xFF8
  3023                           tblptrh	equ	0xFF7
  3024                           tblptrl	equ	0xFF6
  3025                           tablat	equ	0xFF5
  3026                           postinc0	equ	0xFEE
  3027                           wreg	equ	0xFE8
  3028                           postdec1	equ	0xFE5
  3029                           fsr1l	equ	0xFE1
  3030                           indf2	equ	0xFDF
  3031                           postinc2	equ	0xFDE
  3032                           fsr2h	equ	0xFDA
  3033                           fsr2l	equ	0xFD9
  3034                           status	equ	0xFD8
  3035                           
  3036 ;; *************** function _GroupControlMcu *****************
  3037 ;; Defined at:
  3038 ;;		line 11 in file "MessageFunctions.c"
  3039 ;; Parameters:    Size  Location     Type
  3040 ;;  request         1    wreg     enum E12
  3041 ;;  data            3  134[BANK0 ] PTR unsigned char 
  3042 ;; Auto vars:     Size  Location     Type
  3043 ;;  request         1  137[BANK0 ] enum E12
  3044 ;; Return value:  Size  Location     Type
  3045 ;;                  1    wreg      void 
  3046 ;; Registers used:
  3047 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3048 ;; Tracked objects:
  3049 ;;		On entry : 0/0
  3050 ;;		On exit  : 0/0
  3051 ;;		Unchanged: 0/0
  3052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3053 ;;      Params:         0       2       0       0       0       0       0
  3054 ;;      Locals:         0       1       0       0       0       0       0
  3055 ;;      Temps:          0       0       0       0       0       0       0
  3056 ;;      Totals:         0       3       0       0       0       0       0
  3057 ;;Total ram usage:        3 bytes
  3058 ;; Hardware stack levels used:    1
  3059 ;; Hardware stack levels required when called:    8
  3060 ;; This function calls:
  3061 ;;		_ResetMcu
  3062 ;;		_testLeds
  3063 ;; This function is called by:
  3064 ;;		_readUartMessage
  3065 ;; This function uses a non-reentrant model
  3066 ;;
  3067                           
  3068                           	psect	text7
  3069  003E04                     __ptext7:
  3070                           	opt stack 0
  3071  003E04                     _GroupControlMcu:
  3072                           	opt stack 21
  3073                           
  3074                           ;incstack = 0
  3075                           ;GroupControlMcu@request stored from wreg
  3076  003E04  0100               	movlb	0	; () banked
  3077  003E06  6FE9               	movwf	GroupControlMcu@request& (0+255),b
  3078                           
  3079                           ;MessageFunctions.c: 13: switch (request)
  3080  003E08  D006               	goto	l1284
  3081  003E0A                     
  3082                           ;MessageFunctions.c: 16: testLeds();
  3083  003E0A  ECE8  F019         	call	_testLeds	;wreg free
  3084                           
  3085                           ;MessageFunctions.c: 17: break;
  3086  003E0E  0012               	return	
  3087  003E10                     
  3088                           ;MessageFunctions.c: 20: ResetMcu();
  3089  003E10  ECDC  F020         	call	_ResetMcu	;wreg free
  3090                           
  3091                           ;MessageFunctions.c: 31: }
  3092                           
  3093                           ;MessageFunctions.c: 30: break;
  3094                           
  3095                           ;MessageFunctions.c: 29: default:
  3096                           
  3097                           ;MessageFunctions.c: 27: break;
  3098                           
  3099                           ;MessageFunctions.c: 26: case CONTROL_PA2_SET:
  3100                           
  3101                           ;MessageFunctions.c: 24: break;
  3102                           
  3103                           ;MessageFunctions.c: 23: case CONTROL_PA1_SET:
  3104                           
  3105                           ;MessageFunctions.c: 21: break;
  3106  003E14  0012               	return	
  3107  003E16                     l1284:
  3108  003E16  0100               	movlb	0	; () banked
  3109  003E18  51E9               	movf	GroupControlMcu@request& (0+255),w,b
  3110                           
  3111                           ; Switch size 1, requested type "space"
  3112                           ; Number of cases is 4, Range of values is 17 to 20
  3113                           ; switch strategies available:
  3114                           ; Name         Instructions Cycles
  3115                           ; simple_byte           13     7 (average)
  3116                           ;	Chosen strategy is simple_byte
  3117  003E1A  0A11               	xorlw	17	; case 17
  3118  003E1C  B4D8               	btfsc	status,2,c
  3119  003E1E  D7F8               	goto	l1287
  3120  003E20  0A03               	xorlw	3	; case 18
  3121  003E22  B4D8               	btfsc	status,2,c
  3122  003E24  0012               	return	
  3123  003E26  0A01               	xorlw	1	; case 19
  3124  003E28  B4D8               	btfsc	status,2,c
  3125  003E2A  0012               	return	
  3126  003E2C  0A07               	xorlw	7	; case 20
  3127  003E2E  A4D8               	btfss	status,2,c
  3128  003E30  0012               	return	
  3129  003E32  D7EB               	goto	l1285
  3130  003E34                     __end_of_GroupControlMcu:
  3131                           	opt stack 0
  3132                           tosu	equ	0xFFF
  3133                           tosh	equ	0xFFE
  3134                           tosl	equ	0xFFD
  3135                           pclath	equ	0xFFA
  3136                           tblptru	equ	0xFF8
  3137                           tblptrh	equ	0xFF7
  3138                           tblptrl	equ	0xFF6
  3139                           tablat	equ	0xFF5
  3140                           postinc0	equ	0xFEE
  3141                           wreg	equ	0xFE8
  3142                           postdec1	equ	0xFE5
  3143                           fsr1l	equ	0xFE1
  3144                           indf2	equ	0xFDF
  3145                           postinc2	equ	0xFDE
  3146                           fsr2h	equ	0xFDA
  3147                           fsr2l	equ	0xFD9
  3148                           status	equ	0xFD8
  3149                           
  3150 ;; *************** function _GroupSynthesizers *****************
  3151 ;; Defined at:
  3152 ;;		line 63 in file "MessageFunctions.c"
  3153 ;; Parameters:    Size  Location     Type
  3154 ;;  request         1    wreg     enum E12
  3155 ;;  data            2  134[BANK0 ] PTR unsigned char 
  3156 ;; Auto vars:     Size  Location     Type
  3157 ;;  request         1  136[BANK0 ] enum E12
  3158 ;; Return value:  Size  Location     Type
  3159 ;;                  1    wreg      void 
  3160 ;; Registers used:
  3161 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3162 ;; Tracked objects:
  3163 ;;		On entry : 0/0
  3164 ;;		On exit  : 0/0
  3165 ;;		Unchanged: 0/0
  3166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3167 ;;      Params:         0       2       0       0       0       0       0
  3168 ;;      Locals:         0       1       0       0       0       0       0
  3169 ;;      Temps:          0       0       0       0       0       0       0
  3170 ;;      Totals:         0       3       0       0       0       0       0
  3171 ;;Total ram usage:        3 bytes
  3172 ;; Hardware stack levels used:    1
  3173 ;; Hardware stack levels required when called:   12
  3174 ;; This function calls:
  3175 ;;		_SetSynthOper
  3176 ;;		_SynthReadData
  3177 ;;		_UpdateSynthFreq
  3178 ;; This function is called by:
  3179 ;;		_readUartMessage
  3180 ;; This function uses a non-reentrant model
  3181 ;;
  3182                           
  3183                           	psect	text8
  3184  0031CC                     __ptext8:
  3185                           	opt stack 0
  3186  0031CC                     _GroupSynthesizers:
  3187                           	opt stack 17
  3188                           
  3189                           ;incstack = 0
  3190                           ;GroupSynthesizers@request stored from wreg
  3191  0031CC  0100               	movlb	0	; () banked
  3192  0031CE  6FE8               	movwf	GroupSynthesizers@request& (0+255),b
  3193                           
  3194                           ;MessageFunctions.c: 65: switch (request)
  3195  0031D0  D028               	goto	l1309
  3196  0031D2                     
  3197                           ;MessageFunctions.c: 76: UpdateSynthFreq(SYNTH_TX, data);
  3198  0031D2  C0E6  F08A         	movff	GroupSynthesizers@data,UpdateSynthFreq@data
  3199  0031D6  C0E7  F08B         	movff	GroupSynthesizers@data+1,UpdateSynthFreq@data+1
  3200  0031DA  0E00               	movlw	0
  3201  0031DC  EC9F  F011         	call	_UpdateSynthFreq
  3202                           
  3203                           ;MessageFunctions.c: 77: break;
  3204  0031E0  0012               	return	
  3205  0031E2                     
  3206                           ;MessageFunctions.c: 80: UpdateSynthFreq(SYNTH_RX, data);
  3207  0031E2  C0E6  F08A         	movff	GroupSynthesizers@data,UpdateSynthFreq@data
  3208  0031E6  C0E7  F08B         	movff	GroupSynthesizers@data+1,UpdateSynthFreq@data+1
  3209  0031EA  0E01               	movlw	1
  3210  0031EC  EC9F  F011         	call	_UpdateSynthFreq
  3211                           
  3212                           ;MessageFunctions.c: 81: break;
  3213  0031F0  0012               	return	
  3214  0031F2                     
  3215                           ;MessageFunctions.c: 84: SetSynthOper(SYNTH_RX);
  3216  0031F2  0E01               	movlw	1
  3217  0031F4  EC6D  F019         	call	_SetSynthOper
  3218                           
  3219                           ;MessageFunctions.c: 85: break;
  3220  0031F8  0012               	return	
  3221  0031FA                     
  3222                           ;MessageFunctions.c: 88: SetSynthOper(SYNTH_TX);
  3223  0031FA  0E00               	movlw	0
  3224  0031FC  EC6D  F019         	call	_SetSynthOper
  3225                           
  3226                           ;MessageFunctions.c: 89: break;
  3227  003200  0012               	return	
  3228  003202                     
  3229                           ;MessageFunctions.c: 92: SynthReadData(SYNTH_RX, data);
  3230  003202  C0E6  F0C8         	movff	GroupSynthesizers@data,SynthReadData@data
  3231  003206  C0E7  F0C9         	movff	GroupSynthesizers@data+1,SynthReadData@data+1
  3232  00320A  0E01               	movlw	1
  3233  00320C  EC86  F006         	call	_SynthReadData
  3234                           
  3235                           ;MessageFunctions.c: 93: break;
  3236  003210  0012               	return	
  3237  003212                     
  3238                           ;MessageFunctions.c: 96: SynthReadData(SYNTH_TX, data);
  3239  003212  C0E6  F0C8         	movff	GroupSynthesizers@data,SynthReadData@data
  3240  003216  C0E7  F0C9         	movff	GroupSynthesizers@data+1,SynthReadData@data+1
  3241  00321A  0E00               	movlw	0
  3242  00321C  EC86  F006         	call	_SynthReadData
  3243                           
  3244                           ;MessageFunctions.c: 101: }
  3245                           
  3246                           ;MessageFunctions.c: 100: break;
  3247                           
  3248                           ;MessageFunctions.c: 99: default:
  3249                           
  3250                           ;MessageFunctions.c: 97: break;
  3251  003220  0012               	return	
  3252  003222                     l1309:
  3253  003222  0100               	movlb	0	; () banked
  3254  003224  51E8               	movf	GroupSynthesizers@request& (0+255),w,b
  3255                           
  3256                           ; Switch size 1, requested type "space"
  3257                           ; Number of cases is 8, Range of values is 64 to 71
  3258                           ; switch strategies available:
  3259                           ; Name         Instructions Cycles
  3260                           ; simple_byte           25    13 (average)
  3261                           ;	Chosen strategy is simple_byte
  3262  003226  0A40               	xorlw	64	; case 64
  3263  003228  B4D8               	btfsc	status,2,c
  3264  00322A  0012               	return	
  3265  00322C  0A01               	xorlw	1	; case 65
  3266  00322E  B4D8               	btfsc	status,2,c
  3267  003230  0012               	return	
  3268  003232  0A03               	xorlw	3	; case 66
  3269  003234  B4D8               	btfsc	status,2,c
  3270  003236  D7CD               	goto	l1313
  3271  003238  0A01               	xorlw	1	; case 67
  3272  00323A  B4D8               	btfsc	status,2,c
  3273  00323C  D7D2               	goto	l1314
  3274  00323E  0A07               	xorlw	7	; case 68
  3275  003240  B4D8               	btfsc	status,2,c
  3276  003242  D7D7               	goto	l1315
  3277  003244  0A01               	xorlw	1	; case 69
  3278  003246  B4D8               	btfsc	status,2,c
  3279  003248  D7D8               	goto	l1316
  3280  00324A  0A03               	xorlw	3	; case 70
  3281  00324C  B4D8               	btfsc	status,2,c
  3282  00324E  D7D9               	goto	l1317
  3283  003250  0A01               	xorlw	1	; case 71
  3284  003252  A4D8               	btfss	status,2,c
  3285  003254  0012               	return	
  3286  003256  D7DD               	goto	l1318
  3287  003258                     __end_of_GroupSynthesizers:
  3288                           	opt stack 0
  3289                           tosu	equ	0xFFF
  3290                           tosh	equ	0xFFE
  3291                           tosl	equ	0xFFD
  3292                           pclath	equ	0xFFA
  3293                           tblptru	equ	0xFF8
  3294                           tblptrh	equ	0xFF7
  3295                           tblptrl	equ	0xFF6
  3296                           tablat	equ	0xFF5
  3297                           postinc0	equ	0xFEE
  3298                           wreg	equ	0xFE8
  3299                           postdec1	equ	0xFE5
  3300                           fsr1l	equ	0xFE1
  3301                           indf2	equ	0xFDF
  3302                           postinc2	equ	0xFDE
  3303                           fsr2h	equ	0xFDA
  3304                           fsr2l	equ	0xFD9
  3305                           status	equ	0xFD8
  3306                           
  3307 ;; *************** function _UpdateSynthFreq *****************
  3308 ;; Defined at:
  3309 ;;		line 90 in file "SyntApp.c"
  3310 ;; Parameters:    Size  Location     Type
  3311 ;;  cType           1    wreg     enum E1
  3312 ;;  data            2   42[BANK0 ] PTR unsigned char 
  3313 ;; Auto vars:     Size  Location     Type
  3314 ;;  cType           1   44[BANK0 ] enum E1
  3315 ;;  retVal          8   45[BANK0 ] struct .
  3316 ;; Return value:  Size  Location     Type
  3317 ;;                  1    wreg      void 
  3318 ;; Registers used:
  3319 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3320 ;; Tracked objects:
  3321 ;;		On entry : 0/0
  3322 ;;		On exit  : 0/0
  3323 ;;		Unchanged: 0/0
  3324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3325 ;;      Params:         0       2       0       0       0       0       0
  3326 ;;      Locals:         0       9       0       0       0       0       0
  3327 ;;      Temps:          0       0       0       0       0       0       0
  3328 ;;      Totals:         0      11       0       0       0       0       0
  3329 ;;Total ram usage:       11 bytes
  3330 ;; Hardware stack levels used:    1
  3331 ;; Hardware stack levels required when called:    8
  3332 ;; This function calls:
  3333 ;;		_GetIntFromUartData
  3334 ;;		_SWSPI_send_word
  3335 ;;		_SendAckMessage
  3336 ;;		_StoreIntInEeprom
  3337 ;; This function is called by:
  3338 ;;		_GroupSynthesizers
  3339 ;; This function uses a non-reentrant model
  3340 ;;
  3341                           
  3342                           	psect	text9
  3343  00233E                     __ptext9:
  3344                           	opt stack 0
  3345  00233E                     _UpdateSynthFreq:
  3346                           	opt stack 20
  3347                           
  3348                           ;incstack = 0
  3349                           ;UpdateSynthFreq@cType stored from wreg
  3350  00233E  0100               	movlb	0	; () banked
  3351  002340  6F8C               	movwf	UpdateSynthFreq@cType& (0+255),b
  3352                           
  3353                           ;SyntApp.c: 92: INT_VAL retVal;
  3354                           ;SyntApp.c: 93: if(cntRegUpdate < 7)
  3355  002342  0E07               	movlw	7
  3356  002344  603B               	cpfslt	_cntRegUpdate,c
  3357  002346  D060               	goto	l521
  3358                           
  3359                           ;SyntApp.c: 94: {
  3360                           ;SyntApp.c: 95: retVal = GetIntFromUartData(10, data);
  3361  002348  C08A  F066         	movff	UpdateSynthFreq@data,GetIntFromUartData@data
  3362  00234C  C08B  F067         	movff	UpdateSynthFreq@data+1,GetIntFromUartData@data+1
  3363  002350  0E0A               	movlw	10
  3364  002352  EC37  F00E         	call	_GetIntFromUartData
  3365  002356  EE20  F08D         	lfsr	2,UpdateSynthFreq@retVal
  3366  00235A  0E07               	movlw	7
  3367  00235C                     u8391:
  3368  00235C  CFEB FFDB          	movff	plusw0,plusw2
  3369  002360  06E8               	decf	wreg,f,c
  3370  002362  E2FC               	bc	u8391
  3371                           
  3372                           ;SyntApp.c: 96: SWSPI_send_word(cType, retVal.num, 3);
  3373  002364  C08D  F029         	movff	UpdateSynthFreq@retVal,SWSPI_send_word@data
  3374  002368  C08E  F02A         	movff	UpdateSynthFreq@retVal+1,SWSPI_send_word@data+1
  3375  00236C  C08F  F02B         	movff	UpdateSynthFreq@retVal+2,SWSPI_send_word@data+2
  3376  002370  C090  F02C         	movff	UpdateSynthFreq@retVal+3,SWSPI_send_word@data+3
  3377  002374  0E03               	movlw	3
  3378  002376  6E2D               	movwf	SWSPI_send_word@dataSize,c
  3379  002378  0100               	movlb	0	; () banked
  3380  00237A  518C               	movf	UpdateSynthFreq@cType& (0+255),w,b
  3381  00237C  EC67  F017         	call	_SWSPI_send_word
  3382                           
  3383                           ;SyntApp.c: 97: if(cType == SYNTH_TX)
  3384  002380  0100               	movlb	0	; () banked
  3385  002382  518C               	movf	UpdateSynthFreq@cType& (0+255),w,b
  3386  002384  A4D8               	btfss	status,2,c
  3387  002386  D01D               	goto	l522
  3388                           
  3389                           ; BSR set to: 0
  3390                           ;SyntApp.c: 98: {
  3391                           ;SyntApp.c: 99: StoreIntInEeprom(retVal.num, (0) | SYNTH_ADDRES[retVal.con], 4);
  3392  002388  C08D  F021         	movff	UpdateSynthFreq@retVal,StoreIntInEeprom@data
  3393  00238C  C08E  F022         	movff	UpdateSynthFreq@retVal+1,StoreIntInEeprom@data+1
  3394  002390  C08F  F023         	movff	UpdateSynthFreq@retVal+2,StoreIntInEeprom@data+2
  3395  002394  C090  F024         	movff	UpdateSynthFreq@retVal+3,StoreIntInEeprom@data+3
  3396  002398  0E35               	movlw	low _SYNTH_ADDRES
  3397  00239A  2591               	addwf	(UpdateSynthFreq@retVal+4)& (0+255),w,b
  3398  00239C  6EF6               	movwf	tblptrl,c
  3399  00239E  0E06               	movlw	high _SYNTH_ADDRES
  3400  0023A0  2192               	addwfc	(UpdateSynthFreq@retVal+5)& (0+255),w,b
  3401  0023A2  6EF7               	movwf	tblptrh,c
  3402  0023A4                     	if	0	;There are less than 3 active tblptr bytes
  3403  0023A4                     	endif
  3404  0023A4  0008               	tblrd		*
  3405  0023A6  CFF5 F025          	movff	tablat,StoreIntInEeprom@address
  3406  0023AA  0E00               	movlw	0
  3407  0023AC  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  3408  0023AE  0E04               	movlw	4
  3409  0023B0  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  3410  0023B2  EC10  F01E         	call	_StoreIntInEeprom	;wreg free
  3411                           
  3412                           ;SyntApp.c: 100: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_REQ_ANTHER_TX_
      +                          REG);
  3413  0023B6  0E48               	movlw	72
  3414  0023B8  6E24               	movwf	SendAckMessage@inRequest,c
  3415  0023BA  0E04               	movlw	4
  3416  0023BC  ECA6  F01C         	call	_SendAckMessage
  3417                           
  3418                           ;SyntApp.c: 101: }
  3419  0023C0  D021               	goto	l524
  3420  0023C2                     l522:
  3421                           
  3422                           ;SyntApp.c: 102: else if(cType == SYNTH_RX)
  3423  0023C2  0100               	movlb	0	; () banked
  3424  0023C4  058C               	decf	UpdateSynthFreq@cType& (0+255),w,b
  3425  0023C6  A4D8               	btfss	status,2,c
  3426  0023C8  D01D               	goto	l524
  3427                           
  3428                           ; BSR set to: 0
  3429                           ;SyntApp.c: 103: {
  3430                           ;SyntApp.c: 104: StoreIntInEeprom(retVal.num, (0x20) | SYNTH_ADDRES[retVal.con], 4);
  3431  0023CA  C08D  F021         	movff	UpdateSynthFreq@retVal,StoreIntInEeprom@data
  3432  0023CE  C08E  F022         	movff	UpdateSynthFreq@retVal+1,StoreIntInEeprom@data+1
  3433  0023D2  C08F  F023         	movff	UpdateSynthFreq@retVal+2,StoreIntInEeprom@data+2
  3434  0023D6  C090  F024         	movff	UpdateSynthFreq@retVal+3,StoreIntInEeprom@data+3
  3435  0023DA  0E35               	movlw	low _SYNTH_ADDRES
  3436  0023DC  2591               	addwf	(UpdateSynthFreq@retVal+4)& (0+255),w,b
  3437  0023DE  6EF6               	movwf	tblptrl,c
  3438  0023E0  0E06               	movlw	high _SYNTH_ADDRES
  3439  0023E2  2192               	addwfc	(UpdateSynthFreq@retVal+5)& (0+255),w,b
  3440  0023E4  6EF7               	movwf	tblptrh,c
  3441  0023E6                     	if	0	;There are less than 3 active tblptr bytes
  3442  0023E6                     	endif
  3443  0023E6  0008               	tblrd		*
  3444  0023E8  50F5               	movf	tablat,w,c
  3445  0023EA  0920               	iorlw	32
  3446  0023EC  6E25               	movwf	StoreIntInEeprom@address,c
  3447  0023EE  0E00               	movlw	0
  3448  0023F0  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  3449  0023F2  0E04               	movlw	4
  3450  0023F4  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  3451  0023F6  EC10  F01E         	call	_StoreIntInEeprom	;wreg free
  3452                           
  3453                           ;SyntApp.c: 105: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_REQ_ANTHER_RX_
      +                          REG);
  3454  0023FA  0E49               	movlw	73
  3455  0023FC  6E24               	movwf	SendAckMessage@inRequest,c
  3456  0023FE  0E04               	movlw	4
  3457  002400  ECA6  F01C         	call	_SendAckMessage
  3458  002404                     l524:
  3459                           
  3460                           ;SyntApp.c: 106: }
  3461                           ;SyntApp.c: 107: cntRegUpdate ++;
  3462  002404  2A3B               	incf	_cntRegUpdate,f,c
  3463                           
  3464                           ;SyntApp.c: 108: }
  3465  002406  0012               	return	
  3466  002408                     l521:
  3467                           
  3468                           ;SyntApp.c: 110: else
  3469                           ;SyntApp.c: 111: {
  3470                           ;SyntApp.c: 112: cntRegUpdate = 0;
  3471  002408  0E00               	movlw	0
  3472  00240A  6E3B               	movwf	_cntRegUpdate,c
  3473                           
  3474                           ;SyntApp.c: 113: if(cType == SYNTH_TX)
  3475  00240C  0100               	movlb	0	; () banked
  3476  00240E  518C               	movf	UpdateSynthFreq@cType& (0+255),w,b
  3477  002410  A4D8               	btfss	status,2,c
  3478  002412  D006               	goto	l526
  3479                           
  3480                           ; BSR set to: 0
  3481                           ;SyntApp.c: 114: {
  3482                           ;SyntApp.c: 115: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_DOWN_SET);
  3483  002414  0E42               	movlw	66
  3484  002416  6E24               	movwf	SendAckMessage@inRequest,c
  3485  002418  0E04               	movlw	4
  3486  00241A  ECA6  F01C         	call	_SendAckMessage
  3487                           
  3488                           ;SyntApp.c: 116: }
  3489  00241E  0012               	return	
  3490  002420                     l526:
  3491                           
  3492                           ;SyntApp.c: 117: else if(cType == SYNTH_RX)
  3493  002420  0100               	movlb	0	; () banked
  3494  002422  058C               	decf	UpdateSynthFreq@cType& (0+255),w,b
  3495  002424  A4D8               	btfss	status,2,c
  3496  002426  0012               	return	
  3497                           
  3498                           ; BSR set to: 0
  3499                           ;SyntApp.c: 118: {
  3500                           ;SyntApp.c: 119: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_UP_SET);
  3501  002428  0E43               	movlw	67
  3502  00242A  6E24               	movwf	SendAckMessage@inRequest,c
  3503  00242C  0E04               	movlw	4
  3504  00242E  ECA6  F01C         	call	_SendAckMessage
  3505  002432  0012               	return	
  3506  002434                     __end_of_UpdateSynthFreq:
  3507                           	opt stack 0
  3508                           tosu	equ	0xFFF
  3509                           tosh	equ	0xFFE
  3510                           tosl	equ	0xFFD
  3511                           pclath	equ	0xFFA
  3512                           tblptru	equ	0xFF8
  3513                           tblptrh	equ	0xFF7
  3514                           tblptrl	equ	0xFF6
  3515                           tablat	equ	0xFF5
  3516                           postinc0	equ	0xFEE
  3517                           plusw0	equ	0xFEB
  3518                           wreg	equ	0xFE8
  3519                           postdec1	equ	0xFE5
  3520                           fsr1l	equ	0xFE1
  3521                           indf2	equ	0xFDF
  3522                           postinc2	equ	0xFDE
  3523                           plusw2	equ	0xFDB
  3524                           fsr2h	equ	0xFDA
  3525                           fsr2l	equ	0xFD9
  3526                           status	equ	0xFD8
  3527                           
  3528 ;; *************** function _SynthReadData *****************
  3529 ;; Defined at:
  3530 ;;		line 159 in file "SyntApp.c"
  3531 ;; Parameters:    Size  Location     Type
  3532 ;;  cType           1    wreg     enum E1
  3533 ;;  data            2  104[BANK0 ] PTR unsigned char 
  3534 ;; Auto vars:     Size  Location     Type
  3535 ;;  cType           1   41[BANK1 ] enum E1
  3536 ;;  data            1   22[BANK1 ] unsigned char 
  3537 ;;  TxMsg          22    0[BANK1 ] unsigned char [22]
  3538 ;;  eepromDataAr   16   25[BANK1 ] unsigned long [4]
  3539 ;;  byteNum         1   43[BANK1 ] unsigned char 
  3540 ;;  regNum          1   42[BANK1 ] unsigned char 
  3541 ;; Return value:  Size  Location     Type
  3542 ;;                  1    wreg      void 
  3543 ;; Registers used:
  3544 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3545 ;; Tracked objects:
  3546 ;;		On entry : 0/0
  3547 ;;		On exit  : 0/0
  3548 ;;		Unchanged: 0/0
  3549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3550 ;;      Params:         0       2       0       0       0       0       0
  3551 ;;      Locals:         0       0      44       0       0       0       0
  3552 ;;      Temps:          0       0       0       0       0       0       0
  3553 ;;      Totals:         0       2      44       0       0       0       0
  3554 ;;Total ram usage:       46 bytes
  3555 ;; Hardware stack levels used:    1
  3556 ;; Hardware stack levels required when called:   10
  3557 ;; This function calls:
  3558 ;;		_ReadIntFromEeprom
  3559 ;;		_WriteUartMessage
  3560 ;;		_ZeroArray
  3561 ;;		_crc8
  3562 ;;		_make8
  3563 ;; This function is called by:
  3564 ;;		_GroupSynthesizers
  3565 ;; This function uses a non-reentrant model
  3566 ;;
  3567                           
  3568                           	psect	text10
  3569  000D0C                     __ptext10:
  3570                           	opt stack 0
  3571  000D0C                     _SynthReadData:
  3572                           	opt stack 18
  3573                           
  3574                           ;incstack = 0
  3575                           ;SynthReadData@cType stored from wreg
  3576  000D0C  0101               	movlb	1	; () banked
  3577  000D0E  6FDB               	movwf	SynthReadData@cType& (0+255),b
  3578                           
  3579                           ;SyntApp.c: 161: uint32_t eepromDataArray[4];
  3580                           ;SyntApp.c: 162: ZeroArray(eepromDataArray, sizeof(eepromDataArray));
  3581  000D10  0ECB               	movlw	low SynthReadData@eepromDataArray
  3582  000D12  6E20               	movwf	ZeroArray@array,c
  3583  000D14  0E01               	movlw	high SynthReadData@eepromDataArray
  3584  000D16  6E21               	movwf	ZeroArray@array+1,c
  3585  000D18  0E00               	movlw	0
  3586  000D1A  6E23               	movwf	ZeroArray@size+1,c
  3587  000D1C  0E10               	movlw	16
  3588  000D1E  6E22               	movwf	ZeroArray@size,c
  3589  000D20  EC4B  F020         	call	_ZeroArray	;wreg free
  3590                           
  3591                           ;SyntApp.c: 163: uint8_t regNum = 0, byteNum = 0;
  3592  000D24  0E00               	movlw	0
  3593  000D26  0101               	movlb	1	; () banked
  3594  000D28  6FDC               	movwf	SynthReadData@regNum& (0+255),b
  3595                           
  3596                           ; BSR set to: 1
  3597  000D2A  0E00               	movlw	0
  3598  000D2C  6FDD               	movwf	SynthReadData@byteNum& (0+255),b
  3599                           
  3600                           ;SyntApp.c: 164: char TxMsg[5 * 4 + 1 + 1];
  3601                           ;SyntApp.c: 165: ZeroArray(TxMsg, 5 * 4 + 1 + 1);
  3602  000D2E  0EB2               	movlw	low SynthReadData@TxMsg
  3603  000D30  6E20               	movwf	ZeroArray@array,c
  3604  000D32  0E01               	movlw	high SynthReadData@TxMsg
  3605  000D34  6E21               	movwf	ZeroArray@array+1,c
  3606  000D36  0E00               	movlw	0
  3607  000D38  6E23               	movwf	ZeroArray@size+1,c
  3608  000D3A  0E16               	movlw	22
  3609  000D3C  6E22               	movwf	ZeroArray@size,c
  3610  000D3E  EC4B  F020         	call	_ZeroArray	;wreg free
  3611                           
  3612                           ;SyntApp.c: 168: TxMsg[(0)] = (0x24);
  3613  000D42  0E24               	movlw	36
  3614  000D44  0101               	movlb	1	; () banked
  3615  000D46  6FB2               	movwf	SynthReadData@TxMsg& (0+255),b
  3616                           
  3617                           ; BSR set to: 1
  3618                           ;SyntApp.c: 169: TxMsg[(1)] = SYNTH_MSG;
  3619  000D48  0E04               	movlw	4
  3620  000D4A  6FB3               	movwf	(SynthReadData@TxMsg+1)& (0+255),b
  3621                           
  3622                           ; BSR set to: 1
  3623                           ;SyntApp.c: 170: TxMsg[(3)] = 5 * 4 - (0x4);
  3624  000D4C  0E10               	movlw	16
  3625  000D4E  6FB5               	movwf	(SynthReadData@TxMsg+3)& (0+255),b
  3626                           
  3627                           ; BSR set to: 1
  3628                           ;SyntApp.c: 172: if(cType == SYNTH_TX)
  3629  000D50  51DB               	movf	SynthReadData@cType& (0+255),w,b
  3630  000D52  A4D8               	btfss	status,2,c
  3631  000D54  D04F               	goto	l542
  3632                           
  3633                           ; BSR set to: 1
  3634                           ;SyntApp.c: 173: {
  3635                           ;SyntApp.c: 174: TxMsg[(2)] = SYNTH_DOWN_READ_DATA;
  3636  000D56  0E47               	movlw	71
  3637  000D58  6FB4               	movwf	(SynthReadData@TxMsg+2)& (0+255),b
  3638                           
  3639                           ; BSR set to: 1
  3640                           ;SyntApp.c: 175: eepromDataArray[0] = ReadIntFromEeprom((0) | SYNTH_ADDRES[0], 4);
  3641  000D5A  0E00               	movlw	0
  3642  000D5C  0100               	movlb	0	; () banked
  3643  000D5E  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3644  000D60  0E04               	movlw	4
  3645  000D62  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3646  000D64  0E35               	movlw	low _SYNTH_ADDRES
  3647  000D66  6EF6               	movwf	tblptrl,c
  3648  000D68                     	if	1	;There is more than 1 active tblptr byte
  3649  000D68  0E06               	movlw	high _SYNTH_ADDRES
  3650  000D6A  6EF7               	movwf	tblptrh,c
  3651  000D6C                     	endif
  3652  000D6C                     	if	0	;There are less than 3 active tblptr bytes
  3653  000D6C                     	endif
  3654  000D6C  0008               	tblrd		*
  3655  000D6E  50F5               	movf	tablat,w,c
  3656  000D70  EC8A  F00F         	call	_ReadIntFromEeprom
  3657  000D74  C0B1  F1CB         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray
  3658  000D78  C0B2  F1CC         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+1
  3659  000D7C  C0B3  F1CD         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+2
  3660  000D80  C0B4  F1CE         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+3
  3661                           
  3662                           ;SyntApp.c: 176: eepromDataArray[1] = ReadIntFromEeprom((0) | SYNTH_ADDRES[1], 4);
  3663  000D84  0E00               	movlw	0
  3664  000D86  0100               	movlb	0	; () banked
  3665  000D88  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3666  000D8A  0E04               	movlw	4
  3667  000D8C  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3668  000D8E  0E36               	movlw	low (_SYNTH_ADDRES+1)
  3669  000D90  6EF6               	movwf	tblptrl,c
  3670  000D92  0E06               	movlw	high (_SYNTH_ADDRES+1)
  3671  000D94  6EF7               	movwf	tblptrh,c
  3672  000D96                     	if	0	;tblptru may be non-zero
  3673  000D96                     	endif
  3674  000D96                     	if	0	;tblptru may be non-zero
  3675  000D96                     	endif
  3676  000D96  0008               	tblrd		*
  3677  000D98  50F5               	movf	tablat,w,c
  3678  000D9A  EC8A  F00F         	call	_ReadIntFromEeprom
  3679  000D9E  C0B1  F1CF         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+4
  3680  000DA2  C0B2  F1D0         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+5
  3681  000DA6  C0B3  F1D1         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+6
  3682  000DAA  C0B4  F1D2         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+7
  3683                           
  3684                           ;SyntApp.c: 177: eepromDataArray[2] = ReadIntFromEeprom((0) | SYNTH_ADDRES[2], 4);
  3685  000DAE  0E00               	movlw	0
  3686  000DB0  0100               	movlb	0	; () banked
  3687  000DB2  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3688  000DB4  0E04               	movlw	4
  3689  000DB6  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3690  000DB8  0E37               	movlw	low (_SYNTH_ADDRES+2)
  3691  000DBA  6EF6               	movwf	tblptrl,c
  3692  000DBC  0E06               	movlw	high (_SYNTH_ADDRES+2)
  3693  000DBE  6EF7               	movwf	tblptrh,c
  3694  000DC0                     	if	0	;tblptru may be non-zero
  3695  000DC0                     	endif
  3696  000DC0                     	if	0	;tblptru may be non-zero
  3697  000DC0                     	endif
  3698  000DC0  0008               	tblrd		*
  3699  000DC2  50F5               	movf	tablat,w,c
  3700  000DC4  EC8A  F00F         	call	_ReadIntFromEeprom
  3701  000DC8  C0B1  F1D3         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+8
  3702  000DCC  C0B2  F1D4         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+9
  3703  000DD0  C0B3  F1D5         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+10
  3704  000DD4  C0B4  F1D6         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+11
  3705                           
  3706                           ;SyntApp.c: 178: eepromDataArray[3] = ReadIntFromEeprom((0) | SYNTH_ADDRES[4], 4);
  3707  000DD8  0E00               	movlw	0
  3708  000DDA  0100               	movlb	0	; () banked
  3709  000DDC  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3710  000DDE  0E04               	movlw	4
  3711  000DE0  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3712  000DE2  0E39               	movlw	low (_SYNTH_ADDRES+4)
  3713  000DE4  6EF6               	movwf	tblptrl,c
  3714  000DE6  0E06               	movlw	high (_SYNTH_ADDRES+4)
  3715  000DE8  6EF7               	movwf	tblptrh,c
  3716  000DEA                     	if	0	;tblptru may be non-zero
  3717  000DEA                     	endif
  3718  000DEA                     	if	0	;tblptru may be non-zero
  3719  000DEA                     	endif
  3720  000DEA  0008               	tblrd		*
  3721  000DEC  50F5               	movf	tablat,w,c
  3722  000DEE  EC8A  F00F         	call	_ReadIntFromEeprom
  3723  000DF2  D056               	goto	L2
  3724  000DF4                     l542:
  3725                           
  3726                           ;SyntApp.c: 180: else if (cType == SYNTH_RX)
  3727  000DF4  0101               	movlb	1	; () banked
  3728  000DF6  05DB               	decf	SynthReadData@cType& (0+255),w,b
  3729  000DF8  A4D8               	btfss	status,2,c
  3730  000DFA  D05A               	goto	l544
  3731                           
  3732                           ; BSR set to: 1
  3733                           ;SyntApp.c: 181: {
  3734                           ;SyntApp.c: 182: TxMsg[(2)] = SYNTH_UP_READ_DATA;
  3735  000DFC  0E46               	movlw	70
  3736  000DFE  6FB4               	movwf	(SynthReadData@TxMsg+2)& (0+255),b
  3737                           
  3738                           ; BSR set to: 1
  3739                           ;SyntApp.c: 183: eepromDataArray[0] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[0], 4);
  3740  000E00  0E00               	movlw	0
  3741  000E02  0100               	movlb	0	; () banked
  3742  000E04  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3743  000E06  0E04               	movlw	4
  3744  000E08  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3745  000E0A  0E35               	movlw	low _SYNTH_ADDRES
  3746  000E0C  6EF6               	movwf	tblptrl,c
  3747  000E0E                     	if	1	;There is more than 1 active tblptr byte
  3748  000E0E  0E06               	movlw	high _SYNTH_ADDRES
  3749  000E10  6EF7               	movwf	tblptrh,c
  3750  000E12                     	endif
  3751  000E12                     	if	0	;There are less than 3 active tblptr bytes
  3752  000E12                     	endif
  3753  000E12  0008               	tblrd		*
  3754  000E14  50F5               	movf	tablat,w,c
  3755  000E16  0920               	iorlw	32
  3756  000E18  EC8A  F00F         	call	_ReadIntFromEeprom
  3757  000E1C  C0B1  F1CB         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray
  3758  000E20  C0B2  F1CC         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+1
  3759  000E24  C0B3  F1CD         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+2
  3760  000E28  C0B4  F1CE         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+3
  3761                           
  3762                           ;SyntApp.c: 184: eepromDataArray[1] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[1], 4);
  3763  000E2C  0E00               	movlw	0
  3764  000E2E  0100               	movlb	0	; () banked
  3765  000E30  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3766  000E32  0E04               	movlw	4
  3767  000E34  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3768  000E36  0E36               	movlw	low (_SYNTH_ADDRES+1)
  3769  000E38  6EF6               	movwf	tblptrl,c
  3770  000E3A  0E06               	movlw	high (_SYNTH_ADDRES+1)
  3771  000E3C  6EF7               	movwf	tblptrh,c
  3772  000E3E                     	if	0	;tblptru may be non-zero
  3773  000E3E                     	endif
  3774  000E3E                     	if	0	;tblptru may be non-zero
  3775  000E3E                     	endif
  3776  000E3E  0008               	tblrd		*
  3777  000E40  50F5               	movf	tablat,w,c
  3778  000E42  0920               	iorlw	32
  3779  000E44  EC8A  F00F         	call	_ReadIntFromEeprom
  3780  000E48  C0B1  F1CF         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+4
  3781  000E4C  C0B2  F1D0         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+5
  3782  000E50  C0B3  F1D1         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+6
  3783  000E54  C0B4  F1D2         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+7
  3784                           
  3785                           ;SyntApp.c: 185: eepromDataArray[2] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[2], 4);
  3786  000E58  0E00               	movlw	0
  3787  000E5A  0100               	movlb	0	; () banked
  3788  000E5C  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3789  000E5E  0E04               	movlw	4
  3790  000E60  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3791  000E62  0E37               	movlw	low (_SYNTH_ADDRES+2)
  3792  000E64  6EF6               	movwf	tblptrl,c
  3793  000E66  0E06               	movlw	high (_SYNTH_ADDRES+2)
  3794  000E68  6EF7               	movwf	tblptrh,c
  3795  000E6A                     	if	0	;tblptru may be non-zero
  3796  000E6A                     	endif
  3797  000E6A                     	if	0	;tblptru may be non-zero
  3798  000E6A                     	endif
  3799  000E6A  0008               	tblrd		*
  3800  000E6C  50F5               	movf	tablat,w,c
  3801  000E6E  0920               	iorlw	32
  3802  000E70  EC8A  F00F         	call	_ReadIntFromEeprom
  3803  000E74  C0B1  F1D3         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+8
  3804  000E78  C0B2  F1D4         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+9
  3805  000E7C  C0B3  F1D5         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+10
  3806  000E80  C0B4  F1D6         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+11
  3807                           
  3808                           ;SyntApp.c: 186: eepromDataArray[3] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[4], 4);
  3809  000E84  0E00               	movlw	0
  3810  000E86  0100               	movlb	0	; () banked
  3811  000E88  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3812  000E8A  0E04               	movlw	4
  3813  000E8C  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3814  000E8E  0E39               	movlw	low (_SYNTH_ADDRES+4)
  3815  000E90  6EF6               	movwf	tblptrl,c
  3816  000E92  0E06               	movlw	high (_SYNTH_ADDRES+4)
  3817  000E94  6EF7               	movwf	tblptrh,c
  3818  000E96                     	if	0	;tblptru may be non-zero
  3819  000E96                     	endif
  3820  000E96                     	if	0	;tblptru may be non-zero
  3821  000E96                     	endif
  3822  000E96  0008               	tblrd		*
  3823  000E98  50F5               	movf	tablat,w,c
  3824  000E9A  0920               	iorlw	32
  3825  000E9C  EC8A  F00F         	call	_ReadIntFromEeprom
  3826  000EA0                     L2:
  3827  000EA0  C0B1  F1D7         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+12
  3828  000EA4  C0B2  F1D8         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+13
  3829  000EA8  C0B3  F1D9         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+14
  3830  000EAC  C0B4  F1DA         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+15
  3831  000EB0                     l544:
  3832                           
  3833                           ;SyntApp.c: 187: }
  3834                           ;SyntApp.c: 189: for(regNum = 0; regNum < 4; regNum++)
  3835  000EB0  0E00               	movlw	0
  3836  000EB2  0101               	movlb	1	; () banked
  3837  000EB4  6FDC               	movwf	SynthReadData@regNum& (0+255),b
  3838  000EB6                     l8392:
  3839                           
  3840                           ; BSR set to: 1
  3841  000EB6  0E03               	movlw	3
  3842  000EB8  65DC               	cpfsgt	SynthReadData@regNum& (0+255),b
  3843  000EBA  D001               	goto	l545
  3844  000EBC  D032               	goto	u8570
  3845  000EBE                     l545:
  3846                           
  3847                           ; BSR set to: 1
  3848                           ;SyntApp.c: 190: {
  3849                           ;SyntApp.c: 191: for(byteNum = 0; byteNum < (5); byteNum++)
  3850                           
  3851                           ; BSR set to: 1
  3852  000EBE  0E00               	movlw	0
  3853  000EC0  6FDD               	movwf	SynthReadData@byteNum& (0+255),b
  3854  000EC2                     l8398:
  3855                           
  3856                           ; BSR set to: 1
  3857  000EC2  0E04               	movlw	4
  3858  000EC4  65DD               	cpfsgt	SynthReadData@byteNum& (0+255),b
  3859  000EC6  D001               	goto	l547
  3860  000EC8  D02A               	goto	u8560
  3861  000ECA                     l547:
  3862                           
  3863                           ; BSR set to: 1
  3864                           ;SyntApp.c: 192: {
  3865                           ;SyntApp.c: 193: uint8_t data = make8(eepromDataArray[regNum], byteNum);
  3866                           
  3867                           ; BSR set to: 1
  3868  000ECA  51DC               	movf	SynthReadData@regNum& (0+255),w,b
  3869  000ECC  0D04               	mullw	4
  3870  000ECE  0ECB               	movlw	low SynthReadData@eepromDataArray
  3871  000ED0  24F3               	addwf	prodl,w,c
  3872  000ED2  6ED9               	movwf	fsr2l,c
  3873  000ED4  0E01               	movlw	high SynthReadData@eepromDataArray
  3874  000ED6  20F4               	addwfc	prodh,w,c
  3875  000ED8  6EDA               	movwf	fsr2h,c
  3876  000EDA  CFDE F018          	movff	postinc2,make8@data
  3877  000EDE  CFDE F019          	movff	postinc2,make8@data+1
  3878  000EE2  CFDE F01A          	movff	postinc2,make8@data+2
  3879  000EE6  CFDE F01B          	movff	postinc2,make8@data+3
  3880  000EEA  C1DD  F01C         	movff	SynthReadData@byteNum,make8@dataLocation
  3881  000EEE  EC48  F01B         	call	_make8	;wreg free
  3882  000EF2  0101               	movlb	1	; () banked
  3883  000EF4  6FC8               	movwf	SynthReadData@data_980& (0+255),b
  3884                           
  3885                           ; BSR set to: 1
  3886                           ;SyntApp.c: 194: TxMsg[(0x4) + (4)*regNum + byteNum] = data;
  3887  000EF6  51DC               	movf	SynthReadData@regNum& (0+255),w,b
  3888  000EF8  0D04               	mullw	4
  3889  000EFA  51DD               	movf	SynthReadData@byteNum& (0+255),w,b
  3890  000EFC  26F3               	addwf	prodl,f,c
  3891  000EFE  0E00               	movlw	0
  3892  000F00  22F4               	addwfc	prodh,f,c
  3893  000F02  0E04               	movlw	4
  3894  000F04  26F3               	addwf	prodl,f,c
  3895  000F06  0E00               	movlw	0
  3896  000F08  22F4               	addwfc	prodh,f,c
  3897  000F0A  0EB2               	movlw	low SynthReadData@TxMsg
  3898  000F0C  24F3               	addwf	prodl,w,c
  3899  000F0E  6ED9               	movwf	fsr2l,c
  3900  000F10  0E01               	movlw	high SynthReadData@TxMsg
  3901  000F12  20F4               	addwfc	prodh,w,c
  3902  000F14  6EDA               	movwf	fsr2h,c
  3903  000F16  C1C8  FFDF         	movff	SynthReadData@data_980,indf2
  3904                           
  3905                           ; BSR set to: 1
  3906  000F1A  2BDD               	incf	SynthReadData@byteNum& (0+255),f,b
  3907  000F1C  D7D2               	goto	l8398
  3908  000F1E                     u8560:
  3909                           
  3910                           ; BSR set to: 1
  3911                           
  3912                           ; BSR set to: 1
  3913  000F1E  2BDC               	incf	SynthReadData@regNum& (0+255),f,b
  3914  000F20  D7CA               	goto	l8392
  3915  000F22                     u8570:
  3916                           
  3917                           ; BSR set to: 1
  3918                           ;SyntApp.c: 195: }
  3919                           ;SyntApp.c: 196: }
  3920                           ;SyntApp.c: 198: TxMsg[5 * 4] = cType == SYNTH_TX ? SynthTxOper : SynthRxOper;
  3921                           
  3922                           ; BSR set to: 1
  3923  000F22  51DB               	movf	SynthReadData@cType& (0+255),w,b
  3924  000F24  B4D8               	btfsc	status,2,c
  3925  000F26  D003               	goto	l550
  3926                           
  3927                           ; BSR set to: 1
  3928  000F28  C043  F1C9         	movff	_SynthRxOper,_SynthReadData$981
  3929  000F2C  D002               	goto	L1
  3930  000F2E                     l550:
  3931                           
  3932                           ; BSR set to: 1
  3933  000F2E  C044  F1C9         	movff	_SynthTxOper,_SynthReadData$981
  3934  000F32                     L1:
  3935  000F32  6BCA               	clrf	(_SynthReadData$981+1)& (0+255),b
  3936                           
  3937                           ; BSR set to: 1
  3938  000F34  C1C9  F1C6         	movff	_SynthReadData$981,SynthReadData@TxMsg+20
  3939                           
  3940                           ; BSR set to: 1
  3941                           ;SyntApp.c: 199: TxMsg[5 * 4 + 1] = crc8(TxMsg, 5 * 4 + 1);
  3942  000F38  0EB2               	movlw	low SynthReadData@TxMsg
  3943  000F3A  6E18               	movwf	crc8@dataArray,c
  3944  000F3C  0E01               	movlw	high SynthReadData@TxMsg
  3945  000F3E  6E19               	movwf	crc8@dataArray+1,c
  3946  000F40  0E00               	movlw	0
  3947  000F42  6E1B               	movwf	crc8@dataSize+1,c
  3948  000F44  0E15               	movlw	21
  3949  000F46  6E1A               	movwf	crc8@dataSize,c
  3950  000F48  ECCF  F01C         	call	_crc8	;wreg free
  3951  000F4C  0101               	movlb	1	; () banked
  3952  000F4E  6FC7               	movwf	(SynthReadData@TxMsg+21)& (0+255),b
  3953                           
  3954                           ; BSR set to: 1
  3955                           ;SyntApp.c: 200: WriteUartMessage(TxMsg, 5 * 4 + 1 + 1);
  3956  000F50  0EB2               	movlw	low SynthReadData@TxMsg
  3957  000F52  6E19               	movwf	WriteUartMessage@dataBuf,c
  3958  000F54  0E01               	movlw	high SynthReadData@TxMsg
  3959  000F56  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  3960  000F58  0E00               	movlw	0
  3961  000F5A  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  3962  000F5C  0E16               	movlw	22
  3963  000F5E  6E1B               	movwf	WriteUartMessage@dataSize,c
  3964  000F60  EC63  F01E         	call	_WriteUartMessage	;wreg free
  3965  000F64  0012               	return		;funcret
  3966  000F66                     __end_of_SynthReadData:
  3967                           	opt stack 0
  3968                           tosu	equ	0xFFF
  3969                           tosh	equ	0xFFE
  3970                           tosl	equ	0xFFD
  3971                           pclath	equ	0xFFA
  3972                           tblptru	equ	0xFF8
  3973                           tblptrh	equ	0xFF7
  3974                           tblptrl	equ	0xFF6
  3975                           tablat	equ	0xFF5
  3976                           prodh	equ	0xFF4
  3977                           prodl	equ	0xFF3
  3978                           postinc0	equ	0xFEE
  3979                           plusw0	equ	0xFEB
  3980                           wreg	equ	0xFE8
  3981                           postdec1	equ	0xFE5
  3982                           fsr1l	equ	0xFE1
  3983                           indf2	equ	0xFDF
  3984                           postinc2	equ	0xFDE
  3985                           plusw2	equ	0xFDB
  3986                           fsr2h	equ	0xFDA
  3987                           fsr2l	equ	0xFD9
  3988                           status	equ	0xFD8
  3989                           
  3990 ;; *************** function _SetSynthOper *****************
  3991 ;; Defined at:
  3992 ;;		line 128 in file "SyntApp.c"
  3993 ;; Parameters:    Size  Location     Type
  3994 ;;  cType           1    wreg     enum E1
  3995 ;; Auto vars:     Size  Location     Type
  3996 ;;  cType           1  111[BANK0 ] enum E1
  3997 ;; Return value:  Size  Location     Type
  3998 ;;                  1    wreg      void 
  3999 ;; Registers used:
  4000 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4001 ;; Tracked objects:
  4002 ;;		On entry : 0/0
  4003 ;;		On exit  : 0/0
  4004 ;;		Unchanged: 0/0
  4005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4006 ;;      Params:         0       0       0       0       0       0       0
  4007 ;;      Locals:         0       1       0       0       0       0       0
  4008 ;;      Temps:          0       0       0       0       0       0       0
  4009 ;;      Totals:         0       1       0       0       0       0       0
  4010 ;;Total ram usage:        1 bytes
  4011 ;; Hardware stack levels used:    1
  4012 ;; Hardware stack levels required when called:   11
  4013 ;; This function calls:
  4014 ;;		_InitSynth
  4015 ;;		_SendAckMessage
  4016 ;;		_SwSpi_Set_CE_Pin
  4017 ;; This function is called by:
  4018 ;;		_GroupSynthesizers
  4019 ;; This function uses a non-reentrant model
  4020 ;;
  4021                           
  4022                           	psect	text11
  4023  0032DA                     __ptext11:
  4024                           	opt stack 0
  4025  0032DA                     _SetSynthOper:
  4026                           	opt stack 17
  4027                           
  4028                           ;incstack = 0
  4029                           ;SetSynthOper@cType stored from wreg
  4030  0032DA  0100               	movlb	0	; () banked
  4031  0032DC  6FCF               	movwf	SetSynthOper@cType& (0+255),b
  4032                           
  4033                           ;SyntApp.c: 130: if(cType == SYNTH_TX)
  4034  0032DE  0100               	movlb	0	; () banked
  4035  0032E0  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4036  0032E2  A4D8               	btfss	status,2,c
  4037  0032E4  D01A               	goto	l532
  4038                           
  4039                           ; BSR set to: 0
  4040                           ;SyntApp.c: 131: {
  4041                           ;SyntApp.c: 132: SynthTxOper = !SynthTxOper;
  4042  0032E6  5044               	movf	_SynthTxOper,w,c
  4043  0032E8  A4D8               	btfss	status,2,c
  4044  0032EA  D002               	goto	u8450
  4045  0032EC  0E01               	movlw	1
  4046  0032EE  D001               	goto	u8460
  4047  0032F0                     u8450:
  4048  0032F0  0E00               	movlw	0
  4049  0032F2                     u8460:
  4050  0032F2  6E44               	movwf	_SynthTxOper,c
  4051                           
  4052                           ;SyntApp.c: 133: if(SynthTxOper)
  4053  0032F4  5044               	movf	_SynthTxOper,w,c
  4054  0032F6  B4D8               	btfsc	status,2,c
  4055  0032F8  D004               	goto	l533
  4056                           
  4057                           ; BSR set to: 0
  4058                           ;SyntApp.c: 134: {
  4059                           ;SyntApp.c: 135: InitSynth(cType);
  4060  0032FA  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4061  0032FC  EC4B  F005         	call	_InitSynth
  4062                           
  4063                           ;SyntApp.c: 136: }
  4064  003300  D006               	goto	l534
  4065  003302                     l533:
  4066                           
  4067                           ;SyntApp.c: 137: else
  4068                           ;SyntApp.c: 138: {
  4069                           ;SyntApp.c: 139: SwSpi_Set_CE_Pin(cType, 0);
  4070  003302  0E00               	movlw	0
  4071  003304  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  4072  003306  0100               	movlb	0	; () banked
  4073  003308  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4074  00330A  EC9B  F01D         	call	_SwSpi_Set_CE_Pin
  4075  00330E                     l534:
  4076                           
  4077                           ;SyntApp.c: 140: }
  4078                           ;SyntApp.c: 141: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_DOWN_OPER);
  4079  00330E  0E45               	movlw	69
  4080  003310  6E24               	movwf	SendAckMessage@inRequest,c
  4081  003312  0E04               	movlw	4
  4082  003314  ECA6  F01C         	call	_SendAckMessage
  4083                           
  4084                           ;SyntApp.c: 142: }
  4085  003318  0012               	return	
  4086  00331A                     l532:
  4087                           
  4088                           ;SyntApp.c: 143: else if (cType == SYNTH_RX)
  4089  00331A  0100               	movlb	0	; () banked
  4090  00331C  05CF               	decf	SetSynthOper@cType& (0+255),w,b
  4091  00331E  A4D8               	btfss	status,2,c
  4092  003320  0012               	return	
  4093                           
  4094                           ; BSR set to: 0
  4095                           ;SyntApp.c: 144: {
  4096                           ;SyntApp.c: 145: SynthRxOper = !SynthRxOper;
  4097  003322  5043               	movf	_SynthRxOper,w,c
  4098  003324  A4D8               	btfss	status,2,c
  4099  003326  D002               	goto	u8490
  4100  003328  0E01               	movlw	1
  4101  00332A  D001               	goto	u8500
  4102  00332C                     u8490:
  4103  00332C  0E00               	movlw	0
  4104  00332E                     u8500:
  4105  00332E  6E43               	movwf	_SynthRxOper,c
  4106                           
  4107                           ;SyntApp.c: 146: if(SynthRxOper)
  4108  003330  5043               	movf	_SynthRxOper,w,c
  4109  003332  B4D8               	btfsc	status,2,c
  4110  003334  D004               	goto	l537
  4111                           
  4112                           ; BSR set to: 0
  4113                           ;SyntApp.c: 147: {
  4114                           ;SyntApp.c: 148: InitSynth(cType);
  4115  003336  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4116  003338  EC4B  F005         	call	_InitSynth
  4117                           
  4118                           ;SyntApp.c: 149: }
  4119  00333C  D006               	goto	l538
  4120  00333E                     l537:
  4121                           
  4122                           ;SyntApp.c: 150: else
  4123                           ;SyntApp.c: 151: {
  4124                           ;SyntApp.c: 152: SwSpi_Set_CE_Pin(cType, 0);
  4125  00333E  0E00               	movlw	0
  4126  003340  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  4127  003342  0100               	movlb	0	; () banked
  4128  003344  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4129  003346  EC9B  F01D         	call	_SwSpi_Set_CE_Pin
  4130  00334A                     l538:
  4131                           
  4132                           ;SyntApp.c: 153: }
  4133                           ;SyntApp.c: 154: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_UP_OPER);
  4134  00334A  0E44               	movlw	68
  4135  00334C  6E24               	movwf	SendAckMessage@inRequest,c
  4136  00334E  0E04               	movlw	4
  4137  003350  ECA6  F01C         	call	_SendAckMessage
  4138  003354  0012               	return	
  4139  003356                     __end_of_SetSynthOper:
  4140                           	opt stack 0
  4141                           tosu	equ	0xFFF
  4142                           tosh	equ	0xFFE
  4143                           tosl	equ	0xFFD
  4144                           pclath	equ	0xFFA
  4145                           tblptru	equ	0xFF8
  4146                           tblptrh	equ	0xFF7
  4147                           tblptrl	equ	0xFF6
  4148                           tablat	equ	0xFF5
  4149                           prodh	equ	0xFF4
  4150                           prodl	equ	0xFF3
  4151                           postinc0	equ	0xFEE
  4152                           plusw0	equ	0xFEB
  4153                           wreg	equ	0xFE8
  4154                           postdec1	equ	0xFE5
  4155                           fsr1l	equ	0xFE1
  4156                           indf2	equ	0xFDF
  4157                           postinc2	equ	0xFDE
  4158                           plusw2	equ	0xFDB
  4159                           fsr2h	equ	0xFDA
  4160                           fsr2l	equ	0xFD9
  4161                           status	equ	0xFD8
  4162                           
  4163 ;; *************** function _GetMcuRunTime *****************
  4164 ;; Defined at:
  4165 ;;		line 68 in file "SystemStatus.c"
  4166 ;; Parameters:    Size  Location     Type
  4167 ;;		None
  4168 ;; Auto vars:     Size  Location     Type
  4169 ;;  idx             2   13[BANK0 ] int 
  4170 ;;  TxMsg           9    0[BANK0 ] unsigned char [9]
  4171 ;;  tempRunTime     4    9[BANK0 ] unsigned long 
  4172 ;; Return value:  Size  Location     Type
  4173 ;;                  1    wreg      void 
  4174 ;; Registers used:
  4175 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4176 ;; Tracked objects:
  4177 ;;		On entry : 0/0
  4178 ;;		On exit  : 0/0
  4179 ;;		Unchanged: 0/0
  4180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4181 ;;      Params:         0       0       0       0       0       0       0
  4182 ;;      Locals:         0      15       0       0       0       0       0
  4183 ;;      Temps:          2       0       0       0       0       0       0
  4184 ;;      Totals:         2      15       0       0       0       0       0
  4185 ;;Total ram usage:       17 bytes
  4186 ;; Hardware stack levels used:    1
  4187 ;; Hardware stack levels required when called:    6
  4188 ;; This function calls:
  4189 ;;		_WriteUartMessage
  4190 ;;		___lldiv
  4191 ;;		___llmod
  4192 ;;		_crc8
  4193 ;; This function is called by:
  4194 ;;		_GroupStatusAndVersion
  4195 ;; This function uses a non-reentrant model
  4196 ;;
  4197                           
  4198                           	psect	text12
  4199  002612                     __ptext12:
  4200                           	opt stack 0
  4201  002612                     _GetMcuRunTime:
  4202                           	opt stack 22
  4203                           
  4204                           ;SystemStatus.c: 71: char TxMsg[(0x4) + (0x4) + 1];
  4205                           ;SystemStatus.c: 74: TxMsg[(0)] = (0x24);
  4206                           
  4207                           ;incstack = 0
  4208  002612  0E24               	movlw	36
  4209  002614  0100               	movlb	0	; () banked
  4210  002616  6F60               	movwf	GetMcuRunTime@TxMsg& (0+255),b
  4211                           
  4212                           ;SystemStatus.c: 75: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  4213  002618  0E02               	movlw	2
  4214  00261A  6F61               	movwf	(GetMcuRunTime@TxMsg+1)& (0+255),b
  4215                           
  4216                           ;SystemStatus.c: 76: TxMsg[(2)] = STATUS_MCU_RUN_TIME;
  4217  00261C  0E21               	movlw	33
  4218  00261E  6F62               	movwf	(GetMcuRunTime@TxMsg+2)& (0+255),b
  4219                           
  4220                           ;SystemStatus.c: 77: TxMsg[(3)] = (0x4);
  4221  002620  0E04               	movlw	4
  4222  002622  6F63               	movwf	(GetMcuRunTime@TxMsg+3)& (0+255),b
  4223                           
  4224                           ; BSR set to: 0
  4225                           ;SystemStatus.c: 79: uint32_t tempRunTime = mcuRunTimeIn5SecTicks;
  4226  002624  C128  F069         	movff	_mcuRunTimeIn5SecTicks,GetMcuRunTime@tempRunTime
  4227  002628  C129  F06A         	movff	_mcuRunTimeIn5SecTicks+1,GetMcuRunTime@tempRunTime+1
  4228  00262C  C12A  F06B         	movff	_mcuRunTimeIn5SecTicks+2,GetMcuRunTime@tempRunTime+2
  4229  002630  C12B  F06C         	movff	_mcuRunTimeIn5SecTicks+3,GetMcuRunTime@tempRunTime+3
  4230                           
  4231                           ;SystemStatus.c: 82: for(int idx = 0; idx < (0x4); idx++)
  4232  002634  0E00               	movlw	0
  4233  002636  6F6E               	movwf	(GetMcuRunTime@idx+1)& (0+255),b
  4234  002638  0E00               	movlw	0
  4235  00263A  6F6D               	movwf	GetMcuRunTime@idx& (0+255),b
  4236  00263C                     l8480:
  4237                           
  4238                           ; BSR set to: 0
  4239  00263C  BF6E               	btfsc	(GetMcuRunTime@idx+1)& (0+255),7,b
  4240  00263E  D006               	goto	l1514
  4241  002640  516E               	movf	(GetMcuRunTime@idx+1)& (0+255),w,b
  4242  002642  E142               	bnz	l8492
  4243  002644  0E04               	movlw	4
  4244  002646  5D6D               	subwf	GetMcuRunTime@idx& (0+255),w,b
  4245  002648  B0D8               	btfsc	status,0,c
  4246  00264A  D03E               	goto	u8620
  4247  00264C                     l1514:
  4248                           
  4249                           ; BSR set to: 0
  4250                           ;SystemStatus.c: 83: {
  4251                           ;SystemStatus.c: 84: TxMsg[(0x4) + idx] = tempRunTime % 10;
  4252                           
  4253                           ; BSR set to: 0
  4254  00264C  0E04               	movlw	4
  4255  00264E  256D               	addwf	GetMcuRunTime@idx& (0+255),w,b
  4256  002650  6E25               	movwf	??_GetMcuRunTime& (0+255),c
  4257  002652  0E00               	movlw	0
  4258  002654  216E               	addwfc	(GetMcuRunTime@idx+1)& (0+255),w,b
  4259  002656  6E26               	movwf	(??_GetMcuRunTime+1)& (0+255),c
  4260  002658  0E60               	movlw	low GetMcuRunTime@TxMsg
  4261  00265A  2425               	addwf	??_GetMcuRunTime,w,c
  4262  00265C  6ED9               	movwf	fsr2l,c
  4263  00265E  0E00               	movlw	high GetMcuRunTime@TxMsg
  4264  002660  2026               	addwfc	??_GetMcuRunTime+1,w,c
  4265  002662  6EDA               	movwf	fsr2h,c
  4266  002664  C069  F018         	movff	GetMcuRunTime@tempRunTime,___llmod@dividend
  4267  002668  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___llmod@dividend+1
  4268  00266C  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___llmod@dividend+2
  4269  002670  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___llmod@dividend+3
  4270  002674  0E0A               	movlw	10
  4271  002676  6E1C               	movwf	___llmod@divisor,c
  4272  002678  0E00               	movlw	0
  4273  00267A  6E1D               	movwf	___llmod@divisor+1,c
  4274  00267C  0E00               	movlw	0
  4275  00267E  6E1E               	movwf	___llmod@divisor+2,c
  4276  002680  0E00               	movlw	0
  4277  002682  6E1F               	movwf	___llmod@divisor+3,c
  4278  002684  EC85  F01A         	call	___llmod	;wreg free
  4279  002688  5018               	movf	?___llmod,w,c
  4280  00268A  6EDF               	movwf	indf2,c
  4281                           
  4282                           ;SystemStatus.c: 85: tempRunTime /= 10;
  4283  00268C  C069  F018         	movff	GetMcuRunTime@tempRunTime,___lldiv@dividend
  4284  002690  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___lldiv@dividend+1
  4285  002694  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___lldiv@dividend+2
  4286  002698  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___lldiv@dividend+3
  4287  00269C  0E0A               	movlw	10
  4288  00269E  6E1C               	movwf	___lldiv@divisor,c
  4289  0026A0  0E00               	movlw	0
  4290  0026A2  6E1D               	movwf	___lldiv@divisor+1,c
  4291  0026A4  0E00               	movlw	0
  4292  0026A6  6E1E               	movwf	___lldiv@divisor+2,c
  4293  0026A8  0E00               	movlw	0
  4294  0026AA  6E1F               	movwf	___lldiv@divisor+3,c
  4295  0026AC  EC2C  F019         	call	___lldiv	;wreg free
  4296  0026B0  C018  F069         	movff	?___lldiv,GetMcuRunTime@tempRunTime
  4297  0026B4  C019  F06A         	movff	?___lldiv+1,GetMcuRunTime@tempRunTime+1
  4298  0026B8  C01A  F06B         	movff	?___lldiv+2,GetMcuRunTime@tempRunTime+2
  4299  0026BC  C01B  F06C         	movff	?___lldiv+3,GetMcuRunTime@tempRunTime+3
  4300  0026C0  0100               	movlb	0	; () banked
  4301  0026C2  4B6D               	infsnz	GetMcuRunTime@idx& (0+255),f,b
  4302  0026C4  2B6E               	incf	(GetMcuRunTime@idx+1)& (0+255),f,b
  4303  0026C6  D7BA               	goto	l8480
  4304  0026C8                     u8620:
  4305  0026C8                     l8492:
  4306                           
  4307                           ; BSR set to: 0
  4308                           ;SystemStatus.c: 86: }
  4309                           ;SystemStatus.c: 88: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  4310  0026C8  0E60               	movlw	low GetMcuRunTime@TxMsg
  4311  0026CA  6E18               	movwf	crc8@dataArray,c
  4312  0026CC  0E00               	movlw	high GetMcuRunTime@TxMsg
  4313  0026CE  6E19               	movwf	crc8@dataArray+1,c
  4314  0026D0  0E00               	movlw	0
  4315  0026D2  6E1B               	movwf	crc8@dataSize+1,c
  4316  0026D4  0E08               	movlw	8
  4317  0026D6  6E1A               	movwf	crc8@dataSize,c
  4318  0026D8  ECCF  F01C         	call	_crc8	;wreg free
  4319  0026DC  0100               	movlb	0	; () banked
  4320  0026DE  6F68               	movwf	(GetMcuRunTime@TxMsg+8)& (0+255),b
  4321                           
  4322                           ; BSR set to: 0
  4323                           ;SystemStatus.c: 90: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  4324  0026E0  0E60               	movlw	low GetMcuRunTime@TxMsg
  4325  0026E2  6E19               	movwf	WriteUartMessage@dataBuf,c
  4326  0026E4  0E00               	movlw	high GetMcuRunTime@TxMsg
  4327  0026E6  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  4328  0026E8  0E00               	movlw	0
  4329  0026EA  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  4330  0026EC  0E09               	movlw	9
  4331  0026EE  6E1B               	movwf	WriteUartMessage@dataSize,c
  4332  0026F0  EC63  F01E         	call	_WriteUartMessage	;wreg free
  4333  0026F4  0012               	return		;funcret
  4334  0026F6                     __end_of_GetMcuRunTime:
  4335                           	opt stack 0
  4336                           tosu	equ	0xFFF
  4337                           tosh	equ	0xFFE
  4338                           tosl	equ	0xFFD
  4339                           pclath	equ	0xFFA
  4340                           tblptru	equ	0xFF8
  4341                           tblptrh	equ	0xFF7
  4342                           tblptrl	equ	0xFF6
  4343                           tablat	equ	0xFF5
  4344                           prodh	equ	0xFF4
  4345                           prodl	equ	0xFF3
  4346                           postinc0	equ	0xFEE
  4347                           plusw0	equ	0xFEB
  4348                           wreg	equ	0xFE8
  4349                           postdec1	equ	0xFE5
  4350                           fsr1l	equ	0xFE1
  4351                           indf2	equ	0xFDF
  4352                           postinc2	equ	0xFDE
  4353                           plusw2	equ	0xFDB
  4354                           fsr2h	equ	0xFDA
  4355                           fsr2l	equ	0xFD9
  4356                           status	equ	0xFD8
  4357                           
  4358 ;; *************** function ___lldiv *****************
  4359 ;; Defined at:
  4360 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4361 ;; Parameters:    Size  Location     Type
  4362 ;;  dividend        4   23[COMRAM] unsigned long 
  4363 ;;  divisor         4   27[COMRAM] unsigned long 
  4364 ;; Auto vars:     Size  Location     Type
  4365 ;;  quotient        4   31[COMRAM] unsigned long 
  4366 ;;  counter         1   35[COMRAM] unsigned char 
  4367 ;; Return value:  Size  Location     Type
  4368 ;;                  4   23[COMRAM] unsigned long 
  4369 ;; Registers used:
  4370 ;;		wreg, status,2, status,0
  4371 ;; Tracked objects:
  4372 ;;		On entry : 0/0
  4373 ;;		On exit  : 0/0
  4374 ;;		Unchanged: 0/0
  4375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4376 ;;      Params:         8       0       0       0       0       0       0
  4377 ;;      Locals:         5       0       0       0       0       0       0
  4378 ;;      Temps:          0       0       0       0       0       0       0
  4379 ;;      Totals:        13       0       0       0       0       0       0
  4380 ;;Total ram usage:       13 bytes
  4381 ;; Hardware stack levels used:    1
  4382 ;; Hardware stack levels required when called:    4
  4383 ;; This function calls:
  4384 ;;		Nothing
  4385 ;; This function is called by:
  4386 ;;		_GetMcuRunTime
  4387 ;; This function uses a non-reentrant model
  4388 ;;
  4389                           
  4390                           	psect	text13
  4391  003258                     __ptext13:
  4392                           	opt stack 0
  4393  003258                     ___lldiv:
  4394                           	opt stack 23
  4395                           
  4396                           ;incstack = 0
  4397  003258  0E00               	movlw	0
  4398  00325A  6E20               	movwf	___lldiv@quotient,c
  4399  00325C  0E00               	movlw	0
  4400  00325E  6E21               	movwf	___lldiv@quotient+1,c
  4401  003260  0E00               	movlw	0
  4402  003262  6E22               	movwf	___lldiv@quotient+2,c
  4403  003264  0E00               	movlw	0
  4404  003266  6E23               	movwf	___lldiv@quotient+3,c
  4405  003268  501C               	movf	___lldiv@divisor,w,c
  4406  00326A  101D               	iorwf	___lldiv@divisor+1,w,c
  4407  00326C  101E               	iorwf	___lldiv@divisor+2,w,c
  4408  00326E  101F               	iorwf	___lldiv@divisor+3,w,c
  4409  003270  B4D8               	btfsc	status,2,c
  4410  003272  D02A               	goto	l1947
  4411  003274  0E01               	movlw	1
  4412  003276  6E24               	movwf	___lldiv@counter,c
  4413  003278  D006               	goto	l1942
  4414  00327A  90D8               	bcf	status,0,c
  4415  00327C  361C               	rlcf	___lldiv@divisor,f,c
  4416  00327E  361D               	rlcf	___lldiv@divisor+1,f,c
  4417  003280  361E               	rlcf	___lldiv@divisor+2,f,c
  4418  003282  361F               	rlcf	___lldiv@divisor+3,f,c
  4419  003284  2A24               	incf	___lldiv@counter,f,c
  4420  003286                     l1942:
  4421  003286  AE1F               	btfss	___lldiv@divisor+3,7,c
  4422  003288  D7F8               	goto	l1943
  4423  00328A                     u8130:
  4424  00328A  90D8               	bcf	status,0,c
  4425  00328C  3620               	rlcf	___lldiv@quotient,f,c
  4426  00328E  3621               	rlcf	___lldiv@quotient+1,f,c
  4427  003290  3622               	rlcf	___lldiv@quotient+2,f,c
  4428  003292  3623               	rlcf	___lldiv@quotient+3,f,c
  4429  003294  501C               	movf	___lldiv@divisor,w,c
  4430  003296  5C18               	subwf	___lldiv@dividend,w,c
  4431  003298  501D               	movf	___lldiv@divisor+1,w,c
  4432  00329A  5819               	subwfb	___lldiv@dividend+1,w,c
  4433  00329C  501E               	movf	___lldiv@divisor+2,w,c
  4434  00329E  581A               	subwfb	___lldiv@dividend+2,w,c
  4435  0032A0  501F               	movf	___lldiv@divisor+3,w,c
  4436  0032A2  581B               	subwfb	___lldiv@dividend+3,w,c
  4437  0032A4  A0D8               	btfss	status,0,c
  4438  0032A6  D009               	goto	l1946
  4439  0032A8  501C               	movf	___lldiv@divisor,w,c
  4440  0032AA  5E18               	subwf	___lldiv@dividend,f,c
  4441  0032AC  501D               	movf	___lldiv@divisor+1,w,c
  4442  0032AE  5A19               	subwfb	___lldiv@dividend+1,f,c
  4443  0032B0  501E               	movf	___lldiv@divisor+2,w,c
  4444  0032B2  5A1A               	subwfb	___lldiv@dividend+2,f,c
  4445  0032B4  501F               	movf	___lldiv@divisor+3,w,c
  4446  0032B6  5A1B               	subwfb	___lldiv@dividend+3,f,c
  4447  0032B8  8020               	bsf	___lldiv@quotient,0,c
  4448  0032BA                     l1946:
  4449  0032BA  90D8               	bcf	status,0,c
  4450  0032BC  321F               	rrcf	___lldiv@divisor+3,f,c
  4451  0032BE  321E               	rrcf	___lldiv@divisor+2,f,c
  4452  0032C0  321D               	rrcf	___lldiv@divisor+1,f,c
  4453  0032C2  321C               	rrcf	___lldiv@divisor,f,c
  4454  0032C4  2E24               	decfsz	___lldiv@counter,f,c
  4455  0032C6  D7E1               	goto	u8130
  4456  0032C8                     l1947:
  4457  0032C8  C020  F018         	movff	___lldiv@quotient,?___lldiv
  4458  0032CC  C021  F019         	movff	___lldiv@quotient+1,?___lldiv+1
  4459  0032D0  C022  F01A         	movff	___lldiv@quotient+2,?___lldiv+2
  4460  0032D4  C023  F01B         	movff	___lldiv@quotient+3,?___lldiv+3
  4461  0032D8  0012               	return		;funcret
  4462  0032DA                     __end_of___lldiv:
  4463                           	opt stack 0
  4464                           tosu	equ	0xFFF
  4465                           tosh	equ	0xFFE
  4466                           tosl	equ	0xFFD
  4467                           pclath	equ	0xFFA
  4468                           tblptru	equ	0xFF8
  4469                           tblptrh	equ	0xFF7
  4470                           tblptrl	equ	0xFF6
  4471                           tablat	equ	0xFF5
  4472                           prodh	equ	0xFF4
  4473                           prodl	equ	0xFF3
  4474                           postinc0	equ	0xFEE
  4475                           plusw0	equ	0xFEB
  4476                           wreg	equ	0xFE8
  4477                           postdec1	equ	0xFE5
  4478                           fsr1l	equ	0xFE1
  4479                           indf2	equ	0xFDF
  4480                           postinc2	equ	0xFDE
  4481                           plusw2	equ	0xFDB
  4482                           fsr2h	equ	0xFDA
  4483                           fsr2l	equ	0xFD9
  4484                           status	equ	0xFD8
  4485                           
  4486 ;; *************** function _GetMcuFwVersion *****************
  4487 ;; Defined at:
  4488 ;;		line 14 in file "SystemStatus.c"
  4489 ;; Parameters:    Size  Location     Type
  4490 ;;		None
  4491 ;; Auto vars:     Size  Location     Type
  4492 ;;  TxMsg          18    4[BANK0 ] unsigned char [18]
  4493 ;;  compileData     4    0[BANK0 ] unsigned long 
  4494 ;; Return value:  Size  Location     Type
  4495 ;;                  1    wreg      void 
  4496 ;; Registers used:
  4497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4498 ;; Tracked objects:
  4499 ;;		On entry : 0/0
  4500 ;;		On exit  : 0/0
  4501 ;;		Unchanged: 0/0
  4502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4503 ;;      Params:         0       0       0       0       0       0       0
  4504 ;;      Locals:         0      26       0       0       0       0       0
  4505 ;;      Temps:          7       0       0       0       0       0       0
  4506 ;;      Totals:         7      26       0       0       0       0       0
  4507 ;;Total ram usage:       33 bytes
  4508 ;; Hardware stack levels used:    1
  4509 ;; Hardware stack levels required when called:    6
  4510 ;; This function calls:
  4511 ;;		_WriteUartMessage
  4512 ;;		_ZeroArray
  4513 ;;		___wmul
  4514 ;;		_crc8
  4515 ;; This function is called by:
  4516 ;;		_GroupStatusAndVersion
  4517 ;; This function uses a non-reentrant model
  4518 ;;
  4519                           
  4520                           	psect	text14
  4521  0006A6                     __ptext14:
  4522                           	opt stack 0
  4523  0006A6                     _GetMcuFwVersion:
  4524                           	opt stack 22
  4525                           
  4526                           ;SystemStatus.c: 16: uint32_t compileData = 0x0;
  4527                           
  4528                           ;incstack = 0
  4529  0006A6  0E00               	movlw	0
  4530  0006A8  0100               	movlb	0	; () banked
  4531  0006AA  6F60               	movwf	GetMcuFwVersion@compileData& (0+255),b
  4532  0006AC  0E00               	movlw	0
  4533  0006AE  6F61               	movwf	(GetMcuFwVersion@compileData+1)& (0+255),b
  4534  0006B0  0E00               	movlw	0
  4535  0006B2  6F62               	movwf	(GetMcuFwVersion@compileData+2)& (0+255),b
  4536  0006B4  0E00               	movlw	0
  4537  0006B6  6F63               	movwf	(GetMcuFwVersion@compileData+3)& (0+255),b
  4538                           
  4539                           ; BSR set to: 0
  4540                           ;SystemStatus.c: 19: char TxMsg[(13) + (0x4) + 1];
  4541                           ;SystemStatus.c: 20: ZeroArray(TxMsg, (13) + (0x4) + 1);
  4542  0006B8  0E64               	movlw	low GetMcuFwVersion@TxMsg
  4543  0006BA  6E20               	movwf	ZeroArray@array,c
  4544  0006BC  0E00               	movlw	high GetMcuFwVersion@TxMsg
  4545  0006BE  6E21               	movwf	ZeroArray@array+1,c
  4546  0006C0  0E00               	movlw	0
  4547  0006C2  6E23               	movwf	ZeroArray@size+1,c
  4548  0006C4  0E12               	movlw	18
  4549  0006C6  6E22               	movwf	ZeroArray@size,c
  4550  0006C8  EC4B  F020         	call	_ZeroArray	;wreg free
  4551                           
  4552                           ;SystemStatus.c: 23: TxMsg[(0)] = (0x24);
  4553  0006CC  0E24               	movlw	36
  4554  0006CE  0100               	movlb	0	; () banked
  4555  0006D0  6F64               	movwf	GetMcuFwVersion@TxMsg& (0+255),b
  4556                           
  4557                           ; BSR set to: 0
  4558                           ;SystemStatus.c: 24: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  4559  0006D2  0E02               	movlw	2
  4560  0006D4  6F65               	movwf	(GetMcuFwVersion@TxMsg+1)& (0+255),b
  4561                           
  4562                           ; BSR set to: 0
  4563                           ;SystemStatus.c: 25: TxMsg[(2)] = STATUS_GET_MCU_FW_VERSION;
  4564  0006D6  0E22               	movlw	34
  4565  0006D8  6F66               	movwf	(GetMcuFwVersion@TxMsg+2)& (0+255),b
  4566                           
  4567                           ; BSR set to: 0
  4568                           ;SystemStatus.c: 26: TxMsg[(3)] = (13);
  4569  0006DA  0E0D               	movlw	13
  4570  0006DC  6F67               	movwf	(GetMcuFwVersion@TxMsg+3)& (0+255),b
  4571                           
  4572                           ; BSR set to: 0
  4573                           ;SystemStatus.c: 29: TxMsg[(0x4) + 0] = (( ("Mar 24 2018"[ 7] - '0') * 1000 + ("Mar 24 2
      +                          018"[ 8] - '0') * 100 + ("Mar 24 2018"[ 9] - '0') * 10 + ("Mar 24 2018"[10] - '0') ) & 0
      +                          xFF00) >> 8;
  4574  0006DE  0ED0               	movlw	208
  4575  0006E0  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  4576  0006E2  0EFF               	movlw	255
  4577  0006E4  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  4578  0006E6  0E97               	movlw	low (STR_1+7)
  4579  0006E8  6EF6               	movwf	tblptrl,c
  4580  0006EA  0E06               	movlw	high (STR_1+7)
  4581  0006EC  6EF7               	movwf	tblptrh,c
  4582  0006EE                     	if	0	;tblptru may be non-zero
  4583  0006EE                     	endif
  4584  0006EE                     	if	0	;tblptru may be non-zero
  4585  0006EE                     	endif
  4586  0006EE  0008               	tblrd		*
  4587  0006F0  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  4588  0006F4  0ED0               	movlw	208
  4589  0006F6  2426               	addwf	??_GetMcuFwVersion+2,w,c
  4590  0006F8  6E18               	movwf	___wmul@multiplier,c
  4591  0006FA  6A19               	clrf	___wmul@multiplier+1,c
  4592  0006FC  0EFF               	movlw	255
  4593  0006FE  2219               	addwfc	___wmul@multiplier+1,f,c
  4594  000700  0E03               	movlw	3
  4595  000702  6E1B               	movwf	___wmul@multiplicand+1,c
  4596  000704  0EE8               	movlw	232
  4597  000706  6E1A               	movwf	___wmul@multiplicand,c
  4598  000708  ECB2  F01F         	call	___wmul	;wreg free
  4599  00070C  0E9A               	movlw	low (STR_1+10)
  4600  00070E  6EF6               	movwf	tblptrl,c
  4601  000710  0E06               	movlw	high (STR_1+10)
  4602  000712  6EF7               	movwf	tblptrh,c
  4603  000714                     	if	0	;tblptru may be non-zero
  4604  000714                     	endif
  4605  000714                     	if	0	;tblptru may be non-zero
  4606  000714                     	endif
  4607  000714  0008               	tblrd		*
  4608  000716  50F5               	movf	tablat,w,c
  4609  000718  6E27               	movwf	(??_GetMcuFwVersion+3)& (0+255),c
  4610  00071A  6A28               	clrf	(??_GetMcuFwVersion+4)& (0+255),c
  4611  00071C  5018               	movf	?___wmul,w,c
  4612  00071E  2627               	addwf	??_GetMcuFwVersion+3,f,c
  4613  000720  5019               	movf	?___wmul+1,w,c
  4614  000722  2228               	addwfc	??_GetMcuFwVersion+4,f,c
  4615  000724  0E98               	movlw	low (STR_1+8)
  4616  000726  6EF6               	movwf	tblptrl,c
  4617  000728  0E06               	movlw	high (STR_1+8)
  4618  00072A  6EF7               	movwf	tblptrh,c
  4619  00072C                     	if	0	;tblptru may be non-zero
  4620  00072C                     	endif
  4621  00072C                     	if	0	;tblptru may be non-zero
  4622  00072C                     	endif
  4623  00072C  0008               	tblrd		*
  4624  00072E  CFF5 F029          	movff	tablat,??_GetMcuFwVersion+5
  4625  000732  0ED0               	movlw	208
  4626  000734  2429               	addwf	??_GetMcuFwVersion+5,w,c
  4627  000736  6E18               	movwf	___wmul@multiplier,c
  4628  000738  6A19               	clrf	___wmul@multiplier+1,c
  4629  00073A  0EFF               	movlw	255
  4630  00073C  2219               	addwfc	___wmul@multiplier+1,f,c
  4631  00073E  0E00               	movlw	0
  4632  000740  6E1B               	movwf	___wmul@multiplicand+1,c
  4633  000742  0E64               	movlw	100
  4634  000744  6E1A               	movwf	___wmul@multiplicand,c
  4635  000746  ECB2  F01F         	call	___wmul	;wreg free
  4636  00074A  5018               	movf	?___wmul,w,c
  4637  00074C  2627               	addwf	??_GetMcuFwVersion+3,f,c
  4638  00074E  5019               	movf	?___wmul+1,w,c
  4639  000750  2228               	addwfc	??_GetMcuFwVersion+4,f,c
  4640  000752  0E99               	movlw	low (STR_1+9)
  4641  000754  6EF6               	movwf	tblptrl,c
  4642  000756  0E06               	movlw	high (STR_1+9)
  4643  000758  6EF7               	movwf	tblptrh,c
  4644  00075A                     	if	0	;tblptru may be non-zero
  4645  00075A                     	endif
  4646  00075A                     	if	0	;tblptru may be non-zero
  4647  00075A                     	endif
  4648  00075A  0008               	tblrd		*
  4649  00075C  CFF5 F02A          	movff	tablat,??_GetMcuFwVersion+6
  4650  000760  0ED0               	movlw	208
  4651  000762  242A               	addwf	??_GetMcuFwVersion+6,w,c
  4652  000764  6E18               	movwf	___wmul@multiplier,c
  4653  000766  6A19               	clrf	___wmul@multiplier+1,c
  4654  000768  0EFF               	movlw	255
  4655  00076A  2219               	addwfc	___wmul@multiplier+1,f,c
  4656  00076C  0E00               	movlw	0
  4657  00076E  6E1B               	movwf	___wmul@multiplicand+1,c
  4658  000770  0E0A               	movlw	10
  4659  000772  6E1A               	movwf	___wmul@multiplicand,c
  4660  000774  ECB2  F01F         	call	___wmul	;wreg free
  4661  000778  5018               	movf	?___wmul,w,c
  4662  00077A  2627               	addwf	??_GetMcuFwVersion+3,f,c
  4663  00077C  5019               	movf	?___wmul+1,w,c
  4664  00077E  2228               	addwfc	??_GetMcuFwVersion+4,f,c
  4665  000780  5024               	movf	??_GetMcuFwVersion,w,c
  4666  000782  2627               	addwf	??_GetMcuFwVersion+3,f,c
  4667  000784  5025               	movf	??_GetMcuFwVersion+1,w,c
  4668  000786  2228               	addwfc	??_GetMcuFwVersion+4,f,c
  4669  000788  C028  F027         	movff	??_GetMcuFwVersion+4,??_GetMcuFwVersion+3
  4670  00078C  6A28               	clrf	??_GetMcuFwVersion+4,c
  4671  00078E  5027               	movf	??_GetMcuFwVersion+3,w,c
  4672  000790  0100               	movlb	0	; () banked
  4673  000792  6F68               	movwf	(GetMcuFwVersion@TxMsg+4)& (0+255),b
  4674                           
  4675                           ; BSR set to: 0
  4676                           ;SystemStatus.c: 30: TxMsg[(0x4) + 1] = ( ("Mar 24 2018"[ 7] - '0') * 1000 + ("Mar 24 20
      +                          18"[ 8] - '0') * 100 + ("Mar 24 2018"[ 9] - '0') * 10 + ("Mar 24 2018"[10] - '0') ) & 0x
      +                          FF;
  4677  000794  0E9A               	movlw	low (STR_1+10)
  4678  000796  6EF6               	movwf	tblptrl,c
  4679  000798  0E06               	movlw	high (STR_1+10)
  4680  00079A  6EF7               	movwf	tblptrh,c
  4681  00079C                     	if	0	;tblptru may be non-zero
  4682  00079C                     	endif
  4683  00079C                     	if	0	;tblptru may be non-zero
  4684  00079C                     	endif
  4685  00079C  0008               	tblrd		*
  4686  00079E  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  4687  0007A2  0E99               	movlw	low (STR_1+9)
  4688  0007A4  6EF6               	movwf	tblptrl,c
  4689  0007A6  0E06               	movlw	high (STR_1+9)
  4690  0007A8  6EF7               	movwf	tblptrh,c
  4691  0007AA                     	if	0	;tblptru may be non-zero
  4692  0007AA                     	endif
  4693  0007AA                     	if	0	;tblptru may be non-zero
  4694  0007AA                     	endif
  4695  0007AA  0008               	tblrd		*
  4696  0007AC  50F5               	movf	tablat,w,c
  4697  0007AE  0FD0               	addlw	208
  4698  0007B0  0D0A               	mullw	10
  4699  0007B2  CFF3 F025          	movff	prodl,??_GetMcuFwVersion+1
  4700  0007B6  0E98               	movlw	low (STR_1+8)
  4701  0007B8  6EF6               	movwf	tblptrl,c
  4702  0007BA  0E06               	movlw	high (STR_1+8)
  4703  0007BC  6EF7               	movwf	tblptrh,c
  4704  0007BE                     	if	0	;tblptru may be non-zero
  4705  0007BE                     	endif
  4706  0007BE                     	if	0	;tblptru may be non-zero
  4707  0007BE                     	endif
  4708  0007BE  0008               	tblrd		*
  4709  0007C0  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  4710  0007C4  0ED0               	movlw	208
  4711  0007C6  2426               	addwf	??_GetMcuFwVersion+2,w,c
  4712  0007C8  6E18               	movwf	___wmul@multiplier,c
  4713  0007CA  6A19               	clrf	___wmul@multiplier+1,c
  4714  0007CC  0EFF               	movlw	255
  4715  0007CE  2219               	addwfc	___wmul@multiplier+1,f,c
  4716  0007D0  0E00               	movlw	0
  4717  0007D2  6E1B               	movwf	___wmul@multiplicand+1,c
  4718  0007D4  0E64               	movlw	100
  4719  0007D6  6E1A               	movwf	___wmul@multiplicand,c
  4720  0007D8  ECB2  F01F         	call	___wmul	;wreg free
  4721  0007DC  0E97               	movlw	low (STR_1+7)
  4722  0007DE  6EF6               	movwf	tblptrl,c
  4723  0007E0  0E06               	movlw	high (STR_1+7)
  4724  0007E2  6EF7               	movwf	tblptrh,c
  4725  0007E4                     	if	0	;tblptru may be non-zero
  4726  0007E4                     	endif
  4727  0007E4                     	if	0	;tblptru may be non-zero
  4728  0007E4                     	endif
  4729  0007E4  0008               	tblrd		*
  4730  0007E6  50F5               	movf	tablat,w,c
  4731  0007E8  0FD0               	addlw	208
  4732  0007EA  0DE8               	mullw	232
  4733  0007EC  50F3               	movf	prodl,w,c
  4734  0007EE  2418               	addwf	?___wmul,w,c
  4735  0007F0  2425               	addwf	??_GetMcuFwVersion+1,w,c
  4736  0007F2  2424               	addwf	??_GetMcuFwVersion,w,c
  4737  0007F4  0FD0               	addlw	208
  4738  0007F6  0100               	movlb	0	; () banked
  4739  0007F8  6F69               	movwf	(GetMcuFwVersion@TxMsg+5)& (0+255),b
  4740                           
  4741                           ; BSR set to: 0
  4742                           ;SystemStatus.c: 33: TxMsg[(0x4) + 2] = "Mar 24 2018"[0];
  4743  0007FA  0E90               	movlw	low STR_1
  4744  0007FC  6EF6               	movwf	tblptrl,c
  4745  0007FE                     	if	1	;There is more than 1 active tblptr byte
  4746  0007FE  0E06               	movlw	high STR_1
  4747  000800  6EF7               	movwf	tblptrh,c
  4748  000802                     	endif
  4749  000802                     	if	0	;There are less than 3 active tblptr bytes
  4750  000802                     	endif
  4751  000802  0008               	tblrd		*
  4752  000804  CFF5 F06A          	movff	tablat,GetMcuFwVersion@TxMsg+6
  4753                           
  4754                           ; BSR set to: 0
  4755                           ;SystemStatus.c: 34: TxMsg[(0x4) + 3] = "Mar 24 2018"[1];
  4756  000808  0E91               	movlw	low (STR_1+1)
  4757  00080A  6EF6               	movwf	tblptrl,c
  4758  00080C  0E06               	movlw	high (STR_1+1)
  4759  00080E  6EF7               	movwf	tblptrh,c
  4760  000810                     	if	0	;tblptru may be non-zero
  4761  000810                     	endif
  4762  000810                     	if	0	;tblptru may be non-zero
  4763  000810                     	endif
  4764  000810  0008               	tblrd		*
  4765  000812  CFF5 F06B          	movff	tablat,GetMcuFwVersion@TxMsg+7
  4766                           
  4767                           ; BSR set to: 0
  4768                           ;SystemStatus.c: 35: TxMsg[(0x4) + 4] = "Mar 24 2018"[2];
  4769  000816  0E92               	movlw	low (STR_1+2)
  4770  000818  6EF6               	movwf	tblptrl,c
  4771  00081A  0E06               	movlw	high (STR_1+2)
  4772  00081C  6EF7               	movwf	tblptrh,c
  4773  00081E                     	if	0	;tblptru may be non-zero
  4774  00081E                     	endif
  4775  00081E                     	if	0	;tblptru may be non-zero
  4776  00081E                     	endif
  4777  00081E  0008               	tblrd		*
  4778  000820  CFF5 F06C          	movff	tablat,GetMcuFwVersion@TxMsg+8
  4779                           
  4780                           ; BSR set to: 0
  4781                           ;SystemStatus.c: 38: TxMsg[(0x4) + 5] = (( (("Mar 24 2018"[4] >= '0') ? ("Mar 24 2018"[4
      +                          ] - '0') * 10 : 0) + ("Mar 24 2018"[5] - '0') ) & 0xFF00) >> 8;
  4782  000824  0E94               	movlw	low (STR_1+4)
  4783  000826  6EF6               	movwf	tblptrl,c
  4784  000828  0E06               	movlw	high (STR_1+4)
  4785  00082A  6EF7               	movwf	tblptrh,c
  4786  00082C                     	if	0	;tblptru may be non-zero
  4787  00082C                     	endif
  4788  00082C                     	if	0	;tblptru may be non-zero
  4789  00082C                     	endif
  4790  00082C  0E30               	movlw	48
  4791  00082E  0008               	tblrd		*
  4792  000830  60F5               	cpfslt	tablat,c
  4793  000832  D005               	goto	l1498
  4794                           
  4795                           ; BSR set to: 0
  4796  000834  0E00               	movlw	0
  4797  000836  6F77               	movwf	(_GetMcuFwVersion$2686+1)& (0+255),b
  4798  000838  0E00               	movlw	0
  4799  00083A  6F76               	movwf	_GetMcuFwVersion$2686& (0+255),b
  4800  00083C  D017               	goto	l1500
  4801  00083E                     l1498:
  4802                           
  4803                           ; BSR set to: 0
  4804                           
  4805                           ; BSR set to: 0
  4806  00083E  0E94               	movlw	low (STR_1+4)
  4807  000840  6EF6               	movwf	tblptrl,c
  4808  000842  0E06               	movlw	high (STR_1+4)
  4809  000844  6EF7               	movwf	tblptrh,c
  4810  000846                     	if	0	;tblptru may be non-zero
  4811  000846                     	endif
  4812  000846                     	if	0	;tblptru may be non-zero
  4813  000846                     	endif
  4814  000846  0008               	tblrd		*
  4815  000848  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  4816  00084C  0ED0               	movlw	208
  4817  00084E  2424               	addwf	??_GetMcuFwVersion,w,c
  4818  000850  6E18               	movwf	___wmul@multiplier,c
  4819  000852  6A19               	clrf	___wmul@multiplier+1,c
  4820  000854  0EFF               	movlw	255
  4821  000856  2219               	addwfc	___wmul@multiplier+1,f,c
  4822  000858  0E00               	movlw	0
  4823  00085A  6E1B               	movwf	___wmul@multiplicand+1,c
  4824  00085C  0E0A               	movlw	10
  4825  00085E  6E1A               	movwf	___wmul@multiplicand,c
  4826  000860  ECB2  F01F         	call	___wmul	;wreg free
  4827  000864  C018  F076         	movff	?___wmul,_GetMcuFwVersion$2686
  4828  000868  C019  F077         	movff	?___wmul+1,_GetMcuFwVersion$2686+1
  4829  00086C                     l1500:
  4830  00086C  0ED0               	movlw	208
  4831  00086E  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  4832  000870  0EFF               	movlw	255
  4833  000872  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  4834  000874  0E95               	movlw	low (STR_1+5)
  4835  000876  6EF6               	movwf	tblptrl,c
  4836  000878  0E06               	movlw	high (STR_1+5)
  4837  00087A  6EF7               	movwf	tblptrh,c
  4838  00087C                     	if	0	;tblptru may be non-zero
  4839  00087C                     	endif
  4840  00087C                     	if	0	;tblptru may be non-zero
  4841  00087C                     	endif
  4842  00087C  0008               	tblrd		*
  4843  00087E  50F5               	movf	tablat,w,c
  4844  000880  0100               	movlb	0	; () banked
  4845  000882  2576               	addwf	_GetMcuFwVersion$2686& (0+255),w,b
  4846  000884  6E26               	movwf	(??_GetMcuFwVersion+2)& (0+255),c
  4847  000886  0E00               	movlw	0
  4848  000888  2177               	addwfc	(_GetMcuFwVersion$2686+1)& (0+255),w,b
  4849  00088A  6E27               	movwf	(??_GetMcuFwVersion+3)& (0+255),c
  4850  00088C  5024               	movf	??_GetMcuFwVersion,w,c
  4851  00088E  2626               	addwf	??_GetMcuFwVersion+2,f,c
  4852  000890  5025               	movf	??_GetMcuFwVersion+1,w,c
  4853  000892  2227               	addwfc	??_GetMcuFwVersion+3,f,c
  4854  000894  C027  F026         	movff	??_GetMcuFwVersion+3,??_GetMcuFwVersion+2
  4855  000898  6A27               	clrf	??_GetMcuFwVersion+3,c
  4856  00089A  5026               	movf	??_GetMcuFwVersion+2,w,c
  4857  00089C  6F6D               	movwf	(GetMcuFwVersion@TxMsg+9)& (0+255),b
  4858                           
  4859                           ; BSR set to: 0
  4860                           ;SystemStatus.c: 39: TxMsg[(0x4) + 6] = ( (("Mar 24 2018"[4] >= '0') ? ("Mar 24 2018"[4]
      +                           - '0') * 10 : 0) + ("Mar 24 2018"[5] - '0') ) & 0xFF;
  4861  00089E  0E94               	movlw	low (STR_1+4)
  4862  0008A0  6EF6               	movwf	tblptrl,c
  4863  0008A2  0E06               	movlw	high (STR_1+4)
  4864  0008A4  6EF7               	movwf	tblptrh,c
  4865  0008A6                     	if	0	;tblptru may be non-zero
  4866  0008A6                     	endif
  4867  0008A6                     	if	0	;tblptru may be non-zero
  4868  0008A6                     	endif
  4869  0008A6  0E30               	movlw	48
  4870  0008A8  0008               	tblrd		*
  4871  0008AA  60F5               	cpfslt	tablat,c
  4872  0008AC  D005               	goto	l1502
  4873                           
  4874                           ; BSR set to: 0
  4875  0008AE  0E00               	movlw	0
  4876  0008B0  6F79               	movwf	(_GetMcuFwVersion$2690+1)& (0+255),b
  4877  0008B2  0E00               	movlw	0
  4878  0008B4  6F78               	movwf	_GetMcuFwVersion$2690& (0+255),b
  4879  0008B6  D017               	goto	l1504
  4880  0008B8                     l1502:
  4881                           
  4882                           ; BSR set to: 0
  4883                           
  4884                           ; BSR set to: 0
  4885  0008B8  0E94               	movlw	low (STR_1+4)
  4886  0008BA  6EF6               	movwf	tblptrl,c
  4887  0008BC  0E06               	movlw	high (STR_1+4)
  4888  0008BE  6EF7               	movwf	tblptrh,c
  4889  0008C0                     	if	0	;tblptru may be non-zero
  4890  0008C0                     	endif
  4891  0008C0                     	if	0	;tblptru may be non-zero
  4892  0008C0                     	endif
  4893  0008C0  0008               	tblrd		*
  4894  0008C2  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  4895  0008C6  0ED0               	movlw	208
  4896  0008C8  2424               	addwf	??_GetMcuFwVersion,w,c
  4897  0008CA  6E18               	movwf	___wmul@multiplier,c
  4898  0008CC  6A19               	clrf	___wmul@multiplier+1,c
  4899  0008CE  0EFF               	movlw	255
  4900  0008D0  2219               	addwfc	___wmul@multiplier+1,f,c
  4901  0008D2  0E00               	movlw	0
  4902  0008D4  6E1B               	movwf	___wmul@multiplicand+1,c
  4903  0008D6  0E0A               	movlw	10
  4904  0008D8  6E1A               	movwf	___wmul@multiplicand,c
  4905  0008DA  ECB2  F01F         	call	___wmul	;wreg free
  4906  0008DE  C018  F078         	movff	?___wmul,_GetMcuFwVersion$2690
  4907  0008E2  C019  F079         	movff	?___wmul+1,_GetMcuFwVersion$2690+1
  4908  0008E6                     l1504:
  4909  0008E6  0E95               	movlw	low (STR_1+5)
  4910  0008E8  6EF6               	movwf	tblptrl,c
  4911  0008EA  0E06               	movlw	high (STR_1+5)
  4912  0008EC  6EF7               	movwf	tblptrh,c
  4913  0008EE                     	if	0	;tblptru may be non-zero
  4914  0008EE                     	endif
  4915  0008EE                     	if	0	;tblptru may be non-zero
  4916  0008EE                     	endif
  4917  0008EE  0008               	tblrd		*
  4918  0008F0  50F5               	movf	tablat,w,c
  4919  0008F2  0100               	movlb	0	; () banked
  4920  0008F4  2578               	addwf	_GetMcuFwVersion$2690& (0+255),w,b
  4921  0008F6  0FD0               	addlw	208
  4922  0008F8  6F6E               	movwf	(GetMcuFwVersion@TxMsg+10)& (0+255),b
  4923                           
  4924                           ; BSR set to: 0
  4925                           ;SystemStatus.c: 42: TxMsg[(0x4) + 7] = ((("17:14:07"[0] - '0') * 10 + "17:14:07"[1] - '
      +                          0') & 0xFF00) >> 8;
  4926  0008FA  0ED0               	movlw	208
  4927  0008FC  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  4928  0008FE  0EFF               	movlw	255
  4929  000900  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  4930  000902  0E9C               	movlw	low STR_18
  4931  000904  6EF6               	movwf	tblptrl,c
  4932  000906                     	if	1	;There is more than 1 active tblptr byte
  4933  000906  0E06               	movlw	high STR_18
  4934  000908  6EF7               	movwf	tblptrh,c
  4935  00090A                     	endif
  4936  00090A                     	if	0	;There are less than 3 active tblptr bytes
  4937  00090A                     	endif
  4938  00090A  0008               	tblrd		*
  4939  00090C  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  4940  000910  0ED0               	movlw	208
  4941  000912  2426               	addwf	??_GetMcuFwVersion+2,w,c
  4942  000914  6E18               	movwf	___wmul@multiplier,c
  4943  000916  6A19               	clrf	___wmul@multiplier+1,c
  4944  000918  0EFF               	movlw	255
  4945  00091A  2219               	addwfc	___wmul@multiplier+1,f,c
  4946  00091C  0E00               	movlw	0
  4947  00091E  6E1B               	movwf	___wmul@multiplicand+1,c
  4948  000920  0E0A               	movlw	10
  4949  000922  6E1A               	movwf	___wmul@multiplicand,c
  4950  000924  ECB2  F01F         	call	___wmul	;wreg free
  4951  000928  0E9D               	movlw	low (STR_18+1)
  4952  00092A  6EF6               	movwf	tblptrl,c
  4953  00092C  0E06               	movlw	high (STR_18+1)
  4954  00092E  6EF7               	movwf	tblptrh,c
  4955  000930                     	if	0	;tblptru may be non-zero
  4956  000930                     	endif
  4957  000930                     	if	0	;tblptru may be non-zero
  4958  000930                     	endif
  4959  000930  0008               	tblrd		*
  4960  000932  50F5               	movf	tablat,w,c
  4961  000934  2618               	addwf	?___wmul,f,c
  4962  000936  0E00               	movlw	0
  4963  000938  2219               	addwfc	?___wmul+1,f,c
  4964  00093A  5024               	movf	??_GetMcuFwVersion,w,c
  4965  00093C  2618               	addwf	?___wmul,f,c
  4966  00093E  5025               	movf	??_GetMcuFwVersion+1,w,c
  4967  000940  2219               	addwfc	?___wmul+1,f,c
  4968  000942  C019  F018         	movff	?___wmul+1,?___wmul
  4969  000946  6A19               	clrf	?___wmul+1,c
  4970  000948  5018               	movf	?___wmul,w,c
  4971  00094A  0100               	movlb	0	; () banked
  4972  00094C  6F6F               	movwf	(GetMcuFwVersion@TxMsg+11)& (0+255),b
  4973                           
  4974                           ; BSR set to: 0
  4975                           ;SystemStatus.c: 43: TxMsg[(0x4) + 8] = (("17:14:07"[0] - '0') * 10 + "17:14:07"[1] - '0
      +                          ') & 0xFF;
  4976  00094E  0E9D               	movlw	low (STR_18+1)
  4977  000950  6EF6               	movwf	tblptrl,c
  4978  000952  0E06               	movlw	high (STR_18+1)
  4979  000954  6EF7               	movwf	tblptrh,c
  4980  000956                     	if	0	;tblptru may be non-zero
  4981  000956                     	endif
  4982  000956                     	if	0	;tblptru may be non-zero
  4983  000956                     	endif
  4984  000956  0008               	tblrd		*
  4985  000958  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  4986  00095C  0E9C               	movlw	low STR_18
  4987  00095E  6EF6               	movwf	tblptrl,c
  4988  000960                     	if	1	;There is more than 1 active tblptr byte
  4989  000960  0E06               	movlw	high STR_18
  4990  000962  6EF7               	movwf	tblptrh,c
  4991  000964                     	endif
  4992  000964                     	if	0	;There are less than 3 active tblptr bytes
  4993  000964                     	endif
  4994  000964  0008               	tblrd		*
  4995  000966  50F5               	movf	tablat,w,c
  4996  000968  0FD0               	addlw	208
  4997  00096A  0D0A               	mullw	10
  4998  00096C  50F3               	movf	prodl,w,c
  4999  00096E  2424               	addwf	??_GetMcuFwVersion,w,c
  5000  000970  0FD0               	addlw	208
  5001  000972  6F70               	movwf	(GetMcuFwVersion@TxMsg+12)& (0+255),b
  5002                           
  5003                           ; BSR set to: 0
  5004                           ;SystemStatus.c: 46: TxMsg[(0x4) + 9] = ((("17:14:07"[3] - '0') * 10 + "17:14:07"[4] - '
      +                          0') & 0xFF00) >> 8;
  5005  000974  0ED0               	movlw	208
  5006  000976  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  5007  000978  0EFF               	movlw	255
  5008  00097A  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  5009  00097C  0E9F               	movlw	low (STR_18+3)
  5010  00097E  6EF6               	movwf	tblptrl,c
  5011  000980  0E06               	movlw	high (STR_18+3)
  5012  000982  6EF7               	movwf	tblptrh,c
  5013  000984                     	if	0	;tblptru may be non-zero
  5014  000984                     	endif
  5015  000984                     	if	0	;tblptru may be non-zero
  5016  000984                     	endif
  5017  000984  0008               	tblrd		*
  5018  000986  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  5019  00098A  0ED0               	movlw	208
  5020  00098C  2426               	addwf	??_GetMcuFwVersion+2,w,c
  5021  00098E  6E18               	movwf	___wmul@multiplier,c
  5022  000990  6A19               	clrf	___wmul@multiplier+1,c
  5023  000992  0EFF               	movlw	255
  5024  000994  2219               	addwfc	___wmul@multiplier+1,f,c
  5025  000996  0E00               	movlw	0
  5026  000998  6E1B               	movwf	___wmul@multiplicand+1,c
  5027  00099A  0E0A               	movlw	10
  5028  00099C  6E1A               	movwf	___wmul@multiplicand,c
  5029  00099E  ECB2  F01F         	call	___wmul	;wreg free
  5030  0009A2  0EA0               	movlw	low (STR_18+4)
  5031  0009A4  6EF6               	movwf	tblptrl,c
  5032  0009A6  0E06               	movlw	high (STR_18+4)
  5033  0009A8  6EF7               	movwf	tblptrh,c
  5034  0009AA                     	if	0	;tblptru may be non-zero
  5035  0009AA                     	endif
  5036  0009AA                     	if	0	;tblptru may be non-zero
  5037  0009AA                     	endif
  5038  0009AA  0008               	tblrd		*
  5039  0009AC  50F5               	movf	tablat,w,c
  5040  0009AE  2618               	addwf	?___wmul,f,c
  5041  0009B0  0E00               	movlw	0
  5042  0009B2  2219               	addwfc	?___wmul+1,f,c
  5043  0009B4  5024               	movf	??_GetMcuFwVersion,w,c
  5044  0009B6  2618               	addwf	?___wmul,f,c
  5045  0009B8  5025               	movf	??_GetMcuFwVersion+1,w,c
  5046  0009BA  2219               	addwfc	?___wmul+1,f,c
  5047  0009BC  C019  F018         	movff	?___wmul+1,?___wmul
  5048  0009C0  6A19               	clrf	?___wmul+1,c
  5049  0009C2  5018               	movf	?___wmul,w,c
  5050  0009C4  0100               	movlb	0	; () banked
  5051  0009C6  6F71               	movwf	(GetMcuFwVersion@TxMsg+13)& (0+255),b
  5052                           
  5053                           ; BSR set to: 0
  5054                           ;SystemStatus.c: 47: TxMsg[(0x4) + 10] = (("17:14:07"[3] - '0') * 10 + "17:14:07"[4] - '
      +                          0') & 0xFF;
  5055  0009C8  0EA0               	movlw	low (STR_18+4)
  5056  0009CA  6EF6               	movwf	tblptrl,c
  5057  0009CC  0E06               	movlw	high (STR_18+4)
  5058  0009CE  6EF7               	movwf	tblptrh,c
  5059  0009D0                     	if	0	;tblptru may be non-zero
  5060  0009D0                     	endif
  5061  0009D0                     	if	0	;tblptru may be non-zero
  5062  0009D0                     	endif
  5063  0009D0  0008               	tblrd		*
  5064  0009D2  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  5065  0009D6  0E9F               	movlw	low (STR_18+3)
  5066  0009D8  6EF6               	movwf	tblptrl,c
  5067  0009DA  0E06               	movlw	high (STR_18+3)
  5068  0009DC  6EF7               	movwf	tblptrh,c
  5069  0009DE                     	if	0	;tblptru may be non-zero
  5070  0009DE                     	endif
  5071  0009DE                     	if	0	;tblptru may be non-zero
  5072  0009DE                     	endif
  5073  0009DE  0008               	tblrd		*
  5074  0009E0  50F5               	movf	tablat,w,c
  5075  0009E2  0FD0               	addlw	208
  5076  0009E4  0D0A               	mullw	10
  5077  0009E6  50F3               	movf	prodl,w,c
  5078  0009E8  2424               	addwf	??_GetMcuFwVersion,w,c
  5079  0009EA  0FD0               	addlw	208
  5080  0009EC  6F72               	movwf	(GetMcuFwVersion@TxMsg+14)& (0+255),b
  5081                           
  5082                           ; BSR set to: 0
  5083                           ;SystemStatus.c: 49: TxMsg[(0x4) + 11] = ((("17:14:07"[6] - '0') * 10 + "17:14:07"[7] - 
      +                          '0') & 0xFF00) >> 8;
  5084  0009EE  0ED0               	movlw	208
  5085  0009F0  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  5086  0009F2  0EFF               	movlw	255
  5087  0009F4  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  5088  0009F6  0EA2               	movlw	low (STR_18+6)
  5089  0009F8  6EF6               	movwf	tblptrl,c
  5090  0009FA  0E06               	movlw	high (STR_18+6)
  5091  0009FC  6EF7               	movwf	tblptrh,c
  5092  0009FE                     	if	0	;tblptru may be non-zero
  5093  0009FE                     	endif
  5094  0009FE                     	if	0	;tblptru may be non-zero
  5095  0009FE                     	endif
  5096  0009FE  0008               	tblrd		*
  5097  000A00  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  5098  000A04  0ED0               	movlw	208
  5099  000A06  2426               	addwf	??_GetMcuFwVersion+2,w,c
  5100  000A08  6E18               	movwf	___wmul@multiplier,c
  5101  000A0A  6A19               	clrf	___wmul@multiplier+1,c
  5102  000A0C  0EFF               	movlw	255
  5103  000A0E  2219               	addwfc	___wmul@multiplier+1,f,c
  5104  000A10  0E00               	movlw	0
  5105  000A12  6E1B               	movwf	___wmul@multiplicand+1,c
  5106  000A14  0E0A               	movlw	10
  5107  000A16  6E1A               	movwf	___wmul@multiplicand,c
  5108  000A18  ECB2  F01F         	call	___wmul	;wreg free
  5109  000A1C  0EA3               	movlw	low (STR_18+7)
  5110  000A1E  6EF6               	movwf	tblptrl,c
  5111  000A20  0E06               	movlw	high (STR_18+7)
  5112  000A22  6EF7               	movwf	tblptrh,c
  5113  000A24                     	if	0	;tblptru may be non-zero
  5114  000A24                     	endif
  5115  000A24                     	if	0	;tblptru may be non-zero
  5116  000A24                     	endif
  5117  000A24  0008               	tblrd		*
  5118  000A26  50F5               	movf	tablat,w,c
  5119  000A28  2618               	addwf	?___wmul,f,c
  5120  000A2A  0E00               	movlw	0
  5121  000A2C  2219               	addwfc	?___wmul+1,f,c
  5122  000A2E  5024               	movf	??_GetMcuFwVersion,w,c
  5123  000A30  2618               	addwf	?___wmul,f,c
  5124  000A32  5025               	movf	??_GetMcuFwVersion+1,w,c
  5125  000A34  2219               	addwfc	?___wmul+1,f,c
  5126  000A36  C019  F018         	movff	?___wmul+1,?___wmul
  5127  000A3A  6A19               	clrf	?___wmul+1,c
  5128  000A3C  5018               	movf	?___wmul,w,c
  5129  000A3E  0100               	movlb	0	; () banked
  5130  000A40  6F73               	movwf	(GetMcuFwVersion@TxMsg+15)& (0+255),b
  5131                           
  5132                           ; BSR set to: 0
  5133                           ;SystemStatus.c: 50: TxMsg[(0x4) + 12] = (("17:14:07"[6] - '0') * 10 + "17:14:07"[7] - '
      +                          0') & 0xFF;
  5134  000A42  0EA3               	movlw	low (STR_18+7)
  5135  000A44  6EF6               	movwf	tblptrl,c
  5136  000A46  0E06               	movlw	high (STR_18+7)
  5137  000A48  6EF7               	movwf	tblptrh,c
  5138  000A4A                     	if	0	;tblptru may be non-zero
  5139  000A4A                     	endif
  5140  000A4A                     	if	0	;tblptru may be non-zero
  5141  000A4A                     	endif
  5142  000A4A  0008               	tblrd		*
  5143  000A4C  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  5144  000A50  0EA2               	movlw	low (STR_18+6)
  5145  000A52  6EF6               	movwf	tblptrl,c
  5146  000A54  0E06               	movlw	high (STR_18+6)
  5147  000A56  6EF7               	movwf	tblptrh,c
  5148  000A58                     	if	0	;tblptru may be non-zero
  5149  000A58                     	endif
  5150  000A58                     	if	0	;tblptru may be non-zero
  5151  000A58                     	endif
  5152  000A58  0008               	tblrd		*
  5153  000A5A  50F5               	movf	tablat,w,c
  5154  000A5C  0FD0               	addlw	208
  5155  000A5E  0D0A               	mullw	10
  5156  000A60  50F3               	movf	prodl,w,c
  5157  000A62  2424               	addwf	??_GetMcuFwVersion,w,c
  5158  000A64  0FD0               	addlw	208
  5159  000A66  6F74               	movwf	(GetMcuFwVersion@TxMsg+16)& (0+255),b
  5160                           
  5161                           ; BSR set to: 0
  5162                           ;SystemStatus.c: 52: TxMsg[(13) + (0x4)] = crc8(TxMsg, (13) + (0x4));
  5163  000A68  0E64               	movlw	low GetMcuFwVersion@TxMsg
  5164  000A6A  6E18               	movwf	crc8@dataArray,c
  5165  000A6C  0E00               	movlw	high GetMcuFwVersion@TxMsg
  5166  000A6E  6E19               	movwf	crc8@dataArray+1,c
  5167  000A70  0E00               	movlw	0
  5168  000A72  6E1B               	movwf	crc8@dataSize+1,c
  5169  000A74  0E11               	movlw	17
  5170  000A76  6E1A               	movwf	crc8@dataSize,c
  5171  000A78  ECCF  F01C         	call	_crc8	;wreg free
  5172  000A7C  0100               	movlb	0	; () banked
  5173  000A7E  6F75               	movwf	(GetMcuFwVersion@TxMsg+17)& (0+255),b
  5174                           
  5175                           ;SystemStatus.c: 54: WriteUartMessage(TxMsg, (13) + (0x4) + 1);
  5176  000A80  0E64               	movlw	low GetMcuFwVersion@TxMsg
  5177  000A82  6E19               	movwf	WriteUartMessage@dataBuf,c
  5178  000A84  0E00               	movlw	high GetMcuFwVersion@TxMsg
  5179  000A86  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5180  000A88  0E00               	movlw	0
  5181  000A8A  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5182  000A8C  0E12               	movlw	18
  5183  000A8E  6E1B               	movwf	WriteUartMessage@dataSize,c
  5184  000A90  EC63  F01E         	call	_WriteUartMessage	;wreg free
  5185  000A94  0012               	return		;funcret
  5186  000A96                     __end_of_GetMcuFwVersion:
  5187                           	opt stack 0
  5188                           tosu	equ	0xFFF
  5189                           tosh	equ	0xFFE
  5190                           tosl	equ	0xFFD
  5191                           pclath	equ	0xFFA
  5192                           tblptru	equ	0xFF8
  5193                           tblptrh	equ	0xFF7
  5194                           tblptrl	equ	0xFF6
  5195                           tablat	equ	0xFF5
  5196                           prodh	equ	0xFF4
  5197                           prodl	equ	0xFF3
  5198                           postinc0	equ	0xFEE
  5199                           plusw0	equ	0xFEB
  5200                           wreg	equ	0xFE8
  5201                           postdec1	equ	0xFE5
  5202                           fsr1l	equ	0xFE1
  5203                           indf2	equ	0xFDF
  5204                           postinc2	equ	0xFDE
  5205                           plusw2	equ	0xFDB
  5206                           fsr2h	equ	0xFDA
  5207                           fsr2l	equ	0xFD9
  5208                           status	equ	0xFD8
  5209                           
  5210 ;; *************** function _FlashReadUart *****************
  5211 ;; Defined at:
  5212 ;;		line 63 in file "FlashApp.c"
  5213 ;; Parameters:    Size  Location     Type
  5214 ;;  data            2   39[BANK0 ] PTR unsigned char 
  5215 ;; Auto vars:     Size  Location     Type
  5216 ;;  idx             2  132[BANK0 ] int 
  5217 ;;  j               2  128[BANK0 ] int 
  5218 ;;  TxMsg          69   47[BANK0 ] unsigned char [69]
  5219 ;;  val             8  116[BANK0 ] struct .
  5220 ;;  numOfSampleT    2  130[BANK0 ] int 
  5221 ;; Return value:  Size  Location     Type
  5222 ;;                  1    wreg      void 
  5223 ;; Registers used:
  5224 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5225 ;; Tracked objects:
  5226 ;;		On entry : 0/0
  5227 ;;		On exit  : 0/0
  5228 ;;		Unchanged: 0/0
  5229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5230 ;;      Params:         0       2       0       0       0       0       0
  5231 ;;      Locals:         0      87       0       0       0       0       0
  5232 ;;      Temps:          0       6       0       0       0       0       0
  5233 ;;      Totals:         0      95       0       0       0       0       0
  5234 ;;Total ram usage:       95 bytes
  5235 ;; Hardware stack levels used:    1
  5236 ;; Hardware stack levels required when called:    8
  5237 ;; This function calls:
  5238 ;;		_FLASH_IsWriteDone
  5239 ;;		_FLASH_ReadByte
  5240 ;;		_GetIntFromUartData
  5241 ;;		_SendAckMessage
  5242 ;;		_WriteUartMessage
  5243 ;;		_ZeroArray
  5244 ;;		_crc8
  5245 ;; This function is called by:
  5246 ;;		_GroupFlashMemory
  5247 ;; This function uses a non-reentrant model
  5248 ;;
  5249                           
  5250                           	psect	text15
  5251  001584                     __ptext15:
  5252                           	opt stack 0
  5253  001584                     _FlashReadUart:
  5254                           	opt stack 20
  5255                           
  5256                           ;FlashApp.c: 69: int16_t numOfSampleToRead = 0x0;
  5257                           
  5258                           ;incstack = 0
  5259  001584  0E00               	movlw	0
  5260  001586  0100               	movlb	0	; () banked
  5261  001588  6FE3               	movwf	(FlashReadUart@numOfSampleToRead+1)& (0+255),b
  5262  00158A  0E00               	movlw	0
  5263  00158C  6FE2               	movwf	FlashReadUart@numOfSampleToRead& (0+255),b
  5264                           
  5265                           ; BSR set to: 0
  5266                           ;FlashApp.c: 70: INT_VAL val = GetIntFromUartData(10, data);
  5267  00158E  C087  F066         	movff	FlashReadUart@data,GetIntFromUartData@data
  5268  001592  C088  F067         	movff	FlashReadUart@data+1,GetIntFromUartData@data+1
  5269  001596  0E0A               	movlw	10
  5270  001598  EC37  F00E         	call	_GetIntFromUartData
  5271  00159C  EE20  F0D4         	lfsr	2,FlashReadUart@val
  5272  0015A0  0E07               	movlw	7
  5273  0015A2                     u8261:
  5274  0015A2  CFEB FFDB          	movff	plusw0,plusw2
  5275  0015A6  06E8               	decf	wreg,f,c
  5276  0015A8  E2FC               	bc	u8261
  5277                           
  5278                           ;FlashApp.c: 72: int numOfSampleToRead = val.num;
  5279  0015AA  C0D4  F0E2         	movff	FlashReadUart@val,FlashReadUart@numOfSampleToRead
  5280  0015AE  C0D5  F0E3         	movff	FlashReadUart@val+1,FlashReadUart@numOfSampleToRead+1
  5281                           
  5282                           ;FlashApp.c: 74: char TxMsg[(64) + (0x4) + 1];
  5283                           ;FlashApp.c: 76: if (FLASH_IsWriteDone() == 0)
  5284  0015B2  ECF1  F020         	call	_FLASH_IsWriteDone	;wreg free
  5285  0015B6  0900               	iorlw	0
  5286  0015B8  B4D8               	btfsc	status,2,c
  5287  0015BA  0012               	return	
  5288                           
  5289                           ;FlashApp.c: 80: }
  5290                           ;FlashApp.c: 82: if(numOfValidateSamples == 0)
  5291                           
  5292                           ;FlashApp.c: 78: {
  5293                           ;FlashApp.c: 79: return;
  5294  0015BC  5031               	movf	_numOfValidateSamples,w,c
  5295  0015BE  1032               	iorwf	_numOfValidateSamples+1,w,c
  5296  0015C0  1033               	iorwf	_numOfValidateSamples+2,w,c
  5297  0015C2  1034               	iorwf	_numOfValidateSamples+3,w,c
  5298  0015C4  A4D8               	btfss	status,2,c
  5299  0015C6  D005               	goto	l326
  5300                           
  5301                           ;FlashApp.c: 83: {
  5302                           ;FlashApp.c: 84: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_NO_SAMPLE_YET)
      +                          ;
  5303  0015C8  0E55               	movlw	85
  5304  0015CA  6E24               	movwf	SendAckMessage@inRequest,c
  5305  0015CC  0E05               	movlw	5
  5306  0015CE  ECA6  F01C         	call	_SendAckMessage
  5307  0015D2                     l326:
  5308                           
  5309                           ;FlashApp.c: 85: }
  5310                           ;FlashApp.c: 88: numOfSampleToRead = numOfSampleToRead >= numOfValidateSamples ? numOfVa
      +                          lidateSamples : numOfSampleToRead;
  5311  0015D2  C0E2  F089         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  5312  0015D6  C0E3  F08A         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  5313  0015DA  0E00               	movlw	0
  5314  0015DC  0100               	movlb	0	; () banked
  5315  0015DE  BF8A               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  5316  0015E0  0EFF               	movlw	255
  5317  0015E2  6F8B               	movwf	(??_FlashReadUart+2)& (0+255),b
  5318  0015E4  6F8C               	movwf	(??_FlashReadUart+3)& (0+255),b
  5319  0015E6  5031               	movf	_numOfValidateSamples,w,c
  5320  0015E8  5D89               	subwf	??_FlashReadUart& (0+255),w,b
  5321  0015EA  5032               	movf	_numOfValidateSamples+1,w,c
  5322  0015EC  598A               	subwfb	(??_FlashReadUart+1)& (0+255),w,b
  5323  0015EE  5033               	movf	_numOfValidateSamples+2,w,c
  5324  0015F0  598B               	subwfb	(??_FlashReadUart+2)& (0+255),w,b
  5325  0015F2  5034               	movf	_numOfValidateSamples+3,w,c
  5326  0015F4  598C               	subwfb	(??_FlashReadUart+3)& (0+255),w,b
  5327  0015F6  B0D8               	btfsc	status,0,c
  5328  0015F8  D00A               	goto	l328
  5329                           
  5330                           ; BSR set to: 0
  5331  0015FA  C0E2  F0DC         	movff	FlashReadUart@numOfSampleToRead,_FlashReadUart$605
  5332  0015FE  C0E3  F0DD         	movff	FlashReadUart@numOfSampleToRead+1,_FlashReadUart$605+1
  5333  001602  0E00               	movlw	0
  5334  001604  BFDD               	btfsc	(_FlashReadUart$605+1)& (0+255),7,b
  5335  001606  0EFF               	movlw	-1
  5336  001608  6FDE               	movwf	(_FlashReadUart$605+2)& (0+255),b
  5337  00160A  6FDF               	movwf	(_FlashReadUart$605+3)& (0+255),b
  5338  00160C  D008               	goto	l330
  5339  00160E                     l328:
  5340                           
  5341                           ; BSR set to: 0
  5342  00160E  C031  F0DC         	movff	_numOfValidateSamples,_FlashReadUart$605
  5343  001612  C032  F0DD         	movff	_numOfValidateSamples+1,_FlashReadUart$605+1
  5344  001616  C033  F0DE         	movff	_numOfValidateSamples+2,_FlashReadUart$605+2
  5345  00161A  C034  F0DF         	movff	_numOfValidateSamples+3,_FlashReadUart$605+3
  5346  00161E                     l330:
  5347                           
  5348                           ; BSR set to: 0
  5349  00161E  C0DC  F0E2         	movff	_FlashReadUart$605,FlashReadUart@numOfSampleToRead
  5350  001622  C0DD  F0E3         	movff	_FlashReadUart$605+1,FlashReadUart@numOfSampleToRead+1
  5351                           
  5352                           ;FlashApp.c: 91: readAddress = writeAddress;
  5353  001626  C03F  F1F1         	movff	_writeAddress,_readAddress
  5354  00162A  C040  F1F2         	movff	_writeAddress+1,_readAddress+1
  5355  00162E  C041  F1F3         	movff	_writeAddress+2,_readAddress+2
  5356  001632  C042  F1F4         	movff	_writeAddress+3,_readAddress+3
  5357                           
  5358                           ; BSR set to: 0
  5359                           ;FlashApp.c: 93: for (int j=0; j<numOfSampleToRead; j++)
  5360  001636  0E00               	movlw	0
  5361  001638  6FE1               	movwf	(FlashReadUart@j+1)& (0+255),b
  5362  00163A  0E00               	movlw	0
  5363  00163C  6FE0               	movwf	FlashReadUart@j& (0+255),b
  5364  00163E  D08A               	goto	l331
  5365  001640                     
  5366                           ; BSR set to: 0
  5367                           ;FlashApp.c: 94: {
  5368                           ;FlashApp.c: 96: if(readAddress > 0)
  5369                           
  5370                           ; BSR set to: 0
  5371  001640  0101               	movlb	1	; () banked
  5372  001642  51F1               	movf	_readAddress& (0+255),w,b
  5373  001644  11F2               	iorwf	(_readAddress+1)& (0+255),w,b
  5374  001646  11F3               	iorwf	(_readAddress+2)& (0+255),w,b
  5375  001648  11F4               	iorwf	(_readAddress+3)& (0+255),w,b
  5376  00164A  B4D8               	btfsc	status,2,c
  5377  00164C  D007               	goto	l333
  5378                           
  5379                           ; BSR set to: 1
  5380                           ;FlashApp.c: 97: {
  5381                           ;FlashApp.c: 98: readAddress -= (64);
  5382  00164E  0E40               	movlw	64
  5383  001650  5FF1               	subwf	_readAddress& (0+255),f,b
  5384  001652  0E00               	movlw	0
  5385  001654  5BF2               	subwfb	(_readAddress+1)& (0+255),f,b
  5386  001656  5BF3               	subwfb	(_readAddress+2)& (0+255),f,b
  5387  001658  5BF4               	subwfb	(_readAddress+3)& (0+255),f,b
  5388                           
  5389                           ;FlashApp.c: 99: }
  5390  00165A  D008               	goto	l334
  5391  00165C                     l333:
  5392                           
  5393                           ; BSR set to: 1
  5394                           ;FlashApp.c: 100: else
  5395                           ;FlashApp.c: 101: {
  5396                           ;FlashApp.c: 102: readAddress = 0x7FF0 - (64);
  5397                           
  5398                           ; BSR set to: 1
  5399  00165C  0EB0               	movlw	176
  5400  00165E  6FF1               	movwf	_readAddress& (0+255),b
  5401  001660  0E7F               	movlw	127
  5402  001662  6FF2               	movwf	(_readAddress+1)& (0+255),b
  5403  001664  0E00               	movlw	0
  5404  001666  6FF3               	movwf	(_readAddress+2)& (0+255),b
  5405  001668  0E00               	movlw	0
  5406  00166A  6FF4               	movwf	(_readAddress+3)& (0+255),b
  5407  00166C                     l334:
  5408                           
  5409                           ; BSR set to: 1
  5410                           ;FlashApp.c: 103: }
  5411                           ;FlashApp.c: 106: ZeroArray(TxMsg, (64) + (0x4) + 1);
  5412                           
  5413                           ; BSR set to: 1
  5414  00166C  0E8F               	movlw	low FlashReadUart@TxMsg
  5415  00166E  6E20               	movwf	ZeroArray@array,c
  5416  001670  0E00               	movlw	high FlashReadUart@TxMsg
  5417  001672  6E21               	movwf	ZeroArray@array+1,c
  5418  001674  0E00               	movlw	0
  5419  001676  6E23               	movwf	ZeroArray@size+1,c
  5420  001678  0E45               	movlw	69
  5421  00167A  6E22               	movwf	ZeroArray@size,c
  5422  00167C  EC4B  F020         	call	_ZeroArray	;wreg free
  5423                           
  5424                           ;FlashApp.c: 107: TxMsg[(0)] = (0x24);
  5425  001680  0E24               	movlw	36
  5426  001682  0100               	movlb	0	; () banked
  5427  001684  6F8F               	movwf	FlashReadUart@TxMsg& (0+255),b
  5428                           
  5429                           ; BSR set to: 0
  5430                           ;FlashApp.c: 108: TxMsg[(1)] = FLASH_MSG;
  5431  001686  0E05               	movlw	5
  5432  001688  6F90               	movwf	(FlashReadUart@TxMsg+1)& (0+255),b
  5433                           
  5434                           ; BSR set to: 0
  5435                           ;FlashApp.c: 109: TxMsg[(2)] = FLASH_SEND_RAW_DATA;
  5436  00168A  0E54               	movlw	84
  5437  00168C  6F91               	movwf	(FlashReadUart@TxMsg+2)& (0+255),b
  5438                           
  5439                           ; BSR set to: 0
  5440                           ;FlashApp.c: 110: TxMsg[(3)] = (64);
  5441  00168E  0E40               	movlw	64
  5442  001690  6F92               	movwf	(FlashReadUart@TxMsg+3)& (0+255),b
  5443                           
  5444                           ; BSR set to: 0
  5445                           ;FlashApp.c: 112: for(int idx = 0; idx < (64); idx++)
  5446  001692  0E00               	movlw	0
  5447  001694  6FE5               	movwf	(FlashReadUart@idx+1)& (0+255),b
  5448  001696  0E00               	movlw	0
  5449  001698  6FE4               	movwf	FlashReadUart@idx& (0+255),b
  5450  00169A                     l8220:
  5451                           
  5452                           ; BSR set to: 0
  5453  00169A  BFE5               	btfsc	(FlashReadUart@idx+1)& (0+255),7,b
  5454  00169C  D006               	goto	l335
  5455  00169E  51E5               	movf	(FlashReadUart@idx+1)& (0+255),w,b
  5456  0016A0  E134               	bnz	l8230
  5457  0016A2  0E40               	movlw	64
  5458  0016A4  5DE4               	subwf	FlashReadUart@idx& (0+255),w,b
  5459  0016A6  B0D8               	btfsc	status,0,c
  5460  0016A8  D030               	goto	u8320
  5461  0016AA                     l335:
  5462                           
  5463                           ; BSR set to: 0
  5464                           ;FlashApp.c: 113: {
  5465                           ;FlashApp.c: 114: TxMsg[(0x4) + idx] = FLASH_ReadByte(readAddress + idx);
  5466                           
  5467                           ; BSR set to: 0
  5468  0016AA  0E04               	movlw	4
  5469  0016AC  25E4               	addwf	FlashReadUart@idx& (0+255),w,b
  5470  0016AE  6F89               	movwf	??_FlashReadUart& (0+255),b
  5471  0016B0  0E00               	movlw	0
  5472  0016B2  21E5               	addwfc	(FlashReadUart@idx+1)& (0+255),w,b
  5473  0016B4  6F8A               	movwf	(??_FlashReadUart+1)& (0+255),b
  5474  0016B6  0E8F               	movlw	low FlashReadUart@TxMsg
  5475  0016B8  2589               	addwf	??_FlashReadUart& (0+255),w,b
  5476  0016BA  6ED9               	movwf	fsr2l,c
  5477  0016BC  0E00               	movlw	high FlashReadUart@TxMsg
  5478  0016BE  218A               	addwfc	(??_FlashReadUart+1)& (0+255),w,b
  5479  0016C0  6EDA               	movwf	fsr2h,c
  5480  0016C2  C0E4  F08B         	movff	FlashReadUart@idx,??_FlashReadUart+2
  5481  0016C6  C0E5  F08C         	movff	FlashReadUart@idx+1,??_FlashReadUart+3
  5482  0016CA  0E00               	movlw	0
  5483  0016CC  BF8C               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  5484  0016CE  0EFF               	movlw	255
  5485  0016D0  6F8D               	movwf	(??_FlashReadUart+4)& (0+255),b
  5486  0016D2  6F8E               	movwf	(??_FlashReadUart+5)& (0+255),b
  5487  0016D4  0101               	movlb	1	; () banked
  5488  0016D6  51F1               	movf	_readAddress& (0+255),w,b
  5489  0016D8  0100               	movlb	0	; () banked
  5490  0016DA  258B               	addwf	(??_FlashReadUart+2)& (0+255),w,b
  5491  0016DC  6E18               	movwf	FLASH_ReadByte@flashAddr,c
  5492  0016DE  0101               	movlb	1	; () banked
  5493  0016E0  51F2               	movf	(_readAddress+1)& (0+255),w,b
  5494  0016E2  0100               	movlb	0	; () banked
  5495  0016E4  218C               	addwfc	(??_FlashReadUart+3)& (0+255),w,b
  5496  0016E6  6E19               	movwf	FLASH_ReadByte@flashAddr+1,c
  5497  0016E8  0101               	movlb	1	; () banked
  5498  0016EA  51F3               	movf	(_readAddress+2)& (0+255),w,b
  5499  0016EC  0100               	movlb	0	; () banked
  5500  0016EE  218D               	addwfc	(??_FlashReadUart+4)& (0+255),w,b
  5501  0016F0  6E1A               	movwf	FLASH_ReadByte@flashAddr+2,c
  5502  0016F2  0101               	movlb	1	; () banked
  5503  0016F4  51F4               	movf	(_readAddress+3)& (0+255),w,b
  5504  0016F6  0100               	movlb	0	; () banked
  5505  0016F8  218E               	addwfc	(??_FlashReadUart+5)& (0+255),w,b
  5506  0016FA  6E1B               	movwf	FLASH_ReadByte@flashAddr+3,c
  5507  0016FC  ECC3  F020         	call	_FLASH_ReadByte	;wreg free
  5508  001700  6EDF               	movwf	indf2,c
  5509  001702  0100               	movlb	0	; () banked
  5510  001704  4BE4               	infsnz	FlashReadUart@idx& (0+255),f,b
  5511  001706  2BE5               	incf	(FlashReadUart@idx+1)& (0+255),f,b
  5512  001708  D7C8               	goto	l8220
  5513  00170A                     u8320:
  5514  00170A                     l8230:
  5515                           
  5516                           ; BSR set to: 0
  5517                           ;FlashApp.c: 115: }
  5518                           ;FlashApp.c: 117: TxMsg[(64) + (0x4)] = crc8(TxMsg, (64) + (0x4));
  5519  00170A  0E8F               	movlw	low FlashReadUart@TxMsg
  5520  00170C  6E18               	movwf	crc8@dataArray,c
  5521  00170E  0E00               	movlw	high FlashReadUart@TxMsg
  5522  001710  6E19               	movwf	crc8@dataArray+1,c
  5523  001712  0E00               	movlw	0
  5524  001714  6E1B               	movwf	crc8@dataSize+1,c
  5525  001716  0E44               	movlw	68
  5526  001718  6E1A               	movwf	crc8@dataSize,c
  5527  00171A  ECCF  F01C         	call	_crc8	;wreg free
  5528  00171E  0100               	movlb	0	; () banked
  5529  001720  6FD3               	movwf	(FlashReadUart@TxMsg+68)& (0+255),b
  5530                           
  5531                           ; BSR set to: 0
  5532                           ;FlashApp.c: 119: WriteUartMessage(TxMsg, (64) + (0x4) + 1);
  5533  001722  0E8F               	movlw	low FlashReadUart@TxMsg
  5534  001724  6E19               	movwf	WriteUartMessage@dataBuf,c
  5535  001726  0E00               	movlw	high FlashReadUart@TxMsg
  5536  001728  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5537  00172A  0E00               	movlw	0
  5538  00172C  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5539  00172E  0E45               	movlw	69
  5540  001730  6E1B               	movwf	WriteUartMessage@dataSize,c
  5541  001732  EC63  F01E         	call	_WriteUartMessage	;wreg free
  5542                           
  5543                           ;FlashApp.c: 120: _delay((unsigned long)((200)*(8000000/4000.0)));
  5544  001736  0E03               	movlw	3
  5545  001738  0100               	movlb	0	; () banked
  5546  00173A  6F8A               	movwf	(??_FlashReadUart+1)& (0+255),b
  5547  00173C  0E08               	movlw	8
  5548  00173E  6F89               	movwf	??_FlashReadUart& (0+255),b
  5549  001740  0E77               	movlw	119
  5550  001742                     u9037:
  5551  001742  2EE8               	decfsz	wreg,f,c
  5552  001744  D7FE               	bra	u9037
  5553  001746  2F89               	decfsz	??_FlashReadUart& (0+255),f,b
  5554  001748  D7FC               	bra	u9037
  5555  00174A  2F8A               	decfsz	(??_FlashReadUart+1)& (0+255),f,b
  5556  00174C  D7FA               	bra	u9037
  5557  00174E  0100               	movlb	0	; () banked
  5558  001750  4BE0               	infsnz	FlashReadUart@j& (0+255),f,b
  5559  001752  2BE1               	incf	(FlashReadUart@j+1)& (0+255),f,b
  5560  001754                     l331:
  5561                           
  5562                           ; BSR set to: 0
  5563                           
  5564                           ; BSR set to: 0
  5565  001754  51E2               	movf	FlashReadUart@numOfSampleToRead& (0+255),w,b
  5566  001756  5DE0               	subwf	FlashReadUart@j& (0+255),w,b
  5567  001758  51E1               	movf	(FlashReadUart@j+1)& (0+255),w,b
  5568  00175A  0A80               	xorlw	128
  5569  00175C  6F89               	movwf	??_FlashReadUart& (0+255),b
  5570  00175E  51E3               	movf	(FlashReadUart@numOfSampleToRead+1)& (0+255),w,b
  5571  001760  0A80               	xorlw	128
  5572  001762  5989               	subwfb	??_FlashReadUart& (0+255),w,b
  5573  001764  B0D8               	btfsc	status,0,c
  5574  001766  0012               	return	
  5575  001768  D76B               	goto	l332
  5576  00176A                     __end_of_FlashReadUart:
  5577                           	opt stack 0
  5578                           tosu	equ	0xFFF
  5579                           tosh	equ	0xFFE
  5580                           tosl	equ	0xFFD
  5581                           pclath	equ	0xFFA
  5582                           tblptru	equ	0xFF8
  5583                           tblptrh	equ	0xFF7
  5584                           tblptrl	equ	0xFF6
  5585                           tablat	equ	0xFF5
  5586                           prodh	equ	0xFF4
  5587                           prodl	equ	0xFF3
  5588                           postinc0	equ	0xFEE
  5589                           plusw0	equ	0xFEB
  5590                           wreg	equ	0xFE8
  5591                           postdec1	equ	0xFE5
  5592                           fsr1l	equ	0xFE1
  5593                           indf2	equ	0xFDF
  5594                           postinc2	equ	0xFDE
  5595                           plusw2	equ	0xFDB
  5596                           fsr2h	equ	0xFDA
  5597                           fsr2l	equ	0xFD9
  5598                           status	equ	0xFD8
  5599                           
  5600 ;; *************** function _FLASH_ReadByte *****************
  5601 ;; Defined at:
  5602 ;;		line 58 in file "mcc_generated_files/memory.c"
  5603 ;; Parameters:    Size  Location     Type
  5604 ;;  flashAddr       4   23[COMRAM] unsigned long 
  5605 ;; Auto vars:     Size  Location     Type
  5606 ;;		None
  5607 ;; Return value:  Size  Location     Type
  5608 ;;                  1    wreg      unsigned char 
  5609 ;; Registers used:
  5610 ;;		wreg, status,2
  5611 ;; Tracked objects:
  5612 ;;		On entry : 0/0
  5613 ;;		On exit  : 0/0
  5614 ;;		Unchanged: 0/0
  5615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5616 ;;      Params:         4       0       0       0       0       0       0
  5617 ;;      Locals:         0       0       0       0       0       0       0
  5618 ;;      Temps:          0       0       0       0       0       0       0
  5619 ;;      Totals:         4       0       0       0       0       0       0
  5620 ;;Total ram usage:        4 bytes
  5621 ;; Hardware stack levels used:    1
  5622 ;; Hardware stack levels required when called:    4
  5623 ;; This function calls:
  5624 ;;		Nothing
  5625 ;; This function is called by:
  5626 ;;		_FlashReadUart
  5627 ;;		_FLASH_ReadWord
  5628 ;;		_FLASH_WriteByte
  5629 ;; This function uses a non-reentrant model
  5630 ;;
  5631                           
  5632                           	psect	text16
  5633  004186                     __ptext16:
  5634                           	opt stack 0
  5635  004186                     _FLASH_ReadByte:
  5636                           	opt stack 23
  5637                           
  5638                           ;memory.c: 60: TBLPTRU = (uint8_t)((flashAddr & 0x00FF0000) >> 16);
  5639                           
  5640                           ;incstack = 0
  5641  004186  C01A  FFF8         	movff	FLASH_ReadByte@flashAddr+2,tblptru	;volatile
  5642                           
  5643                           ;memory.c: 61: TBLPTRH = (uint8_t)((flashAddr & 0x0000FF00)>> 8);
  5644  00418A  C019  FFF7         	movff	FLASH_ReadByte@flashAddr+1,tblptrh	;volatile
  5645                           
  5646                           ;memory.c: 62: TBLPTRL = (uint8_t)(flashAddr & 0x000000FF);
  5647  00418E  C018  FFF6         	movff	FLASH_ReadByte@flashAddr,tblptrl	;volatile
  5648  004192  0008               	tblrd		*	;# 
  5649                           
  5650                           ;memory.c: 66: return (TABLAT);
  5651  004194  50F5               	movf	tablat,w,c	;volatile
  5652  004196  0012               	return	
  5653  004198                     __end_of_FLASH_ReadByte:
  5654                           	opt stack 0
  5655                           tosu	equ	0xFFF
  5656                           tosh	equ	0xFFE
  5657                           tosl	equ	0xFFD
  5658                           pclath	equ	0xFFA
  5659                           tblptru	equ	0xFF8
  5660                           tblptrh	equ	0xFF7
  5661                           tblptrl	equ	0xFF6
  5662                           tablat	equ	0xFF5
  5663                           prodh	equ	0xFF4
  5664                           prodl	equ	0xFF3
  5665                           postinc0	equ	0xFEE
  5666                           plusw0	equ	0xFEB
  5667                           wreg	equ	0xFE8
  5668                           postdec1	equ	0xFE5
  5669                           fsr1l	equ	0xFE1
  5670                           indf2	equ	0xFDF
  5671                           postinc2	equ	0xFDE
  5672                           plusw2	equ	0xFDB
  5673                           fsr2h	equ	0xFDA
  5674                           fsr2l	equ	0xFD9
  5675                           status	equ	0xFD8
  5676                           
  5677 ;; *************** function _FlashReadCondition *****************
  5678 ;; Defined at:
  5679 ;;		line 138 in file "FlashApp.c"
  5680 ;; Parameters:    Size  Location     Type
  5681 ;;		None
  5682 ;; Auto vars:     Size  Location     Type
  5683 ;;  TxMsg           9   39[COMRAM] unsigned char [9]
  5684 ;; Return value:  Size  Location     Type
  5685 ;;                  1    wreg      void 
  5686 ;; Registers used:
  5687 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5688 ;; Tracked objects:
  5689 ;;		On entry : 0/0
  5690 ;;		On exit  : 0/0
  5691 ;;		Unchanged: 0/0
  5692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5693 ;;      Params:         0       0       0       0       0       0       0
  5694 ;;      Locals:         9       0       0       0       0       0       0
  5695 ;;      Temps:          4       0       0       0       0       0       0
  5696 ;;      Totals:        13       0       0       0       0       0       0
  5697 ;;Total ram usage:       13 bytes
  5698 ;; Hardware stack levels used:    1
  5699 ;; Hardware stack levels required when called:    6
  5700 ;; This function calls:
  5701 ;;		_WriteUartMessage
  5702 ;;		_ZeroArray
  5703 ;;		_crc8
  5704 ;;		_make8
  5705 ;; This function is called by:
  5706 ;;		_GroupFlashMemory
  5707 ;; This function uses a non-reentrant model
  5708 ;;
  5709                           
  5710                           	psect	text17
  5711  00203A                     __ptext17:
  5712                           	opt stack 0
  5713  00203A                     _FlashReadCondition:
  5714                           	opt stack 22
  5715                           
  5716                           ;FlashApp.c: 141: char TxMsg[4 + (0x4) + 1];
  5717                           ;FlashApp.c: 142: ZeroArray(TxMsg, 4 + (0x4) + 1);
  5718                           
  5719                           ;incstack = 0
  5720  00203A  0E28               	movlw	low FlashReadCondition@TxMsg
  5721  00203C  6E20               	movwf	ZeroArray@array,c
  5722  00203E  0E00               	movlw	high FlashReadCondition@TxMsg
  5723  002040  6E21               	movwf	ZeroArray@array+1,c
  5724  002042  0E00               	movlw	0
  5725  002044  6E23               	movwf	ZeroArray@size+1,c
  5726  002046  0E09               	movlw	9
  5727  002048  6E22               	movwf	ZeroArray@size,c
  5728  00204A  EC4B  F020         	call	_ZeroArray	;wreg free
  5729                           
  5730                           ;FlashApp.c: 145: TxMsg[(0)] = (0x24);
  5731  00204E  0E24               	movlw	36
  5732  002050  6E28               	movwf	FlashReadCondition@TxMsg,c
  5733                           
  5734                           ;FlashApp.c: 146: TxMsg[(1)] = FLASH_MSG;
  5735  002052  0E05               	movlw	5
  5736  002054  6E29               	movwf	FlashReadCondition@TxMsg+1,c
  5737                           
  5738                           ;FlashApp.c: 147: TxMsg[(2)] = FLASH_READ_CONDITION;
  5739  002056  0E52               	movlw	82
  5740  002058  6E2A               	movwf	FlashReadCondition@TxMsg+2,c
  5741                           
  5742                           ;FlashApp.c: 148: TxMsg[(3)] = 4;
  5743  00205A  0E04               	movlw	4
  5744  00205C  6E2B               	movwf	FlashReadCondition@TxMsg+3,c
  5745                           
  5746                           ;FlashApp.c: 153: TxMsg[(0x4) + 0] = make8(0x7FF0 - 0x4580,1);
  5747  00205E  0E70               	movlw	112
  5748  002060  6E18               	movwf	make8@data,c
  5749  002062  0E3A               	movlw	58
  5750  002064  6E19               	movwf	make8@data+1,c
  5751  002066  0E00               	movlw	0
  5752  002068  6E1A               	movwf	make8@data+2,c
  5753  00206A  0E00               	movlw	0
  5754  00206C  6E1B               	movwf	make8@data+3,c
  5755  00206E  0E01               	movlw	1
  5756  002070  6E1C               	movwf	make8@dataLocation,c
  5757  002072  EC48  F01B         	call	_make8	;wreg free
  5758  002076  6E2C               	movwf	FlashReadCondition@TxMsg+4,c
  5759                           
  5760                           ;FlashApp.c: 154: TxMsg[(0x4) + 1] = make8(0x7FF0 - 0x4580,0);
  5761  002078  0E70               	movlw	112
  5762  00207A  6E18               	movwf	make8@data,c
  5763  00207C  0E3A               	movlw	58
  5764  00207E  6E19               	movwf	make8@data+1,c
  5765  002080  0E00               	movlw	0
  5766  002082  6E1A               	movwf	make8@data+2,c
  5767  002084  0E00               	movlw	0
  5768  002086  6E1B               	movwf	make8@data+3,c
  5769  002088  0E00               	movlw	0
  5770  00208A  6E1C               	movwf	make8@dataLocation,c
  5771  00208C  EC48  F01B         	call	_make8	;wreg free
  5772  002090  6E2D               	movwf	FlashReadCondition@TxMsg+5,c
  5773                           
  5774                           ;FlashApp.c: 157: TxMsg[(0x4) + 2] = make8(0x7FF0 - writeAddress,1);
  5775  002092  C03F  F024         	movff	_writeAddress,??_FlashReadCondition
  5776  002096  C040  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  5777  00209A  C041  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  5778  00209E  C042  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  5779  0020A2  1E24               	comf	??_FlashReadCondition,f,c
  5780  0020A4  1E25               	comf	??_FlashReadCondition+1,f,c
  5781  0020A6  1E26               	comf	??_FlashReadCondition+2,f,c
  5782  0020A8  1E27               	comf	??_FlashReadCondition+3,f,c
  5783  0020AA  2A24               	incf	??_FlashReadCondition,f,c
  5784  0020AC  0E00               	movlw	0
  5785  0020AE  2225               	addwfc	??_FlashReadCondition+1,f,c
  5786  0020B0  2226               	addwfc	??_FlashReadCondition+2,f,c
  5787  0020B2  2227               	addwfc	??_FlashReadCondition+3,f,c
  5788  0020B4  0EF0               	movlw	240
  5789  0020B6  2424               	addwf	??_FlashReadCondition,w,c
  5790  0020B8  6E18               	movwf	make8@data,c
  5791  0020BA  0E7F               	movlw	127
  5792  0020BC  2025               	addwfc	??_FlashReadCondition+1,w,c
  5793  0020BE  6E19               	movwf	make8@data+1,c
  5794  0020C0  0E00               	movlw	0
  5795  0020C2  2026               	addwfc	??_FlashReadCondition+2,w,c
  5796  0020C4  6E1A               	movwf	make8@data+2,c
  5797  0020C6  0E00               	movlw	0
  5798  0020C8  2027               	addwfc	??_FlashReadCondition+3,w,c
  5799  0020CA  6E1B               	movwf	make8@data+3,c
  5800  0020CC  0E01               	movlw	1
  5801  0020CE  6E1C               	movwf	make8@dataLocation,c
  5802  0020D0  EC48  F01B         	call	_make8	;wreg free
  5803  0020D4  6E2E               	movwf	FlashReadCondition@TxMsg+6,c
  5804                           
  5805                           ;FlashApp.c: 158: TxMsg[(0x4) + 3] = make8(0x7FF0 - writeAddress,0);
  5806  0020D6  C03F  F024         	movff	_writeAddress,??_FlashReadCondition
  5807  0020DA  C040  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  5808  0020DE  C041  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  5809  0020E2  C042  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  5810  0020E6  1E24               	comf	??_FlashReadCondition,f,c
  5811  0020E8  1E25               	comf	??_FlashReadCondition+1,f,c
  5812  0020EA  1E26               	comf	??_FlashReadCondition+2,f,c
  5813  0020EC  1E27               	comf	??_FlashReadCondition+3,f,c
  5814  0020EE  2A24               	incf	??_FlashReadCondition,f,c
  5815  0020F0  0E00               	movlw	0
  5816  0020F2  2225               	addwfc	??_FlashReadCondition+1,f,c
  5817  0020F4  2226               	addwfc	??_FlashReadCondition+2,f,c
  5818  0020F6  2227               	addwfc	??_FlashReadCondition+3,f,c
  5819  0020F8  0EF0               	movlw	240
  5820  0020FA  2424               	addwf	??_FlashReadCondition,w,c
  5821  0020FC  6E18               	movwf	make8@data,c
  5822  0020FE  0E7F               	movlw	127
  5823  002100  2025               	addwfc	??_FlashReadCondition+1,w,c
  5824  002102  6E19               	movwf	make8@data+1,c
  5825  002104  0E00               	movlw	0
  5826  002106  2026               	addwfc	??_FlashReadCondition+2,w,c
  5827  002108  6E1A               	movwf	make8@data+2,c
  5828  00210A  0E00               	movlw	0
  5829  00210C  2027               	addwfc	??_FlashReadCondition+3,w,c
  5830  00210E  6E1B               	movwf	make8@data+3,c
  5831  002110  0E00               	movlw	0
  5832  002112  6E1C               	movwf	make8@dataLocation,c
  5833  002114  EC48  F01B         	call	_make8	;wreg free
  5834  002118  6E2F               	movwf	FlashReadCondition@TxMsg+7,c
  5835                           
  5836                           ;FlashApp.c: 160: TxMsg[4 + (0x4)] = crc8(TxMsg, 4 + (0x4));
  5837  00211A  0E28               	movlw	low FlashReadCondition@TxMsg
  5838  00211C  6E18               	movwf	crc8@dataArray,c
  5839  00211E  0E00               	movlw	high FlashReadCondition@TxMsg
  5840  002120  6E19               	movwf	crc8@dataArray+1,c
  5841  002122  0E00               	movlw	0
  5842  002124  6E1B               	movwf	crc8@dataSize+1,c
  5843  002126  0E08               	movlw	8
  5844  002128  6E1A               	movwf	crc8@dataSize,c
  5845  00212A  ECCF  F01C         	call	_crc8	;wreg free
  5846  00212E  6E30               	movwf	FlashReadCondition@TxMsg+8,c
  5847                           
  5848                           ;FlashApp.c: 162: WriteUartMessage(TxMsg, 4 + (0x4) + 1);
  5849  002130  0E28               	movlw	low FlashReadCondition@TxMsg
  5850  002132  6E19               	movwf	WriteUartMessage@dataBuf,c
  5851  002134  0E00               	movlw	high FlashReadCondition@TxMsg
  5852  002136  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5853  002138  0E00               	movlw	0
  5854  00213A  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5855  00213C  0E09               	movlw	9
  5856  00213E  6E1B               	movwf	WriteUartMessage@dataSize,c
  5857  002140  EC63  F01E         	call	_WriteUartMessage	;wreg free
  5858  002144  0012               	return		;funcret
  5859  002146                     __end_of_FlashReadCondition:
  5860                           	opt stack 0
  5861                           tosu	equ	0xFFF
  5862                           tosh	equ	0xFFE
  5863                           tosl	equ	0xFFD
  5864                           pclath	equ	0xFFA
  5865                           tblptru	equ	0xFF8
  5866                           tblptrh	equ	0xFF7
  5867                           tblptrl	equ	0xFF6
  5868                           tablat	equ	0xFF5
  5869                           prodh	equ	0xFF4
  5870                           prodl	equ	0xFF3
  5871                           postinc0	equ	0xFEE
  5872                           plusw0	equ	0xFEB
  5873                           wreg	equ	0xFE8
  5874                           postdec1	equ	0xFE5
  5875                           fsr1l	equ	0xFE1
  5876                           indf2	equ	0xFDF
  5877                           postinc2	equ	0xFDE
  5878                           plusw2	equ	0xFDB
  5879                           fsr2h	equ	0xFDA
  5880                           fsr2l	equ	0xFD9
  5881                           status	equ	0xFD8
  5882                           
  5883 ;; *************** function _FlashEreaseMem *****************
  5884 ;; Defined at:
  5885 ;;		line 129 in file "FlashApp.c"
  5886 ;; Parameters:    Size  Location     Type
  5887 ;;		None
  5888 ;; Auto vars:     Size  Location     Type
  5889 ;;		None
  5890 ;; Return value:  Size  Location     Type
  5891 ;;                  1    wreg      void 
  5892 ;; Registers used:
  5893 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5894 ;; Tracked objects:
  5895 ;;		On entry : 0/0
  5896 ;;		On exit  : 0/0
  5897 ;;		Unchanged: 0/0
  5898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5899 ;;      Params:         0       0       0       0       0       0       0
  5900 ;;      Locals:         0       0       0       0       0       0       0
  5901 ;;      Temps:          0       0       0       0       0       0       0
  5902 ;;      Totals:         0       0       0       0       0       0       0
  5903 ;;Total ram usage:        0 bytes
  5904 ;; Hardware stack levels used:    1
  5905 ;; Hardware stack levels required when called:    7
  5906 ;; This function calls:
  5907 ;;		_SendAckMessage
  5908 ;;		_ZeroArray
  5909 ;; This function is called by:
  5910 ;;		_GroupFlashMemory
  5911 ;; This function uses a non-reentrant model
  5912 ;;
  5913                           
  5914                           	psect	text18
  5915  0038FA                     __ptext18:
  5916                           	opt stack 0
  5917  0038FA                     _FlashEreaseMem:
  5918                           	opt stack 21
  5919                           
  5920                           ;FlashApp.c: 131: writeAddress = 0x4580;
  5921                           
  5922                           ;incstack = 0
  5923  0038FA  0E80               	movlw	128
  5924  0038FC  6E3F               	movwf	_writeAddress,c
  5925  0038FE  0E45               	movlw	69
  5926  003900  6E40               	movwf	_writeAddress+1,c
  5927  003902  0E00               	movlw	0
  5928  003904  6E41               	movwf	_writeAddress+2,c
  5929  003906  0E00               	movlw	0
  5930  003908  6E42               	movwf	_writeAddress+3,c
  5931                           
  5932                           ;FlashApp.c: 132: readAddress = 0x4580;
  5933  00390A  0E80               	movlw	128
  5934  00390C  0101               	movlb	1	; () banked
  5935  00390E  6FF1               	movwf	_readAddress& (0+255),b
  5936  003910  0E45               	movlw	69
  5937  003912  6FF2               	movwf	(_readAddress+1)& (0+255),b
  5938  003914  0E00               	movlw	0
  5939  003916  6FF3               	movwf	(_readAddress+2)& (0+255),b
  5940  003918  0E00               	movlw	0
  5941  00391A  6FF4               	movwf	(_readAddress+3)& (0+255),b
  5942                           
  5943                           ;FlashApp.c: 133: numOfValidateSamples = 0;
  5944  00391C  0E00               	movlw	0
  5945  00391E  6E31               	movwf	_numOfValidateSamples,c
  5946  003920  0E00               	movlw	0
  5947  003922  6E32               	movwf	_numOfValidateSamples+1,c
  5948  003924  0E00               	movlw	0
  5949  003926  6E33               	movwf	_numOfValidateSamples+2,c
  5950  003928  0E00               	movlw	0
  5951  00392A  6E34               	movwf	_numOfValidateSamples+3,c
  5952                           
  5953                           ; BSR set to: 1
  5954                           ;FlashApp.c: 134: ZeroArray(sampleArray, (64)/sizeof(adc_result_t));
  5955  00392C  0E32               	movlw	low _sampleArray
  5956  00392E  6E20               	movwf	ZeroArray@array,c
  5957  003930  0E01               	movlw	high _sampleArray
  5958  003932  6E21               	movwf	ZeroArray@array+1,c
  5959  003934  0E00               	movlw	0
  5960  003936  6E23               	movwf	ZeroArray@size+1,c
  5961  003938  0E20               	movlw	32
  5962  00393A  6E22               	movwf	ZeroArray@size,c
  5963  00393C  EC4B  F020         	call	_ZeroArray	;wreg free
  5964                           
  5965                           ;FlashApp.c: 135: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_EREASE_MEMORY
      +                          );
  5966  003940  0E51               	movlw	81
  5967  003942  6E24               	movwf	SendAckMessage@inRequest,c
  5968  003944  0E05               	movlw	5
  5969  003946  ECA6  F01C         	call	_SendAckMessage
  5970  00394A  0012               	return		;funcret
  5971  00394C                     __end_of_FlashEreaseMem:
  5972                           	opt stack 0
  5973                           tosu	equ	0xFFF
  5974                           tosh	equ	0xFFE
  5975                           tosl	equ	0xFFD
  5976                           pclath	equ	0xFFA
  5977                           tblptru	equ	0xFF8
  5978                           tblptrh	equ	0xFF7
  5979                           tblptrl	equ	0xFF6
  5980                           tablat	equ	0xFF5
  5981                           prodh	equ	0xFF4
  5982                           prodl	equ	0xFF3
  5983                           postinc0	equ	0xFEE
  5984                           plusw0	equ	0xFEB
  5985                           wreg	equ	0xFE8
  5986                           postdec1	equ	0xFE5
  5987                           fsr1l	equ	0xFE1
  5988                           indf2	equ	0xFDF
  5989                           postinc2	equ	0xFDE
  5990                           plusw2	equ	0xFDB
  5991                           fsr2h	equ	0xFDA
  5992                           fsr2l	equ	0xFD9
  5993                           status	equ	0xFD8
  5994                           
  5995 ;; *************** function _DacSetValue *****************
  5996 ;; Defined at:
  5997 ;;		line 30 in file "DacApp.c"
  5998 ;; Parameters:    Size  Location     Type
  5999 ;;  data            2   42[BANK0 ] PTR unsigned char 
  6000 ;;		 -> rxMsgData(20), 
  6001 ;; Auto vars:     Size  Location     Type
  6002 ;;  retVal          8   49[BANK0 ] struct .
  6003 ;;  dacIndex        1   48[BANK0 ] char 
  6004 ;; Return value:  Size  Location     Type
  6005 ;;                  1    wreg      void 
  6006 ;; Registers used:
  6007 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6008 ;; Tracked objects:
  6009 ;;		On entry : 0/0
  6010 ;;		On exit  : 0/0
  6011 ;;		Unchanged: 0/0
  6012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6013 ;;      Params:         0       2       0       0       0       0       0
  6014 ;;      Locals:         0       9       0       0       0       0       0
  6015 ;;      Temps:          0       4       0       0       0       0       0
  6016 ;;      Totals:         0      15       0       0       0       0       0
  6017 ;;Total ram usage:       15 bytes
  6018 ;; Hardware stack levels used:    1
  6019 ;; Hardware stack levels required when called:    8
  6020 ;; This function calls:
  6021 ;;		_GetIntFromUartData
  6022 ;;		_SWSPI_send_word
  6023 ;;		_SendAckMessage
  6024 ;;		_StoreIntInEeprom
  6025 ;; This function is called by:
  6026 ;;		_GroupDAC
  6027 ;; This function uses a non-reentrant model
  6028 ;;
  6029                           
  6030                           	psect	text19
  6031  002F78                     __ptext19:
  6032                           	opt stack 0
  6033  002F78                     _DacSetValue:
  6034                           	opt stack 20
  6035                           
  6036                           ;DacApp.c: 32: INT_VAL retVal;
  6037                           ;DacApp.c: 33: retVal = GetIntFromUartData(16, data);
  6038                           
  6039                           ;incstack = 0
  6040  002F78  C08A  F066         	movff	DacSetValue@data,GetIntFromUartData@data
  6041  002F7C  C08B  F067         	movff	DacSetValue@data+1,GetIntFromUartData@data+1
  6042  002F80  0E10               	movlw	16
  6043  002F82  EC37  F00E         	call	_GetIntFromUartData
  6044  002F86  EE20  F091         	lfsr	2,DacSetValue@retVal
  6045  002F8A  0E07               	movlw	7
  6046  002F8C                     u8341:
  6047  002F8C  CFEB FFDB          	movff	plusw0,plusw2
  6048  002F90  06E8               	decf	wreg,f,c
  6049  002F92  E2FC               	bc	u8341
  6050                           
  6051                           ;DacApp.c: 34: SWSPI_send_word(EXT_DAC, retVal.num, 1);
  6052  002F94  C091  F029         	movff	DacSetValue@retVal,SWSPI_send_word@data
  6053  002F98  C092  F02A         	movff	DacSetValue@retVal+1,SWSPI_send_word@data+1
  6054  002F9C  C093  F02B         	movff	DacSetValue@retVal+2,SWSPI_send_word@data+2
  6055  002FA0  C094  F02C         	movff	DacSetValue@retVal+3,SWSPI_send_word@data+3
  6056  002FA4  0E01               	movlw	1
  6057  002FA6  6E2D               	movwf	SWSPI_send_word@dataSize,c
  6058  002FA8  0E02               	movlw	2
  6059  002FAA  EC67  F017         	call	_SWSPI_send_word
  6060                           
  6061                           ;DacApp.c: 37: int8_t dacIndex = (retVal.num >> 14);
  6062  002FAE  C091  F08C         	movff	DacSetValue@retVal,??_DacSetValue
  6063  002FB2  C092  F08D         	movff	DacSetValue@retVal+1,??_DacSetValue+1
  6064  002FB6  C093  F08E         	movff	DacSetValue@retVal+2,??_DacSetValue+2
  6065  002FBA  C094  F08F         	movff	DacSetValue@retVal+3,??_DacSetValue+3
  6066  002FBE  0E0F               	movlw	15
  6067  002FC0  D006               	goto	u8350
  6068  002FC2                     u8355:
  6069  002FC2  0100               	movlb	0	; () banked
  6070  002FC4  90D8               	bcf	status,0,c
  6071  002FC6  338F               	rrcf	(??_DacSetValue+3)& (0+255),f,b
  6072  002FC8  338E               	rrcf	(??_DacSetValue+2)& (0+255),f,b
  6073  002FCA  338D               	rrcf	(??_DacSetValue+1)& (0+255),f,b
  6074  002FCC  338C               	rrcf	??_DacSetValue& (0+255),f,b
  6075  002FCE                     u8350:
  6076  002FCE  2EE8               	decfsz	wreg,f,c
  6077  002FD0  D7F8               	goto	u8355
  6078  002FD2  518C               	movf	??_DacSetValue& (0+255),w,b
  6079  002FD4  6F90               	movwf	DacSetValue@dacIndex& (0+255),b
  6080                           
  6081                           ; BSR set to: 0
  6082                           ;DacApp.c: 38: StoreIntInEeprom(retVal.num, (0x40) | DAC_ADDRES[dacIndex], 2);
  6083  002FD6  C091  F021         	movff	DacSetValue@retVal,StoreIntInEeprom@data
  6084  002FDA  C092  F022         	movff	DacSetValue@retVal+1,StoreIntInEeprom@data+1
  6085  002FDE  C093  F023         	movff	DacSetValue@retVal+2,StoreIntInEeprom@data+2
  6086  002FE2  C094  F024         	movff	DacSetValue@retVal+3,StoreIntInEeprom@data+3
  6087  002FE6  5190               	movf	DacSetValue@dacIndex& (0+255),w,b
  6088  002FE8  0D01               	mullw	1
  6089  002FEA  0E53               	movlw	low _DAC_ADDRES
  6090  002FEC  24F3               	addwf	prodl,w,c
  6091  002FEE  6EF6               	movwf	tblptrl,c
  6092  002FF0  0E06               	movlw	high _DAC_ADDRES
  6093  002FF2  20F4               	addwfc	prodh,w,c
  6094  002FF4  6EF7               	movwf	tblptrh,c
  6095  002FF6                     	if	0	;There are less than 3 active tblptr bytes
  6096  002FF6                     	endif
  6097  002FF6  0008               	tblrd		*
  6098  002FF8  50F5               	movf	tablat,w,c
  6099  002FFA  0940               	iorlw	64
  6100  002FFC  6E25               	movwf	StoreIntInEeprom@address,c
  6101  002FFE  0E00               	movlw	0
  6102  003000  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  6103  003002  0E02               	movlw	2
  6104  003004  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  6105  003006  EC10  F01E         	call	_StoreIntInEeprom	;wreg free
  6106                           
  6107                           ;DacApp.c: 41: SendAckMessage((MSG_GROUPS)DAC_MSG, (MSG_REQUEST)DAC_SET_VALUE);
  6108  00300A  0E61               	movlw	97
  6109  00300C  6E24               	movwf	SendAckMessage@inRequest,c
  6110  00300E  0E06               	movlw	6
  6111  003010  ECA6  F01C         	call	_SendAckMessage
  6112  003014  0012               	return		;funcret
  6113  003016                     __end_of_DacSetValue:
  6114                           	opt stack 0
  6115                           tosu	equ	0xFFF
  6116                           tosh	equ	0xFFE
  6117                           tosl	equ	0xFFD
  6118                           pclath	equ	0xFFA
  6119                           tblptru	equ	0xFF8
  6120                           tblptrh	equ	0xFF7
  6121                           tblptrl	equ	0xFF6
  6122                           tablat	equ	0xFF5
  6123                           prodh	equ	0xFF4
  6124                           prodl	equ	0xFF3
  6125                           postinc0	equ	0xFEE
  6126                           plusw0	equ	0xFEB
  6127                           wreg	equ	0xFE8
  6128                           postdec1	equ	0xFE5
  6129                           fsr1l	equ	0xFE1
  6130                           indf2	equ	0xFDF
  6131                           postinc2	equ	0xFDE
  6132                           plusw2	equ	0xFDB
  6133                           fsr2h	equ	0xFDA
  6134                           fsr2l	equ	0xFD9
  6135                           status	equ	0xFD8
  6136                           
  6137 ;; *************** function _GetIntFromUartData *****************
  6138 ;; Defined at:
  6139 ;;		line 47 in file "SystemCommon.c"
  6140 ;; Parameters:    Size  Location     Type
  6141 ;;  num             1    wreg     char 
  6142 ;;  data            2    6[BANK0 ] PTR unsigned char 
  6143 ;;		 -> rxMsgData(20), 
  6144 ;; Auto vars:     Size  Location     Type
  6145 ;;  num             1   26[BANK0 ] char 
  6146 ;;  idxCon          2   36[BANK0 ] int 
  6147 ;;  dataRegArr     10   16[BANK0 ] unsigned char [10]
  6148 ;;  retVal          8   28[BANK0 ] struct .
  6149 ;;  idxData         1   38[BANK0 ] unsigned char 
  6150 ;;  recVal          1   27[BANK0 ] unsigned char 
  6151 ;; Return value:  Size  Location     Type
  6152 ;;                  8    6[BANK0 ] struct .
  6153 ;; Registers used:
  6154 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6155 ;; Tracked objects:
  6156 ;;		On entry : 0/0
  6157 ;;		On exit  : 0/0
  6158 ;;		Unchanged: 0/0
  6159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6160 ;;      Params:         0       8       0       0       0       0       0
  6161 ;;      Locals:         0      23       0       0       0       0       0
  6162 ;;      Temps:          0       2       0       0       0       0       0
  6163 ;;      Totals:         0      33       0       0       0       0       0
  6164 ;;Total ram usage:       33 bytes
  6165 ;; Hardware stack levels used:    1
  6166 ;; Hardware stack levels required when called:    7
  6167 ;; This function calls:
  6168 ;;		_ZeroArray
  6169 ;;		_strtol
  6170 ;; This function is called by:
  6171 ;;		_FlashReadUart
  6172 ;;		_DacSetValue
  6173 ;;		_UpdateSynthFreq
  6174 ;; This function uses a non-reentrant model
  6175 ;;
  6176                           
  6177                           	psect	text20
  6178  001C6E                     __ptext20:
  6179                           	opt stack 0
  6180  001C6E                     _GetIntFromUartData:
  6181                           	opt stack 20
  6182                           
  6183                           ;incstack = 0
  6184                           ;GetIntFromUartData@num stored from wreg
  6185  001C6E  0100               	movlb	0	; () banked
  6186  001C70  6F7A               	movwf	GetIntFromUartData@num& (0+255),b
  6187                           
  6188                           ;SystemCommon.c: 49: INT_VAL retVal;
  6189                           ;SystemCommon.c: 50: retVal.num = 0;
  6190  001C72  0E00               	movlw	0
  6191  001C74  0100               	movlb	0	; () banked
  6192  001C76  6F7C               	movwf	GetIntFromUartData@retVal& (0+255),b
  6193  001C78  0E00               	movlw	0
  6194  001C7A  6F7D               	movwf	(GetIntFromUartData@retVal+1)& (0+255),b
  6195  001C7C  0E00               	movlw	0
  6196  001C7E  6F7E               	movwf	(GetIntFromUartData@retVal+2)& (0+255),b
  6197  001C80  0E00               	movlw	0
  6198  001C82  6F7F               	movwf	(GetIntFromUartData@retVal+3)& (0+255),b
  6199                           
  6200                           ;SystemCommon.c: 51: retVal.con = 0;
  6201  001C84  0E00               	movlw	0
  6202  001C86  6F80               	movwf	(GetIntFromUartData@retVal+4)& (0+255),b
  6203  001C88  0E00               	movlw	0
  6204  001C8A  6F81               	movwf	(GetIntFromUartData@retVal+5)& (0+255),b
  6205  001C8C  0E00               	movlw	0
  6206  001C8E  6F82               	movwf	(GetIntFromUartData@retVal+6)& (0+255),b
  6207  001C90  0E00               	movlw	0
  6208  001C92  6F83               	movwf	(GetIntFromUartData@retVal+7)& (0+255),b
  6209                           
  6210                           ;SystemCommon.c: 52: uint8_t idxData = 0;
  6211  001C94  0E00               	movlw	0
  6212  001C96  6F86               	movwf	GetIntFromUartData@idxData& (0+255),b
  6213                           
  6214                           ;SystemCommon.c: 53: char recVal = (0);
  6215  001C98  0E00               	movlw	0
  6216  001C9A  6F7B               	movwf	GetIntFromUartData@recVal& (0+255),b
  6217                           
  6218                           ; BSR set to: 0
  6219                           ;SystemCommon.c: 55: char dataRegArr[0xA];
  6220                           ;SystemCommon.c: 56: ZeroArray(dataRegArr, 0xA);
  6221  001C9C  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6222  001C9E  6E20               	movwf	ZeroArray@array,c
  6223  001CA0  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6224  001CA2  6E21               	movwf	ZeroArray@array+1,c
  6225  001CA4  0E00               	movlw	0
  6226  001CA6  6E23               	movwf	ZeroArray@size+1,c
  6227  001CA8  0E0A               	movlw	10
  6228  001CAA  6E22               	movwf	ZeroArray@size,c
  6229  001CAC  EC4B  F020         	call	_ZeroArray	;wreg free
  6230                           
  6231                           ;SystemCommon.c: 58: for(idxData = 0; idxData < 0xA; idxData++)
  6232  001CB0  0E00               	movlw	0
  6233  001CB2  0100               	movlb	0	; () banked
  6234  001CB4  6F86               	movwf	GetIntFromUartData@idxData& (0+255),b
  6235  001CB6                     l7940:
  6236                           
  6237                           ; BSR set to: 0
  6238  001CB6  0E09               	movlw	9
  6239  001CB8  6586               	cpfsgt	GetIntFromUartData@idxData& (0+255),b
  6240  001CBA  D001               	goto	l1407
  6241  001CBC  D01D               	goto	u7940
  6242  001CBE                     l1407:
  6243                           
  6244                           ; BSR set to: 0
  6245                           ;SystemCommon.c: 59: {
  6246                           ;SystemCommon.c: 60: recVal = data[idxData];
  6247                           
  6248                           ; BSR set to: 0
  6249  001CBE  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  6250  001CC0  0D01               	mullw	1
  6251  001CC2  50F3               	movf	prodl,w,c
  6252  001CC4  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  6253  001CC6  6ED9               	movwf	fsr2l,c
  6254  001CC8  50F4               	movf	prodh,w,c
  6255  001CCA  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  6256  001CCC  6EDA               	movwf	fsr2h,c
  6257  001CCE  50DF               	movf	indf2,w,c
  6258  001CD0  6F7B               	movwf	GetIntFromUartData@recVal& (0+255),b
  6259                           
  6260                           ; BSR set to: 0
  6261                           ;SystemCommon.c: 61: if(recVal == 0x10)
  6262  001CD2  0E10               	movlw	16
  6263  001CD4  197B               	xorwf	GetIntFromUartData@recVal& (0+255),w,b
  6264  001CD6  A4D8               	btfss	status,2,c
  6265  001CD8  D002               	goto	l1409
  6266                           
  6267                           ; BSR set to: 0
  6268                           ;SystemCommon.c: 62: {
  6269                           ;SystemCommon.c: 63: idxData++;
  6270  001CDA  2B86               	incf	GetIntFromUartData@idxData& (0+255),f,b
  6271                           
  6272                           ;SystemCommon.c: 64: break;
  6273  001CDC  D00D               	goto	u7940
  6274  001CDE                     l1409:
  6275                           
  6276                           ; BSR set to: 0
  6277                           ;SystemCommon.c: 66: else
  6278                           ;SystemCommon.c: 67: {
  6279                           ;SystemCommon.c: 68: dataRegArr[idxData] = recVal + '0';
  6280                           
  6281                           ; BSR set to: 0
  6282  001CDE  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  6283  001CE0  0D01               	mullw	1
  6284  001CE2  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6285  001CE4  24F3               	addwf	prodl,w,c
  6286  001CE6  6ED9               	movwf	fsr2l,c
  6287  001CE8  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6288  001CEA  20F4               	addwfc	prodh,w,c
  6289  001CEC  6EDA               	movwf	fsr2h,c
  6290  001CEE  517B               	movf	GetIntFromUartData@recVal& (0+255),w,b
  6291  001CF0  0F30               	addlw	48
  6292  001CF2  6EDF               	movwf	indf2,c
  6293                           
  6294                           ; BSR set to: 0
  6295                           
  6296                           ; BSR set to: 0
  6297  001CF4  2B86               	incf	GetIntFromUartData@idxData& (0+255),f,b
  6298  001CF6  D7DF               	goto	l7940
  6299  001CF8                     u7940:
  6300                           
  6301                           ; BSR set to: 0
  6302                           ;SystemCommon.c: 69: }
  6303                           ;SystemCommon.c: 70: }
  6304                           ;SystemCommon.c: 71: retVal.num = strtol(dataRegArr, (0), num);
  6305                           
  6306                           ; BSR set to: 0
  6307  001CF8  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6308  001CFA  6E26               	movwf	strtol@s,c
  6309  001CFC  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6310  001CFE  6E27               	movwf	strtol@s+1,c
  6311  001D00  0E00               	movlw	0
  6312  001D02  6E28               	movwf	strtol@endptr,c
  6313  001D04  0E00               	movlw	0
  6314  001D06  6E29               	movwf	strtol@endptr+1,c
  6315  001D08  517A               	movf	GetIntFromUartData@num& (0+255),w,b
  6316  001D0A  6E2A               	movwf	strtol@base,c
  6317  001D0C  6A2B               	clrf	strtol@base+1,c
  6318  001D0E  BE2A               	btfsc	strtol@base,7,c
  6319  001D10  062B               	decf	strtol@base+1,f,c
  6320  001D12  ECB5  F00B         	call	_strtol	;wreg free
  6321  001D16  C026  F07C         	movff	?_strtol,GetIntFromUartData@retVal
  6322  001D1A  C027  F07D         	movff	?_strtol+1,GetIntFromUartData@retVal+1
  6323  001D1E  C028  F07E         	movff	?_strtol+2,GetIntFromUartData@retVal+2
  6324  001D22  C029  F07F         	movff	?_strtol+3,GetIntFromUartData@retVal+3
  6325                           
  6326                           ;SystemCommon.c: 73: ZeroArray(dataRegArr, 0xA);
  6327  001D26  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6328  001D28  6E20               	movwf	ZeroArray@array,c
  6329  001D2A  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6330  001D2C  6E21               	movwf	ZeroArray@array+1,c
  6331  001D2E  0E00               	movlw	0
  6332  001D30  6E23               	movwf	ZeroArray@size+1,c
  6333  001D32  0E0A               	movlw	10
  6334  001D34  6E22               	movwf	ZeroArray@size,c
  6335  001D36  EC4B  F020         	call	_ZeroArray	;wreg free
  6336                           
  6337                           ;SystemCommon.c: 75: for(int idxCon = 0; idxCon < 0xA; idxCon++)
  6338  001D3A  0E00               	movlw	0
  6339  001D3C  0100               	movlb	0	; () banked
  6340  001D3E  6F85               	movwf	(GetIntFromUartData@idxCon+1)& (0+255),b
  6341  001D40  0E00               	movlw	0
  6342  001D42  6F84               	movwf	GetIntFromUartData@idxCon& (0+255),b
  6343  001D44                     l7962:
  6344                           
  6345                           ; BSR set to: 0
  6346  001D44  BF85               	btfsc	(GetIntFromUartData@idxCon+1)& (0+255),7,b
  6347  001D46  D006               	goto	l1411
  6348  001D48  5185               	movf	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  6349  001D4A  E12E               	bnz	l7980
  6350  001D4C  0E0A               	movlw	10
  6351  001D4E  5D84               	subwf	GetIntFromUartData@idxCon& (0+255),w,b
  6352  001D50  B0D8               	btfsc	status,0,c
  6353  001D52  D02A               	goto	u7970
  6354  001D54                     l1411:
  6355                           
  6356                           ; BSR set to: 0
  6357                           ;SystemCommon.c: 76: {
  6358                           ;SystemCommon.c: 77: recVal = data[idxData + idxCon];
  6359                           
  6360                           ; BSR set to: 0
  6361  001D54  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  6362  001D56  2584               	addwf	GetIntFromUartData@idxCon& (0+255),w,b
  6363  001D58  6F6E               	movwf	??_GetIntFromUartData& (0+255),b
  6364  001D5A  0E00               	movlw	0
  6365  001D5C  2185               	addwfc	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  6366  001D5E  6F6F               	movwf	(??_GetIntFromUartData+1)& (0+255),b
  6367  001D60  516E               	movf	??_GetIntFromUartData& (0+255),w,b
  6368  001D62  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  6369  001D64  6ED9               	movwf	fsr2l,c
  6370  001D66  516F               	movf	(??_GetIntFromUartData+1)& (0+255),w,b
  6371  001D68  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  6372  001D6A  6EDA               	movwf	fsr2h,c
  6373  001D6C  50DF               	movf	indf2,w,c
  6374  001D6E  6F7B               	movwf	GetIntFromUartData@recVal& (0+255),b
  6375                           
  6376                           ; BSR set to: 0
  6377                           ;SystemCommon.c: 78: if(recVal == 0x23)
  6378  001D70  0E23               	movlw	35
  6379  001D72  197B               	xorwf	GetIntFromUartData@recVal& (0+255),w,b
  6380  001D74  B4D8               	btfsc	status,2,c
  6381  001D76  D018               	goto	u7970
  6382                           
  6383                           ; BSR set to: 0
  6384                           ;SystemCommon.c: 82: else
  6385                           ;SystemCommon.c: 83: {
  6386                           ;SystemCommon.c: 84: dataRegArr[idxCon] = data[idxCon + idxData] + '0';
  6387                           
  6388                           ; BSR set to: 0
  6389                           
  6390                           ; BSR set to: 0
  6391                           ;SystemCommon.c: 81: }
  6392                           
  6393                           ; BSR set to: 0
  6394                           ;SystemCommon.c: 79: {
  6395                           ;SystemCommon.c: 80: break;
  6396  001D78  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6397  001D7A  2584               	addwf	GetIntFromUartData@idxCon& (0+255),w,b
  6398  001D7C  6ED9               	movwf	fsr2l,c
  6399  001D7E  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6400  001D80  2185               	addwfc	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  6401  001D82  6EDA               	movwf	fsr2h,c
  6402  001D84  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  6403  001D86  2584               	addwf	GetIntFromUartData@idxCon& (0+255),w,b
  6404  001D88  6F6E               	movwf	??_GetIntFromUartData& (0+255),b
  6405  001D8A  0E00               	movlw	0
  6406  001D8C  2185               	addwfc	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  6407  001D8E  6F6F               	movwf	(??_GetIntFromUartData+1)& (0+255),b
  6408  001D90  516E               	movf	??_GetIntFromUartData& (0+255),w,b
  6409  001D92  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  6410  001D94  6EE1               	movwf	fsr1l,c
  6411  001D96  516F               	movf	(??_GetIntFromUartData+1)& (0+255),w,b
  6412  001D98  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  6413  001D9A  6EE2               	movwf	fsr1h,c
  6414  001D9C  50E7               	movf	indf1,w,c
  6415  001D9E  0F30               	addlw	48
  6416  001DA0  6EDF               	movwf	indf2,c
  6417                           
  6418                           ; BSR set to: 0
  6419                           
  6420                           ; BSR set to: 0
  6421  001DA2  4B84               	infsnz	GetIntFromUartData@idxCon& (0+255),f,b
  6422  001DA4  2B85               	incf	(GetIntFromUartData@idxCon+1)& (0+255),f,b
  6423  001DA6  D7CE               	goto	l7962
  6424  001DA8                     u7970:
  6425  001DA8                     l7980:
  6426                           
  6427                           ; BSR set to: 0
  6428                           ;SystemCommon.c: 85: }
  6429                           ;SystemCommon.c: 86: }
  6430                           ;SystemCommon.c: 87: retVal.con = strtol(dataRegArr, (0), num);
  6431  001DA8  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6432  001DAA  6E26               	movwf	strtol@s,c
  6433  001DAC  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6434  001DAE  6E27               	movwf	strtol@s+1,c
  6435  001DB0  0E00               	movlw	0
  6436  001DB2  6E28               	movwf	strtol@endptr,c
  6437  001DB4  0E00               	movlw	0
  6438  001DB6  6E29               	movwf	strtol@endptr+1,c
  6439  001DB8  517A               	movf	GetIntFromUartData@num& (0+255),w,b
  6440  001DBA  6E2A               	movwf	strtol@base,c
  6441  001DBC  6A2B               	clrf	strtol@base+1,c
  6442  001DBE  BE2A               	btfsc	strtol@base,7,c
  6443  001DC0  062B               	decf	strtol@base+1,f,c
  6444  001DC2  ECB5  F00B         	call	_strtol	;wreg free
  6445  001DC6  C026  F080         	movff	?_strtol,GetIntFromUartData@retVal+4
  6446  001DCA  C027  F081         	movff	?_strtol+1,GetIntFromUartData@retVal+5
  6447  001DCE  C028  F082         	movff	?_strtol+2,GetIntFromUartData@retVal+6
  6448  001DD2  C029  F083         	movff	?_strtol+3,GetIntFromUartData@retVal+7
  6449                           
  6450                           ;SystemCommon.c: 89: return retVal;
  6451  001DD6  EE20  F07C         	lfsr	2,GetIntFromUartData@retVal
  6452  001DDA  EE00  F066         	lfsr	0,?_GetIntFromUartData
  6453  001DDE  0E07               	movlw	7
  6454  001DE0                     u7981:
  6455  001DE0  CFDB FFEB          	movff	plusw2,plusw0
  6456  001DE4  06E8               	decf	wreg,f,c
  6457  001DE6  E2FC               	bc	u7981
  6458  001DE8  0012               	return	
  6459  001DEA                     __end_of_GetIntFromUartData:
  6460                           	opt stack 0
  6461                           tosu	equ	0xFFF
  6462                           tosh	equ	0xFFE
  6463                           tosl	equ	0xFFD
  6464                           pclath	equ	0xFFA
  6465                           tblptru	equ	0xFF8
  6466                           tblptrh	equ	0xFF7
  6467                           tblptrl	equ	0xFF6
  6468                           tablat	equ	0xFF5
  6469                           prodh	equ	0xFF4
  6470                           prodl	equ	0xFF3
  6471                           postinc0	equ	0xFEE
  6472                           plusw0	equ	0xFEB
  6473                           wreg	equ	0xFE8
  6474                           indf1	equ	0xFE7
  6475                           postdec1	equ	0xFE5
  6476                           fsr1h	equ	0xFE2
  6477                           fsr1l	equ	0xFE1
  6478                           indf2	equ	0xFDF
  6479                           postinc2	equ	0xFDE
  6480                           plusw2	equ	0xFDB
  6481                           fsr2h	equ	0xFDA
  6482                           fsr2l	equ	0xFD9
  6483                           status	equ	0xFD8
  6484                           
  6485 ;; *************** function _strtol *****************
  6486 ;; Defined at:
  6487 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strtol.c"
  6488 ;; Parameters:    Size  Location     Type
  6489 ;;  s               2   37[COMRAM] PTR const unsigned char 
  6490 ;;		 -> GetIntFromUartData@dataRegArr(10), 
  6491 ;;  endptr          2   39[COMRAM] PTR PTR unsigned char 
  6492 ;;		 -> NULL(0), 
  6493 ;;  base            2   41[COMRAM] int 
  6494 ;; Auto vars:     Size  Location     Type
  6495 ;;  a               4    1[BANK0 ] long 
  6496 ;;  c               1    5[BANK0 ] unsigned char 
  6497 ;;  sign            1    0[BANK0 ] unsigned char 
  6498 ;; Return value:  Size  Location     Type
  6499 ;;                  4   37[COMRAM] long 
  6500 ;; Registers used:
  6501 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6502 ;; Tracked objects:
  6503 ;;		On entry : 0/0
  6504 ;;		On exit  : 0/0
  6505 ;;		Unchanged: 0/0
  6506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6507 ;;      Params:         6       0       0       0       0       0       0
  6508 ;;      Locals:         0       6       0       0       0       0       0
  6509 ;;      Temps:          4       0       0       0       0       0       0
  6510 ;;      Totals:        10       6       0       0       0       0       0
  6511 ;;Total ram usage:       16 bytes
  6512 ;; Hardware stack levels used:    1
  6513 ;; Hardware stack levels required when called:    6
  6514 ;; This function calls:
  6515 ;;		___lmul
  6516 ;;		_isalpha
  6517 ;;		_isdigit
  6518 ;;		_isspace
  6519 ;;		_toupper
  6520 ;; This function is called by:
  6521 ;;		_GetIntFromUartData
  6522 ;; This function uses a non-reentrant model
  6523 ;;
  6524                           
  6525                           	psect	text21
  6526  00176A                     __ptext21:
  6527                           	opt stack 0
  6528  00176A                     _strtol:
  6529                           	opt stack 20
  6530                           
  6531                           ;incstack = 0
  6532  00176A  C026  FFD9         	movff	strtol@s,fsr2l
  6533  00176E  C027  FFDA         	movff	strtol@s+1,fsr2h
  6534  001772  50DF               	movf	indf2,w,c
  6535  001774  0100               	movlb	0	; () banked
  6536  001776  6F65               	movwf	strtol@c& (0+255),b
  6537                           
  6538                           ; BSR set to: 0
  6539  001778  4A26               	infsnz	strtol@s,f,c
  6540  00177A  2A27               	incf	strtol@s+1,f,c
  6541                           
  6542                           ; BSR set to: 0
  6543  00177C  5165               	movf	strtol@c& (0+255),w,b
  6544  00177E  EC9F  F01F         	call	_isspace
  6545  001782  B0D8               	btfsc	status,0,c
  6546  001784  D7F2               	goto	_strtol
  6547  001786  0E00               	movlw	0
  6548  001788  0100               	movlb	0	; () banked
  6549  00178A  6F61               	movwf	strtol@a& (0+255),b
  6550  00178C  0E00               	movlw	0
  6551  00178E  6F62               	movwf	(strtol@a+1)& (0+255),b
  6552  001790  0E00               	movlw	0
  6553  001792  6F63               	movwf	(strtol@a+2)& (0+255),b
  6554  001794  0E00               	movlw	0
  6555  001796  6F64               	movwf	(strtol@a+3)& (0+255),b
  6556  001798  0E00               	movlw	0
  6557  00179A  6F60               	movwf	strtol@sign& (0+255),b
  6558                           
  6559                           ; BSR set to: 0
  6560  00179C  0E2D               	movlw	45
  6561  00179E  1965               	xorwf	strtol@c& (0+255),w,b
  6562  0017A0  A4D8               	btfss	status,2,c
  6563  0017A2  D003               	goto	l2170
  6564                           
  6565                           ; BSR set to: 0
  6566  0017A4  0E01               	movlw	1
  6567  0017A6  6F60               	movwf	strtol@sign& (0+255),b
  6568  0017A8  D004               	goto	u7770
  6569  0017AA                     l2170:
  6570                           
  6571                           ; BSR set to: 0
  6572                           
  6573                           ; BSR set to: 0
  6574  0017AA  0E2B               	movlw	43
  6575  0017AC  1965               	xorwf	strtol@c& (0+255),w,b
  6576  0017AE  A4D8               	btfss	status,2,c
  6577  0017B0  D008               	goto	l2172
  6578  0017B2                     u7770:
  6579                           
  6580                           ; BSR set to: 0
  6581  0017B2  C026  FFD9         	movff	strtol@s,fsr2l
  6582  0017B6  C027  FFDA         	movff	strtol@s+1,fsr2h
  6583  0017BA  50DF               	movf	indf2,w,c
  6584  0017BC  6F65               	movwf	strtol@c& (0+255),b
  6585                           
  6586                           ; BSR set to: 0
  6587  0017BE  4A26               	infsnz	strtol@s,f,c
  6588  0017C0  2A27               	incf	strtol@s+1,f,c
  6589  0017C2                     l2172:
  6590                           
  6591                           ; BSR set to: 0
  6592                           
  6593                           ; BSR set to: 0
  6594                           
  6595                           ; BSR set to: 0
  6596  0017C2  0E30               	movlw	48
  6597  0017C4  1965               	xorwf	strtol@c& (0+255),w,b
  6598  0017C6  A4D8               	btfss	status,2,c
  6599  0017C8  D02E               	goto	l2180
  6600                           
  6601                           ; BSR set to: 0
  6602  0017CA  C026  FFD9         	movff	strtol@s,fsr2l
  6603  0017CE  C027  FFDA         	movff	strtol@s+1,fsr2h
  6604  0017D2  50DF               	movf	indf2,w,c
  6605  0017D4  6F65               	movwf	strtol@c& (0+255),b
  6606                           
  6607                           ; BSR set to: 0
  6608  0017D6  4A26               	infsnz	strtol@s,f,c
  6609  0017D8  2A27               	incf	strtol@s+1,f,c
  6610                           
  6611                           ; BSR set to: 0
  6612  0017DA  502A               	movf	strtol@base,w,c
  6613  0017DC  102B               	iorwf	strtol@base+1,w,c
  6614  0017DE  B4D8               	btfsc	status,2,c
  6615  0017E0  D005               	goto	u7800
  6616                           
  6617                           ; BSR set to: 0
  6618  0017E2  0E10               	movlw	16
  6619  0017E4  182A               	xorwf	strtol@base,w,c
  6620  0017E6  102B               	iorwf	strtol@base+1,w,c
  6621  0017E8  A4D8               	btfss	status,2,c
  6622  0017EA  D015               	goto	l2174
  6623  0017EC                     u7800:
  6624                           
  6625                           ; BSR set to: 0
  6626                           
  6627                           ; BSR set to: 0
  6628  0017EC  0E78               	movlw	120
  6629  0017EE  1965               	xorwf	strtol@c& (0+255),w,b
  6630  0017F0  B4D8               	btfsc	status,2,c
  6631  0017F2  D004               	goto	u7820
  6632                           
  6633                           ; BSR set to: 0
  6634  0017F4  0E58               	movlw	88
  6635  0017F6  1965               	xorwf	strtol@c& (0+255),w,b
  6636  0017F8  A4D8               	btfss	status,2,c
  6637  0017FA  D00D               	goto	l2174
  6638  0017FC                     u7820:
  6639                           
  6640                           ; BSR set to: 0
  6641                           
  6642                           ; BSR set to: 0
  6643  0017FC  0E00               	movlw	0
  6644  0017FE  6E2B               	movwf	strtol@base+1,c
  6645  001800  0E10               	movlw	16
  6646  001802  6E2A               	movwf	strtol@base,c
  6647                           
  6648                           ; BSR set to: 0
  6649  001804  C026  FFD9         	movff	strtol@s,fsr2l
  6650  001808  C027  FFDA         	movff	strtol@s+1,fsr2h
  6651  00180C  50DF               	movf	indf2,w,c
  6652  00180E  6F65               	movwf	strtol@c& (0+255),b
  6653                           
  6654                           ; BSR set to: 0
  6655  001810  4A26               	infsnz	strtol@s,f,c
  6656  001812  2A27               	incf	strtol@s+1,f,c
  6657  001814  D008               	goto	l2180
  6658  001816                     l2174:
  6659                           
  6660                           ; BSR set to: 0
  6661                           
  6662                           ; BSR set to: 0
  6663  001816  502A               	movf	strtol@base,w,c
  6664  001818  102B               	iorwf	strtol@base+1,w,c
  6665  00181A  A4D8               	btfss	status,2,c
  6666  00181C  D004               	goto	l2180
  6667                           
  6668                           ; BSR set to: 0
  6669  00181E  0E00               	movlw	0
  6670  001820  6E2B               	movwf	strtol@base+1,c
  6671  001822  0E08               	movlw	8
  6672  001824  6E2A               	movwf	strtol@base,c
  6673  001826                     l2180:
  6674                           
  6675                           ; BSR set to: 0
  6676                           
  6677                           ; BSR set to: 0
  6678                           
  6679                           ; BSR set to: 0
  6680                           
  6681                           ; BSR set to: 0
  6682  001826  502A               	movf	strtol@base,w,c
  6683  001828  102B               	iorwf	strtol@base+1,w,c
  6684  00182A  A4D8               	btfss	status,2,c
  6685  00182C  D004               	goto	l2181
  6686                           
  6687                           ; BSR set to: 0
  6688  00182E  0E00               	movlw	0
  6689  001830  6E2B               	movwf	strtol@base+1,c
  6690  001832  0E0A               	movlw	10
  6691  001834  6E2A               	movwf	strtol@base,c
  6692  001836                     l2181:
  6693                           
  6694                           ; BSR set to: 0
  6695                           
  6696                           ; BSR set to: 0
  6697                           
  6698                           ; BSR set to: 0
  6699  001836  5165               	movf	strtol@c& (0+255),w,b
  6700  001838  EC8B  F01F         	call	_isalpha
  6701  00183C  A0D8               	btfss	status,0,c
  6702  00183E  D008               	goto	l2183
  6703  001840  0100               	movlb	0	; () banked
  6704  001842  5165               	movf	strtol@c& (0+255),w,b
  6705  001844  ECA5  F020         	call	_toupper
  6706  001848  0FC9               	addlw	201
  6707  00184A  0100               	movlb	0	; () banked
  6708  00184C  6F65               	movwf	strtol@c& (0+255),b
  6709  00184E  D009               	goto	l2186
  6710  001850                     l2183:
  6711                           
  6712                           ; BSR set to: 0
  6713  001850  0100               	movlb	0	; () banked
  6714  001852  5165               	movf	strtol@c& (0+255),w,b
  6715  001854  EC2D  F020         	call	_isdigit
  6716  001858  A0D8               	btfss	status,0,c
  6717  00185A  D039               	goto	l2187
  6718  00185C  0E30               	movlw	48
  6719  00185E  0100               	movlb	0	; () banked
  6720  001860  5F65               	subwf	strtol@c& (0+255),f,b
  6721  001862                     l2186:
  6722                           
  6723                           ; BSR set to: 0
  6724                           
  6725                           ; BSR set to: 0
  6726                           
  6727                           ; BSR set to: 0
  6728  001862  5165               	movf	strtol@c& (0+255),w,b
  6729  001864  6E2C               	movwf	??_strtol& (0+255),c
  6730  001866  6A2D               	clrf	(??_strtol+1)& (0+255),c
  6731  001868  502A               	movf	strtol@base,w,c
  6732  00186A  5C2C               	subwf	??_strtol,w,c
  6733  00186C  502D               	movf	??_strtol+1,w,c
  6734  00186E  0A80               	xorlw	128
  6735  001870  6E2E               	movwf	(??_strtol+2)& (0+255),c
  6736  001872  502B               	movf	strtol@base+1,w,c
  6737  001874  0A80               	xorlw	128
  6738  001876  582E               	subwfb	(??_strtol+2)& (0+255),w,c
  6739  001878  B0D8               	btfsc	status,0,c
  6740  00187A  D029               	goto	l2187
  6741                           
  6742                           ; BSR set to: 0
  6743                           
  6744                           ; BSR set to: 0
  6745                           
  6746                           ; BSR set to: 0
  6747  00187C  C02A  F01A         	movff	strtol@base,___lmul@multiplier
  6748  001880  C02B  F01B         	movff	strtol@base+1,___lmul@multiplier+1
  6749  001884  0E00               	movlw	0
  6750  001886  BE1B               	btfsc	___lmul@multiplier+1,7,c
  6751  001888  0EFF               	movlw	-1
  6752  00188A  6E1C               	movwf	___lmul@multiplier+2,c
  6753  00188C  6E1D               	movwf	___lmul@multiplier+3,c
  6754  00188E  C061  F01E         	movff	strtol@a,___lmul@multiplicand
  6755  001892  C062  F01F         	movff	strtol@a+1,___lmul@multiplicand+1
  6756  001896  C063  F020         	movff	strtol@a+2,___lmul@multiplicand+2
  6757  00189A  C064  F021         	movff	strtol@a+3,___lmul@multiplicand+3
  6758  00189E  EC52  F01C         	call	___lmul	;wreg free
  6759  0018A2  0100               	movlb	0	; () banked
  6760  0018A4  5165               	movf	strtol@c& (0+255),w,b
  6761  0018A6  241A               	addwf	?___lmul,w,c
  6762  0018A8  6F61               	movwf	strtol@a& (0+255),b
  6763  0018AA  0E00               	movlw	0
  6764  0018AC  201B               	addwfc	?___lmul+1,w,c
  6765  0018AE  6F62               	movwf	(strtol@a+1)& (0+255),b
  6766  0018B0  0E00               	movlw	0
  6767  0018B2  201C               	addwfc	?___lmul+2,w,c
  6768  0018B4  6F63               	movwf	(strtol@a+2)& (0+255),b
  6769  0018B6  0E00               	movlw	0
  6770  0018B8  201D               	addwfc	?___lmul+3,w,c
  6771  0018BA  6F64               	movwf	(strtol@a+3)& (0+255),b
  6772                           
  6773                           ; BSR set to: 0
  6774  0018BC  C026  FFD9         	movff	strtol@s,fsr2l
  6775  0018C0  C027  FFDA         	movff	strtol@s+1,fsr2h
  6776  0018C4  50DF               	movf	indf2,w,c
  6777  0018C6  6F65               	movwf	strtol@c& (0+255),b
  6778                           
  6779                           ; BSR set to: 0
  6780  0018C8  4A26               	infsnz	strtol@s,f,c
  6781  0018CA  2A27               	incf	strtol@s+1,f,c
  6782  0018CC  D7B4               	goto	l2181
  6783  0018CE                     l2187:
  6784                           
  6785                           ; BSR set to: 0
  6786  0018CE  5028               	movf	strtol@endptr,w,c
  6787  0018D0  1029               	iorwf	strtol@endptr+1,w,c
  6788  0018D2  B4D8               	btfsc	status,2,c
  6789  0018D4  D00E               	goto	l2189
  6790  0018D6  0EFF               	movlw	255
  6791  0018D8  2426               	addwf	strtol@s,w,c
  6792  0018DA  6E2C               	movwf	??_strtol& (0+255),c
  6793  0018DC  0EFF               	movlw	255
  6794  0018DE  2027               	addwfc	strtol@s+1,w,c
  6795  0018E0  6E2D               	movwf	(??_strtol+1)& (0+255),c
  6796  0018E2  C028  FFD9         	movff	strtol@endptr,fsr2l
  6797  0018E6  C029  FFDA         	movff	strtol@endptr+1,fsr2h
  6798  0018EA  C02C  FFDE         	movff	??_strtol,postinc2
  6799  0018EE  C02D  FFDD         	movff	??_strtol+1,postdec2
  6800  0018F2                     l2189:
  6801  0018F2  0100               	movlb	0	; () banked
  6802  0018F4  5160               	movf	strtol@sign& (0+255),w,b
  6803  0018F6  B4D8               	btfsc	status,2,c
  6804  0018F8  D01A               	goto	l2190
  6805                           
  6806                           ; BSR set to: 0
  6807  0018FA  C061  F02C         	movff	strtol@a,??_strtol
  6808  0018FE  C062  F02D         	movff	strtol@a+1,??_strtol+1
  6809  001902  C063  F02E         	movff	strtol@a+2,??_strtol+2
  6810  001906  C064  F02F         	movff	strtol@a+3,??_strtol+3
  6811  00190A  1E2C               	comf	??_strtol,f,c
  6812  00190C  1E2D               	comf	??_strtol+1,f,c
  6813  00190E  1E2E               	comf	??_strtol+2,f,c
  6814  001910  1E2F               	comf	??_strtol+3,f,c
  6815  001912  2A2C               	incf	??_strtol,f,c
  6816  001914  0E00               	movlw	0
  6817  001916  222D               	addwfc	??_strtol+1,f,c
  6818  001918  222E               	addwfc	??_strtol+2,f,c
  6819  00191A  222F               	addwfc	??_strtol+3,f,c
  6820  00191C  C02C  F026         	movff	??_strtol,?_strtol
  6821  001920  C02D  F027         	movff	??_strtol+1,?_strtol+1
  6822  001924  C02E  F028         	movff	??_strtol+2,?_strtol+2
  6823  001928  C02F  F029         	movff	??_strtol+3,?_strtol+3
  6824                           
  6825                           ; BSR set to: 0
  6826  00192C  0012               	return	
  6827  00192E                     l2190:
  6828                           
  6829                           ; BSR set to: 0
  6830  00192E  C061  F026         	movff	strtol@a,?_strtol
  6831  001932  C062  F027         	movff	strtol@a+1,?_strtol+1
  6832  001936  C063  F028         	movff	strtol@a+2,?_strtol+2
  6833  00193A  C064  F029         	movff	strtol@a+3,?_strtol+3
  6834                           
  6835                           ; BSR set to: 0
  6836  00193E  0012               	return		;funcret
  6837  001940                     __end_of_strtol:
  6838                           	opt stack 0
  6839                           tosu	equ	0xFFF
  6840                           tosh	equ	0xFFE
  6841                           tosl	equ	0xFFD
  6842                           pclath	equ	0xFFA
  6843                           tblptru	equ	0xFF8
  6844                           tblptrh	equ	0xFF7
  6845                           tblptrl	equ	0xFF6
  6846                           tablat	equ	0xFF5
  6847                           prodh	equ	0xFF4
  6848                           prodl	equ	0xFF3
  6849                           postinc0	equ	0xFEE
  6850                           plusw0	equ	0xFEB
  6851                           wreg	equ	0xFE8
  6852                           indf1	equ	0xFE7
  6853                           postdec1	equ	0xFE5
  6854                           fsr1h	equ	0xFE2
  6855                           fsr1l	equ	0xFE1
  6856                           indf2	equ	0xFDF
  6857                           postinc2	equ	0xFDE
  6858                           postdec2	equ	0xFDD
  6859                           plusw2	equ	0xFDB
  6860                           fsr2h	equ	0xFDA
  6861                           fsr2l	equ	0xFD9
  6862                           status	equ	0xFD8
  6863                           
  6864 ;; *************** function _toupper *****************
  6865 ;; Defined at:
  6866 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\toupper.c"
  6867 ;; Parameters:    Size  Location     Type
  6868 ;;  c               1    wreg     unsigned char 
  6869 ;; Auto vars:     Size  Location     Type
  6870 ;;  c               1   23[COMRAM] unsigned char 
  6871 ;; Return value:  Size  Location     Type
  6872 ;;                  1    wreg      unsigned char 
  6873 ;; Registers used:
  6874 ;;		wreg, status,2, status,0
  6875 ;; Tracked objects:
  6876 ;;		On entry : 0/0
  6877 ;;		On exit  : 0/0
  6878 ;;		Unchanged: 0/0
  6879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6880 ;;      Params:         0       0       0       0       0       0       0
  6881 ;;      Locals:         1       0       0       0       0       0       0
  6882 ;;      Temps:          0       0       0       0       0       0       0
  6883 ;;      Totals:         1       0       0       0       0       0       0
  6884 ;;Total ram usage:        1 bytes
  6885 ;; Hardware stack levels used:    1
  6886 ;; Hardware stack levels required when called:    4
  6887 ;; This function calls:
  6888 ;;		Nothing
  6889 ;; This function is called by:
  6890 ;;		_strtol
  6891 ;; This function uses a non-reentrant model
  6892 ;;
  6893                           
  6894                           	psect	text22
  6895  00414A                     __ptext22:
  6896                           	opt stack 0
  6897  00414A                     _toupper:
  6898                           	opt stack 21
  6899                           
  6900                           ; BSR set to: 0
  6901                           ;incstack = 0
  6902                           ;toupper@c stored from wreg
  6903  00414A  6E18               	movwf	toupper@c,c
  6904  00414C  0E7B               	movlw	123
  6905  00414E  6018               	cpfslt	toupper@c,c
  6906  004150  D004               	goto	l2194
  6907  004152  0E60               	movlw	96
  6908  004154  6418               	cpfsgt	toupper@c,c
  6909  004156  D001               	goto	l2194
  6910  004158  9A18               	bcf	toupper@c,5,c
  6911  00415A                     l2194:
  6912  00415A  5018               	movf	toupper@c,w,c
  6913  00415C  0012               	return	
  6914  00415E                     __end_of_toupper:
  6915                           	opt stack 0
  6916                           tosu	equ	0xFFF
  6917                           tosh	equ	0xFFE
  6918                           tosl	equ	0xFFD
  6919                           pclath	equ	0xFFA
  6920                           tblptru	equ	0xFF8
  6921                           tblptrh	equ	0xFF7
  6922                           tblptrl	equ	0xFF6
  6923                           tablat	equ	0xFF5
  6924                           prodh	equ	0xFF4
  6925                           prodl	equ	0xFF3
  6926                           postinc0	equ	0xFEE
  6927                           plusw0	equ	0xFEB
  6928                           wreg	equ	0xFE8
  6929                           indf1	equ	0xFE7
  6930                           postdec1	equ	0xFE5
  6931                           fsr1h	equ	0xFE2
  6932                           fsr1l	equ	0xFE1
  6933                           indf2	equ	0xFDF
  6934                           postinc2	equ	0xFDE
  6935                           postdec2	equ	0xFDD
  6936                           plusw2	equ	0xFDB
  6937                           fsr2h	equ	0xFDA
  6938                           fsr2l	equ	0xFD9
  6939                           status	equ	0xFD8
  6940                           
  6941 ;; *************** function _isspace *****************
  6942 ;; Defined at:
  6943 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isspace.c"
  6944 ;; Parameters:    Size  Location     Type
  6945 ;;  c               1    wreg     unsigned char 
  6946 ;; Auto vars:     Size  Location     Type
  6947 ;;  c               1   25[COMRAM] unsigned char 
  6948 ;; Return value:  Size  Location     Type
  6949 ;;		None               void
  6950 ;; Registers used:
  6951 ;;		wreg, status,2, status,0
  6952 ;; Tracked objects:
  6953 ;;		On entry : 0/0
  6954 ;;		On exit  : 0/0
  6955 ;;		Unchanged: 0/0
  6956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6957 ;;      Params:         0       0       0       0       0       0       0
  6958 ;;      Locals:         2       0       0       0       0       0       0
  6959 ;;      Temps:          1       0       0       0       0       0       0
  6960 ;;      Totals:         3       0       0       0       0       0       0
  6961 ;;Total ram usage:        3 bytes
  6962 ;; Hardware stack levels used:    1
  6963 ;; Hardware stack levels required when called:    4
  6964 ;; This function calls:
  6965 ;;		Nothing
  6966 ;; This function is called by:
  6967 ;;		_strtol
  6968 ;; This function uses a non-reentrant model
  6969 ;;
  6970                           
  6971                           	psect	text23
  6972  003F3E                     __ptext23:
  6973                           	opt stack 0
  6974  003F3E                     _isspace:
  6975                           	opt stack 21
  6976                           
  6977                           ;incstack = 0
  6978                           ;isspace@c stored from wreg
  6979  003F3E  6E1A               	movwf	isspace@c,c
  6980  003F40  0E01               	movlw	1
  6981  003F42  6E19               	movwf	_isspace$3315,c
  6982  003F44  0E20               	movlw	32
  6983  003F46  181A               	xorwf	isspace@c,w,c
  6984  003F48  B4D8               	btfsc	status,2,c
  6985  003F4A  D008               	goto	l2276
  6986  003F4C  0E0E               	movlw	14
  6987  003F4E  601A               	cpfslt	isspace@c,c
  6988  003F50  D003               	goto	u7540
  6989  003F52  0E09               	movlw	9
  6990  003F54  601A               	cpfslt	isspace@c,c
  6991  003F56  D002               	goto	l2276
  6992  003F58                     u7540:
  6993  003F58  0E00               	movlw	0
  6994  003F5A  6E19               	movwf	_isspace$3315,c
  6995  003F5C                     l2276:
  6996  003F5C  C019  F018         	movff	_isspace$3315,??_isspace
  6997  003F60  3018               	rrcf	??_isspace,w,c
  6998  003F62  0012               	return	
  6999  003F64                     __end_of_isspace:
  7000                           	opt stack 0
  7001                           tosu	equ	0xFFF
  7002                           tosh	equ	0xFFE
  7003                           tosl	equ	0xFFD
  7004                           pclath	equ	0xFFA
  7005                           tblptru	equ	0xFF8
  7006                           tblptrh	equ	0xFF7
  7007                           tblptrl	equ	0xFF6
  7008                           tablat	equ	0xFF5
  7009                           prodh	equ	0xFF4
  7010                           prodl	equ	0xFF3
  7011                           postinc0	equ	0xFEE
  7012                           plusw0	equ	0xFEB
  7013                           wreg	equ	0xFE8
  7014                           indf1	equ	0xFE7
  7015                           postdec1	equ	0xFE5
  7016                           fsr1h	equ	0xFE2
  7017                           fsr1l	equ	0xFE1
  7018                           indf2	equ	0xFDF
  7019                           postinc2	equ	0xFDE
  7020                           postdec2	equ	0xFDD
  7021                           plusw2	equ	0xFDB
  7022                           fsr2h	equ	0xFDA
  7023                           fsr2l	equ	0xFD9
  7024                           status	equ	0xFD8
  7025                           
  7026 ;; *************** function _isdigit *****************
  7027 ;; Defined at:
  7028 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  7029 ;; Parameters:    Size  Location     Type
  7030 ;;  c               1    wreg     unsigned char 
  7031 ;; Auto vars:     Size  Location     Type
  7032 ;;  c               1   25[COMRAM] unsigned char 
  7033 ;; Return value:  Size  Location     Type
  7034 ;;		None               void
  7035 ;; Registers used:
  7036 ;;		wreg, status,2, status,0
  7037 ;; Tracked objects:
  7038 ;;		On entry : 0/0
  7039 ;;		On exit  : 0/0
  7040 ;;		Unchanged: 0/0
  7041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7042 ;;      Params:         0       0       0       0       0       0       0
  7043 ;;      Locals:         2       0       0       0       0       0       0
  7044 ;;      Temps:          1       0       0       0       0       0       0
  7045 ;;      Totals:         3       0       0       0       0       0       0
  7046 ;;Total ram usage:        3 bytes
  7047 ;; Hardware stack levels used:    1
  7048 ;; Hardware stack levels required when called:    4
  7049 ;; This function calls:
  7050 ;;		Nothing
  7051 ;; This function is called by:
  7052 ;;		_strtol
  7053 ;; This function uses a non-reentrant model
  7054 ;;
  7055                           
  7056                           	psect	text24
  7057  00405A                     __ptext24:
  7058                           	opt stack 0
  7059  00405A                     _isdigit:
  7060                           	opt stack 21
  7061                           
  7062                           ;incstack = 0
  7063                           ;isdigit@c stored from wreg
  7064  00405A  6E1A               	movwf	isdigit@c,c
  7065  00405C  0E00               	movlw	0
  7066  00405E  6E19               	movwf	_isdigit$3312,c
  7067  004060  0E3A               	movlw	58
  7068  004062  601A               	cpfslt	isdigit@c,c
  7069  004064  D005               	goto	l2271
  7070  004066  0E2F               	movlw	47
  7071  004068  641A               	cpfsgt	isdigit@c,c
  7072  00406A  D002               	goto	l2271
  7073  00406C  0E01               	movlw	1
  7074  00406E  6E19               	movwf	_isdigit$3312,c
  7075  004070                     l2271:
  7076  004070  C019  F018         	movff	_isdigit$3312,??_isdigit
  7077  004074  3018               	rrcf	??_isdigit,w,c
  7078  004076  0012               	return	
  7079  004078                     __end_of_isdigit:
  7080                           	opt stack 0
  7081                           tosu	equ	0xFFF
  7082                           tosh	equ	0xFFE
  7083                           tosl	equ	0xFFD
  7084                           pclath	equ	0xFFA
  7085                           tblptru	equ	0xFF8
  7086                           tblptrh	equ	0xFF7
  7087                           tblptrl	equ	0xFF6
  7088                           tablat	equ	0xFF5
  7089                           prodh	equ	0xFF4
  7090                           prodl	equ	0xFF3
  7091                           postinc0	equ	0xFEE
  7092                           plusw0	equ	0xFEB
  7093                           wreg	equ	0xFE8
  7094                           indf1	equ	0xFE7
  7095                           postdec1	equ	0xFE5
  7096                           fsr1h	equ	0xFE2
  7097                           fsr1l	equ	0xFE1
  7098                           indf2	equ	0xFDF
  7099                           postinc2	equ	0xFDE
  7100                           postdec2	equ	0xFDD
  7101                           plusw2	equ	0xFDB
  7102                           fsr2h	equ	0xFDA
  7103                           fsr2l	equ	0xFD9
  7104                           status	equ	0xFD8
  7105                           
  7106 ;; *************** function _isalpha *****************
  7107 ;; Defined at:
  7108 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isalpha.c"
  7109 ;; Parameters:    Size  Location     Type
  7110 ;;  c               1    wreg     unsigned char 
  7111 ;; Auto vars:     Size  Location     Type
  7112 ;;  c               1   28[COMRAM] unsigned char 
  7113 ;; Return value:  Size  Location     Type
  7114 ;;		None               void
  7115 ;; Registers used:
  7116 ;;		wreg, status,2, status,0, cstack
  7117 ;; Tracked objects:
  7118 ;;		On entry : 0/0
  7119 ;;		On exit  : 0/0
  7120 ;;		Unchanged: 0/0
  7121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7122 ;;      Params:         0       0       0       0       0       0       0
  7123 ;;      Locals:         2       0       0       0       0       0       0
  7124 ;;      Temps:          1       0       0       0       0       0       0
  7125 ;;      Totals:         3       0       0       0       0       0       0
  7126 ;;Total ram usage:        3 bytes
  7127 ;; Hardware stack levels used:    1
  7128 ;; Hardware stack levels required when called:    5
  7129 ;; This function calls:
  7130 ;;		_isupper
  7131 ;; This function is called by:
  7132 ;;		_strtol
  7133 ;; This function uses a non-reentrant model
  7134 ;;
  7135                           
  7136                           	psect	text25
  7137  003F16                     __ptext25:
  7138                           	opt stack 0
  7139  003F16                     _isalpha:
  7140                           	opt stack 20
  7141                           
  7142                           ;incstack = 0
  7143                           ;isalpha@c stored from wreg
  7144  003F16  6E1D               	movwf	isalpha@c,c
  7145  003F18  0E01               	movlw	1
  7146  003F1A  6E1C               	movwf	_isalpha$3309,c
  7147  003F1C  0E7B               	movlw	123
  7148  003F1E  601D               	cpfslt	isalpha@c,c
  7149  003F20  D003               	goto	u7560
  7150  003F22  0E61               	movlw	97
  7151  003F24  601D               	cpfslt	isalpha@c,c
  7152  003F26  D007               	goto	l2266
  7153  003F28                     u7560:
  7154  003F28  501D               	movf	isalpha@c,w,c
  7155  003F2A  EC3C  F020         	call	_isupper
  7156  003F2E  B0D8               	btfsc	status,0,c
  7157  003F30  D002               	goto	l2266
  7158  003F32  0E00               	movlw	0
  7159  003F34  6E1C               	movwf	_isalpha$3309,c
  7160  003F36                     l2266:
  7161  003F36  C01C  F01B         	movff	_isalpha$3309,??_isalpha
  7162  003F3A  301B               	rrcf	??_isalpha,w,c
  7163  003F3C  0012               	return	
  7164  003F3E                     __end_of_isalpha:
  7165                           	opt stack 0
  7166                           tosu	equ	0xFFF
  7167                           tosh	equ	0xFFE
  7168                           tosl	equ	0xFFD
  7169                           pclath	equ	0xFFA
  7170                           tblptru	equ	0xFF8
  7171                           tblptrh	equ	0xFF7
  7172                           tblptrl	equ	0xFF6
  7173                           tablat	equ	0xFF5
  7174                           prodh	equ	0xFF4
  7175                           prodl	equ	0xFF3
  7176                           postinc0	equ	0xFEE
  7177                           plusw0	equ	0xFEB
  7178                           wreg	equ	0xFE8
  7179                           indf1	equ	0xFE7
  7180                           postdec1	equ	0xFE5
  7181                           fsr1h	equ	0xFE2
  7182                           fsr1l	equ	0xFE1
  7183                           indf2	equ	0xFDF
  7184                           postinc2	equ	0xFDE
  7185                           postdec2	equ	0xFDD
  7186                           plusw2	equ	0xFDB
  7187                           fsr2h	equ	0xFDA
  7188                           fsr2l	equ	0xFD9
  7189                           status	equ	0xFD8
  7190                           
  7191 ;; *************** function _isupper *****************
  7192 ;; Defined at:
  7193 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isupper.c"
  7194 ;; Parameters:    Size  Location     Type
  7195 ;;  c               1    wreg     unsigned char 
  7196 ;; Auto vars:     Size  Location     Type
  7197 ;;  c               1   25[COMRAM] unsigned char 
  7198 ;; Return value:  Size  Location     Type
  7199 ;;		None               void
  7200 ;; Registers used:
  7201 ;;		wreg, status,2, status,0
  7202 ;; Tracked objects:
  7203 ;;		On entry : 0/0
  7204 ;;		On exit  : 0/0
  7205 ;;		Unchanged: 0/0
  7206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7207 ;;      Params:         0       0       0       0       0       0       0
  7208 ;;      Locals:         2       0       0       0       0       0       0
  7209 ;;      Temps:          1       0       0       0       0       0       0
  7210 ;;      Totals:         3       0       0       0       0       0       0
  7211 ;;Total ram usage:        3 bytes
  7212 ;; Hardware stack levels used:    1
  7213 ;; Hardware stack levels required when called:    4
  7214 ;; This function calls:
  7215 ;;		Nothing
  7216 ;; This function is called by:
  7217 ;;		_isalpha
  7218 ;; This function uses a non-reentrant model
  7219 ;;
  7220                           
  7221                           	psect	text26
  7222  004078                     __ptext26:
  7223                           	opt stack 0
  7224  004078                     _isupper:
  7225                           	opt stack 20
  7226                           
  7227                           ;incstack = 0
  7228                           ;isupper@c stored from wreg
  7229  004078  6E1A               	movwf	isupper@c,c
  7230  00407A  0E00               	movlw	0
  7231  00407C  6E19               	movwf	_isupper$3318,c
  7232  00407E  0E5B               	movlw	91
  7233  004080  601A               	cpfslt	isupper@c,c
  7234  004082  D005               	goto	l2281
  7235  004084  0E40               	movlw	64
  7236  004086  641A               	cpfsgt	isupper@c,c
  7237  004088  D002               	goto	l2281
  7238  00408A  0E01               	movlw	1
  7239  00408C  6E19               	movwf	_isupper$3318,c
  7240  00408E                     l2281:
  7241  00408E  C019  F018         	movff	_isupper$3318,??_isupper
  7242  004092  3018               	rrcf	??_isupper,w,c
  7243  004094  0012               	return	
  7244  004096                     __end_of_isupper:
  7245                           	opt stack 0
  7246                           tosu	equ	0xFFF
  7247                           tosh	equ	0xFFE
  7248                           tosl	equ	0xFFD
  7249                           pclath	equ	0xFFA
  7250                           tblptru	equ	0xFF8
  7251                           tblptrh	equ	0xFF7
  7252                           tblptrl	equ	0xFF6
  7253                           tablat	equ	0xFF5
  7254                           prodh	equ	0xFF4
  7255                           prodl	equ	0xFF3
  7256                           postinc0	equ	0xFEE
  7257                           plusw0	equ	0xFEB
  7258                           wreg	equ	0xFE8
  7259                           indf1	equ	0xFE7
  7260                           postdec1	equ	0xFE5
  7261                           fsr1h	equ	0xFE2
  7262                           fsr1l	equ	0xFE1
  7263                           indf2	equ	0xFDF
  7264                           postinc2	equ	0xFDE
  7265                           postdec2	equ	0xFDD
  7266                           plusw2	equ	0xFDB
  7267                           fsr2h	equ	0xFDA
  7268                           fsr2l	equ	0xFD9
  7269                           status	equ	0xFD8
  7270                           
  7271 ;; *************** function _DacReadValue *****************
  7272 ;; Defined at:
  7273 ;;		line 44 in file "DacApp.c"
  7274 ;; Parameters:    Size  Location     Type
  7275 ;;  data            2  104[BANK0 ] PTR unsigned char 
  7276 ;;		 -> rxMsgData(20), 
  7277 ;; Auto vars:     Size  Location     Type
  7278 ;;  byteIdx         2  120[BANK0 ] int 
  7279 ;;  TxMsg           7  113[BANK0 ] unsigned char [7]
  7280 ;;  readVal         2  110[BANK0 ] unsigned int 
  7281 ;;  dacIndex        1  112[BANK0 ] unsigned char 
  7282 ;;  byteNum         1  109[BANK0 ] unsigned char 
  7283 ;;  regNum          1  108[BANK0 ] unsigned char 
  7284 ;; Return value:  Size  Location     Type
  7285 ;;                  1    wreg      void 
  7286 ;; Registers used:
  7287 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7288 ;; Tracked objects:
  7289 ;;		On entry : 0/0
  7290 ;;		On exit  : 0/0
  7291 ;;		Unchanged: 0/0
  7292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7293 ;;      Params:         0       2       0       0       0       0       0
  7294 ;;      Locals:         0      14       0       0       0       0       0
  7295 ;;      Temps:          0       2       0       0       0       0       0
  7296 ;;      Totals:         0      18       0       0       0       0       0
  7297 ;;Total ram usage:       18 bytes
  7298 ;; Hardware stack levels used:    1
  7299 ;; Hardware stack levels required when called:   10
  7300 ;; This function calls:
  7301 ;;		_ReadIntFromEeprom
  7302 ;;		_WriteUartMessage
  7303 ;;		_ZeroArray
  7304 ;;		_crc8
  7305 ;;		_make8
  7306 ;; This function is called by:
  7307 ;;		_GroupDAC
  7308 ;; This function uses a non-reentrant model
  7309 ;;
  7310                           
  7311                           	psect	text27
  7312  0026F6                     __ptext27:
  7313                           	opt stack 0
  7314  0026F6                     _DacReadValue:
  7315                           	opt stack 18
  7316                           
  7317                           ;DacApp.c: 46: uint16_t readVal;
  7318                           ;DacApp.c: 47: uint8_t regNum = 0, byteNum = 0;
  7319                           
  7320                           ;incstack = 0
  7321  0026F6  0E00               	movlw	0
  7322  0026F8  0100               	movlb	0	; () banked
  7323  0026FA  6FCC               	movwf	DacReadValue@regNum& (0+255),b
  7324  0026FC  0E00               	movlw	0
  7325  0026FE  6FCD               	movwf	DacReadValue@byteNum& (0+255),b
  7326                           
  7327                           ; BSR set to: 0
  7328                           ;DacApp.c: 48: char TxMsg[2 + (0x4) + 1];
  7329                           ;DacApp.c: 49: ZeroArray(TxMsg, 2 + (0x4) + 1);
  7330  002700  0ED1               	movlw	low DacReadValue@TxMsg
  7331  002702  6E20               	movwf	ZeroArray@array,c
  7332  002704  0E00               	movlw	high DacReadValue@TxMsg
  7333  002706  6E21               	movwf	ZeroArray@array+1,c
  7334  002708  0E00               	movlw	0
  7335  00270A  6E23               	movwf	ZeroArray@size+1,c
  7336  00270C  0E07               	movlw	7
  7337  00270E  6E22               	movwf	ZeroArray@size,c
  7338  002710  EC4B  F020         	call	_ZeroArray	;wreg free
  7339                           
  7340                           ;DacApp.c: 52: TxMsg[(0)] = (0x24);
  7341  002714  0E24               	movlw	36
  7342  002716  0100               	movlb	0	; () banked
  7343  002718  6FD1               	movwf	DacReadValue@TxMsg& (0+255),b
  7344                           
  7345                           ; BSR set to: 0
  7346                           ;DacApp.c: 53: TxMsg[(1)] = DAC_MSG;
  7347  00271A  0E06               	movlw	6
  7348  00271C  6FD2               	movwf	(DacReadValue@TxMsg+1)& (0+255),b
  7349                           
  7350                           ; BSR set to: 0
  7351                           ;DacApp.c: 54: TxMsg[(2)] = DAC_READ_VALUE;
  7352  00271E  0E62               	movlw	98
  7353  002720  6FD3               	movwf	(DacReadValue@TxMsg+2)& (0+255),b
  7354                           
  7355                           ; BSR set to: 0
  7356                           ;DacApp.c: 55: TxMsg[(3)] = 2;
  7357  002722  0E02               	movlw	2
  7358  002724  6FD4               	movwf	(DacReadValue@TxMsg+3)& (0+255),b
  7359                           
  7360                           ; BSR set to: 0
  7361                           ;DacApp.c: 57: uint8_t dacIndex = data[0];
  7362  002726  C0C8  FFD9         	movff	DacReadValue@data,fsr2l
  7363  00272A  C0C9  FFDA         	movff	DacReadValue@data+1,fsr2h
  7364  00272E  50DF               	movf	indf2,w,c
  7365  002730  6FD0               	movwf	DacReadValue@dacIndex& (0+255),b
  7366                           
  7367                           ; BSR set to: 0
  7368                           ;DacApp.c: 58: uint16_t readVal = ReadIntFromEeprom((0x40) | DAC_ADDRES[dacIndex], 2);
  7369  002732  0E00               	movlw	0
  7370  002734  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  7371  002736  0E02               	movlw	2
  7372  002738  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  7373  00273A  51D0               	movf	DacReadValue@dacIndex& (0+255),w,b
  7374  00273C  0D01               	mullw	1
  7375  00273E  0E53               	movlw	low _DAC_ADDRES
  7376  002740  24F3               	addwf	prodl,w,c
  7377  002742  6EF6               	movwf	tblptrl,c
  7378  002744  0E06               	movlw	high _DAC_ADDRES
  7379  002746  20F4               	addwfc	prodh,w,c
  7380  002748  6EF7               	movwf	tblptrh,c
  7381  00274A                     	if	0	;There are less than 3 active tblptr bytes
  7382  00274A                     	endif
  7383  00274A  0008               	tblrd		*
  7384  00274C  50F5               	movf	tablat,w,c
  7385  00274E  0940               	iorlw	64
  7386  002750  EC8A  F00F         	call	_ReadIntFromEeprom
  7387  002754  C0B1  F0CE         	movff	?_ReadIntFromEeprom,DacReadValue@readVal
  7388  002758  C0B2  F0CF         	movff	?_ReadIntFromEeprom+1,DacReadValue@readVal+1
  7389                           
  7390                           ;DacApp.c: 60: for(int byteIdx = 0; byteIdx < 2; byteIdx++)
  7391  00275C  0E00               	movlw	0
  7392  00275E  0100               	movlb	0	; () banked
  7393  002760  6FD9               	movwf	(DacReadValue@byteIdx+1)& (0+255),b
  7394  002762  0E00               	movlw	0
  7395  002764  6FD8               	movwf	DacReadValue@byteIdx& (0+255),b
  7396  002766                     l8294:
  7397                           
  7398                           ; BSR set to: 0
  7399  002766  BFD9               	btfsc	(DacReadValue@byteIdx+1)& (0+255),7,b
  7400  002768  D006               	goto	l419
  7401  00276A  51D9               	movf	(DacReadValue@byteIdx+1)& (0+255),w,b
  7402  00276C  E11F               	bnz	l8304
  7403  00276E  0E02               	movlw	2
  7404  002770  5DD8               	subwf	DacReadValue@byteIdx& (0+255),w,b
  7405  002772  B0D8               	btfsc	status,0,c
  7406  002774  D01B               	goto	u8370
  7407  002776                     l419:
  7408                           
  7409                           ; BSR set to: 0
  7410                           ;DacApp.c: 61: {
  7411                           ;DacApp.c: 62: TxMsg[(0x4) + byteIdx] = make8(readVal, byteIdx);
  7412                           
  7413                           ; BSR set to: 0
  7414  002776  0E04               	movlw	4
  7415  002778  25D8               	addwf	DacReadValue@byteIdx& (0+255),w,b
  7416  00277A  6FCA               	movwf	??_DacReadValue& (0+255),b
  7417  00277C  0E00               	movlw	0
  7418  00277E  21D9               	addwfc	(DacReadValue@byteIdx+1)& (0+255),w,b
  7419  002780  6FCB               	movwf	(??_DacReadValue+1)& (0+255),b
  7420  002782  0ED1               	movlw	low DacReadValue@TxMsg
  7421  002784  25CA               	addwf	??_DacReadValue& (0+255),w,b
  7422  002786  6ED9               	movwf	fsr2l,c
  7423  002788  0E00               	movlw	high DacReadValue@TxMsg
  7424  00278A  21CB               	addwfc	(??_DacReadValue+1)& (0+255),w,b
  7425  00278C  6EDA               	movwf	fsr2h,c
  7426  00278E  C0CE  F018         	movff	DacReadValue@readVal,make8@data
  7427  002792  C0CF  F019         	movff	DacReadValue@readVal+1,make8@data+1
  7428  002796  6A1A               	clrf	make8@data+2,c
  7429  002798  6A1B               	clrf	make8@data+3,c
  7430  00279A  C0D8  F01C         	movff	DacReadValue@byteIdx,make8@dataLocation
  7431  00279E  EC48  F01B         	call	_make8	;wreg free
  7432  0027A2  6EDF               	movwf	indf2,c
  7433  0027A4  0100               	movlb	0	; () banked
  7434  0027A6  4BD8               	infsnz	DacReadValue@byteIdx& (0+255),f,b
  7435  0027A8  2BD9               	incf	(DacReadValue@byteIdx+1)& (0+255),f,b
  7436  0027AA  D7DD               	goto	l8294
  7437  0027AC                     u8370:
  7438  0027AC                     l8304:
  7439                           
  7440                           ; BSR set to: 0
  7441                           ;DacApp.c: 63: }
  7442                           ;DacApp.c: 64: TxMsg[2 + (0x4)] = crc8(TxMsg, 2 + (0x4));
  7443  0027AC  0ED1               	movlw	low DacReadValue@TxMsg
  7444  0027AE  6E18               	movwf	crc8@dataArray,c
  7445  0027B0  0E00               	movlw	high DacReadValue@TxMsg
  7446  0027B2  6E19               	movwf	crc8@dataArray+1,c
  7447  0027B4  0E00               	movlw	0
  7448  0027B6  6E1B               	movwf	crc8@dataSize+1,c
  7449  0027B8  0E06               	movlw	6
  7450  0027BA  6E1A               	movwf	crc8@dataSize,c
  7451  0027BC  ECCF  F01C         	call	_crc8	;wreg free
  7452  0027C0  0100               	movlb	0	; () banked
  7453  0027C2  6FD7               	movwf	(DacReadValue@TxMsg+6)& (0+255),b
  7454                           
  7455                           ; BSR set to: 0
  7456                           ;DacApp.c: 65: WriteUartMessage(TxMsg, 2 + (0x4) + 1);
  7457  0027C4  0ED1               	movlw	low DacReadValue@TxMsg
  7458  0027C6  6E19               	movwf	WriteUartMessage@dataBuf,c
  7459  0027C8  0E00               	movlw	high DacReadValue@TxMsg
  7460  0027CA  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  7461  0027CC  0E00               	movlw	0
  7462  0027CE  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  7463  0027D0  0E07               	movlw	7
  7464  0027D2  6E1B               	movwf	WriteUartMessage@dataSize,c
  7465  0027D4  EC63  F01E         	call	_WriteUartMessage	;wreg free
  7466  0027D8  0012               	return		;funcret
  7467  0027DA                     __end_of_DacReadValue:
  7468                           	opt stack 0
  7469                           tosu	equ	0xFFF
  7470                           tosh	equ	0xFFE
  7471                           tosl	equ	0xFFD
  7472                           pclath	equ	0xFFA
  7473                           tblptru	equ	0xFF8
  7474                           tblptrh	equ	0xFF7
  7475                           tblptrl	equ	0xFF6
  7476                           tablat	equ	0xFF5
  7477                           prodh	equ	0xFF4
  7478                           prodl	equ	0xFF3
  7479                           postinc0	equ	0xFEE
  7480                           plusw0	equ	0xFEB
  7481                           wreg	equ	0xFE8
  7482                           indf1	equ	0xFE7
  7483                           postdec1	equ	0xFE5
  7484                           fsr1h	equ	0xFE2
  7485                           fsr1l	equ	0xFE1
  7486                           indf2	equ	0xFDF
  7487                           postinc2	equ	0xFDE
  7488                           postdec2	equ	0xFDD
  7489                           plusw2	equ	0xFDB
  7490                           fsr2h	equ	0xFDA
  7491                           fsr2l	equ	0xFD9
  7492                           status	equ	0xFD8
  7493                           
  7494 ;; *************** function _testLeds *****************
  7495 ;; Defined at:
  7496 ;;		line 43 in file "LedsApp.c"
  7497 ;; Parameters:    Size  Location     Type
  7498 ;;		None
  7499 ;; Auto vars:     Size  Location     Type
  7500 ;;  idx             2   44[COMRAM] int 
  7501 ;; Return value:  Size  Location     Type
  7502 ;;                  1    wreg      void 
  7503 ;; Registers used:
  7504 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7505 ;; Tracked objects:
  7506 ;;		On entry : 0/0
  7507 ;;		On exit  : 0/0
  7508 ;;		Unchanged: 0/0
  7509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7510 ;;      Params:         0       0       0       0       0       0       0
  7511 ;;      Locals:         2       0       0       0       0       0       0
  7512 ;;      Temps:          1       0       0       0       0       0       0
  7513 ;;      Totals:         3       0       0       0       0       0       0
  7514 ;;Total ram usage:        3 bytes
  7515 ;; Hardware stack levels used:    1
  7516 ;; Hardware stack levels required when called:    7
  7517 ;; This function calls:
  7518 ;;		_SendAckMessage
  7519 ;; This function is called by:
  7520 ;;		_GroupControlMcu
  7521 ;; This function uses a non-reentrant model
  7522 ;;
  7523                           
  7524                           	psect	text28
  7525  0033D0                     __ptext28:
  7526                           	opt stack 0
  7527  0033D0                     _testLeds:
  7528                           	opt stack 21
  7529                           
  7530                           ;LedsApp.c: 46: for(int idx = 0; idx < 10; idx++)
  7531                           
  7532                           ;incstack = 0
  7533  0033D0  0E00               	movlw	0
  7534  0033D2  6E2E               	movwf	testLeds@idx+1,c
  7535  0033D4  0E00               	movlw	0
  7536  0033D6  6E2D               	movwf	testLeds@idx,c
  7537  0033D8                     l8114:
  7538  0033D8  BE2E               	btfsc	testLeds@idx+1,7,c
  7539  0033DA  D006               	goto	l60
  7540  0033DC  502E               	movf	testLeds@idx+1,w,c
  7541  0033DE  E127               	bnz	l8128
  7542  0033E0  0E0A               	movlw	10
  7543  0033E2  5C2D               	subwf	testLeds@idx,w,c
  7544  0033E4  B0D8               	btfsc	status,0,c
  7545  0033E6  D023               	goto	u8190
  7546  0033E8                     l60:
  7547                           
  7548                           ;LedsApp.c: 47: {
  7549                           ;LedsApp.c: 49: LATCbits.LATC0 = 1;
  7550  0033E8  808B               	bsf	3979,0,c	;volatile
  7551                           
  7552                           ;LedsApp.c: 50: _delay((unsigned long)((50)*(8000000/4000.0)));
  7553  0033EA  0E82               	movlw	130
  7554  0033EC  6E2C               	movwf	??_testLeds& (0+255),c
  7555  0033EE  0EDE               	movlw	222
  7556  0033F0                     u9047:
  7557  0033F0  2EE8               	decfsz	wreg,f,c
  7558  0033F2  D7FE               	bra	u9047
  7559  0033F4  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7560  0033F6  D7FC               	bra	u9047
  7561                           
  7562                           ;LedsApp.c: 51: LATBbits.LATB4 = 1;
  7563  0033F8  888A               	bsf	3978,4,c	;volatile
  7564                           
  7565                           ;LedsApp.c: 52: _delay((unsigned long)((50)*(8000000/4000.0)));
  7566  0033FA  0E82               	movlw	130
  7567  0033FC  6E2C               	movwf	??_testLeds& (0+255),c
  7568  0033FE  0EDE               	movlw	222
  7569  003400                     u9057:
  7570  003400  2EE8               	decfsz	wreg,f,c
  7571  003402  D7FE               	bra	u9057
  7572  003404  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7573  003406  D7FC               	bra	u9057
  7574                           
  7575                           ;LedsApp.c: 53: LATCbits.LATC0 = 0;
  7576  003408  908B               	bcf	3979,0,c	;volatile
  7577                           
  7578                           ;LedsApp.c: 54: _delay((unsigned long)((50)*(8000000/4000.0)));
  7579  00340A  0E82               	movlw	130
  7580  00340C  6E2C               	movwf	??_testLeds& (0+255),c
  7581  00340E  0EDE               	movlw	222
  7582  003410                     u9067:
  7583  003410  2EE8               	decfsz	wreg,f,c
  7584  003412  D7FE               	bra	u9067
  7585  003414  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7586  003416  D7FC               	bra	u9067
  7587                           
  7588                           ;LedsApp.c: 55: LATBbits.LATB4 = 0;
  7589  003418  988A               	bcf	3978,4,c	;volatile
  7590                           
  7591                           ;LedsApp.c: 56: _delay((unsigned long)((50)*(8000000/4000.0)));
  7592  00341A  0E82               	movlw	130
  7593  00341C  6E2C               	movwf	??_testLeds& (0+255),c
  7594  00341E  0EDE               	movlw	222
  7595  003420                     u9077:
  7596  003420  2EE8               	decfsz	wreg,f,c
  7597  003422  D7FE               	bra	u9077
  7598  003424  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7599  003426  D7FC               	bra	u9077
  7600  003428  4A2D               	infsnz	testLeds@idx,f,c
  7601  00342A  2A2E               	incf	testLeds@idx+1,f,c
  7602  00342C  D7D5               	goto	l8114
  7603  00342E                     u8190:
  7604  00342E                     l8128:
  7605                           
  7606                           ;LedsApp.c: 57: }
  7607                           ;LedsApp.c: 59: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_TEST_LEDS);
  7608  00342E  0E14               	movlw	20
  7609  003430  6E24               	movwf	SendAckMessage@inRequest,c
  7610  003432  0E01               	movlw	1
  7611  003434  ECA6  F01C         	call	_SendAckMessage
  7612  003438  0012               	return	
  7613  00343A                     __end_of_testLeds:
  7614                           	opt stack 0
  7615                           tosu	equ	0xFFF
  7616                           tosh	equ	0xFFE
  7617                           tosl	equ	0xFFD
  7618                           pclath	equ	0xFFA
  7619                           tblptru	equ	0xFF8
  7620                           tblptrh	equ	0xFF7
  7621                           tblptrl	equ	0xFF6
  7622                           tablat	equ	0xFF5
  7623                           prodh	equ	0xFF4
  7624                           prodl	equ	0xFF3
  7625                           postinc0	equ	0xFEE
  7626                           plusw0	equ	0xFEB
  7627                           wreg	equ	0xFE8
  7628                           indf1	equ	0xFE7
  7629                           postdec1	equ	0xFE5
  7630                           fsr1h	equ	0xFE2
  7631                           fsr1l	equ	0xFE1
  7632                           indf2	equ	0xFDF
  7633                           postinc2	equ	0xFDE
  7634                           postdec2	equ	0xFDD
  7635                           plusw2	equ	0xFDB
  7636                           fsr2h	equ	0xFDA
  7637                           fsr2l	equ	0xFD9
  7638                           status	equ	0xFD8
  7639                           
  7640 ;; *************** function _ResetMcu *****************
  7641 ;; Defined at:
  7642 ;;		line 144 in file "SystemCommon.c"
  7643 ;; Parameters:    Size  Location     Type
  7644 ;;		None
  7645 ;; Auto vars:     Size  Location     Type
  7646 ;;		None
  7647 ;; Return value:  Size  Location     Type
  7648 ;;                  1    wreg      void 
  7649 ;; Registers used:
  7650 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7651 ;; Tracked objects:
  7652 ;;		On entry : 0/0
  7653 ;;		On exit  : 0/0
  7654 ;;		Unchanged: 0/0
  7655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7656 ;;      Params:         0       0       0       0       0       0       0
  7657 ;;      Locals:         0       0       0       0       0       0       0
  7658 ;;      Temps:          0       0       0       0       0       0       0
  7659 ;;      Totals:         0       0       0       0       0       0       0
  7660 ;;Total ram usage:        0 bytes
  7661 ;; Hardware stack levels used:    1
  7662 ;; Hardware stack levels required when called:    7
  7663 ;; This function calls:
  7664 ;;		_SendAckMessage
  7665 ;; This function is called by:
  7666 ;;		_GroupControlMcu
  7667 ;; This function uses a non-reentrant model
  7668 ;;
  7669                           
  7670                           	psect	text29
  7671  0041B8                     __ptext29:
  7672                           	opt stack 0
  7673  0041B8                     _ResetMcu:
  7674                           	opt stack 21
  7675                           
  7676                           ;SystemCommon.c: 147: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_RESET
      +                          _MCU);
  7677                           
  7678                           ;incstack = 0
  7679  0041B8  0E11               	movlw	17
  7680  0041BA  6E24               	movwf	SendAckMessage@inRequest,c
  7681  0041BC  0E01               	movlw	1
  7682  0041BE  ECA6  F01C         	call	_SendAckMessage
  7683  0041C2  00FF               	reset		;# 
  7684  0041C4  0012               	return		;funcret
  7685  0041C6                     __end_of_ResetMcu:
  7686                           	opt stack 0
  7687                           tosu	equ	0xFFF
  7688                           tosh	equ	0xFFE
  7689                           tosl	equ	0xFFD
  7690                           pclath	equ	0xFFA
  7691                           tblptru	equ	0xFF8
  7692                           tblptrh	equ	0xFF7
  7693                           tblptrl	equ	0xFF6
  7694                           tablat	equ	0xFF5
  7695                           prodh	equ	0xFF4
  7696                           prodl	equ	0xFF3
  7697                           postinc0	equ	0xFEE
  7698                           plusw0	equ	0xFEB
  7699                           wreg	equ	0xFE8
  7700                           indf1	equ	0xFE7
  7701                           postdec1	equ	0xFE5
  7702                           fsr1h	equ	0xFE2
  7703                           fsr1l	equ	0xFE1
  7704                           indf2	equ	0xFDF
  7705                           postinc2	equ	0xFDE
  7706                           postdec2	equ	0xFDD
  7707                           plusw2	equ	0xFDB
  7708                           fsr2h	equ	0xFDA
  7709                           fsr2l	equ	0xFD9
  7710                           status	equ	0xFD8
  7711                           
  7712 ;; *************** function _SetChannelMode *****************
  7713 ;; Defined at:
  7714 ;;		line 30 in file "AdcApp.c"
  7715 ;; Parameters:    Size  Location     Type
  7716 ;;  data            2   43[COMRAM] PTR unsigned char 
  7717 ;; Auto vars:     Size  Location     Type
  7718 ;;		None
  7719 ;; Return value:  Size  Location     Type
  7720 ;;                  1    wreg      void 
  7721 ;; Registers used:
  7722 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7723 ;; Tracked objects:
  7724 ;;		On entry : 0/0
  7725 ;;		On exit  : 0/0
  7726 ;;		Unchanged: 0/0
  7727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7728 ;;      Params:         2       0       0       0       0       0       0
  7729 ;;      Locals:         0       0       0       0       0       0       0
  7730 ;;      Temps:          0       0       0       0       0       0       0
  7731 ;;      Totals:         2       0       0       0       0       0       0
  7732 ;;Total ram usage:        2 bytes
  7733 ;; Hardware stack levels used:    1
  7734 ;; Hardware stack levels required when called:    7
  7735 ;; This function calls:
  7736 ;;		_SendAckMessage
  7737 ;; This function is called by:
  7738 ;;		_GroupAdc
  7739 ;; This function uses a non-reentrant model
  7740 ;;
  7741                           
  7742                           	psect	text30
  7743  003E34                     __ptext30:
  7744                           	opt stack 0
  7745  003E34                     _SetChannelMode:
  7746                           	opt stack 21
  7747                           
  7748                           ;AdcApp.c: 32: adcSampleMode = data[0];
  7749                           
  7750                           ;incstack = 0
  7751  003E34  C02C  FFD9         	movff	SetChannelMode@data,fsr2l
  7752  003E38  C02D  FFDA         	movff	SetChannelMode@data+1,fsr2h
  7753  003E3C  50DF               	movf	indf2,w,c
  7754  003E3E  6E3E               	movwf	_adcSampleMode,c
  7755                           
  7756                           ;AdcApp.c: 33: if (adcSampleMode == SINGLE_CHANNEL)
  7757  003E40  043E               	decf	_adcSampleMode,w,c
  7758  003E42  A4D8               	btfss	status,2,c
  7759  003E44  D009               	goto	l122
  7760                           
  7761                           ;AdcApp.c: 34: {
  7762                           ;AdcApp.c: 35: channel = data[1];
  7763  003E46  EE20 F001          	lfsr	2,1
  7764  003E4A  502C               	movf	SetChannelMode@data,w,c
  7765  003E4C  26D9               	addwf	fsr2l,f,c
  7766  003E4E  502D               	movf	SetChannelMode@data+1,w,c
  7767  003E50  22DA               	addwfc	fsr2h,f,c
  7768  003E52  50DF               	movf	indf2,w,c
  7769  003E54  0100               	movlb	0	; () banked
  7770  003E56  6FF8               	movwf	_channel& (0+255),b
  7771  003E58                     l122:
  7772                           
  7773                           ;AdcApp.c: 36: }
  7774                           ;AdcApp.c: 37: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_CHANNEL_MODE);
  7775                           
  7776                           ; BSR set to: 0
  7777  003E58  0E32               	movlw	50
  7778  003E5A  6E24               	movwf	SendAckMessage@inRequest,c
  7779  003E5C  0E03               	movlw	3
  7780  003E5E  ECA6  F01C         	call	_SendAckMessage
  7781  003E62  0012               	return		;funcret
  7782  003E64                     __end_of_SetChannelMode:
  7783                           	opt stack 0
  7784                           tosu	equ	0xFFF
  7785                           tosh	equ	0xFFE
  7786                           tosl	equ	0xFFD
  7787                           pclath	equ	0xFFA
  7788                           tblptru	equ	0xFF8
  7789                           tblptrh	equ	0xFF7
  7790                           tblptrl	equ	0xFF6
  7791                           tablat	equ	0xFF5
  7792                           prodh	equ	0xFF4
  7793                           prodl	equ	0xFF3
  7794                           postinc0	equ	0xFEE
  7795                           plusw0	equ	0xFEB
  7796                           wreg	equ	0xFE8
  7797                           indf1	equ	0xFE7
  7798                           postdec1	equ	0xFE5
  7799                           fsr1h	equ	0xFE2
  7800                           fsr1l	equ	0xFE1
  7801                           indf2	equ	0xFDF
  7802                           postinc2	equ	0xFDE
  7803                           postdec2	equ	0xFDD
  7804                           plusw2	equ	0xFDB
  7805                           fsr2h	equ	0xFDA
  7806                           fsr2l	equ	0xFD9
  7807                           status	equ	0xFD8
  7808                           
  7809 ;; *************** function _EUSART1_Read *****************
  7810 ;; Defined at:
  7811 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  7812 ;; Parameters:    Size  Location     Type
  7813 ;;		None
  7814 ;; Auto vars:     Size  Location     Type
  7815 ;;  readValue       2   24[COMRAM] unsigned int 
  7816 ;; Return value:  Size  Location     Type
  7817 ;;                  1    wreg      unsigned char 
  7818 ;; Registers used:
  7819 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7820 ;; Tracked objects:
  7821 ;;		On entry : 0/0
  7822 ;;		On exit  : 0/0
  7823 ;;		Unchanged: 0/0
  7824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7825 ;;      Params:         0       0       0       0       0       0       0
  7826 ;;      Locals:         2       0       0       0       0       0       0
  7827 ;;      Temps:          1       0       0       0       0       0       0
  7828 ;;      Totals:         3       0       0       0       0       0       0
  7829 ;;Total ram usage:        3 bytes
  7830 ;; Hardware stack levels used:    1
  7831 ;; Hardware stack levels required when called:    4
  7832 ;; This function calls:
  7833 ;;		Nothing
  7834 ;; This function is called by:
  7835 ;;		_readUartMessage
  7836 ;; This function uses a non-reentrant model
  7837 ;;
  7838                           
  7839                           	psect	text31
  7840  0039EC                     __ptext31:
  7841                           	opt stack 0
  7842  0039EC                     _EUSART1_Read:
  7843                           	opt stack 25
  7844                           
  7845                           ;eusart1.c: 112: uint16_t readValue = 0;
  7846                           
  7847                           ;incstack = 0
  7848  0039EC  0E00               	movlw	0
  7849  0039EE  6E1A               	movwf	EUSART1_Read@readValue+1,c
  7850  0039F0  0E00               	movlw	0
  7851  0039F2  6E19               	movwf	EUSART1_Read@readValue,c
  7852                           
  7853                           ;eusart1.c: 119: if (eusart1RxCount == 0)
  7854  0039F4  0100               	movlb	0	; () banked
  7855  0039F6  51F7               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  7856  0039F8  A4D8               	btfss	status,2,c
  7857  0039FA  D002               	goto	l894
  7858                           
  7859                           ; BSR set to: 0
  7860                           ;eusart1.c: 120: {
  7861                           ;eusart1.c: 121: return readValue;
  7862  0039FC  5019               	movf	EUSART1_Read@readValue,w,c
  7863                           
  7864                           ; BSR set to: 0
  7865  0039FE  0012               	return	
  7866  003A00                     l894:
  7867                           
  7868                           ; BSR set to: 0
  7869                           ;eusart1.c: 122: }
  7870                           ;eusart1.c: 124: readValue = eusart1RxBuffer[eusart1RxTail++];
  7871                           
  7872                           ; BSR set to: 0
  7873  003A00  5037               	movf	_eusart1RxTail,w,c	;volatile
  7874  003A02  0D01               	mullw	1
  7875  003A04  0E00               	movlw	low _eusart1RxBuffer
  7876  003A06  24F3               	addwf	prodl,w,c
  7877  003A08  6ED9               	movwf	fsr2l,c
  7878  003A0A  0E01               	movlw	high _eusart1RxBuffer
  7879  003A0C  20F4               	addwfc	prodh,w,c
  7880  003A0E  6EDA               	movwf	fsr2h,c
  7881  003A10  50DF               	movf	indf2,w,c
  7882  003A12  6E18               	movwf	??_EUSART1_Read& (0+255),c
  7883  003A14  5018               	movf	??_EUSART1_Read,w,c
  7884  003A16  6E19               	movwf	EUSART1_Read@readValue,c
  7885  003A18  6A1A               	clrf	EUSART1_Read@readValue+1,c
  7886                           
  7887                           ; BSR set to: 0
  7888  003A1A  2A37               	incf	_eusart1RxTail,f,c	;volatile
  7889                           
  7890                           ; BSR set to: 0
  7891                           ;eusart1.c: 125: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
  7892  003A1C  0E27               	movlw	39
  7893  003A1E  6437               	cpfsgt	_eusart1RxTail,c	;volatile
  7894  003A20  D002               	goto	l896
  7895                           
  7896                           ; BSR set to: 0
  7897                           ;eusart1.c: 126: {
  7898                           ;eusart1.c: 127: eusart1RxTail = 0;
  7899  003A22  0E00               	movlw	0
  7900  003A24  6E37               	movwf	_eusart1RxTail,c	;volatile
  7901  003A26                     l896:
  7902                           
  7903                           ; BSR set to: 0
  7904                           ;eusart1.c: 128: }
  7905                           ;eusart1.c: 129: PIE1bits.RC1IE = 0;
  7906                           
  7907                           ; BSR set to: 0
  7908  003A26  9A9D               	bcf	3997,5,c	;volatile
  7909                           
  7910                           ; BSR set to: 0
  7911                           ;eusart1.c: 130: eusart1RxCount--;
  7912  003A28  07F7               	decf	_eusart1RxCount& (0+255),f,b	;volatile
  7913                           
  7914                           ; BSR set to: 0
  7915                           ;eusart1.c: 131: PIE1bits.RC1IE = 1;
  7916  003A2A  8A9D               	bsf	3997,5,c	;volatile
  7917                           
  7918                           ; BSR set to: 0
  7919                           ;eusart1.c: 133: return readValue;
  7920  003A2C  5019               	movf	EUSART1_Read@readValue,w,c
  7921  003A2E  0012               	return	
  7922  003A30                     __end_of_EUSART1_Read:
  7923                           	opt stack 0
  7924                           tosu	equ	0xFFF
  7925                           tosh	equ	0xFFE
  7926                           tosl	equ	0xFFD
  7927                           pclath	equ	0xFFA
  7928                           tblptru	equ	0xFF8
  7929                           tblptrh	equ	0xFF7
  7930                           tblptrl	equ	0xFF6
  7931                           tablat	equ	0xFF5
  7932                           prodh	equ	0xFF4
  7933                           prodl	equ	0xFF3
  7934                           postinc0	equ	0xFEE
  7935                           plusw0	equ	0xFEB
  7936                           wreg	equ	0xFE8
  7937                           indf1	equ	0xFE7
  7938                           postdec1	equ	0xFE5
  7939                           fsr1h	equ	0xFE2
  7940                           fsr1l	equ	0xFE1
  7941                           indf2	equ	0xFDF
  7942                           postinc2	equ	0xFDE
  7943                           postdec2	equ	0xFDD
  7944                           plusw2	equ	0xFDB
  7945                           fsr2h	equ	0xFDA
  7946                           fsr2l	equ	0xFD9
  7947                           status	equ	0xFD8
  7948                           
  7949 ;; *************** function _keepAliveSignalLed *****************
  7950 ;; Defined at:
  7951 ;;		line 35 in file "LedsApp.c"
  7952 ;; Parameters:    Size  Location     Type
  7953 ;;		None
  7954 ;; Auto vars:     Size  Location     Type
  7955 ;;		None
  7956 ;; Return value:  Size  Location     Type
  7957 ;;                  1    wreg      void 
  7958 ;; Registers used:
  7959 ;;		wreg, status,2, status,0
  7960 ;; Tracked objects:
  7961 ;;		On entry : 0/0
  7962 ;;		On exit  : 0/0
  7963 ;;		Unchanged: 0/0
  7964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7965 ;;      Params:         0       0       0       0       0       0       0
  7966 ;;      Locals:         0       0       0       0       0       0       0
  7967 ;;      Temps:          1       0       0       0       0       0       0
  7968 ;;      Totals:         1       0       0       0       0       0       0
  7969 ;;Total ram usage:        1 bytes
  7970 ;; Hardware stack levels used:    1
  7971 ;; Hardware stack levels required when called:    4
  7972 ;; This function calls:
  7973 ;;		Nothing
  7974 ;; This function is called by:
  7975 ;;		_main
  7976 ;; This function uses a non-reentrant model
  7977 ;;
  7978                           
  7979                           	psect	text32
  7980  004106                     __ptext32:
  7981                           	opt stack 0
  7982  004106                     _keepAliveSignalLed:
  7983                           	opt stack 26
  7984                           
  7985                           ;LedsApp.c: 37: LATCbits.LATC0 = !LATCbits.LATC0;
  7986                           
  7987                           ; BSR set to: 0
  7988                           ;incstack = 0
  7989  004106  B08B               	btfsc	3979,0,c	;volatile
  7990  004108  D003               	goto	u5700
  7991  00410A  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  7992  00410C  2A18               	incf	??_keepAliveSignalLed& (0+255),f,c
  7993  00410E  D001               	goto	u5718
  7994  004110                     u5700:
  7995  004110  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  7996  004112                     u5718:
  7997  004112  508B               	movf	3979,w,c	;volatile
  7998  004114  1818               	xorwf	??_keepAliveSignalLed,w,c
  7999  004116  0BFE               	andlw	-2
  8000  004118  1818               	xorwf	??_keepAliveSignalLed,w,c
  8001  00411A  6E8B               	movwf	3979,c	;volatile
  8002  00411C  0012               	return		;funcret
  8003  00411E                     __end_of_keepAliveSignalLed:
  8004                           	opt stack 0
  8005                           tosu	equ	0xFFF
  8006                           tosh	equ	0xFFE
  8007                           tosl	equ	0xFFD
  8008                           pclath	equ	0xFFA
  8009                           tblptru	equ	0xFF8
  8010                           tblptrh	equ	0xFF7
  8011                           tblptrl	equ	0xFF6
  8012                           tablat	equ	0xFF5
  8013                           prodh	equ	0xFF4
  8014                           prodl	equ	0xFF3
  8015                           postinc0	equ	0xFEE
  8016                           plusw0	equ	0xFEB
  8017                           wreg	equ	0xFE8
  8018                           indf1	equ	0xFE7
  8019                           postdec1	equ	0xFE5
  8020                           fsr1h	equ	0xFE2
  8021                           fsr1l	equ	0xFE1
  8022                           indf2	equ	0xFDF
  8023                           postinc2	equ	0xFDE
  8024                           postdec2	equ	0xFDD
  8025                           plusw2	equ	0xFDB
  8026                           fsr2h	equ	0xFDA
  8027                           fsr2l	equ	0xFD9
  8028                           status	equ	0xFD8
  8029                           
  8030 ;; *************** function _SetMcuSystem *****************
  8031 ;; Defined at:
  8032 ;;		line 11 in file "SystemSettings.c"
  8033 ;; Parameters:    Size  Location     Type
  8034 ;;		None
  8035 ;; Auto vars:     Size  Location     Type
  8036 ;;		None
  8037 ;; Return value:  Size  Location     Type
  8038 ;;                  1    wreg      void 
  8039 ;; Registers used:
  8040 ;;		wreg, status,2, status,0, cstack
  8041 ;; Tracked objects:
  8042 ;;		On entry : 0/0
  8043 ;;		On exit  : 0/0
  8044 ;;		Unchanged: 0/0
  8045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8046 ;;      Params:         0       0       0       0       0       0       0
  8047 ;;      Locals:         0       0       0       0       0       0       0
  8048 ;;      Temps:          0       0       0       0       0       0       0
  8049 ;;      Totals:         0       0       0       0       0       0       0
  8050 ;;Total ram usage:        0 bytes
  8051 ;; Hardware stack levels used:    1
  8052 ;; Hardware stack levels required when called:    7
  8053 ;; This function calls:
  8054 ;;		_SYSTEM_Initialize
  8055 ;; This function is called by:
  8056 ;;		_main
  8057 ;; This function uses a non-reentrant model
  8058 ;;
  8059                           
  8060                           	psect	text33
  8061  0041FC                     __ptext33:
  8062                           	opt stack 0
  8063  0041FC                     _SetMcuSystem:
  8064                           	opt stack 23
  8065                           
  8066                           ;SystemSettings.c: 14: SYSTEM_Initialize();
  8067                           
  8068                           ;incstack = 0
  8069  0041FC  EC76  F020         	call	_SYSTEM_Initialize	;wreg free
  8070                           
  8071                           ;SystemSettings.c: 21: (INTCONbits.GIE = 1);
  8072  004200  8EF2               	bsf	intcon,7,c	;volatile
  8073                           
  8074                           ;SystemSettings.c: 27: (INTCONbits.PEIE = 1);
  8075  004202  8CF2               	bsf	intcon,6,c	;volatile
  8076  004204  0012               	return		;funcret
  8077  004206                     __end_of_SetMcuSystem:
  8078                           	opt stack 0
  8079                           tosu	equ	0xFFF
  8080                           tosh	equ	0xFFE
  8081                           tosl	equ	0xFFD
  8082                           pclath	equ	0xFFA
  8083                           tblptru	equ	0xFF8
  8084                           tblptrh	equ	0xFF7
  8085                           tblptrl	equ	0xFF6
  8086                           tablat	equ	0xFF5
  8087                           prodh	equ	0xFF4
  8088                           prodl	equ	0xFF3
  8089                           intcon	equ	0xFF2
  8090                           postinc0	equ	0xFEE
  8091                           plusw0	equ	0xFEB
  8092                           wreg	equ	0xFE8
  8093                           indf1	equ	0xFE7
  8094                           postdec1	equ	0xFE5
  8095                           fsr1h	equ	0xFE2
  8096                           fsr1l	equ	0xFE1
  8097                           indf2	equ	0xFDF
  8098                           postinc2	equ	0xFDE
  8099                           postdec2	equ	0xFDD
  8100                           plusw2	equ	0xFDB
  8101                           fsr2h	equ	0xFDA
  8102                           fsr2l	equ	0xFD9
  8103                           status	equ	0xFD8
  8104                           
  8105 ;; *************** function _SYSTEM_Initialize *****************
  8106 ;; Defined at:
  8107 ;;		line 112 in file "mcc_generated_files/mcc.c"
  8108 ;; Parameters:    Size  Location     Type
  8109 ;;		None
  8110 ;; Auto vars:     Size  Location     Type
  8111 ;;		None
  8112 ;; Return value:  Size  Location     Type
  8113 ;;                  1    wreg      void 
  8114 ;; Registers used:
  8115 ;;		wreg, status,2, status,0, cstack
  8116 ;; Tracked objects:
  8117 ;;		On entry : 0/0
  8118 ;;		On exit  : 0/0
  8119 ;;		Unchanged: 0/0
  8120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8121 ;;      Params:         0       0       0       0       0       0       0
  8122 ;;      Locals:         0       0       0       0       0       0       0
  8123 ;;      Temps:          0       0       0       0       0       0       0
  8124 ;;      Totals:         0       0       0       0       0       0       0
  8125 ;;Total ram usage:        0 bytes
  8126 ;; Hardware stack levels used:    1
  8127 ;; Hardware stack levels required when called:    6
  8128 ;; This function calls:
  8129 ;;		_ADC_Initialize
  8130 ;;		_EUSART1_Initialize
  8131 ;;		_INTERRUPT_Initialize
  8132 ;;		_OSCILLATOR_Initialize
  8133 ;;		_PIN_MANAGER_Initialize
  8134 ;;		_TMR0_Initialize
  8135 ;; This function is called by:
  8136 ;;		_SetMcuSystem
  8137 ;; This function uses a non-reentrant model
  8138 ;;
  8139                           
  8140                           	psect	text34
  8141  0040EC                     __ptext34:
  8142                           	opt stack 0
  8143  0040EC                     _SYSTEM_Initialize:
  8144                           	opt stack 23
  8145                           
  8146                           ;mcc.c: 114: INTERRUPT_Initialize();
  8147                           
  8148                           ;incstack = 0
  8149  0040EC  EC1D  F021         	call	_INTERRUPT_Initialize	;wreg free
  8150                           
  8151                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  8152  0040F0  ECB8  F01A         	call	_PIN_MANAGER_Initialize	;wreg free
  8153                           
  8154                           ;mcc.c: 116: OSCILLATOR_Initialize();
  8155  0040F4  ECE3  F020         	call	_OSCILLATOR_Initialize	;wreg free
  8156                           
  8157                           ;mcc.c: 117: TMR0_Initialize();
  8158  0040F8  ECCE  F01E         	call	_TMR0_Initialize	;wreg free
  8159                           
  8160                           ;mcc.c: 118: ADC_Initialize();
  8161  0040FC  EC8F  F020         	call	_ADC_Initialize	;wreg free
  8162                           
  8163                           ;mcc.c: 119: EUSART1_Initialize();
  8164  004100  EC48  F01E         	call	_EUSART1_Initialize	;wreg free
  8165  004104  0012               	return		;funcret
  8166  004106                     __end_of_SYSTEM_Initialize:
  8167                           	opt stack 0
  8168                           tosu	equ	0xFFF
  8169                           tosh	equ	0xFFE
  8170                           tosl	equ	0xFFD
  8171                           pclath	equ	0xFFA
  8172                           tblptru	equ	0xFF8
  8173                           tblptrh	equ	0xFF7
  8174                           tblptrl	equ	0xFF6
  8175                           tablat	equ	0xFF5
  8176                           prodh	equ	0xFF4
  8177                           prodl	equ	0xFF3
  8178                           intcon	equ	0xFF2
  8179                           postinc0	equ	0xFEE
  8180                           plusw0	equ	0xFEB
  8181                           wreg	equ	0xFE8
  8182                           indf1	equ	0xFE7
  8183                           postdec1	equ	0xFE5
  8184                           fsr1h	equ	0xFE2
  8185                           fsr1l	equ	0xFE1
  8186                           indf2	equ	0xFDF
  8187                           postinc2	equ	0xFDE
  8188                           postdec2	equ	0xFDD
  8189                           plusw2	equ	0xFDB
  8190                           fsr2h	equ	0xFDA
  8191                           fsr2l	equ	0xFD9
  8192                           status	equ	0xFD8
  8193                           
  8194 ;; *************** function _TMR0_Initialize *****************
  8195 ;; Defined at:
  8196 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  8197 ;; Parameters:    Size  Location     Type
  8198 ;;		None
  8199 ;; Auto vars:     Size  Location     Type
  8200 ;;		None
  8201 ;; Return value:  Size  Location     Type
  8202 ;;                  1    wreg      void 
  8203 ;; Registers used:
  8204 ;;		wreg, status,2, status,0, cstack
  8205 ;; Tracked objects:
  8206 ;;		On entry : 0/0
  8207 ;;		On exit  : 0/0
  8208 ;;		Unchanged: 0/0
  8209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8210 ;;      Params:         0       0       0       0       0       0       0
  8211 ;;      Locals:         0       0       0       0       0       0       0
  8212 ;;      Temps:          2       0       0       0       0       0       0
  8213 ;;      Totals:         2       0       0       0       0       0       0
  8214 ;;Total ram usage:        2 bytes
  8215 ;; Hardware stack levels used:    1
  8216 ;; Hardware stack levels required when called:    5
  8217 ;; This function calls:
  8218 ;;		_TMR0_SetInterruptHandler
  8219 ;; This function is called by:
  8220 ;;		_SYSTEM_Initialize
  8221 ;; This function uses a non-reentrant model
  8222 ;;
  8223                           
  8224                           	psect	text35
  8225  003D9C                     __ptext35:
  8226                           	opt stack 0
  8227  003D9C                     _TMR0_Initialize:
  8228                           	opt stack 23
  8229                           
  8230                           ;tmr0.c: 71: TMR0H = 0xF8;
  8231                           
  8232                           ;incstack = 0
  8233  003D9C  0EF8               	movlw	248
  8234  003D9E  6ED7               	movwf	4055,c	;volatile
  8235                           
  8236                           ;tmr0.c: 74: TMR0L = 0x2F;
  8237  003DA0  0E2F               	movlw	47
  8238  003DA2  6ED6               	movwf	4054,c	;volatile
  8239                           
  8240                           ;tmr0.c: 78: timer0ReloadVal = (TMR0H << 8) | TMR0L;
  8241  003DA4  50D6               	movf	4054,w,c	;volatile
  8242  003DA6  CFD7 F01A          	movff	4055,??_TMR0_Initialize	;volatile
  8243  003DAA  6A1B               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  8244  003DAC  C01A  F01B         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  8245  003DB0  6A1A               	clrf	??_TMR0_Initialize,c
  8246  003DB2  101A               	iorwf	??_TMR0_Initialize,w,c
  8247  003DB4  6E45               	movwf	_timer0ReloadVal,c	;volatile
  8248  003DB6  501B               	movf	??_TMR0_Initialize+1,w,c
  8249  003DB8  6E46               	movwf	_timer0ReloadVal+1,c	;volatile
  8250                           
  8251                           ;tmr0.c: 81: INTCONbits.TMR0IF = 0;
  8252  003DBA  94F2               	bcf	intcon,2,c	;volatile
  8253                           
  8254                           ;tmr0.c: 84: INTCONbits.TMR0IE = 1;
  8255  003DBC  8AF2               	bsf	intcon,5,c	;volatile
  8256                           
  8257                           ;tmr0.c: 87: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  8258  003DBE  0E00               	movlw	0
  8259  003DC0  6E18               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  8260  003DC2  0E00               	movlw	0
  8261  003DC4  6E19               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  8262  003DC6  EC03  F021         	call	_TMR0_SetInterruptHandler	;wreg free
  8263                           
  8264                           ;tmr0.c: 90: T0CON = 0x90;
  8265  003DCA  0E90               	movlw	144
  8266  003DCC  6ED5               	movwf	4053,c	;volatile
  8267  003DCE  0012               	return		;funcret
  8268  003DD0                     __end_of_TMR0_Initialize:
  8269                           	opt stack 0
  8270                           tosu	equ	0xFFF
  8271                           tosh	equ	0xFFE
  8272                           tosl	equ	0xFFD
  8273                           pclath	equ	0xFFA
  8274                           tblptru	equ	0xFF8
  8275                           tblptrh	equ	0xFF7
  8276                           tblptrl	equ	0xFF6
  8277                           tablat	equ	0xFF5
  8278                           prodh	equ	0xFF4
  8279                           prodl	equ	0xFF3
  8280                           intcon	equ	0xFF2
  8281                           postinc0	equ	0xFEE
  8282                           plusw0	equ	0xFEB
  8283                           wreg	equ	0xFE8
  8284                           indf1	equ	0xFE7
  8285                           postdec1	equ	0xFE5
  8286                           fsr1h	equ	0xFE2
  8287                           fsr1l	equ	0xFE1
  8288                           indf2	equ	0xFDF
  8289                           postinc2	equ	0xFDE
  8290                           postdec2	equ	0xFDD
  8291                           plusw2	equ	0xFDB
  8292                           fsr2h	equ	0xFDA
  8293                           fsr2l	equ	0xFD9
  8294                           status	equ	0xFD8
  8295                           
  8296 ;; *************** function _TMR0_SetInterruptHandler *****************
  8297 ;; Defined at:
  8298 ;;		line 179 in file "mcc_generated_files/tmr0.c"
  8299 ;; Parameters:    Size  Location     Type
  8300 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  8301 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  8302 ;; Auto vars:     Size  Location     Type
  8303 ;;		None
  8304 ;; Return value:  Size  Location     Type
  8305 ;;                  1    wreg      void 
  8306 ;; Registers used:
  8307 ;;		wreg, status,2, status,0
  8308 ;; Tracked objects:
  8309 ;;		On entry : 0/0
  8310 ;;		On exit  : 0/0
  8311 ;;		Unchanged: 0/0
  8312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8313 ;;      Params:         2       0       0       0       0       0       0
  8314 ;;      Locals:         0       0       0       0       0       0       0
  8315 ;;      Temps:          0       0       0       0       0       0       0
  8316 ;;      Totals:         2       0       0       0       0       0       0
  8317 ;;Total ram usage:        2 bytes
  8318 ;; Hardware stack levels used:    1
  8319 ;; Hardware stack levels required when called:    4
  8320 ;; This function calls:
  8321 ;;		Nothing
  8322 ;; This function is called by:
  8323 ;;		_TMR0_Initialize
  8324 ;; This function uses a non-reentrant model
  8325 ;;
  8326                           
  8327                           	psect	text36
  8328  004206                     __ptext36:
  8329                           	opt stack 0
  8330  004206                     _TMR0_SetInterruptHandler:
  8331                           	opt stack 23
  8332                           
  8333                           ;tmr0.c: 180: TMR0_InterruptHandler = InterruptHandler;
  8334                           
  8335                           ;incstack = 0
  8336  004206  C018  F1F5         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  8337  00420A  C019  F1F6         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  8338  00420E  0012               	return		;funcret
  8339  004210                     __end_of_TMR0_SetInterruptHandler:
  8340                           	opt stack 0
  8341                           tosu	equ	0xFFF
  8342                           tosh	equ	0xFFE
  8343                           tosl	equ	0xFFD
  8344                           pclath	equ	0xFFA
  8345                           tblptru	equ	0xFF8
  8346                           tblptrh	equ	0xFF7
  8347                           tblptrl	equ	0xFF6
  8348                           tablat	equ	0xFF5
  8349                           prodh	equ	0xFF4
  8350                           prodl	equ	0xFF3
  8351                           intcon	equ	0xFF2
  8352                           postinc0	equ	0xFEE
  8353                           plusw0	equ	0xFEB
  8354                           wreg	equ	0xFE8
  8355                           indf1	equ	0xFE7
  8356                           postdec1	equ	0xFE5
  8357                           fsr1h	equ	0xFE2
  8358                           fsr1l	equ	0xFE1
  8359                           indf2	equ	0xFDF
  8360                           postinc2	equ	0xFDE
  8361                           postdec2	equ	0xFDD
  8362                           plusw2	equ	0xFDB
  8363                           fsr2h	equ	0xFDA
  8364                           fsr2l	equ	0xFD9
  8365                           status	equ	0xFD8
  8366                           
  8367 ;; *************** function _PIN_MANAGER_Initialize *****************
  8368 ;; Defined at:
  8369 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  8370 ;; Parameters:    Size  Location     Type
  8371 ;;		None
  8372 ;; Auto vars:     Size  Location     Type
  8373 ;;		None
  8374 ;; Return value:  Size  Location     Type
  8375 ;;                  1    wreg      void 
  8376 ;; Registers used:
  8377 ;;		wreg, status,2, status,0, cstack
  8378 ;; Tracked objects:
  8379 ;;		On entry : 0/0
  8380 ;;		On exit  : 0/0
  8381 ;;		Unchanged: 0/0
  8382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8383 ;;      Params:         0       0       0       0       0       0       0
  8384 ;;      Locals:         0       0       0       0       0       0       0
  8385 ;;      Temps:          0       0       0       0       0       0       0
  8386 ;;      Totals:         0       0       0       0       0       0       0
  8387 ;;Total ram usage:        0 bytes
  8388 ;; Hardware stack levels used:    1
  8389 ;; Hardware stack levels required when called:    5
  8390 ;; This function calls:
  8391 ;;		_IOCB4_SetInterruptHandler
  8392 ;;		_IOCB5_SetInterruptHandler
  8393 ;; This function is called by:
  8394 ;;		_SYSTEM_Initialize
  8395 ;; This function uses a non-reentrant model
  8396 ;;
  8397                           
  8398                           	psect	text37
  8399  003570                     __ptext37:
  8400                           	opt stack 0
  8401  003570                     _PIN_MANAGER_Initialize:
  8402                           	opt stack 23
  8403                           
  8404                           ;pin_manager.c: 60: LATE = 0x00;
  8405                           
  8406                           ;incstack = 0
  8407  003570  0E00               	movlw	0
  8408  003572  6E8D               	movwf	3981,c	;volatile
  8409                           
  8410                           ;pin_manager.c: 61: LATD = 0x00;
  8411  003574  0E00               	movlw	0
  8412  003576  6E8C               	movwf	3980,c	;volatile
  8413                           
  8414                           ;pin_manager.c: 62: LATA = 0x06;
  8415  003578  0E06               	movlw	6
  8416  00357A  6E89               	movwf	3977,c	;volatile
  8417                           
  8418                           ;pin_manager.c: 63: LATB = 0x00;
  8419  00357C  0E00               	movlw	0
  8420  00357E  6E8A               	movwf	3978,c	;volatile
  8421                           
  8422                           ;pin_manager.c: 64: LATC = 0x00;
  8423  003580  0E00               	movlw	0
  8424  003582  6E8B               	movwf	3979,c	;volatile
  8425                           
  8426                           ;pin_manager.c: 69: TRISE = 0x07;
  8427  003584  0E07               	movlw	7
  8428  003586  6E96               	movwf	3990,c	;volatile
  8429                           
  8430                           ;pin_manager.c: 70: TRISA = 0xE1;
  8431  003588  0EE1               	movlw	225
  8432  00358A  6E92               	movwf	3986,c	;volatile
  8433                           
  8434                           ;pin_manager.c: 71: TRISB = 0xEF;
  8435  00358C  0EEF               	movlw	239
  8436  00358E  6E93               	movwf	3987,c	;volatile
  8437                           
  8438                           ;pin_manager.c: 72: TRISC = 0x80;
  8439  003590  0E80               	movlw	128
  8440  003592  6E94               	movwf	3988,c	;volatile
  8441                           
  8442                           ;pin_manager.c: 73: TRISD = 0xF2;
  8443  003594  0EF2               	movlw	242
  8444  003596  6E95               	movwf	3989,c	;volatile
  8445                           
  8446                           ;pin_manager.c: 78: ANSELC = 0x34;
  8447  003598  0E34               	movlw	52
  8448  00359A  010F               	movlb	15	; () banked
  8449  00359C  6F3A               	movwf	58,b	;volatile
  8450                           
  8451                           ;pin_manager.c: 79: ANSELB = 0x3E;
  8452  00359E  0E3E               	movlw	62
  8453  0035A0  6F39               	movwf	57,b	;volatile
  8454                           
  8455                           ;pin_manager.c: 80: ANSELD = 0xE4;
  8456  0035A2  0EE4               	movlw	228
  8457  0035A4  6F3B               	movwf	59,b	;volatile
  8458                           
  8459                           ;pin_manager.c: 81: ANSELE = 0x07;
  8460  0035A6  0E07               	movlw	7
  8461  0035A8  6F3C               	movwf	60,b	;volatile
  8462                           
  8463                           ;pin_manager.c: 82: ANSELA = 0x2F;
  8464  0035AA  0E2F               	movlw	47
  8465  0035AC  6F38               	movwf	56,b	;volatile
  8466                           
  8467                           ;pin_manager.c: 87: WPUB = 0xC3;
  8468  0035AE  0EC3               	movlw	195
  8469  0035B0  6E61               	movwf	3937,c	;volatile
  8470                           
  8471                           ; BSR set to: 15
  8472                           ;pin_manager.c: 88: INTCON2bits.nRBPU = 0;
  8473  0035B2  9EF1               	bcf	intcon2,7,c	;volatile
  8474                           
  8475                           ; BSR set to: 15
  8476                           ;pin_manager.c: 96: IOCBbits.IOCB4 = 1;
  8477  0035B4  8862               	bsf	3938,4,c	;volatile
  8478                           
  8479                           ; BSR set to: 15
  8480                           ;pin_manager.c: 97: IOCBbits.IOCB5 = 1;
  8481  0035B6  8A62               	bsf	3938,5,c	;volatile
  8482                           
  8483                           ; BSR set to: 15
  8484                           ;pin_manager.c: 100: IOCB4_SetInterruptHandler(IOCB4_DefaultInterruptHandler);
  8485  0035B8  0E4A               	movlw	low _IOCB4_DefaultInterruptHandler
  8486  0035BA  6E18               	movwf	IOCB4_SetInterruptHandler@InterruptHandler,c
  8487  0035BC  0E42               	movlw	high _IOCB4_DefaultInterruptHandler
  8488  0035BE  6E19               	movwf	IOCB4_SetInterruptHandler@InterruptHandler+1,c
  8489  0035C0  EC0D  F021         	call	_IOCB4_SetInterruptHandler	;wreg free
  8490                           
  8491                           ;pin_manager.c: 101: IOCB5_SetInterruptHandler(IOCB5_DefaultInterruptHandler);
  8492  0035C4  0E48               	movlw	low _IOCB5_DefaultInterruptHandler
  8493  0035C6  6E18               	movwf	IOCB5_SetInterruptHandler@InterruptHandler,c
  8494  0035C8  0E42               	movlw	high _IOCB5_DefaultInterruptHandler
  8495  0035CA  6E19               	movwf	IOCB5_SetInterruptHandler@InterruptHandler+1,c
  8496  0035CC  EC08  F021         	call	_IOCB5_SetInterruptHandler	;wreg free
  8497                           
  8498                           ;pin_manager.c: 104: INTCONbits.RBIE = 1;
  8499  0035D0  86F2               	bsf	intcon,3,c	;volatile
  8500  0035D2  0012               	return		;funcret
  8501  0035D4                     __end_of_PIN_MANAGER_Initialize:
  8502                           	opt stack 0
  8503                           tosu	equ	0xFFF
  8504                           tosh	equ	0xFFE
  8505                           tosl	equ	0xFFD
  8506                           pclath	equ	0xFFA
  8507                           tblptru	equ	0xFF8
  8508                           tblptrh	equ	0xFF7
  8509                           tblptrl	equ	0xFF6
  8510                           tablat	equ	0xFF5
  8511                           prodh	equ	0xFF4
  8512                           prodl	equ	0xFF3
  8513                           intcon	equ	0xFF2
  8514                           intcon2	equ	0xFF1
  8515                           postinc0	equ	0xFEE
  8516                           plusw0	equ	0xFEB
  8517                           wreg	equ	0xFE8
  8518                           indf1	equ	0xFE7
  8519                           postdec1	equ	0xFE5
  8520                           fsr1h	equ	0xFE2
  8521                           fsr1l	equ	0xFE1
  8522                           indf2	equ	0xFDF
  8523                           postinc2	equ	0xFDE
  8524                           postdec2	equ	0xFDD
  8525                           plusw2	equ	0xFDB
  8526                           fsr2h	equ	0xFDA
  8527                           fsr2l	equ	0xFD9
  8528                           status	equ	0xFD8
  8529                           
  8530 ;; *************** function _IOCB5_SetInterruptHandler *****************
  8531 ;; Defined at:
  8532 ;;		line 172 in file "mcc_generated_files/pin_manager.c"
  8533 ;; Parameters:    Size  Location     Type
  8534 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  8535 ;;		 -> IOCB5_DefaultInterruptHandler(1), 
  8536 ;; Auto vars:     Size  Location     Type
  8537 ;;		None
  8538 ;; Return value:  Size  Location     Type
  8539 ;;                  1    wreg      void 
  8540 ;; Registers used:
  8541 ;;		wreg, status,2, status,0
  8542 ;; Tracked objects:
  8543 ;;		On entry : 0/0
  8544 ;;		On exit  : 0/0
  8545 ;;		Unchanged: 0/0
  8546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8547 ;;      Params:         2       0       0       0       0       0       0
  8548 ;;      Locals:         0       0       0       0       0       0       0
  8549 ;;      Temps:          0       0       0       0       0       0       0
  8550 ;;      Totals:         2       0       0       0       0       0       0
  8551 ;;Total ram usage:        2 bytes
  8552 ;; Hardware stack levels used:    1
  8553 ;; Hardware stack levels required when called:    4
  8554 ;; This function calls:
  8555 ;;		Nothing
  8556 ;; This function is called by:
  8557 ;;		_PIN_MANAGER_Initialize
  8558 ;; This function uses a non-reentrant model
  8559 ;;
  8560                           
  8561                           	psect	text38
  8562  004210                     __ptext38:
  8563                           	opt stack 0
  8564  004210                     _IOCB5_SetInterruptHandler:
  8565                           	opt stack 23
  8566                           
  8567                           ;pin_manager.c: 173: IOCB5_InterruptHandler = InterruptHandler;
  8568                           
  8569                           ;incstack = 0
  8570  004210  C018  F1F7         	movff	IOCB5_SetInterruptHandler@InterruptHandler,_IOCB5_InterruptHandler
  8571  004214  C019  F1F8         	movff	IOCB5_SetInterruptHandler@InterruptHandler+1,_IOCB5_InterruptHandler+1
  8572  004218  0012               	return		;funcret
  8573  00421A                     __end_of_IOCB5_SetInterruptHandler:
  8574                           	opt stack 0
  8575                           tosu	equ	0xFFF
  8576                           tosh	equ	0xFFE
  8577                           tosl	equ	0xFFD
  8578                           pclath	equ	0xFFA
  8579                           tblptru	equ	0xFF8
  8580                           tblptrh	equ	0xFF7
  8581                           tblptrl	equ	0xFF6
  8582                           tablat	equ	0xFF5
  8583                           prodh	equ	0xFF4
  8584                           prodl	equ	0xFF3
  8585                           intcon	equ	0xFF2
  8586                           intcon2	equ	0xFF1
  8587                           postinc0	equ	0xFEE
  8588                           plusw0	equ	0xFEB
  8589                           wreg	equ	0xFE8
  8590                           indf1	equ	0xFE7
  8591                           postdec1	equ	0xFE5
  8592                           fsr1h	equ	0xFE2
  8593                           fsr1l	equ	0xFE1
  8594                           indf2	equ	0xFDF
  8595                           postinc2	equ	0xFDE
  8596                           postdec2	equ	0xFDD
  8597                           plusw2	equ	0xFDB
  8598                           fsr2h	equ	0xFDA
  8599                           fsr2l	equ	0xFD9
  8600                           status	equ	0xFD8
  8601                           
  8602 ;; *************** function _IOCB4_SetInterruptHandler *****************
  8603 ;; Defined at:
  8604 ;;		line 143 in file "mcc_generated_files/pin_manager.c"
  8605 ;; Parameters:    Size  Location     Type
  8606 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  8607 ;;		 -> IOCB4_DefaultInterruptHandler(1), 
  8608 ;; Auto vars:     Size  Location     Type
  8609 ;;		None
  8610 ;; Return value:  Size  Location     Type
  8611 ;;                  1    wreg      void 
  8612 ;; Registers used:
  8613 ;;		wreg, status,2, status,0
  8614 ;; Tracked objects:
  8615 ;;		On entry : 0/0
  8616 ;;		On exit  : 0/0
  8617 ;;		Unchanged: 0/0
  8618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8619 ;;      Params:         2       0       0       0       0       0       0
  8620 ;;      Locals:         0       0       0       0       0       0       0
  8621 ;;      Temps:          0       0       0       0       0       0       0
  8622 ;;      Totals:         2       0       0       0       0       0       0
  8623 ;;Total ram usage:        2 bytes
  8624 ;; Hardware stack levels used:    1
  8625 ;; Hardware stack levels required when called:    4
  8626 ;; This function calls:
  8627 ;;		Nothing
  8628 ;; This function is called by:
  8629 ;;		_PIN_MANAGER_Initialize
  8630 ;; This function uses a non-reentrant model
  8631 ;;
  8632                           
  8633                           	psect	text39
  8634  00421A                     __ptext39:
  8635                           	opt stack 0
  8636  00421A                     _IOCB4_SetInterruptHandler:
  8637                           	opt stack 23
  8638                           
  8639                           ;pin_manager.c: 144: IOCB4_InterruptHandler = InterruptHandler;
  8640                           
  8641                           ;incstack = 0
  8642  00421A  C018  F1F9         	movff	IOCB4_SetInterruptHandler@InterruptHandler,_IOCB4_InterruptHandler
  8643  00421E  C019  F1FA         	movff	IOCB4_SetInterruptHandler@InterruptHandler+1,_IOCB4_InterruptHandler+1
  8644  004222  0012               	return		;funcret
  8645  004224                     __end_of_IOCB4_SetInterruptHandler:
  8646                           	opt stack 0
  8647                           tosu	equ	0xFFF
  8648                           tosh	equ	0xFFE
  8649                           tosl	equ	0xFFD
  8650                           pclath	equ	0xFFA
  8651                           tblptru	equ	0xFF8
  8652                           tblptrh	equ	0xFF7
  8653                           tblptrl	equ	0xFF6
  8654                           tablat	equ	0xFF5
  8655                           prodh	equ	0xFF4
  8656                           prodl	equ	0xFF3
  8657                           intcon	equ	0xFF2
  8658                           intcon2	equ	0xFF1
  8659                           postinc0	equ	0xFEE
  8660                           plusw0	equ	0xFEB
  8661                           wreg	equ	0xFE8
  8662                           indf1	equ	0xFE7
  8663                           postdec1	equ	0xFE5
  8664                           fsr1h	equ	0xFE2
  8665                           fsr1l	equ	0xFE1
  8666                           indf2	equ	0xFDF
  8667                           postinc2	equ	0xFDE
  8668                           postdec2	equ	0xFDD
  8669                           plusw2	equ	0xFDB
  8670                           fsr2h	equ	0xFDA
  8671                           fsr2l	equ	0xFD9
  8672                           status	equ	0xFD8
  8673                           
  8674 ;; *************** function _OSCILLATOR_Initialize *****************
  8675 ;; Defined at:
  8676 ;;		line 122 in file "mcc_generated_files/mcc.c"
  8677 ;; Parameters:    Size  Location     Type
  8678 ;;		None
  8679 ;; Auto vars:     Size  Location     Type
  8680 ;;		None
  8681 ;; Return value:  Size  Location     Type
  8682 ;;                  1    wreg      void 
  8683 ;; Registers used:
  8684 ;;		wreg, status,2
  8685 ;; Tracked objects:
  8686 ;;		On entry : 0/0
  8687 ;;		On exit  : 0/0
  8688 ;;		Unchanged: 0/0
  8689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8690 ;;      Params:         0       0       0       0       0       0       0
  8691 ;;      Locals:         0       0       0       0       0       0       0
  8692 ;;      Temps:          0       0       0       0       0       0       0
  8693 ;;      Totals:         0       0       0       0       0       0       0
  8694 ;;Total ram usage:        0 bytes
  8695 ;; Hardware stack levels used:    1
  8696 ;; Hardware stack levels required when called:    4
  8697 ;; This function calls:
  8698 ;;		Nothing
  8699 ;; This function is called by:
  8700 ;;		_SYSTEM_Initialize
  8701 ;; This function uses a non-reentrant model
  8702 ;;
  8703                           
  8704                           	psect	text40
  8705  0041C6                     __ptext40:
  8706                           	opt stack 0
  8707  0041C6                     _OSCILLATOR_Initialize:
  8708                           	opt stack 24
  8709                           
  8710                           ;mcc.c: 125: OSCCON = 0x60;
  8711                           
  8712                           ;incstack = 0
  8713  0041C6  0E60               	movlw	96
  8714  0041C8  6ED3               	movwf	4051,c	;volatile
  8715                           
  8716                           ;mcc.c: 127: OSCCON2 = 0x04;
  8717  0041CA  0E04               	movlw	4
  8718  0041CC  6ED2               	movwf	4050,c	;volatile
  8719                           
  8720                           ;mcc.c: 129: OSCTUNE = 0x80;
  8721  0041CE  0E80               	movlw	128
  8722  0041D0  6E9B               	movwf	3995,c	;volatile
  8723  0041D2  0012               	return		;funcret
  8724  0041D4                     __end_of_OSCILLATOR_Initialize:
  8725                           	opt stack 0
  8726                           tosu	equ	0xFFF
  8727                           tosh	equ	0xFFE
  8728                           tosl	equ	0xFFD
  8729                           pclath	equ	0xFFA
  8730                           tblptru	equ	0xFF8
  8731                           tblptrh	equ	0xFF7
  8732                           tblptrl	equ	0xFF6
  8733                           tablat	equ	0xFF5
  8734                           prodh	equ	0xFF4
  8735                           prodl	equ	0xFF3
  8736                           intcon	equ	0xFF2
  8737                           intcon2	equ	0xFF1
  8738                           postinc0	equ	0xFEE
  8739                           plusw0	equ	0xFEB
  8740                           wreg	equ	0xFE8
  8741                           indf1	equ	0xFE7
  8742                           postdec1	equ	0xFE5
  8743                           fsr1h	equ	0xFE2
  8744                           fsr1l	equ	0xFE1
  8745                           indf2	equ	0xFDF
  8746                           postinc2	equ	0xFDE
  8747                           postdec2	equ	0xFDD
  8748                           plusw2	equ	0xFDB
  8749                           fsr2h	equ	0xFDA
  8750                           fsr2l	equ	0xFD9
  8751                           status	equ	0xFD8
  8752                           
  8753 ;; *************** function _INTERRUPT_Initialize *****************
  8754 ;; Defined at:
  8755 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  8756 ;; Parameters:    Size  Location     Type
  8757 ;;		None
  8758 ;; Auto vars:     Size  Location     Type
  8759 ;;		None
  8760 ;; Return value:  Size  Location     Type
  8761 ;;                  1    wreg      void 
  8762 ;; Registers used:
  8763 ;;		None
  8764 ;; Tracked objects:
  8765 ;;		On entry : 0/0
  8766 ;;		On exit  : 0/0
  8767 ;;		Unchanged: 0/0
  8768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8769 ;;      Params:         0       0       0       0       0       0       0
  8770 ;;      Locals:         0       0       0       0       0       0       0
  8771 ;;      Temps:          0       0       0       0       0       0       0
  8772 ;;      Totals:         0       0       0       0       0       0       0
  8773 ;;Total ram usage:        0 bytes
  8774 ;; Hardware stack levels used:    1
  8775 ;; Hardware stack levels required when called:    4
  8776 ;; This function calls:
  8777 ;;		Nothing
  8778 ;; This function is called by:
  8779 ;;		_SYSTEM_Initialize
  8780 ;; This function uses a non-reentrant model
  8781 ;;
  8782                           
  8783                           	psect	text41
  8784  00423A                     __ptext41:
  8785                           	opt stack 0
  8786  00423A                     _INTERRUPT_Initialize:
  8787                           	opt stack 24
  8788                           
  8789                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  8790                           
  8791                           ;incstack = 0
  8792  00423A  9ED0               	bcf	4048,7,c	;volatile
  8793  00423C  0012               	return		;funcret
  8794  00423E                     __end_of_INTERRUPT_Initialize:
  8795                           	opt stack 0
  8796                           tosu	equ	0xFFF
  8797                           tosh	equ	0xFFE
  8798                           tosl	equ	0xFFD
  8799                           pclath	equ	0xFFA
  8800                           tblptru	equ	0xFF8
  8801                           tblptrh	equ	0xFF7
  8802                           tblptrl	equ	0xFF6
  8803                           tablat	equ	0xFF5
  8804                           prodh	equ	0xFF4
  8805                           prodl	equ	0xFF3
  8806                           intcon	equ	0xFF2
  8807                           intcon2	equ	0xFF1
  8808                           postinc0	equ	0xFEE
  8809                           plusw0	equ	0xFEB
  8810                           wreg	equ	0xFE8
  8811                           indf1	equ	0xFE7
  8812                           postdec1	equ	0xFE5
  8813                           fsr1h	equ	0xFE2
  8814                           fsr1l	equ	0xFE1
  8815                           indf2	equ	0xFDF
  8816                           postinc2	equ	0xFDE
  8817                           postdec2	equ	0xFDD
  8818                           plusw2	equ	0xFDB
  8819                           fsr2h	equ	0xFDA
  8820                           fsr2l	equ	0xFD9
  8821                           status	equ	0xFD8
  8822                           
  8823 ;; *************** function _EUSART1_Initialize *****************
  8824 ;; Defined at:
  8825 ;;		line 74 in file "mcc_generated_files/eusart1.c"
  8826 ;; Parameters:    Size  Location     Type
  8827 ;;		None
  8828 ;; Auto vars:     Size  Location     Type
  8829 ;;		None
  8830 ;; Return value:  Size  Location     Type
  8831 ;;                  1    wreg      void 
  8832 ;; Registers used:
  8833 ;;		wreg, status,2
  8834 ;; Tracked objects:
  8835 ;;		On entry : 0/0
  8836 ;;		On exit  : 0/0
  8837 ;;		Unchanged: 0/0
  8838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8839 ;;      Params:         0       0       0       0       0       0       0
  8840 ;;      Locals:         0       0       0       0       0       0       0
  8841 ;;      Temps:          0       0       0       0       0       0       0
  8842 ;;      Totals:         0       0       0       0       0       0       0
  8843 ;;Total ram usage:        0 bytes
  8844 ;; Hardware stack levels used:    1
  8845 ;; Hardware stack levels required when called:    4
  8846 ;; This function calls:
  8847 ;;		Nothing
  8848 ;; This function is called by:
  8849 ;;		_SYSTEM_Initialize
  8850 ;; This function uses a non-reentrant model
  8851 ;;
  8852                           
  8853                           	psect	text42
  8854  003C90                     __ptext42:
  8855                           	opt stack 0
  8856  003C90                     _EUSART1_Initialize:
  8857                           	opt stack 24
  8858                           
  8859                           ;eusart1.c: 77: PIE1bits.RC1IE = 0;
  8860                           
  8861                           ;incstack = 0
  8862  003C90  9A9D               	bcf	3997,5,c	;volatile
  8863                           
  8864                           ;eusart1.c: 78: PIE1bits.TX1IE = 0;
  8865  003C92  989D               	bcf	3997,4,c	;volatile
  8866                           
  8867                           ;eusart1.c: 82: BAUDCON1 = 0x08;
  8868  003C94  0E08               	movlw	8
  8869  003C96  6EB8               	movwf	4024,c	;volatile
  8870                           
  8871                           ;eusart1.c: 85: RCSTA1 = 0x90;
  8872  003C98  0E90               	movlw	144
  8873  003C9A  6EAB               	movwf	4011,c	;volatile
  8874                           
  8875                           ;eusart1.c: 88: TXSTA1 = 0x24;
  8876  003C9C  0E24               	movlw	36
  8877  003C9E  6EAC               	movwf	4012,c	;volatile
  8878                           
  8879                           ;eusart1.c: 91: SPBRG1 = 0x10;
  8880  003CA0  0E10               	movlw	16
  8881  003CA2  6EAF               	movwf	4015,c	;volatile
  8882                           
  8883                           ;eusart1.c: 94: SPBRGH1 = 0x00;
  8884  003CA4  0E00               	movlw	0
  8885  003CA6  6EB0               	movwf	4016,c	;volatile
  8886                           
  8887                           ;eusart1.c: 98: eusart1TxHead = 0;
  8888  003CA8  0E00               	movlw	0
  8889  003CAA  6E3A               	movwf	_eusart1TxHead,c	;volatile
  8890                           
  8891                           ;eusart1.c: 99: eusart1TxTail = 0;
  8892  003CAC  0E00               	movlw	0
  8893  003CAE  6E39               	movwf	_eusart1TxTail,c	;volatile
  8894                           
  8895                           ;eusart1.c: 100: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  8896  003CB0  0E46               	movlw	70
  8897  003CB2  6E47               	movwf	_eusart1TxBufferRemaining,c	;volatile
  8898                           
  8899                           ;eusart1.c: 102: eusart1RxHead = 0;
  8900  003CB4  0E00               	movlw	0
  8901  003CB6  6E38               	movwf	_eusart1RxHead,c	;volatile
  8902                           
  8903                           ;eusart1.c: 103: eusart1RxTail = 0;
  8904  003CB8  0E00               	movlw	0
  8905  003CBA  6E37               	movwf	_eusart1RxTail,c	;volatile
  8906                           
  8907                           ;eusart1.c: 104: eusart1RxCount = 0;
  8908  003CBC  0E00               	movlw	0
  8909  003CBE  0100               	movlb	0	; () banked
  8910  003CC0  6FF7               	movwf	_eusart1RxCount& (0+255),b	;volatile
  8911                           
  8912                           ; BSR set to: 0
  8913                           ;eusart1.c: 107: PIE1bits.RC1IE = 1;
  8914  003CC2  8A9D               	bsf	3997,5,c	;volatile
  8915                           
  8916                           ; BSR set to: 0
  8917  003CC4  0012               	return		;funcret
  8918  003CC6                     __end_of_EUSART1_Initialize:
  8919                           	opt stack 0
  8920                           tosu	equ	0xFFF
  8921                           tosh	equ	0xFFE
  8922                           tosl	equ	0xFFD
  8923                           pclath	equ	0xFFA
  8924                           tblptru	equ	0xFF8
  8925                           tblptrh	equ	0xFF7
  8926                           tblptrl	equ	0xFF6
  8927                           tablat	equ	0xFF5
  8928                           prodh	equ	0xFF4
  8929                           prodl	equ	0xFF3
  8930                           intcon	equ	0xFF2
  8931                           intcon2	equ	0xFF1
  8932                           postinc0	equ	0xFEE
  8933                           plusw0	equ	0xFEB
  8934                           wreg	equ	0xFE8
  8935                           indf1	equ	0xFE7
  8936                           postdec1	equ	0xFE5
  8937                           fsr1h	equ	0xFE2
  8938                           fsr1l	equ	0xFE1
  8939                           indf2	equ	0xFDF
  8940                           postinc2	equ	0xFDE
  8941                           postdec2	equ	0xFDD
  8942                           plusw2	equ	0xFDB
  8943                           fsr2h	equ	0xFDA
  8944                           fsr2l	equ	0xFD9
  8945                           status	equ	0xFD8
  8946                           
  8947 ;; *************** function _ADC_Initialize *****************
  8948 ;; Defined at:
  8949 ;;		line 58 in file "mcc_generated_files/adc.c"
  8950 ;; Parameters:    Size  Location     Type
  8951 ;;		None
  8952 ;; Auto vars:     Size  Location     Type
  8953 ;;		None
  8954 ;; Return value:  Size  Location     Type
  8955 ;;                  1    wreg      void 
  8956 ;; Registers used:
  8957 ;;		wreg, status,2
  8958 ;; Tracked objects:
  8959 ;;		On entry : 0/0
  8960 ;;		On exit  : 0/0
  8961 ;;		Unchanged: 0/0
  8962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8963 ;;      Params:         0       0       0       0       0       0       0
  8964 ;;      Locals:         0       0       0       0       0       0       0
  8965 ;;      Temps:          0       0       0       0       0       0       0
  8966 ;;      Totals:         0       0       0       0       0       0       0
  8967 ;;Total ram usage:        0 bytes
  8968 ;; Hardware stack levels used:    1
  8969 ;; Hardware stack levels required when called:    4
  8970 ;; This function calls:
  8971 ;;		Nothing
  8972 ;; This function is called by:
  8973 ;;		_SYSTEM_Initialize
  8974 ;; This function uses a non-reentrant model
  8975 ;;
  8976                           
  8977                           	psect	text43
  8978  00411E                     __ptext43:
  8979                           	opt stack 0
  8980  00411E                     _ADC_Initialize:
  8981                           	opt stack 24
  8982                           
  8983                           ;adc.c: 63: ADCON0 = 0x05;
  8984                           
  8985                           ; BSR set to: 0
  8986                           ;incstack = 0
  8987  00411E  0E05               	movlw	5
  8988  004120  6EC2               	movwf	4034,c	;volatile
  8989                           
  8990                           ;adc.c: 66: ADCON1 = 0x00;
  8991  004122  0E00               	movlw	0
  8992  004124  6EC1               	movwf	4033,c	;volatile
  8993                           
  8994                           ;adc.c: 69: ADCON2 = 0x87;
  8995  004126  0E87               	movlw	135
  8996  004128  6EC0               	movwf	4032,c	;volatile
  8997                           
  8998                           ;adc.c: 72: ADRESL = 0x00;
  8999  00412A  0E00               	movlw	0
  9000  00412C  6EC3               	movwf	4035,c	;volatile
  9001                           
  9002                           ;adc.c: 75: ADRESH = 0x00;
  9003  00412E  0E00               	movlw	0
  9004  004130  6EC4               	movwf	4036,c	;volatile
  9005  004132  0012               	return		;funcret
  9006  004134                     __end_of_ADC_Initialize:
  9007                           	opt stack 0
  9008                           tosu	equ	0xFFF
  9009                           tosh	equ	0xFFE
  9010                           tosl	equ	0xFFD
  9011                           pclath	equ	0xFFA
  9012                           tblptru	equ	0xFF8
  9013                           tblptrh	equ	0xFF7
  9014                           tblptrl	equ	0xFF6
  9015                           tablat	equ	0xFF5
  9016                           prodh	equ	0xFF4
  9017                           prodl	equ	0xFF3
  9018                           intcon	equ	0xFF2
  9019                           intcon2	equ	0xFF1
  9020                           postinc0	equ	0xFEE
  9021                           plusw0	equ	0xFEB
  9022                           wreg	equ	0xFE8
  9023                           indf1	equ	0xFE7
  9024                           postdec1	equ	0xFE5
  9025                           fsr1h	equ	0xFE2
  9026                           fsr1l	equ	0xFE1
  9027                           indf2	equ	0xFDF
  9028                           postinc2	equ	0xFDE
  9029                           postdec2	equ	0xFDD
  9030                           plusw2	equ	0xFDB
  9031                           fsr2h	equ	0xFDA
  9032                           fsr2l	equ	0xFD9
  9033                           status	equ	0xFD8
  9034                           
  9035 ;; *************** function _SetMcuRunTime *****************
  9036 ;; Defined at:
  9037 ;;		line 57 in file "SystemStatus.c"
  9038 ;; Parameters:    Size  Location     Type
  9039 ;;		None
  9040 ;; Auto vars:     Size  Location     Type
  9041 ;;		None
  9042 ;; Return value:  Size  Location     Type
  9043 ;;                  1    wreg      void 
  9044 ;; Registers used:
  9045 ;;		wreg, status,2, status,0, cstack
  9046 ;; Tracked objects:
  9047 ;;		On entry : 0/0
  9048 ;;		On exit  : 0/0
  9049 ;;		Unchanged: 0/0
  9050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9051 ;;      Params:         0       0       0       0       0       0       0
  9052 ;;      Locals:         0       0       0       0       0       0       0
  9053 ;;      Temps:          0       0       0       0       0       0       0
  9054 ;;      Totals:         0       0       0       0       0       0       0
  9055 ;;Total ram usage:        0 bytes
  9056 ;; Hardware stack levels used:    1
  9057 ;; Hardware stack levels required when called:    5
  9058 ;; This function calls:
  9059 ;;		___llmod
  9060 ;; This function is called by:
  9061 ;;		_main
  9062 ;; This function uses a non-reentrant model
  9063 ;;
  9064                           
  9065                           	psect	text44
  9066  003A30                     __ptext44:
  9067                           	opt stack 0
  9068  003A30                     _SetMcuRunTime:
  9069                           	opt stack 25
  9070                           
  9071                           ;SystemStatus.c: 59: mcuRunTimeIn5SecTicks++;
  9072                           
  9073                           ;incstack = 0
  9074  003A30  0E01               	movlw	1
  9075  003A32  0101               	movlb	1	; () banked
  9076  003A34  2728               	addwf	_mcuRunTimeIn5SecTicks& (0+255),f,b
  9077  003A36  0E00               	movlw	0
  9078  003A38  2329               	addwfc	(_mcuRunTimeIn5SecTicks+1)& (0+255),f,b
  9079  003A3A  232A               	addwfc	(_mcuRunTimeIn5SecTicks+2)& (0+255),f,b
  9080  003A3C  232B               	addwfc	(_mcuRunTimeIn5SecTicks+3)& (0+255),f,b
  9081                           
  9082                           ; BSR set to: 1
  9083                           ;SystemStatus.c: 60: mcuRunTimeIn5SecTicks %= (17280);
  9084  003A3E  C128  F018         	movff	_mcuRunTimeIn5SecTicks,___llmod@dividend
  9085  003A42  C129  F019         	movff	_mcuRunTimeIn5SecTicks+1,___llmod@dividend+1
  9086  003A46  C12A  F01A         	movff	_mcuRunTimeIn5SecTicks+2,___llmod@dividend+2
  9087  003A4A  C12B  F01B         	movff	_mcuRunTimeIn5SecTicks+3,___llmod@dividend+3
  9088  003A4E  0E80               	movlw	128
  9089  003A50  6E1C               	movwf	___llmod@divisor,c
  9090  003A52  0E43               	movlw	67
  9091  003A54  6E1D               	movwf	___llmod@divisor+1,c
  9092  003A56  0E00               	movlw	0
  9093  003A58  6E1E               	movwf	___llmod@divisor+2,c
  9094  003A5A  0E00               	movlw	0
  9095  003A5C  6E1F               	movwf	___llmod@divisor+3,c
  9096  003A5E  EC85  F01A         	call	___llmod	;wreg free
  9097  003A62  C018  F128         	movff	?___llmod,_mcuRunTimeIn5SecTicks
  9098  003A66  C019  F129         	movff	?___llmod+1,_mcuRunTimeIn5SecTicks+1
  9099  003A6A  C01A  F12A         	movff	?___llmod+2,_mcuRunTimeIn5SecTicks+2
  9100  003A6E  C01B  F12B         	movff	?___llmod+3,_mcuRunTimeIn5SecTicks+3
  9101  003A72  0012               	return		;funcret
  9102  003A74                     __end_of_SetMcuRunTime:
  9103                           	opt stack 0
  9104                           tosu	equ	0xFFF
  9105                           tosh	equ	0xFFE
  9106                           tosl	equ	0xFFD
  9107                           pclath	equ	0xFFA
  9108                           tblptru	equ	0xFF8
  9109                           tblptrh	equ	0xFF7
  9110                           tblptrl	equ	0xFF6
  9111                           tablat	equ	0xFF5
  9112                           prodh	equ	0xFF4
  9113                           prodl	equ	0xFF3
  9114                           intcon	equ	0xFF2
  9115                           intcon2	equ	0xFF1
  9116                           postinc0	equ	0xFEE
  9117                           plusw0	equ	0xFEB
  9118                           wreg	equ	0xFE8
  9119                           indf1	equ	0xFE7
  9120                           postdec1	equ	0xFE5
  9121                           fsr1h	equ	0xFE2
  9122                           fsr1l	equ	0xFE1
  9123                           indf2	equ	0xFDF
  9124                           postinc2	equ	0xFDE
  9125                           postdec2	equ	0xFDD
  9126                           plusw2	equ	0xFDB
  9127                           fsr2h	equ	0xFDA
  9128                           fsr2l	equ	0xFD9
  9129                           status	equ	0xFD8
  9130                           
  9131 ;; *************** function ___llmod *****************
  9132 ;; Defined at:
  9133 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  9134 ;; Parameters:    Size  Location     Type
  9135 ;;  dividend        4   23[COMRAM] unsigned long 
  9136 ;;  divisor         4   27[COMRAM] unsigned long 
  9137 ;; Auto vars:     Size  Location     Type
  9138 ;;  counter         1   31[COMRAM] unsigned char 
  9139 ;; Return value:  Size  Location     Type
  9140 ;;                  4   23[COMRAM] unsigned long 
  9141 ;; Registers used:
  9142 ;;		wreg, status,2, status,0
  9143 ;; Tracked objects:
  9144 ;;		On entry : 0/0
  9145 ;;		On exit  : 0/0
  9146 ;;		Unchanged: 0/0
  9147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9148 ;;      Params:         8       0       0       0       0       0       0
  9149 ;;      Locals:         1       0       0       0       0       0       0
  9150 ;;      Temps:          0       0       0       0       0       0       0
  9151 ;;      Totals:         9       0       0       0       0       0       0
  9152 ;;Total ram usage:        9 bytes
  9153 ;; Hardware stack levels used:    1
  9154 ;; Hardware stack levels required when called:    4
  9155 ;; This function calls:
  9156 ;;		Nothing
  9157 ;; This function is called by:
  9158 ;;		_SetMcuRunTime
  9159 ;;		_GetMcuRunTime
  9160 ;; This function uses a non-reentrant model
  9161 ;;
  9162                           
  9163                           	psect	text45
  9164  00350A                     __ptext45:
  9165                           	opt stack 0
  9166  00350A                     ___llmod:
  9167                           	opt stack 23
  9168                           
  9169                           ;incstack = 0
  9170  00350A  501C               	movf	___llmod@divisor,w,c
  9171  00350C  101D               	iorwf	___llmod@divisor+1,w,c
  9172  00350E  101E               	iorwf	___llmod@divisor+2,w,c
  9173  003510  101F               	iorwf	___llmod@divisor+3,w,c
  9174  003512  B4D8               	btfsc	status,2,c
  9175  003514  D024               	goto	l1957
  9176  003516  0E01               	movlw	1
  9177  003518  6E20               	movwf	___llmod@counter,c
  9178  00351A  D006               	goto	l1952
  9179  00351C  90D8               	bcf	status,0,c
  9180  00351E  361C               	rlcf	___llmod@divisor,f,c
  9181  003520  361D               	rlcf	___llmod@divisor+1,f,c
  9182  003522  361E               	rlcf	___llmod@divisor+2,f,c
  9183  003524  361F               	rlcf	___llmod@divisor+3,f,c
  9184  003526  2A20               	incf	___llmod@counter,f,c
  9185  003528                     l1952:
  9186  003528  AE1F               	btfss	___llmod@divisor+3,7,c
  9187  00352A  D7F8               	goto	l1953
  9188  00352C                     u8160:
  9189  00352C  501C               	movf	___llmod@divisor,w,c
  9190  00352E  5C18               	subwf	___llmod@dividend,w,c
  9191  003530  501D               	movf	___llmod@divisor+1,w,c
  9192  003532  5819               	subwfb	___llmod@dividend+1,w,c
  9193  003534  501E               	movf	___llmod@divisor+2,w,c
  9194  003536  581A               	subwfb	___llmod@dividend+2,w,c
  9195  003538  501F               	movf	___llmod@divisor+3,w,c
  9196  00353A  581B               	subwfb	___llmod@dividend+3,w,c
  9197  00353C  A0D8               	btfss	status,0,c
  9198  00353E  D008               	goto	l1956
  9199  003540  501C               	movf	___llmod@divisor,w,c
  9200  003542  5E18               	subwf	___llmod@dividend,f,c
  9201  003544  501D               	movf	___llmod@divisor+1,w,c
  9202  003546  5A19               	subwfb	___llmod@dividend+1,f,c
  9203  003548  501E               	movf	___llmod@divisor+2,w,c
  9204  00354A  5A1A               	subwfb	___llmod@dividend+2,f,c
  9205  00354C  501F               	movf	___llmod@divisor+3,w,c
  9206  00354E  5A1B               	subwfb	___llmod@dividend+3,f,c
  9207  003550                     l1956:
  9208  003550  90D8               	bcf	status,0,c
  9209  003552  321F               	rrcf	___llmod@divisor+3,f,c
  9210  003554  321E               	rrcf	___llmod@divisor+2,f,c
  9211  003556  321D               	rrcf	___llmod@divisor+1,f,c
  9212  003558  321C               	rrcf	___llmod@divisor,f,c
  9213  00355A  2E20               	decfsz	___llmod@counter,f,c
  9214  00355C  D7E7               	goto	u8160
  9215  00355E                     l1957:
  9216  00355E  C018  F018         	movff	___llmod@dividend,?___llmod
  9217  003562  C019  F019         	movff	___llmod@dividend+1,?___llmod+1
  9218  003566  C01A  F01A         	movff	___llmod@dividend+2,?___llmod+2
  9219  00356A  C01B  F01B         	movff	___llmod@dividend+3,?___llmod+3
  9220  00356E  0012               	return		;funcret
  9221  003570                     __end_of___llmod:
  9222                           	opt stack 0
  9223                           tosu	equ	0xFFF
  9224                           tosh	equ	0xFFE
  9225                           tosl	equ	0xFFD
  9226                           pclath	equ	0xFFA
  9227                           tblptru	equ	0xFF8
  9228                           tblptrh	equ	0xFF7
  9229                           tblptrl	equ	0xFF6
  9230                           tablat	equ	0xFF5
  9231                           prodh	equ	0xFF4
  9232                           prodl	equ	0xFF3
  9233                           intcon	equ	0xFF2
  9234                           intcon2	equ	0xFF1
  9235                           postinc0	equ	0xFEE
  9236                           plusw0	equ	0xFEB
  9237                           wreg	equ	0xFE8
  9238                           indf1	equ	0xFE7
  9239                           postdec1	equ	0xFE5
  9240                           fsr1h	equ	0xFE2
  9241                           fsr1l	equ	0xFE1
  9242                           indf2	equ	0xFDF
  9243                           postinc2	equ	0xFDE
  9244                           postdec2	equ	0xFDD
  9245                           plusw2	equ	0xFDB
  9246                           fsr2h	equ	0xFDA
  9247                           fsr2l	equ	0xFD9
  9248                           status	equ	0xFD8
  9249                           
  9250 ;; *************** function _SendSystemStartAck *****************
  9251 ;; Defined at:
  9252 ;;		line 153 in file "SystemCommon.c"
  9253 ;; Parameters:    Size  Location     Type
  9254 ;;		None
  9255 ;; Auto vars:     Size  Location     Type
  9256 ;;		None
  9257 ;; Return value:  Size  Location     Type
  9258 ;;                  1    wreg      void 
  9259 ;; Registers used:
  9260 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9261 ;; Tracked objects:
  9262 ;;		On entry : 0/0
  9263 ;;		On exit  : 0/0
  9264 ;;		Unchanged: 0/0
  9265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9266 ;;      Params:         0       0       0       0       0       0       0
  9267 ;;      Locals:         0       0       0       0       0       0       0
  9268 ;;      Temps:          0       0       0       0       0       0       0
  9269 ;;      Totals:         0       0       0       0       0       0       0
  9270 ;;Total ram usage:        0 bytes
  9271 ;; Hardware stack levels used:    1
  9272 ;; Hardware stack levels required when called:    7
  9273 ;; This function calls:
  9274 ;;		_SendAckMessage
  9275 ;; This function is called by:
  9276 ;;		_main
  9277 ;; This function uses a non-reentrant model
  9278 ;;
  9279                           
  9280                           	psect	text46
  9281  0041F0                     __ptext46:
  9282                           	opt stack 0
  9283  0041F0                     _SendSystemStartAck:
  9284                           	opt stack 23
  9285                           
  9286                           ;SystemCommon.c: 155: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_SYSTE
      +                          M_START);
  9287                           
  9288                           ;incstack = 0
  9289  0041F0  0E10               	movlw	16
  9290  0041F2  6E24               	movwf	SendAckMessage@inRequest,c
  9291  0041F4  0E01               	movlw	1
  9292  0041F6  ECA6  F01C         	call	_SendAckMessage
  9293  0041FA  0012               	return		;funcret
  9294  0041FC                     __end_of_SendSystemStartAck:
  9295                           	opt stack 0
  9296                           tosu	equ	0xFFF
  9297                           tosh	equ	0xFFE
  9298                           tosl	equ	0xFFD
  9299                           pclath	equ	0xFFA
  9300                           tblptru	equ	0xFF8
  9301                           tblptrh	equ	0xFF7
  9302                           tblptrl	equ	0xFF6
  9303                           tablat	equ	0xFF5
  9304                           prodh	equ	0xFF4
  9305                           prodl	equ	0xFF3
  9306                           intcon	equ	0xFF2
  9307                           intcon2	equ	0xFF1
  9308                           postinc0	equ	0xFEE
  9309                           plusw0	equ	0xFEB
  9310                           wreg	equ	0xFE8
  9311                           indf1	equ	0xFE7
  9312                           postdec1	equ	0xFE5
  9313                           fsr1h	equ	0xFE2
  9314                           fsr1l	equ	0xFE1
  9315                           indf2	equ	0xFDF
  9316                           postinc2	equ	0xFDE
  9317                           postdec2	equ	0xFDD
  9318                           plusw2	equ	0xFDB
  9319                           fsr2h	equ	0xFDA
  9320                           fsr2l	equ	0xFD9
  9321                           status	equ	0xFD8
  9322                           
  9323 ;; *************** function _SendAckMessage *****************
  9324 ;; Defined at:
  9325 ;;		line 171 in file "EusartApp.c"
  9326 ;; Parameters:    Size  Location     Type
  9327 ;;  inGroup         1    wreg     enum E7193
  9328 ;;  inRequest       1   35[COMRAM] enum E7201
  9329 ;; Auto vars:     Size  Location     Type
  9330 ;;  inGroup         1   36[COMRAM] enum E7193
  9331 ;;  TxMsg           6   37[COMRAM] unsigned char [6]
  9332 ;; Return value:  Size  Location     Type
  9333 ;;                  1    wreg      void 
  9334 ;; Registers used:
  9335 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9336 ;; Tracked objects:
  9337 ;;		On entry : 0/0
  9338 ;;		On exit  : 0/0
  9339 ;;		Unchanged: 0/0
  9340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9341 ;;      Params:         1       0       0       0       0       0       0
  9342 ;;      Locals:         7       0       0       0       0       0       0
  9343 ;;      Temps:          0       0       0       0       0       0       0
  9344 ;;      Totals:         8       0       0       0       0       0       0
  9345 ;;Total ram usage:        8 bytes
  9346 ;; Hardware stack levels used:    1
  9347 ;; Hardware stack levels required when called:    6
  9348 ;; This function calls:
  9349 ;;		_WriteUartMessage
  9350 ;;		_ZeroArray
  9351 ;;		_crc8
  9352 ;; This function is called by:
  9353 ;;		_testLeds
  9354 ;;		_SetChannelMode
  9355 ;;		_FlashReadUart
  9356 ;;		_FlashEreaseMem
  9357 ;;		_DacSetValue
  9358 ;;		_UpdateSynthFreq
  9359 ;;		_SetSynthOper
  9360 ;;		_ResetMcu
  9361 ;;		_SendSystemStartAck
  9362 ;;		_keepAliveSignalUart
  9363 ;; This function uses a non-reentrant model
  9364 ;;
  9365                           
  9366                           	psect	text47
  9367  00394C                     __ptext47:
  9368                           	opt stack 0
  9369  00394C                     _SendAckMessage:
  9370                           	opt stack 21
  9371                           
  9372                           ;incstack = 0
  9373                           ;SendAckMessage@inGroup stored from wreg
  9374  00394C  6E25               	movwf	SendAckMessage@inGroup,c
  9375                           
  9376                           ;EusartApp.c: 174: char TxMsg[(0x5) + 1];
  9377                           ;EusartApp.c: 175: ZeroArray(TxMsg, (0x5) + 1);
  9378  00394E  0E26               	movlw	low SendAckMessage@TxMsg
  9379  003950  6E20               	movwf	ZeroArray@array,c
  9380  003952  0E00               	movlw	high SendAckMessage@TxMsg
  9381  003954  6E21               	movwf	ZeroArray@array+1,c
  9382  003956  0E00               	movlw	0
  9383  003958  6E23               	movwf	ZeroArray@size+1,c
  9384  00395A  0E06               	movlw	6
  9385  00395C  6E22               	movwf	ZeroArray@size,c
  9386  00395E  EC4B  F020         	call	_ZeroArray	;wreg free
  9387                           
  9388                           ;EusartApp.c: 178: TxMsg[(0)] = (0x24);
  9389  003962  0E24               	movlw	36
  9390  003964  6E26               	movwf	SendAckMessage@TxMsg,c
  9391                           
  9392                           ;EusartApp.c: 179: TxMsg[(1)] = inGroup;
  9393  003966  C025  F027         	movff	SendAckMessage@inGroup,SendAckMessage@TxMsg+1
  9394                           
  9395                           ;EusartApp.c: 180: TxMsg[(2)] = inRequest;
  9396  00396A  C024  F028         	movff	SendAckMessage@inRequest,SendAckMessage@TxMsg+2
  9397                           
  9398                           ;EusartApp.c: 181: TxMsg[(3)] = 0;
  9399  00396E  0E00               	movlw	0
  9400  003970  6E29               	movwf	SendAckMessage@TxMsg+3,c
  9401                           
  9402                           ;EusartApp.c: 183: TxMsg[(0x5)] = crc8(TxMsg, (0x5));
  9403  003972  0E26               	movlw	low SendAckMessage@TxMsg
  9404  003974  6E18               	movwf	crc8@dataArray,c
  9405  003976  0E00               	movlw	high SendAckMessage@TxMsg
  9406  003978  6E19               	movwf	crc8@dataArray+1,c
  9407  00397A  0E00               	movlw	0
  9408  00397C  6E1B               	movwf	crc8@dataSize+1,c
  9409  00397E  0E05               	movlw	5
  9410  003980  6E1A               	movwf	crc8@dataSize,c
  9411  003982  ECCF  F01C         	call	_crc8	;wreg free
  9412  003986  6E2B               	movwf	SendAckMessage@TxMsg+5,c
  9413                           
  9414                           ;EusartApp.c: 185: WriteUartMessage(TxMsg, (0x5) + 1);
  9415  003988  0E26               	movlw	low SendAckMessage@TxMsg
  9416  00398A  6E19               	movwf	WriteUartMessage@dataBuf,c
  9417  00398C  0E00               	movlw	high SendAckMessage@TxMsg
  9418  00398E  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  9419  003990  0E00               	movlw	0
  9420  003992  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  9421  003994  0E06               	movlw	6
  9422  003996  6E1B               	movwf	WriteUartMessage@dataSize,c
  9423  003998  EC63  F01E         	call	_WriteUartMessage	;wreg free
  9424  00399C  0012               	return		;funcret
  9425  00399E                     __end_of_SendAckMessage:
  9426                           	opt stack 0
  9427                           tosu	equ	0xFFF
  9428                           tosh	equ	0xFFE
  9429                           tosl	equ	0xFFD
  9430                           pclath	equ	0xFFA
  9431                           tblptru	equ	0xFF8
  9432                           tblptrh	equ	0xFF7
  9433                           tblptrl	equ	0xFF6
  9434                           tablat	equ	0xFF5
  9435                           prodh	equ	0xFF4
  9436                           prodl	equ	0xFF3
  9437                           intcon	equ	0xFF2
  9438                           intcon2	equ	0xFF1
  9439                           postinc0	equ	0xFEE
  9440                           plusw0	equ	0xFEB
  9441                           wreg	equ	0xFE8
  9442                           indf1	equ	0xFE7
  9443                           postdec1	equ	0xFE5
  9444                           fsr1h	equ	0xFE2
  9445                           fsr1l	equ	0xFE1
  9446                           indf2	equ	0xFDF
  9447                           postinc2	equ	0xFDE
  9448                           postdec2	equ	0xFDD
  9449                           plusw2	equ	0xFDB
  9450                           fsr2h	equ	0xFDA
  9451                           fsr2l	equ	0xFD9
  9452                           status	equ	0xFD8
  9453                           
  9454 ;; *************** function _crc8 *****************
  9455 ;; Defined at:
  9456 ;;		line 13 in file "SystemCommon.c"
  9457 ;; Parameters:    Size  Location     Type
  9458 ;;  dataArray       2   23[COMRAM] PTR unsigned char 
  9459 ;;		 -> GetMcuRunTime@TxMsg(9), GetMcuFwVersion@TxMsg(18), SynthReadData@TxMsg(22), DacReadValue@TxMsg(7), 
  9460 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), rxMsgQueue(20), 
  9461 ;;  dataSize        2   25[COMRAM] int 
  9462 ;; Auto vars:     Size  Location     Type
  9463 ;;  i               2   30[COMRAM] int 
  9464 ;;  crc             2   28[COMRAM] int 
  9465 ;; Return value:  Size  Location     Type
  9466 ;;                  1    wreg      unsigned char 
  9467 ;; Registers used:
  9468 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9469 ;; Tracked objects:
  9470 ;;		On entry : 0/0
  9471 ;;		On exit  : 0/0
  9472 ;;		Unchanged: 0/0
  9473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9474 ;;      Params:         4       0       0       0       0       0       0
  9475 ;;      Locals:         4       0       0       0       0       0       0
  9476 ;;      Temps:          1       0       0       0       0       0       0
  9477 ;;      Totals:         9       0       0       0       0       0       0
  9478 ;;Total ram usage:        9 bytes
  9479 ;; Hardware stack levels used:    1
  9480 ;; Hardware stack levels required when called:    4
  9481 ;; This function calls:
  9482 ;;		Nothing
  9483 ;; This function is called by:
  9484 ;;		_readUartMessage
  9485 ;;		_SendAckMessage
  9486 ;;		_FlashReadUart
  9487 ;;		_FlashReadCondition
  9488 ;;		_DacReadValue
  9489 ;;		_SynthReadData
  9490 ;;		_GetMcuFwVersion
  9491 ;;		_GetMcuRunTime
  9492 ;; This function uses a non-reentrant model
  9493 ;;
  9494                           
  9495                           	psect	text48
  9496  00399E                     __ptext48:
  9497                           	opt stack 0
  9498  00399E                     _crc8:
  9499                           	opt stack 25
  9500                           
  9501                           ;SystemCommon.c: 15: int crc = 0;
  9502                           
  9503                           ;incstack = 0
  9504  00399E  0E00               	movlw	0
  9505  0039A0  6E1E               	movwf	crc8@crc+1,c
  9506  0039A2  0E00               	movlw	0
  9507  0039A4  6E1D               	movwf	crc8@crc,c
  9508                           
  9509                           ;SystemCommon.c: 16: for (int i = 0; i < dataSize; i++)
  9510  0039A6  0E00               	movlw	0
  9511  0039A8  6E20               	movwf	crc8@i+1,c
  9512  0039AA  0E00               	movlw	0
  9513  0039AC  6E1F               	movwf	crc8@i,c
  9514  0039AE  D00E               	goto	l1388
  9515  0039B0                     
  9516                           ;SystemCommon.c: 17: {
  9517                           ;SystemCommon.c: 18: crc += dataArray[i];
  9518  0039B0  501F               	movf	crc8@i,w,c
  9519  0039B2  2418               	addwf	crc8@dataArray,w,c
  9520  0039B4  6ED9               	movwf	fsr2l,c
  9521  0039B6  5020               	movf	crc8@i+1,w,c
  9522  0039B8  2019               	addwfc	crc8@dataArray+1,w,c
  9523  0039BA  6EDA               	movwf	fsr2h,c
  9524  0039BC  50DF               	movf	indf2,w,c
  9525  0039BE  6E1C               	movwf	??_crc8& (0+255),c
  9526  0039C0  501C               	movf	??_crc8,w,c
  9527  0039C2  261D               	addwf	crc8@crc,f,c
  9528  0039C4  0E00               	movlw	0
  9529  0039C6  221E               	addwfc	crc8@crc+1,f,c
  9530  0039C8  4A1F               	infsnz	crc8@i,f,c
  9531  0039CA  2A20               	incf	crc8@i+1,f,c
  9532  0039CC                     l1388:
  9533  0039CC  501A               	movf	crc8@dataSize,w,c
  9534  0039CE  5C1F               	subwf	crc8@i,w,c
  9535  0039D0  5020               	movf	crc8@i+1,w,c
  9536  0039D2  0A80               	xorlw	128
  9537  0039D4  6E1C               	movwf	??_crc8& (0+255),c
  9538  0039D6  501B               	movf	crc8@dataSize+1,w,c
  9539  0039D8  0A80               	xorlw	128
  9540  0039DA  581C               	subwfb	??_crc8& (0+255),w,c
  9541  0039DC  A0D8               	btfss	status,0,c
  9542  0039DE  D7E8               	goto	l1389
  9543                           
  9544                           ;SystemCommon.c: 19: }
  9545                           ;SystemCommon.c: 20: crc &= 0xff;
  9546  0039E0  0EFF               	movlw	255
  9547  0039E2  161D               	andwf	crc8@crc,f,c
  9548  0039E4  0E00               	movlw	0
  9549  0039E6  161E               	andwf	crc8@crc+1,f,c
  9550                           
  9551                           ;SystemCommon.c: 21: return crc;
  9552  0039E8  501D               	movf	crc8@crc,w,c
  9553  0039EA  0012               	return	
  9554  0039EC                     __end_of_crc8:
  9555                           	opt stack 0
  9556                           tosu	equ	0xFFF
  9557                           tosh	equ	0xFFE
  9558                           tosl	equ	0xFFD
  9559                           pclath	equ	0xFFA
  9560                           tblptru	equ	0xFF8
  9561                           tblptrh	equ	0xFF7
  9562                           tblptrl	equ	0xFF6
  9563                           tablat	equ	0xFF5
  9564                           prodh	equ	0xFF4
  9565                           prodl	equ	0xFF3
  9566                           intcon	equ	0xFF2
  9567                           intcon2	equ	0xFF1
  9568                           postinc0	equ	0xFEE
  9569                           plusw0	equ	0xFEB
  9570                           wreg	equ	0xFE8
  9571                           indf1	equ	0xFE7
  9572                           postdec1	equ	0xFE5
  9573                           fsr1h	equ	0xFE2
  9574                           fsr1l	equ	0xFE1
  9575                           indf2	equ	0xFDF
  9576                           postinc2	equ	0xFDE
  9577                           postdec2	equ	0xFDD
  9578                           plusw2	equ	0xFDB
  9579                           fsr2h	equ	0xFDA
  9580                           fsr2l	equ	0xFD9
  9581                           status	equ	0xFD8
  9582                           
  9583 ;; *************** function _ZeroArray *****************
  9584 ;; Defined at:
  9585 ;;		line 24 in file "SystemCommon.c"
  9586 ;; Parameters:    Size  Location     Type
  9587 ;;  array           2   31[COMRAM] PTR unsigned char 
  9588 ;;		 -> GetMcuFwVersion@TxMsg(18), GetIntFromUartData@dataRegArr(10), SynthReadData@TxMsg(22), SynthReadData@eepromDataA
      +rray(16), 
  9589 ;;		 -> DacReadValue@TxMsg(7), FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), sampleArray(64), 
  9590 ;;		 -> SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), 
  9591 ;;  size            2   33[COMRAM] int 
  9592 ;; Auto vars:     Size  Location     Type
  9593 ;;		None
  9594 ;; Return value:  Size  Location     Type
  9595 ;;                  1    wreg      void 
  9596 ;; Registers used:
  9597 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9598 ;; Tracked objects:
  9599 ;;		On entry : 0/0
  9600 ;;		On exit  : 0/0
  9601 ;;		Unchanged: 0/0
  9602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9603 ;;      Params:         4       0       0       0       0       0       0
  9604 ;;      Locals:         0       0       0       0       0       0       0
  9605 ;;      Temps:          0       0       0       0       0       0       0
  9606 ;;      Totals:         4       0       0       0       0       0       0
  9607 ;;Total ram usage:        4 bytes
  9608 ;; Hardware stack levels used:    1
  9609 ;; Hardware stack levels required when called:    5
  9610 ;; This function calls:
  9611 ;;		_memset
  9612 ;; This function is called by:
  9613 ;;		_readUartMessage
  9614 ;;		_InitRxMessageParams
  9615 ;;		_SendAckMessage
  9616 ;;		_FlashReadUart
  9617 ;;		_FlashEreaseMem
  9618 ;;		_FlashReadCondition
  9619 ;;		_DacReadValue
  9620 ;;		_SynthReadData
  9621 ;;		_GetIntFromUartData
  9622 ;;		_GetMcuFwVersion
  9623 ;; This function uses a non-reentrant model
  9624 ;;
  9625                           
  9626                           	psect	text49
  9627  004096                     __ptext49:
  9628                           	opt stack 0
  9629  004096                     _ZeroArray:
  9630                           	opt stack 24
  9631                           
  9632                           ;SystemCommon.c: 26: memset(array, 0x0, size);
  9633                           
  9634                           ;incstack = 0
  9635  004096  C020  F018         	movff	ZeroArray@array,memset@p1
  9636  00409A  C021  F019         	movff	ZeroArray@array+1,memset@p1+1
  9637  00409E  0E00               	movlw	0
  9638  0040A0  6E1B               	movwf	memset@c+1,c
  9639  0040A2  0E00               	movlw	0
  9640  0040A4  6E1A               	movwf	memset@c,c
  9641  0040A6  C022  F01C         	movff	ZeroArray@size,memset@n
  9642  0040AA  C023  F01D         	movff	ZeroArray@size+1,memset@n+1
  9643  0040AE  EC61  F01F         	call	_memset	;wreg free
  9644  0040B2  0012               	return		;funcret
  9645  0040B4                     __end_of_ZeroArray:
  9646                           	opt stack 0
  9647                           tosu	equ	0xFFF
  9648                           tosh	equ	0xFFE
  9649                           tosl	equ	0xFFD
  9650                           pclath	equ	0xFFA
  9651                           tblptru	equ	0xFF8
  9652                           tblptrh	equ	0xFF7
  9653                           tblptrl	equ	0xFF6
  9654                           tablat	equ	0xFF5
  9655                           prodh	equ	0xFF4
  9656                           prodl	equ	0xFF3
  9657                           intcon	equ	0xFF2
  9658                           intcon2	equ	0xFF1
  9659                           postinc0	equ	0xFEE
  9660                           plusw0	equ	0xFEB
  9661                           wreg	equ	0xFE8
  9662                           indf1	equ	0xFE7
  9663                           postdec1	equ	0xFE5
  9664                           fsr1h	equ	0xFE2
  9665                           fsr1l	equ	0xFE1
  9666                           indf2	equ	0xFDF
  9667                           postinc2	equ	0xFDE
  9668                           postdec2	equ	0xFDD
  9669                           plusw2	equ	0xFDB
  9670                           fsr2h	equ	0xFDA
  9671                           fsr2l	equ	0xFD9
  9672                           status	equ	0xFD8
  9673                           
  9674 ;; *************** function _WriteUartMessage *****************
  9675 ;; Defined at:
  9676 ;;		line 158 in file "EusartApp.c"
  9677 ;; Parameters:    Size  Location     Type
  9678 ;;  dataBuf         2   24[COMRAM] PTR unsigned char 
  9679 ;;		 -> GetMcuRunTime@TxMsg(9), GetMcuFwVersion@TxMsg(18), SynthReadData@TxMsg(22), DacReadValue@TxMsg(7), 
  9680 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), 
  9681 ;;  dataSize        2   26[COMRAM] int 
  9682 ;; Auto vars:     Size  Location     Type
  9683 ;;  idx             2   29[COMRAM] int 
  9684 ;; Return value:  Size  Location     Type
  9685 ;;                  1    wreg      void 
  9686 ;; Registers used:
  9687 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9688 ;; Tracked objects:
  9689 ;;		On entry : 0/0
  9690 ;;		On exit  : 0/0
  9691 ;;		Unchanged: 0/0
  9692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9693 ;;      Params:         4       0       0       0       0       0       0
  9694 ;;      Locals:         2       0       0       0       0       0       0
  9695 ;;      Temps:          1       0       0       0       0       0       0
  9696 ;;      Totals:         7       0       0       0       0       0       0
  9697 ;;Total ram usage:        7 bytes
  9698 ;; Hardware stack levels used:    1
  9699 ;; Hardware stack levels required when called:    5
  9700 ;; This function calls:
  9701 ;;		_EUSART1_Write
  9702 ;; This function is called by:
  9703 ;;		_SendAckMessage
  9704 ;;		_FlashReadUart
  9705 ;;		_FlashReadCondition
  9706 ;;		_DacReadValue
  9707 ;;		_SynthReadData
  9708 ;;		_GetMcuFwVersion
  9709 ;;		_GetMcuRunTime
  9710 ;; This function uses a non-reentrant model
  9711 ;;
  9712                           
  9713                           	psect	text50
  9714  003CC6                     __ptext50:
  9715                           	opt stack 0
  9716  003CC6                     _WriteUartMessage:
  9717                           	opt stack 21
  9718                           
  9719                           ;EusartApp.c: 160: for(int idx = 0; idx < dataSize; idx++)
  9720                           
  9721                           ;incstack = 0
  9722  003CC6  0E00               	movlw	0
  9723  003CC8  6E1F               	movwf	WriteUartMessage@idx+1,c
  9724  003CCA  0E00               	movlw	0
  9725  003CCC  6E1E               	movwf	WriteUartMessage@idx,c
  9726  003CCE  D00B               	goto	l234
  9727  003CD0                     
  9728                           ;EusartApp.c: 161: {
  9729                           ;EusartApp.c: 162: EUSART1_Write(dataBuf[idx]);
  9730  003CD0  501E               	movf	WriteUartMessage@idx,w,c
  9731  003CD2  2419               	addwf	WriteUartMessage@dataBuf,w,c
  9732  003CD4  6ED9               	movwf	fsr2l,c
  9733  003CD6  501F               	movf	WriteUartMessage@idx+1,w,c
  9734  003CD8  201A               	addwfc	WriteUartMessage@dataBuf+1,w,c
  9735  003CDA  6EDA               	movwf	fsr2h,c
  9736  003CDC  50DF               	movf	indf2,w,c
  9737  003CDE  ECD7  F01D         	call	_EUSART1_Write
  9738  003CE2  4A1E               	infsnz	WriteUartMessage@idx,f,c
  9739  003CE4  2A1F               	incf	WriteUartMessage@idx+1,f,c
  9740  003CE6                     l234:
  9741  003CE6  501B               	movf	WriteUartMessage@dataSize,w,c
  9742  003CE8  5C1E               	subwf	WriteUartMessage@idx,w,c
  9743  003CEA  501F               	movf	WriteUartMessage@idx+1,w,c
  9744  003CEC  0A80               	xorlw	128
  9745  003CEE  6E1D               	movwf	??_WriteUartMessage& (0+255),c
  9746  003CF0  501C               	movf	WriteUartMessage@dataSize+1,w,c
  9747  003CF2  0A80               	xorlw	128
  9748  003CF4  581D               	subwfb	??_WriteUartMessage& (0+255),w,c
  9749  003CF6  B0D8               	btfsc	status,0,c
  9750  003CF8  0012               	return	
  9751  003CFA  D7EA               	goto	l235
  9752  003CFC                     __end_of_WriteUartMessage:
  9753                           	opt stack 0
  9754                           tosu	equ	0xFFF
  9755                           tosh	equ	0xFFE
  9756                           tosl	equ	0xFFD
  9757                           pclath	equ	0xFFA
  9758                           tblptru	equ	0xFF8
  9759                           tblptrh	equ	0xFF7
  9760                           tblptrl	equ	0xFF6
  9761                           tablat	equ	0xFF5
  9762                           prodh	equ	0xFF4
  9763                           prodl	equ	0xFF3
  9764                           intcon	equ	0xFF2
  9765                           intcon2	equ	0xFF1
  9766                           postinc0	equ	0xFEE
  9767                           plusw0	equ	0xFEB
  9768                           wreg	equ	0xFE8
  9769                           indf1	equ	0xFE7
  9770                           postdec1	equ	0xFE5
  9771                           fsr1h	equ	0xFE2
  9772                           fsr1l	equ	0xFE1
  9773                           indf2	equ	0xFDF
  9774                           postinc2	equ	0xFDE
  9775                           postdec2	equ	0xFDD
  9776                           plusw2	equ	0xFDB
  9777                           fsr2h	equ	0xFDA
  9778                           fsr2l	equ	0xFD9
  9779                           status	equ	0xFD8
  9780                           
  9781 ;; *************** function _EUSART1_Write *****************
  9782 ;; Defined at:
  9783 ;;		line 157 in file "mcc_generated_files/eusart1.c"
  9784 ;; Parameters:    Size  Location     Type
  9785 ;;  txData          1    wreg     unsigned char 
  9786 ;; Auto vars:     Size  Location     Type
  9787 ;;  txData          1   23[COMRAM] unsigned char 
  9788 ;; Return value:  Size  Location     Type
  9789 ;;                  1    wreg      void 
  9790 ;; Registers used:
  9791 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9792 ;; Tracked objects:
  9793 ;;		On entry : 0/0
  9794 ;;		On exit  : 0/0
  9795 ;;		Unchanged: 0/0
  9796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9797 ;;      Params:         0       0       0       0       0       0       0
  9798 ;;      Locals:         1       0       0       0       0       0       0
  9799 ;;      Temps:          0       0       0       0       0       0       0
  9800 ;;      Totals:         1       0       0       0       0       0       0
  9801 ;;Total ram usage:        1 bytes
  9802 ;; Hardware stack levels used:    1
  9803 ;; Hardware stack levels required when called:    4
  9804 ;; This function calls:
  9805 ;;		Nothing
  9806 ;; This function is called by:
  9807 ;;		_WriteUartMessage
  9808 ;; This function uses a non-reentrant model
  9809 ;;
  9810                           
  9811                           	psect	text51
  9812  003BAE                     __ptext51:
  9813                           	opt stack 0
  9814  003BAE                     _EUSART1_Write:
  9815                           	opt stack 21
  9816                           
  9817                           ;incstack = 0
  9818                           ;EUSART1_Write@txData stored from wreg
  9819  003BAE  6E18               	movwf	EUSART1_Write@txData,c
  9820  003BB0                     
  9821                           ;eusart1.c: 160: {
  9822                           
  9823                           ;eusart1.c: 159: while(0 == eusart1TxBufferRemaining)
  9824  003BB0  5047               	movf	_eusart1TxBufferRemaining,w,c	;volatile
  9825  003BB2  B4D8               	btfsc	status,2,c
  9826  003BB4  D7FD               	goto	l7566
  9827                           
  9828                           ;eusart1.c: 161: }
  9829                           ;eusart1.c: 163: if(0 == PIE1bits.TX1IE)
  9830  003BB6  B89D               	btfsc	3997,4,c	;volatile
  9831  003BB8  D003               	goto	l907
  9832                           
  9833                           ;eusart1.c: 164: {
  9834                           ;eusart1.c: 165: TXREG1 = txData;
  9835  003BBA  C018  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  9836                           
  9837                           ;eusart1.c: 166: }
  9838  003BBE  D012               	goto	l908
  9839  003BC0                     l907:
  9840                           
  9841                           ;eusart1.c: 167: else
  9842                           ;eusart1.c: 168: {
  9843                           ;eusart1.c: 169: PIE1bits.TX1IE = 0;
  9844  003BC0  989D               	bcf	3997,4,c	;volatile
  9845                           
  9846                           ;eusart1.c: 170: eusart1TxBuffer[eusart1TxHead++] = txData;
  9847  003BC2  503A               	movf	_eusart1TxHead,w,c	;volatile
  9848  003BC4  0D01               	mullw	1
  9849  003BC6  0E00               	movlw	low _eusart1TxBuffer
  9850  003BC8  24F3               	addwf	prodl,w,c
  9851  003BCA  6ED9               	movwf	fsr2l,c
  9852  003BCC  0E02               	movlw	high _eusart1TxBuffer
  9853  003BCE  20F4               	addwfc	prodh,w,c
  9854  003BD0  6EDA               	movwf	fsr2h,c
  9855  003BD2  C018  FFDF         	movff	EUSART1_Write@txData,indf2
  9856  003BD6  2A3A               	incf	_eusart1TxHead,f,c	;volatile
  9857                           
  9858                           ;eusart1.c: 171: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  9859  003BD8  0E45               	movlw	69
  9860  003BDA  643A               	cpfsgt	_eusart1TxHead,c	;volatile
  9861  003BDC  D002               	goto	l909
  9862                           
  9863                           ;eusart1.c: 172: {
  9864                           ;eusart1.c: 173: eusart1TxHead = 0;
  9865  003BDE  0E00               	movlw	0
  9866  003BE0  6E3A               	movwf	_eusart1TxHead,c	;volatile
  9867  003BE2                     l909:
  9868                           
  9869                           ;eusart1.c: 174: }
  9870                           ;eusart1.c: 175: eusart1TxBufferRemaining--;
  9871  003BE2  0647               	decf	_eusart1TxBufferRemaining,f,c	;volatile
  9872  003BE4                     l908:
  9873                           
  9874                           ;eusart1.c: 176: }
  9875                           ;eusart1.c: 177: PIE1bits.TX1IE = 1;
  9876  003BE4  889D               	bsf	3997,4,c	;volatile
  9877  003BE6  0012               	return		;funcret
  9878  003BE8                     __end_of_EUSART1_Write:
  9879                           	opt stack 0
  9880                           tosu	equ	0xFFF
  9881                           tosh	equ	0xFFE
  9882                           tosl	equ	0xFFD
  9883                           pclath	equ	0xFFA
  9884                           tblptru	equ	0xFF8
  9885                           tblptrh	equ	0xFF7
  9886                           tblptrl	equ	0xFF6
  9887                           tablat	equ	0xFF5
  9888                           prodh	equ	0xFF4
  9889                           prodl	equ	0xFF3
  9890                           intcon	equ	0xFF2
  9891                           intcon2	equ	0xFF1
  9892                           postinc0	equ	0xFEE
  9893                           plusw0	equ	0xFEB
  9894                           wreg	equ	0xFE8
  9895                           indf1	equ	0xFE7
  9896                           postdec1	equ	0xFE5
  9897                           fsr1h	equ	0xFE2
  9898                           fsr1l	equ	0xFE1
  9899                           indf2	equ	0xFDF
  9900                           postinc2	equ	0xFDE
  9901                           postdec2	equ	0xFDD
  9902                           plusw2	equ	0xFDB
  9903                           fsr2h	equ	0xFDA
  9904                           fsr2l	equ	0xFD9
  9905                           status	equ	0xFD8
  9906                           
  9907 ;; *************** function _InitSystemApplicationManagers *****************
  9908 ;; Defined at:
  9909 ;;		line 33 in file "SystemSettings.c"
  9910 ;; Parameters:    Size  Location     Type
  9911 ;;		None
  9912 ;; Auto vars:     Size  Location     Type
  9913 ;;		None
  9914 ;; Return value:  Size  Location     Type
  9915 ;;                  1    wreg      void 
  9916 ;; Registers used:
  9917 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9918 ;; Tracked objects:
  9919 ;;		On entry : 0/0
  9920 ;;		On exit  : 0/0
  9921 ;;		Unchanged: 0/0
  9922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9923 ;;      Params:         0       0       0       0       0       0       0
  9924 ;;      Locals:         0       0       0       0       0       0       0
  9925 ;;      Temps:          0       0       0       0       0       0       0
  9926 ;;      Totals:         0       0       0       0       0       0       0
  9927 ;;Total ram usage:        0 bytes
  9928 ;; Hardware stack levels used:    1
  9929 ;; Hardware stack levels required when called:   12
  9930 ;; This function calls:
  9931 ;;		_ClearMcuRunTime
  9932 ;;		_DacInit
  9933 ;;		_InitAdcApplicationMgr
  9934 ;;		_PLLInitialize
  9935 ;;		_TMR0_StartTimer
  9936 ;; This function is called by:
  9937 ;;		_main
  9938 ;; This function uses a non-reentrant model
  9939 ;;
  9940                           
  9941                           	psect	text52
  9942  004134                     __ptext52:
  9943                           	opt stack 0
  9944  004134                     _InitSystemApplicationManagers:
  9945                           	opt stack 18
  9946                           
  9947                           ;SystemSettings.c: 36: InitAdcApplicationMgr();
  9948                           
  9949                           ;incstack = 0
  9950  004134  EC1A  F021         	call	_InitAdcApplicationMgr	;wreg free
  9951                           
  9952                           ;SystemSettings.c: 39: TMR0_StartTimer();
  9953  004138  EC1F  F021         	call	_TMR0_StartTimer	;wreg free
  9954                           
  9955                           ;SystemSettings.c: 42: PLLInitialize();
  9956  00413C  EC7C  F01D         	call	_PLLInitialize	;wreg free
  9957                           
  9958                           ;SystemSettings.c: 45: ClearMcuRunTime();
  9959  004140  ECB9  F020         	call	_ClearMcuRunTime	;wreg free
  9960                           
  9961                           ;SystemSettings.c: 48: DacInit();
  9962  004144  ECED  F013         	call	_DacInit	;wreg free
  9963  004148  0012               	return		;funcret
  9964  00414A                     __end_of_InitSystemApplicationManagers:
  9965                           	opt stack 0
  9966                           tosu	equ	0xFFF
  9967                           tosh	equ	0xFFE
  9968                           tosl	equ	0xFFD
  9969                           pclath	equ	0xFFA
  9970                           tblptru	equ	0xFF8
  9971                           tblptrh	equ	0xFF7
  9972                           tblptrl	equ	0xFF6
  9973                           tablat	equ	0xFF5
  9974                           prodh	equ	0xFF4
  9975                           prodl	equ	0xFF3
  9976                           intcon	equ	0xFF2
  9977                           intcon2	equ	0xFF1
  9978                           postinc0	equ	0xFEE
  9979                           plusw0	equ	0xFEB
  9980                           wreg	equ	0xFE8
  9981                           indf1	equ	0xFE7
  9982                           postdec1	equ	0xFE5
  9983                           fsr1h	equ	0xFE2
  9984                           fsr1l	equ	0xFE1
  9985                           indf2	equ	0xFDF
  9986                           postinc2	equ	0xFDE
  9987                           postdec2	equ	0xFDD
  9988                           plusw2	equ	0xFDB
  9989                           fsr2h	equ	0xFDA
  9990                           fsr2l	equ	0xFD9
  9991                           status	equ	0xFD8
  9992                           
  9993 ;; *************** function _TMR0_StartTimer *****************
  9994 ;; Defined at:
  9995 ;;		line 93 in file "mcc_generated_files/tmr0.c"
  9996 ;; Parameters:    Size  Location     Type
  9997 ;;		None
  9998 ;; Auto vars:     Size  Location     Type
  9999 ;;		None
 10000 ;; Return value:  Size  Location     Type
 10001 ;;                  1    wreg      void 
 10002 ;; Registers used:
 10003 ;;		None
 10004 ;; Tracked objects:
 10005 ;;		On entry : 0/0
 10006 ;;		On exit  : 0/0
 10007 ;;		Unchanged: 0/0
 10008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10009 ;;      Params:         0       0       0       0       0       0       0
 10010 ;;      Locals:         0       0       0       0       0       0       0
 10011 ;;      Temps:          0       0       0       0       0       0       0
 10012 ;;      Totals:         0       0       0       0       0       0       0
 10013 ;;Total ram usage:        0 bytes
 10014 ;; Hardware stack levels used:    1
 10015 ;; Hardware stack levels required when called:    4
 10016 ;; This function calls:
 10017 ;;		Nothing
 10018 ;; This function is called by:
 10019 ;;		_InitSystemApplicationManagers
 10020 ;; This function uses a non-reentrant model
 10021 ;;
 10022                           
 10023                           	psect	text53
 10024  00423E                     __ptext53:
 10025                           	opt stack 0
 10026  00423E                     _TMR0_StartTimer:
 10027                           	opt stack 25
 10028                           
 10029                           ;tmr0.c: 96: T0CONbits.TMR0ON = 1;
 10030                           
 10031                           ;incstack = 0
 10032  00423E  8ED5               	bsf	4053,7,c	;volatile
 10033  004240  0012               	return		;funcret
 10034  004242                     __end_of_TMR0_StartTimer:
 10035                           	opt stack 0
 10036                           tosu	equ	0xFFF
 10037                           tosh	equ	0xFFE
 10038                           tosl	equ	0xFFD
 10039                           pclath	equ	0xFFA
 10040                           tblptru	equ	0xFF8
 10041                           tblptrh	equ	0xFF7
 10042                           tblptrl	equ	0xFF6
 10043                           tablat	equ	0xFF5
 10044                           prodh	equ	0xFF4
 10045                           prodl	equ	0xFF3
 10046                           intcon	equ	0xFF2
 10047                           intcon2	equ	0xFF1
 10048                           postinc0	equ	0xFEE
 10049                           plusw0	equ	0xFEB
 10050                           wreg	equ	0xFE8
 10051                           indf1	equ	0xFE7
 10052                           postdec1	equ	0xFE5
 10053                           fsr1h	equ	0xFE2
 10054                           fsr1l	equ	0xFE1
 10055                           indf2	equ	0xFDF
 10056                           postinc2	equ	0xFDE
 10057                           postdec2	equ	0xFDD
 10058                           plusw2	equ	0xFDB
 10059                           fsr2h	equ	0xFDA
 10060                           fsr2l	equ	0xFD9
 10061                           status	equ	0xFD8
 10062                           
 10063 ;; *************** function _PLLInitialize *****************
 10064 ;; Defined at:
 10065 ;;		line 28 in file "SyntApp.c"
 10066 ;; Parameters:    Size  Location     Type
 10067 ;;		None
 10068 ;; Auto vars:     Size  Location     Type
 10069 ;;		None
 10070 ;; Return value:  Size  Location     Type
 10071 ;;                  1    wreg      void 
 10072 ;; Registers used:
 10073 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10074 ;; Tracked objects:
 10075 ;;		On entry : 0/0
 10076 ;;		On exit  : 0/0
 10077 ;;		Unchanged: 0/0
 10078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10079 ;;      Params:         0       0       0       0       0       0       0
 10080 ;;      Locals:         0       0       0       0       0       0       0
 10081 ;;      Temps:          0       0       0       0       0       0       0
 10082 ;;      Totals:         0       0       0       0       0       0       0
 10083 ;;Total ram usage:        0 bytes
 10084 ;; Hardware stack levels used:    1
 10085 ;; Hardware stack levels required when called:   11
 10086 ;; This function calls:
 10087 ;;		_FillArray
 10088 ;;		_InitSynth
 10089 ;; This function is called by:
 10090 ;;		_InitSystemApplicationManagers
 10091 ;; This function uses a non-reentrant model
 10092 ;;
 10093                           
 10094                           	psect	text54
 10095  003AF8                     __ptext54:
 10096                           	opt stack 0
 10097  003AF8                     _PLLInitialize:
 10098                           	opt stack 18
 10099                           
 10100                           ;SyntApp.c: 30: InitSynth(SYNTH_TX);
 10101                           
 10102                           ;incstack = 0
 10103  003AF8  0E00               	movlw	0
 10104  003AFA  EC4B  F005         	call	_InitSynth
 10105                           
 10106                           ;SyntApp.c: 31: InitSynth(SYNTH_RX);
 10107  003AFE  0E01               	movlw	1
 10108  003B00  EC4B  F005         	call	_InitSynth
 10109                           
 10110                           ;SyntApp.c: 34: FillArray(synthLdRxArray, sizeof(synthLdRxArray), 0x0);
 10111  003B04  0EA6               	movlw	low _synthLdRxArray
 10112  003B06  6E20               	movwf	FillArray@array,c
 10113  003B08  0E01               	movlw	high _synthLdRxArray
 10114  003B0A  6E21               	movwf	FillArray@array+1,c
 10115  003B0C  0E00               	movlw	0
 10116  003B0E  6E23               	movwf	FillArray@size+1,c
 10117  003B10  0E0C               	movlw	12
 10118  003B12  6E22               	movwf	FillArray@size,c
 10119  003B14  0E00               	movlw	0
 10120  003B16  6E24               	movwf	FillArray@value,c
 10121  003B18  EC68  F020         	call	_FillArray	;wreg free
 10122                           
 10123                           ;SyntApp.c: 35: FillArray(synthLdTxArray, sizeof(synthLdTxArray), 0x0);
 10124  003B1C  0E9A               	movlw	low _synthLdTxArray
 10125  003B1E  6E20               	movwf	FillArray@array,c
 10126  003B20  0E01               	movlw	high _synthLdTxArray
 10127  003B22  6E21               	movwf	FillArray@array+1,c
 10128  003B24  0E00               	movlw	0
 10129  003B26  6E23               	movwf	FillArray@size+1,c
 10130  003B28  0E0C               	movlw	12
 10131  003B2A  6E22               	movwf	FillArray@size,c
 10132  003B2C  0E00               	movlw	0
 10133  003B2E  6E24               	movwf	FillArray@value,c
 10134  003B30  EC68  F020         	call	_FillArray	;wreg free
 10135  003B34  0012               	return		;funcret
 10136  003B36                     __end_of_PLLInitialize:
 10137                           	opt stack 0
 10138                           tosu	equ	0xFFF
 10139                           tosh	equ	0xFFE
 10140                           tosl	equ	0xFFD
 10141                           pclath	equ	0xFFA
 10142                           tblptru	equ	0xFF8
 10143                           tblptrh	equ	0xFF7
 10144                           tblptrl	equ	0xFF6
 10145                           tablat	equ	0xFF5
 10146                           prodh	equ	0xFF4
 10147                           prodl	equ	0xFF3
 10148                           intcon	equ	0xFF2
 10149                           intcon2	equ	0xFF1
 10150                           postinc0	equ	0xFEE
 10151                           plusw0	equ	0xFEB
 10152                           wreg	equ	0xFE8
 10153                           indf1	equ	0xFE7
 10154                           postdec1	equ	0xFE5
 10155                           fsr1h	equ	0xFE2
 10156                           fsr1l	equ	0xFE1
 10157                           indf2	equ	0xFDF
 10158                           postinc2	equ	0xFDE
 10159                           postdec2	equ	0xFDD
 10160                           plusw2	equ	0xFDB
 10161                           fsr2h	equ	0xFDA
 10162                           fsr2l	equ	0xFD9
 10163                           status	equ	0xFD8
 10164                           
 10165 ;; *************** function _InitSynth *****************
 10166 ;; Defined at:
 10167 ;;		line 38 in file "SyntApp.c"
 10168 ;; Parameters:    Size  Location     Type
 10169 ;;  cType           1    wreg     enum E1
 10170 ;; Auto vars:     Size  Location     Type
 10171 ;;  cType           1  108[BANK0 ] enum E1
 10172 ;;  idx             1  109[BANK0 ] unsigned char 
 10173 ;;  EepromVal       4  104[BANK0 ] unsigned long 
 10174 ;;  regNum          1  110[BANK0 ] unsigned char 
 10175 ;; Return value:  Size  Location     Type
 10176 ;;                  1    wreg      void 
 10177 ;; Registers used:
 10178 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10179 ;; Tracked objects:
 10180 ;;		On entry : 0/0
 10181 ;;		On exit  : 0/0
 10182 ;;		Unchanged: 0/0
 10183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10184 ;;      Params:         0       0       0       0       0       0       0
 10185 ;;      Locals:         0       7       0       0       0       0       0
 10186 ;;      Temps:          0       0       0       0       0       0       0
 10187 ;;      Totals:         0       7       0       0       0       0       0
 10188 ;;Total ram usage:        7 bytes
 10189 ;; Hardware stack levels used:    1
 10190 ;; Hardware stack levels required when called:   10
 10191 ;; This function calls:
 10192 ;;		_ReadIntFromEeprom
 10193 ;;		_SWSPI_send_word
 10194 ;;		_StoreIntInEeprom
 10195 ;;		_SwSpi_Set_CE_Pin
 10196 ;; This function is called by:
 10197 ;;		_PLLInitialize
 10198 ;;		_SetSynthOper
 10199 ;;		_SynthLdDetect
 10200 ;; This function uses a non-reentrant model
 10201 ;;
 10202                           
 10203                           	psect	text55
 10204  000A96                     __ptext55:
 10205                           	opt stack 0
 10206  000A96                     _InitSynth:
 10207                           	opt stack 17
 10208                           
 10209                           ;incstack = 0
 10210                           ;InitSynth@cType stored from wreg
 10211  000A96  0100               	movlb	0	; () banked
 10212  000A98  6FCC               	movwf	InitSynth@cType& (0+255),b
 10213                           
 10214                           ;SyntApp.c: 40: SwSpi_Set_CE_Pin(cType, 1);
 10215  000A9A  0E01               	movlw	1
 10216  000A9C  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
 10217  000A9E  0100               	movlb	0	; () banked
 10218  000AA0  51CC               	movf	InitSynth@cType& (0+255),w,b
 10219  000AA2  EC9B  F01D         	call	_SwSpi_Set_CE_Pin
 10220                           
 10221                           ;SyntApp.c: 42: uint8_t regNum = 0;
 10222  000AA6  0E00               	movlw	0
 10223  000AA8  0100               	movlb	0	; () banked
 10224  000AAA  6FCE               	movwf	InitSynth@regNum& (0+255),b
 10225                           
 10226                           ; BSR set to: 0
 10227                           ;SyntApp.c: 43: uint32_t EepromVal = 0x0;
 10228  000AAC  0E00               	movlw	0
 10229  000AAE  6FC8               	movwf	InitSynth@EepromVal& (0+255),b
 10230  000AB0  0E00               	movlw	0
 10231  000AB2  6FC9               	movwf	(InitSynth@EepromVal+1)& (0+255),b
 10232  000AB4  0E00               	movlw	0
 10233  000AB6  6FCA               	movwf	(InitSynth@EepromVal+2)& (0+255),b
 10234  000AB8  0E00               	movlw	0
 10235  000ABA  6FCB               	movwf	(InitSynth@EepromVal+3)& (0+255),b
 10236                           
 10237                           ; BSR set to: 0
 10238                           ;SyntApp.c: 46: for(uint8_t idx = 0; idx < 13; idx++)
 10239  000ABC  0E00               	movlw	0
 10240  000ABE  6FCD               	movwf	InitSynth@idx& (0+255),b
 10241  000AC0                     l8000:
 10242                           
 10243                           ; BSR set to: 0
 10244  000AC0  0E0C               	movlw	12
 10245  000AC2  65CD               	cpfsgt	InitSynth@idx& (0+255),b
 10246  000AC4  D001               	goto	l505
 10247  000AC6  0012               	return	
 10248  000AC8                     l505:
 10249                           
 10250                           ; BSR set to: 0
 10251                           ;SyntApp.c: 47: {
 10252                           ;SyntApp.c: 48: regNum = 13 - idx - 1;
 10253                           
 10254                           ; BSR set to: 0
 10255  000AC8  29CD               	incf	InitSynth@idx& (0+255),w,b
 10256  000ACA  0800               	sublw	0
 10257  000ACC  0F0D               	addlw	13
 10258  000ACE  6FCE               	movwf	InitSynth@regNum& (0+255),b
 10259                           
 10260                           ; BSR set to: 0
 10261                           ;SyntApp.c: 49: if(regNum == 0x0 || regNum == 0x1 || regNum == 0x2 || regNum == 0x4 || r
      +                          egNum == 0x6 || regNum == 0xA)
 10262  000AD0  51CE               	movf	InitSynth@regNum& (0+255),w,b
 10263  000AD2  B4D8               	btfsc	status,2,c
 10264  000AD4  D013               	goto	u8050
 10265                           
 10266                           ; BSR set to: 0
 10267  000AD6  05CE               	decf	InitSynth@regNum& (0+255),w,b
 10268  000AD8  B4D8               	btfsc	status,2,c
 10269  000ADA  D010               	goto	u8050
 10270                           
 10271                           ; BSR set to: 0
 10272  000ADC  0E02               	movlw	2
 10273  000ADE  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 10274  000AE0  B4D8               	btfsc	status,2,c
 10275  000AE2  D00C               	goto	u8050
 10276                           
 10277                           ; BSR set to: 0
 10278  000AE4  0E04               	movlw	4
 10279  000AE6  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 10280  000AE8  B4D8               	btfsc	status,2,c
 10281  000AEA  D008               	goto	u8050
 10282                           
 10283                           ; BSR set to: 0
 10284  000AEC  0E06               	movlw	6
 10285  000AEE  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 10286  000AF0  B4D8               	btfsc	status,2,c
 10287  000AF2  D004               	goto	u8050
 10288                           
 10289                           ; BSR set to: 0
 10290  000AF4  0E0A               	movlw	10
 10291  000AF6  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 10292  000AF8  A4D8               	btfss	status,2,c
 10293  000AFA  D0EB               	goto	l507
 10294  000AFC                     u8050:
 10295                           
 10296                           ; BSR set to: 0
 10297                           ;SyntApp.c: 50: {
 10298                           ;SyntApp.c: 51: if(cType == SYNTH_TX)
 10299                           
 10300                           ; BSR set to: 0
 10301  000AFC  51CC               	movf	InitSynth@cType& (0+255),w,b
 10302  000AFE  A4D8               	btfss	status,2,c
 10303  000B00  D071               	goto	l510
 10304                           
 10305                           ; BSR set to: 0
 10306                           ;SyntApp.c: 52: {
 10307                           ;SyntApp.c: 53: EepromVal = ReadIntFromEeprom((0) | SYNTH_ADDRES[regNum], 4);
 10308  000B02  0E00               	movlw	0
 10309  000B04  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 10310  000B06  0E04               	movlw	4
 10311  000B08  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 10312  000B0A  51CE               	movf	InitSynth@regNum& (0+255),w,b
 10313  000B0C  0D01               	mullw	1
 10314  000B0E  0E35               	movlw	low _SYNTH_ADDRES
 10315  000B10  24F3               	addwf	prodl,w,c
 10316  000B12  6EF6               	movwf	tblptrl,c
 10317  000B14  0E06               	movlw	high _SYNTH_ADDRES
 10318  000B16  20F4               	addwfc	prodh,w,c
 10319  000B18  6EF7               	movwf	tblptrh,c
 10320  000B1A                     	if	0	;There are less than 3 active tblptr bytes
 10321  000B1A                     	endif
 10322  000B1A  0008               	tblrd		*
 10323  000B1C  50F5               	movf	tablat,w,c
 10324  000B1E  EC8A  F00F         	call	_ReadIntFromEeprom
 10325  000B22  C0B1  F0C8         	movff	?_ReadIntFromEeprom,InitSynth@EepromVal
 10326  000B26  C0B2  F0C9         	movff	?_ReadIntFromEeprom+1,InitSynth@EepromVal+1
 10327  000B2A  C0B3  F0CA         	movff	?_ReadIntFromEeprom+2,InitSynth@EepromVal+2
 10328  000B2E  C0B4  F0CB         	movff	?_ReadIntFromEeprom+3,InitSynth@EepromVal+3
 10329                           
 10330                           ;SyntApp.c: 54: if(EepromVal == 0xFFFFFFFF)
 10331  000B32  0100               	movlb	0	; () banked
 10332  000B34  29C8               	incf	InitSynth@EepromVal& (0+255),w,b
 10333  000B36  E147               	bnz	l8028
 10334  000B38  29C9               	incf	(InitSynth@EepromVal+1)& (0+255),w,b
 10335  000B3A  E145               	bnz	l8028
 10336  000B3C  29CA               	incf	(InitSynth@EepromVal+2)& (0+255),w,b
 10337  000B3E  E143               	bnz	l8028
 10338  000B40  29CB               	incf	(InitSynth@EepromVal+3)& (0+255),w,b
 10339  000B42  A4D8               	btfss	status,2,c
 10340  000B44  D040               	goto	l511
 10341                           
 10342                           ; BSR set to: 0
 10343                           ;SyntApp.c: 55: {
 10344                           ;SyntApp.c: 56: SWSPI_send_word(cType, SYNTH_REGS[idx],3);
 10345  000B46  51CD               	movf	InitSynth@idx& (0+255),w,b
 10346  000B48  0D04               	mullw	4
 10347  000B4A  0E01               	movlw	low _SYNTH_REGS
 10348  000B4C  24F3               	addwf	prodl,w,c
 10349  000B4E  6EF6               	movwf	tblptrl,c
 10350  000B50  0E06               	movlw	high _SYNTH_REGS
 10351  000B52  20F4               	addwfc	prodh,w,c
 10352  000B54  6EF7               	movwf	tblptrh,c
 10353  000B56                     	if	0	;There are less than 3 active tblptr bytes
 10354  000B56                     	endif
 10355  000B56  0009               	tblrd		*+
 10356  000B58  CFF5 F029          	movff	tablat,SWSPI_send_word@data
 10357  000B5C  0009               	tblrd		*+
 10358  000B5E  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+1
 10359  000B62  0009               	tblrd		*+
 10360  000B64  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+2
 10361  000B68  000A               	tblrd		*-
 10362  000B6A  CFF5 F02C          	movff	tablat,SWSPI_send_word@data+3
 10363  000B6E  0E03               	movlw	3
 10364  000B70  6E2D               	movwf	SWSPI_send_word@dataSize,c
 10365  000B72  51CC               	movf	InitSynth@cType& (0+255),w,b
 10366  000B74  EC67  F017         	call	_SWSPI_send_word
 10367                           
 10368                           ;SyntApp.c: 57: StoreIntInEeprom(SYNTH_REGS[idx], (0) | SYNTH_ADDRES[regNum], 4);
 10369  000B78  0100               	movlb	0	; () banked
 10370  000B7A  51CD               	movf	InitSynth@idx& (0+255),w,b
 10371  000B7C  0D04               	mullw	4
 10372  000B7E  0E01               	movlw	low _SYNTH_REGS
 10373  000B80  24F3               	addwf	prodl,w,c
 10374  000B82  6EF6               	movwf	tblptrl,c
 10375  000B84  0E06               	movlw	high _SYNTH_REGS
 10376  000B86  20F4               	addwfc	prodh,w,c
 10377  000B88  6EF7               	movwf	tblptrh,c
 10378  000B8A                     	if	0	;There are less than 3 active tblptr bytes
 10379  000B8A                     	endif
 10380  000B8A  0009               	tblrd		*+
 10381  000B8C  CFF5 F021          	movff	tablat,StoreIntInEeprom@data
 10382  000B90  0009               	tblrd		*+
 10383  000B92  CFF5 F022          	movff	tablat,StoreIntInEeprom@data+1
 10384  000B96  0009               	tblrd		*+
 10385  000B98  CFF5 F023          	movff	tablat,StoreIntInEeprom@data+2
 10386  000B9C  000A               	tblrd		*-
 10387  000B9E  CFF5 F024          	movff	tablat,StoreIntInEeprom@data+3
 10388  000BA2  51CE               	movf	InitSynth@regNum& (0+255),w,b
 10389  000BA4  0D01               	mullw	1
 10390  000BA6  0E35               	movlw	low _SYNTH_ADDRES
 10391  000BA8  24F3               	addwf	prodl,w,c
 10392  000BAA  6EF6               	movwf	tblptrl,c
 10393  000BAC  0E06               	movlw	high _SYNTH_ADDRES
 10394  000BAE  20F4               	addwfc	prodh,w,c
 10395  000BB0  6EF7               	movwf	tblptrh,c
 10396  000BB2                     	if	0	;There are less than 3 active tblptr bytes
 10397  000BB2                     	endif
 10398  000BB2  0008               	tblrd		*
 10399  000BB4  CFF5 F025          	movff	tablat,StoreIntInEeprom@address
 10400  000BB8  0E00               	movlw	0
 10401  000BBA  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
 10402  000BBC  0E04               	movlw	4
 10403  000BBE  6E26               	movwf	StoreIntInEeprom@numOfByes,c
 10404  000BC0  EC10  F01E         	call	_StoreIntInEeprom	;wreg free
 10405                           
 10406                           ;SyntApp.c: 58: }
 10407  000BC4  D0A0               	goto	l517
 10408  000BC6                     l511:
 10409  000BC6                     l8028:
 10410                           
 10411                           ;SyntApp.c: 59: else
 10412                           ;SyntApp.c: 60: {
 10413                           ;SyntApp.c: 61: SWSPI_send_word(cType, EepromVal,3);
 10414  000BC6  C0C8  F029         	movff	InitSynth@EepromVal,SWSPI_send_word@data
 10415  000BCA  C0C9  F02A         	movff	InitSynth@EepromVal+1,SWSPI_send_word@data+1
 10416  000BCE  C0CA  F02B         	movff	InitSynth@EepromVal+2,SWSPI_send_word@data+2
 10417  000BD2  C0CB  F02C         	movff	InitSynth@EepromVal+3,SWSPI_send_word@data+3
 10418  000BD6  0E03               	movlw	3
 10419  000BD8  6E2D               	movwf	SWSPI_send_word@dataSize,c
 10420  000BDA  0100               	movlb	0	; () banked
 10421  000BDC  51CC               	movf	InitSynth@cType& (0+255),w,b
 10422  000BDE  EC67  F017         	call	_SWSPI_send_word
 10423                           
 10424                           ;SyntApp.c: 62: }
 10425                           ;SyntApp.c: 63: }
 10426  000BE2  D091               	goto	l517
 10427  000BE4                     l510:
 10428                           
 10429                           ;SyntApp.c: 64: else if (cType == SYNTH_RX)
 10430  000BE4  0100               	movlb	0	; () banked
 10431  000BE6  05CC               	decf	InitSynth@cType& (0+255),w,b
 10432  000BE8  A4D8               	btfss	status,2,c
 10433  000BEA  D08D               	goto	l517
 10434                           
 10435                           ; BSR set to: 0
 10436                           ;SyntApp.c: 65: {
 10437                           ;SyntApp.c: 66: EepromVal = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[regNum], 4);
 10438  000BEC  0E00               	movlw	0
 10439  000BEE  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 10440  000BF0  0E04               	movlw	4
 10441  000BF2  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 10442  000BF4  51CE               	movf	InitSynth@regNum& (0+255),w,b
 10443  000BF6  0D01               	mullw	1
 10444  000BF8  0E35               	movlw	low _SYNTH_ADDRES
 10445  000BFA  24F3               	addwf	prodl,w,c
 10446  000BFC  6EF6               	movwf	tblptrl,c
 10447  000BFE  0E06               	movlw	high _SYNTH_ADDRES
 10448  000C00  20F4               	addwfc	prodh,w,c
 10449  000C02  6EF7               	movwf	tblptrh,c
 10450  000C04                     	if	0	;There are less than 3 active tblptr bytes
 10451  000C04                     	endif
 10452  000C04  0008               	tblrd		*
 10453  000C06  50F5               	movf	tablat,w,c
 10454  000C08  0920               	iorlw	32
 10455  000C0A  EC8A  F00F         	call	_ReadIntFromEeprom
 10456  000C0E  C0B1  F0C8         	movff	?_ReadIntFromEeprom,InitSynth@EepromVal
 10457  000C12  C0B2  F0C9         	movff	?_ReadIntFromEeprom+1,InitSynth@EepromVal+1
 10458  000C16  C0B3  F0CA         	movff	?_ReadIntFromEeprom+2,InitSynth@EepromVal+2
 10459  000C1A  C0B4  F0CB         	movff	?_ReadIntFromEeprom+3,InitSynth@EepromVal+3
 10460                           
 10461                           ;SyntApp.c: 67: if(EepromVal == 0xFFFFFFFF)
 10462  000C1E  0100               	movlb	0	; () banked
 10463  000C20  29C8               	incf	InitSynth@EepromVal& (0+255),w,b
 10464  000C22  E148               	bnz	l8040
 10465  000C24  29C9               	incf	(InitSynth@EepromVal+1)& (0+255),w,b
 10466  000C26  E146               	bnz	l8040
 10467  000C28  29CA               	incf	(InitSynth@EepromVal+2)& (0+255),w,b
 10468  000C2A  E144               	bnz	l8040
 10469  000C2C  29CB               	incf	(InitSynth@EepromVal+3)& (0+255),w,b
 10470  000C2E  A4D8               	btfss	status,2,c
 10471  000C30  D041               	goto	l515
 10472                           
 10473                           ; BSR set to: 0
 10474                           ;SyntApp.c: 68: {
 10475                           ;SyntApp.c: 69: SWSPI_send_word(cType, SYNTH_REGS[idx],3);
 10476  000C32  51CD               	movf	InitSynth@idx& (0+255),w,b
 10477  000C34  0D04               	mullw	4
 10478  000C36  0E01               	movlw	low _SYNTH_REGS
 10479  000C38  24F3               	addwf	prodl,w,c
 10480  000C3A  6EF6               	movwf	tblptrl,c
 10481  000C3C  0E06               	movlw	high _SYNTH_REGS
 10482  000C3E  20F4               	addwfc	prodh,w,c
 10483  000C40  6EF7               	movwf	tblptrh,c
 10484  000C42                     	if	0	;There are less than 3 active tblptr bytes
 10485  000C42                     	endif
 10486  000C42  0009               	tblrd		*+
 10487  000C44  CFF5 F029          	movff	tablat,SWSPI_send_word@data
 10488  000C48  0009               	tblrd		*+
 10489  000C4A  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+1
 10490  000C4E  0009               	tblrd		*+
 10491  000C50  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+2
 10492  000C54  000A               	tblrd		*-
 10493  000C56  CFF5 F02C          	movff	tablat,SWSPI_send_word@data+3
 10494  000C5A  0E03               	movlw	3
 10495  000C5C  6E2D               	movwf	SWSPI_send_word@dataSize,c
 10496  000C5E  51CC               	movf	InitSynth@cType& (0+255),w,b
 10497  000C60  EC67  F017         	call	_SWSPI_send_word
 10498                           
 10499                           ;SyntApp.c: 70: StoreIntInEeprom(SYNTH_REGS[idx], (0x20) | SYNTH_ADDRES[regNum], 4);
 10500  000C64  0100               	movlb	0	; () banked
 10501  000C66  51CD               	movf	InitSynth@idx& (0+255),w,b
 10502  000C68  0D04               	mullw	4
 10503  000C6A  0E01               	movlw	low _SYNTH_REGS
 10504  000C6C  24F3               	addwf	prodl,w,c
 10505  000C6E  6EF6               	movwf	tblptrl,c
 10506  000C70  0E06               	movlw	high _SYNTH_REGS
 10507  000C72  20F4               	addwfc	prodh,w,c
 10508  000C74  6EF7               	movwf	tblptrh,c
 10509  000C76                     	if	0	;There are less than 3 active tblptr bytes
 10510  000C76                     	endif
 10511  000C76  0009               	tblrd		*+
 10512  000C78  CFF5 F021          	movff	tablat,StoreIntInEeprom@data
 10513  000C7C  0009               	tblrd		*+
 10514  000C7E  CFF5 F022          	movff	tablat,StoreIntInEeprom@data+1
 10515  000C82  0009               	tblrd		*+
 10516  000C84  CFF5 F023          	movff	tablat,StoreIntInEeprom@data+2
 10517  000C88  000A               	tblrd		*-
 10518  000C8A  CFF5 F024          	movff	tablat,StoreIntInEeprom@data+3
 10519  000C8E  51CE               	movf	InitSynth@regNum& (0+255),w,b
 10520  000C90  0D01               	mullw	1
 10521  000C92  0E35               	movlw	low _SYNTH_ADDRES
 10522  000C94  24F3               	addwf	prodl,w,c
 10523  000C96  6EF6               	movwf	tblptrl,c
 10524  000C98  0E06               	movlw	high _SYNTH_ADDRES
 10525  000C9A  20F4               	addwfc	prodh,w,c
 10526  000C9C  6EF7               	movwf	tblptrh,c
 10527  000C9E                     	if	0	;There are less than 3 active tblptr bytes
 10528  000C9E                     	endif
 10529  000C9E  0008               	tblrd		*
 10530  000CA0  50F5               	movf	tablat,w,c
 10531  000CA2  0920               	iorlw	32
 10532  000CA4  6E25               	movwf	StoreIntInEeprom@address,c
 10533  000CA6  0E00               	movlw	0
 10534  000CA8  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
 10535  000CAA  0E04               	movlw	4
 10536  000CAC  6E26               	movwf	StoreIntInEeprom@numOfByes,c
 10537  000CAE  EC10  F01E         	call	_StoreIntInEeprom	;wreg free
 10538                           
 10539                           ;SyntApp.c: 71: }
 10540  000CB2  D029               	goto	l517
 10541  000CB4                     l515:
 10542  000CB4                     l8040:
 10543                           
 10544                           ;SyntApp.c: 72: else
 10545                           ;SyntApp.c: 73: {
 10546                           ;SyntApp.c: 74: SWSPI_send_word(cType, EepromVal,3);
 10547  000CB4  C0C8  F029         	movff	InitSynth@EepromVal,SWSPI_send_word@data
 10548  000CB8  C0C9  F02A         	movff	InitSynth@EepromVal+1,SWSPI_send_word@data+1
 10549  000CBC  C0CA  F02B         	movff	InitSynth@EepromVal+2,SWSPI_send_word@data+2
 10550  000CC0  C0CB  F02C         	movff	InitSynth@EepromVal+3,SWSPI_send_word@data+3
 10551  000CC4  0E03               	movlw	3
 10552  000CC6  6E2D               	movwf	SWSPI_send_word@dataSize,c
 10553  000CC8  0100               	movlb	0	; () banked
 10554  000CCA  51CC               	movf	InitSynth@cType& (0+255),w,b
 10555  000CCC  EC67  F017         	call	_SWSPI_send_word
 10556                           
 10557                           ;SyntApp.c: 75: }
 10558                           ;SyntApp.c: 76: }
 10559                           ;SyntApp.c: 79: }
 10560  000CD0  D01A               	goto	l517
 10561  000CD2                     l507:
 10562                           
 10563                           ;SyntApp.c: 80: else
 10564                           ;SyntApp.c: 81: {
 10565                           ;SyntApp.c: 82: SWSPI_send_word(cType, SYNTH_REGS[idx],3);
 10566  000CD2  0100               	movlb	0	; () banked
 10567  000CD4  51CD               	movf	InitSynth@idx& (0+255),w,b
 10568  000CD6  0D04               	mullw	4
 10569  000CD8  0E01               	movlw	low _SYNTH_REGS
 10570  000CDA  24F3               	addwf	prodl,w,c
 10571  000CDC  6EF6               	movwf	tblptrl,c
 10572  000CDE  0E06               	movlw	high _SYNTH_REGS
 10573  000CE0  20F4               	addwfc	prodh,w,c
 10574  000CE2  6EF7               	movwf	tblptrh,c
 10575  000CE4                     	if	0	;There are less than 3 active tblptr bytes
 10576  000CE4                     	endif
 10577  000CE4  0009               	tblrd		*+
 10578  000CE6  CFF5 F029          	movff	tablat,SWSPI_send_word@data
 10579  000CEA  0009               	tblrd		*+
 10580  000CEC  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+1
 10581  000CF0  0009               	tblrd		*+
 10582  000CF2  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+2
 10583  000CF6  000A               	tblrd		*-
 10584  000CF8  CFF5 F02C          	movff	tablat,SWSPI_send_word@data+3
 10585  000CFC  0E03               	movlw	3
 10586  000CFE  6E2D               	movwf	SWSPI_send_word@dataSize,c
 10587  000D00  51CC               	movf	InitSynth@cType& (0+255),w,b
 10588  000D02  EC67  F017         	call	_SWSPI_send_word
 10589  000D06                     l517:
 10590  000D06  0100               	movlb	0	; () banked
 10591  000D08  2BCD               	incf	InitSynth@idx& (0+255),f,b
 10592  000D0A  D6DA               	goto	l8000
 10593  000D0C                     __end_of_InitSynth:
 10594                           	opt stack 0
 10595                           tosu	equ	0xFFF
 10596                           tosh	equ	0xFFE
 10597                           tosl	equ	0xFFD
 10598                           pclath	equ	0xFFA
 10599                           tblptru	equ	0xFF8
 10600                           tblptrh	equ	0xFF7
 10601                           tblptrl	equ	0xFF6
 10602                           tablat	equ	0xFF5
 10603                           prodh	equ	0xFF4
 10604                           prodl	equ	0xFF3
 10605                           intcon	equ	0xFF2
 10606                           intcon2	equ	0xFF1
 10607                           postinc0	equ	0xFEE
 10608                           plusw0	equ	0xFEB
 10609                           wreg	equ	0xFE8
 10610                           indf1	equ	0xFE7
 10611                           postdec1	equ	0xFE5
 10612                           fsr1h	equ	0xFE2
 10613                           fsr1l	equ	0xFE1
 10614                           indf2	equ	0xFDF
 10615                           postinc2	equ	0xFDE
 10616                           postdec2	equ	0xFDD
 10617                           plusw2	equ	0xFDB
 10618                           fsr2h	equ	0xFDA
 10619                           fsr2l	equ	0xFD9
 10620                           status	equ	0xFD8
 10621                           
 10622 ;; *************** function _SwSpi_Set_CE_Pin *****************
 10623 ;; Defined at:
 10624 ;;		line 201 in file "SwSpiApp.c"
 10625 ;; Parameters:    Size  Location     Type
 10626 ;;  phrType         1    wreg     enum E1
 10627 ;;  cPinMode        1   23[COMRAM] unsigned char 
 10628 ;; Auto vars:     Size  Location     Type
 10629 ;;  phrType         1   24[COMRAM] enum E1
 10630 ;; Return value:  Size  Location     Type
 10631 ;;                  1    wreg      void 
 10632 ;; Registers used:
 10633 ;;		wreg, status,2, status,0
 10634 ;; Tracked objects:
 10635 ;;		On entry : 0/0
 10636 ;;		On exit  : 0/0
 10637 ;;		Unchanged: 0/0
 10638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10639 ;;      Params:         1       0       0       0       0       0       0
 10640 ;;      Locals:         1       0       0       0       0       0       0
 10641 ;;      Temps:          0       0       0       0       0       0       0
 10642 ;;      Totals:         2       0       0       0       0       0       0
 10643 ;;Total ram usage:        2 bytes
 10644 ;; Hardware stack levels used:    1
 10645 ;; Hardware stack levels required when called:    4
 10646 ;; This function calls:
 10647 ;;		Nothing
 10648 ;; This function is called by:
 10649 ;;		_InitSynth
 10650 ;;		_SetSynthOper
 10651 ;; This function uses a non-reentrant model
 10652 ;;
 10653                           
 10654                           	psect	text56
 10655  003B36                     __ptext56:
 10656                           	opt stack 0
 10657  003B36                     _SwSpi_Set_CE_Pin:
 10658                           	opt stack 23
 10659                           
 10660                           ; BSR set to: 0
 10661                           ;incstack = 0
 10662                           ;SwSpi_Set_CE_Pin@phrType stored from wreg
 10663  003B36  6E19               	movwf	SwSpi_Set_CE_Pin@phrType,c
 10664                           
 10665                           ;SwSpiApp.c: 203: switch(phrType)
 10666  003B38  D014               	goto	l722
 10667  003B3A                     
 10668                           ;SwSpiApp.c: 206: if(cPinMode == 1)
 10669  003B3A  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
 10670  003B3C  A4D8               	btfss	status,2,c
 10671  003B3E  D002               	goto	l724
 10672                           
 10673                           ;SwSpiApp.c: 207: {
 10674                           ;SwSpiApp.c: 208: do { LATCbits.LATC1 = 1; } while(0);
 10675  003B40  828B               	bsf	3979,1,c	;volatile
 10676                           
 10677                           ;SwSpiApp.c: 209: }
 10678  003B42  0012               	return	
 10679  003B44                     l724:
 10680                           
 10681                           ;SwSpiApp.c: 210: else if(cPinMode == 0)
 10682  003B44  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
 10683  003B46  A4D8               	btfss	status,2,c
 10684  003B48  0012               	return	
 10685                           
 10686                           ;SwSpiApp.c: 211: {
 10687                           ;SwSpiApp.c: 212: do { LATCbits.LATC1 = 0; } while(0);
 10688  003B4A  928B               	bcf	3979,1,c	;volatile
 10689                           
 10690                           ;SwSpiApp.c: 213: }
 10691                           ;SwSpiApp.c: 214: break;
 10692  003B4C  0012               	return	
 10693  003B4E                     
 10694                           ;SwSpiApp.c: 217: if(cPinMode == 1)
 10695  003B4E  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
 10696  003B50  A4D8               	btfss	status,2,c
 10697  003B52  D002               	goto	l733
 10698                           
 10699                           ;SwSpiApp.c: 218: {
 10700                           ;SwSpiApp.c: 219: do { LATDbits.LATD2 = 1; } while(0);
 10701  003B54  848C               	bsf	3980,2,c	;volatile
 10702                           
 10703                           ;SwSpiApp.c: 220: }
 10704  003B56  0012               	return	
 10705  003B58                     l733:
 10706                           
 10707                           ;SwSpiApp.c: 221: else if(cPinMode == 0)
 10708  003B58  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
 10709  003B5A  A4D8               	btfss	status,2,c
 10710  003B5C  0012               	return	
 10711                           
 10712                           ;SwSpiApp.c: 222: {
 10713                           ;SwSpiApp.c: 223: do { LATDbits.LATD2 = 0; } while(0);
 10714  003B5E  948C               	bcf	3980,2,c	;volatile
 10715                           
 10716                           ;SwSpiApp.c: 226: }
 10717                           
 10718                           ;SwSpiApp.c: 224: }
 10719                           ;SwSpiApp.c: 225: break;
 10720  003B60  0012               	return	
 10721  003B62                     l722:
 10722  003B62  5019               	movf	SwSpi_Set_CE_Pin@phrType,w,c
 10723                           
 10724                           ; Switch size 1, requested type "space"
 10725                           ; Number of cases is 2, Range of values is 0 to 1
 10726                           ; switch strategies available:
 10727                           ; Name         Instructions Cycles
 10728                           ; simple_byte            7     4 (average)
 10729                           ;	Chosen strategy is simple_byte
 10730  003B64  0A00               	xorlw	0	; case 0
 10731  003B66  B4D8               	btfsc	status,2,c
 10732  003B68  D7E8               	goto	l723
 10733  003B6A  0A01               	xorlw	1	; case 1
 10734  003B6C  A4D8               	btfss	status,2,c
 10735  003B6E  0012               	return	
 10736  003B70  D7EE               	goto	l732
 10737  003B72                     __end_of_SwSpi_Set_CE_Pin:
 10738                           	opt stack 0
 10739                           tosu	equ	0xFFF
 10740                           tosh	equ	0xFFE
 10741                           tosl	equ	0xFFD
 10742                           pclath	equ	0xFFA
 10743                           tblptru	equ	0xFF8
 10744                           tblptrh	equ	0xFF7
 10745                           tblptrl	equ	0xFF6
 10746                           tablat	equ	0xFF5
 10747                           prodh	equ	0xFF4
 10748                           prodl	equ	0xFF3
 10749                           intcon	equ	0xFF2
 10750                           intcon2	equ	0xFF1
 10751                           postinc0	equ	0xFEE
 10752                           plusw0	equ	0xFEB
 10753                           wreg	equ	0xFE8
 10754                           indf1	equ	0xFE7
 10755                           postdec1	equ	0xFE5
 10756                           fsr1h	equ	0xFE2
 10757                           fsr1l	equ	0xFE1
 10758                           indf2	equ	0xFDF
 10759                           postinc2	equ	0xFDE
 10760                           postdec2	equ	0xFDD
 10761                           plusw2	equ	0xFDB
 10762                           fsr2h	equ	0xFDA
 10763                           fsr2l	equ	0xFD9
 10764                           status	equ	0xFD8
 10765                           
 10766 ;; *************** function _InitAdcApplicationMgr *****************
 10767 ;; Defined at:
 10768 ;;		line 20 in file "AdcApp.c"
 10769 ;; Parameters:    Size  Location     Type
 10770 ;;		None
 10771 ;; Auto vars:     Size  Location     Type
 10772 ;;		None
 10773 ;; Return value:  Size  Location     Type
 10774 ;;                  1    wreg      void 
 10775 ;; Registers used:
 10776 ;;		wreg, status,2
 10777 ;; Tracked objects:
 10778 ;;		On entry : 0/0
 10779 ;;		On exit  : 0/0
 10780 ;;		Unchanged: 0/0
 10781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10782 ;;      Params:         0       0       0       0       0       0       0
 10783 ;;      Locals:         0       0       0       0       0       0       0
 10784 ;;      Temps:          0       0       0       0       0       0       0
 10785 ;;      Totals:         0       0       0       0       0       0       0
 10786 ;;Total ram usage:        0 bytes
 10787 ;; Hardware stack levels used:    1
 10788 ;; Hardware stack levels required when called:    4
 10789 ;; This function calls:
 10790 ;;		Nothing
 10791 ;; This function is called by:
 10792 ;;		_InitSystemApplicationManagers
 10793 ;; This function uses a non-reentrant model
 10794 ;;
 10795                           
 10796                           	psect	text57
 10797  004234                     __ptext57:
 10798                           	opt stack 0
 10799  004234                     _InitAdcApplicationMgr:
 10800                           	opt stack 25
 10801                           
 10802                           ;AdcApp.c: 22: adcSampleMode = CIRCULAR;
 10803                           
 10804                           ;incstack = 0
 10805  004234  0E00               	movlw	0
 10806  004236  6E3E               	movwf	_adcSampleMode,c
 10807  004238  0012               	return		;funcret
 10808  00423A                     __end_of_InitAdcApplicationMgr:
 10809                           	opt stack 0
 10810                           tosu	equ	0xFFF
 10811                           tosh	equ	0xFFE
 10812                           tosl	equ	0xFFD
 10813                           pclath	equ	0xFFA
 10814                           tblptru	equ	0xFF8
 10815                           tblptrh	equ	0xFF7
 10816                           tblptrl	equ	0xFF6
 10817                           tablat	equ	0xFF5
 10818                           prodh	equ	0xFF4
 10819                           prodl	equ	0xFF3
 10820                           intcon	equ	0xFF2
 10821                           intcon2	equ	0xFF1
 10822                           postinc0	equ	0xFEE
 10823                           plusw0	equ	0xFEB
 10824                           wreg	equ	0xFE8
 10825                           indf1	equ	0xFE7
 10826                           postdec1	equ	0xFE5
 10827                           fsr1h	equ	0xFE2
 10828                           fsr1l	equ	0xFE1
 10829                           indf2	equ	0xFDF
 10830                           postinc2	equ	0xFDE
 10831                           postdec2	equ	0xFDD
 10832                           plusw2	equ	0xFDB
 10833                           fsr2h	equ	0xFDA
 10834                           fsr2l	equ	0xFD9
 10835                           status	equ	0xFD8
 10836                           
 10837 ;; *************** function _DacInit *****************
 10838 ;; Defined at:
 10839 ;;		line 11 in file "DacApp.c"
 10840 ;; Parameters:    Size  Location     Type
 10841 ;;		None
 10842 ;; Auto vars:     Size  Location     Type
 10843 ;;  dacInput        2  106[BANK0 ] unsigned int 
 10844 ;;  idx             1  108[BANK0 ] char 
 10845 ;; Return value:  Size  Location     Type
 10846 ;;                  1    wreg      void 
 10847 ;; Registers used:
 10848 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10849 ;; Tracked objects:
 10850 ;;		On entry : 0/0
 10851 ;;		On exit  : 0/0
 10852 ;;		Unchanged: 0/0
 10853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10854 ;;      Params:         0       0       0       0       0       0       0
 10855 ;;      Locals:         0       3       0       0       0       0       0
 10856 ;;      Temps:          0       2       0       0       0       0       0
 10857 ;;      Totals:         0       5       0       0       0       0       0
 10858 ;;Total ram usage:        5 bytes
 10859 ;; Hardware stack levels used:    1
 10860 ;; Hardware stack levels required when called:   10
 10861 ;; This function calls:
 10862 ;;		_ReadIntFromEeprom
 10863 ;;		_SWSPI_send_word
 10864 ;;		_StoreIntInEeprom
 10865 ;; This function is called by:
 10866 ;;		_InitSystemApplicationManagers
 10867 ;; This function uses a non-reentrant model
 10868 ;;
 10869                           
 10870                           	psect	text58
 10871  0027DA                     __ptext58:
 10872                           	opt stack 0
 10873  0027DA                     _DacInit:
 10874                           	opt stack 19
 10875                           
 10876                           ;DacApp.c: 13: for(int8_t idx = 0; idx < (4); idx++)
 10877                           
 10878                           ;incstack = 0
 10879  0027DA  0E00               	movlw	0
 10880  0027DC  0100               	movlb	0	; () banked
 10881  0027DE  6FCC               	movwf	DacInit@idx& (0+255),b
 10882  0027E0                     l8552:
 10883                           
 10884                           ; BSR set to: 0
 10885  0027E0  51CC               	movf	DacInit@idx& (0+255),w,b
 10886  0027E2  0A80               	xorlw	128
 10887  0027E4  0F7C               	addlw	-132
 10888  0027E6  B0D8               	btfsc	status,0,c
 10889  0027E8  0012               	return	
 10890                           
 10891                           ; BSR set to: 0
 10892                           ;DacApp.c: 14: {
 10893                           ;DacApp.c: 15: uint16_t dacInput = ReadIntFromEeprom((0x40) | DAC_ADDRES[idx], 2);
 10894                           
 10895                           ; BSR set to: 0
 10896                           
 10897                           ; BSR set to: 0
 10898  0027EA  0E00               	movlw	0
 10899  0027EC  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 10900  0027EE  0E02               	movlw	2
 10901  0027F0  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 10902  0027F2  51CC               	movf	DacInit@idx& (0+255),w,b
 10903  0027F4  0D01               	mullw	1
 10904  0027F6  0E53               	movlw	low _DAC_ADDRES
 10905  0027F8  24F3               	addwf	prodl,w,c
 10906  0027FA  6EF6               	movwf	tblptrl,c
 10907  0027FC  0E06               	movlw	high _DAC_ADDRES
 10908  0027FE  20F4               	addwfc	prodh,w,c
 10909  002800  6EF7               	movwf	tblptrh,c
 10910  002802                     	if	0	;There are less than 3 active tblptr bytes
 10911  002802                     	endif
 10912  002802  0008               	tblrd		*
 10913  002804  50F5               	movf	tablat,w,c
 10914  002806  0940               	iorlw	64
 10915  002808  EC8A  F00F         	call	_ReadIntFromEeprom
 10916  00280C  C0B1  F0CA         	movff	?_ReadIntFromEeprom,DacInit@dacInput
 10917  002810  C0B2  F0CB         	movff	?_ReadIntFromEeprom+1,DacInit@dacInput+1
 10918                           
 10919                           ;DacApp.c: 16: if(dacInput == 0xFFFF)
 10920  002814  0100               	movlb	0	; () banked
 10921  002816  29CA               	incf	DacInit@dacInput& (0+255),w,b
 10922  002818  E144               	bnz	l8564
 10923  00281A  29CB               	incf	(DacInit@dacInput+1)& (0+255),w,b
 10924  00281C  A4D8               	btfss	status,2,c
 10925  00281E  D041               	goto	l411
 10926                           
 10927                           ; BSR set to: 0
 10928                           ;DacApp.c: 17: {
 10929                           ;DacApp.c: 18: SWSPI_send_word(EXT_DAC, DAC_DEFAULT_INIT_VALUES[idx], 1);
 10930  002820  51CC               	movf	DacInit@idx& (0+255),w,b
 10931  002822  0D02               	mullw	2
 10932  002824  0E4B               	movlw	low _DAC_DEFAULT_INIT_VALUES
 10933  002826  24F3               	addwf	prodl,w,c
 10934  002828  6EF6               	movwf	tblptrl,c
 10935  00282A  0E06               	movlw	high _DAC_DEFAULT_INIT_VALUES
 10936  00282C  20F4               	addwfc	prodh,w,c
 10937  00282E  6EF7               	movwf	tblptrh,c
 10938  002830                     	if	0	;There are less than 3 active tblptr bytes
 10939  002830                     	endif
 10940  002830  0009               	tblrd		*+
 10941  002832  CFF5 F0C8          	movff	tablat,??_DacInit
 10942  002836  0009               	tblrd		*+
 10943  002838  CFF5 F0C9          	movff	tablat,??_DacInit+1
 10944  00283C  C0C8  F029         	movff	??_DacInit,SWSPI_send_word@data
 10945  002840  C0C9  F02A         	movff	??_DacInit+1,SWSPI_send_word@data+1
 10946  002844  6A2B               	clrf	SWSPI_send_word@data+2,c
 10947  002846  6A2C               	clrf	SWSPI_send_word@data+3,c
 10948  002848  0E01               	movlw	1
 10949  00284A  6E2D               	movwf	SWSPI_send_word@dataSize,c
 10950  00284C  0E02               	movlw	2
 10951  00284E  EC67  F017         	call	_SWSPI_send_word
 10952                           
 10953                           ;DacApp.c: 19: StoreIntInEeprom(DAC_DEFAULT_INIT_VALUES[idx], (0x40) | DAC_ADDRES[idx], 
      +                          2);
 10954  002852  0100               	movlb	0	; () banked
 10955  002854  51CC               	movf	DacInit@idx& (0+255),w,b
 10956  002856  0D02               	mullw	2
 10957  002858  0E4B               	movlw	low _DAC_DEFAULT_INIT_VALUES
 10958  00285A  24F3               	addwf	prodl,w,c
 10959  00285C  6EF6               	movwf	tblptrl,c
 10960  00285E  0E06               	movlw	high _DAC_DEFAULT_INIT_VALUES
 10961  002860  20F4               	addwfc	prodh,w,c
 10962  002862  6EF7               	movwf	tblptrh,c
 10963  002864                     	if	0	;There are less than 3 active tblptr bytes
 10964  002864                     	endif
 10965  002864  0009               	tblrd		*+
 10966  002866  CFF5 F0C8          	movff	tablat,??_DacInit
 10967  00286A  0009               	tblrd		*+
 10968  00286C  CFF5 F0C9          	movff	tablat,??_DacInit+1
 10969  002870  C0C8  F021         	movff	??_DacInit,StoreIntInEeprom@data
 10970  002874  C0C9  F022         	movff	??_DacInit+1,StoreIntInEeprom@data+1
 10971  002878  6A23               	clrf	StoreIntInEeprom@data+2,c
 10972  00287A  6A24               	clrf	StoreIntInEeprom@data+3,c
 10973  00287C  51CC               	movf	DacInit@idx& (0+255),w,b
 10974  00287E  0D01               	mullw	1
 10975  002880  0E53               	movlw	low _DAC_ADDRES
 10976  002882  24F3               	addwf	prodl,w,c
 10977  002884  6EF6               	movwf	tblptrl,c
 10978  002886  0E06               	movlw	high _DAC_ADDRES
 10979  002888  20F4               	addwfc	prodh,w,c
 10980  00288A  6EF7               	movwf	tblptrh,c
 10981  00288C                     	if	0	;There are less than 3 active tblptr bytes
 10982  00288C                     	endif
 10983  00288C  0008               	tblrd		*
 10984  00288E  50F5               	movf	tablat,w,c
 10985  002890  0940               	iorlw	64
 10986  002892  6E25               	movwf	StoreIntInEeprom@address,c
 10987  002894  0E00               	movlw	0
 10988  002896  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
 10989  002898  0E02               	movlw	2
 10990  00289A  6E26               	movwf	StoreIntInEeprom@numOfByes,c
 10991  00289C  EC10  F01E         	call	_StoreIntInEeprom	;wreg free
 10992                           
 10993                           ;DacApp.c: 20: }
 10994  0028A0  D00B               	goto	l412
 10995  0028A2                     l411:
 10996  0028A2                     l8564:
 10997                           
 10998                           ;DacApp.c: 21: else
 10999                           ;DacApp.c: 22: {
 11000                           ;DacApp.c: 23: SWSPI_send_word(EXT_DAC, dacInput, 1);
 11001  0028A2  C0CA  F029         	movff	DacInit@dacInput,SWSPI_send_word@data
 11002  0028A6  C0CB  F02A         	movff	DacInit@dacInput+1,SWSPI_send_word@data+1
 11003  0028AA  6A2B               	clrf	SWSPI_send_word@data+2,c
 11004  0028AC  6A2C               	clrf	SWSPI_send_word@data+3,c
 11005  0028AE  0E01               	movlw	1
 11006  0028B0  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11007  0028B2  0E02               	movlw	2
 11008  0028B4  EC67  F017         	call	_SWSPI_send_word
 11009  0028B8                     l412:
 11010  0028B8  0100               	movlb	0	; () banked
 11011  0028BA  2BCC               	incf	DacInit@idx& (0+255),f,b
 11012  0028BC  D791               	goto	l8552
 11013  0028BE                     __end_of_DacInit:
 11014                           	opt stack 0
 11015                           tosu	equ	0xFFF
 11016                           tosh	equ	0xFFE
 11017                           tosl	equ	0xFFD
 11018                           pclath	equ	0xFFA
 11019                           tblptru	equ	0xFF8
 11020                           tblptrh	equ	0xFF7
 11021                           tblptrl	equ	0xFF6
 11022                           tablat	equ	0xFF5
 11023                           prodh	equ	0xFF4
 11024                           prodl	equ	0xFF3
 11025                           intcon	equ	0xFF2
 11026                           intcon2	equ	0xFF1
 11027                           postinc0	equ	0xFEE
 11028                           plusw0	equ	0xFEB
 11029                           wreg	equ	0xFE8
 11030                           indf1	equ	0xFE7
 11031                           postdec1	equ	0xFE5
 11032                           fsr1h	equ	0xFE2
 11033                           fsr1l	equ	0xFE1
 11034                           indf2	equ	0xFDF
 11035                           postinc2	equ	0xFDE
 11036                           postdec2	equ	0xFDD
 11037                           plusw2	equ	0xFDB
 11038                           fsr2h	equ	0xFDA
 11039                           fsr2l	equ	0xFD9
 11040                           status	equ	0xFD8
 11041                           
 11042 ;; *************** function _StoreIntInEeprom *****************
 11043 ;; Defined at:
 11044 ;;		line 122 in file "SystemCommon.c"
 11045 ;; Parameters:    Size  Location     Type
 11046 ;;  data            4   32[COMRAM] unsigned long 
 11047 ;;  address         1   36[COMRAM] unsigned char 
 11048 ;;  numOfByes       2   37[COMRAM] int 
 11049 ;; Auto vars:     Size  Location     Type
 11050 ;;  val             1   39[COMRAM] unsigned char 
 11051 ;;  idx             1   40[COMRAM] unsigned char 
 11052 ;; Return value:  Size  Location     Type
 11053 ;;                  1    wreg      void 
 11054 ;; Registers used:
 11055 ;;		wreg, status,2, status,0, cstack
 11056 ;; Tracked objects:
 11057 ;;		On entry : 0/0
 11058 ;;		On exit  : 0/0
 11059 ;;		Unchanged: 0/0
 11060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11061 ;;      Params:         7       0       0       0       0       0       0
 11062 ;;      Locals:         2       0       0       0       0       0       0
 11063 ;;      Temps:          0       0       0       0       0       0       0
 11064 ;;      Totals:         9       0       0       0       0       0       0
 11065 ;;Total ram usage:        9 bytes
 11066 ;; Hardware stack levels used:    1
 11067 ;; Hardware stack levels required when called:    6
 11068 ;; This function calls:
 11069 ;;		_EepromWrite
 11070 ;;		_make8
 11071 ;; This function is called by:
 11072 ;;		_DacInit
 11073 ;;		_DacSetValue
 11074 ;;		_InitSynth
 11075 ;;		_UpdateSynthFreq
 11076 ;; This function uses a non-reentrant model
 11077 ;;
 11078                           
 11079                           	psect	text59
 11080  003C20                     __ptext59:
 11081                           	opt stack 0
 11082  003C20                     _StoreIntInEeprom:
 11083                           	opt stack 21
 11084                           
 11085                           ;SystemCommon.c: 124: for(uint8_t idx = numOfByes; idx; idx--)
 11086                           
 11087                           ; BSR set to: 0
 11088                           ;incstack = 0
 11089  003C20  C026  F029         	movff	StoreIntInEeprom@numOfByes,StoreIntInEeprom@idx
 11090  003C24  D015               	goto	l1433
 11091  003C26                     
 11092                           ;SystemCommon.c: 125: {
 11093                           ;SystemCommon.c: 126: uint8_t val = make8(data, idx - 1);
 11094  003C26  C021  F018         	movff	StoreIntInEeprom@data,make8@data
 11095  003C2A  C022  F019         	movff	StoreIntInEeprom@data+1,make8@data+1
 11096  003C2E  C023  F01A         	movff	StoreIntInEeprom@data+2,make8@data+2
 11097  003C32  C024  F01B         	movff	StoreIntInEeprom@data+3,make8@data+3
 11098  003C36  0429               	decf	StoreIntInEeprom@idx,w,c
 11099  003C38  6E1C               	movwf	make8@dataLocation,c
 11100  003C3A  EC48  F01B         	call	_make8	;wreg free
 11101  003C3E  6E28               	movwf	StoreIntInEeprom@val,c
 11102                           
 11103                           ;SystemCommon.c: 127: EepromWrite(address - idx, val);
 11104  003C40  C028  F01B         	movff	StoreIntInEeprom@val,EepromWrite@data
 11105  003C44  5029               	movf	StoreIntInEeprom@idx,w,c
 11106  003C46  0800               	sublw	0
 11107  003C48  2425               	addwf	StoreIntInEeprom@address,w,c
 11108  003C4A  ECEA  F020         	call	_EepromWrite
 11109  003C4E  0629               	decf	StoreIntInEeprom@idx,f,c
 11110  003C50                     l1433:
 11111  003C50  5029               	movf	StoreIntInEeprom@idx,w,c
 11112  003C52  B4D8               	btfsc	status,2,c
 11113  003C54  0012               	return	
 11114  003C56  D7E7               	goto	l1434
 11115  003C58                     __end_of_StoreIntInEeprom:
 11116                           	opt stack 0
 11117                           tosu	equ	0xFFF
 11118                           tosh	equ	0xFFE
 11119                           tosl	equ	0xFFD
 11120                           pclath	equ	0xFFA
 11121                           tblptru	equ	0xFF8
 11122                           tblptrh	equ	0xFF7
 11123                           tblptrl	equ	0xFF6
 11124                           tablat	equ	0xFF5
 11125                           prodh	equ	0xFF4
 11126                           prodl	equ	0xFF3
 11127                           intcon	equ	0xFF2
 11128                           intcon2	equ	0xFF1
 11129                           postinc0	equ	0xFEE
 11130                           plusw0	equ	0xFEB
 11131                           wreg	equ	0xFE8
 11132                           indf1	equ	0xFE7
 11133                           postdec1	equ	0xFE5
 11134                           fsr1h	equ	0xFE2
 11135                           fsr1l	equ	0xFE1
 11136                           indf2	equ	0xFDF
 11137                           postinc2	equ	0xFDE
 11138                           postdec2	equ	0xFDD
 11139                           plusw2	equ	0xFDB
 11140                           fsr2h	equ	0xFDA
 11141                           fsr2l	equ	0xFD9
 11142                           status	equ	0xFD8
 11143                           
 11144 ;; *************** function _EepromWrite *****************
 11145 ;; Defined at:
 11146 ;;		line 180 in file "FlashApp.c"
 11147 ;; Parameters:    Size  Location     Type
 11148 ;;  address         1    wreg     unsigned char 
 11149 ;;  data            1   26[COMRAM] unsigned char 
 11150 ;; Auto vars:     Size  Location     Type
 11151 ;;  address         1   27[COMRAM] unsigned char 
 11152 ;; Return value:  Size  Location     Type
 11153 ;;                  1    wreg      void 
 11154 ;; Registers used:
 11155 ;;		wreg, status,2, cstack
 11156 ;; Tracked objects:
 11157 ;;		On entry : 0/0
 11158 ;;		On exit  : 0/0
 11159 ;;		Unchanged: 0/0
 11160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11161 ;;      Params:         1       0       0       0       0       0       0
 11162 ;;      Locals:         1       0       0       0       0       0       0
 11163 ;;      Temps:          0       0       0       0       0       0       0
 11164 ;;      Totals:         2       0       0       0       0       0       0
 11165 ;;Total ram usage:        2 bytes
 11166 ;; Hardware stack levels used:    1
 11167 ;; Hardware stack levels required when called:    5
 11168 ;; This function calls:
 11169 ;;		_DATAEE_WriteByte
 11170 ;; This function is called by:
 11171 ;;		_StoreIntInEeprom
 11172 ;; This function uses a non-reentrant model
 11173 ;;
 11174                           
 11175                           	psect	text60
 11176  0041D4                     __ptext60:
 11177                           	opt stack 0
 11178  0041D4                     _EepromWrite:
 11179                           	opt stack 21
 11180                           
 11181                           ;incstack = 0
 11182                           ;EepromWrite@address stored from wreg
 11183  0041D4  6E1C               	movwf	EepromWrite@address,c
 11184                           
 11185                           ;FlashApp.c: 182: DATAEE_WriteByte(address, data);
 11186  0041D6  C01B  F018         	movff	EepromWrite@data,DATAEE_WriteByte@bData
 11187  0041DA  501C               	movf	EepromWrite@address,w,c
 11188  0041DC  EC7E  F01E         	call	_DATAEE_WriteByte
 11189  0041E0  0012               	return		;funcret
 11190  0041E2                     __end_of_EepromWrite:
 11191                           	opt stack 0
 11192                           tosu	equ	0xFFF
 11193                           tosh	equ	0xFFE
 11194                           tosl	equ	0xFFD
 11195                           pclath	equ	0xFFA
 11196                           tblptru	equ	0xFF8
 11197                           tblptrh	equ	0xFF7
 11198                           tblptrl	equ	0xFF6
 11199                           tablat	equ	0xFF5
 11200                           prodh	equ	0xFF4
 11201                           prodl	equ	0xFF3
 11202                           intcon	equ	0xFF2
 11203                           intcon2	equ	0xFF1
 11204                           postinc0	equ	0xFEE
 11205                           plusw0	equ	0xFEB
 11206                           wreg	equ	0xFE8
 11207                           indf1	equ	0xFE7
 11208                           postdec1	equ	0xFE5
 11209                           fsr1h	equ	0xFE2
 11210                           fsr1l	equ	0xFE1
 11211                           indf2	equ	0xFDF
 11212                           postinc2	equ	0xFDE
 11213                           postdec2	equ	0xFDD
 11214                           plusw2	equ	0xFDB
 11215                           fsr2h	equ	0xFDA
 11216                           fsr2l	equ	0xFD9
 11217                           status	equ	0xFD8
 11218                           
 11219 ;; *************** function _DATAEE_WriteByte *****************
 11220 ;; Defined at:
 11221 ;;		line 167 in file "mcc_generated_files/memory.c"
 11222 ;; Parameters:    Size  Location     Type
 11223 ;;  bAdd            1    wreg     unsigned char 
 11224 ;;  bData           1   23[COMRAM] unsigned char 
 11225 ;; Auto vars:     Size  Location     Type
 11226 ;;  bAdd            1   24[COMRAM] unsigned char 
 11227 ;;  GIEBitValue     1   25[COMRAM] unsigned char 
 11228 ;; Return value:  Size  Location     Type
 11229 ;;                  1    wreg      void 
 11230 ;; Registers used:
 11231 ;;		wreg, status,2
 11232 ;; Tracked objects:
 11233 ;;		On entry : 0/0
 11234 ;;		On exit  : 0/0
 11235 ;;		Unchanged: 0/0
 11236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11237 ;;      Params:         1       0       0       0       0       0       0
 11238 ;;      Locals:         2       0       0       0       0       0       0
 11239 ;;      Temps:          0       0       0       0       0       0       0
 11240 ;;      Totals:         3       0       0       0       0       0       0
 11241 ;;Total ram usage:        3 bytes
 11242 ;; Hardware stack levels used:    1
 11243 ;; Hardware stack levels required when called:    4
 11244 ;; This function calls:
 11245 ;;		Nothing
 11246 ;; This function is called by:
 11247 ;;		_EepromWrite
 11248 ;; This function uses a non-reentrant model
 11249 ;;
 11250                           
 11251                           	psect	text61
 11252  003CFC                     __ptext61:
 11253                           	opt stack 0
 11254  003CFC                     _DATAEE_WriteByte:
 11255                           	opt stack 21
 11256                           
 11257                           ;incstack = 0
 11258                           ;DATAEE_WriteByte@bAdd stored from wreg
 11259  003CFC  6E19               	movwf	DATAEE_WriteByte@bAdd,c
 11260                           
 11261                           ;memory.c: 169: uint8_t GIEBitValue = INTCONbits.GIE;
 11262  003CFE  0E00               	movlw	0
 11263  003D00  BEF2               	btfsc	intcon,7,c	;volatile
 11264  003D02  0E01               	movlw	1
 11265  003D04  6E1A               	movwf	DATAEE_WriteByte@GIEBitValue,c
 11266                           
 11267                           ;memory.c: 171: EEADR = (bAdd & 0xFF);
 11268  003D06  C019  FFA9         	movff	DATAEE_WriteByte@bAdd,4009	;volatile
 11269                           
 11270                           ;memory.c: 172: EEDATA = bData;
 11271  003D0A  C018  FFA8         	movff	DATAEE_WriteByte@bData,4008	;volatile
 11272                           
 11273                           ;memory.c: 173: EECON1bits.EEPGD = 0;
 11274  003D0E  9EA6               	bcf	4006,7,c	;volsfr
 11275                           
 11276                           ;memory.c: 174: EECON1bits.CFGS = 0;
 11277  003D10  9CA6               	bcf	4006,6,c	;volsfr
 11278                           
 11279                           ;memory.c: 175: EECON1bits.WREN = 1;
 11280  003D12  84A6               	bsf	4006,2,c	;volsfr
 11281                           
 11282                           ;memory.c: 176: INTCONbits.GIE = 0;
 11283  003D14  9EF2               	bcf	intcon,7,c	;volatile
 11284                           
 11285                           ;memory.c: 177: EECON2 = 0x55;
 11286  003D16  0E55               	movlw	85
 11287  003D18  6EA7               	movwf	4007,c	;volsfr
 11288                           
 11289                           ;memory.c: 178: EECON2 = 0xAA;
 11290  003D1A  0EAA               	movlw	170
 11291  003D1C  6EA7               	movwf	4007,c	;volsfr
 11292                           
 11293                           ;memory.c: 179: EECON1bits.WR = 1;
 11294  003D1E  82A6               	bsf	4006,1,c	;volsfr
 11295  003D20                     
 11296                           ;memory.c: 182: {
 11297  003D20  B2A6               	btfsc	4006,1,c	;volsfr
 11298  003D22  D7FE               	goto	l1055
 11299                           
 11300                           ;memory.c: 183: }
 11301                           ;memory.c: 185: EECON1bits.WREN = 0;
 11302  003D24  94A6               	bcf	4006,2,c	;volsfr
 11303                           
 11304                           ;memory.c: 186: INTCONbits.GIE = GIEBitValue;
 11305  003D26  B01A               	btfsc	DATAEE_WriteByte@GIEBitValue,0,c
 11306  003D28  D002               	bra	u7035
 11307  003D2A  9EF2               	bcf	intcon,7,c	;volatile
 11308  003D2C  D001               	bra	u7036
 11309  003D2E                     u7035:
 11310  003D2E  8EF2               	bsf	intcon,7,c	;volatile
 11311  003D30                     u7036:
 11312  003D30  0012               	return		;funcret
 11313  003D32                     __end_of_DATAEE_WriteByte:
 11314                           	opt stack 0
 11315                           tosu	equ	0xFFF
 11316                           tosh	equ	0xFFE
 11317                           tosl	equ	0xFFD
 11318                           pclath	equ	0xFFA
 11319                           tblptru	equ	0xFF8
 11320                           tblptrh	equ	0xFF7
 11321                           tblptrl	equ	0xFF6
 11322                           tablat	equ	0xFF5
 11323                           prodh	equ	0xFF4
 11324                           prodl	equ	0xFF3
 11325                           intcon	equ	0xFF2
 11326                           intcon2	equ	0xFF1
 11327                           postinc0	equ	0xFEE
 11328                           plusw0	equ	0xFEB
 11329                           wreg	equ	0xFE8
 11330                           indf1	equ	0xFE7
 11331                           postdec1	equ	0xFE5
 11332                           fsr1h	equ	0xFE2
 11333                           fsr1l	equ	0xFE1
 11334                           indf2	equ	0xFDF
 11335                           postinc2	equ	0xFDE
 11336                           postdec2	equ	0xFDD
 11337                           plusw2	equ	0xFDB
 11338                           fsr2h	equ	0xFDA
 11339                           fsr2l	equ	0xFD9
 11340                           status	equ	0xFD8
 11341                           
 11342 ;; *************** function _SWSPI_send_word *****************
 11343 ;; Defined at:
 11344 ;;		line 17 in file "SwSpiApp.c"
 11345 ;; Parameters:    Size  Location     Type
 11346 ;;  phrType         1    wreg     enum E1
 11347 ;;  data            4   40[COMRAM] unsigned long 
 11348 ;;  dataSize        1   44[COMRAM] unsigned char 
 11349 ;; Auto vars:     Size  Location     Type
 11350 ;;  phrType         1   41[BANK0 ] enum E1
 11351 ;;  datac           1   38[BANK0 ] unsigned char 
 11352 ;;  idx             2   39[BANK0 ] int 
 11353 ;; Return value:  Size  Location     Type
 11354 ;;                  1    wreg      void 
 11355 ;; Registers used:
 11356 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11357 ;; Tracked objects:
 11358 ;;		On entry : 0/0
 11359 ;;		On exit  : 0/0
 11360 ;;		Unchanged: 0/0
 11361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11362 ;;      Params:         5       0       0       0       0       0       0
 11363 ;;      Locals:         0       4       0       0       0       0       0
 11364 ;;      Temps:          0       0       0       0       0       0       0
 11365 ;;      Totals:         5       4       0       0       0       0       0
 11366 ;;Total ram usage:        9 bytes
 11367 ;; Hardware stack levels used:    1
 11368 ;; Hardware stack levels required when called:    7
 11369 ;; This function calls:
 11370 ;;		_SWSPI_DAC_send_bits
 11371 ;;		_SWSPI_Synth_send_bits
 11372 ;;		_SwSpi_Set_Dac_Sync_Pin
 11373 ;;		_SwSpi_Set_Synth_Le_Pin
 11374 ;;		_make8
 11375 ;; This function is called by:
 11376 ;;		_DacInit
 11377 ;;		_DacSetValue
 11378 ;;		_InitSynth
 11379 ;;		_UpdateSynthFreq
 11380 ;; This function uses a non-reentrant model
 11381 ;;
 11382                           
 11383                           	psect	text62
 11384  002ECE                     __ptext62:
 11385                           	opt stack 0
 11386  002ECE                     _SWSPI_send_word:
 11387                           	opt stack 20
 11388                           
 11389                           ;incstack = 0
 11390                           ;SWSPI_send_word@phrType stored from wreg
 11391  002ECE  0100               	movlb	0	; () banked
 11392  002ED0  6F89               	movwf	SWSPI_send_word@phrType& (0+255),b
 11393                           
 11394                           ;SwSpiApp.c: 19: (INTCONbits.GIE = 0);
 11395  002ED2  9EF2               	bcf	intcon,7,c	;volatile
 11396                           
 11397                           ;SwSpiApp.c: 23: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
 11398  002ED4  0100               	movlb	0	; () banked
 11399  002ED6  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 11400  002ED8  B4D8               	btfsc	status,2,c
 11401  002EDA  D003               	goto	u7660
 11402                           
 11403                           ; BSR set to: 0
 11404  002EDC  0589               	decf	SWSPI_send_word@phrType& (0+255),w,b
 11405  002EDE  A4D8               	btfss	status,2,c
 11406  002EE0  D018               	goto	l631
 11407  002EE2                     u7660:
 11408                           
 11409                           ; BSR set to: 0
 11410                           ;SwSpiApp.c: 24: {
 11411                           ;SwSpiApp.c: 25: SwSpi_Set_Synth_Le_Pin(phrType, 0);
 11412                           
 11413                           ; BSR set to: 0
 11414  002EE2  0E00               	movlw	0
 11415  002EE4  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 11416  002EE6  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 11417  002EE8  ECB9  F01D         	call	_SwSpi_Set_Synth_Le_Pin
 11418                           
 11419                           ;SwSpiApp.c: 26: SWSPI_Synth_send_bits(phrType, data);
 11420  002EEC  C029  F025         	movff	SWSPI_send_word@data,SWSPI_Synth_send_bits@data
 11421  002EF0  C02A  F026         	movff	SWSPI_send_word@data+1,SWSPI_Synth_send_bits@data+1
 11422  002EF4  C02B  F027         	movff	SWSPI_send_word@data+2,SWSPI_Synth_send_bits@data+2
 11423  002EF8  C02C  F028         	movff	SWSPI_send_word@data+3,SWSPI_Synth_send_bits@data+3
 11424  002EFC  0100               	movlb	0	; () banked
 11425  002EFE  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 11426  002F00  ECA2  F015         	call	_SWSPI_Synth_send_bits
 11427                           
 11428                           ;SwSpiApp.c: 27: SwSpi_Set_Synth_Le_Pin(phrType, 1);
 11429  002F04  0E01               	movlw	1
 11430  002F06  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 11431  002F08  0100               	movlb	0	; () banked
 11432  002F0A  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 11433  002F0C  ECB9  F01D         	call	_SwSpi_Set_Synth_Le_Pin
 11434                           
 11435                           ;SwSpiApp.c: 28: }
 11436  002F10  D031               	goto	l635
 11437  002F12                     l631:
 11438                           
 11439                           ;SwSpiApp.c: 29: else if(phrType == EXT_DAC)
 11440  002F12  0E02               	movlw	2
 11441  002F14  0100               	movlb	0	; () banked
 11442  002F16  1989               	xorwf	SWSPI_send_word@phrType& (0+255),w,b
 11443  002F18  A4D8               	btfss	status,2,c
 11444  002F1A  D02C               	goto	l635
 11445                           
 11446                           ; BSR set to: 0
 11447                           ;SwSpiApp.c: 30: {
 11448                           ;SwSpiApp.c: 31: SwSpi_Set_Dac_Sync_Pin(0);
 11449  002F1C  0E00               	movlw	0
 11450  002F1E  EC5A  F020         	call	_SwSpi_Set_Dac_Sync_Pin
 11451                           
 11452                           ;SwSpiApp.c: 32: for(int idx = dataSize + 1; idx > 0; idx--)
 11453  002F22  0E01               	movlw	1
 11454  002F24  242D               	addwf	SWSPI_send_word@dataSize,w,c
 11455  002F26  0100               	movlb	0	; () banked
 11456  002F28  6F87               	movwf	SWSPI_send_word@idx& (0+255),b
 11457  002F2A  6B88               	clrf	(SWSPI_send_word@idx+1)& (0+255),b
 11458  002F2C  0E00               	movlw	0
 11459  002F2E  2388               	addwfc	(SWSPI_send_word@idx+1)& (0+255),f,b
 11460  002F30                     l7804:
 11461                           
 11462                           ; BSR set to: 0
 11463  002F30  BF88               	btfsc	(SWSPI_send_word@idx+1)& (0+255),7,b
 11464  002F32  D01D               	goto	u7690
 11465  002F34  5188               	movf	(SWSPI_send_word@idx+1)& (0+255),w,b
 11466  002F36  E103               	bnz	l7808
 11467  002F38  0587               	decf	SWSPI_send_word@idx& (0+255),w,b
 11468  002F3A  A0D8               	btfss	status,0,c
 11469  002F3C  D018               	goto	u7690
 11470  002F3E                     l7808:
 11471                           
 11472                           ; BSR set to: 0
 11473                           ;SwSpiApp.c: 33: {
 11474                           ;SwSpiApp.c: 34: uint8_t datac = make8(data, idx - 1);
 11475  002F3E  C029  F018         	movff	SWSPI_send_word@data,make8@data
 11476  002F42  C02A  F019         	movff	SWSPI_send_word@data+1,make8@data+1
 11477  002F46  C02B  F01A         	movff	SWSPI_send_word@data+2,make8@data+2
 11478  002F4A  C02C  F01B         	movff	SWSPI_send_word@data+3,make8@data+3
 11479  002F4E  0587               	decf	SWSPI_send_word@idx& (0+255),w,b
 11480  002F50  6E1C               	movwf	make8@dataLocation,c
 11481  002F52  EC48  F01B         	call	_make8	;wreg free
 11482  002F56  0100               	movlb	0	; () banked
 11483  002F58  6F86               	movwf	SWSPI_send_word@datac& (0+255),b
 11484                           
 11485                           ;SwSpiApp.c: 35: SWSPI_DAC_send_bits(phrType, datac);
 11486  002F5A  C086  F01A         	movff	SWSPI_send_word@datac,SWSPI_DAC_send_bits@data
 11487  002F5E  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 11488  002F60  ECD0  F01B         	call	_SWSPI_DAC_send_bits
 11489  002F64  0100               	movlb	0	; () banked
 11490  002F66  0787               	decf	SWSPI_send_word@idx& (0+255),f,b
 11491  002F68  A0D8               	btfss	status,0,c
 11492  002F6A  0788               	decf	(SWSPI_send_word@idx+1)& (0+255),f,b
 11493  002F6C  D7E1               	goto	l7804
 11494  002F6E                     u7690:
 11495                           
 11496                           ; BSR set to: 0
 11497                           ;SwSpiApp.c: 36: }
 11498                           ;SwSpiApp.c: 37: SwSpi_Set_Dac_Sync_Pin(1);
 11499                           
 11500                           ; BSR set to: 0
 11501  002F6E  0E01               	movlw	1
 11502  002F70  EC5A  F020         	call	_SwSpi_Set_Dac_Sync_Pin
 11503  002F74                     l635:
 11504                           
 11505                           ;SwSpiApp.c: 38: }
 11506                           ;SwSpiApp.c: 40: (INTCONbits.GIE = 1);
 11507  002F74  8EF2               	bsf	intcon,7,c	;volatile
 11508  002F76  0012               	return		;funcret
 11509  002F78                     __end_of_SWSPI_send_word:
 11510                           	opt stack 0
 11511                           tosu	equ	0xFFF
 11512                           tosh	equ	0xFFE
 11513                           tosl	equ	0xFFD
 11514                           pclath	equ	0xFFA
 11515                           tblptru	equ	0xFF8
 11516                           tblptrh	equ	0xFF7
 11517                           tblptrl	equ	0xFF6
 11518                           tablat	equ	0xFF5
 11519                           prodh	equ	0xFF4
 11520                           prodl	equ	0xFF3
 11521                           intcon	equ	0xFF2
 11522                           intcon2	equ	0xFF1
 11523                           postinc0	equ	0xFEE
 11524                           plusw0	equ	0xFEB
 11525                           wreg	equ	0xFE8
 11526                           indf1	equ	0xFE7
 11527                           postdec1	equ	0xFE5
 11528                           fsr1h	equ	0xFE2
 11529                           fsr1l	equ	0xFE1
 11530                           indf2	equ	0xFDF
 11531                           postinc2	equ	0xFDE
 11532                           postdec2	equ	0xFDD
 11533                           plusw2	equ	0xFDB
 11534                           fsr2h	equ	0xFDA
 11535                           fsr2l	equ	0xFD9
 11536                           status	equ	0xFD8
 11537                           
 11538 ;; *************** function _make8 *****************
 11539 ;; Defined at:
 11540 ;;		line 92 in file "SystemCommon.c"
 11541 ;; Parameters:    Size  Location     Type
 11542 ;;  data            4   23[COMRAM] unsigned long 
 11543 ;;  dataLocation    1   27[COMRAM] unsigned char 
 11544 ;; Auto vars:     Size  Location     Type
 11545 ;;		None
 11546 ;; Return value:  Size  Location     Type
 11547 ;;                  1    wreg      unsigned char 
 11548 ;; Registers used:
 11549 ;;		wreg, status,2, status,0
 11550 ;; Tracked objects:
 11551 ;;		On entry : 0/0
 11552 ;;		On exit  : 0/0
 11553 ;;		Unchanged: 0/0
 11554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11555 ;;      Params:         5       0       0       0       0       0       0
 11556 ;;      Locals:         0       0       0       0       0       0       0
 11557 ;;      Temps:          4       0       0       0       0       0       0
 11558 ;;      Totals:         9       0       0       0       0       0       0
 11559 ;;Total ram usage:        9 bytes
 11560 ;; Hardware stack levels used:    1
 11561 ;; Hardware stack levels required when called:    4
 11562 ;; This function calls:
 11563 ;;		Nothing
 11564 ;; This function is called by:
 11565 ;;		_FlashReadCondition
 11566 ;;		_DacReadValue
 11567 ;;		_SynthReadData
 11568 ;;		_SWSPI_send_word
 11569 ;;		_StoreIntInEeprom
 11570 ;; This function uses a non-reentrant model
 11571 ;;
 11572                           
 11573                           	psect	text63
 11574  003690                     __ptext63:
 11575                           	opt stack 0
 11576  003690                     _make8:
 11577                           	opt stack 22
 11578                           
 11579                           ;SystemCommon.c: 94: switch(dataLocation)
 11580                           
 11581                           ;incstack = 0
 11582  003690  D01F               	goto	l1418
 11583  003692                     
 11584                           ;SystemCommon.c: 97: return (data & 0x000000ff);
 11585  003692  5018               	movf	make8@data,w,c
 11586  003694  0012               	return	
 11587  003696                     
 11588                           ;SystemCommon.c: 100: return (data & 0x0000ff00) >> 8;
 11589  003696  5019               	movf	make8@data+1,w,c
 11590  003698  0012               	return	
 11591  00369A                     
 11592                           ;SystemCommon.c: 103: return (data & 0x00ff0000) >> 16;
 11593  00369A  501A               	movf	make8@data+2,w,c
 11594  00369C  0012               	return	
 11595  00369E                     
 11596                           ;SystemCommon.c: 106: return (data & 0xff000000) >> 24;
 11597  00369E  0E00               	movlw	0
 11598  0036A0  1418               	andwf	make8@data,w,c
 11599  0036A2  6E1D               	movwf	??_make8& (0+255),c
 11600  0036A4  0E00               	movlw	0
 11601  0036A6  1419               	andwf	make8@data+1,w,c
 11602  0036A8  6E1E               	movwf	(??_make8+1)& (0+255),c
 11603  0036AA  0E00               	movlw	0
 11604  0036AC  141A               	andwf	make8@data+2,w,c
 11605  0036AE  6E1F               	movwf	(??_make8+2)& (0+255),c
 11606  0036B0  0EFF               	movlw	255
 11607  0036B2  141B               	andwf	make8@data+3,w,c
 11608  0036B4  6E20               	movwf	(??_make8+3)& (0+255),c
 11609  0036B6  0E19               	movlw	25
 11610  0036B8  D005               	goto	u7400
 11611  0036BA                     u7405:
 11612  0036BA  90D8               	bcf	status,0,c
 11613  0036BC  3220               	rrcf	??_make8+3,f,c
 11614  0036BE  321F               	rrcf	??_make8+2,f,c
 11615  0036C0  321E               	rrcf	??_make8+1,f,c
 11616  0036C2  321D               	rrcf	??_make8,f,c
 11617  0036C4                     u7400:
 11618  0036C4  2EE8               	decfsz	wreg,f,c
 11619  0036C6  D7F9               	goto	u7405
 11620  0036C8  501D               	movf	??_make8,w,c
 11621  0036CA  0012               	return	
 11622  0036CC                     
 11623                           ;SystemCommon.c: 109: return (0);
 11624  0036CC  0E00               	movlw	0
 11625                           
 11626                           ;SystemCommon.c: 110: }
 11627  0036CE  0012               	return	
 11628  0036D0                     l1418:
 11629  0036D0  501C               	movf	make8@dataLocation,w,c
 11630                           
 11631                           ; Switch size 1, requested type "space"
 11632                           ; Number of cases is 4, Range of values is 0 to 3
 11633                           ; switch strategies available:
 11634                           ; Name         Instructions Cycles
 11635                           ; simple_byte           13     7 (average)
 11636                           ;	Chosen strategy is simple_byte
 11637  0036D2  0A00               	xorlw	0	; case 0
 11638  0036D4  B4D8               	btfsc	status,2,c
 11639  0036D6  D7DD               	goto	l1419
 11640  0036D8  0A01               	xorlw	1	; case 1
 11641  0036DA  B4D8               	btfsc	status,2,c
 11642  0036DC  D7DC               	goto	l1421
 11643  0036DE  0A03               	xorlw	3	; case 2
 11644  0036E0  B4D8               	btfsc	status,2,c
 11645  0036E2  D7DB               	goto	l1422
 11646  0036E4  0A01               	xorlw	1	; case 3
 11647  0036E6  B4D8               	btfsc	status,2,c
 11648  0036E8  D7DA               	goto	l1423
 11649  0036EA  D7F0               	goto	l1424
 11650  0036EC                     __end_of_make8:
 11651                           	opt stack 0
 11652                           tosu	equ	0xFFF
 11653                           tosh	equ	0xFFE
 11654                           tosl	equ	0xFFD
 11655                           pclath	equ	0xFFA
 11656                           tblptru	equ	0xFF8
 11657                           tblptrh	equ	0xFF7
 11658                           tblptrl	equ	0xFF6
 11659                           tablat	equ	0xFF5
 11660                           prodh	equ	0xFF4
 11661                           prodl	equ	0xFF3
 11662                           intcon	equ	0xFF2
 11663                           intcon2	equ	0xFF1
 11664                           postinc0	equ	0xFEE
 11665                           plusw0	equ	0xFEB
 11666                           wreg	equ	0xFE8
 11667                           indf1	equ	0xFE7
 11668                           postdec1	equ	0xFE5
 11669                           fsr1h	equ	0xFE2
 11670                           fsr1l	equ	0xFE1
 11671                           indf2	equ	0xFDF
 11672                           postinc2	equ	0xFDE
 11673                           postdec2	equ	0xFDD
 11674                           plusw2	equ	0xFDB
 11675                           fsr2h	equ	0xFDA
 11676                           fsr2l	equ	0xFD9
 11677                           status	equ	0xFD8
 11678                           
 11679 ;; *************** function _SwSpi_Set_Synth_Le_Pin *****************
 11680 ;; Defined at:
 11681 ;;		line 232 in file "SwSpiApp.c"
 11682 ;; Parameters:    Size  Location     Type
 11683 ;;  phrType         1    wreg     enum E1
 11684 ;;  cPinMode        1   23[COMRAM] unsigned char 
 11685 ;; Auto vars:     Size  Location     Type
 11686 ;;  phrType         1   24[COMRAM] enum E1
 11687 ;; Return value:  Size  Location     Type
 11688 ;;                  1    wreg      void 
 11689 ;; Registers used:
 11690 ;;		wreg, status,2, status,0
 11691 ;; Tracked objects:
 11692 ;;		On entry : 0/0
 11693 ;;		On exit  : 0/0
 11694 ;;		Unchanged: 0/0
 11695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11696 ;;      Params:         1       0       0       0       0       0       0
 11697 ;;      Locals:         1       0       0       0       0       0       0
 11698 ;;      Temps:          0       0       0       0       0       0       0
 11699 ;;      Totals:         2       0       0       0       0       0       0
 11700 ;;Total ram usage:        2 bytes
 11701 ;; Hardware stack levels used:    1
 11702 ;; Hardware stack levels required when called:    4
 11703 ;; This function calls:
 11704 ;;		Nothing
 11705 ;; This function is called by:
 11706 ;;		_SWSPI_send_word
 11707 ;; This function uses a non-reentrant model
 11708 ;;
 11709                           
 11710                           	psect	text64
 11711  003B72                     __ptext64:
 11712                           	opt stack 0
 11713  003B72                     _SwSpi_Set_Synth_Le_Pin:
 11714                           	opt stack 22
 11715                           
 11716                           ;incstack = 0
 11717                           ;SwSpi_Set_Synth_Le_Pin@phrType stored from wreg
 11718  003B72  6E19               	movwf	SwSpi_Set_Synth_Le_Pin@phrType,c
 11719                           
 11720                           ;SwSpiApp.c: 234: switch(phrType)
 11721  003B74  D014               	goto	l743
 11722  003B76                     
 11723                           ;SwSpiApp.c: 237: if(cPinMode == 1)
 11724  003B76  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 11725  003B78  A4D8               	btfss	status,2,c
 11726  003B7A  D002               	goto	l745
 11727                           
 11728                           ;SwSpiApp.c: 238: {
 11729                           ;SwSpiApp.c: 239: do { LATCbits.LATC2 = 1; } while(0);
 11730  003B7C  848B               	bsf	3979,2,c	;volatile
 11731                           
 11732                           ;SwSpiApp.c: 240: }
 11733  003B7E  0012               	return	
 11734  003B80                     l745:
 11735                           
 11736                           ;SwSpiApp.c: 241: else if(cPinMode == 0)
 11737  003B80  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 11738  003B82  A4D8               	btfss	status,2,c
 11739  003B84  0012               	return	
 11740                           
 11741                           ;SwSpiApp.c: 242: {
 11742                           ;SwSpiApp.c: 243: do { LATCbits.LATC2 = 0; } while(0);
 11743  003B86  948B               	bcf	3979,2,c	;volatile
 11744                           
 11745                           ;SwSpiApp.c: 244: }
 11746                           ;SwSpiApp.c: 245: break;
 11747  003B88  0012               	return	
 11748  003B8A                     
 11749                           ;SwSpiApp.c: 248: if(cPinMode == 1)
 11750  003B8A  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 11751  003B8C  A4D8               	btfss	status,2,c
 11752  003B8E  D002               	goto	l754
 11753                           
 11754                           ;SwSpiApp.c: 249: {
 11755                           ;SwSpiApp.c: 250: do { LATDbits.LATD3 = 1; } while(0);
 11756  003B90  868C               	bsf	3980,3,c	;volatile
 11757                           
 11758                           ;SwSpiApp.c: 251: }
 11759  003B92  0012               	return	
 11760  003B94                     l754:
 11761                           
 11762                           ;SwSpiApp.c: 252: else if(cPinMode == 0)
 11763  003B94  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 11764  003B96  A4D8               	btfss	status,2,c
 11765  003B98  0012               	return	
 11766                           
 11767                           ;SwSpiApp.c: 253: {
 11768                           ;SwSpiApp.c: 254: do { LATDbits.LATD3 = 0; } while(0);
 11769  003B9A  968C               	bcf	3980,3,c	;volatile
 11770                           
 11771                           ;SwSpiApp.c: 257: }
 11772                           
 11773                           ;SwSpiApp.c: 255: }
 11774                           ;SwSpiApp.c: 256: break;
 11775  003B9C  0012               	return	
 11776  003B9E                     l743:
 11777  003B9E  5019               	movf	SwSpi_Set_Synth_Le_Pin@phrType,w,c
 11778                           
 11779                           ; Switch size 1, requested type "space"
 11780                           ; Number of cases is 2, Range of values is 0 to 1
 11781                           ; switch strategies available:
 11782                           ; Name         Instructions Cycles
 11783                           ; simple_byte            7     4 (average)
 11784                           ;	Chosen strategy is simple_byte
 11785  003BA0  0A00               	xorlw	0	; case 0
 11786  003BA2  B4D8               	btfsc	status,2,c
 11787  003BA4  D7E8               	goto	l744
 11788  003BA6  0A01               	xorlw	1	; case 1
 11789  003BA8  A4D8               	btfss	status,2,c
 11790  003BAA  0012               	return	
 11791  003BAC  D7EE               	goto	l753
 11792  003BAE                     __end_of_SwSpi_Set_Synth_Le_Pin:
 11793                           	opt stack 0
 11794                           tosu	equ	0xFFF
 11795                           tosh	equ	0xFFE
 11796                           tosl	equ	0xFFD
 11797                           pclath	equ	0xFFA
 11798                           tblptru	equ	0xFF8
 11799                           tblptrh	equ	0xFF7
 11800                           tblptrl	equ	0xFF6
 11801                           tablat	equ	0xFF5
 11802                           prodh	equ	0xFF4
 11803                           prodl	equ	0xFF3
 11804                           intcon	equ	0xFF2
 11805                           intcon2	equ	0xFF1
 11806                           postinc0	equ	0xFEE
 11807                           plusw0	equ	0xFEB
 11808                           wreg	equ	0xFE8
 11809                           indf1	equ	0xFE7
 11810                           postdec1	equ	0xFE5
 11811                           fsr1h	equ	0xFE2
 11812                           fsr1l	equ	0xFE1
 11813                           indf2	equ	0xFDF
 11814                           postinc2	equ	0xFDE
 11815                           postdec2	equ	0xFDD
 11816                           plusw2	equ	0xFDB
 11817                           fsr2h	equ	0xFDA
 11818                           fsr2l	equ	0xFD9
 11819                           status	equ	0xFD8
 11820                           
 11821 ;; *************** function _SwSpi_Set_Dac_Sync_Pin *****************
 11822 ;; Defined at:
 11823 ;;		line 260 in file "SwSpiApp.c"
 11824 ;; Parameters:    Size  Location     Type
 11825 ;;  cPinMode        1    wreg     unsigned char 
 11826 ;; Auto vars:     Size  Location     Type
 11827 ;;  cPinMode        1   23[COMRAM] unsigned char 
 11828 ;; Return value:  Size  Location     Type
 11829 ;;                  1    wreg      void 
 11830 ;; Registers used:
 11831 ;;		wreg, status,2, status,0
 11832 ;; Tracked objects:
 11833 ;;		On entry : 0/0
 11834 ;;		On exit  : 0/0
 11835 ;;		Unchanged: 0/0
 11836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11837 ;;      Params:         0       0       0       0       0       0       0
 11838 ;;      Locals:         1       0       0       0       0       0       0
 11839 ;;      Temps:          0       0       0       0       0       0       0
 11840 ;;      Totals:         1       0       0       0       0       0       0
 11841 ;;Total ram usage:        1 bytes
 11842 ;; Hardware stack levels used:    1
 11843 ;; Hardware stack levels required when called:    4
 11844 ;; This function calls:
 11845 ;;		Nothing
 11846 ;; This function is called by:
 11847 ;;		_SWSPI_send_word
 11848 ;; This function uses a non-reentrant model
 11849 ;;
 11850                           
 11851                           	psect	text65
 11852  0040B4                     __ptext65:
 11853                           	opt stack 0
 11854  0040B4                     _SwSpi_Set_Dac_Sync_Pin:
 11855                           	opt stack 22
 11856                           
 11857                           ;incstack = 0
 11858                           ;SwSpi_Set_Dac_Sync_Pin@cPinMode stored from wreg
 11859  0040B4  6E18               	movwf	SwSpi_Set_Dac_Sync_Pin@cPinMode,c
 11860                           
 11861                           ;SwSpiApp.c: 262: switch(cPinMode)
 11862  0040B6  D004               	goto	l764
 11863  0040B8                     
 11864                           ;SwSpiApp.c: 265: do { LATAbits.LATA2 = 0; } while(0);
 11865  0040B8  9489               	bcf	3977,2,c	;volatile
 11866                           
 11867                           ;SwSpiApp.c: 266: break;
 11868  0040BA  0012               	return	
 11869  0040BC                     
 11870                           ;SwSpiApp.c: 269: do { LATAbits.LATA2 = 1; } while(0);
 11871  0040BC  8489               	bsf	3977,2,c	;volatile
 11872                           
 11873                           ;SwSpiApp.c: 271: }
 11874                           
 11875                           ;SwSpiApp.c: 270: break;
 11876  0040BE  0012               	return	
 11877  0040C0                     l764:
 11878  0040C0  5018               	movf	SwSpi_Set_Dac_Sync_Pin@cPinMode,w,c
 11879                           
 11880                           ; Switch size 1, requested type "space"
 11881                           ; Number of cases is 2, Range of values is 0 to 1
 11882                           ; switch strategies available:
 11883                           ; Name         Instructions Cycles
 11884                           ; simple_byte            7     4 (average)
 11885                           ;	Chosen strategy is simple_byte
 11886  0040C2  0A00               	xorlw	0	; case 0
 11887  0040C4  B4D8               	btfsc	status,2,c
 11888  0040C6  D7F8               	goto	l765
 11889  0040C8  0A01               	xorlw	1	; case 1
 11890  0040CA  A4D8               	btfss	status,2,c
 11891  0040CC  0012               	return	
 11892  0040CE  D7F6               	goto	l769
 11893  0040D0                     __end_of_SwSpi_Set_Dac_Sync_Pin:
 11894                           	opt stack 0
 11895                           tosu	equ	0xFFF
 11896                           tosh	equ	0xFFE
 11897                           tosl	equ	0xFFD
 11898                           pclath	equ	0xFFA
 11899                           tblptru	equ	0xFF8
 11900                           tblptrh	equ	0xFF7
 11901                           tblptrl	equ	0xFF6
 11902                           tablat	equ	0xFF5
 11903                           prodh	equ	0xFF4
 11904                           prodl	equ	0xFF3
 11905                           intcon	equ	0xFF2
 11906                           intcon2	equ	0xFF1
 11907                           postinc0	equ	0xFEE
 11908                           plusw0	equ	0xFEB
 11909                           wreg	equ	0xFE8
 11910                           indf1	equ	0xFE7
 11911                           postdec1	equ	0xFE5
 11912                           fsr1h	equ	0xFE2
 11913                           fsr1l	equ	0xFE1
 11914                           indf2	equ	0xFDF
 11915                           postinc2	equ	0xFDE
 11916                           postdec2	equ	0xFDD
 11917                           plusw2	equ	0xFDB
 11918                           fsr2h	equ	0xFDA
 11919                           fsr2l	equ	0xFD9
 11920                           status	equ	0xFD8
 11921                           
 11922 ;; *************** function _SWSPI_Synth_send_bits *****************
 11923 ;; Defined at:
 11924 ;;		line 67 in file "SwSpiApp.c"
 11925 ;; Parameters:    Size  Location     Type
 11926 ;;  phrType         1    wreg     enum E1
 11927 ;;  data            4   36[COMRAM] unsigned long 
 11928 ;; Auto vars:     Size  Location     Type
 11929 ;;  phrType         1   37[BANK0 ] enum E1
 11930 ;;  bitArray       32    0[BANK0 ] unsigned char [32]
 11931 ;;  mask            4   32[BANK0 ] unsigned long 
 11932 ;;  count           1   36[BANK0 ] unsigned char 
 11933 ;; Return value:  Size  Location     Type
 11934 ;;                  1    wreg      void 
 11935 ;; Registers used:
 11936 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11937 ;; Tracked objects:
 11938 ;;		On entry : 0/0
 11939 ;;		On exit  : 0/0
 11940 ;;		Unchanged: 0/0
 11941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11942 ;;      Params:         4       0       0       0       0       0       0
 11943 ;;      Locals:         0      38       0       0       0       0       0
 11944 ;;      Temps:          0       0       0       0       0       0       0
 11945 ;;      Totals:         4      38       0       0       0       0       0
 11946 ;;Total ram usage:       42 bytes
 11947 ;; Hardware stack levels used:    1
 11948 ;; Hardware stack levels required when called:    6
 11949 ;; This function calls:
 11950 ;;		_FillArray
 11951 ;;		_Make32bitsArray
 11952 ;;		_SwSpi_Clk_Pin
 11953 ;;		_SwSpi_Data_Pin
 11954 ;; This function is called by:
 11955 ;;		_SWSPI_send_word
 11956 ;; This function uses a non-reentrant model
 11957 ;;
 11958                           
 11959                           	psect	text66
 11960  002B44                     __ptext66:
 11961                           	opt stack 0
 11962  002B44                     _SWSPI_Synth_send_bits:
 11963                           	opt stack 20
 11964                           
 11965                           ;incstack = 0
 11966                           ;SWSPI_Synth_send_bits@phrType stored from wreg
 11967  002B44  0100               	movlb	0	; () banked
 11968  002B46  6F85               	movwf	SWSPI_Synth_send_bits@phrType& (0+255),b
 11969                           
 11970                           ;SwSpiApp.c: 69: uint8_t count;
 11971                           ;SwSpiApp.c: 70: uint32_t mask = 0x1;
 11972  002B48  0E01               	movlw	1
 11973  002B4A  0100               	movlb	0	; () banked
 11974  002B4C  6F80               	movwf	SWSPI_Synth_send_bits@mask& (0+255),b
 11975  002B4E  0E00               	movlw	0
 11976  002B50  6F81               	movwf	(SWSPI_Synth_send_bits@mask+1)& (0+255),b
 11977  002B52  0E00               	movlw	0
 11978  002B54  6F82               	movwf	(SWSPI_Synth_send_bits@mask+2)& (0+255),b
 11979  002B56  0E00               	movlw	0
 11980  002B58  6F83               	movwf	(SWSPI_Synth_send_bits@mask+3)& (0+255),b
 11981                           
 11982                           ; BSR set to: 0
 11983                           ;SwSpiApp.c: 72: bool bitArray[32];
 11984                           ;SwSpiApp.c: 73: FillArray(bitArray, sizeof(bitArray), 0x0);
 11985  002B5A  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 11986  002B5C  6E20               	movwf	FillArray@array,c
 11987  002B5E  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 11988  002B60  6E21               	movwf	FillArray@array+1,c
 11989  002B62  0E00               	movlw	0
 11990  002B64  6E23               	movwf	FillArray@size+1,c
 11991  002B66  0E20               	movlw	32
 11992  002B68  6E22               	movwf	FillArray@size,c
 11993  002B6A  0E00               	movlw	0
 11994  002B6C  6E24               	movwf	FillArray@value,c
 11995  002B6E  EC68  F020         	call	_FillArray	;wreg free
 11996                           
 11997                           ;SwSpiApp.c: 75: Make32bitsArray(bitArray, data);
 11998  002B72  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 11999  002B74  6E18               	movwf	Make32bitsArray@array,c
 12000  002B76  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 12001  002B78  6E19               	movwf	Make32bitsArray@array+1,c
 12002  002B7A  C025  F01A         	movff	SWSPI_Synth_send_bits@data,Make32bitsArray@data
 12003  002B7E  C026  F01B         	movff	SWSPI_Synth_send_bits@data+1,Make32bitsArray@data+1
 12004  002B82  C027  F01C         	movff	SWSPI_Synth_send_bits@data+2,Make32bitsArray@data+2
 12005  002B86  C028  F01D         	movff	SWSPI_Synth_send_bits@data+3,Make32bitsArray@data+3
 12006  002B8A  ECA4  F01B         	call	_Make32bitsArray	;wreg free
 12007                           
 12008                           ;SwSpiApp.c: 77: for (count = 0; count <= 31 ; count++)
 12009  002B8E  0E00               	movlw	0
 12010  002B90  0100               	movlb	0	; () banked
 12011  002B92  6F84               	movwf	SWSPI_Synth_send_bits@count& (0+255),b
 12012  002B94                     l7638:
 12013                           
 12014                           ; BSR set to: 0
 12015  002B94  0E1F               	movlw	31
 12016  002B96  6584               	cpfsgt	SWSPI_Synth_send_bits@count& (0+255),b
 12017  002B98  D001               	goto	l649
 12018  002B9A  D026               	goto	u7470
 12019  002B9C                     l649:
 12020                           
 12021                           ; BSR set to: 0
 12022                           ;SwSpiApp.c: 78: {
 12023                           ;SwSpiApp.c: 80: SwSpi_Clk_Pin(phrType, 0);
 12024                           
 12025                           ; BSR set to: 0
 12026  002B9C  0E00               	movlw	0
 12027  002B9E  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 12028  002BA0  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12029  002BA2  EC27  F01C         	call	_SwSpi_Clk_Pin
 12030                           
 12031                           ;SwSpiApp.c: 82: if (bitArray[count])
 12032  002BA6  0100               	movlb	0	; () banked
 12033  002BA8  5184               	movf	SWSPI_Synth_send_bits@count& (0+255),w,b
 12034  002BAA  0D01               	mullw	1
 12035  002BAC  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 12036  002BAE  24F3               	addwf	prodl,w,c
 12037  002BB0  6ED9               	movwf	fsr2l,c
 12038  002BB2  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 12039  002BB4  20F4               	addwfc	prodh,w,c
 12040  002BB6  6EDA               	movwf	fsr2h,c
 12041  002BB8  50DF               	movf	indf2,w,c
 12042  002BBA  B4D8               	btfsc	status,2,c
 12043  002BBC  D006               	goto	l651
 12044                           
 12045                           ; BSR set to: 0
 12046                           ;SwSpiApp.c: 83: {
 12047                           ;SwSpiApp.c: 84: SwSpi_Data_Pin(phrType, 1);
 12048  002BBE  0E01               	movlw	1
 12049  002BC0  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 12050  002BC2  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12051  002BC4  ECFC  F01B         	call	_SwSpi_Data_Pin
 12052                           
 12053                           ;SwSpiApp.c: 85: }
 12054  002BC8  D006               	goto	l652
 12055  002BCA                     l651:
 12056                           
 12057                           ;SwSpiApp.c: 86: else
 12058                           ;SwSpiApp.c: 87: {
 12059                           ;SwSpiApp.c: 88: SwSpi_Data_Pin(phrType, 0);
 12060  002BCA  0E00               	movlw	0
 12061  002BCC  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 12062  002BCE  0100               	movlb	0	; () banked
 12063  002BD0  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12064  002BD2  ECFC  F01B         	call	_SwSpi_Data_Pin
 12065  002BD6                     l652:
 12066                           
 12067                           ;SwSpiApp.c: 89: }
 12068                           ;SwSpiApp.c: 91: SwSpi_Clk_Pin(phrType, 1);
 12069  002BD6  0E01               	movlw	1
 12070  002BD8  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 12071  002BDA  0100               	movlb	0	; () banked
 12072  002BDC  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12073  002BDE  EC27  F01C         	call	_SwSpi_Clk_Pin
 12074  002BE2  0100               	movlb	0	; () banked
 12075  002BE4  2B84               	incf	SWSPI_Synth_send_bits@count& (0+255),f,b
 12076  002BE6  D7D6               	goto	l7638
 12077  002BE8                     u7470:
 12078                           
 12079                           ; BSR set to: 0
 12080                           ;SwSpiApp.c: 92: }
 12081                           ;SwSpiApp.c: 94: _delay((unsigned long)((50)*(8000000/4000000.0)));
 12082                           
 12083                           ; BSR set to: 0
 12084  002BE8  0E21               	movlw	33
 12085  002BEA                     u9087:
 12086  002BEA  2EE8               	decfsz	wreg,f,c
 12087  002BEC  D7FE               	bra	u9087
 12088  002BEE  F000               	nop	
 12089                           
 12090                           ;SwSpiApp.c: 95: SwSpi_Data_Pin(phrType, 0);
 12091  002BF0  0E00               	movlw	0
 12092  002BF2  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 12093  002BF4  0100               	movlb	0	; () banked
 12094  002BF6  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12095  002BF8  ECFC  F01B         	call	_SwSpi_Data_Pin
 12096                           
 12097                           ;SwSpiApp.c: 96: SwSpi_Clk_Pin(phrType, 0);
 12098  002BFC  0E00               	movlw	0
 12099  002BFE  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 12100  002C00  0100               	movlb	0	; () banked
 12101  002C02  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12102  002C04  EC27  F01C         	call	_SwSpi_Clk_Pin
 12103  002C08  0012               	return		;funcret
 12104  002C0A                     __end_of_SWSPI_Synth_send_bits:
 12105                           	opt stack 0
 12106                           tosu	equ	0xFFF
 12107                           tosh	equ	0xFFE
 12108                           tosl	equ	0xFFD
 12109                           pclath	equ	0xFFA
 12110                           tblptru	equ	0xFF8
 12111                           tblptrh	equ	0xFF7
 12112                           tblptrl	equ	0xFF6
 12113                           tablat	equ	0xFF5
 12114                           prodh	equ	0xFF4
 12115                           prodl	equ	0xFF3
 12116                           intcon	equ	0xFF2
 12117                           intcon2	equ	0xFF1
 12118                           postinc0	equ	0xFEE
 12119                           plusw0	equ	0xFEB
 12120                           wreg	equ	0xFE8
 12121                           indf1	equ	0xFE7
 12122                           postdec1	equ	0xFE5
 12123                           fsr1h	equ	0xFE2
 12124                           fsr1l	equ	0xFE1
 12125                           indf2	equ	0xFDF
 12126                           postinc2	equ	0xFDE
 12127                           postdec2	equ	0xFDD
 12128                           plusw2	equ	0xFDB
 12129                           fsr2h	equ	0xFDA
 12130                           fsr2l	equ	0xFD9
 12131                           status	equ	0xFD8
 12132                           
 12133 ;; *************** function _Make32bitsArray *****************
 12134 ;; Defined at:
 12135 ;;		line 113 in file "SystemCommon.c"
 12136 ;; Parameters:    Size  Location     Type
 12137 ;;  array           2   23[COMRAM] PTR unsigned char 
 12138 ;;		 -> SWSPI_Synth_send_bits@bitArray(32), 
 12139 ;;  data            4   25[COMRAM] unsigned long 
 12140 ;; Auto vars:     Size  Location     Type
 12141 ;;  idx             2   31[COMRAM] int 
 12142 ;; Return value:  Size  Location     Type
 12143 ;;                  1    wreg      void 
 12144 ;; Registers used:
 12145 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12146 ;; Tracked objects:
 12147 ;;		On entry : 0/0
 12148 ;;		On exit  : 0/0
 12149 ;;		Unchanged: 0/0
 12150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12151 ;;      Params:         6       0       0       0       0       0       0
 12152 ;;      Locals:         2       0       0       0       0       0       0
 12153 ;;      Temps:          2       0       0       0       0       0       0
 12154 ;;      Totals:        10       0       0       0       0       0       0
 12155 ;;Total ram usage:       10 bytes
 12156 ;; Hardware stack levels used:    1
 12157 ;; Hardware stack levels required when called:    4
 12158 ;; This function calls:
 12159 ;;		Nothing
 12160 ;; This function is called by:
 12161 ;;		_SWSPI_Synth_send_bits
 12162 ;; This function uses a non-reentrant model
 12163 ;;
 12164                           
 12165                           	psect	text67
 12166  003748                     __ptext67:
 12167                           	opt stack 0
 12168  003748                     _Make32bitsArray:
 12169                           	opt stack 21
 12170                           
 12171                           ;SystemCommon.c: 115: for(int idx = 0; idx <= 32; idx++)
 12172                           
 12173                           ;incstack = 0
 12174  003748  0E00               	movlw	0
 12175  00374A  6E21               	movwf	Make32bitsArray@idx+1,c
 12176  00374C  0E00               	movlw	0
 12177  00374E  6E20               	movwf	Make32bitsArray@idx,c
 12178  003750                     l7426:
 12179  003750  BE21               	btfsc	Make32bitsArray@idx+1,7,c
 12180  003752  D006               	goto	l1428
 12181  003754  5021               	movf	Make32bitsArray@idx+1,w,c
 12182  003756  E123               	bnz	l1430
 12183  003758  0E21               	movlw	33
 12184  00375A  5C20               	subwf	Make32bitsArray@idx,w,c
 12185  00375C  B0D8               	btfsc	status,0,c
 12186  00375E  0012               	return	
 12187  003760                     l1428:
 12188                           
 12189                           ;SystemCommon.c: 116: {
 12190                           ;SystemCommon.c: 117: array[32 - idx - 1] = data % 2;
 12191  003760  0E01               	movlw	1
 12192  003762  2420               	addwf	Make32bitsArray@idx,w,c
 12193  003764  6E1E               	movwf	??_Make32bitsArray& (0+255),c
 12194  003766  0E00               	movlw	0
 12195  003768  2021               	addwfc	Make32bitsArray@idx+1,w,c
 12196  00376A  6E1F               	movwf	(??_Make32bitsArray+1)& (0+255),c
 12197  00376C  1E1E               	comf	??_Make32bitsArray,f,c
 12198  00376E  1E1F               	comf	??_Make32bitsArray+1,f,c
 12199  003770  4A1E               	infsnz	??_Make32bitsArray,f,c
 12200  003772  2A1F               	incf	??_Make32bitsArray+1,f,c
 12201  003774  0E20               	movlw	32
 12202  003776  261E               	addwf	??_Make32bitsArray,f,c
 12203  003778  0E00               	movlw	0
 12204  00377A  221F               	addwfc	??_Make32bitsArray+1,f,c
 12205  00377C  501E               	movf	??_Make32bitsArray,w,c
 12206  00377E  2418               	addwf	Make32bitsArray@array,w,c
 12207  003780  6ED9               	movwf	fsr2l,c
 12208  003782  501F               	movf	??_Make32bitsArray+1,w,c
 12209  003784  2019               	addwfc	Make32bitsArray@array+1,w,c
 12210  003786  6EDA               	movwf	fsr2h,c
 12211  003788  501A               	movf	Make32bitsArray@data,w,c
 12212  00378A  0B01               	andlw	1
 12213  00378C  6EDF               	movwf	indf2,c
 12214                           
 12215                           ;SystemCommon.c: 118: data /= 2;
 12216  00378E  90D8               	bcf	status,0,c
 12217  003790  321D               	rrcf	Make32bitsArray@data+3,f,c
 12218  003792  321C               	rrcf	Make32bitsArray@data+2,f,c
 12219  003794  321B               	rrcf	Make32bitsArray@data+1,f,c
 12220  003796  321A               	rrcf	Make32bitsArray@data,f,c
 12221  003798  4A20               	infsnz	Make32bitsArray@idx,f,c
 12222  00379A  2A21               	incf	Make32bitsArray@idx+1,f,c
 12223  00379C  D7D9               	goto	l7426
 12224  00379E                     l1430:
 12225  00379E  0012               	return		;funcret
 12226  0037A0                     __end_of_Make32bitsArray:
 12227                           	opt stack 0
 12228                           tosu	equ	0xFFF
 12229                           tosh	equ	0xFFE
 12230                           tosl	equ	0xFFD
 12231                           pclath	equ	0xFFA
 12232                           tblptru	equ	0xFF8
 12233                           tblptrh	equ	0xFF7
 12234                           tblptrl	equ	0xFF6
 12235                           tablat	equ	0xFF5
 12236                           prodh	equ	0xFF4
 12237                           prodl	equ	0xFF3
 12238                           intcon	equ	0xFF2
 12239                           intcon2	equ	0xFF1
 12240                           postinc0	equ	0xFEE
 12241                           plusw0	equ	0xFEB
 12242                           wreg	equ	0xFE8
 12243                           indf1	equ	0xFE7
 12244                           postdec1	equ	0xFE5
 12245                           fsr1h	equ	0xFE2
 12246                           fsr1l	equ	0xFE1
 12247                           indf2	equ	0xFDF
 12248                           postinc2	equ	0xFDE
 12249                           postdec2	equ	0xFDD
 12250                           plusw2	equ	0xFDB
 12251                           fsr2h	equ	0xFDA
 12252                           fsr2l	equ	0xFD9
 12253                           status	equ	0xFD8
 12254                           
 12255 ;; *************** function _FillArray *****************
 12256 ;; Defined at:
 12257 ;;		line 29 in file "SystemCommon.c"
 12258 ;; Parameters:    Size  Location     Type
 12259 ;;  array           2   31[COMRAM] PTR unsigned char 
 12260 ;;		 -> SWSPI_Synth_send_bits@bitArray(32), synthLdTxArray(12), synthLdRxArray(12), 
 12261 ;;  size            2   33[COMRAM] int 
 12262 ;;  value           1   35[COMRAM] unsigned char 
 12263 ;; Auto vars:     Size  Location     Type
 12264 ;;		None
 12265 ;; Return value:  Size  Location     Type
 12266 ;;                  1    wreg      void 
 12267 ;; Registers used:
 12268 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12269 ;; Tracked objects:
 12270 ;;		On entry : 0/0
 12271 ;;		On exit  : 0/0
 12272 ;;		Unchanged: 0/0
 12273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12274 ;;      Params:         5       0       0       0       0       0       0
 12275 ;;      Locals:         0       0       0       0       0       0       0
 12276 ;;      Temps:          0       0       0       0       0       0       0
 12277 ;;      Totals:         5       0       0       0       0       0       0
 12278 ;;Total ram usage:        5 bytes
 12279 ;; Hardware stack levels used:    1
 12280 ;; Hardware stack levels required when called:    5
 12281 ;; This function calls:
 12282 ;;		_memset
 12283 ;; This function is called by:
 12284 ;;		_PLLInitialize
 12285 ;;		_SWSPI_Synth_send_bits
 12286 ;; This function uses a non-reentrant model
 12287 ;;
 12288                           
 12289                           	psect	text68
 12290  0040D0                     __ptext68:
 12291                           	opt stack 0
 12292  0040D0                     _FillArray:
 12293                           	opt stack 20
 12294                           
 12295                           ;SystemCommon.c: 31: memset(array, value, size);
 12296                           
 12297                           ;incstack = 0
 12298  0040D0  C020  F018         	movff	FillArray@array,memset@p1
 12299  0040D4  C021  F019         	movff	FillArray@array+1,memset@p1+1
 12300  0040D8  C024  F01A         	movff	FillArray@value,memset@c
 12301  0040DC  6A1B               	clrf	memset@c+1,c
 12302  0040DE  C022  F01C         	movff	FillArray@size,memset@n
 12303  0040E2  C023  F01D         	movff	FillArray@size+1,memset@n+1
 12304  0040E6  EC61  F01F         	call	_memset	;wreg free
 12305  0040EA  0012               	return		;funcret
 12306  0040EC                     __end_of_FillArray:
 12307                           	opt stack 0
 12308                           tosu	equ	0xFFF
 12309                           tosh	equ	0xFFE
 12310                           tosl	equ	0xFFD
 12311                           pclath	equ	0xFFA
 12312                           tblptru	equ	0xFF8
 12313                           tblptrh	equ	0xFF7
 12314                           tblptrl	equ	0xFF6
 12315                           tablat	equ	0xFF5
 12316                           prodh	equ	0xFF4
 12317                           prodl	equ	0xFF3
 12318                           intcon	equ	0xFF2
 12319                           intcon2	equ	0xFF1
 12320                           postinc0	equ	0xFEE
 12321                           plusw0	equ	0xFEB
 12322                           wreg	equ	0xFE8
 12323                           indf1	equ	0xFE7
 12324                           postdec1	equ	0xFE5
 12325                           fsr1h	equ	0xFE2
 12326                           fsr1l	equ	0xFE1
 12327                           indf2	equ	0xFDF
 12328                           postinc2	equ	0xFDE
 12329                           postdec2	equ	0xFDD
 12330                           plusw2	equ	0xFDB
 12331                           fsr2h	equ	0xFDA
 12332                           fsr2l	equ	0xFD9
 12333                           status	equ	0xFD8
 12334                           
 12335 ;; *************** function _memset *****************
 12336 ;; Defined at:
 12337 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 12338 ;; Parameters:    Size  Location     Type
 12339 ;;  p1              2   23[COMRAM] PTR void 
 12340 ;;		 -> GetMcuFwVersion@TxMsg(18), GetIntFromUartData@dataRegArr(10), SWSPI_Synth_send_bits@bitArray(32), SynthReadData@
      +TxMsg(22), 
 12341 ;;		 -> SynthReadData@eepromDataArray(16), DacReadValue@TxMsg(7), FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), 
 12342 ;;		 -> sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), 
 12343 ;;		 -> synthLdTxArray(12), synthLdRxArray(12), 
 12344 ;;  c               2   25[COMRAM] int 
 12345 ;;  n               2   27[COMRAM] unsigned int 
 12346 ;; Auto vars:     Size  Location     Type
 12347 ;;  p               2   29[COMRAM] PTR unsigned char 
 12348 ;;		 -> GetMcuFwVersion@TxMsg(18), GetIntFromUartData@dataRegArr(10), SWSPI_Synth_send_bits@bitArray(32), SynthReadData@
      +TxMsg(22), 
 12349 ;;		 -> SynthReadData@eepromDataArray(16), DacReadValue@TxMsg(7), FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), 
 12350 ;;		 -> sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), 
 12351 ;;		 -> synthLdTxArray(12), synthLdRxArray(12), 
 12352 ;; Return value:  Size  Location     Type
 12353 ;;                  2   23[COMRAM] PTR void 
 12354 ;; Registers used:
 12355 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12356 ;; Tracked objects:
 12357 ;;		On entry : 0/0
 12358 ;;		On exit  : 0/0
 12359 ;;		Unchanged: 0/0
 12360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12361 ;;      Params:         6       0       0       0       0       0       0
 12362 ;;      Locals:         2       0       0       0       0       0       0
 12363 ;;      Temps:          0       0       0       0       0       0       0
 12364 ;;      Totals:         8       0       0       0       0       0       0
 12365 ;;Total ram usage:        8 bytes
 12366 ;; Hardware stack levels used:    1
 12367 ;; Hardware stack levels required when called:    4
 12368 ;; This function calls:
 12369 ;;		Nothing
 12370 ;; This function is called by:
 12371 ;;		_ZeroArray
 12372 ;;		_FillArray
 12373 ;; This function uses a non-reentrant model
 12374 ;;
 12375                           
 12376                           	psect	text69
 12377  003EC2                     __ptext69:
 12378                           	opt stack 0
 12379  003EC2                     _memset:
 12380                           	opt stack 24
 12381                           
 12382                           ;incstack = 0
 12383  003EC2  C018  F01E         	movff	memset@p1,memset@p
 12384  003EC6  C019  F01F         	movff	memset@p1+1,memset@p+1
 12385  003ECA  D008               	goto	l2019
 12386  003ECC                     l7208:
 12387  003ECC  C01E  FFD9         	movff	memset@p,fsr2l
 12388  003ED0  C01F  FFDA         	movff	memset@p+1,fsr2h
 12389  003ED4  C01A  FFDF         	movff	memset@c,indf2
 12390  003ED8  4A1E               	infsnz	memset@p,f,c
 12391  003EDA  2A1F               	incf	memset@p+1,f,c
 12392  003EDC                     l2019:
 12393  003EDC  061C               	decf	memset@n,f,c
 12394  003EDE  A0D8               	btfss	status,0,c
 12395  003EE0  061D               	decf	memset@n+1,f,c
 12396  003EE2  281C               	incf	memset@n,w,c
 12397  003EE4  E1F3               	bnz	l7208
 12398  003EE6  281D               	incf	memset@n+1,w,c
 12399  003EE8  B4D8               	btfsc	status,2,c
 12400  003EEA  0012               	return	
 12401  003EEC  D7EF               	goto	l2020
 12402  003EEE                     __end_of_memset:
 12403                           	opt stack 0
 12404                           tosu	equ	0xFFF
 12405                           tosh	equ	0xFFE
 12406                           tosl	equ	0xFFD
 12407                           pclath	equ	0xFFA
 12408                           tblptru	equ	0xFF8
 12409                           tblptrh	equ	0xFF7
 12410                           tblptrl	equ	0xFF6
 12411                           tablat	equ	0xFF5
 12412                           prodh	equ	0xFF4
 12413                           prodl	equ	0xFF3
 12414                           intcon	equ	0xFF2
 12415                           intcon2	equ	0xFF1
 12416                           postinc0	equ	0xFEE
 12417                           plusw0	equ	0xFEB
 12418                           wreg	equ	0xFE8
 12419                           indf1	equ	0xFE7
 12420                           postdec1	equ	0xFE5
 12421                           fsr1h	equ	0xFE2
 12422                           fsr1l	equ	0xFE1
 12423                           indf2	equ	0xFDF
 12424                           postinc2	equ	0xFDE
 12425                           postdec2	equ	0xFDD
 12426                           plusw2	equ	0xFDB
 12427                           fsr2h	equ	0xFDA
 12428                           fsr2l	equ	0xFD9
 12429                           status	equ	0xFD8
 12430                           
 12431 ;; *************** function _SWSPI_DAC_send_bits *****************
 12432 ;; Defined at:
 12433 ;;		line 43 in file "SwSpiApp.c"
 12434 ;; Parameters:    Size  Location     Type
 12435 ;;  phrType         1    wreg     enum E1
 12436 ;;  data            1   25[COMRAM] unsigned char 
 12437 ;; Auto vars:     Size  Location     Type
 12438 ;;  phrType         1   27[COMRAM] enum E1
 12439 ;;  count           1   26[COMRAM] unsigned char 
 12440 ;; Return value:  Size  Location     Type
 12441 ;;                  1    wreg      void 
 12442 ;; Registers used:
 12443 ;;		wreg, status,2, status,0, cstack
 12444 ;; Tracked objects:
 12445 ;;		On entry : 0/0
 12446 ;;		On exit  : 0/0
 12447 ;;		Unchanged: 0/0
 12448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12449 ;;      Params:         1       0       0       0       0       0       0
 12450 ;;      Locals:         2       0       0       0       0       0       0
 12451 ;;      Temps:          0       0       0       0       0       0       0
 12452 ;;      Totals:         3       0       0       0       0       0       0
 12453 ;;Total ram usage:        3 bytes
 12454 ;; Hardware stack levels used:    1
 12455 ;; Hardware stack levels required when called:    5
 12456 ;; This function calls:
 12457 ;;		_SwSpi_Clk_Pin
 12458 ;;		_SwSpi_Data_Pin
 12459 ;; This function is called by:
 12460 ;;		_SWSPI_send_word
 12461 ;; This function uses a non-reentrant model
 12462 ;;
 12463                           
 12464                           	psect	text70
 12465  0037A0                     __ptext70:
 12466                           	opt stack 0
 12467  0037A0                     _SWSPI_DAC_send_bits:
 12468                           	opt stack 21
 12469                           
 12470                           ;incstack = 0
 12471                           ;SWSPI_DAC_send_bits@phrType stored from wreg
 12472  0037A0  6E1C               	movwf	SWSPI_DAC_send_bits@phrType,c
 12473                           
 12474                           ;SwSpiApp.c: 45: uint8_t count;
 12475                           ;SwSpiApp.c: 46: for (count = 8; count ; count--, data <<= 1)
 12476  0037A2  0E08               	movlw	8
 12477  0037A4  6E1B               	movwf	SWSPI_DAC_send_bits@count,c
 12478  0037A6  D01A               	goto	l641
 12479  0037A8                     
 12480                           ;SwSpiApp.c: 47: {
 12481                           ;SwSpiApp.c: 48: SwSpi_Clk_Pin(phrType, 1);
 12482  0037A8  0E01               	movlw	1
 12483  0037AA  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 12484  0037AC  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 12485  0037AE  EC27  F01C         	call	_SwSpi_Clk_Pin
 12486                           
 12487                           ;SwSpiApp.c: 50: if (data & 0X80)
 12488  0037B2  AE1A               	btfss	SWSPI_DAC_send_bits@data,7,c
 12489  0037B4  D006               	goto	l643
 12490                           
 12491                           ;SwSpiApp.c: 51: {
 12492                           ;SwSpiApp.c: 53: SwSpi_Data_Pin(phrType, 1);
 12493  0037B6  0E01               	movlw	1
 12494  0037B8  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 12495  0037BA  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 12496  0037BC  ECFC  F01B         	call	_SwSpi_Data_Pin
 12497                           
 12498                           ;SwSpiApp.c: 54: }
 12499  0037C0  D005               	goto	l644
 12500  0037C2                     l643:
 12501                           
 12502                           ;SwSpiApp.c: 55: else
 12503                           ;SwSpiApp.c: 56: {
 12504                           ;SwSpiApp.c: 57: SwSpi_Data_Pin(phrType, 0);
 12505  0037C2  0E00               	movlw	0
 12506  0037C4  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 12507  0037C6  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 12508  0037C8  ECFC  F01B         	call	_SwSpi_Data_Pin
 12509  0037CC                     l644:
 12510                           
 12511                           ;SwSpiApp.c: 58: }
 12512                           ;SwSpiApp.c: 60: SwSpi_Clk_Pin(phrType, 0);
 12513  0037CC  0E00               	movlw	0
 12514  0037CE  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 12515  0037D0  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 12516  0037D2  EC27  F01C         	call	_SwSpi_Clk_Pin
 12517  0037D6  061B               	decf	SWSPI_DAC_send_bits@count,f,c
 12518  0037D8  90D8               	bcf	status,0,c
 12519  0037DA  361A               	rlcf	SWSPI_DAC_send_bits@data,f,c
 12520  0037DC                     l641:
 12521  0037DC  501B               	movf	SWSPI_DAC_send_bits@count,w,c
 12522  0037DE  A4D8               	btfss	status,2,c
 12523  0037E0  D7E3               	goto	l642
 12524                           
 12525                           ;SwSpiApp.c: 61: }
 12526                           ;SwSpiApp.c: 63: SwSpi_Data_Pin(phrType, 0);
 12527  0037E2  0E00               	movlw	0
 12528  0037E4  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 12529  0037E6  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 12530  0037E8  ECFC  F01B         	call	_SwSpi_Data_Pin
 12531                           
 12532                           ;SwSpiApp.c: 64: SwSpi_Clk_Pin(phrType, 0);
 12533  0037EC  0E00               	movlw	0
 12534  0037EE  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 12535  0037F0  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 12536  0037F2  EC27  F01C         	call	_SwSpi_Clk_Pin
 12537  0037F6  0012               	return		;funcret
 12538  0037F8                     __end_of_SWSPI_DAC_send_bits:
 12539                           	opt stack 0
 12540                           tosu	equ	0xFFF
 12541                           tosh	equ	0xFFE
 12542                           tosl	equ	0xFFD
 12543                           pclath	equ	0xFFA
 12544                           tblptru	equ	0xFF8
 12545                           tblptrh	equ	0xFF7
 12546                           tblptrl	equ	0xFF6
 12547                           tablat	equ	0xFF5
 12548                           prodh	equ	0xFF4
 12549                           prodl	equ	0xFF3
 12550                           intcon	equ	0xFF2
 12551                           intcon2	equ	0xFF1
 12552                           postinc0	equ	0xFEE
 12553                           plusw0	equ	0xFEB
 12554                           wreg	equ	0xFE8
 12555                           indf1	equ	0xFE7
 12556                           postdec1	equ	0xFE5
 12557                           fsr1h	equ	0xFE2
 12558                           fsr1l	equ	0xFE1
 12559                           indf2	equ	0xFDF
 12560                           postinc2	equ	0xFDE
 12561                           postdec2	equ	0xFDD
 12562                           plusw2	equ	0xFDB
 12563                           fsr2h	equ	0xFDA
 12564                           fsr2l	equ	0xFD9
 12565                           status	equ	0xFD8
 12566                           
 12567 ;; *************** function _SwSpi_Data_Pin *****************
 12568 ;; Defined at:
 12569 ;;		line 103 in file "SwSpiApp.c"
 12570 ;; Parameters:    Size  Location     Type
 12571 ;;  phrType         1    wreg     enum E1
 12572 ;;  cPinMode        1   23[COMRAM] unsigned char 
 12573 ;; Auto vars:     Size  Location     Type
 12574 ;;  phrType         1   24[COMRAM] enum E1
 12575 ;; Return value:  Size  Location     Type
 12576 ;;                  1    wreg      void 
 12577 ;; Registers used:
 12578 ;;		wreg, status,2, status,0
 12579 ;; Tracked objects:
 12580 ;;		On entry : 0/0
 12581 ;;		On exit  : 0/0
 12582 ;;		Unchanged: 0/0
 12583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12584 ;;      Params:         1       0       0       0       0       0       0
 12585 ;;      Locals:         1       0       0       0       0       0       0
 12586 ;;      Temps:          0       0       0       0       0       0       0
 12587 ;;      Totals:         2       0       0       0       0       0       0
 12588 ;;Total ram usage:        2 bytes
 12589 ;; Hardware stack levels used:    1
 12590 ;; Hardware stack levels required when called:    4
 12591 ;; This function calls:
 12592 ;;		Nothing
 12593 ;; This function is called by:
 12594 ;;		_SWSPI_DAC_send_bits
 12595 ;;		_SWSPI_Synth_send_bits
 12596 ;; This function uses a non-reentrant model
 12597 ;;
 12598                           
 12599                           	psect	text71
 12600  0037F8                     __ptext71:
 12601                           	opt stack 0
 12602  0037F8                     _SwSpi_Data_Pin:
 12603                           	opt stack 21
 12604                           
 12605                           ;incstack = 0
 12606                           ;SwSpi_Data_Pin@phrType stored from wreg
 12607  0037F8  6E19               	movwf	SwSpi_Data_Pin@phrType,c
 12608                           
 12609                           ;SwSpiApp.c: 105: switch(phrType)
 12610  0037FA  D01E               	goto	l656
 12611  0037FC                     
 12612                           ;SwSpiApp.c: 108: if(cPinMode == 1)
 12613  0037FC  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 12614  0037FE  A4D8               	btfss	status,2,c
 12615  003800  D002               	goto	l658
 12616                           
 12617                           ;SwSpiApp.c: 109: {
 12618                           ;SwSpiApp.c: 110: do { LATDbits.LATD0 = 1; } while(0);
 12619  003802  808C               	bsf	3980,0,c	;volatile
 12620                           
 12621                           ;SwSpiApp.c: 111: }
 12622  003804  0012               	return	
 12623  003806                     l658:
 12624                           
 12625                           ;SwSpiApp.c: 112: else if (cPinMode == 0)
 12626  003806  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 12627  003808  A4D8               	btfss	status,2,c
 12628  00380A  0012               	return	
 12629                           
 12630                           ;SwSpiApp.c: 113: {
 12631                           ;SwSpiApp.c: 114: do { LATDbits.LATD0 = 0; } while(0);
 12632  00380C  908C               	bcf	3980,0,c	;volatile
 12633                           
 12634                           ;SwSpiApp.c: 115: }
 12635                           ;SwSpiApp.c: 116: break;
 12636  00380E  0012               	return	
 12637  003810                     
 12638                           ;SwSpiApp.c: 119: if(cPinMode == 1)
 12639  003810  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 12640  003812  A4D8               	btfss	status,2,c
 12641  003814  D002               	goto	l667
 12642                           
 12643                           ;SwSpiApp.c: 120: {
 12644                           ;SwSpiApp.c: 121: do { LATCbits.LATC5 = 1; } while(0);
 12645  003816  8A8B               	bsf	3979,5,c	;volatile
 12646                           
 12647                           ;SwSpiApp.c: 122: }
 12648  003818  0012               	return	
 12649  00381A                     l667:
 12650                           
 12651                           ;SwSpiApp.c: 123: else if (cPinMode == 0)
 12652  00381A  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 12653  00381C  A4D8               	btfss	status,2,c
 12654  00381E  0012               	return	
 12655                           
 12656                           ;SwSpiApp.c: 124: {
 12657                           ;SwSpiApp.c: 125: do { LATCbits.LATC5 = 0; } while(0);
 12658  003820  9A8B               	bcf	3979,5,c	;volatile
 12659                           
 12660                           ;SwSpiApp.c: 126: }
 12661                           ;SwSpiApp.c: 127: break;
 12662  003822  0012               	return	
 12663  003824                     
 12664                           ;SwSpiApp.c: 130: if(cPinMode == 1)
 12665  003824  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 12666  003826  A4D8               	btfss	status,2,c
 12667  003828  D002               	goto	l675
 12668                           
 12669                           ;SwSpiApp.c: 131: {
 12670                           ;SwSpiApp.c: 132: do { LATAbits.LATA4 = 1; } while(0);
 12671  00382A  8889               	bsf	3977,4,c	;volatile
 12672                           
 12673                           ;SwSpiApp.c: 133: }
 12674  00382C  0012               	return	
 12675  00382E                     l675:
 12676                           
 12677                           ;SwSpiApp.c: 134: else if (cPinMode == 0)
 12678  00382E  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 12679  003830  A4D8               	btfss	status,2,c
 12680  003832  0012               	return	
 12681                           
 12682                           ;SwSpiApp.c: 135: {
 12683                           ;SwSpiApp.c: 136: do { LATAbits.LATA4 = 0; } while(0);
 12684  003834  9889               	bcf	3977,4,c	;volatile
 12685                           
 12686                           ;SwSpiApp.c: 139: }
 12687                           
 12688                           ;SwSpiApp.c: 137: }
 12689                           ;SwSpiApp.c: 138: break;
 12690  003836  0012               	return	
 12691  003838                     l656:
 12692  003838  5019               	movf	SwSpi_Data_Pin@phrType,w,c
 12693                           
 12694                           ; Switch size 1, requested type "space"
 12695                           ; Number of cases is 3, Range of values is 0 to 2
 12696                           ; switch strategies available:
 12697                           ; Name         Instructions Cycles
 12698                           ; simple_byte           10     6 (average)
 12699                           ;	Chosen strategy is simple_byte
 12700  00383A  0A00               	xorlw	0	; case 0
 12701  00383C  B4D8               	btfsc	status,2,c
 12702  00383E  D7DE               	goto	l657
 12703  003840  0A01               	xorlw	1	; case 1
 12704  003842  B4D8               	btfsc	status,2,c
 12705  003844  D7E5               	goto	l666
 12706  003846  0A03               	xorlw	3	; case 2
 12707  003848  A4D8               	btfss	status,2,c
 12708  00384A  0012               	return	
 12709  00384C  D7EB               	goto	l674
 12710  00384E                     __end_of_SwSpi_Data_Pin:
 12711                           	opt stack 0
 12712                           tosu	equ	0xFFF
 12713                           tosh	equ	0xFFE
 12714                           tosl	equ	0xFFD
 12715                           pclath	equ	0xFFA
 12716                           tblptru	equ	0xFF8
 12717                           tblptrh	equ	0xFF7
 12718                           tblptrl	equ	0xFF6
 12719                           tablat	equ	0xFF5
 12720                           prodh	equ	0xFF4
 12721                           prodl	equ	0xFF3
 12722                           intcon	equ	0xFF2
 12723                           intcon2	equ	0xFF1
 12724                           postinc0	equ	0xFEE
 12725                           plusw0	equ	0xFEB
 12726                           wreg	equ	0xFE8
 12727                           indf1	equ	0xFE7
 12728                           postdec1	equ	0xFE5
 12729                           fsr1h	equ	0xFE2
 12730                           fsr1l	equ	0xFE1
 12731                           indf2	equ	0xFDF
 12732                           postinc2	equ	0xFDE
 12733                           postdec2	equ	0xFDD
 12734                           plusw2	equ	0xFDB
 12735                           fsr2h	equ	0xFDA
 12736                           fsr2l	equ	0xFD9
 12737                           status	equ	0xFD8
 12738                           
 12739 ;; *************** function _SwSpi_Clk_Pin *****************
 12740 ;; Defined at:
 12741 ;;		line 142 in file "SwSpiApp.c"
 12742 ;; Parameters:    Size  Location     Type
 12743 ;;  phrType         1    wreg     enum E1
 12744 ;;  cPinMode        1   23[COMRAM] unsigned char 
 12745 ;; Auto vars:     Size  Location     Type
 12746 ;;  phrType         1   24[COMRAM] enum E1
 12747 ;; Return value:  Size  Location     Type
 12748 ;;                  1    wreg      void 
 12749 ;; Registers used:
 12750 ;;		wreg, status,2, status,0
 12751 ;; Tracked objects:
 12752 ;;		On entry : 0/0
 12753 ;;		On exit  : 0/0
 12754 ;;		Unchanged: 0/0
 12755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12756 ;;      Params:         1       0       0       0       0       0       0
 12757 ;;      Locals:         1       0       0       0       0       0       0
 12758 ;;      Temps:          0       0       0       0       0       0       0
 12759 ;;      Totals:         2       0       0       0       0       0       0
 12760 ;;Total ram usage:        2 bytes
 12761 ;; Hardware stack levels used:    1
 12762 ;; Hardware stack levels required when called:    4
 12763 ;; This function calls:
 12764 ;;		Nothing
 12765 ;; This function is called by:
 12766 ;;		_SWSPI_DAC_send_bits
 12767 ;;		_SWSPI_Synth_send_bits
 12768 ;;		_SwSpi_Synth_Toggle_Clock
 12769 ;; This function uses a non-reentrant model
 12770 ;;
 12771                           
 12772                           	psect	text72
 12773  00384E                     __ptext72:
 12774                           	opt stack 0
 12775  00384E                     _SwSpi_Clk_Pin:
 12776                           	opt stack 21
 12777                           
 12778                           ;incstack = 0
 12779                           ;SwSpi_Clk_Pin@phrType stored from wreg
 12780  00384E  6E19               	movwf	SwSpi_Clk_Pin@phrType,c
 12781                           
 12782                           ;SwSpiApp.c: 144: switch(phrType)
 12783  003850  D01E               	goto	l685
 12784  003852                     
 12785                           ;SwSpiApp.c: 147: if(cPinMode == 1)
 12786  003852  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 12787  003854  A4D8               	btfss	status,2,c
 12788  003856  D002               	goto	l687
 12789                           
 12790                           ;SwSpiApp.c: 148: {
 12791                           ;SwSpiApp.c: 149: do { LATCbits.LATC3 = 1; } while(0);
 12792  003858  868B               	bsf	3979,3,c	;volatile
 12793                           
 12794                           ;SwSpiApp.c: 150: }
 12795  00385A  0012               	return	
 12796  00385C                     l687:
 12797                           
 12798                           ;SwSpiApp.c: 151: else if (cPinMode == 0)
 12799  00385C  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 12800  00385E  A4D8               	btfss	status,2,c
 12801  003860  0012               	return	
 12802                           
 12803                           ;SwSpiApp.c: 152: {
 12804                           ;SwSpiApp.c: 153: do { LATCbits.LATC3 = 0; } while(0);
 12805  003862  968B               	bcf	3979,3,c	;volatile
 12806                           
 12807                           ;SwSpiApp.c: 154: }
 12808                           ;SwSpiApp.c: 155: break;
 12809  003864  0012               	return	
 12810  003866                     
 12811                           ;SwSpiApp.c: 158: if(cPinMode == 1)
 12812  003866  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 12813  003868  A4D8               	btfss	status,2,c
 12814  00386A  D002               	goto	l696
 12815                           
 12816                           ;SwSpiApp.c: 159: {
 12817                           ;SwSpiApp.c: 160: do { LATCbits.LATC4 = 1; } while(0);
 12818  00386C  888B               	bsf	3979,4,c	;volatile
 12819                           
 12820                           ;SwSpiApp.c: 161: }
 12821  00386E  0012               	return	
 12822  003870                     l696:
 12823                           
 12824                           ;SwSpiApp.c: 162: else if (cPinMode == 0)
 12825  003870  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 12826  003872  A4D8               	btfss	status,2,c
 12827  003874  0012               	return	
 12828                           
 12829                           ;SwSpiApp.c: 163: {
 12830                           ;SwSpiApp.c: 164: do { LATCbits.LATC4 = 0; } while(0);
 12831  003876  988B               	bcf	3979,4,c	;volatile
 12832                           
 12833                           ;SwSpiApp.c: 165: }
 12834                           ;SwSpiApp.c: 167: break;
 12835  003878  0012               	return	
 12836  00387A                     
 12837                           ;SwSpiApp.c: 170: if(cPinMode == 1)
 12838  00387A  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 12839  00387C  A4D8               	btfss	status,2,c
 12840  00387E  D002               	goto	l704
 12841                           
 12842                           ;SwSpiApp.c: 171: {
 12843                           ;SwSpiApp.c: 172: do { LATAbits.LATA3 = 1; } while(0);
 12844  003880  8689               	bsf	3977,3,c	;volatile
 12845                           
 12846                           ;SwSpiApp.c: 173: }
 12847  003882  0012               	return	
 12848  003884                     l704:
 12849                           
 12850                           ;SwSpiApp.c: 174: else if (cPinMode == 0)
 12851  003884  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 12852  003886  A4D8               	btfss	status,2,c
 12853  003888  0012               	return	
 12854                           
 12855                           ;SwSpiApp.c: 175: {
 12856                           ;SwSpiApp.c: 176: do { LATAbits.LATA3 = 0; } while(0);
 12857  00388A  9689               	bcf	3977,3,c	;volatile
 12858                           
 12859                           ;SwSpiApp.c: 179: }
 12860                           
 12861                           ;SwSpiApp.c: 177: }
 12862                           ;SwSpiApp.c: 178: break;
 12863  00388C  0012               	return	
 12864  00388E                     l685:
 12865  00388E  5019               	movf	SwSpi_Clk_Pin@phrType,w,c
 12866                           
 12867                           ; Switch size 1, requested type "space"
 12868                           ; Number of cases is 3, Range of values is 0 to 2
 12869                           ; switch strategies available:
 12870                           ; Name         Instructions Cycles
 12871                           ; simple_byte           10     6 (average)
 12872                           ;	Chosen strategy is simple_byte
 12873  003890  0A00               	xorlw	0	; case 0
 12874  003892  B4D8               	btfsc	status,2,c
 12875  003894  D7DE               	goto	l686
 12876  003896  0A01               	xorlw	1	; case 1
 12877  003898  B4D8               	btfsc	status,2,c
 12878  00389A  D7E5               	goto	l695
 12879  00389C  0A03               	xorlw	3	; case 2
 12880  00389E  A4D8               	btfss	status,2,c
 12881  0038A0  0012               	return	
 12882  0038A2  D7EB               	goto	l703
 12883  0038A4                     __end_of_SwSpi_Clk_Pin:
 12884                           	opt stack 0
 12885                           tosu	equ	0xFFF
 12886                           tosh	equ	0xFFE
 12887                           tosl	equ	0xFFD
 12888                           pclath	equ	0xFFA
 12889                           tblptru	equ	0xFF8
 12890                           tblptrh	equ	0xFF7
 12891                           tblptrl	equ	0xFF6
 12892                           tablat	equ	0xFF5
 12893                           prodh	equ	0xFF4
 12894                           prodl	equ	0xFF3
 12895                           intcon	equ	0xFF2
 12896                           intcon2	equ	0xFF1
 12897                           postinc0	equ	0xFEE
 12898                           plusw0	equ	0xFEB
 12899                           wreg	equ	0xFE8
 12900                           indf1	equ	0xFE7
 12901                           postdec1	equ	0xFE5
 12902                           fsr1h	equ	0xFE2
 12903                           fsr1l	equ	0xFE1
 12904                           indf2	equ	0xFDF
 12905                           postinc2	equ	0xFDE
 12906                           postdec2	equ	0xFDD
 12907                           plusw2	equ	0xFDB
 12908                           fsr2h	equ	0xFDA
 12909                           fsr2l	equ	0xFD9
 12910                           status	equ	0xFD8
 12911                           
 12912 ;; *************** function _ReadIntFromEeprom *****************
 12913 ;; Defined at:
 12914 ;;		line 131 in file "SystemCommon.c"
 12915 ;; Parameters:    Size  Location     Type
 12916 ;;  address         1    wreg     unsigned char 
 12917 ;;  numOfByes       2   81[BANK0 ] int 
 12918 ;; Auto vars:     Size  Location     Type
 12919 ;;  address         1   98[BANK0 ] unsigned char 
 12920 ;;  base            4   88[BANK0 ] unsigned long 
 12921 ;;  idx             1  103[BANK0 ] unsigned char 
 12922 ;;  retVal          4   99[BANK0 ] unsigned long 
 12923 ;; Return value:  Size  Location     Type
 12924 ;;                  4   81[BANK0 ] unsigned long 
 12925 ;; Registers used:
 12926 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12927 ;; Tracked objects:
 12928 ;;		On entry : 0/0
 12929 ;;		On exit  : 0/0
 12930 ;;		Unchanged: 0/0
 12931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12932 ;;      Params:         0       4       0       0       0       0       0
 12933 ;;      Locals:         0      16       0       0       0       0       0
 12934 ;;      Temps:          0       3       0       0       0       0       0
 12935 ;;      Totals:         0      23       0       0       0       0       0
 12936 ;;Total ram usage:       23 bytes
 12937 ;; Hardware stack levels used:    1
 12938 ;; Hardware stack levels required when called:    9
 12939 ;; This function calls:
 12940 ;;		_EepromRead
 12941 ;;		___awtoft
 12942 ;;		___fttol
 12943 ;;		___lmul
 12944 ;;		_pow
 12945 ;; This function is called by:
 12946 ;;		_DacInit
 12947 ;;		_DacReadValue
 12948 ;;		_InitSynth
 12949 ;;		_SynthReadData
 12950 ;; This function uses a non-reentrant model
 12951 ;;
 12952                           
 12953                           	psect	text73
 12954  001F14                     __ptext73:
 12955                           	opt stack 0
 12956  001F14                     _ReadIntFromEeprom:
 12957                           	opt stack 18
 12958                           
 12959                           ;incstack = 0
 12960                           ;ReadIntFromEeprom@address stored from wreg
 12961  001F14  0100               	movlb	0	; () banked
 12962  001F16  6FC2               	movwf	ReadIntFromEeprom@address& (0+255),b
 12963                           
 12964                           ;SystemCommon.c: 133: uint32_t retVal = 0x00;
 12965  001F18  0E00               	movlw	0
 12966  001F1A  0100               	movlb	0	; () banked
 12967  001F1C  6FC3               	movwf	ReadIntFromEeprom@retVal& (0+255),b
 12968  001F1E  0E00               	movlw	0
 12969  001F20  6FC4               	movwf	(ReadIntFromEeprom@retVal+1)& (0+255),b
 12970  001F22  0E00               	movlw	0
 12971  001F24  6FC5               	movwf	(ReadIntFromEeprom@retVal+2)& (0+255),b
 12972  001F26  0E00               	movlw	0
 12973  001F28  6FC6               	movwf	(ReadIntFromEeprom@retVal+3)& (0+255),b
 12974                           
 12975                           ; BSR set to: 0
 12976                           ;SystemCommon.c: 134: address -= numOfByes;
 12977  001F2A  51B1               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 12978  001F2C  5FC2               	subwf	ReadIntFromEeprom@address& (0+255),f,b
 12979                           
 12980                           ; BSR set to: 0
 12981                           ;SystemCommon.c: 136: for(uint8_t idx = 0; idx < numOfByes; idx++)
 12982  001F2E  0E00               	movlw	0
 12983  001F30  6FC7               	movwf	ReadIntFromEeprom@idx& (0+255),b
 12984  001F32  D06D               	goto	l1439
 12985  001F34                     
 12986                           ; BSR set to: 0
 12987                           ;SystemCommon.c: 137: {
 12988                           ;SystemCommon.c: 138: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 12989                           
 12990                           ; BSR set to: 0
 12991  001F34  51C7               	movf	ReadIntFromEeprom@idx& (0+255),w,b
 12992  001F36  6FB5               	movwf	??_ReadIntFromEeprom& (0+255),b
 12993  001F38  6BB6               	clrf	(??_ReadIntFromEeprom+1)& (0+255),b
 12994  001F3A  0E01               	movlw	1
 12995  001F3C  27B5               	addwf	??_ReadIntFromEeprom& (0+255),f,b
 12996  001F3E  0E00               	movlw	0
 12997  001F40  23B6               	addwfc	(??_ReadIntFromEeprom+1)& (0+255),f,b
 12998  001F42  1FB5               	comf	??_ReadIntFromEeprom& (0+255),f,b
 12999  001F44  1FB6               	comf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13000  001F46  4BB5               	infsnz	??_ReadIntFromEeprom& (0+255),f,b
 13001  001F48  2BB6               	incf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13002  001F4A  51B1               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 13003  001F4C  27B5               	addwf	??_ReadIntFromEeprom& (0+255),f,b
 13004  001F4E  51B2               	movf	(ReadIntFromEeprom@numOfByes+1)& (0+255),w,b
 13005  001F50  23B6               	addwfc	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13006  001F52  90D8               	bcf	status,0,c
 13007  001F54  37B5               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 13008  001F56  37B6               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13009  001F58  90D8               	bcf	status,0,c
 13010  001F5A  37B5               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 13011  001F5C  37B6               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13012  001F5E  90D8               	bcf	status,0,c
 13013  001F60  37B5               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 13014  001F62  37B6               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13015  001F64  C0B5  F020         	movff	??_ReadIntFromEeprom,___awtoft@c
 13016  001F68  C0B6  F021         	movff	??_ReadIntFromEeprom+1,___awtoft@c+1
 13017  001F6C  EC2C  F01E         	call	___awtoft	;wreg free
 13018  001F70  C020  F0BC         	movff	?___awtoft,_ReadIntFromEeprom$3585
 13019  001F74  C021  F0BD         	movff	?___awtoft+1,_ReadIntFromEeprom$3585+1
 13020  001F78  C022  F0BE         	movff	?___awtoft+2,_ReadIntFromEeprom$3585+2
 13021                           
 13022                           ;SystemCommon.c: 137: {
 13023                           ;SystemCommon.c: 138: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 13024  001F7C  C0BC  F0A3         	movff	_ReadIntFromEeprom$3585,pow@y
 13025  001F80  C0BD  F0A4         	movff	_ReadIntFromEeprom$3585+1,pow@y+1
 13026  001F84  C0BE  F0A5         	movff	_ReadIntFromEeprom$3585+2,pow@y+2
 13027  001F88  0E00               	movlw	0
 13028  001F8A  0100               	movlb	0	; () banked
 13029  001F8C  6FA0               	movwf	pow@x& (0+255),b
 13030  001F8E  0E00               	movlw	0
 13031  001F90  6FA1               	movwf	(pow@x+1)& (0+255),b
 13032  001F92  0E40               	movlw	64
 13033  001F94  6FA2               	movwf	(pow@x+2)& (0+255),b
 13034  001F96  EC77  F00D         	call	_pow	;wreg free
 13035  001F9A  C0A0  F0BF         	movff	?_pow,_ReadIntFromEeprom$3586
 13036  001F9E  C0A1  F0C0         	movff	?_pow+1,_ReadIntFromEeprom$3586+1
 13037  001FA2  C0A2  F0C1         	movff	?_pow+2,_ReadIntFromEeprom$3586+2
 13038                           
 13039                           ;SystemCommon.c: 137: {
 13040                           ;SystemCommon.c: 138: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 13041  001FA6  C0BF  F078         	movff	_ReadIntFromEeprom$3586,___fttol@f1
 13042  001FAA  C0C0  F079         	movff	_ReadIntFromEeprom$3586+1,___fttol@f1+1
 13043  001FAE  C0C1  F07A         	movff	_ReadIntFromEeprom$3586+2,___fttol@f1+2
 13044  001FB2  EC23  F011         	call	___fttol	;wreg free
 13045  001FB6  C078  F0B8         	movff	?___fttol,ReadIntFromEeprom@base
 13046  001FBA  C079  F0B9         	movff	?___fttol+1,ReadIntFromEeprom@base+1
 13047  001FBE  C07A  F0BA         	movff	?___fttol+2,ReadIntFromEeprom@base+2
 13048  001FC2  C07B  F0BB         	movff	?___fttol+3,ReadIntFromEeprom@base+3
 13049                           
 13050                           ;SystemCommon.c: 139: retVal = retVal | EepromRead(address + idx) * base;
 13051  001FC6  0100               	movlb	0	; () banked
 13052  001FC8  51C2               	movf	ReadIntFromEeprom@address& (0+255),w,b
 13053  001FCA  25C7               	addwf	ReadIntFromEeprom@idx& (0+255),w,b
 13054  001FCC  EC12  F021         	call	_EepromRead
 13055  001FD0  0100               	movlb	0	; () banked
 13056  001FD2  6FB5               	movwf	??_ReadIntFromEeprom& (0+255),b
 13057  001FD4  51B5               	movf	??_ReadIntFromEeprom& (0+255),w,b
 13058  001FD6  6E1A               	movwf	___lmul@multiplier,c
 13059  001FD8  6A1B               	clrf	___lmul@multiplier+1,c
 13060  001FDA  6A1C               	clrf	___lmul@multiplier+2,c
 13061  001FDC  6A1D               	clrf	___lmul@multiplier+3,c
 13062  001FDE  C0B8  F01E         	movff	ReadIntFromEeprom@base,___lmul@multiplicand
 13063  001FE2  C0B9  F01F         	movff	ReadIntFromEeprom@base+1,___lmul@multiplicand+1
 13064  001FE6  C0BA  F020         	movff	ReadIntFromEeprom@base+2,___lmul@multiplicand+2
 13065  001FEA  C0BB  F021         	movff	ReadIntFromEeprom@base+3,___lmul@multiplicand+3
 13066  001FEE  EC52  F01C         	call	___lmul	;wreg free
 13067  001FF2  0100               	movlb	0	; () banked
 13068  001FF4  51C3               	movf	ReadIntFromEeprom@retVal& (0+255),w,b
 13069  001FF6  101A               	iorwf	?___lmul,w,c
 13070  001FF8  6FC3               	movwf	ReadIntFromEeprom@retVal& (0+255),b
 13071  001FFA  51C4               	movf	(ReadIntFromEeprom@retVal+1)& (0+255),w,b
 13072  001FFC  101B               	iorwf	?___lmul+1,w,c
 13073  001FFE  6FC4               	movwf	(ReadIntFromEeprom@retVal+1)& (0+255),b
 13074  002000  51C5               	movf	(ReadIntFromEeprom@retVal+2)& (0+255),w,b
 13075  002002  101C               	iorwf	?___lmul+2,w,c
 13076  002004  6FC5               	movwf	(ReadIntFromEeprom@retVal+2)& (0+255),b
 13077  002006  51C6               	movf	(ReadIntFromEeprom@retVal+3)& (0+255),w,b
 13078  002008  101D               	iorwf	?___lmul+3,w,c
 13079  00200A  6FC6               	movwf	(ReadIntFromEeprom@retVal+3)& (0+255),b
 13080                           
 13081                           ; BSR set to: 0
 13082  00200C  2BC7               	incf	ReadIntFromEeprom@idx& (0+255),f,b
 13083  00200E                     l1439:
 13084                           
 13085                           ; BSR set to: 0
 13086                           
 13087                           ; BSR set to: 0
 13088  00200E  51C7               	movf	ReadIntFromEeprom@idx& (0+255),w,b
 13089  002010  6FB5               	movwf	??_ReadIntFromEeprom& (0+255),b
 13090  002012  6BB6               	clrf	(??_ReadIntFromEeprom+1)& (0+255),b
 13091  002014  51B1               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 13092  002016  5DB5               	subwf	??_ReadIntFromEeprom& (0+255),w,b
 13093  002018  51B6               	movf	(??_ReadIntFromEeprom+1)& (0+255),w,b
 13094  00201A  0A80               	xorlw	128
 13095  00201C  6FB7               	movwf	(??_ReadIntFromEeprom+2)& (0+255),b
 13096  00201E  51B2               	movf	(ReadIntFromEeprom@numOfByes+1)& (0+255),w,b
 13097  002020  0A80               	xorlw	128
 13098  002022  59B7               	subwfb	(??_ReadIntFromEeprom+2)& (0+255),w,b
 13099  002024  A0D8               	btfss	status,0,c
 13100  002026  D786               	goto	l1440
 13101                           
 13102                           ; BSR set to: 0
 13103                           ;SystemCommon.c: 140: }
 13104                           ;SystemCommon.c: 141: return retVal;
 13105  002028  C0C3  F0B1         	movff	ReadIntFromEeprom@retVal,?_ReadIntFromEeprom
 13106  00202C  C0C4  F0B2         	movff	ReadIntFromEeprom@retVal+1,?_ReadIntFromEeprom+1
 13107  002030  C0C5  F0B3         	movff	ReadIntFromEeprom@retVal+2,?_ReadIntFromEeprom+2
 13108  002034  C0C6  F0B4         	movff	ReadIntFromEeprom@retVal+3,?_ReadIntFromEeprom+3
 13109                           
 13110                           ; BSR set to: 0
 13111  002038  0012               	return		;funcret
 13112  00203A                     __end_of_ReadIntFromEeprom:
 13113                           	opt stack 0
 13114                           tosu	equ	0xFFF
 13115                           tosh	equ	0xFFE
 13116                           tosl	equ	0xFFD
 13117                           pclath	equ	0xFFA
 13118                           tblptru	equ	0xFF8
 13119                           tblptrh	equ	0xFF7
 13120                           tblptrl	equ	0xFF6
 13121                           tablat	equ	0xFF5
 13122                           prodh	equ	0xFF4
 13123                           prodl	equ	0xFF3
 13124                           intcon	equ	0xFF2
 13125                           intcon2	equ	0xFF1
 13126                           postinc0	equ	0xFEE
 13127                           plusw0	equ	0xFEB
 13128                           wreg	equ	0xFE8
 13129                           indf1	equ	0xFE7
 13130                           postdec1	equ	0xFE5
 13131                           fsr1h	equ	0xFE2
 13132                           fsr1l	equ	0xFE1
 13133                           indf2	equ	0xFDF
 13134                           postinc2	equ	0xFDE
 13135                           postdec2	equ	0xFDD
 13136                           plusw2	equ	0xFDB
 13137                           fsr2h	equ	0xFDA
 13138                           fsr2l	equ	0xFD9
 13139                           status	equ	0xFD8
 13140                           
 13141 ;; *************** function ___lmul *****************
 13142 ;; Defined at:
 13143 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 13144 ;; Parameters:    Size  Location     Type
 13145 ;;  multiplier      4   25[COMRAM] unsigned long 
 13146 ;;  multiplicand    4   29[COMRAM] unsigned long 
 13147 ;; Auto vars:     Size  Location     Type
 13148 ;;  product         4   33[COMRAM] unsigned long 
 13149 ;; Return value:  Size  Location     Type
 13150 ;;                  4   25[COMRAM] unsigned long 
 13151 ;; Registers used:
 13152 ;;		wreg, status,2, status,0
 13153 ;; Tracked objects:
 13154 ;;		On entry : 0/0
 13155 ;;		On exit  : 0/0
 13156 ;;		Unchanged: 0/0
 13157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13158 ;;      Params:         8       0       0       0       0       0       0
 13159 ;;      Locals:         4       0       0       0       0       0       0
 13160 ;;      Temps:          0       0       0       0       0       0       0
 13161 ;;      Totals:        12       0       0       0       0       0       0
 13162 ;;Total ram usage:       12 bytes
 13163 ;; Hardware stack levels used:    1
 13164 ;; Hardware stack levels required when called:    4
 13165 ;; This function calls:
 13166 ;;		Nothing
 13167 ;; This function is called by:
 13168 ;;		_ReadIntFromEeprom
 13169 ;;		_strtol
 13170 ;; This function uses a non-reentrant model
 13171 ;;
 13172                           
 13173                           	psect	text74
 13174  0038A4                     __ptext74:
 13175                           	opt stack 0
 13176  0038A4                     ___lmul:
 13177                           	opt stack 21
 13178                           
 13179                           ; BSR set to: 0
 13180                           ;incstack = 0
 13181  0038A4  0E00               	movlw	0
 13182  0038A6  6E22               	movwf	___lmul@product,c
 13183  0038A8  0E00               	movlw	0
 13184  0038AA  6E23               	movwf	___lmul@product+1,c
 13185  0038AC  0E00               	movlw	0
 13186  0038AE  6E24               	movwf	___lmul@product+2,c
 13187  0038B0  0E00               	movlw	0
 13188  0038B2  6E25               	movwf	___lmul@product+3,c
 13189  0038B4  A01A               	btfss	___lmul@multiplier,0,c
 13190  0038B6  D008               	goto	l1604
 13191  0038B8  501E               	movf	___lmul@multiplicand,w,c
 13192  0038BA  2622               	addwf	___lmul@product,f,c
 13193  0038BC  501F               	movf	___lmul@multiplicand+1,w,c
 13194  0038BE  2223               	addwfc	___lmul@product+1,f,c
 13195  0038C0  5020               	movf	___lmul@multiplicand+2,w,c
 13196  0038C2  2224               	addwfc	___lmul@product+2,f,c
 13197  0038C4  5021               	movf	___lmul@multiplicand+3,w,c
 13198  0038C6  2225               	addwfc	___lmul@product+3,f,c
 13199  0038C8                     l1604:
 13200  0038C8  90D8               	bcf	status,0,c
 13201  0038CA  361E               	rlcf	___lmul@multiplicand,f,c
 13202  0038CC  361F               	rlcf	___lmul@multiplicand+1,f,c
 13203  0038CE  3620               	rlcf	___lmul@multiplicand+2,f,c
 13204  0038D0  3621               	rlcf	___lmul@multiplicand+3,f,c
 13205  0038D2  90D8               	bcf	status,0,c
 13206  0038D4  321D               	rrcf	___lmul@multiplier+3,f,c
 13207  0038D6  321C               	rrcf	___lmul@multiplier+2,f,c
 13208  0038D8  321B               	rrcf	___lmul@multiplier+1,f,c
 13209  0038DA  321A               	rrcf	___lmul@multiplier,f,c
 13210  0038DC  501A               	movf	___lmul@multiplier,w,c
 13211  0038DE  101B               	iorwf	___lmul@multiplier+1,w,c
 13212  0038E0  101C               	iorwf	___lmul@multiplier+2,w,c
 13213  0038E2  101D               	iorwf	___lmul@multiplier+3,w,c
 13214  0038E4  A4D8               	btfss	status,2,c
 13215  0038E6  D7E6               	goto	l1603
 13216  0038E8  C022  F01A         	movff	___lmul@product,?___lmul
 13217  0038EC  C023  F01B         	movff	___lmul@product+1,?___lmul+1
 13218  0038F0  C024  F01C         	movff	___lmul@product+2,?___lmul+2
 13219  0038F4  C025  F01D         	movff	___lmul@product+3,?___lmul+3
 13220  0038F8  0012               	return		;funcret
 13221  0038FA                     __end_of___lmul:
 13222                           	opt stack 0
 13223                           tosu	equ	0xFFF
 13224                           tosh	equ	0xFFE
 13225                           tosl	equ	0xFFD
 13226                           pclath	equ	0xFFA
 13227                           tblptru	equ	0xFF8
 13228                           tblptrh	equ	0xFF7
 13229                           tblptrl	equ	0xFF6
 13230                           tablat	equ	0xFF5
 13231                           prodh	equ	0xFF4
 13232                           prodl	equ	0xFF3
 13233                           intcon	equ	0xFF2
 13234                           intcon2	equ	0xFF1
 13235                           postinc0	equ	0xFEE
 13236                           plusw0	equ	0xFEB
 13237                           wreg	equ	0xFE8
 13238                           indf1	equ	0xFE7
 13239                           postdec1	equ	0xFE5
 13240                           fsr1h	equ	0xFE2
 13241                           fsr1l	equ	0xFE1
 13242                           indf2	equ	0xFDF
 13243                           postinc2	equ	0xFDE
 13244                           postdec2	equ	0xFDD
 13245                           plusw2	equ	0xFDB
 13246                           fsr2h	equ	0xFDA
 13247                           fsr2l	equ	0xFD9
 13248                           status	equ	0xFD8
 13249                           
 13250 ;; *************** function _EepromRead *****************
 13251 ;; Defined at:
 13252 ;;		line 175 in file "FlashApp.c"
 13253 ;; Parameters:    Size  Location     Type
 13254 ;;  address         1    wreg     unsigned char 
 13255 ;; Auto vars:     Size  Location     Type
 13256 ;;  address         1   24[COMRAM] unsigned char 
 13257 ;; Return value:  Size  Location     Type
 13258 ;;                  1    wreg      unsigned char 
 13259 ;; Registers used:
 13260 ;;		wreg, status,2, cstack
 13261 ;; Tracked objects:
 13262 ;;		On entry : 0/0
 13263 ;;		On exit  : 0/0
 13264 ;;		Unchanged: 0/0
 13265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13266 ;;      Params:         0       0       0       0       0       0       0
 13267 ;;      Locals:         1       0       0       0       0       0       0
 13268 ;;      Temps:          0       0       0       0       0       0       0
 13269 ;;      Totals:         1       0       0       0       0       0       0
 13270 ;;Total ram usage:        1 bytes
 13271 ;; Hardware stack levels used:    1
 13272 ;; Hardware stack levels required when called:    5
 13273 ;; This function calls:
 13274 ;;		_DATAEE_ReadByte
 13275 ;; This function is called by:
 13276 ;;		_ReadIntFromEeprom
 13277 ;; This function uses a non-reentrant model
 13278 ;;
 13279                           
 13280                           	psect	text75
 13281  004224                     __ptext75:
 13282                           	opt stack 0
 13283  004224                     _EepromRead:
 13284                           	opt stack 21
 13285                           
 13286                           ;incstack = 0
 13287                           ;EepromRead@address stored from wreg
 13288  004224  6E19               	movwf	EepromRead@address,c
 13289                           
 13290                           ;FlashApp.c: 177: return DATAEE_ReadByte(address);
 13291  004226  5019               	movf	EepromRead@address,w,c
 13292  004228  ECAF  F020         	call	_DATAEE_ReadByte
 13293  00422C  0012               	return	
 13294  00422E                     __end_of_EepromRead:
 13295                           	opt stack 0
 13296                           tosu	equ	0xFFF
 13297                           tosh	equ	0xFFE
 13298                           tosl	equ	0xFFD
 13299                           pclath	equ	0xFFA
 13300                           tblptru	equ	0xFF8
 13301                           tblptrh	equ	0xFF7
 13302                           tblptrl	equ	0xFF6
 13303                           tablat	equ	0xFF5
 13304                           prodh	equ	0xFF4
 13305                           prodl	equ	0xFF3
 13306                           intcon	equ	0xFF2
 13307                           intcon2	equ	0xFF1
 13308                           postinc0	equ	0xFEE
 13309                           plusw0	equ	0xFEB
 13310                           wreg	equ	0xFE8
 13311                           indf1	equ	0xFE7
 13312                           postdec1	equ	0xFE5
 13313                           fsr1h	equ	0xFE2
 13314                           fsr1l	equ	0xFE1
 13315                           indf2	equ	0xFDF
 13316                           postinc2	equ	0xFDE
 13317                           postdec2	equ	0xFDD
 13318                           plusw2	equ	0xFDB
 13319                           fsr2h	equ	0xFDA
 13320                           fsr2l	equ	0xFD9
 13321                           status	equ	0xFD8
 13322                           
 13323 ;; *************** function _DATAEE_ReadByte *****************
 13324 ;; Defined at:
 13325 ;;		line 194 in file "mcc_generated_files/memory.c"
 13326 ;; Parameters:    Size  Location     Type
 13327 ;;  bAdd            1    wreg     unsigned char 
 13328 ;; Auto vars:     Size  Location     Type
 13329 ;;  bAdd            1   23[COMRAM] unsigned char 
 13330 ;; Return value:  Size  Location     Type
 13331 ;;                  1    wreg      unsigned char 
 13332 ;; Registers used:
 13333 ;;		wreg, status,2
 13334 ;; Tracked objects:
 13335 ;;		On entry : 0/0
 13336 ;;		On exit  : 0/0
 13337 ;;		Unchanged: 0/0
 13338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13339 ;;      Params:         0       0       0       0       0       0       0
 13340 ;;      Locals:         1       0       0       0       0       0       0
 13341 ;;      Temps:          0       0       0       0       0       0       0
 13342 ;;      Totals:         1       0       0       0       0       0       0
 13343 ;;Total ram usage:        1 bytes
 13344 ;; Hardware stack levels used:    1
 13345 ;; Hardware stack levels required when called:    4
 13346 ;; This function calls:
 13347 ;;		Nothing
 13348 ;; This function is called by:
 13349 ;;		_EepromRead
 13350 ;; This function uses a non-reentrant model
 13351 ;;
 13352                           
 13353                           	psect	text76
 13354  00415E                     __ptext76:
 13355                           	opt stack 0
 13356  00415E                     _DATAEE_ReadByte:
 13357                           	opt stack 21
 13358                           
 13359                           ;incstack = 0
 13360                           ;DATAEE_ReadByte@bAdd stored from wreg
 13361  00415E  6E18               	movwf	DATAEE_ReadByte@bAdd,c
 13362                           
 13363                           ;memory.c: 197: EEADR = (bAdd & 0xFF);
 13364  004160  C018  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
 13365                           
 13366                           ;memory.c: 198: EECON1bits.CFGS = 0;
 13367  004164  9CA6               	bcf	4006,6,c	;volsfr
 13368                           
 13369                           ;memory.c: 199: EECON1bits.EEPGD = 0;
 13370  004166  9EA6               	bcf	4006,7,c	;volsfr
 13371                           
 13372                           ;memory.c: 200: EECON1bits.RD = 1;
 13373  004168  80A6               	bsf	4006,0,c	;volsfr
 13374                           
 13375                           ;memory.c: 201: __nop();
 13376  00416A  F000               	nop	
 13377                           
 13378                           ;memory.c: 202: __nop();
 13379  00416C  F000               	nop	
 13380                           
 13381                           ;memory.c: 204: return (EEDATA);
 13382  00416E  50A8               	movf	4008,w,c	;volatile
 13383  004170  0012               	return	
 13384  004172                     __end_of_DATAEE_ReadByte:
 13385                           	opt stack 0
 13386                           tosu	equ	0xFFF
 13387                           tosh	equ	0xFFE
 13388                           tosl	equ	0xFFD
 13389                           pclath	equ	0xFFA
 13390                           tblptru	equ	0xFF8
 13391                           tblptrh	equ	0xFF7
 13392                           tblptrl	equ	0xFF6
 13393                           tablat	equ	0xFF5
 13394                           prodh	equ	0xFF4
 13395                           prodl	equ	0xFF3
 13396                           intcon	equ	0xFF2
 13397                           intcon2	equ	0xFF1
 13398                           postinc0	equ	0xFEE
 13399                           plusw0	equ	0xFEB
 13400                           wreg	equ	0xFE8
 13401                           indf1	equ	0xFE7
 13402                           postdec1	equ	0xFE5
 13403                           fsr1h	equ	0xFE2
 13404                           fsr1l	equ	0xFE1
 13405                           indf2	equ	0xFDF
 13406                           postinc2	equ	0xFDE
 13407                           postdec2	equ	0xFDD
 13408                           plusw2	equ	0xFDB
 13409                           fsr2h	equ	0xFDA
 13410                           fsr2l	equ	0xFD9
 13411                           status	equ	0xFD8
 13412                           
 13413 ;; *************** function _ClearMcuRunTime *****************
 13414 ;; Defined at:
 13415 ;;		line 63 in file "SystemStatus.c"
 13416 ;; Parameters:    Size  Location     Type
 13417 ;;		None
 13418 ;; Auto vars:     Size  Location     Type
 13419 ;;		None
 13420 ;; Return value:  Size  Location     Type
 13421 ;;                  1    wreg      void 
 13422 ;; Registers used:
 13423 ;;		wreg, status,2
 13424 ;; Tracked objects:
 13425 ;;		On entry : 0/0
 13426 ;;		On exit  : 0/0
 13427 ;;		Unchanged: 0/0
 13428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13429 ;;      Params:         0       0       0       0       0       0       0
 13430 ;;      Locals:         0       0       0       0       0       0       0
 13431 ;;      Temps:          0       0       0       0       0       0       0
 13432 ;;      Totals:         0       0       0       0       0       0       0
 13433 ;;Total ram usage:        0 bytes
 13434 ;; Hardware stack levels used:    1
 13435 ;; Hardware stack levels required when called:    4
 13436 ;; This function calls:
 13437 ;;		Nothing
 13438 ;; This function is called by:
 13439 ;;		_InitSystemApplicationManagers
 13440 ;; This function uses a non-reentrant model
 13441 ;;
 13442                           
 13443                           	psect	text77
 13444  004172                     __ptext77:
 13445                           	opt stack 0
 13446  004172                     _ClearMcuRunTime:
 13447                           	opt stack 25
 13448                           
 13449                           ;SystemStatus.c: 65: mcuRunTimeIn5SecTicks = 0;
 13450                           
 13451                           ;incstack = 0
 13452  004172  0E00               	movlw	0
 13453  004174  0101               	movlb	1	; () banked
 13454  004176  6F28               	movwf	_mcuRunTimeIn5SecTicks& (0+255),b
 13455  004178  0E00               	movlw	0
 13456  00417A  6F29               	movwf	(_mcuRunTimeIn5SecTicks+1)& (0+255),b
 13457  00417C  0E00               	movlw	0
 13458  00417E  6F2A               	movwf	(_mcuRunTimeIn5SecTicks+2)& (0+255),b
 13459  004180  0E00               	movlw	0
 13460  004182  6F2B               	movwf	(_mcuRunTimeIn5SecTicks+3)& (0+255),b
 13461                           
 13462                           ; BSR set to: 1
 13463  004184  0012               	return		;funcret
 13464  004186                     __end_of_ClearMcuRunTime:
 13465                           	opt stack 0
 13466                           tosu	equ	0xFFF
 13467                           tosh	equ	0xFFE
 13468                           tosl	equ	0xFFD
 13469                           pclath	equ	0xFFA
 13470                           tblptru	equ	0xFF8
 13471                           tblptrh	equ	0xFF7
 13472                           tblptrl	equ	0xFF6
 13473                           tablat	equ	0xFF5
 13474                           prodh	equ	0xFF4
 13475                           prodl	equ	0xFF3
 13476                           intcon	equ	0xFF2
 13477                           intcon2	equ	0xFF1
 13478                           postinc0	equ	0xFEE
 13479                           plusw0	equ	0xFEB
 13480                           wreg	equ	0xFE8
 13481                           indf1	equ	0xFE7
 13482                           postdec1	equ	0xFE5
 13483                           fsr1h	equ	0xFE2
 13484                           fsr1l	equ	0xFE1
 13485                           indf2	equ	0xFDF
 13486                           postinc2	equ	0xFDE
 13487                           postdec2	equ	0xFDD
 13488                           plusw2	equ	0xFDB
 13489                           fsr2h	equ	0xFDA
 13490                           fsr2l	equ	0xFD9
 13491                           status	equ	0xFD8
 13492                           
 13493 ;; *************** function _CheckFlashPrecentage *****************
 13494 ;; Defined at:
 13495 ;;		line 165 in file "FlashApp.c"
 13496 ;; Parameters:    Size  Location     Type
 13497 ;;		None
 13498 ;; Auto vars:     Size  Location     Type
 13499 ;;  precentage      3   28[BANK0 ] void 
 13500 ;; Return value:  Size  Location     Type
 13501 ;;                  1    wreg      unsigned char 
 13502 ;; Registers used:
 13503 ;;		wreg, status,2, status,0, cstack
 13504 ;; Tracked objects:
 13505 ;;		On entry : 0/0
 13506 ;;		On exit  : 0/0
 13507 ;;		Unchanged: 0/0
 13508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13509 ;;      Params:         0       0       0       0       0       0       0
 13510 ;;      Locals:         0       3       0       0       0       0       0
 13511 ;;      Temps:          0       4       0       0       0       0       0
 13512 ;;      Totals:         0       7       0       0       0       0       0
 13513 ;;Total ram usage:        7 bytes
 13514 ;; Hardware stack levels used:    1
 13515 ;; Hardware stack levels required when called:    6
 13516 ;; This function calls:
 13517 ;;		___ftdiv
 13518 ;;		___ftge
 13519 ;;		___ftmul
 13520 ;;		___lltoft
 13521 ;; This function is called by:
 13522 ;;		_main
 13523 ;; This function uses a non-reentrant model
 13524 ;;
 13525                           
 13526                           	psect	text78
 13527  002CC6                     __ptext78:
 13528                           	opt stack 0
 13529  002CC6                     _CheckFlashPrecentage:
 13530                           	opt stack 24
 13531                           
 13532                           ;FlashApp.c: 167: double precentage = ((double)(0x7FF0 - writeAddress) / 0x7FF0) * 100;
 13533                           
 13534                           ; BSR set to: 1
 13535                           ;incstack = 0
 13536  002CC6  0EE0               	movlw	224
 13537  002CC8  6E2C               	movwf	___ftdiv@f2,c
 13538  002CCA  0EFF               	movlw	255
 13539  002CCC  6E2D               	movwf	___ftdiv@f2+1,c
 13540  002CCE  0E46               	movlw	70
 13541  002CD0  6E2E               	movwf	___ftdiv@f2+2,c
 13542  002CD2  C03F  F078         	movff	_writeAddress,??_CheckFlashPrecentage
 13543  002CD6  C040  F079         	movff	_writeAddress+1,??_CheckFlashPrecentage+1
 13544  002CDA  C041  F07A         	movff	_writeAddress+2,??_CheckFlashPrecentage+2
 13545  002CDE  C042  F07B         	movff	_writeAddress+3,??_CheckFlashPrecentage+3
 13546  002CE2  0100               	movlb	0	; () banked
 13547  002CE4  1F78               	comf	??_CheckFlashPrecentage& (0+255),f,b
 13548  002CE6  1F79               	comf	(??_CheckFlashPrecentage+1)& (0+255),f,b
 13549  002CE8  1F7A               	comf	(??_CheckFlashPrecentage+2)& (0+255),f,b
 13550  002CEA  1F7B               	comf	(??_CheckFlashPrecentage+3)& (0+255),f,b
 13551  002CEC  2B78               	incf	??_CheckFlashPrecentage& (0+255),f,b
 13552  002CEE  0E00               	movlw	0
 13553  002CF0  2379               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),f,b
 13554  002CF2  237A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),f,b
 13555  002CF4  237B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),f,b
 13556  002CF6  0EF0               	movlw	240
 13557  002CF8  2578               	addwf	??_CheckFlashPrecentage& (0+255),w,b
 13558  002CFA  6E20               	movwf	___lltoft@c,c
 13559  002CFC  0E7F               	movlw	127
 13560  002CFE  2179               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),w,b
 13561  002D00  6E21               	movwf	___lltoft@c+1,c
 13562  002D02  0E00               	movlw	0
 13563  002D04  217A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),w,b
 13564  002D06  6E22               	movwf	___lltoft@c+2,c
 13565  002D08  0E00               	movlw	0
 13566  002D0A  217B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),w,b
 13567  002D0C  6E23               	movwf	___lltoft@c+3,c
 13568  002D0E  EC76  F01B         	call	___lltoft	;wreg free
 13569  002D12  C020  F029         	movff	?___lltoft,___ftdiv@f1
 13570  002D16  C021  F02A         	movff	?___lltoft+1,___ftdiv@f1+1
 13571  002D1A  C022  F02B         	movff	?___lltoft+2,___ftdiv@f1+2
 13572  002D1E  EC95  F012         	call	___ftdiv	;wreg free
 13573  002D22  C029  F069         	movff	?___ftdiv,___ftmul@f1
 13574  002D26  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 13575  002D2A  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 13576  002D2E  0E00               	movlw	0
 13577  002D30  0100               	movlb	0	; () banked
 13578  002D32  6F6C               	movwf	___ftmul@f2& (0+255),b
 13579  002D34  0EC8               	movlw	200
 13580  002D36  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 13581  002D38  0E42               	movlw	66
 13582  002D3A  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 13583  002D3C  EC1A  F012         	call	___ftmul	;wreg free
 13584  002D40  C069  F07C         	movff	?___ftmul,CheckFlashPrecentage@precentage
 13585  002D44  C06A  F07D         	movff	?___ftmul+1,CheckFlashPrecentage@precentage+1
 13586  002D48  C06B  F07E         	movff	?___ftmul+2,CheckFlashPrecentage@precentage+2
 13587                           
 13588                           ;FlashApp.c: 168: return (precentage > 75) ? 1 : 0;
 13589  002D4C  0E00               	movlw	0
 13590  002D4E  6E18               	movwf	___ftge@ff1,c
 13591  002D50  0E96               	movlw	150
 13592  002D52  6E19               	movwf	___ftge@ff1+1,c
 13593  002D54  0E42               	movlw	66
 13594  002D56  6E1A               	movwf	___ftge@ff1+2,c
 13595  002D58  C07C  F01B         	movff	CheckFlashPrecentage@precentage,___ftge@ff2
 13596  002D5C  C07D  F01C         	movff	CheckFlashPrecentage@precentage+1,___ftge@ff2+1
 13597  002D60  C07E  F01D         	movff	CheckFlashPrecentage@precentage+2,___ftge@ff2+2
 13598  002D64  EC9E  F018         	call	___ftge	;wreg free
 13599  002D68  B0D8               	btfsc	status,0,c
 13600  002D6A  D002               	goto	u8900
 13601  002D6C  0E01               	movlw	1
 13602  002D6E  0012               	return	
 13603  002D70                     u8900:
 13604  002D70  0E00               	movlw	0
 13605  002D72  0012               	return	
 13606  002D74                     __end_of_CheckFlashPrecentage:
 13607                           	opt stack 0
 13608                           tosu	equ	0xFFF
 13609                           tosh	equ	0xFFE
 13610                           tosl	equ	0xFFD
 13611                           pclath	equ	0xFFA
 13612                           tblptru	equ	0xFF8
 13613                           tblptrh	equ	0xFF7
 13614                           tblptrl	equ	0xFF6
 13615                           tablat	equ	0xFF5
 13616                           prodh	equ	0xFF4
 13617                           prodl	equ	0xFF3
 13618                           intcon	equ	0xFF2
 13619                           intcon2	equ	0xFF1
 13620                           postinc0	equ	0xFEE
 13621                           plusw0	equ	0xFEB
 13622                           wreg	equ	0xFE8
 13623                           indf1	equ	0xFE7
 13624                           postdec1	equ	0xFE5
 13625                           fsr1h	equ	0xFE2
 13626                           fsr1l	equ	0xFE1
 13627                           indf2	equ	0xFDF
 13628                           postinc2	equ	0xFDE
 13629                           postdec2	equ	0xFDD
 13630                           plusw2	equ	0xFDB
 13631                           fsr2h	equ	0xFDA
 13632                           fsr2l	equ	0xFD9
 13633                           status	equ	0xFD8
 13634                           
 13635 ;; *************** function _BlinkOkLeds *****************
 13636 ;; Defined at:
 13637 ;;		line 24 in file "LedsApp.c"
 13638 ;; Parameters:    Size  Location     Type
 13639 ;;  state           1    wreg     enum E7594
 13640 ;; Auto vars:     Size  Location     Type
 13641 ;;  state           1   26[COMRAM] enum E7594
 13642 ;;  idx             2   27[COMRAM] int 
 13643 ;; Return value:  Size  Location     Type
 13644 ;;                  1    wreg      void 
 13645 ;; Registers used:
 13646 ;;		wreg, status,2, status,0
 13647 ;; Tracked objects:
 13648 ;;		On entry : 0/0
 13649 ;;		On exit  : 0/0
 13650 ;;		Unchanged: 0/0
 13651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13652 ;;      Params:         0       0       0       0       0       0       0
 13653 ;;      Locals:         3       0       0       0       0       0       0
 13654 ;;      Temps:          3       0       0       0       0       0       0
 13655 ;;      Totals:         6       0       0       0       0       0       0
 13656 ;;Total ram usage:        6 bytes
 13657 ;; Hardware stack levels used:    1
 13658 ;; Hardware stack levels required when called:    4
 13659 ;; This function calls:
 13660 ;;		Nothing
 13661 ;; This function is called by:
 13662 ;;		_main
 13663 ;; This function uses a non-reentrant model
 13664 ;;
 13665                           
 13666                           	psect	text79
 13667  0035D4                     __ptext79:
 13668                           	opt stack 0
 13669  0035D4                     _BlinkOkLeds:
 13670                           	opt stack 26
 13671                           
 13672                           ;incstack = 0
 13673                           ;BlinkOkLeds@state stored from wreg
 13674  0035D4  6E1B               	movwf	BlinkOkLeds@state,c
 13675                           
 13676                           ;LedsApp.c: 26: for(int idx = 0; idx < state; idx++)
 13677  0035D6  0E00               	movlw	0
 13678  0035D8  6E1D               	movwf	BlinkOkLeds@idx+1,c
 13679  0035DA  0E00               	movlw	0
 13680  0035DC  6E1C               	movwf	BlinkOkLeds@idx,c
 13681  0035DE                     l6510:
 13682  0035DE  501B               	movf	BlinkOkLeds@state,w,c
 13683  0035E0  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 13684  0035E2  6A19               	clrf	(??_BlinkOkLeds+1)& (0+255),c
 13685  0035E4  5018               	movf	??_BlinkOkLeds,w,c
 13686  0035E6  5C1C               	subwf	BlinkOkLeds@idx,w,c
 13687  0035E8  501D               	movf	BlinkOkLeds@idx+1,w,c
 13688  0035EA  0A80               	xorlw	128
 13689  0035EC  6E1A               	movwf	(??_BlinkOkLeds+2)& (0+255),c
 13690  0035EE  5019               	movf	??_BlinkOkLeds+1,w,c
 13691  0035F0  0A80               	xorlw	128
 13692  0035F2  581A               	subwfb	(??_BlinkOkLeds+2)& (0+255),w,c
 13693  0035F4  B0D8               	btfsc	status,0,c
 13694  0035F6  0012               	return	
 13695                           
 13696                           ;LedsApp.c: 27: {
 13697                           ;LedsApp.c: 28: LATCbits.LATC0 = 0;
 13698  0035F8  908B               	bcf	3979,0,c	;volatile
 13699                           
 13700                           ;LedsApp.c: 29: _delay((unsigned long)((100)*(8000000/4000.0)));
 13701  0035FA  0E02               	movlw	2
 13702  0035FC  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 13703  0035FE  0E04               	movlw	4
 13704  003600  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 13705  003602  0EBA               	movlw	186
 13706  003604                     u9097:
 13707  003604  2EE8               	decfsz	wreg,f,c
 13708  003606  D7FE               	bra	u9097
 13709  003608  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 13710  00360A  D7FC               	bra	u9097
 13711  00360C  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 13712  00360E  D7FA               	bra	u9097
 13713  003610  D000               	nop2	
 13714                           
 13715                           ;LedsApp.c: 30: LATCbits.LATC0 = 1;
 13716  003612  808B               	bsf	3979,0,c	;volatile
 13717                           
 13718                           ;LedsApp.c: 31: _delay((unsigned long)((100)*(8000000/4000.0)));
 13719  003614  0E02               	movlw	2
 13720  003616  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 13721  003618  0E04               	movlw	4
 13722  00361A  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 13723  00361C  0EBA               	movlw	186
 13724  00361E                     u9107:
 13725  00361E  2EE8               	decfsz	wreg,f,c
 13726  003620  D7FE               	bra	u9107
 13727  003622  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 13728  003624  D7FC               	bra	u9107
 13729  003626  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 13730  003628  D7FA               	bra	u9107
 13731  00362A  D000               	nop2	
 13732  00362C  4A1C               	infsnz	BlinkOkLeds@idx,f,c
 13733  00362E  2A1D               	incf	BlinkOkLeds@idx+1,f,c
 13734  003630  D7D6               	goto	l6510
 13735  003632                     __end_of_BlinkOkLeds:
 13736                           	opt stack 0
 13737                           tosu	equ	0xFFF
 13738                           tosh	equ	0xFFE
 13739                           tosl	equ	0xFFD
 13740                           pclath	equ	0xFFA
 13741                           tblptru	equ	0xFF8
 13742                           tblptrh	equ	0xFF7
 13743                           tblptrl	equ	0xFF6
 13744                           tablat	equ	0xFF5
 13745                           prodh	equ	0xFF4
 13746                           prodl	equ	0xFF3
 13747                           intcon	equ	0xFF2
 13748                           intcon2	equ	0xFF1
 13749                           postinc0	equ	0xFEE
 13750                           plusw0	equ	0xFEB
 13751                           wreg	equ	0xFE8
 13752                           indf1	equ	0xFE7
 13753                           postdec1	equ	0xFE5
 13754                           fsr1h	equ	0xFE2
 13755                           fsr1l	equ	0xFE1
 13756                           indf2	equ	0xFDF
 13757                           postinc2	equ	0xFDE
 13758                           postdec2	equ	0xFDD
 13759                           plusw2	equ	0xFDB
 13760                           fsr2h	equ	0xFDA
 13761                           fsr2l	equ	0xFD9
 13762                           status	equ	0xFD8
 13763                           
 13764 ;; *************** function _BlinkErrorLeds *****************
 13765 ;; Defined at:
 13766 ;;		line 13 in file "LedsApp.c"
 13767 ;; Parameters:    Size  Location     Type
 13768 ;;  state           1    wreg     enum E7597
 13769 ;; Auto vars:     Size  Location     Type
 13770 ;;  state           1   26[COMRAM] enum E7597
 13771 ;;  idx             2   27[COMRAM] int 
 13772 ;; Return value:  Size  Location     Type
 13773 ;;                  1    wreg      void 
 13774 ;; Registers used:
 13775 ;;		wreg, status,2, status,0
 13776 ;; Tracked objects:
 13777 ;;		On entry : 0/0
 13778 ;;		On exit  : 0/0
 13779 ;;		Unchanged: 0/0
 13780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13781 ;;      Params:         0       0       0       0       0       0       0
 13782 ;;      Locals:         3       0       0       0       0       0       0
 13783 ;;      Temps:          3       0       0       0       0       0       0
 13784 ;;      Totals:         6       0       0       0       0       0       0
 13785 ;;Total ram usage:        6 bytes
 13786 ;; Hardware stack levels used:    1
 13787 ;; Hardware stack levels required when called:    4
 13788 ;; This function calls:
 13789 ;;		Nothing
 13790 ;; This function is called by:
 13791 ;;		_main
 13792 ;;		_SynthLdDetect
 13793 ;; This function uses a non-reentrant model
 13794 ;;
 13795                           
 13796                           	psect	text80
 13797  003632                     __ptext80:
 13798                           	opt stack 0
 13799  003632                     _BlinkErrorLeds:
 13800                           	opt stack 26
 13801                           
 13802                           ;incstack = 0
 13803                           ;BlinkErrorLeds@state stored from wreg
 13804  003632  6E1B               	movwf	BlinkErrorLeds@state,c
 13805                           
 13806                           ;LedsApp.c: 15: for(int idx = 0; idx < state; idx++)
 13807  003634  0E00               	movlw	0
 13808  003636  6E1D               	movwf	BlinkErrorLeds@idx+1,c
 13809  003638  0E00               	movlw	0
 13810  00363A  6E1C               	movwf	BlinkErrorLeds@idx,c
 13811  00363C                     l6498:
 13812  00363C  501B               	movf	BlinkErrorLeds@state,w,c
 13813  00363E  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 13814  003640  6A19               	clrf	(??_BlinkErrorLeds+1)& (0+255),c
 13815  003642  5018               	movf	??_BlinkErrorLeds,w,c
 13816  003644  5C1C               	subwf	BlinkErrorLeds@idx,w,c
 13817  003646  501D               	movf	BlinkErrorLeds@idx+1,w,c
 13818  003648  0A80               	xorlw	128
 13819  00364A  6E1A               	movwf	(??_BlinkErrorLeds+2)& (0+255),c
 13820  00364C  5019               	movf	??_BlinkErrorLeds+1,w,c
 13821  00364E  0A80               	xorlw	128
 13822  003650  581A               	subwfb	(??_BlinkErrorLeds+2)& (0+255),w,c
 13823  003652  B0D8               	btfsc	status,0,c
 13824  003654  0012               	return	
 13825                           
 13826                           ;LedsApp.c: 16: {
 13827                           ;LedsApp.c: 17: LATBbits.LATB4 = 0;
 13828  003656  988A               	bcf	3978,4,c	;volatile
 13829                           
 13830                           ;LedsApp.c: 18: _delay((unsigned long)((100)*(8000000/4000.0)));
 13831  003658  0E02               	movlw	2
 13832  00365A  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
 13833  00365C  0E04               	movlw	4
 13834  00365E  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 13835  003660  0EBA               	movlw	186
 13836  003662                     u9117:
 13837  003662  2EE8               	decfsz	wreg,f,c
 13838  003664  D7FE               	bra	u9117
 13839  003666  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
 13840  003668  D7FC               	bra	u9117
 13841  00366A  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
 13842  00366C  D7FA               	bra	u9117
 13843  00366E  D000               	nop2	
 13844                           
 13845                           ;LedsApp.c: 19: LATBbits.LATB4 = 1;
 13846  003670  888A               	bsf	3978,4,c	;volatile
 13847                           
 13848                           ;LedsApp.c: 20: _delay((unsigned long)((100)*(8000000/4000.0)));
 13849  003672  0E02               	movlw	2
 13850  003674  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
 13851  003676  0E04               	movlw	4
 13852  003678  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 13853  00367A  0EBA               	movlw	186
 13854  00367C                     u9127:
 13855  00367C  2EE8               	decfsz	wreg,f,c
 13856  00367E  D7FE               	bra	u9127
 13857  003680  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
 13858  003682  D7FC               	bra	u9127
 13859  003684  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
 13860  003686  D7FA               	bra	u9127
 13861  003688  D000               	nop2	
 13862  00368A  4A1C               	infsnz	BlinkErrorLeds@idx,f,c
 13863  00368C  2A1D               	incf	BlinkErrorLeds@idx+1,f,c
 13864  00368E  D7D6               	goto	l6498
 13865  003690                     __end_of_BlinkErrorLeds:
 13866                           	opt stack 0
 13867                           tosu	equ	0xFFF
 13868                           tosh	equ	0xFFE
 13869                           tosl	equ	0xFFD
 13870                           pclath	equ	0xFFA
 13871                           tblptru	equ	0xFF8
 13872                           tblptrh	equ	0xFF7
 13873                           tblptrl	equ	0xFF6
 13874                           tablat	equ	0xFF5
 13875                           prodh	equ	0xFF4
 13876                           prodl	equ	0xFF3
 13877                           intcon	equ	0xFF2
 13878                           intcon2	equ	0xFF1
 13879                           postinc0	equ	0xFEE
 13880                           plusw0	equ	0xFEB
 13881                           wreg	equ	0xFE8
 13882                           indf1	equ	0xFE7
 13883                           postdec1	equ	0xFE5
 13884                           fsr1h	equ	0xFE2
 13885                           fsr1l	equ	0xFE1
 13886                           indf2	equ	0xFDF
 13887                           postinc2	equ	0xFDE
 13888                           postdec2	equ	0xFDD
 13889                           plusw2	equ	0xFDB
 13890                           fsr2h	equ	0xFDA
 13891                           fsr2l	equ	0xFD9
 13892                           status	equ	0xFD8
 13893                           
 13894 ;; *************** function _AdcConvert *****************
 13895 ;; Defined at:
 13896 ;;		line 43 in file "AdcApp.c"
 13897 ;; Parameters:    Size  Location     Type
 13898 ;;		None
 13899 ;; Auto vars:     Size  Location     Type
 13900 ;;  _adcResult      2   83[BANK0 ] unsigned int 
 13901 ;;  _adcResult      2   85[BANK0 ] unsigned int 
 13902 ;;  adcRes          2   94[BANK0 ] unsigned int 
 13903 ;;  ldTxSate        2   89[BANK0 ] unsigned int 
 13904 ;;  ldRxSate        2   87[BANK0 ] unsigned int 
 13905 ;;  idx             1   96[BANK0 ] unsigned char 
 13906 ;; Return value:  Size  Location     Type
 13907 ;;                  1    wreg      void 
 13908 ;; Registers used:
 13909 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13910 ;; Tracked objects:
 13911 ;;		On entry : 0/0
 13912 ;;		On exit  : 0/0
 13913 ;;		Unchanged: 0/0
 13914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13915 ;;      Params:         0       0       0       0       0       0       0
 13916 ;;      Locals:         0      14       0       0       0       0       0
 13917 ;;      Temps:          0       2       0       0       0       0       0
 13918 ;;      Totals:         0      16       0       0       0       0       0
 13919 ;;Total ram usage:       16 bytes
 13920 ;; Hardware stack levels used:    1
 13921 ;; Hardware stack levels required when called:    9
 13922 ;; This function calls:
 13923 ;;		_ADC_GetConversion
 13924 ;;		_FlashSampleWrite
 13925 ;;		_GetUint16FromBitArray
 13926 ;;		___ftdiv
 13927 ;;		___ftmul
 13928 ;;		___fttol
 13929 ;;		___lwtoft
 13930 ;;		_pow
 13931 ;; This function is called by:
 13932 ;;		_main
 13933 ;; This function uses a non-reentrant model
 13934 ;;
 13935                           
 13936                           	psect	text81
 13937  000F66                     __ptext81:
 13938                           	opt stack 0
 13939  000F66                     _AdcConvert:
 13940                           	opt stack 21
 13941                           
 13942                           ;AdcApp.c: 48: uint16_t adcRes = 0;
 13943                           
 13944                           ;incstack = 0
 13945  000F66  0E00               	movlw	0
 13946  000F68  0100               	movlb	0	; () banked
 13947  000F6A  6FBF               	movwf	(AdcConvert@adcRes+1)& (0+255),b
 13948  000F6C  0E00               	movlw	0
 13949  000F6E  6FBE               	movwf	AdcConvert@adcRes& (0+255),b
 13950                           
 13951                           ;AdcApp.c: 49: uint8_t idx = 0;
 13952  000F70  0E00               	movlw	0
 13953  000F72  6FC0               	movwf	AdcConvert@idx& (0+255),b
 13954                           
 13955                           ;AdcApp.c: 50: uint16_t ldRxSate = 0, ldTxSate = 0;
 13956  000F74  0E00               	movlw	0
 13957  000F76  6FB8               	movwf	(AdcConvert@ldRxSate+1)& (0+255),b
 13958  000F78  0E00               	movlw	0
 13959  000F7A  6FB7               	movwf	AdcConvert@ldRxSate& (0+255),b
 13960  000F7C  0E00               	movlw	0
 13961  000F7E  6FBA               	movwf	(AdcConvert@ldTxSate+1)& (0+255),b
 13962  000F80  0E00               	movlw	0
 13963  000F82  6FB9               	movwf	AdcConvert@ldTxSate& (0+255),b
 13964                           
 13965                           ;AdcApp.c: 51: if (adcSampleMode == CIRCULAR)
 13966  000F84  503E               	movf	_adcSampleMode,w,c
 13967  000F86  A4D8               	btfss	status,2,c
 13968  000F88  D0A3               	goto	l126
 13969                           
 13970                           ; BSR set to: 0
 13971                           ;AdcApp.c: 52: {
 13972                           ;AdcApp.c: 53: for(idx = 0; idx < (9); idx++)
 13973  000F8A  0E00               	movlw	0
 13974  000F8C  6FC0               	movwf	AdcConvert@idx& (0+255),b
 13975  000F8E                     l8652:
 13976                           
 13977                           ; BSR set to: 0
 13978  000F8E  0E08               	movlw	8
 13979  000F90  65C0               	cpfsgt	AdcConvert@idx& (0+255),b
 13980  000F92  D001               	goto	l127
 13981  000F94  D06D               	goto	u8760
 13982  000F96                     l127:
 13983                           
 13984                           ; BSR set to: 0
 13985                           ;AdcApp.c: 54: {
 13986                           ;AdcApp.c: 55: adc_result_t _adcResult = ADC_GetConversion(channelArr[idx]);
 13987                           
 13988                           ; BSR set to: 0
 13989  000F96  51C0               	movf	AdcConvert@idx& (0+255),w,b
 13990  000F98  0D01               	mullw	1
 13991  000F9A  0E42               	movlw	low _channelArr
 13992  000F9C  24F3               	addwf	prodl,w,c
 13993  000F9E  6EF6               	movwf	tblptrl,c
 13994  000FA0  0E06               	movlw	high _channelArr
 13995  000FA2  20F4               	addwfc	prodh,w,c
 13996  000FA4  6EF7               	movwf	tblptrh,c
 13997  000FA6                     	if	0	;There are less than 3 active tblptr bytes
 13998  000FA6                     	endif
 13999  000FA6  0008               	tblrd		*
 14000  000FA8  50F5               	movf	tablat,w,c
 14001  000FAA  EC32  F01F         	call	_ADC_GetConversion
 14002  000FAE  C018  F0B3         	movff	?_ADC_GetConversion,AdcConvert@_adcResult
 14003  000FB2  C019  F0B4         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult+1
 14004                           
 14005                           ;AdcApp.c: 56: adcRes = (_adcResult/pow(2,(10)))*(3340);
 14006  000FB6  0E00               	movlw	0
 14007  000FB8  0100               	movlb	0	; () banked
 14008  000FBA  6FA3               	movwf	pow@y& (0+255),b
 14009  000FBC  0E20               	movlw	32
 14010  000FBE  6FA4               	movwf	(pow@y+1)& (0+255),b
 14011  000FC0  0E41               	movlw	65
 14012  000FC2  6FA5               	movwf	(pow@y+2)& (0+255),b
 14013  000FC4  0E00               	movlw	0
 14014  000FC6  6FA0               	movwf	pow@x& (0+255),b
 14015  000FC8  0E00               	movlw	0
 14016  000FCA  6FA1               	movwf	(pow@x+1)& (0+255),b
 14017  000FCC  0E40               	movlw	64
 14018  000FCE  6FA2               	movwf	(pow@x+2)& (0+255),b
 14019  000FD0  EC77  F00D         	call	_pow	;wreg free
 14020  000FD4  C0A0  F0BB         	movff	?_pow,_AdcConvert$3584
 14021  000FD8  C0A1  F0BC         	movff	?_pow+1,_AdcConvert$3584+1
 14022  000FDC  C0A2  F0BD         	movff	?_pow+2,_AdcConvert$3584+2
 14023                           
 14024                           ;AdcApp.c: 56: adcRes = (_adcResult/pow(2,(10)))*(3340);
 14025  000FE0  0EC0               	movlw	192
 14026  000FE2  0100               	movlb	0	; () banked
 14027  000FE4  6F6C               	movwf	___ftmul@f2& (0+255),b
 14028  000FE6  0E50               	movlw	80
 14029  000FE8  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 14030  000FEA  0E45               	movlw	69
 14031  000FEC  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 14032  000FEE  C0BB  F02C         	movff	_AdcConvert$3584,___ftdiv@f2
 14033  000FF2  C0BC  F02D         	movff	_AdcConvert$3584+1,___ftdiv@f2+1
 14034  000FF6  C0BD  F02E         	movff	_AdcConvert$3584+2,___ftdiv@f2+2
 14035  000FFA  C0B3  F020         	movff	AdcConvert@_adcResult,___lwtoft@c
 14036  000FFE  C0B4  F021         	movff	AdcConvert@_adcResult+1,___lwtoft@c+1
 14037  001002  ECE9  F01F         	call	___lwtoft	;wreg free
 14038  001006  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 14039  00100A  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 14040  00100E  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 14041  001012  EC95  F012         	call	___ftdiv	;wreg free
 14042  001016  C029  F069         	movff	?___ftdiv,___ftmul@f1
 14043  00101A  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 14044  00101E  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 14045  001022  EC1A  F012         	call	___ftmul	;wreg free
 14046  001026  C069  F078         	movff	?___ftmul,___fttol@f1
 14047  00102A  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 14048  00102E  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 14049  001032  EC23  F011         	call	___fttol	;wreg free
 14050  001036  C078  F0BE         	movff	?___fttol,AdcConvert@adcRes
 14051  00103A  C079  F0BF         	movff	?___fttol+1,AdcConvert@adcRes+1
 14052                           
 14053                           ;AdcApp.c: 57: FlashSampleWrite(adcRes, idx + 1);
 14054  00103E  C0BE  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 14055  001042  C0BF  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 14056  001046  0100               	movlb	0	; () banked
 14057  001048  29C0               	incf	AdcConvert@idx& (0+255),w,b
 14058  00104A  6E2F               	movwf	FlashSampleWrite@channelNum,c
 14059  00104C  ECA3  F010         	call	_FlashSampleWrite	;wreg free
 14060                           
 14061                           ;AdcApp.c: 58: _delay((unsigned long)((250)*(8000000/4000.0)));
 14062  001050  0E03               	movlw	3
 14063  001052  0100               	movlb	0	; () banked
 14064  001054  6FB2               	movwf	(??_AdcConvert+1)& (0+255),b
 14065  001056  0E8A               	movlw	138
 14066  001058  6FB1               	movwf	??_AdcConvert& (0+255),b
 14067  00105A  0E55               	movlw	85
 14068  00105C                     u9137:
 14069  00105C  2EE8               	decfsz	wreg,f,c
 14070  00105E  D7FE               	bra	u9137
 14071  001060  2FB1               	decfsz	??_AdcConvert& (0+255),f,b
 14072  001062  D7FC               	bra	u9137
 14073  001064  2FB2               	decfsz	(??_AdcConvert+1)& (0+255),f,b
 14074  001066  D7FA               	bra	u9137
 14075  001068  D000               	nop2	
 14076  00106A  0100               	movlb	0	; () banked
 14077  00106C  2BC0               	incf	AdcConvert@idx& (0+255),f,b
 14078  00106E  D78F               	goto	l8652
 14079  001070                     u8760:
 14080                           
 14081                           ; BSR set to: 0
 14082                           ;AdcApp.c: 59: }
 14083                           ;AdcApp.c: 62: ldRxSate = GetUint16FromBitArray(synthLdRxArray, 12);
 14084                           
 14085                           ; BSR set to: 0
 14086  001070  0EA6               	movlw	low _synthLdRxArray
 14087  001072  6E18               	movwf	GetUint16FromBitArray@bitarray,c
 14088  001074  0E01               	movlw	high _synthLdRxArray
 14089  001076  6E19               	movwf	GetUint16FromBitArray@bitarray+1,c
 14090  001078  0E00               	movlw	0
 14091  00107A  6E1B               	movwf	GetUint16FromBitArray@numOfBits+1,c
 14092  00107C  0E0C               	movlw	12
 14093  00107E  6E1A               	movwf	GetUint16FromBitArray@numOfBits,c
 14094  001080  EC51  F01A         	call	_GetUint16FromBitArray	;wreg free
 14095  001084  C018  F0B7         	movff	?_GetUint16FromBitArray,AdcConvert@ldRxSate
 14096  001088  C019  F0B8         	movff	?_GetUint16FromBitArray+1,AdcConvert@ldRxSate+1
 14097                           
 14098                           ;AdcApp.c: 63: FlashSampleWrite(ldRxSate, idx + 1);
 14099  00108C  C0B7  F02D         	movff	AdcConvert@ldRxSate,FlashSampleWrite@sampleData
 14100  001090  C0B8  F02E         	movff	AdcConvert@ldRxSate+1,FlashSampleWrite@sampleData+1
 14101  001094  0100               	movlb	0	; () banked
 14102  001096  29C0               	incf	AdcConvert@idx& (0+255),w,b
 14103  001098  6E2F               	movwf	FlashSampleWrite@channelNum,c
 14104  00109A  ECA3  F010         	call	_FlashSampleWrite	;wreg free
 14105                           
 14106                           ;AdcApp.c: 64: ldTxSate = GetUint16FromBitArray(synthLdTxArray, 12);
 14107  00109E  0E9A               	movlw	low _synthLdTxArray
 14108  0010A0  6E18               	movwf	GetUint16FromBitArray@bitarray,c
 14109  0010A2  0E01               	movlw	high _synthLdTxArray
 14110  0010A4  6E19               	movwf	GetUint16FromBitArray@bitarray+1,c
 14111  0010A6  0E00               	movlw	0
 14112  0010A8  6E1B               	movwf	GetUint16FromBitArray@numOfBits+1,c
 14113  0010AA  0E0C               	movlw	12
 14114  0010AC  6E1A               	movwf	GetUint16FromBitArray@numOfBits,c
 14115  0010AE  EC51  F01A         	call	_GetUint16FromBitArray	;wreg free
 14116  0010B2  C018  F0B9         	movff	?_GetUint16FromBitArray,AdcConvert@ldTxSate
 14117  0010B6  C019  F0BA         	movff	?_GetUint16FromBitArray+1,AdcConvert@ldTxSate+1
 14118                           
 14119                           ;AdcApp.c: 65: FlashSampleWrite(ldTxSate, idx + 2);
 14120  0010BA  C0B9  F02D         	movff	AdcConvert@ldTxSate,FlashSampleWrite@sampleData
 14121  0010BE  C0BA  F02E         	movff	AdcConvert@ldTxSate+1,FlashSampleWrite@sampleData+1
 14122  0010C2  0100               	movlb	0	; () banked
 14123  0010C4  51C0               	movf	AdcConvert@idx& (0+255),w,b
 14124  0010C6  0F02               	addlw	2
 14125  0010C8  6E2F               	movwf	FlashSampleWrite@channelNum,c
 14126  0010CA  ECA3  F010         	call	_FlashSampleWrite	;wreg free
 14127                           
 14128                           ;AdcApp.c: 67: }
 14129  0010CE  0012               	return	
 14130  0010D0                     l126:
 14131                           
 14132                           ;AdcApp.c: 68: else if (adcSampleMode == SINGLE_CHANNEL)
 14133  0010D0  043E               	decf	_adcSampleMode,w,c
 14134  0010D2  A4D8               	btfss	status,2,c
 14135  0010D4  0012               	return	
 14136                           
 14137                           ;AdcApp.c: 69: {
 14138                           ;AdcApp.c: 70: adc_result_t _adcResult = ADC_GetConversion(channelArr[channel]);
 14139  0010D6  0100               	movlb	0	; () banked
 14140  0010D8  51F8               	movf	_channel& (0+255),w,b
 14141  0010DA  0D01               	mullw	1
 14142  0010DC  0E42               	movlw	low _channelArr
 14143  0010DE  24F3               	addwf	prodl,w,c
 14144  0010E0  6EF6               	movwf	tblptrl,c
 14145  0010E2  0E06               	movlw	high _channelArr
 14146  0010E4  20F4               	addwfc	prodh,w,c
 14147  0010E6  6EF7               	movwf	tblptrh,c
 14148  0010E8                     	if	0	;There are less than 3 active tblptr bytes
 14149  0010E8                     	endif
 14150  0010E8  0008               	tblrd		*
 14151  0010EA  50F5               	movf	tablat,w,c
 14152  0010EC  EC32  F01F         	call	_ADC_GetConversion
 14153  0010F0  C018  F0B5         	movff	?_ADC_GetConversion,AdcConvert@_adcResult_348
 14154  0010F4  C019  F0B6         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult_348+1
 14155                           
 14156                           ;AdcApp.c: 71: adcRes = (_adcResult/pow(2,(10)))*(3340);
 14157  0010F8  0E00               	movlw	0
 14158  0010FA  0100               	movlb	0	; () banked
 14159  0010FC  6FA3               	movwf	pow@y& (0+255),b
 14160  0010FE  0E20               	movlw	32
 14161  001100  6FA4               	movwf	(pow@y+1)& (0+255),b
 14162  001102  0E41               	movlw	65
 14163  001104  6FA5               	movwf	(pow@y+2)& (0+255),b
 14164  001106  0E00               	movlw	0
 14165  001108  6FA0               	movwf	pow@x& (0+255),b
 14166  00110A  0E00               	movlw	0
 14167  00110C  6FA1               	movwf	(pow@x+1)& (0+255),b
 14168  00110E  0E40               	movlw	64
 14169  001110  6FA2               	movwf	(pow@x+2)& (0+255),b
 14170  001112  EC77  F00D         	call	_pow	;wreg free
 14171  001116  C0A0  F0BB         	movff	?_pow,_AdcConvert$3584
 14172  00111A  C0A1  F0BC         	movff	?_pow+1,_AdcConvert$3584+1
 14173  00111E  C0A2  F0BD         	movff	?_pow+2,_AdcConvert$3584+2
 14174                           
 14175                           ;AdcApp.c: 71: adcRes = (_adcResult/pow(2,(10)))*(3340);
 14176  001122  0EC0               	movlw	192
 14177  001124  0100               	movlb	0	; () banked
 14178  001126  6F6C               	movwf	___ftmul@f2& (0+255),b
 14179  001128  0E50               	movlw	80
 14180  00112A  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 14181  00112C  0E45               	movlw	69
 14182  00112E  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 14183  001130  C0BB  F02C         	movff	_AdcConvert$3584,___ftdiv@f2
 14184  001134  C0BC  F02D         	movff	_AdcConvert$3584+1,___ftdiv@f2+1
 14185  001138  C0BD  F02E         	movff	_AdcConvert$3584+2,___ftdiv@f2+2
 14186  00113C  C0B5  F020         	movff	AdcConvert@_adcResult_348,___lwtoft@c
 14187  001140  C0B6  F021         	movff	AdcConvert@_adcResult_348+1,___lwtoft@c+1
 14188  001144  ECE9  F01F         	call	___lwtoft	;wreg free
 14189  001148  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 14190  00114C  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 14191  001150  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 14192  001154  EC95  F012         	call	___ftdiv	;wreg free
 14193  001158  C029  F069         	movff	?___ftdiv,___ftmul@f1
 14194  00115C  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 14195  001160  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 14196  001164  EC1A  F012         	call	___ftmul	;wreg free
 14197  001168  C069  F078         	movff	?___ftmul,___fttol@f1
 14198  00116C  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 14199  001170  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 14200  001174  EC23  F011         	call	___fttol	;wreg free
 14201  001178  C078  F0BE         	movff	?___fttol,AdcConvert@adcRes
 14202  00117C  C079  F0BF         	movff	?___fttol+1,AdcConvert@adcRes+1
 14203                           
 14204                           ;AdcApp.c: 72: FlashSampleWrite(adcRes, 1);
 14205  001180  C0BE  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 14206  001184  C0BF  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 14207  001188  0E01               	movlw	1
 14208  00118A  6E2F               	movwf	FlashSampleWrite@channelNum,c
 14209  00118C  ECA3  F010         	call	_FlashSampleWrite	;wreg free
 14210  001190  0012               	return	
 14211  001192                     __end_of_AdcConvert:
 14212                           	opt stack 0
 14213                           tosu	equ	0xFFF
 14214                           tosh	equ	0xFFE
 14215                           tosl	equ	0xFFD
 14216                           pclath	equ	0xFFA
 14217                           tblptru	equ	0xFF8
 14218                           tblptrh	equ	0xFF7
 14219                           tblptrl	equ	0xFF6
 14220                           tablat	equ	0xFF5
 14221                           prodh	equ	0xFF4
 14222                           prodl	equ	0xFF3
 14223                           intcon	equ	0xFF2
 14224                           intcon2	equ	0xFF1
 14225                           postinc0	equ	0xFEE
 14226                           plusw0	equ	0xFEB
 14227                           wreg	equ	0xFE8
 14228                           indf1	equ	0xFE7
 14229                           postdec1	equ	0xFE5
 14230                           fsr1h	equ	0xFE2
 14231                           fsr1l	equ	0xFE1
 14232                           indf2	equ	0xFDF
 14233                           postinc2	equ	0xFDE
 14234                           postdec2	equ	0xFDD
 14235                           plusw2	equ	0xFDB
 14236                           fsr2h	equ	0xFDA
 14237                           fsr2l	equ	0xFD9
 14238                           status	equ	0xFD8
 14239                           
 14240 ;; *************** function _pow *****************
 14241 ;; Defined at:
 14242 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
 14243 ;; Parameters:    Size  Location     Type
 14244 ;;  x               3   64[BANK0 ] void 
 14245 ;;  y               3   67[BANK0 ] void 
 14246 ;; Auto vars:     Size  Location     Type
 14247 ;;  yi              4   77[BANK0 ] unsigned long 
 14248 ;;  sign            1   76[BANK0 ] unsigned char 
 14249 ;; Return value:  Size  Location     Type
 14250 ;;                  3   64[BANK0 ] unsigned char 
 14251 ;; Registers used:
 14252 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14253 ;; Tracked objects:
 14254 ;;		On entry : 0/0
 14255 ;;		On exit  : 0/0
 14256 ;;		Unchanged: 0/0
 14257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14258 ;;      Params:         0       6       0       0       0       0       0
 14259 ;;      Locals:         0      11       0       0       0       0       0
 14260 ;;      Temps:          0       0       0       0       0       0       0
 14261 ;;      Totals:         0      17       0       0       0       0       0
 14262 ;;Total ram usage:       17 bytes
 14263 ;; Hardware stack levels used:    1
 14264 ;; Hardware stack levels required when called:    8
 14265 ;; This function calls:
 14266 ;;		___ftge
 14267 ;;		___ftmul
 14268 ;;		___ftneg
 14269 ;;		___fttol
 14270 ;;		___lltoft
 14271 ;;		_exp
 14272 ;;		_log
 14273 ;; This function is called by:
 14274 ;;		_AdcConvert
 14275 ;;		_ReadIntFromEeprom
 14276 ;; This function uses a non-reentrant model
 14277 ;;
 14278                           
 14279                           	psect	text82
 14280  001AEE                     __ptext82:
 14281                           	opt stack 0
 14282  001AEE                     _pow:
 14283                           	opt stack 18
 14284                           
 14285                           ;incstack = 0
 14286  001AEE  0E00               	movlw	0
 14287  001AF0  0100               	movlb	0	; () banked
 14288  001AF2  6FAC               	movwf	pow@sign& (0+255),b
 14289                           
 14290                           ; BSR set to: 0
 14291  001AF4  51A0               	movf	pow@x& (0+255),w,b
 14292  001AF6  11A1               	iorwf	(pow@x+1)& (0+255),w,b
 14293  001AF8  11A2               	iorwf	(pow@x+2)& (0+255),w,b
 14294  001AFA  A4D8               	btfss	status,2,c
 14295  001AFC  D01D               	goto	l2031
 14296                           
 14297                           ; BSR set to: 0
 14298  001AFE  0E00               	movlw	0
 14299  001B00  6E18               	movwf	___ftge@ff1,c
 14300  001B02  0E00               	movlw	0
 14301  001B04  6E19               	movwf	___ftge@ff1+1,c
 14302  001B06  0E00               	movlw	0
 14303  001B08  6E1A               	movwf	___ftge@ff1+2,c
 14304  001B0A  C0A3  F01B         	movff	pow@y,___ftge@ff2
 14305  001B0E  C0A4  F01C         	movff	pow@y+1,___ftge@ff2+1
 14306  001B12  C0A5  F01D         	movff	pow@y+2,___ftge@ff2+2
 14307  001B16  EC9E  F018         	call	___ftge	;wreg free
 14308  001B1A  A0D8               	btfss	status,0,c
 14309  001B1C  D005               	goto	l2032
 14310  001B1E  0E00               	movlw	0
 14311  001B20  0101               	movlb	1	; () banked
 14312  001B22  6F31               	movwf	(_errno+1)& (0+255),b
 14313  001B24  0E21               	movlw	33
 14314  001B26  6F30               	movwf	_errno& (0+255),b
 14315  001B28                     l2032:
 14316  001B28  0E00               	movlw	0
 14317  001B2A  0100               	movlb	0	; () banked
 14318  001B2C  6FA0               	movwf	?_pow& (0+255),b
 14319  001B2E  0E00               	movlw	0
 14320  001B30  6FA1               	movwf	(?_pow+1)& (0+255),b
 14321  001B32  0E00               	movlw	0
 14322  001B34  6FA2               	movwf	(?_pow+2)& (0+255),b
 14323                           
 14324                           ; BSR set to: 0
 14325  001B36  0012               	return	
 14326  001B38                     l2031:
 14327                           
 14328                           ; BSR set to: 0
 14329                           
 14330                           ; BSR set to: 0
 14331  001B38  51A3               	movf	pow@y& (0+255),w,b
 14332  001B3A  11A4               	iorwf	(pow@y+1)& (0+255),w,b
 14333  001B3C  11A5               	iorwf	(pow@y+2)& (0+255),w,b
 14334  001B3E  A4D8               	btfss	status,2,c
 14335  001B40  D007               	goto	l2034
 14336                           
 14337                           ; BSR set to: 0
 14338  001B42  0E00               	movlw	0
 14339  001B44  6FA0               	movwf	?_pow& (0+255),b
 14340  001B46  0E80               	movlw	128
 14341  001B48  6FA1               	movwf	(?_pow+1)& (0+255),b
 14342  001B4A  0E3F               	movlw	63
 14343  001B4C  6FA2               	movwf	(?_pow+2)& (0+255),b
 14344                           
 14345                           ; BSR set to: 0
 14346  001B4E  0012               	return	
 14347  001B50                     l2034:
 14348                           
 14349                           ; BSR set to: 0
 14350                           
 14351                           ; BSR set to: 0
 14352  001B50  AFA2               	btfss	(pow@x+2)& (0+255),7,b
 14353  001B52  D043               	goto	l2035
 14354                           
 14355                           ; BSR set to: 0
 14356  001B54  C0A3  F078         	movff	pow@y,___fttol@f1
 14357  001B58  C0A4  F079         	movff	pow@y+1,___fttol@f1+1
 14358  001B5C  C0A5  F07A         	movff	pow@y+2,___fttol@f1+2
 14359  001B60  EC23  F011         	call	___fttol	;wreg free
 14360  001B64  C078  F0AD         	movff	?___fttol,pow@yi
 14361  001B68  C079  F0AE         	movff	?___fttol+1,pow@yi+1
 14362  001B6C  C07A  F0AF         	movff	?___fttol+2,pow@yi+2
 14363  001B70  C07B  F0B0         	movff	?___fttol+3,pow@yi+3
 14364  001B74  C0AD  F020         	movff	pow@yi,___lltoft@c
 14365  001B78  C0AE  F021         	movff	pow@yi+1,___lltoft@c+1
 14366  001B7C  C0AF  F022         	movff	pow@yi+2,___lltoft@c+2
 14367  001B80  C0B0  F023         	movff	pow@yi+3,___lltoft@c+3
 14368  001B84  EC76  F01B         	call	___lltoft	;wreg free
 14369  001B88  0100               	movlb	0	; () banked
 14370  001B8A  51A3               	movf	pow@y& (0+255),w,b
 14371  001B8C  1820               	xorwf	?___lltoft,w,c
 14372  001B8E  E107               	bnz	u7350
 14373  001B90  51A4               	movf	(pow@y+1)& (0+255),w,b
 14374  001B92  1821               	xorwf	?___lltoft+1,w,c
 14375  001B94  E104               	bnz	u7350
 14376  001B96  51A5               	movf	(pow@y+2)& (0+255),w,b
 14377  001B98  1822               	xorwf	?___lltoft+2,w,c
 14378  001B9A  B4D8               	btfsc	status,2,c
 14379  001B9C  D00D               	goto	l2036
 14380  001B9E                     u7350:
 14381                           
 14382                           ; BSR set to: 0
 14383  001B9E  0E00               	movlw	0
 14384  001BA0  0101               	movlb	1	; () banked
 14385  001BA2  6F31               	movwf	(_errno+1)& (0+255),b
 14386  001BA4  0E21               	movlw	33
 14387  001BA6  6F30               	movwf	_errno& (0+255),b
 14388  001BA8  0E00               	movlw	0
 14389  001BAA  0100               	movlb	0	; () banked
 14390  001BAC  6FA0               	movwf	?_pow& (0+255),b
 14391  001BAE  0E00               	movlw	0
 14392  001BB0  6FA1               	movwf	(?_pow+1)& (0+255),b
 14393  001BB2  0E00               	movlw	0
 14394  001BB4  6FA2               	movwf	(?_pow+2)& (0+255),b
 14395                           
 14396                           ; BSR set to: 0
 14397  001BB6  0012               	return	
 14398  001BB8                     l2036:
 14399                           
 14400                           ; BSR set to: 0
 14401                           
 14402                           ; BSR set to: 0
 14403  001BB8  51AD               	movf	pow@yi& (0+255),w,b
 14404  001BBA  0B01               	andlw	1
 14405  001BBC  6FAC               	movwf	pow@sign& (0+255),b
 14406                           
 14407                           ; BSR set to: 0
 14408  001BBE  C0A0  F018         	movff	pow@x,___ftneg@f1
 14409  001BC2  C0A1  F019         	movff	pow@x+1,___ftneg@f1+1
 14410  001BC6  C0A2  F01A         	movff	pow@x+2,___ftneg@f1+2
 14411  001BCA  ECD7  F01F         	call	___ftneg	;wreg free
 14412  001BCE  C018  F0A0         	movff	?___ftneg,pow@x
 14413  001BD2  C019  F0A1         	movff	?___ftneg+1,pow@x+1
 14414  001BD6  C01A  F0A2         	movff	?___ftneg+2,pow@x+2
 14415  001BDA                     l2035:
 14416  001BDA  C0A0  F08E         	movff	pow@x,log@x
 14417  001BDE  C0A1  F08F         	movff	pow@x+1,log@x+1
 14418  001BE2  C0A2  F090         	movff	pow@x+2,log@x+2
 14419  001BE6  ECF5  F00E         	call	_log	;wreg free
 14420  001BEA  C08E  F0A6         	movff	?_log,_pow$3587
 14421  001BEE  C08F  F0A7         	movff	?_log+1,_pow$3587+1
 14422  001BF2  C090  F0A8         	movff	?_log+2,_pow$3587+2
 14423  001BF6  C0A6  F069         	movff	_pow$3587,___ftmul@f1
 14424  001BFA  C0A7  F06A         	movff	_pow$3587+1,___ftmul@f1+1
 14425  001BFE  C0A8  F06B         	movff	_pow$3587+2,___ftmul@f1+2
 14426  001C02  C0A3  F06C         	movff	pow@y,___ftmul@f2
 14427  001C06  C0A4  F06D         	movff	pow@y+1,___ftmul@f2+1
 14428  001C0A  C0A5  F06E         	movff	pow@y+2,___ftmul@f2+2
 14429  001C0E  EC1A  F012         	call	___ftmul	;wreg free
 14430  001C12  C069  F0A9         	movff	?___ftmul,_pow$3588
 14431  001C16  C06A  F0AA         	movff	?___ftmul+1,_pow$3588+1
 14432  001C1A  C06B  F0AB         	movff	?___ftmul+2,_pow$3588+2
 14433  001C1E  C0A9  F097         	movff	_pow$3588,exp@x
 14434  001C22  C0AA  F098         	movff	_pow$3588+1,exp@x+1
 14435  001C26  C0AB  F099         	movff	_pow$3588+2,exp@x+2
 14436  001C2A  ECC7  F009         	call	_exp	;wreg free
 14437  001C2E  C097  F0A0         	movff	?_exp,pow@x
 14438  001C32  C098  F0A1         	movff	?_exp+1,pow@x+1
 14439  001C36  C099  F0A2         	movff	?_exp+2,pow@x+2
 14440  001C3A  0100               	movlb	0	; () banked
 14441  001C3C  51AC               	movf	pow@sign& (0+255),w,b
 14442  001C3E  B4D8               	btfsc	status,2,c
 14443  001C40  D00F               	goto	l2037
 14444                           
 14445                           ; BSR set to: 0
 14446  001C42  C0A0  F018         	movff	pow@x,___ftneg@f1
 14447  001C46  C0A1  F019         	movff	pow@x+1,___ftneg@f1+1
 14448  001C4A  C0A2  F01A         	movff	pow@x+2,___ftneg@f1+2
 14449  001C4E  ECD7  F01F         	call	___ftneg	;wreg free
 14450  001C52  C018  F0A0         	movff	?___ftneg,?_pow
 14451  001C56  C019  F0A1         	movff	?___ftneg+1,?_pow+1
 14452  001C5A  C01A  F0A2         	movff	?___ftneg+2,?_pow+2
 14453  001C5E  0012               	return	
 14454  001C60                     l2037:
 14455                           
 14456                           ; BSR set to: 0
 14457  001C60  C0A0  F0A0         	movff	pow@x,?_pow
 14458  001C64  C0A1  F0A1         	movff	pow@x+1,?_pow+1
 14459  001C68  C0A2  F0A2         	movff	pow@x+2,?_pow+2
 14460  001C6C  0012               	return		;funcret
 14461  001C6E                     __end_of_pow:
 14462                           	opt stack 0
 14463                           tosu	equ	0xFFF
 14464                           tosh	equ	0xFFE
 14465                           tosl	equ	0xFFD
 14466                           pclath	equ	0xFFA
 14467                           tblptru	equ	0xFF8
 14468                           tblptrh	equ	0xFF7
 14469                           tblptrl	equ	0xFF6
 14470                           tablat	equ	0xFF5
 14471                           prodh	equ	0xFF4
 14472                           prodl	equ	0xFF3
 14473                           intcon	equ	0xFF2
 14474                           intcon2	equ	0xFF1
 14475                           postinc0	equ	0xFEE
 14476                           plusw0	equ	0xFEB
 14477                           wreg	equ	0xFE8
 14478                           indf1	equ	0xFE7
 14479                           postdec1	equ	0xFE5
 14480                           fsr1h	equ	0xFE2
 14481                           fsr1l	equ	0xFE1
 14482                           indf2	equ	0xFDF
 14483                           postinc2	equ	0xFDE
 14484                           postdec2	equ	0xFDD
 14485                           plusw2	equ	0xFDB
 14486                           fsr2h	equ	0xFDA
 14487                           fsr2l	equ	0xFD9
 14488                           status	equ	0xFD8
 14489                           
 14490 ;; *************** function _log *****************
 14491 ;; Defined at:
 14492 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
 14493 ;; Parameters:    Size  Location     Type
 14494 ;;  x               3   46[BANK0 ] unsigned char 
 14495 ;; Auto vars:     Size  Location     Type
 14496 ;;  exponent        2   49[BANK0 ] int 
 14497 ;; Return value:  Size  Location     Type
 14498 ;;                  3   46[BANK0 ] int 
 14499 ;; Registers used:
 14500 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14501 ;; Tracked objects:
 14502 ;;		On entry : 0/0
 14503 ;;		On exit  : 0/0
 14504 ;;		Unchanged: 0/0
 14505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14506 ;;      Params:         0       3       0       0       0       0       0
 14507 ;;      Locals:         0       2       0       0       0       0       0
 14508 ;;      Temps:          0       0       0       0       0       0       0
 14509 ;;      Totals:         0       5       0       0       0       0       0
 14510 ;;Total ram usage:        5 bytes
 14511 ;; Hardware stack levels used:    1
 14512 ;; Hardware stack levels required when called:    7
 14513 ;; This function calls:
 14514 ;;		___awtoft
 14515 ;;		___ftadd
 14516 ;;		___ftmul
 14517 ;;		_eval_poly
 14518 ;;		_frexp
 14519 ;; This function is called by:
 14520 ;;		_pow
 14521 ;; This function uses a non-reentrant model
 14522 ;;
 14523                           
 14524                           	psect	text83
 14525  001DEA                     __ptext83:
 14526                           	opt stack 0
 14527  001DEA                     _log:
 14528                           	opt stack 18
 14529                           
 14530                           ;incstack = 0
 14531  001DEA  0100               	movlb	0	; () banked
 14532  001DEC  AF90               	btfss	(log@x+2)& (0+255),7,b
 14533  001DEE  D00D               	goto	l2293
 14534                           
 14535                           ; BSR set to: 0
 14536  001DF0  0E00               	movlw	0
 14537  001DF2  0101               	movlb	1	; () banked
 14538  001DF4  6F31               	movwf	(_errno+1)& (0+255),b
 14539  001DF6  0E21               	movlw	33
 14540  001DF8  6F30               	movwf	_errno& (0+255),b
 14541  001DFA  0E00               	movlw	0
 14542  001DFC  0100               	movlb	0	; () banked
 14543  001DFE  6F8E               	movwf	?_log& (0+255),b
 14544  001E00  0E00               	movlw	0
 14545  001E02  6F8F               	movwf	(?_log+1)& (0+255),b
 14546  001E04  0E00               	movlw	0
 14547  001E06  6F90               	movwf	(?_log+2)& (0+255),b
 14548                           
 14549                           ; BSR set to: 0
 14550  001E08  0012               	return	
 14551  001E0A                     l2293:
 14552                           
 14553                           ; BSR set to: 0
 14554                           
 14555                           ; BSR set to: 0
 14556  001E0A  518E               	movf	log@x& (0+255),w,b
 14557  001E0C  118F               	iorwf	(log@x+1)& (0+255),w,b
 14558  001E0E  1190               	iorwf	(log@x+2)& (0+255),w,b
 14559  001E10  A4D8               	btfss	status,2,c
 14560  001E12  D00D               	goto	l2295
 14561                           
 14562                           ; BSR set to: 0
 14563  001E14  0E00               	movlw	0
 14564  001E16  0101               	movlb	1	; () banked
 14565  001E18  6F31               	movwf	(_errno+1)& (0+255),b
 14566  001E1A  0E22               	movlw	34
 14567  001E1C  6F30               	movwf	_errno& (0+255),b
 14568  001E1E  0E00               	movlw	0
 14569  001E20  0100               	movlb	0	; () banked
 14570  001E22  6F8E               	movwf	?_log& (0+255),b
 14571  001E24  0E00               	movlw	0
 14572  001E26  6F8F               	movwf	(?_log+1)& (0+255),b
 14573  001E28  0E00               	movlw	0
 14574  001E2A  6F90               	movwf	(?_log+2)& (0+255),b
 14575                           
 14576                           ; BSR set to: 0
 14577  001E2C  0012               	return	
 14578  001E2E                     l2295:
 14579                           
 14580                           ; BSR set to: 0
 14581                           
 14582                           ; BSR set to: 0
 14583  001E2E  0E00               	movlw	0
 14584  001E30  6F6C               	movwf	___ftmul@f2& (0+255),b
 14585  001E32  0E00               	movlw	0
 14586  001E34  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 14587  001E36  0E40               	movlw	64
 14588  001E38  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 14589  001E3A  0E91               	movlw	low log@exponent
 14590  001E3C  6E1B               	movwf	frexp@eptr,c
 14591  001E3E  0E00               	movlw	high log@exponent
 14592  001E40  6E1C               	movwf	frexp@eptr+1,c
 14593  001E42  C08E  F018         	movff	log@x,frexp@value
 14594  001E46  C08F  F019         	movff	log@x+1,frexp@value+1
 14595  001E4A  C090  F01A         	movff	log@x+2,frexp@value+2
 14596  001E4E  EC56  F018         	call	_frexp	;wreg free
 14597  001E52  C018  F069         	movff	?_frexp,___ftmul@f1
 14598  001E56  C019  F06A         	movff	?_frexp+1,___ftmul@f1+1
 14599  001E5A  C01A  F06B         	movff	?_frexp+2,___ftmul@f1+2
 14600  001E5E  EC1A  F012         	call	___ftmul	;wreg free
 14601  001E62  C069  F078         	movff	?___ftmul,___ftadd@f1
 14602  001E66  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 14603  001E6A  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 14604  001E6E  0E00               	movlw	0
 14605  001E70  0100               	movlb	0	; () banked
 14606  001E72  6F7B               	movwf	___ftadd@f2& (0+255),b
 14607  001E74  0E80               	movlw	128
 14608  001E76  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 14609  001E78  0EBF               	movlw	191
 14610  001E7A  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 14611  001E7C  ECA0  F00C         	call	___ftadd	;wreg free
 14612  001E80  C078  F08E         	movff	?___ftadd,log@x
 14613  001E84  C079  F08F         	movff	?___ftadd+1,log@x+1
 14614  001E88  C07A  F090         	movff	?___ftadd+2,log@x+2
 14615  001E8C  0100               	movlb	0	; () banked
 14616  001E8E  0791               	decf	log@exponent& (0+255),f,b
 14617  001E90  A0D8               	btfss	status,0,c
 14618  001E92  0792               	decf	(log@exponent+1)& (0+255),f,b
 14619                           
 14620                           ; BSR set to: 0
 14621  001E94  C08E  F084         	movff	log@x,eval_poly@x
 14622  001E98  C08F  F085         	movff	log@x+1,eval_poly@x+1
 14623  001E9C  C090  F086         	movff	log@x+2,eval_poly@x+2
 14624  001EA0  0E75               	movlw	low log@coeff
 14625  001EA2  6F87               	movwf	eval_poly@d& (0+255),b
 14626  001EA4  0E06               	movlw	high log@coeff
 14627  001EA6  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 14628  001EA8  0E00               	movlw	0
 14629  001EAA  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 14630  001EAC  0E08               	movlw	8
 14631  001EAE  6F89               	movwf	eval_poly@n& (0+255),b
 14632  001EB0  ECD0  F014         	call	_eval_poly	;wreg free
 14633  001EB4  C084  F08E         	movff	?_eval_poly,log@x
 14634  001EB8  C085  F08F         	movff	?_eval_poly+1,log@x+1
 14635  001EBC  C086  F090         	movff	?_eval_poly+2,log@x+2
 14636  001EC0  0E72               	movlw	114
 14637  001EC2  0100               	movlb	0	; () banked
 14638  001EC4  6F6C               	movwf	___ftmul@f2& (0+255),b
 14639  001EC6  0E31               	movlw	49
 14640  001EC8  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 14641  001ECA  0E3F               	movlw	63
 14642  001ECC  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 14643  001ECE  C091  F020         	movff	log@exponent,___awtoft@c
 14644  001ED2  C092  F021         	movff	log@exponent+1,___awtoft@c+1
 14645  001ED6  EC2C  F01E         	call	___awtoft	;wreg free
 14646  001EDA  C020  F069         	movff	?___awtoft,___ftmul@f1
 14647  001EDE  C021  F06A         	movff	?___awtoft+1,___ftmul@f1+1
 14648  001EE2  C022  F06B         	movff	?___awtoft+2,___ftmul@f1+2
 14649  001EE6  EC1A  F012         	call	___ftmul	;wreg free
 14650  001EEA  C069  F078         	movff	?___ftmul,___ftadd@f1
 14651  001EEE  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 14652  001EF2  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 14653  001EF6  C08E  F07B         	movff	log@x,___ftadd@f2
 14654  001EFA  C08F  F07C         	movff	log@x+1,___ftadd@f2+1
 14655  001EFE  C090  F07D         	movff	log@x+2,___ftadd@f2+2
 14656  001F02  ECA0  F00C         	call	___ftadd	;wreg free
 14657  001F06  C078  F08E         	movff	?___ftadd,?_log
 14658  001F0A  C079  F08F         	movff	?___ftadd+1,?_log+1
 14659  001F0E  C07A  F090         	movff	?___ftadd+2,?_log+2
 14660  001F12  0012               	return	
 14661  001F14                     __end_of_log:
 14662                           	opt stack 0
 14663                           tosu	equ	0xFFF
 14664                           tosh	equ	0xFFE
 14665                           tosl	equ	0xFFD
 14666                           pclath	equ	0xFFA
 14667                           tblptru	equ	0xFF8
 14668                           tblptrh	equ	0xFF7
 14669                           tblptrl	equ	0xFF6
 14670                           tablat	equ	0xFF5
 14671                           prodh	equ	0xFF4
 14672                           prodl	equ	0xFF3
 14673                           intcon	equ	0xFF2
 14674                           intcon2	equ	0xFF1
 14675                           postinc0	equ	0xFEE
 14676                           plusw0	equ	0xFEB
 14677                           wreg	equ	0xFE8
 14678                           indf1	equ	0xFE7
 14679                           postdec1	equ	0xFE5
 14680                           fsr1h	equ	0xFE2
 14681                           fsr1l	equ	0xFE1
 14682                           indf2	equ	0xFDF
 14683                           postinc2	equ	0xFDE
 14684                           postdec2	equ	0xFDD
 14685                           plusw2	equ	0xFDB
 14686                           fsr2h	equ	0xFDA
 14687                           fsr2l	equ	0xFD9
 14688                           status	equ	0xFD8
 14689                           
 14690 ;; *************** function _exp *****************
 14691 ;; Defined at:
 14692 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
 14693 ;; Parameters:    Size  Location     Type
 14694 ;;  x               3   55[BANK0 ] int 
 14695 ;; Auto vars:     Size  Location     Type
 14696 ;;  exponent        2   61[BANK0 ] int 
 14697 ;;  sign            1   63[BANK0 ] unsigned char 
 14698 ;; Return value:  Size  Location     Type
 14699 ;;                  3   55[BANK0 ] unsigned char 
 14700 ;; Registers used:
 14701 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14702 ;; Tracked objects:
 14703 ;;		On entry : 0/0
 14704 ;;		On exit  : 0/0
 14705 ;;		Unchanged: 0/0
 14706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14707 ;;      Params:         0       3       0       0       0       0       0
 14708 ;;      Locals:         0       6       0       0       0       0       0
 14709 ;;      Temps:          0       0       0       0       0       0       0
 14710 ;;      Totals:         0       9       0       0       0       0       0
 14711 ;;Total ram usage:        9 bytes
 14712 ;; Hardware stack levels used:    1
 14713 ;; Hardware stack levels required when called:    7
 14714 ;; This function calls:
 14715 ;;		___awtoft
 14716 ;;		___ftdiv
 14717 ;;		___ftge
 14718 ;;		___ftmul
 14719 ;;		___ftneg
 14720 ;;		___ftsub
 14721 ;;		___fttol
 14722 ;;		_eval_poly
 14723 ;;		_floor
 14724 ;;		_ldexp
 14725 ;; This function is called by:
 14726 ;;		_pow
 14727 ;; This function uses a non-reentrant model
 14728 ;;
 14729                           
 14730                           	psect	text84
 14731  00138E                     __ptext84:
 14732                           	opt stack 0
 14733  00138E                     _exp:
 14734                           	opt stack 18
 14735                           
 14736                           ;incstack = 0
 14737  00138E  0100               	movlb	0	; () banked
 14738  001390  5197               	movf	exp@x& (0+255),w,b
 14739  001392  1198               	iorwf	(exp@x+1)& (0+255),w,b
 14740  001394  1199               	iorwf	(exp@x+2)& (0+255),w,b
 14741  001396  A4D8               	btfss	status,2,c
 14742  001398  D007               	goto	l2229
 14743                           
 14744                           ; BSR set to: 0
 14745  00139A  0E00               	movlw	0
 14746  00139C  6F97               	movwf	?_exp& (0+255),b
 14747  00139E  0E80               	movlw	128
 14748  0013A0  6F98               	movwf	(?_exp+1)& (0+255),b
 14749  0013A2  0E3F               	movlw	63
 14750  0013A4  6F99               	movwf	(?_exp+2)& (0+255),b
 14751                           
 14752                           ; BSR set to: 0
 14753  0013A6  0012               	return	
 14754  0013A8                     l2229:
 14755                           
 14756                           ; BSR set to: 0
 14757                           
 14758                           ; BSR set to: 0
 14759  0013A8  0E72               	movlw	114
 14760  0013AA  6E18               	movwf	___ftge@ff1,c
 14761  0013AC  0E31               	movlw	49
 14762  0013AE  6E19               	movwf	___ftge@ff1+1,c
 14763  0013B0  0E44               	movlw	68
 14764  0013B2  6E1A               	movwf	___ftge@ff1+2,c
 14765  0013B4  C097  F01B         	movff	exp@x,___ftge@ff2
 14766  0013B8  C098  F01C         	movff	exp@x+1,___ftge@ff2+1
 14767  0013BC  C099  F01D         	movff	exp@x+2,___ftge@ff2+2
 14768  0013C0  EC9E  F018         	call	___ftge	;wreg free
 14769  0013C4  B0D8               	btfsc	status,0,c
 14770  0013C6  D00D               	goto	l2231
 14771  0013C8  0E00               	movlw	0
 14772  0013CA  0101               	movlb	1	; () banked
 14773  0013CC  6F31               	movwf	(_errno+1)& (0+255),b
 14774  0013CE  0E22               	movlw	34
 14775  0013D0  6F30               	movwf	_errno& (0+255),b
 14776  0013D2  0EFF               	movlw	255
 14777  0013D4  0100               	movlb	0	; () banked
 14778  0013D6  6F97               	movwf	?_exp& (0+255),b
 14779  0013D8  0E7F               	movlw	127
 14780  0013DA  6F98               	movwf	(?_exp+1)& (0+255),b
 14781  0013DC  0E7F               	movlw	127
 14782  0013DE  6F99               	movwf	(?_exp+2)& (0+255),b
 14783                           
 14784                           ; BSR set to: 0
 14785  0013E0  0012               	return	
 14786  0013E2                     l2231:
 14787                           
 14788                           ; BSR set to: 0
 14789  0013E2  C097  F018         	movff	exp@x,___ftge@ff1
 14790  0013E6  C098  F019         	movff	exp@x+1,___ftge@ff1+1
 14791  0013EA  C099  F01A         	movff	exp@x+2,___ftge@ff1+2
 14792  0013EE  0E49               	movlw	73
 14793  0013F0  6E1B               	movwf	___ftge@ff2,c
 14794  0013F2  0E3A               	movlw	58
 14795  0013F4  6E1C               	movwf	___ftge@ff2+1,c
 14796  0013F6  0EC4               	movlw	196
 14797  0013F8  6E1D               	movwf	___ftge@ff2+2,c
 14798  0013FA  EC9E  F018         	call	___ftge	;wreg free
 14799  0013FE  B0D8               	btfsc	status,0,c
 14800  001400  D00D               	goto	l2232
 14801  001402  0E00               	movlw	0
 14802  001404  0101               	movlb	1	; () banked
 14803  001406  6F31               	movwf	(_errno+1)& (0+255),b
 14804  001408  0E22               	movlw	34
 14805  00140A  6F30               	movwf	_errno& (0+255),b
 14806  00140C  0E00               	movlw	0
 14807  00140E  0100               	movlb	0	; () banked
 14808  001410  6F97               	movwf	?_exp& (0+255),b
 14809  001412  0E00               	movlw	0
 14810  001414  6F98               	movwf	(?_exp+1)& (0+255),b
 14811  001416  0E00               	movlw	0
 14812  001418  6F99               	movwf	(?_exp+2)& (0+255),b
 14813                           
 14814                           ; BSR set to: 0
 14815  00141A  0012               	return	
 14816  00141C                     l2232:
 14817                           
 14818                           ; BSR set to: 0
 14819  00141C  0100               	movlb	0	; () banked
 14820  00141E  AF99               	btfss	(exp@x+2)& (0+255),7,b
 14821  001420  D002               	goto	u7240
 14822  001422  0E01               	movlw	1
 14823  001424  D001               	goto	u7250
 14824  001426                     u7240:
 14825  001426  0E00               	movlw	0
 14826  001428                     u7250:
 14827  001428  6F9F               	movwf	exp@sign& (0+255),b
 14828                           
 14829                           ; BSR set to: 0
 14830  00142A  519F               	movf	exp@sign& (0+255),w,b
 14831  00142C  B4D8               	btfsc	status,2,c
 14832  00142E  D00E               	goto	l2233
 14833                           
 14834                           ; BSR set to: 0
 14835  001430  C097  F018         	movff	exp@x,___ftneg@f1
 14836  001434  C098  F019         	movff	exp@x+1,___ftneg@f1+1
 14837  001438  C099  F01A         	movff	exp@x+2,___ftneg@f1+2
 14838  00143C  ECD7  F01F         	call	___ftneg	;wreg free
 14839  001440  C018  F097         	movff	?___ftneg,exp@x
 14840  001444  C019  F098         	movff	?___ftneg+1,exp@x+1
 14841  001448  C01A  F099         	movff	?___ftneg+2,exp@x+2
 14842  00144C                     l2233:
 14843  00144C  C097  F069         	movff	exp@x,___ftmul@f1
 14844  001450  C098  F06A         	movff	exp@x+1,___ftmul@f1+1
 14845  001454  C099  F06B         	movff	exp@x+2,___ftmul@f1+2
 14846  001458  0EAA               	movlw	170
 14847  00145A  0100               	movlb	0	; () banked
 14848  00145C  6F6C               	movwf	___ftmul@f2& (0+255),b
 14849  00145E  0EB8               	movlw	184
 14850  001460  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 14851  001462  0E3F               	movlw	63
 14852  001464  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 14853  001466  EC1A  F012         	call	___ftmul	;wreg free
 14854  00146A  C069  F097         	movff	?___ftmul,exp@x
 14855  00146E  C06A  F098         	movff	?___ftmul+1,exp@x+1
 14856  001472  C06B  F099         	movff	?___ftmul+2,exp@x+2
 14857  001476  C097  F08F         	movff	exp@x,floor@x
 14858  00147A  C098  F090         	movff	exp@x+1,floor@x+1
 14859  00147E  C099  F091         	movff	exp@x+2,floor@x+2
 14860  001482  EC5F  F014         	call	_floor	;wreg free
 14861  001486  C08F  F09A         	movff	?_floor,_exp$3589
 14862  00148A  C090  F09B         	movff	?_floor+1,_exp$3589+1
 14863  00148E  C091  F09C         	movff	?_floor+2,_exp$3589+2
 14864  001492  C09A  F078         	movff	_exp$3589,___fttol@f1
 14865  001496  C09B  F079         	movff	_exp$3589+1,___fttol@f1+1
 14866  00149A  C09C  F07A         	movff	_exp$3589+2,___fttol@f1+2
 14867  00149E  EC23  F011         	call	___fttol	;wreg free
 14868  0014A2  C078  F09D         	movff	?___fttol,exp@exponent
 14869  0014A6  C079  F09E         	movff	?___fttol+1,exp@exponent+1
 14870  0014AA  C097  F084         	movff	exp@x,___ftsub@f1
 14871  0014AE  C098  F085         	movff	exp@x+1,___ftsub@f1+1
 14872  0014B2  C099  F086         	movff	exp@x+2,___ftsub@f1+2
 14873  0014B6  C09D  F020         	movff	exp@exponent,___awtoft@c
 14874  0014BA  C09E  F021         	movff	exp@exponent+1,___awtoft@c+1
 14875  0014BE  EC2C  F01E         	call	___awtoft	;wreg free
 14876  0014C2  C020  F087         	movff	?___awtoft,___ftsub@f2
 14877  0014C6  C021  F088         	movff	?___awtoft+1,___ftsub@f2+1
 14878  0014CA  C022  F089         	movff	?___awtoft+2,___ftsub@f2+2
 14879  0014CE  EC3A  F01D         	call	___ftsub	;wreg free
 14880  0014D2  C084  F097         	movff	?___ftsub,exp@x
 14881  0014D6  C085  F098         	movff	?___ftsub+1,exp@x+1
 14882  0014DA  C086  F099         	movff	?___ftsub+2,exp@x+2
 14883  0014DE  C097  F084         	movff	exp@x,eval_poly@x
 14884  0014E2  C098  F085         	movff	exp@x+1,eval_poly@x+1
 14885  0014E6  C099  F086         	movff	exp@x+2,eval_poly@x+2
 14886  0014EA  0E57               	movlw	low exp@coeff
 14887  0014EC  0100               	movlb	0	; () banked
 14888  0014EE  6F87               	movwf	eval_poly@d& (0+255),b
 14889  0014F0  0E06               	movlw	high exp@coeff
 14890  0014F2  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 14891  0014F4  0E00               	movlw	0
 14892  0014F6  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 14893  0014F8  0E09               	movlw	9
 14894  0014FA  6F89               	movwf	eval_poly@n& (0+255),b
 14895  0014FC  ECD0  F014         	call	_eval_poly	;wreg free
 14896  001500  C084  F08E         	movff	?_eval_poly,ldexp@value
 14897  001504  C085  F08F         	movff	?_eval_poly+1,ldexp@value+1
 14898  001508  C086  F090         	movff	?_eval_poly+2,ldexp@value+2
 14899  00150C  C09D  F091         	movff	exp@exponent,ldexp@newexp
 14900  001510  C09E  F092         	movff	exp@exponent+1,ldexp@newexp+1
 14901  001514  EC3B  F015         	call	_ldexp	;wreg free
 14902  001518  C08E  F097         	movff	?_ldexp,exp@x
 14903  00151C  C08F  F098         	movff	?_ldexp+1,exp@x+1
 14904  001520  C090  F099         	movff	?_ldexp+2,exp@x+2
 14905  001524  0100               	movlb	0	; () banked
 14906  001526  519F               	movf	exp@sign& (0+255),w,b
 14907  001528  B4D8               	btfsc	status,2,c
 14908  00152A  D025               	goto	l2234
 14909                           
 14910                           ; BSR set to: 0
 14911  00152C  2997               	incf	exp@x& (0+255),w,b
 14912  00152E  E10E               	bnz	l7510
 14913  001530  0E7F               	movlw	127
 14914  001532  1998               	xorwf	(exp@x+1)& (0+255),w,b
 14915  001534  E10B               	bnz	l7510
 14916  001536  0E7F               	movlw	127
 14917  001538  1999               	xorwf	(exp@x+2)& (0+255),w,b
 14918  00153A  A4D8               	btfss	status,2,c
 14919  00153C  D007               	goto	l2235
 14920                           
 14921                           ; BSR set to: 0
 14922  00153E  0E00               	movlw	0
 14923  001540  6F97               	movwf	?_exp& (0+255),b
 14924  001542  0E00               	movlw	0
 14925  001544  6F98               	movwf	(?_exp+1)& (0+255),b
 14926  001546  0E00               	movlw	0
 14927  001548  6F99               	movwf	(?_exp+2)& (0+255),b
 14928                           
 14929                           ; BSR set to: 0
 14930  00154A  0012               	return	
 14931  00154C                     l2235:
 14932  00154C                     l7510:
 14933                           
 14934                           ; BSR set to: 0
 14935  00154C  0E00               	movlw	0
 14936  00154E  6E29               	movwf	___ftdiv@f1,c
 14937  001550  0E80               	movlw	128
 14938  001552  6E2A               	movwf	___ftdiv@f1+1,c
 14939  001554  0E3F               	movlw	63
 14940  001556  6E2B               	movwf	___ftdiv@f1+2,c
 14941  001558  C097  F02C         	movff	exp@x,___ftdiv@f2
 14942  00155C  C098  F02D         	movff	exp@x+1,___ftdiv@f2+1
 14943  001560  C099  F02E         	movff	exp@x+2,___ftdiv@f2+2
 14944  001564  EC95  F012         	call	___ftdiv	;wreg free
 14945  001568  C029  F097         	movff	?___ftdiv,?_exp
 14946  00156C  C02A  F098         	movff	?___ftdiv+1,?_exp+1
 14947  001570  C02B  F099         	movff	?___ftdiv+2,?_exp+2
 14948  001574  0012               	return	
 14949  001576                     l2234:
 14950                           
 14951                           ; BSR set to: 0
 14952  001576  C097  F097         	movff	exp@x,?_exp
 14953  00157A  C098  F098         	movff	exp@x+1,?_exp+1
 14954  00157E  C099  F099         	movff	exp@x+2,?_exp+2
 14955  001582  0012               	return		;funcret
 14956  001584                     __end_of_exp:
 14957                           	opt stack 0
 14958                           tosu	equ	0xFFF
 14959                           tosh	equ	0xFFE
 14960                           tosl	equ	0xFFD
 14961                           pclath	equ	0xFFA
 14962                           tblptru	equ	0xFF8
 14963                           tblptrh	equ	0xFF7
 14964                           tblptrl	equ	0xFF6
 14965                           tablat	equ	0xFF5
 14966                           prodh	equ	0xFF4
 14967                           prodl	equ	0xFF3
 14968                           intcon	equ	0xFF2
 14969                           intcon2	equ	0xFF1
 14970                           postinc0	equ	0xFEE
 14971                           plusw0	equ	0xFEB
 14972                           wreg	equ	0xFE8
 14973                           indf1	equ	0xFE7
 14974                           postdec1	equ	0xFE5
 14975                           fsr1h	equ	0xFE2
 14976                           fsr1l	equ	0xFE1
 14977                           indf2	equ	0xFDF
 14978                           postinc2	equ	0xFDE
 14979                           postdec2	equ	0xFDD
 14980                           plusw2	equ	0xFDB
 14981                           fsr2h	equ	0xFDA
 14982                           fsr2l	equ	0xFD9
 14983                           status	equ	0xFD8
 14984                           
 14985 ;; *************** function _ldexp *****************
 14986 ;; Defined at:
 14987 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 14988 ;; Parameters:    Size  Location     Type
 14989 ;;  value           3   46[BANK0 ] unsigned char 
 14990 ;;  newexp          2   49[BANK0 ] int 
 14991 ;; Auto vars:     Size  Location     Type
 14992 ;;		None
 14993 ;; Return value:  Size  Location     Type
 14994 ;;                  3   46[BANK0 ] int 
 14995 ;; Registers used:
 14996 ;;		wreg, status,2, status,0
 14997 ;; Tracked objects:
 14998 ;;		On entry : 0/0
 14999 ;;		On exit  : 0/0
 15000 ;;		Unchanged: 0/0
 15001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15002 ;;      Params:         0       5       0       0       0       0       0
 15003 ;;      Locals:         0       0       0       0       0       0       0
 15004 ;;      Temps:          0       2       0       0       0       0       0
 15005 ;;      Totals:         0       7       0       0       0       0       0
 15006 ;;Total ram usage:        7 bytes
 15007 ;; Hardware stack levels used:    1
 15008 ;; Hardware stack levels required when called:    4
 15009 ;; This function calls:
 15010 ;;		Nothing
 15011 ;; This function is called by:
 15012 ;;		_exp
 15013 ;; This function uses a non-reentrant model
 15014 ;;
 15015                           
 15016                           	psect	text85
 15017  002A76                     __ptext85:
 15018                           	opt stack 0
 15019  002A76                     _ldexp:
 15020                           	opt stack 20
 15021                           
 15022                           ;incstack = 0
 15023  002A76  0100               	movlb	0	; () banked
 15024  002A78  518E               	movf	ldexp@value& (0+255),w,b
 15025  002A7A  118F               	iorwf	(ldexp@value+1)& (0+255),w,b
 15026  002A7C  1190               	iorwf	(ldexp@value+2)& (0+255),w,b
 15027  002A7E  A4D8               	btfss	status,2,c
 15028  002A80  D007               	goto	l2253
 15029                           
 15030                           ; BSR set to: 0
 15031  002A82  0E00               	movlw	0
 15032  002A84  6F8E               	movwf	?_ldexp& (0+255),b
 15033  002A86  0E00               	movlw	0
 15034  002A88  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 15035  002A8A  0E00               	movlw	0
 15036  002A8C  6F90               	movwf	(?_ldexp+2)& (0+255),b
 15037                           
 15038                           ; BSR set to: 0
 15039  002A8E  0012               	return	
 15040  002A90                     l2253:
 15041                           
 15042                           ; BSR set to: 0
 15043                           
 15044                           ; BSR set to: 0
 15045  002A90  5190               	movf	(ldexp@value+2)& (0+255),w,b
 15046  002A92  0B7F               	andlw	127
 15047  002A94  6F93               	movwf	??_ldexp& (0+255),b
 15048  002A96  6B94               	clrf	(??_ldexp+1)& (0+255),b
 15049  002A98  90D8               	bcf	status,0,c
 15050  002A9A  3793               	rlcf	??_ldexp& (0+255),f,b
 15051  002A9C  3794               	rlcf	(??_ldexp+1)& (0+255),f,b
 15052  002A9E  5193               	movf	??_ldexp& (0+255),w,b
 15053  002AA0  2791               	addwf	ldexp@newexp& (0+255),f,b
 15054  002AA2  5194               	movf	(??_ldexp+1)& (0+255),w,b
 15055  002AA4  2392               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 15056  002AA6  AF8F               	btfss	(ldexp@value+1)& (0+255),7,b
 15057  002AA8  D003               	goto	u6980
 15058  002AAA  6B93               	clrf	??_ldexp& (0+255),b
 15059  002AAC  2B93               	incf	??_ldexp& (0+255),f,b
 15060  002AAE  D002               	goto	u6988
 15061  002AB0                     u6980:
 15062  002AB0  0100               	movlb	0	; () banked
 15063  002AB2  6B93               	clrf	??_ldexp& (0+255),b
 15064  002AB4                     u6988:
 15065  002AB4  5193               	movf	??_ldexp& (0+255),w,b
 15066  002AB6  2791               	addwf	ldexp@newexp& (0+255),f,b
 15067  002AB8  0E00               	movlw	0
 15068  002ABA  2392               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 15069  002ABC  AF92               	btfss	(ldexp@newexp+1)& (0+255),7,b
 15070  002ABE  D00D               	goto	l2255
 15071                           
 15072                           ; BSR set to: 0
 15073  002AC0  0E00               	movlw	0
 15074  002AC2  0101               	movlb	1	; () banked
 15075  002AC4  6F31               	movwf	(_errno+1)& (0+255),b
 15076  002AC6  0E22               	movlw	34
 15077  002AC8  6F30               	movwf	_errno& (0+255),b
 15078  002ACA  0E00               	movlw	0
 15079  002ACC  0100               	movlb	0	; () banked
 15080  002ACE  6F8E               	movwf	?_ldexp& (0+255),b
 15081  002AD0  0E00               	movlw	0
 15082  002AD2  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 15083  002AD4  0E00               	movlw	0
 15084  002AD6                     L3:
 15085  002AD6  6F90               	movwf	(?_ldexp+2)& (0+255),b
 15086                           
 15087                           ; BSR set to: 0
 15088  002AD8  0012               	return	
 15089  002ADA                     l2255:
 15090                           
 15091                           ; BSR set to: 0
 15092                           
 15093                           ; BSR set to: 0
 15094  002ADA  BF92               	btfsc	(ldexp@newexp+1)& (0+255),7,b
 15095  002ADC  D017               	goto	l2257
 15096  002ADE  0592               	decf	(ldexp@newexp+1)& (0+255),w,b
 15097  002AE0  A0D8               	btfss	status,0,c
 15098  002AE2  D014               	goto	l2257
 15099                           
 15100                           ; BSR set to: 0
 15101  002AE4  0E00               	movlw	0
 15102  002AE6  0101               	movlb	1	; () banked
 15103  002AE8  6F31               	movwf	(_errno+1)& (0+255),b
 15104  002AEA  0E22               	movlw	34
 15105  002AEC  6F30               	movwf	_errno& (0+255),b
 15106                           
 15107                           ; BSR set to: 1
 15108  002AEE  0100               	movlb	0	; () banked
 15109  002AF0  AF90               	btfss	(ldexp@value+2)& (0+255),7,b
 15110  002AF2  D006               	goto	l2258
 15111                           
 15112                           ; BSR set to: 0
 15113  002AF4  0EFF               	movlw	255
 15114  002AF6  6F8E               	movwf	?_ldexp& (0+255),b
 15115  002AF8  0E7F               	movlw	127
 15116  002AFA  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 15117  002AFC  0EFF               	movlw	255
 15118  002AFE  D7EB               	goto	L3
 15119  002B00                     l2258:
 15120                           
 15121                           ; BSR set to: 0
 15122                           
 15123                           ; BSR set to: 0
 15124  002B00  0EFF               	movlw	255
 15125  002B02  6F8E               	movwf	?_ldexp& (0+255),b
 15126  002B04  0E7F               	movlw	127
 15127  002B06  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 15128  002B08  0E7F               	movlw	127
 15129  002B0A  D7E5               	goto	L3
 15130  002B0C                     l2257:
 15131                           
 15132                           ; BSR set to: 0
 15133                           
 15134                           ; BSR set to: 0
 15135  002B0C  3592               	rlcf	(ldexp@newexp+1)& (0+255),w,b
 15136  002B0E  3192               	rrcf	(ldexp@newexp+1)& (0+255),w,b
 15137  002B10  6F94               	movwf	(??_ldexp+1)& (0+255),b
 15138  002B12  3191               	rrcf	ldexp@newexp& (0+255),w,b
 15139  002B14  6F93               	movwf	??_ldexp& (0+255),b
 15140  002B16  5190               	movf	(ldexp@value+2)& (0+255),w,b
 15141  002B18  1993               	xorwf	??_ldexp& (0+255),w,b
 15142  002B1A  0B80               	andlw	-128
 15143  002B1C  1993               	xorwf	??_ldexp& (0+255),w,b
 15144  002B1E  6F90               	movwf	(ldexp@value+2)& (0+255),b
 15145  002B20  C091  F093         	movff	ldexp@newexp,??_ldexp
 15146  002B24  0E01               	movlw	1
 15147  002B26  1793               	andwf	??_ldexp& (0+255),f,b
 15148  002B28  3393               	rrcf	??_ldexp& (0+255),f,b
 15149  002B2A  3393               	rrcf	??_ldexp& (0+255),f,b
 15150  002B2C  518F               	movf	(ldexp@value+1)& (0+255),w,b
 15151  002B2E  1993               	xorwf	??_ldexp& (0+255),w,b
 15152  002B30  0B7F               	andlw	-129
 15153  002B32  1993               	xorwf	??_ldexp& (0+255),w,b
 15154  002B34  6F8F               	movwf	(ldexp@value+1)& (0+255),b
 15155                           
 15156                           ; BSR set to: 0
 15157                           
 15158                           ; BSR set to: 0
 15159                           
 15160                           ; BSR set to: 0
 15161  002B36  C08E  F08E         	movff	ldexp@value,?_ldexp
 15162  002B3A  C08F  F08F         	movff	ldexp@value+1,?_ldexp+1
 15163  002B3E  C090  F090         	movff	ldexp@value+2,?_ldexp+2
 15164  002B42  0012               	return	
 15165  002B44                     __end_of_ldexp:
 15166                           	opt stack 0
 15167                           tosu	equ	0xFFF
 15168                           tosh	equ	0xFFE
 15169                           tosl	equ	0xFFD
 15170                           pclath	equ	0xFFA
 15171                           tblptru	equ	0xFF8
 15172                           tblptrh	equ	0xFF7
 15173                           tblptrl	equ	0xFF6
 15174                           tablat	equ	0xFF5
 15175                           prodh	equ	0xFF4
 15176                           prodl	equ	0xFF3
 15177                           intcon	equ	0xFF2
 15178                           intcon2	equ	0xFF1
 15179                           postinc0	equ	0xFEE
 15180                           plusw0	equ	0xFEB
 15181                           wreg	equ	0xFE8
 15182                           indf1	equ	0xFE7
 15183                           postdec1	equ	0xFE5
 15184                           fsr1h	equ	0xFE2
 15185                           fsr1l	equ	0xFE1
 15186                           indf2	equ	0xFDF
 15187                           postinc2	equ	0xFDE
 15188                           postdec2	equ	0xFDD
 15189                           plusw2	equ	0xFDB
 15190                           fsr2h	equ	0xFDA
 15191                           fsr2l	equ	0xFD9
 15192                           status	equ	0xFD8
 15193                           
 15194 ;; *************** function _floor *****************
 15195 ;; Defined at:
 15196 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
 15197 ;; Parameters:    Size  Location     Type
 15198 ;;  x               3   47[BANK0 ] int 
 15199 ;; Auto vars:     Size  Location     Type
 15200 ;;  i               3   50[BANK0 ] int 
 15201 ;;  expon           2   53[BANK0 ] int 
 15202 ;; Return value:  Size  Location     Type
 15203 ;;                  3   47[BANK0 ] int 
 15204 ;; Registers used:
 15205 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15206 ;; Tracked objects:
 15207 ;;		On entry : 0/0
 15208 ;;		On exit  : 0/0
 15209 ;;		Unchanged: 0/0
 15210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15211 ;;      Params:         0       3       0       0       0       0       0
 15212 ;;      Locals:         0       5       0       0       0       0       0
 15213 ;;      Temps:          0       0       0       0       0       0       0
 15214 ;;      Totals:         0       8       0       0       0       0       0
 15215 ;;Total ram usage:        8 bytes
 15216 ;; Hardware stack levels used:    1
 15217 ;; Hardware stack levels required when called:    6
 15218 ;; This function calls:
 15219 ;;		___altoft
 15220 ;;		___ftadd
 15221 ;;		___ftge
 15222 ;;		___fttol
 15223 ;;		_frexp
 15224 ;; This function is called by:
 15225 ;;		_exp
 15226 ;; This function uses a non-reentrant model
 15227 ;;
 15228                           
 15229                           	psect	text86
 15230  0028BE                     __ptext86:
 15231                           	opt stack 0
 15232  0028BE                     _floor:
 15233                           	opt stack 18
 15234                           
 15235                           ; BSR set to: 0
 15236                           ;incstack = 0
 15237  0028BE  C08F  F018         	movff	floor@x,frexp@value
 15238  0028C2  C090  F019         	movff	floor@x+1,frexp@value+1
 15239  0028C6  C091  F01A         	movff	floor@x+2,frexp@value+2
 15240  0028CA  0E95               	movlw	low floor@expon
 15241  0028CC  6E1B               	movwf	frexp@eptr,c
 15242  0028CE  0E00               	movlw	high floor@expon
 15243  0028D0  6E1C               	movwf	frexp@eptr+1,c
 15244  0028D2  EC56  F018         	call	_frexp	;wreg free
 15245  0028D6  0100               	movlb	0	; () banked
 15246  0028D8  AF96               	btfss	(floor@expon+1)& (0+255),7,b
 15247  0028DA  D010               	goto	l2240
 15248                           
 15249                           ; BSR set to: 0
 15250  0028DC  AF91               	btfss	(floor@x+2)& (0+255),7,b
 15251  0028DE  D007               	goto	l2241
 15252                           
 15253                           ; BSR set to: 0
 15254  0028E0  0E00               	movlw	0
 15255  0028E2  6F8F               	movwf	?_floor& (0+255),b
 15256  0028E4  0E80               	movlw	128
 15257  0028E6  6F90               	movwf	(?_floor+1)& (0+255),b
 15258  0028E8  0EBF               	movlw	191
 15259  0028EA  6F91               	movwf	(?_floor+2)& (0+255),b
 15260                           
 15261                           ; BSR set to: 0
 15262  0028EC  0012               	return	
 15263  0028EE                     l2241:
 15264                           
 15265                           ; BSR set to: 0
 15266                           
 15267                           ; BSR set to: 0
 15268  0028EE  0E00               	movlw	0
 15269  0028F0  6F8F               	movwf	?_floor& (0+255),b
 15270  0028F2  0E00               	movlw	0
 15271  0028F4  6F90               	movwf	(?_floor+1)& (0+255),b
 15272  0028F6  0E00               	movlw	0
 15273  0028F8  6F91               	movwf	(?_floor+2)& (0+255),b
 15274                           
 15275                           ; BSR set to: 0
 15276  0028FA  0012               	return	
 15277  0028FC                     l2240:
 15278                           
 15279                           ; BSR set to: 0
 15280                           
 15281                           ; BSR set to: 0
 15282  0028FC  5196               	movf	(floor@expon+1)& (0+255),w,b
 15283  0028FE  E104               	bnz	u6940
 15284  002900  0E15               	movlw	21
 15285  002902  5D95               	subwf	floor@expon& (0+255),w,b
 15286  002904  A0D8               	btfss	status,0,c
 15287  002906  D007               	goto	l2243
 15288  002908                     u6940:
 15289                           
 15290                           ; BSR set to: 0
 15291  002908  C08F  F08F         	movff	floor@x,?_floor
 15292  00290C  C090  F090         	movff	floor@x+1,?_floor+1
 15293  002910  C091  F091         	movff	floor@x+2,?_floor+2
 15294  002914  0012               	return	
 15295  002916                     l2243:
 15296                           
 15297                           ; BSR set to: 0
 15298                           
 15299                           ; BSR set to: 0
 15300  002916  C08F  F078         	movff	floor@x,___fttol@f1
 15301  00291A  C090  F079         	movff	floor@x+1,___fttol@f1+1
 15302  00291E  C091  F07A         	movff	floor@x+2,___fttol@f1+2
 15303  002922  EC23  F011         	call	___fttol	;wreg free
 15304  002926  C078  F087         	movff	?___fttol,___altoft@c
 15305  00292A  C079  F088         	movff	?___fttol+1,___altoft@c+1
 15306  00292E  C07A  F089         	movff	?___fttol+2,___altoft@c+2
 15307  002932  C07B  F08A         	movff	?___fttol+3,___altoft@c+3
 15308  002936  ECAB  F019         	call	___altoft	;wreg free
 15309  00293A  C087  F092         	movff	?___altoft,floor@i
 15310  00293E  C088  F093         	movff	?___altoft+1,floor@i+1
 15311  002942  C089  F094         	movff	?___altoft+2,floor@i+2
 15312  002946  C08F  F018         	movff	floor@x,___ftge@ff1
 15313  00294A  C090  F019         	movff	floor@x+1,___ftge@ff1+1
 15314  00294E  C091  F01A         	movff	floor@x+2,___ftge@ff1+2
 15315  002952  C092  F01B         	movff	floor@i,___ftge@ff2
 15316  002956  C093  F01C         	movff	floor@i+1,___ftge@ff2+1
 15317  00295A  C094  F01D         	movff	floor@i+2,___ftge@ff2+2
 15318  00295E  EC9E  F018         	call	___ftge	;wreg free
 15319  002962  B0D8               	btfsc	status,0,c
 15320  002964  D016               	goto	l2244
 15321  002966  C092  F078         	movff	floor@i,___ftadd@f1
 15322  00296A  C093  F079         	movff	floor@i+1,___ftadd@f1+1
 15323  00296E  C094  F07A         	movff	floor@i+2,___ftadd@f1+2
 15324  002972  0E00               	movlw	0
 15325  002974  0100               	movlb	0	; () banked
 15326  002976  6F7B               	movwf	___ftadd@f2& (0+255),b
 15327  002978  0E80               	movlw	128
 15328  00297A  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 15329  00297C  0EBF               	movlw	191
 15330  00297E  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 15331  002980  ECA0  F00C         	call	___ftadd	;wreg free
 15332  002984  C078  F08F         	movff	?___ftadd,?_floor
 15333  002988  C079  F090         	movff	?___ftadd+1,?_floor+1
 15334  00298C  C07A  F091         	movff	?___ftadd+2,?_floor+2
 15335  002990  0012               	return	
 15336  002992                     l2244:
 15337  002992  C092  F08F         	movff	floor@i,?_floor
 15338  002996  C093  F090         	movff	floor@i+1,?_floor+1
 15339  00299A  C094  F091         	movff	floor@i+2,?_floor+2
 15340  00299E  0012               	return		;funcret
 15341  0029A0                     __end_of_floor:
 15342                           	opt stack 0
 15343                           tosu	equ	0xFFF
 15344                           tosh	equ	0xFFE
 15345                           tosl	equ	0xFFD
 15346                           pclath	equ	0xFFA
 15347                           tblptru	equ	0xFF8
 15348                           tblptrh	equ	0xFF7
 15349                           tblptrl	equ	0xFF6
 15350                           tablat	equ	0xFF5
 15351                           prodh	equ	0xFF4
 15352                           prodl	equ	0xFF3
 15353                           intcon	equ	0xFF2
 15354                           intcon2	equ	0xFF1
 15355                           postinc0	equ	0xFEE
 15356                           plusw0	equ	0xFEB
 15357                           wreg	equ	0xFE8
 15358                           indf1	equ	0xFE7
 15359                           postdec1	equ	0xFE5
 15360                           fsr1h	equ	0xFE2
 15361                           fsr1l	equ	0xFE1
 15362                           indf2	equ	0xFDF
 15363                           postinc2	equ	0xFDE
 15364                           postdec2	equ	0xFDD
 15365                           plusw2	equ	0xFDB
 15366                           fsr2h	equ	0xFDA
 15367                           fsr2l	equ	0xFD9
 15368                           status	equ	0xFD8
 15369                           
 15370 ;; *************** function _frexp *****************
 15371 ;; Defined at:
 15372 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 15373 ;; Parameters:    Size  Location     Type
 15374 ;;  value           3   23[COMRAM] int 
 15375 ;;  eptr            2   26[COMRAM] PTR int 
 15376 ;;		 -> log@exponent(2), floor@expon(2), 
 15377 ;; Auto vars:     Size  Location     Type
 15378 ;;		None
 15379 ;; Return value:  Size  Location     Type
 15380 ;;                  3   23[COMRAM] PTR int 
 15381 ;; Registers used:
 15382 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15383 ;; Tracked objects:
 15384 ;;		On entry : 0/0
 15385 ;;		On exit  : 0/0
 15386 ;;		Unchanged: 0/0
 15387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15388 ;;      Params:         5       0       0       0       0       0       0
 15389 ;;      Locals:         0       0       0       0       0       0       0
 15390 ;;      Temps:          2       0       0       0       0       0       0
 15391 ;;      Totals:         7       0       0       0       0       0       0
 15392 ;;Total ram usage:        7 bytes
 15393 ;; Hardware stack levels used:    1
 15394 ;; Hardware stack levels required when called:    4
 15395 ;; This function calls:
 15396 ;;		Nothing
 15397 ;; This function is called by:
 15398 ;;		_floor
 15399 ;;		_log
 15400 ;; This function uses a non-reentrant model
 15401 ;;
 15402                           
 15403                           	psect	text87
 15404  0030AC                     __ptext87:
 15405                           	opt stack 0
 15406  0030AC                     _frexp:
 15407                           	opt stack 20
 15408                           
 15409                           ;incstack = 0
 15410  0030AC  5018               	movf	frexp@value,w,c
 15411  0030AE  1019               	iorwf	frexp@value+1,w,c
 15412  0030B0  101A               	iorwf	frexp@value+2,w,c
 15413  0030B2  A4D8               	btfss	status,2,c
 15414  0030B4  D00F               	goto	l2249
 15415  0030B6  C01B  FFD9         	movff	frexp@eptr,fsr2l
 15416  0030BA  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 15417  0030BE  0E00               	movlw	0
 15418  0030C0  6EDE               	movwf	postinc2,c
 15419  0030C2  0E00               	movlw	0
 15420  0030C4  6EDD               	movwf	postdec2,c
 15421  0030C6  0E00               	movlw	0
 15422  0030C8  6E18               	movwf	?_frexp,c
 15423  0030CA  0E00               	movlw	0
 15424  0030CC  6E19               	movwf	?_frexp+1,c
 15425  0030CE  0E00               	movlw	0
 15426  0030D0  6E1A               	movwf	?_frexp+2,c
 15427  0030D2  0012               	return	
 15428  0030D4                     l2249:
 15429  0030D4  501A               	movf	frexp@value+2,w,c
 15430  0030D6  0B7F               	andlw	127
 15431  0030D8  6E1D               	movwf	??_frexp& (0+255),c
 15432  0030DA  6A1E               	clrf	(??_frexp+1)& (0+255),c
 15433  0030DC  90D8               	bcf	status,0,c
 15434  0030DE  361D               	rlcf	??_frexp,f,c
 15435  0030E0  361E               	rlcf	??_frexp+1,f,c
 15436  0030E2  C01B  FFD9         	movff	frexp@eptr,fsr2l
 15437  0030E6  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 15438  0030EA  C01D  FFDE         	movff	??_frexp,postinc2
 15439  0030EE  C01E  FFDD         	movff	??_frexp+1,postdec2
 15440  0030F2  AE19               	btfss	frexp@value+1,7,c
 15441  0030F4  D003               	goto	u6820
 15442  0030F6  6A1D               	clrf	??_frexp& (0+255),c
 15443  0030F8  2A1D               	incf	??_frexp& (0+255),f,c
 15444  0030FA  D001               	goto	u6828
 15445  0030FC                     u6820:
 15446  0030FC  6A1D               	clrf	??_frexp& (0+255),c
 15447  0030FE                     u6828:
 15448  0030FE  501D               	movf	??_frexp,w,c
 15449  003100  C01B  FFD9         	movff	frexp@eptr,fsr2l
 15450  003104  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 15451  003108  12DE               	iorwf	postinc2,f,c
 15452  00310A  0E00               	movlw	0
 15453  00310C  12DD               	iorwf	postdec2,f,c
 15454  00310E  C01B  FFD9         	movff	frexp@eptr,fsr2l
 15455  003112  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 15456  003116  0E82               	movlw	130
 15457  003118  26DE               	addwf	postinc2,f,c
 15458  00311A  0EFF               	movlw	255
 15459  00311C  22DD               	addwfc	postdec2,f,c
 15460  00311E  801A               	bsf	frexp@value+2,0,c
 15461  003120  821A               	bsf	frexp@value+2,1,c
 15462  003122  841A               	bsf	frexp@value+2,2,c
 15463  003124  861A               	bsf	frexp@value+2,3,c
 15464  003126  881A               	bsf	frexp@value+2,4,c
 15465  003128  8A1A               	bsf	frexp@value+2,5,c
 15466  00312A  9C1A               	bcf	frexp@value+2,6,c
 15467  00312C  9E19               	bcf	frexp@value+1,7,c
 15468  00312E  C018  F018         	movff	frexp@value,?_frexp
 15469  003132  C019  F019         	movff	frexp@value+1,?_frexp+1
 15470  003136  C01A  F01A         	movff	frexp@value+2,?_frexp+2
 15471  00313A  0012               	return	
 15472  00313C                     __end_of_frexp:
 15473                           	opt stack 0
 15474                           tosu	equ	0xFFF
 15475                           tosh	equ	0xFFE
 15476                           tosl	equ	0xFFD
 15477                           pclath	equ	0xFFA
 15478                           tblptru	equ	0xFF8
 15479                           tblptrh	equ	0xFF7
 15480                           tblptrl	equ	0xFF6
 15481                           tablat	equ	0xFF5
 15482                           prodh	equ	0xFF4
 15483                           prodl	equ	0xFF3
 15484                           intcon	equ	0xFF2
 15485                           intcon2	equ	0xFF1
 15486                           postinc0	equ	0xFEE
 15487                           plusw0	equ	0xFEB
 15488                           wreg	equ	0xFE8
 15489                           indf1	equ	0xFE7
 15490                           postdec1	equ	0xFE5
 15491                           fsr1h	equ	0xFE2
 15492                           fsr1l	equ	0xFE1
 15493                           indf2	equ	0xFDF
 15494                           postinc2	equ	0xFDE
 15495                           postdec2	equ	0xFDD
 15496                           plusw2	equ	0xFDB
 15497                           fsr2h	equ	0xFDA
 15498                           fsr2l	equ	0xFD9
 15499                           status	equ	0xFD8
 15500                           
 15501 ;; *************** function ___fttol *****************
 15502 ;; Defined at:
 15503 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 15504 ;; Parameters:    Size  Location     Type
 15505 ;;  f1              3   24[BANK0 ] float 
 15506 ;; Auto vars:     Size  Location     Type
 15507 ;;  lval            4   34[BANK0 ] unsigned long 
 15508 ;;  exp1            1   38[BANK0 ] unsigned char 
 15509 ;;  sign1           1   33[BANK0 ] unsigned char 
 15510 ;; Return value:  Size  Location     Type
 15511 ;;                  4   24[BANK0 ] long 
 15512 ;; Registers used:
 15513 ;;		wreg, status,2, status,0
 15514 ;; Tracked objects:
 15515 ;;		On entry : 0/0
 15516 ;;		On exit  : 0/0
 15517 ;;		Unchanged: 0/0
 15518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15519 ;;      Params:         0       4       0       0       0       0       0
 15520 ;;      Locals:         0       6       0       0       0       0       0
 15521 ;;      Temps:          0       5       0       0       0       0       0
 15522 ;;      Totals:         0      15       0       0       0       0       0
 15523 ;;Total ram usage:       15 bytes
 15524 ;; Hardware stack levels used:    1
 15525 ;; Hardware stack levels required when called:    4
 15526 ;; This function calls:
 15527 ;;		Nothing
 15528 ;; This function is called by:
 15529 ;;		_AdcConvert
 15530 ;;		_ReadIntFromEeprom
 15531 ;;		_pow
 15532 ;;		_exp
 15533 ;;		_floor
 15534 ;; This function uses a non-reentrant model
 15535 ;;
 15536                           
 15537                           	psect	text88
 15538  002246                     __ptext88:
 15539                           	opt stack 0
 15540  002246                     ___fttol:
 15541                           	opt stack 19
 15542                           
 15543                           ;incstack = 0
 15544  002246  C07A  F07C         	movff	___fttol@f1+2,??___fttol
 15545  00224A  0100               	movlb	0	; () banked
 15546  00224C  6B7D               	clrf	(??___fttol+1)& (0+255),b
 15547  00224E  6B7E               	clrf	(??___fttol+2)& (0+255),b
 15548  002250  3579               	rlcf	(___fttol@f1+1)& (0+255),w,b
 15549  002252  377C               	rlcf	??___fttol& (0+255),f,b
 15550  002254  E301               	bnc	u6731
 15551  002256  817D               	bsf	(??___fttol+1)& (0+255),0,b
 15552  002258                     u6731:
 15553  002258  517C               	movf	??___fttol& (0+255),w,b
 15554  00225A  6F86               	movwf	___fttol@exp1& (0+255),b
 15555  00225C  5186               	movf	___fttol@exp1& (0+255),w,b
 15556  00225E  A4D8               	btfss	status,2,c
 15557  002260  D009               	goto	l1906
 15558                           
 15559                           ; BSR set to: 0
 15560  002262  0E00               	movlw	0
 15561  002264  6F78               	movwf	?___fttol& (0+255),b
 15562  002266  0E00               	movlw	0
 15563  002268  6F79               	movwf	(?___fttol+1)& (0+255),b
 15564  00226A  0E00               	movlw	0
 15565  00226C  6F7A               	movwf	(?___fttol+2)& (0+255),b
 15566  00226E  0E00               	movlw	0
 15567  002270  6F7B               	movwf	(?___fttol+3)& (0+255),b
 15568                           
 15569                           ; BSR set to: 0
 15570  002272  0012               	return	
 15571  002274                     l1906:
 15572                           
 15573                           ; BSR set to: 0
 15574                           
 15575                           ; BSR set to: 0
 15576  002274  0E17               	movlw	23
 15577  002276  6F7C               	movwf	??___fttol& (0+255),b
 15578  002278  C078  F07D         	movff	___fttol@f1,??___fttol+1
 15579  00227C  C079  F07E         	movff	___fttol@f1+1,??___fttol+2
 15580  002280  C07A  F07F         	movff	___fttol@f1+2,??___fttol+3
 15581  002284  297C               	incf	??___fttol& (0+255),w,b
 15582  002286  6F80               	movwf	(??___fttol+4)& (0+255),b
 15583  002288  D004               	goto	u6750
 15584  00228A                     u6755:
 15585  00228A  90D8               	bcf	status,0,c
 15586  00228C  337F               	rrcf	(??___fttol+3)& (0+255),f,b
 15587  00228E  337E               	rrcf	(??___fttol+2)& (0+255),f,b
 15588  002290  337D               	rrcf	(??___fttol+1)& (0+255),f,b
 15589  002292                     u6750:
 15590  002292  2F80               	decfsz	(??___fttol+4)& (0+255),f,b
 15591  002294  D7FA               	goto	u6755
 15592  002296  0100               	movlb	0	; () banked
 15593  002298  517D               	movf	(??___fttol+1)& (0+255),w,b
 15594  00229A  6F81               	movwf	___fttol@sign1& (0+255),b
 15595                           
 15596                           ; BSR set to: 0
 15597  00229C  8F79               	bsf	(___fttol@f1+1)& (0+255),7,b
 15598                           
 15599                           ; BSR set to: 0
 15600  00229E  0EFF               	movlw	255
 15601  0022A0  1778               	andwf	___fttol@f1& (0+255),f,b
 15602  0022A2  0EFF               	movlw	255
 15603  0022A4  1779               	andwf	(___fttol@f1+1)& (0+255),f,b
 15604  0022A6  0E00               	movlw	0
 15605  0022A8  177A               	andwf	(___fttol@f1+2)& (0+255),f,b
 15606                           
 15607                           ; BSR set to: 0
 15608  0022AA  5178               	movf	___fttol@f1& (0+255),w,b
 15609  0022AC  6F82               	movwf	___fttol@lval& (0+255),b
 15610  0022AE  5179               	movf	(___fttol@f1+1)& (0+255),w,b
 15611  0022B0  6F83               	movwf	(___fttol@lval+1)& (0+255),b
 15612  0022B2  517A               	movf	(___fttol@f1+2)& (0+255),w,b
 15613  0022B4  6F84               	movwf	(___fttol@lval+2)& (0+255),b
 15614  0022B6  6B85               	clrf	(___fttol@lval+3)& (0+255),b
 15615                           
 15616                           ; BSR set to: 0
 15617  0022B8  0E8E               	movlw	142
 15618  0022BA  5F86               	subwf	___fttol@exp1& (0+255),f,b
 15619                           
 15620                           ; BSR set to: 0
 15621  0022BC  AF86               	btfss	___fttol@exp1& (0+255),7,b
 15622  0022BE  D016               	goto	l1908
 15623                           
 15624                           ; BSR set to: 0
 15625  0022C0  5186               	movf	___fttol@exp1& (0+255),w,b
 15626  0022C2  0A80               	xorlw	128
 15627  0022C4  0F8F               	addlw	143
 15628  0022C6  B0D8               	btfsc	status,0,c
 15629  0022C8  D009               	goto	l1909
 15630                           
 15631                           ; BSR set to: 0
 15632  0022CA  0E00               	movlw	0
 15633  0022CC  6F78               	movwf	?___fttol& (0+255),b
 15634  0022CE  0E00               	movlw	0
 15635  0022D0  6F79               	movwf	(?___fttol+1)& (0+255),b
 15636  0022D2  0E00               	movlw	0
 15637  0022D4  6F7A               	movwf	(?___fttol+2)& (0+255),b
 15638  0022D6  0E00               	movlw	0
 15639  0022D8  6F7B               	movwf	(?___fttol+3)& (0+255),b
 15640                           
 15641                           ; BSR set to: 0
 15642  0022DA  0012               	return	
 15643  0022DC                     l1909:
 15644                           
 15645                           ; BSR set to: 0
 15646                           
 15647                           ; BSR set to: 0
 15648                           
 15649                           ; BSR set to: 0
 15650  0022DC  90D8               	bcf	status,0,c
 15651  0022DE  3385               	rrcf	(___fttol@lval+3)& (0+255),f,b
 15652  0022E0  3384               	rrcf	(___fttol@lval+2)& (0+255),f,b
 15653  0022E2  3383               	rrcf	(___fttol@lval+1)& (0+255),f,b
 15654  0022E4  3382               	rrcf	___fttol@lval& (0+255),f,b
 15655                           
 15656                           ; BSR set to: 0
 15657  0022E6  3F86               	incfsz	___fttol@exp1& (0+255),f,b
 15658  0022E8  D7F9               	goto	l1909
 15659                           
 15660                           ; BSR set to: 0
 15661  0022EA  D015               	goto	u6790
 15662  0022EC                     l1908:
 15663                           
 15664                           ; BSR set to: 0
 15665                           
 15666                           ; BSR set to: 0
 15667  0022EC  0E17               	movlw	23
 15668  0022EE  6586               	cpfsgt	___fttol@exp1& (0+255),b
 15669  0022F0  D00F               	goto	l1914
 15670                           
 15671                           ; BSR set to: 0
 15672  0022F2  0E00               	movlw	0
 15673  0022F4  6F78               	movwf	?___fttol& (0+255),b
 15674  0022F6  0E00               	movlw	0
 15675  0022F8  6F79               	movwf	(?___fttol+1)& (0+255),b
 15676  0022FA  0E00               	movlw	0
 15677  0022FC  6F7A               	movwf	(?___fttol+2)& (0+255),b
 15678  0022FE  0E00               	movlw	0
 15679  002300  6F7B               	movwf	(?___fttol+3)& (0+255),b
 15680                           
 15681                           ; BSR set to: 0
 15682  002302  0012               	return	
 15683  002304                     
 15684                           ; BSR set to: 0
 15685                           
 15686                           ; BSR set to: 0
 15687  002304  90D8               	bcf	status,0,c
 15688  002306  3782               	rlcf	___fttol@lval& (0+255),f,b
 15689  002308  3783               	rlcf	(___fttol@lval+1)& (0+255),f,b
 15690  00230A  3784               	rlcf	(___fttol@lval+2)& (0+255),f,b
 15691  00230C  3785               	rlcf	(___fttol@lval+3)& (0+255),f,b
 15692  00230E  0786               	decf	___fttol@exp1& (0+255),f,b
 15693  002310                     l1914:
 15694                           
 15695                           ; BSR set to: 0
 15696                           
 15697                           ; BSR set to: 0
 15698  002310  5186               	movf	___fttol@exp1& (0+255),w,b
 15699  002312  A4D8               	btfss	status,2,c
 15700  002314  D7F7               	goto	l1915
 15701  002316                     u6790:
 15702                           
 15703                           ; BSR set to: 0
 15704                           
 15705                           ; BSR set to: 0
 15706                           
 15707                           ; BSR set to: 0
 15708  002316  5181               	movf	___fttol@sign1& (0+255),w,b
 15709  002318  B4D8               	btfsc	status,2,c
 15710  00231A  D008               	goto	l1917
 15711                           
 15712                           ; BSR set to: 0
 15713  00231C  1F85               	comf	(___fttol@lval+3)& (0+255),f,b
 15714  00231E  1F84               	comf	(___fttol@lval+2)& (0+255),f,b
 15715  002320  1F83               	comf	(___fttol@lval+1)& (0+255),f,b
 15716  002322  6D82               	negf	___fttol@lval& (0+255),b
 15717  002324  0E00               	movlw	0
 15718  002326  2383               	addwfc	(___fttol@lval+1)& (0+255),f,b
 15719  002328  2384               	addwfc	(___fttol@lval+2)& (0+255),f,b
 15720  00232A  2385               	addwfc	(___fttol@lval+3)& (0+255),f,b
 15721  00232C                     l1917:
 15722                           
 15723                           ; BSR set to: 0
 15724                           
 15725                           ; BSR set to: 0
 15726  00232C  C082  F078         	movff	___fttol@lval,?___fttol
 15727  002330  C083  F079         	movff	___fttol@lval+1,?___fttol+1
 15728  002334  C084  F07A         	movff	___fttol@lval+2,?___fttol+2
 15729  002338  C085  F07B         	movff	___fttol@lval+3,?___fttol+3
 15730  00233C  0012               	return	
 15731  00233E                     __end_of___fttol:
 15732                           	opt stack 0
 15733                           tosu	equ	0xFFF
 15734                           tosh	equ	0xFFE
 15735                           tosl	equ	0xFFD
 15736                           pclath	equ	0xFFA
 15737                           tblptru	equ	0xFF8
 15738                           tblptrh	equ	0xFF7
 15739                           tblptrl	equ	0xFF6
 15740                           tablat	equ	0xFF5
 15741                           prodh	equ	0xFF4
 15742                           prodl	equ	0xFF3
 15743                           intcon	equ	0xFF2
 15744                           intcon2	equ	0xFF1
 15745                           postinc0	equ	0xFEE
 15746                           plusw0	equ	0xFEB
 15747                           wreg	equ	0xFE8
 15748                           indf1	equ	0xFE7
 15749                           postdec1	equ	0xFE5
 15750                           fsr1h	equ	0xFE2
 15751                           fsr1l	equ	0xFE1
 15752                           indf2	equ	0xFDF
 15753                           postinc2	equ	0xFDE
 15754                           postdec2	equ	0xFDD
 15755                           plusw2	equ	0xFDB
 15756                           fsr2h	equ	0xFDA
 15757                           fsr2l	equ	0xFD9
 15758                           status	equ	0xFD8
 15759                           
 15760 ;; *************** function ___ftge *****************
 15761 ;; Defined at:
 15762 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 15763 ;; Parameters:    Size  Location     Type
 15764 ;;  ff1             3   23[COMRAM] float 
 15765 ;;  ff2             3   26[COMRAM] float 
 15766 ;; Auto vars:     Size  Location     Type
 15767 ;;		None
 15768 ;; Return value:  Size  Location     Type
 15769 ;;		None               void
 15770 ;; Registers used:
 15771 ;;		wreg, status,2, status,0
 15772 ;; Tracked objects:
 15773 ;;		On entry : 0/0
 15774 ;;		On exit  : 0/0
 15775 ;;		Unchanged: 0/0
 15776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15777 ;;      Params:         6       0       0       0       0       0       0
 15778 ;;      Locals:         0       0       0       0       0       0       0
 15779 ;;      Temps:          3       0       0       0       0       0       0
 15780 ;;      Totals:         9       0       0       0       0       0       0
 15781 ;;Total ram usage:        9 bytes
 15782 ;; Hardware stack levels used:    1
 15783 ;; Hardware stack levels required when called:    4
 15784 ;; This function calls:
 15785 ;;		Nothing
 15786 ;; This function is called by:
 15787 ;;		_CheckFlashPrecentage
 15788 ;;		_pow
 15789 ;;		_exp
 15790 ;;		_floor
 15791 ;; This function uses a non-reentrant model
 15792 ;;
 15793                           
 15794                           	psect	text89
 15795  00313C                     __ptext89:
 15796                           	opt stack 0
 15797  00313C                     ___ftge:
 15798                           	opt stack 19
 15799                           
 15800                           ; BSR set to: 0
 15801                           ;incstack = 0
 15802  00313C  AE1A               	btfss	___ftge@ff1+2,7,c
 15803  00313E  D016               	goto	l1878
 15804  003140  C018  F01E         	movff	___ftge@ff1,??___ftge
 15805  003144  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
 15806  003148  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
 15807  00314C  1E1E               	comf	??___ftge,f,c
 15808  00314E  1E1F               	comf	??___ftge+1,f,c
 15809  003150  1E20               	comf	??___ftge+2,f,c
 15810  003152  2A1E               	incf	??___ftge,f,c
 15811  003154  0E00               	movlw	0
 15812  003156  221F               	addwfc	??___ftge+1,f,c
 15813  003158  2220               	addwfc	??___ftge+2,f,c
 15814  00315A  0E00               	movlw	0
 15815  00315C  241E               	addwf	??___ftge,w,c
 15816  00315E  6E18               	movwf	___ftge@ff1,c
 15817  003160  0E00               	movlw	0
 15818  003162  201F               	addwfc	??___ftge+1,w,c
 15819  003164  6E19               	movwf	___ftge@ff1+1,c
 15820  003166  0E80               	movlw	128
 15821  003168  2020               	addwfc	??___ftge+2,w,c
 15822  00316A  6E1A               	movwf	___ftge@ff1+2,c
 15823  00316C                     l1878:
 15824  00316C  AE1D               	btfss	___ftge@ff2+2,7,c
 15825  00316E  D016               	goto	l1879
 15826  003170  C01B  F01E         	movff	___ftge@ff2,??___ftge
 15827  003174  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
 15828  003178  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
 15829  00317C  1E1E               	comf	??___ftge,f,c
 15830  00317E  1E1F               	comf	??___ftge+1,f,c
 15831  003180  1E20               	comf	??___ftge+2,f,c
 15832  003182  2A1E               	incf	??___ftge,f,c
 15833  003184  0E00               	movlw	0
 15834  003186  221F               	addwfc	??___ftge+1,f,c
 15835  003188  2220               	addwfc	??___ftge+2,f,c
 15836  00318A  0E00               	movlw	0
 15837  00318C  241E               	addwf	??___ftge,w,c
 15838  00318E  6E1B               	movwf	___ftge@ff2,c
 15839  003190  0E00               	movlw	0
 15840  003192  201F               	addwfc	??___ftge+1,w,c
 15841  003194  6E1C               	movwf	___ftge@ff2+1,c
 15842  003196  0E80               	movlw	128
 15843  003198  2020               	addwfc	??___ftge+2,w,c
 15844  00319A  6E1D               	movwf	___ftge@ff2+2,c
 15845  00319C                     l1879:
 15846  00319C  0E00               	movlw	0
 15847  00319E  1A18               	xorwf	___ftge@ff1,f,c
 15848  0031A0  0E00               	movlw	0
 15849  0031A2  1A19               	xorwf	___ftge@ff1+1,f,c
 15850  0031A4  0E80               	movlw	128
 15851  0031A6  1A1A               	xorwf	___ftge@ff1+2,f,c
 15852  0031A8  0E00               	movlw	0
 15853  0031AA  1A1B               	xorwf	___ftge@ff2,f,c
 15854  0031AC  0E00               	movlw	0
 15855  0031AE  1A1C               	xorwf	___ftge@ff2+1,f,c
 15856  0031B0  0E80               	movlw	128
 15857  0031B2  1A1D               	xorwf	___ftge@ff2+2,f,c
 15858  0031B4  501B               	movf	___ftge@ff2,w,c
 15859  0031B6  5C18               	subwf	___ftge@ff1,w,c
 15860  0031B8  501C               	movf	___ftge@ff2+1,w,c
 15861  0031BA  5819               	subwfb	___ftge@ff1+1,w,c
 15862  0031BC  501D               	movf	___ftge@ff2+2,w,c
 15863  0031BE  581A               	subwfb	___ftge@ff1+2,w,c
 15864  0031C0  B0D8               	btfsc	status,0,c
 15865  0031C2  D002               	goto	l6942
 15866  0031C4  90D8               	bcf	status,0,c
 15867  0031C6  0012               	return	
 15868  0031C8                     l6942:
 15869  0031C8  80D8               	bsf	status,0,c
 15870  0031CA  0012               	return	
 15871  0031CC                     __end_of___ftge:
 15872                           	opt stack 0
 15873                           tosu	equ	0xFFF
 15874                           tosh	equ	0xFFE
 15875                           tosl	equ	0xFFD
 15876                           pclath	equ	0xFFA
 15877                           tblptru	equ	0xFF8
 15878                           tblptrh	equ	0xFF7
 15879                           tblptrl	equ	0xFF6
 15880                           tablat	equ	0xFF5
 15881                           prodh	equ	0xFF4
 15882                           prodl	equ	0xFF3
 15883                           intcon	equ	0xFF2
 15884                           intcon2	equ	0xFF1
 15885                           postinc0	equ	0xFEE
 15886                           plusw0	equ	0xFEB
 15887                           wreg	equ	0xFE8
 15888                           indf1	equ	0xFE7
 15889                           postdec1	equ	0xFE5
 15890                           fsr1h	equ	0xFE2
 15891                           fsr1l	equ	0xFE1
 15892                           indf2	equ	0xFDF
 15893                           postinc2	equ	0xFDE
 15894                           postdec2	equ	0xFDD
 15895                           plusw2	equ	0xFDB
 15896                           fsr2h	equ	0xFDA
 15897                           fsr2l	equ	0xFD9
 15898                           status	equ	0xFD8
 15899                           
 15900 ;; *************** function ___altoft *****************
 15901 ;; Defined at:
 15902 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 15903 ;; Parameters:    Size  Location     Type
 15904 ;;  c               4   39[BANK0 ] long 
 15905 ;; Auto vars:     Size  Location     Type
 15906 ;;  sign            1   47[COMRAM] unsigned char 
 15907 ;;  exp             1   46[COMRAM] unsigned char 
 15908 ;; Return value:  Size  Location     Type
 15909 ;;                  3   39[BANK0 ] float 
 15910 ;; Registers used:
 15911 ;;		wreg, status,2, status,0, cstack
 15912 ;; Tracked objects:
 15913 ;;		On entry : 0/0
 15914 ;;		On exit  : 0/0
 15915 ;;		Unchanged: 0/0
 15916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15917 ;;      Params:         0       4       0       0       0       0       0
 15918 ;;      Locals:         2       0       0       0       0       0       0
 15919 ;;      Temps:          0       4       0       0       0       0       0
 15920 ;;      Totals:         2       8       0       0       0       0       0
 15921 ;;Total ram usage:       10 bytes
 15922 ;; Hardware stack levels used:    1
 15923 ;; Hardware stack levels required when called:    5
 15924 ;; This function calls:
 15925 ;;		___ftpack
 15926 ;; This function is called by:
 15927 ;;		_floor
 15928 ;; This function uses a non-reentrant model
 15929 ;;
 15930                           
 15931                           	psect	text90
 15932  003356                     __ptext90:
 15933                           	opt stack 0
 15934  003356                     ___altoft:
 15935                           	opt stack 18
 15936                           
 15937                           ;incstack = 0
 15938  003356  0E00               	movlw	0
 15939  003358  6E30               	movwf	___altoft@sign,c
 15940  00335A  0E8E               	movlw	142
 15941  00335C  6E2F               	movwf	___altoft@exp,c
 15942  00335E  0100               	movlb	0	; () banked
 15943  003360  AF8A               	btfss	(___altoft@c+3)& (0+255),7,b
 15944  003362  D011               	goto	l1676
 15945                           
 15946                           ; BSR set to: 0
 15947  003364  1F8A               	comf	(___altoft@c+3)& (0+255),f,b
 15948  003366  1F89               	comf	(___altoft@c+2)& (0+255),f,b
 15949  003368  1F88               	comf	(___altoft@c+1)& (0+255),f,b
 15950  00336A  6D87               	negf	___altoft@c& (0+255),b
 15951  00336C  0E00               	movlw	0
 15952  00336E  2388               	addwfc	(___altoft@c+1)& (0+255),f,b
 15953  003370  2389               	addwfc	(___altoft@c+2)& (0+255),f,b
 15954  003372  238A               	addwfc	(___altoft@c+3)& (0+255),f,b
 15955                           
 15956                           ; BSR set to: 0
 15957  003374  0E01               	movlw	1
 15958  003376  6E30               	movwf	___altoft@sign,c
 15959                           
 15960                           ; BSR set to: 0
 15961  003378  D006               	goto	l1676
 15962  00337A                     
 15963                           ; BSR set to: 0
 15964                           
 15965                           ; BSR set to: 0
 15966  00337A  90D8               	bcf	status,0,c
 15967  00337C  338A               	rrcf	(___altoft@c+3)& (0+255),f,b
 15968  00337E  3389               	rrcf	(___altoft@c+2)& (0+255),f,b
 15969  003380  3388               	rrcf	(___altoft@c+1)& (0+255),f,b
 15970  003382  3387               	rrcf	___altoft@c& (0+255),f,b
 15971  003384  2A2F               	incf	___altoft@exp,f,c
 15972  003386                     l1676:
 15973                           
 15974                           ; BSR set to: 0
 15975                           
 15976                           ; BSR set to: 0
 15977  003386  0E00               	movlw	0
 15978  003388  1587               	andwf	___altoft@c& (0+255),w,b
 15979  00338A  6F8B               	movwf	??___altoft& (0+255),b
 15980  00338C  0E00               	movlw	0
 15981  00338E  1588               	andwf	(___altoft@c+1)& (0+255),w,b
 15982  003390  6F8C               	movwf	(??___altoft+1)& (0+255),b
 15983  003392  0E00               	movlw	0
 15984  003394  1589               	andwf	(___altoft@c+2)& (0+255),w,b
 15985  003396  6F8D               	movwf	(??___altoft+2)& (0+255),b
 15986  003398  0EFF               	movlw	255
 15987  00339A  158A               	andwf	(___altoft@c+3)& (0+255),w,b
 15988  00339C  6F8E               	movwf	(??___altoft+3)& (0+255),b
 15989  00339E  518B               	movf	??___altoft& (0+255),w,b
 15990  0033A0  118C               	iorwf	(??___altoft+1)& (0+255),w,b
 15991  0033A2  118D               	iorwf	(??___altoft+2)& (0+255),w,b
 15992  0033A4  118E               	iorwf	(??___altoft+3)& (0+255),w,b
 15993  0033A6  A4D8               	btfss	status,2,c
 15994  0033A8  D7E8               	goto	l1677
 15995                           
 15996                           ; BSR set to: 0
 15997                           
 15998                           ; BSR set to: 0
 15999  0033AA  C087  F018         	movff	___altoft@c,___ftpack@arg
 16000  0033AE  C088  F019         	movff	___altoft@c+1,___ftpack@arg+1
 16001  0033B2  C089  F01A         	movff	___altoft@c+2,___ftpack@arg+2
 16002  0033B6  C02F  F01B         	movff	___altoft@exp,___ftpack@exp
 16003  0033BA  C030  F01C         	movff	___altoft@sign,___ftpack@sign
 16004  0033BE  ECBA  F016         	call	___ftpack	;wreg free
 16005  0033C2  C018  F087         	movff	?___ftpack,?___altoft
 16006  0033C6  C019  F088         	movff	?___ftpack+1,?___altoft+1
 16007  0033CA  C01A  F089         	movff	?___ftpack+2,?___altoft+2
 16008  0033CE  0012               	return	
 16009  0033D0                     __end_of___altoft:
 16010                           	opt stack 0
 16011                           tosu	equ	0xFFF
 16012                           tosh	equ	0xFFE
 16013                           tosl	equ	0xFFD
 16014                           pclath	equ	0xFFA
 16015                           tblptru	equ	0xFF8
 16016                           tblptrh	equ	0xFF7
 16017                           tblptrl	equ	0xFF6
 16018                           tablat	equ	0xFF5
 16019                           prodh	equ	0xFF4
 16020                           prodl	equ	0xFF3
 16021                           intcon	equ	0xFF2
 16022                           intcon2	equ	0xFF1
 16023                           postinc0	equ	0xFEE
 16024                           plusw0	equ	0xFEB
 16025                           wreg	equ	0xFE8
 16026                           indf1	equ	0xFE7
 16027                           postdec1	equ	0xFE5
 16028                           fsr1h	equ	0xFE2
 16029                           fsr1l	equ	0xFE1
 16030                           indf2	equ	0xFDF
 16031                           postinc2	equ	0xFDE
 16032                           postdec2	equ	0xFDD
 16033                           plusw2	equ	0xFDB
 16034                           fsr2h	equ	0xFDA
 16035                           fsr2l	equ	0xFD9
 16036                           status	equ	0xFD8
 16037                           
 16038 ;; *************** function _eval_poly *****************
 16039 ;; Defined at:
 16040 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
 16041 ;; Parameters:    Size  Location     Type
 16042 ;;  x               3   36[BANK0 ] float 
 16043 ;;  d               2   39[BANK0 ] PTR const 
 16044 ;;		 -> log@coeff(27), exp@coeff(30), 
 16045 ;;  n               2   41[BANK0 ] int 
 16046 ;; Auto vars:     Size  Location     Type
 16047 ;;  res             3   43[BANK0 ] int 
 16048 ;; Return value:  Size  Location     Type
 16049 ;;                  3   36[BANK0 ] int 
 16050 ;; Registers used:
 16051 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16052 ;; Tracked objects:
 16053 ;;		On entry : 0/0
 16054 ;;		On exit  : 0/0
 16055 ;;		Unchanged: 0/0
 16056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16057 ;;      Params:         0       7       0       0       0       0       0
 16058 ;;      Locals:         0       3       0       0       0       0       0
 16059 ;;      Temps:          2       0       0       0       0       0       0
 16060 ;;      Totals:         2      10       0       0       0       0       0
 16061 ;;Total ram usage:       12 bytes
 16062 ;; Hardware stack levels used:    1
 16063 ;; Hardware stack levels required when called:    6
 16064 ;; This function calls:
 16065 ;;		___ftadd
 16066 ;;		___ftmul
 16067 ;;		___wmul
 16068 ;; This function is called by:
 16069 ;;		_exp
 16070 ;;		_log
 16071 ;; This function uses a non-reentrant model
 16072 ;;
 16073                           
 16074                           	psect	text91
 16075  0029A0                     __ptext91:
 16076                           	opt stack 0
 16077  0029A0                     _eval_poly:
 16078                           	opt stack 18
 16079                           
 16080                           ;incstack = 0
 16081  0029A0  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 16082  0029A4  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 16083  0029A8  0E00               	movlw	0
 16084  0029AA  6E1B               	movwf	___wmul@multiplicand+1,c
 16085  0029AC  0E03               	movlw	3
 16086  0029AE  6E1A               	movwf	___wmul@multiplicand,c
 16087  0029B0  ECB2  F01F         	call	___wmul	;wreg free
 16088  0029B4  C087  F02F         	movff	eval_poly@d,??_eval_poly
 16089  0029B8  C088  F030         	movff	eval_poly@d+1,??_eval_poly+1
 16090  0029BC  5018               	movf	?___wmul,w,c
 16091  0029BE  262F               	addwf	??_eval_poly,f,c
 16092  0029C0  5019               	movf	?___wmul+1,w,c
 16093  0029C2  2230               	addwfc	??_eval_poly+1,f,c
 16094  0029C4  C02F  FFF6         	movff	??_eval_poly,tblptrl
 16095  0029C8  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 16096  0029CC                     	if	0	;tblptru may be non-zero
 16097  0029CC                     	endif
 16098  0029CC                     	if	0	;tblptru may be non-zero
 16099  0029CC                     	endif
 16100  0029CC  0009               	tblrd		*+
 16101  0029CE  CFF5 F08B          	movff	tablat,eval_poly@res
 16102  0029D2  0009               	tblrd		*+
 16103  0029D4  CFF5 F08C          	movff	tablat,eval_poly@res+1
 16104  0029D8  000A               	tblrd		*-
 16105  0029DA  CFF5 F08D          	movff	tablat,eval_poly@res+2
 16106  0029DE  D03F               	goto	l2301
 16107  0029E0  C08B  F06C         	movff	eval_poly@res,___ftmul@f2
 16108  0029E4  C08C  F06D         	movff	eval_poly@res+1,___ftmul@f2+1
 16109  0029E8  C08D  F06E         	movff	eval_poly@res+2,___ftmul@f2+2
 16110  0029EC  C084  F069         	movff	eval_poly@x,___ftmul@f1
 16111  0029F0  C085  F06A         	movff	eval_poly@x+1,___ftmul@f1+1
 16112  0029F4  C086  F06B         	movff	eval_poly@x+2,___ftmul@f1+2
 16113  0029F8  EC1A  F012         	call	___ftmul	;wreg free
 16114  0029FC  C069  F078         	movff	?___ftmul,___ftadd@f1
 16115  002A00  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 16116  002A04  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 16117  002A08  0E00               	movlw	0
 16118  002A0A  6E1B               	movwf	___wmul@multiplicand+1,c
 16119  002A0C  0E03               	movlw	3
 16120  002A0E  6E1A               	movwf	___wmul@multiplicand,c
 16121  002A10  0100               	movlb	0	; () banked
 16122  002A12  0789               	decf	eval_poly@n& (0+255),f,b
 16123  002A14  A0D8               	btfss	status,0,c
 16124  002A16  078A               	decf	(eval_poly@n+1)& (0+255),f,b
 16125  002A18  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 16126  002A1C  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 16127  002A20  ECB2  F01F         	call	___wmul	;wreg free
 16128  002A24  C087  F02F         	movff	eval_poly@d,??_eval_poly
 16129  002A28  C088  F030         	movff	eval_poly@d+1,??_eval_poly+1
 16130  002A2C  5018               	movf	?___wmul,w,c
 16131  002A2E  262F               	addwf	??_eval_poly,f,c
 16132  002A30  5019               	movf	?___wmul+1,w,c
 16133  002A32  2230               	addwfc	??_eval_poly+1,f,c
 16134  002A34  C02F  FFF6         	movff	??_eval_poly,tblptrl
 16135  002A38  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 16136  002A3C                     	if	0	;tblptru may be non-zero
 16137  002A3C                     	endif
 16138  002A3C                     	if	0	;tblptru may be non-zero
 16139  002A3C                     	endif
 16140  002A3C  0009               	tblrd		*+
 16141  002A3E  CFF5 F07B          	movff	tablat,___ftadd@f2
 16142  002A42  0009               	tblrd		*+
 16143  002A44  CFF5 F07C          	movff	tablat,___ftadd@f2+1
 16144  002A48  000A               	tblrd		*-
 16145  002A4A  CFF5 F07D          	movff	tablat,___ftadd@f2+2
 16146  002A4E  ECA0  F00C         	call	___ftadd	;wreg free
 16147  002A52  C078  F08B         	movff	?___ftadd,eval_poly@res
 16148  002A56  C079  F08C         	movff	?___ftadd+1,eval_poly@res+1
 16149  002A5A  C07A  F08D         	movff	?___ftadd+2,eval_poly@res+2
 16150  002A5E                     l2301:
 16151  002A5E  0100               	movlb	0	; () banked
 16152  002A60  5189               	movf	eval_poly@n& (0+255),w,b
 16153  002A62  118A               	iorwf	(eval_poly@n+1)& (0+255),w,b
 16154  002A64  A4D8               	btfss	status,2,c
 16155  002A66  D7BC               	goto	l2302
 16156                           
 16157                           ; BSR set to: 0
 16158  002A68  C08B  F084         	movff	eval_poly@res,?_eval_poly
 16159  002A6C  C08C  F085         	movff	eval_poly@res+1,?_eval_poly+1
 16160  002A70  C08D  F086         	movff	eval_poly@res+2,?_eval_poly+2
 16161                           
 16162                           ; BSR set to: 0
 16163  002A74  0012               	return		;funcret
 16164  002A76                     __end_of_eval_poly:
 16165                           	opt stack 0
 16166                           tosu	equ	0xFFF
 16167                           tosh	equ	0xFFE
 16168                           tosl	equ	0xFFD
 16169                           pclath	equ	0xFFA
 16170                           tblptru	equ	0xFF8
 16171                           tblptrh	equ	0xFF7
 16172                           tblptrl	equ	0xFF6
 16173                           tablat	equ	0xFF5
 16174                           prodh	equ	0xFF4
 16175                           prodl	equ	0xFF3
 16176                           intcon	equ	0xFF2
 16177                           intcon2	equ	0xFF1
 16178                           postinc0	equ	0xFEE
 16179                           plusw0	equ	0xFEB
 16180                           wreg	equ	0xFE8
 16181                           indf1	equ	0xFE7
 16182                           postdec1	equ	0xFE5
 16183                           fsr1h	equ	0xFE2
 16184                           fsr1l	equ	0xFE1
 16185                           indf2	equ	0xFDF
 16186                           postinc2	equ	0xFDE
 16187                           postdec2	equ	0xFDD
 16188                           plusw2	equ	0xFDB
 16189                           fsr2h	equ	0xFDA
 16190                           fsr2l	equ	0xFD9
 16191                           status	equ	0xFD8
 16192                           
 16193 ;; *************** function ___wmul *****************
 16194 ;; Defined at:
 16195 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 16196 ;; Parameters:    Size  Location     Type
 16197 ;;  multiplier      2   23[COMRAM] unsigned int 
 16198 ;;  multiplicand    2   25[COMRAM] unsigned int 
 16199 ;; Auto vars:     Size  Location     Type
 16200 ;;  product         2   27[COMRAM] unsigned int 
 16201 ;; Return value:  Size  Location     Type
 16202 ;;                  2   23[COMRAM] unsigned int 
 16203 ;; Registers used:
 16204 ;;		wreg, status,2, status,0, prodl, prodh
 16205 ;; Tracked objects:
 16206 ;;		On entry : 0/0
 16207 ;;		On exit  : 0/0
 16208 ;;		Unchanged: 0/0
 16209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16210 ;;      Params:         4       0       0       0       0       0       0
 16211 ;;      Locals:         2       0       0       0       0       0       0
 16212 ;;      Temps:          0       0       0       0       0       0       0
 16213 ;;      Totals:         6       0       0       0       0       0       0
 16214 ;;Total ram usage:        6 bytes
 16215 ;; Hardware stack levels used:    1
 16216 ;; Hardware stack levels required when called:    4
 16217 ;; This function calls:
 16218 ;;		Nothing
 16219 ;; This function is called by:
 16220 ;;		_GetMcuFwVersion
 16221 ;;		_eval_poly
 16222 ;; This function uses a non-reentrant model
 16223 ;;
 16224                           
 16225                           	psect	text92
 16226  003F64                     __ptext92:
 16227                           	opt stack 0
 16228  003F64                     ___wmul:
 16229                           	opt stack 19
 16230                           
 16231                           ; BSR set to: 0
 16232                           ;incstack = 0
 16233  003F64  5018               	movf	___wmul@multiplier,w,c
 16234  003F66  021A               	mulwf	___wmul@multiplicand,c
 16235  003F68  CFF3 F01C          	movff	prodl,___wmul@product
 16236  003F6C  CFF4 F01D          	movff	prodh,___wmul@product+1
 16237  003F70  5018               	movf	___wmul@multiplier,w,c
 16238  003F72  021B               	mulwf	___wmul@multiplicand+1,c
 16239  003F74  50F3               	movf	prodl,w,c
 16240  003F76  261D               	addwf	___wmul@product+1,f,c
 16241  003F78  5019               	movf	___wmul@multiplier+1,w,c
 16242  003F7A  021A               	mulwf	___wmul@multiplicand,c
 16243  003F7C  50F3               	movf	prodl,w,c
 16244  003F7E  261D               	addwf	___wmul@product+1,f,c
 16245  003F80  C01C  F018         	movff	___wmul@product,?___wmul
 16246  003F84  C01D  F019         	movff	___wmul@product+1,?___wmul+1
 16247  003F88  0012               	return	
 16248  003F8A                     __end_of___wmul:
 16249                           	opt stack 0
 16250                           tosu	equ	0xFFF
 16251                           tosh	equ	0xFFE
 16252                           tosl	equ	0xFFD
 16253                           pclath	equ	0xFFA
 16254                           tblptru	equ	0xFF8
 16255                           tblptrh	equ	0xFF7
 16256                           tblptrl	equ	0xFF6
 16257                           tablat	equ	0xFF5
 16258                           prodh	equ	0xFF4
 16259                           prodl	equ	0xFF3
 16260                           intcon	equ	0xFF2
 16261                           intcon2	equ	0xFF1
 16262                           postinc0	equ	0xFEE
 16263                           plusw0	equ	0xFEB
 16264                           wreg	equ	0xFE8
 16265                           indf1	equ	0xFE7
 16266                           postdec1	equ	0xFE5
 16267                           fsr1h	equ	0xFE2
 16268                           fsr1l	equ	0xFE1
 16269                           indf2	equ	0xFDF
 16270                           postinc2	equ	0xFDE
 16271                           postdec2	equ	0xFDD
 16272                           plusw2	equ	0xFDB
 16273                           fsr2h	equ	0xFDA
 16274                           fsr2l	equ	0xFD9
 16275                           status	equ	0xFD8
 16276                           
 16277 ;; *************** function ___ftmul *****************
 16278 ;; Defined at:
 16279 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 16280 ;; Parameters:    Size  Location     Type
 16281 ;;  f1              3    9[BANK0 ] float 
 16282 ;;  f2              3   12[BANK0 ] float 
 16283 ;; Auto vars:     Size  Location     Type
 16284 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
 16285 ;;  sign            1   23[BANK0 ] unsigned char 
 16286 ;;  cntr            1   22[BANK0 ] unsigned char 
 16287 ;;  exp             1   18[BANK0 ] unsigned char 
 16288 ;; Return value:  Size  Location     Type
 16289 ;;                  3    9[BANK0 ] float 
 16290 ;; Registers used:
 16291 ;;		wreg, status,2, status,0, cstack
 16292 ;; Tracked objects:
 16293 ;;		On entry : 0/0
 16294 ;;		On exit  : 0/0
 16295 ;;		Unchanged: 0/0
 16296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16297 ;;      Params:         0       6       0       0       0       0       0
 16298 ;;      Locals:         0       6       0       0       0       0       0
 16299 ;;      Temps:          0       3       0       0       0       0       0
 16300 ;;      Totals:         0      15       0       0       0       0       0
 16301 ;;Total ram usage:       15 bytes
 16302 ;; Hardware stack levels used:    1
 16303 ;; Hardware stack levels required when called:    5
 16304 ;; This function calls:
 16305 ;;		___ftpack
 16306 ;; This function is called by:
 16307 ;;		_AdcConvert
 16308 ;;		_CheckFlashPrecentage
 16309 ;;		_pow
 16310 ;;		_exp
 16311 ;;		_log
 16312 ;;		_eval_poly
 16313 ;; This function uses a non-reentrant model
 16314 ;;
 16315                           
 16316                           	psect	text93
 16317  002434                     __ptext93:
 16318                           	opt stack 0
 16319  002434                     ___ftmul:
 16320                           	opt stack 18
 16321                           
 16322                           ;incstack = 0
 16323  002434  C06B  F06F         	movff	___ftmul@f1+2,??___ftmul
 16324  002438  0100               	movlb	0	; () banked
 16325  00243A  6B70               	clrf	(??___ftmul+1)& (0+255),b
 16326  00243C  6B71               	clrf	(??___ftmul+2)& (0+255),b
 16327  00243E  356A               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 16328  002440  376F               	rlcf	??___ftmul& (0+255),f,b
 16329  002442  E301               	bnc	u6641
 16330  002444  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 16331  002446                     u6641:
 16332  002446  516F               	movf	??___ftmul& (0+255),w,b
 16333  002448  6F72               	movwf	___ftmul@exp& (0+255),b
 16334  00244A  5172               	movf	___ftmul@exp& (0+255),w,b
 16335  00244C  A4D8               	btfss	status,2,c
 16336  00244E  D007               	goto	l1885
 16337                           
 16338                           ; BSR set to: 0
 16339  002450  0E00               	movlw	0
 16340  002452  6F69               	movwf	?___ftmul& (0+255),b
 16341  002454  0E00               	movlw	0
 16342  002456  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 16343  002458  0E00               	movlw	0
 16344  00245A  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 16345                           
 16346                           ; BSR set to: 0
 16347  00245C  0012               	return	
 16348  00245E                     l1885:
 16349                           
 16350                           ; BSR set to: 0
 16351                           
 16352                           ; BSR set to: 0
 16353  00245E  C06E  F06F         	movff	___ftmul@f2+2,??___ftmul
 16354  002462  6B70               	clrf	(??___ftmul+1)& (0+255),b
 16355  002464  6B71               	clrf	(??___ftmul+2)& (0+255),b
 16356  002466  356D               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 16357  002468  376F               	rlcf	??___ftmul& (0+255),f,b
 16358  00246A  E301               	bnc	u6661
 16359  00246C  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 16360  00246E                     u6661:
 16361  00246E  516F               	movf	??___ftmul& (0+255),w,b
 16362  002470  6F77               	movwf	___ftmul@sign& (0+255),b
 16363  002472  5177               	movf	___ftmul@sign& (0+255),w,b
 16364  002474  A4D8               	btfss	status,2,c
 16365  002476  D007               	goto	l1887
 16366                           
 16367                           ; BSR set to: 0
 16368  002478  0E00               	movlw	0
 16369  00247A  6F69               	movwf	?___ftmul& (0+255),b
 16370  00247C  0E00               	movlw	0
 16371  00247E  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 16372  002480  0E00               	movlw	0
 16373  002482  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 16374                           
 16375                           ; BSR set to: 0
 16376  002484  0012               	return	
 16377  002486                     l1887:
 16378                           
 16379                           ; BSR set to: 0
 16380                           
 16381                           ; BSR set to: 0
 16382  002486  5177               	movf	___ftmul@sign& (0+255),w,b
 16383  002488  0F7B               	addlw	123
 16384  00248A  2772               	addwf	___ftmul@exp& (0+255),f,b
 16385                           
 16386                           ; BSR set to: 0
 16387  00248C  C06B  F077         	movff	___ftmul@f1+2,___ftmul@sign
 16388  002490  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 16389  002492  1B77               	xorwf	___ftmul@sign& (0+255),f,b
 16390  002494  0E80               	movlw	128
 16391  002496  1777               	andwf	___ftmul@sign& (0+255),f,b
 16392                           
 16393                           ; BSR set to: 0
 16394  002498  8F6A               	bsf	(___ftmul@f1+1)& (0+255),7,b
 16395                           
 16396                           ; BSR set to: 0
 16397  00249A  8F6D               	bsf	(___ftmul@f2+1)& (0+255),7,b
 16398                           
 16399                           ; BSR set to: 0
 16400  00249C  0EFF               	movlw	255
 16401  00249E  176C               	andwf	___ftmul@f2& (0+255),f,b
 16402  0024A0  0EFF               	movlw	255
 16403  0024A2  176D               	andwf	(___ftmul@f2+1)& (0+255),f,b
 16404  0024A4  0E00               	movlw	0
 16405  0024A6  176E               	andwf	(___ftmul@f2+2)& (0+255),f,b
 16406                           
 16407                           ; BSR set to: 0
 16408  0024A8  0E00               	movlw	0
 16409  0024AA  6F73               	movwf	___ftmul@f3_as_product& (0+255),b
 16410  0024AC  0E00               	movlw	0
 16411  0024AE  6F74               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 16412  0024B0  0E00               	movlw	0
 16413  0024B2  6F75               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 16414                           
 16415                           ; BSR set to: 0
 16416  0024B4  0E07               	movlw	7
 16417  0024B6  6F76               	movwf	___ftmul@cntr& (0+255),b
 16418  0024B8                     
 16419                           ; BSR set to: 0
 16420                           
 16421                           ; BSR set to: 0
 16422  0024B8  A169               	btfss	___ftmul@f1& (0+255),0,b
 16423  0024BA  D006               	goto	l1889
 16424                           
 16425                           ; BSR set to: 0
 16426  0024BC  516C               	movf	___ftmul@f2& (0+255),w,b
 16427  0024BE  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 16428  0024C0  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 16429  0024C2  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 16430  0024C4  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 16431  0024C6  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 16432  0024C8                     l1889:
 16433                           
 16434                           ; BSR set to: 0
 16435                           
 16436                           ; BSR set to: 0
 16437  0024C8  90D8               	bcf	status,0,c
 16438  0024CA  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 16439  0024CC  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 16440  0024CE  3369               	rrcf	___ftmul@f1& (0+255),f,b
 16441  0024D0  90D8               	bcf	status,0,c
 16442  0024D2  376C               	rlcf	___ftmul@f2& (0+255),f,b
 16443  0024D4  376D               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 16444  0024D6  376E               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 16445                           
 16446                           ; BSR set to: 0
 16447  0024D8  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 16448  0024DA  D7EE               	goto	l1888
 16449                           
 16450                           ; BSR set to: 0
 16451                           
 16452                           ; BSR set to: 0
 16453  0024DC  0E09               	movlw	9
 16454  0024DE  6F76               	movwf	___ftmul@cntr& (0+255),b
 16455  0024E0                     
 16456                           ; BSR set to: 0
 16457                           
 16458                           ; BSR set to: 0
 16459  0024E0  A169               	btfss	___ftmul@f1& (0+255),0,b
 16460  0024E2  D006               	goto	l1892
 16461                           
 16462                           ; BSR set to: 0
 16463  0024E4  516C               	movf	___ftmul@f2& (0+255),w,b
 16464  0024E6  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 16465  0024E8  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 16466  0024EA  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 16467  0024EC  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 16468  0024EE  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 16469  0024F0                     l1892:
 16470                           
 16471                           ; BSR set to: 0
 16472                           
 16473                           ; BSR set to: 0
 16474  0024F0  90D8               	bcf	status,0,c
 16475  0024F2  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 16476  0024F4  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 16477  0024F6  3369               	rrcf	___ftmul@f1& (0+255),f,b
 16478  0024F8  90D8               	bcf	status,0,c
 16479  0024FA  3375               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 16480  0024FC  3374               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 16481  0024FE  3373               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 16482                           
 16483                           ; BSR set to: 0
 16484  002500  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 16485  002502  D7EE               	goto	l1891
 16486                           
 16487                           ; BSR set to: 0
 16488                           
 16489                           ; BSR set to: 0
 16490  002504  C073  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
 16491  002508  C074  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 16492  00250C  C075  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 16493  002510  C072  F01B         	movff	___ftmul@exp,___ftpack@exp
 16494  002514  C077  F01C         	movff	___ftmul@sign,___ftpack@sign
 16495  002518  ECBA  F016         	call	___ftpack	;wreg free
 16496  00251C  C018  F069         	movff	?___ftpack,?___ftmul
 16497  002520  C019  F06A         	movff	?___ftpack+1,?___ftmul+1
 16498  002524  C01A  F06B         	movff	?___ftpack+2,?___ftmul+2
 16499  002528  0012               	return	
 16500  00252A                     __end_of___ftmul:
 16501                           	opt stack 0
 16502                           tosu	equ	0xFFF
 16503                           tosh	equ	0xFFE
 16504                           tosl	equ	0xFFD
 16505                           pclath	equ	0xFFA
 16506                           tblptru	equ	0xFF8
 16507                           tblptrh	equ	0xFF7
 16508                           tblptrl	equ	0xFF6
 16509                           tablat	equ	0xFF5
 16510                           prodh	equ	0xFF4
 16511                           prodl	equ	0xFF3
 16512                           intcon	equ	0xFF2
 16513                           intcon2	equ	0xFF1
 16514                           postinc0	equ	0xFEE
 16515                           plusw0	equ	0xFEB
 16516                           wreg	equ	0xFE8
 16517                           indf1	equ	0xFE7
 16518                           postdec1	equ	0xFE5
 16519                           fsr1h	equ	0xFE2
 16520                           fsr1l	equ	0xFE1
 16521                           indf2	equ	0xFDF
 16522                           postinc2	equ	0xFDE
 16523                           postdec2	equ	0xFDD
 16524                           plusw2	equ	0xFDB
 16525                           fsr2h	equ	0xFDA
 16526                           fsr2l	equ	0xFD9
 16527                           status	equ	0xFD8
 16528                           
 16529 ;; *************** function ___ftsub *****************
 16530 ;; Defined at:
 16531 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
 16532 ;; Parameters:    Size  Location     Type
 16533 ;;  f1              3   36[BANK0 ] float 
 16534 ;;  f2              3   39[BANK0 ] float 
 16535 ;; Auto vars:     Size  Location     Type
 16536 ;;		None
 16537 ;; Return value:  Size  Location     Type
 16538 ;;                  3   36[BANK0 ] float 
 16539 ;; Registers used:
 16540 ;;		wreg, status,2, status,0, cstack
 16541 ;; Tracked objects:
 16542 ;;		On entry : 0/0
 16543 ;;		On exit  : 0/0
 16544 ;;		Unchanged: 0/0
 16545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16546 ;;      Params:         0       6       0       0       0       0       0
 16547 ;;      Locals:         0       0       0       0       0       0       0
 16548 ;;      Temps:          0       0       0       0       0       0       0
 16549 ;;      Totals:         0       6       0       0       0       0       0
 16550 ;;Total ram usage:        6 bytes
 16551 ;; Hardware stack levels used:    1
 16552 ;; Hardware stack levels required when called:    6
 16553 ;; This function calls:
 16554 ;;		___ftadd
 16555 ;; This function is called by:
 16556 ;;		_exp
 16557 ;; This function uses a non-reentrant model
 16558 ;;
 16559                           
 16560                           	psect	text94
 16561  003A74                     __ptext94:
 16562                           	opt stack 0
 16563  003A74                     ___ftsub:
 16564                           	opt stack 18
 16565                           
 16566                           ;incstack = 0
 16567  003A74  0100               	movlb	0	; () banked
 16568  003A76  5187               	movf	___ftsub@f2& (0+255),w,b
 16569  003A78  1188               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 16570  003A7A  1189               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 16571  003A7C  B4D8               	btfsc	status,2,c
 16572  003A7E  D006               	goto	l1902
 16573                           
 16574                           ; BSR set to: 0
 16575  003A80  0E00               	movlw	0
 16576  003A82  1B87               	xorwf	___ftsub@f2& (0+255),f,b
 16577  003A84  0E00               	movlw	0
 16578  003A86  1B88               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 16579  003A88  0E80               	movlw	128
 16580  003A8A  1B89               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 16581  003A8C                     l1902:
 16582                           
 16583                           ; BSR set to: 0
 16584                           
 16585                           ; BSR set to: 0
 16586  003A8C  C084  F078         	movff	___ftsub@f1,___ftadd@f1
 16587  003A90  C085  F079         	movff	___ftsub@f1+1,___ftadd@f1+1
 16588  003A94  C086  F07A         	movff	___ftsub@f1+2,___ftadd@f1+2
 16589  003A98  C087  F07B         	movff	___ftsub@f2,___ftadd@f2
 16590  003A9C  C088  F07C         	movff	___ftsub@f2+1,___ftadd@f2+1
 16591  003AA0  C089  F07D         	movff	___ftsub@f2+2,___ftadd@f2+2
 16592  003AA4  ECA0  F00C         	call	___ftadd	;wreg free
 16593  003AA8  C078  F084         	movff	?___ftadd,?___ftsub
 16594  003AAC  C079  F085         	movff	?___ftadd+1,?___ftsub+1
 16595  003AB0  C07A  F086         	movff	?___ftadd+2,?___ftsub+2
 16596  003AB4  0012               	return	
 16597  003AB6                     __end_of___ftsub:
 16598                           	opt stack 0
 16599                           tosu	equ	0xFFF
 16600                           tosh	equ	0xFFE
 16601                           tosl	equ	0xFFD
 16602                           pclath	equ	0xFFA
 16603                           tblptru	equ	0xFF8
 16604                           tblptrh	equ	0xFF7
 16605                           tblptrl	equ	0xFF6
 16606                           tablat	equ	0xFF5
 16607                           prodh	equ	0xFF4
 16608                           prodl	equ	0xFF3
 16609                           intcon	equ	0xFF2
 16610                           intcon2	equ	0xFF1
 16611                           postinc0	equ	0xFEE
 16612                           plusw0	equ	0xFEB
 16613                           wreg	equ	0xFE8
 16614                           indf1	equ	0xFE7
 16615                           postdec1	equ	0xFE5
 16616                           fsr1h	equ	0xFE2
 16617                           fsr1l	equ	0xFE1
 16618                           indf2	equ	0xFDF
 16619                           postinc2	equ	0xFDE
 16620                           postdec2	equ	0xFDD
 16621                           plusw2	equ	0xFDB
 16622                           fsr2h	equ	0xFDA
 16623                           fsr2l	equ	0xFD9
 16624                           status	equ	0xFD8
 16625                           
 16626 ;; *************** function ___ftadd *****************
 16627 ;; Defined at:
 16628 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 16629 ;; Parameters:    Size  Location     Type
 16630 ;;  f1              3   24[BANK0 ] float 
 16631 ;;  f2              3   27[BANK0 ] float 
 16632 ;; Auto vars:     Size  Location     Type
 16633 ;;  exp1            1   35[BANK0 ] unsigned char 
 16634 ;;  exp2            1   34[BANK0 ] unsigned char 
 16635 ;;  sign            1   33[BANK0 ] unsigned char 
 16636 ;; Return value:  Size  Location     Type
 16637 ;;                  3   24[BANK0 ] float 
 16638 ;; Registers used:
 16639 ;;		wreg, status,2, status,0, cstack
 16640 ;; Tracked objects:
 16641 ;;		On entry : 0/0
 16642 ;;		On exit  : 0/0
 16643 ;;		Unchanged: 0/0
 16644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16645 ;;      Params:         0       6       0       0       0       0       0
 16646 ;;      Locals:         0       3       0       0       0       0       0
 16647 ;;      Temps:          0       3       0       0       0       0       0
 16648 ;;      Totals:         0      12       0       0       0       0       0
 16649 ;;Total ram usage:       12 bytes
 16650 ;; Hardware stack levels used:    1
 16651 ;; Hardware stack levels required when called:    5
 16652 ;; This function calls:
 16653 ;;		___ftpack
 16654 ;; This function is called by:
 16655 ;;		___ftsub
 16656 ;;		_floor
 16657 ;;		_log
 16658 ;;		_eval_poly
 16659 ;; This function uses a non-reentrant model
 16660 ;;
 16661                           
 16662                           	psect	text95
 16663  001940                     __ptext95:
 16664                           	opt stack 0
 16665  001940                     ___ftadd:
 16666                           	opt stack 18
 16667                           
 16668                           ;incstack = 0
 16669  001940  C07A  F07E         	movff	___ftadd@f1+2,??___ftadd
 16670  001944  0100               	movlb	0	; () banked
 16671  001946  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 16672  001948  6B80               	clrf	(??___ftadd+2)& (0+255),b
 16673  00194A  3579               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 16674  00194C  377E               	rlcf	??___ftadd& (0+255),f,b
 16675  00194E  E301               	bnc	u6431
 16676  001950  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 16677  001952                     u6431:
 16678  001952  517E               	movf	??___ftadd& (0+255),w,b
 16679  001954  6F83               	movwf	___ftadd@exp1& (0+255),b
 16680  001956  C07D  F07E         	movff	___ftadd@f2+2,??___ftadd
 16681  00195A  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 16682  00195C  6B80               	clrf	(??___ftadd+2)& (0+255),b
 16683  00195E  357C               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 16684  001960  377E               	rlcf	??___ftadd& (0+255),f,b
 16685  001962  E301               	bnc	u6441
 16686  001964  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 16687  001966                     u6441:
 16688  001966  517E               	movf	??___ftadd& (0+255),w,b
 16689  001968  6F82               	movwf	___ftadd@exp2& (0+255),b
 16690                           
 16691                           ; BSR set to: 0
 16692  00196A  5183               	movf	___ftadd@exp1& (0+255),w,b
 16693  00196C  B4D8               	btfsc	status,2,c
 16694  00196E  D00B               	goto	u6470
 16695                           
 16696                           ; BSR set to: 0
 16697  001970  5182               	movf	___ftadd@exp2& (0+255),w,b
 16698  001972  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 16699  001974  B0D8               	btfsc	status,0,c
 16700  001976  D00E               	goto	l1837
 16701                           
 16702                           ; BSR set to: 0
 16703  001978  5183               	movf	___ftadd@exp1& (0+255),w,b
 16704  00197A  0800               	sublw	0
 16705  00197C  2582               	addwf	___ftadd@exp2& (0+255),w,b
 16706  00197E  6F7E               	movwf	??___ftadd& (0+255),b
 16707  001980  0E18               	movlw	24
 16708  001982  657E               	cpfsgt	??___ftadd& (0+255),b
 16709  001984  D007               	goto	l1837
 16710  001986                     u6470:
 16711                           
 16712                           ; BSR set to: 0
 16713  001986  C07B  F078         	movff	___ftadd@f2,?___ftadd
 16714  00198A  C07C  F079         	movff	___ftadd@f2+1,?___ftadd+1
 16715  00198E  C07D  F07A         	movff	___ftadd@f2+2,?___ftadd+2
 16716  001992  0012               	return	
 16717  001994                     l1837:
 16718                           
 16719                           ; BSR set to: 0
 16720                           
 16721                           ; BSR set to: 0
 16722  001994  5182               	movf	___ftadd@exp2& (0+255),w,b
 16723  001996  B4D8               	btfsc	status,2,c
 16724  001998  D00B               	goto	u6500
 16725                           
 16726                           ; BSR set to: 0
 16727  00199A  5183               	movf	___ftadd@exp1& (0+255),w,b
 16728  00199C  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 16729  00199E  B0D8               	btfsc	status,0,c
 16730  0019A0  D00E               	goto	l1841
 16731                           
 16732                           ; BSR set to: 0
 16733  0019A2  5182               	movf	___ftadd@exp2& (0+255),w,b
 16734  0019A4  0800               	sublw	0
 16735  0019A6  2583               	addwf	___ftadd@exp1& (0+255),w,b
 16736  0019A8  6F7E               	movwf	??___ftadd& (0+255),b
 16737  0019AA  0E18               	movlw	24
 16738  0019AC  657E               	cpfsgt	??___ftadd& (0+255),b
 16739  0019AE  D007               	goto	l1841
 16740  0019B0                     u6500:
 16741                           
 16742                           ; BSR set to: 0
 16743  0019B0  C078  F078         	movff	___ftadd@f1,?___ftadd
 16744  0019B4  C079  F079         	movff	___ftadd@f1+1,?___ftadd+1
 16745  0019B8  C07A  F07A         	movff	___ftadd@f1+2,?___ftadd+2
 16746  0019BC  0012               	return	
 16747  0019BE                     l1841:
 16748                           
 16749                           ; BSR set to: 0
 16750                           
 16751                           ; BSR set to: 0
 16752  0019BE  0E06               	movlw	6
 16753  0019C0  6F81               	movwf	___ftadd@sign& (0+255),b
 16754                           
 16755                           ; BSR set to: 0
 16756  0019C2  BF7A               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 16757                           
 16758                           ; BSR set to: 0
 16759  0019C4  8F81               	bsf	___ftadd@sign& (0+255),7,b
 16760                           
 16761                           ; BSR set to: 0
 16762                           
 16763                           ; BSR set to: 0
 16764  0019C6  BF7D               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 16765                           
 16766                           ; BSR set to: 0
 16767  0019C8  8D81               	bsf	___ftadd@sign& (0+255),6,b
 16768                           
 16769                           ; BSR set to: 0
 16770  0019CA  8F79               	bsf	(___ftadd@f1+1)& (0+255),7,b
 16771                           
 16772                           ; BSR set to: 0
 16773  0019CC  0EFF               	movlw	255
 16774  0019CE  1778               	andwf	___ftadd@f1& (0+255),f,b
 16775  0019D0  0EFF               	movlw	255
 16776  0019D2  1779               	andwf	(___ftadd@f1+1)& (0+255),f,b
 16777  0019D4  0E00               	movlw	0
 16778  0019D6  177A               	andwf	(___ftadd@f1+2)& (0+255),f,b
 16779  0019D8  8F7C               	bsf	(___ftadd@f2+1)& (0+255),7,b
 16780                           
 16781                           ; BSR set to: 0
 16782  0019DA  0EFF               	movlw	255
 16783  0019DC  177B               	andwf	___ftadd@f2& (0+255),f,b
 16784  0019DE  0EFF               	movlw	255
 16785  0019E0  177C               	andwf	(___ftadd@f2+1)& (0+255),f,b
 16786  0019E2  0E00               	movlw	0
 16787  0019E4  177D               	andwf	(___ftadd@f2+2)& (0+255),f,b
 16788                           
 16789                           ; BSR set to: 0
 16790  0019E6  5182               	movf	___ftadd@exp2& (0+255),w,b
 16791  0019E8  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 16792  0019EA  B0D8               	btfsc	status,0,c
 16793  0019EC  D01B               	goto	l1846
 16794  0019EE                     u6530:
 16795                           
 16796                           ; BSR set to: 0
 16797                           
 16798                           ; BSR set to: 0
 16799  0019EE  90D8               	bcf	status,0,c
 16800  0019F0  377B               	rlcf	___ftadd@f2& (0+255),f,b
 16801  0019F2  377C               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 16802  0019F4  377D               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 16803  0019F6  0782               	decf	___ftadd@exp2& (0+255),f,b
 16804                           
 16805                           ; BSR set to: 0
 16806  0019F8  5183               	movf	___ftadd@exp1& (0+255),w,b
 16807  0019FA  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 16808  0019FC  B4D8               	btfsc	status,2,c
 16809  0019FE  D00D               	goto	l1851
 16810                           
 16811                           ; BSR set to: 0
 16812  001A00  0781               	decf	___ftadd@sign& (0+255),f,b
 16813  001A02  C081  F07E         	movff	___ftadd@sign,??___ftadd
 16814  001A06  0E07               	movlw	7
 16815  001A08  177E               	andwf	??___ftadd& (0+255),f,b
 16816  001A0A  B4D8               	btfsc	status,2,c
 16817  001A0C  D006               	goto	l1851
 16818  001A0E  D7EF               	goto	u6530
 16819  001A10                     
 16820                           ; BSR set to: 0
 16821                           
 16822                           ; BSR set to: 0
 16823  001A10  90D8               	bcf	status,0,c
 16824  001A12  337A               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 16825  001A14  3379               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 16826  001A16  3378               	rrcf	___ftadd@f1& (0+255),f,b
 16827  001A18  2B83               	incf	___ftadd@exp1& (0+255),f,b
 16828  001A1A                     l1851:
 16829                           
 16830                           ; BSR set to: 0
 16831                           
 16832                           ; BSR set to: 0
 16833  001A1A  5182               	movf	___ftadd@exp2& (0+255),w,b
 16834  001A1C  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 16835  001A1E  B4D8               	btfsc	status,2,c
 16836  001A20  D01F               	goto	u6600
 16837  001A22  D7F6               	goto	l1852
 16838  001A24                     l1846:
 16839                           
 16840                           ; BSR set to: 0
 16841                           
 16842                           ; BSR set to: 0
 16843  001A24  5183               	movf	___ftadd@exp1& (0+255),w,b
 16844  001A26  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 16845  001A28  B0D8               	btfsc	status,0,c
 16846  001A2A  D01A               	goto	u6600
 16847  001A2C                     u6570:
 16848                           
 16849                           ; BSR set to: 0
 16850                           
 16851                           ; BSR set to: 0
 16852  001A2C  90D8               	bcf	status,0,c
 16853  001A2E  3778               	rlcf	___ftadd@f1& (0+255),f,b
 16854  001A30  3779               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 16855  001A32  377A               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 16856  001A34  0783               	decf	___ftadd@exp1& (0+255),f,b
 16857                           
 16858                           ; BSR set to: 0
 16859  001A36  5183               	movf	___ftadd@exp1& (0+255),w,b
 16860  001A38  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 16861  001A3A  B4D8               	btfsc	status,2,c
 16862  001A3C  D00D               	goto	l1860
 16863                           
 16864                           ; BSR set to: 0
 16865  001A3E  0781               	decf	___ftadd@sign& (0+255),f,b
 16866  001A40  C081  F07E         	movff	___ftadd@sign,??___ftadd
 16867  001A44  0E07               	movlw	7
 16868  001A46  177E               	andwf	??___ftadd& (0+255),f,b
 16869  001A48  B4D8               	btfsc	status,2,c
 16870  001A4A  D006               	goto	l1860
 16871  001A4C  D7EF               	goto	u6570
 16872  001A4E                     
 16873                           ; BSR set to: 0
 16874                           
 16875                           ; BSR set to: 0
 16876  001A4E  90D8               	bcf	status,0,c
 16877  001A50  337D               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 16878  001A52  337C               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 16879  001A54  337B               	rrcf	___ftadd@f2& (0+255),f,b
 16880  001A56  2B82               	incf	___ftadd@exp2& (0+255),f,b
 16881  001A58                     l1860:
 16882                           
 16883                           ; BSR set to: 0
 16884                           
 16885                           ; BSR set to: 0
 16886  001A58  5182               	movf	___ftadd@exp2& (0+255),w,b
 16887  001A5A  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 16888  001A5C  A4D8               	btfss	status,2,c
 16889  001A5E  D7F7               	goto	l1861
 16890  001A60                     u6600:
 16891                           
 16892                           ; BSR set to: 0
 16893                           
 16894                           ; BSR set to: 0
 16895                           
 16896                           ; BSR set to: 0
 16897  001A60  AF81               	btfss	___ftadd@sign& (0+255),7,b
 16898  001A62  D00C               	goto	l1863
 16899                           
 16900                           ; BSR set to: 0
 16901  001A64  0EFF               	movlw	255
 16902  001A66  1B78               	xorwf	___ftadd@f1& (0+255),f,b
 16903  001A68  0EFF               	movlw	255
 16904  001A6A  1B79               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 16905  001A6C  0EFF               	movlw	255
 16906  001A6E  1B7A               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 16907  001A70  0E01               	movlw	1
 16908  001A72  2778               	addwf	___ftadd@f1& (0+255),f,b
 16909  001A74  0E00               	movlw	0
 16910  001A76  2379               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 16911  001A78  0E00               	movlw	0
 16912  001A7A  237A               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 16913  001A7C                     l1863:
 16914                           
 16915                           ; BSR set to: 0
 16916  001A7C  AD81               	btfss	___ftadd@sign& (0+255),6,b
 16917  001A7E  D00C               	goto	l1864
 16918                           
 16919                           ; BSR set to: 0
 16920  001A80  0EFF               	movlw	255
 16921  001A82  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 16922  001A84  0EFF               	movlw	255
 16923  001A86  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 16924  001A88  0EFF               	movlw	255
 16925  001A8A  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 16926  001A8C  0E01               	movlw	1
 16927  001A8E  277B               	addwf	___ftadd@f2& (0+255),f,b
 16928  001A90  0E00               	movlw	0
 16929  001A92  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 16930  001A94  0E00               	movlw	0
 16931  001A96  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 16932  001A98                     l1864:
 16933                           
 16934                           ; BSR set to: 0
 16935                           
 16936                           ; BSR set to: 0
 16937  001A98  0E00               	movlw	0
 16938  001A9A  6F81               	movwf	___ftadd@sign& (0+255),b
 16939                           
 16940                           ; BSR set to: 0
 16941  001A9C  5178               	movf	___ftadd@f1& (0+255),w,b
 16942  001A9E  277B               	addwf	___ftadd@f2& (0+255),f,b
 16943  001AA0  5179               	movf	(___ftadd@f1+1)& (0+255),w,b
 16944  001AA2  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 16945  001AA4  517A               	movf	(___ftadd@f1+2)& (0+255),w,b
 16946  001AA6  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 16947                           
 16948                           ; BSR set to: 0
 16949  001AA8  AF7D               	btfss	(___ftadd@f2+2)& (0+255),7,b
 16950  001AAA  D00E               	goto	l1865
 16951                           
 16952                           ; BSR set to: 0
 16953  001AAC  0EFF               	movlw	255
 16954  001AAE  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 16955  001AB0  0EFF               	movlw	255
 16956  001AB2  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 16957  001AB4  0EFF               	movlw	255
 16958  001AB6  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 16959  001AB8  0E01               	movlw	1
 16960  001ABA  277B               	addwf	___ftadd@f2& (0+255),f,b
 16961  001ABC  0E00               	movlw	0
 16962  001ABE  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 16963  001AC0  0E00               	movlw	0
 16964  001AC2  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 16965                           
 16966                           ; BSR set to: 0
 16967  001AC4  0E01               	movlw	1
 16968  001AC6  6F81               	movwf	___ftadd@sign& (0+255),b
 16969  001AC8                     l1865:
 16970                           
 16971                           ; BSR set to: 0
 16972                           
 16973                           ; BSR set to: 0
 16974  001AC8  C07B  F018         	movff	___ftadd@f2,___ftpack@arg
 16975  001ACC  C07C  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
 16976  001AD0  C07D  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
 16977  001AD4  C083  F01B         	movff	___ftadd@exp1,___ftpack@exp
 16978  001AD8  C081  F01C         	movff	___ftadd@sign,___ftpack@sign
 16979  001ADC  ECBA  F016         	call	___ftpack	;wreg free
 16980  001AE0  C018  F078         	movff	?___ftpack,?___ftadd
 16981  001AE4  C019  F079         	movff	?___ftpack+1,?___ftadd+1
 16982  001AE8  C01A  F07A         	movff	?___ftpack+2,?___ftadd+2
 16983  001AEC  0012               	return	
 16984  001AEE                     __end_of___ftadd:
 16985                           	opt stack 0
 16986                           tosu	equ	0xFFF
 16987                           tosh	equ	0xFFE
 16988                           tosl	equ	0xFFD
 16989                           pclath	equ	0xFFA
 16990                           tblptru	equ	0xFF8
 16991                           tblptrh	equ	0xFF7
 16992                           tblptrl	equ	0xFF6
 16993                           tablat	equ	0xFF5
 16994                           prodh	equ	0xFF4
 16995                           prodl	equ	0xFF3
 16996                           intcon	equ	0xFF2
 16997                           intcon2	equ	0xFF1
 16998                           postinc0	equ	0xFEE
 16999                           plusw0	equ	0xFEB
 17000                           wreg	equ	0xFE8
 17001                           indf1	equ	0xFE7
 17002                           postdec1	equ	0xFE5
 17003                           fsr1h	equ	0xFE2
 17004                           fsr1l	equ	0xFE1
 17005                           indf2	equ	0xFDF
 17006                           postinc2	equ	0xFDE
 17007                           postdec2	equ	0xFDD
 17008                           plusw2	equ	0xFDB
 17009                           fsr2h	equ	0xFDA
 17010                           fsr2l	equ	0xFD9
 17011                           status	equ	0xFD8
 17012                           
 17013 ;; *************** function ___ftneg *****************
 17014 ;; Defined at:
 17015 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 17016 ;; Parameters:    Size  Location     Type
 17017 ;;  f1              3   23[COMRAM] float 
 17018 ;; Auto vars:     Size  Location     Type
 17019 ;;		None
 17020 ;; Return value:  Size  Location     Type
 17021 ;;                  3   23[COMRAM] float 
 17022 ;; Registers used:
 17023 ;;		wreg, status,2, status,0
 17024 ;; Tracked objects:
 17025 ;;		On entry : 0/0
 17026 ;;		On exit  : 0/0
 17027 ;;		Unchanged: 0/0
 17028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17029 ;;      Params:         3       0       0       0       0       0       0
 17030 ;;      Locals:         0       0       0       0       0       0       0
 17031 ;;      Temps:          0       0       0       0       0       0       0
 17032 ;;      Totals:         3       0       0       0       0       0       0
 17033 ;;Total ram usage:        3 bytes
 17034 ;; Hardware stack levels used:    1
 17035 ;; Hardware stack levels required when called:    4
 17036 ;; This function calls:
 17037 ;;		Nothing
 17038 ;; This function is called by:
 17039 ;;		_pow
 17040 ;;		_exp
 17041 ;; This function uses a non-reentrant model
 17042 ;;
 17043                           
 17044                           	psect	text96
 17045  003FAE                     __ptext96:
 17046                           	opt stack 0
 17047  003FAE                     ___ftneg:
 17048                           	opt stack 20
 17049                           
 17050                           ;incstack = 0
 17051  003FAE  5018               	movf	___ftneg@f1,w,c
 17052  003FB0  1019               	iorwf	___ftneg@f1+1,w,c
 17053  003FB2  101A               	iorwf	___ftneg@f1+2,w,c
 17054  003FB4  B4D8               	btfsc	status,2,c
 17055  003FB6  D006               	goto	l1896
 17056  003FB8  0E00               	movlw	0
 17057  003FBA  1A18               	xorwf	___ftneg@f1,f,c
 17058  003FBC  0E00               	movlw	0
 17059  003FBE  1A19               	xorwf	___ftneg@f1+1,f,c
 17060  003FC0  0E80               	movlw	128
 17061  003FC2  1A1A               	xorwf	___ftneg@f1+2,f,c
 17062  003FC4                     l1896:
 17063  003FC4  C018  F018         	movff	___ftneg@f1,?___ftneg
 17064  003FC8  C019  F019         	movff	___ftneg@f1+1,?___ftneg+1
 17065  003FCC  C01A  F01A         	movff	___ftneg@f1+2,?___ftneg+2
 17066  003FD0  0012               	return		;funcret
 17067  003FD2                     __end_of___ftneg:
 17068                           	opt stack 0
 17069                           tosu	equ	0xFFF
 17070                           tosh	equ	0xFFE
 17071                           tosl	equ	0xFFD
 17072                           pclath	equ	0xFFA
 17073                           tblptru	equ	0xFF8
 17074                           tblptrh	equ	0xFF7
 17075                           tblptrl	equ	0xFF6
 17076                           tablat	equ	0xFF5
 17077                           prodh	equ	0xFF4
 17078                           prodl	equ	0xFF3
 17079                           intcon	equ	0xFF2
 17080                           intcon2	equ	0xFF1
 17081                           postinc0	equ	0xFEE
 17082                           plusw0	equ	0xFEB
 17083                           wreg	equ	0xFE8
 17084                           indf1	equ	0xFE7
 17085                           postdec1	equ	0xFE5
 17086                           fsr1h	equ	0xFE2
 17087                           fsr1l	equ	0xFE1
 17088                           indf2	equ	0xFDF
 17089                           postinc2	equ	0xFDE
 17090                           postdec2	equ	0xFDD
 17091                           plusw2	equ	0xFDB
 17092                           fsr2h	equ	0xFDA
 17093                           fsr2l	equ	0xFD9
 17094                           status	equ	0xFD8
 17095                           
 17096 ;; *************** function ___ftdiv *****************
 17097 ;; Defined at:
 17098 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 17099 ;; Parameters:    Size  Location     Type
 17100 ;;  f1              3   40[COMRAM] float 
 17101 ;;  f2              3   43[COMRAM] float 
 17102 ;; Auto vars:     Size  Location     Type
 17103 ;;  f3              3    4[BANK0 ] float 
 17104 ;;  sign            1    8[BANK0 ] unsigned char 
 17105 ;;  exp             1    7[BANK0 ] unsigned char 
 17106 ;;  cntr            1    3[BANK0 ] unsigned char 
 17107 ;; Return value:  Size  Location     Type
 17108 ;;                  3   40[COMRAM] float 
 17109 ;; Registers used:
 17110 ;;		wreg, status,2, status,0, cstack
 17111 ;; Tracked objects:
 17112 ;;		On entry : 0/0
 17113 ;;		On exit  : 0/0
 17114 ;;		Unchanged: 0/0
 17115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17116 ;;      Params:         6       0       0       0       0       0       0
 17117 ;;      Locals:         0       6       0       0       0       0       0
 17118 ;;      Temps:          0       3       0       0       0       0       0
 17119 ;;      Totals:         6       9       0       0       0       0       0
 17120 ;;Total ram usage:       15 bytes
 17121 ;; Hardware stack levels used:    1
 17122 ;; Hardware stack levels required when called:    5
 17123 ;; This function calls:
 17124 ;;		___ftpack
 17125 ;; This function is called by:
 17126 ;;		_AdcConvert
 17127 ;;		_CheckFlashPrecentage
 17128 ;;		_exp
 17129 ;; This function uses a non-reentrant model
 17130 ;;
 17131                           
 17132                           	psect	text97
 17133  00252A                     __ptext97:
 17134                           	opt stack 0
 17135  00252A                     ___ftdiv:
 17136                           	opt stack 19
 17137                           
 17138                           ;incstack = 0
 17139  00252A  C02B  F060         	movff	___ftdiv@f1+2,??___ftdiv
 17140  00252E  0100               	movlb	0	; () banked
 17141  002530  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 17142  002532  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 17143  002534  342A               	rlcf	___ftdiv@f1+1,w,c
 17144  002536  3760               	rlcf	??___ftdiv& (0+255),f,b
 17145  002538  E301               	bnc	u6841
 17146  00253A  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 17147  00253C                     u6841:
 17148  00253C  5160               	movf	??___ftdiv& (0+255),w,b
 17149  00253E  6F67               	movwf	___ftdiv@exp& (0+255),b
 17150  002540  5167               	movf	___ftdiv@exp& (0+255),w,b
 17151  002542  A4D8               	btfss	status,2,c
 17152  002544  D007               	goto	l1870
 17153                           
 17154                           ; BSR set to: 0
 17155  002546  0E00               	movlw	0
 17156  002548  6E29               	movwf	?___ftdiv,c
 17157  00254A  0E00               	movlw	0
 17158  00254C  6E2A               	movwf	?___ftdiv+1,c
 17159  00254E  0E00               	movlw	0
 17160  002550  6E2B               	movwf	?___ftdiv+2,c
 17161                           
 17162                           ; BSR set to: 0
 17163  002552  0012               	return	
 17164  002554                     l1870:
 17165                           
 17166                           ; BSR set to: 0
 17167                           
 17168                           ; BSR set to: 0
 17169  002554  C02E  F060         	movff	___ftdiv@f2+2,??___ftdiv
 17170  002558  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 17171  00255A  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 17172  00255C  342D               	rlcf	___ftdiv@f2+1,w,c
 17173  00255E  3760               	rlcf	??___ftdiv& (0+255),f,b
 17174  002560  E301               	bnc	u6861
 17175  002562  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 17176  002564                     u6861:
 17177  002564  5160               	movf	??___ftdiv& (0+255),w,b
 17178  002566  6F68               	movwf	___ftdiv@sign& (0+255),b
 17179  002568  5168               	movf	___ftdiv@sign& (0+255),w,b
 17180  00256A  A4D8               	btfss	status,2,c
 17181  00256C  D007               	goto	l1872
 17182                           
 17183                           ; BSR set to: 0
 17184  00256E  0E00               	movlw	0
 17185  002570  6E29               	movwf	?___ftdiv,c
 17186  002572  0E00               	movlw	0
 17187  002574  6E2A               	movwf	?___ftdiv+1,c
 17188  002576  0E00               	movlw	0
 17189  002578  6E2B               	movwf	?___ftdiv+2,c
 17190                           
 17191                           ; BSR set to: 0
 17192  00257A  0012               	return	
 17193  00257C                     l1872:
 17194                           
 17195                           ; BSR set to: 0
 17196                           
 17197                           ; BSR set to: 0
 17198  00257C  0E00               	movlw	0
 17199  00257E  6F64               	movwf	___ftdiv@f3& (0+255),b
 17200  002580  0E00               	movlw	0
 17201  002582  6F65               	movwf	(___ftdiv@f3+1)& (0+255),b
 17202  002584  0E00               	movlw	0
 17203  002586  6F66               	movwf	(___ftdiv@f3+2)& (0+255),b
 17204                           
 17205                           ; BSR set to: 0
 17206  002588  5168               	movf	___ftdiv@sign& (0+255),w,b
 17207  00258A  0F89               	addlw	137
 17208  00258C  5F67               	subwf	___ftdiv@exp& (0+255),f,b
 17209                           
 17210                           ; BSR set to: 0
 17211  00258E  C02B  F068         	movff	___ftdiv@f1+2,___ftdiv@sign
 17212                           
 17213                           ; BSR set to: 0
 17214  002592  502E               	movf	___ftdiv@f2+2,w,c
 17215  002594  1B68               	xorwf	___ftdiv@sign& (0+255),f,b
 17216                           
 17217                           ; BSR set to: 0
 17218  002596  0E80               	movlw	128
 17219  002598  1768               	andwf	___ftdiv@sign& (0+255),f,b
 17220                           
 17221                           ; BSR set to: 0
 17222  00259A  8E2A               	bsf	___ftdiv@f1+1,7,c
 17223                           
 17224                           ; BSR set to: 0
 17225  00259C  0EFF               	movlw	255
 17226  00259E  1629               	andwf	___ftdiv@f1,f,c
 17227  0025A0  0EFF               	movlw	255
 17228  0025A2  162A               	andwf	___ftdiv@f1+1,f,c
 17229  0025A4  0E00               	movlw	0
 17230  0025A6  162B               	andwf	___ftdiv@f1+2,f,c
 17231                           
 17232                           ; BSR set to: 0
 17233  0025A8  8E2D               	bsf	___ftdiv@f2+1,7,c
 17234                           
 17235                           ; BSR set to: 0
 17236  0025AA  0EFF               	movlw	255
 17237  0025AC  162C               	andwf	___ftdiv@f2,f,c
 17238  0025AE  0EFF               	movlw	255
 17239  0025B0  162D               	andwf	___ftdiv@f2+1,f,c
 17240  0025B2  0E00               	movlw	0
 17241  0025B4  162E               	andwf	___ftdiv@f2+2,f,c
 17242                           
 17243                           ; BSR set to: 0
 17244  0025B6  0E18               	movlw	24
 17245  0025B8  6F63               	movwf	___ftdiv@cntr& (0+255),b
 17246  0025BA                     
 17247                           ; BSR set to: 0
 17248                           
 17249                           ; BSR set to: 0
 17250  0025BA  90D8               	bcf	status,0,c
 17251  0025BC  3764               	rlcf	___ftdiv@f3& (0+255),f,b
 17252  0025BE  3765               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 17253  0025C0  3766               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 17254                           
 17255                           ; BSR set to: 0
 17256  0025C2  502C               	movf	___ftdiv@f2,w,c
 17257  0025C4  5C29               	subwf	___ftdiv@f1,w,c
 17258  0025C6  502D               	movf	___ftdiv@f2+1,w,c
 17259  0025C8  582A               	subwfb	___ftdiv@f1+1,w,c
 17260  0025CA  502E               	movf	___ftdiv@f2+2,w,c
 17261  0025CC  582B               	subwfb	___ftdiv@f1+2,w,c
 17262  0025CE  A0D8               	btfss	status,0,c
 17263  0025D0  D007               	goto	l1874
 17264                           
 17265                           ; BSR set to: 0
 17266  0025D2  502C               	movf	___ftdiv@f2,w,c
 17267  0025D4  5E29               	subwf	___ftdiv@f1,f,c
 17268  0025D6  502D               	movf	___ftdiv@f2+1,w,c
 17269  0025D8  5A2A               	subwfb	___ftdiv@f1+1,f,c
 17270  0025DA  502E               	movf	___ftdiv@f2+2,w,c
 17271  0025DC  5A2B               	subwfb	___ftdiv@f1+2,f,c
 17272                           
 17273                           ; BSR set to: 0
 17274  0025DE  8164               	bsf	___ftdiv@f3& (0+255),0,b
 17275  0025E0                     l1874:
 17276                           
 17277                           ; BSR set to: 0
 17278  0025E0  90D8               	bcf	status,0,c
 17279  0025E2  3629               	rlcf	___ftdiv@f1,f,c
 17280  0025E4  362A               	rlcf	___ftdiv@f1+1,f,c
 17281  0025E6  362B               	rlcf	___ftdiv@f1+2,f,c
 17282                           
 17283                           ; BSR set to: 0
 17284  0025E8  2F63               	decfsz	___ftdiv@cntr& (0+255),f,b
 17285  0025EA  D7E7               	goto	l1873
 17286                           
 17287                           ; BSR set to: 0
 17288                           
 17289                           ; BSR set to: 0
 17290  0025EC  C064  F018         	movff	___ftdiv@f3,___ftpack@arg
 17291  0025F0  C065  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
 17292  0025F4  C066  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
 17293  0025F8  C067  F01B         	movff	___ftdiv@exp,___ftpack@exp
 17294  0025FC  C068  F01C         	movff	___ftdiv@sign,___ftpack@sign
 17295  002600  ECBA  F016         	call	___ftpack	;wreg free
 17296  002604  C018  F029         	movff	?___ftpack,?___ftdiv
 17297  002608  C019  F02A         	movff	?___ftpack+1,?___ftdiv+1
 17298  00260C  C01A  F02B         	movff	?___ftpack+2,?___ftdiv+2
 17299  002610  0012               	return	
 17300  002612                     __end_of___ftdiv:
 17301                           	opt stack 0
 17302                           tosu	equ	0xFFF
 17303                           tosh	equ	0xFFE
 17304                           tosl	equ	0xFFD
 17305                           pclath	equ	0xFFA
 17306                           tblptru	equ	0xFF8
 17307                           tblptrh	equ	0xFF7
 17308                           tblptrl	equ	0xFF6
 17309                           tablat	equ	0xFF5
 17310                           prodh	equ	0xFF4
 17311                           prodl	equ	0xFF3
 17312                           intcon	equ	0xFF2
 17313                           intcon2	equ	0xFF1
 17314                           postinc0	equ	0xFEE
 17315                           plusw0	equ	0xFEB
 17316                           wreg	equ	0xFE8
 17317                           indf1	equ	0xFE7
 17318                           postdec1	equ	0xFE5
 17319                           fsr1h	equ	0xFE2
 17320                           fsr1l	equ	0xFE1
 17321                           indf2	equ	0xFDF
 17322                           postinc2	equ	0xFDE
 17323                           postdec2	equ	0xFDD
 17324                           plusw2	equ	0xFDB
 17325                           fsr2h	equ	0xFDA
 17326                           fsr2l	equ	0xFD9
 17327                           status	equ	0xFD8
 17328                           
 17329 ;; *************** function ___awtoft *****************
 17330 ;; Defined at:
 17331 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 17332 ;; Parameters:    Size  Location     Type
 17333 ;;  c               2   31[COMRAM] int 
 17334 ;; Auto vars:     Size  Location     Type
 17335 ;;  sign            1   34[COMRAM] unsigned char 
 17336 ;; Return value:  Size  Location     Type
 17337 ;;                  3   31[COMRAM] float 
 17338 ;; Registers used:
 17339 ;;		wreg, status,2, status,0, cstack
 17340 ;; Tracked objects:
 17341 ;;		On entry : 0/0
 17342 ;;		On exit  : 0/0
 17343 ;;		Unchanged: 0/0
 17344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17345 ;;      Params:         3       0       0       0       0       0       0
 17346 ;;      Locals:         1       0       0       0       0       0       0
 17347 ;;      Temps:          0       0       0       0       0       0       0
 17348 ;;      Totals:         4       0       0       0       0       0       0
 17349 ;;Total ram usage:        4 bytes
 17350 ;; Hardware stack levels used:    1
 17351 ;; Hardware stack levels required when called:    5
 17352 ;; This function calls:
 17353 ;;		___ftpack
 17354 ;; This function is called by:
 17355 ;;		_ReadIntFromEeprom
 17356 ;;		_exp
 17357 ;;		_log
 17358 ;; This function uses a non-reentrant model
 17359 ;;
 17360                           
 17361                           	psect	text98
 17362  003C58                     __ptext98:
 17363                           	opt stack 0
 17364  003C58                     ___awtoft:
 17365                           	opt stack 19
 17366                           
 17367                           ;incstack = 0
 17368  003C58  0E00               	movlw	0
 17369  003C5A  6E23               	movwf	___awtoft@sign,c
 17370  003C5C  AE21               	btfss	___awtoft@c+1,7,c
 17371  003C5E  D006               	goto	l1787
 17372  003C60  6C20               	negf	___awtoft@c,c
 17373  003C62  1E21               	comf	___awtoft@c+1,f,c
 17374  003C64  B0D8               	btfsc	status,0,c
 17375  003C66  2A21               	incf	___awtoft@c+1,f,c
 17376  003C68  0E01               	movlw	1
 17377  003C6A  6E23               	movwf	___awtoft@sign,c
 17378  003C6C                     l1787:
 17379  003C6C  C020  F018         	movff	___awtoft@c,___ftpack@arg
 17380  003C70  C021  F019         	movff	___awtoft@c+1,___ftpack@arg+1
 17381  003C74  6A1A               	clrf	___ftpack@arg+2,c
 17382  003C76  0E8E               	movlw	142
 17383  003C78  6E1B               	movwf	___ftpack@exp,c
 17384  003C7A  C023  F01C         	movff	___awtoft@sign,___ftpack@sign
 17385  003C7E  ECBA  F016         	call	___ftpack	;wreg free
 17386  003C82  C018  F020         	movff	?___ftpack,?___awtoft
 17387  003C86  C019  F021         	movff	?___ftpack+1,?___awtoft+1
 17388  003C8A  C01A  F022         	movff	?___ftpack+2,?___awtoft+2
 17389  003C8E  0012               	return	
 17390  003C90                     __end_of___awtoft:
 17391                           	opt stack 0
 17392                           tosu	equ	0xFFF
 17393                           tosh	equ	0xFFE
 17394                           tosl	equ	0xFFD
 17395                           pclath	equ	0xFFA
 17396                           tblptru	equ	0xFF8
 17397                           tblptrh	equ	0xFF7
 17398                           tblptrl	equ	0xFF6
 17399                           tablat	equ	0xFF5
 17400                           prodh	equ	0xFF4
 17401                           prodl	equ	0xFF3
 17402                           intcon	equ	0xFF2
 17403                           intcon2	equ	0xFF1
 17404                           postinc0	equ	0xFEE
 17405                           plusw0	equ	0xFEB
 17406                           wreg	equ	0xFE8
 17407                           indf1	equ	0xFE7
 17408                           postdec1	equ	0xFE5
 17409                           fsr1h	equ	0xFE2
 17410                           fsr1l	equ	0xFE1
 17411                           indf2	equ	0xFDF
 17412                           postinc2	equ	0xFDE
 17413                           postdec2	equ	0xFDD
 17414                           plusw2	equ	0xFDB
 17415                           fsr2h	equ	0xFDA
 17416                           fsr2l	equ	0xFD9
 17417                           status	equ	0xFD8
 17418                           
 17419 ;; *************** function ___lltoft *****************
 17420 ;; Defined at:
 17421 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
 17422 ;; Parameters:    Size  Location     Type
 17423 ;;  c               4   31[COMRAM] unsigned long 
 17424 ;; Auto vars:     Size  Location     Type
 17425 ;;  exp             1   39[COMRAM] unsigned char 
 17426 ;; Return value:  Size  Location     Type
 17427 ;;                  3   31[COMRAM] float 
 17428 ;; Registers used:
 17429 ;;		wreg, status,2, status,0, cstack
 17430 ;; Tracked objects:
 17431 ;;		On entry : 0/0
 17432 ;;		On exit  : 0/0
 17433 ;;		Unchanged: 0/0
 17434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17435 ;;      Params:         4       0       0       0       0       0       0
 17436 ;;      Locals:         1       0       0       0       0       0       0
 17437 ;;      Temps:          4       0       0       0       0       0       0
 17438 ;;      Totals:         9       0       0       0       0       0       0
 17439 ;;Total ram usage:        9 bytes
 17440 ;; Hardware stack levels used:    1
 17441 ;; Hardware stack levels required when called:    5
 17442 ;; This function calls:
 17443 ;;		___ftpack
 17444 ;; This function is called by:
 17445 ;;		_CheckFlashPrecentage
 17446 ;;		_pow
 17447 ;; This function uses a non-reentrant model
 17448 ;;
 17449                           
 17450                           	psect	text99
 17451  0036EC                     __ptext99:
 17452                           	opt stack 0
 17453  0036EC                     ___lltoft:
 17454                           	opt stack 20
 17455                           
 17456                           ;incstack = 0
 17457  0036EC  0E8E               	movlw	142
 17458  0036EE  6E28               	movwf	___lltoft@exp,c
 17459  0036F0  D006               	goto	l1963
 17460  0036F2  90D8               	bcf	status,0,c
 17461  0036F4  3223               	rrcf	___lltoft@c+3,f,c
 17462  0036F6  3222               	rrcf	___lltoft@c+2,f,c
 17463  0036F8  3221               	rrcf	___lltoft@c+1,f,c
 17464  0036FA  3220               	rrcf	___lltoft@c,f,c
 17465  0036FC  2A28               	incf	___lltoft@exp,f,c
 17466  0036FE                     l1963:
 17467  0036FE  0E00               	movlw	0
 17468  003700  1420               	andwf	___lltoft@c,w,c
 17469  003702  6E24               	movwf	??___lltoft& (0+255),c
 17470  003704  0E00               	movlw	0
 17471  003706  1421               	andwf	___lltoft@c+1,w,c
 17472  003708  6E25               	movwf	(??___lltoft+1)& (0+255),c
 17473  00370A  0E00               	movlw	0
 17474  00370C  1422               	andwf	___lltoft@c+2,w,c
 17475  00370E  6E26               	movwf	(??___lltoft+2)& (0+255),c
 17476  003710  0EFF               	movlw	255
 17477  003712  1423               	andwf	___lltoft@c+3,w,c
 17478  003714  6E27               	movwf	(??___lltoft+3)& (0+255),c
 17479  003716  5024               	movf	??___lltoft,w,c
 17480  003718  1025               	iorwf	??___lltoft+1,w,c
 17481  00371A  1026               	iorwf	??___lltoft+2,w,c
 17482  00371C  1027               	iorwf	??___lltoft+3,w,c
 17483  00371E  A4D8               	btfss	status,2,c
 17484  003720  D7E8               	goto	l1964
 17485  003722  C020  F018         	movff	___lltoft@c,___ftpack@arg
 17486  003726  C021  F019         	movff	___lltoft@c+1,___ftpack@arg+1
 17487  00372A  C022  F01A         	movff	___lltoft@c+2,___ftpack@arg+2
 17488  00372E  C028  F01B         	movff	___lltoft@exp,___ftpack@exp
 17489  003732  0E00               	movlw	0
 17490  003734  6E1C               	movwf	___ftpack@sign,c
 17491  003736  ECBA  F016         	call	___ftpack	;wreg free
 17492  00373A  C018  F020         	movff	?___ftpack,?___lltoft
 17493  00373E  C019  F021         	movff	?___ftpack+1,?___lltoft+1
 17494  003742  C01A  F022         	movff	?___ftpack+2,?___lltoft+2
 17495  003746  0012               	return	
 17496  003748                     __end_of___lltoft:
 17497                           	opt stack 0
 17498                           tosu	equ	0xFFF
 17499                           tosh	equ	0xFFE
 17500                           tosl	equ	0xFFD
 17501                           pclath	equ	0xFFA
 17502                           tblptru	equ	0xFF8
 17503                           tblptrh	equ	0xFF7
 17504                           tblptrl	equ	0xFF6
 17505                           tablat	equ	0xFF5
 17506                           prodh	equ	0xFF4
 17507                           prodl	equ	0xFF3
 17508                           intcon	equ	0xFF2
 17509                           intcon2	equ	0xFF1
 17510                           postinc0	equ	0xFEE
 17511                           plusw0	equ	0xFEB
 17512                           wreg	equ	0xFE8
 17513                           indf1	equ	0xFE7
 17514                           postdec1	equ	0xFE5
 17515                           fsr1h	equ	0xFE2
 17516                           fsr1l	equ	0xFE1
 17517                           indf2	equ	0xFDF
 17518                           postinc2	equ	0xFDE
 17519                           postdec2	equ	0xFDD
 17520                           plusw2	equ	0xFDB
 17521                           fsr2h	equ	0xFDA
 17522                           fsr2l	equ	0xFD9
 17523                           status	equ	0xFD8
 17524                           
 17525 ;; *************** function ___lwtoft *****************
 17526 ;; Defined at:
 17527 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 17528 ;; Parameters:    Size  Location     Type
 17529 ;;  c               2   31[COMRAM] unsigned int 
 17530 ;; Auto vars:     Size  Location     Type
 17531 ;;		None
 17532 ;; Return value:  Size  Location     Type
 17533 ;;                  3   31[COMRAM] float 
 17534 ;; Registers used:
 17535 ;;		wreg, status,2, status,0, cstack
 17536 ;; Tracked objects:
 17537 ;;		On entry : 0/0
 17538 ;;		On exit  : 0/0
 17539 ;;		Unchanged: 0/0
 17540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17541 ;;      Params:         3       0       0       0       0       0       0
 17542 ;;      Locals:         0       0       0       0       0       0       0
 17543 ;;      Temps:          0       0       0       0       0       0       0
 17544 ;;      Totals:         3       0       0       0       0       0       0
 17545 ;;Total ram usage:        3 bytes
 17546 ;; Hardware stack levels used:    1
 17547 ;; Hardware stack levels required when called:    5
 17548 ;; This function calls:
 17549 ;;		___ftpack
 17550 ;; This function is called by:
 17551 ;;		_AdcConvert
 17552 ;; This function uses a non-reentrant model
 17553 ;;
 17554                           
 17555                           	psect	text100
 17556  003FD2                     __ptext100:
 17557                           	opt stack 0
 17558  003FD2                     ___lwtoft:
 17559                           	opt stack 24
 17560                           
 17561                           ;incstack = 0
 17562  003FD2  C020  F018         	movff	___lwtoft@c,___ftpack@arg
 17563  003FD6  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
 17564  003FDA  6A1A               	clrf	___ftpack@arg+2,c
 17565  003FDC  0E8E               	movlw	142
 17566  003FDE  6E1B               	movwf	___ftpack@exp,c
 17567  003FE0  0E00               	movlw	0
 17568  003FE2  6E1C               	movwf	___ftpack@sign,c
 17569  003FE4  ECBA  F016         	call	___ftpack	;wreg free
 17570  003FE8  C018  F020         	movff	?___ftpack,?___lwtoft
 17571  003FEC  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
 17572  003FF0  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
 17573  003FF4  0012               	return	
 17574  003FF6                     __end_of___lwtoft:
 17575                           	opt stack 0
 17576                           tosu	equ	0xFFF
 17577                           tosh	equ	0xFFE
 17578                           tosl	equ	0xFFD
 17579                           pclath	equ	0xFFA
 17580                           tblptru	equ	0xFF8
 17581                           tblptrh	equ	0xFF7
 17582                           tblptrl	equ	0xFF6
 17583                           tablat	equ	0xFF5
 17584                           prodh	equ	0xFF4
 17585                           prodl	equ	0xFF3
 17586                           intcon	equ	0xFF2
 17587                           intcon2	equ	0xFF1
 17588                           postinc0	equ	0xFEE
 17589                           plusw0	equ	0xFEB
 17590                           wreg	equ	0xFE8
 17591                           indf1	equ	0xFE7
 17592                           postdec1	equ	0xFE5
 17593                           fsr1h	equ	0xFE2
 17594                           fsr1l	equ	0xFE1
 17595                           indf2	equ	0xFDF
 17596                           postinc2	equ	0xFDE
 17597                           postdec2	equ	0xFDD
 17598                           plusw2	equ	0xFDB
 17599                           fsr2h	equ	0xFDA
 17600                           fsr2l	equ	0xFD9
 17601                           status	equ	0xFD8
 17602                           
 17603 ;; *************** function ___ftpack *****************
 17604 ;; Defined at:
 17605 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 17606 ;; Parameters:    Size  Location     Type
 17607 ;;  arg             3   23[COMRAM] unsigned um
 17608 ;;  exp             1   26[COMRAM] unsigned char 
 17609 ;;  sign            1   27[COMRAM] unsigned char 
 17610 ;; Auto vars:     Size  Location     Type
 17611 ;;		None
 17612 ;; Return value:  Size  Location     Type
 17613 ;;                  3   23[COMRAM] float 
 17614 ;; Registers used:
 17615 ;;		wreg, status,2, status,0
 17616 ;; Tracked objects:
 17617 ;;		On entry : 0/0
 17618 ;;		On exit  : 0/0
 17619 ;;		Unchanged: 0/0
 17620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17621 ;;      Params:         5       0       0       0       0       0       0
 17622 ;;      Locals:         0       0       0       0       0       0       0
 17623 ;;      Temps:          3       0       0       0       0       0       0
 17624 ;;      Totals:         8       0       0       0       0       0       0
 17625 ;;Total ram usage:        8 bytes
 17626 ;; Hardware stack levels used:    1
 17627 ;; Hardware stack levels required when called:    4
 17628 ;; This function calls:
 17629 ;;		Nothing
 17630 ;; This function is called by:
 17631 ;;		___altoft
 17632 ;;		___awtoft
 17633 ;;		___ftadd
 17634 ;;		___ftdiv
 17635 ;;		___ftmul
 17636 ;;		___lltoft
 17637 ;;		___lwtoft
 17638 ;; This function uses a non-reentrant model
 17639 ;;
 17640                           
 17641                           	psect	text101
 17642  002D74                     __ptext101:
 17643                           	opt stack 0
 17644  002D74                     ___ftpack:
 17645                           	opt stack 18
 17646                           
 17647                           ;incstack = 0
 17648  002D74  501B               	movf	___ftpack@exp,w,c
 17649  002D76  B4D8               	btfsc	status,2,c
 17650  002D78  D005               	goto	u6340
 17651  002D7A  5018               	movf	___ftpack@arg,w,c
 17652  002D7C  1019               	iorwf	___ftpack@arg+1,w,c
 17653  002D7E  101A               	iorwf	___ftpack@arg+2,w,c
 17654  002D80  A4D8               	btfss	status,2,c
 17655  002D82  D00C               	goto	l1806
 17656  002D84                     u6340:
 17657  002D84  0E00               	movlw	0
 17658  002D86  6E18               	movwf	?___ftpack,c
 17659  002D88  0E00               	movlw	0
 17660  002D8A  6E19               	movwf	?___ftpack+1,c
 17661  002D8C  0E00               	movlw	0
 17662  002D8E  6E1A               	movwf	?___ftpack+2,c
 17663  002D90  0012               	return	
 17664  002D92  2A1B               	incf	___ftpack@exp,f,c
 17665  002D94  90D8               	bcf	status,0,c
 17666  002D96  321A               	rrcf	___ftpack@arg+2,f,c
 17667  002D98  3219               	rrcf	___ftpack@arg+1,f,c
 17668  002D9A  3218               	rrcf	___ftpack@arg,f,c
 17669  002D9C                     l1806:
 17670  002D9C  0E00               	movlw	0
 17671  002D9E  1418               	andwf	___ftpack@arg,w,c
 17672  002DA0  6E1D               	movwf	??___ftpack& (0+255),c
 17673  002DA2  0E00               	movlw	0
 17674  002DA4  1419               	andwf	___ftpack@arg+1,w,c
 17675  002DA6  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 17676  002DA8  0EFE               	movlw	254
 17677  002DAA  141A               	andwf	___ftpack@arg+2,w,c
 17678  002DAC  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 17679  002DAE  501D               	movf	??___ftpack,w,c
 17680  002DB0  101E               	iorwf	??___ftpack+1,w,c
 17681  002DB2  101F               	iorwf	??___ftpack+2,w,c
 17682  002DB4  B4D8               	btfsc	status,2,c
 17683  002DB6  D00C               	goto	l1809
 17684  002DB8  D7EC               	goto	l1807
 17685  002DBA  2A1B               	incf	___ftpack@exp,f,c
 17686  002DBC  0E01               	movlw	1
 17687  002DBE  2618               	addwf	___ftpack@arg,f,c
 17688  002DC0  0E00               	movlw	0
 17689  002DC2  2219               	addwfc	___ftpack@arg+1,f,c
 17690  002DC4  0E00               	movlw	0
 17691  002DC6  221A               	addwfc	___ftpack@arg+2,f,c
 17692  002DC8  90D8               	bcf	status,0,c
 17693  002DCA  321A               	rrcf	___ftpack@arg+2,f,c
 17694  002DCC  3219               	rrcf	___ftpack@arg+1,f,c
 17695  002DCE  3218               	rrcf	___ftpack@arg,f,c
 17696  002DD0                     l1809:
 17697  002DD0  0E00               	movlw	0
 17698  002DD2  1418               	andwf	___ftpack@arg,w,c
 17699  002DD4  6E1D               	movwf	??___ftpack& (0+255),c
 17700  002DD6  0E00               	movlw	0
 17701  002DD8  1419               	andwf	___ftpack@arg+1,w,c
 17702  002DDA  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 17703  002DDC  0EFF               	movlw	255
 17704  002DDE  141A               	andwf	___ftpack@arg+2,w,c
 17705  002DE0  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 17706  002DE2  501D               	movf	??___ftpack,w,c
 17707  002DE4  101E               	iorwf	??___ftpack+1,w,c
 17708  002DE6  101F               	iorwf	??___ftpack+2,w,c
 17709  002DE8  B4D8               	btfsc	status,2,c
 17710  002DEA  D006               	goto	l1812
 17711  002DEC  D7E6               	goto	l1810
 17712  002DEE  061B               	decf	___ftpack@exp,f,c
 17713  002DF0  90D8               	bcf	status,0,c
 17714  002DF2  3618               	rlcf	___ftpack@arg,f,c
 17715  002DF4  3619               	rlcf	___ftpack@arg+1,f,c
 17716  002DF6  361A               	rlcf	___ftpack@arg+2,f,c
 17717  002DF8                     l1812:
 17718  002DF8  BE19               	btfsc	___ftpack@arg+1,7,c
 17719  002DFA  D003               	goto	u6380
 17720  002DFC  0E02               	movlw	2
 17721  002DFE  601B               	cpfslt	___ftpack@exp,c
 17722  002E00  D7F6               	goto	l1813
 17723  002E02                     u6380:
 17724  002E02  A01B               	btfss	___ftpack@exp,0,c
 17725  002E04  9E19               	bcf	___ftpack@arg+1,7,c
 17726  002E06  90D8               	bcf	status,0,c
 17727  002E08  321B               	rrcf	___ftpack@exp,f,c
 17728  002E0A  501B               	movf	___ftpack@exp,w,c
 17729  002E0C  121A               	iorwf	___ftpack@arg+2,f,c
 17730  002E0E  501C               	movf	___ftpack@sign,w,c
 17731  002E10  A4D8               	btfss	status,2,c
 17732  002E12  8E1A               	bsf	___ftpack@arg+2,7,c
 17733  002E14  C018  F018         	movff	___ftpack@arg,?___ftpack
 17734  002E18  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
 17735  002E1C  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
 17736  002E20  0012               	return	
 17737  002E22                     __end_of___ftpack:
 17738                           	opt stack 0
 17739                           tosu	equ	0xFFF
 17740                           tosh	equ	0xFFE
 17741                           tosl	equ	0xFFD
 17742                           pclath	equ	0xFFA
 17743                           tblptru	equ	0xFF8
 17744                           tblptrh	equ	0xFF7
 17745                           tblptrl	equ	0xFF6
 17746                           tablat	equ	0xFF5
 17747                           prodh	equ	0xFF4
 17748                           prodl	equ	0xFF3
 17749                           intcon	equ	0xFF2
 17750                           intcon2	equ	0xFF1
 17751                           postinc0	equ	0xFEE
 17752                           plusw0	equ	0xFEB
 17753                           wreg	equ	0xFE8
 17754                           indf1	equ	0xFE7
 17755                           postdec1	equ	0xFE5
 17756                           fsr1h	equ	0xFE2
 17757                           fsr1l	equ	0xFE1
 17758                           indf2	equ	0xFDF
 17759                           postinc2	equ	0xFDE
 17760                           postdec2	equ	0xFDD
 17761                           plusw2	equ	0xFDB
 17762                           fsr2h	equ	0xFDA
 17763                           fsr2l	equ	0xFD9
 17764                           status	equ	0xFD8
 17765                           
 17766 ;; *************** function _GetUint16FromBitArray *****************
 17767 ;; Defined at:
 17768 ;;		line 34 in file "SystemCommon.c"
 17769 ;; Parameters:    Size  Location     Type
 17770 ;;  bitarray        2   23[COMRAM] PTR unsigned char 
 17771 ;;		 -> synthLdTxArray(12), synthLdRxArray(12), 
 17772 ;;  numOfBits       2   25[COMRAM] int 
 17773 ;; Auto vars:     Size  Location     Type
 17774 ;;  i               2   32[COMRAM] int 
 17775 ;;  res             2   30[COMRAM] unsigned int 
 17776 ;; Return value:  Size  Location     Type
 17777 ;;                  2   23[COMRAM] unsigned int 
 17778 ;; Registers used:
 17779 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17780 ;; Tracked objects:
 17781 ;;		On entry : 0/0
 17782 ;;		On exit  : 0/0
 17783 ;;		Unchanged: 0/0
 17784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17785 ;;      Params:         4       0       0       0       0       0       0
 17786 ;;      Locals:         4       0       0       0       0       0       0
 17787 ;;      Temps:          3       0       0       0       0       0       0
 17788 ;;      Totals:        11       0       0       0       0       0       0
 17789 ;;Total ram usage:       11 bytes
 17790 ;; Hardware stack levels used:    1
 17791 ;; Hardware stack levels required when called:    4
 17792 ;; This function calls:
 17793 ;;		Nothing
 17794 ;; This function is called by:
 17795 ;;		_AdcConvert
 17796 ;; This function uses a non-reentrant model
 17797 ;;
 17798                           
 17799                           	psect	text102
 17800  0034A2                     __ptext102:
 17801                           	opt stack 0
 17802  0034A2                     _GetUint16FromBitArray:
 17803                           	opt stack 25
 17804                           
 17805                           ;SystemCommon.c: 36: uint16_t res = 0;
 17806                           
 17807                           ;incstack = 0
 17808  0034A2  0E00               	movlw	0
 17809  0034A4  6E20               	movwf	GetUint16FromBitArray@res+1,c
 17810  0034A6  0E00               	movlw	0
 17811  0034A8  6E1F               	movwf	GetUint16FromBitArray@res,c
 17812                           
 17813                           ;SystemCommon.c: 37: for (int i = 0 ; i < numOfBits ; i++)
 17814  0034AA  0E00               	movlw	0
 17815  0034AC  6E22               	movwf	GetUint16FromBitArray@i+1,c
 17816  0034AE  0E00               	movlw	0
 17817  0034B0  6E21               	movwf	GetUint16FromBitArray@i,c
 17818  0034B2  D01C               	goto	l1400
 17819  0034B4                     
 17820                           ;SystemCommon.c: 38: {
 17821                           ;SystemCommon.c: 39: if (bitarray[i])
 17822  0034B4  5021               	movf	GetUint16FromBitArray@i,w,c
 17823  0034B6  2418               	addwf	GetUint16FromBitArray@bitarray,w,c
 17824  0034B8  6ED9               	movwf	fsr2l,c
 17825  0034BA  5022               	movf	GetUint16FromBitArray@i+1,w,c
 17826  0034BC  2019               	addwfc	GetUint16FromBitArray@bitarray+1,w,c
 17827  0034BE  6EDA               	movwf	fsr2h,c
 17828  0034C0  50DF               	movf	indf2,w,c
 17829  0034C2  B4D8               	btfsc	status,2,c
 17830  0034C4  D011               	goto	l1402
 17831                           
 17832                           ;SystemCommon.c: 40: {
 17833                           ;SystemCommon.c: 41: res |= (uint16_t)(1 << i);
 17834  0034C6  C021  F01C         	movff	GetUint16FromBitArray@i,??_GetUint16FromBitArray
 17835  0034CA  0E01               	movlw	1
 17836  0034CC  6E1D               	movwf	(??_GetUint16FromBitArray+1)& (0+255),c
 17837  0034CE  0E00               	movlw	0
 17838  0034D0  6E1E               	movwf	(??_GetUint16FromBitArray+2)& (0+255),c
 17839  0034D2  2A1C               	incf	??_GetUint16FromBitArray,f,c
 17840  0034D4  D003               	goto	u5524
 17841  0034D6                     u5525:
 17842  0034D6  90D8               	bcf	status,0,c
 17843  0034D8  361D               	rlcf	??_GetUint16FromBitArray+1,f,c
 17844  0034DA  361E               	rlcf	??_GetUint16FromBitArray+2,f,c
 17845  0034DC                     u5524:
 17846  0034DC  2E1C               	decfsz	??_GetUint16FromBitArray,f,c
 17847  0034DE  D7FB               	goto	u5525
 17848  0034E0  501D               	movf	??_GetUint16FromBitArray+1,w,c
 17849  0034E2  121F               	iorwf	GetUint16FromBitArray@res,f,c
 17850  0034E4  501E               	movf	??_GetUint16FromBitArray+2,w,c
 17851  0034E6  1220               	iorwf	GetUint16FromBitArray@res+1,f,c
 17852  0034E8                     l1402:
 17853  0034E8  4A21               	infsnz	GetUint16FromBitArray@i,f,c
 17854  0034EA  2A22               	incf	GetUint16FromBitArray@i+1,f,c
 17855  0034EC                     l1400:
 17856  0034EC  501A               	movf	GetUint16FromBitArray@numOfBits,w,c
 17857  0034EE  5C21               	subwf	GetUint16FromBitArray@i,w,c
 17858  0034F0  5022               	movf	GetUint16FromBitArray@i+1,w,c
 17859  0034F2  0A80               	xorlw	128
 17860  0034F4  6E1C               	movwf	??_GetUint16FromBitArray& (0+255),c
 17861  0034F6  501B               	movf	GetUint16FromBitArray@numOfBits+1,w,c
 17862  0034F8  0A80               	xorlw	128
 17863  0034FA  581C               	subwfb	??_GetUint16FromBitArray& (0+255),w,c
 17864  0034FC  A0D8               	btfss	status,0,c
 17865  0034FE  D7DA               	goto	l1401
 17866                           
 17867                           ;SystemCommon.c: 42: }
 17868                           ;SystemCommon.c: 43: }
 17869                           ;SystemCommon.c: 44: return res;
 17870  003500  C01F  F018         	movff	GetUint16FromBitArray@res,?_GetUint16FromBitArray
 17871  003504  C020  F019         	movff	GetUint16FromBitArray@res+1,?_GetUint16FromBitArray+1
 17872  003508  0012               	return		;funcret
 17873  00350A                     __end_of_GetUint16FromBitArray:
 17874                           	opt stack 0
 17875                           tosu	equ	0xFFF
 17876                           tosh	equ	0xFFE
 17877                           tosl	equ	0xFFD
 17878                           pclath	equ	0xFFA
 17879                           tblptru	equ	0xFF8
 17880                           tblptrh	equ	0xFF7
 17881                           tblptrl	equ	0xFF6
 17882                           tablat	equ	0xFF5
 17883                           prodh	equ	0xFF4
 17884                           prodl	equ	0xFF3
 17885                           intcon	equ	0xFF2
 17886                           intcon2	equ	0xFF1
 17887                           postinc0	equ	0xFEE
 17888                           plusw0	equ	0xFEB
 17889                           wreg	equ	0xFE8
 17890                           indf1	equ	0xFE7
 17891                           postdec1	equ	0xFE5
 17892                           fsr1h	equ	0xFE2
 17893                           fsr1l	equ	0xFE1
 17894                           indf2	equ	0xFDF
 17895                           postinc2	equ	0xFDE
 17896                           postdec2	equ	0xFDD
 17897                           plusw2	equ	0xFDB
 17898                           fsr2h	equ	0xFDA
 17899                           fsr2l	equ	0xFD9
 17900                           status	equ	0xFD8
 17901                           
 17902 ;; *************** function _FlashSampleWrite *****************
 17903 ;; Defined at:
 17904 ;;		line 29 in file "FlashApp.c"
 17905 ;; Parameters:    Size  Location     Type
 17906 ;;  sampleData      2   44[COMRAM] unsigned int 
 17907 ;;  channelNum      1   46[COMRAM] unsigned char 
 17908 ;; Auto vars:     Size  Location     Type
 17909 ;;  rotateLeft      2    2[BANK0 ] unsigned int 
 17910 ;; Return value:  Size  Location     Type
 17911 ;;                  1    wreg      void 
 17912 ;; Registers used:
 17913 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17914 ;; Tracked objects:
 17915 ;;		On entry : 0/0
 17916 ;;		On exit  : 0/0
 17917 ;;		Unchanged: 0/0
 17918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17919 ;;      Params:         3       0       0       0       0       0       0
 17920 ;;      Locals:         0       2       0       0       0       0       0
 17921 ;;      Temps:          0       2       0       0       0       0       0
 17922 ;;      Totals:         3       4       0       0       0       0       0
 17923 ;;Total ram usage:        7 bytes
 17924 ;; Hardware stack levels used:    1
 17925 ;; Hardware stack levels required when called:    6
 17926 ;; This function calls:
 17927 ;;		_FLASH_IsWriteDone
 17928 ;;		_FLASH_WriteBlock
 17929 ;; This function is called by:
 17930 ;;		_AdcConvert
 17931 ;; This function uses a non-reentrant model
 17932 ;;
 17933                           
 17934                           	psect	text103
 17935  002146                     __ptext103:
 17936                           	opt stack 0
 17937  002146                     _FlashSampleWrite:
 17938                           	opt stack 23
 17939                           
 17940                           ;FlashApp.c: 32: uint16_t rotateLeft = (channelNum << 12);
 17941                           
 17942                           ;incstack = 0
 17943  002146  502F               	movf	FlashSampleWrite@channelNum,w,c
 17944  002148  0100               	movlb	0	; () banked
 17945  00214A  6F60               	movwf	??_FlashSampleWrite& (0+255),b
 17946  00214C  6B61               	clrf	(??_FlashSampleWrite+1)& (0+255),b
 17947  00214E  0E0C               	movlw	12
 17948  002150                     u8635:
 17949  002150  90D8               	bcf	status,0,c
 17950  002152  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 17951  002154  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 17952  002156  2EE8               	decfsz	wreg,f,c
 17953  002158  D7FB               	goto	u8635
 17954  00215A  C060  F062         	movff	??_FlashSampleWrite,FlashSampleWrite@rotateLeft
 17955  00215E  C061  F063         	movff	??_FlashSampleWrite+1,FlashSampleWrite@rotateLeft+1
 17956                           
 17957                           ;FlashApp.c: 33: sampleData |= rotateLeft;
 17958  002162  5162               	movf	FlashSampleWrite@rotateLeft& (0+255),w,b
 17959  002164  122D               	iorwf	FlashSampleWrite@sampleData,f,c
 17960  002166  5163               	movf	(FlashSampleWrite@rotateLeft+1)& (0+255),w,b
 17961  002168  122E               	iorwf	FlashSampleWrite@sampleData+1,f,c
 17962                           
 17963                           ; BSR set to: 0
 17964                           ;FlashApp.c: 34: sampleArray[sampleCount] = sampleData;
 17965  00216A  90D8               	bcf	status,0,c
 17966  00216C  35EA               	rlcf	_sampleCount& (0+255),w,b
 17967  00216E  6ED9               	movwf	fsr2l,c
 17968  002170  35EB               	rlcf	(_sampleCount+1)& (0+255),w,b
 17969  002172  6EDA               	movwf	fsr2h,c
 17970  002174  0E32               	movlw	low _sampleArray
 17971  002176  26D9               	addwf	fsr2l,f,c
 17972  002178  0E01               	movlw	high _sampleArray
 17973  00217A  22DA               	addwfc	fsr2h,f,c
 17974  00217C  C02D  FFDE         	movff	FlashSampleWrite@sampleData,postinc2
 17975  002180  C02E  FFDD         	movff	FlashSampleWrite@sampleData+1,postdec2
 17976                           
 17977                           ; BSR set to: 0
 17978                           ;FlashApp.c: 35: sampleCount ++;
 17979  002184  4BEA               	infsnz	_sampleCount& (0+255),f,b
 17980  002186  2BEB               	incf	(_sampleCount+1)& (0+255),f,b
 17981                           
 17982                           ; BSR set to: 0
 17983                           ;FlashApp.c: 37: if(((sampleCount*sizeof(adc_result_t)) >= (64)) && FLASH_IsWriteDone())
 17984  002188  C0EA  F060         	movff	_sampleCount,??_FlashSampleWrite
 17985  00218C  C0EB  F061         	movff	_sampleCount+1,??_FlashSampleWrite+1
 17986  002190  90D8               	bcf	status,0,c
 17987  002192  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 17988  002194  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 17989  002196  5161               	movf	(??_FlashSampleWrite+1)& (0+255),w,b
 17990  002198  E104               	bnz	u8640
 17991  00219A  0E40               	movlw	64
 17992  00219C  5D60               	subwf	??_FlashSampleWrite& (0+255),w,b
 17993  00219E  A0D8               	btfss	status,0,c
 17994  0021A0  0012               	return	
 17995  0021A2                     u8640:
 17996                           
 17997                           ; BSR set to: 0
 17998  0021A2  ECF1  F020         	call	_FLASH_IsWriteDone	;wreg free
 17999  0021A6  0900               	iorlw	0
 18000  0021A8  B4D8               	btfsc	status,2,c
 18001  0021AA  0012               	return	
 18002                           
 18003                           ;FlashApp.c: 38: {
 18004                           ;FlashApp.c: 39: FLASH_WriteBlock(writeAddress, (uint8_t *)sampleArray);
 18005  0021AC  C03F  F01D         	movff	_writeAddress,FLASH_WriteBlock@writeAddr
 18006  0021B0  C040  F01E         	movff	_writeAddress+1,FLASH_WriteBlock@writeAddr+1
 18007  0021B4  C041  F01F         	movff	_writeAddress+2,FLASH_WriteBlock@writeAddr+2
 18008  0021B8  C042  F020         	movff	_writeAddress+3,FLASH_WriteBlock@writeAddr+3
 18009  0021BC  0E32               	movlw	low _sampleArray
 18010  0021BE  6E21               	movwf	FLASH_WriteBlock@flashWrBufPtr,c
 18011  0021C0  0E01               	movlw	high _sampleArray
 18012  0021C2  6E22               	movwf	FLASH_WriteBlock@flashWrBufPtr+1,c
 18013  0021C4  EC05  F016         	call	_FLASH_WriteBlock	;wreg free
 18014                           
 18015                           ;FlashApp.c: 40: writeAddress += (64);
 18016  0021C8  0E40               	movlw	64
 18017  0021CA  263F               	addwf	_writeAddress,f,c
 18018  0021CC  0E00               	movlw	0
 18019  0021CE  2240               	addwfc	_writeAddress+1,f,c
 18020  0021D0  2241               	addwfc	_writeAddress+2,f,c
 18021  0021D2  2242               	addwfc	_writeAddress+3,f,c
 18022                           
 18023                           ;FlashApp.c: 41: if (writeAddress >= 0x7FF0)
 18024  0021D4  5042               	movf	_writeAddress+3,w,c
 18025  0021D6  1041               	iorwf	_writeAddress+2,w,c
 18026  0021D8  E106               	bnz	u8660
 18027  0021DA  0EF0               	movlw	240
 18028  0021DC  5C3F               	subwf	_writeAddress,w,c
 18029  0021DE  0E7F               	movlw	127
 18030  0021E0  5840               	subwfb	_writeAddress+1,w,c
 18031  0021E2  A0D8               	btfss	status,0,c
 18032  0021E4  D01A               	goto	l319
 18033  0021E6                     u8660:
 18034                           
 18035                           ;FlashApp.c: 42: {
 18036                           ;FlashApp.c: 43: writeAddress = 0x4580;
 18037  0021E6  0E80               	movlw	128
 18038  0021E8  6E3F               	movwf	_writeAddress,c
 18039  0021EA  0E45               	movlw	69
 18040  0021EC  6E40               	movwf	_writeAddress+1,c
 18041  0021EE  0E00               	movlw	0
 18042  0021F0  6E41               	movwf	_writeAddress+2,c
 18043  0021F2  0E00               	movlw	0
 18044  0021F4  6E42               	movwf	_writeAddress+3,c
 18045                           
 18046                           ;FlashApp.c: 44: isReWriteDone = 1;
 18047  0021F6  0E01               	movlw	1
 18048  0021F8  6E3C               	movwf	_isReWriteDone,c
 18049                           
 18050                           ;FlashApp.c: 45: if (readAddress == 0x4580)
 18051  0021FA  0E80               	movlw	128
 18052  0021FC  0101               	movlb	1	; () banked
 18053  0021FE  19F1               	xorwf	_readAddress& (0+255),w,b
 18054  002200  E10C               	bnz	l318
 18055  002202  0E45               	movlw	69
 18056  002204  19F2               	xorwf	(_readAddress+1)& (0+255),w,b
 18057  002206  11F3               	iorwf	(_readAddress+2)& (0+255),w,b
 18058  002208  11F4               	iorwf	(_readAddress+3)& (0+255),w,b
 18059  00220A  A4D8               	btfss	status,2,c
 18060  00220C  D006               	goto	l319
 18061                           
 18062                           ; BSR set to: 1
 18063                           ;FlashApp.c: 46: {
 18064                           ;FlashApp.c: 47: readAddress += (64);
 18065  00220E  0E40               	movlw	64
 18066  002210  27F1               	addwf	_readAddress& (0+255),f,b
 18067  002212  0E00               	movlw	0
 18068  002214  23F2               	addwfc	(_readAddress+1)& (0+255),f,b
 18069  002216  23F3               	addwfc	(_readAddress+2)& (0+255),f,b
 18070  002218  23F4               	addwfc	(_readAddress+3)& (0+255),f,b
 18071  00221A                     l319:
 18072  00221A                     l318:
 18073                           
 18074                           ;FlashApp.c: 48: }
 18075                           ;FlashApp.c: 49: }
 18076                           ;FlashApp.c: 52: if (numOfValidateSamples < ((0x4580-0x7FF0)/(64)))
 18077  00221A  0E17               	movlw	23
 18078  00221C  5C31               	subwf	_numOfValidateSamples,w,c
 18079  00221E  0EFF               	movlw	255
 18080  002220  5832               	subwfb	_numOfValidateSamples+1,w,c
 18081  002222  0EFF               	movlw	255
 18082  002224  5833               	subwfb	_numOfValidateSamples+2,w,c
 18083  002226  0EFF               	movlw	255
 18084  002228  5834               	subwfb	_numOfValidateSamples+3,w,c
 18085  00222A  B0D8               	btfsc	status,0,c
 18086  00222C  D006               	goto	l320
 18087                           
 18088                           ;FlashApp.c: 53: {
 18089                           ;FlashApp.c: 54: numOfValidateSamples++;
 18090  00222E  0E01               	movlw	1
 18091  002230  2631               	addwf	_numOfValidateSamples,f,c
 18092  002232  0E00               	movlw	0
 18093  002234  2232               	addwfc	_numOfValidateSamples+1,f,c
 18094  002236  2233               	addwfc	_numOfValidateSamples+2,f,c
 18095  002238  2234               	addwfc	_numOfValidateSamples+3,f,c
 18096  00223A                     l320:
 18097                           
 18098                           ;FlashApp.c: 55: }
 18099                           ;FlashApp.c: 56: sampleCount = 0;
 18100  00223A  0E00               	movlw	0
 18101  00223C  0100               	movlb	0	; () banked
 18102  00223E  6FEB               	movwf	(_sampleCount+1)& (0+255),b
 18103  002240  0E00               	movlw	0
 18104  002242  6FEA               	movwf	_sampleCount& (0+255),b
 18105  002244  0012               	return	
 18106  002246                     __end_of_FlashSampleWrite:
 18107                           	opt stack 0
 18108                           tosu	equ	0xFFF
 18109                           tosh	equ	0xFFE
 18110                           tosl	equ	0xFFD
 18111                           pclath	equ	0xFFA
 18112                           tblptru	equ	0xFF8
 18113                           tblptrh	equ	0xFF7
 18114                           tblptrl	equ	0xFF6
 18115                           tablat	equ	0xFF5
 18116                           prodh	equ	0xFF4
 18117                           prodl	equ	0xFF3
 18118                           intcon	equ	0xFF2
 18119                           intcon2	equ	0xFF1
 18120                           postinc0	equ	0xFEE
 18121                           plusw0	equ	0xFEB
 18122                           wreg	equ	0xFE8
 18123                           indf1	equ	0xFE7
 18124                           postdec1	equ	0xFE5
 18125                           fsr1h	equ	0xFE2
 18126                           fsr1l	equ	0xFE1
 18127                           indf2	equ	0xFDF
 18128                           postinc2	equ	0xFDE
 18129                           postdec2	equ	0xFDD
 18130                           plusw2	equ	0xFDB
 18131                           fsr2h	equ	0xFDA
 18132                           fsr2l	equ	0xFD9
 18133                           status	equ	0xFD8
 18134                           
 18135 ;; *************** function _FLASH_WriteBlock *****************
 18136 ;; Defined at:
 18137 ;;		line 93 in file "mcc_generated_files/memory.c"
 18138 ;; Parameters:    Size  Location     Type
 18139 ;;  writeAddr       4   28[COMRAM] unsigned long 
 18140 ;;  flashWrBufPt    2   32[COMRAM] PTR unsigned char 
 18141 ;;		 -> sampleArray(64), 
 18142 ;; Auto vars:     Size  Location     Type
 18143 ;;  blockStartAd    4   38[COMRAM] unsigned long 
 18144 ;;  i               1   43[COMRAM] unsigned char 
 18145 ;;  GIEBitValue     1   42[COMRAM] unsigned char 
 18146 ;; Return value:  Size  Location     Type
 18147 ;;                  1    wreg      char 
 18148 ;; Registers used:
 18149 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18150 ;; Tracked objects:
 18151 ;;		On entry : 0/0
 18152 ;;		On exit  : 0/0
 18153 ;;		Unchanged: 0/0
 18154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18155 ;;      Params:         6       0       0       0       0       0       0
 18156 ;;      Locals:         6       0       0       0       0       0       0
 18157 ;;      Temps:          4       0       0       0       0       0       0
 18158 ;;      Totals:        16       0       0       0       0       0       0
 18159 ;;Total ram usage:       16 bytes
 18160 ;; Hardware stack levels used:    1
 18161 ;; Hardware stack levels required when called:    5
 18162 ;; This function calls:
 18163 ;;		_FLASH_EraseBlock
 18164 ;; This function is called by:
 18165 ;;		_FlashSampleWrite
 18166 ;;		_FLASH_WriteByte
 18167 ;; This function uses a non-reentrant model
 18168 ;;
 18169                           
 18170                           	psect	text104
 18171  002C0A                     __ptext104:
 18172                           	opt stack 0
 18173  002C0A                     _FLASH_WriteBlock:
 18174                           	opt stack 23
 18175                           
 18176                           ;memory.c: 95: uint32_t blockStartAddr = (uint32_t )(writeAddr & ((0x8000-1) ^ ((64)-1))
      +                          );
 18177                           
 18178                           ;incstack = 0
 18179  002C0A  0EC0               	movlw	192
 18180  002C0C  6E23               	movwf	??_FLASH_WriteBlock& (0+255),c
 18181  002C0E  0E7F               	movlw	127
 18182  002C10  6E24               	movwf	(??_FLASH_WriteBlock+1)& (0+255),c
 18183  002C12  C01D  F025         	movff	FLASH_WriteBlock@writeAddr,??_FLASH_WriteBlock+2
 18184  002C16  C01E  F026         	movff	FLASH_WriteBlock@writeAddr+1,??_FLASH_WriteBlock+3
 18185  002C1A  5023               	movf	??_FLASH_WriteBlock,w,c
 18186  002C1C  1625               	andwf	??_FLASH_WriteBlock+2,f,c
 18187  002C1E  5024               	movf	??_FLASH_WriteBlock+1,w,c
 18188  002C20  1626               	andwf	??_FLASH_WriteBlock+3,f,c
 18189  002C22  C025  F027         	movff	??_FLASH_WriteBlock+2,FLASH_WriteBlock@blockStartAddr
 18190  002C26  C026  F028         	movff	??_FLASH_WriteBlock+3,FLASH_WriteBlock@blockStartAddr+1
 18191  002C2A  6A29               	clrf	FLASH_WriteBlock@blockStartAddr+2,c
 18192  002C2C  6A2A               	clrf	FLASH_WriteBlock@blockStartAddr+3,c
 18193                           
 18194                           ;memory.c: 96: uint8_t GIEBitValue = INTCONbits.GIE;
 18195  002C2E  0E00               	movlw	0
 18196  002C30  BEF2               	btfsc	intcon,7,c	;volatile
 18197  002C32  0E01               	movlw	1
 18198  002C34  6E2B               	movwf	FLASH_WriteBlock@GIEBitValue,c
 18199                           
 18200                           ;memory.c: 97: uint8_t i;
 18201                           ;memory.c: 100: if( writeAddr != blockStartAddr )
 18202  002C36  5027               	movf	FLASH_WriteBlock@blockStartAddr,w,c
 18203  002C38  181D               	xorwf	FLASH_WriteBlock@writeAddr,w,c
 18204  002C3A  E144               	bnz	l1044
 18205  002C3C  5028               	movf	FLASH_WriteBlock@blockStartAddr+1,w,c
 18206  002C3E  181E               	xorwf	FLASH_WriteBlock@writeAddr+1,w,c
 18207  002C40  E141               	bnz	l1044
 18208  002C42  5029               	movf	FLASH_WriteBlock@blockStartAddr+2,w,c
 18209  002C44  181F               	xorwf	FLASH_WriteBlock@writeAddr+2,w,c
 18210  002C46  E13E               	bnz	l1044
 18211  002C48  502A               	movf	FLASH_WriteBlock@blockStartAddr+3,w,c
 18212  002C4A  1820               	xorwf	FLASH_WriteBlock@writeAddr+3,w,c
 18213  002C4C  A4D8               	btfss	status,2,c
 18214  002C4E  0012               	return	
 18215                           
 18216                           ;memory.c: 103: }
 18217                           ;memory.c: 106: FLASH_EraseBlock(writeAddr);
 18218                           
 18219                           ;memory.c: 101: {
 18220                           ;memory.c: 102: return -1;
 18221                           ;	Return value of _FLASH_WriteBlock is never used
 18222  002C50  C01D  F018         	movff	FLASH_WriteBlock@writeAddr,FLASH_EraseBlock@baseAddr
 18223  002C54  C01E  F019         	movff	FLASH_WriteBlock@writeAddr+1,FLASH_EraseBlock@baseAddr+1
 18224  002C58  C01F  F01A         	movff	FLASH_WriteBlock@writeAddr+2,FLASH_EraseBlock@baseAddr+2
 18225  002C5C  C020  F01B         	movff	FLASH_WriteBlock@writeAddr+3,FLASH_EraseBlock@baseAddr+3
 18226  002C60  ECE8  F01E         	call	_FLASH_EraseBlock	;wreg free
 18227                           
 18228                           ;memory.c: 109: TBLPTRU = (uint8_t)((writeAddr & 0x00FF0000) >> 16);
 18229  002C64  C01F  FFF8         	movff	FLASH_WriteBlock@writeAddr+2,tblptru	;volatile
 18230                           
 18231                           ;memory.c: 110: TBLPTRH = (uint8_t)((writeAddr & 0x0000FF00)>> 8);
 18232  002C68  C01E  FFF7         	movff	FLASH_WriteBlock@writeAddr+1,tblptrh	;volatile
 18233                           
 18234                           ;memory.c: 111: TBLPTRL = (uint8_t)(writeAddr & 0x000000FF);
 18235  002C6C  C01D  FFF6         	movff	FLASH_WriteBlock@writeAddr,tblptrl	;volatile
 18236                           
 18237                           ;memory.c: 114: for (i=0; i<(64); i++)
 18238  002C70  0E00               	movlw	0
 18239  002C72  6E2C               	movwf	FLASH_WriteBlock@i,c
 18240  002C74                     l8158:
 18241  002C74  0E3F               	movlw	63
 18242  002C76  642C               	cpfsgt	FLASH_WriteBlock@i,c
 18243  002C78  D001               	goto	l1045
 18244  002C7A  D013               	goto	u8240
 18245  002C7C                     l1045:
 18246                           
 18247                           ;memory.c: 115: {
 18248                           ;memory.c: 116: TABLAT = flashWrBufPtr[i];
 18249  002C7C  502C               	movf	FLASH_WriteBlock@i,w,c
 18250  002C7E  0D01               	mullw	1
 18251  002C80  50F3               	movf	prodl,w,c
 18252  002C82  2421               	addwf	FLASH_WriteBlock@flashWrBufPtr,w,c
 18253  002C84  6ED9               	movwf	fsr2l,c
 18254  002C86  50F4               	movf	prodh,w,c
 18255  002C88  2022               	addwfc	FLASH_WriteBlock@flashWrBufPtr+1,w,c
 18256  002C8A  6EDA               	movwf	fsr2h,c
 18257  002C8C  50DF               	movf	indf2,w,c
 18258  002C8E  6EF5               	movwf	tablat,c	;volatile
 18259                           
 18260                           ;memory.c: 118: if (i == ((64)-1))
 18261  002C90  0E3F               	movlw	63
 18262  002C92  182C               	xorwf	FLASH_WriteBlock@i,w,c
 18263  002C94  A4D8               	btfss	status,2,c
 18264  002C96  D002               	goto	l1047
 18265  002C98  000C               	tblwt		*	;# 
 18266                           
 18267                           ;memory.c: 121: }
 18268  002C9A  D001               	goto	l1048
 18269  002C9C                     l1047:
 18270  002C9C  000D               	tblwt		*+	;# 
 18271  002C9E                     l1048:
 18272  002C9E  2A2C               	incf	FLASH_WriteBlock@i,f,c
 18273  002CA0  D7E9               	goto	l8158
 18274  002CA2                     u8240:
 18275                           
 18276                           ;memory.c: 125: }
 18277                           ;memory.c: 126: }
 18278                           ;memory.c: 128: PIR2bits.EEIF = 1;
 18279  002CA2  88A1               	bsf	4001,4,c	;volatile
 18280                           
 18281                           ;memory.c: 129: EECON1bits.EEPGD = 1;
 18282  002CA4  8EA6               	bsf	4006,7,c	;volsfr
 18283                           
 18284                           ;memory.c: 130: EECON1bits.CFGS = 0;
 18285  002CA6  9CA6               	bcf	4006,6,c	;volsfr
 18286                           
 18287                           ;memory.c: 131: EECON1bits.WREN = 1;
 18288  002CA8  84A6               	bsf	4006,2,c	;volsfr
 18289                           
 18290                           ;memory.c: 132: INTCONbits.GIE = 0;
 18291  002CAA  9EF2               	bcf	intcon,7,c	;volatile
 18292                           
 18293                           ;memory.c: 133: EECON2 = 0x55;
 18294  002CAC  0E55               	movlw	85
 18295  002CAE  6EA7               	movwf	4007,c	;volsfr
 18296                           
 18297                           ;memory.c: 134: EECON2 = 0xAA;
 18298  002CB0  0EAA               	movlw	170
 18299  002CB2  6EA7               	movwf	4007,c	;volsfr
 18300                           
 18301                           ;memory.c: 135: EECON1bits.WR = 1;
 18302  002CB4  82A6               	bsf	4006,1,c	;volsfr
 18303                           
 18304                           ;memory.c: 137: EECON1bits.WREN = 0;
 18305  002CB6  94A6               	bcf	4006,2,c	;volsfr
 18306                           
 18307                           ;memory.c: 138: INTCONbits.GIE = GIEBitValue;
 18308  002CB8  B02B               	btfsc	FLASH_WriteBlock@GIEBitValue,0,c
 18309  002CBA  D002               	bra	u8255
 18310  002CBC  9EF2               	bcf	intcon,7,c	;volatile
 18311  002CBE  D001               	bra	u8256
 18312  002CC0                     u8255:
 18313  002CC0  8EF2               	bsf	intcon,7,c	;volatile
 18314  002CC2                     u8256:
 18315  002CC2  0012               	return	
 18316  002CC4                     l1044:
 18317  002CC4  0012               	return		;funcret
 18318  002CC6                     __end_of_FLASH_WriteBlock:
 18319                           	opt stack 0
 18320                           tosu	equ	0xFFF
 18321                           tosh	equ	0xFFE
 18322                           tosl	equ	0xFFD
 18323                           pclath	equ	0xFFA
 18324                           tblptru	equ	0xFF8
 18325                           tblptrh	equ	0xFF7
 18326                           tblptrl	equ	0xFF6
 18327                           tablat	equ	0xFF5
 18328                           prodh	equ	0xFF4
 18329                           prodl	equ	0xFF3
 18330                           intcon	equ	0xFF2
 18331                           intcon2	equ	0xFF1
 18332                           postinc0	equ	0xFEE
 18333                           plusw0	equ	0xFEB
 18334                           wreg	equ	0xFE8
 18335                           indf1	equ	0xFE7
 18336                           postdec1	equ	0xFE5
 18337                           fsr1h	equ	0xFE2
 18338                           fsr1l	equ	0xFE1
 18339                           indf2	equ	0xFDF
 18340                           postinc2	equ	0xFDE
 18341                           postdec2	equ	0xFDD
 18342                           plusw2	equ	0xFDB
 18343                           fsr2h	equ	0xFDA
 18344                           fsr2l	equ	0xFD9
 18345                           status	equ	0xFD8
 18346                           
 18347 ;; *************** function _FLASH_EraseBlock *****************
 18348 ;; Defined at:
 18349 ;;		line 144 in file "mcc_generated_files/memory.c"
 18350 ;; Parameters:    Size  Location     Type
 18351 ;;  baseAddr        4   23[COMRAM] unsigned long 
 18352 ;; Auto vars:     Size  Location     Type
 18353 ;;  GIEBitValue     1   27[COMRAM] unsigned char 
 18354 ;; Return value:  Size  Location     Type
 18355 ;;                  1    wreg      void 
 18356 ;; Registers used:
 18357 ;;		wreg, status,2
 18358 ;; Tracked objects:
 18359 ;;		On entry : 0/0
 18360 ;;		On exit  : 0/0
 18361 ;;		Unchanged: 0/0
 18362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18363 ;;      Params:         4       0       0       0       0       0       0
 18364 ;;      Locals:         1       0       0       0       0       0       0
 18365 ;;      Temps:          0       0       0       0       0       0       0
 18366 ;;      Totals:         5       0       0       0       0       0       0
 18367 ;;Total ram usage:        5 bytes
 18368 ;; Hardware stack levels used:    1
 18369 ;; Hardware stack levels required when called:    4
 18370 ;; This function calls:
 18371 ;;		Nothing
 18372 ;; This function is called by:
 18373 ;;		_FLASH_WriteBlock
 18374 ;; This function uses a non-reentrant model
 18375 ;;
 18376                           
 18377                           	psect	text105
 18378  003DD0                     __ptext105:
 18379                           	opt stack 0
 18380  003DD0                     _FLASH_EraseBlock:
 18381                           	opt stack 23
 18382                           
 18383                           ;memory.c: 146: uint8_t GIEBitValue = INTCONbits.GIE;
 18384                           
 18385                           ;incstack = 0
 18386  003DD0  0E00               	movlw	0
 18387  003DD2  BEF2               	btfsc	intcon,7,c	;volatile
 18388  003DD4  0E01               	movlw	1
 18389  003DD6  6E1C               	movwf	FLASH_EraseBlock@GIEBitValue,c
 18390                           
 18391                           ;memory.c: 148: TBLPTRU = (uint8_t)((baseAddr & 0x00FF0000) >> 16);
 18392  003DD8  C01A  FFF8         	movff	FLASH_EraseBlock@baseAddr+2,tblptru	;volatile
 18393                           
 18394                           ;memory.c: 149: TBLPTRH = (uint8_t)((baseAddr & 0x0000FF00)>> 8);
 18395  003DDC  C019  FFF7         	movff	FLASH_EraseBlock@baseAddr+1,tblptrh	;volatile
 18396                           
 18397                           ;memory.c: 150: TBLPTRL = (uint8_t)(baseAddr & 0x000000FF);
 18398  003DE0  C018  FFF6         	movff	FLASH_EraseBlock@baseAddr,tblptrl	;volatile
 18399                           
 18400                           ;memory.c: 152: EECON1bits.EEPGD = 1;
 18401  003DE4  8EA6               	bsf	4006,7,c	;volsfr
 18402                           
 18403                           ;memory.c: 153: EECON1bits.CFGS = 0;
 18404  003DE6  9CA6               	bcf	4006,6,c	;volsfr
 18405                           
 18406                           ;memory.c: 154: EECON1bits.WREN = 1;
 18407  003DE8  84A6               	bsf	4006,2,c	;volsfr
 18408                           
 18409                           ;memory.c: 155: EECON1bits.FREE = 1;
 18410  003DEA  88A6               	bsf	4006,4,c	;volsfr
 18411                           
 18412                           ;memory.c: 156: INTCONbits.GIE = 0;
 18413  003DEC  9EF2               	bcf	intcon,7,c	;volatile
 18414                           
 18415                           ;memory.c: 157: EECON2 = 0x55;
 18416  003DEE  0E55               	movlw	85
 18417  003DF0  6EA7               	movwf	4007,c	;volsfr
 18418                           
 18419                           ;memory.c: 158: EECON2 = 0xAA;
 18420  003DF2  0EAA               	movlw	170
 18421  003DF4  6EA7               	movwf	4007,c	;volsfr
 18422                           
 18423                           ;memory.c: 159: EECON1bits.WR = 1;
 18424  003DF6  82A6               	bsf	4006,1,c	;volsfr
 18425                           
 18426                           ;memory.c: 160: INTCONbits.GIE = GIEBitValue;
 18427  003DF8  B01C               	btfsc	FLASH_EraseBlock@GIEBitValue,0,c
 18428  003DFA  D002               	bra	u8115
 18429  003DFC  9EF2               	bcf	intcon,7,c	;volatile
 18430  003DFE  D001               	bra	u8116
 18431  003E00                     u8115:
 18432  003E00  8EF2               	bsf	intcon,7,c	;volatile
 18433  003E02                     u8116:
 18434  003E02  0012               	return		;funcret
 18435  003E04                     __end_of_FLASH_EraseBlock:
 18436                           	opt stack 0
 18437                           tosu	equ	0xFFF
 18438                           tosh	equ	0xFFE
 18439                           tosl	equ	0xFFD
 18440                           pclath	equ	0xFFA
 18441                           tblptru	equ	0xFF8
 18442                           tblptrh	equ	0xFF7
 18443                           tblptrl	equ	0xFF6
 18444                           tablat	equ	0xFF5
 18445                           prodh	equ	0xFF4
 18446                           prodl	equ	0xFF3
 18447                           intcon	equ	0xFF2
 18448                           intcon2	equ	0xFF1
 18449                           postinc0	equ	0xFEE
 18450                           plusw0	equ	0xFEB
 18451                           wreg	equ	0xFE8
 18452                           indf1	equ	0xFE7
 18453                           postdec1	equ	0xFE5
 18454                           fsr1h	equ	0xFE2
 18455                           fsr1l	equ	0xFE1
 18456                           indf2	equ	0xFDF
 18457                           postinc2	equ	0xFDE
 18458                           postdec2	equ	0xFDD
 18459                           plusw2	equ	0xFDB
 18460                           fsr2h	equ	0xFDA
 18461                           fsr2l	equ	0xFD9
 18462                           status	equ	0xFD8
 18463                           
 18464 ;; *************** function _FLASH_IsWriteDone *****************
 18465 ;; Defined at:
 18466 ;;		line 189 in file "mcc_generated_files/memory.c"
 18467 ;; Parameters:    Size  Location     Type
 18468 ;;		None
 18469 ;; Auto vars:     Size  Location     Type
 18470 ;;		None
 18471 ;; Return value:  Size  Location     Type
 18472 ;;                  1    wreg      unsigned char 
 18473 ;; Registers used:
 18474 ;;		wreg
 18475 ;; Tracked objects:
 18476 ;;		On entry : 0/0
 18477 ;;		On exit  : 0/0
 18478 ;;		Unchanged: 0/0
 18479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18480 ;;      Params:         0       0       0       0       0       0       0
 18481 ;;      Locals:         0       0       0       0       0       0       0
 18482 ;;      Temps:          0       0       0       0       0       0       0
 18483 ;;      Totals:         0       0       0       0       0       0       0
 18484 ;;Total ram usage:        0 bytes
 18485 ;; Hardware stack levels used:    1
 18486 ;; Hardware stack levels required when called:    4
 18487 ;; This function calls:
 18488 ;;		Nothing
 18489 ;; This function is called by:
 18490 ;;		_FlashSampleWrite
 18491 ;;		_FlashReadUart
 18492 ;; This function uses a non-reentrant model
 18493 ;;
 18494                           
 18495                           	psect	text106
 18496  0041E2                     __ptext106:
 18497                           	opt stack 0
 18498  0041E2                     _FLASH_IsWriteDone:
 18499                           	opt stack 23
 18500                           
 18501                           ;memory.c: 191: return (EECON1bits.WR == 0);
 18502                           
 18503                           ;incstack = 0
 18504  0041E2  A2A6               	btfss	4006,1,c	;volsfr
 18505  0041E4  D001               	goto	u7901
 18506  0041E6  D002               	goto	u7900
 18507  0041E8                     u7901:
 18508  0041E8  0E01               	movlw	1
 18509  0041EA  0012               	return	
 18510  0041EC                     u7900:
 18511  0041EC  0E00               	movlw	0
 18512  0041EE  0012               	return	
 18513  0041F0                     __end_of_FLASH_IsWriteDone:
 18514                           	opt stack 0
 18515                           tosu	equ	0xFFF
 18516                           tosh	equ	0xFFE
 18517                           tosl	equ	0xFFD
 18518                           pclath	equ	0xFFA
 18519                           tblptru	equ	0xFF8
 18520                           tblptrh	equ	0xFF7
 18521                           tblptrl	equ	0xFF6
 18522                           tablat	equ	0xFF5
 18523                           prodh	equ	0xFF4
 18524                           prodl	equ	0xFF3
 18525                           intcon	equ	0xFF2
 18526                           intcon2	equ	0xFF1
 18527                           postinc0	equ	0xFEE
 18528                           plusw0	equ	0xFEB
 18529                           wreg	equ	0xFE8
 18530                           indf1	equ	0xFE7
 18531                           postdec1	equ	0xFE5
 18532                           fsr1h	equ	0xFE2
 18533                           fsr1l	equ	0xFE1
 18534                           indf2	equ	0xFDF
 18535                           postinc2	equ	0xFDE
 18536                           postdec2	equ	0xFDD
 18537                           plusw2	equ	0xFDB
 18538                           fsr2h	equ	0xFDA
 18539                           fsr2l	equ	0xFD9
 18540                           status	equ	0xFD8
 18541                           
 18542 ;; *************** function _ADC_GetConversion *****************
 18543 ;; Defined at:
 18544 ;;		line 106 in file "mcc_generated_files/adc.c"
 18545 ;; Parameters:    Size  Location     Type
 18546 ;;  channel         1    wreg     enum E6975
 18547 ;; Auto vars:     Size  Location     Type
 18548 ;;  channel         1   27[COMRAM] enum E6975
 18549 ;; Return value:  Size  Location     Type
 18550 ;;                  2   23[COMRAM] unsigned int 
 18551 ;; Registers used:
 18552 ;;		wreg, status,2, status,0
 18553 ;; Tracked objects:
 18554 ;;		On entry : 0/0
 18555 ;;		On exit  : 0/0
 18556 ;;		Unchanged: 0/0
 18557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18558 ;;      Params:         2       0       0       0       0       0       0
 18559 ;;      Locals:         1       0       0       0       0       0       0
 18560 ;;      Temps:          2       0       0       0       0       0       0
 18561 ;;      Totals:         5       0       0       0       0       0       0
 18562 ;;Total ram usage:        5 bytes
 18563 ;; Hardware stack levels used:    1
 18564 ;; Hardware stack levels required when called:    4
 18565 ;; This function calls:
 18566 ;;		Nothing
 18567 ;; This function is called by:
 18568 ;;		_AdcConvert
 18569 ;; This function uses a non-reentrant model
 18570 ;;
 18571                           
 18572                           	psect	text107
 18573  003E64                     __ptext107:
 18574                           	opt stack 0
 18575  003E64                     _ADC_GetConversion:
 18576                           	opt stack 25
 18577                           
 18578                           ;incstack = 0
 18579                           ;ADC_GetConversion@channel stored from wreg
 18580  003E64  6E1C               	movwf	ADC_GetConversion@channel,c
 18581                           
 18582                           ;adc.c: 109: ADCON0bits.CHS = channel;
 18583  003E66  C01C  F01A         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
 18584  003E6A  461A               	rlncf	??_ADC_GetConversion,f,c
 18585  003E6C  461A               	rlncf	??_ADC_GetConversion,f,c
 18586  003E6E  50C2               	movf	4034,w,c	;volatile
 18587  003E70  181A               	xorwf	??_ADC_GetConversion,w,c
 18588  003E72  0B83               	andlw	-125
 18589  003E74  181A               	xorwf	??_ADC_GetConversion,w,c
 18590  003E76  6EC2               	movwf	4034,c	;volatile
 18591                           
 18592                           ;adc.c: 112: ADCON0bits.ADON = 1;
 18593  003E78  80C2               	bsf	4034,0,c	;volatile
 18594                           
 18595                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
 18596  003E7A  82C2               	bsf	4034,1,c	;volatile
 18597  003E7C                     
 18598                           ;adc.c: 119: {
 18599  003E7C  B2C2               	btfsc	4034,1,c	;volatile
 18600  003E7E  D7FE               	goto	l1161
 18601                           
 18602                           ;adc.c: 120: }
 18603                           ;adc.c: 122: return ((ADRESH << 8) + ADRESL);
 18604  003E80  50C4               	movf	4036,w,c	;volatile
 18605  003E82  6E1B               	movwf	(??_ADC_GetConversion+1)& (0+255),c
 18606  003E84  6A1A               	clrf	??_ADC_GetConversion& (0+255),c
 18607  003E86  50C3               	movf	4035,w,c	;volatile
 18608  003E88  241A               	addwf	??_ADC_GetConversion,w,c
 18609  003E8A  6E18               	movwf	?_ADC_GetConversion,c
 18610  003E8C  0E00               	movlw	0
 18611  003E8E  201B               	addwfc	??_ADC_GetConversion+1,w,c
 18612  003E90  6E19               	movwf	?_ADC_GetConversion+1,c
 18613  003E92  0012               	return	
 18614  003E94                     __end_of_ADC_GetConversion:
 18615                           	opt stack 0
 18616                           tosu	equ	0xFFF
 18617                           tosh	equ	0xFFE
 18618                           tosl	equ	0xFFD
 18619                           pclath	equ	0xFFA
 18620                           tblptru	equ	0xFF8
 18621                           tblptrh	equ	0xFF7
 18622                           tblptrl	equ	0xFF6
 18623                           tablat	equ	0xFF5
 18624                           prodh	equ	0xFF4
 18625                           prodl	equ	0xFF3
 18626                           intcon	equ	0xFF2
 18627                           intcon2	equ	0xFF1
 18628                           postinc0	equ	0xFEE
 18629                           plusw0	equ	0xFEB
 18630                           wreg	equ	0xFE8
 18631                           indf1	equ	0xFE7
 18632                           postdec1	equ	0xFE5
 18633                           fsr1h	equ	0xFE2
 18634                           fsr1l	equ	0xFE1
 18635                           indf2	equ	0xFDF
 18636                           postinc2	equ	0xFDE
 18637                           postdec2	equ	0xFDD
 18638                           plusw2	equ	0xFDB
 18639                           fsr2h	equ	0xFDA
 18640                           fsr2l	equ	0xFD9
 18641                           status	equ	0xFD8
 18642                           
 18643 ;; *************** function _INTERRUPT_InterruptManager *****************
 18644 ;; Defined at:
 18645 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 18646 ;; Parameters:    Size  Location     Type
 18647 ;;		None
 18648 ;; Auto vars:     Size  Location     Type
 18649 ;;		None
 18650 ;; Return value:  Size  Location     Type
 18651 ;;                  1    wreg      void 
 18652 ;; Registers used:
 18653 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 18654 ;; Tracked objects:
 18655 ;;		On entry : 0/0
 18656 ;;		On exit  : 0/0
 18657 ;;		Unchanged: 0/0
 18658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18659 ;;      Params:         0       0       0       0       0       0       0
 18660 ;;      Locals:         0       0       0       0       0       0       0
 18661 ;;      Temps:         18       0       0       0       0       0       0
 18662 ;;      Totals:        18       0       0       0       0       0       0
 18663 ;;Total ram usage:       18 bytes
 18664 ;; Hardware stack levels used:    1
 18665 ;; Hardware stack levels required when called:    3
 18666 ;; This function calls:
 18667 ;;		_EUSART1_Receive_ISR
 18668 ;;		_EUSART1_Transmit_ISR
 18669 ;;		_MEMORY_ISR
 18670 ;;		_PIN_MANAGER_IOC
 18671 ;;		_TMR0_ISR
 18672 ;; This function is called by:
 18673 ;;		Interrupt level 2
 18674 ;; This function uses a non-reentrant model
 18675 ;;
 18676                           
 18677                           	psect	intcode
 18678  000008                     __pintcode:
 18679                           	opt stack 0
 18680  000008                     _INTERRUPT_InterruptManager:
 18681                           	opt stack 17
 18682                           
 18683                           ;incstack = 0
 18684  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 18685  00000A  CFFA F006          	movff	pclath,??_INTERRUPT_InterruptManager
 18686  00000E  CFFB F007          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 18687  000012  CFE9 F008          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 18688  000016  CFEA F009          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 18689  00001A  CFE1 F00A          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 18690  00001E  CFE2 F00B          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 18691  000022  CFD9 F00C          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 18692  000026  CFDA F00D          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 18693  00002A  CFF3 F00E          	movff	prodl,??_INTERRUPT_InterruptManager+8
 18694  00002E  CFF4 F00F          	movff	prodh,??_INTERRUPT_InterruptManager+9
 18695  000032  CFF6 F010          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 18696  000036  CFF7 F011          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 18697  00003A  CFF8 F012          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 18698  00003E  CFF5 F013          	movff	tablat,??_INTERRUPT_InterruptManager+13
 18699  000042  C048  F014         	movff	btemp,??_INTERRUPT_InterruptManager+14
 18700  000046  C049  F015         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 18701  00004A  C04A  F016         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 18702  00004E  C04B  F017         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 18703                           
 18704                           ;interrupt_manager.c: 60: if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
 18705  000052  B6F2               	btfsc	intcon,3,c	;volatile
 18706  000054  A0F2               	btfss	intcon,0,c	;volatile
 18707  000056  D003               	goto	i2l842
 18708                           
 18709                           ;interrupt_manager.c: 61: {
 18710                           ;interrupt_manager.c: 62: PIN_MANAGER_IOC();
 18711  000058  ECD4  F020         	call	_PIN_MANAGER_IOC	;wreg free
 18712                           
 18713                           ;interrupt_manager.c: 63: }
 18714  00005C  D019               	goto	i2l851
 18715  00005E                     i2l842:
 18716                           
 18717                           ;interrupt_manager.c: 64: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 18718  00005E  BAF2               	btfsc	intcon,5,c	;volatile
 18719  000060  A4F2               	btfss	intcon,2,c	;volatile
 18720  000062  D003               	goto	i2l844
 18721                           
 18722                           ;interrupt_manager.c: 65: {
 18723                           ;interrupt_manager.c: 66: TMR0_ISR();
 18724  000064  EC11  F017         	call	_TMR0_ISR	;wreg free
 18725                           
 18726                           ;interrupt_manager.c: 67: }
 18727  000068  D013               	goto	i2l851
 18728  00006A                     i2l844:
 18729                           
 18730                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1)
 18731  00006A  ACF2               	btfss	intcon,6,c	;volatile
 18732  00006C  D011               	goto	i2l851
 18733                           
 18734                           ;interrupt_manager.c: 69: {
 18735                           ;interrupt_manager.c: 70: if(PIE2bits.EEIE == 1 && PIR2bits.EEIF == 1)
 18736  00006E  B8A0               	btfsc	4000,4,c	;volatile
 18737  000070  A8A1               	btfss	4001,4,c	;volatile
 18738  000072  D003               	goto	i2l847
 18739                           
 18740                           ;interrupt_manager.c: 71: {
 18741                           ;interrupt_manager.c: 72: MEMORY_ISR();
 18742  000074  EC21  F021         	call	_MEMORY_ISR	;wreg free
 18743                           
 18744                           ;interrupt_manager.c: 73: }
 18745  000078  D00B               	goto	i2l851
 18746  00007A                     i2l847:
 18747                           
 18748                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 18749  00007A  B89D               	btfsc	3997,4,c	;volatile
 18750  00007C  A89E               	btfss	3998,4,c	;volatile
 18751  00007E  D003               	goto	i2l849
 18752                           
 18753                           ;interrupt_manager.c: 75: {
 18754                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
 18755  000080  EC99  F01E         	call	_EUSART1_Transmit_ISR	;wreg free
 18756                           
 18757                           ;interrupt_manager.c: 77: }
 18758  000084  D005               	goto	i2l851
 18759  000086                     i2l849:
 18760                           
 18761                           ;interrupt_manager.c: 78: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 18762  000086  BA9D               	btfsc	3997,5,c	;volatile
 18763  000088  AA9E               	btfss	3998,5,c	;volatile
 18764  00008A  D002               	goto	i2l851
 18765                           
 18766                           ;interrupt_manager.c: 79: {
 18767                           ;interrupt_manager.c: 80: EUSART1_Receive_ISR();
 18768  00008C  EC4A  F01F         	call	_EUSART1_Receive_ISR	;wreg free
 18769  000090                     i2l851:
 18770                           
 18771                           ;interrupt_manager.c: 87: else
 18772                           ;interrupt_manager.c: 88: {
 18773                           
 18774                           ;interrupt_manager.c: 85: }
 18775                           ;interrupt_manager.c: 86: }
 18776                           
 18777                           ;interrupt_manager.c: 82: else
 18778                           ;interrupt_manager.c: 83: {
 18779  000090  C017  F04B         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 18780  000094  C016  F04A         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 18781  000098  C015  F049         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 18782  00009C  C014  F048         	movff	??_INTERRUPT_InterruptManager+14,btemp
 18783  0000A0  C013  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 18784  0000A4  C012  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 18785  0000A8  C011  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 18786  0000AC  C010  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 18787  0000B0  C00F  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 18788  0000B4  C00E  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 18789  0000B8  C00D  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 18790  0000BC  C00C  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 18791  0000C0  C00B  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 18792  0000C4  C00A  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 18793  0000C8  C009  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 18794  0000CC  C008  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 18795  0000D0  C007  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 18796  0000D4  C006  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 18797  0000D8  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 18798  0000DA  0011               	retfie		f
 18799  0000DC                     __end_of_INTERRUPT_InterruptManager:
 18800                           	opt stack 0
 18801                           tosu	equ	0xFFF
 18802                           tosh	equ	0xFFE
 18803                           tosl	equ	0xFFD
 18804                           pclatu	equ	0xFFB
 18805                           pclath	equ	0xFFA
 18806                           tblptru	equ	0xFF8
 18807                           tblptrh	equ	0xFF7
 18808                           tblptrl	equ	0xFF6
 18809                           tablat	equ	0xFF5
 18810                           prodh	equ	0xFF4
 18811                           prodl	equ	0xFF3
 18812                           intcon	equ	0xFF2
 18813                           intcon2	equ	0xFF1
 18814                           postinc0	equ	0xFEE
 18815                           plusw0	equ	0xFEB
 18816                           fsr0h	equ	0xFEA
 18817                           fsr0l	equ	0xFE9
 18818                           wreg	equ	0xFE8
 18819                           indf1	equ	0xFE7
 18820                           postdec1	equ	0xFE5
 18821                           fsr1h	equ	0xFE2
 18822                           fsr1l	equ	0xFE1
 18823                           indf2	equ	0xFDF
 18824                           postinc2	equ	0xFDE
 18825                           postdec2	equ	0xFDD
 18826                           plusw2	equ	0xFDB
 18827                           fsr2h	equ	0xFDA
 18828                           fsr2l	equ	0xFD9
 18829                           status	equ	0xFD8
 18830                           
 18831 ;; *************** function _TMR0_ISR *****************
 18832 ;; Defined at:
 18833 ;;		line 132 in file "mcc_generated_files/tmr0.c"
 18834 ;; Parameters:    Size  Location     Type
 18835 ;;		None
 18836 ;; Auto vars:     Size  Location     Type
 18837 ;;		None
 18838 ;; Return value:  Size  Location     Type
 18839 ;;                  1    wreg      void 
 18840 ;; Registers used:
 18841 ;;		wreg, status,2, status,0, cstack
 18842 ;; Tracked objects:
 18843 ;;		On entry : 0/0
 18844 ;;		On exit  : 0/0
 18845 ;;		Unchanged: 0/0
 18846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18847 ;;      Params:         0       0       0       0       0       0       0
 18848 ;;      Locals:         0       0       0       0       0       0       0
 18849 ;;      Temps:          0       0       0       0       0       0       0
 18850 ;;      Totals:         0       0       0       0       0       0       0
 18851 ;;Total ram usage:        0 bytes
 18852 ;; Hardware stack levels used:    1
 18853 ;; Hardware stack levels required when called:    1
 18854 ;; This function calls:
 18855 ;;		___lwmod
 18856 ;; This function is called by:
 18857 ;;		_INTERRUPT_InterruptManager
 18858 ;; This function uses a non-reentrant model
 18859 ;;
 18860                           
 18861                           	psect	text109
 18862  002E22                     __ptext109:
 18863                           	opt stack 0
 18864  002E22                     _TMR0_ISR:
 18865                           	opt stack 18
 18866                           
 18867                           ;tmr0.c: 134: static volatile uint16_t CountCallBack = 0;
 18868                           ;tmr0.c: 137: INTCONbits.TMR0IF = 0;
 18869                           
 18870                           ;incstack = 0
 18871  002E22  94F2               	bcf	intcon,2,c	;volatile
 18872                           
 18873                           ;tmr0.c: 141: TMR0H = timer0ReloadVal >> 8;
 18874  002E24  5046               	movf	_timer0ReloadVal+1,w,c	;volatile
 18875  002E26  6ED7               	movwf	4055,c	;volatile
 18876                           
 18877                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal;
 18878  002E28  C045  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 18879                           
 18880                           ;tmr0.c: 144: CountCallBack++;
 18881  002E2C  4A35               	infsnz	TMR0_ISR@CountCallBack,f,c	;volatile
 18882  002E2E  2A36               	incf	TMR0_ISR@CountCallBack+1,f,c	;volatile
 18883                           
 18884                           ;tmr0.c: 145: if ((CountCallBack % 240) == 0)
 18885  002E30  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 18886  002E34  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 18887  002E38  0E00               	movlw	0
 18888  002E3A  6E04               	movwf	___lwmod@divisor+1,c
 18889  002E3C  0EF0               	movlw	240
 18890  002E3E  6E03               	movwf	___lwmod@divisor,c
 18891  002E40  EC5B  F01D         	call	___lwmod	;wreg free
 18892  002E44  5001               	movf	?___lwmod,w,c
 18893  002E46  1002               	iorwf	?___lwmod+1,w,c
 18894  002E48  A4D8               	btfss	status,2,c
 18895  002E4A  D003               	goto	i2l1115
 18896                           
 18897                           ;tmr0.c: 146: {
 18898                           ;tmr0.c: 147: Timer0_SynthLd = 1;
 18899  002E4C  0E01               	movlw	1
 18900  002E4E  0100               	movlb	0	; () banked
 18901  002E50  6FFC               	movwf	_Timer0_SynthLd& (0+255),b	;volatile
 18902  002E52                     i2l1115:
 18903                           
 18904                           ;tmr0.c: 148: }
 18905                           ;tmr0.c: 149: if ((CountCallBack % 100) == 0)
 18906                           
 18907                           ; BSR set to: 0
 18908  002E52  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 18909  002E56  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 18910  002E5A  0E00               	movlw	0
 18911  002E5C  6E04               	movwf	___lwmod@divisor+1,c
 18912  002E5E  0E64               	movlw	100
 18913  002E60  6E03               	movwf	___lwmod@divisor,c
 18914  002E62  EC5B  F01D         	call	___lwmod	;wreg free
 18915  002E66  5001               	movf	?___lwmod,w,c
 18916  002E68  1002               	iorwf	?___lwmod+1,w,c
 18917  002E6A  A4D8               	btfss	status,2,c
 18918  002E6C  D003               	goto	i2l1116
 18919                           
 18920                           ;tmr0.c: 150: {
 18921                           ;tmr0.c: 151: Timer0_Sampling = 1;
 18922  002E6E  0E01               	movlw	1
 18923  002E70  0100               	movlb	0	; () banked
 18924  002E72  6FFB               	movwf	_Timer0_Sampling& (0+255),b	;volatile
 18925  002E74                     i2l1116:
 18926                           
 18927                           ;tmr0.c: 152: }
 18928                           ;tmr0.c: 153: if ((CountCallBack % 200) == 0)
 18929                           
 18930                           ; BSR set to: 0
 18931  002E74  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 18932  002E78  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 18933  002E7C  0E00               	movlw	0
 18934  002E7E  6E04               	movwf	___lwmod@divisor+1,c
 18935  002E80  0EC8               	movlw	200
 18936  002E82  6E03               	movwf	___lwmod@divisor,c
 18937  002E84  EC5B  F01D         	call	___lwmod	;wreg free
 18938  002E88  5001               	movf	?___lwmod,w,c
 18939  002E8A  1002               	iorwf	?___lwmod+1,w,c
 18940  002E8C  A4D8               	btfss	status,2,c
 18941  002E8E  D003               	goto	i2l1117
 18942                           
 18943                           ;tmr0.c: 154: {
 18944                           ;tmr0.c: 155: Timer0_KeepAlive = 1;
 18945  002E90  0E01               	movlw	1
 18946  002E92  0100               	movlb	0	; () banked
 18947  002E94  6FFA               	movwf	_Timer0_KeepAlive& (0+255),b	;volatile
 18948  002E96                     i2l1117:
 18949                           
 18950                           ;tmr0.c: 156: }
 18951                           ;tmr0.c: 157: if ((CountCallBack % 10) == 0)
 18952                           
 18953                           ; BSR set to: 0
 18954  002E96  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 18955  002E9A  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 18956  002E9E  0E00               	movlw	0
 18957  002EA0  6E04               	movwf	___lwmod@divisor+1,c
 18958  002EA2  0E0A               	movlw	10
 18959  002EA4  6E03               	movwf	___lwmod@divisor,c
 18960  002EA6  EC5B  F01D         	call	___lwmod	;wreg free
 18961  002EAA  5001               	movf	?___lwmod,w,c
 18962  002EAC  1002               	iorwf	?___lwmod+1,w,c
 18963  002EAE  A4D8               	btfss	status,2,c
 18964  002EB0  D003               	goto	i2l1118
 18965                           
 18966                           ;tmr0.c: 158: {
 18967                           ;tmr0.c: 159: Timer0_OneSec = 1;
 18968  002EB2  0E01               	movlw	1
 18969  002EB4  0100               	movlb	0	; () banked
 18970  002EB6  6FF9               	movwf	_Timer0_OneSec& (0+255),b	;volatile
 18971  002EB8                     i2l1118:
 18972                           
 18973                           ;tmr0.c: 160: }
 18974                           ;tmr0.c: 161: if(CountCallBack >= 35000)
 18975                           
 18976                           ; BSR set to: 0
 18977  002EB8  0EB8               	movlw	184
 18978  002EBA  5C35               	subwf	TMR0_ISR@CountCallBack,w,c	;volatile
 18979  002EBC  0E88               	movlw	136
 18980  002EBE  5836               	subwfb	TMR0_ISR@CountCallBack+1,w,c	;volatile
 18981  002EC0  A0D8               	btfss	status,0,c
 18982  002EC2  0012               	return	
 18983                           
 18984                           ;tmr0.c: 163: {
 18985                           ;tmr0.c: 165: CountCallBack = 0;
 18986  002EC4  0E00               	movlw	0
 18987  002EC6  6E36               	movwf	TMR0_ISR@CountCallBack+1,c	;volatile
 18988  002EC8  0E00               	movlw	0
 18989  002ECA  6E35               	movwf	TMR0_ISR@CountCallBack,c	;volatile
 18990  002ECC  0012               	return	
 18991  002ECE                     __end_of_TMR0_ISR:
 18992                           	opt stack 0
 18993                           tosu	equ	0xFFF
 18994                           tosh	equ	0xFFE
 18995                           tosl	equ	0xFFD
 18996                           pclatu	equ	0xFFB
 18997                           pclath	equ	0xFFA
 18998                           tblptru	equ	0xFF8
 18999                           tblptrh	equ	0xFF7
 19000                           tblptrl	equ	0xFF6
 19001                           tablat	equ	0xFF5
 19002                           prodh	equ	0xFF4
 19003                           prodl	equ	0xFF3
 19004                           intcon	equ	0xFF2
 19005                           intcon2	equ	0xFF1
 19006                           postinc0	equ	0xFEE
 19007                           plusw0	equ	0xFEB
 19008                           fsr0h	equ	0xFEA
 19009                           fsr0l	equ	0xFE9
 19010                           wreg	equ	0xFE8
 19011                           indf1	equ	0xFE7
 19012                           postdec1	equ	0xFE5
 19013                           fsr1h	equ	0xFE2
 19014                           fsr1l	equ	0xFE1
 19015                           indf2	equ	0xFDF
 19016                           postinc2	equ	0xFDE
 19017                           postdec2	equ	0xFDD
 19018                           plusw2	equ	0xFDB
 19019                           fsr2h	equ	0xFDA
 19020                           fsr2l	equ	0xFD9
 19021                           status	equ	0xFD8
 19022                           
 19023 ;; *************** function ___lwmod *****************
 19024 ;; Defined at:
 19025 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 19026 ;; Parameters:    Size  Location     Type
 19027 ;;  dividend        2    0[COMRAM] unsigned int 
 19028 ;;  divisor         2    2[COMRAM] unsigned int 
 19029 ;; Auto vars:     Size  Location     Type
 19030 ;;  counter         1    4[COMRAM] unsigned char 
 19031 ;; Return value:  Size  Location     Type
 19032 ;;                  2    0[COMRAM] unsigned int 
 19033 ;; Registers used:
 19034 ;;		wreg, status,2, status,0
 19035 ;; Tracked objects:
 19036 ;;		On entry : 0/0
 19037 ;;		On exit  : 0/0
 19038 ;;		Unchanged: 0/0
 19039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19040 ;;      Params:         4       0       0       0       0       0       0
 19041 ;;      Locals:         1       0       0       0       0       0       0
 19042 ;;      Temps:          0       0       0       0       0       0       0
 19043 ;;      Totals:         5       0       0       0       0       0       0
 19044 ;;Total ram usage:        5 bytes
 19045 ;; Hardware stack levels used:    1
 19046 ;; This function calls:
 19047 ;;		Nothing
 19048 ;; This function is called by:
 19049 ;;		_TMR0_ISR
 19050 ;; This function uses a non-reentrant model
 19051 ;;
 19052                           
 19053                           	psect	text110
 19054  003AB6                     __ptext110:
 19055                           	opt stack 0
 19056  003AB6                     ___lwmod:
 19057                           	opt stack 18
 19058                           
 19059                           ;incstack = 0
 19060  003AB6  5003               	movf	___lwmod@divisor,w,c
 19061  003AB8  1004               	iorwf	___lwmod@divisor+1,w,c
 19062  003ABA  B4D8               	btfsc	status,2,c
 19063  003ABC  D018               	goto	i2l2010
 19064  003ABE  0E01               	movlw	1
 19065  003AC0  6E05               	movwf	___lwmod@counter,c
 19066  003AC2  D004               	goto	i2l2005
 19067  003AC4  90D8               	bcf	status,0,c
 19068  003AC6  3603               	rlcf	___lwmod@divisor,f,c
 19069  003AC8  3604               	rlcf	___lwmod@divisor+1,f,c
 19070  003ACA  2A05               	incf	___lwmod@counter,f,c
 19071  003ACC                     i2l2005:
 19072  003ACC  AE04               	btfss	___lwmod@divisor+1,7,c
 19073  003ACE  D7FA               	goto	i2l2006
 19074  003AD0                     i2u564_40:
 19075  003AD0  5003               	movf	___lwmod@divisor,w,c
 19076  003AD2  5C01               	subwf	___lwmod@dividend,w,c
 19077  003AD4  5004               	movf	___lwmod@divisor+1,w,c
 19078  003AD6  5802               	subwfb	___lwmod@dividend+1,w,c
 19079  003AD8  A0D8               	btfss	status,0,c
 19080  003ADA  D004               	goto	i2l2009
 19081  003ADC  5003               	movf	___lwmod@divisor,w,c
 19082  003ADE  5E01               	subwf	___lwmod@dividend,f,c
 19083  003AE0  5004               	movf	___lwmod@divisor+1,w,c
 19084  003AE2  5A02               	subwfb	___lwmod@dividend+1,f,c
 19085  003AE4                     i2l2009:
 19086  003AE4  90D8               	bcf	status,0,c
 19087  003AE6  3204               	rrcf	___lwmod@divisor+1,f,c
 19088  003AE8  3203               	rrcf	___lwmod@divisor,f,c
 19089  003AEA  2E05               	decfsz	___lwmod@counter,f,c
 19090  003AEC  D7F1               	goto	i2u564_40
 19091  003AEE                     i2l2010:
 19092  003AEE  C001  F001         	movff	___lwmod@dividend,?___lwmod
 19093  003AF2  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
 19094  003AF6  0012               	return		;funcret
 19095  003AF8                     __end_of___lwmod:
 19096                           	opt stack 0
 19097                           tosu	equ	0xFFF
 19098                           tosh	equ	0xFFE
 19099                           tosl	equ	0xFFD
 19100                           pclatu	equ	0xFFB
 19101                           pclath	equ	0xFFA
 19102                           tblptru	equ	0xFF8
 19103                           tblptrh	equ	0xFF7
 19104                           tblptrl	equ	0xFF6
 19105                           tablat	equ	0xFF5
 19106                           prodh	equ	0xFF4
 19107                           prodl	equ	0xFF3
 19108                           intcon	equ	0xFF2
 19109                           intcon2	equ	0xFF1
 19110                           postinc0	equ	0xFEE
 19111                           plusw0	equ	0xFEB
 19112                           fsr0h	equ	0xFEA
 19113                           fsr0l	equ	0xFE9
 19114                           wreg	equ	0xFE8
 19115                           indf1	equ	0xFE7
 19116                           postdec1	equ	0xFE5
 19117                           fsr1h	equ	0xFE2
 19118                           fsr1l	equ	0xFE1
 19119                           indf2	equ	0xFDF
 19120                           postinc2	equ	0xFDE
 19121                           postdec2	equ	0xFDD
 19122                           plusw2	equ	0xFDB
 19123                           fsr2h	equ	0xFDA
 19124                           fsr2l	equ	0xFD9
 19125                           status	equ	0xFD8
 19126                           
 19127 ;; *************** function _PIN_MANAGER_IOC *****************
 19128 ;; Defined at:
 19129 ;;		line 108 in file "mcc_generated_files/pin_manager.c"
 19130 ;; Parameters:    Size  Location     Type
 19131 ;;		None
 19132 ;; Auto vars:     Size  Location     Type
 19133 ;;		None
 19134 ;; Return value:  Size  Location     Type
 19135 ;;                  1    wreg      void 
 19136 ;; Registers used:
 19137 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 19138 ;; Tracked objects:
 19139 ;;		On entry : 0/0
 19140 ;;		On exit  : 0/0
 19141 ;;		Unchanged: 0/0
 19142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19143 ;;      Params:         0       0       0       0       0       0       0
 19144 ;;      Locals:         0       0       0       0       0       0       0
 19145 ;;      Temps:          0       0       0       0       0       0       0
 19146 ;;      Totals:         0       0       0       0       0       0       0
 19147 ;;Total ram usage:        0 bytes
 19148 ;; Hardware stack levels used:    1
 19149 ;; Hardware stack levels required when called:    2
 19150 ;; This function calls:
 19151 ;;		_IOCB4_ISR
 19152 ;;		_IOCB5_ISR
 19153 ;; This function is called by:
 19154 ;;		_INTERRUPT_InterruptManager
 19155 ;; This function uses a non-reentrant model
 19156 ;;
 19157                           
 19158                           	psect	text111
 19159  0041A8                     __ptext111:
 19160                           	opt stack 0
 19161  0041A8                     _PIN_MANAGER_IOC:
 19162                           	opt stack 17
 19163                           
 19164                           ;pin_manager.c: 111: if(IOCBbits.IOCB4 == 1)
 19165                           
 19166                           ;incstack = 0
 19167  0041A8  B862               	btfsc	3938,4,c	;volatile
 19168                           
 19169                           ;pin_manager.c: 112: {
 19170                           ;pin_manager.c: 113: IOCB4_ISR();
 19171  0041AA  EC0C  F020         	call	_IOCB4_ISR	;wreg free
 19172                           
 19173                           ;pin_manager.c: 114: }
 19174                           ;pin_manager.c: 116: if(IOCBbits.IOCB5 == 1)
 19175  0041AE  BA62               	btfsc	3938,5,c	;volatile
 19176                           
 19177                           ;pin_manager.c: 117: {
 19178                           ;pin_manager.c: 118: IOCB5_ISR();
 19179  0041B0  ECFB  F01F         	call	_IOCB5_ISR	;wreg free
 19180                           
 19181                           ;pin_manager.c: 119: }
 19182                           ;pin_manager.c: 122: INTCONbits.RBIF = 0;
 19183  0041B4  90F2               	bcf	intcon,0,c	;volatile
 19184  0041B6  0012               	return		;funcret
 19185  0041B8                     __end_of_PIN_MANAGER_IOC:
 19186                           	opt stack 0
 19187                           tosu	equ	0xFFF
 19188                           tosh	equ	0xFFE
 19189                           tosl	equ	0xFFD
 19190                           pclatu	equ	0xFFB
 19191                           pclath	equ	0xFFA
 19192                           tblptru	equ	0xFF8
 19193                           tblptrh	equ	0xFF7
 19194                           tblptrl	equ	0xFF6
 19195                           tablat	equ	0xFF5
 19196                           prodh	equ	0xFF4
 19197                           prodl	equ	0xFF3
 19198                           intcon	equ	0xFF2
 19199                           intcon2	equ	0xFF1
 19200                           postinc0	equ	0xFEE
 19201                           plusw0	equ	0xFEB
 19202                           fsr0h	equ	0xFEA
 19203                           fsr0l	equ	0xFE9
 19204                           wreg	equ	0xFE8
 19205                           indf1	equ	0xFE7
 19206                           postdec1	equ	0xFE5
 19207                           fsr1h	equ	0xFE2
 19208                           fsr1l	equ	0xFE1
 19209                           indf2	equ	0xFDF
 19210                           postinc2	equ	0xFDE
 19211                           postdec2	equ	0xFDD
 19212                           plusw2	equ	0xFDB
 19213                           fsr2h	equ	0xFDA
 19214                           fsr2l	equ	0xFD9
 19215                           status	equ	0xFD8
 19216                           
 19217 ;; *************** function _IOCB5_ISR *****************
 19218 ;; Defined at:
 19219 ;;		line 158 in file "mcc_generated_files/pin_manager.c"
 19220 ;; Parameters:    Size  Location     Type
 19221 ;;		None
 19222 ;; Auto vars:     Size  Location     Type
 19223 ;;		None
 19224 ;; Return value:  Size  Location     Type
 19225 ;;                  1    wreg      void 
 19226 ;; Registers used:
 19227 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 19228 ;; Tracked objects:
 19229 ;;		On entry : 0/0
 19230 ;;		On exit  : 0/0
 19231 ;;		Unchanged: 0/0
 19232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19233 ;;      Params:         0       0       0       0       0       0       0
 19234 ;;      Locals:         0       0       0       0       0       0       0
 19235 ;;      Temps:          0       0       0       0       0       0       0
 19236 ;;      Totals:         0       0       0       0       0       0       0
 19237 ;;Total ram usage:        0 bytes
 19238 ;; Hardware stack levels used:    1
 19239 ;; Hardware stack levels required when called:    1
 19240 ;; This function calls:
 19241 ;;		Absolute function
 19242 ;;		_IOCB5_DefaultInterruptHandler
 19243 ;; This function is called by:
 19244 ;;		_PIN_MANAGER_IOC
 19245 ;; This function uses a non-reentrant model
 19246 ;;
 19247                           
 19248                           	psect	text112
 19249  003FF6                     __ptext112:
 19250                           	opt stack 0
 19251  003FF6                     _IOCB5_ISR:
 19252                           	opt stack 17
 19253                           
 19254                           ;pin_manager.c: 163: if(IOCB5_InterruptHandler)
 19255                           
 19256                           ;incstack = 0
 19257  003FF6  0101               	movlb	1	; () banked
 19258  003FF8  51F7               	movf	_IOCB5_InterruptHandler& (0+255),w,b
 19259  003FFA  11F8               	iorwf	(_IOCB5_InterruptHandler+1)& (0+255),w,b
 19260  003FFC  B4D8               	btfsc	status,2,c
 19261  003FFE  0012               	return	
 19262                           
 19263                           ; BSR set to: 1
 19264                           ;pin_manager.c: 164: {
 19265                           ;pin_manager.c: 165: IOCB5_InterruptHandler();
 19266  004000  D801               	call	i2u562_48
 19267  004002  0012               	return	
 19268  004004                     i2u562_48:
 19269  004004  0005               	push	
 19270  004006  6EFA               	movwf	pclath,c
 19271  004008  51F7               	movf	_IOCB5_InterruptHandler& (0+255),w,b
 19272  00400A  6EFD               	movwf	tosl,c
 19273  00400C  51F8               	movf	(_IOCB5_InterruptHandler+1)& (0+255),w,b
 19274  00400E  6EFE               	movwf	tosh,c
 19275  004010  50F8               	movf	tblptru,w,c
 19276  004012  6EFF               	movwf	tosu,c
 19277  004014  50FA               	movf	pclath,w,c
 19278  004016  0012               	return		;indir
 19279  004018                     __end_of_IOCB5_ISR:
 19280                           	opt stack 0
 19281                           tosu	equ	0xFFF
 19282                           tosh	equ	0xFFE
 19283                           tosl	equ	0xFFD
 19284                           pclatu	equ	0xFFB
 19285                           pclath	equ	0xFFA
 19286                           tblptru	equ	0xFF8
 19287                           tblptrh	equ	0xFF7
 19288                           tblptrl	equ	0xFF6
 19289                           tablat	equ	0xFF5
 19290                           prodh	equ	0xFF4
 19291                           prodl	equ	0xFF3
 19292                           intcon	equ	0xFF2
 19293                           intcon2	equ	0xFF1
 19294                           postinc0	equ	0xFEE
 19295                           plusw0	equ	0xFEB
 19296                           fsr0h	equ	0xFEA
 19297                           fsr0l	equ	0xFE9
 19298                           wreg	equ	0xFE8
 19299                           indf1	equ	0xFE7
 19300                           postdec1	equ	0xFE5
 19301                           fsr1h	equ	0xFE2
 19302                           fsr1l	equ	0xFE1
 19303                           indf2	equ	0xFDF
 19304                           postinc2	equ	0xFDE
 19305                           postdec2	equ	0xFDD
 19306                           plusw2	equ	0xFDB
 19307                           fsr2h	equ	0xFDA
 19308                           fsr2l	equ	0xFD9
 19309                           status	equ	0xFD8
 19310                           
 19311 ;; *************** function _IOCB5_DefaultInterruptHandler *****************
 19312 ;; Defined at:
 19313 ;;		line 179 in file "mcc_generated_files/pin_manager.c"
 19314 ;; Parameters:    Size  Location     Type
 19315 ;;		None
 19316 ;; Auto vars:     Size  Location     Type
 19317 ;;		None
 19318 ;; Return value:  Size  Location     Type
 19319 ;;                  1    wreg      void 
 19320 ;; Registers used:
 19321 ;;		None
 19322 ;; Tracked objects:
 19323 ;;		On entry : 0/0
 19324 ;;		On exit  : 0/0
 19325 ;;		Unchanged: 0/0
 19326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19327 ;;      Params:         0       0       0       0       0       0       0
 19328 ;;      Locals:         0       0       0       0       0       0       0
 19329 ;;      Temps:          0       0       0       0       0       0       0
 19330 ;;      Totals:         0       0       0       0       0       0       0
 19331 ;;Total ram usage:        0 bytes
 19332 ;; Hardware stack levels used:    1
 19333 ;; This function calls:
 19334 ;;		Nothing
 19335 ;; This function is called by:
 19336 ;;		_PIN_MANAGER_Initialize
 19337 ;;		_IOCB5_ISR
 19338 ;; This function uses a non-reentrant model
 19339 ;;
 19340                           
 19341                           	psect	text113
 19342  004248                     __ptext113:
 19343                           	opt stack 0
 19344  004248                     _IOCB5_DefaultInterruptHandler:
 19345                           	opt stack 17
 19346                           
 19347                           ;incstack = 0
 19348  004248  0012               	return		;funcret
 19349  00424A                     __end_of_IOCB5_DefaultInterruptHandler:
 19350                           	opt stack 0
 19351                           tosu	equ	0xFFF
 19352                           tosh	equ	0xFFE
 19353                           tosl	equ	0xFFD
 19354                           pclatu	equ	0xFFB
 19355                           pclath	equ	0xFFA
 19356                           tblptru	equ	0xFF8
 19357                           tblptrh	equ	0xFF7
 19358                           tblptrl	equ	0xFF6
 19359                           tablat	equ	0xFF5
 19360                           prodh	equ	0xFF4
 19361                           prodl	equ	0xFF3
 19362                           intcon	equ	0xFF2
 19363                           intcon2	equ	0xFF1
 19364                           postinc0	equ	0xFEE
 19365                           plusw0	equ	0xFEB
 19366                           fsr0h	equ	0xFEA
 19367                           fsr0l	equ	0xFE9
 19368                           wreg	equ	0xFE8
 19369                           indf1	equ	0xFE7
 19370                           postdec1	equ	0xFE5
 19371                           fsr1h	equ	0xFE2
 19372                           fsr1l	equ	0xFE1
 19373                           indf2	equ	0xFDF
 19374                           postinc2	equ	0xFDE
 19375                           postdec2	equ	0xFDD
 19376                           plusw2	equ	0xFDB
 19377                           fsr2h	equ	0xFDA
 19378                           fsr2l	equ	0xFD9
 19379                           status	equ	0xFD8
 19380                           
 19381 ;; *************** function _IOCB4_ISR *****************
 19382 ;; Defined at:
 19383 ;;		line 129 in file "mcc_generated_files/pin_manager.c"
 19384 ;; Parameters:    Size  Location     Type
 19385 ;;		None
 19386 ;; Auto vars:     Size  Location     Type
 19387 ;;		None
 19388 ;; Return value:  Size  Location     Type
 19389 ;;                  1    wreg      void 
 19390 ;; Registers used:
 19391 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 19392 ;; Tracked objects:
 19393 ;;		On entry : 0/0
 19394 ;;		On exit  : 0/0
 19395 ;;		Unchanged: 0/0
 19396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19397 ;;      Params:         0       0       0       0       0       0       0
 19398 ;;      Locals:         0       0       0       0       0       0       0
 19399 ;;      Temps:          0       0       0       0       0       0       0
 19400 ;;      Totals:         0       0       0       0       0       0       0
 19401 ;;Total ram usage:        0 bytes
 19402 ;; Hardware stack levels used:    1
 19403 ;; Hardware stack levels required when called:    1
 19404 ;; This function calls:
 19405 ;;		Absolute function
 19406 ;;		_IOCB4_DefaultInterruptHandler
 19407 ;; This function is called by:
 19408 ;;		_PIN_MANAGER_IOC
 19409 ;; This function uses a non-reentrant model
 19410 ;;
 19411                           
 19412                           	psect	text114
 19413  004018                     __ptext114:
 19414                           	opt stack 0
 19415  004018                     _IOCB4_ISR:
 19416                           	opt stack 17
 19417                           
 19418                           ;pin_manager.c: 134: if(IOCB4_InterruptHandler)
 19419                           
 19420                           ;incstack = 0
 19421  004018  0101               	movlb	1	; () banked
 19422  00401A  51F9               	movf	_IOCB4_InterruptHandler& (0+255),w,b
 19423  00401C  11FA               	iorwf	(_IOCB4_InterruptHandler+1)& (0+255),w,b
 19424  00401E  B4D8               	btfsc	status,2,c
 19425  004020  0012               	return	
 19426                           
 19427                           ; BSR set to: 1
 19428                           ;pin_manager.c: 135: {
 19429                           ;pin_manager.c: 136: IOCB4_InterruptHandler();
 19430  004022  D801               	call	i2u560_48
 19431  004024  0012               	return	
 19432  004026                     i2u560_48:
 19433  004026  0005               	push	
 19434  004028  6EFA               	movwf	pclath,c
 19435  00402A  51F9               	movf	_IOCB4_InterruptHandler& (0+255),w,b
 19436  00402C  6EFD               	movwf	tosl,c
 19437  00402E  51FA               	movf	(_IOCB4_InterruptHandler+1)& (0+255),w,b
 19438  004030  6EFE               	movwf	tosh,c
 19439  004032  50F8               	movf	tblptru,w,c
 19440  004034  6EFF               	movwf	tosu,c
 19441  004036  50FA               	movf	pclath,w,c
 19442  004038  0012               	return		;indir
 19443  00403A                     __end_of_IOCB4_ISR:
 19444                           	opt stack 0
 19445                           tosu	equ	0xFFF
 19446                           tosh	equ	0xFFE
 19447                           tosl	equ	0xFFD
 19448                           pclatu	equ	0xFFB
 19449                           pclath	equ	0xFFA
 19450                           tblptru	equ	0xFF8
 19451                           tblptrh	equ	0xFF7
 19452                           tblptrl	equ	0xFF6
 19453                           tablat	equ	0xFF5
 19454                           prodh	equ	0xFF4
 19455                           prodl	equ	0xFF3
 19456                           intcon	equ	0xFF2
 19457                           intcon2	equ	0xFF1
 19458                           postinc0	equ	0xFEE
 19459                           plusw0	equ	0xFEB
 19460                           fsr0h	equ	0xFEA
 19461                           fsr0l	equ	0xFE9
 19462                           wreg	equ	0xFE8
 19463                           indf1	equ	0xFE7
 19464                           postdec1	equ	0xFE5
 19465                           fsr1h	equ	0xFE2
 19466                           fsr1l	equ	0xFE1
 19467                           indf2	equ	0xFDF
 19468                           postinc2	equ	0xFDE
 19469                           postdec2	equ	0xFDD
 19470                           plusw2	equ	0xFDB
 19471                           fsr2h	equ	0xFDA
 19472                           fsr2l	equ	0xFD9
 19473                           status	equ	0xFD8
 19474                           
 19475 ;; *************** function _IOCB4_DefaultInterruptHandler *****************
 19476 ;; Defined at:
 19477 ;;		line 150 in file "mcc_generated_files/pin_manager.c"
 19478 ;; Parameters:    Size  Location     Type
 19479 ;;		None
 19480 ;; Auto vars:     Size  Location     Type
 19481 ;;		None
 19482 ;; Return value:  Size  Location     Type
 19483 ;;                  1    wreg      void 
 19484 ;; Registers used:
 19485 ;;		None
 19486 ;; Tracked objects:
 19487 ;;		On entry : 0/0
 19488 ;;		On exit  : 0/0
 19489 ;;		Unchanged: 0/0
 19490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19491 ;;      Params:         0       0       0       0       0       0       0
 19492 ;;      Locals:         0       0       0       0       0       0       0
 19493 ;;      Temps:          0       0       0       0       0       0       0
 19494 ;;      Totals:         0       0       0       0       0       0       0
 19495 ;;Total ram usage:        0 bytes
 19496 ;; Hardware stack levels used:    1
 19497 ;; This function calls:
 19498 ;;		Nothing
 19499 ;; This function is called by:
 19500 ;;		_PIN_MANAGER_Initialize
 19501 ;;		_IOCB4_ISR
 19502 ;; This function uses a non-reentrant model
 19503 ;;
 19504                           
 19505                           	psect	text115
 19506  00424A                     __ptext115:
 19507                           	opt stack 0
 19508  00424A                     _IOCB4_DefaultInterruptHandler:
 19509                           	opt stack 17
 19510                           
 19511                           ;incstack = 0
 19512  00424A  0012               	return		;funcret
 19513  00424C                     __end_of_IOCB4_DefaultInterruptHandler:
 19514                           	opt stack 0
 19515                           tosu	equ	0xFFF
 19516                           tosh	equ	0xFFE
 19517                           tosl	equ	0xFFD
 19518                           pclatu	equ	0xFFB
 19519                           pclath	equ	0xFFA
 19520                           tblptru	equ	0xFF8
 19521                           tblptrh	equ	0xFF7
 19522                           tblptrl	equ	0xFF6
 19523                           tablat	equ	0xFF5
 19524                           prodh	equ	0xFF4
 19525                           prodl	equ	0xFF3
 19526                           intcon	equ	0xFF2
 19527                           intcon2	equ	0xFF1
 19528                           postinc0	equ	0xFEE
 19529                           plusw0	equ	0xFEB
 19530                           fsr0h	equ	0xFEA
 19531                           fsr0l	equ	0xFE9
 19532                           wreg	equ	0xFE8
 19533                           indf1	equ	0xFE7
 19534                           postdec1	equ	0xFE5
 19535                           fsr1h	equ	0xFE2
 19536                           fsr1l	equ	0xFE1
 19537                           indf2	equ	0xFDF
 19538                           postinc2	equ	0xFDE
 19539                           postdec2	equ	0xFDD
 19540                           plusw2	equ	0xFDB
 19541                           fsr2h	equ	0xFDA
 19542                           fsr2l	equ	0xFD9
 19543                           status	equ	0xFD8
 19544                           
 19545 ;; *************** function _MEMORY_ISR *****************
 19546 ;; Defined at:
 19547 ;;		line 206 in file "mcc_generated_files/memory.c"
 19548 ;; Parameters:    Size  Location     Type
 19549 ;;		None
 19550 ;; Auto vars:     Size  Location     Type
 19551 ;;		None
 19552 ;; Return value:  Size  Location     Type
 19553 ;;                  1    wreg      void 
 19554 ;; Registers used:
 19555 ;;		None
 19556 ;; Tracked objects:
 19557 ;;		On entry : 0/0
 19558 ;;		On exit  : 0/0
 19559 ;;		Unchanged: 0/0
 19560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19561 ;;      Params:         0       0       0       0       0       0       0
 19562 ;;      Locals:         0       0       0       0       0       0       0
 19563 ;;      Temps:          0       0       0       0       0       0       0
 19564 ;;      Totals:         0       0       0       0       0       0       0
 19565 ;;Total ram usage:        0 bytes
 19566 ;; Hardware stack levels used:    1
 19567 ;; This function calls:
 19568 ;;		Nothing
 19569 ;; This function is called by:
 19570 ;;		_INTERRUPT_InterruptManager
 19571 ;; This function uses a non-reentrant model
 19572 ;;
 19573                           
 19574                           	psect	text116
 19575  004242                     __ptext116:
 19576                           	opt stack 0
 19577  004242                     _MEMORY_ISR:
 19578                           	opt stack 19
 19579                           
 19580                           ;memory.c: 209: PIR2bits.EEIF = 0;
 19581                           
 19582                           ;incstack = 0
 19583  004242  98A1               	bcf	4001,4,c	;volatile
 19584  004244  0012               	return		;funcret
 19585  004246                     __end_of_MEMORY_ISR:
 19586                           	opt stack 0
 19587                           tosu	equ	0xFFF
 19588                           tosh	equ	0xFFE
 19589                           tosl	equ	0xFFD
 19590                           pclatu	equ	0xFFB
 19591                           pclath	equ	0xFFA
 19592                           tblptru	equ	0xFF8
 19593                           tblptrh	equ	0xFF7
 19594                           tblptrl	equ	0xFF6
 19595                           tablat	equ	0xFF5
 19596                           prodh	equ	0xFF4
 19597                           prodl	equ	0xFF3
 19598                           intcon	equ	0xFF2
 19599                           intcon2	equ	0xFF1
 19600                           postinc0	equ	0xFEE
 19601                           plusw0	equ	0xFEB
 19602                           fsr0h	equ	0xFEA
 19603                           fsr0l	equ	0xFE9
 19604                           wreg	equ	0xFE8
 19605                           indf1	equ	0xFE7
 19606                           postdec1	equ	0xFE5
 19607                           fsr1h	equ	0xFE2
 19608                           fsr1l	equ	0xFE1
 19609                           indf2	equ	0xFDF
 19610                           postinc2	equ	0xFDE
 19611                           postdec2	equ	0xFDD
 19612                           plusw2	equ	0xFDB
 19613                           fsr2h	equ	0xFDA
 19614                           fsr2l	equ	0xFD9
 19615                           status	equ	0xFD8
 19616                           
 19617 ;; *************** function _EUSART1_Transmit_ISR *****************
 19618 ;; Defined at:
 19619 ;;		line 181 in file "mcc_generated_files/eusart1.c"
 19620 ;; Parameters:    Size  Location     Type
 19621 ;;		None
 19622 ;; Auto vars:     Size  Location     Type
 19623 ;;		None
 19624 ;; Return value:  Size  Location     Type
 19625 ;;                  1    wreg      void 
 19626 ;; Registers used:
 19627 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 19628 ;; Tracked objects:
 19629 ;;		On entry : 0/0
 19630 ;;		On exit  : 0/0
 19631 ;;		Unchanged: 0/0
 19632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19633 ;;      Params:         0       0       0       0       0       0       0
 19634 ;;      Locals:         0       0       0       0       0       0       0
 19635 ;;      Temps:          0       0       0       0       0       0       0
 19636 ;;      Totals:         0       0       0       0       0       0       0
 19637 ;;Total ram usage:        0 bytes
 19638 ;; Hardware stack levels used:    1
 19639 ;; This function calls:
 19640 ;;		Nothing
 19641 ;; This function is called by:
 19642 ;;		_INTERRUPT_InterruptManager
 19643 ;; This function uses a non-reentrant model
 19644 ;;
 19645                           
 19646                           	psect	text117
 19647  003D32                     __ptext117:
 19648                           	opt stack 0
 19649  003D32                     _EUSART1_Transmit_ISR:
 19650                           	opt stack 19
 19651                           
 19652                           ;eusart1.c: 185: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 19653                           
 19654                           ;incstack = 0
 19655  003D32  0E46               	movlw	70
 19656  003D34  6047               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
 19657  003D36  D012               	goto	i2l913
 19658                           
 19659                           ;eusart1.c: 186: {
 19660                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 19661  003D38  5039               	movf	_eusart1TxTail,w,c	;volatile
 19662  003D3A  0D01               	mullw	1
 19663  003D3C  0E00               	movlw	low _eusart1TxBuffer
 19664  003D3E  24F3               	addwf	prodl,w,c
 19665  003D40  6ED9               	movwf	fsr2l,c
 19666  003D42  0E02               	movlw	high _eusart1TxBuffer
 19667  003D44  20F4               	addwfc	prodh,w,c
 19668  003D46  6EDA               	movwf	fsr2h,c
 19669  003D48  50DF               	movf	indf2,w,c
 19670  003D4A  6EAD               	movwf	4013,c	;volatile
 19671  003D4C  2A39               	incf	_eusart1TxTail,f,c	;volatile
 19672                           
 19673                           ;eusart1.c: 188: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 19674  003D4E  0E45               	movlw	69
 19675  003D50  6439               	cpfsgt	_eusart1TxTail,c	;volatile
 19676  003D52  D002               	goto	i2l914
 19677                           
 19678                           ;eusart1.c: 189: {
 19679                           ;eusart1.c: 190: eusart1TxTail = 0;
 19680  003D54  0E00               	movlw	0
 19681  003D56  6E39               	movwf	_eusart1TxTail,c	;volatile
 19682  003D58                     i2l914:
 19683                           
 19684                           ;eusart1.c: 191: }
 19685                           ;eusart1.c: 192: eusart1TxBufferRemaining++;
 19686  003D58  2A47               	incf	_eusart1TxBufferRemaining,f,c	;volatile
 19687                           
 19688                           ;eusart1.c: 193: }
 19689  003D5A  0012               	return	
 19690  003D5C                     i2l913:
 19691                           
 19692                           ;eusart1.c: 194: else
 19693                           ;eusart1.c: 195: {
 19694                           ;eusart1.c: 196: PIE1bits.TX1IE = 0;
 19695  003D5C  989D               	bcf	3997,4,c	;volatile
 19696                           
 19697                           ;eusart1.c: 197: eusart1TxTail = 0;
 19698  003D5E  0E00               	movlw	0
 19699  003D60  6E39               	movwf	_eusart1TxTail,c	;volatile
 19700                           
 19701                           ;eusart1.c: 198: eusart1TxHead = 0;
 19702  003D62  0E00               	movlw	0
 19703  003D64  6E3A               	movwf	_eusart1TxHead,c	;volatile
 19704  003D66  0012               	return	
 19705  003D68                     __end_of_EUSART1_Transmit_ISR:
 19706                           	opt stack 0
 19707                           tosu	equ	0xFFF
 19708                           tosh	equ	0xFFE
 19709                           tosl	equ	0xFFD
 19710                           pclatu	equ	0xFFB
 19711                           pclath	equ	0xFFA
 19712                           tblptru	equ	0xFF8
 19713                           tblptrh	equ	0xFF7
 19714                           tblptrl	equ	0xFF6
 19715                           tablat	equ	0xFF5
 19716                           prodh	equ	0xFF4
 19717                           prodl	equ	0xFF3
 19718                           intcon	equ	0xFF2
 19719                           intcon2	equ	0xFF1
 19720                           postinc0	equ	0xFEE
 19721                           plusw0	equ	0xFEB
 19722                           fsr0h	equ	0xFEA
 19723                           fsr0l	equ	0xFE9
 19724                           wreg	equ	0xFE8
 19725                           indf1	equ	0xFE7
 19726                           postdec1	equ	0xFE5
 19727                           fsr1h	equ	0xFE2
 19728                           fsr1l	equ	0xFE1
 19729                           indf2	equ	0xFDF
 19730                           postinc2	equ	0xFDE
 19731                           postdec2	equ	0xFDD
 19732                           plusw2	equ	0xFDB
 19733                           fsr2h	equ	0xFDA
 19734                           fsr2l	equ	0xFD9
 19735                           status	equ	0xFD8
 19736                           
 19737 ;; *************** function _EUSART1_Receive_ISR *****************
 19738 ;; Defined at:
 19739 ;;		line 202 in file "mcc_generated_files/eusart1.c"
 19740 ;; Parameters:    Size  Location     Type
 19741 ;;		None
 19742 ;; Auto vars:     Size  Location     Type
 19743 ;;		None
 19744 ;; Return value:  Size  Location     Type
 19745 ;;                  1    wreg      void 
 19746 ;; Registers used:
 19747 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 19748 ;; Tracked objects:
 19749 ;;		On entry : 0/0
 19750 ;;		On exit  : 0/0
 19751 ;;		Unchanged: 0/0
 19752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19753 ;;      Params:         0       0       0       0       0       0       0
 19754 ;;      Locals:         0       0       0       0       0       0       0
 19755 ;;      Temps:          0       0       0       0       0       0       0
 19756 ;;      Totals:         0       0       0       0       0       0       0
 19757 ;;Total ram usage:        0 bytes
 19758 ;; Hardware stack levels used:    1
 19759 ;; This function calls:
 19760 ;;		Nothing
 19761 ;; This function is called by:
 19762 ;;		_INTERRUPT_InterruptManager
 19763 ;; This function uses a non-reentrant model
 19764 ;;
 19765                           
 19766                           	psect	text118
 19767  003E94                     __ptext118:
 19768                           	opt stack 0
 19769  003E94                     _EUSART1_Receive_ISR:
 19770                           	opt stack 19
 19771                           
 19772                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
 19773                           
 19774                           ;incstack = 0
 19775  003E94  A2AB               	btfss	4011,1,c	;volatile
 19776  003E96  D002               	goto	i2l919
 19777                           
 19778                           ;eusart1.c: 206: {
 19779                           ;eusart1.c: 208: RCSTA1bits.CREN = 0;
 19780  003E98  98AB               	bcf	4011,4,c	;volatile
 19781                           
 19782                           ;eusart1.c: 209: RCSTA1bits.CREN = 1;
 19783  003E9A  88AB               	bsf	4011,4,c	;volatile
 19784  003E9C                     i2l919:
 19785                           
 19786                           ;eusart1.c: 210: }
 19787                           ;eusart1.c: 215: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 19788  003E9C  5038               	movf	_eusart1RxHead,w,c	;volatile
 19789  003E9E  0D01               	mullw	1
 19790  003EA0  0E00               	movlw	low _eusart1RxBuffer
 19791  003EA2  24F3               	addwf	prodl,w,c
 19792  003EA4  6ED9               	movwf	fsr2l,c
 19793  003EA6  0E01               	movlw	high _eusart1RxBuffer
 19794  003EA8  20F4               	addwfc	prodh,w,c
 19795  003EAA  6EDA               	movwf	fsr2h,c
 19796  003EAC  CFAE FFDF          	movff	4014,indf2	;volatile
 19797  003EB0  2A38               	incf	_eusart1RxHead,f,c	;volatile
 19798                           
 19799                           ;eusart1.c: 216: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 19800  003EB2  0E27               	movlw	39
 19801  003EB4  6438               	cpfsgt	_eusart1RxHead,c	;volatile
 19802  003EB6  D002               	goto	i2l920
 19803                           
 19804                           ;eusart1.c: 217: {
 19805                           ;eusart1.c: 218: eusart1RxHead = 0;
 19806  003EB8  0E00               	movlw	0
 19807  003EBA  6E38               	movwf	_eusart1RxHead,c	;volatile
 19808  003EBC                     i2l920:
 19809                           
 19810                           ;eusart1.c: 219: }
 19811                           ;eusart1.c: 220: eusart1RxCount++;
 19812  003EBC  0100               	movlb	0	; () banked
 19813  003EBE  2BF7               	incf	_eusart1RxCount& (0+255),f,b	;volatile
 19814                           
 19815                           ; BSR set to: 0
 19816  003EC0  0012               	return		;funcret
 19817  003EC2                     __end_of_EUSART1_Receive_ISR:
 19818                           	opt stack 0
 19819                           tosu	equ	0xFFF
 19820                           tosh	equ	0xFFE
 19821                           tosl	equ	0xFFD
 19822                           pclatu	equ	0xFFB
 19823                           pclath	equ	0xFFA
 19824                           tblptru	equ	0xFF8
 19825                           tblptrh	equ	0xFF7
 19826                           tblptrl	equ	0xFF6
 19827                           tablat	equ	0xFF5
 19828                           prodh	equ	0xFF4
 19829                           prodl	equ	0xFF3
 19830                           intcon	equ	0xFF2
 19831                           intcon2	equ	0xFF1
 19832                           postinc0	equ	0xFEE
 19833                           plusw0	equ	0xFEB
 19834                           fsr0h	equ	0xFEA
 19835                           fsr0l	equ	0xFE9
 19836                           wreg	equ	0xFE8
 19837                           indf1	equ	0xFE7
 19838                           postdec1	equ	0xFE5
 19839                           fsr1h	equ	0xFE2
 19840                           fsr1l	equ	0xFE1
 19841                           indf2	equ	0xFDF
 19842                           postinc2	equ	0xFDE
 19843                           postdec2	equ	0xFDD
 19844                           plusw2	equ	0xFDB
 19845                           fsr2h	equ	0xFDA
 19846                           fsr2l	equ	0xFD9
 19847                           status	equ	0xFD8
 19848                           tosu	equ	0xFFF
 19849                           tosh	equ	0xFFE
 19850                           tosl	equ	0xFFD
 19851                           pclatu	equ	0xFFB
 19852                           pclath	equ	0xFFA
 19853                           tblptru	equ	0xFF8
 19854                           tblptrh	equ	0xFF7
 19855                           tblptrl	equ	0xFF6
 19856                           tablat	equ	0xFF5
 19857                           prodh	equ	0xFF4
 19858                           prodl	equ	0xFF3
 19859                           intcon	equ	0xFF2
 19860                           intcon2	equ	0xFF1
 19861                           postinc0	equ	0xFEE
 19862                           plusw0	equ	0xFEB
 19863                           fsr0h	equ	0xFEA
 19864                           fsr0l	equ	0xFE9
 19865                           wreg	equ	0xFE8
 19866                           indf1	equ	0xFE7
 19867                           postdec1	equ	0xFE5
 19868                           fsr1h	equ	0xFE2
 19869                           fsr1l	equ	0xFE1
 19870                           indf2	equ	0xFDF
 19871                           postinc2	equ	0xFDE
 19872                           postdec2	equ	0xFDD
 19873                           plusw2	equ	0xFDB
 19874                           fsr2h	equ	0xFDA
 19875                           fsr2l	equ	0xFD9
 19876                           status	equ	0xFD8
 19877                           
 19878                           	psect	text119
 19879  000000                     __ptext119:
 19880                           	opt stack 0
 19881                           tosu	equ	0xFFF
 19882                           tosh	equ	0xFFE
 19883                           tosl	equ	0xFFD
 19884                           pclatu	equ	0xFFB
 19885                           pclath	equ	0xFFA
 19886                           tblptru	equ	0xFF8
 19887                           tblptrh	equ	0xFF7
 19888                           tblptrl	equ	0xFF6
 19889                           tablat	equ	0xFF5
 19890                           prodh	equ	0xFF4
 19891                           prodl	equ	0xFF3
 19892                           intcon	equ	0xFF2
 19893                           intcon2	equ	0xFF1
 19894                           postinc0	equ	0xFEE
 19895                           plusw0	equ	0xFEB
 19896                           fsr0h	equ	0xFEA
 19897                           fsr0l	equ	0xFE9
 19898                           wreg	equ	0xFE8
 19899                           indf1	equ	0xFE7
 19900                           postdec1	equ	0xFE5
 19901                           fsr1h	equ	0xFE2
 19902                           fsr1l	equ	0xFE1
 19903                           indf2	equ	0xFDF
 19904                           postinc2	equ	0xFDE
 19905                           postdec2	equ	0xFDD
 19906                           plusw2	equ	0xFDB
 19907                           fsr2h	equ	0xFDA
 19908                           fsr2l	equ	0xFD9
 19909                           status	equ	0xFD8
 19910                           
 19911                           	psect	rparam
 19912  0000                     tosu	equ	0xFFF
 19913                           tosh	equ	0xFFE
 19914                           tosl	equ	0xFFD
 19915                           pclatu	equ	0xFFB
 19916                           pclath	equ	0xFFA
 19917                           tblptru	equ	0xFF8
 19918                           tblptrh	equ	0xFF7
 19919                           tblptrl	equ	0xFF6
 19920                           tablat	equ	0xFF5
 19921                           prodh	equ	0xFF4
 19922                           prodl	equ	0xFF3
 19923                           intcon	equ	0xFF2
 19924                           intcon2	equ	0xFF1
 19925                           postinc0	equ	0xFEE
 19926                           plusw0	equ	0xFEB
 19927                           fsr0h	equ	0xFEA
 19928                           fsr0l	equ	0xFE9
 19929                           wreg	equ	0xFE8
 19930                           indf1	equ	0xFE7
 19931                           postdec1	equ	0xFE5
 19932                           fsr1h	equ	0xFE2
 19933                           fsr1l	equ	0xFE1
 19934                           indf2	equ	0xFDF
 19935                           postinc2	equ	0xFDE
 19936                           postdec2	equ	0xFDD
 19937                           plusw2	equ	0xFDB
 19938                           fsr2h	equ	0xFDA
 19939                           fsr2l	equ	0xFD9
 19940                           status	equ	0xFD8
 19941                           
 19942                           	psect	temp
 19943  000048                     btemp:
 19944                           	opt stack 0
 19945  000048                     	ds	1
 19946  0000                     int$flags	set	btemp
 19947  0000                     wtemp6	set	btemp+1
 19948                           tosu	equ	0xFFF
 19949                           tosh	equ	0xFFE
 19950                           tosl	equ	0xFFD
 19951                           pclatu	equ	0xFFB
 19952                           pclath	equ	0xFFA
 19953                           tblptru	equ	0xFF8
 19954                           tblptrh	equ	0xFF7
 19955                           tblptrl	equ	0xFF6
 19956                           tablat	equ	0xFF5
 19957                           prodh	equ	0xFF4
 19958                           prodl	equ	0xFF3
 19959                           intcon	equ	0xFF2
 19960                           intcon2	equ	0xFF1
 19961                           postinc0	equ	0xFEE
 19962                           plusw0	equ	0xFEB
 19963                           fsr0h	equ	0xFEA
 19964                           fsr0l	equ	0xFE9
 19965                           wreg	equ	0xFE8
 19966                           indf1	equ	0xFE7
 19967                           postdec1	equ	0xFE5
 19968                           fsr1h	equ	0xFE2
 19969                           fsr1l	equ	0xFE1
 19970                           indf2	equ	0xFDF
 19971                           postinc2	equ	0xFDE
 19972                           postdec2	equ	0xFDD
 19973                           plusw2	equ	0xFDB
 19974                           fsr2h	equ	0xFDA
 19975                           fsr2l	equ	0xFD9
 19976                           status	equ	0xFD8


Data Sizes:
    Strings     21
    Constant    143
    Data        24
    BSS         281
    Persistent  9
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     48      71
    BANK0           160    137     158
    BANK1           256     51     251
    BANK2           256      0      70
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    readUartMessage$3591	PTR FTN()void  size(2) Largest target is 1
		 -> GroupDAC(), GroupFlashMemory(), GroupSynthesizers(), GroupAdc(), 
		 -> GroupStatusAndVersion(), GroupControlMcu(), 

    SynthReadData@data	PTR unsigned char  size(2) Largest target is 0

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    strtol@endptr	PTR PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strtol@s	PTR const unsigned char  size(2) Largest target is 10
		 -> GetIntFromUartData@dataRegArr(BANK0[10]), 

    memset@p1	PTR void  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[18]), GetIntFromUartData@dataRegArr(BANK0[10]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK1[22]), 
		 -> SynthReadData@eepromDataArray(BANK1[16]), DacReadValue@TxMsg(BANK0[7]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), 
		 -> sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 
		 -> synthLdTxArray(BANK1[12]), synthLdRxArray(BANK1[12]), 

    memset@p	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[18]), GetIntFromUartData@dataRegArr(BANK0[10]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK1[22]), 
		 -> SynthReadData@eepromDataArray(BANK1[16]), DacReadValue@TxMsg(BANK0[7]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), 
		 -> sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 
		 -> synthLdTxArray(BANK1[12]), synthLdRxArray(BANK1[12]), 

    Make32bitsArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> SWSPI_Synth_send_bits@bitArray(BANK0[32]), 

    GetIntFromUartData@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    GetUint16FromBitArray@bitarray	PTR unsigned char  size(2) Largest target is 12
		 -> synthLdTxArray(BANK1[12]), synthLdRxArray(BANK1[12]), 

    FillArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> SWSPI_Synth_send_bits@bitArray(BANK0[32]), synthLdTxArray(BANK1[12]), synthLdRxArray(BANK1[12]), 

    sp__memset	PTR void  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[18]), GetIntFromUartData@dataRegArr(BANK0[10]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK1[22]), 
		 -> SynthReadData@eepromDataArray(BANK1[16]), DacReadValue@TxMsg(BANK0[7]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), 
		 -> sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 
		 -> synthLdTxArray(BANK1[12]), synthLdRxArray(BANK1[12]), 

    ZeroArray@array	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[18]), GetIntFromUartData@dataRegArr(BANK0[10]), SynthReadData@TxMsg(BANK1[22]), SynthReadData@eepromDataArray(BANK1[16]), 
		 -> DacReadValue@TxMsg(BANK0[7]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), 
		 -> SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 

    crc8@dataArray	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetMcuFwVersion@TxMsg(BANK0[18]), SynthReadData@TxMsg(BANK1[22]), DacReadValue@TxMsg(BANK0[7]), 
		 -> FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgQueue(BANK1[20]), 

    GroupDAC@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), Absolute function(), 

    FLASH_WriteBlock@flashWrBufPtr	PTR unsigned char  size(2) Largest target is 64
		 -> sampleArray(BANK1[64]), 

    IOCB5_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCB5_DefaultInterruptHandler(), 

    IOCB5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCB5_DefaultInterruptHandler(), 

    IOCB4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCB4_DefaultInterruptHandler(), 

    IOCB4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCB4_DefaultInterruptHandler(), 

    UpdateSynthFreq@data	PTR unsigned char  size(2) Largest target is 0

    DacReadValue@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    DacSetValue@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    FlashReadUart@data	PTR unsigned char  size(2) Largest target is 0

    WriteUartMessage@dataBuf	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetMcuFwVersion@TxMsg(BANK0[18]), SynthReadData@TxMsg(BANK1[22]), DacReadValue@TxMsg(BANK0[7]), 
		 -> FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), SendAckMessage@TxMsg(COMRAM[6]), 

    SetChannelMode@data	PTR unsigned char  size(2) Largest target is 0

    groupsArray	PTR FTN()void [6] size(2) Largest target is 1
		 -> GroupDAC(), GroupFlashMemory(), GroupSynthesizers(), GroupAdc(), 
		 -> GroupStatusAndVersion(), GroupControlMcu(), 


Critical Paths under _main in COMRAM

    _InitRxMessageParams->_ZeroArray
    _GetMcuRunTime->___lldiv
    _GetMcuFwVersion->_ZeroArray
    _GroupFlashMemory->_FlashReadCondition
    _FlashReadCondition->_ZeroArray
    _FlashEreaseMem->_SendAckMessage
    _GetIntFromUartData->_strtol
    _strtol->___lmul
    _isalpha->_isupper
    _testLeds->_SendAckMessage
    _ResetMcu->_SendAckMessage
    _SetChannelMode->_SendAckMessage
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCB4_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCB5_SetInterruptHandler
    _SetMcuRunTime->___llmod
    _SendSystemStartAck->_SendAckMessage
    _SendAckMessage->_ZeroArray
    _ZeroArray->_memset
    _WriteUartMessage->_EUSART1_Write
    _StoreIntInEeprom->_make8
    _EepromWrite->_DATAEE_WriteByte
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _SWSPI_Synth_send_bits->_FillArray
    _FillArray->_memset
    _SWSPI_DAC_send_bits->_SwSpi_Clk_Pin
    _SWSPI_DAC_send_bits->_SwSpi_Data_Pin
    ___lmul->_EepromRead
    _EepromRead->_DATAEE_ReadByte
    _CheckFlashPrecentage->___ftdiv
    _log->_eval_poly
    _exp->_eval_poly
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftdiv
    ___ftmul->___ftdiv
    ___ftdiv->___lltoft
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lwtoft->___ftpack
    _FlashSampleWrite->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_ISR->___lwmod

Critical Paths under _main in BANK0

    _readUartMessage->_GroupAdc
    _readUartMessage->_GroupControlMcu
    _readUartMessage->_GroupDAC
    _readUartMessage->_GroupFlashMemory
    _readUartMessage->_GroupStatusAndVersion
    _readUartMessage->_GroupSynthesizers
    _UpdateSynthFreq->_SWSPI_send_word
    _SynthReadData->_ReadIntFromEeprom
    _SetSynthOper->_InitSynth
    _GroupFlashMemory->_FlashReadUart
    _FlashReadUart->_GetIntFromUartData
    _DacSetValue->_SWSPI_send_word
    _GetIntFromUartData->_strtol
    _DacReadValue->_ReadIntFromEeprom
    _PLLInitialize->_InitSynth
    _InitSynth->_ReadIntFromEeprom
    _DacInit->_ReadIntFromEeprom
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _ReadIntFromEeprom->_pow
    _CheckFlashPrecentage->___ftmul
    _AdcConvert->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___ftdiv
    ___ftsub->___ftadd
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_readUartMessage
    _GroupSynthesizers->_SynthReadData

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  819442
                         _AdcConvert
                     _BlinkErrorLeds
                        _BlinkOkLeds
               _CheckFlashPrecentage
      _InitSystemApplicationManagers
                 _SendSystemStartAck
                      _SetMcuRunTime
                       _SetMcuSystem
                 _keepAliveSignalLed
                    _readUartMessage
 ---------------------------------------------------------------------------------
 (1) _readUartMessage                                      7     7      0  469046
                                             44 BANK1      7     7      0
                       _EUSART1_Read
                           _GroupAdc *
                    _GroupControlMcu *
                           _GroupDAC *
                   _GroupFlashMemory *
              _GroupStatusAndVersion *
                  _GroupSynthesizers *
                _InitRxMessageParams
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _InitRxMessageParams                                  0     0      0    2899
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupSynthesizers                                    3     1      2  252369
                                            134 BANK0      3     1      2
                       _SetSynthOper
                      _SynthReadData
                    _UpdateSynthFreq
 ---------------------------------------------------------------------------------
 (3) _UpdateSynthFreq                                     11     9      2   28889
                                             42 BANK0     11     9      2
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (3) _SynthReadData                                       46    44      2  104326
                                            104 BANK0      2     0      2
                                              0 BANK1     44    44      0
                  _ReadIntFromEeprom
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (3) _SetSynthOper                                         1     1      0  118999
                                            111 BANK0      1     1      0
                          _InitSynth
                     _SendAckMessage
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (2) _GroupStatusAndVersion                                4     1      3   13626
                                            134 BANK0      3     1      2
                    _GetMcuFwVersion
                      _GetMcuRunTime
 ---------------------------------------------------------------------------------
 (3) _GetMcuRunTime                                       17    17      0    4498
                                             36 COMRAM     2     2      0
                                              0 BANK0     15    15      0
                   _WriteUartMessage
                            ___lldiv
                            ___llmod
                               _crc8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     421
                                             23 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _GetMcuFwVersion                                     33    33      0    9097
                                             35 COMRAM     7     7      0
                                              0 BANK0     26    26      0
                   _WriteUartMessage
                          _ZeroArray
                             ___wmul
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _GroupFlashMemory                                     3     1      2   40008
                                            134 BANK0      3     1      2
                     _FlashEreaseMem
                 _FlashReadCondition
                      _FlashReadUart
 ---------------------------------------------------------------------------------
 (3) _FlashReadUart                                       95    93      2   21548
                                             39 BANK0     95    93      2
                  _FLASH_IsWriteDone
                     _FLASH_ReadByte
                 _GetIntFromUartData
                     _SendAckMessage
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (4) _FLASH_ReadByte                                       4     0      4     453
                                             23 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _FlashReadCondition                                  13    13      0    7960
                                             35 COMRAM    13    13      0
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (3) _FlashEreaseMem                                       0     0      0   10438
                     _SendAckMessage
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupDAC                                             3     1      2  132436
                                            134 BANK0      3     1      2
                       _DacReadValue
                        _DacSetValue
 ---------------------------------------------------------------------------------
 (3) _DacSetValue                                         15    13      2   28610
                                             42 BANK0     15    13      2
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (4) _GetIntFromUartData                                  33    25      8    6841
                                              6 BANK0     33    25      8
                          _ZeroArray
                             _strtol
 ---------------------------------------------------------------------------------
 (5) _strtol                                              16    10      6    2723
                                             37 COMRAM    10     4      6
                                              0 BANK0      6     6      0
                             ___lmul
                            _isalpha
                            _isdigit
                            _isspace
                            _toupper
 ---------------------------------------------------------------------------------
 (6) _toupper                                              1     1      0      96
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _isspace                                              3     3      0     130
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isalpha                                              3     3      0     229
                                             26 COMRAM     3     3      0
                            _isupper
 ---------------------------------------------------------------------------------
 (7) _isupper                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _DacReadValue                                        18    16      2  103668
                                            104 BANK0     18    16      2
                  _ReadIntFromEeprom
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (2) _GroupControlMcu                                      4     1      3   15177
                                            134 BANK0      3     1      2
                           _ResetMcu
                           _testLeds
 ---------------------------------------------------------------------------------
 (3) _testLeds                                             3     3      0    7607
                                             43 COMRAM     3     3      0
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _ResetMcu                                             0     0      0    7539
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _GroupAdc                                             3     1      2    7753
                                            134 BANK0      3     1      2
                     _SetChannelMode
 ---------------------------------------------------------------------------------
 (3) _SetChannelMode                                       2     0      2    7691
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         3     3      0      68
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalLed                                   1     1      0       0
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SetMcuSystem                                         0     0      0     294
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0     294
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      2     2      0      98
                                             25 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _TMR0_SetInterruptHandler                             2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0     196
          _IOCB4_SetInterruptHandler
          _IOCB5_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _IOCB5_SetInterruptHandler                            2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _IOCB4_SetInterruptHandler                            2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMcuRunTime                                        0     0      0     592
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     592
                                             23 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (1) _SendSystemStartAck                                   0     0      0    7539
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (4) _SendAckMessage                                       8     7      1    7539
                                             35 COMRAM     8     7      1
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _crc8                                                 9     5      4    1610
                                             23 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _ZeroArray                                            4     0      4    2899
                                             31 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (5) _WriteUartMessage                                     7     3      4    1452
                                             24 COMRAM     7     3      4
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (6) _EUSART1_Write                                        1     1      0      62
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitSystemApplicationManagers                        0     0      0  222159
                    _ClearMcuRunTime
                            _DacInit
              _InitAdcApplicationMgr
                      _PLLInitialize
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PLLInitialize                                        0     0      0  112429
                          _FillArray
                          _InitSynth
 ---------------------------------------------------------------------------------
 (4) _InitSynth                                            7     7      0  110849
                                            104 BANK0      7     7      0
                  _ReadIntFromEeprom
                    _SWSPI_send_word
                   _StoreIntInEeprom
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (4) _SwSpi_Set_CE_Pin                                     2     1      1     425
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _InitAdcApplicationMgr                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DacInit                                              5     5      0  109730
                                            104 BANK0      5     5      0
                  _ReadIntFromEeprom
                    _SWSPI_send_word
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (4) _StoreIntInEeprom                                     9     2      7    3779
                                             32 COMRAM     9     2      7
                        _EepromWrite
                              _make8
 ---------------------------------------------------------------------------------
 (5) _EepromWrite                                          2     1      1     338
                                             26 COMRAM     2     1      1
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (6) _DATAEE_WriteByte                                     3     2      1     186
                                             23 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (4) _SWSPI_send_word                                      9     4      5   10200
                                             40 COMRAM     5     0      5
                                             38 BANK0      4     4      0
                _SWSPI_DAC_send_bits
              _SWSPI_Synth_send_bits
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
                              _make8
 ---------------------------------------------------------------------------------
 (5) _make8                                                9     4      5    1595
                                             23 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Synth_Le_Pin                               2     1      1     335
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Dac_Sync_Pin                               1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _SWSPI_Synth_send_bits                               42    38      4    4135
                                             36 COMRAM     4     0      4
                                              0 BANK0     38    38      0
                          _FillArray
                    _Make32bitsArray
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (6) _Make32bitsArray                                     10     4      6     344
                                             23 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (6) _FillArray                                            5     0      5    1580
                                             31 COMRAM     5     0      5
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     677
                                             23 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (5) _SWSPI_DAC_send_bits                                  3     2      1    2041
                                             25 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Data_Pin                                       2     1      1     757
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Clk_Pin                                        2     1      1     937
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _ReadIntFromEeprom                                   23    19      4   95494
                                             81 BANK0     23    19      4
                         _EepromRead
                           ___awtoft
                            ___fttol
                             ___lmul
                                _pow
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     636
                                             25 COMRAM    12     4      8
                         _EepromRead (ARG)
 ---------------------------------------------------------------------------------
 (5) _EepromRead                                           1     1      0      62
                                             24 COMRAM     1     1      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (6) _DATAEE_ReadByte                                      1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ClearMcuRunTime                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckFlashPrecentage                                 7     7      0   14121
                                             24 BANK0      7     7      0
                            ___ftdiv
                             ___ftge
                            ___ftmul
                           ___lltoft
 ---------------------------------------------------------------------------------
 (1) _BlinkOkLeds                                          6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _BlinkErrorLeds                                       6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _AdcConvert                                          16    16      0  105511
                                             81 BANK0     16    16      0
                  _ADC_GetConversion
                   _FlashSampleWrite
              _GetUint16FromBitArray
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _pow
 ---------------------------------------------------------------------------------
 (5) _pow                                                 17    11      6   88933
                                             64 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (6) _log                                                  5     2      3   28922
                                             46 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _exp                                                  9     6      3   47974
                                             55 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (7) _ldexp                                                7     2      5     539
                                             46 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (7) _floor                                                8     5      3   11854
                                             47 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (7) _frexp                                                7     2      5     682
                                             23 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (8) ___fttol                                             15    11      4     911
                                             24 BANK0     15    11      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftge                                               9     3      6    1098
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (8) ___altoft                                            10     6      4    3367
                                             46 COMRAM     2     2      0
                                             39 BANK0      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (7) _eval_poly                                           12     5      7   13735
                                             46 COMRAM     2     2      0
                                             36 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (8) ___wmul                                               6     2      4    2322
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) ___ftmul                                             15     9      6    5281
                                              9 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftsub                                              6     0      6    5754
                                             36 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (8) ___ftadd                                             12     6      6    5338
                                             24 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     335
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             15     9      6    4353
                                             40 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             4     1      3    3476
                                             31 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___lltoft                                             9     5      4    3355
                                             31 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3284
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftpack                                             8     3      5    3073
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _GetUint16FromBitArray                               11     7      4     440
                                             23 COMRAM    11     7      4
 ---------------------------------------------------------------------------------
 (2) _FlashSampleWrite                                     7     4      3    1811
                                             44 COMRAM     3     0      3
                                              0 BANK0      4     4      0
                  _FLASH_IsWriteDone
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_WriteBlock                                    16    10      6     992
                                             28 COMRAM    16    10      6
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     5     1      4     217
                                             23 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) _FLASH_IsWriteDone                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      22
                                             23 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                         18    18      0     767
                                              5 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                         _MEMORY_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     767
                            ___lwmod
 ---------------------------------------------------------------------------------
 (13) ___lwmod                                             5     1      4     767
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (12) _PIN_MANAGER_IOC                                     0     0      0       0
                          _IOCB4_ISR
                          _IOCB5_ISR
 ---------------------------------------------------------------------------------
 (13) _IOCB5_ISR                                           0     0      0       0
                   Absolute function *
      _IOCB5_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (14) _IOCB5_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _IOCB4_ISR                                           0     0      0       0
                   Absolute function *
      _IOCB4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (14) _IOCB4_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _MEMORY_ISR                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Receive_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcConvert
     _ADC_GetConversion
     _FlashSampleWrite
       _FLASH_IsWriteDone
       _FLASH_WriteBlock
         _FLASH_EraseBlock
     _GetUint16FromBitArray
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _frexp
   _BlinkErrorLeds
   _BlinkOkLeds
   _CheckFlashPrecentage
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___lltoft
       ___ftpack
   _InitSystemApplicationManagers
     _ClearMcuRunTime
     _DacInit
       _ReadIntFromEeprom
         _EepromRead
           _DATAEE_ReadByte
         ___awtoft
           ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lmul
           _EepromRead (ARG)
             _DATAEE_ReadByte
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _FillArray
             _memset
           _Make32bitsArray
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
       _StoreIntInEeprom
         _EepromWrite
           _DATAEE_WriteByte
         _make8
     _InitAdcApplicationMgr
     _PLLInitialize
       _FillArray
         _memset
       _InitSynth
         _ReadIntFromEeprom
           _EepromRead
             _DATAEE_ReadByte
           ___awtoft
             ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lmul
             _EepromRead (ARG)
               _DATAEE_ReadByte
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _FillArray
               _memset
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _StoreIntInEeprom
           _EepromWrite
             _DATAEE_WriteByte
           _make8
         _SwSpi_Set_CE_Pin
     _TMR0_StartTimer
   _SendSystemStartAck
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _SetMcuRunTime
     ___llmod
   _SetMcuSystem
     _SYSTEM_Initialize
       _ADC_Initialize
       _EUSART1_Initialize
       _INTERRUPT_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
         _IOCB4_SetInterruptHandler
         _IOCB5_SetInterruptHandler
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
   _keepAliveSignalLed
   _readUartMessage
     _EUSART1_Read
     _GroupAdc *
       _SetChannelMode
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupControlMcu *
       _ResetMcu
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _testLeds
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupDAC *
       _DacReadValue
         _ReadIntFromEeprom
           _EepromRead
             _DATAEE_ReadByte
           ___awtoft
             ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lmul
             _EepromRead (ARG)
               _DATAEE_ReadByte
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _DacSetValue
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _FillArray
               _memset
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _StoreIntInEeprom
           _EepromWrite
             _DATAEE_WriteByte
           _make8
     _GroupFlashMemory *
       _FlashEreaseMem
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _ZeroArray
           _memset
       _FlashReadCondition
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _FlashReadUart
         _FLASH_IsWriteDone
         _FLASH_ReadByte
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
     _GroupStatusAndVersion *
       _GetMcuFwVersion
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         ___wmul
         _crc8
       _GetMcuRunTime
         _WriteUartMessage
           _EUSART1_Write
         ___lldiv
         ___llmod
         _crc8
     _GroupSynthesizers *
       _SetSynthOper
         _InitSynth
           _ReadIntFromEeprom
             _EepromRead
               _DATAEE_ReadByte
             ___awtoft
               ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _pow
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lltoft
                 ___ftpack
               _exp
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftge
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg
                 ___ftsub
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _floor
                   ___altoft
                     ___ftpack
                     ___fttol (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftge
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   _frexp
                 _ldexp
                   _eval_poly (ARG)
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___wmul
                 _log (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   _eval_poly
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___wmul
                   _frexp
               _log
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
           _SWSPI_send_word
             _SWSPI_DAC_send_bits
               _SwSpi_Clk_Pin
               _SwSpi_Data_Pin
             _SWSPI_Synth_send_bits
               _FillArray
                 _memset
               _Make32bitsArray
               _SwSpi_Clk_Pin
               _SwSpi_Data_Pin
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
             _make8
           _StoreIntInEeprom
             _EepromWrite
               _DATAEE_WriteByte
             _make8
           _SwSpi_Set_CE_Pin
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _SwSpi_Set_CE_Pin
       _SynthReadData
         _ReadIntFromEeprom
           _EepromRead
             _DATAEE_ReadByte
           ___awtoft
             ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lmul
             _EepromRead (ARG)
               _DATAEE_ReadByte
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _UpdateSynthFreq
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _FillArray
               _memset
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _StoreIntInEeprom
           _EepromWrite
             _DATAEE_WriteByte
           _make8
     _InitRxMessageParams *
       _ZeroArray
         _memset
     _ZeroArray *
       _memset
     _crc8 *

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _MEMORY_ISR
   _PIN_MANAGER_IOC
     _IOCB4_ISR
       Absolute function(Fake) *
       _IOCB4_DefaultInterruptHandler *
     _IOCB5_ISR
       Absolute function(Fake) *
       _IOCB5_DefaultInterruptHandler *
   _TMR0_ISR
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      46      10       27.3%
BITBANK1           100      0       0       7        0.0%
BANK1              100     33      FB       8       98.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0     89      9E       6       98.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     30      47       1       75.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     226       3        0.0%
DATA                 0      0     226       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Mar 24 18:46:09 2018

              __size_of_SendSystemStartAck 000C                          ??_GetMcuFwVersion 0024  
               __end_of_keepAliveSignalLed 411E                               ___altoft@exp 002F  
                 _eusart1TxBufferRemaining 0047                         readUartMessage@idx 01E2  
                 GetIntFromUartData@idxCon 0084                            _GroupControlMcu 3E04  
                            ___altoft@sign 0030                 __size_of_FLASH_IsWriteDone 000E  
                                       l60 33E8                   GetIntFromUartData@recVal 007B  
                 GetIntFromUartData@retVal 007C                        __end_of_BlinkOkLeds 3632  
                          _SWSPI_send_word 2ECE                        ___wmul@multiplicand 001A  
       __size_of_IOCB4_SetInterruptHandler 000A                            _timer0ReloadVal 0045  
               ?_IOCB4_SetInterruptHandler 0018                               __CFG_CP0$OFF 000000  
                             __CFG_CP1$OFF 000000                               __CFG_CP2$OFF 000000  
                             __CFG_CP3$OFF 000000                               ___ftadd@exp1 0083  
                             ___ftadd@exp2 0082                               ___ftadd@sign 0081  
                              ?_MEMORY_ISR 0001                                        l122 3E58  
                                      l202 1358                                        l211 11DA  
                                      l203 119A                                        l221 129A  
                                      l213 11F2                                        l126 10D0  
                                      l222 1256                                        l206 11A8  
                                      l127 0F96                                        l215 120A  
                                      l207 11D4                                        l320 223A  
                                      l224 12C0                                        l217 1228  
                                      l234 3CE6                                        l330 161E  
                                      l226 12F8                                        l411 28A2  
                                      l235 3CD0                                        l331 1754  
                                      l219 122E                                        l412 28B8  
                                      l332 1640                                        l228 12FE  
                                      l333 165C                                        l318 221A  
                                      l510 0BE4                                        l334 166C  
                                      l326 15D2                                        l319 221A  
                                      l511 0BC6                                        l335 16AA  
                                      l328 160E                                        l505 0AC8  
                                      l521 2408                                        l522 23C2  
                                      l507 0CD2                                        l515 0CB4  
                                      l419 2776                                        l532 331A  
                                      l524 2404                                        l517 0D06  
                                      l533 3302                                        l534 330E  
                                      l550 0F2E                                        l542 0DF4  
                                      l526 2420                                        l703 387A  
                                      l631 2F12                                        l704 3884  
                                      l544 0EB0                                        l641 37DC  
                                      l537 333E                                        l545 0EBE  
                                      l642 37A8                                        l722 3B62  
                                      l538 334A                                        l643 37C2  
                                      l651 2BCA                                        l635 2F74  
                                      l723 3B3A                                        l547 0ECA  
                                      l644 37CC                                        l652 2BD6  
                                      l732 3B4E                                        l724 3B44  
                                      l733 3B58                                        l743 3B9E  
                                      l656 3838                                        l744 3B76  
                                      l657 37FC                                        l649 2B9C  
                                      l753 3B8A                                        l745 3B80  
                                      l674 3824                                        l666 3810  
                                      l658 3806                                        l754 3B94  
                                      l675 382E                                        l667 381A  
                                      l907 3BC0                                        l764 40C0  
                                      l908 3BE4                                        l685 388E  
                                      l765 40B8                                        l909 3BE2  
                                      l686 3852                                        l695 3866  
                                      l687 385C                                        l696 3870  
                                      l769 40BC                                        l894 3A00  
                                      l896 3A26                               __CFG_CPB$OFF 000000  
                             __CFG_CPD$OFF 000000                       readUartMessage@chRec 01E4  
                        ??_Make32bitsArray 001E                                 _SYNTH_REGS 0601  
                                      _exp 138E                                        _log 1DEA  
                                      _pow 1AEE                                        prod 000FF3  
                                      tosl 000FFD                                        wreg 000FE8  
           ?_InitSystemApplicationManagers 0001                               __CFG_LVP$OFF 000000  
               __end_of_FlashReadCondition 2146                             InitSynth@cType 00CC  
                             ___ftdiv@cntr 0063                         __size_of_IOCB4_ISR 0022  
                       __size_of_IOCB5_ISR 0022                               ___ftdiv@sign 0068  
                                     l1044 2CC4                                       l2020 3ECC  
                                     l1045 2C7C                                       l1302 404E  
                                     l1047 2C9C                                       l2031 1B38  
                                     l1055 3D20                                       l1303 4040  
                                     l1048 2C9E                                       l1400 34EC  
                                     l2032 1B28                                       l1161 3E7C  
                                     l1401 34B4                                       l1313 31D2  
                                     l1402 34E8                                       l2034 1B50  
                                     l1314 31E2                                       l2035 1BDA  
                                     l2019 3EDC                                       l1411 1D54  
                                     l1315 31F2                                       l1323 3C08  
                                     l2036 1BB8                                       l1500 086C  
                                     l1316 31FA                                       l1324 3BEE  
                                     l1332 3D8A                                       l2301 2A5E  
                                     l2037 1C60                                       l1421 3696  
                                     l1309 3222                                       l1317 3202  
                                     l1333 3D6E                                       l2302 29E0  
                                     l1430 379E                                       l1422 369A  
                                     l1502 08B8                                       l1318 3212  
                                     l1326 3BF4                                       l2231 13E2  
                                     l1423 369E                                       l1407 1CBE  
                                     l1327 3BFA                                       l1335 3D7C  
                                     l2240 28FC                                       l2232 141C  
                                     l1440 1F34                                       l1424 36CC  
                                     l1504 08E6                                       l2241 28EE  
                                     l2233 144C                                       l1433 3C50  
                                     l1409 1CDE                                       l2234 1576  
                                     l1418 36D0                                       l1434 3C26  
                                     l2170 17AA                                       l1514 264C  
                                     l2243 2916                                       l2235 154C  
                                     l1603 38B4                                       l1419 3692  
                                     l2244 2992                                       l1604 38C8  
                                     l1428 3760                                       l2180 1826  
                                     l2172 17C2                                       l1284 3E16  
                                     l2253 2A90                                       l2229 13A8  
                                     l2181 1836                                       l1285 3E0A  
                                     l2190 192E                                       l2174 1816  
                                     l1294 3F9C                                       l2255 2ADA  
                                     l1439 200E                                       l2271 4070  
                                     l2183 1850                                       l1287 3E10  
                                     l1295 3F90                                       l2249 30D4  
                                     l2257 2B0C                                       l2281 408E  
                                     l1297 3F96                                       l1810 2DBA  
                                     l2258 2B00                                       l2266 3F36  
                                     l2194 415A                                       l2186 1862  
                                     l2187 18CE                                       l1812 2DF8  
                                     l1388 39CC                                       l2276 3F5C  
                                     l1580 344C                                       l1813 2DEE  
                                     l2293 1E0A                                       l1389 39B0  
                                     l2189 18F2                                       l1581 3464  
                                     l1806 2D9C                                       l1902 3A8C  
                                     l1807 2D92                                       l2295 1E2E  
                                     l1583 348A                                       l1584 347E  
                                     l1809 2DD0                                       l1841 19BE  
                                     l1914 2310                                       l1906 2274  
                                     l1498 083E                                       l1586 3496  
                                     l1851 1A1A                                       l1915 2304  
                                     l1860 1A58                                       l1852 1A10  
                                     l1676 3386                                       l1908 22EC  
                                     l1861 1A4E                                       l1837 1994  
                                     l1677 337A                                       l1917 232C  
                                     l1909 22DC                                       l1870 2554  
                                     l1846 1A24                                       l1942 3286  
                                     l1863 1A7C                                       l1943 327A  
                                     l1872 257C                                       l1864 1A98  
                                     l1952 3528                                       l1873 25BA  
                                     l1865 1AC8                                       l1953 351C  
                                     l1874 25E0                                       l1946 32BA  
                                     l1963 36FE                                       l1787 3C6C  
                                     l1891 24E0                                       l1947 32C8  
                                     l1964 36F2                                       l1892 24F0  
                                     l1956 3550                                       l1885 245E  
                                     l1957 355E                                       l1878 316C  
                                     l1887 2486                                       l1879 319C  
                                     l1896 3FC4                                       l1888 24B8  
                                     l8000 0AC0                                       l1889 24C8  
                                     l6510 35DE                                       l7208 3ECC  
                                     l8040 0CB4                                       l8114 33D8  
                                     l8028 0BC6                                       l8220 169A  
                                     ?_exp 0097                                       ?_log 008E  
                                     l7510 154C                                       l8230 170A  
                                     l8128 342E                                       l8304 27AC  
                                     l7426 3750                                       l8158 2C74  
                                     l6498 363C                                       l7804 2F30  
                                     l6942 31C8                                       l7638 2B94  
                                     l7566 3BB0                                       l8294 2766  
                                     l7808 2F3E                                       l8552 27E0  
                                     l8480 263C                                       l8392 0EB6  
                                     l8652 0F8E                                       l8564 28A2  
                                     l7940 1CB6                                       l8492 26C8  
                                     l8398 0EC2                                       l7962 1D44  
                                     l7980 1DA8                                       ?_pow 00A0  
                                     STR_1 0690                                       STR_2 0690  
                                     STR_3 0690                                       STR_4 0690  
                                     STR_5 0690                                       STR_6 0690  
                                     STR_7 0690                                       STR_8 0690  
                                     STR_9 0690                         EepromWrite@address 001C  
                                     _LATA 000F89                                       _LATB 000F8A  
                                     _LATC 000F8B                                       _LATD 000F8C  
                                     _LATE 000F8D                                       u7035 3D2E  
                                     u5524 34DC                                       u6340 2D84  
                                     u6500 19B0                                       u7036 3D30  
                                     u5700 4110                                       u5525 34D6  
                                     u6431 1952                                       u6600 1A60  
                                     u7240 1426                                       u7400 36C4  
                                     u6441 1966                                       u6530 19EE  
                                     u7250 1428                                       u8050 0AFC  
                                     u8130 328A                                       u8115 3E00  
                                     u8116 3E02                                       u6380 2E02  
                                     u7405 36BA                                       u6470 1986  
                                     u7350 1B9E                                       u5718 4112  
                                     u8240 2CA2                                       u8160 352C  
                                     u8320 170A                                       u6641 2446  
                                     u6570 1A2C                                       u6731 2258  
                                     u9107 361E                                       u6820 30FC  
                                     u7540 3F58                                       u8500 332E  
                                     u6661 246E                                       u9117 3662  
                                     u8341 2F8C                                       u9037 1742  
                                     u8261 15A2                                       u6750 2292  
                                     u7470 2BE8                                       u8190 342E  
                                     u8350 2FCE                                       u8255 2CC0  
                                     u9127 367C                                       u9047 33F0  
                                     u8256 2CC2                                       u7560 3F28  
                                     u7800 17EC                                       u6841 253C  
                                     u9137 105C                                       u9057 3400  
                                     u8370 27AC                                       u8450 32F0  
                                     u6755 228A                                       u9067 3410  
                                     u8355 2FC2                                       u7900 41EC  
                                     u6828 30FE                                       u6940 2908  
                                     u7660 2EE2                                       u7820 17FC  
                                     u8620 26C8                                       u8460 32F2  
                                     u7901 41E8                                       u6861 2564  
                                     u9077 3420                                       u6790 2316  
                                     u9087 2BEA                                       u8391 235C  
                                     u8640 21A2                                       u8560 0F1E  
                                     u9097 3604                                       u7690 2F6E  
                                     u7770 17B2                                       u8490 332C  
                                     u8570 0F22                                       u8635 2150  
                                     u8660 21E6                                       u6980 2AB0  
                                     u8900 2D70                                       u7940 1CF8  
                                     u8760 1070                                       u7970 1DA8  
                                     u6988 2AB4                                       u7981 1DE0  
                                     u8898 1330                                       u8899 1350  
                 ??_SwSpi_Set_Synth_Le_Pin 0019                                       _WPUB 000F61  
                            _EUSART1_Write 3BAE                                       _crc8 399E  
                  ??_InitAdcApplicationMgr 0018                                       _data 003D  
                                     _main 343A                               ___ftpack@arg 0018  
                            ?_EUSART1_Read 0001                               ___ftpack@exp 001B  
                          _TMR0_StartTimer 423E                            __end_of_DacInit 28BE  
                                     fsr0h 000FEA                                       fsr1h 000FE2  
                                     fsr2h 000FDA                                       fsr0l 000FE9  
                                     indf1 000FE7                                       indf2 000FDF  
                                     fsr1l 000FE1                                       fsr2l 000FD9  
                                     btemp 0048                              __CFG_BORV$190 000000  
                                     exp@x 0097                                       log@x 008E  
                        ?_FLASH_WriteBlock 001D                           ?_ClearMcuRunTime 0001  
                                     pow@x 00A0                                       pow@y 00A3  
                                     prodh 000FF4                                       prodl 000FF3  
                GroupStatusAndVersion@data 00E6              __size_of_CheckFlashPrecentage 00AE  
                                     start 00DC                              __CFG_IESO$OFF 000000  
                        DacReadValue@TxMsg 00D1                        __end_of_EepromWrite 41E2  
                       ??_FLASH_WriteBlock 0023                              _adcSampleMode 003E  
                             ___ftmul@cntr 0076                               ___param_bank 000000  
                             ___ftmul@sign 0077                             _BlinkErrorLeds 3632  
                             ___fttol@exp1 0086                  __size_of_DATAEE_WriteByte 0036  
                                    ??_exp 0031                                      ??_log 0031  
                             ___fttol@lval 0082                                      ??_pow 0031  
                  __end_of_TMR0_Initialize 3DD0                     _ReadIntFromEeprom$3585 00BC  
                   _ReadIntFromEeprom$3586 00BF             __size_of_OSCILLATOR_Initialize 000E  
            __end_of_OSCILLATOR_Initialize 41D4                                      ?_crc8 0018  
               SWSPI_DAC_send_bits@phrType 001C                                      ?_main 0001  
                                    _EEADR 000FA9                            __end_of___ftadd 1AEE  
                   GetUint16FromBitArray@i 0021                                      STR_10 0690  
                                    STR_11 0690                                      STR_20 069C  
                                    STR_12 0690                                      STR_21 069C  
                                    STR_13 0690                                      STR_22 069C  
                                    STR_14 0690                                      STR_23 069C  
                                    STR_15 0690                                      STR_24 069C  
                                    STR_16 0690                                      STR_25 069C  
                                    STR_17 0690            __size_of_SwSpi_Set_Dac_Sync_Pin 001C  
                                    STR_26 069C                                      STR_18 069C  
                                    STR_27 069C                                      STR_19 069C  
                                    STR_28 069C                                      STR_29 069C  
                          __end_of___ftdiv 2612          __end_of_IOCB4_SetInterruptHandler 4224  
                          __end_of___ftneg 3FD2                            __end_of___lldiv 32DA  
                               _EepromRead 4224                            __end_of___ftmul 252A  
                                    _T0CON 000FD5                            __end_of___llmod 3570  
                          __end_of___ftsub 3AB6                            __end_of___fttol 233E  
                             _SYNTH_ADDRES 0635                             __CFG_DEBUG$OFF 000000  
                          InitSynth@regNum 00CE                            __end_of___lwmod 3AF8  
                      StoreIntInEeprom@idx 0029                                      i2l920 3EBC  
                                    i2l913 3D5C                                      i2l914 3D58  
                                    i2l842 005E                                      i2l851 0090  
                                    i2l844 006A                                      i2l919 3E9C  
                                    i2l847 007A                                      i2l849 0086  
                      StoreIntInEeprom@val 0028                                      _TMR0H 000FD7  
                                    _TMR0L 000FD6                                      _TRISA 000F92  
                                    _TRISB 000F93                                      _TRISC 000F94  
                                    _TRISD 000F95                                      _TRISE 000F96  
                      _SWSPI_DAC_send_bits 37A0          __size_of_TMR0_SetInterruptHandler 000A  
                            __CFG_WRT0$OFF 000000                              __CFG_WRT1$OFF 000000  
               __end_of_GetIntFromUartData 1DEA                              __CFG_WRT2$OFF 000000  
                      ___lmul@multiplicand 001E                  ?_TMR0_SetInterruptHandler 0018  
                            __CFG_WRT3$OFF 000000                               ___lltoft@exp 0028  
                     _EUSART1_Transmit_ISR 3D32                             __CFG_EBTR0$OFF 000000  
                           __CFG_FCMEN$OFF 000000                             __CFG_EBTR1$OFF 000000  
                           __CFG_EBTR2$OFF 000000                             __CFG_EBTR3$OFF 000000  
                        ?_WriteUartMessage 0019                           __end_of_TMR0_ISR 2ECE  
                            __CFG_WRTB$OFF 000000                              __CFG_WRTC$OFF 000000  
                            __CFG_WRTD$OFF 000000                            DacSetValue@data 008A  
                          _DATAEE_ReadByte 415E                             __CFG_EBTRB$OFF 000000  
                            ___awtoft@sign 0023                    __end_of_PIN_MANAGER_IOC 41B8  
                                    crc8@i 001F                                      _make8 3690  
           __size_of_SWSPI_Synth_send_bits 00C6                      __end_of_GetMcuRunTime 26F6  
                                    _count 00EC                                      _floor 28BE  
                                    _ldexp 2A76                                      _frexp 30AC  
                                    _errno 0130              __end_of_SWSPI_Synth_send_bits 2C0A  
                          __end_of_isalpha 3F3E                            __end_of_isdigit 4078  
                                    _group 00F5             __size_of_GetUint16FromBitArray 0068  
                       ??_WriteUartMessage 001D                         __CFG_MCLRE$EXTMCLR 000000  
                            ___ftpack@sign 001C                    ??_GroupStatusAndVersion 0031  
            __end_of_GetUint16FromBitArray 350A                            __end_of_isspace 3F64  
                           ?_EUSART1_Write 0001                                ?_AdcConvert 0001  
                           __CFG_BOREN$OFF 000000                            __end_of_isupper 4096  
                                    pclath 000FFA                                      tablat 000FF5  
                        ??_UpdateSynthFreq 0030                                      pow@yi 00AD  
                           ??_EUSART1_Read 0018                             FillArray@array 0020  
                                    plusw0 000FEB                                      plusw2 000FDB  
                                    status 000FD8                             FillArray@value 0024  
                                    wtemp6 0049                       ReadIntFromEeprom@idx 00C7  
                           __CFG_HFOFST$ON 000000                            __end_of_toupper 415E  
           SwSpi_Set_Synth_Le_Pin@cPinMode 0018                    __end_of_GroupControlMcu 3E34  
                      __size_of_MEMORY_ISR 0004                             __CFG_PBADEN$ON 000000  
                              exp@exponent 009D             CheckFlashPrecentage@precentage 007C  
                     ?_SWSPI_DAC_send_bits 001A                     __end_of_BlinkErrorLeds 3690  
          ??_IOCB4_DefaultInterruptHandler 0001                                ldexp@newexp 0091  
                  __end_of_SWSPI_send_word 2F78                                _BlinkOkLeds 35D4  
                  WriteUartMessage@dataBuf 0019                            __initialization 3016  
                              log@exponent 0091                               __end_of_crc8 39EC  
               __end_of_EUSART1_Initialize 3CC6                               __end_of_main 34A2  
                       DacReadValue@regNum 00CC                          __end_of_IOCB4_ISR 403A  
                        __end_of_IOCB5_ISR 4018                    FLASH_ReadByte@flashAddr 0018  
              ?_INTERRUPT_InterruptManager 0001                           __end_of_GroupDAC 3D9C  
                   __size_of_SynthReadData 025A                            _readUartMessage 1192  
                         __end_of_GroupAdc 405A                                     ??_crc8 001C  
                                   ??_main 0031                              ___fttol@sign1 0081  
                        ?_SwSpi_Set_CE_Pin 0018                              __activetblptr 000002  
                  __size_of_FLASH_ReadByte 0012                           __end_of_ResetMcu 41C6  
                       __size_of_FillArray 001C                               _writeAddress 003F  
                       ??_SwSpi_Set_CE_Pin 0019                      ?_EUSART1_Transmit_ISR 0001  
                  __end_of_TMR0_StartTimer 4242                                     ?_make8 0018  
                                   _ADCON0 000FC2                                     _ADCON1 000FC1  
                                   _ADCON2 000FC0                                     ?_floor 008F  
                FLASH_WriteBlock@writeAddr 001D                                     ?_ldexp 008E  
                                   ?_frexp 0018                           __end_of___altoft 33D0  
                         ___llmod@dividend 0018                                     _ADRESH 000FC4  
                                   _ADRESL 000FC3                                     _EEDATA 000FA8  
                                ??_DacInit 00C8                                     _EECON2 000FA7  
                         __end_of___awtoft 3C90                                     _ANSELA 000F38  
                                   _ANSELB 000F39                                     _ANSELC 000F3A  
                                   _ANSELD 000F3B                                     _ANSELE 000F3C  
                         __end_of___ftpack 2E22             ?_IOCB5_DefaultInterruptHandler 0001  
                         __end_of___lltoft 3748                          _FlashReadUart$605 00DC  
                        ?_FlashSampleWrite 002D                                     i2l2010 3AEE  
                                   i2l1115 2E52                                     i2l1116 2E74  
                                   i2l2005 3ACC                                     i2l1117 2E96  
                                   i2l2006 3AC4                                     i2l1118 2EB8  
                                   i2l2009 3AE4                             __CFG_WDTEN$OFF 000000  
                     StoreIntInEeprom@data 0021                                     _TABLAT 000FF5  
                              _EepromWrite 41D4                                     _RCREG1 000FAE  
                         __end_of___lwtoft 3FF6                    __size_of_FlashEreaseMem 0052  
                __size_of_FLASH_EraseBlock 0034                                     _RCSTA1 000FAB  
                        SynthReadData@data 00C8            __size_of_SwSpi_Set_Synth_Le_Pin 003C  
                                   _OSCCON 000FD3                                     _SPBRG1 000FAF  
                   _SwSpi_Set_Dac_Sync_Pin 40B4                    __size_of_SwSpi_Data_Pin 0056  
                 GroupSynthesizers@request 00E8                         ??_FlashSampleWrite 0060  
                                   _TXREG1 000FAD                                     _TXSTA1 000FAC  
                       __size_of_InitSynth 0276                      ??_SWSPI_DAC_send_bits 001B  
                           _Timer0_SynthLd 00FC                   __end_of_GroupFlashMemory 3C20  
                          ?_BlinkErrorLeds 0001                             __CFG_PWRTEN$ON 000000  
                           __CFG_XINST$OFF 000000                               _synthLdRxCnt 00FE  
                             _synthLdTxCnt 00FD                                     _cState 00F6  
                                   ___ftge 313C                                     ___lmul 38A4  
                SWSPI_Synth_send_bits@data 0025                                     ___wmul 3F64  
                                ??___ftadd 007E                  SWSPI_Synth_send_bits@mask 0080  
                                ??___ftdiv 0060                                  ??___ftneg 001B  
                                ??___lldiv 0020                                  ??___ftmul 006F  
                    __end_of_PLLInitialize 3B36                                  ??___llmod 0020  
                                ??___ftsub 002F                                  ??___fttol 007C  
                                ??___lwmod 0005             SwSpi_Set_Dac_Sync_Pin@cPinMode 0018  
                         ?_TMR0_Initialize 0001                                     _memset 3EC2  
                       __end_of_DAC_ADDRES 0657                                     clear_0 3074  
                                   clear_1 3080                                     clear_2 308C  
                                   clear_3 3098                        __size_of_AdcConvert 022C  
                  __end_of_DATAEE_ReadByte 4172                                ?_EepromRead 0001  
                                   _strtol 176A                                     floor@i 0092  
                    __end_of_SwSpi_Clk_Pin 38A4                                     floor@x 008F  
                    ___ftmul@f3_as_product 0073                   SWSPI_DAC_send_bits@count 001B  
               FlashSampleWrite@channelNum 002F                               __pdataCOMRAM 003F  
                                ??_isalpha 001B                                  ??_isdigit 0018  
                    __end_of_FlashReadUart 176A                           __end_of_testLeds 343A  
                            ?_SetMcuSystem 0001                               __mediumconst 0000  
                                ??_isspace 0018                                     tblptrh 000FF7  
                                ??_isupper 0018                                     tblptrl 000FF6  
                                   tblptru 000FF8                   ADC_GetConversion@channel 001C  
                          ??_EUSART1_Write 0018   TMR0_SetInterruptHandler@InterruptHandler 0018  
IOCB5_SetInterruptHandler@InterruptHandler 0018  IOCB4_SetInterruptHandler@InterruptHandler 0018  
             __size_of_InitRxMessageParams 0028                           ?_PIN_MANAGER_IOC 0001  
                    ReadIntFromEeprom@base 00B8                            _eusart1RxBuffer 0100  
                                ??_toupper 0018                         __size_of_ZeroArray 001E  
            __size_of_INTERRUPT_Initialize 0004                              _SynthReadData 0D0C  
                          _eusart1TxBuffer 0200                            _GetMcuFwVersion 06A6  
                         __end_ofexp@coeff 0675                          _SYSTEM_Initialize 40EC  
                         __end_oflog@coeff 0690                                 __accesstop 0060  
                  __end_of__initialization 309E                                 ___altoft@c 0087  
                            ZeroArray@size 0022                                 ___ftadd@f1 0078  
                               ___ftadd@f2 007B                                 ___ftge@ff1 0018  
                               ___ftge@ff2 001B                         ?_SYSTEM_Initialize 0001  
                             eval_poly@res 008B                              ___rparam_used 000001  
                               ___ftdiv@f1 0029                                 ___ftdiv@f2 002C  
                               ___ftdiv@f3 0064                           ?_GroupControlMcu 00E6  
             GroupStatusAndVersion@request 00E9                               InitSynth@idx 00CD  
                        __end_of_FillArray 40EC                                 ___ftneg@f1 0018  
                               ___awtoft@c 0020                    __end_of_readUartMessage 138E  
                 WriteUartMessage@dataSize 001B                                 ___ftmul@f1 0069  
                               ___ftmul@f2 006C                           ?_SWSPI_send_word 0029  
                             ?_DacSetValue 008A                                 ___ftsub@f1 0084  
                               ___ftsub@f2 0087                                 ___fttol@f1 0078  
                          _Make32bitsArray 3748                             __pcstackCOMRAM 0001  
                             __pidataBANK0 4246                               __pidataBANK1 4198  
                      ??_SYSTEM_Initialize 001C                                  ?_TMR0_ISR 0001  
                      DacReadValue@byteIdx 00D8                                 ___lltoft@c 0020  
                      DacReadValue@byteNum 00CD                              __end_of_make8 36EC  
                      DacReadValue@readVal 00CE                           _DATAEE_WriteByte 3CFC  
                            __end_of_floor 29A0                              __end_of_ldexp 2B44  
                            __end_of_frexp 313C      __end_of_IOCB4_DefaultInterruptHandler 424C  
   __size_of_IOCB4_DefaultInterruptHandler 0002              _IOCB4_DefaultInterruptHandler 424A  
                   _SwSpi_Set_Synth_Le_Pin 3B72                       GroupFlashMemory@data 00E6  
                               ___lwtoft@c 0020                ??_IOCB4_SetInterruptHandler 001A  
          __end_of_DAC_DEFAULT_INIT_VALUES 0653                       __end_of_EUSART1_Read 3A30  
                             ??_MEMORY_ISR 0001                  __size_of_StoreIntInEeprom 0038  
                   __size_of_SetMcuRunTime 0044                     ??_EUSART1_Transmit_ISR 0001  
                        __end_of_InitSynth 0D0C                             ??_SetMcuSystem 001C  
                    TMR0_ISR@CountCallBack 0035              SwSpi_Set_Synth_Le_Pin@phrType 0019  
                  GroupFlashMemory@request 00E8                         _keepAliveSignalLed 4106  
                        make8@dataLocation 001C                __end_of_EUSART1_Receive_ISR 3EC2  
              FLASH_WriteBlock@GIEBitValue 002B                               GroupDAC@data 00E6  
                            ?_SetSynthOper 0001                                    ??_make8 001D  
                                  ??_floor 0031                           ?_TMR0_StartTimer 0001  
                                  ??_ldexp 0093                                    ??_frexp 001D  
                __end_of_SYSTEM_Initialize 4106                            _AdcConvert$3584 00BB  
                           ?_SynthReadData 00C8                              _eusart1RxHead 0038  
                     GetMcuFwVersion@TxMsg 0064                              _eusart1TxHead 003A  
                            _eusart1RxTail 0037                                 __pbssBANK0 00EA  
                               __pbssBANK1 0100                                 __pbssBANK2 0200  
                            _eusart1TxTail 0039                        ?_keepAliveSignalLed 0001  
                       __size_of_eval_poly 00D6                            __CFG_PLLCFG$OFF 000000  
                               _channelArr 0642                                  ?_GroupDAC 00E6  
                               __pnvCOMRAM 0045                                  ?_GroupAdc 00E6  
           __size_of_InitAdcApplicationMgr 0006                 __end_of_SendSystemStartAck 41FC  
            __end_of_InitAdcApplicationMgr 423A                        __size_of_EepromRead 000A  
                       __end_of_MEMORY_ISR 4246                                  ?_ResetMcu 0001  
                       _FlashReadCondition 203A            ??_InitSystemApplicationManagers 0031  
                       __CFG_CCP2MX$PORTC1 000000                                    ?___ftge 0018  
                           FlashReadUart@j 00E0           __end_of_TMR0_SetInterruptHandler 4210  
                                  ?___lmul 001A                                    ?___wmul 0018  
                               ??_TMR0_ISR 0006                         __CFG_CCP3MX$PORTB5 000000  
                       SetChannelMode@data 002C                       ??_keepAliveSignalLed 0018  
                        __end_of_ZeroArray 40B4                                  ?___altoft 0087  
                                  ?_memset 0018                          _ReadIntFromEeprom 1F14  
                           ___lmul@product 0022                        ?_FlashReadCondition 0001  
       __size_of_IOCB5_SetInterruptHandler 000A                                  ?___awtoft 0020  
                                ?___ftpack 0018                               GroupAdc@data 00E6  
                         FlashReadUart@idx 00E4                   GetUint16FromBitArray@res 001F  
                         FlashReadUart@val 00D4                 ?_IOCB5_SetInterruptHandler 0018  
                                ?___lltoft 0020                          _synthLdRxArrayCnt 00EF  
                __size_of_FLASH_WriteBlock 00BC                    __size_of_ADC_Initialize 0016  
               FlashSampleWrite@sampleData 002D                             _FLASH_ReadByte 4186  
                                ?___lwtoft 0020               __end_of_CheckFlashPrecentage 2D74  
                       ?_ReadIntFromEeprom 00B1                                    ?_strtol 0026  
                         ?_DATAEE_ReadByte 0001                 GetMcuFwVersion@compileData 0060  
                          _UpdateSynthFreq 233E                            _Timer0_Sampling 00FB  
                       SynthReadData@TxMsg 01B2                    __end_of_GetMcuFwVersion 0A96  
                       SynthReadData@cType 01DB                                    _OSCCON2 000FD2  
                           ??_SetSynthOper 0031                                    _TBLPTRH 000FF7  
                                  _TBLPTRL 000FF6                                    _TBLPTRU 000FF8  
                                  _OSCTUNE 000F9B                                    _SPBRGH1 000FB0  
                        _synthLdTxArrayCnt 00EE                        ??_ReadIntFromEeprom 00B5  
                                  _DacInit 27DA                      GetIntFromUartData@num 007A  
                         GetMcuRunTime@idx 006D                               ??_AdcConvert 00B1  
                     ??_FlashReadCondition 0024                             _FlashEreaseMem 38FA  
                         _FLASH_EraseBlock 3DD0             __size_of_GroupStatusAndVersion 0024  
                           _SwSpi_Data_Pin 37F8                  _IOCB4_SetInterruptHandler 421A  
                     DATAEE_WriteByte@bAdd 0019              __end_of_GroupStatusAndVersion 3FAE  
                  __end_of_Make32bitsArray 37A0                                 ??_GroupDAC 0031  
                               ??_GroupAdc 0031                              _SetMcuRunTime 3A30  
                       _GetIntFromUartData 1C6E                         FlashReadUart@TxMsg 008F  
                    GroupSynthesizers@data 00E6                                    __Hparam 0000  
                               ??_ResetMcu 002C                  __size_of_WriteUartMessage 0036  
                             ?_BlinkOkLeds 0001                                    __Lparam 0000  
                             _cntRegUpdate 003B                      SendAckMessage@inGroup 0025  
                         ?_readUartMessage 0001                     GroupControlMcu@request 00E9  
                                ?_testLeds 0001                  __end_of_ReadIntFromEeprom 203A  
                      ?_GetIntFromUartData 0066                            __size_of___ftge 0090  
                          __size_of___lmul 0056                                    ___ftadd 1940  
                                  ___ftdiv 252A                                    ___ftneg 3FAE  
                                  ___lldiv 3258                            __size_of___wmul 0026  
                                  ___ftmul 2434                                    ___llmod 350A  
                                  ___ftsub 3A74                                    ___fttol 2246  
               FlashSampleWrite@rotateLeft 0062                               crc8@dataSize 001A  
                 __size_of_ClearMcuRunTime 0014                                    ___lwmod 3AB6  
                     AdcConvert@_adcResult 00B3                               __psmallconst 0600  
                               ??___altoft 008B                     __end_of_FLASH_ReadByte 4198  
                          __CFG_STVREN$OFF 000000                 SWSPI_Synth_send_bits@count 0084  
                    _mcuRunTimeIn5SecTicks 0128                                    _crcCalc 00F2  
                                  _channel 00F8                                    __pcinit 3016  
                               ??___awtoft 0023                                 ??___ftpack 001D  
                        __end_of_eval_poly 2A76                            __size_of_memset 002C  
                                  __ramtop 0600                    __size_of_SendAckMessage 0052  
                               ??___lltoft 0024                    __size_of_SetChannelMode 0030  
                                  __ptext0 343A                                    __ptext1 1192  
                                  __ptext2 3EEE                                    __ptext3 3D68  
                                  __ptext4 3BE8                                    __ptext5 403A  
                                  __ptext6 3F8A                                    __ptext7 3E04  
                                  __ptext8 31CC                                    __ptext9 233E  
                                  crc8@crc 001D                         __end_of_AdcConvert 1192  
                        DacSetValue@retVal 0091                                 ??___lwtoft 0023  
                                _T0CONbits 000FD5          __end_of_IOCB5_SetInterruptHandler 421A  
                                _IOCB4_ISR 4018                                  _IOCB5_ISR 3FF6  
                        BlinkErrorLeds@idx 001C                            __size_of_strtol 01D6  
                    _OSCILLATOR_Initialize 41C6                                    _isalpha 3F16  
                             __size_of_exp 01F6                               __size_of_log 012A  
                                  _isdigit 405A                               __size_of_pow 0180  
                       _EUSART1_Initialize 3C90                   ??_PIN_MANAGER_Initialize 001A  
                                  _isspace 3F3E                  StoreIntInEeprom@numOfByes 0026  
                                  _isupper 4078                                    _request 00F4  
                          GroupDAC@request 00E8                            ??_SynthReadData 0031  
                     ??_GetIntFromUartData 006E                     __end_of_FlashEreaseMem 394C  
               __size_of_SYSTEM_Initialize 001A                    ?_SwSpi_Set_Dac_Sync_Pin 0001  
                   __end_of_SwSpi_Data_Pin 384E                    StoreIntInEeprom@address 0025  
                                  _toupper 414A                       end_of_initialization 309E  
                                  exp@sign 009F                        ?_EUSART1_Initialize 0001  
                         ??_BlinkErrorLeds 0018                               ?_EepromWrite 001B  
                    _SWSPI_Synth_send_bits 2B44                  __size_of_SwSpi_Set_CE_Pin 003C  
                    _GetUint16FromBitArray 34A2                             ?_SetMcuRunTime 0001  
                                  memset@c 001A                                    memset@n 001C  
                                  memset@p 001E                              __Lmediumconst 0000  
                          ___lldiv@divisor 001C                       __end_of_SetMcuSystem 4206  
                                  pow@sign 00AC                            ___lldiv@counter 0024  
                        ?_GroupFlashMemory 00E6                           AdcConvert@adcRes 00BE  
                       __end_of_SYNTH_REGS 0635                       UpdateSynthFreq@cType 008C  
                               ??_testLeds 002C                       SWSPI_send_word@datac 0086  
                               _rxMsgQueue 0186                                    postdec1 000FE5  
                                  postdec2 000FDD            ??_IOCB5_DefaultInterruptHandler 0001  
                       ??_GroupFlashMemory 0031                                    postinc0 000FEE  
                                  postinc2 000FDE                      __size_of_EUSART1_Read 0044  
                     SynthReadData@byteNum 01DD                        _InitRxMessageParams 3EEE  
                              testLeds@idx 002D                    __end_of_UpdateSynthFreq 2434  
                     __size_of_DacSetValue 009E                  __size_of_FlashSampleWrite 0100  
                   __size_of_GetMcuRunTime 00E4                       ??_EUSART1_Initialize 0018  
    __end_of_InitSystemApplicationManagers 414A     __size_of_InitSystemApplicationManagers 0016  
            _InitSystemApplicationManagers 4134                            ?_FLASH_ReadByte 0018  
                                  strtol@a 0061                                    strtol@c 0065  
                                  strtol@s 0026                   _TMR0_SetInterruptHandler 4206  
                                _PORTDbits 000F83                               ??_EepromRead 0019  
                         _StoreIntInEeprom 3C20                                 ?_IOCB4_ISR 0001  
                               ?_IOCB5_ISR 0001                           ?_GetMcuFwVersion 0001  
                           ZeroArray@array 0020             __end_of_SwSpi_Set_Dac_Sync_Pin 40D0  
                             strtol@endptr 0028              FLASH_WriteBlock@flashWrBufPtr 0021  
                       GetMcuRunTime@TxMsg 0060                       ?_InitRxMessageParams 0001  
                          ?_FlashEreaseMem 0001                        EUSART1_Write@txData 0018  
                          ?_SwSpi_Data_Pin 0018                   __end_of_DATAEE_WriteByte 3D32  
              __end_of_SWSPI_DAC_send_bits 37F8                              ?_DacReadValue 00C8  
                     DacReadValue@dacIndex 00D0                   FLASH_EraseBlock@baseAddr 0018  
                         ?_Make32bitsArray 0018                                ___ftdiv@exp 0067  
                             _EUSART1_Read 39EC                       _CheckFlashPrecentage 2CC6  
                        FLASH_WriteBlock@i 002C                         __end_of_EepromRead 422E  
                         DacReadValue@data 00C8                                ___ftmul@exp 0072  
                  ?_SwSpi_Set_Synth_Le_Pin 0018                       __end_of_SetSynthOper 3356  
               __size_of_ReadIntFromEeprom 0126                                  _FillArray 40D0  
             __end_of_INTERRUPT_Initialize 423E                             __end_of___ftge 31CC  
                           __end_of___lmul 38FA                             __end_of___wmul 3F8A  
                      GroupControlMcu@data 00E6                              __pidataCOMRAM 422E  
                        __size_of_TMR0_ISR 00AC                             _ADC_Initialize 411E  
                         _FLASH_WriteBlock 2C0A                     ?_OSCILLATOR_Initialize 0001  
                           __end_of_memset 3EEE                         InitSynth@EepromVal 00C8  
                               floor@expon 0095                              FillArray@size 0022  
                        ??_ClearMcuRunTime 0018                             __end_of_strtol 1940  
                      start_initialization 3016                                 eval_poly@d 0087  
                               eval_poly@n 0089                                 eval_poly@x 0084  
                              _SynthRxOper 0043                           BlinkOkLeds@state 001B  
                 __size_of_TMR0_Initialize 0034                                 ldexp@value 008E  
                              _SynthTxOper 0044            __size_of_PIN_MANAGER_Initialize 0064  
                    ??_InitRxMessageParams 0024                                __end_of_exp 1584  
                              __end_of_log 1F14                                __end_of_pow 1C6E  
            GetUint16FromBitArray@bitarray 0018                   AdcConvert@_adcResult_348 00B5  
                                _InitSynth 0A96                             ??_DacReadValue 00CA  
                            _GetMcuRunTime 2612                     ?_SWSPI_Synth_send_bits 0025  
                          ??_SetMcuRunTime 0021                      __end_of_EUSART1_Write 3BE8  
                   ?_GetUint16FromBitArray 0018                     __size_of_PLLInitialize 003E  
                               frexp@value 0018                            ___llmod@divisor 001C  
                            _Timer0_OneSec 00F9                      ?_CheckFlashPrecentage 0001  
                          ___llmod@counter 0020                        DATAEE_ReadByte@bAdd 0018  
                 __size_of_PIN_MANAGER_IOC 0010                     __size_of_SwSpi_Clk_Pin 0056  
                      SendAckMessage@TxMsg 0026             __end_of_SwSpi_Set_Synth_Le_Pin 3BAE  
                        __size_of_GroupDAC 0034                           _WriteUartMessage 3CC6  
                        __size_of_GroupAdc 0020                     __size_of_FlashReadUart 01E6  
                                 ??___ftge 001E                                   ??___lmul 0022  
                  SendAckMessage@inRequest 0024                                   ??___wmul 001C  
                GetIntFromUartData@idxData 0086                          __size_of_ResetMcu 000E  
                     __size_of_BlinkOkLeds 005E                                 ?_FillArray 0020  
                   __end_of_ADC_Initialize 4134                           ?_UpdateSynthFreq 008A  
                              __pdataBANK0 00FD                                __pdataBANK1 01E5  
                  SWSPI_DAC_send_bits@data 001A                                   ??_memset 001E  
                 __size_of_GroupControlMcu 0030                FLASH_EraseBlock@GIEBitValue 001C  
                           _SendAckMessage 394C                             _SetChannelMode 3E34  
                 __end_of_FLASH_EraseBlock 3E04                         _SendSystemStartAck 41F0  
                 __size_of_SWSPI_send_word 00AA      __end_of_IOCB5_DefaultInterruptHandler 424A  
   __size_of_IOCB5_DefaultInterruptHandler 0002              _IOCB5_DefaultInterruptHandler 4248  
              ??_IOCB5_SetInterruptHandler 001A                                   ??_strtol 002C  
                           _eusart1RxCount 00F7                                ??_IOCB4_ISR 0001  
                              ??_IOCB5_ISR 0001                          __size_of___altoft 007A  
                                _ZeroArray 4096                            DacInit@dacInput 00CA  
                        __size_of___awtoft 0038                          __size_of___ftpack 00AE  
                        __size_of___lltoft 005C                                __pbssCOMRAM 0031  
                        __size_of___lwtoft 0024              __size_of_EUSART1_Transmit_ISR 0036  
                            __pcstackBANK0 0060                              __pcstackBANK1 01B2  
                             _isalpha$3309 001C                        ?_SendSystemStartAck 0001  
                               ?_InitSynth 0001                               _isdigit$3312 0019  
                           ?_GetMcuRunTime 0001                        DacSetValue@dacIndex 0090  
                           BlinkOkLeds@idx 001C                                   ?_DacInit 0001  
                    __size_of_SetMcuSystem 000A                           _SwSpi_Set_CE_Pin 3B36  
             __size_of_EUSART1_Receive_ISR 002E              SWSPI_Synth_send_bits@bitArray 0060  
                  _DAC_DEFAULT_INIT_VALUES 064B                       __size_of_EepromWrite 000E  
                    _TMR0_InterruptHandler 01F5                                  __pnvBANK1 01F5  
                        SetSynthOper@cType 00CF                   __size_of_TMR0_StartTimer 0004  
                   _PIN_MANAGER_Initialize 3570                       ??_SendSystemStartAck 002C  
                    _InitAdcApplicationMgr 4234                                  __pintcode 0008  
                   __end_of_SendAckMessage 399E                                  __ptext100 3FD2  
                                __ptext101 2D74                                  __ptext110 3AB6  
                                __ptext102 34A2                                  __ptext111 41A8  
                                __ptext103 2146                                  __ptext112 3FF6  
                                __ptext104 2C0A                                  __ptext113 4248  
                                __ptext105 3DD0                                  __ptext114 4018  
                                __ptext106 41E2                                  __ptext115 424A  
                                __ptext107 3E64                                  __ptext116 4242  
                                __ptext117 3D32                                  __ptext109 2E22  
                                 ?___ftadd 0078                                  __ptext118 3E94  
                                __ptext119 0000                                   ?___ftdiv 0029  
                   __end_of_SetChannelMode 3E64                                   ?___ftneg 0018  
                                 ?___lldiv 0018                                   ?___ftmul 0069  
                                 ?___llmod 0018                                   ?___ftsub 0084  
                                 ?___fttol 0078                           _FlashSampleWrite 2146  
                                 ?___lwmod 0001                            ?_ADC_Initialize 0001  
                         _Timer0_KeepAlive 00FA                          __size_of_testLeds 006A  
                            _PLLInitialize 3AF8                __size_of_keepAliveSignalLed 0018  
             ??_INTERRUPT_InterruptManager 0006                           __CFG_PRICLKEN$ON 000000  
                               ?_ZeroArray 0020                                __smallconst 0600  
                                 _BAUDCON1 000FB8                              _SwSpi_Clk_Pin 384E  
                                 ?_isalpha 0001                                   ?_isdigit 0001  
                                _eval_poly 29A0                        BlinkErrorLeds@state 001B  
                                 ?_isspace 0001                               _SetMcuSystem 41FC  
                        FlashReadUart@data 0087                                   ?_isupper 0001  
                            _FlashReadUart 1584                             __size_of_make8 005C  
                           __size_of_floor 00E2                             __size_of_ldexp 00CE  
                           __size_of_frexp 0090                   __size_of_DATAEE_ReadByte 0014  
                                 ?_toupper 0001                       _INTERRUPT_Initialize 423A  
           FLASH_WriteBlock@blockStartAddr 0027                __size_of_FlashReadCondition 010C  
                _IOCB5_SetInterruptHandler 4210                          ??_TMR0_Initialize 001A  
                   ??_CheckFlashPrecentage 0078                             ___wmul@product 001C  
                                 _IOCBbits 000F62                                   _LATAbits 000F89  
                                 _LATBbits 000F8A                                   _LATCbits 000F8B  
                                 _LATDbits 000F8C                      __size_of_SetSynthOper 007C  
                 __end_of_StoreIntInEeprom 3C58             FlashReadUart@numOfSampleToRead 00E2  
                                 _PIE1bits 000F9D                                   _PIE2bits 000FA0  
                    _GroupStatusAndVersion 3F8A                          _GroupSynthesizers 31CC  
      __size_of_INTERRUPT_InterruptManager 00D4                 ??_TMR0_SetInterruptHandler 001A  
                     Make32bitsArray@array 0018                                   _PIR1bits 000F9E  
                         ??_FLASH_ReadByte 001C                                   _PIR2bits 000FA1  
                                _rxMsgData 0172                                   i2u560_48 4026  
                                 i2u562_48 4004                                   i2u564_40 3AD0  
                      UpdateSynthFreq@data 008A                        SWSPI_send_word@data 0029  
                       ?_GroupSynthesizers 00E6                                   _RCONbits 000FD0  
                         __CFG_WDTPS$16384 000000                        SynthReadData@regNum 01DC  
                                make8@data 0018                                ??_FillArray 0025  
                                 _TMR0_ISR 2E22                            ?_SendAckMessage 0024  
                          ?_SetChannelMode 002C                             ?_PLLInitialize 0001  
                        ??_PIN_MANAGER_IOC 0001                       __end_of_DacReadValue 27DA  
                      ??_GroupSynthesizers 0031                     GetIntFromUartData@data 0066  
                  SWSPI_send_word@dataSize 002D                                 _ADCON0bits 000FC2  
                 __size_of_readUartMessage 01FC                          ___wmul@multiplier 0018  
                           ?_SwSpi_Clk_Pin 0018                           ??_FlashEreaseMem 002C  
                       __end_of_channelArr 064B                           ??_SwSpi_Data_Pin 0019  
                __size_of_GroupFlashMemory 0038                                 ?_eval_poly 0084  
                           ?_FlashReadUart 0087                          ??_GroupControlMcu 0031  
                          ??_GetMcuRunTime 0025                      DATAEE_WriteByte@bData 0018  
                             _isspace$3315 0019                                ??_InitSynth 0031  
                        ??_SWSPI_send_word 002E                                 DacInit@idx 00CC  
                             _SetSynthOper 32DA                                 _DAC_ADDRES 0653  
              __size_of_GetIntFromUartData 017C                          ___lmul@multiplier 001A  
                  FlashReadCondition@TxMsg 0028                                _INTCON2bits 000FF1  
                    __end_of_SynthReadData 0F66                                  copy_data0 302A  
                                copy_data1 3062                      ?_INTERRUPT_Initialize 0001  
                         __size_of_DacInit 00E4                          ?_DATAEE_WriteByte 0018  
           GetUint16FromBitArray@numOfBits 001A                  __end_of_GroupSynthesizers 3258  
                    EUSART1_Read@readValue 0019                   __end_of_FLASH_WriteBlock 2CC6  
                                 _GroupDAC 3D68                         ??_DATAEE_WriteByte 0019  
                                 _GroupAdc 403A                                  frexp@eptr 001B  
                               _EECON1bits 000FA6                             _synthLdRxArray 01A6  
                                 __Hrparam 0000                     ?_InitAdcApplicationMgr 0001  
                           _synthLdTxArray 019A                                   _ResetMcu 41B8  
                            ??_DacSetValue 008C                                _readAddress 01F1  
                                 __Lrparam 0000               SynthReadData@eepromDataArray 01CB  
                        _ADC_GetConversion 3E64                            _ClearMcuRunTime 4172  
                        __CFG_P2BMX$PORTD2 000000                    ??_OSCILLATOR_Initialize 0018  
                       ?_ADC_GetConversion 0018                          ??_TMR0_StartTimer 0018  
                         __size_of___ftadd 01AE                           __size_of___ftdiv 00E8  
                     _numOfValidateSamples 0031                           __size_of___ftneg 0024  
                         __size_of___lldiv 0082                                   ___altoft 3356  
                         __size_of___ftmul 00F6                           __size_of___llmod 0066  
                         __size_of___ftsub 0042                           __size_of___fttol 00F8  
              __size_of_EUSART1_Initialize 0036                           __size_of___lwmod 0042  
                          GroupAdc@request 00E8                                   ___awtoft 3C58  
                            crc8@dataArray 0018                                   ___ftpack 2D74  
                         _numOfReadSamples 012C                                   ___lltoft 36EC  
                        _FLASH_IsWriteDone 41E2                     _IOCB4_InterruptHandler 01F9  
                      WriteUartMessage@idx 001E                                   ___lwtoft 3FD2  
                              ??_ZeroArray 0024                   GetMcuRunTime@tempRunTime 0069  
                      ??_ADC_GetConversion 001A                               _isupper$3318 0019  
                                 _exp$3589 009A                         ?_FLASH_IsWriteDone 0001  
                                 _dataSize 00F3                      SwSpi_Clk_Pin@cPinMode 0018  
                 __end_of_WriteUartMessage 3CFC                           __size_of_isalpha 0028  
                                 _crcGiven 00F1                           __size_of_isdigit 001E  
                  ??_SWSPI_Synth_send_bits 0029                     SwSpi_Data_Pin@cPinMode 0018  
                  ??_GetUint16FromBitArray 001C             ?_IOCB4_DefaultInterruptHandler 0001  
                         __size_of_isspace 0026                                   __ptext10 0D0C  
                                 __ptext11 32DA                                   __ptext20 1C6E  
                                 __ptext12 2612                                   __ptext21 176A  
                                 __ptext13 3258                                   __ptext30 3E34  
                                 __ptext22 414A                                   __ptext14 06A6  
                                 __ptext31 39EC                                   __ptext23 3F3E  
                                 __ptext15 1584                                   __ptext40 41C6  
                                 __ptext32 4106                                   __ptext24 405A  
                                 __ptext16 4186                                   __ptext41 423A  
                                 __ptext33 41FC                                   __ptext25 3F16  
                                 __ptext17 203A                                   __ptext50 3CC6  
                                 __ptext42 3C90                                   __ptext34 40EC  
                                 __ptext26 4078                                   __ptext18 38FA  
                                 __ptext51 3BAE                                   __ptext43 411E  
                                 __ptext35 3D9C                                   __ptext27 26F6  
                                 __ptext19 2F78                                   __ptext60 41D4  
                                 __ptext52 4134                                   __ptext44 3A30  
                                 __ptext36 4206                                   __ptext28 33D0  
                                 __ptext61 3CFC                                   __ptext53 423E  
                                 __ptext45 350A                                   __ptext37 3570  
                                 __ptext29 41B8                                   __ptext70 37A0  
                                 __ptext62 2ECE                                   __ptext54 3AF8  
                                 __ptext46 41F0                                   __ptext38 4210  
                                 __ptext71 37F8                                   __ptext63 3690  
                                 __ptext55 0A96                                   __ptext47 394C  
                                 __ptext39 421A                                   __ptext80 3632  
                                 __ptext72 384E                                   __ptext64 3B72  
                                 __ptext56 3B36                                   __ptext48 399E  
                                 __ptext81 0F66                                   __ptext73 1F14  
                                 __ptext65 40B4                                   __ptext57 4234  
                                 __ptext49 4096                                   __ptext90 3356  
                                 __ptext82 1AEE                                   __ptext74 38A4  
                                 __ptext66 2B44                                   __ptext58 27DA  
                                 __ptext91 29A0                                   __ptext83 1DEA  
                                 __ptext75 4224                                   __ptext67 3748  
                                 __ptext59 3C20                                   __ptext92 3F64  
                                 __ptext84 138E                                   __ptext76 415E  
                                 __ptext68 40D0                                   __ptext93 2434  
                                 __ptext85 2A76                                   __ptext77 4172  
                                 __ptext69 3EC2                                   __ptext94 3A74  
                                 __ptext86 28BE                                   __ptext78 2CC6  
                                 __ptext95 1940                                   __ptext87 30AC  
                                 __ptext79 35D4                                   __ptext96 3FAE  
                                 __ptext88 2246                                   __ptext97 252A  
                                 __ptext89 313C                                   __ptext98 3C58  
                                 __ptext99 36EC                           __size_of_isupper 001E  
             SWSPI_Synth_send_bits@phrType 0085                   SwSpi_Set_CE_Pin@cPinMode 0018  
                                 _pow$3587 00A6                        ??_FLASH_IsWriteDone 0018  
                                 _pow$3588 00A9                DATAEE_WriteByte@GIEBitValue 001A  
                         __size_of_toupper 0014                   __size_of_GetMcuFwVersion 03F0  
                     _GetMcuFwVersion$2690 0078                       _GetMcuFwVersion$2686 0076  
                            __size_of_crc8 004E                              __size_of_main 0068  
                   ?_GroupStatusAndVersion 00E6                       __end_of_SYNTH_ADDRES 0642  
                                 _msgCount 00F0               _TMR0_DefaultInterruptHandler 000000  
                        ??_DATAEE_ReadByte 0018                  __end_of_ADC_GetConversion 3E94  
             __size_of_SWSPI_DAC_send_bits 0058                        Make32bitsArray@data 001A  
                       SWSPI_send_word@idx 0087                                _groupsArray 01E5  
                          ??_PLLInitialize 0031                                   _testLeds 33D0  
                  __size_of_BlinkErrorLeds 005E                                   int$flags 0048  
                 __size_of_Make32bitsArray 0058                                 strtol@base 002A  
                               strtol@sign 0060                  __end_of_FLASH_IsWriteDone 41F0  
       __end_of_INTERRUPT_InterruptManager 00DC                 _INTERRUPT_InterruptManager 0008  
                       AdcConvert@ldRxSate 00B7                         AdcConvert@ldTxSate 00B9  
                          EepromWrite@data 001B                            ??_SwSpi_Clk_Pin 0019  
                      __end_of_DacSetValue 3016                        _EUSART1_Receive_ISR 3E94  
                 __end_of_SwSpi_Set_CE_Pin 3B72                          ?_FLASH_EraseBlock 0018  
              __end_of_InitRxMessageParams 3F16                                   exp@coeff 0657  
                               _MEMORY_ISR 4242                            ??_FlashReadUart 0089  
                                 log@coeff 0675                     SWSPI_send_word@phrType 0089  
                       ??_FLASH_EraseBlock 001C                                 _INTCONbits 000FF2  
                              ??_eval_poly 002F                                _sampleArray 0132  
                              _sampleCount 00EA                                   isalpha@c 001D  
                                 isdigit@c 001A                     ??_INTERRUPT_Initialize 0018  
                                 memset@p1 0018                          ??_readUartMessage 01DE  
                 __end_of_FlashSampleWrite 2246                                   intlevel2 0000  
                     ?_EUSART1_Receive_ISR 0001                      __end_of_SetMcuRunTime 3A74  
                         ___lwmod@dividend 0001                 __size_of_GroupSynthesizers 008C  
                                 isspace@c 001A                      SynthReadData@data_980 01C8  
                         ___lldiv@dividend 0018                    ?_PIN_MANAGER_Initialize 0001  
                        _SynthReadData$981 01C9                    __end_of_ClearMcuRunTime 4186  
                               _RCSTA1bits 000FAB                                   isupper@c 001A  
                 ReadIntFromEeprom@address 00C2               __end_of_EUSART1_Transmit_ISR 3D68  
                            ??_BlinkOkLeds 0018                           ??_ADC_Initialize 0018  
                    __size_of_DacReadValue 00E4                         Make32bitsArray@idx 0020  
                            AdcConvert@idx 00C0                              _isReWriteDone 003C  
                    UpdateSynthFreq@retVal 008D                       SwSpi_Clk_Pin@phrType 0019  
                    SwSpi_Data_Pin@phrType 0019                    SwSpi_Set_CE_Pin@phrType 0019  
                   __size_of_EUSART1_Write 003A                   ??_SwSpi_Set_Dac_Sync_Pin 0018  
                        EepromRead@address 0019                           ___lldiv@quotient 0020  
                         _GroupFlashMemory 3BE8                            ___lwmod@divisor 0003  
                          _TMR0_Initialize 3D9C                            ___lwmod@counter 0005  
                 __size_of_UpdateSynthFreq 00F6                                   toupper@c 0018  
               ReadIntFromEeprom@numOfByes 00B1                          __CFG_T3CMX$PORTC0 000000  
                  ReadIntFromEeprom@retVal 00C3                              ??_EepromWrite 001C  
                               _AdcConvert 0F66                      ??_EUSART1_Receive_ISR 0001  
           __end_of_PIN_MANAGER_Initialize 35D4                               _DacReadValue 26F6  
             GetIntFromUartData@dataRegArr 0070                          __CFG_FOSC$INTIO67 000000  
                   _IOCB5_InterruptHandler 01F7                            _PIN_MANAGER_IOC 41A8  
                        ?_StoreIntInEeprom 0021                           ??_SendAckMessage 0025  
               __size_of_ADC_GetConversion 0030                           ??_SetChannelMode 002E  
                       ??_StoreIntInEeprom 0028                                _DacSetValue 2F78  

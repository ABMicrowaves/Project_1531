

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Mar 15 17:42:26 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1,group=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1
   105                           	psect	text86,global,reloc=2,class=CODE,delta=1
   106                           	psect	text87,global,reloc=2,class=CODE,delta=1,group=1
   107                           	psect	text88,global,reloc=2,class=CODE,delta=1,group=1
   108                           	psect	text89,global,reloc=2,class=CODE,delta=1,group=1
   109                           	psect	text90,global,reloc=2,class=CODE,delta=1,group=1
   110                           	psect	text91,global,reloc=2,class=CODE,delta=1,group=1
   111                           	psect	text92,global,reloc=2,class=CODE,delta=1,group=1
   112                           	psect	text93,global,reloc=2,class=CODE,delta=1,group=1
   113                           	psect	text94,global,reloc=2,class=CODE,delta=1,group=1
   114                           	psect	text95,global,reloc=2,class=CODE,delta=1,group=1
   115                           	psect	text96,global,reloc=2,class=CODE,delta=1,group=1
   116                           	psect	text97,global,reloc=2,class=CODE,delta=1,group=1
   117                           	psect	text98,global,reloc=2,class=CODE,delta=1,group=1
   118                           	psect	text99,global,reloc=2,class=CODE,delta=1,group=1
   119                           	psect	text100,global,reloc=2,class=CODE,delta=1,group=1
   120                           	psect	text101,global,reloc=2,class=CODE,delta=1,group=1
   121                           	psect	text102,global,reloc=2,class=CODE,delta=1,group=1
   122                           	psect	text103,global,reloc=2,class=CODE,delta=1,group=1
   123                           	psect	text104,global,reloc=2,class=CODE,delta=1,group=1
   124                           	psect	text105,global,reloc=2,class=CODE,delta=1,group=1
   125                           	psect	text106,global,reloc=2,class=CODE,delta=1,group=1
   126                           	psect	text107,global,reloc=2,class=CODE,delta=1
   127                           	psect	text108,global,reloc=2,class=CODE,delta=1
   128                           	psect	text109,global,reloc=2,class=CODE,delta=1
   129                           	psect	text110,global,reloc=2,class=CODE,delta=1
   130                           	psect	text111,global,reloc=2,class=CODE,delta=1
   131                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   132                           	psect	text113,global,reloc=2,class=CODE,delta=1
   133                           	psect	text114,global,reloc=2,class=CODE,delta=1,group=1
   134                           	psect	text115,global,reloc=2,class=CODE,delta=1
   135                           	psect	text116,global,reloc=2,class=CODE,delta=1
   136                           	psect	text117,global,reloc=2,class=CODE,delta=1
   137                           	psect	text118,global,reloc=2,class=CODE,delta=1
   138                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   139                           	psect	text119,global,reloc=2,class=CODE,delta=1
   140                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   141                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   142  0000                     
   143                           ; Version 1.45
   144                           ; Generated 16/11/2017 GMT
   145                           ; 
   146                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   147                           ; All rights reserved.
   148                           ; 
   149                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   150                           ; 
   151                           ; Redistribution and use in source and binary forms, with or without modification, are
   152                           ; permitted provided that the following conditions are met:
   153                           ; 
   154                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   155                           ;        conditions and the following disclaimer.
   156                           ; 
   157                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   158                           ;        of conditions and the following disclaimer in the documentation and/or other
   159                           ;        materials provided with the distribution.
   160                           ; 
   161                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   162                           ;        software without specific prior written permission.
   163                           ; 
   164                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   165                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   166                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   167                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   168                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   169                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   170                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   171                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   172                           ; 
   173                           ; 
   174                           ; Code-generator required, PIC18F45K22 Definitions
   175                           ; 
   176                           ; SFR Addresses
   177  0000                     
   178 ;; Function _TMR0_DefaultInterruptHandler is unused but had its address taken
   179  0000                     
   180                           	psect	idataCOMRAM
   181  003822                     __pidataCOMRAM:
   182                           	opt stack 0
   183                           
   184                           ;initializer for _writeAddress
   185  003822  4000               	dw	16384
   186  003824  0000               	dw	0
   187                           
   188                           ;initializer for _SynthTxOper
   189  003826  01                 	db	1
   190                           
   191                           	psect	idataBANK0
   192  003762                     __pidataBANK0:
   193                           	opt stack 0
   194                           
   195                           ;initializer for _groupsArray
   196  003762  B8                 	db	low _GroupControlMcu
   197  003763  33                 	db	high _GroupControlMcu
   198  003764  96                 	db	low _GroupStatusAndVersion
   199  003765  35                 	db	high _GroupStatusAndVersion
   200  003766  72                 	db	low _GroupAdc
   201  003767  2F                 	db	high _GroupAdc
   202  003768  04                 	db	low _GroupSynthesizers
   203  003769  22                 	db	high _GroupSynthesizers
   204  00376A  02                 	db	low _GroupFlashMemory
   205  00376B  30                 	db	high _GroupFlashMemory
   206  00376C  02                 	db	low _GroupDAC
   207  00376D  36                 	db	high _GroupDAC
   208                           
   209                           ;initializer for _readAddress
   210  00376E  4000               	dw	16384
   211  003770  0000               	dw	0
   212                           
   213                           	psect	smallconst
   214  000600                     __psmallconst:
   215                           	opt stack 0
   216  000600  00                 	db	0
   217  000601                     _SYNTH_REGS:
   218                           	opt stack 0
   219  000601  041C               	dw	1052
   220  000603  0001               	dw	1
   221  000605  300B               	dw	12299
   222  000607  0061               	dw	97
   223  000609  193A               	dw	6458
   224  00060B  00C0               	dw	192
   225  00060D  FCC9               	dw	64713
   226  00060F  1110               	dw	4368
   227  000611  0428               	dw	1064
   228  000613  102D               	dw	4141
   229  000615  00E7               	dw	231
   230  000617  1200               	dw	4608
   231  000619  6076               	dw	24694
   232  00061B  3500               	dw	13568
   233  00061D  0025               	dw	37
   234  00061F  0080               	dw	128
   235  000621  8384               	dw	33668
   236  000623  3000               	dw	12288
   237  000625  0003               	dw	3
   238  000627  0000               	dw	0
   239  000629  0012               	dw	18
   240  00062B  0000               	dw	0
   241  00062D  0001               	dw	1
   242  00062F  0C00               	dw	3072
   243  000631  0680               	dw	1664
   244  000633  0020               	dw	32
   245  000635                     __end_of_SYNTH_REGS:
   246                           	opt stack 0
   247  000635                     _DAC_DEFAULT_INIT_VALUES:
   248                           	opt stack 0
   249  000635  2344               	dw	9028
   250  000637  6344               	dw	25412
   251  000639  A344               	dw	41796
   252  00063B  E344               	dw	58180
   253  00063D                     __end_of_DAC_DEFAULT_INIT_VALUES:
   254                           	opt stack 0
   255  00063D                     _channelArr:
   256                           	opt stack 0
   257  00063D  07                 	db	7
   258  00063E  06                 	db	6
   259  00063F  05                 	db	5
   260  000640  04                 	db	4
   261  000641  19                 	db	25
   262  000642  0A                 	db	10
   263  000643  0D                 	db	13
   264  000644                     __end_of_channelArr:
   265                           	opt stack 0
   266  000644                     _SYNTH_ADDRES:
   267                           	opt stack 0
   268  000644  04                 	db	4
   269  000645  08                 	db	8
   270  000646  0C                 	db	12
   271  000647  0F                 	db	15
   272  000648                     __end_of_SYNTH_ADDRES:
   273                           	opt stack 0
   274  000648                     _DAC_ADDRES:
   275                           	opt stack 0
   276  000648  02                 	db	2
   277  000649  04                 	db	4
   278  00064A  06                 	db	6
   279  00064B  08                 	db	8
   280  00064C                     __end_of_DAC_ADDRES:
   281                           	opt stack 0
   282  00064C                     exp@coeff:
   283                           	opt stack 0
   284  00064C  00                 	db	0
   285  00064D  80                 	db	128
   286  00064E  3F                 	db	63
   287  00064F  72                 	db	114
   288  000650  31                 	db	49
   289  000651  3F                 	db	63
   290  000652  FE                 	db	254
   291  000653  75                 	db	117
   292  000654  3E                 	db	62
   293  000655  58                 	db	88
   294  000656  63                 	db	99
   295  000657  3D                 	db	61
   296  000658  95                 	db	149
   297  000659  1D                 	db	29
   298  00065A  3C                 	db	60
   299  00065B  C5                 	db	197
   300  00065C  AE                 	db	174
   301  00065D  3A                 	db	58
   302  00065E  79                 	db	121
   303  00065F  21                 	db	33
   304  000660  39                 	db	57
   305  000661  94                 	db	148
   306  000662  80                 	db	128
   307  000663  37                 	db	55
   308  000664  93                 	db	147
   309  000665  A7                 	db	167
   310  000666  35                 	db	53
   311  000667  56                 	db	86
   312  000668  15                 	db	21
   313  000669  34                 	db	52
   314  00066A                     __end_ofexp@coeff:
   315                           	opt stack 0
   316  00066A                     log@coeff:
   317                           	opt stack 0
   318  00066A  00                 	db	0
   319  00066B  00                 	db	0
   320  00066C  00                 	db	0
   321  00066D  00                 	db	0
   322  00066E  80                 	db	128
   323  00066F  3F                 	db	63
   324  000670  F0                 	db	240
   325  000671  FF                 	db	255
   326  000672  BE                 	db	190
   327  000673  E2                 	db	226
   328  000674  A9                 	db	169
   329  000675  3E                 	db	62
   330  000676  83                 	db	131
   331  000677  76                 	db	118
   332  000678  BE                 	db	190
   333  000679  AE                 	db	174
   334  00067A  2B                 	db	43
   335  00067B  3E                 	db	62
   336  00067C  3C                 	db	60
   337  00067D  C3                 	db	195
   338  00067E  BD                 	db	189
   339  00067F  D2                 	db	210
   340  000680  13                 	db	19
   341  000681  3D                 	db	61
   342  000682  78                 	db	120
   343  000683  D3                 	db	211
   344  000684  BB                 	db	187
   345  000685                     __end_oflog@coeff:
   346                           	opt stack 0
   347  000685                     STR_1:
   348                           
   349                           ; BSR set to: 0
   350  000685  4D                 	db	77	;'M'
   351  000686  61                 	db	97	;'a'
   352  000687  72                 	db	114	;'r'
   353  000688  20                 	db	32
   354  000689  31                 	db	49	;'1'
   355  00068A  35                 	db	53	;'5'
   356  00068B  20                 	db	32
   357  00068C  32                 	db	50	;'2'
   358  00068D  30                 	db	48	;'0'
   359  00068E  31                 	db	49	;'1'
   360  00068F  38                 	db	56	;'8'
   361  000690  00                 	db	0
   362  000691                     STR_2:
   363                           
   364                           ; BSR set to: 0
   365  000691  31                 	db	49	;'1'
   366  000692  37                 	db	55	;'7'
   367  000693  3A                 	db	58	;':'
   368  000694  34                 	db	52	;'4'
   369  000695  32                 	db	50	;'2'
   370  000696  3A                 	db	58	;':'
   371  000697  32                 	db	50	;'2'
   372  000698  30                 	db	48	;'0'
   373  000699  00                 	db	0
   374                           
   375                           ; #config settings
   376  00069A  00                 	db	0	; dummy byte at the end
   377  0000                     
   378                           	psect	nvCOMRAM
   379  000046                     __pnvCOMRAM:
   380                           	opt stack 0
   381  000046                     _timer0ReloadVal:
   382                           	opt stack 0
   383  000046                     	ds	2
   384                           
   385                           	psect	nvBANK0
   386  0000FD                     __pnvBANK0:
   387                           	opt stack 0
   388  0000FD                     _TMR0_InterruptHandler:
   389                           	opt stack 0
   390  0000FD                     	ds	2
   391  0000FF                     _eusart1TxBufferRemaining:
   392                           	opt stack 0
   393  0000FF                     	ds	1
   394  0000                     _ANSELA	set	3896
   395  0000                     _ANSELE	set	3900
   396  0000                     _ANSELD	set	3899
   397  0000                     _ANSELB	set	3897
   398  0000                     _ANSELC	set	3898
   399  0000                     _ADCON0bits	set	4034
   400  0000                     _ADRESH	set	4036
   401  0000                     _ADRESL	set	4035
   402  0000                     _ADCON2	set	4032
   403  0000                     _ADCON1	set	4033
   404  0000                     _ADCON0	set	4034
   405  0000                     _T0CONbits	set	4053
   406  0000                     _T0CON	set	4053
   407  0000                     _TMR0L	set	4054
   408  0000                     _TMR0H	set	4055
   409  0000                     _EEDATA	set	4008
   410  0000                     _EEADR	set	4009
   411  0000                     _EECON2	set	4007
   412  0000                     _EECON1bits	set	4006
   413  0000                     _TABLAT	set	4085
   414  0000                     _TBLPTRL	set	4086
   415  0000                     _TBLPTRH	set	4087
   416  0000                     _TBLPTRU	set	4088
   417  0000                     _INTCON2bits	set	4081
   418  0000                     _WPUB	set	3937
   419  0000                     _TRISD	set	3989
   420  0000                     _TRISC	set	3988
   421  0000                     _TRISB	set	3987
   422  0000                     _TRISA	set	3986
   423  0000                     _TRISE	set	3990
   424  0000                     _LATC	set	3979
   425  0000                     _LATB	set	3978
   426  0000                     _LATA	set	3977
   427  0000                     _LATD	set	3980
   428  0000                     _LATE	set	3981
   429  0000                     _RCREG1	set	4014
   430  0000                     _RCSTA1bits	set	4011
   431  0000                     _TXREG1	set	4013
   432  0000                     _SPBRGH1	set	4016
   433  0000                     _SPBRG1	set	4015
   434  0000                     _TXSTA1	set	4012
   435  0000                     _RCSTA1	set	4011
   436  0000                     _BAUDCON1	set	4024
   437  0000                     _PIR1bits	set	3998
   438  0000                     _PIE1bits	set	3997
   439  0000                     _PIR2bits	set	4001
   440  0000                     _PIE2bits	set	4000
   441  0000                     _RCONbits	set	4048
   442  0000                     _OSCTUNE	set	3995
   443  0000                     _OSCCON2	set	4050
   444  0000                     _OSCCON	set	4051
   445  0000                     _LATAbits	set	3977
   446  0000                     _LATDbits	set	3980
   447  0000                     _INTCONbits	set	4082
   448  0000                     _IOCB	set	3938
   449  0000                     _LATCbits	set	3979
   450  0000                     _LATBbits	set	3978
   451                           
   452                           	psect	cinit
   453  00280C                     __pcinit:
   454                           	opt stack 0
   455  00280C                     start_initialization:
   456                           	opt stack 0
   457  00280C                     __initialization:
   458                           	opt stack 0
   459                           
   460                           ; Initialize objects allocated to BANK0 (16 bytes)
   461                           ; load TBLPTR registers with __pidataBANK0
   462  00280C  0E62               	movlw	low __pidataBANK0
   463  00280E  6EF6               	movwf	tblptrl,c
   464  002810  0E37               	movlw	high __pidataBANK0
   465  002812  6EF7               	movwf	tblptrh,c
   466  002814  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   467  002816  6EF8               	movwf	tblptru,c
   468  002818  EE00  F0ED         	lfsr	0,__pdataBANK0
   469  00281C  EE10 F010          	lfsr	1,16
   470  002820                     copy_data0:
   471  002820  0009               	tblrd		*+
   472  002822  CFF5 FFEE          	movff	tablat,postinc0
   473  002826  50E5               	movf	postdec1,w,c
   474  002828  50E1               	movf	fsr1l,w,c
   475  00282A  E1FA               	bnz	copy_data0
   476                           
   477                           ; Initialize objects allocated to COMRAM (5 bytes)
   478                           ; load TBLPTR registers with __pidataCOMRAM
   479  00282C  0E22               	movlw	low __pidataCOMRAM
   480  00282E  6EF6               	movwf	tblptrl,c
   481  002830  0E38               	movlw	high __pidataCOMRAM
   482  002832  6EF7               	movwf	tblptrh,c
   483  002834  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   484  002836  6EF8               	movwf	tblptru,c
   485  002838  EE00  F041         	lfsr	0,__pdataCOMRAM
   486  00283C  EE10 F005          	lfsr	1,5
   487  002840                     copy_data1:
   488  002840  0009               	tblrd		*+
   489  002842  CFF5 FFEE          	movff	tablat,postinc0
   490  002846  50E5               	movf	postdec1,w,c
   491  002848  50E1               	movf	fsr1l,w,c
   492  00284A  E1FA               	bnz	copy_data1
   493                           
   494                           ; Clear objects allocated to BANK1 (194 bytes)
   495  00284C  EE01  F000         	lfsr	0,__pbssBANK1
   496  002850  0EC2               	movlw	194
   497  002852                     clear_0:
   498  002852  6AEE               	clrf	postinc0,c
   499  002854  06E8               	decf	wreg,f,c
   500  002856  E1FD               	bnz	clear_0
   501                           
   502                           ; Clear objects allocated to BANK0 (44 bytes)
   503  002858  EE00  F0C1         	lfsr	0,__pbssBANK0
   504  00285C  0E2C               	movlw	44
   505  00285E                     clear_1:
   506  00285E  6AEE               	clrf	postinc0,c
   507  002860  06E8               	decf	wreg,f,c
   508  002862  E1FD               	bnz	clear_1
   509                           
   510                           ; Clear objects allocated to COMRAM (17 bytes)
   511  002864  EE00  F030         	lfsr	0,__pbssCOMRAM
   512  002868  0E11               	movlw	17
   513  00286A                     clear_2:
   514  00286A  6AEE               	clrf	postinc0,c
   515  00286C  06E8               	decf	wreg,f,c
   516  00286E  E1FD               	bnz	clear_2
   517  002870                     end_of_initialization:
   518                           	opt stack 0
   519  002870                     __end_of__initialization:
   520                           	opt stack 0
   521  002870  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   522  002872  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   523  002874  0E00               	movlw	low (__Lmediumconst shr (0+16))
   524  002876  6EF8               	movwf	tblptru,c
   525  002878  0100               	movlb	0
   526  00287A  EFA7  F014         	goto	_main	;jump to C main() function
   527                           tblptru	equ	0xFF8
   528                           tblptrh	equ	0xFF7
   529                           tblptrl	equ	0xFF6
   530                           tablat	equ	0xFF5
   531                           postinc0	equ	0xFEE
   532                           wreg	equ	0xFE8
   533                           postdec1	equ	0xFE5
   534                           fsr1l	equ	0xFE1
   535                           
   536                           	psect	bssCOMRAM
   537  000030                     __pbssCOMRAM:
   538                           	opt stack 0
   539  000030                     _numOfValidateSamples:
   540                           	opt stack 0
   541  000030                     	ds	4
   542  000034                     TMR0_ISR@CountCallBack:
   543                           	opt stack 0
   544  000034                     	ds	2
   545  000036                     _eusart1RxTail:
   546                           	opt stack 0
   547  000036                     	ds	1
   548  000037                     _eusart1RxHead:
   549                           	opt stack 0
   550  000037                     	ds	1
   551  000038                     _eusart1TxTail:
   552                           	opt stack 0
   553  000038                     	ds	1
   554  000039                     _eusart1TxHead:
   555                           	opt stack 0
   556  000039                     	ds	1
   557  00003A                     _cntRegUpdate:
   558                           	opt stack 0
   559  00003A                     	ds	1
   560  00003B                     _isReWriteDone:
   561                           	opt stack 0
   562  00003B                     	ds	1
   563  00003C                     _adcSampleMode:
   564                           	opt stack 0
   565  00003C                     	ds	1
   566  00003D                     _numOfReadSamples:
   567                           	opt stack 0
   568  00003D                     	ds	4
   569                           tblptru	equ	0xFF8
   570                           tblptrh	equ	0xFF7
   571                           tblptrl	equ	0xFF6
   572                           tablat	equ	0xFF5
   573                           postinc0	equ	0xFEE
   574                           wreg	equ	0xFE8
   575                           postdec1	equ	0xFE5
   576                           fsr1l	equ	0xFE1
   577                           
   578                           	psect	dataCOMRAM
   579  000041                     __pdataCOMRAM:
   580                           	opt stack 0
   581  000041                     _writeAddress:
   582                           	opt stack 0
   583  000041                     	ds	4
   584  000045                     _SynthTxOper:
   585                           	opt stack 0
   586  000045                     	ds	1
   587                           tblptru	equ	0xFF8
   588                           tblptrh	equ	0xFF7
   589                           tblptrl	equ	0xFF6
   590                           tablat	equ	0xFF5
   591                           postinc0	equ	0xFEE
   592                           wreg	equ	0xFE8
   593                           postdec1	equ	0xFE5
   594                           fsr1l	equ	0xFE1
   595                           
   596                           	psect	bssBANK0
   597  0000C1                     __pbssBANK0:
   598                           	opt stack 0
   599  0000C1                     _mcuRunTimeIn5SecTicks:
   600                           	opt stack 0
   601  0000C1                     	ds	4
   602  0000C5                     _errno:
   603                           	opt stack 0
   604  0000C5                     	ds	2
   605  0000C7                     _sampleCount:
   606                           	opt stack 0
   607  0000C7                     	ds	2
   608  0000C9                     _count:
   609                           	opt stack 0
   610  0000C9                     	ds	2
   611  0000CB                     _msgCount:
   612                           	opt stack 0
   613  0000CB                     	ds	1
   614  0000CC                     _crcGiven:
   615                           	opt stack 0
   616  0000CC                     	ds	1
   617  0000CD                     _crcCalc:
   618                           	opt stack 0
   619  0000CD                     	ds	1
   620  0000CE                     _data:
   621                           	opt stack 0
   622  0000CE                     	ds	1
   623  0000CF                     _dataSize:
   624                           	opt stack 0
   625  0000CF                     	ds	1
   626  0000D0                     _request:
   627                           	opt stack 0
   628  0000D0                     	ds	1
   629  0000D1                     _group:
   630                           	opt stack 0
   631  0000D1                     	ds	1
   632  0000D2                     _cState:
   633                           	opt stack 0
   634  0000D2                     	ds	1
   635  0000D3                     _eusart1RxCount:
   636                           	opt stack 0
   637  0000D3                     	ds	1
   638  0000D4                     _channel:
   639                           	opt stack 0
   640  0000D4                     	ds	1
   641  0000D5                     _conversionFormat:
   642                           	opt stack 0
   643  0000D5                     	ds	1
   644  0000D6                     _TimerKeepAliveFlag:
   645                           	opt stack 0
   646  0000D6                     	ds	1
   647  0000D7                     _TimerSamplingFlag:
   648                           	opt stack 0
   649  0000D7                     	ds	1
   650  0000D8                     _TimerOneSecFlag:
   651                           	opt stack 0
   652  0000D8                     	ds	1
   653  0000D9                     _rxMsgQueue:
   654                           	opt stack 0
   655  0000D9                     	ds	20
   656                           tblptru	equ	0xFF8
   657                           tblptrh	equ	0xFF7
   658                           tblptrl	equ	0xFF6
   659                           tablat	equ	0xFF5
   660                           postinc0	equ	0xFEE
   661                           wreg	equ	0xFE8
   662                           postdec1	equ	0xFE5
   663                           fsr1l	equ	0xFE1
   664                           
   665                           	psect	dataBANK0
   666  0000ED                     __pdataBANK0:
   667                           	opt stack 0
   668  0000ED                     _groupsArray:
   669                           	opt stack 0
   670  0000ED                     	ds	12
   671  0000F9                     _readAddress:
   672                           	opt stack 0
   673  0000F9                     	ds	4
   674                           tblptru	equ	0xFF8
   675                           tblptrh	equ	0xFF7
   676                           tblptrl	equ	0xFF6
   677                           tablat	equ	0xFF5
   678                           postinc0	equ	0xFEE
   679                           wreg	equ	0xFE8
   680                           postdec1	equ	0xFE5
   681                           fsr1l	equ	0xFE1
   682                           
   683                           	psect	bssBANK1
   684  000100                     __pbssBANK1:
   685                           	opt stack 0
   686  000100                     _eusart1TxBuffer:
   687                           	opt stack 0
   688  000100                     	ds	70
   689  000146                     _eusart1RxBuffer:
   690                           	opt stack 0
   691  000146                     	ds	40
   692  00016E                     _sampleArray:
   693                           	opt stack 0
   694  00016E                     	ds	64
   695  0001AE                     _rxMsgData:
   696                           	opt stack 0
   697  0001AE                     	ds	20
   698                           tblptru	equ	0xFF8
   699                           tblptrh	equ	0xFF7
   700                           tblptrl	equ	0xFF6
   701                           tablat	equ	0xFF5
   702                           postinc0	equ	0xFEE
   703                           wreg	equ	0xFE8
   704                           postdec1	equ	0xFE5
   705                           fsr1l	equ	0xFE1
   706                           
   707                           	psect	cstackBANK1
   708  0001C2                     __pcstackBANK1:
   709                           	opt stack 0
   710  0001C2                     GroupAdc@data:
   711                           	opt stack 0
   712  0001C2                     GroupSynthesizers@data:
   713                           	opt stack 0
   714  0001C2                     GroupFlashMemory@data:
   715                           	opt stack 0
   716  0001C2                     GroupDAC@data:
   717                           	opt stack 0
   718  0001C2                     
   719                           ; 3 bytes @ 0x0
   720  0001C2                     	ds	2
   721  0001C4                     ??_readUartMessage:
   722                           
   723                           ; 1 bytes @ 0x2
   724  0001C4                     	ds	4
   725  0001C8                     readUartMessage@idx:
   726                           	opt stack 0
   727                           
   728                           ; 2 bytes @ 0x6
   729  0001C8                     	ds	2
   730  0001CA                     readUartMessage@chRec:
   731                           	opt stack 0
   732                           
   733                           ; 1 bytes @ 0x8
   734  0001CA                     	ds	1
   735                           tblptru	equ	0xFF8
   736                           tblptrh	equ	0xFF7
   737                           tblptrl	equ	0xFF6
   738                           tablat	equ	0xFF5
   739                           postinc0	equ	0xFEE
   740                           wreg	equ	0xFE8
   741                           postdec1	equ	0xFE5
   742                           fsr1l	equ	0xFE1
   743                           
   744                           	psect	cstackBANK0
   745  000060                     __pcstackBANK0:
   746                           	opt stack 0
   747  000060                     ??_FlashSampleWrite:
   748  000060                     ??___ftdiv:
   749  000060                     ??_FlashReadUart:
   750  000060                     strtol@sign:
   751                           	opt stack 0
   752  000060                     FlashReadCondition@TxMsg:
   753                           	opt stack 0
   754  000060                     GetMcuFwVersion@TxMsg:
   755                           	opt stack 0
   756  000060                     GetMcuRunTime@TxMsg:
   757                           	opt stack 0
   758  000060                     SynthReadData@TxMsg:
   759                           	opt stack 0
   760  000060                     SWSPI_Synth_send_bits@bitArray:
   761                           	opt stack 0
   762                           
   763                           ; 32 bytes @ 0x0
   764  000060                     	ds	1
   765  000061                     strtol@a:
   766                           	opt stack 0
   767                           
   768                           ; 4 bytes @ 0x1
   769  000061                     	ds	1
   770  000062                     FlashSampleWrite@rotateLeft:
   771                           	opt stack 0
   772                           
   773                           ; 2 bytes @ 0x2
   774  000062                     	ds	1
   775  000063                     ___ftdiv@cntr:
   776                           	opt stack 0
   777                           
   778                           ; 1 bytes @ 0x3
   779  000063                     	ds	1
   780  000064                     ___ftdiv@f3:
   781                           	opt stack 0
   782                           
   783                           ; 3 bytes @ 0x4
   784  000064                     	ds	1
   785  000065                     strtol@c:
   786                           	opt stack 0
   787                           
   788                           ; 1 bytes @ 0x5
   789  000065                     	ds	1
   790  000066                     ?_GetIntFromUartData:
   791                           	opt stack 0
   792  000066                     GetIntFromUartData@data:
   793                           	opt stack 0
   794                           
   795                           ; 2 bytes @ 0x6
   796  000066                     	ds	1
   797  000067                     ___ftdiv@exp:
   798                           	opt stack 0
   799                           
   800                           ; 1 bytes @ 0x7
   801  000067                     	ds	1
   802  000068                     ___ftdiv@sign:
   803                           	opt stack 0
   804                           
   805                           ; 1 bytes @ 0x8
   806  000068                     	ds	1
   807  000069                     ?___ftmul:
   808                           	opt stack 0
   809  000069                     ___ftmul@f1:
   810                           	opt stack 0
   811  000069                     GetMcuFwVersion@compileData:
   812                           	opt stack 0
   813  000069                     GetMcuRunTime@tempRunTime:
   814                           	opt stack 0
   815                           
   816                           ; 4 bytes @ 0x9
   817  000069                     	ds	1
   818  00006A                     GetIntFromUartData@dataRegArr:
   819                           	opt stack 0
   820                           
   821                           ; 9 bytes @ 0xA
   822  00006A                     	ds	2
   823  00006C                     ___ftmul@f2:
   824                           	opt stack 0
   825  00006C                     FlashReadUart@TxMsg:
   826                           	opt stack 0
   827                           
   828                           ; 69 bytes @ 0xC
   829  00006C                     	ds	1
   830  00006D                     GetMcuRunTime@idx:
   831                           	opt stack 0
   832                           
   833                           ; 2 bytes @ 0xD
   834  00006D                     	ds	2
   835  00006F                     ??___ftmul:
   836                           
   837                           ; 1 bytes @ 0xF
   838  00006F                     	ds	3
   839  000072                     ___ftmul@exp:
   840                           	opt stack 0
   841                           
   842                           ; 1 bytes @ 0x12
   843  000072                     	ds	1
   844  000073                     GetIntFromUartData@num:
   845                           	opt stack 0
   846  000073                     ___ftmul@f3_as_product:
   847                           	opt stack 0
   848                           
   849                           ; 3 bytes @ 0x13
   850  000073                     	ds	1
   851  000074                     GetIntFromUartData@retVal:
   852                           	opt stack 0
   853                           
   854                           ; 4 bytes @ 0x14
   855  000074                     	ds	2
   856  000076                     ___ftmul@cntr:
   857                           	opt stack 0
   858                           
   859                           ; 1 bytes @ 0x16
   860  000076                     	ds	1
   861  000077                     ___ftmul@sign:
   862                           	opt stack 0
   863                           
   864                           ; 1 bytes @ 0x17
   865  000077                     	ds	1
   866  000078                     ??_CheckFlashPrecentage:
   867  000078                     ?___ftadd:
   868                           	opt stack 0
   869  000078                     ?___fttol:
   870                           	opt stack 0
   871  000078                     GetIntFromUartData@c:
   872                           	opt stack 0
   873  000078                     ___ftadd@f1:
   874                           	opt stack 0
   875  000078                     ___fttol@f1:
   876                           	opt stack 0
   877                           
   878                           ; 3 bytes @ 0x18
   879  000078                     	ds	1
   880  000079                     GetIntFromUartData@idx:
   881                           	opt stack 0
   882                           
   883                           ; 2 bytes @ 0x19
   884  000079                     	ds	2
   885  00007B                     SynthReadData@indx:
   886                           	opt stack 0
   887  00007B                     ___ftadd@f2:
   888                           	opt stack 0
   889                           
   890                           ; 3 bytes @ 0x1B
   891  00007B                     	ds	1
   892  00007C                     ??___fttol:
   893  00007C                     CheckFlashPrecentage@precentage:
   894                           	opt stack 0
   895                           
   896                           ; 3 bytes @ 0x1C
   897  00007C                     	ds	2
   898  00007E                     ??___ftadd:
   899                           
   900                           ; 1 bytes @ 0x1E
   901  00007E                     	ds	2
   902  000080                     SWSPI_Synth_send_bits@mask:
   903                           	opt stack 0
   904                           
   905                           ; 4 bytes @ 0x20
   906  000080                     	ds	1
   907  000081                     ___ftadd@sign:
   908                           	opt stack 0
   909  000081                     ___fttol@sign1:
   910                           	opt stack 0
   911                           
   912                           ; 1 bytes @ 0x21
   913  000081                     	ds	1
   914  000082                     ___ftadd@exp2:
   915                           	opt stack 0
   916  000082                     ___fttol@lval:
   917                           	opt stack 0
   918                           
   919                           ; 4 bytes @ 0x22
   920  000082                     	ds	1
   921  000083                     ___ftadd@exp1:
   922                           	opt stack 0
   923                           
   924                           ; 1 bytes @ 0x23
   925  000083                     	ds	1
   926  000084                     ?___ftsub:
   927                           	opt stack 0
   928  000084                     ?_eval_poly:
   929                           	opt stack 0
   930  000084                     SWSPI_Synth_send_bits@count:
   931                           	opt stack 0
   932  000084                     ___ftsub@f1:
   933                           	opt stack 0
   934  000084                     eval_poly@x:
   935                           	opt stack 0
   936                           
   937                           ; 3 bytes @ 0x24
   938  000084                     	ds	1
   939  000085                     SWSPI_Synth_send_bits@phrType:
   940                           	opt stack 0
   941                           
   942                           ; 1 bytes @ 0x25
   943  000085                     	ds	1
   944  000086                     ??_DacInit:
   945  000086                     ___fttol@exp1:
   946                           	opt stack 0
   947  000086                     DacSetValue@data:
   948                           	opt stack 0
   949  000086                     UpdateTxFreq@data:
   950                           	opt stack 0
   951  000086                     UpdateRxFreq@data:
   952                           	opt stack 0
   953                           
   954                           ; 2 bytes @ 0x26
   955  000086                     	ds	1
   956  000087                     ?___altoft:
   957                           	opt stack 0
   958  000087                     eval_poly@d:
   959                           	opt stack 0
   960  000087                     ___ftsub@f2:
   961                           	opt stack 0
   962  000087                     ___altoft@c:
   963                           	opt stack 0
   964                           
   965                           ; 4 bytes @ 0x27
   966  000087                     	ds	1
   967  000088                     ??_DacSetValue:
   968  000088                     ??_UpdateTxFreq:
   969  000088                     DacInit@dacInput:
   970                           	opt stack 0
   971  000088                     UpdateRxFreq@regData:
   972                           	opt stack 0
   973                           
   974                           ; 4 bytes @ 0x28
   975  000088                     	ds	1
   976  000089                     eval_poly@n:
   977                           	opt stack 0
   978                           
   979                           ; 2 bytes @ 0x29
   980  000089                     	ds	1
   981  00008A                     DacInit@idx:
   982                           	opt stack 0
   983  00008A                     UpdateTxFreq@regData:
   984                           	opt stack 0
   985                           
   986                           ; 4 bytes @ 0x2A
   987  00008A                     	ds	1
   988  00008B                     ??_eval_poly:
   989  00008B                     ??___altoft:
   990  00008B                     DacSetValue@dacIndex:
   991                           	opt stack 0
   992                           
   993                           ; 1 bytes @ 0x2B
   994  00008B                     	ds	1
   995  00008C                     DacSetValue@regData:
   996                           	opt stack 0
   997                           
   998                           ; 2 bytes @ 0x2C
   999  00008C                     	ds	1
  1000  00008D                     eval_poly@res:
  1001                           	opt stack 0
  1002                           
  1003                           ; 3 bytes @ 0x2D
  1004  00008D                     	ds	2
  1005  00008F                     ___altoft@exp:
  1006                           	opt stack 0
  1007                           
  1008                           ; 1 bytes @ 0x2F
  1009  00008F                     	ds	1
  1010  000090                     ?_log:
  1011                           	opt stack 0
  1012  000090                     ?_ldexp:
  1013                           	opt stack 0
  1014  000090                     ___altoft@sign:
  1015                           	opt stack 0
  1016  000090                     ldexp@value:
  1017                           	opt stack 0
  1018  000090                     log@x:
  1019                           	opt stack 0
  1020                           
  1021                           ; 3 bytes @ 0x30
  1022  000090                     	ds	1
  1023  000091                     ?_floor:
  1024                           	opt stack 0
  1025  000091                     floor@x:
  1026                           	opt stack 0
  1027                           
  1028                           ; 3 bytes @ 0x31
  1029  000091                     	ds	2
  1030  000093                     ldexp@newexp:
  1031                           	opt stack 0
  1032  000093                     log@exponent:
  1033                           	opt stack 0
  1034                           
  1035                           ; 2 bytes @ 0x33
  1036  000093                     	ds	1
  1037  000094                     floor@i:
  1038                           	opt stack 0
  1039                           
  1040                           ; 3 bytes @ 0x34
  1041  000094                     	ds	1
  1042  000095                     ??_ldexp:
  1043                           
  1044                           ; 1 bytes @ 0x35
  1045  000095                     	ds	2
  1046  000097                     floor@expon:
  1047                           	opt stack 0
  1048                           
  1049                           ; 2 bytes @ 0x37
  1050  000097                     	ds	2
  1051  000099                     ?_exp:
  1052                           	opt stack 0
  1053  000099                     exp@x:
  1054                           	opt stack 0
  1055                           
  1056                           ; 3 bytes @ 0x39
  1057  000099                     	ds	3
  1058  00009C                     _exp$3293:
  1059                           	opt stack 0
  1060                           
  1061                           ; 3 bytes @ 0x3C
  1062  00009C                     	ds	3
  1063  00009F                     exp@exponent:
  1064                           	opt stack 0
  1065                           
  1066                           ; 2 bytes @ 0x3F
  1067  00009F                     	ds	2
  1068  0000A1                     exp@sign:
  1069                           	opt stack 0
  1070                           
  1071                           ; 1 bytes @ 0x41
  1072  0000A1                     	ds	1
  1073  0000A2                     ?_pow:
  1074                           	opt stack 0
  1075  0000A2                     pow@x:
  1076                           	opt stack 0
  1077                           
  1078                           ; 3 bytes @ 0x42
  1079  0000A2                     	ds	3
  1080  0000A5                     pow@y:
  1081                           	opt stack 0
  1082                           
  1083                           ; 3 bytes @ 0x45
  1084  0000A5                     	ds	3
  1085  0000A8                     _pow$3291:
  1086                           	opt stack 0
  1087                           
  1088                           ; 3 bytes @ 0x48
  1089  0000A8                     	ds	3
  1090  0000AB                     _pow$3292:
  1091                           	opt stack 0
  1092                           
  1093                           ; 3 bytes @ 0x4B
  1094  0000AB                     	ds	3
  1095  0000AE                     pow@sign:
  1096                           	opt stack 0
  1097                           
  1098                           ; 1 bytes @ 0x4E
  1099  0000AE                     	ds	1
  1100  0000AF                     pow@yi:
  1101                           	opt stack 0
  1102                           
  1103                           ; 4 bytes @ 0x4F
  1104  0000AF                     	ds	2
  1105  0000B1                     _FlashReadUart$577:
  1106                           	opt stack 0
  1107                           
  1108                           ; 4 bytes @ 0x51
  1109  0000B1                     	ds	2
  1110  0000B3                     ??_AdcConvert:
  1111                           
  1112                           ; 1 bytes @ 0x53
  1113  0000B3                     	ds	2
  1114  0000B5                     AdcConvert@_adcResult:
  1115                           	opt stack 0
  1116  0000B5                     _FlashReadUart$578:
  1117                           	opt stack 0
  1118                           
  1119                           ; 4 bytes @ 0x55
  1120  0000B5                     	ds	2
  1121  0000B7                     AdcConvert@_adcResult_338:
  1122                           	opt stack 0
  1123                           
  1124                           ; 2 bytes @ 0x57
  1125  0000B7                     	ds	2
  1126  0000B9                     FlashReadUart@j:
  1127                           	opt stack 0
  1128  0000B9                     _AdcConvert$3290:
  1129                           	opt stack 0
  1130                           
  1131                           ; 3 bytes @ 0x59
  1132  0000B9                     	ds	2
  1133  0000BB                     FlashReadUart@idx:
  1134                           	opt stack 0
  1135                           
  1136                           ; 2 bytes @ 0x5B
  1137  0000BB                     	ds	1
  1138  0000BC                     AdcConvert@adcRes:
  1139                           	opt stack 0
  1140                           
  1141                           ; 2 bytes @ 0x5C
  1142  0000BC                     	ds	1
  1143  0000BD                     FlashReadUart@offset:
  1144                           	opt stack 0
  1145                           
  1146                           ; 2 bytes @ 0x5D
  1147  0000BD                     	ds	1
  1148  0000BE                     AdcConvert@idx:
  1149                           	opt stack 0
  1150                           
  1151                           ; 1 bytes @ 0x5E
  1152  0000BE                     	ds	1
  1153  0000BF                     ??_GroupFlashMemory:
  1154  0000BF                     GroupControlMcu@request:
  1155                           	opt stack 0
  1156  0000BF                     GroupStatusAndVersion@request:
  1157                           	opt stack 0
  1158  0000BF                     GroupAdc@request:
  1159                           	opt stack 0
  1160  0000BF                     GroupSynthesizers@request:
  1161                           	opt stack 0
  1162  0000BF                     GroupDAC@request:
  1163                           	opt stack 0
  1164                           
  1165                           ; 1 bytes @ 0x5F
  1166  0000BF                     	ds	1
  1167  0000C0                     GroupFlashMemory@request:
  1168                           	opt stack 0
  1169                           
  1170                           ; 1 bytes @ 0x60
  1171  0000C0                     	ds	1
  1172                           tblptru	equ	0xFF8
  1173                           tblptrh	equ	0xFF7
  1174                           tblptrl	equ	0xFF6
  1175                           tablat	equ	0xFF5
  1176                           postinc0	equ	0xFEE
  1177                           wreg	equ	0xFE8
  1178                           postdec1	equ	0xFE5
  1179                           fsr1l	equ	0xFE1
  1180                           
  1181                           	psect	cstackCOMRAM
  1182  000001                     __pcstackCOMRAM:
  1183                           	opt stack 0
  1184  000001                     ?___lwmod:
  1185                           	opt stack 0
  1186  000001                     ___lwmod@dividend:
  1187                           	opt stack 0
  1188                           
  1189                           ; 2 bytes @ 0x0
  1190  000001                     	ds	2
  1191  000003                     ___lwmod@divisor:
  1192                           	opt stack 0
  1193                           
  1194                           ; 2 bytes @ 0x2
  1195  000003                     	ds	2
  1196  000005                     ___lwmod@counter:
  1197                           	opt stack 0
  1198                           
  1199                           ; 1 bytes @ 0x4
  1200  000005                     	ds	1
  1201  000006                     ??_INTERRUPT_InterruptManager:
  1202                           
  1203                           ; 1 bytes @ 0x5
  1204  000006                     	ds	18
  1205  000018                     ??_EUSART1_Read:
  1206  000018                     ??_isspace:
  1207  000018                     ??_isdigit:
  1208  000018                     ??_isupper:
  1209  000018                     ??_BlinkErrorLeds:
  1210  000018                     ??_BlinkOkLeds:
  1211  000018                     ??_keepAliveSignalLed:
  1212  000018                     ?_ADC_GetConversion:
  1213                           	opt stack 0
  1214  000018                     ?_abs:
  1215                           	opt stack 0
  1216  000018                     ?___wmul:
  1217                           	opt stack 0
  1218  000018                     ?___ftpack:
  1219                           	opt stack 0
  1220  000018                     ?_frexp:
  1221                           	opt stack 0
  1222  000018                     ?___ftneg:
  1223                           	opt stack 0
  1224  000018                     ?___lmul:
  1225                           	opt stack 0
  1226  000018                     ?___lldiv:
  1227                           	opt stack 0
  1228  000018                     ?___llmod:
  1229                           	opt stack 0
  1230  000018                     InitAdcApplicationMgr@channel:
  1231                           	opt stack 0
  1232  000018                     SwSpi_Data_Pin@cPinMode:
  1233                           	opt stack 0
  1234  000018                     SwSpi_Clk_Pin@cPinMode:
  1235                           	opt stack 0
  1236  000018                     SwSpi_Set_CE_Pin@cPinMode:
  1237                           	opt stack 0
  1238  000018                     SwSpi_Set_Synth_Le_Pin@cPinMode:
  1239                           	opt stack 0
  1240  000018                     SwSpi_Set_Dac_Sync_Pin@cPinMode:
  1241                           	opt stack 0
  1242  000018                     EUSART1_Write@txData:
  1243                           	opt stack 0
  1244  000018                     DATAEE_WriteByte@bData:
  1245                           	opt stack 0
  1246  000018                     DATAEE_ReadByte@bAdd:
  1247                           	opt stack 0
  1248  000018                     toupper@c:
  1249                           	opt stack 0
  1250  000018                     PLLUartInitialize@data:
  1251                           	opt stack 0
  1252  000018                     TMR0_SetInterruptHandler@InterruptHandler:
  1253                           	opt stack 0
  1254  000018                     crc8@dataArray:
  1255                           	opt stack 0
  1256  000018                     Make32bitsArray@array:
  1257                           	opt stack 0
  1258  000018                     ___wmul@multiplier:
  1259                           	opt stack 0
  1260  000018                     abs@a:
  1261                           	opt stack 0
  1262  000018                     memset@p1:
  1263                           	opt stack 0
  1264  000018                     ___ftpack@arg:
  1265                           	opt stack 0
  1266  000018                     ___ftge@ff1:
  1267                           	opt stack 0
  1268  000018                     ___ftneg@f1:
  1269                           	opt stack 0
  1270  000018                     frexp@value:
  1271                           	opt stack 0
  1272  000018                     FLASH_ReadByte@flashAddr:
  1273                           	opt stack 0
  1274  000018                     FLASH_EraseBlock@baseAddr:
  1275                           	opt stack 0
  1276  000018                     make8@data:
  1277                           	opt stack 0
  1278  000018                     ___lmul@multiplier:
  1279                           	opt stack 0
  1280  000018                     ___lldiv@dividend:
  1281                           	opt stack 0
  1282  000018                     ___llmod@dividend:
  1283                           	opt stack 0
  1284                           
  1285                           ; 4 bytes @ 0x17
  1286  000018                     	ds	1
  1287  000019                     EepromRead@address:
  1288                           	opt stack 0
  1289  000019                     SwSpi_Data_Pin@phrType:
  1290                           	opt stack 0
  1291  000019                     SwSpi_Clk_Pin@phrType:
  1292                           	opt stack 0
  1293  000019                     SwSpi_Set_CE_Pin@phrType:
  1294                           	opt stack 0
  1295  000019                     SwSpi_Set_Synth_Le_Pin@phrType:
  1296                           	opt stack 0
  1297  000019                     DATAEE_WriteByte@bAdd:
  1298                           	opt stack 0
  1299  000019                     _isdigit$3004:
  1300                           	opt stack 0
  1301  000019                     _isspace$3007:
  1302                           	opt stack 0
  1303  000019                     _isupper$3010:
  1304                           	opt stack 0
  1305  000019                     WriteUartMessage@dataBuf:
  1306                           	opt stack 0
  1307  000019                     EUSART1_Read@readValue:
  1308                           	opt stack 0
  1309                           
  1310                           ; 2 bytes @ 0x18
  1311  000019                     	ds	1
  1312  00001A                     ??_ADC_GetConversion:
  1313  00001A                     ??_abs:
  1314  00001A                     ??_TMR0_Initialize:
  1315  00001A                     ?_ReadIntFromEeprom:
  1316                           	opt stack 0
  1317  00001A                     SWSPI_DAC_send_bits@data:
  1318                           	opt stack 0
  1319  00001A                     DATAEE_WriteByte@GIEBitValue:
  1320                           	opt stack 0
  1321  00001A                     isdigit@c:
  1322                           	opt stack 0
  1323  00001A                     isspace@c:
  1324                           	opt stack 0
  1325  00001A                     isupper@c:
  1326                           	opt stack 0
  1327  00001A                     crc8@dataSize:
  1328                           	opt stack 0
  1329  00001A                     ReadIntFromEeprom@numOfByes:
  1330                           	opt stack 0
  1331  00001A                     ___wmul@multiplicand:
  1332                           	opt stack 0
  1333  00001A                     memset@c:
  1334                           	opt stack 0
  1335  00001A                     Make32bitsArray@data:
  1336                           	opt stack 0
  1337                           
  1338                           ; 4 bytes @ 0x19
  1339  00001A                     	ds	1
  1340  00001B                     ??_isalpha:
  1341  00001B                     BlinkErrorLeds@state:
  1342                           	opt stack 0
  1343  00001B                     BlinkOkLeds@state:
  1344                           	opt stack 0
  1345  00001B                     EepromWrite@data:
  1346                           	opt stack 0
  1347  00001B                     SWSPI_DAC_send_bits@count:
  1348                           	opt stack 0
  1349  00001B                     ___ftpack@exp:
  1350                           	opt stack 0
  1351  00001B                     WriteUartMessage@dataSize:
  1352                           	opt stack 0
  1353  00001B                     frexp@eptr:
  1354                           	opt stack 0
  1355  00001B                     ___ftge@ff2:
  1356                           	opt stack 0
  1357                           
  1358                           ; 3 bytes @ 0x1A
  1359  00001B                     	ds	1
  1360  00001C                     ??_crc8:
  1361  00001C                     EepromWrite@address:
  1362                           	opt stack 0
  1363  00001C                     SWSPI_DAC_send_bits@phrType:
  1364                           	opt stack 0
  1365  00001C                     FLASH_EraseBlock@GIEBitValue:
  1366                           	opt stack 0
  1367  00001C                     ADC_GetConversion@channel:
  1368                           	opt stack 0
  1369  00001C                     make8@dataLocation:
  1370                           	opt stack 0
  1371  00001C                     ___ftpack@sign:
  1372                           	opt stack 0
  1373  00001C                     _isalpha$3001:
  1374                           	opt stack 0
  1375  00001C                     BlinkErrorLeds@idx:
  1376                           	opt stack 0
  1377  00001C                     BlinkOkLeds@idx:
  1378                           	opt stack 0
  1379  00001C                     ___wmul@product:
  1380                           	opt stack 0
  1381  00001C                     memset@n:
  1382                           	opt stack 0
  1383  00001C                     ___lmul@multiplicand:
  1384                           	opt stack 0
  1385  00001C                     ___lldiv@divisor:
  1386                           	opt stack 0
  1387  00001C                     ___llmod@divisor:
  1388                           	opt stack 0
  1389                           
  1390                           ; 4 bytes @ 0x1B
  1391  00001C                     	ds	1
  1392  00001D                     ??_make8:
  1393  00001D                     ??___ftpack:
  1394  00001D                     ??_frexp:
  1395  00001D                     ??_WriteUartMessage:
  1396  00001D                     isalpha@c:
  1397                           	opt stack 0
  1398  00001D                     crc8@crc:
  1399                           	opt stack 0
  1400  00001D                     FLASH_WriteBlock@writeAddr:
  1401                           	opt stack 0
  1402                           
  1403                           ; 4 bytes @ 0x1C
  1404  00001D                     	ds	1
  1405  00001E                     ??_ReadIntFromEeprom:
  1406  00001E                     ??_Make32bitsArray:
  1407  00001E                     ??___ftge:
  1408  00001E                     WriteUartMessage@idx:
  1409                           	opt stack 0
  1410  00001E                     memset@p:
  1411                           	opt stack 0
  1412                           
  1413                           ; 2 bytes @ 0x1D
  1414  00001E                     	ds	1
  1415  00001F                     crc8@i:
  1416                           	opt stack 0
  1417                           
  1418                           ; 2 bytes @ 0x1E
  1419  00001F                     	ds	1
  1420  000020                     ?___awtoft:
  1421                           	opt stack 0
  1422  000020                     ?___lltoft:
  1423                           	opt stack 0
  1424  000020                     ?___lwtoft:
  1425                           	opt stack 0
  1426  000020                     ___llmod@counter:
  1427                           	opt stack 0
  1428  000020                     ZeroArray@array:
  1429                           	opt stack 0
  1430  000020                     ZeroBitsArray@array:
  1431                           	opt stack 0
  1432  000020                     Make32bitsArray@idx:
  1433                           	opt stack 0
  1434  000020                     ___awtoft@c:
  1435                           	opt stack 0
  1436  000020                     ___lwtoft@c:
  1437                           	opt stack 0
  1438  000020                     ___lmul@product:
  1439                           	opt stack 0
  1440  000020                     ___lldiv@quotient:
  1441                           	opt stack 0
  1442  000020                     ___lltoft@c:
  1443                           	opt stack 0
  1444                           
  1445                           ; 4 bytes @ 0x1F
  1446  000020                     	ds	1
  1447  000021                     FLASH_WriteBlock@flashWrBufPtr:
  1448                           	opt stack 0
  1449  000021                     StoreIntInEeprom@data:
  1450                           	opt stack 0
  1451                           
  1452                           ; 4 bytes @ 0x20
  1453  000021                     	ds	1
  1454  000022                     ZeroArray@size:
  1455                           	opt stack 0
  1456  000022                     SWSPI_Synth_send_bits@data:
  1457                           	opt stack 0
  1458  000022                     ReadIntFromEeprom@retVal:
  1459                           	opt stack 0
  1460                           
  1461                           ; 4 bytes @ 0x21
  1462  000022                     	ds	1
  1463  000023                     ??_FLASH_WriteBlock:
  1464  000023                     ___awtoft@sign:
  1465                           	opt stack 0
  1466                           
  1467                           ; 1 bytes @ 0x22
  1468  000023                     	ds	1
  1469  000024                     ??_FlashReadCondition:
  1470  000024                     ??___lltoft:
  1471  000024                     ?_strtol:
  1472                           	opt stack 0
  1473  000024                     SendAckMessage@inRequest:
  1474                           	opt stack 0
  1475  000024                     ___lldiv@counter:
  1476                           	opt stack 0
  1477  000024                     SynthReadData@data:
  1478                           	opt stack 0
  1479  000024                     strtol@s:
  1480                           	opt stack 0
  1481                           
  1482                           ; 2 bytes @ 0x23
  1483  000024                     	ds	1
  1484  000025                     ??_GetMcuRunTime:
  1485  000025                     SendAckMessage@inGroup:
  1486                           	opt stack 0
  1487  000025                     StoreIntInEeprom@address:
  1488                           	opt stack 0
  1489                           
  1490                           ; 1 bytes @ 0x24
  1491  000025                     	ds	1
  1492  000026                     ReadIntFromEeprom@address:
  1493                           	opt stack 0
  1494  000026                     StoreIntInEeprom@numOfByes:
  1495                           	opt stack 0
  1496  000026                     strtol@endptr:
  1497                           	opt stack 0
  1498  000026                     SWSPI_send_word@data:
  1499                           	opt stack 0
  1500  000026                     SendAckMessage@TxMsg:
  1501                           	opt stack 0
  1502                           
  1503                           ; 6 bytes @ 0x25
  1504  000026                     	ds	1
  1505  000027                     FLASH_WriteBlock@blockStartAddr:
  1506                           	opt stack 0
  1507                           
  1508                           ; 4 bytes @ 0x26
  1509  000027                     	ds	1
  1510  000028                     StoreIntInEeprom@val:
  1511                           	opt stack 0
  1512  000028                     ___lltoft@exp:
  1513                           	opt stack 0
  1514  000028                     strtol@base:
  1515                           	opt stack 0
  1516                           
  1517                           ; 2 bytes @ 0x27
  1518  000028                     	ds	1
  1519  000029                     ?___ftdiv:
  1520                           	opt stack 0
  1521  000029                     StoreIntInEeprom@idx:
  1522                           	opt stack 0
  1523  000029                     ___ftdiv@f1:
  1524                           	opt stack 0
  1525                           
  1526                           ; 3 bytes @ 0x28
  1527  000029                     	ds	1
  1528  00002A                     ??_strtol:
  1529  00002A                     SWSPI_send_word@dataSize:
  1530                           	opt stack 0
  1531                           
  1532                           ; 1 bytes @ 0x29
  1533  00002A                     	ds	1
  1534  00002B                     SWSPI_send_word@datac:
  1535                           	opt stack 0
  1536  00002B                     FLASH_WriteBlock@GIEBitValue:
  1537                           	opt stack 0
  1538                           
  1539                           ; 1 bytes @ 0x2A
  1540  00002B                     	ds	1
  1541  00002C                     ??_testLeds:
  1542  00002C                     FLASH_WriteBlock@i:
  1543                           	opt stack 0
  1544  00002C                     SetAdcOperationMode@data:
  1545                           	opt stack 0
  1546  00002C                     SetConversionResultFormat@data:
  1547                           	opt stack 0
  1548  00002C                     SetChannelMode@data:
  1549                           	opt stack 0
  1550  00002C                     FlashReadUart@numOfSampleToRead:
  1551                           	opt stack 0
  1552  00002C                     SWSPI_send_word@idx:
  1553                           	opt stack 0
  1554  00002C                     ___ftdiv@f2:
  1555                           	opt stack 0
  1556                           
  1557                           ; 3 bytes @ 0x2B
  1558  00002C                     	ds	1
  1559  00002D                     testLeds@idx:
  1560                           	opt stack 0
  1561  00002D                     FlashSampleWrite@sampleData:
  1562                           	opt stack 0
  1563                           
  1564                           ; 2 bytes @ 0x2C
  1565  00002D                     	ds	1
  1566  00002E                     SWSPI_send_word@phrType:
  1567                           	opt stack 0
  1568                           
  1569                           ; 1 bytes @ 0x2D
  1570  00002E                     	ds	1
  1571  00002F                     FlashSampleWrite@channelNum:
  1572                           	opt stack 0
  1573  00002F                     InitTxSynth@idx:
  1574                           	opt stack 0
  1575  00002F                     InitRxSynth@idx:
  1576                           	opt stack 0
  1577                           
  1578                           ; 1 bytes @ 0x2E
  1579  00002F                     	ds	1
  1580  000030                     tblptru	equ	0xFF8
  1581                           tblptrh	equ	0xFF7
  1582                           tblptrl	equ	0xFF6
  1583                           tablat	equ	0xFF5
  1584                           postinc0	equ	0xFEE
  1585                           wreg	equ	0xFE8
  1586                           postdec1	equ	0xFE5
  1587                           fsr1l	equ	0xFE1
  1588                           
  1589                           ; 1 bytes @ 0x2F
  1590 ;;
  1591 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1592 ;;
  1593 ;; *************** function _main *****************
  1594 ;; Defined at:
  1595 ;;		line 13 in file "main.c"
  1596 ;; Parameters:    Size  Location     Type
  1597 ;;		None
  1598 ;; Auto vars:     Size  Location     Type
  1599 ;;		None
  1600 ;; Return value:  Size  Location     Type
  1601 ;;                  1    wreg      void 
  1602 ;; Registers used:
  1603 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1604 ;; Tracked objects:
  1605 ;;		On entry : 0/0
  1606 ;;		On exit  : 0/0
  1607 ;;		Unchanged: 0/0
  1608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1609 ;;      Params:         0       0       0       0       0       0       0
  1610 ;;      Locals:         0       0       0       0       0       0       0
  1611 ;;      Temps:          0       0       0       0       0       0       0
  1612 ;;      Totals:         0       0       0       0       0       0       0
  1613 ;;Total ram usage:        0 bytes
  1614 ;; Hardware stack levels required when called:   11
  1615 ;; This function calls:
  1616 ;;		_AdcConvert
  1617 ;;		_BlinkErrorLeds
  1618 ;;		_BlinkOkLeds
  1619 ;;		_CheckFlashPrecentage
  1620 ;;		_InitSystemApplicationManagers
  1621 ;;		_SendSystemStartAck
  1622 ;;		_SetMcuRunTime
  1623 ;;		_SetMcuSystem
  1624 ;;		_keepAliveSignalLed
  1625 ;;		_keepAliveSignalUart
  1626 ;;		_readUartMessage
  1627 ;; This function is called by:
  1628 ;;		Startup code after reset
  1629 ;; This function uses a non-reentrant model
  1630 ;;
  1631                           
  1632                           	psect	text0
  1633  00294E                     __ptext0:
  1634                           	opt stack 0
  1635  00294E                     _main:
  1636                           	opt stack 20
  1637                           
  1638                           ;main.c: 16: SetMcuSystem();
  1639                           
  1640                           ;incstack = 0
  1641  00294E  EC02  F01C         	call	_SetMcuSystem	;wreg free
  1642                           
  1643                           ;main.c: 19: InitSystemApplicationManagers();
  1644  002952  EC7F  F01B         	call	_InitSystemApplicationManagers	;wreg free
  1645                           
  1646                           ;main.c: 22: SendSystemStartAck();
  1647  002956  ECFC  F01B         	call	_SendSystemStartAck	;wreg free
  1648                           
  1649                           ;main.c: 25: BlinkOkLeds(OK_START_SYSTEM);
  1650  00295A  0E03               	movlw	3
  1651  00295C  EC38  F015         	call	_BlinkOkLeds
  1652  002960                     
  1653                           ;main.c: 28: {
  1654                           ;main.c: 29: readUartMessage();
  1655  002960  EC2F  F005         	call	_readUartMessage	;wreg free
  1656                           
  1657                           ;main.c: 31: if (TimerOneSecFlag == 1)
  1658  002964  0100               	movlb	0	; () banked
  1659  002966  05D8               	decf	_TimerOneSecFlag& (0+255),w,b	;volatile
  1660  002968  A4D8               	btfss	status,2,c
  1661  00296A  D006               	goto	l1447
  1662                           
  1663                           ; BSR set to: 0
  1664                           ;main.c: 32: {
  1665                           ;main.c: 34: SetMcuRunTime();
  1666  00296C  EC45  F018         	call	_SetMcuRunTime	;wreg free
  1667                           
  1668                           ;main.c: 35: TimerOneSecFlag = 0;
  1669  002970  0E00               	movlw	0
  1670  002972  0100               	movlb	0	; () banked
  1671  002974  6FD8               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
  1672                           
  1673                           ;main.c: 36: }
  1674  002976  D7F4               	goto	l1446
  1675  002978                     l1447:
  1676                           
  1677                           ; BSR set to: 0
  1678                           ;main.c: 37: else if (TimerSamplingFlag == 1)
  1679                           
  1680                           ; BSR set to: 0
  1681  002978  05D7               	decf	_TimerSamplingFlag& (0+255),w,b	;volatile
  1682  00297A  A4D8               	btfss	status,2,c
  1683  00297C  D010               	goto	l1449
  1684                           
  1685                           ; BSR set to: 0
  1686                           ;main.c: 38: {
  1687                           ;main.c: 39: keepAliveSignalLed();
  1688  00297E  EC68  F01B         	call	_keepAliveSignalLed	;wreg free
  1689                           
  1690                           ;main.c: 41: if(1 == CheckFlashPrecentage())
  1691  002982  EC54  F010         	call	_CheckFlashPrecentage	;wreg free
  1692  002986  06E8               	decf	wreg,f,c
  1693  002988  A4D8               	btfss	status,2,c
  1694  00298A  D003               	goto	l1450
  1695                           
  1696                           ;main.c: 42: {
  1697                           ;main.c: 43: BlinkErrorLeds(FAIL_FLASH_MORE_THEN_HELF);
  1698  00298C  0E04               	movlw	4
  1699  00298E  EC67  F015         	call	_BlinkErrorLeds
  1700  002992                     l1450:
  1701                           
  1702                           ;main.c: 44: }
  1703                           ;main.c: 47: AdcConvert();
  1704  002992  EC11  F008         	call	_AdcConvert	;wreg free
  1705                           
  1706                           ;main.c: 49: TimerSamplingFlag = 0;
  1707  002996  0E00               	movlw	0
  1708  002998  0100               	movlb	0	; () banked
  1709  00299A  6FD7               	movwf	_TimerSamplingFlag& (0+255),b	;volatile
  1710                           
  1711                           ;main.c: 50: }
  1712  00299C  D7E1               	goto	l1446
  1713  00299E                     l1449:
  1714                           
  1715                           ; BSR set to: 0
  1716                           ;main.c: 51: else if (TimerKeepAliveFlag == 1)
  1717                           
  1718                           ; BSR set to: 0
  1719  00299E  05D6               	decf	_TimerKeepAliveFlag& (0+255),w,b	;volatile
  1720  0029A0  A4D8               	btfss	status,2,c
  1721  0029A2  D7DE               	goto	l1446
  1722                           
  1723                           ; BSR set to: 0
  1724                           ;main.c: 52: {
  1725                           ;main.c: 53: keepAliveSignalUart();
  1726  0029A4  ECF6  F01B         	call	_keepAliveSignalUart	;wreg free
  1727                           
  1728                           ;main.c: 54: TimerKeepAliveFlag = 0;
  1729  0029A8  0E00               	movlw	0
  1730  0029AA  0100               	movlb	0	; () banked
  1731  0029AC  6FD6               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
  1732                           
  1733                           ; BSR set to: 0
  1734                           
  1735                           ; BSR set to: 0
  1736                           
  1737                           ; BSR set to: 0
  1738                           
  1739                           ; BSR set to: 0
  1740  0029AE  D7D8               	goto	l1446
  1741  0029B0                     __end_of_main:
  1742                           	opt stack 0
  1743                           tblptru	equ	0xFF8
  1744                           tblptrh	equ	0xFF7
  1745                           tblptrl	equ	0xFF6
  1746                           tablat	equ	0xFF5
  1747                           postinc0	equ	0xFEE
  1748                           wreg	equ	0xFE8
  1749                           postdec1	equ	0xFE5
  1750                           fsr1l	equ	0xFE1
  1751                           status	equ	0xFD8
  1752                           
  1753 ;; *************** function _readUartMessage *****************
  1754 ;; Defined at:
  1755 ;;		line 28 in file "EusartApp.c"
  1756 ;; Parameters:    Size  Location     Type
  1757 ;;		None
  1758 ;; Auto vars:     Size  Location     Type
  1759 ;;  idx             2    6[BANK1 ] int 
  1760 ;;  chRec           1    8[BANK1 ] unsigned char 
  1761 ;; Return value:  Size  Location     Type
  1762 ;;                  1    wreg      void 
  1763 ;; Registers used:
  1764 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1765 ;; Tracked objects:
  1766 ;;		On entry : 0/0
  1767 ;;		On exit  : 0/0
  1768 ;;		Unchanged: 0/0
  1769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1770 ;;      Params:         0       0       0       0       0       0       0
  1771 ;;      Locals:         0       0       3       0       0       0       0
  1772 ;;      Temps:          0       0       4       0       0       0       0
  1773 ;;      Totals:         0       0       7       0       0       0       0
  1774 ;;Total ram usage:        7 bytes
  1775 ;; Hardware stack levels used:    1
  1776 ;; Hardware stack levels required when called:   10
  1777 ;; This function calls:
  1778 ;;		_EUSART1_Read
  1779 ;;		_GroupAdc
  1780 ;;		_GroupControlMcu
  1781 ;;		_GroupDAC
  1782 ;;		_GroupFlashMemory
  1783 ;;		_GroupStatusAndVersion
  1784 ;;		_GroupSynthesizers
  1785 ;;		_InitRxMessageParams
  1786 ;;		_ZeroArray
  1787 ;;		_crc8
  1788 ;; This function is called by:
  1789 ;;		_main
  1790 ;; This function uses a non-reentrant model
  1791 ;;
  1792                           
  1793                           	psect	text1
  1794  000A5E                     __ptext1:
  1795                           	opt stack 0
  1796  000A5E                     _readUartMessage:
  1797                           	opt stack 20
  1798                           
  1799                           ;EusartApp.c: 31: uint8_t chRec = (0);
  1800                           
  1801                           ; BSR set to: 0
  1802                           ;incstack = 0
  1803  000A5E  0E00               	movlw	0
  1804  000A60  0101               	movlb	1	; () banked
  1805  000A62  6FCA               	movwf	readUartMessage@chRec& (0+255),b
  1806                           
  1807                           ;EusartApp.c: 32: switch(cState)
  1808  000A64  D0DF               	goto	l190
  1809  000A66                     
  1810                           ;EusartApp.c: 37: if(eusart1RxCount > (4))
  1811                           
  1812                           ; BSR set to: 1
  1813  000A66  0E04               	movlw	4
  1814  000A68  0100               	movlb	0	; () banked
  1815  000A6A  65D3               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1816  000A6C  0012               	return	
  1817                           
  1818                           ; BSR set to: 0
  1819                           ;EusartApp.c: 38: {
  1820                           ;EusartApp.c: 39: cState = FIND_MAGIC;
  1821  000A6E  0E01               	movlw	1
  1822  000A70  6FD2               	movwf	_cState& (0+255),b
  1823                           
  1824                           ; BSR set to: 0
  1825                           ;EusartApp.c: 40: }
  1826                           ;EusartApp.c: 41: return;
  1827                           
  1828                           ; BSR set to: 0
  1829  000A72  0012               	return	
  1830  000A74                     
  1831                           ; BSR set to: 0
  1832                           ;EusartApp.c: 45: InitRxMessageParams();
  1833                           
  1834                           ; BSR set to: 0
  1835  000A74  EC69  F01A         	call	_InitRxMessageParams	;wreg free
  1836                           
  1837                           ;EusartApp.c: 46: msgCount = 0;
  1838  000A78  0E00               	movlw	0
  1839  000A7A  0100               	movlb	0	; () banked
  1840  000A7C  6FCB               	movwf	_msgCount& (0+255),b
  1841                           
  1842                           ; BSR set to: 0
  1843                           ;EusartApp.c: 47: if(eusart1RxCount > 1)
  1844  000A7E  0E01               	movlw	1
  1845  000A80  65D3               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1846  000A82  D00E               	goto	l195
  1847                           
  1848                           ; BSR set to: 0
  1849                           ;EusartApp.c: 48: {
  1850                           ;EusartApp.c: 49: chRec = EUSART1_Read();
  1851  000A84  EC23  F018         	call	_EUSART1_Read	;wreg free
  1852  000A88  0101               	movlb	1	; () banked
  1853  000A8A  6FCA               	movwf	readUartMessage@chRec& (0+255),b
  1854                           
  1855                           ; BSR set to: 1
  1856                           ;EusartApp.c: 50: rxMsgQueue[(0)] = chRec;
  1857  000A8C  C1CA  F0D9         	movff	readUartMessage@chRec,_rxMsgQueue
  1858                           
  1859                           ; BSR set to: 1
  1860                           ;EusartApp.c: 51: if(chRec == (0x24))
  1861  000A90  0E24               	movlw	36
  1862  000A92  19CA               	xorwf	readUartMessage@chRec& (0+255),w,b
  1863  000A94  A4D8               	btfss	status,2,c
  1864  000A96  0012               	return	
  1865                           
  1866                           ; BSR set to: 1
  1867                           ;EusartApp.c: 52: {
  1868                           ;EusartApp.c: 53: cState = READ_GROUP;
  1869  000A98  0E02               	movlw	2
  1870  000A9A  0100               	movlb	0	; () banked
  1871  000A9C  6FD2               	movwf	_cState& (0+255),b
  1872                           
  1873                           ; BSR set to: 0
  1874                           ;EusartApp.c: 54: }
  1875                           ;EusartApp.c: 55: }
  1876  000A9E  0012               	return	
  1877  000AA0                     l195:
  1878                           
  1879                           ; BSR set to: 0
  1880                           ;EusartApp.c: 56: else
  1881                           ;EusartApp.c: 57: {
  1882                           ;EusartApp.c: 58: cState = START_RX_MESSAGE_READ;
  1883                           
  1884                           ; BSR set to: 0
  1885  000AA0  0E00               	movlw	0
  1886  000AA2  6FD2               	movwf	_cState& (0+255),b
  1887                           
  1888                           ; BSR set to: 0
  1889                           ;EusartApp.c: 59: }
  1890                           ;EusartApp.c: 61: break;
  1891  000AA4  0012               	return	
  1892  000AA6                     
  1893                           ; BSR set to: 0
  1894                           ;EusartApp.c: 65: if(eusart1RxCount > 1)
  1895                           
  1896                           ; BSR set to: 0
  1897  000AA6  0E01               	movlw	1
  1898  000AA8  65D3               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1899  000AAA  0012               	return	
  1900                           
  1901                           ; BSR set to: 0
  1902                           ;EusartApp.c: 66: {
  1903                           ;EusartApp.c: 67: group = EUSART1_Read();
  1904  000AAC  EC23  F018         	call	_EUSART1_Read	;wreg free
  1905  000AB0  0100               	movlb	0	; () banked
  1906  000AB2  6FD1               	movwf	_group& (0+255),b
  1907                           
  1908                           ; BSR set to: 0
  1909                           ;EusartApp.c: 68: rxMsgQueue[(1)] = group;
  1910  000AB4  C0D1  F0DA         	movff	_group,_rxMsgQueue+1
  1911                           
  1912                           ; BSR set to: 0
  1913                           ;EusartApp.c: 69: cState = READ_REQUEST;
  1914  000AB8  0E03               	movlw	3
  1915  000ABA  6FD2               	movwf	_cState& (0+255),b
  1916                           
  1917                           ; BSR set to: 0
  1918                           ;EusartApp.c: 70: }
  1919                           ;EusartApp.c: 71: break;
  1920  000ABC  0012               	return	
  1921  000ABE                     
  1922                           ; BSR set to: 0
  1923                           ;EusartApp.c: 75: if(eusart1RxCount > 1)
  1924                           
  1925                           ; BSR set to: 0
  1926  000ABE  0E01               	movlw	1
  1927  000AC0  65D3               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1928  000AC2  0012               	return	
  1929                           
  1930                           ; BSR set to: 0
  1931                           ;EusartApp.c: 76: {
  1932                           ;EusartApp.c: 77: request = EUSART1_Read();
  1933  000AC4  EC23  F018         	call	_EUSART1_Read	;wreg free
  1934  000AC8  0100               	movlb	0	; () banked
  1935  000ACA  6FD0               	movwf	_request& (0+255),b
  1936                           
  1937                           ; BSR set to: 0
  1938                           ;EusartApp.c: 78: rxMsgQueue[(2)] = request;
  1939  000ACC  C0D0  F0DB         	movff	_request,_rxMsgQueue+2
  1940                           
  1941                           ; BSR set to: 0
  1942                           ;EusartApp.c: 79: cState = READ_DATA_SIZE;
  1943  000AD0  0E04               	movlw	4
  1944  000AD2  6FD2               	movwf	_cState& (0+255),b
  1945                           
  1946                           ; BSR set to: 0
  1947                           ;EusartApp.c: 80: }
  1948                           ;EusartApp.c: 81: break;
  1949  000AD4  0012               	return	
  1950  000AD6                     
  1951                           ; BSR set to: 0
  1952                           ;EusartApp.c: 84: if(eusart1RxCount > 1)
  1953                           
  1954                           ; BSR set to: 0
  1955  000AD6  0E01               	movlw	1
  1956  000AD8  65D3               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1957  000ADA  0012               	return	
  1958                           
  1959                           ; BSR set to: 0
  1960                           ;EusartApp.c: 85: {
  1961                           ;EusartApp.c: 86: dataSize = EUSART1_Read();
  1962  000ADC  EC23  F018         	call	_EUSART1_Read	;wreg free
  1963  000AE0  0100               	movlb	0	; () banked
  1964  000AE2  6FCF               	movwf	_dataSize& (0+255),b
  1965                           
  1966                           ; BSR set to: 0
  1967                           ;EusartApp.c: 87: rxMsgQueue[(3)] = dataSize;
  1968  000AE4  C0CF  F0DC         	movff	_dataSize,_rxMsgQueue+3
  1969                           
  1970                           ; BSR set to: 0
  1971                           ;EusartApp.c: 88: if(dataSize == 0)
  1972  000AE8  51CF               	movf	_dataSize& (0+255),w,b
  1973  000AEA  A4D8               	btfss	status,2,c
  1974  000AEC  D003               	goto	l205
  1975                           
  1976                           ; BSR set to: 0
  1977                           ;EusartApp.c: 89: {
  1978                           ;EusartApp.c: 90: cState = CHECK_CRC;
  1979  000AEE  0E06               	movlw	6
  1980  000AF0  6FD2               	movwf	_cState& (0+255),b
  1981                           
  1982                           ;EusartApp.c: 91: }
  1983  000AF2  0012               	return	
  1984  000AF4                     l205:
  1985                           
  1986                           ; BSR set to: 0
  1987                           ;EusartApp.c: 92: else
  1988                           ;EusartApp.c: 93: {
  1989                           ;EusartApp.c: 94: cState = READ_DATA;
  1990                           
  1991                           ; BSR set to: 0
  1992  000AF4  0E05               	movlw	5
  1993  000AF6  6FD2               	movwf	_cState& (0+255),b
  1994                           
  1995                           ; BSR set to: 0
  1996                           ;EusartApp.c: 95: }
  1997                           ;EusartApp.c: 97: }
  1998                           ;EusartApp.c: 99: break;
  1999                           
  2000                           ; BSR set to: 0
  2001  000AF8  0012               	return	
  2002  000AFA                     
  2003                           ; BSR set to: 0
  2004                           ;EusartApp.c: 103: if(eusart1RxCount >= dataSize)
  2005                           
  2006                           ; BSR set to: 0
  2007  000AFA  51CF               	movf	_dataSize& (0+255),w,b
  2008  000AFC  5DD3               	subwf	_eusart1RxCount& (0+255),w,b	;volatile
  2009  000AFE  A0D8               	btfss	status,0,c
  2010  000B00  0012               	return	
  2011                           
  2012                           ; BSR set to: 0
  2013                           ;EusartApp.c: 104: {
  2014                           ;EusartApp.c: 105: ZeroArray(rxMsgData, (0x14));
  2015  000B02  0EAE               	movlw	low _rxMsgData
  2016  000B04  6E20               	movwf	ZeroArray@array,c
  2017  000B06  0E01               	movlw	high _rxMsgData
  2018  000B08  6E21               	movwf	ZeroArray@array+1,c
  2019  000B0A  0E00               	movlw	0
  2020  000B0C  6E23               	movwf	ZeroArray@size+1,c
  2021  000B0E  0E14               	movlw	20
  2022  000B10  6E22               	movwf	ZeroArray@size,c
  2023  000B12  EC2F  F01B         	call	_ZeroArray	;wreg free
  2024                           
  2025                           ;EusartApp.c: 107: for(int idx = 0; idx < dataSize; idx++)
  2026  000B16  0E00               	movlw	0
  2027  000B18  0101               	movlb	1	; () banked
  2028  000B1A  6FC9               	movwf	(readUartMessage@idx+1)& (0+255),b
  2029  000B1C  0E00               	movlw	0
  2030  000B1E  6FC8               	movwf	readUartMessage@idx& (0+255),b
  2031  000B20  D022               	goto	l209
  2032  000B22                     
  2033                           ; BSR set to: 1
  2034                           ;EusartApp.c: 108: {
  2035                           ;EusartApp.c: 109: chRec = EUSART1_Read();
  2036                           
  2037                           ; BSR set to: 1
  2038  000B22  EC23  F018         	call	_EUSART1_Read	;wreg free
  2039  000B26  0101               	movlb	1	; () banked
  2040  000B28  6FCA               	movwf	readUartMessage@chRec& (0+255),b
  2041                           
  2042                           ; BSR set to: 1
  2043                           ;EusartApp.c: 110: rxMsgQueue[(0x4) + msgCount++] = chRec;
  2044  000B2A  0100               	movlb	0	; () banked
  2045  000B2C  51CB               	movf	_msgCount& (0+255),w,b
  2046  000B2E  0101               	movlb	1	; () banked
  2047  000B30  6FC4               	movwf	??_readUartMessage& (0+255),b
  2048  000B32  6BC5               	clrf	(??_readUartMessage+1)& (0+255),b
  2049  000B34  0E04               	movlw	4
  2050  000B36  27C4               	addwf	??_readUartMessage& (0+255),f,b
  2051  000B38  0E00               	movlw	0
  2052  000B3A  23C5               	addwfc	(??_readUartMessage+1)& (0+255),f,b
  2053  000B3C  0ED9               	movlw	low _rxMsgQueue
  2054  000B3E  25C4               	addwf	??_readUartMessage& (0+255),w,b
  2055  000B40  6ED9               	movwf	fsr2l,c
  2056  000B42  0E00               	movlw	high _rxMsgQueue
  2057  000B44  21C5               	addwfc	(??_readUartMessage+1)& (0+255),w,b
  2058  000B46  6EDA               	movwf	fsr2h,c
  2059  000B48  C1CA  FFDF         	movff	readUartMessage@chRec,indf2
  2060                           
  2061                           ; BSR set to: 1
  2062  000B4C  0100               	movlb	0	; () banked
  2063  000B4E  2BCB               	incf	_msgCount& (0+255),f,b
  2064                           
  2065                           ; BSR set to: 0
  2066                           ;EusartApp.c: 111: rxMsgData[idx] = chRec;
  2067  000B50  0EAE               	movlw	low _rxMsgData
  2068  000B52  0101               	movlb	1	; () banked
  2069  000B54  25C8               	addwf	readUartMessage@idx& (0+255),w,b
  2070  000B56  6ED9               	movwf	fsr2l,c
  2071  000B58  0E01               	movlw	high _rxMsgData
  2072  000B5A  21C9               	addwfc	(readUartMessage@idx+1)& (0+255),w,b
  2073  000B5C  6EDA               	movwf	fsr2h,c
  2074  000B5E  C1CA  FFDF         	movff	readUartMessage@chRec,indf2
  2075                           
  2076                           ; BSR set to: 1
  2077  000B62  4BC8               	infsnz	readUartMessage@idx& (0+255),f,b
  2078  000B64  2BC9               	incf	(readUartMessage@idx+1)& (0+255),f,b
  2079  000B66                     l209:
  2080                           
  2081                           ; BSR set to: 1
  2082                           
  2083                           ; BSR set to: 1
  2084  000B66  0100               	movlb	0	; () banked
  2085  000B68  51CF               	movf	_dataSize& (0+255),w,b
  2086  000B6A  0101               	movlb	1	; () banked
  2087  000B6C  6FC4               	movwf	??_readUartMessage& (0+255),b
  2088  000B6E  6BC5               	clrf	(??_readUartMessage+1)& (0+255),b
  2089  000B70  51C4               	movf	??_readUartMessage& (0+255),w,b
  2090  000B72  5DC8               	subwf	readUartMessage@idx& (0+255),w,b
  2091  000B74  51C9               	movf	(readUartMessage@idx+1)& (0+255),w,b
  2092  000B76  0A80               	xorlw	128
  2093  000B78  6FC6               	movwf	(??_readUartMessage+2)& (0+255),b
  2094  000B7A  51C5               	movf	(??_readUartMessage+1)& (0+255),w,b
  2095  000B7C  0A80               	xorlw	128
  2096  000B7E  59C6               	subwfb	(??_readUartMessage+2)& (0+255),w,b
  2097  000B80  A0D8               	btfss	status,0,c
  2098  000B82  D7CF               	goto	l210
  2099                           
  2100                           ; BSR set to: 1
  2101                           ;EusartApp.c: 112: }
  2102                           ;EusartApp.c: 114: cState = CHECK_CRC;
  2103                           
  2104                           ; BSR set to: 1
  2105  000B84  0E06               	movlw	6
  2106  000B86  0100               	movlb	0	; () banked
  2107  000B88  6FD2               	movwf	_cState& (0+255),b
  2108                           
  2109                           ; BSR set to: 0
  2110                           ;EusartApp.c: 115: }
  2111                           ;EusartApp.c: 116: break;
  2112  000B8A  0012               	return	
  2113  000B8C                     
  2114                           ; BSR set to: 0
  2115                           ;EusartApp.c: 119: if(eusart1RxCount >= 1)
  2116                           
  2117                           ; BSR set to: 0
  2118  000B8C  51D3               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  2119  000B8E  B4D8               	btfsc	status,2,c
  2120  000B90  0012               	return	
  2121                           
  2122                           ; BSR set to: 0
  2123                           ;EusartApp.c: 120: {
  2124                           ;EusartApp.c: 121: crcGiven = EUSART1_Read();
  2125  000B92  EC23  F018         	call	_EUSART1_Read	;wreg free
  2126  000B96  0100               	movlb	0	; () banked
  2127  000B98  6FCC               	movwf	_crcGiven& (0+255),b
  2128                           
  2129                           ; BSR set to: 0
  2130                           ;EusartApp.c: 122: crcCalc = crc8(rxMsgQueue, (0x4) + msgCount);
  2131  000B9A  0ED9               	movlw	low _rxMsgQueue
  2132  000B9C  6E18               	movwf	crc8@dataArray,c
  2133  000B9E  0E00               	movlw	high _rxMsgQueue
  2134  000BA0  6E19               	movwf	crc8@dataArray+1,c
  2135  000BA2  0E04               	movlw	4
  2136  000BA4  25CB               	addwf	_msgCount& (0+255),w,b
  2137  000BA6  6E1A               	movwf	crc8@dataSize,c
  2138  000BA8  6A1B               	clrf	crc8@dataSize+1,c
  2139  000BAA  0E00               	movlw	0
  2140  000BAC  221B               	addwfc	crc8@dataSize+1,f,c
  2141  000BAE  EC46  F017         	call	_crc8	;wreg free
  2142  000BB2  0100               	movlb	0	; () banked
  2143  000BB4  6FCD               	movwf	_crcCalc& (0+255),b
  2144                           
  2145                           ; BSR set to: 0
  2146                           ;EusartApp.c: 124: if(crcGiven == crcCalc)
  2147  000BB6  51CD               	movf	_crcCalc& (0+255),w,b
  2148  000BB8  19CC               	xorwf	_crcGiven& (0+255),w,b
  2149  000BBA  A4D8               	btfss	status,2,c
  2150  000BBC  D003               	goto	l214
  2151                           
  2152                           ; BSR set to: 0
  2153                           ;EusartApp.c: 125: {
  2154                           ;EusartApp.c: 126: cState = JUMP_FUNCTION;
  2155  000BBE  0E07               	movlw	7
  2156  000BC0  6FD2               	movwf	_cState& (0+255),b
  2157                           
  2158                           ;EusartApp.c: 127: }
  2159  000BC2  0012               	return	
  2160  000BC4                     l214:
  2161                           
  2162                           ; BSR set to: 0
  2163                           ;EusartApp.c: 128: else
  2164                           ;EusartApp.c: 129: {
  2165                           ;EusartApp.c: 130: cState = START_RX_MESSAGE_READ;
  2166                           
  2167                           ; BSR set to: 0
  2168  000BC4  0E00               	movlw	0
  2169  000BC6  6FD2               	movwf	_cState& (0+255),b
  2170                           
  2171                           ; BSR set to: 0
  2172                           ;EusartApp.c: 131: }
  2173                           ;EusartApp.c: 132: }
  2174                           ;EusartApp.c: 133: break;
  2175                           
  2176                           ; BSR set to: 0
  2177  000BC8  0012               	return	
  2178  000BCA                     
  2179                           ; BSR set to: 0
  2180                           ;EusartApp.c: 136: groupsArray[group - 1](request, rxMsgData);
  2181                           
  2182                           ; BSR set to: 0
  2183  000BCA  0EFE               	movlw	254
  2184  000BCC  0101               	movlb	1	; () banked
  2185  000BCE  6FC4               	movwf	??_readUartMessage& (0+255),b
  2186  000BD0  0EFF               	movlw	255
  2187  000BD2  6FC5               	movwf	(??_readUartMessage+1)& (0+255),b
  2188  000BD4  0100               	movlb	0	; () banked
  2189  000BD6  51D1               	movf	_group& (0+255),w,b
  2190  000BD8  0101               	movlb	1	; () banked
  2191  000BDA  6FC6               	movwf	(??_readUartMessage+2)& (0+255),b
  2192  000BDC  6BC7               	clrf	(??_readUartMessage+3)& (0+255),b
  2193  000BDE  90D8               	bcf	status,0,c
  2194  000BE0  37C6               	rlcf	(??_readUartMessage+2)& (0+255),f,b
  2195  000BE2  37C7               	rlcf	(??_readUartMessage+3)& (0+255),f,b
  2196  000BE4  51C4               	movf	??_readUartMessage& (0+255),w,b
  2197  000BE6  27C6               	addwf	(??_readUartMessage+2)& (0+255),f,b
  2198  000BE8  51C5               	movf	(??_readUartMessage+1)& (0+255),w,b
  2199  000BEA  23C7               	addwfc	(??_readUartMessage+3)& (0+255),f,b
  2200  000BEC  0EED               	movlw	low _groupsArray
  2201  000BEE  25C6               	addwf	(??_readUartMessage+2)& (0+255),w,b
  2202  000BF0  6ED9               	movwf	fsr2l,c
  2203  000BF2  0E00               	movlw	high _groupsArray
  2204  000BF4  21C7               	addwfc	(??_readUartMessage+3)& (0+255),w,b
  2205  000BF6  6EDA               	movwf	fsr2h,c
  2206  000BF8  D801               	call	u8008
  2207  000BFA  D010               	goto	u8009
  2208  000BFC                     u8008:
  2209  000BFC  0005               	push	
  2210  000BFE  6EFA               	movwf	pclath,c
  2211  000C00  50DE               	movf	postinc2,w,c
  2212  000C02  6EFD               	movwf	tosl,c
  2213  000C04  50DE               	movf	postinc2,w,c
  2214  000C06  6EFE               	movwf	tosh,c
  2215  000C08  50F8               	movf	tblptru,w,c
  2216  000C0A  6EFF               	movwf	tosu,c
  2217  000C0C  50FA               	movf	pclath,w,c
  2218  000C0E  0EAE               	movlw	low _rxMsgData
  2219  000C10  6FC2               	movwf	GroupDAC@data& (0+255),b
  2220  000C12  0E01               	movlw	high _rxMsgData
  2221  000C14  6FC3               	movwf	(GroupDAC@data+1)& (0+255),b
  2222  000C16  0100               	movlb	0	; () banked
  2223  000C18  51D0               	movf	_request& (0+255),w,b
  2224  000C1A  0012               	return		;indir
  2225  000C1C                     u8009:
  2226                           
  2227                           ;EusartApp.c: 137: cState = START_RX_MESSAGE_READ;
  2228  000C1C  0E00               	movlw	0
  2229  000C1E  0100               	movlb	0	; () banked
  2230  000C20  6FD2               	movwf	_cState& (0+255),b
  2231                           
  2232                           ; BSR set to: 0
  2233                           ;EusartApp.c: 139: }
  2234                           
  2235                           ;EusartApp.c: 138: break;
  2236  000C22  0012               	return	
  2237  000C24                     l190:
  2238                           
  2239                           ; BSR set to: 0
  2240  000C24  0100               	movlb	0	; () banked
  2241  000C26  51D2               	movf	_cState& (0+255),w,b
  2242                           
  2243                           ; Switch size 1, requested type "space"
  2244                           ; Number of cases is 8, Range of values is 0 to 7
  2245                           ; switch strategies available:
  2246                           ; Name         Instructions Cycles
  2247                           ; simple_byte           25    13 (average)
  2248                           ;	Chosen strategy is simple_byte
  2249  000C28  0A00               	xorlw	0	; case 0
  2250  000C2A  B4D8               	btfsc	status,2,c
  2251  000C2C  D71C               	goto	l191
  2252  000C2E  0A01               	xorlw	1	; case 1
  2253  000C30  B4D8               	btfsc	status,2,c
  2254  000C32  D720               	goto	l194
  2255  000C34  0A03               	xorlw	3	; case 2
  2256  000C36  B4D8               	btfsc	status,2,c
  2257  000C38  D736               	goto	l199
  2258  000C3A  0A01               	xorlw	1	; case 3
  2259  000C3C  B4D8               	btfsc	status,2,c
  2260  000C3E  D73F               	goto	l201
  2261  000C40  0A07               	xorlw	7	; case 4
  2262  000C42  B4D8               	btfsc	status,2,c
  2263  000C44  D748               	goto	l203
  2264  000C46  0A01               	xorlw	1	; case 5
  2265  000C48  B4D8               	btfsc	status,2,c
  2266  000C4A  D757               	goto	l207
  2267  000C4C  0A03               	xorlw	3	; case 6
  2268  000C4E  B4D8               	btfsc	status,2,c
  2269  000C50  D79D               	goto	l212
  2270  000C52  0A01               	xorlw	1	; case 7
  2271  000C54  A4D8               	btfss	status,2,c
  2272  000C56  0012               	return	
  2273  000C58  D7B8               	goto	l216
  2274  000C5A                     __end_of_readUartMessage:
  2275                           	opt stack 0
  2276                           tosu	equ	0xFFF
  2277                           tosh	equ	0xFFE
  2278                           tosl	equ	0xFFD
  2279                           pclath	equ	0xFFA
  2280                           tblptru	equ	0xFF8
  2281                           tblptrh	equ	0xFF7
  2282                           tblptrl	equ	0xFF6
  2283                           tablat	equ	0xFF5
  2284                           postinc0	equ	0xFEE
  2285                           wreg	equ	0xFE8
  2286                           postdec1	equ	0xFE5
  2287                           fsr1l	equ	0xFE1
  2288                           indf2	equ	0xFDF
  2289                           postinc2	equ	0xFDE
  2290                           fsr2h	equ	0xFDA
  2291                           fsr2l	equ	0xFD9
  2292                           status	equ	0xFD8
  2293                           
  2294 ;; *************** function _InitRxMessageParams *****************
  2295 ;; Defined at:
  2296 ;;		line 142 in file "EusartApp.c"
  2297 ;; Parameters:    Size  Location     Type
  2298 ;;		None
  2299 ;; Auto vars:     Size  Location     Type
  2300 ;;		None
  2301 ;; Return value:  Size  Location     Type
  2302 ;;                  1    wreg      void 
  2303 ;; Registers used:
  2304 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2305 ;; Tracked objects:
  2306 ;;		On entry : 0/0
  2307 ;;		On exit  : 0/0
  2308 ;;		Unchanged: 0/0
  2309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2310 ;;      Params:         0       0       0       0       0       0       0
  2311 ;;      Locals:         0       0       0       0       0       0       0
  2312 ;;      Temps:          0       0       0       0       0       0       0
  2313 ;;      Totals:         0       0       0       0       0       0       0
  2314 ;;Total ram usage:        0 bytes
  2315 ;; Hardware stack levels used:    1
  2316 ;; Hardware stack levels required when called:    5
  2317 ;; This function calls:
  2318 ;;		_ZeroArray
  2319 ;; This function is called by:
  2320 ;;		_readUartMessage
  2321 ;; This function uses a non-reentrant model
  2322 ;;
  2323                           
  2324                           	psect	text2
  2325  0034D2                     __ptext2:
  2326                           	opt stack 0
  2327  0034D2                     _InitRxMessageParams:
  2328                           	opt stack 24
  2329                           
  2330                           ;EusartApp.c: 146: dataSize = 0;
  2331                           
  2332                           ;incstack = 0
  2333  0034D2  0E00               	movlw	0
  2334  0034D4  0100               	movlb	0	; () banked
  2335  0034D6  6FCF               	movwf	_dataSize& (0+255),b
  2336                           
  2337                           ;EusartApp.c: 147: crcCalc = 0;
  2338  0034D8  0E00               	movlw	0
  2339  0034DA  6FCD               	movwf	_crcCalc& (0+255),b
  2340                           
  2341                           ;EusartApp.c: 148: crcGiven = 0;
  2342  0034DC  0E00               	movlw	0
  2343  0034DE  6FCC               	movwf	_crcGiven& (0+255),b
  2344                           
  2345                           ;EusartApp.c: 149: msgCount = 0;
  2346  0034E0  0E00               	movlw	0
  2347  0034E2  6FCB               	movwf	_msgCount& (0+255),b
  2348                           
  2349                           ; BSR set to: 0
  2350                           ;EusartApp.c: 150: ZeroArray(rxMsgQueue, (0x14));
  2351  0034E4  0ED9               	movlw	low _rxMsgQueue
  2352  0034E6  6E20               	movwf	ZeroArray@array,c
  2353  0034E8  0E00               	movlw	high _rxMsgQueue
  2354  0034EA  6E21               	movwf	ZeroArray@array+1,c
  2355  0034EC  0E00               	movlw	0
  2356  0034EE  6E23               	movwf	ZeroArray@size+1,c
  2357  0034F0  0E14               	movlw	20
  2358  0034F2  6E22               	movwf	ZeroArray@size,c
  2359  0034F4  EC2F  F01B         	call	_ZeroArray
  2360  0034F8  0012               	return		;funcret
  2361  0034FA                     __end_of_InitRxMessageParams:
  2362                           	opt stack 0
  2363                           tosu	equ	0xFFF
  2364                           tosh	equ	0xFFE
  2365                           tosl	equ	0xFFD
  2366                           pclath	equ	0xFFA
  2367                           tblptru	equ	0xFF8
  2368                           tblptrh	equ	0xFF7
  2369                           tblptrl	equ	0xFF6
  2370                           tablat	equ	0xFF5
  2371                           postinc0	equ	0xFEE
  2372                           wreg	equ	0xFE8
  2373                           postdec1	equ	0xFE5
  2374                           fsr1l	equ	0xFE1
  2375                           indf2	equ	0xFDF
  2376                           postinc2	equ	0xFDE
  2377                           fsr2h	equ	0xFDA
  2378                           fsr2l	equ	0xFD9
  2379                           status	equ	0xFD8
  2380                           
  2381 ;; *************** function _GroupDAC *****************
  2382 ;; Defined at:
  2383 ;;		line 133 in file "MessageFunctions.c"
  2384 ;; Parameters:    Size  Location     Type
  2385 ;;  request         1    wreg     enum E12
  2386 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2387 ;;		 -> rxMsgData(20), 
  2388 ;; Auto vars:     Size  Location     Type
  2389 ;;  request         1   95[BANK0 ] enum E12
  2390 ;; Return value:  Size  Location     Type
  2391 ;;                  1    wreg      void 
  2392 ;; Registers used:
  2393 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2394 ;; Tracked objects:
  2395 ;;		On entry : 0/0
  2396 ;;		On exit  : 0/0
  2397 ;;		Unchanged: 0/0
  2398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2399 ;;      Params:         0       0       2       0       0       0       0
  2400 ;;      Locals:         0       1       0       0       0       0       0
  2401 ;;      Temps:          0       0       0       0       0       0       0
  2402 ;;      Totals:         0       1       2       0       0       0       0
  2403 ;;Total ram usage:        3 bytes
  2404 ;; Hardware stack levels used:    1
  2405 ;; Hardware stack levels required when called:    8
  2406 ;; This function calls:
  2407 ;;		_DacSetValue
  2408 ;; This function is called by:
  2409 ;;		_readUartMessage
  2410 ;; This function uses a non-reentrant model
  2411 ;;
  2412                           
  2413                           	psect	text3
  2414  003602                     __ptext3:
  2415                           	opt stack 0
  2416  003602                     _GroupDAC:
  2417                           	opt stack 21
  2418                           
  2419                           ;incstack = 0
  2420                           ;GroupDAC@request stored from wreg
  2421  003602  0100               	movlb	0	; () banked
  2422  003604  6FBF               	movwf	GroupDAC@request& (0+255),b
  2423                           
  2424                           ;MessageFunctions.c: 135: switch (request)
  2425  003606  D007               	goto	l1236
  2426  003608                     
  2427                           ;MessageFunctions.c: 138: DacSetValue(data);
  2428  003608  C1C2  F086         	movff	GroupDAC@data,DacSetValue@data
  2429  00360C  C1C3  F087         	movff	GroupDAC@data+1,DacSetValue@data+1
  2430  003610  EC0C  F013         	call	_DacSetValue	;wreg free
  2431                           
  2432                           ;MessageFunctions.c: 143: }
  2433                           
  2434                           ;MessageFunctions.c: 142: break;
  2435                           
  2436                           ;MessageFunctions.c: 141: default:
  2437                           
  2438                           ;MessageFunctions.c: 139: break;
  2439  003614  0012               	return	
  2440  003616                     l1236:
  2441  003616  0100               	movlb	0	; () banked
  2442  003618  51BF               	movf	GroupDAC@request& (0+255),w,b
  2443                           
  2444                           ; Switch size 1, requested type "space"
  2445                           ; Number of cases is 1, Range of values is 97 to 97
  2446                           ; switch strategies available:
  2447                           ; Name         Instructions Cycles
  2448                           ; simple_byte            4     3 (average)
  2449                           ;	Chosen strategy is simple_byte
  2450  00361A  0A61               	xorlw	97	; case 97
  2451  00361C  A4D8               	btfss	status,2,c
  2452  00361E  0012               	return	
  2453  003620  D7F3               	goto	l1237
  2454  003622                     __end_of_GroupDAC:
  2455                           	opt stack 0
  2456                           tosu	equ	0xFFF
  2457                           tosh	equ	0xFFE
  2458                           tosl	equ	0xFFD
  2459                           pclath	equ	0xFFA
  2460                           tblptru	equ	0xFF8
  2461                           tblptrh	equ	0xFF7
  2462                           tblptrl	equ	0xFF6
  2463                           tablat	equ	0xFF5
  2464                           postinc0	equ	0xFEE
  2465                           wreg	equ	0xFE8
  2466                           postdec1	equ	0xFE5
  2467                           fsr1l	equ	0xFE1
  2468                           indf2	equ	0xFDF
  2469                           postinc2	equ	0xFDE
  2470                           fsr2h	equ	0xFDA
  2471                           fsr2l	equ	0xFD9
  2472                           status	equ	0xFD8
  2473                           
  2474 ;; *************** function _GroupFlashMemory *****************
  2475 ;; Defined at:
  2476 ;;		line 112 in file "MessageFunctions.c"
  2477 ;; Parameters:    Size  Location     Type
  2478 ;;  request         1    wreg     enum E12
  2479 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2480 ;; Auto vars:     Size  Location     Type
  2481 ;;  request         1   96[BANK0 ] enum E12
  2482 ;; Return value:  Size  Location     Type
  2483 ;;                  1    wreg      void 
  2484 ;; Registers used:
  2485 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2486 ;; Tracked objects:
  2487 ;;		On entry : 0/0
  2488 ;;		On exit  : 0/0
  2489 ;;		Unchanged: 0/0
  2490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2491 ;;      Params:         0       0       2       0       0       0       0
  2492 ;;      Locals:         0       1       0       0       0       0       0
  2493 ;;      Temps:          0       1       0       0       0       0       0
  2494 ;;      Totals:         0       2       2       0       0       0       0
  2495 ;;Total ram usage:        4 bytes
  2496 ;; Hardware stack levels used:    1
  2497 ;; Hardware stack levels required when called:    7
  2498 ;; This function calls:
  2499 ;;		_FlashEreaseMem
  2500 ;;		_FlashReadCondition
  2501 ;;		_FlashReadUart
  2502 ;; This function is called by:
  2503 ;;		_readUartMessage
  2504 ;; This function uses a non-reentrant model
  2505 ;;
  2506                           
  2507                           	psect	text4
  2508  003002                     __ptext4:
  2509                           	opt stack 0
  2510  003002                     _GroupFlashMemory:
  2511                           	opt stack 22
  2512                           
  2513                           ;incstack = 0
  2514                           ;GroupFlashMemory@request stored from wreg
  2515  003002  0100               	movlb	0	; () banked
  2516  003004  6FC0               	movwf	GroupFlashMemory@request& (0+255),b
  2517                           
  2518                           ;MessageFunctions.c: 114: switch (request)
  2519  003006  D013               	goto	l1227
  2520  003008                     
  2521                           ;MessageFunctions.c: 117: FlashEreaseMem();
  2522  003008  ECF4  F016         	call	_FlashEreaseMem	;wreg free
  2523                           
  2524                           ;MessageFunctions.c: 118: break;
  2525  00300C  0012               	return	
  2526  00300E                     
  2527                           ;MessageFunctions.c: 121: FlashReadCondition();
  2528  00300E  EC12  F00B         	call	_FlashReadCondition	;wreg free
  2529                           
  2530                           ;MessageFunctions.c: 122: break;
  2531  003012  0012               	return	
  2532  003014                     
  2533                           ;MessageFunctions.c: 125: FlashReadUart((int)data[0]);
  2534  003014  C1C2  FFD9         	movff	GroupFlashMemory@data,fsr2l
  2535  003018  C1C3  FFDA         	movff	GroupFlashMemory@data+1,fsr2h
  2536  00301C  50DF               	movf	indf2,w,c
  2537  00301E  0100               	movlb	0	; () banked
  2538  003020  6FBF               	movwf	??_GroupFlashMemory& (0+255),b
  2539  003022  51BF               	movf	??_GroupFlashMemory& (0+255),w,b
  2540  003024  6E2C               	movwf	FlashReadUart@numOfSampleToRead,c
  2541  003026  6A2D               	clrf	FlashReadUart@numOfSampleToRead+1,c
  2542  003028  EC4E  F003         	call	_FlashReadUart	;wreg free
  2543                           
  2544                           ;MessageFunctions.c: 130: }
  2545                           
  2546                           ;MessageFunctions.c: 129: break;
  2547                           
  2548                           ;MessageFunctions.c: 128: default:
  2549                           
  2550                           ;MessageFunctions.c: 126: break;
  2551  00302C  0012               	return	
  2552  00302E                     l1227:
  2553  00302E  0100               	movlb	0	; () banked
  2554  003030  51C0               	movf	GroupFlashMemory@request& (0+255),w,b
  2555                           
  2556                           ; Switch size 1, requested type "space"
  2557                           ; Number of cases is 3, Range of values is 81 to 83
  2558                           ; switch strategies available:
  2559                           ; Name         Instructions Cycles
  2560                           ; simple_byte           10     6 (average)
  2561                           ;	Chosen strategy is simple_byte
  2562  003032  0A51               	xorlw	81	; case 81
  2563  003034  B4D8               	btfsc	status,2,c
  2564  003036  D7E8               	goto	l1228
  2565  003038  0A03               	xorlw	3	; case 82
  2566  00303A  B4D8               	btfsc	status,2,c
  2567  00303C  D7E8               	goto	l1230
  2568  00303E  0A01               	xorlw	1	; case 83
  2569  003040  A4D8               	btfss	status,2,c
  2570  003042  0012               	return	
  2571  003044  D7E7               	goto	l1231
  2572  003046                     __end_of_GroupFlashMemory:
  2573                           	opt stack 0
  2574                           tosu	equ	0xFFF
  2575                           tosh	equ	0xFFE
  2576                           tosl	equ	0xFFD
  2577                           pclath	equ	0xFFA
  2578                           tblptru	equ	0xFF8
  2579                           tblptrh	equ	0xFF7
  2580                           tblptrl	equ	0xFF6
  2581                           tablat	equ	0xFF5
  2582                           postinc0	equ	0xFEE
  2583                           wreg	equ	0xFE8
  2584                           postdec1	equ	0xFE5
  2585                           fsr1l	equ	0xFE1
  2586                           indf2	equ	0xFDF
  2587                           postinc2	equ	0xFDE
  2588                           fsr2h	equ	0xFDA
  2589                           fsr2l	equ	0xFD9
  2590                           status	equ	0xFD8
  2591                           
  2592 ;; *************** function _GroupAdc *****************
  2593 ;; Defined at:
  2594 ;;		line 51 in file "MessageFunctions.c"
  2595 ;; Parameters:    Size  Location     Type
  2596 ;;  request         1    wreg     enum E12
  2597 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2598 ;; Auto vars:     Size  Location     Type
  2599 ;;  request         1   95[BANK0 ] enum E12
  2600 ;; Return value:  Size  Location     Type
  2601 ;;                  1    wreg      void 
  2602 ;; Registers used:
  2603 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2604 ;; Tracked objects:
  2605 ;;		On entry : 0/0
  2606 ;;		On exit  : 0/0
  2607 ;;		Unchanged: 0/0
  2608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2609 ;;      Params:         0       0       2       0       0       0       0
  2610 ;;      Locals:         0       1       0       0       0       0       0
  2611 ;;      Temps:          0       0       0       0       0       0       0
  2612 ;;      Totals:         0       1       2       0       0       0       0
  2613 ;;Total ram usage:        3 bytes
  2614 ;; Hardware stack levels used:    1
  2615 ;; Hardware stack levels required when called:    7
  2616 ;; This function calls:
  2617 ;;		_SetAdcOperationMode
  2618 ;;		_SetChannelMode
  2619 ;;		_SetConversionResultFormat
  2620 ;; This function is called by:
  2621 ;;		_readUartMessage
  2622 ;; This function uses a non-reentrant model
  2623 ;;
  2624                           
  2625                           	psect	text5
  2626  002F72                     __ptext5:
  2627                           	opt stack 0
  2628  002F72                     _GroupAdc:
  2629                           	opt stack 22
  2630                           
  2631                           ;incstack = 0
  2632                           ;GroupAdc@request stored from wreg
  2633  002F72  0100               	movlb	0	; () banked
  2634  002F74  6FBF               	movwf	GroupAdc@request& (0+255),b
  2635                           
  2636                           ;MessageFunctions.c: 53: switch (request)
  2637  002F76  D015               	goto	l1204
  2638  002F78                     
  2639                           ;MessageFunctions.c: 56: SetAdcOperationMode(data);
  2640  002F78  C1C2  F02C         	movff	GroupAdc@data,SetAdcOperationMode@data
  2641  002F7C  C1C3  F02D         	movff	GroupAdc@data+1,SetAdcOperationMode@data+1
  2642  002F80  ECF0  F01B         	call	_SetAdcOperationMode	;wreg free
  2643                           
  2644                           ;MessageFunctions.c: 57: break;
  2645  002F84  0012               	return	
  2646  002F86                     
  2647                           ;MessageFunctions.c: 60: SetChannelMode(data);
  2648  002F86  C1C2  F02C         	movff	GroupAdc@data,SetChannelMode@data
  2649  002F8A  C1C3  F02D         	movff	GroupAdc@data+1,SetChannelMode@data+1
  2650  002F8E  EC0C  F01A         	call	_SetChannelMode	;wreg free
  2651                           
  2652                           ;MessageFunctions.c: 61: break;
  2653  002F92  0012               	return	
  2654  002F94                     
  2655                           ;MessageFunctions.c: 64: SetConversionResultFormat(data);
  2656  002F94  C1C2  F02C         	movff	GroupAdc@data,SetConversionResultFormat@data
  2657  002F98  C1C3  F02D         	movff	GroupAdc@data+1,SetConversionResultFormat@data+1
  2658  002F9C  ECEA  F01B         	call	_SetConversionResultFormat	;wreg free
  2659                           
  2660                           ;MessageFunctions.c: 69: }
  2661                           
  2662                           ;MessageFunctions.c: 68: break;
  2663                           
  2664                           ;MessageFunctions.c: 67: default:
  2665                           
  2666                           ;MessageFunctions.c: 65: break;
  2667  002FA0  0012               	return	
  2668  002FA2                     l1204:
  2669  002FA2  0100               	movlb	0	; () banked
  2670  002FA4  51BF               	movf	GroupAdc@request& (0+255),w,b
  2671                           
  2672                           ; Switch size 1, requested type "space"
  2673                           ; Number of cases is 3, Range of values is 49 to 51
  2674                           ; switch strategies available:
  2675                           ; Name         Instructions Cycles
  2676                           ; simple_byte           10     6 (average)
  2677                           ;	Chosen strategy is simple_byte
  2678  002FA6  0A31               	xorlw	49	; case 49
  2679  002FA8  B4D8               	btfsc	status,2,c
  2680  002FAA  D7E6               	goto	l1205
  2681  002FAC  0A03               	xorlw	3	; case 50
  2682  002FAE  B4D8               	btfsc	status,2,c
  2683  002FB0  D7EA               	goto	l1207
  2684  002FB2  0A01               	xorlw	1	; case 51
  2685  002FB4  A4D8               	btfss	status,2,c
  2686  002FB6  0012               	return	
  2687  002FB8  D7ED               	goto	l1208
  2688  002FBA                     __end_of_GroupAdc:
  2689                           	opt stack 0
  2690                           tosu	equ	0xFFF
  2691                           tosh	equ	0xFFE
  2692                           tosl	equ	0xFFD
  2693                           pclath	equ	0xFFA
  2694                           tblptru	equ	0xFF8
  2695                           tblptrh	equ	0xFF7
  2696                           tblptrl	equ	0xFF6
  2697                           tablat	equ	0xFF5
  2698                           postinc0	equ	0xFEE
  2699                           wreg	equ	0xFE8
  2700                           postdec1	equ	0xFE5
  2701                           fsr1l	equ	0xFE1
  2702                           indf2	equ	0xFDF
  2703                           postinc2	equ	0xFDE
  2704                           fsr2h	equ	0xFDA
  2705                           fsr2l	equ	0xFD9
  2706                           status	equ	0xFD8
  2707                           
  2708 ;; *************** function _GroupStatusAndVersion *****************
  2709 ;; Defined at:
  2710 ;;		line 34 in file "MessageFunctions.c"
  2711 ;; Parameters:    Size  Location     Type
  2712 ;;  request         1    wreg     enum E12
  2713 ;;  data            3    0[BANK1 ] PTR unsigned char 
  2714 ;; Auto vars:     Size  Location     Type
  2715 ;;  request         1   95[BANK0 ] enum E12
  2716 ;; Return value:  Size  Location     Type
  2717 ;;                  1    wreg      void 
  2718 ;; Registers used:
  2719 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2720 ;; Tracked objects:
  2721 ;;		On entry : 0/0
  2722 ;;		On exit  : 0/0
  2723 ;;		Unchanged: 0/0
  2724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2725 ;;      Params:         0       0       2       0       0       0       0
  2726 ;;      Locals:         0       1       0       0       0       0       0
  2727 ;;      Temps:          0       0       0       0       0       0       0
  2728 ;;      Totals:         0       1       2       0       0       0       0
  2729 ;;Total ram usage:        3 bytes
  2730 ;; Hardware stack levels used:    1
  2731 ;; Hardware stack levels required when called:    6
  2732 ;; This function calls:
  2733 ;;		_GetMcuFwVersion
  2734 ;;		_GetMcuRunTime
  2735 ;; This function is called by:
  2736 ;;		_readUartMessage
  2737 ;; This function uses a non-reentrant model
  2738 ;;
  2739                           
  2740                           	psect	text6
  2741  003596                     __ptext6:
  2742                           	opt stack 0
  2743  003596                     _GroupStatusAndVersion:
  2744                           	opt stack 23
  2745                           
  2746                           ;incstack = 0
  2747                           ;GroupStatusAndVersion@request stored from wreg
  2748  003596  0100               	movlb	0	; () banked
  2749  003598  6FBF               	movwf	GroupStatusAndVersion@request& (0+255),b
  2750                           
  2751                           ;MessageFunctions.c: 36: switch (request)
  2752  00359A  D006               	goto	l1196
  2753  00359C                     
  2754                           ;MessageFunctions.c: 39: GetMcuFwVersion();
  2755  00359C  EC9D  F011         	call	_GetMcuFwVersion	;wreg free
  2756                           
  2757                           ;MessageFunctions.c: 40: break;
  2758  0035A0  0012               	return	
  2759  0035A2                     
  2760                           ;MessageFunctions.c: 43: GetMcuRunTime();
  2761  0035A2  EC86  F00D         	call	_GetMcuRunTime	;wreg free
  2762                           
  2763                           ;MessageFunctions.c: 48: }
  2764                           
  2765                           ;MessageFunctions.c: 47: break;
  2766                           
  2767                           ;MessageFunctions.c: 46: default:
  2768                           
  2769                           ;MessageFunctions.c: 44: break;
  2770  0035A6  0012               	return	
  2771  0035A8                     l1196:
  2772  0035A8  0100               	movlb	0	; () banked
  2773  0035AA  51BF               	movf	GroupStatusAndVersion@request& (0+255),w,b
  2774                           
  2775                           ; Switch size 1, requested type "space"
  2776                           ; Number of cases is 2, Range of values is 33 to 34
  2777                           ; switch strategies available:
  2778                           ; Name         Instructions Cycles
  2779                           ; simple_byte            7     4 (average)
  2780                           ;	Chosen strategy is simple_byte
  2781  0035AC  0A21               	xorlw	33	; case 33
  2782  0035AE  B4D8               	btfsc	status,2,c
  2783  0035B0  D7F8               	goto	l1199
  2784  0035B2  0A03               	xorlw	3	; case 34
  2785  0035B4  A4D8               	btfss	status,2,c
  2786  0035B6  0012               	return	
  2787  0035B8  D7F1               	goto	l1197
  2788  0035BA                     __end_of_GroupStatusAndVersion:
  2789                           	opt stack 0
  2790                           tosu	equ	0xFFF
  2791                           tosh	equ	0xFFE
  2792                           tosl	equ	0xFFD
  2793                           pclath	equ	0xFFA
  2794                           tblptru	equ	0xFF8
  2795                           tblptrh	equ	0xFF7
  2796                           tblptrl	equ	0xFF6
  2797                           tablat	equ	0xFF5
  2798                           postinc0	equ	0xFEE
  2799                           wreg	equ	0xFE8
  2800                           postdec1	equ	0xFE5
  2801                           fsr1l	equ	0xFE1
  2802                           indf2	equ	0xFDF
  2803                           postinc2	equ	0xFDE
  2804                           fsr2h	equ	0xFDA
  2805                           fsr2l	equ	0xFD9
  2806                           status	equ	0xFD8
  2807                           
  2808 ;; *************** function _GroupControlMcu *****************
  2809 ;; Defined at:
  2810 ;;		line 11 in file "MessageFunctions.c"
  2811 ;; Parameters:    Size  Location     Type
  2812 ;;  request         1    wreg     enum E12
  2813 ;;  data            3    0[BANK1 ] PTR unsigned char 
  2814 ;; Auto vars:     Size  Location     Type
  2815 ;;  request         1   95[BANK0 ] enum E12
  2816 ;; Return value:  Size  Location     Type
  2817 ;;                  1    wreg      void 
  2818 ;; Registers used:
  2819 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2820 ;; Tracked objects:
  2821 ;;		On entry : 0/0
  2822 ;;		On exit  : 0/0
  2823 ;;		Unchanged: 0/0
  2824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2825 ;;      Params:         0       0       2       0       0       0       0
  2826 ;;      Locals:         0       1       0       0       0       0       0
  2827 ;;      Temps:          0       0       0       0       0       0       0
  2828 ;;      Totals:         0       1       2       0       0       0       0
  2829 ;;Total ram usage:        3 bytes
  2830 ;; Hardware stack levels used:    1
  2831 ;; Hardware stack levels required when called:    7
  2832 ;; This function calls:
  2833 ;;		_ResetMcu
  2834 ;;		_testLeds
  2835 ;; This function is called by:
  2836 ;;		_readUartMessage
  2837 ;; This function uses a non-reentrant model
  2838 ;;
  2839                           
  2840                           	psect	text7
  2841  0033B8                     __ptext7:
  2842                           	opt stack 0
  2843  0033B8                     _GroupControlMcu:
  2844                           	opt stack 22
  2845                           
  2846                           ;incstack = 0
  2847                           ;GroupControlMcu@request stored from wreg
  2848  0033B8  0100               	movlb	0	; () banked
  2849  0033BA  6FBF               	movwf	GroupControlMcu@request& (0+255),b
  2850                           
  2851                           ;MessageFunctions.c: 13: switch (request)
  2852  0033BC  D006               	goto	l1186
  2853  0033BE                     
  2854                           ;MessageFunctions.c: 16: testLeds();
  2855  0033BE  EC3F  F014         	call	_testLeds	;wreg free
  2856                           
  2857                           ;MessageFunctions.c: 17: break;
  2858  0033C2  0012               	return	
  2859  0033C4                     
  2860                           ;MessageFunctions.c: 20: ResetMcu();
  2861  0033C4  ECC8  F01B         	call	_ResetMcu	;wreg free
  2862                           
  2863                           ;MessageFunctions.c: 31: }
  2864                           
  2865                           ;MessageFunctions.c: 30: break;
  2866                           
  2867                           ;MessageFunctions.c: 29: default:
  2868                           
  2869                           ;MessageFunctions.c: 27: break;
  2870                           
  2871                           ;MessageFunctions.c: 26: case CONTROL_PA2_SET:
  2872                           
  2873                           ;MessageFunctions.c: 24: break;
  2874                           
  2875                           ;MessageFunctions.c: 23: case CONTROL_PA1_SET:
  2876                           
  2877                           ;MessageFunctions.c: 21: break;
  2878  0033C8  0012               	return	
  2879  0033CA                     l1186:
  2880  0033CA  0100               	movlb	0	; () banked
  2881  0033CC  51BF               	movf	GroupControlMcu@request& (0+255),w,b
  2882                           
  2883                           ; Switch size 1, requested type "space"
  2884                           ; Number of cases is 4, Range of values is 17 to 20
  2885                           ; switch strategies available:
  2886                           ; Name         Instructions Cycles
  2887                           ; simple_byte           13     7 (average)
  2888                           ;	Chosen strategy is simple_byte
  2889  0033CE  0A11               	xorlw	17	; case 17
  2890  0033D0  B4D8               	btfsc	status,2,c
  2891  0033D2  D7F8               	goto	l1189
  2892  0033D4  0A03               	xorlw	3	; case 18
  2893  0033D6  B4D8               	btfsc	status,2,c
  2894  0033D8  0012               	return	
  2895  0033DA  0A01               	xorlw	1	; case 19
  2896  0033DC  B4D8               	btfsc	status,2,c
  2897  0033DE  0012               	return	
  2898  0033E0  0A07               	xorlw	7	; case 20
  2899  0033E2  A4D8               	btfss	status,2,c
  2900  0033E4  0012               	return	
  2901  0033E6  D7EB               	goto	l1187
  2902  0033E8                     __end_of_GroupControlMcu:
  2903                           	opt stack 0
  2904                           tosu	equ	0xFFF
  2905                           tosh	equ	0xFFE
  2906                           tosl	equ	0xFFD
  2907                           pclath	equ	0xFFA
  2908                           tblptru	equ	0xFF8
  2909                           tblptrh	equ	0xFF7
  2910                           tblptrl	equ	0xFF6
  2911                           tablat	equ	0xFF5
  2912                           postinc0	equ	0xFEE
  2913                           wreg	equ	0xFE8
  2914                           postdec1	equ	0xFE5
  2915                           fsr1l	equ	0xFE1
  2916                           indf2	equ	0xFDF
  2917                           postinc2	equ	0xFDE
  2918                           fsr2h	equ	0xFDA
  2919                           fsr2l	equ	0xFD9
  2920                           status	equ	0xFD8
  2921                           
  2922 ;; *************** function _GroupSynthesizers *****************
  2923 ;; Defined at:
  2924 ;;		line 71 in file "MessageFunctions.c"
  2925 ;; Parameters:    Size  Location     Type
  2926 ;;  request         1    wreg     enum E12
  2927 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2928 ;; Auto vars:     Size  Location     Type
  2929 ;;  request         1   95[BANK0 ] enum E12
  2930 ;; Return value:  Size  Location     Type
  2931 ;;                  1    wreg      void 
  2932 ;; Registers used:
  2933 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2934 ;; Tracked objects:
  2935 ;;		On entry : 0/0
  2936 ;;		On exit  : 0/0
  2937 ;;		Unchanged: 0/0
  2938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2939 ;;      Params:         0       0       2       0       0       0       0
  2940 ;;      Locals:         0       1       0       0       0       0       0
  2941 ;;      Temps:          0       0       0       0       0       0       0
  2942 ;;      Totals:         0       1       2       0       0       0       0
  2943 ;;Total ram usage:        3 bytes
  2944 ;; Hardware stack levels used:    1
  2945 ;; Hardware stack levels required when called:    9
  2946 ;; This function calls:
  2947 ;;		_PLLUartInitialize
  2948 ;;		_SetSynthRxOper
  2949 ;;		_SetSynthTxOper
  2950 ;;		_SynthReadData
  2951 ;;		_UpdateRxFreq
  2952 ;;		_UpdateTxFreq
  2953 ;; This function is called by:
  2954 ;;		_readUartMessage
  2955 ;; This function uses a non-reentrant model
  2956 ;;
  2957                           
  2958                           	psect	text8
  2959  002204                     __ptext8:
  2960                           	opt stack 0
  2961  002204                     _GroupSynthesizers:
  2962                           	opt stack 20
  2963                           
  2964                           ;incstack = 0
  2965                           ;GroupSynthesizers@request stored from wreg
  2966  002204  0100               	movlb	0	; () banked
  2967  002206  6FBF               	movwf	GroupSynthesizers@request& (0+255),b
  2968                           
  2969                           ;MessageFunctions.c: 73: switch (request)
  2970  002208  D030               	goto	l1213
  2971  00220A                     
  2972                           ;MessageFunctions.c: 76: PLLUartInitialize(data);
  2973  00220A  C1C2  F018         	movff	GroupSynthesizers@data,PLLUartInitialize@data
  2974  00220E  C1C3  F019         	movff	GroupSynthesizers@data+1,PLLUartInitialize@data+1
  2975  002212  EC1C  F01C         	call	_PLLUartInitialize	;wreg free
  2976                           
  2977                           ;MessageFunctions.c: 77: break;
  2978  002216  0012               	return	
  2979  002218                     
  2980                           ;MessageFunctions.c: 80: PLLUartInitialize(data);
  2981  002218  C1C2  F018         	movff	GroupSynthesizers@data,PLLUartInitialize@data
  2982  00221C  C1C3  F019         	movff	GroupSynthesizers@data+1,PLLUartInitialize@data+1
  2983  002220  EC1C  F01C         	call	_PLLUartInitialize	;wreg free
  2984                           
  2985                           ;MessageFunctions.c: 81: break;
  2986  002224  0012               	return	
  2987  002226                     
  2988                           ;MessageFunctions.c: 84: UpdateTxFreq(data);
  2989  002226  C1C2  F086         	movff	GroupSynthesizers@data,UpdateTxFreq@data
  2990  00222A  C1C3  F087         	movff	GroupSynthesizers@data+1,UpdateTxFreq@data+1
  2991  00222E  ECCC  F013         	call	_UpdateTxFreq	;wreg free
  2992                           
  2993                           ;MessageFunctions.c: 85: break;
  2994  002232  0012               	return	
  2995  002234                     
  2996                           ;MessageFunctions.c: 88: UpdateRxFreq(data);
  2997  002234  C1C2  F086         	movff	GroupSynthesizers@data,UpdateRxFreq@data
  2998  002238  C1C3  F087         	movff	GroupSynthesizers@data+1,UpdateRxFreq@data+1
  2999  00223C  ECCB  F016         	call	_UpdateRxFreq	;wreg free
  3000                           
  3001                           ;MessageFunctions.c: 89: break;
  3002  002240  0012               	return	
  3003  002242                     
  3004                           ;MessageFunctions.c: 92: SetSynthRxOper();
  3005  002242  ECE4  F01B         	call	_SetSynthRxOper	;wreg free
  3006                           
  3007                           ;MessageFunctions.c: 93: break;
  3008  002246  0012               	return	
  3009  002248                     
  3010                           ;MessageFunctions.c: 96: SetSynthTxOper();
  3011  002248  ECF4  F019         	call	_SetSynthTxOper	;wreg free
  3012                           
  3013                           ;MessageFunctions.c: 97: break;
  3014  00224C  0012               	return	
  3015  00224E                     
  3016                           ;MessageFunctions.c: 100: SynthReadData(data);
  3017  00224E  C1C2  F024         	movff	GroupSynthesizers@data,SynthReadData@data
  3018  002252  C1C3  F025         	movff	GroupSynthesizers@data+1,SynthReadData@data+1
  3019  002256  ECD8  F014         	call	_SynthReadData	;wreg free
  3020                           
  3021                           ;MessageFunctions.c: 101: break;
  3022  00225A  0012               	return	
  3023  00225C                     
  3024                           ;MessageFunctions.c: 104: SynthReadData(data);
  3025  00225C  C1C2  F024         	movff	GroupSynthesizers@data,SynthReadData@data
  3026  002260  C1C3  F025         	movff	GroupSynthesizers@data+1,SynthReadData@data+1
  3027  002264  ECD8  F014         	call	_SynthReadData	;wreg free
  3028                           
  3029                           ;MessageFunctions.c: 109: }
  3030                           
  3031                           ;MessageFunctions.c: 108: break;
  3032                           
  3033                           ;MessageFunctions.c: 107: default:
  3034                           
  3035                           ;MessageFunctions.c: 105: break;
  3036  002268  0012               	return	
  3037  00226A                     l1213:
  3038  00226A  0100               	movlb	0	; () banked
  3039  00226C  51BF               	movf	GroupSynthesizers@request& (0+255),w,b
  3040                           
  3041                           ; Switch size 1, requested type "space"
  3042                           ; Number of cases is 8, Range of values is 64 to 71
  3043                           ; switch strategies available:
  3044                           ; Name         Instructions Cycles
  3045                           ; simple_byte           25    13 (average)
  3046                           ;	Chosen strategy is simple_byte
  3047  00226E  0A40               	xorlw	64	; case 64
  3048  002270  B4D8               	btfsc	status,2,c
  3049  002272  D7CB               	goto	l1214
  3050  002274  0A01               	xorlw	1	; case 65
  3051  002276  B4D8               	btfsc	status,2,c
  3052  002278  D7CF               	goto	l1216
  3053  00227A  0A03               	xorlw	3	; case 66
  3054  00227C  B4D8               	btfsc	status,2,c
  3055  00227E  D7D3               	goto	l1217
  3056  002280  0A01               	xorlw	1	; case 67
  3057  002282  B4D8               	btfsc	status,2,c
  3058  002284  D7D7               	goto	l1218
  3059  002286  0A07               	xorlw	7	; case 68
  3060  002288  B4D8               	btfsc	status,2,c
  3061  00228A  D7DB               	goto	l1219
  3062  00228C  0A01               	xorlw	1	; case 69
  3063  00228E  B4D8               	btfsc	status,2,c
  3064  002290  D7DB               	goto	l1220
  3065  002292  0A03               	xorlw	3	; case 70
  3066  002294  B4D8               	btfsc	status,2,c
  3067  002296  D7DB               	goto	l1221
  3068  002298  0A01               	xorlw	1	; case 71
  3069  00229A  A4D8               	btfss	status,2,c
  3070  00229C  0012               	return	
  3071  00229E  D7DE               	goto	l1222
  3072  0022A0                     __end_of_GroupSynthesizers:
  3073                           	opt stack 0
  3074                           tosu	equ	0xFFF
  3075                           tosh	equ	0xFFE
  3076                           tosl	equ	0xFFD
  3077                           pclath	equ	0xFFA
  3078                           tblptru	equ	0xFF8
  3079                           tblptrh	equ	0xFF7
  3080                           tblptrl	equ	0xFF6
  3081                           tablat	equ	0xFF5
  3082                           postinc0	equ	0xFEE
  3083                           wreg	equ	0xFE8
  3084                           postdec1	equ	0xFE5
  3085                           fsr1l	equ	0xFE1
  3086                           indf2	equ	0xFDF
  3087                           postinc2	equ	0xFDE
  3088                           fsr2h	equ	0xFDA
  3089                           fsr2l	equ	0xFD9
  3090                           status	equ	0xFD8
  3091                           
  3092 ;; *************** function _UpdateTxFreq *****************
  3093 ;; Defined at:
  3094 ;;		line 62 in file "SyntApp.c"
  3095 ;; Parameters:    Size  Location     Type
  3096 ;;  data            2   38[BANK0 ] PTR unsigned char 
  3097 ;; Auto vars:     Size  Location     Type
  3098 ;;  regData         4   42[BANK0 ] unsigned long 
  3099 ;; Return value:  Size  Location     Type
  3100 ;;                  1    wreg      void 
  3101 ;; Registers used:
  3102 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3103 ;; Tracked objects:
  3104 ;;		On entry : 0/0
  3105 ;;		On exit  : 0/0
  3106 ;;		Unchanged: 0/0
  3107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3108 ;;      Params:         0       2       0       0       0       0       0
  3109 ;;      Locals:         0       4       0       0       0       0       0
  3110 ;;      Temps:          0       2       0       0       0       0       0
  3111 ;;      Totals:         0       8       0       0       0       0       0
  3112 ;;Total ram usage:        8 bytes
  3113 ;; Hardware stack levels used:    1
  3114 ;; Hardware stack levels required when called:    7
  3115 ;; This function calls:
  3116 ;;		_GetIntFromUartData
  3117 ;;		_SWSPI_send_word
  3118 ;;		_SendAckMessage
  3119 ;; This function is called by:
  3120 ;;		_GroupSynthesizers
  3121 ;; This function uses a non-reentrant model
  3122 ;;
  3123                           
  3124                           	psect	text9
  3125  002798                     __ptext9:
  3126                           	opt stack 0
  3127  002798                     _UpdateTxFreq:
  3128                           	opt stack 21
  3129                           
  3130                           ;SyntApp.c: 67: if(cntRegUpdate < 7)
  3131                           
  3132                           ;incstack = 0
  3133  002798  0E07               	movlw	7
  3134  00279A  603A               	cpfslt	_cntRegUpdate,c
  3135  00279C  D02F               	goto	l501
  3136                           
  3137                           ;SyntApp.c: 68: {
  3138                           ;SyntApp.c: 69: uint32_t regData = GetIntFromUartData(10, data);
  3139  00279E  C086  F066         	movff	UpdateTxFreq@data,GetIntFromUartData@data
  3140  0027A2  C087  F067         	movff	UpdateTxFreq@data+1,GetIntFromUartData@data+1
  3141  0027A6  0E0A               	movlw	10
  3142  0027A8  EC39  F00F         	call	_GetIntFromUartData
  3143  0027AC  C066  F08A         	movff	?_GetIntFromUartData,UpdateTxFreq@regData
  3144  0027B0  C067  F08B         	movff	?_GetIntFromUartData+1,UpdateTxFreq@regData+1
  3145  0027B4  C068  F08C         	movff	?_GetIntFromUartData+2,UpdateTxFreq@regData+2
  3146  0027B8  C069  F08D         	movff	?_GetIntFromUartData+3,UpdateTxFreq@regData+3
  3147                           
  3148                           ;SyntApp.c: 71: SWSPI_send_word(SYNTH_TX, regData, 3);
  3149  0027BC  C08A  F026         	movff	UpdateTxFreq@regData,SWSPI_send_word@data
  3150  0027C0  C08B  F027         	movff	UpdateTxFreq@regData+1,SWSPI_send_word@data+1
  3151  0027C4  C08C  F028         	movff	UpdateTxFreq@regData+2,SWSPI_send_word@data+2
  3152  0027C8  C08D  F029         	movff	UpdateTxFreq@regData+3,SWSPI_send_word@data+3
  3153  0027CC  0E03               	movlw	3
  3154  0027CE  6E2A               	movwf	SWSPI_send_word@dataSize,c
  3155  0027D0  0E00               	movlw	0
  3156  0027D2  EC50  F011         	call	_SWSPI_send_word
  3157                           
  3158                           ;SyntApp.c: 72: _delay((unsigned long)((200)*(8000000/4000.0)));
  3159  0027D6  0E03               	movlw	3
  3160  0027D8  0100               	movlb	0	; () banked
  3161  0027DA  6F89               	movwf	(??_UpdateTxFreq+1)& (0+255),b
  3162  0027DC  0E08               	movlw	8
  3163  0027DE  6F88               	movwf	??_UpdateTxFreq& (0+255),b
  3164  0027E0  0E77               	movlw	119
  3165  0027E2                     u8167:
  3166  0027E2  2EE8               	decfsz	wreg,f,c
  3167  0027E4  D7FE               	bra	u8167
  3168  0027E6  2F88               	decfsz	??_UpdateTxFreq& (0+255),f,b
  3169  0027E8  D7FC               	bra	u8167
  3170  0027EA  2F89               	decfsz	(??_UpdateTxFreq+1)& (0+255),f,b
  3171  0027EC  D7FA               	bra	u8167
  3172                           
  3173                           ;SyntApp.c: 73: cntRegUpdate ++;
  3174  0027EE  2A3A               	incf	_cntRegUpdate,f,c
  3175                           
  3176                           ;SyntApp.c: 74: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_REQ_ANTHER_REG)
      +                          ;
  3177  0027F0  0E48               	movlw	72
  3178  0027F2  6E24               	movwf	SendAckMessage@inRequest,c
  3179  0027F4  0E04               	movlw	4
  3180  0027F6  EC1D  F017         	call	_SendAckMessage
  3181                           
  3182                           ;SyntApp.c: 75: }
  3183  0027FA  0012               	return	
  3184  0027FC                     l501:
  3185                           
  3186                           ;SyntApp.c: 77: else
  3187                           ;SyntApp.c: 78: {
  3188                           ;SyntApp.c: 79: cntRegUpdate = 0;
  3189  0027FC  0E00               	movlw	0
  3190  0027FE  6E3A               	movwf	_cntRegUpdate,c
  3191                           
  3192                           ;SyntApp.c: 80: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_DOWN_SET);
  3193  002800  0E42               	movlw	66
  3194  002802  6E24               	movwf	SendAckMessage@inRequest,c
  3195  002804  0E04               	movlw	4
  3196  002806  EC1D  F017         	call	_SendAckMessage
  3197  00280A  0012               	return	
  3198  00280C                     __end_of_UpdateTxFreq:
  3199                           	opt stack 0
  3200                           tosu	equ	0xFFF
  3201                           tosh	equ	0xFFE
  3202                           tosl	equ	0xFFD
  3203                           pclath	equ	0xFFA
  3204                           tblptru	equ	0xFF8
  3205                           tblptrh	equ	0xFF7
  3206                           tblptrl	equ	0xFF6
  3207                           tablat	equ	0xFF5
  3208                           postinc0	equ	0xFEE
  3209                           wreg	equ	0xFE8
  3210                           postdec1	equ	0xFE5
  3211                           fsr1l	equ	0xFE1
  3212                           indf2	equ	0xFDF
  3213                           postinc2	equ	0xFDE
  3214                           fsr2h	equ	0xFDA
  3215                           fsr2l	equ	0xFD9
  3216                           status	equ	0xFD8
  3217                           
  3218 ;; *************** function _UpdateRxFreq *****************
  3219 ;; Defined at:
  3220 ;;		line 85 in file "SyntApp.c"
  3221 ;; Parameters:    Size  Location     Type
  3222 ;;  data            2   38[BANK0 ] PTR unsigned char 
  3223 ;; Auto vars:     Size  Location     Type
  3224 ;;  regData         4   40[BANK0 ] unsigned long 
  3225 ;; Return value:  Size  Location     Type
  3226 ;;                  1    wreg      void 
  3227 ;; Registers used:
  3228 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3229 ;; Tracked objects:
  3230 ;;		On entry : 0/0
  3231 ;;		On exit  : 0/0
  3232 ;;		Unchanged: 0/0
  3233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3234 ;;      Params:         0       2       0       0       0       0       0
  3235 ;;      Locals:         0       4       0       0       0       0       0
  3236 ;;      Temps:          0       0       0       0       0       0       0
  3237 ;;      Totals:         0       6       0       0       0       0       0
  3238 ;;Total ram usage:        6 bytes
  3239 ;; Hardware stack levels used:    1
  3240 ;; Hardware stack levels required when called:    7
  3241 ;; This function calls:
  3242 ;;		_GetIntFromUartData
  3243 ;;		_SWSPI_send_word
  3244 ;;		_SendAckMessage
  3245 ;; This function is called by:
  3246 ;;		_GroupSynthesizers
  3247 ;; This function uses a non-reentrant model
  3248 ;;
  3249                           
  3250                           	psect	text10
  3251  002D96                     __ptext10:
  3252                           	opt stack 0
  3253  002D96                     _UpdateRxFreq:
  3254                           	opt stack 21
  3255                           
  3256                           ;SyntApp.c: 87: if(cntRegUpdate < 7)
  3257                           
  3258                           ;incstack = 0
  3259  002D96  0E07               	movlw	7
  3260  002D98  603A               	cpfslt	_cntRegUpdate,c
  3261  002D9A  D01E               	goto	l506
  3262                           
  3263                           ;SyntApp.c: 88: {
  3264                           ;SyntApp.c: 89: uint32_t regData = GetIntFromUartData(10, data);
  3265  002D9C  C086  F066         	movff	UpdateRxFreq@data,GetIntFromUartData@data
  3266  002DA0  C087  F067         	movff	UpdateRxFreq@data+1,GetIntFromUartData@data+1
  3267  002DA4  0E0A               	movlw	10
  3268  002DA6  EC39  F00F         	call	_GetIntFromUartData
  3269  002DAA  C066  F088         	movff	?_GetIntFromUartData,UpdateRxFreq@regData
  3270  002DAE  C067  F089         	movff	?_GetIntFromUartData+1,UpdateRxFreq@regData+1
  3271  002DB2  C068  F08A         	movff	?_GetIntFromUartData+2,UpdateRxFreq@regData+2
  3272  002DB6  C069  F08B         	movff	?_GetIntFromUartData+3,UpdateRxFreq@regData+3
  3273                           
  3274                           ;SyntApp.c: 90: SWSPI_send_word(SYNTH_RX, regData, 3);
  3275  002DBA  C088  F026         	movff	UpdateRxFreq@regData,SWSPI_send_word@data
  3276  002DBE  C089  F027         	movff	UpdateRxFreq@regData+1,SWSPI_send_word@data+1
  3277  002DC2  C08A  F028         	movff	UpdateRxFreq@regData+2,SWSPI_send_word@data+2
  3278  002DC6  C08B  F029         	movff	UpdateRxFreq@regData+3,SWSPI_send_word@data+3
  3279  002DCA  0E03               	movlw	3
  3280  002DCC  6E2A               	movwf	SWSPI_send_word@dataSize,c
  3281  002DCE  0E01               	movlw	1
  3282  002DD0  EC50  F011         	call	_SWSPI_send_word
  3283                           
  3284                           ;SyntApp.c: 91: cntRegUpdate ++;
  3285  002DD4  2A3A               	incf	_cntRegUpdate,f,c
  3286                           
  3287                           ;SyntApp.c: 92: }
  3288  002DD6  0012               	return	
  3289  002DD8                     l506:
  3290                           
  3291                           ;SyntApp.c: 94: else
  3292                           ;SyntApp.c: 95: {
  3293                           ;SyntApp.c: 96: cntRegUpdate = 0;
  3294  002DD8  0E00               	movlw	0
  3295  002DDA  6E3A               	movwf	_cntRegUpdate,c
  3296                           
  3297                           ;SyntApp.c: 97: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_UP_SET);
  3298  002DDC  0E43               	movlw	67
  3299  002DDE  6E24               	movwf	SendAckMessage@inRequest,c
  3300  002DE0  0E04               	movlw	4
  3301  002DE2  EC1D  F017         	call	_SendAckMessage
  3302  002DE6  0012               	return	
  3303  002DE8                     __end_of_UpdateRxFreq:
  3304                           	opt stack 0
  3305                           tosu	equ	0xFFF
  3306                           tosh	equ	0xFFE
  3307                           tosl	equ	0xFFD
  3308                           pclath	equ	0xFFA
  3309                           tblptru	equ	0xFF8
  3310                           tblptrh	equ	0xFF7
  3311                           tblptrl	equ	0xFF6
  3312                           tablat	equ	0xFF5
  3313                           postinc0	equ	0xFEE
  3314                           wreg	equ	0xFE8
  3315                           postdec1	equ	0xFE5
  3316                           fsr1l	equ	0xFE1
  3317                           indf2	equ	0xFDF
  3318                           postinc2	equ	0xFDE
  3319                           fsr2h	equ	0xFDA
  3320                           fsr2l	equ	0xFD9
  3321                           status	equ	0xFD8
  3322                           
  3323 ;; *************** function _SynthReadData *****************
  3324 ;; Defined at:
  3325 ;;		line 128 in file "SyntApp.c"
  3326 ;; Parameters:    Size  Location     Type
  3327 ;;  data            2   35[COMRAM] PTR unsigned char 
  3328 ;; Auto vars:     Size  Location     Type
  3329 ;;  TxMsg          27    0[BANK0 ] unsigned char [27]
  3330 ;;  indx            1   27[BANK0 ] unsigned char 
  3331 ;; Return value:  Size  Location     Type
  3332 ;;                  1    wreg      void 
  3333 ;; Registers used:
  3334 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3335 ;; Tracked objects:
  3336 ;;		On entry : 0/0
  3337 ;;		On exit  : 0/0
  3338 ;;		Unchanged: 0/0
  3339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3340 ;;      Params:         2       0       0       0       0       0       0
  3341 ;;      Locals:         0      28       0       0       0       0       0
  3342 ;;      Temps:          0       0       0       0       0       0       0
  3343 ;;      Totals:         2      28       0       0       0       0       0
  3344 ;;Total ram usage:       30 bytes
  3345 ;; Hardware stack levels used:    1
  3346 ;; Hardware stack levels required when called:    5
  3347 ;; This function calls:
  3348 ;;		_WriteUartMessage
  3349 ;;		_ZeroArray
  3350 ;;		_crc8
  3351 ;; This function is called by:
  3352 ;;		_GroupSynthesizers
  3353 ;; This function uses a non-reentrant model
  3354 ;;
  3355                           
  3356                           	psect	text11
  3357  0029B0                     __ptext11:
  3358                           	opt stack 0
  3359  0029B0                     _SynthReadData:
  3360                           	opt stack 23
  3361                           
  3362                           ;SyntApp.c: 131: char TxMsg[22 + (0x4) + 1];
  3363                           ;SyntApp.c: 132: ZeroArray(TxMsg, 22 + (0x4) + 1);
  3364                           
  3365                           ;incstack = 0
  3366  0029B0  0E60               	movlw	low SynthReadData@TxMsg
  3367  0029B2  6E20               	movwf	ZeroArray@array,c
  3368  0029B4  0E00               	movlw	high SynthReadData@TxMsg
  3369  0029B6  6E21               	movwf	ZeroArray@array+1,c
  3370  0029B8  0E00               	movlw	0
  3371  0029BA  6E23               	movwf	ZeroArray@size+1,c
  3372  0029BC  0E1B               	movlw	27
  3373  0029BE  6E22               	movwf	ZeroArray@size,c
  3374  0029C0  EC2F  F01B         	call	_ZeroArray	;wreg free
  3375                           
  3376                           ;SyntApp.c: 135: TxMsg[(0)] = (0x24);
  3377  0029C4  0E24               	movlw	36
  3378  0029C6  0100               	movlb	0	; () banked
  3379  0029C8  6F60               	movwf	SynthReadData@TxMsg& (0+255),b
  3380                           
  3381                           ; BSR set to: 0
  3382                           ;SyntApp.c: 136: TxMsg[(1)] = SYNTH_MSG;
  3383  0029CA  0E04               	movlw	4
  3384  0029CC  6F61               	movwf	(SynthReadData@TxMsg+1)& (0+255),b
  3385                           
  3386                           ; BSR set to: 0
  3387                           ;SyntApp.c: 137: TxMsg[(3)] = 22;
  3388  0029CE  0E16               	movlw	22
  3389  0029D0  6F63               	movwf	(SynthReadData@TxMsg+3)& (0+255),b
  3390                           
  3391                           ; BSR set to: 0
  3392                           ;SyntApp.c: 139: uint8_t indx = data[0];
  3393  0029D2  C024  FFD9         	movff	SynthReadData@data,fsr2l
  3394  0029D6  C025  FFDA         	movff	SynthReadData@data+1,fsr2h
  3395  0029DA  50DF               	movf	indf2,w,c
  3396  0029DC  6F7B               	movwf	SynthReadData@indx& (0+255),b
  3397                           
  3398                           ; BSR set to: 0
  3399                           ;SyntApp.c: 140: if(indx)
  3400  0029DE  517B               	movf	SynthReadData@indx& (0+255),w,b
  3401                           
  3402                           ; BSR set to: 0
  3403                           ;SyntApp.c: 154: else
  3404                           ;SyntApp.c: 155: {
  3405                           ;SyntApp.c: 156: TxMsg[(2)] = SYNTH_DOWN_READ_DATA;
  3406                           
  3407                           ; BSR set to: 0
  3408                           
  3409                           ;SyntApp.c: 153: }
  3410                           
  3411                           ; BSR set to: 0
  3412                           ;SyntApp.c: 141: {
  3413                           ;SyntApp.c: 142: TxMsg[(2)] = SYNTH_DOWN_READ_DATA;
  3414  0029E0  0E47               	movlw	71
  3415  0029E2  6F62               	movwf	(SynthReadData@TxMsg+2)& (0+255),b
  3416                           
  3417                           ; BSR set to: 0
  3418                           ;SyntApp.c: 158: }
  3419                           ;SyntApp.c: 160: TxMsg[22 + (0x4)] = crc8(TxMsg, 22 + (0x4));
  3420                           
  3421                           ; BSR set to: 0
  3422  0029E4  0E60               	movlw	low SynthReadData@TxMsg
  3423  0029E6  6E18               	movwf	crc8@dataArray,c
  3424  0029E8  0E00               	movlw	high SynthReadData@TxMsg
  3425  0029EA  6E19               	movwf	crc8@dataArray+1,c
  3426  0029EC  0E00               	movlw	0
  3427  0029EE  6E1B               	movwf	crc8@dataSize+1,c
  3428  0029F0  0E1A               	movlw	26
  3429  0029F2  6E1A               	movwf	crc8@dataSize,c
  3430  0029F4  EC46  F017         	call	_crc8	;wreg free
  3431  0029F8  0100               	movlb	0	; () banked
  3432  0029FA  6F7A               	movwf	(SynthReadData@TxMsg+26)& (0+255),b
  3433                           
  3434                           ; BSR set to: 0
  3435                           ;SyntApp.c: 161: WriteUartMessage(TxMsg, 22 + (0x4) + 1);
  3436  0029FC  0E60               	movlw	low SynthReadData@TxMsg
  3437  0029FE  6E19               	movwf	WriteUartMessage@dataBuf,c
  3438  002A00  0E00               	movlw	high SynthReadData@TxMsg
  3439  002A02  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  3440  002A04  0E00               	movlw	0
  3441  002A06  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  3442  002A08  0E1B               	movlw	27
  3443  002A0A  6E1B               	movwf	WriteUartMessage@dataSize,c
  3444  002A0C  EC8D  F019         	call	_WriteUartMessage	;wreg free
  3445  002A10  0012               	return		;funcret
  3446  002A12                     __end_of_SynthReadData:
  3447                           	opt stack 0
  3448                           tosu	equ	0xFFF
  3449                           tosh	equ	0xFFE
  3450                           tosl	equ	0xFFD
  3451                           pclath	equ	0xFFA
  3452                           tblptru	equ	0xFF8
  3453                           tblptrh	equ	0xFF7
  3454                           tblptrl	equ	0xFF6
  3455                           tablat	equ	0xFF5
  3456                           postinc0	equ	0xFEE
  3457                           wreg	equ	0xFE8
  3458                           postdec1	equ	0xFE5
  3459                           fsr1l	equ	0xFE1
  3460                           indf2	equ	0xFDF
  3461                           postinc2	equ	0xFDE
  3462                           fsr2h	equ	0xFDA
  3463                           fsr2l	equ	0xFD9
  3464                           status	equ	0xFD8
  3465                           
  3466 ;; *************** function _SetSynthTxOper *****************
  3467 ;; Defined at:
  3468 ;;		line 109 in file "SyntApp.c"
  3469 ;; Parameters:    Size  Location     Type
  3470 ;;		None
  3471 ;; Auto vars:     Size  Location     Type
  3472 ;;		None
  3473 ;; Return value:  Size  Location     Type
  3474 ;;                  1    wreg      void 
  3475 ;; Registers used:
  3476 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3477 ;; Tracked objects:
  3478 ;;		On entry : 0/0
  3479 ;;		On exit  : 0/0
  3480 ;;		Unchanged: 0/0
  3481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3482 ;;      Params:         0       0       0       0       0       0       0
  3483 ;;      Locals:         0       0       0       0       0       0       0
  3484 ;;      Temps:          0       0       0       0       0       0       0
  3485 ;;      Totals:         0       0       0       0       0       0       0
  3486 ;;Total ram usage:        0 bytes
  3487 ;; Hardware stack levels used:    1
  3488 ;; Hardware stack levels required when called:    8
  3489 ;; This function calls:
  3490 ;;		_InitTxSynth
  3491 ;;		_SendAckMessage
  3492 ;;		_SwSpi_Set_CE_Pin
  3493 ;; This function is called by:
  3494 ;;		_GroupSynthesizers
  3495 ;; This function uses a non-reentrant model
  3496 ;;
  3497                           
  3498                           	psect	text12
  3499  0033E8                     __ptext12:
  3500                           	opt stack 0
  3501  0033E8                     _SetSynthTxOper:
  3502                           	opt stack 20
  3503                           
  3504                           ;SyntApp.c: 111: SynthTxOper = !SynthTxOper;
  3505                           
  3506                           ;incstack = 0
  3507  0033E8  5045               	movf	_SynthTxOper,w,c
  3508  0033EA  A4D8               	btfss	status,2,c
  3509  0033EC  D002               	goto	u7510
  3510  0033EE  0E01               	movlw	1
  3511  0033F0  D001               	goto	u7520
  3512  0033F2                     u7510:
  3513  0033F2  0E00               	movlw	0
  3514  0033F4                     u7520:
  3515  0033F4  6E45               	movwf	_SynthTxOper,c
  3516                           
  3517                           ;SyntApp.c: 112: if(SynthTxOper)
  3518  0033F6  5045               	movf	_SynthTxOper,w,c
  3519  0033F8  B4D8               	btfsc	status,2,c
  3520  0033FA  D003               	goto	l511
  3521                           
  3522                           ;SyntApp.c: 113: {
  3523                           ;SyntApp.c: 114: InitTxSynth();
  3524  0033FC  EC6D  F017         	call	_InitTxSynth	;wreg free
  3525                           
  3526                           ;SyntApp.c: 115: }
  3527  003400  D005               	goto	l512
  3528  003402                     l511:
  3529                           
  3530                           ;SyntApp.c: 116: else
  3531                           ;SyntApp.c: 117: {
  3532                           ;SyntApp.c: 118: SwSpi_Set_CE_Pin(SYNTH_TX, 0);
  3533  003402  0E00               	movlw	0
  3534  003404  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  3535  003406  0E00               	movlw	0
  3536  003408  ECC7  F018         	call	_SwSpi_Set_CE_Pin
  3537  00340C                     l512:
  3538                           
  3539                           ;SyntApp.c: 119: }
  3540                           ;SyntApp.c: 120: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_DOWN_OPER);
  3541  00340C  0E45               	movlw	69
  3542  00340E  6E24               	movwf	SendAckMessage@inRequest,c
  3543  003410  0E04               	movlw	4
  3544  003412  EC1D  F017         	call	_SendAckMessage
  3545  003416  0012               	return		;funcret
  3546  003418                     __end_of_SetSynthTxOper:
  3547                           	opt stack 0
  3548                           tosu	equ	0xFFF
  3549                           tosh	equ	0xFFE
  3550                           tosl	equ	0xFFD
  3551                           pclath	equ	0xFFA
  3552                           tblptru	equ	0xFF8
  3553                           tblptrh	equ	0xFF7
  3554                           tblptrl	equ	0xFF6
  3555                           tablat	equ	0xFF5
  3556                           postinc0	equ	0xFEE
  3557                           wreg	equ	0xFE8
  3558                           postdec1	equ	0xFE5
  3559                           fsr1l	equ	0xFE1
  3560                           indf2	equ	0xFDF
  3561                           postinc2	equ	0xFDE
  3562                           fsr2h	equ	0xFDA
  3563                           fsr2l	equ	0xFD9
  3564                           status	equ	0xFD8
  3565                           
  3566 ;; *************** function _SetSynthRxOper *****************
  3567 ;; Defined at:
  3568 ;;		line 123 in file "SyntApp.c"
  3569 ;; Parameters:    Size  Location     Type
  3570 ;;		None
  3571 ;; Auto vars:     Size  Location     Type
  3572 ;;		None
  3573 ;; Return value:  Size  Location     Type
  3574 ;;                  1    wreg      void 
  3575 ;; Registers used:
  3576 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3577 ;; Tracked objects:
  3578 ;;		On entry : 0/0
  3579 ;;		On exit  : 0/0
  3580 ;;		Unchanged: 0/0
  3581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3582 ;;      Params:         0       0       0       0       0       0       0
  3583 ;;      Locals:         0       0       0       0       0       0       0
  3584 ;;      Temps:          0       0       0       0       0       0       0
  3585 ;;      Totals:         0       0       0       0       0       0       0
  3586 ;;Total ram usage:        0 bytes
  3587 ;; Hardware stack levels used:    1
  3588 ;; Hardware stack levels required when called:    6
  3589 ;; This function calls:
  3590 ;;		_SendAckMessage
  3591 ;; This function is called by:
  3592 ;;		_GroupSynthesizers
  3593 ;; This function uses a non-reentrant model
  3594 ;;
  3595                           
  3596                           	psect	text13
  3597  0037C8                     __ptext13:
  3598                           	opt stack 0
  3599  0037C8                     _SetSynthRxOper:
  3600                           	opt stack 22
  3601                           
  3602                           ;SyntApp.c: 125: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_UP_OPER);
  3603                           
  3604                           ;incstack = 0
  3605  0037C8  0E44               	movlw	68
  3606  0037CA  6E24               	movwf	SendAckMessage@inRequest,c
  3607  0037CC  0E04               	movlw	4
  3608  0037CE  EC1D  F017         	call	_SendAckMessage
  3609  0037D2  0012               	return		;funcret
  3610  0037D4                     __end_of_SetSynthRxOper:
  3611                           	opt stack 0
  3612                           tosu	equ	0xFFF
  3613                           tosh	equ	0xFFE
  3614                           tosl	equ	0xFFD
  3615                           pclath	equ	0xFFA
  3616                           tblptru	equ	0xFF8
  3617                           tblptrh	equ	0xFF7
  3618                           tblptrl	equ	0xFF6
  3619                           tablat	equ	0xFF5
  3620                           postinc0	equ	0xFEE
  3621                           wreg	equ	0xFE8
  3622                           postdec1	equ	0xFE5
  3623                           fsr1l	equ	0xFE1
  3624                           indf2	equ	0xFDF
  3625                           postinc2	equ	0xFDE
  3626                           fsr2h	equ	0xFDA
  3627                           fsr2l	equ	0xFD9
  3628                           status	equ	0xFD8
  3629                           
  3630 ;; *************** function _PLLUartInitialize *****************
  3631 ;; Defined at:
  3632 ;;		line 28 in file "SyntApp.c"
  3633 ;; Parameters:    Size  Location     Type
  3634 ;;  data            2   23[COMRAM] PTR unsigned char 
  3635 ;; Auto vars:     Size  Location     Type
  3636 ;;		None
  3637 ;; Return value:  Size  Location     Type
  3638 ;;                  1    wreg      void 
  3639 ;; Registers used:
  3640 ;;		None
  3641 ;; Tracked objects:
  3642 ;;		On entry : 0/0
  3643 ;;		On exit  : 0/0
  3644 ;;		Unchanged: 0/0
  3645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3646 ;;      Params:         2       0       0       0       0       0       0
  3647 ;;      Locals:         0       0       0       0       0       0       0
  3648 ;;      Temps:          0       0       0       0       0       0       0
  3649 ;;      Totals:         2       0       0       0       0       0       0
  3650 ;;Total ram usage:        2 bytes
  3651 ;; Hardware stack levels used:    1
  3652 ;; Hardware stack levels required when called:    3
  3653 ;; This function calls:
  3654 ;;		Nothing
  3655 ;; This function is called by:
  3656 ;;		_GroupSynthesizers
  3657 ;; This function uses a non-reentrant model
  3658 ;;
  3659                           
  3660                           	psect	text14
  3661  003838                     __ptext14:
  3662                           	opt stack 0
  3663  003838                     _PLLUartInitialize:
  3664                           	opt stack 25
  3665                           
  3666                           ;incstack = 0
  3667  003838  0012               	return		;funcret
  3668  00383A                     __end_of_PLLUartInitialize:
  3669                           	opt stack 0
  3670                           tosu	equ	0xFFF
  3671                           tosh	equ	0xFFE
  3672                           tosl	equ	0xFFD
  3673                           pclath	equ	0xFFA
  3674                           tblptru	equ	0xFF8
  3675                           tblptrh	equ	0xFF7
  3676                           tblptrl	equ	0xFF6
  3677                           tablat	equ	0xFF5
  3678                           postinc0	equ	0xFEE
  3679                           wreg	equ	0xFE8
  3680                           postdec1	equ	0xFE5
  3681                           fsr1l	equ	0xFE1
  3682                           indf2	equ	0xFDF
  3683                           postinc2	equ	0xFDE
  3684                           fsr2h	equ	0xFDA
  3685                           fsr2l	equ	0xFD9
  3686                           status	equ	0xFD8
  3687                           
  3688 ;; *************** function _GetMcuRunTime *****************
  3689 ;; Defined at:
  3690 ;;		line 54 in file "SystemStatus.c"
  3691 ;; Parameters:    Size  Location     Type
  3692 ;;		None
  3693 ;; Auto vars:     Size  Location     Type
  3694 ;;  idx             2   13[BANK0 ] int 
  3695 ;;  TxMsg           9    0[BANK0 ] unsigned char [9]
  3696 ;;  tempRunTime     4    9[BANK0 ] unsigned long 
  3697 ;; Return value:  Size  Location     Type
  3698 ;;                  1    wreg      void 
  3699 ;; Registers used:
  3700 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3701 ;; Tracked objects:
  3702 ;;		On entry : 0/0
  3703 ;;		On exit  : 0/0
  3704 ;;		Unchanged: 0/0
  3705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3706 ;;      Params:         0       0       0       0       0       0       0
  3707 ;;      Locals:         0      15       0       0       0       0       0
  3708 ;;      Temps:          2       0       0       0       0       0       0
  3709 ;;      Totals:         2      15       0       0       0       0       0
  3710 ;;Total ram usage:       17 bytes
  3711 ;; Hardware stack levels used:    1
  3712 ;; Hardware stack levels required when called:    5
  3713 ;; This function calls:
  3714 ;;		_WriteUartMessage
  3715 ;;		___lldiv
  3716 ;;		___llmod
  3717 ;;		_crc8
  3718 ;; This function is called by:
  3719 ;;		_GroupStatusAndVersion
  3720 ;; This function uses a non-reentrant model
  3721 ;;
  3722                           
  3723                           	psect	text15
  3724  001B0C                     __ptext15:
  3725                           	opt stack 0
  3726  001B0C                     _GetMcuRunTime:
  3727                           	opt stack 23
  3728                           
  3729                           ;SystemStatus.c: 57: char TxMsg[(0x4) + (0x4) + 1];
  3730                           ;SystemStatus.c: 60: TxMsg[(0)] = (0x24);
  3731                           
  3732                           ;incstack = 0
  3733  001B0C  0E24               	movlw	36
  3734  001B0E  0100               	movlb	0	; () banked
  3735  001B10  6F60               	movwf	GetMcuRunTime@TxMsg& (0+255),b
  3736                           
  3737                           ;SystemStatus.c: 61: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  3738  001B12  0E02               	movlw	2
  3739  001B14  6F61               	movwf	(GetMcuRunTime@TxMsg+1)& (0+255),b
  3740                           
  3741                           ;SystemStatus.c: 62: TxMsg[(2)] = STATUS_MCU_RUN_TIME;
  3742  001B16  0E21               	movlw	33
  3743  001B18  6F62               	movwf	(GetMcuRunTime@TxMsg+2)& (0+255),b
  3744                           
  3745                           ;SystemStatus.c: 63: TxMsg[(3)] = (0x4);
  3746  001B1A  0E04               	movlw	4
  3747  001B1C  6F63               	movwf	(GetMcuRunTime@TxMsg+3)& (0+255),b
  3748                           
  3749                           ; BSR set to: 0
  3750                           ;SystemStatus.c: 65: uint32_t tempRunTime = mcuRunTimeIn5SecTicks;
  3751  001B1E  C0C1  F069         	movff	_mcuRunTimeIn5SecTicks,GetMcuRunTime@tempRunTime
  3752  001B22  C0C2  F06A         	movff	_mcuRunTimeIn5SecTicks+1,GetMcuRunTime@tempRunTime+1
  3753  001B26  C0C3  F06B         	movff	_mcuRunTimeIn5SecTicks+2,GetMcuRunTime@tempRunTime+2
  3754  001B2A  C0C4  F06C         	movff	_mcuRunTimeIn5SecTicks+3,GetMcuRunTime@tempRunTime+3
  3755                           
  3756                           ;SystemStatus.c: 68: for(int idx = 0; idx < (0x4); idx++)
  3757  001B2E  0E00               	movlw	0
  3758  001B30  6F6E               	movwf	(GetMcuRunTime@idx+1)& (0+255),b
  3759  001B32  0E00               	movlw	0
  3760  001B34  6F6D               	movwf	GetMcuRunTime@idx& (0+255),b
  3761  001B36                     l7586:
  3762                           
  3763                           ; BSR set to: 0
  3764  001B36  BF6E               	btfsc	(GetMcuRunTime@idx+1)& (0+255),7,b
  3765  001B38  D006               	goto	l1384
  3766  001B3A  516E               	movf	(GetMcuRunTime@idx+1)& (0+255),w,b
  3767  001B3C  E142               	bnz	l7598
  3768  001B3E  0E04               	movlw	4
  3769  001B40  5D6D               	subwf	GetMcuRunTime@idx& (0+255),w,b
  3770  001B42  B0D8               	btfsc	status,0,c
  3771  001B44  D03E               	goto	u7560
  3772  001B46                     l1384:
  3773                           
  3774                           ; BSR set to: 0
  3775                           ;SystemStatus.c: 69: {
  3776                           ;SystemStatus.c: 70: TxMsg[(0x4) + idx] = tempRunTime % 10;
  3777                           
  3778                           ; BSR set to: 0
  3779  001B46  0E04               	movlw	4
  3780  001B48  256D               	addwf	GetMcuRunTime@idx& (0+255),w,b
  3781  001B4A  6E25               	movwf	??_GetMcuRunTime& (0+255),c
  3782  001B4C  0E00               	movlw	0
  3783  001B4E  216E               	addwfc	(GetMcuRunTime@idx+1)& (0+255),w,b
  3784  001B50  6E26               	movwf	(??_GetMcuRunTime+1)& (0+255),c
  3785  001B52  0E60               	movlw	low GetMcuRunTime@TxMsg
  3786  001B54  2425               	addwf	??_GetMcuRunTime,w,c
  3787  001B56  6ED9               	movwf	fsr2l,c
  3788  001B58  0E00               	movlw	high GetMcuRunTime@TxMsg
  3789  001B5A  2026               	addwfc	??_GetMcuRunTime+1,w,c
  3790  001B5C  6EDA               	movwf	fsr2h,c
  3791  001B5E  C069  F018         	movff	GetMcuRunTime@tempRunTime,___llmod@dividend
  3792  001B62  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___llmod@dividend+1
  3793  001B66  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___llmod@dividend+2
  3794  001B6A  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___llmod@dividend+3
  3795  001B6E  0E0A               	movlw	10
  3796  001B70  6E1C               	movwf	___llmod@divisor,c
  3797  001B72  0E00               	movlw	0
  3798  001B74  6E1D               	movwf	___llmod@divisor+1,c
  3799  001B76  0E00               	movlw	0
  3800  001B78  6E1E               	movwf	___llmod@divisor+2,c
  3801  001B7A  0E00               	movlw	0
  3802  001B7C  6E1F               	movwf	___llmod@divisor+3,c
  3803  001B7E  EC74  F014         	call	___llmod	;wreg free
  3804  001B82  5018               	movf	?___llmod,w,c
  3805  001B84  6EDF               	movwf	indf2,c
  3806                           
  3807                           ;SystemStatus.c: 71: tempRunTime /= 10;
  3808  001B86  C069  F018         	movff	GetMcuRunTime@tempRunTime,___lldiv@dividend
  3809  001B8A  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___lldiv@dividend+1
  3810  001B8E  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___lldiv@dividend+2
  3811  001B92  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___lldiv@dividend+3
  3812  001B96  0E0A               	movlw	10
  3813  001B98  6E1C               	movwf	___lldiv@divisor,c
  3814  001B9A  0E00               	movlw	0
  3815  001B9C  6E1D               	movwf	___lldiv@divisor+1,c
  3816  001B9E  0E00               	movlw	0
  3817  001BA0  6E1E               	movwf	___lldiv@divisor+2,c
  3818  001BA2  0E00               	movlw	0
  3819  001BA4  6E1F               	movwf	___lldiv@divisor+3,c
  3820  001BA6  EC4E  F013         	call	___lldiv	;wreg free
  3821  001BAA  C018  F069         	movff	?___lldiv,GetMcuRunTime@tempRunTime
  3822  001BAE  C019  F06A         	movff	?___lldiv+1,GetMcuRunTime@tempRunTime+1
  3823  001BB2  C01A  F06B         	movff	?___lldiv+2,GetMcuRunTime@tempRunTime+2
  3824  001BB6  C01B  F06C         	movff	?___lldiv+3,GetMcuRunTime@tempRunTime+3
  3825  001BBA  0100               	movlb	0	; () banked
  3826  001BBC  4B6D               	infsnz	GetMcuRunTime@idx& (0+255),f,b
  3827  001BBE  2B6E               	incf	(GetMcuRunTime@idx+1)& (0+255),f,b
  3828  001BC0  D7BA               	goto	l7586
  3829  001BC2                     u7560:
  3830  001BC2                     l7598:
  3831                           
  3832                           ; BSR set to: 0
  3833                           ;SystemStatus.c: 72: }
  3834                           ;SystemStatus.c: 74: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  3835  001BC2  0E60               	movlw	low GetMcuRunTime@TxMsg
  3836  001BC4  6E18               	movwf	crc8@dataArray,c
  3837  001BC6  0E00               	movlw	high GetMcuRunTime@TxMsg
  3838  001BC8  6E19               	movwf	crc8@dataArray+1,c
  3839  001BCA  0E00               	movlw	0
  3840  001BCC  6E1B               	movwf	crc8@dataSize+1,c
  3841  001BCE  0E08               	movlw	8
  3842  001BD0  6E1A               	movwf	crc8@dataSize,c
  3843  001BD2  EC46  F017         	call	_crc8	;wreg free
  3844  001BD6  0100               	movlb	0	; () banked
  3845  001BD8  6F68               	movwf	(GetMcuRunTime@TxMsg+8)& (0+255),b
  3846                           
  3847                           ; BSR set to: 0
  3848                           ;SystemStatus.c: 76: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  3849  001BDA  0E60               	movlw	low GetMcuRunTime@TxMsg
  3850  001BDC  6E19               	movwf	WriteUartMessage@dataBuf,c
  3851  001BDE  0E00               	movlw	high GetMcuRunTime@TxMsg
  3852  001BE0  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  3853  001BE2  0E00               	movlw	0
  3854  001BE4  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  3855  001BE6  0E09               	movlw	9
  3856  001BE8  6E1B               	movwf	WriteUartMessage@dataSize,c
  3857  001BEA  EC8D  F019         	call	_WriteUartMessage	;wreg free
  3858  001BEE  0012               	return		;funcret
  3859  001BF0                     __end_of_GetMcuRunTime:
  3860                           	opt stack 0
  3861                           tosu	equ	0xFFF
  3862                           tosh	equ	0xFFE
  3863                           tosl	equ	0xFFD
  3864                           pclath	equ	0xFFA
  3865                           tblptru	equ	0xFF8
  3866                           tblptrh	equ	0xFF7
  3867                           tblptrl	equ	0xFF6
  3868                           tablat	equ	0xFF5
  3869                           postinc0	equ	0xFEE
  3870                           wreg	equ	0xFE8
  3871                           postdec1	equ	0xFE5
  3872                           fsr1l	equ	0xFE1
  3873                           indf2	equ	0xFDF
  3874                           postinc2	equ	0xFDE
  3875                           fsr2h	equ	0xFDA
  3876                           fsr2l	equ	0xFD9
  3877                           status	equ	0xFD8
  3878                           
  3879 ;; *************** function ___lldiv *****************
  3880 ;; Defined at:
  3881 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  3882 ;; Parameters:    Size  Location     Type
  3883 ;;  dividend        4   23[COMRAM] unsigned long 
  3884 ;;  divisor         4   27[COMRAM] unsigned long 
  3885 ;; Auto vars:     Size  Location     Type
  3886 ;;  quotient        4   31[COMRAM] unsigned long 
  3887 ;;  counter         1   35[COMRAM] unsigned char 
  3888 ;; Return value:  Size  Location     Type
  3889 ;;                  4   23[COMRAM] unsigned long 
  3890 ;; Registers used:
  3891 ;;		wreg, status,2, status,0
  3892 ;; Tracked objects:
  3893 ;;		On entry : 0/0
  3894 ;;		On exit  : 0/0
  3895 ;;		Unchanged: 0/0
  3896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3897 ;;      Params:         8       0       0       0       0       0       0
  3898 ;;      Locals:         5       0       0       0       0       0       0
  3899 ;;      Temps:          0       0       0       0       0       0       0
  3900 ;;      Totals:        13       0       0       0       0       0       0
  3901 ;;Total ram usage:       13 bytes
  3902 ;; Hardware stack levels used:    1
  3903 ;; Hardware stack levels required when called:    3
  3904 ;; This function calls:
  3905 ;;		Nothing
  3906 ;; This function is called by:
  3907 ;;		_GetMcuRunTime
  3908 ;; This function uses a non-reentrant model
  3909 ;;
  3910                           
  3911                           	psect	text16
  3912  00269C                     __ptext16:
  3913                           	opt stack 0
  3914  00269C                     ___lldiv:
  3915                           	opt stack 24
  3916                           
  3917                           ;incstack = 0
  3918  00269C  0E00               	movlw	0
  3919  00269E  6E20               	movwf	___lldiv@quotient,c
  3920  0026A0  0E00               	movlw	0
  3921  0026A2  6E21               	movwf	___lldiv@quotient+1,c
  3922  0026A4  0E00               	movlw	0
  3923  0026A6  6E22               	movwf	___lldiv@quotient+2,c
  3924  0026A8  0E00               	movlw	0
  3925  0026AA  6E23               	movwf	___lldiv@quotient+3,c
  3926  0026AC  501C               	movf	___lldiv@divisor,w,c
  3927  0026AE  101D               	iorwf	___lldiv@divisor+1,w,c
  3928  0026B0  101E               	iorwf	___lldiv@divisor+2,w,c
  3929  0026B2  101F               	iorwf	___lldiv@divisor+3,w,c
  3930  0026B4  B4D8               	btfsc	status,2,c
  3931  0026B6  D02A               	goto	l1815
  3932  0026B8  0E01               	movlw	1
  3933  0026BA  6E24               	movwf	___lldiv@counter,c
  3934  0026BC  D006               	goto	l1810
  3935  0026BE  90D8               	bcf	status,0,c
  3936  0026C0  361C               	rlcf	___lldiv@divisor,f,c
  3937  0026C2  361D               	rlcf	___lldiv@divisor+1,f,c
  3938  0026C4  361E               	rlcf	___lldiv@divisor+2,f,c
  3939  0026C6  361F               	rlcf	___lldiv@divisor+3,f,c
  3940  0026C8  2A24               	incf	___lldiv@counter,f,c
  3941  0026CA                     l1810:
  3942  0026CA  AE1F               	btfss	___lldiv@divisor+3,7,c
  3943  0026CC  D7F8               	goto	l1811
  3944  0026CE                     u7040:
  3945  0026CE  90D8               	bcf	status,0,c
  3946  0026D0  3620               	rlcf	___lldiv@quotient,f,c
  3947  0026D2  3621               	rlcf	___lldiv@quotient+1,f,c
  3948  0026D4  3622               	rlcf	___lldiv@quotient+2,f,c
  3949  0026D6  3623               	rlcf	___lldiv@quotient+3,f,c
  3950  0026D8  501C               	movf	___lldiv@divisor,w,c
  3951  0026DA  5C18               	subwf	___lldiv@dividend,w,c
  3952  0026DC  501D               	movf	___lldiv@divisor+1,w,c
  3953  0026DE  5819               	subwfb	___lldiv@dividend+1,w,c
  3954  0026E0  501E               	movf	___lldiv@divisor+2,w,c
  3955  0026E2  581A               	subwfb	___lldiv@dividend+2,w,c
  3956  0026E4  501F               	movf	___lldiv@divisor+3,w,c
  3957  0026E6  581B               	subwfb	___lldiv@dividend+3,w,c
  3958  0026E8  A0D8               	btfss	status,0,c
  3959  0026EA  D009               	goto	l1814
  3960  0026EC  501C               	movf	___lldiv@divisor,w,c
  3961  0026EE  5E18               	subwf	___lldiv@dividend,f,c
  3962  0026F0  501D               	movf	___lldiv@divisor+1,w,c
  3963  0026F2  5A19               	subwfb	___lldiv@dividend+1,f,c
  3964  0026F4  501E               	movf	___lldiv@divisor+2,w,c
  3965  0026F6  5A1A               	subwfb	___lldiv@dividend+2,f,c
  3966  0026F8  501F               	movf	___lldiv@divisor+3,w,c
  3967  0026FA  5A1B               	subwfb	___lldiv@dividend+3,f,c
  3968  0026FC  8020               	bsf	___lldiv@quotient,0,c
  3969  0026FE                     l1814:
  3970  0026FE  90D8               	bcf	status,0,c
  3971  002700  321F               	rrcf	___lldiv@divisor+3,f,c
  3972  002702  321E               	rrcf	___lldiv@divisor+2,f,c
  3973  002704  321D               	rrcf	___lldiv@divisor+1,f,c
  3974  002706  321C               	rrcf	___lldiv@divisor,f,c
  3975  002708  2E24               	decfsz	___lldiv@counter,f,c
  3976  00270A  D7E1               	goto	u7040
  3977  00270C                     l1815:
  3978  00270C  C020  F018         	movff	___lldiv@quotient,?___lldiv
  3979  002710  C021  F019         	movff	___lldiv@quotient+1,?___lldiv+1
  3980  002714  C022  F01A         	movff	___lldiv@quotient+2,?___lldiv+2
  3981  002718  C023  F01B         	movff	___lldiv@quotient+3,?___lldiv+3
  3982  00271C  0012               	return		;funcret
  3983  00271E                     __end_of___lldiv:
  3984                           	opt stack 0
  3985                           tosu	equ	0xFFF
  3986                           tosh	equ	0xFFE
  3987                           tosl	equ	0xFFD
  3988                           pclath	equ	0xFFA
  3989                           tblptru	equ	0xFF8
  3990                           tblptrh	equ	0xFF7
  3991                           tblptrl	equ	0xFF6
  3992                           tablat	equ	0xFF5
  3993                           postinc0	equ	0xFEE
  3994                           wreg	equ	0xFE8
  3995                           postdec1	equ	0xFE5
  3996                           fsr1l	equ	0xFE1
  3997                           indf2	equ	0xFDF
  3998                           postinc2	equ	0xFDE
  3999                           fsr2h	equ	0xFDA
  4000                           fsr2l	equ	0xFD9
  4001                           status	equ	0xFD8
  4002                           
  4003 ;; *************** function _GetMcuFwVersion *****************
  4004 ;; Defined at:
  4005 ;;		line 14 in file "SystemStatus.c"
  4006 ;; Parameters:    Size  Location     Type
  4007 ;;		None
  4008 ;; Auto vars:     Size  Location     Type
  4009 ;;  TxMsg           9    0[BANK0 ] unsigned char [9]
  4010 ;;  compileData     4    9[BANK0 ] unsigned long 
  4011 ;; Return value:  Size  Location     Type
  4012 ;;                  1    wreg      void 
  4013 ;; Registers used:
  4014 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4015 ;; Tracked objects:
  4016 ;;		On entry : 0/0
  4017 ;;		On exit  : 0/0
  4018 ;;		Unchanged: 0/0
  4019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4020 ;;      Params:         0       0       0       0       0       0       0
  4021 ;;      Locals:         0      13       0       0       0       0       0
  4022 ;;      Temps:          0       0       0       0       0       0       0
  4023 ;;      Totals:         0      13       0       0       0       0       0
  4024 ;;Total ram usage:       13 bytes
  4025 ;; Hardware stack levels used:    1
  4026 ;; Hardware stack levels required when called:    5
  4027 ;; This function calls:
  4028 ;;		_WriteUartMessage
  4029 ;;		_ZeroArray
  4030 ;;		_crc8
  4031 ;; This function is called by:
  4032 ;;		_GroupStatusAndVersion
  4033 ;; This function uses a non-reentrant model
  4034 ;;
  4035                           
  4036                           	psect	text17
  4037  00233A                     __ptext17:
  4038                           	opt stack 0
  4039  00233A                     _GetMcuFwVersion:
  4040                           	opt stack 23
  4041                           
  4042                           ;SystemStatus.c: 16: uint32_t compileData = 0x0;
  4043                           
  4044                           ;incstack = 0
  4045  00233A  0E00               	movlw	0
  4046  00233C  0100               	movlb	0	; () banked
  4047  00233E  6F69               	movwf	GetMcuFwVersion@compileData& (0+255),b
  4048  002340  0E00               	movlw	0
  4049  002342  6F6A               	movwf	(GetMcuFwVersion@compileData+1)& (0+255),b
  4050  002344  0E00               	movlw	0
  4051  002346  6F6B               	movwf	(GetMcuFwVersion@compileData+2)& (0+255),b
  4052  002348  0E00               	movlw	0
  4053  00234A  6F6C               	movwf	(GetMcuFwVersion@compileData+3)& (0+255),b
  4054                           
  4055                           ; BSR set to: 0
  4056                           ;SystemStatus.c: 19: char TxMsg[(0x4) + (0x4) + 1];
  4057                           ;SystemStatus.c: 20: ZeroArray(TxMsg, (0x4) + (0x4) + 1);
  4058  00234C  0E60               	movlw	low GetMcuFwVersion@TxMsg
  4059  00234E  6E20               	movwf	ZeroArray@array,c
  4060  002350  0E00               	movlw	high GetMcuFwVersion@TxMsg
  4061  002352  6E21               	movwf	ZeroArray@array+1,c
  4062  002354  0E00               	movlw	0
  4063  002356  6E23               	movwf	ZeroArray@size+1,c
  4064  002358  0E09               	movlw	9
  4065  00235A  6E22               	movwf	ZeroArray@size,c
  4066  00235C  EC2F  F01B         	call	_ZeroArray	;wreg free
  4067                           
  4068                           ;SystemStatus.c: 23: TxMsg[(0)] = (0x24);
  4069  002360  0E24               	movlw	36
  4070  002362  0100               	movlb	0	; () banked
  4071  002364  6F60               	movwf	GetMcuFwVersion@TxMsg& (0+255),b
  4072                           
  4073                           ; BSR set to: 0
  4074                           ;SystemStatus.c: 24: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  4075  002366  0E02               	movlw	2
  4076  002368  6F61               	movwf	(GetMcuFwVersion@TxMsg+1)& (0+255),b
  4077                           
  4078                           ; BSR set to: 0
  4079                           ;SystemStatus.c: 25: TxMsg[(2)] = STATUS_GET_MCU_FW_VERSION;
  4080  00236A  0E22               	movlw	34
  4081  00236C  6F62               	movwf	(GetMcuFwVersion@TxMsg+2)& (0+255),b
  4082                           
  4083                           ; BSR set to: 0
  4084                           ;SystemStatus.c: 26: TxMsg[(3)] = (0x4);
  4085  00236E  0E04               	movlw	4
  4086  002370  6F63               	movwf	(GetMcuFwVersion@TxMsg+3)& (0+255),b
  4087                           
  4088                           ; BSR set to: 0
  4089                           ;SystemStatus.c: 29: compileData = "Mar 15 2018";
  4090  002372  0E85               	movlw	low STR_1
  4091  002374  6F69               	movwf	GetMcuFwVersion@compileData& (0+255),b
  4092  002376  0E06               	movlw	high STR_1
  4093  002378  6F6A               	movwf	(GetMcuFwVersion@compileData+1)& (0+255),b
  4094  00237A  0E00               	movlw	low (STR_1 shr (0+16))
  4095  00237C  6F6B               	movwf	(GetMcuFwVersion@compileData+2)& (0+255),b
  4096  00237E  0E00               	movlw	high (STR_1 shr (0+16))
  4097  002380  6F6C               	movwf	(GetMcuFwVersion@compileData+3)& (0+255),b
  4098                           
  4099                           ; BSR set to: 0
  4100                           ;SystemStatus.c: 30: TxMsg[(0x4) + 0] = (compileData & 0xFF00) >> 8;
  4101  002382  C06A  F064         	movff	GetMcuFwVersion@compileData+1,GetMcuFwVersion@TxMsg+4
  4102                           
  4103                           ; BSR set to: 0
  4104                           ;SystemStatus.c: 31: TxMsg[(0x4) + 1] = compileData & 0xFF;
  4105  002386  C069  F065         	movff	GetMcuFwVersion@compileData,GetMcuFwVersion@TxMsg+5
  4106                           
  4107                           ; BSR set to: 0
  4108                           ;SystemStatus.c: 34: compileData = "17:42:20";
  4109  00238A  0E91               	movlw	low STR_2
  4110  00238C  6F69               	movwf	GetMcuFwVersion@compileData& (0+255),b
  4111  00238E  0E06               	movlw	high STR_2
  4112  002390  6F6A               	movwf	(GetMcuFwVersion@compileData+1)& (0+255),b
  4113  002392  0E00               	movlw	low (STR_2 shr (0+16))
  4114  002394  6F6B               	movwf	(GetMcuFwVersion@compileData+2)& (0+255),b
  4115  002396  0E00               	movlw	high (STR_2 shr (0+16))
  4116  002398  6F6C               	movwf	(GetMcuFwVersion@compileData+3)& (0+255),b
  4117                           
  4118                           ; BSR set to: 0
  4119                           ;SystemStatus.c: 35: TxMsg[(0x4) + 2] = (compileData & 0xFF00) >> 8;
  4120  00239A  C06A  F066         	movff	GetMcuFwVersion@compileData+1,GetMcuFwVersion@TxMsg+6
  4121                           
  4122                           ; BSR set to: 0
  4123                           ;SystemStatus.c: 36: TxMsg[(0x4) + 3] = compileData & 0xFF;
  4124  00239E  C069  F067         	movff	GetMcuFwVersion@compileData,GetMcuFwVersion@TxMsg+7
  4125                           
  4126                           ; BSR set to: 0
  4127                           ;SystemStatus.c: 38: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  4128  0023A2  0E60               	movlw	low GetMcuFwVersion@TxMsg
  4129  0023A4  6E18               	movwf	crc8@dataArray,c
  4130  0023A6  0E00               	movlw	high GetMcuFwVersion@TxMsg
  4131  0023A8  6E19               	movwf	crc8@dataArray+1,c
  4132  0023AA  0E00               	movlw	0
  4133  0023AC  6E1B               	movwf	crc8@dataSize+1,c
  4134  0023AE  0E08               	movlw	8
  4135  0023B0  6E1A               	movwf	crc8@dataSize,c
  4136  0023B2  EC46  F017         	call	_crc8	;wreg free
  4137  0023B6  0100               	movlb	0	; () banked
  4138  0023B8  6F68               	movwf	(GetMcuFwVersion@TxMsg+8)& (0+255),b
  4139                           
  4140                           ; BSR set to: 0
  4141                           ;SystemStatus.c: 40: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  4142  0023BA  0E60               	movlw	low GetMcuFwVersion@TxMsg
  4143  0023BC  6E19               	movwf	WriteUartMessage@dataBuf,c
  4144  0023BE  0E00               	movlw	high GetMcuFwVersion@TxMsg
  4145  0023C0  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  4146  0023C2  0E00               	movlw	0
  4147  0023C4  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  4148  0023C6  0E09               	movlw	9
  4149  0023C8  6E1B               	movwf	WriteUartMessage@dataSize,c
  4150  0023CA  EC8D  F019         	call	_WriteUartMessage	;wreg free
  4151  0023CE  0012               	return		;funcret
  4152  0023D0                     __end_of_GetMcuFwVersion:
  4153                           	opt stack 0
  4154                           tosu	equ	0xFFF
  4155                           tosh	equ	0xFFE
  4156                           tosl	equ	0xFFD
  4157                           pclath	equ	0xFFA
  4158                           tblptru	equ	0xFF8
  4159                           tblptrh	equ	0xFF7
  4160                           tblptrl	equ	0xFF6
  4161                           tablat	equ	0xFF5
  4162                           postinc0	equ	0xFEE
  4163                           wreg	equ	0xFE8
  4164                           postdec1	equ	0xFE5
  4165                           fsr1l	equ	0xFE1
  4166                           indf2	equ	0xFDF
  4167                           postinc2	equ	0xFDE
  4168                           fsr2h	equ	0xFDA
  4169                           fsr2l	equ	0xFD9
  4170                           status	equ	0xFD8
  4171                           
  4172 ;; *************** function _FlashReadUart *****************
  4173 ;; Defined at:
  4174 ;;		line 62 in file "FlashApp.c"
  4175 ;; Parameters:    Size  Location     Type
  4176 ;;  numOfSampleT    2   43[COMRAM] int 
  4177 ;; Auto vars:     Size  Location     Type
  4178 ;;  idx             2   91[BANK0 ] int 
  4179 ;;  TxMsg          69   12[BANK0 ] unsigned char [69]
  4180 ;;  offset          2   93[BANK0 ] int 
  4181 ;;  j               2   89[BANK0 ] int 
  4182 ;; Return value:  Size  Location     Type
  4183 ;;                  1    wreg      void 
  4184 ;; Registers used:
  4185 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4186 ;; Tracked objects:
  4187 ;;		On entry : 0/0
  4188 ;;		On exit  : 0/0
  4189 ;;		Unchanged: 0/0
  4190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4191 ;;      Params:         2       0       0       0       0       0       0
  4192 ;;      Locals:         0      83       0       0       0       0       0
  4193 ;;      Temps:          0      12       0       0       0       0       0
  4194 ;;      Totals:         2      95       0       0       0       0       0
  4195 ;;Total ram usage:       97 bytes
  4196 ;; Hardware stack levels used:    1
  4197 ;; Hardware stack levels required when called:    6
  4198 ;; This function calls:
  4199 ;;		_FLASH_IsWriteDone
  4200 ;;		_FLASH_ReadByte
  4201 ;;		_SendAckMessage
  4202 ;;		_WriteUartMessage
  4203 ;;		_ZeroArray
  4204 ;;		_abs
  4205 ;;		_crc8
  4206 ;; This function is called by:
  4207 ;;		_GroupFlashMemory
  4208 ;; This function uses a non-reentrant model
  4209 ;;
  4210                           
  4211                           	psect	text18
  4212  00069C                     __ptext18:
  4213                           	opt stack 0
  4214  00069C                     _FlashReadUart:
  4215                           	opt stack 22
  4216                           
  4217                           ;FlashApp.c: 65: int j=0;
  4218                           
  4219                           ;incstack = 0
  4220  00069C  0E00               	movlw	0
  4221  00069E  0100               	movlb	0	; () banked
  4222  0006A0  6FBA               	movwf	(FlashReadUart@j+1)& (0+255),b
  4223  0006A2  0E00               	movlw	0
  4224  0006A4  6FB9               	movwf	FlashReadUart@j& (0+255),b
  4225                           
  4226                           ;FlashApp.c: 66: int offset = 0;
  4227  0006A6  0E00               	movlw	0
  4228  0006A8  6FBE               	movwf	(FlashReadUart@offset+1)& (0+255),b
  4229  0006AA  0E00               	movlw	0
  4230  0006AC  6FBD               	movwf	FlashReadUart@offset& (0+255),b
  4231                           
  4232                           ; BSR set to: 0
  4233                           ;FlashApp.c: 67: char TxMsg[(64) + (0x4) + 1];
  4234                           ;FlashApp.c: 68: ZeroArray(TxMsg, (64) + (0x4) + 1);
  4235  0006AE  0E6C               	movlw	low FlashReadUart@TxMsg
  4236  0006B0  6E20               	movwf	ZeroArray@array,c
  4237  0006B2  0E00               	movlw	high FlashReadUart@TxMsg
  4238  0006B4  6E21               	movwf	ZeroArray@array+1,c
  4239  0006B6  0E00               	movlw	0
  4240  0006B8  6E23               	movwf	ZeroArray@size+1,c
  4241  0006BA  0E45               	movlw	69
  4242  0006BC  6E22               	movwf	ZeroArray@size,c
  4243  0006BE  EC2F  F01B         	call	_ZeroArray	;wreg free
  4244                           
  4245                           ;FlashApp.c: 71: if (FLASH_IsWriteDone() == 0)
  4246  0006C2  ECDD  F01B         	call	_FLASH_IsWriteDone	;wreg free
  4247  0006C6  0900               	iorlw	0
  4248  0006C8  B4D8               	btfsc	status,2,c
  4249  0006CA  0012               	return	
  4250                           
  4251                           ;FlashApp.c: 74: }
  4252                           ;FlashApp.c: 76: if (numOfReadSamples)
  4253                           
  4254                           ;FlashApp.c: 72: {
  4255                           ;FlashApp.c: 73: return;
  4256  0006CC  503D               	movf	_numOfReadSamples,w,c
  4257  0006CE  103E               	iorwf	_numOfReadSamples+1,w,c
  4258  0006D0  103F               	iorwf	_numOfReadSamples+2,w,c
  4259  0006D2  1040               	iorwf	_numOfReadSamples+3,w,c
  4260  0006D4  B4D8               	btfsc	status,2,c
  4261  0006D6  D0EE               	goto	l306
  4262                           
  4263                           ;FlashApp.c: 77: {
  4264                           ;FlashApp.c: 78: if (numOfValidateSamples)
  4265  0006D8  5030               	movf	_numOfValidateSamples,w,c
  4266  0006DA  1031               	iorwf	_numOfValidateSamples+1,w,c
  4267  0006DC  1032               	iorwf	_numOfValidateSamples+2,w,c
  4268  0006DE  1033               	iorwf	_numOfValidateSamples+3,w,c
  4269  0006E0  B4D8               	btfsc	status,2,c
  4270  0006E2  D09A               	goto	l307
  4271                           
  4272                           ;FlashApp.c: 79: {
  4273                           ;FlashApp.c: 80: offset = numOfValidateSamples - (numOfValidateSamples > numOfSampleToRe
      +                          ad)? numOfValidateSamples : numOfSampleToRead;
  4274  0006E4  C02C  F060         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  4275  0006E8  C02D  F061         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  4276  0006EC  0E00               	movlw	0
  4277  0006EE  0100               	movlb	0	; () banked
  4278  0006F0  BF61               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  4279  0006F2  0EFF               	movlw	255
  4280  0006F4  6F62               	movwf	(??_FlashReadUart+2)& (0+255),b
  4281  0006F6  6F63               	movwf	(??_FlashReadUart+3)& (0+255),b
  4282  0006F8  5030               	movf	_numOfValidateSamples,w,c
  4283  0006FA  5D60               	subwf	??_FlashReadUart& (0+255),w,b
  4284  0006FC  5031               	movf	_numOfValidateSamples+1,w,c
  4285  0006FE  5961               	subwfb	(??_FlashReadUart+1)& (0+255),w,b
  4286  000700  5032               	movf	_numOfValidateSamples+2,w,c
  4287  000702  5962               	subwfb	(??_FlashReadUart+2)& (0+255),w,b
  4288  000704  5033               	movf	_numOfValidateSamples+3,w,c
  4289  000706  5963               	subwfb	(??_FlashReadUart+3)& (0+255),w,b
  4290  000708  B0D8               	btfsc	status,0,c
  4291  00070A  D002               	goto	u7250
  4292  00070C  0E01               	movlw	1
  4293  00070E  D001               	goto	u7260
  4294  000710                     u7250:
  4295  000710  0E00               	movlw	0
  4296  000712                     u7260:
  4297  000712  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  4298  000714  6B65               	clrf	(??_FlashReadUart+5)& (0+255),b
  4299  000716  6B66               	clrf	(??_FlashReadUart+6)& (0+255),b
  4300  000718  6B67               	clrf	(??_FlashReadUart+7)& (0+255),b
  4301  00071A  1F64               	comf	(??_FlashReadUart+4)& (0+255),f,b
  4302  00071C  1F65               	comf	(??_FlashReadUart+5)& (0+255),f,b
  4303  00071E  1F66               	comf	(??_FlashReadUart+6)& (0+255),f,b
  4304  000720  1F67               	comf	(??_FlashReadUart+7)& (0+255),f,b
  4305  000722  2B64               	incf	(??_FlashReadUart+4)& (0+255),f,b
  4306  000724  0E00               	movlw	0
  4307  000726  2365               	addwfc	(??_FlashReadUart+5)& (0+255),f,b
  4308  000728  2366               	addwfc	(??_FlashReadUart+6)& (0+255),f,b
  4309  00072A  2367               	addwfc	(??_FlashReadUart+7)& (0+255),f,b
  4310  00072C  5030               	movf	_numOfValidateSamples,w,c
  4311  00072E  2564               	addwf	(??_FlashReadUart+4)& (0+255),w,b
  4312  000730  6F68               	movwf	(??_FlashReadUart+8)& (0+255),b
  4313  000732  5031               	movf	_numOfValidateSamples+1,w,c
  4314  000734  2165               	addwfc	(??_FlashReadUart+5)& (0+255),w,b
  4315  000736  6F69               	movwf	(??_FlashReadUart+9)& (0+255),b
  4316  000738  5032               	movf	_numOfValidateSamples+2,w,c
  4317  00073A  2166               	addwfc	(??_FlashReadUart+6)& (0+255),w,b
  4318  00073C  6F6A               	movwf	(??_FlashReadUart+10)& (0+255),b
  4319  00073E  5033               	movf	_numOfValidateSamples+3,w,c
  4320  000740  2167               	addwfc	(??_FlashReadUart+7)& (0+255),w,b
  4321  000742  6F6B               	movwf	(??_FlashReadUart+11)& (0+255),b
  4322  000744  5168               	movf	(??_FlashReadUart+8)& (0+255),w,b
  4323  000746  1169               	iorwf	(??_FlashReadUart+9)& (0+255),w,b
  4324  000748  116A               	iorwf	(??_FlashReadUart+10)& (0+255),w,b
  4325  00074A  116B               	iorwf	(??_FlashReadUart+11)& (0+255),w,b
  4326  00074C  A4D8               	btfss	status,2,c
  4327  00074E  D00A               	goto	l309
  4328                           
  4329                           ; BSR set to: 0
  4330  000750  C02C  F0B1         	movff	FlashReadUart@numOfSampleToRead,_FlashReadUart$577
  4331  000754  C02D  F0B2         	movff	FlashReadUart@numOfSampleToRead+1,_FlashReadUart$577+1
  4332  000758  0E00               	movlw	0
  4333  00075A  BFB2               	btfsc	(_FlashReadUart$577+1)& (0+255),7,b
  4334  00075C  0EFF               	movlw	-1
  4335  00075E  6FB3               	movwf	(_FlashReadUart$577+2)& (0+255),b
  4336  000760  6FB4               	movwf	(_FlashReadUart$577+3)& (0+255),b
  4337  000762  D008               	goto	l311
  4338  000764                     l309:
  4339                           
  4340                           ; BSR set to: 0
  4341  000764  C030  F0B1         	movff	_numOfValidateSamples,_FlashReadUart$577
  4342  000768  C031  F0B2         	movff	_numOfValidateSamples+1,_FlashReadUart$577+1
  4343  00076C  C032  F0B3         	movff	_numOfValidateSamples+2,_FlashReadUart$577+2
  4344  000770  C033  F0B4         	movff	_numOfValidateSamples+3,_FlashReadUart$577+3
  4345  000774                     l311:
  4346                           
  4347                           ; BSR set to: 0
  4348  000774  C0B1  F0BD         	movff	_FlashReadUart$577,FlashReadUart@offset
  4349  000778  C0B2  F0BE         	movff	_FlashReadUart$577+1,FlashReadUart@offset+1
  4350                           
  4351                           ; BSR set to: 0
  4352                           ;FlashApp.c: 81: if(offset < 0)
  4353  00077C  AFBE               	btfss	(FlashReadUart@offset+1)& (0+255),7,b
  4354  00077E  D091               	goto	l314
  4355                           
  4356                           ; BSR set to: 0
  4357                           ;FlashApp.c: 82: {
  4358                           ;FlashApp.c: 83: if (abs(offset) > numOfReadSamples)
  4359  000780  C0BD  F018         	movff	FlashReadUart@offset,abs@a
  4360  000784  C0BE  F019         	movff	FlashReadUart@offset+1,abs@a+1
  4361  000788  EC7D  F01A         	call	_abs	;wreg free
  4362  00078C  C018  F060         	movff	?_abs,??_FlashReadUart
  4363  000790  C019  F061         	movff	?_abs+1,??_FlashReadUart+1
  4364  000794  0E00               	movlw	0
  4365  000796  0100               	movlb	0	; () banked
  4366  000798  BF61               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  4367  00079A  0EFF               	movlw	255
  4368  00079C  6F62               	movwf	(??_FlashReadUart+2)& (0+255),b
  4369  00079E  6F63               	movwf	(??_FlashReadUart+3)& (0+255),b
  4370  0007A0  5160               	movf	??_FlashReadUart& (0+255),w,b
  4371  0007A2  5C3D               	subwf	_numOfReadSamples,w,c
  4372  0007A4  5161               	movf	(??_FlashReadUart+1)& (0+255),w,b
  4373  0007A6  583E               	subwfb	_numOfReadSamples+1,w,c
  4374  0007A8  5162               	movf	(??_FlashReadUart+2)& (0+255),w,b
  4375  0007AA  583F               	subwfb	_numOfReadSamples+2,w,c
  4376  0007AC  5163               	movf	(??_FlashReadUart+3)& (0+255),w,b
  4377  0007AE  5840               	subwfb	_numOfReadSamples+3,w,c
  4378  0007B0  B0D8               	btfsc	status,0,c
  4379  0007B2  D016               	goto	l313
  4380                           
  4381                           ; BSR set to: 0
  4382                           ;FlashApp.c: 84: {
  4383                           ;FlashApp.c: 85: numOfSampleToRead += offset + numOfReadSamples;
  4384  0007B4  503D               	movf	_numOfReadSamples,w,c
  4385  0007B6  25BD               	addwf	FlashReadUart@offset& (0+255),w,b
  4386  0007B8  6F60               	movwf	??_FlashReadUart& (0+255),b
  4387  0007BA  503E               	movf	_numOfReadSamples+1,w,c
  4388  0007BC  21BE               	addwfc	(FlashReadUart@offset+1)& (0+255),w,b
  4389  0007BE  6F61               	movwf	(??_FlashReadUart+1)& (0+255),b
  4390  0007C0  5160               	movf	??_FlashReadUart& (0+255),w,b
  4391  0007C2  262C               	addwf	FlashReadUart@numOfSampleToRead,f,c
  4392  0007C4  5161               	movf	(??_FlashReadUart+1)& (0+255),w,b
  4393  0007C6  222D               	addwfc	FlashReadUart@numOfSampleToRead+1,f,c
  4394                           
  4395                           ; BSR set to: 0
  4396                           ;FlashApp.c: 86: offset = numOfReadSamples * (-1);
  4397  0007C8  C03D  F060         	movff	_numOfReadSamples,??_FlashReadUart
  4398  0007CC  C03E  F061         	movff	_numOfReadSamples+1,??_FlashReadUart+1
  4399  0007D0  1F60               	comf	??_FlashReadUart& (0+255),f,b
  4400  0007D2  1F61               	comf	(??_FlashReadUart+1)& (0+255),f,b
  4401  0007D4  4B60               	infsnz	??_FlashReadUart& (0+255),f,b
  4402  0007D6  2B61               	incf	(??_FlashReadUart+1)& (0+255),f,b
  4403  0007D8  C060  F0BD         	movff	??_FlashReadUart,FlashReadUart@offset
  4404  0007DC  C061  F0BE         	movff	??_FlashReadUart+1,FlashReadUart@offset+1
  4405  0007E0                     l313:
  4406                           
  4407                           ; BSR set to: 0
  4408                           ;FlashApp.c: 88: }
  4409                           ;FlashApp.c: 90: readAddress += offset * (64);
  4410  0007E0  C0BD  F060         	movff	FlashReadUart@offset,??_FlashReadUart
  4411  0007E4  C0BE  F061         	movff	FlashReadUart@offset+1,??_FlashReadUart+1
  4412  0007E8  0E06               	movlw	6
  4413  0007EA                     u7305:
  4414  0007EA  90D8               	bcf	status,0,c
  4415  0007EC  3760               	rlcf	??_FlashReadUart& (0+255),f,b
  4416  0007EE  3761               	rlcf	(??_FlashReadUart+1)& (0+255),f,b
  4417  0007F0  2EE8               	decfsz	wreg,f,c
  4418  0007F2  D7FB               	goto	u7305
  4419  0007F4  C060  F062         	movff	??_FlashReadUart,??_FlashReadUart+2
  4420  0007F8  C061  F063         	movff	??_FlashReadUart+1,??_FlashReadUart+3
  4421  0007FC  0E00               	movlw	0
  4422  0007FE  BF63               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  4423  000800  0EFF               	movlw	255
  4424  000802  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  4425  000804  6F65               	movwf	(??_FlashReadUart+5)& (0+255),b
  4426  000806  5162               	movf	(??_FlashReadUart+2)& (0+255),w,b
  4427  000808  27F9               	addwf	_readAddress& (0+255),f,b
  4428  00080A  5163               	movf	(??_FlashReadUart+3)& (0+255),w,b
  4429  00080C  23FA               	addwfc	(_readAddress+1)& (0+255),f,b
  4430  00080E  5164               	movf	(??_FlashReadUart+4)& (0+255),w,b
  4431  000810  23FB               	addwfc	(_readAddress+2)& (0+255),f,b
  4432  000812  5165               	movf	(??_FlashReadUart+5)& (0+255),w,b
  4433  000814  23FC               	addwfc	(_readAddress+3)& (0+255),f,b
  4434                           
  4435                           ; BSR set to: 0
  4436                           ;FlashApp.c: 91: }
  4437                           ;FlashApp.c: 92: }
  4438  000816  D045               	goto	l314
  4439  000818                     l307:
  4440                           
  4441                           ;FlashApp.c: 93: else
  4442                           ;FlashApp.c: 94: {
  4443                           ;FlashApp.c: 95: numOfSampleToRead = (numOfReadSamples > numOfSampleToRead)? numOfSample
      +                          ToRead : numOfReadSamples;
  4444                           
  4445                           ; BSR set to: 0
  4446  000818  C02C  F060         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  4447  00081C  C02D  F061         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  4448  000820  0E00               	movlw	0
  4449  000822  0100               	movlb	0	; () banked
  4450  000824  BF61               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  4451  000826  0EFF               	movlw	255
  4452  000828  6F62               	movwf	(??_FlashReadUart+2)& (0+255),b
  4453  00082A  6F63               	movwf	(??_FlashReadUart+3)& (0+255),b
  4454  00082C  503D               	movf	_numOfReadSamples,w,c
  4455  00082E  5D60               	subwf	??_FlashReadUart& (0+255),w,b
  4456  000830  503E               	movf	_numOfReadSamples+1,w,c
  4457  000832  5961               	subwfb	(??_FlashReadUart+1)& (0+255),w,b
  4458  000834  503F               	movf	_numOfReadSamples+2,w,c
  4459  000836  5962               	subwfb	(??_FlashReadUart+2)& (0+255),w,b
  4460  000838  5040               	movf	_numOfReadSamples+3,w,c
  4461  00083A  5963               	subwfb	(??_FlashReadUart+3)& (0+255),w,b
  4462  00083C  A0D8               	btfss	status,0,c
  4463  00083E  D009               	goto	l316
  4464                           
  4465                           ; BSR set to: 0
  4466  000840  C03D  F0B5         	movff	_numOfReadSamples,_FlashReadUart$578
  4467  000844  C03E  F0B6         	movff	_numOfReadSamples+1,_FlashReadUart$578+1
  4468  000848  C03F  F0B7         	movff	_numOfReadSamples+2,_FlashReadUart$578+2
  4469  00084C  C040  F0B8         	movff	_numOfReadSamples+3,_FlashReadUart$578+3
  4470  000850  D009               	goto	l318
  4471  000852                     l316:
  4472                           
  4473                           ; BSR set to: 0
  4474                           
  4475                           ; BSR set to: 0
  4476  000852  C02C  F0B5         	movff	FlashReadUart@numOfSampleToRead,_FlashReadUart$578
  4477  000856  C02D  F0B6         	movff	FlashReadUart@numOfSampleToRead+1,_FlashReadUart$578+1
  4478  00085A  0E00               	movlw	0
  4479  00085C  BFB6               	btfsc	(_FlashReadUart$578+1)& (0+255),7,b
  4480  00085E  0EFF               	movlw	-1
  4481  000860  6FB7               	movwf	(_FlashReadUart$578+2)& (0+255),b
  4482  000862  6FB8               	movwf	(_FlashReadUart$578+3)& (0+255),b
  4483  000864                     l318:
  4484                           
  4485                           ; BSR set to: 0
  4486                           
  4487                           ; BSR set to: 0
  4488  000864  C0B5  F02C         	movff	_FlashReadUart$578,FlashReadUart@numOfSampleToRead
  4489  000868  C0B6  F02D         	movff	_FlashReadUart$578+1,FlashReadUart@numOfSampleToRead+1
  4490                           
  4491                           ; BSR set to: 0
  4492                           ;FlashApp.c: 96: readAddress -= numOfSampleToRead * (64);
  4493  00086C  C02C  F060         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  4494  000870  C02D  F061         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  4495  000874  0E06               	movlw	6
  4496  000876                     u7325:
  4497  000876  90D8               	bcf	status,0,c
  4498  000878  3760               	rlcf	??_FlashReadUart& (0+255),f,b
  4499  00087A  3761               	rlcf	(??_FlashReadUart+1)& (0+255),f,b
  4500  00087C  2EE8               	decfsz	wreg,f,c
  4501  00087E  D7FB               	goto	u7325
  4502  000880  C060  F062         	movff	??_FlashReadUart,??_FlashReadUart+2
  4503  000884  C061  F063         	movff	??_FlashReadUart+1,??_FlashReadUart+3
  4504  000888  0E00               	movlw	0
  4505  00088A  BF63               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  4506  00088C  0EFF               	movlw	255
  4507  00088E  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  4508  000890  6F65               	movwf	(??_FlashReadUart+5)& (0+255),b
  4509  000892  5162               	movf	(??_FlashReadUart+2)& (0+255),w,b
  4510  000894  5FF9               	subwf	_readAddress& (0+255),f,b
  4511  000896  5163               	movf	(??_FlashReadUart+3)& (0+255),w,b
  4512  000898  5BFA               	subwfb	(_readAddress+1)& (0+255),f,b
  4513  00089A  5164               	movf	(??_FlashReadUart+4)& (0+255),w,b
  4514  00089C  5BFB               	subwfb	(_readAddress+2)& (0+255),f,b
  4515  00089E  5165               	movf	(??_FlashReadUart+5)& (0+255),w,b
  4516  0008A0  5BFC               	subwfb	(_readAddress+3)& (0+255),f,b
  4517  0008A2                     l314:
  4518                           
  4519                           ; BSR set to: 0
  4520                           ;FlashApp.c: 97: }
  4521                           ;FlashApp.c: 99: if (readAddress <= 0x4000)
  4522                           
  4523                           ; BSR set to: 0
  4524  0008A2  51FC               	movf	(_readAddress+3)& (0+255),w,b
  4525  0008A4  11FB               	iorwf	(_readAddress+2)& (0+255),w,b
  4526  0008A6  E13E               	bnz	l7402
  4527  0008A8  05F9               	decf	_readAddress& (0+255),w,b
  4528  0008AA  0E40               	movlw	64
  4529  0008AC  59FA               	subwfb	(_readAddress+1)& (0+255),w,b
  4530  0008AE  B0D8               	btfsc	status,0,c
  4531  0008B0  D039               	goto	l324
  4532  0008B2  D023               	goto	u7360
  4533  0008B4                     l306:
  4534                           
  4535                           ;FlashApp.c: 104: else
  4536                           ;FlashApp.c: 105: {
  4537                           ;FlashApp.c: 106: if ((isReWriteDone) && (readAddress <= writeAddress))
  4538                           
  4539                           ; BSR set to: 0
  4540  0008B4  503B               	movf	_isReWriteDone,w,c
  4541  0008B6  B4D8               	btfsc	status,2,c
  4542  0008B8  D029               	goto	l321
  4543  0008BA  0100               	movlb	0	; () banked
  4544  0008BC  51F9               	movf	_readAddress& (0+255),w,b
  4545  0008BE  5C41               	subwf	_writeAddress,w,c
  4546  0008C0  51FA               	movf	(_readAddress+1)& (0+255),w,b
  4547  0008C2  5842               	subwfb	_writeAddress+1,w,c
  4548  0008C4  51FB               	movf	(_readAddress+2)& (0+255),w,b
  4549  0008C6  5843               	subwfb	_writeAddress+2,w,c
  4550  0008C8  51FC               	movf	(_readAddress+3)& (0+255),w,b
  4551  0008CA  5844               	subwfb	_writeAddress+3,w,c
  4552  0008CC  A0D8               	btfss	status,0,c
  4553  0008CE  D01E               	goto	l321
  4554                           
  4555                           ; BSR set to: 0
  4556                           ;FlashApp.c: 107: {
  4557                           ;FlashApp.c: 108: readAddress = writeAddress + (64);
  4558  0008D0  0E40               	movlw	64
  4559  0008D2  2441               	addwf	_writeAddress,w,c
  4560  0008D4  6FF9               	movwf	_readAddress& (0+255),b
  4561  0008D6  0E00               	movlw	0
  4562  0008D8  2042               	addwfc	_writeAddress+1,w,c
  4563  0008DA  6FFA               	movwf	(_readAddress+1)& (0+255),b
  4564  0008DC  0E00               	movlw	0
  4565  0008DE  2043               	addwfc	_writeAddress+2,w,c
  4566  0008E0  6FFB               	movwf	(_readAddress+2)& (0+255),b
  4567  0008E2  0E00               	movlw	0
  4568  0008E4  2044               	addwfc	_writeAddress+3,w,c
  4569  0008E6  6FFC               	movwf	(_readAddress+3)& (0+255),b
  4570                           
  4571                           ;FlashApp.c: 109: if (readAddress >= 0x7FF0)
  4572  0008E8  51FC               	movf	(_readAddress+3)& (0+255),w,b
  4573  0008EA  11FB               	iorwf	(_readAddress+2)& (0+255),w,b
  4574  0008EC  E106               	bnz	u7360
  4575  0008EE  0EF0               	movlw	240
  4576  0008F0  5DF9               	subwf	_readAddress& (0+255),w,b
  4577  0008F2  0E7F               	movlw	127
  4578  0008F4  59FA               	subwfb	(_readAddress+1)& (0+255),w,b
  4579  0008F6  A0D8               	btfss	status,0,c
  4580  0008F8  D015               	goto	l324
  4581  0008FA                     u7360:
  4582                           
  4583                           ; BSR set to: 0
  4584                           ;FlashApp.c: 110: {
  4585                           ;FlashApp.c: 111: readAddress = 0x4000;
  4586  0008FA  0E00               	movlw	0
  4587  0008FC  6FF9               	movwf	_readAddress& (0+255),b
  4588  0008FE  0E40               	movlw	64
  4589  000900  6FFA               	movwf	(_readAddress+1)& (0+255),b
  4590  000902  0E00               	movlw	0
  4591  000904  6FFB               	movwf	(_readAddress+2)& (0+255),b
  4592  000906  0E00               	movlw	0
  4593  000908  6FFC               	movwf	(_readAddress+3)& (0+255),b
  4594                           
  4595                           ; BSR set to: 0
  4596                           ;FlashApp.c: 112: }
  4597                           ;FlashApp.c: 114: }
  4598  00090A  D00C               	goto	l324
  4599  00090C                     l321:
  4600                           
  4601                           ;FlashApp.c: 115: else
  4602                           ;FlashApp.c: 116: {
  4603                           ;FlashApp.c: 117: if(numOfValidateSamples == 0)
  4604                           
  4605                           ; BSR set to: 0
  4606  00090C  5030               	movf	_numOfValidateSamples,w,c
  4607  00090E  1031               	iorwf	_numOfValidateSamples+1,w,c
  4608  000910  1032               	iorwf	_numOfValidateSamples+2,w,c
  4609  000912  1033               	iorwf	_numOfValidateSamples+3,w,c
  4610  000914  A4D8               	btfss	status,2,c
  4611  000916  D006               	goto	l324
  4612                           
  4613                           ;FlashApp.c: 118: {
  4614                           ;FlashApp.c: 119: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_NO_SAMPLE_YET
      +                          );
  4615  000918  0E55               	movlw	85
  4616  00091A  6E24               	movwf	SendAckMessage@inRequest,c
  4617  00091C  0E05               	movlw	5
  4618  00091E  EC1D  F017         	call	_SendAckMessage
  4619                           
  4620                           ;FlashApp.c: 120: return;
  4621  000922  0012               	return	
  4622  000924                     l324:
  4623  000924                     l7402:
  4624                           
  4625                           ;FlashApp.c: 121: }
  4626                           ;FlashApp.c: 123: }
  4627                           ;FlashApp.c: 124: }
  4628                           ;FlashApp.c: 127: TxMsg[(0)] = (0x24);
  4629  000924  0E24               	movlw	36
  4630  000926  0100               	movlb	0	; () banked
  4631  000928  6F6C               	movwf	FlashReadUart@TxMsg& (0+255),b
  4632                           
  4633                           ;FlashApp.c: 128: TxMsg[(1)] = FLASH_MSG;
  4634  00092A  0E05               	movlw	5
  4635  00092C  6F6D               	movwf	(FlashReadUart@TxMsg+1)& (0+255),b
  4636                           
  4637                           ;FlashApp.c: 129: TxMsg[(2)] = FLASH_SEND_RAW_DATA;
  4638  00092E  0E54               	movlw	84
  4639  000930  6F6E               	movwf	(FlashReadUart@TxMsg+2)& (0+255),b
  4640                           
  4641                           ;FlashApp.c: 130: TxMsg[(3)] = (64);
  4642  000932  0E40               	movlw	64
  4643  000934  6F6F               	movwf	(FlashReadUart@TxMsg+3)& (0+255),b
  4644                           
  4645                           ;FlashApp.c: 132: for (j=0; j<numOfSampleToRead; j++)
  4646  000936  0E00               	movlw	0
  4647  000938  6FBA               	movwf	(FlashReadUart@j+1)& (0+255),b
  4648  00093A  0E00               	movlw	0
  4649  00093C  6FB9               	movwf	FlashReadUart@j& (0+255),b
  4650  00093E  D084               	goto	l325
  4651  000940                     
  4652                           ; BSR set to: 0
  4653                           ;FlashApp.c: 133: {
  4654                           ;FlashApp.c: 135: for(int idx = 0; idx < (64); idx++)
  4655                           
  4656                           ; BSR set to: 0
  4657  000940  0E00               	movlw	0
  4658  000942  6FBC               	movwf	(FlashReadUart@idx+1)& (0+255),b
  4659  000944  0E00               	movlw	0
  4660  000946  6FBB               	movwf	FlashReadUart@idx& (0+255),b
  4661  000948                     l7406:
  4662                           
  4663                           ; BSR set to: 0
  4664  000948  BFBC               	btfsc	(FlashReadUart@idx+1)& (0+255),7,b
  4665  00094A  D006               	goto	l327
  4666  00094C  51BC               	movf	(FlashReadUart@idx+1)& (0+255),w,b
  4667  00094E  E12C               	bnz	l7416
  4668  000950  0E40               	movlw	64
  4669  000952  5DBB               	subwf	FlashReadUart@idx& (0+255),w,b
  4670  000954  B0D8               	btfsc	status,0,c
  4671  000956  D028               	goto	u7390
  4672  000958                     l327:
  4673                           
  4674                           ; BSR set to: 0
  4675                           ;FlashApp.c: 136: {
  4676                           ;FlashApp.c: 137: TxMsg[(0x4) + idx] = FLASH_ReadByte(readAddress + idx);
  4677                           
  4678                           ; BSR set to: 0
  4679  000958  0E04               	movlw	4
  4680  00095A  25BB               	addwf	FlashReadUart@idx& (0+255),w,b
  4681  00095C  6F60               	movwf	??_FlashReadUart& (0+255),b
  4682  00095E  0E00               	movlw	0
  4683  000960  21BC               	addwfc	(FlashReadUart@idx+1)& (0+255),w,b
  4684  000962  6F61               	movwf	(??_FlashReadUart+1)& (0+255),b
  4685  000964  0E6C               	movlw	low FlashReadUart@TxMsg
  4686  000966  2560               	addwf	??_FlashReadUart& (0+255),w,b
  4687  000968  6ED9               	movwf	fsr2l,c
  4688  00096A  0E00               	movlw	high FlashReadUart@TxMsg
  4689  00096C  2161               	addwfc	(??_FlashReadUart+1)& (0+255),w,b
  4690  00096E  6EDA               	movwf	fsr2h,c
  4691  000970  C0BB  F062         	movff	FlashReadUart@idx,??_FlashReadUart+2
  4692  000974  C0BC  F063         	movff	FlashReadUart@idx+1,??_FlashReadUart+3
  4693  000978  0E00               	movlw	0
  4694  00097A  BF63               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  4695  00097C  0EFF               	movlw	255
  4696  00097E  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  4697  000980  6F65               	movwf	(??_FlashReadUart+5)& (0+255),b
  4698  000982  51F9               	movf	_readAddress& (0+255),w,b
  4699  000984  2562               	addwf	(??_FlashReadUart+2)& (0+255),w,b
  4700  000986  6E18               	movwf	FLASH_ReadByte@flashAddr,c
  4701  000988  51FA               	movf	(_readAddress+1)& (0+255),w,b
  4702  00098A  2163               	addwfc	(??_FlashReadUart+3)& (0+255),w,b
  4703  00098C  6E19               	movwf	FLASH_ReadByte@flashAddr+1,c
  4704  00098E  51FB               	movf	(_readAddress+2)& (0+255),w,b
  4705  000990  2164               	addwfc	(??_FlashReadUart+4)& (0+255),w,b
  4706  000992  6E1A               	movwf	FLASH_ReadByte@flashAddr+2,c
  4707  000994  51FC               	movf	(_readAddress+3)& (0+255),w,b
  4708  000996  2165               	addwfc	(??_FlashReadUart+5)& (0+255),w,b
  4709  000998  6E1B               	movwf	FLASH_ReadByte@flashAddr+3,c
  4710  00099A  ECA8  F01B         	call	_FLASH_ReadByte	;wreg free
  4711  00099E  6EDF               	movwf	indf2,c
  4712  0009A0  0100               	movlb	0	; () banked
  4713  0009A2  4BBB               	infsnz	FlashReadUart@idx& (0+255),f,b
  4714  0009A4  2BBC               	incf	(FlashReadUart@idx+1)& (0+255),f,b
  4715  0009A6  D7D0               	goto	l7406
  4716  0009A8                     u7390:
  4717  0009A8                     l7416:
  4718                           
  4719                           ; BSR set to: 0
  4720                           ;FlashApp.c: 138: }
  4721                           ;FlashApp.c: 140: readAddress += (64);
  4722  0009A8  0E40               	movlw	64
  4723  0009AA  27F9               	addwf	_readAddress& (0+255),f,b
  4724  0009AC  0E00               	movlw	0
  4725  0009AE  23FA               	addwfc	(_readAddress+1)& (0+255),f,b
  4726  0009B0  23FB               	addwfc	(_readAddress+2)& (0+255),f,b
  4727  0009B2  23FC               	addwfc	(_readAddress+3)& (0+255),f,b
  4728                           
  4729                           ;FlashApp.c: 141: if (readAddress >= 0x7FF0)
  4730  0009B4  51FC               	movf	(_readAddress+3)& (0+255),w,b
  4731  0009B6  11FB               	iorwf	(_readAddress+2)& (0+255),w,b
  4732  0009B8  E106               	bnz	u7400
  4733  0009BA  0EF0               	movlw	240
  4734  0009BC  5DF9               	subwf	_readAddress& (0+255),w,b
  4735  0009BE  0E7F               	movlw	127
  4736  0009C0  59FA               	subwfb	(_readAddress+1)& (0+255),w,b
  4737  0009C2  A0D8               	btfss	status,0,c
  4738  0009C4  D008               	goto	l329
  4739  0009C6                     u7400:
  4740                           
  4741                           ; BSR set to: 0
  4742                           ;FlashApp.c: 142: {
  4743                           ;FlashApp.c: 143: readAddress = 0x4000;
  4744  0009C6  0E00               	movlw	0
  4745  0009C8  6FF9               	movwf	_readAddress& (0+255),b
  4746  0009CA  0E40               	movlw	64
  4747  0009CC  6FFA               	movwf	(_readAddress+1)& (0+255),b
  4748  0009CE  0E00               	movlw	0
  4749  0009D0  6FFB               	movwf	(_readAddress+2)& (0+255),b
  4750  0009D2  0E00               	movlw	0
  4751  0009D4  6FFC               	movwf	(_readAddress+3)& (0+255),b
  4752  0009D6                     l329:
  4753                           
  4754                           ; BSR set to: 0
  4755                           ;FlashApp.c: 144: }
  4756                           ;FlashApp.c: 145: TxMsg[(64) + (0x4)] = crc8(TxMsg, (64) + (0x4));
  4757                           
  4758                           ; BSR set to: 0
  4759  0009D6  0E6C               	movlw	low FlashReadUart@TxMsg
  4760  0009D8  6E18               	movwf	crc8@dataArray,c
  4761  0009DA  0E00               	movlw	high FlashReadUart@TxMsg
  4762  0009DC  6E19               	movwf	crc8@dataArray+1,c
  4763  0009DE  0E00               	movlw	0
  4764  0009E0  6E1B               	movwf	crc8@dataSize+1,c
  4765  0009E2  0E44               	movlw	68
  4766  0009E4  6E1A               	movwf	crc8@dataSize,c
  4767  0009E6  EC46  F017         	call	_crc8	;wreg free
  4768  0009EA  0100               	movlb	0	; () banked
  4769  0009EC  6FB0               	movwf	(FlashReadUart@TxMsg+68)& (0+255),b
  4770                           
  4771                           ; BSR set to: 0
  4772                           ;FlashApp.c: 147: WriteUartMessage(TxMsg, (64) + (0x4) + 1);
  4773  0009EE  0E6C               	movlw	low FlashReadUart@TxMsg
  4774  0009F0  6E19               	movwf	WriteUartMessage@dataBuf,c
  4775  0009F2  0E00               	movlw	high FlashReadUart@TxMsg
  4776  0009F4  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  4777  0009F6  0E00               	movlw	0
  4778  0009F8  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  4779  0009FA  0E45               	movlw	69
  4780  0009FC  6E1B               	movwf	WriteUartMessage@dataSize,c
  4781  0009FE  EC8D  F019         	call	_WriteUartMessage	;wreg free
  4782                           
  4783                           ;FlashApp.c: 149: if(numOfValidateSamples)
  4784  000A02  5030               	movf	_numOfValidateSamples,w,c
  4785  000A04  1031               	iorwf	_numOfValidateSamples+1,w,c
  4786  000A06  1032               	iorwf	_numOfValidateSamples+2,w,c
  4787  000A08  1033               	iorwf	_numOfValidateSamples+3,w,c
  4788  000A0A  B4D8               	btfsc	status,2,c
  4789  000A0C  D01A               	goto	l332
  4790                           
  4791                           ;FlashApp.c: 150: {
  4792                           ;FlashApp.c: 151: if (numOfReadSamples < ((0x4000-0x7FF0)/(64)))
  4793  000A0E  043D               	decf	_numOfReadSamples,w,c
  4794  000A10  0EFF               	movlw	255
  4795  000A12  583E               	subwfb	_numOfReadSamples+1,w,c
  4796  000A14  0EFF               	movlw	255
  4797  000A16  583F               	subwfb	_numOfReadSamples+2,w,c
  4798  000A18  0EFF               	movlw	255
  4799  000A1A  5840               	subwfb	_numOfReadSamples+3,w,c
  4800  000A1C  B0D8               	btfsc	status,0,c
  4801  000A1E  D006               	goto	l331
  4802                           
  4803                           ;FlashApp.c: 152: {
  4804                           ;FlashApp.c: 153: numOfReadSamples++;
  4805  000A20  0E01               	movlw	1
  4806  000A22  263D               	addwf	_numOfReadSamples,f,c
  4807  000A24  0E00               	movlw	0
  4808  000A26  223E               	addwfc	_numOfReadSamples+1,f,c
  4809  000A28  223F               	addwfc	_numOfReadSamples+2,f,c
  4810  000A2A  2240               	addwfc	_numOfReadSamples+3,f,c
  4811  000A2C                     l331:
  4812                           
  4813                           ;FlashApp.c: 154: }
  4814                           ;FlashApp.c: 155: if (numOfValidateSamples > 0)
  4815  000A2C  5030               	movf	_numOfValidateSamples,w,c
  4816  000A2E  1031               	iorwf	_numOfValidateSamples+1,w,c
  4817  000A30  1032               	iorwf	_numOfValidateSamples+2,w,c
  4818  000A32  1033               	iorwf	_numOfValidateSamples+3,w,c
  4819  000A34  B4D8               	btfsc	status,2,c
  4820  000A36  D005               	goto	l332
  4821                           
  4822                           ;FlashApp.c: 156: {
  4823                           ;FlashApp.c: 157: numOfValidateSamples--;
  4824  000A38  0630               	decf	_numOfValidateSamples,f,c
  4825  000A3A  0E00               	movlw	0
  4826  000A3C  5A31               	subwfb	_numOfValidateSamples+1,f,c
  4827  000A3E  5A32               	subwfb	_numOfValidateSamples+2,f,c
  4828  000A40  5A33               	subwfb	_numOfValidateSamples+3,f,c
  4829  000A42                     l332:
  4830  000A42  0100               	movlb	0	; () banked
  4831  000A44  4BB9               	infsnz	FlashReadUart@j& (0+255),f,b
  4832  000A46  2BBA               	incf	(FlashReadUart@j+1)& (0+255),f,b
  4833  000A48                     l325:
  4834                           
  4835                           ; BSR set to: 0
  4836                           
  4837                           ; BSR set to: 0
  4838  000A48  502C               	movf	FlashReadUart@numOfSampleToRead,w,c
  4839  000A4A  5DB9               	subwf	FlashReadUart@j& (0+255),w,b
  4840  000A4C  51BA               	movf	(FlashReadUart@j+1)& (0+255),w,b
  4841  000A4E  0A80               	xorlw	128
  4842  000A50  6F60               	movwf	??_FlashReadUart& (0+255),b
  4843  000A52  502D               	movf	FlashReadUart@numOfSampleToRead+1,w,c
  4844  000A54  0A80               	xorlw	128
  4845  000A56  5960               	subwfb	??_FlashReadUart& (0+255),w,b
  4846  000A58  B0D8               	btfsc	status,0,c
  4847  000A5A  0012               	return	
  4848  000A5C  D771               	goto	l326
  4849  000A5E                     __end_of_FlashReadUart:
  4850                           	opt stack 0
  4851                           tosu	equ	0xFFF
  4852                           tosh	equ	0xFFE
  4853                           tosl	equ	0xFFD
  4854                           pclath	equ	0xFFA
  4855                           tblptru	equ	0xFF8
  4856                           tblptrh	equ	0xFF7
  4857                           tblptrl	equ	0xFF6
  4858                           tablat	equ	0xFF5
  4859                           postinc0	equ	0xFEE
  4860                           wreg	equ	0xFE8
  4861                           postdec1	equ	0xFE5
  4862                           fsr1l	equ	0xFE1
  4863                           indf2	equ	0xFDF
  4864                           postinc2	equ	0xFDE
  4865                           fsr2h	equ	0xFDA
  4866                           fsr2l	equ	0xFD9
  4867                           status	equ	0xFD8
  4868                           
  4869 ;; *************** function _abs *****************
  4870 ;; Defined at:
  4871 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abs.c"
  4872 ;; Parameters:    Size  Location     Type
  4873 ;;  a               2   23[COMRAM] int 
  4874 ;; Auto vars:     Size  Location     Type
  4875 ;;		None
  4876 ;; Return value:  Size  Location     Type
  4877 ;;                  2   23[COMRAM] int 
  4878 ;; Registers used:
  4879 ;;		wreg, status,2, status,0
  4880 ;; Tracked objects:
  4881 ;;		On entry : 0/0
  4882 ;;		On exit  : 0/0
  4883 ;;		Unchanged: 0/0
  4884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4885 ;;      Params:         2       0       0       0       0       0       0
  4886 ;;      Locals:         0       0       0       0       0       0       0
  4887 ;;      Temps:          2       0       0       0       0       0       0
  4888 ;;      Totals:         4       0       0       0       0       0       0
  4889 ;;Total ram usage:        4 bytes
  4890 ;; Hardware stack levels used:    1
  4891 ;; Hardware stack levels required when called:    3
  4892 ;; This function calls:
  4893 ;;		Nothing
  4894 ;; This function is called by:
  4895 ;;		_FlashReadUart
  4896 ;; This function uses a non-reentrant model
  4897 ;;
  4898                           
  4899                           	psect	text19
  4900  0034FA                     __ptext19:
  4901                           	opt stack 0
  4902  0034FA                     _abs:
  4903                           	opt stack 24
  4904                           
  4905                           ;incstack = 0
  4906  0034FA  AE19               	btfss	abs@a+1,7,c
  4907  0034FC  D00D               	goto	l1505
  4908  0034FE  C018  F01A         	movff	abs@a,??_abs
  4909  003502  C019  F01B         	movff	abs@a+1,??_abs+1
  4910  003506  1E1A               	comf	??_abs,f,c
  4911  003508  1E1B               	comf	??_abs+1,f,c
  4912  00350A  4A1A               	infsnz	??_abs,f,c
  4913  00350C  2A1B               	incf	??_abs+1,f,c
  4914  00350E  C01A  F018         	movff	??_abs,?_abs
  4915  003512  C01B  F019         	movff	??_abs+1,?_abs+1
  4916  003516  0012               	return	
  4917  003518                     l1505:
  4918  003518  C018  F018         	movff	abs@a,?_abs
  4919  00351C  C019  F019         	movff	abs@a+1,?_abs+1
  4920  003520  0012               	return		;funcret
  4921  003522                     __end_of_abs:
  4922                           	opt stack 0
  4923                           tosu	equ	0xFFF
  4924                           tosh	equ	0xFFE
  4925                           tosl	equ	0xFFD
  4926                           pclath	equ	0xFFA
  4927                           tblptru	equ	0xFF8
  4928                           tblptrh	equ	0xFF7
  4929                           tblptrl	equ	0xFF6
  4930                           tablat	equ	0xFF5
  4931                           postinc0	equ	0xFEE
  4932                           wreg	equ	0xFE8
  4933                           postdec1	equ	0xFE5
  4934                           fsr1l	equ	0xFE1
  4935                           indf2	equ	0xFDF
  4936                           postinc2	equ	0xFDE
  4937                           fsr2h	equ	0xFDA
  4938                           fsr2l	equ	0xFD9
  4939                           status	equ	0xFD8
  4940                           
  4941 ;; *************** function _FLASH_ReadByte *****************
  4942 ;; Defined at:
  4943 ;;		line 58 in file "mcc_generated_files/memory.c"
  4944 ;; Parameters:    Size  Location     Type
  4945 ;;  flashAddr       4   23[COMRAM] unsigned long 
  4946 ;; Auto vars:     Size  Location     Type
  4947 ;;		None
  4948 ;; Return value:  Size  Location     Type
  4949 ;;                  1    wreg      unsigned char 
  4950 ;; Registers used:
  4951 ;;		wreg, status,2
  4952 ;; Tracked objects:
  4953 ;;		On entry : 0/0
  4954 ;;		On exit  : 0/0
  4955 ;;		Unchanged: 0/0
  4956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4957 ;;      Params:         4       0       0       0       0       0       0
  4958 ;;      Locals:         0       0       0       0       0       0       0
  4959 ;;      Temps:          0       0       0       0       0       0       0
  4960 ;;      Totals:         4       0       0       0       0       0       0
  4961 ;;Total ram usage:        4 bytes
  4962 ;; Hardware stack levels used:    1
  4963 ;; Hardware stack levels required when called:    3
  4964 ;; This function calls:
  4965 ;;		Nothing
  4966 ;; This function is called by:
  4967 ;;		_FlashReadUart
  4968 ;;		_FlashTest
  4969 ;;		_FLASH_ReadWord
  4970 ;;		_FLASH_WriteByte
  4971 ;; This function uses a non-reentrant model
  4972 ;;
  4973                           
  4974                           	psect	text20
  4975  003750                     __ptext20:
  4976                           	opt stack 0
  4977  003750                     _FLASH_ReadByte:
  4978                           	opt stack 24
  4979                           
  4980                           ;memory.c: 60: TBLPTRU = (uint8_t)((flashAddr & 0x00FF0000) >> 16);
  4981                           
  4982                           ;incstack = 0
  4983  003750  C01A  FFF8         	movff	FLASH_ReadByte@flashAddr+2,tblptru	;volatile
  4984                           
  4985                           ;memory.c: 61: TBLPTRH = (uint8_t)((flashAddr & 0x0000FF00)>> 8);
  4986  003754  C019  FFF7         	movff	FLASH_ReadByte@flashAddr+1,tblptrh	;volatile
  4987                           
  4988                           ;memory.c: 62: TBLPTRL = (uint8_t)(flashAddr & 0x000000FF);
  4989  003758  C018  FFF6         	movff	FLASH_ReadByte@flashAddr,tblptrl	;volatile
  4990  00375C  0008               	tblrd		*	;# 
  4991                           
  4992                           ;memory.c: 66: return (TABLAT);
  4993  00375E  50F5               	movf	tablat,w,c	;volatile
  4994  003760  0012               	return	
  4995  003762                     __end_of_FLASH_ReadByte:
  4996                           	opt stack 0
  4997                           tosu	equ	0xFFF
  4998                           tosh	equ	0xFFE
  4999                           tosl	equ	0xFFD
  5000                           pclath	equ	0xFFA
  5001                           tblptru	equ	0xFF8
  5002                           tblptrh	equ	0xFF7
  5003                           tblptrl	equ	0xFF6
  5004                           tablat	equ	0xFF5
  5005                           postinc0	equ	0xFEE
  5006                           wreg	equ	0xFE8
  5007                           postdec1	equ	0xFE5
  5008                           fsr1l	equ	0xFE1
  5009                           indf2	equ	0xFDF
  5010                           postinc2	equ	0xFDE
  5011                           fsr2h	equ	0xFDA
  5012                           fsr2l	equ	0xFD9
  5013                           status	equ	0xFD8
  5014                           
  5015 ;; *************** function _FlashReadCondition *****************
  5016 ;; Defined at:
  5017 ;;		line 178 in file "FlashApp.c"
  5018 ;; Parameters:    Size  Location     Type
  5019 ;;		None
  5020 ;; Auto vars:     Size  Location     Type
  5021 ;;  TxMsg           9    0[BANK0 ] unsigned char [9]
  5022 ;; Return value:  Size  Location     Type
  5023 ;;                  1    wreg      void 
  5024 ;; Registers used:
  5025 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5026 ;; Tracked objects:
  5027 ;;		On entry : 0/0
  5028 ;;		On exit  : 0/0
  5029 ;;		Unchanged: 0/0
  5030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5031 ;;      Params:         0       0       0       0       0       0       0
  5032 ;;      Locals:         0       9       0       0       0       0       0
  5033 ;;      Temps:          4       0       0       0       0       0       0
  5034 ;;      Totals:         4       9       0       0       0       0       0
  5035 ;;Total ram usage:       13 bytes
  5036 ;; Hardware stack levels used:    1
  5037 ;; Hardware stack levels required when called:    5
  5038 ;; This function calls:
  5039 ;;		_WriteUartMessage
  5040 ;;		_ZeroArray
  5041 ;;		_crc8
  5042 ;;		_make8
  5043 ;; This function is called by:
  5044 ;;		_GroupFlashMemory
  5045 ;; This function uses a non-reentrant model
  5046 ;;
  5047                           
  5048                           	psect	text21
  5049  001624                     __ptext21:
  5050                           	opt stack 0
  5051  001624                     _FlashReadCondition:
  5052                           	opt stack 23
  5053                           
  5054                           ;FlashApp.c: 181: char TxMsg[4 + (0x4) + 1];
  5055                           ;FlashApp.c: 182: ZeroArray(TxMsg, 4 + (0x4) + 1);
  5056                           
  5057                           ;incstack = 0
  5058  001624  0E60               	movlw	low FlashReadCondition@TxMsg
  5059  001626  6E20               	movwf	ZeroArray@array,c
  5060  001628  0E00               	movlw	high FlashReadCondition@TxMsg
  5061  00162A  6E21               	movwf	ZeroArray@array+1,c
  5062  00162C  0E00               	movlw	0
  5063  00162E  6E23               	movwf	ZeroArray@size+1,c
  5064  001630  0E09               	movlw	9
  5065  001632  6E22               	movwf	ZeroArray@size,c
  5066  001634  EC2F  F01B         	call	_ZeroArray	;wreg free
  5067                           
  5068                           ;FlashApp.c: 185: TxMsg[(0)] = (0x24);
  5069  001638  0E24               	movlw	36
  5070  00163A  0100               	movlb	0	; () banked
  5071  00163C  6F60               	movwf	FlashReadCondition@TxMsg& (0+255),b
  5072                           
  5073                           ; BSR set to: 0
  5074                           ;FlashApp.c: 186: TxMsg[(1)] = FLASH_MSG;
  5075  00163E  0E05               	movlw	5
  5076  001640  6F61               	movwf	(FlashReadCondition@TxMsg+1)& (0+255),b
  5077                           
  5078                           ; BSR set to: 0
  5079                           ;FlashApp.c: 187: TxMsg[(2)] = FLASH_READ_CONDITION;
  5080  001642  0E52               	movlw	82
  5081  001644  6F62               	movwf	(FlashReadCondition@TxMsg+2)& (0+255),b
  5082                           
  5083                           ; BSR set to: 0
  5084                           ;FlashApp.c: 188: TxMsg[(3)] = 4;
  5085  001646  0E04               	movlw	4
  5086  001648  6F63               	movwf	(FlashReadCondition@TxMsg+3)& (0+255),b
  5087                           
  5088                           ; BSR set to: 0
  5089                           ;FlashApp.c: 193: TxMsg[(0x4) + 0] = make8(0x7FF0 - 0x4000,1);
  5090  00164A  0EF0               	movlw	240
  5091  00164C  6E18               	movwf	make8@data,c
  5092  00164E  0E3F               	movlw	63
  5093  001650  6E19               	movwf	make8@data+1,c
  5094  001652  0E00               	movlw	0
  5095  001654  6E1A               	movwf	make8@data+2,c
  5096  001656  0E00               	movlw	0
  5097  001658  6E1B               	movwf	make8@data+3,c
  5098  00165A  0E01               	movlw	1
  5099  00165C  6E1C               	movwf	make8@dataLocation,c
  5100  00165E  EC96  F015         	call	_make8	;wreg free
  5101  001662  0100               	movlb	0	; () banked
  5102  001664  6F64               	movwf	(FlashReadCondition@TxMsg+4)& (0+255),b
  5103                           
  5104                           ; BSR set to: 0
  5105                           ;FlashApp.c: 194: TxMsg[(0x4) + 1] = make8(0x7FF0 - 0x4000,0);
  5106  001666  0EF0               	movlw	240
  5107  001668  6E18               	movwf	make8@data,c
  5108  00166A  0E3F               	movlw	63
  5109  00166C  6E19               	movwf	make8@data+1,c
  5110  00166E  0E00               	movlw	0
  5111  001670  6E1A               	movwf	make8@data+2,c
  5112  001672  0E00               	movlw	0
  5113  001674  6E1B               	movwf	make8@data+3,c
  5114  001676  0E00               	movlw	0
  5115  001678  6E1C               	movwf	make8@dataLocation,c
  5116  00167A  EC96  F015         	call	_make8	;wreg free
  5117  00167E  0100               	movlb	0	; () banked
  5118  001680  6F65               	movwf	(FlashReadCondition@TxMsg+5)& (0+255),b
  5119                           
  5120                           ; BSR set to: 0
  5121                           ;FlashApp.c: 197: TxMsg[(0x4) + 2] = make8(0x7FF0 - writeAddress,1);
  5122  001682  C041  F024         	movff	_writeAddress,??_FlashReadCondition
  5123  001686  C042  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  5124  00168A  C043  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  5125  00168E  C044  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  5126  001692  1E24               	comf	??_FlashReadCondition,f,c
  5127  001694  1E25               	comf	??_FlashReadCondition+1,f,c
  5128  001696  1E26               	comf	??_FlashReadCondition+2,f,c
  5129  001698  1E27               	comf	??_FlashReadCondition+3,f,c
  5130  00169A  2A24               	incf	??_FlashReadCondition,f,c
  5131  00169C  0E00               	movlw	0
  5132  00169E  2225               	addwfc	??_FlashReadCondition+1,f,c
  5133  0016A0  2226               	addwfc	??_FlashReadCondition+2,f,c
  5134  0016A2  2227               	addwfc	??_FlashReadCondition+3,f,c
  5135  0016A4  0EF0               	movlw	240
  5136  0016A6  2424               	addwf	??_FlashReadCondition,w,c
  5137  0016A8  6E18               	movwf	make8@data,c
  5138  0016AA  0E7F               	movlw	127
  5139  0016AC  2025               	addwfc	??_FlashReadCondition+1,w,c
  5140  0016AE  6E19               	movwf	make8@data+1,c
  5141  0016B0  0E00               	movlw	0
  5142  0016B2  2026               	addwfc	??_FlashReadCondition+2,w,c
  5143  0016B4  6E1A               	movwf	make8@data+2,c
  5144  0016B6  0E00               	movlw	0
  5145  0016B8  2027               	addwfc	??_FlashReadCondition+3,w,c
  5146  0016BA  6E1B               	movwf	make8@data+3,c
  5147  0016BC  0E01               	movlw	1
  5148  0016BE  6E1C               	movwf	make8@dataLocation,c
  5149  0016C0  EC96  F015         	call	_make8	;wreg free
  5150  0016C4  0100               	movlb	0	; () banked
  5151  0016C6  6F66               	movwf	(FlashReadCondition@TxMsg+6)& (0+255),b
  5152                           
  5153                           ; BSR set to: 0
  5154                           ;FlashApp.c: 198: TxMsg[(0x4) + 3] = make8(0x7FF0 - writeAddress,0);
  5155  0016C8  C041  F024         	movff	_writeAddress,??_FlashReadCondition
  5156  0016CC  C042  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  5157  0016D0  C043  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  5158  0016D4  C044  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  5159  0016D8  1E24               	comf	??_FlashReadCondition,f,c
  5160  0016DA  1E25               	comf	??_FlashReadCondition+1,f,c
  5161  0016DC  1E26               	comf	??_FlashReadCondition+2,f,c
  5162  0016DE  1E27               	comf	??_FlashReadCondition+3,f,c
  5163  0016E0  2A24               	incf	??_FlashReadCondition,f,c
  5164  0016E2  0E00               	movlw	0
  5165  0016E4  2225               	addwfc	??_FlashReadCondition+1,f,c
  5166  0016E6  2226               	addwfc	??_FlashReadCondition+2,f,c
  5167  0016E8  2227               	addwfc	??_FlashReadCondition+3,f,c
  5168  0016EA  0EF0               	movlw	240
  5169  0016EC  2424               	addwf	??_FlashReadCondition,w,c
  5170  0016EE  6E18               	movwf	make8@data,c
  5171  0016F0  0E7F               	movlw	127
  5172  0016F2  2025               	addwfc	??_FlashReadCondition+1,w,c
  5173  0016F4  6E19               	movwf	make8@data+1,c
  5174  0016F6  0E00               	movlw	0
  5175  0016F8  2026               	addwfc	??_FlashReadCondition+2,w,c
  5176  0016FA  6E1A               	movwf	make8@data+2,c
  5177  0016FC  0E00               	movlw	0
  5178  0016FE  2027               	addwfc	??_FlashReadCondition+3,w,c
  5179  001700  6E1B               	movwf	make8@data+3,c
  5180  001702  0E00               	movlw	0
  5181  001704  6E1C               	movwf	make8@dataLocation,c
  5182  001706  EC96  F015         	call	_make8	;wreg free
  5183  00170A  0100               	movlb	0	; () banked
  5184  00170C  6F67               	movwf	(FlashReadCondition@TxMsg+7)& (0+255),b
  5185                           
  5186                           ;FlashApp.c: 200: TxMsg[4 + (0x4)] = crc8(TxMsg, 4 + (0x4));
  5187  00170E  0E60               	movlw	low FlashReadCondition@TxMsg
  5188  001710  6E18               	movwf	crc8@dataArray,c
  5189  001712  0E00               	movlw	high FlashReadCondition@TxMsg
  5190  001714  6E19               	movwf	crc8@dataArray+1,c
  5191  001716  0E00               	movlw	0
  5192  001718  6E1B               	movwf	crc8@dataSize+1,c
  5193  00171A  0E08               	movlw	8
  5194  00171C  6E1A               	movwf	crc8@dataSize,c
  5195  00171E  EC46  F017         	call	_crc8	;wreg free
  5196  001722  0100               	movlb	0	; () banked
  5197  001724  6F68               	movwf	(FlashReadCondition@TxMsg+8)& (0+255),b
  5198                           
  5199                           ; BSR set to: 0
  5200                           ;FlashApp.c: 202: WriteUartMessage(TxMsg, 4 + (0x4) + 1);
  5201  001726  0E60               	movlw	low FlashReadCondition@TxMsg
  5202  001728  6E19               	movwf	WriteUartMessage@dataBuf,c
  5203  00172A  0E00               	movlw	high FlashReadCondition@TxMsg
  5204  00172C  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5205  00172E  0E00               	movlw	0
  5206  001730  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5207  001732  0E09               	movlw	9
  5208  001734  6E1B               	movwf	WriteUartMessage@dataSize,c
  5209  001736  EC8D  F019         	call	_WriteUartMessage	;wreg free
  5210  00173A  0012               	return		;funcret
  5211  00173C                     __end_of_FlashReadCondition:
  5212                           	opt stack 0
  5213                           tosu	equ	0xFFF
  5214                           tosh	equ	0xFFE
  5215                           tosl	equ	0xFFD
  5216                           pclath	equ	0xFFA
  5217                           tblptru	equ	0xFF8
  5218                           tblptrh	equ	0xFF7
  5219                           tblptrl	equ	0xFF6
  5220                           tablat	equ	0xFF5
  5221                           postinc0	equ	0xFEE
  5222                           wreg	equ	0xFE8
  5223                           postdec1	equ	0xFE5
  5224                           fsr1l	equ	0xFE1
  5225                           indf2	equ	0xFDF
  5226                           postinc2	equ	0xFDE
  5227                           fsr2h	equ	0xFDA
  5228                           fsr2l	equ	0xFD9
  5229                           status	equ	0xFD8
  5230                           
  5231 ;; *************** function _FlashEreaseMem *****************
  5232 ;; Defined at:
  5233 ;;		line 168 in file "FlashApp.c"
  5234 ;; Parameters:    Size  Location     Type
  5235 ;;		None
  5236 ;; Auto vars:     Size  Location     Type
  5237 ;;		None
  5238 ;; Return value:  Size  Location     Type
  5239 ;;                  1    wreg      void 
  5240 ;; Registers used:
  5241 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5242 ;; Tracked objects:
  5243 ;;		On entry : 0/0
  5244 ;;		On exit  : 0/0
  5245 ;;		Unchanged: 0/0
  5246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5247 ;;      Params:         0       0       0       0       0       0       0
  5248 ;;      Locals:         0       0       0       0       0       0       0
  5249 ;;      Temps:          0       0       0       0       0       0       0
  5250 ;;      Totals:         0       0       0       0       0       0       0
  5251 ;;Total ram usage:        0 bytes
  5252 ;; Hardware stack levels used:    1
  5253 ;; Hardware stack levels required when called:    6
  5254 ;; This function calls:
  5255 ;;		_SendAckMessage
  5256 ;;		_ZeroArray
  5257 ;; This function is called by:
  5258 ;;		_GroupFlashMemory
  5259 ;; This function uses a non-reentrant model
  5260 ;;
  5261                           
  5262                           	psect	text22
  5263  002DE8                     __ptext22:
  5264                           	opt stack 0
  5265  002DE8                     _FlashEreaseMem:
  5266                           	opt stack 22
  5267                           
  5268                           ;FlashApp.c: 170: writeAddress = 0x4000;
  5269                           
  5270                           ;incstack = 0
  5271  002DE8  0E00               	movlw	0
  5272  002DEA  6E41               	movwf	_writeAddress,c
  5273  002DEC  0E40               	movlw	64
  5274  002DEE  6E42               	movwf	_writeAddress+1,c
  5275  002DF0  0E00               	movlw	0
  5276  002DF2  6E43               	movwf	_writeAddress+2,c
  5277  002DF4  0E00               	movlw	0
  5278  002DF6  6E44               	movwf	_writeAddress+3,c
  5279                           
  5280                           ;FlashApp.c: 171: readAddress = 0x4000;
  5281  002DF8  0E00               	movlw	0
  5282  002DFA  0100               	movlb	0	; () banked
  5283  002DFC  6FF9               	movwf	_readAddress& (0+255),b
  5284  002DFE  0E40               	movlw	64
  5285  002E00  6FFA               	movwf	(_readAddress+1)& (0+255),b
  5286  002E02  0E00               	movlw	0
  5287  002E04  6FFB               	movwf	(_readAddress+2)& (0+255),b
  5288  002E06  0E00               	movlw	0
  5289  002E08  6FFC               	movwf	(_readAddress+3)& (0+255),b
  5290                           
  5291                           ;FlashApp.c: 172: numOfValidateSamples = 0;
  5292  002E0A  0E00               	movlw	0
  5293  002E0C  6E30               	movwf	_numOfValidateSamples,c
  5294  002E0E  0E00               	movlw	0
  5295  002E10  6E31               	movwf	_numOfValidateSamples+1,c
  5296  002E12  0E00               	movlw	0
  5297  002E14  6E32               	movwf	_numOfValidateSamples+2,c
  5298  002E16  0E00               	movlw	0
  5299  002E18  6E33               	movwf	_numOfValidateSamples+3,c
  5300                           
  5301                           ; BSR set to: 0
  5302                           ;FlashApp.c: 173: ZeroArray(sampleArray, (64)/sizeof(adc_result_t));
  5303  002E1A  0E6E               	movlw	low _sampleArray
  5304  002E1C  6E20               	movwf	ZeroArray@array,c
  5305  002E1E  0E01               	movlw	high _sampleArray
  5306  002E20  6E21               	movwf	ZeroArray@array+1,c
  5307  002E22  0E00               	movlw	0
  5308  002E24  6E23               	movwf	ZeroArray@size+1,c
  5309  002E26  0E20               	movlw	32
  5310  002E28  6E22               	movwf	ZeroArray@size,c
  5311  002E2A  EC2F  F01B         	call	_ZeroArray	;wreg free
  5312                           
  5313                           ;FlashApp.c: 174: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_EREASE_MEMORY
      +                          );
  5314  002E2E  0E51               	movlw	81
  5315  002E30  6E24               	movwf	SendAckMessage@inRequest,c
  5316  002E32  0E05               	movlw	5
  5317  002E34  EC1D  F017         	call	_SendAckMessage
  5318  002E38  0012               	return		;funcret
  5319  002E3A                     __end_of_FlashEreaseMem:
  5320                           	opt stack 0
  5321                           tosu	equ	0xFFF
  5322                           tosh	equ	0xFFE
  5323                           tosl	equ	0xFFD
  5324                           pclath	equ	0xFFA
  5325                           tblptru	equ	0xFF8
  5326                           tblptrh	equ	0xFF7
  5327                           tblptrl	equ	0xFF6
  5328                           tablat	equ	0xFF5
  5329                           postinc0	equ	0xFEE
  5330                           wreg	equ	0xFE8
  5331                           postdec1	equ	0xFE5
  5332                           fsr1l	equ	0xFE1
  5333                           indf2	equ	0xFDF
  5334                           postinc2	equ	0xFDE
  5335                           fsr2h	equ	0xFDA
  5336                           fsr2l	equ	0xFD9
  5337                           status	equ	0xFD8
  5338                           
  5339 ;; *************** function _DacSetValue *****************
  5340 ;; Defined at:
  5341 ;;		line 42 in file "DacApp.c"
  5342 ;; Parameters:    Size  Location     Type
  5343 ;;  data            2   38[BANK0 ] PTR unsigned char 
  5344 ;;		 -> rxMsgData(20), 
  5345 ;; Auto vars:     Size  Location     Type
  5346 ;;  regData         2   44[BANK0 ] unsigned int 
  5347 ;;  dacIndex        1   43[BANK0 ] char 
  5348 ;; Return value:  Size  Location     Type
  5349 ;;                  1    wreg      void 
  5350 ;; Registers used:
  5351 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5352 ;; Tracked objects:
  5353 ;;		On entry : 0/0
  5354 ;;		On exit  : 0/0
  5355 ;;		Unchanged: 0/0
  5356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5357 ;;      Params:         0       2       0       0       0       0       0
  5358 ;;      Locals:         0       3       0       0       0       0       0
  5359 ;;      Temps:          0       3       0       0       0       0       0
  5360 ;;      Totals:         0       8       0       0       0       0       0
  5361 ;;Total ram usage:        8 bytes
  5362 ;; Hardware stack levels used:    1
  5363 ;; Hardware stack levels required when called:    7
  5364 ;; This function calls:
  5365 ;;		_GetIntFromUartData
  5366 ;;		_SWSPI_send_word
  5367 ;;		_SendAckMessage
  5368 ;;		_StoreIntInEeprom
  5369 ;; This function is called by:
  5370 ;;		_GroupDAC
  5371 ;; This function uses a non-reentrant model
  5372 ;;
  5373                           
  5374                           	psect	text23
  5375  002618                     __ptext23:
  5376                           	opt stack 0
  5377  002618                     _DacSetValue:
  5378                           	opt stack 21
  5379                           
  5380                           ;DacApp.c: 44: uint16_t regData = GetIntFromUartData(16, data);
  5381                           
  5382                           ;incstack = 0
  5383  002618  C086  F066         	movff	DacSetValue@data,GetIntFromUartData@data
  5384  00261C  C087  F067         	movff	DacSetValue@data+1,GetIntFromUartData@data+1
  5385  002620  0E10               	movlw	16
  5386  002622  EC39  F00F         	call	_GetIntFromUartData
  5387  002626  C066  F08C         	movff	?_GetIntFromUartData,DacSetValue@regData
  5388  00262A  C067  F08D         	movff	?_GetIntFromUartData+1,DacSetValue@regData+1
  5389                           
  5390                           ;DacApp.c: 45: SWSPI_send_word(EXT_DAC, regData, 1);
  5391  00262E  C08C  F026         	movff	DacSetValue@regData,SWSPI_send_word@data
  5392  002632  C08D  F027         	movff	DacSetValue@regData+1,SWSPI_send_word@data+1
  5393  002636  6A28               	clrf	SWSPI_send_word@data+2,c
  5394  002638  6A29               	clrf	SWSPI_send_word@data+3,c
  5395  00263A  0E01               	movlw	1
  5396  00263C  6E2A               	movwf	SWSPI_send_word@dataSize,c
  5397  00263E  0E02               	movlw	2
  5398  002640  EC50  F011         	call	_SWSPI_send_word
  5399                           
  5400                           ;DacApp.c: 48: int8_t dacIndex = (regData >> 14);
  5401  002644  C08C  F088         	movff	DacSetValue@regData,??_DacSetValue
  5402  002648  C08D  F089         	movff	DacSetValue@regData+1,??_DacSetValue+1
  5403  00264C  0E0E               	movlw	14
  5404  00264E  0100               	movlb	0	; () banked
  5405  002650  6F8A               	movwf	(??_DacSetValue+2)& (0+255),b
  5406  002652                     u7465:
  5407  002652  90D8               	bcf	status,0,c
  5408  002654  3389               	rrcf	(??_DacSetValue+1)& (0+255),f,b
  5409  002656  3388               	rrcf	??_DacSetValue& (0+255),f,b
  5410  002658  2F8A               	decfsz	(??_DacSetValue+2)& (0+255),f,b
  5411  00265A  D7FB               	goto	u7465
  5412  00265C  5188               	movf	??_DacSetValue& (0+255),w,b
  5413  00265E  6F8B               	movwf	DacSetValue@dacIndex& (0+255),b
  5414                           
  5415                           ; BSR set to: 0
  5416                           ;DacApp.c: 49: StoreIntInEeprom(regData, (0x20) | DAC_ADDRES[dacIndex], 2);
  5417  002660  C08C  F021         	movff	DacSetValue@regData,StoreIntInEeprom@data
  5418  002664  C08D  F022         	movff	DacSetValue@regData+1,StoreIntInEeprom@data+1
  5419  002668  6A23               	clrf	StoreIntInEeprom@data+2,c
  5420  00266A  6A24               	clrf	StoreIntInEeprom@data+3,c
  5421  00266C  518B               	movf	DacSetValue@dacIndex& (0+255),w,b
  5422  00266E  0D01               	mullw	1
  5423  002670  0E48               	movlw	low _DAC_ADDRES
  5424  002672  24F3               	addwf	prodl,w,c
  5425  002674  6EF6               	movwf	tblptrl,c
  5426  002676  0E06               	movlw	high _DAC_ADDRES
  5427  002678  20F4               	addwfc	prodh,w,c
  5428  00267A  6EF7               	movwf	tblptrh,c
  5429  00267C                     	if	0	;There are less than 3 active tblptr bytes
  5430  00267C                     	endif
  5431  00267C  0008               	tblrd		*
  5432  00267E  50F5               	movf	tablat,w,c
  5433  002680  0920               	iorlw	32
  5434  002682  6E25               	movwf	StoreIntInEeprom@address,c
  5435  002684  0E00               	movlw	0
  5436  002686  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  5437  002688  0E02               	movlw	2
  5438  00268A  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  5439  00268C  EC03  F019         	call	_StoreIntInEeprom	;wreg free
  5440                           
  5441                           ;DacApp.c: 52: SendAckMessage((MSG_GROUPS)DAC_MSG, (MSG_REQUEST)DAC_SET_VALUE);
  5442  002690  0E61               	movlw	97
  5443  002692  6E24               	movwf	SendAckMessage@inRequest,c
  5444  002694  0E06               	movlw	6
  5445  002696  EC1D  F017         	call	_SendAckMessage
  5446  00269A  0012               	return		;funcret
  5447  00269C                     __end_of_DacSetValue:
  5448                           	opt stack 0
  5449                           tosu	equ	0xFFF
  5450                           tosh	equ	0xFFE
  5451                           tosl	equ	0xFFD
  5452                           pclath	equ	0xFFA
  5453                           tblptru	equ	0xFF8
  5454                           tblptrh	equ	0xFF7
  5455                           tblptrl	equ	0xFF6
  5456                           tablat	equ	0xFF5
  5457                           prodh	equ	0xFF4
  5458                           prodl	equ	0xFF3
  5459                           postinc0	equ	0xFEE
  5460                           wreg	equ	0xFE8
  5461                           postdec1	equ	0xFE5
  5462                           fsr1l	equ	0xFE1
  5463                           indf2	equ	0xFDF
  5464                           postinc2	equ	0xFDE
  5465                           fsr2h	equ	0xFDA
  5466                           fsr2l	equ	0xFD9
  5467                           status	equ	0xFD8
  5468                           
  5469 ;; *************** function _StoreIntInEeprom *****************
  5470 ;; Defined at:
  5471 ;;		line 88 in file "SystemCommon.c"
  5472 ;; Parameters:    Size  Location     Type
  5473 ;;  data            4   32[COMRAM] unsigned long 
  5474 ;;  address         1   36[COMRAM] unsigned char 
  5475 ;;  numOfByes       2   37[COMRAM] int 
  5476 ;; Auto vars:     Size  Location     Type
  5477 ;;  val             1   39[COMRAM] unsigned char 
  5478 ;;  idx             1   40[COMRAM] unsigned char 
  5479 ;; Return value:  Size  Location     Type
  5480 ;;                  1    wreg      void 
  5481 ;; Registers used:
  5482 ;;		wreg, status,2, status,0, cstack
  5483 ;; Tracked objects:
  5484 ;;		On entry : 0/0
  5485 ;;		On exit  : 0/0
  5486 ;;		Unchanged: 0/0
  5487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5488 ;;      Params:         7       0       0       0       0       0       0
  5489 ;;      Locals:         2       0       0       0       0       0       0
  5490 ;;      Temps:          0       0       0       0       0       0       0
  5491 ;;      Totals:         9       0       0       0       0       0       0
  5492 ;;Total ram usage:        9 bytes
  5493 ;; Hardware stack levels used:    1
  5494 ;; Hardware stack levels required when called:    5
  5495 ;; This function calls:
  5496 ;;		_EepromWrite
  5497 ;;		_make8
  5498 ;; This function is called by:
  5499 ;;		_DacSetValue
  5500 ;; This function uses a non-reentrant model
  5501 ;;
  5502                           
  5503                           	psect	text24
  5504  003206                     __ptext24:
  5505                           	opt stack 0
  5506  003206                     _StoreIntInEeprom:
  5507                           	opt stack 22
  5508                           
  5509                           ;SystemCommon.c: 90: for(uint8_t idx = numOfByes; idx; idx--)
  5510                           
  5511                           ;incstack = 0
  5512  003206  C026  F029         	movff	StoreIntInEeprom@numOfByes,StoreIntInEeprom@idx
  5513  00320A  D015               	goto	l1317
  5514  00320C                     
  5515                           ;SystemCommon.c: 91: {
  5516                           ;SystemCommon.c: 92: uint8_t val = make8(data, idx - 1);
  5517  00320C  C021  F018         	movff	StoreIntInEeprom@data,make8@data
  5518  003210  C022  F019         	movff	StoreIntInEeprom@data+1,make8@data+1
  5519  003214  C023  F01A         	movff	StoreIntInEeprom@data+2,make8@data+2
  5520  003218  C024  F01B         	movff	StoreIntInEeprom@data+3,make8@data+3
  5521  00321C  0429               	decf	StoreIntInEeprom@idx,w,c
  5522  00321E  6E1C               	movwf	make8@dataLocation,c
  5523  003220  EC96  F015         	call	_make8	;wreg free
  5524  003224  6E28               	movwf	StoreIntInEeprom@val,c
  5525                           
  5526                           ;SystemCommon.c: 93: EepromWrite(address - idx, val);
  5527  003226  C028  F01B         	movff	StoreIntInEeprom@val,EepromWrite@data
  5528  00322A  5029               	movf	StoreIntInEeprom@idx,w,c
  5529  00322C  0800               	sublw	0
  5530  00322E  2425               	addwf	StoreIntInEeprom@address,w,c
  5531  003230  ECC1  F01B         	call	_EepromWrite
  5532  003234  0629               	decf	StoreIntInEeprom@idx,f,c
  5533  003236                     l1317:
  5534  003236  5029               	movf	StoreIntInEeprom@idx,w,c
  5535  003238  B4D8               	btfsc	status,2,c
  5536  00323A  0012               	return	
  5537  00323C  D7E7               	goto	l1318
  5538  00323E                     __end_of_StoreIntInEeprom:
  5539                           	opt stack 0
  5540                           tosu	equ	0xFFF
  5541                           tosh	equ	0xFFE
  5542                           tosl	equ	0xFFD
  5543                           pclath	equ	0xFFA
  5544                           tblptru	equ	0xFF8
  5545                           tblptrh	equ	0xFF7
  5546                           tblptrl	equ	0xFF6
  5547                           tablat	equ	0xFF5
  5548                           prodh	equ	0xFF4
  5549                           prodl	equ	0xFF3
  5550                           postinc0	equ	0xFEE
  5551                           wreg	equ	0xFE8
  5552                           postdec1	equ	0xFE5
  5553                           fsr1l	equ	0xFE1
  5554                           indf2	equ	0xFDF
  5555                           postinc2	equ	0xFDE
  5556                           fsr2h	equ	0xFDA
  5557                           fsr2l	equ	0xFD9
  5558                           status	equ	0xFD8
  5559                           
  5560 ;; *************** function _EepromWrite *****************
  5561 ;; Defined at:
  5562 ;;		line 220 in file "FlashApp.c"
  5563 ;; Parameters:    Size  Location     Type
  5564 ;;  address         1    wreg     unsigned char 
  5565 ;;  data            1   26[COMRAM] unsigned char 
  5566 ;; Auto vars:     Size  Location     Type
  5567 ;;  address         1   27[COMRAM] unsigned char 
  5568 ;; Return value:  Size  Location     Type
  5569 ;;                  1    wreg      void 
  5570 ;; Registers used:
  5571 ;;		wreg, status,2, cstack
  5572 ;; Tracked objects:
  5573 ;;		On entry : 0/0
  5574 ;;		On exit  : 0/0
  5575 ;;		Unchanged: 0/0
  5576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5577 ;;      Params:         1       0       0       0       0       0       0
  5578 ;;      Locals:         1       0       0       0       0       0       0
  5579 ;;      Temps:          0       0       0       0       0       0       0
  5580 ;;      Totals:         2       0       0       0       0       0       0
  5581 ;;Total ram usage:        2 bytes
  5582 ;; Hardware stack levels used:    1
  5583 ;; Hardware stack levels required when called:    4
  5584 ;; This function calls:
  5585 ;;		_DATAEE_WriteByte
  5586 ;; This function is called by:
  5587 ;;		_StoreIntInEeprom
  5588 ;; This function uses a non-reentrant model
  5589 ;;
  5590                           
  5591                           	psect	text25
  5592  003782                     __ptext25:
  5593                           	opt stack 0
  5594  003782                     _EepromWrite:
  5595                           	opt stack 22
  5596                           
  5597                           ;incstack = 0
  5598                           ;EepromWrite@address stored from wreg
  5599  003782  6E1C               	movwf	EepromWrite@address,c
  5600                           
  5601                           ;FlashApp.c: 222: DATAEE_WriteByte(address, data);
  5602  003784  C01B  F018         	movff	EepromWrite@data,DATAEE_WriteByte@bData
  5603  003788  501C               	movf	EepromWrite@address,w,c
  5604  00378A  EC57  F019         	call	_DATAEE_WriteByte
  5605  00378E  0012               	return		;funcret
  5606  003790                     __end_of_EepromWrite:
  5607                           	opt stack 0
  5608                           tosu	equ	0xFFF
  5609                           tosh	equ	0xFFE
  5610                           tosl	equ	0xFFD
  5611                           pclath	equ	0xFFA
  5612                           tblptru	equ	0xFF8
  5613                           tblptrh	equ	0xFF7
  5614                           tblptrl	equ	0xFF6
  5615                           tablat	equ	0xFF5
  5616                           prodh	equ	0xFF4
  5617                           prodl	equ	0xFF3
  5618                           postinc0	equ	0xFEE
  5619                           wreg	equ	0xFE8
  5620                           postdec1	equ	0xFE5
  5621                           fsr1l	equ	0xFE1
  5622                           indf2	equ	0xFDF
  5623                           postinc2	equ	0xFDE
  5624                           fsr2h	equ	0xFDA
  5625                           fsr2l	equ	0xFD9
  5626                           status	equ	0xFD8
  5627                           
  5628 ;; *************** function _DATAEE_WriteByte *****************
  5629 ;; Defined at:
  5630 ;;		line 167 in file "mcc_generated_files/memory.c"
  5631 ;; Parameters:    Size  Location     Type
  5632 ;;  bAdd            1    wreg     unsigned char 
  5633 ;;  bData           1   23[COMRAM] unsigned char 
  5634 ;; Auto vars:     Size  Location     Type
  5635 ;;  bAdd            1   24[COMRAM] unsigned char 
  5636 ;;  GIEBitValue     1   25[COMRAM] unsigned char 
  5637 ;; Return value:  Size  Location     Type
  5638 ;;                  1    wreg      void 
  5639 ;; Registers used:
  5640 ;;		wreg, status,2
  5641 ;; Tracked objects:
  5642 ;;		On entry : 0/0
  5643 ;;		On exit  : 0/0
  5644 ;;		Unchanged: 0/0
  5645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5646 ;;      Params:         1       0       0       0       0       0       0
  5647 ;;      Locals:         2       0       0       0       0       0       0
  5648 ;;      Temps:          0       0       0       0       0       0       0
  5649 ;;      Totals:         3       0       0       0       0       0       0
  5650 ;;Total ram usage:        3 bytes
  5651 ;; Hardware stack levels used:    1
  5652 ;; Hardware stack levels required when called:    3
  5653 ;; This function calls:
  5654 ;;		Nothing
  5655 ;; This function is called by:
  5656 ;;		_EepromWrite
  5657 ;;		_EepromTest
  5658 ;; This function uses a non-reentrant model
  5659 ;;
  5660                           
  5661                           	psect	text26
  5662  0032AE                     __ptext26:
  5663                           	opt stack 0
  5664  0032AE                     _DATAEE_WriteByte:
  5665                           	opt stack 22
  5666                           
  5667                           ;incstack = 0
  5668                           ;DATAEE_WriteByte@bAdd stored from wreg
  5669  0032AE  6E19               	movwf	DATAEE_WriteByte@bAdd,c
  5670                           
  5671                           ;memory.c: 169: uint8_t GIEBitValue = INTCONbits.GIE;
  5672  0032B0  0E00               	movlw	0
  5673  0032B2  BEF2               	btfsc	intcon,7,c	;volatile
  5674  0032B4  0E01               	movlw	1
  5675  0032B6  6E1A               	movwf	DATAEE_WriteByte@GIEBitValue,c
  5676                           
  5677                           ;memory.c: 171: EEADR = (bAdd & 0xFF);
  5678  0032B8  C019  FFA9         	movff	DATAEE_WriteByte@bAdd,4009	;volatile
  5679                           
  5680                           ;memory.c: 172: EEDATA = bData;
  5681  0032BC  C018  FFA8         	movff	DATAEE_WriteByte@bData,4008	;volatile
  5682                           
  5683                           ;memory.c: 173: EECON1bits.EEPGD = 0;
  5684  0032C0  9EA6               	bcf	4006,7,c	;volsfr
  5685                           
  5686                           ;memory.c: 174: EECON1bits.CFGS = 0;
  5687  0032C2  9CA6               	bcf	4006,6,c	;volsfr
  5688                           
  5689                           ;memory.c: 175: EECON1bits.WREN = 1;
  5690  0032C4  84A6               	bsf	4006,2,c	;volsfr
  5691                           
  5692                           ;memory.c: 176: INTCONbits.GIE = 0;
  5693  0032C6  9EF2               	bcf	intcon,7,c	;volatile
  5694                           
  5695                           ;memory.c: 177: EECON2 = 0x55;
  5696  0032C8  0E55               	movlw	85
  5697  0032CA  6EA7               	movwf	4007,c	;volsfr
  5698                           
  5699                           ;memory.c: 178: EECON2 = 0xAA;
  5700  0032CC  0EAA               	movlw	170
  5701  0032CE  6EA7               	movwf	4007,c	;volsfr
  5702                           
  5703                           ;memory.c: 179: EECON1bits.WR = 1;
  5704  0032D0  82A6               	bsf	4006,1,c	;volsfr
  5705  0032D2                     
  5706                           ;memory.c: 182: {
  5707  0032D2  B2A6               	btfsc	4006,1,c	;volsfr
  5708  0032D4  D7FE               	goto	l965
  5709                           
  5710                           ;memory.c: 183: }
  5711                           ;memory.c: 185: EECON1bits.WREN = 0;
  5712  0032D6  94A6               	bcf	4006,2,c	;volsfr
  5713                           
  5714                           ;memory.c: 186: INTCONbits.GIE = GIEBitValue;
  5715  0032D8  B01A               	btfsc	DATAEE_WriteByte@GIEBitValue,0,c
  5716  0032DA  D002               	bra	u6015
  5717  0032DC  9EF2               	bcf	intcon,7,c	;volatile
  5718  0032DE  D001               	bra	u6016
  5719  0032E0                     u6015:
  5720  0032E0  8EF2               	bsf	intcon,7,c	;volatile
  5721  0032E2                     u6016:
  5722  0032E2  0012               	return		;funcret
  5723  0032E4                     __end_of_DATAEE_WriteByte:
  5724                           	opt stack 0
  5725                           tosu	equ	0xFFF
  5726                           tosh	equ	0xFFE
  5727                           tosl	equ	0xFFD
  5728                           pclath	equ	0xFFA
  5729                           tblptru	equ	0xFF8
  5730                           tblptrh	equ	0xFF7
  5731                           tblptrl	equ	0xFF6
  5732                           tablat	equ	0xFF5
  5733                           prodh	equ	0xFF4
  5734                           prodl	equ	0xFF3
  5735                           intcon	equ	0xFF2
  5736                           postinc0	equ	0xFEE
  5737                           wreg	equ	0xFE8
  5738                           postdec1	equ	0xFE5
  5739                           fsr1l	equ	0xFE1
  5740                           indf2	equ	0xFDF
  5741                           postinc2	equ	0xFDE
  5742                           fsr2h	equ	0xFDA
  5743                           fsr2l	equ	0xFD9
  5744                           status	equ	0xFD8
  5745                           
  5746 ;; *************** function _GetIntFromUartData *****************
  5747 ;; Defined at:
  5748 ;;		line 34 in file "SystemCommon.c"
  5749 ;; Parameters:    Size  Location     Type
  5750 ;;  num             1    wreg     char 
  5751 ;;  data            2    6[BANK0 ] PTR unsigned char 
  5752 ;;		 -> rxMsgData(20), 
  5753 ;; Auto vars:     Size  Location     Type
  5754 ;;  num             1   19[BANK0 ] char 
  5755 ;;  c               1   24[BANK0 ] unsigned char 
  5756 ;;  idx             2   25[BANK0 ] int 
  5757 ;;  dataRegArr      9   10[BANK0 ] unsigned char [9]
  5758 ;;  retVal          4   20[BANK0 ] unsigned long 
  5759 ;; Return value:  Size  Location     Type
  5760 ;;                  4    6[BANK0 ] unsigned long 
  5761 ;; Registers used:
  5762 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5763 ;; Tracked objects:
  5764 ;;		On entry : 0/0
  5765 ;;		On exit  : 0/0
  5766 ;;		Unchanged: 0/0
  5767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5768 ;;      Params:         0       4       0       0       0       0       0
  5769 ;;      Locals:         0      17       0       0       0       0       0
  5770 ;;      Temps:          0       0       0       0       0       0       0
  5771 ;;      Totals:         0      21       0       0       0       0       0
  5772 ;;Total ram usage:       21 bytes
  5773 ;; Hardware stack levels used:    1
  5774 ;; Hardware stack levels required when called:    6
  5775 ;; This function calls:
  5776 ;;		_ZeroArray
  5777 ;;		_strtol
  5778 ;; This function is called by:
  5779 ;;		_DacSetValue
  5780 ;;		_UpdateTxFreq
  5781 ;;		_UpdateRxFreq
  5782 ;; This function uses a non-reentrant model
  5783 ;;
  5784                           
  5785                           	psect	text27
  5786  001E72                     __ptext27:
  5787                           	opt stack 0
  5788  001E72                     _GetIntFromUartData:
  5789                           	opt stack 21
  5790                           
  5791                           ;incstack = 0
  5792                           ;GetIntFromUartData@num stored from wreg
  5793  001E72  0100               	movlb	0	; () banked
  5794  001E74  6F73               	movwf	GetIntFromUartData@num& (0+255),b
  5795                           
  5796                           ;SystemCommon.c: 36: uint32_t retVal = 0;
  5797  001E76  0E00               	movlw	0
  5798  001E78  0100               	movlb	0	; () banked
  5799  001E7A  6F74               	movwf	GetIntFromUartData@retVal& (0+255),b
  5800  001E7C  0E00               	movlw	0
  5801  001E7E  6F75               	movwf	(GetIntFromUartData@retVal+1)& (0+255),b
  5802  001E80  0E00               	movlw	0
  5803  001E82  6F76               	movwf	(GetIntFromUartData@retVal+2)& (0+255),b
  5804  001E84  0E00               	movlw	0
  5805  001E86  6F77               	movwf	(GetIntFromUartData@retVal+3)& (0+255),b
  5806                           
  5807                           ; BSR set to: 0
  5808                           ;SystemCommon.c: 37: char dataRegArr[9];
  5809                           ;SystemCommon.c: 38: ZeroArray(dataRegArr, 9);
  5810  001E88  0E6A               	movlw	low GetIntFromUartData@dataRegArr
  5811  001E8A  6E20               	movwf	ZeroArray@array,c
  5812  001E8C  0E00               	movlw	high GetIntFromUartData@dataRegArr
  5813  001E8E  6E21               	movwf	ZeroArray@array+1,c
  5814  001E90  0E00               	movlw	0
  5815  001E92  6E23               	movwf	ZeroArray@size+1,c
  5816  001E94  0E09               	movlw	9
  5817  001E96  6E22               	movwf	ZeroArray@size,c
  5818  001E98  EC2F  F01B         	call	_ZeroArray	;wreg free
  5819                           
  5820                           ;SystemCommon.c: 40: for(int idx = 0; idx < 9; idx++)
  5821  001E9C  0E00               	movlw	0
  5822  001E9E  0100               	movlb	0	; () banked
  5823  001EA0  6F7A               	movwf	(GetIntFromUartData@idx+1)& (0+255),b
  5824  001EA2  0E00               	movlw	0
  5825  001EA4  6F79               	movwf	GetIntFromUartData@idx& (0+255),b
  5826  001EA6                     l7070:
  5827                           
  5828                           ; BSR set to: 0
  5829  001EA6  BF7A               	btfsc	(GetIntFromUartData@idx+1)& (0+255),7,b
  5830  001EA8  D006               	goto	l1295
  5831  001EAA  517A               	movf	(GetIntFromUartData@idx+1)& (0+255),w,b
  5832  001EAC  E122               	bnz	l7088
  5833  001EAE  0E09               	movlw	9
  5834  001EB0  5D79               	subwf	GetIntFromUartData@idx& (0+255),w,b
  5835  001EB2  B0D8               	btfsc	status,0,c
  5836  001EB4  D01E               	goto	u6910
  5837  001EB6                     l1295:
  5838                           
  5839                           ; BSR set to: 0
  5840                           ;SystemCommon.c: 41: {
  5841                           ;SystemCommon.c: 42: char c = data[idx];
  5842                           
  5843                           ; BSR set to: 0
  5844  001EB6  5179               	movf	GetIntFromUartData@idx& (0+255),w,b
  5845  001EB8  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  5846  001EBA  6ED9               	movwf	fsr2l,c
  5847  001EBC  517A               	movf	(GetIntFromUartData@idx+1)& (0+255),w,b
  5848  001EBE  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  5849  001EC0  6EDA               	movwf	fsr2h,c
  5850  001EC2  50DF               	movf	indf2,w,c
  5851  001EC4  6F78               	movwf	GetIntFromUartData@c& (0+255),b
  5852                           
  5853                           ; BSR set to: 0
  5854                           ;SystemCommon.c: 43: if(c == 0x10)
  5855  001EC6  0E10               	movlw	16
  5856  001EC8  1978               	xorwf	GetIntFromUartData@c& (0+255),w,b
  5857  001ECA  B4D8               	btfsc	status,2,c
  5858  001ECC  D012               	goto	u6910
  5859                           
  5860                           ; BSR set to: 0
  5861                           ;SystemCommon.c: 47: else
  5862                           ;SystemCommon.c: 48: {
  5863                           ;SystemCommon.c: 49: dataRegArr[idx] = data[idx] + '0';
  5864                           
  5865                           ; BSR set to: 0
  5866                           
  5867                           ; BSR set to: 0
  5868                           ;SystemCommon.c: 46: }
  5869                           
  5870                           ; BSR set to: 0
  5871                           ;SystemCommon.c: 44: {
  5872                           ;SystemCommon.c: 45: break;
  5873  001ECE  0E6A               	movlw	low GetIntFromUartData@dataRegArr
  5874  001ED0  2579               	addwf	GetIntFromUartData@idx& (0+255),w,b
  5875  001ED2  6ED9               	movwf	fsr2l,c
  5876  001ED4  0E00               	movlw	high GetIntFromUartData@dataRegArr
  5877  001ED6  217A               	addwfc	(GetIntFromUartData@idx+1)& (0+255),w,b
  5878  001ED8  6EDA               	movwf	fsr2h,c
  5879  001EDA  5179               	movf	GetIntFromUartData@idx& (0+255),w,b
  5880  001EDC  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  5881  001EDE  6EE1               	movwf	fsr1l,c
  5882  001EE0  517A               	movf	(GetIntFromUartData@idx+1)& (0+255),w,b
  5883  001EE2  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  5884  001EE4  6EE2               	movwf	fsr1h,c
  5885  001EE6  50E7               	movf	indf1,w,c
  5886  001EE8  0F30               	addlw	48
  5887  001EEA  6EDF               	movwf	indf2,c
  5888                           
  5889                           ; BSR set to: 0
  5890                           
  5891                           ; BSR set to: 0
  5892  001EEC  4B79               	infsnz	GetIntFromUartData@idx& (0+255),f,b
  5893  001EEE  2B7A               	incf	(GetIntFromUartData@idx+1)& (0+255),f,b
  5894  001EF0  D7DA               	goto	l7070
  5895  001EF2                     u6910:
  5896  001EF2                     l7088:
  5897                           
  5898                           ; BSR set to: 0
  5899                           ;SystemCommon.c: 50: }
  5900                           ;SystemCommon.c: 52: }
  5901                           ;SystemCommon.c: 53: retVal = strtol(dataRegArr, (0), num);
  5902  001EF2  0E6A               	movlw	low GetIntFromUartData@dataRegArr
  5903  001EF4  6E24               	movwf	strtol@s,c
  5904  001EF6  0E00               	movlw	high GetIntFromUartData@dataRegArr
  5905  001EF8  6E25               	movwf	strtol@s+1,c
  5906  001EFA  0E00               	movlw	0
  5907  001EFC  6E26               	movwf	strtol@endptr,c
  5908  001EFE  0E00               	movlw	0
  5909  001F00  6E27               	movwf	strtol@endptr+1,c
  5910  001F02  5173               	movf	GetIntFromUartData@num& (0+255),w,b
  5911  001F04  6E28               	movwf	strtol@base,c
  5912  001F06  6A29               	clrf	strtol@base+1,c
  5913  001F08  BE28               	btfsc	strtol@base,7,c
  5914  001F0A  0629               	decf	strtol@base+1,f,c
  5915  001F0C  EC26  F007         	call	_strtol	;wreg free
  5916  001F10  C024  F074         	movff	?_strtol,GetIntFromUartData@retVal
  5917  001F14  C025  F075         	movff	?_strtol+1,GetIntFromUartData@retVal+1
  5918  001F18  C026  F076         	movff	?_strtol+2,GetIntFromUartData@retVal+2
  5919  001F1C  C027  F077         	movff	?_strtol+3,GetIntFromUartData@retVal+3
  5920                           
  5921                           ;SystemCommon.c: 55: return retVal;
  5922  001F20  C074  F066         	movff	GetIntFromUartData@retVal,?_GetIntFromUartData
  5923  001F24  C075  F067         	movff	GetIntFromUartData@retVal+1,?_GetIntFromUartData+1
  5924  001F28  C076  F068         	movff	GetIntFromUartData@retVal+2,?_GetIntFromUartData+2
  5925  001F2C  C077  F069         	movff	GetIntFromUartData@retVal+3,?_GetIntFromUartData+3
  5926  001F30  0012               	return	
  5927  001F32                     __end_of_GetIntFromUartData:
  5928                           	opt stack 0
  5929                           tosu	equ	0xFFF
  5930                           tosh	equ	0xFFE
  5931                           tosl	equ	0xFFD
  5932                           pclath	equ	0xFFA
  5933                           tblptru	equ	0xFF8
  5934                           tblptrh	equ	0xFF7
  5935                           tblptrl	equ	0xFF6
  5936                           tablat	equ	0xFF5
  5937                           prodh	equ	0xFF4
  5938                           prodl	equ	0xFF3
  5939                           intcon	equ	0xFF2
  5940                           postinc0	equ	0xFEE
  5941                           wreg	equ	0xFE8
  5942                           indf1	equ	0xFE7
  5943                           postdec1	equ	0xFE5
  5944                           fsr1h	equ	0xFE2
  5945                           fsr1l	equ	0xFE1
  5946                           indf2	equ	0xFDF
  5947                           postinc2	equ	0xFDE
  5948                           fsr2h	equ	0xFDA
  5949                           fsr2l	equ	0xFD9
  5950                           status	equ	0xFD8
  5951                           
  5952 ;; *************** function _strtol *****************
  5953 ;; Defined at:
  5954 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strtol.c"
  5955 ;; Parameters:    Size  Location     Type
  5956 ;;  s               2   35[COMRAM] PTR const unsigned char 
  5957 ;;		 -> GetIntFromUartData@dataRegArr(9), 
  5958 ;;  endptr          2   37[COMRAM] PTR PTR unsigned char 
  5959 ;;		 -> NULL(0), 
  5960 ;;  base            2   39[COMRAM] int 
  5961 ;; Auto vars:     Size  Location     Type
  5962 ;;  a               4    1[BANK0 ] long 
  5963 ;;  c               1    5[BANK0 ] unsigned char 
  5964 ;;  sign            1    0[BANK0 ] unsigned char 
  5965 ;; Return value:  Size  Location     Type
  5966 ;;                  4   35[COMRAM] long 
  5967 ;; Registers used:
  5968 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5969 ;; Tracked objects:
  5970 ;;		On entry : 0/0
  5971 ;;		On exit  : 0/0
  5972 ;;		Unchanged: 0/0
  5973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5974 ;;      Params:         6       0       0       0       0       0       0
  5975 ;;      Locals:         0       6       0       0       0       0       0
  5976 ;;      Temps:          4       0       0       0       0       0       0
  5977 ;;      Totals:        10       6       0       0       0       0       0
  5978 ;;Total ram usage:       16 bytes
  5979 ;; Hardware stack levels used:    1
  5980 ;; Hardware stack levels required when called:    5
  5981 ;; This function calls:
  5982 ;;		___lmul
  5983 ;;		_isalpha
  5984 ;;		_isdigit
  5985 ;;		_isspace
  5986 ;;		_toupper
  5987 ;; This function is called by:
  5988 ;;		_GetIntFromUartData
  5989 ;; This function uses a non-reentrant model
  5990 ;;
  5991                           
  5992                           	psect	text28
  5993  000E4C                     __ptext28:
  5994                           	opt stack 0
  5995  000E4C                     _strtol:
  5996                           	opt stack 21
  5997                           
  5998                           ;incstack = 0
  5999  000E4C  C024  FFD9         	movff	strtol@s,fsr2l
  6000  000E50  C025  FFDA         	movff	strtol@s+1,fsr2h
  6001  000E54  50DF               	movf	indf2,w,c
  6002  000E56  0100               	movlb	0	; () banked
  6003  000E58  6F65               	movwf	strtol@c& (0+255),b
  6004                           
  6005                           ; BSR set to: 0
  6006  000E5A  4A24               	infsnz	strtol@s,f,c
  6007  000E5C  2A25               	incf	strtol@s+1,f,c
  6008                           
  6009                           ; BSR set to: 0
  6010  000E5E  5165               	movf	strtol@c& (0+255),w,b
  6011  000E60  ECA5  F01A         	call	_isspace
  6012  000E64  B0D8               	btfsc	status,0,c
  6013  000E66  D7F2               	goto	_strtol
  6014  000E68  0E00               	movlw	0
  6015  000E6A  0100               	movlb	0	; () banked
  6016  000E6C  6F61               	movwf	strtol@a& (0+255),b
  6017  000E6E  0E00               	movlw	0
  6018  000E70  6F62               	movwf	(strtol@a+1)& (0+255),b
  6019  000E72  0E00               	movlw	0
  6020  000E74  6F63               	movwf	(strtol@a+2)& (0+255),b
  6021  000E76  0E00               	movlw	0
  6022  000E78  6F64               	movwf	(strtol@a+3)& (0+255),b
  6023  000E7A  0E00               	movlw	0
  6024  000E7C  6F60               	movwf	strtol@sign& (0+255),b
  6025                           
  6026                           ; BSR set to: 0
  6027  000E7E  0E2D               	movlw	45
  6028  000E80  1965               	xorwf	strtol@c& (0+255),w,b
  6029  000E82  A4D8               	btfss	status,2,c
  6030  000E84  D003               	goto	l2038
  6031                           
  6032                           ; BSR set to: 0
  6033  000E86  0E01               	movlw	1
  6034  000E88  6F60               	movwf	strtol@sign& (0+255),b
  6035  000E8A  D004               	goto	u6440
  6036  000E8C                     l2038:
  6037                           
  6038                           ; BSR set to: 0
  6039                           
  6040                           ; BSR set to: 0
  6041  000E8C  0E2B               	movlw	43
  6042  000E8E  1965               	xorwf	strtol@c& (0+255),w,b
  6043  000E90  A4D8               	btfss	status,2,c
  6044  000E92  D008               	goto	l2040
  6045  000E94                     u6440:
  6046                           
  6047                           ; BSR set to: 0
  6048  000E94  C024  FFD9         	movff	strtol@s,fsr2l
  6049  000E98  C025  FFDA         	movff	strtol@s+1,fsr2h
  6050  000E9C  50DF               	movf	indf2,w,c
  6051  000E9E  6F65               	movwf	strtol@c& (0+255),b
  6052                           
  6053                           ; BSR set to: 0
  6054  000EA0  4A24               	infsnz	strtol@s,f,c
  6055  000EA2  2A25               	incf	strtol@s+1,f,c
  6056  000EA4                     l2040:
  6057                           
  6058                           ; BSR set to: 0
  6059                           
  6060                           ; BSR set to: 0
  6061                           
  6062                           ; BSR set to: 0
  6063  000EA4  0E30               	movlw	48
  6064  000EA6  1965               	xorwf	strtol@c& (0+255),w,b
  6065  000EA8  A4D8               	btfss	status,2,c
  6066  000EAA  D02E               	goto	l2048
  6067                           
  6068                           ; BSR set to: 0
  6069  000EAC  C024  FFD9         	movff	strtol@s,fsr2l
  6070  000EB0  C025  FFDA         	movff	strtol@s+1,fsr2h
  6071  000EB4  50DF               	movf	indf2,w,c
  6072  000EB6  6F65               	movwf	strtol@c& (0+255),b
  6073                           
  6074                           ; BSR set to: 0
  6075  000EB8  4A24               	infsnz	strtol@s,f,c
  6076  000EBA  2A25               	incf	strtol@s+1,f,c
  6077                           
  6078                           ; BSR set to: 0
  6079  000EBC  5028               	movf	strtol@base,w,c
  6080  000EBE  1029               	iorwf	strtol@base+1,w,c
  6081  000EC0  B4D8               	btfsc	status,2,c
  6082  000EC2  D005               	goto	u6470
  6083                           
  6084                           ; BSR set to: 0
  6085  000EC4  0E10               	movlw	16
  6086  000EC6  1828               	xorwf	strtol@base,w,c
  6087  000EC8  1029               	iorwf	strtol@base+1,w,c
  6088  000ECA  A4D8               	btfss	status,2,c
  6089  000ECC  D015               	goto	l2042
  6090  000ECE                     u6470:
  6091                           
  6092                           ; BSR set to: 0
  6093                           
  6094                           ; BSR set to: 0
  6095  000ECE  0E78               	movlw	120
  6096  000ED0  1965               	xorwf	strtol@c& (0+255),w,b
  6097  000ED2  B4D8               	btfsc	status,2,c
  6098  000ED4  D004               	goto	u6490
  6099                           
  6100                           ; BSR set to: 0
  6101  000ED6  0E58               	movlw	88
  6102  000ED8  1965               	xorwf	strtol@c& (0+255),w,b
  6103  000EDA  A4D8               	btfss	status,2,c
  6104  000EDC  D00D               	goto	l2042
  6105  000EDE                     u6490:
  6106                           
  6107                           ; BSR set to: 0
  6108                           
  6109                           ; BSR set to: 0
  6110  000EDE  0E00               	movlw	0
  6111  000EE0  6E29               	movwf	strtol@base+1,c
  6112  000EE2  0E10               	movlw	16
  6113  000EE4  6E28               	movwf	strtol@base,c
  6114                           
  6115                           ; BSR set to: 0
  6116  000EE6  C024  FFD9         	movff	strtol@s,fsr2l
  6117  000EEA  C025  FFDA         	movff	strtol@s+1,fsr2h
  6118  000EEE  50DF               	movf	indf2,w,c
  6119  000EF0  6F65               	movwf	strtol@c& (0+255),b
  6120                           
  6121                           ; BSR set to: 0
  6122  000EF2  4A24               	infsnz	strtol@s,f,c
  6123  000EF4  2A25               	incf	strtol@s+1,f,c
  6124  000EF6  D008               	goto	l2048
  6125  000EF8                     l2042:
  6126                           
  6127                           ; BSR set to: 0
  6128                           
  6129                           ; BSR set to: 0
  6130  000EF8  5028               	movf	strtol@base,w,c
  6131  000EFA  1029               	iorwf	strtol@base+1,w,c
  6132  000EFC  A4D8               	btfss	status,2,c
  6133  000EFE  D004               	goto	l2048
  6134                           
  6135                           ; BSR set to: 0
  6136  000F00  0E00               	movlw	0
  6137  000F02  6E29               	movwf	strtol@base+1,c
  6138  000F04  0E08               	movlw	8
  6139  000F06  6E28               	movwf	strtol@base,c
  6140  000F08                     l2048:
  6141                           
  6142                           ; BSR set to: 0
  6143                           
  6144                           ; BSR set to: 0
  6145                           
  6146                           ; BSR set to: 0
  6147                           
  6148                           ; BSR set to: 0
  6149  000F08  5028               	movf	strtol@base,w,c
  6150  000F0A  1029               	iorwf	strtol@base+1,w,c
  6151  000F0C  A4D8               	btfss	status,2,c
  6152  000F0E  D004               	goto	l2049
  6153                           
  6154                           ; BSR set to: 0
  6155  000F10  0E00               	movlw	0
  6156  000F12  6E29               	movwf	strtol@base+1,c
  6157  000F14  0E0A               	movlw	10
  6158  000F16  6E28               	movwf	strtol@base,c
  6159  000F18                     l2049:
  6160                           
  6161                           ; BSR set to: 0
  6162                           
  6163                           ; BSR set to: 0
  6164                           
  6165                           ; BSR set to: 0
  6166  000F18  5165               	movf	strtol@c& (0+255),w,b
  6167  000F1A  EC91  F01A         	call	_isalpha
  6168  000F1E  A0D8               	btfss	status,0,c
  6169  000F20  D008               	goto	l2051
  6170  000F22  0100               	movlb	0	; () banked
  6171  000F24  5165               	movf	strtol@c& (0+255),w,b
  6172  000F26  EC8A  F01B         	call	_toupper
  6173  000F2A  0FC9               	addlw	201
  6174  000F2C  0100               	movlb	0	; () banked
  6175  000F2E  6F65               	movwf	strtol@c& (0+255),b
  6176  000F30  D009               	goto	l2054
  6177  000F32                     l2051:
  6178                           
  6179                           ; BSR set to: 0
  6180  000F32  0100               	movlb	0	; () banked
  6181  000F34  5165               	movf	strtol@c& (0+255),w,b
  6182  000F36  EC11  F01B         	call	_isdigit
  6183  000F3A  A0D8               	btfss	status,0,c
  6184  000F3C  D039               	goto	l2055
  6185  000F3E  0E30               	movlw	48
  6186  000F40  0100               	movlb	0	; () banked
  6187  000F42  5F65               	subwf	strtol@c& (0+255),f,b
  6188  000F44                     l2054:
  6189                           
  6190                           ; BSR set to: 0
  6191                           
  6192                           ; BSR set to: 0
  6193                           
  6194                           ; BSR set to: 0
  6195  000F44  5165               	movf	strtol@c& (0+255),w,b
  6196  000F46  6E2A               	movwf	??_strtol& (0+255),c
  6197  000F48  6A2B               	clrf	(??_strtol+1)& (0+255),c
  6198  000F4A  5028               	movf	strtol@base,w,c
  6199  000F4C  5C2A               	subwf	??_strtol,w,c
  6200  000F4E  502B               	movf	??_strtol+1,w,c
  6201  000F50  0A80               	xorlw	128
  6202  000F52  6E2C               	movwf	(??_strtol+2)& (0+255),c
  6203  000F54  5029               	movf	strtol@base+1,w,c
  6204  000F56  0A80               	xorlw	128
  6205  000F58  582C               	subwfb	(??_strtol+2)& (0+255),w,c
  6206  000F5A  B0D8               	btfsc	status,0,c
  6207  000F5C  D029               	goto	l2055
  6208                           
  6209                           ; BSR set to: 0
  6210                           
  6211                           ; BSR set to: 0
  6212                           
  6213                           ; BSR set to: 0
  6214  000F5E  C028  F018         	movff	strtol@base,___lmul@multiplier
  6215  000F62  C029  F019         	movff	strtol@base+1,___lmul@multiplier+1
  6216  000F66  0E00               	movlw	0
  6217  000F68  BE19               	btfsc	___lmul@multiplier+1,7,c
  6218  000F6A  0EFF               	movlw	-1
  6219  000F6C  6E1A               	movwf	___lmul@multiplier+2,c
  6220  000F6E  6E1B               	movwf	___lmul@multiplier+3,c
  6221  000F70  C061  F01C         	movff	strtol@a,___lmul@multiplicand
  6222  000F74  C062  F01D         	movff	strtol@a+1,___lmul@multiplicand+1
  6223  000F78  C063  F01E         	movff	strtol@a+2,___lmul@multiplicand+2
  6224  000F7C  C064  F01F         	movff	strtol@a+3,___lmul@multiplicand+3
  6225  000F80  EC4A  F016         	call	___lmul	;wreg free
  6226  000F84  0100               	movlb	0	; () banked
  6227  000F86  5165               	movf	strtol@c& (0+255),w,b
  6228  000F88  2418               	addwf	?___lmul,w,c
  6229  000F8A  6F61               	movwf	strtol@a& (0+255),b
  6230  000F8C  0E00               	movlw	0
  6231  000F8E  2019               	addwfc	?___lmul+1,w,c
  6232  000F90  6F62               	movwf	(strtol@a+1)& (0+255),b
  6233  000F92  0E00               	movlw	0
  6234  000F94  201A               	addwfc	?___lmul+2,w,c
  6235  000F96  6F63               	movwf	(strtol@a+2)& (0+255),b
  6236  000F98  0E00               	movlw	0
  6237  000F9A  201B               	addwfc	?___lmul+3,w,c
  6238  000F9C  6F64               	movwf	(strtol@a+3)& (0+255),b
  6239                           
  6240                           ; BSR set to: 0
  6241  000F9E  C024  FFD9         	movff	strtol@s,fsr2l
  6242  000FA2  C025  FFDA         	movff	strtol@s+1,fsr2h
  6243  000FA6  50DF               	movf	indf2,w,c
  6244  000FA8  6F65               	movwf	strtol@c& (0+255),b
  6245                           
  6246                           ; BSR set to: 0
  6247  000FAA  4A24               	infsnz	strtol@s,f,c
  6248  000FAC  2A25               	incf	strtol@s+1,f,c
  6249  000FAE  D7B4               	goto	l2049
  6250  000FB0                     l2055:
  6251                           
  6252                           ; BSR set to: 0
  6253  000FB0  5026               	movf	strtol@endptr,w,c
  6254  000FB2  1027               	iorwf	strtol@endptr+1,w,c
  6255  000FB4  B4D8               	btfsc	status,2,c
  6256  000FB6  D00E               	goto	l2057
  6257  000FB8  0EFF               	movlw	255
  6258  000FBA  2424               	addwf	strtol@s,w,c
  6259  000FBC  6E2A               	movwf	??_strtol& (0+255),c
  6260  000FBE  0EFF               	movlw	255
  6261  000FC0  2025               	addwfc	strtol@s+1,w,c
  6262  000FC2  6E2B               	movwf	(??_strtol+1)& (0+255),c
  6263  000FC4  C026  FFD9         	movff	strtol@endptr,fsr2l
  6264  000FC8  C027  FFDA         	movff	strtol@endptr+1,fsr2h
  6265  000FCC  C02A  FFDE         	movff	??_strtol,postinc2
  6266  000FD0  C02B  FFDD         	movff	??_strtol+1,postdec2
  6267  000FD4                     l2057:
  6268  000FD4  0100               	movlb	0	; () banked
  6269  000FD6  5160               	movf	strtol@sign& (0+255),w,b
  6270  000FD8  B4D8               	btfsc	status,2,c
  6271  000FDA  D01A               	goto	l2058
  6272                           
  6273                           ; BSR set to: 0
  6274  000FDC  C061  F02A         	movff	strtol@a,??_strtol
  6275  000FE0  C062  F02B         	movff	strtol@a+1,??_strtol+1
  6276  000FE4  C063  F02C         	movff	strtol@a+2,??_strtol+2
  6277  000FE8  C064  F02D         	movff	strtol@a+3,??_strtol+3
  6278  000FEC  1E2A               	comf	??_strtol,f,c
  6279  000FEE  1E2B               	comf	??_strtol+1,f,c
  6280  000FF0  1E2C               	comf	??_strtol+2,f,c
  6281  000FF2  1E2D               	comf	??_strtol+3,f,c
  6282  000FF4  2A2A               	incf	??_strtol,f,c
  6283  000FF6  0E00               	movlw	0
  6284  000FF8  222B               	addwfc	??_strtol+1,f,c
  6285  000FFA  222C               	addwfc	??_strtol+2,f,c
  6286  000FFC  222D               	addwfc	??_strtol+3,f,c
  6287  000FFE  C02A  F024         	movff	??_strtol,?_strtol
  6288  001002  C02B  F025         	movff	??_strtol+1,?_strtol+1
  6289  001006  C02C  F026         	movff	??_strtol+2,?_strtol+2
  6290  00100A  C02D  F027         	movff	??_strtol+3,?_strtol+3
  6291                           
  6292                           ; BSR set to: 0
  6293  00100E  0012               	return	
  6294  001010                     l2058:
  6295                           
  6296                           ; BSR set to: 0
  6297  001010  C061  F024         	movff	strtol@a,?_strtol
  6298  001014  C062  F025         	movff	strtol@a+1,?_strtol+1
  6299  001018  C063  F026         	movff	strtol@a+2,?_strtol+2
  6300  00101C  C064  F027         	movff	strtol@a+3,?_strtol+3
  6301                           
  6302                           ; BSR set to: 0
  6303  001020  0012               	return		;funcret
  6304  001022                     __end_of_strtol:
  6305                           	opt stack 0
  6306                           tosu	equ	0xFFF
  6307                           tosh	equ	0xFFE
  6308                           tosl	equ	0xFFD
  6309                           pclath	equ	0xFFA
  6310                           tblptru	equ	0xFF8
  6311                           tblptrh	equ	0xFF7
  6312                           tblptrl	equ	0xFF6
  6313                           tablat	equ	0xFF5
  6314                           prodh	equ	0xFF4
  6315                           prodl	equ	0xFF3
  6316                           intcon	equ	0xFF2
  6317                           postinc0	equ	0xFEE
  6318                           wreg	equ	0xFE8
  6319                           indf1	equ	0xFE7
  6320                           postdec1	equ	0xFE5
  6321                           fsr1h	equ	0xFE2
  6322                           fsr1l	equ	0xFE1
  6323                           indf2	equ	0xFDF
  6324                           postinc2	equ	0xFDE
  6325                           postdec2	equ	0xFDD
  6326                           fsr2h	equ	0xFDA
  6327                           fsr2l	equ	0xFD9
  6328                           status	equ	0xFD8
  6329                           
  6330 ;; *************** function _toupper *****************
  6331 ;; Defined at:
  6332 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\toupper.c"
  6333 ;; Parameters:    Size  Location     Type
  6334 ;;  c               1    wreg     unsigned char 
  6335 ;; Auto vars:     Size  Location     Type
  6336 ;;  c               1   23[COMRAM] unsigned char 
  6337 ;; Return value:  Size  Location     Type
  6338 ;;                  1    wreg      unsigned char 
  6339 ;; Registers used:
  6340 ;;		wreg, status,2, status,0
  6341 ;; Tracked objects:
  6342 ;;		On entry : 0/0
  6343 ;;		On exit  : 0/0
  6344 ;;		Unchanged: 0/0
  6345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6346 ;;      Params:         0       0       0       0       0       0       0
  6347 ;;      Locals:         1       0       0       0       0       0       0
  6348 ;;      Temps:          0       0       0       0       0       0       0
  6349 ;;      Totals:         1       0       0       0       0       0       0
  6350 ;;Total ram usage:        1 bytes
  6351 ;; Hardware stack levels used:    1
  6352 ;; Hardware stack levels required when called:    3
  6353 ;; This function calls:
  6354 ;;		Nothing
  6355 ;; This function is called by:
  6356 ;;		_strtol
  6357 ;; This function uses a non-reentrant model
  6358 ;;
  6359                           
  6360                           	psect	text29
  6361  003714                     __ptext29:
  6362                           	opt stack 0
  6363  003714                     _toupper:
  6364                           	opt stack 22
  6365                           
  6366                           ; BSR set to: 0
  6367                           ;incstack = 0
  6368                           ;toupper@c stored from wreg
  6369  003714  6E18               	movwf	toupper@c,c
  6370  003716  0E7B               	movlw	123
  6371  003718  6018               	cpfslt	toupper@c,c
  6372  00371A  D004               	goto	l2062
  6373  00371C  0E60               	movlw	96
  6374  00371E  6418               	cpfsgt	toupper@c,c
  6375  003720  D001               	goto	l2062
  6376  003722  9A18               	bcf	toupper@c,5,c
  6377  003724                     l2062:
  6378  003724  5018               	movf	toupper@c,w,c
  6379  003726  0012               	return	
  6380  003728                     __end_of_toupper:
  6381                           	opt stack 0
  6382                           tosu	equ	0xFFF
  6383                           tosh	equ	0xFFE
  6384                           tosl	equ	0xFFD
  6385                           pclath	equ	0xFFA
  6386                           tblptru	equ	0xFF8
  6387                           tblptrh	equ	0xFF7
  6388                           tblptrl	equ	0xFF6
  6389                           tablat	equ	0xFF5
  6390                           prodh	equ	0xFF4
  6391                           prodl	equ	0xFF3
  6392                           intcon	equ	0xFF2
  6393                           postinc0	equ	0xFEE
  6394                           wreg	equ	0xFE8
  6395                           indf1	equ	0xFE7
  6396                           postdec1	equ	0xFE5
  6397                           fsr1h	equ	0xFE2
  6398                           fsr1l	equ	0xFE1
  6399                           indf2	equ	0xFDF
  6400                           postinc2	equ	0xFDE
  6401                           postdec2	equ	0xFDD
  6402                           fsr2h	equ	0xFDA
  6403                           fsr2l	equ	0xFD9
  6404                           status	equ	0xFD8
  6405                           
  6406 ;; *************** function _isspace *****************
  6407 ;; Defined at:
  6408 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isspace.c"
  6409 ;; Parameters:    Size  Location     Type
  6410 ;;  c               1    wreg     unsigned char 
  6411 ;; Auto vars:     Size  Location     Type
  6412 ;;  c               1   25[COMRAM] unsigned char 
  6413 ;; Return value:  Size  Location     Type
  6414 ;;		None               void
  6415 ;; Registers used:
  6416 ;;		wreg, status,2, status,0
  6417 ;; Tracked objects:
  6418 ;;		On entry : 0/0
  6419 ;;		On exit  : 0/0
  6420 ;;		Unchanged: 0/0
  6421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6422 ;;      Params:         0       0       0       0       0       0       0
  6423 ;;      Locals:         2       0       0       0       0       0       0
  6424 ;;      Temps:          1       0       0       0       0       0       0
  6425 ;;      Totals:         3       0       0       0       0       0       0
  6426 ;;Total ram usage:        3 bytes
  6427 ;; Hardware stack levels used:    1
  6428 ;; Hardware stack levels required when called:    3
  6429 ;; This function calls:
  6430 ;;		Nothing
  6431 ;; This function is called by:
  6432 ;;		_strtol
  6433 ;; This function uses a non-reentrant model
  6434 ;;
  6435                           
  6436                           	psect	text30
  6437  00354A                     __ptext30:
  6438                           	opt stack 0
  6439  00354A                     _isspace:
  6440                           	opt stack 22
  6441                           
  6442                           ;incstack = 0
  6443                           ;isspace@c stored from wreg
  6444  00354A  6E1A               	movwf	isspace@c,c
  6445  00354C  0E01               	movlw	1
  6446  00354E  6E19               	movwf	_isspace$3007,c
  6447  003550  0E20               	movlw	32
  6448  003552  181A               	xorwf	isspace@c,w,c
  6449  003554  B4D8               	btfsc	status,2,c
  6450  003556  D008               	goto	l2144
  6451  003558  0E0E               	movlw	14
  6452  00355A  601A               	cpfslt	isspace@c,c
  6453  00355C  D003               	goto	u6230
  6454  00355E  0E09               	movlw	9
  6455  003560  601A               	cpfslt	isspace@c,c
  6456  003562  D002               	goto	l2144
  6457  003564                     u6230:
  6458  003564  0E00               	movlw	0
  6459  003566  6E19               	movwf	_isspace$3007,c
  6460  003568                     l2144:
  6461  003568  C019  F018         	movff	_isspace$3007,??_isspace
  6462  00356C  3018               	rrcf	??_isspace,w,c
  6463  00356E  0012               	return	
  6464  003570                     __end_of_isspace:
  6465                           	opt stack 0
  6466                           tosu	equ	0xFFF
  6467                           tosh	equ	0xFFE
  6468                           tosl	equ	0xFFD
  6469                           pclath	equ	0xFFA
  6470                           tblptru	equ	0xFF8
  6471                           tblptrh	equ	0xFF7
  6472                           tblptrl	equ	0xFF6
  6473                           tablat	equ	0xFF5
  6474                           prodh	equ	0xFF4
  6475                           prodl	equ	0xFF3
  6476                           intcon	equ	0xFF2
  6477                           postinc0	equ	0xFEE
  6478                           wreg	equ	0xFE8
  6479                           indf1	equ	0xFE7
  6480                           postdec1	equ	0xFE5
  6481                           fsr1h	equ	0xFE2
  6482                           fsr1l	equ	0xFE1
  6483                           indf2	equ	0xFDF
  6484                           postinc2	equ	0xFDE
  6485                           postdec2	equ	0xFDD
  6486                           fsr2h	equ	0xFDA
  6487                           fsr2l	equ	0xFD9
  6488                           status	equ	0xFD8
  6489                           
  6490 ;; *************** function _isdigit *****************
  6491 ;; Defined at:
  6492 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  6493 ;; Parameters:    Size  Location     Type
  6494 ;;  c               1    wreg     unsigned char 
  6495 ;; Auto vars:     Size  Location     Type
  6496 ;;  c               1   25[COMRAM] unsigned char 
  6497 ;; Return value:  Size  Location     Type
  6498 ;;		None               void
  6499 ;; Registers used:
  6500 ;;		wreg, status,2, status,0
  6501 ;; Tracked objects:
  6502 ;;		On entry : 0/0
  6503 ;;		On exit  : 0/0
  6504 ;;		Unchanged: 0/0
  6505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6506 ;;      Params:         0       0       0       0       0       0       0
  6507 ;;      Locals:         2       0       0       0       0       0       0
  6508 ;;      Temps:          1       0       0       0       0       0       0
  6509 ;;      Totals:         3       0       0       0       0       0       0
  6510 ;;Total ram usage:        3 bytes
  6511 ;; Hardware stack levels used:    1
  6512 ;; Hardware stack levels required when called:    3
  6513 ;; This function calls:
  6514 ;;		Nothing
  6515 ;; This function is called by:
  6516 ;;		_strtol
  6517 ;; This function uses a non-reentrant model
  6518 ;;
  6519                           
  6520                           	psect	text31
  6521  003622                     __ptext31:
  6522                           	opt stack 0
  6523  003622                     _isdigit:
  6524                           	opt stack 22
  6525                           
  6526                           ;incstack = 0
  6527                           ;isdigit@c stored from wreg
  6528  003622  6E1A               	movwf	isdigit@c,c
  6529  003624  0E00               	movlw	0
  6530  003626  6E19               	movwf	_isdigit$3004,c
  6531  003628  0E3A               	movlw	58
  6532  00362A  601A               	cpfslt	isdigit@c,c
  6533  00362C  D005               	goto	l2139
  6534  00362E  0E2F               	movlw	47
  6535  003630  641A               	cpfsgt	isdigit@c,c
  6536  003632  D002               	goto	l2139
  6537  003634  0E01               	movlw	1
  6538  003636  6E19               	movwf	_isdigit$3004,c
  6539  003638                     l2139:
  6540  003638  C019  F018         	movff	_isdigit$3004,??_isdigit
  6541  00363C  3018               	rrcf	??_isdigit,w,c
  6542  00363E  0012               	return	
  6543  003640                     __end_of_isdigit:
  6544                           	opt stack 0
  6545                           tosu	equ	0xFFF
  6546                           tosh	equ	0xFFE
  6547                           tosl	equ	0xFFD
  6548                           pclath	equ	0xFFA
  6549                           tblptru	equ	0xFF8
  6550                           tblptrh	equ	0xFF7
  6551                           tblptrl	equ	0xFF6
  6552                           tablat	equ	0xFF5
  6553                           prodh	equ	0xFF4
  6554                           prodl	equ	0xFF3
  6555                           intcon	equ	0xFF2
  6556                           postinc0	equ	0xFEE
  6557                           wreg	equ	0xFE8
  6558                           indf1	equ	0xFE7
  6559                           postdec1	equ	0xFE5
  6560                           fsr1h	equ	0xFE2
  6561                           fsr1l	equ	0xFE1
  6562                           indf2	equ	0xFDF
  6563                           postinc2	equ	0xFDE
  6564                           postdec2	equ	0xFDD
  6565                           fsr2h	equ	0xFDA
  6566                           fsr2l	equ	0xFD9
  6567                           status	equ	0xFD8
  6568                           
  6569 ;; *************** function _isalpha *****************
  6570 ;; Defined at:
  6571 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isalpha.c"
  6572 ;; Parameters:    Size  Location     Type
  6573 ;;  c               1    wreg     unsigned char 
  6574 ;; Auto vars:     Size  Location     Type
  6575 ;;  c               1   28[COMRAM] unsigned char 
  6576 ;; Return value:  Size  Location     Type
  6577 ;;		None               void
  6578 ;; Registers used:
  6579 ;;		wreg, status,2, status,0, cstack
  6580 ;; Tracked objects:
  6581 ;;		On entry : 0/0
  6582 ;;		On exit  : 0/0
  6583 ;;		Unchanged: 0/0
  6584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6585 ;;      Params:         0       0       0       0       0       0       0
  6586 ;;      Locals:         2       0       0       0       0       0       0
  6587 ;;      Temps:          1       0       0       0       0       0       0
  6588 ;;      Totals:         3       0       0       0       0       0       0
  6589 ;;Total ram usage:        3 bytes
  6590 ;; Hardware stack levels used:    1
  6591 ;; Hardware stack levels required when called:    4
  6592 ;; This function calls:
  6593 ;;		_isupper
  6594 ;; This function is called by:
  6595 ;;		_strtol
  6596 ;; This function uses a non-reentrant model
  6597 ;;
  6598                           
  6599                           	psect	text32
  6600  003522                     __ptext32:
  6601                           	opt stack 0
  6602  003522                     _isalpha:
  6603                           	opt stack 21
  6604                           
  6605                           ;incstack = 0
  6606                           ;isalpha@c stored from wreg
  6607  003522  6E1D               	movwf	isalpha@c,c
  6608  003524  0E01               	movlw	1
  6609  003526  6E1C               	movwf	_isalpha$3001,c
  6610  003528  0E7B               	movlw	123
  6611  00352A  601D               	cpfslt	isalpha@c,c
  6612  00352C  D003               	goto	u6250
  6613  00352E  0E61               	movlw	97
  6614  003530  601D               	cpfslt	isalpha@c,c
  6615  003532  D007               	goto	l2134
  6616  003534                     u6250:
  6617  003534  501D               	movf	isalpha@c,w,c
  6618  003536  EC20  F01B         	call	_isupper
  6619  00353A  B0D8               	btfsc	status,0,c
  6620  00353C  D002               	goto	l2134
  6621  00353E  0E00               	movlw	0
  6622  003540  6E1C               	movwf	_isalpha$3001,c
  6623  003542                     l2134:
  6624  003542  C01C  F01B         	movff	_isalpha$3001,??_isalpha
  6625  003546  301B               	rrcf	??_isalpha,w,c
  6626  003548  0012               	return	
  6627  00354A                     __end_of_isalpha:
  6628                           	opt stack 0
  6629                           tosu	equ	0xFFF
  6630                           tosh	equ	0xFFE
  6631                           tosl	equ	0xFFD
  6632                           pclath	equ	0xFFA
  6633                           tblptru	equ	0xFF8
  6634                           tblptrh	equ	0xFF7
  6635                           tblptrl	equ	0xFF6
  6636                           tablat	equ	0xFF5
  6637                           prodh	equ	0xFF4
  6638                           prodl	equ	0xFF3
  6639                           intcon	equ	0xFF2
  6640                           postinc0	equ	0xFEE
  6641                           wreg	equ	0xFE8
  6642                           indf1	equ	0xFE7
  6643                           postdec1	equ	0xFE5
  6644                           fsr1h	equ	0xFE2
  6645                           fsr1l	equ	0xFE1
  6646                           indf2	equ	0xFDF
  6647                           postinc2	equ	0xFDE
  6648                           postdec2	equ	0xFDD
  6649                           fsr2h	equ	0xFDA
  6650                           fsr2l	equ	0xFD9
  6651                           status	equ	0xFD8
  6652                           
  6653 ;; *************** function _isupper *****************
  6654 ;; Defined at:
  6655 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isupper.c"
  6656 ;; Parameters:    Size  Location     Type
  6657 ;;  c               1    wreg     unsigned char 
  6658 ;; Auto vars:     Size  Location     Type
  6659 ;;  c               1   25[COMRAM] unsigned char 
  6660 ;; Return value:  Size  Location     Type
  6661 ;;		None               void
  6662 ;; Registers used:
  6663 ;;		wreg, status,2, status,0
  6664 ;; Tracked objects:
  6665 ;;		On entry : 0/0
  6666 ;;		On exit  : 0/0
  6667 ;;		Unchanged: 0/0
  6668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6669 ;;      Params:         0       0       0       0       0       0       0
  6670 ;;      Locals:         2       0       0       0       0       0       0
  6671 ;;      Temps:          1       0       0       0       0       0       0
  6672 ;;      Totals:         3       0       0       0       0       0       0
  6673 ;;Total ram usage:        3 bytes
  6674 ;; Hardware stack levels used:    1
  6675 ;; Hardware stack levels required when called:    3
  6676 ;; This function calls:
  6677 ;;		Nothing
  6678 ;; This function is called by:
  6679 ;;		_isalpha
  6680 ;; This function uses a non-reentrant model
  6681 ;;
  6682                           
  6683                           	psect	text33
  6684  003640                     __ptext33:
  6685                           	opt stack 0
  6686  003640                     _isupper:
  6687                           	opt stack 21
  6688                           
  6689                           ;incstack = 0
  6690                           ;isupper@c stored from wreg
  6691  003640  6E1A               	movwf	isupper@c,c
  6692  003642  0E00               	movlw	0
  6693  003644  6E19               	movwf	_isupper$3010,c
  6694  003646  0E5B               	movlw	91
  6695  003648  601A               	cpfslt	isupper@c,c
  6696  00364A  D005               	goto	l2149
  6697  00364C  0E40               	movlw	64
  6698  00364E  641A               	cpfsgt	isupper@c,c
  6699  003650  D002               	goto	l2149
  6700  003652  0E01               	movlw	1
  6701  003654  6E19               	movwf	_isupper$3010,c
  6702  003656                     l2149:
  6703  003656  C019  F018         	movff	_isupper$3010,??_isupper
  6704  00365A  3018               	rrcf	??_isupper,w,c
  6705  00365C  0012               	return	
  6706  00365E                     __end_of_isupper:
  6707                           	opt stack 0
  6708                           tosu	equ	0xFFF
  6709                           tosh	equ	0xFFE
  6710                           tosl	equ	0xFFD
  6711                           pclath	equ	0xFFA
  6712                           tblptru	equ	0xFF8
  6713                           tblptrh	equ	0xFF7
  6714                           tblptrl	equ	0xFF6
  6715                           tablat	equ	0xFF5
  6716                           prodh	equ	0xFF4
  6717                           prodl	equ	0xFF3
  6718                           intcon	equ	0xFF2
  6719                           postinc0	equ	0xFEE
  6720                           wreg	equ	0xFE8
  6721                           indf1	equ	0xFE7
  6722                           postdec1	equ	0xFE5
  6723                           fsr1h	equ	0xFE2
  6724                           fsr1l	equ	0xFE1
  6725                           indf2	equ	0xFDF
  6726                           postinc2	equ	0xFDE
  6727                           postdec2	equ	0xFDD
  6728                           fsr2h	equ	0xFDA
  6729                           fsr2l	equ	0xFD9
  6730                           status	equ	0xFD8
  6731                           
  6732 ;; *************** function ___lmul *****************
  6733 ;; Defined at:
  6734 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  6735 ;; Parameters:    Size  Location     Type
  6736 ;;  multiplier      4   23[COMRAM] unsigned long 
  6737 ;;  multiplicand    4   27[COMRAM] unsigned long 
  6738 ;; Auto vars:     Size  Location     Type
  6739 ;;  product         4   31[COMRAM] unsigned long 
  6740 ;; Return value:  Size  Location     Type
  6741 ;;                  4   23[COMRAM] unsigned long 
  6742 ;; Registers used:
  6743 ;;		wreg, status,2, status,0
  6744 ;; Tracked objects:
  6745 ;;		On entry : 0/0
  6746 ;;		On exit  : 0/0
  6747 ;;		Unchanged: 0/0
  6748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6749 ;;      Params:         8       0       0       0       0       0       0
  6750 ;;      Locals:         4       0       0       0       0       0       0
  6751 ;;      Temps:          0       0       0       0       0       0       0
  6752 ;;      Totals:        12       0       0       0       0       0       0
  6753 ;;Total ram usage:       12 bytes
  6754 ;; Hardware stack levels used:    1
  6755 ;; Hardware stack levels required when called:    3
  6756 ;; This function calls:
  6757 ;;		Nothing
  6758 ;; This function is called by:
  6759 ;;		_strtol
  6760 ;; This function uses a non-reentrant model
  6761 ;;
  6762                           
  6763                           	psect	text34
  6764  002C94                     __ptext34:
  6765                           	opt stack 0
  6766  002C94                     ___lmul:
  6767                           	opt stack 22
  6768                           
  6769                           ;incstack = 0
  6770  002C94  0E00               	movlw	0
  6771  002C96  6E20               	movwf	___lmul@product,c
  6772  002C98  0E00               	movlw	0
  6773  002C9A  6E21               	movwf	___lmul@product+1,c
  6774  002C9C  0E00               	movlw	0
  6775  002C9E  6E22               	movwf	___lmul@product+2,c
  6776  002CA0  0E00               	movlw	0
  6777  002CA2  6E23               	movwf	___lmul@product+3,c
  6778  002CA4  A018               	btfss	___lmul@multiplier,0,c
  6779  002CA6  D008               	goto	l1468
  6780  002CA8  501C               	movf	___lmul@multiplicand,w,c
  6781  002CAA  2620               	addwf	___lmul@product,f,c
  6782  002CAC  501D               	movf	___lmul@multiplicand+1,w,c
  6783  002CAE  2221               	addwfc	___lmul@product+1,f,c
  6784  002CB0  501E               	movf	___lmul@multiplicand+2,w,c
  6785  002CB2  2222               	addwfc	___lmul@product+2,f,c
  6786  002CB4  501F               	movf	___lmul@multiplicand+3,w,c
  6787  002CB6  2223               	addwfc	___lmul@product+3,f,c
  6788  002CB8                     l1468:
  6789  002CB8  90D8               	bcf	status,0,c
  6790  002CBA  361C               	rlcf	___lmul@multiplicand,f,c
  6791  002CBC  361D               	rlcf	___lmul@multiplicand+1,f,c
  6792  002CBE  361E               	rlcf	___lmul@multiplicand+2,f,c
  6793  002CC0  361F               	rlcf	___lmul@multiplicand+3,f,c
  6794  002CC2  90D8               	bcf	status,0,c
  6795  002CC4  321B               	rrcf	___lmul@multiplier+3,f,c
  6796  002CC6  321A               	rrcf	___lmul@multiplier+2,f,c
  6797  002CC8  3219               	rrcf	___lmul@multiplier+1,f,c
  6798  002CCA  3218               	rrcf	___lmul@multiplier,f,c
  6799  002CCC  5018               	movf	___lmul@multiplier,w,c
  6800  002CCE  1019               	iorwf	___lmul@multiplier+1,w,c
  6801  002CD0  101A               	iorwf	___lmul@multiplier+2,w,c
  6802  002CD2  101B               	iorwf	___lmul@multiplier+3,w,c
  6803  002CD4  A4D8               	btfss	status,2,c
  6804  002CD6  D7E6               	goto	l1467
  6805  002CD8  C020  F018         	movff	___lmul@product,?___lmul
  6806  002CDC  C021  F019         	movff	___lmul@product+1,?___lmul+1
  6807  002CE0  C022  F01A         	movff	___lmul@product+2,?___lmul+2
  6808  002CE4  C023  F01B         	movff	___lmul@product+3,?___lmul+3
  6809  002CE8  0012               	return		;funcret
  6810  002CEA                     __end_of___lmul:
  6811                           	opt stack 0
  6812                           tosu	equ	0xFFF
  6813                           tosh	equ	0xFFE
  6814                           tosl	equ	0xFFD
  6815                           pclath	equ	0xFFA
  6816                           tblptru	equ	0xFF8
  6817                           tblptrh	equ	0xFF7
  6818                           tblptrl	equ	0xFF6
  6819                           tablat	equ	0xFF5
  6820                           prodh	equ	0xFF4
  6821                           prodl	equ	0xFF3
  6822                           intcon	equ	0xFF2
  6823                           postinc0	equ	0xFEE
  6824                           wreg	equ	0xFE8
  6825                           indf1	equ	0xFE7
  6826                           postdec1	equ	0xFE5
  6827                           fsr1h	equ	0xFE2
  6828                           fsr1l	equ	0xFE1
  6829                           indf2	equ	0xFDF
  6830                           postinc2	equ	0xFDE
  6831                           postdec2	equ	0xFDD
  6832                           fsr2h	equ	0xFDA
  6833                           fsr2l	equ	0xFD9
  6834                           status	equ	0xFD8
  6835                           
  6836 ;; *************** function _testLeds *****************
  6837 ;; Defined at:
  6838 ;;		line 43 in file "LedsApp.c"
  6839 ;; Parameters:    Size  Location     Type
  6840 ;;		None
  6841 ;; Auto vars:     Size  Location     Type
  6842 ;;  idx             2   44[COMRAM] int 
  6843 ;; Return value:  Size  Location     Type
  6844 ;;                  1    wreg      void 
  6845 ;; Registers used:
  6846 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6847 ;; Tracked objects:
  6848 ;;		On entry : 0/0
  6849 ;;		On exit  : 0/0
  6850 ;;		Unchanged: 0/0
  6851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6852 ;;      Params:         0       0       0       0       0       0       0
  6853 ;;      Locals:         2       0       0       0       0       0       0
  6854 ;;      Temps:          1       0       0       0       0       0       0
  6855 ;;      Totals:         3       0       0       0       0       0       0
  6856 ;;Total ram usage:        3 bytes
  6857 ;; Hardware stack levels used:    1
  6858 ;; Hardware stack levels required when called:    6
  6859 ;; This function calls:
  6860 ;;		_SendAckMessage
  6861 ;; This function is called by:
  6862 ;;		_GroupControlMcu
  6863 ;; This function uses a non-reentrant model
  6864 ;;
  6865                           
  6866                           	psect	text35
  6867  00287E                     __ptext35:
  6868                           	opt stack 0
  6869  00287E                     _testLeds:
  6870                           	opt stack 22
  6871                           
  6872                           ;LedsApp.c: 46: for(int idx = 0; idx < 10; idx++)
  6873                           
  6874                           ;incstack = 0
  6875  00287E  0E00               	movlw	0
  6876  002880  6E2E               	movwf	testLeds@idx+1,c
  6877  002882  0E00               	movlw	0
  6878  002884  6E2D               	movwf	testLeds@idx,c
  6879  002886                     l7278:
  6880  002886  BE2E               	btfsc	testLeds@idx+1,7,c
  6881  002888  D006               	goto	l54
  6882  00288A  502E               	movf	testLeds@idx+1,w,c
  6883  00288C  E127               	bnz	l7292
  6884  00288E  0E0A               	movlw	10
  6885  002890  5C2D               	subwf	testLeds@idx,w,c
  6886  002892  B0D8               	btfsc	status,0,c
  6887  002894  D023               	goto	u7150
  6888  002896                     l54:
  6889                           
  6890                           ;LedsApp.c: 47: {
  6891                           ;LedsApp.c: 49: LATCbits.LATC0 = 1;
  6892  002896  808B               	bsf	3979,0,c	;volatile
  6893                           
  6894                           ;LedsApp.c: 50: _delay((unsigned long)((50)*(8000000/4000.0)));
  6895  002898  0E82               	movlw	130
  6896  00289A  6E2C               	movwf	??_testLeds& (0+255),c
  6897  00289C  0EDE               	movlw	222
  6898  00289E                     u8177:
  6899  00289E  2EE8               	decfsz	wreg,f,c
  6900  0028A0  D7FE               	bra	u8177
  6901  0028A2  2E2C               	decfsz	??_testLeds& (0+255),f,c
  6902  0028A4  D7FC               	bra	u8177
  6903                           
  6904                           ;LedsApp.c: 51: LATBbits.LATB4 = 1;
  6905  0028A6  888A               	bsf	3978,4,c	;volatile
  6906                           
  6907                           ;LedsApp.c: 52: _delay((unsigned long)((50)*(8000000/4000.0)));
  6908  0028A8  0E82               	movlw	130
  6909  0028AA  6E2C               	movwf	??_testLeds& (0+255),c
  6910  0028AC  0EDE               	movlw	222
  6911  0028AE                     u8187:
  6912  0028AE  2EE8               	decfsz	wreg,f,c
  6913  0028B0  D7FE               	bra	u8187
  6914  0028B2  2E2C               	decfsz	??_testLeds& (0+255),f,c
  6915  0028B4  D7FC               	bra	u8187
  6916                           
  6917                           ;LedsApp.c: 53: LATCbits.LATC0 = 0;
  6918  0028B6  908B               	bcf	3979,0,c	;volatile
  6919                           
  6920                           ;LedsApp.c: 54: _delay((unsigned long)((50)*(8000000/4000.0)));
  6921  0028B8  0E82               	movlw	130
  6922  0028BA  6E2C               	movwf	??_testLeds& (0+255),c
  6923  0028BC  0EDE               	movlw	222
  6924  0028BE                     u8197:
  6925  0028BE  2EE8               	decfsz	wreg,f,c
  6926  0028C0  D7FE               	bra	u8197
  6927  0028C2  2E2C               	decfsz	??_testLeds& (0+255),f,c
  6928  0028C4  D7FC               	bra	u8197
  6929                           
  6930                           ;LedsApp.c: 55: LATBbits.LATB4 = 0;
  6931  0028C6  988A               	bcf	3978,4,c	;volatile
  6932                           
  6933                           ;LedsApp.c: 56: _delay((unsigned long)((50)*(8000000/4000.0)));
  6934  0028C8  0E82               	movlw	130
  6935  0028CA  6E2C               	movwf	??_testLeds& (0+255),c
  6936  0028CC  0EDE               	movlw	222
  6937  0028CE                     u8207:
  6938  0028CE  2EE8               	decfsz	wreg,f,c
  6939  0028D0  D7FE               	bra	u8207
  6940  0028D2  2E2C               	decfsz	??_testLeds& (0+255),f,c
  6941  0028D4  D7FC               	bra	u8207
  6942  0028D6  4A2D               	infsnz	testLeds@idx,f,c
  6943  0028D8  2A2E               	incf	testLeds@idx+1,f,c
  6944  0028DA  D7D5               	goto	l7278
  6945  0028DC                     u7150:
  6946  0028DC                     l7292:
  6947                           
  6948                           ;LedsApp.c: 57: }
  6949                           ;LedsApp.c: 59: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_TEST_LEDS);
  6950  0028DC  0E14               	movlw	20
  6951  0028DE  6E24               	movwf	SendAckMessage@inRequest,c
  6952  0028E0  0E01               	movlw	1
  6953  0028E2  EC1D  F017         	call	_SendAckMessage
  6954  0028E6  0012               	return	
  6955  0028E8                     __end_of_testLeds:
  6956                           	opt stack 0
  6957                           tosu	equ	0xFFF
  6958                           tosh	equ	0xFFE
  6959                           tosl	equ	0xFFD
  6960                           pclath	equ	0xFFA
  6961                           tblptru	equ	0xFF8
  6962                           tblptrh	equ	0xFF7
  6963                           tblptrl	equ	0xFF6
  6964                           tablat	equ	0xFF5
  6965                           prodh	equ	0xFF4
  6966                           prodl	equ	0xFF3
  6967                           intcon	equ	0xFF2
  6968                           postinc0	equ	0xFEE
  6969                           wreg	equ	0xFE8
  6970                           indf1	equ	0xFE7
  6971                           postdec1	equ	0xFE5
  6972                           fsr1h	equ	0xFE2
  6973                           fsr1l	equ	0xFE1
  6974                           indf2	equ	0xFDF
  6975                           postinc2	equ	0xFDE
  6976                           postdec2	equ	0xFDD
  6977                           fsr2h	equ	0xFDA
  6978                           fsr2l	equ	0xFD9
  6979                           status	equ	0xFD8
  6980                           
  6981 ;; *************** function _ResetMcu *****************
  6982 ;; Defined at:
  6983 ;;		line 114 in file "SystemCommon.c"
  6984 ;; Parameters:    Size  Location     Type
  6985 ;;		None
  6986 ;; Auto vars:     Size  Location     Type
  6987 ;;		None
  6988 ;; Return value:  Size  Location     Type
  6989 ;;                  1    wreg      void 
  6990 ;; Registers used:
  6991 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6992 ;; Tracked objects:
  6993 ;;		On entry : 0/0
  6994 ;;		On exit  : 0/0
  6995 ;;		Unchanged: 0/0
  6996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6997 ;;      Params:         0       0       0       0       0       0       0
  6998 ;;      Locals:         0       0       0       0       0       0       0
  6999 ;;      Temps:          0       0       0       0       0       0       0
  7000 ;;      Totals:         0       0       0       0       0       0       0
  7001 ;;Total ram usage:        0 bytes
  7002 ;; Hardware stack levels used:    1
  7003 ;; Hardware stack levels required when called:    6
  7004 ;; This function calls:
  7005 ;;		_SendAckMessage
  7006 ;; This function is called by:
  7007 ;;		_GroupControlMcu
  7008 ;; This function uses a non-reentrant model
  7009 ;;
  7010                           
  7011                           	psect	text36
  7012  003790                     __ptext36:
  7013                           	opt stack 0
  7014  003790                     _ResetMcu:
  7015                           	opt stack 22
  7016                           
  7017                           ;SystemCommon.c: 117: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_RESET
      +                          _MCU);
  7018                           
  7019                           ;incstack = 0
  7020  003790  0E11               	movlw	17
  7021  003792  6E24               	movwf	SendAckMessage@inRequest,c
  7022  003794  0E01               	movlw	1
  7023  003796  EC1D  F017         	call	_SendAckMessage
  7024  00379A  00FF               	reset		;# 
  7025  00379C  0012               	return		;funcret
  7026  00379E                     __end_of_ResetMcu:
  7027                           	opt stack 0
  7028                           tosu	equ	0xFFF
  7029                           tosh	equ	0xFFE
  7030                           tosl	equ	0xFFD
  7031                           pclath	equ	0xFFA
  7032                           tblptru	equ	0xFF8
  7033                           tblptrh	equ	0xFF7
  7034                           tblptrl	equ	0xFF6
  7035                           tablat	equ	0xFF5
  7036                           prodh	equ	0xFF4
  7037                           prodl	equ	0xFF3
  7038                           intcon	equ	0xFF2
  7039                           postinc0	equ	0xFEE
  7040                           wreg	equ	0xFE8
  7041                           indf1	equ	0xFE7
  7042                           postdec1	equ	0xFE5
  7043                           fsr1h	equ	0xFE2
  7044                           fsr1l	equ	0xFE1
  7045                           indf2	equ	0xFDF
  7046                           postinc2	equ	0xFDE
  7047                           postdec2	equ	0xFDD
  7048                           fsr2h	equ	0xFDA
  7049                           fsr2l	equ	0xFD9
  7050                           status	equ	0xFD8
  7051                           
  7052 ;; *************** function _SetConversionResultFormat *****************
  7053 ;; Defined at:
  7054 ;;		line 38 in file "AdcApp.c"
  7055 ;; Parameters:    Size  Location     Type
  7056 ;;  data            2   43[COMRAM] PTR unsigned char 
  7057 ;; Auto vars:     Size  Location     Type
  7058 ;;		None
  7059 ;; Return value:  Size  Location     Type
  7060 ;;                  1    wreg      void 
  7061 ;; Registers used:
  7062 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7063 ;; Tracked objects:
  7064 ;;		On entry : 0/0
  7065 ;;		On exit  : 0/0
  7066 ;;		Unchanged: 0/0
  7067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7068 ;;      Params:         2       0       0       0       0       0       0
  7069 ;;      Locals:         0       0       0       0       0       0       0
  7070 ;;      Temps:          0       0       0       0       0       0       0
  7071 ;;      Totals:         2       0       0       0       0       0       0
  7072 ;;Total ram usage:        2 bytes
  7073 ;; Hardware stack levels used:    1
  7074 ;; Hardware stack levels required when called:    6
  7075 ;; This function calls:
  7076 ;;		_SendAckMessage
  7077 ;; This function is called by:
  7078 ;;		_GroupAdc
  7079 ;; This function uses a non-reentrant model
  7080 ;;
  7081                           
  7082                           	psect	text37
  7083  0037D4                     __ptext37:
  7084                           	opt stack 0
  7085  0037D4                     _SetConversionResultFormat:
  7086                           	opt stack 22
  7087                           
  7088                           ;AdcApp.c: 40: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_CONVERSION_MODE);
  7089                           
  7090                           ;incstack = 0
  7091  0037D4  0E33               	movlw	51
  7092  0037D6  6E24               	movwf	SendAckMessage@inRequest,c
  7093  0037D8  0E03               	movlw	3
  7094  0037DA  EC1D  F017         	call	_SendAckMessage
  7095  0037DE  0012               	return		;funcret
  7096  0037E0                     __end_of_SetConversionResultFormat:
  7097                           	opt stack 0
  7098                           tosu	equ	0xFFF
  7099                           tosh	equ	0xFFE
  7100                           tosl	equ	0xFFD
  7101                           pclath	equ	0xFFA
  7102                           tblptru	equ	0xFF8
  7103                           tblptrh	equ	0xFF7
  7104                           tblptrl	equ	0xFF6
  7105                           tablat	equ	0xFF5
  7106                           prodh	equ	0xFF4
  7107                           prodl	equ	0xFF3
  7108                           intcon	equ	0xFF2
  7109                           postinc0	equ	0xFEE
  7110                           wreg	equ	0xFE8
  7111                           indf1	equ	0xFE7
  7112                           postdec1	equ	0xFE5
  7113                           fsr1h	equ	0xFE2
  7114                           fsr1l	equ	0xFE1
  7115                           indf2	equ	0xFDF
  7116                           postinc2	equ	0xFDE
  7117                           postdec2	equ	0xFDD
  7118                           fsr2h	equ	0xFDA
  7119                           fsr2l	equ	0xFD9
  7120                           status	equ	0xFD8
  7121                           
  7122 ;; *************** function _SetChannelMode *****************
  7123 ;; Defined at:
  7124 ;;		line 43 in file "AdcApp.c"
  7125 ;; Parameters:    Size  Location     Type
  7126 ;;  data            2   43[COMRAM] PTR unsigned char 
  7127 ;; Auto vars:     Size  Location     Type
  7128 ;;		None
  7129 ;; Return value:  Size  Location     Type
  7130 ;;                  1    wreg      void 
  7131 ;; Registers used:
  7132 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7133 ;; Tracked objects:
  7134 ;;		On entry : 0/0
  7135 ;;		On exit  : 0/0
  7136 ;;		Unchanged: 0/0
  7137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7138 ;;      Params:         2       0       0       0       0       0       0
  7139 ;;      Locals:         0       0       0       0       0       0       0
  7140 ;;      Temps:          0       0       0       0       0       0       0
  7141 ;;      Totals:         2       0       0       0       0       0       0
  7142 ;;Total ram usage:        2 bytes
  7143 ;; Hardware stack levels used:    1
  7144 ;; Hardware stack levels required when called:    6
  7145 ;; This function calls:
  7146 ;;		_SendAckMessage
  7147 ;; This function is called by:
  7148 ;;		_GroupAdc
  7149 ;; This function uses a non-reentrant model
  7150 ;;
  7151                           
  7152                           	psect	text38
  7153  003418                     __ptext38:
  7154                           	opt stack 0
  7155  003418                     _SetChannelMode:
  7156                           	opt stack 22
  7157                           
  7158                           ;AdcApp.c: 45: adcSampleMode = data[0];
  7159                           
  7160                           ;incstack = 0
  7161  003418  C02C  FFD9         	movff	SetChannelMode@data,fsr2l
  7162  00341C  C02D  FFDA         	movff	SetChannelMode@data+1,fsr2h
  7163  003420  50DF               	movf	indf2,w,c
  7164  003422  6E3C               	movwf	_adcSampleMode,c
  7165                           
  7166                           ;AdcApp.c: 46: if (adcSampleMode == SINGLE_CHANNEL)
  7167  003424  043C               	decf	_adcSampleMode,w,c
  7168  003426  A4D8               	btfss	status,2,c
  7169  003428  D009               	goto	l116
  7170                           
  7171                           ;AdcApp.c: 47: {
  7172                           ;AdcApp.c: 48: channel = data[1];
  7173  00342A  EE20 F001          	lfsr	2,1
  7174  00342E  502C               	movf	SetChannelMode@data,w,c
  7175  003430  26D9               	addwf	fsr2l,f,c
  7176  003432  502D               	movf	SetChannelMode@data+1,w,c
  7177  003434  22DA               	addwfc	fsr2h,f,c
  7178  003436  50DF               	movf	indf2,w,c
  7179  003438  0100               	movlb	0	; () banked
  7180  00343A  6FD4               	movwf	_channel& (0+255),b
  7181  00343C                     l116:
  7182                           
  7183                           ;AdcApp.c: 49: }
  7184                           ;AdcApp.c: 50: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_CHANNEL_MODE);
  7185                           
  7186                           ; BSR set to: 0
  7187  00343C  0E32               	movlw	50
  7188  00343E  6E24               	movwf	SendAckMessage@inRequest,c
  7189  003440  0E03               	movlw	3
  7190  003442  EC1D  F017         	call	_SendAckMessage
  7191  003446  0012               	return		;funcret
  7192  003448                     __end_of_SetChannelMode:
  7193                           	opt stack 0
  7194                           tosu	equ	0xFFF
  7195                           tosh	equ	0xFFE
  7196                           tosl	equ	0xFFD
  7197                           pclath	equ	0xFFA
  7198                           tblptru	equ	0xFF8
  7199                           tblptrh	equ	0xFF7
  7200                           tblptrl	equ	0xFF6
  7201                           tablat	equ	0xFF5
  7202                           prodh	equ	0xFF4
  7203                           prodl	equ	0xFF3
  7204                           intcon	equ	0xFF2
  7205                           postinc0	equ	0xFEE
  7206                           wreg	equ	0xFE8
  7207                           indf1	equ	0xFE7
  7208                           postdec1	equ	0xFE5
  7209                           fsr1h	equ	0xFE2
  7210                           fsr1l	equ	0xFE1
  7211                           indf2	equ	0xFDF
  7212                           postinc2	equ	0xFDE
  7213                           postdec2	equ	0xFDD
  7214                           fsr2h	equ	0xFDA
  7215                           fsr2l	equ	0xFD9
  7216                           status	equ	0xFD8
  7217                           
  7218 ;; *************** function _SetAdcOperationMode *****************
  7219 ;; Defined at:
  7220 ;;		line 33 in file "AdcApp.c"
  7221 ;; Parameters:    Size  Location     Type
  7222 ;;  data            2   43[COMRAM] PTR unsigned char 
  7223 ;; Auto vars:     Size  Location     Type
  7224 ;;		None
  7225 ;; Return value:  Size  Location     Type
  7226 ;;                  1    wreg      void 
  7227 ;; Registers used:
  7228 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7229 ;; Tracked objects:
  7230 ;;		On entry : 0/0
  7231 ;;		On exit  : 0/0
  7232 ;;		Unchanged: 0/0
  7233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7234 ;;      Params:         2       0       0       0       0       0       0
  7235 ;;      Locals:         0       0       0       0       0       0       0
  7236 ;;      Temps:          0       0       0       0       0       0       0
  7237 ;;      Totals:         2       0       0       0       0       0       0
  7238 ;;Total ram usage:        2 bytes
  7239 ;; Hardware stack levels used:    1
  7240 ;; Hardware stack levels required when called:    6
  7241 ;; This function calls:
  7242 ;;		_SendAckMessage
  7243 ;; This function is called by:
  7244 ;;		_GroupAdc
  7245 ;; This function uses a non-reentrant model
  7246 ;;
  7247                           
  7248                           	psect	text39
  7249  0037E0                     __ptext39:
  7250                           	opt stack 0
  7251  0037E0                     _SetAdcOperationMode:
  7252                           	opt stack 22
  7253                           
  7254                           ;AdcApp.c: 35: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_OPERATION);
  7255                           
  7256                           ;incstack = 0
  7257  0037E0  0E31               	movlw	49
  7258  0037E2  6E24               	movwf	SendAckMessage@inRequest,c
  7259  0037E4  0E03               	movlw	3
  7260  0037E6  EC1D  F017         	call	_SendAckMessage
  7261  0037EA  0012               	return		;funcret
  7262  0037EC                     __end_of_SetAdcOperationMode:
  7263                           	opt stack 0
  7264                           tosu	equ	0xFFF
  7265                           tosh	equ	0xFFE
  7266                           tosl	equ	0xFFD
  7267                           pclath	equ	0xFFA
  7268                           tblptru	equ	0xFF8
  7269                           tblptrh	equ	0xFF7
  7270                           tblptrl	equ	0xFF6
  7271                           tablat	equ	0xFF5
  7272                           prodh	equ	0xFF4
  7273                           prodl	equ	0xFF3
  7274                           intcon	equ	0xFF2
  7275                           postinc0	equ	0xFEE
  7276                           wreg	equ	0xFE8
  7277                           indf1	equ	0xFE7
  7278                           postdec1	equ	0xFE5
  7279                           fsr1h	equ	0xFE2
  7280                           fsr1l	equ	0xFE1
  7281                           indf2	equ	0xFDF
  7282                           postinc2	equ	0xFDE
  7283                           postdec2	equ	0xFDD
  7284                           fsr2h	equ	0xFDA
  7285                           fsr2l	equ	0xFD9
  7286                           status	equ	0xFD8
  7287                           
  7288 ;; *************** function _EUSART1_Read *****************
  7289 ;; Defined at:
  7290 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  7291 ;; Parameters:    Size  Location     Type
  7292 ;;		None
  7293 ;; Auto vars:     Size  Location     Type
  7294 ;;  readValue       2   24[COMRAM] unsigned int 
  7295 ;; Return value:  Size  Location     Type
  7296 ;;                  1    wreg      unsigned char 
  7297 ;; Registers used:
  7298 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7299 ;; Tracked objects:
  7300 ;;		On entry : 0/0
  7301 ;;		On exit  : 0/0
  7302 ;;		Unchanged: 0/0
  7303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7304 ;;      Params:         0       0       0       0       0       0       0
  7305 ;;      Locals:         2       0       0       0       0       0       0
  7306 ;;      Temps:          1       0       0       0       0       0       0
  7307 ;;      Totals:         3       0       0       0       0       0       0
  7308 ;;Total ram usage:        3 bytes
  7309 ;; Hardware stack levels used:    1
  7310 ;; Hardware stack levels required when called:    3
  7311 ;; This function calls:
  7312 ;;		Nothing
  7313 ;; This function is called by:
  7314 ;;		_readUartMessage
  7315 ;; This function uses a non-reentrant model
  7316 ;;
  7317                           
  7318                           	psect	text40
  7319  003046                     __ptext40:
  7320                           	opt stack 0
  7321  003046                     _EUSART1_Read:
  7322                           	opt stack 26
  7323                           
  7324                           ;eusart1.c: 112: uint16_t readValue = 0;
  7325                           
  7326                           ;incstack = 0
  7327  003046  0E00               	movlw	0
  7328  003048  6E1A               	movwf	EUSART1_Read@readValue+1,c
  7329  00304A  0E00               	movlw	0
  7330  00304C  6E19               	movwf	EUSART1_Read@readValue,c
  7331                           
  7332                           ;eusart1.c: 119: if (eusart1RxCount == 0)
  7333  00304E  0100               	movlb	0	; () banked
  7334  003050  51D3               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  7335  003052  A4D8               	btfss	status,2,c
  7336  003054  D002               	goto	l844
  7337                           
  7338                           ; BSR set to: 0
  7339                           ;eusart1.c: 120: {
  7340                           ;eusart1.c: 121: return readValue;
  7341  003056  5019               	movf	EUSART1_Read@readValue,w,c
  7342                           
  7343                           ; BSR set to: 0
  7344  003058  0012               	return	
  7345  00305A                     l844:
  7346                           
  7347                           ; BSR set to: 0
  7348                           ;eusart1.c: 122: }
  7349                           ;eusart1.c: 124: readValue = eusart1RxBuffer[eusart1RxTail++];
  7350                           
  7351                           ; BSR set to: 0
  7352  00305A  5036               	movf	_eusart1RxTail,w,c	;volatile
  7353  00305C  0D01               	mullw	1
  7354  00305E  0E46               	movlw	low _eusart1RxBuffer
  7355  003060  24F3               	addwf	prodl,w,c
  7356  003062  6ED9               	movwf	fsr2l,c
  7357  003064  0E01               	movlw	high _eusart1RxBuffer
  7358  003066  20F4               	addwfc	prodh,w,c
  7359  003068  6EDA               	movwf	fsr2h,c
  7360  00306A  50DF               	movf	indf2,w,c
  7361  00306C  6E18               	movwf	??_EUSART1_Read& (0+255),c
  7362  00306E  5018               	movf	??_EUSART1_Read,w,c
  7363  003070  6E19               	movwf	EUSART1_Read@readValue,c
  7364  003072  6A1A               	clrf	EUSART1_Read@readValue+1,c
  7365                           
  7366                           ; BSR set to: 0
  7367  003074  2A36               	incf	_eusart1RxTail,f,c	;volatile
  7368                           
  7369                           ; BSR set to: 0
  7370                           ;eusart1.c: 125: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
  7371  003076  0E27               	movlw	39
  7372  003078  6436               	cpfsgt	_eusart1RxTail,c	;volatile
  7373  00307A  D002               	goto	l846
  7374                           
  7375                           ; BSR set to: 0
  7376                           ;eusart1.c: 126: {
  7377                           ;eusart1.c: 127: eusart1RxTail = 0;
  7378  00307C  0E00               	movlw	0
  7379  00307E  6E36               	movwf	_eusart1RxTail,c	;volatile
  7380  003080                     l846:
  7381                           
  7382                           ; BSR set to: 0
  7383                           ;eusart1.c: 128: }
  7384                           ;eusart1.c: 129: PIE1bits.RC1IE = 0;
  7385                           
  7386                           ; BSR set to: 0
  7387  003080  9A9D               	bcf	3997,5,c	;volatile
  7388                           
  7389                           ; BSR set to: 0
  7390                           ;eusart1.c: 130: eusart1RxCount--;
  7391  003082  07D3               	decf	_eusart1RxCount& (0+255),f,b	;volatile
  7392                           
  7393                           ; BSR set to: 0
  7394                           ;eusart1.c: 131: PIE1bits.RC1IE = 1;
  7395  003084  8A9D               	bsf	3997,5,c	;volatile
  7396                           
  7397                           ; BSR set to: 0
  7398                           ;eusart1.c: 133: return readValue;
  7399  003086  5019               	movf	EUSART1_Read@readValue,w,c
  7400  003088  0012               	return	
  7401  00308A                     __end_of_EUSART1_Read:
  7402                           	opt stack 0
  7403                           tosu	equ	0xFFF
  7404                           tosh	equ	0xFFE
  7405                           tosl	equ	0xFFD
  7406                           pclath	equ	0xFFA
  7407                           tblptru	equ	0xFF8
  7408                           tblptrh	equ	0xFF7
  7409                           tblptrl	equ	0xFF6
  7410                           tablat	equ	0xFF5
  7411                           prodh	equ	0xFF4
  7412                           prodl	equ	0xFF3
  7413                           intcon	equ	0xFF2
  7414                           postinc0	equ	0xFEE
  7415                           wreg	equ	0xFE8
  7416                           indf1	equ	0xFE7
  7417                           postdec1	equ	0xFE5
  7418                           fsr1h	equ	0xFE2
  7419                           fsr1l	equ	0xFE1
  7420                           indf2	equ	0xFDF
  7421                           postinc2	equ	0xFDE
  7422                           postdec2	equ	0xFDD
  7423                           fsr2h	equ	0xFDA
  7424                           fsr2l	equ	0xFD9
  7425                           status	equ	0xFD8
  7426                           
  7427 ;; *************** function _keepAliveSignalUart *****************
  7428 ;; Defined at:
  7429 ;;		line 79 in file "SystemStatus.c"
  7430 ;; Parameters:    Size  Location     Type
  7431 ;;		None
  7432 ;; Auto vars:     Size  Location     Type
  7433 ;;		None
  7434 ;; Return value:  Size  Location     Type
  7435 ;;                  1    wreg      void 
  7436 ;; Registers used:
  7437 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7438 ;; Tracked objects:
  7439 ;;		On entry : 0/0
  7440 ;;		On exit  : 0/0
  7441 ;;		Unchanged: 0/0
  7442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7443 ;;      Params:         0       0       0       0       0       0       0
  7444 ;;      Locals:         0       0       0       0       0       0       0
  7445 ;;      Temps:          0       0       0       0       0       0       0
  7446 ;;      Totals:         0       0       0       0       0       0       0
  7447 ;;Total ram usage:        0 bytes
  7448 ;; Hardware stack levels used:    1
  7449 ;; Hardware stack levels required when called:    6
  7450 ;; This function calls:
  7451 ;;		_SendAckMessage
  7452 ;; This function is called by:
  7453 ;;		_main
  7454 ;; This function uses a non-reentrant model
  7455 ;;
  7456                           
  7457                           	psect	text41
  7458  0037EC                     __ptext41:
  7459                           	opt stack 0
  7460  0037EC                     _keepAliveSignalUart:
  7461                           	opt stack 24
  7462                           
  7463                           ;SystemStatus.c: 81: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_KEEP_A
      +                          LIVE);
  7464                           
  7465                           ; BSR set to: 0
  7466                           ;incstack = 0
  7467  0037EC  0E15               	movlw	21
  7468  0037EE  6E24               	movwf	SendAckMessage@inRequest,c
  7469  0037F0  0E01               	movlw	1
  7470  0037F2  EC1D  F017         	call	_SendAckMessage
  7471  0037F6  0012               	return		;funcret
  7472  0037F8                     __end_of_keepAliveSignalUart:
  7473                           	opt stack 0
  7474                           tosu	equ	0xFFF
  7475                           tosh	equ	0xFFE
  7476                           tosl	equ	0xFFD
  7477                           pclath	equ	0xFFA
  7478                           tblptru	equ	0xFF8
  7479                           tblptrh	equ	0xFF7
  7480                           tblptrl	equ	0xFF6
  7481                           tablat	equ	0xFF5
  7482                           prodh	equ	0xFF4
  7483                           prodl	equ	0xFF3
  7484                           intcon	equ	0xFF2
  7485                           postinc0	equ	0xFEE
  7486                           wreg	equ	0xFE8
  7487                           indf1	equ	0xFE7
  7488                           postdec1	equ	0xFE5
  7489                           fsr1h	equ	0xFE2
  7490                           fsr1l	equ	0xFE1
  7491                           indf2	equ	0xFDF
  7492                           postinc2	equ	0xFDE
  7493                           postdec2	equ	0xFDD
  7494                           fsr2h	equ	0xFDA
  7495                           fsr2l	equ	0xFD9
  7496                           status	equ	0xFD8
  7497                           
  7498 ;; *************** function _keepAliveSignalLed *****************
  7499 ;; Defined at:
  7500 ;;		line 35 in file "LedsApp.c"
  7501 ;; Parameters:    Size  Location     Type
  7502 ;;		None
  7503 ;; Auto vars:     Size  Location     Type
  7504 ;;		None
  7505 ;; Return value:  Size  Location     Type
  7506 ;;                  1    wreg      void 
  7507 ;; Registers used:
  7508 ;;		wreg, status,2, status,0
  7509 ;; Tracked objects:
  7510 ;;		On entry : 0/0
  7511 ;;		On exit  : 0/0
  7512 ;;		Unchanged: 0/0
  7513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7514 ;;      Params:         0       0       0       0       0       0       0
  7515 ;;      Locals:         0       0       0       0       0       0       0
  7516 ;;      Temps:          1       0       0       0       0       0       0
  7517 ;;      Totals:         1       0       0       0       0       0       0
  7518 ;;Total ram usage:        1 bytes
  7519 ;; Hardware stack levels used:    1
  7520 ;; Hardware stack levels required when called:    3
  7521 ;; This function calls:
  7522 ;;		Nothing
  7523 ;; This function is called by:
  7524 ;;		_main
  7525 ;; This function uses a non-reentrant model
  7526 ;;
  7527                           
  7528                           	psect	text42
  7529  0036D0                     __ptext42:
  7530                           	opt stack 0
  7531  0036D0                     _keepAliveSignalLed:
  7532                           	opt stack 27
  7533                           
  7534                           ;LedsApp.c: 37: LATCbits.LATC0 = !LATCbits.LATC0;
  7535                           
  7536                           ;incstack = 0
  7537  0036D0  B08B               	btfsc	3979,0,c	;volatile
  7538  0036D2  D003               	goto	u5240
  7539  0036D4  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  7540  0036D6  2A18               	incf	??_keepAliveSignalLed& (0+255),f,c
  7541  0036D8  D001               	goto	u5258
  7542  0036DA                     u5240:
  7543  0036DA  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  7544  0036DC                     u5258:
  7545  0036DC  508B               	movf	3979,w,c	;volatile
  7546  0036DE  1818               	xorwf	??_keepAliveSignalLed,w,c
  7547  0036E0  0BFE               	andlw	-2
  7548  0036E2  1818               	xorwf	??_keepAliveSignalLed,w,c
  7549  0036E4  6E8B               	movwf	3979,c	;volatile
  7550  0036E6  0012               	return		;funcret
  7551  0036E8                     __end_of_keepAliveSignalLed:
  7552                           	opt stack 0
  7553                           tosu	equ	0xFFF
  7554                           tosh	equ	0xFFE
  7555                           tosl	equ	0xFFD
  7556                           pclath	equ	0xFFA
  7557                           tblptru	equ	0xFF8
  7558                           tblptrh	equ	0xFF7
  7559                           tblptrl	equ	0xFF6
  7560                           tablat	equ	0xFF5
  7561                           prodh	equ	0xFF4
  7562                           prodl	equ	0xFF3
  7563                           intcon	equ	0xFF2
  7564                           postinc0	equ	0xFEE
  7565                           wreg	equ	0xFE8
  7566                           indf1	equ	0xFE7
  7567                           postdec1	equ	0xFE5
  7568                           fsr1h	equ	0xFE2
  7569                           fsr1l	equ	0xFE1
  7570                           indf2	equ	0xFDF
  7571                           postinc2	equ	0xFDE
  7572                           postdec2	equ	0xFDD
  7573                           fsr2h	equ	0xFDA
  7574                           fsr2l	equ	0xFD9
  7575                           status	equ	0xFD8
  7576                           
  7577 ;; *************** function _SetMcuSystem *****************
  7578 ;; Defined at:
  7579 ;;		line 11 in file "SystemSettings.c"
  7580 ;; Parameters:    Size  Location     Type
  7581 ;;		None
  7582 ;; Auto vars:     Size  Location     Type
  7583 ;;		None
  7584 ;; Return value:  Size  Location     Type
  7585 ;;                  1    wreg      void 
  7586 ;; Registers used:
  7587 ;;		wreg, status,2, status,0, cstack
  7588 ;; Tracked objects:
  7589 ;;		On entry : 0/0
  7590 ;;		On exit  : 0/0
  7591 ;;		Unchanged: 0/0
  7592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7593 ;;      Params:         0       0       0       0       0       0       0
  7594 ;;      Locals:         0       0       0       0       0       0       0
  7595 ;;      Temps:          0       0       0       0       0       0       0
  7596 ;;      Totals:         0       0       0       0       0       0       0
  7597 ;;Total ram usage:        0 bytes
  7598 ;; Hardware stack levels used:    1
  7599 ;; Hardware stack levels required when called:    6
  7600 ;; This function calls:
  7601 ;;		_SYSTEM_Initialize
  7602 ;; This function is called by:
  7603 ;;		_main
  7604 ;; This function uses a non-reentrant model
  7605 ;;
  7606                           
  7607                           	psect	text43
  7608  003804                     __ptext43:
  7609                           	opt stack 0
  7610  003804                     _SetMcuSystem:
  7611                           	opt stack 24
  7612                           
  7613                           ;SystemSettings.c: 14: SYSTEM_Initialize();
  7614                           
  7615                           ;incstack = 0
  7616  003804  EC5B  F01B         	call	_SYSTEM_Initialize	;wreg free
  7617                           
  7618                           ;SystemSettings.c: 21: (INTCONbits.GIE = 1);
  7619  003808  8EF2               	bsf	intcon,7,c	;volatile
  7620                           
  7621                           ;SystemSettings.c: 27: (INTCONbits.PEIE = 1);
  7622  00380A  8CF2               	bsf	intcon,6,c	;volatile
  7623  00380C  0012               	return		;funcret
  7624  00380E                     __end_of_SetMcuSystem:
  7625                           	opt stack 0
  7626                           tosu	equ	0xFFF
  7627                           tosh	equ	0xFFE
  7628                           tosl	equ	0xFFD
  7629                           pclath	equ	0xFFA
  7630                           tblptru	equ	0xFF8
  7631                           tblptrh	equ	0xFF7
  7632                           tblptrl	equ	0xFF6
  7633                           tablat	equ	0xFF5
  7634                           prodh	equ	0xFF4
  7635                           prodl	equ	0xFF3
  7636                           intcon	equ	0xFF2
  7637                           postinc0	equ	0xFEE
  7638                           wreg	equ	0xFE8
  7639                           indf1	equ	0xFE7
  7640                           postdec1	equ	0xFE5
  7641                           fsr1h	equ	0xFE2
  7642                           fsr1l	equ	0xFE1
  7643                           indf2	equ	0xFDF
  7644                           postinc2	equ	0xFDE
  7645                           postdec2	equ	0xFDD
  7646                           fsr2h	equ	0xFDA
  7647                           fsr2l	equ	0xFD9
  7648                           status	equ	0xFD8
  7649                           
  7650 ;; *************** function _SYSTEM_Initialize *****************
  7651 ;; Defined at:
  7652 ;;		line 112 in file "mcc_generated_files/mcc.c"
  7653 ;; Parameters:    Size  Location     Type
  7654 ;;		None
  7655 ;; Auto vars:     Size  Location     Type
  7656 ;;		None
  7657 ;; Return value:  Size  Location     Type
  7658 ;;                  1    wreg      void 
  7659 ;; Registers used:
  7660 ;;		wreg, status,2, status,0, cstack
  7661 ;; Tracked objects:
  7662 ;;		On entry : 0/0
  7663 ;;		On exit  : 0/0
  7664 ;;		Unchanged: 0/0
  7665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7666 ;;      Params:         0       0       0       0       0       0       0
  7667 ;;      Locals:         0       0       0       0       0       0       0
  7668 ;;      Temps:          0       0       0       0       0       0       0
  7669 ;;      Totals:         0       0       0       0       0       0       0
  7670 ;;Total ram usage:        0 bytes
  7671 ;; Hardware stack levels used:    1
  7672 ;; Hardware stack levels required when called:    5
  7673 ;; This function calls:
  7674 ;;		_ADC_Initialize
  7675 ;;		_EUSART1_Initialize
  7676 ;;		_INTERRUPT_Initialize
  7677 ;;		_OSCILLATOR_Initialize
  7678 ;;		_PIN_MANAGER_Initialize
  7679 ;;		_TMR0_Initialize
  7680 ;; This function is called by:
  7681 ;;		_SetMcuSystem
  7682 ;; This function uses a non-reentrant model
  7683 ;;
  7684                           
  7685                           	psect	text44
  7686  0036B6                     __ptext44:
  7687                           	opt stack 0
  7688  0036B6                     _SYSTEM_Initialize:
  7689                           	opt stack 24
  7690                           
  7691                           ;mcc.c: 114: INTERRUPT_Initialize();
  7692                           
  7693                           ;incstack = 0
  7694  0036B6  EC14  F01C         	call	_INTERRUPT_Initialize	;wreg free
  7695                           
  7696                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  7697  0036BA  ECDD  F017         	call	_PIN_MANAGER_Initialize	;wreg free
  7698                           
  7699                           ;mcc.c: 116: OSCILLATOR_Initialize();
  7700  0036BE  ECCF  F01B         	call	_OSCILLATOR_Initialize	;wreg free
  7701                           
  7702                           ;mcc.c: 117: ADC_Initialize();
  7703  0036C2  EC74  F01B         	call	_ADC_Initialize	;wreg free
  7704                           
  7705                           ;mcc.c: 118: TMR0_Initialize();
  7706  0036C6  ECA8  F019         	call	_TMR0_Initialize	;wreg free
  7707                           
  7708                           ;mcc.c: 119: EUSART1_Initialize();
  7709  0036CA  EC72  F019         	call	_EUSART1_Initialize	;wreg free
  7710  0036CE  0012               	return		;funcret
  7711  0036D0                     __end_of_SYSTEM_Initialize:
  7712                           	opt stack 0
  7713                           tosu	equ	0xFFF
  7714                           tosh	equ	0xFFE
  7715                           tosl	equ	0xFFD
  7716                           pclath	equ	0xFFA
  7717                           tblptru	equ	0xFF8
  7718                           tblptrh	equ	0xFF7
  7719                           tblptrl	equ	0xFF6
  7720                           tablat	equ	0xFF5
  7721                           prodh	equ	0xFF4
  7722                           prodl	equ	0xFF3
  7723                           intcon	equ	0xFF2
  7724                           postinc0	equ	0xFEE
  7725                           wreg	equ	0xFE8
  7726                           indf1	equ	0xFE7
  7727                           postdec1	equ	0xFE5
  7728                           fsr1h	equ	0xFE2
  7729                           fsr1l	equ	0xFE1
  7730                           indf2	equ	0xFDF
  7731                           postinc2	equ	0xFDE
  7732                           postdec2	equ	0xFDD
  7733                           fsr2h	equ	0xFDA
  7734                           fsr2l	equ	0xFD9
  7735                           status	equ	0xFD8
  7736                           
  7737 ;; *************** function _TMR0_Initialize *****************
  7738 ;; Defined at:
  7739 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  7740 ;; Parameters:    Size  Location     Type
  7741 ;;		None
  7742 ;; Auto vars:     Size  Location     Type
  7743 ;;		None
  7744 ;; Return value:  Size  Location     Type
  7745 ;;                  1    wreg      void 
  7746 ;; Registers used:
  7747 ;;		wreg, status,2, status,0, cstack
  7748 ;; Tracked objects:
  7749 ;;		On entry : 0/0
  7750 ;;		On exit  : 0/0
  7751 ;;		Unchanged: 0/0
  7752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7753 ;;      Params:         0       0       0       0       0       0       0
  7754 ;;      Locals:         0       0       0       0       0       0       0
  7755 ;;      Temps:          2       0       0       0       0       0       0
  7756 ;;      Totals:         2       0       0       0       0       0       0
  7757 ;;Total ram usage:        2 bytes
  7758 ;; Hardware stack levels used:    1
  7759 ;; Hardware stack levels required when called:    4
  7760 ;; This function calls:
  7761 ;;		_TMR0_SetInterruptHandler
  7762 ;; This function is called by:
  7763 ;;		_SYSTEM_Initialize
  7764 ;; This function uses a non-reentrant model
  7765 ;;
  7766                           
  7767                           	psect	text45
  7768  003350                     __ptext45:
  7769                           	opt stack 0
  7770  003350                     _TMR0_Initialize:
  7771                           	opt stack 24
  7772                           
  7773                           ;tmr0.c: 71: TMR0H = 0x3C;
  7774                           
  7775                           ;incstack = 0
  7776  003350  0E3C               	movlw	60
  7777  003352  6ED7               	movwf	4055,c	;volatile
  7778                           
  7779                           ;tmr0.c: 74: TMR0L = 0xAF;
  7780  003354  0EAF               	movlw	175
  7781  003356  6ED6               	movwf	4054,c	;volatile
  7782                           
  7783                           ;tmr0.c: 78: timer0ReloadVal = (TMR0H << 8) | TMR0L;
  7784  003358  50D6               	movf	4054,w,c	;volatile
  7785  00335A  CFD7 F01A          	movff	4055,??_TMR0_Initialize	;volatile
  7786  00335E  6A1B               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  7787  003360  C01A  F01B         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  7788  003364  6A1A               	clrf	??_TMR0_Initialize,c
  7789  003366  101A               	iorwf	??_TMR0_Initialize,w,c
  7790  003368  6E46               	movwf	_timer0ReloadVal,c	;volatile
  7791  00336A  501B               	movf	??_TMR0_Initialize+1,w,c
  7792  00336C  6E47               	movwf	_timer0ReloadVal+1,c	;volatile
  7793                           
  7794                           ;tmr0.c: 81: INTCONbits.TMR0IF = 0;
  7795  00336E  94F2               	bcf	intcon,2,c	;volatile
  7796                           
  7797                           ;tmr0.c: 84: INTCONbits.TMR0IE = 1;
  7798  003370  8AF2               	bsf	intcon,5,c	;volatile
  7799                           
  7800                           ;tmr0.c: 87: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  7801  003372  0E00               	movlw	0
  7802  003374  6E18               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  7803  003376  0E00               	movlw	0
  7804  003378  6E19               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  7805  00337A  EC07  F01C         	call	_TMR0_SetInterruptHandler	;wreg free
  7806                           
  7807                           ;tmr0.c: 90: T0CON = 0x90;
  7808  00337E  0E90               	movlw	144
  7809  003380  6ED5               	movwf	4053,c	;volatile
  7810  003382  0012               	return		;funcret
  7811  003384                     __end_of_TMR0_Initialize:
  7812                           	opt stack 0
  7813                           tosu	equ	0xFFF
  7814                           tosh	equ	0xFFE
  7815                           tosl	equ	0xFFD
  7816                           pclath	equ	0xFFA
  7817                           tblptru	equ	0xFF8
  7818                           tblptrh	equ	0xFF7
  7819                           tblptrl	equ	0xFF6
  7820                           tablat	equ	0xFF5
  7821                           prodh	equ	0xFF4
  7822                           prodl	equ	0xFF3
  7823                           intcon	equ	0xFF2
  7824                           postinc0	equ	0xFEE
  7825                           wreg	equ	0xFE8
  7826                           indf1	equ	0xFE7
  7827                           postdec1	equ	0xFE5
  7828                           fsr1h	equ	0xFE2
  7829                           fsr1l	equ	0xFE1
  7830                           indf2	equ	0xFDF
  7831                           postinc2	equ	0xFDE
  7832                           postdec2	equ	0xFDD
  7833                           fsr2h	equ	0xFDA
  7834                           fsr2l	equ	0xFD9
  7835                           status	equ	0xFD8
  7836                           
  7837 ;; *************** function _TMR0_SetInterruptHandler *****************
  7838 ;; Defined at:
  7839 ;;		line 177 in file "mcc_generated_files/tmr0.c"
  7840 ;; Parameters:    Size  Location     Type
  7841 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  7842 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  7843 ;; Auto vars:     Size  Location     Type
  7844 ;;		None
  7845 ;; Return value:  Size  Location     Type
  7846 ;;                  1    wreg      void 
  7847 ;; Registers used:
  7848 ;;		wreg, status,2, status,0
  7849 ;; Tracked objects:
  7850 ;;		On entry : 0/0
  7851 ;;		On exit  : 0/0
  7852 ;;		Unchanged: 0/0
  7853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7854 ;;      Params:         2       0       0       0       0       0       0
  7855 ;;      Locals:         0       0       0       0       0       0       0
  7856 ;;      Temps:          0       0       0       0       0       0       0
  7857 ;;      Totals:         2       0       0       0       0       0       0
  7858 ;;Total ram usage:        2 bytes
  7859 ;; Hardware stack levels used:    1
  7860 ;; Hardware stack levels required when called:    3
  7861 ;; This function calls:
  7862 ;;		Nothing
  7863 ;; This function is called by:
  7864 ;;		_TMR0_Initialize
  7865 ;; This function uses a non-reentrant model
  7866 ;;
  7867                           
  7868                           	psect	text46
  7869  00380E                     __ptext46:
  7870                           	opt stack 0
  7871  00380E                     _TMR0_SetInterruptHandler:
  7872                           	opt stack 24
  7873                           
  7874                           ;tmr0.c: 178: TMR0_InterruptHandler = InterruptHandler;
  7875                           
  7876                           ;incstack = 0
  7877  00380E  C018  F0FD         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  7878  003812  C019  F0FE         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  7879  003816  0012               	return		;funcret
  7880  003818                     __end_of_TMR0_SetInterruptHandler:
  7881                           	opt stack 0
  7882                           tosu	equ	0xFFF
  7883                           tosh	equ	0xFFE
  7884                           tosl	equ	0xFFD
  7885                           pclath	equ	0xFFA
  7886                           tblptru	equ	0xFF8
  7887                           tblptrh	equ	0xFF7
  7888                           tblptrl	equ	0xFF6
  7889                           tablat	equ	0xFF5
  7890                           prodh	equ	0xFF4
  7891                           prodl	equ	0xFF3
  7892                           intcon	equ	0xFF2
  7893                           postinc0	equ	0xFEE
  7894                           wreg	equ	0xFE8
  7895                           indf1	equ	0xFE7
  7896                           postdec1	equ	0xFE5
  7897                           fsr1h	equ	0xFE2
  7898                           fsr1l	equ	0xFE1
  7899                           indf2	equ	0xFDF
  7900                           postinc2	equ	0xFDE
  7901                           postdec2	equ	0xFDD
  7902                           fsr2h	equ	0xFDA
  7903                           fsr2l	equ	0xFD9
  7904                           status	equ	0xFD8
  7905                           
  7906 ;; *************** function _PIN_MANAGER_Initialize *****************
  7907 ;; Defined at:
  7908 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  7909 ;; Parameters:    Size  Location     Type
  7910 ;;		None
  7911 ;; Auto vars:     Size  Location     Type
  7912 ;;		None
  7913 ;; Return value:  Size  Location     Type
  7914 ;;                  1    wreg      void 
  7915 ;; Registers used:
  7916 ;;		wreg, status,2
  7917 ;; Tracked objects:
  7918 ;;		On entry : 0/0
  7919 ;;		On exit  : 0/0
  7920 ;;		Unchanged: 0/0
  7921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7922 ;;      Params:         0       0       0       0       0       0       0
  7923 ;;      Locals:         0       0       0       0       0       0       0
  7924 ;;      Temps:          0       0       0       0       0       0       0
  7925 ;;      Totals:         0       0       0       0       0       0       0
  7926 ;;Total ram usage:        0 bytes
  7927 ;; Hardware stack levels used:    1
  7928 ;; Hardware stack levels required when called:    3
  7929 ;; This function calls:
  7930 ;;		Nothing
  7931 ;; This function is called by:
  7932 ;;		_SYSTEM_Initialize
  7933 ;; This function uses a non-reentrant model
  7934 ;;
  7935                           
  7936                           	psect	text47
  7937  002FBA                     __ptext47:
  7938                           	opt stack 0
  7939  002FBA                     _PIN_MANAGER_Initialize:
  7940                           	opt stack 25
  7941                           
  7942                           ;pin_manager.c: 57: LATE = 0x00;
  7943                           
  7944                           ;incstack = 0
  7945  002FBA  0E00               	movlw	0
  7946  002FBC  6E8D               	movwf	3981,c	;volatile
  7947                           
  7948                           ;pin_manager.c: 58: LATD = 0x00;
  7949  002FBE  0E00               	movlw	0
  7950  002FC0  6E8C               	movwf	3980,c	;volatile
  7951                           
  7952                           ;pin_manager.c: 59: LATA = 0x06;
  7953  002FC2  0E06               	movlw	6
  7954  002FC4  6E89               	movwf	3977,c	;volatile
  7955                           
  7956                           ;pin_manager.c: 60: LATB = 0x00;
  7957  002FC6  0E00               	movlw	0
  7958  002FC8  6E8A               	movwf	3978,c	;volatile
  7959                           
  7960                           ;pin_manager.c: 61: LATC = 0x00;
  7961  002FCA  0E00               	movlw	0
  7962  002FCC  6E8B               	movwf	3979,c	;volatile
  7963                           
  7964                           ;pin_manager.c: 66: TRISE = 0x07;
  7965  002FCE  0E07               	movlw	7
  7966  002FD0  6E96               	movwf	3990,c	;volatile
  7967                           
  7968                           ;pin_manager.c: 67: TRISA = 0xE1;
  7969  002FD2  0EE1               	movlw	225
  7970  002FD4  6E92               	movwf	3986,c	;volatile
  7971                           
  7972                           ;pin_manager.c: 68: TRISB = 0xEF;
  7973  002FD6  0EEF               	movlw	239
  7974  002FD8  6E93               	movwf	3987,c	;volatile
  7975                           
  7976                           ;pin_manager.c: 69: TRISC = 0x80;
  7977  002FDA  0E80               	movlw	128
  7978  002FDC  6E94               	movwf	3988,c	;volatile
  7979                           
  7980                           ;pin_manager.c: 70: TRISD = 0xF2;
  7981  002FDE  0EF2               	movlw	242
  7982  002FE0  6E95               	movwf	3989,c	;volatile
  7983                           
  7984                           ;pin_manager.c: 75: ANSELC = 0x34;
  7985  002FE2  0E34               	movlw	52
  7986  002FE4  010F               	movlb	15	; () banked
  7987  002FE6  6F3A               	movwf	58,b	;volatile
  7988                           
  7989                           ;pin_manager.c: 76: ANSELB = 0x32;
  7990  002FE8  0E32               	movlw	50
  7991  002FEA  6F39               	movwf	57,b	;volatile
  7992                           
  7993                           ;pin_manager.c: 77: ANSELD = 0xE4;
  7994  002FEC  0EE4               	movlw	228
  7995  002FEE  6F3B               	movwf	59,b	;volatile
  7996                           
  7997                           ;pin_manager.c: 78: ANSELE = 0x07;
  7998  002FF0  0E07               	movlw	7
  7999  002FF2  6F3C               	movwf	60,b	;volatile
  8000                           
  8001                           ;pin_manager.c: 79: ANSELA = 0x2F;
  8002  002FF4  0E2F               	movlw	47
  8003  002FF6  6F38               	movwf	56,b	;volatile
  8004                           
  8005                           ;pin_manager.c: 84: WPUB = 0xC3;
  8006  002FF8  0EC3               	movlw	195
  8007  002FFA  6E61               	movwf	3937,c	;volatile
  8008                           
  8009                           ; BSR set to: 15
  8010                           ;pin_manager.c: 85: INTCON2bits.nRBPU = 0;
  8011  002FFC  9EF1               	bcf	intcon2,7,c	;volatile
  8012                           
  8013                           ; BSR set to: 15
  8014                           ;pin_manager.c: 92: INTCONbits.RBIE = 1;
  8015  002FFE  86F2               	bsf	intcon,3,c	;volatile
  8016                           
  8017                           ; BSR set to: 15
  8018  003000  0012               	return		;funcret
  8019  003002                     __end_of_PIN_MANAGER_Initialize:
  8020                           	opt stack 0
  8021                           tosu	equ	0xFFF
  8022                           tosh	equ	0xFFE
  8023                           tosl	equ	0xFFD
  8024                           pclath	equ	0xFFA
  8025                           tblptru	equ	0xFF8
  8026                           tblptrh	equ	0xFF7
  8027                           tblptrl	equ	0xFF6
  8028                           tablat	equ	0xFF5
  8029                           prodh	equ	0xFF4
  8030                           prodl	equ	0xFF3
  8031                           intcon	equ	0xFF2
  8032                           intcon2	equ	0xFF1
  8033                           postinc0	equ	0xFEE
  8034                           wreg	equ	0xFE8
  8035                           indf1	equ	0xFE7
  8036                           postdec1	equ	0xFE5
  8037                           fsr1h	equ	0xFE2
  8038                           fsr1l	equ	0xFE1
  8039                           indf2	equ	0xFDF
  8040                           postinc2	equ	0xFDE
  8041                           postdec2	equ	0xFDD
  8042                           fsr2h	equ	0xFDA
  8043                           fsr2l	equ	0xFD9
  8044                           status	equ	0xFD8
  8045                           
  8046 ;; *************** function _OSCILLATOR_Initialize *****************
  8047 ;; Defined at:
  8048 ;;		line 122 in file "mcc_generated_files/mcc.c"
  8049 ;; Parameters:    Size  Location     Type
  8050 ;;		None
  8051 ;; Auto vars:     Size  Location     Type
  8052 ;;		None
  8053 ;; Return value:  Size  Location     Type
  8054 ;;                  1    wreg      void 
  8055 ;; Registers used:
  8056 ;;		wreg, status,2
  8057 ;; Tracked objects:
  8058 ;;		On entry : 0/0
  8059 ;;		On exit  : 0/0
  8060 ;;		Unchanged: 0/0
  8061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8062 ;;      Params:         0       0       0       0       0       0       0
  8063 ;;      Locals:         0       0       0       0       0       0       0
  8064 ;;      Temps:          0       0       0       0       0       0       0
  8065 ;;      Totals:         0       0       0       0       0       0       0
  8066 ;;Total ram usage:        0 bytes
  8067 ;; Hardware stack levels used:    1
  8068 ;; Hardware stack levels required when called:    3
  8069 ;; This function calls:
  8070 ;;		Nothing
  8071 ;; This function is called by:
  8072 ;;		_SYSTEM_Initialize
  8073 ;; This function uses a non-reentrant model
  8074 ;;
  8075                           
  8076                           	psect	text48
  8077  00379E                     __ptext48:
  8078                           	opt stack 0
  8079  00379E                     _OSCILLATOR_Initialize:
  8080                           	opt stack 25
  8081                           
  8082                           ;mcc.c: 125: OSCCON = 0x60;
  8083                           
  8084                           ; BSR set to: 15
  8085                           ;incstack = 0
  8086  00379E  0E60               	movlw	96
  8087  0037A0  6ED3               	movwf	4051,c	;volatile
  8088                           
  8089                           ;mcc.c: 127: OSCCON2 = 0x04;
  8090  0037A2  0E04               	movlw	4
  8091  0037A4  6ED2               	movwf	4050,c	;volatile
  8092                           
  8093                           ;mcc.c: 129: OSCTUNE = 0x80;
  8094  0037A6  0E80               	movlw	128
  8095  0037A8  6E9B               	movwf	3995,c	;volatile
  8096  0037AA  0012               	return		;funcret
  8097  0037AC                     __end_of_OSCILLATOR_Initialize:
  8098                           	opt stack 0
  8099                           tosu	equ	0xFFF
  8100                           tosh	equ	0xFFE
  8101                           tosl	equ	0xFFD
  8102                           pclath	equ	0xFFA
  8103                           tblptru	equ	0xFF8
  8104                           tblptrh	equ	0xFF7
  8105                           tblptrl	equ	0xFF6
  8106                           tablat	equ	0xFF5
  8107                           prodh	equ	0xFF4
  8108                           prodl	equ	0xFF3
  8109                           intcon	equ	0xFF2
  8110                           intcon2	equ	0xFF1
  8111                           postinc0	equ	0xFEE
  8112                           wreg	equ	0xFE8
  8113                           indf1	equ	0xFE7
  8114                           postdec1	equ	0xFE5
  8115                           fsr1h	equ	0xFE2
  8116                           fsr1l	equ	0xFE1
  8117                           indf2	equ	0xFDF
  8118                           postinc2	equ	0xFDE
  8119                           postdec2	equ	0xFDD
  8120                           fsr2h	equ	0xFDA
  8121                           fsr2l	equ	0xFD9
  8122                           status	equ	0xFD8
  8123                           
  8124 ;; *************** function _INTERRUPT_Initialize *****************
  8125 ;; Defined at:
  8126 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  8127 ;; Parameters:    Size  Location     Type
  8128 ;;		None
  8129 ;; Auto vars:     Size  Location     Type
  8130 ;;		None
  8131 ;; Return value:  Size  Location     Type
  8132 ;;                  1    wreg      void 
  8133 ;; Registers used:
  8134 ;;		None
  8135 ;; Tracked objects:
  8136 ;;		On entry : 0/0
  8137 ;;		On exit  : 0/0
  8138 ;;		Unchanged: 0/0
  8139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8140 ;;      Params:         0       0       0       0       0       0       0
  8141 ;;      Locals:         0       0       0       0       0       0       0
  8142 ;;      Temps:          0       0       0       0       0       0       0
  8143 ;;      Totals:         0       0       0       0       0       0       0
  8144 ;;Total ram usage:        0 bytes
  8145 ;; Hardware stack levels used:    1
  8146 ;; Hardware stack levels required when called:    3
  8147 ;; This function calls:
  8148 ;;		Nothing
  8149 ;; This function is called by:
  8150 ;;		_SYSTEM_Initialize
  8151 ;; This function uses a non-reentrant model
  8152 ;;
  8153                           
  8154                           	psect	text49
  8155  003828                     __ptext49:
  8156                           	opt stack 0
  8157  003828                     _INTERRUPT_Initialize:
  8158                           	opt stack 25
  8159                           
  8160                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  8161                           
  8162                           ;incstack = 0
  8163  003828  9ED0               	bcf	4048,7,c	;volatile
  8164  00382A  0012               	return		;funcret
  8165  00382C                     __end_of_INTERRUPT_Initialize:
  8166                           	opt stack 0
  8167                           tosu	equ	0xFFF
  8168                           tosh	equ	0xFFE
  8169                           tosl	equ	0xFFD
  8170                           pclath	equ	0xFFA
  8171                           tblptru	equ	0xFF8
  8172                           tblptrh	equ	0xFF7
  8173                           tblptrl	equ	0xFF6
  8174                           tablat	equ	0xFF5
  8175                           prodh	equ	0xFF4
  8176                           prodl	equ	0xFF3
  8177                           intcon	equ	0xFF2
  8178                           intcon2	equ	0xFF1
  8179                           postinc0	equ	0xFEE
  8180                           wreg	equ	0xFE8
  8181                           indf1	equ	0xFE7
  8182                           postdec1	equ	0xFE5
  8183                           fsr1h	equ	0xFE2
  8184                           fsr1l	equ	0xFE1
  8185                           indf2	equ	0xFDF
  8186                           postinc2	equ	0xFDE
  8187                           postdec2	equ	0xFDD
  8188                           fsr2h	equ	0xFDA
  8189                           fsr2l	equ	0xFD9
  8190                           status	equ	0xFD8
  8191                           
  8192 ;; *************** function _EUSART1_Initialize *****************
  8193 ;; Defined at:
  8194 ;;		line 74 in file "mcc_generated_files/eusart1.c"
  8195 ;; Parameters:    Size  Location     Type
  8196 ;;		None
  8197 ;; Auto vars:     Size  Location     Type
  8198 ;;		None
  8199 ;; Return value:  Size  Location     Type
  8200 ;;                  1    wreg      void 
  8201 ;; Registers used:
  8202 ;;		wreg, status,2
  8203 ;; Tracked objects:
  8204 ;;		On entry : 0/0
  8205 ;;		On exit  : 0/0
  8206 ;;		Unchanged: 0/0
  8207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8208 ;;      Params:         0       0       0       0       0       0       0
  8209 ;;      Locals:         0       0       0       0       0       0       0
  8210 ;;      Temps:          0       0       0       0       0       0       0
  8211 ;;      Totals:         0       0       0       0       0       0       0
  8212 ;;Total ram usage:        0 bytes
  8213 ;; Hardware stack levels used:    1
  8214 ;; Hardware stack levels required when called:    3
  8215 ;; This function calls:
  8216 ;;		Nothing
  8217 ;; This function is called by:
  8218 ;;		_SYSTEM_Initialize
  8219 ;; This function uses a non-reentrant model
  8220 ;;
  8221                           
  8222                           	psect	text50
  8223  0032E4                     __ptext50:
  8224                           	opt stack 0
  8225  0032E4                     _EUSART1_Initialize:
  8226                           	opt stack 25
  8227                           
  8228                           ;eusart1.c: 77: PIE1bits.RC1IE = 0;
  8229                           
  8230                           ;incstack = 0
  8231  0032E4  9A9D               	bcf	3997,5,c	;volatile
  8232                           
  8233                           ;eusart1.c: 78: PIE1bits.TX1IE = 0;
  8234  0032E6  989D               	bcf	3997,4,c	;volatile
  8235                           
  8236                           ;eusart1.c: 82: BAUDCON1 = 0x08;
  8237  0032E8  0E08               	movlw	8
  8238  0032EA  6EB8               	movwf	4024,c	;volatile
  8239                           
  8240                           ;eusart1.c: 85: RCSTA1 = 0x90;
  8241  0032EC  0E90               	movlw	144
  8242  0032EE  6EAB               	movwf	4011,c	;volatile
  8243                           
  8244                           ;eusart1.c: 88: TXSTA1 = 0x24;
  8245  0032F0  0E24               	movlw	36
  8246  0032F2  6EAC               	movwf	4012,c	;volatile
  8247                           
  8248                           ;eusart1.c: 91: SPBRG1 = 0x10;
  8249  0032F4  0E10               	movlw	16
  8250  0032F6  6EAF               	movwf	4015,c	;volatile
  8251                           
  8252                           ;eusart1.c: 94: SPBRGH1 = 0x00;
  8253  0032F8  0E00               	movlw	0
  8254  0032FA  6EB0               	movwf	4016,c	;volatile
  8255                           
  8256                           ;eusart1.c: 98: eusart1TxHead = 0;
  8257  0032FC  0E00               	movlw	0
  8258  0032FE  6E39               	movwf	_eusart1TxHead,c	;volatile
  8259                           
  8260                           ;eusart1.c: 99: eusart1TxTail = 0;
  8261  003300  0E00               	movlw	0
  8262  003302  6E38               	movwf	_eusart1TxTail,c	;volatile
  8263                           
  8264                           ;eusart1.c: 100: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  8265  003304  0E46               	movlw	70
  8266  003306  0100               	movlb	0	; () banked
  8267  003308  6FFF               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
  8268                           
  8269                           ;eusart1.c: 102: eusart1RxHead = 0;
  8270  00330A  0E00               	movlw	0
  8271  00330C  6E37               	movwf	_eusart1RxHead,c	;volatile
  8272                           
  8273                           ;eusart1.c: 103: eusart1RxTail = 0;
  8274  00330E  0E00               	movlw	0
  8275  003310  6E36               	movwf	_eusart1RxTail,c	;volatile
  8276                           
  8277                           ;eusart1.c: 104: eusart1RxCount = 0;
  8278  003312  0E00               	movlw	0
  8279  003314  6FD3               	movwf	_eusart1RxCount& (0+255),b	;volatile
  8280                           
  8281                           ; BSR set to: 0
  8282                           ;eusart1.c: 107: PIE1bits.RC1IE = 1;
  8283  003316  8A9D               	bsf	3997,5,c	;volatile
  8284                           
  8285                           ; BSR set to: 0
  8286  003318  0012               	return		;funcret
  8287  00331A                     __end_of_EUSART1_Initialize:
  8288                           	opt stack 0
  8289                           tosu	equ	0xFFF
  8290                           tosh	equ	0xFFE
  8291                           tosl	equ	0xFFD
  8292                           pclath	equ	0xFFA
  8293                           tblptru	equ	0xFF8
  8294                           tblptrh	equ	0xFF7
  8295                           tblptrl	equ	0xFF6
  8296                           tablat	equ	0xFF5
  8297                           prodh	equ	0xFF4
  8298                           prodl	equ	0xFF3
  8299                           intcon	equ	0xFF2
  8300                           intcon2	equ	0xFF1
  8301                           postinc0	equ	0xFEE
  8302                           wreg	equ	0xFE8
  8303                           indf1	equ	0xFE7
  8304                           postdec1	equ	0xFE5
  8305                           fsr1h	equ	0xFE2
  8306                           fsr1l	equ	0xFE1
  8307                           indf2	equ	0xFDF
  8308                           postinc2	equ	0xFDE
  8309                           postdec2	equ	0xFDD
  8310                           fsr2h	equ	0xFDA
  8311                           fsr2l	equ	0xFD9
  8312                           status	equ	0xFD8
  8313                           
  8314 ;; *************** function _ADC_Initialize *****************
  8315 ;; Defined at:
  8316 ;;		line 58 in file "mcc_generated_files/adc.c"
  8317 ;; Parameters:    Size  Location     Type
  8318 ;;		None
  8319 ;; Auto vars:     Size  Location     Type
  8320 ;;		None
  8321 ;; Return value:  Size  Location     Type
  8322 ;;                  1    wreg      void 
  8323 ;; Registers used:
  8324 ;;		wreg, status,2
  8325 ;; Tracked objects:
  8326 ;;		On entry : 0/0
  8327 ;;		On exit  : 0/0
  8328 ;;		Unchanged: 0/0
  8329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8330 ;;      Params:         0       0       0       0       0       0       0
  8331 ;;      Locals:         0       0       0       0       0       0       0
  8332 ;;      Temps:          0       0       0       0       0       0       0
  8333 ;;      Totals:         0       0       0       0       0       0       0
  8334 ;;Total ram usage:        0 bytes
  8335 ;; Hardware stack levels used:    1
  8336 ;; Hardware stack levels required when called:    3
  8337 ;; This function calls:
  8338 ;;		Nothing
  8339 ;; This function is called by:
  8340 ;;		_SYSTEM_Initialize
  8341 ;; This function uses a non-reentrant model
  8342 ;;
  8343                           
  8344                           	psect	text51
  8345  0036E8                     __ptext51:
  8346                           	opt stack 0
  8347  0036E8                     _ADC_Initialize:
  8348                           	opt stack 25
  8349                           
  8350                           ;adc.c: 63: ADCON0 = 0x05;
  8351                           
  8352                           ; BSR set to: 0
  8353                           ;incstack = 0
  8354  0036E8  0E05               	movlw	5
  8355  0036EA  6EC2               	movwf	4034,c	;volatile
  8356                           
  8357                           ;adc.c: 66: ADCON1 = 0x00;
  8358  0036EC  0E00               	movlw	0
  8359  0036EE  6EC1               	movwf	4033,c	;volatile
  8360                           
  8361                           ;adc.c: 69: ADCON2 = 0x87;
  8362  0036F0  0E87               	movlw	135
  8363  0036F2  6EC0               	movwf	4032,c	;volatile
  8364                           
  8365                           ;adc.c: 72: ADRESL = 0x00;
  8366  0036F4  0E00               	movlw	0
  8367  0036F6  6EC3               	movwf	4035,c	;volatile
  8368                           
  8369                           ;adc.c: 75: ADRESH = 0x00;
  8370  0036F8  0E00               	movlw	0
  8371  0036FA  6EC4               	movwf	4036,c	;volatile
  8372  0036FC  0012               	return		;funcret
  8373  0036FE                     __end_of_ADC_Initialize:
  8374                           	opt stack 0
  8375                           tosu	equ	0xFFF
  8376                           tosh	equ	0xFFE
  8377                           tosl	equ	0xFFD
  8378                           pclath	equ	0xFFA
  8379                           tblptru	equ	0xFF8
  8380                           tblptrh	equ	0xFF7
  8381                           tblptrl	equ	0xFF6
  8382                           tablat	equ	0xFF5
  8383                           prodh	equ	0xFF4
  8384                           prodl	equ	0xFF3
  8385                           intcon	equ	0xFF2
  8386                           intcon2	equ	0xFF1
  8387                           postinc0	equ	0xFEE
  8388                           wreg	equ	0xFE8
  8389                           indf1	equ	0xFE7
  8390                           postdec1	equ	0xFE5
  8391                           fsr1h	equ	0xFE2
  8392                           fsr1l	equ	0xFE1
  8393                           indf2	equ	0xFDF
  8394                           postinc2	equ	0xFDE
  8395                           postdec2	equ	0xFDD
  8396                           fsr2h	equ	0xFDA
  8397                           fsr2l	equ	0xFD9
  8398                           status	equ	0xFD8
  8399                           
  8400 ;; *************** function _SetMcuRunTime *****************
  8401 ;; Defined at:
  8402 ;;		line 43 in file "SystemStatus.c"
  8403 ;; Parameters:    Size  Location     Type
  8404 ;;		None
  8405 ;; Auto vars:     Size  Location     Type
  8406 ;;		None
  8407 ;; Return value:  Size  Location     Type
  8408 ;;                  1    wreg      void 
  8409 ;; Registers used:
  8410 ;;		wreg, status,2, status,0, cstack
  8411 ;; Tracked objects:
  8412 ;;		On entry : 0/0
  8413 ;;		On exit  : 0/0
  8414 ;;		Unchanged: 0/0
  8415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8416 ;;      Params:         0       0       0       0       0       0       0
  8417 ;;      Locals:         0       0       0       0       0       0       0
  8418 ;;      Temps:          0       0       0       0       0       0       0
  8419 ;;      Totals:         0       0       0       0       0       0       0
  8420 ;;Total ram usage:        0 bytes
  8421 ;; Hardware stack levels used:    1
  8422 ;; Hardware stack levels required when called:    4
  8423 ;; This function calls:
  8424 ;;		___llmod
  8425 ;; This function is called by:
  8426 ;;		_main
  8427 ;; This function uses a non-reentrant model
  8428 ;;
  8429                           
  8430                           	psect	text52
  8431  00308A                     __ptext52:
  8432                           	opt stack 0
  8433  00308A                     _SetMcuRunTime:
  8434                           	opt stack 26
  8435                           
  8436                           ;SystemStatus.c: 45: mcuRunTimeIn5SecTicks++;
  8437                           
  8438                           ;incstack = 0
  8439  00308A  0E01               	movlw	1
  8440  00308C  0100               	movlb	0	; () banked
  8441  00308E  27C1               	addwf	_mcuRunTimeIn5SecTicks& (0+255),f,b
  8442  003090  0E00               	movlw	0
  8443  003092  23C2               	addwfc	(_mcuRunTimeIn5SecTicks+1)& (0+255),f,b
  8444  003094  23C3               	addwfc	(_mcuRunTimeIn5SecTicks+2)& (0+255),f,b
  8445  003096  23C4               	addwfc	(_mcuRunTimeIn5SecTicks+3)& (0+255),f,b
  8446                           
  8447                           ; BSR set to: 0
  8448                           ;SystemStatus.c: 46: mcuRunTimeIn5SecTicks %= (17280);
  8449  003098  C0C1  F018         	movff	_mcuRunTimeIn5SecTicks,___llmod@dividend
  8450  00309C  C0C2  F019         	movff	_mcuRunTimeIn5SecTicks+1,___llmod@dividend+1
  8451  0030A0  C0C3  F01A         	movff	_mcuRunTimeIn5SecTicks+2,___llmod@dividend+2
  8452  0030A4  C0C4  F01B         	movff	_mcuRunTimeIn5SecTicks+3,___llmod@dividend+3
  8453  0030A8  0E80               	movlw	128
  8454  0030AA  6E1C               	movwf	___llmod@divisor,c
  8455  0030AC  0E43               	movlw	67
  8456  0030AE  6E1D               	movwf	___llmod@divisor+1,c
  8457  0030B0  0E00               	movlw	0
  8458  0030B2  6E1E               	movwf	___llmod@divisor+2,c
  8459  0030B4  0E00               	movlw	0
  8460  0030B6  6E1F               	movwf	___llmod@divisor+3,c
  8461  0030B8  EC74  F014         	call	___llmod	;wreg free
  8462  0030BC  C018  F0C1         	movff	?___llmod,_mcuRunTimeIn5SecTicks
  8463  0030C0  C019  F0C2         	movff	?___llmod+1,_mcuRunTimeIn5SecTicks+1
  8464  0030C4  C01A  F0C3         	movff	?___llmod+2,_mcuRunTimeIn5SecTicks+2
  8465  0030C8  C01B  F0C4         	movff	?___llmod+3,_mcuRunTimeIn5SecTicks+3
  8466  0030CC  0012               	return		;funcret
  8467  0030CE                     __end_of_SetMcuRunTime:
  8468                           	opt stack 0
  8469                           tosu	equ	0xFFF
  8470                           tosh	equ	0xFFE
  8471                           tosl	equ	0xFFD
  8472                           pclath	equ	0xFFA
  8473                           tblptru	equ	0xFF8
  8474                           tblptrh	equ	0xFF7
  8475                           tblptrl	equ	0xFF6
  8476                           tablat	equ	0xFF5
  8477                           prodh	equ	0xFF4
  8478                           prodl	equ	0xFF3
  8479                           intcon	equ	0xFF2
  8480                           intcon2	equ	0xFF1
  8481                           postinc0	equ	0xFEE
  8482                           wreg	equ	0xFE8
  8483                           indf1	equ	0xFE7
  8484                           postdec1	equ	0xFE5
  8485                           fsr1h	equ	0xFE2
  8486                           fsr1l	equ	0xFE1
  8487                           indf2	equ	0xFDF
  8488                           postinc2	equ	0xFDE
  8489                           postdec2	equ	0xFDD
  8490                           fsr2h	equ	0xFDA
  8491                           fsr2l	equ	0xFD9
  8492                           status	equ	0xFD8
  8493                           
  8494 ;; *************** function ___llmod *****************
  8495 ;; Defined at:
  8496 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  8497 ;; Parameters:    Size  Location     Type
  8498 ;;  dividend        4   23[COMRAM] unsigned long 
  8499 ;;  divisor         4   27[COMRAM] unsigned long 
  8500 ;; Auto vars:     Size  Location     Type
  8501 ;;  counter         1   31[COMRAM] unsigned char 
  8502 ;; Return value:  Size  Location     Type
  8503 ;;                  4   23[COMRAM] unsigned long 
  8504 ;; Registers used:
  8505 ;;		wreg, status,2, status,0
  8506 ;; Tracked objects:
  8507 ;;		On entry : 0/0
  8508 ;;		On exit  : 0/0
  8509 ;;		Unchanged: 0/0
  8510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8511 ;;      Params:         8       0       0       0       0       0       0
  8512 ;;      Locals:         1       0       0       0       0       0       0
  8513 ;;      Temps:          0       0       0       0       0       0       0
  8514 ;;      Totals:         9       0       0       0       0       0       0
  8515 ;;Total ram usage:        9 bytes
  8516 ;; Hardware stack levels used:    1
  8517 ;; Hardware stack levels required when called:    3
  8518 ;; This function calls:
  8519 ;;		Nothing
  8520 ;; This function is called by:
  8521 ;;		_SetMcuRunTime
  8522 ;;		_GetMcuRunTime
  8523 ;; This function uses a non-reentrant model
  8524 ;;
  8525                           
  8526                           	psect	text53
  8527  0028E8                     __ptext53:
  8528                           	opt stack 0
  8529  0028E8                     ___llmod:
  8530                           	opt stack 24
  8531                           
  8532                           ;incstack = 0
  8533  0028E8  501C               	movf	___llmod@divisor,w,c
  8534  0028EA  101D               	iorwf	___llmod@divisor+1,w,c
  8535  0028EC  101E               	iorwf	___llmod@divisor+2,w,c
  8536  0028EE  101F               	iorwf	___llmod@divisor+3,w,c
  8537  0028F0  B4D8               	btfsc	status,2,c
  8538  0028F2  D024               	goto	l1825
  8539  0028F4  0E01               	movlw	1
  8540  0028F6  6E20               	movwf	___llmod@counter,c
  8541  0028F8  D006               	goto	l1820
  8542  0028FA  90D8               	bcf	status,0,c
  8543  0028FC  361C               	rlcf	___llmod@divisor,f,c
  8544  0028FE  361D               	rlcf	___llmod@divisor+1,f,c
  8545  002900  361E               	rlcf	___llmod@divisor+2,f,c
  8546  002902  361F               	rlcf	___llmod@divisor+3,f,c
  8547  002904  2A20               	incf	___llmod@counter,f,c
  8548  002906                     l1820:
  8549  002906  AE1F               	btfss	___llmod@divisor+3,7,c
  8550  002908  D7F8               	goto	l1821
  8551  00290A                     u7070:
  8552  00290A  501C               	movf	___llmod@divisor,w,c
  8553  00290C  5C18               	subwf	___llmod@dividend,w,c
  8554  00290E  501D               	movf	___llmod@divisor+1,w,c
  8555  002910  5819               	subwfb	___llmod@dividend+1,w,c
  8556  002912  501E               	movf	___llmod@divisor+2,w,c
  8557  002914  581A               	subwfb	___llmod@dividend+2,w,c
  8558  002916  501F               	movf	___llmod@divisor+3,w,c
  8559  002918  581B               	subwfb	___llmod@dividend+3,w,c
  8560  00291A  A0D8               	btfss	status,0,c
  8561  00291C  D008               	goto	l1824
  8562  00291E  501C               	movf	___llmod@divisor,w,c
  8563  002920  5E18               	subwf	___llmod@dividend,f,c
  8564  002922  501D               	movf	___llmod@divisor+1,w,c
  8565  002924  5A19               	subwfb	___llmod@dividend+1,f,c
  8566  002926  501E               	movf	___llmod@divisor+2,w,c
  8567  002928  5A1A               	subwfb	___llmod@dividend+2,f,c
  8568  00292A  501F               	movf	___llmod@divisor+3,w,c
  8569  00292C  5A1B               	subwfb	___llmod@dividend+3,f,c
  8570  00292E                     l1824:
  8571  00292E  90D8               	bcf	status,0,c
  8572  002930  321F               	rrcf	___llmod@divisor+3,f,c
  8573  002932  321E               	rrcf	___llmod@divisor+2,f,c
  8574  002934  321D               	rrcf	___llmod@divisor+1,f,c
  8575  002936  321C               	rrcf	___llmod@divisor,f,c
  8576  002938  2E20               	decfsz	___llmod@counter,f,c
  8577  00293A  D7E7               	goto	u7070
  8578  00293C                     l1825:
  8579  00293C  C018  F018         	movff	___llmod@dividend,?___llmod
  8580  002940  C019  F019         	movff	___llmod@dividend+1,?___llmod+1
  8581  002944  C01A  F01A         	movff	___llmod@dividend+2,?___llmod+2
  8582  002948  C01B  F01B         	movff	___llmod@dividend+3,?___llmod+3
  8583  00294C  0012               	return		;funcret
  8584  00294E                     __end_of___llmod:
  8585                           	opt stack 0
  8586                           tosu	equ	0xFFF
  8587                           tosh	equ	0xFFE
  8588                           tosl	equ	0xFFD
  8589                           pclath	equ	0xFFA
  8590                           tblptru	equ	0xFF8
  8591                           tblptrh	equ	0xFF7
  8592                           tblptrl	equ	0xFF6
  8593                           tablat	equ	0xFF5
  8594                           prodh	equ	0xFF4
  8595                           prodl	equ	0xFF3
  8596                           intcon	equ	0xFF2
  8597                           intcon2	equ	0xFF1
  8598                           postinc0	equ	0xFEE
  8599                           wreg	equ	0xFE8
  8600                           indf1	equ	0xFE7
  8601                           postdec1	equ	0xFE5
  8602                           fsr1h	equ	0xFE2
  8603                           fsr1l	equ	0xFE1
  8604                           indf2	equ	0xFDF
  8605                           postinc2	equ	0xFDE
  8606                           postdec2	equ	0xFDD
  8607                           fsr2h	equ	0xFDA
  8608                           fsr2l	equ	0xFD9
  8609                           status	equ	0xFD8
  8610                           
  8611 ;; *************** function _SendSystemStartAck *****************
  8612 ;; Defined at:
  8613 ;;		line 123 in file "SystemCommon.c"
  8614 ;; Parameters:    Size  Location     Type
  8615 ;;		None
  8616 ;; Auto vars:     Size  Location     Type
  8617 ;;		None
  8618 ;; Return value:  Size  Location     Type
  8619 ;;                  1    wreg      void 
  8620 ;; Registers used:
  8621 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8622 ;; Tracked objects:
  8623 ;;		On entry : 0/0
  8624 ;;		On exit  : 0/0
  8625 ;;		Unchanged: 0/0
  8626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8627 ;;      Params:         0       0       0       0       0       0       0
  8628 ;;      Locals:         0       0       0       0       0       0       0
  8629 ;;      Temps:          0       0       0       0       0       0       0
  8630 ;;      Totals:         0       0       0       0       0       0       0
  8631 ;;Total ram usage:        0 bytes
  8632 ;; Hardware stack levels used:    1
  8633 ;; Hardware stack levels required when called:    6
  8634 ;; This function calls:
  8635 ;;		_SendAckMessage
  8636 ;; This function is called by:
  8637 ;;		_main
  8638 ;; This function uses a non-reentrant model
  8639 ;;
  8640                           
  8641                           	psect	text54
  8642  0037F8                     __ptext54:
  8643                           	opt stack 0
  8644  0037F8                     _SendSystemStartAck:
  8645                           	opt stack 24
  8646                           
  8647                           ;SystemCommon.c: 125: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_SYSTE
      +                          M_START);
  8648                           
  8649                           ;incstack = 0
  8650  0037F8  0E10               	movlw	16
  8651  0037FA  6E24               	movwf	SendAckMessage@inRequest,c
  8652  0037FC  0E01               	movlw	1
  8653  0037FE  EC1D  F017         	call	_SendAckMessage
  8654  003802  0012               	return		;funcret
  8655  003804                     __end_of_SendSystemStartAck:
  8656                           	opt stack 0
  8657                           tosu	equ	0xFFF
  8658                           tosh	equ	0xFFE
  8659                           tosl	equ	0xFFD
  8660                           pclath	equ	0xFFA
  8661                           tblptru	equ	0xFF8
  8662                           tblptrh	equ	0xFF7
  8663                           tblptrl	equ	0xFF6
  8664                           tablat	equ	0xFF5
  8665                           prodh	equ	0xFF4
  8666                           prodl	equ	0xFF3
  8667                           intcon	equ	0xFF2
  8668                           intcon2	equ	0xFF1
  8669                           postinc0	equ	0xFEE
  8670                           wreg	equ	0xFE8
  8671                           indf1	equ	0xFE7
  8672                           postdec1	equ	0xFE5
  8673                           fsr1h	equ	0xFE2
  8674                           fsr1l	equ	0xFE1
  8675                           indf2	equ	0xFDF
  8676                           postinc2	equ	0xFDE
  8677                           postdec2	equ	0xFDD
  8678                           fsr2h	equ	0xFDA
  8679                           fsr2l	equ	0xFD9
  8680                           status	equ	0xFD8
  8681                           
  8682 ;; *************** function _SendAckMessage *****************
  8683 ;; Defined at:
  8684 ;;		line 171 in file "EusartApp.c"
  8685 ;; Parameters:    Size  Location     Type
  8686 ;;  inGroup         1    wreg     enum E7163
  8687 ;;  inRequest       1   35[COMRAM] enum E7171
  8688 ;; Auto vars:     Size  Location     Type
  8689 ;;  inGroup         1   36[COMRAM] enum E7163
  8690 ;;  TxMsg           6   37[COMRAM] unsigned char [6]
  8691 ;; Return value:  Size  Location     Type
  8692 ;;                  1    wreg      void 
  8693 ;; Registers used:
  8694 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8695 ;; Tracked objects:
  8696 ;;		On entry : 0/0
  8697 ;;		On exit  : 0/0
  8698 ;;		Unchanged: 0/0
  8699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8700 ;;      Params:         1       0       0       0       0       0       0
  8701 ;;      Locals:         7       0       0       0       0       0       0
  8702 ;;      Temps:          0       0       0       0       0       0       0
  8703 ;;      Totals:         8       0       0       0       0       0       0
  8704 ;;Total ram usage:        8 bytes
  8705 ;; Hardware stack levels used:    1
  8706 ;; Hardware stack levels required when called:    5
  8707 ;; This function calls:
  8708 ;;		_WriteUartMessage
  8709 ;;		_ZeroArray
  8710 ;;		_crc8
  8711 ;; This function is called by:
  8712 ;;		_testLeds
  8713 ;;		_SetAdcOperationMode
  8714 ;;		_SetConversionResultFormat
  8715 ;;		_SetChannelMode
  8716 ;;		_FlashReadUart
  8717 ;;		_FlashEreaseMem
  8718 ;;		_DacSetValue
  8719 ;;		_UpdateTxFreq
  8720 ;;		_UpdateRxFreq
  8721 ;;		_SetSynthTxOper
  8722 ;;		_SetSynthRxOper
  8723 ;;		_ResetMcu
  8724 ;;		_SendSystemStartAck
  8725 ;;		_keepAliveSignalUart
  8726 ;; This function uses a non-reentrant model
  8727 ;;
  8728                           
  8729                           	psect	text55
  8730  002E3A                     __ptext55:
  8731                           	opt stack 0
  8732  002E3A                     _SendAckMessage:
  8733                           	opt stack 22
  8734                           
  8735                           ;incstack = 0
  8736                           ;SendAckMessage@inGroup stored from wreg
  8737  002E3A  6E25               	movwf	SendAckMessage@inGroup,c
  8738                           
  8739                           ;EusartApp.c: 174: char TxMsg[(0x5) + 1];
  8740                           ;EusartApp.c: 175: ZeroArray(TxMsg, (0x5) + 1);
  8741  002E3C  0E26               	movlw	low SendAckMessage@TxMsg
  8742  002E3E  6E20               	movwf	ZeroArray@array,c
  8743  002E40  0E00               	movlw	high SendAckMessage@TxMsg
  8744  002E42  6E21               	movwf	ZeroArray@array+1,c
  8745  002E44  0E00               	movlw	0
  8746  002E46  6E23               	movwf	ZeroArray@size+1,c
  8747  002E48  0E06               	movlw	6
  8748  002E4A  6E22               	movwf	ZeroArray@size,c
  8749  002E4C  EC2F  F01B         	call	_ZeroArray	;wreg free
  8750                           
  8751                           ;EusartApp.c: 178: TxMsg[(0)] = (0x24);
  8752  002E50  0E24               	movlw	36
  8753  002E52  6E26               	movwf	SendAckMessage@TxMsg,c
  8754                           
  8755                           ;EusartApp.c: 179: TxMsg[(1)] = inGroup;
  8756  002E54  C025  F027         	movff	SendAckMessage@inGroup,SendAckMessage@TxMsg+1
  8757                           
  8758                           ;EusartApp.c: 180: TxMsg[(2)] = inRequest;
  8759  002E58  C024  F028         	movff	SendAckMessage@inRequest,SendAckMessage@TxMsg+2
  8760                           
  8761                           ;EusartApp.c: 181: TxMsg[(3)] = 0;
  8762  002E5C  0E00               	movlw	0
  8763  002E5E  6E29               	movwf	SendAckMessage@TxMsg+3,c
  8764                           
  8765                           ;EusartApp.c: 183: TxMsg[(0x5)] = crc8(TxMsg, (0x5));
  8766  002E60  0E26               	movlw	low SendAckMessage@TxMsg
  8767  002E62  6E18               	movwf	crc8@dataArray,c
  8768  002E64  0E00               	movlw	high SendAckMessage@TxMsg
  8769  002E66  6E19               	movwf	crc8@dataArray+1,c
  8770  002E68  0E00               	movlw	0
  8771  002E6A  6E1B               	movwf	crc8@dataSize+1,c
  8772  002E6C  0E05               	movlw	5
  8773  002E6E  6E1A               	movwf	crc8@dataSize,c
  8774  002E70  EC46  F017         	call	_crc8	;wreg free
  8775  002E74  6E2B               	movwf	SendAckMessage@TxMsg+5,c
  8776                           
  8777                           ;EusartApp.c: 185: WriteUartMessage(TxMsg, (0x5) + 1);
  8778  002E76  0E26               	movlw	low SendAckMessage@TxMsg
  8779  002E78  6E19               	movwf	WriteUartMessage@dataBuf,c
  8780  002E7A  0E00               	movlw	high SendAckMessage@TxMsg
  8781  002E7C  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  8782  002E7E  0E00               	movlw	0
  8783  002E80  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  8784  002E82  0E06               	movlw	6
  8785  002E84  6E1B               	movwf	WriteUartMessage@dataSize,c
  8786  002E86  EC8D  F019         	call	_WriteUartMessage	;wreg free
  8787  002E8A  0012               	return		;funcret
  8788  002E8C                     __end_of_SendAckMessage:
  8789                           	opt stack 0
  8790                           tosu	equ	0xFFF
  8791                           tosh	equ	0xFFE
  8792                           tosl	equ	0xFFD
  8793                           pclath	equ	0xFFA
  8794                           tblptru	equ	0xFF8
  8795                           tblptrh	equ	0xFF7
  8796                           tblptrl	equ	0xFF6
  8797                           tablat	equ	0xFF5
  8798                           prodh	equ	0xFF4
  8799                           prodl	equ	0xFF3
  8800                           intcon	equ	0xFF2
  8801                           intcon2	equ	0xFF1
  8802                           postinc0	equ	0xFEE
  8803                           wreg	equ	0xFE8
  8804                           indf1	equ	0xFE7
  8805                           postdec1	equ	0xFE5
  8806                           fsr1h	equ	0xFE2
  8807                           fsr1l	equ	0xFE1
  8808                           indf2	equ	0xFDF
  8809                           postinc2	equ	0xFDE
  8810                           postdec2	equ	0xFDD
  8811                           fsr2h	equ	0xFDA
  8812                           fsr2l	equ	0xFD9
  8813                           status	equ	0xFD8
  8814                           
  8815 ;; *************** function _crc8 *****************
  8816 ;; Defined at:
  8817 ;;		line 13 in file "SystemCommon.c"
  8818 ;; Parameters:    Size  Location     Type
  8819 ;;  dataArray       2   23[COMRAM] PTR unsigned char 
  8820 ;;		 -> GetMcuRunTime@TxMsg(9), GetMcuFwVersion@TxMsg(9), SynthReadData@TxMsg(27), FlashReadCondition@TxMsg(9), 
  8821 ;;		 -> FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), rxMsgQueue(20), 
  8822 ;;  dataSize        2   25[COMRAM] int 
  8823 ;; Auto vars:     Size  Location     Type
  8824 ;;  i               2   30[COMRAM] int 
  8825 ;;  crc             2   28[COMRAM] int 
  8826 ;; Return value:  Size  Location     Type
  8827 ;;                  1    wreg      unsigned char 
  8828 ;; Registers used:
  8829 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8830 ;; Tracked objects:
  8831 ;;		On entry : 0/0
  8832 ;;		On exit  : 0/0
  8833 ;;		Unchanged: 0/0
  8834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8835 ;;      Params:         4       0       0       0       0       0       0
  8836 ;;      Locals:         4       0       0       0       0       0       0
  8837 ;;      Temps:          1       0       0       0       0       0       0
  8838 ;;      Totals:         9       0       0       0       0       0       0
  8839 ;;Total ram usage:        9 bytes
  8840 ;; Hardware stack levels used:    1
  8841 ;; Hardware stack levels required when called:    3
  8842 ;; This function calls:
  8843 ;;		Nothing
  8844 ;; This function is called by:
  8845 ;;		_readUartMessage
  8846 ;;		_SendAckMessage
  8847 ;;		_FlashReadUart
  8848 ;;		_FlashReadCondition
  8849 ;;		_SynthReadData
  8850 ;;		_GetMcuFwVersion
  8851 ;;		_GetMcuRunTime
  8852 ;; This function uses a non-reentrant model
  8853 ;;
  8854                           
  8855                           	psect	text56
  8856  002E8C                     __ptext56:
  8857                           	opt stack 0
  8858  002E8C                     _crc8:
  8859                           	opt stack 26
  8860                           
  8861                           ;SystemCommon.c: 15: int crc = 0;
  8862                           
  8863                           ;incstack = 0
  8864  002E8C  0E00               	movlw	0
  8865  002E8E  6E1E               	movwf	crc8@crc+1,c
  8866  002E90  0E00               	movlw	0
  8867  002E92  6E1D               	movwf	crc8@crc,c
  8868                           
  8869                           ;SystemCommon.c: 16: for (int i = 0; i < dataSize; i++)
  8870  002E94  0E00               	movlw	0
  8871  002E96  6E20               	movwf	crc8@i+1,c
  8872  002E98  0E00               	movlw	0
  8873  002E9A  6E1F               	movwf	crc8@i,c
  8874  002E9C  D00E               	goto	l1283
  8875  002E9E                     
  8876                           ;SystemCommon.c: 17: {
  8877                           ;SystemCommon.c: 18: crc += dataArray[i];
  8878  002E9E  501F               	movf	crc8@i,w,c
  8879  002EA0  2418               	addwf	crc8@dataArray,w,c
  8880  002EA2  6ED9               	movwf	fsr2l,c
  8881  002EA4  5020               	movf	crc8@i+1,w,c
  8882  002EA6  2019               	addwfc	crc8@dataArray+1,w,c
  8883  002EA8  6EDA               	movwf	fsr2h,c
  8884  002EAA  50DF               	movf	indf2,w,c
  8885  002EAC  6E1C               	movwf	??_crc8& (0+255),c
  8886  002EAE  501C               	movf	??_crc8,w,c
  8887  002EB0  261D               	addwf	crc8@crc,f,c
  8888  002EB2  0E00               	movlw	0
  8889  002EB4  221E               	addwfc	crc8@crc+1,f,c
  8890  002EB6  4A1F               	infsnz	crc8@i,f,c
  8891  002EB8  2A20               	incf	crc8@i+1,f,c
  8892  002EBA                     l1283:
  8893  002EBA  501A               	movf	crc8@dataSize,w,c
  8894  002EBC  5C1F               	subwf	crc8@i,w,c
  8895  002EBE  5020               	movf	crc8@i+1,w,c
  8896  002EC0  0A80               	xorlw	128
  8897  002EC2  6E1C               	movwf	??_crc8& (0+255),c
  8898  002EC4  501B               	movf	crc8@dataSize+1,w,c
  8899  002EC6  0A80               	xorlw	128
  8900  002EC8  581C               	subwfb	??_crc8& (0+255),w,c
  8901  002ECA  A0D8               	btfss	status,0,c
  8902  002ECC  D7E8               	goto	l1284
  8903                           
  8904                           ;SystemCommon.c: 19: }
  8905                           ;SystemCommon.c: 20: crc &= 0xff;
  8906  002ECE  0EFF               	movlw	255
  8907  002ED0  161D               	andwf	crc8@crc,f,c
  8908  002ED2  0E00               	movlw	0
  8909  002ED4  161E               	andwf	crc8@crc+1,f,c
  8910                           
  8911                           ;SystemCommon.c: 21: return crc;
  8912  002ED6  501D               	movf	crc8@crc,w,c
  8913  002ED8  0012               	return	
  8914  002EDA                     __end_of_crc8:
  8915                           	opt stack 0
  8916                           tosu	equ	0xFFF
  8917                           tosh	equ	0xFFE
  8918                           tosl	equ	0xFFD
  8919                           pclath	equ	0xFFA
  8920                           tblptru	equ	0xFF8
  8921                           tblptrh	equ	0xFF7
  8922                           tblptrl	equ	0xFF6
  8923                           tablat	equ	0xFF5
  8924                           prodh	equ	0xFF4
  8925                           prodl	equ	0xFF3
  8926                           intcon	equ	0xFF2
  8927                           intcon2	equ	0xFF1
  8928                           postinc0	equ	0xFEE
  8929                           wreg	equ	0xFE8
  8930                           indf1	equ	0xFE7
  8931                           postdec1	equ	0xFE5
  8932                           fsr1h	equ	0xFE2
  8933                           fsr1l	equ	0xFE1
  8934                           indf2	equ	0xFDF
  8935                           postinc2	equ	0xFDE
  8936                           postdec2	equ	0xFDD
  8937                           fsr2h	equ	0xFDA
  8938                           fsr2l	equ	0xFD9
  8939                           status	equ	0xFD8
  8940                           
  8941 ;; *************** function _ZeroArray *****************
  8942 ;; Defined at:
  8943 ;;		line 24 in file "SystemCommon.c"
  8944 ;; Parameters:    Size  Location     Type
  8945 ;;  array           2   31[COMRAM] PTR unsigned char 
  8946 ;;		 -> GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dataRegArr(9), SynthReadData@TxMsg(27), FlashReadCondition@TxMsg(9)
      +, 
  8947 ;;		 -> FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), 
  8948 ;;		 -> rxMsgQueue(20), 
  8949 ;;  size            2   33[COMRAM] int 
  8950 ;; Auto vars:     Size  Location     Type
  8951 ;;		None
  8952 ;; Return value:  Size  Location     Type
  8953 ;;                  1    wreg      void 
  8954 ;; Registers used:
  8955 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8956 ;; Tracked objects:
  8957 ;;		On entry : 0/0
  8958 ;;		On exit  : 0/0
  8959 ;;		Unchanged: 0/0
  8960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8961 ;;      Params:         4       0       0       0       0       0       0
  8962 ;;      Locals:         0       0       0       0       0       0       0
  8963 ;;      Temps:          0       0       0       0       0       0       0
  8964 ;;      Totals:         4       0       0       0       0       0       0
  8965 ;;Total ram usage:        4 bytes
  8966 ;; Hardware stack levels used:    1
  8967 ;; Hardware stack levels required when called:    4
  8968 ;; This function calls:
  8969 ;;		_memset
  8970 ;; This function is called by:
  8971 ;;		_readUartMessage
  8972 ;;		_InitRxMessageParams
  8973 ;;		_SendAckMessage
  8974 ;;		_FlashReadUart
  8975 ;;		_FlashEreaseMem
  8976 ;;		_FlashReadCondition
  8977 ;;		_SynthReadData
  8978 ;;		_GetIntFromUartData
  8979 ;;		_GetMcuFwVersion
  8980 ;; This function uses a non-reentrant model
  8981 ;;
  8982                           
  8983                           	psect	text57
  8984  00365E                     __ptext57:
  8985                           	opt stack 0
  8986  00365E                     _ZeroArray:
  8987                           	opt stack 25
  8988                           
  8989                           ;SystemCommon.c: 26: memset(array, 0x0, size);
  8990                           
  8991                           ;incstack = 0
  8992  00365E  C020  F018         	movff	ZeroArray@array,memset@p1
  8993  003662  C021  F019         	movff	ZeroArray@array+1,memset@p1+1
  8994  003666  0E00               	movlw	0
  8995  003668  6E1B               	movwf	memset@c+1,c
  8996  00366A  0E00               	movlw	0
  8997  00366C  6E1A               	movwf	memset@c,c
  8998  00366E  C022  F01C         	movff	ZeroArray@size,memset@n
  8999  003672  C023  F01D         	movff	ZeroArray@size+1,memset@n+1
  9000  003676  EC53  F01A         	call	_memset	;wreg free
  9001  00367A  0012               	return		;funcret
  9002  00367C                     __end_of_ZeroArray:
  9003                           	opt stack 0
  9004                           tosu	equ	0xFFF
  9005                           tosh	equ	0xFFE
  9006                           tosl	equ	0xFFD
  9007                           pclath	equ	0xFFA
  9008                           tblptru	equ	0xFF8
  9009                           tblptrh	equ	0xFF7
  9010                           tblptrl	equ	0xFF6
  9011                           tablat	equ	0xFF5
  9012                           prodh	equ	0xFF4
  9013                           prodl	equ	0xFF3
  9014                           intcon	equ	0xFF2
  9015                           intcon2	equ	0xFF1
  9016                           postinc0	equ	0xFEE
  9017                           wreg	equ	0xFE8
  9018                           indf1	equ	0xFE7
  9019                           postdec1	equ	0xFE5
  9020                           fsr1h	equ	0xFE2
  9021                           fsr1l	equ	0xFE1
  9022                           indf2	equ	0xFDF
  9023                           postinc2	equ	0xFDE
  9024                           postdec2	equ	0xFDD
  9025                           fsr2h	equ	0xFDA
  9026                           fsr2l	equ	0xFD9
  9027                           status	equ	0xFD8
  9028                           
  9029 ;; *************** function _WriteUartMessage *****************
  9030 ;; Defined at:
  9031 ;;		line 158 in file "EusartApp.c"
  9032 ;; Parameters:    Size  Location     Type
  9033 ;;  dataBuf         2   24[COMRAM] PTR unsigned char 
  9034 ;;		 -> GetMcuRunTime@TxMsg(9), GetMcuFwVersion@TxMsg(9), SynthReadData@TxMsg(27), FlashReadCondition@TxMsg(9), 
  9035 ;;		 -> FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), 
  9036 ;;  dataSize        2   26[COMRAM] int 
  9037 ;; Auto vars:     Size  Location     Type
  9038 ;;  idx             2   29[COMRAM] int 
  9039 ;; Return value:  Size  Location     Type
  9040 ;;                  1    wreg      void 
  9041 ;; Registers used:
  9042 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9043 ;; Tracked objects:
  9044 ;;		On entry : 0/0
  9045 ;;		On exit  : 0/0
  9046 ;;		Unchanged: 0/0
  9047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9048 ;;      Params:         4       0       0       0       0       0       0
  9049 ;;      Locals:         2       0       0       0       0       0       0
  9050 ;;      Temps:          1       0       0       0       0       0       0
  9051 ;;      Totals:         7       0       0       0       0       0       0
  9052 ;;Total ram usage:        7 bytes
  9053 ;; Hardware stack levels used:    1
  9054 ;; Hardware stack levels required when called:    4
  9055 ;; This function calls:
  9056 ;;		_EUSART1_Write
  9057 ;; This function is called by:
  9058 ;;		_SendAckMessage
  9059 ;;		_FlashReadUart
  9060 ;;		_FlashReadCondition
  9061 ;;		_SynthReadData
  9062 ;;		_GetMcuFwVersion
  9063 ;;		_GetMcuRunTime
  9064 ;; This function uses a non-reentrant model
  9065 ;;
  9066                           
  9067                           	psect	text58
  9068  00331A                     __ptext58:
  9069                           	opt stack 0
  9070  00331A                     _WriteUartMessage:
  9071                           	opt stack 22
  9072                           
  9073                           ;EusartApp.c: 160: for(int idx = 0; idx < dataSize; idx++)
  9074                           
  9075                           ;incstack = 0
  9076  00331A  0E00               	movlw	0
  9077  00331C  6E1F               	movwf	WriteUartMessage@idx+1,c
  9078  00331E  0E00               	movlw	0
  9079  003320  6E1E               	movwf	WriteUartMessage@idx,c
  9080  003322  D00B               	goto	l222
  9081  003324                     
  9082                           ;EusartApp.c: 161: {
  9083                           ;EusartApp.c: 162: EUSART1_Write(dataBuf[idx]);
  9084  003324  501E               	movf	WriteUartMessage@idx,w,c
  9085  003326  2419               	addwf	WriteUartMessage@dataBuf,w,c
  9086  003328  6ED9               	movwf	fsr2l,c
  9087  00332A  501F               	movf	WriteUartMessage@idx+1,w,c
  9088  00332C  201A               	addwfc	WriteUartMessage@dataBuf+1,w,c
  9089  00332E  6EDA               	movwf	fsr2h,c
  9090  003330  50DF               	movf	indf2,w,c
  9091  003332  ECA9  F018         	call	_EUSART1_Write
  9092  003336  4A1E               	infsnz	WriteUartMessage@idx,f,c
  9093  003338  2A1F               	incf	WriteUartMessage@idx+1,f,c
  9094  00333A                     l222:
  9095  00333A  501B               	movf	WriteUartMessage@dataSize,w,c
  9096  00333C  5C1E               	subwf	WriteUartMessage@idx,w,c
  9097  00333E  501F               	movf	WriteUartMessage@idx+1,w,c
  9098  003340  0A80               	xorlw	128
  9099  003342  6E1D               	movwf	??_WriteUartMessage& (0+255),c
  9100  003344  501C               	movf	WriteUartMessage@dataSize+1,w,c
  9101  003346  0A80               	xorlw	128
  9102  003348  581D               	subwfb	??_WriteUartMessage& (0+255),w,c
  9103  00334A  B0D8               	btfsc	status,0,c
  9104  00334C  0012               	return	
  9105  00334E  D7EA               	goto	l223
  9106  003350                     __end_of_WriteUartMessage:
  9107                           	opt stack 0
  9108                           tosu	equ	0xFFF
  9109                           tosh	equ	0xFFE
  9110                           tosl	equ	0xFFD
  9111                           pclath	equ	0xFFA
  9112                           tblptru	equ	0xFF8
  9113                           tblptrh	equ	0xFF7
  9114                           tblptrl	equ	0xFF6
  9115                           tablat	equ	0xFF5
  9116                           prodh	equ	0xFF4
  9117                           prodl	equ	0xFF3
  9118                           intcon	equ	0xFF2
  9119                           intcon2	equ	0xFF1
  9120                           postinc0	equ	0xFEE
  9121                           wreg	equ	0xFE8
  9122                           indf1	equ	0xFE7
  9123                           postdec1	equ	0xFE5
  9124                           fsr1h	equ	0xFE2
  9125                           fsr1l	equ	0xFE1
  9126                           indf2	equ	0xFDF
  9127                           postinc2	equ	0xFDE
  9128                           postdec2	equ	0xFDD
  9129                           fsr2h	equ	0xFDA
  9130                           fsr2l	equ	0xFD9
  9131                           status	equ	0xFD8
  9132                           
  9133 ;; *************** function _EUSART1_Write *****************
  9134 ;; Defined at:
  9135 ;;		line 157 in file "mcc_generated_files/eusart1.c"
  9136 ;; Parameters:    Size  Location     Type
  9137 ;;  txData          1    wreg     unsigned char 
  9138 ;; Auto vars:     Size  Location     Type
  9139 ;;  txData          1   23[COMRAM] unsigned char 
  9140 ;; Return value:  Size  Location     Type
  9141 ;;                  1    wreg      void 
  9142 ;; Registers used:
  9143 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9144 ;; Tracked objects:
  9145 ;;		On entry : 0/0
  9146 ;;		On exit  : 0/0
  9147 ;;		Unchanged: 0/0
  9148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9149 ;;      Params:         0       0       0       0       0       0       0
  9150 ;;      Locals:         1       0       0       0       0       0       0
  9151 ;;      Temps:          0       0       0       0       0       0       0
  9152 ;;      Totals:         1       0       0       0       0       0       0
  9153 ;;Total ram usage:        1 bytes
  9154 ;; Hardware stack levels used:    1
  9155 ;; Hardware stack levels required when called:    3
  9156 ;; This function calls:
  9157 ;;		Nothing
  9158 ;; This function is called by:
  9159 ;;		_WriteUartMessage
  9160 ;; This function uses a non-reentrant model
  9161 ;;
  9162                           
  9163                           	psect	text59
  9164  003152                     __ptext59:
  9165                           	opt stack 0
  9166  003152                     _EUSART1_Write:
  9167                           	opt stack 22
  9168                           
  9169                           ;incstack = 0
  9170                           ;EUSART1_Write@txData stored from wreg
  9171  003152  6E18               	movwf	EUSART1_Write@txData,c
  9172  003154                     
  9173                           ;eusart1.c: 160: {
  9174                           
  9175                           ;eusart1.c: 159: while(0 == eusart1TxBufferRemaining)
  9176  003154  0100               	movlb	0	; () banked
  9177  003156  51FF               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
  9178  003158  B4D8               	btfsc	status,2,c
  9179  00315A  D7FC               	goto	l6506
  9180                           
  9181                           ; BSR set to: 0
  9182                           ;eusart1.c: 161: }
  9183                           ;eusart1.c: 163: if(0 == PIE1bits.TX1IE)
  9184  00315C  B89D               	btfsc	3997,4,c	;volatile
  9185  00315E  D003               	goto	l857
  9186                           
  9187                           ; BSR set to: 0
  9188                           ;eusart1.c: 164: {
  9189                           ;eusart1.c: 165: TXREG1 = txData;
  9190  003160  C018  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  9191                           
  9192                           ;eusart1.c: 166: }
  9193  003164  D012               	goto	l858
  9194  003166                     l857:
  9195                           
  9196                           ; BSR set to: 0
  9197                           ;eusart1.c: 167: else
  9198                           ;eusart1.c: 168: {
  9199                           ;eusart1.c: 169: PIE1bits.TX1IE = 0;
  9200  003166  989D               	bcf	3997,4,c	;volatile
  9201                           
  9202                           ; BSR set to: 0
  9203                           ;eusart1.c: 170: eusart1TxBuffer[eusart1TxHead++] = txData;
  9204  003168  5039               	movf	_eusart1TxHead,w,c	;volatile
  9205  00316A  0D01               	mullw	1
  9206  00316C  0E00               	movlw	low _eusart1TxBuffer
  9207  00316E  24F3               	addwf	prodl,w,c
  9208  003170  6ED9               	movwf	fsr2l,c
  9209  003172  0E01               	movlw	high _eusart1TxBuffer
  9210  003174  20F4               	addwfc	prodh,w,c
  9211  003176  6EDA               	movwf	fsr2h,c
  9212  003178  C018  FFDF         	movff	EUSART1_Write@txData,indf2
  9213                           
  9214                           ; BSR set to: 0
  9215  00317C  2A39               	incf	_eusart1TxHead,f,c	;volatile
  9216                           
  9217                           ; BSR set to: 0
  9218                           ;eusart1.c: 171: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  9219  00317E  0E45               	movlw	69
  9220  003180  6439               	cpfsgt	_eusart1TxHead,c	;volatile
  9221  003182  D002               	goto	l859
  9222                           
  9223                           ; BSR set to: 0
  9224                           ;eusart1.c: 172: {
  9225                           ;eusart1.c: 173: eusart1TxHead = 0;
  9226  003184  0E00               	movlw	0
  9227  003186  6E39               	movwf	_eusart1TxHead,c	;volatile
  9228  003188                     l859:
  9229                           
  9230                           ; BSR set to: 0
  9231                           ;eusart1.c: 174: }
  9232                           ;eusart1.c: 175: eusart1TxBufferRemaining--;
  9233                           
  9234                           ; BSR set to: 0
  9235  003188  07FF               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
  9236  00318A                     l858:
  9237                           
  9238                           ; BSR set to: 0
  9239                           ;eusart1.c: 176: }
  9240                           ;eusart1.c: 177: PIE1bits.TX1IE = 1;
  9241                           
  9242                           ; BSR set to: 0
  9243  00318A  889D               	bsf	3997,4,c	;volatile
  9244                           
  9245                           ; BSR set to: 0
  9246  00318C  0012               	return		;funcret
  9247  00318E                     __end_of_EUSART1_Write:
  9248                           	opt stack 0
  9249                           tosu	equ	0xFFF
  9250                           tosh	equ	0xFFE
  9251                           tosl	equ	0xFFD
  9252                           pclath	equ	0xFFA
  9253                           tblptru	equ	0xFF8
  9254                           tblptrh	equ	0xFF7
  9255                           tblptrl	equ	0xFF6
  9256                           tablat	equ	0xFF5
  9257                           prodh	equ	0xFF4
  9258                           prodl	equ	0xFF3
  9259                           intcon	equ	0xFF2
  9260                           intcon2	equ	0xFF1
  9261                           postinc0	equ	0xFEE
  9262                           wreg	equ	0xFE8
  9263                           indf1	equ	0xFE7
  9264                           postdec1	equ	0xFE5
  9265                           fsr1h	equ	0xFE2
  9266                           fsr1l	equ	0xFE1
  9267                           indf2	equ	0xFDF
  9268                           postinc2	equ	0xFDE
  9269                           postdec2	equ	0xFDD
  9270                           fsr2h	equ	0xFDA
  9271                           fsr2l	equ	0xFD9
  9272                           status	equ	0xFD8
  9273                           
  9274 ;; *************** function _InitSystemApplicationManagers *****************
  9275 ;; Defined at:
  9276 ;;		line 33 in file "SystemSettings.c"
  9277 ;; Parameters:    Size  Location     Type
  9278 ;;		None
  9279 ;; Auto vars:     Size  Location     Type
  9280 ;;		None
  9281 ;; Return value:  Size  Location     Type
  9282 ;;                  1    wreg      void 
  9283 ;; Registers used:
  9284 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9285 ;; Tracked objects:
  9286 ;;		On entry : 0/0
  9287 ;;		On exit  : 0/0
  9288 ;;		Unchanged: 0/0
  9289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9290 ;;      Params:         0       0       0       0       0       0       0
  9291 ;;      Locals:         0       0       0       0       0       0       0
  9292 ;;      Temps:          0       0       0       0       0       0       0
  9293 ;;      Totals:         0       0       0       0       0       0       0
  9294 ;;Total ram usage:        0 bytes
  9295 ;; Hardware stack levels used:    1
  9296 ;; Hardware stack levels required when called:    9
  9297 ;; This function calls:
  9298 ;;		_ClearMcuRunTime
  9299 ;;		_DacInit
  9300 ;;		_InitAdcApplicationMgr
  9301 ;;		_PLLInitialize
  9302 ;;		_TMR0_StartTimer
  9303 ;; This function is called by:
  9304 ;;		_main
  9305 ;; This function uses a non-reentrant model
  9306 ;;
  9307                           
  9308                           	psect	text60
  9309  0036FE                     __ptext60:
  9310                           	opt stack 0
  9311  0036FE                     _InitSystemApplicationManagers:
  9312                           	opt stack 21
  9313                           
  9314                           ;SystemSettings.c: 36: InitAdcApplicationMgr();
  9315                           
  9316                           ; BSR set to: 0
  9317                           ;incstack = 0
  9318  0036FE  ECB9  F01B         	call	_InitAdcApplicationMgr	;wreg free
  9319                           
  9320                           ;SystemSettings.c: 39: TMR0_StartTimer();
  9321  003702  EC16  F01C         	call	_TMR0_StartTimer	;wreg free
  9322                           
  9323                           ;SystemSettings.c: 42: PLLInitialize();
  9324  003706  ECD6  F01B         	call	_PLLInitialize	;wreg free
  9325                           
  9326                           ;SystemSettings.c: 45: ClearMcuRunTime();
  9327  00370A  EC9E  F01B         	call	_ClearMcuRunTime	;wreg free
  9328                           
  9329                           ;SystemSettings.c: 48: DacInit();
  9330  00370E  ECE8  F011         	call	_DacInit	;wreg free
  9331  003712  0012               	return		;funcret
  9332  003714                     __end_of_InitSystemApplicationManagers:
  9333                           	opt stack 0
  9334                           tosu	equ	0xFFF
  9335                           tosh	equ	0xFFE
  9336                           tosl	equ	0xFFD
  9337                           pclath	equ	0xFFA
  9338                           tblptru	equ	0xFF8
  9339                           tblptrh	equ	0xFF7
  9340                           tblptrl	equ	0xFF6
  9341                           tablat	equ	0xFF5
  9342                           prodh	equ	0xFF4
  9343                           prodl	equ	0xFF3
  9344                           intcon	equ	0xFF2
  9345                           intcon2	equ	0xFF1
  9346                           postinc0	equ	0xFEE
  9347                           wreg	equ	0xFE8
  9348                           indf1	equ	0xFE7
  9349                           postdec1	equ	0xFE5
  9350                           fsr1h	equ	0xFE2
  9351                           fsr1l	equ	0xFE1
  9352                           indf2	equ	0xFDF
  9353                           postinc2	equ	0xFDE
  9354                           postdec2	equ	0xFDD
  9355                           fsr2h	equ	0xFDA
  9356                           fsr2l	equ	0xFD9
  9357                           status	equ	0xFD8
  9358                           
  9359 ;; *************** function _TMR0_StartTimer *****************
  9360 ;; Defined at:
  9361 ;;		line 93 in file "mcc_generated_files/tmr0.c"
  9362 ;; Parameters:    Size  Location     Type
  9363 ;;		None
  9364 ;; Auto vars:     Size  Location     Type
  9365 ;;		None
  9366 ;; Return value:  Size  Location     Type
  9367 ;;                  1    wreg      void 
  9368 ;; Registers used:
  9369 ;;		None
  9370 ;; Tracked objects:
  9371 ;;		On entry : 0/0
  9372 ;;		On exit  : 0/0
  9373 ;;		Unchanged: 0/0
  9374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9375 ;;      Params:         0       0       0       0       0       0       0
  9376 ;;      Locals:         0       0       0       0       0       0       0
  9377 ;;      Temps:          0       0       0       0       0       0       0
  9378 ;;      Totals:         0       0       0       0       0       0       0
  9379 ;;Total ram usage:        0 bytes
  9380 ;; Hardware stack levels used:    1
  9381 ;; Hardware stack levels required when called:    3
  9382 ;; This function calls:
  9383 ;;		Nothing
  9384 ;; This function is called by:
  9385 ;;		_InitSystemApplicationManagers
  9386 ;; This function uses a non-reentrant model
  9387 ;;
  9388                           
  9389                           	psect	text61
  9390  00382C                     __ptext61:
  9391                           	opt stack 0
  9392  00382C                     _TMR0_StartTimer:
  9393                           	opt stack 26
  9394                           
  9395                           ;tmr0.c: 96: T0CONbits.TMR0ON = 1;
  9396                           
  9397                           ;incstack = 0
  9398  00382C  8ED5               	bsf	4053,7,c	;volatile
  9399  00382E  0012               	return		;funcret
  9400  003830                     __end_of_TMR0_StartTimer:
  9401                           	opt stack 0
  9402                           tosu	equ	0xFFF
  9403                           tosh	equ	0xFFE
  9404                           tosl	equ	0xFFD
  9405                           pclath	equ	0xFFA
  9406                           tblptru	equ	0xFF8
  9407                           tblptrh	equ	0xFF7
  9408                           tblptrl	equ	0xFF6
  9409                           tablat	equ	0xFF5
  9410                           prodh	equ	0xFF4
  9411                           prodl	equ	0xFF3
  9412                           intcon	equ	0xFF2
  9413                           intcon2	equ	0xFF1
  9414                           postinc0	equ	0xFEE
  9415                           wreg	equ	0xFE8
  9416                           indf1	equ	0xFE7
  9417                           postdec1	equ	0xFE5
  9418                           fsr1h	equ	0xFE2
  9419                           fsr1l	equ	0xFE1
  9420                           indf2	equ	0xFDF
  9421                           postinc2	equ	0xFDE
  9422                           postdec2	equ	0xFDD
  9423                           fsr2h	equ	0xFDA
  9424                           fsr2l	equ	0xFD9
  9425                           status	equ	0xFD8
  9426                           
  9427 ;; *************** function _PLLInitialize *****************
  9428 ;; Defined at:
  9429 ;;		line 19 in file "SyntApp.c"
  9430 ;; Parameters:    Size  Location     Type
  9431 ;;		None
  9432 ;; Auto vars:     Size  Location     Type
  9433 ;;		None
  9434 ;; Return value:  Size  Location     Type
  9435 ;;                  1    wreg      void 
  9436 ;; Registers used:
  9437 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9438 ;; Tracked objects:
  9439 ;;		On entry : 0/0
  9440 ;;		On exit  : 0/0
  9441 ;;		Unchanged: 0/0
  9442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9443 ;;      Params:         0       0       0       0       0       0       0
  9444 ;;      Locals:         0       0       0       0       0       0       0
  9445 ;;      Temps:          0       0       0       0       0       0       0
  9446 ;;      Totals:         0       0       0       0       0       0       0
  9447 ;;Total ram usage:        0 bytes
  9448 ;; Hardware stack levels used:    1
  9449 ;; Hardware stack levels required when called:    8
  9450 ;; This function calls:
  9451 ;;		_InitRxSynth
  9452 ;;		_InitTxSynth
  9453 ;; This function is called by:
  9454 ;;		_InitSystemApplicationManagers
  9455 ;; This function uses a non-reentrant model
  9456 ;;
  9457                           
  9458                           	psect	text62
  9459  0037AC                     __ptext62:
  9460                           	opt stack 0
  9461  0037AC                     _PLLInitialize:
  9462                           	opt stack 21
  9463                           
  9464                           ;SyntApp.c: 22: IOCB = 0b10000000;
  9465                           
  9466                           ;incstack = 0
  9467  0037AC  0E80               	movlw	128
  9468  0037AE  6E62               	movwf	3938,c	;volatile
  9469                           
  9470                           ;SyntApp.c: 24: InitTxSynth();
  9471  0037B0  EC6D  F017         	call	_InitTxSynth	;wreg free
  9472                           
  9473                           ;SyntApp.c: 25: InitRxSynth();
  9474  0037B4  EC93  F017         	call	_InitRxSynth	;wreg free
  9475  0037B8  0012               	return		;funcret
  9476  0037BA                     __end_of_PLLInitialize:
  9477                           	opt stack 0
  9478                           tosu	equ	0xFFF
  9479                           tosh	equ	0xFFE
  9480                           tosl	equ	0xFFD
  9481                           pclath	equ	0xFFA
  9482                           tblptru	equ	0xFF8
  9483                           tblptrh	equ	0xFF7
  9484                           tblptrl	equ	0xFF6
  9485                           tablat	equ	0xFF5
  9486                           prodh	equ	0xFF4
  9487                           prodl	equ	0xFF3
  9488                           intcon	equ	0xFF2
  9489                           intcon2	equ	0xFF1
  9490                           postinc0	equ	0xFEE
  9491                           wreg	equ	0xFE8
  9492                           indf1	equ	0xFE7
  9493                           postdec1	equ	0xFE5
  9494                           fsr1h	equ	0xFE2
  9495                           fsr1l	equ	0xFE1
  9496                           indf2	equ	0xFDF
  9497                           postinc2	equ	0xFDE
  9498                           postdec2	equ	0xFDD
  9499                           fsr2h	equ	0xFDA
  9500                           fsr2l	equ	0xFD9
  9501                           status	equ	0xFD8
  9502                           
  9503 ;; *************** function _InitTxSynth *****************
  9504 ;; Defined at:
  9505 ;;		line 34 in file "SyntApp.c"
  9506 ;; Parameters:    Size  Location     Type
  9507 ;;		None
  9508 ;; Auto vars:     Size  Location     Type
  9509 ;;  idx             1   46[COMRAM] unsigned char 
  9510 ;; Return value:  Size  Location     Type
  9511 ;;                  1    wreg      void 
  9512 ;; Registers used:
  9513 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9514 ;; Tracked objects:
  9515 ;;		On entry : 0/0
  9516 ;;		On exit  : 0/0
  9517 ;;		Unchanged: 0/0
  9518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9519 ;;      Params:         0       0       0       0       0       0       0
  9520 ;;      Locals:         1       0       0       0       0       0       0
  9521 ;;      Temps:          0       0       0       0       0       0       0
  9522 ;;      Totals:         1       0       0       0       0       0       0
  9523 ;;Total ram usage:        1 bytes
  9524 ;; Hardware stack levels used:    1
  9525 ;; Hardware stack levels required when called:    7
  9526 ;; This function calls:
  9527 ;;		_SWSPI_send_word
  9528 ;;		_SwSpi_Set_CE_Pin
  9529 ;; This function is called by:
  9530 ;;		_PLLInitialize
  9531 ;;		_SetSynthTxOper
  9532 ;; This function uses a non-reentrant model
  9533 ;;
  9534                           
  9535                           	psect	text63
  9536  002EDA                     __ptext63:
  9537                           	opt stack 0
  9538  002EDA                     _InitTxSynth:
  9539                           	opt stack 20
  9540                           
  9541                           ;SyntApp.c: 37: SwSpi_Set_CE_Pin(SYNTH_TX, 1);
  9542                           
  9543                           ;incstack = 0
  9544  002EDA  0E01               	movlw	1
  9545  002EDC  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  9546  002EDE  0E00               	movlw	0
  9547  002EE0  ECC7  F018         	call	_SwSpi_Set_CE_Pin
  9548                           
  9549                           ;SyntApp.c: 40: for(uint8_t idx = 0; idx < 13; idx++)
  9550  002EE4  0E00               	movlw	0
  9551  002EE6  6E2F               	movwf	InitTxSynth@idx,c
  9552  002EE8                     l7106:
  9553  002EE8  0E0C               	movlw	12
  9554  002EEA  642F               	cpfsgt	InitTxSynth@idx,c
  9555  002EEC  D001               	goto	l491
  9556  002EEE  0012               	return	
  9557  002EF0                     l491:
  9558                           
  9559                           ;SyntApp.c: 41: {
  9560                           ;SyntApp.c: 42: SWSPI_send_word(SYNTH_TX, SYNTH_REGS[idx],3);
  9561  002EF0  502F               	movf	InitTxSynth@idx,w,c
  9562  002EF2  0D04               	mullw	4
  9563  002EF4  0E01               	movlw	low _SYNTH_REGS
  9564  002EF6  24F3               	addwf	prodl,w,c
  9565  002EF8  6EF6               	movwf	tblptrl,c
  9566  002EFA  0E06               	movlw	high _SYNTH_REGS
  9567  002EFC  20F4               	addwfc	prodh,w,c
  9568  002EFE  6EF7               	movwf	tblptrh,c
  9569  002F00                     	if	0	;There are less than 3 active tblptr bytes
  9570  002F00                     	endif
  9571  002F00  0009               	tblrd		*+
  9572  002F02  CFF5 F026          	movff	tablat,SWSPI_send_word@data
  9573  002F06  0009               	tblrd		*+
  9574  002F08  CFF5 F027          	movff	tablat,SWSPI_send_word@data+1
  9575  002F0C  0009               	tblrd		*+
  9576  002F0E  CFF5 F028          	movff	tablat,SWSPI_send_word@data+2
  9577  002F12  000A               	tblrd		*-
  9578  002F14  CFF5 F029          	movff	tablat,SWSPI_send_word@data+3
  9579  002F18  0E03               	movlw	3
  9580  002F1A  6E2A               	movwf	SWSPI_send_word@dataSize,c
  9581  002F1C  0E00               	movlw	0
  9582  002F1E  EC50  F011         	call	_SWSPI_send_word
  9583  002F22  2A2F               	incf	InitTxSynth@idx,f,c
  9584  002F24  D7E1               	goto	l7106
  9585  002F26                     __end_of_InitTxSynth:
  9586                           	opt stack 0
  9587                           tosu	equ	0xFFF
  9588                           tosh	equ	0xFFE
  9589                           tosl	equ	0xFFD
  9590                           pclath	equ	0xFFA
  9591                           tblptru	equ	0xFF8
  9592                           tblptrh	equ	0xFF7
  9593                           tblptrl	equ	0xFF6
  9594                           tablat	equ	0xFF5
  9595                           prodh	equ	0xFF4
  9596                           prodl	equ	0xFF3
  9597                           intcon	equ	0xFF2
  9598                           intcon2	equ	0xFF1
  9599                           postinc0	equ	0xFEE
  9600                           wreg	equ	0xFE8
  9601                           indf1	equ	0xFE7
  9602                           postdec1	equ	0xFE5
  9603                           fsr1h	equ	0xFE2
  9604                           fsr1l	equ	0xFE1
  9605                           indf2	equ	0xFDF
  9606                           postinc2	equ	0xFDE
  9607                           postdec2	equ	0xFDD
  9608                           fsr2h	equ	0xFDA
  9609                           fsr2l	equ	0xFD9
  9610                           status	equ	0xFD8
  9611                           
  9612 ;; *************** function _InitRxSynth *****************
  9613 ;; Defined at:
  9614 ;;		line 46 in file "SyntApp.c"
  9615 ;; Parameters:    Size  Location     Type
  9616 ;;		None
  9617 ;; Auto vars:     Size  Location     Type
  9618 ;;  idx             1   46[COMRAM] unsigned char 
  9619 ;; Return value:  Size  Location     Type
  9620 ;;                  1    wreg      void 
  9621 ;; Registers used:
  9622 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9623 ;; Tracked objects:
  9624 ;;		On entry : 0/0
  9625 ;;		On exit  : 0/0
  9626 ;;		Unchanged: 0/0
  9627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9628 ;;      Params:         0       0       0       0       0       0       0
  9629 ;;      Locals:         1       0       0       0       0       0       0
  9630 ;;      Temps:          0       0       0       0       0       0       0
  9631 ;;      Totals:         1       0       0       0       0       0       0
  9632 ;;Total ram usage:        1 bytes
  9633 ;; Hardware stack levels used:    1
  9634 ;; Hardware stack levels required when called:    7
  9635 ;; This function calls:
  9636 ;;		_SWSPI_send_word
  9637 ;;		_SwSpi_Set_CE_Pin
  9638 ;; This function is called by:
  9639 ;;		_PLLInitialize
  9640 ;; This function uses a non-reentrant model
  9641 ;;
  9642                           
  9643                           	psect	text64
  9644  002F26                     __ptext64:
  9645                           	opt stack 0
  9646  002F26                     _InitRxSynth:
  9647                           	opt stack 21
  9648                           
  9649                           ;SyntApp.c: 49: SwSpi_Set_CE_Pin(SYNTH_RX, 1);
  9650                           
  9651                           ;incstack = 0
  9652  002F26  0E01               	movlw	1
  9653  002F28  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  9654  002F2A  0E01               	movlw	1
  9655  002F2C  ECC7  F018         	call	_SwSpi_Set_CE_Pin
  9656                           
  9657                           ;SyntApp.c: 52: for(uint8_t idx = 0; idx < 13; idx++)
  9658  002F30  0E00               	movlw	0
  9659  002F32  6E2F               	movwf	InitRxSynth@idx,c
  9660  002F34                     l7484:
  9661  002F34  0E0C               	movlw	12
  9662  002F36  642F               	cpfsgt	InitRxSynth@idx,c
  9663  002F38  D001               	goto	l496
  9664  002F3A  0012               	return	
  9665  002F3C                     l496:
  9666                           
  9667                           ;SyntApp.c: 53: {
  9668                           ;SyntApp.c: 54: SWSPI_send_word(SYNTH_RX, SYNTH_REGS[idx],3);
  9669  002F3C  502F               	movf	InitRxSynth@idx,w,c
  9670  002F3E  0D04               	mullw	4
  9671  002F40  0E01               	movlw	low _SYNTH_REGS
  9672  002F42  24F3               	addwf	prodl,w,c
  9673  002F44  6EF6               	movwf	tblptrl,c
  9674  002F46  0E06               	movlw	high _SYNTH_REGS
  9675  002F48  20F4               	addwfc	prodh,w,c
  9676  002F4A  6EF7               	movwf	tblptrh,c
  9677  002F4C                     	if	0	;There are less than 3 active tblptr bytes
  9678  002F4C                     	endif
  9679  002F4C  0009               	tblrd		*+
  9680  002F4E  CFF5 F026          	movff	tablat,SWSPI_send_word@data
  9681  002F52  0009               	tblrd		*+
  9682  002F54  CFF5 F027          	movff	tablat,SWSPI_send_word@data+1
  9683  002F58  0009               	tblrd		*+
  9684  002F5A  CFF5 F028          	movff	tablat,SWSPI_send_word@data+2
  9685  002F5E  000A               	tblrd		*-
  9686  002F60  CFF5 F029          	movff	tablat,SWSPI_send_word@data+3
  9687  002F64  0E03               	movlw	3
  9688  002F66  6E2A               	movwf	SWSPI_send_word@dataSize,c
  9689  002F68  0E01               	movlw	1
  9690  002F6A  EC50  F011         	call	_SWSPI_send_word
  9691  002F6E  2A2F               	incf	InitRxSynth@idx,f,c
  9692  002F70  D7E1               	goto	l7484
  9693  002F72                     __end_of_InitRxSynth:
  9694                           	opt stack 0
  9695                           tosu	equ	0xFFF
  9696                           tosh	equ	0xFFE
  9697                           tosl	equ	0xFFD
  9698                           pclath	equ	0xFFA
  9699                           tblptru	equ	0xFF8
  9700                           tblptrh	equ	0xFF7
  9701                           tblptrl	equ	0xFF6
  9702                           tablat	equ	0xFF5
  9703                           prodh	equ	0xFF4
  9704                           prodl	equ	0xFF3
  9705                           intcon	equ	0xFF2
  9706                           intcon2	equ	0xFF1
  9707                           postinc0	equ	0xFEE
  9708                           wreg	equ	0xFE8
  9709                           indf1	equ	0xFE7
  9710                           postdec1	equ	0xFE5
  9711                           fsr1h	equ	0xFE2
  9712                           fsr1l	equ	0xFE1
  9713                           indf2	equ	0xFDF
  9714                           postinc2	equ	0xFDE
  9715                           postdec2	equ	0xFDD
  9716                           fsr2h	equ	0xFDA
  9717                           fsr2l	equ	0xFD9
  9718                           status	equ	0xFD8
  9719                           
  9720 ;; *************** function _SwSpi_Set_CE_Pin *****************
  9721 ;; Defined at:
  9722 ;;		line 201 in file "SwSpiApp.c"
  9723 ;; Parameters:    Size  Location     Type
  9724 ;;  phrType         1    wreg     enum E7554
  9725 ;;  cPinMode        1   23[COMRAM] unsigned char 
  9726 ;; Auto vars:     Size  Location     Type
  9727 ;;  phrType         1   24[COMRAM] enum E7554
  9728 ;; Return value:  Size  Location     Type
  9729 ;;                  1    wreg      void 
  9730 ;; Registers used:
  9731 ;;		wreg, status,2, status,0
  9732 ;; Tracked objects:
  9733 ;;		On entry : 0/0
  9734 ;;		On exit  : 0/0
  9735 ;;		Unchanged: 0/0
  9736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9737 ;;      Params:         1       0       0       0       0       0       0
  9738 ;;      Locals:         1       0       0       0       0       0       0
  9739 ;;      Temps:          0       0       0       0       0       0       0
  9740 ;;      Totals:         2       0       0       0       0       0       0
  9741 ;;Total ram usage:        2 bytes
  9742 ;; Hardware stack levels used:    1
  9743 ;; Hardware stack levels required when called:    3
  9744 ;; This function calls:
  9745 ;;		Nothing
  9746 ;; This function is called by:
  9747 ;;		_InitTxSynth
  9748 ;;		_InitRxSynth
  9749 ;;		_SetSynthTxOper
  9750 ;; This function uses a non-reentrant model
  9751 ;;
  9752                           
  9753                           	psect	text65
  9754  00318E                     __ptext65:
  9755                           	opt stack 0
  9756  00318E                     _SwSpi_Set_CE_Pin:
  9757                           	opt stack 24
  9758                           
  9759                           ;incstack = 0
  9760                           ;SwSpi_Set_CE_Pin@phrType stored from wreg
  9761  00318E  6E19               	movwf	SwSpi_Set_CE_Pin@phrType,c
  9762                           
  9763                           ;SwSpiApp.c: 203: switch(phrType)
  9764  003190  D014               	goto	l676
  9765  003192                     
  9766                           ;SwSpiApp.c: 206: if(cPinMode == 1)
  9767  003192  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
  9768  003194  A4D8               	btfss	status,2,c
  9769  003196  D002               	goto	l678
  9770                           
  9771                           ;SwSpiApp.c: 207: {
  9772                           ;SwSpiApp.c: 208: do { LATCbits.LATC1 = 1; } while(0);
  9773  003198  828B               	bsf	3979,1,c	;volatile
  9774                           
  9775                           ;SwSpiApp.c: 209: }
  9776  00319A  0012               	return	
  9777  00319C                     l678:
  9778                           
  9779                           ;SwSpiApp.c: 210: else if(cPinMode == 0)
  9780  00319C  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
  9781  00319E  A4D8               	btfss	status,2,c
  9782  0031A0  0012               	return	
  9783                           
  9784                           ;SwSpiApp.c: 211: {
  9785                           ;SwSpiApp.c: 212: do { LATCbits.LATC1 = 0; } while(0);
  9786  0031A2  928B               	bcf	3979,1,c	;volatile
  9787                           
  9788                           ;SwSpiApp.c: 213: }
  9789                           ;SwSpiApp.c: 214: break;
  9790  0031A4  0012               	return	
  9791  0031A6                     
  9792                           ;SwSpiApp.c: 217: if(cPinMode == 1)
  9793  0031A6  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
  9794  0031A8  A4D8               	btfss	status,2,c
  9795  0031AA  D002               	goto	l687
  9796                           
  9797                           ;SwSpiApp.c: 218: {
  9798                           ;SwSpiApp.c: 219: do { LATDbits.LATD2 = 1; } while(0);
  9799  0031AC  848C               	bsf	3980,2,c	;volatile
  9800                           
  9801                           ;SwSpiApp.c: 220: }
  9802  0031AE  0012               	return	
  9803  0031B0                     l687:
  9804                           
  9805                           ;SwSpiApp.c: 221: else if(cPinMode == 0)
  9806  0031B0  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
  9807  0031B2  A4D8               	btfss	status,2,c
  9808  0031B4  0012               	return	
  9809                           
  9810                           ;SwSpiApp.c: 222: {
  9811                           ;SwSpiApp.c: 223: do { LATCbits.LATC1 = 0; } while(0);
  9812  0031B6  928B               	bcf	3979,1,c	;volatile
  9813                           
  9814                           ;SwSpiApp.c: 226: }
  9815                           
  9816                           ;SwSpiApp.c: 224: }
  9817                           ;SwSpiApp.c: 225: break;
  9818  0031B8  0012               	return	
  9819  0031BA                     l676:
  9820  0031BA  5019               	movf	SwSpi_Set_CE_Pin@phrType,w,c
  9821                           
  9822                           ; Switch size 1, requested type "space"
  9823                           ; Number of cases is 2, Range of values is 0 to 1
  9824                           ; switch strategies available:
  9825                           ; Name         Instructions Cycles
  9826                           ; simple_byte            7     4 (average)
  9827                           ;	Chosen strategy is simple_byte
  9828  0031BC  0A00               	xorlw	0	; case 0
  9829  0031BE  B4D8               	btfsc	status,2,c
  9830  0031C0  D7E8               	goto	l677
  9831  0031C2  0A01               	xorlw	1	; case 1
  9832  0031C4  A4D8               	btfss	status,2,c
  9833  0031C6  0012               	return	
  9834  0031C8  D7EE               	goto	l686
  9835  0031CA                     __end_of_SwSpi_Set_CE_Pin:
  9836                           	opt stack 0
  9837                           tosu	equ	0xFFF
  9838                           tosh	equ	0xFFE
  9839                           tosl	equ	0xFFD
  9840                           pclath	equ	0xFFA
  9841                           tblptru	equ	0xFF8
  9842                           tblptrh	equ	0xFF7
  9843                           tblptrl	equ	0xFF6
  9844                           tablat	equ	0xFF5
  9845                           prodh	equ	0xFF4
  9846                           prodl	equ	0xFF3
  9847                           intcon	equ	0xFF2
  9848                           intcon2	equ	0xFF1
  9849                           postinc0	equ	0xFEE
  9850                           wreg	equ	0xFE8
  9851                           indf1	equ	0xFE7
  9852                           postdec1	equ	0xFE5
  9853                           fsr1h	equ	0xFE2
  9854                           fsr1l	equ	0xFE1
  9855                           indf2	equ	0xFDF
  9856                           postinc2	equ	0xFDE
  9857                           postdec2	equ	0xFDD
  9858                           fsr2h	equ	0xFDA
  9859                           fsr2l	equ	0xFD9
  9860                           status	equ	0xFD8
  9861                           
  9862 ;; *************** function _InitAdcApplicationMgr *****************
  9863 ;; Defined at:
  9864 ;;		line 22 in file "AdcApp.c"
  9865 ;; Parameters:    Size  Location     Type
  9866 ;;		None
  9867 ;; Auto vars:     Size  Location     Type
  9868 ;;  channel         1   23[COMRAM] unsigned char 
  9869 ;; Return value:  Size  Location     Type
  9870 ;;                  1    wreg      void 
  9871 ;; Registers used:
  9872 ;;		wreg, status,2
  9873 ;; Tracked objects:
  9874 ;;		On entry : 0/0
  9875 ;;		On exit  : 0/0
  9876 ;;		Unchanged: 0/0
  9877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9878 ;;      Params:         0       0       0       0       0       0       0
  9879 ;;      Locals:         1       0       0       0       0       0       0
  9880 ;;      Temps:          0       0       0       0       0       0       0
  9881 ;;      Totals:         1       0       0       0       0       0       0
  9882 ;;Total ram usage:        1 bytes
  9883 ;; Hardware stack levels used:    1
  9884 ;; Hardware stack levels required when called:    3
  9885 ;; This function calls:
  9886 ;;		Nothing
  9887 ;; This function is called by:
  9888 ;;		_InitSystemApplicationManagers
  9889 ;; This function uses a non-reentrant model
  9890 ;;
  9891                           
  9892                           	psect	text66
  9893  003772                     __ptext66:
  9894                           	opt stack 0
  9895  003772                     _InitAdcApplicationMgr:
  9896                           	opt stack 26
  9897                           
  9898                           ;AdcApp.c: 24: conversionFormat = CONVERSION_LEFT_FORAMT;
  9899                           
  9900                           ;incstack = 0
  9901  003772  0E00               	movlw	0
  9902  003774  0100               	movlb	0	; () banked
  9903  003776  6FD5               	movwf	_conversionFormat& (0+255),b
  9904                           
  9905                           ;AdcApp.c: 25: adcSampleMode = CIRCULAR;
  9906  003778  0E00               	movlw	0
  9907  00377A  6E3C               	movwf	_adcSampleMode,c
  9908                           
  9909                           ;AdcApp.c: 26: char channel = 0;
  9910  00377C  0E00               	movlw	0
  9911  00377E  6E18               	movwf	InitAdcApplicationMgr@channel,c
  9912                           
  9913                           ; BSR set to: 0
  9914  003780  0012               	return		;funcret
  9915  003782                     __end_of_InitAdcApplicationMgr:
  9916                           	opt stack 0
  9917                           tosu	equ	0xFFF
  9918                           tosh	equ	0xFFE
  9919                           tosl	equ	0xFFD
  9920                           pclath	equ	0xFFA
  9921                           tblptru	equ	0xFF8
  9922                           tblptrh	equ	0xFF7
  9923                           tblptrl	equ	0xFF6
  9924                           tablat	equ	0xFF5
  9925                           prodh	equ	0xFF4
  9926                           prodl	equ	0xFF3
  9927                           intcon	equ	0xFF2
  9928                           intcon2	equ	0xFF1
  9929                           postinc0	equ	0xFEE
  9930                           wreg	equ	0xFE8
  9931                           indf1	equ	0xFE7
  9932                           postdec1	equ	0xFE5
  9933                           fsr1h	equ	0xFE2
  9934                           fsr1l	equ	0xFE1
  9935                           indf2	equ	0xFDF
  9936                           postinc2	equ	0xFDE
  9937                           postdec2	equ	0xFDD
  9938                           fsr2h	equ	0xFDA
  9939                           fsr2l	equ	0xFD9
  9940                           status	equ	0xFD8
  9941                           
  9942 ;; *************** function _DacInit *****************
  9943 ;; Defined at:
  9944 ;;		line 24 in file "DacApp.c"
  9945 ;; Parameters:    Size  Location     Type
  9946 ;;		None
  9947 ;; Auto vars:     Size  Location     Type
  9948 ;;  dacInput        2   40[BANK0 ] unsigned int 
  9949 ;;  idx             1   42[BANK0 ] char 
  9950 ;; Return value:  Size  Location     Type
  9951 ;;                  1    wreg      void 
  9952 ;; Registers used:
  9953 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9954 ;; Tracked objects:
  9955 ;;		On entry : 0/0
  9956 ;;		On exit  : 0/0
  9957 ;;		Unchanged: 0/0
  9958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9959 ;;      Params:         0       0       0       0       0       0       0
  9960 ;;      Locals:         0       3       0       0       0       0       0
  9961 ;;      Temps:          0       2       0       0       0       0       0
  9962 ;;      Totals:         0       5       0       0       0       0       0
  9963 ;;Total ram usage:        5 bytes
  9964 ;; Hardware stack levels used:    1
  9965 ;; Hardware stack levels required when called:    7
  9966 ;; This function calls:
  9967 ;;		_ReadIntFromEeprom
  9968 ;;		_SWSPI_send_word
  9969 ;; This function is called by:
  9970 ;;		_InitSystemApplicationManagers
  9971 ;; This function uses a non-reentrant model
  9972 ;;
  9973                           
  9974                           	psect	text67
  9975  0023D0                     __ptext67:
  9976                           	opt stack 0
  9977  0023D0                     _DacInit:
  9978                           	opt stack 22
  9979                           
  9980                           ;DacApp.c: 26: for(int8_t idx = 0; idx < (4); idx++)
  9981                           
  9982                           ; BSR set to: 0
  9983                           ;incstack = 0
  9984  0023D0  0E00               	movlw	0
  9985  0023D2  0100               	movlb	0	; () banked
  9986  0023D4  6F8A               	movwf	DacInit@idx& (0+255),b
  9987  0023D6                     l7774:
  9988                           
  9989                           ; BSR set to: 0
  9990  0023D6  518A               	movf	DacInit@idx& (0+255),w,b
  9991  0023D8  0A80               	xorlw	128
  9992  0023DA  0F7C               	addlw	-132
  9993  0023DC  B0D8               	btfsc	status,0,c
  9994  0023DE  0012               	return	
  9995                           
  9996                           ; BSR set to: 0
  9997                           ;DacApp.c: 27: {
  9998                           ;DacApp.c: 28: uint16_t dacInput = ReadIntFromEeprom((0x20) | DAC_ADDRES[idx], 2);
  9999                           
 10000                           ; BSR set to: 0
 10001                           
 10002                           ; BSR set to: 0
 10003  0023E0  0E00               	movlw	0
 10004  0023E2  6E1B               	movwf	ReadIntFromEeprom@numOfByes+1,c
 10005  0023E4  0E02               	movlw	2
 10006  0023E6  6E1A               	movwf	ReadIntFromEeprom@numOfByes,c
 10007  0023E8  518A               	movf	DacInit@idx& (0+255),w,b
 10008  0023EA  0D01               	mullw	1
 10009  0023EC  0E48               	movlw	low _DAC_ADDRES
 10010  0023EE  24F3               	addwf	prodl,w,c
 10011  0023F0  6EF6               	movwf	tblptrl,c
 10012  0023F2  0E06               	movlw	high _DAC_ADDRES
 10013  0023F4  20F4               	addwfc	prodh,w,c
 10014  0023F6  6EF7               	movwf	tblptrh,c
 10015  0023F8                     	if	0	;There are less than 3 active tblptr bytes
 10016  0023F8                     	endif
 10017  0023F8  0008               	tblrd		*
 10018  0023FA  50F5               	movf	tablat,w,c
 10019  0023FC  0920               	iorlw	32
 10020  0023FE  EC09  F015         	call	_ReadIntFromEeprom
 10021  002402  C01A  F088         	movff	?_ReadIntFromEeprom,DacInit@dacInput
 10022  002406  C01B  F089         	movff	?_ReadIntFromEeprom+1,DacInit@dacInput+1
 10023                           
 10024                           ;DacApp.c: 29: if(dacInput == 0xFFFF)
 10025  00240A  0100               	movlb	0	; () banked
 10026  00240C  2988               	incf	DacInit@dacInput& (0+255),w,b
 10027  00240E  E11D               	bnz	l7784
 10028  002410  2989               	incf	(DacInit@dacInput+1)& (0+255),w,b
 10029  002412  A4D8               	btfss	status,2,c
 10030  002414  D01A               	goto	l421
 10031                           
 10032                           ; BSR set to: 0
 10033                           ;DacApp.c: 30: {
 10034                           ;DacApp.c: 31: SWSPI_send_word(EXT_DAC, DAC_DEFAULT_INIT_VALUES[idx], 1);
 10035  002416  518A               	movf	DacInit@idx& (0+255),w,b
 10036  002418  0D02               	mullw	2
 10037  00241A  0E35               	movlw	low _DAC_DEFAULT_INIT_VALUES
 10038  00241C  24F3               	addwf	prodl,w,c
 10039  00241E  6EF6               	movwf	tblptrl,c
 10040  002420  0E06               	movlw	high _DAC_DEFAULT_INIT_VALUES
 10041  002422  20F4               	addwfc	prodh,w,c
 10042  002424  6EF7               	movwf	tblptrh,c
 10043  002426                     	if	0	;There are less than 3 active tblptr bytes
 10044  002426                     	endif
 10045  002426  0009               	tblrd		*+
 10046  002428  CFF5 F086          	movff	tablat,??_DacInit
 10047  00242C  0009               	tblrd		*+
 10048  00242E  CFF5 F087          	movff	tablat,??_DacInit+1
 10049  002432  C086  F026         	movff	??_DacInit,SWSPI_send_word@data
 10050  002436  C087  F027         	movff	??_DacInit+1,SWSPI_send_word@data+1
 10051  00243A  6A28               	clrf	SWSPI_send_word@data+2,c
 10052  00243C  6A29               	clrf	SWSPI_send_word@data+3,c
 10053  00243E  0E01               	movlw	1
 10054  002440  6E2A               	movwf	SWSPI_send_word@dataSize,c
 10055  002442  0E02               	movlw	2
 10056  002444  EC50  F011         	call	_SWSPI_send_word
 10057                           
 10058                           ;DacApp.c: 32: }
 10059  002448  D00B               	goto	l422
 10060  00244A                     l421:
 10061  00244A                     l7784:
 10062                           
 10063                           ;DacApp.c: 33: else
 10064                           ;DacApp.c: 34: {
 10065                           ;DacApp.c: 35: SWSPI_send_word(EXT_DAC, dacInput, 1);
 10066  00244A  C088  F026         	movff	DacInit@dacInput,SWSPI_send_word@data
 10067  00244E  C089  F027         	movff	DacInit@dacInput+1,SWSPI_send_word@data+1
 10068  002452  6A28               	clrf	SWSPI_send_word@data+2,c
 10069  002454  6A29               	clrf	SWSPI_send_word@data+3,c
 10070  002456  0E01               	movlw	1
 10071  002458  6E2A               	movwf	SWSPI_send_word@dataSize,c
 10072  00245A  0E02               	movlw	2
 10073  00245C  EC50  F011         	call	_SWSPI_send_word
 10074  002460                     l422:
 10075  002460  0100               	movlb	0	; () banked
 10076  002462  2B8A               	incf	DacInit@idx& (0+255),f,b
 10077  002464  D7B8               	goto	l7774
 10078  002466                     __end_of_DacInit:
 10079                           	opt stack 0
 10080                           tosu	equ	0xFFF
 10081                           tosh	equ	0xFFE
 10082                           tosl	equ	0xFFD
 10083                           pclath	equ	0xFFA
 10084                           tblptru	equ	0xFF8
 10085                           tblptrh	equ	0xFF7
 10086                           tblptrl	equ	0xFF6
 10087                           tablat	equ	0xFF5
 10088                           prodh	equ	0xFF4
 10089                           prodl	equ	0xFF3
 10090                           intcon	equ	0xFF2
 10091                           intcon2	equ	0xFF1
 10092                           postinc0	equ	0xFEE
 10093                           wreg	equ	0xFE8
 10094                           indf1	equ	0xFE7
 10095                           postdec1	equ	0xFE5
 10096                           fsr1h	equ	0xFE2
 10097                           fsr1l	equ	0xFE1
 10098                           indf2	equ	0xFDF
 10099                           postinc2	equ	0xFDE
 10100                           postdec2	equ	0xFDD
 10101                           fsr2h	equ	0xFDA
 10102                           fsr2l	equ	0xFD9
 10103                           status	equ	0xFD8
 10104                           
 10105 ;; *************** function _SWSPI_send_word *****************
 10106 ;; Defined at:
 10107 ;;		line 17 in file "SwSpiApp.c"
 10108 ;; Parameters:    Size  Location     Type
 10109 ;;  phrType         1    wreg     enum E7554
 10110 ;;  data            4   37[COMRAM] unsigned long 
 10111 ;;  dataSize        1   41[COMRAM] unsigned char 
 10112 ;; Auto vars:     Size  Location     Type
 10113 ;;  phrType         1   45[COMRAM] enum E7554
 10114 ;;  datac           1   42[COMRAM] unsigned char 
 10115 ;;  idx             2   43[COMRAM] int 
 10116 ;; Return value:  Size  Location     Type
 10117 ;;                  1    wreg      void 
 10118 ;; Registers used:
 10119 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10120 ;; Tracked objects:
 10121 ;;		On entry : 0/0
 10122 ;;		On exit  : 0/0
 10123 ;;		Unchanged: 0/0
 10124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10125 ;;      Params:         5       0       0       0       0       0       0
 10126 ;;      Locals:         4       0       0       0       0       0       0
 10127 ;;      Temps:          0       0       0       0       0       0       0
 10128 ;;      Totals:         9       0       0       0       0       0       0
 10129 ;;Total ram usage:        9 bytes
 10130 ;; Hardware stack levels used:    1
 10131 ;; Hardware stack levels required when called:    6
 10132 ;; This function calls:
 10133 ;;		_SWSPI_DAC_send_bits
 10134 ;;		_SWSPI_Synth_send_bits
 10135 ;;		_SwSpi_Set_Dac_Sync_Pin
 10136 ;;		_SwSpi_Set_Synth_Le_Pin
 10137 ;;		_make8
 10138 ;; This function is called by:
 10139 ;;		_DacInit
 10140 ;;		_DacSetValue
 10141 ;;		_InitTxSynth
 10142 ;;		_InitRxSynth
 10143 ;;		_UpdateTxFreq
 10144 ;;		_UpdateRxFreq
 10145 ;; This function uses a non-reentrant model
 10146 ;;
 10147                           
 10148                           	psect	text68
 10149  0022A0                     __ptext68:
 10150                           	opt stack 0
 10151  0022A0                     _SWSPI_send_word:
 10152                           	opt stack 21
 10153                           
 10154                           ; BSR set to: 0
 10155                           ;incstack = 0
 10156                           ;SWSPI_send_word@phrType stored from wreg
 10157  0022A0  6E2E               	movwf	SWSPI_send_word@phrType,c
 10158                           
 10159                           ;SwSpiApp.c: 19: (INTCONbits.GIE = 0);
 10160  0022A2  9EF2               	bcf	intcon,7,c	;volatile
 10161                           
 10162                           ;SwSpiApp.c: 23: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
 10163  0022A4  502E               	movf	SWSPI_send_word@phrType,w,c
 10164  0022A6  B4D8               	btfsc	status,2,c
 10165  0022A8  D003               	goto	u6340
 10166  0022AA  042E               	decf	SWSPI_send_word@phrType,w,c
 10167  0022AC  A4D8               	btfss	status,2,c
 10168  0022AE  D016               	goto	l585
 10169  0022B0                     u6340:
 10170                           
 10171                           ;SwSpiApp.c: 24: {
 10172                           ;SwSpiApp.c: 25: SwSpi_Set_Synth_Le_Pin(phrType, 0);
 10173  0022B0  0E00               	movlw	0
 10174  0022B2  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 10175  0022B4  502E               	movf	SWSPI_send_word@phrType,w,c
 10176  0022B6  ECE5  F018         	call	_SwSpi_Set_Synth_Le_Pin
 10177                           
 10178                           ;SwSpiApp.c: 26: SWSPI_Synth_send_bits(phrType, data);
 10179  0022BA  C026  F022         	movff	SWSPI_send_word@data,SWSPI_Synth_send_bits@data
 10180  0022BE  C027  F023         	movff	SWSPI_send_word@data+1,SWSPI_Synth_send_bits@data+1
 10181  0022C2  C028  F024         	movff	SWSPI_send_word@data+2,SWSPI_Synth_send_bits@data+2
 10182  0022C6  C029  F025         	movff	SWSPI_send_word@data+3,SWSPI_Synth_send_bits@data+3
 10183  0022CA  502E               	movf	SWSPI_send_word@phrType,w,c
 10184  0022CC  ECF7  F00F         	call	_SWSPI_Synth_send_bits
 10185                           
 10186                           ;SwSpiApp.c: 27: SwSpi_Set_Synth_Le_Pin(phrType, 1);
 10187  0022D0  0E01               	movlw	1
 10188  0022D2  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 10189  0022D4  502E               	movf	SWSPI_send_word@phrType,w,c
 10190  0022D6  ECE5  F018         	call	_SwSpi_Set_Synth_Le_Pin
 10191                           
 10192                           ;SwSpiApp.c: 28: }
 10193  0022DA  D02D               	goto	l589
 10194  0022DC                     l585:
 10195                           
 10196                           ;SwSpiApp.c: 29: else if(phrType == EXT_DAC)
 10197  0022DC  0E02               	movlw	2
 10198  0022DE  182E               	xorwf	SWSPI_send_word@phrType,w,c
 10199  0022E0  A4D8               	btfss	status,2,c
 10200  0022E2  D029               	goto	l589
 10201                           
 10202                           ;SwSpiApp.c: 30: {
 10203                           ;SwSpiApp.c: 31: SwSpi_Set_Dac_Sync_Pin(0);
 10204  0022E4  0E00               	movlw	0
 10205  0022E6  EC4D  F01B         	call	_SwSpi_Set_Dac_Sync_Pin
 10206                           
 10207                           ;SwSpiApp.c: 32: for(int idx = dataSize + 1; idx > 0; idx--)
 10208  0022EA  0E01               	movlw	1
 10209  0022EC  242A               	addwf	SWSPI_send_word@dataSize,w,c
 10210  0022EE  6E2C               	movwf	SWSPI_send_word@idx,c
 10211  0022F0  6A2D               	clrf	SWSPI_send_word@idx+1,c
 10212  0022F2  0E00               	movlw	0
 10213  0022F4  222D               	addwfc	SWSPI_send_word@idx+1,f,c
 10214  0022F6                     l6794:
 10215  0022F6  BE2D               	btfsc	SWSPI_send_word@idx+1,7,c
 10216  0022F8  D01B               	goto	u6370
 10217  0022FA  502D               	movf	SWSPI_send_word@idx+1,w,c
 10218  0022FC  E103               	bnz	l6798
 10219  0022FE  042C               	decf	SWSPI_send_word@idx,w,c
 10220  002300  A0D8               	btfss	status,0,c
 10221  002302  D016               	goto	u6370
 10222  002304                     l6798:
 10223                           
 10224                           ;SwSpiApp.c: 33: {
 10225                           ;SwSpiApp.c: 34: uint8_t datac = make8(data, idx - 1);
 10226  002304  C026  F018         	movff	SWSPI_send_word@data,make8@data
 10227  002308  C027  F019         	movff	SWSPI_send_word@data+1,make8@data+1
 10228  00230C  C028  F01A         	movff	SWSPI_send_word@data+2,make8@data+2
 10229  002310  C029  F01B         	movff	SWSPI_send_word@data+3,make8@data+3
 10230  002314  042C               	decf	SWSPI_send_word@idx,w,c
 10231  002316  6E1C               	movwf	make8@dataLocation,c
 10232  002318  EC96  F015         	call	_make8	;wreg free
 10233  00231C  6E2B               	movwf	SWSPI_send_word@datac,c
 10234                           
 10235                           ;SwSpiApp.c: 35: SWSPI_DAC_send_bits(phrType, datac);
 10236  00231E  C02B  F01A         	movff	SWSPI_send_word@datac,SWSPI_DAC_send_bits@data
 10237  002322  502E               	movf	SWSPI_send_word@phrType,w,c
 10238  002324  EC1E  F016         	call	_SWSPI_DAC_send_bits
 10239  002328  062C               	decf	SWSPI_send_word@idx,f,c
 10240  00232A  A0D8               	btfss	status,0,c
 10241  00232C  062D               	decf	SWSPI_send_word@idx+1,f,c
 10242  00232E  D7E3               	goto	l6794
 10243  002330                     u6370:
 10244                           
 10245                           ;SwSpiApp.c: 36: }
 10246                           ;SwSpiApp.c: 37: SwSpi_Set_Dac_Sync_Pin(1);
 10247  002330  0E01               	movlw	1
 10248  002332  EC4D  F01B         	call	_SwSpi_Set_Dac_Sync_Pin
 10249  002336                     l589:
 10250                           
 10251                           ;SwSpiApp.c: 38: }
 10252                           ;SwSpiApp.c: 40: (INTCONbits.GIE = 1);
 10253  002336  8EF2               	bsf	intcon,7,c	;volatile
 10254  002338  0012               	return		;funcret
 10255  00233A                     __end_of_SWSPI_send_word:
 10256                           	opt stack 0
 10257                           tosu	equ	0xFFF
 10258                           tosh	equ	0xFFE
 10259                           tosl	equ	0xFFD
 10260                           pclath	equ	0xFFA
 10261                           tblptru	equ	0xFF8
 10262                           tblptrh	equ	0xFF7
 10263                           tblptrl	equ	0xFF6
 10264                           tablat	equ	0xFF5
 10265                           prodh	equ	0xFF4
 10266                           prodl	equ	0xFF3
 10267                           intcon	equ	0xFF2
 10268                           intcon2	equ	0xFF1
 10269                           postinc0	equ	0xFEE
 10270                           wreg	equ	0xFE8
 10271                           indf1	equ	0xFE7
 10272                           postdec1	equ	0xFE5
 10273                           fsr1h	equ	0xFE2
 10274                           fsr1l	equ	0xFE1
 10275                           indf2	equ	0xFDF
 10276                           postinc2	equ	0xFDE
 10277                           postdec2	equ	0xFDD
 10278                           fsr2h	equ	0xFDA
 10279                           fsr2l	equ	0xFD9
 10280                           status	equ	0xFD8
 10281                           
 10282 ;; *************** function _make8 *****************
 10283 ;; Defined at:
 10284 ;;		line 58 in file "SystemCommon.c"
 10285 ;; Parameters:    Size  Location     Type
 10286 ;;  data            4   23[COMRAM] unsigned long 
 10287 ;;  dataLocation    1   27[COMRAM] unsigned char 
 10288 ;; Auto vars:     Size  Location     Type
 10289 ;;		None
 10290 ;; Return value:  Size  Location     Type
 10291 ;;                  1    wreg      unsigned char 
 10292 ;; Registers used:
 10293 ;;		wreg, status,2, status,0
 10294 ;; Tracked objects:
 10295 ;;		On entry : 0/0
 10296 ;;		On exit  : 0/0
 10297 ;;		Unchanged: 0/0
 10298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10299 ;;      Params:         5       0       0       0       0       0       0
 10300 ;;      Locals:         0       0       0       0       0       0       0
 10301 ;;      Temps:          4       0       0       0       0       0       0
 10302 ;;      Totals:         9       0       0       0       0       0       0
 10303 ;;Total ram usage:        9 bytes
 10304 ;; Hardware stack levels used:    1
 10305 ;; Hardware stack levels required when called:    3
 10306 ;; This function calls:
 10307 ;;		Nothing
 10308 ;; This function is called by:
 10309 ;;		_FlashReadCondition
 10310 ;;		_SWSPI_send_word
 10311 ;;		_StoreIntInEeprom
 10312 ;; This function uses a non-reentrant model
 10313 ;;
 10314                           
 10315                           	psect	text69
 10316  002B2C                     __ptext69:
 10317                           	opt stack 0
 10318  002B2C                     _make8:
 10319                           	opt stack 23
 10320                           
 10321                           ;SystemCommon.c: 60: switch(dataLocation)
 10322                           
 10323                           ;incstack = 0
 10324  002B2C  D01F               	goto	l1302
 10325  002B2E                     
 10326                           ;SystemCommon.c: 63: return (data & 0x000000ff);
 10327  002B2E  5018               	movf	make8@data,w,c
 10328  002B30  0012               	return	
 10329  002B32                     
 10330                           ;SystemCommon.c: 66: return (data & 0x0000ff00) >> 8;
 10331  002B32  5019               	movf	make8@data+1,w,c
 10332  002B34  0012               	return	
 10333  002B36                     
 10334                           ;SystemCommon.c: 69: return (data & 0x00ff0000) >> 16;
 10335  002B36  501A               	movf	make8@data+2,w,c
 10336  002B38  0012               	return	
 10337  002B3A                     
 10338                           ;SystemCommon.c: 72: return (data & 0xff000000) >> 24;
 10339  002B3A  0E00               	movlw	0
 10340  002B3C  1418               	andwf	make8@data,w,c
 10341  002B3E  6E1D               	movwf	??_make8& (0+255),c
 10342  002B40  0E00               	movlw	0
 10343  002B42  1419               	andwf	make8@data+1,w,c
 10344  002B44  6E1E               	movwf	(??_make8+1)& (0+255),c
 10345  002B46  0E00               	movlw	0
 10346  002B48  141A               	andwf	make8@data+2,w,c
 10347  002B4A  6E1F               	movwf	(??_make8+2)& (0+255),c
 10348  002B4C  0EFF               	movlw	255
 10349  002B4E  141B               	andwf	make8@data+3,w,c
 10350  002B50  6E20               	movwf	(??_make8+3)& (0+255),c
 10351  002B52  0E19               	movlw	25
 10352  002B54  D005               	goto	u5990
 10353  002B56                     u5995:
 10354  002B56  90D8               	bcf	status,0,c
 10355  002B58  3220               	rrcf	??_make8+3,f,c
 10356  002B5A  321F               	rrcf	??_make8+2,f,c
 10357  002B5C  321E               	rrcf	??_make8+1,f,c
 10358  002B5E  321D               	rrcf	??_make8,f,c
 10359  002B60                     u5990:
 10360  002B60  2EE8               	decfsz	wreg,f,c
 10361  002B62  D7F9               	goto	u5995
 10362  002B64  501D               	movf	??_make8,w,c
 10363  002B66  0012               	return	
 10364  002B68                     
 10365                           ;SystemCommon.c: 75: return (0);
 10366  002B68  0E00               	movlw	0
 10367                           
 10368                           ;SystemCommon.c: 76: }
 10369  002B6A  0012               	return	
 10370  002B6C                     l1302:
 10371  002B6C  501C               	movf	make8@dataLocation,w,c
 10372                           
 10373                           ; Switch size 1, requested type "space"
 10374                           ; Number of cases is 4, Range of values is 0 to 3
 10375                           ; switch strategies available:
 10376                           ; Name         Instructions Cycles
 10377                           ; simple_byte           13     7 (average)
 10378                           ;	Chosen strategy is simple_byte
 10379  002B6E  0A00               	xorlw	0	; case 0
 10380  002B70  B4D8               	btfsc	status,2,c
 10381  002B72  D7DD               	goto	l1303
 10382  002B74  0A01               	xorlw	1	; case 1
 10383  002B76  B4D8               	btfsc	status,2,c
 10384  002B78  D7DC               	goto	l1305
 10385  002B7A  0A03               	xorlw	3	; case 2
 10386  002B7C  B4D8               	btfsc	status,2,c
 10387  002B7E  D7DB               	goto	l1306
 10388  002B80  0A01               	xorlw	1	; case 3
 10389  002B82  B4D8               	btfsc	status,2,c
 10390  002B84  D7DA               	goto	l1307
 10391  002B86  D7F0               	goto	l1308
 10392  002B88                     __end_of_make8:
 10393                           	opt stack 0
 10394                           tosu	equ	0xFFF
 10395                           tosh	equ	0xFFE
 10396                           tosl	equ	0xFFD
 10397                           pclath	equ	0xFFA
 10398                           tblptru	equ	0xFF8
 10399                           tblptrh	equ	0xFF7
 10400                           tblptrl	equ	0xFF6
 10401                           tablat	equ	0xFF5
 10402                           prodh	equ	0xFF4
 10403                           prodl	equ	0xFF3
 10404                           intcon	equ	0xFF2
 10405                           intcon2	equ	0xFF1
 10406                           postinc0	equ	0xFEE
 10407                           wreg	equ	0xFE8
 10408                           indf1	equ	0xFE7
 10409                           postdec1	equ	0xFE5
 10410                           fsr1h	equ	0xFE2
 10411                           fsr1l	equ	0xFE1
 10412                           indf2	equ	0xFDF
 10413                           postinc2	equ	0xFDE
 10414                           postdec2	equ	0xFDD
 10415                           fsr2h	equ	0xFDA
 10416                           fsr2l	equ	0xFD9
 10417                           status	equ	0xFD8
 10418                           
 10419 ;; *************** function _SwSpi_Set_Synth_Le_Pin *****************
 10420 ;; Defined at:
 10421 ;;		line 232 in file "SwSpiApp.c"
 10422 ;; Parameters:    Size  Location     Type
 10423 ;;  phrType         1    wreg     enum E7554
 10424 ;;  cPinMode        1   23[COMRAM] unsigned char 
 10425 ;; Auto vars:     Size  Location     Type
 10426 ;;  phrType         1   24[COMRAM] enum E7554
 10427 ;; Return value:  Size  Location     Type
 10428 ;;                  1    wreg      void 
 10429 ;; Registers used:
 10430 ;;		wreg, status,2, status,0
 10431 ;; Tracked objects:
 10432 ;;		On entry : 0/0
 10433 ;;		On exit  : 0/0
 10434 ;;		Unchanged: 0/0
 10435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10436 ;;      Params:         1       0       0       0       0       0       0
 10437 ;;      Locals:         1       0       0       0       0       0       0
 10438 ;;      Temps:          0       0       0       0       0       0       0
 10439 ;;      Totals:         2       0       0       0       0       0       0
 10440 ;;Total ram usage:        2 bytes
 10441 ;; Hardware stack levels used:    1
 10442 ;; Hardware stack levels required when called:    3
 10443 ;; This function calls:
 10444 ;;		Nothing
 10445 ;; This function is called by:
 10446 ;;		_SWSPI_send_word
 10447 ;; This function uses a non-reentrant model
 10448 ;;
 10449                           
 10450                           	psect	text70
 10451  0031CA                     __ptext70:
 10452                           	opt stack 0
 10453  0031CA                     _SwSpi_Set_Synth_Le_Pin:
 10454                           	opt stack 23
 10455                           
 10456                           ;incstack = 0
 10457                           ;SwSpi_Set_Synth_Le_Pin@phrType stored from wreg
 10458  0031CA  6E19               	movwf	SwSpi_Set_Synth_Le_Pin@phrType,c
 10459                           
 10460                           ;SwSpiApp.c: 234: switch(phrType)
 10461  0031CC  D014               	goto	l697
 10462  0031CE                     
 10463                           ;SwSpiApp.c: 237: if(cPinMode == 1)
 10464  0031CE  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10465  0031D0  A4D8               	btfss	status,2,c
 10466  0031D2  D002               	goto	l699
 10467                           
 10468                           ;SwSpiApp.c: 238: {
 10469                           ;SwSpiApp.c: 239: do { LATCbits.LATC2 = 1; } while(0);
 10470  0031D4  848B               	bsf	3979,2,c	;volatile
 10471                           
 10472                           ;SwSpiApp.c: 240: }
 10473  0031D6  0012               	return	
 10474  0031D8                     l699:
 10475                           
 10476                           ;SwSpiApp.c: 241: else if(cPinMode == 0)
 10477  0031D8  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10478  0031DA  A4D8               	btfss	status,2,c
 10479  0031DC  0012               	return	
 10480                           
 10481                           ;SwSpiApp.c: 242: {
 10482                           ;SwSpiApp.c: 243: do { LATCbits.LATC2 = 0; } while(0);
 10483  0031DE  948B               	bcf	3979,2,c	;volatile
 10484                           
 10485                           ;SwSpiApp.c: 244: }
 10486                           ;SwSpiApp.c: 245: break;
 10487  0031E0  0012               	return	
 10488  0031E2                     
 10489                           ;SwSpiApp.c: 248: if(cPinMode == 1)
 10490  0031E2  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10491  0031E4  A4D8               	btfss	status,2,c
 10492  0031E6  D002               	goto	l708
 10493                           
 10494                           ;SwSpiApp.c: 249: {
 10495                           ;SwSpiApp.c: 250: do { LATDbits.LATD3 = 1; } while(0);
 10496  0031E8  868C               	bsf	3980,3,c	;volatile
 10497                           
 10498                           ;SwSpiApp.c: 251: }
 10499  0031EA  0012               	return	
 10500  0031EC                     l708:
 10501                           
 10502                           ;SwSpiApp.c: 252: else if(cPinMode == 0)
 10503  0031EC  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10504  0031EE  A4D8               	btfss	status,2,c
 10505  0031F0  0012               	return	
 10506                           
 10507                           ;SwSpiApp.c: 253: {
 10508                           ;SwSpiApp.c: 254: do { LATDbits.LATD3 = 0; } while(0);
 10509  0031F2  968C               	bcf	3980,3,c	;volatile
 10510                           
 10511                           ;SwSpiApp.c: 257: }
 10512                           
 10513                           ;SwSpiApp.c: 255: }
 10514                           ;SwSpiApp.c: 256: break;
 10515  0031F4  0012               	return	
 10516  0031F6                     l697:
 10517  0031F6  5019               	movf	SwSpi_Set_Synth_Le_Pin@phrType,w,c
 10518                           
 10519                           ; Switch size 1, requested type "space"
 10520                           ; Number of cases is 2, Range of values is 0 to 1
 10521                           ; switch strategies available:
 10522                           ; Name         Instructions Cycles
 10523                           ; simple_byte            7     4 (average)
 10524                           ;	Chosen strategy is simple_byte
 10525  0031F8  0A00               	xorlw	0	; case 0
 10526  0031FA  B4D8               	btfsc	status,2,c
 10527  0031FC  D7E8               	goto	l698
 10528  0031FE  0A01               	xorlw	1	; case 1
 10529  003200  A4D8               	btfss	status,2,c
 10530  003202  0012               	return	
 10531  003204  D7EE               	goto	l707
 10532  003206                     __end_of_SwSpi_Set_Synth_Le_Pin:
 10533                           	opt stack 0
 10534                           tosu	equ	0xFFF
 10535                           tosh	equ	0xFFE
 10536                           tosl	equ	0xFFD
 10537                           pclath	equ	0xFFA
 10538                           tblptru	equ	0xFF8
 10539                           tblptrh	equ	0xFF7
 10540                           tblptrl	equ	0xFF6
 10541                           tablat	equ	0xFF5
 10542                           prodh	equ	0xFF4
 10543                           prodl	equ	0xFF3
 10544                           intcon	equ	0xFF2
 10545                           intcon2	equ	0xFF1
 10546                           postinc0	equ	0xFEE
 10547                           wreg	equ	0xFE8
 10548                           indf1	equ	0xFE7
 10549                           postdec1	equ	0xFE5
 10550                           fsr1h	equ	0xFE2
 10551                           fsr1l	equ	0xFE1
 10552                           indf2	equ	0xFDF
 10553                           postinc2	equ	0xFDE
 10554                           postdec2	equ	0xFDD
 10555                           fsr2h	equ	0xFDA
 10556                           fsr2l	equ	0xFD9
 10557                           status	equ	0xFD8
 10558                           
 10559 ;; *************** function _SwSpi_Set_Dac_Sync_Pin *****************
 10560 ;; Defined at:
 10561 ;;		line 260 in file "SwSpiApp.c"
 10562 ;; Parameters:    Size  Location     Type
 10563 ;;  cPinMode        1    wreg     unsigned char 
 10564 ;; Auto vars:     Size  Location     Type
 10565 ;;  cPinMode        1   23[COMRAM] unsigned char 
 10566 ;; Return value:  Size  Location     Type
 10567 ;;                  1    wreg      void 
 10568 ;; Registers used:
 10569 ;;		wreg, status,2, status,0
 10570 ;; Tracked objects:
 10571 ;;		On entry : 0/0
 10572 ;;		On exit  : 0/0
 10573 ;;		Unchanged: 0/0
 10574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10575 ;;      Params:         0       0       0       0       0       0       0
 10576 ;;      Locals:         1       0       0       0       0       0       0
 10577 ;;      Temps:          0       0       0       0       0       0       0
 10578 ;;      Totals:         1       0       0       0       0       0       0
 10579 ;;Total ram usage:        1 bytes
 10580 ;; Hardware stack levels used:    1
 10581 ;; Hardware stack levels required when called:    3
 10582 ;; This function calls:
 10583 ;;		Nothing
 10584 ;; This function is called by:
 10585 ;;		_SWSPI_send_word
 10586 ;; This function uses a non-reentrant model
 10587 ;;
 10588                           
 10589                           	psect	text71
 10590  00369A                     __ptext71:
 10591                           	opt stack 0
 10592  00369A                     _SwSpi_Set_Dac_Sync_Pin:
 10593                           	opt stack 23
 10594                           
 10595                           ;incstack = 0
 10596                           ;SwSpi_Set_Dac_Sync_Pin@cPinMode stored from wreg
 10597  00369A  6E18               	movwf	SwSpi_Set_Dac_Sync_Pin@cPinMode,c
 10598                           
 10599                           ;SwSpiApp.c: 262: switch(cPinMode)
 10600  00369C  D004               	goto	l718
 10601  00369E                     
 10602                           ;SwSpiApp.c: 265: do { LATAbits.LATA2 = 0; } while(0);
 10603  00369E  9489               	bcf	3977,2,c	;volatile
 10604                           
 10605                           ;SwSpiApp.c: 266: break;
 10606  0036A0  0012               	return	
 10607  0036A2                     
 10608                           ;SwSpiApp.c: 269: do { LATAbits.LATA2 = 1; } while(0);
 10609  0036A2  8489               	bsf	3977,2,c	;volatile
 10610                           
 10611                           ;SwSpiApp.c: 271: }
 10612                           
 10613                           ;SwSpiApp.c: 270: break;
 10614  0036A4  0012               	return	
 10615  0036A6                     l718:
 10616  0036A6  5018               	movf	SwSpi_Set_Dac_Sync_Pin@cPinMode,w,c
 10617                           
 10618                           ; Switch size 1, requested type "space"
 10619                           ; Number of cases is 2, Range of values is 0 to 1
 10620                           ; switch strategies available:
 10621                           ; Name         Instructions Cycles
 10622                           ; simple_byte            7     4 (average)
 10623                           ;	Chosen strategy is simple_byte
 10624  0036A8  0A00               	xorlw	0	; case 0
 10625  0036AA  B4D8               	btfsc	status,2,c
 10626  0036AC  D7F8               	goto	l719
 10627  0036AE  0A01               	xorlw	1	; case 1
 10628  0036B0  A4D8               	btfss	status,2,c
 10629  0036B2  0012               	return	
 10630  0036B4  D7F6               	goto	l723
 10631  0036B6                     __end_of_SwSpi_Set_Dac_Sync_Pin:
 10632                           	opt stack 0
 10633                           tosu	equ	0xFFF
 10634                           tosh	equ	0xFFE
 10635                           tosl	equ	0xFFD
 10636                           pclath	equ	0xFFA
 10637                           tblptru	equ	0xFF8
 10638                           tblptrh	equ	0xFF7
 10639                           tblptrl	equ	0xFF6
 10640                           tablat	equ	0xFF5
 10641                           prodh	equ	0xFF4
 10642                           prodl	equ	0xFF3
 10643                           intcon	equ	0xFF2
 10644                           intcon2	equ	0xFF1
 10645                           postinc0	equ	0xFEE
 10646                           wreg	equ	0xFE8
 10647                           indf1	equ	0xFE7
 10648                           postdec1	equ	0xFE5
 10649                           fsr1h	equ	0xFE2
 10650                           fsr1l	equ	0xFE1
 10651                           indf2	equ	0xFDF
 10652                           postinc2	equ	0xFDE
 10653                           postdec2	equ	0xFDD
 10654                           fsr2h	equ	0xFDA
 10655                           fsr2l	equ	0xFD9
 10656                           status	equ	0xFD8
 10657                           
 10658 ;; *************** function _SWSPI_Synth_send_bits *****************
 10659 ;; Defined at:
 10660 ;;		line 67 in file "SwSpiApp.c"
 10661 ;; Parameters:    Size  Location     Type
 10662 ;;  phrType         1    wreg     enum E7554
 10663 ;;  data            4   33[COMRAM] unsigned long 
 10664 ;; Auto vars:     Size  Location     Type
 10665 ;;  phrType         1   37[BANK0 ] enum E7554
 10666 ;;  bitArray       32    0[BANK0 ] unsigned char [32]
 10667 ;;  mask            4   32[BANK0 ] unsigned long 
 10668 ;;  count           1   36[BANK0 ] unsigned char 
 10669 ;; Return value:  Size  Location     Type
 10670 ;;                  1    wreg      void 
 10671 ;; Registers used:
 10672 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10673 ;; Tracked objects:
 10674 ;;		On entry : 0/0
 10675 ;;		On exit  : 0/0
 10676 ;;		Unchanged: 0/0
 10677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10678 ;;      Params:         4       0       0       0       0       0       0
 10679 ;;      Locals:         0      38       0       0       0       0       0
 10680 ;;      Temps:          0       0       0       0       0       0       0
 10681 ;;      Totals:         4      38       0       0       0       0       0
 10682 ;;Total ram usage:       42 bytes
 10683 ;; Hardware stack levels used:    1
 10684 ;; Hardware stack levels required when called:    5
 10685 ;; This function calls:
 10686 ;;		_Make32bitsArray
 10687 ;;		_SwSpi_Clk_Pin
 10688 ;;		_SwSpi_Data_Pin
 10689 ;;		_ZeroBitsArray
 10690 ;; This function is called by:
 10691 ;;		_SWSPI_send_word
 10692 ;; This function uses a non-reentrant model
 10693 ;;
 10694                           
 10695                           	psect	text72
 10696  001FEE                     __ptext72:
 10697                           	opt stack 0
 10698  001FEE                     _SWSPI_Synth_send_bits:
 10699                           	opt stack 21
 10700                           
 10701                           ;incstack = 0
 10702                           ;SWSPI_Synth_send_bits@phrType stored from wreg
 10703  001FEE  0100               	movlb	0	; () banked
 10704  001FF0  6F85               	movwf	SWSPI_Synth_send_bits@phrType& (0+255),b
 10705                           
 10706                           ;SwSpiApp.c: 69: uint8_t count;
 10707                           ;SwSpiApp.c: 70: uint32_t mask = 0x1;
 10708  001FF2  0E01               	movlw	1
 10709  001FF4  0100               	movlb	0	; () banked
 10710  001FF6  6F80               	movwf	SWSPI_Synth_send_bits@mask& (0+255),b
 10711  001FF8  0E00               	movlw	0
 10712  001FFA  6F81               	movwf	(SWSPI_Synth_send_bits@mask+1)& (0+255),b
 10713  001FFC  0E00               	movlw	0
 10714  001FFE  6F82               	movwf	(SWSPI_Synth_send_bits@mask+2)& (0+255),b
 10715  002000  0E00               	movlw	0
 10716  002002  6F83               	movwf	(SWSPI_Synth_send_bits@mask+3)& (0+255),b
 10717                           
 10718                           ; BSR set to: 0
 10719                           ;SwSpiApp.c: 72: bool bitArray[32];
 10720                           ;SwSpiApp.c: 73: ZeroBitsArray(bitArray);
 10721  002004  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 10722  002006  6E20               	movwf	ZeroBitsArray@array,c
 10723  002008  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 10724  00200A  6E21               	movwf	ZeroBitsArray@array+1,c
 10725  00200C  EC3E  F01B         	call	_ZeroBitsArray	;wreg free
 10726                           
 10727                           ;SwSpiApp.c: 75: Make32bitsArray(bitArray, data);
 10728  002010  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 10729  002012  6E18               	movwf	Make32bitsArray@array,c
 10730  002014  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 10731  002016  6E19               	movwf	Make32bitsArray@array+1,c
 10732  002018  C022  F01A         	movff	SWSPI_Synth_send_bits@data,Make32bitsArray@data
 10733  00201C  C023  F01B         	movff	SWSPI_Synth_send_bits@data+1,Make32bitsArray@data+1
 10734  002020  C024  F01C         	movff	SWSPI_Synth_send_bits@data+2,Make32bitsArray@data+2
 10735  002024  C025  F01D         	movff	SWSPI_Synth_send_bits@data+3,Make32bitsArray@data+3
 10736  002028  ECF2  F015         	call	_Make32bitsArray	;wreg free
 10737                           
 10738                           ;SwSpiApp.c: 77: for (count = 0; count <= 31 ; count++)
 10739  00202C  0E00               	movlw	0
 10740  00202E  0100               	movlb	0	; () banked
 10741  002030  6F84               	movwf	SWSPI_Synth_send_bits@count& (0+255),b
 10742  002032                     l6592:
 10743                           
 10744                           ; BSR set to: 0
 10745  002032  0E1F               	movlw	31
 10746  002034  6584               	cpfsgt	SWSPI_Synth_send_bits@count& (0+255),b
 10747  002036  D001               	goto	l603
 10748  002038  D026               	goto	u6080
 10749  00203A                     l603:
 10750                           
 10751                           ; BSR set to: 0
 10752                           ;SwSpiApp.c: 78: {
 10753                           ;SwSpiApp.c: 80: SwSpi_Clk_Pin(phrType, 0);
 10754                           
 10755                           ; BSR set to: 0
 10756  00203A  0E00               	movlw	0
 10757  00203C  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 10758  00203E  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 10759  002040  ECA0  F016         	call	_SwSpi_Clk_Pin
 10760                           
 10761                           ;SwSpiApp.c: 82: if (bitArray[count])
 10762  002044  0100               	movlb	0	; () banked
 10763  002046  5184               	movf	SWSPI_Synth_send_bits@count& (0+255),w,b
 10764  002048  0D01               	mullw	1
 10765  00204A  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 10766  00204C  24F3               	addwf	prodl,w,c
 10767  00204E  6ED9               	movwf	fsr2l,c
 10768  002050  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 10769  002052  20F4               	addwfc	prodh,w,c
 10770  002054  6EDA               	movwf	fsr2h,c
 10771  002056  50DF               	movf	indf2,w,c
 10772  002058  B4D8               	btfsc	status,2,c
 10773  00205A  D006               	goto	l605
 10774                           
 10775                           ; BSR set to: 0
 10776                           ;SwSpiApp.c: 83: {
 10777                           ;SwSpiApp.c: 84: SwSpi_Data_Pin(phrType, 1);
 10778  00205C  0E01               	movlw	1
 10779  00205E  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 10780  002060  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 10781  002062  EC75  F016         	call	_SwSpi_Data_Pin
 10782                           
 10783                           ;SwSpiApp.c: 85: }
 10784  002066  D006               	goto	l606
 10785  002068                     l605:
 10786                           
 10787                           ;SwSpiApp.c: 86: else
 10788                           ;SwSpiApp.c: 87: {
 10789                           ;SwSpiApp.c: 88: SwSpi_Data_Pin(phrType, 0);
 10790  002068  0E00               	movlw	0
 10791  00206A  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 10792  00206C  0100               	movlb	0	; () banked
 10793  00206E  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 10794  002070  EC75  F016         	call	_SwSpi_Data_Pin
 10795  002074                     l606:
 10796                           
 10797                           ;SwSpiApp.c: 89: }
 10798                           ;SwSpiApp.c: 91: SwSpi_Clk_Pin(phrType, 1);
 10799  002074  0E01               	movlw	1
 10800  002076  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 10801  002078  0100               	movlb	0	; () banked
 10802  00207A  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 10803  00207C  ECA0  F016         	call	_SwSpi_Clk_Pin
 10804  002080  0100               	movlb	0	; () banked
 10805  002082  2B84               	incf	SWSPI_Synth_send_bits@count& (0+255),f,b
 10806  002084  D7D6               	goto	l6592
 10807  002086                     u6080:
 10808                           
 10809                           ; BSR set to: 0
 10810                           ;SwSpiApp.c: 92: }
 10811                           ;SwSpiApp.c: 94: _delay((unsigned long)((50)*(8000000/4000000.0)));
 10812                           
 10813                           ; BSR set to: 0
 10814  002086  0E21               	movlw	33
 10815  002088                     u8217:
 10816  002088  2EE8               	decfsz	wreg,f,c
 10817  00208A  D7FE               	bra	u8217
 10818  00208C  F000               	nop	
 10819                           
 10820                           ;SwSpiApp.c: 95: SwSpi_Data_Pin(phrType, 0);
 10821  00208E  0E00               	movlw	0
 10822  002090  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 10823  002092  0100               	movlb	0	; () banked
 10824  002094  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 10825  002096  EC75  F016         	call	_SwSpi_Data_Pin
 10826                           
 10827                           ;SwSpiApp.c: 96: SwSpi_Clk_Pin(phrType, 0);
 10828  00209A  0E00               	movlw	0
 10829  00209C  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 10830  00209E  0100               	movlb	0	; () banked
 10831  0020A0  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 10832  0020A2  ECA0  F016         	call	_SwSpi_Clk_Pin
 10833  0020A6  0012               	return		;funcret
 10834  0020A8                     __end_of_SWSPI_Synth_send_bits:
 10835                           	opt stack 0
 10836                           tosu	equ	0xFFF
 10837                           tosh	equ	0xFFE
 10838                           tosl	equ	0xFFD
 10839                           pclath	equ	0xFFA
 10840                           tblptru	equ	0xFF8
 10841                           tblptrh	equ	0xFF7
 10842                           tblptrl	equ	0xFF6
 10843                           tablat	equ	0xFF5
 10844                           prodh	equ	0xFF4
 10845                           prodl	equ	0xFF3
 10846                           intcon	equ	0xFF2
 10847                           intcon2	equ	0xFF1
 10848                           postinc0	equ	0xFEE
 10849                           wreg	equ	0xFE8
 10850                           indf1	equ	0xFE7
 10851                           postdec1	equ	0xFE5
 10852                           fsr1h	equ	0xFE2
 10853                           fsr1l	equ	0xFE1
 10854                           indf2	equ	0xFDF
 10855                           postinc2	equ	0xFDE
 10856                           postdec2	equ	0xFDD
 10857                           fsr2h	equ	0xFDA
 10858                           fsr2l	equ	0xFD9
 10859                           status	equ	0xFD8
 10860                           
 10861 ;; *************** function _ZeroBitsArray *****************
 10862 ;; Defined at:
 10863 ;;		line 29 in file "SystemCommon.c"
 10864 ;; Parameters:    Size  Location     Type
 10865 ;;  array           2   31[COMRAM] PTR unsigned char 
 10866 ;;		 -> SWSPI_Synth_send_bits@bitArray(32), 
 10867 ;; Auto vars:     Size  Location     Type
 10868 ;;		None
 10869 ;; Return value:  Size  Location     Type
 10870 ;;                  1    wreg      void 
 10871 ;; Registers used:
 10872 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10873 ;; Tracked objects:
 10874 ;;		On entry : 0/0
 10875 ;;		On exit  : 0/0
 10876 ;;		Unchanged: 0/0
 10877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10878 ;;      Params:         2       0       0       0       0       0       0
 10879 ;;      Locals:         0       0       0       0       0       0       0
 10880 ;;      Temps:          0       0       0       0       0       0       0
 10881 ;;      Totals:         2       0       0       0       0       0       0
 10882 ;;Total ram usage:        2 bytes
 10883 ;; Hardware stack levels used:    1
 10884 ;; Hardware stack levels required when called:    4
 10885 ;; This function calls:
 10886 ;;		_memset
 10887 ;; This function is called by:
 10888 ;;		_SWSPI_Synth_send_bits
 10889 ;; This function uses a non-reentrant model
 10890 ;;
 10891                           
 10892                           	psect	text73
 10893  00367C                     __ptext73:
 10894                           	opt stack 0
 10895  00367C                     _ZeroBitsArray:
 10896                           	opt stack 21
 10897                           
 10898                           ;SystemCommon.c: 31: memset(array, 0x0, 32);
 10899                           
 10900                           ;incstack = 0
 10901  00367C  C020  F018         	movff	ZeroBitsArray@array,memset@p1
 10902  003680  C021  F019         	movff	ZeroBitsArray@array+1,memset@p1+1
 10903  003684  0E00               	movlw	0
 10904  003686  6E1B               	movwf	memset@c+1,c
 10905  003688  0E00               	movlw	0
 10906  00368A  6E1A               	movwf	memset@c,c
 10907  00368C  0E00               	movlw	0
 10908  00368E  6E1D               	movwf	memset@n+1,c
 10909  003690  0E20               	movlw	32
 10910  003692  6E1C               	movwf	memset@n,c
 10911  003694  EC53  F01A         	call	_memset	;wreg free
 10912  003698  0012               	return		;funcret
 10913  00369A                     __end_of_ZeroBitsArray:
 10914                           	opt stack 0
 10915                           tosu	equ	0xFFF
 10916                           tosh	equ	0xFFE
 10917                           tosl	equ	0xFFD
 10918                           pclath	equ	0xFFA
 10919                           tblptru	equ	0xFF8
 10920                           tblptrh	equ	0xFF7
 10921                           tblptrl	equ	0xFF6
 10922                           tablat	equ	0xFF5
 10923                           prodh	equ	0xFF4
 10924                           prodl	equ	0xFF3
 10925                           intcon	equ	0xFF2
 10926                           intcon2	equ	0xFF1
 10927                           postinc0	equ	0xFEE
 10928                           wreg	equ	0xFE8
 10929                           indf1	equ	0xFE7
 10930                           postdec1	equ	0xFE5
 10931                           fsr1h	equ	0xFE2
 10932                           fsr1l	equ	0xFE1
 10933                           indf2	equ	0xFDF
 10934                           postinc2	equ	0xFDE
 10935                           postdec2	equ	0xFDD
 10936                           fsr2h	equ	0xFDA
 10937                           fsr2l	equ	0xFD9
 10938                           status	equ	0xFD8
 10939                           
 10940 ;; *************** function _memset *****************
 10941 ;; Defined at:
 10942 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 10943 ;; Parameters:    Size  Location     Type
 10944 ;;  p1              2   23[COMRAM] PTR void 
 10945 ;;		 -> GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dataRegArr(9), SWSPI_Synth_send_bits@bitArray(32), SynthReadData@Tx
      +Msg(27), 
 10946 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), 
 10947 ;;		 -> rxMsgData(20), rxMsgQueue(20), 
 10948 ;;  c               2   25[COMRAM] int 
 10949 ;;  n               2   27[COMRAM] unsigned int 
 10950 ;; Auto vars:     Size  Location     Type
 10951 ;;  p               2   29[COMRAM] PTR unsigned char 
 10952 ;;		 -> GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dataRegArr(9), SWSPI_Synth_send_bits@bitArray(32), SynthReadData@Tx
      +Msg(27), 
 10953 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), 
 10954 ;;		 -> rxMsgData(20), rxMsgQueue(20), 
 10955 ;; Return value:  Size  Location     Type
 10956 ;;                  2   23[COMRAM] PTR void 
 10957 ;; Registers used:
 10958 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10959 ;; Tracked objects:
 10960 ;;		On entry : 0/0
 10961 ;;		On exit  : 0/0
 10962 ;;		Unchanged: 0/0
 10963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10964 ;;      Params:         6       0       0       0       0       0       0
 10965 ;;      Locals:         2       0       0       0       0       0       0
 10966 ;;      Temps:          0       0       0       0       0       0       0
 10967 ;;      Totals:         8       0       0       0       0       0       0
 10968 ;;Total ram usage:        8 bytes
 10969 ;; Hardware stack levels used:    1
 10970 ;; Hardware stack levels required when called:    3
 10971 ;; This function calls:
 10972 ;;		Nothing
 10973 ;; This function is called by:
 10974 ;;		_ZeroArray
 10975 ;;		_ZeroBitsArray
 10976 ;; This function uses a non-reentrant model
 10977 ;;
 10978                           
 10979                           	psect	text74
 10980  0034A6                     __ptext74:
 10981                           	opt stack 0
 10982  0034A6                     _memset:
 10983                           	opt stack 25
 10984                           
 10985                           ;incstack = 0
 10986  0034A6  C018  F01E         	movff	memset@p1,memset@p
 10987  0034AA  C019  F01F         	movff	memset@p1+1,memset@p+1
 10988  0034AE  D008               	goto	l1887
 10989  0034B0                     l6436:
 10990  0034B0  C01E  FFD9         	movff	memset@p,fsr2l
 10991  0034B4  C01F  FFDA         	movff	memset@p+1,fsr2h
 10992  0034B8  C01A  FFDF         	movff	memset@c,indf2
 10993  0034BC  4A1E               	infsnz	memset@p,f,c
 10994  0034BE  2A1F               	incf	memset@p+1,f,c
 10995  0034C0                     l1887:
 10996  0034C0  061C               	decf	memset@n,f,c
 10997  0034C2  A0D8               	btfss	status,0,c
 10998  0034C4  061D               	decf	memset@n+1,f,c
 10999  0034C6  281C               	incf	memset@n,w,c
 11000  0034C8  E1F3               	bnz	l6436
 11001  0034CA  281D               	incf	memset@n+1,w,c
 11002  0034CC  B4D8               	btfsc	status,2,c
 11003  0034CE  0012               	return	
 11004  0034D0  D7EF               	goto	l1888
 11005  0034D2                     __end_of_memset:
 11006                           	opt stack 0
 11007                           tosu	equ	0xFFF
 11008                           tosh	equ	0xFFE
 11009                           tosl	equ	0xFFD
 11010                           pclath	equ	0xFFA
 11011                           tblptru	equ	0xFF8
 11012                           tblptrh	equ	0xFF7
 11013                           tblptrl	equ	0xFF6
 11014                           tablat	equ	0xFF5
 11015                           prodh	equ	0xFF4
 11016                           prodl	equ	0xFF3
 11017                           intcon	equ	0xFF2
 11018                           intcon2	equ	0xFF1
 11019                           postinc0	equ	0xFEE
 11020                           wreg	equ	0xFE8
 11021                           indf1	equ	0xFE7
 11022                           postdec1	equ	0xFE5
 11023                           fsr1h	equ	0xFE2
 11024                           fsr1l	equ	0xFE1
 11025                           indf2	equ	0xFDF
 11026                           postinc2	equ	0xFDE
 11027                           postdec2	equ	0xFDD
 11028                           fsr2h	equ	0xFDA
 11029                           fsr2l	equ	0xFD9
 11030                           status	equ	0xFD8
 11031                           
 11032 ;; *************** function _Make32bitsArray *****************
 11033 ;; Defined at:
 11034 ;;		line 79 in file "SystemCommon.c"
 11035 ;; Parameters:    Size  Location     Type
 11036 ;;  array           2   23[COMRAM] PTR unsigned char 
 11037 ;;		 -> SWSPI_Synth_send_bits@bitArray(32), 
 11038 ;;  data            4   25[COMRAM] unsigned long 
 11039 ;; Auto vars:     Size  Location     Type
 11040 ;;  idx             2   31[COMRAM] int 
 11041 ;; Return value:  Size  Location     Type
 11042 ;;                  1    wreg      void 
 11043 ;; Registers used:
 11044 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11045 ;; Tracked objects:
 11046 ;;		On entry : 0/0
 11047 ;;		On exit  : 0/0
 11048 ;;		Unchanged: 0/0
 11049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11050 ;;      Params:         6       0       0       0       0       0       0
 11051 ;;      Locals:         2       0       0       0       0       0       0
 11052 ;;      Temps:          2       0       0       0       0       0       0
 11053 ;;      Totals:        10       0       0       0       0       0       0
 11054 ;;Total ram usage:       10 bytes
 11055 ;; Hardware stack levels used:    1
 11056 ;; Hardware stack levels required when called:    3
 11057 ;; This function calls:
 11058 ;;		Nothing
 11059 ;; This function is called by:
 11060 ;;		_SWSPI_Synth_send_bits
 11061 ;; This function uses a non-reentrant model
 11062 ;;
 11063                           
 11064                           	psect	text75
 11065  002BE4                     __ptext75:
 11066                           	opt stack 0
 11067  002BE4                     _Make32bitsArray:
 11068                           	opt stack 22
 11069                           
 11070                           ;SystemCommon.c: 81: for(int idx = 0; idx <= 32; idx++)
 11071                           
 11072                           ;incstack = 0
 11073  002BE4  0E00               	movlw	0
 11074  002BE6  6E21               	movwf	Make32bitsArray@idx+1,c
 11075  002BE8  0E00               	movlw	0
 11076  002BEA  6E20               	movwf	Make32bitsArray@idx,c
 11077  002BEC                     l6482:
 11078  002BEC  BE21               	btfsc	Make32bitsArray@idx+1,7,c
 11079  002BEE  D006               	goto	l1312
 11080  002BF0  5021               	movf	Make32bitsArray@idx+1,w,c
 11081  002BF2  E123               	bnz	l1314
 11082  002BF4  0E21               	movlw	33
 11083  002BF6  5C20               	subwf	Make32bitsArray@idx,w,c
 11084  002BF8  B0D8               	btfsc	status,0,c
 11085  002BFA  0012               	return	
 11086  002BFC                     l1312:
 11087                           
 11088                           ;SystemCommon.c: 82: {
 11089                           ;SystemCommon.c: 83: array[32 - idx - 1] = data % 2;
 11090  002BFC  0E01               	movlw	1
 11091  002BFE  2420               	addwf	Make32bitsArray@idx,w,c
 11092  002C00  6E1E               	movwf	??_Make32bitsArray& (0+255),c
 11093  002C02  0E00               	movlw	0
 11094  002C04  2021               	addwfc	Make32bitsArray@idx+1,w,c
 11095  002C06  6E1F               	movwf	(??_Make32bitsArray+1)& (0+255),c
 11096  002C08  1E1E               	comf	??_Make32bitsArray,f,c
 11097  002C0A  1E1F               	comf	??_Make32bitsArray+1,f,c
 11098  002C0C  4A1E               	infsnz	??_Make32bitsArray,f,c
 11099  002C0E  2A1F               	incf	??_Make32bitsArray+1,f,c
 11100  002C10  0E20               	movlw	32
 11101  002C12  261E               	addwf	??_Make32bitsArray,f,c
 11102  002C14  0E00               	movlw	0
 11103  002C16  221F               	addwfc	??_Make32bitsArray+1,f,c
 11104  002C18  501E               	movf	??_Make32bitsArray,w,c
 11105  002C1A  2418               	addwf	Make32bitsArray@array,w,c
 11106  002C1C  6ED9               	movwf	fsr2l,c
 11107  002C1E  501F               	movf	??_Make32bitsArray+1,w,c
 11108  002C20  2019               	addwfc	Make32bitsArray@array+1,w,c
 11109  002C22  6EDA               	movwf	fsr2h,c
 11110  002C24  501A               	movf	Make32bitsArray@data,w,c
 11111  002C26  0B01               	andlw	1
 11112  002C28  6EDF               	movwf	indf2,c
 11113                           
 11114                           ;SystemCommon.c: 84: data /= 2;
 11115  002C2A  90D8               	bcf	status,0,c
 11116  002C2C  321D               	rrcf	Make32bitsArray@data+3,f,c
 11117  002C2E  321C               	rrcf	Make32bitsArray@data+2,f,c
 11118  002C30  321B               	rrcf	Make32bitsArray@data+1,f,c
 11119  002C32  321A               	rrcf	Make32bitsArray@data,f,c
 11120  002C34  4A20               	infsnz	Make32bitsArray@idx,f,c
 11121  002C36  2A21               	incf	Make32bitsArray@idx+1,f,c
 11122  002C38  D7D9               	goto	l6482
 11123  002C3A                     l1314:
 11124  002C3A  0012               	return		;funcret
 11125  002C3C                     __end_of_Make32bitsArray:
 11126                           	opt stack 0
 11127                           tosu	equ	0xFFF
 11128                           tosh	equ	0xFFE
 11129                           tosl	equ	0xFFD
 11130                           pclath	equ	0xFFA
 11131                           tblptru	equ	0xFF8
 11132                           tblptrh	equ	0xFF7
 11133                           tblptrl	equ	0xFF6
 11134                           tablat	equ	0xFF5
 11135                           prodh	equ	0xFF4
 11136                           prodl	equ	0xFF3
 11137                           intcon	equ	0xFF2
 11138                           intcon2	equ	0xFF1
 11139                           postinc0	equ	0xFEE
 11140                           wreg	equ	0xFE8
 11141                           indf1	equ	0xFE7
 11142                           postdec1	equ	0xFE5
 11143                           fsr1h	equ	0xFE2
 11144                           fsr1l	equ	0xFE1
 11145                           indf2	equ	0xFDF
 11146                           postinc2	equ	0xFDE
 11147                           postdec2	equ	0xFDD
 11148                           fsr2h	equ	0xFDA
 11149                           fsr2l	equ	0xFD9
 11150                           status	equ	0xFD8
 11151                           
 11152 ;; *************** function _SWSPI_DAC_send_bits *****************
 11153 ;; Defined at:
 11154 ;;		line 43 in file "SwSpiApp.c"
 11155 ;; Parameters:    Size  Location     Type
 11156 ;;  phrType         1    wreg     enum E7554
 11157 ;;  data            1   25[COMRAM] unsigned char 
 11158 ;; Auto vars:     Size  Location     Type
 11159 ;;  phrType         1   27[COMRAM] enum E7554
 11160 ;;  count           1   26[COMRAM] unsigned char 
 11161 ;; Return value:  Size  Location     Type
 11162 ;;                  1    wreg      void 
 11163 ;; Registers used:
 11164 ;;		wreg, status,2, status,0, cstack
 11165 ;; Tracked objects:
 11166 ;;		On entry : 0/0
 11167 ;;		On exit  : 0/0
 11168 ;;		Unchanged: 0/0
 11169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11170 ;;      Params:         1       0       0       0       0       0       0
 11171 ;;      Locals:         2       0       0       0       0       0       0
 11172 ;;      Temps:          0       0       0       0       0       0       0
 11173 ;;      Totals:         3       0       0       0       0       0       0
 11174 ;;Total ram usage:        3 bytes
 11175 ;; Hardware stack levels used:    1
 11176 ;; Hardware stack levels required when called:    4
 11177 ;; This function calls:
 11178 ;;		_SwSpi_Clk_Pin
 11179 ;;		_SwSpi_Data_Pin
 11180 ;; This function is called by:
 11181 ;;		_SWSPI_send_word
 11182 ;; This function uses a non-reentrant model
 11183 ;;
 11184                           
 11185                           	psect	text76
 11186  002C3C                     __ptext76:
 11187                           	opt stack 0
 11188  002C3C                     _SWSPI_DAC_send_bits:
 11189                           	opt stack 22
 11190                           
 11191                           ;incstack = 0
 11192                           ;SWSPI_DAC_send_bits@phrType stored from wreg
 11193  002C3C  6E1C               	movwf	SWSPI_DAC_send_bits@phrType,c
 11194                           
 11195                           ;SwSpiApp.c: 45: uint8_t count;
 11196                           ;SwSpiApp.c: 46: for (count = 8; count ; count--, data <<= 1)
 11197  002C3E  0E08               	movlw	8
 11198  002C40  6E1B               	movwf	SWSPI_DAC_send_bits@count,c
 11199  002C42  D01A               	goto	l595
 11200  002C44                     
 11201                           ;SwSpiApp.c: 47: {
 11202                           ;SwSpiApp.c: 48: SwSpi_Clk_Pin(phrType, 1);
 11203  002C44  0E01               	movlw	1
 11204  002C46  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 11205  002C48  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11206  002C4A  ECA0  F016         	call	_SwSpi_Clk_Pin
 11207                           
 11208                           ;SwSpiApp.c: 50: if (data & 0X80)
 11209  002C4E  AE1A               	btfss	SWSPI_DAC_send_bits@data,7,c
 11210  002C50  D006               	goto	l597
 11211                           
 11212                           ;SwSpiApp.c: 51: {
 11213                           ;SwSpiApp.c: 53: SwSpi_Data_Pin(phrType, 1);
 11214  002C52  0E01               	movlw	1
 11215  002C54  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 11216  002C56  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11217  002C58  EC75  F016         	call	_SwSpi_Data_Pin
 11218                           
 11219                           ;SwSpiApp.c: 54: }
 11220  002C5C  D005               	goto	l598
 11221  002C5E                     l597:
 11222                           
 11223                           ;SwSpiApp.c: 55: else
 11224                           ;SwSpiApp.c: 56: {
 11225                           ;SwSpiApp.c: 57: SwSpi_Data_Pin(phrType, 0);
 11226  002C5E  0E00               	movlw	0
 11227  002C60  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 11228  002C62  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11229  002C64  EC75  F016         	call	_SwSpi_Data_Pin
 11230  002C68                     l598:
 11231                           
 11232                           ;SwSpiApp.c: 58: }
 11233                           ;SwSpiApp.c: 60: SwSpi_Clk_Pin(phrType, 0);
 11234  002C68  0E00               	movlw	0
 11235  002C6A  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 11236  002C6C  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11237  002C6E  ECA0  F016         	call	_SwSpi_Clk_Pin
 11238  002C72  061B               	decf	SWSPI_DAC_send_bits@count,f,c
 11239  002C74  90D8               	bcf	status,0,c
 11240  002C76  361A               	rlcf	SWSPI_DAC_send_bits@data,f,c
 11241  002C78                     l595:
 11242  002C78  501B               	movf	SWSPI_DAC_send_bits@count,w,c
 11243  002C7A  A4D8               	btfss	status,2,c
 11244  002C7C  D7E3               	goto	l596
 11245                           
 11246                           ;SwSpiApp.c: 61: }
 11247                           ;SwSpiApp.c: 63: SwSpi_Data_Pin(phrType, 0);
 11248  002C7E  0E00               	movlw	0
 11249  002C80  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 11250  002C82  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11251  002C84  EC75  F016         	call	_SwSpi_Data_Pin
 11252                           
 11253                           ;SwSpiApp.c: 64: SwSpi_Clk_Pin(phrType, 0);
 11254  002C88  0E00               	movlw	0
 11255  002C8A  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 11256  002C8C  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11257  002C8E  ECA0  F016         	call	_SwSpi_Clk_Pin
 11258  002C92  0012               	return		;funcret
 11259  002C94                     __end_of_SWSPI_DAC_send_bits:
 11260                           	opt stack 0
 11261                           tosu	equ	0xFFF
 11262                           tosh	equ	0xFFE
 11263                           tosl	equ	0xFFD
 11264                           pclath	equ	0xFFA
 11265                           tblptru	equ	0xFF8
 11266                           tblptrh	equ	0xFF7
 11267                           tblptrl	equ	0xFF6
 11268                           tablat	equ	0xFF5
 11269                           prodh	equ	0xFF4
 11270                           prodl	equ	0xFF3
 11271                           intcon	equ	0xFF2
 11272                           intcon2	equ	0xFF1
 11273                           postinc0	equ	0xFEE
 11274                           wreg	equ	0xFE8
 11275                           indf1	equ	0xFE7
 11276                           postdec1	equ	0xFE5
 11277                           fsr1h	equ	0xFE2
 11278                           fsr1l	equ	0xFE1
 11279                           indf2	equ	0xFDF
 11280                           postinc2	equ	0xFDE
 11281                           postdec2	equ	0xFDD
 11282                           fsr2h	equ	0xFDA
 11283                           fsr2l	equ	0xFD9
 11284                           status	equ	0xFD8
 11285                           
 11286 ;; *************** function _SwSpi_Data_Pin *****************
 11287 ;; Defined at:
 11288 ;;		line 103 in file "SwSpiApp.c"
 11289 ;; Parameters:    Size  Location     Type
 11290 ;;  phrType         1    wreg     enum E7554
 11291 ;;  cPinMode        1   23[COMRAM] unsigned char 
 11292 ;; Auto vars:     Size  Location     Type
 11293 ;;  phrType         1   24[COMRAM] enum E7554
 11294 ;; Return value:  Size  Location     Type
 11295 ;;                  1    wreg      void 
 11296 ;; Registers used:
 11297 ;;		wreg, status,2, status,0
 11298 ;; Tracked objects:
 11299 ;;		On entry : 0/0
 11300 ;;		On exit  : 0/0
 11301 ;;		Unchanged: 0/0
 11302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11303 ;;      Params:         1       0       0       0       0       0       0
 11304 ;;      Locals:         1       0       0       0       0       0       0
 11305 ;;      Temps:          0       0       0       0       0       0       0
 11306 ;;      Totals:         2       0       0       0       0       0       0
 11307 ;;Total ram usage:        2 bytes
 11308 ;; Hardware stack levels used:    1
 11309 ;; Hardware stack levels required when called:    3
 11310 ;; This function calls:
 11311 ;;		Nothing
 11312 ;; This function is called by:
 11313 ;;		_SWSPI_DAC_send_bits
 11314 ;;		_SWSPI_Synth_send_bits
 11315 ;; This function uses a non-reentrant model
 11316 ;;
 11317                           
 11318                           	psect	text77
 11319  002CEA                     __ptext77:
 11320                           	opt stack 0
 11321  002CEA                     _SwSpi_Data_Pin:
 11322                           	opt stack 22
 11323                           
 11324                           ;incstack = 0
 11325                           ;SwSpi_Data_Pin@phrType stored from wreg
 11326  002CEA  6E19               	movwf	SwSpi_Data_Pin@phrType,c
 11327                           
 11328                           ;SwSpiApp.c: 105: switch(phrType)
 11329  002CEC  D01E               	goto	l610
 11330  002CEE                     
 11331                           ;SwSpiApp.c: 108: if(cPinMode == 1)
 11332  002CEE  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 11333  002CF0  A4D8               	btfss	status,2,c
 11334  002CF2  D002               	goto	l612
 11335                           
 11336                           ;SwSpiApp.c: 109: {
 11337                           ;SwSpiApp.c: 110: do { LATDbits.LATD0 = 1; } while(0);
 11338  002CF4  808C               	bsf	3980,0,c	;volatile
 11339                           
 11340                           ;SwSpiApp.c: 111: }
 11341  002CF6  0012               	return	
 11342  002CF8                     l612:
 11343                           
 11344                           ;SwSpiApp.c: 112: else if (cPinMode == 0)
 11345  002CF8  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 11346  002CFA  A4D8               	btfss	status,2,c
 11347  002CFC  0012               	return	
 11348                           
 11349                           ;SwSpiApp.c: 113: {
 11350                           ;SwSpiApp.c: 114: do { LATDbits.LATD0 = 0; } while(0);
 11351  002CFE  908C               	bcf	3980,0,c	;volatile
 11352                           
 11353                           ;SwSpiApp.c: 115: }
 11354                           ;SwSpiApp.c: 116: break;
 11355  002D00  0012               	return	
 11356  002D02                     
 11357                           ;SwSpiApp.c: 119: if(cPinMode == 1)
 11358  002D02  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 11359  002D04  A4D8               	btfss	status,2,c
 11360  002D06  D002               	goto	l621
 11361                           
 11362                           ;SwSpiApp.c: 120: {
 11363                           ;SwSpiApp.c: 121: do { LATCbits.LATC5 = 1; } while(0);
 11364  002D08  8A8B               	bsf	3979,5,c	;volatile
 11365                           
 11366                           ;SwSpiApp.c: 122: }
 11367  002D0A  0012               	return	
 11368  002D0C                     l621:
 11369                           
 11370                           ;SwSpiApp.c: 123: else if (cPinMode == 0)
 11371  002D0C  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 11372  002D0E  A4D8               	btfss	status,2,c
 11373  002D10  0012               	return	
 11374                           
 11375                           ;SwSpiApp.c: 124: {
 11376                           ;SwSpiApp.c: 125: do { LATCbits.LATC5 = 0; } while(0);
 11377  002D12  9A8B               	bcf	3979,5,c	;volatile
 11378                           
 11379                           ;SwSpiApp.c: 126: }
 11380                           ;SwSpiApp.c: 127: break;
 11381  002D14  0012               	return	
 11382  002D16                     
 11383                           ;SwSpiApp.c: 130: if(cPinMode == 1)
 11384  002D16  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 11385  002D18  A4D8               	btfss	status,2,c
 11386  002D1A  D002               	goto	l629
 11387                           
 11388                           ;SwSpiApp.c: 131: {
 11389                           ;SwSpiApp.c: 132: do { LATAbits.LATA4 = 1; } while(0);
 11390  002D1C  8889               	bsf	3977,4,c	;volatile
 11391                           
 11392                           ;SwSpiApp.c: 133: }
 11393  002D1E  0012               	return	
 11394  002D20                     l629:
 11395                           
 11396                           ;SwSpiApp.c: 134: else if (cPinMode == 0)
 11397  002D20  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 11398  002D22  A4D8               	btfss	status,2,c
 11399  002D24  0012               	return	
 11400                           
 11401                           ;SwSpiApp.c: 135: {
 11402                           ;SwSpiApp.c: 136: do { LATAbits.LATA4 = 0; } while(0);
 11403  002D26  9889               	bcf	3977,4,c	;volatile
 11404                           
 11405                           ;SwSpiApp.c: 139: }
 11406                           
 11407                           ;SwSpiApp.c: 137: }
 11408                           ;SwSpiApp.c: 138: break;
 11409  002D28  0012               	return	
 11410  002D2A                     l610:
 11411  002D2A  5019               	movf	SwSpi_Data_Pin@phrType,w,c
 11412                           
 11413                           ; Switch size 1, requested type "space"
 11414                           ; Number of cases is 3, Range of values is 0 to 2
 11415                           ; switch strategies available:
 11416                           ; Name         Instructions Cycles
 11417                           ; simple_byte           10     6 (average)
 11418                           ;	Chosen strategy is simple_byte
 11419  002D2C  0A00               	xorlw	0	; case 0
 11420  002D2E  B4D8               	btfsc	status,2,c
 11421  002D30  D7DE               	goto	l611
 11422  002D32  0A01               	xorlw	1	; case 1
 11423  002D34  B4D8               	btfsc	status,2,c
 11424  002D36  D7E5               	goto	l620
 11425  002D38  0A03               	xorlw	3	; case 2
 11426  002D3A  A4D8               	btfss	status,2,c
 11427  002D3C  0012               	return	
 11428  002D3E  D7EB               	goto	l628
 11429  002D40                     __end_of_SwSpi_Data_Pin:
 11430                           	opt stack 0
 11431                           tosu	equ	0xFFF
 11432                           tosh	equ	0xFFE
 11433                           tosl	equ	0xFFD
 11434                           pclath	equ	0xFFA
 11435                           tblptru	equ	0xFF8
 11436                           tblptrh	equ	0xFF7
 11437                           tblptrl	equ	0xFF6
 11438                           tablat	equ	0xFF5
 11439                           prodh	equ	0xFF4
 11440                           prodl	equ	0xFF3
 11441                           intcon	equ	0xFF2
 11442                           intcon2	equ	0xFF1
 11443                           postinc0	equ	0xFEE
 11444                           wreg	equ	0xFE8
 11445                           indf1	equ	0xFE7
 11446                           postdec1	equ	0xFE5
 11447                           fsr1h	equ	0xFE2
 11448                           fsr1l	equ	0xFE1
 11449                           indf2	equ	0xFDF
 11450                           postinc2	equ	0xFDE
 11451                           postdec2	equ	0xFDD
 11452                           fsr2h	equ	0xFDA
 11453                           fsr2l	equ	0xFD9
 11454                           status	equ	0xFD8
 11455                           
 11456 ;; *************** function _SwSpi_Clk_Pin *****************
 11457 ;; Defined at:
 11458 ;;		line 142 in file "SwSpiApp.c"
 11459 ;; Parameters:    Size  Location     Type
 11460 ;;  phrType         1    wreg     enum E7554
 11461 ;;  cPinMode        1   23[COMRAM] unsigned char 
 11462 ;; Auto vars:     Size  Location     Type
 11463 ;;  phrType         1   24[COMRAM] enum E7554
 11464 ;; Return value:  Size  Location     Type
 11465 ;;                  1    wreg      void 
 11466 ;; Registers used:
 11467 ;;		wreg, status,2, status,0
 11468 ;; Tracked objects:
 11469 ;;		On entry : 0/0
 11470 ;;		On exit  : 0/0
 11471 ;;		Unchanged: 0/0
 11472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11473 ;;      Params:         1       0       0       0       0       0       0
 11474 ;;      Locals:         1       0       0       0       0       0       0
 11475 ;;      Temps:          0       0       0       0       0       0       0
 11476 ;;      Totals:         2       0       0       0       0       0       0
 11477 ;;Total ram usage:        2 bytes
 11478 ;; Hardware stack levels used:    1
 11479 ;; Hardware stack levels required when called:    3
 11480 ;; This function calls:
 11481 ;;		Nothing
 11482 ;; This function is called by:
 11483 ;;		_SWSPI_DAC_send_bits
 11484 ;;		_SWSPI_Synth_send_bits
 11485 ;;		_SwSpi_Synth_Toggle_Clock
 11486 ;; This function uses a non-reentrant model
 11487 ;;
 11488                           
 11489                           	psect	text78
 11490  002D40                     __ptext78:
 11491                           	opt stack 0
 11492  002D40                     _SwSpi_Clk_Pin:
 11493                           	opt stack 22
 11494                           
 11495                           ;incstack = 0
 11496                           ;SwSpi_Clk_Pin@phrType stored from wreg
 11497  002D40  6E19               	movwf	SwSpi_Clk_Pin@phrType,c
 11498                           
 11499                           ;SwSpiApp.c: 144: switch(phrType)
 11500  002D42  D01E               	goto	l639
 11501  002D44                     
 11502                           ;SwSpiApp.c: 147: if(cPinMode == 1)
 11503  002D44  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 11504  002D46  A4D8               	btfss	status,2,c
 11505  002D48  D002               	goto	l641
 11506                           
 11507                           ;SwSpiApp.c: 148: {
 11508                           ;SwSpiApp.c: 149: do { LATCbits.LATC3 = 1; } while(0);
 11509  002D4A  868B               	bsf	3979,3,c	;volatile
 11510                           
 11511                           ;SwSpiApp.c: 150: }
 11512  002D4C  0012               	return	
 11513  002D4E                     l641:
 11514                           
 11515                           ;SwSpiApp.c: 151: else if (cPinMode == 0)
 11516  002D4E  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 11517  002D50  A4D8               	btfss	status,2,c
 11518  002D52  0012               	return	
 11519                           
 11520                           ;SwSpiApp.c: 152: {
 11521                           ;SwSpiApp.c: 153: do { LATCbits.LATC3 = 0; } while(0);
 11522  002D54  968B               	bcf	3979,3,c	;volatile
 11523                           
 11524                           ;SwSpiApp.c: 154: }
 11525                           ;SwSpiApp.c: 155: break;
 11526  002D56  0012               	return	
 11527  002D58                     
 11528                           ;SwSpiApp.c: 158: if(cPinMode == 1)
 11529  002D58  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 11530  002D5A  A4D8               	btfss	status,2,c
 11531  002D5C  D002               	goto	l650
 11532                           
 11533                           ;SwSpiApp.c: 159: {
 11534                           ;SwSpiApp.c: 160: do { LATCbits.LATC4 = 1; } while(0);
 11535  002D5E  888B               	bsf	3979,4,c	;volatile
 11536                           
 11537                           ;SwSpiApp.c: 161: }
 11538  002D60  0012               	return	
 11539  002D62                     l650:
 11540                           
 11541                           ;SwSpiApp.c: 162: else if (cPinMode == 0)
 11542  002D62  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 11543  002D64  A4D8               	btfss	status,2,c
 11544  002D66  0012               	return	
 11545                           
 11546                           ;SwSpiApp.c: 163: {
 11547                           ;SwSpiApp.c: 164: do { LATCbits.LATC4 = 0; } while(0);
 11548  002D68  988B               	bcf	3979,4,c	;volatile
 11549                           
 11550                           ;SwSpiApp.c: 165: }
 11551                           ;SwSpiApp.c: 167: break;
 11552  002D6A  0012               	return	
 11553  002D6C                     
 11554                           ;SwSpiApp.c: 170: if(cPinMode == 1)
 11555  002D6C  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 11556  002D6E  A4D8               	btfss	status,2,c
 11557  002D70  D002               	goto	l658
 11558                           
 11559                           ;SwSpiApp.c: 171: {
 11560                           ;SwSpiApp.c: 172: do { LATAbits.LATA3 = 1; } while(0);
 11561  002D72  8689               	bsf	3977,3,c	;volatile
 11562                           
 11563                           ;SwSpiApp.c: 173: }
 11564  002D74  0012               	return	
 11565  002D76                     l658:
 11566                           
 11567                           ;SwSpiApp.c: 174: else if (cPinMode == 0)
 11568  002D76  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 11569  002D78  A4D8               	btfss	status,2,c
 11570  002D7A  0012               	return	
 11571                           
 11572                           ;SwSpiApp.c: 175: {
 11573                           ;SwSpiApp.c: 176: do { LATAbits.LATA3 = 0; } while(0);
 11574  002D7C  9689               	bcf	3977,3,c	;volatile
 11575                           
 11576                           ;SwSpiApp.c: 179: }
 11577                           
 11578                           ;SwSpiApp.c: 177: }
 11579                           ;SwSpiApp.c: 178: break;
 11580  002D7E  0012               	return	
 11581  002D80                     l639:
 11582  002D80  5019               	movf	SwSpi_Clk_Pin@phrType,w,c
 11583                           
 11584                           ; Switch size 1, requested type "space"
 11585                           ; Number of cases is 3, Range of values is 0 to 2
 11586                           ; switch strategies available:
 11587                           ; Name         Instructions Cycles
 11588                           ; simple_byte           10     6 (average)
 11589                           ;	Chosen strategy is simple_byte
 11590  002D82  0A00               	xorlw	0	; case 0
 11591  002D84  B4D8               	btfsc	status,2,c
 11592  002D86  D7DE               	goto	l640
 11593  002D88  0A01               	xorlw	1	; case 1
 11594  002D8A  B4D8               	btfsc	status,2,c
 11595  002D8C  D7E5               	goto	l649
 11596  002D8E  0A03               	xorlw	3	; case 2
 11597  002D90  A4D8               	btfss	status,2,c
 11598  002D92  0012               	return	
 11599  002D94  D7EB               	goto	l657
 11600  002D96                     __end_of_SwSpi_Clk_Pin:
 11601                           	opt stack 0
 11602                           tosu	equ	0xFFF
 11603                           tosh	equ	0xFFE
 11604                           tosl	equ	0xFFD
 11605                           pclath	equ	0xFFA
 11606                           tblptru	equ	0xFF8
 11607                           tblptrh	equ	0xFF7
 11608                           tblptrl	equ	0xFF6
 11609                           tablat	equ	0xFF5
 11610                           prodh	equ	0xFF4
 11611                           prodl	equ	0xFF3
 11612                           intcon	equ	0xFF2
 11613                           intcon2	equ	0xFF1
 11614                           postinc0	equ	0xFEE
 11615                           wreg	equ	0xFE8
 11616                           indf1	equ	0xFE7
 11617                           postdec1	equ	0xFE5
 11618                           fsr1h	equ	0xFE2
 11619                           fsr1l	equ	0xFE1
 11620                           indf2	equ	0xFDF
 11621                           postinc2	equ	0xFDE
 11622                           postdec2	equ	0xFDD
 11623                           fsr2h	equ	0xFDA
 11624                           fsr2l	equ	0xFD9
 11625                           status	equ	0xFD8
 11626                           
 11627 ;; *************** function _ReadIntFromEeprom *****************
 11628 ;; Defined at:
 11629 ;;		line 97 in file "SystemCommon.c"
 11630 ;; Parameters:    Size  Location     Type
 11631 ;;  address         1    wreg     unsigned char 
 11632 ;;  numOfByes       2   25[COMRAM] int 
 11633 ;; Auto vars:     Size  Location     Type
 11634 ;;  address         1   37[COMRAM] unsigned char 
 11635 ;;  retVal          4   33[COMRAM] unsigned long 
 11636 ;; Return value:  Size  Location     Type
 11637 ;;                  4   25[COMRAM] unsigned long 
 11638 ;; Registers used:
 11639 ;;		wreg, status,2, status,0, cstack
 11640 ;; Tracked objects:
 11641 ;;		On entry : 0/0
 11642 ;;		On exit  : 0/0
 11643 ;;		Unchanged: 0/0
 11644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11645 ;;      Params:         4       0       0       0       0       0       0
 11646 ;;      Locals:         5       0       0       0       0       0       0
 11647 ;;      Temps:          4       0       0       0       0       0       0
 11648 ;;      Totals:        13       0       0       0       0       0       0
 11649 ;;Total ram usage:       13 bytes
 11650 ;; Hardware stack levels used:    1
 11651 ;; Hardware stack levels required when called:    5
 11652 ;; This function calls:
 11653 ;;		_EepromRead
 11654 ;; This function is called by:
 11655 ;;		_DacInit
 11656 ;; This function uses a non-reentrant model
 11657 ;;
 11658                           
 11659                           	psect	text79
 11660  002A12                     __ptext79:
 11661                           	opt stack 0
 11662  002A12                     _ReadIntFromEeprom:
 11663                           	opt stack 23
 11664                           
 11665                           ;incstack = 0
 11666                           ;ReadIntFromEeprom@address stored from wreg
 11667  002A12  6E26               	movwf	ReadIntFromEeprom@address,c
 11668                           
 11669                           ;SystemCommon.c: 99: uint32_t retVal = 0x00;
 11670  002A14  0E00               	movlw	0
 11671  002A16  6E22               	movwf	ReadIntFromEeprom@retVal,c
 11672  002A18  0E00               	movlw	0
 11673  002A1A  6E23               	movwf	ReadIntFromEeprom@retVal+1,c
 11674  002A1C  0E00               	movlw	0
 11675  002A1E  6E24               	movwf	ReadIntFromEeprom@retVal+2,c
 11676  002A20  0E00               	movlw	0
 11677  002A22  6E25               	movwf	ReadIntFromEeprom@retVal+3,c
 11678                           
 11679                           ;SystemCommon.c: 101: if(numOfByes == 2)
 11680  002A24  0E02               	movlw	2
 11681  002A26  181A               	xorwf	ReadIntFromEeprom@numOfByes,w,c
 11682  002A28  101B               	iorwf	ReadIntFromEeprom@numOfByes+1,w,c
 11683  002A2A  A4D8               	btfss	status,2,c
 11684  002A2C  D018               	goto	l1323
 11685                           
 11686                           ;SystemCommon.c: 102: {
 11687                           ;SystemCommon.c: 103: retVal = (EepromRead(address + 0) << 8) | (EepromRead(address + 1)
      +                          );
 11688  002A2E  5026               	movf	ReadIntFromEeprom@address,w,c
 11689  002A30  EC0C  F01C         	call	_EepromRead
 11690  002A34  6E1E               	movwf	??_ReadIntFromEeprom& (0+255),c
 11691  002A36  501E               	movf	??_ReadIntFromEeprom,w,c
 11692  002A38  6E20               	movwf	(??_ReadIntFromEeprom+2)& (0+255),c
 11693  002A3A  6A1F               	clrf	(??_ReadIntFromEeprom+1)& (0+255),c
 11694  002A3C  2826               	incf	ReadIntFromEeprom@address,w,c
 11695  002A3E  EC0C  F01C         	call	_EepromRead
 11696  002A42  6E21               	movwf	(??_ReadIntFromEeprom+3)& (0+255),c
 11697  002A44  5021               	movf	??_ReadIntFromEeprom+3,w,c
 11698  002A46  121F               	iorwf	??_ReadIntFromEeprom+1,f,c
 11699  002A48  0E00               	movlw	0
 11700  002A4A  1220               	iorwf	??_ReadIntFromEeprom+2,f,c
 11701  002A4C  C01F  F022         	movff	??_ReadIntFromEeprom+1,ReadIntFromEeprom@retVal
 11702  002A50  C020  F023         	movff	??_ReadIntFromEeprom+2,ReadIntFromEeprom@retVal+1
 11703  002A54  0E00               	movlw	0
 11704  002A56  BE23               	btfsc	ReadIntFromEeprom@retVal+1,7,c
 11705  002A58  0EFF               	movlw	-1
 11706  002A5A  6E24               	movwf	ReadIntFromEeprom@retVal+2,c
 11707  002A5C  6E25               	movwf	ReadIntFromEeprom@retVal+3,c
 11708  002A5E                     l1323:
 11709                           
 11710                           ;SystemCommon.c: 108: }
 11711                           ;SystemCommon.c: 111: return retVal;
 11712                           
 11713                           ;SystemCommon.c: 106: {
 11714  002A5E  C022  F01A         	movff	ReadIntFromEeprom@retVal,?_ReadIntFromEeprom
 11715  002A62  C023  F01B         	movff	ReadIntFromEeprom@retVal+1,?_ReadIntFromEeprom+1
 11716  002A66  C024  F01C         	movff	ReadIntFromEeprom@retVal+2,?_ReadIntFromEeprom+2
 11717  002A6A  C025  F01D         	movff	ReadIntFromEeprom@retVal+3,?_ReadIntFromEeprom+3
 11718  002A6E  0012               	return		;funcret
 11719  002A70                     __end_of_ReadIntFromEeprom:
 11720                           	opt stack 0
 11721                           tosu	equ	0xFFF
 11722                           tosh	equ	0xFFE
 11723                           tosl	equ	0xFFD
 11724                           pclath	equ	0xFFA
 11725                           tblptru	equ	0xFF8
 11726                           tblptrh	equ	0xFF7
 11727                           tblptrl	equ	0xFF6
 11728                           tablat	equ	0xFF5
 11729                           prodh	equ	0xFF4
 11730                           prodl	equ	0xFF3
 11731                           intcon	equ	0xFF2
 11732                           intcon2	equ	0xFF1
 11733                           postinc0	equ	0xFEE
 11734                           wreg	equ	0xFE8
 11735                           indf1	equ	0xFE7
 11736                           postdec1	equ	0xFE5
 11737                           fsr1h	equ	0xFE2
 11738                           fsr1l	equ	0xFE1
 11739                           indf2	equ	0xFDF
 11740                           postinc2	equ	0xFDE
 11741                           postdec2	equ	0xFDD
 11742                           fsr2h	equ	0xFDA
 11743                           fsr2l	equ	0xFD9
 11744                           status	equ	0xFD8
 11745                           
 11746 ;; *************** function _EepromRead *****************
 11747 ;; Defined at:
 11748 ;;		line 215 in file "FlashApp.c"
 11749 ;; Parameters:    Size  Location     Type
 11750 ;;  address         1    wreg     unsigned char 
 11751 ;; Auto vars:     Size  Location     Type
 11752 ;;  address         1   24[COMRAM] unsigned char 
 11753 ;; Return value:  Size  Location     Type
 11754 ;;                  1    wreg      unsigned char 
 11755 ;; Registers used:
 11756 ;;		wreg, status,2, cstack
 11757 ;; Tracked objects:
 11758 ;;		On entry : 0/0
 11759 ;;		On exit  : 0/0
 11760 ;;		Unchanged: 0/0
 11761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11762 ;;      Params:         0       0       0       0       0       0       0
 11763 ;;      Locals:         1       0       0       0       0       0       0
 11764 ;;      Temps:          0       0       0       0       0       0       0
 11765 ;;      Totals:         1       0       0       0       0       0       0
 11766 ;;Total ram usage:        1 bytes
 11767 ;; Hardware stack levels used:    1
 11768 ;; Hardware stack levels required when called:    4
 11769 ;; This function calls:
 11770 ;;		_DATAEE_ReadByte
 11771 ;; This function is called by:
 11772 ;;		_ReadIntFromEeprom
 11773 ;; This function uses a non-reentrant model
 11774 ;;
 11775                           
 11776                           	psect	text80
 11777  003818                     __ptext80:
 11778                           	opt stack 0
 11779  003818                     _EepromRead:
 11780                           	opt stack 23
 11781                           
 11782                           ;incstack = 0
 11783                           ;EepromRead@address stored from wreg
 11784  003818  6E19               	movwf	EepromRead@address,c
 11785                           
 11786                           ;FlashApp.c: 217: return DATAEE_ReadByte(address);
 11787  00381A  5019               	movf	EepromRead@address,w,c
 11788  00381C  EC94  F01B         	call	_DATAEE_ReadByte
 11789  003820  0012               	return	
 11790  003822                     __end_of_EepromRead:
 11791                           	opt stack 0
 11792                           tosu	equ	0xFFF
 11793                           tosh	equ	0xFFE
 11794                           tosl	equ	0xFFD
 11795                           pclath	equ	0xFFA
 11796                           tblptru	equ	0xFF8
 11797                           tblptrh	equ	0xFF7
 11798                           tblptrl	equ	0xFF6
 11799                           tablat	equ	0xFF5
 11800                           prodh	equ	0xFF4
 11801                           prodl	equ	0xFF3
 11802                           intcon	equ	0xFF2
 11803                           intcon2	equ	0xFF1
 11804                           postinc0	equ	0xFEE
 11805                           wreg	equ	0xFE8
 11806                           indf1	equ	0xFE7
 11807                           postdec1	equ	0xFE5
 11808                           fsr1h	equ	0xFE2
 11809                           fsr1l	equ	0xFE1
 11810                           indf2	equ	0xFDF
 11811                           postinc2	equ	0xFDE
 11812                           postdec2	equ	0xFDD
 11813                           fsr2h	equ	0xFDA
 11814                           fsr2l	equ	0xFD9
 11815                           status	equ	0xFD8
 11816                           
 11817 ;; *************** function _DATAEE_ReadByte *****************
 11818 ;; Defined at:
 11819 ;;		line 194 in file "mcc_generated_files/memory.c"
 11820 ;; Parameters:    Size  Location     Type
 11821 ;;  bAdd            1    wreg     unsigned char 
 11822 ;; Auto vars:     Size  Location     Type
 11823 ;;  bAdd            1   23[COMRAM] unsigned char 
 11824 ;; Return value:  Size  Location     Type
 11825 ;;                  1    wreg      unsigned char 
 11826 ;; Registers used:
 11827 ;;		wreg, status,2
 11828 ;; Tracked objects:
 11829 ;;		On entry : 0/0
 11830 ;;		On exit  : 0/0
 11831 ;;		Unchanged: 0/0
 11832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11833 ;;      Params:         0       0       0       0       0       0       0
 11834 ;;      Locals:         1       0       0       0       0       0       0
 11835 ;;      Temps:          0       0       0       0       0       0       0
 11836 ;;      Totals:         1       0       0       0       0       0       0
 11837 ;;Total ram usage:        1 bytes
 11838 ;; Hardware stack levels used:    1
 11839 ;; Hardware stack levels required when called:    3
 11840 ;; This function calls:
 11841 ;;		Nothing
 11842 ;; This function is called by:
 11843 ;;		_EepromRead
 11844 ;;		_EepromTest
 11845 ;; This function uses a non-reentrant model
 11846 ;;
 11847                           
 11848                           	psect	text81
 11849  003728                     __ptext81:
 11850                           	opt stack 0
 11851  003728                     _DATAEE_ReadByte:
 11852                           	opt stack 23
 11853                           
 11854                           ;incstack = 0
 11855                           ;DATAEE_ReadByte@bAdd stored from wreg
 11856  003728  6E18               	movwf	DATAEE_ReadByte@bAdd,c
 11857                           
 11858                           ;memory.c: 197: EEADR = (bAdd & 0xFF);
 11859  00372A  C018  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
 11860                           
 11861                           ;memory.c: 198: EECON1bits.CFGS = 0;
 11862  00372E  9CA6               	bcf	4006,6,c	;volsfr
 11863                           
 11864                           ;memory.c: 199: EECON1bits.EEPGD = 0;
 11865  003730  9EA6               	bcf	4006,7,c	;volsfr
 11866                           
 11867                           ;memory.c: 200: EECON1bits.RD = 1;
 11868  003732  80A6               	bsf	4006,0,c	;volsfr
 11869                           
 11870                           ;memory.c: 201: __nop();
 11871  003734  F000               	nop	
 11872                           
 11873                           ;memory.c: 202: __nop();
 11874  003736  F000               	nop	
 11875                           
 11876                           ;memory.c: 204: return (EEDATA);
 11877  003738  50A8               	movf	4008,w,c	;volatile
 11878  00373A  0012               	return	
 11879  00373C                     __end_of_DATAEE_ReadByte:
 11880                           	opt stack 0
 11881                           tosu	equ	0xFFF
 11882                           tosh	equ	0xFFE
 11883                           tosl	equ	0xFFD
 11884                           pclath	equ	0xFFA
 11885                           tblptru	equ	0xFF8
 11886                           tblptrh	equ	0xFF7
 11887                           tblptrl	equ	0xFF6
 11888                           tablat	equ	0xFF5
 11889                           prodh	equ	0xFF4
 11890                           prodl	equ	0xFF3
 11891                           intcon	equ	0xFF2
 11892                           intcon2	equ	0xFF1
 11893                           postinc0	equ	0xFEE
 11894                           wreg	equ	0xFE8
 11895                           indf1	equ	0xFE7
 11896                           postdec1	equ	0xFE5
 11897                           fsr1h	equ	0xFE2
 11898                           fsr1l	equ	0xFE1
 11899                           indf2	equ	0xFDF
 11900                           postinc2	equ	0xFDE
 11901                           postdec2	equ	0xFDD
 11902                           fsr2h	equ	0xFDA
 11903                           fsr2l	equ	0xFD9
 11904                           status	equ	0xFD8
 11905                           
 11906 ;; *************** function _ClearMcuRunTime *****************
 11907 ;; Defined at:
 11908 ;;		line 49 in file "SystemStatus.c"
 11909 ;; Parameters:    Size  Location     Type
 11910 ;;		None
 11911 ;; Auto vars:     Size  Location     Type
 11912 ;;		None
 11913 ;; Return value:  Size  Location     Type
 11914 ;;                  1    wreg      void 
 11915 ;; Registers used:
 11916 ;;		wreg, status,2
 11917 ;; Tracked objects:
 11918 ;;		On entry : 0/0
 11919 ;;		On exit  : 0/0
 11920 ;;		Unchanged: 0/0
 11921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11922 ;;      Params:         0       0       0       0       0       0       0
 11923 ;;      Locals:         0       0       0       0       0       0       0
 11924 ;;      Temps:          0       0       0       0       0       0       0
 11925 ;;      Totals:         0       0       0       0       0       0       0
 11926 ;;Total ram usage:        0 bytes
 11927 ;; Hardware stack levels used:    1
 11928 ;; Hardware stack levels required when called:    3
 11929 ;; This function calls:
 11930 ;;		Nothing
 11931 ;; This function is called by:
 11932 ;;		_InitSystemApplicationManagers
 11933 ;; This function uses a non-reentrant model
 11934 ;;
 11935                           
 11936                           	psect	text82
 11937  00373C                     __ptext82:
 11938                           	opt stack 0
 11939  00373C                     _ClearMcuRunTime:
 11940                           	opt stack 26
 11941                           
 11942                           ;SystemStatus.c: 51: mcuRunTimeIn5SecTicks = 0;
 11943                           
 11944                           ;incstack = 0
 11945  00373C  0E00               	movlw	0
 11946  00373E  0100               	movlb	0	; () banked
 11947  003740  6FC1               	movwf	_mcuRunTimeIn5SecTicks& (0+255),b
 11948  003742  0E00               	movlw	0
 11949  003744  6FC2               	movwf	(_mcuRunTimeIn5SecTicks+1)& (0+255),b
 11950  003746  0E00               	movlw	0
 11951  003748  6FC3               	movwf	(_mcuRunTimeIn5SecTicks+2)& (0+255),b
 11952  00374A  0E00               	movlw	0
 11953  00374C  6FC4               	movwf	(_mcuRunTimeIn5SecTicks+3)& (0+255),b
 11954                           
 11955                           ; BSR set to: 0
 11956  00374E  0012               	return		;funcret
 11957  003750                     __end_of_ClearMcuRunTime:
 11958                           	opt stack 0
 11959                           tosu	equ	0xFFF
 11960                           tosh	equ	0xFFE
 11961                           tosl	equ	0xFFD
 11962                           pclath	equ	0xFFA
 11963                           tblptru	equ	0xFF8
 11964                           tblptrh	equ	0xFF7
 11965                           tblptrl	equ	0xFF6
 11966                           tablat	equ	0xFF5
 11967                           prodh	equ	0xFF4
 11968                           prodl	equ	0xFF3
 11969                           intcon	equ	0xFF2
 11970                           intcon2	equ	0xFF1
 11971                           postinc0	equ	0xFEE
 11972                           wreg	equ	0xFE8
 11973                           indf1	equ	0xFE7
 11974                           postdec1	equ	0xFE5
 11975                           fsr1h	equ	0xFE2
 11976                           fsr1l	equ	0xFE1
 11977                           indf2	equ	0xFDF
 11978                           postinc2	equ	0xFDE
 11979                           postdec2	equ	0xFDD
 11980                           fsr2h	equ	0xFDA
 11981                           fsr2l	equ	0xFD9
 11982                           status	equ	0xFD8
 11983                           
 11984 ;; *************** function _CheckFlashPrecentage *****************
 11985 ;; Defined at:
 11986 ;;		line 205 in file "FlashApp.c"
 11987 ;; Parameters:    Size  Location     Type
 11988 ;;		None
 11989 ;; Auto vars:     Size  Location     Type
 11990 ;;  precentage      3   28[BANK0 ] void 
 11991 ;; Return value:  Size  Location     Type
 11992 ;;                  1    wreg      unsigned char 
 11993 ;; Registers used:
 11994 ;;		wreg, status,2, status,0, cstack
 11995 ;; Tracked objects:
 11996 ;;		On entry : 0/0
 11997 ;;		On exit  : 0/0
 11998 ;;		Unchanged: 0/0
 11999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12000 ;;      Params:         0       0       0       0       0       0       0
 12001 ;;      Locals:         0       3       0       0       0       0       0
 12002 ;;      Temps:          0       4       0       0       0       0       0
 12003 ;;      Totals:         0       7       0       0       0       0       0
 12004 ;;Total ram usage:        7 bytes
 12005 ;; Hardware stack levels used:    1
 12006 ;; Hardware stack levels required when called:    5
 12007 ;; This function calls:
 12008 ;;		___ftdiv
 12009 ;;		___ftge
 12010 ;;		___ftmul
 12011 ;;		___lltoft
 12012 ;; This function is called by:
 12013 ;;		_main
 12014 ;; This function uses a non-reentrant model
 12015 ;;
 12016                           
 12017                           	psect	text83
 12018  0020A8                     __ptext83:
 12019                           	opt stack 0
 12020  0020A8                     _CheckFlashPrecentage:
 12021                           	opt stack 25
 12022                           
 12023                           ;FlashApp.c: 207: double precentage = ((double)(0x7FF0 - writeAddress) / 0x7FF0) * 100;
 12024                           
 12025                           ; BSR set to: 0
 12026                           ;incstack = 0
 12027  0020A8  0EE0               	movlw	224
 12028  0020AA  6E2C               	movwf	___ftdiv@f2,c
 12029  0020AC  0EFF               	movlw	255
 12030  0020AE  6E2D               	movwf	___ftdiv@f2+1,c
 12031  0020B0  0E46               	movlw	70
 12032  0020B2  6E2E               	movwf	___ftdiv@f2+2,c
 12033  0020B4  C041  F078         	movff	_writeAddress,??_CheckFlashPrecentage
 12034  0020B8  C042  F079         	movff	_writeAddress+1,??_CheckFlashPrecentage+1
 12035  0020BC  C043  F07A         	movff	_writeAddress+2,??_CheckFlashPrecentage+2
 12036  0020C0  C044  F07B         	movff	_writeAddress+3,??_CheckFlashPrecentage+3
 12037  0020C4  0100               	movlb	0	; () banked
 12038  0020C6  1F78               	comf	??_CheckFlashPrecentage& (0+255),f,b
 12039  0020C8  1F79               	comf	(??_CheckFlashPrecentage+1)& (0+255),f,b
 12040  0020CA  1F7A               	comf	(??_CheckFlashPrecentage+2)& (0+255),f,b
 12041  0020CC  1F7B               	comf	(??_CheckFlashPrecentage+3)& (0+255),f,b
 12042  0020CE  2B78               	incf	??_CheckFlashPrecentage& (0+255),f,b
 12043  0020D0  0E00               	movlw	0
 12044  0020D2  2379               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),f,b
 12045  0020D4  237A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),f,b
 12046  0020D6  237B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),f,b
 12047  0020D8  0EF0               	movlw	240
 12048  0020DA  2578               	addwf	??_CheckFlashPrecentage& (0+255),w,b
 12049  0020DC  6E20               	movwf	___lltoft@c,c
 12050  0020DE  0E7F               	movlw	127
 12051  0020E0  2179               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),w,b
 12052  0020E2  6E21               	movwf	___lltoft@c+1,c
 12053  0020E4  0E00               	movlw	0
 12054  0020E6  217A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),w,b
 12055  0020E8  6E22               	movwf	___lltoft@c+2,c
 12056  0020EA  0E00               	movlw	0
 12057  0020EC  217B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),w,b
 12058  0020EE  6E23               	movwf	___lltoft@c+3,c
 12059  0020F0  ECC4  F015         	call	___lltoft	;wreg free
 12060  0020F4  C020  F029         	movff	?___lltoft,___ftdiv@f1
 12061  0020F8  C021  F02A         	movff	?___lltoft+1,___ftdiv@f1+1
 12062  0020FC  C022  F02B         	movff	?___lltoft+2,___ftdiv@f1+2
 12063  002100  EC12  F00D         	call	___ftdiv	;wreg free
 12064  002104  C029  F069         	movff	?___ftdiv,___ftmul@f1
 12065  002108  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 12066  00210C  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 12067  002110  0E00               	movlw	0
 12068  002112  0100               	movlb	0	; () banked
 12069  002114  6F6C               	movwf	___ftmul@f2& (0+255),b
 12070  002116  0EC8               	movlw	200
 12071  002118  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 12072  00211A  0E42               	movlw	66
 12073  00211C  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 12074  00211E  EC97  F00C         	call	___ftmul	;wreg free
 12075  002122  C069  F07C         	movff	?___ftmul,CheckFlashPrecentage@precentage
 12076  002126  C06A  F07D         	movff	?___ftmul+1,CheckFlashPrecentage@precentage+1
 12077  00212A  C06B  F07E         	movff	?___ftmul+2,CheckFlashPrecentage@precentage+2
 12078                           
 12079                           ;FlashApp.c: 208: return (precentage > 75) ? 1 : 0;
 12080  00212E  0E00               	movlw	0
 12081  002130  6E18               	movwf	___ftge@ff1,c
 12082  002132  0E96               	movlw	150
 12083  002134  6E19               	movwf	___ftge@ff1+1,c
 12084  002136  0E42               	movlw	66
 12085  002138  6E1A               	movwf	___ftge@ff1+2,c
 12086  00213A  C07C  F01B         	movff	CheckFlashPrecentage@precentage,___ftge@ff2
 12087  00213E  C07D  F01C         	movff	CheckFlashPrecentage@precentage+1,___ftge@ff2+1
 12088  002142  C07E  F01D         	movff	CheckFlashPrecentage@precentage+2,___ftge@ff2+2
 12089  002146  ECC4  F012         	call	___ftge	;wreg free
 12090  00214A  B0D8               	btfsc	status,0,c
 12091  00214C  D002               	goto	u8010
 12092  00214E  0E01               	movlw	1
 12093  002150  0012               	return	
 12094  002152                     u8010:
 12095  002152  0E00               	movlw	0
 12096  002154  0012               	return	
 12097  002156                     __end_of_CheckFlashPrecentage:
 12098                           	opt stack 0
 12099                           tosu	equ	0xFFF
 12100                           tosh	equ	0xFFE
 12101                           tosl	equ	0xFFD
 12102                           pclath	equ	0xFFA
 12103                           tblptru	equ	0xFF8
 12104                           tblptrh	equ	0xFF7
 12105                           tblptrl	equ	0xFF6
 12106                           tablat	equ	0xFF5
 12107                           prodh	equ	0xFF4
 12108                           prodl	equ	0xFF3
 12109                           intcon	equ	0xFF2
 12110                           intcon2	equ	0xFF1
 12111                           postinc0	equ	0xFEE
 12112                           wreg	equ	0xFE8
 12113                           indf1	equ	0xFE7
 12114                           postdec1	equ	0xFE5
 12115                           fsr1h	equ	0xFE2
 12116                           fsr1l	equ	0xFE1
 12117                           indf2	equ	0xFDF
 12118                           postinc2	equ	0xFDE
 12119                           postdec2	equ	0xFDD
 12120                           fsr2h	equ	0xFDA
 12121                           fsr2l	equ	0xFD9
 12122                           status	equ	0xFD8
 12123                           
 12124 ;; *************** function _BlinkOkLeds *****************
 12125 ;; Defined at:
 12126 ;;		line 24 in file "LedsApp.c"
 12127 ;; Parameters:    Size  Location     Type
 12128 ;;  state           1    wreg     enum E7570
 12129 ;; Auto vars:     Size  Location     Type
 12130 ;;  state           1   26[COMRAM] enum E7570
 12131 ;;  idx             2   27[COMRAM] int 
 12132 ;; Return value:  Size  Location     Type
 12133 ;;                  1    wreg      void 
 12134 ;; Registers used:
 12135 ;;		wreg, status,2, status,0
 12136 ;; Tracked objects:
 12137 ;;		On entry : 0/0
 12138 ;;		On exit  : 0/0
 12139 ;;		Unchanged: 0/0
 12140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12141 ;;      Params:         0       0       0       0       0       0       0
 12142 ;;      Locals:         3       0       0       0       0       0       0
 12143 ;;      Temps:          3       0       0       0       0       0       0
 12144 ;;      Totals:         6       0       0       0       0       0       0
 12145 ;;Total ram usage:        6 bytes
 12146 ;; Hardware stack levels used:    1
 12147 ;; Hardware stack levels required when called:    3
 12148 ;; This function calls:
 12149 ;;		Nothing
 12150 ;; This function is called by:
 12151 ;;		_main
 12152 ;; This function uses a non-reentrant model
 12153 ;;
 12154                           
 12155                           	psect	text84
 12156  002A70                     __ptext84:
 12157                           	opt stack 0
 12158  002A70                     _BlinkOkLeds:
 12159                           	opt stack 27
 12160                           
 12161                           ;incstack = 0
 12162                           ;BlinkOkLeds@state stored from wreg
 12163  002A70  6E1B               	movwf	BlinkOkLeds@state,c
 12164                           
 12165                           ;LedsApp.c: 26: for(int idx = 0; idx < state; idx++)
 12166  002A72  0E00               	movlw	0
 12167  002A74  6E1D               	movwf	BlinkOkLeds@idx+1,c
 12168  002A76  0E00               	movlw	0
 12169  002A78  6E1C               	movwf	BlinkOkLeds@idx,c
 12170  002A7A                     l6052:
 12171  002A7A  501B               	movf	BlinkOkLeds@state,w,c
 12172  002A7C  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 12173  002A7E  6A19               	clrf	(??_BlinkOkLeds+1)& (0+255),c
 12174  002A80  5018               	movf	??_BlinkOkLeds,w,c
 12175  002A82  5C1C               	subwf	BlinkOkLeds@idx,w,c
 12176  002A84  501D               	movf	BlinkOkLeds@idx+1,w,c
 12177  002A86  0A80               	xorlw	128
 12178  002A88  6E1A               	movwf	(??_BlinkOkLeds+2)& (0+255),c
 12179  002A8A  5019               	movf	??_BlinkOkLeds+1,w,c
 12180  002A8C  0A80               	xorlw	128
 12181  002A8E  581A               	subwfb	(??_BlinkOkLeds+2)& (0+255),w,c
 12182  002A90  B0D8               	btfsc	status,0,c
 12183  002A92  0012               	return	
 12184                           
 12185                           ;LedsApp.c: 27: {
 12186                           ;LedsApp.c: 28: LATCbits.LATC0 = 0;
 12187  002A94  908B               	bcf	3979,0,c	;volatile
 12188                           
 12189                           ;LedsApp.c: 29: _delay((unsigned long)((100)*(8000000/4000.0)));
 12190  002A96  0E02               	movlw	2
 12191  002A98  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 12192  002A9A  0E04               	movlw	4
 12193  002A9C  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 12194  002A9E  0EBA               	movlw	186
 12195  002AA0                     u8227:
 12196  002AA0  2EE8               	decfsz	wreg,f,c
 12197  002AA2  D7FE               	bra	u8227
 12198  002AA4  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 12199  002AA6  D7FC               	bra	u8227
 12200  002AA8  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 12201  002AAA  D7FA               	bra	u8227
 12202  002AAC  D000               	nop2	
 12203                           
 12204                           ;LedsApp.c: 30: LATCbits.LATC0 = 1;
 12205  002AAE  808B               	bsf	3979,0,c	;volatile
 12206                           
 12207                           ;LedsApp.c: 31: _delay((unsigned long)((100)*(8000000/4000.0)));
 12208  002AB0  0E02               	movlw	2
 12209  002AB2  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 12210  002AB4  0E04               	movlw	4
 12211  002AB6  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 12212  002AB8  0EBA               	movlw	186
 12213  002ABA                     u8237:
 12214  002ABA  2EE8               	decfsz	wreg,f,c
 12215  002ABC  D7FE               	bra	u8237
 12216  002ABE  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 12217  002AC0  D7FC               	bra	u8237
 12218  002AC2  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 12219  002AC4  D7FA               	bra	u8237
 12220  002AC6  D000               	nop2	
 12221  002AC8  4A1C               	infsnz	BlinkOkLeds@idx,f,c
 12222  002ACA  2A1D               	incf	BlinkOkLeds@idx+1,f,c
 12223  002ACC  D7D6               	goto	l6052
 12224  002ACE                     __end_of_BlinkOkLeds:
 12225                           	opt stack 0
 12226                           tosu	equ	0xFFF
 12227                           tosh	equ	0xFFE
 12228                           tosl	equ	0xFFD
 12229                           pclath	equ	0xFFA
 12230                           tblptru	equ	0xFF8
 12231                           tblptrh	equ	0xFF7
 12232                           tblptrl	equ	0xFF6
 12233                           tablat	equ	0xFF5
 12234                           prodh	equ	0xFF4
 12235                           prodl	equ	0xFF3
 12236                           intcon	equ	0xFF2
 12237                           intcon2	equ	0xFF1
 12238                           postinc0	equ	0xFEE
 12239                           wreg	equ	0xFE8
 12240                           indf1	equ	0xFE7
 12241                           postdec1	equ	0xFE5
 12242                           fsr1h	equ	0xFE2
 12243                           fsr1l	equ	0xFE1
 12244                           indf2	equ	0xFDF
 12245                           postinc2	equ	0xFDE
 12246                           postdec2	equ	0xFDD
 12247                           fsr2h	equ	0xFDA
 12248                           fsr2l	equ	0xFD9
 12249                           status	equ	0xFD8
 12250                           
 12251 ;; *************** function _BlinkErrorLeds *****************
 12252 ;; Defined at:
 12253 ;;		line 13 in file "LedsApp.c"
 12254 ;; Parameters:    Size  Location     Type
 12255 ;;  state           1    wreg     enum E7573
 12256 ;; Auto vars:     Size  Location     Type
 12257 ;;  state           1   26[COMRAM] enum E7573
 12258 ;;  idx             2   27[COMRAM] int 
 12259 ;; Return value:  Size  Location     Type
 12260 ;;                  1    wreg      void 
 12261 ;; Registers used:
 12262 ;;		wreg, status,2, status,0
 12263 ;; Tracked objects:
 12264 ;;		On entry : 0/0
 12265 ;;		On exit  : 0/0
 12266 ;;		Unchanged: 0/0
 12267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12268 ;;      Params:         0       0       0       0       0       0       0
 12269 ;;      Locals:         3       0       0       0       0       0       0
 12270 ;;      Temps:          3       0       0       0       0       0       0
 12271 ;;      Totals:         6       0       0       0       0       0       0
 12272 ;;Total ram usage:        6 bytes
 12273 ;; Hardware stack levels used:    1
 12274 ;; Hardware stack levels required when called:    3
 12275 ;; This function calls:
 12276 ;;		Nothing
 12277 ;; This function is called by:
 12278 ;;		_main
 12279 ;; This function uses a non-reentrant model
 12280 ;;
 12281                           
 12282                           	psect	text85
 12283  002ACE                     __ptext85:
 12284                           	opt stack 0
 12285  002ACE                     _BlinkErrorLeds:
 12286                           	opt stack 27
 12287                           
 12288                           ;incstack = 0
 12289                           ;BlinkErrorLeds@state stored from wreg
 12290  002ACE  6E1B               	movwf	BlinkErrorLeds@state,c
 12291                           
 12292                           ;LedsApp.c: 15: for(int idx = 0; idx < state; idx++)
 12293  002AD0  0E00               	movlw	0
 12294  002AD2  6E1D               	movwf	BlinkErrorLeds@idx+1,c
 12295  002AD4  0E00               	movlw	0
 12296  002AD6  6E1C               	movwf	BlinkErrorLeds@idx,c
 12297  002AD8                     l6040:
 12298  002AD8  501B               	movf	BlinkErrorLeds@state,w,c
 12299  002ADA  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 12300  002ADC  6A19               	clrf	(??_BlinkErrorLeds+1)& (0+255),c
 12301  002ADE  5018               	movf	??_BlinkErrorLeds,w,c
 12302  002AE0  5C1C               	subwf	BlinkErrorLeds@idx,w,c
 12303  002AE2  501D               	movf	BlinkErrorLeds@idx+1,w,c
 12304  002AE4  0A80               	xorlw	128
 12305  002AE6  6E1A               	movwf	(??_BlinkErrorLeds+2)& (0+255),c
 12306  002AE8  5019               	movf	??_BlinkErrorLeds+1,w,c
 12307  002AEA  0A80               	xorlw	128
 12308  002AEC  581A               	subwfb	(??_BlinkErrorLeds+2)& (0+255),w,c
 12309  002AEE  B0D8               	btfsc	status,0,c
 12310  002AF0  0012               	return	
 12311                           
 12312                           ;LedsApp.c: 16: {
 12313                           ;LedsApp.c: 17: LATBbits.LATB4 = 0;
 12314  002AF2  988A               	bcf	3978,4,c	;volatile
 12315                           
 12316                           ;LedsApp.c: 18: _delay((unsigned long)((100)*(8000000/4000.0)));
 12317  002AF4  0E02               	movlw	2
 12318  002AF6  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
 12319  002AF8  0E04               	movlw	4
 12320  002AFA  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 12321  002AFC  0EBA               	movlw	186
 12322  002AFE                     u8247:
 12323  002AFE  2EE8               	decfsz	wreg,f,c
 12324  002B00  D7FE               	bra	u8247
 12325  002B02  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
 12326  002B04  D7FC               	bra	u8247
 12327  002B06  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
 12328  002B08  D7FA               	bra	u8247
 12329  002B0A  D000               	nop2	
 12330                           
 12331                           ;LedsApp.c: 19: LATBbits.LATB4 = 1;
 12332  002B0C  888A               	bsf	3978,4,c	;volatile
 12333                           
 12334                           ;LedsApp.c: 20: _delay((unsigned long)((100)*(8000000/4000.0)));
 12335  002B0E  0E02               	movlw	2
 12336  002B10  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
 12337  002B12  0E04               	movlw	4
 12338  002B14  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 12339  002B16  0EBA               	movlw	186
 12340  002B18                     u8257:
 12341  002B18  2EE8               	decfsz	wreg,f,c
 12342  002B1A  D7FE               	bra	u8257
 12343  002B1C  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
 12344  002B1E  D7FC               	bra	u8257
 12345  002B20  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
 12346  002B22  D7FA               	bra	u8257
 12347  002B24  D000               	nop2	
 12348  002B26  4A1C               	infsnz	BlinkErrorLeds@idx,f,c
 12349  002B28  2A1D               	incf	BlinkErrorLeds@idx+1,f,c
 12350  002B2A  D7D6               	goto	l6040
 12351  002B2C                     __end_of_BlinkErrorLeds:
 12352                           	opt stack 0
 12353                           tosu	equ	0xFFF
 12354                           tosh	equ	0xFFE
 12355                           tosl	equ	0xFFD
 12356                           pclath	equ	0xFFA
 12357                           tblptru	equ	0xFF8
 12358                           tblptrh	equ	0xFF7
 12359                           tblptrl	equ	0xFF6
 12360                           tablat	equ	0xFF5
 12361                           prodh	equ	0xFF4
 12362                           prodl	equ	0xFF3
 12363                           intcon	equ	0xFF2
 12364                           intcon2	equ	0xFF1
 12365                           postinc0	equ	0xFEE
 12366                           wreg	equ	0xFE8
 12367                           indf1	equ	0xFE7
 12368                           postdec1	equ	0xFE5
 12369                           fsr1h	equ	0xFE2
 12370                           fsr1l	equ	0xFE1
 12371                           indf2	equ	0xFDF
 12372                           postinc2	equ	0xFDE
 12373                           postdec2	equ	0xFDD
 12374                           fsr2h	equ	0xFDA
 12375                           fsr2l	equ	0xFD9
 12376                           status	equ	0xFD8
 12377                           
 12378 ;; *************** function _AdcConvert *****************
 12379 ;; Defined at:
 12380 ;;		line 56 in file "AdcApp.c"
 12381 ;; Parameters:    Size  Location     Type
 12382 ;;		None
 12383 ;; Auto vars:     Size  Location     Type
 12384 ;;  _adcResult      2   85[BANK0 ] unsigned int 
 12385 ;;  idx             1   94[BANK0 ] unsigned char 
 12386 ;;  _adcResult      2   87[BANK0 ] unsigned int 
 12387 ;;  adcRes          2   92[BANK0 ] unsigned int 
 12388 ;; Return value:  Size  Location     Type
 12389 ;;                  1    wreg      void 
 12390 ;; Registers used:
 12391 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12392 ;; Tracked objects:
 12393 ;;		On entry : 0/0
 12394 ;;		On exit  : 0/0
 12395 ;;		Unchanged: 0/0
 12396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12397 ;;      Params:         0       0       0       0       0       0       0
 12398 ;;      Locals:         0      10       0       0       0       0       0
 12399 ;;      Temps:          0       2       0       0       0       0       0
 12400 ;;      Totals:         0      12       0       0       0       0       0
 12401 ;;Total ram usage:       12 bytes
 12402 ;; Hardware stack levels used:    1
 12403 ;; Hardware stack levels required when called:    8
 12404 ;; This function calls:
 12405 ;;		_ADC_GetConversion
 12406 ;;		_FlashSampleWrite
 12407 ;;		___ftdiv
 12408 ;;		___ftmul
 12409 ;;		___fttol
 12410 ;;		___lwtoft
 12411 ;;		_pow
 12412 ;; This function is called by:
 12413 ;;		_main
 12414 ;; This function uses a non-reentrant model
 12415 ;;
 12416                           
 12417                           	psect	text86
 12418  001022                     __ptext86:
 12419                           	opt stack 0
 12420  001022                     _AdcConvert:
 12421                           	opt stack 22
 12422                           
 12423                           ;AdcApp.c: 61: uint16_t adcRes = 0;
 12424                           
 12425                           ;incstack = 0
 12426  001022  0E00               	movlw	0
 12427  001024  0100               	movlb	0	; () banked
 12428  001026  6FBD               	movwf	(AdcConvert@adcRes+1)& (0+255),b
 12429  001028  0E00               	movlw	0
 12430  00102A  6FBC               	movwf	AdcConvert@adcRes& (0+255),b
 12431                           
 12432                           ;AdcApp.c: 63: if (adcSampleMode == CIRCULAR)
 12433  00102C  503C               	movf	_adcSampleMode,w,c
 12434  00102E  A4D8               	btfss	status,2,c
 12435  001030  D073               	goto	l120
 12436                           
 12437                           ; BSR set to: 0
 12438                           ;AdcApp.c: 64: {
 12439                           ;AdcApp.c: 65: for(uint8_t idx = 0; idx < (7); idx++)
 12440  001032  0E00               	movlw	0
 12441  001034  6FBE               	movwf	AdcConvert@idx& (0+255),b
 12442  001036                     l7878:
 12443                           
 12444                           ; BSR set to: 0
 12445  001036  0E06               	movlw	6
 12446  001038  65BE               	cpfsgt	AdcConvert@idx& (0+255),b
 12447  00103A  D001               	goto	l121
 12448  00103C  0012               	return	
 12449  00103E                     l121:
 12450                           
 12451                           ; BSR set to: 0
 12452                           ;AdcApp.c: 66: {
 12453                           ;AdcApp.c: 67: adc_result_t _adcResult = ADC_GetConversion(channelArr[idx]);
 12454                           
 12455                           ; BSR set to: 0
 12456  00103E  51BE               	movf	AdcConvert@idx& (0+255),w,b
 12457  001040  0D01               	mullw	1
 12458  001042  0E3D               	movlw	low _channelArr
 12459  001044  24F3               	addwf	prodl,w,c
 12460  001046  6EF6               	movwf	tblptrl,c
 12461  001048  0E06               	movlw	high _channelArr
 12462  00104A  20F4               	addwfc	prodh,w,c
 12463  00104C  6EF7               	movwf	tblptrh,c
 12464  00104E                     	if	0	;There are less than 3 active tblptr bytes
 12465  00104E                     	endif
 12466  00104E  0008               	tblrd		*
 12467  001050  50F5               	movf	tablat,w,c
 12468  001052  EC24  F01A         	call	_ADC_GetConversion
 12469  001056  C018  F0B5         	movff	?_ADC_GetConversion,AdcConvert@_adcResult
 12470  00105A  C019  F0B6         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult+1
 12471                           
 12472                           ;AdcApp.c: 68: adcRes = (_adcResult/pow(2,(10)))*(3340);
 12473  00105E  0E00               	movlw	0
 12474  001060  0100               	movlb	0	; () banked
 12475  001062  6FA5               	movwf	pow@y& (0+255),b
 12476  001064  0E20               	movlw	32
 12477  001066  6FA6               	movwf	(pow@y+1)& (0+255),b
 12478  001068  0E41               	movlw	65
 12479  00106A  6FA7               	movwf	(pow@y+2)& (0+255),b
 12480  00106C  0E00               	movlw	0
 12481  00106E  6FA2               	movwf	pow@x& (0+255),b
 12482  001070  0E00               	movlw	0
 12483  001072  6FA3               	movwf	(pow@x+1)& (0+255),b
 12484  001074  0E40               	movlw	64
 12485  001076  6FA4               	movwf	(pow@x+2)& (0+255),b
 12486  001078  ECC3  F009         	call	_pow	;wreg free
 12487  00107C  C0A2  F0B9         	movff	?_pow,_AdcConvert$3290
 12488  001080  C0A3  F0BA         	movff	?_pow+1,_AdcConvert$3290+1
 12489  001084  C0A4  F0BB         	movff	?_pow+2,_AdcConvert$3290+2
 12490                           
 12491                           ;AdcApp.c: 68: adcRes = (_adcResult/pow(2,(10)))*(3340);
 12492  001088  0EC0               	movlw	192
 12493  00108A  0100               	movlb	0	; () banked
 12494  00108C  6F6C               	movwf	___ftmul@f2& (0+255),b
 12495  00108E  0E50               	movlw	80
 12496  001090  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 12497  001092  0E45               	movlw	69
 12498  001094  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 12499  001096  C0B9  F02C         	movff	_AdcConvert$3290,___ftdiv@f2
 12500  00109A  C0BA  F02D         	movff	_AdcConvert$3290+1,___ftdiv@f2+1
 12501  00109E  C0BB  F02E         	movff	_AdcConvert$3290+2,___ftdiv@f2+2
 12502  0010A2  C0B5  F020         	movff	AdcConvert@_adcResult,___lwtoft@c
 12503  0010A6  C0B6  F021         	movff	AdcConvert@_adcResult+1,___lwtoft@c+1
 12504  0010AA  ECEF  F01A         	call	___lwtoft	;wreg free
 12505  0010AE  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 12506  0010B2  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 12507  0010B6  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 12508  0010BA  EC12  F00D         	call	___ftdiv	;wreg free
 12509  0010BE  C029  F069         	movff	?___ftdiv,___ftmul@f1
 12510  0010C2  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 12511  0010C6  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 12512  0010CA  EC97  F00C         	call	___ftmul	;wreg free
 12513  0010CE  C069  F078         	movff	?___ftmul,___fttol@f1
 12514  0010D2  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 12515  0010D6  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 12516  0010DA  EC1B  F00C         	call	___fttol	;wreg free
 12517  0010DE  C078  F0BC         	movff	?___fttol,AdcConvert@adcRes
 12518  0010E2  C079  F0BD         	movff	?___fttol+1,AdcConvert@adcRes+1
 12519                           
 12520                           ;AdcApp.c: 69: FlashSampleWrite(adcRes, idx + 1);
 12521  0010E6  C0BC  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 12522  0010EA  C0BD  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 12523  0010EE  0100               	movlb	0	; () banked
 12524  0010F0  29BE               	incf	AdcConvert@idx& (0+255),w,b
 12525  0010F2  6E2F               	movwf	FlashSampleWrite@channelNum,c
 12526  0010F4  EC9E  F00B         	call	_FlashSampleWrite	;wreg free
 12527                           
 12528                           ;AdcApp.c: 70: _delay((unsigned long)((250)*(8000000/4000.0)));
 12529  0010F8  0E03               	movlw	3
 12530  0010FA  0100               	movlb	0	; () banked
 12531  0010FC  6FB4               	movwf	(??_AdcConvert+1)& (0+255),b
 12532  0010FE  0E8A               	movlw	138
 12533  001100  6FB3               	movwf	??_AdcConvert& (0+255),b
 12534  001102  0E55               	movlw	85
 12535  001104                     u8267:
 12536  001104  2EE8               	decfsz	wreg,f,c
 12537  001106  D7FE               	bra	u8267
 12538  001108  2FB3               	decfsz	??_AdcConvert& (0+255),f,b
 12539  00110A  D7FC               	bra	u8267
 12540  00110C  2FB4               	decfsz	(??_AdcConvert+1)& (0+255),f,b
 12541  00110E  D7FA               	bra	u8267
 12542  001110  D000               	nop2	
 12543  001112  0100               	movlb	0	; () banked
 12544  001114  2BBE               	incf	AdcConvert@idx& (0+255),f,b
 12545  001116  D78F               	goto	l7878
 12546  001118                     l120:
 12547                           
 12548                           ; BSR set to: 0
 12549                           ;AdcApp.c: 73: else if (adcSampleMode == SINGLE_CHANNEL)
 12550                           
 12551                           ; BSR set to: 0
 12552  001118  043C               	decf	_adcSampleMode,w,c
 12553  00111A  A4D8               	btfss	status,2,c
 12554  00111C  0012               	return	
 12555                           
 12556                           ; BSR set to: 0
 12557                           ;AdcApp.c: 74: {
 12558                           ;AdcApp.c: 75: adc_result_t _adcResult = ADC_GetConversion(channelArr[channel]);
 12559  00111E  51D4               	movf	_channel& (0+255),w,b
 12560  001120  0D01               	mullw	1
 12561  001122  0E3D               	movlw	low _channelArr
 12562  001124  24F3               	addwf	prodl,w,c
 12563  001126  6EF6               	movwf	tblptrl,c
 12564  001128  0E06               	movlw	high _channelArr
 12565  00112A  20F4               	addwfc	prodh,w,c
 12566  00112C  6EF7               	movwf	tblptrh,c
 12567  00112E                     	if	0	;There are less than 3 active tblptr bytes
 12568  00112E                     	endif
 12569  00112E  0008               	tblrd		*
 12570  001130  50F5               	movf	tablat,w,c
 12571  001132  EC24  F01A         	call	_ADC_GetConversion
 12572  001136  C018  F0B7         	movff	?_ADC_GetConversion,AdcConvert@_adcResult_338
 12573  00113A  C019  F0B8         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult_338+1
 12574                           
 12575                           ;AdcApp.c: 76: adcRes = (_adcResult/pow(2,(10)))*(3340);
 12576  00113E  0E00               	movlw	0
 12577  001140  0100               	movlb	0	; () banked
 12578  001142  6FA5               	movwf	pow@y& (0+255),b
 12579  001144  0E20               	movlw	32
 12580  001146  6FA6               	movwf	(pow@y+1)& (0+255),b
 12581  001148  0E41               	movlw	65
 12582  00114A  6FA7               	movwf	(pow@y+2)& (0+255),b
 12583  00114C  0E00               	movlw	0
 12584  00114E  6FA2               	movwf	pow@x& (0+255),b
 12585  001150  0E00               	movlw	0
 12586  001152  6FA3               	movwf	(pow@x+1)& (0+255),b
 12587  001154  0E40               	movlw	64
 12588  001156  6FA4               	movwf	(pow@x+2)& (0+255),b
 12589  001158  ECC3  F009         	call	_pow	;wreg free
 12590  00115C  C0A2  F0B9         	movff	?_pow,_AdcConvert$3290
 12591  001160  C0A3  F0BA         	movff	?_pow+1,_AdcConvert$3290+1
 12592  001164  C0A4  F0BB         	movff	?_pow+2,_AdcConvert$3290+2
 12593                           
 12594                           ;AdcApp.c: 76: adcRes = (_adcResult/pow(2,(10)))*(3340);
 12595  001168  0EC0               	movlw	192
 12596  00116A  0100               	movlb	0	; () banked
 12597  00116C  6F6C               	movwf	___ftmul@f2& (0+255),b
 12598  00116E  0E50               	movlw	80
 12599  001170  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 12600  001172  0E45               	movlw	69
 12601  001174  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 12602  001176  C0B9  F02C         	movff	_AdcConvert$3290,___ftdiv@f2
 12603  00117A  C0BA  F02D         	movff	_AdcConvert$3290+1,___ftdiv@f2+1
 12604  00117E  C0BB  F02E         	movff	_AdcConvert$3290+2,___ftdiv@f2+2
 12605  001182  C0B7  F020         	movff	AdcConvert@_adcResult_338,___lwtoft@c
 12606  001186  C0B8  F021         	movff	AdcConvert@_adcResult_338+1,___lwtoft@c+1
 12607  00118A  ECEF  F01A         	call	___lwtoft	;wreg free
 12608  00118E  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 12609  001192  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 12610  001196  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 12611  00119A  EC12  F00D         	call	___ftdiv	;wreg free
 12612  00119E  C029  F069         	movff	?___ftdiv,___ftmul@f1
 12613  0011A2  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 12614  0011A6  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 12615  0011AA  EC97  F00C         	call	___ftmul	;wreg free
 12616  0011AE  C069  F078         	movff	?___ftmul,___fttol@f1
 12617  0011B2  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 12618  0011B6  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 12619  0011BA  EC1B  F00C         	call	___fttol	;wreg free
 12620  0011BE  C078  F0BC         	movff	?___fttol,AdcConvert@adcRes
 12621  0011C2  C079  F0BD         	movff	?___fttol+1,AdcConvert@adcRes+1
 12622                           
 12623                           ;AdcApp.c: 77: FlashSampleWrite(adcRes, 1);
 12624  0011C6  C0BC  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 12625  0011CA  C0BD  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 12626  0011CE  0E01               	movlw	1
 12627  0011D0  6E2F               	movwf	FlashSampleWrite@channelNum,c
 12628  0011D2  EC9E  F00B         	call	_FlashSampleWrite	;wreg free
 12629  0011D6  0012               	return	
 12630  0011D8                     __end_of_AdcConvert:
 12631                           	opt stack 0
 12632                           tosu	equ	0xFFF
 12633                           tosh	equ	0xFFE
 12634                           tosl	equ	0xFFD
 12635                           pclath	equ	0xFFA
 12636                           tblptru	equ	0xFF8
 12637                           tblptrh	equ	0xFF7
 12638                           tblptrl	equ	0xFF6
 12639                           tablat	equ	0xFF5
 12640                           prodh	equ	0xFF4
 12641                           prodl	equ	0xFF3
 12642                           intcon	equ	0xFF2
 12643                           intcon2	equ	0xFF1
 12644                           postinc0	equ	0xFEE
 12645                           wreg	equ	0xFE8
 12646                           indf1	equ	0xFE7
 12647                           postdec1	equ	0xFE5
 12648                           fsr1h	equ	0xFE2
 12649                           fsr1l	equ	0xFE1
 12650                           indf2	equ	0xFDF
 12651                           postinc2	equ	0xFDE
 12652                           postdec2	equ	0xFDD
 12653                           fsr2h	equ	0xFDA
 12654                           fsr2l	equ	0xFD9
 12655                           status	equ	0xFD8
 12656                           
 12657 ;; *************** function _pow *****************
 12658 ;; Defined at:
 12659 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
 12660 ;; Parameters:    Size  Location     Type
 12661 ;;  x               3   66[BANK0 ] void 
 12662 ;;  y               3   69[BANK0 ] void 
 12663 ;; Auto vars:     Size  Location     Type
 12664 ;;  yi              4   79[BANK0 ] unsigned long 
 12665 ;;  sign            1   78[BANK0 ] unsigned char 
 12666 ;; Return value:  Size  Location     Type
 12667 ;;                  3   66[BANK0 ] unsigned char 
 12668 ;; Registers used:
 12669 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12670 ;; Tracked objects:
 12671 ;;		On entry : 0/0
 12672 ;;		On exit  : 0/0
 12673 ;;		Unchanged: 0/0
 12674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12675 ;;      Params:         0       6       0       0       0       0       0
 12676 ;;      Locals:         0      11       0       0       0       0       0
 12677 ;;      Temps:          0       0       0       0       0       0       0
 12678 ;;      Totals:         0      17       0       0       0       0       0
 12679 ;;Total ram usage:       17 bytes
 12680 ;; Hardware stack levels used:    1
 12681 ;; Hardware stack levels required when called:    7
 12682 ;; This function calls:
 12683 ;;		___ftge
 12684 ;;		___ftmul
 12685 ;;		___ftneg
 12686 ;;		___fttol
 12687 ;;		___lltoft
 12688 ;;		_exp
 12689 ;;		_log
 12690 ;; This function is called by:
 12691 ;;		_AdcConvert
 12692 ;; This function uses a non-reentrant model
 12693 ;;
 12694                           
 12695                           	psect	text87
 12696  001386                     __ptext87:
 12697                           	opt stack 0
 12698  001386                     _pow:
 12699                           	opt stack 22
 12700                           
 12701                           ;incstack = 0
 12702  001386  0E00               	movlw	0
 12703  001388  0100               	movlb	0	; () banked
 12704  00138A  6FAE               	movwf	pow@sign& (0+255),b
 12705                           
 12706                           ; BSR set to: 0
 12707  00138C  51A2               	movf	pow@x& (0+255),w,b
 12708  00138E  11A3               	iorwf	(pow@x+1)& (0+255),w,b
 12709  001390  11A4               	iorwf	(pow@x+2)& (0+255),w,b
 12710  001392  A4D8               	btfss	status,2,c
 12711  001394  D01D               	goto	l1899
 12712                           
 12713                           ; BSR set to: 0
 12714  001396  0E00               	movlw	0
 12715  001398  6E18               	movwf	___ftge@ff1,c
 12716  00139A  0E00               	movlw	0
 12717  00139C  6E19               	movwf	___ftge@ff1+1,c
 12718  00139E  0E00               	movlw	0
 12719  0013A0  6E1A               	movwf	___ftge@ff1+2,c
 12720  0013A2  C0A5  F01B         	movff	pow@y,___ftge@ff2
 12721  0013A6  C0A6  F01C         	movff	pow@y+1,___ftge@ff2+1
 12722  0013AA  C0A7  F01D         	movff	pow@y+2,___ftge@ff2+2
 12723  0013AE  ECC4  F012         	call	___ftge	;wreg free
 12724  0013B2  A0D8               	btfss	status,0,c
 12725  0013B4  D005               	goto	l1900
 12726  0013B6  0E00               	movlw	0
 12727  0013B8  0100               	movlb	0	; () banked
 12728  0013BA  6FC6               	movwf	(_errno+1)& (0+255),b
 12729  0013BC  0E21               	movlw	33
 12730  0013BE  6FC5               	movwf	_errno& (0+255),b
 12731  0013C0                     l1900:
 12732  0013C0  0E00               	movlw	0
 12733  0013C2  0100               	movlb	0	; () banked
 12734  0013C4  6FA2               	movwf	?_pow& (0+255),b
 12735  0013C6  0E00               	movlw	0
 12736  0013C8  6FA3               	movwf	(?_pow+1)& (0+255),b
 12737  0013CA  0E00               	movlw	0
 12738  0013CC  6FA4               	movwf	(?_pow+2)& (0+255),b
 12739                           
 12740                           ; BSR set to: 0
 12741  0013CE  0012               	return	
 12742  0013D0                     l1899:
 12743                           
 12744                           ; BSR set to: 0
 12745                           
 12746                           ; BSR set to: 0
 12747  0013D0  51A5               	movf	pow@y& (0+255),w,b
 12748  0013D2  11A6               	iorwf	(pow@y+1)& (0+255),w,b
 12749  0013D4  11A7               	iorwf	(pow@y+2)& (0+255),w,b
 12750  0013D6  A4D8               	btfss	status,2,c
 12751  0013D8  D007               	goto	l1902
 12752                           
 12753                           ; BSR set to: 0
 12754  0013DA  0E00               	movlw	0
 12755  0013DC  6FA2               	movwf	?_pow& (0+255),b
 12756  0013DE  0E80               	movlw	128
 12757  0013E0  6FA3               	movwf	(?_pow+1)& (0+255),b
 12758  0013E2  0E3F               	movlw	63
 12759  0013E4  6FA4               	movwf	(?_pow+2)& (0+255),b
 12760                           
 12761                           ; BSR set to: 0
 12762  0013E6  0012               	return	
 12763  0013E8                     l1902:
 12764                           
 12765                           ; BSR set to: 0
 12766                           
 12767                           ; BSR set to: 0
 12768  0013E8  AFA4               	btfss	(pow@x+2)& (0+255),7,b
 12769  0013EA  D041               	goto	l1903
 12770                           
 12771                           ; BSR set to: 0
 12772  0013EC  C0A5  F078         	movff	pow@y,___fttol@f1
 12773  0013F0  C0A6  F079         	movff	pow@y+1,___fttol@f1+1
 12774  0013F4  C0A7  F07A         	movff	pow@y+2,___fttol@f1+2
 12775  0013F8  EC1B  F00C         	call	___fttol	;wreg free
 12776  0013FC  C078  F0AF         	movff	?___fttol,pow@yi
 12777  001400  C079  F0B0         	movff	?___fttol+1,pow@yi+1
 12778  001404  C07A  F0B1         	movff	?___fttol+2,pow@yi+2
 12779  001408  C07B  F0B2         	movff	?___fttol+3,pow@yi+3
 12780  00140C  C0AF  F020         	movff	pow@yi,___lltoft@c
 12781  001410  C0B0  F021         	movff	pow@yi+1,___lltoft@c+1
 12782  001414  C0B1  F022         	movff	pow@yi+2,___lltoft@c+2
 12783  001418  C0B2  F023         	movff	pow@yi+3,___lltoft@c+3
 12784  00141C  ECC4  F015         	call	___lltoft	;wreg free
 12785  001420  0100               	movlb	0	; () banked
 12786  001422  51A5               	movf	pow@y& (0+255),w,b
 12787  001424  1820               	xorwf	?___lltoft,w,c
 12788  001426  E107               	bnz	u7720
 12789  001428  51A6               	movf	(pow@y+1)& (0+255),w,b
 12790  00142A  1821               	xorwf	?___lltoft+1,w,c
 12791  00142C  E104               	bnz	u7720
 12792  00142E  51A7               	movf	(pow@y+2)& (0+255),w,b
 12793  001430  1822               	xorwf	?___lltoft+2,w,c
 12794  001432  B4D8               	btfsc	status,2,c
 12795  001434  D00B               	goto	l1904
 12796  001436                     u7720:
 12797                           
 12798                           ; BSR set to: 0
 12799  001436  0E00               	movlw	0
 12800  001438  6FC6               	movwf	(_errno+1)& (0+255),b
 12801  00143A  0E21               	movlw	33
 12802  00143C  6FC5               	movwf	_errno& (0+255),b
 12803  00143E  0E00               	movlw	0
 12804  001440  6FA2               	movwf	?_pow& (0+255),b
 12805  001442  0E00               	movlw	0
 12806  001444  6FA3               	movwf	(?_pow+1)& (0+255),b
 12807  001446  0E00               	movlw	0
 12808  001448  6FA4               	movwf	(?_pow+2)& (0+255),b
 12809                           
 12810                           ; BSR set to: 0
 12811  00144A  0012               	return	
 12812  00144C                     l1904:
 12813                           
 12814                           ; BSR set to: 0
 12815                           
 12816                           ; BSR set to: 0
 12817  00144C  51AF               	movf	pow@yi& (0+255),w,b
 12818  00144E  0B01               	andlw	1
 12819  001450  6FAE               	movwf	pow@sign& (0+255),b
 12820                           
 12821                           ; BSR set to: 0
 12822  001452  C0A2  F018         	movff	pow@x,___ftneg@f1
 12823  001456  C0A3  F019         	movff	pow@x+1,___ftneg@f1+1
 12824  00145A  C0A4  F01A         	movff	pow@x+2,___ftneg@f1+2
 12825  00145E  ECDD  F01A         	call	___ftneg	;wreg free
 12826  001462  C018  F0A2         	movff	?___ftneg,pow@x
 12827  001466  C019  F0A3         	movff	?___ftneg+1,pow@x+1
 12828  00146A  C01A  F0A4         	movff	?___ftneg+2,pow@x+2
 12829  00146E                     l1903:
 12830  00146E  C0A2  F090         	movff	pow@x,log@x
 12831  001472  C0A3  F091         	movff	pow@x+1,log@x+1
 12832  001476  C0A4  F092         	movff	pow@x+2,log@x+2
 12833  00147A  EC81  F00A         	call	_log	;wreg free
 12834  00147E  C090  F0A8         	movff	?_log,_pow$3291
 12835  001482  C091  F0A9         	movff	?_log+1,_pow$3291+1
 12836  001486  C092  F0AA         	movff	?_log+2,_pow$3291+2
 12837  00148A  C0A8  F069         	movff	_pow$3291,___ftmul@f1
 12838  00148E  C0A9  F06A         	movff	_pow$3291+1,___ftmul@f1+1
 12839  001492  C0AA  F06B         	movff	_pow$3291+2,___ftmul@f1+2
 12840  001496  C0A5  F06C         	movff	pow@y,___ftmul@f2
 12841  00149A  C0A6  F06D         	movff	pow@y+1,___ftmul@f2+1
 12842  00149E  C0A7  F06E         	movff	pow@y+2,___ftmul@f2+2
 12843  0014A2  EC97  F00C         	call	___ftmul	;wreg free
 12844  0014A6  C069  F0AB         	movff	?___ftmul,_pow$3292
 12845  0014AA  C06A  F0AC         	movff	?___ftmul+1,_pow$3292+1
 12846  0014AE  C06B  F0AD         	movff	?___ftmul+2,_pow$3292+2
 12847  0014B2  C0AB  F099         	movff	_pow$3292,exp@x
 12848  0014B6  C0AC  F09A         	movff	_pow$3292+1,exp@x+1
 12849  0014BA  C0AD  F09B         	movff	_pow$3292+2,exp@x+2
 12850  0014BE  EC2D  F006         	call	_exp	;wreg free
 12851  0014C2  C099  F0A2         	movff	?_exp,pow@x
 12852  0014C6  C09A  F0A3         	movff	?_exp+1,pow@x+1
 12853  0014CA  C09B  F0A4         	movff	?_exp+2,pow@x+2
 12854  0014CE  0100               	movlb	0	; () banked
 12855  0014D0  51AE               	movf	pow@sign& (0+255),w,b
 12856  0014D2  B4D8               	btfsc	status,2,c
 12857  0014D4  D00F               	goto	l1905
 12858                           
 12859                           ; BSR set to: 0
 12860  0014D6  C0A2  F018         	movff	pow@x,___ftneg@f1
 12861  0014DA  C0A3  F019         	movff	pow@x+1,___ftneg@f1+1
 12862  0014DE  C0A4  F01A         	movff	pow@x+2,___ftneg@f1+2
 12863  0014E2  ECDD  F01A         	call	___ftneg	;wreg free
 12864  0014E6  C018  F0A2         	movff	?___ftneg,?_pow
 12865  0014EA  C019  F0A3         	movff	?___ftneg+1,?_pow+1
 12866  0014EE  C01A  F0A4         	movff	?___ftneg+2,?_pow+2
 12867  0014F2  0012               	return	
 12868  0014F4                     l1905:
 12869                           
 12870                           ; BSR set to: 0
 12871  0014F4  C0A2  F0A2         	movff	pow@x,?_pow
 12872  0014F8  C0A3  F0A3         	movff	pow@x+1,?_pow+1
 12873  0014FC  C0A4  F0A4         	movff	pow@x+2,?_pow+2
 12874  001500  0012               	return		;funcret
 12875  001502                     __end_of_pow:
 12876                           	opt stack 0
 12877                           tosu	equ	0xFFF
 12878                           tosh	equ	0xFFE
 12879                           tosl	equ	0xFFD
 12880                           pclath	equ	0xFFA
 12881                           tblptru	equ	0xFF8
 12882                           tblptrh	equ	0xFF7
 12883                           tblptrl	equ	0xFF6
 12884                           tablat	equ	0xFF5
 12885                           prodh	equ	0xFF4
 12886                           prodl	equ	0xFF3
 12887                           intcon	equ	0xFF2
 12888                           intcon2	equ	0xFF1
 12889                           postinc0	equ	0xFEE
 12890                           wreg	equ	0xFE8
 12891                           indf1	equ	0xFE7
 12892                           postdec1	equ	0xFE5
 12893                           fsr1h	equ	0xFE2
 12894                           fsr1l	equ	0xFE1
 12895                           indf2	equ	0xFDF
 12896                           postinc2	equ	0xFDE
 12897                           postdec2	equ	0xFDD
 12898                           fsr2h	equ	0xFDA
 12899                           fsr2l	equ	0xFD9
 12900                           status	equ	0xFD8
 12901                           
 12902 ;; *************** function _log *****************
 12903 ;; Defined at:
 12904 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
 12905 ;; Parameters:    Size  Location     Type
 12906 ;;  x               3   48[BANK0 ] unsigned char 
 12907 ;; Auto vars:     Size  Location     Type
 12908 ;;  exponent        2   51[BANK0 ] int 
 12909 ;; Return value:  Size  Location     Type
 12910 ;;                  3   48[BANK0 ] int 
 12911 ;; Registers used:
 12912 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12913 ;; Tracked objects:
 12914 ;;		On entry : 0/0
 12915 ;;		On exit  : 0/0
 12916 ;;		Unchanged: 0/0
 12917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12918 ;;      Params:         0       3       0       0       0       0       0
 12919 ;;      Locals:         0       2       0       0       0       0       0
 12920 ;;      Temps:          0       0       0       0       0       0       0
 12921 ;;      Totals:         0       5       0       0       0       0       0
 12922 ;;Total ram usage:        5 bytes
 12923 ;; Hardware stack levels used:    1
 12924 ;; Hardware stack levels required when called:    6
 12925 ;; This function calls:
 12926 ;;		___awtoft
 12927 ;;		___ftadd
 12928 ;;		___ftmul
 12929 ;;		_eval_poly
 12930 ;;		_frexp
 12931 ;; This function is called by:
 12932 ;;		_pow
 12933 ;; This function uses a non-reentrant model
 12934 ;;
 12935                           
 12936                           	psect	text88
 12937  001502                     __ptext88:
 12938                           	opt stack 0
 12939  001502                     _log:
 12940                           	opt stack 22
 12941                           
 12942                           ;incstack = 0
 12943  001502  0100               	movlb	0	; () banked
 12944  001504  AF92               	btfss	(log@x+2)& (0+255),7,b
 12945  001506  D00B               	goto	l2161
 12946                           
 12947                           ; BSR set to: 0
 12948  001508  0E00               	movlw	0
 12949  00150A  6FC6               	movwf	(_errno+1)& (0+255),b
 12950  00150C  0E21               	movlw	33
 12951  00150E  6FC5               	movwf	_errno& (0+255),b
 12952  001510  0E00               	movlw	0
 12953  001512  6F90               	movwf	?_log& (0+255),b
 12954  001514  0E00               	movlw	0
 12955  001516  6F91               	movwf	(?_log+1)& (0+255),b
 12956  001518  0E00               	movlw	0
 12957  00151A  6F92               	movwf	(?_log+2)& (0+255),b
 12958                           
 12959                           ; BSR set to: 0
 12960  00151C  0012               	return	
 12961  00151E                     l2161:
 12962                           
 12963                           ; BSR set to: 0
 12964                           
 12965                           ; BSR set to: 0
 12966  00151E  5190               	movf	log@x& (0+255),w,b
 12967  001520  1191               	iorwf	(log@x+1)& (0+255),w,b
 12968  001522  1192               	iorwf	(log@x+2)& (0+255),w,b
 12969  001524  A4D8               	btfss	status,2,c
 12970  001526  D00B               	goto	l2163
 12971                           
 12972                           ; BSR set to: 0
 12973  001528  0E00               	movlw	0
 12974  00152A  6FC6               	movwf	(_errno+1)& (0+255),b
 12975  00152C  0E22               	movlw	34
 12976  00152E  6FC5               	movwf	_errno& (0+255),b
 12977  001530  0E00               	movlw	0
 12978  001532  6F90               	movwf	?_log& (0+255),b
 12979  001534  0E00               	movlw	0
 12980  001536  6F91               	movwf	(?_log+1)& (0+255),b
 12981  001538  0E00               	movlw	0
 12982  00153A  6F92               	movwf	(?_log+2)& (0+255),b
 12983                           
 12984                           ; BSR set to: 0
 12985  00153C  0012               	return	
 12986  00153E                     l2163:
 12987                           
 12988                           ; BSR set to: 0
 12989                           
 12990                           ; BSR set to: 0
 12991  00153E  0E00               	movlw	0
 12992  001540  6F6C               	movwf	___ftmul@f2& (0+255),b
 12993  001542  0E00               	movlw	0
 12994  001544  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 12995  001546  0E40               	movlw	64
 12996  001548  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 12997  00154A  0E93               	movlw	low log@exponent
 12998  00154C  6E1B               	movwf	frexp@eptr,c
 12999  00154E  0E00               	movlw	high log@exponent
 13000  001550  6E1C               	movwf	frexp@eptr+1,c
 13001  001552  C090  F018         	movff	log@x,frexp@value
 13002  001556  C091  F019         	movff	log@x+1,frexp@value+1
 13003  00155A  C092  F01A         	movff	log@x+2,frexp@value+2
 13004  00155E  EC7C  F012         	call	_frexp	;wreg free
 13005  001562  C018  F069         	movff	?_frexp,___ftmul@f1
 13006  001566  C019  F06A         	movff	?_frexp+1,___ftmul@f1+1
 13007  00156A  C01A  F06B         	movff	?_frexp+2,___ftmul@f1+2
 13008  00156E  EC97  F00C         	call	___ftmul	;wreg free
 13009  001572  C069  F078         	movff	?___ftmul,___ftadd@f1
 13010  001576  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 13011  00157A  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 13012  00157E  0E00               	movlw	0
 13013  001580  0100               	movlb	0	; () banked
 13014  001582  6F7B               	movwf	___ftadd@f2& (0+255),b
 13015  001584  0E80               	movlw	128
 13016  001586  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 13017  001588  0EBF               	movlw	191
 13018  00158A  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 13019  00158C  ECEC  F008         	call	___ftadd	;wreg free
 13020  001590  C078  F090         	movff	?___ftadd,log@x
 13021  001594  C079  F091         	movff	?___ftadd+1,log@x+1
 13022  001598  C07A  F092         	movff	?___ftadd+2,log@x+2
 13023  00159C  0100               	movlb	0	; () banked
 13024  00159E  0793               	decf	log@exponent& (0+255),f,b
 13025  0015A0  A0D8               	btfss	status,0,c
 13026  0015A2  0794               	decf	(log@exponent+1)& (0+255),f,b
 13027                           
 13028                           ; BSR set to: 0
 13029  0015A4  C090  F084         	movff	log@x,eval_poly@x
 13030  0015A8  C091  F085         	movff	log@x+1,eval_poly@x+1
 13031  0015AC  C092  F086         	movff	log@x+2,eval_poly@x+2
 13032  0015B0  0E6A               	movlw	low log@coeff
 13033  0015B2  6F87               	movwf	eval_poly@d& (0+255),b
 13034  0015B4  0E06               	movlw	high log@coeff
 13035  0015B6  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 13036  0015B8  0E00               	movlw	0
 13037  0015BA  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 13038  0015BC  0E08               	movlw	8
 13039  0015BE  6F89               	movwf	eval_poly@n& (0+255),b
 13040  0015C0  EC69  F00E         	call	_eval_poly	;wreg free
 13041  0015C4  C084  F090         	movff	?_eval_poly,log@x
 13042  0015C8  C085  F091         	movff	?_eval_poly+1,log@x+1
 13043  0015CC  C086  F092         	movff	?_eval_poly+2,log@x+2
 13044  0015D0  0E72               	movlw	114
 13045  0015D2  0100               	movlb	0	; () banked
 13046  0015D4  6F6C               	movwf	___ftmul@f2& (0+255),b
 13047  0015D6  0E31               	movlw	49
 13048  0015D8  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 13049  0015DA  0E3F               	movlw	63
 13050  0015DC  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 13051  0015DE  C093  F020         	movff	log@exponent,___awtoft@c
 13052  0015E2  C094  F021         	movff	log@exponent+1,___awtoft@c+1
 13053  0015E6  EC1F  F019         	call	___awtoft	;wreg free
 13054  0015EA  C020  F069         	movff	?___awtoft,___ftmul@f1
 13055  0015EE  C021  F06A         	movff	?___awtoft+1,___ftmul@f1+1
 13056  0015F2  C022  F06B         	movff	?___awtoft+2,___ftmul@f1+2
 13057  0015F6  EC97  F00C         	call	___ftmul	;wreg free
 13058  0015FA  C069  F078         	movff	?___ftmul,___ftadd@f1
 13059  0015FE  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 13060  001602  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 13061  001606  C090  F07B         	movff	log@x,___ftadd@f2
 13062  00160A  C091  F07C         	movff	log@x+1,___ftadd@f2+1
 13063  00160E  C092  F07D         	movff	log@x+2,___ftadd@f2+2
 13064  001612  ECEC  F008         	call	___ftadd	;wreg free
 13065  001616  C078  F090         	movff	?___ftadd,?_log
 13066  00161A  C079  F091         	movff	?___ftadd+1,?_log+1
 13067  00161E  C07A  F092         	movff	?___ftadd+2,?_log+2
 13068  001622  0012               	return	
 13069  001624                     __end_of_log:
 13070                           	opt stack 0
 13071                           tosu	equ	0xFFF
 13072                           tosh	equ	0xFFE
 13073                           tosl	equ	0xFFD
 13074                           pclath	equ	0xFFA
 13075                           tblptru	equ	0xFF8
 13076                           tblptrh	equ	0xFF7
 13077                           tblptrl	equ	0xFF6
 13078                           tablat	equ	0xFF5
 13079                           prodh	equ	0xFF4
 13080                           prodl	equ	0xFF3
 13081                           intcon	equ	0xFF2
 13082                           intcon2	equ	0xFF1
 13083                           postinc0	equ	0xFEE
 13084                           wreg	equ	0xFE8
 13085                           indf1	equ	0xFE7
 13086                           postdec1	equ	0xFE5
 13087                           fsr1h	equ	0xFE2
 13088                           fsr1l	equ	0xFE1
 13089                           indf2	equ	0xFDF
 13090                           postinc2	equ	0xFDE
 13091                           postdec2	equ	0xFDD
 13092                           fsr2h	equ	0xFDA
 13093                           fsr2l	equ	0xFD9
 13094                           status	equ	0xFD8
 13095                           
 13096 ;; *************** function _exp *****************
 13097 ;; Defined at:
 13098 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
 13099 ;; Parameters:    Size  Location     Type
 13100 ;;  x               3   57[BANK0 ] int 
 13101 ;; Auto vars:     Size  Location     Type
 13102 ;;  exponent        2   63[BANK0 ] int 
 13103 ;;  sign            1   65[BANK0 ] unsigned char 
 13104 ;; Return value:  Size  Location     Type
 13105 ;;                  3   57[BANK0 ] unsigned char 
 13106 ;; Registers used:
 13107 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13108 ;; Tracked objects:
 13109 ;;		On entry : 0/0
 13110 ;;		On exit  : 0/0
 13111 ;;		Unchanged: 0/0
 13112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13113 ;;      Params:         0       3       0       0       0       0       0
 13114 ;;      Locals:         0       6       0       0       0       0       0
 13115 ;;      Temps:          0       0       0       0       0       0       0
 13116 ;;      Totals:         0       9       0       0       0       0       0
 13117 ;;Total ram usage:        9 bytes
 13118 ;; Hardware stack levels used:    1
 13119 ;; Hardware stack levels required when called:    6
 13120 ;; This function calls:
 13121 ;;		___awtoft
 13122 ;;		___ftdiv
 13123 ;;		___ftge
 13124 ;;		___ftmul
 13125 ;;		___ftneg
 13126 ;;		___ftsub
 13127 ;;		___fttol
 13128 ;;		_eval_poly
 13129 ;;		_floor
 13130 ;;		_ldexp
 13131 ;; This function is called by:
 13132 ;;		_pow
 13133 ;; This function uses a non-reentrant model
 13134 ;;
 13135                           
 13136                           	psect	text89
 13137  000C5A                     __ptext89:
 13138                           	opt stack 0
 13139  000C5A                     _exp:
 13140                           	opt stack 22
 13141                           
 13142                           ;incstack = 0
 13143  000C5A  0100               	movlb	0	; () banked
 13144  000C5C  5199               	movf	exp@x& (0+255),w,b
 13145  000C5E  119A               	iorwf	(exp@x+1)& (0+255),w,b
 13146  000C60  119B               	iorwf	(exp@x+2)& (0+255),w,b
 13147  000C62  A4D8               	btfss	status,2,c
 13148  000C64  D007               	goto	l2097
 13149                           
 13150                           ; BSR set to: 0
 13151  000C66  0E00               	movlw	0
 13152  000C68  6F99               	movwf	?_exp& (0+255),b
 13153  000C6A  0E80               	movlw	128
 13154  000C6C  6F9A               	movwf	(?_exp+1)& (0+255),b
 13155  000C6E  0E3F               	movlw	63
 13156  000C70  6F9B               	movwf	(?_exp+2)& (0+255),b
 13157                           
 13158                           ; BSR set to: 0
 13159  000C72  0012               	return	
 13160  000C74                     l2097:
 13161                           
 13162                           ; BSR set to: 0
 13163                           
 13164                           ; BSR set to: 0
 13165  000C74  0E72               	movlw	114
 13166  000C76  6E18               	movwf	___ftge@ff1,c
 13167  000C78  0E31               	movlw	49
 13168  000C7A  6E19               	movwf	___ftge@ff1+1,c
 13169  000C7C  0E44               	movlw	68
 13170  000C7E  6E1A               	movwf	___ftge@ff1+2,c
 13171  000C80  C099  F01B         	movff	exp@x,___ftge@ff2
 13172  000C84  C09A  F01C         	movff	exp@x+1,___ftge@ff2+1
 13173  000C88  C09B  F01D         	movff	exp@x+2,___ftge@ff2+2
 13174  000C8C  ECC4  F012         	call	___ftge	;wreg free
 13175  000C90  B0D8               	btfsc	status,0,c
 13176  000C92  D00C               	goto	l2099
 13177  000C94  0E00               	movlw	0
 13178  000C96  0100               	movlb	0	; () banked
 13179  000C98  6FC6               	movwf	(_errno+1)& (0+255),b
 13180  000C9A  0E22               	movlw	34
 13181  000C9C  6FC5               	movwf	_errno& (0+255),b
 13182  000C9E  0EFF               	movlw	255
 13183  000CA0  6F99               	movwf	?_exp& (0+255),b
 13184  000CA2  0E7F               	movlw	127
 13185  000CA4  6F9A               	movwf	(?_exp+1)& (0+255),b
 13186  000CA6  0E7F               	movlw	127
 13187  000CA8  6F9B               	movwf	(?_exp+2)& (0+255),b
 13188                           
 13189                           ; BSR set to: 0
 13190  000CAA  0012               	return	
 13191  000CAC                     l2099:
 13192                           
 13193                           ; BSR set to: 0
 13194  000CAC  C099  F018         	movff	exp@x,___ftge@ff1
 13195  000CB0  C09A  F019         	movff	exp@x+1,___ftge@ff1+1
 13196  000CB4  C09B  F01A         	movff	exp@x+2,___ftge@ff1+2
 13197  000CB8  0E49               	movlw	73
 13198  000CBA  6E1B               	movwf	___ftge@ff2,c
 13199  000CBC  0E3A               	movlw	58
 13200  000CBE  6E1C               	movwf	___ftge@ff2+1,c
 13201  000CC0  0EC4               	movlw	196
 13202  000CC2  6E1D               	movwf	___ftge@ff2+2,c
 13203  000CC4  ECC4  F012         	call	___ftge	;wreg free
 13204  000CC8  B0D8               	btfsc	status,0,c
 13205  000CCA  D00C               	goto	l2100
 13206  000CCC  0E00               	movlw	0
 13207  000CCE  0100               	movlb	0	; () banked
 13208  000CD0  6FC6               	movwf	(_errno+1)& (0+255),b
 13209  000CD2  0E22               	movlw	34
 13210  000CD4  6FC5               	movwf	_errno& (0+255),b
 13211  000CD6  0E00               	movlw	0
 13212  000CD8  6F99               	movwf	?_exp& (0+255),b
 13213  000CDA  0E00               	movlw	0
 13214  000CDC  6F9A               	movwf	(?_exp+1)& (0+255),b
 13215  000CDE  0E00               	movlw	0
 13216  000CE0  6F9B               	movwf	(?_exp+2)& (0+255),b
 13217                           
 13218                           ; BSR set to: 0
 13219  000CE2  0012               	return	
 13220  000CE4                     l2100:
 13221                           
 13222                           ; BSR set to: 0
 13223  000CE4  0100               	movlb	0	; () banked
 13224  000CE6  AF9B               	btfss	(exp@x+2)& (0+255),7,b
 13225  000CE8  D002               	goto	u7630
 13226  000CEA  0E01               	movlw	1
 13227  000CEC  D001               	goto	u7640
 13228  000CEE                     u7630:
 13229  000CEE  0E00               	movlw	0
 13230  000CF0                     u7640:
 13231  000CF0  6FA1               	movwf	exp@sign& (0+255),b
 13232                           
 13233                           ; BSR set to: 0
 13234  000CF2  51A1               	movf	exp@sign& (0+255),w,b
 13235  000CF4  B4D8               	btfsc	status,2,c
 13236  000CF6  D00E               	goto	l2101
 13237                           
 13238                           ; BSR set to: 0
 13239  000CF8  C099  F018         	movff	exp@x,___ftneg@f1
 13240  000CFC  C09A  F019         	movff	exp@x+1,___ftneg@f1+1
 13241  000D00  C09B  F01A         	movff	exp@x+2,___ftneg@f1+2
 13242  000D04  ECDD  F01A         	call	___ftneg	;wreg free
 13243  000D08  C018  F099         	movff	?___ftneg,exp@x
 13244  000D0C  C019  F09A         	movff	?___ftneg+1,exp@x+1
 13245  000D10  C01A  F09B         	movff	?___ftneg+2,exp@x+2
 13246  000D14                     l2101:
 13247  000D14  C099  F069         	movff	exp@x,___ftmul@f1
 13248  000D18  C09A  F06A         	movff	exp@x+1,___ftmul@f1+1
 13249  000D1C  C09B  F06B         	movff	exp@x+2,___ftmul@f1+2
 13250  000D20  0EAA               	movlw	170
 13251  000D22  0100               	movlb	0	; () banked
 13252  000D24  6F6C               	movwf	___ftmul@f2& (0+255),b
 13253  000D26  0EB8               	movlw	184
 13254  000D28  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 13255  000D2A  0E3F               	movlw	63
 13256  000D2C  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 13257  000D2E  EC97  F00C         	call	___ftmul	;wreg free
 13258  000D32  C069  F099         	movff	?___ftmul,exp@x
 13259  000D36  C06A  F09A         	movff	?___ftmul+1,exp@x+1
 13260  000D3A  C06B  F09B         	movff	?___ftmul+2,exp@x+2
 13261  000D3E  C099  F091         	movff	exp@x,floor@x
 13262  000D42  C09A  F092         	movff	exp@x+1,floor@x+1
 13263  000D46  C09B  F093         	movff	exp@x+2,floor@x+2
 13264  000D4A  ECF8  F00D         	call	_floor	;wreg free
 13265  000D4E  C091  F09C         	movff	?_floor,_exp$3293
 13266  000D52  C092  F09D         	movff	?_floor+1,_exp$3293+1
 13267  000D56  C093  F09E         	movff	?_floor+2,_exp$3293+2
 13268  000D5A  C09C  F078         	movff	_exp$3293,___fttol@f1
 13269  000D5E  C09D  F079         	movff	_exp$3293+1,___fttol@f1+1
 13270  000D62  C09E  F07A         	movff	_exp$3293+2,___fttol@f1+2
 13271  000D66  EC1B  F00C         	call	___fttol	;wreg free
 13272  000D6A  C078  F09F         	movff	?___fttol,exp@exponent
 13273  000D6E  C079  F0A0         	movff	?___fttol+1,exp@exponent+1
 13274  000D72  C099  F084         	movff	exp@x,___ftsub@f1
 13275  000D76  C09A  F085         	movff	exp@x+1,___ftsub@f1+1
 13276  000D7A  C09B  F086         	movff	exp@x+2,___ftsub@f1+2
 13277  000D7E  C09F  F020         	movff	exp@exponent,___awtoft@c
 13278  000D82  C0A0  F021         	movff	exp@exponent+1,___awtoft@c+1
 13279  000D86  EC1F  F019         	call	___awtoft	;wreg free
 13280  000D8A  C020  F087         	movff	?___awtoft,___ftsub@f2
 13281  000D8E  C021  F088         	movff	?___awtoft+1,___ftsub@f2+1
 13282  000D92  C022  F089         	movff	?___awtoft+2,___ftsub@f2+2
 13283  000D96  EC67  F018         	call	___ftsub	;wreg free
 13284  000D9A  C084  F099         	movff	?___ftsub,exp@x
 13285  000D9E  C085  F09A         	movff	?___ftsub+1,exp@x+1
 13286  000DA2  C086  F09B         	movff	?___ftsub+2,exp@x+2
 13287  000DA6  C099  F084         	movff	exp@x,eval_poly@x
 13288  000DAA  C09A  F085         	movff	exp@x+1,eval_poly@x+1
 13289  000DAE  C09B  F086         	movff	exp@x+2,eval_poly@x+2
 13290  000DB2  0E4C               	movlw	low exp@coeff
 13291  000DB4  0100               	movlb	0	; () banked
 13292  000DB6  6F87               	movwf	eval_poly@d& (0+255),b
 13293  000DB8  0E06               	movlw	high exp@coeff
 13294  000DBA  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 13295  000DBC  0E00               	movlw	0
 13296  000DBE  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 13297  000DC0  0E09               	movlw	9
 13298  000DC2  6F89               	movwf	eval_poly@n& (0+255),b
 13299  000DC4  EC69  F00E         	call	_eval_poly	;wreg free
 13300  000DC8  C084  F090         	movff	?_eval_poly,ldexp@value
 13301  000DCC  C085  F091         	movff	?_eval_poly+1,ldexp@value+1
 13302  000DD0  C086  F092         	movff	?_eval_poly+2,ldexp@value+2
 13303  000DD4  C09F  F093         	movff	exp@exponent,ldexp@newexp
 13304  000DD8  C0A0  F094         	movff	exp@exponent+1,ldexp@newexp+1
 13305  000DDC  ECD6  F00E         	call	_ldexp	;wreg free
 13306  000DE0  C090  F099         	movff	?_ldexp,exp@x
 13307  000DE4  C091  F09A         	movff	?_ldexp+1,exp@x+1
 13308  000DE8  C092  F09B         	movff	?_ldexp+2,exp@x+2
 13309  000DEC  0100               	movlb	0	; () banked
 13310  000DEE  51A1               	movf	exp@sign& (0+255),w,b
 13311  000DF0  B4D8               	btfsc	status,2,c
 13312  000DF2  D025               	goto	l2102
 13313                           
 13314                           ; BSR set to: 0
 13315  000DF4  2999               	incf	exp@x& (0+255),w,b
 13316  000DF6  E10E               	bnz	l7674
 13317  000DF8  0E7F               	movlw	127
 13318  000DFA  199A               	xorwf	(exp@x+1)& (0+255),w,b
 13319  000DFC  E10B               	bnz	l7674
 13320  000DFE  0E7F               	movlw	127
 13321  000E00  199B               	xorwf	(exp@x+2)& (0+255),w,b
 13322  000E02  A4D8               	btfss	status,2,c
 13323  000E04  D007               	goto	l2103
 13324                           
 13325                           ; BSR set to: 0
 13326  000E06  0E00               	movlw	0
 13327  000E08  6F99               	movwf	?_exp& (0+255),b
 13328  000E0A  0E00               	movlw	0
 13329  000E0C  6F9A               	movwf	(?_exp+1)& (0+255),b
 13330  000E0E  0E00               	movlw	0
 13331  000E10  6F9B               	movwf	(?_exp+2)& (0+255),b
 13332                           
 13333                           ; BSR set to: 0
 13334  000E12  0012               	return	
 13335  000E14                     l2103:
 13336  000E14                     l7674:
 13337                           
 13338                           ; BSR set to: 0
 13339  000E14  0E00               	movlw	0
 13340  000E16  6E29               	movwf	___ftdiv@f1,c
 13341  000E18  0E80               	movlw	128
 13342  000E1A  6E2A               	movwf	___ftdiv@f1+1,c
 13343  000E1C  0E3F               	movlw	63
 13344  000E1E  6E2B               	movwf	___ftdiv@f1+2,c
 13345  000E20  C099  F02C         	movff	exp@x,___ftdiv@f2
 13346  000E24  C09A  F02D         	movff	exp@x+1,___ftdiv@f2+1
 13347  000E28  C09B  F02E         	movff	exp@x+2,___ftdiv@f2+2
 13348  000E2C  EC12  F00D         	call	___ftdiv	;wreg free
 13349  000E30  C029  F099         	movff	?___ftdiv,?_exp
 13350  000E34  C02A  F09A         	movff	?___ftdiv+1,?_exp+1
 13351  000E38  C02B  F09B         	movff	?___ftdiv+2,?_exp+2
 13352  000E3C  0012               	return	
 13353  000E3E                     l2102:
 13354                           
 13355                           ; BSR set to: 0
 13356  000E3E  C099  F099         	movff	exp@x,?_exp
 13357  000E42  C09A  F09A         	movff	exp@x+1,?_exp+1
 13358  000E46  C09B  F09B         	movff	exp@x+2,?_exp+2
 13359  000E4A  0012               	return		;funcret
 13360  000E4C                     __end_of_exp:
 13361                           	opt stack 0
 13362                           tosu	equ	0xFFF
 13363                           tosh	equ	0xFFE
 13364                           tosl	equ	0xFFD
 13365                           pclath	equ	0xFFA
 13366                           tblptru	equ	0xFF8
 13367                           tblptrh	equ	0xFF7
 13368                           tblptrl	equ	0xFF6
 13369                           tablat	equ	0xFF5
 13370                           prodh	equ	0xFF4
 13371                           prodl	equ	0xFF3
 13372                           intcon	equ	0xFF2
 13373                           intcon2	equ	0xFF1
 13374                           postinc0	equ	0xFEE
 13375                           wreg	equ	0xFE8
 13376                           indf1	equ	0xFE7
 13377                           postdec1	equ	0xFE5
 13378                           fsr1h	equ	0xFE2
 13379                           fsr1l	equ	0xFE1
 13380                           indf2	equ	0xFDF
 13381                           postinc2	equ	0xFDE
 13382                           postdec2	equ	0xFDD
 13383                           fsr2h	equ	0xFDA
 13384                           fsr2l	equ	0xFD9
 13385                           status	equ	0xFD8
 13386                           
 13387 ;; *************** function _ldexp *****************
 13388 ;; Defined at:
 13389 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 13390 ;; Parameters:    Size  Location     Type
 13391 ;;  value           3   48[BANK0 ] unsigned char 
 13392 ;;  newexp          2   51[BANK0 ] int 
 13393 ;; Auto vars:     Size  Location     Type
 13394 ;;		None
 13395 ;; Return value:  Size  Location     Type
 13396 ;;                  3   48[BANK0 ] int 
 13397 ;; Registers used:
 13398 ;;		wreg, status,2, status,0
 13399 ;; Tracked objects:
 13400 ;;		On entry : 0/0
 13401 ;;		On exit  : 0/0
 13402 ;;		Unchanged: 0/0
 13403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13404 ;;      Params:         0       5       0       0       0       0       0
 13405 ;;      Locals:         0       0       0       0       0       0       0
 13406 ;;      Temps:          0       2       0       0       0       0       0
 13407 ;;      Totals:         0       7       0       0       0       0       0
 13408 ;;Total ram usage:        7 bytes
 13409 ;; Hardware stack levels used:    1
 13410 ;; Hardware stack levels required when called:    3
 13411 ;; This function calls:
 13412 ;;		Nothing
 13413 ;; This function is called by:
 13414 ;;		_exp
 13415 ;; This function uses a non-reentrant model
 13416 ;;
 13417                           
 13418                           	psect	text90
 13419  001DAC                     __ptext90:
 13420                           	opt stack 0
 13421  001DAC                     _ldexp:
 13422                           	opt stack 24
 13423                           
 13424                           ;incstack = 0
 13425  001DAC  0100               	movlb	0	; () banked
 13426  001DAE  5190               	movf	ldexp@value& (0+255),w,b
 13427  001DB0  1191               	iorwf	(ldexp@value+1)& (0+255),w,b
 13428  001DB2  1192               	iorwf	(ldexp@value+2)& (0+255),w,b
 13429  001DB4  A4D8               	btfss	status,2,c
 13430  001DB6  D007               	goto	l2121
 13431                           
 13432                           ; BSR set to: 0
 13433  001DB8  0E00               	movlw	0
 13434  001DBA  6F90               	movwf	?_ldexp& (0+255),b
 13435  001DBC  0E00               	movlw	0
 13436  001DBE  6F91               	movwf	(?_ldexp+1)& (0+255),b
 13437  001DC0  0E00               	movlw	0
 13438  001DC2  6F92               	movwf	(?_ldexp+2)& (0+255),b
 13439                           
 13440                           ; BSR set to: 0
 13441  001DC4  0012               	return	
 13442  001DC6                     l2121:
 13443                           
 13444                           ; BSR set to: 0
 13445                           
 13446                           ; BSR set to: 0
 13447  001DC6  5192               	movf	(ldexp@value+2)& (0+255),w,b
 13448  001DC8  0B7F               	andlw	127
 13449  001DCA  6F95               	movwf	??_ldexp& (0+255),b
 13450  001DCC  6B96               	clrf	(??_ldexp+1)& (0+255),b
 13451  001DCE  90D8               	bcf	status,0,c
 13452  001DD0  3795               	rlcf	??_ldexp& (0+255),f,b
 13453  001DD2  3796               	rlcf	(??_ldexp+1)& (0+255),f,b
 13454  001DD4  5195               	movf	??_ldexp& (0+255),w,b
 13455  001DD6  2793               	addwf	ldexp@newexp& (0+255),f,b
 13456  001DD8  5196               	movf	(??_ldexp+1)& (0+255),w,b
 13457  001DDA  2394               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 13458  001DDC  AF91               	btfss	(ldexp@value+1)& (0+255),7,b
 13459  001DDE  D003               	goto	u4410
 13460  001DE0  6B95               	clrf	??_ldexp& (0+255),b
 13461  001DE2  2B95               	incf	??_ldexp& (0+255),f,b
 13462  001DE4  D002               	goto	u4418
 13463  001DE6                     u4410:
 13464  001DE6  0100               	movlb	0	; () banked
 13465  001DE8  6B95               	clrf	??_ldexp& (0+255),b
 13466  001DEA                     u4418:
 13467  001DEA  5195               	movf	??_ldexp& (0+255),w,b
 13468  001DEC  2793               	addwf	ldexp@newexp& (0+255),f,b
 13469  001DEE  0E00               	movlw	0
 13470  001DF0  2394               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 13471  001DF2  AF94               	btfss	(ldexp@newexp+1)& (0+255),7,b
 13472  001DF4  D00B               	goto	l2123
 13473                           
 13474                           ; BSR set to: 0
 13475  001DF6  0E00               	movlw	0
 13476  001DF8  6FC6               	movwf	(_errno+1)& (0+255),b
 13477  001DFA  0E22               	movlw	34
 13478  001DFC  6FC5               	movwf	_errno& (0+255),b
 13479  001DFE  0E00               	movlw	0
 13480  001E00  6F90               	movwf	?_ldexp& (0+255),b
 13481  001E02  0E00               	movlw	0
 13482  001E04  6F91               	movwf	(?_ldexp+1)& (0+255),b
 13483  001E06  0E00               	movlw	0
 13484  001E08                     L1:
 13485  001E08  6F92               	movwf	(?_ldexp+2)& (0+255),b
 13486                           
 13487                           ; BSR set to: 0
 13488  001E0A  0012               	return	
 13489  001E0C                     l2123:
 13490                           
 13491                           ; BSR set to: 0
 13492                           
 13493                           ; BSR set to: 0
 13494  001E0C  BF94               	btfsc	(ldexp@newexp+1)& (0+255),7,b
 13495  001E0E  D015               	goto	l2125
 13496  001E10  0594               	decf	(ldexp@newexp+1)& (0+255),w,b
 13497  001E12  A0D8               	btfss	status,0,c
 13498  001E14  D012               	goto	l2125
 13499                           
 13500                           ; BSR set to: 0
 13501  001E16  0E00               	movlw	0
 13502  001E18  6FC6               	movwf	(_errno+1)& (0+255),b
 13503  001E1A  0E22               	movlw	34
 13504  001E1C  6FC5               	movwf	_errno& (0+255),b
 13505                           
 13506                           ; BSR set to: 0
 13507  001E1E  AF92               	btfss	(ldexp@value+2)& (0+255),7,b
 13508  001E20  D006               	goto	l2126
 13509                           
 13510                           ; BSR set to: 0
 13511  001E22  0EFF               	movlw	255
 13512  001E24  6F90               	movwf	?_ldexp& (0+255),b
 13513  001E26  0E7F               	movlw	127
 13514  001E28  6F91               	movwf	(?_ldexp+1)& (0+255),b
 13515  001E2A  0EFF               	movlw	255
 13516  001E2C  D7ED               	goto	L1
 13517  001E2E                     l2126:
 13518                           
 13519                           ; BSR set to: 0
 13520                           
 13521                           ; BSR set to: 0
 13522  001E2E  0EFF               	movlw	255
 13523  001E30  6F90               	movwf	?_ldexp& (0+255),b
 13524  001E32  0E7F               	movlw	127
 13525  001E34  6F91               	movwf	(?_ldexp+1)& (0+255),b
 13526  001E36  0E7F               	movlw	127
 13527  001E38  D7E7               	goto	L1
 13528  001E3A                     l2125:
 13529                           
 13530                           ; BSR set to: 0
 13531                           
 13532                           ; BSR set to: 0
 13533  001E3A  3594               	rlcf	(ldexp@newexp+1)& (0+255),w,b
 13534  001E3C  3194               	rrcf	(ldexp@newexp+1)& (0+255),w,b
 13535  001E3E  6F96               	movwf	(??_ldexp+1)& (0+255),b
 13536  001E40  3193               	rrcf	ldexp@newexp& (0+255),w,b
 13537  001E42  6F95               	movwf	??_ldexp& (0+255),b
 13538  001E44  5192               	movf	(ldexp@value+2)& (0+255),w,b
 13539  001E46  1995               	xorwf	??_ldexp& (0+255),w,b
 13540  001E48  0B80               	andlw	-128
 13541  001E4A  1995               	xorwf	??_ldexp& (0+255),w,b
 13542  001E4C  6F92               	movwf	(ldexp@value+2)& (0+255),b
 13543  001E4E  C093  F095         	movff	ldexp@newexp,??_ldexp
 13544  001E52  0E01               	movlw	1
 13545  001E54  1795               	andwf	??_ldexp& (0+255),f,b
 13546  001E56  3395               	rrcf	??_ldexp& (0+255),f,b
 13547  001E58  3395               	rrcf	??_ldexp& (0+255),f,b
 13548  001E5A  5191               	movf	(ldexp@value+1)& (0+255),w,b
 13549  001E5C  1995               	xorwf	??_ldexp& (0+255),w,b
 13550  001E5E  0B7F               	andlw	-129
 13551  001E60  1995               	xorwf	??_ldexp& (0+255),w,b
 13552  001E62  6F91               	movwf	(ldexp@value+1)& (0+255),b
 13553                           
 13554                           ; BSR set to: 0
 13555                           
 13556                           ; BSR set to: 0
 13557                           
 13558                           ; BSR set to: 0
 13559  001E64  C090  F090         	movff	ldexp@value,?_ldexp
 13560  001E68  C091  F091         	movff	ldexp@value+1,?_ldexp+1
 13561  001E6C  C092  F092         	movff	ldexp@value+2,?_ldexp+2
 13562  001E70  0012               	return	
 13563  001E72                     __end_of_ldexp:
 13564                           	opt stack 0
 13565                           tosu	equ	0xFFF
 13566                           tosh	equ	0xFFE
 13567                           tosl	equ	0xFFD
 13568                           pclath	equ	0xFFA
 13569                           tblptru	equ	0xFF8
 13570                           tblptrh	equ	0xFF7
 13571                           tblptrl	equ	0xFF6
 13572                           tablat	equ	0xFF5
 13573                           prodh	equ	0xFF4
 13574                           prodl	equ	0xFF3
 13575                           intcon	equ	0xFF2
 13576                           intcon2	equ	0xFF1
 13577                           postinc0	equ	0xFEE
 13578                           wreg	equ	0xFE8
 13579                           indf1	equ	0xFE7
 13580                           postdec1	equ	0xFE5
 13581                           fsr1h	equ	0xFE2
 13582                           fsr1l	equ	0xFE1
 13583                           indf2	equ	0xFDF
 13584                           postinc2	equ	0xFDE
 13585                           postdec2	equ	0xFDD
 13586                           fsr2h	equ	0xFDA
 13587                           fsr2l	equ	0xFD9
 13588                           status	equ	0xFD8
 13589                           
 13590 ;; *************** function _floor *****************
 13591 ;; Defined at:
 13592 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
 13593 ;; Parameters:    Size  Location     Type
 13594 ;;  x               3   49[BANK0 ] int 
 13595 ;; Auto vars:     Size  Location     Type
 13596 ;;  i               3   52[BANK0 ] int 
 13597 ;;  expon           2   55[BANK0 ] int 
 13598 ;; Return value:  Size  Location     Type
 13599 ;;                  3   49[BANK0 ] int 
 13600 ;; Registers used:
 13601 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13602 ;; Tracked objects:
 13603 ;;		On entry : 0/0
 13604 ;;		On exit  : 0/0
 13605 ;;		Unchanged: 0/0
 13606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13607 ;;      Params:         0       3       0       0       0       0       0
 13608 ;;      Locals:         0       5       0       0       0       0       0
 13609 ;;      Temps:          0       0       0       0       0       0       0
 13610 ;;      Totals:         0       8       0       0       0       0       0
 13611 ;;Total ram usage:        8 bytes
 13612 ;; Hardware stack levels used:    1
 13613 ;; Hardware stack levels required when called:    5
 13614 ;; This function calls:
 13615 ;;		___altoft
 13616 ;;		___ftadd
 13617 ;;		___ftge
 13618 ;;		___fttol
 13619 ;;		_frexp
 13620 ;; This function is called by:
 13621 ;;		_exp
 13622 ;; This function uses a non-reentrant model
 13623 ;;
 13624                           
 13625                           	psect	text91
 13626  001BF0                     __ptext91:
 13627                           	opt stack 0
 13628  001BF0                     _floor:
 13629                           	opt stack 22
 13630                           
 13631                           ; BSR set to: 0
 13632                           ;incstack = 0
 13633  001BF0  C091  F018         	movff	floor@x,frexp@value
 13634  001BF4  C092  F019         	movff	floor@x+1,frexp@value+1
 13635  001BF8  C093  F01A         	movff	floor@x+2,frexp@value+2
 13636  001BFC  0E97               	movlw	low floor@expon
 13637  001BFE  6E1B               	movwf	frexp@eptr,c
 13638  001C00  0E00               	movlw	high floor@expon
 13639  001C02  6E1C               	movwf	frexp@eptr+1,c
 13640  001C04  EC7C  F012         	call	_frexp	;wreg free
 13641  001C08  0100               	movlb	0	; () banked
 13642  001C0A  AF98               	btfss	(floor@expon+1)& (0+255),7,b
 13643  001C0C  D010               	goto	l2108
 13644                           
 13645                           ; BSR set to: 0
 13646  001C0E  AF93               	btfss	(floor@x+2)& (0+255),7,b
 13647  001C10  D007               	goto	l2109
 13648                           
 13649                           ; BSR set to: 0
 13650  001C12  0E00               	movlw	0
 13651  001C14  6F91               	movwf	?_floor& (0+255),b
 13652  001C16  0E80               	movlw	128
 13653  001C18  6F92               	movwf	(?_floor+1)& (0+255),b
 13654  001C1A  0EBF               	movlw	191
 13655  001C1C  6F93               	movwf	(?_floor+2)& (0+255),b
 13656                           
 13657                           ; BSR set to: 0
 13658  001C1E  0012               	return	
 13659  001C20                     l2109:
 13660                           
 13661                           ; BSR set to: 0
 13662                           
 13663                           ; BSR set to: 0
 13664  001C20  0E00               	movlw	0
 13665  001C22  6F91               	movwf	?_floor& (0+255),b
 13666  001C24  0E00               	movlw	0
 13667  001C26  6F92               	movwf	(?_floor+1)& (0+255),b
 13668  001C28  0E00               	movlw	0
 13669  001C2A  6F93               	movwf	(?_floor+2)& (0+255),b
 13670                           
 13671                           ; BSR set to: 0
 13672  001C2C  0012               	return	
 13673  001C2E                     l2108:
 13674                           
 13675                           ; BSR set to: 0
 13676                           
 13677                           ; BSR set to: 0
 13678  001C2E  5198               	movf	(floor@expon+1)& (0+255),w,b
 13679  001C30  E104               	bnz	u7110
 13680  001C32  0E15               	movlw	21
 13681  001C34  5D97               	subwf	floor@expon& (0+255),w,b
 13682  001C36  A0D8               	btfss	status,0,c
 13683  001C38  D007               	goto	l2111
 13684  001C3A                     u7110:
 13685                           
 13686                           ; BSR set to: 0
 13687  001C3A  C091  F091         	movff	floor@x,?_floor
 13688  001C3E  C092  F092         	movff	floor@x+1,?_floor+1
 13689  001C42  C093  F093         	movff	floor@x+2,?_floor+2
 13690  001C46  0012               	return	
 13691  001C48                     l2111:
 13692                           
 13693                           ; BSR set to: 0
 13694                           
 13695                           ; BSR set to: 0
 13696  001C48  C091  F078         	movff	floor@x,___fttol@f1
 13697  001C4C  C092  F079         	movff	floor@x+1,___fttol@f1+1
 13698  001C50  C093  F07A         	movff	floor@x+2,___fttol@f1+2
 13699  001C54  EC1B  F00C         	call	___fttol	;wreg free
 13700  001C58  C078  F087         	movff	?___fttol,___altoft@c
 13701  001C5C  C079  F088         	movff	?___fttol+1,___altoft@c+1
 13702  001C60  C07A  F089         	movff	?___fttol+2,___altoft@c+2
 13703  001C64  C07B  F08A         	movff	?___fttol+3,___altoft@c+3
 13704  001C68  EC8F  F013         	call	___altoft	;wreg free
 13705  001C6C  C087  F094         	movff	?___altoft,floor@i
 13706  001C70  C088  F095         	movff	?___altoft+1,floor@i+1
 13707  001C74  C089  F096         	movff	?___altoft+2,floor@i+2
 13708  001C78  C091  F018         	movff	floor@x,___ftge@ff1
 13709  001C7C  C092  F019         	movff	floor@x+1,___ftge@ff1+1
 13710  001C80  C093  F01A         	movff	floor@x+2,___ftge@ff1+2
 13711  001C84  C094  F01B         	movff	floor@i,___ftge@ff2
 13712  001C88  C095  F01C         	movff	floor@i+1,___ftge@ff2+1
 13713  001C8C  C096  F01D         	movff	floor@i+2,___ftge@ff2+2
 13714  001C90  ECC4  F012         	call	___ftge	;wreg free
 13715  001C94  B0D8               	btfsc	status,0,c
 13716  001C96  D016               	goto	l2112
 13717  001C98  C094  F078         	movff	floor@i,___ftadd@f1
 13718  001C9C  C095  F079         	movff	floor@i+1,___ftadd@f1+1
 13719  001CA0  C096  F07A         	movff	floor@i+2,___ftadd@f1+2
 13720  001CA4  0E00               	movlw	0
 13721  001CA6  0100               	movlb	0	; () banked
 13722  001CA8  6F7B               	movwf	___ftadd@f2& (0+255),b
 13723  001CAA  0E80               	movlw	128
 13724  001CAC  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 13725  001CAE  0EBF               	movlw	191
 13726  001CB0  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 13727  001CB2  ECEC  F008         	call	___ftadd	;wreg free
 13728  001CB6  C078  F091         	movff	?___ftadd,?_floor
 13729  001CBA  C079  F092         	movff	?___ftadd+1,?_floor+1
 13730  001CBE  C07A  F093         	movff	?___ftadd+2,?_floor+2
 13731  001CC2  0012               	return	
 13732  001CC4                     l2112:
 13733  001CC4  C094  F091         	movff	floor@i,?_floor
 13734  001CC8  C095  F092         	movff	floor@i+1,?_floor+1
 13735  001CCC  C096  F093         	movff	floor@i+2,?_floor+2
 13736  001CD0  0012               	return		;funcret
 13737  001CD2                     __end_of_floor:
 13738                           	opt stack 0
 13739                           tosu	equ	0xFFF
 13740                           tosh	equ	0xFFE
 13741                           tosl	equ	0xFFD
 13742                           pclath	equ	0xFFA
 13743                           tblptru	equ	0xFF8
 13744                           tblptrh	equ	0xFF7
 13745                           tblptrl	equ	0xFF6
 13746                           tablat	equ	0xFF5
 13747                           prodh	equ	0xFF4
 13748                           prodl	equ	0xFF3
 13749                           intcon	equ	0xFF2
 13750                           intcon2	equ	0xFF1
 13751                           postinc0	equ	0xFEE
 13752                           wreg	equ	0xFE8
 13753                           indf1	equ	0xFE7
 13754                           postdec1	equ	0xFE5
 13755                           fsr1h	equ	0xFE2
 13756                           fsr1l	equ	0xFE1
 13757                           indf2	equ	0xFDF
 13758                           postinc2	equ	0xFDE
 13759                           postdec2	equ	0xFDD
 13760                           fsr2h	equ	0xFDA
 13761                           fsr2l	equ	0xFD9
 13762                           status	equ	0xFD8
 13763                           
 13764 ;; *************** function _frexp *****************
 13765 ;; Defined at:
 13766 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 13767 ;; Parameters:    Size  Location     Type
 13768 ;;  value           3   23[COMRAM] int 
 13769 ;;  eptr            2   26[COMRAM] PTR int 
 13770 ;;		 -> log@exponent(2), floor@expon(2), 
 13771 ;; Auto vars:     Size  Location     Type
 13772 ;;		None
 13773 ;; Return value:  Size  Location     Type
 13774 ;;                  3   23[COMRAM] PTR int 
 13775 ;; Registers used:
 13776 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13777 ;; Tracked objects:
 13778 ;;		On entry : 0/0
 13779 ;;		On exit  : 0/0
 13780 ;;		Unchanged: 0/0
 13781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13782 ;;      Params:         5       0       0       0       0       0       0
 13783 ;;      Locals:         0       0       0       0       0       0       0
 13784 ;;      Temps:          2       0       0       0       0       0       0
 13785 ;;      Totals:         7       0       0       0       0       0       0
 13786 ;;Total ram usage:        7 bytes
 13787 ;; Hardware stack levels used:    1
 13788 ;; Hardware stack levels required when called:    3
 13789 ;; This function calls:
 13790 ;;		Nothing
 13791 ;; This function is called by:
 13792 ;;		_floor
 13793 ;;		_log
 13794 ;; This function uses a non-reentrant model
 13795 ;;
 13796                           
 13797                           	psect	text92
 13798  0024F8                     __ptext92:
 13799                           	opt stack 0
 13800  0024F8                     _frexp:
 13801                           	opt stack 24
 13802                           
 13803                           ;incstack = 0
 13804  0024F8  5018               	movf	frexp@value,w,c
 13805  0024FA  1019               	iorwf	frexp@value+1,w,c
 13806  0024FC  101A               	iorwf	frexp@value+2,w,c
 13807  0024FE  A4D8               	btfss	status,2,c
 13808  002500  D00F               	goto	l2117
 13809  002502  C01B  FFD9         	movff	frexp@eptr,fsr2l
 13810  002506  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 13811  00250A  0E00               	movlw	0
 13812  00250C  6EDE               	movwf	postinc2,c
 13813  00250E  0E00               	movlw	0
 13814  002510  6EDD               	movwf	postdec2,c
 13815  002512  0E00               	movlw	0
 13816  002514  6E18               	movwf	?_frexp,c
 13817  002516  0E00               	movlw	0
 13818  002518  6E19               	movwf	?_frexp+1,c
 13819  00251A  0E00               	movlw	0
 13820  00251C  6E1A               	movwf	?_frexp+2,c
 13821  00251E  0012               	return	
 13822  002520                     l2117:
 13823  002520  501A               	movf	frexp@value+2,w,c
 13824  002522  0B7F               	andlw	127
 13825  002524  6E1D               	movwf	??_frexp& (0+255),c
 13826  002526  6A1E               	clrf	(??_frexp+1)& (0+255),c
 13827  002528  90D8               	bcf	status,0,c
 13828  00252A  361D               	rlcf	??_frexp,f,c
 13829  00252C  361E               	rlcf	??_frexp+1,f,c
 13830  00252E  C01B  FFD9         	movff	frexp@eptr,fsr2l
 13831  002532  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 13832  002536  C01D  FFDE         	movff	??_frexp,postinc2
 13833  00253A  C01E  FFDD         	movff	??_frexp+1,postdec2
 13834  00253E  AE19               	btfss	frexp@value+1,7,c
 13835  002540  D003               	goto	u4100
 13836  002542  6A1D               	clrf	??_frexp& (0+255),c
 13837  002544  2A1D               	incf	??_frexp& (0+255),f,c
 13838  002546  D001               	goto	u4108
 13839  002548                     u4100:
 13840  002548  6A1D               	clrf	??_frexp& (0+255),c
 13841  00254A                     u4108:
 13842  00254A  501D               	movf	??_frexp,w,c
 13843  00254C  C01B  FFD9         	movff	frexp@eptr,fsr2l
 13844  002550  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 13845  002554  12DE               	iorwf	postinc2,f,c
 13846  002556  0E00               	movlw	0
 13847  002558  12DD               	iorwf	postdec2,f,c
 13848  00255A  C01B  FFD9         	movff	frexp@eptr,fsr2l
 13849  00255E  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 13850  002562  0E82               	movlw	130
 13851  002564  26DE               	addwf	postinc2,f,c
 13852  002566  0EFF               	movlw	255
 13853  002568  22DD               	addwfc	postdec2,f,c
 13854  00256A  801A               	bsf	frexp@value+2,0,c
 13855  00256C  821A               	bsf	frexp@value+2,1,c
 13856  00256E  841A               	bsf	frexp@value+2,2,c
 13857  002570  861A               	bsf	frexp@value+2,3,c
 13858  002572  881A               	bsf	frexp@value+2,4,c
 13859  002574  8A1A               	bsf	frexp@value+2,5,c
 13860  002576  9C1A               	bcf	frexp@value+2,6,c
 13861  002578  9E19               	bcf	frexp@value+1,7,c
 13862  00257A  C018  F018         	movff	frexp@value,?_frexp
 13863  00257E  C019  F019         	movff	frexp@value+1,?_frexp+1
 13864  002582  C01A  F01A         	movff	frexp@value+2,?_frexp+2
 13865  002586  0012               	return	
 13866  002588                     __end_of_frexp:
 13867                           	opt stack 0
 13868                           tosu	equ	0xFFF
 13869                           tosh	equ	0xFFE
 13870                           tosl	equ	0xFFD
 13871                           pclath	equ	0xFFA
 13872                           tblptru	equ	0xFF8
 13873                           tblptrh	equ	0xFF7
 13874                           tblptrl	equ	0xFF6
 13875                           tablat	equ	0xFF5
 13876                           prodh	equ	0xFF4
 13877                           prodl	equ	0xFF3
 13878                           intcon	equ	0xFF2
 13879                           intcon2	equ	0xFF1
 13880                           postinc0	equ	0xFEE
 13881                           wreg	equ	0xFE8
 13882                           indf1	equ	0xFE7
 13883                           postdec1	equ	0xFE5
 13884                           fsr1h	equ	0xFE2
 13885                           fsr1l	equ	0xFE1
 13886                           indf2	equ	0xFDF
 13887                           postinc2	equ	0xFDE
 13888                           postdec2	equ	0xFDD
 13889                           fsr2h	equ	0xFDA
 13890                           fsr2l	equ	0xFD9
 13891                           status	equ	0xFD8
 13892                           
 13893 ;; *************** function ___fttol *****************
 13894 ;; Defined at:
 13895 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 13896 ;; Parameters:    Size  Location     Type
 13897 ;;  f1              3   24[BANK0 ] float 
 13898 ;; Auto vars:     Size  Location     Type
 13899 ;;  lval            4   34[BANK0 ] unsigned long 
 13900 ;;  exp1            1   38[BANK0 ] unsigned char 
 13901 ;;  sign1           1   33[BANK0 ] unsigned char 
 13902 ;; Return value:  Size  Location     Type
 13903 ;;                  4   24[BANK0 ] long 
 13904 ;; Registers used:
 13905 ;;		wreg, status,2, status,0
 13906 ;; Tracked objects:
 13907 ;;		On entry : 0/0
 13908 ;;		On exit  : 0/0
 13909 ;;		Unchanged: 0/0
 13910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13911 ;;      Params:         0       4       0       0       0       0       0
 13912 ;;      Locals:         0       6       0       0       0       0       0
 13913 ;;      Temps:          0       5       0       0       0       0       0
 13914 ;;      Totals:         0      15       0       0       0       0       0
 13915 ;;Total ram usage:       15 bytes
 13916 ;; Hardware stack levels used:    1
 13917 ;; Hardware stack levels required when called:    3
 13918 ;; This function calls:
 13919 ;;		Nothing
 13920 ;; This function is called by:
 13921 ;;		_AdcConvert
 13922 ;;		_pow
 13923 ;;		_exp
 13924 ;;		_floor
 13925 ;; This function uses a non-reentrant model
 13926 ;;
 13927                           
 13928                           	psect	text93
 13929  001836                     __ptext93:
 13930                           	opt stack 0
 13931  001836                     ___fttol:
 13932                           	opt stack 23
 13933                           
 13934                           ;incstack = 0
 13935  001836  C07A  F07C         	movff	___fttol@f1+2,??___fttol
 13936  00183A  0100               	movlb	0	; () banked
 13937  00183C  6B7D               	clrf	(??___fttol+1)& (0+255),b
 13938  00183E  6B7E               	clrf	(??___fttol+2)& (0+255),b
 13939  001840  3579               	rlcf	(___fttol@f1+1)& (0+255),w,b
 13940  001842  377C               	rlcf	??___fttol& (0+255),f,b
 13941  001844  E301               	bnc	u4011
 13942  001846  817D               	bsf	(??___fttol+1)& (0+255),0,b
 13943  001848                     u4011:
 13944  001848  517C               	movf	??___fttol& (0+255),w,b
 13945  00184A  6F86               	movwf	___fttol@exp1& (0+255),b
 13946  00184C  5186               	movf	___fttol@exp1& (0+255),w,b
 13947  00184E  A4D8               	btfss	status,2,c
 13948  001850  D009               	goto	l1774
 13949                           
 13950                           ; BSR set to: 0
 13951  001852  0E00               	movlw	0
 13952  001854  6F78               	movwf	?___fttol& (0+255),b
 13953  001856  0E00               	movlw	0
 13954  001858  6F79               	movwf	(?___fttol+1)& (0+255),b
 13955  00185A  0E00               	movlw	0
 13956  00185C  6F7A               	movwf	(?___fttol+2)& (0+255),b
 13957  00185E  0E00               	movlw	0
 13958  001860  6F7B               	movwf	(?___fttol+3)& (0+255),b
 13959                           
 13960                           ; BSR set to: 0
 13961  001862  0012               	return	
 13962  001864                     l1774:
 13963                           
 13964                           ; BSR set to: 0
 13965                           
 13966                           ; BSR set to: 0
 13967  001864  0E17               	movlw	23
 13968  001866  6F7C               	movwf	??___fttol& (0+255),b
 13969  001868  C078  F07D         	movff	___fttol@f1,??___fttol+1
 13970  00186C  C079  F07E         	movff	___fttol@f1+1,??___fttol+2
 13971  001870  C07A  F07F         	movff	___fttol@f1+2,??___fttol+3
 13972  001874  297C               	incf	??___fttol& (0+255),w,b
 13973  001876  6F80               	movwf	(??___fttol+4)& (0+255),b
 13974  001878  D004               	goto	u4030
 13975  00187A                     u4035:
 13976  00187A  90D8               	bcf	status,0,c
 13977  00187C  337F               	rrcf	(??___fttol+3)& (0+255),f,b
 13978  00187E  337E               	rrcf	(??___fttol+2)& (0+255),f,b
 13979  001880  337D               	rrcf	(??___fttol+1)& (0+255),f,b
 13980  001882                     u4030:
 13981  001882  2F80               	decfsz	(??___fttol+4)& (0+255),f,b
 13982  001884  D7FA               	goto	u4035
 13983  001886  0100               	movlb	0	; () banked
 13984  001888  517D               	movf	(??___fttol+1)& (0+255),w,b
 13985  00188A  6F81               	movwf	___fttol@sign1& (0+255),b
 13986                           
 13987                           ; BSR set to: 0
 13988  00188C  8F79               	bsf	(___fttol@f1+1)& (0+255),7,b
 13989                           
 13990                           ; BSR set to: 0
 13991  00188E  0EFF               	movlw	255
 13992  001890  1778               	andwf	___fttol@f1& (0+255),f,b
 13993  001892  0EFF               	movlw	255
 13994  001894  1779               	andwf	(___fttol@f1+1)& (0+255),f,b
 13995  001896  0E00               	movlw	0
 13996  001898  177A               	andwf	(___fttol@f1+2)& (0+255),f,b
 13997                           
 13998                           ; BSR set to: 0
 13999  00189A  5178               	movf	___fttol@f1& (0+255),w,b
 14000  00189C  6F82               	movwf	___fttol@lval& (0+255),b
 14001  00189E  5179               	movf	(___fttol@f1+1)& (0+255),w,b
 14002  0018A0  6F83               	movwf	(___fttol@lval+1)& (0+255),b
 14003  0018A2  517A               	movf	(___fttol@f1+2)& (0+255),w,b
 14004  0018A4  6F84               	movwf	(___fttol@lval+2)& (0+255),b
 14005  0018A6  6B85               	clrf	(___fttol@lval+3)& (0+255),b
 14006                           
 14007                           ; BSR set to: 0
 14008  0018A8  0E8E               	movlw	142
 14009  0018AA  5F86               	subwf	___fttol@exp1& (0+255),f,b
 14010                           
 14011                           ; BSR set to: 0
 14012  0018AC  AF86               	btfss	___fttol@exp1& (0+255),7,b
 14013  0018AE  D016               	goto	l1776
 14014                           
 14015                           ; BSR set to: 0
 14016  0018B0  5186               	movf	___fttol@exp1& (0+255),w,b
 14017  0018B2  0A80               	xorlw	128
 14018  0018B4  0F8F               	addlw	143
 14019  0018B6  B0D8               	btfsc	status,0,c
 14020  0018B8  D009               	goto	l1777
 14021                           
 14022                           ; BSR set to: 0
 14023  0018BA  0E00               	movlw	0
 14024  0018BC  6F78               	movwf	?___fttol& (0+255),b
 14025  0018BE  0E00               	movlw	0
 14026  0018C0  6F79               	movwf	(?___fttol+1)& (0+255),b
 14027  0018C2  0E00               	movlw	0
 14028  0018C4  6F7A               	movwf	(?___fttol+2)& (0+255),b
 14029  0018C6  0E00               	movlw	0
 14030  0018C8  6F7B               	movwf	(?___fttol+3)& (0+255),b
 14031                           
 14032                           ; BSR set to: 0
 14033  0018CA  0012               	return	
 14034  0018CC                     l1777:
 14035                           
 14036                           ; BSR set to: 0
 14037                           
 14038                           ; BSR set to: 0
 14039                           
 14040                           ; BSR set to: 0
 14041  0018CC  90D8               	bcf	status,0,c
 14042  0018CE  3385               	rrcf	(___fttol@lval+3)& (0+255),f,b
 14043  0018D0  3384               	rrcf	(___fttol@lval+2)& (0+255),f,b
 14044  0018D2  3383               	rrcf	(___fttol@lval+1)& (0+255),f,b
 14045  0018D4  3382               	rrcf	___fttol@lval& (0+255),f,b
 14046                           
 14047                           ; BSR set to: 0
 14048  0018D6  3F86               	incfsz	___fttol@exp1& (0+255),f,b
 14049  0018D8  D7F9               	goto	l1777
 14050                           
 14051                           ; BSR set to: 0
 14052  0018DA  D015               	goto	u4070
 14053  0018DC                     l1776:
 14054                           
 14055                           ; BSR set to: 0
 14056                           
 14057                           ; BSR set to: 0
 14058  0018DC  0E17               	movlw	23
 14059  0018DE  6586               	cpfsgt	___fttol@exp1& (0+255),b
 14060  0018E0  D00F               	goto	l1782
 14061                           
 14062                           ; BSR set to: 0
 14063  0018E2  0E00               	movlw	0
 14064  0018E4  6F78               	movwf	?___fttol& (0+255),b
 14065  0018E6  0E00               	movlw	0
 14066  0018E8  6F79               	movwf	(?___fttol+1)& (0+255),b
 14067  0018EA  0E00               	movlw	0
 14068  0018EC  6F7A               	movwf	(?___fttol+2)& (0+255),b
 14069  0018EE  0E00               	movlw	0
 14070  0018F0  6F7B               	movwf	(?___fttol+3)& (0+255),b
 14071                           
 14072                           ; BSR set to: 0
 14073  0018F2  0012               	return	
 14074  0018F4                     
 14075                           ; BSR set to: 0
 14076                           
 14077                           ; BSR set to: 0
 14078  0018F4  90D8               	bcf	status,0,c
 14079  0018F6  3782               	rlcf	___fttol@lval& (0+255),f,b
 14080  0018F8  3783               	rlcf	(___fttol@lval+1)& (0+255),f,b
 14081  0018FA  3784               	rlcf	(___fttol@lval+2)& (0+255),f,b
 14082  0018FC  3785               	rlcf	(___fttol@lval+3)& (0+255),f,b
 14083  0018FE  0786               	decf	___fttol@exp1& (0+255),f,b
 14084  001900                     l1782:
 14085                           
 14086                           ; BSR set to: 0
 14087                           
 14088                           ; BSR set to: 0
 14089  001900  5186               	movf	___fttol@exp1& (0+255),w,b
 14090  001902  A4D8               	btfss	status,2,c
 14091  001904  D7F7               	goto	l1783
 14092  001906                     u4070:
 14093                           
 14094                           ; BSR set to: 0
 14095                           
 14096                           ; BSR set to: 0
 14097                           
 14098                           ; BSR set to: 0
 14099  001906  5181               	movf	___fttol@sign1& (0+255),w,b
 14100  001908  B4D8               	btfsc	status,2,c
 14101  00190A  D008               	goto	l1785
 14102                           
 14103                           ; BSR set to: 0
 14104  00190C  1F85               	comf	(___fttol@lval+3)& (0+255),f,b
 14105  00190E  1F84               	comf	(___fttol@lval+2)& (0+255),f,b
 14106  001910  1F83               	comf	(___fttol@lval+1)& (0+255),f,b
 14107  001912  6D82               	negf	___fttol@lval& (0+255),b
 14108  001914  0E00               	movlw	0
 14109  001916  2383               	addwfc	(___fttol@lval+1)& (0+255),f,b
 14110  001918  2384               	addwfc	(___fttol@lval+2)& (0+255),f,b
 14111  00191A  2385               	addwfc	(___fttol@lval+3)& (0+255),f,b
 14112  00191C                     l1785:
 14113                           
 14114                           ; BSR set to: 0
 14115                           
 14116                           ; BSR set to: 0
 14117  00191C  C082  F078         	movff	___fttol@lval,?___fttol
 14118  001920  C083  F079         	movff	___fttol@lval+1,?___fttol+1
 14119  001924  C084  F07A         	movff	___fttol@lval+2,?___fttol+2
 14120  001928  C085  F07B         	movff	___fttol@lval+3,?___fttol+3
 14121  00192C  0012               	return	
 14122  00192E                     __end_of___fttol:
 14123                           	opt stack 0
 14124                           tosu	equ	0xFFF
 14125                           tosh	equ	0xFFE
 14126                           tosl	equ	0xFFD
 14127                           pclath	equ	0xFFA
 14128                           tblptru	equ	0xFF8
 14129                           tblptrh	equ	0xFF7
 14130                           tblptrl	equ	0xFF6
 14131                           tablat	equ	0xFF5
 14132                           prodh	equ	0xFF4
 14133                           prodl	equ	0xFF3
 14134                           intcon	equ	0xFF2
 14135                           intcon2	equ	0xFF1
 14136                           postinc0	equ	0xFEE
 14137                           wreg	equ	0xFE8
 14138                           indf1	equ	0xFE7
 14139                           postdec1	equ	0xFE5
 14140                           fsr1h	equ	0xFE2
 14141                           fsr1l	equ	0xFE1
 14142                           indf2	equ	0xFDF
 14143                           postinc2	equ	0xFDE
 14144                           postdec2	equ	0xFDD
 14145                           fsr2h	equ	0xFDA
 14146                           fsr2l	equ	0xFD9
 14147                           status	equ	0xFD8
 14148                           
 14149 ;; *************** function ___ftge *****************
 14150 ;; Defined at:
 14151 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 14152 ;; Parameters:    Size  Location     Type
 14153 ;;  ff1             3   23[COMRAM] float 
 14154 ;;  ff2             3   26[COMRAM] float 
 14155 ;; Auto vars:     Size  Location     Type
 14156 ;;		None
 14157 ;; Return value:  Size  Location     Type
 14158 ;;		None               void
 14159 ;; Registers used:
 14160 ;;		wreg, status,2, status,0
 14161 ;; Tracked objects:
 14162 ;;		On entry : 0/0
 14163 ;;		On exit  : 0/0
 14164 ;;		Unchanged: 0/0
 14165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14166 ;;      Params:         6       0       0       0       0       0       0
 14167 ;;      Locals:         0       0       0       0       0       0       0
 14168 ;;      Temps:          3       0       0       0       0       0       0
 14169 ;;      Totals:         9       0       0       0       0       0       0
 14170 ;;Total ram usage:        9 bytes
 14171 ;; Hardware stack levels used:    1
 14172 ;; Hardware stack levels required when called:    3
 14173 ;; This function calls:
 14174 ;;		Nothing
 14175 ;; This function is called by:
 14176 ;;		_CheckFlashPrecentage
 14177 ;;		_pow
 14178 ;;		_exp
 14179 ;;		_floor
 14180 ;; This function uses a non-reentrant model
 14181 ;;
 14182                           
 14183                           	psect	text94
 14184  002588                     __ptext94:
 14185                           	opt stack 0
 14186  002588                     ___ftge:
 14187                           	opt stack 26
 14188                           
 14189                           ; BSR set to: 0
 14190                           ;incstack = 0
 14191  002588  AE1A               	btfss	___ftge@ff1+2,7,c
 14192  00258A  D016               	goto	l1746
 14193  00258C  C018  F01E         	movff	___ftge@ff1,??___ftge
 14194  002590  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
 14195  002594  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
 14196  002598  1E1E               	comf	??___ftge,f,c
 14197  00259A  1E1F               	comf	??___ftge+1,f,c
 14198  00259C  1E20               	comf	??___ftge+2,f,c
 14199  00259E  2A1E               	incf	??___ftge,f,c
 14200  0025A0  0E00               	movlw	0
 14201  0025A2  221F               	addwfc	??___ftge+1,f,c
 14202  0025A4  2220               	addwfc	??___ftge+2,f,c
 14203  0025A6  0E00               	movlw	0
 14204  0025A8  241E               	addwf	??___ftge,w,c
 14205  0025AA  6E18               	movwf	___ftge@ff1,c
 14206  0025AC  0E00               	movlw	0
 14207  0025AE  201F               	addwfc	??___ftge+1,w,c
 14208  0025B0  6E19               	movwf	___ftge@ff1+1,c
 14209  0025B2  0E80               	movlw	128
 14210  0025B4  2020               	addwfc	??___ftge+2,w,c
 14211  0025B6  6E1A               	movwf	___ftge@ff1+2,c
 14212  0025B8                     l1746:
 14213  0025B8  AE1D               	btfss	___ftge@ff2+2,7,c
 14214  0025BA  D016               	goto	l1747
 14215  0025BC  C01B  F01E         	movff	___ftge@ff2,??___ftge
 14216  0025C0  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
 14217  0025C4  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
 14218  0025C8  1E1E               	comf	??___ftge,f,c
 14219  0025CA  1E1F               	comf	??___ftge+1,f,c
 14220  0025CC  1E20               	comf	??___ftge+2,f,c
 14221  0025CE  2A1E               	incf	??___ftge,f,c
 14222  0025D0  0E00               	movlw	0
 14223  0025D2  221F               	addwfc	??___ftge+1,f,c
 14224  0025D4  2220               	addwfc	??___ftge+2,f,c
 14225  0025D6  0E00               	movlw	0
 14226  0025D8  241E               	addwf	??___ftge,w,c
 14227  0025DA  6E1B               	movwf	___ftge@ff2,c
 14228  0025DC  0E00               	movlw	0
 14229  0025DE  201F               	addwfc	??___ftge+1,w,c
 14230  0025E0  6E1C               	movwf	___ftge@ff2+1,c
 14231  0025E2  0E80               	movlw	128
 14232  0025E4  2020               	addwfc	??___ftge+2,w,c
 14233  0025E6  6E1D               	movwf	___ftge@ff2+2,c
 14234  0025E8                     l1747:
 14235  0025E8  0E00               	movlw	0
 14236  0025EA  1A18               	xorwf	___ftge@ff1,f,c
 14237  0025EC  0E00               	movlw	0
 14238  0025EE  1A19               	xorwf	___ftge@ff1+1,f,c
 14239  0025F0  0E80               	movlw	128
 14240  0025F2  1A1A               	xorwf	___ftge@ff1+2,f,c
 14241  0025F4  0E00               	movlw	0
 14242  0025F6  1A1B               	xorwf	___ftge@ff2,f,c
 14243  0025F8  0E00               	movlw	0
 14244  0025FA  1A1C               	xorwf	___ftge@ff2+1,f,c
 14245  0025FC  0E80               	movlw	128
 14246  0025FE  1A1D               	xorwf	___ftge@ff2+2,f,c
 14247  002600  501B               	movf	___ftge@ff2,w,c
 14248  002602  5C18               	subwf	___ftge@ff1,w,c
 14249  002604  501C               	movf	___ftge@ff2+1,w,c
 14250  002606  5819               	subwfb	___ftge@ff1+1,w,c
 14251  002608  501D               	movf	___ftge@ff2+2,w,c
 14252  00260A  581A               	subwfb	___ftge@ff1+2,w,c
 14253  00260C  B0D8               	btfsc	status,0,c
 14254  00260E  D002               	goto	l4388
 14255  002610  90D8               	bcf	status,0,c
 14256  002612  0012               	return	
 14257  002614                     l4388:
 14258  002614  80D8               	bsf	status,0,c
 14259  002616  0012               	return	
 14260  002618                     __end_of___ftge:
 14261                           	opt stack 0
 14262                           tosu	equ	0xFFF
 14263                           tosh	equ	0xFFE
 14264                           tosl	equ	0xFFD
 14265                           pclath	equ	0xFFA
 14266                           tblptru	equ	0xFF8
 14267                           tblptrh	equ	0xFF7
 14268                           tblptrl	equ	0xFF6
 14269                           tablat	equ	0xFF5
 14270                           prodh	equ	0xFF4
 14271                           prodl	equ	0xFF3
 14272                           intcon	equ	0xFF2
 14273                           intcon2	equ	0xFF1
 14274                           postinc0	equ	0xFEE
 14275                           wreg	equ	0xFE8
 14276                           indf1	equ	0xFE7
 14277                           postdec1	equ	0xFE5
 14278                           fsr1h	equ	0xFE2
 14279                           fsr1l	equ	0xFE1
 14280                           indf2	equ	0xFDF
 14281                           postinc2	equ	0xFDE
 14282                           postdec2	equ	0xFDD
 14283                           fsr2h	equ	0xFDA
 14284                           fsr2l	equ	0xFD9
 14285                           status	equ	0xFD8
 14286                           
 14287 ;; *************** function ___altoft *****************
 14288 ;; Defined at:
 14289 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 14290 ;; Parameters:    Size  Location     Type
 14291 ;;  c               4   39[BANK0 ] long 
 14292 ;; Auto vars:     Size  Location     Type
 14293 ;;  sign            1   48[BANK0 ] unsigned char 
 14294 ;;  exp             1   47[BANK0 ] unsigned char 
 14295 ;; Return value:  Size  Location     Type
 14296 ;;                  3   39[BANK0 ] float 
 14297 ;; Registers used:
 14298 ;;		wreg, status,2, status,0, cstack
 14299 ;; Tracked objects:
 14300 ;;		On entry : 0/0
 14301 ;;		On exit  : 0/0
 14302 ;;		Unchanged: 0/0
 14303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14304 ;;      Params:         0       4       0       0       0       0       0
 14305 ;;      Locals:         0       2       0       0       0       0       0
 14306 ;;      Temps:          0       4       0       0       0       0       0
 14307 ;;      Totals:         0      10       0       0       0       0       0
 14308 ;;Total ram usage:       10 bytes
 14309 ;; Hardware stack levels used:    1
 14310 ;; Hardware stack levels required when called:    4
 14311 ;; This function calls:
 14312 ;;		___ftpack
 14313 ;; This function is called by:
 14314 ;;		_floor
 14315 ;; This function uses a non-reentrant model
 14316 ;;
 14317                           
 14318                           	psect	text95
 14319  00271E                     __ptext95:
 14320                           	opt stack 0
 14321  00271E                     ___altoft:
 14322                           	opt stack 22
 14323                           
 14324                           ;incstack = 0
 14325  00271E  0E00               	movlw	0
 14326  002720  0100               	movlb	0	; () banked
 14327  002722  6F90               	movwf	___altoft@sign& (0+255),b
 14328  002724  0E8E               	movlw	142
 14329  002726  6F8F               	movwf	___altoft@exp& (0+255),b
 14330                           
 14331                           ; BSR set to: 0
 14332  002728  AF8A               	btfss	(___altoft@c+3)& (0+255),7,b
 14333  00272A  D011               	goto	l1544
 14334                           
 14335                           ; BSR set to: 0
 14336  00272C  1F8A               	comf	(___altoft@c+3)& (0+255),f,b
 14337  00272E  1F89               	comf	(___altoft@c+2)& (0+255),f,b
 14338  002730  1F88               	comf	(___altoft@c+1)& (0+255),f,b
 14339  002732  6D87               	negf	___altoft@c& (0+255),b
 14340  002734  0E00               	movlw	0
 14341  002736  2388               	addwfc	(___altoft@c+1)& (0+255),f,b
 14342  002738  2389               	addwfc	(___altoft@c+2)& (0+255),f,b
 14343  00273A  238A               	addwfc	(___altoft@c+3)& (0+255),f,b
 14344                           
 14345                           ; BSR set to: 0
 14346  00273C  0E01               	movlw	1
 14347  00273E  6F90               	movwf	___altoft@sign& (0+255),b
 14348                           
 14349                           ; BSR set to: 0
 14350  002740  D006               	goto	l1544
 14351  002742                     
 14352                           ; BSR set to: 0
 14353                           
 14354                           ; BSR set to: 0
 14355  002742  90D8               	bcf	status,0,c
 14356  002744  338A               	rrcf	(___altoft@c+3)& (0+255),f,b
 14357  002746  3389               	rrcf	(___altoft@c+2)& (0+255),f,b
 14358  002748  3388               	rrcf	(___altoft@c+1)& (0+255),f,b
 14359  00274A  3387               	rrcf	___altoft@c& (0+255),f,b
 14360  00274C  2B8F               	incf	___altoft@exp& (0+255),f,b
 14361  00274E                     l1544:
 14362                           
 14363                           ; BSR set to: 0
 14364                           
 14365                           ; BSR set to: 0
 14366  00274E  0E00               	movlw	0
 14367  002750  1587               	andwf	___altoft@c& (0+255),w,b
 14368  002752  6F8B               	movwf	??___altoft& (0+255),b
 14369  002754  0E00               	movlw	0
 14370  002756  1588               	andwf	(___altoft@c+1)& (0+255),w,b
 14371  002758  6F8C               	movwf	(??___altoft+1)& (0+255),b
 14372  00275A  0E00               	movlw	0
 14373  00275C  1589               	andwf	(___altoft@c+2)& (0+255),w,b
 14374  00275E  6F8D               	movwf	(??___altoft+2)& (0+255),b
 14375  002760  0EFF               	movlw	255
 14376  002762  158A               	andwf	(___altoft@c+3)& (0+255),w,b
 14377  002764  6F8E               	movwf	(??___altoft+3)& (0+255),b
 14378  002766  518B               	movf	??___altoft& (0+255),w,b
 14379  002768  118C               	iorwf	(??___altoft+1)& (0+255),w,b
 14380  00276A  118D               	iorwf	(??___altoft+2)& (0+255),w,b
 14381  00276C  118E               	iorwf	(??___altoft+3)& (0+255),w,b
 14382  00276E  A4D8               	btfss	status,2,c
 14383  002770  D7E8               	goto	l1545
 14384                           
 14385                           ; BSR set to: 0
 14386                           
 14387                           ; BSR set to: 0
 14388  002772  C087  F018         	movff	___altoft@c,___ftpack@arg
 14389  002776  C088  F019         	movff	___altoft@c+1,___ftpack@arg+1
 14390  00277A  C089  F01A         	movff	___altoft@c+2,___ftpack@arg+2
 14391  00277E  C08F  F01B         	movff	___altoft@exp,___ftpack@exp
 14392  002782  C090  F01C         	movff	___altoft@sign,___ftpack@sign
 14393  002786  ECAB  F010         	call	___ftpack	;wreg free
 14394  00278A  C018  F087         	movff	?___ftpack,?___altoft
 14395  00278E  C019  F088         	movff	?___ftpack+1,?___altoft+1
 14396  002792  C01A  F089         	movff	?___ftpack+2,?___altoft+2
 14397  002796  0012               	return	
 14398  002798                     __end_of___altoft:
 14399                           	opt stack 0
 14400                           tosu	equ	0xFFF
 14401                           tosh	equ	0xFFE
 14402                           tosl	equ	0xFFD
 14403                           pclath	equ	0xFFA
 14404                           tblptru	equ	0xFF8
 14405                           tblptrh	equ	0xFF7
 14406                           tblptrl	equ	0xFF6
 14407                           tablat	equ	0xFF5
 14408                           prodh	equ	0xFF4
 14409                           prodl	equ	0xFF3
 14410                           intcon	equ	0xFF2
 14411                           intcon2	equ	0xFF1
 14412                           postinc0	equ	0xFEE
 14413                           wreg	equ	0xFE8
 14414                           indf1	equ	0xFE7
 14415                           postdec1	equ	0xFE5
 14416                           fsr1h	equ	0xFE2
 14417                           fsr1l	equ	0xFE1
 14418                           indf2	equ	0xFDF
 14419                           postinc2	equ	0xFDE
 14420                           postdec2	equ	0xFDD
 14421                           fsr2h	equ	0xFDA
 14422                           fsr2l	equ	0xFD9
 14423                           status	equ	0xFD8
 14424                           
 14425 ;; *************** function _eval_poly *****************
 14426 ;; Defined at:
 14427 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
 14428 ;; Parameters:    Size  Location     Type
 14429 ;;  x               3   36[BANK0 ] float 
 14430 ;;  d               2   39[BANK0 ] PTR const 
 14431 ;;		 -> log@coeff(27), exp@coeff(30), 
 14432 ;;  n               2   41[BANK0 ] int 
 14433 ;; Auto vars:     Size  Location     Type
 14434 ;;  res             3   45[BANK0 ] int 
 14435 ;; Return value:  Size  Location     Type
 14436 ;;                  3   36[BANK0 ] int 
 14437 ;; Registers used:
 14438 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14439 ;; Tracked objects:
 14440 ;;		On entry : 0/0
 14441 ;;		On exit  : 0/0
 14442 ;;		Unchanged: 0/0
 14443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14444 ;;      Params:         0       7       0       0       0       0       0
 14445 ;;      Locals:         0       3       0       0       0       0       0
 14446 ;;      Temps:          0       2       0       0       0       0       0
 14447 ;;      Totals:         0      12       0       0       0       0       0
 14448 ;;Total ram usage:       12 bytes
 14449 ;; Hardware stack levels used:    1
 14450 ;; Hardware stack levels required when called:    5
 14451 ;; This function calls:
 14452 ;;		___ftadd
 14453 ;;		___ftmul
 14454 ;;		___wmul
 14455 ;; This function is called by:
 14456 ;;		_exp
 14457 ;;		_log
 14458 ;; This function uses a non-reentrant model
 14459 ;;
 14460                           
 14461                           	psect	text96
 14462  001CD2                     __ptext96:
 14463                           	opt stack 0
 14464  001CD2                     _eval_poly:
 14465                           	opt stack 22
 14466                           
 14467                           ;incstack = 0
 14468  001CD2  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 14469  001CD6  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 14470  001CDA  0E00               	movlw	0
 14471  001CDC  6E1B               	movwf	___wmul@multiplicand+1,c
 14472  001CDE  0E03               	movlw	3
 14473  001CE0  6E1A               	movwf	___wmul@multiplicand,c
 14474  001CE2  ECB8  F01A         	call	___wmul	;wreg free
 14475  001CE6  C087  F08B         	movff	eval_poly@d,??_eval_poly
 14476  001CEA  C088  F08C         	movff	eval_poly@d+1,??_eval_poly+1
 14477  001CEE  5018               	movf	?___wmul,w,c
 14478  001CF0  0100               	movlb	0	; () banked
 14479  001CF2  278B               	addwf	??_eval_poly& (0+255),f,b
 14480  001CF4  5019               	movf	?___wmul+1,w,c
 14481  001CF6  238C               	addwfc	(??_eval_poly+1)& (0+255),f,b
 14482  001CF8  C08B  FFF6         	movff	??_eval_poly,tblptrl
 14483  001CFC  C08C  FFF7         	movff	??_eval_poly+1,tblptrh
 14484  001D00                     	if	0	;tblptru may be non-zero
 14485  001D00                     	endif
 14486  001D00                     	if	0	;tblptru may be non-zero
 14487  001D00                     	endif
 14488  001D00  0009               	tblrd		*+
 14489  001D02  CFF5 F08D          	movff	tablat,eval_poly@res
 14490  001D06  0009               	tblrd		*+
 14491  001D08  CFF5 F08E          	movff	tablat,eval_poly@res+1
 14492  001D0C  000A               	tblrd		*-
 14493  001D0E  CFF5 F08F          	movff	tablat,eval_poly@res+2
 14494  001D12  D040               	goto	l2169
 14495  001D14                     
 14496                           ; BSR set to: 0
 14497                           
 14498                           ; BSR set to: 0
 14499  001D14  C08D  F06C         	movff	eval_poly@res,___ftmul@f2
 14500  001D18  C08E  F06D         	movff	eval_poly@res+1,___ftmul@f2+1
 14501  001D1C  C08F  F06E         	movff	eval_poly@res+2,___ftmul@f2+2
 14502  001D20  C084  F069         	movff	eval_poly@x,___ftmul@f1
 14503  001D24  C085  F06A         	movff	eval_poly@x+1,___ftmul@f1+1
 14504  001D28  C086  F06B         	movff	eval_poly@x+2,___ftmul@f1+2
 14505  001D2C  EC97  F00C         	call	___ftmul	;wreg free
 14506  001D30  C069  F078         	movff	?___ftmul,___ftadd@f1
 14507  001D34  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 14508  001D38  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 14509  001D3C  0E00               	movlw	0
 14510  001D3E  6E1B               	movwf	___wmul@multiplicand+1,c
 14511  001D40  0E03               	movlw	3
 14512  001D42  6E1A               	movwf	___wmul@multiplicand,c
 14513  001D44  0100               	movlb	0	; () banked
 14514  001D46  0789               	decf	eval_poly@n& (0+255),f,b
 14515  001D48  A0D8               	btfss	status,0,c
 14516  001D4A  078A               	decf	(eval_poly@n+1)& (0+255),f,b
 14517  001D4C  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 14518  001D50  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 14519  001D54  ECB8  F01A         	call	___wmul	;wreg free
 14520  001D58  C087  F08B         	movff	eval_poly@d,??_eval_poly
 14521  001D5C  C088  F08C         	movff	eval_poly@d+1,??_eval_poly+1
 14522  001D60  5018               	movf	?___wmul,w,c
 14523  001D62  0100               	movlb	0	; () banked
 14524  001D64  278B               	addwf	??_eval_poly& (0+255),f,b
 14525  001D66  5019               	movf	?___wmul+1,w,c
 14526  001D68  238C               	addwfc	(??_eval_poly+1)& (0+255),f,b
 14527  001D6A  C08B  FFF6         	movff	??_eval_poly,tblptrl
 14528  001D6E  C08C  FFF7         	movff	??_eval_poly+1,tblptrh
 14529  001D72                     	if	0	;tblptru may be non-zero
 14530  001D72                     	endif
 14531  001D72                     	if	0	;tblptru may be non-zero
 14532  001D72                     	endif
 14533  001D72  0009               	tblrd		*+
 14534  001D74  CFF5 F07B          	movff	tablat,___ftadd@f2
 14535  001D78  0009               	tblrd		*+
 14536  001D7A  CFF5 F07C          	movff	tablat,___ftadd@f2+1
 14537  001D7E  000A               	tblrd		*-
 14538  001D80  CFF5 F07D          	movff	tablat,___ftadd@f2+2
 14539  001D84  ECEC  F008         	call	___ftadd	;wreg free
 14540  001D88  C078  F08D         	movff	?___ftadd,eval_poly@res
 14541  001D8C  C079  F08E         	movff	?___ftadd+1,eval_poly@res+1
 14542  001D90  C07A  F08F         	movff	?___ftadd+2,eval_poly@res+2
 14543  001D94                     l2169:
 14544  001D94  0100               	movlb	0	; () banked
 14545  001D96  5189               	movf	eval_poly@n& (0+255),w,b
 14546  001D98  118A               	iorwf	(eval_poly@n+1)& (0+255),w,b
 14547  001D9A  A4D8               	btfss	status,2,c
 14548  001D9C  D7BB               	goto	l2170
 14549                           
 14550                           ; BSR set to: 0
 14551  001D9E  C08D  F084         	movff	eval_poly@res,?_eval_poly
 14552  001DA2  C08E  F085         	movff	eval_poly@res+1,?_eval_poly+1
 14553  001DA6  C08F  F086         	movff	eval_poly@res+2,?_eval_poly+2
 14554                           
 14555                           ; BSR set to: 0
 14556  001DAA  0012               	return		;funcret
 14557  001DAC                     __end_of_eval_poly:
 14558                           	opt stack 0
 14559                           tosu	equ	0xFFF
 14560                           tosh	equ	0xFFE
 14561                           tosl	equ	0xFFD
 14562                           pclath	equ	0xFFA
 14563                           tblptru	equ	0xFF8
 14564                           tblptrh	equ	0xFF7
 14565                           tblptrl	equ	0xFF6
 14566                           tablat	equ	0xFF5
 14567                           prodh	equ	0xFF4
 14568                           prodl	equ	0xFF3
 14569                           intcon	equ	0xFF2
 14570                           intcon2	equ	0xFF1
 14571                           postinc0	equ	0xFEE
 14572                           wreg	equ	0xFE8
 14573                           indf1	equ	0xFE7
 14574                           postdec1	equ	0xFE5
 14575                           fsr1h	equ	0xFE2
 14576                           fsr1l	equ	0xFE1
 14577                           indf2	equ	0xFDF
 14578                           postinc2	equ	0xFDE
 14579                           postdec2	equ	0xFDD
 14580                           fsr2h	equ	0xFDA
 14581                           fsr2l	equ	0xFD9
 14582                           status	equ	0xFD8
 14583                           
 14584 ;; *************** function ___wmul *****************
 14585 ;; Defined at:
 14586 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 14587 ;; Parameters:    Size  Location     Type
 14588 ;;  multiplier      2   23[COMRAM] unsigned int 
 14589 ;;  multiplicand    2   25[COMRAM] unsigned int 
 14590 ;; Auto vars:     Size  Location     Type
 14591 ;;  product         2   27[COMRAM] unsigned int 
 14592 ;; Return value:  Size  Location     Type
 14593 ;;                  2   23[COMRAM] unsigned int 
 14594 ;; Registers used:
 14595 ;;		wreg, status,2, status,0, prodl, prodh
 14596 ;; Tracked objects:
 14597 ;;		On entry : 0/0
 14598 ;;		On exit  : 0/0
 14599 ;;		Unchanged: 0/0
 14600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14601 ;;      Params:         4       0       0       0       0       0       0
 14602 ;;      Locals:         2       0       0       0       0       0       0
 14603 ;;      Temps:          0       0       0       0       0       0       0
 14604 ;;      Totals:         6       0       0       0       0       0       0
 14605 ;;Total ram usage:        6 bytes
 14606 ;; Hardware stack levels used:    1
 14607 ;; Hardware stack levels required when called:    3
 14608 ;; This function calls:
 14609 ;;		Nothing
 14610 ;; This function is called by:
 14611 ;;		_eval_poly
 14612 ;; This function uses a non-reentrant model
 14613 ;;
 14614                           
 14615                           	psect	text97
 14616  003570                     __ptext97:
 14617                           	opt stack 0
 14618  003570                     ___wmul:
 14619                           	opt stack 23
 14620                           
 14621                           ; BSR set to: 0
 14622                           ;incstack = 0
 14623  003570  5018               	movf	___wmul@multiplier,w,c
 14624  003572  021A               	mulwf	___wmul@multiplicand,c
 14625  003574  CFF3 F01C          	movff	prodl,___wmul@product
 14626  003578  CFF4 F01D          	movff	prodh,___wmul@product+1
 14627  00357C  5018               	movf	___wmul@multiplier,w,c
 14628  00357E  021B               	mulwf	___wmul@multiplicand+1,c
 14629  003580  50F3               	movf	prodl,w,c
 14630  003582  261D               	addwf	___wmul@product+1,f,c
 14631  003584  5019               	movf	___wmul@multiplier+1,w,c
 14632  003586  021A               	mulwf	___wmul@multiplicand,c
 14633  003588  50F3               	movf	prodl,w,c
 14634  00358A  261D               	addwf	___wmul@product+1,f,c
 14635  00358C  C01C  F018         	movff	___wmul@product,?___wmul
 14636  003590  C01D  F019         	movff	___wmul@product+1,?___wmul+1
 14637  003594  0012               	return	
 14638  003596                     __end_of___wmul:
 14639                           	opt stack 0
 14640                           tosu	equ	0xFFF
 14641                           tosh	equ	0xFFE
 14642                           tosl	equ	0xFFD
 14643                           pclath	equ	0xFFA
 14644                           tblptru	equ	0xFF8
 14645                           tblptrh	equ	0xFF7
 14646                           tblptrl	equ	0xFF6
 14647                           tablat	equ	0xFF5
 14648                           prodh	equ	0xFF4
 14649                           prodl	equ	0xFF3
 14650                           intcon	equ	0xFF2
 14651                           intcon2	equ	0xFF1
 14652                           postinc0	equ	0xFEE
 14653                           wreg	equ	0xFE8
 14654                           indf1	equ	0xFE7
 14655                           postdec1	equ	0xFE5
 14656                           fsr1h	equ	0xFE2
 14657                           fsr1l	equ	0xFE1
 14658                           indf2	equ	0xFDF
 14659                           postinc2	equ	0xFDE
 14660                           postdec2	equ	0xFDD
 14661                           fsr2h	equ	0xFDA
 14662                           fsr2l	equ	0xFD9
 14663                           status	equ	0xFD8
 14664                           
 14665 ;; *************** function ___ftmul *****************
 14666 ;; Defined at:
 14667 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 14668 ;; Parameters:    Size  Location     Type
 14669 ;;  f1              3    9[BANK0 ] float 
 14670 ;;  f2              3   12[BANK0 ] float 
 14671 ;; Auto vars:     Size  Location     Type
 14672 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
 14673 ;;  sign            1   23[BANK0 ] unsigned char 
 14674 ;;  cntr            1   22[BANK0 ] unsigned char 
 14675 ;;  exp             1   18[BANK0 ] unsigned char 
 14676 ;; Return value:  Size  Location     Type
 14677 ;;                  3    9[BANK0 ] float 
 14678 ;; Registers used:
 14679 ;;		wreg, status,2, status,0, cstack
 14680 ;; Tracked objects:
 14681 ;;		On entry : 0/0
 14682 ;;		On exit  : 0/0
 14683 ;;		Unchanged: 0/0
 14684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14685 ;;      Params:         0       6       0       0       0       0       0
 14686 ;;      Locals:         0       6       0       0       0       0       0
 14687 ;;      Temps:          0       3       0       0       0       0       0
 14688 ;;      Totals:         0      15       0       0       0       0       0
 14689 ;;Total ram usage:       15 bytes
 14690 ;; Hardware stack levels used:    1
 14691 ;; Hardware stack levels required when called:    4
 14692 ;; This function calls:
 14693 ;;		___ftpack
 14694 ;; This function is called by:
 14695 ;;		_AdcConvert
 14696 ;;		_CheckFlashPrecentage
 14697 ;;		_pow
 14698 ;;		_exp
 14699 ;;		_log
 14700 ;;		_eval_poly
 14701 ;; This function uses a non-reentrant model
 14702 ;;
 14703                           
 14704                           	psect	text98
 14705  00192E                     __ptext98:
 14706                           	opt stack 0
 14707  00192E                     ___ftmul:
 14708                           	opt stack 25
 14709                           
 14710                           ;incstack = 0
 14711  00192E  C06B  F06F         	movff	___ftmul@f1+2,??___ftmul
 14712  001932  0100               	movlb	0	; () banked
 14713  001934  6B70               	clrf	(??___ftmul+1)& (0+255),b
 14714  001936  6B71               	clrf	(??___ftmul+2)& (0+255),b
 14715  001938  356A               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 14716  00193A  376F               	rlcf	??___ftmul& (0+255),f,b
 14717  00193C  E301               	bnc	u6801
 14718  00193E  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 14719  001940                     u6801:
 14720  001940  516F               	movf	??___ftmul& (0+255),w,b
 14721  001942  6F72               	movwf	___ftmul@exp& (0+255),b
 14722  001944  5172               	movf	___ftmul@exp& (0+255),w,b
 14723  001946  A4D8               	btfss	status,2,c
 14724  001948  D007               	goto	l1753
 14725                           
 14726                           ; BSR set to: 0
 14727  00194A  0E00               	movlw	0
 14728  00194C  6F69               	movwf	?___ftmul& (0+255),b
 14729  00194E  0E00               	movlw	0
 14730  001950  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 14731  001952  0E00               	movlw	0
 14732  001954  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 14733                           
 14734                           ; BSR set to: 0
 14735  001956  0012               	return	
 14736  001958                     l1753:
 14737                           
 14738                           ; BSR set to: 0
 14739                           
 14740                           ; BSR set to: 0
 14741  001958  C06E  F06F         	movff	___ftmul@f2+2,??___ftmul
 14742  00195C  6B70               	clrf	(??___ftmul+1)& (0+255),b
 14743  00195E  6B71               	clrf	(??___ftmul+2)& (0+255),b
 14744  001960  356D               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 14745  001962  376F               	rlcf	??___ftmul& (0+255),f,b
 14746  001964  E301               	bnc	u6821
 14747  001966  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 14748  001968                     u6821:
 14749  001968  516F               	movf	??___ftmul& (0+255),w,b
 14750  00196A  6F77               	movwf	___ftmul@sign& (0+255),b
 14751  00196C  5177               	movf	___ftmul@sign& (0+255),w,b
 14752  00196E  A4D8               	btfss	status,2,c
 14753  001970  D007               	goto	l1755
 14754                           
 14755                           ; BSR set to: 0
 14756  001972  0E00               	movlw	0
 14757  001974  6F69               	movwf	?___ftmul& (0+255),b
 14758  001976  0E00               	movlw	0
 14759  001978  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 14760  00197A  0E00               	movlw	0
 14761  00197C  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 14762                           
 14763                           ; BSR set to: 0
 14764  00197E  0012               	return	
 14765  001980                     l1755:
 14766                           
 14767                           ; BSR set to: 0
 14768                           
 14769                           ; BSR set to: 0
 14770  001980  5177               	movf	___ftmul@sign& (0+255),w,b
 14771  001982  0F7B               	addlw	123
 14772  001984  2772               	addwf	___ftmul@exp& (0+255),f,b
 14773                           
 14774                           ; BSR set to: 0
 14775  001986  C06B  F077         	movff	___ftmul@f1+2,___ftmul@sign
 14776  00198A  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 14777  00198C  1B77               	xorwf	___ftmul@sign& (0+255),f,b
 14778  00198E  0E80               	movlw	128
 14779  001990  1777               	andwf	___ftmul@sign& (0+255),f,b
 14780                           
 14781                           ; BSR set to: 0
 14782  001992  8F6A               	bsf	(___ftmul@f1+1)& (0+255),7,b
 14783                           
 14784                           ; BSR set to: 0
 14785  001994  8F6D               	bsf	(___ftmul@f2+1)& (0+255),7,b
 14786                           
 14787                           ; BSR set to: 0
 14788  001996  0EFF               	movlw	255
 14789  001998  176C               	andwf	___ftmul@f2& (0+255),f,b
 14790  00199A  0EFF               	movlw	255
 14791  00199C  176D               	andwf	(___ftmul@f2+1)& (0+255),f,b
 14792  00199E  0E00               	movlw	0
 14793  0019A0  176E               	andwf	(___ftmul@f2+2)& (0+255),f,b
 14794                           
 14795                           ; BSR set to: 0
 14796  0019A2  0E00               	movlw	0
 14797  0019A4  6F73               	movwf	___ftmul@f3_as_product& (0+255),b
 14798  0019A6  0E00               	movlw	0
 14799  0019A8  6F74               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 14800  0019AA  0E00               	movlw	0
 14801  0019AC  6F75               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 14802                           
 14803                           ; BSR set to: 0
 14804  0019AE  0E07               	movlw	7
 14805  0019B0  6F76               	movwf	___ftmul@cntr& (0+255),b
 14806  0019B2                     
 14807                           ; BSR set to: 0
 14808                           
 14809                           ; BSR set to: 0
 14810  0019B2  A169               	btfss	___ftmul@f1& (0+255),0,b
 14811  0019B4  D006               	goto	l1757
 14812                           
 14813                           ; BSR set to: 0
 14814  0019B6  516C               	movf	___ftmul@f2& (0+255),w,b
 14815  0019B8  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 14816  0019BA  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 14817  0019BC  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 14818  0019BE  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 14819  0019C0  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 14820  0019C2                     l1757:
 14821                           
 14822                           ; BSR set to: 0
 14823                           
 14824                           ; BSR set to: 0
 14825  0019C2  90D8               	bcf	status,0,c
 14826  0019C4  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 14827  0019C6  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 14828  0019C8  3369               	rrcf	___ftmul@f1& (0+255),f,b
 14829  0019CA  90D8               	bcf	status,0,c
 14830  0019CC  376C               	rlcf	___ftmul@f2& (0+255),f,b
 14831  0019CE  376D               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 14832  0019D0  376E               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 14833                           
 14834                           ; BSR set to: 0
 14835  0019D2  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 14836  0019D4  D7EE               	goto	l1756
 14837                           
 14838                           ; BSR set to: 0
 14839                           
 14840                           ; BSR set to: 0
 14841  0019D6  0E09               	movlw	9
 14842  0019D8  6F76               	movwf	___ftmul@cntr& (0+255),b
 14843  0019DA                     
 14844                           ; BSR set to: 0
 14845                           
 14846                           ; BSR set to: 0
 14847  0019DA  A169               	btfss	___ftmul@f1& (0+255),0,b
 14848  0019DC  D006               	goto	l1760
 14849                           
 14850                           ; BSR set to: 0
 14851  0019DE  516C               	movf	___ftmul@f2& (0+255),w,b
 14852  0019E0  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 14853  0019E2  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 14854  0019E4  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 14855  0019E6  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 14856  0019E8  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 14857  0019EA                     l1760:
 14858                           
 14859                           ; BSR set to: 0
 14860                           
 14861                           ; BSR set to: 0
 14862  0019EA  90D8               	bcf	status,0,c
 14863  0019EC  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 14864  0019EE  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 14865  0019F0  3369               	rrcf	___ftmul@f1& (0+255),f,b
 14866  0019F2  90D8               	bcf	status,0,c
 14867  0019F4  3375               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 14868  0019F6  3374               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 14869  0019F8  3373               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 14870                           
 14871                           ; BSR set to: 0
 14872  0019FA  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 14873  0019FC  D7EE               	goto	l1759
 14874                           
 14875                           ; BSR set to: 0
 14876                           
 14877                           ; BSR set to: 0
 14878  0019FE  C073  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
 14879  001A02  C074  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 14880  001A06  C075  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 14881  001A0A  C072  F01B         	movff	___ftmul@exp,___ftpack@exp
 14882  001A0E  C077  F01C         	movff	___ftmul@sign,___ftpack@sign
 14883  001A12  ECAB  F010         	call	___ftpack	;wreg free
 14884  001A16  C018  F069         	movff	?___ftpack,?___ftmul
 14885  001A1A  C019  F06A         	movff	?___ftpack+1,?___ftmul+1
 14886  001A1E  C01A  F06B         	movff	?___ftpack+2,?___ftmul+2
 14887  001A22  0012               	return	
 14888  001A24                     __end_of___ftmul:
 14889                           	opt stack 0
 14890                           tosu	equ	0xFFF
 14891                           tosh	equ	0xFFE
 14892                           tosl	equ	0xFFD
 14893                           pclath	equ	0xFFA
 14894                           tblptru	equ	0xFF8
 14895                           tblptrh	equ	0xFF7
 14896                           tblptrl	equ	0xFF6
 14897                           tablat	equ	0xFF5
 14898                           prodh	equ	0xFF4
 14899                           prodl	equ	0xFF3
 14900                           intcon	equ	0xFF2
 14901                           intcon2	equ	0xFF1
 14902                           postinc0	equ	0xFEE
 14903                           wreg	equ	0xFE8
 14904                           indf1	equ	0xFE7
 14905                           postdec1	equ	0xFE5
 14906                           fsr1h	equ	0xFE2
 14907                           fsr1l	equ	0xFE1
 14908                           indf2	equ	0xFDF
 14909                           postinc2	equ	0xFDE
 14910                           postdec2	equ	0xFDD
 14911                           fsr2h	equ	0xFDA
 14912                           fsr2l	equ	0xFD9
 14913                           status	equ	0xFD8
 14914                           
 14915 ;; *************** function ___ftsub *****************
 14916 ;; Defined at:
 14917 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
 14918 ;; Parameters:    Size  Location     Type
 14919 ;;  f1              3   36[BANK0 ] float 
 14920 ;;  f2              3   39[BANK0 ] float 
 14921 ;; Auto vars:     Size  Location     Type
 14922 ;;		None
 14923 ;; Return value:  Size  Location     Type
 14924 ;;                  3   36[BANK0 ] float 
 14925 ;; Registers used:
 14926 ;;		wreg, status,2, status,0, cstack
 14927 ;; Tracked objects:
 14928 ;;		On entry : 0/0
 14929 ;;		On exit  : 0/0
 14930 ;;		Unchanged: 0/0
 14931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14932 ;;      Params:         0       6       0       0       0       0       0
 14933 ;;      Locals:         0       0       0       0       0       0       0
 14934 ;;      Temps:          0       0       0       0       0       0       0
 14935 ;;      Totals:         0       6       0       0       0       0       0
 14936 ;;Total ram usage:        6 bytes
 14937 ;; Hardware stack levels used:    1
 14938 ;; Hardware stack levels required when called:    5
 14939 ;; This function calls:
 14940 ;;		___ftadd
 14941 ;; This function is called by:
 14942 ;;		_exp
 14943 ;; This function uses a non-reentrant model
 14944 ;;
 14945                           
 14946                           	psect	text99
 14947  0030CE                     __ptext99:
 14948                           	opt stack 0
 14949  0030CE                     ___ftsub:
 14950                           	opt stack 22
 14951                           
 14952                           ;incstack = 0
 14953  0030CE  0100               	movlb	0	; () banked
 14954  0030D0  5187               	movf	___ftsub@f2& (0+255),w,b
 14955  0030D2  1188               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 14956  0030D4  1189               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 14957  0030D6  B4D8               	btfsc	status,2,c
 14958  0030D8  D006               	goto	l1770
 14959                           
 14960                           ; BSR set to: 0
 14961  0030DA  0E00               	movlw	0
 14962  0030DC  1B87               	xorwf	___ftsub@f2& (0+255),f,b
 14963  0030DE  0E00               	movlw	0
 14964  0030E0  1B88               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 14965  0030E2  0E80               	movlw	128
 14966  0030E4  1B89               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 14967  0030E6                     l1770:
 14968                           
 14969                           ; BSR set to: 0
 14970                           
 14971                           ; BSR set to: 0
 14972  0030E6  C084  F078         	movff	___ftsub@f1,___ftadd@f1
 14973  0030EA  C085  F079         	movff	___ftsub@f1+1,___ftadd@f1+1
 14974  0030EE  C086  F07A         	movff	___ftsub@f1+2,___ftadd@f1+2
 14975  0030F2  C087  F07B         	movff	___ftsub@f2,___ftadd@f2
 14976  0030F6  C088  F07C         	movff	___ftsub@f2+1,___ftadd@f2+1
 14977  0030FA  C089  F07D         	movff	___ftsub@f2+2,___ftadd@f2+2
 14978  0030FE  ECEC  F008         	call	___ftadd	;wreg free
 14979  003102  C078  F084         	movff	?___ftadd,?___ftsub
 14980  003106  C079  F085         	movff	?___ftadd+1,?___ftsub+1
 14981  00310A  C07A  F086         	movff	?___ftadd+2,?___ftsub+2
 14982  00310E  0012               	return	
 14983  003110                     __end_of___ftsub:
 14984                           	opt stack 0
 14985                           tosu	equ	0xFFF
 14986                           tosh	equ	0xFFE
 14987                           tosl	equ	0xFFD
 14988                           pclath	equ	0xFFA
 14989                           tblptru	equ	0xFF8
 14990                           tblptrh	equ	0xFF7
 14991                           tblptrl	equ	0xFF6
 14992                           tablat	equ	0xFF5
 14993                           prodh	equ	0xFF4
 14994                           prodl	equ	0xFF3
 14995                           intcon	equ	0xFF2
 14996                           intcon2	equ	0xFF1
 14997                           postinc0	equ	0xFEE
 14998                           wreg	equ	0xFE8
 14999                           indf1	equ	0xFE7
 15000                           postdec1	equ	0xFE5
 15001                           fsr1h	equ	0xFE2
 15002                           fsr1l	equ	0xFE1
 15003                           indf2	equ	0xFDF
 15004                           postinc2	equ	0xFDE
 15005                           postdec2	equ	0xFDD
 15006                           fsr2h	equ	0xFDA
 15007                           fsr2l	equ	0xFD9
 15008                           status	equ	0xFD8
 15009                           
 15010 ;; *************** function ___ftadd *****************
 15011 ;; Defined at:
 15012 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 15013 ;; Parameters:    Size  Location     Type
 15014 ;;  f1              3   24[BANK0 ] float 
 15015 ;;  f2              3   27[BANK0 ] float 
 15016 ;; Auto vars:     Size  Location     Type
 15017 ;;  exp1            1   35[BANK0 ] unsigned char 
 15018 ;;  exp2            1   34[BANK0 ] unsigned char 
 15019 ;;  sign            1   33[BANK0 ] unsigned char 
 15020 ;; Return value:  Size  Location     Type
 15021 ;;                  3   24[BANK0 ] float 
 15022 ;; Registers used:
 15023 ;;		wreg, status,2, status,0, cstack
 15024 ;; Tracked objects:
 15025 ;;		On entry : 0/0
 15026 ;;		On exit  : 0/0
 15027 ;;		Unchanged: 0/0
 15028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15029 ;;      Params:         0       6       0       0       0       0       0
 15030 ;;      Locals:         0       3       0       0       0       0       0
 15031 ;;      Temps:          0       3       0       0       0       0       0
 15032 ;;      Totals:         0      12       0       0       0       0       0
 15033 ;;Total ram usage:       12 bytes
 15034 ;; Hardware stack levels used:    1
 15035 ;; Hardware stack levels required when called:    4
 15036 ;; This function calls:
 15037 ;;		___ftpack
 15038 ;; This function is called by:
 15039 ;;		___ftsub
 15040 ;;		_floor
 15041 ;;		_log
 15042 ;;		_eval_poly
 15043 ;; This function uses a non-reentrant model
 15044 ;;
 15045                           
 15046                           	psect	text100
 15047  0011D8                     __ptext100:
 15048                           	opt stack 0
 15049  0011D8                     ___ftadd:
 15050                           	opt stack 22
 15051                           
 15052                           ;incstack = 0
 15053  0011D8  C07A  F07E         	movff	___ftadd@f1+2,??___ftadd
 15054  0011DC  0100               	movlb	0	; () banked
 15055  0011DE  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 15056  0011E0  6B80               	clrf	(??___ftadd+2)& (0+255),b
 15057  0011E2  3579               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 15058  0011E4  377E               	rlcf	??___ftadd& (0+255),f,b
 15059  0011E6  E301               	bnc	u6591
 15060  0011E8  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 15061  0011EA                     u6591:
 15062  0011EA  517E               	movf	??___ftadd& (0+255),w,b
 15063  0011EC  6F83               	movwf	___ftadd@exp1& (0+255),b
 15064  0011EE  C07D  F07E         	movff	___ftadd@f2+2,??___ftadd
 15065  0011F2  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 15066  0011F4  6B80               	clrf	(??___ftadd+2)& (0+255),b
 15067  0011F6  357C               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 15068  0011F8  377E               	rlcf	??___ftadd& (0+255),f,b
 15069  0011FA  E301               	bnc	u6601
 15070  0011FC  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 15071  0011FE                     u6601:
 15072  0011FE  517E               	movf	??___ftadd& (0+255),w,b
 15073  001200  6F82               	movwf	___ftadd@exp2& (0+255),b
 15074                           
 15075                           ; BSR set to: 0
 15076  001202  5183               	movf	___ftadd@exp1& (0+255),w,b
 15077  001204  B4D8               	btfsc	status,2,c
 15078  001206  D00B               	goto	u6630
 15079                           
 15080                           ; BSR set to: 0
 15081  001208  5182               	movf	___ftadd@exp2& (0+255),w,b
 15082  00120A  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 15083  00120C  B0D8               	btfsc	status,0,c
 15084  00120E  D00E               	goto	l1705
 15085                           
 15086                           ; BSR set to: 0
 15087  001210  5183               	movf	___ftadd@exp1& (0+255),w,b
 15088  001212  0800               	sublw	0
 15089  001214  2582               	addwf	___ftadd@exp2& (0+255),w,b
 15090  001216  6F7E               	movwf	??___ftadd& (0+255),b
 15091  001218  0E18               	movlw	24
 15092  00121A  657E               	cpfsgt	??___ftadd& (0+255),b
 15093  00121C  D007               	goto	l1705
 15094  00121E                     u6630:
 15095                           
 15096                           ; BSR set to: 0
 15097  00121E  C07B  F078         	movff	___ftadd@f2,?___ftadd
 15098  001222  C07C  F079         	movff	___ftadd@f2+1,?___ftadd+1
 15099  001226  C07D  F07A         	movff	___ftadd@f2+2,?___ftadd+2
 15100  00122A  0012               	return	
 15101  00122C                     l1705:
 15102                           
 15103                           ; BSR set to: 0
 15104                           
 15105                           ; BSR set to: 0
 15106  00122C  5182               	movf	___ftadd@exp2& (0+255),w,b
 15107  00122E  B4D8               	btfsc	status,2,c
 15108  001230  D00B               	goto	u6660
 15109                           
 15110                           ; BSR set to: 0
 15111  001232  5183               	movf	___ftadd@exp1& (0+255),w,b
 15112  001234  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 15113  001236  B0D8               	btfsc	status,0,c
 15114  001238  D00E               	goto	l1709
 15115                           
 15116                           ; BSR set to: 0
 15117  00123A  5182               	movf	___ftadd@exp2& (0+255),w,b
 15118  00123C  0800               	sublw	0
 15119  00123E  2583               	addwf	___ftadd@exp1& (0+255),w,b
 15120  001240  6F7E               	movwf	??___ftadd& (0+255),b
 15121  001242  0E18               	movlw	24
 15122  001244  657E               	cpfsgt	??___ftadd& (0+255),b
 15123  001246  D007               	goto	l1709
 15124  001248                     u6660:
 15125                           
 15126                           ; BSR set to: 0
 15127  001248  C078  F078         	movff	___ftadd@f1,?___ftadd
 15128  00124C  C079  F079         	movff	___ftadd@f1+1,?___ftadd+1
 15129  001250  C07A  F07A         	movff	___ftadd@f1+2,?___ftadd+2
 15130  001254  0012               	return	
 15131  001256                     l1709:
 15132                           
 15133                           ; BSR set to: 0
 15134                           
 15135                           ; BSR set to: 0
 15136  001256  0E06               	movlw	6
 15137  001258  6F81               	movwf	___ftadd@sign& (0+255),b
 15138                           
 15139                           ; BSR set to: 0
 15140  00125A  BF7A               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 15141                           
 15142                           ; BSR set to: 0
 15143  00125C  8F81               	bsf	___ftadd@sign& (0+255),7,b
 15144                           
 15145                           ; BSR set to: 0
 15146                           
 15147                           ; BSR set to: 0
 15148  00125E  BF7D               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 15149                           
 15150                           ; BSR set to: 0
 15151  001260  8D81               	bsf	___ftadd@sign& (0+255),6,b
 15152                           
 15153                           ; BSR set to: 0
 15154  001262  8F79               	bsf	(___ftadd@f1+1)& (0+255),7,b
 15155                           
 15156                           ; BSR set to: 0
 15157  001264  0EFF               	movlw	255
 15158  001266  1778               	andwf	___ftadd@f1& (0+255),f,b
 15159  001268  0EFF               	movlw	255
 15160  00126A  1779               	andwf	(___ftadd@f1+1)& (0+255),f,b
 15161  00126C  0E00               	movlw	0
 15162  00126E  177A               	andwf	(___ftadd@f1+2)& (0+255),f,b
 15163  001270  8F7C               	bsf	(___ftadd@f2+1)& (0+255),7,b
 15164                           
 15165                           ; BSR set to: 0
 15166  001272  0EFF               	movlw	255
 15167  001274  177B               	andwf	___ftadd@f2& (0+255),f,b
 15168  001276  0EFF               	movlw	255
 15169  001278  177C               	andwf	(___ftadd@f2+1)& (0+255),f,b
 15170  00127A  0E00               	movlw	0
 15171  00127C  177D               	andwf	(___ftadd@f2+2)& (0+255),f,b
 15172                           
 15173                           ; BSR set to: 0
 15174  00127E  5182               	movf	___ftadd@exp2& (0+255),w,b
 15175  001280  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 15176  001282  B0D8               	btfsc	status,0,c
 15177  001284  D01B               	goto	l1714
 15178  001286                     u6690:
 15179                           
 15180                           ; BSR set to: 0
 15181                           
 15182                           ; BSR set to: 0
 15183  001286  90D8               	bcf	status,0,c
 15184  001288  377B               	rlcf	___ftadd@f2& (0+255),f,b
 15185  00128A  377C               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 15186  00128C  377D               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 15187  00128E  0782               	decf	___ftadd@exp2& (0+255),f,b
 15188                           
 15189                           ; BSR set to: 0
 15190  001290  5183               	movf	___ftadd@exp1& (0+255),w,b
 15191  001292  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 15192  001294  B4D8               	btfsc	status,2,c
 15193  001296  D00D               	goto	l1719
 15194                           
 15195                           ; BSR set to: 0
 15196  001298  0781               	decf	___ftadd@sign& (0+255),f,b
 15197  00129A  C081  F07E         	movff	___ftadd@sign,??___ftadd
 15198  00129E  0E07               	movlw	7
 15199  0012A0  177E               	andwf	??___ftadd& (0+255),f,b
 15200  0012A2  B4D8               	btfsc	status,2,c
 15201  0012A4  D006               	goto	l1719
 15202  0012A6  D7EF               	goto	u6690
 15203  0012A8                     
 15204                           ; BSR set to: 0
 15205                           
 15206                           ; BSR set to: 0
 15207  0012A8  90D8               	bcf	status,0,c
 15208  0012AA  337A               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 15209  0012AC  3379               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 15210  0012AE  3378               	rrcf	___ftadd@f1& (0+255),f,b
 15211  0012B0  2B83               	incf	___ftadd@exp1& (0+255),f,b
 15212  0012B2                     l1719:
 15213                           
 15214                           ; BSR set to: 0
 15215                           
 15216                           ; BSR set to: 0
 15217  0012B2  5182               	movf	___ftadd@exp2& (0+255),w,b
 15218  0012B4  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 15219  0012B6  B4D8               	btfsc	status,2,c
 15220  0012B8  D01F               	goto	u6760
 15221  0012BA  D7F6               	goto	l1720
 15222  0012BC                     l1714:
 15223                           
 15224                           ; BSR set to: 0
 15225                           
 15226                           ; BSR set to: 0
 15227  0012BC  5183               	movf	___ftadd@exp1& (0+255),w,b
 15228  0012BE  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 15229  0012C0  B0D8               	btfsc	status,0,c
 15230  0012C2  D01A               	goto	u6760
 15231  0012C4                     u6730:
 15232                           
 15233                           ; BSR set to: 0
 15234                           
 15235                           ; BSR set to: 0
 15236  0012C4  90D8               	bcf	status,0,c
 15237  0012C6  3778               	rlcf	___ftadd@f1& (0+255),f,b
 15238  0012C8  3779               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 15239  0012CA  377A               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 15240  0012CC  0783               	decf	___ftadd@exp1& (0+255),f,b
 15241                           
 15242                           ; BSR set to: 0
 15243  0012CE  5183               	movf	___ftadd@exp1& (0+255),w,b
 15244  0012D0  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 15245  0012D2  B4D8               	btfsc	status,2,c
 15246  0012D4  D00D               	goto	l1728
 15247                           
 15248                           ; BSR set to: 0
 15249  0012D6  0781               	decf	___ftadd@sign& (0+255),f,b
 15250  0012D8  C081  F07E         	movff	___ftadd@sign,??___ftadd
 15251  0012DC  0E07               	movlw	7
 15252  0012DE  177E               	andwf	??___ftadd& (0+255),f,b
 15253  0012E0  B4D8               	btfsc	status,2,c
 15254  0012E2  D006               	goto	l1728
 15255  0012E4  D7EF               	goto	u6730
 15256  0012E6                     
 15257                           ; BSR set to: 0
 15258                           
 15259                           ; BSR set to: 0
 15260  0012E6  90D8               	bcf	status,0,c
 15261  0012E8  337D               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 15262  0012EA  337C               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 15263  0012EC  337B               	rrcf	___ftadd@f2& (0+255),f,b
 15264  0012EE  2B82               	incf	___ftadd@exp2& (0+255),f,b
 15265  0012F0                     l1728:
 15266                           
 15267                           ; BSR set to: 0
 15268                           
 15269                           ; BSR set to: 0
 15270  0012F0  5182               	movf	___ftadd@exp2& (0+255),w,b
 15271  0012F2  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 15272  0012F4  A4D8               	btfss	status,2,c
 15273  0012F6  D7F7               	goto	l1729
 15274  0012F8                     u6760:
 15275                           
 15276                           ; BSR set to: 0
 15277                           
 15278                           ; BSR set to: 0
 15279                           
 15280                           ; BSR set to: 0
 15281  0012F8  AF81               	btfss	___ftadd@sign& (0+255),7,b
 15282  0012FA  D00C               	goto	l1731
 15283                           
 15284                           ; BSR set to: 0
 15285  0012FC  0EFF               	movlw	255
 15286  0012FE  1B78               	xorwf	___ftadd@f1& (0+255),f,b
 15287  001300  0EFF               	movlw	255
 15288  001302  1B79               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 15289  001304  0EFF               	movlw	255
 15290  001306  1B7A               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 15291  001308  0E01               	movlw	1
 15292  00130A  2778               	addwf	___ftadd@f1& (0+255),f,b
 15293  00130C  0E00               	movlw	0
 15294  00130E  2379               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 15295  001310  0E00               	movlw	0
 15296  001312  237A               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 15297  001314                     l1731:
 15298                           
 15299                           ; BSR set to: 0
 15300  001314  AD81               	btfss	___ftadd@sign& (0+255),6,b
 15301  001316  D00C               	goto	l1732
 15302                           
 15303                           ; BSR set to: 0
 15304  001318  0EFF               	movlw	255
 15305  00131A  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 15306  00131C  0EFF               	movlw	255
 15307  00131E  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 15308  001320  0EFF               	movlw	255
 15309  001322  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 15310  001324  0E01               	movlw	1
 15311  001326  277B               	addwf	___ftadd@f2& (0+255),f,b
 15312  001328  0E00               	movlw	0
 15313  00132A  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 15314  00132C  0E00               	movlw	0
 15315  00132E  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 15316  001330                     l1732:
 15317                           
 15318                           ; BSR set to: 0
 15319                           
 15320                           ; BSR set to: 0
 15321  001330  0E00               	movlw	0
 15322  001332  6F81               	movwf	___ftadd@sign& (0+255),b
 15323                           
 15324                           ; BSR set to: 0
 15325  001334  5178               	movf	___ftadd@f1& (0+255),w,b
 15326  001336  277B               	addwf	___ftadd@f2& (0+255),f,b
 15327  001338  5179               	movf	(___ftadd@f1+1)& (0+255),w,b
 15328  00133A  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 15329  00133C  517A               	movf	(___ftadd@f1+2)& (0+255),w,b
 15330  00133E  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 15331                           
 15332                           ; BSR set to: 0
 15333  001340  AF7D               	btfss	(___ftadd@f2+2)& (0+255),7,b
 15334  001342  D00E               	goto	l1733
 15335                           
 15336                           ; BSR set to: 0
 15337  001344  0EFF               	movlw	255
 15338  001346  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 15339  001348  0EFF               	movlw	255
 15340  00134A  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 15341  00134C  0EFF               	movlw	255
 15342  00134E  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 15343  001350  0E01               	movlw	1
 15344  001352  277B               	addwf	___ftadd@f2& (0+255),f,b
 15345  001354  0E00               	movlw	0
 15346  001356  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 15347  001358  0E00               	movlw	0
 15348  00135A  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 15349                           
 15350                           ; BSR set to: 0
 15351  00135C  0E01               	movlw	1
 15352  00135E  6F81               	movwf	___ftadd@sign& (0+255),b
 15353  001360                     l1733:
 15354                           
 15355                           ; BSR set to: 0
 15356                           
 15357                           ; BSR set to: 0
 15358  001360  C07B  F018         	movff	___ftadd@f2,___ftpack@arg
 15359  001364  C07C  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
 15360  001368  C07D  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
 15361  00136C  C083  F01B         	movff	___ftadd@exp1,___ftpack@exp
 15362  001370  C081  F01C         	movff	___ftadd@sign,___ftpack@sign
 15363  001374  ECAB  F010         	call	___ftpack	;wreg free
 15364  001378  C018  F078         	movff	?___ftpack,?___ftadd
 15365  00137C  C019  F079         	movff	?___ftpack+1,?___ftadd+1
 15366  001380  C01A  F07A         	movff	?___ftpack+2,?___ftadd+2
 15367  001384  0012               	return	
 15368  001386                     __end_of___ftadd:
 15369                           	opt stack 0
 15370                           tosu	equ	0xFFF
 15371                           tosh	equ	0xFFE
 15372                           tosl	equ	0xFFD
 15373                           pclath	equ	0xFFA
 15374                           tblptru	equ	0xFF8
 15375                           tblptrh	equ	0xFF7
 15376                           tblptrl	equ	0xFF6
 15377                           tablat	equ	0xFF5
 15378                           prodh	equ	0xFF4
 15379                           prodl	equ	0xFF3
 15380                           intcon	equ	0xFF2
 15381                           intcon2	equ	0xFF1
 15382                           postinc0	equ	0xFEE
 15383                           wreg	equ	0xFE8
 15384                           indf1	equ	0xFE7
 15385                           postdec1	equ	0xFE5
 15386                           fsr1h	equ	0xFE2
 15387                           fsr1l	equ	0xFE1
 15388                           indf2	equ	0xFDF
 15389                           postinc2	equ	0xFDE
 15390                           postdec2	equ	0xFDD
 15391                           fsr2h	equ	0xFDA
 15392                           fsr2l	equ	0xFD9
 15393                           status	equ	0xFD8
 15394                           
 15395 ;; *************** function ___ftneg *****************
 15396 ;; Defined at:
 15397 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 15398 ;; Parameters:    Size  Location     Type
 15399 ;;  f1              3   23[COMRAM] float 
 15400 ;; Auto vars:     Size  Location     Type
 15401 ;;		None
 15402 ;; Return value:  Size  Location     Type
 15403 ;;                  3   23[COMRAM] float 
 15404 ;; Registers used:
 15405 ;;		wreg, status,2, status,0
 15406 ;; Tracked objects:
 15407 ;;		On entry : 0/0
 15408 ;;		On exit  : 0/0
 15409 ;;		Unchanged: 0/0
 15410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15411 ;;      Params:         3       0       0       0       0       0       0
 15412 ;;      Locals:         0       0       0       0       0       0       0
 15413 ;;      Temps:          0       0       0       0       0       0       0
 15414 ;;      Totals:         3       0       0       0       0       0       0
 15415 ;;Total ram usage:        3 bytes
 15416 ;; Hardware stack levels used:    1
 15417 ;; Hardware stack levels required when called:    3
 15418 ;; This function calls:
 15419 ;;		Nothing
 15420 ;; This function is called by:
 15421 ;;		_pow
 15422 ;;		_exp
 15423 ;; This function uses a non-reentrant model
 15424 ;;
 15425                           
 15426                           	psect	text101
 15427  0035BA                     __ptext101:
 15428                           	opt stack 0
 15429  0035BA                     ___ftneg:
 15430                           	opt stack 24
 15431                           
 15432                           ;incstack = 0
 15433  0035BA  5018               	movf	___ftneg@f1,w,c
 15434  0035BC  1019               	iorwf	___ftneg@f1+1,w,c
 15435  0035BE  101A               	iorwf	___ftneg@f1+2,w,c
 15436  0035C0  B4D8               	btfsc	status,2,c
 15437  0035C2  D006               	goto	l1764
 15438  0035C4  0E00               	movlw	0
 15439  0035C6  1A18               	xorwf	___ftneg@f1,f,c
 15440  0035C8  0E00               	movlw	0
 15441  0035CA  1A19               	xorwf	___ftneg@f1+1,f,c
 15442  0035CC  0E80               	movlw	128
 15443  0035CE  1A1A               	xorwf	___ftneg@f1+2,f,c
 15444  0035D0                     l1764:
 15445  0035D0  C018  F018         	movff	___ftneg@f1,?___ftneg
 15446  0035D4  C019  F019         	movff	___ftneg@f1+1,?___ftneg+1
 15447  0035D8  C01A  F01A         	movff	___ftneg@f1+2,?___ftneg+2
 15448  0035DC  0012               	return		;funcret
 15449  0035DE                     __end_of___ftneg:
 15450                           	opt stack 0
 15451                           tosu	equ	0xFFF
 15452                           tosh	equ	0xFFE
 15453                           tosl	equ	0xFFD
 15454                           pclath	equ	0xFFA
 15455                           tblptru	equ	0xFF8
 15456                           tblptrh	equ	0xFF7
 15457                           tblptrl	equ	0xFF6
 15458                           tablat	equ	0xFF5
 15459                           prodh	equ	0xFF4
 15460                           prodl	equ	0xFF3
 15461                           intcon	equ	0xFF2
 15462                           intcon2	equ	0xFF1
 15463                           postinc0	equ	0xFEE
 15464                           wreg	equ	0xFE8
 15465                           indf1	equ	0xFE7
 15466                           postdec1	equ	0xFE5
 15467                           fsr1h	equ	0xFE2
 15468                           fsr1l	equ	0xFE1
 15469                           indf2	equ	0xFDF
 15470                           postinc2	equ	0xFDE
 15471                           postdec2	equ	0xFDD
 15472                           fsr2h	equ	0xFDA
 15473                           fsr2l	equ	0xFD9
 15474                           status	equ	0xFD8
 15475                           
 15476 ;; *************** function ___ftdiv *****************
 15477 ;; Defined at:
 15478 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 15479 ;; Parameters:    Size  Location     Type
 15480 ;;  f1              3   40[COMRAM] float 
 15481 ;;  f2              3   43[COMRAM] float 
 15482 ;; Auto vars:     Size  Location     Type
 15483 ;;  f3              3    4[BANK0 ] float 
 15484 ;;  sign            1    8[BANK0 ] unsigned char 
 15485 ;;  exp             1    7[BANK0 ] unsigned char 
 15486 ;;  cntr            1    3[BANK0 ] unsigned char 
 15487 ;; Return value:  Size  Location     Type
 15488 ;;                  3   40[COMRAM] float 
 15489 ;; Registers used:
 15490 ;;		wreg, status,2, status,0, cstack
 15491 ;; Tracked objects:
 15492 ;;		On entry : 0/0
 15493 ;;		On exit  : 0/0
 15494 ;;		Unchanged: 0/0
 15495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15496 ;;      Params:         6       0       0       0       0       0       0
 15497 ;;      Locals:         0       6       0       0       0       0       0
 15498 ;;      Temps:          0       3       0       0       0       0       0
 15499 ;;      Totals:         6       9       0       0       0       0       0
 15500 ;;Total ram usage:       15 bytes
 15501 ;; Hardware stack levels used:    1
 15502 ;; Hardware stack levels required when called:    4
 15503 ;; This function calls:
 15504 ;;		___ftpack
 15505 ;; This function is called by:
 15506 ;;		_AdcConvert
 15507 ;;		_CheckFlashPrecentage
 15508 ;;		_exp
 15509 ;; This function uses a non-reentrant model
 15510 ;;
 15511                           
 15512                           	psect	text102
 15513  001A24                     __ptext102:
 15514                           	opt stack 0
 15515  001A24                     ___ftdiv:
 15516                           	opt stack 25
 15517                           
 15518                           ;incstack = 0
 15519  001A24  C02B  F060         	movff	___ftdiv@f1+2,??___ftdiv
 15520  001A28  0100               	movlb	0	; () banked
 15521  001A2A  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 15522  001A2C  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 15523  001A2E  342A               	rlcf	___ftdiv@f1+1,w,c
 15524  001A30  3760               	rlcf	??___ftdiv& (0+255),f,b
 15525  001A32  E301               	bnc	u6961
 15526  001A34  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 15527  001A36                     u6961:
 15528  001A36  5160               	movf	??___ftdiv& (0+255),w,b
 15529  001A38  6F67               	movwf	___ftdiv@exp& (0+255),b
 15530  001A3A  5167               	movf	___ftdiv@exp& (0+255),w,b
 15531  001A3C  A4D8               	btfss	status,2,c
 15532  001A3E  D007               	goto	l1738
 15533                           
 15534                           ; BSR set to: 0
 15535  001A40  0E00               	movlw	0
 15536  001A42  6E29               	movwf	?___ftdiv,c
 15537  001A44  0E00               	movlw	0
 15538  001A46  6E2A               	movwf	?___ftdiv+1,c
 15539  001A48  0E00               	movlw	0
 15540  001A4A  6E2B               	movwf	?___ftdiv+2,c
 15541                           
 15542                           ; BSR set to: 0
 15543  001A4C  0012               	return	
 15544  001A4E                     l1738:
 15545                           
 15546                           ; BSR set to: 0
 15547                           
 15548                           ; BSR set to: 0
 15549  001A4E  C02E  F060         	movff	___ftdiv@f2+2,??___ftdiv
 15550  001A52  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 15551  001A54  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 15552  001A56  342D               	rlcf	___ftdiv@f2+1,w,c
 15553  001A58  3760               	rlcf	??___ftdiv& (0+255),f,b
 15554  001A5A  E301               	bnc	u6981
 15555  001A5C  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 15556  001A5E                     u6981:
 15557  001A5E  5160               	movf	??___ftdiv& (0+255),w,b
 15558  001A60  6F68               	movwf	___ftdiv@sign& (0+255),b
 15559  001A62  5168               	movf	___ftdiv@sign& (0+255),w,b
 15560  001A64  A4D8               	btfss	status,2,c
 15561  001A66  D007               	goto	l1740
 15562                           
 15563                           ; BSR set to: 0
 15564  001A68  0E00               	movlw	0
 15565  001A6A  6E29               	movwf	?___ftdiv,c
 15566  001A6C  0E00               	movlw	0
 15567  001A6E  6E2A               	movwf	?___ftdiv+1,c
 15568  001A70  0E00               	movlw	0
 15569  001A72  6E2B               	movwf	?___ftdiv+2,c
 15570                           
 15571                           ; BSR set to: 0
 15572  001A74  0012               	return	
 15573  001A76                     l1740:
 15574                           
 15575                           ; BSR set to: 0
 15576                           
 15577                           ; BSR set to: 0
 15578  001A76  0E00               	movlw	0
 15579  001A78  6F64               	movwf	___ftdiv@f3& (0+255),b
 15580  001A7A  0E00               	movlw	0
 15581  001A7C  6F65               	movwf	(___ftdiv@f3+1)& (0+255),b
 15582  001A7E  0E00               	movlw	0
 15583  001A80  6F66               	movwf	(___ftdiv@f3+2)& (0+255),b
 15584                           
 15585                           ; BSR set to: 0
 15586  001A82  5168               	movf	___ftdiv@sign& (0+255),w,b
 15587  001A84  0F89               	addlw	137
 15588  001A86  5F67               	subwf	___ftdiv@exp& (0+255),f,b
 15589                           
 15590                           ; BSR set to: 0
 15591  001A88  C02B  F068         	movff	___ftdiv@f1+2,___ftdiv@sign
 15592                           
 15593                           ; BSR set to: 0
 15594  001A8C  502E               	movf	___ftdiv@f2+2,w,c
 15595  001A8E  1B68               	xorwf	___ftdiv@sign& (0+255),f,b
 15596                           
 15597                           ; BSR set to: 0
 15598  001A90  0E80               	movlw	128
 15599  001A92  1768               	andwf	___ftdiv@sign& (0+255),f,b
 15600                           
 15601                           ; BSR set to: 0
 15602  001A94  8E2A               	bsf	___ftdiv@f1+1,7,c
 15603                           
 15604                           ; BSR set to: 0
 15605  001A96  0EFF               	movlw	255
 15606  001A98  1629               	andwf	___ftdiv@f1,f,c
 15607  001A9A  0EFF               	movlw	255
 15608  001A9C  162A               	andwf	___ftdiv@f1+1,f,c
 15609  001A9E  0E00               	movlw	0
 15610  001AA0  162B               	andwf	___ftdiv@f1+2,f,c
 15611                           
 15612                           ; BSR set to: 0
 15613  001AA2  8E2D               	bsf	___ftdiv@f2+1,7,c
 15614                           
 15615                           ; BSR set to: 0
 15616  001AA4  0EFF               	movlw	255
 15617  001AA6  162C               	andwf	___ftdiv@f2,f,c
 15618  001AA8  0EFF               	movlw	255
 15619  001AAA  162D               	andwf	___ftdiv@f2+1,f,c
 15620  001AAC  0E00               	movlw	0
 15621  001AAE  162E               	andwf	___ftdiv@f2+2,f,c
 15622                           
 15623                           ; BSR set to: 0
 15624  001AB0  0E18               	movlw	24
 15625  001AB2  6F63               	movwf	___ftdiv@cntr& (0+255),b
 15626  001AB4                     
 15627                           ; BSR set to: 0
 15628                           
 15629                           ; BSR set to: 0
 15630  001AB4  90D8               	bcf	status,0,c
 15631  001AB6  3764               	rlcf	___ftdiv@f3& (0+255),f,b
 15632  001AB8  3765               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 15633  001ABA  3766               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 15634                           
 15635                           ; BSR set to: 0
 15636  001ABC  502C               	movf	___ftdiv@f2,w,c
 15637  001ABE  5C29               	subwf	___ftdiv@f1,w,c
 15638  001AC0  502D               	movf	___ftdiv@f2+1,w,c
 15639  001AC2  582A               	subwfb	___ftdiv@f1+1,w,c
 15640  001AC4  502E               	movf	___ftdiv@f2+2,w,c
 15641  001AC6  582B               	subwfb	___ftdiv@f1+2,w,c
 15642  001AC8  A0D8               	btfss	status,0,c
 15643  001ACA  D007               	goto	l1742
 15644                           
 15645                           ; BSR set to: 0
 15646  001ACC  502C               	movf	___ftdiv@f2,w,c
 15647  001ACE  5E29               	subwf	___ftdiv@f1,f,c
 15648  001AD0  502D               	movf	___ftdiv@f2+1,w,c
 15649  001AD2  5A2A               	subwfb	___ftdiv@f1+1,f,c
 15650  001AD4  502E               	movf	___ftdiv@f2+2,w,c
 15651  001AD6  5A2B               	subwfb	___ftdiv@f1+2,f,c
 15652                           
 15653                           ; BSR set to: 0
 15654  001AD8  8164               	bsf	___ftdiv@f3& (0+255),0,b
 15655  001ADA                     l1742:
 15656                           
 15657                           ; BSR set to: 0
 15658  001ADA  90D8               	bcf	status,0,c
 15659  001ADC  3629               	rlcf	___ftdiv@f1,f,c
 15660  001ADE  362A               	rlcf	___ftdiv@f1+1,f,c
 15661  001AE0  362B               	rlcf	___ftdiv@f1+2,f,c
 15662                           
 15663                           ; BSR set to: 0
 15664  001AE2  2F63               	decfsz	___ftdiv@cntr& (0+255),f,b
 15665  001AE4  D7E7               	goto	l1741
 15666                           
 15667                           ; BSR set to: 0
 15668                           
 15669                           ; BSR set to: 0
 15670  001AE6  C064  F018         	movff	___ftdiv@f3,___ftpack@arg
 15671  001AEA  C065  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
 15672  001AEE  C066  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
 15673  001AF2  C067  F01B         	movff	___ftdiv@exp,___ftpack@exp
 15674  001AF6  C068  F01C         	movff	___ftdiv@sign,___ftpack@sign
 15675  001AFA  ECAB  F010         	call	___ftpack	;wreg free
 15676  001AFE  C018  F029         	movff	?___ftpack,?___ftdiv
 15677  001B02  C019  F02A         	movff	?___ftpack+1,?___ftdiv+1
 15678  001B06  C01A  F02B         	movff	?___ftpack+2,?___ftdiv+2
 15679  001B0A  0012               	return	
 15680  001B0C                     __end_of___ftdiv:
 15681                           	opt stack 0
 15682                           tosu	equ	0xFFF
 15683                           tosh	equ	0xFFE
 15684                           tosl	equ	0xFFD
 15685                           pclath	equ	0xFFA
 15686                           tblptru	equ	0xFF8
 15687                           tblptrh	equ	0xFF7
 15688                           tblptrl	equ	0xFF6
 15689                           tablat	equ	0xFF5
 15690                           prodh	equ	0xFF4
 15691                           prodl	equ	0xFF3
 15692                           intcon	equ	0xFF2
 15693                           intcon2	equ	0xFF1
 15694                           postinc0	equ	0xFEE
 15695                           wreg	equ	0xFE8
 15696                           indf1	equ	0xFE7
 15697                           postdec1	equ	0xFE5
 15698                           fsr1h	equ	0xFE2
 15699                           fsr1l	equ	0xFE1
 15700                           indf2	equ	0xFDF
 15701                           postinc2	equ	0xFDE
 15702                           postdec2	equ	0xFDD
 15703                           fsr2h	equ	0xFDA
 15704                           fsr2l	equ	0xFD9
 15705                           status	equ	0xFD8
 15706                           
 15707 ;; *************** function ___awtoft *****************
 15708 ;; Defined at:
 15709 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 15710 ;; Parameters:    Size  Location     Type
 15711 ;;  c               2   31[COMRAM] int 
 15712 ;; Auto vars:     Size  Location     Type
 15713 ;;  sign            1   34[COMRAM] unsigned char 
 15714 ;; Return value:  Size  Location     Type
 15715 ;;                  3   31[COMRAM] float 
 15716 ;; Registers used:
 15717 ;;		wreg, status,2, status,0, cstack
 15718 ;; Tracked objects:
 15719 ;;		On entry : 0/0
 15720 ;;		On exit  : 0/0
 15721 ;;		Unchanged: 0/0
 15722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15723 ;;      Params:         3       0       0       0       0       0       0
 15724 ;;      Locals:         1       0       0       0       0       0       0
 15725 ;;      Temps:          0       0       0       0       0       0       0
 15726 ;;      Totals:         4       0       0       0       0       0       0
 15727 ;;Total ram usage:        4 bytes
 15728 ;; Hardware stack levels used:    1
 15729 ;; Hardware stack levels required when called:    4
 15730 ;; This function calls:
 15731 ;;		___ftpack
 15732 ;; This function is called by:
 15733 ;;		_exp
 15734 ;;		_log
 15735 ;; This function uses a non-reentrant model
 15736 ;;
 15737                           
 15738                           	psect	text103
 15739  00323E                     __ptext103:
 15740                           	opt stack 0
 15741  00323E                     ___awtoft:
 15742                           	opt stack 23
 15743                           
 15744                           ;incstack = 0
 15745  00323E  0E00               	movlw	0
 15746  003240  6E23               	movwf	___awtoft@sign,c
 15747  003242  AE21               	btfss	___awtoft@c+1,7,c
 15748  003244  D006               	goto	l1655
 15749  003246  6C20               	negf	___awtoft@c,c
 15750  003248  1E21               	comf	___awtoft@c+1,f,c
 15751  00324A  B0D8               	btfsc	status,0,c
 15752  00324C  2A21               	incf	___awtoft@c+1,f,c
 15753  00324E  0E01               	movlw	1
 15754  003250  6E23               	movwf	___awtoft@sign,c
 15755  003252                     l1655:
 15756  003252  C020  F018         	movff	___awtoft@c,___ftpack@arg
 15757  003256  C021  F019         	movff	___awtoft@c+1,___ftpack@arg+1
 15758  00325A  6A1A               	clrf	___ftpack@arg+2,c
 15759  00325C  0E8E               	movlw	142
 15760  00325E  6E1B               	movwf	___ftpack@exp,c
 15761  003260  C023  F01C         	movff	___awtoft@sign,___ftpack@sign
 15762  003264  ECAB  F010         	call	___ftpack	;wreg free
 15763  003268  C018  F020         	movff	?___ftpack,?___awtoft
 15764  00326C  C019  F021         	movff	?___ftpack+1,?___awtoft+1
 15765  003270  C01A  F022         	movff	?___ftpack+2,?___awtoft+2
 15766  003274  0012               	return	
 15767  003276                     __end_of___awtoft:
 15768                           	opt stack 0
 15769                           tosu	equ	0xFFF
 15770                           tosh	equ	0xFFE
 15771                           tosl	equ	0xFFD
 15772                           pclath	equ	0xFFA
 15773                           tblptru	equ	0xFF8
 15774                           tblptrh	equ	0xFF7
 15775                           tblptrl	equ	0xFF6
 15776                           tablat	equ	0xFF5
 15777                           prodh	equ	0xFF4
 15778                           prodl	equ	0xFF3
 15779                           intcon	equ	0xFF2
 15780                           intcon2	equ	0xFF1
 15781                           postinc0	equ	0xFEE
 15782                           wreg	equ	0xFE8
 15783                           indf1	equ	0xFE7
 15784                           postdec1	equ	0xFE5
 15785                           fsr1h	equ	0xFE2
 15786                           fsr1l	equ	0xFE1
 15787                           indf2	equ	0xFDF
 15788                           postinc2	equ	0xFDE
 15789                           postdec2	equ	0xFDD
 15790                           fsr2h	equ	0xFDA
 15791                           fsr2l	equ	0xFD9
 15792                           status	equ	0xFD8
 15793                           
 15794 ;; *************** function ___lltoft *****************
 15795 ;; Defined at:
 15796 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
 15797 ;; Parameters:    Size  Location     Type
 15798 ;;  c               4   31[COMRAM] unsigned long 
 15799 ;; Auto vars:     Size  Location     Type
 15800 ;;  exp             1   39[COMRAM] unsigned char 
 15801 ;; Return value:  Size  Location     Type
 15802 ;;                  3   31[COMRAM] float 
 15803 ;; Registers used:
 15804 ;;		wreg, status,2, status,0, cstack
 15805 ;; Tracked objects:
 15806 ;;		On entry : 0/0
 15807 ;;		On exit  : 0/0
 15808 ;;		Unchanged: 0/0
 15809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15810 ;;      Params:         4       0       0       0       0       0       0
 15811 ;;      Locals:         1       0       0       0       0       0       0
 15812 ;;      Temps:          4       0       0       0       0       0       0
 15813 ;;      Totals:         9       0       0       0       0       0       0
 15814 ;;Total ram usage:        9 bytes
 15815 ;; Hardware stack levels used:    1
 15816 ;; Hardware stack levels required when called:    4
 15817 ;; This function calls:
 15818 ;;		___ftpack
 15819 ;; This function is called by:
 15820 ;;		_CheckFlashPrecentage
 15821 ;;		_pow
 15822 ;; This function uses a non-reentrant model
 15823 ;;
 15824                           
 15825                           	psect	text104
 15826  002B88                     __ptext104:
 15827                           	opt stack 0
 15828  002B88                     ___lltoft:
 15829                           	opt stack 25
 15830                           
 15831                           ;incstack = 0
 15832  002B88  0E8E               	movlw	142
 15833  002B8A  6E28               	movwf	___lltoft@exp,c
 15834  002B8C  D006               	goto	l1831
 15835  002B8E  90D8               	bcf	status,0,c
 15836  002B90  3223               	rrcf	___lltoft@c+3,f,c
 15837  002B92  3222               	rrcf	___lltoft@c+2,f,c
 15838  002B94  3221               	rrcf	___lltoft@c+1,f,c
 15839  002B96  3220               	rrcf	___lltoft@c,f,c
 15840  002B98  2A28               	incf	___lltoft@exp,f,c
 15841  002B9A                     l1831:
 15842  002B9A  0E00               	movlw	0
 15843  002B9C  1420               	andwf	___lltoft@c,w,c
 15844  002B9E  6E24               	movwf	??___lltoft& (0+255),c
 15845  002BA0  0E00               	movlw	0
 15846  002BA2  1421               	andwf	___lltoft@c+1,w,c
 15847  002BA4  6E25               	movwf	(??___lltoft+1)& (0+255),c
 15848  002BA6  0E00               	movlw	0
 15849  002BA8  1422               	andwf	___lltoft@c+2,w,c
 15850  002BAA  6E26               	movwf	(??___lltoft+2)& (0+255),c
 15851  002BAC  0EFF               	movlw	255
 15852  002BAE  1423               	andwf	___lltoft@c+3,w,c
 15853  002BB0  6E27               	movwf	(??___lltoft+3)& (0+255),c
 15854  002BB2  5024               	movf	??___lltoft,w,c
 15855  002BB4  1025               	iorwf	??___lltoft+1,w,c
 15856  002BB6  1026               	iorwf	??___lltoft+2,w,c
 15857  002BB8  1027               	iorwf	??___lltoft+3,w,c
 15858  002BBA  A4D8               	btfss	status,2,c
 15859  002BBC  D7E8               	goto	l1832
 15860  002BBE  C020  F018         	movff	___lltoft@c,___ftpack@arg
 15861  002BC2  C021  F019         	movff	___lltoft@c+1,___ftpack@arg+1
 15862  002BC6  C022  F01A         	movff	___lltoft@c+2,___ftpack@arg+2
 15863  002BCA  C028  F01B         	movff	___lltoft@exp,___ftpack@exp
 15864  002BCE  0E00               	movlw	0
 15865  002BD0  6E1C               	movwf	___ftpack@sign,c
 15866  002BD2  ECAB  F010         	call	___ftpack	;wreg free
 15867  002BD6  C018  F020         	movff	?___ftpack,?___lltoft
 15868  002BDA  C019  F021         	movff	?___ftpack+1,?___lltoft+1
 15869  002BDE  C01A  F022         	movff	?___ftpack+2,?___lltoft+2
 15870  002BE2  0012               	return	
 15871  002BE4                     __end_of___lltoft:
 15872                           	opt stack 0
 15873                           tosu	equ	0xFFF
 15874                           tosh	equ	0xFFE
 15875                           tosl	equ	0xFFD
 15876                           pclath	equ	0xFFA
 15877                           tblptru	equ	0xFF8
 15878                           tblptrh	equ	0xFF7
 15879                           tblptrl	equ	0xFF6
 15880                           tablat	equ	0xFF5
 15881                           prodh	equ	0xFF4
 15882                           prodl	equ	0xFF3
 15883                           intcon	equ	0xFF2
 15884                           intcon2	equ	0xFF1
 15885                           postinc0	equ	0xFEE
 15886                           wreg	equ	0xFE8
 15887                           indf1	equ	0xFE7
 15888                           postdec1	equ	0xFE5
 15889                           fsr1h	equ	0xFE2
 15890                           fsr1l	equ	0xFE1
 15891                           indf2	equ	0xFDF
 15892                           postinc2	equ	0xFDE
 15893                           postdec2	equ	0xFDD
 15894                           fsr2h	equ	0xFDA
 15895                           fsr2l	equ	0xFD9
 15896                           status	equ	0xFD8
 15897                           
 15898 ;; *************** function ___lwtoft *****************
 15899 ;; Defined at:
 15900 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 15901 ;; Parameters:    Size  Location     Type
 15902 ;;  c               2   31[COMRAM] unsigned int 
 15903 ;; Auto vars:     Size  Location     Type
 15904 ;;		None
 15905 ;; Return value:  Size  Location     Type
 15906 ;;                  3   31[COMRAM] float 
 15907 ;; Registers used:
 15908 ;;		wreg, status,2, status,0, cstack
 15909 ;; Tracked objects:
 15910 ;;		On entry : 0/0
 15911 ;;		On exit  : 0/0
 15912 ;;		Unchanged: 0/0
 15913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15914 ;;      Params:         3       0       0       0       0       0       0
 15915 ;;      Locals:         0       0       0       0       0       0       0
 15916 ;;      Temps:          0       0       0       0       0       0       0
 15917 ;;      Totals:         3       0       0       0       0       0       0
 15918 ;;Total ram usage:        3 bytes
 15919 ;; Hardware stack levels used:    1
 15920 ;; Hardware stack levels required when called:    4
 15921 ;; This function calls:
 15922 ;;		___ftpack
 15923 ;; This function is called by:
 15924 ;;		_AdcConvert
 15925 ;; This function uses a non-reentrant model
 15926 ;;
 15927                           
 15928                           	psect	text105
 15929  0035DE                     __ptext105:
 15930                           	opt stack 0
 15931  0035DE                     ___lwtoft:
 15932                           	opt stack 25
 15933                           
 15934                           ;incstack = 0
 15935  0035DE  C020  F018         	movff	___lwtoft@c,___ftpack@arg
 15936  0035E2  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
 15937  0035E6  6A1A               	clrf	___ftpack@arg+2,c
 15938  0035E8  0E8E               	movlw	142
 15939  0035EA  6E1B               	movwf	___ftpack@exp,c
 15940  0035EC  0E00               	movlw	0
 15941  0035EE  6E1C               	movwf	___ftpack@sign,c
 15942  0035F0  ECAB  F010         	call	___ftpack	;wreg free
 15943  0035F4  C018  F020         	movff	?___ftpack,?___lwtoft
 15944  0035F8  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
 15945  0035FC  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
 15946  003600  0012               	return	
 15947  003602                     __end_of___lwtoft:
 15948                           	opt stack 0
 15949                           tosu	equ	0xFFF
 15950                           tosh	equ	0xFFE
 15951                           tosl	equ	0xFFD
 15952                           pclath	equ	0xFFA
 15953                           tblptru	equ	0xFF8
 15954                           tblptrh	equ	0xFF7
 15955                           tblptrl	equ	0xFF6
 15956                           tablat	equ	0xFF5
 15957                           prodh	equ	0xFF4
 15958                           prodl	equ	0xFF3
 15959                           intcon	equ	0xFF2
 15960                           intcon2	equ	0xFF1
 15961                           postinc0	equ	0xFEE
 15962                           wreg	equ	0xFE8
 15963                           indf1	equ	0xFE7
 15964                           postdec1	equ	0xFE5
 15965                           fsr1h	equ	0xFE2
 15966                           fsr1l	equ	0xFE1
 15967                           indf2	equ	0xFDF
 15968                           postinc2	equ	0xFDE
 15969                           postdec2	equ	0xFDD
 15970                           fsr2h	equ	0xFDA
 15971                           fsr2l	equ	0xFD9
 15972                           status	equ	0xFD8
 15973                           
 15974 ;; *************** function ___ftpack *****************
 15975 ;; Defined at:
 15976 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 15977 ;; Parameters:    Size  Location     Type
 15978 ;;  arg             3   23[COMRAM] unsigned um
 15979 ;;  exp             1   26[COMRAM] unsigned char 
 15980 ;;  sign            1   27[COMRAM] unsigned char 
 15981 ;; Auto vars:     Size  Location     Type
 15982 ;;		None
 15983 ;; Return value:  Size  Location     Type
 15984 ;;                  3   23[COMRAM] float 
 15985 ;; Registers used:
 15986 ;;		wreg, status,2, status,0
 15987 ;; Tracked objects:
 15988 ;;		On entry : 0/0
 15989 ;;		On exit  : 0/0
 15990 ;;		Unchanged: 0/0
 15991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15992 ;;      Params:         5       0       0       0       0       0       0
 15993 ;;      Locals:         0       0       0       0       0       0       0
 15994 ;;      Temps:          3       0       0       0       0       0       0
 15995 ;;      Totals:         8       0       0       0       0       0       0
 15996 ;;Total ram usage:        8 bytes
 15997 ;; Hardware stack levels used:    1
 15998 ;; Hardware stack levels required when called:    3
 15999 ;; This function calls:
 16000 ;;		Nothing
 16001 ;; This function is called by:
 16002 ;;		___altoft
 16003 ;;		___awtoft
 16004 ;;		___ftadd
 16005 ;;		___ftdiv
 16006 ;;		___ftmul
 16007 ;;		___lltoft
 16008 ;;		___lwtoft
 16009 ;; This function uses a non-reentrant model
 16010 ;;
 16011                           
 16012                           	psect	text106
 16013  002156                     __ptext106:
 16014                           	opt stack 0
 16015  002156                     ___ftpack:
 16016                           	opt stack 25
 16017                           
 16018                           ;incstack = 0
 16019  002156  501B               	movf	___ftpack@exp,w,c
 16020  002158  B4D8               	btfsc	status,2,c
 16021  00215A  D005               	goto	u6140
 16022  00215C  5018               	movf	___ftpack@arg,w,c
 16023  00215E  1019               	iorwf	___ftpack@arg+1,w,c
 16024  002160  101A               	iorwf	___ftpack@arg+2,w,c
 16025  002162  A4D8               	btfss	status,2,c
 16026  002164  D00C               	goto	l1674
 16027  002166                     u6140:
 16028  002166  0E00               	movlw	0
 16029  002168  6E18               	movwf	?___ftpack,c
 16030  00216A  0E00               	movlw	0
 16031  00216C  6E19               	movwf	?___ftpack+1,c
 16032  00216E  0E00               	movlw	0
 16033  002170  6E1A               	movwf	?___ftpack+2,c
 16034  002172  0012               	return	
 16035  002174  2A1B               	incf	___ftpack@exp,f,c
 16036  002176  90D8               	bcf	status,0,c
 16037  002178  321A               	rrcf	___ftpack@arg+2,f,c
 16038  00217A  3219               	rrcf	___ftpack@arg+1,f,c
 16039  00217C  3218               	rrcf	___ftpack@arg,f,c
 16040  00217E                     l1674:
 16041  00217E  0E00               	movlw	0
 16042  002180  1418               	andwf	___ftpack@arg,w,c
 16043  002182  6E1D               	movwf	??___ftpack& (0+255),c
 16044  002184  0E00               	movlw	0
 16045  002186  1419               	andwf	___ftpack@arg+1,w,c
 16046  002188  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 16047  00218A  0EFE               	movlw	254
 16048  00218C  141A               	andwf	___ftpack@arg+2,w,c
 16049  00218E  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 16050  002190  501D               	movf	??___ftpack,w,c
 16051  002192  101E               	iorwf	??___ftpack+1,w,c
 16052  002194  101F               	iorwf	??___ftpack+2,w,c
 16053  002196  B4D8               	btfsc	status,2,c
 16054  002198  D00C               	goto	l1677
 16055  00219A  D7EC               	goto	l1675
 16056  00219C  2A1B               	incf	___ftpack@exp,f,c
 16057  00219E  0E01               	movlw	1
 16058  0021A0  2618               	addwf	___ftpack@arg,f,c
 16059  0021A2  0E00               	movlw	0
 16060  0021A4  2219               	addwfc	___ftpack@arg+1,f,c
 16061  0021A6  0E00               	movlw	0
 16062  0021A8  221A               	addwfc	___ftpack@arg+2,f,c
 16063  0021AA  90D8               	bcf	status,0,c
 16064  0021AC  321A               	rrcf	___ftpack@arg+2,f,c
 16065  0021AE  3219               	rrcf	___ftpack@arg+1,f,c
 16066  0021B0  3218               	rrcf	___ftpack@arg,f,c
 16067  0021B2                     l1677:
 16068  0021B2  0E00               	movlw	0
 16069  0021B4  1418               	andwf	___ftpack@arg,w,c
 16070  0021B6  6E1D               	movwf	??___ftpack& (0+255),c
 16071  0021B8  0E00               	movlw	0
 16072  0021BA  1419               	andwf	___ftpack@arg+1,w,c
 16073  0021BC  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 16074  0021BE  0EFF               	movlw	255
 16075  0021C0  141A               	andwf	___ftpack@arg+2,w,c
 16076  0021C2  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 16077  0021C4  501D               	movf	??___ftpack,w,c
 16078  0021C6  101E               	iorwf	??___ftpack+1,w,c
 16079  0021C8  101F               	iorwf	??___ftpack+2,w,c
 16080  0021CA  B4D8               	btfsc	status,2,c
 16081  0021CC  D006               	goto	l1680
 16082  0021CE  D7E6               	goto	l1678
 16083  0021D0  061B               	decf	___ftpack@exp,f,c
 16084  0021D2  90D8               	bcf	status,0,c
 16085  0021D4  3618               	rlcf	___ftpack@arg,f,c
 16086  0021D6  3619               	rlcf	___ftpack@arg+1,f,c
 16087  0021D8  361A               	rlcf	___ftpack@arg+2,f,c
 16088  0021DA                     l1680:
 16089  0021DA  BE19               	btfsc	___ftpack@arg+1,7,c
 16090  0021DC  D003               	goto	u6180
 16091  0021DE  0E02               	movlw	2
 16092  0021E0  601B               	cpfslt	___ftpack@exp,c
 16093  0021E2  D7F6               	goto	l1681
 16094  0021E4                     u6180:
 16095  0021E4  A01B               	btfss	___ftpack@exp,0,c
 16096  0021E6  9E19               	bcf	___ftpack@arg+1,7,c
 16097  0021E8  90D8               	bcf	status,0,c
 16098  0021EA  321B               	rrcf	___ftpack@exp,f,c
 16099  0021EC  501B               	movf	___ftpack@exp,w,c
 16100  0021EE  121A               	iorwf	___ftpack@arg+2,f,c
 16101  0021F0  501C               	movf	___ftpack@sign,w,c
 16102  0021F2  A4D8               	btfss	status,2,c
 16103  0021F4  8E1A               	bsf	___ftpack@arg+2,7,c
 16104  0021F6  C018  F018         	movff	___ftpack@arg,?___ftpack
 16105  0021FA  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
 16106  0021FE  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
 16107  002202  0012               	return	
 16108  002204                     __end_of___ftpack:
 16109                           	opt stack 0
 16110                           tosu	equ	0xFFF
 16111                           tosh	equ	0xFFE
 16112                           tosl	equ	0xFFD
 16113                           pclath	equ	0xFFA
 16114                           tblptru	equ	0xFF8
 16115                           tblptrh	equ	0xFF7
 16116                           tblptrl	equ	0xFF6
 16117                           tablat	equ	0xFF5
 16118                           prodh	equ	0xFF4
 16119                           prodl	equ	0xFF3
 16120                           intcon	equ	0xFF2
 16121                           intcon2	equ	0xFF1
 16122                           postinc0	equ	0xFEE
 16123                           wreg	equ	0xFE8
 16124                           indf1	equ	0xFE7
 16125                           postdec1	equ	0xFE5
 16126                           fsr1h	equ	0xFE2
 16127                           fsr1l	equ	0xFE1
 16128                           indf2	equ	0xFDF
 16129                           postinc2	equ	0xFDE
 16130                           postdec2	equ	0xFDD
 16131                           fsr2h	equ	0xFDA
 16132                           fsr2l	equ	0xFD9
 16133                           status	equ	0xFD8
 16134                           
 16135 ;; *************** function _FlashSampleWrite *****************
 16136 ;; Defined at:
 16137 ;;		line 29 in file "FlashApp.c"
 16138 ;; Parameters:    Size  Location     Type
 16139 ;;  sampleData      2   44[COMRAM] unsigned int 
 16140 ;;  channelNum      1   46[COMRAM] unsigned char 
 16141 ;; Auto vars:     Size  Location     Type
 16142 ;;  rotateLeft      2    2[BANK0 ] unsigned int 
 16143 ;; Return value:  Size  Location     Type
 16144 ;;                  1    wreg      void 
 16145 ;; Registers used:
 16146 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16147 ;; Tracked objects:
 16148 ;;		On entry : 0/0
 16149 ;;		On exit  : 0/0
 16150 ;;		Unchanged: 0/0
 16151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16152 ;;      Params:         3       0       0       0       0       0       0
 16153 ;;      Locals:         0       2       0       0       0       0       0
 16154 ;;      Temps:          0       2       0       0       0       0       0
 16155 ;;      Totals:         3       4       0       0       0       0       0
 16156 ;;Total ram usage:        7 bytes
 16157 ;; Hardware stack levels used:    1
 16158 ;; Hardware stack levels required when called:    5
 16159 ;; This function calls:
 16160 ;;		_FLASH_IsWriteDone
 16161 ;;		_FLASH_WriteBlock
 16162 ;; This function is called by:
 16163 ;;		_AdcConvert
 16164 ;; This function uses a non-reentrant model
 16165 ;;
 16166                           
 16167                           	psect	text107
 16168  00173C                     __ptext107:
 16169                           	opt stack 0
 16170  00173C                     _FlashSampleWrite:
 16171                           	opt stack 24
 16172                           
 16173                           ;FlashApp.c: 32: uint16_t rotateLeft = (channelNum << 12);
 16174                           
 16175                           ;incstack = 0
 16176  00173C  502F               	movf	FlashSampleWrite@channelNum,w,c
 16177  00173E  0100               	movlb	0	; () banked
 16178  001740  6F60               	movwf	??_FlashSampleWrite& (0+255),b
 16179  001742  6B61               	clrf	(??_FlashSampleWrite+1)& (0+255),b
 16180  001744  0E0C               	movlw	12
 16181  001746                     u7745:
 16182  001746  90D8               	bcf	status,0,c
 16183  001748  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 16184  00174A  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 16185  00174C  2EE8               	decfsz	wreg,f,c
 16186  00174E  D7FB               	goto	u7745
 16187  001750  C060  F062         	movff	??_FlashSampleWrite,FlashSampleWrite@rotateLeft
 16188  001754  C061  F063         	movff	??_FlashSampleWrite+1,FlashSampleWrite@rotateLeft+1
 16189                           
 16190                           ;FlashApp.c: 33: sampleData |= rotateLeft;
 16191  001758  5162               	movf	FlashSampleWrite@rotateLeft& (0+255),w,b
 16192  00175A  122D               	iorwf	FlashSampleWrite@sampleData,f,c
 16193  00175C  5163               	movf	(FlashSampleWrite@rotateLeft+1)& (0+255),w,b
 16194  00175E  122E               	iorwf	FlashSampleWrite@sampleData+1,f,c
 16195                           
 16196                           ; BSR set to: 0
 16197                           ;FlashApp.c: 34: sampleArray[sampleCount] = sampleData;
 16198  001760  90D8               	bcf	status,0,c
 16199  001762  35C7               	rlcf	_sampleCount& (0+255),w,b
 16200  001764  6ED9               	movwf	fsr2l,c
 16201  001766  35C8               	rlcf	(_sampleCount+1)& (0+255),w,b
 16202  001768  6EDA               	movwf	fsr2h,c
 16203  00176A  0E6E               	movlw	low _sampleArray
 16204  00176C  26D9               	addwf	fsr2l,f,c
 16205  00176E  0E01               	movlw	high _sampleArray
 16206  001770  22DA               	addwfc	fsr2h,f,c
 16207  001772  C02D  FFDE         	movff	FlashSampleWrite@sampleData,postinc2
 16208  001776  C02E  FFDD         	movff	FlashSampleWrite@sampleData+1,postdec2
 16209                           
 16210                           ; BSR set to: 0
 16211                           ;FlashApp.c: 35: sampleCount ++;
 16212  00177A  4BC7               	infsnz	_sampleCount& (0+255),f,b
 16213  00177C  2BC8               	incf	(_sampleCount+1)& (0+255),f,b
 16214                           
 16215                           ; BSR set to: 0
 16216                           ;FlashApp.c: 37: if(((sampleCount*sizeof(adc_result_t)) >= (64)) && FLASH_IsWriteDone())
 16217  00177E  C0C7  F060         	movff	_sampleCount,??_FlashSampleWrite
 16218  001782  C0C8  F061         	movff	_sampleCount+1,??_FlashSampleWrite+1
 16219  001786  90D8               	bcf	status,0,c
 16220  001788  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 16221  00178A  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 16222  00178C  5161               	movf	(??_FlashSampleWrite+1)& (0+255),w,b
 16223  00178E  E104               	bnz	u7750
 16224  001790  0E40               	movlw	64
 16225  001792  5D60               	subwf	??_FlashSampleWrite& (0+255),w,b
 16226  001794  A0D8               	btfss	status,0,c
 16227  001796  0012               	return	
 16228  001798                     u7750:
 16229                           
 16230                           ; BSR set to: 0
 16231  001798  ECDD  F01B         	call	_FLASH_IsWriteDone	;wreg free
 16232  00179C  0900               	iorlw	0
 16233  00179E  B4D8               	btfsc	status,2,c
 16234  0017A0  0012               	return	
 16235                           
 16236                           ;FlashApp.c: 38: {
 16237                           ;FlashApp.c: 39: FLASH_WriteBlock(writeAddress, (uint8_t *)sampleArray);
 16238  0017A2  C041  F01D         	movff	_writeAddress,FLASH_WriteBlock@writeAddr
 16239  0017A6  C042  F01E         	movff	_writeAddress+1,FLASH_WriteBlock@writeAddr+1
 16240  0017AA  C043  F01F         	movff	_writeAddress+2,FLASH_WriteBlock@writeAddr+2
 16241  0017AE  C044  F020         	movff	_writeAddress+3,FLASH_WriteBlock@writeAddr+3
 16242  0017B2  0E6E               	movlw	low _sampleArray
 16243  0017B4  6E21               	movwf	FLASH_WriteBlock@flashWrBufPtr,c
 16244  0017B6  0E01               	movlw	high _sampleArray
 16245  0017B8  6E22               	movwf	FLASH_WriteBlock@flashWrBufPtr+1,c
 16246  0017BA  EC99  F00F         	call	_FLASH_WriteBlock	;wreg free
 16247                           
 16248                           ;FlashApp.c: 40: writeAddress += (64);
 16249  0017BE  0E40               	movlw	64
 16250  0017C0  2641               	addwf	_writeAddress,f,c
 16251  0017C2  0E00               	movlw	0
 16252  0017C4  2242               	addwfc	_writeAddress+1,f,c
 16253  0017C6  2243               	addwfc	_writeAddress+2,f,c
 16254  0017C8  2244               	addwfc	_writeAddress+3,f,c
 16255                           
 16256                           ;FlashApp.c: 41: if (writeAddress >= 0x7FF0)
 16257  0017CA  5044               	movf	_writeAddress+3,w,c
 16258  0017CC  1043               	iorwf	_writeAddress+2,w,c
 16259  0017CE  E106               	bnz	u7770
 16260  0017D0  0EF0               	movlw	240
 16261  0017D2  5C41               	subwf	_writeAddress,w,c
 16262  0017D4  0E7F               	movlw	127
 16263  0017D6  5842               	subwfb	_writeAddress+1,w,c
 16264  0017D8  A0D8               	btfss	status,0,c
 16265  0017DA  D018               	goto	l299
 16266  0017DC                     u7770:
 16267                           
 16268                           ;FlashApp.c: 42: {
 16269                           ;FlashApp.c: 43: writeAddress = 0x4000;
 16270  0017DC  0E00               	movlw	0
 16271  0017DE  6E41               	movwf	_writeAddress,c
 16272  0017E0  0E40               	movlw	64
 16273  0017E2  6E42               	movwf	_writeAddress+1,c
 16274  0017E4  0E00               	movlw	0
 16275  0017E6  6E43               	movwf	_writeAddress+2,c
 16276  0017E8  0E00               	movlw	0
 16277  0017EA  6E44               	movwf	_writeAddress+3,c
 16278                           
 16279                           ;FlashApp.c: 44: isReWriteDone = 1;
 16280  0017EC  0E01               	movlw	1
 16281  0017EE  6E3B               	movwf	_isReWriteDone,c
 16282                           
 16283                           ;FlashApp.c: 45: if (readAddress == 0x4000)
 16284  0017F0  0E40               	movlw	64
 16285  0017F2  0100               	movlb	0	; () banked
 16286  0017F4  19FA               	xorwf	(_readAddress+1)& (0+255),w,b
 16287  0017F6  11F9               	iorwf	_readAddress& (0+255),w,b
 16288  0017F8  11FB               	iorwf	(_readAddress+2)& (0+255),w,b
 16289  0017FA  11FC               	iorwf	(_readAddress+3)& (0+255),w,b
 16290  0017FC  A4D8               	btfss	status,2,c
 16291  0017FE  D006               	goto	l299
 16292                           
 16293                           ; BSR set to: 0
 16294                           ;FlashApp.c: 46: {
 16295                           ;FlashApp.c: 47: readAddress += (64);
 16296  001800  0E40               	movlw	64
 16297  001802  27F9               	addwf	_readAddress& (0+255),f,b
 16298  001804  0E00               	movlw	0
 16299  001806  23FA               	addwfc	(_readAddress+1)& (0+255),f,b
 16300  001808  23FB               	addwfc	(_readAddress+2)& (0+255),f,b
 16301  00180A  23FC               	addwfc	(_readAddress+3)& (0+255),f,b
 16302  00180C                     l299:
 16303                           
 16304                           ;FlashApp.c: 48: }
 16305                           ;FlashApp.c: 49: }
 16306                           ;FlashApp.c: 51: if (numOfValidateSamples < ((0x4000-0x7FF0)/(64)))
 16307                           
 16308                           ; BSR set to: 0
 16309  00180C  0430               	decf	_numOfValidateSamples,w,c
 16310  00180E  0EFF               	movlw	255
 16311  001810  5831               	subwfb	_numOfValidateSamples+1,w,c
 16312  001812  0EFF               	movlw	255
 16313  001814  5832               	subwfb	_numOfValidateSamples+2,w,c
 16314  001816  0EFF               	movlw	255
 16315  001818  5833               	subwfb	_numOfValidateSamples+3,w,c
 16316  00181A  B0D8               	btfsc	status,0,c
 16317  00181C  D006               	goto	l300
 16318                           
 16319                           ;FlashApp.c: 52: {
 16320                           ;FlashApp.c: 53: numOfValidateSamples++;
 16321  00181E  0E01               	movlw	1
 16322  001820  2630               	addwf	_numOfValidateSamples,f,c
 16323  001822  0E00               	movlw	0
 16324  001824  2231               	addwfc	_numOfValidateSamples+1,f,c
 16325  001826  2232               	addwfc	_numOfValidateSamples+2,f,c
 16326  001828  2233               	addwfc	_numOfValidateSamples+3,f,c
 16327  00182A                     l300:
 16328                           
 16329                           ;FlashApp.c: 54: }
 16330                           ;FlashApp.c: 55: sampleCount = 0;
 16331  00182A  0E00               	movlw	0
 16332  00182C  0100               	movlb	0	; () banked
 16333  00182E  6FC8               	movwf	(_sampleCount+1)& (0+255),b
 16334  001830  0E00               	movlw	0
 16335  001832  6FC7               	movwf	_sampleCount& (0+255),b
 16336  001834  0012               	return	
 16337  001836                     __end_of_FlashSampleWrite:
 16338                           	opt stack 0
 16339                           tosu	equ	0xFFF
 16340                           tosh	equ	0xFFE
 16341                           tosl	equ	0xFFD
 16342                           pclath	equ	0xFFA
 16343                           tblptru	equ	0xFF8
 16344                           tblptrh	equ	0xFF7
 16345                           tblptrl	equ	0xFF6
 16346                           tablat	equ	0xFF5
 16347                           prodh	equ	0xFF4
 16348                           prodl	equ	0xFF3
 16349                           intcon	equ	0xFF2
 16350                           intcon2	equ	0xFF1
 16351                           postinc0	equ	0xFEE
 16352                           wreg	equ	0xFE8
 16353                           indf1	equ	0xFE7
 16354                           postdec1	equ	0xFE5
 16355                           fsr1h	equ	0xFE2
 16356                           fsr1l	equ	0xFE1
 16357                           indf2	equ	0xFDF
 16358                           postinc2	equ	0xFDE
 16359                           postdec2	equ	0xFDD
 16360                           fsr2h	equ	0xFDA
 16361                           fsr2l	equ	0xFD9
 16362                           status	equ	0xFD8
 16363                           
 16364 ;; *************** function _FLASH_WriteBlock *****************
 16365 ;; Defined at:
 16366 ;;		line 93 in file "mcc_generated_files/memory.c"
 16367 ;; Parameters:    Size  Location     Type
 16368 ;;  writeAddr       4   28[COMRAM] unsigned long 
 16369 ;;  flashWrBufPt    2   32[COMRAM] PTR unsigned char 
 16370 ;;		 -> FlashTest@buff(128), sampleArray(64), 
 16371 ;; Auto vars:     Size  Location     Type
 16372 ;;  blockStartAd    4   38[COMRAM] unsigned long 
 16373 ;;  i               1   43[COMRAM] unsigned char 
 16374 ;;  GIEBitValue     1   42[COMRAM] unsigned char 
 16375 ;; Return value:  Size  Location     Type
 16376 ;;                  1    wreg      char 
 16377 ;; Registers used:
 16378 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16379 ;; Tracked objects:
 16380 ;;		On entry : 0/0
 16381 ;;		On exit  : 0/0
 16382 ;;		Unchanged: 0/0
 16383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16384 ;;      Params:         6       0       0       0       0       0       0
 16385 ;;      Locals:         6       0       0       0       0       0       0
 16386 ;;      Temps:          4       0       0       0       0       0       0
 16387 ;;      Totals:        16       0       0       0       0       0       0
 16388 ;;Total ram usage:       16 bytes
 16389 ;; Hardware stack levels used:    1
 16390 ;; Hardware stack levels required when called:    4
 16391 ;; This function calls:
 16392 ;;		_FLASH_EraseBlock
 16393 ;; This function is called by:
 16394 ;;		_FlashSampleWrite
 16395 ;;		_FlashTest
 16396 ;;		_FLASH_WriteByte
 16397 ;; This function uses a non-reentrant model
 16398 ;;
 16399                           
 16400                           	psect	text108
 16401  001F32                     __ptext108:
 16402                           	opt stack 0
 16403  001F32                     _FLASH_WriteBlock:
 16404                           	opt stack 24
 16405                           
 16406                           ;memory.c: 95: uint32_t blockStartAddr = (uint32_t )(writeAddr & ((0x8000-1) ^ ((64)-1))
      +                          );
 16407                           
 16408                           ;incstack = 0
 16409  001F32  0EC0               	movlw	192
 16410  001F34  6E23               	movwf	??_FLASH_WriteBlock& (0+255),c
 16411  001F36  0E7F               	movlw	127
 16412  001F38  6E24               	movwf	(??_FLASH_WriteBlock+1)& (0+255),c
 16413  001F3A  C01D  F025         	movff	FLASH_WriteBlock@writeAddr,??_FLASH_WriteBlock+2
 16414  001F3E  C01E  F026         	movff	FLASH_WriteBlock@writeAddr+1,??_FLASH_WriteBlock+3
 16415  001F42  5023               	movf	??_FLASH_WriteBlock,w,c
 16416  001F44  1625               	andwf	??_FLASH_WriteBlock+2,f,c
 16417  001F46  5024               	movf	??_FLASH_WriteBlock+1,w,c
 16418  001F48  1626               	andwf	??_FLASH_WriteBlock+3,f,c
 16419  001F4A  C025  F027         	movff	??_FLASH_WriteBlock+2,FLASH_WriteBlock@blockStartAddr
 16420  001F4E  C026  F028         	movff	??_FLASH_WriteBlock+3,FLASH_WriteBlock@blockStartAddr+1
 16421  001F52  6A29               	clrf	FLASH_WriteBlock@blockStartAddr+2,c
 16422  001F54  6A2A               	clrf	FLASH_WriteBlock@blockStartAddr+3,c
 16423                           
 16424                           ;memory.c: 96: uint8_t GIEBitValue = INTCONbits.GIE;
 16425  001F56  0E00               	movlw	0
 16426  001F58  BEF2               	btfsc	intcon,7,c	;volatile
 16427  001F5A  0E01               	movlw	1
 16428  001F5C  6E2B               	movwf	FLASH_WriteBlock@GIEBitValue,c
 16429                           
 16430                           ;memory.c: 97: uint8_t i;
 16431                           ;memory.c: 100: if( writeAddr != blockStartAddr )
 16432  001F5E  5027               	movf	FLASH_WriteBlock@blockStartAddr,w,c
 16433  001F60  181D               	xorwf	FLASH_WriteBlock@writeAddr,w,c
 16434  001F62  E144               	bnz	l954
 16435  001F64  5028               	movf	FLASH_WriteBlock@blockStartAddr+1,w,c
 16436  001F66  181E               	xorwf	FLASH_WriteBlock@writeAddr+1,w,c
 16437  001F68  E141               	bnz	l954
 16438  001F6A  5029               	movf	FLASH_WriteBlock@blockStartAddr+2,w,c
 16439  001F6C  181F               	xorwf	FLASH_WriteBlock@writeAddr+2,w,c
 16440  001F6E  E13E               	bnz	l954
 16441  001F70  502A               	movf	FLASH_WriteBlock@blockStartAddr+3,w,c
 16442  001F72  1820               	xorwf	FLASH_WriteBlock@writeAddr+3,w,c
 16443  001F74  A4D8               	btfss	status,2,c
 16444  001F76  0012               	return	
 16445                           
 16446                           ;memory.c: 103: }
 16447                           ;memory.c: 106: FLASH_EraseBlock(writeAddr);
 16448                           
 16449                           ;memory.c: 101: {
 16450                           ;memory.c: 102: return -1;
 16451                           ;	Return value of _FLASH_WriteBlock is never used
 16452  001F78  C01D  F018         	movff	FLASH_WriteBlock@writeAddr,FLASH_EraseBlock@baseAddr
 16453  001F7C  C01E  F019         	movff	FLASH_WriteBlock@writeAddr+1,FLASH_EraseBlock@baseAddr+1
 16454  001F80  C01F  F01A         	movff	FLASH_WriteBlock@writeAddr+2,FLASH_EraseBlock@baseAddr+2
 16455  001F84  C020  F01B         	movff	FLASH_WriteBlock@writeAddr+3,FLASH_EraseBlock@baseAddr+3
 16456  001F88  ECC2  F019         	call	_FLASH_EraseBlock	;wreg free
 16457                           
 16458                           ;memory.c: 109: TBLPTRU = (uint8_t)((writeAddr & 0x00FF0000) >> 16);
 16459  001F8C  C01F  FFF8         	movff	FLASH_WriteBlock@writeAddr+2,tblptru	;volatile
 16460                           
 16461                           ;memory.c: 110: TBLPTRH = (uint8_t)((writeAddr & 0x0000FF00)>> 8);
 16462  001F90  C01E  FFF7         	movff	FLASH_WriteBlock@writeAddr+1,tblptrh	;volatile
 16463                           
 16464                           ;memory.c: 111: TBLPTRL = (uint8_t)(writeAddr & 0x000000FF);
 16465  001F94  C01D  FFF6         	movff	FLASH_WriteBlock@writeAddr,tblptrl	;volatile
 16466                           
 16467                           ;memory.c: 114: for (i=0; i<(64); i++)
 16468  001F98  0E00               	movlw	0
 16469  001F9A  6E2C               	movwf	FLASH_WriteBlock@i,c
 16470  001F9C                     l7326:
 16471  001F9C  0E3F               	movlw	63
 16472  001F9E  642C               	cpfsgt	FLASH_WriteBlock@i,c
 16473  001FA0  D001               	goto	l955
 16474  001FA2  D013               	goto	u7200
 16475  001FA4                     l955:
 16476                           
 16477                           ;memory.c: 115: {
 16478                           ;memory.c: 116: TABLAT = flashWrBufPtr[i];
 16479  001FA4  502C               	movf	FLASH_WriteBlock@i,w,c
 16480  001FA6  0D01               	mullw	1
 16481  001FA8  50F3               	movf	prodl,w,c
 16482  001FAA  2421               	addwf	FLASH_WriteBlock@flashWrBufPtr,w,c
 16483  001FAC  6ED9               	movwf	fsr2l,c
 16484  001FAE  50F4               	movf	prodh,w,c
 16485  001FB0  2022               	addwfc	FLASH_WriteBlock@flashWrBufPtr+1,w,c
 16486  001FB2  6EDA               	movwf	fsr2h,c
 16487  001FB4  50DF               	movf	indf2,w,c
 16488  001FB6  6EF5               	movwf	tablat,c	;volatile
 16489                           
 16490                           ;memory.c: 118: if (i == ((64)-1))
 16491  001FB8  0E3F               	movlw	63
 16492  001FBA  182C               	xorwf	FLASH_WriteBlock@i,w,c
 16493  001FBC  A4D8               	btfss	status,2,c
 16494  001FBE  D002               	goto	l957
 16495  001FC0  000C               	tblwt		*	;# 
 16496                           
 16497                           ;memory.c: 121: }
 16498  001FC2  D001               	goto	l958
 16499  001FC4                     l957:
 16500  001FC4  000D               	tblwt		*+	;# 
 16501  001FC6                     l958:
 16502  001FC6  2A2C               	incf	FLASH_WriteBlock@i,f,c
 16503  001FC8  D7E9               	goto	l7326
 16504  001FCA                     u7200:
 16505                           
 16506                           ;memory.c: 125: }
 16507                           ;memory.c: 126: }
 16508                           ;memory.c: 128: PIR2bits.EEIF = 1;
 16509  001FCA  88A1               	bsf	4001,4,c	;volatile
 16510                           
 16511                           ;memory.c: 129: EECON1bits.EEPGD = 1;
 16512  001FCC  8EA6               	bsf	4006,7,c	;volsfr
 16513                           
 16514                           ;memory.c: 130: EECON1bits.CFGS = 0;
 16515  001FCE  9CA6               	bcf	4006,6,c	;volsfr
 16516                           
 16517                           ;memory.c: 131: EECON1bits.WREN = 1;
 16518  001FD0  84A6               	bsf	4006,2,c	;volsfr
 16519                           
 16520                           ;memory.c: 132: INTCONbits.GIE = 0;
 16521  001FD2  9EF2               	bcf	intcon,7,c	;volatile
 16522                           
 16523                           ;memory.c: 133: EECON2 = 0x55;
 16524  001FD4  0E55               	movlw	85
 16525  001FD6  6EA7               	movwf	4007,c	;volsfr
 16526                           
 16527                           ;memory.c: 134: EECON2 = 0xAA;
 16528  001FD8  0EAA               	movlw	170
 16529  001FDA  6EA7               	movwf	4007,c	;volsfr
 16530                           
 16531                           ;memory.c: 135: EECON1bits.WR = 1;
 16532  001FDC  82A6               	bsf	4006,1,c	;volsfr
 16533                           
 16534                           ;memory.c: 137: EECON1bits.WREN = 0;
 16535  001FDE  94A6               	bcf	4006,2,c	;volsfr
 16536                           
 16537                           ;memory.c: 138: INTCONbits.GIE = GIEBitValue;
 16538  001FE0  B02B               	btfsc	FLASH_WriteBlock@GIEBitValue,0,c
 16539  001FE2  D002               	bra	u7215
 16540  001FE4  9EF2               	bcf	intcon,7,c	;volatile
 16541  001FE6  D001               	bra	u7216
 16542  001FE8                     u7215:
 16543  001FE8  8EF2               	bsf	intcon,7,c	;volatile
 16544  001FEA                     u7216:
 16545  001FEA  0012               	return	
 16546  001FEC                     l954:
 16547  001FEC  0012               	return		;funcret
 16548  001FEE                     __end_of_FLASH_WriteBlock:
 16549                           	opt stack 0
 16550                           tosu	equ	0xFFF
 16551                           tosh	equ	0xFFE
 16552                           tosl	equ	0xFFD
 16553                           pclath	equ	0xFFA
 16554                           tblptru	equ	0xFF8
 16555                           tblptrh	equ	0xFF7
 16556                           tblptrl	equ	0xFF6
 16557                           tablat	equ	0xFF5
 16558                           prodh	equ	0xFF4
 16559                           prodl	equ	0xFF3
 16560                           intcon	equ	0xFF2
 16561                           intcon2	equ	0xFF1
 16562                           postinc0	equ	0xFEE
 16563                           wreg	equ	0xFE8
 16564                           indf1	equ	0xFE7
 16565                           postdec1	equ	0xFE5
 16566                           fsr1h	equ	0xFE2
 16567                           fsr1l	equ	0xFE1
 16568                           indf2	equ	0xFDF
 16569                           postinc2	equ	0xFDE
 16570                           postdec2	equ	0xFDD
 16571                           fsr2h	equ	0xFDA
 16572                           fsr2l	equ	0xFD9
 16573                           status	equ	0xFD8
 16574                           
 16575 ;; *************** function _FLASH_EraseBlock *****************
 16576 ;; Defined at:
 16577 ;;		line 144 in file "mcc_generated_files/memory.c"
 16578 ;; Parameters:    Size  Location     Type
 16579 ;;  baseAddr        4   23[COMRAM] unsigned long 
 16580 ;; Auto vars:     Size  Location     Type
 16581 ;;  GIEBitValue     1   27[COMRAM] unsigned char 
 16582 ;; Return value:  Size  Location     Type
 16583 ;;                  1    wreg      void 
 16584 ;; Registers used:
 16585 ;;		wreg, status,2
 16586 ;; Tracked objects:
 16587 ;;		On entry : 0/0
 16588 ;;		On exit  : 0/0
 16589 ;;		Unchanged: 0/0
 16590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16591 ;;      Params:         4       0       0       0       0       0       0
 16592 ;;      Locals:         1       0       0       0       0       0       0
 16593 ;;      Temps:          0       0       0       0       0       0       0
 16594 ;;      Totals:         5       0       0       0       0       0       0
 16595 ;;Total ram usage:        5 bytes
 16596 ;; Hardware stack levels used:    1
 16597 ;; Hardware stack levels required when called:    3
 16598 ;; This function calls:
 16599 ;;		Nothing
 16600 ;; This function is called by:
 16601 ;;		_FLASH_WriteBlock
 16602 ;; This function uses a non-reentrant model
 16603 ;;
 16604                           
 16605                           	psect	text109
 16606  003384                     __ptext109:
 16607                           	opt stack 0
 16608  003384                     _FLASH_EraseBlock:
 16609                           	opt stack 24
 16610                           
 16611                           ;memory.c: 146: uint8_t GIEBitValue = INTCONbits.GIE;
 16612                           
 16613                           ;incstack = 0
 16614  003384  0E00               	movlw	0
 16615  003386  BEF2               	btfsc	intcon,7,c	;volatile
 16616  003388  0E01               	movlw	1
 16617  00338A  6E1C               	movwf	FLASH_EraseBlock@GIEBitValue,c
 16618                           
 16619                           ;memory.c: 148: TBLPTRU = (uint8_t)((baseAddr & 0x00FF0000) >> 16);
 16620  00338C  C01A  FFF8         	movff	FLASH_EraseBlock@baseAddr+2,tblptru	;volatile
 16621                           
 16622                           ;memory.c: 149: TBLPTRH = (uint8_t)((baseAddr & 0x0000FF00)>> 8);
 16623  003390  C019  FFF7         	movff	FLASH_EraseBlock@baseAddr+1,tblptrh	;volatile
 16624                           
 16625                           ;memory.c: 150: TBLPTRL = (uint8_t)(baseAddr & 0x000000FF);
 16626  003394  C018  FFF6         	movff	FLASH_EraseBlock@baseAddr,tblptrl	;volatile
 16627                           
 16628                           ;memory.c: 152: EECON1bits.EEPGD = 1;
 16629  003398  8EA6               	bsf	4006,7,c	;volsfr
 16630                           
 16631                           ;memory.c: 153: EECON1bits.CFGS = 0;
 16632  00339A  9CA6               	bcf	4006,6,c	;volsfr
 16633                           
 16634                           ;memory.c: 154: EECON1bits.WREN = 1;
 16635  00339C  84A6               	bsf	4006,2,c	;volsfr
 16636                           
 16637                           ;memory.c: 155: EECON1bits.FREE = 1;
 16638  00339E  88A6               	bsf	4006,4,c	;volsfr
 16639                           
 16640                           ;memory.c: 156: INTCONbits.GIE = 0;
 16641  0033A0  9EF2               	bcf	intcon,7,c	;volatile
 16642                           
 16643                           ;memory.c: 157: EECON2 = 0x55;
 16644  0033A2  0E55               	movlw	85
 16645  0033A4  6EA7               	movwf	4007,c	;volsfr
 16646                           
 16647                           ;memory.c: 158: EECON2 = 0xAA;
 16648  0033A6  0EAA               	movlw	170
 16649  0033A8  6EA7               	movwf	4007,c	;volsfr
 16650                           
 16651                           ;memory.c: 159: EECON1bits.WR = 1;
 16652  0033AA  82A6               	bsf	4006,1,c	;volsfr
 16653                           
 16654                           ;memory.c: 160: INTCONbits.GIE = GIEBitValue;
 16655  0033AC  B01C               	btfsc	FLASH_EraseBlock@GIEBitValue,0,c
 16656  0033AE  D002               	bra	u6955
 16657  0033B0  9EF2               	bcf	intcon,7,c	;volatile
 16658  0033B2  D001               	bra	u6956
 16659  0033B4                     u6955:
 16660  0033B4  8EF2               	bsf	intcon,7,c	;volatile
 16661  0033B6                     u6956:
 16662  0033B6  0012               	return		;funcret
 16663  0033B8                     __end_of_FLASH_EraseBlock:
 16664                           	opt stack 0
 16665                           tosu	equ	0xFFF
 16666                           tosh	equ	0xFFE
 16667                           tosl	equ	0xFFD
 16668                           pclath	equ	0xFFA
 16669                           tblptru	equ	0xFF8
 16670                           tblptrh	equ	0xFF7
 16671                           tblptrl	equ	0xFF6
 16672                           tablat	equ	0xFF5
 16673                           prodh	equ	0xFF4
 16674                           prodl	equ	0xFF3
 16675                           intcon	equ	0xFF2
 16676                           intcon2	equ	0xFF1
 16677                           postinc0	equ	0xFEE
 16678                           wreg	equ	0xFE8
 16679                           indf1	equ	0xFE7
 16680                           postdec1	equ	0xFE5
 16681                           fsr1h	equ	0xFE2
 16682                           fsr1l	equ	0xFE1
 16683                           indf2	equ	0xFDF
 16684                           postinc2	equ	0xFDE
 16685                           postdec2	equ	0xFDD
 16686                           fsr2h	equ	0xFDA
 16687                           fsr2l	equ	0xFD9
 16688                           status	equ	0xFD8
 16689                           
 16690 ;; *************** function _FLASH_IsWriteDone *****************
 16691 ;; Defined at:
 16692 ;;		line 189 in file "mcc_generated_files/memory.c"
 16693 ;; Parameters:    Size  Location     Type
 16694 ;;		None
 16695 ;; Auto vars:     Size  Location     Type
 16696 ;;		None
 16697 ;; Return value:  Size  Location     Type
 16698 ;;                  1    wreg      unsigned char 
 16699 ;; Registers used:
 16700 ;;		wreg
 16701 ;; Tracked objects:
 16702 ;;		On entry : 0/0
 16703 ;;		On exit  : 0/0
 16704 ;;		Unchanged: 0/0
 16705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16706 ;;      Params:         0       0       0       0       0       0       0
 16707 ;;      Locals:         0       0       0       0       0       0       0
 16708 ;;      Temps:          0       0       0       0       0       0       0
 16709 ;;      Totals:         0       0       0       0       0       0       0
 16710 ;;Total ram usage:        0 bytes
 16711 ;; Hardware stack levels used:    1
 16712 ;; Hardware stack levels required when called:    3
 16713 ;; This function calls:
 16714 ;;		Nothing
 16715 ;; This function is called by:
 16716 ;;		_FlashSampleWrite
 16717 ;;		_FlashReadUart
 16718 ;; This function uses a non-reentrant model
 16719 ;;
 16720                           
 16721                           	psect	text110
 16722  0037BA                     __ptext110:
 16723                           	opt stack 0
 16724  0037BA                     _FLASH_IsWriteDone:
 16725                           	opt stack 24
 16726                           
 16727                           ;memory.c: 191: return (EECON1bits.WR == 0);
 16728                           
 16729                           ;incstack = 0
 16730  0037BA  A2A6               	btfss	4006,1,c	;volsfr
 16731  0037BC  D001               	goto	u6861
 16732  0037BE  D002               	goto	u6860
 16733  0037C0                     u6861:
 16734  0037C0  0E01               	movlw	1
 16735  0037C2  0012               	return	
 16736  0037C4                     u6860:
 16737  0037C4  0E00               	movlw	0
 16738  0037C6  0012               	return	
 16739  0037C8                     __end_of_FLASH_IsWriteDone:
 16740                           	opt stack 0
 16741                           tosu	equ	0xFFF
 16742                           tosh	equ	0xFFE
 16743                           tosl	equ	0xFFD
 16744                           pclath	equ	0xFFA
 16745                           tblptru	equ	0xFF8
 16746                           tblptrh	equ	0xFF7
 16747                           tblptrl	equ	0xFF6
 16748                           tablat	equ	0xFF5
 16749                           prodh	equ	0xFF4
 16750                           prodl	equ	0xFF3
 16751                           intcon	equ	0xFF2
 16752                           intcon2	equ	0xFF1
 16753                           postinc0	equ	0xFEE
 16754                           wreg	equ	0xFE8
 16755                           indf1	equ	0xFE7
 16756                           postdec1	equ	0xFE5
 16757                           fsr1h	equ	0xFE2
 16758                           fsr1l	equ	0xFE1
 16759                           indf2	equ	0xFDF
 16760                           postinc2	equ	0xFDE
 16761                           postdec2	equ	0xFDD
 16762                           fsr2h	equ	0xFDA
 16763                           fsr2l	equ	0xFD9
 16764                           status	equ	0xFD8
 16765                           
 16766 ;; *************** function _ADC_GetConversion *****************
 16767 ;; Defined at:
 16768 ;;		line 106 in file "mcc_generated_files/adc.c"
 16769 ;; Parameters:    Size  Location     Type
 16770 ;;  channel         1    wreg     enum E6975
 16771 ;; Auto vars:     Size  Location     Type
 16772 ;;  channel         1   27[COMRAM] enum E6975
 16773 ;; Return value:  Size  Location     Type
 16774 ;;                  2   23[COMRAM] unsigned int 
 16775 ;; Registers used:
 16776 ;;		wreg, status,2, status,0
 16777 ;; Tracked objects:
 16778 ;;		On entry : 0/0
 16779 ;;		On exit  : 0/0
 16780 ;;		Unchanged: 0/0
 16781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16782 ;;      Params:         2       0       0       0       0       0       0
 16783 ;;      Locals:         1       0       0       0       0       0       0
 16784 ;;      Temps:          2       0       0       0       0       0       0
 16785 ;;      Totals:         5       0       0       0       0       0       0
 16786 ;;Total ram usage:        5 bytes
 16787 ;; Hardware stack levels used:    1
 16788 ;; Hardware stack levels required when called:    3
 16789 ;; This function calls:
 16790 ;;		Nothing
 16791 ;; This function is called by:
 16792 ;;		_AdcConvert
 16793 ;; This function uses a non-reentrant model
 16794 ;;
 16795                           
 16796                           	psect	text111
 16797  003448                     __ptext111:
 16798                           	opt stack 0
 16799  003448                     _ADC_GetConversion:
 16800                           	opt stack 26
 16801                           
 16802                           ;incstack = 0
 16803                           ;ADC_GetConversion@channel stored from wreg
 16804  003448  6E1C               	movwf	ADC_GetConversion@channel,c
 16805                           
 16806                           ;adc.c: 109: ADCON0bits.CHS = channel;
 16807  00344A  C01C  F01A         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
 16808  00344E  461A               	rlncf	??_ADC_GetConversion,f,c
 16809  003450  461A               	rlncf	??_ADC_GetConversion,f,c
 16810  003452  50C2               	movf	4034,w,c	;volatile
 16811  003454  181A               	xorwf	??_ADC_GetConversion,w,c
 16812  003456  0B83               	andlw	-125
 16813  003458  181A               	xorwf	??_ADC_GetConversion,w,c
 16814  00345A  6EC2               	movwf	4034,c	;volatile
 16815                           
 16816                           ;adc.c: 112: ADCON0bits.ADON = 1;
 16817  00345C  80C2               	bsf	4034,0,c	;volatile
 16818                           
 16819                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
 16820  00345E  82C2               	bsf	4034,1,c	;volatile
 16821  003460                     
 16822                           ;adc.c: 119: {
 16823  003460  B2C2               	btfsc	4034,1,c	;volatile
 16824  003462  D7FE               	goto	l1067
 16825                           
 16826                           ;adc.c: 120: }
 16827                           ;adc.c: 122: return ((ADRESH << 8) + ADRESL);
 16828  003464  50C4               	movf	4036,w,c	;volatile
 16829  003466  6E1B               	movwf	(??_ADC_GetConversion+1)& (0+255),c
 16830  003468  6A1A               	clrf	??_ADC_GetConversion& (0+255),c
 16831  00346A  50C3               	movf	4035,w,c	;volatile
 16832  00346C  241A               	addwf	??_ADC_GetConversion,w,c
 16833  00346E  6E18               	movwf	?_ADC_GetConversion,c
 16834  003470  0E00               	movlw	0
 16835  003472  201B               	addwfc	??_ADC_GetConversion+1,w,c
 16836  003474  6E19               	movwf	?_ADC_GetConversion+1,c
 16837  003476  0012               	return	
 16838  003478                     __end_of_ADC_GetConversion:
 16839                           	opt stack 0
 16840                           tosu	equ	0xFFF
 16841                           tosh	equ	0xFFE
 16842                           tosl	equ	0xFFD
 16843                           pclath	equ	0xFFA
 16844                           tblptru	equ	0xFF8
 16845                           tblptrh	equ	0xFF7
 16846                           tblptrl	equ	0xFF6
 16847                           tablat	equ	0xFF5
 16848                           prodh	equ	0xFF4
 16849                           prodl	equ	0xFF3
 16850                           intcon	equ	0xFF2
 16851                           intcon2	equ	0xFF1
 16852                           postinc0	equ	0xFEE
 16853                           wreg	equ	0xFE8
 16854                           indf1	equ	0xFE7
 16855                           postdec1	equ	0xFE5
 16856                           fsr1h	equ	0xFE2
 16857                           fsr1l	equ	0xFE1
 16858                           indf2	equ	0xFDF
 16859                           postinc2	equ	0xFDE
 16860                           postdec2	equ	0xFDD
 16861                           fsr2h	equ	0xFDA
 16862                           fsr2l	equ	0xFD9
 16863                           status	equ	0xFD8
 16864                           
 16865 ;; *************** function _INTERRUPT_InterruptManager *****************
 16866 ;; Defined at:
 16867 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 16868 ;; Parameters:    Size  Location     Type
 16869 ;;		None
 16870 ;; Auto vars:     Size  Location     Type
 16871 ;;		None
 16872 ;; Return value:  Size  Location     Type
 16873 ;;                  1    wreg      void 
 16874 ;; Registers used:
 16875 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16876 ;; Tracked objects:
 16877 ;;		On entry : 0/0
 16878 ;;		On exit  : 0/0
 16879 ;;		Unchanged: 0/0
 16880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16881 ;;      Params:         0       0       0       0       0       0       0
 16882 ;;      Locals:         0       0       0       0       0       0       0
 16883 ;;      Temps:         18       0       0       0       0       0       0
 16884 ;;      Totals:        18       0       0       0       0       0       0
 16885 ;;Total ram usage:       18 bytes
 16886 ;; Hardware stack levels used:    1
 16887 ;; Hardware stack levels required when called:    2
 16888 ;; This function calls:
 16889 ;;		_EUSART1_Receive_ISR
 16890 ;;		_EUSART1_Transmit_ISR
 16891 ;;		_MEMORY_ISR
 16892 ;;		_PIN_MANAGER_IOC
 16893 ;;		_TMR0_ISR
 16894 ;; This function is called by:
 16895 ;;		Interrupt level 2
 16896 ;; This function uses a non-reentrant model
 16897 ;;
 16898                           
 16899                           	psect	intcode
 16900  000008                     __pintcode:
 16901                           	opt stack 0
 16902  000008                     _INTERRUPT_InterruptManager:
 16903                           	opt stack 20
 16904                           
 16905                           ;incstack = 0
 16906  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 16907  00000A  CFFA F006          	movff	pclath,??_INTERRUPT_InterruptManager
 16908  00000E  CFFB F007          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 16909  000012  CFE9 F008          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 16910  000016  CFEA F009          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 16911  00001A  CFE1 F00A          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 16912  00001E  CFE2 F00B          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 16913  000022  CFD9 F00C          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 16914  000026  CFDA F00D          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 16915  00002A  CFF3 F00E          	movff	prodl,??_INTERRUPT_InterruptManager+8
 16916  00002E  CFF4 F00F          	movff	prodh,??_INTERRUPT_InterruptManager+9
 16917  000032  CFF6 F010          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 16918  000036  CFF7 F011          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 16919  00003A  CFF8 F012          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 16920  00003E  CFF5 F013          	movff	tablat,??_INTERRUPT_InterruptManager+13
 16921  000042  C048  F014         	movff	btemp,??_INTERRUPT_InterruptManager+14
 16922  000046  C049  F015         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 16923  00004A  C04A  F016         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 16924  00004E  C04B  F017         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 16925                           
 16926                           ;interrupt_manager.c: 60: if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
 16927  000052  B6F2               	btfsc	intcon,3,c	;volatile
 16928  000054  A0F2               	btfss	intcon,0,c	;volatile
 16929  000056  D003               	goto	i2l792
 16930                           
 16931                           ;interrupt_manager.c: 61: {
 16932                           ;interrupt_manager.c: 62: PIN_MANAGER_IOC();
 16933  000058  EC18  F01C         	call	_PIN_MANAGER_IOC	;wreg free
 16934                           
 16935                           ;interrupt_manager.c: 63: }
 16936  00005C  D019               	goto	i2l801
 16937  00005E                     i2l792:
 16938                           
 16939                           ;interrupt_manager.c: 64: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 16940  00005E  BAF2               	btfsc	intcon,5,c	;volatile
 16941  000060  A4F2               	btfss	intcon,2,c	;volatile
 16942  000062  D003               	goto	i2l794
 16943                           
 16944                           ;interrupt_manager.c: 65: {
 16945                           ;interrupt_manager.c: 66: TMR0_ISR();
 16946  000064  EC33  F012         	call	_TMR0_ISR	;wreg free
 16947                           
 16948                           ;interrupt_manager.c: 67: }
 16949  000068  D013               	goto	i2l801
 16950  00006A                     i2l794:
 16951                           
 16952                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1)
 16953  00006A  ACF2               	btfss	intcon,6,c	;volatile
 16954  00006C  D011               	goto	i2l801
 16955                           
 16956                           ;interrupt_manager.c: 69: {
 16957                           ;interrupt_manager.c: 70: if(PIE2bits.EEIE == 1 && PIR2bits.EEIF == 1)
 16958  00006E  B8A0               	btfsc	4000,4,c	;volatile
 16959  000070  A8A1               	btfss	4001,4,c	;volatile
 16960  000072  D003               	goto	i2l797
 16961                           
 16962                           ;interrupt_manager.c: 71: {
 16963                           ;interrupt_manager.c: 72: MEMORY_ISR();
 16964  000074  EC1A  F01C         	call	_MEMORY_ISR	;wreg free
 16965                           
 16966                           ;interrupt_manager.c: 73: }
 16967  000078  D00B               	goto	i2l801
 16968  00007A                     i2l797:
 16969                           
 16970                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 16971  00007A  B89D               	btfsc	3997,4,c	;volatile
 16972  00007C  A89E               	btfss	3998,4,c	;volatile
 16973  00007E  D003               	goto	i2l799
 16974                           
 16975                           ;interrupt_manager.c: 75: {
 16976                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
 16977  000080  EC3B  F019         	call	_EUSART1_Transmit_ISR	;wreg free
 16978                           
 16979                           ;interrupt_manager.c: 77: }
 16980  000084  D005               	goto	i2l801
 16981  000086                     i2l799:
 16982                           
 16983                           ;interrupt_manager.c: 78: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 16984  000086  BA9D               	btfsc	3997,5,c	;volatile
 16985  000088  AA9E               	btfss	3998,5,c	;volatile
 16986  00008A  D002               	goto	i2l801
 16987                           
 16988                           ;interrupt_manager.c: 79: {
 16989                           ;interrupt_manager.c: 80: EUSART1_Receive_ISR();
 16990  00008C  EC3C  F01A         	call	_EUSART1_Receive_ISR	;wreg free
 16991  000090                     i2l801:
 16992                           
 16993                           ;interrupt_manager.c: 87: else
 16994                           ;interrupt_manager.c: 88: {
 16995                           
 16996                           ;interrupt_manager.c: 85: }
 16997                           ;interrupt_manager.c: 86: }
 16998                           
 16999                           ;interrupt_manager.c: 82: else
 17000                           ;interrupt_manager.c: 83: {
 17001  000090  C017  F04B         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 17002  000094  C016  F04A         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 17003  000098  C015  F049         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 17004  00009C  C014  F048         	movff	??_INTERRUPT_InterruptManager+14,btemp
 17005  0000A0  C013  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 17006  0000A4  C012  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 17007  0000A8  C011  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 17008  0000AC  C010  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 17009  0000B0  C00F  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 17010  0000B4  C00E  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 17011  0000B8  C00D  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 17012  0000BC  C00C  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 17013  0000C0  C00B  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 17014  0000C4  C00A  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 17015  0000C8  C009  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 17016  0000CC  C008  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 17017  0000D0  C007  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 17018  0000D4  C006  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 17019  0000D8  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 17020  0000DA  0011               	retfie		f
 17021  0000DC                     __end_of_INTERRUPT_InterruptManager:
 17022                           	opt stack 0
 17023                           tosu	equ	0xFFF
 17024                           tosh	equ	0xFFE
 17025                           tosl	equ	0xFFD
 17026                           pclatu	equ	0xFFB
 17027                           pclath	equ	0xFFA
 17028                           tblptru	equ	0xFF8
 17029                           tblptrh	equ	0xFF7
 17030                           tblptrl	equ	0xFF6
 17031                           tablat	equ	0xFF5
 17032                           prodh	equ	0xFF4
 17033                           prodl	equ	0xFF3
 17034                           intcon	equ	0xFF2
 17035                           intcon2	equ	0xFF1
 17036                           postinc0	equ	0xFEE
 17037                           fsr0h	equ	0xFEA
 17038                           fsr0l	equ	0xFE9
 17039                           wreg	equ	0xFE8
 17040                           indf1	equ	0xFE7
 17041                           postdec1	equ	0xFE5
 17042                           fsr1h	equ	0xFE2
 17043                           fsr1l	equ	0xFE1
 17044                           indf2	equ	0xFDF
 17045                           postinc2	equ	0xFDE
 17046                           postdec2	equ	0xFDD
 17047                           fsr2h	equ	0xFDA
 17048                           fsr2l	equ	0xFD9
 17049                           status	equ	0xFD8
 17050                           
 17051 ;; *************** function _TMR0_ISR *****************
 17052 ;; Defined at:
 17053 ;;		line 132 in file "mcc_generated_files/tmr0.c"
 17054 ;; Parameters:    Size  Location     Type
 17055 ;;		None
 17056 ;; Auto vars:     Size  Location     Type
 17057 ;;		None
 17058 ;; Return value:  Size  Location     Type
 17059 ;;                  1    wreg      void 
 17060 ;; Registers used:
 17061 ;;		wreg, status,2, status,0, cstack
 17062 ;; Tracked objects:
 17063 ;;		On entry : 0/0
 17064 ;;		On exit  : 0/0
 17065 ;;		Unchanged: 0/0
 17066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17067 ;;      Params:         0       0       0       0       0       0       0
 17068 ;;      Locals:         0       0       0       0       0       0       0
 17069 ;;      Temps:          0       0       0       0       0       0       0
 17070 ;;      Totals:         0       0       0       0       0       0       0
 17071 ;;Total ram usage:        0 bytes
 17072 ;; Hardware stack levels used:    1
 17073 ;; Hardware stack levels required when called:    1
 17074 ;; This function calls:
 17075 ;;		___lwmod
 17076 ;; This function is called by:
 17077 ;;		_INTERRUPT_InterruptManager
 17078 ;; This function uses a non-reentrant model
 17079 ;;
 17080                           
 17081                           	psect	text113
 17082  002466                     __ptext113:
 17083                           	opt stack 0
 17084  002466                     _TMR0_ISR:
 17085                           	opt stack 20
 17086                           
 17087                           ;tmr0.c: 134: static volatile uint16_t CountCallBack = 0;
 17088                           ;tmr0.c: 137: INTCONbits.TMR0IF = 0;
 17089                           
 17090                           ;incstack = 0
 17091  002466  94F2               	bcf	intcon,2,c	;volatile
 17092                           
 17093                           ;tmr0.c: 141: TMR0H = timer0ReloadVal >> 8;
 17094  002468  5047               	movf	_timer0ReloadVal+1,w,c	;volatile
 17095  00246A  6ED7               	movwf	4055,c	;volatile
 17096                           
 17097                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal;
 17098  00246C  C046  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 17099                           
 17100                           ;tmr0.c: 146: CountCallBack ++;
 17101  002470  4A34               	infsnz	TMR0_ISR@CountCallBack,f,c	;volatile
 17102  002472  2A35               	incf	TMR0_ISR@CountCallBack+1,f,c	;volatile
 17103                           
 17104                           ;tmr0.c: 147: if ((CountCallBack % 20) == 0)
 17105  002474  C034  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 17106  002478  C035  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 17107  00247C  0E00               	movlw	0
 17108  00247E  6E04               	movwf	___lwmod@divisor+1,c
 17109  002480  0E14               	movlw	20
 17110  002482  6E03               	movwf	___lwmod@divisor,c
 17111  002484  EC88  F018         	call	___lwmod	;wreg free
 17112  002488  5001               	movf	?___lwmod,w,c
 17113  00248A  1002               	iorwf	?___lwmod+1,w,c
 17114  00248C  A4D8               	btfss	status,2,c
 17115  00248E  D003               	goto	i2l1023
 17116                           
 17117                           ;tmr0.c: 148: {
 17118                           ;tmr0.c: 149: TimerOneSecFlag = 1;
 17119  002490  0E01               	movlw	1
 17120  002492  0100               	movlb	0	; () banked
 17121  002494  6FD8               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
 17122  002496                     i2l1023:
 17123                           
 17124                           ;tmr0.c: 150: }
 17125                           ;tmr0.c: 152: if ((CountCallBack % 50) == 0)
 17126                           
 17127                           ; BSR set to: 0
 17128  002496  C034  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 17129  00249A  C035  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 17130  00249E  0E00               	movlw	0
 17131  0024A0  6E04               	movwf	___lwmod@divisor+1,c
 17132  0024A2  0E32               	movlw	50
 17133  0024A4  6E03               	movwf	___lwmod@divisor,c
 17134  0024A6  EC88  F018         	call	___lwmod	;wreg free
 17135  0024AA  5001               	movf	?___lwmod,w,c
 17136  0024AC  1002               	iorwf	?___lwmod+1,w,c
 17137  0024AE  A4D8               	btfss	status,2,c
 17138  0024B0  D003               	goto	i2l1024
 17139                           
 17140                           ;tmr0.c: 153: {
 17141                           ;tmr0.c: 154: TimerSamplingFlag = 1;
 17142  0024B2  0E01               	movlw	1
 17143  0024B4  0100               	movlb	0	; () banked
 17144  0024B6  6FD7               	movwf	_TimerSamplingFlag& (0+255),b	;volatile
 17145  0024B8                     i2l1024:
 17146                           
 17147                           ;tmr0.c: 155: }
 17148                           ;tmr0.c: 156: if ((CountCallBack % 300) == 0)
 17149                           
 17150                           ; BSR set to: 0
 17151  0024B8  C034  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 17152  0024BC  C035  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 17153  0024C0  0E01               	movlw	1
 17154  0024C2  6E04               	movwf	___lwmod@divisor+1,c
 17155  0024C4  0E2C               	movlw	44
 17156  0024C6  6E03               	movwf	___lwmod@divisor,c
 17157  0024C8  EC88  F018         	call	___lwmod	;wreg free
 17158  0024CC  5001               	movf	?___lwmod,w,c
 17159  0024CE  1002               	iorwf	?___lwmod+1,w,c
 17160  0024D0  A4D8               	btfss	status,2,c
 17161  0024D2  D003               	goto	i2l1025
 17162                           
 17163                           ;tmr0.c: 157: {
 17164                           ;tmr0.c: 158: TimerKeepAliveFlag = 1;
 17165  0024D4  0E01               	movlw	1
 17166  0024D6  0100               	movlb	0	; () banked
 17167  0024D8  6FD6               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
 17168  0024DA                     i2l1025:
 17169                           
 17170                           ;tmr0.c: 159: }
 17171                           ;tmr0.c: 161: CountCallBack %= 300;
 17172                           
 17173                           ; BSR set to: 0
 17174  0024DA  C034  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 17175  0024DE  C035  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 17176  0024E2  0E01               	movlw	1
 17177  0024E4  6E04               	movwf	___lwmod@divisor+1,c
 17178  0024E6  0E2C               	movlw	44
 17179  0024E8  6E03               	movwf	___lwmod@divisor,c
 17180  0024EA  EC88  F018         	call	___lwmod	;wreg free
 17181  0024EE  C001  F034         	movff	?___lwmod,TMR0_ISR@CountCallBack	;volatile
 17182  0024F2  C002  F035         	movff	?___lwmod+1,TMR0_ISR@CountCallBack+1	;volatile
 17183  0024F6  0012               	return		;funcret
 17184  0024F8                     __end_of_TMR0_ISR:
 17185                           	opt stack 0
 17186                           tosu	equ	0xFFF
 17187                           tosh	equ	0xFFE
 17188                           tosl	equ	0xFFD
 17189                           pclatu	equ	0xFFB
 17190                           pclath	equ	0xFFA
 17191                           tblptru	equ	0xFF8
 17192                           tblptrh	equ	0xFF7
 17193                           tblptrl	equ	0xFF6
 17194                           tablat	equ	0xFF5
 17195                           prodh	equ	0xFF4
 17196                           prodl	equ	0xFF3
 17197                           intcon	equ	0xFF2
 17198                           intcon2	equ	0xFF1
 17199                           postinc0	equ	0xFEE
 17200                           fsr0h	equ	0xFEA
 17201                           fsr0l	equ	0xFE9
 17202                           wreg	equ	0xFE8
 17203                           indf1	equ	0xFE7
 17204                           postdec1	equ	0xFE5
 17205                           fsr1h	equ	0xFE2
 17206                           fsr1l	equ	0xFE1
 17207                           indf2	equ	0xFDF
 17208                           postinc2	equ	0xFDE
 17209                           postdec2	equ	0xFDD
 17210                           fsr2h	equ	0xFDA
 17211                           fsr2l	equ	0xFD9
 17212                           status	equ	0xFD8
 17213                           
 17214 ;; *************** function ___lwmod *****************
 17215 ;; Defined at:
 17216 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 17217 ;; Parameters:    Size  Location     Type
 17218 ;;  dividend        2    0[COMRAM] unsigned int 
 17219 ;;  divisor         2    2[COMRAM] unsigned int 
 17220 ;; Auto vars:     Size  Location     Type
 17221 ;;  counter         1    4[COMRAM] unsigned char 
 17222 ;; Return value:  Size  Location     Type
 17223 ;;                  2    0[COMRAM] unsigned int 
 17224 ;; Registers used:
 17225 ;;		wreg, status,2, status,0
 17226 ;; Tracked objects:
 17227 ;;		On entry : 0/0
 17228 ;;		On exit  : 0/0
 17229 ;;		Unchanged: 0/0
 17230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17231 ;;      Params:         4       0       0       0       0       0       0
 17232 ;;      Locals:         1       0       0       0       0       0       0
 17233 ;;      Temps:          0       0       0       0       0       0       0
 17234 ;;      Totals:         5       0       0       0       0       0       0
 17235 ;;Total ram usage:        5 bytes
 17236 ;; Hardware stack levels used:    1
 17237 ;; This function calls:
 17238 ;;		Nothing
 17239 ;; This function is called by:
 17240 ;;		_TMR0_ISR
 17241 ;; This function uses a non-reentrant model
 17242 ;;
 17243                           
 17244                           	psect	text114
 17245  003110                     __ptext114:
 17246                           	opt stack 0
 17247  003110                     ___lwmod:
 17248                           	opt stack 20
 17249                           
 17250                           ;incstack = 0
 17251  003110  5003               	movf	___lwmod@divisor,w,c
 17252  003112  1004               	iorwf	___lwmod@divisor+1,w,c
 17253  003114  B4D8               	btfsc	status,2,c
 17254  003116  D018               	goto	i2l1878
 17255  003118  0E01               	movlw	1
 17256  00311A  6E05               	movwf	___lwmod@counter,c
 17257  00311C  D004               	goto	i2l1873
 17258  00311E  90D8               	bcf	status,0,c
 17259  003120  3603               	rlcf	___lwmod@divisor,f,c
 17260  003122  3604               	rlcf	___lwmod@divisor+1,f,c
 17261  003124  2A05               	incf	___lwmod@counter,f,c
 17262  003126                     i2l1873:
 17263  003126  AE04               	btfss	___lwmod@divisor+1,7,c
 17264  003128  D7FA               	goto	i2l1874
 17265  00312A                     i2u518_40:
 17266  00312A  5003               	movf	___lwmod@divisor,w,c
 17267  00312C  5C01               	subwf	___lwmod@dividend,w,c
 17268  00312E  5004               	movf	___lwmod@divisor+1,w,c
 17269  003130  5802               	subwfb	___lwmod@dividend+1,w,c
 17270  003132  A0D8               	btfss	status,0,c
 17271  003134  D004               	goto	i2l1877
 17272  003136  5003               	movf	___lwmod@divisor,w,c
 17273  003138  5E01               	subwf	___lwmod@dividend,f,c
 17274  00313A  5004               	movf	___lwmod@divisor+1,w,c
 17275  00313C  5A02               	subwfb	___lwmod@dividend+1,f,c
 17276  00313E                     i2l1877:
 17277  00313E  90D8               	bcf	status,0,c
 17278  003140  3204               	rrcf	___lwmod@divisor+1,f,c
 17279  003142  3203               	rrcf	___lwmod@divisor,f,c
 17280  003144  2E05               	decfsz	___lwmod@counter,f,c
 17281  003146  D7F1               	goto	i2u518_40
 17282  003148                     i2l1878:
 17283  003148  C001  F001         	movff	___lwmod@dividend,?___lwmod
 17284  00314C  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
 17285  003150  0012               	return		;funcret
 17286  003152                     __end_of___lwmod:
 17287                           	opt stack 0
 17288                           tosu	equ	0xFFF
 17289                           tosh	equ	0xFFE
 17290                           tosl	equ	0xFFD
 17291                           pclatu	equ	0xFFB
 17292                           pclath	equ	0xFFA
 17293                           tblptru	equ	0xFF8
 17294                           tblptrh	equ	0xFF7
 17295                           tblptrl	equ	0xFF6
 17296                           tablat	equ	0xFF5
 17297                           prodh	equ	0xFF4
 17298                           prodl	equ	0xFF3
 17299                           intcon	equ	0xFF2
 17300                           intcon2	equ	0xFF1
 17301                           postinc0	equ	0xFEE
 17302                           fsr0h	equ	0xFEA
 17303                           fsr0l	equ	0xFE9
 17304                           wreg	equ	0xFE8
 17305                           indf1	equ	0xFE7
 17306                           postdec1	equ	0xFE5
 17307                           fsr1h	equ	0xFE2
 17308                           fsr1l	equ	0xFE1
 17309                           indf2	equ	0xFDF
 17310                           postinc2	equ	0xFDE
 17311                           postdec2	equ	0xFDD
 17312                           fsr2h	equ	0xFDA
 17313                           fsr2l	equ	0xFD9
 17314                           status	equ	0xFD8
 17315                           
 17316 ;; *************** function _PIN_MANAGER_IOC *****************
 17317 ;; Defined at:
 17318 ;;		line 96 in file "mcc_generated_files/pin_manager.c"
 17319 ;; Parameters:    Size  Location     Type
 17320 ;;		None
 17321 ;; Auto vars:     Size  Location     Type
 17322 ;;		None
 17323 ;; Return value:  Size  Location     Type
 17324 ;;                  1    wreg      void 
 17325 ;; Registers used:
 17326 ;;		None
 17327 ;; Tracked objects:
 17328 ;;		On entry : 0/0
 17329 ;;		On exit  : 0/0
 17330 ;;		Unchanged: 0/0
 17331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17332 ;;      Params:         0       0       0       0       0       0       0
 17333 ;;      Locals:         0       0       0       0       0       0       0
 17334 ;;      Temps:          0       0       0       0       0       0       0
 17335 ;;      Totals:         0       0       0       0       0       0       0
 17336 ;;Total ram usage:        0 bytes
 17337 ;; Hardware stack levels used:    1
 17338 ;; This function calls:
 17339 ;;		Nothing
 17340 ;; This function is called by:
 17341 ;;		_INTERRUPT_InterruptManager
 17342 ;; This function uses a non-reentrant model
 17343 ;;
 17344                           
 17345                           	psect	text115
 17346  003830                     __ptext115:
 17347                           	opt stack 0
 17348  003830                     _PIN_MANAGER_IOC:
 17349                           	opt stack 21
 17350                           
 17351                           ;pin_manager.c: 100: INTCONbits.RBIF = 0;
 17352                           
 17353                           ;incstack = 0
 17354  003830  90F2               	bcf	intcon,0,c	;volatile
 17355  003832  0012               	return		;funcret
 17356  003834                     __end_of_PIN_MANAGER_IOC:
 17357                           	opt stack 0
 17358                           tosu	equ	0xFFF
 17359                           tosh	equ	0xFFE
 17360                           tosl	equ	0xFFD
 17361                           pclatu	equ	0xFFB
 17362                           pclath	equ	0xFFA
 17363                           tblptru	equ	0xFF8
 17364                           tblptrh	equ	0xFF7
 17365                           tblptrl	equ	0xFF6
 17366                           tablat	equ	0xFF5
 17367                           prodh	equ	0xFF4
 17368                           prodl	equ	0xFF3
 17369                           intcon	equ	0xFF2
 17370                           intcon2	equ	0xFF1
 17371                           postinc0	equ	0xFEE
 17372                           fsr0h	equ	0xFEA
 17373                           fsr0l	equ	0xFE9
 17374                           wreg	equ	0xFE8
 17375                           indf1	equ	0xFE7
 17376                           postdec1	equ	0xFE5
 17377                           fsr1h	equ	0xFE2
 17378                           fsr1l	equ	0xFE1
 17379                           indf2	equ	0xFDF
 17380                           postinc2	equ	0xFDE
 17381                           postdec2	equ	0xFDD
 17382                           fsr2h	equ	0xFDA
 17383                           fsr2l	equ	0xFD9
 17384                           status	equ	0xFD8
 17385                           
 17386 ;; *************** function _MEMORY_ISR *****************
 17387 ;; Defined at:
 17388 ;;		line 206 in file "mcc_generated_files/memory.c"
 17389 ;; Parameters:    Size  Location     Type
 17390 ;;		None
 17391 ;; Auto vars:     Size  Location     Type
 17392 ;;		None
 17393 ;; Return value:  Size  Location     Type
 17394 ;;                  1    wreg      void 
 17395 ;; Registers used:
 17396 ;;		None
 17397 ;; Tracked objects:
 17398 ;;		On entry : 0/0
 17399 ;;		On exit  : 0/0
 17400 ;;		Unchanged: 0/0
 17401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17402 ;;      Params:         0       0       0       0       0       0       0
 17403 ;;      Locals:         0       0       0       0       0       0       0
 17404 ;;      Temps:          0       0       0       0       0       0       0
 17405 ;;      Totals:         0       0       0       0       0       0       0
 17406 ;;Total ram usage:        0 bytes
 17407 ;; Hardware stack levels used:    1
 17408 ;; This function calls:
 17409 ;;		Nothing
 17410 ;; This function is called by:
 17411 ;;		_INTERRUPT_InterruptManager
 17412 ;; This function uses a non-reentrant model
 17413 ;;
 17414                           
 17415                           	psect	text116
 17416  003834                     __ptext116:
 17417                           	opt stack 0
 17418  003834                     _MEMORY_ISR:
 17419                           	opt stack 21
 17420                           
 17421                           ;memory.c: 209: PIR2bits.EEIF = 0;
 17422                           
 17423                           ;incstack = 0
 17424  003834  98A1               	bcf	4001,4,c	;volatile
 17425  003836  0012               	return		;funcret
 17426  003838                     __end_of_MEMORY_ISR:
 17427                           	opt stack 0
 17428                           tosu	equ	0xFFF
 17429                           tosh	equ	0xFFE
 17430                           tosl	equ	0xFFD
 17431                           pclatu	equ	0xFFB
 17432                           pclath	equ	0xFFA
 17433                           tblptru	equ	0xFF8
 17434                           tblptrh	equ	0xFF7
 17435                           tblptrl	equ	0xFF6
 17436                           tablat	equ	0xFF5
 17437                           prodh	equ	0xFF4
 17438                           prodl	equ	0xFF3
 17439                           intcon	equ	0xFF2
 17440                           intcon2	equ	0xFF1
 17441                           postinc0	equ	0xFEE
 17442                           fsr0h	equ	0xFEA
 17443                           fsr0l	equ	0xFE9
 17444                           wreg	equ	0xFE8
 17445                           indf1	equ	0xFE7
 17446                           postdec1	equ	0xFE5
 17447                           fsr1h	equ	0xFE2
 17448                           fsr1l	equ	0xFE1
 17449                           indf2	equ	0xFDF
 17450                           postinc2	equ	0xFDE
 17451                           postdec2	equ	0xFDD
 17452                           fsr2h	equ	0xFDA
 17453                           fsr2l	equ	0xFD9
 17454                           status	equ	0xFD8
 17455                           
 17456 ;; *************** function _EUSART1_Transmit_ISR *****************
 17457 ;; Defined at:
 17458 ;;		line 181 in file "mcc_generated_files/eusart1.c"
 17459 ;; Parameters:    Size  Location     Type
 17460 ;;		None
 17461 ;; Auto vars:     Size  Location     Type
 17462 ;;		None
 17463 ;; Return value:  Size  Location     Type
 17464 ;;                  1    wreg      void 
 17465 ;; Registers used:
 17466 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17467 ;; Tracked objects:
 17468 ;;		On entry : 0/0
 17469 ;;		On exit  : 0/0
 17470 ;;		Unchanged: 0/0
 17471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17472 ;;      Params:         0       0       0       0       0       0       0
 17473 ;;      Locals:         0       0       0       0       0       0       0
 17474 ;;      Temps:          0       0       0       0       0       0       0
 17475 ;;      Totals:         0       0       0       0       0       0       0
 17476 ;;Total ram usage:        0 bytes
 17477 ;; Hardware stack levels used:    1
 17478 ;; This function calls:
 17479 ;;		Nothing
 17480 ;; This function is called by:
 17481 ;;		_INTERRUPT_InterruptManager
 17482 ;; This function uses a non-reentrant model
 17483 ;;
 17484                           
 17485                           	psect	text117
 17486  003276                     __ptext117:
 17487                           	opt stack 0
 17488  003276                     _EUSART1_Transmit_ISR:
 17489                           	opt stack 21
 17490                           
 17491                           ;eusart1.c: 185: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 17492                           
 17493                           ;incstack = 0
 17494  003276  0E46               	movlw	70
 17495  003278  0100               	movlb	0	; () banked
 17496  00327A  61FF               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 17497  00327C  D012               	goto	i2l863
 17498                           
 17499                           ; BSR set to: 0
 17500                           ;eusart1.c: 186: {
 17501                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 17502  00327E  5038               	movf	_eusart1TxTail,w,c	;volatile
 17503  003280  0D01               	mullw	1
 17504  003282  0E00               	movlw	low _eusart1TxBuffer
 17505  003284  24F3               	addwf	prodl,w,c
 17506  003286  6ED9               	movwf	fsr2l,c
 17507  003288  0E01               	movlw	high _eusart1TxBuffer
 17508  00328A  20F4               	addwfc	prodh,w,c
 17509  00328C  6EDA               	movwf	fsr2h,c
 17510  00328E  50DF               	movf	indf2,w,c
 17511  003290  6EAD               	movwf	4013,c	;volatile
 17512                           
 17513                           ; BSR set to: 0
 17514  003292  2A38               	incf	_eusart1TxTail,f,c	;volatile
 17515                           
 17516                           ; BSR set to: 0
 17517                           ;eusart1.c: 188: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 17518  003294  0E45               	movlw	69
 17519  003296  6438               	cpfsgt	_eusart1TxTail,c	;volatile
 17520  003298  D002               	goto	i2l864
 17521                           
 17522                           ; BSR set to: 0
 17523                           ;eusart1.c: 189: {
 17524                           ;eusart1.c: 190: eusart1TxTail = 0;
 17525  00329A  0E00               	movlw	0
 17526  00329C  6E38               	movwf	_eusart1TxTail,c	;volatile
 17527  00329E                     i2l864:
 17528                           
 17529                           ; BSR set to: 0
 17530                           ;eusart1.c: 191: }
 17531                           ;eusart1.c: 192: eusart1TxBufferRemaining++;
 17532                           
 17533                           ; BSR set to: 0
 17534  00329E  2BFF               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 17535                           
 17536                           ;eusart1.c: 193: }
 17537  0032A0  0012               	return	
 17538  0032A2                     i2l863:
 17539                           
 17540                           ; BSR set to: 0
 17541                           ;eusart1.c: 194: else
 17542                           ;eusart1.c: 195: {
 17543                           ;eusart1.c: 196: PIE1bits.TX1IE = 0;
 17544  0032A2  989D               	bcf	3997,4,c	;volatile
 17545                           
 17546                           ; BSR set to: 0
 17547                           ;eusart1.c: 197: eusart1TxTail = 0;
 17548  0032A4  0E00               	movlw	0
 17549  0032A6  6E38               	movwf	_eusart1TxTail,c	;volatile
 17550                           
 17551                           ;eusart1.c: 198: eusart1TxHead = 0;
 17552  0032A8  0E00               	movlw	0
 17553  0032AA  6E39               	movwf	_eusart1TxHead,c	;volatile
 17554  0032AC  0012               	return	
 17555  0032AE                     __end_of_EUSART1_Transmit_ISR:
 17556                           	opt stack 0
 17557                           tosu	equ	0xFFF
 17558                           tosh	equ	0xFFE
 17559                           tosl	equ	0xFFD
 17560                           pclatu	equ	0xFFB
 17561                           pclath	equ	0xFFA
 17562                           tblptru	equ	0xFF8
 17563                           tblptrh	equ	0xFF7
 17564                           tblptrl	equ	0xFF6
 17565                           tablat	equ	0xFF5
 17566                           prodh	equ	0xFF4
 17567                           prodl	equ	0xFF3
 17568                           intcon	equ	0xFF2
 17569                           intcon2	equ	0xFF1
 17570                           postinc0	equ	0xFEE
 17571                           fsr0h	equ	0xFEA
 17572                           fsr0l	equ	0xFE9
 17573                           wreg	equ	0xFE8
 17574                           indf1	equ	0xFE7
 17575                           postdec1	equ	0xFE5
 17576                           fsr1h	equ	0xFE2
 17577                           fsr1l	equ	0xFE1
 17578                           indf2	equ	0xFDF
 17579                           postinc2	equ	0xFDE
 17580                           postdec2	equ	0xFDD
 17581                           fsr2h	equ	0xFDA
 17582                           fsr2l	equ	0xFD9
 17583                           status	equ	0xFD8
 17584                           
 17585 ;; *************** function _EUSART1_Receive_ISR *****************
 17586 ;; Defined at:
 17587 ;;		line 202 in file "mcc_generated_files/eusart1.c"
 17588 ;; Parameters:    Size  Location     Type
 17589 ;;		None
 17590 ;; Auto vars:     Size  Location     Type
 17591 ;;		None
 17592 ;; Return value:  Size  Location     Type
 17593 ;;                  1    wreg      void 
 17594 ;; Registers used:
 17595 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17596 ;; Tracked objects:
 17597 ;;		On entry : 0/0
 17598 ;;		On exit  : 0/0
 17599 ;;		Unchanged: 0/0
 17600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17601 ;;      Params:         0       0       0       0       0       0       0
 17602 ;;      Locals:         0       0       0       0       0       0       0
 17603 ;;      Temps:          0       0       0       0       0       0       0
 17604 ;;      Totals:         0       0       0       0       0       0       0
 17605 ;;Total ram usage:        0 bytes
 17606 ;; Hardware stack levels used:    1
 17607 ;; This function calls:
 17608 ;;		Nothing
 17609 ;; This function is called by:
 17610 ;;		_INTERRUPT_InterruptManager
 17611 ;; This function uses a non-reentrant model
 17612 ;;
 17613                           
 17614                           	psect	text118
 17615  003478                     __ptext118:
 17616                           	opt stack 0
 17617  003478                     _EUSART1_Receive_ISR:
 17618                           	opt stack 21
 17619                           
 17620                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
 17621                           
 17622                           ; BSR set to: 0
 17623                           ;incstack = 0
 17624  003478  A2AB               	btfss	4011,1,c	;volatile
 17625  00347A  D002               	goto	i2l869
 17626                           
 17627                           ;eusart1.c: 206: {
 17628                           ;eusart1.c: 208: RCSTA1bits.CREN = 0;
 17629  00347C  98AB               	bcf	4011,4,c	;volatile
 17630                           
 17631                           ;eusart1.c: 209: RCSTA1bits.CREN = 1;
 17632  00347E  88AB               	bsf	4011,4,c	;volatile
 17633  003480                     i2l869:
 17634                           
 17635                           ;eusart1.c: 210: }
 17636                           ;eusart1.c: 215: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 17637  003480  5037               	movf	_eusart1RxHead,w,c	;volatile
 17638  003482  0D01               	mullw	1
 17639  003484  0E46               	movlw	low _eusart1RxBuffer
 17640  003486  24F3               	addwf	prodl,w,c
 17641  003488  6ED9               	movwf	fsr2l,c
 17642  00348A  0E01               	movlw	high _eusart1RxBuffer
 17643  00348C  20F4               	addwfc	prodh,w,c
 17644  00348E  6EDA               	movwf	fsr2h,c
 17645  003490  CFAE FFDF          	movff	4014,indf2	;volatile
 17646  003494  2A37               	incf	_eusart1RxHead,f,c	;volatile
 17647                           
 17648                           ;eusart1.c: 216: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 17649  003496  0E27               	movlw	39
 17650  003498  6437               	cpfsgt	_eusart1RxHead,c	;volatile
 17651  00349A  D002               	goto	i2l870
 17652                           
 17653                           ;eusart1.c: 217: {
 17654                           ;eusart1.c: 218: eusart1RxHead = 0;
 17655  00349C  0E00               	movlw	0
 17656  00349E  6E37               	movwf	_eusart1RxHead,c	;volatile
 17657  0034A0                     i2l870:
 17658                           
 17659                           ;eusart1.c: 219: }
 17660                           ;eusart1.c: 220: eusart1RxCount++;
 17661  0034A0  0100               	movlb	0	; () banked
 17662  0034A2  2BD3               	incf	_eusart1RxCount& (0+255),f,b	;volatile
 17663                           
 17664                           ; BSR set to: 0
 17665  0034A4  0012               	return		;funcret
 17666  0034A6                     __end_of_EUSART1_Receive_ISR:
 17667                           	opt stack 0
 17668                           tosu	equ	0xFFF
 17669                           tosh	equ	0xFFE
 17670                           tosl	equ	0xFFD
 17671                           pclatu	equ	0xFFB
 17672                           pclath	equ	0xFFA
 17673                           tblptru	equ	0xFF8
 17674                           tblptrh	equ	0xFF7
 17675                           tblptrl	equ	0xFF6
 17676                           tablat	equ	0xFF5
 17677                           prodh	equ	0xFF4
 17678                           prodl	equ	0xFF3
 17679                           intcon	equ	0xFF2
 17680                           intcon2	equ	0xFF1
 17681                           postinc0	equ	0xFEE
 17682                           fsr0h	equ	0xFEA
 17683                           fsr0l	equ	0xFE9
 17684                           wreg	equ	0xFE8
 17685                           indf1	equ	0xFE7
 17686                           postdec1	equ	0xFE5
 17687                           fsr1h	equ	0xFE2
 17688                           fsr1l	equ	0xFE1
 17689                           indf2	equ	0xFDF
 17690                           postinc2	equ	0xFDE
 17691                           postdec2	equ	0xFDD
 17692                           fsr2h	equ	0xFDA
 17693                           fsr2l	equ	0xFD9
 17694                           status	equ	0xFD8
 17695                           tosu	equ	0xFFF
 17696                           tosh	equ	0xFFE
 17697                           tosl	equ	0xFFD
 17698                           pclatu	equ	0xFFB
 17699                           pclath	equ	0xFFA
 17700                           tblptru	equ	0xFF8
 17701                           tblptrh	equ	0xFF7
 17702                           tblptrl	equ	0xFF6
 17703                           tablat	equ	0xFF5
 17704                           prodh	equ	0xFF4
 17705                           prodl	equ	0xFF3
 17706                           intcon	equ	0xFF2
 17707                           intcon2	equ	0xFF1
 17708                           postinc0	equ	0xFEE
 17709                           fsr0h	equ	0xFEA
 17710                           fsr0l	equ	0xFE9
 17711                           wreg	equ	0xFE8
 17712                           indf1	equ	0xFE7
 17713                           postdec1	equ	0xFE5
 17714                           fsr1h	equ	0xFE2
 17715                           fsr1l	equ	0xFE1
 17716                           indf2	equ	0xFDF
 17717                           postinc2	equ	0xFDE
 17718                           postdec2	equ	0xFDD
 17719                           fsr2h	equ	0xFDA
 17720                           fsr2l	equ	0xFD9
 17721                           status	equ	0xFD8
 17722                           
 17723                           	psect	text119
 17724  000000                     __ptext119:
 17725                           	opt stack 0
 17726                           tosu	equ	0xFFF
 17727                           tosh	equ	0xFFE
 17728                           tosl	equ	0xFFD
 17729                           pclatu	equ	0xFFB
 17730                           pclath	equ	0xFFA
 17731                           tblptru	equ	0xFF8
 17732                           tblptrh	equ	0xFF7
 17733                           tblptrl	equ	0xFF6
 17734                           tablat	equ	0xFF5
 17735                           prodh	equ	0xFF4
 17736                           prodl	equ	0xFF3
 17737                           intcon	equ	0xFF2
 17738                           intcon2	equ	0xFF1
 17739                           postinc0	equ	0xFEE
 17740                           fsr0h	equ	0xFEA
 17741                           fsr0l	equ	0xFE9
 17742                           wreg	equ	0xFE8
 17743                           indf1	equ	0xFE7
 17744                           postdec1	equ	0xFE5
 17745                           fsr1h	equ	0xFE2
 17746                           fsr1l	equ	0xFE1
 17747                           indf2	equ	0xFDF
 17748                           postinc2	equ	0xFDE
 17749                           postdec2	equ	0xFDD
 17750                           fsr2h	equ	0xFDA
 17751                           fsr2l	equ	0xFD9
 17752                           status	equ	0xFD8
 17753                           
 17754                           	psect	rparam
 17755  0000                     tosu	equ	0xFFF
 17756                           tosh	equ	0xFFE
 17757                           tosl	equ	0xFFD
 17758                           pclatu	equ	0xFFB
 17759                           pclath	equ	0xFFA
 17760                           tblptru	equ	0xFF8
 17761                           tblptrh	equ	0xFF7
 17762                           tblptrl	equ	0xFF6
 17763                           tablat	equ	0xFF5
 17764                           prodh	equ	0xFF4
 17765                           prodl	equ	0xFF3
 17766                           intcon	equ	0xFF2
 17767                           intcon2	equ	0xFF1
 17768                           postinc0	equ	0xFEE
 17769                           fsr0h	equ	0xFEA
 17770                           fsr0l	equ	0xFE9
 17771                           wreg	equ	0xFE8
 17772                           indf1	equ	0xFE7
 17773                           postdec1	equ	0xFE5
 17774                           fsr1h	equ	0xFE2
 17775                           fsr1l	equ	0xFE1
 17776                           indf2	equ	0xFDF
 17777                           postinc2	equ	0xFDE
 17778                           postdec2	equ	0xFDD
 17779                           fsr2h	equ	0xFDA
 17780                           fsr2l	equ	0xFD9
 17781                           status	equ	0xFD8
 17782                           
 17783                           	psect	temp
 17784  000048                     btemp:
 17785                           	opt stack 0
 17786  000048                     	ds	1
 17787  0000                     int$flags	set	btemp
 17788  0000                     wtemp6	set	btemp+1
 17789                           tosu	equ	0xFFF
 17790                           tosh	equ	0xFFE
 17791                           tosl	equ	0xFFD
 17792                           pclatu	equ	0xFFB
 17793                           pclath	equ	0xFFA
 17794                           tblptru	equ	0xFF8
 17795                           tblptrh	equ	0xFF7
 17796                           tblptrl	equ	0xFF6
 17797                           tablat	equ	0xFF5
 17798                           prodh	equ	0xFF4
 17799                           prodl	equ	0xFF3
 17800                           intcon	equ	0xFF2
 17801                           intcon2	equ	0xFF1
 17802                           postinc0	equ	0xFEE
 17803                           fsr0h	equ	0xFEA
 17804                           fsr0l	equ	0xFE9
 17805                           wreg	equ	0xFE8
 17806                           indf1	equ	0xFE7
 17807                           postdec1	equ	0xFE5
 17808                           fsr1h	equ	0xFE2
 17809                           fsr1l	equ	0xFE1
 17810                           indf2	equ	0xFDF
 17811                           postinc2	equ	0xFDE
 17812                           postdec2	equ	0xFDD
 17813                           fsr2h	equ	0xFDA
 17814                           fsr2l	equ	0xFD9
 17815                           status	equ	0xFD8


Data Sizes:
    Strings     21
    Constant    132
    Data        21
    BSS         255
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     47      71
    BANK0           160     97     160
    BANK1           256      9     203
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    PLLUartInitialize@data	PTR unsigned char  size(2) Largest target is 0

    SetConversionResultFormat@data	PTR unsigned char  size(2) Largest target is 0

    SetAdcOperationMode@data	PTR unsigned char  size(2) Largest target is 0

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    strtol@endptr	PTR PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strtol@s	PTR const unsigned char  size(2) Largest target is 9
		 -> GetIntFromUartData@dataRegArr(BANK0[9]), 

    memset@p1	PTR void  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[9]), GetIntFromUartData@dataRegArr(BANK0[9]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK0[27]), 
		 -> FlashReadCondition@TxMsg(BANK0[9]), FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), 
		 -> rxMsgData(BANK1[20]), rxMsgQueue(BANK0[20]), 

    memset@p	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[9]), GetIntFromUartData@dataRegArr(BANK0[9]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK0[27]), 
		 -> FlashReadCondition@TxMsg(BANK0[9]), FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), 
		 -> rxMsgData(BANK1[20]), rxMsgQueue(BANK0[20]), 

    Make32bitsArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> SWSPI_Synth_send_bits@bitArray(BANK0[32]), 

    GetIntFromUartData@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    ZeroBitsArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> SWSPI_Synth_send_bits@bitArray(BANK0[32]), 

    sp__memset	PTR void  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[9]), GetIntFromUartData@dataRegArr(BANK0[9]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK0[27]), 
		 -> FlashReadCondition@TxMsg(BANK0[9]), FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), 
		 -> rxMsgData(BANK1[20]), rxMsgQueue(BANK0[20]), 

    ZeroArray@array	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[9]), GetIntFromUartData@dataRegArr(BANK0[9]), SynthReadData@TxMsg(BANK0[27]), FlashReadCondition@TxMsg(BANK0[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), 
		 -> rxMsgQueue(BANK0[20]), 

    crc8@dataArray	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetMcuFwVersion@TxMsg(BANK0[9]), SynthReadData@TxMsg(BANK0[27]), FlashReadCondition@TxMsg(BANK0[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgQueue(BANK0[20]), 

    GroupDAC@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    FLASH_WriteBlock@flashWrBufPtr	PTR unsigned char  size(2) Largest target is 128
		 -> FlashTest@buff(BANK0[128]), sampleArray(BANK1[64]), 

    SynthReadData@data	PTR unsigned char  size(2) Largest target is 0

    UpdateRxFreq@data	PTR unsigned char  size(2) Largest target is 0

    UpdateTxFreq@data	PTR unsigned char  size(2) Largest target is 0

    DacSetValue@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    WriteUartMessage@dataBuf	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetMcuFwVersion@TxMsg(BANK0[9]), SynthReadData@TxMsg(BANK0[27]), FlashReadCondition@TxMsg(BANK0[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), SendAckMessage@TxMsg(COMRAM[6]), 

    SetChannelMode@data	PTR unsigned char  size(2) Largest target is 0

    groupsArray	PTR FTN()void [6] size(2) Largest target is 1
		 -> GroupDAC(), GroupFlashMemory(), GroupSynthesizers(), GroupAdc(), 
		 -> GroupStatusAndVersion(), GroupControlMcu(), 


Critical Paths under _main in COMRAM

    _InitRxMessageParams->_ZeroArray
    _UpdateTxFreq->_SWSPI_send_word
    _UpdateRxFreq->_SWSPI_send_word
    _SynthReadData->_ZeroArray
    _SetSynthTxOper->_InitTxSynth
    _SetSynthRxOper->_SendAckMessage
    _GetMcuRunTime->___lldiv
    _GetMcuFwVersion->_ZeroArray
    _FlashReadUart->_SendAckMessage
    _FlashReadCondition->_ZeroArray
    _FlashEreaseMem->_SendAckMessage
    _DacSetValue->_SWSPI_send_word
    _StoreIntInEeprom->_make8
    _EepromWrite->_DATAEE_WriteByte
    _GetIntFromUartData->_strtol
    _strtol->___lmul
    _isalpha->_isupper
    _testLeds->_SendAckMessage
    _ResetMcu->_SendAckMessage
    _SetConversionResultFormat->_SendAckMessage
    _SetChannelMode->_SendAckMessage
    _SetAdcOperationMode->_SendAckMessage
    _keepAliveSignalUart->_SendAckMessage
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _SetMcuRunTime->___llmod
    _SendSystemStartAck->_SendAckMessage
    _SendAckMessage->_ZeroArray
    _ZeroArray->_memset
    _WriteUartMessage->_EUSART1_Write
    _PLLInitialize->_InitRxSynth
    _PLLInitialize->_InitTxSynth
    _InitTxSynth->_SWSPI_send_word
    _InitRxSynth->_SWSPI_send_word
    _DacInit->_SWSPI_send_word
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _SWSPI_Synth_send_bits->_Make32bitsArray
    _SWSPI_Synth_send_bits->_ZeroBitsArray
    _ZeroBitsArray->_memset
    _SWSPI_DAC_send_bits->_SwSpi_Clk_Pin
    _SWSPI_DAC_send_bits->_SwSpi_Data_Pin
    _ReadIntFromEeprom->_EepromRead
    _EepromRead->_DATAEE_ReadByte
    _CheckFlashPrecentage->___ftdiv
    _AdcConvert->_FlashSampleWrite
    _exp->___ftdiv
    ___fttol->___ftdiv
    ___ftmul->___ftdiv
    ___ftdiv->___lltoft
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lwtoft->___ftpack
    _FlashSampleWrite->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_ISR->___lwmod

Critical Paths under _main in BANK0

    _readUartMessage->_GroupFlashMemory
    _GroupFlashMemory->_FlashReadUart
    _GetIntFromUartData->_strtol
    _InitSystemApplicationManagers->_DacInit
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _CheckFlashPrecentage->___ftmul
    _AdcConvert->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___ftdiv
    ___ftsub->___ftadd
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_readUartMessage
    _readUartMessage->_GroupAdc
    _readUartMessage->_GroupControlMcu
    _readUartMessage->_GroupDAC
    _readUartMessage->_GroupFlashMemory
    _readUartMessage->_GroupStatusAndVersion
    _readUartMessage->_GroupSynthesizers

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  328460
                         _AdcConvert
                     _BlinkErrorLeds
                        _BlinkOkLeds
               _CheckFlashPrecentage
      _InitSystemApplicationManagers
                 _SendSystemStartAck
                      _SetMcuRunTime
                       _SetMcuSystem
                 _keepAliveSignalLed
                _keepAliveSignalUart
                    _readUartMessage
 ---------------------------------------------------------------------------------
 (1) _readUartMessage                                      7     7      0  173981
                                              2 BANK1      7     7      0
                       _EUSART1_Read
                           _GroupAdc *
                    _GroupControlMcu *
                           _GroupDAC *
                   _GroupFlashMemory *
              _GroupStatusAndVersion *
                  _GroupSynthesizers *
                _InitRxMessageParams
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _InitRxMessageParams                                  0     0      0    2359
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupSynthesizers                                    3     1      2   70965
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                  _PLLUartInitialize
                     _SetSynthRxOper
                     _SetSynthTxOper
                      _SynthReadData
                       _UpdateRxFreq
                       _UpdateTxFreq
 ---------------------------------------------------------------------------------
 (3) _UpdateTxFreq                                         8     6      2   20932
                                             38 BANK0      8     6      2
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _UpdateRxFreq                                         6     4      2   20932
                                             38 BANK0      6     4      2
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _SynthReadData                                       30    28      2    5599
                                             35 COMRAM     2     0      2
                                              0 BANK0     28    28      0
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (3) _SetSynthTxOper                                       0     0      0   16376
                        _InitTxSynth
                     _SendAckMessage
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (3) _SetSynthRxOper                                       0     0      0    6729
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _PLLUartInitialize                                    2     0      2     180
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _GroupStatusAndVersion                                4     1      3    9767
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                    _GetMcuFwVersion
                      _GetMcuRunTime
 ---------------------------------------------------------------------------------
 (3) _GetMcuRunTime                                       17    17      0    4138
                                             36 COMRAM     2     2      0
                                              0 BANK0     15    15      0
                   _WriteUartMessage
                            ___lldiv
                            ___llmod
                               _crc8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     421
                                             23 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _GetMcuFwVersion                                     13    13      0    5598
                                              0 BANK0     13    13      0
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _GroupFlashMemory                                     4     2      2   29318
                                             95 BANK0      2     2      0
                                              0 BANK1      2     0      2
                     _FlashEreaseMem
                 _FlashReadCondition
                      _FlashReadUart
 ---------------------------------------------------------------------------------
 (3) _FlashReadUart                                       97    95      2   13468
                                             43 COMRAM     2     0      2
                                              0 BANK0     95    95      0
                  _FLASH_IsWriteDone
                     _FLASH_ReadByte
                     _SendAckMessage
                   _WriteUartMessage
                          _ZeroArray
                                _abs
                               _crc8
 ---------------------------------------------------------------------------------
 (4) _abs                                                  4     2      2     183
                                             23 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _FLASH_ReadByte                                       4     0      4     543
                                             23 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _FlashReadCondition                                  13    13      0    6700
                                             35 COMRAM     4     4      0
                                              0 BANK0      9     9      0
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (3) _FlashEreaseMem                                       0     0      0    9088
                     _SendAckMessage
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupDAC                                             3     1      2   23314
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                        _DacSetValue
 ---------------------------------------------------------------------------------
 (3) _DacSetValue                                          8     6      2   23187
                                             38 BANK0      8     6      2
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (4) _StoreIntInEeprom                                     9     2      7    2159
                                             32 COMRAM     9     2      7
                        _EepromWrite
                              _make8
 ---------------------------------------------------------------------------------
 (5) _EepromWrite                                          2     1      1     428
                                             26 COMRAM     2     1      1
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (6) _DATAEE_WriteByte                                     3     2      1     276
                                             23 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (4) _GetIntFromUartData                                  21    17      4    5350
                                              6 BANK0     21    17      4
                          _ZeroArray
                             _strtol
 ---------------------------------------------------------------------------------
 (5) _strtol                                              16    10      6    2273
                                             35 COMRAM    10     4      6
                                              0 BANK0      6     6      0
                             ___lmul
                            _isalpha
                            _isdigit
                            _isspace
                            _toupper
 ---------------------------------------------------------------------------------
 (6) _toupper                                              1     1      0      96
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _isspace                                              3     3      0     130
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isalpha                                              3     3      0     229
                                             26 COMRAM     3     3      0
                            _isupper
 ---------------------------------------------------------------------------------
 (7) _isupper                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     456
                                             23 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) _GroupControlMcu                                      4     1      3   13557
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                           _ResetMcu
                           _testLeds
 ---------------------------------------------------------------------------------
 (3) _testLeds                                             3     3      0    6797
                                             43 COMRAM     3     3      0
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _ResetMcu                                             0     0      0    6729
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _GroupAdc                                             3     1      2   20643
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                _SetAdcOperationMode
                     _SetChannelMode
          _SetConversionResultFormat
 ---------------------------------------------------------------------------------
 (3) _SetConversionResultFormat                            2     0      2    6819
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _SetChannelMode                                       2     0      2    6881
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _SetAdcOperationMode                                  2     0      2    6819
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         3     3      0      68
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalUart                                  0     0      0    6729
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalLed                                   1     1      0       0
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SetMcuSystem                                         0     0      0      98
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0      98
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      2     2      0      98
                                             25 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _TMR0_SetInterruptHandler                             2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMcuRunTime                                        0     0      0     592
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     592
                                             23 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (1) _SendSystemStartAck                                   0     0      0    6729
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (4) _SendAckMessage                                       8     7      1    6729
                                             35 COMRAM     8     7      1
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _crc8                                                 9     5      4    1430
                                             23 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _ZeroArray                                            4     0      4    2359
                                             31 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (5) _WriteUartMessage                                     7     3      4    1272
                                             24 COMRAM     7     3      4
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (6) _EUSART1_Write                                        1     1      0      62
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitSystemApplicationManagers                        0     0      0   27651
                    _ClearMcuRunTime
                            _DacInit
              _InitAdcApplicationMgr
                      _PLLInitialize
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PLLInitialize                                        0     0      0   18444
                        _InitRxSynth
                        _InitTxSynth
 ---------------------------------------------------------------------------------
 (4) _InitTxSynth                                          1     1      0    9222
                                             46 COMRAM     1     1      0
                    _SWSPI_send_word
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (3) _InitRxSynth                                          1     1      0    9222
                                             46 COMRAM     1     1      0
                    _SWSPI_send_word
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (4) _SwSpi_Set_CE_Pin                                     2     1      1     425
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _InitAdcApplicationMgr                                1     1      0       1
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _DacInit                                              5     5      0    9206
                                             38 BANK0      5     5      0
                  _ReadIntFromEeprom
                    _SWSPI_send_word
 ---------------------------------------------------------------------------------
 (4) _SWSPI_send_word                                      9     4      5    8698
                                             37 COMRAM     9     4      5
                _SWSPI_DAC_send_bits
              _SWSPI_Synth_send_bits
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
                              _make8
 ---------------------------------------------------------------------------------
 (5) _make8                                                9     4      5    1235
                                             23 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Synth_Le_Pin                               2     1      1     335
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Dac_Sync_Pin                               1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _SWSPI_Synth_send_bits                               42    38      4    3353
                                             33 COMRAM     4     0      4
                                              0 BANK0     38    38      0
                    _Make32bitsArray
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
                      _ZeroBitsArray
 ---------------------------------------------------------------------------------
 (6) _ZeroBitsArray                                        2     0      2     798
                                             31 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     677
                                             23 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (6) _Make32bitsArray                                     10     4      6     344
                                             23 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (5) _SWSPI_DAC_send_bits                                  3     2      1    2041
                                             25 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Data_Pin                                       2     1      1     757
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Clk_Pin                                        2     1      1     937
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (3) _ReadIntFromEeprom                                   13     9      4     313
                                             25 COMRAM    13     9      4
                         _EepromRead
 ---------------------------------------------------------------------------------
 (4) _EepromRead                                           1     1      0      62
                                             24 COMRAM     1     1      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (5) _DATAEE_ReadByte                                      1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ClearMcuRunTime                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckFlashPrecentage                                 7     7      0   13919
                                             24 BANK0      7     7      0
                            ___ftdiv
                             ___ftge
                            ___ftmul
                           ___lltoft
 ---------------------------------------------------------------------------------
 (1) _BlinkOkLeds                                          6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _BlinkErrorLeds                                       6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _AdcConvert                                          12    12      0   98581
                                             83 BANK0     12    12      0
                  _ADC_GetConversion
                   _FlashSampleWrite
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 17    11      6   83041
                                             66 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  5     2      3   26919
                                             48 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                  9     6      3   44808
                                             57 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                                7     2      5     400
                                             48 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) _floor                                                8     5      3   11219
                                             49 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                7     2      5     528
                                             23 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             15    11      4     632
                                             24 BANK0     15    11      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     896
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (5) ___altoft                                            10     6      4    3367
                                             39 BANK0     10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           12     5      7   11976
                                             36 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     563
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    5281
                                              9 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    5754
                                             36 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    5338
                                             24 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     273
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    4353
                                             40 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    3386
                                             31 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    3355
                                             31 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3284
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    3073
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _FlashSampleWrite                                     7     4      3    1631
                                             44 COMRAM     3     0      3
                                              0 BANK0      4     4      0
                  _FLASH_IsWriteDone
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_WriteBlock                                    16    10      6    1172
                                             28 COMRAM    16    10      6
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     5     1      4     217
                                             23 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) _FLASH_IsWriteDone                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      22
                                             23 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                          18    18      0     767
                                              5 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                         _MEMORY_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR0_ISR                                            0     0      0     767
                            ___lwmod
 ---------------------------------------------------------------------------------
 (11) ___lwmod                                             5     1      4     767
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (10) _PIN_MANAGER_IOC                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _MEMORY_ISR                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART1_Receive_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcConvert
     _ADC_GetConversion
     _FlashSampleWrite
       _FLASH_IsWriteDone
       _FLASH_WriteBlock
         _FLASH_EraseBlock
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _frexp
   _BlinkErrorLeds
   _BlinkOkLeds
   _CheckFlashPrecentage
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___lltoft
       ___ftpack
   _InitSystemApplicationManagers
     _ClearMcuRunTime
     _DacInit
       _ReadIntFromEeprom
         _EepromRead
           _DATAEE_ReadByte
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _Make32bitsArray
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
           _ZeroBitsArray
             _memset
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
     _InitAdcApplicationMgr
     _PLLInitialize
       _InitRxSynth
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
             _ZeroBitsArray
               _memset
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SwSpi_Set_CE_Pin
       _InitTxSynth
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
             _ZeroBitsArray
               _memset
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SwSpi_Set_CE_Pin
     _TMR0_StartTimer
   _SendSystemStartAck
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _SetMcuRunTime
     ___llmod
   _SetMcuSystem
     _SYSTEM_Initialize
       _ADC_Initialize
       _EUSART1_Initialize
       _INTERRUPT_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
   _keepAliveSignalLed
   _keepAliveSignalUart
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _readUartMessage
     _EUSART1_Read
     _GroupAdc *
       _SetAdcOperationMode
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _SetChannelMode
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _SetConversionResultFormat
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupControlMcu *
       _ResetMcu
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _testLeds
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupDAC *
       _DacSetValue
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
             _ZeroBitsArray
               _memset
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _StoreIntInEeprom
           _EepromWrite
             _DATAEE_WriteByte
           _make8
     _GroupFlashMemory *
       _FlashEreaseMem
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _ZeroArray
           _memset
       _FlashReadCondition
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _FlashReadUart
         _FLASH_IsWriteDone
         _FLASH_ReadByte
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _abs
         _crc8
     _GroupStatusAndVersion *
       _GetMcuFwVersion
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
       _GetMcuRunTime
         _WriteUartMessage
           _EUSART1_Write
         ___lldiv
         ___llmod
         _crc8
     _GroupSynthesizers *
       _PLLUartInitialize
       _SetSynthRxOper
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _SetSynthTxOper
         _InitTxSynth
           _SWSPI_send_word
             _SWSPI_DAC_send_bits
               _SwSpi_Clk_Pin
               _SwSpi_Data_Pin
             _SWSPI_Synth_send_bits
               _Make32bitsArray
               _SwSpi_Clk_Pin
               _SwSpi_Data_Pin
               _ZeroBitsArray
                 _memset
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
             _make8
           _SwSpi_Set_CE_Pin
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _SwSpi_Set_CE_Pin
       _SynthReadData
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
       _UpdateRxFreq
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
             _ZeroBitsArray
               _memset
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _UpdateTxFreq
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
             _ZeroBitsArray
               _memset
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _InitRxMessageParams *
       _ZeroArray
         _memset
     _ZeroArray *
       _memset
     _crc8 *

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _MEMORY_ISR
   _PIN_MANAGER_IOC
   _TMR0_ISR
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      9      CB       8       79.3%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0     61      A0       6      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2F      47       1       75.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1B2       3        0.0%
DATA                 0      0     1B2       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Mar 15 17:42:26 2018

             __size_of_SendSystemStartAck 000C                         ??_GetMcuFwVersion 0024  
              __end_of_keepAliveSignalLed 36E8                              ___altoft@exp 008F  
                _eusart1TxBufferRemaining 00FF                        readUartMessage@idx 01C8  
                         _GroupControlMcu 33B8               __end_of_keepAliveSignalUart 37F8  
                           ___altoft@sign 0090                __size_of_FLASH_IsWriteDone 000E  
                                      l54 2896                  GetIntFromUartData@retVal 0074  
                     __end_of_BlinkOkLeds 2ACE                           _SWSPI_send_word 22A0  
                     ___wmul@multiplicand 001A                           _timer0ReloadVal 0046  
                            __CFG_CP0$OFF 000000                              __CFG_CP1$OFF 000000  
                            __CFG_CP2$OFF 000000                              __CFG_CP3$OFF 000000  
                            ___ftadd@exp1 0083                              ___ftadd@exp2 0082  
                            ___ftadd@sign 0081                               ?_MEMORY_ISR 0001  
                                     l120 1118                                       l121 103E  
                                     l201 0ABE                                       l210 0B22  
                                     l203 0AD6                                       l300 182A  
                                     l116 343C                                       l212 0B8C  
                                     l205 0AF4                                       l222 333A  
                                     l214 0BC4                                       l223 3324  
                                     l311 0774                                       l207 0AFA  
                                     l216 0BCA                                       l321 090C  
                                     l313 07E0                                       l209 0B66  
                                     l306 08B4                                       l314 08A2  
                                     l331 0A2C                                       l307 0818  
                                     l332 0A42                                       l324 0924  
                                     l316 0852                                       l421 244A  
                                     l325 0A48                                       l309 0764  
                                     l501 27FC                                       l422 2460  
                                     l326 0940                                       l318 0864  
                                     l190 0C24                                       l327 0958  
                                     l511 3402                                       l191 0A66  
                                     l512 340C                                       l329 09D6  
                                     l610 2D2A                                       l506 2DD8  
                                     l194 0A74                                       l611 2CEE  
                                     l603 203A                                       l195 0AA0  
                                     l620 2D02                                       l612 2CF8  
                                     l621 2D0C                                       l605 2068  
                                     l606 2074                                       l199 0AA6  
                                     l640 2D44                                       l641 2D4E  
                                     l650 2D62                                       l299 180C  
                                     l723 36A2                                       l707 31E2  
                                     l491 2EF0                                       l628 2D16  
                                     l708 31EC                                       l629 2D20  
                                     l718 36A6                                       l639 2D80  
                                     l719 369E                                       l496 2F3C  
                                     l657 2D6C                                       l649 2D58  
                                     l585 22DC                                       l658 2D76  
                                     l595 2C78                                       l596 2C44  
                                     l676 31BA                                       l844 305A  
                                     l597 2C5E                                       l589 2336  
                                     l677 3192                                       l598 2C68  
                                     l686 31A6                                       l678 319C  
                                     l846 3080                                       l687 31B0  
                                     l697 31F6                                       l857 3166  
                                     l954 1FEC                                       l698 31CE  
                                     l858 318A                                       l955 1FA4  
                                     l699 31D8                                       l859 3188  
                                     l957 1FC4                                       l965 32D2  
                                     l958 1FC6                              __CFG_CPB$OFF 000000  
                            __CFG_CPD$OFF 000000                      readUartMessage@chRec 01CA  
                       ??_Make32bitsArray 001E                                _SYNTH_REGS 0601  
                                     _abs 34FA                                       _exp 0C5A  
                                     _log 1502                                       _pow 1386  
                                     prod 000FF3                                       tosl 000FFD  
                                     wreg 000FE8                     ??_SetAdcOperationMode 002E  
          ?_InitSystemApplicationManagers 0001                              __CFG_LVP$OFF 000000  
              __end_of_FlashReadCondition 173C                              ___ftdiv@cntr 0063  
                            ___ftdiv@sign 0068                            ?_ZeroBitsArray 0020  
                                    ?_abs 0018                                      l2100 0CE4  
                                    l1220 2248                                      l1204 2FA2  
                                    l2101 0D14                                      l1213 226A  
                                    l1221 224E                                      l1205 2F78  
                                    l2102 0E3E                                      l1302 2B6C  
                                    l1222 225C                                      l1214 220A  
                                    l1230 300E                                      l2111 1C48  
                                    l2103 0E14                                      l1303 2B2E  
                                    l1207 2F86                                      l1231 3014  
                                    l2112 1CC4                                      l1312 2BFC  
                                    l2040 0EA4                                      l1216 2218  
                                    l1208 2F94                                      l2121 1DC6  
                                    l1305 2B32                                      l1217 2226  
                                    l1314 2C3A                                      l1306 2B36  
                                    l2042 0EF8                                      l1218 2234  
                                    l1067 3460                                      l2123 1E0C  
                                    l1323 2A5E                                      l1307 2B3A  
                                    l2051 0F32                                      l1219 2242  
                                    l1227 302E                                      l2108 1C2E  
                                    l1308 2B68                                      l1228 3008  
                                    l1236 3616                                      l2117 2520  
                                    l2109 1C20                                      l2125 1E3A  
                                    l1317 3236                                      l1237 3608  
                                    l2126 1E2E                                      l2134 3542  
                                    l2062 3724                                      l2054 0F44  
                                    l2038 0E8C                                      l1318 320C  
                                    l2055 0FB0                                      l2144 3568  
                                    l2048 0F08                                      l2161 151E  
                                    l2057 0FD4                                      l2049 0F18  
                                    l1505 3518                                      l2170 1D14  
                                    l2058 1010                                      l1186 33CA  
                                    l1450 2992                                      l2163 153E  
                                    l1283 2EBA                                      l2139 3638  
                                    l1187 33BE                                      l1284 2E9E  
                                    l1196 35A8                                      l2149 3656  
                                    l1189 33C4                                      l1197 359C  
                                    l1446 2960                                      l1295 1EB6  
                                    l1199 35A2                                      l1447 2978  
                                    l1720 12A8                                      l1544 274E  
                                    l1384 1B46                                      l1705 122C  
                                    l2169 1D94                                      l1545 2742  
                                    l2097 0C74                                      l1449 299E  
                                    l1714 12BC                                      l1810 26CA  
                                    l1731 1314                                      l2099 0CAC  
                                    l1467 2CA4                                      l1811 26BE  
                                    l1740 1A76                                      l1732 1330  
                                    l1900 13C0                                      l1820 2906  
                                    l1468 2CB8                                      l1741 1AB4  
                                    l1733 1360                                      l1709 1256  
                                    l1821 28FA                                      l1742 1ADA  
                                    l1902 13E8                                      l1814 26FE  
                                    l1831 2B9A                                      l1655 3252  
                                    l1719 12B2                                      l1903 146E  
                                    l1815 270C                                      l1680 21DA  
                                    l1832 2B8E                                      l1728 12F0  
                                    l1760 19EA                                      l1904 144C  
                                    l1824 292E                                      l1681 21D0  
                                    l1729 12E6                                      l1753 1958  
                                    l1905 14F4                                      l1825 293C  
                                    l1674 217E                                      l1738 1A4E  
                                    l1770 30E6                                      l1746 25B8  
                                    l1675 2174                                      l1755 1980  
                                    l1747 25E8                                      l1764 35D0  
                                    l1756 19B2                                      l1677 21B2  
                                    l1757 19C2                                      l1678 219C  
                                    l1782 1900                                      l1774 1864  
                                    l1759 19DA                                      l1783 18F4  
                                    l1776 18DC                                      l6040 2AD8  
                                    l1785 191C                                      l1777 18CC  
                                    l6052 2A7A                                      l1887 34C0  
                                    l1888 34B0                                      l7106 2EE8  
                                    l1899 13D0                                      l4388 2614  
                                    l7070 1EA6                                      l6506 3154  
                                    l7402 0924                                      l6436 34B0  
                                    ?_exp 0099                                      ?_log 0090  
                                    l7326 1F9C                                      l7406 0948  
                                    l7088 1EF2                                      l7416 09A8  
                                    l6482 2BEC                                      l7292 28DC  
                                    l7278 2886                                      l6592 2032  
                                    l7484 2F34                                      l7674 0E14  
                                    l6794 22F6                                      l7586 1B36  
                                    l6798 2304                                      l7774 23D6  
                                    l7598 1BC2                                      l7784 244A  
                                    ?_pow 00A2                                      l7878 1036  
                                    STR_1 0685                                      STR_2 0691  
                      EepromWrite@address 001C                                      _IOCB 000F62  
                                    _LATA 000F89                                      _LATB 000F8A  
                                    _LATC 000F8B                                      _LATD 000F8C  
                                    _LATE 000F8D                                      u4011 1848  
                                    u4100 2548                                      u4030 1882  
                                    u4035 187A                                      u4108 254A  
                                    u4070 1906                                      u4410 1DE6  
                                    u6015 32E0                                      u5240 36DA  
                                    u6016 32E2                                      u4418 1DEA  
                                    u6140 2166                                      u7110 1C3A  
                                    u6230 3564                                      u7200 1FCA  
                                    u6080 2086                                      u7040 26CE  
                                    u8010 2152                                      u5258 36DC  
                                    u6250 3534                                      u6180 21E4  
                                    u6340 22B0                                      u7070 290A  
                                    u7150 28DC                                      u7215 1FE8  
                                    u7216 1FEA                                      u6440 0E94  
                                    u7400 09C6                                      u8008 0BFC  
                                    u6601 11FE                                      u7305 07EA  
                                    u8009 0C1C                                      u6370 2330  
                                    u7250 0710                                      u7260 0712  
                                    u7325 0876                                      u6630 121E  
                                    u6470 0ECE                                      u7510 33F2  
                                    u8207 28CE                                      u7360 08FA  
                                    u7520 33F4                                      u6801 1940  
                                    u8217 2088                                      u6730 12C4  
                                    u6490 0EDE                                      u8227 2AA0  
                                    u6660 1248                                      u6821 1968  
                                    u8237 2ABA                                      u7630 0CEE  
                                    u6910 1EF2                                      u7390 09A8  
                                    u6591 11EA                                      u8247 2AFE  
                                    u8167 27E2                                      u6760 12F8  
                                    u7640 0CF0                                      u7720 1436  
                                    u7560 1BC2                                      u8257 2B18  
                                    u8177 289E                                      u7465 2652  
                                    u6690 1286                                      u8267 1104  
                                    u8187 28AE                                      u6860 37C4  
                                    u6861 37C0                                      u8197 28BE  
                                    u7750 1798                                      u5990 2B60  
                                    u7745 1746                                      u6961 1A36  
                                    u7770 17DC                                      u6955 33B4  
                                    u5995 2B56                                      u6956 33B6  
                                    u6981 1A5E                  ??_SwSpi_Set_Synth_Le_Pin 0019  
                                    _WPUB 000F61                             _EUSART1_Write 3152  
                                    abs@a 0018                                      _crc8 2E8C  
                 ??_InitAdcApplicationMgr 0018                                      _data 00CE  
                                    _main 294E                              ___ftpack@arg 0018  
                           ?_EUSART1_Read 0001                              ___ftpack@exp 001B  
                         _TMR0_StartTimer 382C                           __end_of_DacInit 2466  
                                    fsr0h 000FEA                                      fsr1h 000FE2  
                                    fsr2h 000FDA                                      fsr0l 000FE9  
                                    indf1 000FE7                                      indf2 000FDF  
                                    fsr1l 000FE1                                      fsr2l 000FD9  
                                    btemp 0048                             __CFG_BORV$190 000000  
                                    exp@x 0099                                      log@x 0090  
                       ?_FLASH_WriteBlock 001D                          ?_ClearMcuRunTime 0001  
                                    pow@x 00A2                                      pow@y 00A5  
                                    prodh 000FF4                                      prodl 000FF3  
               GroupStatusAndVersion@data 01C2             __size_of_CheckFlashPrecentage 00AE  
                                    start 00DC                             __CFG_IESO$OFF 000000  
                     __end_of_EepromWrite 3790                        ??_FLASH_WriteBlock 0023  
                           _adcSampleMode 003C                              ___ftmul@cntr 0076  
                            ___param_bank 000000                              ___ftmul@sign 0077  
                          _BlinkErrorLeds 2ACE                             ??_InitRxSynth 002F  
                           ??_InitTxSynth 002F                              ___fttol@exp1 0086  
                                   ??_abs 001A                 __size_of_DATAEE_WriteByte 0036  
                                   ??_exp 002F                                     ??_log 002F  
                            ___fttol@lval 0082                                     ??_pow 002F  
                 __end_of_TMR0_Initialize 3384            __size_of_OSCILLATOR_Initialize 000E  
           __end_of_OSCILLATOR_Initialize 37AC                                     ?_crc8 0018  
              SWSPI_DAC_send_bits@phrType 001C                            _SetSynthRxOper 37C8  
                                   ?_main 0001                            _SetSynthTxOper 33E8  
                                   _EEADR 000FA9                           __end_of___ftadd 1386  
         __size_of_SwSpi_Set_Dac_Sync_Pin 001C                           __end_of___ftdiv 1B0C  
                         __end_of___ftneg 35DE                           __end_of___lldiv 271E  
                              _EepromRead 3818                           __end_of___ftmul 1A24  
                                   _T0CON 000FD5                           __end_of___llmod 294E  
                         __end_of___ftsub 3110                           __end_of___fttol 192E  
                            _SYNTH_ADDRES 0644                            __CFG_DEBUG$OFF 000000  
                         __end_of___lwmod 3152                       StoreIntInEeprom@idx 0029  
                                   i2l801 0090                                     i2l870 34A0  
                                   i2l863 32A2                                     i2l864 329E  
                                   i2l792 005E                                     i2l794 006A  
                                   i2l869 3480                                     i2l797 007A  
                                   i2l799 0086                       StoreIntInEeprom@val 0028  
                                   _TMR0H 000FD7                                     _TMR0L 000FD6  
                                   _TRISA 000F92                                     _TRISB 000F93  
                                   _TRISC 000F94                                     _TRISD 000F95  
                                   _TRISE 000F96                       _SWSPI_DAC_send_bits 2C3C  
       __size_of_TMR0_SetInterruptHandler 000A                             __CFG_WRT0$OFF 000000  
                           __CFG_WRT1$OFF 000000                __end_of_GetIntFromUartData 1F32  
                           __CFG_WRT2$OFF 000000                       ___lmul@multiplicand 001C  
               ?_TMR0_SetInterruptHandler 0018                             __CFG_WRT3$OFF 000000  
                            ___lltoft@exp 0028                      _EUSART1_Transmit_ISR 3276  
                          __CFG_EBTR0$OFF 000000                            __CFG_FCMEN$OFF 000000  
                          __CFG_EBTR1$OFF 000000                            __CFG_EBTR2$OFF 000000  
                          __CFG_EBTR3$OFF 000000                         ?_WriteUartMessage 0019  
                        __end_of_TMR0_ISR 24F8                             __CFG_WRTB$OFF 000000  
                           __CFG_WRTC$OFF 000000                             __CFG_WRTD$OFF 000000  
                         DacSetValue@data 0086                           _DATAEE_ReadByte 3728  
                          __CFG_EBTRB$OFF 000000                             ___awtoft@sign 0023  
                 __end_of_PIN_MANAGER_IOC 3834                                     crc8@i 001F  
                                   _make8 2B2C            __size_of_SWSPI_Synth_send_bits 00BA  
                   __end_of_GetMcuRunTime 1BF0                                     _count 00C9  
                                   _floor 1BF0                                     _ldexp 1DAC  
                                   _frexp 24F8                                     _errno 00C5  
           __end_of_SWSPI_Synth_send_bits 20A8                           __end_of_isalpha 354A  
                         __end_of_isdigit 3640                                     _group 00D1  
                      ??_WriteUartMessage 001D                        __CFG_MCLRE$EXTMCLR 000000  
                           ___ftpack@sign 001C                   ??_GroupStatusAndVersion 0030  
                         __end_of_isspace 3570                            ?_EUSART1_Write 0001  
                             ?_AdcConvert 0001                            __CFG_BOREN$OFF 000000  
                         __end_of_isupper 365E                                     pclath 000FFA  
                                   tablat 000FF5                                     pow@yi 00AF  
                          ??_EUSART1_Read 0018                                     status 000FD8  
                                   wtemp6 0049                            __CFG_HFOFST$ON 000000  
                         __end_of_toupper 3728            SwSpi_Set_Synth_Le_Pin@cPinMode 0018  
                 __end_of_GroupControlMcu 33E8                       __size_of_MEMORY_ISR 0004  
                          __CFG_PBADEN$ON 000000        __size_of_SetConversionResultFormat 000C  
                             exp@exponent 009F            CheckFlashPrecentage@precentage 007C  
                    ?_SWSPI_DAC_send_bits 001A                    __end_of_BlinkErrorLeds 2B2C  
                             ldexp@newexp 0093                   __end_of_SWSPI_send_word 233A  
                             _BlinkOkLeds 2A70                   WriteUartMessage@dataBuf 0019  
                         __initialization 280C                               log@exponent 0093  
                            __end_of_crc8 2EDA                __end_of_EUSART1_Initialize 331A  
                            __end_of_main 29B0                    __end_of_SetSynthRxOper 37D4  
                 FLASH_ReadByte@flashAddr 0018                    __end_of_SetSynthTxOper 3418  
             ?_INTERRUPT_InterruptManager 0001                          __end_of_GroupDAC 3622  
                  __size_of_SynthReadData 0062                           _readUartMessage 0A5E  
                        __end_of_GroupAdc 2FBA                                    ??_crc8 001C  
                                  ??_main 0030                             ___fttol@sign1 0081  
                       ?_SwSpi_Set_CE_Pin 0018                        _TimerKeepAliveFlag 00D6  
                           __activetblptr 000002                   __size_of_FLASH_ReadByte 0012  
                        __end_of_ResetMcu 379E                       __end_of_InitRxSynth 2F72  
                     __end_of_InitTxSynth 2F26                              _writeAddress 0041  
                      ??_SwSpi_Set_CE_Pin 0019                     ?_EUSART1_Transmit_ISR 0001  
                         ??_ZeroBitsArray 0022                   __end_of_TMR0_StartTimer 3830  
                                  ?_make8 0018                                    _ADCON0 000FC2  
                                  _ADCON1 000FC1                                    _ADCON2 000FC0  
                                  ?_floor 0091                 FLASH_WriteBlock@writeAddr 001D  
                                  ?_ldexp 0090                                    ?_frexp 0018  
                        __end_of___altoft 2798                          ___llmod@dividend 0018  
                                  _ADRESH 000FC4                                    _ADRESL 000FC3  
                                  _EEDATA 000FA8                                 ??_DacInit 0086  
                                  _EECON2 000FA7                          __end_of___awtoft 3276  
                                  _ANSELA 000F38                                    _ANSELB 000F39  
                                  _ANSELC 000F3A                                    _ANSELD 000F3B  
                                  _ANSELE 000F3C                          __end_of___ftpack 2204  
                        __end_of___lltoft 2BE4                         _FlashReadUart$577 00B1  
                       _FlashReadUart$578 00B5                         ?_FlashSampleWrite 002D  
                                  i2l1023 2496                                    i2l1024 24B8  
                                  i2l1025 24DA                            __CFG_WDTEN$OFF 000000  
                    StoreIntInEeprom@data 0021                                    i2l1873 3126  
                                  i2l1874 311E                                    i2l1877 313E  
                                  i2l1878 3148                                    _TABLAT 000FF5  
                             _EepromWrite 3782                                    _RCREG1 000FAE  
                        __end_of___lwtoft 3602                   __size_of_FlashEreaseMem 0052  
               __size_of_FLASH_EraseBlock 0034                                    _RCSTA1 000FAB  
                       SynthReadData@data 0024           __size_of_SwSpi_Set_Synth_Le_Pin 003C  
                                  _OSCCON 000FD3                         SynthReadData@indx 007B  
                                  _SPBRG1 000FAF                    _SwSpi_Set_Dac_Sync_Pin 369A  
                 __size_of_SwSpi_Data_Pin 0056                  GroupSynthesizers@request 00BF  
                      ??_FlashSampleWrite 0060                                    _TXREG1 000FAD  
                                  _TXSTA1 000FAC                     ??_SWSPI_DAC_send_bits 001B  
                __end_of_GroupFlashMemory 3046                           ?_BlinkErrorLeds 0001  
                          __CFG_PWRTEN$ON 000000                            __CFG_XINST$OFF 000000  
                                  _cState 00D2                                    ___ftge 2588  
                                  ___lmul 2C94                 SWSPI_Synth_send_bits@data 0022  
                                  ___wmul 3570                       UpdateRxFreq@regData 0088  
                               ??___ftadd 007E                 SWSPI_Synth_send_bits@mask 0080  
                               ??___ftdiv 0060                                 ??___ftneg 001B  
                               ??___lldiv 0020                                 ??___ftmul 006F  
                   __end_of_PLLInitialize 37BA                                 ??___llmod 0020  
                               ??___ftsub 002F                                 ??___fttol 007C  
                               ??___lwmod 0005            SwSpi_Set_Dac_Sync_Pin@cPinMode 0018  
                         ?_SetSynthRxOper 0001                           ?_SetSynthTxOper 0001  
                        ?_TMR0_Initialize 0001                                    _memset 34A6  
                      __end_of_DAC_ADDRES 064C                                    clear_0 2852  
                                  clear_1 285E                                    clear_2 286A  
                     __size_of_AdcConvert 01B6                   __end_of_DATAEE_ReadByte 373C  
                             ?_EepromRead 0001                                    _strtol 0E4C  
                                  floor@i 0094                     __end_of_SwSpi_Clk_Pin 2D96  
                                  floor@x 0091                     ___ftmul@f3_as_product 0073  
                SWSPI_DAC_send_bits@count 001B                FlashSampleWrite@channelNum 002F  
                            __pdataCOMRAM 0041                                 ??_isalpha 001B  
                               ??_isdigit 0018                     __end_of_FlashReadUart 0A5E  
                        __end_of_testLeds 28E8                             ?_SetMcuSystem 0001  
                            __mediumconst 0000                                 ??_isspace 0018  
                                  tblptrh 000FF7                                 ??_isupper 0018  
                                  tblptrl 000FF6                                    tblptru 000FF8  
                ADC_GetConversion@channel 001C                           ??_EUSART1_Write 0018  
TMR0_SetInterruptHandler@InterruptHandler 0018              __size_of_InitRxMessageParams 0028  
                        ?_PIN_MANAGER_IOC 0001                           _eusart1RxBuffer 0146  
                               ??_toupper 0018                        __size_of_ZeroArray 001E  
           __size_of_INTERRUPT_Initialize 0004                             _SynthReadData 29B0  
                         _eusart1TxBuffer 0100                           _GetMcuFwVersion 233A  
                        __end_ofexp@coeff 066A                         _SYSTEM_Initialize 36B6  
                        __end_oflog@coeff 0685                                __accesstop 0060  
                 __end_of__initialization 2870                                ___altoft@c 0087  
                           ZeroArray@size 0022                                ___ftadd@f1 0078  
                              ___ftadd@f2 007B                                ___ftge@ff1 0018  
                              ___ftge@ff2 001B                        ?_SYSTEM_Initialize 0001  
                            eval_poly@res 008D                             ___rparam_used 000001  
                              ___ftdiv@f1 0029                                ___ftdiv@f2 002C  
                              ___ftdiv@f3 0064                          ?_GroupControlMcu 01C2  
            GroupStatusAndVersion@request 00BF                                ___ftneg@f1 0018  
                              ___awtoft@c 0020                   __end_of_readUartMessage 0C5A  
                WriteUartMessage@dataSize 001B                                ___ftmul@f1 0069  
                              ___ftmul@f2 006C                          ?_SWSPI_send_word 0026  
                            ?_DacSetValue 0086                                ___ftsub@f1 0084  
                              ___ftsub@f2 0087                                ___fttol@f1 0078  
                         _Make32bitsArray 2BE4                            __pcstackCOMRAM 0001  
                            __pidataBANK0 3762                       ??_SYSTEM_Initialize 001C  
                               ?_TMR0_ISR 0001                                ___lltoft@c 0020  
                           __end_of_make8 2B88                               _InitRxSynth 2F26  
                        _DATAEE_WriteByte 32AE                             __end_of_floor 1CD2  
                           __end_of_ldexp 1E72                             __end_of_frexp 2588  
                             _InitTxSynth 2EDA                    _SwSpi_Set_Synth_Le_Pin 31CA  
                    GroupFlashMemory@data 01C2                                ___lwtoft@c 0020  
         __end_of_DAC_DEFAULT_INIT_VALUES 063D                      __end_of_EUSART1_Read 308A  
                            ??_MEMORY_ISR 0001                 __size_of_StoreIntInEeprom 0038  
                  __size_of_SetMcuRunTime 0044                    ??_EUSART1_Transmit_ISR 0001  
                          ??_SetMcuSystem 001C                        ZeroBitsArray@array 0020  
                   TMR0_ISR@CountCallBack 0034             SwSpi_Set_Synth_Le_Pin@phrType 0019  
                 GroupFlashMemory@request 00C0                        _keepAliveSignalLed 36D0  
                       make8@dataLocation 001C               __end_of_EUSART1_Receive_ISR 34A6  
             FLASH_WriteBlock@GIEBitValue 002B                              GroupDAC@data 01C2  
                                 ??_make8 001D                                   ??_floor 002F  
                        ?_TMR0_StartTimer 0001                                   ??_ldexp 0095  
                                 ??_frexp 001D                 __end_of_SYSTEM_Initialize 36D0  
                         _AdcConvert$3290 00B9                            ?_SynthReadData 0024  
                           _eusart1RxHead 0037                      GetMcuFwVersion@TxMsg 0060  
                           _eusart1TxHead 0039                             _eusart1RxTail 0036  
                              __pbssBANK0 00C1                                __pbssBANK1 0100  
                           _eusart1TxTail 0038                       ?_keepAliveSignalLed 0001  
                      __size_of_eval_poly 00DA                           __CFG_PLLCFG$OFF 000000  
                              _channelArr 063D                                 ?_GroupDAC 01C2  
                              __pnvCOMRAM 0046                                 ?_GroupAdc 01C2  
          __size_of_InitAdcApplicationMgr 0010                __end_of_SendSystemStartAck 3804  
           __end_of_InitAdcApplicationMgr 3782                       __size_of_EepromRead 000A  
                      __end_of_MEMORY_ISR 3838                                 ?_ResetMcu 0001  
                      _FlashReadCondition 1624           ??_InitSystemApplicationManagers 0030  
                      __CFG_CCP2MX$PORTC1 000000                                   ?___ftge 0018  
                          FlashReadUart@j 00B9          __end_of_TMR0_SetInterruptHandler 3818  
                                 ?___lmul 0018                                   ?___wmul 0018  
                              ??_TMR0_ISR 0006                        __CFG_CCP3MX$PORTB5 000000  
                      SetChannelMode@data 002C                      ??_keepAliveSignalLed 0018  
                       __end_of_ZeroArray 367C                                 ?___altoft 0087  
                                 ?_memset 0018                         _ReadIntFromEeprom 2A12  
                          ___lmul@product 0020                       ?_FlashReadCondition 0001  
                               ?___awtoft 0020                                 ?___ftpack 0018  
                            GroupAdc@data 01C2                          FlashReadUart@idx 00BB  
                               ?___lltoft 0020                 __size_of_FLASH_WriteBlock 00BC  
                 __size_of_ADC_Initialize 0016               __end_of_SetAdcOperationMode 37EC  
              FlashSampleWrite@sampleData 002D                            _FLASH_ReadByte 3750  
                               ?___lwtoft 0020              __end_of_CheckFlashPrecentage 2156  
                      ?_ReadIntFromEeprom 001A                                   ?_strtol 0024  
                        ?_DATAEE_ReadByte 0001                GetMcuFwVersion@compileData 0069  
            __size_of_keepAliveSignalUart 000C                        SynthReadData@TxMsg 0060  
                 __end_of_GetMcuFwVersion 23D0                                   _OSCCON2 000FD2  
                                 _TBLPTRH 000FF7                                   _TBLPTRL 000FF6  
                                 _TBLPTRU 000FF8                                   _OSCTUNE 000F9B  
                                 _SPBRGH1 000FB0                       ??_ReadIntFromEeprom 001E  
                                 _DacInit 23D0                     GetIntFromUartData@idx 0079  
                   GetIntFromUartData@num 0073                          GetMcuRunTime@idx 006D  
                            ??_AdcConvert 00B3                      ??_FlashReadCondition 0024  
                          _FlashEreaseMem 2DE8                          _FLASH_EraseBlock 3384  
          __size_of_GroupStatusAndVersion 0024                            _SwSpi_Data_Pin 2CEA  
                    DATAEE_WriteByte@bAdd 0019             __end_of_GroupStatusAndVersion 35BA  
                 __end_of_Make32bitsArray 2C3C                                ??_GroupDAC 0030  
                              ??_GroupAdc 0030                             _SetMcuRunTime 308A  
                      _GetIntFromUartData 1E72                        FlashReadUart@TxMsg 006C  
                   GroupSynthesizers@data 01C2                                   __Hparam 0000  
                              ??_ResetMcu 002C                 __size_of_WriteUartMessage 0036  
                            ?_BlinkOkLeds 0001                                   __Lparam 0000  
                            _cntRegUpdate 003A                          UpdateRxFreq@data 0086  
                   SendAckMessage@inGroup 0025                          ?_readUartMessage 0001  
                  GroupControlMcu@request 00BF                                 ?_testLeds 0001  
               __end_of_ReadIntFromEeprom 2A70                       ?_GetIntFromUartData 0066  
                         __size_of___ftge 0090                           __size_of___lmul 0056  
                                 ___ftadd 11D8                                   ___ftdiv 1A24  
                                 ___ftneg 35BA                                   ___lldiv 269C  
                         __size_of___wmul 0026                                   ___ftmul 192E  
                                 ___llmod 28E8                                   ___ftsub 30CE  
                                 ___fttol 1836                FlashSampleWrite@rotateLeft 0062  
                            crc8@dataSize 001A                  __size_of_ClearMcuRunTime 0014  
                                 ___lwmod 3110                      AdcConvert@_adcResult 00B5  
                            __psmallconst 0600                                ??___altoft 008B  
                  __end_of_FLASH_ReadByte 3762                           __CFG_STVREN$OFF 000000  
              SWSPI_Synth_send_bits@count 0084                     _mcuRunTimeIn5SecTicks 00C1  
                                 _crcCalc 00CD                                   _channel 00D4  
                                 __pcinit 280C                                ??___awtoft 0023  
                              ??___ftpack 001D                         __end_of_eval_poly 1DAC  
                         __size_of_memset 002C                                   __ramtop 0600  
                 __size_of_SendAckMessage 0052                                ??___lltoft 0024  
                 __size_of_SetChannelMode 0030                                   __ptext0 294E  
                                 __ptext1 0A5E                                   __ptext2 34D2  
                                 __ptext3 3602                                   __ptext4 3002  
                                 __ptext5 2F72                                   __ptext6 3596  
                                 __ptext7 33B8                                   __ptext8 2204  
                                 __ptext9 2798                                   crc8@crc 001D  
                      __end_of_AdcConvert 11D8                                ??___lwtoft 0023  
                               _T0CONbits 000FD5                         BlinkErrorLeds@idx 001C  
                         __size_of_strtol 01D6                     _OSCILLATOR_Initialize 379E  
                            __size_of_abs 0028                                   _isalpha 3522  
                            __size_of_exp 01F2                              __size_of_log 0122  
                                 _isdigit 3622                              __size_of_pow 017C  
                      _EUSART1_Initialize 32E4                  ??_PIN_MANAGER_Initialize 0018  
                                 _isspace 354A                 StoreIntInEeprom@numOfByes 0026  
                                 _isupper 3640                          UpdateTxFreq@data 0086  
                                 _request 00D0                           GroupDAC@request 00BF  
                         ??_SynthReadData 0026                      ??_GetIntFromUartData 002E  
                  __end_of_FlashEreaseMem 2E3A                __size_of_SYSTEM_Initialize 001A  
                 ?_SwSpi_Set_Dac_Sync_Pin 0001                    __end_of_SwSpi_Data_Pin 2D40  
                 StoreIntInEeprom@address 0025                                   _toupper 3714  
                    end_of_initialization 2870                             ?_UpdateRxFreq 0086  
                                 exp@sign 00A1                             ?_UpdateTxFreq 0086  
                     ?_EUSART1_Initialize 0001                          ??_BlinkErrorLeds 0018  
                            ?_EepromWrite 001B                     _SWSPI_Synth_send_bits 1FEE  
               __size_of_SwSpi_Set_CE_Pin 003C                            ?_SetMcuRunTime 0001  
                                 memset@c 001A                                   memset@n 001C  
                                 memset@p 001E                             __Lmediumconst 0000  
                         ___lldiv@divisor 001C                      __end_of_SetMcuSystem 380E  
                                 pow@sign 00AE                           ___lldiv@counter 0024  
                        ??_SetSynthRxOper 002C                         ?_GroupFlashMemory 01C2  
                        AdcConvert@adcRes 00BC                          ??_SetSynthTxOper 0030  
                      __end_of_SYNTH_REGS 0635                                ??_testLeds 002C  
                    SWSPI_send_word@datac 002B                                _rxMsgQueue 00D9  
                                 postdec1 000FE5                                   postdec2 000FDD  
                      ??_GroupFlashMemory 00BF                                   postinc0 000FEE  
                                 postinc2 000FDE                     __size_of_EUSART1_Read 0044  
                     _InitRxMessageParams 34D2                               testLeds@idx 002D  
                    __size_of_DacSetValue 0084                 __size_of_FlashSampleWrite 00FA  
                  __size_of_GetMcuRunTime 00E4                       UpdateTxFreq@regData 008A  
                    ??_EUSART1_Initialize 0018     __end_of_InitSystemApplicationManagers 3714  
  __size_of_InitSystemApplicationManagers 0016             _InitSystemApplicationManagers 36FE  
                         ?_FLASH_ReadByte 0018                                   strtol@a 0061  
                                 strtol@c 0065                                   strtol@s 0024  
                _TMR0_SetInterruptHandler 380E                              ??_EepromRead 0019  
                        _StoreIntInEeprom 3206                          ?_GetMcuFwVersion 0001  
                          ZeroArray@array 0020            __end_of_SwSpi_Set_Dac_Sync_Pin 36B6  
                            strtol@endptr 0026             FLASH_WriteBlock@flashWrBufPtr 0021  
                      GetMcuRunTime@TxMsg 0060                      ?_InitRxMessageParams 0001  
                         ?_FlashEreaseMem 0001                       EUSART1_Write@txData 0018  
                         ?_SwSpi_Data_Pin 0018                     __end_of_ZeroBitsArray 369A  
                          ??_UpdateRxFreq 002F                            ??_UpdateTxFreq 0088  
                __end_of_DATAEE_WriteByte 32E4               __end_of_SWSPI_DAC_send_bits 2C94  
                FLASH_EraseBlock@baseAddr 0018                          ?_Make32bitsArray 0018  
                             ___ftdiv@exp 0067                              _EUSART1_Read 3046  
                    _CheckFlashPrecentage 20A8                         FLASH_WriteBlock@i 002C  
                      __end_of_EepromRead 3822                               ___ftmul@exp 0072  
                 ?_SwSpi_Set_Synth_Le_Pin 0018                     PLLUartInitialize@data 0018  
              __size_of_ReadIntFromEeprom 005E                ?_SetConversionResultFormat 002C  
            __end_of_INTERRUPT_Initialize 382C                              ?_InitRxSynth 0001  
                            ?_InitTxSynth 0001                            __end_of___ftge 2618  
            InitAdcApplicationMgr@channel 0018                            __end_of___lmul 2CEA  
                          __end_of___wmul 3596                       GroupControlMcu@data 01C2  
                           __pidataCOMRAM 3822                         __size_of_TMR0_ISR 0092  
                          _ADC_Initialize 36E8                          _FLASH_WriteBlock 1F32  
                  ?_OSCILLATOR_Initialize 0001                            __end_of_memset 34D2  
                              floor@expon 0097                         ??_ClearMcuRunTime 0018  
                          __end_of_strtol 1022                       start_initialization 280C  
                              eval_poly@d 0087                                eval_poly@n 0089  
                              eval_poly@x 0084                          BlinkOkLeds@state 001B  
                __size_of_TMR0_Initialize 0034                                ldexp@value 0090  
                             _SynthTxOper 0045           __size_of_PIN_MANAGER_Initialize 0048  
                             __end_of_abs 3522                     ??_InitRxMessageParams 0024  
                             __end_of_exp 0E4C                               __end_of_log 1624  
                             __end_of_pow 1502                  AdcConvert@_adcResult_338 00B7  
                           _GetMcuRunTime 1B0C                    ?_SWSPI_Synth_send_bits 0022  
                         ??_SetMcuRunTime 0021                     __end_of_EUSART1_Write 318E  
                  __size_of_PLLInitialize 000E                                frexp@value 0018  
                         ___llmod@divisor 001C                     ?_CheckFlashPrecentage 0001  
                         ___llmod@counter 0020                       DATAEE_ReadByte@bAdd 0018  
                __size_of_PIN_MANAGER_IOC 0004                    __size_of_SwSpi_Clk_Pin 0056  
                     SendAckMessage@TxMsg 0026            __end_of_SwSpi_Set_Synth_Le_Pin 3206  
                     _keepAliveSignalUart 37EC                         __size_of_GroupDAC 0020  
                        _WriteUartMessage 331A                         __size_of_GroupAdc 0048  
                  __size_of_FlashReadUart 03C2                                  ??___ftge 001E  
                                ??___lmul 0020                   SendAckMessage@inRequest 0024  
                                ??___wmul 001C                         __size_of_ResetMcu 000E  
                    __size_of_BlinkOkLeds 005E                   SetAdcOperationMode@data 002C  
                  __end_of_ADC_Initialize 36FE         __end_of_SetConversionResultFormat 37E0  
                             __pdataBANK0 00ED                   SWSPI_DAC_send_bits@data 001A  
                                ??_memset 001E                  __size_of_GroupControlMcu 0030  
             FLASH_EraseBlock@GIEBitValue 001C                            _SendAckMessage 2E3A  
                          _SetChannelMode 3418                  __end_of_FLASH_EraseBlock 33B8  
                      _SendSystemStartAck 37F8                  __size_of_SWSPI_send_word 009A  
                                ??_strtol 002A                            _eusart1RxCount 00D3  
                       __size_of___altoft 007A                                 _ZeroArray 365E  
                         DacInit@dacInput 0088                         __size_of___awtoft 0038  
                       __size_of___ftpack 00AE                      ?_keepAliveSignalUart 0001  
                       __size_of___lltoft 005C                               __pbssCOMRAM 0030  
                       __size_of___lwtoft 0024             __size_of_EUSART1_Transmit_ISR 0038  
                           __pcstackBANK0 0060                             __pcstackBANK1 01C2  
                            _isalpha$3001 001C                       ?_SendSystemStartAck 0001  
                            _isdigit$3004 0019                            ?_GetMcuRunTime 0001  
                     DacSetValue@dacIndex 008B                            BlinkOkLeds@idx 001C  
                                ?_DacInit 0001                     __size_of_SetMcuSystem 000A  
                        _SwSpi_Set_CE_Pin 318E              __size_of_EUSART1_Receive_ISR 002E  
           SWSPI_Synth_send_bits@bitArray 0060                   _DAC_DEFAULT_INIT_VALUES 0635  
                    __size_of_EepromWrite 000E                     _TMR0_InterruptHandler 00FD  
                               __pnvBANK0 00FD                  __size_of_TMR0_StartTimer 0004  
                  _PIN_MANAGER_Initialize 2FBA                      ??_SendSystemStartAck 002C  
                   _InitAdcApplicationMgr 3772                                 __pintcode 0008  
                  __end_of_SendAckMessage 2E8C                                 __ptext100 11D8  
                               __ptext101 35BA                                 __ptext110 37BA  
                               __ptext102 1A24                                 __ptext111 3448  
                               __ptext103 323E                                 __ptext104 2B88  
                               __ptext113 2466                                 __ptext105 35DE  
                               __ptext114 3110                                 __ptext106 2156  
                               __ptext115 3830                                 __ptext107 173C  
                               __ptext116 3834                                 __ptext108 1F32  
                               __ptext117 3276                                 __ptext109 3384  
                                ?___ftadd 0078                                 __ptext118 3478  
                               __ptext119 0000                                  ?___ftdiv 0029  
                  __end_of_SetChannelMode 3448                                  ?___ftneg 0018  
                                ?___lldiv 0018                                  ?___ftmul 0069  
                                ?___llmod 0018                                  ?___ftsub 0084  
                                ?___fttol 0078                          _FlashSampleWrite 173C  
                                ?___lwmod 0001                           ?_ADC_Initialize 0001  
                    __end_of_UpdateRxFreq 2DE8                         __size_of_testLeds 006A  
                           _PLLInitialize 37AC             SetConversionResultFormat@data 002C  
                    __end_of_UpdateTxFreq 280C               __size_of_keepAliveSignalLed 0018  
            ??_INTERRUPT_InterruptManager 0006                          __CFG_PRICLKEN$ON 000000  
                              ?_ZeroArray 0020                               __smallconst 0600  
                   ??_keepAliveSignalUart 002C                                  _BAUDCON1 000FB8  
                           _SwSpi_Clk_Pin 2D40                                  ?_isalpha 0001  
                                ?_isdigit 0001                                 _eval_poly 1CD2  
                     BlinkErrorLeds@state 001B                           _TimerOneSecFlag 00D8  
                                ?_isspace 0001                              _SetMcuSystem 3804  
                                ?_isupper 0001                             _FlashReadUart 069C  
                       _PLLUartInitialize 3838              __size_of_SetAdcOperationMode 000C  
                          __size_of_make8 005C                            __size_of_floor 00E2  
                          __size_of_ldexp 00C6                            __size_of_frexp 0090  
                      ?_PLLUartInitialize 0018                  __size_of_DATAEE_ReadByte 0014  
                                ?_toupper 0001                          _conversionFormat 00D5  
                    _INTERRUPT_Initialize 3828            FLASH_WriteBlock@blockStartAddr 0027  
             __size_of_FlashReadCondition 0118                         ??_TMR0_Initialize 001A  
                  ??_CheckFlashPrecentage 0078                            ___wmul@product 001C  
                                _LATAbits 000F89                                  _LATBbits 000F8A  
                                _LATCbits 000F8B                                  _LATDbits 000F8C  
                __end_of_StoreIntInEeprom 323E                       ??_PLLUartInitialize 001A  
          FlashReadUart@numOfSampleToRead 002C                                  _PIE1bits 000F9D  
                                _PIE2bits 000FA0                     _GroupStatusAndVersion 3596  
                       _GroupSynthesizers 2204       __size_of_INTERRUPT_InterruptManager 00D4  
              ??_TMR0_SetInterruptHandler 001A                      Make32bitsArray@array 0018  
                                _PIR1bits 000F9E                          ??_FLASH_ReadByte 001C  
                                _PIR2bits 000FA1                                 _rxMsgData 01AE  
                                i2u518_40 312A                       SWSPI_send_word@data 0026  
                      ?_GroupSynthesizers 01C2                                  _RCONbits 000FD0  
                        __CFG_WDTPS$16384 000000                                 make8@data 0018  
                                _TMR0_ISR 2466                           ?_SendAckMessage 0024  
                         ?_SetChannelMode 002C                            ?_PLLInitialize 0001  
                       ??_PIN_MANAGER_IOC 0001                      __size_of_InitRxSynth 004C  
                     ??_GroupSynthesizers 0030                    GetIntFromUartData@data 0066  
                 SWSPI_send_word@dataSize 002A                                _ADCON0bits 000FC2  
                    __size_of_InitTxSynth 004C                  __size_of_readUartMessage 01FC  
                       ___wmul@multiplier 0018                            ?_SwSpi_Clk_Pin 0018  
                        ??_FlashEreaseMem 002C                 __end_of_PLLUartInitialize 383A  
                      __end_of_channelArr 0644                          ??_SwSpi_Data_Pin 0019  
               __size_of_GroupFlashMemory 0044                                ?_eval_poly 0084  
                          ?_FlashReadUart 002C                         ??_GroupControlMcu 0030  
                         ??_GetMcuRunTime 0025                     DATAEE_WriteByte@bData 0018  
                            _isspace$3007 0019                         ??_SWSPI_send_word 002B  
                              DacInit@idx 008A                                _DAC_ADDRES 0648  
             __size_of_GetIntFromUartData 00C0                         ___lmul@multiplier 0018  
                 FlashReadCondition@TxMsg 0060                               _INTCON2bits 000FF1  
                   __end_of_SynthReadData 2A12                                 copy_data0 2820  
                               copy_data1 2840                     ?_INTERRUPT_Initialize 0001  
                        __size_of_DacInit 0096                         ?_DATAEE_WriteByte 0018  
               __end_of_GroupSynthesizers 22A0                     EUSART1_Read@readValue 0019  
                __end_of_FLASH_WriteBlock 1FEE                                  _GroupDAC 3602  
                      ??_DATAEE_WriteByte 0019                                  _GroupAdc 2F72  
                               frexp@eptr 001B                                _EECON1bits 000FA6  
                                __Hrparam 0000                    ?_InitAdcApplicationMgr 0001  
                                _ResetMcu 3790                             ??_DacSetValue 0088  
                             _readAddress 00F9                                  __Lrparam 0000  
                       _ADC_GetConversion 3448                       FlashReadUart@offset 00BD  
                         _ClearMcuRunTime 373C                         __CFG_P2BMX$PORTD2 000000  
             ??_SetConversionResultFormat 002E                   ??_OSCILLATOR_Initialize 0018  
                      ?_ADC_GetConversion 0018                         ??_TMR0_StartTimer 0018  
                        __size_of___ftadd 01AE                          __size_of___ftdiv 00E8  
                    _numOfValidateSamples 0030                          __size_of___ftneg 0024  
                        __size_of___lldiv 0082                                  ___altoft 271E  
                        __size_of___ftmul 00F6                          __size_of___llmod 0066  
                        __size_of___ftsub 0042                          __size_of___fttol 00F8  
             __size_of_EUSART1_Initialize 0036                          __size_of___lwmod 0042  
                         GroupAdc@request 00BF                                  ___awtoft 323E  
                           crc8@dataArray 0018                                  ___ftpack 2156  
                        _numOfReadSamples 003D                                  ___lltoft 2B88  
                       _FLASH_IsWriteDone 37BA                       WriteUartMessage@idx 001E  
                                ___lwtoft 35DE                               ??_ZeroArray 0024  
                GetMcuRunTime@tempRunTime 0069                       ??_ADC_GetConversion 001A  
                            _isupper$3010 0019                                  _exp$3293 009C  
                      ?_FLASH_IsWriteDone 0001                                  _dataSize 00CF  
                   SwSpi_Clk_Pin@cPinMode 0018                  __end_of_WriteUartMessage 3350  
                        __size_of_isalpha 0028                                  _crcGiven 00CC  
                        __size_of_isdigit 001E                   ??_SWSPI_Synth_send_bits 0026  
                  SwSpi_Data_Pin@cPinMode 0018                          __size_of_isspace 0026  
                      DacSetValue@regData 008C                                  __ptext10 2D96  
                                __ptext11 29B0                                  __ptext20 3750  
                                __ptext12 33E8                                  __ptext21 1624  
                                __ptext13 37C8                                  __ptext30 354A  
                                __ptext22 2DE8                                  __ptext14 3838  
                                __ptext31 3622                                  __ptext23 2618  
                                __ptext15 1B0C                                  __ptext40 3046  
                                __ptext32 3522                                  __ptext24 3206  
                                __ptext16 269C                                  __ptext41 37EC  
                                __ptext33 3640                                  __ptext25 3782  
                                __ptext17 233A                                  __ptext50 32E4  
                                __ptext42 36D0                                  __ptext34 2C94  
                                __ptext26 32AE                                  __ptext18 069C  
                                __ptext51 36E8                                  __ptext43 3804  
                                __ptext35 287E                                  __ptext27 1E72  
                                __ptext19 34FA                                  __ptext60 36FE  
                                __ptext52 308A                                  __ptext44 36B6  
                                __ptext36 3790                                  __ptext28 0E4C  
                                __ptext61 382C                                  __ptext53 28E8  
                                __ptext45 3350                                  __ptext37 37D4  
                                __ptext29 3714                                  __ptext70 31CA  
                                __ptext62 37AC                                  __ptext54 37F8  
                                __ptext46 380E                                  __ptext38 3418  
                                __ptext71 369A                                  __ptext63 2EDA  
                                __ptext55 2E3A                                  __ptext47 2FBA  
                                __ptext39 37E0                                  __ptext80 3818  
                                __ptext72 1FEE                                  __ptext64 2F26  
                                __ptext56 2E8C                                  __ptext48 379E  
                                __ptext81 3728                                  __ptext73 367C  
                                __ptext65 318E                                  __ptext57 365E  
                                __ptext49 3828                                  __ptext90 1DAC  
                                __ptext82 373C                                  __ptext74 34A6  
                                __ptext66 3772                                  __ptext58 331A  
                                __ptext91 1BF0                                  __ptext83 20A8  
                                __ptext75 2BE4                                  __ptext67 23D0  
                                __ptext59 3152                                  __ptext92 24F8  
                                __ptext84 2A70                                  __ptext76 2C3C  
                                __ptext68 22A0                                  __ptext93 1836  
                                __ptext85 2ACE                                  __ptext77 2CEA  
                                __ptext69 2B2C                                  __ptext94 2588  
                                __ptext86 1022                                  __ptext78 2D40  
                                __ptext95 271E                                  __ptext87 1386  
                                __ptext79 2A12                                  __ptext96 1CD2  
                                __ptext88 1502                                  __ptext97 3570  
                                __ptext89 0C5A                                  __ptext98 192E  
                                __ptext99 30CE                          __size_of_isupper 001E  
            SWSPI_Synth_send_bits@phrType 0085                  SwSpi_Set_CE_Pin@cPinMode 0018  
                                _pow$3291 00A8                                  _pow$3292 00AB  
                     ??_FLASH_IsWriteDone 0018                       GetIntFromUartData@c 0078  
             DATAEE_WriteByte@GIEBitValue 001A                          __size_of_toupper 0014  
                __size_of_GetMcuFwVersion 0096                             __size_of_crc8 004E  
                           __size_of_main 0062                    ?_GroupStatusAndVersion 01C2  
                    __end_of_SYNTH_ADDRES 0648                                  _msgCount 00CB  
            _TMR0_DefaultInterruptHandler 000000                         ??_DATAEE_ReadByte 0018  
               __end_of_ADC_GetConversion 3478              __size_of_SWSPI_DAC_send_bits 0058  
                   __size_of_UpdateRxFreq 0052                       Make32bitsArray@data 001A  
                   __size_of_UpdateTxFreq 0074                        SWSPI_send_word@idx 002C  
                             _groupsArray 00ED                           ??_PLLInitialize 0030  
                                _testLeds 287E                   __size_of_BlinkErrorLeds 005E  
                                int$flags 0048                  __size_of_Make32bitsArray 0058  
                              strtol@base 0028                                strtol@sign 0060  
               __end_of_FLASH_IsWriteDone 37C8        __end_of_INTERRUPT_InterruptManager 00DC  
              _INTERRUPT_InterruptManager 0008                    __size_of_ZeroBitsArray 001E  
                         EepromWrite@data 001B                           ??_SwSpi_Clk_Pin 0019  
                     __end_of_DacSetValue 269C                       _EUSART1_Receive_ISR 3478  
                __end_of_SwSpi_Set_CE_Pin 31CA                         ?_FLASH_EraseBlock 0018  
             __end_of_InitRxMessageParams 34FA                                  exp@coeff 064C  
                 __size_of_SetSynthRxOper 000C                                _MEMORY_ISR 3834  
                         ??_FlashReadUart 0060                                  log@coeff 066A  
                 __size_of_SetSynthTxOper 0030                __size_of_PLLUartInitialize 0002  
                  SWSPI_send_word@phrType 002E                        ??_FLASH_EraseBlock 001C  
                              _INTCONbits 000FF2                               ??_eval_poly 008B  
                             _sampleArray 016E                               _sampleCount 00C7  
                                isalpha@c 001D                                  isdigit@c 001A  
                  ??_INTERRUPT_Initialize 0018                                  memset@p1 0018  
                       ??_readUartMessage 01C4                 _SetConversionResultFormat 37D4  
                __end_of_FlashSampleWrite 1836                                  intlevel2 0000  
                            _UpdateRxFreq 2D96                              _UpdateTxFreq 2798  
                    ?_EUSART1_Receive_ISR 0001                     __end_of_SetMcuRunTime 30CE  
                        ___lwmod@dividend 0001                __size_of_GroupSynthesizers 009C  
                                isspace@c 001A                          ___lldiv@dividend 0018  
                 ?_PIN_MANAGER_Initialize 0001                   __end_of_ClearMcuRunTime 3750  
                              _RCSTA1bits 000FAB                                  isupper@c 001A  
                ReadIntFromEeprom@address 0026              __end_of_EUSART1_Transmit_ISR 32AE  
                           ??_BlinkOkLeds 0018                          ??_ADC_Initialize 0018  
                      Make32bitsArray@idx 0020                         _TimerSamplingFlag 00D7  
                           AdcConvert@idx 00BE                       _SetAdcOperationMode 37E0  
                           _isReWriteDone 003B                      SwSpi_Clk_Pin@phrType 0019  
                          InitRxSynth@idx 002F                     SwSpi_Data_Pin@phrType 0019  
                 SwSpi_Set_CE_Pin@phrType 0019                    __size_of_EUSART1_Write 003C  
                ??_SwSpi_Set_Dac_Sync_Pin 0018                         EepromRead@address 0019  
                        ___lldiv@quotient 0020                          _GroupFlashMemory 3002  
                         ___lwmod@divisor 0003                           _TMR0_Initialize 3350  
                         ___lwmod@counter 0005                                  toupper@c 0018  
              ReadIntFromEeprom@numOfByes 001A                         __CFG_T3CMX$PORTC0 000000  
                    ?_SetAdcOperationMode 002C                   ReadIntFromEeprom@retVal 0022  
                          InitTxSynth@idx 002F                             ??_EepromWrite 001C  
                           _ZeroBitsArray 367C                                _AdcConvert 1022  
                   ??_EUSART1_Receive_ISR 0001            __end_of_PIN_MANAGER_Initialize 3002  
            GetIntFromUartData@dataRegArr 006A                         __CFG_FOSC$INTIO67 000000  
                         _PIN_MANAGER_IOC 3830                         ?_StoreIntInEeprom 0021  
                        ??_SendAckMessage 0025                __size_of_ADC_GetConversion 0030  
                        ??_SetChannelMode 002E                        ??_StoreIntInEeprom 0028  
                             _DacSetValue 2618  
